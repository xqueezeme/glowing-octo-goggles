{
    "title": "A Satyr's Mate Ch. 13",
    "pages": [
        "CHAPTER THIRTEEN\n\nOur Legacy\n\nMari birthed a satyress. They named her Agda. Unlike her mother, Agda inherited my unruly mane. It made her appear very Baltian, except perhaps for the telltale satyr legs and hoofed feet. She had two bumps for horns that could only be detected by feeling with one's fingers. From the waist up, she appeared all human. \n\nShe was every bit as independent as Mari had been as a lambkin, though, and she matured quickly. She was all satyress inside, possessing the stubborn willfulness of her satyr bloodlines, and this presented some challenges for Mari and Finn. \n\nThey'd thought they would raise her in the Baltian village. The challenges of that were immense as the pace proved to be too slow for Agda. She longed to be free to run with the other lambkin in the flock. Mari took her there several times per week but it wasn't enough for her. Within a day of being back at home, she'd become restless and unruly again. \n\n\"I have a favor to ask of you, Mother.\"\n\nI looked up from my stitching to Mari's concerned face. \"What is it? Is everything alright?\"\n\nMari shrugged off my concern. \"Agda needs to grow up with the flock. Finn hasn't wanted to accept this, but I think he will if he knows she is being looked after by you and Father.\"\n\n\"She's not weaned, yet.\"\n\n\"Valame will help me to express milk into containers for Agda. She doesn't require much, and only once a day. Anyway, I'm not just planning to drop her off and forget about her. I'll come visit every few days. Can you do this for us?\"\n\nIt was the first time Mari had ever asked for my help with anything. \"Of course we will look after her.\"\n\n\"She doesn't like to be fussed after, and she often resists eating. When she starts to jabber a lot ...\"\n\n\"She needs to go down for a nap. Yes, she's just like her mother was as a lambkin.\"\n\n\"I don't remember being this difficult.\"\n\n\"No, you wouldn't, but you were every bit as obstinate. We can handle it.\"\n\n\"That's a relief, because I'm not sure, but I think I might be pregnant again.\"\n\n\"What? How is that possible?\"\n\n\"We ... well, we didn't think ...\"\n\n\"Are you happy about this?\"\n\n\"I guess. I'm more shocked and confused than anything else right now. I didn't think it possible or we would have been more careful.\"\n\n\"This is good news, Mari. Your father will be thrilled.\"\n\n\"Yeah, I know. His theories, and everything. Listen, Finn is probably back home from work by now. Agda is with the flock. I told her to come here at dusk.\"\n\n\"You didn't tell her of the arrangement?\"\n\n\"No. She'll be happy, though, so no worries there. She won't even miss me, I'm sure.\"\n\n\"Is that how you would've felt if I'd have left you?\"\n\nMari frowned. \"No. You would never have done something like this, though.\"\n\n\"It doesn't make you a bad mother, Mari. We are constantly faced with choices that have no clear right or wrong path. You will know right away if this is the proper solution for Agda.\"\n\n\"I'll visit tomorrow morning, after Finn leaves for work. I'll talk to her about it, then.\"\n\nI smiled and nodded at her wise decision. \n\n\"I need to get going before Father arrives. I'm not ready to talk about my pregnancy or how it happened so quickly, and you know he'll pry.\"\n\nI chuckled. She was absolutely right about that.\n\nSo, that was how we came to having another lambkin in the den. The arrangement settled Agda down considerably, and eased any remaining tension with Aeron, though he was growing less and less steadfast on flock rules. Mostly because of his attachment to Lena. \n\nThey'd become practically inseparable, and in those rare moments when they were apart, Aeron had difficulty focusing on business. Because of this, his own offspring were beginning to challenge his alpha standing. Dolphus didn't like it. \n\nI assumed Dolphus was troubled because Aeron was his friend. Dolphus reminded me that only a human would place such emphasis on emotion in a situation like this. He didn't like the challenges because there was no other satyr as capable as Aeron at leading the flock. It was as simple as that. \n\n\"You promised to do something for me, do you remember? When you were tied in the woods?\"\n\n\"You can't be referring to the hot springs because I allow you to do that every time now.\"\n\n\"Non. I refer to the last agreement.\"\n\n\"I remember. The one involving Aeron and Lena.\"\n\n\"Precisely.\"\n\n\"Now might not be a good time with all the opposition Aeron is facing.\"\n\n\"Breeding season nears. His focus is lost. Now is the perfect time. Aeron and I are planning to oversee training exercises tomorrow. Lena will most likely accompany us. I would like for you to join us.\"\n\n\"What are you hoping to accomplish with this?\"\n\n\"I will guide him on how to relieve the tension that is rising inside him. The very one that is scrambling his thoughts.\"\n\n\"What if he rejects what we're doing?\"\n\n\"He will not. You must trust me on this point.\"\n\nI did trust him. After all we'd been through, the number of times Dolphus had saved my life, I trusted him completely. \n\nThe following day began fairly normally. After our morning meal, we met Aeron at the training site and watched their daily drills. Lena didn't join us for another hour, having an injured lambkin to look after. It wasn't one of her offspring, but she'd come to be very good with nursing wounds, probably due to Faustus, and so she often cared for others in this way. She'd come to be a contributing member of the flock and this elevated her status significantly. \n\nInstinctively, I tried to move away from Dolphus and Aeron so I could speak privately with Lena. It wasn't to divulge Dolphus' plan, just habit. Satyresses didn't often mingle with satyrs outside the breeding season. Dolphus stopped me, though, by pulling my back against his chest and holding me there. Lena stood between me and Aeron. \n\nDolphus started out rather slow, his palms nonchalantly caressing my breasts as he and Aeron engaged in conversation. Then he began absent-mindedly tugging at my nipples until they protruded obscenely on their own. \n\nAeron didn't seem to notice at first, but I could see that it was making Lena uncomfortable. She glanced down quite often at his hands as she shifted from one hoof to the other. \n\nI was about to stop Dolphus when I noticed Aeron's nose beginning to quiver. He didn't look at us, though, instead he turned his attention to Lena, eyeing her with curiosity. \n\nDolphus slid his hand down my abdomen until he was cupping my womanhood in his palm. I could feel the tension rising within me. The warmth of his palm heated the entire apex between my thighs. I widened my stance to afford his hand better access and witnessed Lena taking notice.\n\nBeing neither shy, nor modest, Lena gawked openly at Dolphus' hand as he proceeded to penetrate my eager folds with his finger. I turned my face so that I could watch her reaction. It was subtle, but nonetheless clear. Her pupils were dilated, her breathing erratic, and perhaps the most obvious, her thick nipples were swollen and rigid. I allowed my own gaze to linger on them for a long time. I'd always secretly envied her nipples. Their thickness was perfect for suckling, and the way they protruded ... my mind suddenly went hazy, swimming in a sea of lust. I bucked against Dolphus' jabbing finger, seeking that release that I so desperately wanted.\n\nAeron picked up Lena's aroused scent. He moved behind her, pushing her forward until her hands were on the ground, her hind still high in the air. Without hesitation, he positioned his cock at her entrance and thrust inside her. Grunting with each stroke, he proceeded to pound his cock into her. A moment later, her legs wobbled and her back arched as she mewled her release. His climax followed with the next stroke. \n\nWatching them like that and knowing that we'd prompted them to do it, tipped me over the edge of my own climax. I soaked Dolphus' hand with my juices. It had been a very powerful release for me. \n\nAeron's cock remained buried deep inside Lena. Judging from his expression, he hadn't quite gotten enough. Dolphus noticed this, too. I wondered why Aeron didn't just continue to take Lena. He was in position to do so and she was quite willing, judging from the cooing sounds she was making. \n\nDolphus turned me around to face him and then pressed on my shoulders until I had no choice but to drop to my knees. His member was swollen, erect, and leaking clear fluid. I didn't have to be told what he wanted. My mouth immediately closed around the head of his cock, my tongue laving the delicious deposits there. I was hungry to taste him and made it known through my eagerness to suck and lick his beautiful cock. \n\nDolphus swept my hair back and held it in his fist so that Aeron could get a clear view. Within moments, Aeron commenced to rocking his pelvis. Gently at first, then with increasing speed and force until he was pummeling them both toward another climax. \n\nDolphus pulled out of my mouth just as his cock was beginning to spew. His cock sprayed strings of milky fluid over my hair and face. A moment later, Aeron growled his release. \n\nI was lifted to my feet. My adoring mate cleaned the remnants of his release from my face, then locked me in a deep kiss. When we broke from our embrace, I noticed that Aeron and Lena were in their own affectionate cuddle. There was no doubt in my mind that they were true mates. Only a mate would show affection like that. \n\nAeron released Lena and instructed her to join the other satyresses. He had work to do, but would find her later. Dolphus nodded at me to go with her. The old Aeron was back and ready to focus on his responsibilities again. Dolphus' plan had worked. At least it got them started. The rest would be up to Aeron. One thing I was sure of, it would only get easier for Aeron each time he indulged himself with Lena. \n\nMating season approached too quickly for me to even worry about how it was going to be different for us. It would have been a waste of time to worry about that, though, because it was even better than it had been before. Since my scent did not change throughout the season, Dolphus remained eager to mate for six straight weeks. It was the longest mating season we'd ever experienced. By the time it was over, I was more attached to him than ever, and sickeningly submissive.\n\n\"You act more like a kitten than my Baltian tigress.\"\n\n\"Stop teasing.\"\n\n\"Non, that I cannot do. You are mine to tease.\"\n\n\"I am yours with which to do many things.\"\n\n\"Ah, yes. Are you feeling needy again so soon, my sweet mate? Have you not had your fill?\"\n\nI shook my head as I eyed him alluringly. \"I will never have my fill.\"\n\n\"Neither will I. For this there is no cure. Each season my attachment to you grows stronger. This is problematic for my position in the flock.\"\n\n\"What are you saying?\"\n\n\"I'm saying, love, that I am stepping down.\"\n\n\"Dolphus, you can't. The flock needs you.\"\n\n\"Yes, Shi, but not as a guardian; as a guide. You and I must share this miracle of how we are together so that others may experience it for themselves. It is our legacy.\"\n\nIt was a concept that I hadn't given much thought to outside of childrearing. Obviously, Mari, Lucius, and Draco, and all of their offspring were our legacy, but there was also our contributions to the future generations of the flock. If by some miracle it changed the breeding cycle to allow for more offspring to be born, then that would really be something to have passed along. \n\nOnce the weather broke and spring was nearing, Lucius requested to accompany the young Baltian-Timaean couple on their trip to Timaeus. I was concerned, as any mother would be, about him traveling so far from home, but I kept it mostly to myself. Dolphus convinced me that Lucius was no longer a lambkin and quite capable of caring for himself. Somehow that mattered very little to me as I waited for him to return. He would never be too grown for me to worry about his safety, I decided. \n\nWith Agda and Draco so close in age, not even separated by a full season, and essentially growing up in the same home, they developed a very interesting relationship. Like most siblings might act, they argued and rivaled, sometimes so viciously that we'd kick them out of the den to go settle it. Unlike most siblings, however, they were inseparable. One never ventured out without the other one. \n\nI worried about what would happen when Draco was pushed out of the satyress circle to go spar with the other young bucks. Agda would not be able to follow him any more than he would be allowed to stay beyond maturity. This practice had never come into question as satyrs do not become attached to one another, typically. Not that you could tell from our family. Dolphus and I were clearly a mated pair, and Mari had chosen Finn as her exclusive mate. There seemed to be something in our bloodline, or maybe it was just the way we were raising our offspring, that seemed to promote that type of behavior. \n\nDraco and Agda's situation brought another question to mind: Is their attachment an early sign of being a mated pair, or are they merely close family members? There were no rules against incest in the flock. It wasn't against the laws of Sibiu to engage in incestuous relations, only to marry one's own sibling or child. Draco and Agda were Uncle and Niece. While it wouldn't be optimal for them to mate, it would be allowed by even the strictest of court systems. \n\nI didn't like the thought of it, though. I continued to try and separate them, if for no other reason than to prepare them for the upcoming split that their situation would create. I was wholly unsuccessful in my efforts. They just found ways around me and no one, not Mari, Finn, nor Dolphus shared my viewpoint on interfering. They were far more willing to allow mother nature to take her course. \n\nIt was a lesson that I was struggling to learn. I still clung to some of my childhood teachings. I also held onto the notion of mind over matter; that reason was stronger than emotion. I thought that by explaining the dangers of inbreeding, we might convince them to change their course. It did nothing. When Draco was fully mature, he found a cave dwelling in the grotto area halfway between the Baltian village and our domicile. A month later, Agda joined him there. They announced that they were a mated pair, regardless of not yet producing offspring. \n\nI never thought I'd witness a pairing to rival mine and Dolphus'. Draco and Agda redefined the term. They were sickening to be around, always finishing each other's sentences, fussing after one another, and then passionately kissing as if they'd just been reunited after being apart for years. I honestly felt bad for trying to separate them because they really did belong together. \n\nI began to wonder how much we really chose our mate versus what was predetermined. Had Dolphus really chosen me, or did I produce the exact pheromones that attracted him, thus it was neither his choice, nor mine? And what of Loomis and Haibu? Was their alternative preference born in them, or did they choose it?\n\nConversations about these very things often kept Dolphus and I up way beyond high moon. His insights and theories on such matters were fascinating to me and I couldn't get enough of them. \n\nLucius missed another mating season, and I was beginning to wonder if he was ever coming back. I feared we'd lost him forever. But just before the first winter snow, we got word from Mari that he'd returned. With him, he brought a young wife. \n\nWe were surprised to hear that he'd gotten married. We discovered that it was the only way he could bring his mate back with him. Like me, Callisto was half Baltian and half Sibian, and her Sibian side of the family insisted on a proper wedding. It made sense, but I was still disappointed, nonetheless, at having been robbed of the opportunity to witness the event. Lucius tried to convince me that it didn't matter; it was just a ceremony. I knew different, having raised him. \n\nLucius and Callisto settled into our domicile until they could decide where to live. We tried to give them space and privacy, fully knowing what a shock the flock environment probably was for her, but it proved difficult. I hadn't realized how much I'd changed my lifestyle until I saw it through the eyes of a young girl that was me only eight years earlier. My behaviors were more in line with satyr morals than Sibian ones, and my lack of propriety with relation to clothing and sex were highly shocking to her. \n\nValame and I spent some time preparing Callisto for what to expect as a human mother of a satyr. She and Lucius both needed to be aware of the dangers. I knew she probably wouldn't want to stay with the flock long term, but we managed to convince them to at least stay through their first birthing with people who were experienced at such things. We were thankful for this small miracle.\n\nMari and Finn had their second lambkin. It was another girl, which surprised everyone. This time when the little satyress began showing signs of independence, they didn't hesitate to work out the same arrangement as Agda. Our den was full to capacity with the addition of Brighid, and I began to realize that there was going to be no end to it. Unlike other satyrs, our grown lambkin gravitated back to our domicile. \n\nOther than the initial awkwardness at mating season, it was lovely having everyone around. Even Dolphus didn't seem to mind it. Having a tight-knit family unit made me feel stronger and safer than I'd ever felt in my life. But I wondered how long it would last.\n\nMy half brother, Father and Valame's son, Nuadha, really exemplified the vastly different rates at which a human developed versus a satyr. Nuadha was barely older than a toddler, while my youngest satyr boy, born after him, was already fully grown and recently mated. It illuminated what I thought was an even bigger problem for the survival of the satyr species. Their numbers would have to dramatically increase in order to offset the shorter lifespan.\n\nDolphus agreed with my assessment but had no solution. He was still tabulating numbers and making predictions. I'd come to find out that Lucius' visit to Timaeus was not only to explore the region of his ancestry and ultimately find a wife, but to connect with a nearby flock and gather information about their numbers. What he brought back was alarming. \n\nThe Timaean flock was experiencing the same phenomenon as our flock. Heavy male to female ratio with dwindling numbers overall. Their satyrs had taken to mating with Timaean women with mixed results, but eventually no Timaen woman in her right mind considered such a match for fear of perishing in lambkin birth. The stories that Lucius shared with us were dreadful. They brought emotions to the surface that I had long since buried. \n\nBy plotting numbers on a graph, Dolphus and Lucius came to the same conclusion. The Timaen flock would cease to exist very soon, within Lucius' lifetime. \n\n\"We should do something, Dolphus. We could share with them what we know about successfully birthing lambkin.\"\n\n\"Non, Shi. We must let this happen.\"\n\n\"Why?\"\n\n\"It is mother nature's course. It is not our place to decide what species live and die.\"\n\n\"Lucius, were there any pregnant Timaean women while you were there?\"\n\n\"I don't think so. Besides, we'd never make it in time to do any good.\"\n\n\"He's right, Shi. We can't help them.\"\n\n\"What does this mean for our flock?\"\n\nDolphus sighed heavily. \"We are facing the same fate. It will not happen in our lifetimes, but not long after. We are a dying breed.\"\n\n\"It's not fair.\"\n\nDolphus pulled me into his arms. \"Fairness is a human-created concept. It has no place in nature. You must accept that change is the natural order. By Osmos' will or by the natural earth around us. Either way, it is inevitable.\"",
        "\"Then what have we been fighting for this whole time?\"\n\n\"We've been encouraging our evolution back to human form. Both Mari and Lucius understand this. By mating with humans, their offspring will live slightly longer lives, be able to breed more often, and will have a stronger attachment to their offspring so that they may raise them. At some point, there will be no satyr traits visible.\"\n\n\"What about Aeron and Lena? And Draco and Agda?\"\n\n\"They could no more resist their mates than I could resist you, my love. They will live full lives and create their own legacy. You mustn't worry about the things you cannot change. We should now turn our attention to Callisto. Her belly grows each day.\"\n\nI cringed when I realized that in my fit of passion, I'd suggested we leave for Timaeus to help their women birth lambkin when we had Lucius' wife to tend after. It was insensitive of me to even suggest leaving Callisto. \n\n\"Oh, Lucius...I didn't mean to suggest we'd leave ... I'm just not dealing very well with this news. I don't see how the two of you can be so, so, scientific about it all. Don't you care about any of this?\"\n\nThey both attempted to answer, but it was Lucius who spoke the loudest. \"Of course we care. But that doesn't change anything. It will happen regardless of our disposition.\"\n\nI raised my hands in defeat. I could not understand where they were coming from any better than they could understand my viewpoint. I decided that the best thing for me to do was to bring my focus closer to home and on more immediate issues. Callisto and Lucius needed us. \n\n***\n\nSpring broke early in the mountain range. Along with it came a few surprises. \n\nCallisto birthed a satyress that they named Eirene. She reminded us all of Mari with her long straight hair and hazel eyes. Her personality, however, was quite a bit more docile. She was also a lot more petite than most lambkin. Callisto had very little trouble birthing her. \n\nWe were ecstatic to be a part of her beginning. We still had Mari's lambkin, Brighid coming around every so often, so once again, our den was full to capacity. Brighid's presence proved particularly helpful to our family.\n\nExhibiting the strong possessive trait of a satyress, Brighid defended Eirene like a sister when they were in the flock. This was a huge relief to Callisto who didn't feel at all comfortable around the satyresses, especially Shala. While I'd earned a lifetime of not being hassled by Shala, the courtesy was not extended to my next generation. Even though Shala was no longer producing offspring, and had thus lost her standing in the flock, she was still a force to be reckoned with. \n\nIn the late spring, though, it was Draco and Agda that brought us the biggest surprise of all. We hadn't seen them in months, due to the heavy snow. When they were finally able to emerge from their den with their newest addition to the family, we were all shocked by his appearance. It was a boy that they had named Plato. He appeared to be fully human. And if that wasn't enough of a surprise, Agda was once again impregnated.\n\nI couldn't understand how two satyrs could produce an offspring that appeared so human until Dolphus explained it to me. It was a numbers game, it seemed, the odds being made higher through inbreeding. Draco and Agda had uncovered the recessive trait of human legs and feet. \n\n\"They just sped up the natural progression. I'd actually thought that we might produce a human child. But it seems that I have been a bit too impatient with the natural evolution, myself.\"\n\n\"Are you disappointed that we didn't have a child?\"\n\n\"Non. It satisfies my dominant nature for our lambkin to look like me.\"\n\n\"Is there a chance that either Mari or Lucius will produce humans?\"\n\n\"There is a chance, yes. Why do you ask?\"\n\n\"I think humans have more options available to them. If this is a dying breed, as you say, then soon there will only be a few left. I hope that our offspring are not among those last remaining ones. How sad that would be...\"\n\n\"But what an honor, yes? I suspect it will be Aeron and Lena's bloodline that holds out to the end. It is the strongest in the flock right now.\"\n\n\"That is their legacy, then?\"\n\nDolphus nodded. \"Are you still struggling with this concept of allowing nature to take its course?\"\n\nI nodded. \"I understand it. It just feels wrong.\"\n\n\"Perhaps you will allow me to demonstrate?\"\n\n\"Demonstrate?\"\n\nDolphus strode to our storage space and fetched a handful of tethers.\n\n\"What are you planning to do with those?\"\n\n\"Tie you up. Lucius and Callisto will not return for some time. Come. Up on the bed.\"\n\n\"And if I refuse?\"\n\n\"You will not refuse me this.\"\n\nI climbed up onto the bed, somewhat unwillingly, as I was not in the right frame of mind for games. \"I think you'll come up with just about any excuse to bind my limbs.\"\n\n\"This is true. The thought arouses me. But there is a purpose to this session.\"\n\nDolphus bound my wrists to the insides of my ankles, forcing my knees to bend. \n\n\"Try to free yourself from the tethers.\"\n\nI yanked on the bindings with all my strength and all it did was create an annoying friction. It didn't so much as afford me an inch of freedom in movement. \"Dolphus, I'm not in the mood for this today.\"\n\n\"Tell me what is going through your mind right now.\"\n\n\"I'm not so sure you want to know. I'm thinking that I have more productive things to do than this. I promised Callisto I would make a curtain to afford her some privacy and I have not finished Nuadha's birthday present.\" I yanked on the restraints again in frustration. \"I don't have time for this...this...whatever it is.\"\n\nDolphus chuckled at my outburst. \"And yet your attempts to free yourself are useless.\"\n\n\"Dolphus, just untie me. Please.\"\n\n\"Non, little one. You must endure this.\"\n\n\"Come on, you know I have things to do.\"\n\n\"Yes, I know. But you must do this now.\"\n\nI struggled to free myself again, the frustration and anger mounting within me. I was met with a swift swat across my exposed bare bottom. \"Ow!\" I shot daggers at him with my eyes, opening my mouth to tell him what I thought of his little game, but I stopped when he raised his hand above his head. The blow he could deliver from that stance would cause quite a bruise. I wisely clamped my mouth shut.\n\n\"You mustn't pull on your restraints or you will hurt yourself. You must accept that this is where you are and remove all other options from your mind.\"\n\n\"I can't...\"\n\n\"You can, Ashira. You will stay here until you do.\"\n\nI heaved a sigh. There was no arguing with a stubborn satyr. Especially a dominant one who had the upper hand. I was stuck there for as long as he decided, and unless I gave into him, I was going to be there for quite a long time. \"What are you planning to do with me?\"\n\n\"That is not your concern.\"\n\n\"What does that mean? It's my body.\"\n\n\"I disagree. It is my body and I will do with it as I please for as long as it pleases me.\"\n\nI mewled in frustration. Even though I knew I should give in, there was something preventing me from doing so.\n\n\"This is not so easy for you when you are not aroused. You cannot see the benefit, therefore, you are not able to surrender your control.\"\n\nIt was absolutely true what he was saying. When he'd restrained me before, I was aroused, so I didn't fight it. I liked his teasing. I knew that it would lead to my eventual release. But he'd not promised anything sexual. I had no idea what was in store for me, so I fought it.\n\n\"Do you trust me, Ashira?\"\n\n\"You know I do.\"\n\n\"Then you must submit to me. You must give up this futile fight for control. You cannot win.\"\n\n\"I can't stop trying.\"\n\n\"Yes, I know. You are a born fighter. You stand your ground bravely. You've proven this many times. You must understand that submitting is not the same as giving up. You have no control now, you are just unwilling to accept that. Perhaps you should begin by changing your perception of your circumstance.\"\n\nI didn't want to accept that I couldn't change my situation, but I was being herded in that direction with every door that he shut along the way. I couldn't reason with him to release me. I couldn't free myself with force. I was out of options. \n\nI lay there for several, long, silent minutes. The only sound I could hear was my own heartbeat thumping in my chest along with my shallow panting. They were my natural fear responses. \n\nThe thing was, I wasn't really in danger. There was nothing to fear about living in the moment. No pain or suffering to escape. \n\n\"You have lived so much of your life in chains that you have developed a strong need to control what happens to you.\"\n\n\"But I didn't. I grew up free.\"\n\n\"On the contrary. You were bound by Sibian discrimination.\"\n\nThe loneliness of my childhood came back to me. There was no one to protect me against their hurtful jibes, their exclusion. I had no one but myself until Dolphus brought me to his home. I kept my hatred for them hidden in the same place I kept everything sacred to me, and I protected it all, so that no one could touch those things. My pride. My hatred. My heart.\n\n\"I have seen this beautiful creature from the inside. When she is not protecting herself, afraid of being harmed. When she is open and free.\"\n\nDolphus reached down to stroke my cheek. I filled my lungs with air and blew it out as I relaxed my muscles.\n\n\"That is better. Are you in control, Ashira?\"\n\nI swallowed and shook my head. \"No.\"\n\n\"To some extent, who controls you right at this moment?\"\n\n\"You do.\"\n\n\"And who controls me?\"\n\n\"No one.\"\n\n\"Guess again, little one. Can I force the skies to produce rain? Can I prevent my own death? Or yours, for that matter? Or the death of our firstborn cosset?\"\n\nI thought for a moment, and then realized where he was going with his reasoning. \"You're not in control, either.\"\n\n\"Non. None of us are.\"\n\n\"But we have choices.\"\n\n\"Yes, we do. We must use those choices on things that matter. We must not try to change the things we cannot control.\"\n\n\"It's hard not to try.\"\n\n\"It is if you go on believing that you know what is best. Do you think this is the best use of your time today?\"\n\nI shook my head.\n\n\"Mmmm, perhaps you will see things differently by the time I release you. We cannot know what will happen to us next, whether it is good or bad. We are shortsighted, basing our assessment on the information available to us at the moment.\" \n\nDolphus lifted his hand and delivered an open palm slap across my hip. I flinched at the immediate sting. \"Ow! Dolphus!\"\n\nHe cocked his brow at me, challenging my insolence. \"Are you trying to control my next action? Will I strike you again because of your tone? Will I leave you alone here? What will I do next?\"\n\nI shook my head. \"I don't know.\"\n\n\"That is right.\"\n\nHe leaned down and swiped his tongue up the entire length of my slit. I was not at all expecting him to do that. It sent shivers over my entire body. \n\n\"Ah, I have surprised you. I did something you neither expected, nor manipulated. Yet, I think you enjoyed it. How can that be?\"\n\nHe leaned partway down, lips parted as if to do it again. I let go a tiny gasp and less than a second later, I felt the sting of his palm against my buttocks again. This time he struck me three times in rapid succession. \n\n\"Accept that you have no control over what will happen to you. Free yourself of this burden you carry.\"\n\nHis warm, wet tongue was once again on my slit. This time luxuriating in the act a bit longer, dipping between my plump outer folds to the warm flesh contained within. \n\nMy back arched in response. \"Oh!\"\n\nHe reached up to my breasts and pinched both nipples between his fingertips until I was hissing through the pain. \"Life is full of both pleasure and pain.\"\n\nDolphus slapped the sides of my breasts, and then slipped one finger inside my heated folds as he delivered a harsh smack to my hip. There was so much going on at once, it was difficult to decide whether to focus on the painful slaps or his now wiggling finger inside me. He didn't give me long to decide before changing things up again. He pulled out his finger and then began to press it into my anus. \n\nI tried to squirm away from the intrusion, but could feel his finger inching inside despite my attempts. His free hand closed around my neck to hold me still as his enormous knuckle bore into my unyielding opening. \"Accept what is happening and it will be infinitely easier to take.\"\n\nI shook my head and held my breath. His finger stilled, not advancing, but not retreating either. I finally had to suck air into my burning lungs. When I released the breath I was holding, the discomfort subsided tremendously. \n\n\"Do you believe me now?\"\n\nI took another breath, exhaling completely to release the tension in my body. His finger slipped all the way inside, but it was far more comfortable than it had been previously. \n\n\"I will do as I wish with this body. Some things may cause you discomfort.\"\n\nHe lowered his mouth to my slit and swirled his tongue around my sensitive bundle of nerves. I moaned at the heated rush it created. I'd forgotten all about the intruding digit until I could feel it sliding in and out as he continued to work me with his tongue. It was such a contrast in sensations. One bordered pain, while the other was highly arousing. I fought to manage the competing forms of tension. While his tongue made my insides coil, I had to constantly remind myself to breathe and relax to keep the discomfort manageable.\n\nDolphus removed his finger entirely to deliver a jarring slap to my buttock, never changing what he was doing with his mouth and tongue. The sting of the slap suffused, tingling as it moved down my leg and up my torso. He delivered a slap to the other side, causing the same reaction, then continued to repeat the action, alternating sides in a random fashion. Each blow created a wake of gooseflesh until I was trembling all over from it, unsure if I wanted him to stop, or I wanted more. \n\nHe lifted his mouth from my now swollen and wet folds to drag his claw-like fingernails over the heated flesh where he'd repeatedly slap me. I was about to cry out my protest when the climax overtook me. I screamed in a mixture of bliss and confusion, my muscles contracting repeatedly as wave after wave continued to come. He'd managed to push me over without even touching that area. By causing more pain.\n\nMy mind was still reeling from it all when he shoved his cock inside me. He continued to rake his fingernails over my sensitive flesh as he pummeled me. I could hardly catch my breath before I was tumbling right into another climax. And just as I was about to recover from that one, he pinched my buttocks to tip me over again. That time he joined me, growling as he arched his back to drive his cock deep within my channel to unload.\n\nIt proved to be quite an intense experience. One that rivaled the best sex we'd had thus far. When I finally began to come down from it, emotions rushed to the surface at once, causing tears to sting my eyes. I didn't try to stop the tears or hide my face from Dolphus, I just let them fall down the sides of my head to the bedding beneath me. \n\nDolphus silently watched me cry. He didn't wipe my tears or console me in any way. He merely accepted that it was what I needed to do and allowed it to happen. \n\nI can't describe why that comforted me, but it did. Maybe it was because he didn't try to stop it from happening. While it wasn't pretty to watch, I'm sure, it was what was needed. I finally started to get what he was trying to teach me.\n\nLong after I'd finished crying, when my eyelids fought to stay open, he released me from my bindings. \n\n***\n\nI ran my fingers over the butterfly net I'd crafted for Nuadha's birthday present before shoving it into the knapsack along with some treats I'd prepared. Glancing over my shoulder, I made note of Lucius and Callisto's absence. \n\n\"Did Lucius mention if they were coming with us?\"\n\nDolphus shook his head. \"Non. We should not wait for them.\"\n\nI nodded in agreement. It was Father and Valame's first party since their wedding. I didn't want to be late. Standing up, I smoothed my hands down the garment I was wearing. \"How does it look?\"\n\n\"I'm trying not to notice how it hugs your luscious curves or we may not make it there ourselves.\"\n\nI giggled as I recalled what happened the last time I'd worn a dress to their home. \"You mustn't think such naughty things. Your loin cloth will protrude.\"\n\n\"Don't remind me. Let's go.\"\n\nI traversed the trail to the Baltian village with ease. I'd come to know every rock and bush along the way. I wasn't near as swift as a satyr at negotiating the terrain, but I no longer felt like I slowed Dolphus down to the point of frustration. \n\n\"Do you remember when you required my help to get down this path, little one?\"\n\n\"I was just thinking about that. It's been many years. It was about this time of year when you bought me, wasn't it?\"\n\n\"Yes, it was.\"\n\nI paused on the landing area near our grotto. Near where Draco and Agda resided.\n\n\"Do you wish to visit the gravesite?\"\n\nI shook my head. \"No. It's time to put that behind me for good. I appreciate you creating that grave. I know you did it for me because you knew I'd want to look back from time to time. That doesn't do any good, though. He's gone and life goes on.\"\n\n\"I'm proud of you, Shi.\"\n\nI shrugged. \"I still wish for things. I wish we'd had more cosset.\"\n\n\"Nonsense. We've not the space now.\"\n\nHe was right about that. I once thought our den was massive, now it felt cramped. Who knew what the next breeding season would bring.\n\nWe stepped down the last steep embankment and then I bolted ahead at a run with Dolphus chasing me. It was a game we liked to play before reaching the village. Just before the path opened up to the field at the edge of the settlement, Dolphus scooped me into his arms and captured me in a deep kiss. When he released me, we were standing in the middle of a large circle of individuals. \n\nI glanced around at the faces, curious as to why they were staring at us. There was so many of them, too. Father, Valame, Nuadha, Finn, Mari, Agda, Draco, Brighid, Plato, Lucius, Callisto, Eirene, Aeron, Lena, Faustus, Ennus, all our extended Baltian family, plus a few other satyrs, Loomis and Haibu among them.\n\n\"This is your family, Shi.\"\n\n\"I thought...this is supposed to be a birthday party.\"\n\n\"It is a birthday celebration. Yours. We are celebrating the beginning of your life in Saia Heights. Each of us here has been touched by you in some way. Some of us more profoundly than others, although we don't always show it.\"\n\nDolphus swung me around so I could witness Faustus bowing in respect. Beside him stood a young buck with the telltale reddish fur of his bloodline. I realized that it must be his firstborn lambkin and a tear stung the corner of my eye. I blinked it away as I glanced toward Lena and Aeron. \n\n\"In a few short seasons, you have managed to amass quite a large family. You mustn't ever worry about being alone. If one of us leaves, another will take his place at your side so you are always surrounded by family. This I promise you.\"\n\nI blinked and tears skated down my cheeks. \"How did you know...?\" I'd never shared with Dolphus my deepest fears about growing old and being alone. He'd just figured it out on his own. \n\n\"You are my mate. Do you think you can keep a secret from me?\"\n\nA round of knowing snickers erupted from the crowd.\n\nValame spoke up. \"Come, everyone. Let's eat before the little ones grow restless.\"\n\nThe circle seemed to collapse on all sides as the focus was no longer on me and Dolphus. \n\n\"How long have you been keeping this secret from me?\"\n\n\"Two agonizing months. Since Callisto weaned Eirene. I could see it was time for a reminder of how much you are needed. Look around you, Shi. There will always be someone who needs you.\"",
        "Faustus approached and nodded to Dolphus out of respect. \"I am guilty of not showing how thankful I am that you saved my life. Twice, in fact. First, when I was born, and then later, on that cliff ledge with Shala. I know you called out to those hunters to keep them from spotting me.\"\n\n\"I, honestly ... You saved my life, too. Without you, I might've crawled up and died from depression. You made me see beyond our loss.\"\n\n\"Tell her your news, Faustus.\"\n\nFaustus nodded. \"I am taking over the flock from my father.\"\n\nI shot an alarmed look up at Dolphus. \"Aeron is stepping down?\"\n\nDolphus nodded. \"You mustn't make a big fuss over this, but Aeron and Lena are a mated pair.\"\n\n\"When...?\"\n\n\"This past mating season marked two in a row of exclusivity for the pair.\"\n\nI turned to Faustus. \"Congratulations. I know you will lead them well.\"\n\n\"Thank you. Now, I must join my parents so we can spread the news together. We wanted you to be among the first to know.\"\n\nI watched Faustus take long, effortless strides toward his parents. It was hard to believe that he was so clumsy once. He'd grown into such an elegant creature.\n\n\"So, Aeron chose Lena over the flock?\"\n\n\"I don't think he sees it that way, non. He believes it was the path chosen for him by a greater force than himself.\"\n\n\"Is that what you believe happened with us? Was it a higher power that brought me to you? Or was it pure luck?\"\n\n\"What do you think, little one?\"\n\n\"A bit of both?\"\n\n\"Did you ever ask your father about the dice game he lost that resulted in your slavery?\"\n\n\"No.\"\n\n\"Ah, then let me enlighten you. The game had gone on for hours. Your father had gotten himself into Grachhus' debt and had nothing of value left to wager. He was to go on the auction block to repay him if he could not earn his money back. Grachhus offered him a final wager. If your father won, all debts were forgiven. If he lost, then you must go on the auction block in his place. Your father wouldn't even consider it until he heard the wager. \n\n\"As you know, a single dye has six sides, making the possibility of hitting that number on two dice, one in thirty-six. Grachhus' wager was that he would roll satyr eyes before your father rolled any combination of six. The odds were in your father's favor by a factor of ten.\"\n\n\"He didn't win, though.\"\n\n\"Non, he did not. Was that luck or some other force intervening?\"\n\nI pondered the question as the sounds of laughter and conversation filled the space around me. Could my life have gone any other way? \n\nI used to think that my life's path was a series of zig zags, changing direction to accommodate the chaos on all sides. As I glanced around the lawn, I didn't feel that way at all. Perhaps my life had been on a straight line path to this all along. It only felt like it shifted left and right because I was fighting it every step of the way.\n\nWhen I looked around me, all I saw was a meticulously planned miracle. Did I choose to head down that alleyway when the ogre was stalking me, or was I led there by another force? Would Dolphus have chosen me over his firstborn lambkin if he hadn't grown so attached to me first? And what of that attachment? He'd always said that he thought it chose him more than the other way around. What if Faustus hadn't needed me when he did? Would I have left Dolphus then? What if the arrow meant for Shala had found me, instead? \n\nA thousand little details all added up to the same conclusion. \n\nI wrapped my arms around Dolphus' waist as I looked adoringly up at him. \"I don't believe in luck.\"\n\n\"I am happy to hear you say this because I have another surprise to share with you.\"\n\n\"What is that?\"\n\n\"You are pregnant, little one.\"\n\nThe End\n\n********\n\nThank you for reading this story in its entirety. I do hope you enjoyed it. Please remember to leave a comment. I am interested in hearing your feedback. -Dakota Lynn"
    ],
    "authorname": "D_Lynn",
    "tags": [
        "offspring",
        "mate",
        "mating",
        "pregnancy",
        "nonhuman novella",
        "satyr",
        "alpha"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/a-satyrs-mate-ch-13"
}
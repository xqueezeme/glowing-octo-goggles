{
    "title": "Mia Mine Ch. 13",
    "pages": [
        "Note to dear readers. As Mia's story comes to a close, I want to give my deepest gratitude to those who have expressed their appreciation for this story. I have to admit, when I wrote what turned out to be the first chapter, I had no idea David and Mia would take me on such a meaningful and thought provoking adventure. I was amazed at how well the story went over, and the comments both public and private were so rewarding (most of them). So a simple try in a category I knew a little about, turned out to be a catalyst for learning and trying to relay some of the horrible treatment most all transgendered people have to endure just to survive. Mia also brought me many friendships here that I now cherish. Even though this is purely a work of fiction, and all the characters imaginary, one has to wonder, if we can dream this can happen, we can make it happen. \n\nThank you to all who have enjoyed Mia, and for sharing your thoughts. \n\n\u20aa* * * *\u20aa \n\nIn the three months following the end of Chapter 12, Mia returned home with David, Jonathan and Mindy became a couple, and Jonathan decided to buy the house next door to Mia and David. Vivian moved right from the hospital into the Eraew Foundation, and eight more of the girls from the streets had moved in. Christine was happy to have the house filling up, and happy that she had begun dating Detective Robinson. As we rejoin David and Mia, they are busily planning their wedding. \n\n\"It has to be by the water!\" Mia huffed. \n\n\"Ok, ok\" David smiled, enjoying her intensity. \"By the water it shall be, I know of a couple of wonderful places not far from here, I can take you there right now if you want.\" \n\n\"Great, thank you, I would love to see them.\" \n\nDavid and Mia got their jackets on and walked out to the garage, got into the car and began their scouting trip. David hadn't even completely backed out of the driveway when Mia started again. \n\n\"You know why it has to be by the water don't you? It's because we met on the water, on the ferry. We were supposed to meet on that trip, and we did, and look where it has taken us!\" \n\n\"You know, it so good to see your spirits and energy back up again my dear. I love how you think and how you express your thoughts.\" \n\nMia smiled at her husband to be. \"I wish I could fully explain how this feels. I don't think I have my own mind completely wrapped around it, but every day things just seem to be getting better. I love you so much for being with me through all of this, the surgery, the recovery, the therapy and just everything. You were always with me, and that is so important.\" \n\n\"You are my world my wife to be. The things I see in you are truly amazing and beautiful. You are my life, I want you at my side from now on till forever. We are together, a team, so I will always be there for you, just as you will be for me.\" \n\nMia's eyes filled with tears of joy as she looked over at her philosophical man. Her tears made her eyes glimmer in the street lights and David was taken aback, once again, at her beauty. \n\nSuddenly he had to push hard on the brakes, \"Geez, I got so lost in your beauty I almost missed the turn! The first place I wanted to show you is right down at the bottom of this road. \n\nAs they wound down the narrow road cut through the pines, Mia could see glimpses of the water shimmering in the light of the almost full moon. They finally got down to a little park. David tried to park the car on the backside of the parking lot so he could shine his headlights on more of the park. He kept them on as they both got out of the car and started walking hand in hand. \n\n\"It's a bit rustic, but I have heard of a few people attending weddings here and they said it was beautiful.\" \n\nMia looked around, and saw a covered area with a lot of picnic tables inside and imagined them all covered in cloth and full of food and drink. She could make out a little built out dock that had a long walkway to a large semi-circle area at the end of it. It was built out far enough she imagined to always be over water no matter how low the tide got. She closed her eyes for a few seconds and imagined sharing her vows with David out at the end of the dock, the water glistening in the sun, friends and family surrounding the happy couple. \n\n\"I love it,\" Mia purred as she snuggled up closely to David. \n\n\"Well, this is just the first place, I have two more we can look at. One is close enough we can check it out tonight, the other is a little further and we should look at it during the daylight. Actually we should look at them all in the daylight, so there is no doubt in our minds as to the best place for us.\" \n\n\"Take me away kind sir, I am enjoying the trip very much so far.\" \n\nThey returned to the car and retraced the drive up the narrow little road. \n\n\"Now the next one isn't actually on the water, but it is on a ledge overlooking the water, and the view is fantastic!\" \n\nDavid turned right off the beach road and onto the main road again. They traveled for about twenty more minutes, Mia talking of the wonders of the first place the whole time. \n\nThis time, they turned onto a regular street, and in a short while, into a very large parking lot. There was a large building at the end of the parking lot, and once out of their car, David led Mia around the side of the building to the front. As they turned the last corner, Mia gasped as she saw the view that the building had. A sweeping view of the water, the islands and inlets, and in the distance the glow from the lights of Seattle. \n\n\"This is beautiful!\" Mia managed. \n\n\"Yes, but it is a little more commercial. It is a community clubhouse that they use for meetings and parties, but soon realized it sat empty more than it got used. Someone had the bright idea to rent it out for weddings and other large functions and to use the money for community upkeep.\" \n\n\"That sure was smart, and besides, we'd be ok if it rained on \"our day\". \n\nMia walked around, peering into the windows trying to get a view of what the interior looked like. The small night lights didn't provide a whole lot of light, but she got the general idea. And since they were coming back during the day, she knew all her questions could be answered on their next visit. \n\n\"Two totally different, but beautiful in their own way choices you have shown me. I do love the way you think. Thank you for this, I needed to get out and be in the fresh air again. Too many hours in recovery and therapy have me starved for this.\" \n\nDavid reached over to hug her, and they kissed in the moonlight, overlooking the water. \n\n\u20aa* * * *\u20aa \n\n\"I wonder where David and Mia went,\" said Mindy. She was in one of the smaller upstairs bedrooms that she and Jonathan had made into her \"office\". A place where she could do her school work, keep her books, and have her large drawing and painting tables, easels, and accessories. She had her desk in front of the window so she could look out and see the water, and Mt. Rainier when it was clear. She had all but formally moved in. She spent many nights with Jonathan, and he made it clear it was \"their\" house and she was welcome, and wanted, to move in completely as soon as she was ready. She loved having her place in their house. \n\nJonathan had the other smaller room for all his photography equipment. He had gotten a large capacity desktop computer with three large monitors. He had gotten some very sophisticated photo imaging software so needed all the computer space and speed he could get. His computer was hooked up with the even larger bank of computers his new arm of the company put into their main office in Seattle. He loved that he could actually do a lot, if not most of his work from home. He loved having his own house, and especially this one. He smiled to himself as he remembered telling Mindy he was trying to buy it. Her enthusiastic squeal of approval still made him chuckle a month later. He also loved being neighbors with David and Mia. They were now more like family than just friendly neighbors. He was amazed and so happy at how close the four of them, and Mia's mother Christine had gotten. He never stopped thanking the Universe and himself for stopping his car to help out Mindy that first night they met. His musing was cut short when he heard Mindy's question. \n\n\"David told me he was going to show Mia a couple of the places he had found as possible wedding sites.\" \n\n\"It is so cool they are getting married,\" sighed Mindy, \"they are such a wonderful couple. I just love them both to pieces.\" \n\nJonathan smiled, he knew he felt the same way. \n\n\u20aa* * * *\u20aa \n\n\"Alright girls, let's get this place cleaned up,\" Christine said using her drill sergeant voice. The girls all hopped to their appointed jobs for the evening, clearing the table, loading the commercial dishwasher, cleaning the complete downstairs area of the Foundation's house. \n\nVivian smiled as she looked over at her friends, busy doing their appointed tasks. She was so happy to hear them giggling like little girls as they worked, but played a bit too. She remembered Christine telling her to let them have that type of fun, for most transgendered women never fully mature because they never had the girl orientated childhood. Most of them had to hide it from themselves, let alone from their friends and family. So to hear the squeals and giggles of little girls doing their chores together was not only a heartwarming but also so important for their growth as women. \n\n\"I never thought I would be happy doing housework, of course I had all but lost hope I would ever be a part of a household,\" she said loudly. \n\nThe rest of the group quickly agreed with Vivian's assessment as they continued on with their chores. \n\nChristine smiled broadly as she watched her minions happily going about their chores. The Foundation was doing well. In the last couple months they were one girl away from being full. She was in constant contact with Harmony Fleming, Mia's old friend from her company in San Francisco who ran the Foundation house down there. Her house was completely full, and a bit larger than the ten girl house Christine had. They had sixteen girls, with a long waiting list. The Foundation had become a huge hit with all the girls that had come into its fold. Both houses were run by caring, loving, and intelligent women. Both houses created a warm and friendly family setting for all the young transgendered girls, and most importantly got them off the streets and out of the hands of pimps and gang members. The loving care of the leaders and other members of the houses, plus the professional care that was offered was helping all of the girls get started on their new lives and showing them a way for each to follow their dreams and goals as proud and successful women. Word of the success of both houses had brought in more funding and overtures to start new houses in different cities. \n\n\"Nice job Vivian,\" smiled Christine as she looked over the sparkling kitchen. \n\n\"Thanks Christine, and thank you for taking me in and all you have done for me.\" \n\nVivian had been beaten by the ruthless pimp, Pain, and had been hospitalized for a week. She had come directly from the hospital to the Foundation house and was their second girl after Mindy. She had taken to this new life and way of being with all her heart and mind and was becoming a very valuable asset to Christine in helping some of the other, less open girls. \n\n\"Can you please come into my office? I would love to have a little talk with you.\" \n\nVivian nodded happily and followed Christine into her first floor office. \n\n\"Please close the door Vivian, I want to keep our discussion private.\" \n\n\"Ok Christine,\" mumbled Vivian, afraid she had done something wrong. It had previously been her experience if someone wanted to talk to her privately, it was never a good thing. \n\n\"Please don't worry Vivian,\" Christine could see the worried look all over Vivian's face, \"I have some important news and hopefully a very good proposal for you.\" \n\nVivian sighed loudly in relief and sat down in the chair opposite Christine's desk. \n\n\"Ok, so here's the deal. We now have an almost full house, and I have three other new girls inquiring into the last available room. I have seen how quickly you are progressing here and how the other girls look up to you. I would like to offer you the job of being my right hand woman here in the house. You will be paid, and I will outline your duties for you, but in a nutshell, basically doing what you are already doing by helping me so much taking care of the new girls. You are magnificent with them, and they all think you are the best! And you might as well know, so do I!\" \n\nVivian was taken so aback by all this praise she was absolutely speechless for at least thirty seconds in a row! A new record for her. \n\n\"Wow, thanks Christine, I, uh, I don't really know what to say.\" \n\n\"Well basically just say yes, but if you can't do that, nod your head in an affirmative manor,\" Christine chided her with her glorious smile as well. \n\nVivian laughed, and nodded her head vehemently up and down, \"Yes, Yes, a thousand times yes Christine! I would love to work for and with you.\" \n\nChristine grabbed her right hand in hers and did an exaggerated hand shake. \n\n\"Well that settles it. You start tomorrow on the payroll, and I'll have your list of duties ready for you in the morning. I do so look forward to having you as my right hand woman, I will feel complete, like I can face any and everything. \n\nVivian smiled as she walked out of the office. No one had ever spoken to her like that, and she had never thought of herself like that... A Right Hand Woman... I will do my very best at each task, each day she thought to herself as she was walking up the stairs to her room to email her sister in Sacramento. \n\n\u20aa* * * *\u20aa \n\nMia was expounding the beauty and wondrously good points of both the places they had visited. She was talking nonstop as David drove and smiled as he listened to his love. It was so wonderful to hear that lilt in her voice again and that excitement she could generate with her outstanding ideas. \n\n\"And what are you smiling at there Mr. Jorgenson?' \n\n\"I was letting the beauty of your voice and the excitement of your ideas thoroughly surround me and make me glad all over again you are soon to be Mrs. Jorgenson.\" \n\nDavid stopped and slapped the steering wheel. \n\nMia jumped in her seat and asked, \"What is it darling?\" \n\n\"I feel like I made a huge mistake, assuming you would be taking my name. I am sorry Mia. I should have never assumed that and should have waited until we could talk about it.\" \n\n\"Please David, I didn't take it in any other way than the way you meant it, as a comforting term of endearment. To tell you the truth, I haven't even thought about it. I know it is quite vogue these days for women to keep their family name, or hyphenate the two. I know it would create a little problem for me in the business world. But I kinda like the sound of it. You know Mom just took her maiden name, Shaw as our last name after Dad left us, so I think a change, especially to your name might be really cool. \n\n\"I do worry a bit though with my dark hair and dark eyes, I am not going to look too Norwegian.\" \n\n\"Don't worry about that my dear, my links go back to the days of the Vikings, and they were equal opportunity plunderers and brought back women from all over their travels, many with dark hair and dark skin. \n\nIt's funny, I saw a documentary about the Vikings and how many of the women they 'ravaged' and 'kidnapped' actually came back with their 'captors' quite willingly. They had lived in the same dreary villages all their lives, few travelling even twenty miles away from where they were born. Their men treated them like slaves, and they had to work the fields all day, make the late meal, clean up, and then climb in bed next to a passed out snoring drunk who hadn't touched her in months. Then one day these amazing tall beautiful blue eyed, blond hair gods appeared and not only wanted sex with them but took it, and for a lot of the women, it was their very first orgasm and they left with the intruders willingly. \" \n\nMia belly laughed at David's short story, \"Oh sure, that is exactly how it went. But anyway, you have explained how my dark hair won't exclude me from being Norwegian, thanks to those wonderful Vikings!\" \n\nThey pulled down their street and saw Mindy in her window for their house was at the end of the cul de sac. David blinked the headlights three times to say 'hello'. \n\nThey could see Mindy smiling and waving back as they pulled into their garage. \n\n\"I am just amazed at Mindy's progress in such a very short time. I am so proud of her.\" \n\n\"As am I\" David agreed, \"and I am very proud of Jonathan and the work and support he has given her during her extraordinary transformation, as well as his new position at his company. He is a remarkable young man.\" \n\n\"They make such a cute couple,\" Mia giggled \"doesn't it make you wonder about if we had met so young?\" \n\n\"Yes, I have thought of that a few times, but then you know we met when we were supposed to meet.\" \n\n\"I suppose you're right, and we wouldn't have been the people we were had met earlier, perhaps not ready for each other. The last thing I need is another 'what might have been' thought roaming around in this brain of mine. \n\n\"I love your brain and the thoughts it creates, and especially the wonderful, beautiful woman it belongs to.\" \n\nMia reached over after giving David an \"awwww\", and gave him a big kiss, which he returned with pleasure. \n\n\"So we're closing in on the third month my dear, how are you feeling about us having sex again?\" \n\n\"Oh David, I know it's been difficult for us both. I know you have gently pushed me away when I try to give you a blow job. Don't think I don't know you and why you do so, you lovely man you. You don't want me to pleasure you if you cannot return the pleasure for me.\" \n\n\"Am I that easy to read?\" \n\n\"For me you are, for you don't know or can't see how much you have opened up to me. I see you with others and you are generally the same, but a bit more protected, not so easily giving of where your thoughts are. But with me, you have opened yourself up, and I am so comforted and happy by our growth. I know I have made the same efforts at openness with you, and I think I have reached that goal as well.\" \n\n\"Reached and passed the goal my dear. I love how close we have become and how easy it has become to share everything with you. But, back to my original question. Do you think you'll be ready in the four, or closer to the six the doctor told us about at the start?\" \n\n\"Well, you've seen how my vagina is coming along, after all you are helping with the dressing and cleansing. I mean my god, I was so embarrassed at first I didn't even want you to see it, less I scare you off. But once again you amazed me as you began helping with the cleansing and then with the stent dilators, oh my, I never thought I would allow another person to be so private with me. But your manner and demeanor made it quite easy. You know, in the last few weeks I have actually tried to let myself enjoy your sweet insertions of the dilators, and love it as you increase the size and diameter per the doctor's instructions. I try to let loose a bit and try to feel sexual as we do the dilation, but I still find myself fighting the embarrassment.\" \n\n\"Come on Mia, you know me better than that, I knew at first it was basically going to be a major surgical wound. A surgery that inflicted severe trauma to that entire part of your body. I know what a surgical wound looks like, and what surgical healing looks like. And I have also been feeling some sexual feelings inserting the dilators, wishing I could use mine to dilate you as being so close to you and your sexuality makes me hard and ready. You could just call me Stent for short.\" ",
        "Mia laughed out loud. \"Well, our last follow up with the doctor was very good, and the nurse I see is very happy with the progression. You know though, I am going to be giving myself to you as a virgin on our wedding night, and you/we are going to have to take it slow like that. I hope you don't mind this little fantasy of mine.\" \n\n\"Slow and tender, with a very nice candle light dinner before, some nice music and your favorite fragrances surrounding us. I will try to make your fantasy come true my love.\" \n\n\"What in the world? Have you been reading romance novels or something?\" Mia chided. \n\n\"Actually we are writing one my dear,\" David whispered as he brought her face to his for another deep passionate kiss. \n\n\u20aa* * * *\u20aa \n\n\"I have Vivian to start as my right hand woman tomorrow,\" Christine smiled as she spoke over her glass of wine. She had called Detective Robinson after her talk with Vivian to see if he could meet her at their favorite little spot overlooking the water. \n\n\"That should take some of the burden off those lovely, yet very strong shoulders of yours my dear.\" \n\n\"Thank you Dirk, you know I knew you had a soft spot in your hard \"Mr. Detective\" you show the general public. I am so glad I was right, and that you have decided to share it with me. \n\nDirk reach across the table, gently taking Christine's wine glass from her hands so he could hold them as he looked across the tiny window front table. Her white hair illuminated by the table's little candle, made her seem to be a vision, a Goddess really. \n\n\"Christine, you can't imagine how surprised and so very happy you have made me, and I hope you can see that, and want to share your beautiful self with me as much as I want to share myself with you, the self I am just beginning to understand and enjoy. You know, I had long given up hope of having a relationship again, and had really just dove into the work this little town creates, and go home and live a quiet, unassuming life. You have brought joy, wonder, amazement, and just plain fun back into my life and I feel as if I am reborn.\" \n\nChristine laughed, \"Well I do seem to be in the 'reborn business' these days. But I was so happy I found you too. I had basically thought the same about me and had thrown myself into Mia's life and the foundation. But you know, Mia is going to be married, the foundation is up and running, and Vivian is going to do a wonderful job as my partner. So there is going to be time for me, and right now, I want to share my me time with you.\" \n\n\u20aa* * * *\u20aa \n\nMindy was through with her homework and was feeling a bit frisky. She got up from her desk, turned everything off and walked quietly into Jonathan's office. She saw him working intensely on some new photo artwork. Of course he had his headphones on and was listening to his music. She went to his computer and switched on the speakers as well as his headphones. Mindy giggled, for he had the funniest tastes in music. He was really into a lot of old groups, from the '60's saying his dad was such a huge fan and he had gotten turned on by the same tunes that had gotten his father decades ago. \n\nMindy unplugged the headphones, and quickly removed them from Jonathan's head. \n\n'The lonely sea, the lonely sea... \n\nIt never stops for you or me...' \n\n\"That's beautiful, who is it?\" \n\nJonathan turned around and looked at Mindy to make sure she wasn't pulling his leg. \n\n\"It's the Beach Boys, one of my very favorites. I used to sit in my dark room and listen to this song a lot when I was feeling blue.\" \n\n'It moves along, from day, to day \n\nThat's why my love, you'll never stay.' \n\n\"Geeze sounds like kind of a downer to me, although the melody and the singing are really quite beautiful.\" \n\n\"Oh yes, that era had a lot of songs about unrequited love, and with my luck with girls, it seemed I was always throwing my emotions into these songs as yet another girl wanted to be 'just friends, ok?'.\" \n\n\"Well, I am glad for their loss and my gain, you sexy man you,\" Mindy sashayed over and began to dance to the tune, slowly moving her body against Jonathan's. She bent over to rub her t-shirt covered breasts against his face, smothering him a bit as she grabbed his head and held him to her chest. \n\nShe smiled when she felt his hands running up inside the back of her t-shirt and happily raised her arms to let him lift the small shirt off her now very hot body. \n\nOnce the shirt was gone, Jonathan brought his face back to her chest, lifting one breast at a time into his mouth. He had found that Mindy really liked having her nipples sucked on, and lightly bitten as his hand caressed them from below. He was soon spurred on to further things as Mindy's moans were becoming louder and lasting a very long time. \n\nJonathan got up from his chair, swept Mindy off her feet and carried her, while kissing her, to the bedroom, their bedroom as he called it. Once inside he lightly let Mindy roll out of his hold and onto the bed. She was soon laying there with her arm holding up her head, breasts sparkling in the light from Jonathan's wet ministering. He bent over and lightly grabbed the elastic top of her shorts and slid them slowly down her lovely, smooth legs, kissing his way down her legs as he removed her shorts. After he finished getting her shorts off, he began to remove her panties. He liked the way she didn't wear the gaffing piece when she was home with him, so once the panties were removed he could see her sexual excitement in her semi-hard penis. He took her in his hand and gently stroked her, noticing the work of the new hormone regime had made it a bit smaller and more difficult for her to achieve a full erection. He didn't care, he just wanted to give the girl he loved pleasure, and he was assured he was doing just that by her now loud moans and gyrations on the bed. He leaned down to take her into his mouth and she let out a scream, \"Oh God Jonathan! Oh you are getting me so hot, please take off your clothes, I want you inside me.\" \n\nJonathan kept her in his mouth, letting his tongue dance around the tip of her penis and penis head as he turned into a contortionist and began to take his clothes off while still keeping her inside his mouth. The movements he had to make to take off different pieces of clothing made his head bob up and down on her, driving her even more into her sexual frenzy. \n\n\"Hurry, please hurry Jonathan!\" \n\nHe had no choice now but to stand and let her hardened penis flop out of his mouth as he finished undressing. As he finished, Mindy reached over to the night stand and grabbed their new favorite scented and heat inducing lubricant. She quickly filled her hand with some and grabbed Jonathan's rock hard penis and first took him into her mouth just to taste him and to let him feel her mouth and tongue on him. Jonathan closed his eyes and moaned. There was nothing like the feeling when Mindy first took him into her mouth. She was so good at knowing how to please him, learning all the little tricks that pushed each and every one of his buttons. She let one of her fingers slide into the lubricant in her other hand, and gently slid her lubed finger up his anal canal to find his prostate and give him a prostate massage while he was in her mouth. \n\n\"Mindy, if you want me inside you, we better do it quickly! If you're going to do this much longer I won't be able to contain myself!\" \n\nMindy gently removed her finger, lifted her mouth off his pulsing member and began to lovingly apply the lubricant to him. Jonathan reached for the lube bottle and squirted some on his hand and began to gently rub the ointment all around and then into Mindy's waiting anal opening. She squirmed, loving his touch, the way he gently, but firmly inserted his finger with the lube up her canal. She slid over to the edge of the bed and reached for the pillow to put under her. She grabbed his hardness with both of her hands and began to guide him to her aching little puckered opening. She gasped as he first entered her. She loved that feeling of first penetration and reached behind him to hold him still, right there, for just a few moments longer. Finally, neither one could wait any longer, \n\nJonathan began the first slow, long stokes to totally fill Mindy. As the lube did its work he began to pump harder and harder inside Mindy. Her head was thrown back, eyes rolled back into the top of her sockets, and moaning profusely. He reached down and began to stroke her penis in time with his own pumping inside of her. Her earlier enjoyment inside Jonathan's wondrous mouth had brought her close to climax as well. She let herself go and enjoy each of Jonathan's now wildly erotic thrusts inside of her and she loved how he stroked her penis as he slammed into her. She could hear his breathing and reached up to cup his sac and could feel his testes begin the wondrous shudder. She felt his hand stroking her harder and faster as he began to moan. She felt herself at the doorway to eruption and tried to hold back so they could cum at the same time. She didn't think she would be able to but then she heard Jonathan's telltale groan and she let herself shoot straight up and onto her stomach as she felt Jonathan's seed fill her inside as his groans filled the room with his sounds mixed with hers. \n\nFinally, spent and completely satisfied, Jonathan almost crumbled on top of his waiting Mindy, arms open to pull her satiated man close to her. \"Come up on the bed next to me my darling, I want to hold you.\" \n\nAs Jonathan climbed up next to her, Mindy noticed the tears in his eyes and running down his cheeks. \n\n\"Honey, what is the matter? You are crying?\" \n\n\"It's silly really darling, you make me so happy, and we were making love to the song I used to sit and feel sorry for myself for not getting yet another girl. And here I am now with that tune going on in the background making the most wonderful love to the most beautiful woman in the world! You can't imagine how wonderful you are for me.\" \n\n\"Oh yes I can young man! I feel exactly the same way! I never, never thought I would be in love, let alone be in love AND loved by such a beautiful and caring man. I wouldn't even let myself dream there was a you out there for me, yet here you are, here we are.\" \n\n\"Yes, here we are, and here we'll stay.\" Jonathan reached over to hold Mindy as close to him as he could while giving her the deepest and longest kiss he could, smiling as the Beach Boy tune on his I-Pad changed to 'Surfer Girl' another of his favorites... \n\n'So I say from me to you \n\nI will make your dreams come true \n\nDo you love me do you surfer girl?' \n\n\u20aa* * * *\u20aa \n\nVivian was enjoying her new role, as she ushered the three other girls who had dropped out of high school into the little library room the Foundation had to offer. Inside, amongst the books mostly concerning life growth and transgendered problems and situations, were four laptops, all connected to the Foundation's wireless internet system (thank you Jonathan!). One of her roles was to be the school head mistress as they all signed on to do their GED online high school finishing work. \n\nNone of the other three had done as well in school as Vivian. All the school work came so easily to her, she never felt like she had to push herself. Of course her Hispanic heritage put her in \"that\" category, where no teacher really gave her the direction or challenges to push her to meet and surpass her above average intelligence. She was just another lost girl (she had changed schools in the seventh grade and entered as a girl) in another non-descript inner city school. There were programs available, but most of them meant staying after school and Vivian couldn't do that as she had to help her mother and grandmother with her younger siblings after school for her mother worked nights to help support the family, and her grandmother was out of energy by three or four o'clock. \n\nIt was ok most of the time until midway through her junior year, her mom got laid off, and they were in very deep financial trouble right away. Vivian quit going to school and started hanging out with the girls who ran drugs for the mini cartels in town. They loved dressing the girls up to the nines and having them do their deliveries, for they were rarely stopped. Their clothing was fine and beautiful, not like hooker extreme, but like very well off young business ladies (thanks to the make up work). She was able to make enough money to take care of her family, and even when her mom got another job, she kept at it, thinking she could eventually sock some money away and even dreamed of going to college and pursuing her secret dream to become a lawyer and help those who needed legal help but could not afford it. But every time she seemed to get a little ahead, her mom would be laid off or fired. \n\nThe drug leaders had watched her work and had seen how she was accepted by the affluent customer base for which they used her for their deliveries. By the time she was eighteen, they confronted her about doing \"more\" for her customers as several had made quite large offers for her sexual favors. When she heard the sum of money they were talking about, she thought about it for a couple minutes and figured she could pull it off. Figuring most of her clients were older and she thought she could get away with flashing her little girls and giving them blow jobs they would remember for the rest of their lives. She was very concerned about being found out to be transgendered for fear of losing everything, even her delivery job. But she was also worried if she turned them down, she might lose the delivery job, so she was stuck. \n\n***** \n\nIt all went well the first two times, basically her plan had worked almost to the letter. \n\nThen that fateful night when one very large customer wanted to fuck her. She tried the 'it's my period, you can fuck my ass,\" but it didn't stop him. He didn't stop until he had her thrown down on the couch in his office and had ripped off all her clothes to reveal her no longer hidden penis. His bellow was so loud, she was afraid the building security people would be coming in soon (maybe that wouldn't be such a bad thing after all she thought). \n\nThe customer slapped and punched her around pretty good, and then got on the phone to her boss to read him the riot act. While he was on the phone, Vivian gathered up what was left of her clothes and ran out of the office trying to arrange them to a point where she wouldn't be arrested once she made it back on the street. She didn't even bother to go back to her boss's place for she thought it would be all over. But he sent some of his minions to her house, and they actually arrived before her and whisked her into their car to take her to face her boss. \n\nHer boss told her he had given her to his friend, Pain, who would have someone show her how to work the streets, where the 'trannies' like her work. And if she didn't comply, they would start working over her mother and her brothers and sisters. So, what had at first seemed to be a pathway to her dream, ended up being a slippery slide into the nether world of being a street walker, and dealing with the harsh and lots of times dangerous customer base looking for a \"tranny.\" Her dark beauty and her wits helped her to make enough money to keep her mom and siblings in their apartment and with food, but not much else was available after giving Pain his ever increasing cut. She felt like she was at the end of the world with no way out, until Mindy told her about the Foundation. She was all ready to make the trip over there when she was abducted by Pain's crew, beaten savagely, and basically left for dead as they threw her out of the car with the note for Mindy around her neck. She had often wondered what happened to Pain after his attack on her and Mindy. There was a rumor around that one of David's friends who called himself a private detective, but worked more like an undercover operative had seen to it that Pain had won an all-expenses paid, one way trip to the deepest Nigerian jungle to get back to his roots. \n\nVivian shook her head and rapidly changed channels in her mind to get out of that place and to start helping the others with their questions about the assignments they were working on. \n\n\u20aa* * * *\u20aa \n\nChristine had come in from her date with Dirk, and slid by the library door, listening to the girls all asking Vivian questions, and loving how well Vivian handled getting them the answers, or better yet showing them how and where to find the answers themselves. \n\n\"Oh My Vivian!\" screamed Daphne, one of the newer girls, \"I got it! I really understand the whole process! How cool is that! Sheesh, you should be the one teaching these classes, not the ones that are, you make it so we can actually learn this crap, er, I mean work. And you make it fun to discover how it actually works in real life too!\" \n\nChristine knew she had picked the perfect Right Hand Woman, smiled to herself and went upstairs to her room to continue on her suggestions for Mia's wedding. \n\nShe turned on her laptop and was soon looking at the pictures of the three places Mia and David had narrowed their choices to. She loved the quaint little park with the circular dock. The community club house was ok, but she loved the thought of being over the water on such a quaint little dock. She imagined the small wedding party at the end of the circle and all of the guests filled out the rest of the circle and the walkway part of the dock. She could imagine the sound of the waves as Mia and David walked the dock back to land as Man and Wife, with everyone throwing rice and flowers over them as they walked. \n\nShe sighed and let herself feel good for Mia. She loved how she had found her man, and built the relationship they had. She let herself feel a bit good for all her work to help Mia get through as much of the hardships a transgendered girl has to face on a daily basis. She had always loved Mia of course, but was so proud of the woman she had, and was still becoming. Makes a mother proud she thought to herself. \n\n\u20aa* * * *\u20aa \n\n\"Mom loves the circular dock too hon, let's find out what the schedule is for it!\" \n\nDavid picked up his phone and dialed the number for the caretaker of the little private park. It turned out they had a cancelation and the Saturday in two weeks time was open. \n\nMia squealed with delight when she heard the news. They had settled on a very small affair, so it wouldn't be too much to pull it off in just two weeks. They had already purchased most of the supplies they could beforehand and had the invitations all ready to mail as soon as they put the date, place, time, and a little map in the addressed envelopes. \n\nMindy was going to be Mia's Maid of Honor, and David had chosen Jonathan to be his best man. Christine was going to give away the bride, and arrangements had been preset at one of the local hotels for the few out of towners that would be attending. Mindy had shown a flair for clothing design and had done the drawing for Mia's wedding dress and had the dress makers that did work for the little shop she worked at make the dress. Mia loved it and looked absolutely stunning in it. She told Mindy she had real talent and that she should really look into doing more in the design field. Her sentiments were echoed by the dressmakers as well, and Mindy was thrilled to be able to dream about being a fashion designer. So many doors were opening for her now, she was so used to having them all slammed shut in her face, and now. Wow! \n\n\u20aa* * * *\u20aa \n\nThe next morning found Mia, David, Mindy, Jonathan, Christine, Vivian, and Dirk, all together in David and Mia's house busily addressing the envelopes and putting on the time and place and inserting the little maps to the wedding site. They would get them all out in that day's mail as David was ready to drive them to the downtown post office. He loved going there anyway, to the 1913 built building. He loved thinking of all the mail that had gone through there. All the love, the happiness, the hardship, the devastating news, basically life itself. ",
        "After the invitations were over they all got together to make a schedule and a shopping list for the food they would need to prepare for a little mini feast for the small reception after the ceremony. Dirk cleared his throat and stammered a bit at first but finally got his idea across, \"Er I know ya-you want to do your own food, but I know this wonderful little old lady who does catering as a side adventure and she is absolutely wonderful at it. I could call her and see if she is free for that day and if she would do it for us,that would free us all up to do other important things.\" \n\nEveryone was quiet as they had listened carefully to Dirk's suggestion. Then they all broke out into a raucous laugh and patted Dirk on the back. \n\n\"Great idea Dirk, call her right now and let's see if she can do it.\" \n\nDirk went into the other room to call his friend and was soon walking back into the kitchen area which had now turned into 'wedding central hub'. \n\n\"She is free and is so excited she wanted to come right over and go over her idea for the menu with us, I hope you don't mind but I told her that would be great!\" \n\n\"Good call Dirk! This will be great not having to deal with the food.\" \n\nThe men broke into a small group to discuss the operations aspects of the ceremony and got a pretty easy plan together as to how to get everyone there and how to set it all up. They figured having the ceremony scheduled for sunset, which at this time of the year meant around seven fourty five, they would have plenty of time during the day to get everything set up. It was nice they got to rent the place all day, so they would have the run of the place to get it ready. \n\nThe girls had gathered around looking at the samples of the table clothes and napkins when they heard a knock on the door. As Mia opened the door, this beaming, smiling, round little elderly woman with dimples and eyes that shone bright and clear reached out her hand. \n\n\"Hi! I'm Nina, Dirk's friend. I am so happy and excited you have chosen me to cater your ceremony. I have a lot of ideas so if you have the time I would like to show you my little portfolio and pick out your menu.\" \n\nMia laughed out loud, \"Nina, you are absolutely perfect for the job, and we will love to go over your portfolio with you!\" \n\nThe girls huddled around the table, mesmerized by Nina's portfolio, knowledge of foods for occasions, and just her take charge attitude made them all sure she was perfect for the job. \n\nAfter about forty five minutes, the menu was complete and everyone was happy. Nina went into the living room and made a few calls, and came back with her price that was more than fair. \n\n\"You're hired Nina, but let me tell you, if it all goes the way I think it will, there will be a bonus for you, for that price you quoted is more than fair.\" \n\nNina smiled, \"Not necessary, but it will be greatly appreciated!\" \n\n\u20aa* * * *\u20aa \n\nThe day of the wedding soon arrived, a beautiful, sun filled day. Mia had wanted another wedding tradition so when Christine, Mindy, and Harmony (who had flown up for the wedding with her daughter who would be the flower girl) got to Mia and David's house to prepare her for her special day, David was kicked out so as not to see the bride before the ceremony. David took Jonathan down to a late breakfast and then the two went down to the park to prepare for the ceremony. They had brought a little changing tent and their wedding clothes so they could change there and not have to leave after setting everything up. They had to meet a couple of the rental delivery trucks for some of the extra tables and chairs, table cloths and cutlery. \n\n\"I still can't believe you talked me into a top hat and tails get up,\" moaned Jonathan. \n\n\"Don't look at me,\" smiled David, \"I swear Mia's going to cross off half her bucket list on this one day's ceremonies and customs. But after all the horrors and troubles she has gone through to have this wedding day as a complete woman, I find it very easy to do any and all her requests happily and with gusto,\" David twirled his cane with his last statement. \n\n\"You're right, sorry to complain, I've just never been a 'tux' kinda guy, but I too will wear it with pride.\" \n\n\"Well since we have to wear these monkey suits, we might as well go all the way.\" Both men laughed and went on their way preparing the park. Dirk soon showed up to help as well and the three men kept quite busy setting up the area. \n\n\"For a 'small wedding' there sure is a lot to set up,\" David remarked as he an Jonathan were moving some of the picnic tables together to ready them for the table cloths Mia had rented. \n\n\"How many people are coming?\" asked Dirk. \n\n\"There is going to be around thirty guests,\" replied David. \"Most of the crew from Mia's local office, the girls from the foundation, and her lawyer Marsha and a few of her ex-employees flew up from San Francisco last night.\" \n\n\"Well, I pulled in a couple favors and we'll have a couple of the local cops directing traffic, so they can get into this little road ok off the highway.\" \n\n\"Thank you Dirk! That was very thoughtful. You know I haven't mentioned this, but I am sure glad you and Christine have gotten together. I have gotten to love her so much, and to see her so happy makes my heart glow.\" \n\n\"She is definitely the most remarkable and beautiful woman I have ever had the pleasure to know, let alone have a relationship with, I am one lucky man.\" \n\n\"That makes three of us!\" Jonathan chimed in, and the three men shared a hearty laugh. They broke for a late lunch and when they returned they found Nina and her crew had started setting up the barbeques and food preparation. \n\n\"You certainly got a wonderful day for your wedding,\" Nina remarked as she happily went about her tasks. \"This is going to be a wonderful evening for your ceremony. By the way, this is my Granddaughter Mallory and her friend Tina, my helpers.\" \n\n\"Nice to meet you ladies,\" David said in his best formal tone as he shook their hands, \"we certainly appreciate your help.\" \n\n\"Oh you are so welcome, we just love working with Grandma when she does these types of functions. You are going to be amazed at what she, well what we, put together, you are going to love it,\" Mallory beamed. \n\n\"I'm sure we will,\" David smiled at the young girl's enthusiasm. \n\n\u20aa* * * *\u20aa \n\nMia was standing while the others attended to the final fitting of her wedding gown. Her lawyer, Marsha had made the trip up from San Francisco for the wedding, and she had joined the crew preparing Mia. \n\n\"Mia, you have to be the most beautiful bride I have ever seen, my God your gown is to die for!\" Marsha exclaimed. \n\n\"Thank you Marsha, this is a Mindy original, she designed it and had the dress makers that do some work for the clothing store she works at make it for us.\" \n\n\"Well, I am certainly impressed Mindy, do you have formal design training?\" \n\n\"No, I just got interested in it after I started working at the store, I have always loved to draw, and put that love and my new found love of fashion together,\" Mindy said a bit sheepishly. \n\n\"Well you should be proud my dear, I have a lot of clients that pay a shit load of money for piles of crap by some 'big name' designers that would give their eye teeth to look this good.\" \n\nEveryone laughed and Mindy thanked Marsha for her kind words. \n\n\"You're in quite a wild mood Marsha, what's up with that?\" smiled Mia. \n\n\"My favorite client, well I look at you as the daughter I never had, is getting married and I am just tickled pink and so happy I could burst. So please don't put a damper on my fun, I plan to celebrate this union with unbridled excitement (pardon the little pun).\" Marsha was laughing at her own play on words. She also decided to pour a glass of wine from the bottle she found in the fridge downstairs. She raised her glass to toast, \"Here is to the most beautiful bride in the universe, wearing the most gorgeous dress in the world!\" \n\n\"Here here,\" was the reply by those not yet imbibing. \n\n\u20aa* * * *\u20aa \n\nThe men had gotten everything they needed done and were sitting back on some of the rental chairs relaxing, well at least two of the men. Jonathan had disappeared for a bit, as he was last seen walking up towards the car. \n\nHe returned with a medium sized cooler, large enough he had to use the two handles on the side to carry it. He came right up to David and Dirk and put it down with a flourish. \n\n\"So, as your best man, I have decided that since your 'bachelor party' was setting up the wedding, the least I could do was mix you a drink as you rest before the big beginnings coming up. Hopefully gin and tonic with a lime twist will be ok?\" \n\n\"Sounds great,\" both men answered in unison. \n\nJonathan busied himself preparing the drinks for the three of them. He had brought very large glasses and was building quite a drink.\" \n\n\"Whoa there Jonathan, those are like a quart of liquid libations you are mixing up there,\" Dirk warned. \n\nJonathan smiled, \"I had to promise Mindy and Mia I would only make one drink for our makeshift bachelor party, so here they are! Now that is what I call one drink to remember,\" as he handed the chilled glasses to the others. \n\nAfter they all had their glasses, Jonathan stood up and cleared his throat. \"As the best man, it my duty to propose a toast to the most wonderful man I have ever met. He has taught me so much about life and living in such a short time, I will be forever in his debt, but hopefully forever in his new 'family' because that is how I view him, proudly, as family. So here is to family!\" He raised his glass and all three men gave their here heres and clinked glasses together and all took very long drinks. \n\n\"Now that is a gin and tonic! Thank you Jonathan, quite the plan you had there, and as for your toast, yes, you and Mindy, and now Dirk and Christine are all part of our new and wondrous family. I am so happy and proud to be a part of such a wonderful group of people. People of trust, caring, acceptance, and love. Truly a family to behold!\" \n\nBoth Jonathan and Dirk could see the moisture in David's eyes after his little speech. They both gave him a pat on the shoulder, but then put their drinks down and gave him a full on hug. It was quite a moment for all three and they clinked their glasses together again after the hugs to celebrate the meaningful moment. \n\n\"So, I see you have a little changing tent over there, but I don't see a shower. I don't know about you two but that work in the mid to late afternoon heat has made me sweaty and I for one would like a shower. I only live about five minutes away. The caterer is here and she can watch things for us, and the traffic cops will also be here soon too. So, come on, let's go get a shower and get dressed at my place.\" Dirk started walking to his car not wanting to hear any refusals from the others. \n\nJonathan looked and David and feigned lifting his arm and making a face as he pretended to smell his pit. \n\n\"Ok, I get your point, and yes, I would like a shower and to shave again.\" \n\nOff they went, as one took his shower the others watched the Mariners loosing another baseball game. After all three had finished their showers (Dirk in the cold water, being the gracious host he elected to go last), they began to dress. Jonathan needed some help with all the pieces of the tux. Luckily Dirk had some experience with them and was able to help both Jonathan and David get their tuxes on to a T. \n\nDavid laughed as he put his top hat on and twirled his cane. \"Man if I could dance I would feel like Fred Astaire.\" \n\nJonathan also did a little turn around keeping his cane on the floor. Then put his feet together and twisted the cane around in his best Charlie Chaplin move, he too was laughing. \n\n\"We will certainly put on quite a show!\" \n\n\"Just wear it and act like you wear it every day, but don't forget to have fun with it as well,\" was David's passing advice as they headed back to Dirk's car. \"I tell ya, in my suit I feel very underdressed.\" \n\n\"You look great Dirk, we're the ones that have to look like we are part of a monopoly game or something,\" mused Jonathan. \n\nThey all laughed as they made the short journey back to the wedding area. Dirk had been right, there were a couple traffic cops ready to direct traffic for the upcoming event. Dirk waived as they passed the two on the highway. \"Thanks guys, I owe you big time.\" They smiled, shook their heads in a 'no' fashion, held up the traffic for them so they could make the left onto the little road down to the park. \n\n\u20aa* * * *\u20aa \n\nThe girls had Mia all done, her hair was glorious, the dark long locks shined and shimmered in any light. It fell just below her shoulders and really highlighted the lighter color of Mindy's gown. Vivian had taken over the makeup, as she had the most experience. Mindy wanted some but she insisted on the 'natural look'. It was amazing how much makeup was needed to make the 'natural look'. But in any look, she looked beautiful. The little bit of eye shadow, liner and eyelashes made her eyes dazzle their blue light. \n\nHer lips were full and lined but with a very light color that actually did make them look natural. She had been perfumed and powdered and just about everything imaginable. She stood in awe in front of her full length mirror, and didn't even notice that both her mom and Marsha were taking a lot of pictures of her. \n\nVivian finally broke the mood with her commanding (Right Hand Woman) voice, \"C'mon you guys, we gotta get started down to the park or we're going to be late. Once again all the girls from the foundation had been given their tasks and all the items needed to be taken with them to the part were split between them. The flowers and other decorations were loaded in the foundation van and Marsha had also rented a van so everyone else could ride along with her. \n\n\u20aa* * * *\u20aa \n\nThe girls pulled into the park, with a lot of help from Dirk's friendly traffic cops. Mia had Mindy jump out first to make sure she found David to have him 'put away' so he wouldn't see the bride before the ceremony. \n\nOnce he was safely tucked away at the end of the dock with the Justice of the Peace's assistant signing the marital forms, Mindy and Christine rushed Mia into the changing tent. The foundation girls headed down towards the dock to get that all ready with the flowers and decorations they had brought. The men had laid the groundwork for them and the actual disbursement and display was very easy (with the drawing the Mindy had made, showing where everything went). \n\nThe girls readied Mia a bit again until the friendly little older man who was the Justice of the Peace that was going to perform their ceremony showed up with his portly self in a black robe, his white full beard almost hiding his smile, but not the smile in his eyes. He definitely was a Santa double, and Mia just loved him from the first time she met him. He had her sign her part of the marital papers, and while she signed he felt he had to say, \"You have to be absolutely and without any doubt the most beautiful bride I have ever had the pleasure to marry off.\" \n\n\"Thank you, you are too kind,\" Mia blushed. \n\nAs he left the tent, Mindy stepped out a bit and peeked around the area. She saw that David and Jonathan were in place down at the head of the dock. She saw that most if not all of the guests had arrived. She also saw that Jonathan's friend was doing a great job getting casual and candid shots of the guests and the caterers and all involved in the wedding. She turned back into the tent to do her final touch for Mia's outfit. She put on the little satin hat she had made, with a small satin rose in the front and two long pure white silk strips that would hang in the back and mix and offset Mia's jet black shiny hair. \n\n\"There you Mia, everything is in place, you are ready to go! \n\nOk, so here's how we will do it. We will walk as a group sorta surrounding Mia down to the entrance of the dock. The music will have already started, so Harmony can you make sure Trina gets going as the flower girl walking to the end of the dock?\" \n\n\"Of course, we practiced quite a few times during the day and she is ready and eager to do her job for Mia\" \n\n\"That is so sweet, thank you Trina,\" Mia gushed. \n\nMindy took over again, \"Then I will walk down the aisle of dock, and when I get about halfway, Christine will lead Mia down the dock. At that time the Justice will ask 'who gives away this woman?' And \"you will say, \"I am her mother, and I give away this woman.\" \n\nThen the rest of you will fill in behind so you can see and be close to the ceremony. \n\n\u20aa* * * *\u20aa \n\nDavid and Jonathan were getting a bit tired of standing and waiting. \n\n\"You know I did not want this cane when they were talking about our little costumes here, but man, with all this waiting it sure helps take some of the weight off the feet.\" \n\nJonathan laughed, \"I have been using it too, a very handy tool indeed!\" \n\nJust as he finished, they heard the music get louder and looked down the dock to see Trina walking down the white satin lined dock, dispersing flower petals and her beautiful smile all along the way. \n\nThen they saw Mindy, and Jonathan was breathless. His eyes were locked on her as she walked down the dock aisle. She had designed her dress as well and had used the color scheme that had sorta been a tongue in cheek scheme... 'Blue explodes into Pink'. She had made her gown to be full length with the bottom a dark blue, but as the dress got higher, the blue started 'exploding' into very intricate and interesting patterns as it turned lighter in color. Starting at the waist, the pattern turned into arms of an explosion, so by the time they reached her breasts, they were covered in a very bright almost neon pink. The gown had a high collar to it with lace coming almost to her chin. She wanted a high neckline to give Mia the talk of the show with her low cut gown. \n\nJonathan was mesmerized by her movement. She had designed the dress to flow with each of her movements and to be susceptible to be moved by any wind that would probably pop up. The end result was a beautiful woman, wearing a dress that hugged tightly to her most beautiful body parts, but spread far enough out at the bottom to have a wonderful flow, as if her dress's movements were extensions of her. She looked beautiful in the setting sun and Jonathan could feel himself starting to get hard as he watched her walk down to the other side of the front of the dock. The smile she gave him as he passed did not help to dispel his hardness, and he was glad he had tails on his tux and he brought one side over to cover his problem. \n\nThen it was Christine and Mia. David too was mesmerized. Mia looked like a model, showing off the most beautiful wedding dress in the world. It was also a floor length gown, with even a little bit of a tail following her. The bottom was made of a light cr\u00e8me colored satin that had a slit up the right side that ended just above her knee, so you got a glimpse of her beautiful leg as she walked slowly down the aisle. At the waist it changed to an almost white soft lace that hugged her tight tummy and showed a little skin through the lace. Above the lace was pure white satin that hugged her so tightly and was so very low cut, you could see the tops of her breasts. It looked strapless, but the long arm pieces that went from just above her hands up to her shoulders were actually attached to the dress and helped with the support of the dress to keep it from slipping down. The long sleeves also had slits on the outside almost the entire sleeve length, to show off Mia's toned arms. The dress flowed so effortlessly and was so in unison with Mia's movements, it was like a part of her. \n\nThe little cap looked marvelous on her dark hair. As David's eyes finally went all the way up the dress and met Mia's, he mouthed 'you are beyond beautiful!' ",
        "As Mia and Christine approached the rounded end of the dock, the Justice asked his question and Christine, proudly and loudly replied, \"I am Mia's Mother, Christine, and I give this beautiful woman away for her marriage.\" \n\nThe guests lightly applauded her twist to the answer as she stepped back a bit from the wedding party. It was quite a sight, the men in their tuxes, top hats, canes, and tails, and the women in their beautiful flowing one of kind gowns. \n\nMia and David stood side by side, holding hands while the Justice went through his routine. He was wonderful, and for a small man, his voice carried beautifully. Jonathan's friend was slinking around taking pictures of this beautiful sight, with the sun slowly sinking, sending beautiful colorful streaks through the few soft clouds. Truly a sight to behold. Just as the sun began to start falling behind the trees on the other side of the inlet he asked the 'I do's' and David and Mia turned to face each other to do their vows. \n\nMia had found a couple online that she wanted to combine. She also had suggested they say them in unison rather than separately, and David agreed that was a wonderful idea. They had a lot of fun practicing them in the couple weeks before the wedding, and by the wedding day David was sure they would be able to do them perfectly. \"I am just going to be looking deeply into your beautiful eyes, and be held within your beautiful loving soul, and all the jitters will simply disappear.\" \n\nSo just as the sun began to sink behind the trees across the bay from them they began... \n\n\"I, David // Mia, choose you, Mia // David, \n\nTo be no other than yourself, \n\nLoving what I know of you, trusting what I do not yet know. \n\nI will respect you as an individual, a partner, my lover, and an equal. \n\nI take you to be my partner for life \n\nI promise above all else to live in truth with you \n\nAnd to communicate fully and fearlessly, \n\nI give you my hand and my heart \n\nAs a sanctuary of warmth and peace \n\nAnd pledge my love, devotion, faith and honor \n\nAs I join my life to yours.\" \n\nThe Justice was so touched he almost forgot to do the rings, pronounce them man and wife, and the \"you may now kiss the bride\". \n\nAs they kissed, the guests applauded and threw a mixture of flower petals that had been handed out in lieu of rice. The couple quickly made it back down the dock that was lines with their friends filling the air with the flower petals. Another truly beautiful sight. \n\nFor both David and Mia, the small reception seemed to take forever. Nina's food was beyond excellent, and her granddaughter and her friend were marvelous at making sure everything was right, everyone was served, and happy. \n\nThey did the cutting of the beautiful cake, and even danced to a few tunes looking wonderful in their outfits. \n\nBut, soon, right on schedule came the rented limo to whisk them away. Well actually just back to their house, they didn't want to waste another minute traveling to some honeymoon spot. They both had just one thing one their minds. \n\n\u20aa* * * *\u20aa \n\nThe limo dropped them off at their door, and David actually did carry Mia across the doorstep, a bit clumsily to be sure, but got the job done. Once inside with the door closed he placed her feet gently back on the ground and they stood close to each other and simultaneously reached out to pull the other to them. Their kiss was magical, so tender, yet with so much erotic promise. \n\n\"Let's get upstairs honey, I think we have been waiting for this for long enough.\" \n\n\"Yes dear,\" smiled Mia as she began her slow walk up the stairs, exaggerating the sashay motion of her tightly satin encased ass. David was right behind her enjoying the show tremendously. The top hat was at the base of the stairs, the coat and tails was left on the stairs, his pants on the stair landing, and by the time they entered the bedroom he was just in his underwear. \n\n\"Mmmmm, you have been a busy boy, you must have enjoyed the show.\" \n\n\"Oh yes, and I have been waiting since I first saw you in this beautiful dress to help you remove it, slowly, and with much feeling.\" \n\nDavid moved in behind her and undid the zipper, as Mia slowly, and quite provocatively removed her sleeves making the top of her gown no longer strong enough to fully stand and it fell a bit to reveal her breasts. \n\nDavid could see from behind what had happened and slowly reached around from behind to cup and caress both of her breasts. Mia closed her eyes and hummed one of the songs they had danced to as she pressed her body against him, and she could feel that she had already made him hard as a rock as she could feel his excited penis against her butt cheek. She couldn't resist moving her ass in a circular motion to caress his hardness. They held this position for a bit longer, then David stepped back just a bit so he could slide her gown over the rest of her body. \n\nIt was so tight that sliding it down was a bit of a struggle, but a fun struggle, Mia raised her arms and stood as straight as she could as he knelt down and felt the gown slide over her hips. Once that beautiful hurdle was reached and passed, the gown fell to the floor at her feet. He was amazed to see she had worn no panties, and only had her white nylons with elastic garters. He stepped back in amazement. \n\n\"You look so hot my dear, feel how hard my heart pounds.\" \n\nHe took her hand and placed it over his chest, but Mia had other ideas and she quickly moved her hands down to remove his boxers. \n\n\"I want to feel how hard something else is if you don't mind,\" she whispered. \n\nDavid let her slide his boxers to the floor as he took off his t-shirt, \"Oh I don't mind at all.\" \n\nAs Mia was already bent down to remove his boxers, her mouth was perfectly placed for her to reach out and cup his balls and bring his hardness into her waiting mouth. It had been so long, but in so many ways the wait was worth it she thought. \n\nDavid loved the way Mia made love to his hardened penis, but he wanted more too. He gently reached down to hold her head and guide her back up. He began to slowly move her towards their bed, and once there, gently pushed her back so she was laying on her back with her legs open right at the edge of the bed. Now David bent down, and for the first time let his tongue roam her inner thighs, up and down, and circled around her vagina. Mia was thrusting her hips almost involuntarily as she began to let her body feel these new sensations. Finally his tongue made it to her vaginal opening and he let it slide all around, slowly. Then he let it slide in and out and Mia began to moan in pleasure. \n\nHer hands almost unconsciously reached for his head, to hold him to her, to feel him in her hands as his tongue took her to wonderful heights of pleasure. She marveled for a second at the surgeon's wonderful work, and how she could feel the beautiful sexually exciting feelings. She was trying to enjoy all of his wonderful oral pleasuring but she was getting antsy to feel what it would be like to have her virgin vagina filled by the man she loved, that she had just married. \n\nShe could wait no longer and lifted her head and whispered, \"Now my love, I need to feel you inside me David.\" \n\nDavid heard and was immediate in his movements as he too had waiting so long to have this feeling shared. He reached down and helped Mia slide back completely on the bed. He slid on the bed over her body until he had to turn and reach for the lubricant on the bed stand. They had settled on the one they thought the best from the list the doctor had given them. \n\nDavid opened the bottle and began to squeeze some on his hand to lubricate his hardened penis, but Mia would have none of that, as she took over that job. David slowly applied the lubricant to Mia's vagina (chuckling to himself at her never wanting to call it the common 'neo-vagina' because as she said it made her feel like it was something out of the Matrix and she didn't want that at all). \n\nOnce they were both lubricated, David moved over so he could slide up between Mia's spread legs. She moaned as his tight stomach slid over her vagina. She moaned even louder as she could feel his hardened penis tip make contact with her inner thigh. She reached down to hold his penis and to guide it to the promised land. \n\nDavid let her take over, for he wanted everything to be as she wanted it. He wasn't sure how ready she was and wanted her to lead him inside of her at her own rate. He had waited for this moment for a long time, sometimes he felt like he had been waiting for it for his whole life. He could feel Mia's tentative movement of his shaft tip in an up and down motion across her new opening. Then he felt the moment of truth. He could feel her hands become sure, and she started to pull him inside her. He could feel his entire tip enter her, and heard her gasp of pleasure. She wanted to hold him there forever, or a few seconds, for she also wanted him to slide into her to his hilt. \n\nNow that David was inside her, she let her hands go free of his penis and put them on his hard ass. She began to give him the signal to push by gently pushing down on his ass. David slid slowly further inside Mia. Her vagina was tight and his pleasure was mounting geometrically. He could sense Mia leaving the known consciousness into the pleasurable eternity of pre orgasm. He knew he was reaching that point as well. He felt himself completely inside Mia, felt her hands and arms holding him there, like he was never going to leave. There was another loud moan from her and he began to slowly pull out, and then push in. Slowly they built up into a rhythm and he started pushing with more force. He could hear the slap of their pelvic areas as he pushed all the way to the hilt. \n\nMia felt as if she was in another dimension. It was such a different feeling having her man filling her as a woman at last. She could feel the tears of joy running down her cheeks, and she could hear her screams of joy as if they were coming from someone else. David was now thrusting into her in earnest now and she could sense his body preparing for ejaculation. His legs began to shake and his back arched up. Mia screamed and wrapped her legs around his rising waist. \n\n\"OH MIA, I'M CUMMING\" David managed as he shot load after load into Mia. Mia had her own orgasm as he had hit her spot mixed with the feeling of his seed filling her. \n\nThey both lay together, in silence, and in each other's arms. \n\n\"That was absolutely incredible,\" Mia finally managed. \n\n\"I agree my love, in the final throes of passion, my mind exploded with the possibilities, our possibilities and I am eager to start our new life together, with you, my love.\" \n\n\"I am your woman David, and I take you to be my man, as we said in our vow... \n\nTo be no other than yourself, \n\nLoving what I know of you, trusting what I do not yet know.  \n\nThe End."
    ],
    "authorname": "cliptoe",
    "tags": [
        "transgender",
        "srs",
        "love",
        "wedding",
        "oral",
        "anal"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/mia-mine-ch-13"
}
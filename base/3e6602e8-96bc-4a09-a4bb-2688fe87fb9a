{
    "title": "The Farmer & Dale Ch. 07",
    "pages": [
        "Steven stood at the window gazing out at the view. It was spectacular; clear azure-blue skies unmarred by even a wisp of cloud; creamy-white, sandy beaches caressed by gentle waves. The rhythmic ebb and flow of water erased any trace of those impertinent enough to believe they could leave evidence of their passing. \n\nFar out on the diamond-bright water, several boats, their sails full-set, gracefully skimmed the waves. Closer to the house, seated in lounge chairs, were two men. Both were a healthy shade of bronze, kissed by the sun they'd courted daily.\n\nSteven studied them both. The man on the right, with his raven hair touched only slightly with gray, was his lover, James. The expression in his eyes softened as he regarded the man who had shared his life for almost thirty years. He again felt astonished at the thought; it seemed impossible that so many years had passed. He and James had not only managed to stay together, something that so many couldn't accomplish, but they continued to love and cherish one another. Steven thanked the divine providence that had brought James into his life.\n\nHis gaze shifted to the man on the left.\n\nGerald's honey blonde hair had lightened in the sun so that it gleamed with pale highlights. Steven's fingers twitched as he remembered the feel of his former lover's skin, how they'd touched and loved each other through so many endless nights. He ached to go to him, to pull him into his arms and draw the pain from him.\n\nGerald had finally agreed to Steven and James' entreaty to go to Florida with them. He'd stubbornly resisted until Steven used the one argument he knew would sway him: his family. His children were worried about him; this trip would reassure them that he had an opportunity to heal. Gerald had given in, thinking that perhaps Steven was right, and that now his sons and daughters wouldn't fuss over him so much.\n\nSteven was relieved that he'd agreed, but he was still worried. Gerald was eating better, he'd even re-gained some of the weight he'd lost. He seemed to enjoy all their activities from simple sun- bathing to the concerts they had attended. They went to movies and Gerald participated in their conversations and discussions, laughing in all the right places. He seemed his old self. Seemed, being the key word.\n\nGerald had built an invisible barrier between himself and the world. Behind that barrier, he held on to his loss, held on to his pain and grief. After breaking down at the hospital, he had not cried again for Irene. He stoically endured, saying little about her, acting as though everything was fine, when little by little he was dying inside.\n\nSteven had caught him several times with a sad, faraway look on his face, the sparkle dying in his eyes. Those sparks of inner fire were growing dimmer with each passing day. He knew Gerald was trying to bury his heart and emotions, trying to deny the pain as if with his denial the cause for it would no longer exist. Steven knew something needed to be done. He had an inkling of what that was, but was unsure how to go about it.\n\nHe sighed and made his way to the kitchen. After eating out the last four evenings, the three of them agreed that, for a change of pace, it would be nice to stay in and enjoy a 'home' cooked meal. Considering where they were, they'd enjoyed many a meal of seafood, so Steven had decided on simple baked chicken breasts, salad, baked potatoes, crusty rolls and sorbet for dessert. \n\nHe'd chosen a crisp white wine to serve with their dinner and had found a special blend of coffee he wanted to surprise Gerald with. Gerald had confided his addiction to Dale's coffee. Steven thought perhaps this blend might come close to that which Dale brewed, and that it might produce pleasant memories to help steady him.\n\nSteven prepared the chicken, lightly seasoning it and laying it out in the baking dish. The potatoes were washed and like-wise the salad greens which were also drained and placed back in the refrigerator to keep them crisp. The rolls had only to be warmed. \n\nHe was just about to go out to ask James and Gerald when they would like to eat, when they came to the back door. Steven beamed at the sight of them. They looked so fit, healthy and beautifully male in their bathing trunks which exposed lots of smooth, tanned skin. They stood in the doorway using their towels to wipe down and to brush the sand from their feet. After Steven's complaints about the sand being tracked in, they knew to use the broom that rested by the back door to sweep the excess sand from the walkway that led to the door.\n\nThe two of them were joking about whose turn it was to sweep. Over the past two weeks Gerald had become quite as comfortable with James as he was with Steven. They joked sometimes, calling themselves the Three Musketeers. \n\nThe first to walk in, James observed Steven's preparations, \"Why didn't you come and get us, love? We'd have helped you get things ready,\" he said, wrapping an arm around Steven's waist and giving him a kiss.\n\nSteven breathed in his lover's scent; James smelled of suntan lotion, fresh air and heated male, a potent combination, one his cock approved as it twitched and thickened under his shorts.\n\nGerald smiled at the two of them, \"I thought you were coming out to join us? What have you been up to besides getting dinner ready?\"\n\n\"I was doing a little reading, and lost track of the time.\" Steven confessed, then grinned mischievously, \"Actually this book might interest you. It's a first effort by a very talented young man by the name of Richard Hunter.\"\n\nGerald returned his grin, his eyes sparkling with pride, \"Talented, huh?\"\n\n\"Oh yes, it's actually quite good, but then we don't offer contracts for mediocre manuscripts.\" \n\n\"I'll tell him you said that.\"\n\nGerald walked to Steven, leaned in and placed a quick kiss on his cheek. He jerked back, surprise, embarrassment, and dismay registering on his face. His cheeks flushed and he began to apologize.\n\n\"James, Steven, I'm sorry, I don't know why I did that,\" he began to back away. \n\nJames placed a hand on his arm, halting him, \"Gerald, it's ok,\" he told him gently.\n\nHis arm slipped around Gerald's waist. With his other arm around Steven, he drew them into a three-way hug. Gerald stood stiffly at first, then slowly relaxed, his head dropping gently down to rest on James' shoulder. With a sigh, the tension flowed out of his body. Steven smiled softly and slid his free arm around him, his eyes meeting James' over Gerald's head. Steven gave him an encouraging nod.\n\nJames rubbed his chin over the top of Gerald's head. Steven knew then that this was the key. Touch was the answer to dissolving the barrier that Gerald had erected around himself. Steven watched his lover touch Gerald in this simplest of ways and knew that Gerald, however unconsciously, had opened the door. Steven rubbed Gerald's back gently, eliciting another sigh from him.\n\nHe and James had discussed just this possibility. This simple, human need to be touched, could unlock Gerald's heart. It was not something they had done before, sharing their bed with anyone, but they had agreed that if doing so would help Gerald, they were both willing and yes, even eager to do so. \n\nWhen they first met, they had discussed all the aspects of Steven's relationship with Gerald. They had been very open and honest with each other about all their previous experiences and love affairs. James knew, that had Gerald not chosen to honor his engagement to Irene, that he and Steven would very likely have stayed together. Just as Steven had earlier thanked the divine intervention that brought James into his life, James previously had had those same thoughts.\n\nHe could so easily never have had the opportunity to meet Steven, let alone build the life they'd made together. But they did have a life together. Their love was strong, solid and unshakable. They both knew that loving Gerald would only strengthen their commitment, each to the other. They were determined to see this man, so good and so deserving of more, recover and find joy again in his life. Working together, to heal their friend, would be yet another bond between them and a proof of their trust in each other.\n\nGerald's head lifted from James' shoulder as he slowly pulled out of their embrace, \"Thank you.\" he said with quiet, sincere dignity, \"I'm going to get cleaned up.\" \n\nAfter he left the kitchen, James and Steven met each other's gaze and smiled, \"It's just as you thought,\" James told him.\n\nSteven took James' hand, his fingers lightly exploring the contours and curves of it, \"How could it not be?\" Steven answered, \"When he lost Irene, he didn't just lose his wife, he lost his lover as well. Rick told me how affectionate they always were with each other. Beyond a few hugs from his children, Gerald hasn't touched anyone in months. It has to have an affect on the psyche. It must be like going through withdrawal.\"\n\nHe brought James' hand to his mouth and kissed the knuckles, \"It's so easy to take everything we share for granted. Not only is that person there to talk with and to share things with, but there are the tactile things. Not just making love,\" Steven stepped back, releasing James' hand, \"but simple touches. Have you ever thought about how many times we touch each other in the course of a day?\"\n\nJames shook his head.\n\n\"I'll bet it would surprise both of us just how many touches we actually share in that time-frame. To suddenly have that withdrawn, the warmth, comfort and love that each touch conveys,\" Steven's eyes filled with tears, \"James.\" he whispered, his throat suddenly constricted.\n\nJames reached out and enfolded Steven into his embrace, \"It's ok, baby. We're going to fix this. It's all right.\"\n\nSteven relaxed into the comfort and strength of his lover's touch.\n\n * * *\n\nGerald stood under the warm shower spray, his body tense again, his thoughts in turmoil. He could still feel the warmth and comfort of his friend's embrace, how his body had yearned for it, and reveled in it. He sighed, and cursed softly as he felt his cock stir. \n\nSince Irene's death he'd not had an erection, had not experienced desire of any kind except one. The overwhelming desire to be with her. It wasn't that he contemplated suicide. That was something he would never do, it was just that he dreamed of things being as they had been before the accident. This world that he was left in, seemed empty. He felt desperately alone, even when he was surrounded by the love of his children and grandchildren.\n\nBut now there was this burgeoning desire for Steven and James. He squeezed his eyes tightly, burying his face in his hands. How could he even contemplate such a thing? His beloved Irene was gone. How could he possibly consider finding happiness, or even physical pleasure without her? Even now, his body was betraying him; his cock stiffened as that scene with Steven and James replayed in his head. \n\nIn the darkness behind his closed lids, his thoughts strayed from impression to impression. The scent of them, each was different yet equally provocative. James had been warm from the sun, his scent stronger, musky male mixed with sunlight and suntan lotion. Steven's scent was more subtle, his fresh, clean yet masculine aroma had risen subtly with the warmth his body exuded. It aroused Gerald senses, drawing him into the past, to a place and time that he had reluctantly put behind him.\n\nAnd when they touched him, dear God, had anything ever been so welcome? For those fleeting moments the pain receded, the desperate anguish diminished so far that he no longer felt like a helpless child, cowering in the dark, crying for the one person who would make it all better. Irene, who could not be there, who would never be there again.\n\nHe dropped his hands from his face and looked down the length of his body. He stared at his erection as though it were some unfamiliar and alien part of himself, something he'd never seen before and certainly nothing he welcomed. Slowly his hand moved down and he wrapped his fingers around himself. A groan burst from his throat as pleasure shuddered down his spine. His breath began to speed, his hand moved, slowly stroking.\n\n\"Ah God!\" he groaned.\n\nImages of Steven, of their past, appeared in his mind, being acted out like a play on a stage. His perspective shifted to the present, shifted to include James. The thoughts that filled his head were shocking in their conception, stunning for the sheer sensuality and daring of them. Another groan was torn from his throat. He felt the familiar tingling buildup that told him he was still very much a man. \n\nSuddenly, wrapped in the approaching pleasure came another image. An image of Irene as she moved beneath him, welcoming every pounding thrust of his cock. Irene, Steven, James. Each face vied for supremacy in his mind. With an anguished wail, Gerald pivoted and cut the flow of hot water. The shock of the shower spray, now icy cold, sliced through the images, shredding them like so much tissue paper. His lust disappeared as fast as his erection. Shaking and shivering with cold, he shut off the water completely. \n\nShuddering, he stood frozen for a few seconds, his eyes wide, unseeing, as he fought to hold all his wildly careening emotions at bay. At last he stepped slowly from the shower, and taking a towel he began to dry himself, his expression mirroring the blank state of mind he achieved. Automatically, he returned to the bedroom and dressed. He sat on the edge of the bed, debating whether to wear shoes and socks. The only evidence of his buried agitation was the occasional twitching of his fingers as they sought to tighten into fists. \n\n * * *\n\nJames had set the dining room table, lighting some candles to enhance the atmosphere. Gerald had rejoined them and volunteered to help. Steven had set him to tossing the dressing into the salad. They had exchanged several significant looks over Gerald's withdrawn and subdued mood; he wasn't making the slightest effort to put on a show of normalcy. \n\nThe food was carried into the dining room and they began their meal. James and Steven carried the conversation; Gerald would not speak unless a question was directed his way. He played with the food on his plate, eating very little. Steven and James' own appetites were affected until the food seemed some tasteless mass that dared them to consume it.\n\nSteven's nerves, stretched taut, hit the breaking point. He reached out and covered one of Gerald's hands with his own.\n\n\"Don't,\" Gerald told him without making eye contact.\n\n\"Don't what?\" Steven asked.\n\n\"Don't touch me.\"Gerald elaborated, he looked up, his eyes bleak, \"You don't have the right to touch me.\"\n\n\"You're right, Gerald, I don't have the right to touch you. I'm just trying to offer you some comfort.\" Steven told him quietly.\n\nGerald's face flushed, his eyes taking on a glittering anger, \"I know what you're trying to offer. You've got no right,\" he snapped, \"no right to make me feel...\"\n\n\"What are you feeling Gerald?\" James, seeing Steven's face blanch with hurt, decided it was time to intervene.\n\nGerald turned his anger on James, \"And you, you're just as guilty. Trying to make me betray Irene.\"\n\n\"Is that what you'd be doing, Gerald? Did Irene tell you that she expected you to stay celibate and alone?\" he demanded. Gerald didn't answer and James repeated sharply, \"Did she?\"\n\nGerald flinched, tears sparkling in his eyes. He shook his head, \"We made a pact,\" he swallowed hard, tears clogging his throat, \"We agreed that if something happened to either of us, the other would go on living.\"\n\nJames nodded, \"That was good. Irene is very wise, she loves you so much. Did you notice that I said she loves you, present tense?\"\n\nGerald nodded.\n\n\"That's because she's still with you, Gerald. She's an integral part of you and always will be. You do know that don't you?\" James questioned.\n\nGerald nodded again.\n\n\"Do you think Steven and I would ever want to change that, that we would try to take that from you?\"\n\nHe shook his head, tears starting down his cheeks. He turned to Steven, \"I'm sorry, I'm so sorry.\" he whispered desperately.\n\nSteven stood and went to Gerald, who buried his face in his midriff. Anguished sobs wracked his body. James moved in behind him and they held him between them, James massaging his shoulders and back as Steven murmured words of comfort, his hand sliding through the thick strands of Gerald's hair. Eventually he quieted. Steven urged him to stand and he and James shepherded Gerald to their room. \n\nSteven steered him into the bathroom, \"Why don't you get yourself cleaned up?. There's some aspirin in the medicine cabinet; I think you should take two or three, they'll help you to relax, ok?\"\n\nGerald nodded and with a sigh, went into the bathroom and closed the door.\n\nSteven drifted into James arms and laid his head on his shoulder, \"Thank you. I would never have found the words.\"\n\nJames hugged him tightly, \"You would have. I've just had all that experience at cross examining people. Gerald was trying to hide from his feelings, and we just had to make him see them.\"\n\nSteven sighed, \"We should go clear the table and clean up.\"\n\n\"You stay here, love. I don't think he should be left alone right now.\"\n\nSteven began to protest.\n\n\"Hush, don't fuss. I'm only going to throw everything in the fridge, rinse the dishes and load the dishwasher. It won't take me long. Now do as I say.\" he gave Steven's ass a light swat.\n\nSteven smiled, \"I just love it when you go all alpha male on me.\"\n\nJames chuckled, \"Too bad I can't show you just how alpha I'm feeling right now,\" he sobered, \"Are we keeping Gerald with us tonight?\"\n\n\"I'm going to try, is that all right?\" \n\n\"Of course, but you should make it clear that nothing is expected of him.\" James instructed, \"I don't think he's ready for that yet, if ever.\"\n\nSteven agreed. James left to take care of the cleanup. Steven sat on the bed and listened for Gerald's movements. He heard the toilet flush and the water in the sink running for a bit. A few minutes later, Gerald emerged from the bathroom. \n\nHis face was freshly washed, his eyes and lips were still slightly puffy from his tears, but he looked much more serene and in control. He looked at Steven almost shyly, a hesitant smile trying to make its appearance.\n\nSteven smiled in return and went to Gerald, taking him in his arms. He sighed, laying his head on Steven's shoulder as he slowly rubbed his back. Gerald could feel the tension drain away as exhaustion swept in.\n\n\"Ok now?\" Steven asked.\n\n\"Yes.\" Gerald admitted quietly. He hadn't felt so at ease in months, it was a relief to drop his guard and release the pain that had imprisoned his heart.\n\n\"Gerald, we want you to sleep with us tonight.\" Steven could feel Gerald grow tense in his arms, \"We don't expect anything from you, now or ever. If something happens or not, it's your decision, but we want you with us, neither one of us wants you to be alone.\"\n\nGerald pulled away feeling suddenly shy as butterflies took wing in his stomach, \"Could we just sleep? I hate sleeping alone.\" he whispered. \n\n\"Of course we can. Why don't you get undressed and get in bed, James is doing a quick cleanup in the kitchen and I'm going to make use of the bathroom for a few minutes.\"\n\nGerald nodded and started undressing, pulling his polo shirt over his head. He emerged from under it to see the bathroom door close as Steven went in to get ready for bed. Gerald was feeling very strange, excited, yet apprehensive, all underscored by a weariness that dragged at him unmercifully. He took off his shorts and folded them and his shirt, laying them neatly over a chair. He usually slept nude and debated for a moment then decided to keep his briefs. They gave him a feeling of security, even though he knew that neither Steven or James would try to force anything from him.",
        "He pulled back the covers of the super-size king bed and crawled in. His mind tried to keep his body from relaxing, but was overwhelmed by the exhaustion brought on by his emotional outburst. Gerald lost the struggle to keep his eyes open and was asleep in seconds flat. \n\nJames returned from kitchen duty and smiled at the sight of Gerald sound asleep in their bed. He went into the bathroom and joined Steven in their preparations for bed. They returned to the bedroom and Steven paused.\n\n\"He always did look like an angel when he slept.\" Steven whispered reverently. \n\nJames smiled, \"No more than you, love.\" \n\nHe took Steven into his arms and kissed him soundly, throughly. \n\nSteven emerged from his embrace, his face flushed, \"You, on the other hand, are pure devil.\"\n\nJames chuckled, \"Just wanted to remind you who you belong to.\"\n\n\"As if I'd ever forget,\" Steven scoffed, but he wore a pleased expression on his face.\n\nHe rounded the bed and slid in next to Gerald. James stayed on the side nearest the door and slipped under the covers on his other side. Gerald stirred and moved to his side, mumbling softly in his sleep. He ended up facing Steven, snuggling against him. Steven sighed and pulled him close. James moved in and spooned Gerald from behind. Steven found James' hand and wove their fingers together. A few yawns later and all three were in the arms of Morpheus.  * * *\n\nSeveral hours later, Gerald surfaced from sleep, his body tensing then slowly relaxing as he felt the comfort of the tangle of limbs that enwrapped him. A slow, joyous smile teased his lips. He opened his eyes. In the dim glow from the bathroom nightlight, he could just make out Steven and James.\n\nGerald had moved to his back. James was snuggled in on one side, Steven on the other. Each had laid their head on his shoulders. Arms and legs draped over him, he was cocooned in warm, human and very male flesh. \n\nHis smile blossomed as his cock began to fill. He could feel Steven, already erect against his thigh. James' cock was just beginning to stir. Both men were still asleep. \n\nGerald turned his head to James, whispering his name. James murmured stirring slightly then woke with a start.\n\n\"What is it, baby?\" he murmured sleepily.\n\nGerald grinned and chuckled; he was sure James, in his sleepy state, thought he was talking to Steven. He bent his head and kissed the top of James head. \n\n\"Wake up, lover, I need you.\" he whispered, huskily.\n\n\"Ummm,\" James' hand began moving over Gerald's chest. \n\nGerald shivered and turned to Steven, repeating the procedure, gently waking him. James and Steven soon were both fully awake and aware of who had woken them. James leaned up on his elbow and hovered over Gerald. On the other side, Steven did the same. \n\n\"Are you sure?\" Steven asked quietly as he gazed down at Gerald's smiling face.\n\nGerald nodded, \"I need to touch you,\" he turned to James, \"Both of you.\"\n\nJames smiled and bent down, taking Gerald's lips in a warm, tender kiss. Gerald opened for him and their tongues explored with a slow, languid grace. They moaned at the exquisite pleasure of it. When James released him, Steven started his own explorations. Gerald returned his kiss fervently. Together and without a word, they reached for Gerald's briefs, pushing them down and off, their own following. \n\nJames pushed the sheet down to the foot of the bed, wanting to see the two beautiful men sharing his bed, the two beautiful men with whom he was going to make love. \n\nHands touched warm, yielding skin, caressing and arousing. Breathy moans, murmurs of pleasure and the subtle sounds of the bed disturbed the silence of the room as bodies shifted and combined. The pure, rich scent of male rut perfumed the air.\n\nGerald was lost to all coherent thought. His mind moved backward in time to a place where this was the most natural and welcome order of things. His senses were raw, open. Taste, touch, smell, sight and sound, all were inundated, filled and overflowing with the undiluted essence of man.\n\nA seeking mouth found his. Another found his nipples, first one then the other, licking, nipping and sucking until he was gasping into the mouth that held his captive. He pulled away and nearly came up off the bed when a broad-fingered hand wrapped his cock in gentle steel and began stroking. Another hand found his full, aching balls, rolling and squeezing firmly, yet gently insisting. He lay panting, stunned by the exquisite pleasure.\n\nHe felt the rock-hard lengths of James and Steven pressed against his body. They undulated against him with a steady insistent rhythm. Gerald's own hands moved down until he captured those throbbing poles. He was rewarded with growls and gasps of pleasure. \n\nThe heat rose. Their sweat-slicked bodies writhed in an ancient, primitive motion as one thought consumed their bodies and minds. The pleasure built to immeasurable heights, growing and growing until it burst spectacularly free.\n\nWith a deep, groaning wail, Gerald came. Thick ropes of seed, creamy white and hot, flew from the swollen cap of his quivering cock, arching up to land on his chest and stomach. Twin roars of release burst from James and Steven as they both shot. Their spurting semen added to Gerald's own, coating his shuddering body. The pleasure wrung them out, then slowly receded, leaving a wondrous afterglow. Sated, the three of them sprawled together as their racing heart-beats and laboring breaths resumed their normal rhythm. \n\nJames rose up and bent over Gerald's body. His tongue slid over Gerald's stomach causing it to quiver and tighten. Steven joined him and together they gathered the cum that had mingled and mixed from the three of them. Steven and James met mouth to mouth over Gerald's body and exchanged a hot, languid kiss. They again bent and gathered the remains of the heady fluid and this time, rising up to Gerald, one at a time they fed him their thick male cream. \n\nGerald accepted their gifts, their tongues, their touches and their love. His heart opened, beating free, unrestrained by pain for the first time in months. Pulling the two of them close, he kissed their stubbled cheeks. \n\n\"Thank you,\" he whispered, then paused. \"I think I'm ready to go home now.\"\n\n\"Well darn,\" James quipped, \"just when things were getting interesting.\" \n\nThe three of them dissolved into light-hearted chuckles. \n\nSteven cupped Gerald's cheek, \"Are you sure you're all right now?\"\n\nGerald placed his hand over Steven's, \"Oh yes,\" he answered, \"You made me see that trying to stop living wouldn't bring Irene back. She'd be madder than a hornet at the way I've been acting.\"\n\n\"You needed time to grieve, Gerald,\" James told him.\n\n\"We were just afraid you were going too far, we were afraid we might lose you.\" Steven whispered.\n\nGerald kissed him lightly, \"I'm not going anywhere. I've got too much left too do, to much to live for. My kids, my grandkids and my very dear friends,\" he kissed Steven again and then James.\n\nSteven sighed, \"I don't know about you two, but I'm tired. Anyone want a shower?\"\n\nThere was a short silence.\n\n\"I want to stay here, just like this, until morning,\" Gerald said softly.\n\nJames and Steven nodded their agreement. James reached down and pulled the sheet back over them. They settled down in a sprawling heap of tangled limbs and contented sighs and again courted sleep.\n\n * * *\n\nThat same morning, after showers, and breakfast, Gerald, Steven and James packed and left for Illinois. Steven called the company he employed to look after the house to tell them that they were leaving. They would see that the refrigerator was emptied and that everything else was put to rights for their next visit. James again employed the use of the company jet, so they were not constrained by the need for commercial transport. \n\nThere was a car waiting for them at the airport and they arrived at Dale and Rick's all smiles and totally relaxed. Dale and Rick came out of the house in a rush to welcome them. They were amazed at the change in Gerald. The pale, solemn man who had left so reluctantly had been replaced by a tanned, laughing man who glowed with health and well being.\n\nGerald greeted his sons, for he considered Dale his son as well as Rick, with hearty hugs. James and Steven were also treated to hugs from Rick and Dale. Gerald's bags were unloaded from the trunk and they all headed into the house.\n\nDale quickly brewed up a pot of coffee and brought out an apple pie.\n\n\"You must have just baked this one,\" Gerald quipped, \"Rick never wastes time polishing off your pies.\"\n\n\"You're right about that,\" Dale answered, \"he usually manages to finish one off in two days.\" He gave Rick and impish grin.\n\n\"Hey, I have help, you know,\" Rick defended himself, \"As I recall, you eat your fair share.\"\n\nThe three older men looked on, amused by this bit of teasing.\n\n\"That's right I guess,\" Dale admitted, \"As I remember, we had the last one in bed. You were wearing it and I was eating it.\"\n\n\"Dale!\" Rick's cheeks flushed crimson.\n\nGerald and James began laughing. Steven had just taken a sip of his coffee and narrowly avoided spitting a mouth-full at Dale's outrageous remark. As it was, he did a bit of sputtering and coughing. \n\nJames rubbed his back, \"You ok, babe?\" \n\nSteven nodded, then cleared his throat, \"Apple pie? We should have tried that in Florida.\"\n\nJames and Gerald stared at him open mouthed and actually blushed. Dale and Rick exchanged grins.\n\n\"Um, Dad?\" Rick began, \"Is there something you want to tell us?\"\n\n\"No, and don't even go there son,\" Gerald warned. He turned a jaundiced eye to Steven, \"You should know better, now these two are going to be hounding me for details.\" \n\n\"No we won't.\" Dale told him quietly. All eyes turned to Dale, \"We don't need to know how or why, we're just happy you're back.\"\n\nRick nodded his agreement and the moment was saved.\n\nGerald rose and took his boys into his arms for a three way hug, \"Good Lord above, I've missed you.\" He held them tightly and rocked, his eyes closed as happiness and contentment swept through him, \"It's all right, boys. Everything's all right.\"\n\nThe kitchen was filled with a deep, comfortable silence. Love gathered them into its sphere, holding them safe and warm. James and Steven looked at each other and joined hands. Unspoken was the knowledge that their actions had borne such shining results. They were each proud of the other and eager to express their love for each other in private.\n\nGerald released Dale and Rick, \"I miss her, but she's in my heart and I know a part of her will always be with me. And with you too.\"\n\nThey nodded their agreement, Rick struggling to hold back the tears that threatened. He reached for Dale's hand and found it meeting his mid-way. Dale knew and he was there, lending his strength and love. Rick's eyes met his and saw that love and understanding boldly painted there. He smiled and silently thanked God for this most treasured of men. \n\nGerald turned and addressed the room at large, \"Who's up for a barbeque?\"\n\nThere was a round of laughter and several excited yeah's. It was decided that James and Steven would spend the night. Gerald too was going to stay over. Rick and Dale made a mad dash to the grocery for steaks and raided the deli for pasta salad, macaroni and cheese and baked beans. They also bought some fresh bags of salad greens and a case of beer. \n\nBy the time they got home with their purchases, Gerald had the barbeque ready. James and Steven had been recruited to put fresh sheets on the beds in the room that would be theirs and the one that would be Gerald's, and had come back downstairs to keep Gerald company until Dale and Rick got back. \n\nRick and Gerald volunteered for chef's duty and barbequed the steaks, while Dale, Steven and James prepared the rest of the food which mainly consisted of heating what needed to be hot and putting the salad together. The table was set and everything ready when Rick and Gerald brought the steaks in. They served themselves buffet style from the kitchen counter and bringing their plates to the table, they dug in. \n\nThe meal was accompanied by easy conversation and murmurs of approval over the steak and other dishes. Although the side dishes all came from the grocery deli, they did a good job and the food tasted wonderful. The apple pie that had been ignored earlier when things had taken an emotional turn, made a reappearance, accompanied by vanilla bean ice cream. Eventually everyone rose groaning from the table with complaints of having eaten too much. \n\nThey all pitched in to cleanup, then adjourned to the front porch to enjoy the approaching dusk. James, Gerald and Steven had all changed into jeans and tee or polo shirts before the cooking began, so they were all comfortable and relaxed as they settled into chairs on the front porch. Rick and Dale opted to sit on the edge of the porch with their bare feet buried in the cool, damp grass.\n\nThe five of them sat mostly in companionable silence as the light grew dimmer with the setting sun. Darkness brought the chirping of crickets and other night creatures. Tree frogs sang and in the distance they could here an occasional moo and once the braying of donkey. There was general laughter at the sound and Rick explained that their neighbor kept a donkey along with his horses. He had a small pony cart and was occasionally seen on the road with the donkey between the traces in lieu of a pony.\n\nA quarter moon rode high in the sky and myriad stars made their appearance. A light, fresh breeze, laden with the smell of green growing things, stirred the leaves on the trees causing them to sway with a hypnotic rhythm. It also brought a low, mysterious whisper issuing from the surrounding corn fields.\n\n\"By George, it's peaceful out here,\" James observed quietly, \"No wonder you love it.\"\n\n\"Now that we've got you hooked on all this country charm,\" Gerald joked, \"you and Steven are welcome to drop in for a visit anytime.\"\n\n\"We'll take you up on that\" Steven promised.\n\nThey fell silent, listening to the soothing sounds of the night while watching the lights of an occasional plane as it moved slowly across the darkened sky. \n\nSteven yawned, \"I don't know about the rest of you, but I'm ready to turn in. We had an early start and while it's been fun, it's been long too.\"\n\nJames and Gerald agreed with him. Dale and Rick decided to stay up for a while. After wishing everyone a good night and exchanging rounds of hugs, they curled up on the sofa in the living room to watch a movie. Upstairs, Steven and James faced a smiling Gerald. \n\n\"Are you sure you don't want to stay with us?\" Steven questioned him, \"You know we'd welcome you.\"\n\nGerald's smile grew broader, \"I know and yes, I'm sure,\" Gerald asserted, \"I love you both, and I'm so grateful for they way you helped me last night, but I'm ok now. You two need to be alone and I'm not ready to go any further with anyone yet.\"\n\n\"We understand,\" James told him, \"If you need us, the door's open.\"\n\nThe three of them exchanged hugs and parted company. James was actually secretly relieved that Gerald had opted to leave them alone. Although last night had been wonderful and exciting with the addition of Gerald to their bed, James found himself wanting his lover. He wanted Steven's full attention and the closeness that happened when they were wrapped up in each other, totally and completely. He also anticipated the tight clasp of Steven's sheath as he moved within his warm, welcoming depths. James soon got his way and was making sweet, slow love to his partner. \n\nDale and Rick came upstairs and celebrated their father's return to life with a vigorous round of mating. Rick was determined to punish Dale for embarrassing him earlier in the kitchen. His method of punishment was to bring his lover to the point of orgasm again and again, stopping at the brink until Dale was frantic and begging for release.\n\nRick finally gave in, only because his cock could no longer take the sweet massage of Dale's warm, velvet-soft chute. Together they came, Dale almost crying with relief. Rick was worried for a moment that he'd gone too far until a drowsy and sated Dale made him promise to do it again tomorrow. \n\nThe household settled down to sleep and even Gerald, in his solitary bed, was content. He was secure in the knowledge that Irene was with him and that he was surrounded by the love of his friends and family. Sleep came easily and his dreams were peaceful and serene.\n\nThe next morning saw Steven and James take their leave. They promised to come visit again soon and offered the use of the house in Florida to Dale, Rick and Gerald for whenever they felt the need of it. They also extracted the promise that the three of them would come visit in New York. After several rounds of hugs and kisses they were on their way.\n\nRick, Dale and Gerald went back inside. Gerald sat at the table, looking thoughtfully into his second cup of coffee.\n\n\"I think I'll go to the cemetery today,\" he told them, \"I've only been the one time. I think I'll go and spend some time there this afternoon.\"\n\n\"Do you want us to come with you, Dad?\" Rick asked. He was clearly concerned.\n\n\"Now don't fuss, Rick. I'm ok. I'm not backpedaling. I just thought it might be nice to indulge in a little peaceful contemplation. You know I'm not a church going man, but God and I have our conversations. I think it's time we renewed our acquaintance and this will be a good place to do it,\" he revealed with simple sincerity, \"I would appreciate a lift up to the house. Normally I'd walk, but I've got to haul my luggage home.\"\n\nThey all made the trip to the Hunter farm, bringing in his luggage and taking it upstairs for him. Gerald smiled indulgently and allowed them to mother-hen him for a bit, then shooed them out. He went upstairs and unpacked, laughing when he realized that most of the clothes would have to be hauled back downstairs to be washed. After putting his other personal items away he prepared to head downstairs with an armload of clothing. He paused by the dresser and smiled wistfully at the sight of Irene's hair brush. His gaze was drawn to the framed photo of the two of them. They looked so happy and carefree as they smiled into the camera.\n\n\"The most beautiful woman in Illinois,\" he said softly, \"I miss you so much Rene, but I promise I won't let you down again. I'll be here for our babies and for their babies too. Stay with me Rene, you're my strength.\" \n\nHe gazed at the silent picture then sighed and made his way downstairs to start the laundry.\n\nSeveral hours later he arrived at the cemetery. He walked through the peaceful grounds, following the meandering paths that wound among the graves. The sun was shining and a warm breeze caressed his face. He was filled with an inner peace and knew that he needed this, needed to spend this quiet time alone.\n\nAs he approached the site of Irene's grave, he paused in surprise at the sight of the stranger who stood there, his head bowed. He was medium-tall, about six feet, with dark hair liberally touched with gray. His build was average, yet conveyed a certain strength. Gerald couldn't see his face. He wore a simple dark blue, long-sleeved, button down shirt, tucked into faded jeans. On his feet were white athletic shoes.\n\nGerald watched for a moment until the stranger became aware of his presence. The man turned to face him. He seemed somehow familiar. Gerald moved forward as he prepared to walk away.\n\n\"Wait,\" he called. The stranger halted, \"Did you know my wife?\" he asked.\n\nThe man nodded, \"Yes, I knew her, a very long time ago,\" his voice held infinite sadness.\n\nGerald felt an overwhelming need to know more, \"I'm Gerald Hunter.\" he held out his hand. \n\nThe man took it and gave it a firm shake,\"Jack Becker,\" he replied.\n\n\"Becker?\" Gerald questioned, then his eyes went wide, \"Jack Becker? Oh my God, Irene spoke of you so many times. She wanted so much to know where you were.\"",
        "Gerald couldn't believe that here, now, was the brother that Irene had mourned. Jack had left home at sixteen after their puritanical father had discovered he was gay. Irene had been three years his junior and did not understand what was going on, only that her beloved older brother had left. When she had questioned her parents, she was told in no uncertain terms that she was never to mention his name again. \n\nIt wasn't until years later that she learned the reason for his banishment. She had been outraged that her parents would throw their son, her only brother, away so cruelly. The Becker's were not particularly loving parents and this knowledge put an even bigger strain on the lukewarm relationship that existed between them and their daughter.\n\n\"She spoke of me?\" Jack questioned. \n\n\"Yes, she kept hoping that you might contact her.\"\n\n\"Then she didn't know why I left,\" he stated, a slight tinge of bitterness in his voice.\n\n\"She knew,\" Gerald told him quietly, \"she didn't care. Look, would you like to go somewhere and get a cup of coffee?\"\n\n\"You want to have coffee with a gay man?\" Jack asked, skeptically eyeing the virile specimen before him.\n\n\"Yes,\" Gerald said decisively, \"You're gay? So what? I'm bi. I have one son and two daughters who are straight. My son has a wife, my girls have husbands, they all have kids. My other son is bi and married to a gay man. We're all something. What difference does it make?\"\n\nJack gave Gerald a slow smile that caused Gerald's heart to flutter, \"I wish everyone felt like you do.\"\n\n\"To me it just makes sense. Why make such a fuss about something that shouldn't matter? Now,\" he asked, \"how about that coffee? Or better yet, it's getting late and I'm hungry. How about dinner?\"\n\nJack looked deep into Gerald's, he nodded, \"Dinner sounds good.\"\n\n * * *\n\nTwo years later, Rick was sitting at the kitchen table scanning the New York Times. Dale stood behind him, gazing over his shoulder. Steven and James had sent the paper, the bestseller list highlighted, the top two slots circled. \n\n\"How about that?\" Dale shook his head in wonder, \"You do notice who's on top, don't you?\" Yeah, yeah, and I'll show you who's on top later.\" he promised, \"Dad and Jack are gonna pop their buttons, they'll be so proud,\" Rick continued, his patented grin in place, \"Did you ever think we'd be seeing this?\"\n\n\"Us, holding the top spots on the New York Times Bestseller List? Not in my wildest dreams,\" Dale admitted. He bent down and kissed the top of Rick's head, \"Steven and James are still arriving tomorrow aren't they?\"\n\nRick nuzzled the hand Dale had rested on his shoulder, \"Oh yeah. Dad and Jack have already got their room ready up at the house. Steven said to tell you he expects that killer macaroni and cheese at the barbeque tomorrow.\"\n\nDale chuckled, \"You know, so much has happened in the last couple of years, some of it sad, like your mom's accident, but most of it's been wonderful. We got your dad to meet Steven again and now he and James are Gerald's closest friends. And the way Jack showed up when he did was nothing short of a miracle, especially since he and your dad fell in love,\" Dale sighed, \"I mean really, how romantic is that?\"\n\nRick laid the paper down and rose from the table, \"What about us?\" he questioned, as he took Dale into his arms, \"Our meeting was pretty miraculous too. And as for romance,\" he gave Dale a long, slow, sultry-hot kiss, \"You want romance? Come with me.\" \n\nHe took Dale by the hand and lead him out of the kitchen, grabbing a blanket on his way out the back door.\n\n\"Where are we going?\" Dale asked with a smile, sure that he already knew the answer.\n\nRick turned back and with a grin said, \"I'm going to make love with my baby out under the trees. Is that romantic enough for you?\"\n\nDale forged ahead and pulled Rick with him, \"Oh yeah. Hurry up, would you?\"\n\nRick laughed joyously, \"Lead on lover, lead on.\"\n\nOnce again, sheltered by the oaks and maples of their own personal forest, Dale and Rick pledged their love to one another with their bodies, their words and most importantly, their hearts.\n\nThe End "
    ],
    "authorname": "dlmercer",
    "tags": [
        "steven whispered",
        "gerald face",
        "dale gerald",
        "door steven",
        "shoulder slowly",
        "gerald stood",
        "james rubbed",
        "steven nodded",
        "meet steven",
        "gerald moved"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/the-farmer-and-dale-ch-07"
}
{
    "title": "Joel and Carrie Ch. 07",
    "pages": [
        "\"Walking feels good!\" Carrie sighed. \"I ate too much.\"\n\n\"Whose fault is that?\" I grinned. \"No one said you had to eat that last pancake.\"\n\nThe beach was quiet. That was no surprise considering the time of the year. It was cold and misty out. The sweatshirt I was wearing only helped a little, but I didn't mind. I was with my girl and life was good.\n\n\"But they were so tasty!\" she cried.\n\n\"I know,\" I laughed. \"I'm not feeling all that well myself.\"\n\n\"In your case, it's the Bloody Marys,\" Carrie teased. \n\n\"I only had one,\" I said.\n\n\"Two,\" she corrected. \"And someone needs to tell Robbie that a Bloody Mary has more than just a splash of tomato juice!\"\n\n\"Not on the morning after the prom,\" I disagreed. \n\nI couldn't believe that my prom was over, but it was and somehow I ended up being the lucky guy dating the prom queen. Carrie was one of a kind and there were times I couldn't understand how we ended up together. She was drop-dead gorgeous, smart, funny and most important, in love with me. I was crazy about her too, but then again, what guy wouldn't be?\n\n\"You think the others are drunk again already?\" she asked, reminding me of our group of friends back at the beach house.\n\n\"I expect this little gathering isn't going to break up any time soon,\" I said.\n\n\"You hope!\" Carrie laughed.\n\n\"You've got that right,\" I grinned, remembering some of what happened the night before. \n\n\"Pervert!\" she cried, seeing my expression and guessing my thoughts. It wasn't hard.\n\n\"Takes one to know one!\" I retorted, and then pulled her into a brief kiss. We broke apart afterward and continued to walk. Her hand felt good in mine.\n\n\"I think Tony and Jennifer were nice additions to our little group,\" Carrie said a little bit later.\n\n\"Yeah,\" I agreed.\n\n\"So, not planning on falling in love with her are you?\" she joked, but I could tell there was a little edge of nervousness in her voice. She had no reason to worry about me and she knew it, but even a goddess like Carrie needed some reassurances every once in a while.\n\n\"Love?\" I asked. \"Absolutely not! You're the love of my life and you know it, but lust? Most definitely! Her and the others.\"\n\n\"Which one gets to you the most?\" Carrie asked with a grin.\n\n\"You're kidding, right?\" I asked in reply. \"They all drive me crazy! On the other hand, none of them get to me the way you do.\"\n\n\"And yet here I walk unmolested,\" Carrie sighed dramatically.\n\n\"Forgive me,\" I said as I stopped and pulled her into my arms. \n\nOur kiss was slow and enjoyable at first. It felt good and warmed me despite the cold. Of course that only lasted until Carrie's tongue brushed my lips. The warmth then turned to heat and our kiss became more passionate. After a few moments, I shifted my hands down to her ass and pulled her close. \n\n\"What a pretty picture,\" I heard someone say. I nearly jumped out of my skin. Carrie and I broke apart and quickly turned toward the voice. There was a couple sitting on the beach watching us not twenty yards away. I couldn't believe I had noticed them before. Of course, the fog was pretty heavy and they were wrapped in a blanket. I couldn't see much more than their faces.\n\n\"Sorry,\" I said. \"We didn't realize that we had company.\"\n\n\"No big deal,\" the guy said. \"The beach is always busy on prom weekend.\"\n\n\"It was actually sweet,\" the girl interjected.\n\n\"We didn't want to interrupt, but it looked like things were getting a bit heated,\" the guy grinned.\n\n\"Oh, they were,\" I said with a grin of my own.\n\n\"Men!\" Carrie sighed loudly and exchanged a look with the other girl.\n\n\"What? They wouldn't have?\" I teased.\n\n\"Of course they would have!\" Carrie retorted, surprising the couple. \"But talking about it is such a guy thing.\"\n\n\"I don't know,\" I grinned. \"There are times you like to talk...\"\n\n\"What are you two doing out here?\" Carrie asked, interrupting me. I let it go. She was probably right. I was going a little too far, but I blamed the kiss. No one kissed like Carrie!\n\n\"It is a little cold for sun tanning,\" I joked.\n\n\"Katie insisted she wanted to see the sun rise,\" the guy said in that tone guys use when sharing the ridiculous things they do because of their girls.\n\n\"In this fog?\" Carrie asked with a laugh. He shrugged.\n\n\"Mine wanted to go for a walk,\" I interjected. \"It can't be over forty out here!\" It was actually probably closer to fifty.\n\n\"The things we do for love,\" he added with a shake of his head.\n\n\"Are you two done yet?\" Carrie asked pointedly.\n\n\"What?\" I asked innocently, causing laughter.\n\n\"You're Carrie, right?\" the girl asked once we were done.\n\n\"Yes,\" Carrie frowned. \"I'm sorry, but I don't recognize you.\"\n\n\"That's okay,\" the girl smiled. \"We've never met. In fact, we don't even go to the same school.\"\n\n\"Then how do you know her?\" I asked.\n\n\"You're kidding, aren't you?\" the guy answered as he stood from the blanket. \"Tell me you don't know the most popular girl at our school?\"\n\n\"What school is th...\" I began, but Carrie cut me off.\n\n\"I know you!\" she cried, staring at the guy intently. \"You're the enemy!\"\n\n\"What?\" I asked in confusion.\n\n\"He's Mike Carson,\" she said with a frown. \"He's from Fairview. He pitched against us in the championship. He beat us pretty handily I might add.\"\n\n\"We won two to zip,\" he grinned. \"I wouldn't call that handily.\"\n\n\"I don't know what you'd call it,\" I put in. \"But you can't even mention the game in front of the baseball players at our school without their eyes getting teary.\"\n\n\"You don't seem to upset by it,\" Katie smiled as she stood and joined us.\n\n\"I'm not,\" I shrugged. \"The captain of the baseball team is not my favorite guy in the world and I enjoyed watching him mope and cry afterwards.\"\n\n\"You don't have any school spirit at all, do you?\" Carrie sighed.\n\n\"Of course I do,\" I smiled. \"But you have to admit, it was funny watching him be such a sore loser.\"\n\n\"The winning side was just as bad,\" Katie said with a slow smile. \"You had to see Mike and the others strutting around school. You'd have thought they won the Olympics!\"\n\n\"It wasn't that bad!\" her boyfriend cried. \n\n\"Please!\" Katie snorted. \" If I hear one more time about how you struck out their best hitter...\"\n\n\"Well, I did,\" the guy shrugged.\n\n\"I hear he had the flu that day,\" I said.\n\n\"Really?\" the guy asked, clearly disappointed. \n\n\"No!\" I laughed. \"You jocks are all the same! You're all were so easy!\"\n\n\"Stop being a jerk,\" Carrie sighed.\n\n\"Yes dear,\" I sighed. \"By the way, I'm Joel.\"\n\n\"Mike and Katie,\" the girl said.\n\n\"I'll bet you're a nerd,\" the guy grinned.\n\n\"He was,\" Carrie said taking his hand in greeting. \"Until he started dating me.\"\n\n\"I was never a nerd,\" I disagreed. \"Although I won't deny my social standings went up a bit after meeting you.\"\n\nI saw the way Carrie held Mike's hand and the look she was giving him. He was giving her the same type of attention. A normal guy would have ignored it or gotten mad. I guess I wasn't all that normal. I didn't do either.\n\n\"Look out Katie,\" I said. \"Do you see the way they're looking at each other? Should we be worried?\"\n\n\"I am,\" the girl said after a brief hesitation. \"No one wants a girl like Carrie looking at her boyfriend that way!\"\n\n\"Please!\" Carrie said with a roll of her eyes. \"Have you looked in the mirror recently? You have nothing to worry about.\"\n\n\"You're just being kind. I'm not all that pretty,\" the girl replied. She didn't sound upset or angry. Clearly, Katie was comfortable with herself.\n\nShe was a pale skinned, freckled redhead with thick, curly dark red hair and a nice chest. She was a little heavy, but not unattractively so. She was right. She wasn't really pretty, but she was cute and I found myself liking her.\n\n\"Pretty is subjective,\" Carrie argued. \"Besides, you're warm and funny. Any guy would be lucky to have you.\"\n\n\"Yes, but would he take me with someone like you flirting with him?\" Katie asked, now smiling.\n\n\"You seem to do okay for yourself,\" I smiled in return. \"I mean, you are dating your school's star pitcher.\"\n\n\"That's because I know how to keep my man happy,\" she said, surprising me.\n\n\"And how!\" Mike cried. Carrie and I exchanged a look.\n\n\"Um, it was nice meeting you but we have to get going,\" Carrie said suddenly.\n\n\"What's wrong?\" I asked with a frown. It wasn't like Carrie to be so abrupt, especially not after the look we just exchanged.\n\n\"Nothing,\" she said, but I see she was starting to dance where she stood. Katie registered it as well.\n\n\"We're staying at a friend's house,\" Katie said. \"It's right there. You're welcome to use the facilities.\" \n\nCarrie smiled and I realized that my girl was in the middle of one of her schemes. I fought the huge grin that threatened as I glanced at Katie and wondered what she looked like with no clothes on. I would know soon enough if Carrie's plan worked the way they normally did.\n\n\"Thank you so much,\" my girl said. \"Too many Bloody Marys.\"\n\n\"I could use a bathroom myself,\" Mike said, picking up the blanket.\n\n\"Too many Mimosas in his case,\" Katie grinned. Mike didn't bother denying it.\n\n\"Are you sure your friend won't mind?\" I asked.\n\n\"Ted? No way!\" Mike grinned. \"But just to warn you, he was the guy who hit the two run homer against your ace.\"\n\n\"Great!\" Carrie groaned causing everyone to laugh.\n\nTed's place was nice and Mike grabbed two beers out of the refrigerator as we waited for the ladies. There was no sign of Ted.\n\n\"Just the three of you here?\" I asked.\n\n\"No. Ted, his girl Tiffany and his older sister are also here,\" he replied.\n\n\"Older sister?\" I asked.\n\n\"Not really that much older,\" Mike replied. \"She's been staying here for a few weeks. She and her husband split. Whatever you do, don't bring it up if you meet her. She's been pretty down about it.\"\n\n\"No problem,\" I shrugged. Silence fell as we continued to wait for the ladies.\n\n\"What's taking them?\" Mike frowned. I wondered a bit myself and had a nasty thought, but not even my Carrie could move that fast!\n\n\"You know I thought there'd be more guys here,\" I said changing the subject, and then grinned as I added, \"I know how you jocks like to hang out together.\"\n\n\"There's another house a few blocks away with the rest of the team,\" he laughed. \"Ted and I slipped away last night and snuck back here. It was a good time, but we wanted a little privacy if you know what I mean.\" \n\n\"I do,\" I smiled.\n\n\"It's a little early for such a loud conversation, don't you think?\" a woman's voice asked. \n\nI turned and was a bit surprised to see an Indian woman standing at the entrance to the kitchen. Not an American Indian, but a woman whose ancestors came from India. I was fascinated. I know it sounds silly, but I'd never met anyone from there before. \n\nThe young woman was medium height and had a pretty face. It was tough to tell much more because she hid herself in a big robe. Her hair briefly mesmerized me because it was so long. It was dark and well cared for.\n\n\"Sorry if we woke you,\" Mike said to her. \"This is Joel.\"\n\n\"Hello,\" the girl said, clearly surprised to see me. \"My name is Abhilasha.\"\n\n\"But everyone calls her Abby,\" Mike offered. \"She's Ted's sister.\" I smiled and nodded. She smiled back. In that moment I decided that she was attractive in a very exotic way.\n\n\"No, he's my little brother,\" she said as if it were significant.\n\n\"Speaking of Ted, where is he?\" Mike asked.\n\n\"Gone,\" she shrugged. \"He said that Tiffany needed to get back home early.\"\n\n\"Shit!\" Mike cried. \"He did mention that last night, but I forgot.\"\n\n\"I'm not surprised,\" Abby said pointedly. \"All four of you were pretty wasted when you came in.\"\n\n\"I hope we didn't bother you?\" Katie said as she and Carrie finally rejoined us.\n\n\"It wasn't that bad. You were at least willing to share the concoction you brought back,\" Abby said, but then smiled mischievously and added, \"Although someone needs a muzzle.\"\n\n\"I can get a bit loud in the heat of the moment,\" Katie admitted. She was so red that her skin color actually matched her hair!\n\n\"Me too,\" Carrie grinned. \"For the right man.\"\n\n\"Thank you very much!\" I said in my best Elvis impersonation. Mike laughed and the ladies smiled. \n\n\"This is Carrie,\" Katie said in introduction. \"And this is Abby, Ted's sister.\"\n\n\"Hello,\" Carrie smiled, moving to Abby, taking her hand and giving her a peck on the cheek. The Indian girl was clearly flustered. My girl looked at me and raised an eyebrow slightly. I knew what she was thinking and I shook my head. Of course, I returned her smile as well.\n\n\"I don't suppose you two made breakfast this morning?\" Abby asked Mike and Katie as she stepped away from Carrie. Her movement almost seemed reluctant. I hid a grin. \n\n\"Mimosas,\" Mike laughed.\n\n\"Not quite what I had in mind,\" Abby frowned. \"And I'm sure little brother ran out without making anything to eat in order to get his girl back home before her parents sent out the police.\"\n\n\"Probably,\" Mike shrugged.\n\n\"I can make something,\" Katie said. \"Let me check the refrigerator.\"\n\n\"Don't worry about it,\" Abby smiled. \"I've got it. I'll make omelets. Would you two like to join us?\"\n\n\"We'd love to, but we're stuffed!\" I smiled.\n\n\"I don't know,\" Carrie said, looking at me in a way that I knew so well. \"I might be able to fit a little more.\"\n\n\"Getting hungry?\" I asked with a shake of my head.\n\n\"A little,\" she admitted. Neither one of us were talking about food.\n\n\"That's great!\" Abby said. \"The more the merrier. I've been stuck here for weeks on my own. You have no idea how dead this town is this time of the year. I could use some company.\"\n\n\"Let me call the house so that they won't worry about us,\" Carrie said, taking her cell phone out and walking into the other room.\n\n\"Mike, why don't you make some more mimosas?\" Abby asked. \n\n\"Right after I use the bathroom,\" he said and then disappeared down a hall.\n\n\"You're here with friends?\" Katie asked as Abby started making breakfast. \n\n\"Quite a few actually,\" I smiled. \"But they won't miss us.\"\n\n\"Still partying from last night?\" Katie grinned.\n\n\"No,\" I said, remembering just what kind of partying we did do the night before. \"But we all had a big breakfast together and I'm sure they've restarted the party by now.\"\n\n\"Is that a problem?\" Abby smiled. \"Do you need to get back?\"\n\n\"Not right now,\" I replied, meeting her eyes. They sent a shiver down my spine. They were sexy as hell, but she didn't seem to realize it. \"It's always nice to make new friends, especially ones as pretty as you two.\"\n\n\"Stop hitting on them,\" Carrie said as came back in. \"We don't want them to know just how much of a pervert you are.\"\n\n\"Why not?\" Katie smiled.\n\n\"We don't want to offend anyone,\" Carrie replied.\n\n\"Please!\" Abby cried. \"A little innocent fun is just what I need.\"\n\n\"How about some not so innocent fun?\" I joked.\n\n\"See what I mean?\" Carrie sighed, but she was smiling again.\n\n\"Doesn't his flirting bother you?\" Katie asked as she started putting plates on the table.\n\n\"No,\" Carrie replied honestly as she started helping the redhead. \"Joel and I are meant for each other.\"\n\n\"We're going to be spending the rest of our lives together,\" I added.\n\n\"Are you two married?\" Mike asked with a grin as he rejoined us, took out a picture from a cabinet and quickly made a batch of mimosas. \n\n\"Not yet,\" I shrugged. \"But it's more a matter of timing. College first, then marriage and then kids.\"\n\n\"You seem to have it all planned out,\" Katie said.\n\n\"Not really,\" Carrie said. \"We're taking it as it comes, but we both know that no matter what, we'll be together forever.\"\n\nMike handed out the drinks as we talked. I noticed the mimosas were extremely pale and wondered if he and Robbie went to the same bartending school. Abby took her and finished half of it in one swallow.\n\n\"What if one of you does something stupid?\" Abby asked.\n\n\"Like what?\" Carrie frowned.\n\n\"I don't know,\" Abby answered, but she had something in mind. \n\nThe young Indian woman finished the rest of her drink quickly. I handed her mine. I never was one for mimosas and she looked like she needed another. \n\n\"What if you grow apart?\" Abby asked.\n\n\"We won't,\" Carrie smiled. \"Actually, the longer we stay together, the closer we get.\"\n\n\"I think I know what you mean,\" Katie said, looking at Mike. He smiled back at her. These two were clearly in love. \n\nWe chatted for a while about other things as Abby finished cooking breakfast. Katie and Carrie helped when needed. Mike kept everyone glass filled and I tried to stay out of the way. \n\nAbby finished the glass I gave her and was halfway through the next by the time breakfast was ready. A woman her size had to be at least a little buzzed by then.\n\n\"You okay?\" I asked.\n\n\"Sure,\" Abby replied, but it didn't sound so. \"I just think you all are awfully na\u00efve.\"\n\n\"About?\" Carrie asked.\n\n\"About being together forever,\" the dark skinned girl replied. \"Forever is a long time. What if one of you does something stupid?\" I knew what she meant.\n\n\"Not possible,\" I smiled.\n\n\"Oh come on!\" the Indian girl cried. \"You've never been enticed by another woman?\"\n\n\"Everyone gets tempted every once in a while,\" Mike put in.\n\n\"Really?\" Katie asked pointedly.\n\n\"Of course!\" Mike grinned. \"And don't give me that look. I've seen the way you look at some of the guys at school.\"\n\n\"And I've noticed how you've been looking at Joel,\" Carrie added. Katie looked back and forth between the two of them and blushed slightly. \n\n\"Let's eat,\" I said, thinking food would be a good thing for this group right about now. Abby put the serving plate full of the omelets she made on the table. \n\nWe sat down and talked about other things while we ate. Abby stayed quiet through most of the meal. She was focused on her mimosa. The pitcher Mike made was almost empty by the time the meal ended.\n\n\"Are you saying that it's impossible for either of you to fall to temptation?\" Abby asked once we were done eating, restarting our earlier conversation as if it never ended. She wasn't quite slurring.\n\n\"It's not like that,\" I smiled. \"I think if two people really love each other, then the temptations aren't that bad.\"\n\n\"So,\" the Indian woman said. \"You're saying that if two people really love each other than no temptation is too great?\" The fours of us looked at each other. Poor Abby was clearly working through something.\n\n\"No,\" Carrie said. \"What we're saying that if you really love someone, then you should be open and honest about your needs and desires.\"\n\n\"And if that need is more sex?\" Abby asked. The Indian girl was clearly drunk. Her small frame just couldn't handle the amount of alcohol she drank.\n\n\"Then you're partner should provide it,\" I answered.\n\n\"What if he doesn't like sex so much?\" the Indian girl asked. Carrie and I exchanged a look. There was a pregnant pause.\n\n\"Then he shouldn't get mad when you find your satisfaction somewhere else,\" Carrie finally said.\n\n\"You're kidding!\" Mike cried with a startled laugh.\n\n\"No, I'm not,\" Carrie answered seriously.\n\n\"So, if Joel's not in the mood, he lets you sleep with someone else?\" Mike asked.\n\n\"First of all,\" I grinned. \"I'm never not in the mood.\"\n\n\"It's true,\" Carrie laughed.\n\n\"And second of all, the answer is yes.\"\n\n\"You're full of shit!\" Mike insisted. \"I'd kill the guy if he tried to touch my Katie! And no one who dates a girl like Carrie is going to let another guy near her!\"\n\n\"Why?\" I asked. \"Will his touching make her love me any less? Will someone touching Katie make you stop loving her?\"\n\n\"Look at it the other way around,\" Carried added. \"If I were to jump you right here and now, would you love Katie any less?\" \n\n\"He might not,\" Katie said. \"But I'd love him less!\"\n\n\"Would you really?\" I asked. \"Or would you just be hurt that he broke your trust and cheated on you?\"\n\n\"Does it matter?\" Mike asked.",
        "\"Sure,\" Carrie smiled. \"Because if it's the second and you gave him permission to sleep with someone else, then it wouldn't hurt your relationship as long as you really meant it.\"\n\n\"In fact,\" I shrugged. \"It might even make it stronger.\"\n\n\"It did for us,\" Carrie added. That caused another pregnant pause in the conversation.\n\n\"So,\" Abby said into the silence that followed. \"You two have been with others while you've been dating?\"\n\n\"Yes,\" Carrie answered. I nodded in agreement.\n\n\"And it doesn't bother you when the other is off with someone else?\" Katie asked. Carrie and I looked at each other and laughed.\n\n\"Actually, we're usually together at the time,\" I said. Abby was frowning, but it was poor Mike and Katie's expressions that were priceless. \n\n\"I told you he was extremely perverted,\" Carrie smiled. \"So am I.\"\n\n\"But we've been in separate rooms having our own fun too,\" I added. \"It hasn't hurt our relationship any or those of our friends who joined us. In fact, most of them met each other during our little games.\"\n\n\"There was one couple who broke apart afterward,\" Carrie admitted. \"But they both admitted that they weren't planning on anything long term before it happened.\"\n\n\"Alex and Kanzi?\" I asked. Carrie nodded.\n\n\"Not everyone is as open minded as you two,\" Abby said, breaking the tension in the room slightly. \"Certainly not my husband.\"\n\n\"What happened?\" I asked. It was obvious that she needed to talk.\n\n\"I was lonely and he was ignoring me. I dressed sexily and tried to seduce him. He called me a nasty name and told me to get dressed. I was so frustrated that I threatened to sleep with someone else. He lost it and kicked me out! My family was mortified.\"\n\n\"I'm sorry,\" I said, meaning it. \n\n\"I shouldn't have said something so stupid!\" Abby said, tears coming to her eyes. \"I wasn't really going to cheat on him!\" \n\n\"No, you shouldn't have threatened him,\" Carrie agreed. \"But in the long run, it probably doesn't matter. It sounds like your marriage was doomed from the beginning.\"\n\n\"That's a little harsh!\" Katie said in surprise.\n\n\"Not harsh,\" I smiled. \"Just blunt. That's my Carrie.\"\n\n\"Do you love your husband?\" Carrie asked, ignoring Katie and me. \n\n\"I thought I did,\" Abby said. Carrie smiled sadly and took her hand. Abby looked at her and started crying. Carrie went around the table and took Abby into her arms.\n\n\"Help me,\" Carrie said to Katie. The three women left the room leaving Mike and I alone.\n\n\"That was way too serious,\" Mike mumbled.\n\n\"Not what you expected on prom weekend?\" I smiled.\n\n\"No, not really,\" he said, and then laughed. \"How about a beer? I'm tired of these mimosas.\"\n\n\"Sounds good,\" I said. \n\nThe ladies took their time. Mike and I sat in front of the television and talked about the difference between our schools and the colleges we were going to. That lasted for a while, but still the girls didn't return. Mike started flipping channels and hit one of the music video stations.\n\n\"This song sucks,\" he said. \"But look at the tits on that girl!\"\n\n\"Yeah,\" I smiled. \"They're impressive.\"\n\n\"They remind me of Katie's,\" Mike said half to himself, clearly mesmerized by the video.\n\n\"Really?\" I grinned. He looked at me, frowned for a second and then smiled.\n\n\"Really,\" he replied. I thought I saw him blush slightly, but he was trying to play it cool.\n\n\"Wouldn't you like to see our ladies dressed like that?\" I asked. The girl on the video wasn't dressed in much as all. Some of it had to be glued on.\n\n\"Yeah,\" Mike said, but he clearly was thinking about something else. I saw him get his nerve up before he finally asked, \"Are you and Carrie really swingers?\" I thought for a moment.\n\n\"I guess so,\" I frowned. \"But we don't think of it that way. We love each other and don't need anyone else in our lives. It's just that occasionally we decide to have a little fun with some friends.\"\n\n\"Isn't that the definition of swingers?\" he laughed.\n\n\"I guess,\" I shrugged. \"It just sounds so...well, I don't know. I guess impersonal.\"\n\n\"It's not?\" he asked.\n\n\"Not if you do it right,\" I smiled. \"You'd have to try it to understand.\"\n\n\"I don't think it would work for Katie and me,\" he said with a shake of his head, but I could tell he was deep in thought.\n\n\"Thinking about Carrie?\" I grinned.\n\n\"And Katie,\" he sighed.\n\n\"I think it's pretty obvious that Carrie wouldn't mind a little fun with you,\" I offered. He looked at me oddly, but then shook his head.\n\n\"It's tempting, but I don't want to lose Katie over it,\" he sighed. \n\n\"Let's say you wouldn't,\" I said. \"Would you do it? Remember, if you're with Carrie then Katie will be with me.\"\n\nThe ladies returned at that moment. Carrie knew we were talking about something interesting, but neither one of us continued, so she let it drop.\n\n\"Abby's asleep,\" she said.\n\n\"The poor thing,\" Katie said with a shake of her head.\n\n\"Think she'll be okay?\" I asked in real concern.\n\n\"She shared a bit more with us before going to sleep,\" Carrie said. \"Her husband did a real job on her. Do you know she's only a couple of years older than us?\"\n\n\"I think she'll be okay eventually,\" Katie added. \"But it would be better if her family hadn't sent her down here by herself.\"\n\n\"I'll talk to Ted when I get back home,\" Mike offered.\n\n\"I knew I loved you for a good reason!\" Katie grinned. \n\n\"Thanks,\" he replied with a roll of his eyes, but I could see the sparks flying between the two.\n\n\"Well, I guess it's time we got going,\" I said, standing and stretching.\n\n\"What's the rush?\" Katie asked almost nervously. Mike looked at her thoughtfully and then at Carrie.\n\n\"Yeah, what the rush?\" Carrie asked.\n\n\"Nothing,\" I shrugged, looking at my girl. \"I just thought we'd give them their privacy. Besides, our friends are probably trashing your parents' house by now.\"\n\n\"Please!\" Carrie laughed. \"I don't have any friends that would do that.\"\n\n\"Stay for a little while longer,\" Katie said. \"It's nice to meet new people.\"\n\n\"Are you sure?\" I asked, looking at both Katie and Mike. She nodded and he shrugged.\n\nThe next hour went by quickly. The four of us continued to drink and watch television. I even shared my comment on what I thought the two ladies would look like dressed like some of the girls on the videos.\n\n\"Please!\" Katie said with a roll of her eyes. \"I couldn't pull off most of those outfits.\"\n\n\"Carrie could,\" Mike said without thought.\n\n\"Thanks for noticing,\" Carrie smiled. I shook my head. Carrie was definitely hot for Mike.\n\n\"And don't sell yourself short,\" I said to Katie. \"I bet you'd look great in some of those costumes.\"\n\n\"Yeah right! Look at that girl!\" Katie argued as she pointed to the television. \"She's barely wearing anything!\"\n\n\"I know,\" I grinned. \"But I only said that you'd look great, not that it wouldn't be indecent.\"\n\n\"I wouldn't mind seeing you in something like that,\" Mike grinned. \"When it's just the two of us.\"\n\n\"What would be the point?\" Katie laughed. \"The last time I tried to wear lingerie you had it off me in seconds!\"\n\n\"Katie!\" Mike cried, looking a little embarrassed. \"I think you've had enough to drink.\"\n\n\"Or maybe you haven't had enough?\" Carrie offered, leaning forward so that he could look down her shirt. \"Afraid you might have some fun?\"\n\n\"Are you trying to seduce me?\" Mike joked nervously.\n\n\"Of course!\" Carrie laughed, surprising him.\n\n\"You and Katie both,\" I added. \"My girl's an equal opportunity seducer.\" Katie froze and Mike frowned. He then looked at me nervously.\n\n\"I hope you're not...\" he began, causing Carrie to burst out laughing.\n\n\"What is it with guys?\" she cried. \"They're all so nervous about sleeping with each other!\"\n\n\"It's...\" I began, but couldn't finish. I couldn't come up with the words, but they all got my point. My expression was enough.\n\n\"You said it!\" Mike cried, clearly sounding relieved. \"And then some!\"\n\n\"It's gross for two girls to be together too,\" Katie added.\n\n\"I don't think so,\" Carrie said with a very seductive smile. I could see Katie blush.\n\n\"Me neither,\" I offered.\n\n\"Of course not,\" Carrie smiled. \"Guys love the thought of two girls together.\"\n\n\"We're not that bad!\" Mike laughed.\n\n\"Sure we are,\" I disagreed. \"I would love to see Carrie and Katie together, and don't try to deny that you wouldn't love it too.\"\n\n\"You're serious!\" Katie cried in disbelief as she read my expression.\n\n\"Sure,\" I smiled. \"Notice Mike hasn't disagreed.\"\n\n\"So,\" Carrie said sexily. \"What are the odds of me seducing you two, right here and right now?\" I could feel Katie and Mike's reaction. They both were clearly excitedly and a little frightened. \n\nI know this situation sounds surreal, but with Carrie it's not as odd as it sounds. You see, she really is that gorgeous. People are drawn to her in ways that most of us will never know. \n\nI think we've all bumped into that one stranger whose mere presence pushes all of our buttons. We don't understand why or how, but they just do. Carrie is definitely one of those people when she wants to be. The fact that she's nice and down to earth just makes it worse. I call her my Golden Goddess because that's what she is to me. I don't think many people who have met her would disagree.\n\n\"As interesting as it sounds,\" Mike said reluctantly. \"You're wasting your time. Nothing is going to happen.\"\n\n\"It's my time to waste,\" Carrie shrugged. I could see her enjoying the challenge these two represented.\n\n\"Katie, it's okay with me if Carrie and Mike have some fun,\" I offered.\n\n\"Well it's not to me!\" she cried.\n\n\"How about it Mike?\" Carrie smiled, not put off. \"I'm willing to let Joel and Katie have some fun. You?\"\n\n\"I wouldn't!\" Katie cried in embarrassment. Mike surprised me and laughed.\n\n\"Sure you would,\" he said. \"You're drunk and I can feel your excitement from here. If you weren't scared and worried about my reaction, I think you might try it.\" There was a pregnant pause.\n\n\"How about we try something else?\" Carrie asked, changing tatics.\n\n\"What do you have in mind?\" Mike asked. Carrie smiled at him sexily before turning to Katie.\n\n\"Does the thought of being with another woman really gross you out?\" she asked. Mike realized where she was going with her question and clearly looked interested. Katie noticed his reaction.\n\n\"I can't!\" Mike's girl cried, not quite answering Carrie's question.\n\n\"Why not just try a kiss?\" I asked. \"If nothing else, it will make you and Mike have more fun once we're gone.\"\n\n\"I don't understand,\" Katie said.\n\n\"It's simple really,\" Carrie smiled. \"Like I said before, the thought of two girls being together really gets to guys.\"\n\n\"Does it?\" Katie asked Mike. He shrugged, but then admitted the truth by nodding slowly.\n\n\"Why not see how excited it will make him?\" I asked. \"I'm telling you, if you do, he'll be all over you in minutes.\"\n\n\"And he'll be so horny that he'll be up for almost any suggestion,\" Carrie promised.\n\n\"Like what?\" Katie asked.\n\n\"Like whatever you're thinking about right now,\" Carrie laughed. Katie blushed.\n\n\"For some friends of ours, it was as innocent as dressing up in a school girl uniform,\" I smiled.\n\n\"For others, it was a bit more,\" Carrie added.\n\n\"I can't!\" Katie cried again, but with little fervor. It was obvious that on some level she was curious.\n\n\"It's a simple enough thing. Girlfriends kiss each other every day,\" I put in.\n\n\"Not in the way you mean!\" Katie frowned.\n\n\"Come on babe,\" Mike said, surprising me. \"Try it.\"\n\n\"You really want me too?\" Katie asked, looking at him.\n\n\"It can't hurt,\" he shrugged. \"The worse that can happen is that you won't like it.\" Katie looked back and forth between Carrie and Mike for a moment.\n\n\"Okay,\" the redhead finally said. She was tentative and was looking at Carrie nervously.\n\n\"Don't worry,\" I joked. \"I've only seen one girl turn into a lesbian from a kiss.\" Both Mike and Katie froze.\n\n\"Don't be an ass!\" Carrie frowned as my little joke clearly backfired. \"They're scared enough. Besides, Maria is definitely bisexual!\"\n\n\"I think I've changed my m...\" Katie began, but Carrie didn't give her the chance. She kissed the redhead full on the lips. Katie froze.\n\n\"Doesn't that look hot Mike?\" I asked quickly.\n\n\"Fuck yes!\" he groaned. Katie clearly heard him because she relaxed slightly. Carrie took advantage and slipped her tongue in the other woman's mouth. Mike saw and cried, \"Holy shit!\"\n\nHe and I sat there watching the ladies and I have to say, it really was hot! Katie might not have kissed a girl before, but she definitely knew how to kiss in general and if there was any difference between kissing a girl and a guy, she obviously mastered it quickly. I glanced at Mike and saw him all but panting.\n\n\"Mike, why don't you show Katie how excited you are?\" I asked. He frowned at me in confusion. I showed him what I meant by getting behind Carrie and rubbing my hard-on against her ass. We were both fully clothed, but she could feel my excitement. Carrie moaned into Katie's mouth. A moment later Mike was doing the same to Katie. It was the redhead's turn to moan.\n\n\"Wow!\" Katie said when the kiss finally broke.\n\n\"Do you want to stop?\" Carrie asked.\n\n\"Don't!\" Mike cried. Katie laughed, turned her head and kissed him. I took a moment to do the same to Carrie.\n\n\"How about another kiss?\" Carrie asked once Katie turned back toward her. Katie smiled and nodded. This time the kiss was even longer.\n\n\"I can't take much more!\" I groaned.\n\n\"Me neither!\" Mike cried.\n\n\"Then I hope you don't mind,\" I said, pulling Carrie's sweats down. Her underwear went with them.\n\n\"Oh fuck!\" Mike moaned. He couldn't see much, but just knowing was enough.\n\n\"Take me!\" Carrie cried excitedly. Katie's kiss had obviously gotten to her. I'm sure the situation didn't hurt either. \"While I'm kissing Katie, take me from behind!\"\n\n\"Mike, you too!\" Katie cried. \"Take me! I want to feel you inside me now!\"\n\n\"Alright!\" Mike cried.\n\nMy pants and underwear quickly followed Carrie's. I grabbed her hips and pushed my cock deep into her pussy from behind. She cried out into Katie's mouth.\n\n\"I can't believe we're doing this!\" Mike groaned as he took off Katie and his pants. I couldn't see much, but it was pretty obvious when he pushed into the redhead. She cried out even louder than Carrie!\n\n\"Oh Mike!\" Katie cried as she moaned very loudly. \"Your cock is so deep!\"\n\n\"Forgive her,\" Mike laughed. \"My Katie's a bit of a moaner!\"\n\n\"Me too!\" Carrie said and then let out a moan of her own.\n\n\"Can I take off our tops?\" I asked.\n\n\"Yes!\" Katie cried. \"I want to feel another woman's breasts rubbing against mine.\"\n\n\"Katie!\" Mike cried in shock.\n\n\"What? You don't want to see it?\" Carrie asked, looking past Katie's shoulder.\n\n\"Of course I do!\" Mike groaned. \"But...\"\n\n\"But nothing!\" I interjected. \"I'm not going to touch Katie without your permission, so just relax and go with what's happening.\" With that, I pulled off Carrie's top. Mine quickly followed. Carrie helped Katie with hers. Mike was too busy staring at my girl's tits to be of any help, but he did manage to remove his own. The four of us were now completely naked.\n\nKatie's breasts were milky white and bigger than I thought. They weren't at all shaped like Carrie's. They were more jug-like and I desperately wanted to taste them, but I couldn't, at least not yet. Time to up the anti.\n\n\"Come on Mike!\" I prompted. \"Let's ride our girls hard and watch as their tits mash together!\" He obviously liked my suggestion. His next thrust into Katie pushed Carrie back onto my cock hard! \"That's it!\"\n\n\"Oh yes!\" Katie moaned. \"It feels so good! Harder!\" She was clearly lost to anything but the pleasure she was feeling.\n\n\"Joel! You too! Take me hard!\" Carrie cried. \"I want to feel your cock deep inside!\"\n\nI started pushing in and out of her with long strokes. This went on for a while before I felt a hand on my cock. I looked down and saw Katie reaching around Carrie and holding my cock. She wasn't stopping me from fucking Carrie, but each thrust passed between her fingers first.\n\n'Oh well,' I thought. 'I promised I wouldn't touch her, not that she wouldn't touch me!' I noticed that while Katie's one hand was wrapped around the base of my cock, her other was playing with Carrie's pussy.\n\nI looked down and saw that Carrie's hands were around Katie's hips. My guess was that she was doing the same thing as the redhead.\n\n\"Are you two sure?\" I asked Katie and Mike. \"Because in a moment they'll be no turning back.\"\n\n\"What?\" Mike asked.\n\n\"You mean your cock isn't in Carrie's hand?\" I asked, already knowing the truth. He looked at me and grinned. I laughed and added, \"I thought so!\"\n\n\"Maybe we should stop,\" Mike said, clearly disappointed at the thought, but offering because he thought it was the right thing to do.\n\n\"No,\" Katie said, turning and facing him. \"It's too late for that now.\"\n\n\"I want what they're offering,\" she said. \"So do you and we're both too horny to stop now, so why try?\"\n\n\"Are you sure?\" Mike asked. Katie kissed him in reply. \n\nCarrie hands snaked between them. One went to Katie's pussy and the other to Mike's cock. My girl was also kissing Katie's neck. Carrie teased them both by rubbing his cock up and down Katie's slit. This continued for a few seconds before Carrie spun Katie away from Mike and into my arms. The redhead's eyes were glazed with lust. I kissed her soundly and she melted into my arms.\n\nCarrie quickly took Katie's place in front of Mike. She kissed him just as hard. Now it was her pussy she rubbed his cock against. Mike groaned and grabbed her ass, pulling her against him.\n\n\"Look at how hot they look!\" I whispered excitedly to Katie and I spun her around again so that she was facing Carrie and Mike. My cock was pressed against her thick ass.\n\n\"Wow!\" the redhead cried. It was my turn to reach around her. I used one hand on her pussy and the other on her full breasts. They felt amazing! I buried my face in her neck. Her thick, curly red hair smelled wonderful.\n\nKatie reached behind herself and grabbed hold of my cock. She stroked it once or twice before turning back toward me and looking down at it.\n\n\"It's so big!\" she whispered. I glanced over her shoulder and noticed that for the moment Mike and Carrie were oblivious to us.\n\n\"What's your favorite position?\" I asked, but then pulled her into another kiss before she could answer.\n\n\"The normal one!\" she gasped out when we broke apart.\n\n\"Different people consider different positions normal,\" I grinned. \n\n\"Just take me!\" she cried, giving my cock a squeeze. \"I want to feel this inside of me!\"\n\nI notice Mike look up and frown. Carrie pulled him back and buried his face between her considerable breasts. I was tempted to take Katie to another room. She was clearly a stick of dynamite waiting to go off and Mike still looked a little uncomfortable. \n\n\"What's wrong?\" Katie asked when I didn't immediately move.\n\n\"Nothing,\" I said.\n\n\"Then will you please fuck me?\" she asked in frustration.\n\n\"A bit bossy, aren't you?\" I grinned, forgetting about Mike. \n\nKatie looked at me with lust filled eyes and my cock throbbed in anticipation. I lifted her off the ground and she wrapped her legs around me. I took a moment to roughly kiss her larges breasts and she held my head between them. My cock found the entrance to her pussy and she gasped as I pushed the head in.\n\n\"So big!\" she moaned as she took more and more of my cock in.\n\n\"So hard!\" Carrie cried a moment later. I looked over and saw her riding Mike on one of the couches. He groaned at her words and thrust up into her.\n\n\"Mike, in case you're curious,\" I grinned. \"Carrie likes her ass played with just before she comes!\"\n\n\"Don't give away all my secrets!\" Carrie laughed, but then gasped a moment later. I guess Mike took my advice.\n\n\"That sounds so nasty!\" Katie gasped.",
        "\"It is,\" I smiled as I shifted one hand enough to press a finger against the entrance to her ass. The redhead cried out and then kissed me passionately. I pushed the finger in and her tongue thrust into my mouth as she moaned in excitement.\n\n'God! Do I want her ass!' I thought, but didn't say anything out loud. Not yet anyway. I took one more look at Carrie and Mike and smiled. It was time to move. I carried Katie out of the room and to the back of the house where the bedrooms were. Abby was sleeping in the first one I walked into.\n\nShe must have heard the door open because her eyes flutter open. She was clearly still half asleep. I smiled and carried Katie back out the door. We moved to the next bedroom and we fell onto the bed together.\n\n\"Take me!\" Katie cried as she rolled onto her back and spread her legs wide. I got between them and thrust deep. She gasped and cried out, \"Oh fuck!\"\n\n\"You like?\" I asked as I moved in and out of her.\n\n\"Yes!\" she nearly hissed. \"You're cock is so long and thick! It fills me!\"\n\nI pushed in and out of her red-haired pussy with the same long strokes that Carrie liked so well. They affected Katie the same way. Her head thrashed back and forth as her orgasm neared. Her large sweat covered tits were too much for me. I leaned forward and kissed between them. Katie used her hands to push her breasts on either side of my face. I was buried and I loved it!\n\n\"I'm close!\" Katie cried a few moments later. I lifted my head and smiled. Katie grabbed my shoulders and pulled my lips to hers. I thrust deep and quickened my pace. The redhead cried out as her tongue danced in my mouth. By this point both of our bodies were sweat covered. We slipped and slid against each other.\n\n\"I want your ass!\" I groaned. Katie didn't get a chance to reply. Her orgasm hit and sent her over the edge. I was close myself, but held off.\n\n\"Wow!\" Katie sighed loudly when we were done. I rolled off her and smiled down at her prone form. She looked marvelous. The little extra weight she carried was attractive in it's own way, especially in the hips and ass area.\n\n\"Mike is one lucky guy,\" I said.\n\n\"And Carries is a lucky girl,\" she replied. \"She may be the hottest girl I've ever met, but my God! Your cock is so big and the way you use it...\"\n\n\"Thank you,\" I smiled, rolling her onto her stomach.\n\n\"Mike likes this position,\" she laughed. I looked down at her thick pale ass and smiled. It was meaty and I liked it a lot. I laid my cock along the crack and leaned forward, pressing it between her cheeks, but not inside. My lips found her neck and ears. She responded instantly with a moan.\n\n\"Really?\" I whispered into Katie's ear. \"Does he like to take your ass too?\" She didn't answer at first. I went back to kissing her neck. That added to the constant pressure of my cock against her ass was just enough to make her admit the truth. \n\n\"Sometimes!\" she gasped. \"He says he likes the way it shakes and shivers with each thrust!\"\n\n\"What else does he say?\" I asked. She hesitated, so I added, \"It's okay. Tell me! I think it's pretty obvious that I have a thing for asses. Can't you feel how hard I am just rubbing my cock against yours?\" \n\n\"Yes!\" she panted, and then admitted, \"Mike also says he loves the fact that I have such a big ass!\"\n\n\"I'll bet! I love a big butt too!\" I groaned, adding a moment later, \"Yours is so nicely shaped and pale!\"\n\n\"Thank you. Most guys never focus past my boobs!\" she laughed, obviously happy about the attention I was giving her ass. \"Mike was the first and now you're the second.\"\n\n\"Do you like having your ass taken?\" I asked. She didn't answer at first.\n\n\"What do you think?\" she finally asked in reply, squeezing my cock with her butt cheeks.\n\n\"Can I have your ass?\" I groaned.\n\n\"You're bigger than Mike is,\" Katie said, her tone both nervous and excited. I continued to press my cock against the crack of her ass.\n\n\"Don't worry,\" I said. \"I'll take my time.\"\n\n\"Just stop if I say so!\" Katie moaned as she granted me permission.\n\n\"Not a problem,\" I smiled in reply and shifted my cock so that it was no longer lying along the crack of her ass.\n\n\"Maybe you should...\" Katie began nervously, but I interrupted her because I knew where she was going.\n\n\"Like I said, don't worry,\" I interjected. \"I plan on getting my cock good and wet first!\" I lined the head of my cock up with her pussy and thrust deep. My hips slammed into Katie's ass and the smack sound it made was very satisfying!\n\n\"So big!\" the redhead moaned again.\n\nI shifted off of her, but left my cock buried deep. I started fucking her pussy. After a few minutes, I used one hand to play with her ass and the other to grab her thick hip. I squeezed her hip tight and pushed my thumb into her ass. Katie moaned. I worked her ass at the same pace I was stroking on and out of her pussy. I picked up the pace twice before she couldn't take any more.\n\n\"Do it!\" Katie cried. \"I want to feel your cock in my ass!\"\n\nI pulled out of her pussy without a word and lined my cock up with the entrance to her big pale ass. I pushed in slow. Katie was surprisingly tight. I took my time and after a few minutes I was halfway in.\n\n\"My God!\" Katie cried. \"It feels so good! Fuck my ass! Please!\"\n\nI grabbed her hips and started pushing in and out. One of Katie's hands disappeared between her legs. I knew she was playing with herself and it made me even harder.\n\nI wanted to feel her big ass slapping against me. I wanted the noise of it to echo throughout the house, but she wasn't there yet. \n\nKatie continued to play with her clit as her orgasm neared. My cock was now three quarters inside her ass and I could feel my own orgasm growing near. I slapped her ass. It shivered and shook.\n\n\"Yes!\" she cried and another little bit of my cock slipped in. \n\nI did it again and again I slipped deeper. She looked over her shoulder at me and the lust in her eyes was too much! I leaned over her and pulled her head sideways. My hand was enmeshed in her thick red hair. Katie's eyes were almost animalistic with lust as I roughly kissed her lips. She returned my kiss with the same fervor. \n\n\"I want to feel you fill my ass with your cum!\" she gasped when we broke apart. \"I need to feel it!\"\n\nI shifted back up and took hold of her hips once more. My lust was taking over and my thrusts became harder and faster. I slapped her thick pale ass every so often and she would cry out. Katie clearly loved every second of it! A growl escaped my lips when she finally took my entire cock in her ass. Now my hips and pelvis were slamming into her thick ass. The feeling was amazing and sound of it made me groan. \n\n\"Cumming!\" I grunted a few moments later.\n\n\"Me too!\" she cried.\n\nOur orgasms took us and I filled her ass with cum. Katie was still shivering and shaking for what felt like minutes later. I wasn't any better. It took a while before we were both spent. I rolled off and lay next to her.\n\n\"That was amazing!\" she said, resting her head on my shoulder.\n\n\"Definitely,\" I agreed and started kissing her.\n\n\"You're insatiable!\" she laughed.\n\n\"That's what Carrie tells me,\" I grinned, shifting down her body. I looked between her legs at her red haired pussy and added, \"That looks delicious.\"\n\n\"Really?\" she asked in surprise.\n\n\"Really,\" I groaned and fell between her legs. My tongue danced across her clit. Katie obviously wasn't expecting it.\n\n\"Oh wow!\" she cried. \"Mike doesn't do that to me nearly often enough!\"\n\n\"Whose fault is that?\" I asked as I took a moment to look up at her. \"Carrie lets me know if she wants something specific. I love her so much that I happily give it to her. I'm guessing Mike would do the same for you.\"\n\n\"You think?\" she asked.\n\n\"Of course I would,\" Mike said from the doorway. Carrie was standing next to him.\n\nMy girl pulled him into the room and led him to the bed. Carrie lie down next to Katie and spread her legs. Mike looked at me and I smiled.\n\n\"Which one do you want?\" I asked.\n\n\"Both!\" he groaned after looking back and forth between the two.\n\n\"Let's not be a glutton!\" I laughed. \"You can have both later. Right now I need something to do.\"\n\n\"How about Abby?\" Carrie grinned. I looked at my girl and saw she was looking toward the door. I turned and saw Abby standing there. The Indian girl was clearly confused and a little bit shocked, but she didn't seem disgusted. I turned back to Carrie. She winked at me.\n\n\"Have fun Mike,\" I said as I smiled and slowly moved toward the Indian girl. She watched me and licked her lips. There could be no doubt what I planned on doing once I reached her. I saw her glance down at my cock. The only reaction I could see was her eyes growing bigger. I continued to walk toward her. \n\n\"Wow!\" Abby finally said, seeing my cock slap against my stomach. \"You're very big!\"\n\n\"That seems to be the consensus,\" Mike sighed.\n\n\"Mike, lay down,\" Carrie said as she shifted off the bed. He looked at her and smiled. My girl clearly had something planned.\n\n\"Why?\" he asked.\n\n\"Because I want make out with Katie while you fuck me,\" she answered.\n\n\"Can I watch?\" Mike groaned.\n\n\"No,\" Carrie replied. \"Not this time. You'll be too busy licking Katie to an mind shattering orgasm.\"\n\nI paused and turned back long enough to watch as what she said sunk in. It took a moment for both Katie and Mike to get in. \n\n\"Alright!\" Katie cried. Mike was on the bed in moments, lying on his back. Katie straddled his head. She moaned when his tongue found her opening. Carrie sat on his cock and took it deep. She also pulled Katie's mouth to hers. I enjoyed the sight for a few moments before turning back to Abby.\n\nThe Indian girl was biting her lower lip as she watched the three on the bed. That didn't mean she didn't notice me. Her eyes darted back and forth between the others and me. I was right in front of her. I leaned down slowly. She didn't pull away, but she looked nervous. I knew her lust was warring with her upbringing. I figured talking would only hurt, so I didn't bother.\n\nThe first kiss was gentle. She didn't return it, but then again, she didn't pull away either. I kissed her with more passion the second time. This time she returned it. I took my time and when I thought she was ready, I opened her robe and let it drop to the floor. She was dressed in a thin nightgown and I was naked. I pulled her against me. There was no way she couldn't feel the heat of my body against hers. My excitement had my cock wedged against her stomach.\n\nAbby moaned. It made me even harder and she could feel it. Abby reached between us and took my cock into her hand. I squeezed her small ass in return. This time we both moaned.\n\n\"Here or back in your room?\" I asked between kisses.\n\n\"My room!\" she answered lustfully and half confused. \"I'm not ready for here!\"\n\n\"Sure you are,\" I laughed. \"I can see it in your eyes, but we can always come back later.\"\n\nI took her by the hand and led her back to her bedroom. We entered and I started undressing her. Abby looked nervous again.\n\n\"I can't believe I'm doing this!\" she cried.\n\n\"Believe it,\" I said, leaning down. \n\nAbby was very small. Okay, not so much in height, but certainly in width. She was probably the least curvy girl I'd ever been with, but for some reason I didn't mind. Her breasts, though small, were pointy and dark. I took one of her nipples into my mouth and sucked. She moaned.\n\n\"I'm a married woman!\" she gasped a few moments later.\n\n\"Are you really?\" I asked. \"Is there any chance you're husband will take you back?\"\n\n\"Maybe,\" she replied, but then quickly added when I started to pull away, \"But I don't want to go back! That why I'm here! It's also why my parents are so mad.\"\n\n\"You can work on the sex issue,\" I offered.\n\n\"I doubt it,\" she replied, \"But even if I could, it wouldn't fix everything. I married the wrong man.\" She sounded so forlorn I couldn't let it go at that.\n\n\"Don't worry, there's a right one out there somewhere,\" I said.\n\n\"I hope,\" she frowned. There was really nothing more I could say on the issue, so I decided to focus on what I could do for Abby.\n\n\"How would you like to enhance your sexual experience while you wait for him?\" I grinned.\n\n\"If it involved you and this,\" she said, squeezing my cock. \"Then I'd love it!\"\n\n\"Oh it does!\" I groaned. \"It does!\" I kissed her again.\n\n\"What are we going to do?\" she asked when the kiss ended, more in excitement than nervous this time.\n\n\"Anything you want,\" I smiled, pulling her now naked body against me and kissing her neck.\n\n\"Be careful,\" she gasped. \"I may not be that experienced, but I'm well read and I've been dying to try some things with a guy. I just never had the nerve to bring it up.\"\n\n\"Yet, you seem fine talking to me,\" I teased between kisses.\n\n\"You do remember that I caught you, your girlfriend and another couple naked in bed?\" she asked. \"I'm thinking you're pretty liberal when it comes to trying new things.\"\n\n\"What do you have in mind?\" I asked, pulled away from her neck and looking into her eyes. They were lust filled.\n\n\"I want to make you cum!\" she said excitedly. \"On my face and in my hair!\"\n\n\"Go for it!\" I laughed and sat in an oversized chair. Abby sat on the floor between my legs and took my cock into her mouth. She used both hands to stroke it and I groaned as I watched.\n\n\"You like?\" she teased.\n\n\"What's not to like?\" I asked rhetorically. \"You look amazing and it feels out of this world!\"\n\n\"Have you ever slept with an Indian girl before?\" she asked and then kissed down the length of my cock.\n\n\"No!\" I grunted. \"But I'm betting it will be an experience to remember!\"\n\n\"I'll do my best,\" she smiled and then surprised me by taking the entire length of my cock down her throat. Not many girls could do that! She knew it too. Her smile made that clear. The fact that she was so small only made it better.\n\nAbby started working my cock hard and I enjoyed every moment of it, especially when she started kissing and sucking my balls while she stroked it! Her hair was extremely long. She had it pulled it over her shoulder and down her front. It covered her chest, so I reached out and moved it. \n\n\"Is my hair in the way?\" she asked coyly. I nodded, too excited to say much. She smiled knowingly. \"As you may have guessed, I like pleasing a man with my mouth. I think I'm quite good at it.\"\n\n\"You are!\" I grunted, pushing her hair aside again and cupping one of her small breasts.\n\n\"Here, I know what to do with this,\" she said, obviously meaning her hair. I thought she was going to push it back, but instead she wrapped it around my cock and stroked me with it. I don't know why, but it was so hot!\n\n\"Done ... before?\" I grunted, unable to get out a full sentence.\n\n\"Tried it once,\" she smiled. \"My husband didn't like it, but you obviously do!\"\n\n\"Don't stop!\" I gasped, close to my orgasm.\n\n\"That's not something you have to worry about,\" she said, her eyes showing me how excited she was too. \"Cum for me!\"\n\n\"I'm going to!\" I grunted. Abby took the head of my cock into her mouth and stroked like mad.\n\nMy body tensed and I started cumming. She drank down the first jet of cum and then moved her mouth to my balls. They jumped even harder with the second jet. My cum landed on her face and hair. Abby grinned in satisfaction and I lost track as I finished my orgasm.\n\n\"That was something!\" she said after I was done. I was exhausted, but Abby deserved something for doing such a good job.\n\n\"Your turn,\" I smiled and stood on shaky legs. Abby's eyes lit up in excitement as I helped her stand. We moved to the bed and I lay down on it. \"I want you like Katie was doing with Mike, only I want you facing the other way. Put your hands on the headboard for balance.\"\n\n\"So basically, you want me to sit on your...\" she began, but couldn't quite finish.\n\n\"Exactly!\" I laughed.\n\n\"Like this?\" Abby asked, straddling my head and leaning against the headboard.\n\nI took in her scent with one deep breath and then pulled her pussy down onto my mouth. Her hips were narrow and her thighs small, but her pussy lay wide open for me and my tongue slipped in easily. She moaned rather loudly, but that was fine with me. I reached up and squeezed her breasts. She pressed her pussy harder against my face. I drove my tongue deeper in response and Abby cried out in pleasure.\n\nI knew she wouldn't last long. I wanted this to be great orgasm for her. I really worked her pussy to the point where my jaw hurt, but it paid off in the end. Her orgasm broke free and I was doused with her cum! I drank as much as I could get.\n\n\"I haven't had an orgasm like that in...I've never had an orgasm like that!\" she cried as she fell off of me.\n\n\"It's still early,\" I smiled as I sat up.\n\n\"I really made a mess,\" she said, clearly uncomfortable. \n\n\"Yes, you did,\" I smiled. \"But don't be embarrassed. I'm thankful. First, it tastes amazing!\" Abby blushed, but also smiled. \"Also, it lets me know that I really got to you. It's great for my ego!\"\n\n\"I have a feeling that you're ego is going to get a lot of boosting today!\" she laughed, still blushing.\n\n\"Yours should do okay as well!\" I laughed in return. \"You brought me to a very intense orgasm.\"\n\n\"That may be the only one,\" she said nervously. \"Like I said, I don't have a lot of experience.\"\n\n\"I wouldn't worry,\" I said still grinning as I rolled her onto her stomach. \"I'm betting you'll do fine!\"\n\n\"Ready already?\" she asked in surprise. I rubbed my cock up and down the length of her pussy. She gasped and added, \"I guess so!\"\n\n\"Is this position okay with you?\" I asked, already knowing the answer from how she was acting, but wanting her to understand that she had some control over what I did.\n\n\"This was my husband's favorites,\" she said. I started to shift away, but she grabbed my hand and added, \"No! I like it too! I just wanted it to last more than ten seconds.\"\n\n\"Oh, it will!\" I grinned and pushed the head of my cock in. It was no surprise that despite her orgasm making her pussy wet and ready, Abby was tight as hell! She grunted, but didn't say anything. I pushed a little more in and again she grunted silently. I could tell she was holding it in. \"Feel free to express what you're feelings. I don't mind. In fact, I like it!\"\n\n\"My husband didn't like when I became vocal,\" she gasped out.\n\n\"Be as loud as you want,\" I said, pushing more of my cock in. Abby gasped and moaned. I smiled and added, \"That's it! Just like that! Let it out! It turns me on.\"\n\n\"What do you want me to say?\" she asked. I could tell she was nervous as she spoke.\n\n\"I want you to say anything that turns you on,\" I replied. \"If telling me your grocery list does it for you, then feel free!\"\n\n\"The only thing I can think about right now in that department is produce!\" she moaned.\n\n\"Like what?\" I asked, already knowing where she was going.\n\n\"Like carrot and long curved bananas!\" she moaned. \"And cucumbers!\"\n\n\"Do I remind you of them?\" I grinned and pushed another couple of inches inside. She was very tight, but Abby wanted this as much as I did. It must have hurt at least a little, but she didn't complain. \n\n\"No!\" she gasped. \"You're definite squash or maybe even a watermelon!\"\n\n\"There goes my ego again!\" I laughed as I started working my cock in and out. Abby continued to talk as I slowly filled her pussy. She became more and more comfortable, or maybe less and less caring as time passed. It works out the same in the end.\n\n\"Give it to me!\" Abby cried a few minutes later. \"I want it all!\"\n\n\"You're so tight!\" I groaned. \"I don't want to hurt you.\"\n\n\"Just do it!\" she demanded. \"I want to feel your entire length in me now!\"\n\n\"Are you sure?\" I asked. A little less than half my cock was still outside of her pussy. There was going to be a lot of pain if I pushed all of it inside at once.\n\n\"Please!\" she begged, looking over her shoulder at me and letting me see her desire.",
        "\"You asked for it!\" I cried and shoved my cock deeper. Her pussy was tight and resisted me at first, but Abby's cries of pleasure let me know that despite whatever pain I was causing, she loved it! That was all I needed. I slammed the rest of my cock inside her pussy.\n\n\"Yes!\" she cried as my hips shoved her small ass forward. \"Now ride me!\"\n\n\"Slow or fast?\" I asked.\n\n\"Fast and hard!\" she groaned. I pulled out and then shoved my cock all the way back in with one long thrust. My balls slammed against her clit and she cried out, \"So big! Ride me! Take me!\"\n\nI grabbed her small hips and started doing just that. Her hair kept getting in the way and I grabbed it to move it aside. I accidentally tugged on it, but before I could apologize she let me know that she liked it.\n\n\"Oh yes!\" she cried. \"Ride me! Grab the reins and ride me!\"\n\nIt took me a moment to accept what she wanted, but it wasn't from distaste so much as surprise. In fact, a part of me deep down responded to her request. I grabbed her hair, split it into two and took half in each hand. I wrapped each hand in the mass of hair and pulled enough to jerk her head back.\n\n\"Oh yes!\" she moaned. \"Ride me! Take me like the stallion you are!\"\n\nAbby's tiny ass slammed back into me harder than I probably would have pushed into her because she seemed so small, but clearly small didn't mean fragile in her case. Every time I tugged her hair she'd slam back extra hard.\n\n\"I'm so full!\" she moaned. \"I feel you deep inside!\"\n\nI wasn't sure how someone so small took my entire cock in. I wondered at first, but in the end I could care less. The fact was that she could and she liked it. So did I. It was clear that Abby wanted me to stroke harder from the way she slammed back into me, so that's what I did.\n\n\"Oh yes! Oh yes!\" she cried. \"Ride me! Fill me!\"\n\nHer ass was dark. It was far blacker than Jill's, possibly even darker than Kenzi's. I caught myself wondering if it was even remotely possible for me to take it. It was so tiny that I doubted it, but then again, her pussy took my length eventually, so why not her ass?\n\nI had a flash of Katie pale ass and grinned. They were like opposite sides of the spectrum in so many ways, but both women were openly lustful and willing to show it! It was amazing to say the least!\n\nI shifted all of her hair to one hand and again wrapped my arm in it. I pulled her head sideways and fell forward. Abby attacked my lips before I could kiss her.\n\n\"You're going to have bruises if we keep this up,\" I whispered huskily between kisses. \n\n\"Sometimes a little pain brings a lot of please!\" she gasped out. I could tell she meant it from her eyes. There was a hunger in little Abby that was a bit different then what I was used to.\n\n\"How about a lot of pain?\" a female voice asked.\n\nI looked up and Katie was standing there. She was still naked and sweaty. Her thick red hair was a wild mass on top of her head.\n\n\"I don't know,\" Abby gasped. I sat up and watched silently, curious. My cock was still buried in Abby's pussy, but I slowed my motions.\n\n\"Maybe we'll find out,\" the redhead said. \"But later. Right now I want you to take care of something.\"\n\n\"What?\" the smaller, darker woman asked.\n\n\"Do you like women?\" Katie asked in reply. \n\n\"Yes,\" Abby admitted. \"I have a friend.\"\n\n\"Really?\" Katie said excitedly as she climbed onto the bed. She leaned forward and kissed the Indian girl. The contrast of their skin sent a shivered down my spine. They continued to kiss for a few moments before Katie broke it off.\n\n\"Mike and Carrie are taking a shower,\" she smiled, looking at me.\n\n\"Should I go join them?\" I asked.\n\n\"Not yet,\" the redhead said, shifting so that her back was to the headboard. She spread her legs giving both Abby and I a clear view of her soaked pussy.\n\n\"That looks...\" I began, but Abby cut me off.\n\n\"Yummy!\" she moaned.\n\n\"It's filled with Mike's cum,\" Katie reaching down between her legs and slipping a finger deep. She pulled it out and held it out to Abby. \"You want a taste?\"\n\n\"Oh yes!\" the smaller woman cried, but instead of accepting the finger she crawled up the bed and dove between the redhead's legs. My cock popped free of her pussy, but I didn't mind. Watching them was excitement enough. Katie moaned and then sucked the juices off her own finger.\n\n\"You nasty little slut!\" Katie cried as Abby worked her pussy unmercifully. \n\n\"I can't help it!\" the Indian girl cried. \"It taste so good!\"\n\n\"Then lick it! Get it all!\" Katie cried, pulling Abby's face against her pussy hard. The redhead moaned and looked at me. \"Joel, fuck her! Fuck her hard! Cum in that tiny little pussy of hers!\"\n\n\"Yes!\" the dark skinned girl moaned.\n\nI shifted up on the bed and lined my cock up with Abby's pussy again. I pushed in with one deep stroke. Little Abby cried out because my cock stretched her so much, but it was in pleasure more than anything else.\n\nI started stroking in and out of her. Her pussy was like a vise! Oh, it was hot and wet, but so also damn tight! It didn't take long for me to feel my cum begin to boil. I pulled on Abby's hair just enough so that she had to stick out her tongue to reach Katie's red haired pussy. I watched it dart around for a few seconds. Katie's pussy was throbbing in desire.\n\n\"I'm cumming!\" I grunted. \n\n\"Me...too!\" Abby got out. Her pussy clamped down on my cock, but I forced myself past any resistance and slammed my cock deep. My cum spilled deep inside of the Indian girl's small pussy. I fell forward when I was done. Katie caught me.\n\nThe redhead leaned forward and kissed me with Abby beneath us. I found the strength to hold myself up. Katie smiled and lifted her breasts to me. I fell into them. They were amazing! I took a few moments to kiss and bite at her nipples. Her large pale breasts were soft and full.\n\n\"How long before you're ready to go again?\" Katie asked excitedly. \n\n\"With you tempting me like this?\" I grinned. \"Not long at all!\"\n\n\"He means it!\" Abby moaned from beneath us. \"His cock was so soft that it was about to fall out of my pussy, but you started kissing him and already I can feel it growing and filling me.\"\n\n\"Feels good, doesn't it?\" Katie asked.\n\n\"It's so big!\" Abby cried.\n\n\"I know,\" the redhead smiled.\n\nAt this point my cock was hard enough to start stroking in and out of Abby again, so I did.\n\n\"My pussy is sore already!\" the small woman groaned. I had a thought and glanced down at Abby's tight little ass. Katie saw and grinned.\n\n\"You want it, don't you?\" Katie asked, already knowing me well enough to know what I wanted. I guess it was no big secret.\n\n\"She's too small,\" I replied.\n\n\"She's not having any problems taking you the normal way.\"\n\n\"Sure she is,\" I replied. \"It's just not stopping me because she seems to like it, but there's no way I'll fit.\" Katie eye glowed in excitement. I don't think Abby realized what we were talking about. She was too focused on the feeling of my cock moving in and out of her. She was also staring at Katie pussy again.\n\n\"Let's...\" the redhead began, but then gasped as Abby started licking her pussy. Katie took a moment to enjoy the feeling and then finally got out, \"Let's see!\"\n\nThe redhead reached out and started rubbing the dark skinned girl's ass. Abby liked it at first, but then Katie's finger found the entrance to the smaller woman's ass.\n\n\"Stop that!\" Abby cried. Katie ignored her and slipped the finger in.\n\n\"Hmmm,\" the red head said. \"Maybe not. I can barely fit it inside.\" Abby glanced up between the two of us and realized what we were talking about.\n\n\"You want to put that monster of yours in there!\" she cried.\n\n\"It was just a thought,\" I laughed.\n\n\"That's...that's...\" Abby began.\n\n\"...perverted as hell!\" Katie laughed. \"And I love it!\"\n\n\"You do?\" the Indian girl asked in surprise.\n\n\"Sure,\" Katie smiled. \"Let me show you.\"\n\nShe shifted around and stuck her large white ass in the air. That was all the invitation I needed. I pulled out of the Indian girl and pushed into Katie big, pale ass.\n\n\"That's so nasty!\" the Indian girl cried.\n\n\"But it feels so good!\" Katie moaned. \n\nAbby watched as I worked my cock in and out of the redhead's ass for while. She reached out tentatively and touched Katie's ass. A moment later she was rubbing it.\n\n\"If you're going to do that,\" I smiled. \"Why not reach under her and rub where it counts?\"\n\n\"Please!\" Katie whispered hoarsely. It was clear her next orgasm was building.\n\nAbby looked back and forth between us for a few seconds and then reached under Katie. She also leaned into me and pulled my head down enough to kiss her.\n\n\"Thank you,\" she said softly afterward. Her voice was lust filled, but understandable. \"I thought feeling like this wasn't possible.\"\n\n\"You're welcome,\" I smiled, shoving my cock deep into Katie big ass and watching it shake for a moment. \"Now why don't you slip under Katie? You can taste her again and she can lick my cum from your pussy.\"\n\n\"Is that okay with you?\" Abby asked Katie.\n\n\"Please!\" the pale skinned redhead moaned. \"I want to push my tongue through that dark, soft nest of yours and taste what's there!\"\n\n\"You have such a nasty mouth!\" the Indian girl cried.\n\n\"Better to eat you with!\" Katie joked, laughed and then moaned as I pushed hard into her ass again.\n\n\"So, what are you waiting for?\" I grinned at Abby. \"One more experience to remember and feel.\"\n\nShe opened her mouth to reply, but then she grinned and shrugged. A moment later she disappeared beneath Katie. Both women fell on each other's pussies. All I could see was Katie thick red hair and Abby's two thin dark legs.\n\nOf course, what I could hear, smell and feel was so much more! All my senses were on fire! I exploded deep in Katie's ass. I couldn't stop myself. My balls jumped despite the number of times I'd already cum! I finished my orgasm and rolled away from the women. \n\nI was out of it for a while. I could hear and smell what they were doing, but I was too exhausted to react for a few minutes. I might even have fallen asleep if not for Katie next cry.\n\n\"Now who's a nasty bitch!\" she moaned. I glanced over and saw Abby's tongue darting toward Katie's cum filled ass. I smiled, shook my head and stood. It was time to go check on Carrie.\n\nI went to the bathroom, but it was empty. I decided to take a few minutes to wash. The water felt good and did a lot to revive me. Afterward, I looked through the bedrooms for Carrie and Mike, but they weren't there. I found them in the kitchen.\n\nCarrie was sitting on the table and Mike was in a chair in front of her. He was slowly pouring champagne down her flat belly and over her pussy. His mouth was at the bottom of it, licking and drinking all the juice that fell. Carrie was leaning back and holding herself up by her arms. She was watching Mike.\n\n\"That looks cold,\" I smiled as I entered the room.\n\n\"It is!\" Carrie replied. \"But it tingles nicely too!\"\n\n\"Who is going to clean this mess afterward?\" I joked.\n\n\"Depends on what mess you're talking about,\" Carrie teased back. \"Mike says he'll take care of the kitchen. I was hopping you'd take care of me.\"\n\n\"Always,\" I smiled, and leaned over her. We kissed. The sparks still flew every time out lips touched!\n\n\"I'll leave,\" Mike said. \"You two obviously want to be alone.\"\n\n\"There's later for that,\" Carrie smiled.\n\n\"Besides, I think Abby and Katie need a little more alone time,\" I added.\n\n\"What are they doing?\" he asked, obviously curious and a little bit excited.\n\n\"If I told you, you're run into the room!\" I grinned. \"And then where would poor Carrie be?\"\n\n\"Here with her boyfriend,\" Mike laughed.\n\n\"Which would be fine,\" Carrie quickly put in.\n\n\"No it wouldn't,\" I insisted. \"What kind of lover would I be without letting you feel both of us in you at the same time?\"\n\n\"You're the perfect lover all by yourself,\" Carrie smiled. \"But I wouldn't mind what you're offering.\"\n\n\"How about it Mike?\" I asked. \"Afterward, you can go see what Abby and Katie are doing. I promise you, they'll be at it a while.\" He looked a little nervous, but nodded.\n\nCarrie smiled and climbed off the table. She stood there sexily for a moment letting us both see her as the golden goddess she was before taking our hands and pulling us toward one of the vacant bedrooms.\n\n\"How do you want me?\" Carrie asked me with raised eyebrow. I could see her passion smoldering.\n\n\"Mike, Katie says that you like to take her ass,\" I said. He looked uncomfortable for a moment before he sighed and nodded. I grinned and asked, \"Have you had Carrie's yet?\"\n\n\"No,\" he swallowed visibly. \"Not yet.\"\n\n\"In that case,\" I smiled and pointed toward the bed. \n\nHe lay down and Carrie joined him. She took his cock in her hand and stroked it. She also used one hand to caress his balls. I saw him shiver when she leaned forward and licked the head of his cock. I didn't blame him because just watching had me almost shaking.\n\nCarrie shifted on the bed when Mike was good and hard. It took him a moment to catch on, but when he did he helped her get in position. Carrie was straddling his thighs and facing away from him and toward me. She sat down slowly on Mike's cock. At first I thought it was because it hurt, but as I glanced up into her eyes I saw her watching my reaction. Carrie wasn't in pain. She just liked seeing my lust build.\n\n\"Stop teasing!\" I laughed and pushed her down on Mike's cock. They both moaned as his cock hit bottom.\n\n\"Oh wow!\" Mike moaned. \"Your ass is so tight!\" His moan became a cry. I shook my head. Carrie was bearing down on his cock. She'd done it to me on many occasions and I knew just how good it felt!\n\n\"You're going to make him cum before you get to enjoy both of us in you at the same time,\" I warned. In answer, Carrie laid back against Mike and spread her arms and legs. Her pussy beckoned me even more strongly. \n\nMike was lifting her hips ever so slightly and fucking her ass. I thought about watching a little bit longer, but Carrie gave me a look that demanded satisfaction. I got between her legs and lined my cock up with her pussy. Carrie reached up and took hold of my shoulders. I pushed in and she gasped and squeezed my shoulders hard.\n\nMy girl lifted herself enough to bury her face in my neck. Her teeth scraped across my skin and this time I did shiver. I also started rocking in and out of her. I could feel Mike trying to do the same.\n\n\"I'm going to have a hickey if you keep that up!\" I grunted.\n\n\"Would that be so bad?\" she asked sexily.\n\n\"Too bad there's not a third guy,\" I whispered hoarsely. \"Then you'd have something to keep your mouth busy.\"\n\n\"I could always just do this,\" she said and then fell back against Mike and away from me. She twisted her head and kissed him passionately. He groaned in response and shoved his cock into her ass hard.\n\n\"Slut!\" I grunted. She looked back at me and smiled.\n\n\"Yes, but your slut!\" Carrie said sexily as she took my hand with one of hers and brought it to her mouth. My girl's eyes were lust filled as she sucked two of my fingers in.\n\n\"Suck them harder!\" I groaned, reaching down with my free hand and rubbing her clit. She bucked against my hand and sucked the fingers of my other hand deep.\n\nI slapped her clit and her eyes widened excitedly, so I did it again. Carrie squeezed down on both cocks inside of her.\n\n\"I'm going to lose it!\" Mike groaned, taking a moment to reach around my girl and squeeze her perfectly shaped tits.\n\n\"Do it!\" I demanded as I slapped Carrie's clit for a third time. \"Fill my girl's ass with you cum!\"\n\n\"Fuck yeah!\" Mike grunted and slammed up into Carrie's ass. He lifted her so hard that her pussy swallowed my entire cock and my balls slapped against her. \n\nMike started cumming and Carrie followed a moment later. I wanted to join them, but frankly I just wasn't there yet. I did make sure to ride Carrie so that she could really let lose with her orgasm. I was also able to work in one more slap of her clit. That sent her into a second bout of shivering and shacking. Throughout it all she continued to lick and suck my fingers. It felt surprisingly good.\n\nPoor Mike pretty much passed out after his orgasm. Carrie rolled off of him and replaced my fingers in her mouth with the real thing. My girl knew how to suck cock! She had my cum boiling in moments. I was about to orgasm when Katie and Abby joined us.\n\n\"Don't!\" Katie cried. \"I convinced Abby to try and take him in the ass. I don't want to give her time to change her mind!\"\n\n\"Wow!\" Abby said, looking at my cock sliding in and out of Carrie's mouth. \"I can't fit that!\"\n\n\"See what I mean?\" Katie grinned.\n\nI thought Carrie was going to ignore them, but she pulled off my cock instead. There was a popping sound as my cock left her mouth and I could tell she didn't want to stop. On the other hand, she also looked at Abby's narrow little hips and grinned.\n\n\"Let's go in the other room,\" my golden goddess said. \"Poor Mike needs a break.\"\n\nCarrie stood and left the room quickly. She expected the three of us to follow without question and of course, we did. I couldn't help admire her as she went.\n\n\"You really do love her a lot, don't you?\" Katie smiled.\n\n\"What's not to love?\" I asked.\n\n\"This is one weird day,\" she said, shaking her head.\n\n\"Do you regret it?\" I asked.\n\n\"Are you crazy?\" she laughed, taking hold of my cock and squeezing it. \"I'm having the time of my life!\"\n\n\"Good,\" I smiled and pulled her into a kiss at the doorway to the other bedroom. I used both hands to squeeze her thick ass and let one finger slip inside its darkness. \n\n\"You really do have a butt fetish!\" she laughed as she pulled away.\n\n\"Oh yeah!\" I said, joining her in laughter.\n\nWe walked into the bedroom and found Abby and Carrie already on the bed. They were on their knees facing each other. My girl was sucking the Indian woman's small breasts and fingering her pussy. As I watched Carrie kissed her way down the dark skinned girl's body until her mouth replaced her fingers.\n\n\"Yes!\" Abby cried and pushed her fingers through Carrie's golden blond hair and spreading her knees further apart.\n\nThe sight was very nice and only got better when Katie climbed onto the bed and joined them. She got behind Abby, pulled the Indian girl's hair to one side and started kissing her neck. Katie was clearly very excited. I watched as the redhead licked and bit. Each bite drew a moan from Abby.\n\nKatie reached between her own legs and played with her pussy for a few moments until her fingers were good and wet. She then shifted her hand to the dark skinned girl's ass and pushed one soaked finger in.\n\n\"You really do have a tight ass!\" Katie whispered hoarsely. \"Relax or Joel's cock is never going to fit.\"\n\n\"No amount of relaxing is going to make that thing fit in me!\" Abby cried, looking at my still hard cock from across the room. Her eyes clearly showed her fear, but also her desire.\n\n\"We'll see,\" Katie said. \"But first I have to get you ready!\"\n\n\"Like I said, I'll never be ready for that!\" the dark skinned girl laughed nervously. Katie ignored her. She kissed her way down Abby's back and to her ass. The redhead spread Abby's small ass cheeks apart and dove between them.\n\n\"That looks so hot!\" I groaned, watching both Katie and Carrie licking the Indian girl.\n\n\"Come here!\" Abby moaned. \"Please!\"\n\nI walked over to the bed with my cock slapping against my stomach. Abby was still on her knees, but both of the other ladies were on their stomach as they did their best to drive the poor Indian girl crazy.\n\n\"Kiss me!\" Abby cried. \n\nI climbed onto the bed and moved to Abby's side so that I wouldn't interfere with what the ladies were doing. I kissed her parted lips and squeezed one of her small breasts.\n\n\"Harder!\" the Indian girl cried and then thrust her tongue in my mouth. I squeezed her breast harder and she moaned into my mouth.",
        "\"Remember, she likes pain,\" Katie said, taking a brief break from Abby's ass. \"Otherwise, there would be no way she could take your cock in her pussy, much less her ass!\"\n\nThe dark skinned girl moaned into my mouth and I shifted my hand to her other breast and squeezed.\n\n\"You really like pain?\" I asked, not quite believing it. I'd never met someone like her.\n\n\"I like pleasure just like everyone else!\" Abby cried. \"Only I find certain types of pain pleasurable!\"\n\n\"Now that sounds interesting,\" Carrie said, sitting up. Her face was soaked with Abby's juices. She looked into the Indian girl's eyes. I guess to make sure what she heard was true. Whatever she saw made her smile hungrily.\n\n\"This is going to be fun,\" she said, roughly kissing Abby and thrusting two fingers into the dark skinned girl's pussy. Carrie was all but mauling Abby's lips and the Indian girl was moaning constantly in response.\n\nI felt myself responding on an almost animalistic level. I forced the two apart and kissed Abby roughly. I then turned to Carrie and did the same. In the middle Abby pushed her head next to ours and suddenly I was kissing both women.\n\n\"I'm going to cum!\" Abby cried.\n\n\"Good,\" my girl said lustfully and started biting at the Indian's girl's neck. \n\nCarrie also started moving the hand at Abby's pussy faster. It was only a matter of moments before the pale skinned palm of my girl's hand was slapping against Abby's clit. That did it.\n\n\"Cumming!\" the dark skinned girl cried.\n\n\"Wow!\" Katie said as she sat up to watch. She also pushed a finger into Abby's ass, making the girl's orgasm seem to hit even harder. Abby really did like pain! It was weird, but also hot in an odd way.\n\nShe thrashed around the bed and if Carrie and I weren't holding her up she would have fallen for sure. Her orgasm took a few minutes to pass. Her kisses slowly became gentler. Abby was lying on my shoulder when she was done, clearly spent.\n\nMy cock was rock hard and I needed to do something about it soon. Carrie looked into my eyes and smiled. She saw my need. She took Abby from me and held the girl tight. She also took a moment to kiss me.\n\n\"Katie, Joel needs some satisfaction,\" she said when she was done. \"Would you mind taking him somewhere and taking care of it?\"\n\n\"No problem!\" the redhead laughed excitedly. \"But we'll be back later. I really want to see if Abby can take his cock in her ass.\"\n\n\"Me too,\" I grinned.\n\n\"She'll be ready by the time you get back,\" Carrie promised. I was tempted to stay and watch whatever Carrie was planning, but Katie was already out of the bed and walking toward the door. I looked at her thick ass and followed. I guess I'm more of a doer than a watcher.\n\n\"Where to?\" Katie asked as I joined her in the hall.\n\n\"Shower,\" I replied.\n\n\"Which one?\" she grinned.\n\n\"There is more than one?\"\n\n\"Ted's and Abby's parents have one in the backyard. For washing off the sand before entering the house,\" Katie replied with a smirk.\n\n\"Is it private?\" I asked.\n\n\"Not really,\" she laughed, her eyes lit in excitement. \"It has a door, but it only covers from neck high to knees. Well, chest high for you anyway.\"\n\n\"Sex in public excites you, huhn?\" I asked with a grin.\n\n\"A little,\" she admitted. I looked into her eyes and saw her reaction to our conversation. We were just joking around, but...\n\n\"Let's go,\" I said, making a decision. I took her hand and went toward the back door of the house.\n\n\"I was just kidding!\" she laughed, but I knew it wasn't true. I threw open the door and we ran for the shower.\n\n\"Of fuck!\" I cried as we went. \"I forgot how cold it is out here!\"\n\n\"Let's just hope the water is turned on!\" she laughed as she entered the stall and turned the knob. I was surprised that it actually was. It took a few seconds for the water to get warm.\n\n\"I'm freezing!\" I complained.\n\n\"I can help with that!\" Katie giggled and kissed me. Her hand found my cock and she stroked me slowly once or twice before adding, \"You are cold! Can't have anything happen to this guy!\"\n\nI didn't realize that there was a small ledge on one side of the shower. Katie obviously did. She sat on it and pulled me close. She sucked as much of my cock into her mouth as possible. This lasted for a few seconds.\n\n\"I can't take it all,\" she sighed as she pulled off of my cock. It made a popping sound. \n\n\"That okay!\" I said quickly, causing her to laugh. \"Don't stop!\"\n\n\"Are you crazy?\" she asked. \"I can't let any of this get frostbitten or Carrie will kill me! And rightfully so! But don't worry. I've got just the thing.\" Katie smiled up at me sexily and wrapped my cock in her tits. \n\n\"Things!\" I groaned loudly. \"Just the things! My God they feel great!\"\n\n\"Cold not bothering you anymore?\" she asked sexily.\n\n\"What cold?\" I asked, causing her to laugh again. Okay, I was still cold, but Katie's full breasts totally enmeshed my cock. I wasn't going to say anything that would stop her from what she was doing!\n\nKatie was looking up and watching my eyes. I let her see the lust I was feeling. She smiled and continued to look at me as she stroked my cock with her tits.\n\n\"Take the head of my cock into your mouth!\" I groaned a few moments later.\n\n\"You mean like this?\" she asked with a sexy smile, leaning forward and stroking my cock with a longer motion, causing the head to pop into view. Katie took it into her mouth.\n\n\"Exactly like that!\" I groaned and grabbed both sides of her head. My fingers tangled in her thick red hair as I thrust forward.\n\nI lost track of time for a bit as I fucked Katie's tits and mouth. The warm shower water was just enough to make the cold bearable. I was getting close to cumming when Katie pushed me back and stood.\n\n\"I want you to take my ass again!\" she demanded lustfully. \"I need to feel you inside of me again.\"\n\n\"No problem!\" I nearly growled and pushed Katie toward the door. I figured she'd lean against it, but she twisted around and ended up facing the back wall. \n\nI could care less where she leaned against as long as I got to take her ass! Katie placed her hands on the wall and stood on her toes. She then turned around and smiled lustfully at me. This time I did growl!\n\nI grabbed her thick ass cheeks and spread them. I wanted her ass, but with her on her toes I could see her throbbing pussy too. Unable to resist, I pushed in.\n\n\"That's not my ass!\" Katie gasped.\n\n\"It will be,\" I said. \"Later!\"\n\nI fucked Katie from behind and she clearly loved every second of it. It felt great for me too! I reached around her and squeezed her large breasts excitedly.\n\n\"Ouch!\" she cried, and then laughed and added, \"I'm not Abby!\"\n\n\"Sorry,\" I said, a little embarrassed. I eased off on her breasts, but didn't let go. I also didn't stop stroking in and out of her.\n\n\"No problem!\" she moaned. \"Just keep doing what you're doing and all is forgiven.\"\n\nIt didn't take long to make Katie cum this way. Her orgasm hit and mine was close, but I fought it off. I wanted her ass. I wasn't going to ruin that by cumming too soon.\n\n\"You ready?\" I asked as soon as her orgasm ended. I was rubbing her ass with both hands and occasionally slipping the tip of one finger inside.\n\n\"Do it!\" Katie moaned. I grabbed her hips and pushed into her thick pale butt without argument. It didn't take long to hit bottom. \n\n\"Oh yeah!\" she cried a few moments afterward. \"This is so nasty! Letting a guy I barely know take my ass out here where anyone could see!\"\n\nI doubted any of Ted and Abby's neighbors were around considering the time of year and weather, but it didn't matter. The thought obviously excited Katie. I decided to go with it.\n\n\"I bet there is someone watching us from a window,\" I said tentatively. Katie squeezed down on my cock with her muscles, almost as if rewarding my effort.\n\n\"What do you think he's doing?\" she asked.\n\n\"Running for his binoculars?\" I offered.\n\n\"I hope he's doing more than that!\" she laughed.\n\n\"Oh, he is,\" I said, getting into it a little. \"How could he not? Looking at a sexy redhead like you!\"\n\n\"He probably has his cock out by now, stroking himself!\" Katie moaned loudly, pushing it. Again, I went with it. She wanted me to get nastier? No problem.\n\n\"I wonder if he can tell I'm in your ass and not your pussy?\" I asked.\n\n\"Oh, he can tell!\" she cried.\n\n\"The poor bastard is probably wishing he were me right now!\" I grunted, picking up the pace.\n\n\"I'm sure he is!\" Katie gasped. \"What guy wouldn't want a cock as big as yours!\"\n\nIt never hurt to hear a woman say that! I pushed into her hard, letting her feel my full length. Her large breasts were swinging wildly and my orgasm was growing close.\n\n\"I bet he'd kill to see your breasts moving like that!\" I said. \"The poor bastard can only see so much with the door blocking his view!\"\n\n\"Too...cruel...\" she got out, panting heavily now. \"Open...door...let him see!\"\n\n\"Now wouldn't that be something!\" I cried, feeling my cum begin to boil as I reached between her legs with one hand and rubbed her clit. This of course caused me to slow down in my stroking, but I wanted her to cum with me.\n\n\"No! Don't! Don't slow down!\" she moaned.\n\n\"I'm going to cum soon if I don't,\" I panted. \"I wanted you to cum with me.\"\n\n\"I will!\" she insisted, pushing my hand away from her pussy and replacing it with her own. \"Take my ass! That's what you really want! That's what our voyeur wants to see!\" Katie obviously liked the idea of someone watching us. \n\nIt was also clear that she was as ready to cum again as me. For a second I paused and took the sight of her in. She was leaning against the wall, using one hand to balance herself. The other hand was between her legs and she was obviously working her clit fast and furious. Katie's tits were swinging wildly with each stroke of my cock. Her thick white ass shivered and shook, and her mass of red hair shined enticingly. Katie wasn't my Carrie, but she was definitely something!\n\n\"I want him to see you fill my ass with your cum!\" she cried out.\n\n\"Then let's let him see!\" I grunted, surprising myself as I threw the door to the shower open. It swung wide and if any neighbors were watching, they were getting quite a sight now!\n\n\"Oh yes!\" Katie cried as I went back to fucking her thick butt in earnest. By this point I was pulling her ass back with every thrust and my balls were slapping against her pussy. She tensed up and cried, \"Watch us! Watch us fuck! Watch his big cock take my ass! Watch me cum!\" \n\n\"Now that really is a sight,\" I heard a male voice say. Katie and I froze for a second.\n\n\"Holy shit!\" she cried, her eyes going wide as she looked at the guy. She tried pull away from me, but I wouldn't let her. I held her hips tight. \n\n\"Care to join us?\" I asked him. Katie look shocked.\n\n\"No!\" she cried, but didn't pull away this time. I knew her excitement was warring with her fear.\n\n\"Shhh,\" I whispered in her ear. \"Go with it!\"\n\n\"I can't! Not with a total stranger!\" Katie cried.\n\n\"Why not?\" I asked. \"You barely know me.\"\n\n\"But...\" she began to argue. She stuttered to a halt when the guy started to strip. It didn't take him very long at all. Katie's eyes traveled up and down his body and I could feel her respond.\n\n\"Let me in!\" he cried, walking into the shower stall and shutting the door. \"It's freaking cold out there!\"\n\nPoor Katie moaned. I shifted away from the wall, facing her toward the guy. I was still behind her, my cock in her ass and my fingers slowly rubbing her clit. He smiled warmly.\n\n\"Don't worry,\" he said. \"I won't do anything you really don't want me to.\"\n\n\"I won't let him,\" I added.\n\n\"This is so wrong!\" she cried, but let the guy lean forward and kiss her. It was tentative at first. I think both he and I were holding our breath, wondering how she would react. Katie finally moaned in surrender and threw her arms around him.\n\n\"You won't regret it,\" the guy smiled and started kissing her more passionately. He also took hold of her tits. Katie reached down and started stroking his cock.\n\n\"What do you want?\" I whispered in her ear. \"Tell us!\"\n\n\"I want...\" she moaned, hesitating for a moment before saying it. \"I want to feel both of you inside me at once!\"\n\n\"Fuck yeah!\" the guy cried. I leaned back against the wall and pulled Katie's hips with me. It was an awkward position, but not really uncomfortable. \n\nThe guy got between Katie's legs and she lined his cock up. He pushed in slowly and she moaned the entire time.\n\n\"Two stranger's cocks!\" I whispered. \"One in your pussy and the other in your ass! And still anyone could be watching! Maybe this guy's girlfriend?\"\n\n\"Please!\" Katie moaned. \"Please fuck me! I want to feel both of you cum in me! It feels so good!\"\n\nThe guy and I quickly got into a rhythm where we both could enjoy ourselves. Poor Katie stopped making sense somewhere in the middle, but it didn't matter. She was obviously enjoying herself. Frankly, so was I.\n\n\"Fuck...yes...two...amazing!\" she cried. \"Feels!\"\n\nA few minutes later my orgasm was close again and I looked at the guy. He smiled and nodded, letting me know he was ready too.\n\n\"Katie, we're ready,\" I said, and then asked, \"Are you?\"\n\n\"What?\" she asked, her passion slowing her thought process.\n\n\"Ready or not, I'm going to fill you pussy with cum!\" the guy grunted. Katie's eyes grew big.\n\n\"Yes!\" she cried. \"Oh yes! Fill me!\"\n\n\"Me too!\" I gasped.\n\n\"Do it!\" she cried. \"Please!\"\n\nThat was it. I thrust up into her thick ass hard and let lose. The guy did the same to her pussy. Katie literally screamed and lost it. Her orgasm took her hard. Her whole body shivered and shook as we filled her ass and pussy with cum.\n\nIt took minutes before we all were done. The guy moved under the showerhead afterward. Katie climbed off of me.\n\n\"You okay?\" I asked, stretching slowly. \n\n\"Yes, no, I don't know!\" she answered as she came back to herself. \"That was amazing, but so stupid! He could be a murderer! He could have an STD!\" She then looked at the guy and blushed slightly as she added \"No offense.\"\n\n\"Don't worry,\" the guy laughed. \"I'm not and I don't.\"\n\n\"But...\"\n\n\"He's safe,\" I added.\n\n\"How can you say that?\" she demanded. \"He's a total stranger!\"\n\n\"To you, yes,\" I smiled. \n\n\"What?\" she asked. \"You mean you know him?\"\n\n\"Katie, meet Robbie,\" I said. \"He's been my best friend forever.\"\n\n\"You jerk!\" she said, hitting me in the shoulder, but then she laughed in relief.\n\n\"Did you really think I'd let total stranger join us?\" I grinned.\n\n\"How did you get here?\" Katie asked, getting under the water and washing briefly. \n\n\"That's a good question,\" I added.\n\n\"Carrie called earlier and gave the address just so we'd know where you were,\" he smiled. \"A couple of us decided to stop by when lunch time came and you still weren't back.\"\n\n\"A couple?\" I asked. \"Tina here?\"\n\n\"Nope,\" he smiled. \"She was too exhausted.\"\n\n\"Last night too much for her?\" I grinned.\n\n\"And this morning,\" he laughed in reply. \"You missed a good time, but then again, you clearly had reason.\"\n\n\"My God! Mike!\" Katie cried suddenly. \"I don't know how he'll react when he hears what happened!\"\n\n\"I wouldn't worry,\" Robbie grinned. \n\n\"Who?\" I asked knowingly.\n\n\"Maria and Deana.\" \n\n\"The one who became a lesbian?\" Katie asked, remembering my poorly timed joke. \n\n\"Bisexual,\" I grinned. \"As I'm sure Mike is finding out now.\"\n\n\"Hmm,\" Katie said thoughtfully. \"I think it's time we went back inside.\"\n\n\"Way past time!\" Robbie laughed. \"It's freezing out here!\"\n\n\"Let's go,\" she said.\n\n\"You worried or interested?\" I asked her. \n\n\"I think a little of both,\" she laughed nervously. \n\n\"Don't worry,\" Robbie put in. \"Maria and Deana are a couple. They're safe.\"\n\n\"Of course, Deana has tits that rival yours and Maria's ass...\" I teased.\n\n\"Time to go!\" Katie cried, but she was smiling.\n\n\"I'll meet you guys inside. I need to rinse off first,\" I said.\n\n\"You'd better hurry,\" Robbie said straight faced. \"Wouldn't want anything to fall off in this cold.\"\n\n\"Haha, very funny,\" I sighed loudly as they both laughed and disappeared.\n\nI rinsed off quickly. The hot water felt good, but I needed to get inside where there was heat and blankets!\n\nI slipped inside the house and found a third bedroom. I was so cold that I slipped under the covers to warm up. Frankly, I was also tired. I think I nodded off for a bit, because the next thing I knew I was being kissed. I opened my eyes and saw Deana. I smiled, closed my eyes and enjoyed the kiss.\n\n\"They sent me to find you,\" she smiled. \"I heard you were outside in the cold and parts of you might be possibly freezing and falling off. The ladies were specifically concerned about one part in particular.\"\n\n\"I'm sure,\" I snorted.\n\n\"We couldn't have that happen!\" she continued. \"I volunteered to make sure it didn't.\" \n\n\"Certain parts of me are feeling a bit cold,\" I grinned, throwing the blankets off my body.\n\n\"Can't have that!\" she smiled sexily and joined me in the bed. Deana kissed me again and took my cock in her hand. She stroked it slowly until I finally responded. She pulled back and asked, \"Is that better?\"\n\n\"A little,\" I smiled. \"I think it needs a nice warm place to hide in before it's fully recovered.\"\n\n\"I have just the spot!\" she laughed and climbed up on me. Deana stopped laughing and gasped as she slowly sunk down on my cock. \"Every time I take this monster...\" She didn't bother finishing her statement.\n\nI reached up and fondled her breasts. She smiled sexily and took one of my hands and brought it to her mouth. Deana kissed my palm wetly and then started sucking on one of my fingers. It felt very nice and thrust up into her to let her know. Deana moaned around my fingers.\n\nIt didn't take Deana long to cum. She was really working my fingers when her orgasm finally hit. I wasn't close to cumming, but that didn't mean I didn't enjoy it.\n\n\"Thanks,\" Deana said when she was done. She was lying on my chest with my cock still inside of her. She kissed me passionately to let me know just how much she appreciated her orgasm. I heard the door to the bedroom open as we kissed, but I ignored it until the kiss ended.\n\n\"Hello Carrie,\" Deana said to my girlfriend as she sat back up and squeezed my cock hard with her muscles.\n\n\"Hey,\" Carrie said, and then added in introduction. \"This is Abby.\"\n\n\"Hello!\" Deana said.\n\n\"Hi,\" Abby said, suddenly shy.\n\n\"Would you mind?\" Carrie added. \"I promised Abby that I'd help her get Joel's cock in her ass.\"\n\n\"You sure?\" Deana asked doubtfully as she looked at Abby's slim built. \"There is no way that's going to happen without at least a little pain.\"\n\n\"More than a little,\" Carrie laughed. \"But I think Abby will be fine.\"\n\n\"Really?\" Deana asked, sounding interested.\n\n\"Yes,\" Carrie replied. \"Isn't that right Abby?\"\n\n\"Well,\" the dark skinned girl said, clearly embarrassed. \"I think so.\"\n\n\"Honey, after what we just did,\" my girl laughed. \"You'll be more than fine.\"\n\n\"And what exactly was that?\" I asked in real curiosity.\n\n\"Use your imagination!\" Carrie laughed. She turned to Deana and added, \"You want to help?\"\n\n\"Don't mind if I do,\" Deana said, finally shifting off of me. I watched Abby's eyes as my cock became visible. There was a little fear, but far more anticipation and desire.\n\nI watched as Deana and Carrie helped Abby onto the bed. The Indian girl's long hair got in the way and Carrie shifted it. Deana quickly found Abby's pussy and started playing with it. She also leaned in for a kiss. Abby hungrily accepted it.\n\n\"Have you met Maria yet?\" Deana asked when they finally broke apart. The dark skinned girl shook her head. Deana smiled and added, \"Well, she's going to love you!\"\n\n\"Wait until Robbie sees her!\" I groaned slightly as Carrie stroked my cock and directed Abby onto me. \n\n\"But first things first,\" my girl said, putting the head of my cock at the entrance to Abby's pussy. The Indian girl was facing me and she moaned as Carrie and Deana forced her down on my cock. Her pussy was just as tight as before. I groaned.",
        "\"So big!\" she gasped and fell forward, kissing me. Carrie and Deana continued to help Abby slowly ride my cock until the dark skinned girl finally got used to my size and took me all in.\n\nMy golden goddess then moved by my head and pushed one of her breasts between Abby and me. The Indian girl fell on it and after a moment of watching, I joined her. I couldn't see where Deana was, but since Abby was a talker, I found out quickly enough.\n\n\"Oh my ass!\" the Indian girl cried. \"She's licking and using her fingers just like before! I can't believe how good something so nasty feels!\"\n\n\"Wait until you feel the real thing,\" Carrie said.\n\nI reached around my girl and squeezed her ass. She smiled down at me. My fingers made there way between her legs. She was wet and sticky.\n\n\"You better be ready after this is over!\" Carrie moaned. \"Playing with Abby has made me even hornier than usual.\"\n\n\"I can't wait!\" I said excitedly, pushing two fingers into her pussy.\n\n\"Pardon me,\" Katie said with a grin as she entered the room.\n\n\"What's up?\" Carrie asked.\n\n\"Nothing,\" Katie said, taking the situation in and then meeting Deana's eyes. \"Maria asked me to go find you and bring you back, but I can tell her that you're busy.\"\n\n\"No,\" Deana said, standing and wiping her face. \"I'll go.\"\n\n\"In that case, would you mind if I...\" Katie began, but Deana grinned and cut her off.\n\n\"Have fun!\" she laughed and left the room.\n\n\"Oh, I will,\" Katie said softly and took Deana's place at Abby's ass.\n\n\"Oh wow!\" Abby cried. \"This is so crazy! I can't take any more! I'm cumming!\" The Indian girl's eyes grew big as her orgasm hit. She stopped sucking Carrie's breast and fell on my lips. Her tongue danced in my mouth as her juices flowed down my cock and made it ready.\n\n\"Let's do this!\" Katie cried when Abby was done. \n\nThe redhead was standing now. Her face was wet and glowing in excitement. She pulled Abby off my cock and spun her around so that the dark skinned girl's back was to me. She then made Abby straddle my hips again. Carrie pulled away from me to help. I took a moment to smell her scent on my fingers. \n\nI watched as the two ladies maneuvered Abby so that her ass was over my cock. I shook my head. She really did have a small ass! I doubted she could fit a normal sized cock there, much less mine.\n\nCarrie was holding my cock in place and kissing Abby. Katie was directed the small woman's hips. I couldn't be sure, but it looked like she was also rubbing Abby's clit. The Indian girl's ass touched the head of my cock and there was almost no give. \n\n\"You have to relax at least a little, or there's no way it will fit,\" Katie said.\n\n\"But it's going to hurt!\" Abby gasped.\n\n\"Oh yeah!\" Katie laughed. \"But hopefully, just like you like it!\"\n\n\"We don't have to do this,\" I offered.\n\n\"I want to!\" Abby said quickly. \"It's just that...\"\n\n\"If it hurts too much, we'll stop,\" Carrie interjected. \"You're in control.\"\n\n\"Okay,\" Abby said tentatively. \n\nKatie used both hands to push down on the Indian girl's hips and this time some of the head was forced in. Carrie started rubbing Abby's clit and the dark skinned girl moaned. \n\n\"That's it!\" Katie cried. \"You're taking it!\" The redhead kept pushing on Abby's hips until the head of my cock finally thrust past the entrance to her ass.\n\n\"Oh it hurts!\" Abby cried. \"It hurts!\"\n\n\"You want to stop?\" Carrie asked.\n\n\"No!\" the Indian girl gasped. \"It hurts so good!\"\n\nI laid there for the next few minutes watching Katie and Carrie work on making Abby take more of my cock inside. Abby's cries and the sight of my cock partially inside her tight little ass kept me hard.\n\nSince Katie and Carrie were holding Abby up and I had nothing else to do with my hands, I reached out and began rubbing both of their pussies. It was a toss up as to who was wetter. \n\nIt wasn't long before I was pushing two fingers from either hand inside them. I would occasionally glance over and watch my fingers pushing through first a blond haired nest of hair and then a red haired one. Both glistened with their juices. Yet, invariably my eyes would come back to Abby's small dark ass.\n\n\"I am such a lucky shit!\" I groaned, causing Carrie to take a moment to lean over and kiss me.\n\n\"We both are,\" she whispered before going back to Abby.\n\n\"I think that's it,\" Katie said a few minutes later. \"She can't take anymore.\"\n\n\"I can!\" Abby insisted. Her back and ass were sweat covered and it glistened. To prove her point she thrust down on my cock and another little bit slipped in.\n\n\"Are you sure?\" Carrie asked.\n\n\"Yes!\" Abby cried.\n\n\"You're in control,\" Katie shrugged.\n\n\"No I'm not!\" Abby moaned. \"I don't want to be! I want to be taken! I want to lose control!\" Silence momentarily met her pronouncement. \n\n\"I think we're going about this wrong,\" Carrie finally said.\n\n\"Yeah,\" Katie agreed. They both turned to me.\n\n\"Joel,\" Katie said. \"She wants you to take her.\"\n\n\"You don't have a problem with that, do you?\" Carrie asked. She knew me well enough to know the answer.\n\n\"Absolutely none!\" I replied, causing laughter.\n\nI reached up and grabbed both of Abby's hips as Carrie and Abby backed away. The fingers on both my hands were wet from their pussies. It made them slip for a couple of seconds. The sight also made my cock throb, which in turn made Abby moan.\n\n\"Tell me what you want!\" I demanded. \n\n\"I want to feel your entire cock in my ass!\" the Indian girl gasped. \"I want to feel it all!\"\n\nI pulled down on her hips hard and thrust up with mine. Her ass was tight, but it gave, at least a little.\n\n\"Yes!\" Abby cried in pain and pleasure as she fell back on me.\n\nI continued to pulled and thrust until three quarters of my cock was inside her tight opening. The harder I went the louder Abby moaned. This girl really did like pain!\n\nI wasn't one to normally enjoy causing pain in others, but the fact that Abby clearly loved every second of it got to a dark part of me. \n\n\"Time to switch positions,\" I growled and rolled us over so that Abby was on her stomach. I glanced around the room and saw Carrie and Katie watching. They were also rubbing each other and kissing. Carrie saw me looking.\n\n\"Do it!\" she cried. \"It's what she wants!\"\n\n\"Please!\" Abby added. There was a hunger and need in her expression that couldn't be denied, not that I wanted to deny anything.\n\nI grabbed her hair and roughly pulled her head to the side. I kissed her once, bruising her lips and then bit her neck. Her only react was to moan and tilt her head further, giving me more access.\n\nI rammed my cock deep into her small ass! Abby cried out and I did it again! I leaned up just enough to grab both of her shoulders before thrusting deep for a third time.\n\n\"Too big!\" she moaned. \"You're splitting me in half!\" Yet, it was obvious that she loved every second of it.\n\n\"You want me to stop, all you have to do is say so,\" I offered. She didn't respond, so I thrust for a forth time. At this point all but the last inch of my cock was inside.\n\n\"That is so hot!\" I heard Katie moaned.\n\n\"So are you!\" Carrie cried and I could hear the sounds of kissing.\n\n\"Do you want the last of it?\" I asked Abby.\n\n\"Yes!\" she cried.\n\n\"Ask for it!\" I demanded. \"Tell me what you want.\"\n\n\"I'm not asking!\" she gasped. \"I'm begging! Please give me it all! I want to feel it deep in my ass!\"\n\nThat was it for me. I think I literally saw red as I rammed my cock all the way in for the first time. Abby screamed as her orgasm took her! I fell on top of her, sucked on her neck hard and let lose. My cum boiled free of my cock and filled her ass. The room was filled with the sound of our orgasms.\n\n\"That was something!\" Katie said once we were done.\n\n\"I'll say!\" Carrie added.\n\nI rolled off of Abby slowly. My cock was softening, but her ass was so tight that it clearly hurt her when I removed it. This wasn't the good type of pain either. That passed with her orgasm.\n\n\"Sorry,\" I said. \n\n\"Well worth it,\" Abby smiled, her eyes only half open.\n\n\"Are you going to be okay?\" Carrie asked.\n\n\"I'll be fine,\" Abby said. \"Oh, I'll probably walk funny for a few days, but I'll be fine!\"\n\n\"I don't suppose...\" Katie began, but Abby cut her off laughing.\n\n\"No way!\" she cried. \"I'm done for the day!\"\n\n\"It was just a thought,\" Katie grinned.\n\n\"Another time,\" the dark skinned girl replied, already half asleep. \"I promise.\"\n\n\"I think it's time for us to go,\" Carrie said softly. \n\n\"I could use a shower,\" I put in. \"An inside one please!\" Carrie smiled and Katie laughed as we left the room.\n\nAbby was totally spent and needed sleep. I was probably just as bad, but the other two ladies were clearly in need. I only hoped I could help them! I'd never felt this sexually exhausted before in my life.\n\nI got lucky because as we neared the bathroom, Mike was exiting it. Katie grinned hungrily.\n\n\"There you are!\" she cried and literally jumped him right there in the hallway. \n\nKatie gave Mike a wet kiss before dropping to her knees in front of him and taking his cock into her mouth. Mike leaned back against the wall and took her head in both hands, directing her actions. He also closed his eyes and moaned.\n\nCarrie pulled me past them and into the bathroom. She led me into the shower and started washing me without a word. It felt good. I was functioning enough to return the favor by the time she was done.\n\n\"How are you feeling?\" she asked when we were both clean.\n\n\"Tired,\" I admitted.\n\n\"Wait here,\" she said, slipping out of the shower. I closed my eyes and enjoyed the feeling of the hot water spraying over my body. I heard the door open and shut. A few minutes later it opened again.\n\n\"Let's go,\" Carrie said. I opened my eyes and saw her holding our clothes.\n\n\"Where to?\" I asked, shutting the water and reaching for a towel.\n\n\"Back to the beach house,\" she replied. \"We need a break.\"\n\n\"Hmm,\" I frowned. \"I do, but you...\"\n\n\"I'm fine,\" she smiled warmly. Carrie didn't look as exhausted as me, but she did look sated.\n\nWe got dressed quickly and slipped out of the house. The walk back down the beach was nice. It was still cold out, but not as cold and at least I was dressed this time! Carrie and I walked hand in hand.\n\n\"So, what did you think of that?\" my girl asked.\n\n\"It was great,\" I shrugged, not sure what she was getting at.\n\n\"You seemed to really enjoy yourself with Abby,\" Carrie added.\n\n\"It was certainly different,\" I replied.\n\n\"Well, I don't mind a little pain, but...\" she began. I finally realized what was bothering her. I stopped walking and pulled her into a long kiss. It was slow and sensual.\n\n\"Carrie, what happened with Abby was enjoyable, but it's nothing compared to what we share,\" I said, looking into her eyes. She smiled and I added with a grin, \"Of course, I wouldn't mind having her join our little group.\"\n\n\"What about Katie and Mike?\" she asked.\n\n\"Definitely!\" I said. \"I don't know about him, but she really knows how to have fun!\"\n\n\"I heard about the shower outside from Robbie,\" Carrie grinned.\n\n\"Another new and exciting experience!\" I laughed and pulled her into another kiss. We walked back the rest of the way to the beach house in silence.\n\nThere was a note on the table from the others. They said they got tired of waiting for us and went out to dinner.\n\n\"How about a nap?\" I asked, honestly tired.\n\n\"That sounds lovely,\" she replied, smiling warmly. \"I like having you next to me when I wake up.\"\n\n\"Yeah, the feeling is mutual,\" I said, pulling her close.\n\nWe went to the master bedroom. The sheets were clean and the window was open. Someone had clearly gone to an effort. \n\n\"What do you want to bet that the rest of the rooms are the same?\" she smiled.\n\n\"No bet,\" I replied as I shut the window and stripped down. Carrie was already under the sheets when I joined her. \"We really do have the best friends.\"\n\nI climbed into bed, pulled Carrie close and smiled contently. She sighed and snuggled as close as possible. My body reacted slightly, but I was too exhausted to follow up. We both drifted off rather quickly.\n\nI woke up a few hours later. Carrie was still asleep next to me. I smiled down at her. The others were back. I could hear them laughing through the doorway. It was what probably woke me up. Carrie was oblivious. \n\nI propped myself up by my elbow and rested my head on my hand. I used my other hand to slowly brush Carrie's hair out of her face. She smiled contently. I lay their enjoying the sight of her. I'm not sure how long I lay there like that, but eventually Carrie stirred.\n\n\"That feels good,\" she smiled softly.\n\n\"I like playing with your hair,\" I said.\n\n\"I know,\" she grinned. \"It's another of your fetishes.\"\n\n\"And how do you know that?\" I asked playfully.\n\n\"I'm being poked,\" she replied.\n\n\"Well, there is that!\" I laughed. \"But that doesn't necessarily have to do with your hair.\"\n\n\"You want me to grow it out more?\" she asked.\n\n\"You're perfect the way you are,\" I replied, shifting on the bed and rolling her onto her back. \n\nCarrie looked up at me with loving eyes and opened her arms to me. I rolled on top of her and kissed her. She wrapped her arms around my neck. We kissed like that for quite a while before my hardening cock bumped into the entrance to her pussy. Carrie spread her legs wider and I slipped inside her. \n\n\"I love you!\" she whispered excitedly. I smiled down at her and pushed deep. She gasped.\n\n\"You'll always be my golden goddess,\" I said.\n\n\"Does that mean you love me too?\" she asked, looking into my eyes.\n\n\"Love, worship and adore!\" I replied seriously as I pulled out and pushed in again. \"Now and forever.\"\n\n\"Yes!\" she cried. \"Show me!\"\n\nI kissed Carrie as I continued to stroke in and out of her. I took my time letting her feel my love along with my passion. I could sense her orgasm building along with my own. I knew it was time to finish when Carrie wrapped her legs around me and tried to pull me even deeper. Her nails scraped my back, but not hard enough to draw blood.\n\nI started stroking with longer and deeper strokes. Carrie pulled back from my kiss and cried out. \"Yes! It feels so good!\"\n\n\"You're mine!\" I growled possessively.\n\n\"Now and forever!\" she gasped, using my own words to let me know the depth of her feelings. I crushed her lips with my own.\n\nI thrust one last time inside of her and let go. Her orgasm hit at the exact same moment. We cried out together as the fluids from both our bodies mingled. It was some time before we were done, both of us lying on our backs, panting heavily.\n\n\"I really do love you,\" she smiled.\n\n\"You're the love of my life,\" I replied. \n\nWe lay there for a few minutes recovering and listening to the sounds of our friends in the other rooms. It was obvious that tonight was going to be a repeat of the night before. We could hear the passionate cries.\n\n\"You know,\" Carrie said thoughtfully. \"Our little group isn't so little anymore.\"\n\n\"Yeah,\" I said, wondering what she was getting at.\n\n\"I have to think of something extra special for graduation,\" she said. \"We need one last hurrah.\"\n\n\"This isn't wild enough for you?\" I teased.\n\n\"Oh, it's plenty wild,\" she replied. \"But I have a feeling that graduation will probably be the last time we can all get together.\"\n\n\"Why?\" I asked.\n\n\"I don't know,\" she shrugged. \"It just seems like something like this can't last forever.\"\n\n\"Worried about the rumors that will come out of this weekend?\" I frowned.\n\n\"Yes and no,\" she said. \"I trust the people involved to keep quite, but lets be honest. After what happened Valentine's Day, it's only a matter of time before something blows up.\"\n\n\"It's your fault,\" I smiled. \"You keep seducing everyone we meet!\"\n\n\"Not everyone!\" she laughed.\n\n\"Just promise me one thing?\" I asked.\n\n\"What?\"\n\n\"That no matter what happens, we'll always be together.\"\n\n\"Now and forever,\" she replied, giving me a kiss. It was a gentle kiss, but it said a lot. Just then the door to the room burst open.\n\n\"It's about time you woke up!\" Robbie cried. He was naked. So were the two people with him.\n\n\"Carrie, in the mood for a little fun?\" Brian asked, his wrestler's body already glistening from whatever he'd been doing moments before.\n\n\"Say yes!\" Tina said, her body equally as sweat covered. Her strawberry blond hair was damn and messed. \"You won't regret it. The guys have decided to team up on you!\"\n\n\"Really?\" Carrie asked, her eyes lighting up. She looked at me.\n\n\"Go ahead,\" I laughed. \"Have fun.\"\n\nCarrie gave me one last kiss and got out of bed. I watched as she made her way over to the door. She reached out when she got there and took Brian and Robbie's cocks in her hands.\n\n\"Let's go,\" she said, leading them from the room. Neither argued. That left Tina and I alone.\n\n\"Give me a minute,\" she smiled, walking toward the master bathroom. \"I need a shower.\"\n\n\"Enjoy,\" I smiled. \n\nI lay there smiling contently and listening to the sounds of passion from the other rooms. I wasn't sure what exactly was happening, but I could hear my Carrie's cries getting louder and louder.\n\n\"Hello,\" Maria said from the doorway. I looked up and smiled at her. \"You slipped out of your new friends place before I found you.\"\n\n\"Miss me?\" I joked.\n\n\"She misses your big cock in her ass!\" Deana laughed as she followed her lover in.\n\n\"Don't we all?\" Tara asked as she followed right after Deana, her pale blue eyes twinkling.\n\n\"Oh, I miss his big cock,\" Jill added as she too entered. \"But not necessarily there.\" I sat up in bed watching each of the beauties in front of me, wondering what they were planning.\n\n\"To each her own,\" Abby said as she came in next.\n\n\"I see you decided to join our little party,\" I smiled.\n\n\"Me too!\" Katie laughed as she walked in.\n\n\"Is that everyone?\" I joked.\n\n\"Not quite,\" Jennifer said as she slipped into the room last and shut the door. Her ass was just as big as Katie's but shaped differently. Both made my mouth water.\n\n\"And don't forget me!\" Tina said as she exited the bathroom.\n\n\"So, what exactly is going on here?\" I asked.\n\n\"Well, the boys decided to thank Carrie for having this little party,\" Tara smiled.\n\n\"All four of them?\" I asked in surprise. \n\n\"Yep,\" Jill laughed. \"She's loving every minute of it!\"\n\n\"I can hear,\" I said as Carrie let out a particularly loud cry. The ladies laughed. I looked up and down the line of them. This was way beyond any guy's wet dream.\n\n\"And you ladies?\" I asked.\n\n\"We figured that it only seemed fair to do the same with you,\" Jennifer answered.\n\n\"Um, it's not that I don't appreciate the thought,\" I began tentatively. \"But I'm only one guy and there are eight of you.\"\n\n\"Oh, don't worry,\" Abby grinned, her long dark hair thrown over her shoulder. \"I'm sure we can all think of something to do while we wait our turn.\" \n\nThe Indian girl reached out and brushed one of Jill's dark breasts. Deana moved toward them along with Jennifer. Katie hesitated a moment and met my gaze. She smiled and mouthed the word 'later' before joining them as well. That left Tina, Maria and Tara looking at me hungrily.\n\nTina and Tara quickly moved between my legs. They both smiled up at me before Tina took my cock into her mouth. Tara moved lower. I could feel her tongue as it touched my balls. I groaned. Marie leaned forward and kissed me.\n\n\"Do you want my ass?\" she asked, already knowing me well enough to know the answer.\n\n\"Of course,\" I replied.\n\n\"Then would you mind getting it ready?\" she smiled.\n\n\"Not at all,\" I answered.\n\n\"I didn't think so!\" she giggled and climbed onto the bed. She straddled my head and slowly lowered her ass and pussy to my face. My mouth watered as I watch it grow near. I drove my tongue deep as soon as I could reach.\n\nMaria had a perfect ass! I grabbed her hips with both my hands and did my best to drive her crazy. It was only fair because Tara and Tina were driving me crazy!",
        "After a few minutes someone took one of my hands from Maria's hip. Whoever it was took my fingers into her mouth and sucked them briefly before moving my hands to her pussy. I pushed my fingers deep and heard a gasp. A moment later someone took my other hand and did the same.\n\nDespite all the orgasms I'd had over the last two days I felt another growing close. How could I not? I had two beautiful women licking me, a third riding my face and I was fingering two others!\n\nThe two riding my fingers pulled my hands from their opening and lifted them. They held them up and out and two other women fell on them, sucking the juices from my fingers. I had no idea what the last woman was doing, but frankly, I could care less! I was buried in some of the hottest women I'd ever met!\n\n\"I'm ready!\" Maria cried and shifted off my face. \n\nI didn't get a chance to see what was going on because Jennifer quickly took the Spanish girl's place. I watched her ass and pussy lower toward my face. I thrust my tongue as deep as it would go as soon as I could reach. \n\n'What a perfect ass!' I thought, suddenly realizing that there were no set rules on what was and what was not perfect. Jennifer's ass was nothing like Maria's, but both were perfect in their way. So were all the other ladies! I moaned into Jennifer.\n\n\"Oh yes!\" she cried and surprised me by cumming all over my face quickly. \n\nShe shifted off and another girl took her place. This time is was Tina. Her ass was much smaller than the other two, but I enjoyed it just the same. My nose was buried in her strawberry blond patch and it smelled amazing! \n\nI could feel bodies shifting and suddenly someone was taking my cock inside them. I wasn't sure how I knew, but it was definitely Maria and she was taking my cock into her ass!\n\nTime seemed to blur after that. I didn't fuck every girl's ass because some of them didn't like it, but I did fuck most of them. The ladies all knew about my fetish and had obviously decided to reward me with as much of it as I could take!\n\nAbby's ass was just as small as before, but she seemed to really enjoy the pain/pleasure she felt taking my cock in. Some of the ladies were a bit surprised by her reaction, but they went with it. One of two seemed to react far more than the others. It was clearly a hidden fetish of theirs, at least on some level.\n\n\"Since I'm last,\" Katie said after Deana came all over my face. \"I think it's only fair we try a new position.\"\n\n\"New?\" I groaned, almost exhausted. I'd only cum once since Carrie left, but it was enough.\n\n\"Well, not really new,\" she giggled. \"But you've been lying there the whole time and I just like it when you take me from behind!\" And with that she lay on her stomach next to me.\n\n\"Let me get her ready,\" Deana said, falling between her legs.\n\n\"Oh yes!\" Katie cried.\n\n\"Deana's the best at that,\" Maria smiled.\n\n\"I can tell!\" Katie gasped.\n\nI sat up and watched. Marie went to Katie and kissed her while her lover got the redhead ready for me. Jennifer and Abby had disappeared into the bathroom while Tara and Tina were on the floor in a sixty-nine. Jill was standing next to the bed, fingering herself and playing with her nipples. I'd already fucked her, but that had been a while ago and the black girl looked more than ready to go again.\n\nI reached out and took her hand from her pussy and brought her fingers to my lips. I tasted her and her eyes lit hungrily. I smiled and pulled her onto the bed. \n\n\"Again?\" she laughed. In answer I put her on her side and shifted the top leg. I straddled the lower one and pushed into her pussy. She moaned and cried \"Oh yeah!\" before taking two of my fingers and sucking on them.\n\nJill's round ass was perfect. I wouldn't fuck it because she didn't really like it very much, but that didn't stop me from appreciating it. It also didn't stop me from rubbing it.\n\n\"You like my chocolate cheeks?\" she asked as her orgasm grew near. I grinned and nodded. She started to laugh, but then gasped in excitement and she added, \"Well, I'm not taking that monster there, but I don't mind it you play with it a little.\"\n\n\"Really?\" I asked, driving my cock deep.\n\n\"Just a little!\" she gasped. \n\nIt was pretty obvious that she was ready. I slipped one finger between her tight butt cheeks and push it in. I moved it in and out in time with my cock. I made sure it went deep enough to stimulate her, but not deep enough to make her uncomfortable. Of course with each woman both of those varied, but I guessed right with Jill. \n\n\"Yeah!\" she cried. \"Just like that!\"\n\n\"Cum for me!\" I demanded, picking up the pace.\n\n\"Yes!\" she cried and did exactly that. Her chocolate ass shook and shivered throughout her orgasm. I pulled my hand from her ass so it wouldn't distract her from her pleasure. \n\n\"My turn!\" Katie cried as soon as Jill was done. I hadn't realized that she was watching us because I was so focused on Jill, but she was, along with the others.\n\nDeana lifted her face from Katie's ass and pussy and smiled at me as she wiped it with one hand. Maria shifted around and kissed her lover. I straddled Katie's legs and pushed into her big white ass. \n\n\"Cum in my ass!\" she cried. \"Just one more time!\"\n\n\"Do it!\" Tara said, now standing next to Tina. They were now fingering each other and watching.\n\n\"Go ahead,\" Tina added. \"You're going to pass out soon anyway. Why not from taking that beautiful ass?\"\n\nI grunted and grabbed hold of Katie's hips. She lifted her ass slightly to give me better access. I lost track of everyone and everything except her thick ass. It shivered with every thrust and her cries echoed throughout the house. I was close, but Katie came first. I rode her through her orgasm, but didn't get my own release. \n\n\"Damn!\" Katie cried when she realized I wasn't going to let loose, but her orgasm was too intense for her to really feel bad for long. Tara started kissing her. I'm sure that helped too! \n\nI looked around for someone to help me. I needed to cum. It didn't matter how many times I'd already done it so far. Katie ass had really gotten to me. I needed another to take its place. \n\nTina saw my hunger and laughed when I grabbed her and pulled her onto the bed. She lay on her back and I quickly raised her legs onto my shoulder. Tina directed my cock to her ass and held it at the entrance as I slowly pushed in. She was already ready for me from her play with Tara. \n\n\"It feels so good!\" she cried when I finally hit bottom. \n\nTina had large breasts with big areolas. I reached out squeezed them as I worked my cock in and out of her ass. Her hands covered mine.\n\n\"So I guess it's my ass that gets cummed in!\" she gasped a few minutes later. I was working her ass hard by now.\n\n\"If that's what you want?\" I growled. \"I'm getting close!\"\n\n\"Me too!\" she cried. \"But I want you to cum on my tits instead!\"\n\n\"Okay!\" I cried, shoving my cock deep into her ass and letting loose. The first jet of my cum filled her ass, but I pulled out after that. The rest landed on her pale breasts. Tina stroked my cock until I was empty.\n\n\"That was incredible,\" I said softly when I was finally done. A couple of the girls fell on Tina breasts and licked my cum from them.\n\nI lay there quite a while later trying to recover as I watched all the girls playing with each other. It was quite a site. Jennifer and Abby returned from the bathroom. Katie and Deana all but jumped the Indian girl. They rode her roughly, taking turns. Jennifer slipped out of the room.\n\nThis time is was Tara and Maria in a sixty-nine. That was until Tina and Jill joined them and they made a circle. I thought it a miracle when my cock actually stirred again. \n\n\"Joel,\" I heard from the door and looked up. There was Jennifer. She smiled when she saw meet her gaze and added, \"Carrie wants you.\"\n\nI got up without hesitation and made my way to the door. I stopped long enough to kiss Jennifer and squeeze her ass with both hands. That caused my hardening cock to rub against her belly.\n\n\"Later!\" she panted excitedly as she broke our kiss. \"First go to Carrie.\"\n\n\"Why?\" I asked, curious.\n\n\"She's one cock short,\" the girl grinned.\n\n\"Four isn't enough?\" I frowned.\n\n\"I guess not for Carrie!\" she said, her grin turning into a laugh.\n\n\"I bet I can make you stop laughing,\" I said hungrily, suddenly wanting Jennifer again. I pushed one finger into her ass.\n\n\"I'm sure you could!\" she cried. \"But Carrie wants you!\"\n\n\"She won't begrudge me a few minutes,\" I replied pushing Jennifer toward the large chair. \n\n\"Even with me?\" Jennifer asked nervously.\n\n\"Even with you,\" I smiled confidently and sat in the chair. \"So, come here unless you don't want to?\"\n\n\"Oh, I want to!\" she cried and climbed onto my lap. \n\nShe kissed me and stoked my cock a few times before putting the head at the entrance to her pussy. Jennifer was straddling my hips on the chair and I grabbed her ass and pulled her down on my cock.\n\n\"Oh yes!\" she cried reaching between her legs and playing with her clit after a while.\n\n\"Rub it harder!\" I demanded. \"I want to feel you drench me with your cum!\"\n\n\"No problem!\" she cried, working her clit harder. I once again pushed a finger into her ass while she road my cock. She squeezed down hard on my cock and added, \"Oh yeah! That's it! Make me cum!\"\n\nJennifer didn't have much of a chest, but that didn't stop me from sucking on one of nipples until she pulled my head back and attacked my mouth. Jennifer was seriously bouncing now and it was only moments before my cock and legs were soaked with her juices.\n\n\"Something smells delicious!\" Jill grinned, pulling Jennifer into the circle. The girl didn't argue although I wasn't sure her orgasm was done yet. I'm sure Jill's mouth would finish her right. I stood and slipped out of the room.\n\n\"There you are!\" Carrie cried when I finally found her. She was lying on top of Robbie with his cock buried deep in her pussy. Tony was behind her slowly fucking her ass. Brian and Mike were on either side of the bed with Carrie slowly stroking both of them.\n\n\"I understand you need one more?\" I asked.\n\n\"Need?\" Carrie gasped. \"Not really. But want? Definitely!\"\n\nShe's already sucked Brian and me to orgasms,\" Mike said.\n\n\"Yes, but they're hardening again nicely,\" Carrie said, stroking them in unison. \"I was just about to start again.\"\n\n\"Is that what you want?\" I smiled. She looked up at me. Her eyes were half glazed and she was sweat covered. \n\n\"What I want is to feel five men cumming at the same time!\" she gasped.\n\n\"What a fucking slut!\" Brian groaned and looked up at me in embarrassment.\n\n\"She can be,\" I shrugged, moving closer.\n\n\"Sorry man!\" Brian said quickly.\n\n\"No problem,\" I smiled. \"But just for that, Tara is next.\" He looked at me carefully before breaking into a smile of his own.\n\n\"She'll love it!\" he said.\n\n\"I know,\" I laughed. \"If we can get her away from the ladies.\"\n\n\"I'll take care of that!\" Carrie said, sounding annoyed. \"But me first!\"\n\n\"Yes dear,\" I said, causing the guys to laugh.\n\n\"You jerk!\" she laughed. I'm sure she would have said more, but I pushed my cock into her mouth. It was still wet with Jennifer's juices. Carrie groaned and sucked like crazy.\n\n\"Okay guys,\" I gasped out. \"You heard my golden goddess! Lets all ride her at the same time!\" \n\nI grabbed her head and started fucking her mouth. Robbie and Tony picked up the pace as well. Carrie stroked Brian and Mike at the same pace. My girl met my eyes. Her own were completely glazed over now and I wasn't sure she even recognized me. It didn't matter. This was about giving her what she wanted.\n\nShe had five guys grunting and groaning in a matter of minutes. Carrie started cumming first. It lasted a long time. Robbie let loose just when she started to comedown from her orgasm. Tony quickly followed him. Brian and Mike were next. Carrie started cumming again.\n\n\"You slut!\" I cried, stroking in and out of her mouth. She pulled her head back and my cock popped free.\n\n\"You're slut!\" she cried and then looked at me and begged, \"Cum for me please!\" \n\nI shoved my cock back into her mouth and my cum boiled free. I couldn't hold it in any more. Carrie's orgasm peaked and she sucked my cock hard, draining me of every last drop. She passed out when she was done. My legs were so weak that I fell onto the bed. \n\n\"We'll take care of Tara another time,\" Brian smiled as he looked at how exhausted I was. \n\n\"Oh no!\" Robbie said as she shifted out from under Carrie. \"The rest of us can take care of her. I'm sure one of the ladies will be more than willing to take Joel's place.\"\n\n\"I'm sure,\" I smiled, using the last of my strength to shift on the bed until I was lying next to Carrie.\n\n\"I'm willing,\" Brian said, but then added pointedly. \"Just as long as Tina is next.\"\n\n\"Are you crazy?\" Robbie laughed. \"Tina will probably fight Tara to be first.\"\n\n\"Now that might be an interesting sight!\" Brian laughed.\n\n\"Don't count my Katie out,\" Mike added, shaking his head.\n\n\"Or any of the other ladies,\" Tony laughed. They were still joking as they left the room. \n\nI looked down at Carrie once we were alone. She was a mess. I wasn't much better. We both needed a shower and the sheets were nasty, but I could feel sleep over taking me. I pulled my girl close and closed my eyes, content. \n\nThe next thing I knew the sun was shining through the window.\n\n\"I need a shower,\" Carrie said as I shifted.\n\n\"You think?\" I laughed. \n\n\"You don't look much better,\" she said looking me over carefully.\n\n\"Let's go,\" I said a little too quickly. \"I don't hear the shower on.\"\n\n\"You can't possibly be in the mood?\" she asked incredibly.\n\n\"I'm not really,\" I shrugged. \"But...\"\n\n\"No way,\" she said. \"I'm sore all over! It will take days for me to recoup.\"\n\n\"Me too,\" I admitted. \"Let's just go take a shower and get clean. They'll be no funny business.\"\n\n\"You promise?\" she smiled. I hesitated, but the nodded.\n\nCarrie cleaned me first. It felt good to wash the night before off of me. I admit I took a little too long on certain parts of her anatomy when it was my turn to wash her, but it didn't go too far.\n\nWe walked through the house naked. The others were already up. We went to the main bedroom and put on clothes. It was already cleaned. I had a flash of the night before with all the girl's bodies and shook my head. It seemed so surreal.\n\n\"You okay?\" she asked. \n\n\"Just thinking about the graduation party you mentioned last night,\" I replied.\n\n\"Insatiable!\" she laughed, but then kissed me. My lips were actually a little sore. Carrie smiled at me when she was down and brushed her fingers across my lips. \n\n\"What?\" I asked.\n\n\"Nothing,\" she smiled happily before changing the subject. \"Let's go clean up the mess in the other room.\" We left the master bedroom and went back to the other room.\n\n\"It seems like we're too late,\" I said as Jennifer and Katie existed the room with the sheets.\n\n\"Tara and Jill are handling breakfast,\" Jennifer said. \"You two are just in time.\"\n\nEveryone was downstairs eating. There were piles of food, but no alcohol this time. Robbie noticed me looking around for it.\n\n\"Everyone has to leave today,\" he shrugged. \"Some of us are probably in big trouble for staying as long as we did.\"\n\n\"Well, just be sure to be out of trouble in time for my graduation party,\" Carrie said. This seemed to peak a bunch of people's interest.\n\n\"A graduation party?\" Brian asked.\n\n\"Yep,\" she replied with a grin. \"I'm not sure what I'm going to do, but you're all invited.\"\n\n\"I don't know if I can survive another of your parties,\" Katie said, sounding serious.\n\n\"You!\" Abby cried. \"I'm going to limp for days!\"\n\n\"Serves you right!\" Jill laughed. \"You masochistic bitch!\" Everyone froze for a moment, but the others relaxed when Abby joined her.\n\nBreakfast was enjoyable. Everyone laughed and joked. They all also helped clean up. It wasn't long before we were all ready to leave.\n\n\"Abby, Katie and Mike, just be sure to leave me your number before you go,\" Carrie said. \"Actually, Tony and Jennifer, you too.\"\n\n\"No problem,\" Jennifer grinned.\n\n\"I've got Tony's number,\" Jill said. \"Jennifer's too for that matter.\"\n\n\"And I've got Abby, Katie and Mike's,\" Tina added.\n\n\"Don't we all?\" Tara asked with a grin.\n\n\"Hmm,\" Carrie said. \"I'm thinking some of you will be getting together before my party.\"\n\n\"Just be careful,\" I said. \"Remember what happened Valentine's Day.\"\n\n\"I'll explain later,\" Jennifer said to Mike, Katie and Abby. She saw my frown and added, \"They're giving me a ride home. We were short a little car space.\" I nodded in understanding.\n\nEveryone started leaving. The girls gave everyone kisses on the cheeks. The guys kissed the girls' cheeks and shook hands with each other. It was as if nothing crazy had happened this weekend. It wasn't long before it was just Carrie and I left.\n\n\"What wrong?\" she asked.\n\n\"I don't know,\" I shrugged. \"This weekend was the best, but I just have a bad feeling.\"\n\n\"Maybe I can help you with that,\" she smiled, kissing me. I felt her hand drop to the button to my pants.\n\n\"Now who is insatiable?\" I laughed.\n\n\"Oh no!\" she laughed as she dropped to her knees in front of me. \"I'm just going to wipe that frown from your face. We are not going to mess up one of the rooms after everything has been cleaned.\"\n\n\"Yes dear!\" I grinned.\n\n\"Jerk!\" she laughed, once again taking my cock into her mouth. I looked down at her.\n\n\"I'm getting hungry,\" I said. She knew exactly what I meant. Her eyes lit up as I made her stand so I could take off her pants.\n\n\"I guess we can be a little later,\" she smiled as I pulled her pants down. \n\n\"Do we have enough detergent for one more load on laundry?\" I asked as I pulled her top off. It wasn't long before Carrie was once again standing in front of me naked.\n\n\"I guess we'll have to make do!\" she said, now helping me undress.\n\n\"You know, we never did use the hot tub together,\" I replied. I thought she might argue, but instead she laughed.\n\n\"Let's go!\" she cried and ran for the master bedroom. I watched her go and smiled. \n\nI thought about my bad feeling for a moment, but then shrugged. There was nothing that bad that could happen as long as I had my golden goddess.\n\n\"You coming?\" she cried from the bedroom. I could hear the water on.\n\n\"Yes dear!\" I called back, finding it impossible to stop my ear-to-ear smile."
    ],
    "authorname": "JoeDreamer",
    "tags": [
        "anal",
        "group",
        "lesbian",
        "interracial"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/joel-and-carrie-ch-07"
}
{
    "title": "Kitten Exposed Ch. 02",
    "pages": [
        "***By Popular Demand - here is Chapter 2 of Kitten Exposed. This is a very graphic story depicting many sexual tortures including speculums, flame play, clamps, pussy stretching, extreme pussy and clit pumping, clit binding, pussy whipping, rough clit play, among other things. It's a fantasy. Please leave a comment or send me a message with anything you'd like to see next, and thanks for reading.***\n\nTabitha was still catching her breath as she looked up at Ava. She felt utterly spent and exposed, having just cum twice from having her pussy whipped on camera, \"I... I think I need a couple minutes.\"\n\nAva gave Tabitha's upturned ass a light spank, \"I find it's best if you just get right into it if you're really looking to get that $4500.\"\n\nTabitha nodded, and pushed herself up, \"Okay, let's do it.\"\n\nAva guided Tabitha back over to the desk and had her sign another paper. Tabitha was just putty in Ava's hand, but she knew she needed to understand what she was doing. It was basically a consent and release form, giving Ava permission to do a wide variety of lewd, crazy and painful things to her pussy and surrounding areas. Tabitha's pussy was starting to moisten again as she read though it. \n\nThe document was very graphic, stating in no uncertain terms that Ava would have uninhibited access to torture her pussy, from the mound, down to and including her ass, and every part inside her pussy. It did specify that no permanent damage would result. It also stated, with the times hand written in, that this permission would last up 4pm today. Ava was grinning, she couldn't wait to proceed, few girls ever signed that paper. \n\nOnce her signature was complete, Ava slide her finger down Tabitha's stomach and right into her sopping wet folds, \"perfect,\" she said as she started pulling Tabitha by the pussy. Tabitha played along and walked with widened legs as Ava dragged her over to the couch again and pushed her down on her back. \n\n\"I've wanted to taste you since the moment you walked in the door, thanks for the permission,\" Immediately Ava's mouth and tongue went to work on her. Tabitha was kinda of shocked, but then quickly consumed by pleasure Ava was giving her recently whipped hole. Ava lapped deep inside her pussy, tasting her juices. \n\nTabitha held Ava's head and moaned while the tall brunette had her fill. Then she pulled away, a mouth glistening with juices all around it. She licked her lips, \"now let's ruin your pussy.\" \n\nShe pulled Tabitha's legs up out to the side so Tabitha was laying on her back with her pussy front and center. Ava then pulled some restraints from behind the couch and started strapping Tabitha's legs into place, as well as her arms out to the side. She cinched them up almost to the point of being too far, leaving Tabitha trapped to the couch, and fully vulnerable to what would come next. \n\nAva went and grabbed one of the camera's and angled it better, getting a full view of Tabitha's reddened and splayed pussy. She then grabbed a stand that looked like a light, but had a mirror on it. She brought it over and positioned it above the camera, \"Let me know when you're able to see your pussy clearly.\" After some maneuvering, Tabitha nodded. Tabitha had never had such an intimate view of her nether region before. Ava then went over to a shelf and grabbed a bag and returned to Tabitha. She put the bag on the floor out of Tabitha's view and opened it up. \n\nTabitha watched in gross fascination as Ava began what would be a long couple hours for her. Ava attached some long straps to the restraints that held her legs in place. There were small clips at the end of the straps and a cinch to tighten them up. Just as Tabitha expected, the clips were applied to her outer pussy lips near the top. She cringed a bit as they applied pressure to the outer mouth of her pussy. Once attached, Ava tightened the cinches and Tabitha watched as her labia majora was spread painfully wide. The rest of her pussy was clearly exposed, she could see her clit bulging out now at the center of attention, and her inner lips were pulled open a bit naturally and her pussy hole was also gaping just a bit. \n\nAva brought up a couple more straps and clamps and attached these to Tabitha's labia minora, four in total, two for each lip. Tabitha had a slightly worried look as Ava started cinching these straps. She watched in the mirror as her pussy was pulled completely apart, her lips stretched painfully to the sides. Her pussy was now gaping open. Her lips were red from the whipping, but she could see clearly into her pussy with the lighting provided, and saw all her pink glistening insides. \n\nAva reached into next to her and brought a very intimidating looking metal clamp. It was about two inches long and a quarter of an inch wide. She prodded around Tabitha's clitoris a bit and pulled as the flesh around it. She gathered up Tabitha's exposed clit and pushed the clamp underneath it, with as much of her clitoral hood as she could gather up. Once done, she started tightening the clamp. Tabitha winced as she felt her clitoris being isolated and squeezed from below. When she looked into the mirror, her clit was bulging out obscenely, with the sensitive flesh that surrounded it also bulging with it.\n\nTabitha couldn't help but get more and more excited, for some bizarre reason, this was only turning her on more. It was inexplicable.\n\nAva must've been able to sense Tabitha's desire and she smiled, then starting flicking Tabitha's exposed clit. Tabitha bounced a bit with each flick of Ava's fingernail as it slapped against her clit. Then Ava brought mouth down again to Tabitha's pussy and sucked her clit right in. Tabitha's moans quickly turned to grunts as Ava started biting into her sensitive nub. Ava made sure the camera was able to get the full view of her vicious biting as she pulled Tabitha's clit roughly. Tabitha gripped the couch with her hands.\n\nOnce Ava had her fun, she brought up a small white container, it was dental floss. She pulled some out, and carefully tied it around the base of Tabitha's clit. She then started wrapping it all around the exposed flesh that was there. Over and over she wrapped the dental floss, and making it tighter as she went. Tabitha could feel the blood being restricted to her clit, and the pulsating of her now incredibly tightly bound nerve bundle. Ava continued wrapping the floss around until Tabitha's small clitoris now was squeezed and bound up until it was over an inch or so long, with the very tip of her clit utterly isolated and exposed.\n\nTabitha couldn't help but be turned on by the utterly lewd treatment of her sensitive girl parts. She loved it. She was anxious, but also very eager to see what the next several hours would bring if this was any indication. It occurred to her that they jumped into this part quickly, the slapping and pussy whipping couldn't have taken longer than a half hour or so. \n\nAva started off the clit torture pretty tame, she brought a toothbrush up and started to rub the bristles against Tabitha's exposed nub. However, what should've been weird at best felt wild to Tabitha, having just had two orgasms from her pussy whipped, and now her clitoris so restricted. She bucked her hips a bit, pushing her clitoris into the bristles. It felt amazing. Ava rubbed and even slapped the bristles up against the bound girl's most sensitive of parts. After a few more minutes, she wanted to step it up.\n\nShe stopped with the brush as she saw Tabitha's enjoyment building and brought up an old fashioned wooden ruler. Quickly she snapped it down right on Tabitha's nub causing her to howl. *Whack* *Whack* the ruler brutalized her in ways the whip couldn't, her clitoris was so isolated with all the floss wrapped around. *Whack* Ava slapped the girl's precious bean several more times until she was shaking and writhing. \n\nOnce she was done, Tabitha's clitoris was a deep red color, partially from the restriction of blood, and the abuse it had received from the ruler. Not to mention the dull ache emanating from the parts of her labia that had been stretched and clamped.\n\nTabitha was breathing deeply trying to calm down as the adrenaline pumped through her veins.\n\nNext, Ava pulled out a weird looking device, it had two long metal sides shaped like 'U's and on the bottom, a gear. Tabitha quickly learned it's use as Ava slid the two U's into her gaping pussy and turned the crank which widened them. Tabitha watched her flower being stretched open more and more as Ava worked the gear. Soon Tabitha was cringing as she felt her pussy being pried apart. Ava cranked it just a couple more times until Tabitha looked like she was about to tear, then loosened it slightly.  \n\nOnce she got slightly accustomed to the new pain, she looked into the mirror and was astonished how wide open her pussy looked. It was all so surreal. Tabitha couldn't tell exactly how stretched open she was, but guessed it was about 2, maybe 2 and a half inches across. She marveled at how utterly splayed out her pussy was, between the speculum that allowed Ava to have unreserved access to the inside of her womanhood, to how stretched out her inner and outer lips were, like wings of a butterfly.\n\nWith Tabitha's pussy widened even more with the speculum, Ava was able to cinch up the straps that held open her pussy lips even more. Making sure everything was still good with the camera angle, Ava got started on her next torture. \n\nNext Ava brought up a bristled brush, the type one would use to clean dishes with. It was obvious where that was heading. Ava rubbed the bristles against Tabitha's elongated clitoris, pushing the sharp bristles into her sensitive nub as Tabitha responded in kind. She then started slapping the brush into Tabitha's clitoris and stretched open lips. The bristles bit into her delicate flesh as they landed, but it was nothing too severe. \n\nAs the brush slapped into her pussy, Tabitha's mind started churning, hoping Ava would whip her pussy now. She bucked her hips a little bit to meet each bristled slap of the brush. Tabitha's pussy reacted, and gushed with lubricant, even though the pain in her lips was starting to build up from being attached to the clamps. \n\nIt was impossible to miss the hint as Ava watched Tabitha's reaction to the tapping of the brush into her pussy. Add onto that the small squirt of fluid from her urethra, Ava was stunned at the gem they had found in Tabitha. The few girls that did get this far were usually responding very differently at this point. \n\nAva slapped Tabitha's pussy a few more times with a little extra zip, then in one quick motion, she pushed the brush into the gaping hole created by the speculum. Tabitha arched her back a bit as the brush pushed into her. The bristles lightly scrapped along the inside of her pussy and then poked into the back wall. The brush itself was only an inch and a half wide at most, so it fit easily into her pussy. It wasn't like it was a toilet brush or anything, Tabitha thought immediately that might be on the agenda too. \n\nThe bristled end of the brush prodded and jabbed into the deep recesses of Tabitha's hole, but instead of crying out, Tabitha only moaned and even welcomed the intrusion. Sure, it hurt, but it was the good kind of pain. Tabitha never imagined in her life she would be where she was now, having this happen to her, but she was so glad she was.\n\nAva fucked the girl's opening with the brush for a few minutes, as if actually cleaning her out. The plastic bristles reddened the insides of the young pussy, but only elicited moans from her. \n\n\"You really are something Kitten, I was expecting a much different response. This is supposed to hurt you know,\" Ava was genuinely smiling, \"we might even have a repeat customer here.\" \n\nTabitha grinned through her moans as the brush penetrated and mistreated her insides, adding \"oh god yes.\" \n\n\"We'll see if you keep feeling that way when we're done,\" Ava said a little more menacingly. Tabitha winced as Ava jabbed the brush into her a bit harder, then said a bit quieter, \"I really hope you do.\"\n\nAfter a few more swishes of the brush around inside of Tabitha's exposed orifice, Ava withdrew the brush and set it aside. Ava turned to Tabitha and touched her engorged reddening clitoris with her finger and rubbed it gently. Tabitha unconsciously bucked her hips as the core of everything pleasurable to her was rubbed, she moaned and tried to keep herself still, loving the sudden caresses.\n\nAva leaned in a bit, \"this one is for the cameras, don't worry, I won't actually hurt you.\"\n\nTabitha nodded as Ava caressed her trapped bean a bit more.\n\nAfter Ava stopped, she showed her the next implement to torture her splayed hole with, it was one of those long red handled lighters one might use to light a grill. Tabitha's eyes went wide, Ava clicked it a couple times and a small flame spouted from the end. \n\nTabitha couldn't look away. \n\nAva grinned as she started her research on the girl, she brought the intimidating yellow flame closer to to the vulnerable opening in front of her. She watched as Tabitha's eyes stayed focused on the flame. Bringing the flame closer, she quickly moved it past the girls pussy. It was only inches away. Ava did this a few more times getting closer with each pass. Tabitha waited with baited breath, with the flame moving that quickly, she didn't really feel anything at all, other than maybe the slightest warmth. \n\nAva moved the flame along Tabitha's moist opening a little closer, Tabitha moaned a bit as she felt the slight heat touch her. Ava would briefly hold the flickering yellow flame close to Tabitha's engorged clitoris, then move it to each of her stretched lips. The flame licked each part of her very briefly, then moved on to the next. Tabitha was surprised at how little it hurt. She imagined her skin being immediately burnt, but that was far from the truth. It was suddenly a lot sexier than she had originally thought. She even started to play along.\n\n\"Oh god my poor pussy,\" she said as she faked a pained noise, she looked up at Ava who winked back and mouthed back to her \"good.\"\n\nOnce that was established, Ava went to work on the girl's pussy. She let the flame lick her clitoris for just a split second, along with her lips. She did that a few more times, then moved the flame down a bit and let it just nip at the girls wrinkled rose bud as well. It was there just a half second too longer and Tabitha jumped as the warmth turned to a sharp heat that started to envelope her tight asshole, she gasped and tried to pull her ass away. All it took was one extra moment, or the flame being just too close for it suddenly to be very real.\n\nTabitha was suddenly a bit worried. \n\nThat's when Ava went right back to Tabitha's splayed pussy, but this time she was a little bit more daring. She waved the little flame just right near Tabitha's bound clitoris for just a half second, then pulled it away. Tabitha cringed just a bit. Then Ava did it again, but just a touch longer. Tabitha winced and tried helplessly to move her sensitive nub from the flame. Now that one was close.\n\nAva didn't want to spoil all the fun. She moved the flame quickly around the opening of Tabitha's pussy and then dipped it inside her hole quickly. She kept it low, so the flame wouldn't touch Tabitha's delicate pink skin. Instead of jumping, Tabitha held herself as still as possible. She did not want to get burned. She closed her eyes and moved her head to the side, she didn't want to watch.\n\nEffectively Ava fucked Tabitha's pussy with the flame, sending the lighter inside her gaping hole and then pulling it out just as quickly. Tabitha tried to play along, since she wanted the camera to think it hurt more than it did, but she was very aware of the pain that it could cause, and luckily didn't.\n\nTabitha was very relieved when the flame was finally extracted and not reintroduced to her pussy. She waited a couple seconds and opened her eyes again to see Ava putting down the lighter, and breathed a sigh of relief.\n\n\"Can you whip my pussy again?\" Tabitha was shocked the words came out of her mouth. She didn't even think about it prior, they just happened. She almost felt immediately ashamed, but she was desperate for another orgasm. And she then she was hoping maybe it would end this particular position, since her pussy lips were throbbing in pain.\n\nAva was just as surprised. She made a devious grin and gave Tabitha's bound clitoris a quick flick with her middle finger. Tabitha jumped a bit at the sharp smack. \"I think we can arrange that,\" Ava said. She touched Tabitha's tied up little nub again, then adjusted the metal clamp that was below her clit, loosened it, and pulled it off. Tabitha moaned as the clamp allowed her sensitive clit some measure of relief, though it was still tightly bound with the dental floss. \n\nWith that out of the way, Ava was comfortable with striking Tabitha's pussy. She sauntered over and grabbed a smaller whip, with several tails on the whipping end. It was a nice intermediate type, and should produce some interesting results on the girl's pussy.\n\n\"Ready Kitten?\" asked Ava.\n\nTabitha nodded. \n\nThe first *Whack* came down next to Tabitha's clit, but the impact had wondrous results all the same, Tabitha bucked and moaned as the sting of the whip licked her fully exposed pussy. Ava continued, and stroke after stroke splattered into stretched and vulnerable womanhood before her. Tabitha was instantly lost in the action again, thrusting her pussy up to meet the whip as it snapped into her. As the leather found her clit, it was like an explosion of pain and pleasure that wracked her body. She shook and trembled with fear and lust as the whip struck her again and again. *Whack* *Whack*, Ava continued. The thin bits of leather found all new sensitive parts, given how spread out the girl's pussy was. The whip would, occasionally, sting the inside as well, though it was not easy. Ava wished she could figure out how to make that more of a reality. \n\nIt was a small matter though, Tabitha was reacting entirely as expected at this point. Her cries of pleasure were just perfect, especially considering the heinous act being committed on her sweet young vagina. Ava continued, slapping each part of Tabitha's pussy, all around and including her engorged clitoris, to each side of her spread out labia, and she also did her best to have the whip dip into her gaping wet pussy. \n\nThe whip was quickly doing its job, turning the exposed flesh a bright pink and then red as the punishment continued, and Tabitha was going wild during the whole episode. Ava was truly shocked, she had never experienced anything quite like it. Finally, it happened again, Tabitha cried out and shook and her pussy betrayed her yet again. The whip crashed into Tabitha's spread folds again but was met with a gush of liquid and girl cum. The wetness splattered on the whip and around Tabitha's quivering pussy, and down onto the couch. She thrust and shook her hips as the orgasm flowed over her. \n\n\"Holy shit Kitten, did you just squirt?\" Ava asked as she bent down and rubbed some of the liquid that came out and inspected Tabitha's brutalized pussy.\n\nTabitha was breathing too deeply and too exhausted to respond. She had no idea what was happening.\n\nAva wasn't sure how she was going to top any of that, but the girl was sure earning her keep. While Tabitha was recovering, Ava undid the straps holding Tabitha's hands from her body, she knew what would be coming. Next Ava undid the clamps holding her pussy open. Tabitha came too as the blood rushed back into her labia and went a bit wide-eyed with pain. Quickly her hands rushed over so she could soothe her pussy the best she could. Her lips ached and pulsed as the blood flow returned. Lastly Ava undid Tabitha's legs and gave her some time to recover. She did not pull the speculum out or undo the dental floss however. ",
        "Tabitha barely realized initially, she was happy to have orgasmed again, and have her lips free of the clamps. She groaned a bit as her body adjusted to being free again, and she rubbed the life back into her labia. She even explored the inside of her pussy a bit since she was still gaping open and touched her bound her little nub as well. The walls of her pussy were a bit sore, but wet. She was astonished with how enjoyable this had all been so far. \n\n\"When you're ready Kitten, stand here,\" Ava pointed at the same X on the floor she did earlier. Tabitha grabbed some water and awkwardly walked over to the X, the speculum made normal walking impossible. Ava was getting the cameras and lighting into position.\n\n\"Good, now spread your legs wide,\" Ava added.\n\nTabitha did as she was told. Then Ava brought her hands behind her back and bound them with some leather restraints. It forced her perky breasts out a bit. She made sure her legs were wide enough to give Ava access to her privates.\n\nAva grabbed a few items and returned. She had some thin black cord and the other looked like a heavy toolbox. Once Ava got settled in front of her lustful nymph, Ava flicked Tabitha's little bound bean a few times. It was still poking out quite nicely from the rest of her pussy with how the dental floss had it secured. She pulled a bit at Tabitha's hips, making her thrust her pussy out a bit more, then she expertly pulled at Tabitha's nub while wrapping the thin cord around the base of her bound clitoris. Once around she tightened the cord causing Tabitha to gasp a bit as, once again, blood flow was cut off to her clitoris. Now the cord dangled down between her legs.\n\nTabitha was able to piece things together pretty quickly about what would be happening next when Ava opened up the toolbox. It was full of weights, they were all hollow in the center, and seemed to have a hinge on each one. \n\nAva grabbed the cord now attached to Tabitha's bound clit and gave it a tug. Tabitha grunted at having her clitoris yanked, but stayed in place the best she could. Ava then tied a a piece of metal to the end of the cord. It had an eyelet connected to about a four inch long metal rod, then at the bottom was a large metal oval. The weights were made in such a way that they opened, put onto the cord, and they would rest on the metal piece that dangled from her clit.\n\nAva took the metal end piece and pushed it. Tabitha could feel the slight tugging on her clitoris as the cord and end piece swayed between her legs. It wasn't painful... yet.\n\nWithout much fanfare, Ava grabbed a couple weights and added them to the cord. Tabitha had no clue how much they weighed, but once Ava dropped them on, she could immediately feel the pulling and strain they added to her clitoris. She winced a bit. Ava looked up at Tabitha for her reaction and seemed satisfied. She then added a couple more weights in quick succession. Tabitha was keenly aware of the effect gravity was now having on her young clitoris. Her knees buckled for a moment, but then she straightened them again. \n\nAva let the cord and weights swing a little bit, watching Tabitha's clit being pulled with it. It had turned a bright red now, and looked to be elongated even more. Ava only gave Tabitha a few moments to get accustomed to the weight when she started adding them in earnest. She grabbed four more and attached them quickly, doubling the weight on the young girl's pleasure center. Tabitha cried out as the weight distended her clitoris even more. She tried to bear the weight, but gave out and bent her knees and squatted down until the weights made contact with the floor.\n\n\"Well, now we have to do it the hard way,\" Ava said. \n\nTabitha looked up at her worried, \"what, no I can take it.\" Tabitha straightened her legs out again and pulled the weights off the floor with her stretched clitoris. She winced as it dangled and swayed. \n\nAva considered her answer for a moment, and almost felt proud in a weird way, \"good.\" She then added two more weights to those already swinging from Tabitha's tortured clit. Tabitha winced at the additional weight. She could feel her clitoris being stretched and pulled in the worst way. Ava purposefully swung the cord with the weights on it. Tabitha grunted and held herself up as her clit was pulled back and forth. \n\nAva had a lot more in store for that clitoris. She spent a few more minutes adding a couple weights until Tabitha's clitoris was stretched obscenely far, it started out maybe an inch with all the dental floss wrapped around it, now it was closer to an inch and a half or two. Tabitha took the weights as best should could, but was thankful when Ava started to remove them. She was exceptionally happy as Ava untied the cord and also started to remove the dental floss. Ava then also undid the bindings on holding Tabitha's arms behind her. Tabitha quickly soothed her bean with her fingers. She cooed as she rubbed it and massaged it. She then inspected her clitoris, she gasped at how completely different it looked. Prior to today it was hidden in her labia majora, and only popped out occasionally, but now it was prominently apparent, sticking out like a really small cock. \n\nAva then directed Tabitha over to a padded table that had a series of restraints dangling from it and helped her up onto it. . Ava started strapping Tabitha down, she restrained Tabitha's arms straight down her sides so her hands were gripping the end of the table. Then her legs were bound so that her feet were close to her buttocks, and her legs were pulled wide to each side. There was a restraint that held her thighs back, and then her ankle was bound to her thigh. This greatly accentuated Ava's continued access to her privates. \n\n\"This next part is what I meant about making your pussy unusable for a week or so, depending how quickly it recuperates. For some reason, I think you'll be fine, hell you'll probably enjoy it,\" Ava winked at Tabitha as she left to get some supplies \n\nTabitha was not at all sure how to react. She looked down and could see her clitoris bulging out and her pussy was still opened up a good two or so inches from the speculum. She was resigned to whatever Ava wanted to do to her, she had gotten this far, she wanted to see it through. And really, Ava had been pretty wonderful to her. \n\nAva returned with the next set of torture items and got the cameras and lighting into position, directing them right at her vulnerable pussy. \n\n\"I assume you've never had your pussy pumped?\" Ava asked Tabitha.\n\n\"Do you mean fucked? Probably not. Since I don't know what means, I'll go with no,\" answered Tabitha grinning. It didn't sound so bad.\n\nAva smirked, \"Well this will be more enjoyable then.\" She first took a large black rubber bulbous looking implement and pushed it into her pussy. It fit comfortably between the speculum. Once in, Ava withdrew the speculum from her gaping pussy. She could feel the mass of the thing Ava had pushed into her pussy, \"in your pussy now is an inflatable balloon, that will be fun later.\"\n\nOnce that was in place, Ava lubricated Tabitha's pussy with some lotion, which would help with the suction, then went to work with the various pumps that would disfigure Kitten's cute little pussy. It would return to normal in a few days, but she wanted to see just how far she could take it.\n\nThere were two pumps, the first was a smaller one, about an inch wide and several inches long. This she applied to Tabitha's already protruding clitoris. She took some time to really gather up her clitoris and the surrounding areas into the glass tube before starting the suction. This pump had a small but powerful pump, it went to work quickly sucking its prey up and began its merciless mission. \n\nAva then began pumping the small suction tube quickly. Squeeze after squeeze produced fantastic results as Tabitha's clitoris and surrounding areas were sucked deep into the tube. Tabitha moaned as her nub swelled and the blood rushed towards it. If she thought it felt sensitive before, well now it was on overdrive. She shuttered as Ava pumped and pumped her bulbous clitoris further into the tube. She looked down the best she could and was shocked to see her clit swelling and starting to actually fill the hollow glass tube. Her clit looked a mix of bright white with some red. She started trembling with pain as her clit was being distended and engorged way beyond what it should. \n\n\"Please,\" Tabitha whimpered as her was sucked deeper into the tube. The swelling was starting to hurt, and the pain was bringing a sophisticated level of pleasure with it. But it was certainly edging towards being unbearable. \n\n\"Oh Kitten, we're far from done,\" she emphasized her point by pumping two more times. These were deep long pumps that distended Tabitha's clitoris even more. Tabitha cringed and whined as she felt it being pulled in even more. Looking down, her clitoris was now filling a majority of the tube. \n\nAva then moved onto the next tube. The second one was downright ominous. It was a huge glass tube, over a foot long and probably four inches wide at the mouth. This one Ava placed over the entirely of Tabitha's reddened pussy, and she stuck the small bulb pump of the previous tube in with it. Now Tabitha's whole pussy, including her incredibly bloated clitoris were inside.\n\nIt took a bit of work and few tries to get this one just right. But once she did, it was something incredible to see. Tabitha could immediately feel the weight of the glass tube as it fully encompassed her womanhood. The pain in her clit was dying down as it was getting slowly accustomed to its present state.\n\nThis suction tube was attached to a large hand held pump, with a full trigger that Ava could easily squeeze with her whole hand. She then started to pump Tabitha's pussy in earnest. Tabitha could only watch as her pussy was pulled deeper into the grasp of the maniacal tube. She gasped as she saw her labia, already near bursting clitoris, and the rest of her womanhood pulled in. Her skin was turning a deep red as it was forced deeper and deeper into the hollow of the vacuum. She cringed and whined as she felt the intense pressure on her entire pussy. \n\nSeveral moments passed as Ava kept pumping the valve, Tabitha was rocking side to side as she struggled to accept what was happening to her vagina. The weight of it too made everything more intense. It had to have been a couple pounds at least. \n\nAva slowed her pumping and then stopped as she started to inspect the cruelty of her work on the young girl. Indeed, Tabitha's whole pussy had swelled tremendously inside of the wicked device and Tabitha was panting. The folds of her pussy looked almost alien as they bulged out into the tube. Likewise with her clitoris, as it stuck out prominently in the other tube, now also bulging out further with the rest of her pussy. \n\n\"You look lovely, Kitten\" Ava said. Tabitha blushed a little bit as she realized sh must have a been a masochist after all, loving her suffering as much as she was.\n\nAva moved next to Tabitha to inspect her more. She reached down and gently played with Tabitha's right nipple, pinching it lightly, \"I have to say, I'm very impressed. If you return for the breast portion of the fun, that big one would be full of your breast. What a gorgeous sight that will be.\" Tabitha was in a world of her own right now, but motioned her willingness for that as well. Her pussy was a deep red color, and it filled the huge glass tube impressively. Ava had hoped her pussy would react this well to it. She also knew that the sensitivity that would result would make Tabitha insatiable.\n\n\"I'm going to let your pussy get adjusted to the current pressure on it, then begin again. How would you like to spend the next ten minutes or so?\" Ava asked the little masochist on the table.\n\nTabitha turned her head over to Ava with a pained look on her face, partially knowing that her pussy would be further misshapen, her breathing was shallower, \"What... what are the options?\"\n\n\"Mmm, glad you asked,\" Ava said as she further caressed Tabitha's perky breasts and nipples. \n\n\"I could give you a taste of what tortures await these tits when you return, I could fuck your ass with a dildo, I could ride your face with my pussy, I could throat fuck you with a strap on, or I can just leave you be. I also think it's time you start calling me Mistress. Which would you like?\" Ava was hoping she'd lick her pussy, it was so wet, but as long as she didn't want to be left alone, Ava was excited.\n\n\"I'd like to taste you... Mistress,\" Tabitha hesitated with the word, maybe because she was so exhausted, maybe because of the incredible pressure on her pussy, but also, perhaps, because the word triggered some sort bond, or deeper connection. Tabitha felt owned.\n\n\"I was hoping you'd say that Kitten,\" Ava said as she started to strip off her bottom. She then untied Tabitha's legs, so she could smother Tabitha's face.\n\nTabitha groaned as her feet touched the table, still kept very wide apart due to the four inch wide heavy glass tube that encased her engorged womanhood. \n\nAva brought over a stool, and climbed up on the table. Tabitha's eyes immediately fell upon the center of Ava's legs. At first, Ava's treasure was hidden by her thigh's as she ascended the table that held Tabitha down. But as Ava made her way into position, her legs parted and Tabitha gazed upon Ava's pussy. It was bald, just like her own. Ava's inner lips were a little more prominent and longer than Tabitha's. What stood out most was the hoop piercing that cradled Ava's clitoris. \n\nAva knees were on each side of Tabitha's thin frame, and she was high up on her knees though, so Tabitha could easily see her pussy. Ava fingers descended down her body, to her precious core, and she touched herself softly, eliciting a subtle moan, as her pussy hovered over Tabitha's face. \n\n\"You look perfect Mistress,\" Tabitha said as she Ava as she struggled with being tied down, the weight and pressure on her pussy, and her sudden desire to delve her tongue into her Mistress' folds. Tabitha had never once tasted a female before, she had only ever once fingered a girl at a college party on a dare, but that was it.\n\nAva grinned down at her and then shifted her weight a little bit, \"Open your mouth, and stick out your tongue Kitten.\" Tabitha did as she was told. Ava opened her folds up with her fingers and slowly lowered herself. She paused briefly just slightly from Tabitha's tongue. \n\nTabitha could almost taste her, Ava's pussy was right there. She caught the subtle scent of Ava's womanhood as she also pushed her tongue out into Ava's folds. Ava immediately moaned, and Tabitha was pleasantly surprised by the taste, mostly because it didn't have much of one. The moisture was thick though, as the lubricating properties of the juices coated her tongue. She couldn't help but start drawing her tongue up into the folds, delving into her Mistress' hole.\n\nAva was going to scold Tabitha for licking her prior to when she wanted, but she decided against it before she spoke. The young girl's eager tongue felt incredible as it found it's way into her pussy, which was entirely too wet for her own good. She had loved the session so far, and was truly hoping Tabitha would return. She moaned softly as Tabitha licked into her pussy, and over her pierced clitoris. She was also planning on giving precise instruction to the restrained girl as well, but couldn't manage that either. All she did was make her pussy available to Tabitha, moaned, and gyrate her hips as Tabitha switched roles in a weird way, and instead owned Ava.\n\nIt seems like much longer than ten minutes had passed as Ava finally pulled her pussy free of the young girl's mouth and now experienced tongue. Ava was breathing heavily as she recovered from the series of orgasms she had all over Tabitha's face. She almost felt embarrassed at how much she had let herself go. She had, at some point, also removed her bra so she could play with her pierced nipples. Ava's breasts were probably a bit bigger than Tabitha's, but were not as perky. \n\nTabitha felt so proud of herself, she could practically squeal. She had made Ava orgasm at least twice, and perhaps even more. She had felt like she had won some sort of contest, or received some national prize, she couldn't keep from grinning. She had almost entirely forgotten about the state of her pussy.\n\nAva took a few moments to recover, \"that was incredible Kitten,\" she said as she tried to compose herself. Ava's legs were weak from the powerful orgasms that she so desperately wanted, but felt almost ashamed about. Sessions were never like this. Most girls were fairly stoic through the first parts or would complain the whole time. Some continued into the second part, but they typically whimpered and begged for it to stop, and would only continue when reminded of the money they would earn. Ava had only come across a few other girls who got to end, but none ever came back. She knew, somehow, this would be different.\n\nOnce down off the table, Ava gathered her wits about her. She decided against putting back on her bra and panties, she may want to be pleasured again anyways. She moved back to between Tabitha's legs and inspected how her pussy had reacted during the time that passed. As she had hoped, Tabitha's pussy mound had swelled more but, more importantly, still looked healthy. She noted that Tabitha kept her legs wider than needed, indicating her desire to continue. \n\nAnd continue she did.\n\nShe put her hand on Tabitha's thigh, almost soothingly, gave the girl a smile, and then pressed the handle of the pump again. Tabitha moaned as her attention was once again directed at her swelling and engorged orifice. Ava watched her closely, and pumped the handle several more times. It was getting harder and harder to activate the vacuum. Ava watched as Tabitha's womanhood was pulled further into the tube. She also knew the payoff would be worth it.\n\nTabitha writhed in renewed agony as she felt like her insides were starting to get pulled out through her vagina. She was close to crying out, to begging Ava to stop the swelling. But just as she was about to break, Ava caressed her thigh and stopped. Tabitha looked down at the menacing tube, and saw her red bulging pussy. She rested her head back as she panted, and she saw Ava walk away. Tabitha found herself now lusting the woman who was hurting her. \n\nAva returned with the mirror she had Tabitha look at her pussy in earlier. She also adjusted the restraints and table. Tabitha put up absolutely zero resistance as Ava moved her into position. The table was inclined so Tabitha was at about a 45 degree angle, she was held up by the restraints that held her thighs and legs to the side. Stirrups were then put into place for her feet to prop up on as well. When the table was lifted, Tabitha could feel the weight increasing as the mess of devices in and on her pussy pulled. With the mirror in place, Tabitha was greeted with a much better view of what had been happening in the past while to her young cunt. She starred in awe as she looked at the glass tube now filling with her pussy. She wasn't sure how it was even possible.\n\nAva then grabbed the tube and started turning a nob. There was a brief hissing noise as air was released into the vacuum, Tabitha felt a change immediately as Ava pulled off the huge tube. It let go of it's merciless grip on the girl's pussy with a audible juicy plopping noise. \n\nWith the aid of the mirror, Tabitha was greeted with the most incredible sight. She barely recognized what she wasn't even sure would be a pussy if it wasn't hers. Her mound and lips were a soft pinkish red color throughout, her labia, both minora and majora were massively swelled. The whole of her pussy mound was stretched and bulged several inches out from her body, and her massive engorged lips and inch or so passed that. ",
        "Her clit was next to be exposed. Ava worked the knob on the small vacuum tube that encased her pleasure nub. With a much softer plop, it too came free. With that, she saw what she thought was her new sex, a bulbous mass of distended teenage flesh. She shuttered, Ava said her pussy would return to normal, but she couldn't help imagine it would forever be like that. Unsurprisingly, the thought turned her on. She had nearly forgotten about the inflatable dildo that Ava has pushed in earlier, but was reminded when she saw the hose with the small bulb pump now dangling from her pussy.\n\nAva had the biggest grin on her face once Tabitha's pussy was fully revealed, \"wait until we get to the next part.\" Ava's fingers then caressed Tabitha's new pussy, immediately Tabitha's let out a moan, her pussy was just raging with passion, the slightest touch was like Heaven itself. Ava's full hand pressed into Tabitha's sex as Tabitha's cooed in response. She then wrapped her hand around Tabitha's elongated sex, like it was a huge fat cock and stroked her. Tabitha loved how intensely pleasurable the slightest tough was to her now bulging pussy, and Ava was incredibly satisfied with her handiwork. The effects from this would wear off in due time, perhaps two or three days. But those few days would be very interesting for the little girl.\n\nTabitha moaned and writhed as Ava played with her, her fingers exploring the bloated redness of her labia, her huge and highly sensitive clitoris, but most of all, she loved it when Ava would slap the fullness of her ruined pussy. Tabitha was left on the edge of several orgasms once Ava was through exploring Tabitha's swollen mass of a cunt. \n\nAva now wanted to move on to the next part, she grabbed the pump that hung from the black hose that slithered it's way out of Tabitha's frustratingly temporary mess off a pussy. Though Tabitha's pussy would return to it's original and adorable state within a week, Ava found an immense pleasure in the way it looked now and how willing Tabitha was to let her do these things to her. \n\nAva started to pump the inflatable balloon inside Tabitha's pussy. She continued to explore the girl's bloated flower petals as she did. Ava would be as merciless with the inflatable device as she was the pussy pump. At first Tabitha could barely feel the swelling inside, she was lost in the pleasure Ava was providing her, Tabitha's pussy was almost unbearably sensitive, every nook and cranny of it felt like her clitoris did originally, and her clit was just a dam of pleasure ready to burst. With each pump, the blackness of the rubber started to expand Tabitha's insides and the opening of her bulbous pussy.\n\nAs Ava continued to pump, Tabitha became aware, then fully aware, of the rubber balloon that now filled the insides of her pussy and started to gape her pussy. She watched in lewd fascination as her once pretty pussy started to splay open with a mass of black rubber like some alien creature was emerging from her womb. She accepted it, and resigned herself to the fact that her pussy was now Ava's and she would be a willing participant to anything Ava wanted. She started to moan as she felt the dildo swelling in her abdomen, it felt good to be so filled. She offered herself to Ava as much as she could.\n\nThe mass swelled and pushed her insides apart to accommodate itself and it started to split her swollen flower in two. Ava pumped the dildo bigger and bigger within the petite girl's pussy. It took another minute or so, but pretty soon Tabitha was wincing in pain as the inflatable stretched and expanded her insides and bore its way through the once narrow entrance of Tabitha's pussy. \n\nTabitha cried out as the massive black rubber balloon finally expanded so much that her pussy expelled it. Her engorged labia split wide to free it of it's girth as it passed through her nether channel. Ava had completely reshaped her pussy, it had gone from a cute little hole to a blown out mess in the course of 2 hours. Tabitha really hoped it would return to normal, and indeed it would. But there was also a lingering part in the back of her brain that was thoroughly wishing it didn't, and Ava would continue to brutalize her. \n\nOnce the balloon popped out, Ava went to work splashing some lubricant on her hand and squirting some directly into Tabitha's gaping hole. She wanted to fist Tabitha so badly. She quickly pushed two of her fingers into Tabitha's pussy, who was already moaning at the slightest touch. Ava was able to work a third finger in easily, and also her pinky finger. \n\nAva pumped the four bunched up fingers into Tabitha's splayed out and loosened hole. Ava's other hand went to work on the clit turned micro cock causing Tabitha to squirm in incredible pleasure. Four fingers were the norm, practically any girl could handle them squished together and Tabitha was no exception, but her pussy was still young and tight. Ava would get her fist in her eventually.\n\nAva pushed and prodded with her fingers. She felt deep into Tabitha's pussy, then pulled them free and tried to tighten and angle her fist. She pushed at Tabitha's still gaping pussy, letting the lubricant do it's work. Pushing her thumb into her pointer finger, and squeezing her hand to the smallest possible size she could, she pushed. Tabitha was doing all she could to help, pushing her hips out and spreading her legs as far as possible, \"I want it,\" she even added between moans.\n\nGoing back to the four fingers, Ava tried to widen Tabitha's hole more. She pushed the four in and then tried to straighten them out, but the resistance of Tabitha's still tight pussy won out. She even got her other hand in the mix and slide her other fingers in alongside the ones already pushed in. She tried prying Tabitha's pussy open more. To Tabitha's credit, she seemed to want it as much as Ava did.\n\nAva worked her hole for several more minutes, but to no avail, the girl's pussy was just too small. Challenge accepted. She finally pulled her fingers free and gave Tabitha's gaping meaty pussy a good slap, \"I will get my fist into you eventually.\" Tabitha nodded in understanding. \"Now what do say we flog your pussy until you pass out?\"\n\nTabitha looked up with renewed excitement and nodded vigorously. \n\nAva used up the rest of their time together flogging Tabitha's eager and swollen hole. It was only about fifteen or twenty minutes, but Tabitha's blown out pussy was turned even redder by the heavy flogger. It slammed into Tabitha's swollen pussy over and over, sending waves of pussy flesh in each direction, like a rock being thrown into a pond. Tabitha's clitoris was the number one target and exploded in pleasure as the flogger rocked Tabitha's world. \n\nWhen it was all said and done, the squirming panting teen had cum three additional times, and each time Ava would continue to flog her pussy. She didn't stop to touch Tabitha, she just struck her pussy over and over as her swollen pussy took every hit eagerly.\n\nTabitha didn't pass out, but she was incredibly exhausted as Ava finally kissed her check and told her their time was up, Tabitha turned her head and returned Ava's kiss. Their tongues touched and two kissed passionately for a moment until Ava pulled away. She adjusted the table level again and undid Tabitha's restraints. \n\nIt took Tabitha a while, but she eventually came to reality. She pulled herself off the table. Ava had already counted out a pile of cash at the desk. Tabitha winced as she tried to walk. Her brutalized pussy ached and cried out out with pain and pleasure. Incredibly she just wanted to be tied back down and had her pussy beaten more. As much as she wanted it, she didn't ask. She found her clothes in a pile on the floor and put her bra on first. When she looked down her body, she could see her lips and pussy flare out in redness and swollen flesh. She put her shirt on next. She grabbed her panties but those would never fit on and she couldn't bear the thought of the cloth running through her folds, or the wedgie they would cause. She was suddenly elated she had worn a skirt. She pulled her skirt up and walked over to the desk, tucking her panties into her purse. \n\nAva was smiling up at her, \"I'm really proud of you Kitten. I really hope you come back. I know I was harsh, but I can tell you had fun. Your pussy will be back to normal within a week. You'll probably be really sensitive but I don't think you'll mind.\" Ava motioned at the pile of cash in front of her, \"You earned this for sure.\" \n\nIt was $7500. She already tucked away the first $50 she got for showing up. $500 for the first round of slapping, $2500 for the whipping and orgasms, and finally $4500 for the brutalization of her pussy. She couldn't believe it. All her money problems were solved in an instant, and even though her pussy was wrecked, she was so happy she signed up. \n\n\"Thank you so much Mistress, I... I will absolutely be back. But only if you're my researcher,\" Tabitha said as she smiled.\n\n\"Of course Kitten,\"\n\n\"And will you whip my pussy every time Mistress?\" Tabitha added, almost begged.\n\nAva smiled broadly, \"yes, I promise Kitten.\" Tabitha was feeling overwhelmed and hugged Ava, who returned it. \n\nTabitha had a hard time leaving. Her mind was all over the place. Did Ava really like her? Did she really enjoy what just happened? Did she really like Ava? How could any normal person ever enjoy that? What was wrong with her? But she was so excited at the same time. She made all the money she needed to get out of her current issue. And she enjoyed it so much. Could she really do it again?\n\nTabitha opened the door at the entrance of the building to the outside and saw Sam sitting in her car. She was texting someone, or otherwise occupied. Tabitha hobbled her way over to the car, her soreness was raging right now as all the adrenaline and lust had dissipated. Now her pussy just hurt. And with it swollen, she had to keep her legs wider than normal. Tabitha noticed Sam look over at her as she closed the final distance to her car. She tried to walk as normal as possible, but there was really no hiding it.\n\nShe opened the car door and grimaced as she sat down and tried to make it look normal. Her fat labia pulsated with pain and discomfort and she finally got down into the seat.\n\n\"You okay Tab?\" Sam asked looking at her with concern.\n\n\"Yeah, um, I'm fine. I uhh,\" Tabitha hadn't even thought about this moment at all for some reason, \"I had a really rough appointment,\" she finally blurted out.\n\n\"Oh I hear ya Tabby, I hate going to the gyno too,\" Sam put the car in gear and left the parking lot, her curiosity satisfied.\n\nTabitha smiled, she was happy she didn't have to have that conversation with Sam. Tabitha pulled out her phone and brought up the service station's number and called. The big bellied guy answered, she could recognize his gruff voice, \"Tom's Auto.\" \n\n\"Hi, uh, yes, this is Tabitha, with the Buick,\" she said.\n\n\"Yeah,\" he waited a moment.\n\n\"Oh, uh go ahead and fix it,\" she said.\n\n\"Great, you got it. I'll get working on it tomorrow, and you can pick it up Thursday at around 6pm or Friday morning after 8 am,\" he said.\n\n\"Oh that would be good, still $1500?\"\n\n\"Yep.\" And they hung up.\n\nThe auto station was right down the road from her house, she could easily walk there. She knew Sam had work Thursday night and had classes Friday morning. Tabitha couldn't help but grin, today was a really fun day.\n\n***Thank you for reading! Just want to note again that this is all a fantasy. But please leave your comments! I have most of the next story written, which is a bit tamer like the first story. Please let me know what you would like to see happen to Tabitha next!***"
    ],
    "authorname": "LFFemdom",
    "tags": [
        "clamps",
        "pussy pump",
        "clit pump",
        "speculum",
        "pussy stretching",
        "pussy whipping",
        "fisting",
        "flame play",
        "clit binding"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/kitten-exposed-ch-02"
}
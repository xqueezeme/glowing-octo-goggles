{
    "title": "Domino Effect",
    "pages": [
        "At nineteen, I would be the first to tell you I have made mistakes. I know what you are thinking, 'how mature for a sophomore in college.' But I promise you that your thought isn't accurate. I'm just your ordinary C+ average student with teenage hormones trying to navigate life to the best of my abilities. Perhaps it is the gravity of what transpired that thrust that recognition to the forefront? Whatever the reason, the truth is I am not proud of what I've done, nor do I feel it can be justified despite having zero inclination I had done it, let alone how I had done it. Not a day passes in which I look into the mirror and see the shame etched onto my face and think, 'How did THIS happen?'\n\nBut herein lies my dilemma: If I had the ability to change the past, I know I most definitely would do everything exactly the same way.\n\nWould you?\n\n*\n\nIf a tree falls in the forest and no one is around; does it make a sound?\n\nThe better question is: who the fuck cares?\n\nOkay, the project wasn't as simple as that old conundrum, but that is what my non scientific mind devolved the hypothesis into to make sense of it. Use my brain (the tree?), amplify the waves activity (falling?), send them out using some kind of remote device - Blutooth? - to generate vibrations (sound?) to hopefully cause movement (eh, I have no idea the correlation on this one. I am a C+ student afterall) of a device inside a glass box on the hard plastic folding table... And, apparently, Alyssa Peterson cares.\n\nI'm not sure if I felt lucky or unlucky having Alyssa as my lab partner. Sure she's an absolute genius and doing all the work, but since Professor Tisdale has been preoccupied trying to perfect something to do with imprinting - hey, if it wasn't going to be on an exam, why should I pay attention? - with grant money from the school, it didn't matter what we turned in, we were going to pass (and the only reason I signed up for Introduction to Neuroscience as my science class this semester). Did that stop Alyssa Peterson from going all out to try to impress our Professor who didn't give a shit?\n\nIt did not. \n\nSo instead of throwing something together quickly so we can enjoy the perfect late spring Saturday, or still sleeping - did I mention she wanted me at her home at eight in the morning, and since I don't have a car, that meant she picked me up at seven thirty - or even getting ready for the Zeta Alpha Lambda's casino night party tonight, I'm stuck in a makeshift laboratory in the basement of Alyssa's family home sitting in this hard wooden chair getting my hair messed up from this uncomfortable mesh thing with wires sticking out of it that's on top of my head while going blind from staring at this little dot on the computer monitor because she wants to make a career out of science.\n\nFor three hours already.\n\nI want to go home; my ass hurts.\n\n\"Did it do anything, Josh?\"\n\n\"Nothing but the little wavering its always been doing.\"\n\nI mean honestly, every time I stare at the dot on the screen which the computer is registering as the device that Alyssa is staring so intently at (has she even blinked?), the blip does waver a little, but is it because it is actually moving or is it because my eyes become blurry?\n\n\"All right, turn up the amplifier, again.\"\n\nOh yes, I forgot to tell you that I also had the most important job of turning the dial on the amplifier. This was getting ridiculous.\n\n\"Sure,\" I yawned. \n\nI took hold of the dial and turned it to the right, one whole click. Nothing. I then decided enough was enough and took this project into my own hands. Instead of waiting twenty minutes for Alyssa to tell me to turn it up again, I turned the amplifier to full blast.\n\nAnd the dot still didn't do anything. \n\nCuriously, however, a second, albeit extremely faint, blip appeared on the screen. What could my mind be connecting to?\n\nNow, I know I wasn't supposed to touch anything but the amplifier dial - Alyssa had made that abundantly clear - but this other dot had nothing to do with the project. I moved the cursor over this phantom pixel and clicked it.\n\nNothing.\n\nWell, hasn't this been an absolute waste of time. Screw the blip. I leaned forward, resting my chin in my hands and let my mind wander. Might as well, since I can't actually go anywhere... My eyes fell upon my lab partner. \n\nIf I had to describe Alyssa in one word, that word would be plain. Brown frizzled hair, big circular glasses, a slightly shorter than average height on a petite frame in frumpy clothes designed to leave everything to the imagination with her speech having a mousy quality that was just an octave under annoying. Still, with a half a semester of being lab partners, I found her drive for excellence was admirable and she seemed nice, funny even, but only when she wasn't trying too hard. I had never seen her with a guy, or a girl for that matter.\n\nIt made me wonder, 'What kind of girlfriend would she be? What if she were mine? She would definitely be fiercely loyal, and probably be a little clingy - like draped onto my arm as we walk to show everyone who she's with and not the stalker version - like she's truly happy being in a devoted love... And since she'd be comfortable around me, she would care more about her appearance - hairstyle, make up, and her wardrobe would change to show off as much skin as possible, just for me, her man, while her speech would be more crude and casual instead of clinical. She'd not only be aggressive in the sack, but a complete whore to me, so enthusiastic that her pleasure would come from mine - anything to get me off...'\n\n'Kind of what Lacey Hart would be. The junior fiery red head with styled hair that dresses like a slut with the body to pull it off, yet treats guys like an ant under her high heel, even ones she would be with in a relationship. They were just lucky to be in her vicinity - and to think she wants to use her business and administration degree to work in a human resources department. But I know that venom has to be an act. Once she's corralled by me, she'd be the perfect submissive. A slave to all my whims, begging to please while deriving ungodly pleasure from it...'\n\n'As such would be the case with senior In\u00e9s Lopez. My mu\u00f1equita, my Spanish Harlem Mona Lisa... Long straight black hair down to her luscious ass, chocolate brown eyes on that slender frame, and always in some sort of executive business attire. But she's so high strung and annoyingly talkative to match; one of those girls where you couldn't even sneak a word in a conversation - which makes sense for the future lawyer. She is determined to be the first of her family to not only get accepted into college, but graduate from it, which puts an incredible amount of stress on her shoulders. Not to mention she already has an internship and she hasn't even completed her undergraduate degree. Once I'm in her life, however, she would turn all that drive towards me, I would become her anchor, our closeness will release her anxiety. Whenever anyone talks about that stick up her ass, they will know it is my stick - and I know exactly what to do with that overactive mouth of hers. My version of oral arguements would be like her own little stress reliever exercise, calming her down to the point she would orgasm just from my orgasm, which would allow her to finally be relaxed. She would become more successful with far less stress. In return, she'd be so grateful, she'd be mine forever without even a hint of the family pressure that's a half a country away...'\n\n'Which is exactly what fellow sophomore Charlotte Westgate needs. Blonde hair, blue eyes, hourglass figure, living off her Daddy's fortune... But with me, the liberal arts major would hand it all over to my control. She would be something akin to my pet, allowing me to care for her while she put her degree to good use, being oh so liberal with her body to take care of me in the most debase artistic way, which, in turn, would cause her pleasure just because I was happy... all just to get away from her snobby, high class life.'\n\n'So who would I pick? Why, all of them, of course. All accepting and willing to be in my harem...'\n\nI know what you are thinking ladies - \"How am I still single? What a catch!\" - says none of you. Hey, it's my daydream, afterall. Not like I have a chance to be with any of those girls, anyway, nor would I treat them like objects, either. My Dad raised me to treat a woman right (respect, honesty, equal partnership) and if that hadn't have taken hold, My Mom would have murdered me on the spot if I had the audacity to act that way to any of my prior girlfriends. Dreams are not reality. \n\n\"All right, turn up the amplifier, again.\"\n\nI broke from my fantasies, almost forgetting I was currently \"working.\"\n\n\"All right,\" I pretended to move the dial, not wanting to rat myself out for already maximizing the amplifier.\n\nStill nothing, but that was, obviously, expected... And my ass was now numb. I had to put an end to this.\n\nI moved the cursor onto the blip that I was supposed to be watching. What's the worst that could happen?\n\n*\n\n\"Is everything all right down there?\"\n\nThe basement door had opened with Alyssa's Mom's (oh, just call me Harriet, she says) voice piercing through the darkness. I heard her try to turn on the light by flipping the switch several times. \n\nIf it didn't work once, certainly the second, third, and fourth tries were also going to be futile. Especially with all the lightbulbs shattered - along with anything else that was glass down here. What was the old adage about insanity?\n\nI reached for my cell phone, disregarding that the screen was now cracked, grateful it still worked as I turned on the flashlight.\n\nI hadn't heard a peep from my lab partner in the thirty seconds since my dumb ass did what I was expressly forbidden from doing which caused the - whatever that was - and I was worried. She was right in front of that glass box. I steeled my mind while preparing my body to leap into action if need be. The light shone off to the right before I corrected the position to befall Alyssa. She was still in the same position as before, only now with this really cute dorky smile.\n\n\"Alyssa?\"\n\nAt the mention of her name, Alyssa's arms shot in the air. \"It works!\" she screamed as she jumped from her seat and into the air. \"Ha, ha! It works!\" She ran to me and gave me a fierce hug.\n\n\"Sweetie, what happened?\"\n\n\"I was just able to convert brain waves into a manifestation capable of movement,\" Alyssa responded while squeezing me tighter. \"And I have to replace all the lightbulbs.\"\n\nI sat there feeling awkward. She was happy, her tight embrace nearly strangling me as proof, but I knew she wouldn't be the moment she asks how it happened. I barely put in any effort in reciprocation, putting only one arm around her, my hand barely touching her shoulder.\n\n\"Oh, okay, Dear. Just be safe,\" Harriet shut the door.\n\nAlyssa slowly started to release her grip of my body; her hands seemingly taking several detours as they caressed my back and shoulders. Her eyes found mine and as they did, she leaned in and kissed my cheek. Her smile was an effortless smolder as she finally withdrew. \"So what did you do to cause it to function?\"\n\nShit, here comes the firing squad.\n\n*\n\nThe scene kept replaying in my mind as I left Alyssa's home for the second time that day - oh yes, I had definitely rode with her to take a round trip to the store so I could buy a six pack of lightbulbs - and it wasn't even that she refused to let me clean up (I apparently had done enough damage). It was after I explained all that occured on my side of the project, amplifier, second blip, and the clicking of each.\n\n\"You did what?\" Alyssa raised her voice in surprise before adding in a giggling sing song tone accompanied by a light slap at my arm, \"Oh, how could I be mad at you?\"\n\nHad Alyssa flirted with me?\n\nBeing that I just blew up everything glass in her basement, I didn't press the issue.\n\nStill, it preyed upon my mind, at least until she dropped me off at my small studio apartment. The nagging thought was quickly replaced by the thoughts of tonights casino night party.\n\n*\n\nTen minutes. Ten whole minutes. That's it. Ten minutes for Aiden - fuck if I knew his last name...\n\n\"You're such an Asshole!\" A girls voice echoed from outside.\n\nYeah, that would work. Only ten minutes for Aiden the Asshole to turn the biggest and best party of the year into an episode of How to be a Douche 101; all because his ex girlfriend brought another guy to the party. As the partygoers filed outside to see the commotion, I stayed behind. I was on the verge of owning this place.\n\n\"Looks like you busted, Sir.\" The dealer pulled in my cash, \"Better luck next time.\"\n\nEleven minutes. Eleven whole minutes. That's it. Eleven minutes and I was broke - or should I say I was even more broke (I am a college student, afterall). I suppose I should be grateful the dealers don't take credit cards because then I'd be really screwed. I picked up what little was left of my ego and went to find the keg.\n\n\"Josh!\"\n\nI barely heard it over the thumping music, but it was enough. I filled my red solo cup and turned to see my friend, Isaac. I nodded in acknowledgment because there was no way I was straining my voice until he got closer. Besides, he was too busy checking out which girl or girls he was going to be hooking up with tonight; and it wasn't just fantasy for the guy who looked like he was sculpted by the gods... Black hair, toned muscles, confidence to the moon, and a keen fashion sense all made every girl swoon. I was descent enough looking but next to him, I was easily an afterthought.\n\n\"Hey,\" Isaac continued as he squeezed past a few people, \"Did you see what happened outside?\"\n\nI shook my head before taking a drink.\n\n\"Aiden was being an idiot, of course, but then Chad kicked him out of the party,\" Isaac then looked at me curiously, \"I'm surprised you're not at the blackjack table. Didn't you say you were going to win big with some fool proof plan?\"\n\nWhy did I even bother picking up my bruised ego from the table? \"Well, it turns out my fool proof plan wasn't so fool proof.\" I chugged the rest of my beer to the laughter of my friend.\n\nIsaac briefly put his arm around my shoulder, shaking me slightly. \"Well, maybe you'll get lucky in another way. I'll help find you somebody before I take over.\"\n\nI felt like a charity case. As much as Isaac is the smooth talking ladies man able to land any girl, I am not. It usually takes me a conversation or two to get the nerve to ask a girl out. As I said before, dreams are not reality.\n\n\"Now let's see; which girl in here might be interested in your barely passing computer graphics loving ass... Holy shit.\"\n\nI looked in the direction Isaac was staring and my jaw dropped. Styled and curled brown hair, gold hoop earrings, matching necklace, red lipstick, her nice body tucked into the shortest little red micro minidress I have ever seen that barely contained her modest boobs all on a plate of red high heels... and she was walking right toward us.\n\nProbably because we were still standing in front of the keg, or more likely, because of Isaac; but a guy can dream can't I?\n\n\"I saw her first,\" Isaac eagerly declared while filling a cup with beer.\n\n\"And I thought we were going to find a girl for me?\"\n\n\"You can have the next one.\" Isaac handed the girl the beer, \"For you, Sexy.\"\n\n\"Thanks.\" She took a sip before turning to face me with a smile, \"Wild party; isn't it, Josh.\"\n\nIsaac stared at me stunned, barely able to form the words, \"How do you know her?\"\n\nHell if I knew? I shrugged my shoulders whilst wracking my brain to come up with something. \n\nI did not.\n\nThe girl giggled in a sing song voice which was accompanied by a light slap at my arm, \"Josh and I are lab partners in Neuroscience.\" She was talking in response to Isaac, but she never looked away from me, as if I was her world right now.\n\n\"Alyssa?\" I looked more closely... the hair was the right shade, her body - well, with how she dressed before who could really say - the kicker to me was how different someone could look without their glasses? I had always thought Lois Lane was an idiot for not recognizing Clark Kent for being Superman just because of a pair of glasses. I was in awe. \"Wow... you look absolutely incredible. What happened to your glasses? The ones I didn't crack, I mean? I mean, your spare ones, I mean?\"\n\nGreat, now I'm blabbering. I know - What a catch! - right ladies?\n\nAlyssa, perked up, as if before my compliment her confidence was an act and my words lifted an invisible weight off her shoulders. \"I decided to go with contacts while slipping into something more comfortable for the party.\" \n\nThat dress was more comfortable? It was practically pasted on. \"Well, I don't know about comfort, but it looks amazing on you.\" \n\n\"Wanna dance?\" Alyssa glanced around the room before adding, \"Somewhere?\"\n\nI gulped. Not only because Alyssa had actually asked me to dance - I didn't know she had it in her - but it was the first time a girl had initiated an advance with me. With past girls, we'd talk a little bit to loosen up my nerves and then I'd finally ask. \"Sure,\" I offered my hand in order to lead the way to another room that had a few less people.\n\nAlyssa handed her beer back to Isaac as an afterthought before taking my hand.\n\n\"What the hell?\" Isaac threw up his hands. \"Since when do the girls come to you over me?\"\n\n\"As luck would have it,\" I shouted over my shoulder. Yeah, that may have sounded cool in the moment, but it was simply meant to be funny. I didn't think there was any chance I'd be having sex with my lab partner tonight. It just didn't seem like it would be in her comfort zone.\n\n*\n\n\"Nice night.\" My arm rested on Alyssa's waist as she was draped onto my side as we walked in the cool evening.\n\n\"Yes it is,\" Alyssa echoed as she burrowed even further in my side.\n\n\"You know,\" I half chuckled. \"You really surprised me tonight.\"\n\n\"Why is that?\" I heard the smile in Alyssa's voice. \"Because I can't dance? I've got breaking news for you then, neither can you,\" she giggled.\n\n\"No, not that; and believe me, I know my moves look like I'm having a seizure.\"\n\n\"It was fun, though.\" Alyssa then gave off a quick laugh, \"Even with all the people giving us odd looks.\"\n\n\"Yeah,\" I nodded before glancing at her, \"But I meant in general. The different look, the outfit; hell, just you coming to a party... and then on top of it all, your closeness to me. We've been lab partners for half a semester and I never knew you had this in you.\"\n\nAlyssa's voice turned bashful, \"Neither did I.\"\n\nAlyssa's response gave me pause, enough to stop walking. Or maybe it was because we had made it to the front of my apartment building. \"What changed?\"\n\nAlyssa looked into my eyes, her flecks of hazel sparkling in the moonlight. \"My whole life, I've been driven by academia, never even feeling the need to have a guy in my life. I love science, I really do, and I want to make a career out of it, but today, after you destroyed my lab, you opened my eyes to what having someone in my life would be like... And in doing so, I fell in love with you.\" She leaned in and gently pecked my lips. \n\nI froze at the words, unable to even reciprocate the kiss.\n\n\"Don't worry, Josh,\" Alyssa pulled back with a smile. \"I'm very pragmatic. I don't expect you to say you love me. In fact, it just made me love you more for not being like other guys that would prey upon a girls emotions just to sleep with them and then ditch them. No, you're different. All I'm asking is, and there's no pressure, really, but,\" Her head then shied away and her voice became nervous as she stated her wish, \"would you be interested dating me to give it a chance?\" She finished by chewing on her lower lip.",
        "Would I? Dating Alyssa never crossed my mind before. She's a genius, but having a woman smarter than myself isn't an issue... especially since she never made me feel stupid because of it. In fact, she encouraged my participation with our lab work until she realized I didn't give a shit. She was also nice when she wasn't trying too hard, but even then it was only an awkward nice. I guess the clincher would have to be this evening, and I don't mean how she's dressed, or not dressed, really. At the party, and even now, our conversations have flowed easily, switching from topic to topic and offering up a few laughs as well. So would I be willing to date Alyssa? \n\n\"Absolutely.\"\n\n\"I mean, I know I sprung it on you so if you need time to decide or...\"\n\nI cut her off by laughing a little bit before I lifted her chin and brushed my lips against hers, whispering my answer again, \"I would love to date you.\" I then kissed her, truly this time and it felt surreal. She was kind of all over the place in an unpracticed way, but I could genuinely feel Alyssa's passion for me in our connection. Will I be able to give that unto her at some point?\n\nTime will tell.\n\nAlyssa's hand slid from my chest and down, traversing my stomach before going over my belt and cupping my manhood.\n\n\"Didn't you just say you were happy I didn't prey upon your emotions so I could sleep with you?\" Not that I was putting up a fight. My ex and I broke up after freshman year. It's been awhile.\n\n\"That's why I'm going to fuck you.\" Alyssa smiled seductively, \"I have to demonstrate to my man that I'm more than willing to take care of his needs, all of them.\"\n\nI just couldn't get the door to my apartment building open fast enough, let alone trying to climb two flights of stairs and opening the door to my studio apartment. Every move I made was made with difficulty. Simply put, it's not easy to do menial tasks when someone is stroking your erection in a concerted manner while also taking the time to nip and lick sensually at your ear and neck. Alyssa was being aggressive yet playful and it didn't matter if anyone was near... Like my ninety year old neighbor, Mr. Wixom who was coming out of his first floor apartment as we came in. It didn't even faze her.\n\nI barely got the door shut before my pants and underwear hit the floor in one swoop. Alyssa wasn't playing around, dropping to her knees and engulfing my manhood with gusto. She bobbed and weaved her head, licked and curled her tongue, never the same motion repeated and spittle was everywhere. All her actions were done with so much force, I had to lean back, bracing myself against the door to keep from falling over.\n\nIt was awesome.\n\nIt was excruciating torture. \n\nI don't think it was intentional, but with every movement so sporadic, I was never going to cum from this. It had the affect of edging me, constantly close, but never over the brink. I was about to go over the brink in another way as lust was clouding my sanity.\n\nAlyssa smiled as she stood. She placed a trail of kisses on my neck before the husky timber of her voice whispered in my ear, \"Do you want to cum in my mouth? I'll most definitely swallow. Or do you want to make me squeal like a pig by stuffing this man meat in my ass? Or perhaps you want to lay claim to my pussy, taking what is rightfully yours, Baby?\"\n\nWow... The choices? And a pet name.\n\nBefore her little speech, I honestly didn't care. I was so tormented I would've probably taken charge and fucked her face into oblivion. But now? As good as each sounded, how could I resist the notion of laying claim over her pussy? If she wants me to take ownership, I'll gladly accept.\n\nI kicked out of my pants and pulled off my shirt before pulling her tightly to my body. I gave her a fierce kiss to showcase my need as I tugged at her dress. Was it supposed to go up over her head or down around her ankles? It didn't matter, Alyssa knew my desire and saved me the effort, as well with her little g string as I relinquished her captive lips. \n\nBeing in a studio apartment, my bed was mere steps away, in which I was eternally grateful. I practically threw Alyssa down and climbed on top of her. I will never forget her smile - full of wanton desire, even licking her lips - as she reached between us and placed the angered head of my dick at her entrance.\n\n\"Fuck me... Show me who owns this pussy, Baby.\"\n\nThe offer I couldn't refuse.\n\nI thrust in and Alyssa's smile widened as she gasped with the insertion. It felt like I entered a velvety oil slick. I didn't stop. I reversed course before thrusting again, only this time, I was met with her hips raising; she was not willing to wait for me to continue.\n\nI kept going, slicing through her folds, deep into her canal, building to a defining pace as Alyssa, once again, tried various tactics - humping into my girth, arching her back, wrapping her legs around my torso, and then doing all three at once. It didn't matter, however. My desperation came from the tricks her mouth had provided and now I was plundering what belonged to me.\n\nAlyssa was so wet. Exponentially so. Still, despite her pussy grabbing and milking my member, she seemed to be on the precipice of euphoria, but not over the top. I couldn't wait. Honestly, in my heightened lust induced rage, I didn't try. \n\nI still had the sense to pull out. I don't know how I managed it, and it was very last second. I pulled from Alyssa's sheath as rope after rope spewed forth from my loins and onto my lovers stomach... And then the oddest thing happened. \n\nAs the first splatter of white ingratiated with her flesh, Alyssa started convulsing, screaming one elongated, \"Oh fuck!\" She came hard, as if my essence burned of ecstasy on her flesh.\n\nI collapsed next to Alyssa, panting. I reached to my nightstand and pulled some Kleenex out of the box, \"Sorry about the mess.\"\n\nAlyssa smiled a satiated smile full of happiness and contentment, \"Don't be... And don't worry about the clean up, either.\" Her fingers went to my seed, scooping it up delicately as if it were the meaning of existence and then bringing it to her lips. She repeated the process until she had cleaned herself, sucking on each finger to ensure she drank all remnants in a dedicated show of devotion. \n\nI dropped the tissues and pulled Alyssa closer to me, \" I suppose that's one way.\"\n\nAlyssa giggled, \"Why waste a good high in protein snack after a heavy work out?\"\n\n\"You know, you sure had me fooled,\" I shook my head with a smile. \"I knew you had a great personality, though it took some time for your defenses to crumble. I knew your face was lovely, despite being hidden behind those large glasses.\" I then cupped her right breast as I felt their sheer soft firmness for the first time. \"But who could have guessed you had such an amazing body under those clothes you usually wear?\"\n\nOkay, I may have exaggerated a little, I mean she was never going to be a supermodel, but to me, that didn't matter. It's what is on the inside and Alyssa has showed me that in spades, and I'm not even taking in account she was an absolute whore in the bedroom. Her personality and passion made the rest of her - what society defines as beautiful - so much more. It was perfect.\n\nIt was proof that anyone can be sexy if they own their body.\n\nAlyssa cuddled up into me, her head on my shoulder, her hand landing possessively on my chest. \"You know, you are the only one who has ever complimented me on my looks before? Thank you.\"\n\n\"Well, I can't say I'm sorry to hear that because then you might be in some other guys bed and I would've had to actually use those tissues.\"\n\nAlyssa chuckled at my joke before responding, \"You have me for as long as you want, so now you can save a fortune on Kleenex.\" It was my turn to laugh before she continued, \"I promise I'll get better.\"\n\nBetter? Sure it wasn't precise, it was our first time together, afterall... And she definitely made up for her inexperience with enthusiasm. Was she saying she's trying to get porn star good? \n\n\"I mean, I'm always ready to practice, but you were pretty damn good tonight.\"\n\nAlyssa began tracing imaginary lines through the small amount of hair on my chest, \"For a first time, maybe, but...\"\n\n\"Not just for a first time, it was good, great even; but yeah, if that's how you feel, of course we'll get better as we find out what makes each other go nuts. Either way, I'm not complaining.\" I'm not sure why Alyssa needed this validation?\n\nAlyssa's head lifted from its perch on my shoulder, \" No,\" she offered a shy smile, \"I mean for my first time... ever.\"\n\nHoly Shit. Now that was a revelation. \n\nAlyssa chuckled at the apparent shocked look on my face. \"I do own an vibrator, so yes, I'm technically not a virgin, but yours is the first cock I've taken.\"\n\n\"I'm honored,\" I gave a soft smile.\n\nAlyssa giggled, giving me a playful slap, \"I bet you are!\"\n\n\"No, I mean it.\" I truly did. \"And to prove it,\" I laughed as I started tickling her sides. It was the least I could do.\n\n* \n\nIt was strange waking up with a girl in my bed. With past girlfriends, sure we'd have sex and, if time, hang out afterward, but there was always a curfew looming over one of us. Last night, despite Alyssa still living at her parents, she said it wasn't an issue... and she didn't even lie on where she was going. They knew she was going over to a guys place to stay the night, although Alyssa made it clear to me that it didn't matter if they objected or not. I was worth it.\n\nBut if they had objected, would I be in a position to want her to move in with me after only one night? Well, if last nights sex was any indication, yes (Yeah, I know I'm thinking with the wrong head).\n\nStill, the kicker of it all was the next morning.\n\n\"Seriously, Baby? This is all you have?\"\n\nI looked up from the bed to see a naked Alyssa staring into the fridge as if trying to find some hidden object behind all the emptiness. \"What can I say, I'm a simple guy.\"\n\nAlyssa turned with a huff. The affect on me wasn't quite the effect she wanted as the motion just made her boobs jiggle. She held up the only things in my fridge. \"All you have is three slices of leftover pizza from God knows when and half a gallon of milk that expired a week ago? What exactly were your plans for breakfast today?\"\n\nAh, the life of a poor college student.\n\n\"The pizza, I think. I got it two days ago.\" \n\n\"You think you were going to have the pizza or you think that you got it two days ago?\"\n\n\"Both,\" I tilted my head with a smirk. \"Though the milk might be cottage cheese by now, so that's kind of breakfast-y.\"\n\nAlyssa rolled her eyes, which, once again, had an affect, just not the one she was hoping for. Though, she was smiling this time, just proving she was putting up an act all along. She put the pizza in the microwave before dumping the spoiled milk down the drain and rinsing out the jug. She finished by putting the empty plastic on top of my over filled garbage can as the microwave dinged.\n\nHey, if I knew I was going to have a girl over, I would have cleaned up - okay?\n\nAlyssa handed me the plate while taking a slice as she sat down next to me on the bed. One bite, and she was done. \"I suppose I'm going to have to leave soon. After cleaning up my lab, I had to get ready for the party, which required going shopping for some outfits that I thought you'd like, so I never got to writing our report yesterday.\"\n\n\"A new wardrobe just for me?\"\n\n\"Oh come on, you've seen what I wore before.\" Alyssa shook her head, \"None of that said sexy and alluring. If it had, we'd have started dating two months ago.\"\n\nTrue. But still... I set my plate down and pulled Alyssa on top of me, \"So what you're saying is you don't want to spend the whole day naked in bed with me?\" I finished my plea with a lovers kiss.\n\nAlyssa smiled, \"Oh Baby, if that's what you want, you know I'll do it.\" \n\nSeriously? Alyssa had responded without any hesitation. My eyes narrowed, \"That means we'd fail the assignment? You're okay with that?\"\n\nAlyssa laughed, \"I don't think you understand my love for you, yet?\"\n\n\"Oh?\"\n\n\"If you ask me to quit school and live homeless with you in a box; I will - though this doesn't seem to be too far off from that.\" \n\nI chuckled at the slight as she continued. \n\n\"If you ask me to overthrow a government; I will. If you ask me to take a trip to the moon, I'd find a way. If you ask me to kill my...\"\n\nThat's when I cut her off, \"Don't you dare say that.\" My tone couldn't have been more serious. \n\nAlyssa backed off, \"Okay, but that means everything up to that is acceptable. I can live with those terms for our relationship.\"\n\nI smiled as my head fell back into the pillow in resignation. \"I'm not going to win with you, am I?\"\n\n\"Nope,\" Alyssa grinned grandly. \"So which is it?\"\n\n\"What?\"\n\n\"Stay in bed naked all day and fail or I leave and we pass?\"\n\nThough having her here all day, naked, would have been fun, I couldn't do that to Alyssa. Science was her future. My decision didn't stop her from getting her breakfast straight from my dick, which, in turn, caused her to cum as well, all before she got dressed because the pizza was disgusting... However, I did have to help out with my hand to finish the job.\n\n\"I'll miss you,\" Alyssa pecked my lips in a stall from leaving tactic.\n\n\"I'll miss you, too,\" I smiled back, actually meaning it. \"Tomorrow seems so far away.\" It really did. I know I shouldn't be hung up after a night, but its been a hell of a night.\n\n\"You know, I can come back tonight if you're willing to give me some space for clothes and maybe some other places for girl things. We can make it work in this small space... But I promise, I don't want to be pushy or intrude. No pressure.\"\n\nWas I prepared for that? Well, now that my little head was taken care of... \"Sounds good,\" I kissed her this time. \"Whatever you need here, its yours.\"\n\nOkay, the little head still made the decision for me. What could be the harm in trying?\n\n\"Great,\" Alyssa cheered a little too excitedly. \"I promise, I'm not one of those girls with a lot of needs, but yeah, if you want me to look all sexy like last night all the time,\" and she caressed my manhood as she continued, \"I do need some space in the bathroom on top of room for my clothes, if that's all right. Otherwise, whatever, I'll make it work.\"\n\nI nodded numbly under Alyssa's ministrations. At this point, it was safe to say I was whipped.\n\n*\n\n\"Hey, Isaac,\" I answered my phone cheerfully as I dusted... with a t shirt. Cleaning house was not really my forte, but that's the world we live in - get a girl, try and impress. \"Shocked you're not hungover... actually, I'm shocked I don't hear a girl in the background.\"\n\n\"Who says I'm not hungover?\" Isaac laughed. \"And as for the girl, well, she lives with her parents so you know how it goes when they have a curfew.\"\n\n\"Actually,\" I started as I gave up on the dusting and threw away the shirt, \"I don't.\"\n\n\"Wait?\" I could hear his mind processing what I told him, \"You dog, you, ha - ha. I can't believe you did the whole one night stand thing.\"\n\n\"Well,\" I drew out the word as I tied up the garbage.\n\n\"All right, all right, that makes more sense.\" Isaac chuckled, \"You were never the hit it and quit it type of guy... What are you doing?\"\n\nThat would be the water as I attempted to scrub clean a dirty plate that may or may not have been in the sink from the first day I moved in. No admissions. \"Dishes.\"\n\n\"So she saw your apartment and is still willing to come back but only if you clean up?\"\n\n\"Actually, I'm doing this on my own. She's staying the night again tonight, but it may be more permanent. There weren't any promises, but we're both willing to see where it goes.\"\n\n\"Wow, it must have been one hell of a night if you're tying the knot already,\" Isaac was joking with a hint of seriousness in his voice. His message was clear - be careful. \n\n\"Shut up,\" I shook my head. \"It's not like that. We just enjoy being together, that's all. Remember, I hadn't just met this girl. I've known her for a couple months now and she isn't like that.\"\n\n\"Oh, okay. If you say so.\" Isaac then did what he always does and fully lightened the brief tension, \"Hey, she better have some fine looking bridesmaids for the best man at your wedding!\"\n\nI ran a hand through my hair as my phone started to beep, signaling an incoming call.\n\n\"Hey, I gotta let you go. Alyssa's on the other line.\"\n\n\"All right, man, talk to you later... And tell the old ball and chain I said hi.\"\n\nI untied the garbage bag and threw the plate in it as I switched calls. \"Hello.\"\n\n\"Hey Baby, I hope it's not too much trouble, but my parents said if I was going to start staying over, they want to meet you. Is that all right or is it too soon?\"\n\nMeet the parents? I honestly didn't care if it meant Alyssa wouldn't be getting any flack every time she stayed over. Besides... \"It's not a big deal; it's not like I haven't met your Mom already.\"\n\n\"Yeah, I know, but they say its different\n\nbecause they thought that was just us doing homework together.\"\n\nMakes sense. \"So when do they want to do this?\"\n\n\"Dinner, a week from this Tuesday; it's the next night my Dad has off because the other guy is on vacation. The life of a restaurant manager, he says.\" \n\n\"Ah,\" I turned off the water, grateful I could stop this charade of cleaning. I had another week to prepare. \"I suppose that means you staying the tonight got cancelled until after?\"\n\n\"Hell no,\" I could hear the smile in Alyssa's voice. \"They trust me enough, not as if that would influence my time with you, but getting along with them does make things easier.\"\n\n\"Awesome, I'll see you tonight then.\"\n\n\"Love you, Baby... See you tonight!\"\n\nAs we hung up, I begrudgingly turned the water back on to finish dishes.\n\n*\n\nMy mouth went dry as Alyssa stood at my doorway. She was wearing a short white tank top that showed a hint of under boob while fitting so tight, it was nearly transparent with her nipples making obvious indentations in the fabric which she paired with matching jean booty shorts, fishnet stockings, small black high heels, make up done to perfection, and to finish the ensemble, an ecstatic smile. \n\nAfter a cursory kiss to my stunned existence, Alyssa immediately made her way to the fridge and set down her two handfuls of plastic bags.\n\n\"You went... grocery shopping?\" Alyssa exasperated as she opened the fridge.\n\nWhy yes, yes I did.\n\nAlyssa laughed as she took stock of my purchases: milk, bread, bologna, a box of cereal, spaghetti, and a jar of marinara sauce. Which, after last night, was the last of my bank account until Friday. I'll be honest, I'm not even sure I could make the cereal right let alone the spaghetti. She then emptied bag after bag of food that she had brought over because despite how much she enjoyed sucking cock, cum couldn't be her only source of food.\n\nI had begged to differ, but she had won that arguement as well, having relegated me to getting the rest of her stuff from her seven year old light blue Honda Accord.\n\n\"And you attempted to clean?\" Alyssa's statement was full mirth.\n\nThat one stung, because I worked on it all day; although, looking around, yeah it didn't seem like I did much. I lowered my head in shame and went back out the door to get the last box of clothes.\n\nThe rest of the evening played out like a large what if Alyssa moved in with me statement.\n\nWe both knew sex was on the menu, but it wasn't she arrives, we have sex and then what; but there also wasn't any sexual tension because we didn't throw each other down like animals right away. When we did finally get to it, Alyssa was just as aggressive as she had been the day before... it was becoming obvious that was her style.\n\nBut first, Alyssa made spaghetti (I knew I was right in that purchase!), which was bland, but tasted like divinity compared to what I cook. I did the dishes, which she actually didn't like. I was adamant, however, like I said, I was taught equal partnership by my family - she made dinner, it was only fair I do clean up. She relented, but her statement of \"I'm working on it\" felt like a premonition. I don't think she understood my resolve.",
        "We followed dinner with a movie while snuggling on the couch and during our talking session afterward, we found we were both really into the same series on Netflix, and despite my being a couple episodes ahead, I didn't mind rewatching them... And then we had sex. \n\nThe what would life be like if Alyssa moved in statement was a resounding success. She had told me no pressure, but I was already convinced.\n\n*\n\n\"So how's the wifey - pooh?\"\n\nI shrugged off Isaac's sarcasm - after a couple days of the taunts, I knew he wasn't going to let up. I pulled my backpack tighter over my shoulder, \"It's awesome. Alyssa has stayed over every night, and it's been nothing but fun. We'll see after tonight, though.\"\n\n\"Ah, the big meeting with the parents.\" \n\nA big smile widened on Isaac's face, \"The honeymoon ends tonight.\"\n\nI rolled my eyes.\n\nIsaac just laughed, \"You think I'm joking about this marriage thing, but I'm your best friend and I've never seen you so hung up on girl.\"\n\nI looked at him in thought. Am I? With my last ex, we definitely had a \"fiesty\" relationship where it seemed like the knives were constantly out. Before that was high school and my relationships didn't have much depth, equally able to hang out together or with our own friends without much care. But Alyssa? Yeah, just the thought of her name made my lips twitch into a smile. I shook my head, \"Anyways, I'm running late. Alyssa's waiting for me in the south parking lot.\" I took a few steps in that direction. \n\nIsaac called out after me, \"This is where a car would come in handy.\"\n\nI looked over my shoulder with a chuckle, still not stopping, \"Yeah, you going to buy that for me?\"\n\nIsaac turned and walked away. That was a resounding \"no.\"\n\n\"Ouch! Watch where the fuck you are walking, Asshole.\"\n\nI turned to find four females waiting in lurk. It was Lacey Hart, dressed as provocatively as always, in a tight black dress with plenty of cleavage, and her crew of Madison, Kristen, and Debbie, who were dressed similarly. \n\nThese girls did know they were on a college campus and not a strip club, right?\n\nRegardless, I found something unusual occurred - actually, I first noticed it in my math class that had Charlotte Westgate in it and again when I saw In\u00e9s Lopez in the cafeteria - I didn't once look at them and daydream a what if about my prior crushes. Hell, I didn't even ogle them for a second, despite all the cleavage bombarding me right now. I didn't care. \"I'm sorry,\" I backed off and took a step to go around. \"My fault.\"\n\nKristen sidestepped to block my path.\n\nLacey snickered, menacingly, \"And you think that's good enough? I think you can do better.\" She stared daggers at me as she stepped into my personal space. \n\n\"What's your name, Loser,\" Madison stepped forward and joined the fray.\n\nWhat did these girls want; a human sacrifice? \"Josh Simmons.\"\n\n\"Ha,\" Kristen laughed, \"Now we have a name to give the Campus Health Center when we tell them you sexually assaulted us.\"\n\nDebbie put a finger to her chin, \"Come to think of it, I did feel your hand touch my breast when you ran into us.\"\n\nNo, they just wanted a male sacrifice. Fuck. I sighed, about ready to just walk away in any direction I could escape until I heard the faint echo of my name.\n\n\"Josh Simmons?\" Lacey's eyes were wide and her complexion went pale. If these girls weren't trying to - I don't even know what - I might have been concerned.\n\n\"I did apologize, ladies,\" I spoke forcefully as I took a step back... and then I paused at the most unusual sight - Lacey was crying. I shook my head, nope, not falling for that after what Madison and Kristen just threatened. I turned on my heels and put speed in my step, only offering a brief glance at what sounded like a desperate plea.\n\n\"Wait, I'm sor...\" Lacey's hand gently reached out but I wasn't stopping.\n\nThat was weird. I knew they thought guys were disposable, but I had never been in the quartets crosshairs before. Perhaps even more perplexing was Lacey's reaction. She was harsh in her words and then, rather suddenly, she appeared as if something that was the most important to her was lost forever. \n\nIt was a fleeting thought, however, as I was determined to get to Alyssa as soon as possible... And I had to go the long way around to the south parking lot now. Great, the day I'm supposed to face the firing squad of my girlfriend's parents, I'm going to make us late.\n\n\"Hey Baby,\" Alyssa smiled, not even caring I was late... and apparently not willing to change her ultra revealing way of dressing despite us going to have dinner with her parents. The pink dress was so short that as she was sitting down, it rode up to her hips revealing that she was wearing a matching g string.\n\n\"Hey Sunshine,\" I slid in the car. \"Sorry I'm late. I had a peculiarly dreadful encounter with...\" I stopped as Alyssa was staring at me, her smile just growing exponentially. \"What?\"\n\n\"Sunshine?\"\n\n\"You brighten my day.\" I looked at her thoughtfully, \"Why? Would you prefer me to call you something else?\"\n\n\"That's sweet.\" Alyssa snickered, \"It's better than something like George.\"\n\nMy eyebrows raised in humor, \"George?\"\n\n\"Something my Grandfather called me.\" Alyssa smiled, \"You know I'd answer to anything you called me, even George. If you're into that sort of thing, I could buy a strap on...\"\n\n\"No, no, no,\" I raised my hands. \"I'll stick to calling you Sunshine, thank you, and I am perfectly happy with our sex life.\"\n\nAlyssa laughed as she put the car in gear, \"Just making sure I satisfy all My Man's needs is all. Who knows what fetishes you may have?\"\n\nI thought for a moment, \"Not many, really. Like I said, I'm happy with our sex life... and you?\"\n\n\"You cumming,\" Alyssa answered without hesitation.\n\nI nearly coughed up a lung, \"Excuse me?\"\n\nAlyssa shrugged, \"I don't know what it is, but if I know your getting off, I explode... and I don't think it matters if its with me or not? Nothing but applying the scientific method won't figure out, you know, eventually.\"\n\nDid our sex life just become a science experiment?\n\nI took a deep breath and changed the subject, \"So how bad do you think tonight's going to be?\"\n\nAlyssa glanced at me through her peripheral vision. \"Not at all. My parents are going to love you, they just want to meet you in case there's an emergency or something. It's nothing to worry about.\"\n\n\"Okay,\" I drew out the word. \"If you say so.\"\n\n*\n\n\"My daughter finally brought home a man!\"\n\nI was immediately engulfed in a pair of arms that belonged to Alyssa's mother, Harriet.\n\n\"All right, let the kid breathe,\" Alyssa's Dad was kind enough to let me have oxygen. \"Pleasure to meet you Josh, I'm Rick,\" he finished by extending his hand.\n\nThe handshake was firm, but not overbearing. I honestly was expecting something akin to a vise, but, much to my surprise, I still had feeling in my palm. \"Thanks for having me, Rick. Great to be here.\"\n\n\"No, we should be thanking you, Josh. With how studious Alyssa is, we starting to have our doubts about a guy taking her off our hands.\"\n\nNow if it were me, I would have been embarrassed if my parents had said these things to any one of my girlfriend's, but Alyssa just stood back with a proud grin as if all was going according to her plan.\n\n\"Right this way, Josh,\" Harriet gestured to the dining room. \"I hope you like meatloaf?\"\n\n\"Sounds wonderful.\"\n\nI could see where Alyssa got her cooking prowess. Dinner was good, though that's only in comparison to my non existent chef abilities. My Mom would leave them both in the dust; hell, McDonald's can see them in the rearview mirror. Still, I was eternally grateful that I wasn't eating the so called food from the cafeteria for dinner (my typical plan before Alyssa), due to its tendency to taste like cardboard.\n\nConversation, however, was odd to say the least. It started with the normality of good news from the day, mainly Alyssa is now the youngest paid lab assistant at State University in the science department, a position usually reserved for people who have a degree. She completely bypassed the intern level. I'm proud of her, of course, but she already had an insane workload - she starts earlier than me, so much so that I don't even get to see her at school outside of our class and lab, and this adds to it. But I also understand this is a huge stepping stone to her future career, and so I am supportive. I look forward to seeing what inventions she creates and what she uses them for.\n\nAfter that normal news nugget, the discussion went completely off the rails. The topic was simply how happy Alyssa's parents were that we were together. \n\nPerhaps my view is skewed from all the other meetings I've had with a girls parents? Every conversation tended to be firm to intimidating, with my prom dates father going so far as to brandish a gun during it to make sure I understood the gravity of his virgin daughters virginity. It did lose some of the desired affect because I knew firsthand she wasn't a virgin, and it wasn't even because of me.\n\nBut Alyssa's parents were over the top, gushing. It felt like a comedic troupe to the point I was looking around for the hidden cameras. They didn't even ask me about my plans for the future. Still, I suppose I'd rather have their blessing than not. It just felt odd.\n\nAfter dinner, we found ourselves in the living room watching a movie. Alyssa's parents were on the couch along the west wall, while Alyssa and I took up residence on the love seat along the south wall. With how the room was set up, we were further away from the television and for her parents to see us, they would have to simply crane their heads from left to right.\n\nDid that stop Alyssa from caressing my manhood through my pants?\n\nIt did not.\n\nI gave Alyssa an \"Are you crazy look?\" and her response was to kiss me. Not just a peck, either, as her tongue invaded to duel mine to the point we were both the winners. \n\nI stopped my silent arguing.\n\nHey, they were her parents. If they caught her stroking my erection through my pants, she's the one that would have to deal with the fallout.\n\nMy eyes nearly bulged out of my skull when Alyssa unzipped my pants, fishing out all that I hold private into the open air. She stroked the shaft a couple more times before lowering her head.\n\nAnd her parents never moved, eyes glued to the screen.\n\nAlyssa was beginning to drive me mad with the way she was sucking my cock. She was all over the place, again. My hand was moving toward her head, about to take control when...\n\n\"You really should settle on bobbing your head, Sweetie,\" Harriet offered, but still didn't appear to be looking our way. \"You can do all the things you are doing at first, but at this point, your just teasing him now, which isn't fun... Oh, and gently massage his balls. He'll like that.\"\n\nI stared at Rick and Harriet - still just watching the movie. They were okay with this? They didn't care that... Oh dear God.\n\nAlyssa took that little instruction and ran with it. Her head was finding a rhythm, as her saliva was coating every inch of my shaft while her tongue was tickling all around. With her always present enthusiasm, it was no longer torture, but euphoric bliss. Coupled with the never before felt sensation of someone massaging my balls, I was on the verge of exploding.\n\nAlyssa beamed with pride as she sat up. \"I told you I'd get better. Relax your legs.\"\n\nWow, she had me so worked up, I didn't even realize my legs were pushing my midsection in the air. \n\nI did as instructed and Alyssa threw a leg over my body and slid her g string to the left. She wasted little time in stradling my erection, sitting on my cock like a saddle. Fuck was she wet. \n\nWithin moments, Alyssa was bucking hard against me, riding me as if her life depended on it. The couch creaked and moaned with her as every movement threatened to break the wood.\n\nIn the position I was in, I couldn't do much. I pressed upward the little I was able, sure, but with Alyssa's aggression, I was along for the ride. Still, I wasn't complaining as I had a great view of her bouncing tits, which I made even better by freeing them from their captivity. Oh did they jiggle, hypnotizing me with all their charm.\n\nAlyssa was like a woman possessed, bouncing hard with extreme delight. Her head was falling back, her eyes wavering in an unfocused passion.\n\nMy cock was hitting deep into the satin tunnel of ecstasy. The feelings were unrivaled and my crescendo was near.\n\n\"I'm going to... cum.\"\n\nAlyssa doubled her efforts. My end was nigh as she seemed oblivious to my statement.\n\n\"Sunshine, did you hear me? I'm going... to... cum...\" I barely got those last three words out. The strain in my voice echoed the severity of the situation. I was well past the brink.\n\nAlyssa kept going.\n\n\"Alyssa...\" It was the only word I could verbalize, if you could call a mumble verbalizing. \n\nAlyssa looked down, a maniacal smile plastered on her face. The little minx had heard me all along.\n\nThe damn burst. My hips raised and a guttural moan from deep within my loins escaped my lips as I came in a torrent, flooding her womb.\n\nAlyssa howled as she felt my release. Her body shook and convulsed to the point I had to pull her into my arms to keep her from falling off the couch. My embrace seemed to spur her orgasm even further, an unrelenting cascade of pleasure from the heights of which I haven't seen. Each little twitch of my deflating cock caused an aftershock into my lover.\n\n\"I'm glad we put her on birth control,\" Rick chuckled.\n\nI stared at Alyssa, with her worn out but satiated expression. \"Birth control?\"\n\nAlyssa smiled sweetly, \"As much as I love eating your cum, I really wanted to feel it inside me.\"\n\nHarriet threw over a box of tissues, \"You better not make a mess on my couch.\n\nAs the box landed next to us, I glanced at her parents, still engrossed in the movie. They hadn't cared in the slightest. The opposite in fact. They condoned what we did. \n\n\"You have the coolest parents ever,\" I exasperated dumbfoundedly as Alyssa started cleaning up, extra careful not to get any on the couch. \n\nAlyssa gave me a smile... full of pride. Was it pride regarding her parents or self pride? I was unsure. \n\nI didn't care. To me, if I was her, I'd be proud of what she did to me, too. I felt like a tub of goo unable to even move.\n\n*\n\n\"What the fuck did you do to Lacey?\" Madison stuck her finger into my chest. Hard.\n\n\"Yeah,\" Kristen came from the left and the word was parroted to my right by Debbie. They flanked each of my sides to ensure I would not so easily escape this time.\n\nI also had no idea to what they were talking about. \n\n\"Pardon me, but I'm going to be late for class.\" It wasn't the truth as I was heading toward the cafeteria, but my three tormentors didn't need to know that.\n\n\"Oh no you don't, \" Debbie put a hand on my shoulder to keep me from moving. \"You're not going anywhere until you tell us what you did to Lacey.\"\n\n\"I didn't do anything to her. I don't even know what you're talking about.\"\n\n\"If you didn't do anything,\" Kristen took up the vocal mantle, \"Why are you the only thing she talks about?\"\n\nYeah, she just called me a \"thing.\" But since a thing could be a million dollars or a fancy jewel or a priceless work of art; is it really an insult?\n\n\"Yeah,\" Madison added. \"She only likes a certain type of guy: he had to be rich and he had to be good looking... until you came along and now it's like she's changed.\"\n\n\"So what the fuck did you do to our friend?\" Debbie demanded. \n\n\"This shit all started after bumping into you,\" Kristen put her hands on her hips.\n\nHonestly, couldn't they have picked a designated speaker? My neck was getting whiplash going back and forth. Regardless, this had to be some kind of a joke or another attempt to get me into some sort of trouble. \n\nSo I stoked the fire.\n\n\"Maybe it was love at first sight?\"\n\nYeah, I was going to pay for that one, but I didn't care. In fact, I was done with the triumvirate of gold diggers.\n\n\"Now, I'm out of here. If you want to know what's going on with your self-centered, garbage of a human being, back stabbing friend, I suggest you ask her.\" I moved forcefully between Debbie and Madison, \"And when you do, tell her I already have a girlfriend.\"\n\nThe girls regrouped, surrounding me again and I gave off an irritated huff.\n\n\"Fuck you, Asshole!\" Everything about Kristen reverberated hatred.\n\nI could practically see the smoke from Madison's ears, \"You ain't leaving until...\"\n\n\"There you are, Josh!\"\n\nThe female voice had a pleasant ring to it; a healthy reminder that not all girls wanting to talk to me right now were complete bitchy skanks.\n\nAs I turned, an arm hooked inside mine, and I couldn't hide my surprise when I found it to be In\u00e9s. She looked good in her business attire, this time a black skirt and white blouse combination. Ah, the life of an law intern. Still, why was she here? Touching me?\n\n\"And who do you think you are?\" Debbie's eyes narrowed in on the interloper. \n\nIn\u00e9s straightened up, her inner lawyer coming to the forefront. \"I'm his legal counsel, and I must say, the three of you are currently in violation of harassment. I could go to Campus Health Center and file a grievance.\"\n\n\"Oh yeah?\" Kristen swayed her head back and forth to make her point, \"Well, we're also going to file a complaint that he sexually harassed us yesterday, so what do you think about that?\"\n\n\"You must be referring to the incident in which he accidentally bumped into you,\" In\u00e9s countered. \"Because I personally saw what happened and have eight witnesses who will testify to the contrary... And when the School Conduct Board finds out about you pressing false charges against a fellow student, expulsion will certainly be in your future.\"\n\nKristen, Madison, and Debbie looked at each other briefly before backing off.\n\nIn\u00e9s and I watched them go before I released the breath I didn't know I was holding, \"Thanks for that.\" I took a step away; now that the coast was clear, I wanted distance so no one would get the wrong impression.\n\n\"It was my pleasure.\"\n\nI was expecting more from the woman who can give an angry Donald Duck a run for his money in terms of pure amount of words per second - and be precise in eloquence as she did it. After receiving none, I saw the slight depression in In\u00e9s as I took another step. \n\n\"Hey,\" In\u00e9s readjusted her backpack. \"How about we grab lunch together?\"\n\nDid I really want to spend lunch with her? She did kind of save me with the Axis Powers there, but I did enjoy the peacefulness of eating alone before math class.\n\n\"I appreciate the offer, but I already have a girlfriend.\"\n\n\"I know,\" In\u00e9s snickered playfully. \"Alyssa and I are friends; in fact, she's the one who told me to intervene if those three airheads gave you a hard time.\"\n\nSeveral questions came to mind after that statement: First, was I didn't even know Alyssa and In\u00e9s were acquainted, especially since In\u00e9s was a senior and Alyssa was a sophomore. Sure, I knew Alyssa didn't have experience with guys - her parents made that abundantly clear - but her other friends had never been discussed. Second, was how did Alyssa even know those girls would even bother me? I had went to tell her why I was late, but distinctly remember that conversation being put off and then forgotten. Perhaps, In\u00e9s told her since she said she saw the altercation yesterday?\n\nRegardless, In\u00e9s now piqued my interest. What else could I find out about Alyssa from her?\n\n\"Shall we go to lunch?\"\n\nIn\u00e9s smiled, \"I'd love to.\"\n\n*\n\nLunch was good; well, the conversation was, the food, not so much. I chose the hot dog because its the only thing that doesn't taste like cardboard... It's definitely rubber.\n\nIn\u00e9s was nothing like I tend to overhear in the quad. Normally, the Energizer Bunny when it comes to speaking, she was surprisingly reserved, allowing conversation to not only flow, but me to lead it - although she didn't give me any real information on Alyssa. Not one embarrassing moment or humorous anecdote to be found. Is there some sort of girl code that prevents that? ",
        "Still, I did get the impression she was hoping for more from me, a closeness I was unable to provide. The expression on her face when I didn't sit next to her, opting for a chair between us, was nearly heartbreaking. \n\n*\n\n- Hey Baby, I heard you had lunch with In\u00e9s.\n\n- That wasn't a problem, was it? She said you two were friends.\n\nI pulled out my math book as another text sounded on my phone.\n\n- No, it's cool. Just to let you know, she's got a psychological disorder, so next time you can sit next to her, hold her hand, really anything you want to do, it's all right.\n\nNow, I didn't think \"anything\" meant anything. I wasn't going to dare test that loophole. \n\n- All right. If it will help a friend of yours...\n\n- Did Charlotte ask you, yet?\n\n\"Josh?\"\n\nI looked up to see Charlotte, wearing a light blue sundress with the top half sculpting her curves in an effort to force every male eye to her expansive chest. Me, not so much. I found her baby blue eyes, curious as to what this socialite could possibly want with me. \"What's up?\"\n\n\"Um,\" Charlotte looked everywhere but me, her fingers twiddling against each other, \"I was wondering if, um, by chance, um...\"\n\nIt was kind of endearing, although I had never seen her act so shy before. \"Relax, Charlotte. Take a deep breath.\"\n\nCharlotte did with a content smile.\n\nI continued, \"Now, what can I do for you? \n\nI promise nothing bad will happen from asking a question.\"\n\nCharlotte took another breath to steel herself, \"I was wondering, if you had time, would you be willing to help tutor me?\"\n\nApparently, Charlotte was unaware of my barely passing grades.\n\n\"I'm not so sure I'm the guy to ask,\" I sighed. \"I'm barely passing myself.\"\n\n\"Yeah, I know,\" Charlotte looked dejected. \"It's just that Alyssa said I should ask you to find out if it's okay for all of us to have a tutor session together. She's normally the one I pay to tutor me.\"\n\n\"You know Alyssa?\"\n\nCharlotte perked up, genuinely excited I brought up Alyssa's name. \"Alyssa said since she gets home late from her work in the lab, she didn't want to commit to a Saturday anymore without you, but if you are there as well, it wouldn't be an issue.\"\n\n\"One moment,\" I quickly texted Alyssa.\n\n- You tutor Charlotte Westgate?\n\n- Every other Saturday at her place, but I cancelled last weekend to be with you. I'm not available to you as much as I'd like to be, so I didn't want to take up a Saturday tutoring her without you. She really needs the help and pays well. Interested in a study session? \n\nNot really. But this was also a job for Alyssa. Eh, maybe I could stand it for one day... See if I can move that C+ to a B-.\n\n- I suppose I'll go... And don't worry about our time together. Sometimes, I feel I'm dominating all your free time. I didn't even know you were friends with In\u00e9s or that you tutored Charlotte.\n\n- No worries, Baby. You're worth it. What about her other question?\n\nOther question? I turned my attention back to Charlotte, \"I guess we're on for Saturday.\" I looked at her curiously, \"Alyssa also mentioned there was something else?\"\n\n\"Yeah,\" Charlotte's head shied away again, \"I wanted to invite you and Alyssa to my twentieth birthday party the following Saturday. Really, it's just me, my four closest friends and my parents for an elegant dinner at their home, but afterward, we get to go out and do whatever. Alyssa said she'd come if you did.\"\n\nWow, I didn't think Alyssa was so well connected. Her female friends are a who's who of State University... And who am I to get in the way of my girlfriend's friendships? I quickly texted Alyssa.\n\n- A party sounds fun, though I'm not sure I can do elegance well, even if it is just for dinner.\n\n- Great, it's a date... and don't worry, I've got you covered, as always. \n\n- What would I do without you?\n\n- Don't sell yourself short; your the best. \n\nAnd since you're the best, I have a present waiting for you when you get home. I'll be home around six, so don't feel you have to wait for me to unwrap it.\n\nA present? For me? How intriguing...\n\n\"Sorry about that delay, Charlotte, I just needed to confirm with Alyssa. I'd be delighted to share your special day with you.\"\n\nCharlotte's smile went wide and bright. She excitedly gave me a hug, \"Thank you.\" Before she pulled away, she briefly nuzzled her head into my neck as she rubbed somewhat lovingly against me.\n\nIt had been an odd sensation, but since it lasted just a mere moment, I easily dismissed it.\n\n*\n\nI've been robbed!\n\nOkay, it wasn't quite like that. But it certainly felt like it. \n\nI stared inside my apartment in true shock. I even double checked the number on the door just to make sure I was in the right place, but alas, it really was my apartment. I couldn't believe my eyes. Nothing was where I or Alyssa had left it. The empty pizza box on the counter - gone! The crumbs on the floor - swept away! The smell from the kitchen sink - vanished! - along with the dirty dishes! Even Aragog, the spider that made a home in the corner above the television, his cobweb abode - knocked down! Poor Aragog had been evicted! Oh, the humanity...\n\nWas this Alyssa's surprise?\n\nI was truly in awe as I stepped inside, sincerely afraid of tracking dirt onto the carpet. I mean, the linoleum countertops actually sparkled. Who the hell could have done this?\n\nI was brought out of my amazement by the sink in the bathroom turning on. \n\n\"Hello?\" Who the hell was in my apartment?\n\nThe water immediately stopped and out of the bathroom stepped a wet dream. She was wearing a maids outfit unlike I had ever seen; the top was a black, short sleeve, see through with white lace trim that extended to a shelf bra just underneath her breasts... leaving them completely exposed. The bottom skirt, if you can call it that, matched it perfectly in pattern and it didn't cover anything at all. It hugged her waist and fell no more than three inches down. To finish the ensemble was a pair of thigh high black fishnet stockings that stretched down to a pair of black, shiny stilettos, which would make her seem intimidating if her unmentionables weren't uncovered.\n\nI'll be honest... As much as I was giving myself credit for not looking at other girls, my resolve had left my body. My eyes just stared in wonder.\n\n\"Welcome home, Master,\" the girl sat on her haunches on the floor, her head bowed at the sight of me.\n\nI shook my head at the words, the movement waking me from my reverie. Blinking twice, I finally allowed myself to see the rest of her - that red hair - \"Lacey?\"\n\n\"I hope you approve of my work, Master,\" Lacey stayed perfectly still.\n\n\"What the fuck is going on here?\" That was about the only way to phrase my consternation. \n\n\"Oh no, you don't like it.\" Lacey began to tremble and I could hear the crying whimper in her voice, \"Please Master, I promise I can do better. Please don't get rid of your slave.\"\n\nI had no idea what she was blabbering about. I took a deep breath to compose myself. \"Lacey, just tell me how did you get in here?\"\n\nLacey lifted her head slightly, \"Mistress Alyssa.\"\n\nOkay... I didn't even want to delve into the Master/Mistress bag of worms yet. \"And why would she do that?\"\n\n\"So I could clean My Master's apartment.\"\n\n\"And your... outfit?\"\n\n\"Uniform,\" Lacey quickly replied. \"If I did a good job, Mistress said this would entice you to reward me.\" She then lowered her head all the way to the ground, \"But I failed you Master, please have pity on your poor slave. I promise I'll do better!\"\n\nI ran. I darted into the hallway, slamming my front door as I did, and bolted down the stairs. It wasn't until I was two blocks away from Isaac's fraternity that I stopped running. It was only then that I realized I shouldn't have ran at all... It was my apartment... or was. After today, I didn't even recognize the place. Whatever, if Lacey robs me of more than the garbage she already had, she wouldn't get anything of value. I am a broke college student, afterall. I had to sort this out. What is Alyssa trying to do?\n\nThe simple answer to that question would be to straight up ask Alyssa. That would be the easiest way to cut through the bullshit. But I wanted to collect my thoughts first.\n\n*\n\n\"Sounds like a honey trap,\" Isaac proceeded to punch me to the ground.\n\nI quickly got up. \"What's a honey trap?\" I threw several kicks at him followed by a combo of punches. \n\nIsaac dodged every attack. \"It's when your girl tests her Honey's loyalty by sending in some hot piece of ass to try to trap you... and when you fall for it, your in deep shit.\" Isaac countered my attack with his special move, a fireball shot from his hands that knocked me on my ass.\n\nThe television loudly declared K.O. as I threw my controller into the soft couch cushion. \"Every time, damn.\"\n\nIsaac smirked as he leaned back into the recliner, \"You know you can't beat me.\"\n\n\"Whatever, this time I'm not holding back.\" I picked the character I was best at playing, \"So what should I do?\"\n\n\"I wouldn't go back until Alyssa's there so this other girl can't say you did something, and then I'd have a serious conversation on why she thought this was okay to do in the first place. A relationship is first and foremost based on trust, my friend, and it sounds like she don't trust you.\"\n\nK.O.\n\nI shook my head, \"All right, this time I'm going to be serious.\" I picked another character, this time without a glimmer of doubt I was going to get my ass kicked. \"You mind if I chill here for awhile?\"\n\n\"Not at all.\" Isaac laughed, \"Just don't think I'm going to take it easy on you because your having girl problems.\"\n\n*\n\n\"Did you like your surprise?\"\n\nI wasn't sure how to answer that; at least not over the phone in front of all the frat guys that congregated in the room to be the next loser to take on Isaac. Good to know I'm not the only guy who can't beat him. \"I went to play video games at Isaac's.\"\n\n\"Sounds like fun,\" I heard the smile in Alyssa's voice. \"Take your time, you deserve it. My surprise and I will be waiting when you get back.\"\n\n\"So you're off now?\"\n\n\"In a minute, but yeah, I'll be home soon.\"\n\n\"All right, see you soon.\"\n\n\"Love you, Baby. See you soon.\"\n\nI left immediately. I may walk to school, but Alyssa drives. She offers me a ride, but that would require me to get up at the ass crack of dawn; screw that. So I hurried home to try and get this sorted out. Alyssa's the best girl I've ever been with and I hated this cloud of uncertainty.\n\n*\n\nI arrived just as Alyssa did, surprising her with my appearance as I rounded the large red maple tree. But once seen, her eyes lit up in excitement.\n\n\"Hey Baby,\" Alyssa ran across the lawn and threw her arms around me, meeting me with a sweet kiss. \"You didn't have to hurry home on my account.\"\n\n\"Yeah, I did,\" My voice echoed the severity I was feeling. \n\nAlyssa's hand caressed my cheek, \"Baby, what's wrong?\"\n\n\"I came home for a minute after school.\"\n\nAlyssa's smile was of curiosity, \"Wow, I'm impressed. I thought after seeing your surprise you would still be in bed when I got home.\"\n\nMy eyebrows raised, \"So it was a honey trap.\"\n\n\"A honey trap?\" Alyssa thought for a brief moment about the phrase. \"Oh no,\" Alyssa shook her head before hugging me fiercely, \"Baby, I'd never do that to you. Ever.\" She kissed me again, more sensually this time. \"I love you too much to be some kind of conniving bitch like that.\"\n\nThat just proved the difference in our intellectual prowess. What I needed to be clarified by Isaac, Alyssa spent half a heartbeat figuring out what \"honey trap\" meant.\n\nI was taken aback, absolutely perplexed. \"But why?\"\n\n\"What do you mean?\" Alyssa tilted her head. \"I told you that I was working on a way for you to not have to clean or do the dishes, didn't I?\"\n\n\"Huh...\" Yes she did. The very first day we spent together, in fact. But I knew I would never make her do everything, that wouldn't be fair; and then we both slacked off on cleaning. Still, that didn't explain...\n\nAlyssa giggled at my confusion, \"And what's the point of having a live in maid if you can't fuck her whenever you want?\"\n\nMy mind was completely blown at what Alyssa was saying. Is this real? \"So, it's not a trap? And Lacey is...\" I couldn't complete that sentence. \n\n\"All yours,\" Alyssa kissed me with a lovers kiss, so deep, so erotic, \"I hope you don't mind me playing with her sometimes as well, though.\"\n\nHoly Shit.\n\n\"So, just to be clear, you're saying you want to share Lacey?\"\n\n\"Baby, if you want me to spell it out for you, I will, but,\" Alyssa then started stroking my shaft, \"Wouldn't you rather come upstairs with me and fuck your slave?\"\n\nI couldn't get up the stairs fast enough. My wonderful, fantastic girlfriend just brought home Lacey Hart for me to do with as I please. How many depraved dreams had I had about her and now...\n\nI couldn't believe my eyes as I opened the door. Lacey hadn't moved.\n\nAlyssa was also impressed, but for a much different reason. \"Well done, Slave. The place looks amazing.\"\n\nLacey lifted her head, her eyes red and puffy from tears, \"Thank you Mistress, but I'm afraid My Master did not approve.\"\n\nAlyssa stayed firm, \"That is what makes your Master great. He demands the very best because he deserves the very best.\"\n\n\"Yes, Mistress.\"\n\n\"Now stand up and let your Master inspect his property.\"\n\nLacey struggled to stand, her legs wobbling due to the hours she had spent in the same position. \n\nI circled her form, admiring Lacey's luscious beauty. It was like a dream having her like this. It all seemed to stop when I met her eyes. \n\nYou can tell someone they are a Master but does that automatically make him one? My nerves began playing against me; I needed to converse with Lacey, to feel a connection. This can't be real. Dreams are not reality. \"Lacey...\"\n\n\"Baby, let me take care of this for you.\" Alyssa had interrupted me, her voice a whisper in my ear. She engulfed my body from behind, her arms roaming all around my chest before her hands sunk lower, deftly unbuttoning my jeans and pulling the zipper. Within a mere moment, the denim along with my underwear pooled on the floor. Her hand then delicately started massaging my manhood, encouraging its hardness with a dedicated touch. \n\n\"Slave,\" Alyssa continued, addressing Lacey but also still next to my ear, as if she knew I not only needed to hear what was coming, but to understand it. \"What made you a slave?\"\n\n\"Nothing, Mistress.\"\n\n\"Explain,\" Alyssa moved to a feather like stroking of my erection.\n\n\"A slave is not made, Mistress; we just are. I cannot help my feelings of servitude just as I cannot choose to stop breathing. It is who I am.\"\n\n\"And what is your name?\"\n\n\"My name is Lacey to the outside world, but to My Master and Mistress, it is Slave. I am owned and that name makes me feel loved by My Master and Mistress. If called anything else, I know I truly messed up and fear getting discarded.\"\n\n\"And how did you feel before you found your Master?\"\n\n\"Miserable.\" Lacey's answer was rapid quick and her tone seemed to echo the seriousness of her answer. \"I was nothing more than a sheep in wolves clothing. I was cruel to everyone, acting out because I couldn't be my true self... and then I found My Master.\" A tear began to cascade down her cheek.\n\n\"And why your Master?\"\n\n\"My Master apologized without groveling, but he was so much more than that. My Master was strong in his replies and he didn't look at me lustfully, in fact, he ignored my body. My looks could not break My Master into a puny pathetic quivering little boy. That is why My Master is My Master.\"\n\n\"And now that you've found your Master, what is your goal?\"\n\n\"My only goal is to proudly serve My Master to the utmost as that is what My Master deserves.\"\n\n\"And when you do a good job, what would you prefer for your reward to be?\"\n\n\"Anything that My Master chooses to give me would be suffice, but to answer Mistress' question,\" Lacey glanced down to my throbbing erection. \"My Master's ultimate showing of ownership of his slave is what I desire.\"\n\nAlyssa reached over and took Lacey's hand, guiding it to my shaft, \"You should personally get to know your ultimate reward.\"\n\nLacey shivered as she caressed and petted my dick like it was a deity.\n\nAlyssa whispered again in my ear, \"I do hope you now understand how she feels. Not treating her like a slave is not a sign of equal partnership, but a show of disrespect, a complete disregard to her feelings.\" \n\nAlyssa was playing on all my perceived feelings about women - my thoughts on how to treat a woman, the talking and being in a relationship before sex, and then turning them into truth. She had the conversation for me, allowing the acceptance of a relationship - that of one of Master and Slave.\n\nHer voice then became more pronounced and authoritative, \"Slave, turn around and bend over the bed... Now spread your legs and show your Master the pussy he owns.\"\n\nLacey had did as instructed, bending over and spreading her legs. Her hands then came from between her legs, each set of fingers opening up her pussy in the most obscene way... It was glistening... glistening so much that her juices were starting to flow down her legs.\n\nI was in a trance as Alyssa walked me the couple steps between myself and Lacey by my erection, as if I was a lost boy in need of water. My mushroom head began tickling at her entrance.\n\nAlyssa stood behind me, her breath once again in my ear, \"You conversed for her feelings and you're now in a relationship. All that's left for you to cement these truths for you is...\" She nudged me forward ever so slightly, waking me out of my daydream and into my new reality.\n\nI looked down at Lacey and decided to tell her what she wanted to hear, \"Slave, you really did do a fantastic job and you deserve a reward.\" \n\nLacey nearly came from my words alone. I didn't hesitate and slammed into her, full throttle, sending her over the top. I didn't let her calm down, in fact, her reaction made me redouble my efforts in my aggression. \n\nThrust after thrust of unrelenting force afflicting Lacey's pussy with a pounding she craved. I wanted - needed - to prove my status to her with an assault of sweet veracity.\n\nLacey was nothing more than a rag doll, her pussy transitioning from cum to cum to cum in a never ending cycle of pleasure. Her voice had went from pronounced versions of the word \"yes\" to a string of blabbering \"fuckfuckfuck\" to a simple elongated gutteral moan. Her head laid on its side, her red hair splayed everywhere, her eyes rolled into the back of her head, and her tongue was lying out. \n\nThe sight alone put me to the edge. I went to pull out before Alyssa pushed me back in to the hilt, holding me there.\n\n\"Don't limit yourself; she's your property now.\"\n\nI came... Hard. I shot forth my seed deep within Lacey, my voice straining for any syllable to cling to as the euphoria swept over my sensations. \n\nWhen I came, it triggered Lacey. Her eyes went wide and she screamed like a banshee as the ecstasy consumed her very soul, ravaging her body with spasm after spasm of luxurious gratification.\n\nWith the knowledge that I was in the throws of carnal bliss, Alyssa held tight against my back as she too, also came. She braced her body tightly against mine and shook with delight, her knees buckling from the assault.\n\nI panted as my arm embraced Alyssa, doing my best to not let her fall down. It took a few moments, but her breathing allowed her to catch her breath and then her balance.\n\n\"I guess my hypothesis was correct,\" Alyssa still held tight our embrace. \"I really do have a fetish for you cumming.\"\n\nI chuckled, \"Well, at least it's not whips and chains; I'm not sure I would have it in me to punish you even if it is for pleasure.\" I then stared at Lacey, half on the bed, half off, and out cold. \"Wow, I've never done that to a girl before.\"",
        "\"Just means your cock is awesome.\" Alyssa smiled up at me, \"I can personally attest to that.\"\n\nI glanced down at my girlfriend, \"You sure you're okay with this?\"\n\nAlyssa giggled, \"You do understand that I set this up for you, right? Just you asking that proves I will always be first, right by your side.\"\n\n\"Always and forever, Sunshine.\" I leaned in and kissed Alyssa lovingly, squeezing her tightly one final time. \"I suppose if I'm her Master, I need to take care of this.\"\n\nAlyssa smiled, \"I wouldn't have allowed you to take on her needs if I didn't think you were capable.\"\n\nI picked up Lacey in my arms, feeling a little guilty that it gently woke her.\n\n\"Master,\" a tear escaped Lacey's eye, \"I need you to know this is the happiest day of my life. I promise I'll be the best for you for the rest of my life.\" \n\n\"I know you will,\" I carefully laid her down on the bed, covering her with the blanket. \"Rest now, My Slave.\" I kissed her sweat matted hair.\n\nLacey smiled warily before succumbing to sleep.\n\nI took a breath before looking around my apartment. It seemed awfully small with three people. \n\n\"Yeah, I know,\" Alyssa laughed seemingly reading my mind. \"You're either thinking about dinner or that we need more space.\"\n\nMy stomach growled something fierce, proving Alyssa right on both accounts.\n\n\"Just leave finding a suitable place to the women in your life. You know how picky we can be. I'm working on it... And as for cooking, Lacey and I already talked, and no, she can't cook. She's worse than me.\" \n\nI chuckled, \"What about me?\"\n\n\"No one is worse than you, Baby. You could burn cereal.\" Alyssa shook her head, \"But I'm working on it.\"\n\n\"What? Are you taking classes or something?\"\n\n\"Or something, I guess,\" Alyssa smiled. \"How about Chinese tonight?\"\n\nI nodded my approval as I went to stand up the coffee table. I then folded out the bed from the couch. It had only been used once, by Isaac, when he got too drunk to make it back to the fraternity. Every other time, he just crashed where he passed out - including once on the toilet. Still, there was no way three of us would be able to share my bed. Alyssa and I only fit because she was so petite.\n\n\"Oh,\" Alyssa exclaimed after ordering food as she saw what I did. \"I didn't know that folded out. \"Slave will appreciate that. She originally was going to sleep on the couch.\"\n\n\"Well,\" I laughed, \"She still will be.\"\n\n*\n\nThe light was trickling through the window and crossing the floor with deft precision before finally smacking me in the face.\n\nCurse the sun. \n\nThe mornings, however, always are better when snuggling with a woman. My eyes peeked open, first the left and then the right before my body stretched slightly with a yawn.\n\n\"Good morning, Master.\" \n\nYes, the red hair was a dead giveaway that it was indeed Lacey lying next to me... in the most uncomfortable manner.\n\nI scooted up a little, propping myself against the headboard, but more importantly, I shfted as much as I could to the left to give Lacey a little more room so her butt would not be completely hanging off the bed. \n\n\"Good morning, Slave.\" I eyed Lacey remarkably, \"How did you have time to have your makeup and hair done already?\"\n\nLacey brightened at her choosen name. \"A good slave always looks her best for her Master.\" Her head then shied down, \"Forgive my assertion, but you looked like you wouldn't mind someone warm to cuddle against you after Mistress left.\"\n\n\"No,\" I smiled. \"It was nice waking up with you in my arms.\"\n\n\"May I serve you breakfast in bed? I'm afraid I'm not much of a cook, but I can try. Unfortunately, we are out of milk for cereal. I'm sorry Master, I'll go to the store to get some if required.\"\n\n\"No, I'll be fine. Maybe a slice of toast when I get up.\"\n\n\"I'll get it,\" Lacey went to act on my wish immediately.\n\nI grabbed her arm, \"After I get up.\" \n\nLacey smiled seductively, moving from laying on her side to between my legs, her breasts grazing against my sheet covered shaft. \n\n\"What are you doing?\"\n\nLacey licked her lips sensually, \"Mistress said I should personally get to know my ultimate reward.\"\n\nPlayful minx. I smiled, \"Do you have any classes today?\"\n\n\"Master, I,\" Lacey tensed up.\n\nI glanced at her curiously, \"What is it, Slave?\"\n\nLacey cringed, but still answered, \"I'm afraid I wouldn't do too well, now. I finally have all that I dreamed of; truly happy in my life and everything else seemed to just melt away. Family, friends, school - none of it matters anymore. Honestly, it all seems so foreign now... And I know I'd get in trouble with how I'm dressed. So, after discussing it with Mistress, it was decided that my professional occupation would be to simply be your slave. But if you demand it, Master, I will re-enroll.\"\n\n\"You dropped all your classes?\" I was stunned. I wasn't sure what else to say. Lacey had needs, obviously, but she just gave up on college to be a slave full time.\n\n\"Yesterday morning, Master.\"\n\nI took a breath to collect myself... I suppose if Alyssa's okay with it - she did say she had a plan for everything - I can't possibly object... on one condition.\n\n\"And is this absolutely, without a shadow of a doubt, what you want?\"\n\n\"More than anything.\" Lacey's eyes echoed the same.\n\nI nodded and then thought about what was said, \"You said you'd get in trouble because of how you dressed?\"\n\n\"A slave only wears the uniform chosen by her Master. Mistress bought me ten of these to please you and I can feel that it is working.\" Lacey's hand began massaging my manhood.\n\n\"And you would have gone to get milk wearing that?\"\n\n\"If My Master required milk, yes.\"\n\n\"And what about family and friends? Won't they worry about you?\"\n\n\"Master and Mistress are my family, Master.\"\n\nI looked at her sternly... or tried to. It was kind of hard to play the role of disciplinarian when you're getting a hand job.\n\nLacey giggled, \"Okay, Master; I recently made friends with a couple of girls I am proud to call friends, maybe even more, as they are supportive of my feelings and wishes. The girls I had hung out with prior, the ones you saw me with, aren't really friends... a friend is not someone willing to stab someone in the back like they did to Patricia.\"\n\n\"They seem to care about you,\" I spread my legs even wider to give Lacey better access.\n\nLacey pulled the sheet off of me, her hands now touching my flesh intimately. \"Not really; I was the one who drove us everywhere because I own a corvette. It made them feel high class. Now that I'm gone, their probably in Debbie's little Ford Focus. If they are bothering you, I'll call one of my friends and see what they can do.\"\n\nHonestly, I wasn't all that worried about Kristen, Madison, or Debbie. I had done nothing wrong. But the car surprised me, \"You own a corvette?\" \n\n\"I used the inheritance money from my parents to pay for school and buy a car.\" Lacey licked the mushroom tip, lapping up the little precum as she did. \"Tasty.\" She then smiled up at me, \"Master can drive it, however, it's at my sorority right now.\"\n\nPerhaps, but I was more concerned with the word inheritance in that response. I stopped Lacey from what she was doing, staring at her through her lovely emerald eyes, \"You were right, Slave. Alyssa and I are your family now.\"\n\nLacey beamed, taking a breath to hold back the tears. \"Master, you are so good to me.\" She glanced down at my erection before looking back at me. \"And now it's my turn to be good to you.\"\n\nLacey lowered her head, her eyes still emblazoned on me, her ruby red lips parting, tantalizingly as her tongue stretched out brushing the underside of my shaft.\n\nI guy could get used to this.\n\nLacey continued, slowly, seductively using her tongue to dance and then offer light kisses to her treasure. I fell into the pillows with a relaxed sigh. It was just by chance I happened to glance at the clock.\n\n\"Is that really what time it is? Shit, I'm going to be late for class.\" I went to move off the bed before being stopped by three words.\n\n\"Face fuck me.\"\n\n\"What?\" It was definitely not an 'I didn't hear you?' what as it was a 'did I hear you correctly?' what.\n\nLacey stared at me sincerely, \"Do you want to go to school like this?\" Her hand stroked my erection just to make sure I knew damn well to what she was talking about.\n\n\"Not really.\"\n\nLacey lowered her mouth, leaving only a paper thin gap between herself and my manhood. \"Face fuck me. It'll be quick for you and I'll be happy My Master could find pleasure with his slave. Besides,\" Lacey dropped her head, taking all that I was down to the base before coming back up. \"I can handle it.\"\n\nI paused just a moment, staring into the pleading eyes of Lacey... she desperately wanted this.\n\nBoth my hands grabbed the sides of Lacey's head as I thrust upward... Damn, that felt good. I pulled her head closer to me as I raised my hips again, starting a debase rhythm of quick movements into her willing mouth.\n\nWith each piston, I felt spittle from Lacey onto my groin, her tears began to streak her face and into my pubic hair. But somehow through it all, she was moaning around my cock. \n\nThe vibrations of Lacey's depravity echoed through my being as I assaulted her mouth and down her throat. I was building my orgasm at nearly the speed of light, nothing but the wet feeling existed. \n\nI began to feel like I was in a daze, a constant fog of pleasure as I came in a torrent, pulling Lacey hard against my body and holding her head motionless as jet after jet shot forth, forcing my captive to swallow. \n\nAs I was finishing, I released Lacey's head and she gasped for breath with a couple coughs as one final spurt hit her in the chin. Her makeup was ruined; mascara lines marred her cheeks and her red lipstick was destroyed, but her smile told me the truth about the encounter... She loved it.\n\n\"Master, you have no idea how much I just came from you using me,\" Lacey's smile was an exuberant mess. \"Now hurry up, Master; you are going to be late.\"\n\nYes, it was a harsh reminder I had to leave this beauty after such a display... I rushed to the bathroom, managed to work on my hygiene, get dressed and was to the door in only four minutes.\n\n\"Wait, Master,\" Lacey ran over from the kitchen area. \"Here's your breakfast. \"\n\nI smiled. Lacey had remembered my toast. \"Thanks, Slave... You still got some of my... you know on your chin.\"\n\n\"I know,\" Lacey smiled as she wiped at it with her hand. \"I wanted to make sure you got your breakfast before you left.\"\n\nLacey then did something I did not expect. She used my cum like perfume, rubbing my essence into the skin on her wrists. \n\nIt felt wrong to leave it like this after what just happened. I leaned in, surprising Lacey as my arm wrapped around her waist, pulling her close. My lips brushed against hers before parting. It was a short, lovers kiss to show how much I cared.\n\nAs I relinquished the connection, I still held Lacey close, \"Slave,\" I used her prefered name just to reinforce she will never over take Alyssa in priority, despite an affectionate kiss. \"I'll let you go over the particulars with Alyssa, but I do want you to have a couple outfits so you can go out into public; no one should be couped up inside an apartment all day, but mostly because what if I want to take you with us when Alyssa and I go out?\"\n\n\"Okay,\" Lacey nodded. \"And Master, I know I will never replace Mistress. I wouldn't even want to; she's my family. I am your slave, happy in my life of devotion to the perfect Master.\"\n\n\"And you do it well,\" I smiled, just now remembering my backpack. \"Well, I'm off.\"\n\nLacey put a hand to her mouth, cherishing the new memory I had given her, a content little smirk pursing her lips. \"Have a great day, Master.\"\n\n*\n\nI finished my breakfast by the time I exited the apartment complex. Honestly, I didn't feel like running. I'll just miss the first few minutes of my Intermediate Design and Programming for the Web class and hope not to feel the wrath of Professor Buckley too much. Besides, it was a great spring day; sun shining, a light breeze, I could stand a refreshing walk after face fucking Lacey.\n\n\"Hi, Josh.\"\n\nI had taken two steps toward campus, when a voice called out from behind the red maple tree.\n\nI glanced over my shoulder to see In\u00e9s giving off a soft smile. \"I was waiting for you in hopes we could walk to school together?\"\n\nI looked at In\u00e9s curiously, \"I didn't know you even knew where I lived.\"\n\n\"Well, Alyssa is my friend,\" In\u00e9s snickered as she had emphasized the word 'is'. \"So?\"\n\nWhat Alyssa asks of me, Alyssa gets. That's the very definition of pussy whipped, right?\n\nI held out my hand as an invitation, \"Always.\"\n\nIn\u00e9s giddily ran over and accepted the offering. At just our touch, she let out a relieved sigh. \"Better.\"\n\nWow, In\u00e9s really did have some issues. But curiously, as soon as we touched, she was fine. All it took was the gentle reassurance from someone and she was her typical capable woman... without her normal incessant need to dominate a conversation. Maybe her insecurities are why she always had talked so much? Regardless, it was always off putting which made connecting with someone difficult, male or female. I was now her surrogate.\n\nAnd the conversation was pleasant, just like yesterday. Now, I wouldn't say it's like how it is between Alyssa and I - the humor flows between us as we're talking and we have so much in common - but I could converse with In\u00e9s without being bored. It was nice.\n\n\"Thanks for that,\" In\u00e9s took a deep breath, \"I now feel like I can take on the day.\"\n\n\"Glad I could help.\"\n\nIn\u00e9s stepped forward, and went for a kiss. It caught me off guard and the best I could do was turn my head to avoid the lip to lip contact, her kiss landing on my cheek.\n\n\"Sorry,\" In\u00e9s cringed as she stepped away. \"I just wanted to thank you properly.\"\n\n\"Remember, I am your friends boyfriend.\" \n\nI stared at In\u00e9s in warning, \"From now on, no thanks required, okay?\"\n\nIn\u00e9s merely nodded as we went our separate ways.\n\nI only got ten feet before I stopped in my tracks. In the distance, under the white foliage of the dogwood tree was Charlotte, her golden curly locks in her signature sundress, yellow in color today, and light pink lipstick; it was unmistakably her... and she was crawling around on the ground.\n\n\"Did you lose something, Charlotte?\"\n\n\"Josh,\" Charlotte looked up at me with surprise. \"Yeah, I lost an earring.\"\n\nI knealt down to assist... Apparently, I wasn't making it to my first class today. \"What did it look like?\"\n\n\"It's several diamonds placed in a hoop pattern set to gold.\"\n\n\"So it's shiny.\" I offered a comforting smile. \"We should be able to find it.\"\n\nI wasn't having any luck. It didn't help that Charlotte rubbed up against me like a cat would a post several times during the search, but she finally drifted away. \n\nI glanced over my shoulder to see Charlotte briefly tug at her ear before her hand went to the ground. She then looked at me with a nervous expression, \"I found it.\"\n\nAm I really that scary? I moved from my knees to a sitting position, \"I'm glad you did, because I don't think I was being any help.\"\n\n\"Nonsense,\" Charlotte then crawled over to me instead of standing, giving me an impressive view down her yellow dress. \"You know how many people walked by before you did? And not single person offered to help, let alone ask what I was doing.\"\n\n\"Well, that's a shame.\" I kept my eyes entranced into her baby blues... I have plenty of cleavage to keep me occupied at home. \n\nCharlotte laid down, her head on my leg, \"Something tells me that I know you would always take care of me.\" Her head brushed lovingly against my thigh before she sat back up. \"Tell Alyssa she nabbed a good one.\"\n\nWith our scavenger hunt now over, I stood and offered my hand to Charlotte, \"Will do.\"\n\nCharlotte greedily accepted my gesture, allowing me to pull her up. \"And thanks for the help, Josh. I appreciated it.\"\n\nI nodded as I slung my backpack over my shoulder and walked to my neuroscience class. No way was I missing that class.\n\n*\n\n\"So why didn't you kiss In\u00e9s?\" Alyssa's eyebrows were raised as she walked up from retrieving our graded homework from the teacher's assistant. She meticulously filed her assignment into the proper compartment of her organizer, and then folded my copy and put it into my book.\n\nOur organization differences is just more proof why I'm a C+ student and Alyssa is at the top of our class. \n\nBut what was she trying to imply? \"You mean I'm supposed to randomly kiss other girls? You do understand we're in a relationship, right?\"\n\nAlyssa giggled... it's always adorable. \"Yes, we are in a relationship. A great one, in fact. But, your thought process has one minor flaw.\"\n\nMy confusion was etched onto my face, \"And that is?\"\n\n\"I told you that you could do anything with her.\" Alyssa tilted her head with a knowing smirk, \"Besides, what's the difference between face fucking your slave and a little peck on the lips with In\u00e9s?\"\n\nMy, someone was informed. \"Do you have some sort of secret spy network or something?\"\n\n\"What? Didn't I tell you I hacked all the computer systems and your phone so I can stalk you religiously?\" The seriousness echoed on her face.\n\nI stared at Alyssa wide eyed.\n\nAlyssa broke in a fit of laughter, \"I'm kidding, geez; you should have saw your face.\" She shook her head. \"You do know us girls tell each other everything, right? It's as fundamental as helping someone find an earring.\"\n\nIt wouldn't have surprised me if she was capable of such technological prowess. \"You really had me there,\" I laughed.\n\n\"And you still haven't answered my question.\"\n\nOh yes; back to that. \"Alyssa, I'm committed to you...\"\n\n\"And Lacey,\" Alyssa interrupted. \n\n\"And Lacey,\" I deferred. \"But...\"\n\n\"So Lacey and I are fuckable, but In\u00e9s isn't?\"\n\n\"I didn't say that.\"\n\n\"So you want to fuck In\u00e9s?\"\n\n\"Huh?\" I sat nearly slack jawed. \"How the hell am I supposed to win against you?\"\n\nAlyssa's eyebrows raised, \"Didn't anybody ever tell you a woman is always right?\"\n\nSo the idiom goes. Moving along... \"And how did we get from kissing In\u00e9s to fucking her?\"\n\nAlyssa snickered, obviously thoroughly enjoying herself. She leaned over and put her arms around my neck before she gave me a tender kiss, \"Baby, I am devoted to you, heart and soul; and whatever you want, I want to give it to you. You can't tell me you don't have a thing for my friends.\"\n\nNo use denying the past, but things are different now. \"Had a thing,\" I clarified. \"You have changed everything.\"\n\n\"That's sweet,\" Alyssa smiled. \"But Baby, now you are ignoring two key points.\"\n\n\"And those are?\"\n\n\"My friends need you.\" Alyssa's voice became an emotional plea, \"Lacey would have ended up married to a guy who either didn't understand her needs or someone who would have taken advantage of her feelings. She would have been trapped and miserable. In\u00e9s, on the other hand, needs someone as an emotional crutch. She is buried in anxiety with no one to help dig her out. You can be a savior to both of them, and as my friends, I want to ensure they are cared for.\"\n\nOkay, this is now making some sense. I nodded my understanding, \"You said there were two key points?\"\n\nAlyssa leaned in, kissing me seductively, before whispering, \"Baby, you have realized I'm a whore for you, right?\"\n\nI saw some tendencies, sure, but I wouldn't have classified it like that to her. \"Where are you going with this?\"\n\n\"The second, and the most important point, is that I want this for you. I am so devoted to you, so much of a whore for you, I get off on making your dreams a reality. Fuck, I even came when I read Lacey's text about what you did to her this morning. My orgasm was so prominent, I had to bite down on my own arm to stifle the moan. Damn, that was hot.\" Alyssa sat down and opened her text book as Professor Tisdale arrived. \"Oh, and we're going out to dinner tonight. I feel like eating some food that actually tastes good, so let's meet at six thirty at Shenanigan's Steakhouse. Lacey will give you a ride.\"",
        "\"Did you discuss a going into public outfit for her?\"\n\n\"It's taken care of, Baby.\"\n\nI laughed, \"Aww, and I was so looking forward to left over pizza tonight?\"\n\nAlyssa rolled her eyes. \n\n*\n\nI won't lie; driving my first sports car was an eye opening experience. Barely pressing the gas pedal and we took off in a blaze. It took the entire drive to the restaurant to get used to how fickle the controls were. I am stunned I didn't get pulled over. Now, was it truly because of my inexperience? Or was it because I was distracted by the insane beauty next to me? \n\nLacey was dressed in what were her old clothes; a green mini dress that matched her eyes with the hemline barely covering her womanly charm while the matching top, well, let's just say her aereolas peeked out over the fabric... and I can personally attest that she had nothing on underneath. I had been used to seeing everything about this woman in her maid uniform, but there is something mysterious about teasingly hiding her assets. I had a hard time looking away, and it didn't help that she kept her hand on my upper thigh for the entirety of the drive.\n\nSeeing what Lacey was dressed like, and already knowing that Alyssa was dressed similarly, as was her now new custom, I went with a black button down shirt and jeans. Although, with all of Lacey's cleavage showing, I wish that I was in something more comfortable. \n\nWhen we arrived at the restaurant, I stopped Lacey from opening her door, and instead did it for her.\n\n\"This is a first, Master,\" Lacey smiled as I held out my hand.\n\n\"It won't be the last,\" I opened my arm and Lacey hooked hers through it.\n\n\"Your making your slave wet, Master,\" Lacey cooed as she leaned against my arm.\n\n*\n\nAs soon as Lacey and I were sat at a table in the back corner, I stood at seeing my girlfriend enter the restaurant... and she wasn't alone. In\u00e9s was only a step behind, wearing a nice blue blouse and matching skirt, far more conservative in her appearance compared to the other females that she was going to share the table.\n\n\"I see we have a guest,\" I leaned in and kissed Alyssa.\n\nLacey had been sitting next to me, but as Alyssa came over, she switched to the other side of the table with In\u00e9s sitting across from me against the wall.\n\nAlyssa smiled as she sat next to me, \"She was having an episode, so I invited her to join us for dinner.\n\nIn\u00e9s' head shied down, but her eyes still found their way to mine, \"Is it okay that I came? I really don't want to be a nuisance during your dinner.\"\n\nI offered a comforting smile while I extended my hand across the table, \"You could never be a nuisance.\"\n\nIn\u00e9s greedily accepted my offering.\n\nThe three friends dominated the conversation at dinner. Lacey was still gloating about how overjoyed she was in her life; her freedom to now be herself, while Alyssa offered a little insight into the project her lab was working on, and finally In\u00e9s finished with not only the workload at school, but her boss at the law firm seemed to want to get as much free labor out of her as he could. She had talked to several other interns there and she was doing triple what they were. \n\n\"That sounds rough,\" I lamented, but mainly showing I was actually listening, though not really participating. \n\nAlyssa took an irritated breath for her friend, \"And that's not even counting your coursework and family pressure.\"\n\nI glanced curiously at Alyssa and she looked at her friend so my attention turned back to In\u00e9s.\n\n\"You should tell him, In\u00e9s,\" Alyssa gave a comforting smile. \"It's okay.\"\n\nI almost replied \"Tell me what?\" but stopped myself when I saw the tear. \n\nIn\u00e9s snifled, \"My parents didn't want me to go to school. They said my place was with the family and I shouldn't be selfish. It didn't matter that I wanted to be a lawyer; my future was supposed to be with them running the restaurant... And then, as I left, my Dad told me not to come back a failure.\"\n\nWow, and I thought her family pressure was in the form of just graduating. That's nuts. I squeezed her hand tighter, \"You have to be yourself, In\u00e9s... Right, Lacey?\"\n\n\"You know I'm happy, Master.\"\n\nI offered a comforting smile, \"They're the ones being selfish by not taking in account their daughters feelings. I know it's hard because they're your parents, but you have to live your life the way you want to live it.\"\n\n\"Exactly,\" Alyssa took a drink of her water. \"Which brings us to what In\u00e9s wants.\"\n\nAnd here I thought In\u00e9s becoming a lawyer was the key to her happiness? My mistake, apparently. I stared at Alyssa expectantly.\n\nAlyssa gestured to In\u00e9s with a knowing grin and I turned back to In\u00e9s.\n\n\"Lacey had mentioned you referred to her as family.\" In\u00e9s took a deep breath, \"I was hoping you'd find a way to accept me too? Having a supportive family is the one dream I have that's more important than becoming a lawyer. Or, if that's too much to ask, perhaps just letting me be your roommate?\" She finished by biting her lower lip.\n\nI sat back in surprise, \"You want to be apart of my family?\"\n\n\"Can you blame her, Baby?\" Alyssa burrowed lovingly into my side. \"You held her hand for a short walk, and she was fine for half the day, better than she has been in years. You make her feel so relieved, her stress just dissipates in your presence... And after hearing how her family treated her; which is the exact opposite of how our family acts... Will you help my friend, my family?\"\n\nWell, that certainly narrows down my decision. A person who is family to Alyssa is family to me. There was only one issue in my mind... \"Where will you sleep?\"\n\n\"I'm working on it,\" Alyssa purred in my ear, her hand slipping under the table, \"But until then, In\u00e9s and Slave would sleep together... Also, In\u00e9s would be in charge of the cooking for our family.\"\n\n\"You can cook?\" I exasperated. \n\nIn\u00e9s gave me the most confident grin I had ever seen. I looked toward Alyssa, who was still melded to my side.\n\nAlyssa had a more cat at the canary grin, \"I told you I'd take care of it.\"\n\nI chuckled, \"How can I say no to that?\" The three girls cheered giddily... Well, I guess that was settled, though I have a feeling that Alyssa knew exactly which buttons of mine to push to have me cave, so was it really my decision? Once the celebratory excitement calmed, I looked toward In\u00e9s, \"In all seriousness, though, you can stay with us without cooking. A member of our family isn't required to do anything for acceptance. Just be who you are.\"\n\n\"Not just a roommate, but I'm apart of the family?\" The words were obviously rhetorical as In\u00e9s' smile exploded, \"No, where I'm from, every family member pulls their weight in the household. Lacey cleans, I'll cook, with the both of us,\" she put her arm around Lacey to emphasize to who she was referring, \"helping with the family pet. Alyssa, as our Matriarch, keeps all of us in line and you, Josh, as our Patriarch, have the final say in all decisions of the house. You have no idea how happy I am.\" Tears began to trickle down her cheeks.\n\nDid she just say \"family pet\"? I'm not sure how I feel about that.\n\nI looked to Alyssa for clarification, and, of course, she already knew my non spoken question.\n\n\"I've always wanted a pet, actually, all three of us have.\" Alyssa then sensually nibbled at my ear, \"Of course, after we pick one out, you, as our Patriarch, will have final say on if you approve.\"\n\nSo, no commitment unless I approve. I suppose I can be okay with those terms. I nodded breathlessly under Alyssa's ministrations.\n\nAlyssa nipped again at my earlobe before looking over to In\u00e9s. \"Now show your Patriarch how grateful you are to be apart of his family. Make his dream a reality.\"\n\nMy dream?\n\nIn\u00e9s didn't hesitate. She scooted her chair back enough to slide her body under the table. Only a moment later was my zipper being undone and my manhood springing into full bloom.\n\nI glanced around the restaurant, a difficult task with Alyssa aggressively mauling my torso, feeling oh so lucky no one had noticed the disappearance of our family member... And then I felt the warm, salivated mouth of In\u00e9s on my cock. \n\nAh yes, this dream. At this point, did it even matter if anyone knew what was going on under the table?\n\nIt did not.\n\nIn\u00e9s wasted little time. Her head bobbed up and down my shaft with a precise cadence, her tongue meticulously brushing against all things erogenous, grazing against my rod of flesh in the most erotic manner. \n\nWow... Just wow.\n\nIn\u00e9s was in a rhythm now, doing her best to suck out my very soul. I almost didn't notice the manager coming to the table.\n\n\"Excuse me, this is a family restaurant and we cannot allow this behavior to continue. The police will be called if you...\"\n\nThe man's eyes narrowed in confusion before finishing, \"I am sorry for my disturbance to your meal. Let me make it up to you by taking care of the bill. Enjoy the rest of your dinner.\"\n\nThe whole conversation - was it even a conversation if we didn't say a single word? - lasted all of fifteen seconds, but none what was said even processed in my brain at the time. In\u00e9s was truly spectacular at servicing me with her mouth; I was nearly delirious with pleasure. She seemed to bob and caress at seemingly the same time, causing my hips to lift slightly off my chair.\n\nI was going to cum. My body strained and my voice caught in my throat and I grabbed the edges of the table... I felt In\u00e9s was going to pull back, not necessarily completely off, before Alyssa forcefully put her head down completely over my crotch, forcing my now encased manhood to trigger its eruption directly into her stomach.\n\nSpurt after spurt wracked my body of its senses, only the feelings of pure ecstacy remained as I flooded her throat with my seed.\n\nAs I came, a muted howling erupted at our table. Alyssa, Lacey, and In\u00e9s all came simultaneously, only a second after I did. Each doing their best to hide their pleasure with In\u00e9s still holding my appendage in her mouth, Lacey stuffing a napkin in hers while covering it with her hands, while Alyssa was biting my arm.\n\nMy eyes peered open and took grasp of the situation... Everyone was ignoring us. No one had noticed. It was a relief as I quickly put myself back together and In\u00e9s retook her seat.\n\n\"Well,\" Alyssa let out a content breath, \"With that, future counselor, I believe you just won your case with your oral arguements.\"\n\nIn\u00e9s giggled, \"But it couldn't have been done without my co-counsel, Lacey, guiding me through the rigors of fellatio and the extra help at the end by District Attorney Alyssa.\"\n\nWe all laughed at the ruse. Yes, this family is full of laughter and love... and sex.\n\n*\n\n\"I feel bad that you have to pay for everything,\" I shook my head as Alyssa grabbed the breakfast bill without even blinking.\n\n\"That's nonsense, Baby,\" Alyssa dissmissed my statement thoroughly before making me question the ways of the world. \"How come you think you're not paying for this meal?\"\n\nSee? Alyssa has the bill in her hand with a credit card from her purse going into the black fold. How the hell am I paying for it?\n\nAlyssa giggled at my consternation, \"C'mon, we're going to be late for Charlotte.\"\n\nAnd then she didn't even explain how I was paying for it... When will I understand women?\n\n*\n\nI was impressed with the building. Each floor was its own condominium and we were headed straight to the top of the highrise. The true nature of the amount of money Charlotte Westgate had access to was insane. I knew her Father was rich, but this was wealth. I truly felt like I didn't belong wearing shorts and a t shirt.\n\nThe elevator dinged, marking our arrival to the fiftieth floor. We stepped inside the white outer foyer with two huge black vases holding large, leafy greenery - Were they even real? - that stood a couple feet on each side of an imposing, black ornate door with gold trim.\n\nAlyssa took out a key and put it in the lock.\n\n\"You have a key?\"\n\n\"Charlotte is a close, personal friend and trusts me implicitly,\" Alyssa brushed off my curiosity with a nonchalant demeanor, not even pausing in her quest in opening the door. \n\nWe walked in, and if I was impressed by the building, the interior had me in awe. It was so big. Everything was carpeted a pearl white with ivory painted walls while every fashion of furniture was black; leather for the pair of sectional couches, wood for the coffee tables and entertainment center. It was the very definition of extravagance.\n\nAlyssa led me to one of the sectional couches. She sat next to me, whispering in my ear, \"You ready for this tutor session?\"\n\nMy eyes narrowed as I realized we forgot one very important detail. \"We forgot our books.\"\n\n\"This isn't that type of tutor session, Baby. \n\nCharlotte, nor I, ever said we were studying math.\" Alyssa playfully flicked my nose. \"Charlotte, c'mon girl, we're here.\"\n\nOh. My. God.\n\nCharlotte crawled out from the hallway. Her facial expression was one of nervous anticipation, each \"step\" full of trepidation. Did I mention she was naked?\n\n\"Don't be shy,\" Alyssa encouraged. \"Remember, you're trying to encourage Josh to become your Owner.\"\n\nMy eyes went wide and my mouth moved, but I wasn't able to form a solitary word.\n\nAlyssa giggled at my bewilderment... again. It seemed to be her typical reaction to my surprised countenance every time she springs something new for me to ponder. I certainly wasn't expecting this.\n\nCharlotte arrived at my feet, her curly blonde hair brushing against the side of my leg in a show of affection. \n\n\"Good girl,\" Alyssa used her hand to scratch behind Charlotte's ear.\n\nI closed my eyes and tried to collect my thoughts. It didn't work. So instead, I was blunt, \"What the fuck is going on?\"\n\nMy words startled Charlotte, and she backed off. A river of tears started streaming down her face.\n\n\"Charlotte, stay.\" Alyssa rolled her eyes, \"Baby, you scared her.\"\n\nI scared her? Seriously? \n\nAlyssa noticed my obvious agitation and continued in a more delicate manner, \"Baby, look at Charlotte.\"\n\nI stared at Alyssa, waiting for my answer to this insanity. \n\n\"Please,\" Alyssa pleaded.\n\nI huffed before I turned my attention to the busty beauty doing her best to shield her face from me. I could see she felt shame and she wanted to run as fast as she could to anywhere but here, but the command to stay was given, so she wouldn't.\n\n\"See,\" Alyssa soothed. \"This is who Charlotte is at heart. Baby, have you ever heard of pet play?\"\n\nI have not. \"Is that like when a person acts like a dog?\"\n\n\"No,\" Alyssa smiled. \"It's when a person wants to be treated like a pet, but are still human. Charlotte isn't a dog or a cat, she is a human being, but she wants to be treated like a pet. Does that make sense?\"\n\n\"Kind of.\" Okay, not really, but neither did Lacey being a slave at first, either.\n\n\"In order for Charlotte to truly be happy, she needs to have someone to take care of her as a pet.\" Of course, Alyssa knew me too well to know I really wasn't a hundred percent sold. \"Sure, if there is something we need for her to do, like go outside and be a regular human being, we just take off her collar, and she'll understand what is expected of her. Otherwise, she eats off the floor, but it would be regular human food, and she has a couple large pet beds, one in the bedroom and one for out here to be placed by your feet, she crawls around on all fours, don't wear clothes, or in other words, acts like a pet. This is what truly makes Charlotte happy, and I want to help my friend keep her happiness.\"\n\nI turned to Alyssa, \"But she's not wearing a collar?\"\n\n\"Yet.\" Alyssa smiled as she stood. She walked into another room and was back in a mere moment. \"It is the Owner's job to collar their pet. I took the liberty of purchasing a few you may like, so you may do the honors.\"\n\nOkay, I'll admit I asked about the whole collar thing to stall. I also should have known Alyssa was already prepared. I still wasn't sure.\n\n\"What am I supposed to do?\"\n\nAlyssa snickered, \"Pick a collar and put it around her neck.\"\n\n\"No, I mean after that.\" I took a breath. \"Charlotte would be my pet and then what?\"\n\n\"I'm sorry, Baby,\" Alyssa gave me a soft kiss. \"You still feel overwhelmed by the situation.\"\n\nThat would be a major understatement.\n\nAlyssa melted into my side, her hand went to my manhood while her lips were a whisper in my ear. \"Baby, I love you, so I will accept your decision, but look at Charlotte; she needs you.\"\n\nMy eyes gazed back to Charlotte. She was still in the same shied position, but at the sound of my instruction to look at her, she allowed her face to be shown... There was a desperate hope to her demeanor. \n\nAlyssa continued, \"She is a great person and deserves the love and affection to make her happy, and in return, you will be happy... more than happy. Look at her, she is really quite stunning; golden blonde hair, deep blue eyes - hell, I wish I had those tits, and that pussy is sculpted just for your cock. She would be all yours, Baby. Every last bit of her. You would be her Owner... And remember, all your other girls already picked her out as our family pet and now I am presenting her to you for approval.\" \n\nAs Alyssa was talking, Charlotte changed positions. With every talking point about her features Alyssa mentioned, she brought attention to it; a hand through her hair, batting seductively her ocean blue eyes, sitting at attention and thrusting out her breasts in an attempt to make them as tall and as proud as they could be, and lastly, parting her legs, showing me the glistening sheen of her most intimate crevice.\n\nMy erection was an iron bar under Alyssa's ministrations. I get to have sex with Charlotte Westgate? Yes, apparently. But was I ready for that?\n\nNo. \n\nI needed something else. \"Does she speak?\"\n\nAlyssa laughed in my ear, \"Of course, she can speak. She just hasn't because you haven't asked her anything.\"\n\nYes, I know... just the other day we were talking as I helped her find an earring. That was a stupid question. Duh.\n\n\"Charlotte?\"\n\nCharlotte tilted her head in acknowledgment, a cute little smirk etched on her face. Oh yeah, she was mocking me for my faux pas. She'll fit right in with our family. But regardless, I knew what I needed now.\n\n\"Tell me your true feelings. I'd like to hear this from you.\"\n\nI'm confident Charlotte saw my defenses crumble because in that instant, her smile went grand, as if she was proud of who she was and who she wanted me to be. \n\n\"It's all as Alyssa said.\" Charlotte's smile then turned into one of contemplation, \"I guess it all started when my family got a puppy, Bentley, when I was eight. My Father was hardly ever home, but when he did come home, it was always Bentley that received his attention. Honestly, it made me wish I was his pet, rather than his daughter. I mean, that's not to say he doesn't take care of me,\" she gestured to her living arrangements. \"But growing up, I wanted more. After a while, I acted on my wish, and I had never felt so free when I did. No societal pressures, no family pressures, no anything. Just me as a pet. But by the time I realized my wish could now be a truth, I grew out of wanting to be my Father's pet. I needed someone I could share this life with... and then you came along. I had noticed you from day one in math class, and thought, wow - let's just say I had a serious crush. I then wondered if you could handle my preferences? As time went by, I knew you were interested, but assumed my family reputation was holding you back... And then Alyssa told me she met this great guy and had started dating. I was so happy for her until I found out it was you. I mean, I was still happy for her, but I was also depressed. It didn't take her long to pry the truth out of me and offered this arrangement, which I can't help but to hope will happen.\" She then looked up at me thoughtfully, \"Care to have a pet in your life? Are you willing to make my dream a reality so I can make your reality into a dream?\"",
        "The candor Charlotte displayed was eye opening... also, I could have dated Charlotte Westgate since the beginning of the semester??? Are you freaking kidding me??? Still, despite how appealing that thought was, I would never, and I mean ever, have wished for it to happen. Alyssa is perfect.\n\nThe decision was made. If the family wanted a pet, might as well be someone that I found humourous and pleasant to be around... and fuckable.\n\nI grabbed a pink collar that had a metal heart in front which would allow the attaching of a leash if I so chose. It matched her lipstick perfectly. \"It's bigger than I expected.\"\n\nAlyssa grinned a proud grin at my handling of the collar. Yes, she got her way... again. \"It's because it's not an animal collar, but one for a human.\"\n\nMakes sense. As I kneeled onto the floor, my eyes found Charlotte's and saw the absolute joy in her soul as I attached the leather around her neck. Her emotions were so prominent, tears began to explode down her cheeks.\n\n\"Thank you, Josh,\" Charlotte sniffled. \"I always knew you were the one.\"\n\nI gave a soft smile, \"Welcome to the family.\"\n\nAlyssa put a hand on my shoulder, \"When a pet gets a new owner, that person gets to name it. What will you name her?\"\n\nReally? I looked at Charlotte only to be met with expectancy. Apparently, yes. \"I like the name Charlotte. I'll let you keep it.\"\n\nI felt Alyssa against my back before her voice offered a sweet something in my ear, \"Mate with your pet.\"\n\nI leaned forward, a steamy glint in my eye. Charlotte's smile went wider at my actions before she puckered her lips just as my lips pressed against hers. Our lips parted, and as our kiss deepened, I pushed her body back and onto the floor.\n\nAlyssa pulled down my shorts as my hands went to Charlotte's breasts... they were oh so soft and pliable, with her nipples poking my palms as if they were diamonds. I slid forward on my knees, exiting my under garments.\n\nMy cock was at her wet entrance and I pushed in, hard. Charlotte immediately gave a sharp intake of breath. \"Are you all right?\"\n\n\"I've only done this once, and it's been awhile,\" Charlotte smiled. \"I'm your pet, fuck me like one.\"\n\nWell, I'd already done messed up then. We were in the wrong position for that. I backed off and out, \"Flip over on all fours.\"\n\nCharlotte immediately did.\n\nI lined myself up again, this time entering slowly. I inched forward until I bottomed out before pulling back and reinserting again, this time just marginally faster. \n\n\"So good,\" Charlotte mewled.\n\nNow that the proverbial coast was clear, I picked up the pace. I plunged again, building tempo, and then thrust again even harder. It took only mere moments for me to arrive at full speed, developing a rhythm of spears into Charlotte's depths.\n\nThe feelings were explicit. Charlotte was tight, wet, and smooth as silk. Her pussy grappled at my invader, doing all it could to keep it there, relishing all that I was for it's masters pleasure. \n\nCharlotte tried to participate, rocking back against my piston, but she soon learned she wasn't doing much. I was too quick and forceful, taking ownership of my pet in the most dominate way. My hands lashed out to prove my point, one tightly grasping her hips, the other entangling in her hair, using it as a lever to increase my speed, which caused my lover to squeal with delight, her moan taking on a never ending raspy quality that painted the air in the room.\n\nI slammed home one final time, cumming with a flourish of expletives and a tsunami of my essence which triggered Charlotte's own debase pleasure accompanied by a wail of pure euphoria.\n\nI held myself inside Charlotte for several minutes, taking stock of my pet. She was panting heavily, her face seemingly matted to the carpet, her golden locks were splayed everywhere, and to finish the ensemble, was a content little smile.\n\nI glanced behind me to the couch to see Alyssa, also panting, apparently coming down from a meteoric orgasm of her own. \"Where's the bedroom?\"\n\n\"Right down the hall,\" Alyssa pointed, huffing as she did.\n\nI stood and offered a hand to Alyssa, helping her off the couch before picking up Charlotte off the floor.\n\nEntering the Master bedroom, I should have been amazed at the sheer enormity of the room - it was bigger than my whole apartment - but frankly, I was too tired. I almost laid Charlotte on the bed before I remembered what was said earlier and placed her lovingly in the human sized large pet bed and covered her with a blanket. I then climbed into the large, pink comforter with matching sheets, so big it had tall bedposts that held a white lace canopy, bed. Alyssa was not far behind, and soon we were cuddled, nearly drifting off to sleep.\n\n\"With our family growing to five now, we definitely need a bigger apartment,\" I yawned.\n\n\"Why?\" Alyssa wearily smiled, \"You think we need something bigger than this place?\"\n\nMy body shot up from the bed as if it were on a spring... Were we really going to live here? All of us? I looked down at Charlotte, \"Is that true, Charlotte?\"\n\n\"You are my Owner and therefore you Own all that I do,\" Charlotte mumbled.\n\nAlyssa sat up, her arms wrapping around my body, \"I told you I was working on it.\" She then guided my body back to a lying position. It wasn't a difficult proposition.\n\nI was going to live in luxury.\n\n* \n\nI awoke to a wonderful smell. I glanced at the clock that wasn't my clock but kind of was - according to Charlotte - to see I slept half the day away. This bed was the most comfortable bed I had ever slept on. The only drawback was that I was alone. I even peeked over the side and Charlotte had scampered off as well. I hadn't been alone in a bed in quite some time. It sucked.\n\nI put my feet on the plush carpet, so comfortable that my knees didn't even get rug burn while having sex with Charlotte. The room was large, and I could see a full Master bathroom in the far corner. My eyes landed on the black dresser in front of me, my clothes neatly folded on top of it. \"I guess it's time to rejoin the others.\" And I couldn't help but smile at the thought as I got dressed.\n\n\"There he is,\" Alyssa strode sexily toward me only wearing a see though black bra and g string, giving me a kiss as she arrived. \"Sleep well?\"\n\n\"Yes,\" I kissed her this time. \"But a little lonely when I got up... Nice outfit, by the way.\"\n\n\"Aww, poor Baby,\" Alyssa pouted. \"If that's how you truly feel, I'll have your pet move to the bed when the rest of us are busy... And this is my new lounging around the home attire, all us girls have around the house outfits now.\"\n\n\"Busy?\" \n\n\"Moving in; I told Lacey to start in the second bedroom that she and In\u00e9s will share because you were sleeping, In\u00e9s was helping, but then, well, I'm sure you can smell what she's doing now, and Charlotte is waiting by your place on the couch so you two can have your tutor session.\"\n\nHadn't that already happened? \"Tutor session?\"\n\n\"What happened earlier was your acceptance of Charlotte, now the two of you need to have the conversation about expectations. She doesn't want to break a rule of yours she doesn't know she's breaking, and you need to know her limits. That's the tutor session that was always supposed to be.\"\n\nWhat would I do without Alyssa? I'd be lost in a sea of unknowns with these girls.\n\nI made my way to the couch, noting Charlotte perked up excitedly as I sat. \"Join me.\" I patted the space on the couch next to me.\n\nCharlotte stood, her mammaries jiggling with every movement as she sat next to me. She was uncomfortable in the seating position. \n\n\"No,\" I smiled as I clarified. \"I meant I want you to be like every other pet to their Owner and lie with your head on my lap.\"\n\nCharlotte instantly cheered up and followed instruction. \n\n\"There,\" I stroked through her hair. \"I then realized I was petting the wrong part of her body for my tastes. My hand then went under Charlotte's arm and nestled with the fondness of her breast. \"Actually, that's better.\"\n\nCharlotte mewled at the touch. \n\n\"Before we start,\" I continued. \"I have a question... The other day, did you really lose an earring?\"\n\nCharlotte blushed, \"I was practicing.\"\n\n\"Yeah, I thought I saw you pull at your ear before you \"found\" it... All right then, so apparently we need to go over some ground rules, and since I don't have any experience in this, what do I need to know about pet play? As your Owner, how can I support your happiness?\"\n\nCharlotte sighed contentedly, \"This was a great start. I love this, right now. You added a closeness but still what a pet would do... To add to it, there are a couple things, like maybe some treats; perhaps something food wise...\"\n\n\"In\u00e9s!\" I called out.\n\nI heard In\u00e9s coming from the kitchen, her high heels giving away her approach. A moment later she appeared from the archway wearing an apron... only an apron. Is that In\u00e9s' lounging around the house outfit? With what Ayssa was wearing and what Lacey was sure to be wearing and what Charlotte wasn't wearing... I felt over dressed. But that was a topic for a later time. Right now, I needed to make sure Charlotte's needs were met. \n\n\"Is there a way to make a small bite size snack that isn't readily perishable? Preferably something sweet for when someone does a good job?\"\n\nIn\u00e9s nodded with a grin, \"Cookies would probably be best. I can make them bite sized and get a weeks worth out of them. Although I don't have everything to do it now, I can pick up the ingredients tomorrow... Or if its immediately required, I can go after dinner.\"\n\n\"No, tomorrow will be fine, thank you.\"\n\n\"Anything for you, and, of course, our wonderful pet,\" In\u00e9s smiled as she returned to the kitchen.\n\nMy attention returned to Charlotte, \"What else?\"\n\nI heard the joy in her voice, \"The only other thing that I can think of at the moment, is maybe coming up with a trick I can do when you demand it?\"\n\n\"A trick, huh?\" I sat back in thought. \"I mean there are the basic dog ones, like fetch or shake, but you are not a dog.\" \n\nI felt like I was close to something, but I couldn't put my finger on it.\n\nMy hand kept gently kneading Charlotte's breast as I percolated the quandry. It was like my own personal stress ball... It then came to me like lightning; I guess I could put a finger on it, my hand too.\n\n\"I got it,\" I chuckled, thoroughly proud of myself. \"Your trick will be to give me a boob job.\"\n\n\"It's called a tit fuck, Baby,\" Alyssa called from the hallway. \"You need to be comfortable being vulgar with us. In this house, we don't have sex, we fuck.\"\n\nIf that's the case, I may have to work on that. \n\nAlyssa continued, \"Hell, you could call us all your Bitches, and none of us would mind.\"\n\nThat was never going to happen. \n\nRegardless... \"Spying on us, Sunshine?\"\n\n\"Charlotte is the family pet, whatever you two agree upon, I have to relay it to everyone else... I'm just trying to give you a sense of privacy.\"\n\nFine... Not that I have any secrets with, well, anyone in this household. \"Charlotte, your trick will be to give me a tit fuck.\"\n\n\"But I'm afraid I've never done that before; I wouldn't know what to do?\" Charlotte sounded crestfallen at the thought of not being able to perform my request.\n\n\"Isn't that the point of a trick? To have my pet learn something?\" I then called out, \"Slave!\"\n\nIn a mad dash, Lacey came running as best she could in her stilettos, kneeling before me in a blink of an eye.\n\n\"Tell me, Slave,\" I tilted my head toward my submissive, \"Would Charlotte here make a fine candidate to give me a tit fuck?\"\n\nLacey smiled as she reached out, inspecting Charlotte's chest with apt awareness and a practiced hand, only stopping when Charlotte gasped a quick intake of breath. \"Master would be pleased to have his cock in these tits.\"\n\n\"But our pet is worried she will not know what to do? Now if only there was someone in this family who would be able to take the time to train her in the art properly? And if that person expedited that training, to say, by next weekend, despite maintaining her duties, that person would certainly deserve a pleasurable reward.\"\n\nLacey's smirk was grand, \"Consider it done, Master.\"\n\n\"You may go back to attending your duties, Slave.\"\n\nLacey did so immediately. \n\nMy attention once again returned to Charlotte, \"Anything else my pet would like to discuss?\"\n\nCharlotte purred, \"I'm so excited right now... I can't think of anything at the moment.\"\n\n\"One standing rule, then,\" I pinched her already hard nipple. \"If anything changes, you bring it to my attention, I don't care what it is. I want you to be happy in your role just as everyone else is. Understand?\"\n\n\"Just you saying that makes me feel wonderful.\"\n\n\"Good.\"\n\nWith the conversation finished, Alyssa came in and sat on my free side. She petted Charlotte's head for a brief moment before becoming handsy with me... but they weren't attacking my manhood like usual.\n\n\"What are you doing?\"\n\nAlyssa giggled as she pulled my wallet out of my pocket, \"I'm putting your debit card back. I told you that you were paying for breakfast.\"\n\nYeah, that shouldn't have gone through.\n\n\"My debit card?\" I grabbed my wallet and the card. As I opened my wallet to put the card away, I saw my card already there. At closer inspection, the card Alyssa had wasn't mine. I had a sigh of relief but chuckled, \"This isn't mine.\"\n\n\"It has your name on it,\" Alyssa gave a mirthful smile.\n\nI looked again, and sure enough, the card had two names on it; Joshua Simmons and Charlotte Westgate. \"What is this?\"\n\nAlyssa petted our pets head again, \"Charlotte, will you be so kind to enlighten your Owner?\"\n\nCharlotte let out a content little purr at the affection, \"My Owner owns me and therefore everything I own; my condo, my BMW, my money, it is all yours. I had added you to my bank account yesterday.\"\n\n\"But you didn't know I'd accept?\"\n\n\"Alyssa was confident,\" Charlotte rubbed her head lovingly against my thigh. \"So I was confident.\"\n\nI must admit, the following ten minutes after I put my wallet away, was very relaxing. Just sitting on the couch with my girlfriend cuddled into one side while she lightly petted our pet while I was gently groping my pet's tits was the perfect way to unwind. All until I heard the magic words...\n\n\"Dinners ready!\"\n\n*\n\nThe five of us settled into our roles quite quickly, without any complaints; though I still am not exactly sure what a Patriarch of a family is supposed to do. I was told I was the final say in all decisions, but Alyssa, and now In\u00e9s, hell, so were Lacey and Charlotte, though their personalities were more submissive in nature, were so much smarter than I will ever be that whenever they said something, it just seemed idiotic not to go with it. My other duty as Patriarch, and no one had to tell me this, was to fuck all four of them whenever and however I so chose... And whenever I came, so did they, regardless of who I was doing, how many of them I was doing, or what any of them was doing. \n\nYes, my actions almost burned dinner several times. But is it really my fault when...\n\nThe neuroscience lab was always a quiet time to catch up on homework. Because Professor Tisdale didn't care, neither did the students... Except for Alyssa, of course. She went to do all the things she needed to have access to that she didn't in her makeshift lab at her parents basement and I went because of her. So I did homework... Or tried to.\n\nAlyssa's hand was rubbing against my manhood as she poured over the results of some testing to some hypothesis she had. It was distracting as I was trying to do some math, but did that stop Alyssa?\n\nNot in the slightest. \n\nIn fact, Alyssa had told me it helped her concentrate even more. Whatever her reasoning, I was becoming less concerned with Markov chains. My legs subconsciously parted to give her better access and that was all the invitation she needed. \n\nAlyssa took out her phone, and whoever she dialed, apparently was on speed dial. She then set it down after putting it on speaker phone.\n\n\"Who is that?\" I breathed out as Alyssa continued with her ministrations. \n\nAlyssa turned in her seat to face me. Her lips met mine for a lovers kiss meant to stoke and inflame. \"I told the girls that whenever one of us gets lucky enough to fuck you, we need to call everyone so we can all enjoy it... and besides, it let's everyone know to give you time to recuperate, because no girl wants to be sexy for their guy just to be turned away due to overusage. It feels bad all around.\"\n\nAll that actually made sense... until I realized one thing. \"We're actually going to do...\"\n\nAlyssa interrupted me with another soulful kiss. Her hands wasted little time in maneuvering me out of my lower garments before she lifted herself on the table and spread her legs.\n\nFuck was Alyssa wet... she was leaking onto the table.\n\n\"Yes we are,\" Alyssa giggled. She pulled me by my shirt, closing the distance between us. \"A true whore will take care of her man wherever, whenever, and however... And this,\" she grabbed my erection and guided it to her entrance, \"Seems desperate for some release.\"\n\nI have to admit, she wasn't lying.\n\nI pressed firmly forward, sliding in easily.\n\n\"Always amazing, Baby,\" Alyssa gasped. \n\nI pulled back and thrust again, this time quickening the pace. \n\n\"Ooh yeah, fuck me, Baby. Show me who owns this pussy.\"\n\nDone with the formalities, I rammed hard and deep, plundering back and forth like a brutal seesaw out to prove one thing... show my woman what she, just a moment ago, proclaimed. Alyssa was mine in every sense of the word.\n\nWe all came as I came deep inside my girlfriend. \n\nAnd I was in heaven.\n\nOr my fault when...\n\nCharlotte crawled over to me, her hands delicately removing my lower garments. \n\nI just stared in curiousity... I hadn't commanded her to do anything, which made this highly unusual.\n\nCharlotte gazed into my eyes with her baby blues as she lowered her head to my shaft. She licked it all over, her saliva coating it in a sheen before her tongue started at the base and went straight up to the tip as if it was a lollipop. \n\nI was expecting her to continue, giving me a blowjob, but instead, Charlotte shifted closer, her back arching slightly as she encompassed my erection deep between her ample bosom.\n\nCharlotte smiled proudly as she held her tits together, moving her body up and down. She had confidence in her new found trick, a tit fuck for her Owner... and it was several days early.\n\nIt was a delicious experience. Her movements combined with the wonderful softness of flesh encompassing my manhood... The slight friction... The slight lubrication... The impression my cock was making in those savory mounds as if they were made just for me.\n\nWe all came as I came all over her pillowy tits.\n\nAnd I was in heaven.\n\nOr my fault when...\n\nIt had been a rough day; the credit card machine wasn't working so I couldn't get lunch, a surprise test I didn't pass, and I now have to write a thesis paper in English... Just one thing on top of the other. All I wanted was a nice, hot shower to get rid of the day.\n\nIt's amazing the difference that can be found in the shower head of a cheap studio apartment and a luxurious condominium. The water seemed to be massaging my skin as I held my head under it. It was soothing.\n\nIt's also amazing how a person's touch could also differentiate from each other; Alyssa was aggressively carnal - hard not to appreciate being desired. In\u00e9s was desperate followed by immediate relaxation - hard not to appreciate being needed. Charlotte was soft and appreciative - hard not to appreciate being loved.\n\nI had been lost in my thoughts when the confident touch began stroking my back, as if she knew exactly what I needed at exactly the right time - hard not to appreciate being knowledgeably cared for. It could only be Lacey.",
        "\"Mmm Slave,\" I smiled.\n\n\"I didn't think you saw that it was me who came in, Master.\" Lacey took the blue ocean scented body soap from next to me and squirted it into a lady circle sponge thingy - like I knew what that thing was called - and began a delicate washing of my back. \n\n\"I didn't.\" I closed my eyes and let the comfort saturate my body. \"It was how you touched me that I knew.\"\n\nI felt the giddiness in Lacey's voice, proud to know she had that affect on me. \"Master looked like he had a rough day.\"\n\n\"Nothing a hot shower couldn't fix... and a caring touch.\"\n\nLacey continued on her task, soaping first my backside, before her breasts rubbed up against my back as her hands wrapped to my front. My shoulders, chest, stomach, were all cared for before her attention went to my groin. \n\nIt was easy to get hard under Lacey's ministrations. She was stroking me in the most cared for way, not aggressive, not timid, just a nice rhythm not predicated on release as much as it was an enjoyable pleasure. It felt really good.\n\nI leaned back into Lacey, turning my head as I did. I laid my lips upon hers, parting them slowly, kissing her exactly as she was pleasing me.\n\nWe both sighed with a smile as I relinquished our shared joy. \"I think it's time to get this hot shower even hotter before it turns cold.\"\n\nI turned to Lacey and marched her backward, not stopping until her backside touched the wall. My hands reached out for her breasts kneading them briefly before gliding down her curves, petting her flesh softly. She elicited a surprised giggle as my hands finished with their ultimate goal of going just under the curves of her ass and lifting her in the air and pinning her to the wall.\n\nI thrust forward as Lacey wrapped her legs around my torso. \n\n\"Yes Master, this is definitely hotter,\" Lacey moaned into my ear.\n\nI had to admit, it very much was.\n\nAs much as our earlier actions concentrated on taking our time for our merriment, that changed once I had Lacey in this position. \n\nI plunged in deeply with a barrage of thorough insertions, each having the desired result of building to our climax.\n\nLacey's moans were echoing in the shower enclosure as I drove hard and deep, the feeling of her body just wrapped around me, while her depths wrapped around my cock was something to burn to memory. All of her flesh, inside and out, held onto all that I was.\n\nWe all came as I came deep inside her pussy.\n\nAnd I was in heaven.\n\nOr my fault when...\n\nI didn't notice when someone slipped into the sheets after Alyssa left for school. It barely registered that someone cuddled into my side. I hardly even realized someone started stroking my manhood. No, in my late night, now early morning sleep induced haze, the truth of what was occurring didn't strike me until a mouth encompassed all my shaft in a single plunge. It took a moment through the pleasure to throw the blanket off of me, revealing a nude In\u00e9s. \n\n\"I hope I didn't wake you?\" In\u00e9s smiled playfully.\n\n\"Not at all,\" I lied... I could think of worse ways to be woken up.\n\n\"Well, since your up, you want to give me a little something so I can make it through the whole day?\" \n\nA hand hold was half the day, a blowjob was two thirds, regular sex was thee quarters, and a whole day was...\n\nIn\u00e9s laid on her stomach, her knees lifting her ass in the air while her hands spread her cheeks obscenely. \n\nI suppose a whole day means anal. Who knew?\n\nNot that I was complaining. \n\nI lined up my saliva covered cock and placed it at her puckered entrance... and In\u00e9s pushed back. My cock missed with that movement, but it also told me one irrefutable fact...\n\n\"My someone's in a hurry.\" I pushed the mushroom head in, to both of our delights.\n\n\"After a week and a half of being together, I assumed my ass would've taunted you enough to...\" In\u00e9s hissed as I entered her fully. \"fuck it already, but I guess I needed...\" She paused again as I thrust into her. \"to be more direct to get my favorite position.\"\n\nI spanked In\u00e9s, \"If you had told me...\" I let the words drift as I continued. Seriously, did these girls think I could read minds?\n\nIn\u00e9s ignored my statement. \"Fuck that feels good,\" she moaned.\n\nI took hold of In\u00e9s' hips, really developing a rhythm, plowing hard and deep, ravaging her sweet, jiggling posterior. \n\n\"That's it, bury your stick up my ass!\" \n\nFuck was this tight. I'm definitely going to screw In\u00e9s this way every single time... and she apparently would be loving every minute of it.\n\nWe all came as I came deep inside her ass.\n\nAnd I was in heaven.\n\nMy point being is that I would argue that any distractions the girls had was of their own accord, not mine.\n\n*\n\n\"What are those things in your hair? Some sort of barrettes or something like that?\"\n\nHonestly, I wasn't sure about my own explanation. They looked like little saucers, each no more than an inch in diameter, and seemed more connected to her scalp than her hair... And once Alyssa finished styling her luscious brown locks, they were completely hidden.\n\n\"Something like that,\" Alyssa dismissed my query as she finished her hair and was now on to adding a deep ruby red lipstick.\n\nWith an answer sort of given, I went to my next question, \"Should you girls really be dressing like that when we're going to have dinner with Preston Westgate? I mean, you even got In\u00e9s and Charlotte to dress scantily clad.\"\n\nAlyssa turned from the vanity, \"Tell me, do you like what you see?\" She crossed her legs revealing the complete lack of underwear from her light blue minidress. If that wasn't distracting enough, her tits, which were pouring out of her top, were equally capable of luring my attention.\n\nI gulped, \"I do, but...\"\n\n\"And to the four of us, you are the only one that matters. It may be Charlotte's birthday, but we all still want to impress you... and by the way your drool is dropping from your mouth which just proved Lacey was right in picking out a different color of this dress for each of us. Baby, you might as well get used to it, because you're going to have a rainbow of flesh hanging off your body tonight.\" Alyssa then smiled an evilly confiident smile, \"Besides, I'm working on it.\"\n\nShe always is. \n\nI turned away, wiping my drool as I did, because if I didn't, I'd never get this tie done staring at Alyssa in the mirror.\n\n*\n\nWe arrived at a mansion... I repeat, a freaking mansion. One with actual pillars in front and grounds so large, it rivaled the size of a third world country... and when we walked in, a butler actually escorted us to where Charlotte's parents were.\n\nCharlotte's Dad extended his hand, \"I'm Mr. West...\" The sixty year old man stood, the epitome of Wall Street, gray hair, clean shaven, power suit, and not even allowing us to use his first name of Preston... He was absolutely intimidating.\n\nBut maybe Alyssa was right. At seeing Lacey, In\u00e9s, and herself, Preston's voice caught in his throat with his eyes studying the nubile skin. But then again, her Mom, seemed less than thrilled... So fifty/fifty? \n\nPreston's demeanor seemed to turn when his daughter strutted in the room, dressed similarly.\n\nI grabbed his hand, giving it a firm shake, \"Josh Simmons, Sir; thanks for having me. I'm glad to be here.\"\n\n\"I'm not so certain I feel the same,\" Preston gave a second, very disgruntled glance at Charlotte. \n\nOn second thought - or maybe it was a third or fourth thought by now? - maybe my first inclinations about the dresses was correct.\n\n\"I'm Olivia Marie,\" Charlotte's Mom, a thirty eight year old blonde haired trophy wife with a body completely store bought by her husband - if you looked real close, through the cosmetic enhancements, you could see where Charlotte got her natural good looks - tilted her head graciously... She had recovered nicely to her daughter's ensemble. \"Please come this way, dinner is already prepared.\" \n\nAs the rest of the party filtered to the dining room, an old friend did his best to hurry to the familiar scent that entered the house, but his elder bones hampered him from truly doing what he wanted, which was running to Charlotte.\n\n\"Bentley, I've missed you so much,\" Charlotte kneeled and the response was the immediate licking of her face by the American Foxhound. \"You'll never guess, but I'm just like you, now.\" She petted him lovingly, and he accepted her gentle touch. \"Sleep, eat, no stress... though I get to mate; sorry, I didn't mean to rub it in.\" Bentley licked her face again, causing Charlotte to giggle as it caught her in the nose, \"Yeah, I think it's a fantastic life, too.\"\n\n\"Charlotte,\" Olivia called from the dining room. \"Are you coming, Dear?\"\n\n\"Be there in a second!\"\n\nI extended my hand and helped Charlotte to her feet, giving her a brief kiss as she entered my arms.\n\n\"Thanks for that,\" Charlotte's hand went to her neck. \"Your generosity helps, but I still feel naked without my collar. Would you mind terribly if I keep it on all the time? Perhaps we can think of something else to show when you want me to be... normal?\"\n\nI couldn't say no to Charlotte. Honestly, I couldn't say no to any of my girls. I took the collar out of my pocket and attached it around her neck. \"When you are wearing clothes, I want you to be more... normal.\" \n\nCharlotte sighed in relief, \"You really are the best.\"\n\n\"You know, I really don't like the word normal... it's as if we're saying your feelings aren't normal. They are. There's nothing wrong with you. You are perfect, society be damned.\"\n\nCharlotte wiped at a tear that threatened her make up, her smile exuberant. \"C'mon, Josh, let's go to dinner.\" She took my hand and we entered the dining room. \n\nThe hand holding did not go unnoticed by Charlotte's parents. I knew they knew I was with Alyssa, especially after when I sat down, she scooted her chair next to mine to attach herself to my side, but as that was happening, Charlotte religiously held my hand from the other side. Normally, the girls rotate every twenty to thirty minutes or so on who gets the luxury of my free side, but it was Charlotte's birthday and it was the best gift Lacey and In\u00e9s could give her. I'm sure on their special days, the gesture will be returned.\n\nBy the time the steak and baked potato entrees arrived, I swear Preston's eyes were red with rage and I could damn near see the steam coming from his ears.\n\nAnd then Charlotte took her napkin and wiped a small blotch butter from her Owner's cheek.\n\n\"Oh, Josh, you have a little something,\" Charlotte cooed as she took care of the offending smudge. \"Isn't this delicious?\"\n\n\"I've had enough!\" Preston stood as he slammed his hands nearly through the table. \"You... boy, how dare...\"\n\n\"Mr. Westgate,\" Alyssa stood, her eyes intimating seriousness, her focus razor sharp. I have never saw her concentrate so intensely. \"Before you chastise Josh or your daughter, may I have word with you and your wife in private please.\"\n\nStill, no matter what Alyssa says, there's no way he would back down to have a private conversation.\n\n\"Yes,\" Mr. Westgate's eyes narrowed as if slightly confused. \"Perhaps we should settle this with civility. Come, young lady. we can discuss this in the den. Olivia, please join us.\"\n\nAs Charlotte's parents walked out of the room, I gently grabbed Alyssa by the arm, impressed the man accepted, but my action was more out of worry. \"What are you doing?\"\n\n\"Don't worry, Baby,\" Alyssa gave me a knowing smile, \"I'm working on it.\"\n\nI let go, concerned for my girlfriend. \n\n\"Here, try some of my steak,\" Charlotte smiled as she put the fork near my mouth, completely unconcerned about what did or was going to happen. \"Food always tastes better when someone is feeding you.\"\n\nI took Charlotte up on her offer, and she was right. Something inherently made the food taste better when getting fed by your pet... but I was still worried.\n\n\"Josh,\" In\u00e9s offered a comforting smile, \"Has Alyssa ever let you down before?\"\n\nThat answer was unequivocally, no. All I could do is shake my head, albeit barely.\n\n\"Master,\" Lacey soothed. \"Mistress knows what she is doing.\"\n\n\"Trust her,\" Charlotte mirrored In\u00e9s and Lacey's confidence as she held up another forkful. \n\nIt was hard, but with all my girls telling me not to worry, and especially Charlotte, considering it was her parents and she should know them best, I allowed my guard to drop. \"All right,\" I threw up my hands and took the proffered bite. After I swallowed, I added, \"You ladies win... again.\" I then looked at Charlotte, \"You know, if you keep feeding me your dinner, you won't have any left for yourself.\"\n\n\"Sure I will; I'll just eat yours.\" Charlotte's voice then went sultry, \"and by that, I mean your cock.\"\n\nMy eyes went wide. It wasn't the words, or actually, it was, but it was more who had said them. At home, Charlotte was refrained, relishing in her pet life. But since she is dressed, she is to act to \"societal acceptance\" and she was showing her public persona. It was a welcome and endearing sight.\n\n*\n\n\"My Baby girl!\"\n\nThe words were startling, nearly causing me to drop my water, but I won't lie and say I didn't spill any. The words rang in the dining room, echoing from every corner as Olivia ran to Charlotte before embracing her in a strong hug. \"I'm so happy for you!\"\n\n\"Mr. Simmons,\" Preston was right behind her, though not running, and extended his hand to me for the second time.\n\nI stood, confused, and shook Preston's hand. I mean, when did I become Mr. Simmons? \"Yes Sir?\"\n\n\"I apologize for my outburst, but I had to be sure,\" Preston smiled. \"Who would have thought that there was a man in this world who would willingly take on being the owner of a human pet?\"\n\nIt was a test? Preston knew of Charlotte's needs? I looked past Preston to see Alyssa leaning against the entryway, a smug smirk proudly on display as she watched the proceedings. What had she said to Charlotte's parents? My eyes drifted back to meet Preston's, \"Well, Sir, I was surprised at first as well, but I can honestly say, I couldn't be happier with Charlotte and have every intention to ensure her happiness as well.\"\n\n\"My good man,\" Preston actually put his arm around my shoulder in jovial delight, shaking me briefly. \"Let me give you something,\" his hand went into his pocket - damn, whatever it was caused a large bulge - and extracted a gold chained link leash with a black leather handle. He separated his wife from daughter before attaching the clip to the metal heart of Charlotte's collar. He finished by handing me the controlling strap. \"She's all yours.\"\n\n\"It would be my honor, Sir.\" I accepted the offering, my hand sliding into the grip.\n\n\"As long as you take great care of our little bitch here,\" Preston petted Charlotte along her ear, \"the least I can do is pay for all your household expenditures.\"\n\nWow. My eyes went wide... So many thoughts were coursing through my head; I didn't like his reference to Charlotte as a his bitch - she is not a dog, but a pet - but I also felt I was on shaky ground, that what was occurring was fragile, at best; but most importantly, my predominant thought was... \n\nIs this actually happening? Seriously? Is this really how the filthy rich are?\n\n\"Of course, you can breed her as much as you'd like, as well; I'll even throw in a bonus for each litter produced because I know Olivia wants to spoil grandchildren and I would like an heir to my empire...\"\n\nHaving to finally respond woke me from my disillusionment, \"I will do my best, Sir, though, I won't push our children into anything they don't want to do. If they want to run your empire, okay, but it would be their choice.\" \n\n\"You drive a hard bargain, Mr. Simmons. I like that.\" Preston shook my hand again, \"I guess I'll have to take what I can get. Who would of thought I would run into a shrewd negotiator of such a young age?\"\n\n*\n\n\"This doesn't make sense?\"\n\n\"No, you don't make sense,\" Isaac shook his head as he beat up a computer controlled character. \"You come over here to study instead of being in a house with four girls that constantly want to have sex with your lame ass. If I had that, I would have settled down with a girl already... Maybe.\"\n\n\"I told you already, I can't get anything done at home. It's too distracting.\" I then mumbled, \"Not that I'm complaining.\"\n\n\"I heard that,\" Isaac laughed.\n\n\"Okay, yeah, I get it, but Professor Tisdale may not care about homework, but that doesn't mean she let's the teacher's aide grade exams easily. I got to know this stuff by tomorrow. \" \n\nThe problem was that I stopped looking to study when I saw a prior assignment that was stuffed into my book. Based on the date, it appeared to be the assignment about 'if a tree falls in the forest' concept... the one that was to use brain waves to move objects and caused me to blow up Alyssa's lab in the basement. But what I was holding was something far simpler...\n\nHow Does Emotion Affect the Way People Process Music and Art in the Mind?\n\nAll right, yes, I understand that this paper wasn't considered simple. Hell, I wouldn't have been able to think of this topic, let alone write it. However, it wasn't what we (okay, almost exclusively Alyssa) worked on for three weeks with Alyssa having even going back further - to the beginning of her freshman year. This paper was supposed to be the unveiling of not only her hypothesis, but the application of it as well... It had worked. Hell, I thought this was what she used to get the paid position in the science lab.\n\nIt just didn't make any sense.\n\nI tried to study, but found I couldn't. My mind kept going back to my discovery even though I promised myself not to worry about it and discuss it with Alyssa when we both got home.\n\nBut why would she discard a year and a half of her work? This was supposed to be the springboard to her hopes and dreams. I loved her too much not to figure out what happened and do everything I could to fix it, if I could.\n\nAnd yes, I just admitted to myself for the first time that I love Alyssa Peterson. It was a shocking revelation and spurred me on even further.\n\n*\n\nI made it home before Alyssa, and the three other women in my life instantly knew something was amiss. In\u00e9s tried to pry, but I dismissed her questions immediately. Lacey sat on the floor, her head bowed while Charlotte laid next to me on the couch, her head just next to my leg. I knew both of them just hoped their presence would be enough to get me out of my funk.\n\nIt wasn't.\n\nAs soon as Alyssa arrived, I stood. \"We need to talk, Alyssa. Privately.\" It definitely came off more sternly than I intended, probably due to me stewing over this dilemma for a couple hours now, but my point had been clear.\n\nEveryone was stunned as I haven't used her given name since I started calling her Sunshine. Now everyone knew my melancholy was because of her, the Matriarch of the family. \n\nAlyssa was perhaps the most surprised. She had a 'what happened?' viewpoint that switched to a 'what did I do?' after a quick glance to the other three informed her that it had to be something she had done.\n\nI made my way to the bedroom where the old homework assignment was on the bed. I picked it up and turned as Alyssa shut the door. \"What's this?\"\n\n\"That is a paper on human emotion and how the arts as we know them are analyzed by the brain.\" Alyssa breathed a sigh of relief, \"Is that really what this is about?\"\n\nI'm glad she was relieved and it made me feel better; less angry and more to where I should be in this conversation... a concerned boyfriend. \n\n\"What happened to your pet project, the one that you worked on for a year and half?\"\n\n\"The irony in the word choice \"pet\" isn't lost on me. You may find it funny as well, after I explain.\" Alyssa moved forward and gave me a brief kiss. \"I ended up scrapping it because of a severe side effect, or I should say, I scrapped the idea of going public due to a severe side effect.\"",
        "I moved even closer, \"Oh my God, Sunshine, are you okay?\" I'm not sure if I could handle a \"no\" to that question.\n\n\"If you really want to know, I'll tell you, but,\" Alyssa smiled sweetly, \"You may want to sit down for this, Baby.\"\n\nI didn't like where this was going. It's never a good sign when you have to sit down to talk about something. \n\n\"Don't tell me one of those grant wielding Professor's stole your work just to look good to the University. And then you had to get rid of the research to protect it... I'm going to kick their ass as soon as we're done here.\" I punched my fist into my palm.\n\nIt was the only explanation I could think of... and it was the main plot of a spy movie I had watched.\n\n\"No, nothing like that, in fact,\" Alyssa flipped her styled hair in her hands to show the circular barrettes attached to her scalp. \"I'm actually still using the technology. These are an upgrade over the mesh cap.\"\n\nSo, not barrettes? At least I didn't have to get expelled for beating up a Professor. \"Well, anything would be an improvement over that mesh cap.\" However, I'm sure she was speaking in regards to usability while my analysis was simply about comfort.\n\n\"Do you know,\" Alyssa began pacing as she explained. \"You are the one that made my project a success? Without you, I'd still wouldn't have it working. All the math, all the science, none of it solved my issue. Until you clicked a dot on the screen. So simple, yet, so easily overlooked. That's because I only thought that my device was the only thing in which the remotes on the cap were trying to connect. I was wrong.\"\n\nI tried to downgrade my part in the project, \"All I did was click a dot.\" It was her work, afterall.\n\n\"And turn up the amplifier; let's not forget that very important detail.\"\n\n\"I doubt that had much to do with anything,\" I tried to downplay that as well. Blowing up all the glass in her basement is not a highlight in my life.\n\n\"Ah, but it is important,\" Alyssa raised a pointed finger in the air. \"Until then, I only knew of my recieving device being connected, but in actuality, your brain waves were able to link with my brain as well! It's absolutely amazing!\" She was becoming so animated, it was hard not to smile. Her passion for science was admirable.\n\n\"So why not show it to someone?\" I tilted my head, \"Didn't you say you wanted to use this project as a foot in the door?\"\n\n\"Baby, when I say this next part, know that I'm not making fun of you,\" Alyssa smiled; obviously, she was softening me up for the kill. \"You are not understanding the ramifications of what that meant.\"\n\nOuch... Sort of; because I really didn't understand. \"Okay, tell me.\"\n\nAlyssa sat next to me, one hand comfortably on my thigh the other wrapped around my back. \"You, Josh Simmons, was actually connected to my brain.. not just connected, but influencing, or a better term would be forcibly manipulating; yes, you forcibly manipulated my brain to think and act a certain way.\"\n\n\"I... I... did?\" I was stunned into disbelief. This was definitely not in the plot to that spy movie.\n\n\"Every one of your thoughts, Baby, became mine,\" Alyssa moved her hand from my thigh to my chest as she leaned in an gave me a kiss on the cheek. With how she wears her lipstick, I wouldn't be surprised if it had left a mark. \"Do you remember what you were thinking?\"\n\nThe hell if I knew? I was bored out of my skull and ready to drop dead exhausted due to the early meet up times. Still, if this was something serious that I did to Alyssa's brain, I damn well owed it to her to try. My eyebrows furrowed as I sat in deep thought.\n\n\"That's sweet, Baby.\" Alyssa soothed at my lack of answers. \"You really are worried about me.\"\n\n\"Of course I am; I love you.\" I went right back to thinking... hard.\n\nAlyssa put a hand to her mouth as she gasped, \"You love me?\"\n\nRealization of my words finally hit me. I really didn't want to tell Alyssa that so nonchalantly. Oh well, no point in trying to be smooth now. \"Sorry; I really did plan on telling you in a more romantic way.\" My eyes met hers, \"Yes, I love you.\"\n\nA tear trickled down Alyssa's cheek. She pushed me back onto the bed and straddled me. \"You have no idea how much I want to fuck the shit out of you right now... and then get off and give you a blowjob that would last three days just because you said that.\" She rocked against me to prove her point. She leaned down and kissed me deeply, but pulling away before it became a full blown make out session. \"Your first thought when we connected was of me.\" She then smiled, \"That was important. I was to be at the top of the pecking order of what I would build with my remotes to fulfill your dreams.\"\n\n\"Wait a second... You're using your contraption on other people for my benefit right now?\"\n\nAlyssa smiled as she sat back. It was nice that she wasn't trying to be the whore of a sexpot she normally was in order to finish the conversation. \"No, not currently, but I wear them in case I need to suddenly. You mean everything to me.\"\n\nI took a deep breath. So Alyssa had manipulated at least one person's mind for my benefit. My first instinct was to ask 'who?' but I felt I needed some other questions answered before I jumped down that rabbit hole. \"Are the changes permanent or can we fix it?\"\n\n\"Let me put this in terms you'd easily understand... Say you wrote a code and afterward you found a glitch. You don't just rewrite the whole code, do you?\"\n\nI maybe a C+ student, but for a guy who works with computers, this was an easy one. \"No, you create a patch.\"\n\n\"Exactly,\" Alyssa pointed her finger in the air. If she were standing, I'm sure she would have started pacing. \"My technology works the same way. Your thoughts over wrote my own. I remember how I was, but your thoughts patched over my current course in life with your directives. Once I understood what happened, I dissected all variables - and it would not be wise to change a change even if its reverting back to the way it was because it's not deleting what was done, but merely adding another layer. It also would not be wise to do a completely different change, either, for the same reason, although if the changes are minor and not whole personality changes, multiple influences would be fine with increased monitoring. But for large changes, it would be like creating a third personality in addition to the original and the altered version. Eventually, the mind will fracture leaving the person brain dead.\" \n\nI cringed at that sombering news. \"What have I done?\"\n\nAlyssa grinned, \"You made me a very happy woman.\"\n\nMy eyebrows raised in suspicion, \"So you're happy I somehow messed with your mind?\" \n\n\"Of course,\" There was no hesitation in Alyssa's answer. \"Before that day, I was miserable. I practically lived in a basement with no one to share anything with and now I have friends and a boyfriend who loves me who I am absolutely devoted to.\"\n\nI gave a sigh of relief; at least Alyssa is better for whatever I put in her head. \"And because it messes with minds, that's why you won't announce your findings?\"\n\nAlyssa grinned as the tone in my voice conveyed calm. She also began unbuttoning my pants. \"Yes. Mind manipulation would not be good for humanity. Some will want to do good, sure, but even if one person uses it for evil... someone could use my technology to demand someone to be a terrorist and they would willingly obey.\"\n\nI was beginning to zone out Alyssa's words as she took off the rest of my clothes, but I still needed a final question answered. \"Who did you use it on?\"\n\nAlyssa took her dress off before leaning down. She gave light kisses to my chest and then worked her way up to kiss me briefly on the lips. \"Are you sure you would want to know? I will tell you if you truly do, but remember, all changes are permanent, so if you can't handle the truth, people will get hurt.\"\n\nI closed my eyes and thought carefully. Could I handle that? \"Okay, tell me one person you used it on.\"\n\nIt was obvious Alyssa was getting antsy, but she also had yet to be carnal or even just put my erection into her depths. I got the sense that she knew this conversation was delicate. She was treating me with kids gloves so I understood all consequences involved. \"Charlotte's parents.\"\n\nWith how angry Mr. Westgate was before Alyssa talked with them compared to the complete role reversal afterward, that made sense. \"That was two people,\" I smiled.\n\n\"If I would have said one and not the other, you would have known anyway,\" Alyssa shrugged. \"I made it to where they would accept not only their daughters feelings, but also her unique relationship.\"\n\n\"Name another one.\"\n\n\"My first test subjects were my parents. I wanted them to not only accept my relationship with you, but any changes they might perceive in me. It would be difficult to hide a new persona from people who have known you your entire life. I also needed to test limits, range, and various other aspects of the technology. A couple inconsequential people were Lacey's old slutbox friends so they would back off and leave you alone as well as the manager from Shenanigan's.\" Alyssa leaned back into my ear, \"Last chance to walk away from the rest of the truth. Remember, ignorance is bliss.\"\n\nI'm pretty sure I had a good idea who was next. Especially after that \"pet\" comment from earlier... And she had also mentioned she was the top of a list, which means others were on that list... and who I usually thought about were only a few particular girls. She had lined them up like dominoes for me to knock up... err, knock down. I heeded Alyssa's warning, \"I don't want to know anymore names and I definitely do not want to know specifics.\" Just covering all my bases.\n\n\"Goodie,\" Alyssa licked her lips. \"Now I can show you how much I love you.\" Her hand took hold of my cock. \n\n\"Everyone you changed is happier, right?\" I really needed to hear this. I bit my lip in anticipation. \n\nAlyssa paused; she had thought we were done conversing, but I still had some hang ups. She laid on my chest, forgoing a certain insertion. \"Without specifics, yes, Baby, I swear everyone is not only happy in their lives, but will always be.\" She then kissed me, passionately, wantonly. It was enough to make my toes curl. \"Now I have a question for you; are you happy with this life of yours where you have four women, willing to do whatever, whenever, however, just to please you? Is there anything in your life you'd truly want to change?\"\n\nI pondered carefully. Can I live like this? Can I live with - let's just call it like it is - a harem of all the women I had fantasized about at my personal beck and call? Was there something I would change?\n\nThe decision was easy.\n\n\"There is something I'd like to change.\"\n\nAlyssa was taken aback, as if she had failed. She sighed before she asked, a sliver of melancholy hanging in her throat. \"What would that be?\"\n\n\"I don't want to fuck you.\" I rolled Alyssa to the bed, staring at her through her hazel eyes that were beginning to tear. It was clear that in just a mere moment, the damn was about to break. \"I want to show my fianc\u00e9 how much I love her.\"\n\nYeah, I know I'm only nineteen, but seriously, how could my life get better? Who could possibly take Alyssa's place?\n\nThat answer was: No one.\n\nThe damn did break, but the tears were a complete one eighty from what they were going to be... Alyssa's smile was exuberant. \"Hell yes, I'll marry you, Baby.\" Her arms fiercely wrapped around my body.\n\nIt was a tough maneuver under Alyssa's grip, but I managed an arm between us and finally inserted myself into her canal... And then something magical happened. I had wanted to have this coupling be all about Alyssa, but when I stared lovingly into her eyes, it felt as if I was staring directly into her soul and she was doing the same, neither of us prepared to look away.\n\nI pushed forward as Alyssa raised her hips... it was that simple. My goal was to show her my new truth, my new reality, was her. She was everything. \n\nAlways and forever.\n\nAlthough Alyssa had always claimed that she devotedly loved me, and with her actions it was true, this is the first time I truly felt that devotion. Her eyes, her smile, her soul all screamed I'm yours for an eternity. \n\nWe were building to something vehement. Whenever we fucked before, it was always about release, this was so much more. This was a merging of our souls to be united for as long as we both shall live.\n\nIt was intoxicating. \n\n\"I love you, Alyssa.\"\n\n\"I love you, Joshua.\"\n\nBoth our sentences were full of passion, and sincerity... and also strained. \n\nAt the completion of Alyssa's string of words, she came. Her back arched, muscles tightened, and a throaty moan escaped her lips. It was the first time she climaxed without my own triggering it. Her pussy began pulsing, begging for me to join her in rapture.\n\nAnd I did.\n\nI came... hard. Perhaps harder than at any time in my life. My body tensed and I groaned something that reverberated off the walls as spurt after spurt flowed into Alyssa, the very essence causing her to go over the top again in orgasmic bliss.\n\nWe smiled at each other, enjoying our profound euphoria as we both panted. I had just enough energy to avoid crushing her under my weight, falling to the side of her. My back relished the mattress underneath it as Alyssa sidled in next to me, her head on my shoulder, her hand grazing lightly on my chest.\n\n\"You know, I would be truly happy with just you in my life,\" I tilted my head downward to see a full head of brown hair.\n\n\"I know, but that won't change anything. They really have become my friends and I know what would happen if they were abandoned... And I really don't want that to occur.\" \n\n\"Became your friends?\" I eyed Alyssa suspiciously. \n\n\"Without specifics, let's just say I thought it was for the best that everyone get along as well, so I may or may not have added a tiny bit of history to ease that transition... And it worked better than I could have hoped. I never had a friend before, and now I have three. Besides, I know you enjoy them, and that truly makes me happy and proud that I was able to give that to you.\" Alyssa lifted her head, a smile plastered on her face. \"Do you really want to give them up?\"\n\nShe knew me way too well. \"No; I just wanted you to know how I feel about you.\"\n\n\"Oh, so what you were saying then, is that you are trying to make an honest whore out of me? Well, forget it. You know how good Lacey gives a blowjob? I can tell you from experience she is equally, if not better at eating pussy.\"\n\nIt's official... I never have won against Alyssa and now I know I never will.\n\nI shook my head, \"Don't leave this time, I want to wake up next to you.\"\n\n*\n\nI smiled as I awoke; Alyssa was just as I left her... in my arms. I glanced at the clock, it had been a wonderful hour long nap. \n\nAlyssa purred, \"Enjoy your nap?\"\n\n\"I did. Things seem to be clearer after sleep.\" I held Alyssa tighter, which gave me the strength to say what needed to be said, especially after the power hungry, I controlled everyone in the world dream I had. \"Promise me you won't tell me how it works.\"\n\nAlyssa shifted in bed, her eyes now looking at me, \"Don't trust yourself?\"\n\n\"Nope,\" I chuckled. \"But I also want you to not completely change anymore people. A man needs limits and you are my limiter as I will be yours.\"\n\nI could have just said don't use it ever again, but that would also not be fair to Alyssa. She worked so hard on this project... At least, that's what I told myself.\n\n\"Okay; I promise,\" Alyssa nodded. \"But don't think that if I see someone that catches your eye, I won't hesitate to allow you to have a weekend of unbridled lust with her... and I mean anyone; they could be an actress, singer, super model, or some ditz on the street. I truly get off on giving you what you want. And, of course, your whore of a wife will...\" She then felt my erection rising to her words. \"My someone likes the thought of that.\"\n\nI smiled a predatory grin, \"I could fuck you right now.\"\n\n\"Really? Sounds good, but you did all the work last time and I want to repay the favor. Only this time...\" Alyssa paused her thought to call out, \"You can come in now.\"\n\nThe door opened and Lacey, In\u00e9s, and Charlotte came into the room.\n\n\"I'll have help,\" Alyssa finished her prior thought. The corners of her mouth then rose with the wild debauchery she was concocting, \"Girls, our Patriarch here has a cock that doesn't seem to want to stay down.\"\n\nThey all seemed to respond with some sort of sarcasm along the lines of \"Oh no, whatever should we do?\"\n\nPlayful minxes...\n\nAlyssa scooted up in the bed, her head leaning down to kiss me with a lovers kiss. Her voice took on a sultry, seductive tone, \"Enjoy, Baby, my wonderful love. I know I will,\" she finished by licking her lips before turning her attention to the trio, \"He's all yours.\"\n\nAll three eyed me lustfully as they dove onto the bed...\n\nYes, I am certain if I had the ability to change the past, I know I would most definitely do everything exactly the same way.\n\nWouldn't you?"
    ],
    "authorname": "fgmntfmgnshn",
    "tags": [
        "blow job",
        "doggie style",
        "harem",
        "master",
        "mind control",
        "missionary",
        "pet",
        "riding",
        "slave",
        "teen"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/domino-effect"
}
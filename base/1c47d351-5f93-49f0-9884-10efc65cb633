{
    "title": "Just Say Their Names",
    "pages": [
        "<center>Just a short tale for your laughter and amusement. \n\nAll involved are, of course, at least 18 years old.\n\n+</center>\n\n\"I just need you to tell me the names. Tell me and spare yourself.\"\n\n\"Never!\" Her proud eyes glared at me.\n\n\"You can't hold out, you know,\" I warned her. \"Everyone breaks sooner or later.\"\n\n\"Bah! Better men than you have failed!\" Her chin, with just a tiny hint of dimple, raised itself as if daring me to try.\n\nHer slim wrists tugged tentatively against her bonds; she might as well have pulled against a bridge abutment. \n\nI noticed what might be a slight looseness in the strap on her left wrist. She tried to jerk free as I went to adjust it, but I was ready for her. I pulled the strap tighter by another hole, tucked in the post. \n\nI stood there beside her, holding the end of the strap in my fingers, its tip just barely into the keeper loop.\n\n\"Should I pretend to leave the strap loose?\" I mused aloud. \"Give you false hope by not tucking it in properly?\" \n\nFor just an instant, I saw a flicker of optimism in her eyes before she realized I was toying with her. Anger replaced it.\n\n\"My father is the Lord Chancellor! He will have you flayed alive for this!\" she growled.\n\nI kept my voice flat. \"Your father the ex-Chancellor lies shackled in the next cell by order of the Empress herself.\"\n\nI saw a flash of fear in her dark eyes, again quickly replaced by anger.\n\n\"He will hear your cries,\" I informed her. \"Indeed, I do hope you do not give in too quickly, girl. Sustained screams from this cell will aid the Grand Inquisitor in his personal interrogation of your traitorous sire.\"\n\nI smiled, ran a hand slowly over her naked torso. Her skin was flawless, stretched tight by her spread-eagled position.\n\n\"Promise me you won't give in too soon?\" I whispered. \n\n\"Damn you!\" she whispered back. \"You'll burn in Hell for what you do here!\"\n\n\"Perhaps,\" I said softly, my hand cupping first one young breast and then the other, \"But you, pretty blossom, will be there to watch it.\" \n\nI thumbed a soft brown nipple, watched a shudder run over her body.\n\nI stood back to survey the scene. The heavy candles arranged around the room flickered in an errant draft. \n\nThe girl's slender form was bound to an X-shaped frame of wrist-thick black iron pipes. Horizontal and waist-high, its legs were securely fastened to the floor. A fairly small red leather pad supported the small of her back; another supported her head.\n\nPadded U-shaped rests covered in the same leather were mounted at the ends of each limb of the cross. Thick leather straps held the girl's wrists and ankles securely fastened to the rests and spread very wide. Her waist and head were unsecured.\n\nHanging on the wall beside the frame was an array of matching red leather belts of various sizes, instantly available should I have cause to further restrain her. For the moment, I left them there, preferring the almost-total access her present bonds gave me to every area of her youthful body.\n\n\"You know you will submit sooner or later, girl,\" I said. \"Your name was whispered to the Empress as one deep within in the Cabal's membership. You have in your pretty head the identity of the other nobles involved in this profane conspiracy.\" \n\nI trailed one forefinger lightly along one collarbone, down her chest, between her young breasts. She shivered at the sensation.\n\n\"Why not spare yourself all this unpleasantness?\" I asked.\n\nShe just glared at me.\n\n\"No?\" I smiled at her. \"So be it.\" I lightly flicked one nipple with a fingernail, watched the rage rise in her eyes.\n\n\"Tomorrow, wench, you are to appear in public; today there can be no whips, no hot irons or...\" I stopped, let her imagination bring up the worst.\n\n\"Today,\" I smiled, \"you will endure other... methods.\"\n\nHer head turned as I waved my hand towards the tray of implements positioned beside her cross.\n\nI lifted them, one by one, presenting them to her gaze. She understood how most of them would be applied and another shudder ran along her slender flanks.\n\n\"You know what I need, woman. The Empress has charged me to determine the names of the other members of your treason. Just say their names and all this will be... unnecessary.\"\n\n\"You'd let me go, just like that?\"\n\n\"Hardly,\" I smiled, grimly. \"You could hardly expect that of her Most Regal Majesty, could you? But who knows - if you are cooperative, maybe your sentence will be only a closely-supervised exile. At worst,\" and I stressed the word heavily, \"you would receive a quick, painless, dignified execution, one suited to your noble rank.\"\n\nI stared down at her, pinched one nipple, just a little. \"There are far worse fates awaiting a traitor, particularly one as delectable as yourself.\" I pinched the other one a little harder, just enough to make my point, let go.\n\nA tear trickled out of the corner of one eye, but she shook her head.\n\n\"So be it,\" I said.\n\nI selected a light blindfold. Of simple design, it consisted of nothing more than two black leather eye patches with red satin padding on the inside and connecting ties of soft red ribbon.\n\nHolding it by the end of one tie, I trailed it slowly up her torso. I flipped it back and forth to show both colours against her pale skin.\n\nHer face filled with a mix of fury and defiant scorn.\n\nI dragged the other tie slowly between her young breasts, circled it around one nipple, then the other. I could see them growing firm at the sensation.\n\n\"Ah, you like that.\" I chuckled.\n\n\"Bastard!\" she hissed.\n\n\"Maybe,\" I admitted, cheerfully. \"Maybe. But today I'm the bastard who has both your fate and your body in his hands. And will tomorrow, too. And for however long it takes to get the information the Empress wants. Meanwhile, wench, which colour looks better against your skin, do you think?\"\n\nI walked down to by her right foot, and reversed one of the eye patches so that she had both black leather and red satin facing her. Holding the two patches, I began to slowly drag their edges around her toes. Her feet jumped and bounced within their straps, trying to escape. She giggled just a little, regained control.\n\nI slowly began to draw them, side by side, up along her leg.\n\nShe twisted underneath the gentle sensation, her eyes flicking back and forth between my face and the slowly-moving pads making her soft skin tingle.\n\nWhile she continued to jerk and heave, she didn't laugh until I had reached her breasts. Then a soft giggle escaped, turning quickly into a loud series of snorts. \n\nThe snorts turned to hoots of laughter when I began to tease her now-protruding nipples with the pads. Despite my success, I didn't linger there; rather, I kept them moving slowly down off their curves, over her upper chest towards her neck. \n\nI knew that she would attempt to bite the blindfold if I was foolish enough to bring it within reach of her teeth. Instead, I stepped around to behind her head and swiftly put it in place, firmly knotting the ties behind her neck. I checked for fit and stepped back.\n\n\"Blindfolding.\" I remarked, professorially. \"It heightens the subject's sense of helplessness, increases the sense of dread, for one can never know or anticipate what is going to happen next.\" \n\n\"Now,\" I said softly. \"I wonder what is next? Where to start on such a lovely... subject?\" \n\nAgain I let my fingertips drift lightly over her breasts. She shivered under my touch.\n\nI turned to the tray and picked up a flask of warmed oil scented with essential scents, primarily musk and patchouli, aromas calculated to work directly on the female subconscious, heightening receptiveness and sensation.\n\n\"Listen, girl.\" I advised her, \"It would be a shame for you not to appreciate my... efforts to the fullest. We're going to try to make your skin more sensitive.\"\n\nI poured a line of oil down one shin, over her instep and onto the toes of that foot. I could see her nostrils twitch at the scent. For just a moment, there was a fleeting smile on her face, instantly replaced by a look of puzzlement. How could something smelling so nice be part of...?\n\nI gently rubbed the sweet oil into her skin with my hands, paying particular attention to her toes and soles, before going around to the other side of the iron frame to repeat the process with her other leg.\n\n\"Soft skin is far more sensitive, more receptive,\" I said. \"Even yours can be made softer.\"\n\nShe squirmed at the sensation of my hands on her fair body, tugged at the restraints.\n\nI continued to oil her legs, including their backsides to the greatest extent possible. I poured a small pool into her navel, spreading it around with my palms. I tried not to tickle; my intent was more long-term. \n\nI slid an oily palm over her smooth mound, felt its plump pad shift and roll beneath my hand. I turned and the girl's body twitched as my slick finger slid between her lower lips, gently traced her opening.\n\n\"I'll have your manhood for this indignity!\" her voice grated.\n\n\"The Empress will have your head for your treason, wench - if you are lucky. Meanwhile, as you well know, anything is permitted Her inquisitors in the course of their duties.\" \n\nAs I spoke, my finger slid deeper into her, my thumb rolled oil over her soft pearl. The sound of her breath hissing in filled the room as her naked figure below me twisted, limbs pulling for the release only her surrender could provide.\n\nI left her sex and moved up her body, pouring more oil onto her chest and softly, patiently working it into the skin of her breasts. Her head shook from side to side as I circled her now-stiff nipples with my thumbs, softly squeezed her soft orbs, encouraging her already-soft skin to absorb more of the softening oil.\n\nUp her shoulders, over her armpits, along her arms, I softly stroked the oil into her young body.\n\n\"Damn you! And your thrice-damned Empress too!\" she hissed.\n\n\"That will look well in my report to her,\" I remarked dryly. \n\nWith a last few gentle strokes, I rubbed the last of the oil under her chin, behind her ears. \n\nI wiped the excess oil off my hands and pondered my next step. I wanted to give the oil a few minutes to soak in.\n\nI looked at the instrument tray and, selected a Wartenberg wheel, a coin-sized free-spinning wheel studded with close-set sharp pins mounted at the end of a pencil-length handle. Stepping between her legs, I crouched down and ran it, very lightly, down the sole of one foot.\n\n\"No!\" she shouted. \"Stop it!\"\n\n\"Only you have the ability to stop it,\" I said, carefully rolling the wheel up one sole and down the other.\n\nShe began to shake, obviously repressing the inevitable laughter. \n\nKeeling between her legs, I looked up towards her face, saw her biting her lower lip. Then I noticed a small drop of fluid oozing from between her lower lips.\n\nExcellent. She was proving an excellent subject, exceedingly sensitive to stimulation.\n\nI continued to play the bottoms of her feet with the wheel, pausing, turning, making sudden changes in direction. Each shift was met with a twisting of her feet and, eventually, bursts of laughter.\n\n\"NO! Quit!\" she shouted.\n\n\"Just say their names,\" I said. \"Tell me.\"\n\nLeaning forward, I ran my fingertips lightly along her flanks, starting at her armpits and trailing slowly down towards her waist. \n\nThe girl exploded into laughter. Her full breasts wobbled and shimmied as she attempted to evade my gentle, remorseless stokes.\n\n\"No, no!\" she shouted. Her protests trailed off into a high scream. \n\nI lifted my hands, softly stroked her nipples as she gasped for breath.\n\n\"Stop that!\" she cried, \"You can't do that!\"\n\nI didn't bother to reply. Instead, I trailed my fingernails lightly over first one flawless inner thigh, then the other. They quivered beneath my touch.\n\n\"No!\" she cried.\n\n\"No? Just wait and see,\" I said.\n\nI lowered my hands to behind her knees, softly massaged her skin. The girl exploded in laughter, screamed loud enough to hurt my ears. \"Stop it! Stop it! <i >Stop it!\" Her legs jerked and strained against the straps holding them in place.\n\n\"Puzzling. All I am doing is running my fingertips over you. That's not painful, yet you are screaming and jumping around.\"\n\n<i >\"Stop it!\" \n\nI let my voice grow hard. \"Just say their names, traitor.\"\n\nI dug my fingers into her flesh, prodded for nerves and her laughter took off again, higher this time. Her legs twisted and jerked under my hands as she tried to escape.\n\n\"Noooo!\"\n\n\"I didn't hear you,\" I said. \n\n\"Please stop! Please!\" Her white breasts shook, shook in the candlelight.\n\n\"I didn't catch that,\" I teased.\n\nI stopped, stepped to the foot of the frame. The girl was gasping, panting. Shivers ran up and down her torso.\n\nWith one hand, I started running my fingers between the toes of her one foot and stroked the soles of her foot with my other. Her hair whipped around her as her head thrashed from side to side. Peals of laughter exploded from her.\n\n\"Please, <i >oh please!\" Stop!\"\n\nI didn't stop. Instead, I picked up a large, stiff feather in one hand and a soft make-up brush in the other. Stepping up to one side, I began to tease and torment first her armpits and then along her ribs.\n\nThe girl's shrieks became frantic. Again and again she jerked against her bonds. Again and again she pleaded with me to halt, just for a moment.\n\nI paused, leaned over to her ear and whispered, \"It's a pity you can't see it coming, isn't it? No chance to prepare, no chance to get ready to resist.\"\n\nI lifted my head back a little and began to tease around the form of one breast with the feather, firm strokes with its tip circling inwards towards the nipple. I dropped the brush back on the tray and tucked the fingers of my free hand under one ear to tickle her there. Her body bounced up and down on the frame; her head moved in an attempt to catch my hand with the angle of her jaw. \n\nIt was a pointless effort. She yelled in torment as I shifted my tickling to under her chin. She begged, pleaded with me. \n\nI switched the feather from one breast to the other, this time concentrating on her taut nipple. Picking up the brush again, I began to stroke up and down the inside of her upper arms. She howled in a spasm of laughter.\n\n<i > \"Pleeeeease!\"  she begged me. \n\nAgain I growled, \"Say their names! Tell me! In the name of the Empress, say it!\"\n\n\"No!\" she cried out between clenched teeth, her courage equalled only by her beauty.\n\nI stopped, dropped the feather on the tray, continued to tease her nipples with the soft brush. \n\n\"It's amazing how weak you are,\" I mocked. \"Brought to this state with nothing more than the gentlest touches. This is nothing, girl! How long do you think you can possibly hold out?\"\n\n\"Although I must admit,\" I said, firmly cupping one breast in my hand, \"You make a very <i >pleasing subject.\" I squeezed, firmly but gently, truly enjoying its soft feel. \"Perhaps the Empress might gift you to me after your trial.\"\n\n\"I'll kill you in your sleep should that happen!\"\n\n\"I doubt it,\" I chuckled. I wiggled a fingertip in her navel for an instant. She exploded in laughter. I stopped, ran a finger the length of her sex.\n\n\"I think it would be worth the risk.\"\n\n\"I'll kill you!\" she screamed in her anger. \n\n\"I think I <i >will  ask Her,\" I chuckled again. \"It's not often that one such as I is privileged enough to possess such a fine concubine.\"\n\nShe sagged, lay still under my roving hand, perhaps trying to shield herself in dignity.\n\nI knew the cure for that.\n\nHer dignity exploded in shrieks and howls of laughter as my fingers danced on her ribs. She shrieked and threw her body back and forth against the frame. I paused for a moment.\n\n\"How curious,\" I remarked. \"I've just had an image of that musician at the concert last year, the one sponsored by - of all people - your traitorous father. Remember it?\"\n\nI fluttered my fingers up and down her ribs, halted this time just before her twitching body erupted again in laughter.\n\n\"Remember it?\" I said, tapping a finger here and there - enough to keep her from recovering. \"There was a foppish musician there, one playing...\"\n\nHere I again danced my fingers across her ribs, not stopping when she began to cry out again.\n\n\"... THE SPINET!\" I shouted over her yells.\n\nI stopped again. I picked up the makeup brush, teased her nipples as I continued.\n\n\"You were there, once-so-proud mademoiselle. You were sitting by your father, wearing much jewellery and a deep-cut red dress, if I recall. How jealous all the women were of your position and finery.\"\n\nI tapped three fingers on her by-now incredibly-sensitive ribs - slowly, one at a time. Then again. \n\nShe squirmed at my caress, hissed.\n\n\"I wonder how many of them would be jealous of you now?\" I mocked. With that, I set my fingers 'playing' her ribs, harder, faster. Up and down over her soft flesh they roamed, bouncing, prodding.\n\n\"Please, oh please, <i >NO!\"  she shrieked.\n\n\"YOU CAN ALMOST HEAR THE MUSIC, CAN'T YOU?\" I yelled.\n\nI stopped.\n\n\"Oh, God,\" she gasped, her chest rising and falling. \"Please, no more. I beg you - no more.\"\n\n\"What was that? More? You want more? You're enjoying this?\"\n\nHer body tossed and jerked in her distress as I dug my fingers and thumbs into her waist, wiggling them. Her cries echoed across the room.\n\n\"Oh dear!\" I chuckled. \"Don't tell me I've found a traitor who actually likes this? The Empress will be so displeased.\" My fingers and thumbs shifted up and down her side.\n\nShe started to choke and I stopped for a moment. She gasped, fought for control.\n\nI hardened my voice. \"How far you have fallen, wench! Your family is disgraced; your father's heart must be tearing itself apart at this shame. How he must be feeling at hearing you!\"\n\nI again dug searching fingers into her waist. Her screams redoubled. It took all my strength to maintain my grip, such was her heaving efforts to dislodge my hands. My fingertips moved up and down, felling the firm muscles within pulse and shake under them.\n\nI stopped, leaned over her body. \"The names, girl?\"\n\nShe shook her head. \"Never!\"\n\n\"Time to extend our examination, then,\" I said.\n\nI walked to the corner, returned with two iron stands of about the same height as the frame. On each was mounted a device of my own invention, a small electric motor turning a simple wooden disc about the size of a saucer. Around the rims of the discs protruded dozens of feathers, sticking out like spokes on a rimless wheel. A simple dial would allow me to control the rotation. \n\nThe axles were deliberately skewed - drilled at an angle, so to speak. Instead of the feather strokes always being in the same place, they would drift from side to side over the bottoms of her feet.\n\nI placed one wheel by each of her feet, feathers pressing against her soles. \n\n\"How quickly things change for us,\" I remarked as I made some final adjustments. \"Yesterday, you were the favorite daughter of the all-powerful Chancellor. People took off their hats and bowed as your carriage passed through the streets. Mothers named their daughters after you.\"\n\nI stood, took up the control in one hand.\n\n\"And now...\"\n\nI adjusted the control and the two feathered wheels began spinning., very slowly. She jerked at the first sensation. \n\nI took her blindfolded head in my hands, leaned in, spoke just loud enough for her to hear. \"And now, you're just one more traitor awaiting her inevitable sorry end.\"\n\nAs I stepped back and increased the speed, she began to laugh hysterically.\n\n\"No! Stop it!\" she shouted. \"NO!\"\n\nI increased the speed still more. She jerked, writhed, yanked against her bonds. Her laughter became continuous, almost frantic.\n\n\"STOP!\" she cried. <i > \"Pleeease!\" \n\n\"Speak, girl. Let me stop all this for you. I can. I will. Just say the names.\"",
        "Her blindfolded face was lost in a blonde blur of hair as her head thrashed around, but still she said nothing, uttering nothing but still more desperate laughter.\n\nLeaving the wheels to spin at a modest rate, I picked up a pair of matched hairbrushes from the tray. Her inner thighs were rigid as wooden beams in her attempts to pull her way loose; I began to run the bristles lightly up and down her flawless skin.\n\n\"Arghhh! <i > No more! &hairsp; STOP!\" she pleaded.\n\n\"Say the names, child!\" I demanded again.\n\n\"Stop it!\" was her only reply, barely comprehensible through her frenetic laughter. \n\nI moved the brushes up her legs, onto her stomach; her body spasmed in response, but she still said nothing to cause me to stop her suffering. I moved my attentions back down her legs, began teasing her toes.\n\nI smiled as her feet squirmed and jerked within their bonds. She could certainly not escape or pull loose, but there was a lot of, quite literally, wiggle room. \n\nI'd planned for that.\n\nI stopped all the tickling and removed her blindfold. \n\n\"This much, girl, you should be able to see,\" I said softly.\n\nMoving to her feet, I tied a length of stout thread around the big toe of her right foot. Her eyes grew wide as I produced a child's balloon the size of a large watermelon, taut with helium, struggling to escape upwards. I tied it to the thread, holding the taut, brightly-colored orb above her breast as I did so to get the right length.\n\nAlready dangling from the balloon was a foot-long piece of soft, stretchy elastic terminating in a firm but gentle clip. \n\nFastening the clip carefully onto her now-swollen and protruding nipple, I simply released the balloon. It shot upwards, coming to a sudden halt a forearm's length almost directly above her breast. It bounced up and down several times on the rubber band before beginning to sway from side to side, producing a constant tease to her nipple. More importantly for my purposes, the balloon also would inflict a whole series of unpredictable tugging, stimulating sensations every time it moved.\n\nAnd, of course, it would move every time she moved her foot.\n\nAnd she could not avoid movement whenever I tickled her...\n\nIn the flickering candlelight, I could see her eyes filling with dread as she came to understand the diabolical implication of my arrangements.\n\nSwiftly, I repeated the process on her left side. Examining the setup, I adjusted the threads, tightened one up, then smiled down at her.\n\n\"Now, unless you have changed your mind, girl...?\" I said, holding up the blindfold in front of her.\n\n\"Never!\" she exclaimed, her chin again coming up in defiance.\n\n\"As you please.\" \n\nI refastened the blindfold.\n\nI waited this time, allowing the tension to build up within her, the fear of the unknown.\n\nI looked at the tray, selected a long, soft feather. The girl's naked body lay exposed before me, her breasts heaving as she tried to catch her breath. Her head moved cautiously from side to side, as if trying to hear me.\n\nCarefully reaching around the balloons and their tethers, I brushed the feather tip around her navel, so lightly that she would barely be able to feel it. In automatic response to even that minimal sensation, she sucked in her tummy.\n\nI followed it down with the feather, twirling it around her navel.\n\nShe had no doubt now. I could see her biting her lower lip in an effort to fight off the feeling.\n\nHow futile.\n\nI turned on the feather wheels again, smiled at her cries. I watched her flesh ripple as her nude body shook on the frame.\n\nMy next selection from the tool tray was a soft electric toothbrush I turned it on and began playing with the soft skin over her stomach. Her cries redoubled; her slim body bounced up and down in her desperation.\n\n\"Stop it! <i >No!\n\n\"We haven't event started yet, traitor. Confess! Spare yourself!\"\n\nI moved the softly buzzing brush down from her navel, along the creases where thighs met stomach, then moved it to rest, very lightly, on her clitoris. \n\nI had thought she was already frantic. I had had no idea. \n\nShe bounced, she screamed, she twisted, writhed under its soft tickling strokes.\n\nFrom time to time, I deliberately held the vibrating brush against the balloons. The loud buzz it made was almost drowned out by her screams filling the room.\n\nI ran it up and down her labia, returning quickly each time to her pearl. At the same time, I sped up the feather wheels, sending hundreds of feather touches each second across the length and breadth of her soles.\n\nHer cries had become continuous, barely human in their tone.\n\nI stopped, for I needed her conscious. I fetched a goblet of thin wine, held up her head, allowed her to sip.\n\nLying there panting and gasping, she hadn't even the grace to thank me. \n\nI gave her a minute to catch her breath, brushed blonde hair off her face. Tears were leaking out from under the blindfold.\n\nKeeping my voice as gentle, as friendly as I could make it, I again demanded, \"Tell me their names, girl. Help me. Let me stop this. Just say their names.\" \n\nShe took a deep breath before again raising her chin, shaking her head.\n\nWithout waiting, I spun up the feather wheels to their maximum speed and began running a stiff feather up and down her inner thighs.\n\nShe shrieked as the new sensations hit her. The muscles in her arms and legs fought desperately against the straps holding them. Her bum bounced off the leather pad behind her, again and again. Her cries filled the room. Her feet...\n\nHer feet twisted and jerked, thrashing uncontrollably from side to side in her effort to escape.\n\nAs her feet shook with her wild laughter, the threads from her toes yanked and pulled at the balloons above her full breasts. The helium-filled spheres bounced and flailed above her body, the elastic bands pulling, twisting and tugging on the clamps clutching her engorged nipples.\n\nI dropped the feather back on the tray and instead dug my fingers into her ribs. The sound of the feather wheel motors continued as I mercilessly tickled her. \n\n\"Nooo!\" she screeched.\n\nShe thrashed under my hands. She shuddered. Sweat beaded on her forehead and between her breasts. The rock-solid frame actually groaned a little as she pulled on it.\n\n<i > \"Stop it!\" \n\nHeedless of her frenzied pleas, my remorseless fingers roved up and down her torso, prodding and tormenting her as the balloons heightened her arousal. \n\nI dug my fingers into her armpits.\n\nHer ribs.\n\nHer stomach.\n\nHer knees.\n\nHer toes.\n\nBack to her armpits.\n\nShe shrieked, twisted uncontrollably in her straps. The balloons flew in all directions, bobbing up and down as they did. Her soft brown nipples were pulled in every direction.\n\n\"Talk!\" I commanded.\n\nShe shook her head.\n\nSpeeding up the feather wheels, I picked up a soft toothbrush in one hand and a stiff hairbrush in the other. I began to run them up and down her flanks - one side, the other side, together.\n\nHer back actually lifted off its pad underneath in her efforts to escape.\n\nThe balloons above her continued to bounce, amplifying her stimulation. \n\n\"Speak, woman!\" I demanded.\n\nPanting but proud, she shook her head in defiance.\n\nWalking to one corner of the room, I brought out a third heavy stand, this one holding a wand vibrator. Moving swiftly, not wishing to give her time to recover, I carried it to between her firm thighs, set it down. Its solid weight made a dull thud on the wooden floor. She turned her blindfolded head at the sound, trying to guess what torture was next.\n\nI noted in passing that sweet juices were now oozing freely from between her lower lips, clear evidence of her arousal.\n\nExcellent.\n\nI adjusted the wand so that its bulbous head was pressed firmly against her sex.\n\nShe jerked at the feeling of cool plastic on her most female flesh. I pushed it forward, resting solidly against her most intimate, most sensitive place.\n\n\"Tell me!\" I said. \"Say their names. Those others are nothing, just silly people. You are real. Spare yourself. Spare your aged sire, even now listening to your shrieks.\"\n\n\"Never!\"\n\n\"Child...\" I began, then, \"No, hardly a child any more, are you? Not with these.\" I thumbed the taut threads linking her nipples to her toes, watched as the balloons swayed and lurched above her bosom, further tormenting and stimulating her already overloaded system. \n\n\"No! I won't!\"\n\nSuch determination, I thought. Such courage.\n\n\"What are those fools to you?\" I asked, as gently as I could. \"Just say their names. Tell me. They don't care anything for you. <i >They  are not here suffering for <i > you, are they?\"\n\nHer reply was unprintable.\n\nI set the wand to run on a random program. It hummed very gently for a moment. I watched her beautiful body so completely exposed to my gaze, waited. She suddenly hissed as the wand kicked in very hard. As quickly as it had started, it dropped down to a mere buzz again, then surged again briefly.\n\nMore unpredictable stimulation...\n\nShe clenched her jaw as its humming head stoked her arousal. I could see her expression change, become softer, more pleasant, but I knew she would fight the embarrassment of cumming in front of me. Equally, I knew, given more time, she would crave its release with her entire soul.\n\nUseful as her sexual excitement was, I knew however that, to make it useful to me, I needed to achieve that balance.\n\nI picked up a feather duster from the tray. This was no time for subtlety - I swept, twirled, flicked, danced it all over her body, starting with her armpits but swishing it unpredictably over her form from head to foot. \n\n\"No! No-no-no!\" Her squirming feet set the balloons bouncing and her cries trailed off into gasps.\n\nShe couldn't however stop herself from moving. Especially not her feet.\n\nThe balloons kept bobbing and jerking, pulling on her nipples. The feather wheels ran hundreds of feather-touches over her soft feet. \n\nI could tell she was close to orgasm. That would of course defeat the whole purpose of this and, while continuing to sweep the duster over her body, I edged the wand's stand backwards with one foot, away from her, just a hair. The wand's head was now just barely touching her sex, teasing and arousing without offering release or fulfilment. \n\n\"Stop, oh, <i > please  stop!\" she yelled, writhing on her iron frame.\n\n\"Tell me their names,\" I demanded. \"Say their names.\" Using one foot, I began rocking the wand on and off her pussy while at the same time lightly scraping the hairbrush in an armpit.\n\nConvulsing, she screamed. \"No! You'll never get me to...\"\n\n\"Just say their names,\" I said softly, switching the brush to the hollow under her other arm. \"Say their names and this will all stop.\"\n\n<i > \"No!\" \n\nWith my free hand, I spun the spinning feather wheels up to their highest speed. Her body went totally rigid.\n\n\"Tell me!\" I commanded.\n\n\"All right! I give up!\" she cried. \"Just stop!\"\n\n\"Say their names,\" I commanded.\n\n\"Yes!\" she screamed. \"Just stop! <i >Please!\" \n\n<i > \"Say their names, girl!\" \n\n<i > \"THEIR NAMES!\"  she shrieked. <i > \"THEIR NAMES!\" \n\nHer safe-word uttered, I instantly stopped tickling her. While one hand fumbled to release the straps securing her arms, I used the other to kill the feather wheels. One of my feet hauled the wand stand towards us, pulling its pulsing head hard against her sex.\n\nThat was all it took. In an instant, she climaxed with a roar. \n\nHer body twisted and heaved with the force of it. Her arms reached blindly up for me in her lust.\n\nI thumbed off her blindfold, leaned down, took her lips in a deep, deep kiss. Her head came up to meet mine, her tongue thrashing in my mouth. Her hands flipped off the nipple clips, her arms wrapped around my neck. The balloons floated up to the ceiling.\n\nI was, needless to say, already naked and hard as a hammer. I pulled out of her arms, stepped away and swiftly moved to between her legs. As I passed, I freed her ankles, snapped the threads on her toes. In a hurry, I shoved the wand stand out of the way and ignored it as it fell, still buzzing, to the floor.\n\nI felt her hand close on my hardness, pulling me in towards her. In a second, she had guided me home and I sank at my full length into her heat. Just entering launched her into her second orgasm. \n\nI seized her hips, felt my balls brushing against her smooth thighs.\n\nHer body bucked beneath mine with the ecstasy of her orgasm. I drove into her again and again, the impacts causing ripples to run up and down the soft flesh of her body. \n\nHer legs came up around my waist, locked behind me, pulled me in against her.\n\nI felt a heat growing in my cock, a twisting behind my sack. I lunged forward against her and, with a burst of glory, my own orgasm hit.\n\nIt seemed endless, a boundless plain of ecstasy. Her heels dug into my back, pulling me in even harder towards her.\n\nIt was a long time ending. When it finally faded, I sagged down on top of her. We rested that way for a timeless stretch before she finally spoke.\n\n\"Jeez, Greg,\" she panted from under me. \"When you set up a scene, lover - I mean, damn it, you almost had me <i >believing  this was real! I wasn't going to betray the revolution, no matter what you did to me!\" \n\nHer arms hugged me, hard, then harder still as an aftershock from her last orgasm ran through her. \n\nI could feel her muscles clench on my cock inside her.\n\n\"I love you, Pepper,\" I whispered into her ear.\n\n\"And you, Greg.\" Simple words, but my heart soared at hearing them.\n\nEventually, softening, I withdrew, helped her to her feet. She gave me another hug and blew out the guttering candles before pulling open the heavy curtains covering the floor-to-ceiling windows and stepping forward to stand in front of them. Her sweet figure was exquisitely silhouetted by the bright lights of the city below.\n\nI stepped in behind her, wrapped my arms around her waist. She leaned back against me, soft and warm in the darkness. I felt her hand come up to caress my head.\n\n\"How long did I hold out this time?\" she asked.\n\nI turned my head, looked into the next room, glanced at the clock on the wall there. \"About 47 minutes, I think.\"\n\n\"Damn!\" she said bitterly. \"It felt like a couple of hours. I was sure I had a new record.\"\n\n\"Next time, Pepper. I'm glad you enjoyed yourself. You're a lot of fun, you know.\"\n\n\"You, too, Greg. Did <i >you  enjoy yourself?\"\n\nI slid one hand up, cupped a breast. \"Oh, yes. And next time...\"\n\nI paused.\n\nShe turned her head to look over her shoulder at me.\n\n\"'Next time?' What do you have in mind?\"\n\n' . . . '\n\n<center>+\n\nI hope you enjoyed yourself.\n\nVotes, comments - and soft, tingling touches in the dark - are always welcome. </center>"
    ],
    "authorname": "TarnishedPenny",
    "tags": [
        "bondage",
        "feathers",
        "tickling",
        "toothbrush",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/just-say-their-names"
}
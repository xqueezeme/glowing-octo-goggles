{
    "title": "Yours Ch. 03",
    "pages": [
        "All characters are over 18 and fictional.\n\nI'd like to thank everyone who left comments and sent emails. The support for this story has been overwhelming and I appreciate every message, whether complimentary or critical.\n\nI'd also like to thank everyone for being so patient. It can be very difficult for me to find the motivation to write, and even when I do, I find myself re-writing over and over in order to produce the best work I can.\n\nI'll endeavour to work a little faster in future.\n\n*\n\nThere was a soft knock at the door.\n\nIt was just after midnight, and Jessica had come to be with me again, as she put it.\n\n\"Come in.\" I said.\n\nThe door opened and Jessica slipped in, closing it quietly behind her.\n\nShe was wearing a negligee, the exact shape and design as the black one she usually wore, except this one was red. I took in the thin weave that showed off her body and matching panties, the short hem that drew the eye to her long and sexy legs, and of course the dark red bust that gave her the most magnificent cleavage. I knew before I looked that she'd painted her toenails to match.\n\nI looked back at my laptop screen, ignoring her for now. I'd gotten a taste of this last week. Just making her wait was so appealing to me. This was a girl that on many occasions had called me a \"retard\" for slurring my words or stuttering the slightest amount, following with the phrase \"Don't waste my time.\" We were kids then, but it was stupid little things like this that still stuck with me.\n\nNow I could waste her time all I wanted.\n\nBefore she'd arrived, I'd been surfing aimlessly on the internet for a few hours going from link to link, reading about basically anything I found interesting. I did this a lot, and ended up learning about a pretty wide variety of useless crap. The internet was a big place. A lot of opportunities to waste time.\n\n\"Hi.\" she said softly.\n\n\"Get on your knees and shut up.\" I said calmly, without looking.\n\nShe did as I asked, and I continued to click and read for a while. But I couldn't really concentrate when she was there.\n\nLast week had been disturbing for me. At first it was my own rage that I obsessed over, the absolute cruelty I'd unleashed on Jessica's body. She told me later, when Rose wasn't around, that the bruises still hadn't healed by Wednesday. But it was her telling me this that helped me get over it. She didn't whimper it out, afraid. She didn't hiss it at me, angry. Her tone was one of pure excitement, and almost pride.\n\nIt became clear to me that she could take so much more punishment than I'd thought.\n\nNo, what disturbed me here was how I'd spoken to her. I'd cuddled her, let her sleep with me, called her \"sweetheart\" for God's sake. This wasn't the relationship I wanted. I'd rationalised over and over that we could have both the cruelty and the kindness, but I felt we definitely needed more of the former.\n\nAll week she'd been looking at me. Subtly watching me when she thought I wasn't paying attention to her. I'd been sitting with her and Rose, and getting to know their friends some more had been... not horrible, anyway. But since she'd admitted to being \"mine\", I felt her eyes on me far too much. Every time I looked at her I'd see her glance quickly away with some stupid, love-struck little smile on her face. It was unacceptable, despite the charge it gave me.\n\nIn our conversations with Rose nothing had changed, but it really felt like we were getting too close. I finally had a grip on our relationship. She claimed to be in love with me, but I didn't have to let that mean anything. She accepted that she belonged to me, and that was how I wanted things to continue. I owned her.\n\nSo I made her wait.\n\nAnd wait.\n\nI wanted so badly to look at her, and I knew she'd just be watching me, so I made her wait a little longer.\n\nThe tension was ridiculous. After a little over half an hour, I slowly closed my laptop.\n\nI let out a long sigh and finally looked at her.\n\nShe was still kneeling, eyes locked onto mine. Last week I'd criticised her posture, but now she was sitting upright, back perfectly straight, and hands folded on her lap. She was such a fast learner.\n\n\"Come here.\" I said.\n\nWithout breaking her gaze, she leaned forward and slowly crawled over to the side of the bed.\n\n\"Up.\" I said, pointing to my legs.\n\nI pulled the covers off as she silently climbed up. She stared at me, eyes wide as she waited for my next instruction. She glanced at my crotch a few times and her hands clenched into fists. She was anxious. She was so open with her emotions sometimes, her hope and anticipation obvious on her face. She was practically begging without even speaking.\n\n\"Suck me.\" I said harshly.\n\nShe let out an excited squeak and quickly obeyed, sliding her fingers under my waistband and yanking down my underwear. Within seconds she was holding my soft cock in her trembling fingers and licking slowly along my shaft.\n\nI leaned back against my headboard and put my arms behind my head, staring across the room and out my window at the night sky. It was December, and Christmas was only a few weeks away. The weather had been threatening snow, but so far it had been clear.\n\nI was trying to set up an atmosphere between Jessica and I. I ignored her, then only used short commands to order her, and now I wasn't even looking at her while she went down on me. I wanted to seem more detached than before, after everything last week. I wanted to make some more distance between us.\n\nI could see the bright green of her eyes staring up at me, but I refused to look down. Instead, I leaned back and closed my eyes, focusing on the pleasure she was giving me.\n\nShe'd started the same as always, soft kisses and licks along the shaft and head to get me hard, which didn't take long, before sucking me into her mouth. She was using hard, strong licks against the head which felt amazing, and soon she was sucking in her cheeks to give that intense pressure that I loved. Usually I would start breathing heavier, or sighing, but I resisted making any noise.\n\nShe kept sucking me in deeper and deeper each time until I was completely inside her tight throat, my balls pressed against her chin. She held it there for a few seconds before pulling back up and licking around the head again.\n\nShe kept this up for around five minutes without me making a single sound, strong licks against the head broken up by slowly deep-throating me. I could feel her determination to get a reaction out of me. She held my cock in her throat for a little longer each time, and her licks got more insistent and varied.\n\nShe was really getting good at this. Well, that was an understatement. She was good before, and due to my lack of experience every new blowjob from her automatically became the best one ever as she learned how to better use her tongue and throat to please me. But I kept control of myself, not wanting to let her know the extent of the pleasure she was giving me.\n\nAfter a few minutes more I heard, and felt, her moan slightly in the back of her throat. She inhaled my cock again, and this time just held it there. After maybe 30 seconds I thought she would pull up, but she didn't. She just stayed there, not breathing, my thick shaft pushed into her pulsing throat.\n\nA few seconds later she quickly slid off my cock and started panting heavily. She barely waited at all before sucking in a large breath and taking me into her mouth again. I couldn't help a small sigh at the sensation of being taken to the base so quickly and enthusiastically. And again, she held it. The seconds ticked on and on, far past the point I thought she'd have to come up for air.\n\nHer eyes were closed, her expression a picture of concentration, but her face was bright red. She was practically choking herself on my cock.\n\nHer eyes suddenly shot open and her head jerked upwards. She inhaled deeply and started coughing, probably choking on her own saliva. She never let go of my cock, even as she turned her head and continued to cough violently. There were tears in her eyes, but ones of discomfort, not emotion.\n\nAfter she seemed to get her breath back, she looked at me.\n\n\"Sorry.\" she croaked, \"I-\"\n\nI interrupted her with a light slap to her face. She seemed stunned at the sudden pain.\n\n\"Did I give you permission to speak?\" I asked quietly.\n\nShe shook her head, eyes wide open in shock, her hand lifting to her face.\n\nI'd actually been practising my slaps, as odd as that sounds. By hitting my own legs and arms, I'd figured out the right amount of force I had to use to sting without seriously hurting, or even bruising. I didn't put much weight into it, instead using mostly my fingers. It stung like hell, but it the mark faded quickly. I'd had to test that on my own face to know for sure, and I'd felt pretty stupid doing it.\n\nI wasn't trying to cause her serious pain. It was like biting her lip, or pulling her hair. It was just meant to shock her, and humiliate her. I'd learned the previous week how powerful real pain was, how deeply it affected her.\n\nAnd now I had the belt for that.\n\nThe silence had stretched between us. It was a few seconds before I realised that she was waiting for another command, or a punishment.\n\n\"Back to work.\" I said, leaning back. \"And try not to choke on it this time.\" I added, condescendingly.\n\nI closed my eyes and she started again. She moved slower this time and soon figured out a good pattern. Rather than just holding my cock in her throat she swallowed it over and over, going from tip to base and back in one continuous motion. She soon sped up and I let out a satisfied moan. She moaned excitedly in response, and moved even faster.\n\nI'd held off as long as I could, and I knew I wouldn't last much longer. I grabbed her chin and pulled her head up so that just the head of my cock was left in her mouth. She didn't stop her insistent licking until I sighed at my release. I pushed my head back into my pillows, and thrust my hips forward as I came. She gripped my shaft with both hands as I filled her mouth with cum which she gratefully swallowed, purring with pleasure as she did.\n\nMy dick began to soften but her tongue kept moving. Soon I was rock hard again, and only then did she stop. I opened my eyes to look at her. She was kneeling, back straight, staring at me. Waiting.\n\nI slowly sat up, then got to my knees in front of her. Our bodies were almost touching, and I could feel her breath on my shoulder. She looked up at me, her beautiful emerald eyes shining.\n\n\"Strip and get on your back.\" I said roughly.\n\nShe reacted so quickly it was almost funny, desperately struggling out of her thin negligee and throwing it to the floor. She lunged forward and span onto her back, thrusting her hips out and slipping out of her damp panties.\n\nShe lay in the centre of the bed, completely naked, her legs spread and her pussy soaked. I caught the scent of her arousal and felt my cock twitch in response. She ran her hand down her stomach and eagerly pushed her hips forward, desperate for contact but not daring to touch herself. I leaned over her and my hands found their familiar positions, my right brushing up through her hair and my left resting gently around her throat.\n\nI held her like this for just a few seconds, enjoying the anticipation in her eyes. I reached down and grabbed my cock, pressing it against her wet pussy. Normally I made her beg for this, but I didn't have time to wait. Every time we did this I wanted her more. I pushed into her hard, quickly filling her inrecdibly tight pussy with half of my shaft.\n\n\"Yesss...\" she groaned out in pleasure.\n\nI had to struggle not to join her with a moan of my own. As I slowly filled her she started demonstrating the results of her \"exercises\", the muscles of her hot pussy gripping and squeezing along my cock. I sighed with pleasure and slowly fucked her, my hips finding a comfortable rhythm.\n\nShe let out a small moan each time I filled her, and I found myself wanting to move faster just to hear it. I revelled in the mixture of pleasure and pain she expressed as I twisted her hair in my hand. I loved seeing her like this, so different from her normal self. Her eyes were closed and she was biting her lip hard. I could tell she was already close to orgasm, after only a few minutes.\n\nI wanted to see her cum, but I wanted to tease her even more. I increased my speed and her whole body tensed, desperately seeking the approaching release. She let out a loud moan, and I knew she was right on the edge. I slowly slid out of her, letting my cock fall against her stomach. I leaned forward and pressed it between us.\n\n\"No, don't stop! Please, please don't stop...\" she whined, pushing upwards with her hips.\n\nI pulled her hair and tightened my grip around her throat, silencing her.\n\n\"You were going to cum, weren't you?\" I asked, struggling to keep my breathing steady.\n\nShe nodded against my grip, eyes softening.\n\n\"What do you need...before you can cum?\" I asked.\n\nShe hesitated before finding the answer.\n\n\"Permission.\" she replied quickly, her voice soft and fearful.\n\n\"Permission from who?\"\n\n\"From...from you.\"\n\nI pulled my hips back and let my cock rest against her pussy. She moaned and pushed her hips forward again, trying to get some friction. I smiled at her desperation.\n\n\"Why do you need my permission?\" I asked lightly, as if confused.\n\nWith my other hand I gently tapped the head of my cock against her soaking wet pussy lips. Her whole body jumped in response, and she moaned again.\n\n\"Because...because you own me.\" she almost whispered, looking away from me in shame.\n\nI pulled her hair harder, trying to guide her eyes back to mine.\n\n\"What was that?\" I asked.\n\nShe stared into my eyes, utterly vulnerable.\n\n\"You own me.\" she said again.\n\nI smiled and slowly slid my cock into her tight tunnel, not stopping until I bottomed out. She gasped and pushed her hips against me, squirming with pleasure. Every instinct screamed at me to keep moving, to take my pleasure from her body, but I had to control myself.\n\n\"Jessica, do you want to cum?\" I asked.\n\n\"Please...\" she gasped, \"Please make me cum.\"\n\n\"Please what, Jessica?\"\n\n\"Please...\" she moaned, looking away.\n\nI lightly slapped her face to get her attention.\n\n\"Please what?\" I asked again.\n\nShe looked up at me, eyes so wide and threatening tears, but didn't speak.\n\n\"What's wrong Jessica? You seemed to enjoy calling me it last week. You know what you have to say.\" I said softly. I kissed her once on the cheek, letting my lips linger for a second.\n\nShe bit her lip hard and closed her eyes again.\n\n\"Please...Sir.\" she whispered.\n\n\"Louder.\" I said.\n\n\"Please, Sir!\" she panted.\n\nI quickly pulled my hips back, then slowly forward as I fucked her once with my entire length. She let out a frustrated wail when I stopped and leaned closer, putting my lips to her ear.\n\n\"Please, Sir...what?\" I growled.\n\nI knew by now how her mind worked with things like this. Once she'd submitted, it seemed she would say almost anything I prompted her too, but when we started again it was more difficult to convince her to repeat it. I could see it all in her face. Her stubbornness, and her shame. She was torn between the pleasure she got from submission, and her pride telling her she shouldn't.\n\nBut as always, the pleasure won out. I smiled as I saw the resignation in her expression. This is what made this whole thing work, I thought. This is why I was able to make her mine. The depth of her submission and her capacity for pleasure meant that I'd always be able to make her submit if I dominated her properly.\n\n\"Please can I cum...Sir?\" she begged, \"Please make me cum, Sir. Please make...make your slut cum with your big cock.\"\n\nJust at her words I felt hot pleasure rolling through my body, causing my cock to twitch inside her. I took her bottom lip between my teeth and bit down hard as I slid out of her. I kissed her deeply and gripped her throat tight as I thrust back in. She moaned her pleasure into my mouth as I pounded her in a frantic rhythm, my hips slamming into hers as I filled her dripping pussy.\n\nHer moans grew frantic as she tried to hold back the pleasure. I broke the kiss and put my lips to her ear.\n\n\"Cum for me, slut.\" I hissed.\n\nImmediately I felt her body stiffen beneath me as her orgasm began. She screamed into my ear as her body shook uncontrollably. She wrapped her arms around my neck and gripped tight as I continued my assault, not slowing down for a second despite how fiercely her pussy was gripping my cock.\n\n\"Oh God!\" she wailed, \"Oh God! Sir!\"\n\nShe started to move against me, matching my rhythm with her own. At first she twisted her hips which created an amazing circular pressure, but as another orgasm approached she threw her head back and began mindlessly pumping against me, eager to increase her pleasure. She stared into my eyes as she came again, and I heard myself grunt with lust. She looked so incredible when she came, her beautiful, refined features twisted into pure pleasure. I felt my self-control slipping as my lust for her overwhelmed me, and I knew there would be no more stopping or teasing until I got myself off.\n\nI closed my eyes and lost myself in the sensation of taking her. The softness and heat of her body, her shaking voice as the pleasure of her orgasm dragged on, her fingernails scratching lightly against my back. Her pussy was so wet that I could feel the liquid sliding down the base of my cock and coating my balls.\n\nAgain, I kept thrusting and thrusting until my lungs began to burn and my hips felt weak. I knew I could hold my pleasure back for longer, but I'd already exhausted my body. I kept going for as long as I could before my pace started to falter. I gritted my teeth and tightened my grip. She seemed to sense my determination to finish, and she wrapped her legs around my hips as I sank myself into her and joined in with her third orgasm, the strength of my own forcing the breath from me.\n\nI kept thrusting as I came, slowing until I slid out of her. She whimpered as my softening cock left her. Her legs were still shaking and her eyes were closed, and I could tell by the way her hips were lightly thrusting that the pleasure of her orgasm hadn't yet left her. I leaned in and touched my lips to hers, and immediately she opened her mouth and slipped her tongue into mine. We kissed slowly, our tongues moving together in an easy rhythm.\n\nI pulled away and rolled to the side, focusing on getting my breath back. She rolled over on to me and wrapped her arms around me.\n\nI was so tired suddenly, and lying with her was so relaxing. Her body lost all tension, and her heavy breathing tickled my chest.\n\n\"Am I good?\" she whispered in my ear.\n\n\"What?\" I asked.\n\n\"Am I a...a good girl?\" she asked.\n\nI smiled. I loved how deeply it all affected her. I hadn't even done much to her tonight, besides teasing her, but she could still ask a question as humiliating as this and really mean it.\n\nI kissed the top of her head.\n\n\"You were a good girl for me tonight.\" I said.\n\nShe smiled and then laughed gently, embarrassed.\n\n\"Good.\" she said.\n\nThe energy was leaving my body, and I felt my eyelids begin to close. I didn't want her sleeping here again. Not tonight, anyway.\n\n\"Time to go, sweetheart.\" I said quietly.\n\nI felt a flash of anger at myself for letting that word slip out again. \"Sweetheart\". It sounded far too intimate, despite how natural it felt.\n\n\"Can't I stay?\" Jessica asked.\n\nI looked at her, preparing to maintain the distance between us. She just looked to desperate, so full of fear and hope. I smirked, eager to see the pain in her eyes when I told her to leave but suddenly a memory came to me, the same that had haunted me all week.",
        "The morning after I lost my temper with her. Her naked, kneeling, completely open before me and saying,\n\n\"I couldn't stop crying.\"\n\nShe hadn't held a trace of blame or anger against me. Just guilt and a forced laugh at her own weakness.\n\nI sighed.\n\nI wanted to hurt her, but that just felt wrong on a level I didn't understand. Again I was forced to think about my confusing feelings for her. I wanted to hurt her, to see her in pain. But I wanted to hold her, too. To comfort her.\n\nWhatever I felt, I knew I didn't want a repeat of last week.\n\n\"Just for a while.\" I said.\n\nThe sudden relief and joy on her face was incredible.\n\n\"Thanks.\" she said.\n\nShe lightly kissed my cheek a few times before resting her head on my shoulder and nuzzling against me.\n\n\"Don't fall asleep.\" I said.\n\nI felt her nod, and then yawn widely. She let out a contented little moan and relaxed against me. For a while we were just quiet together. She tangled her fingers loosely in the hair on the back of my head and stroked it gently.\n\n\"Uh...Sir?\" she asked quietly, breaking the silence.\n\nI really loved it when she used it as a name.\n\n\"Yeah?\" I said.\n\n\"Can I...can we talk?\" she asked reproachfully.\n\n\"About what?\"\n\nShe sighed and wriggled around, getting more comfortable on top of me.\n\n\"I want to tell Rose about us.\" she asked, her voice even more quiet.\n\nI felt my body tense up in surprise. I should have seen this coming.\n\n\"Why?\" I asked her.\n\n\"She's my best friend.\" Jessica said, as if it was obvious.\n\nShe was still waiting for a real reaction from me. I wanted her to take my silence as a sign to continue, and she did.\n\n\"I don't care about anyone else knowing or not knowing, but Rose...I just think we should tell her. I've never had a secret like this before...I don't like keeping things from her.\" she said.\n\nI didn't want my sister to know about this, for a lot of reasons. I didn't know how she would react at all, and I was worried what she would think if she knew the...exact nature of our relationship. I'd tried to be Ok with the situation, telling myself over and over that as long as we both wanted this, and I controlled myself, that there was nothing wrong with what we were doing. But there was still a part of me that was ashamed of what I did with Jessica.\n\n\"No.\" I said simply, \"This stays between us for now.\"\n\nShe hesitated, but then nodded.\n\n\"Ok.\" she said sullenly.\n\n\"Ok?\" I asked.\n\n\"I mean...yes Sir.\" she said.\n\n\"Good.\"\n\nI reached up and started to stroke her hair, and she kissed me on the neck. She obviously wasn't satisfied with this answer, but it had been difficult for her to even bring this up. She wasn't going to push the issue, now that I'd given my answer. Not tonight, anyway.\n\nWe lay there for a long stretch of silence before I felt her shaking her head and tensing her body, trying to fend off sleep. I wouldn't be able to hold out much longer either.\n\n\"Time to go.\" I said.\n\nShe sighed, but nodded before sliding out of the bed. I watched her as she picked up her negligee and panties. She faced away from me, bending almost entirely at the waist to reach the floor. My aching cock tried to stiffen again when I saw her like that, her round, firm ass and flushed red pussy that was wet with my cum and her own pleasure. I was struck with an image of bending her naked over a table and plowing into her from behind, one hand holding her arms behind her back and the other yanking on her hair.\n\nShe looked back at me from that position, and smiled when she caught me staring.\n\n\"Goodnight Sir.\" she said seductively as she straightened up and walked away, her hips swaying.\n\nIt was strangely embarrassing to he caught gawking at her like that, but not enough to stop my eyes from being glued to her ass. She left, closing the door behind her without turning.\n\nI sighed and shook my head, wondering how I'd ever had the self-control to send her away from me after she'd humped my bare cock and begged for more. Wasn't the stereotype supposed to be that men got tired of having sex with the same woman over and over? Yet I found myself more aroused by her every time we were together. My cock was almost fully hard again, and sleep didn't come easily.\n\n==\n\nThe following Monday, school had a pretty relaxed atmosphere. Winter break was only a few weeks away. We had exams near the end of January, but it was too close to Christmas for people care about anything after it.\n\nAt lunch I sat at my new table before Rose and Jessica got there. I was greeted enthusiastically by Derek, and got a nod from Frank. The conversation between the three of us had never flowed perfectly well, seeing as Frank and I both tended to stay pretty quiet, but Derek was willing to do enough talking for all of us.\n\nI more than once found myself amazed at Derek's energy. He was always so animated, so talkative and friendly. I hadn't yet heard him say a negative thing about anyone. I hadn't seen so much as a frown on him.\n\nHe and Frank made an interesting pair, seeming like total opposites to an outside observer. Derek wasn't exactly short, but Frank towered over almost everyone; and Derek wasn't crazily skinny, but seemed almost anorexic compared to Frank's muscular bulk. Even their attitudes, Frank calm and stoic, Derek outgoing and excitable. But they actually had pretty similar tastes, and the same sense of humour.\n\nSoon Becky and Rose joined us, but not Jessica. This was hard not to notice, as she and Rose were always together outside of class. Lissie and Frank occasionally skipped days, Lissie for cheerleading practice and Frank for working out at the school gym, but Jessica had always been there in the short time I'd been joining them.\n\n\"Jessica's doing editor stuff today.\" Rose explained as she sat down.\n\nNo one had asked so I assumed it was for my benefit.\n\n\"Editor stuff?\" I asked.\n\n\"Well, Editor-in-Chief stuff, technically.\" said Becky absent-mindedly.\n\nI just raised an eyebrow, but she wasn't looking at me.\n\n\"She's runs the school newspaper.\" Rose explained, \"I thought you knew that.\"\n\nI shrugged.\n\n\"I didn't know we had a newspaper.\" I said.\n\nRose smirked, and Derek laughed.\n\n\"Well, it's mostly online now.\" Rose said, \"More of a news blog, I guess.\"\n\n\"I think they still print stuff, though.\" said Becky, \"You know, like, to keep the title they have to actually print something, even if no-one reads it.\"\n\nThis was all news to me.\n\nThe conversation moved on. I'd learned a crazy amount about my classmates in the last week. A whole world of relationships and emotion, intrigue and gossip that had been hidden from me. Most of it didn't grab my attention but it was an interesting experience, putting names to faces and recognising relationships...sometimes it felt like I was exploring come unknown culture that had been hidden in plain sight all along, the world and people around me finally taking on some distinct shape beyond the general sense of \"Me\" and \"Everyone else\".\n\nThe conversation was becoming easier and easier for me, and I was getting more comfortable around my sister's friends.\n\n==\n\nIt was after lunch, and I was at my locker when I got the first sign of trouble. I felt a presence behind me, and turned to look up at the face of the last person I wanted to see.\n\nMike. Jessica's ex.\n\nHe stood almost half a foot taller than me, and was looking down at me with a vague, non-threatening smile.\n\n\"Hey.\" he said.\n\n\"Uh...what's up?\" I replied nervously.\n\nHis height and bulk unnerved me. I was suddenly aware that a guy this size could probably rip me apart if he wanted to. It was weird, he was of a similar size to Frank, but being around Frank felt nothing like this. I turned away from him to gathering my books, but he didn't move on. I closed my locker and turned again. He seemed too close to me, but there was plenty of room between us.\n\n\"Where you headed?\" he asked lightly.\n\nI had Math next, a class that I suddenly realised I shared with him. He sat in the same row as me, at the very back, all be it in opposite corners. How had I forgotten that until now?\n\n\"Uh...\" I started.\n\n\"Let's take a little walk.\" he interrupted, putting his hand on my shoulder and guiding me to the right.\n\nI ended up just walking silently beside him, mindlessly following him as he moved through the corridors. What the fuck was I doing?\n\nWe eventually headed outside of the building, and then sharply to the left. There were still a few other students milling about, knowing that most teachers wouldn't care if they were only a few minutes late after the bell.\n\nI shuffled alongside him until we ended up behind the cafeteria. The place was pretty much deserted, home only to the garbage cans.\n\n\"So.\" he suddenly said, turning to face me. \"Who are you?\"\n\n\"Uh...I'm Rose's brother.\" I said, blurting out the first thing I could think of.\n\nHe laughed at my obvious discomfort.\n\n\"Ha ha, Ok then.\" he said, \"Ok, 'Rose's Brother', I think you and I need to have a little talk.\"\n\nHe wasn't violent or aggressive at all but I could feel the menace in him, somehow. He barely invaded my personal space, maybe just enough to let me know that he could. He smiled when he spoke, but there was something behind it. Something dark behind that laugh.\n\nThis was obviously about Jessica.\n\n\"This is about Jessica.\" he said.\n\nWell, that hardly took a genius.\n\n\"Ok?\" I said, raising my eyebrow as if in confusion.\n\nThere was no possible way he could know about the two of us, I told myself. He saw me sitting with them and...maybe just assumed?\n\n\"Look, 'Rose's Brother', I don't know who you are.\" he said.\n\nHe seemed to like calling me that. He smiled when he said it, as if it was great joke.\n\n\"But there's something you should know. Jessica is my girl. We're going through...\" he paused, sweeping his seemingly giant hand through his short blond hair, \"Well, a bit of a rough patch right now. But she's mine.\"\n\nI didn't say anything. I couldn't. I hated myself, but right then I was terrified. My heart was beginning to pound and I felt rooted to the spot. Why had I followed him here? I felt sick.\n\n\"And I don't know who you are\", he repeated, \"But I don't like the way you look at her.\"\n\nThis made me wrinkle my brow in genuine confusion this time. How I look at her?\n\n\"Look, man, there's nothing going on between me and Jessica, Ok?\" I said. I kept my tone light, hiding my nervousness, \"I mean, we can seriously barely stand each other. I'm only at that table because Rose wants to...I don't, get closer I guess. We don't talk much any more, you know? And-\"\n\n\"Yeah, Ok.\" he said, cutting me off. \"I don't really give a shit about your life story. Here's what's going to happen. You're going to stop sitting with Jessica and the rest of that little...pretty people club.\" he said, with a touch of venom in his voice.\n\n\"I...I really don't care about Jessica.\" I protested.\n\nPart of me felt cowardly for lying like that, but I'd wanted to keep us a secret anyway.\n\nHe raised his lip in a little snarl of anger.\n\n\"You're not listening, kid.\" he said, his voice getting tense. \"I don't care. All this didn't start until you started sniffing around her, and I don't like...whatever you've been saying to her about me. She used to be so sweet to me...\"\n\nI'd heard him say that before. But he was wrong, she'd dumped him weeks before I started sitting with them. Or maybe he just meant her attitude towards him? I didn't know.\n\n\"So are we on the same page, little guy?\" he asked.\n\nI just nodded, hoping to hell he wouldn't suddenly get violent.\n\n\"I...I guess?\" I said.\n\n\"Great.\" he said, flashing me a smile. \"See you around, 'Rose's brother'.\"\n\nHe slammed his giant hand down onto my shoulder in an exaggerated and overly aggressive pat before he walked away, turning the corner of the building and leaving me alone.\n\nI took a few seconds to get my breath back and push what just happened out of my head. I made my way to class, panicking slightly the whole way. I slipped in, and the room stared up at me, causing my heart to beat even faster. I'd never been comfortable around large groups of people, and having the attention of the whole class on me was terrifying.\n\nI turned to Ms Kallis and mumbled something about the bathroom before hurrying to my chair. Ms Kallis just nodded, but her pretty Asian features were held in a worried expression. I guess I looked about as freaked out as I felt. I glanced over the the far right corner of the room. Mike wasn't in his seat.\n\nI sank into my place and tried to focus on completing the exercises marked out on the board.\n\nWhat the fuck just happened?\n\nI sat slumped down in my chair, running my mind over and over my conversation with Mike. Why did he think I was a threat to him and Jessica? She dumped him for Christ's sake, and yeah, she did that for me but he had absolutely no way of knowing that.\n\nI kept thinking about that pat on the shoulder. He was so strong. Just at the thought of him standing over me with his cold blue eyes I felt the fear twist itself up in my stomach again. What the fuck did I do now?\n\n==\n\nThe next day, I decided to just do what he said.\n\nWhat did it really matter if I didn't sit with them all any more? I was with Jessica before that, and I'd be with her after. What we did at lunch had nothing to do with it. As long as Mike didn't find out, I didn't have to worry. She was still mine.\n\nRather than face my sister, I spent my lunch in the library that day, mindlessly flicking through some psychology textbook I'd picked up. It actually turned out to be a pretty nice distraction, and relief flooded through me when the bell rang out. I was hungry, and still stressed out, but I was safe.\n\nWhat was the harm, really? It wasn't the first time I spent lunch at the library, although it had been a few years. It wasn't that big of a deal.\n\nWhen I got home, Rose asked me where I'd been. It was still rare for us to talk unless Jessica was around on a Friday or Saturday, so I hadn't been expecting it. I just told her I'd been at the library, and she immediately lost interest.\n\n==\n\nThe next day, I did the same again. I found the same book and continued reading. I'd brought some snacks from home this time, so I wasn't as hungry.\n\nBarely anything had changed, really. I was alone before, and I was alone now. I could do it, I thought to myself. I just had to ignore Jessica in school, and things would be fine. We could still have our Fridays together, although for some reason the thought of that now filled me with dread.\n\nI kept thinking about the situation and hating myself slightly. I was running away from Mike. I was ignoring my own sister because some muscular asshole got it into his head that I'd turned his girlfriend against him.\n\nAnd that was really the most irritating thing of all. How the fuck did he know?\n\nPart of me thought it was just dumb luck, a bit of paranoia and anger that just so happened to find the right target. But he had no evidence that I was anything other than what I said I was; just the brother of someone else at the table. Was he really that perceptive? Was he picking up on some...what, like subconscious vibes or something? Or maybe he'd been watching Jessica...and seen the way she was staring at me.\n\nThe end of lunch bell shook me from these repeating thoughts.\n\n==\n\nAfter lunch, I had English. It wasn't until after class and I saw her approach that I started to panic.\n\nBecky. I had English with her. My only other connection to the group aside from Rose, and I'd completely forgotten.\n\n\"Hey.\" she said brightly as she walked up to me, stopping me in the hall.\n\n\"Hey.\" I said back, and tried to walk away.\n\nShe fell into pace beside me, and again I started to panic.\n\nWe hadn't talked much, but I'd been unable to get Rose's suggestion that we get together out of my head. She really was beautiful. She was around 5'5, with light brown skin and amber eyes. She had a very slender figure, her boobs looked like maybe B cups to my untrained eye and they sat perfectly on her frame. She didn't show a lot of skin, unlike Jessica and Lissie, but her jeans and t-shirt were tight, accentuating the perkiness of her boobs and the round firmness of her ass.\n\nThese weren't observations I just made on the spot, by the way. They were just things that were hard not to notice while being around her for a while.\n\nOne thing I did notice in the few seconds we walked in silence was that when the light from the window hit her bright eyes, they seemed to shine like gold.\n\n\"So, where've you been hiding?\" she asked.\n\nI shook my head, trying to stop myself from thinking about her like that. It was bad enough that she was gorgeous, but now she was asking awkward questions. I had some half-truths to spin.\n\n\"Oh, you know, just the library.\" I said, trying to hide my nervousness.\n\n\"Oh yeah? You actually trying to get some work done early for once?\" she asked, smiling.\n\nI laughed unexpectedly.\n\n\"God no, I'm not that desperate yet.\" I said, returning her bright smile.\n\n\"Then what are you up to?\" she asked.\n\nI shrugged, and regretted painting myself into that corner.\n\n\"Actually, I just...\" I paused. \"I guess I just like to be alone sometimes, you know?\"\n\nShe cocked her head slightly.\n\n\"What, do you not like us or something?\" she asked.\n\nShe didn't sound overly offended, but just curious.\n\n\"No, it's nothing like that.\" I said quickly, \"I just...I don't know...I value my solitude, I guess you could say.\"\n\nShe seemed surprised to hear that, for some reason.\n\nI pushed on. These were some thoughts that had been floating around anyway, may as well be honest about them.\n\n\"I mean, you guys are great, but there's just something I like about sitting alone and just reading, or thinking, or whatever.\" I said, \"Like, I like hanging out with Rose and all you guys, but that doesn't mean I need to do it all the time, you know? \"\n\nShe furrowed her brow for a second, as if confused.\n\n\"That actually makes a lot of sense.\" she said, \"In fact, Frank's said something like that before...about, like, 'enjoying the silence' or something. I thought he was just being weird, but you make it sound almost...mature. Sounds like something my dad would say.\"\n\n\"Mature?\" I asked, smiling, \"Nah, I just like to get lost in my thoughts sometimes. I guess it is pretty weird...\"\n\nShe didn't respond, but just looked at me strangely, as if she was re-appraising her opinion of me. There was an odd feeling of approval from her. I held her gaze for a few seconds before she shrugged and smiled brightly.\n\n\"Well, as long as you're having a good time, I guess.\" she said, \"Anyway, I'm heading in the wrong direction, so...\"\n\nShe turned and started walking up the corridor we'd just walked down without saying another word. I let out a sigh of relief. I'd managed to keep Mike a secret, but really there was no reason why anyone should have suspected anything.\n\nBut I'd only bought myself limited time. I could keep going to the library, but eventually I was going to have to tell everyone that I just didn't like them, which I was only now realising wasn't really true. I enjoyed my lunches with them, and it would suck to have to give them up. I honestly didn't know what to do.\n\n==\n\nThe next day, Thursday, things got a little stressful.\n\nI'd decided to keep avoiding my new social group until I could think of something, but I forgot to bring something from home. I thought I could get some food quickly from the cafeteria and eat it before leaving, but Rose caught up to me in the line.\n\n\"Hey little brother.\" she called out from behind me.\n\n\"Uh...hi.\" I mumbled.\n\nBefore I knew it, Lissie and Becky were over, and the three roped me into a conversation about some band I barely knew. I kept resisting the urge to glance around me. I didn't know if Mike was here, or if Jessica was here, and I was just trying to keep my head down. I was feeling incredibly anxious, and I really regretted taking this risk.",
        "They started heading over to the table, and I tried to distance myself.\n\n\"Actually, I...I'm going up to the library again today.\" I said, trying to keep the nerves out of my voice.\n\nAll three stopped and looked at me oddly.\n\n\"You have a tray.\" said Lissie.\n\nI looked down to find I had indeed grabbed a tray and paid for the food without really paying attention. I hadn't been thinking, but of course I couldn't leave now. I tried to make another excuse, while Lissie rolled her eyes and walked to the table with Becky, but Rose didn't give me a chance.\n\n\"What's wrong with you?\" she asked, peering into my eyes.\n\n\"Uh...nothing, I...I just...\" I stuttered.\n\n\"Come on.\" she said. \"Come sit with us.\"\n\nThere was a heaviness to her words. This wasn't just me sitting somewhere else, to her. This would be me making an excuse to reject her, and her friends. She was putting way too much importance on the whole thing, but I could tell that's what she was thinking.\n\nI looked at the table nervously, and saw Jessica there, watching me. What the hell was I doing? I'd spent years of my life living in fear of Jessica, and that had brought me nothing but loneliness and anger. I'd finally gotten free of that life...was I really just going to let some arrogant dickhead put me back there?\n\nI glanced behind me and didn't see Mike anywhere.\n\nI took a deep breath, and walked over to the table.\n\nScrew Mike. Screw what he wanted me to do. I could sit where I wanted.\n\nThat being said, I barely ate and didn't pay attention at all to the conversation going on around me. I kept my head down, still praying Mike didn't see me. What the hell was wrong with me? I kept glancing at the clock at the end of the room, trying to will the hands to move faster.\n\nA few minutes before the bell went, I felt an almost psychic twinge of fear. I looked up and saw Mike glaring at me from across the room, a snarl of rage frozen on his face. My stomach twisted and I almost threw up my food. I kept staring at him until I realised Rose was trying to get my attention.\n\n\"Uh, what?\" I asked.\n\n\"I said, you should come to Josh's with us tonight. Meet all the guys, have a drink, it'll be fun.\" she said.\n\nOh right, Josh's occasional Thursday get-togethers. His mom was apparently often out of the house on Thursday nights, for whatever reason, and so Josh invited a small, consistent group of seniors from a few schools in the area to hang out and drink. I'd never met the guy, but it seemed like half of the group's stories and in-jokes had originated at one of his parties.\n\nI glanced around. Everyone was looking at me, waiting for an answer. Lissie didn't seem to care much, nor did Becky, but Derek seemed pretty hopeful. Glancing at Jessica was a mistake.\n\nShe had such an incredibly open look of such desperate hope on her face that it took my breath away. For a few seconds, she looked like the only thing she had ever wanted in the world was for me to go to this party. Then she looked away, blushing, as she had every other time I'd met her eye in public these past few weeks.\n\nI sighed. It was her being so open with her emotions that had gotten me into this mess. I mean, maybe.\n\nI could feel Mike's eyes on me from across the room even now. I didn't know what I was going to do.\n\n\"Sorry, I gotta go.\" I said quickly, standing up.\n\nI jammed my hands into my pockets and walked quickly to the other end of the cafeteria, hoping against hope that Mike wouldn't follow me. I was just blindly fleeing with no plan or purpose. I made it out of the building and sped up, hoping to reach the library before he caught up.\n\nSuddenly I felt a heavy clap on my shoulder.\n\n\"Come on.\" growled Mike, dragging me to the side.\n\nHe walked me back around behind the cafeteria. What could I do? He was obviously faster than me. I couldn't out run him, God know's I couldn't fight him off. I just let myself be led, feeling like a lamb heading towards the slaughter.\n\nIn a less poetic sense, it felt exactly like heading into an exam that you knew you hadn't done enough studying for. The exact same sinking feeling in the pit of the stomach.\n\nWe reached the spot, and he slammed me against the wall.\n\n\"What did I say, bitch?\" he snarled, pressing his meaty hand into my chest.\n\n\"Why does it matter?\" I blurted out, my voice high and whiny.\n\n\"What?\" he said, anger darkening his expression further.\n\n\"She dumped you, right?\" I said, thinking quickly, \"What does it matter if I sit with her? I'm not even sitting with her, I'm sitting with my sister!\"\n\nI struggled against him, trying to escape his grip. He pushed back hard, pinning me to the wall. Then he slapped me across the cheek.\n\nThe sudden explosion of stinging pain shocked me into silence. Suddenly the fear and apprehension I'd been feeling exploded and multiplied. This guy could seriously hurt me.\n\n\"Listen, faggot, I don't care if the only reason you're at that table is because you want to suck Frank Dorian's cock. You stay the fuck away from Jessica, you got it?\" he growled.\n\nI still hadn't recovered from the slap, and I felt tears brimming up in my eyes. I briefly thought that I hadn't known Frank's last name until just now.\n\nMike leaned in close, hissing in my ear;\n\n\"Don't go near her again.\"\n\nHe walked away, leaving me alone. I pushed my back against the wall and slid to the ground. I felt weirdly numb, and I barely registered the sound of the lunch bell coming from the window high above me.\n\nI slowly picked myself up and walked to class, only remembering at the last second where I'd left my books, and having to double back to get them.\n\nThe rest of the day passed in kind of a weird shock. I felt mostly numb except for the fear. Why did he scare me so much? He was just a guy. Just some asshole. Yet the feeling of him holding me against that wall, of being utterly helpless...it made me sick to my stomach.\n\nI didn't know what I was going to do. How could I be with Jessica when I was so afraid of what might happen with Mike?\n\n==\n\nThat evening, a few hours after dinner, I was in bed listening to music and trying to ignore my problems, just like always.\n\nI jumped when my door opened and Jessica peeked her head around it. It had been a while since I'd seen her in the house on a Thursday. I took my headphones off.\n\n\"Uh, hi. Rose wanted me to ask if you're coming tonight.\" she said.\n\nShe seemed unsure of how to act in my room, knowing we couldn't be our usual selves with Rose just downstairs.\n\n\"Uh...\" I said. I didn't know what she meant.\n\n\"Josh's party? Rose wants you to come, and she asked me to ask you...\" she nervously brushed her hair behind her ear, \"I guess she really wants me and you to be friends. I have to tell you how fun it's all going to be...\" she trailed off, laughing lightly.\n\nShe was so nervous around me. She looked at me with such adoration in her eyes, such vibrant hope. But I couldn't do with any distractions.\n\n\"No.\" I choked out. \"No, I'm not going.\"\n\nShe looked at me for a second before walking to my bed and sitting down.\n\n\"It really will be fun. It's...I mean, it's kind of low-key, you know? Just sitting around, listening to music, getting a little tipsy on some cheap beer...it's a good night.\" she said, leaning closer to me.\n\n\"No thanks. Not my thing.\" I said.\n\nShe put her hand on my shoulder and wrapped her other around my arm.\n\n\"Come on...\" she said coaxingly, \"It'll be great, I promise.\"\n\nFrom nowhere, rage built up inside me and exploded to the surface. How dare she disobey me? How dare she even touch me without my permission?\n\nI pulled roughly away from her, getting off the bed.\n\n\"Get the fuck off me, slut.\" I growled, \"Don't fucking cling to me, you're always so clingy.\"\n\nThe words had no real meaning behind them, to me. I just wanted to hurt her.\n\n\"I...I'm sorry, Sir.\" she said quietly, standing with me.\n\nBut her voice had a certain tone to it that I recognised. She'd slipped into submissive mode, and it was obvious I'd excited her a little bit.\n\n\"That turned you on, didn't it? God, Jessica, aren't you embarrassed to act like this? Doesn't it humiliate you to talk like that?\" I said, my voice dripping with acid.\n\nHer eyes widened in shock. She struggled to answer, pulling back from me slightly.\n\n\"It's pathetic, Jessica.\" I said, staring into her eyes.\n\nShe acted like I'd slapped her for a second, then anger suddenly flared across her expression, that familiar look that I used to fear so much.\n\n\"You think I don't know that?\" she asked, \"You think I don't look at myself and just...Of course it's pathetic...it's disgusting, the way I act around you...\"\n\nShe hesitated for a second, and her expression softened. She looked down, unsure of herself.\n\n\"But...but it's Ok, right? Because...because it's what I want...\" she stepped closer to me, \"Because I'm a...I'm your...slut, and...I love you.\"\n\nMy anger ignited again, spewing out of me.\n\n\"You love this!\" I shouted, roughly grabbing my crotch, \"You love my cock. You're a slut that just loves to be fucked, and you don't give a shit about me!\"\n\n\"That's not true!\" she said, \"I love you, I do...You own me and I love you.\"\n\nShe lurched forward to grab me, but I slapped her hand away. She stopped, and there was a second of heated silence.\n\n\"Get the fuck out, Jessica.\" I ordered roughly.\n\nShe stared at me, tears brimming in her eyes. I kept her gaze and I could feel my own rage pouring out of me in waves. She faltered, and quickly left, slamming the door behind her.\n\nI felt my breath and pulse quicken, and another wave of hot molten rage and frustration burned up inside me. I grunted and growled at nothing, slamming my fists down on my desk over and over. It hurt, but I didn't care.\n\nI knew why I'd lashed out at her. It wasn't Jessica I was angry at.\n\nMike.\n\nThe name echoed in my head and his stupid, smug face flashed in my memory. Except it wasn't fear I felt this time, it was just more rage.\n\nFuck him. Fuck him and his strength, and his size, and his domineering will.\n\nI was going to deal with him tomorrow. Friday. Then I'd force Jessica down that night and make her scream with pleasure and pain in a way he never could.\n\nI slowly settled my nerves, and tried to think of a solution.\n\n==\n\nUnfortunately, the next day came and I still didn't have one. I'd thought about it all night, but there was nothing I could think of. It went without saying that no teachers would be involved, and although I guessed Frank could probably take him in a fight, I wasn't about to drag some people I barely knew into saving my ass for me.\n\nI'd settle this myself.\n\nI was still mulling the problem over when I walked into Math the next afternoon, the period before lunch. I thought that I had one last class to think this through when I looked up and saw Mike sitting in his usual seat staring out the window. Of course, he was in my Math class.\n\nI sat down in the opposite corner and felt adrenaline suddenly pump into my veins. I gritted my teeth as my anger flared up again. Just thinking about him pissed me off.\n\nWhatever I was going to do, I was going to do it now.\n\nI turned to look at him. Ms Kallis was rambling on about something in her timid little voice, and he wasn't even paying attention. But then, neither was I.\n\nI wanted him to look at me. I was going to confront him today. Right now. I was done with feeling like a scared little boy.\n\nAs I glared at the back of his head, he suddenly turned and caught my eye. He looked puzzled for a second, probably taken aback my angry expression. I quickly raised my middle finger to him and held it there, watching as the fury and surprise lit up his face. He looked like he wanted to beat my ass in the middle of the classroom.\n\nWell, why wait?\n\nI made a jerking motion with my head towards the door. I was calling him out.\n\n\"Ms Kallis?\" I said, raising my hand.\n\nShe looked up at me, surprised at the interruption.\n\n\"Uh...yes?\"\n\n\"I need to go to the bathroom.\" I said standing up, not waiting for an answer.\n\nShe nodded meekly as I walked towards her, and left through the door on her right. I dug my hands into my pockets and hurried along the corridor to the male bathroom. I walked in to the small room, only containing a few urinals and one stall, as well as two sinks. I walked to the centre of the room, in front of the sinks with my back to the cubical wall, and turned to face the door.\n\nI could see myself in the mirrors over the sinks. I didn't look ready for this. I looked afraid. And my eyes widened further in terror as I heard heavy footsteps approach the door.\n\nSuddenly it burst open, and the huge bulk of Mike stormed in.\n\n\"You!\" he growled, and lunged forward.\n\nHe punched me squarely in the chest, hard. I felt the breath being pushed out of me, and a deep pain shocked my body. I stumbled backwards and slammed against the cubical.\n\n\"What the fuck, faggot!? You wanna go?\" he exclaimed angrily.\n\nI regained my footing, and stared into his eyes.\n\n\"Fuck you.\" I said, my voice sounding surprisingly steady.\n\nHe bellowed with rage and lashed out again, delivering a crashing blow to the ribs on my right, and another to my still painful chest. I didn't try to dodge, or defend myself in any way. I couldn't. He was too big, too fast. He'd probably beaten up a hundred guys like me for fun, and I'd never even thrown a punch. So I took the hits, and was once again thrown back against the cubical, crashing hard against it and causing it to shake and clatter. Before I could get my footing, he threw another punch out that smashed into my mouth.\n\nThe pain was intense and it shook me to my bones, but I gritted my teeth. I wasn't going to let myself be beaten by this. I wasn't going to be controlled and dominated by some needle dicked asshole.\n\nI told myself that he was nothing as I took another shaky step towards him, righting myself.\n\n\"What have you got to say for yourself now, bitch?\" he asked smugly.\n\nI took a deep breath, which was incredibly difficult.\n\n\"Fuck. You.\" I panted.\n\nOnce again, an animalistic rage exploded across his features. It was almost comical, in a way. His handsome face suddenly shifting to an almost cartoonishly exaggerated look of pure anger. I barely saw his fist as it flew towards my face. Intense pain exploded against my mouth again and I reeled backwards, barely reaching the wall before losing my footing and falling to the ground. I slid down part of the way down before landing heavily on my ass.\n\nMy vision was blurred for a few seconds, and I took another deep breath as it cleared.\n\nWas that it?\n\nI suddenly, and unexpectedly let out a little laugh. Just a tiny little chuckle in the back of my throat. I was facing what I'd been afraid of, and it was just this. Just pain. The sick sense of dread that had been boiling up inside me was gone. This is what I was afraid of?\n\nI suddenly laughed again, a few sharp barks.\n\nA wave of euphoria suddenly washed over me.\n\nMike was so...stupid. He was like a toddler throwing a tantrum, throwing out his tiny fists because he was angry at the big wide world. It was his only power, I realised. He had nothing else. He could hurt, and that was it. His entire basis of control over me was something that could be easily mimicked by a 10 year old girl with a heavy enough blunt object.\n\nIt was just pain.\n\nThis is all he could do to me? This is all he was? This was nothing. I'd probably inflicted ten times this amount of pain on Jessica, and she was in fucking love with me. And he wanted to chase me away with just this?\n\nThe thought was so ridiculous that I laughed again, and then kept on laughing. I struggled to my feet, unable to stop the increasing spasms of laughter from racking my body. It was so loud, and it seemed to echo off the clean, white walls. It became almost hysterical as I finally stood, and I had to hold myself against the cubical wall to stop from falling again.\n\nThere are times in life when you just laugh, without really knowing why. For whatever reason, something will just seem unbelievably hilarious to you, so hilarious that your laughter is frantic, almost painful. The kind of laughter that makes you honestly fear for your life for a second, just because of how hard is to draw a full breath.\n\nThat was the kind of laughter I was shaking with then, desperately clinging to that cubical wall, staring at what seemed to be the most stupidly weak and hilariously impotent thing I'd ever seen. He just glared back, uncomprehending. It was like something inside me had been knocked loose. There wasn't a trace of fear left in me. Not for this moron. Not for all the pain he could inflict.\n\nI looked away, and finally started to get my breath back, a few giggles and moans still rising up as I swallowed and tried to get myself under control. My whole torso hurt, and there were honest to God tears in my eyes.\n\nI looked up at him. A few more giggles escaped as I watched him. He was so confused, so utterly perplexed by my reaction. He'd probably beaten a few guys to tears in his time, but never because they were laughing so hard at him.\n\n\"Oh Mike...\" I gasped, still fighting the laughter, \"Fuck you.\"\n\nAnger jumped across his features again, the same look, so stupid and predictable, so ridiculously obvious. I laughed again, trying so hard not to be swept away by it, and he hesitated.\n\n\"What are you gonna do, tough guy?\" I asked, giggling.\n\nMy lip hurt when I talked, but I ignored it.\n\n\"You gonna punch me again?\" I said, mockingly, \"You gonna knock a few teeth out this time?\"\n\nHe didn't say anything, but the look of utter confusion spread over his dumb features, and I smiled so widely that my lips were hurting. I glanced in the mirror and realised that, no, my lip was sore because it was bleeding.\n\nMy bottom lip had a thin trail of blood running from it. I slowly licked it up, and was reminded of my first time with Jessica.\n\nOur first kiss had tasted like blood.\n\nI laughed at the memory. I'd made Jessica cry that day, and now I owned her. This asshole could do nothing to me.\n\n\"Fuck you, Mike.\" I said, staring into his eyes.\n\nHe looked panicked, and pulled his fist back to punch me again. I didn't flinch. I wanted him to do it. I honestly thought it would be funny for him to hit me again, to lash out like a little baby. This was probably the first time in his life that punching wasn't going to fix the problem.\n\n\"You really think you can take me?\" said Mike, nervousness tainting his otherwise strong voice.\n\nI chuckled again. Was fighting literally all he thought about?\n\n\"Oh no, Mike. I couldn't possibly take you.\" I caught his eye again, and he took another step backwards, \"You're so big and so strong. You could do anything you wanted to me.\"\n\nI took a step towards him and raised my chin, leaving it open for an attack.\n\n\"So go for it.\" I said.\n\nI was resigned to the pain. He could hit me and hit me all we wanted, but I wouldn't bow to him.\n\nBut he didn't move a muscle. He finally dropped his raised arm.\n\n\"Oh?\" I said, my smile widening, \"Not going for the face? What's next, then? You gonna break my arms next? Hm? Fuck it, why not just go for the legs too?\"\n\nI took a step towards him, and he took a step back. He was afraid of me. I could see it in his face, in his eyes. Suddenly it wasn't so funny any more.\n\nNow I was angry.\n\n\"And what if crippling me doesn't work?\" I asked. My voice sounded strangely deep, and seemed to suddenly echo in the small room in a way it hadn't just a second ago.\n\n\"What if you break every bone in my body and the first words formed by my shattered jaw are; 'Fuck. You. Mike.'\" I said, taking another step towards him.\n\nHe backed up and hit the wall. I could see everything running through his idiot little brain. Violence wasn't going to solve this problem, and he had nothing else to work with. He could literally destroy me with his fists, but all it took was something unexpected to scare him into inaction. If I didn't fear his punches, then what power did he have?",
        "\"What then, Mikey?\" I asked darkly, \"Are you going to...kill me?\"\n\nI took another step towards him, leaving only a few inches between us.\n\n\"Because you'll have to. It's important that you know that. You'll have to kill me, Michael. Because I'd rather die than be controlled by someone like you.\"\n\nAs I said the words, I saw this whole situation in a more objective light. This was just a bit of school yard bullying, a stupid play at dominance, but I'd flat out told him I'd give my life for it. It was stupid. My hysterical laughter, my taunting of him, it suddenly all seemed like too much. I was sobering up from whatever had prompted my hysterics.\n\nBut at the same time I knew I meant it. Because that's who I was. This was just dominance and submission, like I played with my little slut every Friday night. But in exploring things with her, I now understood this side of me. My dominant side. Submitting to him had made me feel sick, and this moment, standing too close to him, looking up into his eyes and knowing he feared me...it was intoxicating. It didn't sexually arouse me like it did with Jessica, but it had a familiar and delicious flavour to it.\n\nThe taste of taking a strong will and forcing it to bend.\n\nIt was beautiful.\n\n\"You're...you're crazy!\" Mike exclaimed, \"You're fuckin' nuts!\"\n\nThe wound on my lip wasn't deep, and would probably close up in a few minutes, but warm, metallic tasting liquid had been filling my mouth while we stared each other down. I turned my head sharply and spat a mouthful of blood into the sink.\n\nI looked back at him, and I smiled.\n\n\"Maybe I am...but it's good that you know it.\" I said.\n\nI hadn't laid a finger on him, but I'd won. I could see it in his eyes, the livid fear, the complete incomprehension of what I was doing and why. Without even touching him, I'd dominated him.\n\nI turned my back on him and approached the mirror, wetting my fingers under the tap and wiping away the drying blood from my chin. The tension was broken slightly, our gaze lost. He let out a deep breath, and I let myself relax.\n\nIt was over.\n\n\"Jesus...I guess you're really into Jessica, huh?\" he said nervously.\n\nI wiped my lip with the back of my hand and looked at him. He swallowed loudly. It honestly took me a few seconds to figure out what he'd said, or why it was at all relevant.\n\n\"This has nothing to do with Jessica.\" I said, as if that was obvious. \"This is between you and me. You're trying to control me, and I'm telling you that it isn't going to happen.\"\n\nHe didn't have a response to that. He just looked at me, unsure of what to think. Was I really the first person that hadn't cowered at his violence, his strength? Was I the first person to look in to his eyes without fear, not because I was bigger or stronger than he was, but simply because I wasn't afraid of the pain?\n\nI mentally shrugged. It didn't matter. This thing with Mike was over, as far as I was concerned. He was just an idiot. I was going to sit with Jessica every day if I wanted. I could take her to his house and fuck her on his bed if I felt like it. He couldn't stop me. Unless he killed me.\n\n\"Get the fuck out.\" I ordered.\n\nThere was no meek little whimper of consent, no little bow or \"Yes, Sir.\", but I didn't need a clearer sign of his submission than him just turning and walking out of the room.\n\nI turned to the mirror, and smiled at myself. I watched my reflection frown, and lift up his t-shirt, revealing two dark bruises on his torso.\n\nI touched them both tenderly. One just below my chest, a wide and dark one where he'd hit me twice. And a smaller, but darker one along my right ribcage. They hurt, but they'd heal. The pain was weirdly easy to ignore\n\nI guess that's one way to find out you have a high tolerance for pain.\n\nI kept looking at myself after I lowered my shirt. I looked different. Not just because the right side of my lip was starting to bruise and swell slightly...it was something about how I stood.\n\nI was taller, I realised. I'd spent my whole adolescence to this point with my shoulders hunched and my hands in my pockets, just like 90% of guys my age. I shuffled around, making myself look small. I'd always looked like a victim, basically. Guys like Mike had the confidence, the swagger.\n\nIt was just a matter of posture, really, I thought with a smile.\n\nMy shoulders were squared now, and they looked broader. My back was straight, and there was a sharpness in my eye, a confidence to my expression that I wasn't used to seeing.\n\n\"I like to dominate people,\" I said to myself quietly. \"I guess this is what a Dominant man looks like.\"\n\nI smirked, and made for the door.\n\nWhat was, impossibly, only minutes before, I'd scurried through that door like a frightened mouse.\n\nI strode out feeling like a god.\n\nMy skin was practically buzzing as I made my way back to class. When I opened the door every eye was on me, which didn't bother me in the slightest. My social anxiety from even yesterday felt stupid and childish. The collective gasp of shock from the room was another matter, however.\n\n\"Holy shit!\" someone exclaimed, and there was a general stunned silence.\n\n\"What happened to you!?\" asked Ms Kallis, her eyes wide with shock.\n\nOh, right. My lip.\n\nI looked over to where Mike sat, trying to sink down into his chair. Not easy for a guy his size. A few of my classmates followed my gaze and turned to look. Ms Kallis did the same and when she saw Mike, the look of fury on her face startled me.\n\nMs Kallis was one of the kindest and sweetest teachers I'd ever had. She was a fairly young Asian woman, couldn't have been out of her twenties yet. She was so petite and cute that most of the guys did whatever she wanted, and she was so nice that most of the girls felt like bitches for being mean to her or disobeying her. Like kicking a puppy, I'd heard it described.\n\nI'd never once seen her look so very bloodthirsty.\n\n\"I fell.\" I said loudly.\n\nI spoke from the chest, in what I liked to think of as my new \"dominant voice.\" Everyone looked to me, shocked. I looked at Mike again, and he was paralysed with fear.\n\n\"I just slipped in the bathroom.\" I said, smiling and turning to Ms Kallis. \"Pretty stupid, right?\"\n\nI turned and walked to my seat and every eye followed me. Ms Kallis just watched me for a few seconds, her eyes darting between me and Mike. Eventually she seemed to make an internal decision, and continued the lesson.\n\nI tried to pay attention, but it was hard not to notice the pointed looks and whispers. It was a long class, but I knew lunch was next. I'd go and claim my prize, small as it was. Sitting with Jessica and my sister. Something I'd barely even wanted a few weeks ago, but was now apparently willing to die for. I blushed slightly as I thought about how overly dramatic I'd been with Mike. Well, it was more about the principle of the thing.\n\nAs soon as the bell rang, a few people flocked to my desk.\n\n\"What happened with you and the big dude?\" asked a skinny Latino boy that I didn't know.\n\nMike was already making a beeline for the door, and was out of the room before I could even think of an answer.\n\n\"Nothing, I fell.\" I lied, smiling.\n\n\"No way, he followed you in there, and now you're all beat up.\" This came from a pretty brunette girl with big blue eyes.\n\nI shrugged.\n\n\"I saw him in there, but we didn't even talk.\" I lied.\n\nThere was no reason to involve anyone else in this.\n\n\"Then why did he look so afraid when he came back in?\" asked another girl, this one a short blonde with thick rimmed glasses.\n\n\"Ask him.\" I said, then pushed passed them. I strode out into the corridor and headed towards the cafeteria.\n\nI was completely unused to all this. Why did anyone care what happened between me and Mike? But then of course I remembered everything I'd learned about my fellow seniors in these past two weeks, and how I'd learned it. Gossip.\n\nOn my way to the cafeteria, I noticed something that almost made the whole ordeal worth it for this alone. As I walked, people seemed to naturally shift out of my way as I needed them to. As someone who had been doing the avoiding my whole life, this little thing, seeing people weave out of my way while completely unaware of any changes, was pretty exhilarating. Was that some sort of psychological thing? Maybe we move out of the way of those who we think aren't going to move for us, and my new confidence gave out that sort of vibe. It was just a theory, but I liked it.\n\n==\n\nI was the last to sit down at our table with my food, and got a general non-committal greeting from everyone else, each of them barely looking at me then doing ridiculous double-takes when they saw my face.\n\n\"What happened to you?\" screeched Rose.\n\nI shrugged and started eating.\n\n\"I fell.\" I said.\n\n\"Shit, are you bleeding?\" asked Lissie.\n\n\"What happened?\" repeated Rose.\n\nSilence fell over the table as they waited for an answer.\n\n\"It's fine.\" I said, smiling, \"I slipped and smacked my face on a wall, it was stupid and I'd like to...not talk about it, thanks.\"\n\nDerek and Rose laughed together at my story, instantly believing it. Lissie rolled her eyes and went back to her phone, and Becky just shrugged and turned to talk to Frank.\n\nI realised that I still hadn't looked at Jessica, and I braced myself for it.\n\nShe actually just looked sad, her own lip pouting outwards as if in sympathy. Then I saw Mike walking across the room behind her.\n\nAs if sensing my eyes on him, he suddenly looked over at me. I gave him a little nodding greeting, and his eyes widened in confusion, and I hoped fear. I smirked, and turned back to my food.\n\n\"Mike.\" said Jessica suddenly, spinning her head back to look at me.\n\nShe'd seen our exchange, and put the pieces together.\n\n\"Did he do this to you?\" she asked accusingly, fury rising on her face.\n\n\"I...No, I just...\" I stuttered, panicking.\n\nThe others turned to look at me, surprised. Lissie raised her eyebrow at Jessica, but the others looked to me.\n\n\"That...fucker!\" Jessica growled, \"He did this, didn't he? I'll fucking kill him.\"\n\n\"Jessica.\" I said, raising my voice slightly.\n\n\"Tell me he did this.\" she said, a too familiar venom reaching her voice, \"If he did this I'll fucking...\"\n\n\"Jessica!\" I said, putting the full power into my voice.\n\nIt seemed to startle her, and she fell silent. I looked her dead in the eye, something I'd been avoiding doing in public, and saw a little taste of fear and submission creep into her expression.\n\n\"Drop it, now.\" I growled.\n\nHer expression instantly softened. I'd given her an order, and for a second she forgot where she was.\n\n\"Yes Sir.\" she said lightly.\n\nHer eyes widened in panic, and before anyone else could react, she hissed,\n\n\"Your fucking Highness.\", sarcasm dripping from her tones.\n\nNo one else seemed to notice, but they started to ask questions.\n\n\"It's not a problem, guys, Ok? Mike had nothing to do with this, I just fell. Stop being weird.\" I said, trying to lighten the mood.\n\nEveryone seemed less satisfied with that answer this time, but except for Jessica they all seemed content enough to drop it.\n\n==\n\nWhen the lunch bell rang, I headed to my locker quickly, hoping to avoid any more questions from Jessica. As I was switching out my books, I felt an eerily massive presence behind me. I turned quickly to find Frank staring down at me. He was taller than Mike, and maybe even bulkier, but I felt none of the malice or threat from him that I had from Mike.\n\nFrank and I had never spoke alone, and I really didn't know what to expect.\n\n\"Do you need help with Mike?\" he asked, his low voice rumbling in his chest.\n\nThe question startled me, and I frowned at him.\n\n\"Thanks, but it wasn't...\"\n\nI trailed off. For some reason it seemed stupid to lie to him right then.\n\n\"No. I don't need your help.\" I said firmly.\n\nHis expression barely changed, he just nodded and said,\n\n\"Let me know if that changes.\"\n\nHe turned to walk away.\n\n\"Thanks.\" I said impulsively.\n\nHe turned back and smiled at me, but didn't stop and was soon gone.\n\nI shook my head. Frank was a weird guy. He didn't ask if it was really Mike that did it, nor did he take it upon himself to enact vengeance like Jessica seemed to want to. He just asked if I needed help.\n\nWeird guy, but a good one.\n\nI closed my locker, and turned to find Jessica standing in front of me. She looked angry, and a little scared.\n\n\"What?\" I asked harshly.\n\nShe'd almost revealed our relationship to everyone, completely by accident.\n\n\"I want to know what really happened.\" she said.\n\nI sighed, and tried to walk past her. She moved in front of me, something she used to do to block my escape from her torment for years. The familiar action caused my anger to burst forth, but it was easily repressed.\n\n\"Did Mike hurt you?\" she asked.\n\n\"We'll talk about it tonight.\" I said.\n\nHer eyes widened at that.\n\n\"Tonight?\" she asked hopefully.\n\nI looked around briefly, seeing that everyone else had headed to class. We were completely alone in the small locker area.\n\nI reached forward and grabbed her ass, then quickly pulled her into a fierce kiss. She moaned with surprise, and then lust as my tongue ravaged hers. My lip hurt, but I ignored it. It was worth it.\n\nI pulled back and squeezed her ass harder.\n\n\"Tonight.\" I grunted. \"Now get to class.\"\n\nI turned and walked away, not waiting to see her reaction.\n\n===\n\nThat night, I was so ready for her. My mind was buzzing with lust. After that impulsive kiss at school, it had taken almost half an hour to convince my cock not to grow to full hardness in the middle of class. I needed to see her again, to own her.\n\nShe knocked at around midnight, and I told her to come in. She stood at the door wearing what I now realised was my favourite thing to see her in; the black negligee, the first thing she'd bought just for me.\n\nShe looked apprehensive, which was understandable given how our last conversation had gone. We stared at each other for a long few seconds, neither of us wanting to break the silence. As much as I wanted her, I had to make this last. This was about domination, not just sex.\n\n\"Strip.\" I said.\n\nShe jumped at my voice, but quickly obeyed. I almost groaned out loud at the sight of her beautiful naked body. I wanted her more than I ever had.\n\n\"Come here.\" I said.\n\nShe walked over and hesitated beside the bed, before leaning over and sliding under the covers. She looked confused. This was the first time I hadn't asked her to kneel first. I pulled the covers off the bed behind me, leaving her naked and me in just my boxers. Her eyes were wide, and she looked almost fearful as I moved closer to her. She seemed to be cowering away from me, her big breasts pressed together by her arms, which were crossed over her stomach.\n\nI took her by the chin, and pulled her into a kiss. Our lips met, and I slid my tongue into her mouth. For once, she didn't respond with her usual fierceness. She hesitated, her tongue meekly resisting mine. I pulled back from her and looked into her eyes.\n\nWhy was she holding back? I kissed her again, roughly this time, forcing my tongue between her lips. I pulled on her hair and she whimpered into me. It wasn't until I bit down hard on her bottom lip that she finally responded, moaning with lust and pulling herself towards me.\n\nWhen I looked at her again I found a dark and lustful smile playing across her lips. I quickly straddled her and pulled her into another kiss. I ran my fingers down her sides and dug my thumbs into her slender hips, and she thrust her body against mine. My cock was already hard, but I wanted to play with her before going any further. I wanted to hurt her more. No sooner had I thought this when I was surprised with a sudden burst of pain.\n\nMy bottom lip, which was no longer swollen but still sore, suddenly exploded with pain as I felt her teeth sink into it. I pulled quickly away, scowling. I ran my thumb along the heat I felt on my chin, and it came back stained with blood. She'd opened the wound caused by Mike.\n\nShe was obviously terrified at what she'd done, and I knew it was an accident. I slowly licked at my lip and thought again about the day I'd lost my virginity to her, and how I'd hurt her then.\n\nJust as I'd been thinking of a reason to punish her, she gave me one. I couldn't help but smile as I grabbed her roughly by the hair and led her to the side of the bed. She didn't resist, but immediately started to apologise.\n\n\"I didn't...I didn't mean it, I'm sorry. I didn't mean to hurt you!\" she whimpered.\n\nI sat on the edge of the bed and pulled her over my knees. I grabbed her ass hard, digging my fingers in and hoping that she'd bruise.\n\n\"You made me bleed, slut.\" I hissed.\n\n\"I'm sorry, I didn't mean to, I'm sorry!\" she gasped, panicked.\n\nI spanked her hard. Her whole body leapt forward, and she squirmed on top of me. I pulled her hair as I unleashed a rain of blows against her firm, toned ass. She cried out in pain, but she didn't say a word to try and stop me. I tried to hit her harder each time, and my steady rhythm got faster and faster. I didn't want her to count. I didn't want a slow, torturous punishment.\n\nI wanted her to hurt, right now.\n\nThe adrenaline coursed through me as I made her scream. Despite my anger, I was still smiling. This is what I wanted.\n\nI am a Dominant, I thought to myself. I am a Sadist.\n\nI'd been aware of these traits revealing themselves inside me, but I was still getting used to the idea of these labels being applied to me, even in my own head. To have a beautiful naked woman across my knee, shaking with pain and humiliation as I disciplined her like I would a child...that moment, and so many before it just felt so perfect.\n\nAfter making sure her ass was bright pink all over I grabbed her again, squeezing hard. My own hand was burning in pain, but I barely felt it. I could embrace pain like this, accepting it until it didn't matter. Something Mike had taught me.\n\nI finally stopped and leaned back, trying to catch my breath.\n\n\"On your knees.\" I grunted.\n\nShe shakily got to her feet, only to sink to the floor between my legs. She stared up at me, her eyes wide. She wasn't crying yet, I noticed. Well, I had all night to change that.\n\nI grabbed her by the hair and pulled her close to me.\n\n\"You said you wanted to be a good girl.\" I said, my anger tainting my voice.\n\n\"I'm sorry...I did...I do!\" she said, closing her eyes in pain.\n\n\"Look at me.\" I ordered softly, taking her by the chin.\n\nHer eyes shot open and stared into mine.\n\n\"Good girls don't make me bleed!\" I growled, digging in with my fingers.\n\nI slapped her hard, but still not hard enough to leave a lasting mark.\n\n\"I'm sorry!\" she gasped, not even trying to struggle. \"Please, I'm sorry!\"\n\n\"On the bed.\" I said roughly.\n\nShe hurried to her feet and on to the bed.\n\nShe was on her back with her legs spread wide. I grabbed her wrists and pushed her arms up over her head, holding them there with my left hand.\n\n\"Who owns this body?\" I asked, viscously grabbing one of her soft tits with my other hand.\n\n\"You! You own me!\" she breathed.\n\nI tightened my grip and smiled as she pushed herself up and against my hand, even as she moaned with pain.\n\nShe sighed with relief as I released her tit and slid my hand down her stomach. Her pussy was soaking wet. I slid two fingers inside and stroked her from within.\n\n\"And who owns this slutty, dripping, cunt?\" I growled, pumping my fingers into her, hard.\n\nShe struggled against my grip for a second, shaking and moaning.\n\n\"You! It's...ahhh...it's yours!\" she moaned.\n\nI pushed her wrists harder into the bed and curled my fingers inside her. I briefly wished that I had more experience at this, so I'd be able to properly tease her with my fingers, but I barely knew what I was doing down there. I tried a few different things, twisting, and turning, and pumping inside her, watching her groan, and growl, and bite the hell out of that bottom lip. I was trying to ignore everything but her reactions.",
        "This went on for a few minutes until she suddenly gasped and pushed her hips forward, eyes shooting open. I tried to recreate whatever I'd done, and soon got the same effect. It seemed that if I pushed hard with a circular motion on the right spot inside her, it drove her crazy. I kept at it, twisting my fingers and wrist to keep up the pressure, ignoring the discomfort in my hand. She was staring into my eyes now, and I knew she was close to the edge.\n\n\"Sir! I...Oh God!\" she yelled, \"I'm...fuck! Please! I'm...I'm gonna...!\"\n\nShe was too close to even beg, and I smirked as the pleasure took her. She opened her mouth wide and let out shaking moans as she came. Her hot pussy gripped against my fingers and her juices covered my palm.\n\nShe let out a wail of pleasure as her orgasm continued. She looked so fucking incredible. I gripped her wrists tight and impulsively bit down on her shoulder. She jumped, then gasped as I licked where I'd hurt her, and I tried to move my fingers even faster. I bit her again as I felt her orgasm fade, and I slowed my fingers to a gentle stroking motion.\n\nI released her wrists and instead grabbed her hair again. As she opened her mouth to groan with pain, I quickly shoved the fingers that had just been inside her into her mouth. She didn't hesitate to lick and suck on them, whimpering as she was forced to taste herself.\n\nI slid my fingers out and roughly grabbed her chin.\n\n\"Naughty little slut.\" I growled. \"You didn't have permission for that, did you?\"\n\n\"I'm sorry.\" she mumbled, hampered by my grip, \"I'm sorry, Sir!\"\n\nI pulled back from her and got to my knees. Her body was glistening, and her thighs were soaked. Her huge, perfect breasts. Her flat stomach and slender hips. Her bright green and fearful eyes. At that moment, she was the most intensely erotic thing I'd ever seen.\n\nHer hips thrust forward the slightest bit as she stared up at me, and she let out the smallest of whimpers. I could tell she'd just felt an aftershock from her orgasm.\n\nMy heart was pounding in my chest, and my cock was trying to rip through my underwear. I wanted her so badly. To pin her down and sink myself into her, to use her for my pleasure.\n\nBut I still had to punish her.\n\nI knew that if I had the self control to resist her body in that moment, then I'd be able to do anything.\n\nI took a deep breath and tried to quiet my lust. I smiled, which seemed to scare her even more.\n\n\"On your knees.\" I said calmly.\n\nShe turned quickly and presented her ass to me. I reached over her and grabbed the belt. She hadn't noticed, but I'd left it wrapped around the metal bar of my headboard, coiled in the centre in a single black stripe. She looked up and watched me un-hook it, her eyes wide with fear. I slowly unfurled it and took it into my hands.\n\n\"Count to...\" I said slowly.\n\nShe visibly tense, waiting for the verdict.\n\n\"Ten.\" I said.\n\nShe squeaked with fear and tensed even further. I couldn't help but laugh at her. My voice sounded alien to me. So dark. So cruel.\n\nI folded the belt and tapped it lightly against my left hand. On impulse, I snapped down hard against my left forearm, embracing the burst of pain. The sound caused her to jump again, and again I laughed.\n\n\"You came without my permission.\" I said. \"And you made me bleed.\"\n\nI already spanked her for that, but I was originally only going to give her five lashes for the orgasm. This would count for that too.\n\n\"I'm sorry, Sir. I'm sorry, I didn't mean to, I'm sorry.\" she babbled.\n\n\"I know.\" I said.\n\n\"Punish me.\" she said, surprising me. \"I'm sorry Sir, please punish me.\"\n\nWithout waiting, I snapped the belt across her perfect ass. She jumped and gasped, letting out little whimpers.\n\nThe first and only time I'd used the belt, I'd just lost it with her, not counting or controlling myself at all. I had no idea how much of this she could withstand, but it was obvious that spanking with my hand wasn't going to push her to the same depths the belt had. And I wanted to see that again.\n\n\"One.\" she whispered, breaking my train of thought.\n\nI immediately lashed out again, grunting with exertion. There was already a dark red stripe forming where I'd hit her the first time, and a second began to join it. She only waited for around 10 seconds before going again.\n\n\"Two.\" she said.\n\nI struck lower this time, hitting the top of her right thigh. Again she leapt forward, but quickly moved back into place. When she spoke again, her voice was heavy and dream-like. She was quickly reaching that strange daze that submission and pain brought her to.\n\n\"Three.\" she said clearly.\n\nI matched my last stroke, on her left thigh this time. She didn't move after this hit, and barely made a sound.\n\nShe went on like this, barely reacting to my steady, measured lashes, until she reached stroke number seven. I hit her and she immediately leapt up onto her knees, lunging forward to grab my headboard. She'd done this the first time I'd spanked her, I remembered.\n\n\"Jessica,\" I said, keeping my voice calm and even, \"Do you need me to stop?\"\n\nI knew that she'd refuse.\n\n\"No, Sir.\" she gasped, \"I can do it. I can do it.\"\n\n\"Then get down.\" I hissed.\n\nI grabbed her hair and pulled her backwards, forcing her head back down onto the bed. Her face was turned to the side, her eyes were closed. She hadn't started crying. This annoyed me, weirdly.\n\n\"Seven.\" she said.\n\nI took my position. I'd been holding back before, not sure how much she could take. This time I twisted my body back and slammed the belt against her with a new force.\n\nShe lifted her head up an gasped loudly, her mouth open wide. The pain was obviously intense.\n\nI grabbed her and forced her back down to the bed.\n\n\"Eight.\" she sighed dreamily.\n\nAgain I attacked her with force, and this time she didn't move. She let out a long, loud moan that ended with the word;\n\n\"Nine.\"\n\nThis was the last one. I had to make it count.\n\nI whipped her as hard as I could. Her breath caught in her throat, and I saw her start to relax.\n\n\"Don't you dare move.\" I growled.\n\nShe stiffened again, and held the position.\n\n\"Ten.\" she whimpered.\n\nHer whole body was quivering lightly, and her face was still pressed against my pillows. She hadn't cried, but her eyes were open and dazed. She looked almost high on the sensation of being punished.\n\nI grabbed her bruised ass with both hands, causing her to whimper with pain, and ground my crotch against hers from behind. Her pussy was dripping wet, and I could feel the heat and moisture through my underwear as I pushed my bulge against her.\n\n\"What a slutty little cunt.\" I hissed, \"I think this little cunt needs to be filled, don't you?\"\n\nShe didn't answer at first, but started to sway her hips back and forth, running her flushed lower lips back and forth over my cloth-covered cock.\n\nI leaned over her, pressing my body against hers and pushing my bulge harder against her. I grabbed her hair again.\n\n\"Answer me, slut.\" I said, twisting.\n\n\"Sir...\" she gasped.\n\nShe continued to writhe and sway her hips, and I could feel the front of my boxers being soaked in her juices.\n\n\"Listen to me, whore.\" I growled, \"Tell me what you want.\"\n\n\"I want it!\" she gasped.\n\n\"What do you want?\" I asked, lightly slapping her face.\n\n\"I want to be fucked...fucked like a...like a whore!\" she confessed.\n\nThat word had slipped out by accident, and I really hadn't expected her to accept it so easily. So now she was a whore too, as well as a slut.\n\n\"Good girl.\" I said.\n\nI pulled all the way back from her and pulled the waist band of my boxers down. My rock hard erection sprang out, already leaking pre-cum from the tip. Without any further delay, I pushed the head against her dripping pussy lips.\n\nI dug my fingers into her hips as I thrust into her, and I knew something was different.\n\n\"Oh my God!\" Jessica shouted as more of me entered her, \"You're so...thick!\"\n\nShe was right. Her pussy was so incredibly tight in this position, much more than I'd expected it to be. I was grunting with genuine exertion as I forced myself into her. Her pussy felt like a hot, wet fist gripping around my shaft.\n\nAfter more hard pushing, I finally filled her. She continued clenching her pussy around my shaft, sighing with pleasure each time.\n\n\"I'm gonna cum.\" she said quickly. \"Sir...Sir, I'm gonna cum. I'm...aahhhhaaaa... I'm gonna cum all over your thick cock!\"\n\nI was already panting, and I let out a strained laugh.\n\n\"Ready so quickly? What a sensitive little slut.\" I taunted, smacking her ass hard.\n\nShe gasped and squeaked in surprise. She didn't speak and seemed to be trying to prevent herself from going off.\n\n\"Beg.\" I ordered simply.\n\n\"Mmmm...Sir... Please...Please let me...Oh God!\"\n\nI grabbed her ass with both hands, and twisted her ripe flesh in my grip. I felt her pussy quiver around my cock, and I knew she was seconds away.\n\n\"Unngh,\" she moaned,\"Please...Please.\"\n\n\"Do it, whore.\" I said.\n\nShe let out a few strained breaths before clenching her pussy tight. She relaxed and moaned loudly, before clenching one final time. I dug my fingers into her ass cheeks as she came, moaning and screaming.\n\n\"Oh fuck!\" she shouted, \"Yes...I'm cumming!\"\n\nI spanked her again and pulled a few inches out of her, before thrusting back in hard. She was so incredibly tight, and her pussy was convulsing around me so powerfully.\n\nI pumped her hard. My heavy balls were slapping against the top of her pussy, and I wondered if I was hitting her clit. It was hard to tell if that was contributing to her fevered moans or not, but she was certainly enjoying herself.\n\nI tried to keep up the pace, but her pussy felt so good that I knew I wasn't going to last. She was still letting out fevered wails as the pleasure racked her body. I thrust into her a few more times, then held myself in deep as I came. I held on to her ass as I grunted out my pleasure. My orgasm was intense and seemed go on and on, spurt after spurt of concentrated pleasure.\n\n\"Oh my God...Oh my God...\" she whimpered over and over.\n\nI finally slid my slimy cock out of her and rested back on my heels. Her bright red ass, with the pale indentations of my grip, perfectly framed her beautiful, flushed pussy. My cum slowly dripped from between her swollen lips, the flow spreading down her thighs, occasionally speeding up as the fading convulsions of her orgasm pushed it out, each one punctuated by a small whimper.\n\nI was exhausted, but I needed to do one last thing before collapsing.\n\nI got the little tub of cream and rewarded her for taking her punishment. She whimpered as the cool cream soothed her burning skin.\n\n\"Am I good, Sir?\" she asked wiggling her hips.\n\nHer voice sounded husky in a sexy sort of way, as if tired from all the screaming she'd been doing.\n\n\"Yes, sweetheart. You're a good girl.\" I said,smiling.\n\nI loved how I could say such condescending things to her and actually mean it. In her submission, anything I said to her affected her so deeply. Even little things like that seemed to mean the world to her.\n\n\"Are...are you proud of me?\" she whispered.\n\nI smiled, remembering what I'd said the first time she'd been punished. I'd been surprised that I actually meant it, and found that I did again. She'd taken a lot of pain, and didn't once try to stop me. It took a lot of strength to withstand something like that voluntarily.\n\n\"I'm very proud of you, Jessica.\" I said.\n\nShe laughed a little, and sighed contentedly.\n\n\"You asked me to punish you when you made a mistake. You didn't complain, or ask me to stop, even though I used the belt. You did very well, sweetheart.\" I said.\n\n\"Thank you, Sir. And...thank you for punishing me.\" she said meekly.\n\nI lay down beside her, and her pulled over to me. She moved slowly, and I realised she hadn't left that position since I started her punishment.\n\n\"Come here, sweetheart.\" I said gently.\n\nShe curled up against me, wrapping her arms around my neck and relaxing her body.\n\n\"Thank you.\" she said again, \"I'm sorry for hurting you. I'm really sorry.\"\n\n\"It's Ok.\" I said, stroking her hair, \"It's alright.\"\n\nShe nodded and breathed deeply. She seemed nervous, and her body began to tense again.\n\n\"Are you Ok?\" I asked.\n\n\"Yeah...I'm fine.\" she said.\n\nI pulled away from her, and she scurried backwards, distancing herself. I cocked my head at her. She didn't look comfortable at all.\n\n\"I'm really sorry about...about biting your lip.\" she said earnestly, \"I just thought...that it would be sexy, or something. I don't know. I'm sorry.\"\n\nShe still looked embarrassed, and cringed at the memory.\n\n\"You already said that.\" I said, smirking.\n\n\"I know, I just...I didn't mean to hurt you. I'm sorry.\" she said.\n\n\"You apologised.\" I said firmly, \"You took your punishment, and I forgive you. Don't bring it up again.\"\n\nShe bit her lip and nodded, but it was clear that she was still concerned about something. There was a feeling of distance between us that I didn't like. The earlier feeling of closeness had soured somewhat, and it bothered me.\n\n\"What's wrong with you?\" I asked.\n\nShe shook her head, and I frowned.\n\n\"Tell me what's wrong.\" I said firmly.\n\nShe looked away nervously, and sighed.\n\n\"Do you remember what you said about me...telling you things?\" she asked.\n\n\"Remind me.\" I said, but I was pretty sure I knew what she meant.\n\n\"You said...that I never have to hide what I'm thinking or feeling from you.\" she almost whispered.\n\nActually, all I'd said was that she \"never have to hide what she wanted from me\". I'd meant it in a more casual way than it had some out, but she'd hugged me so tightly that I knew she'd taken it to heart.\n\nWhich was actually good, now that I thought about it. I was getting more and more adept at guessing what she was feeling based on the tone of her voice, and her expression, but I found myself wanting to know exactly what was going through her head.\n\n\"Yeah. I remember.\" I said softly.\n\n\"Did you mean it?\" she asked.\n\nI shifted my body so that I was lying on my side facing her, supporting my head with my arm. She moved closer to me, and I cupped her face in my hand again.\n\n\"I meant it.\" I said, \"You can tell me anything.\"\n\nI expected her to smile or to look relieved, but instead she looked down and away from me.\n\n\"What do you want to tell me?\" I asked..\n\nShe met my eye again. She was so afraid to say it, whatever it was.\n\n\"Jessica...\" I prompted.\n\n\"I love you.\" she blurted out.\n\nI was a little confused. This was like the hundredth time she'd told me.\n\n\"I know.\" I said.\n\n\"But do you?\" she asked accusingly. \"Do you know?\"\n\nI wasn't sure what she was getting at until the memory hit me.\n\nOf course.\n\nThe last time we'd been alone I'd lost my temper with her. I'd called her \"clingy\", so now she was keeping her distance by not cuddling with me like she usually did. I'd called her pathetic...maybe that was why she was resisting me earlier.\n\nAnd what seemed to matter to her most...I'd told her that she didn't love me, that she only loved my dick.\n\nShe thought that I was still angry with her...or she didn't think that I believed her.\n\nShe wanted to know that I knew how she felt.\n\nI smiled and moved closer to her pressing our bodies together and putting my arm around her. I leaned in to kiss her, but she pulled away from me.\n\n\"Wait.\" she said, almost panicked, \"I'm sorry, just wait a second, please. I just need to say this. I need to get this out.\"\n\nI was annoyed at being denied, but I tried not to show it. I started gently rubbing the nape of her neck, and pulled her closer. She'd been hit pretty hard earlier by the feelings of submission, and I could admit now that I cared too much for her to watch her break down like she'd done the night I lost my temper. If she needed to talk about this, then I was going to let her.\n\n\"Tell me what you want to tell me.\" I said gently.\n\nNow she looked relieved.\n\n\"Ok.\" she breathed. \"Ok.\"\n\nShe closed her eyes for a few seconds as if preparing herself, before meeting my gaze with resolve.\n\n\"I just...I work really hard.\" she said.\n\nThere was a beat of silence as I waited for her to continue.\n\n\"I work really hard, at a lot of things.\" she said, \"I'm on course to be the valedictorian, you know. And I'm not really that smart. I have to study so much. That's why I only come over here on Friday nights, every other day I have to study.\"\n\nI had no idea her grades were that good, but it actually wasn't that surprising given what I'd learned about her. I didn't believe for a second that her own intelligence didn't have something to do with it, though. I'd hung out with people who worked just as hard as she did and barely stayed above average.\n\n\"And I work out. Rose and I have been jogging together three or four times a week for about two years now. Plus I'm the Editor-In-Chief for the school newspaper, which is its own whole messy thing. I've had to pretty much recreate it all single-handedly, and no one else who helps out really gives a shit about it.\"\n\nShe sighed and lay back, looking up at the ceiling. I pulled my arm away from her and got more comfortable. I could tell this was going to be quite a speech.\n\n\"Apart from coming here and occasionally going to a party or something, I just work, in some way or other. And that used to be fine. I could relax and hang out with Rose, and that was enough. But just before last Summer...it just got hard. It was like...it's like...\"\n\nShe trailed off, trying to get her thoughts in order.\n\n\"Like when I'm studying Math, I spend half the time worrying that I should be studying History instead. Or when I'm proof reading some articles for the paper, I feel like I should be studying for college. Even when I'm jogging,\" she said, getting a little frantic, \"Which is just an hour of my time, I feel like I should be doing something else! It wasn't so bad at first, but it started to bleed over into my free time too. I can barely even enjoy just being with Rose because my stupid brain doesn't let me!\"\n\nShe turned to face me again and sighed, calming herself. It was hard for her to say all this, I could tell. It seemed like this was the first time she'd tried to talk to someone about this.\n\n\"I put a lot of pressure on myself...which is fine, it's what I want...but I just always feel like I'm wasting my time. Like there's always something more important that deserves my attention. It's so fucking stressful. Just, constant worrying, constant stress, never being able to relax for a God damned second because of I'm always thinking about my other priorities.\"\n\nShe reached out to me, resting her hand on my cheek. She rubbed her thumb back and forth, caressing me gently, like I'd just done to her.\n\n\"But when I'm with you...it's different. Everything about what you do to me is so... powerful. And it hurts but...but it's what I want. When you order me to do something, it's like it's the only thing in the world that matters. Even when I'm just kneeling in front of the door, waiting for you to look at me...it feels like that's where I'm supposed to be. I don't even have to think about what else I should be doing, because that's where you want me to be. And when you hurt me... I know it's because I... I deserve it...and I want it.\"\n\nShe shook her head. I could her the emotion rising in her voice.\n\n\"I know it sounds like a small thing...but being with you just feels right. I don't have to worry about my life, or school, or whether my friends think I'm a bitch, or my fucking parents or... anything else. I can just turn my brain off and just...give myself to you. It's the only time that I can just... just... be... without... without anything else...\"",
        "She trailed off again, biting her lip as her eyes welled up slightly. She shook her head again and leaned towards me, putting her mouth in front of mine but getting no closer. Her way of silently begging for a kiss.\n\nI kissed her softly, and slowly. She ran her fingers up into my hair as our tongues moved together, and let out a small moan as I felt a tear roll down her cheek. Oh, now she was crying, I thought to myself.\n\nShe broke the kiss and rested her head on my shoulder.\n\n\"I think this is my favourite part.\" she whispered, \"Right after I...after I've been punished, or...or fucked. My whole body's still just buzzing with pain and pleasure, and my mind's completely clear. We're both just here, and I'm yours. It's just so perfect.\"\n\nShe kissed my cheek again before pulling back and looking me in the eye.\n\n\"I mean, that's not everything I feel for you. I still don't really understand my feelings for you. But...how could I not love someone who makes me feel like that?\" she said softly.\n\nJust at the word love, I felt a familiar twinge of annoyance that I hadn't even recognised until now. I didn't like hearing that she loved me. Hearing it had always bothered me. It had been what set me off when I'd snapped at her the day before. I'd been ignoring the discomfort it made me feel, but now it made sense. It bothered me because I didn't believe it.\n\nBecause how could she?\n\nForget who I was, the parts of me she didn't know, and the parts of me she used to mock. If you only take into account who I was with her, my newly discovered \"Dominant\" side; the darkness, the cruelty, the violence...how could she possibly love someone like that? How could she genuinely love someone who treated her like I did?\n\nAnd the parts of myself that I wasn't showing her just felt worse. I hurt her so much, and I tried to distance myself from those abusive assholes who beat their wives, by telling myself that she wanted it too...but in the end, I was hurting her because I wanted to. It felt dark, and cruel, and sick, because surely it had to be.\n\nBut she loved me. I may not have understood it, but she did. She saw the darkest parts of me, my anger and sadism, and was excited where most people would be disgusted. I almost laughed out loud as a thought struck me; I'd been so worried with hiding my growing affection from her, when it was my vviolence towards her that I was really ashamed of.\n\nIn response, I kissed her again. It started slowly, but got more and more passionate until I grabbed her hips and pulled her body onto mine. She straddled me and wrapped her arms around me, our tongues dancing wildly.\n\nI tried not to shy away from the feelings she gave me. I was finished with that, with ignoring parts of myself because they made me uncomfortable. I still didn't know exactly what Jessica meant to me, but I knew that it wasn't all darkness. When this whole thing had started, I'd had no idea how funny she was, how brilliant she was, and how...profoundly alone she was, or how hard she worked. I'd just seen her as this two-dimensional bitch because that was all she'd shown me.\n\nBut unfortunately, just because I had a better understanding of why she'd always behaved the way she did, it still didn't excuse it. That deep seated bitterness, the contempt and hatred of her, was still there somewhere, mixing in with everything else I was feeling.\n\nBut I chose to embrace the lighter side this time, rather than the darker.\n\nI rolled her over and kissed her deeply, and smiled as she whimpered softly into me. I ran my fingers into her hair and moved my tongue more forcefully in her mouth, causing it to roll sensually against hers. She whimpered again as her body shivered with pleasure, and I couldn't help but moan in response.\n\nMy cock was already hard, and I quickly lined it up with her pussy. I pushed the tip against her slick pussy lips, but stopped before going any further.\n\n\"Please fuck me, Sir.\" she begged, smiling, \"Please fuck your little...whore.\"\n\nShe really was a fast learner. I liked to hear her beg, but she said it with a much lighter tone than before.\n\n\"So you're a whore now too?\" I asked, smiling with her.\n\nShe kissed my cheek and let out whimper of lust.\n\n\"If you want me to be your whore, I'll be your whore.\" she whispered.\n\nI smiled and laid my cock flat against her stomach. I raised my torso up and pushed her head down by the hair.\n\n\"And what does my little whore want?\" I asked.\n\n\"She wants to be fucked. Fucked by your big, thick cock Sir.\"\n\nShe looked down at my impressive length that covered her navel, and let out a little murmur of desire.\n\n\"Please fuck your whore, Sir.\" she moaned.\n\nI wasted no time in sliding the head of my cock into her tight channel, then sighing with pleasure as I slowly filled her.\n\nShe let out a drawn out, \"Yessssssss...\", until I pushed in the last inch or so with a suddenly hard thrust, which made her yelp with surprise.\n\nShe was so slick and hot, and she quivered along my whole length. She pushed her head back into the cushions and closed her eyes tight.\n\n\"You love that cock inside you, slut?\" I asked, thrusting in and out with only a few inches.\n\n\"Mm hmm...\" she whimpered, nodding, \"I love...I love the way you fuck me.\"\n\nI slid out a little more, depriving her of being filled to her depths. She groaned at the little frustration.\n\n\"That's not what I asked, sweetheart.\" I said lightly, \"I asked if you love my cock.\"\n\nShe bit her lip and stared up at me, her emerald eyes swimming with emotion.\n\n\"I do...I love your cock, Sir.\" she said, as if she was ashamed.\n\nI rewarded her honesty by picking up the pace, and sliding more of my length into her with each stroke.\n\n\"You love my big cock?\" I prompted.\n\n\"Yessss...\" she hissed gently, \"I love it. I love your...unnghh...\" she moaned with sudden pleasure. \"I love your huge cock. It stretches my little pussy out...and it hurts...Oh God, it's so good...It fills me up so good...\" she whimpered.\n\nI laughed darkly and sped up again. The increased rhythm made her beautiful boobs bounce and shake with each thrust. I took the left one in my hand, and squeezed it gently. I wanted to explore these wonders more.\n\nI leaned down and took her right nipple into my mouth, sucking and nibbling it gently. Again, I had no real idea what I was doing, but just flicking my tongue across it made her gasp with pleasure.\n\n\"Oh that feels...ungh...that feels good...\" she sighed, her voice shaking.\n\nI brought my right hand down from her hair and started to gently squeeze and knead the other boob in tandem with my other hand, while taking her left nipple between my lips and giving it the same treatment as the right.\n\nPlaying with her incredible tits like this was so deliciously erotic, and it caused my dick to twitch inside her. I suddenly squeezed her both nipples hard and buried my face in her deep cleavage, savouring the incredible softness and heat. Her hands suddenly pushed against the back of my head, and she pulled me harder against her soft chest. I laughed and twisted her nipples lightly, causing her hips to thrust against mine, interrupting my slow and steady pace.\n\n\"Sir I'm gonna cum.\" she declared suddenly, \"Sir, Sir, I'm close...\"\n\nI lifted my head up from her wonderful fleshy pillows and squeezed them hard.\n\n\"Cum for me, Jessica.\" I said gently, \"Let me see you cum.\"\n\nI increased my pace, faster and faster, until our hips were slamming together. It wasn't long before she went off, her face body writhing in ecstasy beneath me and her hot pussy juices flowing down my balls. I dug my fingers in harder and went for gold, pumping in to her as fast and hard as I could. She let out another spirited wail, and I knew a second orgasm wasn't far behind the first.\n\nI'd been holding back for a while now, and I waited until I felt her tight pussy clench around my cock again that I allowed myself release. My hands found her hair and throat as my sperm flowed into her. The aftershocks of her orgasm seemed to fuel my own and it was several long seconds before either of us moved, each of us just enjoying the pleasure of the other's body.\n\nI stared down at her pleasured features, and she seemed surprised to see me staring when she opened her eyes. She laughed lightly and bit her lip.\n\nI kissed her slowly and tenderly, our tongues finding a sensual dance against one another. I pulled back slightly, and watched as her tongue tried to follow mine, wriggling outside her mouth. I smiled and she pouted up at me, and then I kissed her again. I put my hand against her forehead and gently pushed her down, again breaking the kiss before she was ready.\n\nI kissed her closed lips, always pulling away just as she tried to kiss me back. She let out a whimper of frustration and tried feebly to push against me. I laughed, and continued the slow teasing as we got our breath back.\n\nAs deftly as I could, I tried to get on my back and simultaneously roll her on top of me. It didn't quite go as planned, and she giggled as she wriggled around on top of me, trying to find her usual position. She found it, and her body relaxed.\n\nI looked down at her, both of us panting and smiling.\n\n\"I love you.\" she said, leaning in to kiss my neck and cheek. \"I love you, Sir.\"\n\n\"I know, sweetheart.\" I said, trying to get my breath back.\n\n\"Yeah?\" she said with a smile, meeting my eye.\n\nShe may not have known everything about me, or what I was feeling, or what I thought of her, but I had no doubt now how she felt about this side of me.\n\n\"I guess...I didn't really believe you. But...yeah.\" I said.\n\nHer smile grew, and she hugged me tightly.\n\n\"I do love you. But...you were kinda right...\" she said quietly, \"I do seriously love your cock, too.\"\n\nI laughed, and she giggled along with me. I kissed her forehead and pulled her close to me. She rolled over and looked up at me, her smooth legs resting between mine. I stroked her hair and gently massaged her scalp, thinking of how violently I'd been hurting her here just a little while ago.\n\nShe rolled off me and we both lay on our sides, facing each other. We didn't speak, but just occasionally gave each other a few kisses on whatever exposed skin was available. She laughed gently as she kissed and nibbled on my jaw line, and I responded my nibbling her ear lobe. This got a surprised little gasp of pleasure, which made us both laugh.\n\nWe rested and dozed lightly for almost an hour, just relaxing and moving with each other to get comfortable.\n\nEmbracing the lighter side of my feelings felt good. I could forget everything she'd been to me and just focus on what she was. And she was incredible.\n\nAfter a time, we both seemed to perk up a little more, recovering from our earlier fun. I rolled onto my back and pulled her with me, and she laid her head on my shoulder again. She looked up at me with those adoring eyes, and I honestly wondered how I'd ever managed to get to this point. I didn't think I would ever feel so close, so intimate with another person, least of all Jessica.\n\nA thought rose unbidden in the back of my mind. I'd never told her I loved her, and she'd never asked about it. Did she not care? Did she just assume I did? Either way, my own feelings towards her were something I was still figuring out. Like I said, I'd felt what I thought was love before, and I felt similar things for Jessica. But as much as I liked her, and cared about her, I wasn't sure this would be called love.\n\nAnd that's without going into the darker feelings.\n\nBut I didn't have to think about that now, I thought, sighing contentedly. We were both happy right then, and that was enough.\n\nI opened my eyes to see that she was watching me intently. Her eyes were locked on to my lower lip, and she sighed.\n\n\"Are...are you going to tell me what happened?\" she asked, breaking the long silence.\n\nShe reached towards my face, but then stopped herself. She was so worried for me. I smiled, and she looked confused.\n\n\"Fine.\" I said, \"You were right, it was Mike.\"\n\n\"Oh, I knew it.\" she said. \"What happened? Why did he...does he know about us? Was it my fault?\" she asked.\n\nI laughed.\n\n\"Actually, I think he does suspect something. Or he was just being a dick because he could. It doesn't matter, anyway. I took care of it.\"\n\n\"But what happened?\" she desperately asked again.\n\nI sighed. She wasn't going to give this up.\n\n\"He told me not to sit with you any more. Said you were still \"his girl\", and that I had to stay away. At first...well, at first I didn't know what to do. But eventually I got him to follow me into the bathroom, where I basically told him to go fuck himself. That's when he did this.\"\n\nI gestured to my lip.\n\n\"And...this and this.\" I said, pointing to the two bruises on my torso, which were mostly covered with her body.\n\n\"Oh.\" she said, looking down. \"Oh my God.\"\n\nShe rolled off me, noticing my other injuries for the first time. In the low light, they were hard to notice, and I guess she didn't really look anywhere except my face and crotch, I thought with a smile.\n\nAnger exploded across her face so quickly, and her body tensed up.\n\n\"I'm going to kill him.\" she growled.\n\n\"Jessica...\" I warned.\n\n\"No!\" she said angrily, \"I'm going to rip his tiny cock right off. Who the fuck does he think he is? God, he thinks I was a bitch before? I'll fucking kill him!\"\n\n\"Jessica!\" I said firmly, my voice sounding deeper and more powerful.\n\nJust like at the cafeteria, the sudden authority in my voice seemed to shock her.\n\n\"You're not even going to look at him, do you understand? This is between me and him now.\" I said.\n\nShe glared into my eyes, unwilling to back down.\n\n\"How do you know this isn't going to happen again?\" she asked.\n\n\"Because he knows he'll have to do much, much worse than this if he ever wants to control me.\" I said, matching her ferocity. \"I laughed at him, Jessica. I laughed in his face and told him he'd never be able to scare me into obeying him. And he was afraid of me.\"\n\nI thought back to his dumbfounded, terrified expression.\n\n\"You're fuckin' nuts!\"\n\nI smiled at the memory. My laughter had been pretty insane, as was my insistence that he'd have to kill me for me to obey him...but I thought I'd handled the whole thing pretty well.\n\n\"I don't think I have to worry about him any more. And even if I do...I don't need you to protect me.\" I said harshly.\n\nShe seemed surprised at my answer but she still had her guard up, anger playing across her features.\n\n\"Tell me you won't even admit that you know this happened.\" I said. \"Tell me you won't try to get back at him.\"\n\n\"If he hurts you again-\" she started.\n\n\"Jessica!\" I shouted, cutting her off.\n\nI grabbed her hair and yanked her towards me.\n\n\"This isn't a debate!\" I hissed. \"Mike is none of your business any more. As far as you're concerned, he's just some asshole you used to fuck, got it?\"\n\nShe whimpered with pain and struggled against me. I tightened my grip.\n\n\"Do you understand?\" I asked again.\n\n\"Yes! I get it!\" she whined.\n\nI released her, and her head dropped to my chest. I took her softly by the chin and turned her face towards mine.\n\nThere were tears welling up in her eyes, and she still looked angry.\n\n\"Sweetheart...\" I sighed, \"I know you want to help me, but this isn't something I need help with. I can handle Mike by myself, Ok? Trust me.\"\n\nHer expression softened, and she leaned towards me.\n\n\"I just don't want him to hurt you again.\" she said.\n\n\"He won't.\" I said firmly.\n\nShe stared into my eyes for another few seconds before nodding and looking away. It had been a long time since someone had been so protective of me. It felt good, and I couldn't help but smile.\n\nI felt like I had Mike under control, at least for now. Even if I didn't, I wouldn't have anyone else fighting my battles for me, especially not her of all people.\n\nI pulled Jessica close to me again.\n\n\"I don't want you to get hurt.\" she said again, pulling away and looking up at me.\n\nHaving someone care about me to this extent was really strange.\n\nI kissed her, and she responded by taking my injured lip between hers and licking it softly. I laughed as she sucked on it, and she giggled in return.\n\nShe pulled back and slowly slid her body down mine, leaning in to kiss the bruise below the centre of my chest a few times, letting her tongue sneak out and lick it softly. She was being so oddly tender, and it felt so intimate. Once she'd kissed every bit of the wide bruise, she slid down again, accidentally engulfing my cock in her boobs as she started to kiss the bruise on my ribs.\n\nShe felt my cock growing between her warm tits, and she smirked up at me. She slid lower, until her chest was resting against my legs and her face was behind my growing erection.\n\n\"Did he hurt you here, Sir?\" she asked sweetly, taking my thick, half-hard cock in her soft hand and staring up at me. \"Do you want me to kiss it better?\"\n\nIt amazed me how quickly she could submit.\n\n\"Can I kiss it, Sir?\" she asked quietly, \"Can I suck you?\"\n\nShe stared at my growing cock, biting her lip as she ran her hand along it's length.\n\n\"Do it.\" I said.\n\nShe quickly smiled up at me before planting a firm kiss on the head of my cock, pressing it hard against her lips. From there she started her usual warm up routine, planting firm kisses and licks all along my shaft.\n\n\"I can taste myself on you.\" she said stroking me, \"I can taste my...my slutty pussy on your...big cock.\"\n\nI was surprised to hear her talk like that without being ordered. Her cheeks had a light blush to them. She'd told me herself that submitting to me made her feel \"pathetic\". Disgusting, even. It humiliated her. She looked away from me as she sucked the head of my cock into her mouth and swirled her tongue around it.\n\nI suppressed a groan, but immediately regretted it. I didn't have to hide my pleasure from her. As the pressure in her mouth increased, I let out a pleasured sigh.\n\n\"Good girl.\" I said.\n\nShe pulled back.\n\n\"Do you like that, Sir?\" she asked, sounding surprised.\n\n\"Lick the base.\" I ordered.\n\nShe immediately complied, and started feverishly licking the bottom of my shaft.\n\n\"Not like that.\" I said.\n\nI sat up and put one hand on the back of her head. With the other I pointed to where my shaft met my scrotum.\n\n\"Put your tongue here.\" I ordered.\n\nI moved my finger and her tongue took it's place. She didn't move, and for a second I enjoyed the feeling of her hot, quivering tongue on the sensitive spot.\n\n\"Now, keep your tongue flat and lick all the way to the top.\" I said.\n\nShe slowly did what I ordered, using her other hand to push my shaft against her tongue as it glided up the underside of my cock. A shiver of pleasure rolled down my spine, and I sighed again as she reached the head. I loved it when she licked me like that. Without speaking I guided her forward, and she took me into her mouth. I lightly gripped her hair and led her up and down in a slow, steady rhythm.\n\nHer eyes were closed, and she suddenly whimpered with lust. She liked being told exactly what to do, it seemed.\n\n\"Now, show me what you did all that practice for.\" I said as I pushed her down.\n\nShe inhaled sharply through her nose and took me into her throat. She hesitated for a second as she relaxed.\n\n\"That's it, sweetheart, all the way down.\" I said gently.\n\nShe let out a few more mewling whimpers, and looked into my eyes as she took me all the way to the base. She held it there, waiting for more instruction.\n\nI enjoying the heat of her throat encasing my entire cock, and the look of lust and submission in her eyes. She didn't make a sound except for the occasional pulse of her throat, not even able to breath around the girth of my shaft. After around 30 seconds of this intense pleasure, I slowly pulled her up. Couldn't have her choking again, after all.",
        "She inhaled as soon as my cock left her throat and resumed swirling her tongue. I pulled her up until my cock popped free from her lips, although it felt like she was trying to pull it along with her through force of suction alone.\n\nWith my other hand, I grabbed the base of my cock. I pressed the head against her cheek, tapping it lightly a few times. She closed her eyes and whimpered again.\n\n\"Do you love this cock, slut?\" I asked gently.\n\n\"Yes, Sir. I love your big cock.\" she replied breathlessly.\n\nI slid it along her soft cheek, covering her with her own spit and my pre-cum. Her blush deepened and she let out a fevered moan. This was humiliating for her, but that was part of the appeal. This kind of degradation went hand-in-hand with the submission for her. I looked over her head and saw that she was crossing her arms behind her back, in the same position I'd tied them in the first time.\n\n\"Do you want this big cock in your throat?\" I asked.\n\nShe let out a whine of arousal.\n\n\"Please use my throat again.\" she answered quickly.\n\nUse? The word made my cock twitch and my heart pound.\n\n\"Use?\" I repeated, smiling. \"You want me to use you? Hm? Use your tight, slutty little throat?\"\n\nI could see her humiliation deepen and she let out a soft whimper. I pressed the head against her lips, but pulled her away as she opened her mouth to it.\n\n\"Answer me.\" I said.\n\n\"Yes.\" she said quietly.\n\n\"Jessica. Come on.\" I said condescendingly.\n\nShe closed her eyes and swallowed hard, preparing herself. She looked into my eyes, and I smirked down at her.\n\n\"Please use my throat, Sir. Please use your slut.\" she begged. \"Use my...my slutty little throat for your thick cock.\"\n\n\"Good girl.\" I said.\n\nI fed her my cock and guided her down my shaft, grunting with lust as I met her throat again. But I pulled up, and let it rest in her mouth.\n\n\"Deep breath, sweetheart.\" I said gently. .\n\nShe nodded and breathed deeply before I suddenly pushed down hard on the back of her head, forcing my cock hard into her. I pumped her up and down the bottom half of my length with both hands, and twisted her hair each time her chin pressed against my balls. She was letting out a constant, low hum, which was steadily interrupted by the sound of her throat being filled. She was still staring into my eyes, and I glared down at her as I fucked her face hard. She closed her eyes, and I did the same, echoing her moan.\n\nThe incredible heat and tightness of her throat drove everything but pleasure from my mind, and I lost myself in my display of dominance. I started to sigh and groan as my pleasure increased.\n\n\"Look at me.\" I said, looking down at her.\n\nShe quickly opened her eyes.\n\n\"Do you like being used by me?\" I asked, pinching her cheek with my left hand.\n\nShe grunted and hummed in response. I slapped her hard on the cheek, flinching as I felt her teeth press against the base of my cock.\n\n\"Answer me, whore.\" I said.\n\nShe let out a high pitched squeal and I felt her resist my grip, desperate to obey. I laughed darkly as I shoved her down even harder. I held her there for a few seconds, flexing my cock inside the slick passage of her throat, before quickly yanking her off.\n\nShe lifted her head high and breathed deeply, trying not to cough.\n\nI yanked her back to my crotch and slammed my cock against her lips. Her whole mouth was covered in spit, and there were a few strands of saliva connecting her lips and chin to my cock. She was swaying her hips back and forth urgently, obviously desperate for contact.\n\n\"Tell me what you want, slut.\" I growled.\n\n\"Use me!\" she shouted, her voice hoarse, \"Please, please cum! Fuck my throat! Use me, Sir!\"\n\nI fed her my cock and pushed her to back to the base, hard. I pumped the last few inches in and out of her for another few minutes before I stopped trying to hold the pleasure back.\n\n\"Swallow.\" I ordered, grunting as I ejaculated into her.\n\nShe let out another piercing squeal, and the depth and humiliation of her submission had triggered her own orgasm. We came together, with me firing shot after shot of sperm down her throat, and her pussy twitching and convulsing without even being touched. I let out a shuddering sigh as my orgasm ended, and slid my thoroughly spit-drenched cock out of her mouth. She pressed her head against my thigh, and her body continued to shake.\n\nI threw myself forward and reached behind her. I grabbed her bruised ass hard, digging my fingers in deep, and pulled her towards me as she let out another shriek. She quickly straddled my thigh and dug her face into the crook of my neck, still gasping and shaking. She wrapped her arms behind my neck and gripped tight.\n\n\"Sir...\" she gasped, \"Sir, I...I...\"\n\n\"Cum for me, sweetheart.\" I whispered, kissing her on the neck.\n\nShe emitted another squeak of pleasure and writhed her hips, grinding her hot, wet, pulsing pussy against my leg. I kissed her neck and slapped her ass with both hands, causing her to jump forward. Her heavy boobs pushed into my chest, and I could feel her hard nipples poking my skin.\n\n\"I'm...uhhuuuuh...\" she moaned, \"Oh God...Oh God!\"\n\nHer body stayed taut and tense against mine as she humped me, coating my thigh in her juices. I smiled and bit down hard on her shoulder, revelling in how every new sensation seemed to prolong and amplify her pleasure. Her orgasm went on and on, and seemed to last forever. I grounded myself in the moment, determined to remember every gasp, every sigh, every thrust of her hips. This moment was all the evidence I needed that Jessica was made to be dominated.\n\nShe eventually slowed her frantic pace and let herself rest against me. Her hips would still thrust irregularly every few seconds.\n\nI leaned back looked at her. She was incredible. Her face was blushed deep red, and her eyes were wide and dazed. Her mouth and chin her still coated in a shiny layer of spit. I grabbed her jaw and aggressively licked her lips before sliding my tongue downwards and licking her chin clean. Without breaking contact, I slid my tongue back up to her lips and slipped it between them, kissing her deeply. She moaned lustfully into my mouth, and I felt her body sag wearily.\n\nI broke the kiss and she let her head rest on my shoulder.\n\n\"Sir...\" she whispered, her body twitching, \"I'm...I'm still-\"\n\nShe cut herself off with a final high-pitched gasp before completely collapsing against me. Her body still made little thrusts and shakes as her orgasm finally faded. I'd never seen it last that long. For a few minutes we both stayed silent, basking in our pleasure.\n\nI lay down and took her with me, settling her head on my shoulder.\n\n\"Did you have fun, sweetheart?\" I asked, smiling.\n\nShe giggled, exhausted.\n\n\"Mm hmm.\" she said lightly. \"Thanks for letting me suck you.\"\n\n\"You mean, for using you?\" I asked.\n\nI kissed her on the head, and she squirmed against me.\n\n\"Did you like being used by me?\" I asked, \"Hm? Did you like it when I fucked your little throat?\"\n\n\"Yes, Sir.\" she sighed happily, \"I love being used by you. I love being yours.\"\n\n\"Good girl.\" I said.\n\nShe kissed my neck and laughed gently.\n\nI knew she had to leave soon, but I didn't want her to. And there was something else I needed to talk to her about, before I forgot. She'd called me \"Sir\" by accident, at the cafeteria, in front of her friends. She covered it pretty clumsily, but luckily no one had noticed. It couldn't happen again.\n\n\"By the way,\" I said, \"You can't call me \"Sir\" when we're not alone. You'll have to get used to using my name.\"\n\nI honestly couldn't remember the last time I'd heard her say my name. For so many years she'd just called me \"Faggot\", or \"Kid\", or \"Bitch\".\n\n\"Right,\" she said uncertainly, remembering why I was bringing it up. \"Um, I guess that's fine.\"\n\nThere was a beat of silence.\n\n\"Well?\" I prompted.\n\n\"Oh right, I don't normally use your name at all, do I? So I guess I'll call you...\" she said.\n\nShe seemed to think about it for a few seconds, but then smiled.\n\n\"Steven.\" she said.\n\nThat was weird. Hearing her say my name in that seductive, adoring voice made my heart skip a beat.\n\n\"Steven Bale.\" she said, as if tasting the words on her tongue. \"Yeah...that works.\"\n\nIt seemed like it had been a while since she'd thought about me with that label too. Even in her head I was probably just \"Roses' Brother\", until I was \"Sir\".\n\n\"Steven owns me.\" she admitted quietly.\n\nI immediately felt my pulse quicken, and a strange heat flowed through me. It sounded so different when she used my actual name.\n\n\"I love you, Steven.\" she said suddenly, nuzzling into my neck.\n\nI tried to stop my body from stiffening in surprise, and I let out a strange stunted laugh. I was glad the light was dim, because I knew that I was blushing. Why did it affect me so differently when she didn't call me Sir?\n\nShe wasn't just infatuated with some dark persona I displayed to her. She was in love with me. Me, the same awkward, lonely guy that she'd mocked for years. It was suddenly real in an oddly profound way.\n\n\"Good girl.\" I mumbled.\n\nShe looked up at me and smiled. I think she suspected that hearing my name used like that had startled me, and she kissed me lightly on the cheek with a small laugh.\n\n\"I want to be a good girl for you, Steven.\" she said lightly, almost thoughtfully.\n\nShe ran a finger along my collar bone, caressing me absent-mindedly.\n\n\"I don't understand so much about...whatever it is you're doing to me. But I know that much.\" she said, smiling. \"I want to be your good girl. It's kind of weird how much I want it, actually.\"\n\nI was starting to feel a little overwhelmed, suddenly. She seemed too calm and content. So far I'd only seen her struggle with these feelings but now she was coming to terms with them, in a way. She was starting to really accept the labels I'd given her. That worried me. I'd only called her these things to hurt her, to make her suffer.\n\nSlut. Whore. Even \"My good girl.\" had a condescending possessiveness to it. Did I really want her thinking of herself in these terms? This proud, strong, beautiful, intelligent woman. Did she really deserve to be treated like this?\n\nBut...she'd answered that herself, hadn't she? At every push from me, she had eventually yielded. She degraded herself in submission to me. She accepted any punishment I had to give, and even admitted to enjoying them.\n\nI shook my head at myself. I was being stupid. Now wasn't the time to second-guess myself. I wasn't threatening her or blackmailing her. She allowed herself to be treated this way because that's how she wanted to be treated. I, with all my darkness and anger, made her happy. She loved me for it.\n\nShe was a slut, and a whore. She was submissive and a masochist. Her new comfort with these ideas shouldn't have shaken me the way they did, but there was something about her actually being ready for all this that unnerved me. But it was exciting, too. She was discovering new depths to her submission, even as I was with my domination.\n\n\"So we're not going to see each other for a while.\" she said suddenly, pulling me from my thoughts.\n\n\"What?\" I blurted out.\n\n\"Christmas.\" she said.\n\nMy mind was a little slow to interpret her meaning.\n\nChristmas was less than a week away. A few days after that, everyone would leave for their winter vacation.\n\nMy mom and dad were going on a romantic get-away to God knows which sun-soaked island a million miles away. Basically they headed to wherever was hottest, as neither of them could handle the cold.\n\nJessica's mother Alice would be taking she and Rose somewhere together, and Jessica's father, Bob, would be heading out hunting or fishing or gambling; something typically masculine. He took his wife's absence as a chance to spend some male bonding time with his buddies.\n\nEveryone would be gone for at least two weeks, usually leaving a few days after Christmas.\n\nAnd me? I was staying at home, alone.\n\nIt was something of a tradition. It had started two years ago, when I was 16. I used to relish our family vacations, as they were the only time I got alone with Rose away from Jessica. However that year Bob and Alice seemed to be having a bit of marital strife, and needed some time apart. We were always on first name terms with Jessica's parents, even as kids, but we weren't trusted with the full details of why they were taking separate vacations that winter.\n\nAnyway, Alice had the great idea to invite Rose along with her and Jessica. This left me with the pretty dire situation of being alone with my parents for two weeks. The point of the vacations were usually for Rose and I to spend time together doing fun kid stuff while our parents did whatever they seemed to enjoy doing so much alone in the hotel room.\n\nI wasn't about to spend my whole New Year break being awkwardly kicked out on my own so my parents could fuck in private.\n\nI may sound bitter, but once I got over the idea of being further separated from Rose, I actually jumped at the chance to spend some time alone. I got the house to myself, I could stay up as late as I wanted, eat what I wanted, and pretty much just live free of Jessica for two whole weeks. I convinced my dad to let me stay on my own by parroting back all the lessons he and Mom had been telling us for years about why independence and self-sufficiency were so important. They trusted me enough to know I wasn't going to throw any wild parties or anything, which I would have appreciated if I'd had any friends to throw a wild party with.\n\nIt was an odd situation, but everyone had had so much fun that year, myself included, that we'd done it again the next year. And I knew it was going to happen again soon. I'd heard Rose talk about where she and Jessica were going, even. But for some reason it just hadn't occurred to me that I'd be away from Jessica for that amount of time. Again, my procrastination-honed brain seemed to be adept at just ignoring facts that I didn't like.\n\n\"Oh, yeah.\" I said lightly, \"Where are you guys going this year?\"\n\n\"Paris, for two weeks.\" she said, \"For all that fun shopping we girls love to do so much.\"\n\nShe sounded sarcastic, but I could tell she was excited.\n\n\"I'm gonna miss you.\" she said. She tried to make it sound light-hearted, but again I noticed an edge of nerves in her voice.\n\n\"Yeah...\" I said lightly, \"Two whole weeks without me. Actually, Christmas Eve is next Friday, so I won't be able to see you then. More like three weeks.\"\n\n\"Oh, yeah...\" she said.\n\nShe was tense, and a heavy silence followed.\n\n\"Do you think you'll be able to last for three weeks, sweetheart?\" I asked, still keeping my voice light. \"I mean, do you remember what happened the last time you didn't cum for that long?\"\n\nShe didn't answer.\n\n\"Three whole weeks without an orgasm.\" I said, \"That seems like too long for a slut like you, doesn't it?\"\n\nAgain, she stayed silent.\n\n\"Doesn't it, Jessica?\" I asked again, my voice taking a darker tone.\n\n\"Yeah...\" she said.\n\n\"Do you think you'll be able to do it?\" I asked. \"Do you think you'll be a good girl for me?\"\n\n\"I...I don't know.\" she said honestly.\n\n\"Hmm...\" I said, pretending to think, \"Well, let's make it fun, shall we? If you can last three whole weeks without an orgasm, I'll give you a nice little reward.\"\n\nShe perked up at that.\n\n\"What kind of reward?\" she asked.\n\n\"A surprise.\" I said.\n\n\"Ok.\" she said excitedly, \"I think I can do it.\"\n\n\"But,\" I said, pausing, \"If you aren't a good girl for me...you know, if you decide to touch that sensitive little pussy and cum without my permission...then you'll get a punishment.\"\n\nI leaned close, and lowered my voice.\n\n\"And I promise you, Jessica,\" I said, \"It'll be so much worse than anything I've done to you so far.\"\n\nShe squeaked with fear, and the tone was suddenly dark again.\n\n\"I can do it.\" she blurted out, \"I'll be a good girl.\"\n\nI pulled away from her, and looked down. She looked eager to please me, determined to prove herself.\n\n\"You know you can't lie to me, don't you.\" I said, my tone serious.\n\n\"I...I've never lied to you.\" she said, as if the idea offended her.\n\n\"Good. But I'm telling you now that you're not allowed to.\" I said. My voice was stern, and almost angry. \"No matter how small or insignificant it seems, you can never lie to me, do you understand?\"\n\n\"Yes.\" she said, nodding, \"I won't, I won't lie to you, I promise.\"\n\nI watched her for a second, as if deciding whether or not to believe her.\n\n\"Good.\" I said, smiling suddenly.\n\nThe sudden change in my demeanour seemed to confuse her. I settled back down and pulled her close to me again. I stroked her cheek gently with one finger.\n\n\"Because the only way you'll be able to receive your punishment is if you're honest, and tell me what a bad girl you've been.\" I said.\n\n\"I won't have to tell you.\" she said confidently, \"I'll be good.\"\n\n\"That's what I like to hear.\" I said.\n\nI leaned down and kissed her lips lightly, before quickly backing away as she opened her mouth and slipped out her tongue. She let out a frustrated little whine, and I smiled before kissing her deeply. I let the passion build, trying to goad her into kissing me more fiercely than before.\n\nI slid my palm down her stomach and slid my fingers along her pussy lips. She jerked with surprise, but rolled back giving me better access.\n\nI broke the kiss and gathered her wrists in my left hand, pushing them up above her head, like I'd done before. I loved seeing her like this. Her long, sexy body on display for me, every inch of skin completely accessible to my gaze and probing fingers. Lust clouded her expression, and she bit her lip, staring up at me.\n\n\"Maybe I should give you one for the road, huh?\" I said, smirking, as I slid my fingers over her wet pussy.\n\nShe pushed her hips forward to try and increase the contact.\n\n\"Yes please!\" she said, smiling, \"Please make me cum, Sir.\"\n\nI slid two fingers inside her, loving how she hissed and sighed with pleasure. I pumped them randomly for a while, watching her lust and pleasure grow. Then I tried to recreate the motion I'd discovered earlier, the one that got her off so powerfully. It wasn't long before I found it again, and she was soon desperately pumping her hips, trying to fuck herself with my fingers.\n\n\"Jesus...fuck, you're good at this!\" she gasped, laughing.\n\nI laughed with her, and kissed her as I stroked that sweet spot again and again. She moaned into my mouth, and I knew she was already close. I liked that she was sensitive and horny enough for my inexperience to not be a hindrance.\n\nI watched her orgasm grow on the horizon, her face blushing even deeper, her tongue sneaking out to lick her lips, and her hips twitching. She was so close now, so very close, every stroke of my fingers drawing her nearer and nearer to the edge of bliss.\n\nShe closed her eyes tight, but then opened them again as her voice got lost in her fevered gasps.\n\n\"Oh God, Oh God, Oh....Sir, I...I'm...!\" she gasped.\n\nI stopped suddenly, pulling my fingers out and resting my hand on her stomach.\n\n\"No! Sir, please don't stop, don't stop I'm soo close, please, please,\" she babbled.\n\n\"No.\" I said simply.\n\nHer eyes widened in surprise, and then horror.\n\n\"Please!\" she begged desperately, \"Please, I need it, please, please let me cum!\"\n\nI shook my head, smiling.\n\n\"I think you've had enough tonight.\" I said.\n\n\"No!\" she moaned, her voice ragged, \"Please, please!\"\n\nShe suddenly struggled against me, fighting against my grip, but I was pushing my whole weight on to her wrists and the angle her arms were at meant she was essentially powerless. She grunted with frustration and tried to wriggle free, which made me laugh.",
        "I stroked her face gently with my wet fingers before sliding them into her mouth. She sucked on them hard, begging me with those wide, green eyes. I let my hand rest around her throat.\n\n\"Please let me cum, Sir. Please don't stop.\" she begged, tears forming in her eyes.\n\nShe clamped her legs together and thrust forwards a few times, trying so hard to bring herself some pleasure.\n\n\"Three weeks, sweetheart.\" I said gently, tightening my grip on her throat ever so slightly. \"You promised.\"\n\nShe bit her lip, and I could see the resignation come in to her eyes. She knew I wasn't just toying with her. She wasn't going to cum again until she got back. She nodded, but her expression was still one of intense sorrow.\n\n\"Are you going to be a good girl, like you said?\" I asked.\n\n\"Yes Sir.\" she whispered, her voice full of defeat, \"I'll be a good girl.\"\n\nI smiled and leaned down to kiss her deeply. She eagerly welcomed my tongue into her mouth, but I pulled away quickly. I let go of her wrists and sat back. My cock was rock hard and sticking straight out from my body and she stared at it as she sat up.\n\n\"Do I have to go now?\" she asked as she rubbed her wrists, finally meeting my eye.\n\nI nodded. She dropped her eyes and turned away from me, getting off the bed.\n\nI actually liked the feeling of sending her away when I was still hard. Since this had begun with her, every night had been a test of my self control; could I put off having sex with her long enough to dominate her each time? At first it wasn't too difficult; I'd still hated her so much that I could easily overpower my lust for her, but I seemed to be becoming more and more attracted to her.\n\nStill, so far I'd passed, and it felt good to know I had some modicum of control over my crazy teenage hormones. I felt like it made a statement to her. I wasn't a slave to my urges, the way most guys my age were, and more to the point, the way she was. She put up with all this degradation and punishment in order to feel the pleasure that she did, and practically cried when I denied her it, but I could send her away with my dick still rock hard if I wanted to. It was just another kind of control, but an important one.\n\nAfter all, how could I responsibly control her if I couldn't control myself?\n\nWhen she gathered her clothes, she walked to the door and turned. She stood there awkwardly, her eyes roaming over my body. I could tell from the way she squeezed her thighs together that she was still desperate for pleasure.\n\n\"I'll miss you.\" she said suddenly.\n\n\"I know, sweetheart.\" I said, \"But it's just three weeks. You can do it, I know you can.\"\n\nA smile flashed to her lips at my words of encouragement, and she nodded confidently.\n\n\"I can.\" she said.\n\n\"Good.\" I said. \"Goodnight Jessica.\"\n\n\"Goodnight Sir.\" she said, \"Um, Steven.\" she corrected, smiling.\n\nI lay down and turned away from her, pulling the blanket up over me. I heard the door open, then close, and I was alone.\n\nThree weeks without any kind of sex with Jessica. And for two of those weeks I'd be completely alone. I would be fine, I always was. I was more interested in how she'd handle it. She was so desperate last time I'd denied her. Would she really be able to last three weeks without me? Maybe it was just arrogance, but I doubted it.\n\nEven after being punished tonight, she hadn't cried like she had in the past. I felt like I was dominating her properly, but I knew there were still unseen depths to her masochism that I had yet to explore. I'd made up the reward or punishment thing on the spot, but my mind was already buzzing with ideas. It was going to be a fun reunion whether she'd been good or not.\n\nWell, fun for me either way. I was still holding my sadistic side in check, but I hadn't found any kind of limit there either.\n\nI would have to make some preparations over the coming weeks to be certain that our relationship kept heading down this dark path. We were both finding new depths to our darkest urges, and I'd be ready for her when she returned."
    ],
    "authorname": "BackyardBottomslash",
    "tags": [
        "dominance",
        "submission",
        "big cock",
        "deep-throating",
        "discipline",
        "punishment",
        "spanking",
        "sadism",
        "masochism",
        "orgasm denial"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/yours-ch-03-1"
}
{
    "title": "Brownwood: Tommy Boy Ch. 03",
    "pages": [
        "February 2015 - Brownwood \n\nShe walked in carrying a large tote bag. I started to say something, but she gently put her finger on my lips and slowly shook her head. \n\n\"The less you speak,\" she said in a low husky voice, \"the better this'll go. Trust me.\" \n\nI nodded. \n\n\"Good, now go find a chair you can sit in and get comfortable. Oh, I almost forgot...\" \n\nShe handed me a CD and grinned evilly. \n\n\"Be a sweetheart and put this in the stereo? I'll tell you when to start it.\" \n\nShe literally skipped to my bathroom and shut the door behind her. I tried to fight back the anticipation but I could feel my heart racing as I made myself comfortable in an easy chair. \n\nSeveral minutes later, I heard a sweet voice call out from the bathroom and tell me to start the music. I was a little taken back when I heard the pulsating beat of Halestorm's \"I Get Off\" fill the room. \n\n\"You don't know that I know,\" Lzzy Hale soulfully panted. \"You watch me every night.\" \n\nMy entire living room faded into the background as Angie strutted out. She was dressed in a blue and silver cheerleading outfit, complete with tight sweater top, short skirt and pompoms! She had her hair pulled back into a golden ponytail with a big blue ribbon and looked every part the cheerleader fantasy. Her big sweet smile let me know she knew she rocked the look. While her smile and appearance screamed youthful sexiness, her eyes said something very different. \n\n\"I get off on you,\" Lzzy screamed, \"getting off on me!\" \n\nI swear Angie's stare morphed into a lioness' gaze as it assessed its prey. \n\nShe swayed and twisted with the music in a way that could only be described as an acrobatic dance. For every graceful, sensual dance move there was an overtly sexual athletic one to counter it. I sat in awe as my body was on sensory overload. From her incredible muscular legs to her huge breasts, which were struggling to be released from under her sweater, my brain couldn't process it all. \n\nWhen she bent over, I could tell for certain all she was wearing under her skirt was a familiar tiny blue thong. I'd always known her ass was a masterpiece simply by the way her yoga pants had clung to it, but to see it bare was... breathtaking. It was small and round with muscular dimples in each cheek. I wouldn't have been surprised to learn she could crush things with her butt cheeks simply by flexing them. \n\nHer strip tease continued and I felt my raging hard-on throbbing to the beat. When she finally released her breasts, I was amazed at the sight. I'd known they were huge, but these appeared to be their own entities. Each one was sculpted by a master, huge, but tantalizingly soft, with soft pink areolas that were too small for the globes they sat upon. Each one was topped with a tiny angry red strawberry pointing to the sky. \n\nHer entire body was mesmerizing. Every body part moved in a different way and at different speeds, but all came together in a complex poetry in motion. \n\nAs she strutted towards me, I could see her eyes grow larger as she moved in for the kill. She leaned in close and allowed her breasts to cup my face, then dragged them up to my eyes. I nuzzled and gently kissed them as she let out a soft sigh. \n\nReaching down, she grabbed the bottom of my shirt and pulled it over my head. She pressed her incredibly soft pillows into my chest until I could feel her heartbeat. The heat from the touching of our skin caused tiny beads of sweat to form, and I could feel our hearts racing together. \n\nReaching down again, she slowly unzipped my jeans and pulled them and my boxers down until they pooled around my ankles. \n\n\"Angie I can't...\" \n\n\"Shh,\" she whispered, as she slowly traced the inside of my thigh with her fingernail. \"I know, Tommy Boy, I know. Trust me.\" \n\nWhen her finger reached my erect manhood, she grinned. I'm average sized, or so I'm told, but thick. She gave my stunned face a wink and slowly licked me from base to head like a lollipop. My groan was probably heard by my neighbors. \n\nShe gently kissed the head, smiled and stood up in front of me. Her breasts demanded my attention as they rose and fell with each heavy breath. Tearing my eyes from them, I looked up into her beautiful face. Her smile was a smirk, knowing she had full control of her audience. \n\n\"Now,\" she said huskily, \"if you want, you can keep my thong as a memento of tonight.\" \n\nI leaned forward and hooked my thumbs into the band on each hip. Slowly, I peeled the tiny fabric down over her muscular thighs. I almost swallowed my tongue when I noticed the dark blue fabric was wedged between two swollen pink lips. As I pulled the fabric, it resisted only briefly before breaking free. Angie let a low guttural moan escape and I saw the light glistening in evidence of her excitement as it coated her exquisite womanhood. Stepping out of her thong, she gently pushed me back into my chair. \n\nShe leaned forward and slowly dragged her breasts over my groin, up across my stomach and chest before she pressed her face close to my own, crushing herself into me. I felt her hand gently find my own and she covered it before squeezing it closed over her damp thong. \n\n\"Angie,\" I said, my voice shaking. \n\n\"Tommy Boy,\" she whispered and squeezed my hand holding my memento. \"That was your reward for all the hard work and dedication you've shown this last year. Not only for losing the weight, but for your dedication to Erica and me. \n\n\"I know you've been pushed past the point where if you were to touch me, you wouldn't be able to stop. You've shown you'll honor your promise not to take from me what I won't give you. You continue to surprise me, Tommy Boy.\" \n\nI felt her let go of my hand and gently began to stroke my cock. \n\n\"I can't...\" I hissed. \n\n\"No,\" she hissed back, \"you can't... but I can! This isn't me rewarding you; this... this is for me!\" \n\nShe crawled up my body and straddled me as she lined up my dick. Gently, she began to lower herself onto me and I felt the intense heat of her pussy as it slowly engulfed me. \n\nI'm not sure what a mouse feels as it is slowly swallowed by a snake. I suspect it's a combination of many things: the thrill of the sudden rush of adrenalin, the terror of realizing its life, as it knew it, was about to end, and the overwhelming physical sensation of being crushed by undulating rings of muscles as it's pulled deep inside the snake. \n\nI believe I'd a brief glimpse into that experience. I was overwhelmed by the realization that tomorrow would shine on a very different relationship between Angie and me, and it terrified me. \n\nAngie continued to work her way down my shaft in such small increments it felt as if I was a foot long down there. I let out a low moan as I felt her pull me deeper inside. \n\n\"Oh... my... gawd,\" I groaned and looked up at Angie. \n\nHer face was contorted as she squeezed and released. The rhythm was only broken by her short gasps for air. When she was finally seated with me completely engulfed, she let out a slow soulful moan. \n\n\"Oh gawd,\" she hissed softly, \"so... good.\" \n\nI had the obvious epiphany I wouldn't last much longer. \n\n\"Angie,\" I whispered. \n\n\"Got... all... night,\" she panted. \n\nShe leaned forward and devoured my lips with her kiss. I felt her begin to rise and rock as she began to pump me. I felt the pressure immediately begin to build. \n\n\"Can't last... much longer,\" I gasped. \n\n\"So don't,\" she whispered hotly into my ear. \n\nI didn't. \n\nMy first thoughts as I exploded inside her were a combination of ecstasy, surprise, and terror. Ecstasy, in that I was having sex with my dream girl, and surprise at the amount of fluid that was being pumped out of me, since I felt like a deflating balloon. The terror? That was simple, I was afraid a beautiful woman like Angie, who had access to all different types of lovers, would be disappointed. My fragile male ego, right? \n\nLooking up at her, I saw a look of total concentration, jaw set, breath being held and eyes tightly closed. Moments later I felt the shudder begin around my cock as it seemed to spread throughout her entire body. Angie let out a sharp gasp before she looked down at me and smiled. \n\n\"Sorry,\" I croaked, \"it's been a while.\" \n\nShe looked down at me with a questioning look. \n\n\"Since before the Christmas Ball,\" I continued. \"Afterwards, I couldn't focus on anyone but you.\" \n\nShe smiled warmly. \n\n\"Me, too.\" \n\nNow it was my turn to be surprised. \n\n\"What, no Daniel?\" I said, instantly regretting my words. \n\nShe peered down at me with a mixture of emotions dancing in her eyes. \n\n\"No, no Daniel. Not since before I bought my dress for the Christmas Ball. That's probably why he acted like a jerk that night. Even though we weren't a couple, he still can be possessive at times.\" \n\nShe smiled when she saw me struggling with an unspoken question. \n\n\"As for what just happened,\" she said smirking. \"I'm an exhibitionist, Tommy Boy. Being watched and desired is a huge turn on for me, but it's the thrill I get right before it happens that can be overwhelming. When I was stripping, the rush I got before I went on stage was usually more intense than the actual stripping, most nights. \n\n\"The thought of taking off my clothes for you these past two months has been very exciting, probably more exciting than I'd originally expected. When we kissed New Year's Eve... I knew I was going to go farther than only stripping. That knowledge, that anticipation, has had me on edge more than I've been in a very long time! \n\n\"Tommy Boy, I'm sorry I blurred the lines between us. Well...\" she snorted softly and grinned, \"I'm kind of sorry!\" \n\n\"So,\" I said softly as I tried to gather my thoughts, \"all night?\" \n\nAngie barked out a laugh and then covered her mouth. \n\n\"Erica is at Mrs. Harper's tonight,\" she said softly and nodded. \"We've got some time.\" \n\n\"Good!\" I grunted as I struggled to stand with Angie still wrapped around me like a python. We both laughed as I frog-walked us to my bedroom. Arriving at my bed, I turned on a bedside lamp, and began unwrapping Angie, much to her amusement, before dropping her onto my bed. She lay there on her back and stared up at me with a smirk. \n\n\"What?\" she said coyly. \n\n\"You are the most incredible person I've ever met,\" I said softly, \"I'm awestruck you'd give yourself to me tonight. It's the most incredible present I've ever received.\" \n\nThis time, I saw her begin to get uncomfortable. I knelt down between her legs and heard her soft gasp. \n\n\"Tommy Boy,\" she said warily, \"you don't have to do that since you've... oh... oh my gawd!\" \n\nI'm not a big fan of creampies, but they don't bother me either, at least my own. I'd no intention of cleaning her, but I did want to caress and suckle on her. I was sure she was sensitive down there, but she surprised me when she gasped and clamped her thighs when my tongue flicked her clit. \n\n\"Oh gawd! Please don't stop!\" \n\nIt didn't take long before I felt her go rigid, and then the small tremors began. When she'd ridden the last wave of her orgasm, her legs went limp and I slid up beside her. Gently I wrapped my arm around her. \n\n\"Oh, Tommy Boy,\" she sighed deeply, \"That was nice.\" \n\n\"Nice?\" I replied, a little annoyed. \n\n\"Well nice probably wasn't the right word.\" She chuckled. \"You'll have to forgive me; I'm trying to come back to Earth. My thoughts are still dancing in the clouds. \n\n\"So,\" she said, rolling towards me and gently began stroking my quickly recuperating manhood. \"When this bad boy is up again, what's next?\" \n\nShe certainly didn't have any problems reviving me again, or for a third time. I explored every inch of her over the next couple of hours, archiving every mole, curve and fold. When we were both completely spent, and even raw to the touch, we collapsed into each other's arms. \n\nI heard her chuckle before she cleared her throat. \n\n\"I'm afraid to ask again,\" she said still trying to catch her breath, \"but... what's next?\" \n\nI grinned and gently rolled her away from me. Sliding up behind her, I snaked my arm between her breasts and cupped her cheek. \n\n\"Oh my gawd, are we going to spoon?\" She laughed. \"Tommy Boy, are you sure you aren't a woman?\" \n\n\"If you're still questioning that,\" I snorted, \"then I didn't make much of an impression, did I?\" \n\nShe giggled, and I felt her hand reach behind her and gently pat my manhood. \n\n\"Don't worry, stud,\" she said softly. \"You've already made quite an impression.\" \n\nI pulled her body back into me. I felt the incredible warmth of her ass as it nestled into my groin. Angie let out a long contented sigh. I held her silently for a long while. I didn't want this night to end. I'd thought she'd fallen asleep since her breathing had slowed and her body was now completely relaxed, so she surprised me when she spoke. \n\n\"Tommy Boy?\" she whispered in a small little voice. \n\nI thought at first she was teasing and she was going to say something playful or silly. Instead, she asked something which stunned me. \n\n\"Was it everything you'd hoped it would be?\" \n\nI wanted to yell and ask her if that was a joke. How could she not know she'd given me the best night of my life? How could someone so beautiful, so disciplined and strong be that insecure? \n\nThen I had an epiphany. I didn't know this woman lying beside me as well as I'd thought I did. Even though she'd let me into her life and I knew her better than most, I still made stereotypical assumptions based on her looks, her words and her actions. She'd given me her body, now she was trying to give me something else, something very rare. She was vulnerable. \n\nI thought for a moment on how to reply. I could tell her how wonderful tonight had been and try to soothe any fears or doubts she had or I could tell her the truth, the whole truth. Doing that would leave me very exposed, but then she'd allowed herself to be vulnerable in front of me so I had to hope she wouldn't destroy me with her reaction. \n\nDamn, I surmised, I'm standing at the edge of the abyss again. \n\n\"Yes and no,\" I replied softly and felt her stiffen. \n\n\"Angie,\" I sighed, \"yes it was everything I'd ever fantasized about and more. Having sex with the girl of your dreams is something few men ever get the opportunity to experience, but it's not at the top of my bucket list.\" \n\n\"Now I'm scared to hear what's at the top of your list,\" she said, trying to hide her discomfort with teasing. \"What is it, having sex with two dream girls?\" \n\n\"No,\" I said softly, \"it's making love to the woman of my dreams.\" \n\nAngie became eerily quiet. It took her a few seconds before I felt her breathe again. \n\n\"Tommy, I...\" she started. \n\n\"Relax, Angie,\" I replied gently, \"I'm not asking you to feel something you don't. I know you don't feel the same way I do. It's disappointing, but understandable. \n\n\"At the top of my list is to make love to the love of my life. She'll be my dream girl regardless of what others may or may not think of her. The sex will, of course, be good because it'll be between two lovers, but it'll be so much more than that. I hope to be able to give her everything I am and she'll desire to give me all of herself as well. \n\n\"I thought I had that with Leah, but I was wrong. It turned into a one-way love and those, sooner or later, burn out. \n\n\"Angie I want to thank you for the gift you gave me tonight. It was incredible, partly because you're so damn beautiful, but also because you care for me, at least as a friend. I know you tried to make tonight very special and you succeeded! \n\n\"But,\" I said softly, \"even though you gave me your body, you detached emotionally at times. Please understand I'm certainly not complaining, but I wanted you to know I noticed it. \n\n\"Angie, I've never been able to separate sex and love. Almost every woman I've ever had sex with, I've had some feelings for. I was never like Leah. I couldn't simply go out and fuck somebody. I tried that back in college but it always ended badly. Most of the time we both left feeling cheap and unfulfilled.\" \n\n\"So you had feelings for Tara?\" Angie said softly. \n\n\"Of course,\" I replied, \"You knew I would; that's why you sent her to me. You knew after I'd met her I couldn't hurt her. You knew I was... safe.\" \n\n\"Yes,\" I could hear the smile in her voice, \"and you were the great guy I'd hoped you'd be. Tommy, you've no idea how much you helped Tara regain her self-esteem.\" \n\nWe laid there quietly for several minutes before she broke the silence with a small whisper. \n\n\"So you have feelings for me?\" \n\n\"Please, Angie,\" I whispered in her ear as I pulled her tight. \"You've got to know I love you more than just as a friend. I know, you think I'm only in love with your body, but you're wrong. Yes, I love your body, from your impressive breasts to your incredible ass to your beautiful face, but I love so much more of you than that.\" \n\nShe was still for several seconds before I felt her stifle a small sob. \n\n\"You don't know me, Tommy Boy,\" she whispered. \"If you did, you wouldn't think of me as some kind of dream girl.\" \n\nWe were silent as we lay in each other's arms. I wasn't sure how to proceed without stepping into an emotional mine field. \n\n\"Did you know I've been married twice?\" she said softly. \n\n\"No,\" I replied gently, \"I didn't.\" \n\n\"The first was when I lived in Dallas.\" \n\n\"Is that why Dallas is so hard to return to?\" \n\nShe rolled over and peered into my eyes. Slowly she nodded and I saw her eyes begin to water. \n\n\"Yes, it's painful to go back home and see the disappointed looks and even sneers from those you called friends. What's worse is some of it still comes from some of my family, as well.\" \n\nShe wiped away a stray tear and took a deep breath. \n\n\"We started dating when we were seniors in high school. I was a cheerleader and had recently broken up with our star halfback. Jimmy had been dating a girl who'd moved away that summer. Even against our parents' wishes, we got married right after graduation. Hell, we were eighteen and adults, or so we thought. \n\n\"Jimmy landed a full-time job at a local plant and I was going to school and working part-time as a waitress. Jimmy didn't have the grades to go to college, but I'd received a partial athletic scholarship to play volleyball at the University of Texas at Arlington. \n\n\"That first year we were poor, but happy, and then I got injured during the spring. We were out with another couple and had been partying when we were in a car accident. Everyone came out of it okay but me; I twisted my back. It was bad enough that it not only ended my volleyball career, but also put me out of commission for about a month. In the end, I lost both my job and scholarship. \n\n\"To make up for the lost revenue and stay in college, I started stripping. I'd always been a bit of an exhibitionist, but this was a new experience. Jimmy didn't mind, at least at first. After several months though, it began to eat away at him. Then he got laid off and everything went to hell. \n\n\"He started drinking more and his supposed friends who he hung out with made it worse. They'd constantly tease him about my stripping. A couple of them would even show up and tried to pay for a lap dance. Needless to say, things at home were tense. \n\n\"Our fights typically followed the same old pattern. He'd make some sarcastic accusation, I'd deny it and scream at him, he'd tell me to quit stripping and I'd tell him I would as soon as he could support us. It was a toxic cycle. \n\n\"It didn't take long before he started becoming secretive about his whereabouts. I'd heard he'd been sniffing around his ex-girlfriend who was back in town, the one who'd moved away the summer before we'd started dating. When I confronted him, he denied it. One night I left work early and went looking for him. I found his car in her driveway with the house dimly lit. ",
        "\"The next morning, I asked him where he'd been last night. He told me he'd gone out with some friends. I'd like to say I handled it better, but I didn't. \n\n\"I didn't have these back then,\" she said looking down at her large breasts, \"but I was making a living turning men on. It didn't take much to find someone to get my revenge with. To make things worse and hurt Jimmy even more, I decided to have a one night stand with one of his slimy friends. Until my dying day, I'll regret doing that. \n\n\"I knew it would get back to my husband, and it did. The fight was ugly. It was then I found out he'd been going over to his ex-girlfriend's house, but not to have sex. I learned the reason she'd moved back in high school was because her parents found out she was pregnant. She was supposed to have gotten an abortion but changed her mind and didn't. She never told Jimmy she hadn't gone through with it, so Jimmy learned he was a daddy and had a son. \n\n\"The reason the house was dim was because Jimmy was going over and rocking his son to sleep. He said he'd been afraid to tell me about it since our marriage was already in trouble. I was angry at him for his lies, but I was devastated at my betrayal. \n\n\"Between my cheating and his secrets, our marriage crumbled. I begged for his forgiveness, but my desire to hurt him with my revenge sex had been too much. It was a month before our two-year anniversary that the divorce was final. I was a twenty year-old, cheating, stripper ex-wife! Not the dream of most little girls growing up. \n\n\"I was alone and struggling and hated myself. That's when I met Eric. He was managing the gym where I'd started going. I guess karma really is a bitch, isn't it? I shit all over my first marriage, and then Eric shit all over my second one! \n\n\"But in the end it always comes down to this, once a cheater, always a cheater, right?\" she whispered. \"How can anyone love that?\" \n\nShe rolled back over and I held her tightly as she cried. After several minutes, she grew quiet and I thought she might've fallen asleep. I fought the tears I had in my eyes after listening to her pain and her self judgement. I gently kissed the back of her neck. \n\n\"Damn, Angie, I wish you could see yourself through my eyes,\" I whispered as I snaked my arm between her breasts and cupped her cheek again. \n\nHer response surprised me and changed the way I saw this woman. \n\n\"How do you see me?\" She said it so softly I almost missed the fear and uncertainty in her voice. \n\nIt was then I realized she believed she already knew what I saw. I was like every other man she'd gone to bed with in that they desired what they saw and their desire blinded them to seeing deeper. She'd simply accepted this was just the way it was always going to be. My heart broke as I began to see how her beauty had been both a blessing and a curse to her. \n\n\"I wish I was a poet so I'd be able to say what I want to in a way you'd like, but I'm not. What I am is some lucky fool who's lying in bed holding the most exquisite creature he's ever met. \n\n\"I won't tell you I love you because I doubt you'd believe me. You'd probably think I was confusing love with lust, and you'd be partially right. There's no doubt I desire you, but it's much more than that. \n\n\"What I see, Angie, is an incredible woman who is so much more than just a pair of tits. Unfortunately, she has a difficult time believing it. Actually, she knows it's true but she's convinced herself no guy will ever be able to see beyond her stunning looks. \n\n\"She'd be wrong. \n\n\"I won't deny I love the way you look or that being inside you was one of the greatest feelings I've ever had. I loved the feeling of you wrapped around me. I'll always remember tonight. From your incredible kisses to your soft, smooth skin to the warm, moist piece of heaven between your legs, I love the exquisite way you taste. \n\n\"I also love the way your eyes sparkle when you talk about Erica, or the gym, or anything else you're proud of. I love the sound of your laugh. It brings a smile to my face no matter how shitty my day has been. I'm continuously impressed as I watch you deal with all of the different personalities at the gym. \n\n\"Angie, I see an intelligent and very savvy businesswoman who is hard as nails on the outside, but is an incredibly sensitive woman in private. She's a momma bear, fierce in her defense of her child and of those she cares for, and can be selfless in providing for their needs. \n\n\"She's also afraid. Having to be strong all the time is killing her. She's concerned that if she allows someone into her life he could hurt her, or worse, hurt Erica. That fear leaves her feeling alone, isolated against the world. \n\n\"What has to be frustrating is she knows her love, desire and passion would overwhelm the man she falls in love with. If he'd allow her, she'd be his world with Erica being their moon. She'd be a gift to him that was more valuable than anything he could ever imagine.\" \n\nI felt her hand cover mine as she pressed it softly to her cheek. I could feel the moisture from her tears. \n\n\"Angel,\" I said as I gently brushed back a strand of golden hair and kissed her ear, \"you really are a remarkable woman. Thank you for giving me this night. I'll remember it for the rest of my life.\" \n\nShe reached for my hand and placed it on one of her magnificent breasts. I felt her gently grind her ass into my groin. I held her tight until we both fell asleep, my angel in my arms. \n\nSometime in the middle of the night, I woke up to an incredibly warm sensation followed by a brief sharp stabbing pain around my cock. Looking down I saw the shadow veiled face of Angie as she gently was worshiping my manhood. I felt the moist heat of her mouth as she enveloped me then another sharp stab as she found a raw area. \n\nIt took me a moment to remember we hadn't washed up afterwards, and I thought of Angie doing something she wouldn't normally have done. \n\n\"Angie,\" I whispered, \"You don't have to do that. We can shower first.\" \n\nShe looked up at me and smiled. \n\n\"A little late for that, don't you think?\" She chuckled. \"Besides, it's something I haven't done in a long time.\" \n\nShe bent back over and took me completely into her mouth. I let out a soft groan as she began to bob her head up and down. When I was fully primed, she stopped and looked up at me. I began to say something but she put her finger over my lips. \n\n\"Tommy Boy,\" she whispered, her desire lacing her soft voice. \"That was something I hadn't done in a few years but this...\" \n\nShe gently crawled up and straddled me. \n\n\"This is something,\" she growled as she began to impale herself on me, \"I haven't done since the first year of my marriage to Jimmy.\" \n\nI was confused, so I was silent. This was her show. She slowly slid me into her, not like earlier, but more like putting on a glove. It wasn't until I was completely embedded to the hilt that I felt her begin to clamp around me with her muscles. \n\nShe tightly closed her eyes and began rocking slowly. With each long precise stroke, she slid up and down my pole as her breathing was beginning to become raspy. \n\nAs she began to quicken her pace, I felt her bear down on me even more. I thought for a brief moment she was squeezing so hard that she would begin peeling the skin off my dick. Soon, she had her desired rhythm and I watched in awe as her face began to contort in desire and pleasure. \n\nI felt the small tremors begin but they were different from before. Instead of radiating throughout her body like ripples in a pond, these were more like someone letting out on the clutch of a car too quickly. With each stop and start movement I could feel them beginning to intensify. Just as I thought they were about to break, Angie mumbled her only recognizable words. \n\n\"Oh gawd,\" she whimpered, then went rigid. \n\nUp to this point, I hadn't done much but sit back and enjoy. I'd helped her keep her rhythm by thrusting at the most logical times. Now, I reached and clasped her hips on both sides in my own vice-like grip. I maintained our rhythm by thrusting as deep as I could like a piston. It only took a half-dozen or so strokes before she came. Its intensity actually scared me. \n\nI felt like my cock had been immersed in a scalding hot bath as she exploded inside. The tremors before were now like a full-blown earthquake as she literally shook with each convulsion. Between her death-like grip, the searing heat of her juices and the sheer intimacy of the moment, I only lasted a few more strokes. \n\nI didn't have much fluid left in me, but what was there streamed out like air rushing through a pinhole in a balloon. Angie kept squeezing me until I was sure I was headed for dehydration. \n\nWhen it was over, Angie sat motionless on top of me. Her features were frozen as she outlasted the small aftershocks of our coupling. I felt her begin to tremble before I heard the first sob. She quickly leaned over, crushed her breasts and face into my chest and clung tightly to me. I could feel the dampness of her tears as they dripped onto my chest. \n\nThere are many reactions a woman can have after making love, but crying has to be one of the most confusing to a man. He wonders if he's somehow hurt her, even though he knows it wasn't his sexual prowess regardless of how big she told him he was. Perhaps their coupling had reminded her of something sad or bad from her past. Worse, she might be crying because he's disappointed her or she regrets having given herself to him. All-in-all, it's a reaction which baffles most men, since they simply don't know what to do next. Should they comfort or apologize? \n\nThose were my thoughts until Angie reached up and stroked the side of my face gently. She smiled weakly at my concern. \n\n\"Thank you, Tommy Boy,\" she cooed, \"I haven't let myself go like that in a very, very long time.\" \n\nShe nuzzled back into my chest as I wrapped my arms around her. Soon I could hear her heavy breathing as she slept in my embrace. \n\nDamn, I thought to myself, maybe being so pathetically safe isn't such a bad thing. \n\nI'm not sure how quickly I fell asleep, but when I woke up the next morning, she was gone. I knew things would be different, but I wasn't sure how much. \n\nIt didn't take long to figure it out. \n\n**** \n\nThe next several days were beyond awkward. I tried to talk to Angie several times but she stonewalled me. When we finally did talk, it was obvious all her defenses were up. I thanked her again for that night but told her I wouldn't bring it up again. She looked relieved. \n\nI got to see her and Erica a couple of times over the next two weeks, and it appeared things had gone back to the way our relationship had been before the Fourth of July. I won't say I was happy about it but it wasn't completely unexpected, either. \n\nI resigned myself to the fact this was how things between Angie and I would be, friends, but that was all. That night was special, but she could have her choice of most men. Why would she pick me? I'd already chastised myself several times, reminding myself I knew I was the one who'd get hurt if we went too far. It didn't help. \n\nSeveral weeks passed, then something changed. I had a knock at my door. Opening it, I was surprised to see a visibly upset Angie. She'd obviously been crying, so I quickly ushered her in. \n\n\"Angie, what's wrong? Is Erica okay?\" \n\n\"What? No, no, she's fine,\" Angie replied quickly. \"Tommy Boy, I need to ask a favor.\" \n\n\"You know I'll try to help if I can.\" \n\nShe looked very uncomfortable, and it was obvious she was struggling with something. \n\n\"Tommy Boy, I know this is unfair of me to ask,\" she said softly, \"but would you hold me tonight?\" \n\n\"Angie...\" \n\n\"Just hold me as a friend,\" she interrupted, and looked up at me with tears in her eyes. \"Please?\" \n\nA beautiful woman crying and asking to be held? Of course I gave in. \n\nI took her over to the couch and held her. She buried her head into my chest and cried. I wrapped my arms around her and gently stroked her hair until she settled down. \n\n\"Now,\" I said gently, \"you want to tell me what this is all about?\" \n\nShe was silent for a minute before she turned her head and laid it on my chest again. \n\n\"Eric called,\" she whispered. \n\nI quietly let her gather her thoughts. She shuddered, then continued. \n\n\"He said he was moving back to Brownwood and wanted to be a part of Erica's life again. That son-of-a-bitch bails on us for three years and NOW he wants to be a part of her life? Bullshit!\" \n\nShe buried her face in my chest and wept. I stroked her hair for several minutes until she calmed down. \n\n\"You could always talk to a lawyer,\" I said gently. \n\n\"I can't do that,\" she mumbled shaking her head, \"I could never stop a parent from trying to be a part of their child's life unless they were an addict or physically dangerous. I wouldn't do that simply because the parent was a selfish asshole! \n\n\"No, Eric knows I won't keep him completely away from Erica. I'll bet he even planned on it. He knows I'll protect her, but I won't stop him from trying to be her father. I couldn't do that to Erica. I couldn't stand to face her when she's older and asks me why I kept her father away. \n\n\"Dammit!\" she cried. \"It's so unfair. Why did he have to come back now, now that things were changing?\" \n\n\"How are things changing?\" I asked, softly hoping against hope I was a part of that change. \n\nShe sat back and looked up into my eyes. \n\n\"I'm sorry, Angie, but I'm not sure what our relationship is exactly right now.\" \n\nShe sighed and nodded. \n\n\"I know, and I'm sorry I've been such a cold fish lately. That night... that night was more than I'd expected. I knew the stripping would be exciting and it was, as was the first time we had sex in the living room. The other times right after were fun and very fulfilling, as well. Truthfully, though, I expected it would be. \n\n\"It was the intimacy afterwards and that I would tell you those things that surprised me. Tommy Boy, other than Eric, Mrs. Harper is the only person I've ever spoken to about my past here in Brownwood. That night I felt so at peace, so safe, that I shared those things. Then when I woke you up...\" \n\nAngie surprised me when she actually blushed slightly. She stared into my eyes and I could see the hurricane of emotions swirling in them. \n\n\"That was something I hadn't done in a long time. Not since the first year with Jimmy. To be honest, Tommy Boy, it scared the hell out of me. I knew I was blurring the lines, but I didn't realize how badly. \n\n\"You said you didn't know what our relationship was now. I wish I could tell you, but I don't know either. I know I love you as a friend, but could we try being friends with benefits? I'm not sure you could handle it without wanting more. To be honest, I'm not sure I could handle it, either. That night changed things, but I don't know exactly how just yet. \n\n\"Then Eric calls and all those emotions are added to our current mess. I don't know all the feelings I have towards Eric now. I obviously loved him, since I married him, but he shit on Erica and me and now those feelings have changed. I'm scared, Tommy Boy. What if when I see him I find out that I still care for him? How do I deal with that, since he abandoned us once before? \n\n\"I'm sorry, Tommy Boy. I'm an emotional basket case. I'm trying to be strong and protect Erica and myself, but I'm failing. I need a place to think, a place where I feel protected. I know it's unfair to you, asking you to fill that role without knowing where you stand. I'm ashamed, but that's where I am right now.\" \n\nI looked at her and sighed softly. I opened my arms and she flew back into them. I held her as she softly cried. I swallowed my thoughts of how good she felt in my arms, how warm her breasts were, how soft her skin was. I fought back my desire to love this woman with everything I had. I fought to be... safe. \n\n**** \n\nIt was bound to happen sooner or later. Brownwood isn't that big, and I still went to MS Fit three or four times a week. It wasn't a surprise when I ran into Eric at the gym. What did surprise me was his appearance. Damn, he looked like a Greek god! \n\nIf I'd been insecure about being with Angie before, now I was doubly so. How could I've believed I could compete with guys like Daniel Pickering or this walking romance novel cover? If they weren't rich and powerful, they were damn male models! \n\nReality has a way of raining on our dreams, and I was experiencing a downpour. That's my excuse for acting like an ass. My other excuse was that Eric Myles just seemed to bring that particular trait out in me. \n\nHe was standing over by the free weights with an audience. There were several guys around him, with more than a few women looking longingly over at them, fantasizing. The pheromone level in the room was off the scale. I recognized a couple of guys, and immediately knew I should head in the other direction. I saw Rob Sutherland and Marcus Dixon standing there laughing at something Eric had said. I hadn't seen them at the gym before, but I'd heard they'd been regulars when Eric was there last. I guess his return must've sparked their interest in MS Fit again. \n\nI knew the very day Eric arrived back in Brownwood. Angie was over at my apartment that very evening and in my arms. Her ex-husband's return had really shaken her. Her usual hard-shelled demeanor had been replaced by a surprisingly scared young woman. \n\nOver the next few weeks, Eric had spent some time with Erica. Angie said it was obvious Eric had ulterior motives besides becoming a part of his daughter's life again. She said he'd been very contrite and apologetic for his actions. He asked her to forgive him every time he came over to be with Erica. \n\nOne evening while I was holding Angie, I asked her if she was considering going back to him. She thought for a moment before replying no, but she'd been surprised by the feelings she still had for him. After my encounter with Leah last Christmas, I could easily relate. \n\nI basically held her and reassured her everything would be okay. I was a friend, a port in the storm, a refuge where she could go and feel safe. In some ways, I was honored, but in others, it was sheer torture. I held a beautiful woman, but couldn't kiss or caress her without destroying her sanctuary. In short, it sucked. \n\nIt was that emotional whirlwind that was going on in my head when I heard the voice. \n\n\"Tommy Boy!\" \n\nShit! Brandon. \n\n\"Tommy Boy, come over here!\" \n\nI turned and saw the grinning face of my friend. We'd never been really close after the Angie episode, but we'd remained friends. His smile was genuine since he had no idea Sutherland and Dixon had probably played a part in the failure of my marriage. \n\nI walked over to them and noticed very different reactions on each of their faces. Rob had a smug, sarcastic grin, while Marcus coolly stared at me, making sure I wasn't a threat. Eric had a condescending smirk as he sized me up. I fought to control my thoughts as I sensed a probable confrontation. \n\n\"Hey, Tommy Boy,\" Brandon chattered. \"This is Eric Myles. He used to own MS Fit.\" \n\n\"Yeah,\" I said calmly, \"so I've heard.\" \n\n\"So you're the infamous Tommy Bear my daughter can't stop talking about.\" \n\n\"She's a special little girl,\" I replied. \n\n\"Yeah she is,\" he said grinning. \"She comes from good stock.\" \n\n\"Yeah, Angie is pretty special as well.\" \n\n\"Well, yes,\" he laughed, \"but I was talking about her daddy. Oh, the brood mare is important but it's the stud that makes a winner!\" \n\nHis macho response got a smattering of chuckles. I could tell he saw he'd struck a nerve with me when he grinned evilly. I felt that old controlled rage creeping up the back of my skull. \n\nI knew any altercation would not end well for me. Even if I won the battle, I'd lose the war. Any arrest and conviction would kill my employment at SNS. Besides the bad PR, they tended not to let felons around the security sensitive data of some of our customers. ",
        "Shit! I thought to myself. I'm headed for the edge of the abyss again but this time I've got little to gain since it would cause a bad situation for Angie to get worse. \n\n\"I am surprised though,\" he continued, \"I thought you'd be, I don't know, bigger, hairier, and more scary, not some big fluffy teddy-bear.\" \n\n\"What can I say, I'm not into scaring and breaking little girl's hearts. I'll say you're not what I expected, either. I expected someone more... slimy. Someone everyone could easily look at and know was a piece of shit who abandoned his wife and baby daughter to chase after some old rich piece of pussy.\" \n\nOkay, so maybe I needed to work on my tact. \n\n\"At least I didn't have to beg her to fuck me by promising to lose my fat ass. I heard about your arrangement, pretty damn pathetic!\" \n\n\"Well you must've heard wrong, the only reward I got for losing all the weight was to get to hold your ex-wife as we danced at the Christmas Ball, but I'll admit the kiss goodnight was worth it. \n\n\"Shit, what a loser,\" he sneered. \"You could've been banging that sweet ass of hers and watching those big titties sway back and forth if you'd played your cards better. Hell, all you'd had to do is put some money down and the bitch would've given you a lap dance. Behind those big tits and killer body is a cold-hearted whore who cheated on her first...\" \n\nFuck the abyss! \n\nI hit the arrogant prick right in the stomach. He dropped to his knees, gasping for air. I reached down and grabbed a handful of his black curly hair. With a hard yank, I had his head bent back and his face looking right up into mine. \n\n\"Listen up, motherfucker,\" I hissed. \"One more shitty comment about Angie, in her own place, and I'll truly fuck you up! Understand me, princess?\" \n\n\"Black belt...\" he wheezed. \"I'll... kick...\" \n\n\"Maybe, asshole,\" I sneered as I pulled harder on his hair, causing his eyes to water, \"but I'll guarantee you I'll fuck up your pretty face so bad you'll have to go find some half-blind old dried-up pussy in a nursing home to get fucked again.\" \n\nHe stared silently up at me with hatred in his watering eyes. There was an eerie second of silence, like the one that occurs right after a flash of lightning and the following thunder. \n\n\"Aw fuck it!\" I said, and drew back to hit Eric in the face. His eyes grew large as he saw it coming. \n\n\"Tommy Boy!\" Brandon yelled out. \"Be cool man!\" \n\nI turned and looked at him. The expression on my face made him take a step back. \n\n\"Holy shit, Tommy Boy!\" Brandon said, forcing a laugh. \"You got PMS or are you still trying to find a way into Angie's tights?\" \n\n\"Like that would ever happen,\" I breathed, then snorted a laugh as I let go of Eric. \n\n\"Damn dude,\" Brandon continued, trying to break the tension, \"you said you didn't do that for your ex-wife. Why Angie?\" \n\n\"My ex was a slut who fucked just about anybody. I never found out exactly who,\" I seethed, \"With any luck she gave them AIDS before we divorced. If I ever find out for sure, I'll make certain I show them my appreciation.\" \n\nI looked over at Rob and Marcus. Rob looked like he was about to run but Marcus grinned back at me. I doubted even being in the best shape of my life I could take him, but at the time, I would've tried. Neither one said anything. \n\n\"I'll be in Angie's office until she gets back or the cops arrive.\" \n\nDamn, I sure messed up my immediate future, I chided myself as I walked away. It was for a friend, but did I need to throw my job away? \n\nSitting in Angie's office, I'd plenty of time to think. I came to the realization that I hadn't done this for Angie or Erica. I'd done this for me. I couldn't have looked myself in the mirror if I hadn't done something. Granted, hitting him and then threatening him was a bit extreme... but. \n\nA little less than an hour later, I heard Angie open her office door. She walked quietly over to her desk and sat down. She stared at me for a moment then sighed. \n\n\"Seems I go out to run an errand and I miss all the excitement,\" she said, deadpanned. \"I was met at the door by several women who simply had to let me know what happened. \n\n\"I'm sorry, Angie. I lost it there for a moment. I don't want to cause you to lose your gym so I'll pack up my stuff and leave. That way, if Eric tries to make trouble for you, you can state legally you kicked me out. That should help cover you.\"  \n\n\"Okay,\" she said softly, staring at me oddly as if studying me for some reason. \"It seems unnecessary but probably wise, just in case. Tommy Boy, I can't see Eric pressing any charges.\" \n\nShe saw my confusion. \n\n\"First off,\" she continued, \"his pride won't let him. It would be a public record that someone kicked his ass. At least this way he can say you sucker punched him and try to save face. Besides, he's already trying to get me to sell the gym back to him. It would look bad for his macho image if this got legally messy. \n\n\"Yes, he's offered me a very good price for the gym. Seems Sugar Bitch either gave him a lot of money to leave, or he's pawned all the gifts she'd given him. Either way, it looks like he has enough to buy me out and let me start again. He believes his bad boy gigolo image will draw in a lot of women, and a lot of pussyhounds will follow. He may be right; I don't know.\" \n\n\"Are you thinking about selling MS Fit?\" \n\n\"Yes, very seriously. I think I'm going to take the advice of a very good friend and pursue my original dream of being a physical therapist.\" \n\n\"Well you need to do what's best for you and Goldilocks,\" I said, fighting back the disappointment of realizing Angie and Erica might soon be leaving Brownwood. \n\n\"Well, it wouldn't happen until this summer,\" she said softly. \n\n\"And then what? Will you and Erica start over somewhere else?\" \n\n\"No, with the money from selling the gym I can go to school full-time for a while. It looks as if I could pass my state Physical Therapy Assistant certification by the end of July, and earn my bachelor's degree at St. Catherine's by next spring. Bree is certain I can get on at Sacred Heart as a PTA and work there until I complete my DPT at St. Catherine's. \n\n\"That means Erica and I would stay in Brownwood for at least four more years,\" she said, smiling warmly, noticing my obvious relief. \n\n\"I'm glad. I'd miss you both more than I care to imagine. Now, I better go clean out my locker.\" \n\nI stood up quickly and left silently. It only took me a couple minutes to clean out my locker. As I came out of the men's locker room, I noticed Angie standing there with a good dozen or more people standing behind her. I guess they were expecting a show of her kicking me out or something. What they got was an 'or something.' \n\nI froze as I stood in front of her. She had her hands on her hips and was peering at me. She'd an odd look on her face, a combination fear and excitement. \n\n\"Tommy Boy, you need to go put those back in your locker. I know I can act like a bitch sometimes, but you were defending me and I'm not going to kick you out for that. Besides, I told you I was taking a good friend's advice.\" \n\nShe stepped forward and wrapped her arms around my neck. The kiss she laid on me was reminiscent of our night together. Her warm lips crushed into mine and our tongues sought to entwine with each other. I felt the warmth of her body as it tried to meld with mine, and I dropped my duffel bag and wrapped my arms tightly around her. \n\nIt wasn't until we heard a few whistles and catcalls that we broke our kiss. As I stared down into her baby blue eyes, I knew I could forever lose myself in them. \n\n\"Mrs. Harper told me I needed to pull my head out of my ass and admit what I really felt,\" she said, staring me in the face. \"Tommy Boy, I love you, and a hell of a lot more than just as a friend!\" \n\n**** \n\nAngie's kiss and declaration of her feelings for me started the rumor mill working overtime. I received countless congratulations from guys at the gym I'd never met. \n\nHow was I supposed to respond to that? I questioned myself frequently. \"Thanks?\" Like I'd somehow done something to earn her love? \n\nI struggled to fully accept my good fortune. It helped when people around the gym began to good-naturedly start referring to us as Beauty and the Beast. When Angie asked me if I was okay with it, we came to a quick understanding. \n\n\"Baby, are you sure it doesn't bother you?\" \n\nI smiled and took her in my arms. \n\n\"Angie,\" I said calmly, \"I've never thought of myself as a pretty boy, but I am surprised so many people have seen you when you've had PMS!\" \n\n\"Asshole,\" she laughed. \n\n\"Tea...\" \n\nShe elbowed me in the ribs, then stared into my eyes and shook her head slowly. \n\n\"You don't get to call me that anymore,\" she whispered, while peering into my soul, \"At least not where you're concerned.\" \n\nI pulled her close and kissed her passionately until I felt her softly sigh. \n\n\"Okay, Angel,\" I whispered, \"but I happen to know my Beauty loves to tease her man. I also know he loves it, too.\" \n\n\"Well,\" she said grinning evilly. \"Erica may need to go over to Mrs. Harper's tonight. You think the Beast might be able to come out and play?\" \n\n\"Oh, I definitely think it can be arranged!\" \n\nI found out quite a bit about my Beauty over the next few months. The most surprising was that even with all her teasing and blatant sexual innuendos, Angie was very conservative in the bedroom. Missionary, cowgirl and doggie were about it, along with oral. Cowgirl, with her being in control, was her favorite... go figure. \n\nI suggested and tried to coax her into anal one time. She wasn't shy about letting me know her feelings. \n\n\"Tommy, my love,\" she cooed softly in my ear. \"That finger tries to go somewhere it shouldn't again and I'll accidentally bite your left nut off. We clear baby?\" \n\nWe were. As I said, I can be taught. \n\nAnd they lived happily ever after... the end. \n\nYeah, right. \n\nYou would think after the ogre got the princess the movie would end, but life isn't like that, now is it? Unfortunately, there's the reality even the best fantasy can't hide. There's life after the Happily Ever After. \n\nThe fact is, being in love with a beautiful woman for an average guy is both ego boosting and ego shaking at the same time. There's no way to describe the feeling of having a beautiful woman on your arm, giving you daily public displays of affection. It'll make even the most timid mouse of a man into a roaring lion. \n\nOn the flip side is the ever present knowledge she could upgrade anytime she wanted. That knowledge is like a poison, constantly eating away at a man's ego. Hopefully, his beautiful lover never gives him reason to be jealous, but what if she's a bit of an exhibitionist? Yeah, my insecurities were working overtime! \n\nIt wasn't long before it became evident we had trust issues. Angie and I had to fight to get through those initial obstacles. There were some very ugly conversations, which tended to spring up at the worst times. \n\nOnce, while we were out on a date I noticed Angie was drawing even more attention than normal. She was wearing a form-fitting blouse that she liked to wear with a sheer balconette bra that basically displayed her breasts for everyone to see. If that wasn't enough, she'd paired it with a short skirt, which showed off her incredible legs. It was an outfit she liked to wear that tended to stop traffic, but that night, the sharks were swimming even closer. When I mentioned it to her, she grinned. \n\n\"Well, I do like how this outfit draws attention,\" she said sweetly. \"I suspect it's the fact I'm not wearing panties that might've something to do with it, as well.\" \n\nI almost spit out my drink as she batted her eyes innocently at me. I'd like to say it was the beginning of an incredible, sexy night, but it didn't turn out that way. Angie never overtly flashed anyone, but she did make sure her skirt rode up her thighs every chance she got. While she was having a wonderful time, I was fighting off my demons. Usually, I was fine with her little ventures into exhibition, but that particular night I was especially insecure. \n\nSure, I was incredibly turned on, but so we're the sharks around us. Most of her admirers couldn't take their eyes off her nipples, which were trying to poke through the thin fabric of her bra and blouse. Those that could, kept trying to position themselves to get another flash of her shaved pussy. Slowly, my irritation became more than I could hide. \n\nAngie noticed it immediately, and at first found it amusing, but soon, it turned to annoyance and our evening deteriorated into an artic wasteland. Each time some guy came too close, it was like another needle under my skin. We ended up cutting the night short. Angie waited a whole block before she jumped all over me. \n\n\"Dammit, Tommy Boy, what the hell is wrong with you?\" \n\n\"Nothing,\" I snapped back, both of us knowing it wasn't true. \n\n\"Bullshit. Now tell me why you moping around like some little boy who's had his toy taken away from him.\" \n\n\"I don't know,\" I growled, \"Seems like you were offering what I thought was mine to almost everyone in there.\" \n\nI watched her anger begin to build as she sat in stunned silence. \n\n\"Fuck you!\" she finally yelled, with tears starting to well up in her eyes. \n\nShe sat back and stared out the front windshield, making sure not to look at me. I shot quick glimpses over at her as I drove. I could see a tear starting to run down her cheek and my heart and mind raged as they battled each other. \n\n\"You asshole,\" she said, her voice choked with emotion. \"I've never given you a reason to think I'd cheat on you!\" \n\n\"No,\" I said flatly, \"but dammit, Angie, we've just started dating exclusively. Some days it's hard enough to believe you're with me. I know I don't deserve you, but dammit, I don't need to be reminded you can have any guy you want.\" \n\n\"Tommy Boy, you need to grow up and get over this insecurity bullshit!\" she barked. \"I'm with you because I want to be with you. You need to man up and stop acting like a child!\" \n\nI turned and glared at her. I felt the rage start to overwhelm me. \n\n\"So let me get this right,\" I seethed. \"You have a bad day, you feel down, or you're unsure or even scared; you run to me and I'm supposed to provide a safe place and give you comfort. Now if I have a bad day, or I'm insecure or confused, I get \"grow up,\" or \"be a man and get over it\"? Am I fucking hearing this right? \n\n\"So those times you were over at my apartment angry, hurt and afraid because your asshole ex-husband was back in town, I should've told you to grow the hell up and act like an adult? Instead of holding you, I should've simply told you to get a backbone and just do it? \n\n\"Is this what I'm expected to live with? My penance for dating a hot girl? I sure as hell better be there for her if she falls, but tough shit, I'm on my own if I'm the one who fails? Is that what I have to look forward to if we continue to stay together? How much worse will it be if we actually stay together long-term? \n\n\"Shit if that's the case, I need some time away from all this. I need to reevaluate if this is worth it or not.\" \n\nAngie stared at me silently. I could read anger, then shock, then something else in her face. We drove the rest of the way to her house in silence. When we got there, I pulled into the driveway, but made no effort to get out and get her door. As she slowly got out, she turned and looked at me. \n\n\"Tommy Boy,\" she started softly. \n\n\"Please, Angie,\" I interrupted. \"I need some time to think. I'll call you in a few days.\" \n\nI drove off leaving her with her jaw hanging. \n\nI wasn't back in my apartment for more than ten minutes before there was a knock at my door. I was tempted not to answer it, but knew it was immature on my part. \n\nWhen I opened the door, I was shocked to see a face which exuded such incredible pain that I instinctively reached out for her. She embraced me as if she was clinging to a life preserver. \n\n\"Don't, Tommy Boy,\" she whispered. \"Don't shut me out, not for days. Tell me what your heart needs to say. I may not want to hear it but I'm a big girl; I'll deal with it. Just... \n\n\"Please, Baby,\" she said softly, as tears started to slip down her cheeks. \"Please don't give up on us. Don't give up on me! I'm so sorry, Tommy Boy.\" \n\n\"I am, too,\" I whispered back to her. \n\nShe leaned back and took my face in both of her hands. Peering into my face, she spoke softly. \n\n\"Tommy Boy? You were right. I was leaning so heavily on your strength and your security I failed to be safe for you when you needed it. What's worse is when you needed reassured, I acted like a cold-hearted bitch. I'm sorry; you didn't deserve that. \n\n\"Please understand; this isn't an excuse, but it is how I've been treating the world since Eric left us. It's my defense and my way of protecting Erica and me. Please, Baby, please understand this is new to me. I'm not good at this.\" \n\n\"What, apologizing?\" I said softly. \n\nShe snorted and stared back into my eyes. I could feel the overwhelming emotions pouring out of her as they wrapped caringly around me. \n\n\"Well, that, too,\" she smirked, \"but I meant us. It's been over three years since I tried to have a real relationship with a man. It's been even longer since I've had a good relationship with one. \n\n\"Tommy Boy, there are a few things you need to come grips with if we're going to have any type of a relationship. The first is I'm not Leah, I'll NEVER cheat on you. I did that to someone I cared about a long time ago and will NEVER do it again. We'll end whatever relationship we have before I'd ever do that again. I know you still hurt; so do I, but if you give me, us, a chance, you'll see that you can trust me. \n\n\"Secondly, you need to realize I'm going let you down sometimes. It won't be intentional, but I'm going to screw up. I need you to love me enough to forgive me when I do. If you can't, then I'm afraid we're doomed as a couple. \n\n\"I promise you I'll love you enough to forgive you when fail me, and I know you will. It might take me awhile to work through my anger and disappointment, but I'll get there. I'll be able to do it because I know you wouldn't intentionally hurt me. \n\n\"Last, I know this seems harsh, but you need to pull your head out of your ass and accept facts. Yes, I can easily go out and find some guy to sleep with. It also wouldn't take much to find some guy who'll swear he'll love me forever. Tommy, I choose to be with you. It's your arms I want to hold me. It's your voice I want to hear during the good times and the bad. \n\n\"I think we could have something real here. You seem to think you're not worthy of me, but that's just bullshit! You're a good-looking guy who's even more handsome inside! You've no idea how lucky I know I am to have you. \n\n\"Tommy, I found in you something I'd thought I'd lost forever: my dreams. Baby, if we keep going the way we are, we could have something I'd dreamed of as a little girl. I know there are no guarantees, but just the possibility that it could actually happen is what I felt I'd lost. \n\n\"I know sometimes my teasing bothers you. The longer we're together, the more you'll learn to trust me. Until then, I'll try to stop...\" \n\n\"No,\" I interrupted. \"That's unfair to you, and besides, it doesn't always bother me. It's just some days I get so down. I realize that, and I'm trying not to be so insecure.\" \n\nShe smiled up at me and then kissed me. \n\n\"We'll have to do this together, Baby. I need to be more observant of where your head is at when I tease, and you need to work on becoming less jealous. We'll both need to work on making you less insecure.\" \n\nI couldn't help but grin. Angie groaned and rolled her eyes. \n\n\"Sex doesn't fix everything.\" She laughed as she molded herself into me. ",
        "\"Maybe, Angel\" I whispered in her ear, \"but it doesn't hurt either.\" \n\nIt didn't. \n\nWe worked together to begin overcoming my insecurities to the point where I'd be okay with Angie's exhibitionism. There were a lot of boundaries; yeah, many were the same boundaries Leah had walked over years earlier without a care. The turning point for me was when I finally decided to trust Angie the best I could. I knew it wouldn't be easy, but Angie wasn't Leah, she'd already showed me she'd fight for this relationship, so I had to try. \n\nFor Angie's part, there were more than a few trust issues she had to deal with, as well. The first were those that came from not one, but two broken marriages. Then there was the trust issues almost every rich or beautiful person has; is that special someone in love with them or their looks or money? It's the nature of the beast, all those gold-diggers trying to marry into a comfortable life and those horndogs simply trying to get some beautiful woman into bed... it made sense. It didn't make it any easier to work through it, though. \n\nIt was the months of fighting side-by-side that wove us even tighter as a couple. The three of us were quickly becoming inseparable. \n\nAs the end of spring neared, I could tell Angie was getting nervous about selling the gym. She was also trying to approach me with an idea. I had to laugh when she finally mentioned it. \n\n\"Baby?\" she cooed, knowing I'd give anything when she did that. \n\n\"What would you think if I got rid of these?\" she said, gently lifting her breasts. \n\n\"Angel, I'll love you whatever the size of your breasts. I don't care if they're the size of watermelons or peaches. As long as they're attached to you, I'll love them.\" \n\n\"You know if I don't do something about them, they'll be hanging around my knees when we're eighty,\" she laughed. \"I'll probably be an old wrinkled prune.\" \n\n\"Maybe,\" I snorted, \"but you'll still be hot enough there'll still be a line of sixty year-old guys trying to get into your Depends!\" \n\nShe barked out a laugh, threw her arms around me and gave me a smoldering kiss. Breaking it off, she smiled warmly up into my eyes. \n\n\"If that's true then they'll be waiting forever because it's yours, Tommy Boy, only yours.\" \n\nAs I said, we were successfully working on alleviating each other's fears and insecurities. The fact we were falling deeper for each other was a serious bonus. \n\nA month later, she sold the gym. It was a bittersweet day. I knew I probably wouldn't be back as long as Eric owned the gym, so it really was goodbye for some of our friends there. Brandon, of course, had some smartass comments, but I was going miss seeing him anyway. \n\nTara had graduated, but was hanging around Brownwood. It seemed her relationship with Jeremy was serious enough that they were starting to talk about future plans. I really was thrilled for her. \n\nWhen Angie sold MS Fit, she took a lower offer from Eric. It was with the unofficial agreement he sign away any parental rights to Erica. Angie said he signed without any hesitation. I wasn't sure what I thought of all that, but then Angie told me she wanted him completely out of their lives. She hinted someday Erica would have a new daddy and that daddy would be Erica's in every way. \n\nI was still dealing with those implications when Angie had her breast reduction surgery, three weeks after the sale. She said she didn't want or need them anymore. She also said they only reminded her of a past that was behind her. \n\nTwo weeks after her surgery, she finally allowed me to see the end result. To say I was speechless would've been an understatement. They were beautiful. Angie told me I shouldn't have been surprised; she wasn't going to go back to an A-cup. She said they were C-cups, but I wouldn't have known. All I knew was they were perfect. Her once tiny areolas now looked like they belonged on the breasts they adorned. \n\nWhat really surprised me was how much her big boobs had altered her appearance in the past. Even though I'd looked past them, they'd influenced and hid parts of Angie's body. Her new breasts looked extremely natural, but didn't distract from the rest of Angie's body. I didn't think it was possible, but she looked even more beautiful! \n\nIt took a while to get me over my newly flared up insecurities which came with Angie's new look. It took lots of reassurances from Angie and, of course, lots of breaking the new TaTas in, as well. Angie accused me of using my fears as an excuse to play with her new boobs and the rest of her body. I tried to feign a wounded look, but we both knew I was guilty as charged. \n\nEventually, our relationship got to a point where I went back to Dallas with her and Erica at the end of summer. We ended up at a family cookout, in August. When I met the family, they weren't the monsters I'd expected. Most were a down to earth people who loved her, but hadn't agreed with her decisions. Her father had liked Jimmy, but wasn't in favor of the marriage. He certainly wasn't in favor of her stripping, and absolutely hated Eric. He hadn't been shy about his feelings. Although he still loved his daughter, his disappointment was still very evident. \n\nThere were some relatives who looked down their noses at Angie. Some did because of their religious beliefs, and a few because they were still really close to Jimmy. Those individuals tended to have lots of snide little comments concerning Angie's past. \n\nI did well at the beginning, making sure to stay close to Angie, but I soon found myself separated from her, talking to a small group of her relatives. Angie's mother was quietly listening as one of Angie's aunts, Rebecca, was leading the inquisition. She was pumping me about my past and family. It didn't bother me, since Aunt Rebecca seemed to be on Angie's side. When Aunt Rebecca mentioned I might hear some unflattering things about Angie's past, I guess my response wasn't subtle. Okay, it was probably more like a bull in a china shop. \n\n\"Well,\" I said loudly, \"I can't believe anyone would knowingly talk shit about a woman in front of the man who loves her. Nobody's that damn stupid!\" \n\nAn eerie silence fell over all those in earshot. Angie's mother's eyes grew huge, and Aunt Rebecca began laughing. It didn't take long before my reply had spread throughout the entire party. I wasn't sure if I'd made a mistake by making such an aggressive statement, when I felt someone come sit very closely beside me. I looked over and saw Angie as she peered out into the crowd. \n\n\"So you love me, huh?\" she said, fighting a smile. \n\n\"Well, duh,\" I snorted. \"Hell, Angel, I'd yell it out every time we go out in public if I knew it wouldn't embarrass you.\" \n\nShe looked at me and grinned. \n\n\"Yeah, that could get embarrassing really quick,\" she said grinning. \"Of course, now I've got people asking me when we're getting married. Not IF we're getting married but WHEN we're getting married.\" \n\n\"If I knew your answer,\" I said softly. \"I was going to ask during the halftime of a Crusader football game this fall.\" \n\nHer head snapped around and she stared at me with her hand over her mouth. I looked sheepishly over at her and saw the tears in her eyes. \n\n\"Really?\" she whispered. \n\n\"Yeah, but I'd need to be really sure about your answer before asking so publicly. Getting turned down in front of tens of thousands of people... I'm not sure my ego could take that.\" \n\nShe silently stared at me. I couldn't tell if she was terrified or thrilled with my declaration. I turned back and looked absently out at the crowd of Angie's relatives. \n\n\"No guts huh?\" I heard her respond softly. \n\n\"Well, I could ask you here in front of all your family and friends but I'm afraid your answer might cause more tension between you and your family. I wouldn't do that to you.\" \n\n\"What? You mean if I turned you down?\" \n\n\"Yeah, but it could go bad if you accepted as well. I don't think after my little public announcement I'm all that well thought of by some your family.\" \n\n\"Like I give a shit,\" she spat softly. \n\nI turned and looked at her. I saw her mind running a million miles a minute, trying to get a handle on this conversation. \n\n\"You do, Angel,\" I said gently. \"You do.\" \n\nI turned back to the party and slowly reached over and pulled her closer to my side. I felt her soft hair as she put her head on my shoulder. We sat with my arm around her waist and her leaning into me for several silent minutes. Finally, she broke the silence. \n\n\"I don't suppose you even have a ring yet.\" \n\n\"No,\" I chuckled, \"I was intimidated by that giant rock you carry around with you in your purse. What can I say... size envy!\" \n\nShe laughed and buried her face into my chest. I heard her sigh as she began to snuggle into me. \n\n\"So,\" I said trying to keep my voice from shaking, \"You answer would be yes?\" \n\nShe sat back and looked up at me. Then she smiled warmly. \n\n\"Well, you'll never know unless you ask me.\" \n\nShe turned and pressed herself close so she could reach my ear. I felt her warm breath and then her hot lips as they kissed me gently. Then I felt the tip of her tongue as she slowly drew it around my earlobe. When she had my undivided attention, she whispered into my ear. \n\n\"Chickenshit.\" \n\nWe broke out laughing and I pulled her into my arms. Our lips fought to devour each other for a brief moment before I leaned back. \n\n\"I need to do something,\" I said grinning. \n\n\"You're damn right you do!\" she hissed. \"I can think of more than a few things you need to do... to me... and soon!\" \n\nI got up and quickly left a laughing blonde still sitting there. I made my way through the crowd until I spotted my target. He had a puzzled look on his face when I came up to him. \n\n\"Sir?\" I said and saw the recognition dawning in his eyes. \"I'd like to ask your permission to marry your daughter.\" \n\n\"You know you don't need it. It didn't matter the last two times.\" \n\n\"Yes sir, I do understand, but you're wrong; it does matter. It matters to her, and I think it matters to you, too.\" \n\n\"So if I say I don't approve you won't ask her?\" \n\n\"No, she's an adult and no longer living under your roof, so I'll ask her anyway, but your approval would mean a great deal to her, and since it's important to her, it's important to me.\" \n\nHe stared at me as if he was sizing me up. I hoped he'd see this as a way back to a better relationship with his daughter, but I didn't know him well enough be certain of his response. \n\n\"Well you got her to lose those damn monstrosities on her chest and go back to school...\" \n\n\"Actually, sir,\" I said grinning, \"those were her choices. If she hadn't already wanted to do those things, I doubt I could've convinced her.\" \n\n\"Yeah,\" he said, smiling, \"she can be a bit headstrong, but I gotta figure you'd something to do with it.\" \n\n\"Well, maybe a little,\" I conceded. \n\n\"Well, if it means anything; you've got my approval.\" \n\n\"Thank you, sir.\" \n\n\"Just one thing though. You take care of my baby girl. If you hurt her like that last asshole did, I'll hunt you down.\" \n\n\"You don't have to worry, sir; I could never do that to her or Erica. I'll protect them with my life.\" \n\n\"Hell, son,\" he snorted, \"I don't doubt that for a moment.\" \n\nAs I walked back over to Angie, I noticed a small crowd had gathered around her. Her mother and Aunt Rebecca stood beside her as she held Erica. Angie's mother had tears in her eyes while her aunt was softly laughing at the obviously surprised and somewhat terrified look on Angie's face. Stepping in front of her, I took Erica from her and put her on the ground beside me. Kneeling down, I took Erica's hand in my left and with my right, I gently took Angie's hand. \n\n\"Angie,\" I said with more confidence than I actually felt, \"I've loved you from the first time you told me to get off my fat butt and give you five more reps.\" \n\n\"Mommy!\" Erica gasped, \"Tommy Bear said butt!\" \n\nI heard a smattering of laughs behind me and I realized the crowd was growing. Undaunted, I continued. \n\n\"It was easy to fall in love with you since you're so beautiful, but the more I got to know you the more I realized that you're so much more than just your looks. You are the most incredible woman I've ever met and are more stunning inside than outside. I've asked and received your father's permission to ask for your hand in marriage.\" \n\nAngie, her mother and her aunt all looked over at Angie's father in surprise. \n\n\"Well, I'll be damned,\" Aunt Rebecca whispered. \n\nI glanced back at him briefly and saw a satisfied smirk on his face. Looking back at Angie, I cleared my throat. \n\n\"Angie, I would be honored if you would consent to be my wife and allow me to become Erica's daddy.\" \n\n\"Tommy Bear,\" chirped the blonde munchkin beside me. \"I already got a Daddy!\" \n\n\"You're right sweetheart,\" I said looking into her innocent blue eyes. \"But maybe I could be Daddy 2?\" \n\n\"You're silly!\" She giggled, then thought. \"You can be Papa Bear!\" \n\n\"Well Momma Bear?\" I said turning and looking back up at Angie. \"You said I'd have to ask to find out your answer... I'm asking. Will you marry me?\" \n\nAngie dropped to her knees in front of me and gave me a huge kiss. I could hear some of the cheers and applause as we came up for air. \n\n\"So was that a yes?\" I said grinning. \n\n\"What do you think?\" she laughed. \n\n\"I'm not taking a chance. I need to hear it.\" \n\n\"Yes, Tom Swanson. Yes, I'll marry you!\" \n\nThe rest of our time in Dallas was a blur. The only thing I remember was the constant looks of satisfaction Angie kept giving me. As we left for the airport, Angie's father gave her and Erica a huge hug. I could see the tears running down Angie's face as she hugged him back. \n\n\"Thank you,\" said a soft voice beside me. \n\nI turned and saw Angie's mom standing there with Aunt Rebecca. Her mother was a sweet but very soft spoken woman. Aunt Rebecca obviously wasn't. \n\n\"They needed that badly,\" Angie's mother continued. \"They can both be so damn bullheaded sometimes \" \n\n\"Damn, sis!\" Angie's aunt laughed, \"Such language!\" \n\nBoth women chuckled then kissed me on the cheek. Both whispered their welcome to the family as they hugged me goodbye. \n\nWhen we got back to Brownwood, I replaced Angie's fake rock on her finger with real one. It was only a carat, but was pretty damn gaudy and very visible. Angie adored it. She told me it was big enough to keep her happy and satisfied. It was also large enough to keep the wolves at bay. Then she told me the ring was damn impressive, as well! \n\nWe got married in December in small private ceremony in the St. Catherine's chapel. Since we'd both been through it before, it was primarily just family and a few friends. What we saved on the wedding we spent on a two-week honeymoon in Hawaii. \n\nI was surprised to find out Angie had been right; my jealousy had greatly reduced with the knowledge that she chosen me as her husband. That realization, and having her constantly remind me others could look but only I would ever be allowed to touch, slowly made me secure enough for her to play freely with that facet of her personality. \n\nI'd suspected she'd caused several heart attacks with some of the revealing outfits she'd worn while we were there, but when she came out on our last day at the beach wearing what could loosely be called a string bikini, I about lost it. Her bikini consisted of two tiny Band-Aids and some dental floss. \n\nAs we walked on the beach, we could actually here audible groans from most of the male sunbathers and several of the female ones. Try as I might, I'm sure that even with a towel wrapped around my waist, my erection was noticeable. As the afternoon wore on, Angie made sure it was still hard by reminding me how turned on she was and how she was going to rock my world when the sun went down. \n\nShe didn't lie, since I'll remember that evening for the rest of my life. \n\nHawaiian sunsets are legendary for their beauty, but they were only a backdrop for my Beauty. Lying in the sand behind a secluded dune on a semi-deserted private beach and feeling the warm tropical wind gently blow across you is incredible. Looking up into the face of an angelic blonde as she rides you with a determined passion with the sunset behind her is a glimpse into heaven. Watching the woman you love as her face contorts as she's having her orgasm and then listening to her giggles and sobs as she buries her face into your chest in complete contentment... that's heaven. \n\n**** \n\nEpilogue \n\nDecember 2016 - Brownwood \n\nThat reflection of Angie, Erica and myself two and a half years ago during the Fourth of July ended up being prophetic. This last year has seen us meld into a normal suburban family. I got promoted again, this time to Senior Network Administrator. That basically meant handling the major accounts and delegating most nights and weekends to others. \n\nIt works out better since Angie got her certification and is now a physical therapist assistant at Sacred Heart. She graduated and entered St. Catherine's DPT program right on schedule. \n\nWith our newfound income, we've recently bought a two-story, five bedroom, and three bathroom home. It's up in the Twin Oaks area, about five blocks away from Angie's first house. It's not the Country Club, but it is damn nice! We turned one of the bedrooms into our own private little gym. I'm proud to report we christened every piece if workout equipment in there... twice. \n\nI still see Leah and Susie around Brownwood on occasion. Last I heard, Leah was still dating Theo. It's supposedly an on again off again type of thing. I also heard she decided to lose some weight and joined MS Fit. I once mistakenly wondered if Eric ever hit on her or if they ever got together. I'm still trying to purge that mental image! \n\nSusie married Bryce Hawthorne and became the trophy hot wife I guess she wanted to be. Angie heard she brought a few STDs home to him. I can't say I'm sorry, since it couldn't have happened to a nicer slut! \n\nWhatever actually happened though, didn't seem to change their lifestyles. There are still rumors he pimps her out to his close friends and business associates. Maybe that's the life Susie always wanted, or maybe not. I won't say the thought of Susie being trapped in her own private little hell doesn't make me smile, but I don't lose sleep thinking about her or Leah. Hell, to each their own and I've got my hands full with two beautiful blondes! \n\nRight now, they're waiting on me to take them to the Christmas Ball. Both my wife and daughter look incredible in their sapphire dresses. Yes, she's my daughter. Damn right, I adopted her, in a heartbeat! \n\nHopefully, there won't be too many guys swarming our table this year. Erica's a beauty, but only six and Angie has her rock, her child, her husband and a noticeable baby bump. Erica has already named her future brother or sister, Baby Bear, to complete the fairytale. \n\nTonight looks like it's going to be somewhat uncomfortable. I thought Angie looked sexy as hell with a baby bump and was having a hard time keeping my hands off her while she was finishing up with her make-up. When I asked her if she was going to give me her thong sometime during the ball tonight, she shook her head. She looked up at me and smiled at my disappointment. \n\n\"Who said I'm wearing panties tonight?\" she whispered with an excited flash in her eyes. \n\nLike I said, tonight is going to be uncomfortable. It's going to be a pain trying to dance in this tux with a hard on all night but... I'll figure it out. \n\nSo will it be pretty vanilla in our bedroom tonight? None of your damn business! Of course, how can making love to the woman of your dreams ever be considered vanilla? \n\n**** \n\nOkay giving credit to where credit's due... \n\nI Get Off - Written by Howard Benson, Dana Calitri, Lzzy Hale, Nina Ossoff, and Kathy Sommer. Performed by Halestorm. ",
        "Again my deepest thanks to blackrandl1958, LadyVer, outofshadows, and Mostera1. Your help and input is so very much appreciated."
    ],
    "authorname": "DFWBeast",
    "tags": [
        "brownwood collection",
        "cheating wife",
        "adultery",
        "betrayal",
        "divorce",
        "strip tease",
        "exhibitionism",
        "jealousy",
        "boundaries"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/brownwood-tommy-boy-ch-03"
}
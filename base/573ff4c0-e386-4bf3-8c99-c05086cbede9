{
    "title": "Slow Dancing",
    "pages": [
        "One of my earliest memories is of him. \n\nI must have been three or four years old at most. I've never been able to explain why I remember this, but I do. I'd fallen into the swimming pool during a slip of our mother's attention, and he dived in to save me. I just need to close my eyes and I can see him, hair billowing around his head, arms reaching out to scoop me up. \n\nOf course I remember nothing after this, but it's enough.\n\nI wish I could say that was the only time he's needed to save me, but I'd be lying. I've lost count of the number of times he's been there for me.\n\nAt least time it will just be my pride, not my life. This is what I think to myself, as I pick up the phone to call him.\n\nDavid is only three years older than I am. Technically, three years and ten months, but when I was younger I always threw away those ten months and called it three years only. It made me feel closer to him, and it really amused Mum and Dad when I'd proclaim (each birthday) that now I was only two years younger than my big brother and they needed to start treating me like they treated him.\n\nThankfully, they didn't, because let's face it, I'm an accident waiting to happen. David, however, seems to traipse through life unaffected by the slings and barbs flung his way. It used to incense me how he could turn bad to good; until I realised that's just who he is - people love him. He's everybody's friend. And to be honest, I don't think he's ever had an unjustified unpleasant thought about anyone, ever. \n\nMore importantly, he's my rock, and he'd never say no to me. This is why he's the first number on my speed dial, and the first person I tell absolutely anything.\n\nI dial, and listen to the ringing. He picks up, and I feel slightly guilty when I hear the sleep in his voice.\n\n\"Sister dear, it's one am. I hope this is important.\"\n\nI laugh. \"I love you too, big brother. And yes, it's important.\"\n\n\"Everything ok?\" he asks. It's one of the reasons I love him so much; he's never too busy to have time to listen to me.\n\n\"Bit of a crisis brewing here,\" I answer. \"It's a friend's wedding this coming weekend... and my date has ditched me in favour of a ski trip to Cortina.\"\n\n\"The cad. I shall challenge him to a gentlemanly bout of fisticuffs.\" he says. \n\nI laugh again. David loves to ham it up for me.\n\n\"I was hoping my awesome big brother would be able to step in and rescue me from the walk of shame,\" I wheedle down the phone. \n\n\"But of course, Em,\" he responds. \"I'd be a terrible brother if I wasn't prepared to jump on a grenade for your honour.\"\n\n\"It's hardly jumping on a grenade!\" I protest. \"It's a classy affair out in the countryside - apparently a proper manor house and everything, and we get to stay over because the bride didn't want anyone to have to drive home after the reception.\"\n\n\"It sounds like a pretty large event,\" he says. \"Will anyone I know be there?\"\n\n\"Am I not enough?\" I tease.\n\n\"Well, if you sneak off with some young man I guess I'll just have to flirt with the bride's mother or something,\" he chuckles.\n\n\"As if,\" I return. \"So you sure you're ok with this, David? I don't want to twist your arm if you're not keen.\"\n\n\"Em, I wouldn't say yes if I didn't want to, so shush. Send me the details and dress code. When is it?\"\n\n\"Ceremony's at noon on Saturday, then it's bubbly and chit-chat till the reception starts in the early evening. Pretty much an all day event.\"\n\n\"Ok, I'll swing through to your place on Saturday morning first thing and we can get ready. I'll bring the Jag; we can make an entrance.\"\n\n\"Have I told you recently how much I love you?\" I say, hoping that he can hear the smile in my voice.\n\n\"Not for at least a week,\" he returns, laughing. \"Now if it's ok with you, Emily, I've got an early morning. I'll see you Saturday, ok?\"\n\n\"Mwa, mwa\" I kiss down the phone, then hang up. Buoyed up by his ready acceptance, I catch myself singing as I tromp around my flat. I feel a bit silly, but the prospect of attending this wedding with my former boyfriend had been worrying me and I'm secretly relieved that he's out of the picture and I will have David as my escort instead. Especially given that we're sleeping there; I hadn't had the energy to tell the bride about the issues between Jason and I. \n\nI have the brief, enjoyable fantasy of Jason getting stuck in a snowdrift and being unable to ever get out again. Then I shake my head angrily, refusing to let him intrude on the good news I just got.\n\n---\n\nOne day, when I was fourteen, I was walking home, when a group of boys from school ambushed me and dragged me into an alley. I got away lightly, they just stripped me and laughed at my small breasts and faded underwear, and kicked my books and clothes into the mud. It could have been much worse. It took me a while to calm down once they had left, and longer still to gather my things. \n\nI tried to sneak into the house, but David heard me and, bit by bit, winkled the story out of me. He held me while I sobbed, cleaned me up, got my clothes into the washer, got me into bed, and ran interference for me with Mum and Dad, telling them I'd had a fight with a friend and was too wound up to come down to supper. I guess my explosive nature served as a good cover story, because Mum and Dad never pried further than that.\n\nDavid did, however, and I heard rumours. One of my attackers was found, blindfolded, hanging by his pants from the fence behind the cricket change rooms. Another fell down some stairs. A third somehow managed to break both his arms during a rugby practice. To this day I don't know whether it was David, but I have my suspicions that he and his friends made sure the message got out - nobody touches Emily, nobody looks at Emily, and anyone who messes with Emily is in for a whole world of hurt.\n\nI think that's where I first started to fall in love with him.\n\n---\n\nThe week passes, in the same way it always does. I go to lectures, go to my evening dance classes, swim, read and do all the things I do to fill my life when I'm single, which to be fair is most of the time. I've never been able to settle down with any one man for any length of time; I always find myself comparing them to David. I was nineteen when I first realised this, and since then I've sort of made peace with the fact that David is the standard by which I measure other men.\n\nAnd it's an exacting standard, to be fair. David is tall and slim, with curly brown hair and blue-grey eyes. He's quick to smile, incapable of ever being fully serious, and he teases me to distraction. He played rugby and hockey at school, and gyms and runs cross-country now that he's working. He has very little sense of style, but cleans up very nicely when I get to spend some time dressing him.\n\nDavid is a sports physiotherapist by trade; a damn good one at that. His personality combined with his intellect and uncompromising belief in putting his patients first has made him popular with the local rugby clubs and the private practice that he set up a few years ago has started to really take off. He still makes time to see people who can't afford private rates, and I know that there are lots of people on his practice's books who pay what they can, when they can.\n\nIn contrast, I'm muddling my way through my fourth year at University, and I'll likely leave with a degree and no real idea of what I'll do next. I write a lot, and draw and paint a bit, and have been published once or twice, but I'm not sure whether I can make a career of any of my scribbling. I guess I'm ignoring the future and trying to enjoy the last bit of my childhood before I have to go out into the world.\n\nAnd so, the prospect of going away with him pleases me in ways I can't even begin to describe.\n\nI sit on my bed, and take a last look at the gown I plan to wear to the ceremony. It's been hanging in my cupboard ever since I encountered it in a vintage clothing shop on one of my rambling trips to Camden market. Midnight blue silk and lace, shot through with faint highlights of silver thread, it fits like a glove, and necessitates careful selection of underwear to prevent showing lines. \n\nThe reception itself is a formal event; the bride and groom love dressing up and so I imagine the entire weekend is going to be like something out of Downton Abbey. Not that I mind, it gives me the opportunity to indulge and pretend I'm Katherine Hepburn or someone. Certainly someone worthy of the racy slit that darts up to mid-thigh on the right hand side of the gown.\n\nSo I've picked out a feather headpiece and black lace cocktail jacket, and a set of long black evening gloves to accessorise. I may not be on the hunt, but I still love to be noticed.\n\nMy phone rings, and I scoop it up. I'm a little worried when I see it's David calling, so I answer quickly. \n\n\"Hi Davey, please tell me you're not cancelling on me.\"\n\n\"Hi Em. No, nothing of the sort. I've got everything arranged on this side, but I was just wondering whether I should come through now rather than chancing traffic in the morning.\"\n\n\"It's seventy miles, Davey. And it's ten at night. Are you sure you're not too tired?\"\n\n\"Positive. It's been a long day but I'd rather get there this evening and have a decent sleep rather than stressing all night and having to drive before sun-up.\"\n\n\"Well, I'd be fibbing if I said I didn't want you to come through,\" I say. \"Just please drive carefully and phone me when you reach us; I'll let you in.\"\n\n\"See you in a bit, Em.\"\n\n\"Love you!\" I say, smiling. He hangs up, and I do a little dance. It's silly, but I always feel like a puppy when I know I'm about to see him.\n\nI bustle around, making up a bed for him. Mum and Dad pay for my flat, so it's far nicer than I could afford if I had to work while studying. I asked Dad about this once, and he said that 'varsity was the last time I'd be able to truly be free, and he didn't want me to have to worry about making rent every month. \n\nSo I work shifts in the library and as a tutor to undergraduate students, and that more than pays for food and my social life. I know I'm lucky, and I do my best to let my parents know how much I appreciate them when I can. \n\nThe upshot of all this is, there's room for a spare bed for David whenever he comes to visit, which to be fair is as often as he can, but not as often as I'd like.\n\n---\n\nI was eighteen when I kissed him, if you can call it that. Davey was home for a weekend, and we were sitting in the lounge together, ostensibly watching a movie, though to be fair David was watching it and I was watching him. He looked tired, and wasn't his usual self. I thought I could make him feel better, so I curled up against him and leaned my head against his shoulder. After a while, he muted the TV.\n\n\"What's up, Em?\" he asked, quietly.\n\n\"I'm worried about you. Why are you so sad?\" I asked him.\n\nHe was quiet for a while, then he sighed. \"You know me well, Em.\" \n\n\"I've watched you my entire life. You're transparent to me. What's going on?\" I asked.\n\n\"A friend of mine died this week; he was in a car crash. I miss him.\"\n\n\"Oh god. I'm so sorry, Davey.\" I said, quietly. \n\nHe rubbed his eyes with the back of his hand. \"Thanks, Em. It's just hard. He was so young, it was such a stupid thing to do.\"\n\nI went cold. \"Did he drive drunk?\" I asked.\n\nDavid sighed. \"Yes. He did.\"\n\nI looked at him. \"Promise me.\" I said, angrily. \"Promise me on your life you'll never do that, Davey.\"\n\nHe turned and looked down at me, surpised at the intensity in my voice. \"I promise three times, Em.\"\n\nImpulsively, I lunged forwards and kissed him on the mouth. He started back in surprise. \"Em!\" he said, shocked.\n\n\"Now you have to keep that promise,\" I said. \"I'll kill you myself if you ever break it.\"\n\nHe leaned back and looked at me, then with a small smile he wrapped an arm around me and hugged me, till I squeaked.\n\nHe never has broken it either, to my knowledge, and we never mentioned it again.\n\n---\n\nMy phone rings.\n\n\"I'm turning into your street.\"\n\n\"I'm delirious with anticipation,\" I return.\n\nThe gate intercom buzzes, and I press the button to open the boom, grinning as I see his old E-type Jaguar in the pixellated display of the camera. I stand there, jiggling from foot to foot impatiently while I wait for him to ring the bell at the complex's downstairs door. I let him in, then scamper over to the flat's front door, which I fling open as I hear his footsteps on the landing.\n\n\"Hug attack!\" I yell, as I grab him, wrapping my arms around his neck and arresting his progress.\n\nDavid laughs and leans back, pulling me up off the floor. He swings around, and my inner child lets out a shrill \"Wheeeee!\". He stops spinning, lets me down, and, still chuckling, follows me into the flat, where he deposits his overnight bag and a plastic packet containing a bottle of wine and some takeaway green curry.\n\n\"I come bearing gifts,\" he says.\n\n\"My hero.\" I flutter my eyelashes at him and blow him a kiss, and he laughs again.\n\nI can never get enough of his laugh.\n\n\"Long day?\" I ask him, as I break out two wine glasses and open the bottle.\n\n\"Every day is a long day,\" he says, as he sits down on one of the barstools by the kitchen counter.\n\n\"Don't knock it,\" I say. \"No rest for the wicked.\"\n\n\"Nor for the pure of heart like moi\", he returns, and I snort, but am forced to award him the point.\n\nI hand him his glass. \"Cheers, Davey. It's great to have you here.\"\n\n\"Cheers, Em. It's good to be here.\"\n\nI sip, smiling over the top of my glass at him as he looks around. \"Not much has changed,\" I say.\n\n\"Some new artwork\", he notes.\n\n\"I doodled a bit\", I say, happy that he noticed.\n\n\"It's good, Em. You should explore it more.\"\n\n\"I might have to,\" I sigh. \"My life of idle luxury comes to an end soon and I'll need to join the working class. Alas.\"\n\nHe grins. \"Well, Em, you know where to find a spare room should you need one.\"\n\n\"Really, Davey? You'd do that for me?\"\n\nHe gives me an odd look. \"Em, you're my sister. Of course I would.\"\n\nI flush slightly. \"You're always so good to me, David.\"\n\n\"No more than you deserve.\"\n\nThere's a bit of an awkward pause, and I break it by getting up and putting the food into the microwave.\n\n\"All hail the God of blue sparks,\" David intones.\n\n\"Mock not the God, but accept his offerings gladly,\" I return sternly, and he smirks.\n\n\"So why are you so busy?\" I ask. \"You look like you're not sleeping properly.\"\n\n\"All work and no play makes Jack a dull boy.\" he replies. \"It's the problem with having a successful practice, Em. I can't in good faith turn people away, so we're working long hours all the time.\"\n\n\"You need to take some time for yourself.\" I say. \"When was the last time you just went out with friends?\"\n\n\"Friends? Ah, yes, I have heard this word used before. I must investigate it.\" he deadpans, and I flail a spoon at him. \n\n\"You idiot. When?\"\n\n\"Last month?\" he says, slowly. \"I'm pretty sure I went out last month.\"\n\nI put my hands on my hips and glare at him. \"David Anderson, this is unacceptable. A delightful man like you should be out more frequently than once a year. You'll grow moss.\"\n\nHe shrugs, grinning. \"Work and gym, gym and work, Em. That's my life right now. I'm hoping to get a locum or two in this year to help out, and maybe a junior partner.\"\n\nPing, goes the microwave, and I dish up for us. David's obviously pretty hungry because he tucks right in, and I take the opportunity to look at him.\n\nHe's tired, I can see that. But there's something else, something he's hiding. And I mean to find out what it is.\n\n---\n\nOn my twentieth birthday, I caught my boyfriend cheating on me. I had suspected nothing, had had a raucous day with friends, and was planning on seeing him in the evening. I was shopping for earrings, when I saw him walking hand in hand with another woman. I'd gone cold, had followed, had watched them kissing, I mean, really kissing, and had fled. \n\nDavid had been in class but had ducked out to field my tear and rage-filled call, had listened, had known precisely what to say and precisely when to just let me rant. I'd deleted my ex's number after that call, and the dinner I'd planned for that evening with him had become an alcohol-fueled wake at David's flat, where he'd let me sulk, cry, rage and ultimately sleep in exhaustion with the same placid demeanour with which he'd always handled my outbursts.\n\nIn the morning, there'd been flowers on the pillow next to me, a simple card reading \"Happy birthday, my darling Emily\" in his neat cursive, and the smell of the pancakes he was cooking for my breakfast in bed filling the air.\n\nHow do I begin to explain my relationship with David? I need him like the air I breathe. I know him like the back of my own hand. Amongst everything in this sometimes marvellous, often horrid world, he is the fixed focus around which I orbit. \n\n---\n\nI top up his wine, then my own, and collect his leftovers, binning them and mine. Then I take his hand and lead him over to the couch, where I install him. I take up position alongside him, tucking my legs in under me in the pose he always calls \"Girl contemplating.\" \n\nI eye him.\n\n\"Ok, 'fess up.\" I say. \"Something's bugging you, and I can smell it.\"\n\nHe gives me a startled look, then laughs. \"Ok, I confess.\"\n\n\"Excellent,\" I purr. \"Soon all your secrets shall be mine.\"\n\n\"You already know all my secrets, Em\" he says. \"Well, except for this one. Truth is, I'm glad you phoned me when you did.\"\n\n\"Oh?\" I raise an eyebrow. \"I'm guess I AM psychic, after all. Whodathunkit.\" \n\nHe shakes his head in amusement. \"I met someone.\"\n\nMy smile freezes and I take a quick sip of my wine to hide my momentary dismay.\n\n\"I was supposed to be going away with her this weekend to the Lake District, but she cancelled on me.\"\n\n\"I'd say I'm sorry, but I'm really not,\" I say smugly.\n\n\"I somehow doubted you would be,\" he says. \"Still... it would have been nice. It's been a long time since I was with anyone.\"\n\n\"What?\" I exclaim. \"David, seriously, do you live under a rock?\"\n\n\"I struggle to meet people outside work these days, Em.\"\n\n\"That's because you're always working,\" I return. \"If you took better care of yourself you'd get out more. Maybe I should come live with you and smack some sense into you.\"\n\n\"Maybe you should\" he returns, deadpan. I'm a bit taken aback by his ready agreement and cast about for something to say. My usual repartee of sarcastic replies deserts me, and I'm left a little flustered. \n\n\"Have you picked out what you're going to wear?\" he asks with curiosity, and I'm suddenly shy as well.\n\n\"Yes,\" I say, quietly.\n\n\"Well? Do I get to see it, or are you flying blind on this one?\"\n\nI've always dressed up for him - any time I was going out, he was my advisor. It's always amused me that he could be so good at helping me dress and yet so terrible at dressing himself.\n\nBut I've never felt self-conscious about it, until now. I slowly get up, and head for my room. \"Make yourself comfortable,\" I call to him. \"I can't rush this.\"\n\n\"Don't hurry on my behalf,\" he calls back, and I hear the TV being turned on.\n\nI close my door most of the way, and dim the lights slightly. Then, feeling uncharacteristically uncertain of myself, I pick out the black strapless bra I was planning to wear under my gown. Quickly, I strip off my tee-shirt and sports-bra, and drop my tracksuit pants as well. I strap on the black bra, then carefully take the gown off its hanger and slowly slip it on. \n\nI reach behind myself, thanking my flexibility as I do up the zip that runs from the small of my back up to the high neck. I run my hands down over the front of my body, smoothing the fabric out. I quickly let my hair down out of its ponytail, and comb through it with my fingers so that it falls down in golden waves over my shoulders and back.",
        "I sneak a look at myself in the mirror, and am gratified to see that the gown still looks as good on me as it did when I found it. I raise my arms, satisfying myself that no part of my bra will be visible in the relatively modest neck and shoulder lines, then turn to eye my profile. My dancing and gymming have paid off and the dress hugs me like a bodysuit; I'm very happy with the result. I pull on my evening gloves, and shoot myself a smouldering look in the mirror.\n\n\"David?\" I call out.\n\nI hear him walking towards my room, and for some reason butterflies start up in my stomach again.\n\nHe knocks. I laugh, nervously. \"I know it's you, and I'm decent. Come in.\"\n\nHe opens the door, then stops.\n\n\"Wow.\" he says, after a while.\n\n\"You like?\" I ask, unreasonably happy at his reaction.\n\n\"Be still my beating heart,\" he says, shaking his head.\n\n\"That good, huh?\" I say.\n\n\"Em,\" he says. \"I'm your brother. There are some things brothers are not supposed to say to sisters.\"\n\nI grin. \"Nobody's here but me. Tell me the truth. Do I look good?\"\n\n\"Emily, you could stop traffic in that dress. You're delicious as you are, and in that...\"\n\nHe stops, then blushes, and I feel myself flushing too.\n\n\"Um...\" he says, \"I'll be outside.\" He makes a speedy escape, and I find myself worried that I've pushed him too far.\n\nI undress as quickly as I can, hanging the dress carefully back on its hangers and then dragging my tee-shirt and tracksuit pants back on. I find him on the balcony, drinking his wine quietly as he stares up at the night sky.\n\n\"Davey?\" I ask, quietly.\n\n\"Hi,\" he smiles.\n\nI worm my way in under his arm. \n\n\"I'm sorry if I made you uncomfortable.\"\n\nHe laughs, quietly. \"Don't mind me, Em. I'm just a jealous brother. You're going to be mobbed tomorrow and I'm going to have to flirt with old ladies.\"\n\nI punch him gently in the chest and he snorts back some more laughter. I lean my head against him, listening to the gentle thumping of his heart.\n\n\"I'd never desert you,\" I whisper.\n\n\"What was that, Em?\"\n\n\"Nothing. I've missed you is all.\" I wriggle out from under his arm, and wrap my arms around him, squeezing him as hard as I can. \"Don't be too late, Davey. It's a bit of a drive to the reception and we need to get there with time to spare.\"\n\n\"I'm coming to bed now, Em. Just finishing my wine.\"\n\nI squeeze him once more, then turn and head for bed. I turn out the lights in my room, strip down to my panties, and climb under the blankets, where I toss and turn for a while, remembering the look on his face when he first saw me in the gown. I hear him coming in, closing the sliding door to the balcony, and putting his wineglass into the sink. \n\nHe stops and pokes his head into my room, and I pretend to be asleep. He pads quietly into the room, and through slitted eyes I see him stoop forwards towards me. He plants a gentle stubbly kiss on my cheek, and whispers a quiet \"I've missed you too.\" before tip-toeing out and gently closing my door on me and the sudden ache he's left me with.\n\nI long ago made peace with the fact that I'm in love with him, and that I can never have him. But having him this close just makes it harder to bear.\n\n---\n\nI wake up thirsty in the early hours of the morning. My phone says its 3am, and I curse under my breath at whatever woke me up. I lie there for a few minutes, wishing I could fall asleep again, but I know it's futile and I need to get up and get some water. I grumble, and kick the blankets aside, then get up. \n\nBriefly I consider dragging a top on, but given the hour it's hardly necessary, so I slouch quietly out to the kitchen. I grab a glass and pour myself some water, and sip it while staring out the balcony window.\n\nMy complex borders onto a large green belt area, so I'm lucky enough to have a bit of a view. I lean against the glass, enjoying the sensation of goose bumps spreading over my shoulders at the cold. I can see what look like deer wandering over the grass in front of the distant tree line; the silly things love to menace the shrubs along the complex's boundary wall, and I've always enjoyed watching them. Occasionally one sees rabbit and foxes as well.\n\nI count my lucky stars that my parents pay for me to live where I do...\n\n\"Emily?\"\n\nI jump, startled, and spin. David's standing sleepily at the door to the lounge. His eyes widen and I remember that I'm topless. I squawk, and grab the curtain, wrapping it around myself.\n\n\"David!\" I'm flustered. I honestly didn't hear him.\n\n\"Um... everything ok?\"\n\n\"Yep. Fine. Perfect.\" I pull the curtains tighter around me.\n\n\"Sorry, I head noise and came to investigate...\" \n\n\"Just me. I needed water. Um... Davey... you've got me at a disadvantage here.\"\n\n\"Oh... oh, right. Sorry Em, still asleep here. You need a top?\"\n\n\"Please. There's one on the floor in my bedroom. Please be a sweetheart and grab it for me.\"\n\nHe ducks out, and quickly returns with the top, passing it gently to me before turning his back so I can pull it on.\n\n\"That'll teach me,\" I mutter, once I'm decent.\n\n\"Sorry, Em, I didn't know it was you.\"\n\n\"My own fault, Davey.\" I touch him gently, and he turns around. \"I didn't know you were awake and thought I'd be ok running around au naturel.\"\n\nHe grins wryly. \"I'll make some noise next time.\"\n\n\"Why were you awake at this hour?\" I ask, concerned.\n\n\"Unsure. Just suddenly woke up; it happens sometimes.\" He stretches his arms up behind his head. \"Well. I'd be lying if I said I was sleepy now.\"\n\n\"David!\" I gasp, then laugh helplessly. \"You perve, I'm your sister.\"\n\nHe winks at me. \"Where do you keep your coffee, Em? Above the sink, right?\"\n\n\"Yep. Make me a tea while you're at it to make up for your ungentlemanly behaviour and maybe I'll forgive you.\" I grin.\n\nHe chuckles quietly, and puts the kettle on, then organises two cups. He brings me my tea when it's done, and then slumps back onto the couch. I take up position next to him.\n\nI feel strangely daring. \"So, did you enjoy the view?\" I ask, mouth curled up in amusement.\n\n\"Well, you know, the lighting was poor and the venue was not great, but yes, the act itself was rather nice.\"\n\n\"Rather. Nice.\" I say, flatly.\n\n\"Critically acclaimed?\" he offers.\n\n\"I was shooting for a BAFTA award\" I sigh. He laughs.\n\n\"Em, I'm your brother. But I'm also a guy. Take it from me, the twins are lovely.\"\n\nI smile to myself, pleased, and lean over against him. He puts an arm around me and squeezes me against him, and for a while I lose myself in the feeling of his body against me. A hot ache takes root in my belly and I suddenly realise I'm desperately horny. \n\nI hope to heaven that my nipples are not erect, given the thin boundary of fabric that's currently the only thing that's preserving my modesty. I cough, and shift - David shoots me a glance, then finishes his coffee.\n\n\"Bed?\" he suggests. \n\nI sigh, and nod. \"Long day today, I guess we should.\"\n\nOn a whim I follow him into the spare room, and sit on the side of his bed as he climbs back under the covers. Then, quickly, I lift the sheets and sneak in with him.\n\n\"Oh, hello,\" he says, with amusement. \"Fancy finding you here.\" \n\nI snuggle up against him as if I were twelve again, and grin at him. \"There's space for two and it's been years since I snuggled with you. Move over.\"\n\nHe obligingly makes room for me, and I bask happily in the heat he gives off; David's thermostat's always run hot, I swear he'd wear a vest and jogging shorts to Greenland. Me on the other hand? I love the cold, but I suffer from it. \n\nI roll onto my side, away from him, and pillow my head on his outstretched arm. He rubs my back gently for a short while, then whispers a quiet \"Night, Em\".\n\n\"Night, Davey,\" I whisper back. Soon I can hear him softly snoring. \n\nWhat I do next will likely scandalize me in the cold light of day, but I feel warm and safe, next to the man I love, and so it's natural for me to slip a hand down under my panties to try to deal with some of my excess frustration.\n\nQuietly, gently, I crook my fingertip down between my lips, amused to discover that I'm already wet. Achingly slowly I start to toy with my clit. The angle is wrong, so I shift my hips slightly and move one leg to spread myself. Then, gently, slowly, I start to tease at first one and, soon, two fingers over and around myself. \n\nThe breath hisses quietly though my teeth, and an ache builds deep inside me. Being constrained like this is hot, damned hot, and I fight the moans back down, but the shudders I can't control. I feel myself building, and then, suddenly as always, it takes me. I shake, and a small whimper escapes me.\n\nI lie still, letting my heart rate slow. Behind me, David's breathing is unchanged, and I smile a small, satisfied smile to myself as I snuggle back against him.\n\n---\n\nSunlight wakes me, and I sleepily shift. I can feel David pressed against my back, spooning me. I can feel something else too, and my breath catches slightly as I realise that his hard penis is pressed into the cleft of my buttocks. I try not to move, savouring the moment for as long as I can. But then reality sinks in and I realise that he'll probably be mortified if he wakes up like this. \n\nAnd so I scoot gently away from him, slipping quietly out of the bed. I stand, looking down at him. The faint lines on his face which appeared in the last several years are almost invisible; he looks at peace. I sneak a look at his phone; we still have an hour's grace before we need to get up, so I leave him to sleep, and take advantage of the time to have a shower.\n\nI can't get the feeling of his body against me out of my head, try as I want to. My long, one-sided love-affair with him is just that, one sided, and all I'm doing is torturing myself. But I could feel him... hard... ready... I wonder, pausing idly, what he was dreaming of. \n\nOr maybe, I snort, it was just the feel of a warm body against him that caused his body to respond. I sigh, sadly, and stretch, letting the hot water sluice over my neck and shoulders for a while. \n\nThen I take care of some personal pruning, trimming my straggly pubic hair down to a more manageable triangular area. Suddenly, on a whim, I lather myself up and proceed to shave myself bare. I splash myself clean, then turn off the water. I grab my towel and pat myself till I'm no longer dripping.\n\nThen I take stock, looking at myself in front of the large mirror. I feel strangely naked now that I've shaved. Naked... and liberated, like I've shed a layer of skin. It's difficult to describe, really. I eye myself, lips pursed. At twenty three, I still look young enough to be asked for identification whenever I buy wine at the markets. \n\nI gently rub my fingertips over my breasts, watching the goose bumps spread over them and my shoulders. I enjoy being slender, and my B-cups complement my body and my small, firm flanks. I know I'm good looking from the reactions I get from guys, but at least I know I don't use that knowledge for evil.\n\nMy eyes slip downwards over my firm, toned stomach, to my newly-bare mons. I'm slightly amused by how strange it looks, being able to see the junction of my lips so clearly. I start to understand why men (apparently) like it so much. \n\nI wonder idly whether David likes shaven girls. Then I shake my head, angrily, and start to towel my hair dry. It's a pointless fantasy, and dalliance in it is a waste of my time and emotional energy. I wrap the towel around myself, and head for the kitchen, where I try to quietly start getting things ready for breakfast. \n\nI guess I'm noisier than I realise, though, because I hear shuffling footsteps as David heads for the shower. Before long I hear the water running and the shower door closing. I daydream briefly about sneaking a peek, but that falls firmly under the category heading 'Bad Idea', so I don't act on the impulse. \n\nInstead, I make myself a cup of tea and try to behave like the decorous younger sister I should be.\n\nHe emerges, eventually, bare-chested, with a towel wrapped around him. I try not to oggle him too obviously, but it's clear he's been exercising more regularly than he let on. It's difficult not to be impressed, though; he is very well built these days, and even has the first signs of a six-pack. \n\nHe gives me a sleepy smile. \n\n\"Hope you don't mind me in a towel,\" he says. \n\nI snort, and wave a hand vaguely at myself and my own towel. \"What's good for the goose is good for the gander\" I say. \n\nHe climbs up onto one of the bar stools, and leans forward over the counter. \"Breakfast?\"\n\n\"Almost ready,\" I say, \"though I hope you're ok with fruit and muesli since I guess we're going to be eating an enormous amount tonight.\"\n\n\"Sounds good to me,\" he says. \"Did you sleep ok?\"\n\n\"Like a baby\", I respond. \"You?\"\n\n\"Mostly, yep.\"\n\n\"Only mostly?\" I ask, curious.\n\n\"Yep. You woke me up at some point, I think you were dreaming.\"\n\n\"Oh.\" I roll this over in my mind. \"I don't remember.\"\n\n\"It's fine, I rubbed your back a bit and you quietened down.\" He smiles.\n\n\"My hero.\" I wink at him, and he snorts.\n\nWe eat quietly, and I clean up afterwards while David finishes his coffee. \n\n\"Em?\" he says, quietly.\n\n\"Yeah?\"\n\n\"What happened with Jason?\"\n\nI slowly put the dish I'm washing down, and turn around to face him.\n\n\"What do you mean?\"\n\n\"You two seemed to be doing really well together. Then, suddenly, catastrophe.\"\n\nI shrug. \"He decided it was more important to stick his cock into some nineteen year old than it was to pick me up from class.\"\n\nHe leans back. \"Ah.\"\n\n\"Yeah. Same story, different protagonist.\"\n\nHe shakes his head, sadly. \"He seemed like a nice guy.\"\n\nI sigh. \"He was. I thought... no, never mind.\"\n\n\"You thought what, Em?\"\n\nI thought I'd finally found someone who'd make me forget you, is what I want to tell him. But of course I can't say this, so I change it slightly.\n\n\"I thought I'd just finally found someone who could make me happy is all. And he did. Mostly. Anyway\", I say, grimly, \"It's all water under the bridge now.\"\n\nHe stands up and walks around the counter, reaching out to pull me into a hug. I can't help myself, I cry a bit, but he holds me tightly until the shaking stops, then gives me a hard squeeze and a kiss on the forehead. \"You'll find someone, Em. Someone who treats you the way you deserve.\"\n\nI shake my head and laugh, bitterly. \"Maybe someday.\" Regretfully, I let go of him, and turn away so I can rub my eyes. My towel has slipped slightly so I adjust it. Then I sigh. \n\n\"I guess it's time to start getting ready.\" he says.\n\nI turn back and squint up at him, then pat him on the cheek. \"Yeah. You need a shave, by the way.\"\n\n\"Yes, mum,\" he mutters, and saunters off.\n\nI lean back against the countertop, suddenly sad. Age makes my hopeless love for him worse. I shake my head, and run my fingers through my damp hair, then force a smile onto my face. At least he's my brother. At least I have that much of him.\n\n---\n\nI sit in front of my dressing table, blow-drying my hair so it sets in the waves that I know perfectly frame my face. Then I stand and unwrap the towel. My eyes are slightly red, but I know that will clear with time, so I'm not concerned. I pick up the lacy black panties and strapless bra, and put them both on. \n\nThen the stockings with the woven in ivy pattern that I found at the same vintage shop my gown was at join them. I like the effect; the way the leaves scroll up my calves and thighs. Briefly, I pause. Then it's the gown, and the small silver fleur-de-lis earrings. I appraise myself, pleased. The blue and silver accentuate the blue of my eyes, and all I need is some base and a little bit of eyeliner and I'm good to go.\n\nDavid knocks on my door. \"Mind if I come in, Em?\" he asks.\n\n\"Of course not.\"\n\nHe steps through, and pauses. \"Yep. Definitely going to be flirting with the grannies tonight.\"\n\nI smile over my shoulder at him, admiring the smart black trousers and white dress shirt he's wearing. Then I notice the small velvet bag he's carrying. \"What's that?\"\n\n\"An early birthday present for my favourite sister.\"\n\n\"I'm your only sister,\" I inform him, seriously.\n\n\"Yep, and my favourite.\" he replies. \n\nI laugh at him. \"Idiot.\"\n\nHe smiles, and hands the bag to me. Curious, I undo the drawstrings, then upend it into my hand. My heart stops.\n\n\"David.\" I breathe.\n\nThe pendant necklace is silver, cupping a small blue pear-cut stone in a simple setting ringed with tiny pearls. It is understated and yet stunning; exactly the sort of item I'd wear. It's perfect for an event like the one we're attending.\n\n\"Happy early birthday, Emily.\"\n\nI stand, and abandon all caution as I swing my arms up and around his neck, holding him close against me. \"David, you can't spoil me like this.\"\n\n\"Yes, I can, and I will.\" he says, holding me against him. \"Now put it on; I had a suspicion it would be a match for you but the proof is in the viewing.\"\n\n\"Help me,\" I beg, and I turn away, lifting my hair free of my neck. David hangs the pendant around my neck and clasps it, then steps back. I admire it in the mirror, then turn to look up at him.\n\n\"It's beautiful.\"\n\n\"Topaz and fresh water pearls. Classy and understated, just like you. I hope you like it.\"\n\n\"Like it? David, it's lovely.\" Unthinkingly I stand on tiptoes and kiss him. He makes a surprised noise, and I belatedly realise that I've been unwise, but I don't care. He gently disengages himself and looks down at me, then hugs me, saying nothing.  \n\n\"I need to finish getting ready,\" he says, after a small while.\n\n\"I know. Me too. David... thank you. This is the nicest gift anyone has ever bought for me.\"\n\nHe smiles at me, and I know I'm forgiven my lapse.\n\n---\n\nDavid places our jackets and other paraphernalia on the back seat of the Jaguar, and dumps our small overnight bags into the boot. I climb carefully into the passenger seat, he eases in behind the wheel, and we're off. I can't help but grin at the sound of the engine and the rush of the wind. \"Can't we drop the roof?\" I beg.\n\n\"When we're out of town\" he promises. We wind our way out through the lanes, and pull over into a farm road entrance where, true to his word, he drops the lid. It's a glorious Spring day, and I'm delighted to be out with him. I wrap a scarf around my hair to keep it under control, and we set off again, making good time across the Surrey countryside. We head southwest, deeper into the old woodlands, and I feel my cares blowing away; David is smiling next to me and I feel like I don't have a worry in the world.\n\nEventually we turn into the vast private grounds of the venue, and I look around with interest. It's clearly well-maintained; it even has a large formal garden, and I can see couples strolling around with parasols and morning coats. \"I hope you brought a top hat,\" I tease David, and he laughs, shaking his head.\n\nWe park, and David climbs out, then walks around the Jaguar in order to open my door and help me out - sometimes I think he was born into the wrong age. I smile at him as he steadies me. Then he reaches over the sill and grabs our jackets, holding mine for me so that I can pull it on. He unfolds a small vanity mirror and holds it for me while I straighten my hair and pin the hairpiece to it. \n\nFinally, I spend a pleasurable few minutes helping him put on the white silk bow-tie he's brought with. I stand back to admire him. He really is a very, very attractive man.\n\n\"Shall we?\" he asks, as he slips on his evening jacket, and I smile a yes. He holds out his arm, and I loop mine through it.\n\nWe enter the reception area to mingle with all the other guests, and I introduce David to those I know; mainly friends from University. I see one or two confused looks, and I'm sure various explanations are given as to why I'm here with my brother as opposed to a date, but I don't care; as far as I'm concerned I got the better deal. David is polite and friendly, and soon strikes up a conversation with a couple of men; I loiter, watching him proprietarily and listening with half an ear to the strains of a string quartet playing Vivaldi. Jenny, an acquaintance, flits by and pauses to make small talk, and time passes. White wine is served in small glasses and, soon, a bell is rung and the best man asks us to make our way to the manor's chapel for the ceremony.",
        "David disengages from his gaggle of new friends and takes my arm - I smile up at him, amused at the slightly jealous looks I'm receiving from several other attendees. We follow the crowd of guests, taking seats on the bride's side of course. The usual order of ceremony takes place - the bride enters, looking radiant, the minister introduces himself and them, and I zone out as I normally do. The ceremony's long on humour and light on religion and is over pretty quickly. No objections, no catastrophes. The bride and groom disappear off for photographs, and the rest of us mill around outside with our champagne and finger food.\n\nI suppose that one could make the charge that I'm cavalier about the whole marriage thing. I guess it's important to the newlyweds and their families, but to me it always feels slightly forced; a brash 'look at us, we've finally arrived'. Perhaps I'm being unchivalrous - maybe I'm just the kind of girl who needs nothing other than to know that she belongs somewhere. I just wish I knew where that somewhere was. \n\nActually, I correct myself; I know precisely where it is. \n\nBut I'm exiled from that space.\n\nI sigh. Suddenly, I find the crowd of people annoying, cloying, and decide to explore the formal garden and grounds of the manor for a breath of perspective and fresh air. I make my way out of the reception area, and soon I'm strolling slowly, admiring the topiary and the flower beds, enjoying the sound of birdsong and the feel of the sun on my back.\n\nWhile I walk, I finger the pendant. David's always bought me trinkets on my birthday; small tokens and keepsakes. This is something different. This isn't costume jewelery, it's the real thing, and I can't help but feel that he spent more than he should have on it. I sigh again, then square my shoulders. I'm a past master of burying my feelings when it comes to him. Nobody, and I do mean nobody, knows about the candle I carry for David. It would destroy both of us if it ever became public knowledge.\n\nI guess you could call it calculating, cold. The fact that I'll be with other men, using them as a simulacrum of him; as a buffer. But I can't get away from the fact that I need physical attention. I need to be loved, and failing that to at least be held, and since I can't have him... any port in a storm. As a corollary, I try my best not to dig into his own personal life, for fear of the jealousy it will arouse in me.\n\nI wander onwards, drawn by whimsy. Soon I find myself in a small arboretum, complete with folly. I poke my nose through one of the arches of the folly, and discover to my delight that there is a window seat, complete with clean cushions. I kick off my heels and pull my legs carefully up under me, then make myself comfortable and close my eyes for a while, just listening and thinking. I can feel the gentle breeze on my skin, and the rustling leaves all around me.\n\nIt's a moment of blessed peace. I love formal events, but weddings, not so much. They cut a little too close to the bone for me. But I guess I need to make an effort with this one, given that David's gone through the trouble to attend with me.\n\nI dilly dally a bit, but then unfold my legs, slipping them back into the heels. I take a sip of my now lukewarm bubbly, then stand and make my way back out through the garden. I find David, and flash him a small smile at his enquiring look, but say nothing. He's chatting away to a mixed bunch of people, most of whom I don't recognize, but he makes room for me in the circle and introduces me as 'Emily', which I find interesting. David's describing his work, and I derive some amusement watching his audience lapping it up.\n\nSoon, however, he breaks away, and takes my arm with his, leading me off to the refreshments table. He grabs us two more glasses of champagne, then steers us out into the gardens.\n\n\"Are you ok, Em?\" he asks with concern once we're out of earshot.\n\n\"I am. Just a little raw is all.\"\n\n\"Weddings can be difficult\" he agrees. \n\n\"Especially as we get older, and everyone else's married off\" I sigh, theatrically.\n\n\"Older?\" he comments, raising an eyebrow. \"Em, you're practically still a teenager.\"\n\nI stick my tongue out at him. \"Just because you're older than me doesn't mean I'm not ancient myself.\" I hunch over, pretending to totter around. He snorts, but says nothing.\n\n\"So where did you see yourself at twenty six then?\" I ask, piqued. \n\n\"Pretty much where I am, really.\" he replies, after a short pause. \"Maybe a harem and a manor house like this.\"\n\n\"A harem, huh? Sounds scintillating.\"\n\n\"Well, you know, a dashing gentleman like myself requires an entourage of sorts.\"\n\nWe enter a small, knee-high mock maze, paved with gravel, and I entertain the amusing fantasy of being lost deep within it.\n\n\"Remember, always turn left at any junction,\" David says, and I shoot him a quick glance. \"Get out of my mind, mister,\" I grumble at him, and he smiles, smugly.\n\n\"So this harem,\" I continue, \"Describe it.\"\n\n\"Oh, you know. Typical harem. Lots of diaphanously-clothed nymphs all plotting against one another and manoeuvring to be the one who gets to feed me peeled grapes.\"\n\n\"Why would you peel grapes?\" I wonder, aloud. \"The skin is one of the best parts of a grape.\"\n\n\"Particularly when wine-making\", he agrees, \"But I'm talking boudoir, not pinot-noir\"\n\nI groan at the pun, and he cackles. \n\n\"I always viewed harems as a waste\", I muse. \"It must be pretty dull, sitting around looking pretty and hoping that master notices.\"\n\n\"Truth be told, I agree\" he says. \"I can't focus on more than one woman at a time.\"\n\n\"Your Lake-District girl.\"\n\nHe's quiet for a while. \"Truthfully, no.\"\n\n\"Oh?\" I ask, intrigued.\n\n\"Yes.\" he says, and uncharacteristically doesn't explain any further. To be honest, I'm glad; I don't want to know about the competition, such as it is.\n\nHe takes my arm and pulls me slightly closer as we walk.\n\n\"Are you seeing anyone, Emily?\"\n\nI sigh. \"No. Jason was a bridge too far, David. I need time to mend that particular betrayal before I'm willing to trust anyone again.\"\n\nHe frowns at that. \"Bad idea, Em. Never stop trusting people, you will miss out on so many interesting stories if you treat them with suspicion from the outset.\"\n\n\"There's only a few people who've ever earned my unconditional trust, David.\"\n\n\"And that makes me sad, Em. I worry about you constantly.\"\n\n\"About me?\" I say. \"Why, David?\"\n\n\"Because you're my baby sister, the only baby sister I'm ever going to have, and the thought of you being unhappy drives me to distraction.\"\n\nI shoot him a quick glance. \"David, the guy I was fucking fucked someone else. I'll get over it.\"\n\nHe stops then, which in turn forces me to stop and turn back to face him.\n\n\"That's a harsh way to describe a two year relationship, Em.\"\n\n\"Betrayal brings clarity, David. I guess I'm facing the reality that childhood is over and I've got to put on my big girl panties now.\"\n\nHe shakes his head. \"Don't ever let what other people do change who you are, Em. Who you are is too precious to ever lose.\"\n\nI smile sadly up at him. \"David Anderson, I do believe you are practicing pick-up lines on me.\"\n\n\"Emily,\" he says, quietly. \"You are my sister, and because of that I hope that what I say carries some weight. Here's what I know.\"\n\nHe meets my eyes. \n\n\"Something's happened to you. Somewhere, sometime, in the past, something happened; something you've never told me. Whatever it was, it's made you... not bitter, bitter's the wrong word. It's made you cut off part of yourself from other people. I can see it in the way you act towards the guys you're with... not all of you is present; you always hold a part of you back. I'm worried that if you never let go of that reserve that you'll never be truly happy.\"\n\nDenials die in my throat, and a shudder runs through me. I know David notices because he reaches out to touch me; giving me a confused look as I pull back out of reach.\n\nI take a deep, painful breath.\n\n\"You know me too well, David.\"\n\n\"Em?\" he says.\n\n\"I've loved someone for a long time,\" I say, quietly. \"I can't have that person. I have to try to make the best I can of my life given that restriction. Do you understand?\"\n\n\"Why can't you be with him?\"\n\n\"Are you so certain it's a him?\" I ask, teasingly.\n\n\"Em, while I wouldn't put the occasional lesbian dalliance past you, I know for a fact that you are far too fond of muscular guys to bat solely for the girls team.\" I laugh at this, and calm down slightly. David shakes his head in amusement. \n\n\"Just take it from me, Davey. I can't be with the person I love because of matters beyond my control. That doesn't mean I don't need love and attention... so I get it where I can.\"\n\n\"At what cost, Em?\"\n\n\"A very high one. But one I'm willing to bear, for love's sake.\"\n\n\"It sounds like a recipe for a lifetime of deferred pain, Em.\"\n\n\"I can't deny that,\" I respond, with a small sigh.\n\nHe steps closer to me and pulls me into a tight embrace, and once again I feel myself struggling as his physical nearness overwhelms my defences.\n\n\"Em, don't cry,\" he says, quietly. \"You know I'll always love you.\"\n\nWhich is really pretty much the worst thing he can say, considering the situation. Poor David. Luckily I have tissues and emergency makeup in my vanity purse, and an extended session of tears followed by a quiet recovery period next to him on a bench sort me out enough that we can re-emerge to mingle once more with the other guests.\n\n---\n\nI can feel his watchful attention throughout the meal and speeches. I make desultory chit-chat with the other people at our table, trusting David to carry the conversation through dinner. I spend my time observing couples at other tables, trying to work out who's happy and who's not. I sip my wine, estimating it at a close to even split between both camps. Nothing like a wedding for bringing cracks out into the open, I suppose. I toy with my food, not really tasting it, and putting it aside when I no longer feel hungry. \n\nAfter my third glass of wine, though, David leans over to me and gives me a gentle nudge. Then he whispers \"Alcohol helps, but only short term. Dancing's a better cure. I'll dance with you as much as you like.\"\n\n\"Promises, promises\" I whisper back to him, but am secretly pleased by the prospect. I'd wondered whether he'd feel odd about dancing with me, but I should have realised that he's never been embarrassed about having me as a sister... so why would this be any different?\n\nSlowly the interminable pomp winds to an end, and the party proper starts. The first dance of the evening is for the bride and groom only, and they enjoy themselves to Fats Waller's \"Aint Misbehaving.\" Slowly, the music evolves into an eclectic mix of modern rock, swing and blues, and after a short while David stands and smiles at me, offering his hand. I take it, stand, and he leads me out onto the dance floor. Other couples are already there, and there's a lively competition developing between the hardcore dancers and really good fakers. \n\nDavid steers us through the melee, both of us laughing as we move to classics including Gershwin, Don Maclean and the immortal Louis Armstrong. My gown gains me appreciative looks from other men and I catch more than one girl giving David serious come-hither glances. Occasionally I amuse myself showing a bit of leg in a turn, and on one occasion I catch David glancing; this makes me far happier than it should, but I've made peace with my internal hussy.\n\nThen, the first slow dance number begins. I sigh, and turn to leave the floor, but David catches my hand and pulls me back. \"Dance with me, Em\" he says, as Air Supply start to sing \"Making Love out of nothing at all\"\n\nI experience a moment of horrible indecision, but David solves it for me by taking my left hand and placing it on his shoulder, while he circles his right arm around my waist as he pulls me closer and leads us off.\n\nI can feel myself flushing. The song is one of my favourites, full of lyrics that have special significance to me because of the way I associate them with him. I think David senses that I'm flustered, because he winks at me and shifts his hands slightly, pulling me even closer. I surrender, placing my cheek to his chest and letting him guide our dance, while I simply focus on how amazing it feels to be this close to him, dancing with him.\n\nIt's the first time I've ever slow danced with him, and I'm a big puddle of jelly. Nerves jangle, butterflies flutter, and through it all I can feel him breathing as he holds me. Air Supply transitions to Guns and Roses, and I creep closer to him. The faint fuzz of alcohol makes me bold, and I take little risks. I wrap my arms around his neck to get closer, and allow my thigh to occasionally 'accidentally' brush against his. \n\nI can smell his aftershave and the scent of the soap he washed with, but under that the scent that is quintessentially his. I could recognize him with my eyes closed. He smells of home, of my childhood, of never having to fear being alone. Closer, I creep, teasing myself. I slip one leg between his, feeling his hip against my belly, his abs against my chest, his chest against my breast, and the slightest prickling of stubble against my forehead. Then he shifts slightly and I feel him against my thigh... hard.\n\nI miss a step.\n\n\"Ok, Em?\" he asks, concerned.\n\n\"Yeah. Just woolgathering.\"\n\nI feel him snort, then he spins me slowly around and we dance on for a short while. Then, as Snow Patrol's \"Chasing cars\" ends, he leads me off the dance floor. \"Need a drink,\" he explains as I make protesting noises. I sigh long-sufferingly, then grin at him. \"Get me one too please,\" I ask. \"White if you can.\" He nods and heads off. I sit, and fan myself slightly with a menu in an attempt to kill off my flushed face. It's a little unsettling to think how scandalously I was just behaving with him... and that he (or his body, at least) was clearly enjoying it.\n\nI groan. I want him, desperately. \n\n---\n\n\"Em?\"\n\nI realise I was lost in a fantasy, and give him a guilty smile. \"Sorry, Davey. I'm zoning out today. No idea why.\" \n\n\"Need some fresh air?\" he asks.\n\nI think. \"Actually... yes, that would help a lot.\"\n\nHe helps me slip into my jacket, and we make for the doors to the garden, slipping out through the press of wallflowers gathered there and making our escape into the grounds. The gardens are lit at intervals by candles hanging from trees or fastened to stakes in the ground; it gives the manor the appearance of something from Wonderland.\n\nI steer David towards the folly, and am glad to find that it is free of other people. I perch on the seat, and pull David down next to me. We sit, sipping our wine, listening to the muted sounds of conversation and music drifting down from the Manor, breathing.\n\n\"Do you remember saving my life?\" I ask him, after a brief internal struggle.\n\nHe gives me a startled look. \"Vividly.\" he says. \"I had no idea you remembered it.\"\n\n\"It's a fixture of my dreams. I can see you as clearly as I see you now, swimming towards me to save me.\"\n\n\"You're my sister, it's not like I would let anything hurt you or anything bad happen to you.\"\n\n\"Or anyone,\" I say.\n\nHe says nothing.\n\n\"Was it you who... sorted out... those kids who attacked me?\"\n\n\"Me and others.\" he says, quietly.\n\n\"Oh.\"\n\n\"Why're you asking these questions, Emily?\"\n\nI sigh. \"Just checking that you know how much I love you, David.\"\n\nHe smiles at me. \"You don't need to check, I know you love me.\"\n\nI stare at the lantern in the folly. Quietly, I take a decision.\n\n\"I have something that's been eating my heart out for nearly ten years now, David. I've never told you, but I need to tell you now.\"\n\n\"Em, what is it?\"\n\n\"The reason I can't open up fully to any men I'm with. It... oh, god, this is difficult to say to you.\"\n\n\"Em, you've told me everything in your life. Whatever it is, I'll listen and help if I can.\"\n\nI laugh helplessly. \"That's just it, David. It's about you.\"\n\n\"About me?\"\n\n\"Yes.\" I put my head in my hands, and take a breath.\n\n\"Em, I'm going to do my puzzled panda impression if you don't spit it out.\"\n\nI give him a helpless look.\n\n\"I love you, David.\"\n\n\"I love you too, Em\" he says, clearly puzzled.\n\n\"No! Listen!\" I say, urgently. \"I. Love. You. You and nobody else. You're the one.\"\n\n\"Oh,\" he says, and I swear that I can see the cogs turning in his head. \"That explains... well, that explains lots, really.\"\n\n\"Uh huh.\" I mutter.\n\n\"So if we follow the timeline, ten years would put it back to...\"\n\n\"Yes, then.\" I sigh. \"That's when it started. When you held me, helped me, and made sure Mum and Dad never knew.\"\n\n\"And you've kept this quiet, all this time?\"\n\n\"Yes.\"\n\n\"And this is why you've always been so brittle?\"\n\n\"Yes.\"\n\n\"And you never thought to tell me about this earlier?\"\n\n\"What good would that possibly have done?\" I demand, angrily. \"David, do you realise how serious this is? Your sister is a twisted puppy who wants her brother.\"\n\nHe's quiet for a short while, then he puts aside his wineglass and turns to face me directly. I steel myself for the crushing rejection that must surely follow, and I fight hot tears of shame back with iron self-control.\n\nHe kisses me. \n\nI am so surprised that I drop my own glass, which shatters to smithereens on the folly's stone floor.\n\n\"David...what...why?\" I manage, totally thrown.\n\n\"Firstly, Em, you're the silliest of all my sisters.\"\n\n\"I'm your only sister\" I say, confused. He puts a finger to my lips, silencing me.\n\n\"Secondly, I know\"\n\n\"You... know? How?\" I whisper.\n\n\"I'm your awesome elder brother, Em, I know things. Thirdly, and this one is a doozy... ditto.\"\n\n\"Ditto?\" I say, now totally out of my depth.\n\n\"Ditto\" he says.\n\n\"Don't... David, don't lie to me. Don't make me hope. Don't do that...\" I feel myself going to pieces, and turn my head away as the tears take me. \n\n\"Emily.\" He reaches out a hand, turning my head back. \"Don't cry. I'm here.\"\n\n\"I can't... help... \" I start to sob. I feel him wrapping his arms around me, and before I know it he's got me nestled on his lap, and he's rocking me gently. I don't remember much, just impressions really. The flame of the candles. The ache in my chest. The raw, quiet sobs that rack me. The way he holds me, letting me calm at my own pace, letting the proximity to him and the sound of his breathing slowly help me unwind as it always does.\n\nI scrub at my eyes, and take a juddering breath. It feels like years have passed.\n\n\"How... how long?\" My voice sounds strange, hoarse and raw. I swallow, painfully.\n\n\"How long have I known you loved me? Or how long have I loved you?\"\n\n\"Both.\"\n\n\"I've known your feelings for me forever, Em,\" he says. \"You never treated me the way other siblings treat one another. When we were younger you'd always be more interested in me than in anything else; always shadowing me. As we grew older, I thought that would change. But it didn't. You were always physically close with me, and told me everything. Then there was the day you were attacked.\" He stops here, and takes a breath. \"I don't know if you remember how tightly you clung to me.\" he says, quietly. \"How you begged me not to leave you.\"\n\n\"I don't\" I whisper. \"Most of that day's a blur to me.\"\n\nHe squeezes me. \"Lets just say that after that it was pretty clear where your feelings ran.\"\n\n\"And you?\" I ask, quietly.\n\n\"Since then,\" he says softly. \"I realised I was yours when I reacted the way I did towards those boys. Nobody hurts my Em and gets away with it.\"\n\n\"Your Em?\" I say, smiling weakly.\n\n\"My Em.\" he says. \n\n\"Why'd it take you so long to claim me, then?\" I ask, as I burrow against him.\n\n\"Mostly out of worry that it would ruin what we already have.\"\n\n\"And now?\"\n\n\"Now I don't care anymore. And from the way you've been dancing with me tonight you don't seem to either. So the question I guess I have for you... is whether you'll be happy with me and me alone?\"",
        "I answer him by worming around so I can clench my arms behind his neck and pull him down so I can reach him. And then I kiss him the way I've always wanted to... slowly, gently at first, teasing his mouth with my tongue, then harder, demanding that he reciprocate, shifting slightly against him, feeling him clasp me hard against him, feeling my heart pounding away like a drum as a hot ache fills me.\n\nI break off, panting, and tuck myself in under his chin. He takes a shuddering breath.\n\n\"Wow\", we say, at the same time, and I laugh helplessly. Then I shift slightly, able to feel the obvious effect I've had on him as his penis presses into my thigh.\n\nI wriggle, and he snorts. \"Proud of yourself, Em?\"\n\n\"Exceedingly.\" I say. Then I shift, and drop a hand down along his chest, down past his stomach, to his crotch, where I gently stroke my index finger along the hard bulge of his erection. I hear the breath hiss slightly between his teeth, and my heart thumps hard. I slip my hand into his trousers and under his underwear, and find him hot and hard. He makes a small sound and I feel him throb. Then he reaches down to pull my hands back. \"We've got all night, Em\" he says, gently catching my hand and lifting it to his lips. \"It's still early, and there's plenty of dancing left to do. I don't want to rush this with you.\"\n\nI pout up at him, then gasp as he suddenly puts his one arm under my knees and the other under my arms and lifts me in one smooth motion off his lap. I tighten my arms around him, pulling me in hard against him, and nuzzle his neck briefly. He exhales, then sets me gently down. I arch myself against him, grinding my belly against him, and he slides his hands down my back to cup my bum, pulling me against him. We look at each other, saying nothing, and then he lets go of me and I of him. I straighten out my dress, and he takes my arm. \n\nThe rest of the party passes in a blur. We dance as lovers do, holding one another gently, lost in the music and the sensation of being with the person we love. Eventually people start to head for bed, and David and I share a look. We collect our room key from the reception staff, and climb the long sweeping staircase to our room. David leaves me there briefly while he goes to retrieve our bags, and I spend the time just sitting and staring at myself in a mirror, full of nervous anticipation.\n\nHe returns, and closes the door behind him. I watch him in the mirror, as he places the bags on the floor, kicks off his formal shoes, sheds his socks, dims the lights, and then slowly walks towards me. He reaches out, wrapping his arms around me, and I lean back against him, exhaling the tension I feel as he gently massages my shoulders. Then I stand, and turn to embrace him. He leans forward, and we kiss... if kiss is a good enough word to describe the fireworks that go off inside me as I feel his lips on mine. I whimper, and press helplessly against his body.\n\nHe breaks off, and holds me. I reach up and undo his bowtie, then slowly start to unbutton his shirt. He pulls his arms free, and I spend a few moments just admiring the way his muscles move. I lean in to kiss him quickly, then spin.\n\n\"Unzip me.\" I demand, quietly. His fingers on my neck send shivers down my back, and I can't help the low whimper that escapes me as I feel him slide the zipper down, achingly slowly. \"David\" I whisper, amused, and he plants a kiss on the nape of my neck. I raise my arms and he takes his cue, gently pulling my gown up and off me. He hangs it over a chair, and then runs his hands down over my back. He unclips the pendant and places it in front of me on the dressing table, then puts his hands around me and pulls me back against him. I can feel him hard against me now, and I'm gratified by how ready his body is for me. I meet his eyes in the mirror surface, watching as they dart from my face to my cleavage to my belly and back.\n\nI turn to face him, amused at the flush on his face.\n\n\"Do you like what you see, Davey?\"\n\n\"I always have, Em.\"\n\n\"Want to see all of it?\"\n\n\"More than I can put into words at this time.\"\n\nI chuckle at that, and reach around behind me, unclipping my bra and letting it fall. David's eyes drop naturally to my breasts, and I feel deliciously sexy as I watch him. \"Touch me,\" I whisper, and he hesitantly reaches out. I whimper as he cups me gently, and then moan out loud as he leans forward to gently lick and nuzzle my right breast and nipple.\n\n\"Oh. God\" I manage. He lets me go, and smiles at me. \"All of it,\" he whispers, and drops his eyes. I swallow, then raise my chin. I hook my fingers into the waistband of my stockings and underwear and drop them together, stepping daintily out of the rumpled mess they make. Then I stand again. David watches me, and whispers a quiet \"Jesus Christ\" once I'm done. I laugh, feeling wanton, and, raising my arms above my head, I pirouette for him. \n\n\"I pass muster then?\" I ask, teasingly, lowering my hands to my hips.\n\n\"Em\" he says, shaking his head. \"You are the hottest woman I've ever known.\"\n\n\"I hope you'll forgive me saying that hearing that from you pleases me way more than it should\" I reply, smiling. \n\n\"Can I... touch you?\" he asks, seriously. I know what he wants, and I smile my consent, spreading my feet so he can reach me. He steps forward, and slowly trails his fingertip down my belly and over my mons, to my lips. I close my eyes and groan something that's not English as his finger tickles in over my clit, to my soaking pussy. I hear his own breathing go ragged... and then I feel nothing but aching desire as he penetrates me with just the tip of his finger.\n\nTime seems to stop for a short while as my senses are overloaded. I come back to myself as he pulls away, moaning in disappointment as his finger slips out of me.\n\nI open my eyes, and watch him as he slowly unbuckles his belt. \"No.\" I say. \"Let me.\"\n\nHe stops, and I take over for him. I slide the tongue of the belt out from the buckle, and then free the button of his trousers. I slowly unzip him and slide his trousers down his legs, pulling them free as he helpfully lifts first one then another leg. He's left in tight cotton briefs, and the bulge in them is impressive.\n\n\"Your turn\" I say, playfully, and he laughs. He slowly slips his thumbs into his briefs, then slides them down, freeing himself from them. Then he stands, and poses for me. His erect penis juts proud of him; the analytical part of me appreciates the handsome girth and the obvious virility, while the harlot in me just wants it. I step forward, gently placing one hand on his chest while I slide the other down over his hard belly to gently, lightly, touch the shaft of his cock. He hisses a quiet inarticulate sound as I do this, and I look away from his penis to meet his eyes and smile up at him. I feel mad with desire; I need him more than I need air to breathe.\n\nI plant gentle butterfly kisses down his chest and stomach, then, emboldened, I gently kiss his engorged head. He moans at that, and I smile a wicked smile to myself. I lick around him, then take him into my mouth.\n\n\"Oh God, Emily,\" he whispers. I slowly work as much as I can of him into me, feeling his penis throbbing in time with his racing heartbeat. I place my hands on his hips, holding him, as I stroke him gently in and out of my mouth, my tongue teasing along the line along the underside of his rock-hard shaft. Soon, he reaches down to stop me. I look up at him, puzzled.\n\n\"I don't want to finish yet\" he says, and I release him, smiling. \n\n\"That highly strung?\" I ask teasingly.\n\n\"No, you're just that good,\" he returns, deadpan, and I blush. He pulls me up, leans down, and kisses me hard, forcing me to open up to him with a whimper. I push hard against him, and he drops his hands down along my sides, giving me goose bumps, till he cups my bum and grinds himself gently into my belly. \n\nThen, suddenly, he lifts me. I squeak in surprise, and then forget myself as I feel his hard cock between my legs as he carries me over to the double bed, where he gently places me. I look up at the man I love, melting slightly at the way that he smiles down at me. \n\nHe climbs onto the bed, and I slowly open myself up for him. I watch his face as he looks at me, enjoying the sensation of his examination of my body. He leans forward, bracing himself over me, just touching his chest to mine. My aching nipples brush his soft chest-hair and I moan, arching my waist up against the hard arc of his penis. He holds himself just clear of me, so all I can feel is the head of it throbbing against my thighs. I grumble in frustration, and he shuts me up by kissing me.\n\nDavid is an accomplished kisser. Part of me notes this approvingly as my heart races - he leaves me feeling giddy when he breaks off. Then I shudder, uncontrollably, as he starts to kiss down over my breasts. \n\n\"Enjoying that, then?\" he asks, playfully.\n\n\"Oh god, Davey, I can't... I can't even begin to explain how much\" I mumble. I feel him take one of my breasts in his hand, and slowly he trails kisses down over my stomach. I start to wriggle with need, and he puts more weight on me to pin me down; it's deliciously hot to be possessed like this.\n\nThen his lips reach my mons, and I'm putty. I can't do anything but moan little quiet ohs as he kisses down to my clit; I suffer a full body spasm as he darts his tongue against it, and then feel like I've died and gone directly to heaven when starts to gently lick and suck me. I know I'm making noise but all I can actually sense is how his tongue circles my clit and trails along my inner lips, and how my vaginal muscles contract painfully with each lick. \n\nI feel an orgasm starting to build. Davey changes the rhythm of his tongue and mixes in the occasional quick suck of my clit, and it drives me insane. I plateau quickly and he holds me there, till I'm begging him to stop torturing me.\n\nHe stops, and I moan a desperate, whimpered \"Davey\", before he thrusts his tongue into my entrance. I convulse. He replaces his tongue with first a finger, then two, and he spreads my aching vagina walls as he licks me. It doesn't take me long - tt feels like a meteor hits me right in the centre of my crotch, and my entire body locks as my orgasm crashes down upon me.\n\nIt's a while before I'm able to form a coherent thought. Davey is lying alongside me, his right arm under my head, his left arm gently trailing circles around my nipples. I can feel his penis throbbing gently against my side. I feel deliciously languid.\n\n\"You ok?\" he asks.\n\nI laugh, quietly. \"You really need to ask me that, Davey?\"\n\n\"Just checking, Em. Given the situation it's not an unreasonable question.\"\n\nI roll over towards him, smiling. \"David Anderson. That was sublime. You nearly killed me. And I'd have died happy.\"\n\nHe chuckles, and I watch him for a while. Then I lean in to kiss him, marvelling at the way he pulls me hard against him as I do. I break free, leaning partly over him so I can stare down at him. He crooks a grin at me, and I decide that I'm done waiting for him. I clamber up on top of him, reaching around behind me to grasp his still erect penis. \n\n\"I want you,\" I inform him, seriously.\n\n\"I'm yours,\" he responds. Satisfied that we agree on that point, I smile. I could tease him, I suppose... but there'll be time for that later. Right now, what I need more than anything is him deep in me where he's always belonged. \n\nI lift myself on my knees and scoot slightly backwards, and then bend forward so I can see his rigid cock and engorged head framed between my lips. I place his head against my soaked entrance, then pause, gently rubbing him back and forward along me. I look up, and see the intent expression on his face. He reaches his hands up to cup my bum, and as he spreads me, my lips open and my last vestige of self-control burns away. I slip him into me, stopping only when I grind my lips against his belly. A shivery moan escapes me as I finally get to do what I've always wanted.\n\nHow do I begin to describe what it feels like the first time you make love to the man you've desired your entire life?\n\nHe fits me perfectly, filling me, stretching me. I can feel him hard, throbbing in me. I lean forward to kiss him, and then lie forward on him, content to just feel him in me for now. He's large, and I'm not. I've also not had someone in me for a while, so I need some time to adjust. He clasps his arms around my back, and slowly, achingly slowly, he starts to move inside me. I can feel my lips gripping him tightly. I feel the heat of him under me and in me, and soon I'm covered in a light sheen of sweat. I listen to him breathing, and then raise myself again so I can once more kiss him. As I do so I start to move back against him.\n\nThe feeling of his engorged cock slipping in and out of my pussy is the best thing I've ever experienced, and from the small noises he's making it must be good for him too. I look down, curious to see him - his cock is slick with my fluids, and the sight of it disappearing between my shaven lips makes me moan. I reach down so I can feel his shaft between my fingers, and am made wild by the sensation of it slick between them. David strokes my back and bottom gently, then, as I release him and withdraw my hand, suddenly pushes me up so I'm sitting vertically on him. Deep... god, so deep in me. I groan, and then lift myself off him, then fall back, impaling myself hard on him. \n\nHe arches his back, and I hear the delicious sound of his muttered \"Oh God\". I do it again, loving the feeling of his belly and balls against the most intimate part of me. I look down at him through the wild strands of my loose hair. He reaches up to cup my breasts, squeezing them hard as I grind down against his rigid erection. I cover his hands with mine, then trail my nails down his strong forearms to his shoulders, digging them in and being rewarded with the hiss of his indrawn breath. The soft slap of his belly against me is like the ticking of the metronome of the world; it is a sound that belongs to us only. \n\nDavid strokes my thighs gently, and slips a finger down to where my pussy is swallowing him. He teases around me with a finger, eliciting some moans from me, and then he gently strokes my clit in time to my thrusts on him. I throw back my head and grind myself in circles on him. Suddenly, he puts his hands on my hips, and lifts me off him. \"No\", I moan, but he scoots out from under me, and pushes me over onto my back. \n\nI gasp as he takes my legs and spreads me wide, then exhale suddenly as he moves forward and pierces me. I rake my nails down his back, my own back arched against him, my nipples aching. I clasp my legs hard around his bum as David drives himself deep into my body, possessing, making me his as I've wanted him to for years. I can feel the beginnings of another orgasm building from the simple pleasure of being taken in this way by him.\n\n\"Cant... stop... Em...\" he groans into my ear.\n\n\"Come in me...\" I beg, breathlessly, grinding back against him. \"Fuck me... Fill... me... I... want...\"\n\nI feel his muscles clench and he muffles himself in my neck. I feel him throbbing, feel him driving deep into me, slamming his cock into me, his belly slapping against my thighs, the delicious sensation of being absolutely powerless in the face of my need for him and his need to have me. I whimper with each hard thrust he gives me - deep, fast and becoming faster... then with the final, largest thrust of them all he bottoms out in me, arches his back, and groans as he starts to fill me with his come. I feel it, feel him inside me, spraying my inside, filling me, and I squeak out a wailing cry as he crushes me in his arms. \n\nHe releases me after a short while, and, just as I'm afraid he's about to pull out of me, he starts to move again. His penis has softened slightly, and the shape it forms grinds against my g-spot while the base of his cock rubs my clit. I moan convulsively, and he starts to thrust deeply in and out of me once more. I feel like I'm a ragdoll; powerless to do anything but experience this. \n\nMy impending orgasm is building steadilly, and we are both panting, covered in sweat. I can feel his muscles knotted, his sticky ejaculate all over my lips and thighs, and I want more of it. He drives into me, spreading me over him, and I start to lose sense of everything but him being in me, and my body's need to grind back against him; to have as much of him as I can possibly have.\n\nLightning strikes me then, and I feel my muscles clamp hard around his shaft. I cry out, clenching him against me, and I guess that triggers him too because he grunts and pulls me against him, burying himself in me. I feel him pulsing in me, my vagina and lips squeezing him, milking him as our orgasms peak and then slowly wind down.\n\nEventually, he slips out of me, and I moan in disappointment, despite the incredibly pleasurable feeling of his semen in and on me. He flops over onto his back, and I immediately roll over and worm my way against him. David holds me against him. My pussy aches from our lovemaking, and I gently take his partially flaccid cock in my hand and just stroke it, feeling our mingled fluids on him and wishing he were still hard. He shifts against me, and reaches down to gently stroke my engorged lips; I can't stop myself from whimpering. \n\n\"Whoops, sorry,\" he says apologetically, and I laugh breathlessly. \n\n\"It's ok... just super sensitive is all...\" I whisper.\n\nThen we just lie there and look at one another.\n\n\"Are you ok?\" he asks me, after a while.\n\n\"Still seeing stars\" I chuckle. \n\nHe laughs. \"Seriously, though, Em.\"\n\n\"Yes.\" I curl up against him. \"Right here, right now, I'm perfect.\"\n\nHe kisses me, and then holds me against him. \"Good. I'm glad.\"\n\n\"How about you?\" I ask him, after a while.\n\n\"Well... lets see,\" he says. \"I just went on a date with the hottest woman I've ever met and she was silly enough to let me sleep with her. So I'm doing well\"\n\nI punch him gently, grinning despite myself. \"Liar,\" I say, quietly.\n\n\"Shush, Em. It's true, don't mock me when I'm telling you the truth.\"\n\nI smile into his neck.\n\n\"So now what?\" I ask, quietly, after another moment's silence.\n\n\"Now? A power nap. Then, hopefully, more of this. I've got years worth of fantasies to work through.\"\n\n\"Years worth? You perve.\" I laugh. \n\nHe grins unapologetically. \"That's the problem with having a sister who's a hottie. I'm a guy. I can't help myself.\"\n\n\"If it is any consolation you've been a regular part of my masturbatory fantasies for years too,\" I mumble into his chest. He laughs at that, and gives me a squeeze.\n\n\"So... back to my question,\" I say after a while.\n\nHe rolls onto his side to face me, and gives me a serious look. \"Still want to move in with me?\"\n\n\"Won't that be complicated now?\" I comment, quietly.\n\n\"Less complicated than it was. Now we're at least being honest with each other, right?\"\n\nI nod.\n\n\"I can keep a secret if you can\" he whispers.\n\n\"Not much choice. We'll have to learn to be sneaky.\"\n\n\"It's worth it.\" he says, quietly. \"Anything's worth it to be with you like this.\"\n\n\"Just like this?\"\n\n\"No, silly,\" he smiles. \"Just having you in my life is special. But having you in my life like this... it's all I've ever wanted, Emily.\"\n\nI feel the tears come, and for once I don't try to hide them. Instead I just claw my way in as tight to him as I can, and let him comfort me as I've always wished he could - with the physical proximity of himself and the knowledge that he's mine and I'm utterly, utterly his. David says nothing, he just gently cups my lower back and holds me against him until the shaking passes. He kisses my cheeks dry, and I can't help but smile at his tenderness.\n\nI push him onto his back, and then I climb up on top of him, pausing as I feel his penis lying along his belly under me. I grin down at him, and slide my aching lips slowly along him as I stare into his eyes. He smiles up at me, then laughs. \"Emily, you're dripping.\"",
        "\"Most of it's yours, you know. Deal with it.\" I say with amusement, and he reaches up to pull me down against him. I lie like that, spread on him, and listen to his heart as he it slows and he dozes off, clearly exhausted. My body aches pleasingly, and the feeling of his abused cock nestled between my thoroughly ravished lips delights me.\n\nI try not to worry about what tomorrow will bring; the step we've just taken is enormous and could break both of us if we are ever found out. \n\nBut as I hold the love of my life against me, for the first time in a long, long time I feel at peace with the world and my place in it."
    ],
    "authorname": "onehitwanda",
    "tags": [
        "brother",
        "sister",
        "love",
        "romance",
        "siblings",
        "brother/sister"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/slow-dancing"
}
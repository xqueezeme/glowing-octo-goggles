{
    "title": "My First (Time) Taboo Ch. 46",
    "pages": [
        "Okay this is just a short one to get those people caught up who asked how we all were doing. First of all thanks again for all the wonderful notes, e-mails, messages, etc. I really enjoy hearing from you and your experiences as well. So if you haven't read anything up until now, I wouldn't read this. At least read Chapter 45 first.\n\n*****\n\nSo Jocelyn and I have moved into our apartment, but I'll start a little before that. Mom and I picked up Jocelyn at the airport. When mom and I were waiting she could just somehow sense I was nervous. She leaned against me and held my hand for a bit, and we talked about how our lives were changing. We were both happy and sad of course, but mostly happy. When Jocelyn finally arrived I was so happy to see her I actually cried. We hugged for the longest time, but didn't kiss. We did walk hand in hand through most of the airport, which was nice, and when we finally got into the van and were driving home, we so made out. Kissing her was magical, I was just floating on air, and I looked up after a while and the two of us were just holding hands and smiling and I saw my mom peek back at us through the mirror and it made me smile even bigger if that was possible.\n\nWhen we got back to mom's house Jill, Kristen, and Carmen were all waiting at the door to great her. It was great. They had dinner waiting for us too, and we ate, but we talked for a bit first.\n\nJocelyn felt so welcome right away and at that point suddenly my life was different. Jocelyn moved into my room. Kristen had always had her clothes in the spare room ever since she moved in so that was no big deal. Carmen wasn't really living with us, but she spent the night about fifty percent of the time, so finally my mom just asked her to move back in. For the next couple weeks we lived pretty simple lives. My mom basically was dating her sister, my Aunt Jill. Kristen, Jill's daughter was dating Carmen, and I of course was dating Jocelyn.\n\nSo we are all very open of course, so occasionally we would see the other couples doing something in the pool or maybe even on the couch in the living room, but suddenly we weren't doing group sex things anymore, and there really wasn't any switching partners either. Now I did watch Kristen and Jill kiss one time outside by the pool and sure it got me all wet, but I didn't feel the urge to go crazy with them.\n\nAlso occasionally I would catch my mom doing her morning pounding of Kristen with a strap-on dildo. It honestly wasn't very often, though when it happened they went super hard and there was just so much passion and lust. To be honest that made me slightly jealous, but only that I wished it was me receiving the pounding from my mom.\n\nIt wasn't long before Jocelyn and I had our own place and we were moving in. Her mom came up to help us move, but Jasmine her sister did not. Before the weekend was over I'll admit that Jocelyn and I had sex with her mom. We had been doing really well up until that point of being monogamous. I think just the idea that this was sort of their last farewell, and that her mom was from out of town and she was also extremely emotional that weekend.\n\nIt started with them mostly hugging and some kissing, but soon it became petting and then squeezing and then yea they just started having sex right in front of me. Wendy even looked at me at one time and said, \"I'm sorry Lucy, but you are going to have her forever. I just need her tonight.\" I honestly didn't mind and I enjoyed seeing their passion, but of course Jocelyn pulled me over and soon I was intertwined with them.\n\nHonestly though my favorite part of the entire weekend was when we took Wendy to the airport. It was just the three of us. It was sad for sure, but Wendy actually kissed Jocelyn right there in the midst of everyone. It wasn't like a full make-out session or anything, but it was a very sexy kiss, and one two lovers would share. I loved it that they could do that in public and no one knew they were mother and daughter.\n\nOkay, so the rest of the summer went by and honestly there isn't anything fun to talk about. We did go over to my mom's pool a lot, but we never messed around with anyone, though I'll admit that Lyndsey and I once were talking so close that our breasts were rubbing together and I won't say I didn't think about kissing her, but I didn't kiss her and that is the most important thing, right?\n\nSo once school started for me I was coaching Cheer again and keeping super busy, but my favorite part of the day was when I would get home and see Jocelyn. I think we made love less often, but when we did it was so magical. And also we started having fantasies and dirty talking a lot more during sex. Jocelyn would occasionally surprise me at school as her mom gave her money and she now had a car of her own. (SPOILED, HA!) So the first time she pretended to be one of my students. School was out and I had my door locked and we messed around a little in the class room, but the second time was very wild. I had practice that night and she came and found me in the gym and at first she wanted to mess around with me in the locker room, but I thought that was a bad idea, so as we were walking up to the front of the school we ran into Mandy.\n\nSo Mandy is a secretary in our school in the attendance office and after we chatted with her for quite a while she asked us what we were up to, and she said it in a way that I knew she knew we were going to get frisky. So she ended up unlocking the office and we had this fantasy where Jocelyn was a bad girl and she was acting all slutty and flirty with Mandy at her desk and then I pretended to be the dean and I \"punished\" Jocelyn in \"my\" office. I actually took her back to my classroom as there are no cameras there. Mandy didn't join us, but Jocelyn had definitely gotten her juices flowing.\n\nOh we are just two crazy nuts in love. That was the only two times we did anything at school, but we have had fantasies at home too and some pretty wild ones even for my standards, LOL.\n\nOkay so about school, I have one lesbian cheerleader this year, and she is a very sweet girl. I actually opened up to her and she knows I am a lesbian. We have talks about things and I am happy I can be there for her. She likes a girl I will be coaching in Track next spring so we'll see how that goes. As I know both girls I may try and set them up, although I will be very subtle.\n\nOkay so this is why I am writing this. My mom's birthday was coming up and I have always done something wild for her birthday. Sometimes simple, sometimes a huge orgy, but always something. This year I told my mom that Jocelyn and I would not be attending any orgies that she may or may not have. My mom said, \"If I could have any present, it would be to spend a night with you alone.\" So of course I kissed her when she told me that, and yes it was a hot wet full-on plenty of tongue kiss along with some breast squeezing.\n\nThing is I felt bad afterward and told Jocelyn what happened, and she told me she wanted me to do it. So that was my dilemma. I honestly have been doing my best to just be with Jocelyn and Jocelyn alone, and mostly I don't even think about being with someone else, but this was my mom. And as odd as that sounds my mom was my first lover and she is still in love with me. I actually argued with Jocelyn, and she brought up that we made love to Wendy, and how was that any different? I had no argument other than I pointed out that Wendy didn't live around here and if we start doing this with my mom then how often will it happen and where do we draw the line? Thing is Jocelyn really wanted me to do it. She thought it was important that I be with my mom on her birthday and Jocelyn told me if she went home she would definitely be with her own mom again.\n\nI decided it was okay even though I was trying to turn over a new leaf and be monogamous. It was my mom after all. Once I got it in my head I would do it, it was all I could think about, and I started planning for her birthday weekend.\n\nFirst I told Jocelyn what I had in mind. She loved the idea so much she wished it was her and her mom going on the trip. I am actually surprised how far they've come. When they talk on the phone most of the time it is just like a mother and a daughter talking, a normal relationship, but occasionally Wendy will call her and they will actually dirty talk. It's kind of sexy. So anyway, I called mom and asked her what she thought of my plan and she loved it. So we picked a weekend and I started looking at specific places to stay.\n\nWe were going back to St. Louis like we had done before. That had been such an amazing vacation and I loved it that we were far enough away that we could be ourselves, and yet I also loved it that last time we had been wild and sexual in front of people who didn't know us, but that knew we were mother and daughter. The excitement from that was so unreal, I couldn't wait to do it again. My mom was excited too and we talked on the phone for the next couple of nights.\n\nThen suddenly everything changed on the third night. My mom springs this news on me that Jill and Kristen want to go along too. I at first was completely against it. I didn't want this to end up being some group thing, but then Jocelyn who was listening said, \"It could be a fun mother-daughter weekend. I want to go too with my mom.\" She could tell by my face that I wasn't excited about it, but she grabs the phone from me and starts talking to my mom. \"This could be so much fun,\" she blurted out, and then they were off and I was suddenly just a by-stander.\n\nSo within two days from that, suddenly this was a convention. It went from mom and me to the six of us and then next thing I knew Carol and Kayla were invited and then Lacy and Erin were coming too. On a plus side though we were getting five separate rooms.\n\nI made it perfectly clear to my mom that I didn't want any wild orgies, and she seemed confident that it wouldn't happen and she also expressed her desires to spend a lot of alone time with me. That made me happy. I also talked to Jocelyn about my concerns and she seemed to be on the same page as me and really just wanted a fun mother-daughter weekend.\n\nSo we drove down in my mom's mini-van. Jill, Kristen, Jocelyn, mom and I all were in my mom's van most of the way. It was so fun. Erin and Lacy who had started with us switched to Carol and Kayla's mini-van and rode with them the rest of the way. We were meeting Wendy there as she was flying. Our vans were together the entire way and we had so much fun on the way down. The conversation was great of course, but also we acted a little nutty and flashed the other van and they would flash us back and sometimes we were even more playful. I licked my own nipple a couple of times when Carol would glance over, and she was driving. Once when they passed us Kayla's butt was at the window and my mom laughed so hard I thought she was going to wreck.\n\nThen one time when my mom passed these two women Kristen, Jocelyn, and I all flashed them. I have no idea why we get so wild when we go on long drives, but it's just fun. Nothing sexual went on at all, just harmless fun.\n\nWhen we got to St. Lois, Wendy was already at the hotel. She had shown up a couple hours before us. She was sitting in the lounge when we got there and she was so happy to see Jocelyn. It was so cute how much her face lit up when she saw her, and Jocelyn was just as excited. I felt the same way. I couldn't wait to get upstairs with mom. We all talked for a bit in the lounge and made plans to go out to eat that night, but then we had two hours to kill in the bedroom and as soon as I shut the door to our room I dropped my bags and started kissing my mom.\n\nShe seemed to just take control of me immediately. Our kiss was so passionate, and her arms around me were so strong, and she kind of led me over to the bed, and before I even knew what was happening she had my shirt up and was squeezing my breasts and sucking on my nipples. I just stood there sort of under her spell. Her full lips were sucking, pulling on my hard nipples and sometimes I would feel her teeth too.\n\nI reached down and felt her huge breasts through her shirt and wished we were naked. I started tugging at her shirt, and she jerked away from me and pulled off her top. Her bra looked like it was about to bust. My mom has such amazingly big round boobs. I love them so much and I couldn't wait to attack them, but even though I tried to take control, she would have none of it. She sort of pushed me back on the bed and then preceded to undress while I watched. She took her jeans off first and then her panties, and she was completely shaved for a change. She saw that I noticed. I could tell by how she was smiling at me and she said, \"A fun little surprise.\"\n\nThen finally she took off her bra very slowly and when I tried to reach up to touch them she grabbed my hands and held them above my head and then crawled up on the bed and pinned my hands above my head against the mattress. She kept lowering one of her nipples down to my mouth and then before I could lick or kiss it, she'd pull it out of my reach. I said, \"You are such a tease.\"\n\nShe said, \"How badly do you want me?\"\n\nWhen she said it she glided her breasts across my face. It was almost more than I could take. My heart was pounding, my pussy was soaked, and I felt tingly all over. I tried to suck her nipple, but again she wouldn't let me. I said, \"More than anyone.\"\n\nShe gave me this crazy seductive smile and she released my hands, but I didn't move, she started taking my shorts off. I took off my bra and shirt at the same time, and suddenly we were both completely naked. She took my legs up and pressed them back and I took a hold of them as my feet went up above my shoulders.\n\nShe was still gripping my legs and rubbing her nipples against my clit. I wanted so much more, but I just loved seeing her beautiful face looking at my body. Seeing here desires starting to get to the point where I knew she wouldn't be able to control herself for much longer. I spread my legs a little wider and she ran her hands down to my thighs and began to lick my pussy. At first they were long laps up and down my lips and sliding up against my clit, then she flicked my clit for a while, and then she was trying her best to tongue fuck me, but I just wanted her to suck the hell out of my clit at that point so I actually yelled that.\n\nShe gave me this insanely lustful look, gave me a quick lick and then said, \"Don't move.\" I laid there anxious while my mom found a strap-on in her luggage. The whole while she was putting it on, she just kept telling me how hard she was going to fuck me. She didn't lie. She started slow until she had it deep inside of me, and then she began the serious fucking. I hadn't felt anything like that in a long while, and not only was I grunting, practically screaming while she fucked me, but she was almost as loud as me.\n\nI knew that Jill and Kristen were on one side of us and Jocelyn, and Wendy were on the other, but I wondered who was across the hall. I hadn't seen if it was one of our group or someone else. I admit I thought about that for a bit, and I even tried to cover my own mouth, but my mom yanked my hand away and said, \"I want to hear my baby girl scream.\"\n\nScream I did, and she pounded me until I told her I had a leg cramp. That sucked and I felt bad, but soon I was better and I was bent over the bed with my butt up high and my mom was doing me from behind. Her hands of course weren't just on my boobs, but she was gripping, squeezing, and tugging on them as she continued to pound me.\n\nWe were like animals. I think it was simply the fact that we hadn't been together for so long. All these feelings suppressed for so long had made us so filled with lust. She wanted so badly to please me and I needed to be fucked by her, controlled by her, to be her play thing. I would have done anything she asked me. I would have let her fuck me in the hotel lobby if she wanted. I needed her so badly.\n\nI started yelling, \"Fuck me mommy,\" mostly because I knew that if anyone heard it, how dirty it would sound. I wanted people to know that my mom was fucking me, that I loved it, and that I loved her. The more I yelled the harder she wanted to go, but I could tell she was getting tired. Finally at a point where she paused, I maneuvered out from her dildo, and I pushed her onto her back on the bed.\n\nWe kissed for a long time as I squeezed her breasts. Then I devoured her nipples for a while, before I climbed back onto the dildo. I bounced up and down on it, pounding myself. Her hands were on my heavy breasts and my hands on hers. We stared at each other for a while, but soon my head was drifting back and I was leaning back as I slid up and down on the dildo. It felt so good. We were starting to calm down now. I leaned over and pushing her breasts up to her chin, I licked and sucked her nipples and occasionally she would put her own nipple in her mouth. Watching her suck her own nipples just made me want to melt. It is such a turn on, and I even sucked my own off and on.\n\nFinally I just collapsed on her, and we kissed again. I loved feeling our bodies together. We kept kissing, and then we'd maybe put a hand on the other person's face and smile, or maybe, run a hand through the others hair, and then just kiss again. It was so wonderful.\n\nThen mom said, \"I've missed this so much.\"\n\nWe talked for a while, and then we took a shower together. It was very sensual. We couldn't keep our hands off one another, and we washed each other which was really fun and sexy. By the time we made it down to the lobby to meet for dinner, we were still just as frisky. I was holding onto her arm when we walked off the elevator. Lacy and Erin were sitting on a couch together. Lacy looked amazing. She had on this cute dress that was very revealing. Her cleavage was to die for and it was tight fitting and short. It was a pale blue, and it looked stunning. My mom even said that to her. Erin looked pretty sexy herself. She was wearing black dress pants and this adorable knit tube top. I could never wear something like that as my boobs are just too huge, but she looked perfect, and she has such great skin for her age, her shoulders are gorgeous. She is in such good shape. I was wearing a sun dress and yes the girls were hanging out a little bit. I'm not much for showing them off around town as a teacher. I just don't think that is right, but when I'm away from home I don't mind so much.\n\nMy mom was wearing a sexy dress as well. It was one of those button down ones, where the buttons run all the way down the front. She of course had the top couple not buttoned. Which was one of the reasons why I just couldn't keep my hands off of her. Her breasts are so beautiful.\n\nI was actually surprised that we were the second one down. I felt like we had really taken our time upstairs. Soon enough though the elevator opened again and there was Jill, Kristen, Carol, and Kayla. They all looked great. I love getting dressed up to go out. It is so much fun. Kristen definitely caught my eye. I won't lie to you and say I don't still have feelings for her. That will never change and I know she loves me too. Anyway, she had on such a sexy dress. I don't think everyone can pull off a t-shirt dress. She makes it look so amazing. When you have big 34D boobs and a great butt, and a tiny waist like she does, I suppose she makes everything look great. Hers was adorable though with holes cut out on the shoulders. I loved it.\n\nOddly enough I didn't rush off to her. I was glued to my mom's side. We were sitting close on a couch together holding hands. I can't explain it, but I felt so in love with my mom right then. I just wanted to be her everything that night. I couldn't bear not touching her for even an instant. Still I was smiling at Kristen and she winked at me.",
        "Finally Jocelyn and Wendy came down. WOW! Jocelyn just blows me away sometimes, like literally takes my breath away. She had on the sexiest dress. My mom actually said, \"SHIT!\" when the elevator door opened.\n\nIt was this super short dress that not only showed off her amazing cleavage, but there was this diamond shaped cut out showing off her amazing abs. She is so sexy. Now that was the first time I wanted to leave my mom's side, yet I still was so enraptured by my touch that I couldn't even think about leaving her. Wendy looked pretty sexy too, and she also looked like she had just won a million dollars. Her smile was so big, I would have sworn she was drunk, but as I spoke with her later in the van she was only high on life.\n\nWe went to a great restaurant and everyone loved there food. I sat between my mom and Jocelyn at this large round table. We had the most fun evening all us mothers and daughters and it was just the perfect night so far. After dinner though most of us wanted to keep the party going, but not everyone. Jill seemed exhausted, and also not in the best mood. And as we had suggested going to the lesbian bar that we had been too in the past, Erin didn't seem very excited about it. Lacy on the other hand seemed very excited, which I think made Erin want to go even less. Long story short we did end up all going out.\n\nOn the drive there in our van, I could tell that Jill didn't really want to go. She started saying things like, \"I hope it doesn't get too wild like last time,\" and \"We shouldn't stay long if Erin doesn't want to be there.\"\n\nBut my mom kept it real positive, and Wendy actually seemed to be looking forward to it. Well we were pretty disappointed to find out that the bar wasn't there anymore. It had been such a fun place, we started to brain storm and we got out our phones and googled away. Then Kristen and I decided to call some old friends. We had met these girls here on our last trip. I texted Courtney and she texted Taylor at the same time. I had no reply, but Taylor answered her almost right away. Soon she was talking on the phone with her and then we were driving to meet her at a night club.\n\nI was excited to see her. We had gotten to know her really fast and although at first she had been slightly shocked at our mother-daughter relationships she soon got over it and I felt like we had become close just in that one night.\n\nWhen we pulled in to the club, Jill complained that we had to pay to get in, but I thought she was just making more excuses and I felt bad for Kristen. It was a great place and soon we ran into Taylor and I hugged her right away. She looked pretty much the same as she had 2 and a half years before. And she acted the same too. She even said, \"I see you brought your girlfriend,\" and she winked at my mom.\n\nI introduced her to everyone and she was shocked at how many of us mother-daughter relationships there were, but I don't think Erin understood what was going on or she didn't hear, or possibly she just assumed that Taylor meant that we all were involved in orgies. Erin of course still didn't know about our mother-daughter incest.\n\nWell we had a fun night dancing and talking (shouting) LOL, and we weren't really being too wild, though Lacy was talking (flirting) with any pretty girl she saw. Let me rephrase that EVERY pretty girl she saw. She looked sexy as hell and they were all eager to talk to her as well.\n\nOh we all had girls flirting with us and guys too, but Lacy seemed like she was on the prowl. Erin didn't seem to like it either, but she wasn't saying anything. Then there was this moment where my mom and I ended up at a table with Erin and the three of us were watching everyone else dancing. Erin was starting to get pretty drunk and was having a great time, but she did seem nervous about Lacy. Erin was between us and my mom had her hand on Erin's thigh. I was just dazing off at a really cute girl who was talking to Taylor when I heard my mom say to Erin, \"And here you are between the two of us again.\"\n\nErin took a drink and then smiled really big at my mom and then at me. For the fun of it I put my hand on Erin's other thigh. Then my mom said, \"If Lacy ends up taking a girl back to the hotel, you might have to sleep with the two of us.\"\n\nErin said, \"Oh shit, I hope she doesn't.\" My mom acted hurt and Erin said, \"Oh I don't mean that I wouldn't love to be with the two of you again.\"\n\nI said, \"You just don't want Lacy picking up some cutie?\"\n\nBefore Erin could answer, my mom said, \"Maybe Erin's jealous, and she wants Lacy all to herself.\"\n\nErin just shook her head no and took another drink. Then she smiled and she said, \"Well if you mean this is supposed to be a mother daughter weekend, then yes.\"\n\nMy mom's hand slid up her thigh and she said, \"Well if Lacy brings a girl back to your room then you can have a mother daughter weekend with us.\" Then my mom reached over and slid her finger along the neck of my dress and along my breast, sort of pulling it open more. Erin watched my mom's hand and of course stared at my boobs. Mom pulled until my nipple nearly came out of my bra and then finally let go.\n\nI decided to play along and slid my hand up Erin's thigh as well and said, \"Unless you'd rather sleep with that sexy blonde over there,\" pointing at Lacy.\n\nLacy was dancing with a pretty red head and seemed to be having a great time. Just as we looked the red head's hands began to move around Lacy's body. It was so hot, and Erin didn't say anything she just stared at her daughter. My mom reached over and pulled on my dress again and tugged me half in front of Erin and said rather close to me, \"Or maybe Erin would like Lacy to come home so we could have a mother daughter foursome.\"\n\nMy dress was pulled forward and was smashing my boobs together and I saw Erin staring at them again, but she said, \"Oh no, definitely not that.\"\n\nSuddenly I heard my name from behind me and I turned around. Taylor was standing there with that pretty brunette she had been talking to at the bar. I said, \"Hi\" and scooted back from my mom and faced them, and Taylor and the cute brunette sat down with us at the table. I was actually totally cool with it as I wasn't sure I even wanted to be flirting with Erin. I wasn't planning on going through with it anyway.\n\nThen the brunette says, \"How have you been Lucy?\"\n\nI was so dumb, I was like, \"Great, thanks for asking,\" and had no clue why she even asked me that until she laughed. Then I recognized the laugh and then I like leaned forward and must have looked like an idiot as I stared at her gorgeous face. It was Courtney. The girl we had hung out with the last time we were here. She had changed so much. She used to have short pink hair and now she had just gorgeous straight dark brown hair. It really suited her. She had been a really cute girl, but now she was beautiful. Her hair wasn't the only change, her clothes were more feminine and she wore her make-up so differently. And I could have been wrong, but she looked just more voluptuous. She had had this very athletic shape before and wonderfully firm c-cup boobs. She just looked a little healthier for lack of a better word, and had definitely larger breasts. I was probably looking like a fool when I blurted out, \"Courtney!\" and ran around the table to hug her.\n\nShe laughed again and said, \"Now that is the response I wanted.\"\n\nI must have just sounded like a babbling idiot as I kept complimenting her on this and that, and finally I think I realized how dumb I was sounding and I got embarrassed and went back to my seat. She didn't seem to mind though. We started talking and I all but forgot my mom and Erin.\n\nAfter about fifteen minutes of conversation Erin excused herself to go to the bathroom. Almost immediately after she was gone Courtney asked mom and me, \"So do the two of you still have sex together?\"\n\nI explained to her our entire situation pointing out Jocelyn from a distance. When Courtney looked over at her she was dancing with Wendy and they were getting pretty frisky. Taylor said, \"Do they have sex too?\"\n\n\"Yea, we're kind of on a mother daughter weekend thing.\"\n\nTaylor acted shocked again, but I knew that was just her first reaction, but Courtney again sounded intrigued. I pointed out all the couples, and then I also pointed out that Erin didn't know everything and Lacy and her weren't a couple. Courtney asked, \"So is that what this weekend is about? Are you trying to get those two to join your little club?\"\n\nIt really wasn't and I explained that, but my mom said, \"I think it will happen sooner or later.\" I wasn't too sure though.\n\nSo when Erin came back she and my mom went out to the dance floor, and I kept talking with Courtney and Taylor. Then after a while Jocelyn came over. She wasn't acting jealous, just more interested and how I knew them. I told her the short version, and then she sat and talked with us. I looked out and saw Erin dancing with Wendy and my mom, and I smiled at Jocelyn.\n\nI think Jocelyn took that as an invitation, because she just took my hand and led me out onto the floor. I danced with her for several songs and for a while just enjoyed our ability to be free and show affection in public without worrying. We ended up sitting at a different table alone for a second just kissing and talking, and she suddenly said, \"I saw you and your mom flirting with Erin.\n\n\"Yea mom wants to get her horny. I think she thinks Erin and Lacy will have sex, but I don't think that is going to happen,\" I said.\n\nJocelyn leaned in and spoke close to me and said, \"Well maybe you and Patty should have sex with her again, and mom and I will have Lacy for the evening.\"\n\nI smiled at her devilishly. I know Jocelyn has always been super attracted to Lacy, and I also knew that Wendy and she had never had a threesome with someone, well other than Jasmine I suppose. \"Is that what you want to do?\"\n\n\"Mom has been talking about Lacy all night,\" Jocelyn said. I had a feeling Jocelyn probably had been too.\n\nI just smiled and said, \"I'm game if you are.\"\n\n\"I'm definitely game.\"\n\nShe went out on the dance floor and I followed. She started dancing with her mom and said something close in her ear. Wendy seemed excited afterward, and so I winked at mom and mouthed, \"I think we are going to share Erin tonight.\"\n\nMy mom took Erin's hands and put them on her enormous chest, and I felt my juices flowing. We danced for another couple hours, then said our goodbyes to Courtney and Taylor who I think should be dating, but obviously they can figure that out on their own. We all drove back to the Hotel, I was completely sober so that was no problem for me, and as we were heading through the lobby, I heard Lacy say, \"I think I am going to hang out with Jocelyn for a little bit in her room, mom.\"\n\nErin seemed disappointed, but as soon as my mom took her hand she didn't seem to care anymore. We let them walk on ahead and we actually went up in a different elevator. As soon as the door shut, my mom started kissing Erin. It was sexy watching them kiss, and Erin was touching my mom's breasts over her clothes. I waited a moment and then peeling back my dress and bra, I exposed my breasts and then pulled Erin away from my mom saying, \"I want some too.\"\n\nErin cussed and staring at my boobs for a moment she leaned down and just started sucking my nipples. She was definitely drunk. She hardly hesitated at all even though she knew my mom was watching her attack my body. As soon as the elevator stopped Erin stopped, and I put my boobs away as the door was opening. As I entered the hall, I watched Wendy and Jocelyn leading Lacy by hand into their room. Lacy was smiling so big, and I wished I could have been a fly on their wall.\n\nMom and I led Erin about the same way to her own bedroom. It was my mom's idea. She wondered if maybe Lacy would come back to her room afterwards and she would find us all having sex. I'm surprised Erin took that chance, but she was very drunk.\n\nThe moment the door was closed my mom and I started taking off each other's clothes. Erin stood there watching and stripping herself. As my mom pulled down my panties, she said, \"I bet you can't wait to taste my little girl's honey.\" I remember that because I don't think I've ever heard her refer to it as that, and I sort of giggled.\n\nMy mom led me to the bed, and hooked her finger for Erin to follow us. She did and my mom sat me down and sitting next to me she leaned me back and spread my legs wide. The way she was touching me was turning me on so badly, and Erin seemed to be watching every movement of my mom's hands on my body.\n\nMy mom surprised me. She must have been pretty drunk too, because she slid her hand down to my pussy and setting her middle finger against my clit she said, \"So Erin, do you want to lick this juicy pussy or\" and she moved her hands up my body, \"do you want to suck my daughter's huge boobs,\" and with those last words she gripped my breast and massaged it. I was so crazy horny at this point. Mom touching me and Erin watching with lust-filled eyes was just almost more than I could stand. My pussy was beyond soaked, but it was actually feeling like an intense warmth I hadn't felt before. Almost like a pulsing heat was coming from it. Maybe that sounds crazy, but I felt something weird for sure.\n\nErin said, \"Oh shit, Patty.\"\n\nMy mom leaned down super close to my breast and I could feel her breath on me when she asked, \"Do you want to suck this nipple some more?\" She was squeezing my breast and holding the nipple close to her own mouth. Erin just crawled on top of me. As her face came close to my mom's I thought they were going to kiss. My mom actually leaned a bit closer to my nipple and I thought she was going to suck me herself. I think Erin did also, but soon Erin began to suck my chest. Her hand was on top of my mom's at first, but then my mom pulled her hand away and started stroking my hair. This was all just so wonderful, you have no idea.\n\nI loved feeling Erin's tummy on my pussy too, I would move a little and it felt so sensitive, and my nipples felt so good in her mouth. Then Erin started to go down and my mom had me come up on the bed further. Soon I was leaning against some pillows against the headboard. My mom was leaning against me, her head resting against my breast her hand on my leg pulling it back, while Erin was licking my clit.\n\nI wanted my mom to suck my nipple so bad, but I guess she wasn't that drunk. My mom let loose of my leg for a moment to squeeze her own breast and she even sucked on her own nipple for a moment. Erin watched us both and my mom was sucking her nipple so near my own that I again almost thought she was going to suck mine.\n\nI had a feeling everything my mom was doing was intentional, but I wasn't entirely sure. She finally said while rubbing her breast against mine, \"Oh shit Erin, I loved watching you suck Lucy's big breast, putting that big hard nipple between your lips.\" She was talking to Erin, but I had the feeling she was staring at my nipple when she was saying that.\n\nErin took her tongue away from me long enough to say, \"She has such a gorgeous body.\"\n\nMy mom said, \"So does Lacy,\" and she slid her finger inside herself and started fingering herself hard. I swear Erin started licking me more feverishly after that, and then before long my mom slid down next to her and pulled her off my pussy and started making out with her. They were still between my legs and as my mom kissed her, she would occasionally lick Erin's chin or cheek and be licking up my juices off her face. It turned Erin on so badly, and she actually said, \"Shit do you know what you are doing Patty?\"\n\nMy mom didn't answer. She just kept kissing and licking Erin and moaning a little as she continued to finger herself. Finally they both got like super hyper and started just grabbing each other all over like they were out of control, and my mom practically threw Erin on her back and began to grind on her while they kissed. I decided to slip away and I started putting on the strap-on.\n\nMy mom's butt was looking really good and I enjoyed watching her breasts smashed against Erin's. I didn't quite get the strap-on tightened and my mom looked at me and said, \"Oh no, I'll be wearing that.\"\n\nShe threw me back on the bed. She is so strong, and worked it off of me, and then started putting it on herself. Erin started sucking my nipples again. It felt really good, but honestly I wasn't at all into Erin. The only reason why I even cared that she was there was that I enjoyed having her watch as mom and I teased at one another. Nothing makes me hornier than when someone watches me with mom, especially if they don't know we are lovers.\n\nErin climbed on top of me and I felt her clit against mine and then soon mom entered her from behind. With each pump from my mom, Erin would slide against me. It felt so good and I at first just held Erin tight while my mom rocked in and out of her, but soon enough my hands were up on my mom's huge boobs and I was massaging them. Erin could never have known, but after a while my mom leaned forward into her, and my hands were still on them. Erin popped her head up which had been over my shoulder and she looked at me. She was still very drunk, but she knew what was going on literally behind her back.\n\nShe rolled off of me and looked up at Patty who was on her knees and between my legs. Erin put a hand on my breast and squeezed it, but was staring at Patty. She said, \"You two have been very frisky.\"\n\nI said, \"I just started touching them. I couldn't help myself, sorry, mom.\"\n\nMy mom started squeezing her own breasts and was just staring at me. She lifted her left one up to her lips and licked the nipple. Erin squeezed my boob really firmly, and said, \"I know you two said sometimes accidents happen.\"\n\nMy mom started to get off the bed and I was disappointed. I think Erin was surprise too, but then my mom grabbed my legs and tugged me to the edge of the bed. Then she pressed my legs back and slid the dildo in my soaked pussy. Erin cussed. It wasn't like a \"Don't do this,\" it was more like, \"I can't believe this is happening.\" But I think she just said, \"Oh shit Patty.\"\n\nMy mom fucked me, and I laid there on my back, my breasts rocking back and forth as she pumped me good. She held on to my legs at first, but then leaned forward with her hands on the bed. I watched her beautiful breasts swaying as she rhythmically slid in and out of me. Erin was lying next to me, but above me so that her belly was where my head was. I watched my mom's eyes as she would shift from staring at my eyes to looking up and down my body. She finally hooked my legs with her arms and began to pound me. Her breasts smashed against mine, her breathing heavy in my face. I felt Erin's hand slide down over my shoulder and she gripped my right breast and gave it a squeeze. I was noisy at this point, moaning, and shouting a little, mostly the word, \"yes.\"\n\nErin kept squeezing my breast or my mom's and soon I was cumming hard. I reached up and held on to Erin and I was definitely not quiet. My mom slowed down and I so wanted to kiss her, but I didn't. She pulled out of me and sat between my legs looking down at my body for a moment. I was still holding on to Erin. My mom said, \"I'd like to watch you do that to Lacy, Erin.\"\n\n\"I can't believe you two just did that,\" Erin said. She was rubbing my breast though. She didn't sound disgusted, just shocked. \"Has this ever happened before?\"\n\nI shook my head no, and mom lied, \"Nothing like this, no.\"\n\nErin was so cute. She said, \"Are you two okay?\"\n\nMy mom put her hand on my tummy. It was like electricity. I loved feeling her hand on my skin. I wanted her to just start going to town on me again, but this gentle touch was almost better. My mom said, \"Are you okay Lucy?\"\n\nI shook my head yes and said, \"It felt so good mom.\"",
        "Erin was still cupping my boob and she scooted down the bed and had her face close to mine looking up at my mom. \"It's not like you two really did anything together. It's just a toy.\"\n\nMy mom pushed my leg over and laid down on the bed beside me. I was laying there between them, wanting my mom, but nervous about Erin. It was obvious my mom was trying to get Erin to have sex with Lacy, but I didn't really want that. I just wanted my mom to fuck me in front of Erin. I wasn't really thinking straight. I sat up quickly and startled Erin, maybe my mom too. I pushed my mom on her back and straddled her. My pussy was right above the dildo, and I looked at Erin and said, \"It's just a toy right?\" and I lowered myself on to it.\n\nI love that feeling when it first fills you. It's just so wonderful, but looking down at my mom staring up at me with a slightly concerned look was just so priceless. I started to squeeze my own breasts and rub them against my cheeks and I slid up and down on the dildo. Erin moved in closer to us and she said, \"Oh shit, what is going on?\"\n\nMy mom again said, \"I'd love to watch Lacy and you do this.\" Erin said nothing.\n\nI leaned my head back and just started fucking myself. I was rocking it in and out, grinding against my mom's clit. My eyes were shut, but I leaned forward. I imagined my breasts must be somewhat close to my mom's chest and I nearly collapsed on her, but I didn't. I felt Erin's hand squeeze my breast again and I opened my eyes and looked down at them. My mom was playing with her own chest, and then suddenly she leaned forward and grabbed my right boob and began sucking my nipple.\n\nErin just said, \"Patty,\" and Erin let go of my boob. My mom kept sucking me and I began to fuck myself faster.\n\nI looked at Erin and said, \"You can't ever tell anyone about this.\" She just shook her head yes and then looked down at my mom sucking me. I then said to my mom, \"Oh mom, you make me feel so good.\"\n\nShe started sucking my other nipple then, and I started moaning. Erin said, \"Patty, I could never do this with Lacy.\"\n\nMy mom ignored her and just kept attacking my boobs. I was sort of feeling bad for my mom. She was having a completely different fantasy from me. I was so happy with what was happening, but I know my mom desperately wanted Lacy and Erin to have sex. I think it validates her feelings for me. I don't need that anymore, but I'll admit at first I did. Still I wanted to help my mom out so I said, \"I'm glad we did this mom. I feel so close to you right now.\"\n\nI collapsed on her and as she pulled away from my boob I started kissing her. It was very tender at first and then became very passionate. Erin actually ran her hand on the sides of our boobs as we kissed, so I know it was turning her on. We kissed for a long while before I pulled back, I cupped my mom's breast and squeezed it. I brought her nipple up to her own mouth and we licked it together and then we kissed some more, and then I started sucking her nipple. The whole while I was still fucking myself.\n\nMy mom said, \"Lucy, this is so wonderful.\"\n\nErin was massaging my mom's breasts while I sucked them, and occasionally she would grab mine as well. She didn't seem to mind that we had all but forgotten her, and yet I didn't feel like anything we said or did made her want to be with Lacy. I wasn't sure if there was anything else I could do, but I knew I wanted her to watch me with mom. I wanted her to see how much we cared for one another, how much we lusted for one another's bodies.\n\nI leaned back, arching my back and sticking my chest out and closed my eyes again, fucking myself on the dildo, and said, \"This is so fucking hot.\"\n\nErin said, \"So hot, so wrong.\"\n\nI slid off the dildo and after giving my mom's boob a hard squeeze I crawled around and straddled my mom's face. I was a bit above her, and she wasn't licking me, and I said, \"Your turn Erin.\"\n\nErin didn't even blink, she climbed up on the dildo and slid down on it. Her face was so adorable when it filled her, and she began rocking on it immediately. My mom was playing with her boobs, and I was touching my own. I licked my own nipple and Erin leaned forward and sucked my other one. That didn't last long and she grabbed me by the back of my neck and started kissing me. She was still rocking and drunk and it wasn't the best kiss for sure, but it was fun.\n\nWhen she pulled back, I said, \"I've pictured being with you and Lacy together too.\" Erin looked down at my chest and started rubbing my breasts while I talked. \"Licking her pussy while you lick mine.\"\n\nErin said, \"Too dangerous.\"\n\nI wasn't sure what that meant, but I thought it sounded promising. \"Are you afraid she'd be tempted to taste you, or are you afraid you might slide your fingers inside of her. As I said this I began fingering myself right over my mom's mouth.\n\nErin was rocking on the dildo and looking down at my dripping pussy. \"Lucy, let's not talk about Lacy.\"\n\nI said, \"Okay, and I pulled my fingers out and rubbed my juices on my nipples. Then I looked down at my mom's huge boobs and started rubbing them, spreading my legs just a little more and bringing my pussy closer to my mom's mouth. Erin was watching and she looked like she was about to cum. I leaned forward and whispered to Erin, \"I wish mom was licking my clit.\"\n\nErin said, \"Oh, fuck yes.\"\n\nI lowered my wet pussy down to my mom's mouth and she instantly began to suck on my clit the same moment Erin started to orgasm. I'm not sure she was done cumming before I started. Mom's hands were on my ass now, and she was just rubbing her lips back and forth on my clit so fast. I was sort of shaking and Erin seemed to gain some control and held on to me. My face went into her chest and I made such stupid noises as my mom and Erin held me while I jerked around from the intense orgasm. I finally jerked away from my mom and almost knocked Erin off the back of the bed. My mom just didn't want to stop, but I honestly couldn't take it anymore.\n\nWe all kind of laughed. We were all sitting separately now, but we had a hand on each other and were smiling. I cupped my mom's boob and kissed her mouth, and then I grabbed Erin and kissed her, and then mom kissed her. We snuggled on the bed together and I ended up between them. I fell asleep feeling my mom's hand on my boob and Erin kissing my shoulder.\n\nWhen I woke up, I was on my side. My mom was lying flat on her back her head away from me. I turned around and there was Erin curled up on her side and snuggling with a pillow. I gave her a kiss on her forehead and she opened her eyes.\n\nShe smiled at first and then she said, \"Oh shit, what the hell, what happened?\"\n\nI gave her a funny look and I felt my mom moving behind me. She snuggled up behind me and said, \"Good morning.\"\n\nErin rolled her eyes and put her hand on her forehead and said, \"Wow I think I am still drunk. I can hardly remember last night.\"\n\nI had the feeling she was saying that to give us an out. She might be finally realizing just how far my mom and I had gone, and how dirty it was, and maybe she was ashamed for us. But I wasn't ashamed. I wasn't about to tell her everything, but I was glad that she had watched us.\n\nI said, \"Let me remind you.\" She looked at me like she thought I might attack her, but instead I leaned my head back and as my mom was peering over me, her face was right there and I started kissing her lips and put my hand on her head. It was such a great kiss, and soon I felt her hand reach around me and began to massage my breast. As our mouths disengaged I licked her lips with my tongue and I felt her pull on my nipple. We both looked at Erin and she was just frozen.\n\nI won't lie and say I wasn't a little scared, I was. She could easily tell someone, but I figured as she was now such a part of our circle and how she was cheating on her husband with us, she wouldn't dare, especially since she knew Lacy was having sex with us also. She had too much to lose.\n\nI finally said, \"Remember now?\"\n\n\"Yes, wow,\" she said, and put her head back on the pillow, but was still looking at us. My mom's hand was still on my boob, and she said, \"Sorry Erin for trying to push you into doing something with Lacy last night. I guess I just got so wrapped up in the moment. I never imagined doing all those things to Lucy, but now that it's happened,\" mom kissed me on the cheek and squeezed my breast so hard, \"I guess I just wanted you to share a beautiful moment together like we did.\" I kissed mom again. It had nothing to do with turning Erin on or getting her to do anything. I was just really having strong feelings for my mom. I missed being held by her, kissing her, feeling her warmth, knowing her passion. I never have fallen out of love with her, I just know I can't live that life and have a normal life. It doesn't mean I don't still wish I could.\n\nErin said, \"I could tell early that you two were fighting something. I suppose doing threesomes with so many girls it was bound to happen sooner or later.\" She seemed so calm saying that, and then she just yelled out, \"Fuck, this is crazy.\"\n\nShe actually made me jump, and my mom laughed.\n\nErin leaned forward and looked at both of us, and said, \"I won't tell anyone I promise. I mean look at me. I'm a married woman and I just made love to you. We're all crazy. Shit,\" she yelled again, and she jumped out of bed. \"Shit, did Lacy sleep with Jocelyn last night?\"\n\n\"And Wendy,\" my mom answered before I could say yes.\n\n\"Oh my, gosh, I didn't even think about that,\" Erin said looking stressed out. Erin walked back and forth a few times and then said, \"I have to pee,\" and she went into the bathroom. Mom and I sat up and we kissed for a bit, and then mom got up and started looking for our clothes.\n\nWe were talking about breakfast when we heard the door opening and in walked Lacy. She was wearing the same smoking hot dress from the night before, but she had her shows in her hands and her hair was such a mess. She was adorable. She saw us and gave us a funny look and my mom put her finger over her own mouth giving the shush sign.\n\nLacy smiled again, and mouthed, \"What?\"\n\nMom whispered, \"Erin's in the bathroom.\"\n\nMom and I were still naked and Lacy couldn't resist reaching out and touching our breasts. Lacy whispered, \"Well if you two were anything like Jocelyn and Wendy I'm surprised she can still walk.\"\n\nThat made me smile so big. I couldn't wait to hear what all they did. Erin walked out as my mom reached around and squeezed Lacy's butt and pulled her to her.\n\n\"Shit,\" Erin yelled, \"Lacy, shit.\"\n\nErin was still naked and was feeling very embarrassed. It actually made me feel uncomfortable, but my mom seemed to not even notice. \"It's okay, Erin. Lacy was just telling us about her night with Wendy and Jocelyn.\" Now Lacy looked embarrassed, but my mom didn't stop. She ran her finger up and down Lacy's tummy and said, \"Now we're all grown woman here. We shouldn't be under any illusions to what happened last night and what has happened many times at my home.\" Erin was listening, but she grabbed a pillow from the bed and was covering herself now.\n\n\"We're not all as open as some,\" Erin said, and I decided to come to her rescue.\n\nI took my mom by the hand and said, \"We should probably get dressed and leave.\" And we did just that.\n\nMom and I showered together that morning. I, without asking, dropped down on my knees and licked her asshole and fingered her at the same time. She loved it, and I'm sure even though Kristen probably still does this with her, it was still a big treat to have me do it. After we were clean and dressed I went to go talk with Jocelyn. She was in the shower when I got there and Wendy started telling me everything. She said that her and Jocelyn hadn't really done much together, they caressed one another was about it, but they had focused all their attention on Lacy. In fact at one point Jocelyn was lying on the bed and Lacy was riding a strap-on dildo she was wearing, and Wendy had entered Lacy's asshole with a vibrator.\n\nAfter she had babbled on for a while, I decided to surprise Jocelyn and I peeked in her shower. She assumed it was her mom at first, but when she saw me she hugged me and I got soaked, so I just took off my clothes and jumped in with her. We kissed for the longest time, and she seemed so happy to see me. She told me everything I had just heard, but then she suddenly said, \"You know what, I sort of felt like I was cheating on you at one point.\"\n\nI made a frown face, but I understood, and said, \"Yea, I wasn't into Erin at all to be honest.\"\n\n\"Yea I wish we hadn't have done that. I would have rather had it just be mom and I,\" Jocelyn said.\n\n\"Mom loved it,\" I said. She shook her head and told me Wendy had also. I then said, \"It's my mom's birthday after all.\"\n\n\"True, did you have fun though?\"\n\nI told her how mom and I had made love in front of Erin, and at first Jocelyn looked worried, but when she could tell how much I had enjoyed it she just listened and smiled. Then she said, \"Do you miss being with your mom all the time?\"\n\n\"I love her, Jocelyn. I'll always love her, but if I had to chose between living with her or you I wouldn't change a thing. I love you, and I love what we have. This weekend is just a vacation, a silly perverted romp. And I'm glad you're here with me. Are you okay? Are you wishing we hadn't have come?\"\n\nShe kissed me again, and said, \"I'm great. It's been fun. I just wanted to make sure we were okay.\"\n\nWe kissed again and then we got out, dried off and I put a towel on and grabbed my stuff. Before I could leave their place Wendy grabbed me by the towel and pulled it right off. She thanks me for including her in this fun weekend and she kissed me. She cupped my breasts some while she did and also my butt. Then I whispered in her ear, \"I think Jocelyn would love dome mother daughter alone time,\" and then I left.\n\nWhen I let myself in, I heard grunting. I walked around the corner and there was my mom fucking Lacy with a strap-on. I was surprised I guess. I didn't see that coming. Lacy had come to ask my mom what her and I had done with Erin, while her mom was in the shower. And I guess my mom had different plans. Lacy still had her clothes on, she was wearing shorts that were pulled down to her ankles and her shirt was lifted up revealing her boobs, but was still on her shoulders. My mom was naked.\n\nLacy was facing away from me, and my mom was talking to her. \"She loved watching me fuck, Lucy. I had her on her back and Erin touched her while I pounded her. Then Lucy rode me and your mom played with our chests.\" She went into a little more detail than that, and she just kept telling lacy everything that happened while she fucked her. She wasn't gentle either and Lacy was doing her best not to make too much noise so she could hear my mom. \"I kept telling her I wanted to watch her do things to you.\" \n\nLacy let out a long moan and she dropped down onto the bed burying her face into a pillow. \"And mom got off watching the two of you?\" Lacy asked.\n\n\"Oh she orgasmed when she watched me licking Lucy.\" Ironically Lacy started cumming when she said that. Which just made my mom fuck her even harder and she said, \"What if I was Erin and she was pounding you like this. Would you like that dear?\"\n\nLacy didn't say anything, and I'll admit I was eagerly waiting for her to answer. Finally Lacy said, \"Fuck me mommy.\"\n\nShit. I didn't expect it. I think my mom is a witch, and I don't mean that to be insulting at all, but she certainly can cast a spell on people.\n\nMy mom pounded her for long after her orgasm or orgasms maybe, but then she slowed, for a bit and I said, \"I'm back.\"\n\nThey both jumped, but Lacy more than my mom. Mom pulled out and side hugged me, making sure not to get the dildo on me, and Lacy just rolled over legs spread and staring up at me. Lacy is a beautiful girl with a great body, but for some reason I was just not interested in her. I wanted her to leave so I could be alone with mom.\n\nWe all chatted for a bit, and my mom was still trying to tempt Lacy into even thinking about doing something with Erin, but I stayed out of it. We all got dressed and finally Lacy left and then mom and I just sat on the bed for a while snuggling and talking before we went down for breakfast.\n\nOkay so the whole day we spent together as a group. We shopped, went sightseeing, the usual stuff. Erin would occasionally see mom and me holding hands and give us a look as if she were afraid others would find out our secret. It was kind of funny. When we went swimming at the hotel pool I enjoyed seeing everyone's bodies in their bathing suites. Yum Yum Yum! Then when mom and I were in the hot tub, I was leaning up against her and she was rubbing my pussy beneath the bubbles. It was so fun. There were other people around, but we didn't make it a big deal.\n\nThat night we all gathered in Carol's room for some reason, possibly because they were the slowest to get ready. Erin started talking to me about being embarrassed about what all went on the night before, and that she didn't plan on getting drunk tonight and doing anything with us. I almost think she just says that so that we won't think she is a slut, or maybe she wants me to tell Lacy what she says so Lacy will think she has an excuse for what she does. But honestly I think Erin wants to be slutty. So I joked with her and said, \"Yea, you should go have sex with Carol and Kayla instead.\"\n\nShe said, \"That's not what I meant, but then she was checking Carol out moments later, LOL.\n\nWe went to the same bar, and it was great fun. We danced all night and yes, Courtney and Taylor were there again. I danced with them as well, and talked some. At one point mom and I went to the restroom at the same time, and when I came out of the stall there was Courtney standing there as if she were waiting on me. I was thinking she was going to hit on me, but instead when my mom finally got finished Courtney said, \"So do you two still really do stuff together.\"\n\nI didn't even get my mom a chance to answer. I just acted without thinking. I slipped my hand in the front of my mom's low cut dress, cupped it under her boob, pulled it out and put my lips on her nipple and gave it a kiss.\n\nCourtney bit her lip and her hand went to her own breast. There were two other women in the bathroom. One of them was watching us in the mirror and the other washing her hands didn't seem to notice yet. I started sucking my mom's nipple. Courtney looked around at the other people there and she said, \"Shit you don't have to do this here.\"\n\nI wondered what she had in mind, but I slid my hand up my mom's dress and found my way inside her underwear. Mom just let me play with her for a while until she grabbed me by the chin and we started kissing. When we finished, not only were both of thee women by the sink now both staring at us, but another woman had come in and she was watching as well. My mom's boob was still out and in my hand. My mom's huge boob was a sight to behold alone, but with my other hand down her panties, we were putting on quite a show.\n\nMy mom disengaged from me and I was worried for a second that she wasn't interested, but instead she slipped down her panties and sat right down on the sink counter. Shit now I was nervous. This suddenly seemed so much more than what it was. I crouched down between her legs and started licking her pussy. Courtney walked up to mom and started touching her boob. I'm not sure if my mom told her too or not, but soon she was playing with it and saying, \"Shit, you are so huge.\"\n\nIt suddenly hit me and freaked me out, that someone might come in and snap a picture of us, so I stopped licking my mom, and stood up next to Courtney. My mom gave me a sad look, but I just grabbed her by the hand and walked out of the bathroom. We didn't stop though. We went over to a table in the corner and sitting beside her I fingered her beneath the table, while Courtney sat near us. I made mom cum, and she kissed Courtney shortly afterwards. While licking my fingers clean I looked over and saw that Erin had been watching us. I went over to her and she immediately said, \"Were you just touching Patty?\"",
        "I leaned in very close to her and said, \"I was, I can't believe what we started last night. I think mom thought Courtney would like the show, and apparently she did. We both looked over at them and they were making out.\"\n\nI grabbed Erin by the hand and didn't give her time to think about it. I just took her out on the dance floor and had fun. That night Courtney didn't come home with us, and Erin actually did go sleep with Carol and Kayla. I don't know all the details of that, but I do know that Carol and Kayla did do some stuff together like mom and I did, and it was Erin who told me first, so then I asked Kayla to tell me more. But I'm not going to talk about that much, only that Erin was surprised and started asking me questions about everyone else, and I didn't admit too much, but did say, \"I'm sure Kristen and Jill have messed around some during the orgies.\"\n\nOkay so, Lacy spent the night with Jocelyn and Wendy again, but Jocelyn actually hadn't wanted it, but she also didn't want to hurt Lacy's feelings. I spent the night alone with mom and we had an amazing time, mostly just grinding and kissing and talking. It was my last night to be intimate with her and that's exactly what we did. We didn't go crazy with dildos or get wild, we just enjoyed one another. Don't get me wrong the kissing was very intense.\n\nWendy left the next morning, and soon we were all on the road coming home. Jill drove, and Kristen sat up in the front with her. Jill had told me earlier that they had had the best weekend together. Kristen and Jill had stayed out of all the drama and truly had a mother daughter weekend. I was happy for them.\n\nJocelyn was riding with Kayla and Carol. She didn't see them often and wanted to talk with them. I almost rode with them, but my mom insisted I ride with her. I figured she might have something up her sleeve, but I also thought maybe she just wanted to spend more time with me so I didn't argue.\n\nSo I found out which it was not an hour down the road. My mom suddenly pulls out a strap-on and puts it on herself. I was asking her what she thought she was doing, but she just mostly kept quiet and kept laughing. So when she was done she leaned her chair back and said, \"Okay who wants a ride.\"\n\nWell of course no one moved or said anything. I wasn't about to do anything. It was one thing to do this in the privacy of a room with one of them, but with Lacy and Erin both there it felt awkward, and I mean mostly for them. Erin wouldn't because Lacy was there, and Lacy wouldn't because Erin was there. I was about to say, \"I doubt you'll have any takers,\" when Kristen came crawling back from the front seat.\n\nShe pulled off her panties and lifted her skirt and my mom helped her lower herself on the dildo. Now Erin knew that Kristen was my mom's niece, and that her mother was driving the car, but she didn't say anything. She never even looked Jill's way. She just peered around the seat (as she was sitting directly behind my mom) and watched the dildo go inside Kristen.\n\nKristen leaned back into my mom at first and they moved around some and it was sexy, but soon Kristen put her hands on the front seat and began to bounce up and down on the dildo leaning forward with her forehead against the seat as well.\n\nI was enjoying watching it I'll admit, but I got a bigger kick out of watching lacy and Erin watching Kristen's ass bouncing up and down on top of my mom. They would both peek over at one another every once and a while, but no one was saying anything. Finally Kristen got tired, as it is quite a leg work out and she leaned back into my mom resting.\n\nMy mom squeezed Kristen's big d-cups and I suddenly I was super horny. I wanted that to be me so bad. So when Kristen got off of her, and mom said, \"Who's next?\" I decided to be crazy.\n\nI was wearing shorts so I just started taking them off. Kristen said, \"That's the Lucy I know.\"\n\nBut Erin said, \"Oh Lucy,\" as if she were scared for me. Completely bottomless I scooted over and lowered myself on the dildo. It was soaked from Kristen, as was I, and so it slid in so easily. I leaned forward into the chair and Kristen held onto my hand as I dropped up and down on the dildo fucking myself. I peeked back and looked at my mom and she smiled at me. I knew I was making her so happy, whatever her plan was. I looked back at Erin and Lacy. Erin had scooted across the back bench and was sitting closer to Lacy so she could see around the chair and watch mom and I having sex.\n\nI waited for a moment when no cars were near and I lifted my shirt and leaned back into my mom. She immediately cupped my chest and even pulled on my nipples as I rocked my ass into the dildo. I finally said, \"Yes, fuck me mom. Fuck your baby girl.\"\n\nI was looking back at Erin and Lacy to see their reaction, but pretending to look at my mom. I saw a car coming closer so I leaned forward and began fucking myself harder. The cars passed and my legs were getting uncomfortable so I leaned back again. My mom's hands went right up my shirt and pulled it up and off my breasts. She started to kiss on my neck and I forgot about everyone else in the van for a moment. I loved feeling my back against her big chest and her hands massaging my breasts, but I mostly loved her soft breath on my neck as she nibbled.\n\nI didn't want to get off, but as another car was coming (Kristen told me as my eyes were shut at this point). I almost leaned forward, but I was getting tired so I just lifted just enough to get off the dildo and then slid over to the chair next to mom's. I pulled my shirt down and said, \"Okay who's next?\" looking back at Erin and Lacy.\n\nErin looked blankly at me, and then up at Patty who was staring directly at Lacy. Lacy looked at her mom and then moved forward. She had on a cute dress and she started taking off her panties.\n\nErin said, \"Lacy, don't.\"\n\nBut Lacy said, \"Just don't watch me mom.\"\n\nErin repeated what Lacy said, as if telling herself and then she scooted back further behind Patty so she couldn't see. Lacy lifted up her dress and she sat down slowly taking in the dildo. She rocked back and forth on it for a while, and was making the cutest breathing noises as if it were cold or something, and then she leaned forward and started fucking herself.\n\nMy mom said, \"Yes, Lacy like that, let me see that sexy butt of yours ride up and down.\" My mom kills me sometimes. I know she was just saying that to get Erin riled up and it was working. In fact Erin peeked around and watched her daughter taking it from behind. Lacy has a great butt, and I think we all enjoyed watching her sexy body pumping herself. After a bit, not real long really she seemed to get tired to, because she was soon leaning back into my mom.\n\nMy mom squeezed her boobs over the dress, and Erin was watching every second of it. I leaned forward and sat down on the floor of the van and started to rub Lacy's clit. She let out a deep throaty sound and she put her hands back in my mom's hair. She was being so wild, I was a little surprised, but I shouldn't have been. She had always been more brave than me I think.\n\nWe made her cum and she was really noisy, she then leaned forward after a bit and started pounding herself really hard on the dildo. She was grunting with each drop onto it. She looked back and saw Erin staring at her pussy and she didn't say anything at first. Then when Erin saw her looking, Lacy said simply, \"Mom.\"\n\nErin looked away her face was red and she looked almost frantic. Lacy pounded herself for a while longer, before she crawled off the dildo and back to her seat. Erin wouldn't look at her, she was staring out the window, but my mom said, \"It's your turn Erin.\"\n\nErin said, \"Not likely.\"\n\nKristen said, \"Come on, if Lacy can do it, then so can you.\"\n\n\"That's exactly why I shouldn't,\" Erin said.\n\nLacy was rubbing her pussy staring at Erin and I can only imagine what she was thinking. Everyone was quiet and Erin turned and looked at Lacy. \"I want you to mom. I won't watch.\"\n\nErin was staring down at Lacy's pussy and the fingers that were playing with it. Erin looked away, and then she looked directly at me for some reason. I whispered, \"Be brave,\" and I have no clue if she had already made up her mind or not but she started to undo her shorts. She took them down and got in front of my mom sitting on the seat between my mom's legs, still wearing her underwear.\n\n\"This is so stupid,\" Erin said as she pulled her panties down and then she sat up holding onto the chair in front of her with one arm and holding onto the dildo with the other. Her eyes darted to the back seat making sure Lacy was behind Patty and not watching and then she lowered herself onto the dildo.\n\nShe went from being this nervous aggravated woman to instantly melting when the dildo slid deep inside her. She wiggled on it a little and then started rocking over the shaft. She was grinding her ass on my mom, and Kristen started kissing Erin's fingers which were gripped on her chair. Finally Erin began to really fuck herself, and Lacy of course peeked around and watched.\n\nErin said again, \"This is so stupid,\" but if anything she started fucking even harder then. Lacy was masturbating pretty hard and I slid down on the ground next to Erin and started touching her breasts over her shirt. After some good hard fucking, Erin leaned back into my mom and her shirt went right up from my mom's roaming hands. My mom raised Erin's bra off and her full yet small breasts were soon being squeezed. Erin's nipples were crazy hard, and I leaned forward and gave one a lick, and it made her jump, but not as much as when I began to rub her pussy.\n\nErin started moaning and Lacy leaned forward to get a better look at what we were doing to Erin. Erin was leaning back with her head cocked to one side of my mom's, away from Lacy, and as my mom's hand dropped from Erin's boob, I looked to Lacy and mouthed, \"Squeeze her boob.\"\n\nLacy wouldn't do it though. I leaned over and started sucking Erin's nipple and in the corner of my eye I watched Lacy fingering herself. I'm not sure if she was afraid, or if she just didn't want to go through with it. Her clit was so hard when she started cumming and Erin pushed my hand away from it, but she let me continue to suck her nipple. A car passed us and a middle aged woman looked over and saw me sucking Erin's boob. She didn't stay around and just drove by, but I suddenly was nervous for everyone.\n\nErin was oblivious and I'm not sure my mom noticed either, but Jill said, \"Maybe we should stop before someone drives by with a camera and takes a video.\n\nErin seemed to get nervous then too, and she leaned forward away from my mom, but the dildo was still inside of her. I could tell she was scared, and yet so horny she didn't want to stop. She started fucking herself again, so I turned and crawled back to the back seat and spread Lacy's legs and started licking her pussy.\n\nI felt a hand rubbing my butt and soon a finger slid up my pussy. I didn't even look to see who it was. I just kept licking Lacy's yummy clit. She came really soon and I think she liked watching me getting fingered. After she was done I sat up a bit just enough to turn and look and it was my mom fingering me.\n\nI knelt next to my mom and she slid her finger in me from the front and I started massaging my mom's huge boobs. I suddenly had a strong desire to kiss her and so I just did it. I didn't care what anyone thought. I was very aware at that point that I was having an orgy just like I told myself I wouldn't do, just like I told myself that I didn't want to do, and yet here I was enjoying every second of it.\n\nI felt Lacy's hand on my breast and then she was sucking my nipple. Then Erin leaned back against my mom, and still I kept kissing my mom's amazing lips and she kept fingering me. Erin said, \"Shit, Patty.\"\n\nWe stopped kissing and glanced at her, but then my mom started sucking on my neck and that's when Erin saw Lacy sucking my nipple. When I pulled back Erin watched Lacy suck me for a while.\n\nWe started to get close to a town and Kristen warned us, and so Erin got off the dildo and knelt on the ground next to me. I was between Erin and Lacy feeling Erin's hand on my ass and Lacy's lips on my nipple. My mom was covering up, but watching us. Lacy and Erin both had their chests covered, but mine was still visible. My mom actually said, you better cover up now Lucy.\n\nI just sat down on my feet (Erin's hand almost being sat on), and continued to let Lacy suck my nipple. I sort of twisted so I was facing my mom and turned my head and asked Erin to suck my other nipple. She watched Lacy gripping and squeezing my boob while she nibbled on my nipple for a while, before Erin's hand reached out and squeezed my other boob. Wow, she actually did it. I had both of them sucking me together. It was so sexy. Soon Lacy reached over and started to rub me and then slid a finger inside. I asked Erin, \"I want your finger in me too.\"\n\nShe looked up at me with the sexiest look I have ever seen on her face. She switched her hand on my boob and slid her left one over top of her daughters and soon they were both in me. I kissed Erin, and she let me, and then she became very passionate. I pulled away and started kissing Lacy instead, and Erin was leaning in close watching her daughter's lips on mine, her tongue in my mouth.\n\nThen my mom leaned over and I pulled away from Lacy and kissed my mom. Erin and Lacy were both there close. I could see them in my peripheral vision. Mom and I made out for a while as both Erin and Lacy continued to finger me together, and Lacy continued to squeeze my breast as well. Finally when mom pulled back she said, \"Now you two kiss,\" referring to Lacy and Erin.\n\nLacy looked like she was hungry, and she leaned forward almost desperate for her mother's lips. Erin didn't say anything. She didn't back off either. Lacy was right in front of me just inches from her mom's face and I think I whispered, \"Kiss her Erin,\" or something like that.\n\nErin leaned forward and they kissed, but it wasn't an open mouth kiss. They sort of leaned back just a little and they were both smiling. Erin started fingering me faster and that made Lacy do the same. I was leaning back against the chair behind me and I stuck my chest out far and said, both of you lick my same nipple. Lacy went right in and Erin soon after. Their tongues would touch occasionally, and when I looked at my mom she mouthed, \"Great idea.\"\n\nThen when Erin took my whole nipple in her mouth, Lacy kept trying to get at it, and then soon they were kissing with tongue, right there in front of me. This time their hands practically stopped moving inside of me, but I didn't care. In fact soon Erin's hand came out of me and her wet sticky hand went to Lacy's face and she held her chin while they passionately made out. I honestly never thought it would happen, and now I wondered how far it would go. Well Jill turned the van and the two of them stopped kissing, and then Erin seemed to reconsider. You could see it on her face, but Lacy was leaning farther forward trying to reengage her mother's mouth.\n\nErin looked at my mom almost like she was saying with her eyes, \"See what you've done?\"\n\nI sat up pushing Lacy out of the way and I pulled my mom down to me and started making out with her again. I was hoping this would allow Erin to not only have a breather, but to see that it was okay. When I pulled back from my mom, I told her I loved her and I gave her boob a squeeze.\n\nMy mom said, \"I think we all need to get another hotel room and this time the ten of us all share it.\" (I'll point out that mom was including Wendy even though she had flown home already.)\n\nEverything seemed to calm down, Erin ended up sitting in the chair next to my mom, and I don't remember what she said, but it was basically saying we should all take a breather. Lacy and I sat in the back seat together and we played with one another most of the way for a while before Kristen crawled in between us and we both made love to her.\n\nAfter a while a lot of us were napping, but I heard Jill and Erin talking as they thought we were all asleep. Jill was trying to comfort Erin as she was worried what she had done. I heard Jill say, \"I used to be so nervous and upset with myself, but now I feel like Kristen and I have the most amazing relationship. And I'm completely head over heals in love with Patty. Though I think I have been ever since we were in high school.\" I thought that was so cute and not something I get to hear enough from Jill. Jill is just the sweetest woman ever. I heard Erin say, \"I don't think I could ever . . .\" and either she didn't finish her sentence or I couldn't hear her, but then a second later she says, \"If (husbands name) ever found out he would kill me.\"\n\nJill agreed with that, and then they talked about their husbands for a long time, well Jill's ex-husband and Erin's current. Then Erin talked about Carol for a long time, and I can tell that Erin has feelings for Carol.\n\nOkay so like hours later we were getting to the point where we were nearing Carol's house and Kayla's apartment. I think my mom decided that if this was really going to happen that we needed to push it sooner than later, because suddenly we were all getting out of our vehicle and heading into Kayla's apartment for a stretch as she put it.\n\nI don't think anyone in the other car knew what my mom had in mind, and I'm pretty sure Erin and Lacy didn't either, but I could tell Jill and Kristen did as they were already snuggling with one another walking through Kayla's door. Kayla's roommate wasn't home thank goodness, and I asked Kayla where she might be. She said she'd be at work today, and so as soon as I knew we were safe, I got the party started right away.\n\nI said out loud for everyone to hear, \"Well the mother daughter weekend isn't over yet,\" and I lifted up my mom's shirt and bra, her enormous breasts fell out, and pushing her against the wall I started sucking her nipples. I was forceful. I had my mom's wrists and was pushing her hands against the wall now and really sucking on her nipples with gusto, pulling them with my teeth sometimes.\n\nJocelyn was standing right next to me, and her hand went right on my butt. She was obviously okay with it. I didn't look to see what anyone else was doing I just attacked my mom's nipples for a while, and then I licked up her neck to her lips and started zealously making out with her.\n\nThen my mom suddenly became aggressive. She sort of took me off guard pushing me back and still kissing me she started taking my shorts off, I helped her and we started undressing one another as fast as we could. I was still completely focused on her and had no clue what anyone else was doing, and you know what, I didn't care.\n\nAs soon as we were both naked, mom was sucking my nipples. She had by boobs gripped between her fingers and her mouth was going back and forth between them. I was looking down at her for a while and then I looked up at everyone. No one else was doing anything. I'm not sure if they were nervous because Erin was there, or if they just wanted to watch us, but I wasn't worried about that at all. I reached over and put my hand on Jocelyn's boob (over her shirt), and she immediately dropped to her knees behind my mom and started licking her. That's when Kristen pushed Jill back on the couch, crouched down between her legs and lifting her dress and pulling her underwear aside, she started licking Jill's pussy.\n\nThe funny thing was no one even saw them. They were behind everyone else and they were all watching mom and me. That is until Jill let out a noise and Erin turned and saw them. I think she was blown away but what she was watching. I looked at Kayla and winked and she got the idea. She took off her shirt and pulled Carol down to her perky chest. Carol sucked her and soon put her hand down Kayla's shorts.",
        "The orgy had started and only Lacy and Erin were not involved. They were just standing there watching everyone, but Lacy was at least fondling herself over her clothes. When Carol laid Kayla on the floor and started licking her pussy that is when Erin looked the most shocked. Here were all these mothers and daughters all having sex right in front of her. I can't imagine what she must have thought. I whispered to Jocelyn to go get Lacy, and she did. They had sex right on the floor not ten feet from where Erin still stood frozen.\n\nErin was watching them, but trying not to make it obvious. When I finally got Erin's attention my mom had already dropped to her knees and was licking my clit. I pointed at Carol and Kayla and mouthed, \"Go be with Carol.\"\n\nErin hesitated. I had to say it again, before she even started to move. She looked down at Lacy who was pulling at her own nipples while Jocelyn licked her pussy and Erin paused. But then she started taking off her clothes and rushed over and began to touch Carol's butt. After a while she was sucking Kayla's nipples and talking to Carol who continued to lap up Kayla's pussy.\n\nMom was about to make me cum, so I pulled her up and kissed her and then thanked her for a wonderful weekend. She said, \"The pleasure was all mine.\" Though it was so not, LOL.\n\nAnyway so we started talking about how we could get Erin and Lacy to have sex. It was obvious at least to me that Lacy definitely would do it, and I think Erin was coming around to the idea. She was certainly fixated on Lacy as she kept looking over at her.\n\nSo my mom went over and started making out with Erin. Erin of course attacked my mom's boobs (who could blame her), but soon my mom had Erin on her back on the floor. They were grinding for a while, before my mom crawled up Erin's body and sat on her face. My mom was leaning against Carol's butt and fingering her some. I rushed into Kayla's room and grabbed her strap-on that she keeps near her bed. I put it on as fast as I could and then I entered Jocelyn who was still licking Lacy. I didn't fuck her long. As soon as Lacy orgasmed, I pulled out of Jocelyn. I then turned Lacy over and entered her from behind (but in her pussy). I did her for a while with her just laying down, but then I pulled out and repositioned her doggy style. She was leaning forward between her mom's legs.\n\nI just started pounding her. Lacy was moaning and grunting and I was trying so hard to make her cum again. I leaned down over her with my hands on her boobs and I nibbled on her ear and said, \"Lick that pussy.\"\n\nI am quite certain she knew it was her mom's. She just looked at me, but didn't say anything. I said it again, and she looked down at her mom's dripping pussy, and just for a moment I thought she wouldn't do it, but then she just leaned down and started licking Erin. I backed off on the intensity of my thrusts and allowed her to really devour her mom. She acted like she was starving. She couldn't get enough of it and she was spreading Erin's legs and just attacking her with everything she had.\n\nErin was enjoying it, but she couldn't have known who was licking her with my mom sitting on her face. I wondered if she suspected. I wondered if she even hoped, but when she orgasmed, my mom lifted off her and suddenly she was staring down at her daughter who was covered in her cum.\n\nErin just said, \"Lacy,\" but nothing else and I started fucking Lacy really hard. And maybe it was a combination of her mom's glare or my pounding, but Lacy started cumming again. Erin was just staring at her daughter's face. I wish I could have seen it myself, but Erin's was priceless. Her emotions were coming through. She didn't look afraid, but she looked like she was thinking really hard. She definitely had a look of lust. That I promise.\n\nAfter a while I pulled Lacy up and began squeezing her breasts and sucking on her neck, but I was watching Erin the whole time who just laid there. My mom had already moved on to someone else.\n\nI said, \"Erin come here.\" She shook her head no, but she rose up anyway. She was like in a daze. I reached and grabbed Erin's hand and brought it up to Lacy's breast. Lacy just darted in and started kissing her mom. And to my delight Erin kissed her back and this time with tongue. I pulled out of Lacy and let them go, and I found Jocelyn and my mom. They were already watching Erin and Lacy and smiling. I entered my mom and started fucking her hard, but we kept an eye on Erin.\n\nSoon enough Erin was sucking Lacy's nipples and even fingering her pussy. They had broken through the wall and were finally one of us. I admit I was a little worried for them, but I was also so very happy for them.\n\nThe orgy lasted for about another hour before we all jumped in my mom's van and drove home. Erin kissed Carol goodbye and I swear I heard Erin say, \"I love you, call me,\" but I didn't ask her about it later.\n\nI did talk with Erin and Lacy the whole way home as well as did everyone else. They were actually really doing fine with what happened. I mean Erin kept saying stuff like, \"Oh I'm a horrible mother,\" and Lacy would say things like, \"I can't believe I ate my mom out,\" but I could tell they had enjoyed it, and they really asked us lots of questions about how we all got started doing this. Erin was super surprised when my mom told her she'd been making love to me for years. She thought we were quite the actresses, and we told them pretty much everything. We even told them Carol and Kayla's story which was similar to theirs, and we told them about Lyndsey and Denise as well. Erin made several comments like, \"Well Patty I can see why you couldn't keep your hands off Lucy.\" To which my mom would say, \"I don't know how you've been able to resist Lacy for so long.\"\n\nIt was a great talk really, and they certainly had some doubts, but they also felt pretty good about everything. When we finally made it back to my mom's we helped Lacy and Erin load their luggage into their car as well as Jocelyn and my bags into ours, but then we all talked so long on the driveway that we ended up going inside to my mom's. We didn't have sex, though I honestly thought we were going to. There was definitely some flirting for sure. Lacy told Erin she was going to miss her when she went back to school, and I can just tell they have a whole new relationship now.\n\nAfter a while Carmen came over and I liked seeing Kristen get excited to see her. They have a great thing going, and I am very happy for them both. So everyone said their goodbyes and then Jocelyn and I drove to our place. Jocelyn and I talked for a long time about the weekend, and we looked at it as just a fun adventure, and not something we planned on doing all the time.\n\nThat night mom called me on the phone. She told me she missed me already and I did miss her too. As much as I love Jocelyn and as much as I know I could only be with her, the fact that I know she is okay with me occasionally going crazy like we did this weekend makes us not feel like we have totally changed our lives. We love one another. We have chosen to live differently than we were, but we know that we don't get jealous and that we can still have our fun and go right back to what we now consider normal.\n\nOkay so another couple months have passed. Lacy has come home from college just twice and Erin and Lacy both went over to my mom's and had sex with my mom and everyone including Carmen, Lyndsey, and Denise. Jocelyn and I did not go over for either orgy. We are just enjoying one another. I'm sure we would have had fun, but neither she nor I really wanted to go. That said my mom and I did hook up once alone. She and I went shopping and when she dropped me off, she came inside and the two of us had sex. It was amazing and I told Jocelyn as soon as she came home.\n\n*****\n\nThanks again everyone for reading, and I always enjoy your comments and e-mails. Love you all,\n\nLucy"
    ],
    "authorname": "Lucy_P",
    "tags": [
        "mother",
        "daughter",
        "orgy",
        "lesbian",
        "dildo",
        "strap-on",
        "sisters",
        "taboo",
        "big boobs"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/my-first-time-taboo-ch-46"
}
{
    "title": "The Assassin's Bride Ch. 09",
    "pages": [
        "Hey hey. Sorry for the wait! I commented previously this is the last chapter followed by an epilogue. However, there was too much to wrap up and I didn't want to delay it further. I.e. there will be chapter 10 instead.\n\nHope you enjoy. As always, interested in votes and feedback :)\n\n***\n\nCarina snuggled into the male bulk by her side. Then her eyes drifted open and focused on the expanse of Carlos' bare chest. At some point in the night, he'd removed his shirt.\n\n\"Oh,\" she breathed, wondering how to extract herself. The midnight-blue cocktail dress gripped her body in a displaced twist, having naturally shifted while she slept.\n\nCarina managed to sneak from Carlos' embrace without disturbing him and stood by the bed, observing his sleeping face; handsome, faintly lined from rough years, but vulnerably peaceful. It almost went against nature to witness calm serenity on the face of a man so dangerous, but it certainly wasn't new to Carina. She generally found herself integrated into the inner circles of lethal, powerful men and privy to their gentler moments.\n\nCarina's attention moved to Carlos' broad chest, gently rising and falling with each breath. He was bulkier than Eduardo; his solid muscle symbolic of the fact he did much of the heavy lifting where it came to their business.\n\nEduardo and Michael were the charismatic pair; negotiating salesmen. But where Carlos lacked charm, he made up for it with level-headedness. He was an excellent delegator who oversaw the practical aspects of the operation, and his disciplined lifestyle made him more reliable for uglier tasks. When Carlos had to get something done, he was not easily distracted.\n\n\"Enjoying yourself?\"\n\nStartled to be caught perving, a hot blush filled Carina's cheeks at the mischievous delight on Carlos' face. She'd seen his shirt off in beach settings where he relented to peer pressure from 'The Terrible Three' -- his nickname for her, Eduardo and Michael.\n\nBut she had never seen Carlos relaxing in bed, after spending the night together. And now there was no Eduardo, no Michael and no buffering presence to dilute any tensions between them. As far as Carlos was concerned, it was just the two of them together.\n\n\"I...I was...\" Carina shook her head to recover. Since when did she struggle with a comeback?\n\n\"Wow, Carina. I have never seen you blush like a schoolgirl,\" Carlos teased, folding his arms behind his head as he considered her.\n\n\"I am just embarrassed about last night,\" Carina retorted, mustering some confidence in her voice as she went for the exit. \"I will see you at breakfast.\"\n\n\"No. Come here,\" he softly ordered.\n\nHeart suddenly thumping, Carina slowly turned back and approached the bed. \"Why?\" she queried, concealing her unease. \"I am too hungry to waste time admiring your muscles, Carlos.\"\n\nCarlos burst out laughing. \"Come here, brat.\"\n\nPouting, Carina knelt on the bed.\n\n\"Closer,\" he beckoned.\n\nWith an impatient huff, she edged close enough to be drawn into a hug.\n\n\"This is like a dream,\" Carlos sighed deeply, tightening his embrace. \"You were very naughty last night,\" he murmured into her hair. \"What would you like for breakfast?\"\n\nFeeling smothered against the heat of his chest, Carina shrugged. \"Eggs, the way I like them?\"\n\n\"Done.\"\n\nHis hold slackened, and Carina clambered to her feet, pausing by the suite door. \"Carlos?\"\n\n\"Yes?\" he answered, still watching from the bed.\n\nCarina frowned as various questions circled her mind. She had to tread carefully. \"What are we doing today?\"\n\nCarlos gently smiled, reminded of the past when he scheduled everything for their group. \"After breakfast, I have some work things to do. The day is yours, but no sunbaking.\"\n\n\"Why not?\"\n\nCarlos arched an eyebrow with a look that said, 'you know exactly why.'\n\nAnd there it was - the start of Carlos' reign. Carina grit her teeth and tried not to look mutinous. \"I am not threatened by Gavin.\"\n\n\"Neither am I, but you will respect my wishes.\"\n\n\"If you say so,\" Carina said sweetly, and forcefully slammed the door behind her.\n\nThings had noticeably shifted overnight. Carlos' usual protective manner had altered to something distinctly flirtatious. There was always affection, but now there was an intimate slant to it. Sexual dilemma aside, Carina realised Carlos might treat her better than Eduardo, but he would also be stricter. She had to get out.\n\nCarina bit her lip and frowned at her door, wondering if Gavin could save her from Carlos.\n\n\"I wondered if you'd come back.\"\n\nWith a gasp Carina turned to stare up at Gavin, who unsmilingly walked her into the suite.\n\n\"I... What are you doing here?\" Carina squeaked, stumbling back onto the bed.\n\nGavin ignored her question, clearly angered about something. His eyes raked her dishevelled dress of the night before. \"Do you know his plans for today?\"\n\n\"Breakfast... T-Then he has w-work,\" Carina stammered, completely thrown off by Gavin's sudden appearance and strange mood. If she didn't know better, it would seem he was upset with her.\n\n\"What kind of work?\"\n\n\"They never... He never tells me,\" she answered, nervously swallowing as Gavin sharply watched her face, his jaw tensed as though on the verge of a confronting question. \"What's wrong?\"\n\n\"Nothing. I can't be caught here. I'll see you at breakfast,\" he said curtly, and slipped from the room. \"Keep doing what you're doing.\"\n\nThe parting words floated back as the door closed behind him. His tone was quietly scathing, even disgusted.\n\n\"Oh!\" Carina said indignantly. By the time she opened the door to counter the insult, Gavin had vanished. \"Quick bastard,\" she mumbled.\n\nRolling the cocktail dress into an angry ball, she threw it across the room and flounced into the shower.\n\nIt wasn't fair. Gavin told her to seduce Carlos. Now, it was like he'd lost respect for her because she succeeded, without giving her a chance to explain she didn't even fuck Carlos. Not that she should need to defend herself!\n\n\"Men, and their fucking double standards!\" she snarled, turning the water to full heat.\n\nExiting the shower, her foul mood continued as she opened her cupboard to glare at the contents.\n\n\"I'm not threatened, but no sunbaking. Seduce him, no, don't seduce him,\" she mimicked in childish tones, skimming the items.\n\nSo, Carlos didn't like her being provocative, and Gavin was irked she got close to Carlos?\n\nShe had ways to hit back.\n\n****\n\nCarlos froze with shocked disapproval and Gavin choked on his juice when Carina haughtily entered the dining area. The guarding men gaped, momentarily forgetting the purpose of their presence.\n\nIn a transparent white kaftan, Carina was as good as naked. Her firm breasts were clearly visible through the delicately thin fabric; nipples hardening as the material lightly shifted across her skin with movement. Though she appeared nude beneath the sheer covering, closer inspection would reveal she wore the tiniest white G-string. The scant clothing was offset by a pair of outrageously high-heeled white patent stilettos.\n\nCarina's flawless complexion needed no enhancement, and the fresh-faced look was a charming contrast to glossy red lips. With lustrous dark hair tumbling freely across her shoulders, she looked the very definition of 'Sexual Goddess'.\n\n\"Good morning Carlos, darling!\" she sang, wrapping her arms around the outraged man and pressing a big smooch to his cheek.\n\nWith an insolent ruffle that set Carlos' black hair on end, Carin took her seat beside him and smiled at her breakfast, seemingly ignorant of the stunned group of men surrounding her.\n\n\"C-Carina,\" Carlos said hoarsely, oblivious to the red pout-mark on his face. \"What the Hell are you wearing?\"\n\n\"Oh, this old thing?\" she laughed, tossing her hair. \"I don't even remember where it came from.\" Dismissing Carlos, she picked up her knife and fork, then looked up at Gavin's gobsmacked countenance.\n\n\"Oh, good morning, Gavin,\" she said innocently, as though just realising his presence.\n\nWith an effort Gavin tore his gaze from her incredible breasts; rosy nipples pointing right at him through the see-through shirt-dress. Reminding himself to breathe, he held his tongue and watched the gathering storm on Carlos' face.\n\n\"Mm.\" Carina swallowed her first bite, appearing unaware of the room being at a standstill.\n\nRecovering, Carlos abruptly stood from his seat and seized Carina's elbow. \"This is not how you dress for breakfast.\"\n\n\"Carlos!\" she admonished, playfully jabbing his hand with her fork. \"You're making a scene in front of our guest!\"\n\nClearly incensed, Carlos took a deep breath. \"Excuse us, Gavin.\"\n\nBefore Carina could manage another mouthful, she was lifted from her seat and dragged from the room, leaving an awkward silence in their wake.\n\nIn the corridor, Carlos pinned her to the wall. \"Explain yourself.\"\n\n\"Explain what?\" she said petulantly, squirming against his chest.\n\nCarlos caught part of the silky kaftan between his fingers. \"This.\"\n\n\"Umm...\" Meeting his severe gaze, Carina tried not to giggle at the shiny kiss on his cheek.\n\nAs she continued to look cheekily thoughtful, Carlos felt his patience and libido simultaneously slipping. \"This is about the sunbaking?\" he growled.\n\n\"I don't know what you're talking about,\" Carina slyly answered. \"Why would you stock my cupboard with clothes I'm not allowed to wear?\"\n\n\"I was not expecting to play Host to an outsider, smartass.\"\n\n\"Outsiders were never a problem-\"\n\n\"Not with three of us guarding you,\" Carlos grimly interrupted, his eyes dark with anger as he recalled Michael was often tasked with watching over Carina. \"Go and change.\"\n\nBefore she could argue, Carlos pinched her jaw to ensure he had her full attention.\n\n\"If you refuse, I will spank you in front of the men and the guest you are so Hellbent on teasing. Then I will lock you in your room, until lunch. Am I understood?\"\n\nCarina grimaced. That consequence would be very humiliating, and she knew every male in the next room, Gavin included, would enjoy the spectacle.\n\nMischief aside, she understood the basis of Carlos' ultimatum. Whilst he doted on her enough to tolerate playful disrespect, she was challenging his authority in front of a stranger.\n\nCarlos never compromised on authority and he was not known for being a pushover. In fact, he was distinctly known for being as strong as his word, and more than one unfortunate fool left the world on this lesson.\n\nWhether Carina rebelled or behaved, Carlos would not be disrespected nor back down on his standards of propriety.\n\n\"Am I understood, Carina?\" he repeated, half-irritated and half-mesmerised by her beautiful eyes.\n\n\"Yes,\" she said sulkily, and her face was released. \"Eduardo let me wear what I want,\" she muttered in a grumbling aside.\n\n\"I am not Eduardo. If you act like a child when we have company, then I will treat you like one.\"\n\n\"Fineeee...\" Carina tried to loop her arms about Carlos' neck, but he seized her wrists and drew them to her sides.\n\n\"Manipulation will not work, either. You can be your bratty self in private, but do not give me trouble in front of Gavin again. Am I clear?\"\n\nGlaring at his chest and feeling a rather hefty erection nudge her hip, she resentfully nodded.\n\n\"Good. Now, go. And don't you dare do what I know you are thinking about doing,\" he warned, narrowing his eyes when she looked offended. \"I am well-versed in your cheeky ways, Carina. If you come back in a similar outfit, I will follow through with the punishment. Do not test me.\"\n\n\"Fine!\" she snapped, peeved that he knew her nature so well.\n\nSo much for teaching the men a lesson.\n\nCarina stalked off, ensuring the kaftan caught under one hand to give Carlos an explicit view of her taut behind in a rudely provocative gesture. But her mood was mostly appeased by the fact he was going back to the men with a bright red mouth-print on his face.\n\nTen minutes later, Carina returned looking sensibly attractive in a knee-length white skirt and sky-blue blouse. With his cheek cleaned of lipstick, Carlos brusquely nodded approval with a glimmer of humour in his eyes that hinted she was forgiven for the makeup transfer.\n\nGavin had the gall to grin. \"That blue is lovely on you,\" he complimented her, still grinning when she shot him an icy glare.\n\nOn this rare occasion, Carlos agreed with Gavin's humour. \"She was always a mischievous tease,\" he chuckled, pinching her cheek. \"And she knows I adore her.\"\n\nFeeling thoroughly humbled, Carina jerked her face away with a scowl and resumed picking at her breakfast.\n\n\"What do you have on for today, Carlos?\" Gavin asked, leaning back in his chair.\n\n\"Business,\" Carlos replied, sipping his espresso, his amused gaze still on Carina's sullen face.\n\n\"I have to say, this is by far the largest leisure-yacht I have ever boarded,\" Gavin said conversationally, his blue eyes curiously moved about the dining area.\n\n\"It was not originally designed for leisure, Gavin.\"\n\nGavin nodded politely as his juice was refilled. \"I wouldn't be surprised if it contained a weapon's hold,\" he said casually.\n\nCarlos smiled calmly; his eyes turned hostile. \"I would be very surprised if you had not been on a vessel containing one.\"\n\n\"Like you, I am a man of worldly experiences,\" Gavin beamed, and stretched his arms upward, not noticing Carina's eyes glued to his flexing biceps. \"I don't suppose I could pay Michael a visit?\"\n\nCarina blinked, not accustomed to hearing Gavin use the phony name.\n\nCarlos sighed dismissively. \"I am afraid that is out of the question.\"\n\n\"No problem,\" Gavin shrugged, finishing his juice. \"I might challenge Carina to a game of pool.\"\n\nCarlos stiffened, and for a moment it seemed he would veto the suggestion. Then he relaxed with a smile Carina knew was fake. \"I don't have a problem with that. Watch out, she is quite good.\"\n\n\"I'll enjoy the challenge,\" Gavin politely replied, and excused himself.\n\nCarina looked up to find Carlos shrewdly watching her. \"Be careful,\" he warned. \"You have already pissed me off once today.\"\n\nCarina looked bored and continued to play with her food.\n\n\"I did not enjoy Gavin pointing out the red stain on my face,\" Carlos lectured. \"I know you love pranks, but do not get carried away with them.\"\n\n\"And I thought Eduardo was overbearing,\" Carina complained, rolling her eyes and pushing her plate away.\n\nCarlos smiled sadly. \"We were different men, and I suppose loved you in different ways. We certainly had our disagreements about you over the years.\"\n\nCarina looked away, remembering what Michael shared about Carlos' conflicts with his brother. The times Carlos protected her from Eduardo's crueller whims.\n\nAn uncomfortable blush stole across Carina's cheekbones as she recognised Carlos' drunken prediction when he tried to rape her was manifesting - she was like an inheritance from Eduardo. But seeing Carlos in an authoritative light, as her sole owner, was requiring more adjustment than she expected.\n\n\"I thought you were going to tell Gavin to 'fuck off',\" she said, casting a searching look his way.\n\nCarlos' dark eyes turned cold. \"I was. But I suppose you need entertaining, and it will be an easier way to keep an eye on both of you.\"\n\n\"What business do you-?\"\n\n\"Do not trouble yourself with that,\" he interrupted, his hand covered hers. \"If you would rather stay in your suite, that is fine.\"\n\nCarina hesitated. \"Is your business to do with Michael?\"\n\nCarlos looked away irritably. \"Yes, Carina.\"\n\n\"I have a right to see him, Carlos.\"\n\n\"No.\"\n\n\"But-\"\n\n\"I said 'no', Carina.\"\n\nShe angrily withdrew her hand. \"He took your brother, but he took my lover, and much more. So, unless you can tell me Michael imprisoned and repeatedly forced his cock inside you, I think my claim on him might be even greater than yours.\"\n\nAt her sarcastic tone, Carlos turned with such ferocity that Carina inwardly quaked but didn't back down.\n\n\"You were always so delicate with arguments,\" he ground out, rising from the table. \"Fine. Let's go.\"\n\n\"R-Right now?\" Carina faltered, feeling suddenly weak as Carlos pulled her to her feet.\n\n\"What's the matter? You didn't think I would say 'yes'?\"\n\nCarina gulped. No, she didn't think he would allow it right away. Now, she was scared of what she didn't know. Would Michael be half-tortured and unrecognisable? Would he be healthily arrogant and mock her? Which would be worse?\n\nCarlos roughly escorted her further below deck, practically carrying her along when she stumbled. But Carina's initial trepidation was steadily being replaced with an anger to match Carlos'.\n\nThere was certainly new friction developing between them. Being under Carlos' control was strangely different to the past, when he might purse his lips with disapproval but otherwise not interfere with Eduardo's decisions unless they were outrageous. When he did intervene, it was always in her defence. But now that he was in charge and considered her his woman, he was taming her his own way.\n\nBut Carina was wilful, disobedient and spoiled. The dynamic with Eduardo worked, despite their passionate fights, because of their explosive chemistry. Thus far, Carlos had not taken her to bed. He could not bribe or appease or punish her with sex, or a denial of it.\n\nIf Carlos pressed her to the wall, ran his hand up her skirt to caress the heat between her legs and threatened not to fuck her brains out after dinner, Carina's temper would have been rattled. Given her emotional state of flux and conflicting feelings about Carlos, she may not feel compelling desire, but she would certainly be startled into obedience.\n\nThe two guarding men straightened with quick surprise and stood aside when Carlos appeared with Carina in tow.\n\n\"I want to see him alone,\" Carina hissed, pulling her arm free and returning Carlos' glare. \"What are you afraid of?\"\n\nThe guarding men feigned disinterest, but keenly awaited Carlos' answer.\n\n\"As you wish,\" he quietly snarled. \"But later we are going to chat about your attitude.\" He opened the door first to check Michael was seated on the opposite side.\n\nThe moment Carina stepped into the room she felt a wave of anxiety and had to force a deep breath through her lungs. Carlos remained outside with the others.\n\nMichael's shock quickly wore off, his chocolate-brown eyes smouldered with a wicked glint that made Carina's heart ache and skin crawl at the same time.\n\n\"You wanted to see me, mi amor?\" he said silkily, sitting with straight confidence against the wall, his arms behind his back and ankles cable-tied.\n\nBesides a healing bruise on his face, Michael hadn't changed much. He was the same good-looking, athletic bastard who had been her best friend before deciding to imprison her on an island and force her into his bed...\n\nCarina broke eye contact. \"Yes.\"\n\n\"Why?\"\n\nCarina shrugged in a lie. She wanted to see with her own eyes that he was alive. She didn't understand why.\n\n\"You look good enough to eat, Carina,\" Michael smiled, and licked his lips. \"I can still taste you.\"\n\n\"And I will always hate you!\" she spat, infuriated that even with the power shift between them, he was still so damn cocky.\n\nMichael relaxed against the wall. \"Did you miss me?\"\n\n\"No!\"\n\nHe chuckled. \"If you say so. You couldn't wait until I take you off this boat to seduce me?\"\n\n\"You'll never-\"\n\n\"Yes, I will.\"\n\nInexplicable terror streaked up Carina's spine. Michael wasn't broken or afraid. His demeanour was an unnerving opposite - he spoke with certainty, as though he knew something she didn't.\n\nThe uneasy feeling grew; a bizarre sense of danger. Carina felt like she was in a shark cage, facing a sizable prehistoric predator without realising the protecting barrier was made of plastic instead of unbreakable steel.",
        "It was inconceivable that Michael might get the upper hand, but the look on his face and the tone of his voice triggered a terrible memory of the very first moment he betrayed her. The time he disclosed, despite all odds, that he was about to murder her boyfriend in the midst of their gang and kidnap her. And he pulled off both feats with seamless ease. If it weren't for Gavin...\n\n\"I see you're still deluded,\" she sneered, wondering how to extract herself from the conversation with dignity. Though she wanted to win the debate, her instincts told her to leave.\n\n\"You can see I am not lying.\" Michael slightly leaned forward, as though to share a delicious secret. \"I am going to take you again. You belong to me.\"\n\nCarina managed a scornful titter. \"You're full of shit. You can't-\"\n\n\"-Can't wait to rip your clothes off,\" he swiftly interrupted, enjoying the visual unravelling of her cold composure. Michael used his legs to slowly draw himself forward, his arms shifted strangely.\n\n\"Why do you stand so far away?\" he cocked his head. \"You're afraid of a bound prisoner?\"\n\n\"No,\" she lied, wishing Gavin was standing beside her.\n\n\"Prove it, mi amor,\" he goaded, sliding another inch closer. \"Stand before me. Let's see how confident you are of victory. Or you're still afraid?\"\n\nCarina's eyes flared at the rude challenge and she took an arrogant step toward him.\n\nDon't do it. \n\nCarina stepped back, suddenly afraid of the look on his face, bringing memories of frustration; struggling, fighting him, exhausting herself in futile escape attempts while he used her body for his pleasure. The feeling that something was wrong increased with each passing second.\n\n\"Sweetheart, there is no shame in being a coward,\" Michael said patronizingly, aligning the soles of his shoes with the ground. Squaring his shoulders, he sat straighter with his thick arms tensed. Knuckles pressed firmly to the floor behind for a quick rise.\n\nCarina bared her teeth at the insult but was pulled from the room before she could retort. Carlos slammed the door, his body pressed against her with a painful grip on her neck, his forehead resting on the steel above.\n\n\"Did you get what you wanted?\" he growled.\n\nCarina nodded against his shoulder, feeling the struggling tensions in his body and realising why Carlos never wanted to take her down there. Though he was afraid to leave her alone with Michael, he was also afraid of losing control and killing Michael before he could properly torture him.\n\nBreathing heavily from adrenaline, Michael relaxed against the wall with his eyes closed. He'd come very close to a radical new plan. With Carina as hostage, he'd have Carlos by the balls. The only thing Carlos wanted more than him dead, was Carina.\n\nIt was a risky but effective shortcut off the yacht. And it came so close to fruition. It didn't take much to bait Carina; she was easily overcome by her passionate temper, an inner fire that made his cock stiffen.\n\nWith everything carefully planned out, Carina's visit took him by surprise. The sight of her motivated him to act prematurely; drove him to get his hands on her sooner, rather than later.\n\nBut it was smarter to stick to the original plan.\n\n\"Patience is a virtue...\" Michael dully mused.\n\nGod he'd missed her. Just being in her presence lifted his mood and stoked his sex drive. His erection bordered on painful. In his mind he pinned her down, ran a hand through her hair, thrust into her pussy and smothered all objections with his mouth.\n\nMichael glared at the ceiling as his cock needily pulsed at the mental imagery.\n\nA moment longer, and he would have trapped her.\n\nIt was better he didn't. The original plan was better. Wiser.\n\nMichael sighed harshly, tensed with unsated lust as his mind warred with his desire.\n\nIt was so fucking close. He only needed three more seconds.\n\n***\n\nGavin was in the game room with a coffee when Carina walked in.\n\nA man followed her entry, politely nodded to Gavin and joined two others at a small table on the far side of the room.\n\n\"Prepared to be destroyed?\" Carina asked brightly, chalking a cue-stick.\n\n\"I would save the bragging for the end,\" Gavin replied, leaving his seat to join her by the pool table. \"Are you alright?\" he asked quietly, noticing she was unsettled.\n\nCarina tossed her head and decided to keep things transparent, since they were under scrutiny. \"Not really. I saw Michael.\"\n\n\"Ah.\"\n\nThe game commenced, and Gavin was pleasantly surprised that Carlos' assessment of Carina's gaming skill was not mere flattery. For fifteen minutes he solely concentrated on working around Carina's strategic blocks.\n\n\"So, how was he?\" he finally asked.\n\n\"Annoying. Perverted.\" She glared at the table, irked by the memory of Michael's easy smile despite him sitting bound on the floor.\n\nGavin frowned. \"And Carlos tolerated it?\"\n\n\"Yes, to a point. Or perhaps I should say - to make a point,\" she muttered, eyeballing the eight ball with vicious intent. \"I am sure he heard everything.\"\n\nGavin casually glanced around, noting the men across the room attentively watching them. \"Heard everything? He didn't go in with you?\"\n\nCarina bit her lip. \"No. At one point I was afraid,\" she murmured, focusing on a sharp move.\n\nGavin shot her a concerned look. \"Why?\"\n\n\"It's stupid.\" She shook her head, leaning across the table to take another shot. \"I just felt unsafe.\"\n\n\"Was Michael...?\" Gavin uneasily licked his lips, considering his next words. \"You didn't go near him?\"\n\n\"Of course not,\" Carina scoffed, choosing to omit the fact she stupidly considered it in a battle of wills.\n\nThey played in cordial silence for a while. Then Carina won, and a new game began.\n\n\"If you see Michael again, keep a healthy distance,\" Gavin advised, chalking his cue. \"I've seen him pluck keys from a guard's belt with his toes.\"\n\nCarina snorted and the balls scattered as she took her turn. \"Carlos would never be so foolish to-\"\n\n\"It's not that. It's more that Michael is...\" he paused thoughtfully. \"A bit like a coiled snake, pretending to sleep.\"\n\nCarina's bitter expression vanished, and she laughed. \"What a perfect description! A fucking snake.\" The mirth lightened her mood, and her attention shifted from the game to Gavin.\n\n\"So, that outfit this morning...\" Gavin murmured, focusing on his aim. \"Is that how you usually dress with these guys?\"\n\n\"Only when I'm pissed off,\" Carina tittered, opting for a frivolous answer.\n\nGavin didn't reply. He was studying the table, granting Carina ample time to admire his build, his striking features complimented by a faint five-o-clock shadow. With hair so pale, it was difficult to tell how dense it was, and Carina found herself wanting to find out with her fingertips. Or her mouth.\n\nGavin's borrowed black pants were a rather close fit, but not too ridiculous. The matching long-sleeve shirt adhered to his chest and arms like a second skin. In that outfit he could easily be mistaken for part of Carlos' crew, except for his conspicuous fair skin and blonde hair.\n\nCarina almost sighed aloud. Gavin was so different to any man she'd met. All her life she separated men into two groups -- bad guys, and wimps. Though Gavin never exhibited the dark streak that Eduardo, Michael and Carlos showed from time to time, he was certainly not a wimp.\n\nLike Michael, Gavin was a skilled killer. But murder was clearly not his preference. It was as though he had some essence of morality. Almost indiscernible, it existed; Carina felt it. From the beginning she sensed that even without a romantic interest in her, he would still oppose Michael's forceful approach to love.\n\nGavin took significant risks to extract her from the island, yet the arrangement was without strings. Even now, on a dangerous man's yacht, he was on her side. It slightly took Carina's breath away, knowing Gavin could simply steal a small speedboat and escape. But he deliberately remained, to take her, and Michael, to safety.\n\nCarina couldn't think of anyone who would go to those lengths for a hot new acquaintance and an old frenemy. Gavin's moral code was noticeably stronger than any other person on the yacht, herself included.\n\nWith the black shirt tightly lining his skin and revealing every muscled contour of his chest and arms, it was the closest Carina had come to seeing him topless. She imagined it would be hot to run her hands up his chest, slide an arm around his neck while her other hand clenched in his blonde hair as they fucked. Kissing him was explosively arousing, she knew that already...\n\nThen Gavin glanced up and took in her telling blush. His eyes warmed, the light-blue tones reminding Carina of tropical, crystal blue waters.\n\n\"Don't drop your guard,\" he said playfully. \"The game isn't over, yet.\"\n\nCarina caught the warning behind the banter, and it was valid. In a lustful moment she had completely forgotten about the men silently watching them interact.\n\n\"Well, what are we playing for?\" she asked, brushing chalk dust from the sleeve of her blouse. \"Best of three.\"\n\n\"It's hardly fair to take bets after winning the first game,\" Gavin wryly objected. \"Besides, I have nothing to gamble in current circumstances,\" he added, tilting his head warningly when Carina's gaze moved boldly down his body.\n\n\"There is always something,\" she declared, sinking another ball.\n\n\"Indeed,\" Carlos remarked.\n\nThough Carina started, Gavin seemed unperturbed by Carlos standing on the darker side of the room, having entered unnoticed from a side door.\n\n\"Hi, Carlos,\" Gavin smiled, and Carlos gently inclined his head in greeting.\n\n\"I hope you do not mind, Gavin, but I must speak with Carina,\" he said calmly, and Carina bit her lip.\n\n\"I'm grateful. She was winning atrociously.\" Gavin laid his cue on the table's edge and strolled from the room.\n\n\"Come, Carina.\" Carlos turned and Carina warily followed. He didn't speak until they were in the suite and guided her to sit on the bed while he remained on his feet.\n\nWith her hands clasped together, Carina apprehensively watched him pace before her.\n\n\"You seem very comfortable around Gavin.\"\n\n\"I am comfortable around men,\" she countered.\n\n\"This is true,\" Carlos conceded, pausing with hands on hips. \"I can't find a fucking thing on the man.\"\n\nCarina shrugged, hugely relieved. \"Why do you care? It's like you want to find something bad.\"\n\n\"I like to think I dislike him for a reason. Has he let on about his connection with Michael?\"\n\nCarina sighed impatiently. \"Carlos, I have hardly spent any time with him, except for the games, and you can ask the men-\"\n\n\"I am asking you, Carina.\"\n\n\"You said your business today was about Michael,\" she accused.\n\n\"Yes...Well, Michael's connection to Gavin,\" Carlos revealed. \"I know they are not on good terms, but there must be some personal attachment, and I do not trust Gavin to tell me the truth.\"\n\n\"What about the usual business? I mean, with Samuel?\" Carina asked tentatively.\n\n\"Ah. We had a falling out, which may or may not be temporary.\"\n\n\"You had to choose between chasing Michael, and continuing with Samuel?\" Carina astutely guessed.\n\nCarlos' jaw clenched. \"He doesn't have a brother; he couldn't understand. And his opinion of me soured the last time you saw him.\"\n\nCarina shuddered. \"You were such a bastard.\"\n\n\"And I will always be ashamed of it. I am very grateful he intervened Carina,\" Carlos admitted. \"Though he always said you were an airhead.\"\n\n\"I never professed to have a PhD,\" Carina snapped, reminded of her restricted existence. \"If I wanted to make anything of myself, Eduardo would just laugh it off. Michael was the only one who listened.\"\n\n\"And he also didn't lift a finger to change anything, did he? He had his own agenda.\" Carlos sat beside her, gently tilting her chin to look up at him. \"You are so fucking pretty it makes me angry, sometimes.\"\n\n\"Why?\"\n\n\"Because it's difficult to stay upset with you.\"\n\n\"What have I done, now?!\"\n\n\"There is always something, Carina,\" he chuckled, pulling her into his arms. \"I can't believe you're really mine.\"\n\nFeeling depressed, Carina let her head fall against his shoulder.\n\n\"Is it wrong to be happy with my brother's woman?\" he whispered.\n\n\"Carlos, please,\" Carina mumbled, lightly pawing his bicep. \"I don't want to talk about Eduardo.\"\n\n\"I'm sorry,\" he murmured, directing her to face him. For a moment they sadly looked at each other, both inevitably remembering Eduardo. Carlos' focus switched to Carina's mouth.\n\nThey kissed softly, tentatively; finding solace with each other. Carina closed her eyes, silently panicking when Carlos' hands crept over her breasts, his thumbs moved purposely around her nipples in sensual circles until the peaks caught under his fingers.\n\n\"C-Carlos...\"\n\nCarina jumped with fright when the front of her shirt ripped. Carlos stared, drinking in the sight before gently pulling the material aside to expose her bare breasts, his tongue extended to flick an aroused nipple.\n\n\"Oh, Jesus Christ,\" he muttered, sucking the silky flesh into his mouth, groaning against her skin.\n\nCarina stared over his head with wide eyes, sighting their reflection in a full-length wall-mirror. She watched Carlos attached to her breast like a newborn, restlessly shifting with building excitement. His teeth lightly pinched, and her pussy twinged responsively.\n\n\"I... Carlos,\" she hoarsely protested, lightly tapping his head. \"You said we needed to talk...?\"\n\n\"Did I?\" he distractedly muttered, before latching onto her other breast. One hand settled on her hip, keeping her tightly accessible, the other snaked between them to gently squeeze her thigh and slide higher.\n\n\"Oh! Carlos...\"\n\nHe pressed forward, forcing Carina to lay back on the bed. He climbed over her, both hands stroking up her narrow waist to indulgently close over her breasts and squeeze. Then he dragged his gaze higher and registered her discomfort.\n\n\"You want me to stop, again?\" he breathed with unconcealed dismay.\n\n\"I don't...I mean...It's just too soon...\"\n\nCarlos reared up with frustration. \"Maybe it's too soon, but-\" he broke off, his cheeks angrily flushed at the thought in his mind. \"You can't possibly want Michael to be the last man to have you!\"\n\nFighting his temper, he moved away, and Carina miserably drew the front of her shirt together. \"Carlos?\"\n\nCarlos sat very still, staring down at his palms. \"You'll never want me that way, will you? You'll never look at me, the way you looked at him.\"\n\nA tear dripped down Carina's cheek unheeded; she didn't answer. She loved both brothers, but it was different with Eduardo. Carlos laughed bitterly at her silence.\n\n\"I am losing myself with emotion. I can admit it to you, no one else.\" He looked at her, and Carina was relieved to see him smiling, though exasperated. \"You're the only family I have left. And I want you. That's not going to change.\"\n\nCarlos incredulously shook his head. \"I imagined I saw you looking at Gavin the way you used to watch Eduardo.\" He raked a hand through his dark hair. \"I know it's stupid. I am so paranoid. I always was.\"\n\nCarina kept her gaze downcast, feeling sick.\n\nCarlos made a helpless gesture. \"I am going to have a cold shower. You are free to return to your suite.\"\n\n\"Without being stalked?\" Carina asked curiously, edging off the bed. Since they spent the night together, Carlos' security had been noticeably lax.\n\nThe corner of Carlos' mouth turned up in a cynical smile. \"I have gauged Gavin is not stupid enough to touch you. It has been a rough time for the others. I have worked them hard and they deserve a break. If you are nervous, I will assign somebody.\"\n\n\"No, I prefer to be alone.\"\n\n\"Then I will see you at dinner. Let me know if you change your mind. About anything.\"\n\nCarina's eyes darted back to clash with Carlos' smouldering gaze, he suggestively arched an eyebrow, before abruptly heading for the bathroom.\n\nRunning an uneasy hand up her nape into her hair, Carina left the suite, wondering how long she could stall before having to fuck Carlos.\n\nThe walk to her suite was thoughtful, and it was only when she curled up on the bed could she pinpoint what bothered her. Nervously aware of the shift in vibe with Carlos, she felt she couldn't really be herself; not her disobedient, flirtatious self. Carlos was her minder now, and the initial ice from their distance apart had thawed.\n\nNow he was comfortable with his feelings about her, Carina recognised he was waiting for her provocative personality to shine through; not just because he adored it, but to take advantage of it. Now, he was very receptive to behaviours that he would have brusquely ignored in the past.\n\nCarina's head lightly spun with the realisation she lived in a strange love-square before Eduardo's murder. She belonged to Eduardo, but Michael, her best friend, was also secretly in love with her, silently obsessing; biding his time for the right moment to kidnap her. Her sisterly love for Carlos seemed distastefully incestuous now she was aware of his feelings. Feelings that she'd have never known but for Michael's betrayal.\n\n****\n\nDinner passed pleasantly, with Carlos' mood noticeably improved. Dressed in white, he looked very much like Eduardo, who always favoured pale outfits. Carina noticed the resemblance and wondered if it was Carlos' tactic to draw her closer.\n\n\"White, Carlos? That's not like you,\" she commented, leaning back as her dinner was placed before her. Opting for a tidier look, she'd arranged her hair in a loose French braid and wore a black shift dress with strappy red sandals.\n\n\"I felt like a cheerful change,\" he replied, still seeming pleased about something.\n\nThe flash of concern in Gavin's eyes quickly vanished under a relaxed demeanour. \"Something to celebrate?\"\n\nCarlos shrugged a shoulder, intent on slicing his steak. \"There are recent changes worth celebrating.\"\n\nGavin watched Carlos' face, wondering whether it was new information or spending time with Carina that had lifted his mood.\n\nCarina was nervously wondering the same thing, with both possibilities making her anxious. Either Carlos had found something on Gavin and Michael, or he was going to fuck her straight after dinner.\n\nA phone chime cut through the quiet and Carlos excused himself, leaving Gavin and Carina alone. Two other men remained in the room but were more preoccupied with their conversation than keeping watch.\n\n\"I wonder what's put a spring in his step,\" Gavin pondered, sipping whiskey.\n\n\"I don't know,\" Carina said worriedly. \"And I don't know what Carlos is waiting for, with Michael.\"\n\nGavin looked amused. \"Really?\"\n\nCarina glanced up from her food with surprise. \"Well, I'd expect Carlos to at least break his fingers.\"\n\n\"What did Michael do to Carlos?\" Gavin asked, as though imparting a lesson to a pupil.\n\n\"He killed Eduardo,\" Carina answered, looking baffled.\n\n\"And who was Eduardo to Carlos?\"\n\n\"His brother...\"\n\nGavin slightly raised his eyebrows, waiting for her to figure it out.\n\n\"Carlos is searching for Michael's family?\" she breathed, laying down her utensils with amazement. \"Does Michael have family?\"\n\n\"I wouldn't know,\" Gavin shrugged, and Carina couldn't tell if he was telling the truth. \"Going for uninvolved family is always a dirty move. It's why I never affiliate with gangs.\"\n\nCarlos returned, looking surly.\n\n\"Business?\" Carina asked innocently, and Carlos shot her a warning look. Carina glared back.\n\n\"I think this is the best baked fish I've had to memory,\" Gavin diplomatically intervened. \"Where did you find your chef?\"\n\n\"More an ensemble, than a single cook,\" Carlos distantly replied, still giving Carina a hard stare.\n\n\"Have they been with you long?\"\n\n\"Yes, a while.\" Carlos' attention was back on his dinner.",
        "\"And how many make up this dream ensemble?\"\n\nCarlos angled his head at his food, his dark eyes alert. \"I couldn't say, Gavin. But I do know they work as a team and that their cooking skills vary. Sometimes they cook together, and sometimes they cook alone, depending on the...culinary task at hand.\"\n\nGavin quickly looked up and locked eyes with Carlos. \"I see,\" he nodded, and concentrated on the rest of his meal.\n\n\"Will you play cards with me later?\" Carina asked with a tug at Carlos' shirt, feeling it was her turn to disrupt a tense moment.\n\n\"Of course, darling,\" Carlos smiled, still watching Gavin. \"Will you join us, Gavin? Or would you prefer a tour of the kitchen?\"\n\nGavin laughed, very much wanting a tour of the kitchen. \"Cards, it is. I should issue my own warning -- I'm much better at it, than pool.\"\n\n\"How interesting. Success with card games requires a very different skill to pool,\" Carlos said lightly.\n\nGavin shrugged indifferently. \"Both are strategic.\"\n\n\"But with pool, everything is on the table for the eye to see,\" Carlos said fluidly. \"Cards requires an aptitude for deception.\"\n\n\"Or basic control of emotions.\" Gavin raised a questioning eyebrow. \"I hope you are not a sore loser, Carlos.\"\n\nCarlos showed his teeth in a hostile grin. \"I am only a sore loser when I am cheated.\"\n\n\"Let's hope you don't catch me out, then,\" Gavin joked.\n\n\"You had better hope that I don't.\" Carlos spoke in a staccato threat.\n\nCarina groaned, tiring of the stressful back and forth of foreboding innuendos. Dangerous and unsettling as it was, she also felt like it was some kind of immature battle of male egos.\n\n\"This is fucking boring!\" she rudely announced, and Carlos' severe expression lightened. \"And where's my drink?\"\n\n\"Only one for you tonight, Carina,\" he chuckled.\n\n\"Why?\"\n\n\"Because of what happened last time.\"\n\nCarina blushed heavily; Gavin's expression didn't alter. The rest of the meal was slightly awkward, and Carina was relieved when Gavin opted to spend some time in his suite before the card game.\n\nCarlos jerked his head and the three lingering men vacated the room. With a last sip of his water, Carlos tapped his leg in a silent order, and Carina slowly moved from her seat onto his knee. For a moment he faced her neck, breathing the scent of her hair, before leaning back to gaze into her face.\n\n\"Some interesting developments.\"\n\n\"I presumed as much with your weird insinuations,\" Carina retorted, and Carlos smiled darkly.\n\n\"I intend to prove my insinuations,\" he murmured, his lips trailed up her neck to caress her ear. \"I want you to seduce him.\"\n\n\"What!\" Carina's head spun with a strange d\u00e9j\u00e0 vu.\n\n\"Seduce Gavin,\" Carlos repeated. \"I know he will respond to you.\"\n\nCarina angrily staggered to her feet, almost rolling an ankle when her heel caught the table leg. \"How dare you!\"\n\nCarlos silently watched her.\n\n\"You-!\" Opting for attack as defence, Carina took a deep breath, and let loose. \"After what I went through with Eduardo's murder, then with you on that couch, then with Michael!\" she raged. \"I am not some hooker for you to pimp when you can't figure out a man! I am not a slice of meat to be dangled at a potential enemy! I am not-!\"\n\nCarlos caught Carina in his arms and dragged her back to their former position.\n\n\"Be easy, Carina. I just wanted to know how eager you might be to do it.\"\n\n\"You were testing me?\" she breathed accusingly.\n\n\"Something is awry,\" Carlos replied, unabashed by his tactic. \"I highly doubt it is you, but at the same time I cannot pinpoint exactly what is wrong. But something is off, and I do not trust Gavin.\"\n\n\"You were testing me?\" she repeated, concealing her unease. \"You don't trust me?\"\n\n\"Of course, I do.\" Carlos stared into her eyes. \"But I do not ignore my gut instincts.\"\n\n\"That means you don't trust me,\" Carina sulked, dropping her gaze.\n\n\"I know you hated the sapphire necklace,\" Carlos said unexpectedly, startling Carina. \"Do you know your eyes go dark, when you like what you see? I always loved watching that gorgeous violet fade to black when I gave you presents. But when I put that necklace on you, your pupils were pinpricks. It worried me.\"\n\n\"I had been through a lot. I was upset,\" Carina faltered. \"It's not fair of you to-\"\n\n\"Darling, when you are in this business as long as I have been, you never let your guard down. That's how...\" His eyes became distant and Carina knew he thought of Eduardo. \"That's how you end up dead.\"\n\nA despondent silence fell between them, and Carlos shook his head. \"Enough of this misery. Shall we go to my suite?\"\n\nCarina's eyes widened. \"But the game...\"\n\n\"Gavin can wait. God knows the number of times I waited for you and Eduardo to make an appearance,\" he said wryly, pleased by Carina's bashful response. He lightly tapped her warmed cheekbone. \"Out of character as it may be, I could really get used to this blush.\"\n\nCarina swallowed nervously, as Carlos led her from the room.\n\n\"So, what developments did you find out?\" Carina pried as they entered Carlos' suite.\n\nThe door closed behind her, and Carlos gently placed his palms against the door above Carina's head. \"Michael and Gavin worked together. For many years.\"\n\nThe moment was overwrought with all kinds of tensions, and Carina opted for the one she was most familiar with. Seizing the front of Carlos' shirt, she pulled until his mouth crashed down on hers. For a short moment he kissed her with his hands still on the door, enjoying Carina's initiative. Then one arm circled her waist, and without breaking the kiss Carlos spun and walked Carina back until the bed's edge caught her calves and there was no option but to fall back onto the large mattress.\n\nWhile Carina tried to gather her bearings, Carlos wasted no time. His hands were everywhere, his mouth moved incessantly across the skin of her throat, her jaw. One hand slid up her neck to clench in her hair, immobilising her. Carlos' other hand moved up her thigh with enough strength to drag the skirt of her dress with it.\n\n\"Oh, fuck!\" Carina panted, feeling overwhelmed and severely disadvantaged. \"Carlos, please...\"\n\n\"You can relax with me, Carina,\" he breathed against her temple. \"I only ask one thing of you tonight.\"\n\n\"W-What?\"\n\n\"Touch me.\"\n\nSomething warm and incredibly thick slapped into Carina's idle palm. Without looking down, her eyes widened with disbelief as her fingers closed around it; much as she strained, her thumb didn't come anywhere close to meeting her middle finger.\n\n\"Carlos,\" she numbly uttered, not knowing what else to say. The cock in her hand was massive, and she didn't want to compliment it and encourage him.\n\n\"It's all for you,\" he said huskily, jerking his hips and watching Carina's eyes flare with surprise at the same time her hand grappled with his size.\n\n\"I can't... Carlos...!\"\n\n\"Don't worry,\" he breathed. \"Just move your hand and keep looking at me like that.\"\n\nCarina stared up at Carlos and began to stroke him. She was too scared to look down at what was in her hand.\n\n\"Yes,\" Carlos groaned, burying his face in her neck. \"Like that. Oh, yes...\"\n\nCarina tentatively raised her legs to the sides of his waist, continuing to pump him with her hand. Carlos arched with rapture, then lowered so his mouth could reach hers whilst leaving enough room for Carina to continue jerking him.\n\nVery startled, Carina panted against his lips, and Carlos seemed to enjoy her breathless surprise, grinning as he kissed down her cheek to her jawline.\n\n\"You must be relieved I didn't rape you that first time,\" he slurred against her neck.\n\nCarina tensed at the distasteful memory, and that Carlos would banter about it when they were being intimate, adding yet another layer of weirdness to the encounter.\n\n\"Do you like it?\" he panted, lightly jerking his hips.\n\n\"Carlos... it's huge!\" Carina squeaked with frightened awe.\n\n\"You will enjoy it. Spit in your palm and continue.\"\n\nCarina frantically spat in her hand and wrapped it around the shaft that was probably the girthiest cock she'd ever touched. Carlos laughed at the look on her face.\n\n\"You look like a scared virgin, darling,\" he said thickly. \"I admit I often fantasised about this; about your first reaction.\"\n\nCarina's heart raced with panic. \"Carlos, I don't want to-\"\n\n\"I only ask for your touch, Carina. It is not the biggest demand I could make.\"\n\n\"Yes, Carlos.\" Carina blinked at her mild obedience. She sounded like a soldier answering a general.\n\n\"Oh, God!\" Carlos grunted, thrusting more rapidly against her hand. \"Make me cum, Carina!\"\n\nTerrified, Carina pumped faster; her compliance only to avoid something worse. The situation was not erotic for her at all. It was a strange fear she'd never experienced, and she felt like a victim of incestuous abuse.\n\nIt wasn't like with Michael, where they were close friends and harmlessly flirted. Being raped by him felt backward, but the current scenario seemed a different level of unnatural. Carina always saw Carlos as a big brother, not a man who could ever be lustfully carried away with her. The man on top of her was a complete stranger.\n\n\"Ohhh...\" Carlos groaned. His cock slipped from Carina's small hand as he moved onto his knees.\n\n\"Carlos!\" Carina squealed, watching the enormous member quickly ascend her body. \"Please, no!\"\n\n\"Open your mouth.\"\n\n\"Carlos, please, don't!\" she pleaded.\n\nCarlos sighed angrily, reached down and yanked the front of Carina's dress down until her pert breasts popped out.\n\nFeeling traumatized, Carina shut her eyes. She heard Carlos' heavy breathing, the brisk movement of his hand on his cock, then he moaned.\n\nA large hand kneaded her bared breasts before sliding through her hair. The hand clenched, pulling down so she was forced to arch, presenting her chest to him. Seconds later, warm streaks wetly scattered across her breasts. Carina whimpered when his hold in her hair tightened as the last drops of Carlos' cum fell across her left nipple.\n\nCarina kept her eyes closed, listening to Carlos' breathing become steady, knowing his eyes were on her face.\n\n\"Carina?\" he uttered hoarsely, using the blanket to wipe his cum away. \"Carina...\"\n\n\"It's fine,\" she said flatly, her voice was thick with tears. \"May I leave?\"\n\n\"I broke my promise, Carina. I'm sorry.\"\n\nCarina sat up and tucked her breasts from view, keeping her back to him. \"How many more apologises will you make?\"\n\n\"I don't know what to say. There's something about you that dissolves my control. But I am better than that. I will be better.\"\n\n\"Why would you be better? You're Eduardo's brother,\" she said bitterly, not caring if the insult angered him.\n\nThe comparison was ugly, and a nasty silence hung in the air. Eduardo was a cheating scumbag who swore to change, until he stopped making assurances he couldn't keep. It was a similar pattern to how Carlos might reassure her about his conduct, until he decided it didn't matter what she wanted.\n\n\"I deserved that,\" Carlos stiffly acknowledged; his jaw clenched with resentment. \"It's just that I know Eduardo...\" he swallowed awkwardly. \"I know he had certain proclivities that you...\"\n\nCarlos pulled up his trousers as he stood from the bed. \"I know he was fucking kinky, and I know you liked it.\"\n\nCarina made an irritated sound but didn't deny it.\n\nCarlos tiredly crossed his arms. \"I suppose you would never know this about me, but I like those things, too. Except I don't want to do them with just anybody. And if I didn't already know you had similar desires I would never... I mean, I thought you would like...\" he trailed off, hoping she might understand his presumption.\n\nHating that Carlos knew she like copping Eduardo's load in her mouth, Carina rubbed her face. \"I do not want to talk about this. I'll be at the lounge in twenty minutes.\"\n\nShe knew Carlos wanted to explain his actions, but it only humiliated her. Carina knew he was aware of her sex life with Eduardo, but to imply she would welcome it with him just because she enjoyed it with his brother...\n\n\"Carina.\"\n\nPausing by the door, she turned with a pained expression. \"What?\"\n\nCarlos' eyes were intensely solemn. \"I can make you happy if you give me a chance. I will treat you better.\"\n\nCarina wrenched the door open and left. Encountering two men in the corridor, she couldn't meet their eyes as they politely stood aside for her to pass. Shame washed over her as their focus inevitably settled on the stretched front of her dress and she wondered if they could smell sex. Normally she flaunted her sexuality, but under these circumstances she was mortified.\n\nWhere her roaring sex-life with Eduardo was widely known and accepted, she felt the men's silent disapproval of her becoming Carlos' lover. But there was no alternative, she didn't like it any better than they did, and she had an agenda to see through.\n\nAfter a quick rinse in the shower, Carina distractedly rummaged through her clothes, still reeling from the recent encounter with Carlos. Hesitating as a thought struck her, she nervously reached into the cupboard, right to the back and felt around the base. Velvet brushed her fingertips, and she pulled back like she'd touched fire. It was her sex toy case.\n\n\"Ugh.\" Covering her eyes with one hand, she slowly shook her head, refusing to consider whether Carlos had been through it. \"Keep it together, Carina.\"\n\nDragging a gleaming red jumpsuit up her body, she firmly tied the satin sash around her waist. Gathering her glossy dark hair into a high ponytail, she faced the mirror with a wry smile. One silver lining was that the new issues with Carlos temporarily distracted from her upsets with Michael.\n\nEduardo used to tease her about Carlos' oversized cock, but Carina presumed he was being obscene just to make her laugh. Her amusement stemmed from the inappropriateness of it; the fact Carlos would be scandalised if he overheard them. She never saw Carlos in a sexual light and was never curious to explore the myth. But as an afterthought it was interesting to know Eduardo was actually telling the truth.\n\nCarina met her eyes in the mirror, wide with disbelief as she remembered the feel of Carlos' member in her hand.\n\n\"I can't believe he really is hung like a monster,\" she mused at her reflection. \"That thing is not going inside me,\" she muttered determinedly, slipping into black Louis Vuitton heels. \"No fucking way.\"\n\n*****\n\nCarina was surprised to find Gavin alone in the game lounge, quietly shuffling cards.\n\n\"Hello,\" she said shyly, lightly blushing as he looked over her new outfit.\n\n\"You change clothes a lot,\" he said mildly, still toying with the cards. \"I have yet to see an unflattering colour on you. I thought you were with Carlos?\"\n\nCarina immediately suffered the mental image of a giant appendage approaching her face.\n\n\"Um...no,\" she said awkwardly. \"Gavin, I think we...\"\n\n\"Bugs everywhere in the tropics,\" he pleasantly interrupted, resuming his shuffling.\n\nBaffled, Carina opened her mouth to question him, but her voice died when Gavin stared fiercely, the blue of his eyes like chilled slates of ice. Carina paused, feeling a strange fear ribbon up her spine, and down between her legs. He was angry. It was hot.\n\n\"I suppose Carlos' lackeys usually carry repellent,\" Gavin added tartly, briskly tapping the deck to the table. \"But I guess when they are absent, there will always be bugs.\"\n\nCarina's jaw dropped. Did he mean...?\n\n\"My spidey-sense tells me Carlos will be a while,\" he continued with an easy smile. \"Let's start without him.\"\n\n\"O-Okay,\" Carina stammered, taking the chair opposite.\n\n\"Since we are all alone, this is a good opportunity to get to know each other a little better. What do you say?\"\n\nCarina stared speechlessly, taken aback by Gavin's enthusiasm. Despite his cheerful tone, his eyes were still angry, and she wondered what the Hell had happened since dinner to enrage him.\n\n\"Sure,\" she croaked, then cleared her throat and reached for a glass of water.\n\nBy the time Carlos showed up, the hour was late. Prior to that, Gavin told Carina numerous, conflicting stories about his background, before steadily delivering a never-ending flow of terrible Dad jokes.\n\nWhen Carlos entered with three men, Gavin greeted him with a wide smile.\n\n\"Carlos, you made it!\" he exclaimed. \"I was beginning to think you had better things to listen to.\"\n\n\"Forgive my tardiness,\" Carlos retorted, taking his seat as the men hovered by the bar. Glancing over Carina's attire, he indulgently flicked her ponytail. \"You are a vision, Carina.\"\n\n\"Thank you, Carlos,\" she said politely, avoiding his eyes.\n\n\"What shall we play?\" Gavin inquired, the cards buzzing between his hands in a riffle shuffle.\n\n\"No more games, Gavin. I want to speak candidly.\"\n\n\"Okay.\" Gavin lightly placed the card deck between them. \"You start.\"\n\n\"Why didn't you disclose your connection with Michael?\"\n\n\"Why are you looking for my parents?\" Gavin snarled.\n\nCarina twisted in her seat to stare at Carlos, who smirked with a nod of acknowledgement.\n\n\"I wanted leverage. It's just my way,\" he shrugged carelessly. \"I wonder how you knew?\"\n\n\"Your men are loud, and I understand Spanish,\" Gavin snapped, eyes blazing. \"You might have saved yourself the trouble and asked me. I could have told you they are dead.\"\n\nCarlos looked sceptical. \"You understand Spanish? Or perhaps you snooped through my iPad? Creo que eres una mentirosa.\"\n\nCarina waited breathlessly, wondering if Gavin bluffed.\n\nGavin's grinned menacingly. \"You think I'm a liar, Carlos? Est\u00e1s lleno de mierda,\" he returned.\n\nCarina's jaw fell open as Carlos was told he's full of shit in flawless Spanish.\n\n\"Fluent, just like Michael,\" Carlos observed with a twisted smile. \"If you worked together you must know who he is. That his name is not really 'Michael'. You may not be his friend, but you are still not helping me, Gavin. I think you should consider very carefully whose side you are on.\"\n\nGavin didn't answer.\n\n\"I don't like this,\" Carina said uncomfortably, and Carlos placed his hand on her leg to prevent her rising.\n\n\"Stay,\" he sharply ordered, watching Gavin's eyes follow the movement of his hand to Carina's thigh. \"Am I going to have a problem with you, Gavin?\"\n\n\"What kind of trouble do you anticipate?\" Gavin asked bluntly, and Carlos looked foreboding.\n\n\"I do not like you, nor trust you. The men will see you to your room. Come, Carina.\"\n\nCarina cast a desperate glance at Gavin, who seemed calm and gave the tiniest shake of his head, warning her not to make a scene.\n\n*****\n\nWith his three-man escort, Gavin paused as they approached the narrow passage leading to his room.\n\n\"How do we do this?\" he inquired, gesturing to the thin space ahead. \"Will one of you lead the way, with two behind to make a nice sandwich? Or will all three of you guard me from the rear?\"\n\nTaken aback by the amiable inquiry, the men exchanged unsure glances. Only one had a hand resting on the gun by his hip. Gavin had been flagged as dangerous from the beginning, however thus far behaved like a complete civilian with impeccable manners. There was never a threatening air about him, unlike the common thugs Carlos normally dealt with.\n\n\"Lo siento por esto,\" Gavin apologised. I'm sorry about this.\n\nThe man with his hand lingering by the gun took the first hit. Gavin felt bone break under his knuckles in one of his best sucker punches. In the same movement his other hand shot out to seize the second's throat in an agonising squeeze to shove him into the third man before any weapons could be drawn.\n\nThe two men fell together as the first stayed bent over, blindly clutching his bleeding nose. Gavin aptly gripped the man's head and ended his life in once vicious twist. Trapped on the ground, the third struggled for his gun, the second retched for air atop him. Gavin hauled the second man up by his shirt in time to use him as a human shield. Choking against Gavin's shoulder, the man lurched twice as the third fired frantically. Before the gunman could compose himself to aim properly, Gavin promptly stomped on his crotch.",
        "The man's shrill scream abruptly ended with a brutal crack. Not exhausted in the slightest, Gavin stood perfectly still, keenly listening for an approach. Satisfied no one was immediately on his tail, he sprinted for top deck.\n\n****\n\nWith a strong grip on Carina's wrist, Carlos led her to his suite.\n\n\"What are you going to do?\" Carina asked fearfully.\n\n\"Kill him,\" Carlos said shortly, tightening his hold when she tried to pull back. \"He is more trouble than he is worth. We will find out what we can, then put a bullet in him and throw him overboard.\"\n\n\"Kill him?\" Carina exclaimed. \"You just warned him to pick your side!\"\n\n\"That was before I saw the look on his face when I touched your leg.\"\n\nCarina's heart clenched. \"Carlos, wait! He saved me! You can't-!\"\n\n\"I am beginning to wonder about your feelings toward this stranger,\" he interrupted.\n\nBefore Carina could reply, she was pushed into the suite with such force she ended up sprawled across the carpet. Rolling onto her back, she blinked up at Carlos staring from the open doorway.\n\n<br >\"W-Where are you going?\" she gulped, fighting to gather her scattered wits.\n\n\"I would much rather stay here,\" Carlos softly mused, his eyes raking her body. \"But I have questions for Gavin. When I come back, things will be right again. I think in future I will need to keep a closer eye on you, Carina. Your eyes turned black more than once today, looking at him.\"\n\nCarlos started as a man's scream faintly carried down the corridor and was quickly silenced. \"Those idiots knew better than to start without me!\" he seethed.\n\n\"No! Carlos, wait!\" Carina cried, but the door slammed and was locked by the time she reached it.\n\n***\n\nGavin ran down the outside walkway; no one would hear his steps above the steady rush of ocean water.\n\nThe door to the weapon's hold was ajar, and Gavin softy flexed his knuckles, observing a flickering shadow through the crack of the door. Gavin quietly pushed it open, stepped inside and grasped the nape of the man peering into a crate.\n\nBefore Gavin could break his neck, the man twisted, and a sharp punch landed across his ribs. Pain burst through Gavin's mid-section and he reacted by slamming both fists to the man's temples. After staggering back, the opponent quickly recovered and braced to spar in a familiar technique. Gavin's eyes widened.\n\n\"You!\"\n\n\"Gavin, goddamnit!\" the man hissed, and Gavin's sight adjusted to make out Michael's angry face. \"What the fuck are you doing here?\"\n\n\"Who let you out?\" Gavin demanded.\n\n\"No one!\" Michael snapped, shoving Gavin's chest to give himself more space. Tall as he was, Gavin was taller, and Michael always disliked the comparison.\n\n\"What are you doing?\"\n\nMichael threw up his hands. \"Ditching the weapons! Isn't that why you're here?\"\n\nGavin glowered at him, and Michael looked exasperated.\n\n\"I'll dump the guns, and I'll take the blame for it,\" he said strategically. \"I'll take out as many as I can, but it'll be up to you to handle Carlos unless I can get to him first.\"\n\n\"We'll have to tweak that plan. I'm a fugitive,\" Gavin muttered. \"But we have three less men to worry about.\"\n\n\"And I snuffed two. That should leave about three, not including civilians. The service staff panicked and barricaded themselves in the kitchen. They have no loyalty to the gang.\"\n\nMichael sighed harshly at the end of his summary, drumming his fingers along the crate's edge. \"Is she fucking Carlos?\"\n\nGavin shook his head. \"This is the worst time for gossip. We have to move fast.\"\n\n\"Like old times.\"\n\n\"I'll find Carina, you take Carlos. Everyone else goes.\"\n\n\"What, you get the hostage, and I'm left with the head of the snake?\"\n\n\"It's your snake. You started this mess.\"\n\nMichael didn't answer.\n\n\"Ethan, if you so much as cross her path, she will scream the boat down,\" Gavin dryly reasoned. \"Stop thinking with your dick.\"\n\n\"Fine. Fuck you.\" Gathering as much ammunition as he could carry, Michael brushed by him and was gone.\n\n****\n\nCarina furiously struggled to open the door. The idea that Gavin could be murdered while she was helplessly locked up was torture. There had to be something she could do. She would make Carlos listen, somehow. Even if it meant sinking back into her role as a gang-leader's sex-puppet, she just couldn't let Gavin die like this.\n\nHeels discarded, with one foot against the wall she twisted and pulled at the handle. Then she heard sound on the other side and staggered back just in time as the door burst open.\n\n\"Carina!\" Carlos breathed, kicking the door shut and tugging her into his arms. \"Are you hurt?\"\n\n\"You're holding me too tight,\" she uttered, straining to distance herself.\n\n\"I'm sorry.\" Carlos finally released her and began to pace the room. \"The men...Gavin made short work of them. I was a fool to wait for him to show his colours, knowing his skills...\"\n\n\"What about the others?\" Carina faltered, and Carlos' face turned grim.\n\n\"It gets worse. I found Pierre and Don dead...\" he grated; tears glittered in his eyes. \"With that bastard on the loose I had to check you were alright. This is where he would go.\"\n\nBoth Carina's fists were pressed to her mouth, her mind whirling. Gavin was alive. Michael was free.\n\nHe's coming for you.\n\nCarlos expected her horrified silence. \"They must be working together. But how Gavin could free him in such a short time...?\"\n\nThey both jumped as a scream sounded from directly above them, fading with a telling splash.\n\n\"They can't fight like Michael,\" Carlos ground out, raking both hands through his hair. \"They'll be slaughtered by those two. I could help them.\" Looking stricken, Carlos rested his head against the door with a deep exhale. \"But if I leave, you won't be safe. It's them, or you.\" He turned to face her. \"I choose you, Carina.\"\n\n\"No,\" Carina pleaded. \"Don't choose me. I'm not in danger. You have to get off the boat.\"\n\n\"Why?\" he questioned. \"How can you be so confident they won't hurt you?\"\n\nCarina stared with huge eyes, silently begging him to understand. Shocked realisation dawned across Carlos' face.\n\n\"You knew this would happen?\" he said blankly, feeling like he'd been sucker-punched in the gut.\n\n\"No!\" she vehemently denied. \"It's not what you think-\"\n\n\"Then tell me what to think.\"\n\nCarina stumbled back as he advanced on her. \"Michael would never let me go. When Gavin came...\"\n\n\"You fucked Gavin to get away from him?\" Carlos said flatly, struggling to process the situation. \"Is that why they were fighting?\"\n\n\"No! They were already hostile before I... There was no catch with Gavin. He really did save me, Carlos.\"\n\nCarlos' features relaxed. \"You don't want me to hurt him because he saved you. I can understand that, Carina. But-\"\n\n\"I don't want to be a kept woman anymore, Carlos!\" she blurted a random confession. \"I don't want-!\"\n\n\"You wouldn't last a week in the real world!\" Carlos exploded. \"You have no idea what monstrosities men are capable of!\"\n\n\"I have some idea,\" Carina snorted, and Carlos cast his eyes to the ceiling.\n\n\"That is nothing-! Jesus, Carina, I refuse to discuss this now!\" he said savagely, handing over his weapon. \"Stay here and hide. Lock the door after me.\"\n\nCarina dropped the gun and desperately seized his shirt. \"Please, Carlos, just run. It's not too late to save yourself. They won't hurt me-!\"\n\nCarina's face whipped to the side as Carlos sharply slapped her.\n\n\"I never thought I would raise my hand to you, Carina,\" he snarled. \"But to suggest I flee like a rat... Never insult me like that again.\"\n\nWith a palm to her burning cheek, Carina collapsed in a sobbing heap as the door shut behind Carlos. Several minutes passed and she remained on the floor, the discarded gun within reach.\n\nFinally realising the vulnerability of her position, Carina miserably picked herself up. Catching sight of her reflection in the wall mirror, she hesitated, staring at the bizarre combination of her fancy jumpsuit, lopsided ponytail, bare feet and miserable, tear-stained face. With the gun in her hand she looked like a character from a bad romance novel.\n\n\"What a fucking mess,\" she said bitterly, inspecting the firearm in her hands.\n\nThe doorhandle rattled, then the entire frame violently jolted as someone kicked against it.\n\n\"Please be Gavin,\" Carina whimpered, stepping back and raising the gun.\n\nThe door yielded to pressure and banged open.\n\n\"Fuck!\" Carina swore as Michael stepped in; parts of his shirt soaked in blood that clearly wasn't his own. \"Get the fuck out!\" she barked, too rattled by his presence to be squeamish about the blood.\n\nMichael smiled affectionately. \"Don't be a sore loser, sweetheart.\" Unfazed by the gun pointed at his face, he felt a familiar ache in his chest as he looked her over. Then his eyes fixed on the reddened side of Carina's face. \"Carlos struck you?\"\n\nCarina laughed harshly at his anger. \"You've done worse.\"\n\n\"But I would never beat you,\" he swiftly defended himself, cynically raising his eyebrows as Carina levelled the gun at him. \"What are you going to do? Shoot me?\"\n\n\"If you don't leave, yes.\"\n\n\"Go on, then, shoot,\" Michael challenged, his eyes intent on Carina's mouth. \"Because I am not leaving without you.\"\n\nThough Carina held the weapon steady, her emotions were plain for the most obtuse person to read; fear and reluctance.\n\n\"You can't do it, can you?\" Michael taunted, stepping closer.\n\nCarina threateningly brandished the gun. \"Stay away from me! I'll shoot you!\"\n\n\"I'm waiting.\"\n\nCarina hesitated; her eyes bitter with frustration that she didn't even have the guts to shoot him in the leg. Why the fuck couldn't she kill him? She should want to kill him, more than anyone.\n\n\"I can see it in your eyes,\" he smiled. \"Even after everything, you still have feelings for me. Part of you will always love me.\"\n\n\"Fuck the fuck right off!\" Carina shouted, with a disgusted shake as though to dispel his words from her proximity.\n\nMichael laughed at her appalled reaction. \"Enough games, Carina. Shoot me or give me the gun.\"\n\nBefore she could answer, Michael moved swiftly, knocking the gun from her grasp. Seizing her wrist before she could retreat, he hauled her against him, shuddering with a strange relief as she stood flush against his chest.\n\n\"I need you,\" he muttered, his body pulsing with excitement.\n\n\"I...I couldn't shoot you, Michael,\" Carina confessed, sounding defeated. Relaxing against his chest, she smoothed her free hand up his body to cup his cheek. \"I can't be with Carlos. He's tyrannical.\"\n\n\"That doesn't surprise me,\" Michael huskily chuckled, turning his face to sensually kiss her palm.\n\n\"I'm so tired of running,\" Carina sighed.\n\n\"Then stop running from me, sweetheart.\"\n\nWhen his hold on her other wrist relaxed, Carina tentatively searched between them. By the time Michael suspected anything, it was too late; Carina's hand brutally clenched around his balls.\n\n\"FUCK!\" he shouted.\n\nCarina yelped when Michael brutally tugged her hair, breaking her grip on his crotch. Before she was pushed a safe distance, Carina managed a clumsy kick between Michael's legs.\n\n\"Fuck!\" he retched, almost keeling over.\n\nCarina forgot about the gun and fled. Busy looking over her shoulder to see if he was on her tail, she collided with Gavin. They staggered together, but Gavin managed to hold her upright.\n\n\"Tell me you're not running from Ethan!\" he panted. His eyes searched her face, the palm-mark on her cheek, her crumpled jumpsuit and bare feet. Then he gaped at the blood on her clothes.\n\n\"It's not mine, or Michael's, and I kicked him where he deserved,\" Carina explained, her eyes fearful even if her words were stout.\n\n\"Where's Carlos?\"\n\n\"He left to help the men.\"\n\nGavin impatiently seized her arm. \"There's nothing left for him to help.\"\n\n\"Please don't kill him, Gavin. Promise me.\"\n\nGavin made an incredulous sound. \"I can't promise that.\"\n\n\"Please-\"\n\nGavin briskly walked her down the passage way. \"I'll throw him overboard. That's a good compromise.\"\n\nCarina's reply was silenced under Gavin's hand, and he backed into a storeroom, holding her tightly against his chest.\n\n\"Quiet,\" he whispered against her temple.\n\nCarina reached to close the door, but Gavin's hand was on her wrist.\n\n\"If the door is closed, he's more likely to check,\" he breathed. \"Just don't move.\"\n\nFootsteps approached, and Carina closed her eyes, fearing her heart might explode in her chest. A man's shadow passed by, but the footsteps didn't grow distant. An eerie silence followed.\n\n\"Uh oh,\" Gavin muttered, releasing Carina's mouth and slowly edging her aside.\n\nMichael opened the door, looking unimpressed. \"Really, Gavin?\"\n\nBefore he could say anything else, he glanced to the right and ducked as a gunshot rang out.\n\nNeither Gavin nor Carina budged as Michael scrambled to safety, Carlos blindly running after him, frantically clicking a pistol clearly out of bullets.\n\n\"That was convenient,\" Gavin murmured, dragging Carina into the open and running the opposite direction.\n\nThey emerged on top deck; the area well-lit with a scattering of fading shadows as the sun began to rise. Sounds of a brutal scuffle echoed along the ship, and a man shouted out in pain.\n\n\"That was Ethan,\" Gavin said grimly, and pointed to a small dark space under the stairs. \"Hide there.\"\n\n\"No,\" Carina refused, pulling against his hold on her arm. \"Please, Gavin, I have to go with you, and I...\"\n\n\"And you?\" he sharply prompted.\n\n\"And I...I'm scared to be alone.\" And I want to make sure you don't kill Carlos.\n\n\"Hm.\" Gavin looked very unconvinced but didn't argue.\n\nThey cautiously made their way to the other side. Michael lay immobile on the floor, seemingly knocked out. Carlos stood a few metres away, fishing through his pocket. Reloading the gun, he quickly turned as Gavin and Carina stepped into view.\n\n\"You just loaded three bullets,\" Gavin said. \"I'm willing to bet the chamber is otherwise empty.\" He tilted his head at the rather decorated gun in Carlos' hand. \"And that looks like an antique.\"\n\n\"My goodness, Gavin, you really are remarkable,\" Carlos snapped with a mix of admiration and exasperation. He extended his free hand to Carina, who stood in front of Gavin. \"Come, Carina.\"\n\n\"I'm afraid this is about to get complicated,\" Gavin said with an apologetic cringe.\n\nCarlos snorted. \"Carina, come here,\" he ordered, looking baffled when she didn't move.\n\n\"She's with us, Carlos,\" Gavin quietly revealed. Knowing the upcoming blow in store for Carlos, his tone was severe but sympathetic, like a police officer informing a parent their child had just died in an accident.\n\nThe scornful laugh died in Carlos' throat when he met Carina's eyes. She looked terrified, and guilty.\n\n\"No.\" Carlos frowned, waiting for her to reassure him. But she didn't. \"No. No!\" he insisted, clawing a hand though his hair. \"Not you! Not you, Carina, you couldn't... You...?\"\n\nThen the weight of her betrayal set in, and Carlos seized up, feeling as though concrete was being pumped through his chest. He drew a rattling breath. \"You colluded with them!\"\n\nCarlos pointed the pistol at Carina, who stood wretchedly idle and made no move to deny his accusation or run from the weapon. She felt she deserved whatever came next.\n\nStaring at Carina's remorseful face, Carlos paused, horrified that after everything, he still cared about her. Knowing full well that he should want to slice the girl into tiny pieces and feed her to wildlife, the urge to protect Carina remained as strong as the first moment he realised he was in love with her. Even now, he couldn't kill her.\n\nThe worst part was that he wanted their old existence back. If he could turn back time, he would do it. He would bury Michael alive and things would continue as they were. He would love Carina from afar, watch her with his brother, take care of her like he always did. He would buy her gifts to make her smile, inevitably become her brother-in-law and be Uncle to her children. They would have, strangely, grown old together. He loved her enough to be content with that.\n\nBut now Carlos realised his love was unconditional and unshakable. He was a weak, pitiable fool, and he could do nothing to change it. The truth came with an inconsolable torment that Carlos knew he wouldn't survive.\n\n\"How long have you played us for fools?\" he shouted, keeping the gun on her, he pointed to Michael's sprawled figure. \"With him! Were you fucking Michael, while Eduardo lived? Is that why you were so close?\"\n\nCareful not to move suddenly, Gavin smoothly inserted himself between Carina and the gun.\n\nCarlos blindly aimed, then noticed Michael stirring back to consciousness. Gavin rushed Carlos as he fired; the bullet missed Michael's neck by inches.\n\nA tense half-minute ticked by as Gavin and Carlos strained for control of the gun. Gavin managed to turn it from his face just in time as it went off again. Michael unsteadily staggered to his feet to assist Gavin.\n\nSeeing movement from the corner of his eye, and aware he fought a losing battle with Gavin, Carlos suddenly changed tack. Taking them all by surprise, he stopped resisting and pulled the opposite way.\n\n\"Carlos, don't!\" Carina shrieked.\n\n\"GOD DAMN YOU, CARINA!\" Carlos screamed, pulling the trigger before Michael could get a grip on his wrists.\n\nThe top of Carlo's head exploded, and Gavin fell back, palms pressed to his ears.\n\nA horrified silence followed. Then Carina started screaming. Looking exhausted, Gavin sat up to wipe sweat and blood splatter from his face, and even Michael kept his distance as Carina fell to her knees and seized Carlos' shoulders.\n\nSobbing hysterically, she shook the dead man as a pool of red quickly grew in a red circle beneath his shattered head like a deathly aura.\n\n\"I'm sorry, Carlos! I'm so sorry! Forgive me! Forgive me!\" she desperately whispered, over and over, wishing he could somehow hear her, that his body might absorb her remorse and understand this was never what she wanted.\n\nTears blinded Carina as she trembled uncontrollably. Warm blood coated her fingertips when she cupped his face. Whatever pain, whatever terrible event she endured that she believed surpassed her utmost limit, it always managed to get worse.\n\nCarlos was probably the one man who truly loved her. He fiercely protected her when she was with Eduardo. He spoiled her with gifts even though he was just a brother-figure. All he wanted was to keep her safe. And then she hurt him so badly, he couldn't live with it. He died by his own hand, because of her. It was so much worse than Eduardo's murder.\n\nCarina heaved and clapped a hand over her mouth, smearing Carlos' blood across her cheek. Then Gavin was there, his arm curled across her front to ease her back against his chest.\n\n\"Breathe, Carina,\" he instructed, rubbing his other hand soothingly up and down her back, feeling her body racked with spasms. \"Take a deep breath, or you'll choke.\"\n\n\"H-H-H-He...He...I...I'm going to be sick,\" she managed, her voice thick with tears. \"I c-c-can't b-breathe!\"\n\n\"You can. You're breathing right now. You can do it. I know it feels impossible, but... Ethan?\" Gavin glared at Michael, who had drawn closer and stood silently watching Carina, his expression unreadable.\n\n\"If you really love her...\" Gavin warned, his eyes burning when Michael finally looked at him. 'She's going into shock' he mouthed above Carina's head.\n\n\"Ceasefire,\" Michael said quietly, and walked away.\n\nGavin let out a breath of relief, glad he didn't have to immediately spar. But he knew the threat wasn't over.\n\nUnable to stop herself glancing toward Carlos' body, Carina shuddered and gagged. \"I didn't want this! I don't want this! I don't want this!\" she cried shrilly.",
        "Gavin cupped her cheek and pressed their foreheads together. \"Don't look. Breathe.\"\n\n\"I...I can't!\" Carina's eyes were wide with hysteria, her nails painfully dug into Gavin's shoulders. \"I can't! He's dead! Is he really dead? I can't! I can't!\"\n\nWrithing against Gavin, she choked for air, her breathing turned ragged as endless tears poured down her cheeks. Her face, jawline, neck seemed coated in them. Without warning, a spurt of vomit landed across Gavin's shoulder, but he didn't flinch.\n\n\"It's over. Close your eyes. Breathe. Close your eyes, Carina,\" he instructed, holding her in a tight hug.\n\nStill retching, Carina obeyed, and Gavin directed her to lean against his clean shoulder. Carina's eyelids felt saturated, like they floated in water. Gavin supported her in an unwavering embrace, and after violently coughing, Carina's panic eventually faded to misery as the warmth of Gavin's bulk soothed her nerves.\n\nEven as tired calmness washed over her, the grief of what happened was sharp in her mind, the tears continued from the corners of her closed eyes. She was grateful for the strong body keeping her upright. Gavin was warm, the natural scent of his skin was unfamiliar but pleasant. She wanted to disappear in it. She felt like sleeping, forgetting everything; taking a long nap and never waking up.\n\nThe nausea passed but Carina's stomach was still clenched in a knot, and she couldn't regain control of her emotions enough to breathe steadily. With a wretched sigh she buried her face in Gavin's shoulder as he gently rocked her.\n\n\"I'm going to carry you, ok?\" he murmured against her temple, and felt her lightly nod. \"Don't open your eyes.\" Adjusting position, he stood with Carina against his chest, then bent to scoop her legs.\n\nA strange numbness overcame Carina, her head weakly lolled against his Gavin's chest as she dimly wondered how she could ever move on from this.\n\nGavin carried Carina to her suite and carefully dismantled her jumpsuit. While Carina stood under the shower, he removed his tarnished shirt and returned to dry her off and dress her in an ivory silk robe.\n\nGavin's bare chest turned out to be everything Carina fantasised about, but she was too upset to process it. Showing no reaction to Gavin's shirtless state, she dolefully finished the glass of water he guided her to drink. Though she didn't speak, her swollen red eyes never stopped leaking tears as she robotically complied with Gavin's direction.\n\nIf Gavin was aroused by her brief nudity, he showed no sign, nor did he attempt to draw her from silence. Though mute, Carina was receptive to his presence and gently pawed at his bicep in a vulnerable gesture that asked him to stay. Gavin was tempted to remain and comfort her, but the hour was too critical. This was the calm before the storm.\n\nOnce Carina was tucked into bed, he locked her in and went to face Michael.\n\nHe found Michael on top deck, sitting with his knees drawn to his chest and watching the glow of sun peep across the ocean horizon. His dark hair was tousled in all directions, the healing bruise on his face lightly bled from taking a rough second hit. Carlos' body was neatly wrapped in what appeared to be a brown and beige-patterned tablecloth, with one end noticeably crimson-saturated.\n\n\"What a night,\" Michael murmured, not taking his eyes from the flickering sea as Gavin sat beside him. \"How is she?\"\n\n\"A mess, and I don't blame her. Some company you've been keeping,\" Gavin said sourly.\n\n\"It paid well.\"\n\n\"Fucking complicated, espionage. And ugly.\"\n\nMichael tiredly shrugged. \"The money was good.\"\n\n\"You took more than money, Ethan,\" Gavin said with clear criticism.\n\nMichael glanced Gavin's way, eyeing his bare chest with mild contempt. \"You want to do this now?\"\n\n\"Details first. Any vengeful Spaniards to worry about in the aftermath?\"\n\nMichael shook his head. \"With both brothers dead, there's only Samuel to pick up the pieces and he won't bother. He once said personal vendettas are the worst investment; you lose more than what you're avenging.\"\n\n\"It certainly ended that way for Carlos,\" Gavin murmured, stretching his legs out.\n\n\"If it means anything, I never intended to kill him,\" Michael sighed. \"And I've had plenty of chances.\"\n\nGavin turned his cold stare to the ocean. \"It doesn't mean anything. Tell me about the staff.\"\n\nAfter some consideration, Michael and Gavin agreed to let the domestic workers live. They were civilians, with limited knowledge of Carlos' business and likely unaware of the true purpose of the trip to begin with. The remaining evidence would shine more light on Carlos' operation than stray passengers.\n\n\"Alright, then.\" Michael got to his feet, still watching the ocean. \"I'm going to make coffee. I've gone too long without caffeine.\"\n\n\"The kitchen is under siege, remember?\"\n\nMichael pulled a face. \"I know this boat. I'd only go to the main cabin for a fix.\"\n\n\"Carlos' room? I'll come with you,\" Gavin replied, standing tall and ignoring Michael's cynical glare.\n\n\"You're gonna supervise me?\"\n\n\"Until you strike,\" Gavin smiled. \"Lead the way.\"\n\nIn Carlos' suite, Gavin leaned against the wall with his arms crossed, watching Michael get his morning buzz.\n\n\"Fuck, this is good,\" Michael grinned, inhaling the familiar bean scent before downing the remaining liquid.\n\n\"It's the simple things,\" Gavin said, still looking severe. \"I'm finding your attitude pretty callous, Ethan.\"\n\n\"You didn't spend enough time downstairs,\" Michael sneered, his eyes narrowing at the neatly patched cut on Gavin's cheek before resting on his wide chest. \"Can you put a fucking shirt on? There's no one to impress here.\"\n\n\"Maybe you should change. You're covered in blood,\" Gavin snapped back.\n\n\"You're right.\" Michael sheepishly inspected his soiled shirt. \"Taking out two guys with your ankles stuck together isn't the prettiest task.\"\n\n\"What are we going to do about Carina?\" Gavin inquired.\n\nMichael set the mug down with an angry clack. \"You interfered, we got in a fix, and now we're out of it. I'll call it even.\"\n\nGavin arched an eyebrow. \"So, when is this going to get ugly?\"\n\n\"Now.\"\n\nGavin ducked and the mug shattered against the wall above his head. By the time he straightened, Michael was on him like a spider, securing Gavin's weak point.\n\n\"Cheap shot!\" Gavin groaned, fighting to shift Michael's forearm from his throat.\n\nGavin threw himself back and Michael grunted with pain as he forcefully smacked the wall. Despite the agony thudding up his spine, Michael's grip did not waver.\n\n\"Sorry, Gav,\" he heaved, tightening his chokehold as Gavin's strength dwindled. \"We both know I wouldn't stand a chance in an honourable fight.\"\n\n\"And I knew you wouldn't play fair,\" Gavin faintly mumbled, before collapsing.\n\n\"Wha-?\" Michael tried to get his footing, then staggered and fell against the wall. \"Oh, fuck, no!\" he breathed dizzily, his mind swimming with furious self-chastisement.\n\nHe was so preoccupied with plotting a blindside, he never suspected that Gavin, the clever, strait-laced bastard, would have the foresight to lay a trap. Congratulating himself that he knew Gavin enough to presume an unfair ambush would give him advantage, Michael neglected to consider that Gavin knew him well enough to anticipate he'd play dirty.\n\nGavin knew he was a coffee addict. Gavin would have scoped out the vessel during his stay and found a multitude of drugs. He had a perfect opportunity to set it up after taking Carina below deck. Michael should have been alerted when Gavin said, 'lead the way', already knowing the exact location of Carlos' suite.\n\nMichael angrily aimed a swerving kick at Gavin's unconscious figure but missed the large target and ended up on his back.\n\n\"You motherfu...\" he slurred, his limbs relaxing despite the seething rage boiling inside him.\n\nGavin wasn't drugged, he would come to his senses first.\n\nMichael wanted to scream, but he couldn't. A strangled sound that would have been an impressive roar gurgled up his throat.\n\nHe was going to lose Carina, again."
    ],
    "authorname": "Bellie444",
    "tags": [
        "captive",
        "espionage",
        "intrigue",
        "noncon",
        "obsession",
        "romance",
        "spy",
        "yacht",
        "non-con"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-assassins-bride-ch-09"
}
{
    "title": "If I Knew Then... Ch. 07",
    "pages": [
        "If you had your life to live over, in the light of experience, would you change it?\n\nBut how much could you change, or would you? Other peoples' lives entwined with yours will change. And tiny changes can snowball in ways it is hard to predict. I wondered what would have happened if I had made just one choice - between two girls who came to a party, Penny and Jill, who I know now both fancied me then, and had both come to the party hoping to see me. 'Then', first time round, life version one, I picked Penny. My friend Len had got to Jill first. But 'now' I chose Jill. And everything was different. \n\nSo three weeks later, after the application of all my lifetime of acquired wisdom and the confidence that goes with it (especially what I knew about Penny) I found myself in bed with both of them. Jill, the girl I chose at the party turned out to be an adventurous and playful lover, at ease with her sexuality, and attracted to Penny as well as me. Penny, who I knew from life version one was a submissive bi-sexual with strong voyeuristic and exhibitionist tendencies, had become her lover, and mine. \n\nWould I make that change if I had the chance? Hell yes!\n\nJill woke me with a kiss, and a soft \"Good morning, handsome man.\"\n\n\"A very good morning, beautiful woman.\" I replied. \"Indeed an excellent one.\"\n\n\"Shhh. She's still asleep.\" Jill whispered, \"can you slip out so I can get out and go to the bathroom, please.\"\n\nWe both tiptoed out, and Jill flitted ahead of me to go to the loo. In a minute she called me in, and it was apparent that she was about to brush her teeth. \"I'm sorry darling, but I need the loo too, would you mind?\" I asked, meaning 'would you mind leaving.'\n\n\"Oh, no I don't mind,\" she said \"In fact I've always wondered what it looks like when a boy does it,\" and she turned to watch. \n\nI've never been one to suffer stage fright, but it was disconcerting. However, a man's gotta do what a man's gotta do. \n\nMore disconcerting was when she said \"Oooh.\" and came over for a better look. She ended up about a foot away from me, and the expression on her face was pure fascination. \"Wow.\" she said. \"What does that feel like?\" \n\nI laughed. \"Well, I suppose it feels the same for girls, relief if your bladder is full, but, it doesn't feel like much really. I mean, it isn't like coming, if that's what you mean.\"\n\nJill shrugged \"Yeah, I suppose it can't be that different from girls doing it. You must think I'm weird.\"\n\n\"No, not at all. Of course I've never seen a girl do it.\" I said \"but, I'd be interested to see that.\"\n\nShe looked at me, a bit startled, and then smiled. \"Okay. Next time.\"\n\nWe washed what needed washed and brushed what needed brushed, and headed back to the still sleeping Penny. \n\nShe was snoring. Quite quietly. Jill said \"Isn't she cute?\" and I had to agree. \n\nWe got back into bed, and cuddled and talked in quiet, intimate voices. We talked about school and parents, and my work on the MG and her driving lessons, and summer holidays. I realised it was the first time we had been alone to chat for days, and I was so happy just to talk with this wonderful woman. Then hunger started to make itself felt so I suggested we get up and make breakfast, but Jill didn't want Penny to wake up with no one there. \n\n\"That's easily sorted then, wake her.\" I said. \n\n\"No Sean, you wake her. I got the first kiss yesterday.\" she said, and slipped over me so I could move beside Penny. \n\nOf course for a moment I had her naked on top of me, which was a highly desirable occurrence, and both of us were tempted. Jill looked at me, and grinned, and said \"Later, lover, breakfast first.\"\n\nPenny was no longer snoring, but sleeping lightly, and I woke her by gently calling her name. She opened her eyes blearily and looked a little startled, and then grinned. \"Oh, Hi Sean\"\n\nI kissed her, and she sleepily put an arm around my waist, rolling toward me. I kissed her a bit more. She slowly woke up, and the kiss lingered, and her embrace became more intense. She noticed my erection pressing against her thigh, and giggled. \"Oh,\" she said \"Hi, Sean.\"\n\n\"Good morning, Penny. Sleep well?\" I asked.\n\n\"Good morning Penny, do I get a kiss?\" Jill asked, popping her head up over my shoulder. \n\n\"Yes, and yes.\" was Penny's reply. \n\n\"Hmm, thank you,\" said Jill, \"now Penny bathroom, Sean dress, I'll put the kettle and toast on, and come up, Sean can make tea and butter the toast while I dress, and we can be ready to go out in half an hour, just in time.\"\n\n\"Just in time for what?\" I asked. \n\n\"It's Sunday morning. What do you think? It's only a five minute walk to our church, so we won't need the car, and the fresh air will do us good. Come on, chop chop!\" she said and sprang up to go to the kitchen. \n\nPenny and I looked at each other, speechless, and she was out of the door before we could comment. \"Is she serious?\" I asked \n\n\"She sounded serious.\" said Penny. \"Good job I brought good clothes. Although I'll have to borrow a hat.\"\n\n\"A hat? They do hats? I don't even have a jacket!\" I said. \n\nWe went to dress quickly. I hadn't reckoned on church, so the best I had was a pair of black cords, and a white shirt. I'd have to borrow a tie. \n\nI went to the kitchen, and took over, Jill promised me a tie and jacket from her father's wardrobe, and scurried off. I watched her lithe naked form as she hurried away, and thought about sitting next to her in church. Not the best morning I could plan, but it could be worse. \n\nA few minutes later the two girls appeared, with a jacket that was a bit short in the sleeves for me and a tie I would never have bought. \n\nPenny was in a knee length skirt and had a coat borrowed from Jill, all dark blue, with a matching hat, and gloves. Jill was holding a long grey coat, blue hat with a brim, white gloves, and was wearing a Sunday dress - pale blue with little flower motifs. Both had got flat but not high heeled shoes. They looked the picture of modesty. I smiled, and said they were both lovely. Toast and tea were consumed standing up as I tied the horrible tie and slipped on the jacket. \n\n\"Not too bad,\" said Jill as she adjusted the collar, \"just keep your arms down and don't stretch too much. Now come on, or we will be late.\"\n\nWe trooped into the hall where the girls put on their coats and hats, and adjusted them in front of the mirror. When they were happy the two turned to me and Penny said \"How do we look? Suitably respectable?\"\n\nI smiled as I scanned them up and down. Penny was a very pretty girl, and the outfit was plain but subtly emphasised her blossoming womanhood. Jill would look good in a potato sack, so in that outfit she was stunning. Two tempting innocent nubiles. I whistled. \"Utterly respectable, and utterly beautiful, and utterly tempting. Every man in the church will be thinking the same thing as me.\"\n\n\"And what is that?\" asked Jill, playing coy. \n\n\"I will be sitting beside you, wondering two things and wishing one. I will be wondering, are those: tights, or stockings? If the latter, what else, if anything, are you wearing underneath those oh so modest skirts? And I will be wishing I wasn't in church, because I would rather be in bed with you two. And I will bet that even the Minister will be having the same ideas.\"\n\n\"Oh dear,\" said Penny, \"That would be very distracting. Would it help if I told you they are stockings, and yes, I have something else on, white lace with a little pink bow to match my bra and the suspender belt?\"\n\n\"Oh. Yes. Although I'm not sure that makes it less distracting.\" I said, grinning. \n\n\"And I'm not wearing stockings. Nor are they tights.\" said Jill. \n\n\"Oh. So what are they?\" I said. \n\n\"Have a look.\" said Jill, an she lifted the front of her skirt, slowly drawing it up. As her long slim legs were revealed I could feel my cock rising in sympathy with the dress. The smooth hose gave way to an embroidered band of elasticated stocking, and then bare thigh, but no suspenders. \"Hold ups.\" she said, and lifted her skirt higher. \"And nothing else,\" she added, unnecessarily as my eyes opened wider at the sight of her fluffy brown vee. \n\n\"Definitely not less distracting. Gorgeous, sexy, wonderful, beautiful, but definitely not less distracting.\"\n\n\"Oh dear,\" said Jill, \"So if you come to Church with us you'll be sitting there thinking about how I look now, here in the hall with my pussy bare, just ready for you to put your cock in me and take me in my Sunday best, right here against the wall while Penny watches?\"\n\nI stepped up to her and took her in my arms, kissing her hard and deeply. My hand found the naked skin of her thighs, and they opened at my touch, my fingers running into her fine-haired bush, pressing open her soft lips, seeking the wet warm opening within, entering her and taking possession of her body. \n\nJill made a guttural noise as my fingers penetrated her and kissed me back fiercely. Behind me Penny put her arms round my waist and began to undo my belt. I was surprised, but happy to let her. I pushed Jill back against the wall, opening her legs with my knee, squeezing her breast with my other hand as my fingers slipped out of her pussy and rubbed across her clitoris. She gasped and her hips bucked, and I felt Penny pulling my trousers and underpants down. My cock was free and Jill's legs were open, and I knew what to do. The look in her eyes as I rubbed my tip back and forth along her slit was priceless. Desire, love, joy, anticipation. I put my hands on her naked bottom and lifted her, pushing my hips forward, penetrating her in one firm stroke as I let her down onto my cock. She let go of her dress and put her arms round my neck, locking her legs round me, her soft cheek against mine, she let out a soft sigh, and I felt her flex her muscles inside, gripping me. \"Oh god, Sean, oh I wanted this.\"\n\nI lifted her and let her drop. Deep inside her I felt her heat and my cock twitched, I felt her body flex and flow, and heard her breath catch. Her scent was in my nostrils, light perfume, sweet sweat, pussy musk, desire and rapture. \n\nI pushed her hard against the wall, pushing the breath out of her, taking two strokes, lifting her up again, biting her neck, grunting as I drove into her. I felt Penny's hands on my bottom as she pushed against me. In my ear she whispered \"You two are so sexy. I want you next,\" as she pulled off my jacket. \n\nI couldn't get a proper stroke as we were, and lifted and swung Jill round, lowering her to the floor, momentarily slipping out of her. She lay on her back and held up her skirt as I knelt and penetrated her again, sinking full length into her as Penny helped her undo her coat. I took her deep and swift and she quickly writhed towards climax. I concentrated on her responses, wanting to see her come for me, amazed at her sudden frenzy. In moments she had turned from gloriously tempting innocent Sunday-School girl into passionate young woman, flushed with desire, thrusting her hips against me, wrapping her stocking clad legs round mine, biting my lower lip and gripping my back with her gloved hands. I knew she would come soon when she gripped my upper arms and began making little sounds at each stroke, bouncing her hips up against me. \n\n\"Oh Sean, that's it, oh, take me Sean, oh I'm coming, oh my, oh god!\"\n\nShe wrapped her legs round my waist and gripped me harder with her hands, I held still as she gently rocked and said in a sigh \u201cMmm hmmm. Sean Carver, you have some very naughty ideas.\u201d\n\nI smiled. \"You see that is exactly the sort of thing I will be thinking about in church with you two. Very distracting.\" I said, and took another stroke into her depths. She gasped. \n\nPenny said \"I think it might be a bit late for church now anyway. Maybe we should just go back to bed.\"\n\n\"Ok!\" Jill squeaked, as I took another stroke.\n\nI kissed her and pulled out, and pushed myself up so I was kneeling on her dress with her naked bottom and pussy exposed to me. She was pink and wet and so inviting that I nearly just took her again. Instead I bent to taste her, licking her sweetness up in one long stroke from beneath her pink crinkled ass right up to the soft hair covered mound above her slit. Jill quivered and moaned, and said \"Okay, take me to bed with you please!\"\n\nI helped her rise and she got her breath back and looked up at Penny, who was sitting on the stairs. \"Hey Penny, we've been neglecting you.\"\n\nPenny gave an enchantingly wicked smile, and said \"I've been enjoying the view. And learning.\"\n\nJill walked over to her, asking \"Learning what?\"\n\n\"Learning what you like. I didn't really believe it yesterday. And when I woke this morning I didn't believe yesterday had happened at all. But it's all true,\" she said, and hugged Jill, and kissed her. Then the two of them turned to me, and Penny said, \"Well you ravaged one little girl in her Sunday best. Want to make it two?\"\n\nI growled \"Be careful what you wish for, Penny.\"\n\nAnd she giggled and began backing up the stairs, saying \"Ooh Sean, whatever are you thinking of?\"\n\nI took a few steps toward her with deliberate menace, and Jill stood aside and made a sweeping gesture with her hands to usher me past. \"She's all yours,\" she said. \n\nAs I passed her I said softly \"You had better follow soon, just in case I need a hand.\"\n\nThe look she flashed me spoke volumes of lust and excitement, as she new exactly what I meant. \n\nI slowly climbed the stairs, mock glowering at Penny as she retreated. She lifted the hem of her dress to expose her stocking top as she said \"Now, now Mr Carver, just because I've got these on doesn't mean I'm that sort of girl. I'm a good girl I am.\" \n\n\"Miss Harty, I know just what sort of girl you are and I expect you will be very good indeed.\"\n\nShe had reached the top of the stairs, and giggled again as I got closer, then turned and quickly fled towards the spare room. I leapt after her, catching up with her as she went through the door, pushing her on into the room and across to the bed, which she fell onto face down. I flipped up her skirt and the back of her coat and was rewarded with a fine view of her stocking clad legs, bare upper thighs and small white lacy panties that exposed the swell of her bottom and emphasised the cleft between her buttocks leading to her most intimate areas. My hand shot up between her legs, thumb pressing her panties against her ass, fingers curling to push the lace against her pussy. I bent to bite and growl at the soft flesh of the junction of leg and buttock that was exposed between stocking and knickers. She squealed and writhed in a most arousing fashion. \n\nThe predator in me was awakened, and I was still in high arousal from being with Jill only minutes before. I pulled her coat and skirt back down and quickly flipped her onto her back, throwing her skirt up again and plunging my face between her legs, pulling her panties aside, tongue and lips rough on her pussy, sucking her clitoris as I slid a finger inside her and my other hand searched under her coat to grasp her breasts. \n\nShe was delicious and vocal in her appreciation, and as I looked up at her I saw Jill climbing onto the bed beside her. Jill had taken off her coat and hat and gloves, and was now undoing Penny's coat and then her blouse. The two girls kissed as I pushed Penny's legs up to open her further and slid my tongue deep inside her pussy. I rubbed my fingertip very softly on her ass hole at the same time, and pressed my nose on her bush and the area just above her clit. Penny reacted by pushing herself down towards me, rubbing herself up and down against my mouth and finger. She was suddenly very wet.\n\nJill was undoing Penny's skirt and trying to pull her blouse and coat off, which was obviously impossible, so I decided to help her. Between the two of us we had Penny rolled over and stripped of her blouse and coat, bra undone, skirt and suspender belt and panties round her knees all in ten seconds. Then we rolled her onto her back, Jill pulling of her bra as I dragged skirt and knickers and stockings off her legs. She was entirely naked, and Jill kissed her and ran a hand down onto her bush, a finger opening her slit. Penny was no longer in control of herself, her body rocked by the wave of feeling centred on Jill's finger. \n\nI stripped, while I watched my fianc\u00e9 finger her virgin girlfriend's wet pussy and suck on her beautiful honey coloured tits. Her brown crinkled nipples were so inviting that I bounced onto the bed beside her and took one in my mouth as Jill sucked on the other. My fingers joined Jill's in Penny's bush, and I slid one in beside hers, lower down. In unison we worked them in and out of the girl between us, and I saw Jill look at me as she sucked on the nipple in her mouth and her eyes sparkled. \n\nI moved up to kiss Penny's lips as Jill moved down to kiss her pussy. Penny's hand found my cock then, and she squeezed and stroked me as she jumped and gasped. I was grasping her left breast and rolling her nipple between finger and thumb, and my other hand was gripping her buttock. \n\n\"Ten minutes ago you looked like butter wouldn't melt in your mouth,\" I said \"and now I'd bet you'd like my cock in it.\" \n\nShe moaned and said \"Yes, Sean, give me your cock.\" Penny looked at me with wicked eyes as she pulled me up to her lips, sucking me deep and wanking me firmly into her mouth. It was my turn to moan. \n\nWhile Jill kept working on her pussy, and I enjoyed playing with her smooth and soft warm breasts, Penny sucked me and licked my shaft, dipped her head to lick my balls, and took me deep again, holding my balls as she rapidly stroked my shaft. For a girl who hadn't touched a man's cock until the day before she was making a hell of a good job of getting me close to coming in rapid time. \n\n\"You'll make me come if you keep doing that,\" I said. \"Do you want me to come in your mouth?\" \n\nShe pulled her head back and looked at me with her dark and wide pupils. In a voice heavy with desire she said \"No, I want you inside me.\" \n\nMy heart leapt, but I had to ask, \"Are you sure? You want me to put my cock inside you?\"\n\nOut of the corner of my eye I saw Jill raise her head to listen as Penny said in husky tones \"Please Sean, I want it inside me, like you do with Jill, take me like you take her, come in me.\"\n\nI bent to kiss her lips then and hug her and drew her up and around so she was lengthwise on the bed and I would have room to lie between her legs and still have my feet on the bed to help me push inside her. My cock was throbbing at the thought. As we moved Jill was pulling the duvet back and guiding Penny to slip under it, and in her other hand was a towel. I helped remove the quilt from the bed as Jill said \"Lift your bum,\" and she slipped the towel under Penny, and bent to kiss her pussy, running her tongue up her slit to open the lips and leave her wet. \n\nI knelt between Penny's open knees and Jill quickly sucked my cock, and then took me in hand as I leaned forward over Penny, kneeling with my cock pointed down towards her pussy, kissing a nipple on the way past, ending up looking at her face, her big brown eyes, her lips slightly swollen, face a little flushed. \"Penny love, Jill is going to help me put it in okay? I'll be gentle, just relax. Alright?\"\n\n\"Yes, Sean, I want this, I want you in me.\"\n\nJill had moved up beside her and was holding her hand as well as my cock, she kissed her shoulder and said \"Darling Penny, I am so glad you stayed with us this weekend. We love you Penny, both of us. I'm so happy we can both make love with you.\"\n\nBefore she could reply I pushed my hips forward a little and my tip came in contact with Penny. Her eyes opened a little more, she made a little gasping noise and she looked nervous, but then Jill started moving my cock around, massaging her friend's pussy lips and across her mons. Penny relaxed a little, and as Jill used my cock in a circular motion around the top of her slit, brushing her clitoris, Penny relaxed a little more, opening her legs a fraction as she gave a little sigh. ",
        "\"Nice, yes?\" asked Jill. \n\n\"Uh huh.\" said Penny. \n\n\"How about that?\" said Jill as she changed to a straight up and down movement, rubbing my cock between Penny's labia, opening her and spreading her wetness over me. \n\nPenny was back up to a state of high arousal now, her body responding to Jill's caresses with a slight flexing of her hips and changes in her breathing. Her eyes had that far away look, flicking instantly into concentrated focus when a new sensation was experienced. Her voice was dark and husky again as she replied \"That's nice too.\" \n\nI pressed forward by a tiny amount. She flexed in response, yielding then pressing back against me, and Jill began using my cock to circle Penny's opening, pressing her lips out to each side, the circles getting smaller as she concentrated on the entrance, and Penny's hips joined in the dance. I looked down between our bodies and could just see the swell of my cock between the dark curls and swollen wet lips of her pussy. I pushed forward half an inch, and felt the tip engage in her. Penny felt the change, she went still for a moment and her breathing paused. She was staring straight into my eyes, into my heart. \n\nI smiled encouragingly at her with a tiny nodding motion and whispered \"Ok, Lovergirl?\"  She took gentle breaths, and I felt her hips relax as she nodded slowly. I pushed in a little more. \n\nEyes and mouth and legs open wide, Penny sucked in a deep breath and froze for a long few seconds before her body relaxed again and the breath flowed out of her. \"Oh gosh, oh that's, that's good,\" she breathed, still staring at me, hips making tiny rocking motions. She looked at Jill, who was gripping her hand and watching her friend's face intently, smiling at her and living the experience with her, her other hand resting on Penny's bush, a fingertip touching my shaft just at the edge of my glans. Penny nodded at her with tiny trembling movements, and gripped her hand back. \"You're right. Oh you're right. It is...\" she paused as I pushed a little more, the whole head of my cock now inside her, tightly gripped by her gently stretching tunnel, \"oh gosh! Oh gosh! Oh!\" she panted. \n\nJill took her hand from my cock and moved it to take Penny's hand, freeing the other one to slip under her girlfriend's head, and stroke her hair. \"It's okay Penny, I'm here, it's alright, it's good isn't it? Relax darling and Sean will hold it there for a moment, okay?\"\n\n\"Uh huh.\" Penny managed and I felt her relax again, and she said breathlessly \"It is big though.\"\n\n\"Yes darling, but it will fit, all of it, all of his lovely cock, filling you up, doesn't it feel good?\"\n\n\"Oh, Jilly, it is so big, but, Oh!\" Penny almost yelped as I pulled back half an inch and then pushed forward an inch. \"Oh Jill! Oh gosh, oh he's inside me!\" she said, thighs clamping against mine. \n\n\"Yes honey, Sean's inside you, like he has been in me, and it feels good doesn't it? I love his cock in me, I'm so glad you can feel that too, oh my lovely lucky girl.\" said Jill and she kissed her deeply. Penny gave herself to the kiss, and her body to me, legs opening again, as I repeated the short stroke a few times, then pushed a little deeper, took another short stroke and then a long one. I was an inch short of fully inside her and I rested for a moment. With Jill kissing her my position was getting awkward, and I might collapse on the two girls, so I carefully brought my knees up under her thighs, raising and spreading her legs, and rocked back to sit on my heels. I put my hands on her thighs just behind the knees and pushed her legs up further, and had a fantastic view. \n\nJill, naked but for her hold up stockings was kneeling on the bed with her perfect round bottom and pink pussy lips just a foot away, demanding to be stroked. Her breast was in profile, the pale skin and engorged dark pink nipple in contrast to Penny's darker hand which cupped it. Jill in turn was squeezing Penny's full and dark nippled breasts, while exchanging kisses open mouthed. \n\nEach kiss and squeeze of their hands was accompanied by a flexing of Penny's back, enough to rock her hips and make my cock slide a half inch in and out. And that was also part of the incredible view. Penny's honey coloured body, naked, legs raised and spread, dark bush parted by my pale cock, inner lips clinging to my shaft as I pulled back, glistening wet and velvet smooth, warm and tight, gripping me as I pushed back in, sinking until my hair and hers entangled, my inner thighs up against her buttocks, my balls pressing against her asshole, all the way in, filling and stretching her, opening her fully for the first time. \n\nI held it there, relishing the view, feeling her body flex and squeeze me, pulsing around my cock. I pushed against her, pulling her onto me with my hands on her waist. She moaned and arched her back, throwing her hands up above her head. Jill looked round to see what I had done to cause this reaction and smiled at me when she saw what I was doing. \"All the way?\" she asked, but needed no reply. She turned to Penny and said softly \"Sean's in you all the way now, all of him, all his cock inside you, you have taken him all inside.\"\n\nPenny just groaned, and I took a slow stroke, pulling out half way and sliding back in, prompting another groan and making her head twist from side to side, and her breasts move in a fascinating way. I did it again, a little faster, a little longer, pulling on her waist, bumping up against her, bouncing her tits, driving her breath out of her, watching her whole body rise to meet my thrusts. \n\n\"Come up here Jill, come and look over my shoulder, come and see her like this.\" I said softly. Jill did as I suggested, standing on the bed behind me, her hands on my shoulders, leaning over me to look. Beneath us my cock bridges the gap between my pale belly and Penny's golden flesh. She was open to us, open armed, open legged, neck and nipples, belly and breasts, armpits and bush, pussy lips and navel, everything exposed, mouthwatering, wanton, carnality incarnate, more beautiful, desirable and naked than she had ever been before, utterly, utterly unspeakably lovely. It was heartbreaking. It was innocent and pure. It was worthy of worship, of ravishment, a moment of glory and overwhelming lust. \n\n\"God she's beautiful.\" Jill whispered in a voice full of awe. \"I never knew. Oh Sean, take her now, make her come, make love to her for me.\"\n\nShe grabbed my face and kissed me, then said urgently \"I love you.\"\n\n\"And I love you, Jill darling.\" I said, and turned to the girl beneath me, leaning forward onto my hands and knees, lowing my chest to her breasts, my lips to her mouth. I kissed her, and was lost in her, as her arms and legs gripped me gently and our hips joined in rhythm, her kisses lingered and her tongue softly touched mine, she murmured \"Sean my love, thank you lover, oh, that is wonderful.\"\n\n\"I'm glad, Penny love, because you are wonderful to be inside. You are wonderful to make love with.\" I murmured back, but from then on no words were necessary. \n\nIt was slow and gentle at first, and her body set the pace. I stroked her, kissed her, pressed deep into her, drew out so only my tip was inside her and delighted when she pulled me back in. I caressed her soft warm skin, the delicate smoothness of her under arm running into the firm softness of her breast, the hardness of her nipple. I held her by the waist, by the hips, by both hands under her bottom, by her shoulder blades and up to grip her shoulders to pull her down onto me hard and deep, by her hands above her head, leaving her helpless and exposed to my view, my body, my cock that relentlessly shafted in and out of her warm, wet, willing, no longer virgin pussy. \n\nShe began to speed things up then. I knew she had a submissive streak, that she enjoyed being dominated, the freedom to be wanton that being controlled gave her. She liked being restrained so that couldn't be blamed for not trying to get away, had to give in to the cock inside her, had to let herself be taken and be forced to enjoy it. I knew she would love to be tied up, or down, gagged and blindfolded, exposed to other men and women, ordered to do the things she loved to do. Now with her hands held above her she was no longer in control, not clinging to me and colluding in her ravishment, and not able to fight me off as she felt she ought to do, but really did not want to. She was free to let herself go, to be ravaged, to come like a dirty girl would. \n\nNow her body pressed against me, writhing, pushing up with her hips, a faster beat, wanting me to drive deeper, harder, longer. I was pulling almost all the way out, feeling the colder air on my shaft and balls and then the rush of warmth as I plunged into her body, balls slapping against her, the noise of her pussy being filled and our stomachs meeting, sudden sweat on her skin, sticky and slick, her breath becoming ragged. Her legs raised, feet pointing to the ceiling, thighs wide, pussy tilted straight up and open, my cock straight down and deep.  I gripped her hands with both of mine, pulling her down the bed as I drove up with my legs, and driving the air out of her lungs in hard high pitched grunts. She was close. \n\nSo was I. \n\nBeside us all this time was Jill, watching, touching me, stroking my back, resting a hand on my bottom to feel the muscles there as I moved, sometimes pressing down to push me harder into Penny. She had stroked the back of Penny's thighs when her legs were lifted, and I felt her finger feeling my cock slide past it and slipping up to Penny's clit as I took shallow strokes, but for the most part Jill was content to leave Penny to me, to let her experience her first real sex with a man without distractions. So it was only later when we talked about it that I knew that Jill had sat fingering herself beside us, watching between her friend's legs to see my shaft sliding between her pussy lips. \n\nPenny was thrashing beneath me now, and unreleased her hands. She grabbed me, pulled me to her body, kissed me fiercely, her hips bucking hard against my strokes, every spasm accompanied by a whimper, a grunt or a near scream. I was holding on to the sheet to keep us down, my hips driving hard, concentrating on holding my orgasm until the girl beneath me hit her own heights. \n\nAt last my cock was clenched by her pussy, her legs wrapped round me, her hands locked behind my neck and her head was flung backwards, as Penny cried out \"Oh God! Oh God! Oh God, Oh, ooooOOH!\" and her body convulsed. \n\nI let myself go, relaxing and pounding her, grunting \"God, I'm, Going. To. Come. In. You. Oh. God. Penny. I'm. Coming in you!\"\n\nAnd I poured myself into her, my back arched and hips thrust down, Jill's hands pushing down on my ass, Penny thrashing beneath me, gasping, coming again as she felt my spunk flood her, my cock twitching and pumping into Her, my hands grip her and take her. I fell on her then, taking her mouth, telling her she was lovely, beautiful girl, fantastic body, thanking her, gasping for breath, stretching down to suck those glorious tits again, shoving my still hard cock up into her and pumping it, kissing he lips and saying \"My lovely lover, Lovergirl,\" letting my hips wind down to a halt, kissing her gently and holding her softly, saying with love \"Are you okay?\"\n\nShe laughed. A clear light laugh, and tears were in her eyes, and she said \"Oh yes, Sean, oh yes. That was beautiful Sean, that was wonderful.\"\n\nI kissed her again and said \"And so are you, Lover, thank you.\"\n\nJill kissed me on the cheek then, and said \"Hi there Handsome man, hi there pretty girl,\" she kissed Penny, \"you looked like you were having fun.\"\n\nPenny stretched and wriggled, which made my softening cock harden. \"Oh, yes. Lots of fun.\" and she looked coy. \"How about you Sean?\"\n\nI was about to answer when she squeezed my cock with her pussy. I gasped in surprise. She giggled, and Jill said \"I take it that's a yes then?\"\n\n\"Uh huh.\" I said \"And if you keep doing that I will have to do it again.\"\n\nPenny grinned, and kissed me and said \"Later, darling, you were very gentle and very very good, but I think I need you to take it out now.\" She looked a little sad as I lifted up and out of her, and sighed as my tip came free. \"Oh, thank you, Sean.\"\n\n\"Are you alright?\" I asked, concerned. \n\n\"Fine, fine, just not used to it. Yet.\" she smiled.\n\nJill pushed me aside, saying \"Move over, you ravening animal,\" and bent to look between Penny's legs. \n\nPenny made a shocked \"Oh!\" sound as Jill touched her lips and gently pulled her open. \n\n\"Hmm, no blood, just a little bruised maybe.\" said Jill, gently. Then wickedly added \"Perhaps I should kiss it better.\" \n\nI watched as my fianc\u00e9 bent to lick the come soaked petals of her girlfriend's newly deflowered flower. \n\nPenny writhed gracefully as Jill licked her out, quickly approaching a second orgasm while I held her hand and bent to suck on her nipples. \"That's it come for us again,\" I urged her, \"Come for Jill, Lovergirl.\"\n\nJill was drinking my come and hers, and had one finger on Penny's clitoris, her pale skin contrasting with Penny's dark curly bush and dusky flesh. I worked on her breasts, squeezing the soft flesh, sucking her nipples erect, tasting and breathing in the warm milky scent of her. I moved up to her throat, my tongue rough on her, my teeth grazing her skin. Penny's hand found my cock and gripped me, wanking me as she reached to grip Jill's head and press her mouth hard into her sex. I moved to take Penny's mouth, to steal her breath, my tongue in her mouth as my woman's was in her pussy. \n\nPenny cried out and her back arched, and she called \"Oh, Jilly, oh, no, enough, stop, stop!\"\n\nWe held her then, one on each side, kissing her gently and stroking her, Jill rolling her towards me, spooning her from behind, my arms around them both, kissing them both, rocking them as Penny whimpered and shook, and subsided into soft warm stillness.  \n\nJill pulled the quilt up over us, and we snuggled and talked. \"You had no intention of going to church this morning did you?\" I said. \n\nJill laughed. \"No, but I'm impressed that you both went along with it. And wasn't it worth getting dressed up?\"\n\nI had to confess I had enjoyed Jill's outfit, and Penny's. Jill said \"I put that dress on last week, with the hold up stockings, but I was wearing panties, and went to church with my parents, an I kept thinking about you. I really wanted you to be sitting beside me, putting your hand up to find the bare skin, maybe fingering me. My knickers were soaked by the time the service was over.\"\n\nPenny was blushing a little then as she said in a shy way \"That happened to me on the Friday after we played snooker, in school. I was in the library on a free study period and I began thinking about kissing Mike, and how I was going to see him after school. Next thing I knew I had a real tingle down there and I thought I'd wet myself. I had to go and change into my PE knickers. I didn't understand what was happening at all.\"\n\n\"So you were wearing maroon pants under your school skirt then?\" I asked. \n\nJill laughed. \"You have a thing about that, don't you?\"\n\n\"What?\" I asked. \n\n\"A wee fantasy. A little turn on?\" she pressed, amused. \n\nI had to smile. \"Well, yes I suppose I do. In school it was the subject of debate. Ciaran Clarke has this running joke where if you mention any girl he instantly says 'Black lace' or 'big white cotton' or whatever. One day on the bus to Games we passed a group of girls from your school, and he said 'maroon, maroon,maroon, maroon, maroon, nothing, maroon, maroon.' It got a big laugh, but I have to be honest, I had a little moment of fantasy.\"\n\n\"What other fantasies do you have?\" Jill asked\n\nI paused a moment. \"Well, all sorts of things.\" I said, prevaricating. \"Like what?\" asked Penny. \"Don't be shy, Sean. Not after what we have just been doing.\"\n\n\"Well, okay. I suppose we have been living out some of them, but fantasies are funny things. Little inner dreams, but if you talk about them they sound lame, or weird. If I tell you mine you will have to tell me yours, ok? I suppose one of my fantasies has always been being in a room working at a desk and in comes a girl in a coat and stockings, and nothing else. Of course with her coat done up I don't know that, but she turns my chair round, pulls off my trousers and then undoes her coat and just sits down on my cock, no preliminaries, just starts riding me, and letting me play with her breasts. I like the surprise of it, the freedom of it. She is in control, willing, and yet devoted to my pleasure. I suppose I used to think that girls didn't want sex, that I was bad to want it and want them to do it. So a willing girl was a big turn on.\"\n\n\"Hmm,\" said Penny, \"I think that could be arranged.\"\n\n\"Yes, but the girl would have to surprise him. So we'll have to wait a while. What else?\" said Jill. \n\n\"Well I always wanted to try one girl riding me while I was licking out another.\u201d I said, and Jill nodded, so I went on \u201cDoing it in a forest. I like the idea of being outdoors, in the fresh air, on a sunny day. Or on a boat, a dinghy on a river. In a field of long grass. On the balcony of a high building. In a lift. In school, in the swimming pool changing rooms. In the pool. In the shower, which is fun. In the car. Lots of places.\"\n\nJill laughed \"Basically everywhere.\"\n\nI shrugged and laughed as well. But Penny said \"Who with? Who is your fantasy girl?\"\n\n\"Ah now that isn't fair. Here I am with two beautiful girls, how can I name one, or name someone else altogether without offending you?\"\n\nJill said \"We already talked about this - the list includes just about every girl in school, except Alison.\" \n\nPenny laughed then. \"I can see why. Poor Ali. But what about famous people? Pop stars, film stars?\"\n\n\"Lesley Anne Down. Audrey Hepburn. Jane Seymour. And I used to fancy the Indian girl from Pam's People.\"\n\n\"Ooh, you never told me that.\" said Jill. \"An Indian girl?\"\n\n\"Well, why not. I think it would be exciting, interesting, exotic, to be with an Indian, or and Asian, Chinese or Japanese girl, or a black girl. Or a blonde or a redhead. All different.\"\n\n\"All at the same time, no doubt.\" said Jill, teasingly. \n\n\"Maybe. What about you, Penny? Fancy any famous actors?\"\n\n\"Brian Brown, Mel Gibson. Jimmy Stuart, when he was young of course.\" Penny laughed and added \"and I had a crush on John Craven.\"\n\nJill snorted. \"So does my mum!\"\n\n\"But my fantasies were about maybe kissing and holding hands, or being picked up and hugged really hard, I think yours were a bit more, well, advanced?\"\n\nI had to agree. \"Yeah, but then boys talk about it differently. And there were always porn mags about. And books.\"\n\nJill snorted again \"Girls talk about sex.\"\n\n\"Oh I know, but boys talk about it in a sort of rough mechanical detail. It's biology and misogyny plus bravado. Not nice, or gentle or romantic, but lots of testosterone. There's a lot of that sort of stuff in the porn mags as well. Not all of them, I mean Playboy and Mayfair are ok, but some are really rough.\" \n\n\"What about the books?\" Penny asked. \n\n\"That varies. First time I read about people having sex was in 'Jaws'. Although I couldn't work out what they were doing. But then I got Emmanuelle. Both volumes. And then The Perfumed Garden, the Kama Sutra, the Joy of Sex, the Pearl, that sort of thing.\"\n\n\"Gosh,\" said Penny. \"No wonder you're good at it!\"\n\n\"Thank you, darling.\" I said, \"You know you are pretty good yourself. That last squeeze you gave me was an eye opener.\"\n\nPenny laughed \"Girls can read too.\"\n\n\"What are you two on about?\" asked Jill\n\n\"I read about it in that 'She' magazine that Kate had in school last week.\" said Penny\n\n\"Oh yes, everyone was talking about that. I haven't seen it yet. Tell me!\" said Jill enthusiastically. ",
        "\"Well, I only got a quick look at break, with Jo and Kim, so I only really picked out one paragraph, but it was about sort of squeezing up your muscles to tighten up everything down there. It said to practice with pulses when you weren't doing anything, so I've been trying all week. But there were pages and pages of stuff about all sorts of things.\"\n\n\"Right,\" said Jill. \"I think we ought to get a copy. Why don't we go find a newsagent, and have some lunch.\"\n\nPenny was keen \"Okay, and then we can come back and read and have all the fun of taking Sean's clothes off again.\"\n\nLunch was fun. The girls had shooed me out while they got dressed, and appeared on the stairs both wearing skirts and blouses and jumpers and coats. I was left to wonder what lay beneath. \n\nJill had suggested a place in Carrick, about twenty minutes drive away, so I drove. Penny was in the front, at Jill's insistence. In the restaurant Jill sat beside me, Penny across the table. With Penny's foot and Jill's hand both at play it was surprising I could eat anything at all. They decided we should share a dessert. It was Jill's idea to get a banana split and three spoons. Then she did a very provocative thing with the spoon, licking and sucking the ice-cream off it. Penny followed suit, trying to out-do Jill. Then they started feeding each other, and me. It was utterly obscene. I loved it. They ended up in giggles. The guy at the counter gave me the most jealous look I have ever seen. \n\nIn the paper shop next door they had the copy of 'She' that we wanted, and also a well stocked top shelf. Jill said to me \"I've never seen one of those. Which one is best?\" and nodded at the girlie mags. \n\n\"Well, Hustler is very raw. Escort and Razzle are like The Sun with more nudes - very crude. Club, or Mayfair would be the most balanced. Mayfair is a bit more upmarket, Club is a bit more explicit, without being too gynaecological.\"\n\n\"Okay, we'll get them both.\" she said, and lifted a copy of Club International and Mayfair. I was shocked rigid. I had never got over the embarrassment of buying porn mags. After all you know that the shopkeeper knows that you are going home for a wank. The invention of the Internet was a great relief. \n\nJill simply walked up to the counter, cool as cucumber, put the three magazines down and asked for packet of Polo's. The bloke behind the desk grinned widely. He grinned even wider when I went past him. \n\nWhen we got to the car Jill was in the front. \"I can't believe you just did that!\" I said. \n\n\"Why do you think I wanted to go somewhere so far from the house?\" Jill asked. \n\nI had no reply. We drove back to Jill's house with Penny in the front again, Jill sat in the back reading out the article from 'She:' 'Ten Tips for memorable sex: how to make him come back for more'. \n\nPenny and I sometimes commented, as she talked about Massage, with oil, Neglected Erogenous zones (male nipples, toes, the perineum, anal play) Before Fore Play (dressing sexily, making a date, talking fantasy, romantic meals, showering together) After Words, and everything in between, including the Kegel exercises and some tips about oral sex, and 'Getting Kinky'. Penny giggled over that last category - the idea of being blindfolded or being tied up, or tying me up, obviously appealed. \n\nMy opinion was asked frequently - would I like that, or often did I like that when we did it before. Of course the answer was always 'yes'. At the end Jill said \"Interesting. Lots of good tips. I will have to read it again and think about that.\"\n\n\"But too many things to try out before your parents get back.\" said Penny. \"We'll just have to arrange more time to try them another day.\"\n\n\"Really?\" I said. \n\nPenny looked at me, suddenly anxious, and said \"If that's okay? If you don't mind. I didn't mean to ...\"\n\n\"Of course it is okay!\" I said, \u201cIf we weren't doing sixty miles an hour on a five-lane motorway I would hug you!\u201d\n\nJill reached from the back and gave her a hug instead, saying \"Penny darling, that's lovely! As long as I get to play too!\"\n\nPenny blushed, confused, protesting that of course she meant both of us, and ... \n\nJill shushed her into silence, and said gently \"I'm glad you want to come back and be with us. I thought that this afternoon would be the end of it, and you would be off to find another boy.\"\n\nPenny went all shy. \"I, well, I might like another boyfriend, but, well, I want to, to make love with Sean again, but I want to, to make love with you, Jilly. I want to be with you, and Sean.\"\n\n\"Good.\" said Jill, and she kissed her on the neck with a little more than girlish affection. \n\nGlancing at Penny I noticed the slight flush of arousal start on her cheeks, and I placed my hand on her knee and squeezed it.\n\nPenny let her head fall back so Jill could kiss her neck and earlobe, and let her knees part so I could slip my hand between them. She shuffled her bottom forward and parted her legs more as I moved my hand up her inner thigh, and Jill's hands came round her to squeeze her breasts. I found the top of her stocking, the sudden smooth skin after the texture of the nylon, and Penny spread her legs even wider. \n\nI had slowed the car a little, taking the inside lane, and was concentrating on the road ahead, as my fingers found her panties and pressed the material into the fold of her pussy. Penny groaned. \n\n\"Is Sean being bold, Penny? Is he fingering your pussy?\" said Jill\n\n\"Yes. He's touching my knickers.\" \n\n\"Why don't you take them off?\" suggested Jill. \n\nI removed my hand, and changed gear, as we neared the end of the motorway. From there is was a ten-minute drive though the edges of the town and into the suburb where Jill lived, and gear changes were frequent, so Penny had a most frustrating time. \n\nShe pulled up her skirt and undid her clips, and lifted her bottom to pull down her blue lace panties. Then she did up the clips, but left her skirt hiked up so I could see her bush, and her pussy when she opened her legs and slid her bottom forward. The angle was awkward for my finger to enter her, but it was easy to rest the heel of my hand on her mons and dip my middle finger between her lips to rub her clitoris. \n\nFrom the back Jill kept Penny talking, asking her what I was doing, how it felt, what she would like me to do, what she wanted Jill to do, would she like to do that to Jill and what would we do when we got to her house. By the time we got there I was in discomfort as my erection was caught in my jeans, Penny was twitching and breathing hard and Jill was bright eyed and pretty flushed as well. \n\nWe got in through the door and Jill was whispering something to Penny, who nodded, said \"Okay,\" and beckoned to me. She headed to the family room. \n\nJill patted my bum and pushed me after her, saying \"I'll be in in two minutes, and expect you to be in by that time too.\"\n\nAs we walked down the hallway Penny was unbuttoning her coat, and her blouse. As she entered the family room she slipped them off and threw them onto the sofa, walking infinite middle of the room, dropping her skirt and reaching to undo her bra. \n\nI pulled off my jacket and shirt, and undid my belt as she tossed her bra aside. Penny looked at me then, wearing nothing but shoes, stockings and suspenders, and said \"I want you naked Sean. I want you inside me. Now\"\n\nI was already levering my shoes off , and bent to sweep underpants, trousers and socks off in one go. On the rug in front of the television Penny knelt on hands and knees and said \"Take me this way Sean, from behind, like you did to Jill.\"\n\n\"Your wish is my command\" I said stepping over to her, kneeling behind her, shuffling forward between her open knees, pushing the head of my cock down to rub it against her hairy slit, parting her thick soft lips and locating the entrance to her depths, pushing into her gently but firmly, feeling her pussy open around me, the wet slickness of her body enveloping me, squeezing me as she pushed back against me, one long slow slide right to the hilt, a long journey to heaven. \n\nI had my hands on her hips, and pulled back on her as I pushed my cock forward, pressing my stomach against the curve of her bottom, rocking gently with my full length inside her. Penny arched her head back and moaned, \"Oh gosh. Oh my goodness. I never knew that could feel so good.\"\n\nI didn't reply, I just pulled my cock almost all the way out and slid it back in firmly, pulling her onto me, holding it in deep. \n\n\"Oh that's wonderful. It's so big, it fills me up, but it is just perfect. Oh gosh, why didn't anyone tell me about this before?\"\n\n\"Would you have believed them?\" I said \"If I had offered to do this a fortnight ago you wouldn't have let me, even if I told you it was good.\"\n\n\"I know.\" She gasped, and began to rock back and forwards a couple of inches. I held still as her movements allowed me to watch my shaft sliding in and out, slick with her juices, her lips clinging to my cock. \"I was so stupid. Oh gosh. I could have been doing this for years. Oh yes, oh yes.\"\n\nI was about to say something about me being happy to oblige at any time, when I heard Jill say \"Oooh, aren't you a pretty pair?\"\n\nShe was standing in the doorway with a tray of glasses filled with ice and coke. My heart skipped as for half a second I felt instinctive guilt, caught red handed (or red faced or red cocked) two-timing her, but she was grinning as she went on to say \"My god, but that's the horniest thing I've ever seen!\"\n\nJill walked round to put the tray on the table beside the sofa, then dropped down onto the couch and took a glass, taking a sip from it before putting it back on the tray. All the time she was looking at us, as Penny pushed herself back on my cock and I ran my hands over her soft hips and buttocks and back. \n\nOn the sofa Jill lifted her feet up onto the cushions, opening her legs, pulling her skirt up, and ran her hands down to her crotch, over the nylon hold up stockings, over her bare inner thighs, onto the black panties, pulling them aside, giving me a glimpse of her furry pussy before she covered it with her hand. She moved her fingers in a circular motion, massaging herself all over her slit, and then pulled herself open with her left hand and found her clit with her right index finger. She was stroking herself in time with the motion of my cock in Penny. \n\n\"How does our boyfriend's cock feel in you from behind Penny? You like it that way?\" she asked. \n\nPenny grunted, an animal noise, and looked round at her with flushed face, panting as she thrust back hard against me \"You know how it feels. Oh. Deep and big and hard and, ugh, good. Ugh, very good.\"\n\n\"And you Sean, you like Penny's pussy? You like her on her knees?\" said Jill, eyes sparkling.\n\n\"Oh yes, very good. Hot and wet and tight and deep.\"\n\n\"You should see what you look like from here.\" said Jill. \"I can see him going into your pussy, Penny, his whole length just going right into you, it is amazing, I can't believe it all fits in you, and my god, the way your tits move when he does that, they're gorgeous, I just want to hold them and suck them, but they are so beautiful to watch as they move like that!\"\n\nI was pushing hard into Penny's body, each stroke cushioned by my pelvis hitting her round smooth buttocks. I could imagine that her breasts would be swinging in time to my thrusts, and the idea of what Jill could see, that I could watch if we were doing this in front of a mirror, or a video camera, turned me on even more. I gave extra force to a couple of strokes to make the motion even larger. Penny gasped and Jill sighed. \n\n\"Are you going to come soon Penny?\" said Jill \"Sean loves having his cock in a girl when she comes, don't you lover?\"\n\nI managed to say \"Yes, come for me Penny, come on my cock.\" I built up speed to match Penny's increasingly rapid hips. \n\nPenny was gasping, and making the little 'oh' noises that preceded her climax. Jill knew the signs, and said \"Reach down and rub yourself Penny. Rub your clit and make yourself come. That's it, oh god that looks so sexy.\"\n\nIn moments Penny began to shake. My cock was suddenly squeezed inside her, pulsing waves of muscle contractions, milking me, drawing me into her velvet centre, tight slippery warmth all round me. I was close to coming myself, I could feel the tightening in my balls, the tingle in my cock head as she pushed back against me and her pussy closed around it. I held still as she shook and pulsed on my cock, and then began to subside, dropping to her elbows, head down, as I held her hips. \n\nI pulled out in one swift sudden movement. Penny gasped. She gasped again when I slammed my cock back into her, all the way. Half a second pause and I pulled out again, half a second and back in, hard and fast right into her wet and spasming depths. \n\nJill was wide eyed as she watched us \"Good god, Penny! You should see what he's doing! Oh what does that feel like?\" she cried.\n\nAll Penny could do was shudder and pant and gasp. I looked down on her silk smooth body as her muscles twitched uncontrollably. She was on a strange high. This position, and what I was doing to her, was playing on her submissive side. She was powerless, passive, hardly even holding herself up. Her body was mine to use, to fill with my cock and my come, or to deny her that pleasure, to leave her empty and gaping. She didn't know each time I pulled out if I would take her again, and the anticipation as well as the longing and the sensation of being possessed, wanted, claimed, dominated, as each irresistible, but so much desired, stroke filled her up was enough to trigger another mini climax. Eventually her balance collapsed, her legs gave way, she slumped forward with a groan, and lay panting and twitching, one hand still on her clitoris, her hips rocking in arrhythmic fashion, oblivious to the world.\n\nFor a moment I considered going on with what I had been doing. Her legs were spread and I could see Penny's open pussy, pink inner lips spread, slick and inviting, easy for me to lie on tip of her and enter her, ride her hard and fast for my own pleasure, take her and come in her. But I checked that animal urge. I knew from other memory that she might float through that, hit an orgasmic plateau where her sense of self was swept away and she gave herself to the physical sensations, but until she had more experience it would be too easy for that to spill over into something she would be scared by, hurt by, something she would feel was abusive. I lay down beside her, cradling her, rolling her over and kissing her and holding her, speaking softly to her, bringing her back from her over stimulated swoon. \n\nWe were joined by Jill, who was concerned by Penny's sudden slump. Soft kisses and caresses and gentle words sank in, and Penny came round, smiling. \"Pheweee!\" she breathed out. \"What the heck was that? What did you do to me?\"\n\n\"Did you like it?\" I asked.\n\n\"Yeah. I think so. Yeah.\" she said. \n\nJill laughed \"It looked good to me too.\" and she kissed Penny. \"Want to come and sit on the sofa with us and read dirty magazines, Penny dear?\"\n\n\"Oh, yeah. If Sean will carry me.\" Penny smiled. \n\nJill, still clothed, Penny in nothing but stockings and suspenders, and I, entirely naked, got languorously tangled on the sofa with the copies of Club International and Mayfair. Jill was sitting at one end, Penny tucked beside her, head on Jill's breast. I was under their legs. If Jill held one side and I took the other we could all see the magazine at once. We started with Mayfair. \n\nIndex, letters page, faced by first photoset, a girl in flight attendant uniform (or at least partially in it) Pretty girl, long stocking clad legs, open blouse, sultry look. Over the page she was less and less clothed .\n\nJill had kept up a commentary on the girl's looks and poses, but when we turned the next page Penny said \"Oh my. That's just rude!\"\n\n\"What do you mean, darling?\"'said Jill. \n\n\"The way she looks. Just looking at you like that. And you can see her hair, and, well...\" Penny shrugged \n\n\"But you were just kneeling like that over there, darling, and I could see your hair, and Sean's cock going into your pussy.\" said Jill. \n\n\"Yes but that wasn't in a magazine for anyone to see!\" said Penny, blushing. \"And it is the look on her face. She looks, well, hungry.\"\n\n\"She looks like she wants to have sex with the cameraman. Or the reader. With the men looking at the photo. With you. Yes. Which is sort of the point, in these mags,\" I said. \"Readers want the girls to look like that. Not just nude, but available, willing, inviting.\"\n\nJill turned the page. Cars. Adverts. Article about some German sex industry festival with some small photos of topless models posing with grinning journos. Then the next photoset. A tanned blond girl on a beach, with big blue eyes and ridiculously large breasts \u2013 silicone for sure. \n\n\"Oh, look at her bush. It is as blond as Shauna's.\"\n\n\"Jill!\" said Penny, scandalised. \n\n\"What? You've seen her in the showers. No tits but golden blond hair all over.\"\n\n\"Well, I didn't really look. And you shouldn't tell Sean those things.\"\n\n\"But Sean likes to know. Anyway, he has probably guessed, or Tim will have told all the boys anyway.\" Jill said. \n\n\"No, Tim is a gentleman, he doesn't talk about her that way.\" I put in. \n\n\"Anyway, what do you mean you don't look?\" said Jill. \n\n\"Well, I try not to. Its rude.\" said Penny\n\n\"But fun?\" said Jill \"I mean, you obviously like girls, you like my tits and my pussy. Didn't you look at me in the shower after gym? I looked at you.\"\n\nPenny was blushing. \"I told you, I tried not to.\"\n\n\"But you liked what you saw?\" said Jill, teasing her. \"I did. I wanted so much to suck your tits,\" Jill added, squeezing Penny's breast for emphasis. \n\n\"Really?\" said Penny. \"But we haven't had gym together for two years. You, you fancied me then?\"\n\nJill hugged her and said \"Darling, I have always had a buzz about you. I love you, and I've always thought you were so pretty and sexy and cute. Of course then I just wanted to hug you nude, and kiss your nipples because they just made my mouth water, but now, I want every bit of you.\" Jill kissed her, and Penny returned it with passion. Under Jill's hand Penny's brown nipple went hard and crinkled. Very mouth-wateringly suckable, I thought.\n\n\u201cHmmm,\u201d said Jill, \u201cI think you like that too.\u201d\n\nPenny leant her head on Jill's breast again and sighed, and said very quietly, \u201cYes, love, I do.\u201d She looked up at me from beneath her long lashed and said shyly \u201cI like kissing you too Sean. And I liked Mike. I do like boys. But I like girls too. I love you Jilly.\u201d and she hugged her tightly. Jill hugged her back.\n\nAfter a moment Jill said \u201cSo Penny love, If you like girls, who else did you like to look at in the showers?\u201d\n\nPenny sat up and looked at her \u201cJill Wyatt! What a question!\u201d\n\nI said, laughing, \u201cYou asked me who else I fancied.\u201d\n\n\u201cWell, that's not the same. Anyway, all boys fancy all girls, that's just the way it is. Except Alison. Who I never fancied either, before you ask,\u201d said Penny, vehemently.\n\n\u201cBut you do fancy other girls? Jill, obviously, but what about Shauna, whose blond bits you did notice in the shower?\u201d I teased.\n\n\u201cNo, not really Shauna. I mean, she is pretty, but, well, to be honest, like Jill it was breasts that made me think. I like Jill's. Shauna's are, well they aren't really.\u201d\n\nJill laughed \u201cTwo fried eggs on a plate. Although I noticed this year she is either wearing a padded bra or they have plumped up a bit.\u201d\n\n\u201cPoached eggs.\u201d said Penny, and both girls giggled.\n\n\u201cSo who else has nice tits in your gym class, Penny?\u201d I said.\n\n\"Okay, okay.\" said Penny, laughing, \"Tina. Tina Rahman\"\n\n\"Oooh. I never saw her. How did you? She's not in our year?\" said Jill\n\n\"Netball. She was on the Seconds with me, before she moved up to the Firsts.\"",
        "I interrupted \"I don't know this Tina, who is she?\" \n\n\"Indian girl, you'd like her, pretty thing, dark flashing eyes, very dark skin like chocolate, raven hair. Although dark hair on her arms as well, which you might not like.\" Jill laughed. \n\n\"I don't mind that.\" I said \"Hmm, pretty Indian girl, and you never mentioned her when I told you about my 'Pam's People' fetish?\"\n\n\"Sinhalese.\" said Penny. \"And half Italian.\"\n\n\"So what is she like naked? What is it about her tits you liked so much?\" Jill asked, excitedly. \n\n\"They are just perfect. Two absolutely round cones. They point straight out of her chest. and her nipples are almost black, about an inch and a half across, and then the tips are about half an inch across and half an inch long. They just poke out like knobs. You couldn't help looking.\"\n\n\"Or wanting to suck them?\" asked Jill. \n\n\"Well, not then. But thinking about them now...\" Said Penny.\n\n\"You've got a taste for tits.\" said Jill, smiling. \n\n\"Haven't we all?\" I asked. \"I knew I should have gone to a girls school.\" I leaned forward to brush a finger over Penny's nipple. \"So what do you think of the girls in the pictures? Would you like to suck their nipples?\"\n\nPenny took the magazine and flicked through. Jill pulled out the other one. \"I'd suck hers.\" said Jill, displaying a photo of a girl on her back, legs spread, holding a lollipop to her lips.\n\nI laughed, Penny gasped. \"Oh my goodness!\"\n\n\"I told you 'Club' is more explicit.\" I said.\n\n\"Well Penny darling, if she was here on the rug like that, would you suck her tits if she asked?\" Jill said\n\nPenny was staring at the picture, half shocked. \"Or lick her pussy?\" said Jill in a low voice. \"You like licking pussy don't you, Penny dear? And doesn't her pussy look nice like that?\"\n\n\"Oh my.\" Penny whispered. \"she looks so, so naked.\"\n\n\"Naked and sexy.\" said Jill. \"Like you on the bed this morning.\"\n\nPenny blushed. \"But how could she let pictures of herself like that be printed?\" she whispered. \n\nJill replied in her wicked voice \"But wouldn't that turn you on, posing for a photographer, letting him see you, knowing that hundreds, thousands of men would see you, want you, look at your pussy and tits and want to kiss them, and suck them, and put their fingers in you, and their cocks, of course. All of them wishing they could take you, squeeze your nipple just like this, slide a hand along your thigh like Sean is doing. All those men, looking at you and wanking and coming.\" \n\nAs she spoke Jill was turning the pages, showing Penny more pictures, and then flicking past some mostly print stuff to another photo set. Penny didn't reply, but she was tuned on by these ideas, and moved against my probing fingers as they found her lower lips. \n\nAs I twirled my finger through her hair they found the next set. Another girl, this time she was shaven, all but for a triangle on her mons. Both girls made noises of surprise, although the fact that my finger had parted her pussy lips might have added to Penny's reaction. \n\nJill was caressing Penny's breast, and now Penny was holding the magazine and closely examining the pictures. \"Gosh, now that does look, ooh. Would you want to do that?\" \n\n\"Shave my pussy, or shave yours?\" asked Jill. Penny just bit her lip. Jill went on \"It might be nice, but the stubble when it grew back, ugh.\" \n\n\"That wouldn't take long to grow out though. And you could just keep shaving me. If you, and Sean liked the look of it.\"\n\n\"What do you think Sean? Should we shave our pussys?\" said Jill.\n\n\"Well, I like them just as they are. I've seen some pictures of women totally shaved. I think that looks weird, like a little girl, or a plucked chicken, so maybe not completely, but I know girls like to change hairstyles, and as Penny says it will grow out.\"\n\n\"You could shave me, and then Sean would have one hairy and one smooth to play with, see what he prefers.\" Penny said, a little breathlessly. \n\nJill glanced at my hand between Penny's open legs, and said \"Well maybe, but there seems no doubt he likes yours already.\"\n\nI grinned at her, and said \"Maybe Penny should lend you a hand, if you hold the magazine.\"\n\nJill took Penny's hand and guided it up her skirt. Penny took the hint. I could just see the back of her hand but it was obvious that she was pushing a finger inside Jill and had her thumb on Jill's clit, mirroring what I was doing to her. \n\nJill turned the pages of the magazine and found the reader's stories page. She began to read the first one out. Supposedly from a man boasting about having picked up a girl who looked exactly like the girl on page 28 of the precious month's edition. About ten lines in she was reading about how 'she was hot to go, and pulled out my prick and sucked me like a Hoover.' Penny giggled. Jill read on, soon reaching the line 'she got her knockers out for me to squeeze,' which got another giggle and then 'I was near to blowing my balls in her mouth, but then she stood up, bent over and pulled down her knickers and said \"I need a good shag, stick that big dick in my hole and screw me hard.\" So I lined up my prick and just shafted her.' \n\nPenny didn't giggle this time. She said \"Oooh that's rude!\" but I could tell she wasn't turned off by it. \n\nJill read on, about the man 'shafting her roughly but she loved it, calling out \"Harder, screw me harder\" and she came with her muff clamping me like a fist as I blew my load into her.'\n\n\"Muff?\" said Penny \n\n\"A furry thing you put your hand in to keep warm.\" I said, slipping two fingers in and out of her and using my thumb to brush over her bush. \n\nPenny moaned and shifted her bottom, and said \"I know, I had just never heard it used to mean a girl's bits.\"\n\nJill started the next story. A young woman (25) telling about a holiday encounter. She and her friend stripped off among the sand dunes, and a caught a local boy spying on them. 'His dick stuck out in his shorts like a truncheon and Sharon said \"Let's have a look at that then\" She pulled down his shorts and it was huge. Ten inches at least and Sharon could hardly get her hand round it. She could only just get the end in her mouth.' \n\nPenny shuddered. \"How would you fit one inside you?\"\n\nJill said \"Well these women in the story manage. Listen. 'Sharon lay back on the rug and Spyros put his big dick up against her. Slowly he pushed it in. Sharon said \"Oh fuck that's huge! Keep going boy I want all that in me! Oh fuck my cunt with that big chopper!\" and Spyros started fucking her hard. She came immediately.' Hmmm. Doesn't sound too realistic to me.\"\n\nPenny had gone still and her mouth had dropped open as Jill read this. Now she said \"Jill! How can you say those things!\"\n\n\"I'm just reading it out.\" said Jill. \"And they are just words. Okay, they are not words I would use, I think, and I see what Sean means about the way these magazines talk about sex, it isn't the way girls would, but if you think about it, is what this says any different to what the three of us have been doing?\"\n\n\"Well, but even so, that's rude!\"\n\n\"Not as rude as this one...\" said Jill. \n\nIt was a story about a girl getting picked up by a couple at a party. She fancied the guy and his wife said ok. They went to a spare bedroom and the wife stood by the door 'I pulled his cock out and sucked him up hard. It was a nice size, eight inches, and he pushed it down my throat, which I love doing. He fucked my face for a good ten minutes before saying he wanted to see my pussy. So I pulled off my mini dress, I had no knickers on of course, and lay back with my legs open. He just stuck his cock in my twat and fucked it right up me in one go. Then his wife came over and sat on my face. Her slit was dripping honey, and I lapped it up while he banged me hard. He was fucking me so deep he was pushing my tongue up his wife's twat. She came at the same time as me, and her husband pulled out and shot his load over my stomach. Then I heard him say \"I'm going to the bathroom\" and she said \"Keep licking me, bitch. You'll get fucked again in a moment.\" A minute or two later I heard the door open and she said \"Hurry up and fuck her, this slut's cunt is getting cold and she needs heated up to lick me better.\" Then my legs were spread again and I felt a huge cock slamming into me. The woman was right. With that big cock fucking me I was more than happy to lick her cunt, and she came again, soaking me with her pussy juice. Then she climbed off me and said \"Thanks kid. Enjoy the rest of the night.\" I looked up at the guy fucking me. It wasn't her husband. There was another woman there, who walked over to the bed and climbed over me. She said \"I hope your tongue isn't tired.\" and sat on my face. It was a long fun night.' Signed Maxie from Nottingham.\"\n\nAs Jill read I was concentrating on Penny, getting her as turned on as possible. Even though the language was raw and the story was crude, the ideas were working. Then when Jill turned the page there was a photoset of two girls. Of course there was no really intimate contact shown in the photos, but it was raunchy enough to push Penny's buttons. I decided to up the pace and slipped off the sofa, kneeling between Penny's legs. I bent to kiss her thigh, then her stomach, then her hairy mons, and down to her pussy.\n\nJill kept up a running commentary on what the girls in the photos were doing, and brushing Penny's breast, and making suggestions. Penny began to loose control. I helped her slide down and open her legs further, running my tongue up and down her slit, putting my finger on her clit, using my other hand to open her lips wide.\n\nI looked at her then. This open flower, pink and sweet, slightly brown tinged edges to her inner lips, dark curls surrounding it, flushed with arousal. That morning I had taken her virginity, opened this pretty flesh with my cock, come inside her, and watched as Jill then licked her out. I gently pushed a finger into her, and pressed another against the opening of her ass-hole. I sucked on her clitoris. \n\nPenny's gasps were smothered by Jill's kisses. The magazine was forgotten. Jill took both Penny's nipples and pulled on them, rolling them and squeezing her breasts, and kissing her deeply. \n\nIt didn't take long to make her come. I thought of the description of a slit dripping honey, and smiled as I drank her sweetness. \n\nJill pressed Penny over on the sofa as she kissed her in post orgasmic haze, and I lifted her legs so Penny could lie full length on the seat. Jill was on top of her, kissing her, and saying \"Pretty Penny, my lovely lover girl.\" and she moved down, kissing Penny's nipples, her navel, her bush, her smooth brown thighs, parting her pussy lips with her pointed pink tongue. As she moved down the girl's body she had placed her feet on the floor, and was kneeling beside me when she was kissing Penny's inner thighs and hairy mound. \n\nI moved behind Jill, and lifted her skirt. Her legs opened as I ran my hands over the curve of her bottom and in between her thighs, touching her soaked panties, and pressing against her. She wiggled her bottom, and opened her knees wider. I pulled her skimpy knickers down and off her. With both hands on her ass I pulled her open to lick her delicious pussy, and up over her ass. One long slow lick, and I kept moving up, kissing her lower back and then straightening, leaning back, pushing my hips forward, guiding my cock into the furry cleft, into her body, into her soft warm depths, tight and inviting. \n\nFor the second time in an hour I was balls deep in a teenage pussy, taking a girl from behind, watching as her pink wet lips clung to my shaft when I pulled back and her little crinkled asshole pulsed. This time her skin was pale, the pussy pinker, the hair around it a pale brown, not quite as curly. I held her waist, pushing the skirt up, and pulled her onto me, feeling her open up as my cock went deep, and my balls hit her clitoris. \n\nJill wriggled to let me get in deep, tilting up her bottom, parting her knees another inch. Her mouth was busy but I heard her sigh. \n\nIt was heavenly to be in her again. I liked taking Penny, she was a pretty girl, lovely curvy body, and wonderfully responsive, but I was in love with Jill, and that makes all the difference. I wanted her naked. I wanted her facing me, kissing me, wrapped around me. So I began to try to undress her. I found the zip at the side of the skirt. With the waistband loose I could pull up her blouse and reach her bra to unclip it. I smoothed my fingertips over her skin beneath the strap, round her sides and under the cups, taking her warm, soft flesh in my hands, cradling her breasts and feeling her hard nipples against my palms. \n\nHer tight pussy tightened even more. I wanted her naked so much I could hardly breathe. I pulled her upright, away from Penny, and pulled her blouse and skirt up over her head. Unfortunately the cuffs of her blouse were still buttoned and they caught on her hands. She struggled with them while I hugged her to me, her smooth back against my chest, her breasts in my hands, my mouth on her neck. The tip of my cock was just inside her and as she moved it popped out. She made a little noise of surprise and disappointment, but I moved so that the length of my shaft was rubbing along the cleft between her thighs, over her pussy and clit. I slipped a hand down to hold her mound and push her back on me. She got one hand free, and then Penny reached out to help with the other. \n\nFor a moment I looked over Jill's shoulder at the nearly naked girl on the sofa, who was leaning toward us with her beautiful breasts hanging down, and I thought of the first time I had seen them in another life. It would be in a few weeks time, in a nearly dark bedroom in a friend's house at a party. Light through a crack in the curtains throwing them into profile. Stunning then. Still exceptional now. I loved her tits. And I loved sinking my cock in her pussy, and I knew she had the potential to be a superb cocksucker. But then I turned my attention back to the naked girl in my lap. \n\nI tried to kiss Jill's lips but the position was too awkward. I murmured \"I want you now my love, lie down with me,\" and rolled back, and over bringing her with me onto the rug. In a moment I was on top of her, between her legs, kissing her mouth, touching her breasts and pressing my tip to her pussy lips. She lifted herself to me, opening her legs as she raised her bottom off the rug and impaled herself on my cock. \n\nI sighed, and felt myself slide into her, her legs coming up to wrap round me, her arms on my back, her breasts soft against my chest as she said in a hoarse whisper \"I'm yours Sean, your woman, take me Sean, show me heaven.\"\n\nI was already there. Her scent filled my nose, light and fresh, overlain with the sweet smell of Penny's sex which both of us had just been licking. Her skin was against mine from cheek to toes, her hands playing on my back, my ass, my shoulders, her thighs and calves against my legs, so soft and smooth. Her breasts against me, and the feel of my stomach on hers, and her delicate tongue in my mouth, and her wonderful pussy holding me, all combined as she moved beneath me to drive the world out of my mind. I was in her, in her body, her arms, her legs, her hair, in her mouth, and her eyes. She was in me, filling my ears and nose, my lungs, my gut, all I could see and taste and feel was her. And it was heaven. \n\nMaking love with Jill was always special. It was a meeting of equals. Penny was always subservient, which can make a man feel dominant and powerful, and can be a hell of a turn on, and I have been with dominant women and that can be fun too. But with Jill is was a perfect flow, each giving and taking, responding to each other, open about our needs and wants, equally desirous of each other's pleasure. We were in tune, in perfect tempo and rhythm, together on the one. This was no exception. We flowed into each other, and I could feel her heart beat, her breathing raise and fall, her muscles ripple beneath my fingers and around my cock, the silk of her hair, the drag of a nail across my stomach, the touch of teeth on my shoulder. And all the time the pressure built, the pleasure grew, the ecstasy took us both over. Her first orgasm was quiet, a matter of a deep sigh and a catch in her breath, and I paused as she shuddered and clung to me, but then she moved again and we got caught in the maelstrom and it became a harmonious frenzy, wild and free but connected, one organism dancing a polyrhythmic ballet, her coming again and again, rolling over to ride me, and then again on her back for my final plunge and I lost myself in her again, coming and feeling my heart explode along with my balls. I never wanted to have to breathe again, if I could just keep kissing her.\n\nBut I had to breathe, and so did she, and I looked down at her beatic face. Her lips were parted and her cheeks flushed, and her hair surrounded her head like a rumpled halo. When she opened her sparkling soft eyes there was a deep smile in them, and she whispered \u201cHello, handsome man\u201d in a voice that was filled with pure love. \u201cHello, beautiful woman.\u201d was all I needed to whisper back, before we kissed again.\n\nIt took us a while to reconnect with the rest of the world. I had to move to let her hips relax, and I rolled into my side, taking her with me. She curled round me, and planted little kisses on my chest, and I was cradling her in my arms and kissing the top of her head when I became aware of the girl watching us from the sofa a few feet away. I looked up, and Penny smiled. \u201cThat was beautiful.\u201d she said, in a soft voice filled with wonder, and I thought, a little wistfulness.\n\nI just smiled back and nodded, and rocked Jill, and a little while later she disentangled herself from me in soft flowing movements, and sat up, turning to face her friend. \u201cHey Penny. You okay?\u201d\n\nPenny leaned forward off the sofa and kissed her, gently, taking her face in her hands. \u201cMore than okay, lover. Happy. Happier than I have ever been.\u201d \u201cI'm glad, but why so happy just now?\u201d said Jill\n\n\u201cBecause I've seen you making love, and it is the most joyous and lovely thing I've ever seen.\u201d said Penny, and her voice cracked, and she burst into tears. \n\nWe both hugged her then, and ended up all three of us on the sofa, wrapped around Penny in the middle. They were tears of joy, but as so often happens the light in her had thrown the dark shadow s up more starkly, and she needed to talk about her fears and shame. \u201cI'm so sorry,\u201d she wept, \u201cTo ruin your perfect moment, I'm sorry.\u201d\n\nJill reassured her, and so did I, and I noticed Jill called her 'Lovergirl' again. The name had stuck. Penny confessed what had made her suddenly weep. She had sudden doubts about the rightness of what we were doing, even though she was in awe at the obvious glory of what she had seen, and that spilled into a guilt racked spiral of doubt about her making love with me, and with Jill, and about any future we might have together. \u201cI can't ever come between you two, I know, but, Oh God, I want you Jill, to be mine, like you are Sean's. Oh, God that is so bad. Oh I have to go, I have to go!\u201d she wailed and tried to pull away from us.\n\nIt was a crisis point, a turning point. Another of those moments when a decision can change the world. I could agree with her, tell her that she was brave and beautiful and I admired her, and that she was a good person, better than I could be, that she need feel no guilt, and that I would always respect her for being adult and unselfish in realising her emotions and not allowing them to make her do something she thought was wrong, even though it must be heartbreaking to tear herself away. I could talk her round to thinking she was still the good guy here, and that we loved and admired her, but that she was right, she had to go. And Jill would agree with me. We could send her out into the world stronger, and more open minded, and keep our friendship, and return to just being the two of us as a couple. But Penny would be left alone knowing what she was now, in a hostile world. I knew that she would take her emotions to the extremes. She was capable of being happily bi-sexual, but in that culture at that time, such things were taboo. Knowing she loved women would become a demon in her mind. It would force her to choose not to love men, because she would see that as a lie, that it would be deceiving the man because she knew she had that other side, and he could never be enough. She would be driven into an underground existence as a gay woman, which in Ireland in the 1980's was not a happy life, but long for a man, which the beleaguered lesbian community would see as a betrayal.",
        "The alternative was clear. Not to let her go. In a previous life I had been in love with her and lost her, and I had thought myself over that pain and jealousy. I had thought I would have some harmless fun, and so would Jill, answer would all come out better off. Penny would have discovered herself, her sexuality, the joy and fun of it, and go out in the world and make a glorious life. Jill and I would stay friends with her, maybe swing with her and other partners, but we would be just a couple again.\n\nI wanted that. To be just the two of us. Three can be fun, but it is a crowd. \n\nBut I didn't want to let Penny go under such a burden. I couldn't be hers, and nor could Jill, but she could be ours. So that is what I told her. \n\n\"No Penny. You are not going.\" I said on a firm but gentle tone. I had learned years ago how to handle her in this state, although it had not been enough to stop her leaving me for another woman. \"Now sit down and listen. Good girl. You are quite right, you cannot have the same relationship me or with Jill that Jill and I have together. But we cannot have the relationship you have with Jill, and she cannot have the relationship you have with me. We are three points in a triangle, three different lines connect us. But inside those lines is a whole range of possibility and connection that we share. I am very fond of you Penny. More than fond. If I hadn't found Jill, if I hadn't got talking to her at that party, I could easily be your boyfriend, and maybe we would have had Jill over for the weekend, or maybe not. And I'll not speak for Jill, but maybe if the two of you had just found each other and realised your feelings before now, well, you guys wouldn't have looked at me at that party. You wouldn't have been there. You would have been tucked up in bed reading porn mags to each other and making love. Or maybe you would have agreed that you both fancy me and have come to the party with the intention of getting me in bed with both of you. Whatever way it would have been, we are here now. And whatever way it goes in the future, let's not rush to decide it. You love Jill. So do I. She loves me and you, in different ways. And I love you, and I think you like me. There is love there. It is tricky, we need to find balance, but I don't think we should run away from it. And I don't think it would be right for Jill and me to let you go like this.\"\n\nPenny tried to protest but Jill grabbed her and hugged her. \"I won't let you go either. Sean is right. What we have together is different to what I have with him, but I love you Penny. And maybe I'm only realising how much I love you now. I won't lie, I have just made love with Sean and it was incredible, and I can't say how good, and I want it again, but that doesn't change the fact that my heart aches at the thought of you leaving. I want you, darling.\" Jill's kiss was fierce an passionate, and Penny's doubts and fears crumbled in the heat of it. \n\nThey both ended up weeping, and Penny clinging to Jill, and I hugged the two of them and they both clung to me, and there were kisses all round, and then the universal panacea of a cup of tea had to be made. I had to smile at the sight of the two of them, one naked but for stockings and suspenders, the other wearing nothing but a smile, standing in the kitchen chatting about having to do their homework for school the next day. \n\nWe sat naked in the kitchen at the table, and talked about everything. Love, sex, sexuality, religion, parents, children (Penny was surprised I wanted them and that we had talked about it before) and living together. By the time the second pot of tea was drunk we had agreed that we would try to arrange for the three of us to share a house next year. We sealed it with a kiss, and then Jill said \"Let's go to bed. We have an hour before we have to get dressed and clear up.\" \n\nJill took Penny's hand and lead her up the stairs, I enjoyed the view from below. And behind as I followed them. When they got to the landing Jill said \"I don't know about you, but I need a pee.\" and turned toward the bathroom. I thought of our earlier conversation, but decided not to pursue that notion another time perhaps. Penny went with her, I quickly went to sort out the bed, and slipped into the bathroom as the girls came out. \n\nWhen I got back to the bedroom the two girls were kneeling on the bed with a space between them. They were both entirely naked. Jill patted the gap and said \"Lie here, Sean.\"\n\nI got into my place and the two of them looked down on me. \"Close your eyes.\" said Jill \n\nThey blindfolded me. I could feel them move about the bed, and then one of them took my cock in their hand. And a moment later there was a mouth around the end of it and another at the base of my shaft. Hands rams over my body, both up and down my legs and up to my face, simultaneously. They brushed over my nipples and lifted my legs apart to stroke my inner thighs, and then the mouth on my cock took me deeper and the one on my shaft moved down to my balls. \n\nThere was some shifting about then. The girl sucking my cock moved to straddle my face in a sixty-nine. The other one moved to be between my legs, which she lifted to gain easier access to the area she was kissing, licking and sucking. \n\nI really didn't know which was which, and I really didn't care. I think it was Jill's pussy I was lapping at, but the girls swapped over after a while, and I wasn't sure that it was Penny the second time. I really don't know which one tongued my ass, and which one was the first to sit on my cock and ride me, while the other sat on my face. They swapped over doing that as well. I am pretty sure it was Penny who rubbed her breasts across my face on one occasion, and Jill on another, but I have no idea who it was that wanked me and sucked me when the other one was sucking my nipples. \n\nI don't know whose mouth I came in. I know the two girls kissed afterwards to share my come. Then they rolled me over to the side of the bed and removed my blindfold and Jill tucked the duvet round me, and both of them kissed me, and then the two of them lay on the bed beside me and made love while I watched. \n\nThey were a most aesthetic sight to see. Jill's flawless pale form, long and willowy entwined with Penny's Mediterranean limbs, her honey skin, fuller curves and dark flowing tresses were combined in a wonderful contrast. And this time there was a balance to them. I realised that Jill was just the same as ever, just as she was with me: open, innocent, giving, joyous, exploring and inventive, curious and supportive. the difference was in Penny. It was as if Penny was happier, less fearful or guilty, more able to absorb the experience and give herself over to it. \n\nI was half dreaming as they kissed, Jill lying on top of Penny, taking long slow kisses, gentle caresses and little, flowing, rhythmic rocking motions. Gradually the motions increased, their legs scissored and each was rubbing their pussy against the other's thigh, or rubbing their thigh against the other's pussy. Either way. Both ways. Mutual. \n\nBreasts against breasts, nipple to nipple, hands smoothing over skin, through hair, gripping and pressing, slowly, gently accelerating, both of them built up each other's arousal. Jill came first, Penny a moment after. They clung to each other panting and kissing and whispering their love, subsiding into happy silence, content, warm and at peace. \n\nThey slowly began to move again and I threw the quilt over them and snuggled up to them. We exchanged kisses, hugs and soft words, and then my watch went 'beep'. \n\nI moaned, Penny said \"What?\"\n\nJill said \"I'm beginning to hate that watch.\"\n\nWe showered together, dressed, stripped the beds and put the clothes in my car, and made sandwiches. Then Jill kissed us both goodbye, and I drove Penny home. She kissed me quite chastely. We would all see each other again the next day. "
    ],
    "authorname": "MVPrimetime",
    "tags": [
        "first time",
        "virgin",
        "threesome",
        "young lesbian",
        "fantasy",
        "time travel",
        "sunday morning",
        "deflowered",
        "doggystyle",
        "love"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/if-i-knew-then-ch-07"
}
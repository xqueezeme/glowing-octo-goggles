{
    "title": "Dwelling in Desire Ch. 11",
    "pages": [
        "Notes from the author: \n\nWell loves, you got your chapter early. I turned this around in less than a week, and will probably need a month to recharge. But who fucking knows at this point? I look forward to your feedback. ;) \n\n--J \n\n*************** \n\nChapter 11 \n\nIt had been a month. And nothing. \n\nNo calls. No texts. No emails. And whenever I managed to catch her stopping by on the security feed, she was in and out before I could convince myself to race home. \n\nWork had been interesting\u2014meetings with all of our clients, reviewing the status of their cases, and connecting each of them with other similarly qualified firms to take over their case. This also meant calling, qualifying, and meeting with said firms to review our primary data on a given case, before signing the client over for a fee. \n\nIt had kept me busy to be sure. But at night, when I went home to my empty barren castle and my cold empty bed, I felt...pain. Despair. Anger. \n\nThe bottle became more and more tempting. I found myself looking at it every night, instead of just once in a while. \n\nIt had gotten to the point where I was nervous. Jittery. Compelled to finally trash the fucking thing. To stop playing games with myself, now that I felt I was about to lose. \n\nI needed...something. Someone. Anyone. \n\nTina. \n\nI grabbed my phone and texted her. \n\nHey, you wanna come over? Or I could meet you at the club? \n\nNormally, it was seconds before she would respond. \n\nSilence. \n\nMinutes passed, and I gripped the edge of the kitchen counter, shifting my weight back and forth, just waiting. I felt now like I'd felt during detox. There was this painful sensation eating away at my gut. It wasn't quite as extreme, but eerily similar. \n\nFinally, my phone dinged. \n\nHey Curt. I would but I'm seeing someone. We met about a month ago and he doesn't want me seeing anyone else. Are you ok? \n\nWow. Tina had found someone. I don't know why I was so shocked. She just had never seemed interested in...committing. To anyone. Or maybe it was just to me. \n\nThat's awesome Tina. I'm thrilled for you. Take care and let me know if I need to kick someone's ass at any point ok? \n\nLOL Thanks Curt. Love you... \n\nShe loved me. I loved her. But not in the way I needed to love someone. Like I needed to love Bethany. \n\nI clenched my sweaty fists, and rationalized irrationally. \n\nTomorrow is Saturday. I don't need to be around anyone until Monday morning. I can definitely be sober by then. I'll just drink tonight, and maybe a little tomorrow, and then detox on Sunday. \n\nI hated the feeling of guilt that rushed through me. I was a fucking adult. I could drink responsibly. Nothing was wrong with drinking responsibly. \n\nWhen have you ever drunk responsibly though? When? \n\nFuck it. Just fuck it. \n\nI felt like I was wading through a river as I strode to the wine cellar. There was something holding me back, but something even more determined pushing me forward. \n\nFeeling like I'd just walked a mile, I gripped the bottle and made my way back to the kitchen for a glass. \n\nMy hands shook as I unscrewed the cap. They shook as I poured the amber liquid, smelled it as it pierced the air. \n\n&gt;Ding&lt; \n\nFuck. \n\nI very nearly ignored the text. What more could there possibly be to say? \n\nBut I looked. \n\nHi Curt. Good news! The furniture is ready for delivery as well as the cabinets. I'm planning deliveries on Wednesday Thursday and Friday of this coming week. You don't need to be there. I will handle everything. Just a heads up that we are nearing the finish line. :) Bethany \n\nMy shocked reaction to her text morphed into a wry smile when I saw that she had signed her name \"Bethany\". \n\nAnd I now knew that she signed her name that way only for me. She could have signed it as Beth, kept things casual, normal. Non sexual. But she didn't. \n\nIt was a tiny fucking straw, but I grasped at it. \n\nQuickly, before I could change my mind, I poured it all down the sink. \n\nIt was hard as fuck, but liberating. Thrilling. And terrifying. It felt as if my only lifeline was gone. \n\nWhat now? For fuck's sake what now? \n\nI picked up my phone again to reply. \n\nThank you Bethany. I look forward to seeing the fruits of your labor. \n\nIt was a dry response at best, but I hardened at the thought of her blush as she read my text. \n\nWednesday. She would be here Wednesday. And Thursday. And Friday. \n\nI knew I had a busy workweek ahead, but I was definitely going to aim to finish early on one if not all of those days. I had to see her. Even if I hadn't the foggiest idea of what I would say. \n\nShoving the bourbon glass into the dishwasher, I grabbed a fresh one and filled it with water. I had to consume something, and it may as well have been water. \n\nMaybe I'd have a shower. A nice long shower. \n\nBut not too long. \n\n--- \n\nI paled as I hung up the phone. Not only had all the furniture arrived early, but the cabinets had been ready for a couple weeks now. Rick wanted to install on Thursday and Friday, and I no longer had reason to postpone. \n\nAs in love as I'd been with the house every time I went, as invigorating as it was to envision what the vast empty estate would soon become, I now felt myself faltering. \n\nThere was so much to do. For once, I felt doubt. In myself. In whether I could do this as quickly and seamlessly as I needed to. There was the looming threat of seeing him. Being forced to look him in the eye, and fully acknowledge what I had done. What I had said. \n\nWhat I had said... \n\nWell I still wasn't quite sure what I had said, but I knew that it had been way, way too much. \n\nCurt had done the decent thing and walked away, despite my drunken state. He could so easily have done anything he wanted to me, and I would totally have loved it. \n\nBut he was an adult. Responsible. Mature. \n\nAnd I was a girl. Silly, and na\u00efve. \n\nBut then there had been that moment, I thought, when he had been on top of me on the bed. I knew I hadn't dreamt that look on his face. That look was the only thing that was firmly engrained in my memory. \n\nThe look of thick, unbridled, desire. \n\nTrue, I had been an ass. But he'd still had that look. For whatever reason. \n\nI shook myself free of the erotic imagery, cursing the now erect nipples poking through my shirt. Again. \n\nJust get it done Beth, and you'll be home free. \n\n--- \n\nWednesday \n\nOkay, I'm forgetting something. What is it? \n\nMy car was packed to the freaking brim with lamps, pillows, throws, bedding, faux greenery, and just about every type of knick-knack known to man. It wasn't nearly enough to fill Curt's house, but it was a start. Day one was about to commence. \n\nSo what was I forgetting? Bottled water? Check. Dust cloths? Check. \n\nI really should have made a list. But I hadn't graduated with honors in organization. Clients commented all the time on how \"organized\" I was, but I never felt it. I always felt like I was scrambling. Barely keeping things together. Especially now. \n\nI was sweating from nerves. And dampening more by the minute from the mental image of Curt with that look on his face. I grimaced as I had an epiphany. \n\nA change of panties. \n\nShoot. What kind of slut was I that a change of panties was in order for my work day? \n\nNo, don't think that way Beth. You have a long day of physical labor ahead of you. It's only natural that you should...sweat, or whatever. It's normal. It does not make you a slut. \n\nWith an exasperated sigh, I stalked back into the house to grab an extra set of panties. Just in case I started to get...embarrassingly wet. Which I knew from experience was a distinct possibility when I was in Curt's house. \n\nCertain that I had now thought it to death, I shoved my panties into the bottom of my tote and piled into my Jetta. I really needed an SUV. But where the heck was that money supposed to materialize from? \n\nI supposed I could do a trade-in deal, or a lease, or something. Maybe I could talk to Kate about that. Or Joe, possibly. He probably had some connections, or at least advice to share on that. \n\nI knew who I couldn't ask. Who I couldn't discuss anything remotely non-business related with. \n\nRelax Beth. \n\nSaving that internal debate for another day, I turned on my favorite station and pulled out of the drive. \n\n--- \n\n\"Okay guys, the bed needs to shift a few inches left. An inch more. A hair more...okay. That works,\" I nodded. \n\nThe day had been an endless stream of this. \n\nPointing. Lifting. Moving. Giving orders. Taking orders. Running out. Running in. It was what I had grown accustomed to, but on a much larger scale. \n\nI'd decided just last week that the walls needed a bit more color, and had called in my painter, who luckily was able to fit me in today after a cancellation. \n\nOne room being painted was the master bedroom. And while I hadn't planned on decorating the upstairs guest room until tomorrow, I knew that Curt would probably be more comfortable there until the paint dried in the master. \n\nLuckily, the furniture I'd ordered for the guest room had arrived today, and I could easily pull it together for his use tonight. It required that I wash the new sheets, which was easy enough since Curt had not one but two washers and dryers, both of which were vacant. I thought of texting him to ask if it was okay, but chickened out. The less interaction with him the better. \n\nJust get it done Beth. He is trusting you to get things done. \n\nBetween tasks downstairs, I would run back up and work on the guest room, ensuring it was comfortable enough for one or two nights' use. \n\nAs I bounded up and down the stairs, I marveled at how I had energy for anything else. I reminded myself and the workers every so often to stay hydrated. It was important to keep our energy up and our minds alert, or we'd lose momentum. \n\n\"We\" for today consisted of myself, my backup handyman Jose, and my painter Henry and his assistants. They were usually pretty fast workers, and very competitive price-wise. \n\nAt noon I brought in sandwiches for everyone. Providing lunch made a distinct difference in the quality of work I'd come to find, and kept me on an A-list of sorts with my contractors. It was a small price to pay, even if it had an embarrassingly noticeable impact on my bank account. \n\nDon't worry Beth. Soon you'll be rolling in the dough, and laugh at the memory of struggling to pay for sandwiches. Just keep moving forward. \n\nThe downstairs was quite an undertaking, and as three o'clock approached, I wondered if I would be able to complete everything I'd planned for today. Outlook was not good. But I kept going. \n\nI had to leave by five. Curt would likely be home around five thirty or six, and I couldn't risk seeing him. I couldn't take the humiliation any sooner than absolutely necessary. \n\nJose and the painters had left, and now it was just me. I hurried through the areas with fresh paint, opening more windows to ventilate the house and clear out the excess fumes. Maybe the fumes were to blame for my now splitting headache. \n\nGet water. \n\nI ran into the kitchen to do just that, and was in the process of leaving a quickly scribbled note for Curt, when I heard the garage door. Oh shit. \n\nIt was only four thirty and he was home. \n\nShit. \n\nSuddenly, I was much more aware of the wetness between my legs. Why hadn't I thought to change my panties earlier this afternoon? \n\nI saw the door handle twist, and braced myself to face him. \n\n--- \n\nDear God. She looked...terrible. \n\nWell, for her, she looked terrible. Her eyes were tired, her hair was mussed, and her shirt was peppered with dust and who knew what else. She was still ravishing by any normal standards in my view, but I saw the look on her face betraying fatigue and stress, and was immediately compelled to fix it. \n\n\"Hey Curt,\" she greeted in a tired voice. \n\n\"Bethany,\" I acknowledged. \"You've been working very hard today it looks like.\" \n\n\"Oh yeah,\" she sighed. \"I was just heading out actually. I left you this note, but since you're here I guess I can just give you the run-down. If you have a moment...\" \n\n\"Absolutely,\" I nodded. \n\n\"So we're nearly finished with the downstairs, and have started on the upstairs. The master bedroom and formal living and dining rooms were painted today, and will need some time to ventilate. I've set up the guest bedroom upstairs for your use until the master is completed.\" \n\n\"Excellent,\" I smiled. \"Can I see?\" \n\n\"Well things are still under construction more or less, so don't jump too quickly to conclusions.\" \n\n\"I understand,\" I agreed as I followed her through to the family room, and then the formal living and dining. \n\nShe was correct. Things looked unfinished. But I could get a sense of what the end result would be, and it was remarkable. \n\n\"I'm impressed Bethany. It looks like it's gonna be amazing. Not that I doubted you for a second,\" I smiled. \n\n\"Well hang onto your hat because I did manage to complete the downstairs guest suite, with the exception of the draperies, which arrive tomorrow. Would you like to see?\" \n\n\"Show me.\" \n\nWhat awaited did indeed knock my socks off. It was a beautiful guest retreat, packed with all the necessities, from robes to slippers, to soap and shampoo, toothbrushes, and even a phone charging station. Literally everything one could need for an extended stay. \n\nI smiled warmly as I observed the touches of purple here and there. She had integrated my mom's favorite color subtly and tastefully. Light purple roses on the coffee table, purple in the landscape paintings she'd hung on the walls, purple bath salts and shower gel... \n\nIt was perfect. I couldn't wait to have my mom to visit so she could enjoy it. \n\n\"I'm stunned Beth. This is incredible,\" I grinned at her, genuinely impressed. \n\nShe blushed her lovely blush that made me want to grab her and bury my face in her neck. \n\n\"Thanks,\" she said softly. \"The upstairs guest room is also complete. If you'll follow me.\" \n\nI followed, eagerly. Following this girl up the stairs was fast becoming one of my favorite things. \n\nAs we entered the newly completed guest room, I was again overwhelmed. The colors were rich and earthy, and the bed looked cozy and inviting. The lighting was soft and yet bright at the same time. \n\n\"Well Bethany, I must say I'm looking forward to staying in this room tonight.\" \n\n\"I'm glad to hear that,\" she smiled weakly. \"I feel so bad having to kick you out of your room.\" \n\n\"Don't,\" I insisted. \"This is more than enough. I'll just grab some clothes and stuff from the master bedroom and bring them in here. It'll be perfectly functional for the next couple days, or until you finish.\" \n\n\"Yes it should be,\" she nodded. \"I have all the sheets washed, as well as the towels in the hall bath, and the dresser and guest closet are completely vacant. Plus I left some soaps and stuff in the hall bath for you.\" \n\n\"You've thought of everything it seems.\" \n\nWe stood for a few moments in awkward silence. I tried to play it off as observing my new surroundings, admiring her work. \n\n\"So,\" I asked casually, \"Did you want to get some dinner or something? You must be famished.\" \n\n\"No,\" was her immediate and sharp response. \n\nI wasn't at all surprised, but I had hoped she might agree. \n\n\"I mean, thank you, but I need to get home,\" she stuttered, backpedaling in an attempt not to insult me. \n\n\"I understand,\" I held up my hand in assurance. \"You must be exhausted.\" \n\n\"Yeah,\" she nodded with a look of regret in her eyes. \n\nThe silence was unrelenting as we passed through the hall and descended the stairs. \n\n\"Well, I'll be back tomorrow morning. Draperies arrive first thing, and we begin installation of the cabinets, as well as more furniture deliveries. Another full day.\" \n\n\"Sounds like a plan,\" I nodded. \n\nThis is so fucking depressing. \n\n\"So, umm, have a good night. I'll see you later,\" she muttered, shouldering her bag. \n\n\"You as well, and drive safe,\" I warned as I opened the front door for her. \n\nI watched her as she trudged to her car, clearly exhausted. I didn't like the idea of her driving when she was so tired, but what could I do? \n\nLet it go Donovan. She's a big girl. And a professional. Just let her do her thing, and stay out of the way. \n\nI needed to change out of my work clothes. Beth hadn't said I couldn't go in my bedroom, just that I would probably want to sleep in the guest room due to the paint fumes. It made sense. I just needed to grab some clothes for tonight and tomorrow, and a few other essentials. \n\nI don't know what I'd expected when I walked into the master bedroom, but it wasn't this. It was a dark abyss of gray. Holy shit. I felt like I was in a cave. \n\nWhat in God's name was she thinking? It's a cave! \n\nJust relax Donovan. If she picked this dark-ass color, it must have been for a reason. She knows what she's doing. Relax. \n\nIt was hard to. It was a fucking cave. Granted, there was nothing else in it but my old crap, so there was really nothing to look at but the gray walls. I just prayed that whatever stuff she put in here made a significant difference in the feel of the room. At this point, I just couldn't see it. \n\nWell whatever. If I hated it, I'd deal with it. There was no question that I would rather keep my mouth shut than hurt Beth's feelings. Or worse, her pride. \n\nI pulled my clothes and morning essentials quickly, and shut the doors behind me. \n\nRe-entering the guest room, I felt like I was in a luxurious high-end hotel. Except it was warm, and homey feeling. Not stark and trendy like most hotel rooms. It was pleasant. Cozy. Welcoming. \n\nIt was more than I could have wished for. \n\nWhich is why you need to shut up, relax, and let her do her thing. \n\nChuckling to myself, I changed into my PJ's and went downstairs to get something to eat. \n\n--- \n\nThursday \n\nI'd hit the snooze button for probably the fifth time, and knew I couldn't delay any longer. I couldn't mess up today. I couldn't mess up this week. Not until this darned project was done. \n\nI rolled grudgingly out of bed, and stumbled over to the mirror. \n\nYup. Bags under the eyes. Fantastic. \n\nEven if I had no intention of seeing Curt today, the possibility was always there, and though I didn't want to encourage his advances, I just couldn't bear the idea of looking like shit in front of him. \n\nHe won't be there. Don't worry. You'll wrap it up early, make up for yesterday. \n\nI looked at the clock. Thirty minutes behind. Shit. \n\nPig buns it is. \n\nOnce I'd shrugged into my junky clothes and lazy day hairdo, I grabbed my tote and a granola bar, and dashed for my car. \n\n--- \n\nAs I pulled into the drive at 7:30am on the dot, it occurred to me that Curt might not have left yet. And because he always parked in the garage, I wouldn't know for sure if he was home unless I called him. Or knocked on the door. \n\nI decided to knock. Better than texting him and opening the lines of communication unnecessarily. \n\nI knocked. \n\nNothing. \n\nRemember what a huge house this is Beth. Ring the damn bell. \n\nI rang the damn bell. \n\nNothing. \n\nWhew! He's left for work. Now I can breathe. \n\nWith my confidence renewed, I entered with the key Curt had given me. \n\nDropping my bag on the new console in the entryway, I padded up the stairs to the master bedroom. The new furniture would be arriving today, and Curt's belongings would need to be transferred from his old dresser and nightstands to the new. ",
        "Shoot. I should have asked him to take the items out and put them in bins or something. I couldn't just go through his drawers. \n\nJust get it done Beth. \n\nIt was a sound argument, but I still felt uncomfortable invading his privacy. \n\nYou didn't feel uncomfortable opening his trunk of depravity, did you? Get it done. \n\nExpelling a deep breath, I proceeded. \n\nI started with the nightstands. Nothing super surprising. Socks. Belts. Random crap. Condoms. K-Y...blush, blush...Empty Ziploc bag. I guess I can trash that. \n\nDon't trash anything unless you are positive it's trash Beth. \n\nI lifted the bag to the light streaming through the windows, just to be sure I wasn't missing anything, like a Tylenol or spare shirt button. \n\nA hair. \n\nThat's odd. Wait... \n\nThe hair was long. And blonde. And suddenly it dawned on me that it looked disturbingly like my own. \n\nI frowned. It didn't make any sense. How would Curt be in a position to have one of my hairs? \n\nIt could be anyone's Beth. He's probably had any number of women with long blonde hair in this room. Just do your job and focus. \n\n&gt;Ding, Dong&lt; \n\nAlek. \n\nAbandoning my task for the moment, I emerged from the master bedroom. \n\n\"Hang on, I'll be right there!\" came a muffled voice. \n\nWhat the? \n\nThe voice sounded like it was coming from down the hall. \n\nOh...ssshhhiit. \n\nThe hall bath door opened. \n\nAnd Curt appeared. In a towel. \n\nSweet lord... \n\n\"Bethany,\" he gushed. \"I'm sorry, I didn't hear you come in.\" \n\n\"No, no! I'm sorry, I didn't realize you were home still. I'm sorry...\" I stuttered, before turning and running down the stairs to meet Alek. \n\nWell, really to avoid turning beet red in front of Curt. He'd been naked from the waist up. Nothing but a thin, wet layer of terry cloth concealing his manhood from my mortified gaze. \n\nI felt so...stupid. So dizzy. So embarrassed. And so fucking hot. \n\n&gt;Ding, Dong&lt; \n\n\"Coming Alek!\" I called, though I knew he probably couldn't hear me. \n\nWhen I answered the door finally, I was panting, and not from exertion. \n\n\"Good morning Alek! Sorry that took so long. Big house!\" I smiled, struggling yet again to gather my wits. \n\n\"Good morning Miss Beth! No problum, no problum. So we hev a big day!\" \n\n\"Yes, big day,\" I breathed. \"Shall we start downstairs?\" \n\n\"Yes, of course, I'll just get started unloading. Can we keep the door open while I bring things in?\" \n\n\"Absolutely Alek. Just holler when you're ready!\" \n\n\"Yes, no problum...\" \n\nI turned and ran to the powder room to give myself a once over. \n\nWhew! The circles under my eyes were mostly gone, and my complexion was more rosy than beety. Thank heaven. So now what? \n\nThe kitchen. I'd wait in the kitchen. \n\nI needed to calm down and try to stop shaking. Maybe I could try some meditation. \n\nWhat had that yoga instructor said? \n\nFocus on one thing. One, dull, simple, bland thing. Not work. Not stress. \n\nI stared down at the countertop. Countertop. The countertop was bland. \n\nI gazed at it, observed the color. The various tones of beige in the granite, the tiny flecks of black and gray. The sheen. The reflection. My reflection. \n\nA man's reflection. \n\n\"Good morning Bethany.\" \n\nSo much for relaxing. \n\n\"Morning,\" I barely whispered. \n\nI could feel his breath on the back of my neck for the briefest moment before he rounded the kitchen island. \n\nI knew I was blushing again, especially since he looked just as hot fully dressed as he did in a towel. \n\nThe dark slacks and crisp white shirt complimented his ruggedly masculine features. His black leather belt was simple yet sophisticated, subtly highlighting what impressive shape he was in. He was freshly shaven, and I could smell his cologne\u2014the rich musky aroma invading my senses, and making me thank God that I still had those backup panties in my bag. \n\nThis man, looked like sin. He smelled like sin. And he made me yearn for it. \n\n\"I'm so sorry Curt. I knocked, and rang the bell...\" \n\n\"And I was in the shower. Don't worry about it,\" he smirked as he finished fastening his cuff links. He was relishing my embarrassment. \n\n\"Can I get you some coffee?\" he offered in a jovial tone that made my head spin. \n\n\"Umm, yeah, sure,\" was my brilliant response. \n\n\"I slept soundly last night, thanks to the fantastic job you did on that guest room. I'm truly impressed Beth. Can't wait to see what you have in store for me tonight.\" \n\nHis tone was light, but also dripping with sensuality. \n\nOr maybe it's just your increasingly sick perverse mind Beth. Jeez. \n\n\"I'm glad you slept well Curt. I do my best.\" \n\n\"I can certainly see that Beth.\" \n\nBeth. Beth. Why was he calling me Beth? \n\nWhy shouldn't he call you Beth? Everyone calls you Beth. \n\nBut you like it when he calls you Bethany, don't you? You even told him. But you didn't tell him that it makes you tingle all over. That it makes you wet... \n\nI didn't know if I liked him calling me Beth or not. I liked that it was familiar. And I appreciated that it seemed less...sexual. It was probably for the best that he called me Beth. \n\n\"Yeah, so, are you off to work? I bet you have a busy day!\" I clumsily attempted a change in topic. \n\n\"Somewhat busy, yes,\" he smirked knowingly. \n\nI couldn't bear to look at his cocky sexy face anymore, so I focused on the mug of coffee he had given me, taking a few tiny sips, trying not to burn my tongue off and embarrass myself further. \n\nCurt casually finished his coffee before rinsing out his mug and grabbing his coat and keys. \n\n\"Well, have a good day Beth. Take care of my house!\" he winked at me before immediately exiting to the garage. \n\nHe was so fucking confident. And I was a mess. He'd done nothing wrong. Said nothing wrong. And I was still a mess. \n\n\"Okay Miss Beth...\" I heard Alek call from the living room. \n\nI happily abandoned the black coffee that was far too earthy for my taste, and ran to help Alek get started on the drapes. \n\n--- \n\nOkay...drapes, check. Cabinets, check. Rugs, check. \n\nThe furniture delivery truck I'd expected today had broken down and would be delayed until tomorrow. Which meant that the master bedroom would not be completed today. \n\nIt sucked, but was also a blessing in disguise because the downstairs was still looking incomplete. The drapes and rugs had helped immensely, as had the paint, but I'd underestimated how much space there was yet to fill. The walls looked sparse. The corners looked blank. The china cabinet had no china. The space looked unfinished. At least by my standards. \n\nI needed to go shopping again. I'd run out of time and energy yesterday and hadn't been able to complete a second round of shopping. And it showed. \n\nChecking my phone, I saw that it was a quarter to three. If I left now, I could probably be back by four. Four thirty latest. \n\nWhat if Curt came home though? \n\nSo what if he does Beth? You have a fucking job to do! Get yourself together and get it done! \n\nWith that stern inner monologue out of the way, I locked up and headed out to continue shopping. \n\n--- \n\nDelays like broken down trucks always happened for a reason. There was always something to get done. Loose ends to tie up. And today, shopping for random crap to fill that gargantuan house was it. \n\nThe master bedroom furniture would come tomorrow, I'd finish it tomorrow, and everything would be done. I just needed to keep going. \n\nBut I could already feel my body starting to protest. My throat was dry, my stomach rumbled, and my head hurt. \n\nI kept forgetting things. I would get in line at the store, realize I forgot something, and have to get out of line, go find what I needed, and then get back in line. And of course, the line was always three times as long when I came back. \n\nI needed water so badly. I had to stop for some as soon as possible. \n\nAfter miraculously cramming the last items into my car, I noticed a small deli across the parking lot. \n\nThat would do. Just some water, and maybe some chips, and I could get back to the house. \n\n--- \n\nI was disappointed to see that I'd missed her. I'd tried to get home early enough to catch Bethany before she departed, but it seemed she was on to me after yesterday. \n\nThe downstairs was noticeably more presentable, and I was eager to see the progress on the master bedroom. In particular, that four-poster bed. To see it in the flesh, and fully appreciate its potential. \n\nAlas when I entered my room, it was still the dark cave I'd found yesterday. With the exception of the drapes, which were nice, but far from enough to impress. \n\nI frowned. Something was off. \n\nI went back down to the kitchen. Perhaps she'd left a note and I'd missed it. \n\nNo note. \n\nI shrugged and was just about to pull a Hungry Man from the freezer when I heard the classic key in the lock sound. \n\nI heard her soft cursing, which made me grin inadvertently as she shuffled through the door with two huge shopping bags. \n\n\"Hey Beth,\" I greeted softly, after clearing my throat to avoid scaring her. \"Can I give you a hand?\" \n\n\"Oh! Hi Curt,\" she greeted, clearly flustered. \"I umm, I was just bringing in some extra stuff. You can help if you like, but I'm fine, really...\" \n\n\"I'll help,\" I declared firmly. \n\nAs I approached her car, I gaped at the tiny vehicle positively stuffed to the brim with shopping bags. It couldn't have been safe to drive like that. She clearly needed a more substantial vehicle. \n\n\"Good God Beth, that is a lot of shit,\" I muttered before I could catch myself. \n\nBut she laughed. \n\n\"Well hopefully it isn't all shit. It is intended to go in your home after all,\" she teased. \n\n\"I'm sorry, I just meant it's a lot of stuff.\" \n\n\"True!\" she laughed, though her eyes looked tired. \n\nI observed her more closely as she began to empty her trunk of bags. She looked exhausted. Pale. Sweaty. Stressed. \n\nIt was more than I could tolerate. \n\n\"Beth, when was the last time you ate?\" \n\n\"About twenty minutes ago actually,\" she said dismissively. \n\n\"And what did you eat?\" I pressed. \n\n\"Chips,\" she answered honestly, but with a hint of sass that at the moment served only to upset me. \n\n\"Chips,\" I repeated dryly. \n\n\"Mmhmm.\" \n\n\"That can't have been sufficient for a woman who's been working all day.\" \n\n\"Curt, please, I'm fine. Now here, if you want to help, take these bags inside and set them in the foyer,\" she ordered, avoiding eye contact. \n\nI indulged her for the moment as the task needed doing, and the sooner I had her inside the better. \n\nI was a worker ant for the next forty-five minutes getting things unloaded and sorted out in their different areas, as per her instructions. It was clear that Beth was only accepting my help because she was running on fumes. She was coming up on a twelve-hour day, and I didn't like it at all. \n\nWhen the bags had been sorted to her satisfaction, Bethany managed to shoo me away so she could get things set up. I was angry that she was refusing to call it quits for the day when she was so clearly exhausted, but I let her continue. As long as she was within earshot, I would allow it. \n\nTwo hours later, she found me in the family room, on my brand new leather sofa, watching the news. \n\n\"I'm loving the new sofa Beth, it's so fucking comfy!\" I grinned. \"And see, no shoes on the table!\" I pointed out proudly. \n\n\"Good boy!\" she giggled. \"Well, I'm gonna head home now. Be back tomorrow first thing. Furniture for the bedroom was rescheduled for tomorrow, and I'm expecting Rick as well for some touch ups and other tasks.\" \n\n\"Beth,\" I rose from the sinfully comfortable sofa and approached her. \"I know you probably don't want to hear this, but I'd feel much better if you just crashed here tonight. It's obvious that you're tired.\" \n\n\"No, it's fine. I'm just a half hour away. And traffic is dying down a bit,\" she insisted. \n\n\"No Beth. It's not fine. You shouldn't be on the road. You can bunk in the guest suite downstairs. It's fully equipped, I assure you,\" I smiled, trying to lighten the mood a bit and convince her with reason, rather than force. \n\n\"No, I can't,\" she shook her head, a flustered look on her face. \"I don't have a change of clothes, and I just...I can't. I'll be fine!\" \n\nShe turned and all but ran from the room. \n\nI followed. \n\nI struggled to harness my anger as she grabbed her bag from the table. She said nothing to me as she gripped the door handle to make her departure. \n\n\"Stay,\" I growled, as darkly as I dared. \n\nShe froze. She stayed. \n\nI approached her from behind, and gently turned her to face me. \n\n\"Bethany, stay.\" \n\nShe trembled in my grasp, and finally whispered, \"Okay.\" \n\n\"Good girl,\" I smiled, squeezing her arms gently before releasing her. \"Now come sit. I'll order us some pizza, and you will relax. Understand?\" \n\nShe nodded, still not making eye contact. But she was respecting my wishes, and that was enough. For now. \n\nI sat her down on my new cozy couch, and went to the kitchen to dial my regular pizza parlor. \n\nThe pizza guy quoted me thirty minutes, and when I rejoined her in the family room, she finally looked at me. \n\n\"Curt, I, thanks for inviting me to stay. I really appreciate it. But again, I don't have a change of clothes. I'm dirty from today, and need clean clothes.\" \n\n\"You can wash the clothes you have, here.\" \n\n\"But...\" \n\n\"I believe,\" I interjected, \"that my designer very conveniently provided some bathrobes in the guest suite closet. Would one of the robes not be sufficient while you wash your clothes?\" \n\nI don't know if she blushed at my recognition of her thorough attention to detail, or at the idea of wearing nothing but a robe in front of me, but I suspected it was the latter. \n\n\"That would be...inappropriate to say the least Curt.\" \n\n\"Hey, you saw me in a far more compromising ensemble just this morning, need I remind you?\" I teased. \"A robe is quite innocent by comparison.\" \n\n\"I'm sorry about that Curt,\" her eyes diverted to the soft supple leather of the couch. \n\nLifting her chin, I whispered huskily, \"I'm not. Your blush is exquisite. Now, go take a nice hot shower, and then you can take your clothes upstairs to wash. The pizza should arrive shortly after.\" \n\nThe thought of a hot shower must have won her over, because she nodded. Her resistance was waning, and her submission to me had my pants tightening more with every passing minute. \n\nAs soon as I heard the water kick on, I ran upstairs to change. She would likely be more comfortable wearing a robe around me if I was dressed in more casual attire. I threw on some flannel pants and an old cotton t-shirt from my Alma Mater. \n\nI hurried back downstairs and grabbed us some waters before mindlessly channel surfing. My brain was more focused on the sound of the water rushing through the pipes. I could see her, in the shower, her mouth open in quiet relief as the hot water massaged her tired aching muscles, matting her hair, running over her soft creamy... \n\nFuck! Stop it right now you horny bastard! This is why she nearly refused to stay. Get yourself under control right now, or she will run like a scared little bunny, and it will be all your doing. \n\nReturning my attention to the TV, I found Braveheart playing on Bravo and figured what the hell. I'd let her pick what she wanted when she got out of the shower. The movie had just started, so I paused it and waited, cracking my knuckles and fucking around with my phone. \n\nThe water turned off. Silence. And then the creak of the door opening. \n\nI couldn't see her from the family room where I was, but I heard her padding quietly down the hall, tip-toeing up the stairs, and loading her stuff into the washer. \n\nMinutes later she emerged, flushed, with a flannel robe wrapped as tightly around her as possible. Her cute dainty bare feet the only visual clue as to what treasures lay beneath. \n\nI couldn't contain a grin, and quickly re-directed my gaze back to the TV. \n\n\"Pizza should be here momentarily,\" I mused. \"You ever seen Braveheart? With Mel Gibson? Or would you prefer something else?\" \n\nShe nodded, \"Sure, Braveheart's fine.\" \n\nThis was the tradeoff with submissive women. The passivity. The \"Sure, whatever you want.\" It was really hard to determine at times whether they truly agreed, truly didn't care, or were poisoning your oatmeal the next morning. \n\nBut for now, we'd keep it light. No over-analyzing. \n\nThe pizza came. We ate. She finished her laundry, and we watched our movie. \n\nIt was only halfway through when she fell asleep. \n\nI smiled down at her affectionately, enjoying her slow deep breathing, and the seductive rise and fall of her breasts beneath the robe. \n\nI couldn't bring myself to wake her, but she definitely wouldn't be sleeping on the couch. Praying she didn't wake suddenly and object, I lifted her gently into my arms, and carried her to the guest suite. \n\nI shook my head in disbelief. For the second time, I was carrying her to her room with zero intention of sharing her bed. I couldn't decide whether to find it hilarious or depressing. \n\nShe stirred, and her eyes fluttered a bit, but she snuggled closer to me as I held her. God, she was so perfect. So perfect that she had me throbbing with an insane mix of unquenchable desire and fatherly protectiveness. \n\nTonight, the latter would prevail, but I knew in my heart it wouldn't be long before I lost control. \n\nI laid her as gently as possible on the bed before tucking her in. \n\n\"Sleep well baby,\" I whispered. \n\n--- \n\nFriday \n\nA tone-deaf, yet still merry whistling alerted me to the fact that I was not in my own bed. I was at Curt's. That must be him whistling. \n\nI hesitantly emerged from the guest suite, which I had to give myself kudos for. I'd slept like a baby, and that shower had been divine. All the amenities were there, just as I'd planned. \n\nSquinting from the early morning sun blazing through the windows, I entered the kitchen to acknowledge my host. My client. \n\n\"Morning,\" I greeted shyly. \n\n\"Morning beautiful,\" he grinned, making me roll my eyes. \"Eggs?\" \n\n\"I couldn't impose...\" \n\n\"Eggs!\" Curt insisted, obviously aware that I was about to decline. He would have none of it. \n\nI couldn't help but smile at his hilarious caveman-like brand of dominance. It was totally endearing, and made me loathe the fact that I was his employee. If only he could make me eat eggs every morning. Make me eat eggs, and then make me do other things... \n\nGet it out of the gutter Beth. \n\nI was shaken from my thoughts by a huge plate of scrambled eggs before me. Curt then grabbed his own plate and sat across from me, smirking in smug satisfaction. \n\n\"Eat,\" he ordered. \n\nI sighed, and obeyed, frustrated that I really wanted nothing more than to do so. To obey him. \n\n\"Oh my God, Curt,\" I moaned. \n\n\"Yep. I'm that good,\" he grinned. \n\n\"Yes you are. These eggs, they're amazing!\" \n\n\"Well enjoy, because they're the only damn thing I know how to make,\" he laughed. \n\n\"I find that hard to believe,\" I raised my eyebrows in challenge. \n\n\"Well granted, I can make almost any version of egg. But still, it's a pretty pathetic resume of dishes.\" \n\n\"Well to please a woman, believe me this is more than sufficient,\" I teased. \"Expensive steak dinner in the evenings, and breakfast in bed the next morning.\" \n\n\"Damn, I missed the mark on that didn't I?\" Curt laughed. \"I'd assumed breakfast in bed today would be too forward.\" \n\n\"You assumed correctly,\" I smirked. \"I was referring to any potential lady guests you may have in the future.\" \n\nI was unprepared for the icy look that crossed his features just then. As if I'd insulted him. But before I could apologize, he quickly masked it and consumed every last speck of egg on his plate. ",
        "Things had gone from tense, to light, to even more tense than before. And I hadn't the slightest idea what to do about it. \n\nJust finish the eggs and get to work. \n\n\"Mmm, those were terrific Curt. Seriously, thank you,\" I sighed in satisfaction from the most amazing eggs I'd ever had. I wasn't even a big egg fan, but I could easily be converted. Especially by him. \n\n\"My pleasure Bethany,\" he afforded me half a cocky grin. \"I'm heading to work in half an hour, so is there anything you need before I go?\" \n\n\"No Curt, you've done more than enough. Thank you.\" \n\nHe nodded before turning to head upstairs and get ready. \n\nA glance at the clock told me it was nearly eight. The bedroom furniture would be arriving soon, and Rick shortly thereafter. \n\nI quickly threw on my clothes from yesterday, glad that I didn't have to spend any extra time selecting. I had one outfit to choose from this morning. Two if I counted the robe, which of course I did not. \n\nI did have a choice of hairstyle though. Pig buns or ponytail. Or messy frump girl. I opted for ponytail, just for the sake of looking in any way different from yesterday. \n\n&gt;Ding, Dong&lt; \n\nUffff, you're almost done Beth... \n\n--- \n\nI don't know why I fussed so much over the master bedroom. I just wanted it to be perfect. The other rooms had been easy, more or less. This one I wanted to be a masterpiece. It was where Curt, that sexy God of a man, would sleep every night. It was only fitting that he should have a room that spoke to his sexiness. His rough masculine allure. \n\nThe dark walls had definitely been a bold choice. But I had to do it. It was the only way to get the sharp, dramatic, sultry feel I felt was worthy of him. The key to making it work was proper lighting, and contrast with the other elements like bedding, and artwork and such. \n\nWhile I had felt a small degree of trepidation, it didn't take long at all before the big picture began to materialize. My vision was coming together. \n\n\"Okay Rick, I need this piece hung over here, and these above the bed, and the large mirror over there above the dresser...\" \n\n--- \n\nI practically growled when I saw Thor again on the security feed. \n\nRelax ass-wipe, do you remember what you saw yesterday? This girl is all business. Eye on the ball, no fucking nonsense. The guy is her contractor, nothing more. \n\nStill, the impressively built man in close proximity to Beth, with no one else around, had me on edge. I couldn't stand it. \n\nHad Joe not put me back to work, I might have rushed home and politely seen Thor to the door. \n\nSo much for that. \n\nIt was five before I was able to leave the office, and it took over a half hour in traffic to get home, by which time I was certain Beth would have made her departure. \n\nI was relieved though when I pulled past the gate and saw Beth's car, and no one else's. Thor was gone, thank God. I was lucky not to have crashed into the fucking wall in my haste to get inside. \n\n\"Curt! I'm glad you're home!\" she greeted me with a smug grin as I entered. \n\n\"Are you? Why's that?\" I teased. \n\n\"Because, I want to give you the tour of your new home!\" \n\n\"Hmmm, sounds enticing,\" I grinned. \"Well go on, lead the way beautiful.\" \n\nShe rolled her eyes at my \"beautiful\" line of course, but her blush betrayed her. She was far too excited to get annoyed with me. I chuckled softly as I followed her, relishing the eagerness that radiated from her. \n\nThis was the Beth I'd fallen in love with. The happy Beth that sketched out her ideas that first day, captivating me, enchanting me. I knew then that I was a goner. And I was. I had fallen. \n\nAs she brought me through each room, I regretted that I was still more taken with her than I was the rooms themselves. But I humored her. She obviously took immense pride in her work, and rightfully so. \n\nThe downstairs was neutral, warm, and welcoming. Everything I could have asked for and more. But the study was what really knocked it out of the park. The cabinetry was exceptionally well crafted, beautifully finished, and the glass cabinet lights would highlight my gun collection nicely. \n\n\"I'm floored Beth. I seriously don't know what to say,\" I shook my head in amazement, taking in my new home office. \n\n\"That's exactly what I like to hear actually,\" she grinned. \"It'll be even nicer when you get your guns all set up.\" \n\n\"Indeed,\" I nodded. \n\n\"So, now that we've gotten that out of the way, are you ready to see the master bedroom?\" \n\n\"Do I need to answer?\" I raised an eyebrow. \n\nShe couldn't contain a smirk. \n\n\"I guess not. Follow me,\" she ordered before sauntering out of the office. \n\nAs I followed, my eyes trained on her ass, I fought against the erection that I knew was inevitable. With her. In my bedroom. \n\nWithout further delay, Bethany opened the double doors to the master, and the new room that greeted me was... \n\nI gawked. I fucking gawked. \n\n\"Beth...\" \n\nShe said nothing, just took in my reaction. \n\nThe room was exquisite. The lighting was intimate, glimmering and casting exotic shadows here and there. The d\u00e9cor was masculine, not excessive, and almost tribal in style. It was an intriguing blend of drama, sex, and warmth. \n\nMy eyes roamed all over the space, observing every feature, every amenity, every thought that she had clearly put into this. \n\nAnd then the bed. \n\nIt was impressive. Tall, substantial, and definitely sturdy looking. I approached it, feeling the texture of the rich oak, appreciating the quality of the hand rubbed finish. \n\nHoping Bethany didn't take notice, I gripped one of the posts and gave it a light shake. It didn't. Fucking. Budge. \n\nThe bed itself was massive and solid, but the bed linens were soft and inviting. I trailed my hands along the soft coverlet, and marveled at her creation. \n\n\"Well?\" she whispered. \n\nTurning to her, I smiled. \n\n\"You've outdone yourself Beth. I'm without words. Again!\" I laughed. \n\n\"So, everything is to your satisfaction then?\" \n\n\"I'd have to say that, yes,\" I sighed. \"Which means, my dear Bethany, that our contract is at an end.\" \n\nThe look that washed over her face was a mix of pride and sadness. \n\nBut I held out my hand to her. \n\n\"Come here Beth,\" I ordered gently. \n\nShe hesitated a moment before taking my hand, letting me draw her closer. \n\n\"Our business is concluded, yes?\" \n\nHer eyes widened, and she nodded indecipherably. \n\n\"Give me the words Bethany.\" \n\n\"Yes Curt, our business is concluded,\" she whispered, looking down shyly. \n\nLifting her chin, I commanded her full attention. \n\n\"I'm going to kiss you now, Bethany. Do you consent?\" \n\nAgain she nodded, though it was little more than a shiver. \n\n\"Yes.\" \n\nThank Christ. \n\nI pulled her to me, crushing her soft body against mine as I claimed her mouth. \n\nShe succumbed instantly to the kiss, sighing in pleasure. It was mutual. The pleasure. The relief. We'd both waited long enough. \n\nHer kiss was chaste, but it enflamed me. My fingers found her hair, and released it from its binding, her lovely golden waves spilling free. \n\nSatisfied that I could now run my fingers through her hair, I took full advantage. I pulled gently, tilting her head back. I teased her lips with my tongue, seeing if she would give, as she had that night. \n\nShe gave. \n\nGod it made my balls ache as she gave. \n\n\"Mmmm,\" she moaned wantonly as I explored her mouth with my tongue this time. \n\nI couldn't take any more. I pulled free of the embrace, stepping back, and observing her as she panted in excitement. \n\n\"Do you want me Bethany?\" I demanded. \"Tell me now.\" \n\n\"Yes, Curt. I want you. Please,\" she begged, reaching for me. \n\nIt was enough. I pulled her to me again in a kiss more aggressive than before, savoring her mews of sweet submission as I reached down to swiftly lift her shirt up and over her head. She gasped as our lips were torn from one another. \n\nMaking quick work of her bra, I all but ripped it away, relishing the brief look of fear in her eyes. \n\nImmediately her arms came up to cover her breasts. \n\n\"No,\" I admonished, her eyes flying to mine in surprise from my harsh tone. \"No Bethany, you will not hide yourself. Hands down.\" \n\nShe obeyed, but was clearly embarrassed, though I could not imagine why. \n\n\"Your breasts are glorious baby,\" I growled. \"Glorious. Do not be ashamed.\" \n\nI grazed my finger lightly over the supple globes of flesh, enjoying her shiver of anticipation, and the blush of her cheeks. \n\n\"Now you do me,\" I ordered. \n\nShe was going to be with me in this. Every step of the way. I needed to have her properly, and that meant with her full participation. \n\nAfter running her demure hands over my stomach and chest, and removing my already loosened tie, she began shyly plucking at each button. I bit my lip, willing her to go faster, but she was an innocent to the last. And I loved it. \n\n\"Good girl,\" I purred as she completed her task. \n\nObserving me now shirtless, she licked her lips. \"Now you?\" \n\n\"Yes, now me,\" I smiled, caressing her belly before unfastening her shorts. \n\nThey were snug on her, but I tugged firmly, and drew them down her legs. I could smell her moist sex through her panties, tempting me, but I pulled back. \n\nThis moment, this night, could not end prematurely. I wouldn't let it. \n\n\"Now you again baby,\" I nodded to her. \n\nI bit my lip as I saw her swallow in nervousness. I held perfectly still, demanding that she complete her task without my help. But I couldn't withhold a soft groan as I felt her undoing my belt. Her careful, delicate, innocent fingers manipulating my heavy leather belt. I was nearly undone as she slipped it free. \n\nHow I kept it together as she undid the button, and then the fly, was staggering. My dick was rigid, and it pulsed from the sensual hum of the zipper as it grazed over my shaft. \n\nThere was no concealing my lust for her now. It was there. Jutting obscenely towards her as she looked on in shock. And delicious fear. \n\n\"Now me,\" I swallowed, reaching for her, slipping my fingers inside the edge of her cute pink panties, and pulling them down and away. \n\nI fought the urge to throw her on the bed immediately as I observed her beautiful blonde pussy mane. It was just as cute as I'd dreamed. \n\nUntouched. Unspoilt. Mine. \n\nWithout waiting for her cue, Beth took her turn. \n\nHer curiosity had obviously overridden her shyness. \n\nI sucked in air through my teeth as she ran her fingers along the waistband of my shorts. She startled at the noise, and looked up at me, intrigued by my reaction. \n\n\"Go on,\" I said hoarsely, my hands fisted at my sides. \n\nI bit my lip as she pulled the boxers down, my shaft bouncing as it cleared. I chuckled softly at her little gasp, only to release a strained moan when she touched me. \n\n\"It's soft!\" she whispered in amazement. \n\n\"Doesn't feel soft to me,\" I laughed. \n\n\"It's hard, but soft,\" she mused, clearly fascinated with the basic male appendage. \n\n\"Up on the bed baby, you've had your turn,\" I teased. \"Go on, get on up on that beautiful bed. We're going to see just how durable it is.\" \n\nUnsure and shy again, she climbed up on the bed, and situated herself facing me. \n\n\"Scoot up some more baby, lay back,\" I commanded her softly. \n\nWhen she was laying flat, I crawled up and over her, straddling her waist, my cock skimming her belly and making her gasp. \n\n\"Do it again,\" I ordered as I pressed my finger to her lips. \"Do it.\" \n\nHer eyes glazed, and she opened for me. \n\n\"Suck.\" \n\nMy eyes closed as I felt her comply immediately. \n\n\"That's a good girl,\" I nodded, my cock twitching in jealousy. \n\nWithdrawing my wet finger from her now red lips, I nodded for her to take her turn. \n\n\"Touch me Bethany.\" \n\nI had to exert all possible control not to take her right then. Her fingers were so fucking soft! So small, delicate, hesitant. \n\n\"Don't be afraid baby,\" I soothed. \"You can be rougher with it, just avoid the nails.\" \n\nShe nodded, and squeezed the shaft. Then her fingertips went north, and my toes curled. She traced the ridge of the head gently before caressing it. \n\n\"It's so warm,\" she whispered in awe. \n\n\"Very,\" I agreed. \"My turn.\" \n\nI shifted to lay beside her, kissing her tenderly on the mouth before venturing south to her heaving breasts. \n\n\"God, Bethany,\" I gushed just before engulfing a nipple in my mouth. The air left her lungs as I sucked. She squirmed, and cried out. \n\nHer whimpers spurring me on, I sucked with vigor, alternating between her breasts. I desperately longed to sink my teeth into her flesh, but she was not ready. I didn't want to scare her. \n\n\"Curt please!\" she begged, although she knew not what for. \n\nIt was time. \n\n\"I'm gonna touch your pussy now baby,\" I warned. \n\nAs my hand shifted down, her legs clamped together. \n\n\"Open your legs for me Bethany,\" I purred, before resuming my attentions on her breasts. \n\nShe shuddered before slowly shifting her legs apart, just enough for my hand. I petted her pussy mane gently, teasingly, before delving lower. I barely needed to touch her to feel her juices, bountiful as they were. But she felt that barest touch and lifted her hips with a gasp. \n\n\"You're wet,\" I whispered before dipping my finger between her soft nether lips. \n\n\"Aahhh!\" she gasped, her legs trembling, closing over my wrist and then loosening. She was in heat. \n\n\"Shhh, good girl,\" I soothed. \n\nShe was so tight, so fucking tight, and so fucking wet. She wanted it. She needed it. But not enough. \n\nWith my thumb, I sought out her tiny bud. I knew I'd found it when she bucked. I prodded at it gently, savoring her squirms, holding her right leg down with mine to keep her in place. \n\n\"You want this Bethany.\" \n\n\"Aahhh, ffuuucck...\" she cried out as I began to circle her now protruding clitoris. \n\n\"It's okay baby, let go,\" I urged. \"Let go.\" \n\nI added a second finger to her pussy and stroked her. \n\n\"Yessss!!\" she squealed, her hips still squirming back and forth in silent protest. \"Aahhh!\" \n\nMy control had worn dangerously thin, and it was enough when I felt her spasm and drench my hand with her juices. Her virgin pussy juices. \n\nSweet Christ. \n\nI kissed her deeply, passionately in the aftermath of her orgasm, and she submitted beautifully, eagerly engaging my questing tongue. \n\n\"Are you ready for me Bethany baby?\" I murmured. \"I need to be inside you.\" \n\n\"Yes Curt, please!\" she nodded, incapable of anything more articulate. But I knew what she needed. There was nothing more to say. \n\nI positioned myself over her, kneeing her legs apart as gently as I could, not wanting to frighten her. What came next would be more than enough. \n\n\"Sweetheart, it's going to hurt.\" \n\nShe nodded, and begged again, \"Please...\" \n\nI stroked my cock up and down her gash, coating it as best I could before I took aim. \n\n\"Please...\" \n\nI held her wrists down firmly before covering her mouth with mine. \n\nAnd then impaled her, fully. \n\n\"Mmmm!!\" she screamed into my mouth, but I wouldn't release her. I held still inside her, letting her adapt. \n\n\"Mmmm, mmmm...\" \n\nHer cries slowly died down, transitioning to soft whimpers. \n\nI began to circle my hips, grinding down against her, putting pressure on her mound, on her clit. \n\nWhen she'd calmed, I released her mouth, venturing down over her throat, and to the side of her neck. \n\n\"I'm inside you baby. God, you feel so good,\" I breathed into her ear before licking and nibbling, drawing a new series of moans from her. \n\nAnd I began to pump her. \n\nSlowly. Firmly. Painfully. \n\nHer virgin cunt was so tight, I knew I wouldn't last long. But lucky for my pride, that was probably for the best. She was tender. Untried. \n\n\"Kiss me again Curt, please,\" she begged sweetly, and I happily obliged, releasing her wrists in tandem. \n\nHer whimpers now alternated with unmistakable cries of ecstasy. I knew she was ready. I increased my pace, eager for my own release. \n\n\"Mmmhhmmm!!\" she cried into my mouth. Her hands had ventured from my back to my shoulders, to my scalp. \n\nHer fingers in my hair, her nails tickling my scalp made my cock twitch and throb inside of her. I was getting close, and we groaned in unison into each other's mouths as my thrusts became more erratic. \n\nHow I was capable of rational thought at this point was beyond me, but the bright red light bulb suddenly went on, and I quickly pulled free of our kiss. \n\n\"Bethany I'm close...\" I gritted as I continued to thrust. \n\n\"Baby, are you on the pill?\" \n\nSilence. \n\nOh boy. \n\n\"No,\" she whispered. \n\nGod fucking dammit. Why didn't I address this earlier? Fuck! \n\nI shuddered as I slowed my pace, bracing myself for the bitter agony of pulling out. \n\nJust as I was starting to withdraw, I felt her legs tighten around me, holding me in place. My eyes flew to hers in confusion. \n\n\"Please don't stop.\" \n\nOh Jesus. \n\nDon't stop? Don't stop? \n\nFucking hell. \n\n\"Beth,\" I warned, my voice hoarse from restraint. \n\n\"Please.\" \n\nShe begged so sweetly. So desperately. Fuck. \n\nI didn't have the will to refuse her. Or myself. Not when this need had burned so deeply inside of me for so long. \n\nTrembling, I pushed slowly back in to the hilt, luxuriating once more in her virgin tightness. She moaned as her pussy fluttered around me, causing me to hiss in anticipation. \n\nThe pressure in my balls had seemingly doubled, but I clenched my teeth and fought against it, savoring the moment. She wanted me to cum inside her, unprotected. She wanted me to... \n\n\"Fffuck!\" I hissed as I surrendered fully to my pent-up desires, thrusting more urgently between her young soft thighs. \n\nI could hear her juices between us, betraying her arousal. Betraying her excitement. Her desire for me. For this. She wanted this. \n\nAnd I wanted this. \n\nI tangled my fingers in Bethany's hair, pulling gently, forcing her eyes to mine. They were full of tears. \n\nShe knew it was wrong. I knew it was wrong. \n\nAnd it forced me ever closer to the precipice. \n\nMy cock now pistoning furiously in and out of her, my balls tightening, I kissed her deeply before giving her one last chance. \n\n\"Bethany, I can't hold back anymore honey! I need to...I'm gonna...\" \n\n\"Don't stop!\" she screamed, her nails digging into my back. \n\nHer pussy clutched and milked at me and it was too much. \n\n\"Oh Christ!!\" I howled, grimacing in thick sexual agony. \n\nI forced my cock as deep as I could, rooting myself at her gate. And finally let go. \n\n\"Aaahh! Aahhhhh! Aaaaahhhhhh fffuckkk!!\" \n\nI came. And came. Inside of her. \n\nI barely registered her sweet cries as my balls released their long harbored load into her fertile young womb. \n\nFertile. Young. Womb. \n\nThoughts of the ramifications sent me spiraling, and I twitched and shuddered inside her as her virgin walls milked me of all resources. Still, her legs clutched insistently around my hips, holding me tight as she whimpered and sighed. \n\nGod. \n\nI struggled to regulate my breathing, now covered in sweat. \n\nFinally rolling to my back, I pulled her with me, chuckling softly as she refused to let me disengage. \n\nSeveral moments passed before I began to soften inside of her. \n\n\"Why?\" I asked her solemnly. \n\nSilence. \n\n\"I don't know,\" she whispered. \"I just...wanted it. All of it.\" \n\nStrangely, I could understand her vague reasoning. I should have pulled out the instant I realized she was unprotected. But like her, I wanted all of it. \n\nI wanted to possess her. As I always had. From the moment I saw her in that little gray skirt and ruffled blouse. \n\nI said nothing in response, just held her firmly to me, and kissed her head before sleep finally claimed us. ",
        "--- \n\nI awoke to the darkness, and the feel of a hard warm body above mine. Curt. \n\nI had little time to dwell on what hour it was, or what he was doing as he parted my thighs. Did he know I was awake? Did he care? \n\nHe said nothing, just spread my legs, wrapped his hands around my hips, and pulled me closer to him, angling my pelvis upward. I shivered from the feel of his hands, grasping me more urgently than before. He would not be denied. \n\n\"Curt,\" I whispered. \n\n\"If you want me to stop, just tell me,\" was all he said before he thrust deep into my pussy. \n\nI was already wet. Wanton. Waiting for him. \n\n\"Aahhhmmm!\" I cried from the pain before Curt hushed me with his mouth. \n\nHe penetrated me quickly, urgently, delivering shallow desperate thrusts, hitting my clit and making me clench down around his cock. \n\n\"Mmmm!!\" I moaned into his mouth, his tongue dipping in and tangling with mine. \n\nI was only too happy to accommodate. I thrust my hips up at him in encouragement, and sucked at his tongue when he began savagely forcing it upon me. This resulted in a feral growl from him, and I felt my pussy spasm. \n\nHe pulled free from the vicious kiss, and wrapped his arms under my shoulders, which seemed to give him more leverage. And I felt it. I felt him penetrate me deeper still. \n\nI felt small shocks of pain as he bumped against something inside of me, and the odd sensation made me cry out again and again as he repeatedly hit it. \n\n\"Aaahhh, Curt!\" I wailed. \n\n\"Yesss!!\" he hissed before shoving his tongue in my mouth again. \n\nI felt tears begin to well up in my eyes, but couldn't bring myself to deny him. I wanted him still, so badly. It was made all the more obvious by the loud sloppy noises of my pussy juices. I was a wanton whore. For this man. \n\nAbruptly Curt pulled free of our kiss and growled, \"Tell me to stop Bethany.\" \n\nBut his thrusts continued, faster still as if he had no intention of stopping. \n\nI shook my head in confusion, delirious from his savage pumping of my sore channel. \n\n\"Tell me Bethany! Tell me to stop, or God damn it I will come in your pussy again! I will do it!\" \n\nMaybe it was his cock pounding mercilessly into me. Maybe it was the long buried fantasies in my sex-starved mind. Maybe it was the fact that this man had me completely head over heels in love. But no matter the reason, I couldn't do it. \n\n\"No,\" I whispered. \n\n\"Tell me!!\" Curt barked, his cock punishing me, sending sporadic shocks of pain through me. \n\n\"No,\" I replied louder, drawing a snarl from him. \n\n\"Goddddammittt!! Aahhhh!!\" he roared as he crushed my body with his, forcing himself hard against that part of me, causing me to cry out in sweet agony, my pussy clenching down harder than before. \n\nHis cock pulsed within me and I knew he was filling me with his semen. \n\n\"Aagghhh!!\" Curt choked, hissing as he ejaculated inside of me. \"Fffffckkk!\" \n\n\"Mmmm,\" I licked my lips in the knowledge that this man that I had wanted for so long had cum inside me. Twice. \n\nIt was the most intimate experience I could imagine, and though it was irresponsible and selfish on my part, I had no regrets. I could not see myself having regrets. Ever. No matter the consequences. I only prayed that he felt the same. \n\nCurt rolled off of me, gasping for air in the wake of his orgasm. I rolled to my side and observed him. It was still dark, but I could make out his features enough to know that he was distressed. \n\n\"Curt, I'm sorry,\" I tried. \n\n\"Are you?\" he grunted. \n\n\"No.\" \n\nSilence. \n\nWhen Curt had collected himself, he finally turned to face me. \n\n\"I should be sorry Beth,\" he stated gruffly. \"But I'm not. I wanted it. And I'll want it again.\" \n\nI nodded. \n\n\"I want you to know that this is not a casual thing for me,\" he continued. \"I care, very deeply for you. There is more that I want to share with you. You'll find out soon enough what I mean, but one thing will always be true. If you tell me to stop, I will. I promise. And I want you to promise that if it ever gets to be too much, you will tell me immediately.\" \n\n\"What do you mean...\" \n\n\"No,\" Curt interjected. \"Just promise.\" \n\n\"Okay Curt, I promise I'll tell you if it's too much.\" \n\n\"Good girl,\" he kissed me softly on the mouth. \"Now come here, I want your body against mine when I wake up.\" \n\nThat made me smile, and I snuggled up to him, loving the feel of his large body protectively, possessively, cradling mine. And as I fell asleep to his heartbeat against my back, I prayed to God it would never end. \n\n--- \n\nTo be continued..."
    ],
    "authorname": "joodle",
    "tags": [
        "bdsm",
        "first time",
        "romance",
        "delayed gratification",
        "impregnation"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/dwelling-in-desire-ch-11"
}
{
    "title": "Wet Relations",
    "pages": [
        "It had been the worst week of my life - I just knew Amy had told our friends about me - the way most of them looked the other way when they happened to see me. \n\nMy home is in Hong Kong but a year ago I got a place to study here at the University of Macau. I've always been a bit shy socially - but in the year since coming here my life had changed - mostly due to Amy choosing me as her boyfriend. She's from a wealthy Macau family and before returning here to study had an expensive education in England. Amy had introduced me to a whole new circle of rich kids - being with her and them had hugely improved my English. Like Amy - many of them had been to overseas schools.\n\nFor a long time I'd felt bad about myself - I know I'm not normal and rather a deviant. I love to play with piss when I masturbate. Usually in the shower - peeing in my pants then pissing on my body and in my mouth while I wank myself. I've also bought a dildo and use this in my ass as I'm wanking. I often felt guilty about this afterwards - I'd tried to stop doing it - but it feels so good I just can't resist the urge.\n\nI guess I'm also addicted to internet porn - not just heterosexual - but also gay pictures and videos plus any with girls or boys pissing. I suppose I wanted to think of myself as normal - I find naked girls exciting - but I also can't stop visiting websites of nude boys and gay sex. I tried to think of my interest in other boys as just \"Curiosity\" and that this didn't mean I was really gay.\n\nThe first six months with Amy were good - I even gave up looking at porn sites and playing with piss for a while. She's a nice girl and I didn't mind she wasn't interested in doing many of the things I'd seen on porn websites. I was more confident that I wasn't actually homosexual - but after a while I started to look at porn again and resumed my solo piss masturbation sessions.\n\nI share a small apartment with five other students - that Saturday afternoon Macau was very hot and humid. The other guys were all out for the day and I knew my roommate wouldn't be back till late. Rather than going with them I'd taken the chance to ask Amy around - to my disappointment she said she didn't feel like making love. We talked a bit but we spent most of the afternoon sitting on the couch using our phones. I'd deliberately let my bladder get very full and after a few hours told her I was going to take a shower.\n\nI guess she was genuinely worried that something had happened to me - I was too carried away to realise how loudly I was moaning and groaning. The flimsy little bolt on the bathroom door gave way as she burst in - \"DISGUSTING HOMOSEXUAL PERVERT\" was one of the milder things she called me - she stormed out saying to never dare talk to her again.\n\nBy the Friday I was still feeling ashamed and depressed - I hadn't had time to fix the bathroom lock yet. Anyway - I just hadn't felt in the mood to masturbate- though my body had other ideas - I'd been getting unwanted erections on and off all day. It was the first time that week I'd ventured into the Coffee shop where Amy and I usually got together with our friends. \n\nI was surprised as soon as I entered when I heard my name called out - I spotted Dominic's distinctive dyed blonde hair as the twins waved me over. Sabrina was an old friend of Amy's and had been to the same school in England as her. As with Amy she and her twin brother Dominic mostly used the English names they'd chosen. I'd previously been with Amy to a few dinner parties their mother had given. \n\nThey were very friendly and chatty - It seemed that at least Amy hadn't said anything to them about me. Sabrina even said, \"You're best off without Amy ... she only chose you because you're a very handsome boy she thought she could boss about.\"\n\nI was surprised when they asked if I'd like to come to their place for dinner with them and their mother the next evening. They were both very popular at University - both of them did part time modelling work - their mother owns a model agency. Though they played this down saying it was just garment manufacturer's catalogues - but they always wore the newest labels.\n\nMy latest erection had just about died down when Dominic smiled at me.\n\n\"You could stay the night?\"\n\nI remembered the plush bathroom at their expensive apartment in One Central - my cock started swelling again in my pants as I thought of how good it would be to be able to play with myself in the shower there.\n\nOn Saturday evening it was Mrs Lam who opened the door and welcomed me into their apartment - she was very elegantly dressed and looked amazingly youthful. I'd heard the story of how she'd had the twins as a young single mum in Hong Kong - still managing to become a successful model in China. Amy had made a few snide comments before about her marrying the elderly (now dead) Mr Lam being how she'd got the money to start her own business - though I think her remarks were mostly envy. \n\nI admired the stunning evening view from the huge windows - thinking that my parent's whole apartment would easily fit into their living room. Dominic and Sabrina came in to say hello.\n\n\"Chi and Jiang Li are cooking tonight,\" Mrs Lam said in English.\n\nI remembered from before that their mother preferred English - but used the twins Chinese rather than English names. At their previous dinner parties I'd been to with Amy - their young Filipino 'Butler' had made and served the meal. \n\nDominic and Sabrina bought the food surprisingly quickly - it was a Western style meal - steak wrapped in bacon with sauce. \n\n\"Sorry - it's our poor attempt at Filet mignon,\" Dominic said.\n\nMrs Lam laughed.\n\n\"Chi's just fishing for compliments!\"\n\nIt was a smaller meal than I'm used to - no rice - but really delicious. I tried to tell them how much I loved it - Mrs Lam smiled.\n\n\"You're such a nice polite boy.\"\n\nDuring dinner Mrs Lam asked if I'd ever thought of doing modelling work. Dominic looked me in the eyes, \n\n\"You're easily handsome enough!\"\n\nI started to wonder if the twins had asked me over because of their mother's business. There was something about the way he'd looked at me that made me remember Amy hinting that Dominic was gay. I noticed his full lips and long eyelashes and felt a bit flustered as I realized I was getting an erection. Sabrina smiled.\n\n\"I bet you'd look good doing swimwear.\"\n\nI felt myself blushing, Mrs Lam laughed.\n\n\"You're embarrassing our guest.\"\n\nAfter the meal it felt very civilised and sophisticated sitting on their expensive leather couches chatting in English. They all seemed very knowledgeable about politics and world affairs - but also drew me into the conversation - none of them talked down to me. It found it difficult to tell when Mrs Lam was joking - she spoke rather formally and used quite a few long English words I wasn't very familiar with.\n\nWe were drinking low alcohol beer - I'd managed to not pee all evening. I was enjoying the increasingly full feeling in my bladder and started to feel horny thinking about playing with myself later. Dominic said he needed to have a shower - the rest of us carried on talking. After a while he returned wearing a towelling robe and announced that he was going to bed. Then said to me that I looked sleepy and should he show me to my room? \n\nIt was quite early and I didn't feel tired - but by now I was busting to pee. I also had a strong erection in my pants that I knew would show if I stood up. I was going to say that maybe I'd wait a while - when Dominic handed me my backpack. I seized the chance to hold this in front of me - saying goodnight and thanking them all for a great evening.\n\nHe led me into the large marble floored bedroom - pointing at the mirrored doors lining the wall opposite the window.\n\n\"Bathroom's through there.\" \n\nI glanced around at the king sized bed and large TV screen above a long dressing table all along the other wall. When he left I checked out the bathroom - it was luxurious with a big shower and full height mirror opposite. I went back to the bedroom - my bladder was aching - I started feeling really horny thinking about pissing my pants and fucking myself. I took off my trousers and top - standing there in just my boxer shorts with a raging erection.\n\nDominic suddenly walked back in - smiling broadly.\n\n\"Drop your pants if you want to play!\"\n\nHe let his robe fall to the floor -underneath he wore just a pink jock strap. The elastic material stretched up by his fully hard cock - making gaps at the sides where his balls bulged out, I looked at his gorgeous slim body and smooth light brown skin - he grinned and turned around so I could see his perfect bubble butt with the straps of his jock strap digging in - pulled tight by his erection. \n\nHe looked at the tent in my boxers, \n\n\"I can tell you really want to!\"\n\nI hesitated - thoughts that I wasn't really gay went through my mind - but my eyes were flicking up and down his body taking in his hard nipples and the curve of his chest. He playfully pouted his lips. \n\n\"Also we've got something in common!\"\n\nHe looked down - I saw his stomach muscles tense as he grunted. A dark spot appeared in the tight material above his cock head - then pee trickled through the fabric - dripping down between his silky smooth legs. He moaned.\n\n\"OHH Yes!\"\n\nA strong jet of piss spurted up through the material. He grinned at me - I was astonished and incredibly excited seeing Dominic openly doing my own secret perversion. He did another squirt - I could feel my cock twitching and my heart start pounding. It vaguely registered in the back of mind that Amy must, after all, have said something to them about me.\n\nHe released his cock from the jock strap - lowered it and kicked it away. I still did nothing - my eyes were locked onto his totally shaved groin. I took in his smooth tight balls - much bigger than mine and browner than the rest of his body. Dominic's hard cock was pointing almost straight up - like mine does - though he's uncut. As I gazed at him my balls were aching and my cock throbbing with desire - he's just as beautiful as any of the naked boys I'd admired for so long on websites.\n\nWhile I could tell myself that pictures and videos were just fantasy - a real life perfect fully aroused nude boy with trickles of piss down his legs blew the idea away forever. I don't even remember making the decision - I just found myself taking off my boxers. \n\n\"WOW,\" he said, \"You're gorgeous ... look at yourself in the mirror!\"\n\nHe started stroking his own cock and playing with his nipple. I'd never seen the look of sheer lust and desire in anyone's eyes before or ever been looked at that way. \"Such cute balls and so much hair ...\" he said. \"I love boys with cut dicks! Turn around.\"\n\nI obeyed - showing him my rear. Dominic came up behind me and gently caressed my ass cheeks. \n\n\"Mmm you've got a beautiful butt!\"\n\nHe lightly stroked the sides of my body - then his lips brushed my neck. I felt his body against my back - his warm firm cock nestled between my ass cheeks and against my spine. My body was tingling as he reached around and brushed his fingers against my hard nipples while he switched between my ears softly licking and nibbling them. Foreplay with Amy had always been rather mechanical and mostly me doing it - never like Dominic's exquisite tender lover's touch on my body. \n\n\"You want me so bad ... look in the mirror,\" he whispered in my ear.\n\nI saw a thin silver thread hanging down from the head of my cock as I felt it throbbing with longing for him to touch me. He started stroking the inside of my legs then his fingers caressed my aching balls - he turned me around to face him. His lips brushed lightly against mine - I sighed as at last I felt him stroke my shaft - I reached out - doing the same to him and fondled his tight smooth balls.\n\nAs we kissed softly I felt Dominic's hand round my shaft wanking me and his other flicking and pinching my nipple. I held his rock hard cock and looked down - I loved the contrast of the shining pink head of his cock against the brown of his foreskin as I rolled it up and down. \n\nWe moaned as our tongues entered each other's mouths while we kissed. We wanked each other faster - Dominic let go of my cock and moved my hand from his. We pressed our bodies together squeezing our cocks between us - our hands grasping each other's ass cheeks.\n\n\"Let's go to the bathroom,\" Dominic said.\n\nI thought of being together with him in the shower - seeing and feeling his virile cock spraying piss onto my naked body - it made me so excited I could feel the tension building inside me. He led me through to the bathroom - opening a cabinet to get a blue tablet which he bit into and handed me half.\n\n\"Viagra - good for a long playtime!\" \n\nI moaned and fondled his balls. He giggled.\n\n\"Not yet Sweetie! Plenty of time for pee later ... first I need to get you nice and clean.\" \n\nI was surprised and curious - he unhooked a hose next to the toilet with a plastic attachment on the end - turned on the taps - letting the water run onto his wrist while he adjusted these. \n\n\"Have you had an enema or douche before?\"\n\nI shook my head and said no. He slapped my ass.\n\n\"Bend over ... tell me if it starts to feel uncomfortable ... each time try hold the water in for as long as you can.\"\n\nIt was very erotic and intimate - while he was doing it he fondled my cock which was so hard I was hardly aware of my busting bladder. The times I was sitting on the toilet he kneeled down and we kissed while he played with my cock - I was too excited to feel embarrassed. \n\nWhile we were doing it we didn't talk much - he said how hot I was and we touched each others bodies a lot. He asked me if Amy was on the pill - I said not. He grinned;\n\n\"I guess you used condoms? She the only girl you've done it with?\" \n\nI said yes to both - he looked at me.\n\n\"Or other boys?\"\n\nI felt my face blushing\n\n\"I'm not ... um ... no, none ... how about you?\" \n\nHe grinned.\n\n\"Guess it's rather complicated! Also sometimes pick up boys ... always safe sex ... also regular tests ... you OK to bareback?\"\n\nI felt desire swell in my groin - I stroked his cock. \n\n\"I want your naked cock in me so bad!\" I heard myself saying.\n\nHe grinned and fondled my cock \n\n\"I need your lovely dick inside me to!\"\n\nHe turned on the shower and we soaped down each other's bodies - spending a lot of time on our throbbing erections - then used the huge fluffy white towels to dry each other. I asked him if he needed to clean himself out as well - He grinned and said that's what he'd been doing earlier.\n\nWe stood facing each other and kissed long and hard while Dominic held our cocks together wanking both of us. He gave a muffled groan in my mouth and I felt his hot stream spray onto my cock head. I moaned in delight feeling the wetness on my tummy and his warm piss on my balls - splashing down on the tiled floor between my legs. \n\nHe broke off kissing and kneeled down to suck my cock wanking it at the same time with his hand. He held still for a while with my cock in his mouth. I knew what he wanted - I tried to push but I was too excited to pee. After a bit he stood up again smiling at me.\n\n\"Don't worry, I know you will!\"\n\nI was surprised when Dominic took hold of my cock leading me back towards the bedroom. I was about to say that I wanted to stay in the bathroom and piss together when I was startled to see Sabrina. She was lying naked on the bed - her legs spread wide with her hand rubbing her shaved crotch - the duvet gone. \n\nThe thought briefly crossed my mind that maybe she was expecting only me to be there until she looked at Dominic holding my cock and grinned.\n\n\"I see my brother's been giving you a helping hand!\"\n\nHe gave my cock a few playful wanks then let go of it - she smiled at me. \n\n\"Nice Dick! Twins get used to sharing nice things ... you've been naughty boys?\" She held up Dominic's jock strap, \"Someone's peed their pants!\"\n\nDominic grunted as a big spurt of piss suddenly shot up from his cock - wetting the bed sheet - some splashing his sister's small pert breasts. He grinned.\n\n\"Accidents can happen to anyone!\"\n\nI felt my cock straining with excitement as I saw her spread his pee on her body with her hands. She smiled at me - her eyes flicking up and down my body - then she groaned as a short jet of piss squirted out between her legs. My balls ached as I thought about what she'd just done. She got up off the bed.\n\n\"See what a rude boy my brother is!\"\n\nDominic smiled\n\n\"See what a slut my sister is!\"\n\nSabrina stood at the edge of the bed - raising one leg to rest her foot on it. She put a hand on her hip and with the other started massaging her pussy. \n\n\"Don't listen to my brother - I'm really a nice shy respectable girl!\"\n\nI was incredibly horny but a bit bemused - I knew the twins were playing a game but I wasn't sure what to expect. Dominic went over to stand in front of his sister - from behind I saw him bend his knees and his firm ass muscles start flexing. I moved towards them - wanting to see if he was really rubbing his cock against her. Sabrina looked over his shoulder at me.\n\n\"See what my naughty brother's doing now!\"\n\nOnce I got beside them I realized that Dominic wasn't just touching his sister with his cock - I saw his shaft was sliding in and out of her pussy - he grinned at me \n\n\"I told you my sister's a slut!\"\n\nThey began kissing full on the mouth - both moaning as Dominic's body started thrusting hard. My cock throbbed with lust as I watched brother and sister totally uninhibited doing something so amazingly taboo right in front of me. I groaned as I felt the tension in my body grow and my ass muscles starting to contract. Dominic was still fucking her fast as they stopped kissing and Sabrina looked at me. \n\n\"Sounds like you need to pee as well?\"\n\nI struggled to stop myself from touching my cock and moaned.\n\n\"I think I'm going to cum!\"\n\n\"You can set-up the camera to help you cool down,\" Dominic said.\n\nHe carried on pumping Sabrina as he told me to open one of the unit doors and get out what looked like a camcorder on a small tripod. He gave me instructions on what buttons to press - there was no cable attached to the camera but suddenly the view of the bedroom appeared on the big screen on the wall. \n\nDominic told me to put the camera on the floor behind Sabrina pointing up beneath her. The view of Dominic's beautiful big balls and his shaft thrusting in and out of his sister's pussy filled the screen.\n\nDominic reached around her and I saw his fingers at the top of the picture - then his middle finger pushing into her ass hole. Sabrina grunted and I watched his balls become shiny wet - then her piss begin dripping from them - splashing the floor and running down his legs. I was incredibly aroused - switching between looking at them kissing as they fucked and seeing the view of them from below on the screen. \n\nSabrina looked down at the thin sliver thread again hanging from the tip of my cock.\n\n\"I think you need to cool down a bit more!\" \n\nShe reached out and fondled my balls - then took hold of my cock - guiding me to stand next to them. Sabrina began kissing me and gently stroking my shaft - moaning into my mouth as her brother pounded her pussy.\n\nDominic slowed down as Sabrina moved her head back and looked at me.\n\n\"Did you used to lick Amy's cunt?\"\n\nShe wanked my cock as I moaned. \n\n\"Ahh - She let me do it once ... but she didn't like it\"\n\nShe giggled.\n\n\"Amy always was a silly girl! ... Would you like to lick mine?\"\n\n\"First I need to pee,\" Dominic said.\n\nHe bent his knees - his cock only just inside her pussy and grunted. They both moaned as he pushed deep inside her again - on the screen we watched piss squirting out from her around his shaft - soaking his balls.",
        "Dominic grinned at me as he withdrew from his sister - more of his pee gushed out of her pussy. She grasped his cock and wanked him fast while I kneeled down on the wet floor in front of her. I felt my cock swelling with excitement as I saw her pee trickling down the inside of her legs. Dominic moved round behind her putting the camera up on the dressing table unit.\n\nI put my mouth to her dripping wet pussy - loving the taste of piss. Dominic's chin touched mine as he knelt down and began licking her ass at the same time. She moaned. \n\n\"Work your tongue either side of my clit - also push it into my cunt hole!\" \n\nBeneath her body Dominic stroked my cock - I felt it twitching and groaned. He let go - instead guiding my hand to his shaft - I began wanking him while my mouth worked on his sister's pussy. Sabrina gave me a few more instructions - she sighed as I flicked my tongue back and forth under her firm clit - I felt a small amount of pee squirt into my mouth. I pushed my tongue in as far as it would go - moaning in pleasure as I tasted her doing another spurt.\n\nSabrina's hips started moving she sighed.\n\n\"MMM - You're a good cunt licker! Let me suck your cute dick now!\"\n\nI stood up while she knelt down and began licking my balls. Dominic went round behind me and kneeled down telling me to put my foot on the bed, I raised my leg and felt his hot breath on my ass crack at the same time as Sabrina's mouth closed around the head of my cock and her tongue started flicking the tip. \n\nI looked in the mirror - watching Dominic behind me - both of his hands spreading my ass cheeks as I felt his wet tongue playing around my hole then pushing into me. Sabrina was using her hand as well on my shaft as she sucked me - I saw her other hand reaching under me to play with her brother's cock. I began moaning and Sabrina quickly stopped wanking me and just licked my shaft and fondled my balls.\n\nDominic stood up.\n\n\"My turn!\"\n\nWe swapped places - with his sister sucking him while I kneeled down behind him. I'd seen rimming on videos many times but it was never something I'd even suggested to Amy. As I parted his smooth ass cheeks and saw his sexy puckered hole I felt my cock straining with lust. He made faint sounds of pleasure as I used my tongue on his ass the same way he'd just done to me - Sabrina stroked my cock gently while she sucked her brother's.\n\nMy tongue felt his ass muscles tighten as he grunted. \n\n\"My sister needs a drink!\"\n\nSabrina moaned - As he turned round to face me I saw her spreading his pee on her breasts and down her body. I kneeled up higher to suck his gorgeous cock while Sabrina grasped mine again and began rimming her brother. He groaned as I tasted his lovely piss spurting into my mouth - I swallowed and started moaning as I felt myself about to cum - Sabrina quickly let go of my cock.\n\nSabrina stood up and Dominic stepped back - I got up off the floor as she moved between us and reached out to play with both our cocks. Dominic guided one of my hands between his sister's legs and the other to her breast. I put two fingers inside her wet pussy while gently pinching her hard nipple. Dominic smiled and caressed his sister's other breast. \n\n\"Isn't she beautiful?\"\n\n\"You're both stunning!\" I replied.\n\n\"Let's fuck!\" Sabrina said.\n\nShe told me to get on my hands and knees across the bed while Dominic adjusted the camera. I got into position on the crisp white sheet facing the mirrors. \n\n\"Mmm lovely sexy boy cunt ... let me get you ready for my brother's dick,\" Sabrina said.\n\nI looked sideways at the TV as she got on all fours behind me and I felt her warm wet tongue in my ass crack. Dominic went around to stand at the other edge of the bed behind her - he grinned at me in the mirror. \n\n\"I'll get my sister's cunt warmed up for you.\"\n\nOn the screen I saw him bend his knees slightly and sensuously move his body like a well practiced dancer as he mounted his sister - not touching his cock as he smoothly penetrated her. Still licking my ass hole she moaned as he pushed his body forward and started slowly thrusting.\n\n\"AHH my dick loves this!\"\n\nI watched the screen as Dominic gradually fucked his sister faster while she switched between pushing her fingers inside my ass and using her tongue - we all groaned in pleasure. Still pumping Sabrina - Dominic grinned at me in the mirror. \n\n\"I think my sister's ready for you now!\" \n\nI got up and stood beside him - Sabrina moved forward - his cock sprung up as it left her body. I eagerly kneeled on the edge of the bed behind her - moaning at the lovely sensation of my cock sliding into her warm moist pussy.\n\nThe lube on Dominic's fingers felt cold at first as he worked it into my hole. My hips were moving on their own.\n\n\"Go in deep and hold still,\" he said.\n\nSabrina moaned as I pushed right inside her. I felt the head of Dominic's cock pressing against my hole - saw him holding his shaft down on the screen. He stroked my hair. \n\n\"Sexy virgin boy! ... just move back as gently as you want,\" he said softly in my ear. \n\nI eased back feeling the pressure from Dominic's cock make my ass ring relax. I pushed back fast - it felt so good as Dominic's hard shaft was shoved deep into my body - he grunted in surprise - we both groaned as my hips started pumping. I leaned forward and reached round to fondle Sabrina's breasts and tweak her nipples - at the same time Dominic started to pinch and squeeze mine.\n\nThe three of us were making sounds of pure animal pleasure. The sensations from Dominic's shaft stretching my hole and my throbbing cock inside his sister were driving me wild. I felt some of the water from my clean out earlier leaking out and trickling down the back of my balls as my body started thrusting faster and faster. \n\nSuddenly the door opened and Mrs Lam walked in. \n\n\"WHAT ARE YOU DOING,\" she exclaimed.\n\nI fought to control my body's urge to keep moving my hips - Dominic and I looked up at her. \n\n\"HOW COULD YOU ...\" she said.\n\nI had the same sinking feeling as when Amy had caught me playing the weekend before. Except this time I was kneeling there fucking Mrs Lam's daughter with her son's cock deep in my ass hole. I felt my face start to burn with shame - I'd been so carried away I'd not even thought about their mother being in the apartment. She was still wearing her tight slacks and blouse. \n\n\"... Start without me!\" She finished the sentence.\n\nHer hand started massaging the crotch of her slacks - looking at me she moaned. \"You're a very beautiful boy naked!\"\n\nI knelt there transfixed - trying to take in the situation as Sabrina began moving her body back and forwards on my cock. Dominic's body slapped against my ass cheeks as he started thrusting.\n\n\"Hi Mom - looks like you need to go to the toilet?\" He said.\n\nI felt a mixture of excitement and relief together with my erection returning to full strength as I realized that the twin's mother was also part of their game. Mrs Lam rubbed faster between her legs - Sabrina giggled.\n\n\"It would be so embarrassing to piss your pants in front of our guest!\"\n\nMrs Lam groaned - I watched in amazement as dark streaks appeared down the inside legs of her tight slacks. As the wet patch spread out around her hand from her crotch she smiled at me and moaned. \n\n\"AHH - you like it don't you?\"\n\n\"Yes ... I love it!\" I replied.\n\nShe removed her hand - pee dribbled down between her legs. She grunted and a jet of piss spurted out through the fabric covering her crotch. \n\nMy hips started thrusting again as Mrs Lam lowered her slacks - pee was dripping down from her thick black bush. \n\n\"Does your penis feel good inside Jiang Li's vagina?\" She asked.\n\n\"Very good!\" I moaned as I pumped Sabrina.\n\n\"And you enjoy Chi's penis in your anus as well?\" Mrs Lam asked as she undid her blouse.\n\nMy body kept up its rhythm as I nodded my head. \n\n\"Yes thanks ... It's ... great,\" I managed to reply.\n\nShe laughed.\n\n\"You really are a nice polite boy!\"\n\nNow naked she got on the bed and knelt up beside me - I saw Dominic's arm reach out and his fingers sliding inside his mother's pussy. Then she started playing with my nipple as she kissed me full on the mouth. We were all moaning in pleasure - I was breathing hard in Mrs Lam's mouth as my body started thrusting faster.\n\nShe broke off from kissing me. \n\n\"Did I miss any of you having an orgasm?\"\n\n\"No mom ... MMM ... I'm just about to,\" Sabrina gasped.\n\nAs I leaned forward over Sabrina - Dominic locked mouths with his mother. I was humping Sabrina like a wild animal - she groaned loudly - yelling out. \n\n\"OH YES ... AHH ... I'M SQUIRTING!\"\n\nThen suddenly the fantastic feeling of powerful spurts of her hot piss spraying out onto my balls - she moaned. \n\n\"AHH ... YES ... SO GOOD!\"\n\nRaw lust and pleasure consumed me as I felt Mrs Lam's pee splashing onto my thigh. She stopped kissing her son and smiled at me in the mirror. \n\n\"It looks like you're just about ready to ejaculate inside Jiang Li?\"\n\n\"Yes ... AHH ... IM CUMMING,\" I groaned.\n\nI felt like my cock was going to explode - my ass ring pulsed around Dominic's shaft as my body jerked uncontrollably pumping my cum load inside his sister. I cried out in ecstasy as waves of pleasure surged through my body - it was much more intense than any orgasm I'd ever had before.\n\nI was panting as Dominic withdrew gently from my ass - sweat ran down my sides from my armpits and I felt Sabrina's piss trickling down my legs. Mrs Lam stood up putting one foot up on the bed as she grinned at me in the mirror - I saw Dominic move to stand behind her. I felt her hand between my legs fondling my balls.\n\n\"You've got very cute testicles!\"\n\nThen her finger sliding in and out of my ass hole.\n\n\"And a very sexy anus ... let me see your lovely circumcised penis.\"\n\nI was still rather dazed and obediently pulled out of Sabrina - fleetingly wondering how Mrs Lam knew I had no foreskin as I got up off the bed and stood facing her. Dominic was smiling at me over her shoulder - moving his body to rub his cock against her back. His hand fondled her breast while he used the other to rapidly finger her pussy. She reached out and began gently wanking my still rock hard cock - slippery with cum. She fondled my balls - wet with Sabrina's piss.\n\n\"What a gorgeous boy you are!\" \n\nSabrina moved back nearer us and lowered her head and breasts onto the bed - pushing her boyish ass upwards. Even after what had just happened - I was surprised when Mrs Lam leaned right forward and began licking her daughter's pussy from behind. Then Dominic knelt down behind his mother - I saw in the mirror his face buried between her ass cheeks. He was wanking himself while reaching round her with the other hand - sliding two fingers in and out of her pussy as his mouth pleasured her ass hole. \n\nSabrina groaned as her mother's mouth covered her pussy then Mrs Lam leaned upright again with her mouth closed and cheeks slightly bulging. She kissed me again - as we opened our mouths piss flowed from hers into mine. I tasted my cum as well in her mouth as I gulped down her daughters pee. She moved her head back moaning in pleasure as she gazed at my body - I saw the same look of desire in her eyes as in Dominic's. \n\n\"Mmm ... that's nice boy cream! ... Do you like the taste of semen as well?\" She asked.\n\nMy cum dripping down onto the wet sheet between Sabrina's legs looked so sexy. I eagerly leaned forward and licked her pussy feeling her do a small squirt of pee on my tongue. Mrs Lam reached beneath me to wank my cock.\n\n\"That's a lot of sperm! ... When did you last ejaculate?\"\n\nI moved upright again - my hands reaching out to fondle her gorgeous breasts. She pleasured my cock faster with her hand.\n\n\"More than a week ago ... the Friday before ... um ...\" I replied.\n\nDominic stood up behind his mother and grinned at me. \n\n\"Before Amy caught him doing this - .\" \n\nHe pushed his groin forward and grunted as a jet of piss shot out from his cock -splashing her back. Mrs Lam put her palm under her daughter's pussy and slid her thumb inside - then spread my cum on Sabrina's ass hole. She guided my hand to Sabrina's rear - then she started fingering her daughter's pussy. I excitedly realized what they wanted and pushed my finger into Sabrina's other hole. \n\nSabrina was moaning as her mother looked down at my cock and smiled at me. \n\n\"Have you urinated yet?\"\n\nI shook my head - becoming suddenly aware of the lovely ache in my cock and bladder as my urgent need to pee built up. She grinned. \n\n\"It'll be easier now you've had your first orgasm ... just let go when you get the urge!\"\n\nHer hips were moving as I took in her perfect trim figure and thought briefly that she'd still be fine as a model. My cock twitched with excitement - but I still couldn't piss. Dominic went to get the camera - putting it on the floor pointing up to show the close up of his mother from below - her foot still on the bed. Then he stood behind her reaching round again to finger her pussy. On the screen I saw him slide a finger of his other hand into her rear as smiled at me. \n\n\"Have you ever seen a boy fuck his mom in her bum hole before?\" \n\nI felt a wave of desperation and the delicious ache as I tried to relax to stop my muscles involuntarily straining to hold in my piss. Dominic moved his legs apart bending his knees as he held his cock down against his mother's ass. She gasped as he groaned and his pee started dripping down from his cock head. As he began pushing into her she grunted - clear water squirted out of her ass around his shaft as he penetrated her. At the same time a fountain of pee sprayed up her tummy from behind Dominic's palm covering her crotch. Sabrina giggled \n\n\"Well he has seen it now!\"\n\nOn the screen I saw water dripping down from Dominic's balls and realized that Mrs Lam and Sabrina must have done enemas as well while Dominic was giving me my clean out. As Dominic began thrusting his mother's firm breasts bounced up and down - bigger than her daughter's with dark rings around her large hard nipples. On the screen - between Dominic's legs I saw his bulging balls and his shaft pumping his mother's ass while his fingers worked her pussy. \n\nI felt my cock straining and twitching - Mrs Lam glanced down at it moaning. \n\n\"It looks like you're enjoying this!\"\n\nI groaned in pleasure as I felt the gorgeous wave of relief as a strong stream of piss suddenly spurted up out of my cock splashing her tummy and breasts. She sighed.\n\n\"AHH - lovely hot juice!\"\n\nI moved back a bit as she leaned forward and closed her lips around my cock - I felt the great sensation of my pee streaming out into her warm mouth. Dominic panted as he fucked his mother's ass. \n\n\"Try to save some juice for later!\"\n\nHer lips relaxed around my shaft - I clenched my ass struggling to stop my flow as she let my piss flood back out of her mouth. I moaned as I felt the sensation of hot pee soaking my balls and running down the inside of my legs.\n\n\"My Mom loves a dick in her bum hole and mouth at the same time!\" Dominic said.\n\nShe leaned up again - still fingering her daughter with one hand she took hold of my cock with the other. As she guided me towards her pussy she moaned. \n\n\"MMM ... I also love a penis inside my vagina as well!\"\n\nDominic removed his fingers from her pussy and grasped my shaft bending it down. I caught a glimpse of her clit on the screen before he started rubbing the head of my cock against it - I saw that hers was much bigger than Sabrina's. Mrs Lam grunted - the sensation of her jet of hot piss right on the tip of my cock was amazing. I pushed - groaning with the pleasure of more of my own pee spurting out against her pussy.\n\nOn the TV I saw my piss spraying out beneath us and around Dominic's balls - he moaned. \n\n\"OHH ... that feels so hot!\"\n\nHe moved his hands up to fondle his mother's breasts - rubbing her nipples with his thumbs. Without even thinking about it my body knew what to do. I bent my knees and my shaft slid easily inside Mrs Lam's delicious warm hole. My hips started thrusting as I felt the rhythmic pressure inside from Dominic's cock fucking her ass at the same time. She and I kissed passionately while I pumped her pussy - loving the taste of my piss and cum in our mouths. I just about managed to keep up the rhythm with my finger in Sabrina's ass at the same time. \n\nWe were all moaning in pleasure again - Mrs Lam grunted - I felt my cock being squeezed and her hot piss spray down the top of my shaft and run down my balls. Sabrina started groaning louder - Mrs Lam stopped kissing me and looked at Sabrina in the mirror.\n\n\"Are you going to climax again Jiang Li?\" \n\nSabrina whimpered. \n\n\"Yea ... Soon ... AHH ... Don't stop ... Faster!\"\n\nMrs Lam fingered her daughter quicker - I matched the speed with my finger in her ass hole. \n\n\"OH MUMMY!\" Sabrina yelled.\n\nHer pee sprayed out around her mother's hand. Mrs Lam quickly used two fingers to part her daughter's pussy lips - as she cried out - strong pulses of piss jetted out behind her - splashing my leg and soaking her mother's thick black bush. \n\nMrs Lam and I used both hands to clasp each other's asses as we fucked while Sabrina got up off the bed. It was amazingly hot seeing mine and Dominic's shafts thrusting inside his mother next to each other on the big screen. I matched his pace - both going in and out together. \n\nDominic leaned his head over her shoulder - he and I kissed breathlessly as we pumped her. Dominic groaned and quickly pulled out of his mother's ass - I carried on fucking her pussy - thrusting faster - moaning as I felt my balls tighten as I got near to cumming. \n\n\"I think we need a break,\" she said in my ear.\n\nI withdrew from her pussy - I groaned as I felt my balls aching and my cock straining.\n\n\"Are you going to orgasm again? ... Would you like to put your penis back inside my vagina to ejaculate?\" Mrs Lam asked.\n\n\"Ahh ... I think I can hold on,\" I moaned.\n\nDominic and I stood either side of his mother - I noticed his cock twitching and tight bulging balls - his face was flushed and nipples hard - he grinned at me.\n\n\"I'm right on the edge as well!\" \n\nSabrina came over - standing beside me and her brother she cupped our balls in either hand - we both groaned as she squeezed. She moved forward between us - kissing her mother full on the mouth and putting one hand to her pussy. After a while Sabrina stepped back and Dominic started gently fingering her. Mrs Lam smiled at me - I copied Dominic - slipping two fingers into his mother's pussy.\n\nMrs Lam used one hand to switch between fondling Dominic's balls and gently stroking his cock while Sabrina began doing the same to me. \n\n\"I'll get us some drinks,\" Sabrina said.\n\nMrs Lam took over stroking my cock and fondling my balls - still doing the same to her son with her other hand. Sabrina got some bottles of juice out of a fridge behind one of the unit doors and handed them round. My cock twitched as I saw the sexy white trickle running down the inside of one of Sabrina's legs. She followed my gaze and grinned.\n\n\"That sure was a big load!\"\n\nAs we were drinking Sabrina masturbated me slowly. Dominic groaned as Mrs Lam pulled back his foreskin.\n\n\"I'm sure Chi's got a lot of semen as well ... he's not had a climax since Tuesday breakfast time!\" She said.\n\nHe moaned again as his mother gave his cock a gentle caress. Sabrina smiled at me.\n\n\"My Brother's been saving it for you ... It was Tuesday lunch time when Amy told me about you.\"\n\nDominic grinned as he got us another bottle each.\n\n\"We were all really horny when we heard what Amy had said about you,\" he said. \"We spent ages waiting for you to show up ... it's not easy finding people who like our sort of play!\"\n\nMrs Lam started wanking her son's cock while his free hand was moving between her legs. She smiled at me.",
        "\"Especially not such a beautiful boy as you! ... Chi's been having erections and masturbating on and off all day thinking about you!\"\n\nSabrina giggled. \n\n\"We're usually all naked when we're at home together ... plus he fucked mum and me a couple of times earlier today as well!\"\n\nDominic grinned. \n\n\"But I still managed not to cum!\"\n\nI began to realize why Dominic was earlier able to just walk up to his sister and effortlessly stick his cock in her pussy hands free. Mrs Lam took hold of my cock.\n\n\"Let's see how your manhood measures up to my boy Chi's,\" she said.\n\nShe guided me to stand close facing him then rolled back his foreskin and rubbed the heads of our cocks against each other. Mrs Lam looked down at our cocks as she wanked them.\n\n\"I think your penis is a little bit longer than Chi's,\" she smiled and fondled her son's big balls, \"but you can see why he looks so good modelling speedos!\" \n\nDominic stood back - looking down at his cock he moaned. \n\n\"OH Yea ... That feels so good!\"\n\nHis cock twitched and his piss spurted up onto my chest. As he turned towards his mother I felt the ache from my own straining bladder and tried to relax. More pee jetted out of Dominic splashing his mother's breasts. \n\nWe finished our drinks - Mrs Lam sat down on the bed and began sucking mine and Dominic's cocks. He did a squirt of piss in her mouth as he and I started kissing while she wanked and sucked us. \n\nAfter a while Mrs Lam got up and Dominic took her place sitting on the edge of the bed. Sabrina sat beside him - with one foot on the floor and her other leg up behind his back. As he put a couple of fingers into her wide open pussy she began wanking his cock. \n\n\"See if you can give us a drink now,\" she said grinning at me.\n\nI moved toward them and they started licking and kissing my cock from either side. Mrs Lam got behind me - I felt her thick bush against my ass cheeks as she put her arms around my waist. Dominic put his mouth around my shaft as his mother used both hands to press against my bladder. I groaned as I felt the delicious wave of desperation and my piss squirting into Dominic's mouth. I stopped my stream as Sabrina put my cock in her mouth - I grunted in pleasure as I pushed out another spurt of pee for her.\n\nMrs Lam knelt down behind me - she patted my calf and I put one foot on the bed beside Dominic. As their mother expertly rimmed my ass hole the twins took it in turns to suck my cock and lick my balls. I moaned and watched us in the mirror as they pleasured me loving the feeling as more pee squirted from my cock.\n\nSabrina got further apart from her brother - he moved to sit further back on the edge of the bed as Mrs Lam adjusted the camera to show his cock centre screen. With her back to him she knelt down over his lap with her knees either side of him- guiding his cock into her pussy. She groaned as her piss squirted down the underside of his shaft spraying his balls. Then she began moving up and down moaning in pleasure as she fucked herself. \n\n\"Put your penis between my breasts,\" she said to me.\n\nI took my cock out of Sabrina's mouth - putting it in Mrs Lam's cleavage as I stood in front of her. I pushed and groaned in delight as my pee sprayed her chest and neck. She used both hands to push the warm flesh of her wet breasts up around my cock pleasuring it as she bounced up and down on her son's lap. Sabrina got up to stand beside me - as she and I began kissing I felt her fingers push into my ass hole. More piss squirted out of me onto her mother as Sabrina put her foot on the bed - I put my hand down sliding two fingers inside her pussy to massage her clit.\n\nDominic began moaning and his mother quickly lifted herself up off his shaft releasing my cock from between her breasts. Still kissing me Sabrina took hold of my cock - I turned towards her as she guided it to her pussy. I bent my knees and grabbed her ass cheeks as I pushed my shaft deep inside her. We both moaned as we kissed while I pumped her hard feeling the tension in my body building. \n\nAs Sabrina and I fucked - Dominic went over to the other side of the bed and lay down across it with his head near the edge. Sabrina moved her head back.\n\n\"I think my brother needs me to give him a drink!\"\n\nI withdrew from her and she got on the bed going over to kneel over Dominic with her knees either side of his head - she grinned at me as her pee squirted out onto Dominic's chin. Her piss trickled down into his open mouth as she lowered her body for him to lick her pussy. Mrs Lam knelt down on all fours between her son's legs and started sucking and wanking his cock - pushing her ass up in the air. \n\nDominic raised both feet up high and Sabrina leaned forward - putting her arms over the back of his legs so his ass hole was pointing up. He groaned and I saw his piss spurting into his sister's mouth as his mother moved down lower and began rimming him. Sabrina raised her head - smiling at me as she wanked her brother's cock.\n\n\"Would you like a drink from my mum's cunt?\"\n\nI nodded excitedly - kneeling down on the floor and leaning over the edge of the bed. I was fascinated now I could see Mrs Lam's pussy properly - between her red swollen lips her clit was sticking out like the head of a small cock with no pee slit. She gave a muffled groan as piss squirted out behind her. \n\nI quickly put my mouth to her pussy and gulped down her pee - rolling my tongue round her big swollen clit. Her musky womanly scent combined with piss made me completely forget any inhibitions as I slid two fingers into her ass hole. She moaned in pleasure as I flicked my tongue fast against her clit then pushing it in and out of her hole. \n\nAs I pleasured her pussy I felt my cock start aching with the powerful urge to pee again - I groaned and clenched my ass tight to hold it in. I didn't need to think about what I wanted to do as I stood up. I leaned forward and held my cock against Mrs Lam's pussy as my piss stream began. We both moaned as I instinctively pushed my cock inside her and began thrusting. \n\nI felt pee spraying out around my shaft as I managed to stop my flow. I reached beneath her to fondle her lovely breasts while my body began fucking her faster as the pleasure from my cock grew stronger. Sabrina looked up at me again - she licked Dominic's cock.\n\n\"Don't cum yet! - my brother needs you to fuck him first!\"\n\nI controlled my body's urge to keep thrusting and pulled out of Mrs Lam's pussy. Sabrina climbed off her brother and she and her mother went to kneel either side of Dominic each holding one of his legs up. I saw him put a hand beneath each of them and his fingers begin working both their pussies. Dominic grinned at me. \n\n\"Do you like my bum hole?\"\n\nHe looked so gorgeous - the naked desire on his handsome smiling face. At the same time - seeing his sexy puckered hole below his tight smooth balls. I felt my cock throbbing with desire at the thought of being inside his body. Sabrina used her fingers to work lube into his ass.\n\n\"I love it!\" I said.\n\nI knelt into position - Sabrina put some lube on my cock and held it down against her brother's body. It felt much tighter than a pussy as I pushed - then suddenly I popped inside him and felt his ass ring squeezing behind the rim of my cock head. He moaned as I slid further in - piss spurted up his body from his hard cock - I felt his body squeezing my shaft as he strained to stop his stream.\n\nAs I began thrusting his mother and sister each played with one of my nipples and took turns kissing me. Then I leaned forward on top of Dominic - moving my legs out behind me - he and I kissed long and deep as I fucked him. I soon felt myself getting near to cumming again and was vaguely aware of Mrs Lam and Sabrina getting up.\n\nMrs Lam stroked my ass cheeks as I pumped her son faster.\n\n\"Kneel up for a while ... one more game ... then I promise you can ejaculate again!\" She said.\n\nMy cock was aching inside Dominic - he put his feet down either side of me and raised his ass as I kneeled up. Mrs Lam straddled his body with her back to me - leaning forward so his cock was just touching her pussy. \n\n\"Rub my mum's cunt with my dick,\" he said.\n\nI began using the head of his cock to massage her clit - she grunted and her pee sprayed around his shaft up my body. I felt Dominic's ass squeeze my cock as he began pissing as well. I aimed his cock at her pussy then upwards to soak her ass hole. I felt the hot wetness on my shaft and trickling onto my balls. She moved further down her son's body and I lined up his cock to enter her pussy. \n\nAs Dominic's shaft slid inside her - Mrs Lam looked over her shoulder.\n\n\"Would you like to keep Chi company? ... put your penis in my vagina as well.\"\n\nSabrina moved round behind us holding the camera - I withdrew from Dominic's ass. He opened his legs wider and I managed to get into position with one knee raised. Sabrina zoomed in the camera as I leaned forward - holding my cock pressing hard against his shaft and began to push. It was easier than I thought it would be - Mrs Lam gasped as I suddenly slid inside as well - her pussy squeezing mine and Dominic's cock heads tightly together. \n\nIt was so good feeling our cocks rubbing against each other and seeing on the screen his firm shaft sliding in and out below mine as he started moving slowly. He stopped thrusting and I took over - The three of us were moaning in pleasure and watching the rear view of us from the camera. Dominic groaned - I felt his powerful jet of piss right on the tip of my cock then saw it spraying out from the edges of his mother's pussy hole between our shafts. \n\nDominic and I took it in turns to do the work - I fondled his mother's lovely breasts and hard nipples while she and Dominic kissed. He was holding still while I was thrusting - he started moaning.\n\n\"AHH ... Mom ... I'm creaming inside your cunt!\"\n\nI felt his cock become more slippery against mine.\n\n\"You're going to have my baby!\" He panted.\n\nI saw his shaft become shiny with his cum as his creamy white load started seeping out from his mother's pussy between our cocks. I was too excited to think about what he'd said - I pushed my shaft in as far as I could as Dominic began thrusting again. I felt a surge of pleasure as my muscles started pumping and I saw my ass hole rhythmically contracting on the screen. \n\n\"OHH ... I'M CUMMING TO!\" I groaned.\n\n\"Clever boys!\" Mrs Lam moaned. \"Good timing ... AHH ... my orgasm's just starting as well! OH YES!\"\n\nWe both pushed our cocks in to stay inside as her hips started thrusting. She began crying out.\n\n\"OHH ... Two hot young Studs! ... SO Wonderful!\"\n\nI felt our cocks being squeezed in time with her spurts of piss spraying out around Dominic's balls onto my legs. \n\n\"That was very satisfying,\" she moaned.\n\nMrs Lam moved forward off our cocks - Dominic's was still hard but mine was getting a bit softer. He started sucking her nipples as she smiled at me in the mirror.\n\n\"Don't worry about babies,\" she said. \"Jang Li and I both use the pill ... Would you like to clean my vagina?\"\n\nI felt myself becoming excited again - as I moved back and knelt down I saw our sperm dripping down from her pussy onto Dominic's cock head. I rolled back his foreskin and began licking both of them - switching between him and his mother.\n\nDominic raised his knees and moved his legs apart as Sabrina lay down and got her head underneath my body from one side. She started sucking my cock as I pushed my tongue into Mrs Lam's pussy. Her clit was still poking out and our creamy white cum was seeping out of her pussy hole. I loved the male scent of our semen mixed with the lovely smell of piss. \n\nI felt Sabrina's hand squeeze my balls then pressing inside my crack. As she pushed her fingers into my ass hole I moaned and felt my piss squirt into her mouth.\n\nSabrina moved out from underneath me and went over to get us more drinks. We clambered off the bed and Sabrina started using her free hand on her mother's pussy. \n\nI glanced over at the bed noticing the big wet patches on the white sheet - Dominic smiled at me. \n\n\"There's a waterproof cover underneath,\" he said.\n\nMrs Lam stroked her son's hard cock. \n\n\"Do you like my boy Chi's penis?\"\n\nHe grunted as a short jet of piss spurted out from his cock onto his mother's body. \n\nI reached over and fondled his balls. \n\n\"I love it,\" I replied. \"I also like your ... um er -\"\n\nShe smiled. \n\n\"You mean vagina?\" \n\nI touched Mrs Lam's clit as Sabrina's fingers moved in and out below it.\n\n\"Also I love this,\" I said.\n\n\"My mom's got a very sexy clitty!\" Dominic said.\n\nShe stroked his cock and smiled.\n\n\"It can be a bit embarrassing if I get excited in swimwear!\"\n\nAs we stood drinking - I was surprised that mine and Dominic's cocks were still hard - I reached out and started wanking him. Sabrina put her foot on the bed and fingered her pussy. \n\n\"You weren't cross about the trick mum played on you?\" She giggled, \"You should have seen the look on your face!\"\n\n\"It was very good timing!\" I said.\n\n\"Well we have got more than one TV,\" Mrs Lam replied. \"Plus we needed time to clean ourselves as well.\"\n\nI realized how she'd known I was circumcised - I smiled. \n\n\"So you were watching us before?\"\n\nMrs Lam began wanking my cock.\n\n\"It was very sexy.\" She replied. \"Chi and Jiang Li thought that seeing them copulating would make you excited!\"\n\nI grinned.\n\n\"It did ... I almost came on them!\"\n\nSabrina giggled.\n\n\"I bet this is more fun than you ever had with Amy?\"\n\n\"I wanted to catch you playing,\" Dominic said. \"But guessed I better not leave it too long!\"\n\n\"Did Amy tell you much about what happened?\" I asked Sabrina.\n\n\"We heard she caught you in the bathroom doing disgusting homosexual things and urinating in vile soiled underwear - so we immediately thought you'd be fun to play with!\" She said.\n\nThey all grinned. Dominic handed us all another bottle each.\n\n\"Plus all of us fancied you from the first time you came here for dinner with Amy!\"\n\n\"I did try to find out from Amy what you looked like naked,\" Sabrina said. \"But it's not the sort of girl talk she likes.\" \n\nWe finished our drinks - Dominic collected our empty bottles then spread more lube on his shaft. He positioned the camera on the floor pointing up and then stood behind me. I felt his cock pressing against my ass ring - realizing what he wanted I put one leg on the bed. \n\n\"How do you usually like to masturbate?\" Mrs Lam asked me.\n\nI relaxed - grunting as I squirted her with piss while Dominic pushed his shaft into my body. I moaned as I answered.\n\n\"I often do it in my jock strap and fuck myself with my dildo.\"\n\nI was incredibly excited by the amazingly taboo things we were doing but it felt rather surreal chatting with Mrs Lam while pee spurted out of my cock onto her body and her son fucked me. Sabrina glanced up at the close up of our balls and Dominic's shaft pumping my ass on the screen and grinned. \n\n\"My brother really loves fucking!\"\n\nMy next jet of pee splashed Sabrina as I turned more towards her and groaned.\n\n\"I love being fucked ... I love how it makes me piss!\"\n\nSabrina spread my pee on her breasts and giggled.\n\n\"How far had you got when Amy caught you?\"\n\nDominic fucked me harder and reached around to wank my cock as I replied.\n\n\"I was fucking myself hard - I'd already pissed my jock strap when Amy burst in.\" \n\n\"I guess she wasn't too impressed?\" Sabrina said.\n\n\"The worst bit ... I was leaning forward peeing in my mouth,\" I moaned. \"I straightened up, couldn't stop pissing ... sprayed Amy as well!\"\n\nDominic stopped thrusting and groaned. \n\n\"AHH ... I know the feeling ... I'm going to fill your bum hole with pee!\"\n\nI moaned as I felt the tickling sensation of his piss streaming out inside me - Sabrina smiled at me.\n\n\"Do you like the feeling?\" She asked,\n\nDominic wanked my cock faster as I groaned.\n\n\"OH Yea ... awesome!\"\n\n\"I love it to!\" She replied. \"Do you think you could do it for me once my brother's finished using you as his toilet?\"\n\nI grinned. \n\n\"I could try!\"\n\nDominic grunted.\n\n\"That's all I can manage at the moment - see how long you can hold it in!\" He said.\n\nHe withdrew his cock slowly from my body. Sabrina came over to me and spread lube on my cock then in her own ass crack. She lay down on the bed - lifting her legs up and holding her ankles. A small trickle of pee leaked out of her pussy as she groaned. \"Hurry up!\"\n\nI quickly went to kneel up with my thighs against her ass cheeks. Holding my cock head down I began to push - I could feel that her ass ring was clenched tight and pressed harder. \n\n\"OH yes!\" She gasped.\n\nMy shaft suddenly slid inside her as a fountain of piss sprayed up into the air from her pussy. I pushed my cock in deeper and leaned forward - loving the feeling as her hot stream splashed onto my tummy. I began thrusting then moved my legs further apart to lie down on top of her. She was moaning as I felt her pee spraying my groin and running down to soak my balls.\n\nWe started kissing - I felt the growing ache in my cock and bladder as I pumped her ass hole. Dominic came over and stood by the edge of the bed above his sisters head. I raised myself up on my arms and took his cock in my mouth as my hips carried on thrusting. \n\n\"How about I fuck my sister's cunt at the same time?\" Dominic said.\n\nI stopped sucking him and nodded - as he lay down beside Sabrina I withdrew my cock from her ass and kneeled up. She got on top of her brother with her back to me and guided his cock into her pussy. I raised one knee holding my cock and sliding it easily back into her ass hole. As Dominic and I began thrusting I could feel my ass muscles tighten and the tension in my body - We all looked at the screen. Mrs Lam had the camera pointing at my ass and our shafts sliding in and out of Sabrina. \n\nI noticed Dominic's ass and legs splashing in a pool of piss with the rhythm of his body. My bladder was busting but it also felt like I was going to cum. Dominic carried on pumping her pussy as I shoved my cock deeper into Sabrina's ass and held still.\n\nI began straining to pee - I groaned pushing harder. All at once I felt my ass ring open together with the intense sensation of piss surging out of my cock inside Sabrina. Dominic's pee squirted back out of my ass in a powerful thin jet as I carried on pushing. Sabrina and I moaned as I pissed full stream inside her. I heard Dominic say.\n\n\"WOW I bet that feels so good!\"\n\nMy flow stopped - I pushed harder - more piss spurted from my ass. I eased my cock out of Sabrina's body and stood up beside the bed. Sabrina climbed off her brother getting onto all fours - as he knelt up behind his sister I saw puddles of piss around their knees. I admired again the effortless way he slid his cock straight back into her pussy without using his hand as he mounted her. \n\nI moved round to stand in front of Sabrina and she began sucking my cock as her brother fucked her pussy. Mrs Lam put down the camera and opened a drawer getting out what looked like two latex jock straps but with plastic attachments. \n\n\"I don't suppose Amy is the sort of girl that owns a strap-on?\" She asked me.\n\nI grunted in pleasure as I pushed out a small spurt of piss in Sabrina's mouth and smiled. \n\n\"No ... does it feel good?\" \n\n\"They are rather fun!\" She said.\n\nShe put the pink coloured one down and showed me the black one. It was like a jock strap with one fairly short thick dildo attached pointing inwards and a longer replica latex cock at the front further up. \n\n\"The dildo inside goes into my vagina,\" she said. Pointing to some small knobs just above this, \"and this is for my clitoris and vibrates.\" \n\nShe rotated a ring around the base of the outside cock so the similar knobs on this were below it and grinned. ",
        "\"This is more for other girls!\"\n\nI watched as She squatted down and slid the inside dildo into her pussy - noticing that her ass hole wasn't covered as she fastened the straps. She turned a dial on a small pack on the waist band and a humming sound started - she smiled at me. \n\n\"Mmm - that's good!\"\n\nStill pumping his sister - Dominic leaned forward and kissed me then said. \n\n\"Come and fuck my bum while my mum fucks yours!\"\n\nHe and Sabrina moved back a bit as his mother put some lube in his ass crack. I moved round to the other side of the bed and knelt down behind him. Feeling Mrs Lam working lube into my ass as I held my cock down against Dominic's hole. He groaned as I pushed my shaft deep inside him - I didn't need to move as he started thrusting again.\n\nMrs Lam stood behind me - I loved the familiar feeling of a dildo entering my body and could feel it vibrating as she eased it inside me. She fucked me gently and fondled my nipples while my cock slid rapidly in and out of Dominic as he rutted with his sister. Sabrina began moaning then gasped as in the mirror I saw my piss from before blasting back out of her ass and spraying up her brother's body.\n\nDominic leaned forward and began thrusting wildly - I pushed further in to stay inside as he moaned. I was loving the growing pleasure from my cock when suddenly Dominic pulled out of Sabrina. Instinctively I started thrusting - Dominic began groaning. I felt his body squeeze my shaft as in the mirror I saw his first squirt of cum shooting up into the air. \n\nHe quickly bent his cock down - I felt his ass ring pulsing around my shaft while he pushed his cock into his sister's ass as he pumped out the rest of his cum load. After a while Dominic withdrew from her and Mrs Lam pulled her strap-on out of me. He eased forward off my cock.\n\n\"What about me!\" Sabrina said.\n\nMrs Lam laughed.\n\n\"I'll look after you.\"\n\nDominic and I moved to one side as Mrs Lam knelt behind Sabrina - moving the clit stimulator further down her strap on dildo. Sabrina groaned as it entered her pussy - the humming grew louder as Mrs Lam adjusted the speed. Not thrusting in and out she leaned forward over her daughter and they both started softly moaning. Dominic picked up the camera - I thought of going round so that Sabrina could suck my cock again - then I noticed her mother's bum hole above the bottom of her harness.\n\nI spread more lube on my cock and was slightly surprised how natural it felt as I squatted above Mrs Lam's rear and pushed my shaft into her ass hole. My legs were a bit uncomfortable and I rested some of my weight on her. As I gently fucked her bum my cock felt the slight vibrations from the dildo inside her pussy. \n\nDominic zoomed in with the camera - on the screen my ass was spread wide and my balls rhythmically squashing against the rear of the strap-on latex covering Mrs Lam's pussy. She glanced at the TV then smiled at me in the mirror.\n\n\"You really have got very sexy testicles and a cute anus!\"\n\nShe groaned then I felt the hot wetness on my balls as her piss began flowing out above the bottom edge of her harness. As her pee streamed out around my balls and down between her legs Mrs Lam moaned. \n\n\"MMM that feels good!\"\n\nSabrina was groaning and her hips moving.\n\n\"My mum loves peeing her pants!\" She said.\n\nAs I pumped her a bit faster Mrs Lam asked.\n\n\"Do you think we're rather depraved and kinky?\"\n\nIt was amazingly hot - though holding a conversation with someone while I fucked their ass hole and they pissed themselves still seemed strange. My legs were aching - staying inside her I changed to kneeling behind her. I fucked her harder.\n\n\"You're the most amazing people I've ever met!\" I replied. \"This is way more awesome than anything I ever dreamed of!\"\n\nSabrina groaned as her mother kneeled more upright and began thrusting inside her. Her body began jerking as she smiled at me in the mirror and moaned. \n\n\"AHH you're really ... OHH Sexy ... as well ... AHH YES! ... MMM that's good\".\n\nAs Sabrina's orgasm finished I noticed more pee dribbling down between her legs. I carried on fucking Mrs Lam's ass though my legs were beginning to feel a bit tired.\n\n\"Have you always liked pee games?\" I asked.\n\nI felt her body squeeze my cock as Mrs Lam laughed. \n\n\"I can't help urinating when I have an orgasm ... The doctor said it's either inherited or might be because of having twins.\"\n\nSabrina moved forward off her mother's strap on and giggled.\n\n\"Turns out it must be in the family ... it's much the same for me\"\n\nSabrina got up of the bed and Mrs Lam leaned forward as I carried on fucking her ass. Dominic lay down beside his mother as Sabrina put on the pink strap-on. \n\n\"I just love piss anyway!\" Dominic said.\n\nHe raised his legs as his sister got on top of him - she pushed her strap-on dildo into his ass. \n\n\"Do you ever worry about ... um ... \"I asked.\n\nSabrina began fucking her brother - smiling at me in the mirror. \n\n\"You mean about people finding out the games we love?\" she said.\n\nI pumped Mrs Lam a bit faster as she answered. \n\n\"Well I suppose it is a bit taboo .. but there's no law against it for consenting adults!\"\n\nDominic groaned.\n\n\"At least not here or China - Hong Kong still has an old British law against it. Do you want to suck each other?\" He asked me.\n\nAs Sabrina got off Dominic I pulled my cock out of their mother's ass. Dominic moved so his ass was at the edge of the bed and I knelt over him sixty nine. As he and I began sucking and wanking each other's cocks Mrs Lam pulled a small footstool out from under the bed and knelt on it. While I watched her strap-on dildo slide into her son's ass I felt Sabrina's fingers spreading lube on my crack.\n\nIt felt good as Sabrina's dildo stretched my ass ring - I was surprised that I still had some pee left as I my piss squirted into her brother's mouth. Her dildo was vibrating quite fast inside me.\n\n\"Tell me when I'm on the right spot,\" Sabrina said.\n\nI gave a muffled moan of pleasure as she massaged inside me. Dominic and I were both groaning as we sucked and wanked each other fast. The tension in my body mounted - I only realized that Dominic was cumming when I tasted it. I kept his cock in my mouth as it became softer - he carried on wanking me hard and soon I felt myself pumping my load into his mouth. Sabrina and her mother withdrew their dildos from me and Dominic then removed their strap-ons. \n\nWe all sat on the bed in a circle with our legs crossed. Dominic and I both had soft cocks - I noticed that his now looked much bigger than mine.\n\n\"Are you still horny?\" I asked him.\n\nSabrina giggled and stroked my cock. \n\n\"My brother's a Shower ... while you must be a Grower!\" \n\nI felt myself blushing.\n\n\"Your penis is very cute with or without an erection.\" Mrs Lam said. \"I hope you had a really good time?'\n\nI noticed her start wetting the bed and a small pool forming under her pussy. I was surprised to feel my own need to pee returning. I relaxed and began pissing at the same time feeling my cock begin to swell. \n\n\"It's the best time I've ever had in my life!\" I answered.\n\nMy cock was now pointing up and my stream was splashing Mrs Lam's legs. She smiled at me and lay back on the bed opening her legs wide.\n\n\"You're a very sexy boy!\"\n\nI got on top of her and this time managed to get my cock inside her pussy without using my hand. I loved the sensation of my balls in the pool of pee between her legs. Dominic stroked my ass cheeks as I fucked his mother,\n\n\"You'll come to our beach house with us tomorrow?\" He said.\n\n\"Yes please! I'd love to!\" I replied.\n\nHe playfully slapped my ass.\n\n\"Then I guess we'd all better get some sleep ... it's my turn to tidy up!\" He said.\n\nAs I got up I realized that I really was tired now. While Dominic went to get the mop the girls led me through to another big bedroom with two double beds placed together. There was a faint smell of pee and no top sheets on the beds. \n\n\"We don't usually bother with a shower afterwards,\" Sabrina said.\n\nI flopped down exhausted on the nearest bed. The last thing I remember before I feel asleep was Mrs Lam kissing me goodnight saying: \"Try not to wet the bed! - So we can set-off early and miss the traffic.\""
    ],
    "authorname": "ASIANDREAM",
    "tags": [
        "golden shower",
        "pissing",
        "incest",
        "water sports",
        "group sex",
        "foursome",
        "asian",
        "peeing",
        "bisexual",
        "urine"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/wet-relations"
}
{
    "title": "Midsummer Weekend Pt. 03",
    "pages": [
        "Edited by Gustavca\n\n*****\n\nThe entire weekend so far had been one of a constantly deepening sense of unreality. Each year for seven years now, our group of friends meet in this wonderful wooden lodge in the middle of the northern forests for the Midsummer weekend. The first one happened almost by accident, with the then-boyfriend of Kate explaining that the ancient Celts celebrated this day with quite a few sexual games and rituals. The weekend had turned quite sensual, a lot more than our regularly prudish group had ever enjoyed. The year later, despite the fact we hadn't talked about it in the intervening months, we had consecrated the new tradition by allowing ourselves another such sensual couple of days. Nothing too obviously sexual and no cheating whatsoever, but always very close, on the limits of the unacceptable. \n\nThis year, though, something else was clearly afoot. Nella, my wife, thought it was because this Saturday was the actual Midsummer date, and that the moon would be full much later tonight. I wasn't quite ready to accept such an explanation but, for the first time in my life, I wasn't ready to ridicule it into the ground either. As Nella and I were walking down the stairs, my sense of unreality was as deep as it had ever been. I felt like I was in a trance. Not only because I'd been in the very sexy company of four other gorgeous women, not only because one of them had kissed and gently bitten my neck and not even only because another one had allowed me to see her naked during an outdoor shower. \n\nAs if these unexpected events/happenings were not enough, I had just spent the strangest 45 minutes of my life with Nella. The sex we were just coming down from, in our private room, had somehow included two of our friends. In our minds at least, then, unbelievably, out loud. Nella really did say that she had thought of Lincoln as she was sucking my cock and I really did reveal that I had thought of Hope as she did. Then two surrealist rounds of role-play had taken place as she rode me, pretending to be Hope and I fucked her, pretending to be Lincoln. \n\nThat in itself would have been strange enough. We'd never done such role-playing before, and I never would have imagined that Nella would want to pretend to be a woman we knew, a friend that was right here in the lodge. But what we talked about afterwards, and agreed on, could only be described as aberrant. For reasons that were still mysterious to me, we had both agreed that if anything sexual were to happen with other people this weekend, we had special permission to go for it. And to not keep it a secret. That was unbelievable on so many levels that I truly felt like I was walking through a haze of fantasy, that I had entered a place of myth and legend. \n\nDownstairs, we found Kate, Marcus and Hope in the living room. All three were unable to sleep despite the fact they knew they'd need all the rest they could get later tonight. Kate and Marcus were lazily wrapped in each other's arms on the leather sofa, highlighting the fact that Kate was pretty short. Marcus wasn't nearly as big as Connor or Lincoln but, next to his girlfriend, he looked huge. Kate had not only always been short but she had always looked young. She happened to be the youngest of the group but she looked even younger. As the years went by she began to enjoy that reality more and more but we all remembered how frustrated she had been about it years ago. \n\nThe smile she gave us as we came down, bright and compelling, made her look even younger still! Her small and delicate face, the deep blue eyes above her perfect teeth, and her blonde hair tied back into a high ponytail had always made her remarkably beautiful. Her body was quite remarkable as well, if you were into small and delicate women. She was very thin, with hints of sweet hips when she was sitting or bending over, and breasts that may have been slightly bigger than Rinette's, but not by much. \n\nShe was also, ironically in this company of other strikingly gorgeous women, the one least shy about her body. She looked like an unripened teenager when Hope, Eleanor or Nella were around but she didn't let that bother her at all. She and Marcus had arrived late, only this morning actually, and Kate was really pissed by missing out on a Midsummer Friday. But it had been clear throughout the day that she was going to make up for lost time. She had been very lightly dressed all day long and now she was wearing a blue bikini bottom, which was later revealed to be a thong, and a very sheer top of some sort. It was nothing more than a transparent veil that floated gently on her body. I had seen similar things in very old Playboy photographs. \n\nAt any other moment or place in the world I would have been shocked by her decision to wear it in public. Now, I simply smiled and enjoyed the show. I'm a man who enjoys curves on women: large breasts, soft bellies, flaring hips, round buttocks, authentic thighs... But as Kate was just about naked right now, probably in preparation for the masquerade later on, I couldn't deny the pleasure I felt looking at her. Small but flawless breasts, well defined waist with no folds despite her twisted position, very nice legs ands thighs that seemed to surge from her narrow hips and flow all over her boyfriend's legs. The bright red of her toenails completed the effect. For the very first time I realized that it wouldn't take much for Kate to disguise herself as one of my students... which led to fantasies I wasn't ready to face just right now!\n\n\"Oh, poor thing!\" Nella said to Hope, who was sitting across from Kate and Marcus. \"You look so alone on that huge sofa. Here, let us keep you company while your husband sleeps upstairs, rather noisily!\" We all laughed as Nella sat down beside Hope since Connor was indeed snoring upstairs. \n\nLooking at me, Nella then added: \"Come here, Will, sit down with us.\" Looking at her, knowing what she was doing, I shook my head and joined them. Since Nella had sat so close to Hope, I did the same, feeling Hope's body against mine. \n\nAs I placed my arm behind her head and my hand across to Nella, Hope looked at each of us in turn, then said, \"You two are just fresh from fucking, aren't you?\" Once more we all laughed, and our expressions seemed to be the confirmation the three others needed. \n\nThere was this unspoken rule for the Midsummer weekends that we only had sex during the night, to keep the days as sexually charged as possible. We laughed with them, the more so since they hadn't the slightest idea just how different our sex had been. Kate got up and came back a few minutes later with five shots of whisky. Some of us remarked that we were starting earlier than usual, but Kate brushed it off, \"I already missed last night, so I want to make up for lost time!\" \n\n\"Oh, and you missed quite show last night!\" replied Hope. \"Some of us saw things that we rarely get to see...\" As the other laughed, I knew Hope was teasing me again. She had seen Nella and me in the forest having sex so very close to our friends in the jacuzzi. Indeed, a few seconds later Hope turned towards me and gave me a naughty smile. \"It was a sight to remember!\" she finally added. \n\nThe whisky was remarkable, as always, since Rinette's parents, the owners of this luxurious lodge, knew their alcohol. As the night progressed I began lazily to play in and with Nella's hair. Hope was still tightly nestled between us, and making the best of it. Her hands were on our thighs, and sometimes she would squeeze mine. Her smell, a scent that changed through the years but was always dominated by cinnamon, was intoxicating right now. I wanted to turn to her and bury my face into her neck and hair. I was also, unmistakably, getting an erection. I was more than old enough to know that it would mess up what little rationality I had left. \n\nRight now, though, I didn't care at all. I was starting to sip on my third glass of whisky, and the familiar warmth spreading inside me. It took me a while to understand why Hope seemed to like her whisky so much. It was good, but does it explain the fact that every so often she would let out a soft, low moan of pleasure? When I realized that she sometimes did so even without drinking, I turned and looked at her. Very close, I could see the way the light was captured and released in her fiery red hair, highlighted by the colored feathers she always tied in it for Midsummer. I also got another blast of her perfume, as if Hope's wildness was manifesting itself through her scent. \n\nI also realized to my honest surprise, that I was not caressing Nella's hair anymore, but Hope's. That was why she'd been softly moaning. I froze and stopped, but immediately Hope turned to me and said, \"Hey! Don't stop!\" \n\nFrom across, Nella's head peaked and said, \"He's good with those fingers, isn't he?\" \n\n\"Oh...\" cooed Hope as I resumed, \"I had no idea.\" Bolder, I pushed my whole hand into her hair and began massaging her head. \"Oh, dear gods...\" she said, her eyes closed, squeezing my thigh with her hand. When Nella's hand joined mine, Hope moaned aloud again. \"Damn... You guys are going to make me cum right here if you keep this up!\" \n\nWe laughed softly, then Kate said, \"She's not even kidding! Look at her nipples!\" Through her bra and tank top, her nipples were very clearly obvious, erect and proud, and, most of all, clearly aroused. \n\nWith her eyes still closed, Hope said, \"Go ahead, take a good look and enjoy the view... As long as these two keep doing what they do, the world could end and I wouldn't really care.\" \n\nWe were all, unwittingly, being drawn into this unique Midsummer magic. A bit later, when Marcus suggested a game of Twister until the masquerade we quickly agreed and Hope said, \"Ya, let's play twister and let Will put his hand on my breast again!\" Laughing, I didn't even bother replying. Hope had been teasing me about this for years. \"But I must concede,\" she continued, \"that with the head massage you just gave me, you don't need the Twister excuse to cop a feel if you want to...\" She had said it lightly and was still laughing about it with the others when I turned slightly on the sofa and actually caressed her breast. As surprised as everybody else, Hope laughed harder and said, \"Oh, you dirty man! With your wife right here as well!\" \n\nEverybody, including Nella, was now laughing very loudly, but Hope hadn't pushed my hand away. She had placed hers on mine as soon as I touched her breast, in reflex probably, but she never pulled it away. After long, very delicious seconds, I kissed her cheek in thank you, and reluctantly pulled my hand back. \n\nThen Nella asked: \"Hey! I gave you a massage too, can I cop a feel as well?\" \n\n\"What?\" asked Hope, clearly surprised! \"What's gotten into you two?\" Despite her words, we were all still laughing and Hope, trapped between Nella and me, seemed completely at ease, didn't look like she wanted to go anywhere. \n\nFrom upstairs we heard Lincoln say: \"Hey, you guys! We were trying to sleep here!\" \n\n\"Well, it's almost midnight,\" replied Kate. \"We were just getting ready for you to start the fire!\" Soon all the sleepy heads were coming down and joined us in the living room, helping themselves to whisky. \n\nA few tense minutes later, as we all knew what was coming and were very excited, Lincoln came back inside and declared that the fire was ready to be lit. After a short silence, the women came to kiss their lovers and we all parted for the preparations. While the women went outside, all the men went upstairs to gear up. Every year we disguised ourselves as ancient Celtic warriors, openly getting our inspiration from the old movie Braveheart. It didn't take all that long, especially for guys with short hair. A leather loincloth, a few straps of leather around the biceps and above the calves, some in the hair, if possible, and some sort of blue war paint all over our bodies. \n\nAt some point during this Halloween-like process, Connor asked the question everybody had on their mind, \"What the hell is going on this year guys?\" \n\n\"No idea, but something's up,\" replied Marcus. \n\n\"Think it's the actual Midsummer day and the full moon?\" I asked. \n\nWe all laughed but not all that loudly. I don't think any of us were really into this superstitious thing, yet something was going on. We didn't have an answer, and nobody suggested we should just let everybody fuck each other's wife! Yet while we knew what to expect about the upcoming masquerade, it was clear that this year we were better off not expecting anything at all. In any case, we were ready for anything as barbarians from another era. Scared of five women wearing little masks? Ha! From outside we suddenly heard Rinette say, \"Ready, guys?\" \n\n\"Yep!\" came Lincoln's quick rely. \n\n\"Ok then. Give us five minutes, then come and light the fire.\"\n\nFive minutes later, even more tense than usual as this wasn't how things usually happened, we took our courage and went outside. Still not quite adjusted to the darkness and, despite the full moon, we couldn't see much. Lincoln found the fire and threw a match into the large pile of wood. The gas he'd poured onto it earlier ignited in a flash and the entire night was transformed. \n\nEven if our eyes had had enough time to adjust, allowing us to see the five women in a larger circle around us and the fire, we wouldn't have been prepared. The music we saw coming as every year Rinette brings a remote with her and starts the traditional tune as the fire is lit. 'Midsummer's Night' by Dervish, of course. Yet even if we had seen the backlit silhouettes of our lovers all around us, we would only have thought they were scantily dressed as usual. They were not. They were not dressed at all. When the fire exploded into life, so did the five women, gloriously naked and coming alive to the music. They all had their masks and usual red paint but nothing else. The five barbarians froze for a few seconds, not sure how to react, not sure if to believe this was actually real. \n\nIn the end our instincts, the fire, the music and the arousal took over our conscious brains and we joined them. Soon the loincloths disappeared and we were all naked with them. At first, since they were dancing and running around the fire, we couldn't make out who was who. Yet even with the masks, some were easier than others. Nella was clearly the mother goddess with her generous curves and powerful presence. Strangely enough Rinette and Kate weren't all that easy to distinguish in this context. But soon enough, our loincloths discarded, we managed to find our respective lovers and dance with them, moving around the fire in a big circle. Hands flew all over the place, from breasts to waists to hips to asses and thighs and I even dared to get my fingers wet. This was completely crazy, being this excited, this sexual, this erect with all our friends around us!\n\nAs the tune in the long Midsummer set changed, the women surprised us again. Most of us had barely managed to accept this crazy naked masquerade when, at the change of the tune, each women suddenly stopped running around the fire, letting us move to the one that had been in front before we could stop. All of a sudden we were caught up and dancing with another woman as the turning resumed. Still overwhelmed, all of the men quickly realized that this new partner wasn't shy about holding us close or touching our bodies. It was completely surreal, as if we'd all been drugged. \n\nI realized I was dancing with Rinette, and remembered the kiss and bite she had given me earlier. My hands on her hips were so close to the ass I had briefly touched earlier but some last shred of conscious thought prevented me from siding it down. I pulled her against me, made her twist and turn with the music, and felt her hands all over me. Her long black hair was whisking left and right, wrapping itself around my shoulders, her eyes locked onto mine at all time. \n\nAlong the fire's heat, I could feel her strength and her passion radiating from her, further wrapping me in herself. Finding the mere inkling of control coming back, I looked down and enjoyed the sight of her lean and tight body, her small breasts jutting proudly above her smooth abs. Her dark patch of hair below only reminded me that her perfect ass was just inches away from my hands once again. I hesitated a fraction of a second too long. Just as the tune changed again, she leaned closer to me, her breasts touching my chest, and whispered, \"Just missed your chance!\" She laughed as she stopped, moving towards the guy behind me. \n\nAnother thin women suddenly appeared in my arms: Kate. She was laughing and dancing very close to me. Leaning closer she said, \"Hey, teacher, ever fantasized about dancing like this with one of your students? Do I look young enough?\" I laughed with her, but didn't want to miss my chance twice in a row. I pulled her close to me, pressing her body against mine a few seconds and trapping my cock between our bellies, until I reached down to get a really good feel of her ass. She laughed, jumped away to dance once again and said, \"Oooh, a naughty teacher, yes? What would I need to do to have an A?\" \n\n\"You have no idea, dear student!\" \n\n\"Really?\" she said, an impish look in her eyes. \"I'm guessing that my imagination is naughtier than yours... What if I were to stop, turn around and bend down?\" \n\nI laughed, then growled as I threw her away, then pulled her back to me. Her back to me. This time my cock was pressed against the small of her back as my hand slipped from her hips to her pussy. It never made it. As we began moving again to the music, she turned around, looking at me. She was still smiling but her eyes told me that even though this had been a teasing game she was more turned on than she had thought. Before we could continue, the tune changed again. \n\nEleanor's softness was suddenly all over me. We were hugging very closely all the while trying to keep moving around the fire. Her flesh against my cock was delicious, so were her breasts against my chest. But this morning's peculiar contact was stronger than these impulses. We didn't talk and, even though our hands did seize some of the chances offered to us, the long kiss we shared defined this short moment for us. As our tongues finally met, a deeper wave of pleasure and release of tension took us both. I don't know how long the kiss would have lasted, but the music changed again. \n\nAnd I was embraced in fire. Hope was positively glowing and burning in my arms. Her wonderful, overflowing breasts were all over my skin until I grabbed them both with my hands to squeeze them hard. Pushing my hands away she spun and moved behind me, pressing those breasts against my back and squeezing my ass at the same time. In her laugh, as she was moving back in front of me, I heard raw lust, and it was clear that she was very close to jumping me right there and then. \n\nThat's just about what she did next, jumping up in my arms, wrapping her arms around my neck and her legs around my waist as I grabbed her ass to support her. Her pussy was quite obviously pressed directly against the underside of my cock. All I would have had to do was pull her upwards a few inches. No time, and I had to keep moving. Before jumping back down, she did whisper, \"We're going to fuck before this weekend is done, lover!\"\n\nWhen she moved on I found myself face to face with Nella, and she was just as bewildered about all of this as I was. Since I had no idea what the others had done with her, I guess she hadn't seen anything else than the guy in front of her either. My goddess was in the same trance as everybody else and she suddenly threw her mask down, pulling mine immediately after. We had stopped dancing and turning and were now simply kissing madly next to the fire. Soon everybody else was doing the same, as incapable as we were to resist this sexual pull. ",
        "We began moving away from the fire. The pull was now inexorable and no game was going to keep us away from our lover's touch. Nella broke the kiss and lay down on her back, opening her legs. I slipped inside her as soon as I dropped down hearing her scream of pleasure splitting the night. When I heard similar moans from the others, I realized we were all very, very close. Looking around quickly, I could see them all fucking openly on the grass around the fire. \n\nAll in red, orange and white moonlight, we were all clearly lit with nothing veiled or hidden. I could see everybody was also able to look around and were doing just that. Eleanor, Marcus, Kate and Hope were positioned just right, and our eyes darted from each other to our own lovers. It was completely dreamlike. Time lost meaning as my entire being was torn between the sheer pleasure of Nella's pussy and the unbelievable lust that was shared between us all. The night so quickly turned from something profoundly erotic, to a dancing thrill beyond our fantasies, then a shared moment of open lust flashing all over the space around the fire. \n\nAcross the fire, I saw Rinette standing up and getting close to Lincoln, then climbing up on him, to finally wrap herself around him as he positioned her above his cock. From my angle I could see his cock, see it moving around and pushing up until it suddenly vanished into her. They both began moaning, and the sight of those two sculpted bodies making love near the fire, standing amongst friends was mesmerizing. His big arms carried her light weight easily, and they soon found a rhythm we could hear as taut flesh slapped against taut flesh. \n\nThen my eyes were naturally drawn to Hope, who was riding Connor, facing me. Her long curly red hair, pure fire in the light of the bonfire, was covering half her face and the top of her breasts. With her face veiled like this, fucking her man for all she was worth, she looked like a nymph or a banshee from old Irish myths. But she was very real, very close to me. And staring, of course, straight into my eyes. This woman really wanted me, despite the fact I was fucking my wife, despite the fact she was riding her own husband right in front of me... \n\nHer breasts were just magnificent in this light, in any light whatsoever. Maybe only slightly smaller than Nella's, yet they seemed completely different. Nella's were fuller, rounder over her wider body compared to Hope's explosion of flesh over a smaller frame. While Nella's seemed to be growing organically, fluidly melting into her generous silhouette, Hope's breasts looked like they were overflowing mounds of flesh too big for her. For a long while I was sure that she had implants, and it took a while even for Nella to confirm that she in fact had not. They were just marvelous. \n\nI was mesmerized by the show until I felt Nella's legs reach up, wrap around my waist and begin to turn me over. As I kept on rolling Nella followed me, moved her legs around and re-impaled herself on my cock. Looking up at her, with her arms in the air above her, holding her hair as she rode me, my breath was taken away. Who was I to deserve such breasts, and to be given the opportunity to see and feel another pair just as wonderful?\n\nAs Nella rode me, I could see she was looking at Hope. Twisting my head, I saw the redhead was looking right back. It was clearly not rivalry or jealousy. Instead, at any second I expected one of them to get up and start kissing the other. It didn't happen, at least not this night. Nella maintained her intensity, and I was pretty sure the eyes of most of the others were locked on either one of them. \n\nYet just nearby, Kate was bent over in front of Marcus, her legs straight and close together. Very flexible, she was bending forward at her waist but her entire body seemed to be folded in two. Her head very close to her legs, she was nonetheless being pounded by Marcus. He was standing right behind her, knees slightly bent, feet spread wide. Nothing fancy, just raw sex. It was mind-boggling, to see and hear all that, the uninhibited sex we had not even decided to consciously share tonight. \n\nSuddenly all our heads turned to Eleanor's loud cry: \"Oh, you dirty man...\" She was on all fours, Timothy kneeling behind her, and while I couldn't see it, he was obviously holding his cock against her. When we saw him spit on it, we all understood he was going to fuck her ass. Eleanor would have been wet enough for anything else. \"Here? You're crazy enough to do this here?\" Eleanor asked breathlessly, before laughing, an edge of delirium creeping up in her voice. She was bending forward even more until her head rested on the grass. I felt Nella slowing down above me, as captivated by the sight as I was. \n\nEleanor, the shy and delicate creature, was unquestionably used to this and she even seemed to enjoy it. Judging by her words, and the crazy smile on her face, this was not something she did just to please her husband. Her moans, which were getting louder and clearer as we saw Marcus releasing his cock and pushing in slowly, were evidently moans of pleasure. She then began to get up, pushing herself upwards before pulling her torso up until she was kneeling. Her pale skin glowed in the firelight, her beautiful breasts in bright display. As her arms reached up and back to grab Marcus' head, his own hands were moving to her hips. While he was thrusting slower than he had before, he was still pumping in and out of Eleanor's ass with an intensity that astounded me. \n\nSliding her hands across my chest, Nella recaptured my attention and from that point on we were focused on each other. Not that it would last all that long. Even if the weekend hadn't been a sustained sexually-charged assault on our minds, or if we hadn't role-played that sex game earlier, this near-orgy Midsummer fire would have been more than enough to bring our climaxes very, very close. Taking our cue from Kate and Marcus, we didn't try to out-do each other in fancier and fancier positions. Nella simple rode me, not too fast, as we stole a few last looks around us. \n\nMy hands roamed from her thighs to her hips, from there to her belly and waist, up her torso to lose themselves all over her breasts, then reaching up again to her neck and face and hair. As she bent down and buried her face in my neck, I reached down to her ass and even teased her asshole for the very first time. Despite our years of sexual play, we'd never tried this. I felt her smile against my neck and cheek, then her growling, \"Think we could try this later, dear lover?\" In response I squeezed my hand harder. \n\nI think that was enough for Nella; her breathing and rhythm changed, and very soon she was in the throes of a very powerful and very loud orgasm. It hadn't been a race, nor a synchronized thing, but within moments Nella's cries catalyzed the entire group. If we had heard everybody else in the previous years, actually seeing them climax all around the fire was a uniquely powerful aphrodisiac. Not that we needed to be aroused any further, but that thrill managed to bring us over that awkward \"after-the-climaxes\" phase. \n\nIt could have been very awkward indeed, once the hormones were gone, to look at each other around this strange Midsummer fire. It was not, and Eleanor's laugh played a large role. While we were all regaining our breaths and our minds, she began laughing slowly, softly and, somehow, intimately. Her laughter somehow kept us all together in this very public yet intensely private moment. For long moments, we just looked at each other with lazy smiles, like so many cats with cream on their whiskers. The night and fire were warm enough that our sweaty bodies were comfortable, so we lingered there a long time. We began talking, just a few words and laughter shared in the easy silence. I think we all feared that the morning would be more difficult, and that the awkwardness would be back. None of us wanted to move from this place. Yet we did, each to our beds. Little did we know that the last day of our weekend would prove even stranger."
    ],
    "authorname": "MrIllusion",
    "tags": [
        "nella",
        "hope",
        "eleanor",
        "breasts",
        "fire",
        "dancing",
        "public",
        "tease",
        "midsummer",
        "rinette"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/midsummer-weekend-pt-03"
}
{
    "title": "How to Tame a Brat Pt. 03",
    "pages": [
        "<center>Chapter 8</center>\n\n<center>Alice</center>\n\nChristmas at the clubhouse was small. Most people left for the holiday, so only the permanent residents and the kids were around. There were about ten of us around on Christmas morning, and it was really all about the children, so we let them open their gifts and then fall asleep into sugar comas before we all opened our own.\n\nI'd given Sophie a gift card to a local bookstore, since Mark had strictly prohibited her from buying any new books until she'd finished the ones she had. This way, she could buy them without getting in trouble.\n\nI gave Alex a card and a drawing, because Alex was surprisingly sentimental like that. It was just a page from a coloring book that I'd colored and thought really hard about how much I loved her while I colored it, because I knew it would, like, embed the emotion in the crayons or some shit. I don't know. She'd explained it once but I wasn't really listening. Anyway, she teared up a little and it was sweet.\n\nI gave Cat and Reuben the same thing - a brat-free Ticket. Upon redemption, the ticket-holder is entitled to twenty-four hours of me not being a little bitch.\n\nCat laughed so hard she cried, which was a sight to behold because damn was she pretty when she smiled, and she didn't usually let herself relax like that while the kids were around. Reuben wasn't there, so his card got left under the tree for his inevitable return.\n\nAnd of course, my gifts were awesome. I'd confessed to Sophie that most of my toys had been stolen by my old Dom, so she and Mark had collaborated to get me a gift card to an online toy store. Thank fuck because I was pretty sure she knew I was stealing cucumbers from the kitchen late at night.\n\nAlex gave me cash, which was really nice of her considering the fact that I was living here for free. Granted I was working, and she paid me a little bit, but it was nice to have some spending money.\n\nThere was a mystery gift under the tree for me that I suspected was from Scott Murphy. It was a headband with fox ears, and a fox scarf. At the bottom of the bag was a fox-tail butt plug. I hid that part while opening the gift, but put the ears on right away. Gah they would look cute with my leather dress. \n\nAnd Cat? Well. She bought me a really cute leather miniskirt and latex gloves.\n\nAnd because she was an angel, and a mommy-domme without a sub, she orchestrated both my and Sophie's gift from the kids. Pretty boxes covered in stickers and glitter glue and macaroni, filled with pictures and crayons and random pieces of string jewelry and sticker books. My box had glow-in-the-dark stars inside. Sophie's had bubbles. It actually made me so happy that I cried.\n\nCat came up to my room after the excitement had worn down, as if she knew my crash was coming.\n\nThe morning had been lovely, but if I was being honest... I hated Christmas. I hated pretty much everything about it. I hated family get-togethers and most parties, and I hated being bombarded with the memories of what I'd lost, and the ache of the things I'd never have.\n\nA five-year-old cherub with pink cheeks and a button nose and a head of bright red curls danced at the edge of my mind, but I shoved the thought away.\n\nCat seemed to know all of this without prompt, and asked me what I needed. And for the first time in a very, very long time, I told her.\n\n\"I'm going to cry or scream here in a little bit,\" I said. \"Unless you want to tie me up and hit me with that belt you're wearing until I break.\"\n\nSo she did. She gagged me with one of my knee-highs, put me on my knees with my face in the pillows of my bed, and spanked my ass with her belt.\n\nIt was different. It wasn't the same, and it wasn't what I wanted. She didn't hit me hard enough at first, and I think she figured it out after a while. She was too kind to me. She prompted me to breathe, stopping in between the strikes to smooth my skin.\n\nI'd been topped by women before, and it didn't result in the same mental headspace as when a man topped me. She wasn't mean enough. She was too nice, and I knew she was doing it as a favor. But it was enough to get my emotions all going one direction, and give me something concrete to feel, something I could trust. Eventually, I got there, letting my thoughts fall away from me until I found quiet, floating peace.\n\nShe untied me, rubbed some lotion into my bruised ass, and held me against her chest until I fell into a dreamless sleep.\n\n***\n\nAfter Christmas, Sophie and Mark left for a vacation for a few days, which set me off into a spiral of thinking that everybody hated me for no apparent reason. Cat spent most of her time trying to distract herself from her sadness by keeping the children entertained. Alex and Jake were off in their \"secret\" cabin in the woods that everybody knew about. There were a few others around, but nobody who I really considered a friend. So after a few days, when the short-lived satisfaction from my session with Cat had faded, I got depressed, then bored, and a little angry.\n\nYour friends aren't neglecting you. They don't hate you. They just have their own lives. \n\nBut knowing something and feeling it were two different things.\n\nI spent time in my room coloring, reading books, and watching YouTube. Inevitably, my tastes in music and videos led me to kinky shit, and I listened to old episodes of the Leather and Lace podcast, and even read one of Reuben Weston's books.\n\nPain and Pleasure, his most popular book, was about the best ways to use sadomasochism to enhance impact and sensory scenes. The level of detail was exhausting, and I skipped whole chapters that included diagrams of muscles and blood vessels and nerves. But the chapters detailing and explaining past scenes he had done with his masochistic playmates? Holy balls, that toy I ordered better get here soon because his writing was doing things to me.\n\nI also ended up watching more of his rope, bondage, and shibari tutorials online. The grace and confidence he exhibited when he played was enthralling, and I got a rare chance to see him in his element. And he looked happy. He smiled, he laughed, his eyes lit up with excitement. He looked like a totally different person. It felt like I was spying on him, or reading his diary, because I'd never seen him so calm, so centered, so incredibly happy. His movements looked like a dance. It almost made me mad, because I hadn't been able to see it myself. And it made me hurt for him a little. I found ways to get my release. How did he find his? Did he ever? I knew sadists; they needed us as much as we needed them.\n\nThen I watched an old interview with him and another popular Dom in his area, Jeffrey Ludlow. It was recorded a few years ago, live from some kind of conference. They talked about their training, their induction into kink, and their relationships. Jeffrey asked Reuben a question that caught my attention.\n\n\"So, I know my answer, but... how do you feel about brats?\"\n\nThe audience at the conference started murmuring. There was some cheering, some laughter, and overall disruption. Reuben looked directly into the camera and gave a very intimidating facial expression, demanding respect and silence. The crowd hushed.\n\n\"Well, I think you and I are both considered old-school. I was trained the old-fashioned way, and was a submissive before I became a Dominant. So my opinions are going to fall on that spectrum.\"\n\nNo wonder he's so boring and quiet and blah when he's in public, I thought.\n\n\"But personally, I don't consider brats to be submissives.\"\n\nOh what now?\n\n\"I think they can be bottoms. And some of them are neither submissives or bottoms. They're just... brats. It's a kink, not a submissive category. There is nothing submissive about purposefully acting up to manipulate your top into giving you what you want, and I have zero tolerance, patience, or respect for it.\"\n\n\"Oh, fuck you too, Reuben,\" I snapped, and closed the window to the interview.\n\nIrrationality was part of my disorder. And right now, I was irrationally mad. My chest was aching a little, because after the Holiday party a few weeks ago, I'd kind of grown a little attached to Reuben Weston. Granted, part of the reason I was so fucked up was because I got attached to people really easily for no bloody reason, but that was just part of who I was. It wasn't going to change. I just had to deal with it.\n\nSadly, the opposite was true as well. Just from that simple statement, knowing he didn't believe I was a submissive and that he had no respect for fellow brat-kind, immediately made me hate his guts. I wanted nothing to do with him, and if I saw him bleeding on the side of the road, I would shit on his face and leave him to rot.\n\nWell okay, practically speaking, I wouldn't. But that's how it felt at the time. And it stayed that way for longer than I cared to admit.\n\n***\n\nJanuary rolled around, and I was getting stir-crazy again. I had shifted to annoying Scott and Brian, since Reuben was on my shit list, and also not around. The Murphys were fun to pick on because they picked back. I guess it was an Irish thing, to insult people you like. The worse the insult, the more they liked you. It was basically my love language. And Brian Murphy was pretty much the most gorgeous specimen on the planet. Unfortunately he had already been claimed by another overemotional brat so he was off limits for falling in love with.\n\nOne night, we were all sitting around the rec room when you-know-who came upstairs, looking delicious in dress pants and a white shirt. I tried not to react or even look his way when he came in, but it was hard since he was like fourteen feet tall and had shoulders like Jake Greenwood's truck.\n\nWe were playing Truth Bomb, which was one of our favorite games. It involved drawing cards, answering the questions, and rolling dice to figure out what happened next.\n\nReuben sat a few seats away from me, and I ignored him with the elegance and grace I'd picked up from living with a defense attorney for almost ten years. It was Maggie Greenwood's turn, and she was studying the three questions on her card, trying to decide which one she was going to answer.\n\n\"Okay,\" she said. \"If you were a dog, which breed would you be? I think I'd be a German shepherd.\"\n\n\"I disagree,\" Alex said. \"I think you'd be a poodle.\"\n\nLisa laughed. \"But your brother is a German shepherd.\"\n\n\"Nah,\" Jake said, putting his arm around Alex's shoulders.\n\n\"Yes,\" Alex said. \"I agree with Lisa.\"\n\n\"I think Jake is a golden retriever,\" Sophie chimed in.\n\n\"No, Scott is a golden retriever.\"\n\n\"Scott is a scotty-dog,\" Cat smirked.\n\nScott blushed and rolled his eyes, and his Irish accent intensified. \"Oy, you think you're bein' so clever with that one, yeah? Like I've never heard it before.\"\n\n\"I agree with Cat,\" I laughed.\n\n\"Oh yea, well you're a chihuahua,\" Scott said back, grinning at me, knowing this was how the game started.\n\nI opened my mouth to retort, but I was rudely interrupted.\n\n\"Alice is not a dog,\" Reuben said. \"She's a fox.\" \n\nI felt my jaw snap shut and I swallowed my retort. I was too busy ignoring Reuben, and realizing that the fox ears and plug I'd gotten for Christmas were probably not from Scott. Scott was a bottom and a puppy, and shy as hell when it came to girls he liked. He'd never give me a butt plug. They were definitely from Reuben.\n\nI was torn between the pleasure and satisfaction that Reuben had given me a present, and angry with the fact that I hated him and wished he would spontaneously combust into smithereens, and then burst into flames.\n\n\"Have we forgotten that it's Maggie's turn?\" Noami redirected the conversation, and I was temporarily saved from the bullshit of dealing with Reuben.\n\nThe game continued until I heard my name being called. David, one of the residents I didn't know very well, had rolled a six, which allowed him to ask any question to anyone in the room as part of his turn.\n\n\"Alice, who was your first boyfriend?\"\n\nOh, the things I could say in response to that. I pursed my lips. \"Uh... pick another question, David. Trust me.\"\n\nHe laughed. \"Okay, who was your last boyfriend?\"\n\nI closed my eyes and took a steadying breath, trying not to throw up. I hadn't thought about him in a while, but the times I had, it hadn't been this violent of a reaction. Maybe it was because I was already frustrated? Maybe because I was tired, and horny, and the last person who had put me into subspace had done it as a favor?\n\nReuben's voice intruded in my silence. \"Move on, David.\"\n\nDavid may or may not have asked me another question, but I wasn't listening anymore. I'd risen and gone to the cart where we kept the bottles of alcohol, and I poured myself a very large serving of Screwball, then stood by the window and looked outside, ignoring the conversation.\n\nI didn't want to run away. I didn't want Reuben to think he was rescuing me, or to think that I even needed rescuing. I just wanted to look outside at the full moon and the stars.\n\nGod I missed my telescope. I wonder if Woodrow sold it, and my other shit, or if he kept it, thinking I'd come back one day. Maybe he thought he'd run into me, and he'd drag me back down to his dungeon. I rubbed at the mark on my neck, swallowed the rest of my whiskey, and left the room quietly so nobody would notice.\n\nI seriously debated taking my jacket and my boots and going out for a midnight walk in the snow around the valley, but I could hear the wolves outside, so I just went back to my room. And once in there, I saw the most impossible thing I'd ever seen.\n\nMy telescope sat by the window. I knew it was mine, because of the stickers. I felt my heart explode with a bizarre combination of excitement and devastation, and I stood there staring at it for long minutes, praying to God it was really there and I wasn't hallucinating.\n\nSlowly, one step at a time, I went over to it, peering into the eyepiece. It wasn't adjusted, so I couldn't see anything. My hands found the dials automatically, and I adjusted it, moving it slightly, so I could see the full moon outside in all of its glory. Then I moved it again just slightly, so I could try to see some of the stars.\n\nThere were so many stars out here in the mountains. I wanted to put on my jacket and take my telescope outside so I could get a better view, but those damn wolves were out prowling again. I'd asked Alex if she could do something about them, but she said she had an \"agreement\" with them, and that they weren't a threat. Yeah, right, I thought. They're fucking wolves. But she was impossible to argue with.\n\nIt was hours later that I saw the note sitting on my bed, written on the back of some paper from my notebook.\n\nAlice,\n\nI found something that I believe belongs to you. If I am correct, let me know; there is quite a bit more where that came from and I'm willing to retrieve it for you.\n\nI know I have no right to ask, but I would like to discuss the situation with you if possible. There are multiple other parties involved, and some of them are my close friends and colleagues. I want to make sure it never happens again. \n\nI feel I have been unnecessarily harsh with you regarding your behavior, and have not made any effort to understand you, and you deserve better than that. If you're willing to talk, I'd like to listen. \n\nRW\n\n828-555-6747\n\nI read and re-read the note over and over until I'd memorized the words. Then I folded it up, shoved it in the bottom drawer of my dresser, and put on my silky pajamas and my squishy comfy bathrobe. Sitting on the small stool in front of my telescope, I explored every inch of the night sky from my bedroom window, and lost myself in the stars.\n\n<center>Chapter 9</center>\n\n<center>Reuben</center>\n\nThe party two days later went beautifully. I had my managers and board members, close friends and coworkers from all over come to visit and stay at the house. It wasn't a kink party, but having Sophie, Rachel, Everly, and a few of the other subs helping out was hugely beneficial.\n\nWhile my friends were around, I spent time asking each of them if they knew Alice Benson, and I was surprised at the results.\n\nAnthony didn't look pleased at all when I mentioned her. \"She was a troublemaker, from what Peter Woodrow told me. Though based on what you said happened to Rachel, I'm not sure I believe him anymore. Still, you know how I feel about brats.\"\n\nMike Black had met her once, but didn't have enough information to give me other than \"She's crazy, Reuben. Complete asshole. And obnoxious as hell.\"\n\nSimon only had good things to say. \"She's a ton of fun. Fucks like an animal, nothing is too crazy for her... she's a little nuts, but it works for her. If she wasn't a brat, you'd love her. Pain is her love language. Have you heard from her? She kind of ghosted me.\"\n\nBecca was surprised at her name, and drew me aside, shutting the door to the kitchen behind us. \"Yes, I know her. Why do you ask?\"\n\n\"Just trying to get both sides of a story.\"\n\n\"She came to me a few years ago for some sessions at the dungeon after she lost her Dom, but honestly, I just wasn't intense enough for her. I gave her an invite to the Underground. She's done quite a few scenes with some of the harder edge players. She's into some really intense stuff; body modification, blood and knives, heavy impact. She did a few scenes with Michael Lewis,\" she said, wincing at the name.\n\n\"Really?\" Michael Lewis wasn't allowed to scene at my club because he was just too far on the edge for my member's comfort levels. Though he was allowed to be there and observe, only because he was a close business partner, I didn't trust him not to manipulate people into doing things they were uncomfortable with... and he didn't play with a safeword, which was strictly against the rules at the Lounge.\n\n\"Yes. She's extremely intense. I could never hit her hard enough, though she loved the degradation and humiliation we did. I think she and Simon did some primal stuff as well. She's a brat. She likes to fight.\"\n\n\"Trust me, I'm well aware.\"\n\n\"How do you know her?\"\n\n\"She's staying at the clubhouse of the church, and we've run into each other a few times... she glitter-bombed my shirt.\"\n\nBecca attempted to hide a smirk. \"Uh-oh. She likes you.\"\n\n\"Yeah, that's what I'm afraid of,\" I sighed. \"But she's absolutely insane. I can't keep up with her.\"\n\n\"I wouldn't say she's insane. You know I can't share a diagnosis, but I will tell you this. She's got some mental conditions that make it very hard for her to function as a normal person, and I suspect her bratting is more of a cry for help and a coping mechanism than it is her being a bitch.\"\n\n\"I suspected as much. You knew she was with Woodrow?\"\n\n\"Yes. After they were kicked out of The Underground, I didn't hear from her or see her around for a while. Last time I saw her was when Woodrow and Lindsay tried to beat each other up in the Lounge.\"\n\nI nodded. \"Simon said the same thing. What are your thoughts on the situation?\"\n\n\"Well, I'll never trust him again, that's for damn sure. I never suspected he was that kind of guy... We can't ever let this news get out, Reuben. It would compromise the entire organization. Especially with the expansion program starting in a few months.\"\n\nI nodded slowly, thinking about how devastating that could be. The Weston House placed former trafficked women with masters and dominants to care for them while they recovered. Sometimes they stayed with them, sometimes they left. Very few people even knew what we did. But if people found out what had happened with Rachel, word could get out and the whole thing could go down the drain, and we could be charged with who knows what. ",
        "\"You need to talk to Alice, make sure you get her side of the story.\"\n\n\"That's the plan.\"\n\n\"Tell her to call me if she wants to talk, no pressure.\"\n\n\"Thanks, Becca.\"\n\nThe night after the party, I spent the evening at the Valley House, hoping to hang out with my friends and talk to Alice. I took the telescope with me and knocked on her door.\n\nIt was unlocked, but she wasn't inside, so I set the telescope by her window, found a piece of notebook paper, and wrote her a quick note, deciding it would be best that she see the thing while she was alone rather than deliver it to her in front of other people. I wasn't sure how she was going to react, and based on what Becca had said, the telescope itself could be triggering to her.\n\nOn my way up to the Rec room, I passed the Christmas tree set up in the lobby. There were a few gifts under it, several for me since I'd missed Christmas. One of them was an envelope with my name on it. I tore it open tentatively.\n\nAlice had given me a brat pass.\n\nFor the first time since I'd met her, I felt my mouth twist up into a very small smile. Pity she isn't here to see it, I thought. I tucked it into my pocket and went upstairs.\n\nBut something had changed since Christmas. During my time upstairs, Alice didn't look at me, acknowledge me, or attempt to ask me any questions during the game. She basically pretended I didn't exist. Even when David asked her an uncomfortable question and I jumped in to divert the situation, she basically ignored me.\n\nThe past six months you won't leave me alone. Now I want to talk to you, and you're ignoring me. What the fuck? \n\nShe eventually snuck downstairs, and I left her alone, even though I wanted to follow her. She looked upset, and she didn't need me confronting her right now, especially with what was waiting for her in her room.\n\nPeople eventually went to bed, and I stayed on the couch, staring out the window, wondering if Alice was doing the same two floors up. I found myself flipping the brat pass card over and over in my fingers.\n\n***\n\nI visited Greenwood Valley over the next few evenings, each time hoping to catch Alice or speak to her, but I never seemed to be able to get her alone. She seemed to have switched her attention from me to Scott Murphy, which made me seethe a little because he was clearly infatuated by her and her delicious skin and her perfect, spankable curves, and there was no way in hell that would ever work out.\n\nPlus, it was my name on the collar she was destined to wear around her neck. And I was pretty sure Scott was a sub anyway.\n\nIt was a subtle change, but after that night in the game room, realizing I no longer had her attention, every time I saw her the same word popped into my head. Mine. After the fourth day, it was getting frustrating, because she seemed perfectly happy to not be mine.\n\nWhen had I gone from repulsed by her, to possessive over her, I wondered. It must have been when I realized someone else had tried to break my girl. And I would not let any of my girls be broken. I had thought of her as my girl for over twenty years. A few months of frustration wasn't going to change that.\n\nA bunch of us were hanging out in the Rec room one Friday night when Alice burst in with a little hint of madness in her eyes. Her face was flushed, her hair tied up into a messy ponytail, her face free of makeup. She wore jeans and a sweater. She looked completely different, and I liked it. I liked her all done up like a gothic little freak... but I liked her dressed comfortably and in her own skin, too.\n\nHer eyes darted around the room, jumping from the Murphys, to DeVon and Tammi, to David and Maggie, and then to a few of the other people talking in the room. She looked upset, or frustrated, like she had something that she needed to say and it was right on the tip of her tongue.\n\nFinally her eyes settled on me. She swallowed, glared, rolled her eyes, and then used her hand to wave me towards her.\n\nHer chaotic facial expressions aside, I was relieved that she wanted my attention again, so I immediately stood and went her way.\n\n\"Come on,\" she said, grabbing my hand and pulling me down the stairs.\n\nHer hand was so incredibly tiny. As she dragged me through the hallway and across the lobby to the front porch, it hit me just how small she was. Simon was right; she was definitely under five feet tall, but had the personality of three people. Actually, she seemed to have several different personalities. Maybe that was the condition Becca had hinted at.\n\nShe hauled me outside and around to the back of the house, and pointed to her telescope. It was set up in the middle of the snow, pointed up at the night sky. I had to stoop and kneel in the snow to see through the eyepiece, but when I did, I felt my mouth fall open at the sight.\n\nThis wasn't a kiddie telescope. I was looking up at a planet, though I wasn't sure which one. Before I could ask, she started rambling.\n\n\"It's Jupiter. See that big red thing in the middle? That's a gas storm. And you can't see the rings from this position because the rings are literally so big, that from the place I have it focused, you can't see them. And do you see the bright star right behind it!\"\n\nI looked up from the eyepiece and saw her staring down at me with excitement and expectation.\n\n\"Isn't it cool?\"\n\n\"It's very cool.\"\n\n\"I know!\"\n\nI felt the corners of my mouth twitch, and she held her breath in expectation. I gave her the quickest little smirk, and looked back down through the eyepiece.\n\n\"This is one hell of a telescope.\"\n\n\"Yeah,\" she whispered. \"I missed it so much... thank you, Reuben.\"\n\n\"You're welcome.\" I stood straight and brushed the snow off my knee. She was staring straight up at the sky as if it held all the secrets to the universe. Maybe it did.\n\n\"I didn't used to believe in God, you know?\" she said softly. \"After everything, I didn't. But then... well. Daddy took me to the space museum. And I got really interested in the stars, and black holes, and I started taking Astronomy courses at the community college. And math classes, and science and stuff. And I was going to get my degree and everything. And the more I learned about space, and science, and chemistry, and all that stuff, the more I realized, there is no way in all of space or time that this shit could have exploded itself into existence. Like, the odds are just too ridiculous.\"\n\nShe looked down through the eyepiece and made a few more adjustments as she spoke. \"And I wasn't really sure about which god I believed in, because there's a lot of arguing about it, you know? So I just started learning about all of them. Cause, if you didn't know this about me, I tend to kind of fixate on things. So I learned a whole bunch of stuff about religion, I kind of went nuts with it.\n\n\"And I'm still not sure I know which one is the real one. But I know there is a real one. And the real God made all this. On purpose. It wasn't an accident. I'm not sure about the rest yet... but that's what I believe.\" She stepped away and gestured to the telescope again, and I looked back down.\n\nOnce again I was blown away by the sight. \"It's the edge of the Milky Way. You can't see the whole thing from here because there are too many trees. But I looked online and you can see it really well from the top of the mountain, and also from Deep Gap and Hominy Valley. And that's not too far away.\"\n\n\"There's an observatory near the Asheville airport, you know that?\"\n\n\"Yeah, I want to go.\" Her voice was soft.\n\n\"Let's do it. Pick a weekend.\" I don't know what made me offer, but if the Milky Way brought out the childlike wonder in her, then I could tolerate standing in the snow for a little while to let her look into outer space.\n\nShe scoffed. \"Yeah, right. Like you'd survive spending that long with me.\"\n\n\"I have twenty-four hours at my disposal, don't I?\" I stood up again and faced her.\n\nHer facial expression implied she'd forgotten she'd given me that coupon. \"It doesn't matter,\" she said, taking my place in front of the telescope. \"You don't have the patience or the respect to like me enough to spend time with me.\"\n\n\"That's a lot of passive aggressive energy in one statement. Want to explain it?\" She'd annoyed me plenty over the past few months, but to my knowledge, I'd never given her a reason to believe I disliked her. And after the Holiday party, I'd thought we'd turned a corner.\n\n\"Oh, you know. Just that I'm a brat. And you don't believe in brats. I'm not stupid, Reuben.\"\n\n\"Alice... I feel like you're using a lot of words to not say something that you really need to say. Just spit it out.\"\n\n\"Shut up, I'm adjusting.\"\n\nOh, there were so many things I wanted to do and say to that comment. But I needed to get to the bottom of this whole situation before I made any kind of move.\n\nYou're not making a move, I told myself. No moves. No brats. Just remedy the Woodrow Situation and move on. But my mind's eye wasn't listening to my conscience. My mind's eye was picturing grabbing Alice by the ponytail and shutting her up properly.\n\n\"Here. Look, it's the moon.\"\n\nI looked down to see a moon I didn't recognize.\n\n\"It's one of Jupiter's moons. I'm not sure which one though. I don't have my map book.\"\n\n\"Do I need to retrieve the rest of your belongings?\" I didn't look up from the eyepiece, waiting for her response.\n\nShe hesitated, and then said, \"I would appreciate that very much.\" Her voice was soft and respectful. A little wave of satisfaction went through me at her tone.\n\n\"Consider it taken care of. But I'd really like to talk about this, Alice.\" I rose and faced her straight on. \"Peter Woodrow lied to a lot of people, and I need to know your side of what happened.\"\n\nShe met my gaze, and I felt like I was going to lose myself in the sight. Damn why did her eyes have to be that fucking perfect?\n\nShe swallowed and lifted her chin. \"Will you believe the testimony of a brat?\"\n\n\"You being a brat has nothing to do with you telling the truth or not. You've already proven to me that you can act like an adult about things that matter. This matters.\"\n\nShe shook her head and looked back up at the sky. \"You're sending me some really mixed signals here, buddy.\"\n\nI stammered for a moment before I managed to speak. \"I am sending you mixed signals? Alice, for fuck's sake--\" I cut myself off before I said something I'd regret.\n\n\"What! For fuck's sake, what? Go ahead, spit it out, big guy.\"\n\nI really should have controlled myself, but I found myself shouting at her instead. \"You are driving me insane!\" And then I completely lost track of the control I'd held onto by a thread.\n\n\"You follow me around and purposefully annoy the shit out of me for months, then you piss me off by proving to me that you can actually be one of the most professional, polite people I've ever met, then you get sweet and sexy and emotional on me over Christmas, then you ignore me and treat me like a creepy ex who makes you uncomfortable. I have no idea what you want because you won't fucking talk to me like a normal fucking person! So explain to me your mixed signals and maybe we can actually get somewhere!\"\n\nShe stared at me, eyes wide, lips parted slightly. I groaned and found myself pinching the bridge of my nose in embarrassment.\n\n\"I'm sorry, I didn't--\"\n\n\"Holy fucking balls, Reuben, it took six months but I finally got an emotion out of you. I'm adding this to my sticker chart.\"\n\nI dropped my hand, praying to God this wasn't all an elaborate prank just to get to me.\n\n\"You want to understand? You wanna know what I want? Here, I'll break it down for you, okay? I'm. Fucking. Insane.\"\n\nShe pointed to her head. \"See this? This brain is broken. Repeated childhood trauma will do that to you. I basically have brain damage, okay? And because of it, I have to spend every minute of every day trying to keep control of my emotions, and my face, and my mood, and my stupid mouth that says stupid shit when I don't want it to. Do you have any idea how many spoons that takes?\"\n\n\"Spoons?\"\n\n\"So on top of having ADHD and PTSD, I also have attachment issues, a dissociative disorder, and a whole slew of other things all rolled up into something people like to call Borderline Personality Disorder. So I spend all day trying to keep control of myself, trying to decide if my reactions to things are valid or if I'm being overdramatic; trying to decide if I'm being crazy or if I'm being manipulated and abused, because I can't fucking tell, because I can't tell anything. I go from ecstatic to depressed in five minutes. And none of it is real or valid!\n\n\"And you wanna know why I'm a brat?\" She stepped closer to me and pointed a finger in my face. \"Because I'm tired. I'm so damn tired of being in control all the damn time. I'm tired of having to be the strong one, the responsible one, constantly trying to get through the day and be a big girl. My brain is overloaded, and every once in a while, I need someone to just fucking turn it off for me.\n\n\"You said that brats aren't subs, but you're wrong. We are just like the rest of them. We just have a different way of asking for help.\"\n\nHer tirade slowed, and she caught her breath, speaking quietly with a heavy sadness in her voice.\n\n\"I'll never get on my knees with a snap of your fingers. That doesn't mean I don't want to be there. But I'll be damned if I trust myself to anyone who isn't strong enough to put me there themselves.\"\n\nA few tears rolled down her cheeks and she looked up at the sky, laughing. \"You want to know what I want?\" Her lip quivered for a moment. \"I don't fucking know, Reuben. But I know one thing... I think you're strong enough. And that's pretty fucking beautiful.\"\n\nI stared at her in shock, letting everything she said mull around in my brain, trying to sort it out and make some sense of it. There was too much to process, and still too many questions, and too many grey areas. But the things that did stick out to me were clear. Alice had been begging me to help her, to control her, to give her a sense of direction, for the past six months. And I'd completely ignored her.\n\nShe'd been right here in front of me. My girl, begging for help. And I'd  ignored her,  rejected her, because she wasn't what I wanted or expected.\n\nI felt like a total piece of shit. She'd been practically dropped in my lap. Years of searching, waiting, hoping, praying... then she showed up right under my nose and I'd pushed her away.\n\nWith that knowledge, the prophecy I'd received seemed to click into place. I will destroy you. Alice was about to break down everything that I'd created for myself, everything I'd learned and adhered to for the past twenty-odd years. I had no choice but to learn a new way, try a new path, if I was going to reach her. Because my way wasn't going to work for her.\n\nI stepped closer to her and brushed a strand of hair out of her face, tucking it behind her ear. Her eyes looked bigger and brighter under the light of the stars above us, and the tears rolling down her cheeks gave me the tiniest splash of pleasure I craved. Fuck was she gorgeous.\n\nIn that moment, looking up at me like that, I saw the submissive side of her begging to be led and cared for. I wanted to own her, to tame her, to give her those guidelines and boundaries she craved. I wanted her to trust me enough to be good for me. I wanted to put her on her knees and prove to her I was strong enough to take care of her.\n\nBut there was only so much I was willing to do, only so far I would go, without her complete understanding and consent. I couldn't break every standard I'd been following for the past twenty years... but maybe I could bend them. Maybe I could find that perfect balance, right on the edge, right where she liked to dance. Claiming my girl, who I knew beyond a shadow of a doubt was supposed to be mine, was more important to me.\n\n\"I am not a nice man, Alice,\" I warned. \"I don't think you know what you're asking for. I don't do casual. I don't do once-a-week playtime. I am an all-or-nothing, twenty-four seven, total power-exchange kind of person, and that is non-negotiable for me. I can't turn it off. I am in, or out.\"\n\nVery gently, I set my hand around the soft ivory column of her neck. She was so tiny that my hand covered nearly the entirety of it. Her eyes widened and then her eyelids fluttered at my touch.\n\n\"I am not nice. I will not tolerate your shit. I will hold you to my rules, I will check up on you, I will take control of every aspect of your life. I will punish you in ways you do not enjoy. I am cruel. I am mean. I am sadistic, and I am a bully. I will enjoy watching you suffer.\"\n\nExcitement and arousal burned through my veins as I gave her neck the softest squeeze. Her mouth popped open and her eyes widened in shock. \"This isn't a game to me. This is serious, and it's my life. You don't even know what you're asking for, but I promise you two things.\n\n\"One, I will never, ever, break your limits. I will swear on anything you want me to. And two...\" I squeezed just a little harder, and leaned forward, forcing our faces just a few inches apart. \"I will tame you. I will teach you to submit. I... will... destroy you.\"\n\nAlice gasped, her cheeks flushed, her eyes wide with wonder and arousal. I could tell she was struggling to breathe, so very gently, I eased my grip on her neck, letting my hand fall away from her neck, catching one of the tears on her cheeks with the tip of my finger, and then running it along the fullness of her silken bottom lip.\n\n\"So you think very hard, and very carefully about the next time you decide to act like a little brat to me. If you want a chance at a normal relationship, I would suggest you keep your mouth shut and your behavior in check. Because if you act up again, I'm going to take it as an invitation to show you who is in charge. This is your open door, sweetheart. It's up to you to walk through... and you might not like what you find in there.\"\n\nI could feel every inch of my body, burning and tingling with excitement. My eyes drifted up and down her flawless body, searing this moment into my head, and relishing the feeling of power that coursed through my veins.\n\nThe Beast was awake.\n\nShe looked at me with as much desire as I felt for her. For the first time in years, I felt seen. She could see the monster, and she wanted it. It called to her.\n\nNobody would hear her scream out here in the woods. Do you like the snow, little brat? Do you like the cold mixed in with your heat? Do you like pain with your pleasure? Because I do. \n\n\"Goodnight, Alice.\"\n\nI turned and walked away from her, knowing if I stayed any longer, I wouldn't be able to honor that promise to let her try for a normal relationship. I flexed my hand, feeling it tingle from where I'd felt her blood pulsing under her skin. I knew I'd have it back there soon enough.\n\nShe wouldn't be able to resist for very long. My warning to her was more like a challenge, and I knew there was only so long she'd be able to resist before she'd step up to it.\n\nAs I neared the clubhouse, I felt my face break into a smile. Another rush of emotions ran through me at the knowledge that I was right around the corner from the hunt, and I felt something I hadn't felt in a very long time.\n\nAlive. "
    ],
    "authorname": "LindsayMurray",
    "tags": [
        "brat",
        "brat taming",
        "brat tamer",
        "bratting",
        "bdsm",
        "slow burn",
        "mental health",
        "trauma",
        "male dom",
        "mf"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/how-to-tame-a-brat-pt-03"
}
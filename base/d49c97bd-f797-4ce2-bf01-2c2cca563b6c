{
    "title": "The Intern: An Anal Training",
    "pages": [
        "The Intern: An Anal Training\n\nSummary: Submissive boss gets her ass trained to take big cock.\n\nNote 1: Thanks to Breezy who came up with the idea for this fun tale.\n\nNote 2: Thanks to Tex Beethoven for editing this story.\n\nNote 3: This is part two of a trilogy. In part 1, The Intern: An Anal Seduction, a boss, Judy, a well known and widely respected CEO of a large corporation, is sexually frustrated because of the neglect from her husband of twenty years, and that frustration has driven her into becoming a total bitch to everyone at work. She goes online to explore any sexy possibilities she can find, and soon becomes the submissive pet of an anonymous woman along with her fianc\u00e9, who the next day turns out to be her very own much younger sexy intern... one of the many people she's been a downright bitch to... but who nevertheless takes her boss in hand... and thus beginning Judy's journey into sexual submission and anal exploration.\n\nThe Intern: An Anal Training\n\nMONDAY NIGHT:\n\nJudy struggled to stay focused through the rest of the day.\n\nHer pussy was leaking constantly.\n\nShe couldn't stop replaying what she'd allowed to happen in her office.\n\nThe good... it was a life altering, body quaking, encounter.\n\nThe bad... it had happened in her office, with her intern.\n\nThe good... she'd finally achieved the orgasm she'd been dying to have for months... and even though it wasn't a fuck... it was nevertheless very intense.\n\nThe bad... she'd cheated on her husband... although she didn't feel a lot of guilt for it, since he'd unknowingly pushed her into it by his total neglect of her, and she hadn't been with another man.\n\nThe good... apparently she did have a g-spot: something no man had ever located. (She'd never been with a woman before.) And her g-spot orgasm had been more intense than almost anything she'd ever experienced before.\n\nThe bad... she'd opened herself up to possible blackmail and humiliation... even though for some reason she trusted Mistress Marcy's judgement and discretion, and as for the humiliation... at least so far... it wasn't necessarily a bad thing. It was actually rather exciting!\n\nThe good... for the second time ever... the first time many years ago had been disastrous... she'd allowed her ass to be penetrated, and this time it hadn't hurt her or killed her mood... it had actually enhanced the experience.\n\nThe bad... she'd agreed to experience more sodomy from Marcy's fat-cocked fianc\u00e9. And when that happened, it would irrefutably be cheating!\n\nThe good... Mistress Marcy had offered to help her in straightening out her sexless marriage. Judy had no idea what that might look like when it happened, but her Mistress had seemed quite sure of herself, and from everything she'd experienced with the girl today at lunchtime, she inspired confidence.\n\nShe arrived home, ordered in food, had a bath, and was lounging on her bed wearing thigh high stockings and nothing else as ordered, her laptop open watching some lesbian porn. At two minutes to eight she called Marcy.\n\n\"Hi, slut,\" Marcy moaned, as her man slowly fucked her ass. Judy couldn't see what was happening of course, but she was very aware of the moan.\n\n\"Hi, Mistress,\" Judy greeted.\n\n\"When is your husband returning?\" Marcy asked, enjoying the slow ass fucking, which would result in her ass being well gaped before the upcoming deep, rough, satisfying ass fucking.\n\n\"Friday,\" Judy answered, watching a needy student place her hands on her teacher's shoulders and guide her to her knees before her... an act Judy found so sexy, so erotic, so pussy leaking.\n\n\"Perfect,\" Marcy moaned. \"That gives us a few days to train your asshole.\"\n\n\"Really?\" Judy asked.\n\n\"Yes, by the time he returns home, you'll be begging for him to pound your tight asshole and thus blow his mind,\" Marcy assured her, very confident that would indeed be the case.\n\n\"I really don't know about that,\" Judy said, thinking a thumb sneaking into her ass and only going an inch and a bit inside, was a whole lot different than nine and a half inches of cock pounding away in there.\n\n\"Oh, but I know,\" Marcy said. \"Your ass was made to be fucked.\"\n\n\"Really?\" Judy asked, that prospect seeming a little too much.\n\n\"Yes, big girls like we are were born to suck cock, to get our tits fucked, and to be sodomized roughly,\" Marcy said, all things she did regularly.\n\n\"Well, I've done two of those things pretty regularly, or at least we used to,\" Judy said. Ralph had loved fucking her tits in the past, although like everything else in the past six or seven months, he'd totally lost interest.\n\n\"Well, two out of three ain't bad,\" Marcy drawled, as she began slowly rearing back to meet her man's forward thrusts. \"But three out of three is even better.\"\n\n\"I guess so,\" Judy said, wondering what Marcy was doing... she was either masturbating, using a toy, or being fucked.\n\n\"Trust me, my pet,\" Marcy said, \"once you get accustomed to having a cock buried in your asshole, you'll crave it.\"\n\n\"I can't imagine,\" Judy said.\n\n\"Then here's a helpful order from your wise and... admittedly young... but nonetheless experienced... Mistress. Until you allow Ralph to fuck your asshole, you're only permitted to have an orgasm by fingering your asshole or fucking your back door with a toy,\" Marcy dictated. In practice she knew there'd be exceptions to that rule, but she'd always be present and the one calling the shots.\n\n\"Oh, Mistress, my pussy has been burning all day! You've made me into a perpetually cunt leaking slut,\" Judy cried out in exaggerated despair, hoping a touch of desperation and talking dirty would change her Mistress's mind.\n\n\"Glad to hear it! And if you want to come again, it's pretty simple: you may either finger bang your ass, or grab a toy and fuck your sexy ass,\" Marcy said. \"At the moment, my ass is filled with seven inches of dick.\"\n\n\"Lucky girl,\" Judy said, meaning at least she was getting fucked, but realizing it likely sounded otherwise.\n\n\"Oh, you'll be lucky too, very soon,\" Marcy moaned, as she began bouncing back on Ryan's fat cock, knowing part of Judy's training was the inspirational seven inches of dick plowing her own ass. \"I'm going now. I need my man to really ream my asshole.\"\n\n\"Okay, bye, Mistress,\" Judy said, having hoped for a longer encounter.\n\n\"Bye, ass slut,\" Marcy moaned, and she hung up just as Ryan began really destroying her ass.\n\nJudy sighed.\n\nOn her laptop, the teacher was now eating the student's pussy, and Judy instantly wanted more pussy. She watched porn for almost an hour, her pussy on fire, and needing to come, she stuck her finger into her pussy and got it good and wet before she brought her wet finger to her ass and slowly pushed it inside. It was awkward to finger fuck her ass compared to finger banging her pussy, which she began doing with her other hand.\n\nThere was a little discomfort in her ass, but intense fire in her pussy as she double penetrated herself... something she'd never done before, which made her wonder what it would feel like to have cocks in both her pussy and her ass.\n\nWhile on her screen a cheerleader wearing a strap-on was really drilling another cheerleader, Judy fucked herself to an orgasm by fingering both of her holes.\n\nAs she washed her hands once her orgasm was done, she wondered what the next few days would be like.\n\nAlthough she was a little nervous... she was far more excited.\n\n.....\n\nTUESDAY MORNING AND EARLY AFTERNOON\n\nAt work, all morning Judy was excited yet frustrated.\n\nShe hadn't seen Marcy all morning, and her pussy was wet with anticipation. She led two meetings, the entire time wanting them to be over, so she could continue her wild sexual exploration.\n\nIt was just after lunch when Marcy walked in and asked point blank, \"Did you come last night?\"\n\n\"Yes, Mistress,\" Judy said, a chill of adrenaline coursing through her, the moment she saw her intern.\n\n\"Did you finger your ass?\"\n\n\"Yes, Mistress,\" Judy said, \"as well as my pussy.\"\n\nAs Marcy hopped onto the desk, she said, \"So you double banged yourself... hot.\"\n\n\"It was weird,\" Judy said.\n\n\"Ready for your new version of Starbucks?\"\n\n\"Yes, Mistress,\" Judy said, getting eagerly out of her chair and hurrying to her intern.\n\nMarcy spread her legs to reveal her black thigh high stockings and ordered, \"Hurry up. I need to meet with Mr. White in ten minutes.\"\n\n\"Yes, Mistress,\" Judy replied, as she hurried to the invitingly spread legs and dove right in... having craved this pussy ever since she'd finished dining on it yesterday. And that had been her first taste of pussy ever!\n\n\"Oh yes,\" Marcy moaned, \"I can tell you like your new afternoon drink.\"\n\n\"Love it,\" Judy said mindlessly, as she licked hungrily... usually she needed her afternoon Starbucks for the caffeine rush to get through the afternoon, but this pussy was proving to be her new adrenaline afternoon pick me up.\n\n\"And it's a lot cheaper than a Starbucks drink,\" Marcy said.\n\n\"And tastier,\" Judy added, now choosing pussy over coffee in a heartbeat.\n\n\"And healthier,\" Marcy added.\n\n\"Mmmmmmm,\" Judy moaned, as just like sucking dick made her pussy wet, she'd always gotten turned on from pleasing others, and eating pussy also made her pussy wet... very fucking wet.\n\n\"You want my cunt cum, slut?\" Marcy asked, her orgasm close.\n\n\"Yes, Mistress, come all over your boss's face,\" Judy replied lustfully.\n\n\"Suck on my clit and finger bang me,\" Marcy ordered.\n\n\"Yes, Mistress,\" Judy obeyed, doing both, as two fingers easily slid inside her Mistress's wet box, and her body began twitching as the pet sucked on the swollen clit.\n\n\"Oh fuck, you cunt licker, ass taking slut, cum bucket,\" Marcy rattled off, just before she flooded her pet's face with cum.\n\n\"Mmmmmm,\" Judy moaned, loving the name calling and nasty talk, as well as the delicious cum that flooded out of Marcy's pussy and into her own mouth.\n\nOnce she was spent, Marcy said, as she got off the desk, \"I expect you to be in the basement, room two, at 2:30. Is that clear?\"\n\n\"Really? I've never been in the basement,\" Judy said.\n\n\"Just be there,\" Marcy ordered. \"We need to get that ass ready for nine plus inches of cock.\"\n\n\"Yes, Mistress,\" Judy said.\n\n....\n\nLATER TUESDAY AFTERNOON\n\nJudy took the elevator to the basement and began finding her way to room two, surprised at how many rooms were down here, and learning this was where all those files ended up after she approved them. As she proceeded, she wondered why Marcy wanted to meet here, since they'd already enjoyed two sexual encounters in her office... there didn't seem to be a need for a secluded discreet location... and since Marcy was expected to be in her office often, there was no reason for anyone to suspect anything.\n\nAs she reached room two, horny as hell, she was surprised to see room two was a storage room. She walked in and saw the janitor standing there... the one Marcy frequently chatted with. It was then that she put two and two together.\n\nThe janitor was Marcy's fianc\u00e9.\n\nThe janitor was Master!\n\n\"Close and lock the door,\" Ryan said, as he texted Marcy: Slut's here.\n\nMarcy closed and locked the door, processing her newfound revelation, when her phone rang.\n\n\"Put your phone on speaker, slut,\" Marcy ordered.\n\n\"Yes, Mistress,\" Judy obeyed, while she tried to rationalize what was already happening, and what was about to happen.\n\n\"Place your phone on the table, pet cock sucker,\" Marcy ordered, sounding a little more dominant with Ryan in the picture. Marcy had perfected the dual rules of being a Mistress. The first was being seductive, sensual, understanding and compassionate as she seduced the woman. The second, once the seduction was in place and the new pet was meeting Master for the first time, she shifted verbally into a more traditionally dominant Mistress. She knew from experience that almost all MILFs she seduced succumbed to her and submitted to sexual servitude out of need, curiosity and a perverse belief that having sexual encounters with someone of the same sex wasn't really cheating. On the other hand, taking another man's dick was definitely considered cheating, so a stronger, heavier-handed approach was more effective.\n\nMarcy again obeyed, \"Yes, Mistress,\" as she set the phone down on the wooden table.\n\n\"Now pull out Master's cock,\" Marcy ordered, while within her own office upstairs, Mrs. Alden, the black Personnel Manager, slowly licked her Mistress's pussy under her desk.\n\nMrs. Alden was dying to know who the couple's latest conquest was. Marcy had reawakened her dying sex drive, and she now ate the pussies of five different younger employees, and was provided with cock to suck and to ride through a glory hole downstairs in room one.\n\n\"Yes, Mistress,\" Judy obeyed, as she approached the muscular and tattooed man she'd never really paid any attention to. She knew what she was doing was wrong, knew this was definitely cheating, and yet was well aware of the fact she'd agreed to mindless obedience. She was also aware... this was the line that if she crossed it, there was no going back.\n\nJudy walked the few steps to the man, not once making eye contact but downcast instead, and she felt such humiliation as she, the CEO of the whole damned place, dropped to her knees before a janitor... a person she'd ignored for years as far below her and had treated like crap whenever she'd had reason to pay any attention to him at all. (She hadn't hired him, of course... that would have been Mrs. Alden.)\n\nHer hands trembled as she undid Master's belt, tugged at his jeans button and unzipped him. She was both dying to see the fat cock up close and personal, the picture of it having tantalized her and made her mouth water (she'd gazed upon it at least a hundred times), and yet she was trembling with the reality of what she was about to do.\n\nShe pulled down his jeans and boxers, and a semi-erect fat cock was suddenly poised before her... her first new one in over two decades. Although her husband had an amazing cock that filled her completely, and she couldn't fathom being able to take any more in length, this cock put Ralph's to shame in girth.\n\n\"What do you think of my man's cock?\" Marcy asked.\n\nMrs. Alden remembered the first time she'd seen that fat cock, and how she'd sucked it and taken his load in the back alley behind the break room, begging him to come in her unprotected pussy (although he elected to come on her face), then took it in her pussy the next day in her office, when he did indeed unload into her fertile womb, and had gotten her asshole stretched in ways she hadn't imagined possible in her home, while her husband watched and was glad to receive a hand job from Mistress Marcy.\n\n\"It's so fat,\" Judy said, in awe of the fat cock dangling before her.\n\n\"I know,\" Marcy said. \"Is it hard yet?\"\n\n\"Semi-hard,\" Judy said, wanting nothing more than to see this cock fully erect, already having forgotten about Ralph, or the wedding ring on her same hand that was slowly stroking the majestic cock.\n\n\"Well, suck that cock and get it hard, it ain't gonna get hard by itself,\" Marcy said, although that obviously wasn't true. That cock got hard all the time all by itself... it was almost constantly erect, bless its heart.\n\nFor Judy that made sense, and she opened her mouth to take the fat cock in, not really thinking about anything but that cock. She wanted to feel it in her mouth. She wanted to feel it hardening between her lips. She wanted to feel it stretch her mouth wide open. She wanted to see and feel it while it was rock hard.\n\n\"That's it, slut,\" Ryan finally spoke for the first time. \"Get my fat cock nice and hard.\"\n\n\"Does she look hot with your cock in her mouth, baby?\" Marcy asked, thinking she should have been down there to watch this... but she'd wanted to see if Judy would obey mindlessly without her being there.\n\n\"Yeah, it's the best she's ever looked,\" Ryan said, \"not bitchy at all right now,\" as Judy slowly sucked his cock... her cheeks going red at the casually disrespectful way this janitor who was now her Master was talking about her... yet she loved feeling his fat cock hardening between her lips.\n\n\"She looked pretty hot between my legs, too,\" Marcy moaned.\n\n\"Yeah, she did,\" Ryan agreed, having seen the pictures and watched the video.\n\nJudy felt her mouth really stretching as Ryan's cock hardened completely. She knew she shouldn't be doing this, she knew she was cheating. Yet her pussy was on fire, her submissive nature was leading the way, and besides, If her husband had been fucking her like she'd needed, she wouldn't be in this situation at all!\n\n\"That's it, slut, get my cock ready for that pussy of yours,\" Ryan said, impressed by this older woman's mouth. She was using her tongue while she sucked, creating some extra wetness that enhanced his pleasure. Although Marcy was a great fuck, both her pussy and ass completely heavenly, and she sucked dick really good... nobody sucked better than older bitches... that was a fact.\n\nJudy had kind of assumed she'd be sucking his cock and either swallowing the load or taking a facial... a blow job not as extreme a cheating activity as allowing another man into her pussy.\n\n\"My pet, are ready to receive the fucking you've been craving for months?\" Marcy asked.\n\nRyan pulled his dick out, pulled the overwhelmed MILF up, spun her around, and bent her over the table, the phone now directly in front of her as she wailed, \"Oh, Mistress, I really shouldn't be doing thiiiiiiis!\"\n\nRyan knew timing was everything when an older woman was cheating on her husband for the first time, so he lifted up her dress and slid his cock inside her already very wet pussy before she had time to think or finish her protest.\n\nJudy was stunned by how quickly she'd progressed from a cock in her mouth to the cock in her pussy... a stopwatch would have timed it at just shy of three seconds.\n\n\"Such a wet slut,\" Ryan said, as he began slamming into the bent over CEO.\n\n\"Oh God!\" Judy cried out, both because she was getting fucked by another man, and because the instantaneous pleasure from the thick cock was driving her wild!\n\n\"Is he stretching your pussy, my pet?\" Marcy asked, wishing she was there to watch it, although she knew it was being filmed, as were all the encounters in that room. They had a very sophisticated setup down there where a motion sensor controlled not only whether the camera was filming, but where it was pointing. Complete with sound, of course.\n\n\"So good,\" Judy moaned, not really answering the question, but overwhelmed by how well her pussy was being filled. Somehow this seven inches seemed larger than Ralph's nine and a half, since it was filling her in a much different, yet still extremely pleasurable way.\n\n\"I'll take that as a yes,\" Marcy laughed, as she tapped her nearby pet's head, which instructed the black beauty to shift from slow leisurely licking to more aggressive action.\n\n\"So big,\" Judy moaned, the cock indeed feeling so big, stretching her so good, and bringing her intense pleasure.\n\n\"Yeah, he's a great mother fucking stud,\" Marcy said with great confidence, since every woman she brought to Ryan went ape shit for his cock.\n\n\"Harder, fuck me harder,\" Judy heard herself begging, her inner slut taking over.\n\n\"Do the wall bang,\" Marcy ordered.\n\n\"The what?\" Judy asked, as Ryan pulled out of her.\n\nRyan spun her around, lifted her into the air by her knees, somehow managed to drop her square onto his erect cock, and walked her to the nearest wall.\n\n\"Oh, my fucking God!\" Judy moaned, as she was dropped onto a cock and filled in a way she'd never even imagined being filled, hitting erogenous zones she hadn't imagined existed. Now, this was a real man! Picking up her big body, along with her big booty, as if she were an autumn leaf!",
        "Pressing her against the wall, Ryan bucked his hips and really fucked the MILF.\n\nJudy was lost in lust as she babbled, the pleasure consuming her in ways she'd never felt, \"Fuck yeah, ohhh fuck, yeah. Oh, fucking God! You're so deep in my cunt, and stretching me so fucking good!\" (She continued babbling on and on rather endlessly, but you get the picture.)\n\n\"Isn't he amazing?\" Marcy asked, as she listened to her boss making the moans and talking the slut talk like all the MILFs did once Ryan began fucking them.\n\nRyan loved looking into a woman's eyes as he fucked her... so lustful... so vulnerable... it was the ultimate look of beauty.\n\n\"Oh yes, fuck yes, best fucking dick EVER!\" Judy answered, while her orgasm rose and he kept fucking her.\n\n\"Come, my nasty slut, come on Master's big fucking cock,\" Marcy ordered, as her own orgasm was about to erupt.\n\n\"Yes, oh fuck, yes, yes, fuuuuuuck,\" Marcy screamed, as her orgasm erupted and she squirted everywhere... soaking an astonished Ryan as he lowered her to the floor.\n\n\"Shit, she's squirting all over the place,\" he exclaimed, stroking his cock.\n\nJudy was so embarrassed by how much she squirted, and was so ashamed she'd just cheated on her husband, that tears began to form, even while the most intense pleasure she'd ever experienced continued to cascade through her body.\n\n\"So hot,\" Marcy moaned, as she flooded her other pet's face.\n\n\"I'm going to come,\" Ryan said, as he slid his cock into her mouth again, close to coming himself, as he roughly face fucked her.\n\nJudy focused on the cock in her mouth and the load in his balls, forcing her guilt away, and wanting to get this man off, to get his load.\n\n\"Come all over our pet's face, baby. And boss slut, beg for Master to come on you,\" Marcy ordered.\n\nJudy didn't hesitate, as Ryan pulled his cock out of her mouth and beat it furiously. \"Please, Master, come all over your slut's face; give me that load, I want it so bad!\"\n\n\"Oh fuck,\" Ryan grunted, loving to hear a woman begging for his cock or his cum, and he erupted his load all over her face.\n\nJudy moaned as she felt the warm cum splatter all over her face, and also onto her black dress.\n\nAs Judy rested against the wall, her cum still leaking out of her pussy, his cum dripping down her face, she began to weep.\n\n\"She's crying,\" Ryan cried out, concerned and suddenly helpless.\n\n\"Really?\" Marcy said, this turn of events totally unexpected.\n\n\"Yeah,\" Ryan said, this not a reaction he was accustomed to; he had no idea how to deal with a weeping woman. To this day, the only time he'd ever seen his fianc\u00e9e cry was the moment she'd heard the judge sentence him to prison. It had broken his heart.\n\n\"I'm so sorry,\" Judy wept, completely overwhelmed not only by her decisions, but especially by her squirting.\n\n\"I'm on my way,\" Marcy declared, rolling the office chair back and standing up. She disconnected her phone and said, \"Thanks, slut.\"\n\n\"Thank you, Mistress,\" the older black woman responded, as she crawled out from under her own desk... a task that had given her intense shame the first time she did it, but now it was just a natural act that she craved on a regular basis.\n\nMarcy dashed downstairs to the basement and found Ryan looking helpless and Judy collapsed on the floor.\n\n\"Go,\" she waved him off, and hurried over to her sobbing, cum-coated boss. \"What's wrong, sweetheart? Didn't you like it? It certainly sounded like you did!\"\n\n\"It was amazing, the best I've ever had,\" Judy wailed as if heartbroken, wiping tears, snot and cum from her face.\n\n\"And that's bad how?\" Marcy asked, totally perplexed.\n\n\"It's just Ralph hates it when I squirt all over him, and then I caught the look on Master's face just now, and I felt so ashamed!\"\n\n\"Oh, my darling, squirting is natural, I know Ryan didn't mind, he was just surprised,\" Marcy said, wrapping her arms around the weeping woman.\n\n\"And I feel terrible for cheating on my husband,\" Judy added.\n\n\"Oh, honey,\" Marcy crooned, leaning in and kissing her. Tenderly. Ongoingly.\n\nAfter the raw fucking, the intense orgasm and the explosive facial, this was an experience completely different for Judy. Raw. Intimate. Body warming.\n\nAfter a couple of minutes Marcy asked, breaking the kiss, \"Do you understand how much you needed this?\"\n\n\"Yes, but....\"\n\n\"No buts,\" Marcy interrupted, putting her fingers caringly to Judy's lips. \"You're a beautiful woman. You're a dirty slut, and I mean that in the best possible way, because so am I. You're a woman with needs. Your husband totally abandoned his manly responsibilities for months on end, and that's what led to this necessity.\"\n\nJudy knew that was all true... although she really appreciated hearing it.\n\n\"Listening to you go ballistic while Ryan fucked you was so hot,\" Marcy said, as she cupped her boss's big tits and noted the spattering of white spots of cum on her dress.\n\n\"He was amazing,\" Judy said. She'd stopped crying now, and the soft look on her face was totally vulnerable.\n\n\"Yeah, he can really fuck,\" Marcy said tenderly. \"He can also shoot up to ten loads in a single day.\"\n\n\"Fuck,\" Judy said, trying to imagine that cock pounding her through multiple orgasms and delivering multiple loads to her.\n\n\"Oh yeah,\" Marcy said. \"The guy is a fucking machine.\"\n\n\"You're a lucky girl,\" Judy said earnestly.\n\n\"Oh, but you're a lucky woman as well, since he'll be pounding your three holes regularly,\" Marcy assured her.\n\n\"I can't imagine that fat dick inside my ass, or in any ass, for that matter,\" Judy said.\n\n\"It will take training before you'll be ready for it,\" Marcy said. \"And we'll begin that training before you leave for the day. But you need to clean up now. You have a Zoom meeting in fifteen minutes, and you have a lot of cum stains on your dress.\"\n\n\"He came buckets,\" Judy said, looking down to see the white spots.\n\n\"He always does,\" Marcy agreed. \"And you also have his cum all over your face.\"\n\n\"Right,\" Judy laughed.\n\nMarcy helped her pet to her feet and said, still in her tenderest mode, pulling her pet close, \"I'm always here for you, my pet. Yes, I will frequently use your face. Yes, I will fuck that pussy and ass so good and hard you'll come like the slut you are. Yes, I'll train your asshole to take Ryan's fat cock and your husband's long one. But I'll also guide you along your journey. You'll always be able to tell me anything you're feeling, anything that's troubling you, and I'll always listen. But be warned: I'll then always take action to address the issue, and you may not appreciate it, at least not at first.\"\n\n\"Everything you've told me so far is still so surreal,\" Judy said, as she went over to the large, dirty sink.\n\n\"All awakenings are exactly that,\" Marcy said.\n\nJudy cleaned the cum off her face, and once she was back in her office, she changed outfits... she always had two or three extra dresses on hand in case of emergencies. She'd spilled coffee on herself on more than one occasion, or sometimes she needed a change of attire for a special client she was meeting with... and now she'd always need to be prepared for unexpected cum stains.\n\nTuesday late afternoon:\n\nIt was 4:30 when Marcy strode into Judy's office and said, \"Let's get this training started.\"\n\nJudy had taken some time to think about her multiple transgressions, especially sucking and fucking another man, and had gone back and forth between excessive guilt and lustful hunger.\n\nYes, she'd cheated on her husband.\n\nBut yes, she'd just had the fuck of her life, and had discovered girth is even more important than length.\n\nAnd yes, her cheating had been a totally justifiable response to the horrible treatment from her husband, even if he didn't realize he'd pushed her into doing it. Yet. The jury was still out on what she was going to tell him, if anything.\n\nAnd yes, she also realized these were just excuses to defend her actions, but yes, they were working. And well should they!\n\n\"Yes, Mistress,\" Judy obeyed, almost leaping out of her chair behind her desk, and hastening over to her young intern.\n\n\"Bend over your desk, my pet,\" Marcy said, having been a little worried that even after her pep talk, which Judy had seemed to take to heart, she could revert to being a mental mess after having sufficient time to reconsider her actions earlier today, but her instant and enthusiastic obedience happily informed her otherwise.\n\n\"Yes, Mistress,\" Judy unquestioningly obeyed, her pussy now constantly wet.\n\n\"Still horny?\" Marcy asked, lifting up the dress.\n\n\"Twenty-four seven, dear Mistress,\" Judy replied.\n\nMarcy pulled apart her boss's ass cheeks and admired the puckered virgin hole. Fuck, it was going to look so hot after it was gaped by her strap-on, and then by Ryan's ass destroyer. She asked, \"Ever had your ass eaten?\"\n\n\"No, I can't say I have,\" Judy said, just before she felt Marcy's tongue begin licking her smallest hole. In the stories she'd read, Mistresses usually didn't eat pussy, and she couldn't recall hearing of any who'd deigned to eat an asshole. Yet somehow she'd lucked into finding the perfect Mistress... one who gave as much as she received... and possibly even more. Who could be horrifically (and thus wonderfully) dominant at times, and yet who could also be utterly tender, like she'd demonstrated this morning. A Mistress who seemed to understand her needs and desires even better than she herself did. But for the moment, \"That feels really nice,\" was all she breathed. And all she needed to say.\n\n\"Once you get past the initial prejudice that an asshole is inevitably a dirty hole, you're able to discover how it houses a plethora of sexual zones, and it can deliver intense pleasure to you,\" Marcy said, loving to have her own asshole eaten, and loving to dine on a sweaty, tangy asshole... and Judy's currently had both of those qualities.\n\n\"Feels good... weird... but good,\" Judy said, letting out the softest of moans. She couldn't explain how, but this experience was actually turning her on... her Mistress's warm breath enhancing the other, stranger sensations.\n\n\"Eating ass is normally considered taboo as fuck, and it actually is a little nasty too, so very few people ever take the chance to learn that an asshole tastes fucking good,\" Marcy said, swirling her tongue around the puckered soon-to-be fuck hole.\n\n\"I've never thought about it at all,\" Judy said, \"I've always been stuck on that horrible experience all those years ago, and just left it at that,\" which was true, nor could she still imagine it tasting good, but she couldn't deny how much she was enjoying the lavish licking she was receiving right now.\n\n\"Oh, we'll be exploring everything together, my pet,\" Marcy assured her, and she stood up, bent over the desk next to her pet and ordered, \"Now it's your turn.\"\n\nJust stood up, looked down at Marcy's amazing big ass, not nearly as large as her own, but still delectable, leaned down and spread Marcy's cheeks, and stared at the asshole.\n\n\"Isn't it pretty?\" Marcy asked, looking back and seeing her pet staring at her asshole.\n\n\"I've never really examined an asshole before,\" Judy said, as she stared at the small rosebud, wondering how Ryan's fat cock could possibly fit into it.\n\n\"Yes, it's a largely ignored bodily organ ,\" Marcy said. \"It's almost impossible to see our own of course, except perhaps by using cameras. And unlike dogs, we're not usually in the habit of examining each other's. Which is a pity, really.\"\n\n\"I also can't fathom how you could ever take Master's cock into this tiny hole, even though I know you have.\"\n\n\"The anus has amazing muscles that can loosen or tighten to extremes most people have no idea about,\" Marcy said, loving to share her well-researched knowledge about the ass with anyone who'd listen.\n\n\"And yet I've never even thought about it until now,\" Judy said, still staring at the hole.\n\n\"Well, enough drooling, pet,\" Marcy said, \"time to eat my asshole.\"\n\n\"Yes, Mistress,\" Judy replied, leaning down with a mixture of feelings washing through her, as she moved in close and could smell the salty scent, which didn't smell at all like feces, but nevertheless smelt a little like ass... as nonsensical as that sounds. She cautiously extended her tongue and licked.\n\n\"Good pet,\" Marcy moaned, loving the feel of a tongue on her asshole... plus the hot breath... the wetness... the naughty taboo of it...\n\nJudy licked slowly, unsure of how to do it, surprised by the salty sweaty taste, which wasn't at all unpleasant.\n\n\"Start by licking in circles,\" Marcy instructed.\n\nJudy obeyed, swirling her tongue around in a circular motion.\n\nAs the pleasure increased, like it always did for Marcy when she was getting her ass eaten, she ordered, \"Now shove two fingers into my cunt while you continue eating my asshole. You can alternate between kissing it and licking it.\"\n\n\"Yes, Mistress,\" Judy replied, and she slipped two fingers inside Marcy's cunt while simultaneously kissing and licking her butt hole.\n\n\"Yes, yes, eat my asshole, slut, eat it good,\" Marcy moaned, as her orgasm rose.\n\nJudy focused on trying to smoothly do both at once... until Marcy let out a load moan and came.\n\nWhen Marcy had finished her orgasm, Judy pulled her fingers out of her Mistress's pussy and sucked the wetness from them.\n\n\"You love the taste of my cunt, don't you?\" Marcy asked as she turned around.\n\n\"Is that bad?\" Judy smiled.\n\n\"It's very bad, you nasty bisexual cum slut,\" Marcy smiled, before kissing her tenderly.\n\nMarcy said, as she headed out, \"Ryan and I will be stopping by your house around seven to run through our plans for the rest of the week. Be wearing something sexy... something you'd never consider wearing in public.\"\n\n\"Yes, Mistress,\" Judy said, deciding to stop at a lingerie shop on the way home to find something unbelievably fucking sexy.\n\n.....\n\nTUESDAY NIGHT\n\nJudy picked out a sexy all-red corset outfit that showcased her large tits behind translucent netting and had garter clasps for the matching red stockings. In the past, something like this would have been all she'd have to wear to get Ralph hard and pounding her like crazy. But that was in the past. However, if Marcy's plan was successful, maybe in the near future as well?\n\nShe slipped into five-inch matching red pumps she hadn't worn in years, and practiced walking a little... feeling horny and sexy as fuck.\n\nShe was startled when her phone rang. It was Ralph. She answered, as she admired her looks in the full-length mirror, \"Hi.\"\n\n\"Hey, honey,\" Ralph greeted, having felt like a complete shit ever since standing her up on their anniversary, especially because he'd promised to be home. After a night of drinking while watching strippers, and listening to the other married men bitch about how their wives never gave them head anymore, and how they treated the rare fuck they agreed to as if they were making a major sacrifice, he realized just how lucky he was. \"What are you doing tonight?\"\n\n\"My intern is coming over for some bonding,\" Judy answered, smiling to herself at her strictly truthful description.\n\n\"Really?\" Ralph asked, his wife not one to bring her work home. And never one to socialize with her staff.\n\n\"Yes, I've realized I've been a bit of a bitch at work, and I'm trying to turn over a new leaf,\" Judy answered, again telling the truth, just not all of it.\n\n\"Well, I hope you have fun,\" he said, still a little surprised by his wife's plans.\n\n\"I imagine I will,\" Judy said, wondering what exactly Mistress Marcy and Master Ryan had in store for her.\n\n\"Will she be there soon?\" He asked.\n\n\"Yeah, any minute,\" Judy said.\n\n\"Well, give me a call when she leaves,\" he suggested.\n\n\"Okay,\" Judy said. \"If it's not too late.\"\n\n\"Planning a wild night?\" Ralph joked.\n\n\"Yeah, a real all-nighter,\" Judy joked back, her husband knowing she wasn't a night owl.\n\nThe doorbell rang.\n\n\"She's here,\" Judy said, excited to see her... and also him....\n\n\"You'd better scoot, then. Love you,\" he said.\n\n\"Love you too,\" she replied, and as she hung up, she meant it. She did love him, but she was tired of wondering whether love alone was enough. But again, perhaps that would all change on Friday when he returned home, and if her training with Marcy was successful, she'd be able to astonish the hell out of him!\n\nShe went to her door and answered it just as she was dressed, not even considering the scandalous possibility of it not being Marcy and Ryan... but luckily it was.\n\n\"Shit, slut, you look good enough to eat, and fuck, and treat like a cheap tramp,\" Marcy said.\n\n\"As do you,\" Judy said, Marcy wearing an extremely short and lowcut black cocktail dress, black nylons and thigh high black boots.\n\n\"You both look fucking hot,\" Ryan said, slapping his fianc\u00e9e's ass.\n\nJudy said as formally as she could manage, \"Master and Mistress, welcome to my humble abode.\"\n\nThey all walked in and Marcy said, taking a 360 journey around her pet, easily her most voluptuous one ever, \"That... is one sexy outfit!\"\n\n\"Thank you, Mistress,\" Judy said, enjoying the compliment and the lusty looks she was receiving from both her Mistress and Master.\n\nMarcy squeezed the big booty. \"I mean this succulent outfit shows off every fucking juicy curve you have.\"\n\n\"And I have a lot of curves,\" Judy joked, proud to know she had extra cushioning in all the right places.\n\n\"Fuck yes, you do,\" Marcy agreed, reaching around from behind and cupping her huge tits. \"Now sadly, we don't have a lot of time tonight, since I forgot we're meeting some friends for drinks at eight.\"\n\n\"Oh,\" Judy said, clearly disappointed.\n\n\"But don't worry,\" Marcy said, giving each nipple a pinch.\n\n\"Oooooooh,\" Judy moaned.\n\n\"We'll make the time memorable,\" Marcy assured her, next giving each nipple a little twist.\n\n\"Okay,\" Judy moaned again.\n\n\"So let's go to your bedroom right away,\" Marcy said.\n\n\"Okay,\" Judy agreed, knowing she'd agree to anything that came out of this young woman's mouth.\n\nAs Judy led the extramarital couple to her intramarital bed, Marcy explained, \"So the plan for the rest of the week is to get your ass accustomed to stretching around cock, so it can happily welcome your man's long cock as soon as he returns, and therefore... blow his fucking mind sky high!\"\n\n\"That's in only three days,\" Judy pointed out.\n\n\"Yes, it certainly is,\" Marcy agreed, as they reached the bedroom. \"Nice bed. Ryan, I told you we need a king-sized bed.\"\n\n\"Especially for foursomes,\" Ryan agreed, speaking for the first time since they'd arrived. However, his cock was obviously rock hard from his admiring this thick hot MILF. Apparently he was a man of few words.\n\n\"Exactly,\" Marcy said.\n\n\"But it's too big for a couple that doesn't fuck,\" Judy said, \"since unless we make the effort, we don't even touch each other in bed.\"\n\n\"Well, that is what we'll soon be changing,\" Marcy assured her, as she grabbed Judy's hand, led her to the bed, and pushed her backwards onto it.\n\n\"Now,\" Marcy said, as she straddled Judy's face while facing forward, \"we'll begin your anal training with a small plug for tonight.\"\n\n\"Okay,\" Judy agreed with a slight hesitation, as the pretty wet pussy hovered above her.\n\n\"And since you've cheated on your man with my man and we plan on your continuing to do so, I'll make a point of getting your man to cheat on you with me at least once,\" Marcy promised. \"If you don't mind, of course.\"\n\nAs Judy began to lick the sweet pussy, this made a lot of sense to her. \"Certainly Mistress, please be my guest,\" she agreed mindlessly, as she licked some heavenly nectar.\n\n\"I'm curious what nine and a half inches will feel like,\" Marcy said.\n\n\"Really fucking full,\" Judy said, between licks, \"I think you're going to love it!\" And then she felt her legs being parted as they dangled over the end of the bed.",
        "\"I hope you don't mind, but I think Ryan wants to fuck that wet pussy of yours again right away,\" Marcy said.\n\n\"You both own my pussy, Mistress,\" Judy responded, deciding that from now on, she'd allow Marcy to make all of her sexual decisions for her.\n\n\"Good answer,\" Marcy said, just as Ryan slid his fat cock into Judy's wet pussy.\n\n\"Ooooooooooh,\" Judy moaned, as her pussy was stretched again by the fattest fucking cock ever.\n\n\"Yes, Ralph is going to fuck your ass so good on Friday,\" Marcy said, as her man began fucking her pet vaginally.\n\n\"Oh God,\" Judy moaned, trying to focus on licking the pussy above her face, while also feeling the pleasure inside herself rising quickly.\n\n\"We can even set up a live feed so we can watch you,\" Marcy suggested.\n\n\"Yeah, I really want to see that,\" Ryan added, as he began fucking the MILF's tight pussy.\n\n\"Oh, God,\" Judy moaned, unsure how that could come to fruition, yet not worrying about the future, since she was so completely consumed by the present. Delicious pussy above her, amazingly fat cock inside her... orgasm rising quickly. Heavenly!\n\n\"Or maybe we could just have a free for all foursome fuck fest,\" Marcy speculated, as she enjoyed the eager, although reckless and random tongue licking from her pet.\n\n\"Yeah, I'd love to see you taking nine inches in that ass of yours,\" Ryan enthused.\n\n\"Nine and a half,\" Judy corrected between her licks and moans... her orgasm already about to erupt... after only a minute of cunt-stretching fucking.\n\n\"Yeah, I'd love to feel that much cock up my asshole,\" Marcy moaned, imagining such a long cock stuck deep up her ass.\n\n\"Oh fuck,\" Judy said, the visual of her man fucking Marcy really turning her on. She couldn't explain it, in the past she'd always been extremely jealous of any woman who even glanced at her husband that way, and had refused any sort of threesome when a couple of possibilities had presented themselves in their younger, wilder days, and yet now she considered the idea delicious.\n\n\"Do you want to watch Ralph hammering my asshole?\" Marcy asked.\n\n\"Yesssssssss,\" Judy mindlessly agreed, her orgasm imminent, willing to agree to anything Marcy suggested, no matter how crazy, and this was fucking crazy!\n\n\"While I hammer yours on the same bed... this one,\" Ryan embellished, while really fucking her hard and deep.\n\n\"Oh yeeeeees!\" Judy screamed, sounding like she was agreeing to the fat cock sodomy, but actually she was screaming from the orgasm that was hitting her like a ton of bricks!\n\n\"I think she likes it, and she'll be up for absolutely anything we propose,\" Marcy mused. \"Now let's show her what your cock buried in an asshole looks like.\"\n\nJudy's eyes went wide, but she quickly realized it wasn't her ass about to get fucked, as Ryan pulled out, left the room for a moment, Judy assumed to lube up his cock, returned and got onto the bed, straddled her Mistress, and slid his cock all the way into her ass with no hesitation whatsoever!\n\n\"Oh yes, stretch my asshole with your fat cock,\" Marcy screamed, the initial penetration always a mixture of pleasure and pain, both of which she loved, since his cock was just so... fucking... fat!\n\nJudy licked the pussy above her as she tried to peer around her to see the cock in Marcy's ass.\n\n\"Oh yes, fuck my ass, fuck it hard,\" Marcy moaned, as she began talking nasty, like she always did when she had a cock in her ass.\n\n\"Do you like this, slut?\" Ryan asked.\n\n\"Yes,\" both Judy and Marcy replied in unison.\n\nRyan laughed, as he slammed his entire cock into his hot fianc\u00e9e, \"Priceless!\"\n\n\"Just keep drilling my asshole and show our slut how good an ass fucking stud you are,\" Marcy said, her orgasm rising from Judy's erratic licking and the deep ass drilling.\n\nJudy licked and looked, not ever catching a decent glimpse of the cock in the ass, just Ryan's body moving up and down, and his big balls appearing, disappearing and reappearing very close to her chin.\n\n\"Yes, harder, fuck my ass, pound it, pound it good,\" Marcy rambled, by now bouncing back to take her man's cock as deeply as she possibly could.\n\nJudy gave up on trying to lick such a moving target, and just watched as best she could as Marcy got her ass drilled.\n\n\"Oh yes, oh fuck, oh God, fuck, fuck, fuuuuuuuck!\" Marcy moaned and then screamed, although those words took over thirty seconds to utter accompanied by another dozen deep drillings until her orgasm hit, and she sprayed her cunt cum all over Judy's face and her sexy new lingerie. And Judy noticed she certainly wasn't apologetic about squirting! Maybe all the best sluts did it!\n\nJudy lapped up the juice as best she could while Ryan kept drilling Marcy throughout her orgasm, and she then collapsed forward, giving Judy a much better visual.\n\nJudy still couldn't see the asshole, but now she could clearly see that fat cock furiously pistoning in and out of it.\n\n\"Come in my ass, baby, give me that load,\" Marcy begged, still enjoying her orgasm, and also looking forward to her pet eating the cum out of her ass.\n\n\"Oh fuck, take it, slut,\" Ryan grunted, as he spewed a big load into his woman's asshole.\n\n\"Oh yessss,\" Marcy moaned, loving the sensations of cum filling any of her three holes... but in the ass it really soothed her after an intense orgasm.\n\nOnce he was spent, Ryan pulled out, and Marcy immediately ordered, lifting a leg to allow Judy to slide out from underneath her, \"Now get in there and eat Master's cum out of my asshole, slut.\"\n\nJudy rolled over, sat up, and got behind her Mistress as Ryan backed away, and she gasped when she saw the huge gaping hole... how could the tiny hole she'd been examining and licking this afternoon even get that big? And now that it had, how could it ever recover? It looked completely and permanently destroyed!\n\n\"No sightseeing this time, just suck the cum out, Judy,\" Marcy ordered.\n\n\"Yes, Mistress,\" Judy said, this new instruction not seeming at all disgusting after she'd already eaten Marcy's asshole this afternoon. She leaned forward and slid her tongue inside the huge gaping hole, and swirled it around.\n\n\"Oh yes, rim it just like that,\" Marcy said, wishing she could watch.\n\nJudy obeyed, and did reach for and extract a little cum, but not much.\n\n\"Lie down,\" Marcy said after about a minute.\n\n\"Yes, Mistress,\" Judy obeyed, those two words the ones she now seemed to use far more than any others.\n\nJudy lay down, Marcy quickly straddled her face, and now the cum oozed out of her ass and dripped onto her pet. The cum first hit her chin, so she shoulder-walked slightly down to catch the cum from the ass directly in her mouth... the act so submissive, so nasty, and thus so delicious.\n\nAfter a few seconds, Judy lifted up her head and sucked, attempting to retrieve more of the salty seed from the sweaty asshole.\n\n\"Such a hungry ass eating cum slut,\" Marcy moaned, as she savoured the slutty action.\n\n\"We need to get going,\" Ryan urged her.\n\n\"Yeah, yeah,\" Marcy sighed, as she reluctantly climbed down off her pet to stand on the floor.\n\nJudy lay there, exhausted, but she managed to lift herself onto one arm, \"That was totally wild!\"\n\n\"And we're just getting started,\" Marcy smiled, as she went to her purse.\n\n\"That idea both excites and scares me,\" Judy said, in a playful way.\n\n\"Oh, just you wait,\" Marcy said ominously, returning with a small butt plug and a fingerful of lube. She lubed up the plug and said, \"This will remain in your asshole at all times except when you need to, you know, until I exchange it for a larger one sometime tomorrow.\"\n\n\"Okay,\" Judy said, this project somehow not seeming all that strange anymore.\n\n\"So,\" Marcy began, as she brought the small plug to her pet's ass, \"you'll need to wear panties tomorrow.\"\n\n\"I have permission to wear panties?\" Judy asked.\n\n\"You do, my pet,\" Marcy said, \"probably until Friday evening,\" as she slid the plug into her pet's ass.\n\n\"Ooooooh,\" Judy moaned, a little pain coursing through her, but it was more of a discomfort.\n\n\"Tomorrow you'll get a bigger one,\" Marcy said, kissing her pet's pussy lips, making her quake.\n\n\"You're sure you have to leave?\" Judy asked, not wanting this wild encounter to be over.\n\n\"Sorry, but we do,\" Marcy said, as she got off the bed.\n\nJudy slowly got off the bed, the thingy in her ass feeling very weird. \"I'll walk you out.\" Then as she attempted to walk, the toy moving inside her, she joked, \"Or perhaps I'll have to waddle you out.\"\n\n\"It takes a little time to get used to,\" Marcy said, \"but very like a thong, eventually it feels as natural as breathing.\"\n\n\"I'll have take your word for it for now,\" Judy said, it not feeling anywhere near as natural as breathing.\n\nJudy followed Master and Mistress out of her own master bedroom, and to the front door.\n\n\"Tomorrow your training really begins,\" Marcy smiled.\n\n\"So let me see: today I was fucked by your man, twice before taking a huge facial, then later on I ate your ass... twice... including swallowing down an anal cream pie, and now I'm waddling around totally awkwardly with a butt plug shoved up my ass. And all of that doesn't qualify as a beginning?\" Judy smiled wickedly.\n\n\"Okay, okay,\" Marcy laughed, \"your training continues tomorrow.\"\n\n\"That sounds more accurate,\" Judy allowed.\n\nMarcy leaned in and kissed her pet, just lightly this time, and then sauntered out with her man.\n\nJudy closed the door and rested, leaning against it.\n\nHoly fuck... things had officially gotten out of hand!\n\nShe went to bed, and was so exhausted she immediately fell asleep, totally forgetting she'd promised to call Ralph.\n\n.....\n\nWEDNESDAY MORNING\n\nBefore leaving for work, Judy practiced walking around the house with the plug in her ass. She also practiced sitting down with the plug in her ass.\n\nAt work, she had meetings all morning, which didn't require any walking at all since they were all held in her office, and it wasn't until lunchtime she was summoned to the basement.\n\nRyan was the only one there, and he asked, \"Hungry?\"\n\n\"Starving,\" Judy said, walking immediately to the stud, dropping before him, and taking out his cock.\n\n\"You're already very well trained,\" he observed, as she began stroking his cock.\n\n\"And your cock has already become my fucking addiction,\" Judy replied, and without needing any prompting, she took it into her mouth and began sucking.\n\n\"I still can't figure out why your husband doesn't fuck you at least once every day,\" Ryan added.\n\nHe had no idea how attractive that simple statement made Judy feel. It was the ultimate compliment. It was exactly what she needed to hear, especially from a man.\n\n\"I'm serious,\" Ryan said, as he watched the hot older woman bobbing on his cock. \"You're beautiful, you're a great cock sucker, and best of all, you're a nasty slut.\"\n\n\"I bet you say that to all the girls,\" Judy replied coyly, allowing the heavenly cock to slip out of her mouth for a brief moment. She had no idea which movie or television show that quote, or some version of that quote came from.\n\n\"No, you're something unique,\" he said, as he slid his cock back between her great cock sucking lips and began to face fuck her. He really loved fucking a mouth, almost as much as he loved fucking a big booty's back door.\n\nJudy focused on breathing through her nose, having long since become able to take all of her husband's nine and a half inch cock into her throat without gagging, so this seven inch one, even though it was a lot fatter, wasn't much of a challenge. But it was very satisfying!\n\nHe pumped his cock in her mouth for three or four minutes, impressed by how easily she was taking his entire cock, before he grunted and deposited his load down her throat... Marcy had given him crap for getting so much cum on the slut's dress yesterday.\n\nJudy swallowed the load, always loving the smooth sensation of cum gliding down her throat and filling her belly.\n\nHe pulled out and said, \"You really are a hot nasty bitch.\"\n\n\"Aww shucks! You know just how to woo a slut,\" Judy retorted playfully, licking his cock head where a drip of cum still remained.\n\nTwo hours later Judy was responding to emails when Marcy marched in and ordered, \"Get up and bend over, sexy.\"\n\nJudy got up and walked around her desk, the position she went to when shifting gears from boss to submissive.\n\n\"How is your ass feeling?\" Marcy asked, as she walked over and squeezed the big cheeks.\n\n\"Good,\" Judy answered. \"It took a while to get used to it, but I got there.\"\n\nMarcy pulled the small plug out and admired the small gaped hole. \"Well, now your asshole looks just so fuckable.\"\n\n\"Sweet words I never imagined an intern saying to me,\" Judy laughed, as she felt Marcy's tongue swirling around her butt hole, and even going slightly inside.\n\n\"Such a delicious little asshole,\" Marcy continued, worshipping the hole... a gaping ass her kryptonite. She was here to install the second and larger plug in her pet's asshole, but she couldn't resist doing a little dirty dining first.\n\n\"Eat my asshole, Mistress,\" Jane moaned.\n\n\"You're giving me orders now?\" Marcy asked archly, in between tonguing the small hole.\n\n\"I'm so sorry, Mistress, I thought you'd enjoy my nasty demand,\" Judy hastened to apologize.\n\n\"I'm just kidding,\" Marcy said with a giggle. \"One of the very first things I mentioned in that very first message I sent you was that I'm a switch. And now that we both know I have your complete loyalty, whenever my face is buried in your asshole, you may order me to do anything you want. I think we'll both get off on it.\"\n\n\"Mmmmmm,\" Judy moaned, enjoying the tongue in her ass, and this opportunity to be a little bossy. \"Then, my sweet slut of a switch Mistress, get that tongue as deep in my asshole as you can, and tongue fuck it.\"\n\n\"You nasty bitch,\" Marcy said playfully, as she obeyed her pet's order.\n\n\"Yes, lick my hole, fuck it,\" Judy said, enjoying the physical pleasure and this moment of role reversal.\n\n\"I could eat this asshole all day,\" Marcy said, as she reluctantly stood up, once again admiring the small gaping hole, \"But alas, I have a meeting in five minutes, and you have a second plug to start wearing.\"\n\n\"Aren't I in the meeting too?\" Judy asked, as she turned back to see Marcy pull a much larger plug from her purse... easily double the size of the first one in all dimensions.\n\n\"Yes, you are,\" Marcy said.\n\n\"That isn't going to fit,\" Judy said.\n\n\"Trust me, it will,\" Marcy reassured her as she lubed the plug generously.\n\n\"But I can't wear that into the meeting and be able to pull off pretending to be normal,\" Judy said, even if it did somehow fit, but how the fuck could it possibly fit?\n\n\"You can and you will,\" Marcy said, as she positioned the plug at the slightly gaped hole.\n\n\"I'm feeling really nervooooooous,\" Judy started to say, as she felt her ass unnaturally widened as the plug slid inside her.\n\n\"See? It fits,\" Marcy said jubilantly, since the medium sized plug was now lodged in her boss's asshole.\n\n\"Holy fuck,\" Judy said, this time feeling a lot more discomfort than yesterday morning's brief fingering and yesterday evening's first plug,\n\n\"This one will take some time to get used to,\" Marcy said, as she pulled Judy's panties up for her pet.\n\n\"That's quite an understatement,\" Judy said, slowly standing up straight... her ass really burning.\n\n\"Don't worry,\" Marcy said. \"Be a good butt slut, and I'll have a special treat for you later on today.\"\n\n\"What is it?\" Judy asked, as she began walking around with the plug in her ass... this one moving around more as she did... inflicting some very noticeable pain, and just a little bit of pleasure.\n\n\"Well, it's eight inches in length, and I strap it around my waist.\"\n\n\"Mmmmmm,\" Judy said, as she continued walking around, continued trying to get used to the oversized object in her ass.\n\n\"Yes, you could consider it an alternate version of a double penetration,\" Marcy said.\n\n\"Really? That's on my bucket list!\"\n\n\"In time, I hope to help you check off everything on your fuck-it list,\" Marcy said, enjoying the sight of her pet duck-walking around with the plug in her ass.\n\n\"Fuck-it list?\" Judy laughed. \"I love that.\"\n\n\"Okay, it's time to go,\" Marcy said.\n\n\"I'm still not sure I can pull this off,\" Judy said, not at all comfortable with the larger plug in her ass.\n\n\"I have faith in you, my nasty ass slut,\" Marcy said, kissing her quickly and slapping her ass.\n\n\"Ooooooooh,\" Judy yelped, as the plug slammed deeper into her ass for a moment.\n\n\"Sorry for not being sorry,\" Marcy winked, and sauntered out.\n\n\"Fuck,\" Judy whispered to herself as she walked back and forth for another minute before heading off to a meeting she was supposed to lead. And she was supposed to do it coherently.\n\n.....\n\nWEDNESDAY AFTER WORK:\n\nJudy was waiting in her office for Marcy to arrive. She tried to do some work, but all she could think about was getting fucked by Marcy with her strap-on like she'd promised.\n\nAs she was waiting, Ralph called.\n\n\"You forgot about me last night,\" he said.\n\nShit! She had. Judy replied, \"Sorry, it was a long night, and I was exhausted, so I crashed without even thinking.\"\n\n\"I see,\" Ralph said, just as Marcy and Ryan walked into her office. \"I hope it was a good night.\"\n\n\"Yeah, it really was,\" Judy said, as she mouthed, 'It's Ralph.'\n\nMarcy grinned evilly as she locked the door, pulled her strap-on from her large bag, snapped her fingers and pointed to the desk.\n\nRyan took the snapped finger as being for him, so he briskly pulled his pants down, pulled out his dick, and hopped onto the desk just as Judy stood up.\n\n\"Well, what I'm really calling about, is I need to apologize,\" Ralph said.\n\n\"Apologize?\" Judy asked, and she walked around her desk as she watched Marcy strip off her dress and fasten the strap-on around her waist. Judy took note of Ryan's hard fat cock saluting his women. \"What for?\"\n\n\"Put it on speakerphone,\" Marcy whispered.\n\nAlthough nervous, she obeyed. \"Honey, I'm going to put you on speakerphone, since I'm working on an analysis to satisfy a big client with some issues.\"\n\n\"You're still at work?\" Ralph asked.\n\n\"Yeah, since you're out of town, I figured I might as well stay late and get some extra work done,\" Judy said, as she stroked Ryan's cock... feeling guilty... but also wicked.\n\n\"Well don't work yourself too hard,\" Ralph said.\n\n\"Oh, I'll try not to,\" she said, as she felt Marcy's hands lifting up her dress. \"So, you were about to apologize for something.\"\n\nRalph responded, unaware that his wife was licking a fat phallus, \"Well, I want to start out by saying not coming home to make love with you on our anniversary was a really shitty thing for me to do.\"\n\n\"You mean when you didn't come home and fuck me?\" Judy asked, as she felt Marcy pulling her panties down... she wasn't sure whether she was getting her pussy or her ass fucked... forgetting briefly how Marcy had already hinted it would be her pussy... in some kind of unique double penetration.\n\n\"Yes, I failed to fuck you with my big fuck stick,\" Ralph said, knowing his wife loved his huge cock, dirty talk, and alliteration, all three.\n\n\"Exactly,\" Judy said, as she felt the strap-on poking at her pussy. \"You haven't fucked me in a very long time, you know.\"\n\n\"I know,\" he sighed, just as Marcy slid her cock into her pet's pussy.\n\n\"Ooooooh,\" Judy moaned, unable to remain silent.\n\n\"Are you okay? Ralph asked.\n\n\"Yes, but your dirty talk is getting me horny,\" Judy said.\n\n\"At work?\" Ralph said, this surprising him.\n\n\"Yes, my pussy is all wet for you,\" Judy said, as Marcy began slowly fucking her pussy and Judy stroked Ryan's cock.",
        "\"Are you touching yourself?\" Ralph asked.\n\n\"I'm actually about to fuck myself with a dildo,\" Judy said, just before she deep throated Ryan's cock for a moment.\n\n\"You brought a dildo to work?\" Ralph asked, his wife continuing to astonish him.\n\n\"That's what not getting fucked for several months can do to a woman,\" Judy moaned, as Marcy bucked her hips deep into her... then Judy quickly deep throated Ryan's cock again.\n\n\"I'm so sorry,\" Ralph said, feeling so guilty, although his cock was now hard and gripped in his hand.\n\n\"If you're looking to make amends, you'd better be ready to fuck me good and hard when you get home on Friday,\" Judy warned, as Marcy began fucking her faster.\n\n\"I promise,\" he said, stroking his cock.\n\n\"I've heard that story before,\" Judy moaned, trying to focus on the conversation while getting her pussy banged, her ass passively plugged, and a very fat cock assaulting her mouth every few seconds.\n\n\"I mean it this time,\" he said.\n\n\"Why wouldn't you ever fuck me before?\" Judy asked.\n\n\"It's complicated,\" he said.\n\n\"Are you jerking off?\" she asked.\n\n\"I am,\" he said.\n\n\"Are you imagining yourself fucking me?\" Judy demanded, as Marcy fucked her pussy, and now began pulling the plug out and pushing it back in.\n\n\"I am,\" he admitted, although truth be told, it was her ass he was imagining himself balls deep in.\n\n\"You're pounding me from behind with your big cock?\" she asked, the double fucking really driving her wild, as were the brief air tight moments when she had Ryan's cock in her mouth and was surfing atop the euphoria of doing all this while she was on the phone with her oblivious husband.\n\n\"Fuck yeah,\" he moaned, stroking his cock, imagining her on all fours as he drilled her from behind.\n\n\"You're in my ass, aren't you?\" she accused wickedly, her orgasm close and wanting to shock him.\n\n\"W-w-what?\" he stammered.\n\n\"You never fuck my cunt anymore, because you want to fuck my ass, right?\" Judy asked, as both plastic cocks went deep into her at once and then back out... making her feel so fucking full.\n\n\"Judy...\" he said, but then had no thoughts to continue a sentence with, shocked by the accusation... even though it was true.\n\n\"Am I wrong?\" Judy asked.\n\n\"No, dear,\" he admitted, feeling like a complete asshole.\n\n\"So what you'd really like to do is fuck my ass and tear it apart with your huge fucking cock?\" Judy demanded, her orgasm imminent.\n\n\"And that visual is turning you on?\" he asked, astonished yet again.\n\n\"Yeah, baby, I'd love to feel you tearing my asshole apart with your huge fucking cock,\" Judy moaned, before pausing to bob on Ryan's cock with a few hungry bobs.\n\n\"Oh, God,\" Ralph groaned, his balls about to erupt.\n\n\"Fuck me, fuck my ass,\" Judy moaned, as Marcy kept pumping both cocks in and out of both holes.\n\n\"Oh, fuck,\" Ralph grunted, spewing a massive load straight up in the air.\n\n\"Yessssss, fill meeeeeee,\" Judy screamed, as she came mere seconds after her husband did.\n\nRyan then hung up on Ralph and said, \"Now get sucking seriously, slut.\"\n\n\"Yes, Master,\" Judy obeyed, as she devoured his fat cock and bobbed like a complete cock slut... as Marcy pushed the plug back into her asshole and left it there, while she kept fucking her pet's pussy.\n\nRalph called back.\n\n\"Don't answer that, slut,\" Ryan ordered, and Judy didn't slow down while taking all seven inches with each deep bob.\n\n\"The slut is airtight,\" Marcy said, as she kept fucking her pet, deciding to give her multiple orgasms.\n\n\"Next time it'll be my cock in one of those holes,\" Ryan moaned, as the slut really worked his cock over.\n\nJudy did ignore the phone, since she really wanted Ryan's load.\n\n\"As you wish,\" Marcy said to her fianc\u00e9, having already decided that tomorrow she'd be the first person ever to fuck Judy's big booty.\n\n\"Don't stop, slut,\" Ryan said, as she continued deep throating his cock with smooth desire.\n\nJudy sucked.\n\nJudy got fucked.\n\nJudy then swallowed when Ryan grunted, and unloaded his load into the MILF's vacuuming mouth.\n\n\"Mmmmmm,\" Judy moaned, loving the feeling of the big load gliding down her throat.\n\n\"He loves coming in your mouth,\" Marcy said fondly, sweating heavily from the workout of deep drilling her pet.\n\nOnce Judy had swallowed the entire load, she sat up and begged, \"More, fuck me more.\"\n\n\"Not the most articulate begging,\" Marcy laughed, although she did indeed fuck her more.\n\n\"Just give me that cock,\" Judy demanded, a second orgasm already rising, even as the first was still fading away.\n\n\"That's better,\" Marcy said, as she pounded her pet's pussy as deep as she could... as hard as she could.\n\n\"Bang the bitch, baby,\" Ryan said, always finding that watching his wife fuck another woman with a strap-on was really fucking hot. He'd be banging her ass deeply just as soon as they arrived home.\n\n\"Yes, bang the evil bitch, Mistress,\" Judy played along, as she moved her hands onto Ryan's legs.\n\n\"Fuck, this is a real workout,\" Marcy said, sweat dripping down her forehead.\n\n\"Oh God, Mistress,\" Judy moaned, her second orgasm rising.\n\n\"Come, slut,\" Ryan ordered.\n\n\"Names, please more names,\" Judy begged, loving the name calling.\n\n\"Come, our bimbo three-hole MILF fuck toy,\" Ryan verbally assaulted her.\n\n\"Come, our cunt licking, cock sucking, ass taking slut,\" Marcy added.\n\n\"Oh fuck, I love being your fucking bimbo fuck sluuuuuuuuut!\" Judy screamed, as her second orgasm in just a few minutes hit her.\n\n\"Such a filthy slut,\" Ryan said, as Judy came and squirted all over her legs as well as the floor.\n\n\"Such a good girl,\" Marcy purred, as she slowed down and began caressing her pet's back.\n\n\"So good,\" Judy whimpered weakly.\n\nMarcy pulled out and watched more cum leaking out of her pet.\n\n\"We need to get going,\" Ryan said, getting off the desk, just as Judy's phone rang again.\n\n\"Keep the plug in that shit hole of yours until I remove it tomorrow,\" Marcy added.\n\n\"Yes, Mistress,\" Judy agreed, as her phone rang yet again.\n\n\"You may answer that now,\" Marcy said, giving her a quick kiss.\n\n\"Thank you,\" Judy said, feeling her cum still leaking out of her while she reached for her phone. \"Hi, honey.\"\n\n\"Hey,\" Ralph said, unsure what to say now that she'd answered.\n\n\"Still horny?\" Judy asked, somehow still horny even after her two intense orgasms.\n\n\"Not really,\" he said. \"Are you?\"\n\n\"Maybe,\" she said coyly, as she sat down on her chair and yelped, forgetting she had the plug in her ass.\n\n\"You okay?\" he asked.\n\n\"Yeah, I just sat down awkwardly,\" she explained, which was kind of true.\n\n\"Why didn't you answer the phone?\"\n\n\"Marcy showed up.\"\n\n\"Marcy?\"\n\n\"My intern.\"\n\n\"Oh. Did she?\"\n\n\"I think she suspected I was doing something.\"\n\n\"Oops.\"\n\n\"Yeah, oops.\"\n\n\"So that was some really crazy roleplaying.\"\n\n\"I figured it would get you off,\" Judy said, wondering if she could really get stretched out enough to take his nine and half inches in her ass by Friday... and she pondered how these crazy past three days hadn't only brought her sexual relief and anal awakening, but could perhaps result in rekindling her sex life with her husband, and saving their marriage.\n\n\"It was totally unexpected,\" he said. \"Your attitude about our doing some anal play has always been 'Absolutely not'.\"\n\n\"Yeah, but recently I've been doing some reading about it.\"\n\n\"You have?\"\n\n\"Yeah,\" Judy said, as she stood up and headed out of her office, but remained on the phone.\n\n\"And?\"\n\n\"And you'll just have to wait until you come home on Friday to learn any more, because nothing's for certain yet.\"\n\n\"That's an eternity away,\" he complained, even though it was under forty-eight hours.\n\n\"I will tell you I have a plug in my ass right now,\" she revealed wickedly.\n\n\"No!\" he gasped.\n\n\"Yeah, but it's nowhere near as big as your fucking cock,\" Judy pointed out.\n\n\"I'd be gentle,\" he said.\n\n\"Yeah, you're really known around our house for your gentle fucking,\" she teased.\n\n\"Butt... I've never heard you ask me for any gentle fucking,\" he teased right back.\n\n\"I've never heard you complain.\"\n\n\"True,\" he said, as there was a knock at his hotel room door. \"Ah, shit.\"\n\n\"What?\"\n\n\"Dave is here to pick me up.\"\n\n\"Where are you two off to?\"\n\n\"Drinks.\"\n\n\"So strippers too, then,\" Judy accused. Not that she minded.\n\n\"There may be some strippers there,\" he chuckled, laughing at how well she knew him.\n\n\"Well, have fun.\"\n\n\"Love you.\"\n\n\"Love you too,\" Judy said by rote, although she actually meant it, before she hung up. As she got into her car, she couldn't believe how quickly her life had changed, and how those changes weren't yet finished.\n\nEnd of Chapter 2\n\nThe final chapter The Intern: Anally Yours will be coming soon."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal",
        "lesbian",
        "submissive",
        "slut",
        "stockings",
        "milf",
        "older-younger",
        "threesome",
        "toys",
        "silkyjasminewalker"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/the-intern-an-anal-training"
}
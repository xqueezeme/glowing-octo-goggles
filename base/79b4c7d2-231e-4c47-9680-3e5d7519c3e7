{
    "title": "The Crystal Dildo",
    "pages": [
        "She lay against me on the couch in the middle of the night. Her head nestled in the crook of my neck and shoulder. Her left hand rested on my chest, and I could hear her breathe softly as I ran my left hand through her soft, curled locks. \n\nSometimes, her voice was strong and unwavering. Other times, it was plaintive and girlish. It was more that way now. \n\n\"Tell me a story,\" she whispered. \n\nI laughed as gently as I could. I did not want to shake her head, which rested so comfortably on me. \n\n\"What kind of story would you like to hear?\"\n\n\"I want to hear a dirty story. About a dirty princess.\" \n\nShe's an amazing girl. It's hard to imagine anything better than just cuddling on the couch with her. And I'll do anything to preserve this moment just one second longer. \n\n\"Once upon a time, there was a beautiful princess. She was named Meghan, and from early on in her youth, it was widely acknowledged that she was the most beautiful woman in the world. Her crystal blue eyes crackled with an intelligence that only added to her radiance. \n\nWhen the princess' eighteenth birthday arrived, she decreed that whoever supplied her with the present that pleased her most would win her hand in marriage. \n\nA great uproar seized the land, as men of all ages prepared what they believed were the best gifts. \n\nAfter sitting through hours of the same boring things- jewels, deeds, and clothes- the town glassblower presented his gift to the princess. It was an exquisitely modeled glass castle. There was a miniature castle placed inside a glass ball filled with fluid. The water-globe formed the base for the larger, finely detailed glass castle. Its beauty was breathtaking, and nearly impossible to describe. \n\nThe princess shrieked with delight, and then looked the glassblower over. He was nearly fifty years old, with a large gut and balding hair. A widower for many years, he was known for ogling the town's young ladies. She found herself thoroughly unattracted to him. She was bound to her word, though, and it was clear that his gift was her favorite so far. She silently prayed that someone would come up with something better.\n\nSeveral hours later, the princess had sat through more mounds of jewels and clothes, and one golden egg that turned out to be painted when it hatched in front of her (that had brought a quick beheading to the farmer who presented it!), the princess was becoming increasingly worried. The gifts were all unoriginal and boring, and the glassblower was staring right through her clothes. Her skin crawled at the thought of his sagging flesh on her own taut body.\n\nThe last gift was from the glassblower's son. It was a glass cylinder of some type. Nearly a foot in length, it seemed to be made of the finest clear crystal. In its center was a massive, well cut emerald, which gave the entire piece a soft green glow when held in the right light. The cylinder was very thick- the princess could not fit her hand around it, but it was surprisingly light. At the front (she assumed it was the front), it tapered into a curved nose. The glassblower's son presented it to her on a velvet pillow. \n\nNo one in the court had seen such an item before. It was very beautiful, but not more so than the glassblower's castle. It was simply a crystal cylinder with an emerald inside.\n\n'What is this?' asked the princess, clearly bewildered.\n\n'It,' replied the glassblower's son. 'Is a pleasure stick.'\n\n'A pleasure stick?' repeated the princess. 'Whatever does it do?' \n\n'You will know,' said the glassblower's son.\n\nThe court was mystified with the last gift, and departed with a buzzing that the glass castle was clearly the best gift. They anxiously awaited the news the next day of what the princess had chosen. \n\nThat night, the princess Meghan wept softly in her chamber. She had thought her plan would allow her to marry a crafty and wise man, but it had backfired! She was going to have to betroth herself to a sickly and disgusting man who was the age of her father. She sniffled and rose from her bed, and padded barefoot across her floor to her royal mirror. \n\nThis body should not be given to a wretched old man like that, she thought. But can I really marry any of the buffoons who gave the other gifts?\n\nShe shrugged her nightgown from her shoulders and gazed at her naked self in the mirror. She was short, barely over five feet tall, and the top half of the mirror was wasted on her. She ran her hands through her long, jet-black hair. It was the same as her mother's, and she grew it out to her waist like her mother did. Her own eyes sparkled back at her. They were still as blue as ever. Her skin was very pale- any more and she would have looked sickly. But she enjoyed her fairness; it made her skin very soft. Her breasts were like two small melons. They hugged her chest, not sagging at all. She could almost fit each one in her hand. No, they certainly weren't large, but they fit her body, and that suited her just fine. Her nipples were as pale as the rest of her. In the candlelight, she had a hard time making out where they began. She reached up and pinched them playfully, and they quickly sprang to life. As they budded, they flushed with color. Pink, like she loved. She loved the way her nipples prominently stood out when erect- they went from pale parts of her breasts to large, pink nubs that demanded attention. She had learned how sensitive they were. Once hardened, it took little more than a gentle brush of them to make her gasp for breath. Her eyes flowed down her tapering body to her hips. Once they had been skinny- skinny like a young boy's. But now they flowed out. They were wide (for her body anyway), and womanly. She ran her hands over the outside of her hips. She loved them. They gave her body a perfect curve. She waggled them back and forth in front of the mirror a few times. Could she give them to that old man? She shuddered. \n\nHer eyes finally landed on her mound of womanhood. It was think and black, like her hair. She had one of her servants keep it trimmed into a fat rectangle. Her lovely black patch was a sign of her womanhood, and she was proud of it. She ran her hand through it and marveled at its softness. She would have to reward her trimming servant the next time she saw her. She cooed softly at the feeling of her fingers in her small, curled hairs. Her natural scent gently wafted up to her nose.\n\nCould she really award all this to the glassblower? Her beautiful mound, so meticulously trimmed? Her tight, pink flesh, which gave off her sweet scent? It had never been touched by anyone, save her. Her maidenhead was still intact. She had felt it, exploring herself. The wall was there, always slick with her wetness, but always giving way to her fingers and not breaking. That most personal piece of skin- property of the glassblower?\n\nShe despaired. \n\nHer gaze went back to the mirror. She was suddenly confused- her skin was supposed to be pale white, not green. Startled, she looked down at herself. She gazed at her black bush for a second, and then inspected the rest of her skin. It was white, as it should be. Relieved, she looked back in the mirror. Why was it green there? She looked around the room, her black hair swinging back and forth. \n\nThen it caught her attention. The\u2026 pleasure stick. She had set it down and forgotten about it. It was refracting the candlelight through the emerald, casting a soft green light around the room. She smiled, and walked over to it.\n\nConfused, she gently picked it up. 'You will know,' the glassblower's son had said. That was rather cryptic. Just holding it in her hands did not give her any real pleasure. It was cold, but that only made her more aware of it. How could this simple thing give anyone pleasure?\n\nStill, it was rather smooth. She ran her hands down its length. It was more than smooth. In fact, it was seamless. Even the glassblower's castle had small seams on it. They were tiny, but they were there. His son was GOOD. And he had made this 'pleasure stick' for her. She smiled again. So far, the greatest pleasure she had gotten from it was the knowledge of how hard he must have worked to make it. \n\nCurious, she headed over to her bed. She flopped herself backwards and bounced a few times. Once more she regarded the pleasure stick in the candlelight. It must have had a purpose. She resolved to find out what it was before she went to sleep that night. \n\n* * * * *\n\nHours later, Meghan was angry. She had tried everything she could think of, and still the pleasure stick sat motionless in her hands. She had talked to it, rubbed it, blown on it- everything. It wasn't magic. It didn't DO anything. How was that supposed to give her pleasure? It was smooth and that was it. \n\nAbsentmindedly, she rubbed it against her bare feet. They had always been extremely sensitive, and she loved to tease them when she was alone and frustrated. It helped her relieve herself. She noticed immediately that the smoothness of the pleasure stick felt good against her soft skin. \n\nIt felt good. \n\nHer frustrations faded as her other senses snapped to attention. Was that it? She now moved the pleasure stick gently and intimately against her feet, feeling the smooth crystal touch her sensitive points. She lay on her back, and pulled her knees to her stomach. Gently, she worked the pleasure stick through her soft, high arches. It brought a wonderful feeling. She began to breath more heavily. \n\nTrying to fit it between her toes proved impossible, but she could tease them with the smooth tip, and she did, sliding it back and forth across the bottoms of all ten of her toes. She gritted her teeth in delight, her nose scrunching in pleasure. She relaxed her body, and began to use the pleasure stick on other parts.\n\nIt danced on her taut belly, caressed her hips, tickled her ribs, and nuzzled her neck. She ground the tip into her nipples, reveling in the sensation of the hard nipples twisting under the crystal. The electricity that ran through her body got more and more intense. She felt it acutely in her hips. They boiled with a yearning she hadn't felt in a long time. But the pleasure stick couldn't go there, could it?\n\nGently, she tucked it in between her feet as she slid her hands down to her pussy. One touch told her what she suspected- she was very, very wet. The long hour of playing with the stick had gotten her incredibly aroused. Her juices flowed freely, smearing the bottom of her ass, and causing her pussy to glisten in the candlelight. Her beautiful black hairs were plastered with her secretions. \n\nIt took only a second for her to decide. \n\nShe reached between her feet, and slowly dragged the pleasure stick from between them, stimulating her arches one last time. Then she placed the curved tip at the sopping entrance to her slit. That sensation alone made her gasp in delight. But she reconsidered. Even with just the slightest pressure, it was impossibly tight. The lips of her pussy were crushed in on themselves by the girth of the pleasure stick. \n\nThe tight pressure felt good, though. Good enough to make her continue. She slowly rolled the tip around her open hole, soaking it with her cream. She was now able to give it more pressure, and the tip sunk in ever so slightly. She inhaled sharply at the feeling of fullness which came along with even slight penetration. \n\nThe princess spread her legs out wide for better leverage. Her bare toes curled against the silk sheets as she slowly worked the curved tip around her wet hole. The pleasurable sensations allowed her to fit just a little more in every time. Leaving what she had inside herself, she sat up to take a look. \n\nHer abs tensed and her breasts jiggled as she rose. There was perhaps an inch of the pleasure stick inside her. The crystal was coated in her cream, and it also shown light green, thanks to the emerald. She could feel the throb of her arousal in her lips as they pressed against the pleasure stick. Her pussy felt impossibly full. She didn't have any idea how she could fit any more of the thick crystal into her shining pussy, even as good as it felt. She ran her fingers through her deep, black bush. A closer inspection showed her that her lips were completely folded in on themselves by the stick's pressure. Bending over herself, she gently pinched her folds, and leaving the crystal stick inside her, she stretched them back out so that instead of being crushed, they sucked on it. That relieved enough of the pressure so that she felt she could continue. \n\nShe flopped backwards on the bed, sighing in ecstasy now that she had discovered a system. Through rotation and gentle pressure, she was able fit more and more of the pleasure stick inside her. \n\nShe had gotten a good three inches inside her- no small feat, considering the massive girth jamming her virginally tight cunt- when she felt a new pressure. It took her a second before she realized it\u2026 it was her maidenhead! \n\nThat tight, flexible flap of skin had long vexed her. She had been able to rub it with her fingers, but she was never able to get any deeper. Her fingers were too short for that. That problem had gone away now. There were nearly nine extra inches of the pleasure stick left. Thanks to her two hours' worth of secretions, she could slide the stick relatively easily inside her clenched pussy, considering its immense tightness. If she focused on relaxing, it was even possible to move it freely. \n\nShe shuddered again at the thought of the slimy glassblower pressing against her there. She had heard the stories about the pain caused by the loss of virginity. Reviled at the thought of him inside her, she vowed that her maidenhead was her own. She clenched her feet hard on the soft sheets, scrunching them under her tiny, curled toes. \n\nTaking a deep breath, she pressed both hands on the end of the crystal shaft. \n\nQuickly, she found that even slight pressure created a pinching sensation that flowed up her spine and into her belly. She had several stops and starts, but each time, the tip of the pain forming made her stop and reconsider. \n\nFinally, acutely aware of the silken fabric rubbing between her small toes, she resolved to break her own maidenhead, regardless of the pain. She rubbed her feet back and forth and took deep breaths, building up her confidence.\n\nWhen she could bear it no longer, her hands once again found the rounded end of the shaft. She pursed her lips, listening to the liquid sounds it made as it moved inside her. She took one deep breath, then two, and her fingers clenched themselves white on the stick, and on the third\u2026\n\nShe pushed inside herself as hard as she could possibly imagine! Unprepared for the excruciating pain, she screamed out in her empty room. Her back arched sharply as the pain burned through her body. Tears formed in her eyes and she writhed across the bed in agony. Her small feet let go of her silken sheets as her legs kicked wildly at nothing. \n\nNow her stomach tensed as she tried to curl herself into a ball to escape the pain. She lay whimpering for a few minutes before she noticed that the pain had subsided. Her body twisted as she tried to see over her round ass. Despite the clenching together of her anus and legs, the pleasure stick was there, protruding and splaying her pussy obscenely. She felt full; there was no other way for her to describe it. But arching on her side did not give her a very good view, so she uncurled herself slowly- expecting flashes of pain again but feeling none. \n\nShe sat up, once again playing her feet on her soft sheets. Somehow, her pussy had accommodated itself to that monstrosity. Her lips were spread wide enough that she could feel the sensitive skin stretching. Gingerly, she tensed her muscles, but found it was impossible to grip the pleasure stick any tighter than she already was. \n\nShe placed her hands on the end again, and gently gave it a push. She did feel a little bit of pain, but it felt more like pleasure than pain. She could feel the tip pressing against her back wall, and it felt great. Clearly, she was unable to fit any more inside her, but there were only a few inches left outside. She sighed with pride. She had denied the glassblower what he sought. \n\nIn fact, the longer she left the stick inside her, the better she felt. As she relaxed, she could actually begin to glide the crystal shaft in and out of her.\n\nAnd it didn't feel good; it felt great.\n\nShe moaned deeply as the smooth crystal rubbed against her spongy-ridged insides. The thickness of the pleasure stick made her insides feel electric with heightened senses. She was very sure that no hollow space existed in her cunt at that moment. She could feel every inch of flesh inside herself as the silken curves of the stick caressed it. \n\nThe more she relaxed, the more pleasure she felt. She quickly found that the large girth of the stick played a musical havoc on her jelly pussy lips, strumming them back and forth as she moved it in and out of her. It also forced her hot sex juice outside of her. She could see that blood had mixed with her cream, but it didn't bother her- it didn't hurt anymore. The liquid built up around the edges of her tight hole, smearing into little pools with the friction of her penetration.\n\nShe soon noticed that the huge stick was not just rubbing her cervix and pussy lips, but indirectly, her clit as well. The intensity was building and she was rocking her hips inadvertently. Her body writhed in a good way now, as she set a deep, slow rhythm to maximize the friction with which she rubbed herself. At the end of each stroke she bumped her cervix, emitting a little cry of joy with the feeling it brought.\n\nMuch too quickly, her breathing began to come in short, agonized gasps, which she punctuated by soft 'oohs' and 'aahs'. \n\nSlowly, a feeling of warmth began to flow over her body. It began with a tingling at the base of her spine, and soon grew into a strong fire in her stomach. She was acutely aware of it\u2014it was building, overwhelming her, but she couldn't bring herself to stop. The heat spread over her body, and when it reached her loins, she was breathing rapidly, and unable to do much besides grunt and pump the pleasure stick into her swollen, wet pussy with a mechanical urgency. The princess had never experienced anything like this engulfing feeling before, and she was compelled to follow it to the very end\u2014no matter what that end might be. \n\nThe end turned out to be amazing. In a flash, the warmth erupted into heat as Meghan's already sensitive skin tingled with the feeling of thousands of needles. Where the crystal shaft penetrated her, though, was the most intense. Her clit cried out to her, and her pussy clenched on the pleasure stick of its own accord. She was a passenger on the orgasmic ride her body was taking. Her toes curled and her legs tensed, and her body was wracked with shudders that were uncontrollable. \n\nMeghan wasn't able to keep track of how long it lasted\u2014to her, it seemed to be hours. While she finally began to settle down, her heaving chest gradually slowed. Her breath returned, and as she gained it again, she knew exactly what she had to do with it. She screamed. It was a scream of sheer joy and discovery, for the princess had discovered the true intent of the glassblower's son's gift. Savoring the hypersensitivity of her post-orgasmic skin, she pulled the pleasure stick from her with a sucking sound. Trailing a strand of cum, she immediately plunged the pleasure stick back inside her warm tunnel. The castle echoed with her screams long into the night.\n\n* * * * *\n\nThe next morning, the kingdom was abuzz with the impending announcement of the princess' decision. They gathered in the courtyard to await her proclamation. She stood on the balcony, ready to address the throng. As she looked out in the crowd, she felt anxiety, for the glassblower's son was nowhere to be seen. She did see the glassblower, though, dressed in his finest clothes, looking over the crowd. How smug he looks, she thought. I will savor his reaction.",
        "The crowd quieted as she prepared to make her announcement.\n\n'My loyal subjects,' she began. 'I would like to thank you for the many lovely gifts I received yesterday. You have made it very difficult for me to make a choice. Know that the wealth I was presented with on my birthday will be redistributed evenly among you all. We shall all share my gifts!'\n\nThe crowd applauded her generosity, and she smiled as she waited for them to settle down again.\n\n'I regret that I may only choose one gift. I assure you, I spent many hours before reaching my decision,' she said cunningly. After all, it was true enough, she thought, as her loins surged with a feeling of lust. 'But I have come to my decision,' she paused as she watched the glassblower puff up visibly. \n\n'My new husband is Cardiff\u2014the glassblower's son!'\n\nA hush fell over the crowd as they soaked in the news. Slowly a buzz built up and they parted as he was recognized\u2014in the very back. A circle formed up around him as he looked up at the princess and mouthed the words, 'me?' She beamed at him (making half the crowd smile along with her) and called out, 'Yes!'\n\n* * * * *\n\nLater, they walked through the castle halls arm in arm, talking. \n\n'Where did you learn to make such a thing?'\n\n'I don't\u2014I don't have any experience, if that is what you ask.'\n\n'But surely you must have had some inspiration to make it!'\n\n'I do understand female anatomy. It just seemed to me that it would be pleasurable to make something that would fit it.'\n\n'You are joking with me!'\n\n'No, my lady. I am a craftsman. Fitting things is what I do.'\n\n'Well, my husband, I know something that will fit better than any crystal,' she smiled at him as they arrived at their bedroom door.\"\n\nWhat happens next is a story that remains for another time, for she has fallen asleep to the rhythm of my breathing as I've told her the dirty story. Reaching down to carry her to our bedroom, I can't help but feel the wetness she's generated in between her bare legs. Slightly jealous of the story I've told, I whisk her off to the comfort of our bed. Tonight, we have our own fairy tale to make. \n\n~for you, Meghan"
    ],
    "authorname": "LittleP",
    "tags": [
        "stick inside",
        "fit hand",
        "pressure felt",
        "soft green",
        "black bush",
        "toes curled",
        "fairy tale",
        "back mirror",
        "acutely aware",
        "quickly found"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-crystal-dildo"
}
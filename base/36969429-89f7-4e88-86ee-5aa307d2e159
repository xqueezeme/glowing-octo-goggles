{
    "title": "A Handyman's Memoir Ch. 45",
    "pages": [
        "My former teacher Margie and neighbor Lee became fast friends, paddling their kayaks together often. Lee told me Margie was shocked at first when she learned of my relationship with Becka and Emma, but she got used to the idea as she got to know us all.\n\nMargie's husband was on a month long business trip to Kuwait, and she knew for a fact he was taking advantage of his freedom while he was away, so she did too, stopping by my place often. We got used to each others bodies, and our fucking had slowly built up in intensity to the point where she was asking me to give it to her harder when I had nothing harder left to give. We had a ball.\n\nAbout two weeks in she told me her friend Bonnie Burns was coming to spend the weekend with her. Ms. Burns, as I knew her in high school, was the stuff of every male schoolmate's wet-dreams. Where Margie was a conservative looking teacher \u2014 nice but stern, Ms. Burns was softer, curvier, and way sexier. Long wavy hair, eye makeup, tight skirts, long legs with stockings \u2014 the works.\n\n\"Remember when you asked me if you could tell Mark about us?\" Margie asked me one day.\n\n\"Yeah, don't worry, I never said anything,\" I said.\n\n\"I was thinking, with Bonnie coming to visit, maybe we could all get together?\" she said shyly.\n\n\"Why Mrs. Millbanks! Are you suggesting what I hope you're suggesting?\" I said with a big smile.\n\n\"He looked awfully good when I ran into him a few weeks ago,\" she said, blushing a little. \"And I know what you boys thought of Bonnie back in school.\"\n\n\"Oh yeah, this is happening!\" I said. \"Whaddaya say we surprise him. You guys can be sunbathing in bikinis or all done up in lingerie in the bedroom.\"\n\n\"I'll tell her to bring some sexy clothes,\" Margie said.\n\n\"As I recall, that's all she owned,\" I smiled.\n\n\"You guys must've thought I was a prude in comparison,\" she said.\n\n\"Honesty, we just thought you were a teacher, which is good I guess,\" I said.\n\n\"I guess, but it's nice to be lusted after once in a while,\" she said.\n\n\"Well if right now counts you're getting your wish,\" I said with a smile.\n\nWe stripped each other for the umpteenth time, and Margie gasped when she saw my cock, as she always did.\n\n\"I'll never get used to this thing,\" she said. \"Bonnie's gonna go nuts. She's been calling me like every day for weeks now.\"\n\n\"What's her life like these days?\" I asked.\n\n\"I told you about her bookstore,\" Margie said. \"It seems like it'd be a tough business these days, but she does surprisingly well with it. There's a cafe area, and she has acoustic music in there.\"\n\n\"Cool,\" I said. \"I've got just the act for her \u2014 a couple of good friends of mine. They travel all over the country playing music. I'll have to tell her about them. So how's her love life?\"\n\n\"Lousy,\" Margie said. \"She looks like a high-maintenance trophy-wife type, so she attracts that kind of guy, but she's not like that at all. She's really down-to-earth, and needs a low key guy.\"\n\n\"So she needs a make-over that goes the opposite direction than most,\" I said.\n\n\"Yeah, I guess,\" Margie said. \"She's been a girly-girl since she was a kid. It's a hard habit to break.\"\n\n\"You gonna do something with that thing in your hands, or what?\" I asked, gesturing to my slowly wilting cock.\n\n\"Wow,\" she said. \"It's amazing how I've gotten used to being with you. It's almost like it's not a big deal any more.\"\n\n\"It's not a big deal, but it's still big fun,\" I said, and Margie smiled before taking me into her mouth. \"You're gettin' pretty good at that you know.\"\n\n\"Teachers can learn too you know,\" she said. \"I had no idea there was so much sexual instruction on the internet.\"\n\nShe gave me a nice, much improved blow-job, and I came in her mouth, which she had decided she absolutely loved. She liked me to cum on her face too, which is something I've never really gotten into \u2014 it seems degrading to my sweet women friends \u2014 but when she asked me for it, I obliged, and she looked awfully sexy that way.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nA few days later Bonnie arrived in town. I had spoken to Mark and invited him to come over at seven in the evening for drinks. I told him it was a special surprise, so he knew it was something good. Margie and Bonnie arrived at six-thirty.\n\n\"Ms. Burns, I'm afraid I can't find my homework,\" I said with a big smile as they came up my front walkway.\n\n\"Steven, we're going to have to keep you after school, very late,\" she said with a huge radiant smile, and we hugged like long lost lovers. \"Margie's description sounded good, but wow!\" she said. \"You did grow into something special, didn't you.\"\n\n\"I could say the same about you Bonnie,\" I said, and I hugged Margie. \"Come on in you two.\"\n\n\"Watch yourself,\" Margie said to Bonnie. \"He'll sweet-talk the panties right off of you.\"\n\n\"If I had known that I would have worn some,\" Bonnie said with a wicked smile.\n\nIt was a cool evening, and they had on light jackets. When they took them off they looked stunning. Done up to the nines, but not in a fancy party kind of way, more of a sexy summer soiree by the pool kind of way. Thin cotton summer dresses, Margie's with bare shoulders and Bonnie's completely backless down to her ass crack. They both displayed lovely cleavage, and Bonnie was bra-less \u2014 those tits I dreamed about in high school were only lightly sheathed by the thin cotton. With their sexy makeup, and hair that looked perfect but would look even better messed up, they were the picture of two sexy middle aged women ready for good times. Mark was gonna have a stroke when he saw them.\n\n\"This place is wonderful!\" Bonnie said. \"Absolutely perfect. You fit right into it so nicely. So often men don't look right in the places they live, but this is definitely you. And that boat outside fits your personality too. I'd love to see it tomorrow \u2014 the scene of the crime.\"\n\n\"What crime?\" I asked.\n\n\"When you practically bludgeoned poor Margie to death with that thing in your pants,\" she said with a wicked smile.\n\n\"Oh yeah,\" I said, a little embarrassed. \" I don't think she was used to . . . it was kinda hot down there that day.\"\n\n\"Positively on fire I bet,\" she said, looking at me like this was going to be a night to remember.\n\nJust then Mark knocked at the door. \n\n\"Would you like to answer it Ms. Burns?\" I asked with a smile.\n\n\"Why Mark Rigford!\" she said to my shocked looking friend as she opened the door. \"I hope you've done your homework \u2014 there will be a test later.\"\n\n\"Ms. Burns?\" Mark said, not believing his eyes.\n\n\"Have you ever been tested by two teachers at once?\" Margie asked as she showed herself from behind the door.\n\n\"Sorry to shock you this way honey,\" Bonnie said, \"but the look on your face is worth the trip alone. My goodness, you and Steve did grow into some specimens, didn't you.\"\n\n\"It's a good thing a nurse lives next door. He looks a little pale,\" Margie said with a smile.\n\n\"I don't even know what to say,\" Mark said. \"Steve man . . . what the . . .\"\n\n\"It turns out Margie and Bonnie are old friends,\" I said.\n\n\"I'm gonna sound really dumb here,\" Mark said, \"but which one's Margie and which one's Bonnie?\"\n\nThe two girls laughed.\n\n\"Bonnie Burns, Mark. Pleased to meet you,\" she said, and she gave him a quick kiss on the lips.\n\n\"Margie Millbanks. It's my pleasure,\" Margie said with twinkling eyes, and she gave him a smooch too.\n\n\"You gonna make it buddy? You don't look so good,\" I said with a smile.\n\n\"You said it was gonna be a special surprise, but shit man, you're never gonna be able to top this one,\" Mark said, finally relaxing into a smile.\n\n\"I think it's time for some cocktails, don't you think?\" I said to everybody.\n\n\"Most definitely,\" Bonnie said.\n\nWe settled into cocktail party mode, everybody getting caught up on everybody else's lives. There wasn't even a hint of a teacher/student vibe, just two sexy women and two good looking men, drifting slowly toward a night of carnal bliss.\n\n\"My word, you're a serious music lover, aren't you,\" Bonnie said when she saw my stacks of CD's and boxes of vinyl albums. I had been playing music quietly in the background, and it was time to change the disc. \"How about something funky?\" she said, doing a little dance with her shoulders. \"I feel like dancing.\"\n\nI put on some Dumpstaphunk and went in the kitchen to mix some more drinks. Bonnie went back to the stereo, turned it up pretty loud and went over to Mark with her hands out.\n\n\"Dance with me Markie?\" she asked.\n\nThey were up and grooving to the beat when I brought Margie her drink. She had been watching them and winked at me. We put our drinks down after a sip, and joined in to the sexy dancing. There was much crotch grinding and hip swiveling, and then Bonnie and Mark's mouths came together and the temperature in the room seemed to go up twenty degrees. As they danced and kissed, Bonnie lowered the small zipper on her backless dress, and Mark slipped his hand inside.\n\n\"What the fuck Ms. Burns!\" he said quietly as he discovered her panty-less ass, and she laughed a delicious low-pitched laugh.\n\nShe slipped the straps off her shoulders and the cotton summer dress slid down her long legs into a colorful heap at her ankles. She stepped out of it as Mark stood wide eyed, and she took off her pretty sandals one at a time, tossing them aside.\n\n\"She never was shy,\" Margie said, and I chuckled.\n\nMostly though, I was transfixed, as Mark seemed to be, at the sight of the dream woman from our teenaged years, naked in my living room. Sensing my gaze, she looked back over her shoulder at me and winked. The little bit of air left in my lungs shot out through my mouth, and I almost came in my pants.\n\n\"Take a deep breath honey,\" Margie laughed, \"or I may have to call Lee with the smelling salts.\"\n\nBonnie went back to kissing Mark, her hand massaging the big lump in his pants, and I lowered my head and kissed Margie.\n\n\"This is shaping up to be the best night ever,\" she said quietly in my ear as I nuzzled her neck and bare shoulder.\n\nI unzipped her dress and she let it fall, revealing a super sexy bra and panty set that I hadn't seen before.\n\n\"My goodness Mrs. Millbanks!\" I said with a smile, and I stood aside so Mark could see her clearly.\n\n\"I swear to God I don't know if I'm gonna survive this night,\" he said with a wide-eyed stare.\n\n\"You'd better survive,\" Bonnie said. \"There's a whole lot of fucking left to do.\"\n\nShe dropped to her knees and undid Marks pants, and Margie did the same to mine.\n\nI know it sounds crazy but just watching Bonnie Banks take a hard cock into her mouth is one of the best things that's ever happened to me, and Margie, who was on her knees with mine in her mouth could read it all over my face.\n\n\"Wow!\" she laughed up at me. \"I had no idea it was this powerful an obsession you boys had!\"\n\n\"I'm sorry Margie,\" I said. \"That feels awesome baby.\"\n\n\"No, this is a big moment,\" she said. \"I know what big moments are like. I had one on your boat, remember? Shall we join them? I've been dying to get my hands on Mark too you know.\"\n\n\"Hey guys,\" I said, \"why don't we shift this party to the bedroom.\"\n\n\"I like how you think,\" Bonnie said when she came up for air off of Marks cock. \"Did we teach you that kind of problem solving?\"\n\nThe two girls walked into the bedroom and Bonnie stripped the lingerie off her old friend. She pushed her back on the bed and planted her face in Margie's freshly shaved pussy.\n\n\"Oh my God!\" Mark said quietly. I felt the same way, and the two of us just stood there like blithering idiots and watched.\n\nI finally sprung into action, pulling Bonnie's ass up where I could get at it and giving her pussy and asshole a good lick. Mark got on the bed and offered Margie his cock, which she eagerly accepted, giving him a sloppy wet blowjob while she climbed toward her first orgasm. It was a hot scene, and she got there pretty quickly, muffling her scream with Marks big rod. Mark couldn't take the heat and blew off, Margie directing the flow all over her face after taking the first shot in her mouth.\n\n\"You dirty girl!\" Bonnie said. \"You've been learning new tricks!\"\n\nMargie started laughing. \"Oh yeah!\" she laughed. \"Wouldn't that boring husband of mine love to see me now!\"\n\n\"I swear to God I'm not gonna make it through this,\" Mark said as he knelt next to Margie and watched her scoop his cum off her face and lick it off her fingers, still laughing quietly like the Devil was inside her.\n\nBonnie turned around and our eyes locked. \"I've been told you have quite the shlong,\" she said with a smirk not unlike Margie's.\n\nHer eyes dropped down and got big when they saw my cock standing proudly at attention, awaiting her inspection.\n\n\"You put this big thing in tiny little Margie?\" she asked as she slid her hand onto it. \"I can see why it almost killed her.\" She slipped herself off the bed and squatted in front of me. \"I hope you try and kill me too,\" she said, and she took me deep into her mouth.\n\n\"Oh fuck Ms. Burns!\" I said reflexively, my face that of a total goner, and Margie laughed at me.\n\nBonnie deep throated every millimeter of me, and I came like a schoolboy would, with no self control. I gushed into her throat and she gagged but held me there, squeezing me tight to her with her hands on my ass.\n\n\"Oh Fuck!\" she said, still gagging and coughing when she let me free. \"That's the hottest thing ever! You get the prize big boy! Hottest fucking thing ever!\"\n\nI would have agreed if I could have talked, but I was staggered by just the thought of what happened, let alone the feelings I felt. I came in Bonnie Burns throat, and she loved it! Wow.\n\nMargie had Mark hard again, and she climbed on for a ride. I knew my cock was drained for at least a few minutes, so I guided Bonnie up onto the bed and gave her a proper pussy eating. As Mark fucked up into Margie she leaned down and kissed Bonnie, and the four-way chain was linked up. Mark's got a nice cock of his own, and Margie was really digging it, losing herself in that wonderful way she does when it's all clicking. She's a marvelously sexy woman, something Mark and I never would have guessed in school, and the look on his face told me he was loving fucking her.\n\nBonnie was a sexy woman too, making wonderful noises and responding like a thoroughbred to my ministrations. Every inch of her was gorgeous, and with her arms holding her legs up near her chest she looked incredible. I still couldn't believe what was happening, but I tried to put it out of my head and give her my best \u2014 it was the least I could do to pay her back for all the wonderful dreams and fantasies she had given me for so many of my adolescent years.\n\nHearing her cum was like music to my ears, and making her cum has gone down in my memory banks as one of my crowning achievements, but there was way more to do, and with that out of the way we got down to some serious fucking. I've been in some wild situations and had some great sex, but what went on in that bedroom that night was epic. There was more heat, and more pent-up desire in that room than I thought was possible. It was positively explosive.\n\n\"There's something special going on here,\" I said to Margie when we were both catching our breath at one point.\n\n\"You're telling me!\" she said. \"I had no idea life could be like this. I'll never be the same. I think that shit marriage of mine's gonna be history.\"\n\n\"Margie, this is not the time to be making those kinds of decisions,\" I said.\n\n\"I know,\" she said. \"Do you have any lube? I want you both in me at once.\"\n\n\"Margie!\" Bonnie said, looking surprised. \"Really?\"\n\n\"It's the perfect storm honey,\" she said, \"and I'm ready to get swept up in it.\"\n\n\"If you're in I'm in,\" Bonnie said. \"You boys ready to get serious?\"\n\n\"Who's first,\" I said with a smile when I went back in the bedroom with the lube in my hand.\n\n\"The woman who had the idea goes first,\" Bonnie said. \"I wanna watch and see what I'm getting myself into.\"\n\n\"Lay down Mark,\" Margie said. \"You feel delicious in my pussy.\"\n\n\"You're gonna put that shlong in your ass?\" Bonnie said wide-eyed.\n\n\"Life's to short to not try, right Steve?\" Bonnie said, looking back over her shoulder at me with my favorite smirk.\n\n\"Ohhhh,\" she groaned when she settled onto Marks cock, and I gave her little puckered hole a smear of lube. A little more on the tip of my cock and we were ready for business.\n\n\"Does someone have that nurses phone number on speed dial,\" Bonnie said, and Margie and I chuckled.\n\n\"What's the story there?\" Mark asked. \"Did she need to help you guys or something?\"\n\n\"Steve fucked poor Margie unconscious their first time together,\" Bonnie said with a little smile, \"and his nurse neighbor had to rush over and resuscitate her.\"\n\n\"I just feinted. He didn't fuck me unconscious,\" Margie said, sounding a little embarrassed. \"Well . . . I guess he did.\"\n\nWe all laughed.\n\n\"Now that you've embarrassed me, are you gonna stuff that thing in my ass, or what?\" she said. \"Oh Jesus! This is gonna be interesting!\" she said as I forced my way in. \"Oh fuck!\" she yelled as I pressed in further.\n\n\"Hang on baby,\" Bonnie said, holding her hand. \"It's gonna be a wild ride.\"\n\n\"It's fuckin' wild alright!\" Margie said. \"Holy shit!\" \n\n\"You okay sweetheart?\" I asked.\n\n\"Oh yeah!\" she gasped. \"Give it to me!\"\n\nMark had been still while I got part way in, and he started giving her some action from below.\n\n\"Oh my God!\" Margie said quietly, and I could see sweat beading up on her back. \"Kiss me you fool,\" she was barely able to say to Bonnie.\n\nMargie squeezed Bonnie's hand and Bonnie kissed her, muffling her grunts, groans and moans as I got deep enough to start fucking her proper. Her back arched sharply and I fucked her ass deep as Mark thrust up into her pussy as best he could. Bonnie broke off her kiss and Margie let out a deep, guttural scream, unlike anything I had heard out of her before. Her little body was on fire, and fiery screams kept pouring from her mouth until finally, when she could take no more, her legs started shaking uncontrollably. I held her up by the hips, her spastic legs came up of the bed, and Mark and I fucked her into oblivion, an orgasm the likes of which I don't think she had ever experienced before.\n\n\"I'll have what she's having,\" Bonnie said as Margie melted into a heap on top of Mark.\n\nWe all rolled Margie's exhausted body off of Mark and started kissing every inch of her. Her eyes were closed, she had a wonderful smile on her face and she was somewhere wonderful, floating in space like a feather in a warm summer breeze.\n\n\"It's my sweet Bonnie's turn,\" she whispered.\n\n\"If she fit that monster in her ass I guess I will too,\" Bonnie said, and she mounted Mark and he slid into her pussy.\n\n\"I'll never get used to this,\" he groaned as he was deep inside his boyhood dream once again.\n\n\"Oh Mr. Mills!\" she gasped as I lubed up her pretty little asshole.\n\n\"You asked for me?\" I said as I pressed into her.\n\n\"Oh God!\" she said. \"Easy big boy!\"\n\nI went slow, giving her plenty of time to adjust to the new sensations. Her lovely tall body came alive, as Margie's did, and Mark started a slow thrust from below.\n\n\"Oh fffuucckkk!\" she said, getting close to the point where words wouldn't be possible and wouldn't even matter.\n\n\"Yeeesss! yeeesss!\" she hissed as I started fucking her proper.\n\nHer words turned into guttural moans, each one formed with an entire lung full of air, and they reverberated around the cedar paneled walls of my bedroom. Margie knelt next to her and played with her swinging tits, and Bonnie's moans rose up into yelps and then wild, shrieking screams as Mark and I gave her everything we had, lifting our favorite fantasy woman to the heavens, the two of us right there with her on that bright shining cloud. All three of us exploded at the same time, into millions of little sparkly pieces, raining down from the shining cloud back to earth, back to reality.",
        "My body was spasming well after my orgasm, something I hadn't experienced before, and I collapsed next to Margie. \n\nWhen Bonnie had recovered a bit of her sanity she lifted her tired head and kissed Margie softly. \"Best weekend ever,\" she said quietly to her old friend. She laid her head back on Mark's chest and he held her silently. I pulled Margie down and spooned her, and the four of us fell under the spell of the silence in the room and the luxuriousness of warm flesh in our arms, and fell asleep.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nWe woke an hour later at four in the morning, and the girls gave us beautiful, sensual blowjobs and then rode us to quiet orgasms.\n\n\"This is gonna sound ridiculous, but I've really gotta go,\" Mark said. \"I've got a date this morning at ten o'clock.\"\n\n\"Oh my!\" Bonnie said. \"I'm afraid we haven't left much for her.\"\n\n\"It's a first date so it probably won't come to that,\" he said. \"It is gonna be a little weird though, with all this on my mind.\"\n\n\"I hope you don't think I'm to forward, but I'd love to go on a date with you sometime,\" Bonnie said. \"I'm only four hours away. I come up for weekends once in a while.\"\n\nMark looked like he'd just won the lottery, and they immediately made plans for him to drive down to her place in Pennsylvania the next weekend for an art festival.\n\nAfter Mark left, Margie and Bonnie and I slept on my bed. I woke to a beautiful sunny day and got up to make coffee and bagels. The girls looked wonderfully disheveled when they came out to join me, and they both picked up their summer dresses off the floor and slipped them on over their naked bodies.\n\n\"You two look happy,\" I said.\n\n\"Mmmm,\" Bonnie cooed with a sexy smile. \"Being well fucked does that to a girl.\"\n\nWe took our coffee and bagels out to the porch and listened to the morning birds.\n\n\"So where does your friend Lee live,\" Bonnie asked Margie.\n\n\"On the other side of that little strip of woods there,\" she said. \"There's a foot path down near the water.\"\n\n\"A well worn path I'd imagine,\" Bonnie said with a smirk. \"Having a man like Steve move in next door must be like winning the lottery.\"\n\n\"That's gross hyperbole Ms. Burns,\" I said with a little smile.\n\n\"Very good Steven!\" she said. \"You remember your studies!\"\n\n\"She loves you ya know,\" Margie said to me.\n\n\"Lee? I love her too,\" I said.\n\n\"So . . . what are you waiting for?\" Margie asked.\n\n\"Not waiting,\" I said. \"Just . . . living.\"\n\n\"How would you feel if she got married?\" she asked.\n\nI sat dumbfounded by the question, and felt like my body was being squeezed by some sort of invisible torture device. I was finally able to get some words out through my malfunctioning lungs.\n\n\"What are you talking about?\" I said feebly.\n\n\"Whoa!\" Bonnie said. \"You weren't kidding when you said you loved her, were you?\"\n\n\"I . . . what . . . what are you saying Margie?\" I said. \"Is there something I should know?\"\n\n\"I think you know it already,\" she said with a sweet smile. \"And if you didn't you do now.\"\n\n\"You know you just gave me a panic attack,\" I said. \"That's not nice.\"\n\n\"Use it,\" Margie said. \"Think about it. And stop waiting.\""
    ],
    "authorname": "riverboy",
    "tags": [
        "orgy",
        "mature",
        "teacher",
        "ffm",
        "mmf",
        "ffmm",
        "double penetration",
        "anal"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/a-handymans-memoir-ch-45"
}
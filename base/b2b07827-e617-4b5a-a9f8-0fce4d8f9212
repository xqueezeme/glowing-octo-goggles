{
    "title": "Jewels, The Next Day",
    "pages": [
        "If you are looking for a lot of gratuitous hardcore sex with the requisite moans and screams and mutual orgasms of porn fantasy, or are looking for a quick jerk don't waste your time or mine on this story. If you did not read \"Jewels\" much of this will not make sense. My purpose with part two is telling the story, and working on character development. I hope you enjoy it. Constructive feedback is requested as I am trying very hard to develop my writing ability.\n\n\n\n\n\nI woke up rather late the next morning with long black hair on my chest. No, I didn't grow it overnight! Jewels was sleeping with her head on my shoulder. I had never felt so complete in my life. Her breasts were snuggled up against my ribs under my arm, and they felt wonderful! Her long luscious legs were tangled with mine. I couldn't see her pubes, because they were nestled up against my hip as if they had grown there. Bliss, that's the word I was trying to think of. I was in bliss. Then I heard it again, the sound that had awakened me a minute ago. A car horn! Susan and Jennifer were here!  I shook Jewels shoulder and awakened her. She stretched like a cat snuggled up against me still, and almost purred. \n\n\"Jewels, Susan and Jennifer are here!\"\n\n\"Oh, no! Already?\"\n\n\"It's almost ten o'clock! We really slept once we finally went to sleep!\" Jewels jumped up quickly and scurried across the hall to her room, naked as the morning she was born. Again I was awestruck at her beauty! She thought faster than I did, rumpling up her bed to make it look like it had been slept in, and threw a tee shirt and her shorts on, then said, \"Hurry up, slowpoke! They will know we've been up to something if we don't hurry down there!\"\n\nI threw on a tee shirt and pulled on my shorts, commando again, not wanting to take the time to pull out underwear. Jewels hurried down the stairs to the front door to let them in, just as I got to the head of the stair. \n\n\"What's going on?\" Jennifer asked. \"Were you going to sleep all day, or something? We blew the horn three times!\"\n\n\"Sorry,\" I said from the stairs. We both had some wine last night since the parents weren't here, and I guess we overslept.\" You see, I can think quickly sometimes, too.\n\nThe girls came into the house carrying a small bag apiece since they were planning to spend the night. Susan also had another bag that she handed to Jewels. \"I think that has what you wanted in it. What gives?\"  She gave Jewels a searching look, but Jewels just said, \"I'll tell you all about it later.\"\n\n\"How about some breakfast? I'll make waffles,\" I said.\n\n\"Yum,\" said Jewels. \"Let me go get cleaned up a bit while you fix it.\" She turned to Jennifer and Susan and said, \"Come on up with me and I'll explain why I asked for that stuff.\"\n\nI started preparing blueberry waffles with some blueberries I had picked with Mom last week. There is a \"U Pick\" farm near our house that has some of the best hybrid blueberries! They are as big as the end of my little finger, and sweet! I also started some hashed-browns, (OK, I cheated and used frozen ones.) and some fresh home-made sausage, that came from the same farm. I'm going to let Jewels tell what happened while I was cooking breakfast, but before I do it, let me tell you a little about Jennifer and Susan. They are both a couple of \"cute girl next door\" kind of girls, both brunettes. There is nothing special about them that would catch the eye. Just kind of average, and neither of them really dressed to get attention. Jennifer is about four eleven, and slender. Susan on the other hand is about an inch taller than Jewels and about the same weight. Here's Jewels. . . .\n\nJennifer, Susan and I went up to my bedroom while Jason started breakfast. Susan said, \"All right, what gives with the clothes you wanted? I've never seen you dress like that? And what's with no bra? I'm sure Jason noticed\"\n\nJewels giggled. \"Yes, he noticed all right! It's a long story. Do you remember our sophomore year when Julie brought her brother's Porn magazine to Volleyball practice, and we looked at it in the locker room?\"\n\nJennifer and Susan both grimaced and Jennifer said, \"Yeah, I remember. Talk about feeling ugly and under-developed!\" Susan nodded agreement.\n\n    \"Well yesterday, after our dads got hurt, he fixed lunch, and he can really cook! He opened a bottle of wine since no one else was there, and we wouldn't be going anywhere. After we ate I suggested we put on our bathing suits and go for a swim. He joked that with our folks gone we could skinny dip like we did in the wading pool as little kids. I said, 'Right!' and then kind of quiet so he wouldn't hear me, but he did, I said, 'Like any guy would want to look at my body.' He said, 'I would.' After we swam for a while and played water volleyball (I noticed he kept looking at my body when I jumped up in the water to hit the ball) we came back in and got dressed. I was drying my hair and brushing it out when he walked by my door and stopped and watched. I asked what he was looking at, and he said my hair is beautiful and he wished he could brush it for me. I said 'OK' but he wouldn't come in my room, so we went down to the verandah. Like he told you we had some wine with lunch, well, while he was brushing my hair out I talked him into opening another bottle just for courage. After a bit I asked him if he ever looks at porn, and why. Man, was I ever embarrassed! Anyway, he said he does sometimes, but he knows it is all fantasy, and not real. He said the models usually are enhanced, and they photoshop the pictures to make them look better. He said I look as good, or better, than they do! I thought he was just trying to make me feel better or something and said so. He asked if he could show me. He promised not to do anything indecent or anything, so I said 'OK'. \n\n     We came up here to my room, which he never would come into before, and he had me stand in front of my mirror. You know how I've hated mirrors for the last couple of years! He asked me what I saw. I said, 'I see a skinny girl with little boobs and long hair. I don't see anything beautiful or attractive at all.' He said, 'What I see is a beautiful young woman who has been programmed by media into thinking she is lacking in beauty and sex appeal.' \n\n     I had to agree with him. He asked me to put on some shorts and a tee shirt. He left and I changed clothes. All I had were some booty shorts and a loose crop top that I sleep in. When he came back in he asked me to stand in front of the mirror again, and again asked me what I saw. I told him the same thing, then, he started telling me what HE saw. . \"Don't be embarrassed, you asked me an embarrassing question, so turn about it fair play. I'm not trying to be rude or mocking you. I just want you to see yourself for who you are. You've had the wrong idea of what a real woman, a sexy woman, is all about.\"  He started talking about my hair and the way it shaped and framed my face and caught every man's eye that saw it. Then he talked about my eyes and how they lit up my face, how my chin looked, my lips and nose, my skin, and how everything flowed down to my neck and to my shoulders. Then he asked me to put my arms above my head like a ballerina. I thought he was joking, but he was serious. Then he asked me to take a look at my figure and the way it flows together. I told him I didn't see anything good about it. He asked what my measurements are, and I told him I don't know, so he went downstairs and got his Mom's sewing measuring tape and measured me. I thought he was going to try to cop a feel, but he didn't! He was a perfect gentleman! I'm actually an inch bigger on top than my hips! He asked permission, really, he did, to bunch up my top a little bit to show me something. He was really red and embarrassed. It was sweet! Then he said, 'Imagine you had artificial breasts like those girls in the magazine.  Wouldn't you be unbalanced? Instead, you have the perfect size breasts for your body and shape. They are perfect.' He talked about how my hips match up with my figure, and how so many women work hard to have my measurements. Then he said, 'You wear a padded bra don't you?' I said, yes, that I had ever since seeing those pictures. He said not to, that I don't need it, and that it actually detracted! Then he said he would loan me some tee shirts for the rest of the week if I wanted. He thought I was going to change back into my other clothes when he went down to fix dinner, but what I did was to take off my bra instead.\" Jennifer and Susan just looked at me with their mouths open and wide eyed. I laughed and said, \"Well, he did tell me I didn't need it, and that it detracted!\" We all laughed at that. \"Anyway, that is why I needed you to bring my other clothes up for me. They are likely to be a little snug! I haven't worn them for two years!\"\n\n     So then I changed into a different pair of shorts and a tee shirt with a deep vee neck. I didn't bother putting on a bra. Jason seemed to like it without, and the parents weren't back yet. We went down to breakfast.\n\nIt's me again. I had waffles hot and ready by the time the girls came back down. I asked Jewels to pour some orange juice for us. She said, \"You mean we don't get wine with breakfast?\" and giggled. \"No, no wine for breakfast! I told you you would turn into a lush!\" We all sat down to eat and had a good time with it. We discussed what we should do with the day. The girls wanted to swim and work on their tans, so after cleaning up the kitchen we all went upstairs and changed to our bathing suits. Was I in for a surprise!\n\nI was back downstairs and had gone out to gather flotation devices and other things we might want down at the lake when the girls came out. Jewels came out last singing, \"She wore her itsy, bitsy, teensy, weensy, yellow polka dot bikini...\", and she did! \"You like?\" Did I like??? Did I say it was itsy bitsy? It was also teensy weensy! \"I haven't worn this since I was sixteen, and I'm a little bigger now than I was then.\" It was a string bikini, and it is a good thing they were long strings, because there wasn't much else! She walked over to me and put her arms around my neck and brushed her breasts across my chest and smiled. \"Thanks, so much for helping me understand myself,\" she whispered. \"The other girls are so jealous! They have struggled with their self-esteem since we saw that magazine, too. Do you think you could help them understand?\"\n\n\"Why don't you two take the towels down to the beach. I'll have Jewels help me with the other stuff,\" I said. Really, I needed a chance to re-arrange my cock, which was tenting out my trunks since Jewels walked out the door. \"Are you asking me what I think you are asking me? You want me to do with them what I did with you?\"\n\n\"Uh Huh. Anything up to having sex with them. They are my friends, and I want them to be happy too, and they don't have a Jason in their lives who cares for them.\"\n\n\"But you are the one I love. I'd feel funny saying some of that to them. It was hard enough saying it to you.\"\n\n\"Think about it, would you please? I know it would be good for them, and I trust you to tell them right. I'd hate for some boy who was just out for himself to do it.\"\n\n\"I'll think about it,\" I said, and picked up a couple of floats and handed them to Jewels to carry. We walked down to the beach, with me holding a float in front of my crotch trying very hard to look natural doing it. Jewels really had me going. Not only was she wearing that wonderfully too small bikini, but she was asking me to pay attention to the bodies of two other young ladies in bathing suits. True, they were very modest, as Jewels' had been the day before, but still, they were bathing suits on two fairly attractive, and in shape young ladies. I walked all the way to the water's edge before throwing the floats down and diving in quickly hoping Jennifer and Susan wouldn't see my cock bulging in my trunks.\n\nWe swam around for a while and played a little water volleyball. Jewels was pretty smart, pairing herself with me, so I would be watching the other girls jumping and bouncing in the water. I know she was trying to get my thinking going about talking with them about their bodies, and their feelings about their looks. We had played for about an hour before we decided to get out of the water for a while and the girls wanted to get some sun, so they laid out their towels on the sand and stretched out to catch some rays while I went back to the cabin to get us all some cold drinks. Jennifer said something to Jewels as I was walking away that I didn't catch, other than I heard my name. I did hear Jewels say, \"I dare you to ask him! He'll tell you.\" I don't know for sure what they were talking about in the short time I was gone, but I noticed both Jennifer and Susan checking me out as I walked back. I handed out their drinks and settled back into a lounger and laid back, enjoying the nice breeze. I started to doze, when my cellphone rang. Looking at the number I answered and said, \"Hi Mom. How's it going?\"\n\n\"Hi, Son. You guys getting along OK?\"\n\n\"Sure. I fixed waffles for breakfast, and then we swam for a while. Right now we're just resting and catching some sun. How are Dad and Brad doing?\"\n\n\"That is what I was calling about. Brad is dizzy today. The Dr. doesn't think it is anything serious, he just banged his head harder than he thought, so the Dr. doesn't want him to drive up there tomorrow either. Dad and I can come up there if you need us to.\"\n\n\"No, Mom, that isn't necessary. We're doing fine. You guys just take it easy and come out the day after. I can handle the cooking, and I'll make Jewels do the dishes.\" Jewels made a face at me and Susan giggled. I held my finger to my lips at her, not wanting to remind Mom the girls were planning to stay the night. I knew it was OK, but you know how mothers are! I mean, what guy in his right mind doesn't enjoy being alone with three girls, especially if he is hoping to get to sleep with one of them again that night. Things were definitely looking up in that department!\n\n\"OK, then. We'll see you probably about lunch time tomorrow. You guys behave yourselves.\"\n\n\"OK, see you then.\" We hung up and I said to Jewels, \"Your Dad is still a little dizzy, so the Dr. doesn't want him to come back tomorrow. That means we can all go skinny dipping now!\"\n\nThat brought a chorus of howls from the girls. \"Right, you'd like that, wouldn't you? You alone with three cute naked girls?\" said Jewels.\n\nI knew it wasn't going to happen, but yes, I would like that. Very much!\n\nI settled back into the lounger and looked at the three girls stretched out on their stomachs in front of me. It was not a bad sight at all! One gorgeous girl wearing a very small bikini with a cute girl on either side of her, that even though they were wearing very modest, conservative bathing suits were still easy on the eyes. After a while they all rolled over onto their backs, and I felt my cock begin to stir. Then Jewels reached over and tickled Jennifer in the ribs, making her jump and thrust her chest into the air trying to get away from her fingers. She squeeled and laughed and giggled as she tried to get away from Jewels' fingers, all the time presenting very interesting views to me. Susan lifted on an elbow and started tickling Jewels in Jennifer's defense, and before I knew it I had three girls writhing around on the ground in front of me tickling and wrestling with each other. They rolled off the towels and into the sand, getting it stuck all over on their bodies. Finally, gasping with laughter they broke apart and sat in the sand gasping for breath. Jewels said, \"Now I've got to get all this sand off of me before I can go back to the cabin. Let's have a 'chicken fight' and rinse off before we go up for lunch.\" They all agreed, and Jewels said, \"Come on Jason. You have to be part of this to make it even.\" Now this was going to be interesting! Jewels stepped next to me and said very quietly, \"Go along with me on this. I know what I'm doing.\" Interesting just became fascinating!\n\n\"None of us can carry Jason,\" said Jewels, \"so to see who wins we'll do a round robin with Jason carrying each of us, and Susan and I will have to switch off on the bottom against him.\" We all agreed, and Jewels climbed onto my shoulders first. She put her legs around my neck and hooked her feet around behind me. Leaning down over my face she said softly, \"I'll bet you are going to enjoy this\", and gave me a big grin and a wink. Then she sat up and wiggled around behind my head and squeezed me with her legs. \"Go,\" she said, and Susan and I walked toward each other with Jennifer and Jewels looking for an opportunity to make the other fall off. Jewels seemed to me to be paying a little bit more attention to grabbing at Jennifer's suit for leverage than trying to grab an arm or push her off. All the while she kept shifting and sliding on my neck, and clasping me with her legs. Of course, I had to hold on to her legs to keep her on my shoulders. It was a sacrifice, but a man has to do what a man has to do! It seemed to me she wasn't trying all that hard to push Jennifer off, which seemed to be confirmed when in the guise of pushing her, she got her thumb under the shoulder strap of Jennifer's suit and pushed it off her shoulder and part way down her arm. Jennifer's breast didn't quite pop out, but most of it was exposed almost to the nipple. \n\n\"Hey, watch that!\"\n\n\"Oops.\" Was all Jewels said as they continued pushing and pulling.\n\n\"Two can play that game, you know!\" and Jennifer grabbed at one of Jewels' bikini cups.\n\nCuriouser and curiouser, as the Mad Hatter once said! Meanwhile, the antics of the two girls plus the feeling of Jewels' pussy separated from my neck only by a thin piece of fabric had my cock at full alert. Fortunately, the water was over my waist, so it wasn't visible, but this could be quite embarrassing.\n\nFinally Jewels unseated Jennifer, and she fell into the water. Jewels squirmed on my shoulders a little bit and then pulled her legs from around my neck and slowly slid down my back, rubbing her breasts against me as she did so. \"Did you enjoy that? She whispered. \n\n\"What do you think,\" I whispered back.   \n\nShe giggled and ducked down into the water as if to cool off and reached around in front of me and brushed her hand against my cock. \"I thought you would!\"\n\nThe next round I took Jennifer on my shoulders and Susan got up on Jewels. Jennifer felt so tiny, but her legs around my neck still felt exceptionally nice. She hooked her toes around behind my shoulder blades, and I slipped my hands up her thighs to hold her. She scooted up tight against the back of my head and I self-consciously arched my neck back against her as she settled herself into position. I got a firm grip on the soft skin of her thighs up high on her legs as we started the next round. Jennifer, being smaller, was having difficulty getting close enough to grapple with Susan, and kept squirming around on my shoulders. Again, the feel of a young pussy rubbing the back of my neck and those smooth soft legs squeezing me and slipping in my hands had me hard. I tried to overcome the reach advantage by ducking down somewhat and lunging trying to get Jennifer inside of Susan's long arms. It worked, but Jennifer slipped on my shoulders and she started to rotate around my neck. My hands slipped up higher on her thighs trying to catch her and inadvertently, my fingers on my right hand slipped under the elastic on her leg band. It was accidental, and on the outside of the leg, but still the idea of where my hand was had me blushing, but I couldn't pull it out, or she would fall off for sure. She lunged forward pushing on Susan, forcing Jewels to step back, and Susan grabbed at her, and again grabbed her shoulder strap, pulling it down over her shoulder. Susan was off balance, and just struggling to stay up as Jennifer kept pushing at her. My hand was slipping further inside her bathing suit with all of her gyrations. I looked up just in time to see Jennifer's hands sliding upward on Susan until they were grasping at her breasts, pushing. Susan gasped and almost fell, but Jewels was able to step back again just in time to save her. Susan was flailing at Jennifer trying her hardest to grasp her arm or something to give her some leverage. She got both hands on Jennifer's shoulders and pushed forward trying to unseat her when Jennifer twisted suddenly and I stepped back under her. Susan's thumbs got caught in both shoulder straps as I stepped back, and she fell forward, dragging both shoulders straps off and down Jennifer's arms as she fell into the water. The straps were pulled almost to her wrists, and the top of the suit went with it. The way it ended up Jennifer's arms were almost pinned down so that she couldn't pull the suit back up. Her struggles to get the suit back on unbalance both of us and I fell over into the water. Of course with her arms pinned down she couldn't right herself in the water very readily, so I reached out to help her stand back up. When I did my hand landed directly on her naked breast. I pulled her up out of the water, which was just shallow enough that her breasts were at the water level. I quickly turned my head and apologized for grabbing her. I was blushing to beat all. Of course, Susan and Jewels both thought it was hilarious! I must say, though her breasts were small, they sure were pert and looked very nice! Jennifer finally managed to get her suit back on, and I turned back around. I don't know which of us was redder! Jewels was laughing at both of us. \"Was that almost as good as skinny dipping, Jason?\" That did nothing but make me blush even more.",
        "We switched partners again, and Jennifer was riding on Jewel's shoulders this time, and Susan got on mine. This time it was getting serious. Jennifer felt she had gotten the short end of it the last two rounds, and she really went at Susan, but she changed her tactics. She immediately attacked at her shoulder straps, trying to get even for what Susan had done to her. Susan started squirming and wiggling around on my shoulders trying to keep Jennifer from grabbing her suit. This made her hard to hold on to, and she was rubbing her pussy around on my neck to beat the band. I of course had hold of her legs, and as she kept squirming and twisting my hands kept sliding higher and higher on her legs. Because she was taller and larger than Jennifer I had to wrap my hands more toward the inside of her thighs to keep hold. I had to keep my mind off of where my hands were, or I was going to have troubles. Susan used her height advantage to keep Jennifer at bay, but she was playing defensively, and wasn't focused on unseating Jennifer. Jennifer, on the other hand was being very aggressive so that Jewels had all she could do to stay under her. Jennifer's feet were flailing as she tried to keep her balance, and one of her toes got under the bottom string of Jewel's bikini, and pulled it loose. Jewels of course tried to keep the cups in place as Susan looked down to see what was happening. This was the opening Jennifer wanted, and she lunged at Susan and was able to do the same as Susan had done to her the previous round. I don't think she really cared about winning, she just wanted to get even. She went off of Jewels face-first, but kept grasp of Susan's suit all the way down, pulling it completely off her arms and down around her waist. Susan grabbed my head with both arms across my eyes, which brought her breasts down against my head with her upper arms squeezing them against me. Jennifer came up out of the water with a very satisfied smirk on her face, while Jewels was wide-eyed at the situation. Susan slid down off of my shoulders, and rubbed her breasts against my back as she slid down. I certainly hadn't expected anything of this sort to happen! In less than twenty-four hours I had seen my first naked woman, then had sex with her, and the next morning saw the breasts of her two best friends while holding their legs and feeling their pussies rubbing against my neck. My cock was about to burst!\n\nSusan got her suit back into place, and at first I thought she and Jennifer were going to go at it, but Jewels stepped between them and said, \"Easy! No hard feelings! We had fun, let's leave it at that.\" The other two agreed, somewhat grudgingly, then Jewels said, \"Let's go get some lunch. I'm starved! What are you fixing today, Jason?\"\n\n\"I was planning on Brats today, something quick and easy.\"\n\nJewels walked over and put her arm around my waist. \"Good. Why don't you go ahead so you can get it started. We'll grab all the stuff.\" \"I told you, you would enjoy it.\" She whispered, leaving me in a tough spot. My cock was throbbing it was so hard. How was I to get out of the water? My towel was up on the beach. I tried thinking of terrible things as I started toward the beach, but it didn't work. I did my best to keep my back to the girls, but I know they saw my boner. I grabbed my towel and bunched it in my hand and tried to use it to cover myself without looking to obvious, and started up toward the cabin. To call what I was feeling sensory overload was totally inadequate.\n\nAs soon as I got out of earshot Jewels said to the others, \"I thought playing 'Chicken Fight' might break the ice a little bit with you guys and Jason. I told you I want him to talk with you about what guys think about girls. We've all had our self-confidence shaken by what we thought about those pictures we saw, but we were young and developing. We didn't understand what it was all about, and it has affected everything about us. I really feel cheated by it, as if I lost the last two years. I said I wanted to break the ice, but I wasn't expecting my best friends to flash my boyfriend!\" She giggled as Jennifer squeeled, \"Flash your boyfriend! I didn't do it! I was so embarrassed! No boy has ever seen my boobs before.\" \n\n\"Me either,\" said Susan. \"I thought I was going to die!\"\n\n\"I know.  No one had ever seen mine before yesterday either. I wasn't planning on taking it that far, I just wanted you guys to talk. I think Jason liked it, though. Did you see the size of his boner in his trunks?\" The girls all giggled, a little embarrassed still. \n\n\"I've never seen one,\" said Susan.\n\n\"Yeah, me either!\" said Jennifer. \"I've always wondered...\"\n\n\"I never did either before yesterday,\" said Jewels. \"It's amazing. Anyway, Jason will explain things from the guy's perspective if you want. I already asked him to.\"\n\n\"I wouldn't know what to ask,\" said Jennifer. \"How far can we take it?\" She blushed and put her hand over her mouth. \"I didn't mean to say that!\"\n\n\"Pretty much anything goes. I made Jason promise to be open with you, although he is rather shy about it. We've known each other since I was a baby, and he was shy about talking with me. You may never get another chance like this, so don't waste it. I know how much better he made me feel about myself, and I want the same for you.\"\n\nThey gathered up the floats and towels and started up the hill to the cabin.\n\nWhen I got to the cabin I lit the grill to start warming it up and then hurried inside to get cleaned up and dressed. I jumped in the shower to rinse off, but my cock was still hard as it could be. The thoughts of Jennifer's breasts popping out of her bathing suit right in front of me, of Jewel's breast showing when her top got pulled loose, and then of Susan squeezing hers around my head and then sliding them down my back played over and over in my mind like a video ad that kept repeating. I hadn't really seen Susan's, but the feeling was incredible! I stroked my cock a couple of times and felt like I exploded. I had never cum so hard, and I had to grab the towel bar to keep from falling to the floor. It felt so good that it almost hurt. I really couldn't believe what Jewels had done. Had I gone too far with her? I hoped I hadn't changed her to much!\n\nI met the girls coming in as I was going out to the grill with the brats. Both Jennifer and Susan blushed a little, and neither one quite looked me in the eye, but I noticed they both seemed to be checking out my crotch as they went by. I was glad I had relieved the pressure! Jewels gave me a little peck on the lips as she went by and a wink as she unwrapped the towel she had wrapped around her body. She had me stirring again. \n\nWhile the brats were grilling I quickly set some paper plates out on the veranda table and got some plastic forks and spoons and napkins and just piled them in the center. Then I hurried back to turn the brats. There was some diced onion in the fridge, so I grabbed it and some relish, set it on the table, and hurried back into the kitchen to grab buns and chips. I got out the ketchup and mustard and some large glasses and set them on the table. I put a couple of two liter bottles of soda out on the table and went to take the brats off of the grill. Jewels came out onto the verandah as I was taking up the brats, saw the sodas, and picked them up and took them back into the kitchen. She came back out with a couple of bottles of wine and started pouring it into the glasses.\n\n\"Whoa!\" I said. \"Those aren't wine glasses! That's to much.\"\n\n\"I know. I think a little courage might be needed.  The girls want to talk.\"\n\n\"Don't pour them too full.\"\n\nBoth Jennifer and Susan looked a little sheepish as they came out onto the verandah. Jewels engineered it so that she was sitting across from me, leaving the others on either side of me. We were all pretty hungry from the exercise in the lake, so we all got right in to the eating. I notice neither Jennifer nor Susan were accustomed to wine as they were drinking it much to rapidly. I warned them to take it a little more slowly. All in all, sitting there with three attractive young ladies, well, let's just say I've been in worse places! Jennifer, being the smallest, started feeling the effects of the wine first. Of course, the way she drank it down so quickly before I stopped her didn't help. She started getting giggly. I was going to have to watch out for her. I felt a responsibility, being the oldest, and the host. Susan on the other hand was starting to get rather mellow. I noticed Jewels was hardly drinking any of hers. I raised an eyebrow at her as she set down her nearly full glass, and she gave me a slight nod and glanced over at Jennifer. She recognized it too, and also felt responsible. I was really glad to see that.\n\nWhen we were finished eating Jewels said, \"Let's clear the stuff away. Jason does the cooking, we do the cleanup.\"  Leave your glasses. They quickly had the table cleared and the condiments put away and all sat back down. Jewels had been toying with one of the wine bottles a little bit as we finished eating, and now she laid it on its side in the center of the table and spun it. \"We're not going to play 'Spin the Bottle' the normal way. Jason might enjoy that too much, especially after this morning!\" The girls giggled at that. The wine was definitely taking effect. \"Here's what we are going to do. The one the bottle points to gets to ask a question, and whoever is asked has to answer. Everyone gets one freebie if the question is too much to answer, but use it wisely, because you only get one.\"\n\n\"What are the limits?\" asked Susan.\n\n\"Anything goes except actual sex. You are my best friends, and I want you to be happy and I want to share with you.\"\n\nJennifer said, \"I've gotta use the bathroom before we do this.\" We all got up and went back into the house to make a bathroom call. Jewels put her arm around my waist and gave me a squeeze. \"Thank you for doing this for me.\" I was nervous about what was coming, but I wouldn't have missed it for anything!\n\nI got back to the table first, with Jennifer coming right behind me. \"I don't know about this, could I have just a little more wine? I've never done anything like this before.\"\n\nI thought about it for a minute. I didn't want to take advantage of the situation, and she was already a little buzzed. \"OK,\" I said, \"but just a little. You are small, and Jewels already gave you a lot. I don't want you getting drunk on me and being sorry for it later.\" I poured her a couple of inches in the bottom of her glass as the other two girls came out the door. Susan asked for a little more, too, so I gave her about as much. Jewels and I both had some in our glasses.\n\n\"Everyone ready?\" asked Jewels as she sat down. She gave the bottle a good spin and we all watched nervously to see who would get it first. It finally settled on Jennifer. She sat for a moment with her fingertips over her mouth thinking, then, she turned to me, \"Jason, when you look at a girl what is the first thing you notice?\" Her cheeks flushed red, and she lowered her gaze, and put her fingers over her mouth again, nervously.\n\nI sat and thought for a minute, and then said, \"That's easy; the eyes. It is always the eyes.\" \n\nHer head popped up with an incredulous look on her face? \"Really? You aren't lying to me, are you?\"\n\n\"No. They say the eyes are the windows to the soul, and I really think that is true.\" She looked at me quizzically, but with a soft look in her eyes. She reached out and spun the bottle, which ended at Jewels.\n\n\"Jason, what did you think when you saw Jennifer's boobs when Susan pulled her bathing suit down?\" \n\nJennifer's eyes went wide and she stared daggers at Jewels. I knew what Jewels was doing, so I just smiled, and said, \"I thought they were beautiful.\"\n\n\"Really?\" Jennifer was showing definite signs of the wine. She wasn't drunk by any means, but was feeling good, and not as reserved as she normally is. She put her hands on her breasts cupping them, and said, \"You really think these little things are beautiful?\"\n\n\"I do. And they aren't all that little. YOU are little, and they fit your person. I think they are just right on you.\" She smiled at me, a little doubtfully, but obviously pleased at my response. Jewels spun the bottle and it landed on Jennifer again. \"What did you think of Susan's boobies when I pulled HER top down?\" I thought Susan was going to crawl under the table.\n\n\"I really didn't get to see them, because she was above and behind me, but the felt nice when she squeezed them against my head, and then when she slid them down my back!\" I had a big grin on my face, and my cock twitched at the memory.  \n\n\"Oh!  You didn't get to see them? Maybe we will have to do something about that, hmm, missy?\"\n\n\"I don't think that is necessary!\" Susan sputtered. \"I don't think he would be interested in seeing these. They are nothing like the girls in that magazine.\"\n\n\"Susan, that is where you are so wrong. Those pictures you saw had been photoshopped, and those girls all had implants to make them look bigger. That isn't real! That is fantasy. It might be fun to look at and to talk about, but most guys I know like real ones a lot better! It isn't all about size.  It has to do with balance. That is what I tried to explain to Jewels, and just now to Jennifer. If you have great big breasts that don't match up to the rest of your body you don't look balanced. Sure, some guys like them big, but I'd bet most of us really don't care about them being that big. I, for one, like them balanced, and if I may say so, I think yours are just fine.\" She looked thoughtfully at me and said, \"You aren't just trying to make me feel good? You really like them?\"\n\n\"Of course! I'm a red-blooded guy! Of course, I like them! I just don't normally go around talking with girls about their breasts. Normally I'd get slapped if I did!\" The girls all laughed at that, and Jewels said, \"See I told you he would answer if you just asked him.\"  \n\nSusan spun the bottle and it came back around to Jennifer again.  \"Jason, before today, how many girls breasts have you seen?\"\n\n\"Hey, what is this? Pick on Jason day? One.\" Jewels turned pink at that answer to the other girls delight and laughter. \"I'll bet that's why you didn't hear the horn this morning!\" said Susan. The wine seemed to be affecting her too. I'd never seen her so vocal. I certainly hoped she wouldn't be sorry later. The last thing I wanted to do was to hurt any of them. Jewels was hiding her face in her hands now. \"Don't tell anyone!\" she whispered. \"I don't care that you know. Jason and I love each other. I've been in love with him for a long time, but I didn't think he would want me until he explained things yesterday.\" Jennifer jumped up and gave her a big hug. \"I'm glad for you. I knew something was up when I saw you this morning. You just have a glow about you.\"\n\nI said, \"I know I want her, and just as soon as her Dad gets back up here I plan to ask his permission to ask her to marry me.\" Jewels got all big eyed again and a big tear trickled down her cheek. Susan jumped up and hurried over to join in a group hug with Jennifer. \n\nThe girls sat back down and Jennifer spun the bottle which ended on Susan. Was I never going to get a chance? Susan looked thoughtful and started a question, then hesitated. Jewels said, \"Go ahead. Anything goes. This is your chance to talk about things we probably will never do again.\" Susan colored a little bit, took a deep breath, \"Jewels, did it hurt?\"\n\n\"Yes, a little bit, but Jason was really sweet and took it slow. He was very considerate.\" She gave me a really sweet smile, then said, \"But then it felt really, really good!\" I couldn't believe how much the girls had loosened up. I had expected some tentative sexual questions, but this had escalated quite a bit and quickly. Susan spun the bottle and again it landed on Jennifer. \"Hey, do you two have a magnet on that thing or something?\" said Jewels. Jennifer just laughed and turned to Jewels, \"How big was he?\" Jewels smiled and said, \"Big enough I didn't know how it would possibly fit.\" That brought speculative looks from both girls toward me. Jewels said, \"I didn't have seconds on that wine. If we are going to continue I need a little bit more.\" I didn't offer to get up and get a bottle because I was bulging my shorts quite a bit, so I said to Jewels \"I suppose it would be OK to get us each a little bit more, but you had probably bring some of the cheese and crackers to go along with it.\" It had been a late lunch, but by now it was getting later in the afternoon, and I was getting a little hungry. Susan and Jennifer decided to take a bathroom break, and I answered my phone. \n\n\"Hi, Dad. How's it going?\" \"Oh, yes, things are going fine here.\" Well, first we went skinny-dipping at the beach, then we came back to the cabin and I grilled brats, and we had a bottle of wine each with them, now we are playing 'Spin the Bottle.\" That generated a good laugh from Dad and after just a few be carefuls from him we hanged up.  \"What in the world were you telling him THAT for?\" exclaimed Jewels from the kitchen. \"Easy. You tell them the worst possible and make them think you are just joking. Then they don't worry that you were telling the truth.\" Anyway, he just called to say your Dad's Dr. wants to see him in the morning before they come back up here, so they won't be here before mid-afternoon at the earliest. Everyone is OK, but the doc just wants to be sure.\"\n\nJewels came back into the dining area carrying a cutting board laden with three different cheeses, two kinds of crackers and a bottle of Merlot and some wine glasses. She set it on the table and asked me to pour while she took a bathroom break. Susan and Jennifer had not come back yet. I poured the wine and sliced the cheeses, some aged extra sharp cheddar, an aged gouda, and just for me I'm sure an extra sharp blue cheese that had me salivating at the thought of it. There were also some slices of summer sausage. An excellent snack all around I thought. I was beginning to wonder what had happened to the girls when Jewels called downstairs that they would be down in a minute. My cock had deflated, so I thought I would have time for a quick bathroom break myself before they came down. I got back in my seat just in time to see the three of them coming down the stairs together. Both Susan and Jennifer had changed shirts, with Jennifer wearing a tank top and Susan a tight tee shirt. Neither of them was wearing a bra! Jewels just looked at me from behind them and winked. The other two both were rather pink cheeked, but looked determined. My cock suddenly wasn't deflated anymore! \"Wow! To what do I owe this pleasure?\"\n\n\"We just decided to give it a try. I'll probably never do something like this again,\" said Jennifer. Susan chimed in, \"We decided Jewels is comfortable this way, and I know a lot of other girls who go braless sometimes. I never thought I had what it takes, but you seemed to think they are OK, so I wanted to see what it feels like.\"\n\n\"Altogether lovely! That's all I can say!\" The girls sat down and Jewels spun the bottle, which for the first time landed on me. Both girls looked a little nervous, as this was the first time I had opportunity to ask anything of them. The question was, which one? Of the two, Susan seemed the least sure of herself and her body. I chose her. \"Susan, what are your measurements, and what size bra cup do you wear?\" She blushed and said, \"I really don't know. I'm just a B cup. I never wanted to know other than to buy clothes.\"\n\n\"I guess we'll have to measure then!\" I said with a big grin. Jewels looked at me with approval.\n\n\"I'm not taking my clothes off!\"\n\n\"Oh, that isn't necessary. I'll measure you over your clothes.\"\n\n\"You? I can measure myself!\"\n\n\"Uh uh. You need someone else to do it, and since it is my question I get to!\" I quickly grabbed the measuring tape from the drawer and motioned for her to stand in an open space. I had completely forgotten my boner, but was reminded very quickly by the look on her face. Oh, well. I was sure that was going to happen sooner or later anyway. Susan reluctantly stood up in front of me, with the other two watching with interest. I knelt in front of her and said, \"Raise your arms over your head like a ballerina.\" She did so, and her breasts swelled her tee shirt very nicely, with her nipples showing very nicely. I reached around her and stretched the tape around her hips: thirty five inches. Then I raised it up around her waist by her belly button: twenty five inches. Not bad at all! Then I stood in front of her and raised the tape to measure her bust line. She was blushing a fiery red and trembling. \"Relax, Susan. I'm not going to get fresh. I promise.\" I stretched the tape around her, and as I had done with Jewels the day before I was very careful not to touch her, and I held the end of the tape between her breasts: thirty-six! \"Susan, do you have any idea how hard women have to work and don't come close to your figure? You don't think your breasts are big enough? You have a wonderful figure! A thirty-six, twenty-five, thirty-five! Wow! I'll bet not one of those models you were worried about have a figure anywhere as nice as that! And by the way, a B cup is the most common size. You aren't lacking anything there either.\" Susan lowered her arms slowly to her sides, and tears started streaming down her face. Suddenly she wrapped her arms around me and sobbed on my shoulder. I held her gently and let her cry out her relief for a couple of minutes until she raised her head and looked me in the eye and softly whispered, \"Thank you. That is the sweetest thing anyone has ever done for me. I really didn't think I was worth anything. No wonder Jewels loves you so much.\" She gave me a kiss on the cheek. I was really glad I had been able to help her regain her self-image, but the way her soft breasts were pressing against my chest I had to disengage before she noticed my swollen cock and thought differently. Quickly I sat back down to hide myself somewhat below the table-edge, but Jennifer timidly spoke up. \"I know it isn't my turn, but would you measure me too, while you have the tape out. I know I don't have boobs like either Susan or Jewels, I'm only an A cup, but I'd like to know how I measure up.\"",
        "I nodded. I was planning on that for her next time I had the chance. This would save time, and maybe I could re-establish her view of herself at the same time rather than let her worry about it. She stood quickly and walked around the table and raised her arms. Her breasts may not have been very large, but they stood out very nicely, and I had trouble taking my eyes off of them. I swallowed, seeing the smirk on Jewels' face as I did so. I gave her a wry smile, and stretched the tape around her hips: thirty-two inches. I slipped the tape higher around her waist and pinched it together at her belly button: twenty-four inches. When I stood to measure her bust line I saw her eyes fixed on my cock and her tongue lick her lips. Carefully I stretched the tape around her bosom and again held the end between her breasts so as not to touch them: thirty-two and a half inches. \"Thirty-two and a half, twenty-four, thirty-two. What in the world do you think is wrong with that? I'll bet there is not another girl in your class that can match any of your figures. If I were to post your descriptions online on a dating site I guarantee your inbox would be full! I've got it tough all right. I'm stuck here at the cabin with the three hottest girls in the school. Woe is me! Woe is me!\" Jennifer giggled at my theatrics and wrapped her arms around me in a big hug. \"Thank you, thank you, thank you!\" she said. I know she felt my boner, because she grabbed me straight on before I had a chance to turn, but she didn't pull away. If anything she pressed closer. I extricated myself and managed to sit back down without embarrassing myself further. Susan grabbed the bottle and spun it. Really, it was my turn, but that didn't matter. Jewels was smiling across the table from me. That was all I needed. Well, that and some relief! Do you have any idea the pressure I was feeling about then? The bottle pointed at Jewels, who promptly gave me a Cheshire smile and said, \"Jason, you've been looking at our boobies now for a while. I think you ought to stand up for the next round and let us see that bulge you keep trying to hide under the table.\" She was pulling out all the stops for the girls. I really didn't mind all that much. Yes, it was embarrassing but I had been looking at three very nice sets of breasts. Turn-about was fair play. I stood up slowly, and the girls all gawked at me unapologetically. I had my boxers on, so I wasn't showing off quite as much as I had the day before when it was just Jewels and me. Jennifer kept licking her lips, and Susan had her lower lip sucked in between her teeth. Jewels spun the bottle, which ended up pointing at Jennifer again, who promptly asked, \"Susan, have you ever seen a boy's cock?\"\n\n\"Not since I was little, and it sure didn't look like THAT!\" That brought out giggles from the other two. Jennifer spun the bottle and it pointed at Susan. \"How big is your cock, Jason?\"\n\nI smiled, \"Jewels measured it yesterday. It's six and three quarters inches long.\" She looked a little disappointed. I think she was hoping to measure it. She spun the bottle which ended up on Jewels again. I was having no luck, but that really wasn't the reason we were doing this, I know. It would have been fun though to ask a couple of questions now myself. \"Jason, this is two parts: first, are you wearing underwear?\"\n\n\"Yes.\"\n\n\"I thought it looked different than yesterday. I think you ought to lose those shorts. Boxers will be about as thick as these shirts.\" This was really getting serious! I hadn't planned on this when we started, but I didn't want to be the first to chicken out. I was still standing, so I slowly unbuttoned the fly and started to unzip. Jennifer was licking her lips like they were dry as the Sahara, and Susan had her lower lip sucked way in between her teeth, and Jewels just sat there and smirked at me. Down came the zipper and slowly and nervously I started to slip my shorts off my hips. I had never been undressed in front of another girl than Jewels. I know my face was red, but I sucked it up and pushed them off my \n\nhips and down my legs. Of course, my cock promptly pushed out the front of my boxers with nothing to hold it tight against my body, and a wet spot showed at the end of it. I sat down, relieved to at least have that bit of privacy, but it was to be short-lived because Jewels spun the bottle and it ended up on her again. She said, \"Jason, we don't get to hide under the table. I think you ought to get the kitchen stool and sit on it so we can look at you like you've been looking at us.\" I got up and went to the kitchen for the stool and brought it back into the dining area. The girls watched my cock bob and sway going both ways and seemed to enjoy my discomfiture sitting above the table level with my cock just above the level of the table. Jewels spun the bottle and at last it landed on me. \"Jennifer, what do you feel when you see me looking at you without a bra on and your nipples poking out your shirt as compared to how you would have felt yesterday.\"\n\n\"I ought to be embarrassed, and if it was anyone other than you looking at me I would be offended, but you have shown you really care about us, and aren't just ogling us. I hate that! Yesterday I would have been totally embarrassed, but you've made me feel beautiful and worthwhile. I don't feel cheap, I feel loved, and seeing you look at me like this gives me butterflies inside. I doubt I ever go without a bra any other time, but I like this. I feel safe and valued for more than just a set of tits.\" I felt like I had accomplished something at least today. I spun the bottle, and it landed on Jennifer. She got a devilish look on her face and looked over at Susan. \"Susan, Jason said he didn't get a look at your boobs when we were swimming, but he just felt them. I think you ought to pull your shirt up and let him see them for thirty seconds. That's about how long it took me to get my suit back up, although it felt forever!\" \n\n\"Hey, wait a minute! That's not fair! We haven't been showing skin!\"\n\n\"Remember, YOU asked how far do we go when we started, and I said anything goes except actual sex?\" said Jewels. \n\n\"But he's your boyfriend!\"\n\n\"That's OK, too. Remember I said anything goes, that this is your chance to ask anything, that you may never get this chance again? This fits that category. Look, you and Jennifer are my best friends. If I had a sister I couldn't ask for better! We all were scarred and our self-images were trashed by those pictures we looked at without the maturity to understand. That is why I asked Jason to go along with me in this game, and with the Chicken Fight, although\" and she giggled, \"I didn't expect to be showing off skin like that. For tonight, let's just let things happen. As long as we respect each other and have fun, I don't care what happens. I'm willing to share up to that point.\"\n\n\"OK,\" said Susan, but she looked daggers at Jennifer. \"You'll get yours missy! Her face was very red, but she slowly started raising her shirt, but stopped when she was just showing the bottom swell of her breasts and said, \"How are we going to time this?\"\n\n\"I've got my watch,\" said Jewels. \"Jennifer might not stop at thirty seconds\" and she giggled, while Jennifer stuck her tongue out at her. My cock was twitching and leaking as I sat there seeing the bottoms of her breasts, knowing I was about to see the third set of breasts I had ever seen in my life, and that it was OK to look all I wanted. Susan lifted her shirt up the rest of the way and I was awestruck. They were just about the same size as Jewels, but she had big dark areolas and nipples. \"Beautiful!\" I said. \"Those are absolutely gorgeous!\" Jewels called time, and Susan lowered her shirt. She looked at me with big eyes and said, \"Did you really like them?\" \n\n\"What do you think?\" I asked. She looked me in the eyes and then she noticed my cock pulsing in my boxers and smiled really big. \"I think I've been complimented. Thank you.\" Jennifer spun the bottle and it landed on Susan. \"Well, well, missy Jennifer. I think you have short-changed Jason. When you pulled my bathing suit down he got to feel my boobs against his head when I tried to hide them, and then he felt me slide them down his back. I think he should take his shirt off like when he was swimming, and you should climb up on his shoulders and take your shirt off, then hold your boobs against his head and then slide them down his back slowly.\"\n\nJennifer blanched. \"That is going a lot further! I just had you show him like I had to when you pulled my top down. I don't think Jewels is wanting us to go that far!\"\n\n\"Oh, I don't have a problem with it. Remember, I said anything goes. I don't think Jason minds.\"\n\nDoes Jason mind? Are you crazy? I was waiting to wake up from a wet dream!\n\nJennifer stood and walked slowly over behind me. I got down off of the stool and squatted down so she could climb up onto my shoulders. Susan spoke up. \"You didn't have those long heavy shorts on when you were swimming. Maybe you should take your shorts off and sit on him wearing your panties.\" This was just getting better and better! Jennifer didn't want to, but she stood behind me and said, \"You can't peek, Jason. You didn't see Susan, so you can't see me either.\" \"OK,\" I said. \"I didn't look at Susan on purpose, just like I turned my head after you lost your top.\" \"That's right, you did. Thank you. You are a gentleman.\" I heard a rustling as she took off her shorts and then climbed onto my shoulders. I know, panties don't really show more than a bathing suit does, especially full briefs like Jennifer was wearing, but panties aren't lined, and the brain knows panties aren't the same. When she settled onto my shoulders and her pussy nestled up against the back of my neck my cock jumped, and Jennifer giggled. Her panties were like her bathing suit though in one way. They were definitely wet! She was turned on for sure by all of this. As I started to stand up she was squirming up against the back of my neck and rocking her pelvis. I thought I would come in my boxers! I stood all the way up and told her, \"Be careful. I don't want you to fall. There isn't any water to catch you.\" I felt her movements as she pulled her shirt up over her head and then with it held in one hand she leaned down and squeezed her little breasts against both side of my head, and then slowly slid down my back rubbing them all the way down, even across the back of my boxers. The little minx did make one change from what Susan had done, though. To be sure she didn't fall she wrapped her arms around me and slid her hands down over my belly and across my boxers and pulling my cock as her hands went by.\n\n\"Hey, that's cheating! I didn't touch him when I slid off!\" said Susan.\n\n\"You lose.\" Said Jennifer, and she rubbed her breasts across my back one more time before pulling her shirt back over her head. I noticed her nipples were really hard and poking out through her shirt. She walked back around to her seat without putting her shorts back on, saying if it was just like wearing her bathing suit she wasn't going to bother with her shorts. I was actually starting to get a little concerned about how things were going. Jewels and I had wanted to help with their self-esteem, not try to turn them into promiscuous sluts. I must have shown some concern on my face, because Jennifer piped up and said, \"Don't worry Jason. I'm not going to go crazy after this. We're just having fun, and we trust you. We know you wouldn't do anything to hurt us, and what happens today happens today. None of us will talk about it. This has just been so liberating I feel like celebrating that I'm desirable! You make me feel valuable and cared for. Jewels is a very lucky girl.\"\n\nJewels leaned over and gave her a hug. \"Good. That is what I wanted so much for you guys. I know how badly I felt about myself until Jason talked with me. Now, somebody needs to spin the bottle!\"\n\nSusan reached out and gave it a good spin. Finally it landed on me. \"Jewels, when you were wearing that 'Itsy Bitsy, Teensy Weensy, Yellow Polka Dot Bikini', I didn't notice any hair. Did you trim or shave yourself?\" It was her turn to blush. She had had it too easy for a while now. \"I shaved it.\" That brought quick comments of disbelief from the other girls. \"That's what took you so long to shower this morning!\" said Susan. \"Well, when I looked at that bikini you brought for me I knew I couldn't wear it and look like a forest around it, and I'd heard of other girls doing that, and Jason made me feel so sexy I just decided to try it.\"\n\nJewels quickly spun the bottle trying to get the attention off of her. It landed back on her. She thought for a minute and turned to Susan and said, \"Jason is sitting down there in only his boxers, and Jennifer isn't wearing her shorts. Maybe you have too much on? Why don't you remove something. Your choice.\" Susan gasped. \"I think I'm going to need a little more wine before I do something like that!\" \n\n\"I guess a little more won't hurt, will it Jason?\" asked Jewels. I thought for a moment. I didn't want to take advantage of the situation, tempting as it was, but it had been a while, and while everyone's inhibitions had been lowered not one seemed to be getting drunk. I felt responsible to not allow that. \"OK, I guess a little more won't hurt.\" Jewels poured each of us half a glass, killing the bottle. Susan drained it in two swallows and stood up. \"Maybe I ought to ask Jason which article he would like me to take off? He's already seen my tits, but he hasn't seen my panties.\" She pulled the bottom of her shirt up to expose the bottom of her breasts before lowering it and unbuttoning her shorts. She made as if to lower her shorts with one hand while raising the shirt up again with the other, teasing me and watching the look on my face. Either way I knew I would never live another day like this in my life. She slipped her hand up under her raised shirt and cupped one of her breasts suggestively, then lowered the shirt and unzipped her shorts and slid them slowly down her legs. What she had not taken into account was the white lacy panties she was wearing. They had high cut legs and were translucent, allowing her pubic hair to clearly be seen. I couldn't see her pussy as such, but what I saw was delightful indeed. Jennifer said, \"Nice panties! I would have gotten some like that if I thought I was going to be showing them off!\" Susan looked down and saw what she was wearing and quickly sat down, blushing furiously. \"I forgot I put these on. I'm so embarrassed!\" \n\nJewels spun the bottle again and this time it landed on Jennifer again. \"Jason, do you masterbate, and if you do, when was the last time you did it?\"\n\n\"Yes, I do. And the last time was when we came back from swimming.\"\n\n\"Ooooh! Did we get you all excited this morning?\"\n\n\"You know you did. How could I not be excited after all of that?\"\n\n\"I think that's cool,\" said Jennifer. It looks like you are pretty excited now, too!\" Me excited? Just because the front of my boxers were soaked in precum and my cock was at full staff, and had been now for a couple of hours. I spun the bottle, and for once it came back to me. \"Jennifer, do you masterbate, and if you do, when was the last time you did?\"\n\nJennifer seemed to have really come alive with the revelation that she was an attractive girl with a great figure. She spoke right up, \"Yes, I do. It's probably been about a week, but I know it won't be another night!\" She gave me cheeky grin, and spun the bottle again. This time it landed on Susan. \"Jewels, you are the only one left fully dressed. I think you need to change that!\" \n\nJewels turned scarlet and whispered, \"I'm not wearing any underwear.\" That brought gasps from both Susan and Jennifer. \"Why not?\" asked Susan. \"Since I shaved it, it just feels so free! I just didn't want to put any on it.\" \n\nJennifer piped up and said, Jason has never seen a shaved pussy, has he? Maybe you ought to show it to him!\" Susan voiced her agreement, and who was I to argue! Jewels shrugged helplessly and stood. She hesitated for just a minute and then started to slide her booty shorts down her hips. My mouth was dry and my tongue felt thick. I didn't think there was any oxygen left in the room. My Jewels was going to show off her newly shaved pussy in front of two of her friends, too. The tension was palpable as she looked me in the eye and said...\n\n\n\n(More later. I hope you enjoyed.)"
    ],
    "authorname": "Callicious",
    "tags": [
        "friend",
        "spin the bottle",
        "beach",
        "exhibition"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/jewels-the-next-day"
}
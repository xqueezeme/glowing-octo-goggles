{
    "title": "14 Hours Pt. 02",
    "pages": [
        "Upon further conversation with Kori I am told I was with her from nine to eleven. That's two hours accounted for. Two out of fourteen, but progress is progress. Unfortunately she doesn't know where I went after that, so not even a lead to go off of. Finding those two hours invigorated me to find the rest. \n\nI remembered I had Kori's number in my phone before I even remembered her. Sitting at my desk I scrolled through my contacts to see if I saw any names I didn't recognize. Only one other name wasn't familiar. 'Lili'\n\nGoing through my texts I don't see anything else. My pictures on the other hand were a collage of selfies with myself and whoever the hell everyone else was. Kori is in them too, and I somehow talked her into taking a picture with her tits pressed together, looking up at me like she was waiting for a present. Then another of her spread out on her bed, completely naked but her arms covering her breasts with her other hand over her pussy, looking very shy and vulnerable. There was another girl naked on my phone, and it's not Kori.\n\n\"Who the fuck?\" I ask aloud and try to think if I know her prior to Adderall night. I seemed to have known her very well that night. I flip to the next picture and it shows her spread out naked as well, only not covering like Kori. Slender redhead with small tits, or maybe it's just the angle. Her hair is like a pit of fire over her head, and she has a little bit of hair like Kori, the same color. A full on fire crotch. \n\n\"I guess that redhead stereotype is true,\" I say and flip to the next picture. She's looking up at me with my dick in her mouth. \"Very true.\" I flip to the next picture and it's me pounding her doggy. \"Very very true.\" Next picture is her riding me, and nope, tiny tits. \"Okay then.\" Scroll left, and she's licking my cum off her lips. \"Seriously.\" \n\nI'm excited and worried at the same time. Excited that apparently I do have it in me to go out and fuck half the world, that's definitely a confidence boost I needed. On the other hand I'm kind of dating Kori...not kind of, I am. No sense in being the guy who weasels out with undefined terms. Kori is my girlfriend.\n\nThen I notice the pictures of the redhead are before the pictures of Kori. I'm now reassessing who I lost my virginity to for the second time. I saw her between seven and nine P.M., but I don't even know where to start. \n\nI find my clothes from that night that I still hadn't washed because I'm lazy and search all of the pockets. This should have rightfully been the very first thing I did, but at that point I didn't know I was taking pictures of myself giving a redhead a facial. In my back pocket I find a crumpled up hundred dollar bill with a lipstick stain kissed into it, chapstick but not my chapstick, and matches to a bar called the 'Sink'. \n\nHow the hell did I get into a bar? I search my wallet and I find an ID that's mine, but not mine. It's a fake ID that says I'm twenty two. Between seven and nine I acquired a fake ID and went to this bar where I met fire crotch, wooed her with some crazy adderall voodoo magic to the point she's licking me off her face like frosting. Adderall me accomplish more in two hours than I had done in eighteen years. \n\nEven with this lead I still decided to meet Kori before I proceeded. I didn't want this to be the story where the guy hides things until they blow up in his face at the worst possible moment. I met her at 'Oh My Books' as she was getting off and we walked in the downtown area of our town. Small town feel in a town with twenty thousand people, but the old town still looks old. Both sides of the street lined with two story buildings, the city council, police, and roughly a dozen mom and pop stores. We're going to 'Cafe Le Coffee', guess what they sell. Ignore the stupidity of the name, I obviously do. \n\n\"Make any progress on that mystery night?\" Kori asks after we order. She's still in her work shirt, but she put on a hoodie to appear like she was off work. \n\n\"Yeah, about that,\" I start, still plotting in my head how I planned to explain this, \"I think I got a lead.\"\n\n\"What was the breakthrough?\" Kori asked, and I showed her the fake ID and bar matches. \"Holy shit, that might explain the memory, alcohol and any pills don't mix well.\"\n\n\"When I got to the poetry read, did I come with someone?\" I asked, Kori really thinking before shrugging.\n\n\"You sure didn't leave with them,\" Kori said with a laugh. I smiled. \"Not sure, wasn't really paying attention, it was dark.\"\n\n\"I might have went to this bar before we met. We took some pictures that night.\"\n\n\"Oh god, you kept those?\" Kori asked, red as an apple now. The image of her cutely hiding her breasts with her arm flashes across my mind.\n\n\"I'm keeping those forever,\" I say, her covering her face in embarrassment, smiling through her fingers at me. Now or never.\n\n\"I really like you, and regardless of my memory of that night, I'm glad we met. The last thing I want to do is lie to you, even if by omission,\" I say, Kori dropping her hands. I open my phone and show her the redhead naked and spread out. \"Scroll.\"\n\nI have a pretty good guess at what picture she's looking by her eyebrows. Raised in shock for the naked pose. Parted wider for the blowjob. Narrowing as she's watching me fuck her. Straight line in disgust from the finale spray. \n\n\"Before or after you met me?\"\n\n\"Does that matter?\"\n\n\"Yes, it does,\" Kori says back. Did she just give me an alibi? \n\n\"Before, the next picture is us,\" I answer, her scrolling and seeing her tits pressed together. \n\n\"She was at the poetry read, she's at all of them. Her name is Lili,\" Kori said, handing me back my phone. So she's Lili, at least I'm not looking for two girls. \"I know we didn't meet under anything resembling normal circumstances. All I ask is you come clean with anything you find out, or anything you did before we made this official.\" \n\n\"I fucked Samantha North in the basement bathroom last week,\" I say, and fuck was that liberating. Please don't be a shit test.\n\n\"Who hasn't.\" Is all she says. \n\nOur coffee arrives, and I have a burning question. Kori is extremely shy and guarded, so why did she do anything with me?\n\n\"I have to ask, why did you take those pictures, let alone sleep with me? You legitimately are not that kind of girl, I know you're not.\" I say, her looking at her coffee before looking up. \n\n\"You came clean, I guess I need to as well. I've had a plan my entire life. Started working the moment I could, graduate, college, work more. I didn't plan for boys, or sex. I can get on a pill and be good, but I'd rather just avoid the entire thing. No boys, no relationships, no distractions.\"\n\n\"What changed?\" I asked.\n\n\"Cancer threw a monkey wrench in my plan,\" Kori said, and pulled her hoodie open and pulled her shirt down to show her right shoulder. \"Melanoma, treated, and I go in every six months for follow ups. The surgery was two months before we met.\"\n\n\"Treated? Like you don't have it anymore?\" I asked.\n\n\"If you catch melanoma early it's fine, treatable with surgery. Remove the cancer and make sure it didn't spread or come back. Long term it'll be like it never happened. If you don't catch it, you're pretty much dead, and knowing I came that close...no sane person just continues unscathed.\" \n\n\"Still doesn't explain why we happened,\" I say, her tilting her head and smirking. She has to know what the cute does to me. Kori wields that like a club. \n\n\"I've been doing a lot of things I never thought I'd do, at least not now. I haven't gone completely crazy with drugs or anything, but a really cute guy who's not afraid to do wacky poetry? He's funny, then he's sexy, then he's asking me to press my tits together and pose nude before he bangs me. Then he leaves when I fall asleep.\"\n\n\"Adderall me is a...\"\n\n\"Dick, I know, but coffee is usually code,\" She says as she stirs hers with a small spoon. \"I was kind of hoping you meant the euphemism.\"\n\nWithin three minutes we're at her house, her parents at the store. We came in from the back door so they couldn't see us. Straight to her room, door closes and I'm peeling her clothes off fast. Hoodie unzips and falls to the floor. She takes her shirt off as I yank her pants to the floor, her nearly tripping over them as she's back peddling to her bed. \n\nKori's room is very plain, but then again she was a very plain girl before two months ago. No posters of bands or boys. Just a date calendar, an organized stationary, and deep blue sheets. Her own room almost looks as redundant as a college dorm with the same furniture door to door to door. \n\nI fall on top of her, tumbling onto her bed. Our lips are locked, my hands tracing every inch of her body. Bra goes flying, landing on her computer, panties cartwheel across the room, landing on her door knob. We see it dangle off the knob and we both laugh, one in a million shot. I make her stop laughing and start moaning by licking her pussy. She tugs on my hair and gasps. \n\n\"You didn't do this last time,\" she says and squeaks. If she doesn't stop being cute I might cum before she even touches me. \n\nI slide my fingers into her, and she makes a new noise, not cute, just sexy. A deep groan then, followed by another she holds like a note when I finger and lick her clit at the same time. I flick her clit with my tongue and she gasps. I finger harder, wiggling my finger inside and she moans. She's like an instrument now, I'm plucking and strumming her into a chord of moans, groans, sighs, gasps, and squeaks. Stop being cute dammit. \n\nHer sound crescendos into a yelp, Kori gripping the sheets, her legs dancing, body swaying like it's trapped in a wave. \n\n\"Holy fuck, that's an orgasm?\" Kori asks, out of breath. She pushes me up and starts undoing my belt. She stops for a moment and pulls my phone out of my pocket as she pushes my pants and boxers to the floor. \n\n\"What's up?\" I asked.\n\n\"I wonder, if you wanted to take those pictures, because Lili was so fun,\" Kori said, opening my phone and scrolling through. When did she learn my password? \"You know she's a college girl?\"\n\n\"What?\" I ask and Kori drops her mouth on my dick. She tries to take it all the way, but I guess Samantha wasn't kidding, she can't even get it halfway. Kori pressing her lips toward the shaft and pulled back. Her mouth comes off and I instantly feel cold.\n\n\"Get a picture of this,\" She says, handing me my phone and sucking me again. I aim the camera, she's looking up at me and I take the picture. She pulls out and glides her tongue up.'Snap'. Kori then rests my dick on her tongue. 'Snap'. Her eyes strained from attempting and failing to deep throat. 'Snap'.\n\n\"That skinny redhead bitch will have nothing on me,\" Kori says, then lays down on the bed, opening herself up. \"She has four pictures, I want you to turn me into a photo album.\"\n\nI wrap up and plunge into her. Both legs spread wide, taking me to the base. 'Snap'. One leg over the shoulder. 'Snap'. Flip her to doggy. 'Snap'. Having her take the picture from under her. 'Snap'. She's on top. 'Snap'. Pressing her tits together while on top. 'Snap'. Reverse cowgirl, her pulling her cheeks apart for a better view. 'Snap'.\n\nWhen I say I'm close she takes the condom off and goes straight to jerking me and sucking me. \n\n\"Where do you want to put it?\" Kori asks. Please don't be a shit test. I place her on her back and jerk off next to her face. I hit video instead of photo. \n\n\"Open your mouth,\" I say, and she listens with no hesitation. I feel it and I start to shoot, the first spray landing straight on her tongue. The second spurt hitting the side of her chin and slithering to her tits. Next one is a direct hit in her mouth, and she gags a little before spitting it out, it running off the side of her face. She assumes I'm done and inserts the tip into her mouth, but I cum a little more, and I film her struggling, but successfully swallowing. \n\nFin."
    ],
    "authorname": "CaffeineFetish",
    "tags": [
        "pictures",
        "photoshoot",
        "school girl",
        "facial",
        "blowjob",
        "doggy"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/14-hours-pt-02"
}
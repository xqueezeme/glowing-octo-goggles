{
    "title": "My Little Ventrue Pt. 02 Ch. 04",
    "pages": [
        "Author's Note: Second edit pass complete! Check out my bio for details.\n\n~~~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~~~\n\n~~Jack~~\n\nEvery time he woke up, it was a shock.\n\nJulias had said a Kindred doesn't really sleep, cause how could a corpse sleep? They just become a corpse, and when the sun sets, they un-corpsify. Each and every time, it was like someone jammed adrenaline straight into his heart. He sat up in his bed with a jolt, and could feel the Vitae spike through his system to wake him with its unnatural power.\n\nBut then it settled. He'd grown more comfortable with his new body, its strange, thinned and pale skin, its strength and durability, and even the beast that now lived in his chest. He looked around, and smiled at the world around him. It was his apartment, and it was a really, really, really nice apartment, like the one Julias had before he'd been promoted. The place locked down automatically during the day, so he didn't even need to worry about accidentally getting himself killed in the sun.\n\nHe took some time to look at himself in the mirror. The scars were still there on his stomach, a painful reminder of the circumstances of his embrace, but other than that he really liked what he saw. Sure, a Kindred was pasty white and unusually thin unless they blushed life, but everything else looked great. And it always would. He no longer aged, and every day he'd revert to the condition he was in upon embrace while he slept. He was god damn immortal.\n\nAs long as he kept drinking blood, that is. He pat his belly, half expecting it to growl either from gurgling stomach acids that no longer existed, or from the famished beast that lived next to his withered heart.\n\n\"Wow, poetry?\" he said to the mirror. \"Antoinette's rubbing off on me.\"\n\nThe apartment didn't have two floors like Julias's, but it had three bedrooms -- two completely unused cause what the fuck did he need three bedrooms for -- and a connected living room and kitchen. All sleek, stylish and cool-colored cupboards and walls, with a window to overlook the city from high high high up in his apartment. Hell, Julias's old apartment was right across the street.\n\nHe walked around his apartment, naked of course. It was weird how there was absolutely no sensation of cold from the air on bare skin, not even a little, even when he opened his fridge. There was blood there, in the same sort of wine bottle Julias used. He reached in and got ready to down it straight, but rolled his eyes and put the thing back.\n\n\"Get a glass or get it fresh.\" He wanted fresh, of course. There was nothing quite like a cool drink when he was alive, but now he was dead and his dry insides demanded warm, thick blood to satisfy.\n\nHis mind drifted to Antoinette and her ghouls. Much as he loved the Prince, it was her ghouls that came to his mind when he was actually hungry. The feel of their young, healthy blood gushing over his tongue with the mix of hormones from arousal, and orgasm, it was all a glorious cocktail of taste and exhilaration. And then, there was the feel of their tight, wet flesh wrapped around him during the Kiss, and all the hot juices that came with climax.\n\n\"No! Fucking hell you stupid ass. Antoinette is busy today, Julias is busy today, so you have to take care of yourself. You're not some weak leech. You're a fucking vampire.\" He stabbed himself in the temples with his index fingers a few times, before rubbing his fingers along his buzzed head. \"Go hunt. Hunt. Hunt.\"\n\nHunt. Hunt. It sounded so easy. It's what Kindred did after all, and he'd more than proved himself to the Invictus and to Antoinette that he was capable. But the actual act of a solo hunt was just something he'd yet to do. Something always happened that allowed him to bypass it. Fuck that though, he was going to do it.\n\nHe got dressed in the typical suit of casual Invictus business, and tried to keep the memories of Mrs. Pavala from his mind. It wasn't his fault, he knew that, and the beast in his gut who'd killed her didn't care about her death or her family's misery at all. And then that made him think of his own family. Kindred had a dozen ways to fall into a spiral of depression.\n\n\"Maybe that's why I'm being such a pussy about this. Alone with my thoughts... ugh. Julias warned me, he did.\" He stood in front of his apartment's door, still closed, and bounced his head against it. Then banged. He'd been spending all his time with Antoinette, and his sire Julias, cause it meant he didn't have to think about this shit.\n\nWell, fuck that. He wasn't a pussy!\n\n~~~~~~~~~\n\nOk, he was a bit of a pussy.\n\nJust a couple week ago, he was riding high on his ego after a successful mission for Xnomina, and even higher after having slept with three women in a single night. But now he was standing on the sidewalk outside his apartment building, watching the nightlife walk by, taxis drive by, and he had no fucking idea what he was doing.\n\nSuddenly, the kine he was supposed to feed on weren't kine. They were humans. They had thoughts and feelings and voices.\n\n\"Social anxiety? ... really?\" He jabbed himself in the forehead with a finger. He was a Kindred. He was a fucking vampire.\n\nBut he just stood there, shuffling his feet, watching people go by. Paralyzed.\n\n\"Hey.\"\n\n\"Holy shit!\" He jumped, spun around, and actually landed on his ass.\n\nIt was Shark-mouth. She was leaning back against the door to the apartment building \u2014 she'd gotten behind him so easily \u2014 with arms folded against her stomach and one boot against the door. She really carried that badass chick thing well, complete with the tank top, leather jacket, ripped jeans, the works. She was using that nifty cloak of night thing Nosferatu and Mehket could do, but so close like this they could still talk.\n\nTo the kine, he probably looked like he was talking to his imaginary friend. Wonderful.\n\n\"Julias here? He wasn't at his place.\" She pointed across the street.\n\n\"His place? Oh, right, he said he hadn't shown you his new place.\"\n\n\"He moved? ... he didn't tell me.\"\n\nWow. If he didn't know any better, he'd think she was pouting. It was hard to tell with how her raven hair hid the sides of her mouth, but he doubted it'd be any better if he could see her massive array of huge teeth. \"He took Alder Honors's mansion for his own.\" He tried to sound adult, proper, royal, but it just didn't sound very good on him.\n\nWith a small wince, he got back up and dusted himself off. Presentation was important, even to a Nosferatu, or a rebellious Carthian. But adjusting his suit and tie only made the damn monster girl chuckle. She was infuriating, and scary.\n\n\"Wait wait, he's got Viktor's old place? Shit man, in Rich Side?\" She pushed away from the door, and a mad grin crossed her lips, big enough he could see the shark teeth peak through.\n\n\"Right, Rich Side. Ok? I'll be seeing you.\" He gave up on the fake royal demeanor waved her off before he started walking down the street.\n\nA moment later, she was walking next to him. She definitely had guts for a Nosferatu, not for walking with him since he was just a pipsqueak, but for walking along in the crowd of kine. She tilted her head, avoided eye contact with kine who stepped too close, and otherwise kept her discipline going just enough so kine's eyes just glided off of her. It was impressive.\n\nAnd he'd much prefer to make his mistakes learning to hunt in private.\n\n\"What do you want?\"\n\n\"You're hungry aren't you? Please sir, I want some more?\"\n\n\"Oh fuck you.\"\n\n\"Ha!\" She reached out and gave him a pat on the shoulder, just hard enough he felt the claws on her fingers. \"Kid you are fucking hilarious.\"\n\n\"Seriously could you fuck off so I can\u2014\"\n\n\"You have no idea what you're doing, do you?\"\n\nHe looked up at her and gave her the meanest glare he could muster. It only made her laugh.\n\n\"Kid you got a Ventrue with a heart of gold for a sire and a Prince with blood bags by the dozens lined up for you. Not either of them has probably had to go on a proper hunt in decades. Antoinette, centuries.\" She chuckled more, wrapped an arm around his shoulders, and pulled him in close while they walked. \"Ain't neither of them who could teach you to hunt. Manipulate people and control them, sure, but hunt?\"\n\nHe grit his teeth. Julias was a tough fucker, and Antoinette even tougher, but Beatrice had a point. Neither of them were hunters.\n\n\"What's your point?\"\n\n\"I,\" she said, and poked his temple with a claw, \"am going to teach you.\"\n\n~~~~~~~~~~~~~~~\n\nThere was no way out. Between the dark and the street, there were only walls. As if he was herding sheep, the kine in the back alley stepped away from him with a hurried, uneven step.\n\n\"Who are you? Hey, don't try anything!\"\n\nIt was a woman, someone in her forties, in good health and well dressed in a nice, sexy nightlife dress made for clubbing. The dress was particular for its open neck line, and his eyes transfixed themselves to it. She couldn't see his face, not with the distant back light of the street behind him, and only blackness around them, but he could see every detail on her. With hunger bubbling up in his chest, the subtle touches of veins on her neck stuck out like a sore thumb.\n\n\"I said stay back!\" She started rooting through her purse, and before long she had out her pepper spray, but he kept coming closer.\n\nThere was no one around, this deep into the city's underbelly. No one who cared about a woman in an alley, anyhow. He had no idea how unsafe it was down here, this deep in South Side, but now that danger was his ally. So many dark alleys, barely any cops, and enough dirty money being thrown that nearly every street had some sort of unruly establishment. It made for easy pickings.\n\nShe reached into her purse, hands fumbling and zippers rattling. \"I'm warning y\u2014\"\n\n\"Look into my eyes, woman.\" He put on his best Julias voice. He was short, with no width to his shoulders or weight to his stance, but none of that mattered to a panicking woman all alone in a dark alley. And when he stepped closer so she could see his eyes in the shadow, he could hear her heart beating fast enough to hurt.\n\n\"I... said....\"\n\nQuieter, and quieter. Her voice faded until it was just a whisper. Her eyes locked to his, drifted half-closed, and when he moved his head to the side, hers moved with it. Even her heartbeat slowed rapidly.\n\n\"Look into my eyes.\" He came closer again, until he reached out. Would she break from his hold? Would she scream bloody murder? So close, he could smell her body, the natural scents of skin, the unnatural scents of perfume, and the hidden tide of blood within.\n\n\"I....\" Barely audible. When he finally took her wrist into his hand, she didn't pull back or flinch or even breath faster. She just held his gaze, and he held hers. Her consciousness had faded, and her eyes became a window to her subconscious. He had control.\n\nDon't think about your sister. Think about those thugs you controlled for that Xnomina deal instead. He didn't know this woman, and that anonymity was powerful. It took only a small bit of effort, the smallest push, and her weak and terrified consciousness knelt like a slave. He never considered himself to be the dominant sort, but to have a human just give into your will was... intoxicating.\n\n\"Expose your neck.\"\n\nShe tilted her head to the side, reached up, and brushed her hair out of the way. Her eyes had grown dull, subservient, and her breathing was smooth and calm.\n\n\"Turn around.\"\n\nShe did as told. So easy, so effortless. Intoxicating wasn't a strong enough word for the rush of power he felt controlling her. He took a step nearer to close the distance, put his hands on her stomach and hip, and took a deep breath of her neck. The smell of life, blood, even the musk and perfume, it spoke to that beast in his gut and mixed into his senses like thick incense.\n\nAnd when he bit into her, it all came together in that orgasmic mixture of sweet, warm, flowing blood gushing up into his mouth. Tight lips, don't spill a drop, drink it all down until the flow slowed. He remembered, from Antoinette and Julias, remembered how to keep the victim alive. For the moment though, he let his beast rule, and drank with wild abandon. She didn't mind, and even let out moans of bliss from the power the Kiss had. Just like with Antoinette's ghouls, just like with the kine he'd fed on when with Julias, the woman melted and gave in.\n\nA minute later, he opened his eyes, and lowered the now unconscious woman to the ground. He spent a moment to make sure she was leaning against the building wall, and despite himself, even checked to make sure he could still see signs of life. It was important she was still alive.\n\nBeatrice landed beside him with a loud thud. She'd been watching from above, and it was her guidance that had lead him here. She showed him how to pick a target, follow them, guide them with bits of scary noises, moving shadows, and knowledge of the city's layout.\n\n\"You let her live.\"\n\n\"What? Well... yeah, course I did.\" He tilted his head to the side and scratched his buzzed hair. \"Is that... do you not?\"\n\nShe shrugged. \"I usually let them live. Sometimes though, you find a kine that really just deserves to die.\" With a quiet chuckle, she brought her claws up to her hair, and moved it aside to expose her shark teeth so she could pick at them. \"But some Kindred kill at their whim. They're just kine, blood bags, sheep, and you're the wolf. You can too.\" She reached out with that claw then, and poked him in the forehead hard enough she actually pierced skin; and it did nothing, no blood or anything, because he was a Kindred.\n\nHe was a Kindred. Not a human, not really. He was a walking corpse.\n\n\"... just because I can doesn't mean I would.\" He frowned then and pushed her claw aside, complete with a painful wince. \"What sick fuck would just murder living, thinking, self-aware humans just because they can?\"\n\n\"Your grandsire for one.\"\n\n\"Then I'm glad I fucking killed him!\"\n\nShe blinked. He blinked. Oh shit. Oh fuck he may have just royally boned himself.\n\n\"Fucking hell. You set the fire that took him out!\" She grinned a smile that had him taking a step back. Those teeth were horrifying whenever she let them show.\n\n\"I... um....\" Shit shit shit. He looked around in a panic, but there was nothing and no one around. It was just a dark alley, an unconscious woman, and a Nosferatu Carthian who should very much not know what he just said.\n\n\"Don't worry kid, your secret is safe with me. You think I'd be fucking your sire if I just wanted to screw you guys over?\" She winked at him, but there was an obvious glee in her eyes. No poker skills at all, like him.\n\nShe was trustworthy... ish. Julias had taught him well enough to see that.\n\n\"Ugh, don't remind me.\"\n\n\"Ah god damn kid, you've seen me topless. Just think of all the things your sire does to me in the dark.\"\n\nEw. Ugh. Erk. Beatrice was attractive, sure, in a monster chick kind of way, and her shark-teeth-for-cheeks made her definitely interesting, and scary, but the thought of his sire fucking her was disturbing. Kind of like picturing your dad fucking someone.\n\n\"Speaking of sex!\" Beatrice peaked down the alley to make sure no one was coming into the dark, then sat down on the unconscious woman's lap. \"Gimme the scoop!\"\n\n\"Uh, she isn't going to wake up?\"\n\n\"Fuck no. You drained her good. In a few hours she'll wake up and this'll all be a hazy memory.\"\n\n\"Um... alright. Scoop?\"\n\n\"You and the Prince! My god man, you're banging the most powerful Kindred in all of Dolareido! Hundreds of Kindred in this city and your first hook-up is the mother fucking Prince. Gimme something!\"\n\nHe did not expect that, not at all. Most of the Nosferatu he'd dealt with were quite closed off and aggressive. Beatrice was certainly aggressive, but she was smiling and grinning in a genuine way he couldn't quite understand. A happy Nosferatu was paradoxical. \n\nHe wasn't exactly keen on talking about Antoinette with her, but he did owe her. And she had him by the balls with his slip-up.\n\n\"Are you going to the ball with her?\" she said.\n\nArg, the ball. All the Kindred would be there. At least, the Carthians and Invictus would, and Antoinette. The Circle of the Crone never came to those gatherings, thank god. Jacob was a scary fucker.\n\n\"Yes, yes of course but....\" He looked around, as if someone else may be listening. Just him, the monster, the unconscious woman, and the dark. \"Fucking terrified of dancing in front of hundreds of Kindred.\"\n\nThe laughter that erupted out of Beatrice was almost deafening. \"Fucking surrounded by vampires, all of them older than you and looking for any edge they can find, and you're worried about your dancing skills?\"\n\nHe shrugged. \"Wouldn't you be?\"\n\nShe tapped her chin a few times with a claw. \"You know what? I probably would be too.\"\n\n~~~~~~~~~~~~~~~~\n\n~~~~~~~~~~~~~~~~\n\n~~Beatrice~~\n\nShe could never whistle, not since she got her shark teeth, but she tried anyway. It was a huge mansion. Huge! Dare she say, it was the biggest place in Rich Side. And her boyfriend owned it. She tried to hide the grin on her face, even wipe it away, but it remained. There really was something hot about Julias and his rise to power, complete with the suits to go with. Her old Carthian friends would laugh, hell she'd laugh if she'd known she had such a kink.\n\nBut she wasn't about to just walk up to his front door. He had a big, fancy place, and she was sure in typical Julias fashion that he'd let his guard down with his naivete. So she crept through the shadows and worked her up toward the huge building, which was not easy with its large array of windows on its antique, Victorian design. Whatever, that was Viktor's shit, but it did mean she had a lot of windows to keep track of as she approached, even with her cloak of her night hiding her.\n\nIt'd been a few days since Jacob had marked her with his Cr\u00faac. That insane rush and elder mastery of the discipline was gone, but she was still a damn pro. Pro enough to sneak up on her white knight, at least. There were small hills, trees, and holy fuck there were statues holding pitchers of water and everything. It was so disgusting. She loved it.\n\nShe went around back. Christ there was a fountain, huge and pouring water over an array of some kneeling statues before a tall... Viktor. The fucker had a statue of himself. The hair was different, but she recognized the cheek bones of the twice dead bastard. Around the base of the statues were yet more statues of various predators and scavenger animals. Typical Ventrue, thinking he lorded over the animals and the kine.\n\nOne of the small animals waved. A rat, a real one. She looked at it, it looked at her, and it waved again. Why the mother fucking shit was a rat waving at her?\n\nHow had she not smelled it? Shit, she was downwind, so the fucker must have sneaked up on her. And to top it all off, the rat was pointing at the back door of the mansion. Rats didn't just randomly stand up and point at things, but this one was.\n\nFor fuck's sake. With a loud grump, she got up, let her cloak of night fade, and opened the large door. It was one of those heavy doors of colored wood with ornate carvings of historical figures she'd only seen on book covers.\n\nShe was not prepared for what was inside. Massive, spiral stairways, pillars, couches with elaborate patterns and what must have been the softest fabrics from a billion years ago. On one of the couches that pointed toward the entrance she'd come in through was Julias, one leg folded over the other and a smirk on his face.\n\n\"Alright, alright, you caught me.\" She put up her hands. It was his rat, the dirty rat. Damn Ventrue and their rats.\n\n\"Think the Invictus would have given me this place if I wasn't strong enough to protect it?\" He got up, gave her that cocky smirk, and walked to her.",
        "All she had to do was smirk though, and that cocky smirk of his was gone and replaced with his old white knight self. The dumb bastard, smart as he was, didn't have a cruel bone in his body, and she took full advantage. She stepped up to him, and gave him a quick kiss. It was more than enough to make him surprise blink.\n\n\"Hey.\"\n\n\"Hey,\" he said, head tilted and eyebrow raised. \"You seem in a good mood.\"\n\n\"I am.\" Extremely happy!\n\nShe'd told Jacob about Damien, and what she'd seen him do once he'd left the underground compound. And Jacob had nodded, greeted her into the circle, and said she was free to do with the information as she wished. Right now, she had no idea what to do with it, but the power and choice was making her high. She'd warn Julias about the Lancea et Sanctum, but his goonies would have already told him. They didn't know that she knew, though.\n\n\"My god this mansion is huge. So many rooms!\" She looked down the hallway where wooden chairs with cushions and end tables waited. The other way, a spiral staircase. The other way, the main entrance room where two staircases ended in a glorious display of wasted space.\n\nIt was such a turn on.\n\nShe took Julias's hand then, and started walking. He complied without a sound, but very confused. \"So, which bedroom did you have my box of goodies in?\"\n\n\"Oh,\" he said, and the light clicked on over his head. \"Sure, this way.\"\n\n~~~~~~~~~~~~~~~~\n\n\"Oh my fucking god.... Ok, I admit it, this is so fucking awesome.\"\n\nThe bedroom was gigantic. Big big big big bed, four posts, fluffy blankets of royal purple \u2014 fucking purple! \u2014 and massive pillows. The walls were drapes and curtains between fitting mannequins, and each mannequin was wearing some elaborate dress suit from probably hundreds of years ago.\n\nAnd she was going to fuck on that bed. A lot. Nearly every day if she had any say in the matter.\n\n\"Viktor wasted much for extravagance,\" Julias said, and he stepped around her to show a small frown. \"I'd meant to bring you, but\u2014\"\n\n\"Whee!\" She jumped up, spread out in the air, and belly flopped onto the bed. With expected delight, it bounced her back up a foot before she got to settle in. She looked over her shoulder at Julias, who was beyond bewildered, and she turned on the blush of life with a wink. Tone returned to her skin, her heart started pumping again, and the feel of blankets on skin became even more euphoric.\n\nHe chuckled, outright laughed even, and also began the blush of life as he approached her. \"I had no idea you'd enjoy this sort of thing so much.\"\n\n\"Decades spent living in rundown and abandoned buildings, Julias. Decades. Even when I was alive, nothing like this!\" She kicked off her jeans with a laugh, and threw them at Julias at just the right angle they fell on his face and shoulders. He didn't seem to mind, and smiled at her from between their legs.\n\n\"So, look at this.\" She got onto her hands and knees, and arched her back like a stretching cat. The effect was her ass in the air, and to make things even better, she'd worn a thong. A tight, black thing that was a little lacy, but mostly just a thin strip that covered what might as well have been nothing. Micro thongs were the hottest. \"You have any idea how uncomfortable ass floss is?\" Uncomfortable, sure, but she had a large, toned ass, and the thong really brought out those curves perfectly.\n\nPoor Julias's jaw had dropped. \"Damn.\" He walked toward the bed with that same confident swagger he always had, but it was in stark contrast to his face. He was mesmerized. Had she found his weakness? His eyes were glued to her exposed ass cheeks, and even as he reached under the bed to pull out her box of goodies, he didn't break his gaze. Yeap, he was an ass man, and she had the legs and ass of a yoga god.\n\nMemories of Othello, the woman in his lap, and her ass spread open on his cock, jumped into her mind.\n\n\"Hey.\" She grinned a big, delightful grin. \"You know I never really thought about it, and I only just realized it. We're vampires, and that means,\" she said, and reached behind her to give her ass a slap, \"no prep work needed for some fun. One-hundred percent clean.\"\n\nThe look of genuine surprise on his face yet again made it all worth it. She was the one throwing the curve-balls tonight.\n\n\"You sure? I mean\u2014\"\n\n\"Hell yes I'm sure.\" She looked around, grabbed one of those ridiculously expensive-looking pillows, and put it under her hips so she could lay down on her stomach. This way she got to relax, and keep her ass in the air.\n\nThe old tingles of excitement started to spark on her toes and up her legs. She loved anal sex when she was alive, if she could find a man who actually knew what he was doing. Julias had a hundred years under his belt; he most definitely knew what he was doing.\n\nHe started to undress. She found another pillow to put her head on, and turned her gaze to watch her man get out of his suit. Something about the way he undid the tie, slipped off the jacket, undid the buttons, it all reeked of confidence. And strength. The damn Ventrue had a lot of years on her, but it was more than that. It was in the size of his shoulders, the thickness of his arms, his height, the hard jaw despite his soft smile, and how he wore that ridiculous haircut of slicked-back blonde hair so well.\n\nWhen he was finally naked, she took a good long look at his cock. Excitement turned to just a touch of panic. Julias was a very well-endowed man, and sure that was awesome for a rough-loving girl like her, but it was a little more complicated for anal sex.\n\nBut the big guy sat down beside her, and all it took was a gentle finger running along her thigh to break her. She let out a quiet murr before burying her face in the big pillow. With her hips raised on the other pillow, she wriggled around, got comfy, and took peaks over her shoulder to spy on Julias and whatever he was going to do.\n\nHe spent a couple minutes just massaging her ass with deep, drawn-out motions. She rolled her eyes and kept quiet, since there was no use in trying to coax the big bastard to do anything fast. He liked slow. Those tingles between her thighs were getting stronger though, and that fake warmth from the blush of life wasted no time. \n\nHe finally slid off her thong, and she let out a pleasant sigh. \"Come on,\" she said, \"some of us have places to be.\" She dipped her hips around left and right, squeezed her thighs, grinded them down against the pillow, and spread her legs nice and wide to expose everything for him.\n\nHe just chuckled.\n\nShe was about to protest, but instead let her head sink into the pillow, even chew on it a bit with her huge shark teeth, as Julias started to massage the lips of her cunt. He knew just how to tease her folds, just where to press and rub near her insides to make her muscles clench. When his fingers found her clit, it all just came together in a perfect array of pampering. She'd pay him back later with a good strip dance and lap fuck or something, but for now she just let him spoil her.\n\nShe let out a high-pitched meep when something cold landed on her ass. \"Hey! Oh... ahaha.\" Over her shoulder, she watched Julias drip copious amounts of the lubricant from her box down the crack of her ass. Like, a lot. He just let it pour, until even she found herself a little worried for the pillow. \"Yo, the bed is soaked now.\"\n\nHe shrugged with a knowing smile. Once he'd thoroughly soaked her, he put the bottle away and resumed gently massaging her clit with his thumb. She thought it was his thumb anyway, not being able to see between her legs from the angle. But that circular, loving motion of it along the swollen nub, and how it teased her clit-hood piercing just right definitely meant thumb. She'd grown quite fond of that thumb.\n\nHis other hand though sneaked its way along her back and tickled her spine. If she were still kine, she'd have started breathing faster in anticipation. Those fingers roamed up and down the small of her back, nudged her shirt up to tease more of her back, before inching their way down to her ass. Just when she was about to say something, that thumb making love to her clit slipped into her cunt between muscle clenches, and she let out a surprised squeal.\n\n\"Hey! Cheater.\" She leaned up on her hands and arched her back to look behind her, but she only managed a quick glance at the bastard's sly grin before she collapsed. His thumb reached into her pussy deep and pressed down toward her belly, hard. Like fucking lightning, powerful shocks worked up and down her legs and into her insides until she was shaking. Her huge claws pierced the ridiculously expensive bed, and her huge teeth took a chunk out of the pillow, but she couldn't possibly bring herself to give a fuck while an orgasm was working through her. She squeezed, clenched, wriggled and squirmed, and otherwise just laid there while Julias rubbed her g-spot down toward the pillow she was resting her hips on. Her juices gushed out with each hard clench of her muscles. Girl cum soaked her, splashed against his thumb, and trickled down her thighs.\n\n\"I think,\" Julias said once she'd stopped mewling into the pillow, \"you should come to the Prince's ball with me.\"\n\n\"Wh... what?\"\n\n\"You should come to the ball with me.\"\n\n\"I thoooooought.....\" She looked behind her again. Julias had started to caress and massage the rose of her sphincter. His other hand still had its thumb deep inside her slit, but now he was slowly working a finger into her ass. And she loved it. Something about the pressure, the spreading open of the muscle, the sinking sensation of his finger working her open and entering her.\n\nThe mountains of lube he'd used also made it easy. The big guy had big hands, big fingers, but he was slow and knew just how to lightly press in, give her time to adjust, let her relax, and then push a finger deeper.\n\n\"I thought we talked... about this.\" Quiet moans were mixed with her words, and her eyes were fixed on how his hand was moving between her butt cheeks; watching him slide his finger into her tight ass was half the fun. When his finger started to work on the second ring of muscle inside her, she lied back down and sighed with glee. So deep. After a few more delightful minutes, he'd managed to get a finger in down to the base knuckle, and he was pushing it down toward her belly and womb. Pressure, deep inside her in her belly, pushing down and into her abs from inside her ass. \n\nHe pushed into her further, sinking more than just the finger, but some of his hand as well. With time, he pressed down harder, until he was squashing her womb and deepspot through the wall of her insides and pushing them into the blankets. He pressed in a slow rhythm, but each time he pressed down until she felt like she was pinned, ass spread open and insides singing in bliss.\n\nChrist she was mewling like a cat in heat again.\n\n\"We did, but you're much easier to convince in this scenario,\" he said, and started to ease his finger out. She managed a small whimper, which sounded disgustingly girly, but god damn it'd been so long. Just when she was going to say something, he started to work two fingers into her, massaging the lubricant around and opening her up.\n\n\"I told... don't want to go... fucking ball.\" She could feel her juices soaking the pillow, coating her thighs, and joining the mess of lube everywhere. Two fingers were wriggling around inside her ass, pushing down toward her cunt, and putting pressure on that deep spot inside. Deep deep inside. When he got the two fingers into her ass past the knuckles, space inside her suddenly ran out, and her eyes were rolling up with the sensation of being so full.\n\n\"You sure?\" He started to press down toward her belly again, and this time he massaged her clit with his other hand until the juices were just pouring. \n\nShe tried to look behind her to watch, but the telltale signs of an orgasm put her head back down onto the pillow. It was different when it was so deep. A clit orgasm was like a sharp shock of pleasure, but the way he got to press down into her deepest parts got one of those powerful, full-body waves of pleasure orgasms going that she could feel from her core to her toes. Her muscles gripped down on his fingers between spasms, and more of her juices leaked from her cunt until the pillow was a lost cause. And he milked it from her, pushing those two fingers harder down against her until she could feel it pushing against her cunt and womb through her ass. The effect left her a wriggling, writhing mess of moans, and leaking cum.\n\nHe pushed harder, enough to sink her down into the bed. She came again, groaned into the pillows, and squirted against his hands so hard she felt the splash. He eased his play on her clit \u2014 thank god, the swollen nub had become so sensitive, any touch felt like fire \u2014 but the fingers in her ass were not so forgiving, and they started to work up and down hard enough to make her ass bounce. Her whole body convulsed, pleasure spasms tearing through her, making her toes curl and her feet kick at the blankets. She squirted again, and whimpered like a little virgin girl as a few more sharp spurts of her cum splashed against the pillow and her thighs. But at last, just seconds before she was going to start begging for a break, Julias eased up his finger fucking, and massaged her quivering walls with his fingers while her orgasms settled into blissful aftershocks.\n\n\"See, I think it'd be pretty amazing for a Carthian to be be seen with an Invictus.\" He removed his fingers, and she found herself clenching her muscles in spurts at the empty feeling. \"A member of the Invictus council, nonetheless.\"\n\nHe thought she was still a Carthian. Hell she thought she was still a Carthian half the time. Better everyone thought that, for now.\n\n\"Is that why? Politics?\" She managed to put her weight on her elbows, shivering included, and gave Julias the biggest evil glare she could muster.\n\nIt all melted away when he knelt down between her legs, and laid his cock between her butt cheeks. She tried to look back up at him, glare at him or something, but her eyes were stuck on how its length rested in the crevice of her muscles, and its head, swollen and demanding attention, nudged into the small of her back.\n\nAnd it only got better when he started to drip more lube onto it. He didn't give a damn about the bed either.\n\n\"I'd be lying if I said no. There's peace, and I'd like to keep it that way.\" He brought his cock back a ways, and with one hand guided the glans down between her toned ass cheeks to find her sphincter. The way he'd thoroughly worked her open earlier left her muscles still partly spread for him, and he used it to start easing his fat cock into her ass.\n\nHe'd only just started and it was already thicker than two fingers, but the man knew what he was doing, and went slowly. Very slowly.\n\n\"... and?\" she managed to say, before he sank a couple inches of his girth into her. Her rings of muscle squeezed on it and made her wince for a moment, but its flesh texture spread her open and continued to push into her, until her eyes were rolling up in her skull.\n\n\"And I think it'd be a great time. You, me, slow dancing.\" His voice got deep in that manipulative way he was so good at, until she could feel it against her. Then he leaned over her, put his hands down against hers so they were pinned down to the bed, and he started to lower himself on top of her.\n\n\"I hate... slow dancing.....\n\nSometimes she'd forget how physically imposing Julias could be. He was a smooth talker and all-around nice guy. He had no business being so tall, with such broad shoulders and thick arms, but when he got on top, she became the tiny girl hidden in his shadow. His big hands entwined with her claws, and his chest grew closer and closer to her spine as he sank further down. \n\nAnd the further he sank down, the deeper he went. Deeper, until he was deeper than his fingers went. With him right over her, she put her cheek to the pillow and looked up at him sideways, and did her best to not mewl, or panic. It was really deep.\n\nShe almost stopped him. It felt like there was no end to him, and when it felt like he was going to push up into her stomach, she opened her mouth to say something. But her ass and his hips aligned, nice and snug, and Julias let out his own quiet groan as he pushed his weight into her. She, on the other hand, started to tremble. She was trapped underneath him, his abdomen against her ass and pushing her into the bed, and it was so damn fucking hot she could already feel her toes curling. His balls resting against her soaked pussy lips only made everything better.\n\n\"I think you like slow dancing.\" His weight nudged forward, just enough to make her ass shift with him and the girth of his cock press down at a different angle. Then he eased back, still buried balls-deep in her ass, in the softest rocking motion he'd ever used on her.\n\nAnd it worked. That deep penetration sensation was scary, it was all such soft flesh inside there, but the way he put his weight down in that constant pressure pushing down against her womb was fucking wonderful. She squeezed her claws around his fingers between them, and let her mewls get louder as another one of those overwhelming climaxes worked through her like a machine.\n\n\"This is different... slow dancing.\" She managed a little energy, and pushed her ass up to meet him, but she barely had enough room to even wriggle. She could still squeeze though, and when the orgasm aftershocks weren't making her muscles spasm too uncontrollably, she did her best to milk the man's cock for him.\n\nThe groans he gave, quiet and just barely audible grunts over her head, would have sounded so corny in a porno. But they were real groans, and she was the one milking them out of the big guy, and that made it all so much hotter.\n\nHe kept that super slow pace of his for a good ten minutes. The bastard had so much patience, and no matter how much she squirmed and wriggled to entice him, he never started to fuck her hard. This time she was thankful for it. She laid there, and simply writhed in pleasure as he pushed his cock down against her deepspot until she came a couple more times. With her legs spread and with how he was burying himself to the hilt inside her, she could feel his testicles resting against her pussy lips; they were absolutely drenched in her cum.\n\nAnd when he started to cum inside her, he put his head down next to hers on the pillow, continued to fuck her in that slow, gentle, barely-moving pace. His body gave tiny muscle twitches, and his weight rested on her back as he came. She let out soft whimpers, partially just cause it seemed like the thing to do, but the sensation of his body burying hers into the bed was oddly comforting. He was squirting cum into her guts, with how deep he was. Fucking god the thought alone made her moan for him, squeeze her ass, and grind it against his body to milk more hot cum from him.\n\n\"You don't think... everyone at that ball would be staring at you like I do?\" he said, and leaning down so far he managed to put his lips to her ear. \"At that ass like I do?\"\n\nFuck, the ear. So clich\u00e9, but she was still shaking like a leaf and all it took was a little kiss or breath on her ear to make her shiver a little.\n\n\"That is... you think so?\" Of course he was just smooth talking. She had claws for fingers and a shark mouth; she just had to look at younger Kindred to make them look the other way, or run. \n\nBut then, she'd never hung out with older Kindred before Julias. Maybe there was something there? Even the Invictus Maria had to get laid, right? Well, maybe not. Elder sex drives were unpredictable.\n\nThey laid together for a few more minutes, just letting the last remnants of their fake life leak out of them as sexual juices. She turned her head enough to look at Julias, and he looked at her, and they sorta just looked at each other for a while. Comfortable.",
        "Comfortable was weird, new ground, but fuck it, she liked it.\n\nShould she tell him about Damien? That Mehket was fucking dangerous. No doubt Julias had learned about him from Natasha and Jessy but the things that happened after were surprising. The things Damien had said when she followed him after his murdering spree, hints about some plan....\n\nShe'd told Jacob, and only him. Was Jack in danger? Damien clearly had something against the Prince, and that meant Jack. And after earlier tonight, she had to admit she liked the kid.\n\nOk, maybe just a little info, to keep Jack out of shit. \"So... I did a little scouting a few nights ago, right? Ran into this guy named Damien.\" "
    ],
    "authorname": "NovusAnimus",
    "tags": [
        "vampire",
        "blood",
        "vampire drama",
        "vampire novella",
        "vampire romance",
        "vampire sex",
        "drama",
        "supernatural romance",
        "seduction"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/my-little-ventrue-pt-02-ch-04"
}
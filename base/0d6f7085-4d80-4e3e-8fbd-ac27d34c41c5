{
    "title": "Smitten Ch. 07",
    "pages": [
        "Ogash was positively preening. She strode up to the base of the Shattered Tree, and struck a pose, hand on hip.\n\n- \"See what I have brought!\" she cried out.\n\nThe two males were young men - certainly no older than me. One was tall, and fair-complexioned; the other was shorter and stockier, with darker hair. Their hands were bound. The dark one had his head down, but the fairer fellow was looking about, wide-eyed.\n\nI'd been carried into the Red Knees' camp unconscious. I could only imagine how I might have reacted, that very first day, if I'd been awake, and dragged into the midst of a crowd of orcs - probably exactly the way it had been for Coopah and his friends.\n\nMost of the band were gathered around the Shattered Tree. They were curious, of course. This was the most exciting thing to happen since Kurbag's uprising.\n\nDitgurat was not at all curious, though: she was positively steaming. I'd never seen her looking so angry.\n\n- \"Ogash!\" she snapped. \"Lambug!\" That said, she turned about and stamped back to her cave.\n\nLagakh, though, stayed behind. She pointed at Coopah and me, and then beckoned us to come over with a curled finger.\n\n- \"Uh-oh.\" said Coopah.\n\nLagakh also called on Shaghar, Ghorza, Umog, Urzoth, and Shelur. The whole bunch of us followed the chieftain. The moment we reached the mouth of her cave, we could clearly hear her raised voice.\n\n- \"What were you t'inking? Lambug - I t'ought you had more sense!\"\n\nLambug did not respond. Ogash might have retorted angrily, but she seemed startled to see eight more people enter the cave.\n\n- \"What? What is this?\" she got out.\n\n- \"We've called a council.\" said her older sister. \"We have to find a way to undo the damage you've done - or, at least, to minimize it.\"\n\n- \"Damage?\" said Ogash, with her usual pout. \"What are you talking about?\"\n\nLagakh spoke slowly, and remarkably calmly. \"Where did you find these men?\" she asked. \"Were they alone?\"\n\nLambug kept her mouth shut, and left it to Ogash.\n\n- \"A league or two past the Hollow.\" I had no idea where that was, but evidently Lagakh and Shelur did. I learned later that it was just about on the very edge of the territory patrolled by the Red Knees.\n\n- \"Why would you do this?\" asked Lagakh.\n\nOgash sneered. \"I see. You get Smit, and grandmother had Coopah, but I am not allowed to find a human male of my own. I got one for Lambug, too!\"\n\nLagakh slowly shook her head. \"You saw them, and you wanted them. Did it never occur to you, Ogash, that there might be other humans about? Smit and Coopah came from the sea. Coopah's ship left him behind. Everyone on Smit's ships drowned, or died. No one else knows what happened to them, or where they are.\"\n\nI will readily admit that I'm nowhere near as intelligent as Lagakh, or even Ditgurat. They both realized, the moment they saw Ogash's captives, just what it might mean. I had only figured it out a moment before Lagakh said it.\n\n\"What if they were not alone, sister? What if these two men had companions? Are they scouts? Warriors? Husbands or fathers?\"\n\n- \"I ... I don't know.\"\n\n- \"You didn't stop to think.\" said Lagakh. \"You saw something, and you wanted it. A male of your own. You couldn't wait to share Smit.\"\n\n- \"I waited!\" shouted Ogash. \"He wouldn't fuck me!\"\n\n- \"He would have. But you had no patience, as ever. Now we are all in danger.\"\n\nDitgurat had not spoken since we came in. She let Lagakh's words sink in. Then she looked at me.\n\n- \"Go speak to them. You an' Coopah. Find out where they came from.\"\n\nI nodded, and left the cave. Coopah stood beside me, and let out a long, deep sigh.\n\n- \"It's bad, isn't it?\" I said.\n\n- \"Very bad. You know that the Red Knees have sent out three raiding parties that never came back. Not a one of them. Ditgurat has always worried about what happened. She's always been afraid that whoever killed them would eventually find us.\"\n\nI knew those stories. I'd just pushed them to the back of my mind, because they seemed to have little to do with my own personal drama - my lovers, the forge, and then Kurbag ...\n\n- \"What do we say to them?\"\n\n- \"The truth, mostly.\" said Coopah.\n\nThe two prisoners were huddled under the Great Tree. None of the orcs were standing directly over them, but they were still surrounded by a number of curious onlookers.\n\nCoopah approached them first. \"Hello.\" he said. \"Are you thirsty? Hungry?\"\n\nThe two men looked up at him. The darker one seemed stunned to see us. The fairer man was shocked, too. His lips moved, but no sound came out.\n\n- \"You're safe, now. No one is going to kill you.\"\n\nThe two men heard him. It might even have registered with them that our mere presence indicated that their lives were not in danger. But they didn't answer; they just sat there, stunned.\n\n- \"They might be more comfortable in my cave.\" I suggested.\n\n- \"Good idea.\" said Coopah.\n\nWe helped the two men to stand. Their legs were a little weak.\n\nI saw a friendly face, and called out to her.\n\n- \"Snak! Could you get a bucket of fresh water - please?\"\n\n- \"Zug!\" she called back, and then immediately sprinted to my cave to fetch my bucket.\n\nCoopah and I got the two prisoners to their feet, and then led them to the forge. I hoped that it would feel quieter - and safer - for them. They moved slowly, slightly unsteady on their legs.\n\nThe darker, stockier fellow was still completely uncommunicative, but the other man found his voice.\n\n- \"Where are we?\"\n\n- \"This is my forge.\" I answered. \"You were just under the Blasted Tree, which is the home of the Red Knee orcs.\"\n\nSnak didn't go all the way to the stream. She'd taken my bucket to the rain barrel, and filled it there. Now she came into the cave.\n\n- \"Water, Smit!\" she called out, announcing her entry.\n\nThe fairer man actually turned his head to look at her. I smiled, remembering my own first exposure to the delightful little imp. Big teeth, big eyes, and that tiny frame.\n\nI spoke to her again, briefly, asking her to fetch us something else.\n\n- \"Zug!\" she said, and skipped off, happy to carry out another task for us.\n\n- \"Your daughter?\" asked the fair-haired prisoner.\n\nI was too surprised to answer. Coopah spoke up. \"My grand-daughter. Great-grand-daughter, actually. My name is Coopah. I was Vagnali, a long time ago. But I was shipwrecked on this coast, and the orcs found me. I was a cooper by trade - so, Coopah. My friend here is Myrthis - he was shipwrecked just this year. He was a blacksmith's apprentice, so now he's known as 'Smit'.\"\n\n- \"Hello.\" I said.\n\nWe waited. The man remembered his manners fairly quickly.\n\n- \"Alatey. Sorry. And this is Gintar.\"\n\n- \"Where are you from?\" asked Coopah.\n\n- \"We're Varnan.\" said Alatey.\n\nCoopah drew the young fellow out slowly, careful not to push for too much information too soon. As I watched and listened to him work, I wondered if he had not done precisely the same thing to me when we first met. He was a clever, subtle man, and much deeper than I had ever suspected.\n\nSnak returned, as I had asked her to, bearing a flask. I thanked her, and sent her on her way again. Then I offered the two men a drink.\n\n- \"What is it?\" asked Alatey.\n\n- \"They call it raki. It's brandy. Plum brandy, in this case.\" I took a swig, to show them that it wasn't poisoned.\n\nAlatey accepted the flask from me, and took a healthy swallow. His companion, Gintar, shook his head at first, but finally relented and tried it. He coughed as the fiery liquid burned its way down his throat.\n\n- \"How are you still alive?\" asked Alatey. \"I thought - that orcs killed their prisoners.\"\n\n- \"I make buckets and barrels, and wooden tools.\" said Coopah. \"This is Smit's forge. We are both very useful to the band. Plus ... you may have noticed that there aren't many males here. Most of the orcs you've seen are actually half-orcs. Children and grandchildren of mine, and of my former companions - who passed away of natural causes.\"\n\nHe went on to tell them of his comrades, Rogek and Gint. Gintar frowned, perhaps because the name was so close to his, but he didn't say anything. Or perhaps he was shocked (as I myself had been, at first), to learn that humans mated with orcs.\n\n- \"What about him?\" asked Alatey, indicating me.\n\n- \"Smit only arrived this year - another shipwreck. But the band values him highly, for his smithing skills, and his many other talents.\"\n\n- \"Other talents?\"\n\n- \"I can swim.\" I said.\n\nCoopah smiled. \"Smit is too modest. He has five female partners - \" He turned to me. \"Or is it six? And two of them are pregnant.\"\n\nThree, I thought. Only Ushug was gone.\n\nCoopah returned to asking seemingly innocuous questions. Gintar rarely replied, but Alatey was more willing to answer. I wasn't quite sure if it was because Gintar was less intelligent, or simply more frightened. Alatey took a second swig of the brandy, and became even more communicative.\n\nWe learned a great deal.\n\nShaghar and Ghorza arrived a while later, with food. Shaghar spoke kindly to the two men, telling them that they could sleep in my cave - and that no one would disturb them. The chieftain had them both under her protection.\n\n- \"There are guards at the cave entrance.\" she said. \"They will make certain that no one comes in.\" The message was clear, though: those guards would also make sure that no one left.\n\nCoopah and I returned to Ditgurat's cave, where the council were still gathered.\n\n- \"What did you learn?\" she asked.\n\n- \"They're from the Duchy of Varna.\" said Coopah. \"From a place called Calep. I don't know where that is. They were deliberately vague about its location.\"\n\n- \"Go on.\"\n\n- \"They claim to be woodcutters.\" said Coopah. \"They are not.\"\n\nI couldn't help it - I turned to look at him. \"How do you know that?\"\n\n- \"Gintar wears a pledge ring. He is either married, or promised. But neither man had corns or calluses on his hands - which woodcutters cannot avoid. I do not say that their hands were smooth - only that they are not woodcutters.\"\n\n- \"So they lied?\" said Lagakh.\n\n- \"Even the lie is revealing.\" said Shelur. \"Why would humans be cutting wood so close to our territory. They are moving into the area. Or ...\"\n\n- \"Or?\" said Ditgurat.\n\n- \"Or they are looking for us.\"\n\nThat news struck us all silent.\n\n- \"Anyt'ing more?\" said Ditgurat, to Coopah.\n\n- \"Gintar was mostly silent. Alatey was the more practiced liar. But I have to ask: which one of you took Alatey?\" He addressed his question to Ogash and Lambug.\n\nThey didn't seem to understand the question.\n\n\"Which one of you fucked the fair-haired one?\" said Coopah.\n\n- \"I did.\" said Lambug.\n\n- \"Did you rip his shirt, when you did? Or when you captured him?\"\n\nLambug shook her head. \"No. I don't think so. No - I didn't tear his shirt.\" She frowned. \"I didn't have to. He was more ... accepting. Ogash had more trouble with the dark one.\"\n\n- \"Urrgh!\" grumbled Ogash.\n\n- \"Is this important?\" asked Lagakh.\n\n- \"It may be.\" said Coopah. \"Alatey had not a single button on his shirt. He may have torn them off himself, and then dropped them in conspicuous locations.\"\n\nShelur gasped. \"They are looking for us.\"\n\n***\n\nDitgurat was not pleased. This was one of her worst nightmares coming true. She issued several commands.\n\nOgash and Lambug, as punishment for their rash behaviour and their foolishness, were sent to retrace their steps, to look for Alatey's buttons.\n\nThe chieftain also declared that in the meantime, the new humans were under her protection. They were not to be assaulted, or compelled to do anything by force. She also assigned half a dozen half-orcs to watch them at all times - and Ghorza was included among that group.\n\nI left that council in a mild state of shock. I'd known him for months, but I'd never realized how subtle Coopah could be. He was incredibly observant, patient, and ... underhanded. Clever at ferreting out secrets.\n\nI stood outside Ditgurat's cave, with a stunned, bemused expression on my face.\n\nOf all people, it was Coopah and Shaghar who stopped to see how I was.\n\n- \"You alright?\" he said.\n\n- \"You played me.\" I said. \"The same way you did these two. I thought that we were just two men stuck in the same situation, years apart. But you were reading me - trying to decide if I was a threat.\"\n\nCoopah looked sad.\n\n- \"It was to protect the safety of the band. We had no way of knowing if you were part of a pirate fleet, or an expedition come to search for us.\"\n\n- \"You picked my brains!\" I snapped.\n\n- \"I didn't lie to you, Smit.\" he said.\n\n- \"He didn't, Smit.\" said Shaghar. \"And Ditgurat tried to protect you.\"\n\n- \"Really? Letting Umog have me first, to soften me up? And then anyone else could come by and use persuasion or seduction on me, so that they would seem loving and kind, by comparison? Is that how it was?\"\n\n- \"No, Smit.\" said Shaghar. Her eyes pleaded with me.\n\n- \"You're a good man.\" said Coopah. \"I'm very glad that you're here. But when you first arrived, we had no way of knowing that. I sounded you out, to make sure that you weren't a danger to us. And it was you, if I remember correctly, who listed sex among your top three skills.\"\n\nI was annoyed; I felt that I'd been deceived. But even so, I could hear the truth of what Coopah was saying. His first loyalty was to his daughter - daughters. And granddaughters.\n\nShaghar wasn't lying, either. She'd never used me. She was willing to share me with her friends, but she came straight out and asked me, first.\n\nThey were both wise enough to stop talking; they'd said all they could - and just about all I was prepared to listen to. When I walked away, they let me go. I went down to the stream, but that reminded me instantly of bathing and sex - normally, those were wonderful memories, but I was in no mood to think of them at the moment.\n\nI crossed the stream moved a little further under the trees.\n\nI was annoyed; I felt that I'd been deceived. But even so, I could hear the truth of what Coopah was saying. His first loyalty was to his daughter - daughters. And granddaughters.\n\nShaghar wasn't lying, either. She'd never used me. She was willing to share me with her friends, but she came straight out and asked me, first.\n\nMy anger - if that's what it was - slowly leaked away. They weren't my enemies; they were my friends. Coopah had given me good advice, and had helped, every step of the way, to get my forge up and running. Yes, it was something that would benefit the band, but it also assured me a place among them.\n\nShaghar had shown her love for me many times - including twice using her magic to save my life. I couldn't be angry at her.\n\nWhere could I go, if I didn't belong here? My family wouldn't miss me much. It struck me then that there no one who cared about me more than Shaghar, and Ghorza. And Snak. Perhaps even Umog, in her own way. And then Ditgurat and Lagakh, who clearly respected me - and that was entirely separate from wanting me to father a child with them.\n\nSomehow, I felt that I belonged with these people - and that they wanted me to be here with him.\n\nWhen I re-crossed the stream, Shaghar was waiting for me, holding a sleeping fur.\n\n- \"I thought you might be cold.\" she said.\n\n- \"Thank you.\"\n\n- \"Are you still angry?\"\n\nI put my arm around her shoulder, to let her know that I was alright. \"I'll get over it.\" I said.\n\n***\n\nThe next few days were odd for me. I had to spend time with the two captives, to reassure them, and to make them feel safe. Coopah did the same, even while he probed and carefully asked questions to learn more about them, and the place they claimed to come from.\n\nAs before, Gintar remained silent, while Alatey answered Coopah, and then asked questions of his own. He seemed much more confident, much more at ease.\n\nI left them my cave in the evening. Partly, it was to give them a little privacy, so that they didn't feel as if we were spying on them all day long. But I needed some privacy, too.\n\nI spent the night down by the stream, in the spot where Shaghar and I had first made love. I was over my little tantrum; it hadn't taken me long to remember how fortunate I was. I'd survived a shipwreck, and found a good place with people I liked.\n\n- \"May I join you?\" asked Shaghar, in a soft voice. I hadn't even heard her approach.\n\n- \"Of course you can.\"\n\nShe'd brought two sleeping furs, which she spread over us as she cuddled up close to me and shared the warmth of her body. I wrapped my arms around her and held her tight. Shaghar stroked my face, and looked into my eyes. There was just enough moonlight for that.\n\n- \"I do love you.\" she said softly.\n\n- \"I know. I feel the same.\"\n\nWe kissed, and held each other. Then we made love, quietly, under the trees, and re-sealed our pact.\n\n***\n\nDitgurat was obviously preoccupied; she didn't call upon me for sex, or to ask me if I had any fresh insights about the new humans. Coopah was keeping an eye on them, as was Ghorza - and several others.\n\nBy day, I could work in the forge, with Snak and Shelur. Alatey watched for a while, until he grew bored, but Gintar spent most of the daylight hours with us. He still didn't say much.\n\nThe next night, I made a change to my usual routine. If Ditgurat was too busy to ask for me, I would move on. Hopefully she wouldn't be offended.\n\nUmog was quite surprised when I asked her to go for a walk with me.\n\n- \"A walk? In the dark?\"\n\n- \"We don't have to go very far.\" I said. \"And I brought a fur, in case we get cold.\"\n\nUmog caught on to what I was suggesting.\n\n- \"What of Ditgurat?\"\n\n- \"She seems to have forgotten about me. If she remembers, and calls for me, I'll go to her. But in the meantime ...\"\n\nUmog quite liked that I had chosen to ask her first. She knew very well that my free nights usually belonged to Shaghar.\n\nWe took shelter under the trees by the stream, and Umog sat astride my thighs, kissing me (carefully) and using her hands (gently) to arouse me.\n\nWe both heard rustling not too far away. A moment later, there was a gasp, and then the rhythmic slapping of flesh against flesh.\n\nUmog stopped her movements. Then she tapped my shoulder, and pointed. I turned my head in the direction she'd indicated.\n\nIt was Bula. A mostly naked Bula, riding a male while he mauled her breasts with both hands. Pale, fair-skinned hands. Alatey.\n\nI looked to Umog, who shrugged.\n\nWe returned to our own (much quieter) business.\n\n***\n\nThe next day, there was a bit of a commotion outside my forge in the late morning.\n\nLagakh herself entered, with Urzoth and Ghorza. The chieftain's daughter wasted no time on pleasantries.\n\n- \"Take what you can carry. Food, clothing, and furs. We leave at once.\"\n\n- \"What?\"\n\n- \"Gintar, you must go with Urzoth and Ghorza.\"\n\nShe was deadly serious. Lagakh answered my question before I could ask it.\n\n\"The humans are coming.\"\n\n***\n\nIt was Lambug and Ogash who brought the news. While searching for Alatey's buttons, they'd been fortunate to spot a large group of humans before being seen themselves. They came back to warn the rest of us as quickly as they could.\n\nGhorza led us north and east, towards the beach. If we were pursued, we could retreat even farther to the east - but most of the Red Knees were loath to do that: it would mean leaving behind their fields and their orchards, their caves, and the Blasted Tree, which they still saw as a source of good luck.\n\nI was abandoning the bloomery and my forge. They were just things, of course. A forge could be rebuilt. Lives were far more important.\n\nDitgurat let the entire tribe know what was happening. Fear is a powerful emotion, but fear of the unknown may be the worst of all. There was, remarkably, no panic. Lagakh seemed to have an extra sense; whenever someone appeared to be even a little bit apprehensive, the chieftain's daughter was there, by their side. Her presence alone was reassuring.",
        "But there were a few who murmured, suggesting that we were cursed - that our good fortune would disappear if we left the Tree (I wasn't sure that those two ideas made sense together, but there's no accounting for the way some people think). A few voices were raised against the captive humans, Alatey and Gintar. These rumblings would only grow louder.\n\nI bedded down between Shaghar and Umog. Coopah and Snak were close by. Ghorza and Shelur were on watch.\n\nLagakh herself woke Coopah and me the next morning.\n\n- \"We need you to talk with them.\"\n\n- \"Who? Alatey and Gintar?\"\n\n- \"We need to know why the humans are here.\" she said. \"Will they go away if we hand over the captives?\"\n\n- \"We'll try.\" said Coopah.\n\nThe two men were under guard. Both of them looked apprehensive; they were probably well aware of the precariousness of their situation. Coopah and I sat down in front of them.\n\n- \"Unfortunately, there's no more time for polite fencing. We need to know why you're here.\" he said.\n\n- \"I don't know what you mean.\" said Alatey. \"We were captured.\"\n\n- \"On the edge of our territory. What were you doing there? Who are you, really?\"\n\n- \"We've told you - we're foresters.\"\n\n- \"You're no more foresters than I am a fish.\" said Coopah. \"And those men aren't just searching for you, are they? There's no way a party that large was gathered and sent out so soon after you were captured. They were already on our borders.\"\n\nNeither man answered. Coopah was on the right track.\n\nI chose to appeal to their better nature - if they had any.\n\n- \"Two of my lovers are pregnant. I want to save them, and our children. Alatey - what if Lambug is already pregnant? Or Bula?\" Then I turned to Gintar. \"And what about you? Don't you want to see your wife again?\"\n\nThat struck a chord. Gintar turned to look at his companion. Something told me that if Alatey didn't speak, Gintar would.\n\n- \"Alatey.\" said Coopah. \"Who's coming?\"\n\nThe fair-haired man took a deep breath.\n\n- \"The Duke.\" he said.\n\n***\n\n500 years ago, Varna was a kingdom. But centuries of civil wars and succession crises finally broke the realm. Only a few years ago, a soldier named Arivan Cunedda made himself master of the port town of Whydah, and then succeeded in capturing the capital, Elmina. Cunedda founded a new dynasty, but wisely chose not to call himself a king. Instead, he adopted the title of Grand Duke, and slowly began to recover the lands of the old Kingdom.\n\nEvidently, he was now looking to his eastern border. He was establishing a new settlement at Calep - and one of the first settlers was a young farmer, named Gintar.\n\n- \"It was just bad luck.\" said Alatey. \"Gintar and I were looking at possible pasture sites when your scouts captured us.\"\n\n- \"Bad luck for whom?\" asked Coopah.\n\nThe Duke knew that his new settlement was in an area which had been raided by orcs in the past. He knew that the raiders had been caught - and eliminated - but he was prepared to do whatever was necessary to prevent future raids.\n\n- \"And he's here now? In person?\" I asked.\n\nAlatey nodded.\n\n- \"With how many men?\" asked Coopah.\n\nAlatey shrugged. \"I'm not sure, exactly ...\"\n\n- \"One hundred and fifty.\" said Gintar.\n\n- \"Thank you.\" said Coopah. \"That may help to avoid unnecessary bloodshed.\"\n\nHe was right about that; there was no way that we could even contemplate fighting so many. We'd had our hands full with Kurbag's coup, which had involved only a dozen fighters.\n\nWe reported to Ditgurat and Lagakh with what we'd learned. Shaghar was there as well, growing into her role as the band's shaman.\n\n- \"Are you sure about the numbers?\" asked Lagakh. \"Lambug scouted the Blasted Tree last night and after dawn. She counted between forty and fifty.\"\n\n- \"There are another hundred somewhere nearby.\" Coopah assured her.\n\n- \"It makes no diff'rence.\" said Ditgurat. \"We cannot fight so many.\"\n\n- \"Even if we could defeat these, more would come.\" said Coopah.\n\n- \"Were you seriously thinking of fighting?\" I asked, a little incredulously.\n\n- \"We have to consider all of the possibilities.\" said Lagakh.\n\n- \"And those are?\"\n\nLagakh tilted her back, and looked down her nose at me. She may not have liked my tone. But she did answer me. \"Fight, run, or hide. Or hope that they go away if we give them back their men, unharmed.\"\n\nI liked that last option best. Unfortunately, we knew very little about this Varnan Duke. While the others talked, I mulled it over in my head.\n\nThen an idea struck me. Ditgurat and the others didn't need my help if they intended to fight or run. But I'd thought of something I could do. I went back to Alatey and Gintar.\n\n- \"Tell me,\" I said, \"what kind of man is this Duke?\"\n\n***\n\n- \"Let Smit talk.\" said Ditgurat.\n\n- \"If they let us talk.\" said Coopah. \"I'm still not sure that this is a good idea.\"\n\n- \"If d'ey let Smit talk. You listen, and think - you're good at dat.\"\n\nLagakh had her doubts about my idea, but Ditgurat liked it. Shaghar had positively beamed when I suggested it. My idea, quite simply, boiled down to 'Let's talk to him'. Coopah, of course, felt that he ought to do the talking, but his daughter insisted that he concentrate on listening, and reading the Duke.\n\nSo that was why Ditgurat walked back to the Blasted Tree, with Coopah and I to either side of her. She carried a thin bundle, wrapped up tight in an old piece of leather.\n\nThe Varnans saw us coming from a long way away. We made no attempt to hide. Ditgurat was clearly recognizable as an orc, but she was accompanied by two humans - and none of us were armed.\n\nThree soldiers waited for us, perhaps a hundred yards from the Blasted Tree. They wore leather jerkins, bracers, and sword belts. One wore a helmet, while another had mail guards on his shoulders. There were at least two dozen more men in sight, but they kept their distance - for now. The trio in our path were quite composed: they merely watched us as we approached to within ten yards of them. We stopped there.\n\n- \"What is your business?\" asked the man in the centre.\n\n- \"We live here.\" I said. \"We've come to see the Duke of Varna. This is Ditgurat, Chieftain of the Red Knee orcs.\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n- \"Aka' Magosh.\" she said.\n\n- \"What does that mean?\" asked the man with the helmet.\n\n- \"It's a greeting.\" I said. \"It means 'a blessing on you and yours'.\"\n\n- \"And on you and yours.\" said the man on the right. \"I am Arivan Cunedda.\"\n\nI'm sure that all three of us stared at him. He was of average height, dark-haired and thoroughly tanned from long exposure to the sun. His gear was plain and functional - and well-worn. His hair and beard were just a bit scruffy, and his eyebrows were quite bushy. But there was no mistaking the intelligence in his brown eyes.\n\n- \"We're here to talk.\" I said.\n\n- \"Oh? What would you like to talk about?\"\n\n- \"Well ... we have two of your men. Gintar, the farmer, and Alatey, the scout - or spy. They are in good health. Meanwhile, you have occupied our home. Perhaps we could start there.\"\n\n- \"I suppose we could.\" said the Duke. \"Where shall we talk?\"\n\n- \"Under the tree?\"\n\n- \"Agreed.\"\n\nHis two men kept a watchful eye on us, but we were unarmed, and surrounded by ten times our number of armed soldiers, all within calling distance. We sat on some of the band's own stools - tree stumps with designs carved into them.\n\n- \"Let me ask the first question.\" said Cunedda. \"Are my men unhurt?\"\n\nI nodded. Coopah had expected this, and had coached me on what to say.\n\n- \"They are. When they were first captured, though ... ah - they were ... forced to have sex. This was difficult for Gintar, I believe. Alatey was ... less reluctant.\"\n\n- \"Is that so?\"\n\n- \"Yes, my Lord Duke. He ah ... voluntarily repeated the experiment just the other night - with a second female of our band.\"\n\n- \"Really?\" The Duke seemed mildly surprised. But I clearly saw him examine Ditgurat more closely. I knew exactly what he was doing: he was asking himself if he would have sex with her, given the opportunity. The answer, I guessed, was anything but a definite 'no'.\n\n- \"We are, of course, prepared to return your men to you.\" I said.\n\n- \"Are you, now?\"\n\n- \"Yes.\"\n\n- \"And what do you expect in return?\"\n\n- \"Chieftain Ditgurat hopes that you will return to your own lands, and leave us in peace. She would be happy, though, if you could agree to a mutually satisfactory border. We would prefer to live in peace.\"\n\n- \"Yet orcs have raided our lands several times.\"\n\nI nodded again. Coopah had anticipated this sally as well.\n\n- \"True, Lord Duke. But two of those raids were carried out by former Chieftains, and the last one by renegades. Full orcs - whereas Ditgurat, as you may be able to see, is a half-orc.\"\n\n- \"Is that so?\" Cunedda looked thoughtful, and appraised Ditgurat again.\n\n- \"In a sense, my Lord, you might say that the Red Knees are 'under new management'. The Chieftain does not believe in seeking conflict with any of our neighbours.\"\n\n- \"Hmm ... yet as we approached your Great Tree, we came across the corpses of near a dozen of your folk. One was headless. The site did not appear to be very ... peaceful.\"\n\nOh, shit. They'd found the bodies of Kurbag and his crew. Ditgurat had taken his head, to prove to the whole band that he was dead. After exhibiting the trophies of our victory, she'd eventually buried the stinking head in a pit.\n\n- \"That was ... a purely internal matter, Lord. It was an attempt to overthrow Ditgurat, without recourse to the traditional challenge. It was ... the last gasp of the Old Guard, if you will.\"\n\n- \"Traditional challenge?\"\n\n- \"My Lord, I believe that it would be to the advantage of both sides if you knew more about the Red Knees and their history. With your permission, my friend Coopah here could tell you how he came to be here.\"\n\n- \"Coopah? As in 'cooper'? And what is your name, friend?\" the Duke asked me.\n\n- \"Smit, sir.\"\n\n- \"As in 'smith'? Ha!\" He gave Coopah a good, long look. \"Very well - let's hear the tale.\"\n\nIt was Shaghar's idea, really, for me to begin negotiating, and then to have Coopah tell his story. Ditgurat had heartily endorsed the change of pace this represented.\n\nCoopah might look like a harmless old duffer, with his white hair and his cloudy blue eyes, but he was as shrewd as they come. He also knew how to spin a tale. The Varnan Duke and his men listened attentively as Coopah described being captured on the coast, along with his friends Rogek and Gint, over forty years ago. He made no secret of the number of orcs they'd all had sex with.\n\n- \"Wait - the Chieftain? She's your daughter?\" The Duke was stunned - but that didn't stop him from examining Ditgurat once again.\n\n- \"Yes, Duke.\" she said. \"He is my father.\"\n\nCoopah made a point of explaining that the Red Knees had been split between orcs and half-orcs, between die-hard traditionalists and those who perceived a new way forward. He told them of the challenges to Ditgurat's leadership, and the role played by Yotul, her sister - Shaghar's mother.\n\nIt was an engrossing story. I knew it well, yet still found myself listening to every last detail. Ditgurat was very much the heroine of the saga, and I noticed the Duke surreptitiously checking her out a fourth time.\n\n- \"And then,\" said Coopah, \"Smit arrived.\"\n\nThat was my cue. I began to tell my story, from the shipwreck to the present day. I did not have Coopah's skill, but there was no need to weave a legendary tale - the truth was strange and compelling enough.\n\n- \"Wait!\" said the Duke. \"You were ... forced? Just as Gintar and Alatey were?\"\n\n- \"Yes. You see, the ah ... female in question was Umog, one of the best warriors among the Red Knees. Ditgurat was facing a challenge from Kurbag and his group; she could not afford to alienate one of her most powerful supporters.\"\n\n- \"So she let this ... female have her way with you?\"\n\n- \"It's more complicated than that, Lord. No doubt I've done a poor job of telling the story. Umog and I ... we're friends, now. She's pregnant with my child.\"\n\nArivan Cunedda could only shake his head.\n\n- \"Do I understand this correctly? You've been here a matter of mere months, and yet you are trusted enough to represent the orcs - to negotiate with me?\"\n\n- \"I am their smith. Surely you saw my forge, and the bloomery.\" I said. \"The chieftain's daughter and her niece are my lovers, and ...\"\n\n- \"I carry Smit's child, too.\" said Ditgurat.\n\nHer timing was exquisite. The Duke was already engrossed in our story - but also shocked and amazed. Quite simply, he didn't know what to make of everything we'd told him.\n\nAnd yet ... Arivan Cunedda didn't seem quite as off-balance as I'd expected him to be, at this point. (It was some time later before I learned that he'd had extensive dealings with other non-humans, including the elves, and the fey folk of the north-west.\n\n- \"That is ... the most incredible story.\" he said.\n\nHe wasn't completely convinced, though. We had two more arrows in our quiver, so to speak, but I was loath to let them fly, when the outcome was still uncertain.\n\n- \"Lord,\" I said, \"there is one more orcish expression that you should know about. It is 'Ur'gora'.\"\n\nHe frowned, and those furry eyebrows bristled. \"Which means?\"\n\n- \"'Not honour'. It was Snak, an eleven-year old, who taught me its meaning. Kurbag acted without honour, by attempting to murder Ditgurat's supporters, without challenging her directly. My Lord - 'Ur'gora' is the worst insult known to the orcs. And it is one that has never been levelled against Ditgurat herself.\"\n\nThe Duke mulled this over for several moments.\n\n- \"Would you go home, Smit, if you could? That lies well within my power.\"\n\n- \"No, Sir. I have been treated fairly. In fact, there are more people here who respect and love me than in all of Portoa. In the first week I was here, I considered running away several times - but I'm very glad now that I did not.\"\n\n- \"I see.\" Arivan Cunedda was a thoughtful man. He offered us food and drink - a hospitable gesture, but also one which allowed him more time to think. He stood up, and walked a few yards away.\n\nDitgurat glanced at me. I could tell that she was dying to ask me 'How is it going?'.\n\n- \"Bin Mog g'thazag cha.\" I whispered.\n\nIt was exactly what she'd said to me, months ago: I will protect you.\n\nWhen he was ready, the Duke rejoined us. He wasn't smiling, and his body language wasn't very encouraging, either.\n\n- \"Is there anything else you wish to say?\" he asked.\n\n- \"Yes.\" I nodded to Ditgurat. She stood up, and presented her narrow bundle to Cunedda.\n\n- \"What is this?\" he asked, even as he began unwrapping the leather. I let him finish uncovering the object inside: it was the cutlass I'd recovered from the sea and given to Ditgurat.\n\n- \"A gift, Lord. But also a token, to prove that we've been able to salvage items from the wreck of the Pelican.\"\n\n- \"Ah?\"\n\n- \"You may have noticed the stacked ingots, and the iron pigs in the forge. They all came from the ship. I realize that while it is a significant amount of iron for the Red Knees, it is not so important for you. But there were other items aboard the Pelican which might interest you more.\"\n\n- \"Such as ...?\"\n\n- \"Cannon, Lord Duke.\"\n\nThat got his attention. Galtin's Port made fantastic weapons - which could be had for exorbitant prices. Portoa, too, knew how to cast guns. But I suspected that the Duke did not have a gunsmith who could cast cannon. Even if he did, he would be unlikely to ignore an opportunity to acquire new guns.\n\n- \"Go on.\"\n\n- \"The Pelican carried four cannon. I have found two of them already, in shallow water. I should be able to locate the other two, as well. I can easily dive to where the first two lie, and attach ropes, or whatever gear you recommend. If you were to bring a few boats from Whydah ...\"\n\nWhydah was the Varnan seaport on the north coast. We'd passed by it, just before the Pelican had ended her career by running aground, killing all of her passengers except me. Coopah and I were the only humans who knew of it - until now. I'd just shared a very valuable secret with the Duke.\n\nOf course, he could always send his own boats and divers to search around the wreck. Ultimately, I was basing this offer on the assumption that he was an honourable man. I'd been encouraged by his reaction to my translation of the orcish phrase 'Ur'gora'.\n\nIf he was more ruthless or more greedy than he was honourable, I'd just sacrificed a precious commodity for nothing.\n\n- \"You can't just give them away!\" Coopah had protested, when I first raised the subject.\n\n- \"They are powerful weapons, are they not?\" said Lagakh.\n\n- \"Not for us.\" I said. \"We don't know the secret of making black power. The guns are also too heavy to move. They are far more valuable to someone else than they are to us.\"\n\nThe Duke of Varna inclined his head slowly, several times. His eyes never left mine.\n\n- \"That is ... a very interesting offer.\" he said. Now he looked at Ditgurat. \"Do I understand correctly: cannon, in return for leaving you your lands?\"\n\nShe turned to me, and nodded.\n\n- \"There is one more thing, Lord.\" I said. \"If we were friends, or even ... allies, there could one more benefit for Varna: half-orc warriors.\"\n\nI'd finally managed to surprise the man, just a little.\n\n- \"I don't understand.\" he said. \"Mercenaries?\"\n\nDitgurat had made me rehearse this point multiple times. \"It could be as you prefer, Lord. Mercenaries, or even a treaty obligation. In return for your protection, and recognition of the Red Knees' title to their lands, the Chieftain would send you a number of warriors, to serve as auxiliaries in your army.\"\n\nHe was intrigued.\n\n\"Of course,\" I continued, \"we are not so numerous just now. The initial force would have to be quite small. Perhaps ... ten fighters? But if the experiment should prove to be successful, and the numbers in our band were to rise ... the force at your disposal could be increased ...\" I deliberately let that last line hang, to see how he would take it.\n\nArivan Cunedda had a decision to make: he could search for the guns himself, and he could pursue and harry the Red Knees, and even try to destroy us. That would cost Varnan lives (Alatey and Gintar, immediately, and possibly many more in the near future). Should he fail to exterminate us, he would be left with a small but angry and vengeful remnant of our people on his border.\n\nAgain, I only learned later on that the Duke had made a point of maintaining good relations with the elven and fey peoples. Slaughtering a small band of half-orcs might have damaged his reputation with his non-human neighbours.\n\nWe could help him recover the guns. And even a small contingent of half-orcs warriors would impress his own people. They might even prove more valuable in the future. What if the Duke's successors could call on fifty or a hundred half-orc fighters?\n\nWe were not asking for much. Forgiveness for past raids - which had not been Ditgurat's doing at all. Recognition. Peace. None of those would cost the Duke a single copper coin. He had something to gain - but would he see it as we did?\n\n- \"You have given me a great deal to think about.\" he said. \"Could we meet again tomorrow? I would prefer to have time for reflection before I make a decision.\"\n\n- \"I agree.\" said Ditgurat. \"Tomorrow.\"\n\n- \"Oh.\" I said. \"One more thing: we want an anvil.\"\n\n***\n\nBack among our folk, we had to repeat, as best we could, every word that had passed between us and the Varnan Duke, for the benefit of Ditgurat's council. Lagakh and Shaghar were there, of course, along with Umog and Ghorza. Shelur, Lambug, and Ogash (her transgression forgiven, if not forgotten), Urzoth, and Bula.\n\nBula had an interesting detail to add to our deliberations.",
        "- \"Alatey came to me again - just after midday. He's a randy bugger, that one.\"\n\n- \"I saw him first.\" complained Lambug. Ogash ground her teeth, angry that she had chosen the wrong human male right from the start.\n\n- \"Enough!\" snapped Ditgurat. \"You can share him, for whatever time he has left with us.\"\n\nCoopah did most of the talking, relating what had been said by the Duke, and by me. Shaghar sat beside me, squeezing my hand every time Coopah said something that made her think that I'd done well. Lagakh smiled at me several times, too - it was her way of saying 'I couldn't have done better myself'.\n\nThat was when I finally realized just how far the Red Knees had come. Arivan Cunedda had been surprised that the orcs would let a human speak for them - especially a man who had only been among them for a few months.\n\nDitgurat put her hand on my shoulder. \"You did well.\" she said. \"I was wise, to have you speak.\"\n\n- \"I think that you impressed the Duke.\" I said.\n\n- \"We will see. Now - go with Shaghar.\" She gave me a push.\n\nShaghar took my hand, and we left the council.\n\n- \"I am so proud of you.\" she said.\n\n- \"It wasn't that difficult. I just told the truth.\"\n\n- \"You must have been nervous.\"\n\n- \"Terrified.\" I admitted.\n\nShaghar smiled, and squeezed my hand again.\n\n- \"May I ask a favour, Smit?\" she asked.\n\n- \"Of course.\"\n\n- \"Would you mind if ... if Ghorza came with us? We both want to be with you tonight.\"\n\nI followed Shaghar's eyes, and looked over my shoulder. Little Ghorza stood there, alone, watching us. I understood: they were both afraid for me. If the Varnan Duke was bent on treachery, he could take us prisoner on the morrow. He could then exchange us for his men - or even execute us, thus depriving the Red Knees of their leader.\n\nShaghar and Ghorza were afraid that they might never see me again. They had been just as terrified as I was, the night before. They regretted having let me go to meet the Duke without loving me first. And they meant to make up for that omission. Together.\n\nI let go of Shaghar's hand, and went over to Ghorza. She seemed uncertain, unsure of what I was going to say or do. I walked right up to her, and put my arms around her.\n\n- \"Come with me.\" I said.\n\nThe three of us found a private spot on the edge of our temporary camp in the woods. There we kissed and caressed each other. I was the recipient of most of the touches. It was wonderful, but very distracting, because I found it difficult to divide my attention between the two of them.\n\nShaghar helped solve that problem by gently directing me towards Ghorza.\n\n- \"She has waited longer.\" said my unselfish lover.\n\nThe moment I penetrated Ghorza, she wrapped both arms and both legs around me, clinging tightly. It was urgent, and it was intense. My climax came upon me suddenly, almost unexpectedly. Ghorza was not in the least disappointed: she hummed in my ear as she felt me ejaculate inside her.\n\nShaghar let me rest for a few moments, stroking my back and my arm. When she decided that I recovered, she used her fingers and her mouth to arouse me once again. Ghorza watched as Shaghar stimulated me, and then climbed aboard, straddling my hips and sinking down slowly on my erection.\n\nI held her lovely breasts as she slowly rode me, drawing out the pleasure for both of us. I lasted a long, long time, and we both enjoyed every moment of it.\n\nShaghar came first; the long, slow buildup made it a particularly strong orgasm - she dug her fingers into my chest and bit her own lip.\n\nMy own orgasm was still far off. Shaghar seemed to know it; she dismounted, and offered her place to her friend. Ghorza seemed uncertain, again, but when I held out my hands to her, she grinned, and climbed on top of me. She took hold of my erection, still slick with Shaghar's juices, and sheathed it inside herself.\n\n***\n\nI had no foreboding of disaster. But I wasn't certain that we had succeeded, either. Since there was nothing I could do to affect the outcome until we met the Duke again, I simply chose not to worry about it.\n\nDitgurat, Coopah and I walked toward the Blasted Tree. Arivan Cunedda met us with the same two men as yesterday. We sat down, and waited for him to speak.\n\nWhen he did, he addressed me.\n\n- \"I still can't believe that you've only been among the orcs for a few months.\" he said. \"Coopah's story is quite amazing, but yours is just as incredible. It's ... very encouraging to think that a human could adjust to living with orcs and half-orcs so quickly - and also that they could adjust to you so soon, to the point of making you one of their emissaries.\"\n\nHe cleared his throat. \"I'm also impressed that you've, ah ... found love as well. I think that your offspring will only create new bonds between our peoples.\"\n\nThe Duke turned slightly, to look Ditgurat in the eye. \"I have decided to accept your offer.\" he said.\n\n***\n\nEPILOGUE\n\nGintar returned to Calep, and was reunited with his wife.\n\nAlatey was returned to the Duke as well, but after they'd spoken - at length - Arivan Cunedda asked if Alatey could be allowed to live with the Red Knees.\n\n- \"To help us? Or to spy on us?\" asked Ditgurat.\n\n- \"Couldn't he do both?\" said the Duke. \"I would make him my official representative among you. Alatey can write. If you have concerns that require my attention, he could send me a letter explaining the issue.\"\n\n- \"Hmm ...\"\n\n- \"There is also the fact that he seems to be ... enamored of some of your young females. Quite smitten, I would say.\"\n\nThat was how Alatey came to live with us. It led to endless bickering between Lambug and Bula. It was Bula who had the last word, I suppose, because she ended up bearing him five children, while Lambug only had four. Neither of them seemed to care that he sired five more children by four other females.\n\nThe Duke kept his promises. He officially took us under his protection, which was remarkably effective. There were very few encroachments on the territory of the Red Knees - and those which did occur were swiftly dealt with by the Duke's men.\n\nHe also sent me an anvil.\n\nUmog bore a daughter. Shortly thereafter, she entrusted the child to Shaghar, and went off to Elmina, the capital of Varna, as one of the contingent sent to serve the Duke, as part of our agreement.\n\n- \"I am a warrior.\" she told me. \"And you know that I hate to share. If I stayed here, you would only continue to make me crazy. Better for me to go.\"\n\nI didn't try to talk her out of it. She was right.\n\nUmog was the most impressive of the fighters we sent, and soon became renowned as she travelled everywhere with the Duke.\n\nShe found another lover, too, and bore two more children, who were raised in Elmina, as members of the Duke's Household.\n\nUrzoth also went to Varna, to serve the Duke. But many were surprised when Ogash, Ditgurat's younger daughter, volunteered to go as well.\n\nAs Lagakh had predicted, I had eventually given in, and had sex with her. Twice. I don't know if Ogash was disappointed, or if she believed that she could find a human male of her own in Elmina.\n\nShe did find a man, and bore him three children.\n\nShelur's ankle never healed properly. She continued to walk with a limp. She also remained close by, working with me in the forge. I liked Shelur very much, and I hadn't forgotten that I'd agreed to give her a child.\n\nWe had extremely friendly, thoroughly satisfying sex on a number of occasions. Shelur was an enthusiastic, inventive partner - and incredibly fertile. She bore 4 sons and 2 daughters - all by me.\n\nCoopah continued to age gracefully. He taught Bula everything he knew, to the point that she effectively became our cooper and chief woodworker, with Coopah serving more and more in a merely advisory role. He also continued to advise his daughter, the chieftain.\n\nDitgurat gave birth to a daughter.\n\n- \"I want to name her Yotul.\" she said, asking my opinion.\n\n- \"That's an excellent idea.\"\n\nDitgurat enjoyed tremendous status among the Red Knees. She had defeated challengers, survived in adverse circumstances, and bore a child almost twenty years after her last daughter. She was considered wise, and lucky - which might have been more important.\n\nShe still called on me for sex, though less frequently than before - perhaps once a month. She also took precautions so that she would not fall pregnant again.\n\n- \"It was a good day, Smit, when you came to us.\" she said.\n\n- \"For me, too.\"\n\nLagakh was not even remotely tempted to go to Elmina.\n\n- \"My place is here.\" she said.\n\nDitgurat rarely made a decision without consulting her. Many of the Red Knees looked upon Lagakh as a miracle-worker, and as a symbol of their good luck. She remained the consummate warrior, but also the perfect heir-apparent, gifted with her mother's wisdom as well as her courage.\n\nShe became pregnant shortly after our agreement with the Duke, which virtually everyone considered an excellent omen.\n\nLagakh delivered a strapping baby boy.\n\nAnd then another.\n\nThen a girl. And another boy. Then a second girl.\n\n- \"Could you just use your tongue, tonight, Smit? I'm afraid that you only have to look at me to make me pregnant.\"\n\nLagakh was our future. Even as she aged, she was still the greatest warrior among the Red Knees. Wise, brave, a fearsome fighter, lucky ... and fertile.\n\nGhorza became one of our scouts. She was bright as well as quick. Lambug needed the help, especially when she was pregnant so often, and with Shelur still limping. Ghorza tirelessly patrolled our borders.\n\nAnd when she returned, I was usually waiting for her. I had many lovers, but I was in love with only a select few. Ghorza was one of those.\n\nI couldn't quite explain it, in words. We had few long conversations. But when I was with Ghorza, I felt a powerful sense of ... rightness. It was expressed, sometimes, in the way she held me, or in the way she looked at me - or the way I looked at her.\n\n- \"Why do you have to explain it?\" Shaghar asked me. \"You love her. Why wouldn't you? She can't find words for it, either - but you shouldn't doubt it.\"\n\nGhorza struggled to conceive, which only made her feel less worthy of me. Lagakh was pregnant, Shelur was pregnant, ... but she wasn't.\n\nSeven years after my arrival among the Red Knees, Ghorza conceived a child. She delivered a healthy baby girl. And then two more children after that.\n\nShaghar grew into her role as Shaman of the Red Knees. She became accustomed to people asking for advice, or for help with their problems. She was kind, and she was patient - two prime requisites for the role that had been foisted on her.\n\nShe remained unselfish, never jealous. She took Umog's child, and raised it (with help) as one of our own. She celebrated every time Lagakh or Shelur conceived, and gave birth. She was ecstatic when Ghorza became pregnant. Yet I never for a moment doubted that she loved me above all else. As I loved her ...\n\nShaghar made me happy. We rarely quarrelled, and those disputes were about minor things, or short-lived, or both. We had two children together - a girl and a boy. I wanted to name them both Shaghar, but she overruled me, and insisted that the boy be named 'Smitten'.\n\nSnak was the ideal apprentice: hard-working, curious, and full of questions. She was my most effective assistant when it came to charcoal burning, or the bloomery. She was almost always in a good mood, and raised my spirits.\n\nI treated her like a little sister - she was only ten years my junior. That worked reasonably well until she grew up, and began to develop.\n\nSnak would never lose her buck teeth, or her small fangs. But she did swell and blossom, growing slightly more curvaceous as she grew older. She began dropping ever broader hints about the person she wanted to be her first lover, and to father her children.\n\n- \"You aren't old enough to have children.\" I said. In my mind, she was still a child herself. I didn't tell her that she would be better off with someone her own age - because I didn't believe that for a moment. She'd had a crush on me for years. I had to admit, to, that I was incredibly fond of her. I'd loved her when she was a 10 year-old runt, and I'd only come to like here as she grew up. But I was damned if I was going to take advantage of her youth and inexperience.\n\n- \"I thought you liked me.\" she said, with a sad little buck-toothed pout.\n\n- \"You know that I do. And that's why this isn't going to happen until you are considerably older. It if happens at all.\"\n\nBut Snak only heard the first two things I'd said.\n\n- \"So it's going to happen.\" she said. \"If it's going to happen, then why wait?\"\n\n- \"I don't want you to make a mistake that you'll regret later.\"\n\n- \"I know what I want, Smit. And I think that you want me, too.\"\n\n- \"Aargh! Enough - go talk to Shaghar.\"\n\nMore often than not, Shaghar would take my side. On this subject, though ...\n\n- \"Why are you torturing the poor girl?\" she asked me.\n\n- \"What?\"\n\n- \"Making her wait. It's cruel.\"\n\n- \"It is not cruel. I'm trying to protect her.\"\n\n- \"She's been smitten with you since you first arrived.\"\n\n- \"Exactly! It's a little girl's infatuation. When she eventually grows out of it, I don't want her to regret having given her virginity to the wrong person.\"\n\nShaghar shook her head. \"Smit: she won't grow out of it. Snak has never wavered. And she's not a little girl anymore.\"\n\n- \"She's still too young.\" I insisted.\n\n- \"Is that it? Her age? How old would be old enough?\"\n\n- \"Eighteen.\" I said, a little impulsively.\n\n- \"That's an arbitrary number.\" said Shaghar. \"Why 18?\"\n\n- \"Because that's how old I was. And I was still too young even then.\"\n\n- \"She's much wiser than you were at that age. And maybe even wiser than you are now.\"\n\n- \"Very funny.\"\n\nBut Shaghar wasn't joking, and she immediately went and told Snak what I'd said.\n\nI have to give my apprentice some credit; instead of confronting me right away, she waited until the next day, giving herself time to think it over. Maybe Shaghar was right: Snak might well have been smarter than I was.\n\n- \"I accept.\" she said.\n\n- \"You accept what?\"\n\n- \"Your condition.\" she said. \"I will wait another year and a half. But not a day more.\" That said, Snak stopped pestering me. As far as she was concerned, I'd made a promise, and the matter was settled.\n\nTime flies, they say. The seasons slide by, with increasing speed as one ages. It might have seemed like an eternity to Snak, but the months went by in a blur for me - and then, all of a sudden, the day was only weeks away.\n\nI was subjected to knowing smiles and sly grins from virtually everyone. I was patted or slapped on the back so many times, my shoulder blades ached. It reached a point where I went to complain to Ditgurat and Shaghar.\n\n- \"This is not going to happen in front of an audience. I don't want a crowd gathering to watch!\"\n\n- \"That could be fun.\" said Ditgurat. She was just joking - I think.\n\n- \"Take her to the stream to bathe.\" suggested Shaghar. \"After that, bring her back to your forge. I'll make sure that no one bothers you.\"\n\n- \"The forge? For her first time?\"\n\n- \"Smit, she has probably dreamed of it a thousand times. The forge is the perfect place.\"\n\nShaghar was definitely wiser than I was.\n\nIt was hard to say who was more nervous. Snak had little wildflowers wound into her thick, dark hair. She held my hand, and waited for me to lead her down to the stream. Her head was down, her eyes on the ground. My heart was beating so loudly, I thought she might be able to hear it.\n\nShe had been waiting for this moment for a long time. Truth be told, so had I - no matter how often I'd tried to delay or postpone it. But I had enough sense to know that my own anxiety was meaningless. Tonight was about Snak - and I wanted the experience to be wonderful for her.\n\nI squeezed her hand.\n\n- \"Do you know,\" I said, \"I think that I fell in love with you the first time I saw you.\"\n\n- \"When you asked my name?\"\n\n- \"No. It was the day before. I was just waking up, and saw you trotting by. But you definitely got my attention when you spoke to me. You have no idea how important that was for me.\"\n\n- \"Truly?\"\n\n- \"You made me feel ten times better. In the days to come, I looked back to that moment, and realized that there might be a place for me here, among you.\"\n\nSnak moved a little closer, and leaned her head against my upper arm. She wasn't tall enough to reach my shoulder. She was no taller than Ghorza, and even more slender, with fewer curves. She was small-breasted, narrow-waisted, and had a delicious little backside that made me think of juicy peaches.\n\nBut it was the person she was that made my heart race. Curious, inquisitive, a tireless worker, even-tempered, kind and considerate ... I'd had years to compile a list of complimentary adjectives which described her.\n\nAnd I told her all of them, as we stood outside the forge, hand in hand.\n\n- \"You do like me.\" she whispered.\n\n- \"You've always known that I do. You're one of the most amazing people I've ever met.\"\n\n- \"I feel the same.\"\n\n- \"Shall we go bathe?\"\n\nI led her down to the stream.\n\n*****\n\nThanks again to my editors, Alianath Iriad and Lastman416. I hope to write another story about Leinyere, this time about the successors of Arivan Cunedda, Duke of Varna."
    ],
    "authorname": "AspernEssling",
    "tags": [
        "leinyere",
        "half-orcs",
        "shipwrecked",
        "multiple partners",
        "pregnancy"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/smitten-ch-07"
}
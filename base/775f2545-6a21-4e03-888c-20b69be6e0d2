{
    "title": "Working Out Issues Ch. 08",
    "pages": [
        "\"Do you want me to take my dress off?\" I asked.\n\nAdam blinked, \"Uh...\"\n\n\"And change into some normal clothes?\"\n\n\"Oh!\" he blushed, \"No! No, I mean, whatever you're comfortable with, dude. Wow. You look so...\" he trailed off. His eyes flickered up and down my body, taking it all in. I felt warm, like his gaze was a spotlight shining on me.\n\n\"I may have put on a little makeup,\" I confessed, \"I wanted to try on the dress, and I figured I might as well go all out. Is that dumb?\"\n\n\"No way,\" he said, \"That's smart as shit. You look... breathtaking.\"\n\n\"Aww!\" I said, \"You smell breathtaking.\"\n\nAdam laughed. He was still in his gym clothes and clearly hadn't showered during his break. He did smell, but it was kind of nice. Musky and masculine and powerful. His mussed-up hair looked wet, and his forearms were gleaming, veins bulging, looking even more muscly than usual. My heart fluttered. Imagine if I looked like that, then... Huh. Actually, the familiar thought rang hollow. I already looked great. So why was my heart fluttering?\n\n\"Anyway,\" I held my arms out, \"It's just clothes, right? It doesn't mean anything.\"\n\nAdam nodded quickly, \"Totally.\"\n\n\"We're still bros,\" I said.\n\n\"Oh,\" Adam said. He started looking in his gym bag for something, studiously avoiding my eyes, \"Okay. Yeah. Yeah. Still... still just bros.\"\n\nHe kept fumbling around in his gym bag.\n\nI tilted my head and approached him, \"What are you doing?\"\n\nHe pulled out his drink bottle and held it up, still not making eye contact for some reason, \"I'm just really thirsty.\"\n\n\"Adam,\" I said cautiously, \"If I'm making you uncomfortable, I really can go change.\"\n\nAdam looked up, \"No, dude. I would never ask you to change for me. Your clothes, I mean. Or... anything.\"\n\n\"I dunno,\" I said, \"There's a lot of stuff about me that's worth changing.\"\n\n\"Wait,\" said Adam, looking worried, \"You're not dressed up just for me, are you? Because I bought those clothes, and then kept pressuring you to wear them...\"\n\n\"You didn't pressure me,\" I said, \"You just said they suit me. And they do, right?\"\n\nHe grinned, \"They really, really do. You look great.\"\n\n\"Mm, thank you,\" I flexed my arms mockingly, \"That's thanks to you, coach.\"\n\n\"Team effort,\" said Adam, \"But I don't just mean your body, dude. It's the way you stand, the way you smile. You seem so confident right now.\"\n\nI squirmed a little. God, why were compliments so hard to take? But Adam was right. I could feel it. Once I saw myself in the dress, something changed. I felt proud of myself in a way I never had before. And I never would have got here without Adam supporting me at every step.\n\n\"That's thanks to you, coach,\" I smiled. \n\nAlso, I was wearing heels. That's probably why I was standing differently.\n\nAdam smiled sheepishly and took a sip from his water. I watched the muscles in his neck tense and shift as he swallowed. Sweat glistened on his collarbones. He dropped his gym bag on the ground and tossed the bottle in. \n\n\"Hey,\" he hunched his shoulders, \"Um. I know things have been... kinda different recently. And I hope I haven't been pushing things too much...\"\n\nI thought about the night that I invaded Adam's bed and blushed, \"You definitely haven't.\"\n\nHe breathed a sigh of relief, \"Okay. Good. Cause I always wanna be your bro. That's the most important thing. But can we still... you know... can I still call you my beautiful princess?\"\n\nI giggled. That's what he was worried about? Some dumb in-joke?\n\n\"Of course you can,\" I said, \"My sweet prince.\"\n\nAdam smiled and stepped forwards. His hands found their place on my hips, crushing the folds of my skirt against my body. Instinctively I reached for his shoulders. He pulled me into him, and our lips met for a kiss. I sighed. I was really, really gonna miss this. We pulled back and looked into each other's eyes. Beads of sweat dotted his temples. His smell was intoxicating.\n\nFuck. Ugh!\n\nOne more for the road, right?\n\nI stood on my tiptoes and kissed him again, but this time I didn't pull away. Adam felt the change and adjusted his grip, wrapping his arms around my waist and squeezing me against him, melding our bodies together. I parted my lips, hoping he would take the invitation. He did, and slipped his tongue into my mouth. I moaned, and heard Adam made his own deep, contented noises in response. His hands shifted again, one supporting my lower back, one squeezing my butt as he leaned forwards, almost dipping me. I held onto his shoulders for dear life, pressing my body against his. I felt his hard cock against my hip, and broke out from the kiss.\n\nI reached down one hand and wrapped my fingers around his cock, bulging obscenely against his gym shorts. Adam gasped.\n\n\"Oh, did I make you hard?\" I asked.\n\nAdam nodded, panting desperately. For a guy in such good shape, I sure got him out of breath a lot.\n\n\"Yeah,\" he said.\n\nI smiled wickedly, \"Good.\"\n\nI took a step back, pulling Adam after me. We stumbled together until we crashed down onto the futon. I was on my back with Adam between my legs, hunched over me. For a second we just lay there, hyper aware of the position we were in. Then Adam leaned into me and we kept making out. It felt so amazing. He was so hot and sweaty and eager and breathless and he wanted me, I could feel it, it poured out him with every breath, he wanted me, and I wanted him, in that moment, more than anything. I wanted the intimacy, I wanted the eagerness, I wanted his goofy smile and his \"dude\"s and his meal scheduling and his generosity and his unabashed enthusiasm for everything. I wanted him to fill me up with himself, and my heart ached because I knew this wasn't real, it could never be real, but for now I just crushed that feeling down and kissed him even harder. \n\nAdam stroked a hand along my leg and it felt like electricity. His callused, sweaty fingers moving up the outside of my smooth, soft thigh sent tingles throughout my body. His hand slid up under my dress, then he paused.\n\n\"Can I touch you there?\" he asked tenderly.\n\nI nodded frantically, then grabbed his wrist.\n\n\"Just my butt,\" I breathed.\n\nHe nodded and kissed me. I kept holding his wrist and let him drag me along as his hand kept going, sliding up my thigh, reaching my panties, and then slipping in through the leg hole, caressing my naked ass with his muscular hand, His fingers flirted with my asacrack, sliding towards where I was most sensitive. I gasped and whined, arching my back, pulling my lips away from his.\n\n\"Oh my god,\" I whimpered.\n\nAdam kept squeezing my butt and started kissing my neck. His kisses were quick, passionate, sending shivers down my spine. I moaned. His other hand was under my back, and I realised he was still supporting himself on his elbows and knees. Our bodies weren't touching. And knowing Adam, he could probably hold that position for hours. Not happening! \n\nI grabbed his lower back and tried to pull him into me. He resisted for a second.\n\n\"Adam,\" I panted, \"Can you take your shirt off?\"\n\nHe stopped kissing me and pulled back. His grip on my butt loosened. I saw a pained look flash across his face and immediately felt like shit. \n\n\"Not like that!\" I said desperately, \"I don't want to stare at you, I just want to feel you.\"\n\nAdam bit his lip and nodded, then reached down and peeled off his shirt. I turned my head away, even though my heart raced, knowing how incredible he must look right now, pumped from the gym, glistening with sweat. But that wasn't what I wanted. \n\nAdam lowered his body against me, cautiously. He was still holding his own weight, but his warmth and his closeness made me gasp again. I turned back to him and kissed him deeply, then ran my hands along his shoulders, his arms, his back. God, he felt so thick and strong and powerful. But most of all he felt exposed. Vulnerable. \n\nNo one else got to touch him like this.\n\n\"Ohh,\" I moaned.\n\n\"Mmmm,\" Adam hummed in return, his lips still pressed against mine.\n\nSlowly, as I carressed his bare back, i felt the tension of his muscles start to dissolve. He sank down further into me. I could feel his hardness against my leg. It was time to fix that. \n\nI reached down, tugging against Adam's shorts. He took the hint and pulled them off, kicking them onto the floor alongside his shirt. I grabbed his ass, so firm, protected only by a thin layer of sweat-soaked boxer-briefs, and pulled him into me. He knew what I wanted. For a second we squirmed awkwardly together, shuffling into position, giggling between kisses. And then there we were. Flushed with heat and drenched with sweat. My legs were bent and spread, my skirt had ridden up above my waist. I held tight to Adam's ass and guided him in, like a plane coming for landing, until I felt his hard, throbbing dick press against mine, still tucked back in my panties.\n\nWe both breathed out slowly, then began to rock against each other. Gently at first, and faster, harder, until we were both frantically dry humping like our lives depended on it. I pulled myself against Adam, squeezing him between my thighs, grinding my dick desperately into him. I felt so hot and dirty and sexy. He was so sexy! My eyes were shut tight. He started kissing my neck again and I moaned, \"Ohhh, Adam...\"\n\n\"Mel,\" he panted. His breath was hot against my face, \"You are... so... fucking beautiful.\"\n\nHe started to slow down. My eyes flashed open, \"Adam! Don't stop!\"\n\nHe winced, \"I think I'm gonna...\"\n\nI gasped, \"You're gonna cum?\"\n\nHe bit his lip and nodded. \n\n\"Yesssss,\" I hissed. I held onto him tight and started rocking my hips against him even faster.\n\n\"Ugh!\" he moaned, \"Mel, Mel, please...\"\n\nI rolled my hips, grinding myself against his cock. I could feel it throbbing like he was about to blast cum all over me. I kept one hand on his butt and used the other to pull his head towards me. He was drenched with sweat. I held him close and whispered into his ear.\n\n\"Cum for me, Adam...\"\n\n\"Ah! Oh my god! Mel!\"\n\nHe moaned and bucked his hips, and I felt a splash of warmth and wetness against my crotch. Oh my god! He kept shaking. His hips jerked again, twice, a third time. He was cumming so much! I could feel it through both layers of fabric! Oh my god, I could feel his cum against the inside of my thighs, against my own private parts. He must not have jerked off the whole week. Since I did it for him!\n\n\"Good boy,\" I purred. He gasped in response. \n\nFinally his hips stopped shaking, and he hung over me, panting, staring down intensely into my eyes. I squirmed beneath him, feeling proud and flushed and still super horny. I waited for him to get off me. But he didn't. He just kept staring into my eyes. He looked... hungry.\n\n\"Mel,\" he said, \"I wanna make you cum.\"\n\nMy breath hitched. He... he didn't mean that, not really. That wasn't what this was, this was just for fun, this was just me helping him get off, this was just my way of paying him back for everything he'd done for me, this wasn't...\n\n\"Mel,\" he growled, \"I'm going to make you cum.\"\n\nI melted.\n\n\"Okay,\" I whispered.\n\nHis fingers trailed up the side of my thigh. I whimpered and covered my face. Oh my god. This was so real. I felt all my hairs stand on end. Oh my god, I should have shaved my legs again this morning. He grabbed the waistband of my panties and slowly pulled them down. I wiggled out of them, and he tossed them across the room. I held my breath, waiting for the moment when he saw my dick and got grossed out and got up and left.\n\nIt never came.\n\nInstead, I felt his fingers wrap around my straining hardness. \n\n\"Adam,\" I whined, \"You don't have to do this.\"\n\n\"Hey,\" I heard his voice next to me. I parted my fingers and peeked up at him. He stroked my cheek, \"I want this.\"\n\nI took a deep breath and moved my hands away from my face. He kissed me softly as he began rocking his hand up and down my dick. I couldn't believe his hands could be so gentle. I could feel the calluses from all his hours of lifting weights, but his hand and my dick were so wet and slick with sweat and precum that they didn't feel rough, they felt nice, ribbed for my pleasure, and I giggled stupidly, and Adam laughed too and kissed my cheeks and my neck, and his hand moved faster and faster and the pleasure kept building and building and my whole body shook.\n\n\"Adam,\" I whined, \"I'm really close.\"\n\nHe smirked, \"Yessssss.\"\n\nI laughed breathlessly and kissed him again. His hand flew up and down my shaft, gently coaxing me to the edge.\n\n\"Who am I, Mel?\" he asked.\n\n\"You're my sweet prince,\" I gasped.\n\n\"Who are you, Mel?\"\n\n\"I'm your beautiful... Ohhh!\" \n\nI moaned and shuddered, and flooded Adam's hand with my cum. Adam moved his other hand down quickly, and I realised, holy shit, he was making sure I didn't ruin my dress. I wanted to cry. How was I lucky enough to have this guy as my roommate?\n\nI finished cumming. Adam sat back on his heels. I laid back on the futon and slowly regained my breath. Holy shit. That was more intense than any workout Michelle Champion had ever given me. After a couple minutes I looked up and realised Adam was still sitting there, watching me with a dreamy smile on his face. His hands were cupped, still holding my cum.\n\n\"Don't waste the protein, bro,\" I joked weakly.\n\nAdam smiled devilishly and leaned forward. No fucking way. He stuck out his tongue and lapped up a little of my cum.\n\n\"Oh my god!\" I shrieked, \"Did you actually?!\"\n\nHe laughed and nodded. He licked his lips, \"I'm gonna be honest. It doesn't taste amazing.\"\n\n\"You are insane,\" I laughed, \"I can't believe you just did that!\"\n\n\"Gains, bro,\" he smirked, \"Um. I'm gonna go wash my hands, if that's okay.\"\n\n\"Get out of here, you freak,\" I said. \n\nAdam gave me one last kiss, careful not to spill anything on me, then headed for the bathroom. I sighed and rolled onto my side, listening to the faint sounds of him cleaning up. Wow.\n\nOkay.\n\nSo that had gotten a little intense.\n\nI really hadn't expected Adam to... to touch me like that. Oh man. I shivered. Maybe Adam was... kind of into guys? Not into me specifically, of course, but that would explain why he seemed so eager to touch my dick. But he would have brought it up before, right? Surely we were close enough by now that he would have mentioned it. No, I was reading into it too much. He was just being nice. God, he was so nice. I couldn't believe he thought to protect my dress! It had taken forever to clean my nightie after last time. \n\nI heard a buzzing sound. I rolled over and saw that it was Adam's phone, peeking out of the pocket of his gym shorts.\n\n\"Adam!\" I called out, \"Your phone's buzzing!\"\n\n\"It's just a reminder about my next client!\" he called back. He came out of the bathroom, rubbing a towel over his body. I could still see the dark stain on the front of his underwear. I did that!\n\n\"Do you need to go now?\" I asked, feeling a little pang of loneliness. \n\n\"Nah,\" he said, \"I'll tell them I'm sick. Wanna cuddle?\"\n\nAhhh. I kinda did, but... no. No, this had been fun, but I couldn't let my craving for intimacy mess up Adam's actual life. He had better things to do. That's what tonight was all about. \n\n\"I'm all cuddled out,\" I said, \"You should go! I'll meet you for dinner afterwards.\"\n\n\"Alright,\" Adam smiled, \"I'm really looking forward to it.\"\n\n\"Me too,\" I said, although now that I thought about it, I wasn't so sure. Thinking about Adam meeting Ashanti gave me a weird feeling in my stomach. I was probably just nervous that things wouldn't go as planned.\n\nAdam took a look at his gym clothes, lying in a dripping pile on the floor, then shook his head and went to go get changed. I stretched out on the futon, sweaty, makeup probably ruined, dress not cummed-on but totally soaked, luxuriating in post-roommates-helping-each-other-out bliss. You know, that common feeling. I was totally exhausted, and totally relaxed, and almost... complete.\n\nI felt more like myself than I had maybe ever felt. But it was like there were just a couple things I couldn't put my finger on. But almost complete was still pretty good!\n\nJust like my little tryst with Adam. Almost complete."
    ],
    "authorname": "blake1",
    "tags": [
        "dry humping",
        "handjob",
        "mtf transgender",
        "trans",
        "trans female on male",
        "trans girl",
        "trans woman",
        "transgender romance",
        "transgender woman"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/working-out-issues-ch-08"
}
{
    "title": "When It Rains Pt. 02",
    "pages": [
        "Author's Note:\n\nWhen It Rains is the story of Jocelyn Miller and her fucked-up family. After her sister's disastrous wedding, Jocelyn finds solace in the arms of the one person she shouldn't.\n\nThis is part 2 of 3. It contains an older man/younger woman relationship, family drama, twists, turns, secrets, and surprises. Driven mainly by plot, there are erotic scenes throughout, however they do take some time to get to. I hope you enjoy the story!\n\n<center>**\n\nNOW\n\n**</center>\n\nMy leg was throbbing. It was a weird sort of tightness, skin mending together but still fragile and papery, like it could tear any moment. It pulsed in time with my heartbeat, slow and steady as it pulled me from sleep, and quickening as I took in the world around me.\n\nI couldn't be sure of the time: at first, I thought it was early based on the cool light cutting through the gaps in the curtains, but the sound of rain against the window meant it could have been any time, really. The air in the room was cool, cold enough that the tip of my nose felt chilled, but the rest of me was shrouded in warmth. Thick blankets were pulled up to my neck, and beneath those blankets, strong arms enveloped me. I was naked, embraced against his body, legs still entwined with his, and soft puffs of breath made my hair brush gently against my forehead.\n\nWhether my heart was racing because I was horrified at myself for sleeping with my ex-boyfriend-and-almost-brother-in-law's father or because I was completely electrified to be waking up skin-to-skin with Derek, I didn't know. It was probably both. \n\nThe fact that it was probably both made the guilt start crawling through me, a surging wave of nausea that rolled through my stomach so strongly, I unintentionally shifted in Derek's arms.\n\nHe must have been a light sleeper; I barely jostled him, but he inhaled deeply and his arms tightened around me. I held my breath, though I wasn't really sure why. He had to wake up sometime, and it wasn't like I could untangle myself from him and sneak out of his bedroom with him none the wiser. \n\nOf course, me holding my breath did nothing. Derek seemed to have the same slow sort of wake-up that I did, a few moments of blissful ignorance before he likely remembered who was in his arms and why, what we had done, and what we now had to face.\n\n\"Joss?\" he murmured. \"You awake?\"\n\n\"Mm-hmm.\"\n\nHe took another deep breath, not quite sighing as he let it out. I thought he might stop holding me, that he might push me away from him as the panic and guilt set in, but he didn't. His arms loosened slightly, but only so he could trail one hand down my back, calloused hands making me shiver against him.\n\nHe chuckled softly as he felt me shake.\n\n\"Ticklish?\" he asked.\n\n\"No,\" I muttered.\n\nHe traced his fingers back over the same spot, and again I shivered.\n\n\"I don't know if I believe that,\" he said.\n\nI smirked but didn't say anything.\n\n\"Been up long?\" he asked.\n\nI shook my head. Derek twitched as my nose brushed his chest.\n\n\"Your nose is freezing!\" \n\n\"Well, yeah. Why is it so cold in here?\"\n\nHe shook the blankets away from one of his arms, bringing his hand up to my face and covering my nose. I burst out laughing, startled by the sudden gesture, and jerked back. Derek was looking at me, fighting back a smile.\n\n\"What are you doing?\" I giggled.\n\n\"Warming you up,\" he said innocently. He managed to hold an almost-serious expression for a moment longer before dissolving into his own laughter.\n\nIt was stupid. We shouldn't have started the day like that, laughing like what we had done was perfectly normal. We should have been properly mortified to find ourselves in bed together. I should have modestly stolen a sheet to cover myself and he should have chivalrously averted his eyes while I dressed, and then we should have had a very serious conversation about why what we did was wrong and how we could never, ever tell anyone about it.\n\nInstead, we came to the unspoken agreement that we were just going to forget everything for a little longer. We forgot everything just long enough for Derek's hand to move from covering my nose to cupping my cheek, just long enough for him to tilt my head up, just long enough for him to press his lips to mine and for me to melt against him.\n\nOne kiss turned into two, then to three. The fourth kiss was different: I could sense the sadness, playfulness turning to a longing we knew shouldn't be requited. My heart ached as he lingered, his lips just barely on mine. My eyes were closed when he pulled away, though saying he pulled away was generous. I could still feel his breath, still sense his presence just barely an inch away from me.\n\n\"We should talk about this,\" he said.\n\n\"Do we have to?\"\n\n\"Yeah, Joss, we have to.\"\n\nSlowly, I opened my eyes. He was looking at me, his eyebrows furrowed just slightly. There was something in his eyes: warmth, certainly, but also something that could have been pain or pity. Regret, maybe. The uncertainty of how to tell me to get out of his bed and never speak about this again.\n\n\"We don't,\" I said. \"I get it.\"\n\nI pulled back, holding the blanket awkwardly to my chest as I sat up.\n\nDerek looked surprised, propping himself up on an elbow as he stared at me. \"Get what?\"\n\n\"It,\" I said. \"I get it.\"\n\n\"I don't know what 'it' is.\"\n\n\"It. This. It was a fun but stupid thing to do, you're now riddled with guilt about it, you're going to lecture me on the same things you did last night\u2014blah blah blah, you're my ex's dad, blah blah blah, age difference\u2014and ask me not to say anything to anyone. And I'm going to promise that I won't, and you're going to be happy about that, and we'll both just agree that it was a mistake.\"\n\nI was pulling the blanket around me and awkwardly reaching for my panties when Derek spoke again.\n\n\"Do you regret it?\" \n\nI stopped and looked back at him.\n\n\"What?\"\n\n\"Do you think it was a mistake?\" he asked bluntly. \n\n\"Do I...\"\n\nI trailed off, trying to put what I was feeling into words. Did I regret it? Not a moment of it. Was it a mistake? Probably.\n\nBut did I think it was a mistake?\n\n\"No,\" I said quietly.\n\n\"Me neither.\"\n\nMy heart was hammering inside of my chest, hard enough that the cut on my leg felt like it was going to burst open. \"What about all the... problems?\"\n\n\"Oh, you mean the whole 'I'm your ex's dad, blah blah blah age difference'?\"\n\nI laughed in spite of myself. \"Yeah.\"\n\nDerek sighed. \n\n\"I have no idea. All I know is it doesn't make me want you any less.\" He paused, shaking his head. \"I mean, it should. It really fucking should. I've got a kid older than you, Joss. And Isaac would... he already barely tolerates me. He'd be livid if he found out.\"\n\nI swallowed hard, staring down at the blankets. \"But you don't regret it.\"\n\n\"No.\"\n\nI tried to fight the tears, my face twitching as I struggled to hold them back. \"So now what?\"\n\nHe was silent for a moment, then shook his head. \"We can't do this again.\"\n\n\"I know.\"\n\n\"I'm sorry.\"\n\n\"Me too,\" I whispered.\n\n\"This fucking sucks.\"\n\nI tried not to laugh. I knew if I laughed, Derek would hear the watery sound of my voice, that he'd know how devastated I was, and that he'd either feel horrible or start regretting having ever brought me to his bedroom.\n\nTrying to suppress the laugh failed, though, and I made a strange sort of choked garble, clapping my hand to my mouth.\n\n\"Oh my God,\" I blurted, embarrassed.\n\nHe didn't say anything. He should have said something. He should have stayed resolute or, at the very least, stayed where he was. Instead, moments later he was embracing me, pulling me into his lap as I sniffled, mortification creeping up my neck and turning my face red.\n\nThen he was wiping my tears, the roughness of his thumb brushing along my cheek as he pleaded with me not to cry. I apologized again and he kissed the top of my head, then my forehead, then the trails my tears were still leaving on my cheeks, and then I was turning my head towards his and his lips were on mine and he didn't pull away. He kept kissing me, kept holding me, kept letting me wrap my arms around his shoulders and kiss him back. \n\nI shifted in his lap, my legs around his hips and my breasts against his chest. Derek groaned and clutched me. His tongue was in my mouth, flicking against mine, and already I could feel him getting hard. I squirmed against him, feeling his cock brush against my slit.\n\n\"Fuck, Joss,\" he groaned. \"We just said...\"\n\n\"Let's just forget,\" I gasped. \"Just one more time.\"\n\nHe growled, nipped at my lower lip, and twisted so he could push me onto my back. I landed with a soft gasp, air puffing past my lips, hardly able to draw a breath before Derek was holding himself over me and kissing me again.\n\nLips trailed down my neck to my breasts, my nipples hardening as he lavished attention on them. He was incredibly thorough, his lips tracing along every inch of skin, his hands cradling and fondling and squeezing. Every movement was a rush of arousal, a tingling that travelled over my skin and through my body, pooling between my legs. \n\nHe stopped quite suddenly, pressing a single kiss between my breasts before sitting up and staring down at me. His eyes raked down my body, taking in every inch of it. I bit the inside of my cheek, trying to will my self-consciousness to leave me alone for just a moment, but I couldn't control the warm flush that started on my chest or stop myself from shifting uncomfortably as he stared.\n\nWhen I moved, he flicked his eyes up to mine.\n\n\"You're so gorgeous,\" he murmured.\n\nI laughed uncomfortably. \"Bullshit meter's going off.\" \n\nHe scoffed and shook his head. \"Don't play that game. You're absolutely stunning.\"\n\n\"It's not a game,\" I said. \"You don't need to tell me I'm pretty. I'm... acceptable.\"\n\nThere was a moment where he seemed to be torn between thinking I was trying to get him to compliment me and thinking I really believed that about myself. He didn't say anything, just flicked his eyes down my body again and then back up to my face.\n\n\"Acceptable?\" he finally said. \"Joss, everything about you is perfect.\"\n\n\"Don't,\" I whispered.\n\n\"It's true. Who the hell told you otherwise?\"\n\nI didn't answer and Derek shook his head.\n\n\"Look at you.\" He skimmed his fingers along my skin, tracing every curve. \"You have this perfect body, these gorgeous, perky breasts, this beautiful stomach, these amazing hips with this... you know, I had my face pressed against your pussy for quite a while last night and it was so fucking good, I didn't even notice you had another tattoo.\"\n\nI laughed as his fingers walked up the vines on my hip, another uncharacteristically-feminine touch that I kept hidden from almost everyone.\n\n\"I'm stocky,\" I said. \"I know that. I'm built like an armchair.\"\n\n\"I've built armchairs. They don't look a thing like you.\"\n\n\"I know what I look like,\" I whispered. \"You don't have to\u2014\"\n\n\"You clearly don't,\" he interrupted. \"Jocelyn, look at you. Jesus Christ, you're... why do you think this is so goddamn difficult? You're this amazing, sweet, hilarious woman who says shit that blows my mind, and all of that is packaged up in this perfect little shell.\"\n\nThere wasn't a trace of laughter on Derek's face. He was as serious as I had ever seen him, almost fierce in his insistence. I had no idea what he was seeing that I didn't, or couldn't, but all I could do was nod.\n\n\"Okay,\" I said. \"I, um, I'm not an armchair.\"\n\nHe snorted and leaned forward, kissing me intensely.\n\n\"You are not an armchair,\" he repeated. \"You are beautiful, Joss. You're incredible.\"\n\nI couldn't agree with him on that. I'd spent my whole life looking in the mirror and seeing a girl who wasn't pretty, who wasn't perfect, who wasn't anywhere close to beautiful. For the moment, the best I could do was stop comparing myself to a piece of furniture, and that would have to be enough for now.\n\nHe seemed to sense it but didn't press the issue. Instead, he showed me what he thought. He kissed every part of my body, his lips worshiping me until I couldn't take it any longer. \n\n\"Please,\" I gasped. \n\nDerek's eyes flicked up from the place he was kissing, which happened to be a particularly sensitive spot on my inner thigh, a mischievous glint hidden beneath a raised eyebrow.\n\n\"Please what?\"\n\n\"I need you.\"\n\n\"Mm,\" he said. \"Is that so?\"\n\n\"Stop teasing me,\" I grumbled.\n\nHe moved between my thighs, then surprised me by tugging me into his lap into a position similar to where we started. Kissing me, he leaned back against the headboard, then brushed a hand through my hair. I shifted on top of him, his cock sliding along my slick pussy, and moaned softly. I wanted him inside me, but I couldn't deny how good it felt to even just rub against him. \n\nDerek didn't seem to mind when I rolled my hips again, making a soft noise as my wetness coated his cock. I did it again, shuddering as his tip brushed against my clit, and again when his hands gripped my waist. He let me continue to use his cock selfishly for a while, watching my face as I ground myself against him. I couldn't stop myself. A ball of pleasure was building up inside me, growing and pulsing. Every nerve in my body was poised to fire, every muscle prepared for the surge of bliss. I was ascending, meandering ever-closer to the tipping point, and I wasn't quite there yet when Derek unexpectedly shifted beneath me, the tip of his cock breaching my entrance.\n\nMy mouth dropped open in surprise; seconds later I was crying out as I came, pleasure bursting through me unexpectedly. He buried his cock in me as my pussy clenched around him, and his hands held me still as I shook on top of him, unprepared but exulting in the sudden euphoria.\n\nHe was sucking on one of my nipples when I came down from the blissful high, his hands splayed across my back as he thrust up into me. My body was his to use, taken by him but freely given, gladly given, and I held on as he buried himself inside me again and again.\n\nI took back some of the control after a bit, shifting my hips and starting to ride him. Derek moved away from my breasts and looked up at me, his eyes boring deep into mine before he kissed me. It was not the kind of look or the kind of kiss that we should have shared. The emotions that came with those actions should have stayed buried. They needed to stay buried, for everyone's sake, but we seemed to have forgotten about that, too.\n\nHis lips didn't leave mine when I came again; I cried out against his mouth, the sound muffled as my body shook. At the end of that orgasm, I could barely hold myself up, and Derek shifted me to my back with his cock still inside me. Once there, he moved inside me deeply, hard but not fast. \n\n\"Gonna come,\" he groaned, and I pulled his face to mine so I could feel his breath as he finished, feel the vibrating groan as he came inside me.\n\n\"We can't do this again,\" he murmured after we both caught our breaths.\n\n\"I know,\" I whispered.\n\nHe kissed me, and I kissed him back, and I knew it wouldn't be the last time.\n\n<center>**\n\nTHEN\n\n**</center>\n\n\"Jocelyn?\"\n\nI looked up from my beer to see a man with brown hair and lively eyes leaning against the bar.\n\n\"Mateo,\" I said. \"Please don't tell me you're my blind date.\"\n\nHis face turned red. \"Uh, no. Sorry, I didn't know you were on a date.\"\n\n\"I'm not.\"\n\nMateo winced. \"Did you get stood up?\"\n\nI shook my head, draining the rest of my glass. \"No, I just needed an excuse for why I'm drinking alone.\"\n\nHe chuckled. \"If I buy you another, can I sit with you for a while?\" \n\n\"Okay, but I'm not going home with you just because you're trying to get me drunk.\"\n\n\"I'm not\u2014\"\n\n\"I was joking,\" I said blandly. \"Isaac might be okay with marrying my sister, but I'd still find it weird to hook up with his best friend.\"\n\nMateo's smile was tense. \"Fair.\"\n\nHe waved the bartender down and got a refill for me and a first for himself. \n\n\"So what are you doing here?\" I asked.\n\n\"Full disclosure? I went to find you at the shop, and Bretta said you'd taken off early, but were probably here getting drunk.\" \n\nI laughed dryly and shrugged. \"The bitch knows me.\"\n\n\"Why the mid-afternoon day drinking?\" he asked.\n\n\"The dresses came in. Chelsea wants everyone to go to the shop tonight to try them on for the first round of alterations.\"\n\nHe nodded understandingly. \"I wanted to talk to you about that, actually.\"\n\n\"About the dresses? I had zero say in that, Mateo. You'd need to talk to Chelsea. Just a head's up, as best man you'd probably have to wear the pink dress with the grey sash.\"\n\nMateo chuckled. \"No, I meant about Chelsea. And Isaac.\"\n\nI looked at Mateo closely. He was smiling, but there was tension in his neck and his eyes were wary. \n\n\"For fuck's sake,\" I said. \"I swear to God, I'm doing the best I can. What more does Isaac want from me?\"\n\n\"Uh, nothing that I know of,\" Mateo said. \n\n\"Sure, of course you don't. What else can I fucking do?\" I took a huge swig of beer. \"I don't hold it against Isaac, okay? I know he didn't do this just to screw with me or something, but I'm not going to sit here and start acting like we're buddy-buddy or something. He is just going to have to learn to deal with that. Chelsea... she's my sister. She... she's not a nice person, but she's my sister, as my parents keep reminding me. I thought she... Things were supposed to get better but she's not... Look, I'm trying, okay?\"\n\nI could feel a lump in my throat and I gulped more beer, trying to force it down. \n\n\"You can go back and tell Isaac that I have put aside all pride here, okay? All of it. I'm over it, I'm over him, but I can't pretend like we're friends. I can't pretend to get excited about lilies and carnations and, I don't know, fucking boho-chic place settings and shit. I'm not a princess, I'm a goddamn mechanic, and this whole thing is a sham in the first place.\"\n\n\"He didn't ask me to talk to you,\" Mateo said.\n\n\"Then why are you here?\"\n\n\"I wanted to talk to you about the fact that Isaac's making a huge mistake.\"\n\nI paused, staring at Mateo. He looked back, eyes determined and concerned. \n\n\"Explain,\" I said.\n\nHe sighed. \"Isaac's been my best friend since we were kids, okay? You need to understand that. I have three brothers already, and they'd kick my ass if they heard me say this, but he's more my brother than any of them are. He listens to me, okay?\"\n\n\"Okay.\"\n\n\"When his parents got divorced, I was the one who convinced Isaac not to just cut his dad out. I was the one who was there when he was fucking breaking down in college because of the course load. There is no one in the world Isaac is closer to than me.\"\n\n\"Where are you going with this?\" I asked.\n\n\"Chelsea is bad for him,\" he said. \"I don't know how he doesn't see it, but she is. He's so in love with her that\u2014\" He cut off suddenly, grimacing. \"Uh, sorry.\"\n\n\"For what?\"\n\nMateo looked uncomfortable and I rolled my eyes.\n\n\"I know he's in love with her. I'm not about to cry you a river over it.\"\n\n\"Right. Sorry.\" He cleared his throat. \"So, uh, Isaac. He's blind to the fact that she's using him. She's already talking about becoming a stay-at-home wife\u2014not a stay-at-home mom, she apparently wants to start staying home before that\u2014and I'm like... at least 80 percent sure that she's already cheated on him.\"\n\n\"Really? With who?\"\n\n\"If I'm right, with her boss.\"\n\nI snorted. \"Must be. She's probably bored since I haven't dated anyone since Isaac and I broke up.\"\n\n\"She's bad news and Isaac's so drunk on love he can't even handle hearing the smallest amount of criticism about her. Like, you point out Chelsea made a mistake, and he almost loses his mind.\" He took a sip of beer before continuing. \"If you think I haven't tried to talk some sense into him, you're wrong. The fact that I can't even get him to listen to reason... I'm desperate, okay? I've tried everything I can think of and nothing has worked.\"",
        "\"What do you mean, tried everything?\"\n\n\"To get him to break up with her,\" he hissed. \"I've tried being rational, I've tried pointing out the facts, I've tried begging\u2014I shit you not, Jocelyn, I begged the bastard not to propose\u2014and he won't listen. He told me if I bring it up again, we're not going to be friends anymore.\"\n\n\"And you think I can talk him into it?\" I asked sarcastically. \"If he's a moron, that makes you a fucking idiot.\"\n\n\"Not him,\" Mateo said. \"Chelsea.\"\n\n\"What?\"\n\n\"We need to make Chelsea leave him.\"\n\n\"We?\"\n\n\"Yeah. I need your help.\"\n\nIt was my turn to stare, my mouth hanging open. Determination was written across Mateo's face, from the glint of his eyes to the set of his jaw. He didn't even blink, just met my gaze with a steady, unshakeable sense of tenacity. \n\n\"No,\" I finally said.\n\n\"What?\"\n\n\"No,\" I repeated. \"I'm not... I mean, yeah, she's been a... I get where you're coming from, okay? But I'm not... family is family.\"\n\n\"You really believe that?\"\n\nI chewed the inside of my cheek. \"Yeah.\"\n\n\"You're so full of shit.\"\n\n\"So what if I am?\" I asked. \"Why the hell would I even help with this? I don't owe Isaac anything.\"\n\n\"You don't want revenge on your sister for taking him in the first place?\"\n\n\"Fuck off.\" I glared at him. \"Don't drag me into this shit, okay? I'm sorry your best friend is a moron, Mateo, but I'm done with him. I just want to get through this farce of a wedding and move on with my life.\"\n\n\"Think about it,\" he pleaded. \"You know as well as I do that Isaac doesn't deserve to\u2014\"\n\n\"Seriously, fuck off.\" I got up, shaking my head. \"You want to get Chelsea to break up with him, do it yourself. Isaac's life isn't my problem, okay? I don't want to be involved. Now, excuse me. I have to go try on a dress that makes me look like a fucking fairy princess.\"\n\nMateo's visit was probably the worst possible thing that could have happened prior to the dress fitting. If he had just left me alone, I could have had my drink at the bar, gritted my teeth, and spent the night pretending that Chelsea's passive-aggressive comments weren't getting to me. Instead, I was already balancing on the edge of breakdown when Mom picked me up, and that ledge started to crumble precariously when we walked into the dress shop to see not just Chelsea, not just the rest of the bridesmaids, but Angela.\n\n\"Joss!\" she said cheerfully. \n\nI loved Angela, but the prospect of having yet another witness to my pink taffeta humiliation was almost more than I could handle.\n\nShe didn't hug me, but put an arm around my shoulder in greeting as I walked up.\n\n\"Bianca, good to see you again,\" she said to my mom.\n\n\"You too, Angela.\" They smiled at each other politely, clearly not friends but not necessarily enemies.\n\n\"Finally!\" Chelsea groaned. \"Jocelyn, you can't be late for stuff like this.\"\n\n\"I was the one who drove her,\" Mom said.\n\n\"It's no big deal anyway.\" Angela patted my back. \"The seamstress is running behind. She said it should just be another few minutes.\" \n\nChelsea took a deep breath, clearly not willing to disagree with her future mother-in-law about my lateness. \n\n\"I'm sorry,\" I said. \"Really. I didn't... I'll make sure I'm on time, next time.\"\n\n\"Good,\" she said gruffly, then turned back to the other bridesmaids.\n\nI let out the breath I'd been holding. It wasn't a perfect reaction, but at least she wasn't yelling at me or berating me.\n\n\"What are you doing here?\" I asked Angela. \"Wait, that came out wrong.\"\n\nShe chuckled. \"I understand, dear. Isaac and his father are having their suits fitted across the street, so he suggested I join Chelsea over here.\"\n\n\"That was a great idea,\" Mom said. \"We really should have you involved in more of the plans, Angela. You're about to be family, and family is family after all.\" \n\nI knew she was trying to be nice, but the words made my stomach curl. Mom seemed to notice the grimace I tried to hide.\n\n\"What's wrong?\"\n\n\"Just a stomach ache,\" I mumbled. \"I'm fine.\"\n\n\"Did you eat something? Do you need the bathroom?\"\n\nMy face turned red. \"I'm fine, Mom. It's just, uh, cramps.\"\n\n\"Oh, I might have some Midol in my purse, let me check.\" \n\nShe plopped her handbag on a nearby table and started digging through it. I turned away, pretending to be very interested in a nearby rack of bridesmaid's dresses that all would have probably been preferable to the one I was about to try on. Moments later, three things happened almost simultaneously.\n\nFirst, the seamstress and a saleslady came out of the back and walked over to Chelsea. \n\n\"Ms. Miller, it seems there's been an error with one of the dresses. It's a bit of a different style than the others.\"\n\nChelsea's face started turning red.\n\n\"Hey, baby!\" called someone from the front of the store. I looked over to see Isaac walking towards us, grinning at Chelsea, and Derek following just behind him. \"Are we allowed to see the bridesmaid dresses?\"\n\nMom, not paying attention, pulled a small pill bottle out of her purse victoriously. \"Jocelyn! I found some Midol. Are they one-pill cramps or two-pill cramps?\" she asked loudly.\n\nDerek glanced in my direction, looking slightly alarmed. All I could do was start laughing.\n\n\"Oh sure, laugh again!\" Chelsea snapped at me. \"Thanks a lot, Jocelyn. Did you do this just so you didn't have to wear the damn pink dress or are you just enjoying watching my wedding day go to shit?\"\n\n\"I wasn't laughing at you!\" I said. \"I was laughing at\u2014\"\n\n\"Whatever,\" she hissed. \"This is just like you.\"\n\nIsaac immediately looked like he regretted entering the store. \"I'm sure it's fine, baby.\"\n\n\"How would you know?\" she snapped. \"And what are you even doing here?\"\n\n\"We're done already,\" he said helplessly.\n\nEven the other bridesmaids looked embarrassed. Lisa was determinedly staring at a wall, Mom's eyes were wide, and Angela looked furious.\n\nThat was probably the scariest part: Angela was probably the nicest person I'd ever met in my entire life, and it's true what they say: never, ever piss off a nice person. Never piss off the person who always has a cheerful smile and a kind word for everyone. Never upset them, because when they're upset, damn if it's not the most terrifying thing in the world. \n\nLuckily, Derek had been married to Angela for long enough to recognize the look on her face.\n\n\"Hey now,\" he said pleasantly. \"Let's all just take a breath here.\"\n\n\"Excuse me?\" Chelsea said.\n\n\"I said we're all going to take a deep breath and calm the fuck down,\" Derek said bluntly. \n\nChelsea's mouth opened and closed, then she looked at Isaac, her eyes burning. \"Are you going to let him talk to me like that?\"\n\n\"Considering how you just spoke to him, why the hell not?\" Derek replied.\n\n\"Dad, stay out of it.\" Isaac walked over to Chelsea, taking her hand. \"I'm sorry, baby. What's the problem, what's going on with the dress? Do we need to order a new one?\"\n\nHer face changed almost instantly: anger warped to a pathetic, simpering pout.\n\n\"There's not enough time,\" she whined. \n\n\"We'll figure it out,\" he promised. \"If we have to buy a new dress, we buy a new dress. Whatever we need to do to have a perfect day, we're gonna do. So, let's figure this out.\"\n\nShe sniffed dramatically and I almost retched.\n\nThe saleslady finally piped up, her voice wavering. \"It's the same fabric and colours. It's just that the sleeves and neckline are a bit different, and the bodice isn't form-fitted, and the skirt is just a tiny bit fuller.\" \n\n\"It's a completely different dress, you mean,\" Mom said.\n\nThe saleslady shrugged feebly.\n\n\"You know what, why don't we just take a look at the dress?\" Angela suggested, having seemingly calmed down a bit.\n\nI loved Angela. She was one of the sweetest, kindest people I knew. I reminded myself of that as the seamstress zipped the dress up and I looked in the mirror, knowing I was about to walk out in front of everyone wearing the ugliest thing I'd ever seen in my life. Before even opening the door, I knew Chelsea would force me to wear it. There wasn't a single doubt in my mind.\n\nWhen I walked out in a dress the colour of bubblegum that had lost its flavour, with small puffed sleeves and baggy fabric hanging around my entire chest until it pinched in at the empire waist, I almost dared the seamstress to drop a pin. Mom's eyes were comically large, Angela's face was almost blank, Isaac looked like he was sorry he had ever walked into the dress shop, and Derek was fighting not to laugh. \n\nHonestly, Derek's reaction probably hurt most of all, and that included when Chelsea squealed loudly and clapped her hands together.\n\n\"I take it back!\" she exclaimed. \"Oh my God, Joss! It's perfect!\" \n\n\"Yeah!\" agreed Lisa, and the other bridesmaids murmured their fake approval. \"It really suits your... body shape.\" \n\nI looked desperately at Mom, but she didn't seem to know what to do. Isaac smiled moronically.\n\n\"See? It all worked out!\" he said.\n\nThe saleslady threw in free alterations for all the bridesmaids, and I was stuck staring at myself in a three-way mirror as the lady pinned and pinched and prodded the fabric until it was no longer just the colour of chewed-up bubblegum, but a shape that was reminiscent of it, too. \n\nWhen I was finally allowed to change back into my jeans and TARDIS T-shirt, Chelsea was thoroughly distracted by Lisa's alterations. Mom touched my shoulder as I walked by.\n\n\"Are you okay?\" she whispered.\n\n\"Yeah, I love looking like a bottle of Pepto Bismol,\" I muttered sarcastically.\n\n\"It's not that bad, Joss.\"\n\nIt absolutely was that bad, and if I had to sit there for any longer, I was going to scream.\n\n\"Excuse me, I have to run for a sec,\" I said.\n\n\"What?\" Mom said. \"Where are you going?\"\n\n\"Out for a smoke.\"\n\n\"You don't smoke,\" she hissed.\n\n\"I'm considering starting. I'm practicing by going out for smoke breaks to see if I like them or not.\"\n\nBefore she could say another word, I pushed past her and hustled to the front of the store. The door swung shut behind me and I turned to the left, following the sidewalk past a shoe store and a deli to the edge of the building. I rounded the corner, found myself in the back loading dock, and leaned against a green dumpster. Taking a deep breath to calm myself, I immediately regretted my choice to lean against the dumpster, and tried not to gag as I moved to the wall of the building and leaned against that instead. Closing my eyes, I wondered if it would be overkill to fake my own death before the wedding.\n\n\"You okay?\"\n\nI stiffened, hesitating for a moment before opening my eyes. Derek stood near the corner of the building, hands tucked into his pockets, looking far too good for someone I was angry at.\n\n\"Fine,\" I said.\n\n\"Oof,\" he said. \"You sure? I think it just got about ten degrees chillier out here.\"\n\n\"Fuck off,\" I muttered.\n\n\"Whoa!\" It came out as a stuttered sort of laugh. \"We must have different definitions of 'fine'.\"\n\n\"We also seem to have different definitions of what's funny and what isn't.\"\n\nDerek looked to the side, heaving a sigh. \"I wasn't laughing at you.\"\n\n\"Sure, you were just laughing at the same thing everyone else was laughing at, which was obviously not the fucking pink abomination I was wearing. One of those 'you had to be there' things, right?\" \n\n\"Joss, I wasn't laughing at you.\"\n\n\"You should've been,\" I muttered. \"I suppose it would be funny to anyone who doesn't have to wear the ugly-ass thing.\"\n\nHe walked up and leaned on the wall beside me, hands still tucked in his pockets. \n\n\"I was trying not to laugh because about ten seconds before you walked out of the dressing room, Angela called out your sister for how she was speaking to Isaac.\"\n\n\"What?!\"\n\nDerek fought back a smile, shaking his head. \"I mean, keep in mind that Ange doesn't say a bad word about anyone. While you were in there, Chelsea started complaining about how the dress mix-up was going to ruin the entire day and how miserable she was. The saleslady brought out the paperwork and wouldn't you know, someone filled out the order form incorrectly.\"\n\n\"Chelsea filled out all the order forms,\" I said.\n\n\"Yeah, and signed them in three different places saying they were right. So then Isaac goes, 'well, it's our mistake, so we can see how this looks and order a new one if we need to.' And Chelsea turns to him and snaps that he has no idea what he's talking about, and is he really blaming her for screwing up, and 'oh, I can't believe you'd do that to me over this, we're supposed to be a team!'\"\n\nHis voice got preposterously high-pitched as he mocked Chelsea. I snorted back a laugh and Derek grinned.\n\n\"So Isaac's a little embarrassed, right, and of course I'm pissed but Ange is shaking her head at me in that way that's like 'shut the fuck up, Derek, you're only going to make this worse.' And I'm not gonna fight with her because I know she's scary when she's pissed, so I keep my mouth shut. Isaac starts trying to calm her down and Chelsea tells him he's being stupid, and then Ange pipes up and goes 'if something as trivial as this is going to ruin your wedding day, maybe you're getting married for the wrong reasons.'\"\n\n\"She didn't,\" I gasped.\n\n\"Oh, she did. And Chelsea's jaw just fucking dropped, Isaac probably would've loved if the floor just could've opened up and swallowed him, and Ange just patiently says 'You know, even though Derek and I are divorced, I can't imagine I'd ever speak to him in such a way. I have far too much respect for him to do that.'\" \n\n\"No way.\"\n\n\"Mm-hmm. Then the dressing room door opened and you walked out, Chelsea nearly knocked us all out with her mood swing, and when you went back with the seamstress she started sucking up to Angela and whimpering an apology to Isaac. He, of course, lapped up every word of it, but I'm pretty sure Ange is never going to look at her the same way again.\"\n\nI pressed my lips together, but it was no use. I snorted again, Derek chuckled, and half a second later we were both laughing breathlessly.\n\n\"Too bad I missed it,\" I finally choked. \"That might've made having to wear that stupid dress worth it.\"\n\n\"You're being far too critical,\" Derek said. \"Seriously. It's not even half as bad as you think it is.\"\n\n\"I have eyes, you know. There were mirrors in there. I looked like a train-wreck.\"\n\n\"You looked stunning,\" he replied firmly. \n\nI opened my mouth to respond, but nothing came out. His words floated through me, uncomfortably affirming, meaning far more to me than they should have. I glanced at Derek, doubting the honesty of his statement, but there wasn't even a trace of insincerity in his eyes. There was a trace of something that shouldn't have been there, something that I might have been imagining was longing or desire, and my heart fluttered. I swallowed hard and tore my eyes away, staring back down at the ground.\n\n\"Seriously, Joss,\" he said before I could think of a cynical comeback. \"You could go up there in a crumpled paper bag and you'd still look great. Don't worry so much.\"\n\n\"I guess there's no accounting for taste.\" I laughed weakly, hoping my face wasn't as red as it felt, and changed the subject. \"I can't believe Angela said that to Chelsea.\"\n\nDerek sighed. \"You know it's bad when Ange says something. She said the other day she wishes Chelsea would just call it off. How fucking sad is that? Watching your kid get married is supposed to be exciting, and you know, even if we didn't like her all that much, we'd still probably support him. It's just that it's more than that. She's... she's bad for him.\"\n\n\"I'm sorry.\"\n\nHe shook his head. \"No, I'm sorry. I shouldn't be saying shit like that to anyone. Would you do me a favour and not mention it? I'm already on thin ice with Isaac, and I don't want to... he's still my kid.\"\n\n\"What happened?\" I asked quietly. \"I mean, what really happened that made things so tense between you?\"\n\nHe thought for a moment, staring at the dumpster across from us.\n\n\"When Ange and I got divorced, he was pretty upset. He was convinced I'd had an affair for a while, actually. I mean, you know he loves his mom, so he couldn't... he didn't really understand why we'd split up. He wouldn't even talk to me for about six months after I moved out. He only stopped thinking that when it was clear I wasn't really seeing anyone, and Ange told him he was wrong. She was ready to lose her mind, but we agreed that we weren't going to drag the kids into things. We didn't want them picking sides or turning against either of us, so we limited what we told them.\" \n\nPausing, he tapped his fingers against the wall, then laughed.\n\n\"You know, you hear all those horror stories about marriages ending and shit, and that's not what ours was like at all. For something that sucks so much, we had the best possible outcome, and we were certain we'd get through it without screwing Isaac and Samantha up. Sam was fine, probably because she was a little younger and adapted to things more easily. Isaac... well, I'd rather he take his anger out on me than on his mom, so it is what it is.\"\n\n\"It is what it is.\" It sounded like Derek's version of \"family is family.\"\n\n\"It sounds hard,\" I said.\n\nHe shrugged. \"I don't know if we'll ever be close again, but I can hope.\" \n\nWhen we finally went back into the dress shop, the seamstress was just starting on the last of the alterations. Isaac was sitting on a puffy stool, elbow resting on his knee and chin in hand, and Angela was watching with her arms folded as Chelsea bossed the seamstress around.\n\n\"Are you all right?\" Mom whispered as I came back in.\n\nI nodded but didn't say anything. Isaac glanced up at me and tried to smile. Any other day, I might have felt a surge of guilty satisfaction at the hidden misery on his face, but really, it was just painful. Derek and Angela had maintained a friendship even after divorcing. Would it really be that hard for me to at least be cordial towards him?\n\nI took a breath and walked over to Isaac.\n\n\"How are you doing?\" I asked, settling on the stool next to his.\n\nHe looked surprised, probably because I was actively choosing to talk to him, but smiled and seemed to relax.\n\n\"Okay,\" he said. \"Sorry about the issues with your dress.\"\n\n\"It happens. How was your suit fitting?\"\n\nHe positively grinned. \"It was great, actually. Dad and I are getting custom ones made.\"\n\nWe chatted softly about various things relating to the wedding for the rest of the appointment, and it was only when Chelsea stomped over to us that I realized they were done. \n\n\"Are you done distracting my fiance?\" she muttered at me.\n\nIsaac stood up. \"We were just talking, baby.\"\n\n\"Well, Jocelyn was supposed to be paying attention to the fittings and making sure we covered everything, but I had to do that myself.\"\n\n\"I was?\" I asked. \"No one told me that.\" \n\nChelsea took a breath. \"It's fine. You know what, it's fine.\"\n\n\"Let's go home,\" Isaac said to her quietly. \"It's been a rough day, we can just\u2014\"\n\n\"Rough day?\" she repeated, staring at him with a disgusted look on her face. \"What are you trying to say, Isaac?\"\n\n\"Nothing, I just\u2014\"\n\n\"Why is everyone against me today?\" she whined. \n\n\"I just meant you seem stressed and I thought we could\u2014\"\n\n\"Stressed,\" she sniffed. \"You mean you think I'm a bitch.\"\n\n\"I would never say anything like that,\" Isaac protested. \"You know that, baby.\"\n\nShe grumbled but allowed him to take her hand and kiss her lightly, murmuring an apology. I stared, flabbergasted, wondering why Isaac was the one apologizing. \n\n\"I have to go pay the rest of the balance,\" she grumbled, shaking her hand away from him and turning on a heel to stomp towards the cash register.\n\nIsaac stared after her, sighing just the slightest bit.\n\n\"Is she always like that?\" I asked quietly.\n\n\"No,\" Isaac said. \n",
        "He didn't sound very convincing, but I let it slide, instead saying goodbye as the other bridesmaids began to leave. \n\n\"I'm heading out too,\" Derek said, striding up to Isaac. \"Thanks for including me in this, Isaac. I appreciate it.\"\n\nIsaac nodded and smiled. \"Yeah. Thanks, Dad. It was fun.\"\n\nHe didn't sound convinced about that either, but shook his dad's hand. \n\n\"It was good to see you again, Joss,\" Derek said. \n\n\"Jocelyn,\" Isaac said.\n\n\"What?\"\n\n\"Her name is Jocelyn,\" Isaac said.\n\nDerek flushed. \"Oh, sorry. I didn't know it\u2014\"\n\n\"It's fine,\" I said quickly. \"I don't mind. A lot of people call me Joss.\"\n\nIsaac glanced at me, almost looking hurt.\n\n\"You can, too,\" I said to him begrudgingly. \"I might've been a little pissed when I told you not to.\" \n\nAfter saying goodbye to Derek, Angela was next. She asked Isaac to come out to the car with her because she had some of the wedding decorations and needed to move them over. With their departure, only Chelsea, Mom, and I were left in the dress shop. \n\n\"Listen, Jocelyn,\" Chelsea said as she came up to us after paying. \"I don't know what you're planning, but stay away from my fiance.\"\n\n\"What?\" I asked, shocked.\n\n\"I saw you sitting with him. He left you, understand? He will not be crawling back to you. We are getting married, and if you so much as look at him in a way that makes me think you're going to try something\u2014\"\n\n\"Stop being so paranoid. I'm not trying to steal back my ex-boyfriend that you're marrying, okay? We were just talking.\"\n\n\"That better have been it,\" she said. \n\n\"Girls!\" Mom gasped. \"Chelsea, your sister is allowed to talk to Isaac. I believe they spent most of the time talking about the details of your wedding to him.\"\n\nChelsea wasn't stupid. She knew when even Mom was calling her out on her behaviour, she had pushed too far. \n\n\"Sorry,\" she muttered.\n\n\"It's fine. Sorry I didn't help more with the fitting,\" I replied just as reluctantly.\n\n\"That's better,\" Mom said.\n\nChelsea nodded stiffly, still looking at me suspiciously as we left the dress shop. In the parking lot, she snapped at Isaac again, got into the passenger seat of his car, and folded her arms across her chest in a pout. The dejected look on Isaac's face as he pulled out of the parking lot was almost haunting.\n\nIt was so burnt into my mind that when Mom dropped me off at home, I couldn't stop thinking about it. I didn't know if Chelsea thought she loved him and was having a bad day or was just faking her love for him, but one thing was clear: if even I thought Isaac deserved better after he left me for her, standing by and letting him marry her was practically immoral.\n\nIt probably didn't help that Chelsea was accusing me of doing to her what she did to me, was putting me in the ugliest dress in the universe, and was treating me horribly. It definitely didn't help that I couldn't just drop out of the wedding, knowing my dad would lose his mind and my mom would probably never speak to me again.\n\nThough, I did consider it. I loved my mom, but why did she think it was okay for me to put up with this? She turned a blind eye to all the problems between me and my sister, as if she just wished hard enough for us to stop being a dysfunctional family, it would become true. Maybe I should just take the plunge, finally stand up for myself, and be firm when I said I wouldn't be in the wedding party anymore. Maybe Mom would eventually forgive me. Maybe I'd be better off alone, anyway. \n\nAt the end of it all, I couldn't bring myself to do it. People make it seem so easy to just walk away from a toxic situation, but it wasn't easy at all. It was even harder because they were my family, and I loved them. Even Chelsea, as horrible as she was.\n\nLeaving my family wasn't an option, but that didn't mean the wedding had to happen. \n\nOne of my tasks as maid of honour had been collecting everyone's contact information for various purposes. Invitations, coordinating events, general bridal party chats... communication was really key. Because of that, I didn't have to look very hard for his number, though when he picked up, he still seemed surprised to hear from me.\n\n\"Jocelyn?\"\n\n\"I'm in.\"\n\n\"What?\"\n\n\"I'll help you get her to leave him, Mateo. What's the plan?\"\n\n<center>**\n\nNOW\n\n**</center>\n\nThe rain stopped mid-morning, just after Derek brought me to my apartment. I scrambled upstairs to change, then back down to his car so that if anyone saw him drop me off, it wouldn't seem quite as suspicious as it would if I was still in my maid of honour dress. When we got to the hotel, he pulled to the side of the building and parked.\n\n\"Joss, I\u2014\"\n\n\"I know, it was a terrible idea, we can't do this again, my lips are sealed.\" \n\n\"I was going to say I had a great time,\" he said gently.\n\n\"Me too.\"\n\n\"And then I was going to say that other stuff.\"\n\nI snorted, smiling in spite of myself.\n\n\"Goodbye, Derek.\"\n\nI got out of the car before he could say anything else. I had to. The longer I sat there, the harder it would be to tear myself away. Limping only slightly, I made my way around the car to the side door of the hotel.\n\nI wasn't quite strong enough not to look back. When I did, he was watching me. He lifted his fingers off the steering wheel in a half-wave, a small smile on his face, and I waved back before going into the building.\n\nBy the end of the day, I was wondering if I should have just said fuck it to what other people thought and stayed with Derek. Waking up in his arms was the happiest I had been in years. At what cost, though? My train-wreck of a family would react in one of two ways: either surprised but begrudging acceptance, like they did with Chelsea and Isaac, or complete and total disgust that got me cut off for good. Some might argue that would be for the best, but the thought of being practically disowned terrified me.\n\nDerek stood to lose a lot more than I would. His relationship with Isaac was rocky at best, and I knew Isaac would have a problem with it. If I had been anyone else, it might have been okay, but I was Isaac's ex, and it wasn't like he needed much of a reason to be angry with his dad. That much was clear. Angela would probably be less angry and more confused, but she'd probably lose a lot of respect for both of us. And Samantha? Who knew, though she might have a problem with the fact that I was barely older than she was.\n\nStill, even if Samantha was cool with it and for some reason Angela accepted what we had done, ruining Derek's relationship with his son was far too costly a price. \n\nIt wasn't an easy day. When I finally got back home, Mom called almost immediately, telling me they had spent most of the day clearing Chelsea's things out of her and Isaac's apartment and bringing it back to their house, before begging me to come over for dinner.\n\n\"We need to get all the bad feelings out in the open and start to heal as a family,\" she said.\n\n\"Maybe we should wait a little bit,\" I said. \"I'm a little on edge, what with the whole 'my-boyfriend-cheated-on-me-again' thing, Chelsea's marriage just ended and it's... oh, look at that, it would've been her 28-hour anniversary just now. Dad's probably\u2014\"\n\n\"He will be apologizing for how he spoke to you yesterday,\" she cut in. \n\n\"Sure, Mom. I thought I felt a chill this morning when Hell froze over.\"\n\n\"He will,\" she repeated. \"Joss, please.\"\n\n\"How many times am I supposed to forgive this?\" I asked.\n\n\"She's your sis\u2014\"\n\n\"If Aunt Sharon slept with Dad, would you forgive her?\"\n\n\"Yes.\"\n\nI rolled my eyes. \"You can't be serious.\"\n\n\"I would,\" she said. \"At the end of the day, she's my sister, and family is\u2014\"\n\n\"I swear to God, I'm so sick of hearing you say that.\"\n\n\"Why are you being like this?\"\n\n\"Sane, you mean? Why am I acting in a perfectly reasonable way given the circumstances?\" \n\nShe didn't respond and I cringed as I heard the tell-tale sound of her plucking Kleenex from the tissue box.\n\n\"Don't cry, Mom,\" I pleaded.\n\n\"My family is falling apart and I can't do anything about it,\" she whimpered.\n\n\"Mom,\" I sighed. \"Look at it from my point of view. Just for once, please. Can I at least have a couple of days to settle down? She slept with my boyfriend at her wedding to my ex-boyfriend.\"\n\n\"She feels horrible,\" Mom said.\n\n\"I'm supposed to believe that?\"\n\n\"You need to be the bigger person,\" she said. \"Chelsea's not capable of it, but you are. Sweetie, please. For me?\"\n\nWhat little fire was left in me fizzled out. \"What time?\"\n\nDinner was tense. Chelsea mumbled a false apology, I mumbled a fake acceptance of said apology, Dad's apology started with \"I'm sorry you were offended, but...,\" and then we sat awkwardly around the dinner table not speaking.\n\n\"Where did the decorations end up?\" Chelsea finally asked after Mom cleared the plates off the table. \"I went back to the church but everything was gone.\"\n\n\"Derek and Angela took most of it last night,\" I said.\n\nShe sighed unhappily. \"Great. You couldn't have gotten anyone to take it other than his parents?\"\n\n\"I could've just left all that shit there,\" I said.\n\n\"Language,\" Dad muttered coldly.\n\n\"That was all my stuff,\" Chelsea said miserably. \"Isaac will probably just throw it out.\"\n\n\"What are you going to do with a bunch of storage totes full of wedding decorations?\" I asked.\n\n\"You wouldn't understand,\" she hissed.\n\n\"Well, Jocelyn can go collect it for you,\" Dad said.\n\n\"What?\"\n\nHe raised his eyebrows at me. \"You insisted on cleaning up, you sent the items home with the Thompsons, you can arrange getting it back from them.\"\n\n\"I don't remember volunteering to be a go-between,\" I said.\n\n\"I don't remember when it became okay to slap your sister and call her a whore.\"\n\n\"Oh, I remember when that happened, it became okay around the time I caught my boyfriend with his\u2014\"\n\n\"Enough!\" Mom said. We all fell silent, startled by the intensity of her voice. \"Jocelyn, please speak with the Thompsons about getting the decorations back. Chelsea, have some grace, you are not the only one who had a difficult day yesterday. Gerald, for the love of God, you need to treat both of your daughters kindly right now.\" \n\nI put off calling Angela until the following Friday around lunch, when Mom finally got frustrated enough to threaten to come down to the shop and watch me call her. When I asked why she didn't just call Angela herself, she burst into tears and fifteen minutes later, I was calling the ex-wife of a man I'd slept with less than a week earlier.\n\n\"Hello?\"\n\n\"Hi, Angela. It's Jocelyn. Jocelyn Miller.\"\n\n\"Oh! What a... surprise,\" Angela said. \"Not that I'm not happy to hear from you, dear. Let me just, um, run upstairs.\"\n\nI grimaced. \"Isaac's there, isn't he?\"\n\n\"That is true, yes. Just a moment.\" There were a few moments of the phone jostling and then the sound of a door closing. \"I'm so sorry, dear. He was off work for the... well, anyway, now he's staying here for a bit. He's... he's having a hard time.\"\n\n\"I understand. I'm sorry to bother you, it's just...\" I took a breath, steeling myself. \"I know this is probably going to sound completely tactless and ridiculous, but Chelsea wants the decorations back and my mom said I had to call you to ask for them.\"\n\n\"Of course she does,\" Angela said impassively. \"Well, she can have them. I have no use for them and Isaac is steadfastly trying to get rid of anything that reminds him of Chelsea, which means he's down to approximately two T-shirts and a few polos since apparently she bought the rest of his clothes, so he gave them all away.\"\n\nGuilt rushed through me, so strong I felt my shoulders hunch forward. \"Did he actually?\"\n\n\"He'll be okay,\" Angela said. \"You know, at the end of the day there's silver linings, and I suppose the silver lining here is that he's been reaching out to Derek quite a bit. I don't know how much you know about their, ah, situation, but Isaac never quite understood why we got divorced and now I think he's finally started to figure it out.\"\n\nDerek. Of course. I winced again, almost nauseous, though that might have been less guilt and more really, really missing Derek.\n\n\"That's so good to hear,\" I said. \"I hope they, you know, figure things out.\"\n\n\"Oh God, I hope so,\" Angela sighed. \"It would be the best possible thing to come from this. If they can fix... well.\"\n\nThere was a slight thickness to her voice. If any more guilt rolled through me, I was going to get an ulcer.\n\n\"So, um, what's the best way to do this?\" I asked. \"I'm sure you don't want Chelsea to come by herself, and I doubt... I mean, it'll probably upset Isaac to see me, too, so...\"\n\n\"Not as much as you'd think,\" she said. \"I think he's genuinely sorry about everything. He feels bad he didn't listen to you.\"\n\nUlcers. I was definitely going to get an ulcer.\n\n\"So, um...\"\n\n\"Right,\" she said. \"Sorry, dear. You know, why don't you give Derek a call? He could come pick the totes we have here up and bring them to his house for you to pick up, or he could probably... well, actually, he probably wouldn't want to go to your parents'. He's, um, not a fan of your father, apparently.\"\n\nI laughed weakly. \"Yeah, they, um, got into it last weekend. I'll... you know, would it be too much trouble for you to give Derek my number? I just feel, um, bad calling out of nowhere, I guess.\" \n\n\"Oh, you don't have to worry about that at all. I'm sure he'll be happy to hear from you,\" she said. \"But of course, I'll give him a call and let him know, dear.\"\n\nI hung up and tried to force myself to eat part of the sandwich I'd brought for lunch. When my phone rang a few minutes before I had to go back to work, I'd barely picked at a quarter of it. The moment his number appeared on the screen, I sighed, dumped the rest of my lunch in the garbage, and slipped out the back door to take the call away from prying ears.\n\n\"Hi,\" I said.\n\n\"Hey, Joss,\" Derek said. \"How's your leg?\"\n\nI laughed a bit. \"Fine, thanks. Pretty much healed.\"\n\n\"Good, glad to hear it.\" He hesitated for a moment, the tension overwhelming. \"Uh, so\u2014\"\n\n\"I know,\" I said. \"Sorry. My mom\u2014\"\n\n\"Ange explained, it's fine. Don't be afraid to call me though, okay? Even after... you know. I don't want you to feel... uncomfortable, I guess.\"\n\n\"I wasn't worried about feeling uncomfortable, exactly,\" I admitted.\n\n\"Oh.\" He cleared his throat. \"Fair point.\"\n\n\"I'm sorry,\" I said. \"I shouldn't have\u2014\"\n\n\"You should have. Don't hide things, okay? Better to have the cards on the table.\"\n\nMy face was turning red. \"Right.\"\n\n\"You're blushing, aren't you?\"\n\nI snorted. \"Wouldn't you like to know?\"\n\n\"I mean\u2014\"\n\n\"Don't answer that, actually,\" I interrupted. \"Let's just... let's figure this stupid decoration shit out.\"\n\n\"Good plan,\" he said. \"So, you need the totes.\"\n\nI thought of suggesting he leave the storage totes on his driveway and I would just make a few trips to pick them up, but as much as one part of me wanted to avoid Derek, another part of me was thrilled at the prospect of seeing him. He didn't suggest it, either. Instead, he said he would stop by Angela's on his way home and grab the other totes, and I said I would stop by that night and start bringing the decorations to my parents' place. \n\nNothing was going to happen with him, I told myself as I left work later that day. I was so certain that nothing was going to happen that I didn't even go home to shower or change before heading to Derek's. Going out of my way to go home and clean up would have been forethought, an intentional decision to make things more complicated.\n\nWhen I pulled into Derek's driveway, the garage door was open. Derek was puttering around one of his motorcycles and looked up as I turned my car off. He looked good. Unreasonably good. The tattoo on his bicep poked out beneath the sleeve of his T-shirt and I wanted to reach out and run my fingers along the one on his neck. His jeans fit just right, and knowing what was beneath them made it all the more difficult not to blush.\n\n\"Hey,\" he said as I got out of the car.\n\n\"Hey.\" I tried to smile at him. \"So, the totes.\"\n\n\"Straight to business, eh?\" Derek said, chuckling. \"Fair enough.\"\n\n\"What else am I supposed to do?\" I asked softly.\n\n\"What I want you to do and what you should do are very different things,\" he said. \"So what you should do is exactly what you did.\"\n\nOh good. I wasn't the only one struggling horribly with the entire situation. I swallowed, not saying anything, not even able to look at him.\n\nHe cleared his throat. \"So. The totes.\"\n\nTogether we loaded my car up, squeezing in as much as we possibly could. It seemed likely I could get everything done in three trips, and I said as much to Derek as I closed the trunk.\n\n\"So you're going to do all three trips tonight?\" he asked.\n\n\"Is that okay?\"\n\n\"Probably better that way.\"\n\nI nodded. \"I'll be back in about an hour, then.\" \n\nI drove to my parents, unloaded, then headed back. We reloaded the car, I drove to my parents, and unloaded. On a whim, just before heading back, I texted Derek.\n\nI'm starving. Going to stop for a burger. You want anything?\n\nWhen I got to the nearest fast food place, I checked my phone.\n\nHell yes. Thanks.\n\nHis order followed and I stopped in the drive-thru, picked up a couple of meals, and headed back to Derek's.\n\n\"You're a lifesaver,\" he said when I got out of the car holding the large brown bag. \"I was just thinking I hadn't figured out what I was going to do tonight.\"\n\n\"I didn't eat much at lunch,\" I admitted. \"I wasn't going to make it until I got home.\"\n\n\"Come in and eat,\" he said, motioning at the house.\n\n\"Is that a good idea?\"\n\n\"No, but do you really want to stand in the driveway and eat?\"\n\nI didn't, of course, so followed him inside.\n\nOur conversation was casual while we ate. We avoided all the heavy topics: the wedding, Isaac, spending the night together the previous weekend. We just talked about work and the new motorcycle Derek was planning on buying, little things that should have kept things friendly but distant. \n\nIt just seemed that no matter what Derek and I did, it was the wrong decision.\n\nInstead of keeping things distant, it just meant we ignored all those reasons we were supposed to stay away from each other. We started making jokes, and then laughing, and by the end of the meal I was trying to throw french fries into Derek's mouth from across the table.\n\n\"Yes!\" I exclaimed as one finally went into his mouth, rather than bouncing off his cheek and onto the floor.\n\n\"I don't think one-in-six is that good of a track record,\" he teased, chewing the fry.\n\n\"Oh yeah? You think you can do better?\" \n\n\"I know I can do better,\" he shot back.\n\n\"Prove it.\"\n\nWhen he got the fry in my mouth on the first try, I groaned as he clapped his hands together.\n\n\"I win,\" he teased.\n\nI laughed, chewing the fry. \"It wasn't a competition!\"\n\n\"Oh, it was,\" he replied.\n\n\"So what do you win?\" I asked.\n\nIt was the wrong thing to ask. The words were almost visible, hanging off the tension in the air between us. Derek's face was somewhere between nervous and reckless, eyes boring into mine from across the table.\n\n\"I shouldn't have... this was a bad idea,\" I whispered.\n\n\"Terrible idea,\" he agreed. \"But, uh... cards on the table? I've been thinking about you all week.\"\n\nI pressed my lips together, willing myself to be strong, begging my heart to stop racing and my legs to stop tingling and my body to stop urging me to just drop the charade and kiss him.\n\n\"I have, too.\"\n\nDerek sighed, brushing a hand against the scruff on his chin.\n\n\"I should go,\" I said after a moment. \"I think that's probably for the best, right?\"\n\nHe nodded. I stood up, collected the wrappers from my meal, put them in the empty takeout bag, and brought them to the garbage can under the sink. From behind me, I heard Derek stand up. The moment I turned around, he reached for me and I reached for him.",
        "He kissed me hard, passion and longing entwined as we gave in yet again. His hands moved to my thighs and lifted me up on the counter in the faintest echo of our first kiss. It was different, of course; instead of a tentative, shaking hand touching his neck, I clutched him to me. Instead of standing in front of me, shocked but responsive, he pulled my body close to his and ran his hands along my hips.\n\n\"Just one more time,\" he murmured between kisses.\n\n\"Don't be stupid,\" I whispered, kissing him back. \"It's never going to be just one more time.\"\n\nHe growled, his teeth tugging at my bottom lip. \"You don't have to be so right, you know.\" \n\nI chuckled against his mouth. Derek smiled, still kissing me, still touching me, but the urgency faded away until he rested his forehead against mine. His breath brushed against my lips.\n\n\"Isaac's been calling me regularly,\" he whispered. \"Asking for advice, support, that kind of thing. He's pretty torn up.\"\n\nI didn't respond, just let him run his fingers along my thigh as he thought.\n\n\"I've heard from my son more this week than I have any other week since Ange and I divorced,\" he continued. \"That should make saying no to this worth it.\"\n\n\"It should,\" I agreed.\n\n\"So why doesn't it?\" He pulled his face away from mine and looked at me, almost pleading. \"Why can't I stop thinking about you, Joss?\"\n\nI shrugged helplessly.\n\n\"Isaac would never understand. I mean, shit, he thinks every woman I've been with since Ange has just been me trying to replace his mom. Add the fact that you're his ex-girlfriend... He'd be livid if he found out.\"\n\nHe had a point, but it was clear that it was going to be much harder for me and Derek to stay away from each other than we thought. I chewed the inside of my cheek thoughtfully. \n\n\"What if he... didn't?\"\n\n\"No, he would be completely disgusted,\" Derek scoffed.\n\n\"Not that. I mean, what if he didn't find out?\" \n\n\"What?\"\n\nI shifted nervously, staring at Derek's chin rather than into his eyes.\n\n\"What if we just... you know, kept quiet about everything, but also... hung out every once in a while?\"\n\n\"You want to sneak around behind everyone's backs and fuck, you mean.\"\n\nMy cheeks went red so fast I almost felt dizzy.\n\n\"Joss?\"\n\n\"Yes,\" I whispered. \"Yeah, I guess... yeah.\"\n\nI had no idea what Derek was thinking. I couldn't bring myself to look at him, to see what I imagined was a look of disgusted indignation. He had to be judging me, I thought. He had to, because even knowing the risks, even knowing how badly it could hurt his son, I was still proposing that we... well, sneak around and fuck.\n\nSlowly, his hand moved up to my chin, nudging my face back to his. I closed my eyes, still unwilling to look at him, so I was a bit startled when his lips pressed against mine again. I kissed him back eagerly, urgently, letting him pull me close to him again.\n\n\"Is that a yes, then?\" I murmured against his mouth.\n\n\"I've tried saying no to you,\" he mumbled back. \"It's not working out so well.\" \n\nI never made it back to my parents' with the third load of decorations that night. When Mom asked about it the next day, I told her it had started raining and I was tired and hungry anyway, so I went home instead of driving all the way back to her place. In reality, I let Derek strip my coveralls off in the kitchen and laughed as he ran his fingers along the lacy blue underwear I was wearing that day. I took his hand and led him to his bathroom, where he put those fingers to use in the shower by washing every inch of me thoroughly. \n\nOnce he had, I returned the favour, though not quite as extensively as he had. I got distracted partway through and dropped to my knees in front of him, taking his cock into my mouth as the spray of hot water beat down on us. His groan echoed in the shower, a sound that shook through my body, and I glanced up in time to see him put one hand on the back of my head and brace himself against the shower wall with the other.\n\nHe finished in my mouth, panting as I swallowed every drop of come, and tugged me to my feet so he could kiss me before practically dragging me to his bedroom. There, he returned the favour, pushing me on my hands and knees, licking my pussy from behind until I was shrieking and shaking as I gripped the sheets.\n\nI didn't realize he was hard again until he moved behind me, the tip of his cock breaching my entrance as he slid himself inside my pussy. He gripped my hips, pounding me hard, and I slipped a hand beneath me to finger my clit as he did. When I came on his cock, he staggered, leaning forward so he could kiss the back of my neck and shoulders. Pulses of pleasure tingled through my body, little aftershocks and shudders each time he thrust into me.\n\nHe embraced me as he came again, an arm wrapped around my body and his hand cupping my breast when he finished. For a long, perfect moment, the feel of his breath against my back and his body against mine was all that mattered. He pressed his lips against me again before pulling out and moving to the side, wrapping his arms around me as I curled up against his chest.\n\n\"So how often am I allowed to sneak you over here?\" he mumbled.\n\n\"How often do you want me?\"\n\n\"Every day, if I could.\"\n\nI chuckled, but Derek didn't. \"For real?\"\n\nI felt him nod. \"In a perfect world, yeah. In the real one, I imagine locking you in my basement and keeping you all to myself would be frowned upon.\"\n\n\"Just a little,\" I snorted.\n\nHis fingers trailed enticingly along my arm. \"In a perfect world, how often would you want me?\"\n\n\"Every day.\"\n\n\"Are you saying that because you think that's what I want to hear?\"\n\n\"Of course not,\" I said.\n\nHe chuckled. \"Every day, eh?\"\n\n\"Every day,\" I repeated. \"Think you could keep up?\"\n\nI had to pull my head away from his chest for fear of getting whiplash, he was laughing so hard. Bemused, I watched as he eventually wiped a hand under his eye.\n\n\"I could keep up, yeah,\" he finally said. \"Don't worry about that.\"\n\n\"What's so funny?\"\n\nHe kissed me softly. \"Nothing.\"\n\n\"Are you saying that because you think it's what I want to hear?\"\n\n\"Smartass,\" he muttered. \"You really want to know?\"\n\nI nodded and he tightened his arms around me.\n\n\"I have a pretty high sex drive,\" he said frankly. \"Every day would be a dream come true. Realistically, though, I think that kind of frequency would make the whole 'sneaking' thing a bit difficult.\" \n\n\"Why don't we just see what happens?\"\n\nI felt him nod before he kissed the top of my head. We spent the rest of the night in his bed, listening to the rain while we talked and laughed, until I fell asleep in his arms and slept more soundly than I had since the last time I had been there.\n\n<center>**\n\nTHEN\n\n**</center>\n\n\"Pizza? Are you actually for real?\"\n\nIsaac shifted uncomfortably, trying to smile. \"We just thought it was, you know, more casual. It's just a chill kind of get together.\"\n\nChelsea glowered at him. \"Thanks for thinking of me. I'll be sure to enjoy the single slice of this I can have.\"\n\n\"Baby, you can have more than one slice.\"\n\n\"Some of us have a wedding dress to fit into, Isaac!\"\n\n\"Hey now, it's no problem,\" I cut in. \"I'll eat her share. It won't go to waste.\"\n\nIsaac grimaced, but before he could say anything, Chelsea scoffed loudly.\n\n\"You have a dress to fit into, too,\" she said through gritted teeth.\n\nI took a large bite, chewing loudly. \n\n\"Don't worry. My dress has way more wiggle room than yours does since the top is so baggy,\" I said through a mouthful of pizza.\n\nI thought she would glower at me or maybe tell me to stop being such a bitch. Instead, she smiled sweetly and patted my arm.\n\n\"I admire you so much for that, you know. Not worrying too much about what you look like. It's super brave. I'm sure you'll find some guy who doesn't mind either... one day.\" \n\nRolling my eyes, I slid another slice of pizza on my plate and made my way across the room. For Chelsea, that was a pretty weak insult. I'd long since gotten over the biting remarks she made about my appearance. \n\nMateo was hosting a \"get to know you\" shindig for the wedding party. Well, that's what he said it was, at least. Only I knew that it was actually another attempt at getting Isaac and Chelsea to break up, this time by trying to make her reveal that she was cheating on Isaac with her boss.\n\nIt was an asinine plan at best, but Mateo was getting desperate. He had enlisted the help of practically every sleazy douchebag he knew to try to catch Chelsea's eye. Not a single one of them managed to hold her attention for longer than it took to sneer and reject him. He tried to make the little things Isaac did that clearly annoyed her a bigger deal, thinking maybe she would give up on the relationship. Isaac, unfortunately, was wrapped so tightly around her finger that he would move heaven and earth to change each time she snapped at him.\n\n\"It's like he's not even the same person anymore,\" Mateo grumbled to me one night.\n\n\"What about trying to get evidence of her cheating on him?\" I asked. \"Can't we, I dunno, catch them in the act?\"\n\nIf she was cheating, though, she was careful about it. Even dropping in unexpectedly at her workplace didn't give us any leads, and trying to dig up dirt about the boss she was supposedly sleeping with was useless.\n\nMy contributions to the break-up plan were minor. The only person I thought Chelsea might listen to was our dad, but he was wrapped around her finger even more than Isaac was. Still, I started going to dinner at my parents' more regularly, and made little comments about Isaac not being good enough for Chelsea where I could. At best, Dad brushed them off. At worst, he just ignored me.\n\nI think Mateo was disappointed by my inability to provide more help. He seemed to be under the impression that I knew my sister far better than I actually did. That, and he seemed to think I was willing to go much further than I really was in order to break them up.\n\n\"No way,\" I said when he suggested trying to catfish her.\n\n\"It's easy!\" Mateo insisted. \"We just create a profile on social media of some super-hot guy and\u2014\"\n\n\"She's a shitty person, Mateo, but she's not stupid,\" I said. \"First of all, she'll see right through that. Second, if none of your hot friends have managed to seduce her in person, how is a Facebook profile going to manage it?\"\n\nI flat-out refused to plant evidence of an affair for Isaac to discover. \n\n\"What's going to happen when he discovers it was faked? Or if they catch you or me doing it?\"\n\n\"They won't!\" he said, exasperated. \"You just need to\u2014\"\n\n\"I'm not faking it. Breaking them up through deceit makes us no better than Chelsea.\"\n\n\"Oh my God, what's worse, letting Isaac ruin his life or planting a little evidence?\" he asked, but I stayed firm.\n\nAs it stood, over a month had gone by and we were no closer to breaking them up than we had been when Mateo first approached me. It was starting to look hopeless.\n\nI settled onto the couch across the living room from Chelsea and Isaac, munching on the extra slice of pizza I'd taken. I didn't really want it, but I also didn't want Chelsea to have the satisfaction to think I was eating less because of what she said. \n\nAs usual, I was sitting alone. Chelsea's bridesmaids were her real friends; Isaac's groomsmen were all friends I had met while Isaac and I were dating, but who now found my presence as awkward as I did. Mateo was kind enough to me, but he had other things to worry about than keeping me entertained.\n\nOne of those things was trying to get Chelsea to slip up and admit she was sleeping with her boss.\n\nThere was no better way to describe it than cringe-worthy. Mateo's questions were so leading and so obvious that Isaac should have easily figured out what was going on, but Mateo had been right. Isaac was a really different person, and that person was so focused on his bride-to-be that he missed the glaring hints Mateo was dropping.\n\nChelsea, on the other hand, wasn't fooled. I had told Mateo she wasn't stupid, but he underestimated her at every turn. \n\n\"Well, of course I'm close with my boss,\" she said benignly. \"Dr. Karigan is a wonderful dentist and, well, I would consider him a friend. His wife is a lovely person as well.\"\n\n\"Oh, I didn't know he was married,\" Mateo said lightly. \"Do they seem to have a happy marriage?\"\n\n\"What an odd question to ask,\" Chelsea said pleasantly. \"But yes, I believe he is madly in love with his wife. He's a very lucky man. She's so pretty and a very good mother, from what I hear.\" \n\n\"So he has kids, too. Wow,\" Mateo said.\n\n\"He sure does.\" Chelsea smiled at Mateo, though even from across the room I could see the iciness in her eyes. \"You know, I really am the luckiest person ever. I have a very kind and understanding boss, a wonderful family, including my sweet sister over there, and the love of my life right here with me.\"\n\nSuppressing a gag caused by a mix of Chelsea's disgusting faux-sincerity and Mateo's horrible act that wasn't fooling anyone, I coughed. He glanced across the room at me, giving me a pleading look. Pleading for what, I didn't know. It was his own stupid plan and I had no idea what he expected me to do about it.\n\nInstead, I patted my mouth with a napkin and stood up.\n\n\"Mateo, where's your bathroom?\" I asked.\n\nHe looked exasperated. \"Upstairs, second door on the left.\" \n\nSmiling as pleasantly as I could, I brought my empty plate to the kitchen before heading up the stairs. I took my time in the bathroom, playing on my cell phone until I was fairly sure if I spent any longer in there, they were going to start wondering if I was sick. I flushed the toilet and was in the middle of washing my hands when the bathroom door swung open and crashed into me.\n\nI yelped and the person responsible for hitting me with the door gasped.\n\n\"I'm so sorry! Are you okay?\" \n\n\"Well, I just got my ass kicked by a door,\" I groaned, rubbing the spot on my arm that had taken the brunt of the force.\n\n\"Shit, I'm so sorry.\" \n\nI looked at him. He wasn't one of the groomsmen, I knew that much. Curly hair, a slightly turned up nose, and a boyish smile looked back at me.\n\n\"Do you make a habit of just barging into bathrooms?\" I asked.\n\n\"Well, it's my bathroom,\" he said stubbornly.\n\n\"Oh. You're...?\"\n\n\"Lawrence.\" He grinned and stuck out his hand. \"Mateo's annoying roommate.\"\n\nI chuckled and wiped my wet hands on the towel next to the sink before shaking his hand. \"Jocelyn. Reluctant maid of honour.\"\n\n\"Oh. Having a hard time with Bridezilla down there?\"\n\n\"That's my sister.\"\n\nThe muscles in his neck tensed as he grimaced. \"Oops. Sorry.\"\n\n\"Don't be. She's a terror.\"\n\nHe burst out laughing and shook his head. \"Mateo kept insisting I could come down and have pizza with you guys but I was like, dude, have you seen that girl? She's fucking nuts. No offense.\"\n\n\"Too bad. I could've used a source of entertainment.\"\n\nHe grinned. \"Well, if you're inviting me...\"\n\n\"Sure, why not?\"\n\n\"Well, I was about to take a piss, so...\"\n\n\"Oh, right.\" I laughed and moved out of the bathroom. \"Come hang out if you want. There's still lots of pizza. The bride and her bridesmaids are all on diets.\"\n\n\"Aren't you too, then?\"\n\n\"Nah. I'm the maid of honour, and I like pizza better than I like my sister.\"\n\nHe snickered and I slipped past him out of the bathroom, shuffling close to his body as I stepped through the door. \n\n\"There you are,\" Chelsea said as I descended the stairs and stepped back into the living room. \"I was starting to wonder what happened. Did the pizza not agree with your stomach?\"\n\n\"Nah, I was just on a really hard level of Candy Crush and ran out of lives,\" I replied, settling back into my lonely spot on the couch.\n\nA few minutes later, Lawrence bounded down the stairs. \n\n\"Hey!\" Mateo said brightly. \"You changed your mind.\"\n\n\"Yeah, some pretty girl invited me down for pizza. Sold it a little better than you did,\" he said.\n\n\"Pretty girl?\" Chelsea repeated, frowning.\n\nLawrence grinned and gestured at me. \"Yeah, that cutie over there.\"\n\nMy annoyance at being referred to as \"cutie\" was quelled by the look of shock on Chelsea's face. I suppressed a laugh as well, and managed to smile as though I'd found the comment sweet instead of slightly demeaning. \n\nAfter all, Lawrence didn't know I didn't like being referred to as \"cutie.\" I wasn't cute. I was short. There was a difference.\n\n\"Well, if you've met Jocelyn already, I think you know everyone here,\" Mateo said. \"But just in case, everyone remembers my roommate Lawrence?\"\n\n\"Sure do,\" Isaac grinned. \n\nLawrence helped himself to a few slices of pizza, grabbed a beer, and strode across the living room to sit next to me.\n\n\"So, Jocelyn,\" he said. \"What do you do for a living?\"\n\nHe took a huge bite of pizza and nodded excitedly when I said I was a mechanic.\n\n\"No shit!\" he mumbled through a full mouth. \"That's super cool.\"\n\n\"You think so?\" I said, surprised. \"Most guys think it's weird.\"\n\nLawrence shook his head. \"Nah. 'We can do it' and 'girl power' and all that shit, right? Girls can be mechanics, I've got no problem with that.\"\n\nI raised my eyebrows. \"That so?\"\n\n\"Yeah, of course.\" He grinned at me before taking another bite of pizza. \"And you should get paid the same as anyone who does the same job, too.\"\n\nI couldn't help but laugh. He'd thrown me off with the 'cutie' comment, but it seemed like he was a pretty open-minded person. He just needed a little bit of guidance, the polishing of a rough edge here or there.\n\nWe chatted amicably the rest of the night. We had some common interests, mostly sports. Lawrence had played lacrosse growing up, as had I, and we both followed hockey almost religiously during the season. I wouldn't say we hit it off completely: he was nice enough, and we had fun, but there was no real spark there. Still, he made the night tolerable, and when I glanced across the room and caught sight of the annoyed look on Chelsea's face, almost enjoyable. In fact, we got into such a deep discussion about the upcoming NHL draft that I didn't realize everyone was leaving for the night.\n\n\"Goodbye, Jocelyn,\" Chelsea said loudly from the door.\n\n\"Oh. Bye!\" I said, waving from the couch. \n\n\"It was good to see you again, Lawrence,\" she said sweetly.\n\n\"Yeah man, good to see you!\" Isaac said.\n\nThey left and I stretched. \"Well, I guess I should get out of you and Mateo's hair.\"\n\n\"Are you kidding? No fucking way!\" Mateo exclaimed. \"Jocelyn, you're brilliant!\"\n\nI froze mid-stretch. \"Uh... what?\"\n\n\"Did you not see the way Chelsea was looking at you the second Lawrence started talking to you?\" he said excitedly.\n\n\"What the hell are you talking about?\" I asked, bewildered.\n\n\"Oh my God, you didn't even see it,\" he groaned. \"Joss, she was boiling mad. Like snipping at Isaac about every little thing and couldn't keep her eyes off you two laughing over in the corner.\"\n\nI put the pieces together. \"No. No way.\"\n\n\"You said to me she must be bored because you haven't dated anyone since you and Isaac broke up,\" Mateo said, wagging a finger at me. \"She would try it again, wouldn't she? If you were dating someone, she'd\u2014\"\n\n\"I'm not dating Lawrence on the off-chance my sister might try to fuck him!\" I blurted.\n\n\"Wait, what?!\" Lawrence looked from me to Mateo, completely baffled. \"You're... what are you trying to do here?\"\n\nMateo sighed. \"Jocelyn said she'd help me break Chelsea and Isaac up because Isaac's making a huge mistake, only we've completely failed so far, but if you were dating her, she would\u2014\"\n\n\"She wouldn't,\" I said. \"There's no way.\"\n\n\"I can almost guarantee she would,\" Mateo argued.\n\n\"And then what?\" I asked. \"She does it to me again and that hopefully breaks them up?\"\n\n\"Is no one going to ask if I'm into this?\" Lawrence asked loudly. \"Because like, yeah, she's hot, but also, she's a total bitch.\" ",
        "Mateo turned to him, eyes flashing. \"You owe me.\"\n\nLawrence groaned. \"This is what you're cashing it in on?\"\n\n\"Cashing what for what?\" I said. \"I didn't agree to this!\"\n\n\"Lawrence owes me a favour for\u2014\"\n\n\"Dude. Did you think that maybe I just like Jocelyn and you're kind of being a dickhead?\" Lawrence muttered.\n\nMateo froze. \"Oh. Um...\"\n\n\"Oh,\" I said. \"I mean, you're nice and everything, but\u2014\"\n\n\"Oh, thank God,\" Lawrence interrupted. \"Because like, yeah, you're hot and everything, and I'd definitely hook up with you, but like I dunno if dating would be a\u2014\"\n\n\"Let's just not,\" I said. \"Let's forget this conversation ever happened. I'm not doing it.\"\n\n\"Jocelyn, please,\" Mateo begged. \"You don't even have to do anything. You just pretend to date Lawrence for a few months and let him do all the work.\"\n\n\"Wait, why am I doing all the work?\" Lawrence asked. \"Why am I getting dragged into this mess?\"\n\nMateo raised his eyebrows. Lawrence stared back for a moment before sighing.\n\n\"Goddamn it. Fuck you, man, this wasn't what I thought you'd do.\"\n\n\"Is someone going to tell me why, exactly, you owe Mateo a favour?\" I asked.\n\n\"I got him out of a mess is why,\" Mateo replied. \"That's all you need to know. It was a big mess, I saved Lawrence's ass, and now he's going to pretend to be your boyfriend long enough that Chelsea tries to seduce him and we get proof of it.\"\n\n\"I don't have to... you know, fuck her, right?\" Lawrence asked. \"Because like I said, she's hot, but\u2014\"\n\n\"You don't have to fuck her,\" I said. \"We're not doing this.\"\n\n\"Yes we are,\" said Mateo.\n\n\"No.\"\n\n\"Yes.\"\n\n\"No!\" I shouted. \"You're asking me to put myself in the same position I was when Isaac left me. Do you know how goddamn embarrassing that was? Do you know how weird it still is, how people treat me like a pity case because of them? Real or not, I don't want to deal with this again!\"\n\n\"You don't have to,\" Mateo said. \"All we need is for Isaac to see what she's doing. We just know Chelsea is more likely to go for a guy you're dating because... uh... well, because of whatever screwed up reason she has for going after your boyfriends. She's done it once, she'll do it again.\"\n\n\"She's done it more than once,\" I muttered.\n\nMateo couldn't have looked more excited if it was Christmas morning and there was an entire toy store beneath the tree. \"She has?!\"\n\n\"And what if it doesn't work?\" I asked, ignoring him. \"What if she doesn't\u2014\"\n\n\"Then you and Lawrence break up amicably and we all go our separate ways, except Isaac, who will be destined to a lifetime of misery because of that spiteful cow.\" \n\n\"You know I don't care about Isaac that much, right?\" I said.\n\n\"You used to,\" Mateo shot back.\n\nI fell silent, stewing in my thoughts. Mateo moved across the room and sat on the coffee table in front of me.\n\n\"Please, Joss. You don't even have to do anything, really. Bring Lawrence to dinner a couple times, hang around Chelsea a bit, and let everything just go the way it would anyway.\"\n\nThe following weekend, I went to my parents' for dinner. Chelsea and Isaac were there, of course, and we were halfway through the meal when I got the chance to bring it up.\n\n\"...so you can come by on Saturday to finish making the place cards,\" Mom was saying. \"Joss, if you could come help your sister...\"\n\n\"On... Saturday?\" I said. \"Sorry, I have plans.\"\n\n\"All day?\" Mom said.\n\n\"Well, sort of.\"\n\n\"What does 'sort of' mean?\" Dad asked monotonously.\n\n\"I just... I was going out with someone. Hiking. We were going to leave in the morning and go to the mountains.\"\n\n\"Were you actually?\" Chelsea said suspiciously. \"Or is this just another thing you're trying to get out of?\"\n\n\"I'm actually going hiking,\" I said.\n\n\"With who?\"\n\nI bit my lip. \"Just a... guy.\" \n\nIsaac tried to hide the way his face lit up. Mom wasn't so subtle.\n\n\"A guy!\" she squealed. \"Oh my God, Joss, who is he? How long have you been\u2014\"\n\n\"It's not like that... yet,\" I said. \"We just met and we were going to hang out, see how things go.\"\n\n\"What's his name?\" she asked. \"Do I know him?\"\n\n\"Um... well, no, you don't,\" I said. \"But, uh, Chelsea and Isaac do.\"\n\nChelsea's eyebrows were as high as they would go. My face was slowly turning red.\n\n\"Who?\" Isaac asked.\n\n\"Um. Lawrence Pitt. Mateo's\u2014\"\n\n\"Mateo's roommate?!\" exclaimed Chelsea. \"Are you serious?\" \n\n\"Why not?\" I asked haughtily. \n\n\"When do I get to meet him?\" Mom demanded.\n\nI sighed. \"If things go anywhere, I'll ask him to come by for dinner some night.\"\n\nI spent the rest of the meal trying to ignore the sense of unease that fell on me. Whether it was from the fact that I was really going through with this or from the way Chelsea stared at me every time I glanced up, I didn't know.\n\n<center>**\n\nNOW\n\n**</center>\n\n\"If you keep getting visitors, you're going to need to hire your own assistant to handle them,\" Bretta said.\n\n\"What?\" I plucked the earbud from my ear. \"Who the fuck is visiting me?\"\n\n\"Isaac.\"\n\nI froze, staring at Bretta. \n\n\"I don't want to see him.\"\n\n\"Girl, I know it'll be awkward after what went down at his wedding, but it's the right thing to do.\"\n\nI chewed the inside of my cheek nervously. It wasn't exactly what went down at the wedding that I was concerned about. It was more the fact that I had seen Isaac's father at least twice a week in the month that followed, though sometimes even more often than that.\n\nIt was highly unlikely Isaac had found out about me and Derek, but the fear was still there.\n\n\"Tell him to go,\" I finally said.\n\n\"I would,\" she said. \"You know I would. It's just, he looks... I think he needs you.\"\n\n\"He better fucking not,\" I muttered.\n\n\"You know what I mean,\" Bretta said. \"He's... have you seen him at all since the wedding?\"\n\n\"No.\"\n\n\"Okay. I mean, I've met the guy, what, twice? But he looks, um, different. I think that's the nice way of putting it.\"\n\nShe was right: different was a nice way of describing what Isaac looked like. Older was another. Tired, jaded, pale, and lost started to delve into the not-so-nice ways of describing the broken man standing in the reception area of the shop. It was with a mixed sense of relief and guilt that I thought he didn't quite look so much like Derek anymore.\n\n\"Isaac,\" I said carefully.\n\n\"Joss,\" he replied. \"You got a few?\"\n\n\"Grab a coffee?\" I suggested.\n\nHe nodded and I got my wallet from the back office. We were silent as we walked over to the coffee shop, speaking only to order, and still hesitated to talk once we had settled at a somewhat-private table in the corner.\n\nIsaac looked bad. That wasn't a nice way of saying it at all, but he did. There was a tightness to his face, skin stretched over bone, the usual sweetness and hopefulness in his eyes faded to a stoic sense of deadened acceptance. It was my fault, I thought guiltily. If it wasn't for me, Isaac would have never met Chelsea in the first place, and if it wasn't for me, Lawrence wouldn't have been at the wedding. He would never have done what he did, if it wasn't for me bringing them together.\n\n\"So,\" I said nervously.\n\n\"I know it's probably weird for me to come see you,\" he said softly.\n\n\"Has there ever been anything normal about either of us?\" I replied.\n\nIsaac smirked. \"Yeah, probably not. Still, sorry to... I dunno, drop in. My, uh... someone told me it might be a good idea to get some closure.\"\n\nI knew that \"someone\" was the therapist he was seeing, but didn't reveal that to Isaac. He'd want to know how I knew, and I'd have to admit Derek told me while we were lying in his bed, pressed together after a particularly memorable evening that included me sitting on his face for what felt like hours.\n\n\"What kind of closure?\" I asked instead.\n\nIsaac cleared his throat. \"About what happened. I'm holding on to a lot of, um, guilt.\"\n\nI frowned. \"Guilt?\"\n\n\"Lawrence... he hurt you. And I hurt you like that, too. Only worse.\"\n\n\"Well, 'worse' is subjective.\" It came out less convincing than I had hoped.\n\n\"I mean, I guess,\" Isaac said. \"I didn't... obviously I never, you know, cheated or lied or anything. But I ended up with her, and I was so oblivious to who she really was that I didn't see how she treated you or that you were right all along.\"\n\n\"You don't have to apologize or anything.\"\n\n\"Yeah, I do.\" He looked up at me, eyes determined. \"I have to take responsibility for my role in the whole situation. What she did to me sucked, but what she and I did to you was... I have a lot of, I dunno, conflicting feelings. It's hard to feel sorry for myself when I feel like I put myself there, and I need to apologize because I wasn't innocent in the whole thing.\"\n\n\"No, but\u2014\"\n\n\"I'm sorry, Jocelyn.\" His voice was soft but earnest. \"You warned me. You were far better to me than I deserved. You tried to put things behind you that I should never have asked you to put behind you. I've done absolutely nothing to deserve your forgiveness but\u2014\"\n\n\"Dude, it's fine,\" I said quickly, shifting uncomfortably in my seat. \"Really. I forgive you. I don't hold any of this against you. I get it, okay? You thought you were doing the right thing, it was never... I don't feel like you ever did any of it to hurt me on purpose. Chelsea...\"\n\nHe stiffened as I said her name and I coughed.\n\n\"Sorry. She, uh, she's the one who did all this. You shouldn't feel guilty about it, man. You... you fell in love with someone. You can't control that.\"\n\nThe smallest ghost of a smile flitted across Isaac's face, and a trace of himself seemed to settle back into his eyes. He paused for a moment, then chuckled softly as he shook his head.\n\n\"I've been seeing this, uh... you know, someone to talk to. About this stuff.\"\n\n\"You can say a therapist,\" I said. \"That's not something to be embarrassed about.\"\n\nHe smiled a bit more. \"Yeah. A therapist. He said to try talking to you, that it would probably make me feel better, and you know, I've been putting it off because I didn't... well. He was right, I guess.\"\n\n\"Glad I could help.\"\n\n\"You have no idea how much it means to me,\" he said.\n\nI laughed uncomfortably. \"Don't start getting any ideas, here. Chelsea dates my exes, I don't date hers.\" \n\nHe winced slightly less when I said her name that time and even laughed a bit.\n\n\"Yeah, no, I... I get that. I wasn't expecting\u2014\"\n\n\"I know. It was a joke.\"\n\n\"Okay.\" He smiled a bit more brightly. \"Can we be friends? Like, is that asking too much?\"\n\nMy hesitation didn't stem from not wanting to be friends with Isaac, but of course, he didn't know it was because I was sleeping with his dad, so that was how he took it.\n\n\"It is asking too much,\" he said after a moment. \"Sorry. That's cool, it's not\u2014\"\n\n\"No, you just, uh, surprised me,\" I interrupted. \"I just wasn't expecting\u2014\"\n\n\"I get it, that's still weird.\" He smiled and sipped his coffee. \"It's okay. Just knowing we're on good terms is enough.\"\n\nHis visit shook me for the rest of the day. Bretta chalked it up to general stress, at first, but when I forgot to put an oil cap back on a truck before signing off on it, only noticing when she walked into the shop and asked where this oil cap came from, she pulled me into her office.\n\n\"What happened?\" she asked.\n\n\"Nothing.\"\n\n\"Clearly it's not nothing.\"\n\nI shrugged. \"I just wasn't expecting to see Isaac, okay? It was weird.\"\n\n\"Jocelyn, you've worked here for years and you've never forgotten to put the oil cap back on. I know that because I've watched you give shit to other employees for forgetting to put the oil cap back on.\" She folded her arms across her chest. \"What happened?\"\n\n\"Nothing.\"\n\n\"Don't lie to me.\"\n\n\"He apologized and I forgave him. That's it.\"\n\n\"I don't believe you.\"\n\n\"Well, that's a you problem, not a me problem.\" \n\n\"No, it's definitely a you problem because you're keeping something from me, and I don't like it.\"\n\nBretta stared back at me, her eyes stony and determined. I held my resolve, folding my arms to match hers as I glared at her.\n\n\"He asked you out,\" she stated finally.\n\n\"He did not!\"\n\n\"Okay, you hope he asks you out again because you want to get back together with him.\"\n\n\"I absolutely do not want to get back together with my ex who almost married my sister.\"\n\n\"Well, actually, he did marry your sister, it just only lasted less than a day.\"\n\nI made a face at Bretta. \"Exactly. So going out with Isaac? Not something I want, okay?\"\n\n\"You say that, but I saw the way you looked when he got here.\" Bretta's face softened. \"Joss, I'm not going to judge you for wanting to go back to him. I just want you to be happy and\u2014\"\n\n\"I don't want to go back to him!\"\n\n\"\u2014if that means you need to explore going back to Isaac, then fine. I mean, hey, maybe you guys just need to fuck agai\u2014\"\n\n\"Oh my God, Bretta, stop it!\" I shouted, my voice cracking.\n\nShe fell silent for a moment, staring at me.\n\n\"Did you just yell at me?\"\n\nI swallowed hard.\n\n\"Joss, what happened?\"\n\n\"I don't want to sleep with Isaac, okay?\" My voice wavered.\n\n\"Talk to me.\" She leaned forward. \"Whatever's going on, get it out of your head.\"\n\n\"I can't.\" I didn't know when, exactly, I started fighting back tears, but my nose was twitching as I screwed up my face to prevent them from falling.\n\n\"Girl, you're scaring me. There's clearly more to this than\u2014\"\n\n\"I'm sleeping with his dad.\"\n\nHer mouth was already open, half a word still floating out when she stopped speaking. I could only look at her face for a second before burying my head in my hands.\n\n\"You wanna repeat that for me?\" she finally said.\n\n\"Not really.\"\n\n\"Okay, I will. You're sleeping with his dad?\"\n\nI made a soft noise of affirmation.\n\n\"Isaac's dad.\"\n\n\"Mm-hmm.\"\n\n\"Like, in a sexy way, not just because he's a good nap buddy?\"\n\n\"This isn't funny,\" I mumbled.\n\nShe snickered. \"I mean, it is a little.\"\n\n\"Bretta!\"\n\n\"Okay, okay.\" She took a deep breath and let it out slowly. \"Question one. Um, why?\"\n\n\"Because I like him.\" My voice was muffled by my hands.\n\n\"Question two. How?\"\n\nI snorted. \"I know you aren't into guys, but do I seriously have to\u2014\"\n\n\"I'm glad you're not too upset to be a smart ass. You know what I mean.\"\n\nSighing, I sat back, taking my head out of my hands.\n\n\"We were cleaning up after the wedding. We couldn't fit all the decorations into his car and I didn't want to wait at the church by myself so I went with him to drop the stuff off at his house. I broke a vase, cut my leg, he patched it up and then I, um, kissed him.\"\n\n\"You kissed him?\"\n\nI nodded.\n\n\"And he...?\"\n\nI nodded again.\n\n\"Wow,\" she said. \"And he didn't, like, have a problem with the fact that you're his son's ex?\"\n\n\"Oh, he did. Does.\"\n\n\"Not enough of a problem to not fuck you, though.\"\n\n\"It's not like that.\"\n\nBretta raised her eyebrows. \"No? He's taking you out to dinner, wants to meet your parents, would be proud to introduce you to people as his girlfriend?\"\n\nMy chest clenched and I stared down at her desk, not responding.\n\n\"Joss, is he... being good to you?\"\n\n\"He's not making me do anything I don't want to do, if that's what you're actually asking.\" I glanced back up at her. \"Honestly, if it weren't for the fact that everything is so fucked up already, he probably would do all those things. It's not just sex. I really like him, and he likes me.\"\n\n\"He is literally old enough to have a kid your age.\"\n\n\"Older, actually.\"\n\n\"What?\"\n\n\"Isaac's older than me.\"\n\n\"And you don't see a problem there?\"\n\nI glared at her again. \"Of course I do. It doesn't change the fact that I've never...\"\n\nI trailed off, but Bretta knew what I was going to say.\n\n\"You've never felt like this about anyone.\"\n\nI nodded.\n\n\"That doesn't maybe have something to do with the fact that he's an older man who's giving you validation that you might be missing elsewhere?\"\n\nHer words were hurtful enough that I almost felt them. Shaking my head, I stood up.\n\n\"I don't have to listen to this.\"\n\n\"Sit down,\" Bretta said harshly. I looked at her, shocked. \"Joss, sit down. We're talking about this.\"\n\n\"And if I don't want to?\"\n\n\"You need to. Look, I'm not saying this is super weird. It's not normal, but it's not... I mean, shit, I'm older than Leigh is. Not by that much, but she was still only 21 when we met.\" She looked up at me, concern written across her face. \"You're my friend, girl. I need to know you're safe and you're not being taken advantage of.\"\n\n\"I'm safe, and he's not taking advantage of anything,\" I said, settling back into the chair. \"It's not like what you're thinking. Derek is a good guy. He's torn up about how this would affect Isaac, but he... I mean, I like... we like each other.\"\n\nBretta studied me for a moment. \"You're in love with him.\"\n\n\"Fuck off, that's not\u2014\"\n\n\"Deny it all you want. It's obvious.\"\n\n\"I'm not... that's not even a possibility, okay? Even if everything was perfectly normal, we're talking a month here.\"\n\nBretta raised her hands defensively. \"Fine. Don't admit it. If you say he's being good to you, I'll take your word for it, okay?\"\n\nI didn't say anything and she sighed again.\n\n\"Okay. So you're sleeping with his dad. Which explains why you didn't really want to see him today. Why did he come see you?\"\n\n\"To apologize,\" I said quietly.\n\n\"Oh God. And now you're guilt-ridden so badly that you can't even remember to put an oil cap back on.\"\n\n\"Thanks. I needed to hear that.\"\n\n\"Am I wrong?\"\n\nI shook my head reluctantly. \"If Isaac found out, it would completely ruin him. He and Derek weren't close for a very long time, but they are now. He'd think this was a huge betrayal. Angela would... I don't even know. I like him and I know he likes me, but I don't want him to lose his family over me.\"\n\n\"And your family?\" she asked.\n\n\"Fuck 'em.\"\n\nShe burst out laughing.\n\n\"They don't... I mean, I told you what happened. I don't know what I ever did to make my dad hate me so much. They don't care about me.\"\n\n\"I've told you for years that your family treats you like shit,\" she said. \"You'd still be devastated if they cut you out?\"\n\n\"I'd be less devastated if it meant I got to be with Derek.\"\n\n\"Shit, Joss.\" Bretta sat back in her chair, eyebrows furrowed. \"What are you going to do?\"\n\n\"Isn't that the million-dollar question,\" I mumbled.\n\nLater that day, I had just finished work and was about to start my car when my pocket started vibrating. Very few people called me, so it was one of two people: my mom, or Derek.\n\nIf it was my mom, I'd be guilted into coming to yet another family dinner. If it was Derek, he was probably calling because Isaac mentioned he'd been to see me. Neither sounded like a conversation I wanted to have, but I checked my phone anyway.\n\nDerek. It would have almost been better if it had been my mom.\n\n\"Hey,\" I said.\n\n\"You okay?\" he asked immediately.\n\n\"Yeah. He told you?\"\n\n\"Yeah. What did you say?\"\n\nI recounted my conversation with Isaac to Derek, skipping over the part where I'd told Isaac we wouldn't be getting back together. Of course, because it was Derek, he asked anyway.\n\n\"Does he want to, you know, give it another shot with you?\"\n\n\"No.\"\n\n\"Are you\u2014\"\n\n\"Neither of us do.\"\n\nDerek fell silent, but I knew what he was thinking.\n\n\"I would have said no even if you and I weren't... if this wasn't a thing. This... us... thing had nothing to do with that.\"\n\n\"You sure?\" he asked quietly.\n\n\"Positive.\"\n\n\"Because if I'm keeping you from being with someone better for you\u2014\"\n\n\"Don't, please,\" I begged. \"You're not keeping me from being with anyone.\"\n\n\"You say that, Joss, but\u2014\"\n\n\"Derek, if it weren't for all the fucking drama surrounding us, I'd want to be with you. You know, like... properly.\" \n\nIt was a terrifying thing to admit out loud. I was sure Derek already knew how I felt. I knew how he felt. We both pretended like it was just sex, like it was a physical relationship and like that would be enough to satisfy us, but that was a lie. Still, it was the first time either of us had said anything of the sort out loud.",
        "He didn't respond right away, leaving me to sit in my car with my heart racing and my palms sweating.\n\n\"Come over,\" he finally said.\n\n\"Now?\"\n\n\"Yeah.\"\n\n\"I'm just leaving work. I haven't even\u2014\"\n\n\"Shower here. Then we'll have dinner. Watch a Doctor Who rerun or something.\"\n\n\"That almost sounds like a date,\" I said uncertainly. \n\n\"It is.\"\n\n\"Is that a good idea?\"\n\n\"Joss, when have we ever had good ideas?\"\n\nI bit my lip, as likely to cry as I was to laugh.\n\n\"I'll see you soon,\" I said.\n\n<center>**\n\nTHEN\n\n**</center>\n\n\"So, what do you do for a living, Lawrence?\" Mom asked politely.\n\nLawrence smiled at her, his natural charm evident. \"I work in pharmaceutical sales. Super boring, I know, but you gotta pay the bills somehow.\"\n\nNo one else at the table caught the momentary laugh in Isaac's eyes. I frowned, unsure of what was so funny.\n\n\"Understandable,\" Dad said. \"You make good money, selling... pharmaceuticals?\"\n\n\"Yeah, pretty decent,\" Lawrence said. \"I've been thinking of maybe going back to school or something, maybe getting into chemistry or something like that. You know, something a little more cerebral.\" \n\n\"You should be an accountant,\" Isaac said. \"You're good at counting all that money you make.\"\n\n\"And be a boring old buzzkill like you?\" joked Lawrence. \"No thanks, I'm good, math nerd.\"\n\nI closed my eyes, wishing I was literally anywhere else than at my parents' dinner table with goddamn Lawrence.\n\n\"So, what do you do, Mr. Miller?\" he asked.\n\n\"I'm an accountant,\" Dad said impassively.\n\nThere was a moment of complete silence at the table.\n\n\"Well, if anyone was wondering just how deep in my mouth I could get my foot, it's apparently all the way,\" Lawrence said, chuckling.\n\nMom laughed far harder than she should have, a high-pitched chortle that rang in my ears. Dad grunted and ate another forkful of meatloaf, which was probably the best reaction any of us could have hoped for.\n\n\"Uh, what about you, Chelsea? You're a... what, again?\"\n\n\"Dental hygienist,\" she said lightly. \n\n\"That's super cool,\" Lawrence said enthusiastically. \"So you like, clean teeth and stuff?\"\n\n\"And stuff,\" she said. \"So tell me, Lawrence, what's a guy like you doing with my sister?\"\n\n\"Ouch,\" he laughed. \"I've got that low of approval rating already?\"\n\nIt was kind of sweet that he thought he was the one being disapproved of.\n\n\"Not at all!\" Mom interjected. \"I think what Chelsea meant is how did you two meet?\"\n\n\"Well, Chelsea was there!\" he answered cheerfully. \"Mateo is my roommate and they had some wedding party thing at our place, what was it, a month ago? Whatever. I ran into Jocelyn\u2014\"\n\n\"Your bathroom door ran into Jocelyn,\" I corrected.\n\nHe grinned. \n\n\"Right, I hit her with the bathroom door. Not on purpose,\" he said earnestly to my dad. \"I didn't know she was in there.\"\n\n\"Mmm,\" said Dad.\n\n\"Anyway, we got talking and she invited me down to have pizza, and before we knew it everyone was leaving and we were still sitting there! Figured if she liked me enough to hang out for a few hours, maybe she'd think about keeping me around.\" \n\n\"That's so sweet,\" Mom said.\n\n\"I'm just so surprised you brought him around this early,\" Chelsea said to me. \"It's really nice, honestly. Normally you're so secretive about the people you're dating.\"\n\nI couldn't tell if she was suspicious or simply making a comment. With Chelsea, it could be anything. She still wasn't over the dress debacle, and I knew the only reason I was still her maid of honour was because Mom told her she couldn't kick me out of the wedding party. Still, Lawrence's presence meant whatever fear she had about me going after Isaac was unfounded. At least, theoretically. She could have been actually happy for me, for all I knew.\n\n\"Well, Lawrence is... different,\" I said.\n\n\"Heard that a time or two in my life,\" Lawrence said out of the corner of his mouth to Isaac, who laughed.\n\nThe conversation fizzled out awkwardly again, the sound of cutlery scraping against plates shrill in my ears. Lawrence ate another few forkfuls before turning back to Chelsea.\n\n\"So tell me more about this dental hygiene stuff,\" he asked.\n\n\"Well, you should brush and floss twice a day,\" she said boredly.\n\nLawrence laughed as though it was the cutest thing he'd ever heard. \n\n\"You're pretty funny,\" he said. \"Is it interesting work? Maybe chemistry isn't my thing. Maybe dentistry would be more fun. You'll have to tell me about it.\"\n\n\"I try not to talk gingivitis and cavities at the dinner table,\" Chelsea replied.\n\nI wasn't sure if I was grateful that she seemed disinterested in Lawrence or annoyed that it wasn't working. If she would just flirt back a little, maybe the whole charade could be done with. No matter what Lawrence did, Chelsea didn't seem to care. Isaac didn't seem to notice Lawrence's efforts to flirt with her, likely chalking it up to his usual level of charm.\n\nAfter dinner, Lawrence remained seated at the table while I stood up to start clearing it. Isaac, who usually tried to pitch in and help clean up, joined me.\n\n\"So, you and Lawrence,\" he said when we were in the kitchen.\n\n\"Me and Lawrence,\" I repeated. \n\n\"I'm so happy for you,\" he said earnestly. \"Really, Joss. I'm glad you're\u2014\"\n\n\"If you're about to say 'moving on,' don't,\" I warned him. \"For your information, I moved on a while ago. Just because I don't bring people over doesn't mean I'm not dating.\"\n\nHe nodded in acknowledgement. \"Fair. Do you want to invite him to the wedding?\"\n\nFuck, I thought.\n\n\"Um, maybe,\" I said noncommittally. \"Like, probably, but that's still a while away.\"\n\n\"We'll save a spot for him. Or for, you know, whoever you might want to bring as a plus one.\" He shifted awkwardly. \"This might not be my place, but\u2014\"\n\n\"If it's not your place, don't say it.\" I turned on my heel to head back to the dining room.\n\nDuring the few minutes I had been out of the room, something had happened. I knew it the moment I walked in and saw Lawrence looking amused, Chelsea staring at him coldly, and Dad looking unimpressed. \n\n\"What's going on?\" I asked lightly, collecting a few more plates off the table.\n\n\"Your new boyfriend thinks Isaac and I make a strange couple,\" Chelsea said flatly.\n\n\"I didn't say strange,\" Lawrence said, laughing. \"I said you didn't seem all that similar and it was nice to see that opposites attract.\"\n\n\"You also said Isaac's a nice guy. What does that make me?\" she asked.\n\nLawrence's eyes flashed playfully. \"Well, just the opposite.\"\n\n\"So a\u2014\"\n\n\"A nice girl, obviously,\" he continued. \"I mean, I'd say guys and girls are opposites, wouldn't you?\"\n\n\"Do you know what the word 'opposite' means, Lawrence?\" Dad said.\n\nThe rest of the evening did not improve, and when Lawrence and I were finally safely in his car and driving down the street, I groaned loudly.\n\n\"I knew this wouldn't work,\" I said.\n\n\"Give it some time, I'll get it figured out,\" Lawrence replied.\n\n\"Give it some time?\" I repeated. \"Chelsea had zero interest in you\u2014\"\n\n\"Ouch.\"\n\n\"\u2014you insulted my dad's career, you sounded like a total moron, no offence\u2014\"\n\n\"Uh, none taken?\"\n\n\"\u2014and now Isaac's saving you a spot at the wedding, so I have to come up with some story about why we broke up.\"\n\n\"Wait just a sec,\" he said. \"You're so convinced this didn't work, but it's not like Chelsea started hitting on Isaac right away, is it? You said she even had a boyfriend when you and Isaac were dating.\"\n\n\"Sure, a 'boyfriend',\" I said. \"I'm 98% sure it was just some guy she asked to come to dinner so she could take the spotlight.\"\n\n\"So we do it again,\" he said. \"It'll be fine. Give it another try, I dunno, next weekend.\"\n\nI sighed and stared out the window. Lawrence drove silently towards my apartment.\n\n\"I didn't know you were a pharmaceutical salesman,\" I said.\n\nHe snickered. \"Well, sort of.\"\n\n\"What?\"\n\n\"What do you mean, what? Mateo told you, right? I mean, fuckin' Isaac knows, he buys from me.\"\n\nMy stomach started curling. \"Lawrence, what the fuck do you do for a living?\"\n\nHe glanced at me out of the corner of his eye. \"Uh... seriously?\" \n\nWhen I didn't respond, he sighed.\n\n\"It's a joke. What's another word for 'pharmaceutical'?\"\n\nThe moment after I slammed the car door, I had my phone out. I was barely in my apartment when he answered.\n\n\"Hel\u2014\"\n\n\"A drug dealer, Mateo?!\" I screeched. \"You sent me to dinner with my parents with a fucking drug dealer?!\"\n\n\"It's not that bad!\" Mateo protested. \"He just sells weed.\"\n\n\"Oh, he must be doing so well now that weed is legal,\" I said sarcastically. \n\n\"His shit is cheaper and better than the legal stuff.\"\n\n\"What the actual fuck? You didn't think that was an important detail to share? And Isaac knows, too?\"\n\n\"Well, yeah, he buys his weed from Lawrence.\"\n\n\"Since when does Isaac even smoke weed?\" My voice was getting more and more shrill.\n\n\"Uh, like, since high school at least,\" Mateo said. \"How did you date him and not know that?\"\n\n\"I don't fucking know! Why didn't he ever tell me?\"\n\n\"I... I don't know, you 'd have to ask him.\"\n\n\"So that means Chelsea knows, and there's no way she's going to risk her fucking relationship with Isaac over some guy who sells illegal legal drugs!\"\n\n\"Oh, Chelsea doesn't know,\" Mateo said. \"Isaac refuses to tell her he smokes weed.\"\n\n\"You're joking.\"\n\n\"Nope. She made some comment about how gross she finds it and he's never mentioned it.\"\n\nI flopped on my couch, tilting my head back against it. \"And you didn't think that maybe we could just spill the beans to her and that might get them to break up?\"\n\n\"No, it would just get Isaac to stop smoking weed.\" \n\n\"But\u2014\"\n\n\"Joss, come on.\" There was the sound of the phone shuffling. \"Think about it. If Chelsea told Isaac the colour of his eyes annoyed her, he'd start looking into coloured contacts. If Chelsea told him she found accountants boring, he'd switch careers. So if Chelsea found out Isaac was smoking weed, what do you think he'd do?\"\n\nI grumbled, but had to agree.\n\n\"Look, I'm sorry I didn't tell you about Lawrence. I didn't... I thought you knew.\"\n\n\"Bullshit.\"\n\n\"Okay, you're right, it's bullshit, but does it really affect anything? Your whole relationship is a lie.\"\n\n\"And what if it gets out, hmm? What then, Mateo?\" I slumped forward, resting my head in my hands. \"What about when my parents find out I'm dating a goddamn drug dealer?\"\n\n\"They won't,\" he said. \"And besides, he really is looking at going back to school. He's not making as much money now that weed's legal.\" \n\n\"You've got to be kidding me,\" I muttered. \"Am I crazy? Is it me? Really, Mateo, be honest, because it feels like I'm the only sane person in all of this and that must mean I'm the crazy one.\"\n\n\"You're making a way bigger deal out of this than you need to.\"\n\n\"A way...\" I paused, taking a breath. \"Why does he owe you a favour?\"\n\n\"What?\"\n\n\"Lawrence. He's doing this because he owes you a favour. Why does he owe you a favour?\"\n\nMateo sighed. \"I might've bailed him out of\u2014\"\n\n\"Are you fucking kidding me?!\"\n\n\"Joss, just let me\u2014\"\n\n\"No.\" The phone trembled against my cheek and I realized it was because I was so angry, I was shaking. \"I'm done. Count me out and break them up yourself.\"\n\n\"Wait, before you\u2014\"\n\nI hung up, chucked my phone onto the coffee table, and buried my head into my hands. Three times, I heard the phone vibrate against the table before Mateo gave up. \n\nHe kept trying: the next day he called six times and texted at least every half hour. The day after that, he had Lawrence in on it and they called so many times, my phone died while I was working. He gave up the day after that, and I pushed any thought of Mateo and Lawrence from my mind until dinner the following weekend.\n\n\"No Lawrence tonight?\" Mom asked when I got there.\n\n\"Um, no. We, uh\u2014\"\n\n\"Oh no, you broke up already?\" Chelsea asked from the living room.\n\n\"You seemed so good together,\" Mom said sadly.\n\n\"That's too bad, I was looking forward to seeing him,\" Chelsea added.\n\n\"Yeah, sorry, Joss,\" Isaac said sympathetically. \"I was rooting for you guys.\"\n\nChelsea rolled her eyes. \"You're laying it on a little thick, Isaac.\"\n\nHe looked hurt but tried to smile. I tried not to let it bother me, but it was like someone had kicked a puppy.\n\nFucking Isaac with his stupid...\n\n\"We didn't break up,\" I said. \"Lawrence just felt uncomfortable after dinner last week because he thought you guys didn't like him, so he didn't want to cause any more issues.\"\n\n\"Well, of course we liked him!\" Mom said. \"Is he available? Give him a call, we can wait and\u2014\"\n\n\"Uh, not tonight,\" I said. \"Maybe next weekend.\"\n\nChelsea grinned cheerfully from the couch. \"I look forward to it.\"\n\n<center>**\n\nNOW\n\n**</center>\n\nGiven enough time, even the strangest things can become routine.\n\nDerek and I never talked about my admission that if it weren't for the obstacles in our lives, I'd want to be in a relationship with him. We didn't discuss being exclusive. He never asked me to be his girlfriend and I never said he was my boyfriend. We didn't talk about the hurdles, about the fact that the concept of \"us\" was steeped in bad ideas and questionable decisions.\n\nIt just happened. Unspoken and undefined, it became far more than it should have.\n\nWeeks turned to months where I lived in two places: in real life, and in Derek's life. My routine became predictable. Fridays would roll around and I would go to Derek's after work. I didn't need to knock; I would let myself in and he would come to the door, taking me in his arms and kissing me the moment I arrived. While I showered, he would start making dinner, and I would help him when I was done. We would eat, talk, and clean the kitchen together, and the moment we were done, I was in his arms again.\n\nWe would spend most of Friday night in bed, wrapped around each other, cycling through waves of heated passion and quiet intimacy. My heart would ache as we talked, sometimes about trivial things like movies and how our week went, and sometimes about heavy things like family and memories we'd rather forget. Some nights we would make love and fall asleep early; some nights we would fuck once, twice, however many times before exhaustion took over and we could barely move.\n\nIn the morning, he would wake me up early, his lips on my neck and his hands on my breasts as he nuzzled against me. Half-awake and wholly his, I would cling to him as he made love to me, slow and unhurried and every bit as intense as the night before. When we were done, he would kiss me and tell me to go back to sleep while he went out to do deliveries.\n\nSome days he would be back before I woke up again. Other days, I would wake up and help myself to coffee and breakfast and sometimes even lunch before he returned. No matter when he got back, I was happy to see him, and he was happy to see me.\n\nOn Saturday nights we would cook together again, then watch most of a movie. One weekend, I brought my PlayStation over and got Derek addicted to video games; the next weekend, he had purchased one of his own. Always, things lead to the same place: Derek's bed, in his arms, holding him as he brought me to places of complete bliss again and again and again.\n\nWe only ever spent Sunday mornings together. Afternoons were reserved for getting ready for the week, or in my case, getting ready for dinner at my parents'. It was always hard to leave on Sundays, and before I even parked my car back at my apartment, there was a text message from Derek telling me that he missed me.\n\nDuring the week, we would get together a couple of times, always on different nights. I didn't stay those nights, though. Going to work from his place in the morning felt like too much, which was funny considering Bretta was the only person who knew about me and Derek.\n\n\"How's it going with him?\" she asked one day over lunch. \"Still... sneaking around?\"\n\n\"Yeah,\" I said.\n\n\"How's Isaac doing?\"\n\nI smiled, though my jaw was tense. \"Good. Derek said he's really come around and started putting his life back together. He helped him move into a new apartment last week. With, uh, Mateo.\"\n\n\"Mateo, the best man?\"\n\nI nodded. Bretta didn't know what Mateo had done. My guess was that Isaac didn't, either.\n\n\"So he's gotten over Chelsea?\"\n\n\"Maybe. He's still talking to Derek pretty regularly. They're going to a football game next week, even. Like, a father-son thing. Derek's so excited.\"\n\nMy voice cracked, the only outward sign of the guilt that was squeezing my chest. Bretta sighed.\n\n\"Is the amount of self-loathing you're holding over this healthy?\" she asked bluntly.\n\n\"Oh, God no,\" I said. \n\n\"So why\u2014\"\n\n\"He makes me happy,\" I interrupted. \n\n\"How long are you going to keep this up?\" Her voice was gentle. \"Do you really see a future with him?\"\n\nI shrugged, picking at my sandwich. \"I'm not ready to give it up yet.\"\n\n\"The longer you wait, the more it will hurt when you finally have to.\"\n\n\"Well yeah, but maybe the longer I wait, the more worth it the pain will be.\" \n\nBretta snorted. \"That was almost poetic, Joss. You really are a woman in love.\"\n\nEvery muscle in my body went stiff, so sudden and so thorough it might have been easier to just literally turn to stone. \n\n\"Don't say that.\"\n\n\"What... love?\"\n\n\"No one's used that word except you.\" My voice wavered, but Bretta didn't seem to notice.\n\n\"Sure. Whatever you say. I don't hear you denying it.\"\n\nI tore off a piece of my sandwich and threw it at her, batting it away when she caught it and threw it back.\n\nStill, her words echoed in my head the rest of the day, as much as I tried to drown them out. I put on my classic rock playlist and blared it, singing loudly until one of the other mechanics threw a rag at me and told me to shut up. I threw the rag back, flipped him off, and sang louder. Nothing I did stopped the reverberating sound of Bretta's voice in my head.\n\nLove.\n\nIt was three months after the disastrous wedding. Three months of spending almost every weekend with Derek. Three months of heart-to-hearts and stupid inside jokes. Three months of thinking about him multiple times a day, wondering what he was up to, trying to hide a smile when my phone went off and it was a text from him. \n\nThree months of guilt, knowing how much he was putting on the line to be with me, even secretly. Three months of knowing how much I had already done to hurt him and his family. \n\nWhen I finished work for the day, a text message from Derek was waiting.\n\nCome over tonight?\n\nI swallowed hard, listening to Bretta's voice ringing in my mind. \n\nFuture. Hurt. Love. Guilt. \n\nI couldn't love him. Nothing good would come of it. Bretta was right: there was no future with him. I wasn't being fair, either. I might be okay with the inevitable hurt that would happen when things had to end, but Derek might not be. It wasn't fair to keep stringing him along.\n\nMy fingers tapped the response my head wanted to give, not the one my heart wanted to give.\n\nCan't. Have plans, sorry.\n\nDamn. Too bad. At least tomorrow's my favourite day of the week :-)\n\nOf course it was. Everybody loved Fridays, but Fridays meant a lot more to me and Derek than most other people. And if Bretta was right about my feelings\u2014which she obviously was, as much as I tried to deny it\u2014it meant Fridays needed to stop being a special day. \n\nThe pain of knowing what I had to do distracted me at best, and had me on pins and needles at worst. I could barely focus on work, instead thinking of how I could possibly explain to Derek that we couldn't see each other anymore. When I missed lunch and Bretta came in to check on me, she shook her head.\n\n\"I get it. The weather sucks, it's Friday, we're not busy. Go home. You're useless,\" she said kindly. \"The trouble is all inside your head. Start your weekend early, get yourself sorted. And, Joss, you know if you need anything...\"",
        "\"I know,\" I said.\n\n\"You must be really fucked up if you're not fighting with me on this.\"\n\nMy lips twitched. Bretta hesitantly reached forward to hug me, second-guessed herself, and awkwardly patted me on the back.\n\n\"I didn't mean for you to question whatever it is you and Derek have going on,\" she said softly. \"You clearly care about him. I'm sure he cares about you just as much. It's hard because I can't meet him and let him know how badly I'll kick his ass if he hurts you.\"\n\nI smirked, not quite able to laugh. \"No, you were right. I needed to hear it.\"\n\n\"Wait, Joss\u2014\"\n\n\"Too late, you said I could go home early, I'm leaving, bye!\"\n\nShe protested but I was already out the door.\n\nIn hindsight, I should have stayed at work. The only thing I knew clearly was that we had to end things suddenly, swiftly, and completely. Talking it over wouldn't work: we'd agreed a million times that what we were doing was a bad idea. No, the only way to do it was to grit my teeth and end it. If I had stayed at work, I would have at least had that as a distraction. Leaving early also meant that I heard my phone go off when Derek sent his usual after-work text, since it was sitting on my coffee table instead of in the back room. \n\nI'm thinking spaghetti for dinner. Is an insane amount of garlic a total turn off if we're both eating it anyway?\n\nNot thinking, I responded right away.\n\nI can't make it tonight. Sorry.\n\nWithin seconds, my phone was ringing. I chewed the side of my cheek, face pained as I watched his name flash on my screen. When it finally stopped ringing, I waited for the inevitable ping of my voicemail going off, even though I'd told Derek a million times I hated checking my voicemail.\n\nIt didn't, though. Instead, another text came through. \n\nWhat's going on? You're not at work?\n\nI thought about not answering, but I couldn't bring myself to be that cold-hearted.\n\nNot feeling well.\n\nLet me come bring you something to eat then.\n\nNot a good idea. I'll be fine.\n\nHe tried calling again. That time, I just sent it to voicemail instead of watching it ring.\n\nJoss, please answer your phone.\n\nI can't talk right now.\n\nTears were slipping down my cheeks. I brushed them away, angry they would dare to fall without my permission. Seconds passed, then minutes. I closed my eyes, sure this was the end of it, until he finally messaged again.\n\nI don't play games and neither do you. If you're with somebody else, just tell me. I'll understand. If something's happened, just say so. Call me. Otherwise, I'm going to be at your apartment in 10 minutes to make sure you're not dead or kidnapped or something. If you don't want to see me again after that, I'll leave you alone. I just need to know you're okay.\n\nI choked on a sob. Stupid Derek and his stupid level-headed compassion.\n\nHe answered halfway through the first ring.\n\n\"Joss?\"\n\n\"I'm sorry,\" I whispered.\n\n\"Just talk to me,\" he said. \"Please.\"\n\n\"I'm not dead.\"\n\n\"Okay. That's a good start.\"\n\n\"But I can't do this.\"\n\n\"Joss, wait\u2014\"\n\nHe tried calling twice more before giving up. The rain outside beat down faster, pouring down the windows in tumultuous streams as the wind picked up. I sat on the couch, watching it mindlessly, until my phone went off again about an hour later.\n\nI'm not mad, okay? I'm scared. If I did something to hurt you or upset you or whatever... whatever's happened, please just tell me. The not-knowing is killing me, Joss. Maybe that's selfish of me but I care way too much about you to let things go like this. Swear to God, whatever you want to do, I'll agree to, just don't leave me in the dark. Just talk to me. Please.\n\nI was still processing the message when the next one came in, even though it was almost an hour later.\n\nThis isn't you. Whatever I did, I'm sorry.\n\nThe words ate at me. They broke me. What little resolve I had was shredded, dissolved, and poured out of me. I was barely aware of getting up from the couch and grabbing my keys, almost unconscious of the fact that I was getting into my car and driving to Derek's house until I was pulling into his driveway.\n\nThe rain had slowed, but it was still drizzling and grey when I got out of the car and walked to the back door. I hesitated when I was standing in front of it. Letting myself in didn't feel appropriate. Knocking, though... I had never knocked on Derek's door before.\n\nAs luck would have it, I didn't need to. He must have heard me come up, and before I could decide what to do, the door was swinging open.\n\nI almost chickened out. Derek's face was a mix of concern and suspicion. There wasn't anger in his eyes, but the usual sparkle he had when he saw me wasn't there, either. His mouth was set in a straight line as he regarded me cautiously.\n\n\"What's going on?\" he asked.\n\n\"I'm in love with you.\"\n\nDerek was smart. He'd probably spent most of the night coming up with every conceivable possibility for the way I was acting. I already knew he thought I might have met someone else. He probably entertained the idea that maybe the \"someone else\" was Lawrence, or maybe even Isaac. He may have thought I was pregnant, or maybe that I was dying. There were a million different reasons he might have thought of to explain what was happening.\n\nHowever, me saying I was in love with him was clearly not one of them.\n\n\"What?\" he said after a beat.\n\n\"I'm in love with you.\" \n\nMy voice cracked and I burst into tears. Ugly, wet, horrible Kim Kardashian level tears. Without a second thought, in less time than it took to blink, Derek's arms were around me.\n\n\"Just breathe,\" he said. \"Take a breath.\"\n\n\"I'm sorry,\" I whimpered.\n\n\"No,\" he said. \"Joss, don't\u2014\"\n\n\"It's st-stupid,\" I stuttered into his chest. \"This w-wasn't supposed to happen. I'm so sorry.\"\n\n\"Don't be.\"\n\n\"I c-can't... we can't...\"\n\n\"I love you.\"\n\nI wrenched myself out of his arms, stepping back to look up at him.\n\n\"What?\"\n\nDerek stared back at me, his expression pained. \"I've been in love with you since the first night you were here.\"\n\nI collected myself just enough to process what he said.\n\n\"This is horrible,\" I finally sniffed.\n\nDerek choked on a laugh. \n\n\"Not really the way I imagined this conversation going.\"\n\nI couldn't help it. I giggled, a wet sort of bubble, and then we were both laughing. At some point, I clutched at him; he held me up as tears cut through the laughter.\n\n\"Don't cry,\" he murmured. \"We'll figure this out.\"\n\n\"How can we possibly figure this out?\"\n\nHis lips pressed against my forehead, then my cheeks, before finally finding my mouth.\n\n\"Haven't thought that far ahead,\" he said. \"Come on, come inside. It's cold out here.\"\n\nHe pulled me in, releasing me just long enough to shut the door before kissing me again. I pulled myself against him, terrified of what would happen if I let go. Strong arms wrapped around my waist, holding me closer, pressing his body against mine.\n\nIt wasn't fair. The way he fit against me wasn't fair. The feel of his body wasn't fair. The taste of his mouth and the scent of his cologne and the way his hands gripped me were not fair. It wasn't fair to love him, and it wasn't fair for him to love me, and yet there we were in the entrance of his house pawing at each other like we were starving.\n\nThe path to his bedroom was staggered, pieces of clothing falling behind us as we stumbled through the hallway. What should have been a short walk took ages, not that either of us minded. He pulled at my clothes, kissing me and touching me as I struggled with his shirt. When I finally got it off, he pushed me against the wall, trapping me against his body. His teeth grazed against my lower lip, his hands cupping my breasts over my bra before sliding down my bare stomach. He unbuttoned my jeans smoothly and slipped his hand inside, cupping my mound through my already-dampening panties.\n\nI squirmed as he moved his hand back up so he could slip his fingers past the waistband of my panties, panting against his mouth when a finger pushed past my folds and into my dripping entrance.\n\n\"Fuck,\" he muttered. \"Joss, you're so wet.\"\n\n\"I want you,\" I whispered.\n\nHe kissed me again, and again, and his hand moved against me harder. I moaned softly, fighting through the distraction so I could get my hands onto the buckle of his belt. Once I managed to fumble it open, I unbuttoned his jeans and pushed them down eagerly, eliciting a soft chuckle that turned to a groan as I cupped his quickly-hardening cock through his boxers.\n\n\"What're you doing?\" he mumbled when I nudged his hand out of my panties.\n\nI didn't answer, just pushed him to the other side of the hallway before dropping to my knees in front of him. \n\nAfter tugging his jeans the rest of the way down and pulling his boxers down to meet them, I wrapped my fingers around his cock. Derek groaned again, and another time when I replaced my fingers with my mouth. His hips moved forward just slightly, a restrained instinct as I took him into my mouth. A hand found the back of my head, resting lightly against my hair as I began bobbing my head.\n\nHis cock slid over my tongue, hard and thick and throbbing. I pushed him deeper into my mouth, relishing the feel of him pressed against the back of my throat before pushing just a little bit further. Derek cried out and his fingers tightened in my hair, only just long enough for him to be able to grab it. I heard his head knock softly against the wall and glanced up, the sight of him with his head tilted back and his eyes closed one of the most beautiful things I could imagine.\n\nBefore either of us could get too far into it, Derek was pulling my mouth off his cock and tugging me to my feet.\n\n\"Bedroom,\" he growled, though he paused to push my jeans down and again to take my bra off before using his body to nudge me the rest of the way down the hall.\n\nWe fell onto his bed together. He guided me onto my back, bringing himself over me, his kiss lingering for just a moment before he moved to pull my panties down. I lifted my hips as he slid them over my ass, watching as he tossed them to the side carelessly. Large hands parted my thighs. He paused for just a moment to press his face against my pussy and dart his tongue between my folds, then he was nestling between my legs and pushing himself inside me.\n\nAny tension left in my body dissolved as he buried himself in my pussy. With him inside me, I felt complete, like whatever pieces of me had been scraped and torn away were returned, like I was something. A soft noise left my lips as his pelvis met mine and he paused, his hand brushing against my hair.\n\n\"You okay?\" Derek murmured.\n\n\"I love you,\" I whispered. There was a tightness in my throat, something threatening to overwhelm me.\n\nHe kissed me, his lips warm and soft against mine.\n\n\"I love you too,\" he whispered back. \"So much, Joss. I love you so much.\"\n\nThat overwhelming emotion overflowed. Tears pricked in my eyes again, spilling as Derek started to pull out. He was pushing himself back inside me when he noticed and immediately paused again\n\n\"Don't cry,\" he pleaded.\n\n\"I'm not crying,\" I said stubbornly. \"Keep going.\"\n\nHe laughed. \"Demanding, aren't you?\"\n\n\"Yes. But you love me.\"\n\n\"I do.\" \n\nHe began moving again, filling me, completing me. His lips barely left mine, murmuring softly as he brought me closer and closer to bliss, kissing me lightly as he used his body to pleasure mine. I wrapped my arms around him, holding him to me, gasping softly when his pelvis brushed against my clit again and again.\n\nThe pressure began to build up in my body. Already little tremors were shivering through my body, quivers that pushed me closer and closer. I tightened my hold on him, my legs tensing, and Derek groaned.\n\n\"Come for me,\" he breathed. \"Come on, Joss, come for me.\"\n\nI couldn't respond, at least not with words. I responded by panting, by moaning, by losing my breath as he brought me to the very edge of completeness and held me there, dangling for a single, long moment before I felt the entire earth move and shudder. Then it was just us: just him, just me, and just blinding white light as my body spasmed. His lips were on mine, his breath hot against me, and I heard him go breathless.\n\n\"I love you,\" he said distantly, and then he was spilling inside me.\n\nI felt every spurt, every twitch of his cock, eagerly accepting every bit of himself that he could give me. He stayed there for a long time. I couldn't bring myself to let go of him. I didn't want to lose the fullness he brought me. I just wanted to exist in that moment for the rest of my life. There was no worry in that moment, no problems, no concerns about how we could possibly be in love when there were so many things against us. \n\nIt couldn't last forever, though, and eventually Derek kissed me and gently parted from me. I sighed, closing my eyes as he lay beside me and brought me into his arms, the reality of the situation rushing back into my mind.\n\n\"What do we do?\" I asked sullenly.\n\n\"I don't know,\" he replied. \"I want this to be a real thing, Joss.\"\n\n\"I do, too.\"\n\n\"So what's stopping us? What do we have to do to make this work?\"\n\nI buried my face against his chest as the rush of problems overwhelmed me again. \"Too much.\"\n\n\"Let's start with the easier stuff, then.\" He kissed the top of my head. \"No matter what happens with any of the other problems, the first thing people are going to question is the fact that I'm way too old for you.\"\n\n\"Fuck those people.\"\n\nMy head was jostled as he burst out laughing. \"Okay, problem one solved.\"\n\nI smiled, kissing a spot on his chest. \"I don't care about that. Do you?\"\n\n\"A little.\"\n\nThe answer surprised me and I looked up at him. His lips curved into a small half-smile.\n\n\"I'm not going to lie to you,\" he said. \"Most of the time when I look at you, I don't see a woman who's twenty years younger. I just see you. But sometimes I see the gap between us and I'm afraid to be the person who steals those years from you.\"\n\n\"You're not stealing anything. Do you think I'd be here if I didn't want to be?\"\n\nThe half-smile grew just slightly. \"I know you wouldn't.\"\n\n\"So problem solved.\"\n\nHe chuckled. \"Okay, problem solved.\"\n\n\"What's the next problem?\"\n\nOne by one, we began looking at all the roadblocks. We laid everything out, talking about what we might have to do, handle, or give up to be together. At the end of it all, only two really stood out: my family, and his.\n\nI thought figuring out how to deal with Derek's family would be the more complicated of the two, but after a few moments of thought, he shrugged.\n\n\"I'll call Ange,\" he said simply.\n\n\"What?\" I gasped.\n\n\"She'll understand,\" he continued. \"I'll explain it to her and she'll probably bust my balls a little because she friggin' adores you, but Ange is a really open-minded person. She's also about thirty times smarter than I am. She'll have a good idea on how to break it to Isaac.\"\n\n\"You seem pretty confident about all that,\" I said shakily.\n\n\"I am.\"\n\n\"What if Isaac... you know.\"\n\nHe sighed, pausing while he thought.\n\n\"I'm not gonna lie,\" he said again. \"It'll be hard. Isaac was barely civil to me for almost ten years. Any relationship we had was because his mom told him he had to. Now he wants to talk to me, finally, and... well.\"\n\n\"Is it worth it?\" My heart hammered and I couldn't bring myself to look up at him to ask the question, let alone wait for an answer.\n\nNot that it was a long wait.\n\n\"Absolutely,\" Derek said immediately. \n\n\"Are you... I mean, I don't want to come between you and him.\"\n\nHe was quiet for a moment before tilting my head up to look at him. I shivered unintentionally when our eyes met.\n\n\"You need to understand that I love you,\" he said bluntly. \"A lot. Enough that I need to give this a chance, Joss. I love my son, but he also nearly cut me out of his life for...\"\n\nHe stopped suddenly, the words fading out.\n\n\"For...?\"\n\nDerek shook his head. \"For something he didn't understand. It doesn't matter. I need to see where this... this 'us' thing goes. Clearly, what we're doing now isn't enough for either of us. Finding out what we could be together... that's what matters to me.\"\n\nThere was nothing I could say to that. All I could do was kiss him.\n\nWhen we parted, Derek brushed my hair off my forehead.\n\n\"What are we on, problem 862?\" he asked.\n\nI laughed. \"What's problem 862?\"\n\n\"What your family is going to think.\"\n\nAny trace of a smile I had faded from my lips, happiness leaving my soul so completely and so thoroughly that my body went cold. I looked away from Derek again.\n\n\"Joss. We have to talk about this.\"\n\n\"I don't want to.\"\n\n\"I know you don't,\" he said gently. \"But we need to.\"\n\nI didn't say anything, choosing instead to pout and hide my face against his chest. Rather than laugh or scoff, he hugged me closely and kissed my head.\n\n\"I need you to tell me something,\" he murmured.\n\n\"What?\"\n\nHe took a breath, hugging me just a little more tightly.\n\n\"Your family... they're assholes.\"\n\nI burst out laughing. \"Yeah.\"\n\n\"Why do you still stick around when they treat you like that?\"\n\nHe didn't ask it in a judgmental way. There was no malice in his voice, no condescending judiciousness. It was soft, quiet, curious more than anything. Still, it hurt, through no fault of his. It twisted inside me, a melancholy pinch, and I almost found myself wincing.\n\n\"They're my family,\" I said.\n\n\"Joss, I know, but the way they\u2014\"\n\n\"I know,\" I said quietly. \"I know what you see. You see my sister being... awful. Doing all sorts of crazy things to punish me. You see my dad doing anything he can to justify her behaviour because he loves her so much, and he barely seems to tolerate me. And you see my mom turning a blind eye to it, urging me to be the bigger person and to forgive them so we can still be what she thinks is a family. Is that right?\"\n\n\"Uh, yeah. That about sums it up.\"\n\n\"What you don't see is that Chels and I were best friends growing up. Like, best-best friends. Or all the things Dad did for me, even if he never... even though I wasn't his favourite. And my mom, Derek? I love my mom. She's been on my side my entire life. She's always encouraged me. Like, when I said I wanted to be a mechanic and everyone laughed and said girls can't do that, she took my side.\"\n\nHe didn't say anything and I closed my eyes, breathing in the scent of him to calm myself.\n\n\"It's not so easy to walk away,\" I said. \"I spent my whole life trying to impress my dad, and it's pretty clear now that it's never going to happen, but it's so instinctual that it's almost a part of me. Mom would be devastated and she's... she's my mom, Derek. You don't understand. Faults and all, they're my family.\"\n\n\"You're right,\" he agreed. \"I don't understand, not really, but... that explains more of it. So, what does this mean for us?\"\n\n\"They accepted Chelsea and Isaac pretty quickly,\" I said.\n\n\"You don't sound convinced.\"\n\n\"Well, I'm not Chelsea.\"\n\n\"And that means...?\"\n\nI swallowed the lump that was building up in my throat.\n\n\"I don't know what they'll say.\"\n\n\"And worst-case scenario?\"\n\nI sat up slightly so I could look at him, so he could see what I hoped was a fierce sincerity in my eyes.\n\n\"If I get to be with you, there is no worst-case scenario.\"\n\nThere was no more to discuss, and if there was, we ignored it. Derek kissed me again and I lost myself against him, running my hands along his body and pushing my fingers through his hair. We made love again, surrounded by only each other, safe in his bed where all that mattered was us.\n\nThe next morning, Derek woke me as he usually did, his hands caressing me out of sleep. He nudged me onto my back so he could slide his cock inside me, kissing me softly and telling me to go back to sleep after we finished.",
        "\"Won't be long today,\" he whispered as my eyes slid closed. \"Just have a couple of stops.\"\n\n\"See you soon,\" I mumbled, and I was asleep before he even left the bedroom.\n\nWhen I woke up again, it was to the smell of coffee. I smiled before even opening my eyes. Stretching and yawning, I glanced around the room as I blinked slowly. Sun was streaming through the windows and I felt refreshed. In fact, I felt almost hopeful. Angela had always liked me; maybe that fondness would extend far enough to approve of me being with her ex-husband.\n\nThere was a strong possibility that she wouldn't, but still. She might.\n\nI could hear Derek in the kitchen as I got out of bed. I considered walking out naked, but the air in his house was chilly as usual. I made a mental note to tease him about it, to tell him he could have had me walking around naked all the time but that I couldn't when it was so cold in here, before grabbing his bathrobe and tying it around me.\n\nBarefoot, I padded down the hallway. Derek had collected the clothes we had left lying around the night before. I hesitated, wondering where he had put them, since my cell phone had been in the pocket of my jeans. A quick glance back into the bedroom showed they weren't there. Maybe he just left them in the kitchen while he made coffee.\n\n\"Are my jeans in here?\" I asked as I rounded the corner.\n\nIf I hadn't said anything, I could have escaped. He was facing the coffee maker and wouldn't have seen me. I could have bolted back to the bedroom and hidden until I knew it was safe to come out.\n\nBut no. I had to speak. And he had to turn his head in surprise, clearly not expecting to hear a voice, a female voice, a familiar female voice from behind him. His eyes met mine, not processing for a moment, not understanding, just bewildered.\n\n\"Jocelyn?\" Isaac said.\n\nMy mouth dropped open.\n\n\"What...\" His eyes trailed down, taking in the far-too-large bathrobe wrapped around me.\n\n\"Oh no,\" I whispered.\n\n\"What the fuck,\" he said quietly. Then, as realization set in: \"What the fuck?!\"\n\n\"It's not... I... Let me just\u2014\"\n\n\"Are you fucking my dad?\" \n\n<center>**\n\nTo Be Continued\n\n**</center>\n\nAuthor's Note:\n\nThank you to Bebop3, norafares, and OneAuthor for editing and feedback, as well as all the donut-loving llama deniers who read and offered their insights. Part three is coming soon!"
    ],
    "authorname": "MsCherylTerra",
    "tags": [
        "blowjob",
        "divorced",
        "doggy style",
        "drama",
        "falling in love",
        "flirting",
        "friends with benefits",
        "love story",
        "older man younger woman",
        "romance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/when-it-rains-pt-02-2"
}
{
    "title": "Futa's Wild Passion Ch. 08",
    "pages": [
        "Futa's Mother &amp; Daughter Delight\n\n\"She's my friend!\" Pita howled as she faced the sight she'd found in the upstairs bathroom of her house. My friend had her hands on her hips, a look of anger on her face. \"I wanted to fuck her while you kept interrupting!\"\n\n\"Well, you can share with your mother,\" Mrs. Asis said, squirming on my lap. She was impaled on my futa-dick while I sat on the toilet. I had just fired a load of futa-cum into her twat when Pita had walked in on us.\n\nI thought I had ruined my friendship with my friend. But what I thought was horror on Pita's face was turning out to be jealous anger.\n\n\"You have Dad!\" Pita hissed, marching forward. \"You don't need Jenny!\"\n\n\"Well, your father doesn't have as big a cock as Jenny does,\" Mrs. Asis said, her pussy squeezing down on my still-hard futa-dick.\n\nPita's eyes narrowed. My Hispanic friend faced her busty, naked mother without flinching. The fire burned in her. I could almost feel the heat radiating out from her. \"Fine. I get to go next. I'm so horny!\"\n\n\"Of course,\" Mrs. Asis said, the married MILF standing up and sliding her cock off my dick. \"That's only fair. She's your friend.\"\n\n\"My sex friend,\" muttered Pita.\n\nThat was the truth. When I came over to study and work on our biology project, I expected Pita and I to fool around a bit. I imagined we'd have to be quiet, to sneak around behind her mother's back. I never realized that all the times her mother interrupted us, and then finally sending her daughter out to rake the backyard like she was supposed to over the weekend, was all part of the married woman wanting to fuck me.\n\nFutanari syndrome was interesting. Some girls and women seemed to find me irresistible while others just ignored me. Pita claimed there was an urban legend that those who developed this rare condition had pheromones.\n\nMy doctor had mentioned anything like that the day before when I developed rapid-onset clitoral transformation.\n\n\"Let's go, Jenny,\" Pita said. She was nineteen, like me, a Hispanic spitfire. She peeled off her top as she walked, the straps of her gray bra running across her back and up to her shoulders. \"I need your cock in me. I'm so horny.\"\n\n\"Mmm, don't keep my daughter waiting,\" Mrs. Asis purred, her large, golden-brown breasts rising and falling. My friend's mother was a beautiful woman, a hottie like my own Mom or Reverend August or Mrs. Greene. \"She's a little angry.\"\n\n\"A little!\" Pita called. \"You kept me from sucking on her cock with your interruptions.\"\n\n\"I was just flirting with your friend,\" Mrs. Asis said. \"Sorry to interrupt your seduction. Your mother has needs, too, you know.\"\n\n\"You're old, you don't need to have needs. I'm young and hot.\"\n\n\"I'm forty. That's not old. That's mature, right?\" The MILF glanced at me, arching an eyebrow.\n\nI stared at her naked body, fit and toned, her breasts large and soft. \"Oh, yes, you're hot, Mrs. Asis.\"\n\nShe kissed me on the mouth and squeezed my rump. \"What a sweet girl you are. If only you were my daughter, then I could fuck you whenever I wanted.\"\n\nI giggled. \"Your husband might object.\"\n\n\"Mmm, he probably would. This will just be between us girls.\"\n\n\"Hey, I'm waiting!\" Pita shouted. \"I was soaking my panties while raking the dumb yard. I need your cock in me, Jenny. Please, I'm your best friend! We're sex friends.\"\n\n\"Not fuck buddies,\" I told her mother softly. \"She thinks that sounds disgusting.\"\n\n\"We can be fuck buddies,\" the MILF said, squeezing my ass. \"Now go before she throws a temper tantrum.\"\n\nI giggled and stepped into the hallway. A line of discarded clothes ran led not to my friend's bedroom but to her parents'. Through the open door, I could see Pita's naked foot resting on the edge of the bed, her ankle vanishing out of sight. A bit of her brown curls spilled over the mauve pillow surrendered in creamy lace.\n\nI padded down the hallway, my futa-cock bobbing before me, my round breasts jiggling. More and more of my friend's body came into view. Her sleek leg led up to her shaved pussy on display between her thighs. Her juices gave her naughty snatch a wicked gleam.\n\nI licked my mouth.\n\nThen her flat stomach and her small breasts came into view. Her head stared at me, her face twisted in delight. She bit her lower lip as she saw me. She had a fetish for futas, watching all the porn from the Japanese dickgirl who exploded across their adult video scene last year.\n\n\"Come on,\" Pita moaned, her hands sliding down to spread open her pussy lips. \"Just slide that big dick in me. I don't need any foreplay. Hearing you and Mom fuck was hot enough.\"\n\n\"Oh, so you didn't just barge in on us?\" I asked, sauntering to the bed, my dick soaked in her mother's juices.\n\nMy friend's cheeks darkened. \"No. But only for a minute. I was just stunned. She's married to my dad. She shouldn't be cheating on him, but... Ooh, you have such a big cock. I guess I can't blame her. Not when you have Wendy and that secret lover of yours.\"\n\n\"Secret lover,\" Mrs. Asis purred. \"Mmm, that sounds hot.\"\n\n\"You don't have to watch, Mom,\" groaned Pita as I reached the bed. I crawled on it, my futa-cock swinging between my thighs.\n\n\"Well, you're on my bed,\" the MILF said. \"I think I can watch. In fact, why don't you ride Jenny's cock?\"\n\n\"Why?\" Pita asked, peering past me with a suspicious look on her face.\n\n\"So I can sit on Jenny's face and enjoy one of my fantasies,\" moaned the MILF. \"I've always wanted my partner, your father, to lick me clean afterward. But he wouldn't touch his cum. Jenny, however, loves hers.\"\n\n\"Mmm, yum,\" I said, smacking my lips as I squirmed on my back. \"That sounds delicious, Mrs. Asis. I would love to devour my spunk out of your cunt!\"\n\n\"Oh, my god, my friend is a complete perv,\" said Pita as she grabbed my dick soaked in her mother's pussy juices.\n\nThis incestuous thrill ran through me. She was indirectly touching her mother. Pita straddled me, bringing the tip of my thick and aching cock to her shaved folds. Her juicy pussy lips nuzzled into my tip, swallowing more than just my futa-shaft.\n\nMother and daughter's cream mixed together as Pita impaled herself down me. Thanks to my little sister, I had discovered the delights of incest. I grinned at this thrill, my friend moaning as she sank her pussy down my cock.\n\n\"Oh, that feels good,\" moaned Pita. \"I've never ridden a futa-cock before. Glad to get the chance. This is hot.\"\n\n\"Glad you like it,\" I panted, my futa-dick twitching inside of her. \"Mmm, you feel good on me.\"\n\nShe winked at me.\n\nI groaned as she slid her pussy up and down my girl-dick. She rode me, teasing me. This wonderful bliss soaked down my futa-cock to my cunt. My pussy drank it in. The pleasure burned through me.\n\nMrs. Asis sauntered in, her brown bush matted with my pearly cum. She had this wild look in her eyes, not dissimilar from her daughter's expression. Their resemblance had never been clearer. I shuddered as the MILF mounted the bed, crawling towards me as her daughter rode my cock faster.\n\n\"Look at you go,\" Mrs. Asis purred as she reached me. She threw her right leg over my head, her pussy sliding into view above me. That messy bush lay at the apex of her golden-brown thighs. She lowered down to me. \"Just riding Jenny. It's a treat, isn't it? Feeling that big dick working in and out of your pussy.\"\n\n\"Mam\u00e1, this is weird,\" muttered Pita. \"You know that?\"\n\n\"Don't be weirded out, mi gatita,\" she purred, lowering her cunt to my hungry lips. The first of her pubic hair's curls brushed my mouth, cum coating the corner of my lips. I licked out, scooping up a gob of my sticky spunk into my mouth.\n\nIt was flavored by her tart juices.\n\n\"We're both women now,\" Mrs. Asis said. \"Women sharing the same lover.\"\n\n\"Mam\u00e1,\" groaned Pita, her pussy clenching down on me. \"It's still weird. You're my mother.\"\n\n\"And you're mi gatita. My cute and sexy kitten. Look at you, all grown up.\" The married MILF pressed down on me, her bush sliding over my mouth. Then her hot pussy lips were on my lips. My tongue lapped out through her. \"Ooh, she's licking her cum out of me. That feels wonderful.\"\n\n\"\u00a1Mam\u00e1!\" gasped Pita, slamming her cunt down my cock. \"Don't make this weird.\"\n\n\"It's only weird if you make it. Mmm, she's got her tongue inside of me, licking out her cum while her big dick is in you. Being a woman is wonderful, is it not?\"\n\n\"Yeah,\" muttered Pita. Her pussy slid up my shaft, squeezing around me. \"Ooh, she does feel good.\"\n\n\"Mmm, enjoy yourself, mi gatita,\" the MILF purred to her daughter.\n\nI shuddered as Pita rode up and down me while my tongue plundered her mother's pussy. I darted into those married depths to lick out my cum. I found as much as I could, reveling in the salty flavor mixed with her tart delight.\n\nMy cum flowed out of the MILF's cunt. It spilled into my mouth. It coated my lips and soaked my taste buds. I loved every moment of it. I trembled, my heart pounding in my chest as I enjoyed every lick and lap and flutter of my tongue through her folds.\n\nI reveled in the bliss of feasting on her. My tongue thrust up into her. I scooped it out of her, reveling in the salty flavor and the tart delight. My girl-dick throbbed in Pita's pussy. Her cunt felt amazing sliding up and down my cock. My pussy drank in the pleasure flowing down from my spongy tip massaged by her silken walls.\n\n\"\u00a1Mam\u00e1!\" Pita gasped.\n\n\"Mmm, just enjoy her cock,\" moaned the MILF, her hips undulating, stirring her furred muff across my face. Her bush tickled me.\n\n\"But!\" gasped Pita. \"You shouldn't... \u00a1Mam\u00e1!\"\n\n\"Shouldn't I?\" purred Mrs. Asis. \"We're two women now. Both enjoying the same lover. The same sexy futanari.\"\n\nI was confused about what was going on. I couldn't see anything but Mrs. Asis's beautiful, bubbly butt right before my eyes. Then I heard something wicked. The unmistakable sound of a mother kissing her daughter.\n\nIncest.\n\nPita's pussy clenched down hard on my cock as she slammed down my girth. I moaned into her mother's cunt, this wild heat surging through me. I groaned, my hands grabbing Mrs. Asis's thighs as I heard them kissing. Smooching. It was wet and naughty and delightful.\n\n\"Kiss your daughter,\" I moaned into the older woman's cunt. \"Oh, Mrs. Asis, incest is so hot! Love her!\"\n\nMrs. Asis purred into the kiss she shared with her daughter, her silky bush teasing my lips. I thrust my tongue into her folds, fluttering up and down, caressing her, teasing her, wanting to make her cum so badly.\n\nThis naughty, aching passion seized me utterly. I groaned, my tongue darting through her folds. I danced and fluttered, scooping out all the wonderful cum and pussy juices I could as mother and daughter loved each other.\n\nThen their kiss broke. \"Mam\u00e1,\" breathed Pita. \"That was...\"\n\n\"Wonderful, mi gatita?\"\n\n\"Yes!\" Pita's cunt clenched down on me as she slammed down my cock, building that wonderful ache at the tip of my cock. \"Mierda, this is naughty.\"\n\n\"Mmm, why don't you come suck on my nipple? Just like you did as a babe.\"\n\nThe angle that Pita's pussy gripped my cock shifted as she leaned over. I gasped as I heard the naughty sounds of suckling. My futa-dick throbbed, my orgasm swelling faster and faster at hearing these taboo sounds.\n\nThey were incredible. I thrust my tongue deep into Mrs. Asis's cunt. I swirled around inside of her, searching for any more of my cum while her daughter suckled at her nipple. It was so hot. So wild. My cunt clenched.\n\nVisions of suckling on my own mother's nipple popped into my mouth.\n\n\"Yes, yes, mi gatita,\" cooed the MILF. She seemed to be rocking and swaying. Pita's arms went around her, clutching her tight. \"You're such a wonderful daughter. Mmm, you just love your Mam\u00e1's nipple.\"\n\nPita whimpered in delight, her pussy growing hotter and hotter.\n\nMy tongue exploded in activity. With no more cum to lick out, I was fluttering up and down the MILF's slit, teasing her labia and clit. I brushed her hard bud. Her butt-cheeks clenched before my face. She shuddered, grinding her yummy twat on my face.\n\nHer juices grew hotter and hotter. They almost sizzled on my tongue. Her cream flowed, threatening to drown me.\n\nIt was wonderful. I reveled in them. I drank them down, the cream coating my tongue and throat. She tasted so incredible, my taste buds lighting up with delight. My futa-dick throbbed and ached in my friend's cunt as she rode up and down me, her silky walls driving me closer and closer to my eruption.\n\nMy pussy tightened.\n\nMy ovaries brimmed.\n\n\"Oh, mi gatita, yes!\" the MILF moaned. \"Keep suckling, and Jenny... Ooh, you sexy futa. That's so good. You're both driving me wild.\"\n\n\"Cum!\" I moaned, my hands squeezing her thighs.\n\nHer daughter sucked hard on her nipple.\n\n\"Yes!\" The MILF groaned. Her body shook. Her hips moved from side to side. She ground her cunt on me. \"You both are such sexy kittens!\"\n\nHer pussy juices gushed out of her pussy. They bathed my face. I drank them down, loving her tart delight as she exploded in passion. Her daughter slammed her pussy down my cock, engulfing every inch of my dick.\n\nThis wonderful passion built and built in me. I groaned, the powerful ache nearing that point of explosive release. My body trembled and convulsed. I lapped up the mother's juices while the daughter slid up my cock, squeezing around me.\n\nI exploded.\n\nI fired my cum into my friend's pussy. My own twat writhed and spasmed. Juices gushed out, bathing my thighs. The waves of delight rippled through my body, mixing with the rapture surging out of my futa-dick.\n\n\"Yes, yes,\" I moaned into Mrs. Asis's married twat.\n\n\"She's cumming in me, Mam\u00e1!\" gasped my friend, her pussy convulsing and spasming around my cock, milking me.\n\n\"Both of you are such sexy kittens!\" gasped the married MILF, grinding her cumming twat on my hungry mouth.\n\nThat wonderful bliss pumped out of my cock and through my body. I savored it, licking and lapping up the tart juices pouring out of the MILF's pussy. My own cunt spasmed while Pita's amazing twat spasmed her silky flesh around my futa-dick, drawing out all the cum from my ovaries.\n\n\"It's so exciting to feel, isn't it,\" moaned Mrs. Asis. \"She fires so much fun. More than a man.\"\n\n\"Wow,\" groaned Pita. \"She was my first and... Ooh, yes, she's still firing in me.\"\n\n\"I'm almost dry!\" I groaned, rushing towards the peak of my orgasm. I spasmed as I fired a final spurt into my friend's snatch.\n\nI panted into Mrs. Asis's pussy as I came down from that wonderful orgasm. I licked and lapped at her cunt, savoring the taste of her. My tongue darted into her folds, teasing her. She trembled atop me, grinding her cunt on my mouth.\n\n\"Mmm, she's such a hungry thing,\" panted Mrs. Asis. \"Oh, yes, yes, and you're such a sexy girl, mi gatita.\"\n\n\"I can't believe I kissed you,\" groaned Pita, her pussy's spasming slowing. \"You're my mother.\"\n\n\"I know, incest is awesome!\" I gasped.\n\n\"Yes, it is,\" purred Mrs. Asis. \"Makes me want to do something naughty with you.\"\n\n\"What?\" Pita asked, her cum-filled cunt squeezing down on my still-hard dick.\n\nThe MILF leaned forward. I heard kissing, mother and daughter smooching with wet passion. I shuddered, lapping lightly at Mrs. Asis's tart twat. Then I groaned as the MILF pushed her daughter off my cock, the pair of them leaving me.\n\nPita ended up on her back between my thighs, her mother on top. The pair were kissing wildly. I sat up, my futa-dick soaked in Pita's juices, my mouth and cheeks with the MILF's. I just had a hot, incestuous threesome, and things were getting naughtier.\n\nI could see both their pussies, Pita's shaved and dripping with my cum, her mother's surrounded by a dark-brown bush soaked in her juices. They were kissing and rubbing together. It was so hot to watch. I stared at the MILF's ass.\n\nI grinned, a wicked idea popping into my head.\n\n\"Mmm, look at you two go,\" I purred, so excited. If they were okay with incest, maybe I could bring around the fact my secret lover was my little sister. The ideas burned through my mind as I watched them kiss. \"You two look so hot together. Two hot, Latina beauties kissing. Ooh, Mrs. Asis's, your big boobs are pressed into your daughter's smaller mounds.\"\n\nMrs. Asis broke the kiss and glanced at me. This naughty gleam burned in her brown eyes. \"I bet you want to lick my daughter clean like you did me.\"\n\n\"I wouldn't say no,\" I said, my futa-dick throbbing. \"It's hot licking my cum out of a girl's pussy.\"\n\nPita giggled. \"I bet you'll be having lots of opportunities to do that. What with you dating Wendy, all our friends wanting to fuck you, and that mysterious lover you have...\" My friend stared at me, this strange look crossing over her face.\n\n\"What?\" I asked.\n\n\"Nothing,\" Pita said, shaking her head. \"You're just going to get so many chances to eat cum out of girls' pussies.\"\n\n\"True,\" purred Mrs. Asis. \"But how many chances will I get to lick her cum out of a girl's pussy.\"\n\nPita glanced at her mom. \"Wait, what? You want to go down on me?\"\n\n\"Why not?\" said Mrs. Asis. \"We've kissed. You sucked on my nipple. We're rubbing our cunts together right now. Why shouldn't I try out going down on you? I've never eaten out a pussy. My daughter's sounds like the perfect place to start.\"\n\nThis incestuous thrill shot through me. My pussy clenched. I was so eager to witness this. My heart pounded in my chest as the MILF slid down her daughter's body. Pita gasped in shock. She stared at me, her eyes wide. I grinned at her, so glad she could have a fun time. Her mother smooched lower and lower, cupping those round breasts.\n\n\"\u00a1Mam\u00e1!\" gasped Pita as her mother engulfed a nipple. \"Oh, wow, that's... Ooh, that's kinky of you. You're sucking on my nipple, Mam\u00e1.\"\n\n\"Mmm, you might be right,\" purred the MILF.\n\n\"\u00a1Mierda!\" Pita squirmed as her mother sucked and nibbled on hat brown nub. It was so hot to watch. My cunt clenched. Naughty heat flooded through me. It melted down to my snatch. My dick twitched and throbbed. I bit my lower lip, the pleasure beating faster and faster up my dick.\n\nIt dripped with my pussy cream.\n\nMrs. Asis squeezed both her daughter's round tits. Pita's face twisted in delight. She gasped and moaned as her mother went lower and lower, kissing down her breasts to the under slope. The MILF licked at her daughter's brown skin, flicking her tongue against that naughty flesh.\n\n\"God, you two are so hot,\" I groaned.\n\n\"Right,\" moaned Pita. \"This is hot. You're right, incest is amazing!\" My friend glanced at me, her eyes smoldering.\n\nI grinned at her, my futa-dick throbbing and aching as the MILF went lower and lower, smooching down her daughter's stomach. That delicious rump waved in the air. Mrs. Asis had an amazing ass. My pussy-lubed dick throbbed.\n\nI just had to do something wicked and naughty. Something that would be so hot and wrong all at the same time. I moved behind the MILF, kneeling on the pillows. Her rump came closer and closer as she smooched lower and lower down her daughter's body.\n\n\"\u00a1Mama!\" gasped Pita. \"You're really going to eat me out.\"\n\n\"Mmm, I'm going to devour all the cream out of mi gatita's little pussy. You're full of all that futa-milk.\"\n\n\"\u00a1Madre de Dios! You're so naughty!\" Pita stared at her mother. \"Do it! Eat me out. Lick all of Jenny's cum out of me.\"\n\n\"Yes,\" I panted, my dick hard. The MILF's ass was almost in range. She moved the last few inches backward. Her face must be nuzzling between her daughter's thighs now.\n\nPita gasped, her entire body shuddering. I knew that bliss. She was getting eaten out by her mother. Incest blossomed before my very eyes. It was such a hot sight to witness. My futa-dick twitched and throbbed. I had to be in her. Fucking her.",
        "I pressed my dick between the married MILF's plump butt-cheeks. Her brown flesh contrasted with my ivory shaft. I moved my cock down and down, searching for that puckered opening. My virgin pussy clenched, juices dribbling down my thighs.\n\nI found that asshole and grinned. I pressed against Mrs. Asis's backdoor. She cooed into her daughter's snatch, pressing her rump back into me. Her anal ring just started to part. Pita stared at me, trembling as she ground on her mother's face, pleasure crossing my friend's expression.\n\n\"Are you going to fuck her pussy?\" moaned my friend. \"Are you going to fuck my sexy mother's cunt?\"\n\n\"Nope,\" I said and pressed forward.\n\n\"She's at my asshole!\" panted the MILF, her anal ring surrendering to my pussy-slicked dick. \"Ooh, yes, yes, she's entering me.\"\n\n\"Hot!\" hissed Pita. \"Do it, Jenny! Bugger my mother!\"\n\n\"My sexy kittens!\" groaned Mrs. Asis.\n\nHer asshole engulfed the tip of my cock. It was incredible to slip into her married bowels. I went deeper and deeper into her. I groaned, my heart pounding at the thrill of invading her tight and juicy hole. The pleasure pulsed through my veins.\n\nHer bowels gripped me. That wonderful heat swallowed inch after inch of my cock. I groaned as I slid into her depths. I went further and further into her bowels. It was an incredible delight. A passion that had my cunt clenching. Aching.\n\n\"Mrs. Asis!\" I gasped as I slid into her bowels.\n\n\"Ooh, yes, yes, you're invading me!\" gasped the MILF into her daughter's cunt.\n\n\"Yes, yes, bugger my mother's ass!\" Pita moaned. Her breasts jiggled as she humped against her mother. \"Mierda, this is so fucking hot! My mom's licking your cum out of my twat.\"\n\n\"Good,\" I panted, pulling back my cock.\n\nMy breasts jiggled as I slammed back into the MILF's depths. It was incredible to be in her bowels. Her tight, velvety sheath gripped me as I pumped in and out of her. I rammed forward, my virgin cunt clenching. My pussy lips smacked into her rump.\n\nThe pleasure built and built in my ovaries with every thrust. A wonderful delight brimmed at the tip of my cock. I couldn't wait to fire all that jizz into the married MILF's asshole. It would be intense. A wild experience.\n\nI groaned, my futa-dick pumping in and out of her bowels. I thrust hard and fast, my tits heaving as my crotch smacked into her rump. My fiery hair danced about my head. My red bush rubbed into her ass every time I slammed into her.\n\n\"Yes, yes, fuck my ass, you sexy futa!\" moaned Mrs. Asis. \"That's good. You're so huge. \u00a1Madre de Dios! I'm going to cum from getting ass-fucked!\"\n\n\"Good,\" panted Pita. \"Because I'm going to cum from you licking my pussy clean. Yes, yes, I think there's still some of her jizz in me, Mam\u00e1! Get that tongue in me. Just like that. I love it!\"\n\nThe incestuous pleasure on her face was incredible to stare at. I licked my lips, loving the sight as I pumped my futa-dick in and out of her mother's asshole. I slammed deep and hard, the pressure swelling at the tip of my cock.\n\nI came closer and closer to erupting.\n\nTo spurting all that wonderful jizz into her bowels.\n\nI would flood her with so much spunk. It would erupt out of me. This mighty tidal wave of bliss that would spurt over and over into her depths. It would be incredible. My pussy clenched with every thrust.\n\n\"Mrs. Asis!\" I moaned. \"Ooh, your asshole is so tight.\"\n\n\"Because your dick is a monster!\" moaned the MILF. \"I love it! Ooh, yes, yes, just hammer that cock into me. I'm going to cum!\"\n\nHer head moved as she ate her daughter out. I loved the sight of her curly, brown hair dancing as she did it. Her bowels squeezed and clenched about my dick, bringing me closer and closer to the brink.\n\nThe bed rocked. Creaked.\n\nWe all gasped and moaned.\n\n\"\u00a1Mierda, Mam\u00e1!\" howled Pita. \"I'm cumming. \u00a1Mierda!\"\n\nHer body bucked as she flooded her mother's mouth with her pussy cream. I watched my friend's tits heaving while I fucked her mother's asshole. I pounded Mrs. Asis as hard as I could, my own twat burning with my impending orgasm.\n\nMrs. Asis purred in delight, her bowels squeezing around me. I rammed into her and gasped as her flesh spasmed. Her asshole convulsed like a velvety pussy, massaging my withdrawing dick. The aroma of her tart pussy juices rose through the air, filling my nose.\n\n\"Cum in my asshole, futa-kitten!\" moaned Mrs. Asis. \"Yes, yes, just ram into me and flood me with all that cum!\"\n\n\"I will!\" I moaned, dizzy from the pleasure surging through me. \"It's so incredible. Your mom's asshole is tight.\"\n\n\"So fucking cum in her!\" Pita howled, bucking on the bed. \"Yes, yes, yes! Lick up all my cream, Mam\u00e1!\"\n\n\"So good!\" the MILF panted. \"I love mi gatita's pussy!\"\n\nI slammed to the hilt to Mrs. Asis's spasming asshole and erupted.\n\nMy pussy convulsed as cum fired out of my dick. The powerful blasts of jizz pumped over and over from my cock. I groaned, the sensations pummeling my mind. They were intense. Had me dizzy. I swayed, my tits bouncing and heaving.\n\nThe pulses of rapture hammered into my mind while the waves of ecstasy drowned my thoughts. The two delights gave me such rapture. My dick erupted over and over. My cunt spasmed, flooding my thighs with my cream.\n\n\"I love being a futanari!\" I howled as I fired the last blast of my cum into her.\n\n\"Yes!\" gasped my friend. \"Oh, Jenny, this is so hot. This isn't how I thought our study session would go.\"\n\n\"No, you were going to be a selfish brat and not share with your mother,\" Mrs. Asis said, lifting her had, her bowels' writhing about my dick slowing and stopping. \"Mmm, Jenny, you can come over and study whenever you want.\"\n\n\"Yes!\" Pita gasped.\n\nThe MILF crawled forward, her asshole sliding off my dick. I groaned as she popped off, my shaft free and bobbing before me. My girl-cock swayed, my breasts rising and falling as the pleasure died down inside of me.\n\n\"Now, I have to go make the fried rice,\" said the MILF as she headed for the doorway. \"Dinner will be in twenty minutes. You two, don't get too carried away without me.\"\n\n\"We won't, Mam\u00e1,\" panted Pita, still lying on her back, her mother padding down the hallway to the stairs. \"That was the best. I just had sex with my mom, Jenny.\"\n\n\"I noticed,\" I said. \"I was here, after all.\"\n\n\"And you...\" She sat up on her elbows. \"'Incest is hot.' You're boinking someone in your family. That's who your secret lover is.\"\n\nMy cheeks burned even as a smile crossed my lips.\n\n\"Yes, yes, it has to be one of the twins, right?\" Her eyes widened. \"Is it both of them?\"\n\n\"It's Ally,\" I said, feeling so relieved to tell my friend. \"She was teasing me then we were wrestling and then we were kissing.\"\n\n\"Oh, wow,\" Pita said. \"I thought you and Allie hated each other. She's such a brat.\"\n\n\"She didn't know how to express her incestuous desire for me,\" I said. \"Naughty, right.\"\n\n\"Mmm, yes,\" purred Pita. \"Very.\" Her eyes stared at my cock. \"Mierda, we just had a threesome with my mom. That's so weird.\"\n\n\"And I guess we can have a threesome with my sister, too,\" I said, arching an eyebrow.\n\nPita grinned at me, this naughty glint in her eyes. \"You know, I never did get to give you that blowjob.\"\n\nShe latched her mouth onto my cock and sucked with hunger. I groaned as she slid her lips over my dirty cock, cleaning her mother's asshole off my dick. My cunt clenched at how wicked this was. I leaned back on the bed as her curly, brown hair fell over my thighs.\n\n\"Pita!\" I squealed, my pussy clenching in delight.\n\nShe sucked hard, polishing my futa-dick. It was so naughty. Fresh from her mother's asshole to her mouth. I groaned as Pita's hot lips worked up and down my shaft. My spongy crown brushed the back of her throat.\n\nHer fingers slid through my fiery bush to find my virgin pussy. She rubbed up and down my labia, teasing me. Her digits felt so wicked on me. A warmth rushed through my body. I groaned, my hands clenching from the heat flooding through me. My pussy tightened from the stimulation.\n\nI bit my lip, the pleasure dancing and swirling in the depths of my twat. I shuddered, my dick twitching and throbbing in her mouth. My dick pulsed with the bliss. My toes curled, my juices flowing out of me. I groaned as she bobbed her head up and down my shaft.\n\nHer tongue danced around my cock's crown. She teased me. Pleased me. It was an incredible pleasure to experience. My fingers gripped her curly hair. Moans burst from my lips. My round breasts swayed as she suckled with hunger.\n\n\"Oh, wow, Pita,\" I moaned. \"Ooh, yes, yes, you're just cleaning all your mother's juices off my dick.\"\n\nShe purred around my futa-cock.\n\n\"And keep rubbing my pussy lips. That feels incredible. You're such a great friend. My best sex friend in the world. BSFF!\"\n\nShe squealed in delight and sucked harder. My pussy clenched. Her digits rubbed faster up and down my cuntlips. She teased them, sending tingles reaching up my shaft to the tip of my clit-dick buried in her mouth. Her tongue danced around it.\n\nThe pressure soared in my ovaries. The bed creaked as I squirmed into the headboard, the lacy pillows behind me soft on my shoulders and back. My pussy felt hotter and hotter with her every suck and stroke.\n\nMy hand tightened in her hair as she teased me. I stared into my friend's eyes as she polished my dick clean of her mom's asshole. Incest was the best. I had naughty ideas involving my sister. My pussy clenched, my juices flowing. They leaked down to my rump.\n\n\"Ooh, Pita, you're such a naughty friend,\" I panted. \"I'm so glad we're sex friends. It's amazing!\"\n\nShe winked at me then her fingers rubbing at my pussy went south. She crossed my taint. I gasped as she found my asshole. She rubbed my cream into my sphincter, teasing me. I groaned at that naughty touch.\n\nShe stroked around my asshole and then pressed her finger against my anal ring. My futa-dick throbbed in her mouth as my sphincter widened. My asshole swallowed her pussy-lubed finger. This heat stabbed into my depths and then melted up to my cunt.\n\nTo my ovaries.\n\n\"Such a dirty girl!\" I panted. \"Oh, Pita, yes, yes!\"\n\nMy bowels clenched about her digit. She pumped her finger in and out of my asshole. She worked it into the depths then slid it almost all the way out. I groaned, my heart hammering in my chest. My futa-dick throbbed and ached in her mouth.\n\nShe sucked so hard on me. She did such wicked and naughty things to me. I groaned, my heart beating faster and faster. She rammed her finger deep into me. She wiggled it around. I shuddered, biting my lower lip as the pleasure built.\n\n\"I'm going to cum,\" I moaned. \"I'm going to fire so much jizz right down your throat.\"\n\nShe winked at me as she kept sucking. She nursed hard, her cheeks hollowing while she buffed my dick clean of her mother's asshole. I whimpered, my cunt clenching. My virgin pussy ached to be penetrated like my asshole was.\n\n\"Pita!\" I gasped.\n\nShe jammed a second finger into my asshole.\n\n\"Oh, my god, Pita!\" I howled and came.\n\nIt was incredible. My cock fired blast after blast of my jizz into her mouth. A torrent of cum that flooded into her. My toes curled. The pleasure surged through me. My body bucked and shuddered. My cunt clenched and spasmed. My asshole writhed around her two fingers.\n\nShe gulped down my cum as it fired into her mouth. She swallowed it all as the bliss burned through my mind. I bit my lower lip, my pussy spasming with more and more passion. The dual delights rippled through me.\n\n\"Oh, my god, yes, Pita!\" I moaned, squirming on the bed, my pussy juices soaking the bedspread. The air smelled of my sweet pussy juices. \"Oh, you're amazing. Just the best. You know that?\"\n\nShe winked at me as she sucked out the last of the cum, my body buzzing as I came down from my orgasmic high. I felt so warm and bubbly. My toes curled and my round breasts rose and fell. I stretched my arms up into the air, feeling like a billion bucks.\n\nIt was good timing on our part. I came down Pita's throat right before her mom called us down for dinner. I was starved. Since her father wouldn't be home for at least another hour, we didn't bother dressing. It was naughty having dinner with my friend and her mom naked. All of us were just giggling and laughing and touching each other.\n\nI had a feeling Pita and her mother were going to be doing such wicked things when Mr. Asis wasn't around. It sent such a wicked thrill through me thinking about it, my poor dick was hard and throbbing by the time we finished.\n\nBut there wasn't time for fooling around. We had to get dressed and Mrs. Asis had to wash some sheets. I kissed them both goodbye and promised to be back to \"study\" with Pita later this week, Wednesday or Thursday.\n\nI burst out into the evening, twilight falling, and headed home with a big hardon tenting the front of my panties. It made walking a bit of a challenge, but I managed it. My panties really didn't fit right. They were too tight.\n\nI liked my panties. It would be a shame to have to buy all new underwear. What could I even have? Icky boys' boxers. That didn't sound great at all. Maybe I could get away with boy shorts style underwear. Those could be cute.\n\nPink and frilly but roomy.\n\nI walked in and Allie squealed, \"Jenny!\"\n\nShe flew out of the living room, her strawberry-blonde pigtails streaming behind her. My little sister threw herself into me and hugged me with a fierceness. I was so aware of my hardon rubbing into her, my pussy growing damp.\n\n\"Wow, you two sure are getting along,\" Mom said, peeking in from the living room. She was wearing a t-shirt and a pair of sweat pants. I could tell by the way her breasts moved beneath it, she wore no bra beneath.\n\n\"Yeah, we are,\" I said, my sister squirming before me like she had ants in her pants. \"She's been so helpful.\"\n\n\"Yep,\" said Allie. \"I just want to help her out. We were talking and talking so late about her changes and then we fell asleep in the same bed. It was neat. Like we were kids again.\"\n\n\"Yeah, I saw you,\" Mom said. She had this beatific smile on her face. \"Wish I had thought to snap a picture. You two looked like angels.\"\n\n\"Mom,\" I gasped, my cheeks burning. When she had checked in on us late last night, I was in the middle of cumming in my little sister's pussy.\n\n\"I would have put it on social media,\" said Mom. \"Ooh, it's back on.\"\n\nI could hear Wheel of Fortune's music in the background. Mom watched it every night followed by Jeopardy. The twins always got the questions right when they watched it. It was hit or miss for the rest of us.\n\n\"Something happened over there,\" said Allie, her voice a low whisper.\n\n\"Mmm, how would you like to come study with me on Wednesday or Thursday?\"\n\nAllie's eyes widened. \"Pita knows.\"\n\nI nodded my head. \"And that's not all, it's--\"\n\n\"Girls, you're missing the next phrase,\" Mom said. \"It's got a lot of letters. It's going to be a good one.\"\n\n\"In a minute, Mom!\" Allie said in obvious frustration. Then she glanced at me. \"Well?\"\n\n\"Mrs. Asis came on to me,\" I said. \"Big time. And Pita caught us.\"\n\n\"What were you doing?\"\n\n\"Mrs. Asis was riding me,\" I said. I gave my sister a hurried rendition of what happened, her hand rubbing at my cock through my skirt. I groaned, so hard and erect from her teasing. I wanted to do such naughty things with her. \"And then she realized my secret lover must be someone in the house, so I told her.\"\n\n\"A mother and daughter,\" whimpered Allie. \"That's so hot. Sounds like you were having all the fun.\"\n\n\"Hence why you need to come study with us,\" I said as she groped me.\n\n\"Girls,\" Mom said, appearing back in the doorway. \"You missed it. I almost had it, too.\"\n\nAllie jerked her hand away and spun around, her pigtails swaying. \"Uh, bummer, Mom. We, uh, have to go up and talk. I need some help with my homework.\"\n\n\"And you're not asking the twins?\" Mom asked.\n\n\"They're studying,\" Allie said. She grabbed my hand. \"Jenny had this class last year. She should be able to help me.\"\n\n\"Oh, okay,\" Mom said. \"Oh, that reminds me, I want to drive you to your college again, Jenny. And don't make any plans for after school.\"\n\n\"Oh?\" I asked, blinking while Allie tugged on me, impatient.\n\n\"Yeah, I want to take you shopping.\" She glanced at my skirt and her cheeks reddened. \"Get you some clothes that are more comfortable for you to wear. New panties, probably, and maybe some boy's jeans.\"\n\n\"Oh, yeah,\" I said, blushing. Shopping with my hot mom sent naughty fantasies dancing in my head. Trying on clothes. New panties. Letting her see my hardon... \"Sure, Mom. Thanks. Love you. I have to go. I have a munchkin pulling on me.\"\n\nMom laughed as my sister dragged me away. Allie was clearly eager to \"study.\" So was I. My dick throbbed as she led me up the stairs and to the room. We'd have to be quiet. Maybe if we kissed each other really, really hard we wouldn't make any noise.\n\n\"I can't wait to study with you and Pita!\" she moaned as we reached my bedroom and vanished inside.\n\nMe, too. Being a futa was getting wilder and wilder.\n\nTo be continued..."
    ],
    "authorname": "mypenname3000",
    "tags": [
        "threesome",
        "mother",
        "daughter",
        "futanari",
        "hermaphrodite"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/futas-wild-passion-ch-08"
}
{
    "title": "Still You Want Me Ch. 11",
    "pages": [
        "Acknowledgements: LaRascasse and Oldnakeddad for all the time they've spent editing and improving this story. \n\nThis is a work of fiction and everyone in the story is 18, as should be the readers. \n\n***** \n\n* * CHARLES * * \n\nMy phone extension doesn't ring too often because most of the people who need me sit within ear shot so it's always startling when it does. After jumping slightly in my chair and glancing around to see if anyone noticed, I answer my phone. \n\n\"Charles Gabett speaking.\" \n\n\"You're phone voice is gross. It's not sexy at all.\" \n\n\"Good to hear from you, too, Ryan. Are you having a busy day in Research and Development?\" \n\n\"Always, but I didn't ring your extension to talk shop. Quinn and I want to go dancing tonight. Would you like to come with us? You've been, understandably, mopey for almost two months. No pressure, just come and have some fun!\" \n\n\"It's been five weeks and three days. So, not 'almost two months', but I get your point.\" \n\nIt's been two weeks since Colin and I officially broke up on that abysmal evening outside of the gym. We haven't talked about us at all. It appears he's made his decision and it doesn't appear to be in my favor. I mean, he hasn't said anything to me, anyway. \n\nWe still work well together, but that's it. He doesn't show up at the gym much and Thursday night Karaoke has been postponed until further notice because no one wants to take part in the awkwardness that has overwhelmed our relationship. \n\n\"So? Do you want to come with us? We'll get you drunk! Or not. Whatever you want, but drunk Charles is my favorite.\" \n\n\"Yeah, sounds good.\" \n\n* * * \n\nI'm finally starting to loosen up and Ryan starts being a bitch. \n\n\"I know I said we'd get you drunk, but you should pace yourself a little. Take a break and dance.\" \n\n\"Fine. Whatever.\" \n\nI push the empty shot glass toward him and make my way to the dance floor. The music is loud and the light show is making everything more seductive than normal. The floor is packed with hot bodies and it's hard to tell where one person ends and another begins. \n\nI'm generally unhappy and I want to dance alone, but that doesn't stop company from finding me. Song after song introduces me to a new face I don't want to remember. I humor them by allowing them to dance against me, thinking we're dancing together. Whatever they want\u2014I don't care. The fact I'm not reciprocating doesn't seem to bother them anyway. \n\nIn my mind, I'm completely alone. I dance alone for a while, with countless and nameless nobodies, before a deep, smoky voice breathes against my ear. \n\n\"Jeez, Charles. You're on fire tonight.\" \n\nI know this voice, but it's been a while. I look up and find myself face to face with Mr. tall-dark-and-handsome. \n\nHe has short, black hair, the darkest brown eyes I've ever seen, tanned skin, and a short, clean-cut beard. He's six feet, three inches tall and strong. I'm not sure if I'm happy or nervous that he's here. \n\nI decide not to respond because I have no clue of what to say so I continue dancing. He takes this as an invitation, joins me, and presses his chest against my back as his movements easily sync with mine. The dancing and close quarters feel easy with him. He's the first guy, all night, who hasn't irritated me with his presence. \n\nHe moves his hands to my hips, gently moves with me, and carefully holds us together. Soon, though, he moves one of his hands to my waist, slowly wraps the other around my chest, pulls me closer to him, and completely closes the distance between us. I feel his hardness pressing against my crack as I close my eyes. I hate the fact that everything he's doing feels good. \n\nThe constant rejection from Colin has me feeling completely broken and empty, yet, having these strong arms around me, and feeling his desire for me, feels good...and that terrifies me. The thought of having to move on, at some point, and my future possibly lying with someone other than Colin, also terrifies me. \n\nI close my eyes, again, run my hands over his, and grip them tightly so he won't let go of me. We're not dancing to the music anymore\u2014we're lost in our own embrace. He's still wrapped around my body and grinding himself against me when he surprises, and disappoints, me when he whispers into my ear. \n\n\"Let's take a break, get some water, and then come back.\" \n\nI sigh my disappointment, but nod and let him take my hand so he can lead me off of the dance floor. He's walking toward the bar, but I get his attention and point to the table I'm sharing with Ryan and Quinn. \n\nIt's not uncommon for our table to have a constant rotation of people coming and going because we're all very social, which tends to attract a crowd. Tonight, I don't feel like socializing though. I want to focus on only a few people and tune everyone else out. \n\nAs I approach the table, I'm acutely aware that something's off because Ryan and Quinn look uncomfortable, but I don't have the energy, or patience, to care. Now it dawns on me\u2014they're surprised to see me with someone else. I think they, like myself, were holding out for a miracle with Colin. My having someone else might be making them uncomfortable, but they'll get used to it. We'll all have to get used to it. I decide to pull the band aid off and introduce everyone. \n\n\"Eric, this is Ryan and Quinn. Ryan. Quinn. This is Eric.\" \n\nEric flashes his gorgeous, giant, smile and shakes hands with both of them before putting his arm around me and squeezing me tight against him. \n\n\"It's nice to meet you guys!\" \n\nRyan and Quinn nod and their eyes widen, uncomfortably, as their glances bounce around the table. I follow their line of sight until I land on a, much unexpected, table guest. \n\nTonight of all fucking nights! \n\nI try not to react, but I wish I'd been prepared. Why the heck is he here? I gently touch Eric's chest, as a way of starting this awkward introduction. \n\n\"Eric?\" \n\nI point to the unexpected table guest and complete the introduction. \n\n\"Colin.\" \n\nEric leans into me and asks in a hushed whisper. \n\n\"The Colin?\" \n\nI nod. \n\nYes, the Colin. \n\n* * COLIN * * \n\nRyan and Quinn had invited me to go dancing with them this evening, but I had to decline because my Uncle Dan (my mother's childhood friend) was coming to town. Uncle Dan had to postpone at the last minute, for one reason or another, so I decided to surprise Ryan and Quinn by coming unannounced. \n\nI feel like a member of Oprah's giveaway episodes. You know the ones. Where she's screaming at the audience, You're surprised! And you're surprised! And you're surprised! Everybody's fucking surprised! \n\nRyan and Quinn are surprised when I show up. In fact, they look downright ghostly when they see me. \n\nI'm surprised when I see Charlie dancing with man after man as they line up for their turn to use him as their own personal scratching post. \n\nI'm surprised when, suddenly, one man replaces them all and more surprised when they leave the dance floor...holding hands! \n\nI'm very fucking surprised to find out it's Eric, aka Grindr Guy, aka the fucking devil! All of a sudden, I miss Shorty McWasn't-so-threatening-after-all. \n\nCharlie's surprised when he realizes I'm at the table and Eric's surprised when he hears my name. \n\nSur-fucking-prise! \n\nI can't be mad, though. I'm not allowed to feel anything because it's my fault. I have to sit here and take my punishment. Is this how Charlie felt during all of those months I was with Jesse? Shitty, shitty, shitty? \n\nFuck. I can't blame the men who lined up to dance with Charlie and I can't blame Eric for trying to weasel his way in (although I hate him!). \n\nCharlie's not wearing his normal club attire, nope, not tonight. He looks more suited for a casual co-ed baseball game. He's wearing a tight pair of khakis and a white, quarter-length, baseball shirt with maroon sleeves from a previous year ClarkCo. softball tournament. He looks fucking amazing...locker room fantasy type stuff! His blonde hair is sweaty and messy and I don't want to think of all of the fingers that have contributed to that. \n\nCharlie's a damn specimen. \n\nHe's staring at me, but his blue eyes are dull, heavy-looking, and lacking their normal shine and excitement. I know it's all my fault and I hate seeing him like this! He's not supposed to look sad. Fuck! I need a drink! So I make an offer. \n\n\"How about I buy us a round of shots?\" \n\nEveryone accepts. Make it two rounds of doubles. Stat! \n\nI've already had three shots, and a drink, while watching Charlie on the dance floor so it doesn't take long for me to feel the additional shots starting to work their magic. My inhibitions are practically nonexistent as I point between Charlie and Eric. \n\n\"So, you two, huh?\" \n\nI can see Ryan and Quinn covertly shaking their heads. \n\nShut up Colin. Shut the fuck up. \n\nBut I don't listen. No, that'd be so unlike me. I never say stupid shit. \n\nEric has a certain look on his face. What do people call it? Cat got the canary? Something like that. He's a smug son-of-a-bitch. I resolve to the fact that I'm going to punch him. I know he'll definitely knock me the fuck out, but I'm still going to punch him. How fucking dare he? \n\nHe squeezes Charlie and pulls him closer. \n\nI take a deep breath. Jesus, keep me calm. I'm going to hit the bitch! \n\nI clench my fist. I have no clue if I'm doing a good job of hiding my facial expressions, but hell, I don't know if I care! \n\n\"We'll see! I've wanted him for a year, now.\" \n\nHis shit-brown eyes are full of hope and sparkling like a fucking stupid poem about starry nights, or some shit such as that, as he smiles at Charlie. Do you know stars are balls of burning gas which are billions of miles away? I learned that watching The Lion King. So yeah, Eric's eyes look gassy. \n\nMuch to my disappointment, Eric (and his gassy poop eyes) isn't done talking. \n\n\"He's been unavailable so imagine my excitement when I saw him dancing, alone, tonight.\" \n\nHe crosses his fingers in the air and smiles brightly. \n\nOne can only hope! \n\nI narrow my eyes at him and silently hope his gassy eyes explode and he dies. I glance at Charlie, but I can't read his face. He's watching me as intently as I was watching Eric. \n\nKeep your friends close and your enemies closer. \n\nI feel rage rushing through my veins as Eric whispers something into Charlie's ear. I can't believe Charlie is falling for his shit, but he is! In fact, he's allowing Eric to lead him back to the dance floor so they can dance to Gettin' Jiggy Wit It. That's our song! \n\nI realize I'm holding my breath and need to breathe before I pass out. As soon as Charlie and Eric disappear, Ryan starts to yell at me. \n\n\"Dude! You need to chill the fuck out!\" \n\n\"Why the hell did you invite me here if Charlie was going to be here with...him!\" \n\nI dramatically point toward the dance floor. \n\n\"We didn't know! We invited you and you told me you were busy so we invited Charles. You showed up out of the blue and you're making things awkward for everyone!\" \n\n\"What the fuck am I supposed to do?\" \n\n\"Go home? I don't know! Colin, you had your chance. A stupid, long, ridiculous chance! It's almost been a year since you started working together. I wanted you two to work things out and we've been rooting so hard, but I don't know anymore.\" \n\nThey both look apologetic and Quinn adds. \n\n\"We're not going to give you advice because you've made your choice. We only want Charlie to be happy, again. You have to let him go!\" \n\nI can feel my chest tighten. This isn't how I thought this evening was going to go. Defeated, I sink into my spot. \n\n\"But I don't want to.\" \n\nRyan points to the dance floor where Charlie and Eric are dancing. Eric's towering over Charlie, whose eyes are closed and is allowing that monstrosity of a man to cradle him. \n\n\"It's too late, Colin.\" \n\nBleh. Charlie was never supposed to find someone else. \n\n\"Fuck this!\" \n\nDespite a stream of objections from the table, I get up and walk toward the dance floor. I have thirty seconds to figure out a plan and, hopefully, it'll be better than every stupid plan I've had before. I reach the spot where they're dancing and pull on Charlie's arm. \n\n\"Can we dance or talk?\" \n\nI plead with my eyes. Please, don't say no. Eric answers on behalf of Charlie. \n\n\"We're actually dancing right now.\" \n\nNo one asked you, Eric! \n\nMy eyes are locked on Charlie's and his eyes are locked on mine, but they're unreadable. I silently beg. \n\nPlease talk to me. \n\nHe nods and I follow him off of the dance floor. I thought we'd go outside and maybe talk somewhere private, but Charlie walks back to the table. It's more public than I'd like, but I don't really have a leg to stand on at this point. \n\nI almost immediately realize Eric, evidently not keen on the idea of letting Charlie go, has followed us. I understand his thoughts. Unlike me, Eric is doing something about it. I can't tell him to scram because, for all I know, he's Charlie's new boyfriend. The thought curdles my stomach. Charlie's looking at me intently. \n\n\"What's up Colin?\" \n\nI went into this without a plan and I've successfully gotten him off of the dance floor. Now it's time for the smooth talking. \n\n\"Please, don't. Please, please don't!\" \n\nBegging might work, too. \n\n\"Don't what? I haven't done anything!\" \n\nI nervously look at Eric and then back at Charlie, who rolls his eyes and frustratingly asks. \n\n\"Are you serious? Is there anything you want to say to me?\" \n\n\"Yes. There's a lot of things I want to say!\" \n\nBut I don't want to have this conversation with a table of people. Something flashes in his eyes, but it's gone before I can catch it. \n\n\"Okay, say it!\" \n\nHe crosses his arms and waits for me to continue. \n\n\"Please, come home with me?\" \n\nMr. Perfect Teeth interrupts. \n\n\"Don't fall for this Charles! He's only pissed because I'm here. He wouldn't be talking to you if he wasn't jealous.\" \n\nNo one's talking to you, Eric! \n\nCharlie doesn't take his eyes off of me. His eyes are asking me if it's true. \n\n\"That's not true. I promise. I was planning on talking to you.\" \n\nEric runs his hands over Charlie's arms and continues to interfere with my life. \n\n\"Charles, don't. Come home with me. I've been there for you every time you've needed me. I've never denied you and I never will.\" \n\nI don't like Eric touching Charlie and my only saving graces is that Charlie still hasn't broken eye contact with me. \n\nPlease, don't leave with him! \n\nEric is mauling Charlie with his hands. Fuck, his hands are gigantic! I can't take it anymore. \n\n\"Dude, seriously! Fucking cut it out! Can you not touch him for two fucking minutes! We're trying to have a conversation!\" \n\nBoth Eric and I look at Charlie for his response. \n\nEric decides to stop mauling him and, instead, firmly wraps his arm around Charlie's waist, anchoring them together. \n\nEven if I wanted to do something about Eric's excessive need to touch Charlie, I can't. The guy's arm is as big as my thigh! \n\n\"Colin, I wish I could believe you. I want, more than anything, to believe you, but the only time you ever fight for me is when you're convinced you're losing me or when you're jealous, or both. Tomorrow, when you feel safe, again, I'd find out you're still not sure you can climb out of your hole. At this point, I don't know if I care.\" \n\nHe looks at his phone and leaves the club with Eric trailing behind. I immediately feel my phone vibrate. \n\n[Charles] Apple Music: Two Feet-I Feel Like I'm Drowning. \n\n\"He sent me a song?\" \n\nI read it outload to no one other than myself, but Ryan and Quinn hear me. \n\n[ I feel like I'm drowning (ah-ah, drowning) \n\nYou're holding me down (holding me down) \n\nYou're killing me so (so slow, oh no) \n\nI feel like I'm drowning (ah-ah drowning) \n\nMy life's ok, yeah Just when you're not around me ] \n\nRyan and Quinn look at each other and cringe. \n\nFuck! \n\nHe's gone for real this time and there's nothing I can do. Instantly, and without my consent, the tears start falling. \n\n* * CHARLES * * \n\nEric reaches down and grabs my hand as we walk out of the club. I can see him looking at me and measuring my response. \n\nHow do I feel about this? I don't know. All I can think about is Colin's face when he saw me with Eric, when he begged me to go with him, when I declined, the cringe every time Eric touched me, and the hurt and heartbreak when I left. I wasn't expecting to see him tonight nor was I expecting to see Eric, either! What a terrible night to run into Eric. I'm thankful as he interrupts my thoughts. Anything to stop me from thinking about Colin! \n\n\"It's true, you know.\" \n\n\"Huh?\" \n\n\"I've liked you since the first time we were together. Grindr's weird so I couldn't exactly tell you. Every time you reached out to me, I got excited. Seeing you tonight, alone\u2014\" \n\nHe affectionately squeezes my hand. \n\n\"It made my whole year. I want to be there for you. I want to make you forget him.\" \n\nHe turns so we're facing each other and I can see his smile is sincere and happy. Eric is a cool guy. He's very sexually talented and he's incredibly handsome. Dammit! \n\nI visibly cringe. \n\n\"Eric\u2014\" \n\nIt doesn't take more than a moment for him to realize what's happening. I can see the frown lines on his perfectly dark skin. \n\n\"Oh. You're going to go back to him, eh?\" \n\n\"No, probably not, but fuck if he's not in my head all of the time. I may not be dating him, but I'm not capable of seeing anyone else, either. I'm too hung up on him! It's not fair to you or anyone else.\" \n\n\"I'll wait! If you want, we can mess around with no strings attached...like before.\" \n\nHis heat and scent are overwhelming me as he moves closer to me. I'd like some physical release. Feeling his hard muscles against me would be a slice of heaven! \n\n\"That'd be awesome and I'd like that\u2014\" \n\nHis face lights up before I have a chance to finish. \n\n\"But it's impossible. You admitted you like me and want more, so no strings is impossible. You'd end up where I'm at, now. Shit, Eric! You are me nine months ago! Run! Run far away!\" \n\nI take a step back to put distance between us and he laughs, but his face is sad. \n\n\"I understand what you're saying. Call me, though, if things change for you. No matter when that might be.\" \n\nHe leans down and gives me a simple, gentle kiss and his short, sexy beard prickles my face. \n\n\"Definitely.\" \n\nI don't wait for him to leave first. Instead, I take the first cab I can find because I want to go home. Tonight wasn't the carefree evening I was promised. \n\n[Charles] Come dancing, you said. It'll be fun, you said. Blow off some steam and forget about Colin, you said. \n\nHis reply is almost instant. \n\n[Ryan] Fuck me. I'm so sorry! \n\n[Charles] I'll bet you are! I'll get you back when you least expect it. Keep one eye open! \n\n[Ryan] Sounds fair. I won't resist. I offer Quinn as a sacrifice! \n\n[Ryan] So, did you go home with Eric? Who, by the way, is a babe! \n\n[Charles] I didn't and yes he is. It's complicated, though. I don't need more complications. \n\n[Ryan] Colin's still here and he's a wreck! Quinn's on babysitting duty. \n\nWhat the fuck do I care? \n\n[Charles] Cool? I'm sorry, I don't know why you're telling me. \n\n[Ryan] I don't know. Fuck! You guys were something! He's an idiot and you deserve better. \n\n[Ryan] Have a goodnight and I'll see you Monday. \n\n* * * \n\nBrett pops up on my caller ID. He never calls, let alone on a Saturday morning. ",
        "\"Charles Gabett.\" \n\n\"Hey, Charles, it's Brett.\" \n\nI try to joke. \n\n\"Hey, what's going on? You never call. What's this about? Should I be worried?\" \n\nBrett laughs and his voice is full of excitement, as if he's trying to captivate an audience. \n\n\"Are you ready to sink or swim?\" \n\n\"Well, currently my whole life is sinking so I'd really prefer to swim or lay on a yacht in the south of France.\" \n\nI try not to mix business with pleasure, but that went out the window with Colin. Now everyone knows my business, especially Brett. \n\n\"Yeah? How'd you like to get away for a few days? A paid workcation?\" \n\nI'm intrigued at the prospect. \n\n\"Tell me more.\" \n\nWe talk a while about traveling solo to the east coast and pitching on behalf of ClarkeCo. It's a small project, but a great opportunity for me on a professional level and I'm confident I can kill it. \n\n\"Awesome, I'm excited for you. A car will pick you up tomorrow morning at eleven. You'll have tomorrow evening to settle in and your first meeting is Monday morning at ten. I'll email you the itinerary, all pertinent information, and the rest of the paperwork will be in the car. Enjoy the trip and I'll see you next Monday!\" \n\nThis is good! The more I think about it, the more pumped I become about branching out for work and a few days away from Colin! This is the true meaning of killing two birds with one stone. \n\n* * * \n\nThe car arrives at eleven, as planned, and I take the company jet to Ohio. It's not New York, but it's where the business is and I'm happy to be away. \n\nIt's a busy three days. Six long and grueling meetings (that I love!) plus a lot of socializing between them. I feel confident and happy the entire time. I actually close two of the deals instantly and make significant progress with one of the others, everyone loves my ideas. Everything looks promising and I'm sure they'll all be finalized, soon. \n\nI can't stop smiling as I hustle through the airport while getting ready to fly home. I love meeting new people, pitching for a company I love, throwing ideas around, talking business...all of it! This is my element! It's not something I like because I was raised around it, it's something I'm genuinely good at and it brings me joy! It's something I'm not willing to give up. \n\nMy heart sinks at the revelation. I board the jet and solemnly sink into my seat. I know I have to let Colin go. I love him more than anyone, but it's not enough and it's time move on. The thought of letting him go pains me and I know it isn't going to be easy. \n\nWhile thinking about all of the good times we had as friends, and as lovers, I almost forget about all of the heartache and pain. \n\nAlmost. \n\nThe memories of our time together and the realization it's officially over becomes too much and, without warning, my eyes start leaking. I'm incredibly thankful I'm alone on a private jet and not sitting on a commercial flight with two hundred fifty strangers. I allow the love and grief to wash over me as I recline my seat and let the tears flow. \n\nIt's time to bury Colin\u2014figuratively speaking, obviously. I'm startled from my moment of grief when I hear my name. \n\n\"Charlie.\" \n\nWhat the fuck! \n\nMy eyes shoot open as fear bursts through my body and my heart rate shoots through the roof! There's no adrenaline spike like being alone in a small, enclosed space, only to realize you're not alone! \n\nFight or flight instincts take over! \n\nMy mind decides flight is the best course of action. I need to get far away, but where the fuck do you escape to on a small plane? I'm literally sitting in a tube of toothpaste with wings! \n\nAt the same time, my body decides I'm going to fight my way out. I'll fight to the death. I hope all of those kickboxing classes pay off! Though, I doubt they will. \n\nAs I jump up, my mind is ready to run and my body is ready to fight. \n\nUnable to multitask, I jolt. My body and mind's inability to work together causes me to trip over something. My seat? The air? Nothing? I have no idea! The next thing I know, I'm crashing wildly to the floor while frantically trying to put distance between my attacker and me. \n\nAlso, I'm trying to brace myself for the fight of my life. Rocky Balboa, baby! Of course, I'm a far less skilled, but better looking, version. \n\nI've always made fun of people who run from a killer and fall down, but it's no joke! Adrenaline gives a mother the ability to lift cars off of her children, yet, I can't get my legs to move fast enough. \n\nI'm so dead! I'm going to die! I can't run or fight. I'm literally worthless. I'm trying to collect myself enough to do something...anything, when I hear laughing and he manages to say between hysterics. \n\n\"I'm sorry. I didn't mean to scare you!\" \n\nIt's not by choice, but the moment I realize I'm not in any danger, my body completely collapses. I'm lying on my back with one hand resting on my chest and trying to will my heart to slow it down before I go into cardiac arrest! My other arm is draped over my face as it needs the protection of darkness. Finally, I find my voice and start yelling at him. \n\n\"What the fuck, Colin! Fuck! I almost peed myself!\" \n\nMy comment only seems to fuel his uncontrollable laughter as he curls over. \n\n\"Ba, ha, ha, ha, ha, ha! I'm sorry! I don't mean to laugh, but that's too funny!\" \n\nI still have my arm covering my face, but I can sense he's moving toward me. I'm still willing my body to calm down and I'm not ready to face whatever situation is presenting itself. I'm angry, scared, relieved, and anxious. One of those emotions taints my words, but I have no clue which one. \n\n\"What are you doing here?\" \n\nHe's trying to hold back his laughter. \n\n\"I'm not trying to kill you, I can promise you that much.\" \n\nI remove my arm and look around. Colin's sitting on the chair next to mine. He stands, offers me his hand, and pulls me off of the floor so I can return to my chair. \n\n\"I had a feeling you weren't going to give me the time of day and understandably so. So here I am, forcing you to listen to me.\" \n\nI lay my head back on the chair and stare forward. I'm afraid of what we might say. \n\n\"Okay, I'm listening.\" \n\n\"Will you look at me, please?\" \n\nI barely tilt my head toward him because I feel a rebellious desire to resist him. I've already given him so much. Also, I don't want to look at him because it'll only make everything harder. \n\n\"Hell no, that won't do.\" \n\nHe swings my chair around which forces me to face him head on. He's about to sit down when he suddenly changes his mind. Instead, he un-reclines my chair and kneels between my legs. \n\nNow I don't have any choice, except to look at him. I notice he must've taken an early flight because his hair's not done, he's wearing his glasses, a Columbia U shirt, and jeans. He's beautiful, as always. \n\nAsshole. \n\nThe second I see the limpid pools of emotion floating within his beautiful eyes, I retire to the fact I can't, and won't, look away. \n\n\"Charlie, I need you to hear me. I love you so much! No, I love you completely! I think I always have and more than I thought was possible. There's a lot of reasons why it took me so long to figure shit out, but I don't want to talk about that right now, we can do that later.\" \n\nHis eyes dart between mine as he gauges my reaction, but I don't know what he sees. Fear? Hope? Happiness? Anger? Whatever he sees, it doesn't discourage him. \n\n\"My mind hasn't changed. I still hate all of the things I hated before, but I don't hate you at all. I thought maybe I could live without you, but I can't. I'm sure the last six weeks have been equally miserable for both of us because we're not supposed to be apart! We're supposed to be together!\" \n\n\"But if you're mind hasn't changed, Colin, this is always going to be an issue! Why put me through all of this?\" \n\n\"Because it's not going to be an issue! I need you! Not the way you think, though. Yes, I need you next to me every day! I need to feel your body when I wake up, which I know will never happen because I'm doomed to wake up in bed alone, but I need you in the kitchen waiting for me! I need you to laugh and cry with me! I need to share my day with you and bounce ideas off of you! I need you because you make me feel worthy and loved! I need you because you call me out on my bullshit, you challenge me, and you anticipate me! All of these reasons and so many more! \n\n\"But\u2014\" \n\n\"Dammit, Charlie! Let me finish! I need all of the things I hate and all of the things you love and excel at, too! I need you to love those things and I need you to be great at them because I'm not! If we're going to be royalty and run this company, someday, or maybe a different company, I'll need you the way you are! I can't do that stuff on my own! I don't like that stuff at all, but I'll manage if you're with me and if you're doing most of it. I don't want or need another me. I want and need you!\" \n\nHe grabs both of my hands. \n\n\"Charlie, you're my perfect match...personally and professionally!\" \n\nOh, God! I can feel the tears breaching the surface, again. \n\n\"I\u2014\" \n\n\"Shut the fuck up!\" \n\nHe smiles as he knows how romantic it is when he talks like this. \n\n\"I've really fucked up, a lot, and we both know it, but I promise...I'm done. That's a lie. I'm going to fuck up a bunch in the future because it turns out I'm an idiot, but I promise, it won't be like it's been!\" \n\nHe shifts for a moment, removes his hand, and fumbles around. \n\n\"Can I be your idiot? Can you make me less stupid? Will you?\" \n\nHe opens his hand and reveals two platinum bands. I didn't see this coming. I'm shocked, nervous, and elated! I whisper. \n\n\"Oh, my God! Something's happening\u2014\" \n\nColin smiles at me. \n\n\"Will you challenge me, love me, forgive me, surprise me, live with me, and share your life with me? Will you socialize, schmooze, rub elbows, and attend business lunches with and for me? Will you do all of this, and more, with me, forever?\" \n\nColin proposed! I smile brightly and say. \n\n\"Yeah! Okay!\" \n\nWe smile at the same time and together we say. \n\n\"Well, this is going to hurt like a mother-fucker!\" \n\nWe laugh. \n\n\"See! We're a perfect match! Only you and I would quote Michael together.\" \n\nI pull his face to mine. Six, long weeks! There's no holding back now. Colin quickly reclines my seat and presses his body against mine. I frantically run my hands through his hair, while his hands pull at my clothes, and manage to mumble between kisses. \n\n\"How long do you think we have before we land?\" \n\n\"Maybe forty-five minutes?\" \n\n\"Do you think we have enough time?\" \n\n\"Fuck, yes! I'll only need thirty seconds!\" \n\nI roll my eyes and laugh at his joke. \n\n\"No, I'm serious! You'll be lucky if I'm a one minute man.\" \n\nI reply. \n\n\"Yeah, me too! It's been six weeks and four days.\" \n\nI'm pulling at his clothes when he stops. \n\n\"Yeah? Not last weekend?\" \n\nHe's asking if I went home with Eric. \n\n\"God, no! Six weeks and four days!\" \n\nColin quickly stands, takes his pants and underwear off and then pulls mine off. He looks at me for a moment before engulfing my steel rod in his mouth. His wet heat sends electricity through my body and, suddenly, I feel something cold and wet as his finger breaches my hole and I pant. \n\n\"Where the fuck did you get lube?\" \n\nHe reluctantly releases my cock. \n\n\"I brought it. I wasn't sure how this was going to go, but I damn well was coming prepared!\" \n\nHe quickly returns to the business of his mouth doing all sorts of tricks on my cock and his fingers working their own magic. I pull him in for a hungry kiss and then plead. \n\n\"Okay! Okay! Hurry!\" \n\nHe quickly adjusts himself over me and I feel him press against me. I use my leg to spur him forward as the pain is brief and it doesn't take long before he's all of the way inside of my ass. He breathes into my neck. \n\n\"Fuck! I promise, I'm going to try to make this good for you, but I can't promise I'll be successful.\" \n\n\"Just move!\" \n\nI laugh and he starts thrusting in and out. The first few strokes are slow, but he quickly increases his speed. Nothing is better than having Colin on me and inside of me as I run my fingers everywhere and feel the soft skin I've missed so much. I brush over his nipples and down his back as we watch each other. \n\n\"God! You feel so good and so big!\" \n\nAs he starts losing control, he repeats. \n\n\"Oh, shit! Oh, fuck!\" \n\nThe chair's somewhat awkward, but he manages to hold his own by gripping the arm rest while my leg is over his shoulder. \n\n\"Shit, Charlie! Argh! Fuck! Ugh! Fuck!\" \n\nHe slams into me a few more times before I feel his warmth release inside of me. \n\n\"Fuck! I'm so sorry! I tried!\" \n\nHe grabs my cock and starts stroking me as he's visibly stressed about his performance. He wasn't joking when he said he wasn't going to last too long. I laugh inwardly and push him toward the floor. \n\n\"Turn around, Colin. Where's the lube?\" \n\nHe hands me a small travel bottle, sticks his perfect ass into the air, and waits, but barely gives me time to get him ready before he starts demanding. \n\n\"Don't dink around, just do it!\" \n\nOkay, boss! \n\nI moan as I press forward and slowly penetrate him until I'm all of the way inside of his ass. \n\n\"You feel so good! You're so fucking tight, Colin!\" \n\n\"Well, you know, six weeks and four days!\" \n\nI start thrusting in and out. Knowing he already finished takes a lot of pressure off of me and allows me to relax and let the sensation take over. I close my eyes and thrust with a steady rhythm as I run my hands up and down his back as his tight heat brings me closer and closer. I must be hitting the right spot because Colin starts mumbling. \n\n\"Oh, shit!\" \n\nI'm so close as I continue nailing his prostate with each thrust and trying to take him over the edge with me. \n\n\"Oh-god-oh-god! Fuck, Charlie! Argh! Ugh! Go, go, go!\" \n\nI can feel my muscles contracting as my orgasm sweeps through my body and my fingers are gripping his ass so hard, I know I'm going to leave marks. I reach around him and I'm surprised to find his erection has returned with a vengeance! I start stroking him, knowing I'm only seconds away from finishing, and Colin screams at my touch. \n\n\"Ah!\" \n\nHis ass muscles tighten around my shaft as I feel his spunk covering my fingers. I let go and my body releases everything as it blasts his insides with six weeks and four days worth of juice. I thrust a few more times until I can't move. Finally, I slowly withdraw and lie on my back beside him. \n\nColin laughs as he says. \n\n\"You're the real MVP!\" \n\nHe does his best Wayne's World impression as he says. \n\n\"Please, don't leave me! I'm not worthy!\" \n\nI join him in the laughter. I feel the joy and love we normally shared and everything feels right, again. I look at him and say. \n\n\"You're not a total idiot. You sweet talked me into signing a contract before I had time to realize you don't have the skills.\" \n\n\"Fuck you.\" \n\n\"You tried!\" \n\nI shrug and he laughs harder. \n\n\"Fuck you!\" \n\nI'm about to respond again when there's a knock on the cabin door. \n\n\"Fuck!\" \n\nColin and I look at each other as we jump up and dress as quickly as possible. I don't want to get caught naked on my future father-in-law's plane, especially with his son! I check to see if Colin is presentable, but his hair is mussed and his clothes are messy. \n\n\"You look thoroughly fucked!\" \n\nHe smiles and says. \n\n\"Well, you look lightly fucked.\" \n\nHe leans over and kisses me before letting the flight attendant in. \n\n\"We're starting to descend so I'll leave you guys be, but it's time to return to your seats and buckle up.\" \n\nColin cuts her off with his charming, All-American smile. \n\n\"Yeah, yeah. We got it. Thank you and thank you for your discretion.\" \n\nShe looks at both of us, before smirking with a knowing look in her eyes, and says. \n\n\"No problem.\" \n\n* * * \n\nAs we step off of the plane, I see a car waiting and realize something's different so I look around...nothing's in English. \n\n\"Where are we? This isn't Portland!\" \n\n\"We're on vacation!\" \n\nHe won't answer any of my questions and I have a lot! \n\n\"Just shut up and get into the car. You're an annoying kidnap victim!\" \n\nWe drive twenty minutes before finally stopping at a small marina and I'm confused. I look at Colin, hoping for something, but his face isn't giving anything away. He motions for me to get into a small boat while he says something, in French, to the driver before we take off. \n\nHis hazel eyes are shining and his lip is curled at the corner. He's proud of himself as he yells over the wind and the boat engine. \n\n\"I pulled a lot of strings! I thought you'd be proud of me! I mean, most of the strings are my dad, but he's a big rope so it wasn't hard. Since I never ask him for anything, I think he enjoyed it!\" \n\nI smile at his effort. I can't imagine what tiny Airbnb we'll be staying in, but I don't care! I want to be with Colin. \n\n\"Brett mentioned you wanted to be on a yacht in the south of France! So...!\" \n\nHe gestures out to the water, where a beautiful yacht's sitting, and my eyes widen with shock. \n\n\"Ho. Ly. Shit!\" \n\nThis isn't Colin! I stare at him. His hair and clothes are whipping wildly in the high wind speeds and he's holding his glasses so they won't fly off of his face. His smile is full of love and happiness. He yells over the wind, again. \n\n\"Yeah. Just a few strings!\" \n\nHe finally gives up trying to keep the hair out of his face and pulls me close to him as the wind blows hard against us and he deeply, passionately, and awkwardly kisses me. He presses his cheek to mine and yells into my ear. \n\n\"Bleh! Kissing while being accosted by eighty mph winds isn't sexy! It's nothing like the movies!\" \n\nI love his honesty in all situations and his ability to make me laugh. Suddenly realizing my lack of preparedness, since I didn't know anything about it, I tell him. \n\n\"I only packed suits for work!\" \n\n\"It's okay! I packed a few things, but I don't expect us to wear much, anyway!\" \n\n\"I know you have your glasses, but did you pack contacts, also?\" \n\nI wink as I remember Bend. He leans over and kisses me, again. \n\n\"Yes! I put a couple of pair in every bag, just in case!\" \n\nOur little jet boat finally slows, we carefully board the yacht, and walk around a while as someone carries our bags to our room. We eat the snacks that have been prepared for us and lounge since it's been a long day (a long six weeks and four days). \n\nI can't believe how beautiful everything is. The sea's beautiful, the water's a perfect blue-green, the sky's clear, and the weather's warm. I sit on the deck and watch Colin as he's busy finalizing God knows what before we can officially start our vacation. He says he hates schmoozing, but I'm watching him do it right now and he's a natural! He's laughing and smiling with the workers on the boat. He doesn't know how good he looks from here with his big, perfect smile, his glasses, and his wind beaten hair. He's the perfect boy-next-door in his University tee and jeans. \n\nHe sees me watching him and I'm gifted with a small wave and a special smile that's better than all of the other smiles because this one is only for me. It's a promise of forever. \n\nIt's too much so I lie back and look at the sky. \n\n* * * \n\nColin crawls over my body and kisses my face as I open my eyes from my restful lounging to see his beautiful face smiling at me and he says. \n\n\"Dinners ready.\" \n\n\"Is that an invitation or information? Because I can't move with you on top of me.\" ",
        "I wrap my arms around his body and pull him closer which settles his body on top of mine. Eventually, we get up for dinner after lying in silence for a few minutes, making up for lost time. \n\n\"How long are we going to be here?\" \n\nThe table is full of an abundance of seafood and wine, it's truly a beautiful dinner. I'll stay forever! \n\n\"Twelve days.\" \n\nI can see five other people still on board besides us. \n\n\"Is this thing fully staffed?\" \n\n\"Yes, definitely. I don't want to do anything except spend the next two weeks with you. So there's a staff to take care of everything else, but don't get used to it because this isn't going to be everyday life with me.\" \n\n\"Brutal! I accept your ring and then you throw me a bunch of curve balls. Quick sex and a poor lifestyle. Jeez, I can't wait!\" \n\nI feign disappointment. \n\n\"You're such an asshole!\" \n\nHe forcefully scoots his chair back, grabs my wrist, and drags me toward the bedroom as he yells to the staff. \n\n\"We're finished here!\" \n\nAfter we reach the bedroom, he starts unbuttoning my shirt. \n\n\"I can't control myself, one time!\" \n\nHe pulls my shirt off, drops it on the floor, and starts to attack my pants. \n\n\"It's not my fault you look like this!\" \n\nHe approvingly runs his hands over my body. The look on his face is almost scary, like he's going to devour me whole. His fingers cause my skin to ripple with desire and, suddenly, the thought of anything besides the two of us in bed together seems irrelevant, and I can't wait. \n\nI grab the hem of his shirt and quickly pull it over his head as I want him to be equally naked as soon as possible! \n\n\"Ouch!\" \n\nHe laughs. \n\n\"Shit! Stop!\" \n\nHis glasses are tangled in the neck of his shirt. I smile and try not to laugh as I finish undressing him. \n\n\"My bad.\" \n\n\"It doesn't feel good to have your fianc\u00e9 laugh at you while you're standing, naked and hard, in front of him.\" \n\nMy heart quickens. I feel the heat flash in my eyes and shoot directly to my cock. \n\n\"Say it, again.\" \n\n\"Naked and hard?\" \n\nI predatorily shake my head. \n\n\"No.\" \n\nHe teases. \n\n\"Laugh? Standing?\" \n\nI lightly shove him and demand he try, again, so he draws out the word with a wicked smile on his face. \n\n\"Fi, an, c\u00e9?\" \n\nI pull his lips to mine and, as a tangled ball of lips, arms, legs, and hands, we shuffle toward the bed. His legs hit the edge of the bed and he gently falls backward until he's sitting. \n\n\"Yes. Fianc\u00e9. I love that.\" \n\nI kneel in front of him, rub my hands over his thighs, and Colin looks at me with a mixture of humor and panic. \n\n\"Are you going to suck me? I'm asking because I'm trying to prove I can go the distance, but that won't help build my case.\" \n\nHe tosses something that lands next to my hand as he falls back onto the bed...lube. \n\n\"But go ahead anyway. I'll guess I'll have to suffer.\" \n\nHe sighs. \n\n\"You're so romantic.\" \n\nHe is, too. In his own, special way. \n\n\"Fuck, yeah, I am! We're on a boat! Correction, yacht. I'm about to get laid on a yacht and, with any luck, it might be better than the sex we had on the jet! Honestly, so far, rich people sex isn't all that it's cracked up to be.\" \n\nHe talks too much so I grip the base of his cock and swallow him. \n\n\"Hmpf!\" \n\nI love having him in my mouth because he's big enough I have to work for it, but not so big I can't have fun. His cock has a perfect curve and his mushroom head does all kinds of wonderful things when he's pounding me into the mattress. \n\nI could suck his dick all day, but I won't because I don't want him to come too soon. I decide on an alternate route. \n\nI straddle his hips, squeeze lube onto my finger, slide it between my cheeks, and start fingering myself. Colin's eyes roll back when he realizes what I'm doing. \n\n\"Watching you finger yourself isn't going to help, either.\" \n\n\"Colin, at some point, you're going to have to grow a pair of balls and stop blaming me for your short-cummings.\" \n\nAfter working two fingers deep, I start to slowly impale myself on him until I rest against his pubic hair. He moans at the sensation and arches his back. \n\n\"Ugh! Charlie, you feel so good! I've missed this so much! I've missed you!\" \n\nWe stare at each other and I can feel him slightly moving his hips, grinding against me, and we're both wearing the same dumb smile. I've missed this, and him, too. \n\nI flex my muscle around his cock and feel his body react. I love watching him squirm under me and I love knowing I can make him crazy. I start moving my hips and grinding myself on him. \n\nWe intertwine our fingers as I slowly and deliberately move my body against his. His eyes are hooded and his face is flushed with desire for me as I lean down and kiss his pink lips. I want to touch as much of him as much as possible. His hazel eyes look deep into my blue ones and they no longer see any wall or hesitation in them. \n\nI sit up and start riding him harder and faster. Our breathing is labored and he grabs my behind and starts thrusting into me. The feeling of his hard cock, as it hits spots deep within me, is indescribable! \n\n\"Harder, Colin! Fuck me like you haven't fucked me in almost seven weeks!\" \n\nHe doesn't need much encouragement. He braces his feet on the bed and slams me down every time he thrusts up. As he always does when he's consumed with an immeasurable amount of pleasure, Colin continues to mumble affirmations and profanity. \n\n\"Oh, shit, baby! So good!\" \n\nHe doesn't let up on his relentless pounding and I feel myself climbing higher and higher. \n\nHe flips me over so I'm pinned on my back, he starts thrusting between my legs, and fills me in ways I've only dreamed of for months. The passion and intimacy we'd been lost in is replaced by a raw, animalistic need. \n\n\"I'm close Charlie! I love you! I love what you do to me!\" \n\nHis continuous, non-verbal sounds are music to my ears as I listen to him climb and climb. As he puts all of his weight on my legs and pushes them against my chest, his cock continues its onslaught against my prostate. I can feel my body churning and tingling as I'm overwhelmed with the need to cum. I want to cum so bad! \n\n\"Keep going! Don't stop! I love you! So fucking close! Harder!\" \n\nHe reaches down and the second he touches my cock, I fly apart. I'm done! Finished! \n\nMy fingernails clench into his skin as I feel Colin pound an orgasm out of me. My eyes flash black and white as I pulse to completion. It feels never ending as I ride wave after wave of pleasure to the point of thinking I might pass out! \n\n\"Fucking hell, Charlie! I'm cumming! So hard! Fuck! Cumming!\" \n\nHe shudders into my neck as he cums hard inside of me. He continues to thrust through his orgasm as it sends shockwaves through both our bodies. Finally, his body relaxes against mine and he gently kisses my face. \n\n\"Damn! I love you so much!\" \n\nHis breaths are quick and harsh. Finally, he takes a very deep breath, inhaling all of the oxygen from the room, and yells at the top of his lungs. \n\n\"I fucking love Charlie Gabett so fucking much!\" \n\nHe turns and kisses me so hard that my face flushes and I can't help the stupid grin that only he can make me wear. \n\n\"Yeah, yeah. I love you, too.\" \n\nPeace washes over me as all of the feelings of insecurities and worry I've felt, since the day I confessed my feelings to him, are gone. \n\nI know, without a doubt, we're on the same page. I know things are going to be as close to perfect as humanly possible. \n\n* * COLIN * * \n\nAfter a lazy morning in bed (other than having sex), we decide to lay out on the deck and relax in the warm breeze. \n\nCharlie pulls a pair of swim shorts from of a bag I've supplied and looks at me as if I have the maturity of a fifteen-year-old boy, which isn't too far off. \n\n\"What are these?\" \n\nKnowing it's not a very accurate description, I reply. \n\n\"Swim trunks.\" \n\nHe looks at the tiny piece of fabric and then back at me. \n\n\"No, these aren't trunks of any kind!\" \n\n\"Well, I suppose not, but they're European and I want to see you in them. So, put them on. I have a pair, also.\" \n\nI pull out a matching green pair and smile mischievously. \n\n\"When in France!\" \n\nCharlie laughs and slowly slides his shorts off. He knows how much I love watching him undress so he makes a show out of it and makes sure I have a chance to watch him expose his beautiful muscles and creamy smooth skin. His fucking body is on fire and the bastard knows it! \n\nIf we hadn't had sex only minutes ago, I'd be throwing him down, but I must resign to merely watching him pull on the most adorable pair of scandalous swim trunks he's ever worn. He adjusts the band on his beautiful fucking waist and admires how the fabric barely covers his body. He's probably not admiring it as much as he's mentally berating me, but I'm admiring it! \n\nCharlie gingerly watches as I pull on my own swim trunks and it appears he doesn't have a problem with the lack of coverage, now that it's my body on display, which is strange because his body is miles better than mine. \n\n* * * \n\nI lather Charlie with sunscreen because I want to keep his beautiful skin milky and smooth. Then, we settle on the deck, lie out under the sun and enjoy the light sea breeze. The day is perfect and uneventful. Only us\u2014the way it's supposed to be. I ask Charlie. \n\n\"So, do you want to take my name or should I take yours?\" \n\nHe looks at me and shrugs before replying. \n\n\"Honestly, I don't care. I only want to marry you. I want to be your husband.\" \n\nI chuckle at his adorableness and mumble. \n\n\"That's something I'll never understand.\" \n\nCharlie looks so peaceful with his eyes closed and the sun kissing his skin. He's shiny from all of the SPF he has to wear to keep his skin from lobsterizing. He's so perfect and I'm so undeserving. \n\nI grab my phone to search for a song and, once I find the one I'm looking for, I nudge Charlie. \n\n\"Stand up.\" \n\nHe raises himself on his elbow and uses one hand to block the sun so he can see me. \n\n\"Why?\" \n\nI grab his hand and pull him up. \n\n\"You ask too many questions.\" \n\nMusic (Imagine Dragons - Next to Me) starts to play on the yacht's sound system. \n\nI pull him to my chest and smile at the confusion dancing in his eyes. He has no idea what's happening. He has no idea what he does to me or how I feel about him so I need to make sure he knows. \n\n\"After everything I've done, I don't know why you love me or what I did to deserve you, but for some reason, you still want me.\" \n\nI place my forehead against his and, with the music, start to softly sing every word into his ear as we sway together. \n\n[Oh, I always let you down \n\nYou're shattered on the ground \n\nBut still I find you there \n\nNext to me \n\nAnd oh, stupid things I do \n\nI'm far from good, it's true \n\nBut still I find you \n\nNext to me \n\nThere's something about the way that you always see the pretty view \n\nOverlook the blooded mess, always lookin' effortless \n\nAnd still you, still you want me. \n\nSo thank you for taking a chance on me \n\nI know it isn't easy \n\nBut I hope to be worth it.] \n\nHe tries to pull away, but I make him stay. I need him to understand! I need him to know I understand how much I screwed up and how thankful I am he still wants me. \n\nEvery lyric of this song perfectly conveys the truth of my heart. God, I love this man! Thinking back to the first day we met, I didn't give him the time of day. I thought I knew him and made terrible assumptions that kept us apart. As it turns out, I'm the person I hated. Charlie's ten times the man I could ever hope to be! He's kind, compassionate, forgiving, gentle, funny, thoughtful, and sexy beyond belief. Plus, he's selfless and patient, which are the two things that saved our relationship. \n\nThe salt water air is doing a number to his blonde hair by drying it out in chaos. His blue eyes are so soft and safe, they tell me exactly how he feels...not that I've ever had a doubt! \n\n\"Charlie, I'm going to prove to you that you made the right choice...every day! This vacation is more than a much needed escape for you and me. I want to marry you and this is our own private ceremony because, when we get back home, I want you to invite everyone to our wedding. I want to have the biggest social event of the year...whatever you want! I'm going to stand by you and I'll be happy, but this, right here, is for only you and me. I want you to move in with me. I know my place isn't big, but it's home. I'd love for you to take my last name, too, but not because I want to own you, but because Clarke is boring and I love boring. We can do stuff as Colin and Charlie Clarke.\" \n\nI pause as I realize how ridiculous it sounds. \n\n\"Oh shit! We're going to be that couple? We're not naming our kids Claire or Cory and you can't make me!\" \n\nI laugh at the vision and at Charlie's widening eyes. \n\n\"You want kids?\" \n\n\"Yeah. I'm not dead set on it, if it's something you're not interested in, but I'd definitely be okay with it.\" \n\n\"I want all of that, too. I want your house and your name to be ours...Claire and Cory, too!\" \n\nHe's smiling so big, I can see his second dimple as he leans in and kisses me. \n\nFuck! Did I make him this happy? I want to always make him this happy! \n\n* * Eight Years Later * * \n\nAs he grabs the pre-packed bag that's been waiting by the door, Colin yells. \n\n\"We need to go! Now!\" \n\nColin's becoming impatient because he's sure Charlie's doing his hair or something completely irrelevant. \n\n\"I'm sure you look great. Come on!\" \n\nCharlie walks out of the bedroom and is zipping up his jacket as he glances around. \n\n\"Okay. Okay. Is everything ready?\" \n\n\"Yes. The car seat is installed, clothes (he lifts the bag, indicating they're all packed), and everything else\u2014well, we're only eight minutes from the hospital so I think we'll be okay if we do forget something.\" \n\nColin wants to be as prepared as possible so he triple checks the list in his head. He might be playing himself off as calm and collected, but he's a nervous wreck. \n\nTheir phones simultaneously beep with an incoming text so they look at the group chat they have with Anne and David, their surrogate and her husband. The last update was forty-five minutes ago when Anne's water broke while they were at lunch. \n\n[David] She's been admitted and checked. Eight centimeters! Better hurry! \n\nAs they push each other out of the door, they yell in unison. \n\n\"Go! Go! Go!\" \n\nIt's been a long road to get here so both men are anxious and nervous to meet their new bundle of joy. They run downstairs and double check (for the hundredth time) to be sure they've packed everything they need. Charlie excitedly, and nervously, squeezes Colin's arm as they shuffle everything into the car. \n\n\"I can't believe the day is here! After two failed transfers and a miscarriage, I wasn't sure we were ever going to be dads.\" \n\n\"I know! It hasn't been easy, but it worked out and now we're going to be dads!\" \n\nAfter Colin pulls the SUV out of the garage and starts the slow trek toward the hospital, he asks. \n\n\"Do you remember after the twenty week ultrasound? You wanted to trade-in your Jag for an SUV and you actually thought it was an appropriate time to buy a forty-year-old Land Cruiser. Seriously, man? That wasn't the time to try and impress me. Our precious cargo needs the newest and best safety features! Not all cars even had seatbelts in 1976 and kids still rode in the very back like dogs!\" \n\nColin smiles as he recalls the shock he felt when Charlie suggested getting something that wasn't brand new because, normally, he'd have been excited, but not that time. \n\n\"You're remembering it wrong. I knew if I tried to get something new, you'd fight me on it. I'd get a lecture about wasting money on unnecessary luxuries and blah, blah, blah. But if I suggested getting something old, I knew you'd push me into something newer because it'd be your idea, not mine. How was I supposed to know you'd go soccer-mom crazy? But now, we're driving a brand new Audi Q7. I win!\" \n\nCharlie playfully squeezes Colin's leg and throws his signature smile, knowing Colin can't possibly resist it. \n\n\"You're a son-of-a-bitch! You played me!\" \n\n\"Hey! Watch the language. No more of that foul mouth of yours. We're going to raise a proper young lady, dammit!\" \n\nThey both laugh. Colin intertwines his fingers with Charlie's while they drive up the hill to meet their daughter. \n\n* * * \n\nCharlie yells from the nursery. \n\n\"Colin, hurry!\" \n\nHe's looking at his daughter and shaking his head in disbelief. \n\n\"Oh, Lordy, Carly! What did you do? This is so bad.\" \n\nCharlie's thinking to himself, this is so disgusting! Why are kids so gross? \n\nColin peeks into the room and tries to figure out what the big deal is. \n\n\"What? Oh, fudge sickle!\" \n\nHe covers his nose and tries not to gag after the pungent odor assaults his senses. It smells terrible! He can't be sure, but it smells like...shit? He looks at Charlie and hesitantly asks. \n\n\"What's going on?\" \n\n\"Carly took her diaper off and pooped! Then, she decided to paint everything with it! It's so bad! Look!\" \n\nCharlie has one arm covering his nose and the other is arm pointing at the mess. The crib, bedding, and wall are covered with shit, but not as much as Carly, herself. \n\nCarly is Charlie's biological child and she looks like him. She has his classic, curly, platinum-blonde hair and piercing blue eyes. Although, currently, her blonde hair is covered in brown slime. \n\nColin takes another look at the mess and pulls his camera out so he can take a couple of pictures to commemorate this moment and started cooing. \n\n\"Good job, girly! Smile! I need some good ones for your wedding day or when a trust fund baby douchebag tries to take you to prom when you're only a freshman.\" \n\nCharlie rolls his eyes at the jab as Carly smiles and coo's for her dad's pictures. He watches as Colin smiles and laughs at this epic disaster. Knowing fifty pictures is probably enough to document this moment, Colin looks at Charlie and says. \n\n\"Start the bath and I'll take her in.\" \n\nColin looks back at his perfect mini Charlie and, with his best Home Alone impression, coos back at her before picking her up and holding her away from him to maintain as much distance as possible. \n\n\"Come on, you filthy animal.\" \n\nHe looks at Carly and wonders how such a tiny, cute person can cause such a rancid mess. Thinking back to all of the times he's made a mess of things with Charlie, Colin realizes that, maybe, mini Charlie is more like him than he'd thought. Carly might not be biologically related, but Colin believes there's something to be said about nature vs. nurture. \n\nColin thinks to himself, why'd you have to inherit my idiotism and not one of my three mediocre qualities? \n\nThe closer he gets to the bathroom, the more he realizes the severity of the mess. A bath is only going to move the mess around and he doesn't want to bathe her in a pool of her own feces so he yells. \n\n\"Charlie! Forget the bath! Turn on the shower, first, so we can wash this cra...stuff down the drain!\" \n\nHe glances into her tiny Charlie-eyes and smiles. \n\n\"Don't tell your dad I almost slipped. He'll ground me for a week!\" \n\nShe giggles at the funny faces he gives her and his heart flips with love. It doesn't matter that she's covered in crap, these are the moments he lives for. \n\nHe lives for Charlie and Carly. \n\nThat's a total accident, by the way. Charlie, Colin, and Carly Clarke don't mean to be so corny, but there's a part of them that loves it. ",
        "They clean her off (very well!) before filling the tub and letting her play for a while. All three of them are as happy as can be. Finally, she's clean so they dress her and relax in the living room. \n\n\"Can we please throw the bedding and stuff away? I'll never feel it's clean enough.\" \n\nCharlie's only asking to play nice. It's going in the trash regardless of Colin's response. \n\n\"Fudge, yes! Throw the crib out, too! That shit's nasty! Pun intended!\" \n\nThey laugh and start cleaning up the mess. It takes a while, but they get the walls cleaned, bleached, and aired out before bedtime. They pull the porta-crib out to use until they can get a replacement. \n\nThe rest of the evening goes as it does every day. They fawn over their daughter and each other, Charlie cooks dinner, Colin cleans up and does the dishes, and they wind down before putting Carly to bed. \n\nCharlie stands over her crib as he looks at her sweet little curls. He's overwhelmed and exhausted. Never in a thousand years did he think he'd be cleaning up so much poop. Some poop, sure, but not that much! \n\n* * * \n\nColin sniffs himself as he lies on their bed, next to Charlie. He can't smell the poop now, but he's been randomly catching a lingering whiff...pew. \n\n\"I still smell poop! I don't want to smell this shit all night so let's take a shower.\" \n\nHe pulls Charlie off of the bed and into the bathroom. Charlie turns the shower on as he sneaks glances of his husband. Watching Colin undress always sends blood to his nether regions, but Colin's oblivious. He always has been and always will be. Colin doesn't appear to fully understand how his husband feels about him. Charlie quickly undresses and pulls his lover into the shower. Once inside, Charlie firmly instructs Colin. \n\n\"Turn around and put your hands on the wall.\" \n\nFuck yes! Colin loves it when Charlie gets bossy. He does as he's told and presses his hands against the wall in front of him. \n\nCharlie soaps a rag and starts running it over Colin's body, thoroughly cleaning him, as Colin feels Charlie's erection pressing against his backside. Feeling his lover's arousal is enough to fully inflate his, what had previously only been a partial, erection. \n\nColin doesn't say anything, but instead, enjoys the way Charlie is running the rag over his body as he cleans and loves every inch of him, in the sensual way only Charlie can do, and touches him as if there's no one else in the world. Dropping his head forward, Colin's sexually frustrated because his sexy husband is touching every part of his body...except the places where he wants the attention to be focused. \n\nHe knows, after Charlie finally gives in, the sex is going to be amazing because it always is. After what feels like an eternity, to Colin, Charlie finally breaks the silence with a question. \n\n\"Are you ready for another?\" \n\n\"Another round of sex? Fuck yes! You're killing me with your slow torture! You're a sadist!\" \n\nColin grinds his ass against Charlie's erection and Charlie laughs at Colin's desperation. He swats Colin's butt to keep him focused on the conversation and also as a partial punishment for his dirty mind. \n\n\"No. I'm talking about another kid.\" \n\nHe continues to lazily rub Colin's body. \n\nColin is shocked. Here I am thinking about your dick in my ass and you're thinking about babies! What the fuck is wrong with this picture? \n\n\"Are you actually thinking about another baby right now? A) We spent the afternoon, elbow deep, in shit! Actually, we've spent the last year elbow deep in shit. And B) I feel very uncomfortable talking about this...with this!\" \n\nHe turns around and points at his raging erection. \n\nCharlie chuckles again. Oh, sweet husband of mine, always so crude. \n\n\"Stop being dramatic, Colin. I want to start, again. It takes a while for things to get rolling and last time, it took a year just to get pregnant. I really do want another baby.\" \n\nCharlie reaches down and starts to rub Colin's erection which causes Colin to jump at the sudden attention. He kisses Colin's lips over and over. \n\n\"I really want it.\" \n\nColin huffs. \n\n\"Fuck!\" \n\nHe drops his head back and musters a response as Charlie fondles his baby makers. Keep rubbing me like this and I'll give you anything you want! \n\n\"Okay, but we probably should start practicing now. You know, to be sure everything works\u2014no prostate problems and such.\" \n\nAs Colin turns to face the wall, again, Charlie grabs the silicone based lube, which they keep in the shower, and breathes into Colin's ear as he slips his finger deep inside of Colin's tunnel. \n\n\"You're right. Better safe than sorry.\" \n\n\"Argh!\" \n\nFuck! Harder, faster, harder! More, more, more! \n\n\"Come on! Two, two, two! Oh, fuck! So good!\" \n\nCharlie finally removes both fingers, presses his erection against Colin's entrance, and pauses for a moment. Colin lets out a breath of frustration, unsure why Charlie's not fully seated inside of him yet. \n\n\"What the fuck are you waiting for?\" \n\n\"I was thinking about how easy Carly's been and how our next kid's going to be a pain in the ass...like you.\" \n\nColin can't believe Charlie's still thinking about babies while his dick is pressed against the quivering hole of Colin's ass! \n\n\"Right now, I only want one pain in my ass and that's you. Stop thinking about kids and start fucking my ass! I hate you so much right now!\" \n\nColin pushes back and tries to encourage Charlie along. \n\nCharlie smiles at his husband. He loves it when Colin gets this way...a horny, little jerk with a foul mouth. He grabs Colin's hips, presses forward, and slowly makes his way inside until finally he's all of the way in. \n\n\"Fuck! Finally! Pound my ass, daddy!\" \n\nColin looks back and laughs at the low growl he hears coming from the stunning man behind him. \n\nCharlie's never been able to deny the love of his life and he's not going to start now. He wraps one arm around Colin's stomach and slowly starts pumping in and out and Colin closes his eyes as he feels the warm pressure of each forward thrust. \n\nColin removes one hand from the wall, wraps it around Charlie's neck, and pulls him closer. \n\n\"I love you so much, Charlie! You make me feel so fucking good! It's been ten years and the sex gets better and better!\" \n\nColin starts thrusting back to meet Charlie each time. He leans forward, again, and arches his back so he can give Charlie the perfect angle for penetration. Colin continues to mumble encouragements. \n\n\"Yeah, right there! Yes! Oh, god!\" \n\nCharlie speeds up and watches himself as he slides his cock in and out of Colin's perfect ass. \n\n\"Fuck, Charlie! I'm so close!\" \n\nHe starts jacking his own cock in rhythm with Charlie as the pounding gets harder and harder. Colin can feel the constant beating on his prostate and knows it'll only be minutes before he tumbles over. \n\nCharlie feels himself climbing higher toward his own orgasm and runs his free hand up Colin's spine until he feels his thick, brown hair between his fingers. He grasps a handful and, without thinking, places his lips against Colin's shoulder blades and starts mumbling as he feels his balls starting to pull up and his toes tingle. \n\n\"Oh, shit, Colin! You're so tight! I love you! Fuck! I'm cumming! Shit! I'm cumming!\" \n\nColin braces himself against the wall to stabilize both of them against Charlie's intense thrusting. He feel's his own balls churning and when he feels Charlie bite down on his back, the pain is enough to send him into wonderland. He can't seem to pull his own dick hard enough to keep up with the intense orgasm that's ripping through his body. \n\n\"Go! Go! Go, Charlie!\" \n\nColin's convulsing ass muscles, around Charlie's engorged cock, is enough to send Charlie over the edge. Charlie wraps both of his arms around Colin's torso and slams him until he can't move, then he gently grinds until he has nothing left except to stand with his cock embedded inside of his lover's ass. \n\nColin rests his forehead against the shower wall and he watches his semen sliding down the wall until it's slowly washed away by the water. \n\n\"Well, it looks as though everything's in working order!\" \n\n* * * \n\nColin's brushing a blonde lock off of Carly's sleeping face. Her rosy cheeks are fresh with crease lines from sleeping. \n\n\"So, do you really want another kid? Don't you want to savor the time we have with this one?\" \n\nShe's lying between her parents, on their large bed, because she awoke around five in the morning, dad moved her to bed with them, and she's since fallen asleep, again. Both dads are propped up on their elbows and staring down at their tiny terror as Charlie runs his thumb over her tiny fingers. \n\n\"Yeah. Definitely. We have a mini me and now I want a mini you. Realistically, if everything goes perfectly, they'll be two and a half years apart...that's perfect. Everything's perfect.\" \n\nColin smiles at the happiness written all over Charlie's face as he watches his daughter sleep. \n\n\"Okay, let's do it! We'll go in next week and get the ball rolling. We'll talk to Anne and see if she's willing to carry, again. If so, we'll find out when she'll be available, we can set up an escrow, and start contracts. Hopefully, our egg donors available so we can get some of my little man bits cooking.\" \n\nHe looks up to see happy, blue eyes staring back. \n\n\"Honestly, I didn't know life with you was going to be so awesome. I knew it'd be great, but this\u2014\" \n\nHe makes a general sweeping motion over their daughter, each other, the house, their life...everything! \n\n\"It's so much more than I'd ever imagined!\" \n\nThey lean over their daughter and share a gentle kiss before Colin looks at his husband and starts to softly sing. \n\nAnd oh, stupid things I do \n\nI'm far from good, it's true \n\nBut still I find you \n\nNext to me \n\nThere's something about the way that you always see the pretty view \n\nOverlook the blooded mess, always lookin' effortless \n\nAnd still you... \n\nStill you want me. \n\n** ** ** ** \n\nWhat a ride! I wrote this story on a whim. I had every expectation that it would get washed under the rug but that's not what happened! You guys have been the pillar of support and encouragement. \n\nAlso, as always, please leave feedback! I want to know your thoughts on the story now that it's reached its completion. Plus, I love interacting with everyone. If you haven't noticed, I respond to comments, feedback via my profile, and emails."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "gay",
        "gay male",
        "romance",
        "love",
        "drama",
        "anal",
        "gay romance",
        "anal sex"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/still-you-want-me-ch-11"
}
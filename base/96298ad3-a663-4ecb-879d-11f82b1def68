{
    "title": "The Designer Pt. 02 Ch. 07",
    "pages": [
        "Author's Note: Thank you for reading. With the expanded stories, I'm going to try to add some names with the time period sections. We're traveling back for more back story, and forward to other parts of the origin story. Let me know in the comments if it becomes confusing. Your votes and comments encourage me to continue the tale.\n\n*****\n\nDistant Past: Isaiah\n\nIsaiah walked into the small classroom, waiting at the door until the teacher acknowledged him, and waved him forward. As he walked towards the teacher, his eyes scanned the room, seeing for the first time the faces he'd spend his last semester of high school with. He handed the hall pass to the teacher, then stood before him, half facing the room, and scanning the faces again.\n\n\"Welcome, Mr. Jackson,\" the teacher said while reading the pass, then looking up and address the quieted classroom. \"Meet Isaiah Jackson, from Montana.\"\n\nThe chorus of hellos from the unknown faces was all too familiar. Isaiah had been the new student in six different school the four years he'd been in high school. He hoped this was the last awkward hello. He smiled at the blur of faces, and noticed his eyes were always drawn to the green eyes of a brunette sitting midway back in the center.\n\n\"You can sit there behind, Katherine, Isaiah.\" the teacher said indicating the empty desk behind the green eyed girl that had captured his vision.\n\n\"You can call me Katie,\" the young girl said as Isaiah passed her, and sat in the empty desk behind her.\n\n\"Good to meet you Katie,\" Isaiah said, \"What are we studying?\"\n\n\"Romeo and Juliet,\" Katie said catching his eye, then blushing as she turned back to the front of the class.\n\n\"Oh good,\" Isaiah said with a smile, \"I studied this at my last school, I won't be behind like I usually am.\"\n\nKatie smiled, then turned slightly, \"I don't think you'd ever be far behind, Isaiah...\" \n\n\"This might be an interesting semester,\" Isaiah thought to himself, getting lost tracing a tendril of the brown tresses in the back of Katie's hair as it weaved through the braid along the back of her neck.\n\nIsaiah also saw Katie in two more of his classes. In choir her section was across from him, so he often found himself distracted by her smile. In Science lab, the teacher paired Isaiah with Katie as a lab partner, reassigning her older partner to someone else. The teacher thought Katie would help Isaiah catch up with the rest of the class, as he had missed the first two weeks of the semester. They became fast friends.\n\nPast: The Family \n\n\"So, what, I'm like a siren?\" Kelly said, \"A sex demon?\"\n\n\"Demon is such a misunderstood word,\" Alyssa sighed and sat next to Kelly on the sofa, \"Angel means ,'messenger,' and a demon is an angel that chose to not follow God.\"\n\n\"What if I want to be a sex angel, instead of a demon?\" Kelly asked with a grin.\n\nAlyssa smiled and cupped Kelly's jaw, saying, \"You can become whatever you want to be,\" before leaning and kissing her softly. \n\nI watched the pair start to deepen the kiss, and felt the ripples of sexual energy which radiated from Kelly. Alyssa had to push herself gently away. Her internal struggle was apparent as she licked her lips and looked deep in Kelly's eyes.\n\n\"Yes,\" Aly said softly, \"Must remember to handle with care.\"\n\n\"I did that?\" Kelly asked innocently breathing deeply with an exhale. \n\nI had a hard time concentrating on anything other than watching Kelly's beauty, and only the feeling of Aly pressing a thought of self-control was I able to back away. The sexual tension had ramped up with incredible speed, and I remembered the way the room had swayed to the four-way tryst right after Alyssa had gone to the library.\n\n\"Yes,\" Alyssa nodded, \"From what I read, I think it's possible you have the power to stimulate sexual arousal.\"\n\n\"Really?\" I asked sitting down on the opposite side of Kelly and listening to Alyssa.\n\n\"It explains so much,\" Alyssa continued, \"From the initial meeting of you two, your power lowered her culturally learned self-control, and her innate ability was able to blossom. Lexi, Carmen, even you, were caught up in her innate, maybe supernatural, allure. Even I felt it at the hotel when we first met.\"\n\n\"I didn't realize I was doing anything,\" Kelly said, blushing, and I sensed some inner shame and guilt rise up along her moral curve.\n\n\"It is just who you are,\" Aly said, \"You might be able to learn to control it, now that you know it exists,\" Alyssa paused to lift Kelly's chin, looking in her eyes with concern. \"Think about it though, it explains Jerry's kiss too.\"\n\n\"Is it evil?\" Kelly said, as she cycled through her religious upbringing, the lessons her parents and her church had taught her.\n\n\"Sexual attraction isn't evil,\" Alyssa said, \"But it could be manipulated for evil. Just like Jeremiah's power, he could choose to use it selfishly, which would be evil-ish. I think the powers behind the United Priesthood use all of the powers in their 'angelic lineages' in a corrupt way.\"\n\n\"Why do you suddenly believe in angels,\" I asked Aly, \"That is so different than your normal empirical method.\"\n\n\"I don't believe in angels,\" Alyssa argued, \"It's the only term I could think of to explain these powers we've all empirically test. We've all explored our abilities in different ways, at different times. I can't explain it scientifically, but I can't disprove it either. Something in our genetic makeup perhaps, but I don't know enough.\"\n\n\"So you think these lineages charts are the real deal?\" I asked, disbelievingly, \"That we've descended from fallen angels?\"\n\n\"I think fallen angels are what ancient people thought was the best way to explain something that to them was supernatural.\" Alyssa said pushing up her glasses, \"Normal humans didn't have these powers, and only a certain number of people did. They'd have to make up a story that made sense from their experience. They knew nothing of genes, or DNA, or anything we've discovered in the last 100 years.\"\n\n\"Fascinating,\" came a sarcastic voice from the direction of the kitchen. \"How is all of this going to get the table set for dinner?\" asked Carmen with a wink.\n\n\"I guess we'll have to take this up later,\" Alyssa said standing up and heading to the dining room. \n\nKelly and I followed and in a about a half an hour the table was set the best it could be given the state of our cupboard. A mishmash of dishes I'd collected, some flowers that Lexi had gathered from the garden in the back. Kelly added a table cloth from her things, and the table was ready.\n\n\"I still smell like sex,\" Kelly said, as she arranged the chairs, \"I need a shower\"\n\n\"So do I!\" said Lexi, \"sex and rock climbing isn't a good scent.\"\n\n\"Me too,\" Carmen said, \"fajita flavored sex is an acquired taste.\"\n\n\"You three take the downstairs shower,\" Alyssa said, \"And no monkey business, or at least not too much.\"\n\nThe three girls giggled and headed downstairs, while Alyssa looked after them with a flash of concentration across her brow. Then she looked at me and took my hand, and headed to the upstairs shower.\n\n\"What did you tell them to do?\" I asked.\n\n\"Oh, you caught that?\" Alyssa said, \"Just to get clean, and a reminder to Kelly to keep the sex angel tuned down.\"\n\n\"What is up with that?\" I asked, \"When did you start using that power.\"\n\n\"Before I really understood what it was,\" Alyssa confessed, \"I just started realizing I could influence each of you. At first I thought it was your connection that I was able to tap into, but I was wrong.\"\n\n\"So what can you do,\" I asked as we entered the upstairs shower room, turning on the water, \"and we'd better shower quick, we only have so much hot water.\"\n\n\"Well according to that one source,\" Alyssa said, \"The Peneume lineage have the ability to influence thought, a higher power of suggestion. A mild form of mind control. It's not like a puppet thing, people seem to react according to their own wills. The nearest comparison is hypnotic suggestion, but I don't require the subject to be in a trance.\"\n\nAlyssa had stripped and slipped inside the shower, and I followed, and started scrubbing her back, her flesh felt so wonderful under my fingers, as I leaned and kissed behind her ear.\n\n\"You can't force them to do something against their wills?\" I asked, and turned her around so the water soaked into her hair. Her breasts and nipples brushing against my chest.\n\n\"No, that's where my powers are limited,\" Alyssa said, her blue eyes lifting to mine, \"You have the ability to change wills. Together our powers are a bit overwhelming to conceptualize\"\n\n\"I can see why they called people like us demons,\" I said, \"Without care, we could cause some serious damage.\"\n\nWe both got quiet as she started soaping my chest, and I poured shampoo in her hair. We concentrated on cleaning each other while we thought our own thoughts for a few moments. We enjoyed small touches, and a bit of arousal, but the thoughts in both our heads had us distracted from the pleasures of the flesh.\n\n\"So...\" Alyssa said as we started rinsing the last of the soap, \"Kelly's parents. I think we can just start a discussion about her mother's background, and her grandmother's past. That should light up her moral curve with thoughts of polygamy.\"\n\n\"Yeah,\" I nodded, \"then I can shift her to be more accepting, much like Jerry. Then mirror those onto Bob.\"\n\n\"Kelly's pregnancy might need something more,\" Alyssa said, \"You'll have to think quickly.\"\n\n\"As a backup,\" I said, then quieted.\n\n\"What Jeremiah?\" Alyssa said, turning off the water, then looking up at me.\n\n\"Well, do you think you can influence them,\" I said with some trepidation, \"If the discussion goes in a wrong direction.\"\n\n\"Oh,\" Alyssa said, then covered her mouth, as she thought about what I was suggesting, then lifted her eyes to look back up at me, \"Yeah, I think I could.\"\n\n\"I don't want you to,\" I said, \"If it makes you uncomfortable.\"\n\n\"It's not that I'm uncomfortable using my power of suggestion,\" Alyssa explained, \"I'm not sure I can influence people I don't have a connection to. With my sisters, it's easy we've been entangled together...\" Her thoughts drifted as she thought about it more, then resolutely she said, \"We have to do this, Jeremiah. This is key to all of our plans, we need Bob and Betsy on our side.\"\n\nI nodded slowly, knowing what she said was true. We toweled off and got dressed in clothes for dinner. The three girls were buzzing with nervous energy as we came back downstairs. We all hugged, and then sat on the sofa. Alyssa put away the books, and papers. Then the doorbell rang, and Kelly rushed to the door, opening it up and hugging her mother.\n\n\"So glad you're here!\" Kelly said excitedly, \"Come in and meet everyone!\"\n\nAs the girls and I exchanged hugs with Kelly's parents, I took a moment to assess Betsy. Kelly's mother shared the same genetic lineage as her daughter and her mother. She was a remarkably beautiful woman. She didn't seem to be the mother of a twenty year old. Her dress and demeanor was of a confident woman whose sexuality was as much a part of her as breathing. I could start to see where Alyssa's theory might have some bearing.\n\nCarmen made a show out of bringing out platters of tortillas, braised meats, vegetables and sauces. The aroma was amazing, and everyone was soon putting their plates together and eating the delicious meal. I waited and scanned Kelly's parents, if the discussion started to change into more tenuous grounds, I wanted to understand how they felt when they were relaxed and happy. \n\nFinally as the meal started to wind down, Alyssa started the conversation.\n\n\"Kelly was telling us about her grandmother,\" Aly said with a smile, \"It seems we come from the same part of Montana.\"\n\n\"Oh dear,\" Betsy smiled, \"I hope it wasn't the same part as my mother.\"\n\nHer curve was suddenly alight with friction and conflict. I monitored as Alyssa led the conversation, and tried to find the right places to massage her curve and allow her to accept our relationship. I was also scanning Bob and noticing that his curve had similar conflicts as his wife's anger and shame. Except Bob had other things affecting his attitude, I thought he would be more accepting, his idea of male leadership in a relationship seemed to be an opening I could use.\n\n\"I'm afraid it probably was,\" Alyssa said, \"I was removed from my family before I was four and made a ward of the state. I was always curious about what that culture was like to live in.\"\n\n\"Well, I never lived in it,\" Betsy said, her face a bit flush, either from the meal, the margaritas Carmen had crafted or both, \"But momma shared many stories of the group that ran her compound. Some pretty fantastical to tell the truth.\"\n\n\"Oh, like how?\" Alyssa said, \"I'm studying some genealogy to get a better understanding of my heritage, it's hard to piece together as an orphan.\"\n\n\"You don't want any part of that heritage,\" Betsy said harshly, \"You couldn't imagine the conditions in which they kept the women. Women your age were too old to be of any use to the lecherous older leaders. The lucky ones were wet-nurses for the poor young mothers, while the unlucky were basically used as slave labor. Everything from hauling lumber, to mining. The men did little work, and the older men would prey on the younger daughters. They would use a 'word of God' to steal younger girls away from the family, and basically rap...\"\n\nThe table quieted as Betsy stammered in her anger, \"You know what, this is not a good topic for around a table.\" Betsy composed herself and smiled at Carmen, \"This was a really special meal, Carmen, thank you.\"\n\n\"Maybe we can talk more in the living room,\" I asked and excused myself, standing up, \"Kelly and I have some news to share.\"\n\nI thought I had the composition of her conflict well mapped, and as we moved to the living room, the five of us sitting on the sofas, while Bob sat on the loveseat, and Betsy squeezed closely against him. Bob looked at me with a steady gaze, and I thought it was best just to tell the truth, and move things from there.\n\n\"First, I need to apologize to both of you,\" I started, and placed my hand on Kelly's thigh, \"I wasn't completely candid when we met the last time, I didn't meet your daughter on the internet researching bed and breakfasts.\n\nOn my other side, Alyssa quietly slipped her arm behind mine, and softly held my elbow as I spoke, her unspoken confidence helped me with what I had to say. For the first time I was going to try to explain everything that had happened between me and the women I loved. It was high stakes, but with Kelly on one side of me, and Alyssa on the other I felt confident.\n\n\"Oh? How did you meet?\" asked Betsy slightly taken aback by my confession.\n\n\"We met at her dorm,\" I said, \"I was visiting with my team from ROTC, and saw her crying in the courtyard. I tried to comfort her, and we found we had a connection.\"\n\n\"It was so instantaneous, Mom,\" Kelly added, squeezing my hand, \"I know you raised me to be chaste until I was married, but...\"\n\nShe trailed off, and Betsy's face turned pale as Bob's turned bright red. As their shock and anger started to take hold, I pushed and adjusted their curves. Their conflict over their love of their only daughter and what they raised her to become was a rather simple change. Love is a powerful emotion, and pushing down their self-imposed structural morals was the easy choice to change. The color in both their faces eased, and they exhaled a sigh as my changes took hold.\n\n\"So what are you telling me?\" Betsy asked.\n\n\"I'm pregnant,\" Kelly said and squeezed my hand and smiled at me.\n\nBetsy took a moment to digest this revelation. To her credit she didn't get angry, nor was she upset with that bit of news. Her eyes darted to mine, and I nodded. Then her gaze shifted to Alyssa and then down to where Alyssa's ringless hand was curled around my arm, resting in the crook of my elbow. Then her gaze reversed to Alyssa's eyes, then to mine. Her eyes squinted slightly, then back to her daughter's where they opened as she took in all the unspoken clues.\n\n\"It's Jeremiah's?\" she said, more statement than a question, \"Alyssa knows and is okay with it?\"\n\nI could feel it as her thoughts tumbled through her moral structures like a runaway train, her curve was sparking in many areas. Bob was struck dumb, and kept looking at me, then back at Kelly. The kicker for him, was seeing Kelly's smile, that was so radiant in that moment. His daughter was happy, and he was comfortable with anything that made her happy. All the conflict that was teeming in his wife's mind was inconsequential to him. Betsy was a mess, but she at least understood more truly the ramifications of the puzzle she was putting together in her thoughts.\n\n\"And, Carmen, ... Lexi?\" Betsy asked in a soft question her eyes drifting to the other two women I loved as she watched them, holding hands, obviously a part of the relationship as it was plainly revealed to Betsy what we five represented.\n\n\"Oh Kelly,\" Betsy finally said, \"Are you sure? Is this what you want? Baby? Polyga... This ... family?\" Her voice asking a question within a question, as if family wasn't the right word for our fivesome.\n\nKelly got up and went to her mother, sliding to her knees, \"Mom, this family means everything to me. Jeremiah, Aly, Lex, and Carmen, we are family. The baby is all of ours. We love each other.\"\n\nKelly's eyes lifted to her mother's with such a deep emotion. Betsy's eyes filled with tears as she looked at her daughter, and her love for her broke down her own conflicts better than any of my adjustments. She leaned down and hugged her daughter tightly, kissing her cheek.\n\n\"Then, they are my family too.\" Betsy pulled back to look Kelly in the eye, and then to all of us one by one, as if recording our faces in her memory bank.\n\nBob looked slightly confused, as his mental processes caught up to the lightning fast thoughts of his spouse. He looked at her with concern as Kelly and her hugged and cried tears of happiness. There was concern in his eyes as he looked up at me, then across the room at the other three women. We caught his gaze one by one, showing him our own resolve and he nodded at us one at a time, then slipped to one knee and gathered Kelly in a big bear hug. \n\n\"Kelly, babygirl,\" He said in a low voice full of emotion, \"We love you, we will love your child, and we accept your family.\"\n\nIt took a few minutes of silence for the air to return to the room. We all sort of relaxed, and Lexi came to sit between my legs, feeling fully accepted. Carmen squeezed beside Aly, and hugged her tightly. Kelly turned still on her knees and stayed at her mother's feet, smiling at me with a large smile of satisfaction. Bob slipped back into his seat and hugged his wife, kissing the top of her head. Betsy quietly combed through Kelly's hair then lifted her gaze back up to me.\n\n\"Will you give me the gift of seeing my baby girl properly married?\" she asked quietly.\n\nI nodded, and stood up, reaching into my jeans pocket and pulling out the four stoned ring that I'd been carrying with me everywhere I went. I held my hand out to Kelly, and helped her stand up, then hugged her tightly. I looked her in the eyes, then bent to one knee.\n\n\"Kelly, I love you,\" I said honestly, \"You mean everything to me. Please marry me.\"\n\nThe words were what needed to be said, but everyone in the room knew I was repeating it to each of the women I loved. Kelly nodded and I slipped the ring onto her finger, and she held it at arm's length, then held her hand to her chest. She waved me up, and waved to Aly, Carmen and Lexi, and we all hugged tightly. In our own web of acceptance, as Betsy and Bob watched with full acceptance.\n\nIf we were truly fallen angels, this night felt like a miracle. So much could have gone so wrong, but ended up going so right. I had no religious background, no real knowledge of God. But in that moment, I never felt more accepted and loved, by the people in the room, and the universe at large.",
        "Moments of peace are fleeting, of course, and as we soon found our seats, Kelly perched on my knee, Aly and Carmen at my sides and Lexi at my feet, Betsy got back to business.\n\n\"I've got my best contractor on getting this house ready,\" Betsy started, \"It would be best if it was empty for a while, but you all need a place to live.\"\n\n\"Well,\" I started, \"We thought we'd take a little driving vacation to Montana. I think we might be gone for a few weeks.\"\n\n\"Montana?\" Betsy asked, then remembered our conversation from the dinner table, \"I wish you'd decide to go to the coast, or any place other than Montana.\"\n\n\"I have to finish some details with my father's estate in Pinebluff.\" I said.\n\nThe color slipped from her face, \"No, Jeremiah, stay away from there.\"\n\n\"Why?\" asked Alyssa, still trying to put the puzzle of Kelly's grandmother together.\n\n\"They are evil incarnate,\" Betsy whispered, \"The United Priesthood has done things that are unconscionable. Why are you going up there?\"\n\n\"My father, well more my grandfather, I think,\" I started, \"was part of the priesthood. My father, it seemed, tried to fight against their criminal acts. We know he helped in women's shelters across the northwest, where UP was active in trafficking.\"\n\nBetsy nodded, she knew the stories, her eyes blazed with anger and hatred at the thoughts that raced through her head. She knew her mother's stories, and the more recent news stories that were beginning to expose their organized crime and prostitution rings. The United Priesthood had gone silent in the last few years, the controversies pushing them more underground and out of the blaring spotlight of the news cycle.\n\n\"My father left me a key to a safety deposit box in Pinebluff,\" I continued, \"We need to retrieve its contents. We also need to visit Kelly's friend Jenn back at her school. I don't want to make any contact with the Priesthood. I just need to know what my father knew.\"\n\n\"Be careful, Jeremiah,\" Betsy said, \"I understand you need to go, but why all of you?\"\n\n\"We can't be apart,\" I explained simply, \"We are linked, our hearts and fates are combined.\"\n\nThe girls physical bodies all contracted on me, as if to give my words a living example. Oddly, Betsy nodded, understanding fully what I was saying.\n\n\"I remember my mother,\" she said softly, \"She had periods, sometimes lasting months, where she experienced withdrawal-like pain after leaving that evil cult. She hated everything about them, but was somehow linked in a way I never understood. She constantly wrote letters to her ex-sister wives until she died.\"\n\n\"I'm sorry,\" Alyssa said quietly, \"Your mother must have gone through so much pain. I'm researching the United Priesthood, so we know as much as we possibly can. Is there anything of your mother's that might help me?\"\n\n\"Come to my house tomorrow,\" Betsy said, \"I'll give you all that I have.\"\n\nAly nodded, and I continued, \"Anyway, I think we'll be gone a few weeks, then be back home.\"\n\n\"I'll need more time to finish here,\" Betsy said, looking around at the house, then smiled as she had a thought, \"Have you set a date for the wedding?\"\n\n\"No,\" I answered then squeezed Kelly's hand, \"Did you have a day in mind?\"\n\n\"How about in three weeks,\" Betsy said firmly, \"Here in the garden, I'm sure we can have that ready by then. Then you five go on a honeymoon to the coast. I'll free up our best B&B in Newport for you for two weeks. Then we should have this ready to go.\"\n\nKelly looked down at me, then looked at each of her sisters. They all nodded, with a buzz of feminine excitement that men like Bob and I would never understand. \"That sounds wonderful mother, but you need to clear any wedding arrangements with me!\"\n\n\"Of course, dear,\" Betsy laughed, \"We've had enough conversations about this, that I know what you want better than you do.\"\n\n\"I worry,\" I admitted, \"We're trying to do too much too soon,\"\n\n\"We'll figure it out,\" Alyssa said with a grin, lowering her voice to mimic how I sounded. \n\nI laughed, \"Okay, then! I'm man enough to admit that you all probably have better plans than I do.\"\n\nEveryone relaxed, and everyone started having side conversations which went in many different directions. Kelly and her mother talked about getting a dress picked out before we left for Montana. Carmen pulled me close and reminded me about buying an RV the next day. Lexi begged to come with us. Alyssa talked with Bob about roads and directions. After about a half and hour, the conversations died down, and Bob grabbed Betsy's hand.\n\n\"C'mon dear,\" he said with a smile, \"Nothing more we can do tonight, we'll need our sleep to get all of this done in your accelerated timeline.\"\n\n\"Yes, my Love,\" Betsy said and curled into his side hugging him tightly, \"You always take good care of me.\"\n\n\"Likewise, love.\" Bob said as he ushered her out the door, and suddenly the five of us were alone again.\n\nKelly was practically buzzing. Her happiness had grown exponentially as the night progressed, and her body practically levitated. With are family now alone, she inhaled. Then she closed her eyes and a flash of concentration creased her forehead. Suddenly, it was as if her whole being began to glow, as she surrendered to herself, and allowed her true self to bloom. All of us simply stopped thinking of anything that was a distraction. We all turned to her, and followed her to the bed in the basement. \n\nWhen we arrived, we'd all shed our clothes on the trip down, almost in a trance. Kelly slipped onto the bed, her breasts full and round as she laid on her back. Her nipples were like small little diamonds on mounds of pink flesh. Her tanned flesh almost shone like bronze. The four of us could only crawl wordlessly onto the bed. \n\nLexi crawled her petite body near the headboard and on her knees beside Kelly leaned her mouth down to kiss Kelly's open mouth. Carmen walked around the bed, and then crawled up from the opposite side. Aly mirrored her movements on the near side, and they both ran their hands down Kelly's side, cupping a breast in each of their hands and lowering their lips to her rock hard nipples. I drew up from the foot of the bed, my eyes watching as Kelly breathed in heavy gasps. Her soft moans only arousing us more. She practically pulsed in need. On my knees, I lowered my mouth and grazed my lips along one of her firm thighs.\n\nOne taste of her open and flowing cunt made made me feel like drinking her arousal forever. Kelly pushed her hips up, and my mouth and nose were surrounded by her heady scent. Her body shivered as she pushed internally, sending a psychic wave of sexual need through all of us. I felt the pulse of power, internalized it, and reflected it out to my connected lovers, and the whole bed shook with our combined need.\n\nAlyssa leaned over and pulled Carmen's head up to kiss her deeply, their hands and fingers still molding and caressing Kelly's breasts. Lexi shifted forward and fed Kelly's full lips one of her firm nipples, Lexi looked at me and opened her mouth moaning in need. I shifted up, pushing my frame up Kelly's body. My cock slid against Kelly's abdomen as I leaned between Aly and Carmen to kiss Lexi as Kelly nursed on her breast. Lexi sucked in my tongue as Carmen started to lick and nibble on the flesh of my chest.\n\nI lifted my hips, drawing the head of my cock back and feeling Kelly's legs spread open as my cock notched into her opening. Her swollen labia blossomed and parted as my hips fell and I slid deeply inside her. She groaned around Lexi's breast as I filled her. Lexi slithered forward, her limber frame shifting so her thighs opened over Kelly's moaning lips. Alyssa bit at my nipple, as I rose up from kissing Lexi and started to move my hips slowly screwing the sex goddess we were all worshipping. \n\nAs Kelly's tongue parted Lexi's folds, Lexi convulsed, her body shaking as she came at the touch of Kelly's tongue. Kelly fed hungrily on Lexi's spending, licking and sending Lexi through a series of orgasms as I started to pound my hips deeper into Kelly. I rose up on my knees, gripping Kelly's hips and pulling her hips to my deep thrusts. She arched her back, keeping her mouth near Lexi's trembling pussy, feasting on her dripping fluids. I leaned forward, my hand gripped a handful of Lexi's red hair and pulling her towards me, thrusting my tongue into her mouth. \n\nAlyssa rolled over and snaked her body over Kelly's abdomen. I looked down and watched as she slid under me and Lexi. My whole body in a zen state, as I fucked Kelly, and kissed Lexi, I felt I could go on forever. Aly craned her head along Kelly's far said, and her arms reached to pull Carmen's core closer to her. Carmen kneed closer, her hips spreading as her torso rose. She pressed her mouth to my ear and sucked my earlobe as she moaned.\n\n\"Oh fuck, Papi, Aly is licking my clit,\" She cooed in my ear as I was still kissing Lexi as we rode either end of Kelly's body. \n\nCarmen slid down between Lexi and I, over Alyssa's arched body, I could feel her dark soft locks brush past my undulating abdomen. I parted the kiss to look down as she lowered her mouth to Aly's spread and open thighs. Aly arched her back more, grinding her cunt into Carmen's hungry mouth. Alyssa's body seemed to hover over Kelly's abdomen as she feasted between Carmen's thighs. The pair's sapphic connection pressed Kelly down into the mattress, anchoring her hips as I thrusted, driving my shaft deeper and deeper.. \n\nLexi panted as her hands gripped my shoulders. She body arched over the other three girls as she gasped for breath. Her small shuddering orgasms had progressed into full body tremors of a continuous wave of orgasm. She gripped me, pulled me, grabbed me. My body was her anchor as she rode the wave of passion coursing through her nerves, and then her body stiffened and she screamed in passion.\n\nLexi's final crest drove me into a frenzy. I slammed forward and ground my hips, feeling Kelly's cunt grip then tremble as she also tripped into orgasm. Almost simultaneously I felt my balls tighten then shudder, my cock shaft pulsed as torrents of cum flowed through the steel-like rod and shot deep into Kelly's womb. Carmen groaned as she felt the three of us orgasm, and the vibrations from her moan sent Alyssa into a spine stiffening orbit, her hips lifting as she came.\n\nI pulled back, and clung to Lexi's limp form, slowly pulling her to my chest, and rolling to the side on my back. Lexi resting on my chest, breathing raggedly, as if finishing a long race. My cock slipped from Kelly's spasming cunt only to have Carmen shift to the side and engulf my sensitive head in her mouth, sucking the remnants of my first orgasm. Her hand tightened around the base, and she nursed on my cock, not letting go flaccid. \n\nI turned my head and saw Aly shift her head, rolling over and sealing her mouth over Kelly's pussy, her hand pulling Kelly's legs apart as she lapped up our combined juices and spendings. Kelly slid her hand under Aly's thigh and twisting her flawless body to crane her open mouth towards Aly's pussy. Kelly slid under Aly's body reaching her hands up to peel open Aly's labia and take a long slow lick.\n\nI felt a renewed wave of passion flow through the room. I felt my cock stiffen in response to the psionic command. Carmen moaned as she felt it grow inside her mouth. Carmen pressed her head down, and started to gag herself trying to take all of me down her throat. Lexi blinked her eyes and found mine, and lifted her hands to my cheeks, kissing me deeply as she moved her body to face me, her breasts pressing against my chest.\n\nAlyssa moaned in heated pant, \"Oh fuck, yes, Kelly, fucking suck my slit!\" \n\nHer body stiffened as Kelly's magical tongue sent her into the heavens. Her mouth returned to Kelly's core as she repaid the needy goddess under her, feeding on her cunt and my deposited cum as Kelly ground her hips into Aly's mouth and nose. \n\nCarmen lifted off my cock with a wet sound, crawling forward to straddle me. She drew her knees past my hips as she lowered her tight cunt onto my rigid shaft. Her mouth kissed Lexi's back, then grabbed a handful of Lexi's hair.\n\n\"Roll over, slut,\" Carmen hissed as Lexi turned reflexively, spreading her thighs open.\n\nLexi rested her bottom on my chest as my mouth kissed and nibbled on her tight ass. Lexi arched back, her arms supporting her body as she reclined, arching her back over my head as I squeezed and kissed her firm round bottom. Carmen leaned forward and started licking Lexi's cunt lips. I could feel her drip her arousal on my chest, pooling in the space where my neck met my chest, as she rocked her hips into Carmen's hungry mouth. Carmen's hips pinned mine to the mattress and she rode my hard shaft buried to the hilt in her tight cunt. Her talented hips and torso rippled as she ground and rotated on my shaft.\n\nI lifted my hands to find Lexi's breasts, cupping them. I felt her need, and gripped them hard, pushing my fingers into the base of her small cups. I squeezed hard and she screamed at the bite of pain, in her need her hips lifted and ground harder into Carmen's mouth. I pulled my fingers down to trap her nipples between my fingers and thumbs. My hips grinding and lifting to Carmen's talented ministrations. I squeezed and pulled at Lexi's nipples roughly, tugging them as I gave her the bites of pain she deeply needed. \n\nOverwhelmed, Lexi fired off again, lifting her hips off my chest and spraying into Carmen's open mouth. Lexi's hips rocked, pounding her bottom into my chest, then lifting as she rode the waves of orgasm. I lowered my hands to her round bottom pressed up, holding her at Carmen's lapping and sucking mouth. Her moans of hunger amplified by Carmen's frantic grinding of her hips. \n\n\"Fucking cum on my cock, Carmen,\" I commanded, feeling my own crest rise, \"Fucking slut, cum for me.\"\n\n\"Oh fuck Papi!!\" she screamed as her head lifted from Lexi's quivering hips and gripped her own breasts as her back arched. \n\nCarmen ground her hips down on me as her cunt clenched my cock. Her inner walls vibrated as her body arched back. Lexi curled forward and cupped Carmen's breast as her brown flesh quivered. She sucked in one of Carmen's hard nipples as I lifted my hips and shot my second load deep into Carmen's womb. Groaning and growling.\n\nAs the three of us stiffened and then relaxed, curing into a circle of flesh, Alyssa was using two fingers curled inside of Kelly. Her mouth lapped at Kelly's tight button as Kelly's hips flexed and rolled. Aly's body shivered, her thighs quaking as her body slipped along endless waves of orgasms from Kelly's magical tongue. It was as if Kelly's touch drove deep into Aly's pleasure centers and her body was wracked with one continuous orgasm. \n\nAly's fingers finally found the pace Kelly needed, and Kelly's knees splayed open and her hips rose. Her cunt lips closed then flowered open and a jet of cum sprayed out and covered Lexi, Carmen and me as her screams of joy were muffled between Aly's thighs. Kelly's release allowed Aly to slide away from her, then twist and bring her mouth to the lips of the blonde center of our orgy. Aly kissed her deeply as her body still shivered in sated lust.\n\nSpent, yet also revived, the five of us slowly moved our bodies under the sheets. I lied back with Lexi curled into my side, and Carmen pressed beside her. Kelly laid her head on my chest, softly stroking my chest hair, as Alyssa wrapped her arm around Kelly's abdomen, her lips kissing Kelly's shoulder. We slowly slipped into a restful sleep. It felt like a warm glow of golden bliss as we slept a dreamless sleep.\n\nPresent: Isaac \n\n\"So what,\" Zac asked a bit perplexed, \"You can control people's minds?\"\n\n\"We can affect how people make choices,\" Jeremiah re-explained, \"by modifying their willpower and moral structures.\"\n\n\"I'm baffled,\" Zac said, his 12 years of schooling not preparing him for something seemingly supernatural. \n\nTo be fair to, Isaac had never heard about Jeremiah's power before. The family had decided to wait until the power would manifest, if it would manifest, before discussing it with him and training him how to use his supernatural gift. The mix between Kelly's magical attraction and Jeremiah's powerful influence made Isaac a special case. He was already the most attractive boy in the high school, winning homecoming king recognition, alongside Beth as his queen. The effect on Stacy had been the first apparent manifestation of Jeremiah's line.\n\n\"Think back to when you persuaded Stacy to kiss you,\" Jeremiah said, \"What was it like from your point of view? Give me as many details as you can.\"\n\n\"Well Dad,\" Isaac started still a bit embarrassed, \"She was very reluctant to get close to me, with Beth so near. I explained that it was a prank on you, for your birthday. She nodded that she understood, but still didn't engage with me. She could hardly look at me.\"\n\n\"Go on, Zac,\" Jeremiah prodded.\n\n\"Well, I lifted her chin, it was the first time I touched her, really.\" Zac confessed, \"and her eyes widened. I felt like her resistance to what I was asking fled, and she leaned and kissed me on the lips.\"\n\nZac blushed as he remembered, \"Then I backed away from her, and started kissing Beth. Just before you walked in. She leaned over me and kissed me more, pushing up against Beth. Frankly Beth got a bit upset at how aggressive Stacy had become.\"\n\n\"Touch is a very important component at the onset of manifestation,\" Alyssa explained, \"Over time you'll learn that touch isn't required. When you lifted her chin, you were able to push down her internal resistance to kissing you.\"\n\n\"There are two parts to your powers, Zac,\" Jeremiah continued, \"One is scanning and seeing how people respond to different stimuli, and the other is actual modification of their morals and will. This isn't a power to be used at a whim.\"\n\n\"I didn't mean to Pop,\" Zac said, \"You've got to believe me.\"\n\nJeremiah smiled, and placed his hand on his son's shoulder, \"I do believe you, son. My first experience with my powers was also unintended. I didn't realize what I had done.\"\n\nJeremiah looked up at Alyssa and smiled, taking her hand, \"It changed my life, in an instant. What we want for you is the ability to use our powers in a way that doesn't cause dramatic changes in your life. I was able to undo your modification to Stacy.\"\n\n\"How can I learn?\" Isaac asked, still a bit confused and wary.\n\n\"I'll set up some experiments with some of my grad students,\" Alyssa said, her connections to the University had her on staff as an adjunct professor, \"We will run through some scenarios, so you can better understand the moral curves of people. We'll start tomorrow, after school.\"\n\n\"Okay, I guess,\" Zac said quietly, \"I'm a bit afraid to talk to Beth, she's a bit steamed about what happened with Stacy. She means so much to me.\"\n\n\"Tell her that I hypnotized her,\" Alyssa said, \"I'll explain to her and apologize if it would help.\"\n\n\"Thanks, Aly\" Zac said, standing and hugging her tightly, \"You've always steered me right.\" Isaac left and returned to the party. \n\nAlyssa stood for a moment as a tremor of lust coursed through her nerves, then her body sagged. Jeremiah reached out and pulled her to him, perching her bottom on his knee.\n\n\"That boy,\" Alyssa said softly, her knees spreading apart on Jeremiah's familiar lap, \"His touch is like fire, much like when Kelly is in one of her moods. We need to discuss that side with him too.\"\n\nJeremiah slid his hand along Aly's thigh, cupping her thong covered mound and feeling her arousal.\n\n\"Damn, Aly,\" Jeremiah said with a wink and a smile, \"He's practically your son! Have some restraint.\"\n\n\"Ohhh, you'll restrain me?\" Aly moaned softly, smiling at the thought, \"and I don't even have to beg for it?\"\n\nThe couple started kissing and groping in the dim light of Jeremiah's study. They had relaxed after the discussion with Isaac over. They gave into the bit of lust Isaac had leaked into the room, letting it flow through Alyssa as Jeremiah pushed his fingers aside her thong, and brought her to a quick orgasm. He smiled as he felt her return to a more normal controlled state, and they kissed softly.",
        "\"A incubus that can mold people's will,\" Alyssa sighed, partly in release, and partly troubled, \"that boy needs to be watched closely.\"\n\nPast: Jenn\n\n\"Hello,\" said the voice over the pay-phone line, \"This is Jediah.\"\n\n\"Jed, Michael.\" said the college-aged kid, looking back at the girl that was waiting in his car.\n\n\"My name isn't Jed, Michael, it's Jediah,\" the voice said sternly. \"What do you got?\"\n\n\"She's a hot one, Jediah\" the boy said, over-stressing the syllables to appease his boss, \"She is a total slut, does all I want, and wants.. no needs more.\"\n\n\"Excellent,\" Jediah said, \"she should fill the spot in Fallon nicely. How soon will you have her ready?\"\n\n\"I don't know, it won't take long to finish the background on her.\" Michael said darkly, \"Don't want to leave her parents wondering about her. Something off about her though?\"\n\n\"Oh? What is that,\" Jediah asked.\n\n\"Well, before last term she was straight As.\" Michael started, \"She was a model student, until the last few weeks of the term, then she ended up in the hospital.\"\n\n\"What for?\" Jediah drawled.\n\n\"Exhaustion and dehydration.\" Michael said, \"It's odd, she said she'd gotten sick from too much sex. But I can't believe it, because this girl is simply insatiable, always hungry. Like she's filling an unfillable void.\"\n\n\"Interesting,\" Jediah said, and remembered something from many years ago, \"I'll talk with Deacon, you just keep her on the leash, you hear?\"\n\n\"Yes, sir,\" Michael said, \"Call you in a couple of days.\"\n\nMichael hung up the phone, and pulled back on the line that was attached to his coin, pulling it back from the slot. He shuffled back to his car, and slid in looking over at the pretty girl sitting in the passenger seat.\n\n\"Where do you want to go, Jenn?\" Michael asked kindly.\n\n\"Back to your bedroom,\" Jenn said with a twinkle in her eye, \"I'm famished.\"\n\n*****\n\nAuthor's Note: I hope you enjoyed this chapter. I've got the next chapter in draft form, and setting up some more lines. It's an expansive story, and I hope you enjoy the characters as they learn about who they really are. Special thanks to mgenette for his editing and encouragement. Thank you for your votes, comments and favorites!"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "fffm",
        "love",
        "orgy",
        "fingering",
        "drama",
        "submission"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-pt-02-ch-07"
}
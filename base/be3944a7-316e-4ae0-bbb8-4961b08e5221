{
    "title": "The Strangeness Within Pt. 07",
    "pages": [
        "...*** Chapter 41 ***...\n\n\"This is a beautiful place,\" Raj said, then expertly flipped another omelet. \"But your spice selection is atrocious.\"\n\nJavier smiled. Despite all the events of yesterday, the professor was remarkably relaxed. Or maybe it was because of all that. In any case, Raj was winning points from everyone for his breakfast. \n\nIt was noon, and everyone aside from Mark looked like a zombie. It had been near dawn when they finally got in to the mountain camp.\n\n\"You're welcome to stay as long as you like, Raj,\" said Javier. \"And it's not just because of your killer eggs.\"\n\nRaj nodded, but his expression faded slightly. He put the last omelet on his plate and joined the others.\n\n\"How long do you think I have to hide out here?\" he asked. \"By sheer luck I'm not teaching this semester, but I have other obligations when the term begins. I still wonder if it would be better to get the local police involved in investigating my abduction. Or the FBI. Or even the media. The Unit is not all-powerful, and too much exposure would be dangerous for them.\"\n\nThe three of them had argued about this during the last part of the drive, and for a while now they continued their discussion. In the end, though, Raj reluctantly agreed with Javier and Esther. The Unit had been desperate to kidnap him in the first place. Desperation was dangerous, and Raj was probably high on their target list because of his link to Lukas. Their hope was that the Unit believed the rescue to be entirely Lukas's effort. But if so, the dramatic rescue would only cement the Unit's belief that in addition to what he knew, Raj would be a useful hostage to use against Lukas.\n\n\"They'd be wrong about that, though,\" said Raj. \"Lukas is a changed man. I think he would sacrifice me now, if he had to.\"\n\nEsther and Javier spent the rest of the afternoon answering Raj's questions about the events of the last months, and the extent of Esther's abilities. Finally, he sighed.\n\n\"I knew you were special,\" he told Esther. \"I had no idea how right I was. You are more important than any of us. I don't want you to do anything that would expose you to danger, even if it's on my behalf.\"\n\n\"I have these abilities for a reason,\" Esther said stubbornly. \"And I can already protect myself.\"\n\n\"Well then,\" Raj said. \"As it happens I have some suggestions for you. Am I right that there's only a single access road up here?\"\n\nEsther nodded. \"Well, technically there's a logging road you could take all the way over the ridge. But it hasn't been maintained for years. Even with the truck we'd have to stop to clear downed trees or boulders.\"\n\n\"Then I suggest we start doing that maintenance,\" said Raj. \"Better to have the option.\"\n\n\"You're right,\" Javier said. \"We should have thought of that.\"\n\nRaj waved that aside. \"Actually, it's useful that there's mostly just the one access. Esther, I assume you're constantly watching for visitors?\"\n\n\"Yes,\" she said. \"It's a little exhausting, but it already saved Mark and me once.\"\n\n\"But that isn't the only way to do it,\" Raj said. \"There are technological solutions as well. We could put infrared sensors way down on the road and link them up here with microwave transmitters, all running off solar and battery power. And that's not all. You could use the same transmitters to transmit other data packets. There's no reason you couldn't have a slow connection to the Internet up here, with encryption even. Think about how helpful it would be to have secure communications to the outside!\"\n\nJavier's mouth dropped open, and he could see Esther was equally stunned. They took for granted the camp's isolation, for good or bad. But what would it be like if he could keep in touch with Kat from up here? And maybe even Mam\u00e1? No more driving all the way to Reno to mail anonymous letters.\n\n\"I think that's brilliant,\" said Esther. \"Could you and Javier work on that together? The intruder sensors first. It would give me such peace of mind to have a backup for my abilities. Right now, though, I'm overdue for some meditation.\"\n\nShe kissed Javier quickly on the cheek and then off she went to Abuela's cabin. It was now their cabin, he supposed, for however long he was going to be living here.\n\nIt was three weeks until the term began at San Jose. He should be out buying school supplies and dorm furniture. Excited to meet whoever his new roommates were. \n\nSometimes he imagined there were multiple Javiers out there. One little decision here, one there, adding up to a different life. In another universe Javier was doing all of the normal preparation for college. That Javier would be eagerly registering for computer courses, pestering Kat for help so he could be top of the class right from the start.\n\nYet another Javier might never have met Kat. Or Esther. He'd be going to a different state school, wondering what he was going to do with his life. Wondering if he were missing something about the world.\n\nThe Javier in this universe smiled at Raj. \"So, explain to me how this is going to all work. And when we're done with that, we'll figure out what I need to buy in Reno. Remember, despite all appearances, Esther is fantastically rich. We have an unlimited budget, so better to buy more than we need so I don't have to drive out there again.\"\n\nRaj nodded eagerly and began to describe a project he'd done with similar infrared sensors for a prank during grad school. It was a whole new side of Raj, and soon Javier was wiping away tears of laughter.\n\nYou never truly knew anyone. That was the joy and sorrow among friends or lovers: the promise of future changes in your relationship. Nothing was guaranteed except the change. Javier was going to be someone different tomorrow, and Esther might one day be as strange as Abuela, or stranger. She would likely be alive for decades after Javier was nothing but a memory.\n\nBut Esther never forgot anything.\n\n* * *\n\nEsther made that tiny little gasp, the one he could never get tired of, and Javier crushed her naked chest against his. He kept stroking her favorite sensitive patch on her back, and she rocked back and forth across his dick. They'd tried this in a couple positions, but having her sit on his lap was probably the most satisfying yet. The curve of his dick didn't make it the easiest, but he could touch her the way she wanted. As much as he loved her nipples and tiny breasts, it was her back that gave her the best orgasms.\n\nShe weighed so little that it hardly mattered if she sometimes caught his dick awkwardly. Though her odd physiology did produce some lubrication, she never got very wet, and the friction was almost too much for him. She loved it, though, and that was what mattered. \n\nOne of his hands slid lower, until he was holding almost her entire ass in his palm. His dick looked gargantuan every time it pistoned back between her lightly furry thighs.\n\nEsther made encouraging noises when he massaged her butt, and he slowly moved his finger nearer her asshole. She leaned to give him better access, and he swallowed. Maybe she really did want to be touched there. He thought he'd imagined it.\n\nWhen his finger finally reached her puckering hole, she sighed and pressed right against it. Javier had sudden visions of her sliding forward and sitting right on his cock, her asshole so tight that at first he could only get the head in, and then ...\n\nHis vision dimmed and his cock spurted heavily, thick ropes of semen covering both of their abdomens, as if the earlier orgasm had been only foreplay. Esther kissed him and told him he was beautiful and held him through it all, her own pleasure forgotten. \n\nWhen it was finally finished, he started to stroke her ass again, the way he had been, but Esther squeezed his hand and pulled it away. He'd missed his chance. But maybe at least he could raise that possibility he'd been too nervous to mention before. Kat was right: this wasn't a first-date situation. She liked being touched on her ass, and maybe more. She'd never be offended or find it disgusting. The worst that could happen is she wouldn't be interested.\n\nHe tried to imagine how Kat would suggest it to a lover. Totally upfront. She and Andrea wouldn't beat around the bush, so to speak. \n\nBut in the end he couldn't bring it up. Their sex had been so perfect, but then he'd come too fast and ruined it. And now he was already started fantasizing about Kat and Andrea. There would be a better time. \n\n* * *\n\nEsther lay next to Javier, sweaty from their lovemaking, working to reestablish her meditative discipline. The wild flights of exploration she could manage during orgasms were a guilty pleasure, though she knew they were a necessary one. It was so hard to keep a balance between exploration of her abilities and the constant vision she needed for everyone's safety.\n\nIn the other cabin, Raj was starting to take off his clothes, and Esther flushed, pulling her senses a different direction. A squirrel dug furiously, sensing the slow turning of the weather. A mother deer and two juveniles nestled together for warmth in a bed of soft reeds. Farther away, a small truck moved steadily along the highway towards Sierra City. Everything safe.\n\nEsther stroked Javier's naked chest, eventually moving down to encircle his flaccid penis. He sighed and shifted, and she felt him slowly begin to harden again. He'd had two orgasms already, and the next would take time. It would be highly satisfying for him if she could get him there. But she was distracted as always, and she couldn't shake something he'd murmured during his fitful sleep that morning.\n\n\"Javier,\" she said slowly. \"Do you miss Kat?\"\n\nHe looked at her with nervous confusion.\n\n\"Why? What do you mean, Esther?\"\n\n\"Uh, physically, I guess. I mean, I know you miss her as a friend.\"\n\nJavier didn't say anything for a long time. Finally he sighed.\n\n\"We didn't really have anything physical together,\" he said. \"Well, that's not true. We slept in the same bed, and that's pretty intimate. We were closer than just friends. But I don't know what she looks like naked. It's complicated. For a long time I didn't even know she liked men, but it turns out she's bisexual.\"\n\n\"Oh,\" said Esther. \"You mean, like me.\"\n\nShe realized she'd shocked him. But she'd told him about Nicola \u2014 she remembered exactly the words. Maybe he thought that was a sort of aberration? \n\nOr maybe it was because she'd described it as though Nicola was doing a favor for her, the same way she'd described it with Mark. \n\nShe started moving her hand faster, and Javier sighed as his penis hardened. He didn't seem forthcoming about Kat, which told her enough. She didn't mind if he thought about Kat. Esther missed Nicola a lot, and she even missed what she'd had with Mark, though to her relief Mark seemed complacent enough about it all.\n\nShe wished everything were simple, that it was just her and Javier, and all the time they needed. Even now she couldn't devote her full attention to him. Maybe one day her vigilance would be so unconscious that she wouldn't resent it. Maybe Raj's electronic surveillance would let her relax a bit. A lot of maybes. Until then, she'd have to do the best she could.\n\nJavier moaned her name when she put her wet lips over the head of his penis. Right now, she could at least try to be the lover he seemed to think she already was. \n\n...*** Chapter 42 ***...\n\nEsther fixed her mind on Javier as he drove the sedan. He was finally approaching, a little too fast on the last paved section of road below them. \n\n\"He's almost there,\" she told Raj.\n\nA minute later, a red light blinked under the cabinet, and Esther and Raj broke into smiles. \n\n\"I guess it works, then,\" said Raj. \"Great. You still want to start on the harder part? Connecting up to the Internet? If we get that done, it'll never be the same up here.\"\n\n\"It never is,\" Esther said, and Raj smiled.\n\nJavier was delighted when he heard the good news. For a while the three of them sat and enjoyed the feeling of security. It wasn't foolproof, of course. Andrew might not have come up the road when he'd ambushed them that horrible night. But it was a big improvement nonetheless, particularly for anyone else if Esther had to leave the camp.\n\nSoon enough their conversation turned to Esther's abilities. With Raj here, it was like another puzzle to solve.\n\n\"I was thinking about our discussion yesterday,\" said Esther. \"There are too many things I don't understand about my abilities, but one of them keeps nagging at me. Do you remember how I described Nicola's talents?\"\n\n\"She could feel the structure of matter even down to small scales,\" said Raj. \"Like a human electron microscope. Remarkable.\"\n\n\"Right,\" said Esther. \"But she could sense even smaller things than that. The problem was, everything got fuzzy.\"\n\n\"Wait,\" Raj said. \"Are you suggesting she could actually feel quantum uncertainties?\"\n\n\"Yes!\" Esther said. \"That's what we thought. I can feel it too, when I enter the abstract space of connections. Most of the connections are extremely short-lived, and everything is in flux when I look closely.\"\n\n\"Almost as though you're seeing the quantum correlations themselves,\" Raj mused. \"You said everything was connected to everything. Well, that's exactly what quantum correlations describe.\"\n\nEsther nodded. \"Perhaps, at least some simplified picture of it. I'm far out of my depth here. But I do know there's something terribly off about the chaotic butterfly description that Abuela gave me. You see, what she did shouldn't be possible at all, once you worry about quantum mechanical disruptions. Even my passive abilities seem hard to reconcile.\"\n\nRaj started to nod. At Javier's confused look, he tried to explain.\n\n\"Quantum mechanics is the seed of uncertainty that underlies most everything we think of as unpredictable. Any chaotic system will seize quantum mechanical uncertainties and amplify them into uncertainties on the human scale. Imagine you were trying to balance a sharp pencil perfectly on its point. Even if you were a machine, there would be a problem: at the smallest scales, the pencil is wobbling slightly due to quantum uncertainties. But every wobble gets amplified by gravity, and then the pencil begins to fall that random direction. Almost everything we think of as random behaves like this.\"\n\n\"Butterflies are everywhere,\" said Esther. \"Little changes turning into big ones. But quantum butterflies aren't useful, because they're fundamentally unpredictable. And they should be destroying the subtle effects of the butterflies Abuela so carefully searched out. They should be fuzzing out the kind of listening I'm doing, far closer than the distances I can manage. The only way around that is to find places where quantum butterflies can't disrupt a signal. It's not chaos I'm looking for, but rather the rare islands of order.\"\n\n\"Like seismic waves,\" Javier said. \"You discovered you could hear much further using bedrock and listening like a seismometer. People did that before they even knew what quantum mechanics was.\"\n\n\"Exactly,\" said Esther, smiling at him. \"Signals don't lose energy quickly as they travel through rock, and maybe that shields them against these quantum butterflies.\"\n\n\"Also, waves act with simple superposition,\" said Raj. \"That means two waves can pass through each other without affecting one another. So you're looking for places in physics that are stable and predictable. But maybe not too stable, because you still want to find your own butterflies.\"\n\n\"Computers,\" Javier blurted. \"This is something computers are designed for.\"\n\n\"Hmm?\" Raj asked.\n\n\"It was in an article. They do error-correcting in computer chips, so that if a cosmic ray or something hits them, they can keep computing correctly. But it's kind of a race, because it's getting a lot harder as the wires on the chips get smaller.\"\n\nEsther's heart began to hammer and her mind raced ahead. Javier was completely right. Abuela had explained the reason it was easier to affect sensitive humans at a distance was that humans were always balanced among decisions, and a small sensory input could push them one way or another. But computers were designed in the same fashion. And it was more than that: humans had connected computers at great distances, allowing the programming choices of a single computer to propagate more perfectly than even seismic waves. \n\n\"Javier, Raj,\" she said slowly. \"You have to teach me about computers. The Internet. Everything.\"\n\n* * *\n\n\"Are you sure you'll be all right?\" Esther asked.\n\n\"Yes,\" said Raj. \"Mark will be babysitting me the whole time. I have plenty to occupy me, trying to get all this technology working. It's the perfect time for you to visit Kat. Give her my best.\"\n\nThey took Javier's sedan, and a few hours later they were checking into a seedy San Jose motel. As he'd hoped, the person at the desk wasn't surprised when he paid with a wad of cash.\n\nThe room was worse than he'd expected, but at least they wouldn't be presuming on Kat's hospitality. Her bed might have been big enough for two, but all that was over anyway. Javier was still pretty nervous about this extended visit, but there was no substitute for Kat's computer knowledge and her custom-built computers. Esther needed to see if some of her recent theories made any sense, and this was the place for it.\n\nKat picked them up at the motel, and when they got back to her room, she was all business right off.\n\n\"I cracked a few passwords from a weakly-encrypted hash stored in that InforCorp data,\" she said. \"Unfortunately, I failed at installing that backdoor. I was nervous and in too big a rush and I made a dumb configuration mistake. But it's not all bad. They don't seem to have noticed my incursion, and with the passwords I gleaned I've already gotten a lot of personal information on InfoCorp employees, plus a whole cache of internal E-mails. Nothing that gets me to any computers outside the Fresno location, though. A good return, but not a jackpot.\"\n\nEsther found a spare chair to sit. \"Javier's told me a lot about you, Kat, but I'm getting a sense of how very skilled you must be. Now, I have some ideas, and I want you to be very honest about whether they make any sense.\"\n\nShe tried to explain her theories, and Kat nodded from time to time.\n\n\"You're saying you might be a kind of mind-magic hacker,\" Kat eventually said. \"But first things first. What can you sense from a computer, anyway?\"\n\nEsther shook her head. \"I've never really tried. I'm hoping that with the crash course from Javier and Raj I might at least be able to sort through some things, but they were having trouble getting the equipment working up in camp, and I was impatient.\"\n\nKat smiled and went rummaging around in her closet, returning with an old Apple II. She plugged it in and sat down to type.\n\n\"This is probably the simplest thing I have that qualifies as a computer, unless you want to play with a graphing calculator. I'll write a quick program in BASIC, and maybe you can tell me what you sense.\"\n\nA few minutes later Javier smiled when the monitor began to list the prime numbers in sequence. Esther looked dubiously at the machine, and then she put her hand on the monitor. \n\nAfter a while she sighed and shook her head unhappily. \"Nicola would probably be better at this,\" she said. \"It's hard to explain, but I can't focus close enough. Everything's unfamiliar and the details keep slipping away.\"\n\nJavier stroked her shoulder gently. She was incredibly tense. He looked at Kat, who also seemed uncomfortable. \n\n\"Hey, Kat,\" he said. \"I think I should talk to Esther a little alone, if that's OK. Is there a good place \u2014\"\n\n\"Oh, no problem,\" Kat said. \"Good excuse for a cup of coffee from the place on the corner. Twenty minutes or so?\"\n\nWhen Kat left, Esther sighed and hugged Javier.\n\n\"What's up?\" he asked.",
        "\"I'm just too distracted,\" she said. \"I keep worrying about Mark and Raj, and then my mind flies over there, and of course they're fine. But I can't turn it off, and it's preventing me from focusing on new things closer to hand.\"\n\n\"Would it help if I held you?\"\n\n\"The only thing I'm sure would help is an orgasm,\" joked Esther. \n\nExcept it wasn't a joke. But it was kind of funny, really. Javier smiled, and then he kissed her on the neck just so.\n\n\"What? No, we can't do that here,\" Esther giggled. \"It's not right. And Kat will be back in sixteen minutes.\"\n\n\"Exactly sixteen? We better hurry, then.\" Javier slipped his hands under her shirt. She sighed when he started rubbing her back.\n\nHe sat on the desk chair and she straddled him, groaning when she felt his hard dick press against her through their clothes.\n\n\"We have to stop before she gets here,\" Esther said. But she quickly pulled her shirt over her head.\n\nJavier nuzzled her chest and undid her bra, popping a stiff blue nipple in his mouth. It was so risky, but that only added to his excitement. Besides, Esther would stop them in time. Could he get her off fast enough?\n\nShe shuddered and sighed, but after a few short minutes later she quickly stood up and grabbed her clothes.\n\n\"Two minutes early,\" she said with a wry grin.\n\nSure enough, Kat opened the door, guzzling a huge coffee and sighing happily. Javier put a relaxed look on his face, or so he thought. It didn't matter, though, because Esther's face was all flushed, as though she'd been interrupted doing exactly what they'd been doing.\n\n\"Everything OK?\" Kat asked, looking back and forth. They both nodded vigorously, and Esther practically ran to the computer, closing her eyes and breathing carefully.\n\nA minute later she opened them, and grabbed a sheet of paper.\n\nThey all stared for a while at the short list of numbers she wrote down.\n\n\"Those aren't primes,\" said Javier.\n\n\"No, it had something to do with the program,\" said Esther. \"I looked for the numbers that were being displayed, and then ... I don't know. It's hard to explain. This is all I got.\"\n\n\"Wait,\" said Kat. \"They're all under 256. Could these be hexadecimal codes? Hang on a second.\"\n\nShe found an old manual on the shelf and flipped to a well-worn page with an odd table.\n\n\"There,\" said Esther, pointing out the hexadecimal equivalents. Kat broke into a grin.\n\n\"Esther, you just sensed a bit of assembler code running. That's the low-level code my program got turned into. That's tremendous. Stunning. I'm trying to think of what kind of hacking I could do if I could sample running code that way, and \u2014 wow. Can you do it again?\"\n\nEsther sighed and closed her eyes, but Javier saw she'd lost her concentration.\n\n\"What's wrong?\" Kat asked. \"You want some coffee?\"\n\nEsther and Javier looked at each other nervously. Javier knew what full well what she needed, but they could hardly tell Kat.\n\nOf course, Javier wasn't Esther.\n\n* * *\n\n\"These abilities take a lot of concentration,\" said Esther. \"But more than that, I have to be properly relaxed. I'm nervous because we're away from Raj and Mark, and I keep checking on them, in addition to everything in our vicinity. Plus, listening to a computer is a totally new activity. The only way I've found to reliably relax and push myself into new skills is with an orgasm, or at least something close.\"\n\nKat coughed, spilling some of her coffee. Javier rushed to help her clean it up.\n\n\"Tell me I heard that right,\" Kat said. \"You really just said you need to have an orgasm to use your abilities?\"\n\n\"Not for everything,\" said Esther. \"But for something new like this, yes. Abuela said maybe I'd grow out of it, but \u2014\"\n\n\"Well, hell, what an excuse,\" said Kat. \"What do you need then? Oh, damn, that was why you wanted to be alone for a bit. I'm sorry, I shouldn't have hurried back. Seriously, I can go out again \u2014\"\n\n\"No,\" said Esther. \"I can't send you out every time I need to do anything with computers. Maybe I've been pushing too hard. Someday I'll be able to do this without what Javier calls heroic measures.\"\n\n\"OK,\" said Kat. \"But it doesn't bother me. I can go hang out on the bed and read or whatever. And I'm sure Javier told you I have a tremendous vibrator collection, in case that would help.\"\n\n\"What? No, I didn't,\" said Javier, turning red. \n\n\"Vibrators,\" Esther said. \"You mean, like sex toys?\"\n\nKat laughed. \"Don't tell me you've never tried one. I can barely come without them sometimes.\"\n\nEsther nodded slowly. \"I never thought of that,\" she said. \"Is that normal?\"\n\n\"Not being able to come without a toy? Not unusual. We women have tricky bodies. Oh, I know Javier said you had a weirder body than most of us, but that might just mean toys are even more useful. Hey, Javier, want to give the two of us girls some time alone? You look like your head's going to explode.\n\n\"I think it is,\" said Javier. \"Esther, you want some time with this maniac? Maybe I should have warned you.\"\n\nEsther nodded slowly. She found Kat's frank manner refreshing. It made her think of Nicola in her more patient moments. \n\n\"I don't mind if he's here, but I guess it could be a little awkward given whatever you two had together?\"\n\nKat started to laugh. \"She's a keeper, Javier. None of the bullshit I'm so used to from my partners. So, yeah, why don't you give us a solid two hours. Here, take this assembler reference and start thinking about what Esther's abilities might let us do. See you in a bit.\"\n\n* * *\n\nJavier knocked on the door with some trepidation. What had those two been up to all this time? No doubt they'd been talking about him. Had Esther actually been trying out Kat's vibrators? He wasn't quite sure how he felt about all this.\n\nKat was fully dressed when she opened the door, but there was something about her, something in her smile, or maybe even a subtle smell \u2014\n\nHe swallowed and closed the door.\n\nEsther was crouched by the Apple II, her eyes closed and brows furrowed. After a few seconds she shook her head, blinked, and focused on Javier. She blushed slightly.\n\n\"A little more success,\" she said. \"But it's going to take practice.\"\n\nJavier looked nervously at Kat, who sighed. \n\n\"I know that look. Stop worrying, Javier. I didn't seduce Esther. But she did ask me to demonstrate one or two of the toys.\"\n\n\"It was helpful,\" said Esther quickly. \"I know it's a little strange, but the thing is, I already knew what her body looked like. I made a mistake earlier, when I was trying to focus my senses on the computer. I try to avoid doing things like that, but it happens sometimes.\"\n\n\"Wait,\" said Javier slowly. \"I didn't realize that. You mean you could see anyone naked whenever you wanted?\"\n\nEsther nodded uncomfortably. \"I try not to, though. Mostly I succeed.\"\n\nKat patted Javier on the shoulder. \"She's a better person than I am, that's for sure. But I gave Esther her privacy when she was trying out the vibrator. I guess it was kind of a success?\"\n\nEsther smiled. \"Sort of. It's not as good as Javier's tongue, though.\"\n\n\"Oh?\" Kat said, giving Javier an achingly familiar naughty smile.\n\nJavier turned beet red. This was exactly the sort of gossip he didn't want these two to share. Even if it was complimentary. He tried to change the subject.\n\n\"Uh, what's the plan, then?\"\n\n\"I ordered Chinese,\" said Kat. \"From the place you like. So we have dinner, we brainstorm, and we go from there.\"\n\nKat went to pick up the food, and Javier gave Esther a kiss.\n\n\"I hope you're not upset,\" said Esther. \"It's just, I don't even really know how this stuff works for an ordinary woman. I thought maybe \u2014 well, I guess it was pretty useful. It was strange, though. I think watching Kat might have been as useful as the vibrator. I did eventually have an orgasm, but it wasn't particularly easy. Maybe I got the wrong one?\"\n\nShe pulled out the tiny green thing to show Javier, who nodded sagely. He was no vibrator expert. But the rest of what she said was interesting.\n\n\"You said that Nicola and Mark would have sex right across from you,\" said Javier. \"Did that excite you?\"\n\nEsther nodded slowly. \"Yes, you're right. Do you think this a fetish, then?\"\n\nJavier hugged her again. \"Maybe,\" he said. \"And it's turning me on to hear you talk about it. But this whole situation with Kat is a little strange.\"\n\nEsther smiled. \"I know you like her. It turns out I like her, too. She gave me all sorts of suggestions, you know, about things we might do sexually. Have you ever thought about anal sex?\"\n\nJavier coughed.\n\n\"I hadn't gotten around to suggesting it,\" he said. \"I've never done it. But maybe \u2014\"\n\n\"It makes such sense,\" said Esther. \"I don't know why I hadn't put it together. But Kat said it needed some preparation, and a lot of lubrication.\"\n\n\"Which I'm sure she has a ready supply of,\" said Javier, and they both laughed.\n\n* * *\n\nDinner was by necessity a pretty intimate affair. Javier kept bumping Kat at the tiny table, then edging away. Finally, she put her arm around his shoulders.\n\n\"It's OK, Javier,\" she said. \"We're still friends. Now, let's talk about how to make use of Esther's gifts.\"\n\n\"I don't know how to program,\" said Esther. \"Not yet. I can learn, but I doubt I'll be any faster at that than you, Javier.\"\n\nJavier doubted that, but she was right it would take time. And Kat was the expert.\n\n\"So, Kat, what could you do if Esther were telling you things about the code running on a computer?\"\n\n\"It's hard to be sure. I'm not used to thinking this way. But a lot of tricks I exploit to hack into systems exploit little tricks about the running environment. Maybe Esther's comments could direct me faster to what would work. But usually I'm trying that remotely. That InfoCorp raid was totally new territory for me.\"\n\n\"Isn't the whole point of the Internet that you can transfer information perfectly, though?\" Esther asked.\n\nJavier shook his head. \"Not the kind of information you're digging up from this machine. That's all happening locally, and it doesn't get sent along.\" \n\nThe three of them sat in thought.\n\n\"Well,\" said Esther. \"I guess I should find out what I can sense remotely.\"\n\nKat quickly set up the test machine and the three of them crowded around a terminal across the room.\n\n\"Go for it,\" Kat said. Esther closed her eyes and touched the terminal. Javier held her loosely, stroking her stomach.\n\nA minute later Esther sighed and shook her head.\n\n\"You need a turbo boost?\" Kat asked, waggling her eyebrows and pointing at Javier.\n\nJavier's mouth dropped open.\n\n\"I'm OK with it, if you are,\" Esther said nervously. \"But I know, you and Kat \u2014\"\n\nThe three of them stood awkwardly, not quite looking at each other.\n\n\"This is stupid,\" said Kat with a frustrated sigh. \"We all like each other, don't we? And Esther is trying to do something important. Esther, do you mind that Javier and I find each other attractive?\"\n\nEsther shook her head.\n\n\"OK, then,\" said Kat. \"So we're all horny and nervous. Could we solve this by trying not to worry for a bit and letting what happens, happen? Because I'm getting a headache thinking about it all.\"\n\nSlowly Javier and Esther both nodded. And then Kat quickly pulled her shirt over her head and reached behind to fiddle with her bra. Soon Javier was gaping at her bare breasts. He looked guiltily over at Esther, but she was looking at Kat, too.\n\n\"Like what you see?\" Kat asked, only a hint of nerves in her voice.\n\nJavier nodded and tried to put on an easy smile. He only got halfway there, but he could tell Kat appreciated it.\n\nThey were definitely big breasts. As big as Clara's, but sagging slightly and turned a little outwards. Her brown nipples tipped upward prominently, as though begging for someone to kiss them. Seeing them harden before his eyes was unbelievably erotic. This was Kat, with her short hair and her glasses and all their never-quite-resolved sexual tension. Old and new fantasies began whirling through Javier's head.\n\nMaybe Esther had already seen those breasts with her X-ray vision, but given her interest now, Javier supposed it wasn't the same. Javier put his arm around her, and she smiled back at him.\n\n\"I'm OK if you are,\" said Esther, rubbing his ass gently. His dick strained uncomfortably against his jeans, and he slipped his hands under her shirt.\n\nThere was a hyper-real tinge to everything. He felt Esther's touch at his zipper. A button broke under his hands. Esther giggled nervously and switched to helping him, and none of it was fast enough. He briefly locked eyes with Kat, who was shamelessly watching both of them. She smiled, and then began to take off her own pants.\n\nKat made some very appreciative sounds when Javier got his shirt off. But when Esther's tiny breasts and strange colors were revealed, Kat let out a gasp of amazement.\n\n\"He told me you were beautiful,\" she said. \"I had no idea. I'm totally jealous.\"\n\nEsther shook her head, never one to easily accept compliments. But Javier was suddenly feeling bold, and he distracted her by yanking down her pants and underwear. Then he helped her up on the edge of the table, not two feet from where Kat sat at the keyboard.\n\nEsther was flushed, the skin of her chest slightly pink against the bright blue freckles. She opened her legs to him and he knelt to taste her sweetness, just the way they'd done so frequently these last weeks. And not at all like it, because Kat had swiveled her chair towards them, and now she was slipping her hand under the band of her panties, her thighs jiggling lightly with her motions.\n\nIn the quiet of the room, Javier's tongue sounded obscenely loud as he slid it in and out of Esther's tiny hole. But he could also hear the squelching of Kat's fingers, a sound he knew from a few times late at night while they'd shared a bed. He tried to keep his attention on Esther, but then he realized Esther herself was watching Kat avidly.\n\n\"Use a toy if you want,\" Esther whispered to Kat.\n\nIt was obvious that was what she wanted to watch, and Kat smiled and stood up, briefly touching Javier's bare shoulder. She left a sticky spot and a wonderfully familiar smell.\n\nWhen Kat returned, she had a fair-sized vibrating dildo with a clit attachment. Javier knew theoretically how these worked, and Samantha admitted she had a few toys, but he'd never seen a woman actually use one.\n\nKat simply shoved her underwear aside and slowly thrust the vibrator into her dripping pussy. She'd trimmed her hair everywhere, but didn't seem to have shaved otherwise. \n\nEsther moaned, and Javier shifted uncomfortably. He'd been too nervous to take off his pants, but now he undid the snap and gave himself some breathing room. Then he held Esther tighter and ran his fingernails along the edge of one of the rough patches on her back. Throughout he kept his simple rhythm: in, out, in, out, the tip of his tongue pressing each time against the exquisitely sensitive nerves inside her odd vagina.\n\nKat adjusted the vibrator higher, and after a minute she suddenly grunted and put her hand over her mouth.\n\nJavier had heard Kat have an orgasm, a handful of times while they slept together. But watching her was a completely different matter. Kat's entire body started to shake, and her muffled moans and grunts kept getting louder. Finally went so red in the face Javier started to worry for her, but at the last minute her eyes popped open. She stared at him with a deep hunger as her orgasm finally subsided. She closed her eyes and turned off her vibrator, but she kept lightly fucking herself with it.\n\nJavier could feel Esther's frustration. They'd gone at this rather quickly compared to their usual, and maybe she was feeling upset to see how easily Kat had managed it. But Javier thought she was still on the way. Gently, he brushed her asshole with his thumb, and she gasped.\n\nWhen Kat finally opened her eyes, Esther shocked both of them.\n\n\"Can I try one of your butt plugs?\"\n\nKat laughed and gently removed the vibrator from her pussy.\n\n\"One sweet little butt plug coming right up,\" she said. A minute later she was returning, with a small plug and a big bottle of lube.\n\n\"Don't underdo the lube,\" said Kat as she covered the plug. \"And don't be shy about putting more on. Now, here you go.\"\n\nAt its widest it was barely thicker than Javier's middle finger. But it was several inches long. Esther accepted it reverently, and Javier helped her off the table.\n\nShe was so eager to put it in that he didn't even manage to see the process. But the expression on her face told him everything. She loved the feeling of it going inside. She hopped back up on the table and moaned. Then she reached for Javier and finished undoing his zipper.\n\nHe knew what she wanted. Not looking at Kat, he struggled out of his pants and underwear, and then pressed his naked body against hers and stroked her back. A little shifting, and then he began to rub his rock-hard dick back and forth along her tiny vagina and the ring of sensitive skin around it. She whimpered and kissed his chest, and he knew she was finally getting close.\n\nKat was typing something on the terminal right next to them, and she smiled at him when he caught her look. But then Esther made that last little gasp, right before her orgasm started, and he had no attention for anything but holding her tight and murmuring his love in her ear.\n\n* * * \n\n\"My sweet Esther,\" she vaguely heard, and then her nerves exploded, as powerfully as any time she could remember.\n\nShe was prepared, but even so she nearly got lost in the first instant. The dark space of connections filled her nostrils, her mouth, her quivering anus, and her body fell aside, all that sensitive flesh simply a familiar bundle of glowing correlations. As always she felt a pang for the lost sensations, but she had a purpose and precious little time.\n\nThere. She caught sight of the high-level structure she'd been looking for. Its lines were so stark and it was almost childish amidst the chaos, but that was the hook she needed. Humans had invented these patterns, and even the encodings were simple mathematical ones that matched her thoughts like a well-worn glove. She reached towards the encoded bitstream and swallowed as much as her mind could encompass in these few seconds, before it all began to fade.\n\nThere was a pen and paper waiting beneath her hands, and she began to sketch, not the data itself, but a pattern. And when she was finished she opened her eyes, and she had it all in her mind.\n\n\"There is a lot to write,\" she said, beginning to lay down the digits. Hexadecimal this time, the computer's native encoding.\n\nDistantly she felt the oddness of the situation, the three of them utterly naked, the room smelling of sex and continued excitement. Javier needed a release, and she wondered why he wasn't masturbating or even asking Kat for help. But part of her brain knew there were complications. She could think about it when she was done with all this data.\n\nFinally she looked up. The others were staring at the page of dense numbers she'd written.\n\n\"What is that?\" Kat asked. She'd gotten a towel to sit on and had partially covered herself.\n\n\"The data stream,\" said Esther. \"This is everything passing through those cables over a few seconds.\"\n\nKat stared at the page. \"Hmm. Two bytes per digit, so about two thousand bytes? Yes, that could be a couple seconds of data. I wasn't sending very much.\"\n\nKat got up abruptly and left the towel behind. Poor Javier watched her butt the whole way. \n\n\"It's fine, Javier,\" Esther said. \"You should get yourself off now.\"\n\nHe shook his head swiftly, and maybe he was right. She'd really broken the mood. But it didn't seem fair.\n\n\"Here,\" said Kat, dropping a heavy book and opening to a set of appendices. \"TCP/IP protocols. I suspect it'll be more efficient for you to just learn the encoding so you can decode it in your head. My mind doesn't really work like this. I'll see if I can whip up a program to spit something out so we can compare.\"",
        "In the end, Kat finished the program first, but it only confirmed what Esther was realizing. She'd transcribed a perfect copy of the data Kat had transferred. It was simply a test block of text. And now that she understood how simple the encoding was, the next time she could transcribe it that way rather than as a jumble of numbers.\n\nJavier had gotten dressed, and Esther suddenly felt guilty. When she started to put her clothes on, Kat followed suit. The three of them sat on the couch together.\n\n\"So,\" said Kat. \"That was a gigantic success.\"\n\n\"I'm not sure how it helps,\" said Esther. \"All I did is copy something that was already moving through the wires. Any computer could have decoded it, right? This seems less interesting than the when I sensed executing code.\"\n\n\"True,\" said Kat. \"But you're not thinking like a hacker. Think about how much data is flowing all the time across wires. Within a single computer, among computers in a room, or over the Internet. All that data is susceptible to being snooped on. Some of it is encrypted, of course, but plenty of it isn't. Suppose we dropped you near a major Internet switching room, the kind of place that no one but the backbone Internet providers have access to. Just think of the amount of information available. Though maybe it would be far too much.\"\n\n\"No,\" Esther said. \"That's the kind of thing my brain is designed for, I think. All of it is so simple compared to the kinds of physical information I'm usually sifting through. Once I have practice it should be trivial to pick out specific information if I know what I'm searching for.\"\n\nKat nodded happily. And then she looked at Javier and frowned slightly.\n\n\"OK, I think maybe I should give you two some time together.\"\n\n\"No, no, it's fine,\" said Javier. \"I'm not upset or anything. That was just a lot to take in.\"\n\n\"Yeah,\" Kat said. \"I think it was great, though. No regrets. I'm going to take a shower now, but just holler if you need anything.\"\n\n* * *\n\nJavier watched Kat walk across the room. He'd never be able to look at her the same way, and he sure hoped that was all right. She disappeared into the bathroom, but she didn't close the door.\n\nHe turned and hugged Esther. \"I'm so proud of you. Like Kat said, this could be a big deal.\"\n\nEsther smiled. She was so gorgeous. Much prettier than Kat, even if Kat had those big boobs.\n\n\"Javier, you shouldn't pretend if you're uncomfortable about what we did.\"\n\nHe sighed. He wasn't trying to pretend, really.\n\n\"I don't really know what I feel. I mean, it was phenomenally exciting. Two naked women I like? But I keep expecting we screwed up somehow. Like we shouldn't have gotten away with that. And I'm embarrassed how much I liked looking at Kat. I've spent so long trying not to fantasize about her.\"\n\n\"Don't be embarrassed,\" said Esther. \"I think she's pretty too. And you never got to have an orgasm. That must be uncomfortable.\"\n\nHis dick had softened, but with her touch his erection grew again.\n\n\"Javier,\" she said softly. \"I think Kat is pretty worried too. Maybe you should go reassure her.\"\n\nJavier looked back at the bathroom. The door was open. Just as it always had been.\n\nSlowly he nodded. \"OK,\" he breathed. \"You want to come too?\"\n\n\"No, I'll just listen from here and imagine. Well, maybe I'll do more than imagine. I keep spying on her accidentally anyway.\"\n\n\"What's she doing, then?\" Javier said with a laugh.\n\n\"Why don't you go see?\" Esther said. She kissed him and with surprising strength yanked down his pants until his dick sprang free. Javier stepped out, naked, and moved closer. But she gave him a little shove towards the bathroom.\n\nSwallowing, he pulled off his shirt and walked in naked.\n\n\"Hey Kat,\" he said softly. Not that it mattered given Esther's hearing. \"Just wanted to make sure the two of us are OK.\"\n\nThere was a little noise from the shower, and then Kat replied.\n\n\"Yeah, we're good. But we should talk, anyway.\" She stuck her head around the curtain and her mouth dropped open.\n\n\"Oh, hi there,\" she spluttered, squinting at him. She was pretty blind without her glasses, but she could obviously see enough. \"Well, I guess we're better than I'd realized. You want to join me in here? What about Esther, for that matter? Christ, I'm horny.\"\n\nNervously he looked back, but Esther hadn't followed him in. He had to assume she was eavesdropping, but she was the one who'd pushed him in here.\n\n\"All right,\" he said. \"I guess I'm doing this.\"\n\nHe pulled the curtain aside and crowded quickly against Kat. Flesh on flesh, the steam wrapping them, a distracting echo of his first time in the bath with Esther.\n\nMaybe that was why he didn't move against her body the way she was inviting. He slid around the tub and perched on the side, feeling a little foolish. \n\nKat really was beautiful. She turned to face him, her mouth in a half-amazed smile.\n\n\"You want to take care of that before we talk? Or I could, if you like.\"\n\nHer eyes flicked down to his straining erection.\n\nJavier swallowed. \"I'll do it,\" he said. \"Though it might be less awkward if I had company.\"\n\n\"Oh, good,\" said Kat. \"You interrupted me, anyway.\" She quickly squatted, grabbed the shower nozzle and began to play the stream over her clit.\n\nThere was an air of unreality to the situation. But Javier was so hard, and watching Kat masturbate was a fantasy come true. He gripped his dick and tried not to notice how Kat watched him.\n\nIn just a few minutes he came explosively, shooting cum across the tub almost to Kat. She jerked back in surprise and then grinned, watching him until he finally heaved to a halt.\n\nSomehow she knew what he wanted. She hung up the sprayer and cautiously moved closer to Javier. Then she enfolded him in her arms, pressing her breasts against his chest, stroking his hip.\n\n\"You should finish,\" he mumbled. \n\n\"I am,\" she said. \"It's not always about the orgasm, is it?\"\n\nJavier had to agree with that. Though he'd certainly needed the release tonight.\n\n\"So I guess we're OK?\" Javier asked.\n\nShe kissed him very lightly on the cheek. Not exactly a romantic kiss, but not something just between friends. \n\n\"Yeah, we're definitely OK,\" said Kat. \n\nThey got out of the shower and dried, surprisingly at ease to be naked with each other. What a strange day.\n\nWhen they left the bathroom, they found Esther sprawled naked and asleep, half under the covers. A vibrator was still buzzing gently.\n\n\"I guess we're sleeping here,\" Javier said, eyeing the queen-sized bed. It had been easily big enough for him and Kat. But Esther could take up a surprising amount of space on her own.\n\n\"I've had worse company by far,\" said Kat, crawling in on one side of Esther and retrieving the vibrator.\n\nJavier spooned behind Esther, and when he put an arm over her he touched Kat. They were all friends here. Javier was as content as he could remember.\n\n* * *\n\nEsther's brow furrowed the way it often did in her dreams, and she moaned softly. Javier shifted and pressed against her comfortably. It was technically morning, but there was no reason to get up yet. Javier looked across at Kat, who was sprawled on her back in her usual way. Except this time she was naked, and he could look at her breasts while she slept. Javier was well into cataloging the delicious possibilities of the coming day when Esther sat bolt upright.\n\n\"No,\" she mumbled, still half-asleep. \"They're gone. It's too late.\"\n\nJavier struggled with his panic. \"Who? Raj and Mark? What happened?\"\n\n\"No, no, not them,\" Esther said, rubbing her eyes. \"I didn't know them. Three weakly sensitive people, on an airplane from Orange County. They were so scared. The plane was going east, and then I lost them. And for some reason Mark's roaming far away from camp. Ugh, Javier, it's so noisy here.\"\n\nConfused, Javier listened. But of course, he couldn't hear what she did. They were surrounded by a city and all its activity.\n\nEsther got up and began pacing, something she only did when she was terribly nervous.\n\nShe was stark naked, of course, and she was the most beautiful woman in the world. Javier realized Kat had awoken and was watching Esther as well.\n\n\"Esther,\" Javier said. \"Do we need to get home?\"\n\nEsther nodded unhappily.\n\nBefore they left, Kat handed Javier a hard drive. \n\n\"Copies of all the data I scored from InfoCorp,\" she said. \"Feel free to try your hand at it, once you get your computer functioning up there. I included some of my cracking tools. Anyway, backups are always vital. I have to admit I'm getting a little paranoid after what happened to Raj.\"\n\n* * *\n\nWhen they were on the highway, Esther reached out as gently as she could to touch Mark's senses, mostly just to reassure both of them. By the time they returned, Mark was well on his way back to camp. Perhaps he'd come on his own, or perhaps Esther's touch had convinced him.\n\nRaj met them when they got out of the truck.\n\n\"Mark's gone,\" he said, shaking his head. \"I couldn't stop him. Or rather, I wasn't foolish enough to try.\"\n\n\"It's all right,\" Esther said. \"He's on his way back. What was it that upset him?\"\n\n\"I made a mistake,\" said Raj. \"I asked him about Nicola's abilities. I hadn't understood how upset he was. He kept saying that she should be here with us, and then he ran off. I half thought he was going to look for her.\"\n\nEsther wasn't so sure. She'd only sensed Nicola a few times, but it was always in the same place far to the east. And Mark hadn't headed that direction. He'd gone the way he sometimes did on his long retreats, when he needed to think. She suspected she'd overreacted to the situation.\n\nWhen Mark returned a few hours later, he was right to the point.\n\n\"Did you make me come back?\" \n\nEsther shook her head, trying not to cry. \"I didn't mean to,\" she said. \"I was worried, because you'd gone so far. I thought all I did was touch you gently, to reassure you.\"\n\nMark nodded. \"You don't know your strength, then. I found it impossible to ignore, though I didn't feel drawn in any particular direction. I could only assume you meant me to return. But perhaps it was for the best. It refocused my worries most effectively.\"\n\nWith that Mark headed to retrieve his axe. And soon enough he was chopping wood, for all appearances completely at peace. Esther suspected in this moment he was, and she had a flash of envy.\n\n\"Good news,\" Raj said. \"I got the network running. Want to have a look?\"\n\nEsther still didn't know how she felt about the computer Raj and Javier had set up in a corner of the dining cabin. Apparently they'd splurged, and Javier had excitedly told her a lot of details that didn't mean much to her. But this connection to the Internet would make some things so much simpler. She crowded around the computer with the other two.\n\nThe actual network connection was a modem installed all the way down at a telephone pole near town. Raj had reassured them that it was unlikely to be discovered, and even if it was, the microwave relays were all well hidden in the woods. All in all it did not make for a very fast connection, but it was still an immense change in their relationship to the outside world. \n\nEventually Esther left the two of them chattering about the computer and headed to Abuela's cabin, passing Javier's neglected vegetable garden. She thought about the beautiful day they'd had sex there, and wondered why they'd never repeated it. \n\nThe camp was home, but it was starting to feel cluttered. She'd caught herself daydreaming about living in a truly isolated place, maybe out in Idaho or something. Or Alaska. Somewhere she could live, and think, and teach herself. Somewhere to have languorous sex with Javier out under the stars, without the constant vigilance.\n\nIt was a fantasy, of course. Abuela hadn't truly hidden herself away from the world. There were too many people's lives at stake, and Esther didn't have a choice. She lay down on the bed with one of Abuela's sculptures, and as she breathed and rubbed the smooth wood she gave herself one last moment of imagined peace, before her mind opened and all the familiar worries rushed in.\n\n...*** Chapter 43 ***...\n\n Lukas offered me a job,  wrote Kat.\n\nThe three of them stared at the screen.\n\n Apparently I've been more successful hacking InfoCorp than Lukas or Geoff or any of their other people. Or maybe Lukas just wants the data we stole on the Fresno raid. Anyway, of course I'm not planning to accept, but I told him I'd think about it. He gave me the address of a computer at the Unit that he believes I might be able to crack. I think it's some combination of a gift and a test. I wish I could decrypt the bigger password hash I stole in Fresno. People reuse passwords and I might get lucky. But it would take decades of computer time, even if I stole time from the university mainframes. \n\n\"What encryption is it?\" Esther asked. Javier passed along her question.\n\n RC4,  replied Kat.  I know you guys are smart, but I have more computer power here, and to be blunt, the cracking tools I have were also designed by smart people. There isn't anything more efficient out there, though maybe the NSA has something better. Bigger computers anyway.\n\nJavier and Kat chatted some more, but Esther's mind was working.\n\n\"What are you thinking?\" Raj asked her quietly. \"Kat's right. That encryption is solid. Brute force is the only way to attack it if they set it up right.\"\n\n\"It's something in the back of my head,\" said Esther. \"A feeling. That cryptography text you gave me had RC4 as an example, and I spent a long time thinking about it.\"\n\nRaj gave her a sharp look. \"No one's proven any of these cryptography problems are fundamentally difficult. And sometimes the implementations are not perfect either. Is there anything more you can say about this feeling?\"\n\nShe shook her head. \"I've felt it once or twice when I've been immersed in that abstract representation of the universe. I've been thinking I need to improve my mathematics to understand how all the connections work, but maybe it can go the other way. Maybe the universe can tell me about mathematics.\"\n\nJavier had finished talking with Kat, and she took his hand. He blushed slightly when he saw the look in her eyes. Raj pretended not to notice anything and sat down at the computer.\n\nIt was a warm afternoon, the still air filled with the buzz of cicadas. Esther made a quick stop for a small bag in her dresser.\n\n\"Take me to that spot,\" Esther said. \"The one with all the bedrock.\"\n\n* * *\n\nThe creek was barely flowing, but as Javier hoped, Esther loved the spot.\n\n\"It reminds me of \u2014\"\n\nThey both smiled. Of course, it was different in many ways: pines instead of oak and maple, and much drier and open. A little too open for Javier's taste, but then he thought back to what Esther had been like when they'd fucked out in the garden. She didn't mind. And there was no one around.\n\nEsther sat on a perfect, broad slab of rock. Javier moved to sit next to her, but she stopped him with a devilish smile, reaching for the snap of his pants.\n\nShe only pulled them just far enough down to get her mouth on his dick. He moaned and stroked her cheek, his dick rapidly hardening inside her mouth until she had to pull back slightly, stroking his balls and then adding a hand on his shaft. \n\n\"Not so fast,\" he whispered. \"I want to take our time.\"\n\nEsther pulled off him with a little slurp.\n\n\"We will,\" she said. \"But you didn't get yourself off this morning, and I want you to last the next time.\"\n\nIt was weird that Esther knew whether he'd masturbated. She'd told him she tried to avoid intentionally spying on him, and that he deserved his own privacy. But she always knew anyway. Probably she could smell it on him.\n\nIn barely another minute, she had him on the brink, and then she gently touched his asshole at just the right moment. He exploded into her mouth, sighing her name while she swallowed every drop. Even afterwards she held his softening dick in her mouth, something he found incredibly intimate and comforting. \n\nSome minutes later he was beginning to harden again, and Esther took a break to strip herself naked. In the sunlight her coloring was as bright as he could remember, and her nipples fully erect. She was phenomenally aroused.\n\n\"So,\" he finally said, stroking himself to a rock-hard erection as he devoured the sight of her. \"What is it you have planned? Did you want to listen for Nicola again?\"\n\n\"Maybe,\" said Esther. \"But really, I wanted to do some mathematics.\"\n\nShe lay back on the slab and began to touch herself and rub her back on the rock. Javier moved to kneel between her legs, but she shook her head.\n\n\"I already came twice this morning, before you woke up,\" she said. \"I want to do something different this time.\"\n\nShe pointed at the odd little bag she'd brought, and Javier picked it up eagerly. Maybe Kat had left her with a vibrator.\n\nThere was indeed a vibrator inside. There was also a big bottle of lube.\n\nEsther took his hand, positioning it so as to remove any further doubts.\n\nShe wanted his fingers in her ass. Maybe she wanted even more than that.\n\nThey hadn't talked about it over the last few days. In retrospect, he was embarrassed by everything that had happened at Kat's place, and Esther had seemed preoccupied anyway. She was always so worried. But right now she was flushed, eager. Her tiny asshole quivered gently against his finger.\n\nPlenty of lube, Kat had told him. Much more than you think. Better to have a giant mess than the alternative.\n\nHe squirted a giant glob on his finger. Esther jerked slightly when he touched her, spreading the lube carefully. On impulse, he put some on his other fingers and began to circle that hairless, colorful patch, then slipped his pinky into her shallow vagina. It was so much easier than usual that he felt foolish not to have tried lubrication before.\n\nEsther moaned and shifted even closer. With a careful breath, he pushed his index finger against her asshole.\n\nThis wasn't entirely new for them, and she quickly bore down against him. But this time his finger slipped in nearly all the way in a single motion. Esther yelped, and Javier pulled it back out as quickly as he dared.\n\n\"Oh, God, Javier,\" Esther said. \"Push it back in, please.\"\n\nShe leaned back further, pulling her legs to her chest to give him better access. Javier's dick throbbed and he pressed his finger all the way back inside her. The lube was getting everywhere, but he didn't care. Her sphincter muscles squeezed on his finger, so tightly that he still despaired of ever getting his cock inside.\n\n\"Yes,\" Esther murmured, rocking against the slab of granite, gently fucking his finger. Cautiously Javier began to help with the other finger in her pussy. Out and in, out and in, just a knuckle's worth, trying to touch everywhere on her sensitive inside. Then she gently pushed that hand away.\n\n\"Too much,\" she murmured, though she was smiling at him. \"I want this to be slow. I think I'm ready for your penis now, if you want to try.\"\n\nJavier hadn't expected that. He'd been working himself up to try another finger. But she would know better, he supposed. Maybe the thought of his cock trying to enter her incredible tightness was as big a turn-on for her as him.\n\nHe squirted lube on his dick, shivering at the strange sensation while he spread it. As though it was someone else's hand on his dick. Kat's hand. God, he'd wanted her to touch him that way. \n\nEsther looked so nervous. He spread another giant bunch of lube on himself, until it was dripping somewhat unpleasantly down his thighs. Better too much than too little, Kat said. \n\nHe leaned over her, his dick bumping her thigh and trailing lube everywhere. Then he kissed her, and she practically bit his lip in her eagerness to kiss back. His dick slid between her legs, and before he knew it she was fucking him in their usual way, her small hole sliding along his length, only much more easily than usual. It was strange and wonderful, but Esther slowed, tilting until the head was near her rear entrance.",
        "\"OK,\" she said, kissing him again on the cheek. \"Do it slowly. But don't stop unless I tell you.\"\n\nHe had to shift and use his hand to position himself. He was feeling strangely detached from his cock, the way he often had with Samantha. It probably meant he was nervous or distracted. But that was OK. She wanted him to last, and this way he would. His cock felt as unyielding as the rock Esther lay on.\n\nThe head would be the hardest part. He pressed and pressed, feeling her quivering against him.\n\nEsther held her breath, her chest flushing and bringing out the contrast with her blue freckles. She was obviously trying to help, but she was just so tight.\n\nAnother idle piece of advice from Kat drifted into his head.\n\n\"Just pretend you're taking a shit,\" he said.\n\nEsther snorted half of a laugh, and apparently that was what was needed. His dick pressed forward, and then with a pop the head was inside.\n\n\"Oh,\" she groaned, in pleasure or pain. He was sliding in further, so much more easily now, and she didn't tell him to stop. He kept waiting, but instead she grabbed his hips and pulled, unexpectedly hard. His dick slid faster even as she started to contract around him. And then his balls bumped into her little ass. He was all the way inside her.\n\nShe was so tiny. A jewel, a nymph, with his engorged dick up her ass. Her muscles were clamping desperately around him, but there was easily enough lube to fuck her. Both their bodies strained for just that.\n\n\"Stay there,\" she told him, with a kind of desperation. \"Stay. Don't move. Just hold me.\"\n\nJust as well. She'd told him she needed him to last, and with his nervousness melting away, he felt a powerful need to bury his cum deep inside her. \n\nHe carefully lay his weight on her, getting his hands under her head. She kissed him desperately, her eyes opening to look at him with a kind of distant wonder, as she sometimes did when she was near orgasm. But then she was looking beyond him at things only she could see, shuddering and lying nearly still, her breath quick but steady, her lips quivering against him. He stroked her and held still as the minutes stretched. When he thought his muscles were going to give out, he shifted a bit and she sighed, but she didn't open her eyes. There was nothing in the world but his massive cock, buried deep inside the ass of the woman he loved. She was traveling somewhere he couldn't follow, but he'd be here when she came back.\n\n* * *\n\nJavier's penis was impossibly huge, stretching her open until she had to hold back a cry. But it was shock, not pain. He'd been so careful, and now he was implacable as he pressed inside her, just as she'd asked. Just as she'd imagined many times, but nothing had prepared her for it. Maybe she should have approached it slower, but part of her knew this was what she'd always wanted. He was splitting her open, and the shock and slight discomfort were just enough to keep her from sliding over the edge into a blinding orgasm. \n\nShe opened her eyes and pulled him harder against him, feeling how he wanted to move, how carefully he was having to hold himself. She loved him so much. She couldn't explain that she had exactly what she needed. This sense of opening up. Everything was waiting for her, behind and between and in directions no one could name.\n\nThe sky darkened and stars began to shine. Winter stars, the ones the sky's brightness ordinarily hid from her. Orion's belt sparkled and wavered in the daytime air currents. Smells and sounds around her froze, sorting themselves into their component chemicals and wavelengths, everything happening so slowly that she could almost understand. Vast shapes emerged, the connections and sheets and geometries that were beyond anyone's understanding. But she knew what she was looking for, and with a painstaking effort she began to feel for the pieces she needed. She didn't truly know what she was doing, but she filed away every new thought, every fragment stolen from the flotsam of the vast universe's own calculations.\n\nHer body tugged at her, a quivering need for release, and she fought it, holding out for as long as she could. But her own body was a bundle of geometries, a locus of points that had its strangely beautiful needs and hopes and fears, and her mind was inexorably bound to all of it. She felt muscles contract once, then again, and then she stared at the stars in wonder as her body shook with a pleasure unlike anything she'd ever felt. \n\nLong after her cries had stopped, she gazed at the glittering stars. And slowly the rest of it came back to her. Javier's body heavily lying on top of her, his penis beginning to soften. She found the memories of his orgasm and played it back, again and again. He was so beautiful, and he'd given her a gift she could never forget. \n\nShe listened again to the memory of his groans, the spurt of his immense penis inside her, and she held to the sensations with a desperation, as though it were a talisman.\n\nJavier couldn't follow where she went, but at least they could share this. It was more than enough for her. And someday perhaps she'd believe him when he repeated how happy she made him.\n\n* * *\n\nRaj looked up from the computer, and she blushed. She should have joined Javier in the shower. Surely he could smell the sex on her. He was so polite.\n\nBut she had to keep her mind moving. She had her fragmented memories, and the drawings she'd made, and now she needed to assemble them into a coherent picture.\n\n\"Raj,\" she said. \"I think I have it. It's something in the correlations, you see. I think we can break that encryption much faster than we thought.\"\n\nHis eyes lit up in that way that made him so beautiful. She saw how his nostrils flared, the way his pulse quickened. Her senses were still so sharp. They began to talk, and his mind grasped faster than hers the meaning of the mathematical artifacts she'd brought back from her journey. By the time Javier joined them, he'd filled a dozen sheets of paper with dense formulas, working more systematically than Esther ever could have. But of course, he'd had years to hone this skill. They talked even as he worked, and at some point Mark joined Javier, bustling around to prepare them dinner.\n\nJavier shook her shoulder, and she realized it was time to eat. She stood up with a groan and gave him a huge hug. He kissed her on the head and they sat down to dinner.\n\n\"So,\" said Javier eventually. \"I gather from all this that you and Esther might have broken RC4 encryption.\"\n\nRaj smiled deferentially. \"Not broken, exactly. There's a flaw in the way it's usually implemented. The output hashes have statistical correlations of a sort that are very useful if you're trying to brute-force guess passwords. Essentially, we can put our guesses in a much more useful order. Instead of years, we might do it in a day.\"\n\n\"But only for RC4,\" amended Esther. \"This isn't a general cryptography breakthrough. I'm not sure that's even possible given all the different algorithms in use.\"\n\nRaj nodded. \"But it is a minor mathematical breakthrough, due entirely to Esther. The fragments she was able to explain to me hint at some broader theory vastly more exciting than mere codebreaking. It feels almost sacrilegious to use them this way. And now we'll have to actually implement these ideas in code. Do you have some spare time, Javier?\"\n\nJavier smiled, no doubt happy to finally feel of use. Esther kissed him and stepped outside.\n\nThe air was cooling quickly, as the late-summer sun hung low in the west. It was another hour before sunset. \n\nThat was all right. Esther settled back against the cabin wall, turning her eyes upwards. High overhead, Hercules wheeled slowly across the blue sky.\n\n...*** Chapter 44 ***...\n\nKat was appropriately astonished when they sent her the decrypted passwords a few days later. And that evening, she let them know she'd broken into the Unit's computer.\n\n It's not very exciting,  she wrote.  Not connected to anything important. I think perhaps this was more a test than anything. \n\nAfter discussion, they agreed she should send confirmation to Lukas. In the end even Raj agreed it was better that Lukas consider them useful and on his side. Kat wasn't about to explain the help she'd gotten breaking in, but it didn't seem to matter much. Lukas couldn't know exactly what they had stolen on the Fresno raid.\n\nWhat they didn't expect was the next message Kat received from Lukas.\n\n He's desperate,  Kat wrote.  Apparently they've lost more agents, and they've had to move yet again. He thinks their window to do anything is closing, and so he's planning a massive raid on The Unit in DC. But he says he needs my help. Or maybe he needs a scapegoat if something goes wrong on the hacking end. And he instructed me specifically to tell all my friends that Nicola is going to be part of the raid. \n\nJavier, Esther, Mark, and Raj digested this news. For once, Mark was the first to speak.\n\n\"We have to help them,\" he said. \"Nicola can't be captured by Franklin. So we have to help.\"\n\n\"Yes,\" said Raj, \"that's why he told us about her. He knows something about our group and correctly predicted that reaction. But he's not a fool, and he must know all this is a dangerous risk. Even telling us about the raid. I'm inclined to think he really is that desperate.\"\n\n\"Why would he send Nicola on a raid?\" Esther asked. \"She's very sensitive. Surely he knows she's at risk from Franklin, more than most. It seems a foolhardy way to extort Kat's cooperation. And what exactly does he want Kat to do?\"\n\nJavier relayed the last question, and Kat responded promptly.\n\nHe plans to wipe their computers as a first strike. He passed to me a truly nasty virus someone else wrote, so nasty that I could barely make any improvements on it myself. Apparently they've had no luck getting any agents to slip it inside, or to break in from afar. And before you ask, I already tested all those passwords you guys decoded, and none of them works to access the system he named. This one may be beyond my tremendous abilities, sad to say. But I haven't replied to Lukas.\n\nIn the silence, Esther spoke up.\n\n\"I might be able to do it.\"\n\nThe others stared at her, and she elaborated.\n\n\"If I were nearby. Close enough to listen to the communications among their computers. I might be able to pick out a password in the time before it was encrypted.\"\n\nJavier nodded slowly. \"Over the wires from a dumb terminal, perhaps. Or from the keyboard itself?\"\n\nShe shrugged. She had no idea what the easiest way was to accomplish something like this. But she had a growing certainty she could manage it.\n\n\"That sounds far too dangerous,\" said Raj. \"Esther, you can't get anywhere near Franklin. I know you expect you're resistant to the influence of his talents, but you aren't immune to being arrested or kidnapped by his people.\"\n\n\"Neither is Lukas,\" she said, and she saw Raj's face fall. \"Lukas and Nicola, and anyone else he's bringing along. Mark is right. Nicola would kill herself rather than fall under Franklin's influence. I can't understand why Lukas is risking that, but we have to help her. In the end he's right about that.\"\n\nJavier nodded. \"But Raj can't go,\" he said. \"He's the one they already tried to kidnap. We can hope they've given up on Esther, and me.\"\n\n\"And I have to go as well,\" said Mark.\n\nJavier shook his head. \"You're in as much danger as Nicola if you get near Franklin.\"\n\n\"Then I won't get near him. But I will protect you and Esther and Kat. I have to help somehow. Please.\"\n\n\"You should keep Raj safe here,\" said Esther, but Mark shook his head. \n\nHe was stubborn through all their arguments. In the end, no one could force Mark to do anything. No one but Esther, and she would never do that. \n\n\"I guess it's decided then,\" said Esther finally. \"I always wanted to visit D.C.\"\n\n* * *\n\nJavier distributed the plane tickets, bought at the last minute by his newly wealthy alter ego, Jos\u00e9 Santillo. Lukas had offered to take Kat and her assistants on one of his private planes, but the further they stayed out of his influence, the better.\n\n\"Never been to the East Coast,\" said Kat. \"Can't say I imagined it would be under these circumstances.\"\n\nMark was extremely uncomfortable with all the people in the airport, and things only got worse when they piled into the plane. Esther motioned him to a window seat, and she sat in the middle next to him, taking his hand and stroking his shoulder. She shared a glance with Javier, who smiled and nodded. Anything it took to keep Mark from having a panic attack in a crowded plane. He was starting to think he should have figured out how to charter their own plane.\n\nTo everyone's relief, once he recovered from take-off, Mark was entranced by the view out the window.\n\nThe Unit's headquarters was a dull-looking office park in a run-down area of D.C. \n\n\"Security by obscurity,\" Kat said with a snort. \"Never really works. But I guess they've got it well-protected inside.\"\n\nThey'd picked the closest motel to the place, a quarter mile down the road. It felt perilously close, and Javier's skin had itched when their taxi had passed it on the way. Yet perhaps it still wasn't close enough.\n\n\"Do you think you can do it?\" Javier asked when they had a moment alone.\n\nEsther sighed unhappily.\n\n\"I'm terrified,\" she said. \"Trying to keep myself looking ordinary while I listen for trouble. I hope for all our sakes I can do it.\"\n\nThey'd hardly had a chance to settle into their dumpy motel room when Esther announced that a livery car had pulled up outside.\n\n\"Lukas,\" Javier said. \"Of course he knew where we went. I guess it's time to talk.\"\n\nKat had expected as much. When they'd made the arrangements, he'd simply said he would be in touch.\n\nAs they'd agreed, Kat and Javier walked out together. A nondescript man in a suit opened the door for them.\n\n\"I hope you're with Prime,\" he joked, but the man didn't even change expressions. Swallowing, Javier got in the back. If the Unit had found them already, there was nothing they could do.\n\nLukas was staying in a hotel across town, one so fancy that Javier felt conspicuously underdressed when they walked through the lobby. They were ushered quickly into a plush suite near the top floor.\n\nLukas was sitting at a computer across the room, and he turned shortly after they entered.\n\n\"Hello again, Javier. And it's a pleasure to finally meet you, Kat. I've heard so much about you.\"\n\nJavier looked around the suite nervously. There were only two others here: a large, muscular man who looked like security, and a slim young woman who was staring intently at him.\n\n\"Ah, have you two not met? This is Nicola, Javier. She is a remarkable young woman.\"\n\nNicola nodded slightly at him, seemingly uncomfortable with the entire situation. Javier's heart pounded, and not just because he didn't understand what Nicola was doing here. Esther hadn't told him how attractive she was. Not in so many words. \n\nShe was vitally important to Esther. That was enough for him to do whatever was necessary.\n\n\"So, Kat,\" said Lukas. \"Would you like to explain now why you required such proximity to try your methods?\"\n\nKat swallowed and shook her head. \"You know I can hack into telephone lines. The fewer switches between me and what I'm looking for, the better. Beyond that, sorry. Trade secrets.\"\n\nLukas didn't change his expression, but nodded slightly.\n\n\"Ah. Well, I did wonder what you were planning to tell me. Suppose I suggest a different explanation. Suppose you have a sensitive person with you, one so sensitive that they have a chance of eavesdropping on the goings-on over there. And suppose you are trying to hide that fact from me, because you do not entirely trust me.\"\n\nJavier froze, trying not to give anything away. They'd made a terrible mistake coming here. Lukas had deduced Esther's strengths, and he was not going to forget.\n\nLukas nodded again placidly. \"It's all right. Janelle already explained to me what a remarkable person your friend Mark is. Nicola's close friend as well, if I am not mistaken.\"\n\nJavier let out his breath, but he tried to look appropriately unhappy. Lukas quickly continued.\n\n\"Please, you must understand: I would never harm a person with the changes, or expose them to more scrutiny than they wish. Mark's secret is safe with me. But I must warn you, there have been others with high sensitivity who have tried what he is planning. None of them have succeeded, and at least one was captured afterwards. The Unit is well aware of our abilities, and I am sure they take precautions.\"\n\n\"Lucky we don't have anything so simple as that planned, then,\" said Kat.\n\nThis time Lukas broke into a genuine smile. \"Oh! Well, I do love being surprised. But so you understand what is at stake: we will be entering the facility no later than tomorrow just before midnight. Having the computers down beforehand would be a tremendous help with the raid itself, and also because the Unit is a foolish hoarder when it comes to data. There is much intelligence which we might simply eradicate before they can save it. Intelligence about people like me in this country and around the world. Destroying that is exactly the kind of blow we need to strike.\"\n\n\"That and capturing Franklin,\" Javier said.\n\nFor a moment a terrible expression flitted across Lukas's face. Then he blinked and was neutral again.\n\n\"Yes,\" he said. \"That is the most important thing by far. And I must give heartfelt thanks to you both for securing us allies with inside information. That partnership is the only reason this attack might succeed at all. Now, here is a phone number where you can reach me. Inform me before tomorrow evening if you have succeeded in transmitting the virus. After that, keep well clear of the facility. If Mark is smart, he'll distance himself as soon as he can. Even having him near is a terrible danger to us all, given what Janelle told me.\"\n\nLukas turned back to his computer, and presently the door opened: the escort for their ride back.\n\n\"I'm going with them,\" Nicola said suddenly.\n\nLukas nodded, as though he'd expected as much.\n\n\"Please take no more than two hours,\" he said. \"We need to assemble at the staging site this evening. I'll have the car pick you up.\"\n\nNicola gave a tired half-nod, and then she followed them out the door.\n\nShe didn't say a word the entire drive back.\n\n* * * \n\nEsther gasped and took Mark's hand.\n\n\"Nicola is with them,\" she said. \"Nicola's coming. She's fine.\"\n\nMark started to cry, and he hugged her so hard she thought he'd crack a bone. But then he put her down and wiped his eyes.\n\nWhen they arrived a few minutes later, Nicola was the last to enter. She hung back at the door, as though unsure of the reception she'd find. \n\nMark was having none of it, though. He shouldered past Kat and Javier, and then he grabbed her in the same kind of hug he'd given Esther. The same, except for the kiss.\n\nWhen they finally pulled apart, they were both crying. Nicola gave Esther a shaky hug, and then she sat down on the bed, breathing heavily.\n\n\"We can take you home,\" said Mark. \"You shouldn't be here. Why are you going into that terrible place? Is Lukas making you do it?\"\n\nShe shook her head vigorously.\n\n\"No, I'm important for the raid. Important enough that it's worth risking. You see, it turns out I'm amazing with locks.\"\n\nIn fits and starts she began to pour out her story. \n\nShe'd hoped to meet others with the changes, and she had. Not as many as she'd hoped, but over time she realized that Lukas's organization had many more members without the changes. People who had lost loved ones to the Unit. Lukas remembered every person still imprisoned inside, and he had searched out their family and friends as recruits. A selection of those ordinary people made up a good part of the raid, along with a larger group of InfoCorp dissenters, headed by none other than Myra Jackson.",
        "\"There was no one to teach me,\" she said. \"No Abuela, unless you count Lukas. I've been careful to hide the extent of my abilities, especially any indication that I can affect anything outside my body. Even so I was clearly among the most gifted; no one else can sense the structure of things the way I can. Mechanical combination locks are trivial for me. Other locks are harder, but knowing how they're constructed, knowing what's behind a wall \u2014 every lock can be defeated if you hit it the right way.\"\n\nShe finally smiled, and Esther felt herself begin to calm. Nicola had found something after all, even if it wasn't exactly what she'd been looking for. She'd been using her abilities again, and she hadn't shied away from touching Mark or Esther. The psychological wound she'd taken from killing Andrew was healing.\n\n\"But what about Franklin?\" Mark said. \"You shouldn't go anywhere near him.\"\n\n\"It's all right,\" Nicola said quickly. \"Lukas has proven he can resist him. And he's been teaching me. You see, I'm so good at focusing my attention on tiny details. That gives me an advantage, as long as I'm using my sensitivity that way.\"\n\n\"Are you sure?\" Esther asked, taking her hand. \"Absolutely sure?\"\n\n\"No, of course I'm not sure,\" said Nicola. \"I'm fucking terrified. But Lukas is physically stronger than me, and he'll be with me the whole time. He promised to knock me out if I show the slightest sign of becoming a zombie. I believe him in this. He absolutely detests Franklin. And in the end, there's no alternative. I'll never live comfortably if Franklin is out there, and this is the best chance to get him.\"\n\nMark looked unhappy, but it was her decision.\n\n\"I will keep you safe as best I can,\" said Esther.\n\nNicola nodded slowly and looked at her again. \"So, I assume you're the one who's going to be spying on the Unit. I guess your skills have grown?\"\n\nQuickly Esther explained what she'd been able to do to hide Mark the night that Lukas's men had come to the camp.\n\n\"It turns out he knows you've been staying there,\" said Nicola. \"I didn't give Lukas any information and he stopped asking. But it's very hard to hide things from him. It's almost spooky at times.\"\n\n\"Nicola,\" said Javier. \"Don't take this the wrong way, but I have to ask. Are you sure there's a chance this raid could succeed? Even if we manage to fry their computers and surveillance and all that? Won't they have many people with talents like you or Lukas?\"\n\nNicola rubbed her eyes.\n\n\"It's a long shot,\" she said bleakly. \"But there are a few things in our favor. First, Lukas remembers Franklin being tired after long sessions with him. And that was when he was controlling many fewer people than he is attempting now. Perhaps his control is weaker than it was. Second, Lukas doubts he would have been a very good soldier when he was under Franklin's control. His instincts were still his own, and though he was quite physically strong, at the time he was cautious and had no particular training to fight anyone. There are some people like Andrew, trained as security, but Lukas thinks Franklin was nervous about having too many near him at once. Most of the security is ordinary people with guns, which is bad enough.\"\n\n\"But even one person like Andrew would be a nightmare to face,\" said Mark. \"It's just you and Lukas and a bunch of ordinary people, then?\"\n\nNicola nodded and looked uncomfortable.\n\n\"Lukas is even more than he seems,\" she said. \"He's strong, and he's been training himself ever since he escaped. Plus, I told you the spooky way he knows things. Raj described him as the perfect intelligence analyst, but it's more than that. He's at least as sensitive as Mark, and he has such a good intuition that it's almost as though he can predict the future for a little. You see, with his skills he can win almost any fight, but he can also sidestep fights entirely. He certainly doesn't have Abuela's particular skills, and I've never seen him use his abilities beyond his own body, but I would be terrified of him if I weren't on the same side. As it is, though, I don't think there's anywhere safer to be than next to him.\"\n\nNicola realized her mistake when she saw Mark's expression. She pulled Mark down next to her on the bed and put an arm around him.\n\n\"I wish you could come along, Mark,\" she said. \"You're stronger than anyone Lukas has, and I trust you absolutely. But in there is the wrong place for you. You're too sensitive in exactly the way Franklin could take advantage of.\"\n\nMark seemed a little mollified by that, and Nicola kissed him again. \n\n\"Oh, God, I've missed you,\" she said, slipping her hands under his shirt. \"Hey, you know, we've still got an hour. Ah, unless there's something else we need to discuss?\"\n\nShe looked at Esther with pleading eyes, and Esther shook her head. Nicola smiled sadly, and then she attacked Mark.\n\nKat and Javier stared, frozen, as the two of them pulled each other's clothes off in a frenzy. Esther moved to stand with them, feeling the pleasant tingling of arousal. She'd missed watching Mark and Nicola. But probably this wasn't so simple for the others.\n\n* * *\n\nJavier swallowed uncomfortably when Nicola pulled off her bra, revealing a perfect set of breasts with fat brown nipples. She had freckles as well, similar to Esther's, and she shivered when Mark brushed them with his lips.\n\n\"You all right?\" Esther asked him and Kat. For her part, Kat was staring openmouthed at the scene. They shared an uneasy glance.\n\n\"I guess,\" said Javier. \"I'm not going to stand in their way. Maybe we should take a walk. Uh, except you, Esther. But I guess you're used to it.\"\n\n\"They're used to it as well,\" said Esther. \"They don't think about privacy the same way we do. But maybe we could go over our plans. I could even do a trial run.\"\n\nKat nodded and unpacked her laptop, modem and other equipment. There was nothing special about the phone line in the room, but it was sufficient for what they were going to try.\n\nJavier glanced back to see Nicola on all fours, her breasts jiggling with every thrust. But Mark's muscled ass blocked the best views. He swallowed and tried to focus on what Kat was saying. Though honestly Kat seemed even more flustered than him. \n\nEsther took occasional looks, but she was obviously calmer about it than they were. And it was turning her on. Javier could see the little signs.\n\n\"All right,\" Esther said. \"I've been too nervous to extend my senses that direction, but I have to try this sometime. Might as well give it a shot.\"\n\nShe gestured for Javier to sit in the chair, and then she straddled him, smiling when she felt his raging erection. He held her tight and began to stroke her back, and she rested her head on his shoulders. And since there was nothing else to look at, he watched Mark and Nicola fucking as though they might never get the chance again. \n\nEsther's breathing slowed, and she rubbed herself rhythmically against him. She probably wouldn't get an orgasm this way, but he could tell how much she was enjoying it.\n\n\"It's quiet,\" she muttered. \"So quiet. Hardly anyone's even talking in there.\"\n\n\"Can you sense Franklin?\" he asked, heart pounding.\n\n\"I know where he is,\" Esther said. \"I'm trying not to even think about him.\"\n\nJavier shut his mouth. Esther was doing something dangerous, and she hardly needed his input.\n\nAfter a few minutes, Esther sighed and kissed him.\n\n\"No luck,\" she said, climbing off of his lap. \"I found a computer room with a few people. I could even sense some of what they were typing. No passwords.\"\n\n\"Write down everything,\" said Kat. \"The more I know about their systems, the better our chances.\"\n\nThe three of them were suddenly distracted by a deep moan from Nicola. Mark kept pounding into her from behind, and finally she gasped, the ensuing silence filled only by the continued squelching noises of Mark's cock in her dripping pussy.\n\nNicola finally collapsed, and Esther began writing on a pad for Kat. But Javier couldn't pay attention to that, because Nicola stood up, stark naked, and smiled slightly at him. Mark had rolled over on his back, his glistening cock standing erect, and Nicola moved to straddle him. Then she settled herself down, facing the other three unashamedly as she continued to fuck Mark.\n\nJavier jumped when he felt Esther's hand on his cock. But she simply rested it there. And Javier was too unsettled to know what to do about it.\n\nKat's voice interrupted them.\n\n\"Can you get some more information?\" she asked. \"Listen for a while longer?\"\n\nThe room had two queen beds. Javier half expected Esther to head for the other. If she did, he would follow her. Surrender to this strange scene. He'd do anything for her.\n\nBut she simply sat on his lap again, and he sighed and closed his eyes. The room was a haze of smells and overripe feelings. He'd barely slept last night out of anxiety, and exhaustion warred with arousal. Whenever he blinked his eyes open, there was Nicola, her back arched in ecstasy, her body on full display. She was intimidating, and he ached for her. But that ache was nothing like the ocean of need for the tiny woman in his arms. She was the smartest, the bravest person he'd ever know. If the best he could do was make it easier for her remarkable abilities, that was enough for him.\n\nSome time later Nicola was getting dressed. He'd fallen asleep, but Esther was still rocking gently against him. Finally she sighed and stood up. A few seconds later there was a knock on the door.\n\n\"That's for me,\" Nicola said sadly. She gripped Esther tightly. \"Promise me,\" she said softly. \"If Lukas fails, don't let me be taken by Franklin. I don't care what you have to do to me, as long as it doesn't put you at risk.\"\n\n\"I promise,\" said Esther, and then she kissed Nicola right on the lips. It was a strangely erotic thing for Javier.\n\nNicola walked out with the grace of a martyr.\n\n* * *\n\nKat rubbed her face unhappily and poked at the cold Chinese food.\n\n\"It's worse than I thought,\" she said. \"That computer I tried and failed to hack? I don't think it's actually configured to accept remote logins. Given the Unit's paranoia, I'm starting to think none of their computers is. They just left one apparent access point dangling to try to sniff out intrusion attempts. And I fell right into that trap. Lucky I'm so careful to disguise where I'm coming in from.\"\n\nEsther had eavesdropped until she was too tired to continue, and no one had entered anything like a password, or spoken more than a few words. And she supposed that didn't even matter given Kat's suspicions.\n\n\"Lukas was right,\" Javier said. \"They have thought about someone sensitive trying to listen in. Maybe there's no way to do this after all. But I hate the idea that we can't do anything.\"\n\n\"Let's sleep on it,\" Esther said. \"There's something tickling my mind about this. But I'm not thinking straight.\"\n\nJavier looked at the two beds. He and Esther would be sharing, of course, but he could hardly expect Kat \u2014\n\n\"Where's Mark?\" he asked suddenly. Then he remembered: Mark had been pacing the room in agitation, and he'd slipped out for a little air, promising to be back shortly. But that was at least ten minutes ago.\n\nEsther looked suddenly panicked. But she nodded quickly after closing her eyes and nodded. \"He's in the hall,\" she said.\n\nAnd just after she said it, there was a horrible crashing noise outside.\n\nJavier was the first to react, rushing to open the door, in time to see a half-dressed man stagger past their door and disappear around the hall. A woman starting yelling in Spanish.\n\nThe door diagonally across from them was ripped completely off its hinges. Javier stepped carefully into the room and almost bumped into Mark, who was walking back to their room with a dazed look.\n\nThe woman in the other room was in her twenties, wearing only panties, and holding her hand against her mouth. She was bleeding slightly and swearing incoherently.\n\n\"\u00bfEst\u00e1s bien?\"\n\nShe stared at him like he was a complete idiot, which he suspected he was. She pointed in the direction of their room and started swearing more specifically about Mark.\n\n\"Fucking moron. I can handle a man like that,\" she mumbled in Spanish, dabbing at her lips. \"Oh, Ernesto is going to kill me. The door, that idiot. I've got to get out.\"\n\nAs she put her bra on, things began to click into place. This shitty motel was exactly the place where certain transactions would happen. And Mark had apparently interrupted one.\n\n\"Would money help with Ernesto?\" he asked.\n\nShe looked at him again as though he was an idiot, but she was listening. He pulled out three hundred dollars, everything in his wallet, and she stared at the money as though he was trying to trick her. But then she grabbed it and struggled into her tight shoes. \n\n\"Doesn't help with the door,\" she said. \"Doubt you can fix that. Shit, I'm out of here.\" \n\nShe grabbed her purse and hobbled down the hall. Javier went out in the hall and was struggling pointlessly with the door when he heard another man's voice.\n\n\"What the hell are you doing?\"\n\nJavier turned his head and found himself face-to-face with a sputtering, overweight man. It was the motel manager.\n\n\"Sorry,\" he said with a thick accent. \"Crazy man. Ernesto says sorry. I have money to fix. Eleven hundred dollars?\"\n\nThe manager gaped at him while Javier slipped into their room to retrieve most of the rest of their cash. Kat and Esther seemed to be trying to take care of Mark, so he went right back out. When he'd paid the manager, the man looked somewhat mollified.\n\n\"You tell Ernesto not to let anything like this happen again,\" the manager said in a low voice. \"I run a quiet establishment, and money can't solve everything.\"\n\nJavier nodded quickly and closed the door.\n\nMark was sitting up on the bed, shaking his head. \"He was hurting her,\" he kept repeating.\n\n\"She's all right,\" said Javier. \"And you scared him off. He's not going to hurt her again.\"\n\n\"Javier's right,\" said Esther. \"Calm down, Mark. Your heart was in the right place, but we can't fix everything all at once. We have a job to do.\"\n\n\"Where's Nicola?\" he demanded.\n\nNervously, Esther closed her eyes.\n\n\"Nicola's fine,\" she said after a few seconds. \"Back in the hotel with Lukas, though it looks like they're packing up for tomorrow.\"\n\nMark nodded and lay back on the bed. In a few minutes he was sound asleep in that infuriating way of his.\n\nKat sighed. \n\n\"He volunteered to sleep on the floor,\" she said. \"But I'm not about to evict him. Would you guys sleep OK with me in the bed too?\"\n\nSomehow Javier wound up sandwiched between the two women. And to his surprise, he slept like a baby.\n\n...*** Chapter 45 ***...\n\nKat scowled in frustration. It was nearing lunch and they were going around in circles. Mark's constant pacing wasn't helping any of their tempers.\n\n\"You sure you can't just blow up all their computers with your mind? That would be convenient.\"\n\nEsther rubbed her eyes. \"You know I can't do that. Maybe Abuela could affect external things with her mind, and so can Nicola. But it was difficult for both of them, and I've never managed anything like it.\"\n\n\"Wait,\" Javier said. \"That's not true. You can pull on sensitive people from a great distance. And you always explain that's because humans are already listening for sensory input, and because they're poised among decisions. Wasn't that the whole reason we started thinking about computers as well?\"\n\nEsther paused and nodded slowly. \"Kat,\" she said. \"Let's think about this a different way. Are there things a computer is always listening for? Or maybe some sensitive hardware that could change its behavior given just the right weak signal?\"\n\nKat pushed her chair back and thought.\n\n\"Yes,\" she said finally. \"That sort of sensitivity is everywhere. Software or hardware are always subject to misbehavior if they get unexpected input. We live with the idea that random failures can happen, and we just design so those failures are very unlikely.\"\n\n\"And that's where I come in,\" said Esther with some excitement. \"Javier's right. Whatever it is I do to touch other humans' senses might allow me to touch - a computer's senses? I just have to find the right butterfly to flap its wings. And I'm getting better at that all the time.\"\n\nKat broke into a smile. \"All right,\" she said. \"Let me think about this.\"\n\nBut it wasn't so simple. Kat knew a lot, and Esther's surveillance so far had given her plenty of clues about the hardware and software in Unit's computers. But Kat only had so much memorized.\n\nBy dinner time, they all felt the time pressure. Kat finally threw up her hands and presented their best option.\n\n\"The switching router,\" she said. \"I know that hardware inside and out. It's the best chance. If you can reset it, I know its usual default password, and that could give me an access point. From there, I have a chance, if they've made any mistakes. If, if, if.\"\n\n\"Tell me everything about this router,\" said Esther, and Kat nodded tiredly.\n\nAs always, Javier was astonished and a little terrified when Esther set her mind to learning something. Of course she wouldn't forget anything Kat told her, but it took a lot more than that to understand a complicated bit of hardware. Esther would sometimes stop for a few seconds and stare at nothing, and then ask an apparently unrelated question. In the end, her mind just didn't work the way Javier's did. Or Kat's, to judge from the growing irritation of the other woman.\n\n\"All right,\" Kat said. \"That's all I have. Seriously. I wish I'd brought the technical manual with me.\"\n\n\"No, this was far better than a technical manual,\" Esther said. \"I'd have needed to ask you all those questions anyway. Now I need to think for a little.\"\n\nJavier wasn't surprised when Esther took out her pen and started doodling one of her bizarre geometric drawings. After some minutes she sighed.\n\n\"OK, Javier. I think we need to have sex.\"\n\nHe suppressed a nervous laugh. Of course she was serious. It was just so \u2014 horribly unromantic. \n\nEsther took his hand and kissed him, hard. But she trembled against him, and not from excitement. She was as terrified about all this as he was. He stroked her hair and looked around.\n\nMark kept pacing as though neither of them were there. Kat had slid over to the corner with her laptop, and was studiously ignoring them.\n\nFinally Kat looked up at the two of them awkwardly embracing.\n\n\"Well, this sucks for you guys,\" said Kat. \"Who wants sex to be an obligation? And it's not like Mark and I are helping the mood. Tell you what. I'm going to take Mark out on a walk for a half hour. You guys should get in the bath or something. Mark? Let's get some air.\"\n\nShe cautiously took Mark's arm, and he blinked. After a few seconds he nodded and followed her out the door.\n\nEsther sat on the bed. \"I'm so sorry, Javier. I'm treating you like an appliance or something. Kat is totally right. I swear, when this is all over, I'll make it up to you.\"\n\nJavier sat next to her. \"Nothing to apologize for,\" he said. \"I knew you were a weirdo from the first time we met. So what if you sometimes need sex for reasons that no one else does? I should consider it good fortune. It's not like I don't enjoy it.\"\n\nEsther leaned against him. \"You're too good to me. Now, I'm going to take Kat up on the bath thing. But could you give me a while alone? I need to get my body in the mood. Maybe you should do the same. Do you want to have sex with Kat?\"\n\n\"What?\" spluttered Javier.\n\n\"Maybe not tonight,\" said Esther. \"But sometime. I think she wants that. And I know I want to have sex with Nicola again, if that's all right with you. Now I'm going to go to the bath and think about that, and then think about what the two of us are going to do in a few minutes.\"\n\nBut when Esther emerged naked twenty minutes later, Javier had lost the mood entirely. He couldn't stop thinking about Franklin, and how much danger they were all in. And he kept expecting someone to barge through the door: the police, the Unit, or just Mark and Kat.",
        "\"It's OK,\" he kept saying as he helped her lie back on the bed. \"You just tell me what you need from me. \n\n\"I'm sorry,\" Esther said again. \"Oh, this is so unfair. Just use your tongue, and try to keep me from coming too quickly. Remember how we did it out on the rocks? That was some of my best thinking. I need all the time I can get.\"\n\nThat was how Mark and Kat found them shortly afterwards. Of course they didn't say anything, and Javier tried not to notice them. He focused on the rhythm of his tongue, the feel of her skin and her fine fur, the feelings he didn't have words for. He loved doing this for her, and he always would. \n\n* * *\n\nJavier's tongue moved with an inexorable beat: in, out, in, out, matching the small motions of her back on the bedspread. His hands moved more slowly, tracing her nipples, her breasts, her freckled patches, the fingers finding new paths. Javier was good at this, better every time.\n\nKat glanced at her again, and she smiled at the other woman. Kat didn't quite know how she fit into Javier's life anymore, and that was unfair. But they could work all that out later. For now, she had a job to do, and Javier was doing everything he could to get her there.\n\nShe closed her eyes, letting her senses expand gently. She was terrified of looking too closely towards the Unit's facility, not knowing or understanding Franklin's abilities. But at least she'd found the important computer room. Her mind reached for the tiny sounds, the vibrations, the smell of ionization and the warmth of the machines. The room she was in faded, and she searched. Not for a person, but a machine, with its much simpler rules and sensitivities. It should be easier, but it wasn't something she'd practiced.\n\nJavier broke his rhythm to kiss her, once, his lips pressing reverently against her small hole as though she could kiss him back. And soon after he resumed his pattern, she gasped lightly. There it was! She felt the humming and patterned lights as though it was a familiar person, Kat's detailed description of the router solidifying into this very real mass of black metal and circuits.\n\n\"Faster,\" she murmured, and Javier immediately followed. Her body sang with arousal, her mind opened like a flower, and she *listened*. There was data flowing into and out of the router, some of it from elsewhere in the building, but none from the outside. It had that capability, though. She needed to break open the lock, the way Nicola described. But her hammer would be as soft as a butterfly's wings.\n\nTime itself seemed to slow, and the data in the wires spread out in her mind's eye, glittering and floating slowly along a river. The code for a soft hardware reset was simply another pattern of lights, reaching a slightly different set of registers. It was phenomenally unlikely to happen by accident, and yet from time to time little fragments joined together by chance. It was a puzzle, a laborious and pedantic one compared to the way she called to a sensitive person. \n\nAnd yet she had the growing certainty she could do it, if she had the time. Already her body was shaking, tiring of holding itself so perfectly balanced near orgasm. \n\nThere! Her body tumbled inexorably to her orgasm, and in the last instant she did \u2014 something. Then she was moaning and coughing and laughing, because Javier was tickling her and she loved him so terribly.\n\n\"Kat,\" she croaked. \"Now.\"\n\n* * *\n\nBy the time Esther got dressed, Kat was utterly absorbed in her laptop, typing furiously and biting her lip. No one dared interrupt her.\n\nFive minutes later, Kat whooped in excitement.\n\n\"I'm in!\" she shouted gleefully. \"Someone reused a password. Sloppy, sloppy. Now, I have to hide myself.\"\n\nIt was a full hour later when Kat was satisfied. She'd hidden her incursion as best she could, and the virus was loaded and waiting. All it needed was a single command. She logged off and unplugged the modem.\n\nJavier handed her the phone. \"You get the honors,\" he said. \"What an amazing job.\"\n\n\"All thanks to Esther,\" Kat said. \"I can't believe what she pulled off. We make a hell of a team, don't we?\"\n\nEsther smiled, then kissed Javier. \n\n\"Couldn't have done it without you,\" she whispered, and he hugged her tightly.\n\nKat reached one of Lukas's aides, and their conversation was brief. She would trigger the virus at ten to midnight, and the raid would begin immediately after. Until then, they had nothing to do but eat a late dinner and sit tight.\n\nEsther found herself wanting to pace along with Mark. She knew what was bothering him, because the same thing was bothering her.\n\n\"I should be going with Lukas and Nicola,\" she said. \"I'm probably more resistant to Franklin than anyone. Abuela thought so.\"\n\n\"And how will you explain that?\" Javier asked. \"We talked about this. It's incredibly dangerous, and you're so important in ways that have nothing to do with Franklin. And what could you do in there, anyway? You're not good at fighting.\"\n\n\"Resist Franklin,\" she said. \"Protect Nicola, maybe. I don't know.\"\n\nEsther shook her head. They'd already argued about this and she'd reluctantly agreed with the others. She would have to do what good she could from here. What she hated was her guilty relief. Franklin terrified her, and yet Nicola was accepting an even greater danger.\n\nFinally, the time edged close. Kat nervously tried logging in, and they all relaxed when she succeeded again.\n\nAt the appointed moment Kat hit the enter key. Within seconds she was booted off her connection, and she smiled in satisfaction.\n\n\"That's a nasty virus all right,\" she said. \"It's out of our hands now.\"\n\nShe made the final call to Lukas. Esther could feel the team assembling, a small fleet of cars converging from all directions on the parking lot behind the building. Quickly she found Nicola.\n\n\"Javier, hold me tight,\" she said. \"I'm going to try to protect Nicola from Franklin.\"\n\nA minute later, there was a muffled boom in the distance.\n\n\"What the fuck was that?\" Javier blurted.\n\nEsther almost laughed in amazement.\n\n\"They blew a hole in the side of the building,\" she said. \"I didn't see that coming. Nicola's gone right in with the others.\"\n\nThere were about thirty of them, and they were all wearing strange equipment. An instant later she understood.\n\n\"Gas masks,\" she said. \"They're throwing exploding balls of gas. People inside are coughing and falling over. It's brilliant! The Unit wasn't prepared.\"\n\nBut that wasn't entirely true. The conference room they'd broken into was secure for the moment, but from further inside the building, she felt people approaching. When she finally risked extending her senses, she gasped.\n\nThere were dozens of men and women with guns. And some of them were highly sensitive and moving far too fast. They were like Andrew. Lukas had been wrong, or else Franklin's fear of Lukas had outweighed any other concerns.\n\n\"What is it?\" Javier whispered.\n\n\"Too many,\" she coughed, trying to understand what was happening. There were some gunshots.\n\nMark made a horrible noise and ran to the door. Almost too late, Esther reached for him and *pulled*, stopping him in his tracks.\n\n\"LET ME GO,\" he roared. \"My choice, Esther. You have to!\"\n\nEsther was crying, but Mark was right. She let him go, and he shot out of the room like an Olympic sprinter. \n\nEsther ignored the cries from Javier and Kat, and focused on the melee in the office building.\n\nLukas's team and Myra Jackson's recruits kept throwing the smoking bombs, but a few of them were already down on the floor with gunshot wounds. Reluctantly they began to return fire on their own friends and colleagues, but now the swirling smoke and the gas masks played against them. Some of the men and women facing them had the changes, and these adversaries were advancing steadily even as they coughed from the gas. \n\nTentatively, Esther picked one of the most sensitive men, and she *pushed* on his attention. He stumbled slightly, glancing behind himself, and then continued forward.\n\nThere were too many, and there was something worse. All of them were being helped, their attention kept forward by another presence: Franklin.\n\nShe could feel the sticky strands of his attention, and as she nervously expanded her senses she began to understand his power. Even now he was calling for reinforcements from outside the compound. He had to be knocked out soon, or everything would come crashing down on them.\n\nTendrils of his attention moved towards their masked team, but there were no easy targets. That was when she realized Nicola and Lukas were gone.\n\nShe found them quickly in her panic. They'd quietly disappeared into a side stairwell, and now they were bounding down towards the underground levels. \n\nEsther realized this had been Lukas's strategy all along. He would sacrifice the entire rest of the team to the main resistance, and then go for Franklin on his own, with the only person who could speed his journey: Nicola and her lock-breaking skills.\n\nShe hated him for it, but it made a kind of sense. And she had to protect the team in the lobby. She had to protect everyone if she could. It was Franklin who was propelling this fight, not the poor enslaved men and women.\n\nShe pushed, and she pulled, and the advance slowed. A woman with the changes tumbled to the ground and succumbed to the gas. But there were dead and dying scattered on the floor. She couldn't do anything for them. For all her efforts, bullets kept flying in the smoke. And there were other fights happening. Strong men and women ripped gas masks off of the invaders, took ragged breaths, and dealt crushing blows in the process.\n\nAnd then Mark burst in like an avenging angel.\n\nHe found a mask right away, pulling it unceremoniously from a dead woman. She'd never seen him move so fast, and she feared what he was doing to himself. But he was all controlled fury, grabbing and breaking guns, wrestling with their owners, leaving one after another unconscious man or woman behind. He moved through the defenders like a scythe, until suddenly an enormous man barreled into him and knocked off his mask.\n\nThis man vastly outweighed Mark, and he was strong enough to pin him down. But Mark struggled, and when Esther yanked hard on the attention of the stronger man, it was all over. Mark retrieved his mask and moved quickly to the next man.\n\nThe team was rallying behind Mark, and a new round of smoke and gas bombs began to turn the tide. They pushed further inside, and Esther quickly checked on Nicola and Lukas.\n\nThey'd had an easy time of it so far, with Lukas only leaving a single unconscious man behind. Somehow Lukas knew exactly when to slip inside a door, and when to make a mad dash along the corridor. They were deep below ground, rapidly approaching the place Esther feared to probe. Franklin's lair.\n\nSuddenly she felt something wrong with Mark. He was slowing, and then he froze.\n\nAn alien tendril of sensations was enveloping him. With disgust, Esther pushed back, but Franklin was too subtle, and too experienced. Mark bent down in confusion, reaching for a weapon.\n\n\"Mark!\" she yelled aloud, and she *pulled* him back to her, away from this horrible place. Franklin's assault redoubled, and Mark was caught between the warring sensations. She could feel the trembling of his body, the confusion as he tried to sort fact from fiction, and she cried and scrambled to pull harder.\n\nAnd then a single shot struck Mark in the chest. He crumpled and was still. \n\nEsther began to shake, her vision falling away until all she saw was Javier's hands holding her tight, and all she heard was Javier's terrified attempts to reassure her.\n\nWith a huge effort, she began the simplest meditations once more. Her mind touched Mark's body, and he felt like a corpse.\n\nThere was nothing she could do for him. He'd been shot before, and he'd survived, but this time it was right in his heart. Perhaps he could recover from it. But she needed to see to Nicola. She didn't have the strength for anything else at the moment.\n\nShe could feel Franklin everywhere, his questing tentacles extending even beyond the building, and she had a sudden terror. He might have felt her. Probably he had felt something, given how easily she was perceiving him. She might be well-hidden in her person, but he must know someone was opposing him.\n\nBut her protection of Nicola seemed to be holding. She watched in amazement as the pair reached another reinforced door. Nicola put her hand on it, stood utterly still, and then said something quickly to Lukas, making a quick motion with her hands. A second later Lukas sliced through the wall with a short length of metal he carried, and he ripped away some electronics. The door unlocked and they kept moving.\n\nThey were barely a hundred feet from Franklin, and finally he perceived something. In an instant all of his attention focused on the hallway, and Nicola stumbled. Lukas looked at her, but Esther's protection held for the moment, and they continued running down the hall, until they reached the final reinforced door. Esther poured all of her energy into hiding Nicola. And in one shocking instant, Franklin seized control of Lukas.\n\nLukas punched Nicola so hard that she flew back against the opposite wall. She put up her arms, trying feebly to ward him off. But now Lukas was fighting Franklin with his own ferocious will, and Franklin reached for Nicola as well. \n\nAll of Esther's protections were shattered now that Franklin had seen Nicola through Lukas. A frightful calm settled on Esther as she realized there was only one choice remaining.\n\n\"Franklin!\" she shouted out loud, and simultaneously she dropped all of her own veils.\n\nFor years Esther had hidden herself. Don't be conspicuous, Mother had always said. Don't show off, and don't ever be noticed. Even after Nicola and Javier had helped her overcome much of her instinctive body modesty, those instincts had continued to shield her. And now she was naked, utterly exposed to the sight of a monster.\n\nFranklin immediately recognized the danger of his new opponent, and for a brief instant his mind turned all of its awesome power onto her.\n\nShe'd picked the wrong side. Lukas was killing Nicola, even as she watched. But no, of course he wasn't. He was the one who'd recruited her, though, and everything that had happened and everything that was going to happen was his fault.\n\nShe cried and held onto Javier while Franklin whispered terrible things about the people she loved, his power somehow turning her own thoughts against her. But even as he did, she understood she could stop the horrible sensations at any time. She was stronger than Franklin, but she could not let him realize it. Something else was tickling her mind, but she couldn't give it any attention.\n\nDimly she felt Nicola pointing to the door, and with a burst of strength Lukas smashed straight through. Franklin's attention vanished from her mind and he pointed the handgun at Lukas, but in that instant Esther smashed Franklin with every ounce of her strength, and he froze. \n\nLukas had the gun in a half second, and then there was a bloody hole in Franklin's head. \n\nWithout even pausing, Lukas carefully arranged the corpse with the gun in hand. Then he collapsed on the floor, barely conscious.\n\nIt was over. Franklin was not physically strong the way Mark was. To her relief, she realized she could hear Mark now, and he was breathing. \n\nNicola seemed stunned by the whole scene, and so Esther gave her a very slight nudge. Lukas hardly seemed to notice when she disappeared, picking up speed as she retraced her steps.\n\nWithout Franklin's direction there was confusion among the Unit's employees, and the remaining members of the attack team were steadily moving through the building, encountering little organized resistance. The large conference room they'd broken into at the start was littered with bodies when Nicola arrived, but the conflict had moved on.\n\nShe found Mark almost immediately, and with a grunt she got him over her shoulders.\n\n\"It's over,\" Esther said, shaking her head and looking with wonder at the other two. \"We need to help Nicola.\"\n\n\"Did we win?\" Javier stuttered. \"Is Mark all right?\"\n\nOf course they had no idea. She quickly filled in the details for Javier and Kat.\n\nWhile Javier sprinted over, Esther sat with Kat and continued to describe what was happening. Myra Jackson had survived, and she found Lukas with Franklin's body. The two of them shared a long silence, and then she helped him to his feet. As others arrived, the story of Franklin's suicide began to spread. \n\nEsther didn't know how they were going to explain all the dead. They weighed heavily on her, all the faces burned irrevocably in her memory.\n\nAbuela could have stopped it somehow, could have found another way. But Abuela was gone. \n\nMore than ever Esther needed her advice. Because she'd made a mistake, one Abuela might have warned her about. \n\nWhen she'd opened herself up for Franklin to see, she had felt another presence, or perhaps more than one. Listeners, from an immense distance.\n\nShe'd been so provincial. She knew there were those with the changes all around the world. Abuela had even implied it was foolish to assume either of them was unique. \n\nProtect yourself first, Abuela had told her. It wasn't an easy lesson to accept, and even now she didn't think she accepted it. But her own advice to Mark was also true: they couldn't solve every problem. And she had so much still to learn.\n\n...*** Epilogue ***...\n\n\"No, no, that's not going to work,\" Esther said, standing up and gesturing at the board in frustration.\n\nRaj paused in his work, waiting for a clarification, but as usual she couldn't express herself properly.\n\nProfessor Anatoly Kuznetsov pushed back his chair with a snort and shook his head at Esther. \"You're going to kill both of us. Raj, why don't you keep going, even if our young apprentice has taken the wind out of our sails. Esther, try not to interrupt until you actually see what's going to blow up with the argument. Consider it a training exercise if nothing else.\"\n\n\"I'm sorry,\" she said. \"Sorry, Raj. I'm being so impatient. It's just, this is all so important, isn't it?\"\n\nRaj nodded understanding, and Anatoly sighed. \"Sometimes I think both of you have a little too much zeal. Maybe I'm getting old.\"\n\nAn hour later, Esther met Javier at the bus stop as usual.\n\n\"Great news,\" she said. \"The admissions office says a spring admission is possible, and Raj says that unofficially I'm nearly guaranteed. How about you? Any luck on that project?\"\n\n\"I broke down and asked Kat,\" he said. \"She's not the teaching assistant for *my* class, so surely that's all right? Anyway, it was only a stupid mistake preventing it from compiling. That's how it always goes. Oh! I heard from Nicola. She and Mark want to have us and Kat for dinner this weekend up at the camp, like an early Thanksgiving. How does that sound? They're practically family, right? I told Mam\u00e1 I'd be down there next week, but no reason I can't do both if I'm willing to drive a whole lot. And Mam\u00e1 also wants to see you, of course.\"\n\n\"It sounds perfect,\" agreed Esther. \"Like something worth giving thanks for.\"\n\nShe thought of the last Thanksgiving with both her parents, two years ago. Mother smiling through her pain while Esther and her father followed directions in the kitchen. A tight little family who would do anything for each other. As the tears began to fall, she tried to explain to Javier. They were good tears. She could remember every detail of that day, and soon she had him wiping aside tears as well. \n\nShe had a family again, and she'd do anything to protect them. Abuela had been wrong: that was the place to start. And Abuela in her old age had attempted to be family for everyone she could. One day, Esther would do the same."
    ],
    "authorname": "rockchaser",
    "tags": [
        "action",
        "romance",
        "powers",
        "unusual body",
        "coming-of-age",
        "fantasy"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/the-strangeness-within-pt-07"
}
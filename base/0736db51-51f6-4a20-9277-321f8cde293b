{
    "title": "The Big Tits Club Ch. 45-46",
    "pages": [
        "THE BIG TITS CLUB by bluedragon\n\n****\n\n-- CHAPTER 45: Sorry --\n\n****\n\nBefore we'd started drinking, I'd entertained idle fantasies about various combinations for an eight-way orgy. It was our last night in an ocean-view cliff house with no parental supervision, after all. Surely everyone would want to end our trip with a bang (or seven). But clearly, that wasn't going to happen tonight.\n\nBelle and Mari were already in the second bedroom by the time I emerged from my shower, and I could hear muffled voices as they talked, not to mention Mari's occasional sobs. I chose not to interrupt them.\n\nAlice and Naimh were in the office looking more stunned than anything, Alice pumping up the air bed a little while Naimh sat on the Murphy bed. I popped in to make sure they were alright, and both girls gave me quick kisses before I left and closed the door behind myself on my way out.\n\nSam, Zofi, and Holly were still in the living room downstairs. The three of them were supposed to spend the night with me, and I assumed from the fact that the other rooms were occupied that plans hadn't been changed while I was gone. The three of them looked up from their conversation at my arrival, all of them staring at me silently. I asked quietly if everything was alright, and Sam replied on their behalf by stating in a subdued voice, \"We're fine.\"\n\nNothing else was said, and as the awkward tension built, it became clear they weren't going to continue their conversation with me present, so I told them I would turn in for the night. I drank some water, brushed my teeth, and climbed into the big king bed alone. And with the amount of alcohol in my system, I fell asleep pretty quickly, still alone.\n\nThe girls did eventually join me at some point, as I woke up in the middle of the night finding the bed pretty full. Holly was on my right side, at the edge of the mattress so she didn't have to touch anyone. Sam was on my left, with Zofi beyond her. The two of them were spooned together quite comfortably.\n\nI'd been spooning Sam in my sleep as well, but now I rolled onto my back and stretched a bit. Moments later, though, Sam moaned a bit and reached back with her right arm. She grabbed my side and tugged, grunting semi-consciously in complaint. I molded my chest against her back once more and brought up my right leg to follow the contours of hers. I had an erection, and I lightly ground it into Sam's panty-clad ass. She sighed happily and pulled my arm around so that I held both her and Zofi together. And within another couple of minutes, I fell back asleep.\n\nHolly was gone from the room when I woke up in the morning. I had no idea how the rest of the day would play out yet, but I wondered if the social butterfly wouldn't flit off to some other group of friends after this day rather than stick around with the obviously dysfunctional and drama-filled BTC. I was still spooned behind Sam and Zofi, my morning wood throbbing in my pajama pants.\n\nI rather absentmindedly ground it against Sam's ass while my conscious brain booted up, but once I realized what I was doing, I pulled back. The group's emotional issues had not yet been resolved, and I knew better than to think of my own selfish desire to just get myself off at a time like this.\n\nNot wanting to disturb the girls' slumber, I slid off the bed on the opposite side and quietly slipped out of the room. I went straight to the bathroom, had to wait a couple of minutes for my erection to go down so I could pee, brushed my teeth, and then headed downstairs.\n\nHolly and Naimh were at the dining table, drinking coffee and eating what food we had left. Nobody mentioned last night's kerfuffle, and the two of them seemed pretty chill with each other. I got myself coffee, exchanged quick pecks with both of them, and felt thankful that at least I could feel at ease with two out of seven. But while there was no awkward tension between us, neither was there any sexual tension. And for me to be around either of the two nymphomaniacs for an extended period of time without any sexual tension was... well... abnormal.\n\nAwkward tension returned when Belle and Mari arrived. The two newcomers, likewise, seemed to have patched up their differences with each other, but there was still palpable unease between the two pairs of girls. Belle and Mari collected their breakfast and moved into the living room rather than join us at the table. Five minutes later, Alice got her food and did join us at the table, sitting between me and Naimh. Lastly, Sam and Zofi came down twenty minutes later.\n\nWe'd made no formal plans for what to do for this, our last day in the Santa Cruz house. Ideas had been tossed out over the course of the week for finally walking down to that beach a half-mile away or taking another drive down the coast to see the sights. Up until last night, no one would have expected to end our Spring Break vacation early, but once Sam read the room, she asked, \"Any objections to packing up and heading home?\"\n\nThere were no objections.\n\nAt least, not at first.\n\nEveryone quietly left to get dressed. Packing up itself wouldn't be difficult since the girls had been keeping their clothes in their suitcases because of the constant musical bedrooms. I stayed downstairs to clean up the kitchen, figure out what food and drinks I could bring home to stash in my fridge until the next time the BTC came to hang out at my house, and start taking out the trash.\n\nI was tidying up the living room when Belle and Mari came down in their day clothes and rolling their suitcases. Belle took one look at my pajamas and told me, \"Hey, go get yourself changed and packed up. We can finish up down here.\"\n\nI nodded wordlessly and headed up the stairs. Holly, Sam, and Zofi were already dressed, and for a moment I cursed myself for cleaning the house when I could've been in the room watching three hot babes undressing instead. Having gone without getting laid for the first night in a while, I started getting a fresh chubby at the mere thought of the girls in their underwear, but I tamped down on that urge. When the girls looked up at my entrance, I explained, \"The kitchen is clear. Belle and Mari are tidying up the living room.\"\n\n\"Thanks, Matty,\" Sam said with a smile as the three of them headed out the door. \"We've already cleaned up everything here.\"\n\nI nodded and walked over to my suitcase, removing my t-shirt as I went. I also snaked off my pajamas and then sat down on the side of the bed to change into my cargo pants.\n\n\"That looks a little uncomfortable,\" Sam's voice commented lightly from behind me, her tone teasing.\n\nI twisted around to find that Sam hadn't actually left. She leaned against the doorjamb, arms folded across her chest. She gave me a little grin and stepped into the room, closing the door behind her. I watched her, curious, as she circled around the bed and knelt down before me, the tent in my boxer shorts big and obvious.\n\nOnce I realized her intention, I immediately said, \"Oh, Sam, you don't have to. Don't mind him. He just has a mind of his own.\"\n\nShe smiled up at me as she pulled my dick out through the flap and took a long lick along the bottom of my shaft. \"I know I don't have to. That's why I want to.\"\n\nI shivered at the sensations of pleasure and leaned back, bracing myself with my hands on the mattress. \"Ohhh... shiiittt...\" I groaned. \"If you keep that up, I'm gonna cum really fast.\"\n\nSam paused and grinned, the blonde's beautiful face looking radiant in the morning light. \"It's okay if you pop off quickly. I know you must be pretty backed up after not getting any last night.\" And then she took me into her mouth again.\n\nWhat followed was not the greatest blowjob of my life or anything. She didn't slam her entire face down to massage me with her throat muscles. I never grabbed her head to skull-fuck her. Sam just sort of lovingly and languidly sucked on my schlong for a few minutes, and when I started groaning and twitching, she sealed her lips around my mushroom head and rapidly stroked my shaft with her right hand. Moments later, I grabbed her head and held on for dear life while evacuating the contents of my balls into her vacuuming mouth, moaning the whole time.\n\nShe drank down every drop like a pro, humming happily as she did so, staring up into my eyes the entire time. After that first initial burst of overwhelming pleasure, I started chuckling and caressed her cheek even while my cock was still spurting out the final shots. And once I was done, I let my arms buckle and fell back across the bed.\n\nSam nursed my prick for the final few dregs before pulling off and smiling down at me. \"Feel better?\"\n\n\"Much. Thank you.\"\n\n\"I'm glad. You're welcome.\" She kissed my cock one more time before pushing her hands down on the bed and standing up. \"C'mon then. Let's get downstairs and join the others.\"\n\n****\n\nEveryone was still pretty quiet when Sam and I joined them in the living room. Belle and Mari looked like they'd rather be ANYWHERE but here, and Alice tapped her foot impatiently like she just wanted to get on the road and be done with this place.\n\nIn fact, as I glanced around at all seven of the girls, I realized that they each wanted nothing more than to get away from each other. And as that realization pinged around in my brain, I was struck by just how... wrong... that was. This was the BTC. This was one of the most close-knit and tightest cliques in the entire school. These girls were BEST FRIENDS, and while we'd managed to \"go to bed angry\", as the saying goes, we would NOT leave this house still angry.\n\nEveryone was up with one hand on the telescoping handles of their suitcases, ready to bail. But with a final disgusted shake of my head, I held up the keys to the minivan, shook them, and deliberately put them back into my pocket. And before anybody decided to get this show on the road, I announced loudly, \"Okay, this is ridiculous. You were waiting on an objection, Sam? I'm objecting. And I am NOT leaving here until we get this sorted out.\" With a frown, I walked over to the big couch and dropped my ass onto the center cushion, perfectly willing to remain in that seat for however long it took. Sure, Sam might be able to override me, load some of the girls into her Escalade, and drive off, but she didn't have enough room for all of them.\n\nFortunately, it wouldn't come to that. The beautiful blonde gave me a grateful smile and followed suit, abandoning her suitcase to walk over to her usual armchair and plop down into it.\n\n\"Really?\" Holly complained. \"I'm sorry, you're sorry, we're all sorry for losing our heads last night. We were drunk and we were stupid and can't we just get the fuck outta here?\"\n\nSam shrugged. \"You're welcome to catch a bus.\"\n\n\"I'm welcome to kick you all out of my house,\" Holly retorted.\n\nSam just gave her a look. Holly pursed her lips and glanced over everyone else. Zofi was quick to grab a dining table chair and park it next to Sam. Alice nodded and walked over to me, extending her hand for a fist bump before dropping onto the cushion next to me. Belle, then Mari, and then Naimh followed suit. And finally, with a sigh, Holly grabbed a dining table chair and came to join the circle.\n\nAnd then we worked things out.\n\n****\n\nThe fight itself last night had lasted less than ten minutes, but the group discussion to resolve it took a little bit longer. Sam got us started by apologizing once again for mounting herself on me what felt like eons ago. Naimh admitted that she'd never really gotten over Sam getting to me first.\n\n\"I forgave you at the time, and I meant it,\" Naimh stated solemnly. \"But there's a selfish part inside me that had always wanted to be Matty's first -- to be his special one. I tried to convince myself it wasn't a big deal. But I guess it still niggles me, and I'm not completely sure I'll ever fully get over it.\"\n\n\"I understand,\" Sam said tightly, looking sad.\n\n\"I want to believe you didn't do it just to beat me out.\"\n\n\"I didn't. I would've been perfectly happy for you to have been his first.\"\n\n\"You sure?\" Naimh raised her eyebrows. \"We all know how competitive you are -- how important it is for you to be number one.\"\n\n\"To be honest, I always thought Belle was going to beat you to him, and I'd made my peace with that. Getting his cherry...\" Sam took a deep breath and sighed. \"The really shitty thing about that is: I wasn't thinking about you or Belle or even Matty. Being Matty's first was never a goal of mine. When it happened, I was only thinking of myself. It was a horrible thing to do to someone, but I took his virginity just so I could selfishly not feel like a failure.\"\n\nSam pursed her lips and exhaled slowly, closing her eyes while shaking her head.\n\n\"I took away something precious to both of you for nothing. I know how much that hurt not only you, but everyone else. It changed EVERYTHING, and while I'd like to think things turned out alright in the end -- especially for Matty -- if I had the chance to do it all over again, I wouldn't have done it like that. I don't regret having sex with Matty, but I do still regret the manner and the timing in which it happened.\"\n\nI looked around, and the other girls were nodding their agreement.\n\nSam finished, saying, \"Please believe I never meant to hurt you or anyone else.\"\n\n\"I believe you,\" Naimh confirmed.\n\n\"That means a lot. And as for the competition that followed: I'll admit, being able to say I was his first titfuck or his first shower sex or his first overnight gave me little thrills, just like I'm sure being his first anal or his first minivan sex gave you thrills. I'd like to think that at first, it was all in good fun, a little healthy competition that you enjoyed, didn't you?\"\n\n\"I did.\"\n\n\"Thing is: I realized I wasn't being competitive for the right reasons. After my whole anal deflowering went painfully wrong, I realized I wasn't being competitive in good fun; I was being competitive for that same selfish drive to not feel like a failure.\"\n\n\"You're like the opposite of failure,\" Mari put in.\n\n\"Thank you.\" Sam gave her an appreciative smile. \"The point is: I realized that my competitive drive was coming from a part of myself I don't really like. I've been working on it, and a large credit goes to Beverly -- uh, to Matty's mom -- for helping me get my head on straight. I'd like to think you may have noticed I haven't been quite so competitive lately.\"\n\nNaimh smiled. \"Yeah, we noticed.\"\n\n\"Thank goodness for Matty's mom,\" Alice cracked.\n\nEveryone laughed at that.\n\nThen it was Naimh's turn. \"I'm sorry I called you a 'control freak'.\n\n\"Well, I kinda AM a control freak. I don't mean to come off as bossy and overbearing, but I know that I do, and I apologize if I hurt any of you.\"\n\n\"It's okay,\" Naimh insisted. \"Truth is: I appreciate how you always seem to know what to do. I'm sure we all appreciate your leadership.\" She glanced around the circle and got nods from everyone, including Belle.\n\n\"You've been a good leader,\" Mari added. \"The BTC would never have gone on as long as it has without you guiding us or without us following your rules. I mean, if the sex stuff had started last year, I wouldn't have been ready to be a part of that yet and probably would have left.\"\n\n\"Me too,\" Alice chimed in.\n\n\"You DID leave for a bit,\" Belle pointed out.\n\n\"But if it happened last year, I wouldn't have come back,\" Alice sighed.\n\n\"Sometimes I don't agree with your decisions,\" Naimh continued, returning her attention to Sam, \"and too often I just swallow my objections instead of speaking up. I let those emotions fester and build up resentment, which isn't fair to you.\"\n\n\"It's cool.\" Sam shrugged. \"I get it. Believe me, I understand the struggle of trying to contain my emotions.\" She looked over at me for a second before catching herself, practically jerking her attention back to Naimh.\n\n\"Me too,\" Belle spoke up. \"I'm sorry, Sam. You've been so great for me in so many other ways, and you don't deserve my resentment. None of you do. I accused you of thinking you were above the rules when I was the one trying to break them. When you took his cherry, I was only days away from finishing my period after taking birth control. Even if you hadn't crossed the line and broken The Rule, I would have done so soon enough.\"\n\nSam shrugged.\n\nBelle added, \"And then I let myself think the rules didn't apply to me when we made the sex boycott.\"\n\n\"Yeah, what was THAT about?\" Alice muttered. \"We all agreed together to stand with Neevie and you were ready to undermine that without a care.\"\n\nBelle looked down at her lap. \"I couldn't help myself. I was super horny, and yes, I was selfish. I didn't realize the consequences of what I was about to do, but Matty did and he stopped us.\"\n\n\"In her defense,\" Naimh chimed in, \"she did come clean with me. She said she was going to confess to the rest of you as well, although I obviously didn't let her get around to doing that.\"\n\n\"To be honest,\" Sam added, looking at Belle, \"we sort of expected you to sleep with him anyway. We knew you were spending the night, and had you two confessed in the morning to losing control and just sorta... 'oops, we fucked each other', none of us would've been surprised. Disappointed? Yes. But not surprised.\"\n\n\"I would've forgiven an 'oops',\" Alice complained. \"But spending all evening with a butt plug in her ass? That's premeditated.\"\n\n\"She's sorry about it,\" Mari said defensively.\n\n\"Well of course you'd defend her,\" Alice grumped.\n\n\"Believe me, I was as hurt as anyone last night,\" Mari shot back. \"She was preparing to betray ME, too. But she's genuinely sorry about it and wishes she'd never done it.\"\n\n\"She's sorry she got caught is what she's sorry for,\" Alice muttered.\n\n\"She didn't get caught,\" I interjected. \"Nothing happened. In the end, nothing happened, and she confessed to Naimh first and was going to tell the rest of you too, okay?\"\n\nAlice sighed.\n\n\"I AM sorry, Alice,\" Belle said to her directly. \"I'm sorry that I ever made you feel betrayed. I lost my head, I was at a point where I was feeling... unsexy... I was feeling like I didn't measure up to the rest of you. I felt like I was losing my special place in Matty's heart and I wanted so desperately to get it back. Surely YOU know a little of what that feels like.\"\n\nAlice pursed her lips and looked away, that last sentence getting to her where the previous apologies hadn't.\n\n\"I've been dealing with these jealousy issues,\" Belle continued. \"Matty knows I'm still working on it. And for those issues I also need to apologize to Holly. I never gave you a fair shot. We even had that chat on the beach Tuesday, and I promised you I'd be better. I wasn't, though.\"\n\n\"No, you weren't.\" Holly sighed. \"But I appreciate you being honest about it. And don't sweat it. I promise I'll stay out of your hair once we all go back home.\"\n\nNaimh sat up straight. \"What, are you gonna leave us?\"\n\nHolly shrugged. \"I was never really one of the BTC in the first place.\"\n\nI frowned. \"Don't walk away at the first sign of rough waters.\"\n\n\"Why? Would you miss me, Matty?\" she asked a rather coyly.\n\n\"Yes, I would,\" I replied frankly.\n\n\"You've got your hands full as it is.\" Holly head-nodded towards Belle. \"And as much fun as we've had together, I'm not the type to stick around where I'm not wanted.\"\n\n\"I didn't say you weren't wanted,\" Belle objected.\n\n\"Yeah, just because we all had one fight doesn't mean you need to leave,\" Mari insisted. \"Sam, tell her.\"\n\nSam held up her hands. \"Zofi and I talked to her all last night. Her mind's made up.\"\n\n\"If she wants to go, let her go,\" Alice muttered.\n\nEveryone turned to glare at her.\n\n\"What? Look, I'm perfectly cool if she wants to stick around. I'm also perfectly cool if she wants to go. She got what she wanted in the end: she got to bang Matty six ways from Sunday, and then she got to bang all six of us. Everybody had a good time, but let's face it: We all knew she wasn't gonna stay forever.\" Alice sighed and shook her head. \"What does it matter anyway? We're all splitting up in a few months. If she wants to bail, let her bail. It just means I get more of Matty while I still can.\"",
        "Naimh frowned. \"That's pretty cold.\"\n\nAlice rubbed her forehead. \"Yeah, well, I'd be perfectly happy for us to all just drive home and wake up tomorrow forgetting any of this ever happened.\"\n\n\"We can't just ignore what happened,\" I told her.\n\n\"Why not? Friends say bad shit to each other and let it go. What was that movie that said, 'Love means never having to say you're sorry'?\" Alice gestured at Belle. \"I'm annoyed at her about the premeditated butt plug thing, but I'll get over it. I was mad at Sam for taking Matty's cherry, but I got over it. There are a hundred other things we could all say we don't like about everyone else, but in the end, we're the fucking BTC. You're the closest set of friends I've ever had, and yeah, we had a shitty night last night. But you know what? It was an unexpected speed bump on what's been a really smooth highway for a long, long time. Put that shit in the rear-view mirror and keep going. I missed the Tahoe trip. I missed a month of being with my best friends over stupid shit like this. There are only so many days left that we have together, and I really don't want to waste them any more than we already have just because we got drunk last night and said a few things we shouldn't have.\"\n\nThe room went silent for a moment as everyone considered Alice's little monologue. Naimh grinned and rubbed Alice's knee. I was on Alice's other side and gave her a hug.\n\nFor a while, the room went silent. But then Belle spoke up again. \"I still need to apologize to Holly for the 'dumb slut' comment. I didn't really mean it. I was just drunk and lashing out.\"\n\n\"Yeah, you're kind of a mean drunk,\" Holly muttered. \"Not a good combination with being such a lightweight.\"\n\n\"Holly...\" Sam warned.\n\nThe pink-hair girl sighed and gave Belle a more serious look. \"Apology accepted. And I should also say sorry to Alice for the 12-year-old comment.\"\n\n\"AND the trucker hat,\" Alice chuckled, adjusting the cap on her head. \"I LIKE this hat.\"\n\nHolly laughed. \"Yes, and sorry to the hat.\"\n\nThe room went silent again. But just for a bit.\n\n\"I'm...\" Zofi began hesitantly, the first time she'd spoken up at all.\n\n\"I'm sorry for...\" she began again, but still paused, swallowed, and gave Naimh an anguished look with fresh tears in her eyes. \"I shouldn't have said what I said last night.\"\n\n\"Oh, no, I deserved that one,\" Naimh said with a shrug, glancing at me for just a moment before returning her attention back to Zofi. \"That's one I'm gonna have to live with for the rest of my life.\"\n\n\"I still shouldn't have said it,\" Zofi apologized.\n\n\"And I'm sorry for calling you a whore,\" Naimh replied.\n\nZofi frowned. \"You called me a whore?\"\n\nSam laughed. \"We really couldn't understand you when your accent got that thick. You were yelling stuff in Irish, too.\"\n\n\"It was kind of hot, actually,\" I added.\n\nEveryone laughed at that.\n\nNaimh thought for a moment. \"Actually, I think I called you a whore,\" she said to Sam.\n\nEveryone just laughed harder.\n\nBut Naimh turned and looked at me. \"I'm really sorry, Matty.\"\n\nI replied sincerely, \"I already forgave you.\"\n\n\"I know you did.\" She took a deep breath and looked rather melancholy, in stark contrast to the room's laughter of a moment ago. \"I'm still working on forgiving myself, though.\"\n\nNow it was Alice's turn to reach out to hug her, and the room once more lapsed into silence.\n\nI looked over at Sam, and she looked straight back at me. \"You good?\" I asked her.\n\nSam pursed her lips, mused on that, and nodded. \"I'm good.\"\n\nI stood up. \"Who wants to go home?\"\n\n****\n\nSam drove Zofi and Holly back to town. Belle, Mari, Alice and Naimh rode with me. The mood was subdued, but at least no longer tense. Everyone was a bit emotionally drained, and conversation was sparse. We pretty much just listened to music the whole way back.\n\nAfter dropping everyone off, I started by unloading the leftover food and drinks into my kitchen and then dumped out my suitcase to start a load of laundry. I had just finished closing the washing machine door when I turned around and jerked in surprise to find Belle standing a few feet away.\n\n\"Shit, B. I should never have given you the key back,\" I muttered, holding my hand over my chest.\n\n\"Sorry!\" she squeaked. \"I wasn't trying to sneak up on you.\"\n\nI waved her off, the matter already forgotten.\n\nWithout another word, she extended an arm out to me. I took her hand, and she led me over to the family room and plopped us together on the couch. She even took my left arm and wrapped it around her body before pulling her legs up beneath her and snuggling against my side with her head on my chest.\n\n\"I owe you an apology,\" she stated quietly.\n\n\"You already said sorry for surprising me.\"\n\n\"Not that.\" She grimaced. \"I apologized to everyone else, but not to you.\"\n\nI frowned. \"What do you have to apologize for?\"\n\n\"For starting the fight last night in the first place.\"\n\n\"Not entirely your fault,\" I said diplomatically. \"Everyone was drunk and everybody said some things I'm sure they regret.\"\n\n\"But I'm the one that started it.\"\n\n\"Well, yeah, that's probably true.\" I rubbed her head and sighed. \"Good lord you were bombed out of your mind yesterday.\"\n\n\"I blame the tequila. That stuff really sneaks up on you.\"\n\n\"Well it doesn't help that you don't even weigh a hundred pounds soaking wet.\"\n\n\"You saying I need to put some meat on these bones? Put a little more fat into my ass and titties like the other girls?\"\n\n\"That's a little extreme,\" I said, hedging. \"You just need to recognize your limit.\"\n\n\"I wasn't talking about drinking, Matty.\"\n\n\"Of course not,\" I muttered with a sigh. \"I think you are absolutely amazing exactly the way you are and you really need to stop comparing yourself to the other girls.\"\n\n\"But you like fucking the other girls more than you like fucking me.\"\n\n\"Good freaking lord, B,\" I groaned and let my head loll back until I was staring at the ceiling. \"I'm tired, it's been a long trip, and I'm still mentally drained from everything. For the last fucking time, you need to STOP thinking I like fucking the other girls more than I like fucking you. You have the tightest little pussy I can imagine and it's absolute heaven for me to be inside of you. I bow down to the holy gods of pleasure for those rare times you let me into your ass, you can suck a golf ball through a hose, and Matty's Little Cumslut always gets me going. I LOVE you. I LOVE being with you.\"\n\n\"Then how could you even THINK of leaving me and going to a different school?\"\n\n\"Well keep spouting this bullshit about believing you somehow don't stack up to the other girls sexually and I'm DEFINITELY going to leave you and go to a different school!\"\n\n\"Matty!\" she whined.\n\n\"I'm serious, B. I'm over it. What else can I possibly do or say to convince you I love you and I'll love you forever?\"\n\n\"Say you'll marry me?\"\n\nI raised both eyebrows and called her bluff. \"Is that what you really want?\"\n\n\"No, of course not. I mean kinda, but no, not really. I was joking. I...\" Belle sighed and squeezed both arms around me. \"I'm just TERRIFIED of you leaving me.\"\n\n\"Relax, relax.\" I sighed. \"I'm going to Berkeley with you.\"\n\n\"For real?\"\n\nI nodded. \"For real.\"\n\n\"Then why couldn't you say so last night?\"\n\n\"Because I was annoyed at you for claiming it was a done deal.\"\n\n\"Isn't it a done deal?\"\n\n\"Well, neither of us has turned in our paperwork yet, have we?\"\n\nBelle immediately popped up and practically started running in place. \"I'll go get mine now. Be back in two minutes. I already filled out all my forms, but I'll wait and watch you fill out yours.\"\n\nI sighed. \"I already filled out my forms, too.\"\n\nShe held her hands up. \"Then why haven't we turned them in?\"\n\nI took a deep breath. \"I dunno. Maybe I was procrastinating until I knew where everyone else was going. I mean, what if everybody else got into Stanford instead?\"\n\nBelle frowned. \"WE didn't get into Stanford, so why would it have mattered?\"\n\n\"Bad example. What if nobody got into any of the top universities and everyone else was going to San Jose State?\"\n\nBelle blinked. \"You'd give up Berkeley Engineering to go to San Jose State?\"\n\nI shrugged. \"Tell me that if all five of the others were going to San Jose State, including Mari, you wouldn't be tempted to go with them.\"\n\nBelle blushed and averted her eyes.\n\nI rolled mine. \"Nevermind. You'd just be thrilled you'd get to have me all to yourself at Berkeley. You're STILL thrilled you get to have me all to yourself at Berkeley.\"\n\nShe winced and gave me an innocent look. \"Can you really blame me? I love you, Matty. And I'm cool with sharing you with all my friends. But come fall, it'll just be you and me. I mean, we can still get together for the holidays and have a big orgy together. I'll be happy to masturbate watching you plow the shit outta them and go slurp up the creampies. But the rest of the time? You'll be mine. Only mine. The two of us together, the way we were always meant to be. Am I supposed to NOT be happy about that?\"\n\nI shrugged and looked up at the ceiling for a minute, taking a deep breath. \"We all have our dreams. I would've been thrilled to have everyone I care about go to Berkeley together where we'd all live in a big house off-campus and I'd get to bang all six of you non-stop for the next four years. But that's just not realistic.\"\n\nBelle's eyes glittered. \"I'd have been fine with that if it had come true. Please don't think I'm HAPPY none of our friends are going with us. But this is the reality we have. Cal is the best school for both of us, we both got in, and you may think there's more to picking a college than where our friends are going, but -I- need to be SURE that I'm going to college with YOU. I'm not leaving you. We get to be together. I THOUGHT you'd be happy about that!\"\n\n\"I am, I am.\" I sighed, taking her hand and drawing her into my lap. She straddled me and smiled while I thumbed her cheek and then held her head behind her ear. \"I love you, Annabelle. I always have. The selfish part of me wishes the others were coming with us to Cal. But destiny has decided, and it is what it is. This would have been a much harder decision had I gotten in but you didn't, but we both did, and... well... doesn't it feel a little 'meant to be'?\"\n\n\"It does,\" she enthused and kissed me quickly.\n\n\"Believe me, I am THRILLED we'll still be together.\"\n\n\"Me, too.\" She kissed me again, this time with a little more passion.\n\nI chuckled and pulled her off. \"So fine. You wanna get this done? Go get your paperwork, I'll get mine, and we'll even drive down to the post office together to send them off via certified mail.\"\n\n\"Not yet.\"\n\nI frowned. \"Not yet? You were so eager a minute ago.\"\n\nBelle's hand slid between us, into my shorts, and she wrapped her little fingers around my cock, squeezing and caressing. \"Not yet,\" she confirmed. \"There's something I wanna do first.\"\n\n****\n\nThe bell rang, and when I opened the door, I actually stopped and popped my eyebrows, muttering, \"Holy shit!\"\n\nI was expecting her. It was a Saturday morning, after all. But I wasn't expecting her like THIS. I mean yeah, Alice had been updating her wardrobe week after week, usually going for edgy/sporty/punk outfits that brought out her sex appeal and yet remained quintessentially tomboy \"Alice\". But today she was a hundred percent \"girly\".\n\nScratch that, she was a hundred percent WOMAN.\n\nIt started with stiletto high-heeled pumps. I'm going to say that again: Alice. Stilettos. My mind was blown right then and there. Then came the black thigh-high stockings I'd seen before, but they weren't paired with basketball shoes anymore. Otherwise, her lower body was only covered by black satin panties. No shorts. Just the panties. And she topped all that off with an honest-to-god black satin corset that lifted and squished her big D-cup breasts. Finally, she wore a black choker and had her hair up in some kind of fancy updo as if she were going to the prom. If you had told me a year ago that I would EVER see Alice dressed the way she was this morning, I would have asked what kind of drugs you were on. Only the fact that she wore a red peacoat over the top explained how she'd made it from my driveway to my front door, although she obviously held that coat wide open now so she could watch my jaw drop to the floor.\n\nI blinked several times and staggered back, clutching my chest. \"I think I'm gonna have a heart attack,\" I muttered.\n\n\"Not allowed,\" Alice drawled. \"You gotta make me cum first. Then you're allowed to die.\"\n\n\"Duly noted.\" I took a step back and gestured for her to come in.\n\nBelle had stayed with me this morning, although we'd only had sex once upon waking because I didn't want to wear myself out before Alice's expected Saturday morning arrival. My little Annabelle wasn't totally sure what kind of reception she'd get since she was technically crashing Alice's time with me, and had told me she was prepared to head back home at the first sign she wasn't welcome. But the instant Alice saw her, she walked up to the diminutive strawberry-blonde and held out a fist. \"'Sup, B. Can you stick around today?\"\n\nBelle looked surprised by the question. \"Uh... yeah. I mean, I know this is usually your time with Matty so I can totally go home instead of rain on your parade if you'd prefer.\"\n\nAlice's smile was all teeth. \"Do you know how many times I've said to Matty after he's just cum deep inside me, 'Too bad Belle's not here to slurp out the creampie'? Well, now you're here!\"\n\n\"Um, okay! But you sure you don't mind?\"\n\nAlice shrugged. \"I've got about four months until the two of you head up to Berkeley and leave me, and I intend to make the most of it. Ooh, here's an idea. Matty, you go sit on the armchair and watch Belle take my panties off with her teeth. Then after she eats me to a nice orgasm, she can sit on my face so I can return the favor while you skewer me with that big dick, hmm?\"\n\nI blinked. \"So I'm gonna assume we're NOT playing video games?\"\n\nAlice rolled her eyes. \"Seriously, dude. I roll up dressed like this and you think we're playing video games first?\"\n\nI keyed in on the word 'first' and replied, \"Ah. Give Alice some amazing orgasms and Belle slurps out the creampie. THEN we play Mario Kart or something together for fun before starting Round 2.\"\n\nAlice held out her fist, and when I bumped it, she grinned and said agreeably, \"Boom.\"\n\n****\n\nRound 1 started exactly as Alice had suggested. I sat in the armchair and watched Belle take off Alice's panties with her teeth. The high heels got in the way a bit at the end so Belle had to remove them, but then Alice had Belle put them back on. Afterwards, the flexible Korean girl parked the stiletto tips on the edge of the couch cushions to either side of her, splaying her semi-clad body out wide in open invitation for the strawberry-blonde pixie to come eat a late breakfast.\n\nAlice moaned and groaned, popping her tits up above the corset and tweaking her own nipples while Belle provided expert cunnilingus. Alice quickly grew frustrated with her own top, which was very alluring to look at but not very agreeable in terms of access. She wound up unhooking the corset halfway down the front to give herself enough more room to shove her whole hand inside and fondle the globes. By then, I couldn't resist any longer and joined her on the couch so we could wetly gnaw each other's face off while I finished unhooking the rest of her corset and tossed it aside so I could start gnawing on her tits instead.\n\nEventually, Belle ate Alice to a screaming orgasm and together my \"little sister\" and I laid the Asian girl across the couch with her ass up on the padded armrest and her head draped back on a cushion. I then wrapped Alice's stockings-and-stilettos-clad legs around my waist while steadily feeding her snug canal inch after inch of thick man meat, and Belle parked her naked pussy atop Alice's face so she could get the favor returned.\n\n\"Fucking A you were so hot in that outfit,\" I told Alice as I fucked her. \"I never would've imagined I'd see you dressed up so sexy for me. I mean, you've looked wicked hot in your own inimitable Alice way, so I'm not saying you ever need to change. But when you opened that peacoat and showed me what you had on underneath... Holy shit... I almost want to pull out just so you can get dressed and show me again. Almost.\"\n\nAlice chuckled, her voice muffled by Belle's pussy. She had her hands up so she could palm and play with the pixie's pert boobies. And she flexed her legs to help me continue pumping in and out of her.\n\n\"Fuck your pussy feels so good,\" I groaned, keeping up a steady rhythm.\n\nAlice finally pushed Belle's crotch away, muttering, \"Actually yeah, pull out, Matty. I've got no leverage with my ass up here. I wanna flip over.\"\n\nI moaned just a little. Alice's pussy really did feel that good, but I obediently withdrew and Belle dismounted so we could change positions. Alice parked Belle on the couch, sitting atop the backrest, actually, while she put her knees on the cushion and waggled her butt back at me.\n\nI swiftly re-buried my dick to the hilt and took advantage of the new position to reach around and cup my best friend's swaying tits. She grinned at me over her shoulder before leaning forward to first kiss Belle on the lips and then nibble her way down the petite strawberry-blonde's naked body, suckling on her neck here, swirling her tongue around a perky breast there, and finally working her way all the way down to Belle's crotch.\n\nThe angle was a little off, and Belle had to brace herself so as not to fall off the backrest. She even raised her left leg and stretched it along the top of the couch to create more room. But after a while, Alice picked her head up and muttered, \"This isn't working. Go ahead and sit down on the cushion.\"\n\nBelle smirked. \"Not everything has to be a strangely-contorted pretzel position.\"\n\nAlice shrugged. \"Worth a shot. Can't say we didn't try it.\"\n\nIn the meantime, Alice had me unplug again so she could move down as well, and we ended up in a more standard threesome with Belle on the couch, Alice kneeling on the floor, and me kneeling behind her pounding my pelvis off her pretty posterior while she licked Belle's clit and fingerbanged two digits in and out of the other girl's tight hole.\n\nI managed to hold out until both girls came. Once Belle squealed her climax, she sat back and just sort of idly played with herself while watching Alice bow her head and focus on banging herself back at me. With full knowledge that my lovers had been satisfied, I relaxed the tension on my core and let myself pound away at my best friend's pussy. For her part, Alice was pounding just as hard with every thrust to meet me in the middle.\n\nSuddenly I was there, grabbing Alice's hips to pin her ass against my crotch as I unloaded once, twice, three times... and then retracted to add fourth, fifth, and sixth spurts in there as well. Belle was moaning and frigging herself even harder while watching me spunk inside our friend, although she didn't quite get herself off. As soon as I chugged to a stop, Matty's Little Cumslut slid off the couch, flipped herself onto her back, and wriggled her head in-between Alice's A-frame thighs while I backed away, and I soon heard the sounds of a creampie getting slurped out. Only then did Belle finally scream her orgasm into Alice's crotch, masturbating herself furiously while drinking down every drop of sperm.\n\nThe three of us actually played Mario Kart afterwards without getting dressed. Little Belle and I were as naked as the day we were born, although Alice had the thigh-high stockings and still wore the stiletto heels.\n\nBelle wasn't competitive about the game like me or Alice, but the three of us had fun nonetheless. I should've expected Alice wouldn't play fair, because after a half-hour or so, she got Belle to give me a blowjob to try and distract me. I don't want to say that I was getting jaded, but I was actually pretty successful at ignoring her and focusing on my driving. I mean, I'd already cum once, so the urgent need to get off wasn't there. And I already knew with absolute certainty that there would be many more Belle blowjobs in my future as well.",
        "Finally Alice just told Belle to mount my dick instead. But after I proved myself capable of just staring over the top of Belle's head even while the petite pixie humped her tight pussy up and down on me, Alice got annoyed. Finally, she decided to switch with Belle and sit on my dick reverse cowgirl instead. Her taller height and insistence on actively shifting left and right to block my vision proved to be a more successful impediment to my driving. And after her car passed the finish line first, Alice thrust her arms into the air, crowing, \"I win!\"\n\nI got my revenge, though, at least as far as I was concerned. Alice was in the middle of thrusting both arms up in victory when I pinned her down on my dick and hauled us over to the side so I could bend her face-down over the armrest. Then I made deep, driving thrusts into her hot, juicing slit, reveling in the feel of her buttery cunt walls fluttering around my invading dick.\n\nPerhaps she'd been primed from her racing victory, because after only three minutes Alice screamed her pretty little head off as she came.\n\nI thrust my arms into the air, crowing, \"I win!\"\n\nBy then, Belle had parked herself on the couch, kneeling on the cushions and bracing her chest against the backrest. I was quick to seize the invitation by walking over and steadily pushing my shaft into her wet, pink sanctuary.\n\nBut after Alice recovered, I spun Belle around into a reverse cowgirl position and reclined against the backrest while Alice climbed into Belle's lap, alternately feeding the little pixie her swollen nipples or bending over so the two of them could suck each other's tongue. I was still amazed to see them so comfortably having sex with each other given the animosity Alice had shown Belle twenty-four hours earlier. But Alice had been true to her word to just \"let it go\". And after making out with Belle for a few minutes, Alice only had to lean over a little so she could make out with me instead.\n\nIn the end, I started moaning and groaning about my impending orgasm as Belle worked her inner milkmaid muscles to milk me for all my... uh... milk. I cradled her round titties in my palms and bent to kiss and nuzzle at her neck while she rapidly humped her entire little body up and down my dick, masturbating me with her tight pussy in search of a fresh cream filling while Alice reached down between them to rub Belle's swollen clit.\n\n\"Fuck, Belle...\" I grunted. \"You're so fucking tight. You're gonna make me cum.\"\n\n\"Cum for me, Matty,\" Belle moaned. \"I want it. I need it. I'd come get it every day if I could. I HAVE to get your sperm.\"\n\n\"Yeah, Matty. Fill her up. Cream the horny little bitch so I can suck it out.\"\n\nBelle's eyes flew open wide. \"You're gonna suck out my creampie?\"\n\n\"Better fucking believe it,\" Alice breathed. \"You two are so hot together. And I wanna taste Matty's seed on my tongue.\"\n\n\"You're gonna taste it soon. I'm about to... I'm gonna... UNNNNNGGGHHH!\" I groaned and started nutting my load deep within Belle's clenching cooch. Blast after blast of hot jizz splattered against her inner walls as I bathed her cervical entrance with scalding semen and imagined I was shooting straight into her womb.\n\nIn the end, I filled up my Belle's sweet snatch with creamy cum, and Alice dismounted to kneel in front of us. Belle and I were still gawking in amazement, but Alice just muttered, \"Yeah, yeah. I'm doing this, get over it.\"\n\nAnd with that, Belle elevated herself off my slowly-shrinking prick and held her labia open. Alice waited for the first globs of jism to make their appearance, and then she pushed her head forward and began to audibly slurp.\n\nI think Belle had another orgasm, almost more from the sight of Alice (Alice!) slurping out the creampie than the physical stimulation of the Korean girl's suctioning mouth.\n\nAlice swallowed some of my seed, but not all. She remembered to save some and snowball it to Matty's Little Cumslut at the end. And I chuckled to myself in amazement watching the two beautiful teenage girls swapping spit and my sperm between them.\n\nAlas, all good things must come to an end. The three of us wrapped up our morning, got dressed, and both of the girls left to head home.\n\nMy stomach growled at me once they were gone, and I was trying to decide whether to make something for lunch or drive out and pick up fast food. But before I could make my decision, the doorbell rang again.\n\nI wondered who would be at the door, and speculated it might be a Jehovah's Witness or someone selling coupon books. But when I opened the door, I smiled in pleasant surprise to find the most gorgeous thing I'd ever seen standing on my doorstep.\n\n\"Hey, Neevie. Wasn't expecting you to drop by.\"\n\nShe raised both eyebrows, taking a deep breath and collecting herself before replying, \"Hey, boyfriend.\"\n\nI blinked and furrowed my eyebrows, not understanding immediately, but a moment later, it hit me. \"Ohmigawd. It's your turn to be my Girlfriend of the Week now, isn't it?\"\n\nNaimh grinned. \"Well, technically I'm not supposed to start until tomorrow. But seeing as Belle and Sam aren't taking their turns, well... Can you blame a girl for wanting to take advantage of an extra day?\"\n\nI grinned and gestured out the door. \"Have you eaten yet? I was just about to go get lunch.\"\n\n\"Uh, yeah, I did, but I'd love to join you anyway,\" she stated quite sincerely, clear adoration in her eyes.\n\nI grinned, happy to have the company. Specifically, I was quite happy to have HER company. \"C'mon. Let's go.\"\n\n****\n\n-- CHAPTER 46: Neevie --\n\n****\n\nSomething tickled my balls, and with a start, I jerked awake.\n\n\"Mmph!\" somebody grunted, and as I sat up, I realized I'd just shoved my dick an inch into a girl's throat. She took it like a trouper, gagging only slightly and keeping her head down, breathing heavily through her nose until I pulled back. She let me withdraw, pulled her head up to take a deep breath, and then once again she lowered her lips around my thick shaft, all the way down until she had my nuts in her face.\n\nMy eyes fluttered for a brief second, giving me just enough time to see the copper-haired head bobbing up and down in my lap at an oblique angle. She wasn't on top of me in a sixty-nine position or anything, but she was reversed on the bed so that her hips were next to me as she knelt and gave me my morning wake-up call. A minute later, she pulled off and glanced back at me, emerald eyes glimmering in the light. And as she recognized that I'd come fully awake, she swung a leg over my face to complete an actual sixty-nine and lowered her musky cunt down to my waiting lips.\n\nWe got each other off quick and dirty with nothing but our mouths. It was a Monday morning after all, and we had to get to school. There was no need for another round of intercourse. Believe me, we'd gotten plenty of THAT all weekend.\n\nSee, Naimh had arrived Saturday afternoon with a small suitcase and an announcement that she'd be spending the entire weekend with me. Long story short, she'd told her parents that I would be going to Berkeley for college while she would be going to UCLA and that she intended to make the most of what little time we had left. While her parents weren't thrilled with only getting her back for one night after she'd already spent the entire week in Santa Cruz, I think the fact that there was a finite limit on our relationship actually made them feel better about her spending additional time with me.\n\nWe went out to lunch together, burgers for me and a smoothie for her, although she did steal quite a few of my fries. This was no pre-planned date; we just sort of hung out. Instead of going back to my house to fuck like bunnies, Naimh took me to the bookstore. I wound up seated in one of their stuffed armchairs while Naimh perched on the armrest, showing me artwork from different cultures, teaching me things like how to distinguish Ming dynasty artwork from the Song or Yuan dynasties. I'd never before taken a really big interest in ancient artwork, but then again, I'd never had a history teacher as beautiful as Naimh, either.\n\nWe actually spent close to two hours in the bookstore and I wound up cooking dinner for both of us at my place. My no longer \"ex\" girlfriend flirted with me throughout the meal and played footsie with me beneath the table, but even after I put the dishes away, she casually deflected my invitations to take things upstairs.\n\nAt the time, I figured she was just playing hard to get as a way of amping up my desire for her. She did let me draw us into a hot and heavy makeout session on the couch, and allowed my hand to slide into her shirt and paw at one of her big, firm, titties. But when I reversed the direction of my fingers and tried to slide them into her pants, she broke our kiss and stared up into my eyes, saying, \"Not yet, Matty.\"\n\nNot able to think of a single time the nymphomaniac redhead had EVER turned me down, I frowned and finally asked, \"Why not?\"\n\n\"Belle's not here yet,\" she replied as if it were the most obvious thing in the world. \"She doesn't know I've come over here yet, does she? I'm already crashing her alone time with you and don't want her walking in to find us already fucking.\"\n\nI frowned. \"Don't you girls normally coordinate that stuff in advance?\" The last time Naimh had come over on a Saturday for her 'first time for the second time', she'd pre-cleared it with Belle.\n\n\"Not this one,\" Naimh admitted. \"I was supposed to arrive tomorrow for the official Sunday start of my week. Showing up a day early was... well... I just wanted to see you.\"\n\n\"I'm glad. I had a great time with you today.\"\n\nShe looked at me skeptically. \"Even though I talked your head off with all the art history stuff?\"\n\nI nuzzled her nose. \"I enjoyed myself. Couldn't you tell?\"\n\n\"Well, I wanted to believe you were enjoying it... but I couldn't be sure you weren't just putting up with me for the sake of putting up with me.\"\n\n\"Believe it. I'm not going to change majors or anything, but you made it really interesting. And if it's something important to you, I want to know about it.\"\n\nThat got her to start another makeout session, but we didn't want to go past Annabelle's arrival. Naimh did let me start fingerbanging her, and she even got a small orgasm, but we otherwise kept both our pants on.\n\nBelle did walk in shortly thereafter, surprised to see me cuddling on the couch with Naimh but not upset in the slightest. Naimh explained that she'd gotten permission from her parents to stay the weekend, and asked, \"Would you mind if I joined you two for the evening?\"\n\nBelle's response?\n\n\"I can't fit Matty and Matty Junior in me at the same time, but if you don't mind, I wanna see how many fingers you can fit in my ass while he's fucking me, and maybe a rimjob while you're at it? Then once I get mine, he's welcome to cornhole the hell outta you and leave a massive pool of sperm in your colon for me to slurp out.\"\n\nSo yeah, Saturday night was great.\n\nSunday morning, Belle actually left me and Naimh alone in bed together so she could go running with Sam. Naimh and I had a pleasant screw that finished with her wrapping her big freckled tits around my cock and humping me until I gave her a rare facial. She recalled how I used to give her facials all the time, back in the days before we'd started actually fucking, and admitted she rather missed feeling me hose down her freckled face. I promised I'd remember to facialize her more often from now on.\n\nShe scraped off what she could and slurped it up before cleaning up. We then headed downstairs to find Mother making brunch alone; Sam and Belle hadn't returned from their run just yet. Mother made pleasant conversation with Naimh and scolded, \"Wait for your guests, Matthew,\" when I eyed the food rather hungrily. Fortunately, I didn't have to wait long as Sam and Belle arrived less than ten minutes later, both of them sweaty and flushed and absolutely beautiful. Despite my hunger, I paused to kiss each of them quite deeply before settling down at the dining table with my plate.\n\nThe girls (including Mother) chatted amiably throughout brunch while I focused on the food, per usual. It occurred to me that the three of them had been the most antagonistic during that Thursday evening fight, save perhaps Holly. But this morning, any animosity from the trip was completely gone.\n\nIt also occurred to me that the three girls I had the strongest feelings for were at the table with me right then and there. I mean, casual acquaintances I knew at school would often ask me which of the six was my favorite, and I'd always deflect from giving anyone a straight answer. But the reality was that I always had a favorite. It's just that the identity of my favorite at any given time was pretty fluid and often subject to whichever one of the girls had given me the most recent orgasm.\n\nI thought about that first night in Santa Cruz when Alice, Belle, and Zofi had gotten into their little speculation session about my feelings for Naimh, Sam, Mari, and Holly. There was some truth to what they'd been saying that night. With apologies to shy Mari, I WAS attracted to strong, aggressive women, and she was leaving for Caltech anyway. Alice had fit nicely into her best buddy role and Zofi had made clear she was romantically attracted to women. So that left Naimh, Sam, and Belle.\n\nAll of them I had strong feelings for. All of them I had... complicated... feelings for. At the moment, I was good friends with all three of them -- friends with benefits. Of the three of them, only Naimh seemed to be pursuing me with any interest in becoming my girlfriend. Sam and Belle had both opted out of being my Girlfriend of the Week and I wanted to believe Belle was genuine about her desire to be my anchor, my 'little sister with benefits'. At the same time, I had no idea how that stance might change once we were in college together with the rest of the BTC elsewhere at different schools. She insisted she was happy in her role as my 'little sister with benefits', and to be honest I was happier with our relationship in that form as well. But anything was possible once we were alone together in Berkeley. Would she want to become my girlfriend then? I mean, she did joke about me marrying her, didn't she?\n\nFor some reason, Sam's utter lack of pursuit lately made me want her even more. She seemed to show up the most when things were at their worst, like the way she'd been there for me after the whole Conor thing, or even that little blowjob on Friday morning after the big fight just to make me feel better. Her absence somehow made my heart grow fonder, not forgetful. I knew she'd applied Early Decision to Stanford and was therefore locked into going there in the fall, but Palo Alto wasn't so far removed from Berkeley as to make a relationship impossible.\n\nAnd Naimh? I was still figuring this one out. We'd tried being the one boyfriend/girlfriend couple in the BTC, to mixed results. On the one hand it had been an amazingly awesome sexual relationship. On the other hand, it had been an emotionally vacant one. Would dating again give us the chance to correct past mistakes? Was it even worth trying given that there was a ticking countdown until our inevitable separation when she left for LA? Might it be better to not even try and just accept a friends-with-benefits relationship for the months that we had left?\n\nCould I fall in love with one of them?\n\nCould I fall in love with ALL of them?\n\nSHOULD I fall in love with ANY of them?\n\nWhat the hell did the word \"love\" even mean?\n\nAll musings about Captain Corelli's Mandolin aside, the concept of \"love\" was still something I struggled with, and I'd been making a concerted effort to not say the word itself quite so often. I'd been trying to separate my lust for the girls from my love for the girls.\n\nLove itself is what is left over when being in love has burned away.\n\nOf course, it's hard to focus on what comes after when the lust part slams her big naked boobies in your face. That's pretty much what happened to me after Mother left and the three horny babes decided to team up on me.\n\nSeriously, I wound up flat on my back across my bed with Sam doing her level best to suffocate me in her cleavage. In her defense, I don't think she really knew how close she was to murdering me because Naimh was busy eating her pussy at the time.\n\nThe point is: I couldn't really separate my feelings of love for the girls from my lust for the girls so long as they kept fucking my brains out every chance they got. The solution would seem to be obvious: stop letting the girls fuck my brains out every chance they got and give myself time to really think about what feelings of love still remained.\n\nPssht, yeah right.\n\nThat was never gonna happen in a million years.\n\nSo in the meantime, I had to accept things as they were. I had six horny babes constantly asking me to service their every sexual need and repeatedly plunge my throbbing hard dick into each of their willing holes, seven if Holly hadn't actually bailed.\n\nYeah, in another four months or so we'd go our separate ways to college and grow up into the young adults we were meant to be. But in the meantime, well... I had six (seven?) horny babes constantly asking me to service their every sexual need and repeatedly plunge my throbbing hard dick into each of their willing holes.\n\nI could live with that.\n\nSam and Belle both went home, well-fucked and quite satisfied. Naimh and I drove out and got dinner together. And after dinner, we drove up to the hills to get a nice view over the city and the way the clouds were turning rich hues of orange and red.\n\nShe sat between my legs while I kissed the back of her neck as we watched the sunset together. Her body felt VERY warm and comfortable with my chest pressed against her back and our fingers interlaced together. And once the final rays of light had disappeared beyond the horizon, she turned her lips to mine and we began a kiss that felt like it would never end.\n\nThe next thing I knew, we were still kissing but had somehow magically transported into my bedroom. Our clothes were off and she was riding me with urgent need while her tongue delved deep into my mouth. I felt the weight of her big tits crushing into my chest while I gripped her firm asscheeks and yanked her body back and forth against my crotch. And in the end she moaned my name, \"Oh, Matty...\" as she reached her zenith and became overwhelmed by exquisite agony.\n\n\"Oh, Neevie,\" I responded in kind, pinning her body down as far as it could go to let my penetrating prick belch out steaming vats of sperm straight into the back of her sweet honeypot.\n\nSo like I said, by Monday morning there was no need for another round of intercourse; we'd gotten plenty of THAT all weekend.\n\nWe got each other off quick and dirty with nothing but our mouths, my current Girlfriend of the Week (and maybe longer?) squeezing her nectar out of her delicious slice of heaven while I erupted great gouts of creamy jism for her to swallow as well. And afterwards, we cuddled together naked in each other's arms.\n\nNo more angst. No more stress. No more fights or betrayals or repressed resentment. Just good old-fashioned orgasms.\n\nYeah, maybe real \"love\" would be what was left over when the passion was no more. But in the meantime, the six girls (seven?) I spent all my time with had plenty of passion to burn. So I resolved right then and there to stop worrying about \"love\".\n\nAs I squeezed my Irish freckled redhead in my arms, I realized: I had all I could ever want right here.\n\n****\n\nNaimh and I got dressed, headed downstairs to have breakfast with Mother, and chatted amiably until Belle joined us in the minivan for my first three-person drive to school. Belle still got shotgun, of course. Let's not get crazy here. The two girls nattered on happily with each other, leaving me alone to focus on driving.",
        "Alice was waiting for us at the parking lot and came over as soon as we stepped onto the curb. She gave me a fist bump first and then leaned in for a quick peck on the lips second. After we passed the first gate, Naimh had to head clear across campus to get to her first period, so she gave me a fierce kiss and a mournful, \"This is gonna be the first time we'll be apart since Saturday morning.\"\n\nI chuckled, kissed her again, and said, \"I'll see you at recess.\"\n\nShe had to be satisfied with that and hustled away. Belle and Alice kept chatting for another minute before the three of us split up.\n\nSam gave me a warm smile when I came in the door for first period. We had a little time to chat and she even gave me a quick peck on the lips when it was time for us to take our seats. After class, she held my arm and we walked together to second period.\n\nAt recess, though, I finally got the confirmation I'd been dreading all weekend. Sure, I'd been plenty distracted banging Belle, Alice, Naimh, and Sam (and I knew I shouldn't be greedy), but it was still disappointing when Holly didn't join us at our usual table the way she'd been doing for the past few weeks. I had no idea where she might be; all I knew is that she wasn't here. And when Sam read the scowl on my face, she reached out to rub my knee and said reassuringly, \"She promised she'd drop by at lunchtime to talk to you.\"\n\nI sighed, her words not very reassuring despite her tone. The words weren't, 'Oh, she's busy right now but will be with us again at lunchtime.' Still, I tried to shrug it off like it was no big deal. But inside, I knew Master would miss Personal Slut.\n\nNo, that was actually putting it a little too crudely. Yes, the sex play with Holly had been delectable. But she was a genuinely vivacious, sexy, and all around fun girl to be around. Her presence in my life had been a breath of fresh air for the past few weeks, and I'd miss her.\n\nSo when Holly did show up at lunchtime and ask if we could find a quiet corner to talk, I told her all of that. And I also told her I'd rather she didn't leave.\n\n\"It's not like I'm saying 'goodbye',\" Holly insisted. \"I'm still a student here and we'll be seeing each other around school.\"\n\n\"It's enough of a 'goodbye' that you felt the need to come have a private conversation with me. It feels like a breakup.\"\n\n\"Can't break up if we were never truly together. You know I can't stay. I mess up the group dynamic too much.\" Holly sighed. \"Everyone's paired up and I'm the odd girl out.\"\n\nI shrugged. \"You seemed pretty happy to be paired up with me for a few weeks there.\"\n\nHolly smiled and reached out to take my hand. \"Yeah, I was pretty happy... for as long as it lasted. I hope you don't mind, but I'm gonna refer to you as one of my ex-boyfriends, even if it was only for three weeks.\"\n\nI chuckled. \"I don't mind.\"\n\n\"Maybe if I could STILL be your girlfriend for this week... and the next... and the next... I'd stick around,\" she began a little hesitantly, her expression suddenly nervous. She bit her lip and fiddled with her hands, the ever-presence bubbly confidence she usually had momentarily gone. \"Personal Slut would very much like to still belong to Master.\"\n\nI blinked and pulled my head back a bit. \"You mean like... official-official?\"\n\nShe winced and spoke quite tentatively, quite slowly. \"Would... would it really be... so bad? I mean, for me... to be your official girlfriend?\"\n\nBefore I could answer, the quick, superfast Holly came rushing back. \"You know what forget it I don't even know what I was thinking I mean why would a hot guy like you want somebody like me when you've got those ridiculous babes like Sam and Neevie and Belle and Zo--\"\n\nI cut her off abruptly with a kiss, holding her close with a hand at the back of her head. Holly whimpered and kissed me back with fierce passion.\n\nBut I didn't want to lead her on. I broke the kiss almost as fast as I'd started it, and taking a deep breath I looked into her pretty hazel eyes from only inches away saying, \"Don't ever think you're not worthy. In a different world, I would KILL to be your boyfriend.\"\n\n\"In a different world...\" she muttered miserably.\n\n\"I have obligations to the BTC. I belong to them, and you know it. Neevie's already started her week as my official girlfriend.\"\n\n\"Can I get back in line?\"\n\n\"Maybe. If you ask them. But that would mean coming back.\"\n\n\"No, no, no, I can't do that. I told you: I don't belong. They all know it. I mean, Sam and Zofi are cool with me, but we both know Belle resents me even if she tries not to. She's not mean about it, but the resentment is still there, and she's not the only one. Alice, Mari, and even Neevie a little bit. I'm the outsider crashing their party just before midnight. A Spring Break house in Santa Cruz bought me some extra time, but we both know I was just visiting.\"\n\n\"Give them more time to get used to you and figure out a dynamic that includes you.\"\n\n\"Time, we don't have. And the fact that you're all about to split off to different colleges soon only makes them even more desperate to cling to what they have left. No, I can't come back and you know it.\"\n\nI sighed. \"Can we still be friends?\"\n\nHer eyes narrowed. \"Of course we can be friends. Or were you asking to be 'friends with benefits'?\"\n\nI raised my eyebrows. \"The former is what I was asking for. If you want the latter, you'll have to go through the girls. Lack of formal titles or not, I'm the BTC's boyfriend.\"\n\nHolly smiled. \"Well, I've got some pull with the person who has the most influence in the BTC. Oh, and I've got some pull with Sam, too.\"\n\nI chuckled and blushed a little. \"While I'll agree that the girls would probably be happier not messing with the dynamic of adding you permanently, I'm sure exceptions can be made from time to time.\"\n\n\"I just might take you up on that,\" Holly murmured, closing the gap between us again. \"Personal Slut would very much like to visit again.\"\n\nI grinned and kissed her one more time.\n\nThis time, Holly was the one who broke the kiss. She didn't even say goodbye or anything. One moment, we were Frenching madly with our tongues in each other's mouth. The next, she was walking away without a backwards glance.\n\nBut that was okay. I knew I'd see her again.\n\n****\n\nBelle, Naimh, and I drove home together and Belle gave me a quick kiss before heading over to her own house to wait for Mari's arrival. Mondays were still \"Neevie Mondays\" after all.\n\nYou'd think that after fucking almost non-stop since Saturday afternoon that we'd get tired of each other or something, but it definitely didn't work out that way. My nymphomaniac girlfriend was all over me as soon as we got in through the door. I'm not quite sure how, but we ended up banging with her bent over the washing machine in the laundry room. The damn thing wasn't even running; she apparently just wanted to fuck me in the laundry room, with her right leg up atop the machine to really spread her cunt wide open for my hammering thrusts.\n\nOf course, once Naimh got her first climax, she wanted to change positions. Only, her choice of new position was to lay her chest down atop the washer, reach back with both hands to spread her cheeks, and croon how much she needed to feel my considerable cock giving her an impromptu colonoscopy.\n\nAfter I crammed her cornhole full of cum, we went upstairs to take a shower. Soaping up the freckled redhead's fabulously firm breasts got me hard again, and this time my horny girlfriend braced herself against the back corner of the shower, raised her left leg to the adjacent corner where the aluminum frame met the wall, and had me fuck her standing up.\n\nThe position was pretty awkward but she was ridiculously turned on, and after she screamed her head off in joyous ecstasy, I remembered my promise to facialize her more often, dropped my girlfriend to her knees in front of me, and let her pump my prick with both hands until I gave her forehead, cheeks, and lips a fresh sperm bath.\n\nAnd THEN we did some studying.\n\nA little.\n\nAlthough in fairness, our lack of sufficient study time was not completely due to sex. No, Naimh and I actually... well... talked.\n\nWe wound up sitting in bed, re-dressed and leaning back against my headboard, cuddled together in a position not unlike the one I often found myself in with Belle. We talked about school and we even talked about Holly a bit. But what I remember most from that conversation is when we started talking about our inevitable separation.\n\n\"I really, really wish I could go to Berkeley with you,\" she sighed somberly.\n\n\"UCLA is a good school. And Alice will be there with you.\"\n\n\"I know, but...\" her voice trailed off, and there was moisture in her green eyes when she looked up at me. \"I can't imagine a future without you in it.\"\n\nI sighed and squeezed her close. \"I'm having a hard time imagining a future without you in it, either.\"\n\nA moment later, she suddenly turned in my arms, grabbed my head, and planted a fierce kiss on my lips. A wail of sorrow gurgled up from her throat, and I pulled away to find her already in tears.\n\n\"I'm gonna MISS you, Matty!\" she whined.\n\n\"I'm gonna miss you, too.\"\n\n\"I love you!\"\n\nI... hesitated.\n\nAnd Naimh's face fell.\n\n\"I'm sorry,\" I said immediately. \"It's not that I don't care about you.\"\n\n\"No, it's alright. We've had a LOT of discussions about the meaning of love, lately. I'm not asking you to prove yourself with the L-word or anything right now.\" And with that, her momentary frenzy passed and she set her head back down on my chest.\n\nI gently stroked her hair and cuddled her close. And for a moment the two of us lapsed into silence.\n\nBut eventually, she spoke. \"I still can't believe we're all splitting up. Well, apart from me and Alice. And of course everyone's perfectly aware you and Belle will be together.\"\n\nI read a bit of bitterness in Naimh's tone, and I glanced down. \"Does that bother you?\"\n\nShe thought about her words before answering. \"I don't think 'bother' is the right word. We're all certainly jealous of her. Everyone, including Zofi, would have liked for you to go with them. I mean if anything, I'm a little more worried for you - being alone with her and all.\"\n\nI frowned. \"What's THAT supposed to mean?\"\n\nNaimh pursed her lips and got off my chest. Twisting around to face me, she raised her eyebrows and said, \"Everyone's noticed how much more clingy Belle's gotten over the last couple of months. It used to be that she was happy to be your little sister voyeur and wanted to stretch her wings a bit before settling down. But as time went on, she started to resent how much less of your attention she got and apparently tried to just bottle up her jealousy. I mean, there was that whole bit where she admitted to hating my guts, remember?\"\n\n\"How could I forget?\"\n\n\"I know she's working on it. She told me you took away her house key after the whole butt plug incident, and she's desperate not to lose your trust. But she's even more desperate not to lose you, period. I mean, Belle getting all outraged about you not confirming the two of you were going to Berkeley together is what set off the whole fight in the first place.\"\n\nI pursed my lips. \"I sorta forgot about that part.\"\n\n\"When the two of you get to Berkeley, without the rest of the BTC, everything's gonna change. I've always been envious of your relationship, envious of the bond you two share. If you ask me, this 'siblings with benefits' relationship is perfect for both of you. But what if you two were to actually start dating?\"\n\nI shook my head. \"She doesn't want to start dating. She skipped her Girlfriend of the Week slot, for one thing. I'm certainly more comfortable with Belle as my 'little sister' instead of my girlfriend, and she's stated plainly that she's happy with that role in my life.\"\n\n\"Is she? Or is that a cover for her true feelings?\"\n\nI sighed. \"I'd like to think she's sincere.\"\n\n\"Then what was all that shit between her and Holly?\" Naimh raised her eyebrows. \"What happens when some hot babe at Berkeley makes a pass at you?\"\n\nI chuckled. \"Knowing Belle, she'd probably want to drag that hot babe into a threesome and suck a creampie out of her.\"\n\n\"Well, maybe,\" Naimh conceded. \"But what if that hot babe wants to stick around and become a little more meaningful to you? What happens if your 'little sister' decides she gets to make the decisions about who is good enough for you or not?\"\n\nI pursed my lips and thought about it. My initial reaction was to protest and say that Belle would never do such a thing as interfere in my love life that way, but the more I thought about it, the more I realized she was perfectly capable of acting in such a manner. The hostility she'd shown to Holly was evidence enough, and that didn't even factor in her recent admissions of jealousy.\n\n\"Well, I suppose she and I will have to talk about that sort of thing,\" I said finally. \"I really don't intend to start dating her or anything, because I genuinely believe our relationship is better the way it is, and I'll make that clear. Everything else... we'll have to work out. I mean, I don't have any choice otherwise. The reality is that we ARE going to Berkeley together, and nobody else is coming with us.\"\n\n\"That didn't have to be the case.\"\n\nI gave her a puzzled look. \"What do you mean by that?\"\n\nNaimh shrugged. \"Mari, Zofi, Alice: they all got into Cal. But they made the best choice for themselves and picked the schools they really wanted to be at rather than make a decision that was based solely on you.\"\n\nI frowned. \"Mari and Zofi I knew about. Alice got into Cal?\"\n\nNaimh nodded. \"She didn't tell you?\"\n\nI shook my head. \"Gonna have to ask her about why she'd hide that from me.\"\n\n\"Maybe she's feeling guilty about choosing her school over choosing you.\" Naimh frowned. \"Don't get me wrong: I'm thrilled I won't be alone. It would've sucked even more for me to go to UCLA without her. But here's a thought... maybe she hasn't turned in her paperwork to UCLA yet because she's still thinking about choosing Berkeley instead.\"\n\nI sighed. \"Please don't get my hopes up.\"\n\n\"Fine, fine.\" Naimh sat back.\n\n\"You know what? Let's not talk about the other girls. I wanna talk about you and me. I want to know what you want from this relationship.\"\n\nRaising her eyebrows, Naimh sat upright in a cross-legged position and planted her elbows on her knees. The position pitched her forward and gave me an excellent view of her cleavage through the scoop-neck of her top. My eyes yo-yoed down for a moment, and her emerald-green eyes were twinkling when I met them again.\n\n\"You act like I mind if you look at them,\" she giggled. \"After all these times you've stared at my naked tits all weekend - fondled them, squeezed them, stuck them in your mouth, had me wrap them around your dick - you still get the urge to check them out just by me bending over?\"\n\n\"It's an amazing rack,\" I assured her.\n\n\"Thanks for the compliment.\"\n\n\"It comes from the heart,\" I replied with a wry grin.\n\nNaimh looked thoughtful for a moment, and then she sat up straight and cocked her head to the side. \"Take your shirt off.\"\n\nI shrugged and immediately removed it.\n\nNow it was her turn to stare and sigh dreamily. But a moment later, she pursed her lips and gave me a regretful look. \"What is it about you that I can't resist? What is it that NONE of us can resist?\"\n\nI blinked. \"I have no idea. I'm no Brad or Keanu.\"\n\nShe furrowed her eyebrows and fiddled with her fingers for a moment, staring down at them as if absently picking at her cuticles. Taking a deep breath, Naimh looked up at me again and said, \"I started the whole Girlfriend of the Week thing with a specific intention: to win you back.\"\n\nI narrowed my eyes. \"You say that like it's not your intention anymore.\"\n\nShe frowned. \"Don't get me wrong; I don't regret a thing. Having you date the other girls didn't backfire. I think your relationships with both Mari and Alice improved for the time you had together. And even the last few weeks with Holly seemed to make both of you very happy. I wanted time to regain your trust, and I think I have.\"\n\n\"You have,\" I assured her.\n\n\"I also had time to talk to Mari about what she wanted from your relationship and what she did to make you feel loved. I got to compare notes with Alice about what a relationship based primarily on sex was like for her. And even Holly and I spent a lot of time talking, although to be honest I think she was asking me more questions about what it would take to make you happy than the other way around.\"\n\n\"So it sounds like you got what you wanted from the little experiment.\"\n\n\"Not exactly.\"\n\nI raised my eyebrows and gestured for her to continue, waiting for her to explain.\n\n\"I don't want to be your girlfriend anymore.\"\n\nI blinked. \"Excuse me?\"\n\n\"I love you, and I'm still in love with you. That part hasn't changed.\"\n\n\"Then?\"\n\n\"You don't really want me to be your girlfriend, either.\"\n\nI frowned. \"I never said that.\"\n\n\"You don't have to. I can tell. We ALL can tell. The fact is: you're happier being The BTC's boyfriend than belonging to any one of us. Mari tried her best to draw out whether or not you could have those sorts of romantic feelings for her. Alice wasn't interested in romance, but she still paid attention to how differently you would treat her if she was your official girlfriend, which wasn't any differently at all. And Holly spent three weeks trying to get under your skin, but in the end you actually told her you're the BTC's boyfriend.\"\n\n\"Haven't I always been the BTC's boyfriend?\"\n\nNaimh raised her eyebrows. \"Well you were supposed to be MY boyfriend for a couple of months there.\"\n\n\"You know what I mean.\"\n\n\"I do. And that's why I realized I don't need to become your girlfriend again in the sense of Matty and Neevie becoming a couple. I'm already your girlfriend in the sense that I'm part of the BTC. We're ALL your girlfriends, aren't we?\"\n\n\"I suppose.\"\n\n\"And that's good enough for me. I like our relationship the way it is, and I think you do too.\"\n\n\"Meaning?\"\n\n\"A little bit of alone time together, like Neevie Mondays. Maybe a few weekend dates here and there. A lot of time spent sharing you with my friends. Girls like Belle slurping your creampies out of my sodden holes.\" She flashed me a teasing smirk at that last one. \"I still want to build our emotional relationship. I still want to spend more time having these conversations with you. I realize that we're about to be separated five hundred miles apart, but that's not going to happen until the end of summer. And in the meantime, I'd like our friendship to keep growing.\"\n\n\"I'd like that too.\"\n\nShe sighed. \"Maybe if I were going to Berkeley with you my feelings would be different, but I didn't get in and that's that. I don't want to stress out chasing a romantic relationship when you're so clearly comfortable being with all six of us instead of focusing on just one. I'd rather enjoy the time that we have left.\"\n\n\"Me too.\"\n\n\"So are we agreed? I mean, I'm still your Girlfriend of the Week, but after Sunday, we go back to the way things were?\"\n\n\"Friends?\"\n\nShe grinned. \"With benefits.\"\n\nI grinned too. \"Works for me.\"\n\nShe leaned forward again, enough to make her scoop-neck droop and give me an excellent view of her cleavage once again.\n\nOnce again, my gaze dropped downward to gawk at her magnificent breasts. And since she'd given me explicit permission to go ahead and stare at her freckled boobies, stare at them I did. I didn't even bother trying to hide it.\n\n\"I love how simple it is to turn you on,\" the buxom redhead giggled while reaching for my crotch and gently petting the bulge rapidly growing inside my shorts. \"Just give you an eyeful of cleavage and you get hard for me on command.\"",
        "\"Like I said: You have an amazing rack,\" I told her tits.\n\nReaching down, Naimh grabbed the hem of her shirt and whipped it over her head, tossing it onto the floor. Moments later, her bra joined the shirt, and my lap was suddenly full of horny redhead as she fed one of her swollen teats into my open mouth. And a minute after that, I rolled her over onto her back while she squealed, yanked her shorts and panties out of the way, and then slammed my sausage into her sweet snatch.\n\nWe were just getting started.\n\n****\n\nNaimh's first orgasm came quickly as I hammered her into the mattress. Her legs were up in the air in a big V-shape as she howled her release, doing her level best to shatter my eardrums as she verbally expressed her satisfaction with my dick.\n\nHer second orgasm came with her lying on her left side with her ass at the edge of the bed, both legs together and jutting out to my right while I stood on the floor and sawed my thick cock in and out of her tight cunt. The position let me get super deep, her legs together made her super tight, and I could reach forward and manhandle her big boobies at the same time.\n\nHaving cum once in Naimh's ass and then once on her face as soon as we got home, I was inclined to finish a trifecta by filling her pussy. But after that second climax, the horny Irish redhead pulled off me, slipped feet onto the floor, and bent herself over face-down while reaching back to spread her asscheeks.\n\n\"Hurt me...\" she whimpered.\n\nI knew what she wanted, but I slammed myself into her cunt instead. She grunted from the impact and kept grunting while I pounded away at her. And when she reached out to bunch up the bedsheets in her hands, I abruptly reached back and spanked her ass.\n\n&lt;THWACK&gt;\n\n\"AUGH!\" she yelped.\n\n&lt;THWACK&gt;\n\n\"AUGH!\" she yelped again.\n\n&lt;THWACK&gt; &lt;THWACK&gt; &lt;THWACK&gt;\n\n\"AUGH! AUGH! AUGH!\"\n\n&lt;THWACK&gt; &lt;THWACK&gt; &lt;THWACK&gt;\n\n\"AUGH! AUGH! AUGH! AAAAUUUUGGGGHHH!!!\"\n\nNaimh's yelp turned into a scream as my rock-hard dick unexpectedly lanced through her anus and skewered her anal passage in a single thrust. Her head jerked up and she clenched down HARD. And keeping my dick at full depth, I went right back to spanking her.\n\n&lt;THWACK&gt; &lt;THWACK&gt; &lt;THWACK&gt;\n\n\"AUGH! AUGH! AUGH!\"\n\nTaking a deep breath, I leaned forward with all my weight to really make sure the most gorgeous thing I'd ever seen truly felt every last inch of my dick in her rear passage. I held my arms out to the sides and back, inhaling deeply and stretching my pectoral muscles. I let my head loll around to relax my neck. Finally, I rolled my wrists and cracked my knuckles. And after setting my feet a little more than shoulder width apart, I reached down to get a firm grip of Naimh's hips...\n\n... and then I fucked the hell out of her.\n\nOver and over again I took massive lunges hard enough to bruise my own pelvis against her perky buttcheeks. Having cum twice already, I wasn't in any danger of popping off early and I allowed myself to thrust with maximum force without worrying about restraining my own ejaculation.\n\nShe howled non-stop, her cries that rose in pitch and volume matching my meat-tenderizing hammer blows. And her whole body shook and shuddered beneath me as she turned her head to the side and drooled onto my sheets while I pulverized her pretty patootie.\n\nBut I couldn't keep up that pace forever. My abs and legs were burning from the afternoon's workout, and after a while I had to finally chug to a stop. I pulled out for a minute, my hands braced on the edge of the mattress as I bent over panting for breath. I stared straight down at the freckled redhead's lewdly stretched anus, a gaping hole of darkness that showed no inclination to close up on me. Sweat dripped down from my forehead, and a salty drop irritated my right eye. I wiped it away and stared down at the shivering, whimpering, absolute wreck of a teenage girl face-down on my bed with her asshole wide open. And she turned to look back at me, her eyes streaked with tears but wearing the biggest shit-eating grin on her face.\n\n\"Holy fuck, Matty...\" she groaned weakly. \"I came so many times.\"\n\n\"Not done with you yet,\" I grunted while centering my dick over that dark hole and then stabbing it right back into her while she screamed in exquisite agony.\n\nThis time though, once she caught her breath, Naimh planted her hands and knees for leverage and fucked herself back at me. \"Fuck my arse, Matty. I'm your anal queen,\" she crooned while I slowly met her thrusts backward. \"Violate my destroyed little arsehole. Desecrate my sacred core. Defile me. Rape me. Ream me out. Ohmigawwwwd, Matty. You feel so fucking GOOD. I can't take it. I'm gonna... I'm gonna cum again... MMMMAAAAAATTTTTYYYY!!!\"\n\nShe was mid-orgasm when I abruptly bent forward, scooped both arms under her, and hoisted her shaking body upright. Squatting, I made nearly vertical thrusts up and into her ass while gravity yanked her back down, driving my dick as deep into her colon as I would ever go. Pivoting my forearms, I grabbed hold of her big Double-D tits in my palms, squeezing hard enough to cause her pain while I continued wrecking her poor rectum. She wailed and thrashed and flailed out with all four limbs, sinking her butthole even further down around my prick every time she stopped supporting her own weight. And she screamed her pretty little head off for what felt like a minute until she finally ran out of air and started to collapse.\n\nAnd then it was my turn. Still holding her tits, I dropped us face-first onto the bed and then rabbit-humped the redhead's \"arse\" for about fifteen seconds before I blew.\n\n\"NNGH! NNGH! NNGH! NNNNNNGGGGGHHHH!!!\" I grunted before the fire hydrant blew and I started creaming her colon with gallons of cum. Naimh had gone limp beneath me, and I think she actually passed out. Her eyes were closed and she had a beatific smile of utter rapture on her face while I finished twitching and flooding the unconscious girl's rectal cavity with all my remaining jizz.\n\nThen inky clouds of blackness started creeping in around the edges of my consciousness as well. Too much exertion and not enough breathing were doing me in, especially the end while I tried to blow my brains out through the tiny hole at the end of my penis. I collapsed flat across Naimh's back.\n\nAnd then I passed out too.\n\n****\n\nAlthough we'd agreed to not pursue a romantic relationship, Naimh was still my Girlfriend of the Week. That meant she still got to call the shots, and even though she'd already done her level best to fuck me silly Saturday, Sunday, and Monday, she had no intention of slowing down just yet.\n\nWe shared Alice Tuesday together. I briefly interrogated Alice about her not telling me she'd gotten into Cal, and she countered that I hadn't told her I'd gotten into UCLA, which was... well, true. The difference was that the whole BTC had talked as a group about Berkeley being the most likely place we could all get into nearby and potentially attend together, and I'd never even considered UCLA seriously, so once it became known that Belle and I had gotten into Cal it seemed a no-brainer that we'd be going.\n\nIn the end, Alice apologized for hiding it from me, saying she just didn't know how to say she was voluntarily NOT attending Cal with me. And then she and Naimh decided that convincing me through sex to change my mind and join THEM at UCLA was in their best interests, and we had a pretty spectacular threesome. They had a pretty compelling case, and watching Alice slurp my creampie out of Naimh was particularly enticing.\n\nWednesday was Zofi day. Well, it sometimes was Zofi and Sam day, but Sam was off doing who knows what and it ended up just Zofi and Naimh. She said her parents had commented about not seeing me recently and asked if I could come to dinner over the weekend or something. That jogged my memory that Naimh's parents still wanted to meet me, and I asked if we should set something up.\n\n\"Didn't we just agree that you won't be my boyfriend after this week is over?\" Naimh asked.\n\n\"Do you still want to spend overnights with me at my house? Even if you and I agree we're not actually together, it's probably best if your parents think we're a romantic couple again and that I'm not just banging their daughter for sport.\"\n\n\"You're probably right,\" Naimh agreed. \"You're really okay with meeting them?\"\n\n\"Can you promise your dad won't shoot me on sight?\"\n\nThe Irish redhead's green eyes glittered. \"No promises.\"\n\nZofi laughed. \"My parents think you're dating me. Mari's parents think you're dating her. If Neevie's parents think you're dating her too, I'm wondering just how crazy things are going to get at graduation when all these parents come together and start comparing notes.\"\n\nI blinked. \"I never thought about that.\"\n\nBoth girls started laughing. I didn't think it was particularly funny. I knew I'd have some careful maneuvering to do.\n\nThursday was Belle and Mari day. By pure coincidence, Mari brought up that her parents kept asking about \"her boyfriend\" and thought it might be a good idea for me to meet them again. There was going to be a family picnic at the local regional park on Saturday and she wanted to know if I could be her date. Naimh thought the whole thing was hilarious, told Mari that I was already booked to see Zofi's parents Saturday night and then Naimh's parents for Sunday lunch.\n\nI agreed, of course, and by Saturday morning I was sweating bullets. When I'd agreed to these various appointments, I'd not been worried in the slightest. But now that the time had come and I had THREE 'Meet my girlfriend's family' outings scheduled, I started worrying I'd gotten in over my head. But all three meet-ups went about as well as could be asked for.\n\nMari's family was a delight, and since I played soccer with her cousins most of the time, I couldn't get seriously interrogated by any parental units. Her mom lightly flirted with me - nothing serious, she was just a natural flirt. Her dad turned out to be really cool. He talked video games and modern rock with me, and made me really feel at ease. He spoke with pride about his daughter getting into Caltech; I got the impression the pressure to get married and start popping out kids mainly came from Mari's mom. Ultimately, he expressed his apologies that we'd be separated going to different schools.\n\nZofi's parents were great with me, as always. Even though it was no longer football season, I still got along great with her dad and we talked about some new Apple products he had in the pipeline. And then Zofi wanted to have a quickie in her bedroom.\n\nI think she didn't walk right outside and show her mom the way my cum was leaking into her panties.\n\nI think.\n\nAnd then there was Naimh's dad.\n\nWell, Naimh's dad hated me.\n\nLike, he really, REALLY hated me.\n\nHe put up with me because I made his daughter happy, but that didn't mean he had to like me. I suppose I couldn't blame him, and I did my best to not piss him off even further during lunch. They were a very Catholic family, and I was apparently already in trouble for the two Sunday mornings Naimh had recently spent in my bed instead of going to church.\n\nAnd there was the whole... y'know... sex before marriage thing. Not that teenage girls never had sex in Ireland, Catholic or not, but you get the idea.\n\nAll in all, having two out of three sets of girlfriend parents actually like me wasn't bad, all things considered. Especially since all three sets knew I was fucking their daughters. Actually, Naimh's mom was pretty nice to me overall, and as much as Naimh's dad had made up his mind to hate me well before I'd even stepped through the front door, I liked to think that he hated me a little less for having finally met me face-to-face and gotten a chance to talk to me. I got the impression he'd hate all of Naimh's boyfriends for the rest of her life, regardless.\n\nIn the end, though, that lunch with Naimh was our final time together as boyfriend and girlfriend...\n\nFor her Girlfriend of the Week time, I mean. Not forever.\n\nBut that's a different story.\n\n****\n\nBelle came over to the house after dinner. With Naimh being my Girlfriend of the Week, Belle had opted to let the redhead have me all to herself on Saturday night. And since I had to meet up with Naimh's parents for Sunday lunch, Belle and Sam had both missed their usual Sunday afternoon post-run threesome as well. So needless to say, my impish little pixie was quite wound up and eager to let off some steam.\n\nWe wound up banging in the shower, me pinning Belle's tiny little body up against the wall. She dropped to her knees in time to swallow my spending, and then we cleaned up, dried off, and didn't bother getting dressed. Shortly thereafter, we were sixty-nining on the bed until she deemed me sufficiently hard enough to climb aboard. And then she mounted me reverse cowgirl and bent over away from me on all fours, humping her exquisitely tight twat up and down my dick while I watched her cute little tushie rising and falling, making my thick shaft disappear and reappear over and over again. And in the end I gave her a cream filling that leaked out over the course of several minutes while she reclined against my chest, panting in the aftermath while almost lazily scooping out globs of cum from her own snatch and popping them into her mouth.\n\n\"I almost can't wait for us to go to Berkeley,\" Belle sighed dreamily. \"I mean, I WILL miss our friends; don't get me wrong about that. But I already talked to Daddy and he's perfectly cool with us getting an apartment together. Can you imagine spending EVERY night in bed together like this? No more 'weekend nights only'. No more worrying about you having to split your time and attention six different ways.\"\n\n\"B... We talked about this,\" I said gently, squeezing my arm around her. \"I'd be happy to get an apartment together and I'll be thrilled to cuddle with you every night instead of just once in a while. But we agreed that you and I aren't going to become boyfriend/girlfriend, right?\"\n\nShe shrugged like it was no big deal. \"So?\"\n\n\"So what if you meet some guy you want to date? You said before I wouldn't be your one and only and that you wouldn't be able to settle down with me permanently without at least finding out what else is out there.\"\n\nShe pursed her lips but didn't answer right away.\n\n\"And what if I meet some girl -I- want to date?\"\n\n\"Will she eat pussy?\" Belle asked with glittering eyes. \"Will she let me suck your creampie out of her?\"\n\n\"Will she want to spend the night in bed with me? Just me? As in... you go back to your own room?\"\n\n\"I'll happily go back to my own room for any girlfriend you have that understands I'll always be a part of your life.\" Belle suddenly frowned. \"You wouldn't shut me out, would you? You wouldn't like... choose a girl who would want to be monogamous and exclude me, would you?\"\n\n\"No, I seriously doubt that. You're too important to me, and I wouldn't want our relationship to change. I mean, I can't promise what the future holds, but yeah, I seriously doubt I would ever choose to stay with a girl who tried to muscle you out.\"\n\n\"Just so we're clear.\"\n\n\"We're clear. You're my Annabelle.\"\n\n\"And I'm not saying I'd ever date another guy. Honestly, I haven't ruled out having sex with someone else, if for no other reason than I won't have to wonder for the rest of my life what it would be like. But any guy who'd want to date ME would have to first understand how important YOU are to me,\" she insisted. \"And I PROMISE you I would never choose to stay with a guy who tried to muscle you out.\"\n\nI pursed my lips. \"I could be wrong, but I'm thinking you might have a harder time finding a guy willing to share you with me than for me to find a girl willing to share me with you, if the BTC is any indication.\"\n\nBelle shrugged. \"If he can't cut it, then he gets cut out: simple as that. You're my Matty.\"\n\nI gave her a smile, and she twisted her head around to kiss me again. Her naked body was otherwise still reclined against my chest, so I took a moment to happily fondle her perky buttcheeks and play with her tits. But once we paused to catch our breaths, she went back to reclining and scooped another glob of my sperm out of her leaking cunt so she could suck on it.\n\n\"It's gonna be different, certainly,\" Belle began with a dreamy look up towards the ceiling, \"without the other girls. I think we should build a new BTC, you know? Find some hot and horny three-hole sluts with big tits that'll pledge their allegiance to... what was it Mari called it? Oh, your Altar of Towering Manhood. I can watch you convert them into your willing thralls through the Power of Incredible Orgasms\u2122 and then lap up your tasty jizz while it leaks out of their well-fucked gaping holes.\"\n\nI had to smile while Belle chuckled, but a moment later, I sighed a little mournfully. \"So eager to leave behind the BTC and form a better one to your own liking?\"\n\nBelle frowned at that and sat up. Turning around to face me, she shook her head and said, \"I really don't want you to get the wrong idea. I WILL miss our friends. But Mari, Zofi, and Alice ALL had a choice to come with us to Berkeley. They made their decisions to choose school over staying together. They made clear what was more important to them. I'm not cutting them out of our lives now or anything, but is it really such a bad thing to look towards the future?\"\n\n\"Neevie would have happily come with us to Berkeley.\"\n\n\"Neevie's kinda awesome. I know I said I was jealous of her sexual abilities, but then I'm also jealous of Mari in that regard too. Neevie's super-fun, super-sexy, and I'd be thrilled for her to come with us. But the admissions board apparently didn't agree. She's going to UCLA with Alice, and that's that.\"\n\n\"And Sam?\"\n\n\"Outside of Mari, Sam's become my best friend. She really understands what it's like to have these feelings for you but at the same time recognize a romantic relationship isn't in either of our best interests. I feel like I can talk to her about anything and she always knows what to do. But we both know she's going to Stanford, and that's that too.\"\n\n\"But Stanford isn't really that far away, right?\"\n\nBelle shrugged. \"Everybody says college is a bubble. I'm sure we'll see her every now and again, but we'd really have to make the effort. And with Sam being so hyper-focused on her studies...\"\n\nI sighed. \"She's already made clear her career is more important to her than spending time with me.\"\n\n\"Look, I'm not eager to burn down the BTC just so I can have you all to myself. I get what you're thinking, and I realize I've been just enough of a jealous monster lately for you to believe the worst in me. I'm not proud of what I've done or how I've acted.\" Belle shook her head and sighed. \"Even this Holly thing... I genuinely wish she'd stick around longer so I could make it up to her.\"\n\nI arched my eyebrows. \"Can I tell her you said that?\"\n\n\"Sure. Totally.\" Belle shrugged like it was no big deal. \"Look, if I could wave a magic wand and get all six of us at Berkeley together -- seven, if you wanted to include Holly - I would. I really, really would. These girls have been my best friends for YEARS. The BTC is the best thing that ever happened to me, you included, and I'd like to think we'll all stay really good friends until we've become decrepit old geezers. So please don't think I'm like... happy... that none of them are coming with us. I really am just trying to make the best of the situation as it is. You and I are going to Berkeley without any of them. At some point you're going to have to accept that.\"\n\nI was in the middle of formulating a response when I heard the doorbell ring. I frowned at Belle, wondering who could be at the door on a Sunday night. It was early enough in the evening that Mother most likely wouldn't be home. For a moment, I thought about just ignoring the door and getting back to my naked conversation, but the doorbell rang again, three times in quick succession.",
        "Belle and I exchanged a look, and I slipped off the bed to throw on my pajama pants and a t-shirt. I moved quickly but didn't rush, and the doorbell rang again before I finally flipped on the porch light and looked through the peephole.\n\nOnce I saw who was outside, I pulled my head back in surprise and now moved hurriedly to open the door. \"Sam? Hey? What's wrong?\"\n\nThe normally confident and poised platinum blonde stood on my doorstep, shivering in the cold night air wearing nothing but a thin shirt and jeans. Her makeup was running from obvious tears, and she had an expression of such bitter and hopeless sorrow that I immediately reached out the door to pull her inside, kicked the door closed behind us, and then held her fiercely in my arms while she trembled and started sobbing on my shoulder.\n\nHer skin was freezing, so I tried rubbing her arms and back with my hands while trapping her within my body heat. \"Ohmigawd, Sam, what's wrong? What happened?\"\n\nShe kept crying in my arms, and I squeezed her tightly. By then, Belle had gotten dressed and was about six steps up the stairs, looking over the railing at us. Her eyes asked what was going on, but I gave her a helpless look and shook my head to explain I had no idea either.\n\nFinally, Sam started to defrost a bit, and she looked up at me through bleary eyes. \"C-c-can I stay here tonight?\"\n\n\"Of course!\" I replied instantly. \"Absolutely. But... why? What's going on?\"\n\n\"I can't go back home. Not right now. Not like this.\" She buried her face in the crook of my neck and started shivering again.\n\n\"That's fine. You can stay here as long as you need. You could stay here forever if it came to that.\" I rubbed her spine again and held her close. \"But Sam, talk to me. What's going on?\"\n\n\"My parents are pissed. They won't listen. I mean, I knew they wanted me to go to Stanford, but still, I thought they'd understand.\"\n\n\"Understand what? What was that about Stanford?\"\n\nSam looked up into my eyes again. \"I withdrew my admission to Stanford. I'm coming with you guys to Berkeley.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "big tits",
        "big breasts",
        "18-year-old",
        "high school",
        "harem",
        "anal",
        "redhead",
        "threesome",
        "creampie",
        "video games"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-big-tits-club-ch-45-46"
}
{
    "title": "Succubus Summoning 103",
    "pages": [
        "AUTHOR'S NOTE\n\nThis is a continuation of the story begun in Succubus Summoning 101 and 102.\n\nYeah, I know I've been fairly slow on the updates. I'll try and pick up the pace.\n\n*****\n\nPhil heard a rattling of leathery wings. A shadow passed over him. Verd\u00e9 touched down on her hands and knees between him and the door. She was the same level as him, her smiling faces just inches from his own.\n\nNo.\n\n\"Going somewhere baby warlock?\" she smiled, showing two sharp little fangs. \"Don't you like us?\"\n\n\"I want to live,\" Phil Rowling replied.\n\nVerd\u00e9 was a succubus, a daemonic sexual vampire. He and Jake Pulman had smoked a few too many joints and summoned up her and Rosa for some entertainment.\n\nIt hadn't been the smartest of ideas. Jake's withered husk was lying on one of the beds back in the room.\n\n\"Oh baby warlock,\" Verd\u00e9 said, lifting him up and giving him a hug. \"Everybody dies. Most of the time it's really painful and slow and lingering, but with us it will be glorious. You'll see. There's nothing to fear.\"\n\nShe laid him face down back on the bed. Phil was still struggling to bring all his muscles under control. His nerves twitched and misfired like badly insulated power cables, all a result of their venom coursing through his veins.\n\n\"If you really don't want to die you know you can always dismiss us,\" Rosa said with a throaty chuckle.\n\n\"Don't be so cruel,\" Verd\u00e9 said, provoking a yelp from Rosa as she slapped her ass. \"You know our baby warlock doesn't know how.\"\n\nYeah, they really should have thought this through more, Phil thought. Jake was an idiot for paying any attention to that weasel The Scrote and he was even more of an idiot for going along with the plan.\n\n\"You're far too stressed out at the moment.\" Verd\u00e9 said. \"We need to get you nice and relaxed so you can fully enjoy this.\n\nShe put two hands lightly on Phil's shoulders.\n\n\"Now you lie back and relax while Verd\u00e9 and Rosa give you a sexy massage.\" Verd\u00e9 straddled Phil's back and lay down on him. \"With plenty of breast and pussy,\" she whispered in Phil's ear.\n\nVerd\u00e9's hands gently kneaded his back and shoulders. He felt the wetness of her pussy as she teasingly humped the small of his back. Meanwhile, Rosa sat aside his right thigh and began to rub her hands up and down his calf muscles.\n\nPhil felt the soft pressure of Verd\u00e9's breasts on either side of his spine and then a wet feeling as they squirted oil onto his skin. She began to slide her breasts along the lubricated surface of his back. Rosa bent his leg up and began to slide his foot and ankle through the soft valley of her cleavage.\n\nIt was just like one of those Asian porno's, Phil thought as the two succubi slipped and slid across his body.\n\nAnd it was going to end like a Japanese horror.\n\nVerd\u00e9 switched direction and slid down his spine on her pussy. Rosa slid up his other leg. The musk of their juices pervaded his senses, stoking the fire building in his balls.\n\nHe knew what they were doing to him and how he'd end up, but his body steadfastly refused to get the message. It was hard to think of the horror, of Jake's dried up corpse, when Verd\u00e9 and Rosa were rubbing their pussy and breasts all over his body. A massive erection lay between him and the bed and his body basked in a warm glow as the two succubi kneaded and massaged his muscles.\n\nThey gave his body a thorough going over with their hands, breasts and asses until all of his muscles felt like warm jelly. His limbs felt boneless. He was completely relaxed and didn't resist as they turned him over onto his back. Between the massage and the after-effects of their venom Phil wasn't sure he could move even if he wanted to.\n\nVerd\u00e9 smiled as she straddled his chest. She lifted her dripping wet pussy up off his body and teasingly shook her ass from side to side as she slowly moved backwards towards his flapping cock. All the time her eyes stared intently into his.\n\nIt was very erotic, but the effect was rather spoiled when she bumped into Rosa's outstretched arm. Surprised, Verd\u00e9 looked around, her eyes flashing with annoyance.\n\n\"You wouldn't be thinking of taking his virginity without letting me have a little suck first?\" Rosa said, her expression all sweetness and light.\n\nVerd\u00e9's eyes narrowed. \"Just so long as it's only a little suck. I told you I want to savour this one.\"\n\n\"Just a little suck, I promise,\" Rosa smiled innocently. \"Why don't you sit on his face to get warmed up? I know how much you like that.\"\n\nVerd\u00e9 looked back at Phil, a wicked smile on her lips.\n\n\"You'd better take a deep breath baby warlock,\" Rosa said. \"She gets a little carried away when she grinds her pussy on top of faces.\"\n\n\"Wait...\" Phil started.\n\nHe didn't get a chance to finish as the world suddenly went dark and moist as Verd\u00e9 sat on his face and smothered his nose and mouth with her ass. Verd\u00e9 laughed and squirmed on his head, mashing his nose between her ass cheeks. Her pungent pussy juices dripped into his nose and mouth. They tasted sweet on his tongue, but had the same kick as hot chillies.\n\nPhil couldn't breathe. Her soft ass smothered his face completely. Just when he thought he might pass out she lifted up off him and he was able to take a deep, gasping breath to replenish the exhausted oxygen in his lungs.\n\nVerd\u00e9's prehensile tail wound around his neck like a noose.\n\n\"If you want to take another breath then I'd better feel your tongue in my pussy,\" Verd\u00e9 said, looking down on him.\n\n\"But...\"\n\nAgain Phil didn't get a chance to finish before moist darkness closed around his face. Her tail tightened around his throat, gentle but insistent.\n\nI don't know what to do, he thought.\n\nHe stuck his tongue up, feeling the point push against and then between the slick lips of her pussy. He wagged it around in a vague imitation of what he'd seen in various porno films and hoped it was good enough. His lungs were starting to hurt again and her tail was constricting painfully against his windpipe.\n\nWas it like this?\n\nHe thrust his tongue in and out of her moist pussy like a sword.\n\nIt seemed to be working. Verd\u00e9 was trembling above him.\n\nHe carried on thrusting, licking back and forth inside her warm vaginal folds. Verd\u00e9 trembled even more and moaned. She loosened her tail around his throat and lifted up her body so he could take a breath.\n\n\"That's it baby warlock,\" she sighed.\n\nShe pushed her hips against his face, gently grinding her pussy against his nose and mouth. Phil flicked his tongue back and forth, tasting her spicy sweetness.\n\n\"Oh yes baby warlock,\" she sighed.\n\nAs he lapped the sweet nectar of Verd\u00e9's pussy Phil felt a weight on his legs and hot breath against his cock. A soft hand grabbed his member and he felt two full lips kiss the tip. Rosa was about to take her suck.\n\nJust as with Verd\u00e9, knowing it was coming was no proper preparation for when it came.\n\nFirstly Phil felt a light tickling sensation as the pointed tip of her tongue flicked against the tip of his cock. Then the tongue struck, throwing muscular coils around his cock like a python catching its prey. Her tongue was fantastically long. It went on and on as she threw coil after moist coil around his trapped member. She drew his cock into the hot cavern of her mouth and he forgot everything he was doing as her tongue began to gently squeeze.\n\nPhil's back and legs grew taut as her tongue gripped and constricted his cock. It pulsed, firing little bursts of pleasure up Phil's spinal cord. The heat of her mouth enveloped his cock as her tongue twisted around and squeezed it. She gave it a gentle tug, pulling his cock deeper into the suction of her mouth.\n\nVerd\u00e9's tail gently tightened around his throat, reminding him not to forget her. Phil resumed lapping at her vagina, feeling the trembling of her thighs against the side of his head.\n\nPhil's cock was completely trapped by Rosa's tongue. He was a slave to sensation as her tongue slithered around his flesh. She would briefly relax her tongue, but only to get a better grip as the coils tightened and squeezed more forcefully. She gave another tug, more insistent this time and Phil felt his hips lift off the bed. His legs trembled with the pleasures pulsing down his shaft.\n\nVerd\u00e9 sensed he was about to cum and pushed down harder, completely smothering him with her moist pussy.\n\nRosa's tongue twisted and tugged, reeling him into the back of her throat. Her tongue, still coiled tightly round his cock, squeezed once, twice, three...\n\nPhil cried into the wetness of Verd\u00e9's pussy as the orgasm ripped through his body. His body shook and trembled as pleasure grasped the reins of his muscles and sinews and lashed his body. His cock spurted deep into the back of Rosa's throat and she hungrily drank down his seed. Verd\u00e9 gave a wild cry and orgasmed above him, spraying her spicy juices into his mouth.\n\nRosa's tongue tightened around his cock and tugged up and down, firmly milking his member as he spurted more semen down her throat.\n\nA second orgasm crashed into the first and he jerked his hips upwards, driving his cock deep into the fleshy tunnel of her throat. He twitched and spurted another load, bigger than before.\n\nRosa gratefully gulped it down and coiled her tongue tighter around his cock.\n\nShe wasn't going to stop, Phil thought. She was going to keep gulping and gulping down all of his seed until he dried up into a withered husk.\n\nIf Verd\u00e9 didn't suffocate him first.\n\nHe gasped, taking in another mouthful of Verd\u00e9's juices as he spurted a third time down Rosa's hungry throat.\n\nJust when he thought he might black out from lack of oxygen, Verd\u00e9 lifted herself up off him and Rosa finally uncoiled her tongue from around his cock.\n\n\"Hmm, fresh virgin cum. I feel dizzy,\" Rosa said.\n\n\"You are a sly one,\" Verd\u00e9 murmured, her face flushed as she smiled down at him from between her breasts.\n\nPhil's body was still outside of his control. His limbs trembled and shook. His hips jerked upwards in spasms, driving his cock into empty air. His balls screamed in pain, still trying to ejaculate after they'd run dry.\n\nVerd\u00e9 looked behind her to where his body twitched and writhed. Concern momentarily crossed her face.\n\n\"Swallow my juices,\" she said. \"They'll restore your strength.\"\n\nMore juices dribbled down from her pussy and passed between Phil's lips. He swallowed and felt warmth travel down his throat and suffuse through his body. The trembling in his limbs subsided and a state of bliss settled across him like a duvet.\n\nVerd\u00e9 climbed off him and leaned over to tenderly kiss him on the lips. Her hand softly caressed his chest.\n\n\"You did good there, baby warlock,\" she whispered.\n\nIt would be the only time, Phil thought. He'd never get a chance to use his tongue on a real girl. Never get a chance to hear their whispered murmurs of appreciation.\n\nHe tried to channel that thought. Come on limbs, get me out of here.\n\nThey ignored him. There was a hot girl lying next to him on the bed. She was kissing him, her soft lips brushing against his. Her hands were softly caressing his chest and abdomen. Her juices were spreading comfortable warmth throughout his body. His body had no intention of going anywhere. It was content to relax in a post-orgasmic glow.\n\n\"Now relax and let your strength return,\" Verd\u00e9 whispered in his ear.\n\nShe lay against his body, her full breast resting on his chest.\n\n\"I won't be as forceful as Rosa I promise,\" she whispered.\n\nHer hand moved down and gently played with his cock and balls.\n\n\"I'll be gentle and tender for your first time.\"\n\nShe kissed him again, letting her breasts fall fully across his chest. A gentle fragrance filled Phil's nostrils. Helplessly he sank into the ocean of her sensuality.\n\n\"We haven't got all night,\" Rosa said.\n\nShe sucked both Phil's testicles into her hot mouth and bit down. It felt like two electrodes had been attached to his balls and thousands of volts were being blasted into his body. Rosa had impaled each of his testicles with her fangs. The combination of exquisite pain and pleasure sent sparklers of shock running back and forth up his body.\n\nThen her venom followed.\n\nOh.\n\nPhil's mind temporarily disconnected.\n\nShe released more and more venom right into the heart of his sperm-producing organs. His balls twitched and sparked back into life as her venom soaked through them and forced them into overdrive. He felt them swell and pulse as they rapidly churned out more seed for the succubi to feed upon. In a matter of moments he felt as horny as if he hadn't had sex or masturbated for a week... for a month.\n\nThere was a cost to this. As his sexual organs ran into overdrive they had to take fuel from somewhere else and that somewhere else was the muscles, sinews and flesh of his body. Blissful relaxation became enervating weakness.\n\nHe had to make a move, before he became too weak.\n\nVerd\u00e9 lay against him. Her finger lightly traced circles around his nipple. His body felt no inclination to move.\n\n\"There we go,\" Rosa said, lightly kissing the tip of his iron-hard erection. \"All ready to go again.\"\n\n\"You're too harsh,\" Verd\u00e9 said, protectively hugging Phil.\n\n\"And you take too long,\" Rosa retorted.\n\n\"It's his first time,\" Verd\u00e9 said, kissing his temple. \"It should be a special moment for him to savour for the rest of his life.\"\n\n\"What, all two hours of it,\" Rosa laughed. She lay down on the other side of Phil and pinched his nipple.\n\n\"Ignore her,\" Verd\u00e9 said, her green eyes staring intently into his. \"This will be a special moment.\"\n\nShe got up and put a knee on either side of his body. A hand went down and pulled the labia of her pussy wide. She moved down his body until her dripping vagina was directly above his cock.\n\n\"Your friend was an idiot,\" Rosa whispered in Phil's ear. \"He could have had all of me, but he chose only my ass. You're lucky. You get to experience the exquisite pleasures of our pussies.\"\n\nLazily she coiled her tail around his cock and guided it to the lips of Verd\u00e9's vagina.\n\nVerd\u00e9 really was a vision of absolute beauty, Phil thought as she kneeled over him. Her breasts were full and pert. Her skin was flawless and covered in a warm, natural tan. Her smile was the welcoming grin of a girl-next-door.\n\n\"Please don't kill me,\" Phil pleaded.\n\n\"Oh baby warlock,\" Verd\u00e9 smiled. \"Don't be afraid. This will be something beautiful. You'll see.\"\n\nThe soft lips of her pussy slid over the head of his cock, as smooth as expensive silk. She took him into her tight warmth and slowly, ever so slowly descended down his shaft. Within her vagina soft muscles gripped and squeezed against his cock, hungrily sucking at his flesh.\n\nIt was too much. Her sumptuous flesh enveloped him in delicious warmth. His balls were already at bursting point.\n\nHe was going to...\n\n\"Not yet,\" Rosa whispered in his ear. Her tail tightened around his cock, choking off the flow of semen before it began.\n\nVerd\u00e9 closed her eyes and gave a long drawn out moan of pleasure as she sat all the way down his cock. Her face tilted up to the ceiling as if in worship.\n\n\"Oh baby warlock,\" she murmured.\n\nHer vagina convulsed in orgasm, flooding Phil's cock with warm juices. They dribbled out and ran through his pubic hair in little rivulets.\n\n\"Ohh...\"\n\nPhil's hips spasmed and bucked up and down, but Rosa held him firm, her tail like a leash around his cock.\n\nVerd\u00e9 moved up and down Phil's cock with slow, ever so gentle strokes. Her vagina seemed to mourn every upstroke, reluctant to release his cock. With every downstroke she clenched him tighter, her soft walls holding him in a clinging embrace like a lover fearing this would be the last time.\n\n\"Uhhh...\" Phil moaned in pleasure. Verd\u00e9's soft vagina was taking him beyond even the peaks of ecstasy their mouths had already taken him. The desire to cum was so strong now it hurt.\n\nVerd\u00e9 moaned again, completely lost in the moment. She clutched her breasts in ecstasy, her claws drawing blood. She sank all the way down Phil's cock and this time her vagina gripped him tight and refused to let go. She tried to move up, pulling Phil's hips up with her, before crashing back down onto the bed and driving his cock as deep into her as it would go.\n\nPhil's body felt aflame with lust. He wanted to... needed to... fill this avatar of splendour with every last drop of his being.\n\nVerd\u00e9 stopped riding him and instead let her internal muscles grip and tug his cock. She spread her wings wide and tilted her head back, staring upwards in rapture. She murmured words of prayer in a language Phil had never heard before.\n\n\"Taking a man's virginity is a sacred moment for us,\" Rosa whispered in his ear, unusually reverent.\n\nShe unwound her tail from Phil's cock.\n\n\"Lose yourself to her passion,\" she whispered.\n\nVerd\u00e9 cried in ecstasy and juices bubbled down around Phil's cock. Her vagina gripped his cock in waves of hungry suction.\n\nOh god, this was it, Phil thought as the waves of her passion gripped his body and tossed him about like a paper boat in a typhoon. His balls constricted and his spine arched, driving his cock deep into her fleshy heart where it detonated in a white hot explosion of ecstasy.\n\nAt the same time Rosa gripped the side of his head and crushed her lips against his in a passionate kiss. Her tongue slipped into his mouth and tangled around his.\n\nPhil was tearing to pieces between them. Rosa drew his breath into her body and replaced it with a fiery wind of lust. Verd\u00e9's vagina milked and milked his cock, sucking jet after jet of semen into her hungry warmth. Phil's body sang with euphoria, wanting nothing more than to give every last piece to these gorgeous creatures. Muscles, nerves, flesh, sinew, organs; all were fuel to be torn down and thrown onto the bonfire of their lust.\n\n\"Ah!\" Verd\u00e9 snapped out of her ecstatic feeding frenzy with a loud cry. Her vagina released his cock as she fell across his body, her wings billowing down over them both like sheets.\n\nPhil's cock spurted once, twice and then he regained control. He lay back and stared at the stone ceiling.\n\nThat had been...\n\nHe was still alive. As the pleasure faded he became aware of aches all across his body. A nagging pain started in his overused balls and steadily grew louder.\n\n\"Thank you baby warlock,\" Verd\u00e9 whispered in Phil's ear. She lightly kissed him on the lips and rolled off his weakened body.\n\n\"He's still alive? I thought you'd suck him all out for sure,\" Rosa said.\n\n\"Some of us are capable of showing restraint,\" Verd\u00e9 replied.\n\nRosa hmphed in reply.\n\n\"I said I'd savour you baby warlock,\" Verd\u00e9 smiled. Her finger resumed tracing circles around his nipple.\n\n\"We promised we'd do every filthy little thing with you,\" Rosa whispered in his other ear. Her hand tickled his balls.\n\nPhil only half heard. His ears pricked up at sounds he heard from outside.\n\nFootsteps on stone flagstones.\n\nA Wargsnout's security patrol!\n\nHe was saved!\n\n\"Help me!\" Phil screamed. \"There's two succubi in here. They're going to kill me!\"\n\nShocked, Verd\u00e9 and Rosa stared at the door.\n\nThe footsteps grew closer.\n\nTo be continued... "
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "sexy massage",
        "facesitting",
        "blow job",
        "smothering",
        "demon",
        "losing virginity"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/succubus-summoning-103"
}
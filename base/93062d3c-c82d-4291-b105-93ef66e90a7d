{
    "title": "Rainbows End",
    "pages": [
        "Chapter 1 \n\nPalmer McIntyre sat on his porch enjoying the morning view of the shallow valley below. The narrow-broken skyline of Gallatin, Missouri could be seen peeking between the rustling tips of lush green trees in the distance. Listening to the morning news on the old radio, a broadcast caught his attention. \n\n\"This is Roger Cross with breaking news; A Russian airliner with more than 200 aboard crashes in the Sinai; here with the story is Janine Hall.\" \n\n\"Good evening Roger; the Kolavia Flight 7K9268, an Airbus A320, went off radar 23 minutes after taking off from the Sharm el-Sheikh International Airport in Egypt, Sergey Izvolskiy told the media citing preliminary data. \n\nThe plane departed the Red Sea resort of Sharm el-Sheikh, near the southern tip of the Sinai, on a flight to St. Petersburg, Russia, and vanished at 6:20 am. local time. \n\nRussian state media reported that many of the two hundred seventeen passengers were Russians returning from vacation. The passengers were reported to include seventeen children. \n\nAuthorities are saying the plane crashed nearly vertically, something that would not have happened if there was one engine failure or even two engines. It would have glided to the ground, not flipped over in a vertical position. \n\nISIS has claimed responsibility for destroying a Russian passenger jet in response to Vladimir Putin's decision to bomb jihadi targets in Syria, although both Moscow and Egypt have denied any possible terrorism link. \n\nEgypt has been battling insurgents in the Sinai who are aligned with the terrorist group ISIS. However, it is not known that this played any role in the crash. \n\nReporting live from Cairo, this is Janine Hall.\" \n\nTurning off the radio, and to his dog Spike, he said, \"The world's going to hell in a hand-basket. Those dumb-ass Jihadists can't recognize a Russian bear when they see one and just pissed-off Poppa Bear! The shit's about to hit the fan, and pretty soon, townsfolk will be thinking a lot different about you and me.\" \n\nMost residents knew his name, but little beyond that; considering him non-threatening, they would nod politely and move on. The kids in town called him the Junk Man, since he owned and operated the only local salvage yard tucked behind his house in the hills. \n\nDaily contact with backyard do-it-yourself auto mechanics pretty much ended with the arrival of computerized automobiles; except for the waitress at the town caf\u00e9 and the owners of the local grocery or hardware stores, his only other interaction with humans turned into selling scrap metal to recycling foundries three or four times a year. By no means rich, he lived a modest, yet comfortable life. \n\n~ ~ ~ New York City, New York ~ ~ ~ \n\nStella Preston entered the glass turnstile doorway of the Morning Star News. Passing the security desk, and by habit, tucked the morning edition under her arm on the way to the elevators. Tuning out coworker chatter, she rode the cramped box to the seventh floor, thinking of her story deadline due tomorrow. \n\nStopping by the small break room, she poured herself a cup of coffee and walked to her desk, plopping into her chair. \"Fucking managing editor,\" she thought, \"giving me a nowhere assignment about a bunch of dorks reenacting a Civil War battle! Authentic my ass, how can two dozen overweight ass holes portray a battle that involved thousands? And the so-called leader digging the crack of his ass and then smelling his fingers; disgusting cretin, made me want to puke!\" \n\nShe was shaken from her thoughts by someone calling her name, \"Hey Stella, seen today's headlines?\" She unfolded her paper and read the article about the Russian airliner. \n\n\"Now there's a story worth reporting,\" she thought, opening her laptop and beginning her report. \n\n~ ~ ~ Philadelphia, Pennsylvania ~ ~ ~ \n\nNervously shifting from foot to foot, and scratching the track marks on his arm, Darrell watched the alley. Philadelphia always offered easy marks, if you took the time to notice. \n\n\"Come on Darrell, this is a waste of time,\" Julie Washburn whined. \n\nLooking at his strung-out girlfriend, he asked, \"And do what Julie?\" \n\n\"Maybe some of the others have scored, let's go back to the crib and see,\" she pleaded, desperately needing a fix. \n\n\"Fuck that, you heard what Mitch said! We find out what's going on here, or don't come back,\" he answered. \n\nJulie, absentmindedly picking a scab on her once flawless face and wobbly with need, asked, \"Are you sure Raymond hacked the security code?\" \n\n\"Dude's never been wrong before,\" Darrell replied, his eyes never leaving the alley. \n\n~ ~ ~ Salt Lake City, Utah ~ ~ ~ \n\nAgent Wilcox dropped the surveillance report onto the Utah ATF district supervisor's desk, and said, \"Here's the report on Joshua Felder and his followers, there's a lot of activity, but nothing actionable Sir. Infiltrating his group might turn up something, but that would take months and agency resources we can't spare.\" \n\nSupervisor Osborne looking at the thick folder asked, \"What's it say?\" \n\n\"He preaches the typical anti-government diatribe spewed by any other paramilitary religious fanatic; another Waco in the making,\" Wilcox answered. \n\nOsborne sighed, and said, \"Where do these nut jobs come from.\" \n\n~ ~ ~ Odessa, Ukraine ~ ~ ~ \n\nThe shipping vessel, , quietly slipped away, her decks stacked with cargo containers as the tired engines pushed her massive bulk forward. \n\nLeaving the seaport of Odessa, she made her way into the open waters of the Black Sea, setting course for Istanbul's Bosphorus Strait leading to the Mediterranean. \n\nAfter months of clandestine negotiations, millions of dollars in bribes procuring false shipping manifests, trusted crewmen and a single shipping container; ISIS terrorist Mahmoud Al Abradda had his prize jewel, a short range 80 kiloton nuclear SCUD missile. \n\nStanding on the bridge wing, he whispered to the wind, \"Allah Akbar.\" \n\nChapter 2 \n\n~ ~ ~ Gallatin, Missouri ~ ~ ~ \n\n\"Russian jets targeted ISIS positions earlier today, causing violent demonstrations throughout Syria and most of the Mideast. Diplomatic relations have been severed while rumors of foreign embassies, preparing for evacuation, cannot be confirmed. All foreign governments have issued travel advisories for the area as the crisis escalates out of control. \n\nReporting from Cairo, this is Janine Hall.\" \n\nSitting at a table in the town caf\u00e9 and listening to the report, DJ asked Palmer, \"What do you think about all this?\" \n\n\"Those ISIS maniacs are going to start World War III if they don't stop pissing off the Russians, and if Putin has his way, anyone found shielding those crazy bastards will join them on his nuclear hit list,\" he answered. \n\n\"Damn Palmer, don't be shy, tell us what you really think,\" DJ exclaimed! \n\n~ ~ ~ New York City, New York ~ ~ ~ \n\nStella tossed her keys, purse and mail on the dining room table and pouring herself a glass of wine; she walked to the plush couch and relaxed, kicking off her heels. \n\n\"What a miserable day,\" she thought to herself, \"Another 8-paragraph article that nobody will care about or read. And to think, I went to college for this shit! God, my life sucks!\" \n\nTaking her wine with her, she soaked in a hot bath. \n\n~ ~ ~ Philadelphia, Pennsylvania ~ ~ ~ \n\nDarrell watched a well-dressed man emerge from the alley doorway, closing the door and entering a code, he locked the keypad box. Dropping the key into his jacket pocket, the man walked away down the busy boulevard. \n\nQuickly crossing the street, Darrell approached the man, and with a slight bump, deftly plucked the key from his pocket. \n\n\"Sorry man,\" Darrell said moving away. \n\nRejoining Julie, and showing her the key, he said, \"We wait until its dark, then we go in.\" \n\n~ ~ ~ Aboard the Armoosk ~ ~ ~ \n\nThe Armoosk, entering the Mediterranean, increases speed to 23 knots and in four days will reach the Strait of Gibraltar. Joining ISIS two years ago, their beliefs more in line with his own; Mahmoud had presented his well-thought-out plan to its leaders and after gaining their approval, set his deadly plan in motion. \n\n~ ~ ~ Gallatin, Missouri ~ ~ ~ \n\n\"And in the news tonight, John Pilger has this report.\" \n\n\"Good evening Roger; Wall Street took a heavy hit today as stocks plummeted over 160 points, meanwhile US citizens emptied grocery shelves stockpiling food and water worried over the troubling Mideast crisis. \n\nAlso, in the news; Russian President, Vladimir Putin, stated from Moscow earlier today; the taking of innocent Russian lives will be met with swift and forceful justice. ISIS, you have been warned! \n\nThis is John Pilger, reporting live from New York.\" \n\n~ ~ ~ Philadelphia, Pennsylvania ~ ~ ~ \n\nDarrell slipped into the alley with Julie close behind; using the stolen key, he opened the keypad and entered the code supplied by Raymond. A second later, with a soft buzz and single click, the door unlocked. Once inside and closing the door behind them, Darrell turned on the lights. \n\nHis eyes went wide in shock, never expecting to find a sophisticated laboratory, he stared disbelieving. The entire floor was filled with glass walled rooms; each containing expensive equipment. \n\nMicroscopes, centrifuges, graduated cylinders and beakers, Bunsen burners, arrays of glassware interconnected by tubing for chemical processing; it was mind blowing! \n\n\"I thought this might be a gambling den, hell, even a whorehouse; not a fucking lab,\" Darrell exclaimed! \n\nJulie asked, \"What we gonna do with this shit?\" \n\n\"This place can't be legal; no company logo on the door and why stuck back in an alley? It's not the equipment; it's what they're making. It must be some kind of experimental drug,\" Darrell said. \n\nStanding by glass front refrigerators, Julie said, \"There's all kinds of vials stacked in trays over here.\" \n\nDarrell asked as he walked toward her, \"Anything you recognize?\" \n\n\"No, they're all clear liquid with some kind of code on the labels,\" she answered. \n\nDarrell opened the door and looked at random bottles, saying, \"Take them all; Mitch will know what to do.\" \n\nFor the next 15 minutes, they loaded duffel bags with anything they could carry of value, and then left the lab. \n\nChapter 3 \n\n~ ~ ~ New York City, New York ~ ~ ~ \n\nThe managing editor, called Stella to his office before lunch, and said, \"Recent events in Syria has created public interest in how to survive a crisis of disastrous proportions. There are a lot of doomsday preppers out there, and most of them don't know their ass from a hole in the ground, but our sources say there's one in Missouri that's got his shit together and has been preparing for years. His name is Thomas McIntyre, and lives near Gallatin Missouri. I want you to go there and interview him; I'm sure the local Sheriff can tell you how to find him. That is all.\" \n\nSeething, Stella stopped by her desk, grabbed her laptop and went home to pack; all the while thinking, \"Civil War reenactments, church bake sales and now doomsday wackos! Three days driving to Missouri, if I take my time. The more I think about it; I may keep driving. I hear California is nice this time of the year!\" \n\n~ ~ ~ Aboard the Armoosk ~ ~ ~ \n\nWatching the Rock of Gibraltar slide by and entering the Atlantic Ocean, Mahmoud thought of his dead family; a wife and two children, killed by drone strike. Simmering with anger at the impersonal nature of their death, and leaving no remains to be buried, his grief found no comfort or solace. \n\nFive days on a cargo ship, he could wait a few more; his revenge waited silently in a cargo container. Allah Akbar, yes, God is great. \n\n~ ~ ~ Gallatin, Missouri ~ ~ ~ \n\nGravel crunching under car tires brought Spike to his feet barking; a short while later, the brightly-colored patrol car stopped in front of the house. \n\nCounty Sheriff Richard Ralston stretched as he got out of the car, walked up to the porch and patting Spike on the head, said, \"I thought a dog like you would keep better company than his sorry ass,\" and then shaking Palmer's hand, continued, \"How've you been Palmer. It's been a while.\" \n\n\"Doing fine, unless you're here to arrest me,\" Palmer answered, and asked smiling, \"What brings you all the way out here Sheriff?\" \n\n\"Sure, the hell isn't the coffee you make,\" the sheriff teased. \n\n\"I was about to have another cup. You want some,\" Palmer asked? \n\n\"Sure, I haven't had a good bowel movement in weeks,\" Ralston answered smiling. \n\nSitting at the kitchen table, steaming cups in hand, Palmer asked, \"What's up Richard?\" \n\n\"A woman dropped by my office earlier today, claimed to be a journalist of some kind and, unbelievably, looking for your grandpa Tom,\" he answered. \n\n\"Did she say why,\" Palmer asked? \n\n\"Some kind of survivalist story she's doing. Said with the recent media scare about social and economic collapse, public interest has peaked on the subject and her employer wants her to do an article, maybe more,\" the sheriff answered. \n\nPalmer frowned, and asked, \"What makes you think I know anything about it?\" \n\nThe sheriff laughed, and said, \"Come on Palmer, it's no secret. Everybody in town knows you have a fortified bunker somewhere back in these hills. Of course, they all think you're crazy, stockpiling for a day that may never come.\" \n\n\"And what do you think,\" Palmer asked? \n\n\"We've known each other for years, what you do is your own business, and as long as it isn't against the law, it's none of mine,\" the sheriff returned, and then asked, \"What should I tell her?\" \n\n\"I'll meet her at the town caf\u00e9 at noon tomorrow, and we can discuss it,\" Palmer answered. \n\nThe sheriff stood, and emptied the almost full cup in the sink, and said, \"Will do; by the way, your coffee still tastes like shit,\" and walked out the door. \n\nChapter 4 \n\nTurning heads as she walked through the caf\u00e9, Sheriff Ralston escorted a strikingly attractive woman toward Palmer's table. \n\nAn expensive form fitting skirted business suit accentuated her sculpted figure while a lace trimmed V-necked blouse, struggling to contain its contents, revealed milky cleavage that shook daringly with each step of her shapely legs. \n\nHer dark Auburn hair, twisted into a French bun and unruly tendrils tumbling provocatively alongside her cheeks, framed her impeccable creamy skin and swan's neck. \n\nPerfectly crescent-shaped eyebrows hovered over effervescent aqua eyes partially hidden by sumptuous dreamy lashes and separated by an elegant and slender nose perched above oxbow lips that begged to be kissed. \n\nSheriff Ralston made the introductions, \"Palmer; I'd like you to meet Ms. Stella Preston. Ms. Preston this is Palmer McIntyre.\" \n\nPalmer asked that they join him, and Sheriff Ralston, having business to attend to, politely declined. \n\nMs. Preston, sitting in the offered chair, opened the conversation by saying, \"I assume the sheriff told you why I'm here. My employer, Morning Star publications, asked that I interview a survivalist. The original intent was to interview Thomas McIntyre, your grandfather, known to my employer. We wish to extend our condolences for your loss.\" \n\n\"Gramps passed away almost four years ago; he raised me from a child and taught me survivalist methods. I inherited the property at his passing and have maintained the lifestyle ever since. How do you plan to go about this interview,\" he asked? \n\n\"Over the course of several days, if that would be all right with you,\" she answered, and then continued, \"I'd like this to be a documentary of sorts, not just a quick overview. Offer you a chance to express your thoughts and reasoning behind your efforts; the commitment, planning, and labor involved. Materials, supplies, the methods you'll employ, should the need arise; something of substance.\" \n\nPalmer listened and watched as she explained her agenda. She was intelligent, articulate, and expressive; fully aware of her female virtues and subtly using them to her advantage. \n\n\"Ms. Preston, that was an impressive pitch, but what you're asking can't be done sitting at this table. The only way is to spend some time living as a survivalist. Are you willing to give up your modern amenities, such as cell phones, hotels, restaurants, and satellite TV? Live off the grid with minimal conveniences?\" Palmer asked watching her reaction. \n\nWithout batting an eye, she answered, \"This may come as a surprise, but I was hoping for just that kind of experience. The real deal, so to say.\" \n\nPalmer decided that if she was bluffing, he'd call her on it, and offered, \"If the shit hit the fan this instant, would you be ready to leave?\" \n\n\"If that were the case, would I have a choice,\" she asked? \n\nPalmer stood, and said, \"Very well, follow me.\" \n\nThey exited the caf\u00e9, and he led her to his truck. Opening the passenger door, he said to Spike, \"Get in the back,\" and the dog immediately obeyed. \n\n\"Do I have time to get my bags,\" she asked? \n\nPalmer answered, by asking, \"Ms. Preston, if your life depended upon getting to shelter quickly, would you hang around to pack?\" \n\nGetting in the truck, she answered smiling, \"Point taken, and call me Stella.\" \n\n\"Since this is an exercise, call your boss and the sheriff, explain what's going on and where you'll be, the Sheriff's men will take care of your belongings, turn off your phone and call me Palmer,\" he instructed. \n\nAs the sheriff hung up the phone, he laughed, and thought to himself, \"I hope she knows what she's getting into.\" \n\n~~~~~ \n\nStella quietly assessed him as he drove out of town; impressed by his immediate response to her request indicated a confident self-reliant man of purpose and quick to action. \n\nLong black hair, reaching mid shoulder blade and pulled back into a ponytail, high cheek bones and strong jaw, gave him a slightly American Indian look. Piercing steel gray eyes, intelligent and alert, commanded a person's attention under their gaze. \n\nA little over 6 feet tall and a dark-blue cotton shirt, commonly worn by garage mechanics, covered his broad shoulders and trim waist while powerful arms steered the truck along the narrow back roads. \n\nA dozen or more miles from the town, they weaved their way through a salvage yard, exiting the far side; then onto an overgrown dirt path leading to a large, solid and heavy looking gate flanked by cargo containers. Palmer got out, removed a padlock, and swung the gate open. After driving inside, he closed and barred the gate. \n\nStella, standing outside the truck, stared in disbelief; surrounded by tall dark-stone bluffs on three sides and stacked cargo containers behind her, the compound formed a protective bowl. In ancient times, it could have been a courtyard surrounded by castle walls. \n\nTo her left, she could see several vegetable gardens, and beyond these, open front sheds with hoes, rakes, shovels and various other hand tools. Along the back bluff, a large steel door set in the cliff face and framed by two open air pavilions. One sheltering a stone oven, barbecue grills and surrounded by work tables; the other covered a half-dozen picnic tables. To her right, a row of port-a-potty's, several large storage tanks with various labels, and antique farm equipment. \n\n\"This is quite a bit for one person,\" Stella said. \n\nPalmer answered, saying, \"It was never intended for one person. My grandfather understood long-term survival depended upon a group of people working together. This compound can support about fifty; follow the rules and work hard, you can stay, if not, I'm sure you can imagine the outcome.\" \n\n\"Sounds pretty harsh,\" she said. \n\n\"Not really when you think about it, everyone gets tired of freeloaders. How much more would those feelings be commonplace when you're struggling to survive,\" he asked? ",
        "\"Again, point taken,\" she answered, and then asked, \"Who would be among the fifty?\" \n\n\"I'll let you answer that; think what the world would be like, no electricity, very little fresh water, severe food shortages, and no medicine, just to mention a few. Now, who would you suggest,\" he questioned. \n\nShe thought for a while, and then answered, \"Trained medical personnel, people with agricultural and biology backgrounds, mechanical skills, experienced craftsmen, animal husbandry and possible military for security.\" \n\n\"Very good,\" Palmer praised, and then added, \"Let's not forget those with strong backs and weak minds willing to work and learn.\" \n\nHe walked between the pavilions and opened the steel door, stepping inside; he flipped a switch illuminating a long wide tunnel. He told her to watch her step on the uneven floor, and hesitantly she stepped inside followed by Spike. \n\nSecuring the door behind them, he led her into a dark domed chamber. She could sense its vast dimensions as the darkness played with one of humanities first instincts, fear of the unknown. Palmers' voice, echoing off the walls, testified to its immense size, sending a chill down her back. \n\nAnother switch was thrown, and soft light flooded the chamber. Gravel covered most of the chamber floor, punctuated by concrete slabs, and all interconnected by sturdy sidewalks in a star burst pattern. \n\nStopping at the center core, Palmer explained the layout, saying, \"Ms. Pres... Err... Stella, consider this chamber like a clock; six pads, six numbers,\" pointing at each location while speaking, \"The door is 12 o'clock, Pad 2, pad 4, 6. You get the picture. \n\nI was too young when the gravel was hauled inside, but I watched him pour the pads. From then on, I helped an amazing man build a shelter; not for himself, but for dozens of people. Getting prepared for...,\" he paused, and then asked, \"Can you cook?\" \n\n\"You offering a job,\" she asked smiling. \n\nPalmer chuckled, while thinking, \"I already like her, but this woman could be trouble,\" but only said, \"Pad 6,\" and walked toward the back of the cave. \n\nA restaurant style, stainless-steel kitchen dominated pad 6; complete with sinks, running water, multiple open top ranges, double ovens, dishwashers, refrigerators, and in the back wall, what appeared to be, a freezer door. \n\nStella froze, feeling she had been duped, asked, \"This is all electric! I thought you were preparing for the power to go out?\" \n\nPalmer said smiling, \"You know? For a city gal, you're pretty smart! When I suggested the idea, grandma asked me that very same question.\" \n\nTaking the bait, she smiled and asked, \"OK, I'll bite. What did you say?\" \n\nHanding her a pack of hotdogs, he answered by reenacting the event; slouching with head down, as children will do, realizing they hadn't thought it through, he mumbled, \"Oh yeah, I should have thought of that!\" \n\nStella tossed her head back and openly laughed, enjoying his sense of humor, and thinking, \"He's not what I imagined; doesn't fit the stereo type I expected. What did I expect? A small hole in the ground, covered with a piece of plywood? Look around you; he is the real deal, and not some maniacal maniac from Podunkville, found in the great state of WeEatPeople. Listen to him talk, she told her imaginary self. He makes all this ... craziness, sound perfectly sane.\" \n\n\"So, where's the power coming from,\" she asked opening the pack of hot dogs. \n\n\"Right now, the grid is still up, so we're running off it and charging batteries. Most everything you see, including the lights, run on batteries, just like camper equipment; in fact, most things here were made from scrap camper and RV parts found in the salvage yard we passed through getting here; the stainless-steel enclosures had to be fabricated.\" \n\nHanding her a saucepan and pointing to the sink, he continued, \"But when the grid goes down, we switch to solar. When that happens, we still run off the batteries, but now the sun charges them. Portable generators fill-in the temporary outages, until repairs can be made,\" he answered, grinning like the mouse who ate the cheese. \n\n\"Where did you learn all this,\" Stella asked, covering the hotdogs with water. \n\n\"Most of it from grandpa, the more recent stuff from books and the Internet, I'm really going to miss that,\" he added. \n\nPlacing the pot on the stove, and turning on the burner, she asked, \"Who takes over if something happens to you?\" \n\nWith a frown on his face and scratching his head, he pretended to consider his choices, shuffling his feet and in a stereotyped Uncle Tom voice, said, \"I don'ts know 'bout tomorrow, Ms. Stella, ma'am. But today, I guess that be you! Den som'body elsz gonna have to asz, pappa or plaztic?\" \n\n\"And I was beginning to think you were sane,\" she roared through her laughter, and thinking, \"Boiling hot dogs, in a cave, with a stranger, for a week, and laughing my ass off? Why does this feel... normal?\" \n\nPalmer handed her a knife, onion, small bowl and pointed to a cutting board. He watched her; she was no stranger to a kitchen; she wasted no moves. A quick, two-handed plunge cut the onion in half, and then dicing a small portion. \n\nShe stopped, and with a suspicious look, asked, \"You going to talk, or help?\" \n\nOpening a refrigerator door, he removed a jar of relish and while handing it to her, said playfully, \"Ah, young Jedi, learning we are? Most important lesson have we here; time to talk, time to listen; always time to help.\" \n\nThey ate their meal at a crafted picnic table near the pad perimeter. The beautiful, high polished tabletop reflected the soft light, and nearby; she thought she heard a faint electrical buzz and asked about it. \n\nHolding up a finger, indicating she had to wait, he swallowed hard and said, \"Those are the power inverters. They convert the AC, coming from the grid, into DC and charging the batteries. Solar panels generate DC power directly, no conversion needed, just voltage regulation and no buzzing.\" \n\n\"I hope there's pen and paper; I need to keep a journal, a detailed description of this experience. The necessary planning and forethought required above-average intelligence,\" extending her arms toward the chamber for emphasis, she added, \"to accomplish all this?\" \n\nPalmer dropped his eyes to the floor, pretending embarrassment and imitating John Wayne, said, \"Ah shucks ma'am, twernt no point in doin' things half-assed.\" \n\nShe shook her head slowly from side to side wondering, \"Where the hell did this obviously intelligent, yet, unpretentious man come from?\" \n\nStanding, Palmer picked up the dishes, and said, \"I'll wash, you dry, not enough for the dishwasher, which only happens when there's more people, and then afterward, we'll get you something that writes and some paper. Failing that, it's stone, chisel and hammer!\" \n\nThe last dish put away, he said, \"You look to be about grandmas' size; I think she was a 7. The clothes may not be in style, but they have to be more comfortable than a skirted business suit and heels.\" \n\n\"Are you serious? Absolutely,\" Stella exclaimed! \n\n\"Sleeping quarters, Pad 2, Cubicle 1; inside you'll find two footlockers, one has some of her clothes, and under the bunk, which is now yours, are shoes. I'll meet you at the hub, which is Pad Zero. \n\n\"Sleeping quarters, Pad 2, Cubicle 1,\" she repeated walking away. \n\n\"This may not be too bad! She easily catches on and quick to do her part,\" he thought to himself, \"And the more I think about it; she'd be perfect for the compound; a natural at meticulous attention to detail, an organizer. Better check the battery system while I'm here.\" \n\nPad 6 was next to a natural chimney formed ages ago, and the logical choice for anything needing ventilation, hot ovens, cook tops, smoke from grease, and any possible battery fumes. With the grid supplying power, battery chargers generate heat, thus justifying this location for their placement. \n\nQuickly finishing his task, he waited at Pad Zero, scanning through a \"How-To\" magazine. \n\nHe could feel her approaching before she arrived, and wondered, \"Was it heightened primal instincts from being in a cave? Or..., was it her? Come on man, a city girl for Christ's sake? Besides, more than likely, she thinks I'm a hick and there's no way she'd look twice at me.\" \n\nShe stopped a short distance from him, saying, \"These clothes fit perfectly!\" \n\nHe turned to look, and images of \"Rosie the Riveter\" flashed across his mind. Hair tied up with a silk scarf, checkerboard shirt under bib overalls with narrow belted waist, and low top work boots; the perfect 40s pinup. \n\nWith hands on swaying hips, she took a few runway model steps, ending in a quick turn and brilliant smile. \n\nPalmer laughed, and said, \"Sure as hell didn't look like that on grandma! You look much more comfortable. How about, we sit outside for a while; schools out, teacher skipped town.\" \n\n\"Got any wine,\" she asked smiling. \n\nYep, he liked her. \n\n~ ~ ~ Aboard the Armoosk ~ ~ ~ \n\nIn the mid-Atlantic, evening prayers completed and looking east toward Mecca, Mahmoud Al Abradda reaffirmed his deadly devotion by whispering, \"By the grace of Allah. The apostate infidels will pay for opposing the righteous laws of Islam and its prophets, Allah Akbar.\" \n\nChapter 5 \n\n~ ~ ~ Gallatin, Missouri ~ ~ \n\nAtop the container wall and with the compounds isolated location, Palmer and Stella were provided an unobstructed view of a moonless night alive with stars and the background sounds of forest insects. \n\nRelaxed conversation flowed, breaking the ice, only to be interrupted by short pauses for notes under dim lantern light. On occasion, peals of laughter exploded over the courtyard, echoing for long seconds. \n\nHe struggled not to stare but was always drawn back to her dancing aqua eyes. He could see an inquisitive mind asking intelligent questions, easily grasping the information and condensing it to hand-written notes in one fluid motion. \n\nHe watched her soft facial expressions as a frantic mixture of scribbled symbols and letters filled the pages. Leaning forward to write and wisps of hair falling around her face, slender hands pushed bothersome strands behind an ear. A certain feminine grace accompanied every move, appealing and laced with unspoken innuendo. He could tell she was accustomed to getting what she wanted. \n\nStella sipped her wine, and said, \"This is good! You don't find this in stores, is this homemade?\" \n\nPalmer grinned and answered, \"You know; my grandma asked me that very same question.\" \n\nEnjoying the banter, she played along and said, \"I'm such a sucker for this shit, I may need my head examined,\" throwing her hands in the air in defeat, she asked, \"And what did you say?\" \n\n\"Yep, it's homemade,\" was his short reply. \n\nShe clutched her chest in mock surprise, and said, \"Oh thank God! I thought it was another long, dull, boring story. Just dock the boat Captain; time to work on the approach later!\" \n\nPalmer laughed deeply, please by her quick wit, flirting all around the edge of sexy and a mind capable of competing with any man, a deadly concoction to the male half of the species. \n\nStella, breaking an awkward silence, asks, \"So, Thomas McIntyre buys a chunk of ground to start a salvage business, builds a home, and discovers a cave?\" \n\n\"The documents say it's an ore mine abandoned a hundred years ago. The courtyard was an equipment marshaling yard when the mine was active; looked different without the cargo containers, but grandpa saw it as a shelter,\" he said with fondness in his voice. \n\n\"Palmer,\" she says in a whisper. \n\nHe smiles in the darkness; she thinks she's intruding, and he thinks it's sweet; he answers, \"Yes?\" \n\n\"Can I ask some personal questions?\" \n\n\"Sure, go ahead,\" he replied. \n\n\"How'd you stay so..., sane?\" \n\n\"Life in the woods is different, not like weird, but different from town. Town seemed strange to me; my everyday normal was here; home schooled until I reached high school. To the kids in town, I was an outsider imposing on their turf, and they were right. I was the loner dork making straight A's, and TAKING PIMPLE FACED MONICA TO THE PROM,\" he shouted into the air. \n\nStella rocked in her chair laughing at his mixed expressions and lively antics; he made her feel welcome with his offbeat humor. \n\n\"You said Thomas died four years ago, where's your grandmother,\" Stella asked? \n\n\"Her name was Claire and she died shortly after, I think she just lost the will to live without Gramps,\" he answered. \n\n\"At the caf\u00e9, you said they raised you from a child, why? \n\n\"My parents, Allen and Susan, died in a boating accident; I was only three and don't remember them, although, I feel like I know them from the stories I was told growing up,\" Palmer replied. \n\nStella pushed a little further, and asked, \"Ever married?\" \n\n\"No, never met the right pimple faced girl,\" he said chuckling. \n\n\"Any siblings,\" she questioned. \n\n\"Almost, mom was pregnant at the time of the accident,\" Palmer sighed, and then asked, \"How about you?\" \n\n\"A younger brother, killed in Afghanistan,\" she answered sadly. \n\n\"Where's your family,\" Palmer asked? \n\n\"Dad passed away years ago; mom is in a nursing home with severe dementia. The last few times I visited, she didn't know me.\" \n\nPalmer said sympathetically, \"I'm sorry, that must really hurt.\" \n\nStella, choking back the tears, only nodded. \n\n\"Ever been married,\" Palmer asked, changing the subject. \n\nStella smirked, and answered, \"For about two minutes; asshole was screwing my best friend during the reception!\" \n\n\"What a dick,\" Palmer exclaimed! \n\n\"What a bitch,\" she returned, and then continued, \"He got what he deserved,\" she replied. \n\n\"And that was?\" \n\n\"The slut gave him something he couldn't wipe off,\" she laughed. \n\n\"Ah, sweet revenge, a dish best served cold,\" Palmer said philosophically. \n\nNodding her head in agreement, she said, \"But I do believe his nether region may be burning, until it falls off!\" \n\nPalmer cringed through his laughter. \n\n~~~~~ \n\nWhen Stella woke she found Palmer weeding the gardens, \"Good morning Palmer. You're up early.\" \n\nPalmer smiled, and said, \"Early was two hours ago; I never did sleep much, guess old habits are hard to break. How'd you sleep?\" \n\n\"Like a rock! That wine of yours kicked my ass; I think I was out before my head touched the pillow,\" she answered. \n\n\"Light weight,\" he teased. \n\nStella chuckled, and then asked, \"What can I do?\" \n\n\"I'm almost done here,\" he said, and then added, \"Why don't you start breakfast; sausage and eggs in the fridge, frozen hash browns in the freezer; I'll be in shortly.\" \n\n\"Coming up,\" she quipped, and then asked, \"Hot tea or coffee?\" \n\n\"Hot tea sounds good; you'll find the tea in the cupboards.\" \n\n~~~~~ \n\n\"How do you like your eggs,\" she asked as he joined her. \n\nPlacing the teabags in two cups, Palmer covered them with hot water, and said, \"Today, scrambled; tomorrow, ask me again.\" \n\n\"Scrambled it is,\" Stella said. \n\nDuring breakfast, Palmer asked, \"How'd you come to be a journalist?\" \n\nStella smiled, and asked, \"You want the long or short story?\" \n\n\"Not much on my calendar for the day, how about the long story?\" \n\nBetween bites, she began her tale, \"After the embarrassing wedding fiasco, I flew the coop; living off my savings, I traveled for a while. Caribbean, Mexico, South America, paying homage to the gods of white sand beaches and freedom. Returning to the states, I tried my hand at teaching grade school and found out, I like kids when there's somebody else's problem!\" \n\nHe said, \"Not everybody's cut out for the job, go on.\" \n\n\"Let's see, worked as a bank teller for a while; standing at a customer window, felt like I should be asking if they'd like fries with that. Thought about opening a bookstore but thinking about it was as far as I got. Did some freelance writing, and then the Morning Star offering a permanent position sounded much better than the \"Bikini Clad Carwash Babe\" some creep offered.\" \n\nPalmer roared with laughter, and said, \"But think of the tips you're missing!\" \n\nStella threw her toast at him, and said smiling mischievously, \"If I ever work for tips, you can bet your sweet ass, it won't be at a car wash!\" \n\nThe following days were filled with questions, answers and routine chores; cooking, washing dishes, tending the garden, washing clothes and hanging them on the line to dry, feeding and playing with Spike; they did everything together, quickly becoming friends. \n\nChapter 6 \n\nWith two glasses and a jug of iced tea, they climbed the wall stairs to enjoy the warm July night air. \n\nFilling their glasses, and handing one to Palmer, Stella said, \"I'm beginning to understand why your grandfather picked this place. Not only for the obvious protection of the cave, but the calm and peaceful feeling of refuge, away from the daily bustle and inescapable noise of the city.\" \n\nHe watched her as long hair, tumbling around her shoulders glistened while moonlight danced about its gentle waves; spiraling curls fluttering momentarily in the warm breeze and luminous aqua eyes piercing the darkness. \n\nBillowy clouds drifted silently through the sky, throwing scattered shadows across the moonlit courtyard, and the serene surroundings wrapping them in comfortable silence. \n\n~ ~ ~ Aboard the Armoosk ~ ~ ~ \n\nAt 9:17 pm, 75 miles off the US coastline, a solitary missile streaked into the air, its deadly payload embracing devastating consequences. Far below, explosive charges tore through the Armoosk, breaking its back and dragging its now dead fanatical occupants into the murky depths. \n\n~ ~ ~ Gallatin, Missouri ~ ~ \n\nTurning to face him, Stella said, \"Palmer, this has been an amazing week. You've been a most gracious, charming and, if I might add, humorous host. The thought of going back to the city saddens me; I'm going to miss you and our nightly conversa...\" \n\nA bright flash temporarily illuminated the night sky, and on instinct, they shielded their eyes. After a few moments, when things had dimmed, they saw a shrinking ball of light high in the sky, surrounded by trails of colored ribbons ionizing the atmosphere. \n\nLooking at the sky, Stella said dreamily, \"Reminds me of a rainbow; that's what I'll title this piece, Rainbows End.\" \n\nThe outside security lights went dark when a pole transformer hissed and threw sparks as the power grid went down. \n\n\"Did the flash do this,\" she asked? \n\n\"More than likely, too much of a coincidence to ignore,\" he answered, heading toward the stairs, he added, \"Come with me!\" \n\nStella, hot on his heels, asks, \"Where are we going?\" \n\n\"Inside,\" he answered with worry. \n\n~~~~~ \n\nSafe inside the cave, sitting across the kitchen table, Stella asked, \"That wasn't fireworks, you know what that was, so tell me.\" \n\n\"A high-altitude nuclear burst, the EMP not meant to destroy, only cripple. I hope I'm wrong! There's more,\" his voice weak and resolve shaken. \n\n\"What do you mean more,\" she questioned worriedly. \n\n\"A possible nuclear exchange, that's why we came inside,\" he answered, and then continued, \"Moments after launch, US forces identified where that missile came from, and a tanker off the coast makes sense, leaving only a few seconds to react. Unable to knock it down, silos hardened to withstand EMPs are now locking in target coordinates for a retaliatory strike. Russia, China, North Korea and the Mideast; one or all of them, time will tell.\" \n\nOppressive fear gnawed at her composure as she searched Palmers face for signs of comfort, none was given. Cold harsh reality was rearing its ugly head, dooming the unprepared and changing the world in an instant. \n\n\"What do we do,\" she asked. \n\n\"We've already done it; we're in here,\" he said. ",
        "\"Shouldn't we check in town,\" she asked without thinking. \n\n\"No, it's safer here in case things escalate. Besides, they're in the dark and with no emergency lights, only a few flashlights and the batteries drained before morning. Nothing to do but hole up here until morning, we'll know more about what happened then.\" \n\n\"There's that 'more' word again,\" she thought, though didn't ask. \n\n\"It'll be a long day tomorrow. I suggest we get some shut eye; I'll be in my cubicle if you need me,\" he said. \n\nChapter 7 \n\nWhen Stella woke, she found him in the courtyard listening to a portable short-wave radio. He motioned her to sit beside him and offered to share the headset so both could listen. \n\nThe channel repeated a recording, saying, \"This is the national emergency broadcast system, please monitor this frequency for further information.\" \n\nStella glanced at him, and asked, \"Not much help is it, anything on the other channels?\" \n\nPalmer shook his head no, and said, \"The Geiger counter indicates normal background radiation. I don't think there was a massive nuclear exchange, although, a limited exchange was probable. If so, it may be a few days before we hear anything,\" and then adding, \"There's coffee in the thermos, help yourself.\" \n\n\"Thanks, but the port-a-potty is calling my name; I'll be right back,\" she said. \n\nWhen she returned, Palmer was up on the container wall surveying their surroundings through binoculars; bringing the thermos, she joined him. \n\nHe pointed to a column of smoke in the distance, while handing her the binoculars, he said, \"The town is burning.\" \n\n\"Where's the fire department,\" she asked looking through the binoculars. \n\n\"Crippled by equipment that doesn't work, the EMP took care of that. The majority of fire department personnel and law enforcement are probably home, unable to get to work and making sure their families are safe. Can you blame them,\" he asked? \n\nLowering the binoculars, she looked at him, and said, \"This is bad, isn't it?\" \n\n\"Every indication says it is,\" Palmer answered. \n\n\"Tell me your thoughts Palmer, you've been preparing for years,\" Stella said. \n\nPalmer refreshed their coffee, and said, \"Sit down, this may take a while.\" \n\nStella interrupted, by saying, \"Wait! I need to write this down,\" and started for the stairs. Palmer gathered his thoughts while he waited, by the time she returned, he was ready. \n\n\"First, if it's only an EMP attack, I can think of three scenarios: \n\n<ol> <li> Terrorists managed to get hold of a nuke, and used it to help level the playing field, hoping the Great Satan will die slowly on the vine. \n\n</li>\n\n<li> A preemptive strike by an enemy nation prior to an invasion. \n\n</li>\n\n<li> It's an accident, and somewhere along the line, somebody screwed the pooch and severely fucked up! \n\n</li> </ol>\n\nHopefully, cooler heads will keep this from escalating, but I doubt it.\" \n\n\"Why do you think that,\" she asked? \n\n\"Even if it was an accident, and we did this to ourselves, we're vulnerable. Think about it! No early-warning radar, most modern missiles, military aircraft and transportation inoperable, communication systems fried, we're totally blind. Any rogue nation, capable of taking advantage of this opportunity, is of grave concern. At a minimum, the only option left to the United States would be, do the same to all of them, guilty or not.\" \n\n\"So, you think this is worldwide,\" Stella asked? \n\n\"Eventually yes; every country's power grid is interconnected within itself, and most share across neighboring borders. When a region goes down, it can create a cascading effect, and like dominoes, toppling the rest. This probably happened while we slept,\" he replied. \n\n\"Like the East Coast blackout a few years back, it started in Canada,\" she offered. \n\n\"Yes, only on a much larger scale,\" Palmer responded, and then added, \"Lack of chatter over the airwaves supports this.\" \n\nBoth fell silent while sipping their coffee, and then Stella asked, \"This is just the beginning, isn't it?\" \n\nPalmer could hear the sadness in her voice and hated to be the one with bad tidings, he sighed and said, \"Yes, one thing will lead to another unfortunately.\" \n\n\"How have you lived with all this,\" she asked in a whisper. \n\n\"I never really thought about it as a kid, but once I got older, there were times I wondered if I wanted to survive while millions die, and they will,\" he answered. \n\n\"How do you see all this playing out,\" she asked. \n\n\"For the unprepared, no fresh water in a few days, starvation in a week or two, followed by, disease, lack of medicine, and mindless anarchy. \n\nIf it wasn't so sadistic, it would almost be comical; the lifestyle we enjoyed yesterday took a hundred years to develop and then vanished in an instant, a momentary flash of light, leaving humanity to deal with a collapsing society heading straight toward feudalism. \n\nBreakdown of social, economic and government institutions will result in gangs, warlords, angry mobs and rogue military units ruling their newly formed brutal kingdoms.\" \n\n\"Jesus, this is terrifying,\" Stella exclaimed! \n\n\"I agree with you, nonetheless, I fear it's true,\" Palmer said, and then continued, \"Hard times will require hard decisions, for example; once the compound reaches its support limits, what do we tell any newcomers? Do we turn them away, and who makes that decision? If a family shows up, and one is a doctor needed desperately, do we make room for one or all of them? If the doctor is willing to abandon the family, would we want a doctor with those kinds of morals? We're treading unfamiliar and dangerous ground, nobody has all the answers.\" \n\nStella sat staring at her coffee, her mind whirling with questions, \"Turned away, maybe with a starving family, because you're sick or lacking needed skills, whatever the reason, rejected and expendable.\" \n\nSuddenly, she asks, \"What about me, what do I have to offer?\" \n\nPalmer could see genuine concern in her eyes, and countered, \"You tell me! Why should I let you stay?\" \n\nWhile she considered her answer, he painted a visual picture, \"You're standing outside the main compound gate, hungry and desperate; dozens of faces look down from the wall; they're tired, worried and no time for freeloading bullshit.\" \n\nStella took a deep breath, and said, \"I'm a journalist and can document the compounds' history; I have teaching credentials in college-level English and History; I didn't get to where I am today by being a slacker. I worked hard, studied long hours and was class valedictorian; I know my way around a kitchen and not afraid of doing my share; I've organized and managed major projects...\" \n\n\"Stop,\" Palmer interrupted, and then said, \"That's your major selling point, organizational skills at a management level. The compound needs an organizer, maximizing efficiency from the littlest things to the largest. With limited manpower, time and energy expended will be critical factors, we can ill afford running recklessly toward ultimate failure.\" \n\n\"Whew, I thought I'd be hoofing it outta here without breakfast,\" she laughed. \n\nPalmer smiled and said, \"Speaking of that, you know your way around a kitchen.\" \n\n\"You're a sly dog for sure; I walked right into that,\" she said with a pleasant frown. \n\n\"Ripe for the picking,\" he teased, \"Which reminds me, I saw a few tomatoes that looked ready. Do you like BLTs?\" \n\n\"Is the Pope Catholic,\" she asked? \n\n\"Don't get me started on religion, I'll never get fed,\" Palmer sighed. \n\nWhile they were picking tomatoes, she asked, \"Against religion?\" \n\n\"I consider myself an agnostic, neither for nor against it, but believe humanity puts way too much emphasis on which side of the fence you stand. It promotes conflicting ideas; love and division, peace and war, truth and guile, kind of destroys the idea of a loving and benevolent being. I'm not saying that there isn't one out there somewhere; I just wish it would make up its damned mind!\" \n\nAs Stella laughed, she dropped a tomato, bursting it on the ground. She looked at Palmer and asked, \"Make me walk the plank?\" \n\n\"Nah,\" he answered, and then teased, \"We just catapult the riffraff over the wall!\" A clap of thunder could be heard in the distance, grabbing a head of lettuce, he added smiling, \"His benevolence must be angry, we'd better get inside.\" \n\n~~~~~ \n\nPalmer stopped by storage and grabbed some canned bacon, and while Stella sliced tomatoes and washed the lettuce, he fried the bacon. Later at a table, BLTs half eaten, Stella asked, \"How long do you think this will last?\" \n\nPretending to misunderstand, Palmer looked at his sandwich and answered, \"Five minutes, if I take my time; thirty seconds if I don't.\" \n\nWith a serious expression, she said, \"You know my meaning.\" \n\nWith quiet words, he answered, \"Years, generations perhaps, and hopefully done with renewable energy preserving the natural ecosystem. Two factors will determine the speed with which rebuilding is accomplished, manpower and cooperation. \n\nFirst point; conservative estimates predict 90% of Earth's population will die in the first year. Children, the elderly and infirm die first; starvation, disease, stupidity and violence take the rest. Repeating the agony of the thirteenth century black plague, there won't be enough people to bury the dead. \n\nSecond point; cooperation on a massive scale will be hindered by feudal jealousy; you have something I want, if I can't capture it and make it my own, I'll destroy it, thereby eliminating any advantage you might have.\" \n\n\"A method employed by rulers throughout history,\" she said. \n\n\"Exactly,\" he said around a mouthful, giving Spike the rest. \n\n\"You have an attractive, yet somewhat morbid mind, Mr. McIntyre,\" she complemented. \n\n\"Hey, what about the rest of me,\" he quipped! \n\nStella looked him up and down, and with a sultry voice, answered, \"We've known each other a few of weeks. How should I know?\" \n\n\"Damn, I thought I was on a roll,\" he said, feigning confusion. \n\nMimicking his earlier antics, she replied, \"Working on our approach are we, Captain?\" \n\n\"Touch\u00e9 Madam, touch\u00e9,\" he replied chuckling. \n\n~~~~~ \n\nThey spent most of the day under the pavilions, the heavy rain prohibiting unsheltered activities. Sometime during the late afternoon, and skies clearing, the short-wave radio crackled to life. \n\n\"This is Billings Montana, can anybody hear me,\" a female voice said. \n\nPalmer keyed the mic, and said, \"Yes Montana, we hear you.\" \n\n\"Thank God, my name is Rachel, may I ask your location sir,\" she asked? \n\n\"Missouri, my name is Palmer,\" was all he dared offer. \n\n\"What's the situation like there Palmer,\" Rachel asked. \n\nLeaving out details, he replied, \"No food, water, or electricity. And you?\" \n\n\"The same; people are going crazy with fear, fighting over everything. Any news of the government or when help will arrive?\" \n\nStella watched him shake his head in sadness, both understood the government was basically impotent or had ceased to exist, and help wore sheep's clothing; Rachel had no clue. \n\nNot wanting to dash her hopes, Palmer said, \"No word from the government, but help should arrive soon. It's storming here, and I'm losing sig...\" He turned off the radio. \n\nWith tears in his eyes, he looked at Stella, and said, \"Our first denial at the gate will be even harder.\" \n\nChapter 8 \n\n~ ~ ~ Little Moab, Utah ~ ~ ~ \n\nJoshua Felder assembled his commanders, saying, \"Far too long the government has been denying God's authority. If the sign in the heavens is not a wake-up call, what is? What more evidence do they need? We'll take our vengeance upon those who oppress us; we will follow them to the gates of hell until they are brought to God's justice. Every aspect of hard and soft power will be used to accomplish our objective.\" \n\n~ ~ ~ Gallatin, Missouri ~ ~ ~ \n\nPalmer could hear Stella softly sobbing in the darkness, a world gone awry was taking its terrible toll. He wanted to comfort her, but what could he say? Lying, like he did to Rachel, ate at him; he wouldn't do that to Stella. \n\n\"Palmer,\" she whispered at his cubicle door. \n\n\"Yes Stella,\" he said into the darkness. \n\nShe paused, and then quietly admitted, \"I'm afraid.\" \n\n\"How can I help,\" he asked? \n\n\"Hold me?\" \n\n\"Sure, I'd like that,\" he responded. \n\nPalmer scooted on his side as she joined him; tucked tightly in his arms and with a quick kiss on his jaw, she said, \"Thank you, I feel better now.\" \n\n\"You shouldn't feel that way,\" he answered. \n\n\"Why?\" \n\n\"Remember when you called me Captain?\" \n\n\"Yes.\" \n\n\"And that I should work on my approach?\" \n\n\"What of it,\" she said, wondering where this was going. \n\n\"Well,\" giving her a squeeze, \"feels like it's working,\" he laughed. \n\nSnuggling even closer, she purred contentedly, \"I think maybe you're right.\" \n\nPalmer smiled in the darkness and within minutes, both were sound asleep. \n\n~~~~~ \n\nWhen Spike left the cubicle early the next morning, Palmer was still holding Stella. They must've slept like the dead, because neither moved during the night. The daylight indicator, a timer-driven low wattage bulb above his rack, hadn't been on for long. \n\nUnder its dim illumination, he watched her sleep peacefully. Intertwined as though lovers, the shared body heat was comfortable, lessening the chill of the chamber's air. Her face, half hidden against his chest and pushing her slender nose askew, looking serene and yet, beautiful. \n\nBeneath an arching brow, long eyelashes fluttered as she slept, and he thought to himself, \"Is she dreaming, if so, what about? I hope nothing dreadful, there's enough of that while awake. I know this isn't easy, but together, we can get through this. Together; are we... together, like a couple? Do I want that, and more to the point, does she? Get a hold of yourself Palmer, and don't read more into the situation that isn't there. She's here because the world has gone crazy. She's in my arms because she's scared out of her mind, and I did this to her with my morbid descriptions of our new and brutal world. I'm such an idiot!\" \n\nPushing a strand of her auburn hair away, her skin felt wonderfully soft and alive, causing his fingertips to tingle and his heartbeat to quicken. \"What is it about her,\" he asked himself, \"A sharp and inquisitive mind, accompanied by a pleasant and attractive disposition, instinctively helping with chores, not to mention her shapely body pressed against him. There's something else, anchored at the core and lingering on the fringe of recognition, an unconscious emotion of heartfelt connection?\" \n\nShe rolled over, taking his arm with her, ending in a spooning position; wriggling momentarily and pulling his hand between her breasts; she found a comfortable position and exhaled contentedly. \n\nHer hair, now wrapped beneath her head, exposed a graceful neck. He watched a tiny patch of her creamy skin throbbing steadily in sync with her pulse. Her heartbeat, strong and steady under his palm, the rise and fall of her chest from her breathing; her smell, a tantalizing and feminine fragrance flooded his senses. \n\nShe surprised him by pressing his hand tighter to her chest, and asking, \"What are you thinking?\" \n\n\"The truth,\" he questioned? \n\n\"Always,\" she answered. \n\nHe sighed, gathering his courage, and said, \"The never-ending wonders of life, and how fortunate, a man like me, could be holding a woman like you.\" \n\nPleased by his answer, she wiggled against him, and said, \"You seem to have me at a disadvantage, kind sir!\" \n\n\"Disadvantage my ass, says the lamb to the hungry she-wolf,\" he returned. \n\nFeeling her shake with silent laughter, he asked, \"Coffee on the wall?\" \n\n\"Can I pee first,\" she asked? \n\n\"Only if you make the coffee; I'm beginning to think the Sheriff's right, mine tastes like shit! Meet you there,\" he asked? \n\n\"Deal,\" she responded. \n\n~~~~~ \n\nTopping the wall stairs, she found Palmer scanning the horizon with the binoculars. Filling two cups from the thermos, she asks, \"Anything different?\" \n\n\"The good news is the town stopped burning.\" \n\nHanding him his cup of coffee, she probes, \"And the bad news?\" \n\n\"With the town in ruin, the desperate few will be heading here,\" he said sipping his coffee. \n\nConcern on her face, she asks, \"When do you think they'll arrive?\" \n\n\"Those traveling light, sometime late today or tomorrow; the stragglers will arrive piecemeal fashion over the next couple of days,\" he answered, and then asked, \"Can you use a gun or rifle?\" \n\n\"Never fired one,\" she replied. \n\nHe thought for a moment, and then said, \"When they arrive; we'll both be standing on the wall and holding shotguns where they can easily be seen. A show of force will hopefully discourage any aggressive behavior and avoid confrontation.\" \n\nHe set down his cup, and said, \"You need to practice, I'll be right back.\" \n\nHe returned with a pump shotgun and a box of shells. He instructed her on its use and effective range, demonstrating with two rapid shots, asking her to do the same. \n\nFlawlessly, she executed his request; seeing the surprise in his eyes, she grinned and said, \"I lied. My dad took me skeet shooting, also, there's a pistol in my purse.\" \n\n\"Remind me never to piss you off!\" \n\n\"Yeah, you really don't want to see that,\" she grinned handing him the weapon. \n\nPalmer jacked the slide ensuring it was empty, laid it across the table, and said, \"Stella, it looks like you're stuck here.\" \n\nShe responded by saying, \"Stuck here? With a world gone to shit, I'd call it fortunate to be here!\" \n\nPalmer said in a serious tone, \"This will bring out every kind of scum imaginable, looking for a place just like this! There are some things you should know,\" raising a panel near her feet and pointing, he continued, \"These numbered switches, ten in all, detonate Claymore mines hidden at the base of the wall. They can be thrown one at a time or all at once using this bar. As you face outward, switch one triggers the Claymore on the far left, switch ten the far right. These are not designed to be used against vehicles, they hurl hundreds of steel balls out in a shallow arc; anybody caught unprotected in front of these bad boys die. \n\nThe reason the wall is shaped in a wide V and the gate at its bottom, is because each leg of the V can cover the opposite leg and both legs can cover the gate. \n\nThe slots, cut into the steel plate on the front edge of the wall, are protected firing positions; do not stand and fire your weapon unless absolutely necessary. We have neither the time nor the medicine to treat enemy wounded, so, if you have to shoot, shoot to kill, it's more humane. \n\nIn case heavy shooters show up, tanks and shoulder fired rockets; jump down to the narrow catwalk for protection. The bottom containers are filled with concrete; anything ramming them will get a very unpleasant surprise. \n\nOur weakest point of defense is the gate. If need be, the old bulldozer can be parked against it, hopefully preventing a breach. \n\nWithout saying, if the alarm sounds, your first duty is to grab your weapon and man the wall.\" \n\n\"Holy shit Palmer, you're expecting a war?\" \n\n\"Just prepared for one, thanks to grandpa,\" he answered. \n\n\"Was he in a war?\" \n\n\"World War II; he learned military tactics and taught me what he knew,\" he replied. \n\nStella's belly growled and she said, \"All this talk about killing has made me hungry!\" \n\n\"How about cereal, dehydrated bananas and canned milk?\" \n\nStella smiled and said, \"You really know how to sweet talk a girl, let's go.\" \n\n~~~~~ \n\nAfter breakfast, Palmer gave her the nickel tour of weapons storage. The normal array of firearms hung on the left wall, pistols, rifles, shotguns; the back wall held assault weapons, M-14s, M-16s, AK-47s, and a few she didn't recognize; to her surprise, hanging on the wall on the right, were two scoped sniper rifles with suppressors, one 50 Cal anti-material rifle and three Russian-made RPGs. ",
        "\"Where did you get all this,\" Stella asked? \n\n\"Some through US Military surplus auctions and personal contacts, but most through clandestine Internet purchases from foreign sources. It's amazing how you can buy US-made weapons cheaper from foreign dealers than here in the states.\" \n\nStella started to hang up the shotgun, but Palmer stopped her. Selecting his own shotgun, splitting the open box of shells, and in a serious tone, said, \"From here on out, when outside the cave, we keep weapons nearby, no exceptions, ever. \n\n~~~~ \n\nAround noon, shotguns close and sitting in the pavilion, Stella was making notes on everything he had told her that morning, when she asked, \"Where does the compounds' water come from?\" \n\nPalmer looked up from the short-wave radio, and answered, \"A hidden spring at the back of the cave.\" \n\n\"Enough to support 50,\" she asked? \n\n\"Yup, more than enough,\" he answered. \n\n\"With a full charge, how long do the batteries last?\" \n\n\"Depends upon the demand; with just us two, four to six weeks; with fifty people, seven to ten days,\" Palmer responded. \n\n\"I haven't seen any solar panels, where are they?\" \n\nPalmer smiled, and said teasing, \"You sure ask a lot of questions for a city girl.\" \n\n\"Inquisitive minds and all that bullshit, you know,\" she quipped flippantly. \n\nPalmer chuckled, and answered, \"Not wanting to put all the eggs in one basket, they're in four different locations. Number 1, a split array, is on the twin pavilion roofs, number 2 on the tool shed roof, number 3 above the left bluff, and number 4 above the right.\" \n\n\"Wouldn't 3 and 4 be vulnerable,\" Stella asked? \n\n\"Good question grasshopper,\" Palmer said, then added, \"Technically yes, but they're hidden in shallow pits and not easily seen, even from a close distance. If they're discovered and destroyed, we'd need to repair them; assuming we survive an attack.\" \n\n\"There's that optimistic outlook I've come to know and love,\" she teased. \n\n\"I would say you bring out the best in me, but, seeing how grandma tried and failed miserably, I wouldn't place much stock on it improving,\" Palmer said with a smart-ass smile. \n\nStella walked toward Palmer, motioning for him to turn around, and sat on his lap. Running her fingers through his loose hair, she said, \"Don't ever change Palmer. You're a driven man, and serious enough to plan thoroughly with others in mind, yet crazy enough to see humor with most every situation.\" \n\n\"It's genetic; driven comes from grandpa, crazy from grandma. Mix the two and what do you get? Driven crazy,\" he said, crossing his eyes. \n\nStartled by pounding at the gate, they ran toward the wall, weapons in hand. At the bottom of the wall stairs, Palmer instructed, \"Stay calm and follow my lead. If there's trouble, drop down to your firing position.\" Stella nodded that she understood. \n\nChapter 9 \n\nPalmer cautiously peered over the side, and said to Stella, \"Relax, I was hoping they'd show up, we need them,\" and yelled over the side, \"Hang on Daniel, I'll open the gate.\" \n\nSitting around a large picnic table, Palmer made the introductions, \"Stella, these are my nearest neighbors, Daniel and Nadine Cooper; their son DJ, his wife Shelley, and their son, Austin. Everybody, this is Stella Preston.\" \n\n\"Thanks for letting us in Palmer,\" DJ said, and looking at Stella, he added, \"Palmer and I were classmates in high school.\" \n\n\"No problem my friend, you were one of the few who accepted me,\" Palmer said, and looking at Daniel, he continued, \"You're here, so it must be bad.\" \n\n\"It's a living nightmare; people are turning on each other like rabid dogs; angry mobs roam the countryside stealing anything of use. Last night, we heard them coming and ran out the back, at first light we traveled here through the woods,\" Daniel said, and then added, \"I don't think anyone followed, but can't be sure.\" \n\n\"You're all welcome to stay, let's get you fed and settled. After a night in the woods, I'm sure you're hungry, tired and need to rest,\" Stella said. \n\nPalmer stood, and with a sheepish smile, said, \"My second-in-command has spoken, let's move.\" \n\nAlone, Stella asked Palmer, \"Second-in-command! Are you out of your mind?\" \n\n\"Of course, what's your point,\" Palmer responded. \n\n\"Surely there's somebody else better qualified,\" she exclaimed. \n\n\"The way I see it, you volunteered,\" he answered. \n\n\"Volunteered? How did I do that?\" \n\n\"By offering food and shelter, you made a command decision, thereby exercising your self-proclaimed authority,\" he said grinning. \n\nShe said, \"I keep walking into your traps.\" \n\n\"Most of them, but I'll keep working on the rest,\" he teased. \n\nStepping close and smiling, she asked, \"And what other traps should I be wary of?\" \n\n\"If I told you, they wouldn't be traps, would they? Besides, I enjoyed your look of surprise.\" \n\nThen he kissed her. \n\nThe kiss didn't surprise her, she knew he wanted to while she was sitting on his lap, she had seen it in his eyes, but the moment had been interrupted by the banging on the gate. \n\nThe surprise came from the way he kissed her; loving and passionately. Her body screamed at his assault yet melted by his embrace; fire raged in her veins while butterflies swirled in her stomach. Emotions of longing and desire flooded her senses; images of belonging and acceptance drifted through her thoughts. \n\nWhen he broke the kiss, she clung to him, her body trembling, head on his chest and gasping for air. Palmer rested his cheek on her head, gently stroking her hair; his previous fear of rejection had vanished, replaced by a newfound refuge in which to hide. \n\nShe raised her head and searched his face for long moments. She didn't need him to explain, the kiss told her everything, and eventually she said, \"You are full of surprises, Palmer McIntyre.\" \n\n~~~~~ \n\nLater that evening, the group ate under the pavilion, a single bulb offering its dim light against the encroaching darkness. The adults had weapons, with the exception of Shelley, responsible for Austin. \n\nStella was inwardly relieved with the Coopers immediately accepting her position of authority. She satisfied their curiosity of how she ended up at the compound and they laughed at her stories of mind numbing assignments for the Morning Star news. \n\nJust as he did Stella, Palmer explained the compound rules and expectations. When asked about his thoughts concerning their predicament, he left no illusions to what he suspected happened, and what was to come. \n\nShelley started to send Austin away during Palmers sobering discord, but Stella stopped her, saying, \"He needs to hear this and understand the possible dangers. If, God forbid, he finds himself alone, his life could be forfeit through ignorance and nobody wants that.\" \n\nPalmer privately smiled to himself at Stella's natural ability to lead; she won them over with logic, and with time, trusting obedience would follow. \n\nSuddenly, Austin asked Palmer, \"Are you Captain of this fort?\" \n\nPalmer chuckled, remembering Stella called him that, and a quick glance revealed she was thinking the same as she grinned from ear to ear; he answered saying, \"I was recently given that title by my second-in-command, so, I guess I am!\" \n\n\"Can I be a captain too,\" the boy asked? \n\nDJ answered his question by saying, \"Young boys start as a recruit and work their way up the ranks.\" \n\nAustin looked at his mother, and said excitedly, \"Mommy, I'm a recruit!\" \n\nShelley smiled at her son, but the horrifying inference of the military and war showed in her eyes while she hugged him. \n\nJust then, Spike approached the boy and licked his hand; the bond was instantaneous as they ran off playing in the courtyard. \n\nPalmer noticed a flash of worry cross Shelley's face, and said, \"They'll be good for each other; Spike will protect him with his life.\" \n\nDaniel pulled out a harmonica and played softly while the group listened to the soft slow melodies wafting across the courtyard. Unwanted responsibilities and worry drifted out of focus into the distant background, offering comfort to the soul. \n\nStella slipped her hand into Palmers, interlacing her fingers with his; her simple touch dispelling lonely years of being an isolated outcast, ridiculed by most towns' people. \n\n~~~~~ \n\nStella lay wrapped in Palmer's arms, and her finger tracing circles on his chest when she said softly, \"Palmer.\" \n\nHe smiled in the darkness, and said, \"Yes.\" \n\n\"Where's Spike?\" \n\n\"With the boy,\" and after a short pause, said, \"I think I've lost my dog.\" \n\nStella buried her face in his chest, stifling her laughter. \n\nEventually, she asked, \"Do you think..., \" \n\nHe interrupted her by saying, \"No, we are not going to eat him!\" \n\nAnother fit of laughter shook the bed, and minutes passed before she could speak, saying, \"There's no hope for you.\" \n\n\"Absolutely none,\" he agreed, momentarily squeezing her tight. \n\n\"Do you think Shelley is going to be a problem,\" she asked with worry in her voice. \n\nPalmer sighed answering, \"You handled her well tonight, but keep in mind; you can be her friend, but never let her lose sight that you're in command. I want you to assign each of them responsibilities and chores tomorrow; I'll help if you want.\" \n\n\"With extra mouths to feed, I'm thinking about expanding the garden. Is it too late in the season for that?\" \n\n\"For some things yes, but ask Nadine tomorrow, she's magical when it comes to that.\" \n\n\"Palmer,\" she said. \n\n\"Yes,\" he answered. \n\n\"What does dog taste like?\" \n\nSqueals of laughter rang out as he playfully tickled her ribs. \n\nChapter 10 \n\nThe following morning, Stella gave each their assignments. \n\n\"Nadine and Shelley, you'll share kitchen duties, laundry and maintain food storage inventory. Daniel and DJ, you'll share battery and equipment maintenance, tend the garden, and waste disposal. Austin, you'll take out the trash and feed Spike. Everyone conserves energy; turn off anything not in use. Weather permitting, cook, bake, and dry clothes outside. If you find yourself with nothing to do, find me and I'll direct you to where you're needed most. \n\nNow, about personal hygiene; twice a week, enough water will be warmed to allow each person a one-gallon jug for this purpose. Wet yourself down with as little water as possible, soap yourself up and rinse with what's left, this includes your hair, recaptured wastewater will be used to help water the gardens, any questions?\" \n\nNadine asked, \"Are there any extra clothes we can change into?\" \n\nPalmer answered the question, saying, \"Yes, you'll find them in miscellaneous storage, Pad 4. Grandma, was smart enough to think of that, and gathered discards from Goodwill, churches and charities.\" \n\n\"If there are no more questions, let's get busy,\" Stella commanded. \n\nPalmer showed Austin where the dog food was, and how much to feed him; explaining Spike was to be fed only once a day, no more. Gathering any trash, Palmer showed him the compost bin, why it was there and how it was to be used. \n\n\"Don't be afraid to ask for help, if you need it,\" Palmer concluded. \n\nAustin saluted, and said, \"Yes sir Captain.\" \n\nPalmer smiled, returned the salute, and said, \"Dismissed!\" \n\nStella approached, and said, \"Nadine brought me up to speed on vegetables; there are several kinds we can plant late in the season. She also told me about something called a \"cold frame\", which Daniel knows how to build, and extends the growing season well into winter. He's already found the lumber needed, and when the time comes, I'll have him build it.\" \n\n\"I like it. Give you an inch, you take a mile,\" he teased. \n\n\"What, the giving or the taking?\" \n\nGrinning broadly, he answered, \"Both, I'm greedy!\" \n\nScanning the courtyard, Stella asked, \"I see Daniel working the garden, where's DJ?\" \n\n\"Tuning up the bulldozer and making sure it starts if needed,\" he answered. \n\n\"Did you tell him to do that?\" \n\n\"No, he thought it was a good idea, and I agreed,\" Palmer responded. \n\nStella smiled and said, \"He'll make a good addition to the group.\" \n\n~~~~~ \n\nNadine rang the dinner bell, circling an iron bar inside an old-style triangle. As everyone was gathering at the pavilion, Austin came running, and shouting, \"Captain, Captain. A big truck is coming!\" Everyone grabbed their weapons and ran to the wall. \n\nAn old 2 \u00bd ton flatbed truck, loaded with people, slowly rolled to a stop and the driver stepped out. Raising his hands, he said, \"I'm unarmed,\" slowly turning a circle, and then asked, \"Can I lower my hands now?\" \n\n\"Yes, who are you,\" Palmer asked? \n\n\"My name is Marshall Dennis, you know my brother Chris. He told me about you; said if any place was safe, it was here. Most of these people in the truck are his friends and their families. We're hoping you'll take us in and will do anything you ask, just give us a chance.\" \n\n\"Are any of you sick,\" Stella asked. \n\n\"No, although, one is wounded; gunshot to the thigh, his wife is a nurse and patched him up; bruises and scratches on the rest.\" \n\n\"Any weapons,\" Palmer asked? \n\n\"A rifle and a pistol, ammo was used up escaping town. Chris kept the shotgun.\" \n\nSuspecting the answer, Palmer asked, \"Where is he?\" \n\n\"He's dead,\" Marshall answered. \n\nPalmer looked at Stella, and asked, \"What do you think?\" \n\nLooking around at \"The Coin\"; they now called themselves this, meaning they were the gold coin in the pot at Rainbows End, she asked, \"Isn't that why we're here,\" and all gave nods of approval. \n\nFourteen people were added to Rainbows End, bringing the total to 16 adults and five children. \n\nChapter 11 \n\nThe following day, Stella explained the compound rules to the newcomers and assigned duties. \n\nPalmer instructed DJ to follow him. He explained the battery charging system and pointed out there was a problem. Array four's output was down, likely disturbed by an animal or a fallen tree, either way; it needed to be checked out. \n\nGathering a bow saw and two axes, he found Stella and told her to post Marshall on the wall as lookout until they returned, with tools and weapons they struck out. \n\nUpon reaching the array, they discovered a tree branch partially covering it, the only problem; it had been cut and placed there. Instantly Palmer shouldered his weapon standing guard, instructing DJ to drag the branch away, once that was done, they hurried back. \n\n~~~~~ \n\n\"We're being watched,\" he told the Coin, and then continued, \"They're gathering information on our numbers and defense capability. By not destroying it means they want it for themselves, which also means they're dangerous and smart.\" \n\n\"Shit, we were followed,\" Marshall said. \n\n\"It doesn't matter, either you or someone else, it was bound to happen,\" Palmer said, and then added, \"From here on out, nobody leaves the compound and no more than six people outside at the same time.\" \n\nLooking at DJ, he asked, \"Ever used an assault weapon?\" \n\n\"No, but dad has,\" he answered. \n\nLooking at Daniel, Palmer said, \"Think you could teach the rest of the Coin how to use one?\" \n\n\"Easy as falling off a bike,\" Daniel grinned. \n\n\"Nadine, make coffee and lots of it, we'll need it; Shelley stay with Austin; recruit, protect your mom and grandma; Stella, take the rest to the weapons cage, when you're finished, bring your weapon and an M-16 with three full clips for me, I'll be outside near the chamber door standing guard, move it people!\" \n\n\"One question Captain,\" Daniel said grinning, \"When do you want relieved?\" \n\nPalmer winked at Austin, and replied, \"Six hours, get whatever rest you can.\" \n\n~~~~~ \n\nStella found him leaning against the bluff wall. She handed him the assault rifle with a clip in the magazine and safety on; he stuffed the two extra clips in his pockets. \n\nShe could see the stress on his face, and asked, \"When do you expect an attack?\" \n\n\"If they attack at all, most likely at dawn; this is unfamiliar ground to them and too dangerous for a night attack.\" \n\n\"What do you mean, if at all?\" \n\n\"If they scouted properly, they've found both bluff arrays and will cover them completely laying siege. Then wait for our batteries to drain, food and water used up, and hope for our surrender. But it will be a long wait, we can hold out for a couple of years,\" Palmer answered. \n\n\"Any other problems you foresee,\" she asked? \n\n\"Unfortunately, yes.\" \n\n\"Do I want to hear them,\" Stella asked? \n\n\"Probably not, but your choices are extremely limited since you made me Captain,\" he chuckled. \n\n\"I have a feeling I'm going to regret the lapse in judgment,\" she lamented. \n\nJabbing her with his elbow, she grunted, spilling some of her coffee, and he said teasingly, \"People have been shot for lesser insubordination, but that's the easy way out. I'm not done punishing you yet, so you'll have to suffer with the rest of us.\" \n\n\"Sadistic bastard,\" she grinned, and then added, \"Talk to me.\" \n\n\"First; a frontal attack draws us to the wall, allowing strategically placed enemy snipers to pick us off from behind using the bluffs. In the end, we lose. \n\nSecond; sniper fire keeps us inside, they blow the bluff face trapping us inside. Again, we lose. \n\nThird; lacking explosives, sniper fire keeps us inside cutting us off from the courtyard, they take what they want and destroy the rest. They'll eventually leave, but at what cost to us. \n\nFourth; a Trojan horse, some or all join a group and knock at the gate, just like ancient Troy, we lose.\" \n\nPalmer laughed with bitterness and said, \"Well thought out my ass, I'm such an idiot.\" \n\nStella didn't know what to say, his logic was irrefutable, but beating himself up served no purpose. \n\n\"Stella,\" Palmer said. \n\n\"Yes Palmer.\" \n\n\"I know you're not going to like this, but I'm going out tonight and do what I can to stop this,\" he told her. \n\n\"Dear God, Palmer no,\" she cried. \n\n\"Listen to me, grandpa didn't just teach defensive tactics; he taught me offensive as well, including sniper training; lying motionless for hours in a hot ghillie suit, approaching undetected and waiting for a target to appear. Over months of time, I learned how to kill by hand; became a superior marksman and came to understand the differences between daylight and nighttime tactics. It's them or us, plain and simple.\" \n\nKnowing that arguing was useless, she said, \"Your grandpa was quite a man.\" \n\n\"The best; I fall short in matching him in every way. If I can be just half the man he was, we'll survive this,\" he answered. \n\n\"He would be so proud of you, I know I am,\" she said sincerely. \n\n~~~~~ \n\nA sharp thump sent the grappling hook sailing through the darkness over the right bluff; a few forceful tugs anchored it securely and Palmer climbed the knotted rope. \n\nSweat dripping from his face, he climbed over the top and lay prone listening. Satisfied with the silence, he pulled the equipment pack up beside him and listened again. Cautiously he moved a few yards into the trees and paused, listening; always listening. \n\nWith slow deliberate movements he donned the suit, blending into the background. They'd have to trip over him to know he was there. He scanned the nearby area with night vision goggles, then using the infrared rifle scope, he scanned again. The Faraday cage had protected the useful surveillance electronics. \n\nTraveling counterclockwise along the horseshoe shaped bluff; move, scan, listen, wait, would be the repeated pattern; his senses on high alert, stealth his trusted and only companion. \n\nHe started to move and froze, hearing a cough. He scanned again, this time he saw him, partially hidden and sitting against a tree. Moving laterally the target came into view, exhaling quietly and slowly squeezing the trigger... pfoot! Palmer watched as he slumped to the ground. \n\nQuietly he circled the bluff, number two went down with a well-placed shot; number three died as Palmer pulled the knife out through his Adam's apple, and number four was dead before he hit the courtyard floor. ",
        "Stella wanted to scream, fearing it was Palmer, but remained quiet. To her relief, two quick flashes, a pause, and another quick flash, signaled he was okay. Adrenaline overwhelmed her and she sobbed shaking uncontrollably. \n\nPalmer returned to the courtyard laying out his plans for the expected morning assault and the night was filled with hurried activity. Before dawn, they were ready and waiting at the wall. \n\nChapter 12 \n\nThey heard them before they saw them; they numbered around two dozen, carrying various weapons; a ragtag, dirty and disorganized group of thugs, strolling casually and talking as though going to a party. \n\nStopping approximately ten yards from the gate; their leader, wearing a patch over his eye, yelled towards the wall, \"Anybody home?\" \n\nAs planned, Stella stood up and said, \"That's far enough, what do you want, One-eye?\" \n\nLooking around at his men, and smiling wickedly, he said confidently, \"Aren't you a pretty one! Me and the men here figured you'd be kind of lonely out here all by yourself and let us in.\" The thugs laughed uproariously. \n\n\"Over my dead body,\" she spat. \n\n\"Oh my, we like 'em feisty,\" he said with creepy calmness, and then shouted over his shoulder, \"Don't we boys?\" \n\nThe men behind him fist pumped the air, shouting their approval. \n\nStella played her part well and glaring at the group, said, \"You move one step closer and you're dead.\" \n\nAgain, speaking over his shoulder, One-eye said, \"I think she likes me.\" \n\nPretending her confidence was shaken, Stella said, \"If you know what's good for you, you'll move on.\" \n\nTired of the game and all pretense of civility gone, One-eye said, his voice dripping with acid, \"If you know what's good for you, you'll open the gate. I have men on the bluffs behind you aiming at your back.\" \n\nAs though she was offering them tea, she said smiling sweetly, \"Oh, you mean these men?\" \n\nSuddenly, tarps were jerked away exposing the enemy snipers. \n\nEvery thug froze; disbelieving the gruesome display, some gagged and one threw up. \n\nOne sniper hung on a crucifix, another by the neck, the third from his ankles and missing his head, and the last impaled on a spike. \n\nSpeaking whimsically, Stella said, \"Count Vladimir, that's Dracula to you morons, would be impressed! Don't you think?\" \n\nOne-eye took a step, saying, \"You fucking bitch! I'll... \" \n\nStella quickly dropped to her firing position as the group opened fire. \n\n~~~~~ \n\nLater that day, a mass grave was marked with a hand-written sign proclaiming; \n\nWarning! \n\nThis grave holds the bodies of 17 men attempting to take this compound. \n\nIf you have similar intentions, \n\nWe strongly advise against it. \n\nGoverning Council of \"Rainbows End\" \n\n~~~~~ \n\nAfter the evening meal, and up for twenty-four hours, the group was exhausted, urgently needing rest. Six or seven of the gang had escaped, so Palmer had Stella post staggered double watches around the clock. Thankfully, everyone else headed to their sleeping quarters. \n\nPalmer was almost asleep, when Stella said, \"I'm worried about Shelley; she barely eats, never speaks, contributes nothing and has ignored her chores. After the incident at the gate today, she has an almost... wild look in her eyes.\" \n\n\"Forgive me, I didn't notice,\" Palmer said. \n\n\"No forgiveness needed, you've been busy; she may be on the verge of a nervous breakdown,\" she suggested. \n\nPalmer sighed, and said, \"If that's true, she's a serious liability,\" and then added, \"Speak to DJ about it; make him aware of your concerns, and with his help, keep her under control any way you can. I trust your judgment.\" \n\n\"Do you think those men will be back,\" Stella asked. \n\n\"Not any time soon, the half-dozen that escaped are busy licking their wounds, but One-eye isn't the type to forget. His offended pride will fester like a cancer, and once he rebuilds his ranks, he'll be back. We need to strengthen the gate, but we'll talk about it in the morning; go to sleep.\" \n\n~~~~~ \n\nAt the morning meal, Palmer asked for everyone's attention, and said, \"I need six volunteers for a working party to help clear the trees and undergrowth along the bluff edges, this will eliminate the vulnerability we experienced with enemy snipers. Most of the work can be done by the bulldozer and farm equipment, but there will still be laborers needed. Let Stella know if you volunteer.\" Every member of the Coin raised their hand, and Palmer smiled thanking them. \n\n\"There's another need,\" Palmer continued, \"We need to brainstorm about how to fortify the gates approach, and the gate itself. I'll entertain any and all ideas, the floor is now open.\" \n\nMarshall was the first to speak up, saying, \"I was recently in Iraq, and heavy reinforced concrete blocks created a zigzag approach, prohibiting any high-speed direct line of attack.\" \n\n\"Excellent idea Marshall,\" Stella said, and then added, \"You'll be in charge of that project; I'll expect plans for manpower and materials you require in two days.\" \n\n\"Yes ma'am,\" Marshall responded. \n\nDaniel spoke up, and said, \"Two Russian RPG's should be placed up on the wall, allowing ready access; I'll build storage boxes for them, if that's okay.\" \n\n\"Another excellent idea, thank you Daniel,\" Stella said. \n\n\"Anyone else,\" Palmer asked. \n\nThe group was silent, and Stella spoke up, \"For those tending the garden, we're expanding it by one third for late-season planting. Start tilling the ground, add compost for fertilizer and mix it in, then we'll plant our new vegetables.\" \n\n\"One more thing,\" Stella said, \"This being late July, the days are getting hot; when fortifications are completed, there will be a 2 to 3-hour siesta in the afternoons. That is all.\" Everyone smiled at the announcement, including Palmer. \n\nOnce they were alone, Stella told Palmer, \"I spoke with DJ about Shelley; he said he'd take care of it. He also said that Shelley was a day school teacher; the extra kids should take her mind off her worries.\" \n\n\"Do you think we should give her responsibilities to someone else and make her full-time teacher/babysitter?\" \n\nStella smiled, and said, \"You're reading my mind, I'll do that.\" \n\nPalmer said, \"The weather allowing, Pavilion 2 can be her classroom between meals. Pad 0 during bad weather, unless she comes up with a better idea. Between you and me, discreetly find a replacement for her in case she's sick or wigs out.\" \n\n\"You're a clever man, Captain Sir!\" \n\nPalmer smiled, and said, \"If only that were true.\" \n\nChapter 13 \n\nIt was a beautiful evening, the smell of bread baking in the stone oven drifted across the courtyard; two women were carving a large turkey having had the misfortune of wondering too near the wall and shot. Fresh meat, once commonplace became a luxury; everyone was looking forward to the evening meal. \n\nPalmer strolled leisurely around the compound, Stella's arm tucked beneath his, and talking quietly. \n\n\"Palmer,\" she said. \n\nRecognizing her soft approach to asking something personal, he smiled and said, \"Yes.\" \n\n\"Do you love me,\" she asked delicately. \n\nSurprised, he thought, \"Doesn't she know? I thought it was obvious to everyone! Calm yourself Palmer, she knows, she just needs to hear it.\" \n\n\"I've loved you since that first night I held you in my arms,\" he answered. \n\nStella smiled, leaning her head on his shoulder, as they continued to walk. \n\nMarshall approached, and said, \"Excuse me ma'am, there's not enough ready mix to make concrete blocks, but I think I have a solution. During World War II, the Germans used hedgehogs for beach defenses; those star looking obstacles made of I-beams.\" \n\n\"Yes, I've seen them in films,\" Stella said. \n\n\"With your permission, I'd like to take the acetylene torch down to the junkyard and salvage sections of car frames to fabricate something similar. This will also require use of a portable generator, wire welder and cement mixer; anchoring them in the ground will use 100 of the 470 bags we have, taking a week or two to complete.\" \n\nStella thought about it, and then said, \"Permission granted; tomorrow take the deuce and a half with two armed guards for protection and be careful.\" \n\n\"Yes ma'am,\" Marshall replied and walked away. \n\nContinuing their walk, Stella asked, \"Palmer?\" \n\n\"Yes Stella.\" \n\n\"Tell me again.\" \n\nPalmer hip bumped her playfully, pulled her into his arms, and said, \"There's an old song, I don't know all of it, but I can remember a few lines, and he sang to her: \n\nIt's still gonna snow; it's still gonna rain \n\nThe winds gonna blow, on a cold winter day \n\nAnd I promise you now; you won't ever be lonely \n\nStella was astounded! A deep baritone presence cocooned them; the world faded away; she had never been sung to!! Her mind swarmed with his ability to lay bare his soul; no guile or pretense, no agenda or selfish motive. \n\nShe thought to herself, \"From doomsday prepper to elite sniper-killer to serenades in the courtyard; where the hell did you come from?\" \n\nAs he continued singing she looked him in the face, and while tears formed in her eyes, she fell in love all over again. \n\nYou're safe from the world, wrapped in my arms \n\nAnd I'll never let go; Baby, here's where it starts \n\nAnd I promise you now; you won't ever be lonely \n\nHere's a shoulder you can cry on \n\nAnd a love you can rely on \n\nFor as long as I live, there will always be \n\nA place you belong, here beside me \n\nHeart and soul; Baby, you only \n\nAnd I promise you now; you won't ever be lonely \n\nEnding the song and cupping her face in his hands; he brushed away a tear with his thumb, and said, \"Since the first night I held you in my arms, I've loved you.\" \n\nThe love in her eyes was all he needed to know, and he said, \"I lied too; Grandma paid for singing lessons and drafted my ass for the church choir!\" \n\nBefore she finished laughing, he added, \"Go-ahead! Laugh! Who do you think pimple faced Monica's father was? The fucking preacher!! \n\nStella laughed until she hurt. \n\n~~~~~ \n\nTurkey, fresh baked bread, vegetables from the garden; everyone ate to their hearts content. The mood was festive and yet subdued, quiet conversations and gentle laughter slipped through the warm night air on silent wings. \n\nPalmer and Stella lay on the old jeeps' hood and propped against the windshield. He listened quietly as Stella, staring at the stars, said, \"Strange how this new world feels; the former mundane and wearisome existence has been replaced with a new appreciation for life; dangerous, vibrant and alive, awakening a sense of belonging. \n\nI wouldn't want to go back to the old world now, and this surprises me. I was too busy to realize how inaccessible I had become; when I look around me, all I see is family. \n\nI love you my Captain; you stole my heart and brought it back to life; you're there when I need you, and you seem to understand me better than I do myself.\" \n\nTurning to face him, Stella pulled him close, her head on his chest, and said, \"I nearly died when the body fell from the bluff; my heart sank into terrible darkness thinking it was you. You give me strength and hope when I can't find any myself; offering an anchor among the chaos and comfort during the dark nights; I'm more alive than ever before.\" \n\nRaising her head and tilting it back to look at him, she asked with a questioning look, \"Does any of this make sense?\" \n\n\"I'm sorry, did you say something?\" \n\nPalmer let out a big \"Oomph!\" as she friskily punched him in the stomach. \n\nThe entire compound watched as Stella failed to escape the merciless tickling Palmer delivered; out of breath, her hair a mess and clothes askew before he finished her torment and then blushing from all the smiling faces. \n\nChapter 14 \n\n\"I can't find Shelley or Austin,\" DJ told Palmer, \"She was acting strange last night, complaining about how everyone could be so happy while hiding in a cave. I tried to reason with her, but she wouldn't listen and stormed off in a huff. After I got off watch, she and Austin were in their racks; this morning they're gone.\" \n\nPalmer, with DJ in trail, found Stella and brought her up to speed; search parties were organized and a thorough search of the compound began. \n\nWithin minutes, in an isolated section of the cave, they found Spike dead with multiple stab wounds, and nearby, Austin's body with his throat cut. DJ's wails of anguish echoed throughout the cavern as he clutched his son. \n\nStella pulled Palmer aside, and said, \"We caught her at the gate trying to escape; she's like a wild animal and it took four of us to subdue her.\" \n\n\"Where is she,\" Palmer asked icily. \n\n\"Bound to a pavilion post and howling like a maniac,\" Stella answered. \n\n\"Daniel and Nadine know about Austin?\" \n\n\"No, they're trying to calm Shelley down,\" she replied. \n\n\"We need to wrap the boy's body in something and bring him to the courtyard; there's unfortunate business to attend to.\" \n\n~~~~~ \n\nShelley struggled against her bonds, screaming incoherently, as horrified faces watched the bloodstained sheet concealing the boy's body being carried into the courtyard and laid gently on the ground. Daniel, Nadine and DJ kneeling beside the body, grieved softly. \n\nPalmer ordered that Shelley be gagged, and once he was able to be heard, he said, \"A terrible decision is forced upon us this day. Shelley Cooper has perpetrated an unforgivable act by murdering her son. It's also been learned, she believes the Coin has no right to be content with our existence, thereby posing a serious threat to the rest of us. \n\nWe've all previously agreed to abide by certain rules and the punishment to be imposed for breaking them, in this situation, banishment from Rainbows End.\" \n\nPalmer paused to let the gravity of his words sink in and was asked if there was another option. \n\n\"Yes,\" he responded. \n\n\"What do you mean,\" asked Marshall. \n\n\"If captured, she could reveal our location, defensive strengths and weaknesses. We've already been attacked by one group of thugs, we don't want another succeeding where they failed,\" he responded. \n\n\"What are you suggesting,\" asked another. \n\nWith a stern expression, Palmer answered, \"Execution.\" \n\nThe Coin, shocked by his statement, fell silent; all except for Stella. \n\nUnderstanding his reasoning, she took the opportunity to say, \"Think about it people; we can't let her stay, and in her condition, she wouldn't last overnight if banished. It's an appalling thought, but execution may be the most merciful for her and of critical importance to us concerning our future existence!\" \n\nThen, half under her breath, she added, \"I can't believe it's come to this, sounds like the fucking Nazi's.\" \n\nMurmuring could be heard throughout the crowd, and Palmer said, \"This decision will be voted upon by the adult Coin, everyone must vote and the majority rules. Stella will give each of you a piece of paper to be marked with your decision and then placed in a bowl for tabulation. You have one hour to discuss this among yourselves, then we vote.\" Stella, with a heavy heart, gathered the necessary materials and returned to the courtyard. \n\nWhen the time came, each citizen cast their vote and the results tallied; three votes for banishment, and the rest for execution. \n\nBound, gagged and blindfolded; Shelley was placed against the bluff wall. Palmer slid the bolt forward on his rifle, chambering a round; with practiced precision, he aimed for the heart and squeezed the trigger. \n\nIn a nearby meadow, two wooden crosses mark the graves of Shelley and Austin Cooper. \n\n~~~~~ \n\nLaying in Stella's arms and struggling with a troubled conscience, Palmer said, \"I couldn't ask anyone else to take her life, these were my rules from the start. \n\n\"You did what had to be done,\" Stella consoled. \n\n\"Everyone has been avoiding me like I'm some sort of heartless monster. I try to think of her as an enemy, but nothing seems to help. I can't imagine how DJ, Daniel and Nadine feel about what I've done,\" he replied. \n\n\"Listen to me Palmer; I talked with all of them, not just the Cooper's, but everyone. They're not avoiding you, they're just giving you space, understanding you need it. \n\nWe're all struggling with what happened today, and if we're angry at anyone, it's Shelley! She murdered an innocent child; her own child no less. How, under any circumstances, can that be rationalized? Would it have stopped there, her possibly poisoning our food and killing everybody? No, she posed an unacceptable risk and had to be dealt with.\" \n\nCradling his head in her lap, Stella stroked his hair, and lovingly said, \"Had you asked, I would have stood beside you as executioner.\" \n\nA tormented man clung to Stella, weeping bitterly until exhaustion claimed him. \n\nChapter 15 \n\n~ ~ ~ Somewhere in rural Pennsylvania ~ ~ ~ \n\nJulie Washburn, alone, and after days of walking, fell to her knees burning with fever and coughing. \n\n\"Too late,\" she thought during lucid moments and clinging to a tree, \"Cooking that shit was a bad idea, people dying within days. I should have left those fuckers as soon as the first one dropped. \n\nMitch, that brainless skank, said it was the flu; this is not the flu, some of those assholes were coughing blood and people don't cough up blood with the flu; this is something far worse.\" \n\nHer mind fogged by fever, she wandered aimlessly; her breathing labored, and muscles trembling with effort she staggered wearily forward. \n\nShe sensed being watched; dread joining her torment, she lurched a few steps and collapsed coughing violently. Her eyes refusing to focus and seeing blurred images, she asked herself, \"Are those dogs?\" \n\nAs the feral pack devoured her diseased flesh, death mercifully ended her screams of agony. \n\n~~~~~ \n\nPalmer awoke and Stella was gone; his body clock telling him it was midday, he struggled out of bed and went to the kitchen. \n\nChristine, newly assigned to kitchen duties, poured him a cup of hot tea, and while fixing him a bite to eat, said, \"More people arrived earlier today, they looked awful; told us things are going from bad to worse.\" \n\n\"How many,\" Palmer asked? \n\n\"Two groups; seven adults and two kids total,\" she answered. \n\nFinishing his meal, Palmer asked, \"Where's Stella?\" \n\n\"Busy as usual, probably the courtyard,\" she replied. \n\n\"Thanks Christine,\" Palmer said, and then left. \n\nHe found Stella under the pavilion listening to the short-wave radio. \n\n\"How you feeling,\" she asked? \n\nPalmer sighed, \"Drained, but I'll survive,\" and then asked, \"Any traffic on the airwaves?\" \n\n\"A plea for help from a group under attack in Texas, nothing we can do, so I didn't respond,\" Stella said, and then continued, \"We have new arrivals.\" \n\n\"Yeah, Christine told me,\" Palmer said, and then asked, \"Where are they?\" \n\n\"After feeding them, I ordered them to clean up and rest,\" she answered, and then continued, \"They told me people are dying like flies from violence, starvation and dysentery.\" \n\nPalmer sat beside Stella, leaning against the tabletop, and asked, \"How did they find us?\" \n\n\"One group wandered into the salvage yard and saw Marshall torching the car frames. Peter and Jacob, his guards, searched them for weapons and directed them here. The other group was wandering through the woods, heard the bulldozer engine on the bluff clearing trees and followed the sound,\" she answered. \n\n\"Who's running the dozer?\" \n\n\"Daniel, said he needed something to do; DJ's up there too,\" Stella said. \n\n\"What about Nadine?\" \n\n\"Doing laundry,\" Stella answered. \n\nShe watched him for a moment, appreciative of his concern, and said, \"They're good people Palmer; they understand you're protecting us, but they still need to grieve.\" ",
        "\"You're right, of course,\" and then he added, \"I don't know what I would do without you.\" \n\nStella answered, \"Go crazy, sleep alone, command by yourself and have no one to tease!\" \n\nPalmer smiled; she always knew how to make him smile. \n\n~~~~~ \n\nDaniel and Nadine were the last to arrive for the evening meal, and to Palmer's relief, Daniel shook his hand, and Nadine hugged him. Any tension, real or imagined, seemingly dissolved in those few moments. \n\nLooking at Stella, Daniel said, \"I know you said to clear 15 yards from the edge of the bluff, but 20 will include the area around the solar panels, eliminating possible fallen branches; I hope you don't mind.\" \n\n\"Not at all, it's a smart decision,\" Stella answered. \n\nDaniel continued, and said, \"Also, the rubble can be pushed back to the tree line, but I see a problem with this; it forms a hedgerow someone can hide behind. I suggest we cut what we can into firewood, then burn the brush.\" \n\n\"See that it's done,\" Stella replied, and then added, \"Enough shoptalk, time to relax and eat our meal.\" \n\nDJ was nowhere to be found and Stella didn't ask, figuring he needed time alone. \n\nChapter 16 \n\n\"Excellent work everyone,\" Palmer said, complementing the group, and then added, \"The past two weeks; clearing the bluff and the placement of approach barricades, has strengthened our defensive position considerably; not to mention the Coin now number 49 citizens.\" \n\nPausing for the applause to die down, he continued, \"With the increasing numbers; Daniel, DJ and Marshall have been appointed group leaders. Obey their commands and guidance without question; someday it may save your life. You will find your group assignments posted later today and meeting times with your group leader to receive your responsibilities within the group.\" \n\nStella then stood up alongside Palmer, and said, \"Most of you already know, Harvey bagged a pig yesterday. Since early this morning, it's been roasting in the pit and will be ready for tonight's meal,\" another round of applause, \"Our talented kitchen help will have cake and ice cream flavored drinks for dessert!\" The children cheered the loudest. \n\n~~~~~ \n\nPalmer and Stella, circling the courtyard, were walking off the evening meal and talking quietly. \n\n\"Palmer,\" she said. \n\nHe chuckled, answering, \"Yes Stella.\" \n\n\"When are we going to make love,\" she asked tenderly. \n\n\"When I can find an isolated spot,\" he answered readily. \n\n\"Isolated? What do you mean? Isn't our cubicle isolated?\" \n\n\"From prying eyes, yes; but I remember someone telling me, they snore when sleeping alone and known to scream when not,\" he teased. \n\nStella turned to face him, smiling devilishly with arms extended and wrists crossed, she said, \"If it will help, I'm willing to be bound and gagged, my captain.\" \n\nStella's eyes glistened with passion while Palmer removed the short piece of rope holding back his long hair, and skillfully cinched her wrists together; reaching behind her head, he removed the scarf holding her ponytail and stuffed it in her mouth. \n\nGrabbing the rope binding her wrists, he led her across the courtyard and past the questioning looks from the Coin toward the cave entrance, saying, \"We are not to be disturbed!\" \n\nThe courtyard exploded with laughter as Stella, wide-eyed and blushing was led captive through the door. \n\nChapter 17 \n\nJoshua Felder stood on the Burlington, Colorado courthouse balcony. Clenched fists on his hips and chin jutting into the air, it was reminiscent of the Italian dictator Mussolini. \n\nSpending hours in front of a mirror, his long-practiced showmanship became instinctive muscle memory; raising his hands into the air and looking skyward, he roared, \"God has torn the heavens asunder and given a sign; a glimpse of his bright and shining glory in the night sky; a burning bush beckoning his children, if only for a brief moment!\" \n\nLowering his arms, crossing them in front of his chest, and bowing his head, said with false piety, \"This lowly servant heard his voice and answered his call to lead his righteous warriors.\" \n\nWith outstretched palm, he indicated the bound city officials, and continued, \"These unrighteous before you have refused to bow to God's authority; like the pharaohs of old, with corrupt and hardened hearts; they covet power over Gods chosen.\" \n\nWith malice in his voice, and paraphrasing scripture to suit his needs, he snarled to his followers, \"But I say unto you, thou shalt not bow down thyself to them, nor serve them; for the Lord thy God is a jealous God, visiting the iniquity of the fathers upon the children unto the third and fourth generation of them that hate him.\" \n\nStabbing his finger toward his obedient flock, he bellowed, \"Yours is the birthright to wage a holy crusade punishing the wicked! Yours is the birthright to take back this land, crushing the ungodly that blaspheme his name, and restore his new heavenly order!\" \n\nShaking his fists in the air and spittle flying from his lips, he shouted, \"Rejoice in his judgment, and weep not, for yours is the birthright to rule his kingdom!\" \n\nCheers erupted from the maniacal followers; thieves, murderers, rapists and the religious fanatical, all reveling in the path of carnage wrought upon the unbelieving populace and thousands of dead in their cruel wake; history would compare Sherman's destructive march toward the sea as mere child's play. \n\nEnding his rhetoric, and with a nod of his head, a voice cried out, \"Ready..., aim..., fire!\" \n\n~~~~~ \n\n\"Daniels people are building the cold frame and will plant winter vegetables later today; DJs squad are cleaning the solar panels and port-a-potty's; Marshall's group have the watch today,\" Stella said, taking a seat beside him. \n\n\"Sounds like you have things well in hand,\" Palmer said, and then added, \"There's disturbing reports on the short-wave.\" \n\n\"What about,\" she asked? \n\n\"Two things really; one about a hard-hitting paramilitary unit out of Utah and moving east through Colorado, rolling over anything in their path; the other, about a viral outbreak in Pennsylvania,\" he answered. \n\n\"Shit, that's all we need! I'll talk with Patricia, her nursing experience will help us safeguard against possible contagions,\" Stella said, and then asked, \"Do we have any biological or hazmat suits?\" \n\n\"Yes, one of each, including filters and four air tanks,\" he responded, and then added, \"We also have a military diesel scuba compressor to fill the tanks, and before you ask, we have gas masks for everyone.\" \n\n\"Good, we may need them,\" Stella said. \n\nPalmer asked grinning, \"Have I ever told you how sexy you look when you're in command mode?\" \n\n\"I'll show you sexy when I'm in command tonight,\" she said mischievously while walking away and patting her ass. \n\n~~~~~ \n\nThe morning meal over and the Coin busy with chores, Stella pulled Palmer and the group leaders' aside, saying, \"I spoke with Patricia about what we can do regarding the arrival of the infected. She suggested quarantine outside of the compound, but this presents enormous problems in itself. \n\nThe world is dying, and we could easily be overwhelmed by their numbers; most viruses have an incubation period of 2 to 21 days, some as long as 90; and providing shelter, food and medicine would exhaust our supplies in no time, not to mention the daily risk of exposure. \n\nDepending upon the type of bacteria or virus, when exposed to the air, most organisms' die within 24 hours, but what kind of surface it's on and what the surrounding environment is like, for example, if it's hot, cold, damp or sunny, can extend this for several weeks.\" \n\n\"How can we tell if they're infected or just sick,\" Marshall asked? \n\n\"We can't, not without qualified laboratory technicians and a lab equipped for that purpose,\" she answered, and then continued, \"Most of the things she mentioned starts out like the flu and escalates from there, forcing the sick to stay with the infected is a death sentence. And what do we do with the dead? Burying them contaminates the ground for weeks possibly months, cremation requires fuel we can't spare, and who would want that grisly task? And would we all be willing to risk the possibly of bring something back into the compound? No, I think not!\" \n\n\"So, what do we do when they show up,\" Marshall asked? \n\nPalmer answered by saying, \"We're already at capacity; turn them away and offer nothing, no food, no water, remove any excuse to stay; we sure as hell can't shoot them and be stuck with disposing of the bodies!\" \n\nStella asked Palmer, \"How long until the Pennsylvania virus reaches us?\" \n\n\"Hard to say, if traveling by two or four legs, my guess would be a month or two,\" he responded, and then added, \"maybe as little as one week if traveling by feathered friend.\" \n\n\"Fuck me a running,\" Daniel whispered, and then added, \"I survived Vietnam, and now death by bird shit?\" \n\nThey all laughed at the absurd implication. \n\n\"Did Patricia say how long it would take to run its course,\" Palmer asked? \n\n\"A year, hopefully less,\" Stella replied. \n\n\"No more bush meat, we eat from our food stores,\" Palmer said, and looking at Stella, he continued, \"Wire or net the gardens, anything to keep the birds away.\" \n\nSlowly they dispersed, lost in their own thoughts. \n\nChapter 18 \n\nPalmer, after the morning meal and while addressing the Coin, said, \"I've been tracking reports of a paramilitary group for a couple of weeks; a self-proclaimed religious prophet, named Joshua Felder leads this group, calling themselves The Righteous. \n\nClaiming to be the sword of God's vengeance, they've plundered their way across Utah, Colorado, and are now moving into western Kansas. At their present rate of speed, they should arrive in our vicinity in about six to eight weeks. \n\nNumbering 100 to 150 strong, they're a force to be reckoned with and not to be taken lightly; Rainbows End could be seen as an easy source to replenish their ranks and needed materials. Marshall has an idea to help even the odds, I'll let him explain.\" \n\nMarshall stood, and said, \"The modern weapons of yesterday are gone, but we've not been thrown back to the Stone Age either. World War II weapons pounded the enemy into defeat, and they can do the same again today. The reserve armory, on the edge of town, contains these low-tech weapons. \n\nI think everybody can see where this is going; I need volunteers for a night raid on the armory and bring back enough firepower to kick this religious nut ass!\" \n\nWith all their lives at stake, every citizen raised their hand. \n\n~~~~~ \n\n\"The armory was totally unguarded and from what we could see, the town is dead; bodies everywhere,\" Marshall said, and then continued, \"Our only danger came from animals, we had to shoot two wolves; with the threats from humans disappearing they're ranging farther south. \n\nThe deuce and a half had no trouble jerking the armory doors off its hinges; I'm surprised it hadn't been raided before; then it was a simple matter of loading up anything worth taking and destroying the rest. \n\nTwo Humvee's with rooftop 50s, two 37 and one 57 mm antitank guns with over 200 rounds each, cases of hand grenades, BARs, M16s, shit piles of ammo, Claymore's and plastic explosives, det cord, firing caps, trigger mechanisms, boots, clothing, jackets, helmets, protective vests, radios and MREs; we hit the goddamn jackpot!\" \n\nThe Coin cheered with excitement at their good fortune. \n\n\"Good job people,\" Stella said, and then continued, \"It's late; we can inventory this later, get some rest.\" \n\n~~~~~ \n\nListening to the short-wave, as was his habit each morning, Palmer switched to loud speaker, allowing the Coin to gather and listen to the sobering broadcast, \"This is Cincinnati, Ohio; can anybody hear us? Repeat, this is Cincinnati, come in.\" \n\nKeying the mic, he answered, \"We hear you Cincinnati.\" \n\n\"I don't know how long I can keep transmitting, so just listen. My name is Doctor John Holcomb, a virologist with Bethesda Hospital in Cincinnati. We've identified a virus spreading out of Pennsylvania, a mutated strain of Ebola, virtually impervious to antibiotics with a 100% mortality rate for those infected, nothing seems to work. \n\nIt's spreading through the animal kingdom like wildfire and humans are faring little better. Thoroughly cook all meat. It spreads by ingesting tainted meat, exchange of bodily fluids or contact through open sores. It is not an airborne virus; I say again, NOT an airborne virus. \n\nIncubation is between 2 and 10 days, begins with flu like symptoms, culminating with severe hemorrhagic fever and death within two weeks. There are reports Akron has been decimated and looks like one gigantic funeral pyre burning the dead. \n\nSpread this message to those you can, and God help us all; over and out.\" \n\nThe Coin stood in shocked silence as Palmer switched off the speakers. \n\nStella, offering reassurance to the gathered crowd, said, \"I know you're scared, we all are; we have a fortress protecting us and a bunker to hide in, plenty of safe food and water, and if we adhere to the guidelines discussed over the last few days, we'll all get through this.\" \n\nChapter 19 \n\nThe next three weeks held a flurry of activity; with high ground the logical choice for artillery placement, the cannons were hauled up to the bluffs and positioned in shallow pit's offering protection. The right and left bluffs held the 37s and the 57 placed above the rear, all three could punish anything approaching with devastating firepower. \n\nDaniel and Marshall trained battery crews with a crash course on types of ordnance, their use, effective range, trajectories and dry fire exercises. Palmer instructed those needing training on care and firing of automatic assault weapons and proper techniques on throwing hand grenades. \n\nDrivers, gunners and riflemen were signed to the Humvee's, should enemy forces breach the compound, and as a final measure, weapons and ammo carefully hidden throughout the courtyard. \n\n~~~~~ \n\nPalmer jerked the short-wave headphones from his head, and paced around the pavilion floor, angrily shouting, \"Shit, shit, shit!\" \n\nStella, noticing his distress, came running and asked, \"What is it?\" \n\n\"Felder's got tanks, mother fucking tanks!\" \n\n\"Tanks,\" she exclaimed, and then asked, \"Where did he get tanks?\" \n\n\"Makes no difference; stole them or a military unit joined him. Point is, he's got tanks,\" Palmer answered worriedly. \n\n\"How many,\" Marshall asked joining them. \n\n\"They used the word tanks, meaning more than one. That's all I know,\" he replied. \n\n\"What's his location,\" Stella asked? \n\n\"The middle of Kansas, he just tore through Salena's defenses like it wasn't there. Hundreds of defenders are hanging on streetlamps throughout the city, and they're killing the people at random. That's not all; reports say, these fucking maniacs are eating them,\" Palmer cried! \n\n\"Eating them? Oh my God, why would they do that,\" Stella questioned? \n\nDaniel had been listening quietly, and then spoke up, \"Terror tactics; scaring the civilians into submission. The thought of being butchered and eaten is a powerful psychological tool; inhuman, but effective; heard it happened more than once in Nam.\" \n\n\"Guess that was something grandpa felt I didn't need to know,\" Palmer said, thinking out loud. \n\nStella spoke up, saying, \"These guys have to be eating off the land; domestic livestock or any available wild meat. Eventually, moving as they are, these shit bags and the virus will meet, and as ruthless as this sounds; we'd better not broadcast knowledge of the approaching virus and hope they didn't hear the Cincinnati report.\" \n\nDaniel says into the air, \"Never thought I'd be hoping for plague to save my ass!\" \n\n~~~~~ \n\nA soft knock in the middle of the night, and a voice saying through the door, \"Sir, you need to hear this; it's communication on the military channels.\" \n\n\"Be right there,\" Palmer immediately answered. \n\nMoments later all he could hear was unintelligible noise, when Marshall said, \"I've heard this before. Sounds like movement orders.\" \n\nDaniel asks, \"Felder?\" \n\n\"Not sure, but I don't think so,\" Marshall said listening intently. \n\n\"Don't think what,\" Stella asked entering the pavilion. \n\nMarshall answers, \"I was the Communications Shack Sargent at Divisional HQ in Riyadh Saudi Arabia, and I recognize the difference between battalion movement commands and the normal chatter down to tank squads.\" \n\nHolding his hands up, palms out and closing his eyes, he asks, \"Do any of you hear a faint background chatter? Listen!\" A dozen people fell silent, all eyes on Marshall. \n\nUsing his hands, as though a conductor of music, he helped them recognize the almost imperceptible rhythms in the background, and explained, \"The background rhythm sounds like CB lingo used by truckers, not military; different rhythm, different forces; both using military frequencies.\" \n\nPalmer had a gut feeling Marshall was right, and said, \"The weaker background noise is possibly Felder, they're talking like truckers; which means, they're further away?\" \n\n\"Not necessarily; transmission strength is the key factor, while whether, terrain, buildings and trees can degrade radio signals; triangulation is the only way to be sure and we don't have that kind of equipment,\" Marshall answered. \n\n\"So, this more military rhythm pattern we all heard is legit military,\" Stella asked? \n\nMarshall answered, \"Makes more sense than a whole battalion going rogue all at once! A small group, yes, but not these many servicemen; something like this needs logistical support and supply; someone in control of a US military force is giving these orders.\" \n\n\"Can you tell from what direction,\" Daniel asks. \n\n\"I can't tell you what they're saying, but with a military radio and they keep broadcasting? I can monitor signal strength from the bluffs and give you a general direction,\" Marshall answered. \n\n\"Do it,\" Palmer commanded, and then turning to Stella, said, \"If Marshall can point in a direction; we'll need to send someone to guide that military battalion here, because this is where Felder is coming. And when they ask, how do I know he's coming here? Tell them, because I'm going to sweeten the pot and wound this magnanimous pricks enormous ego!\" \n\nStella loved his courage, but this truly scared her. Challenging Felder would attract his full attention, and after what he did to Selena Kansas, his bloated pride would seek lethal confrontation. \n\nPalmer walked around the Coin as troubled faces stared back, fear and hesitation evident in their eyes. \n\n\"What,\" he asks disbelievingly, \"You want to hide,\" his fierce eyes locking with those brave enough to look back, if only momentarily. \n\nWhile weaving throughout the Coin, he asks, \"You prefer to live under their thumb? Pay tribute and wallow in our sorrows from the cruel world they bring?\" \n\nThe intensity in his voice shattering the silence, \"Martial Law is better than NO LAW,\" he stressed vehemently, \"These butchers have already killed, raped, maimed and enslaved thousands; they have to be stopped, and stopped now! \n\nI refuse to live under their rule, bow down and ignore their atrocities; to watch the rebirth of medieval brutality as human life approaches worthlessness. \n\nMy grandfather grew up in a world consumed by war; years later, the true and dreadful cost of that war revealed itself and became horribly clear; 80 million people died because of people like Joshua Felder. \n\nBack then, there were three; Hitler, Tojo and Mussolini. All of them had a cob up their ass, thinking they had something to prove, had scores to settle, needed someone to punish. 80 million people died because we, as Americans, hid behind our wall of oceans; isolated and seemingly protected. \n\nIt's not our war to fight we said, while people died. But that's over there, not here we said, and more people died. Of those 80 million, 50 million were civilians; over half of all casualties; callously considered collateral damage. If our children and grandchildren are going to have any kind of chance; we'd better stop Felder's special kind of madness now!\" ",
        "No one spoke against him; all were alive because of him. His uncanny ability to accurately assess situations proved to be a gifted insight they all depended on. Willing to follow his lead, they nodded their head in agreement. \n\nThe Coin had just declared war! \n\nChapter 20 \n\n\"How big of a thorn do we plan to be in Felder's side,\" Daniel asked pouring cups of coffee, and handing them out. \n\n\"A big one,\" Palmer answers. \n\nWith a broad toothy grin, Daniel asks, \"Is there any other kind?\" \n\n\"What would sting his pride the most? A full-scale frontal attack would be suicide. Hell, he wants that,\" Palmer said, running his fingers through his hair. \n\nQuickly turning toward Stella, he says, \"His drug of choice is power; that feeling of godly invulnerability.\" She recognized the devilish mischief in his eyes as he slowly grinned searching her face, and he then asked, \"What would bruise that self-righteous bastards' ego the most?\" \n\n\"Blister his pride with an insult he can't live with; offend his ego,\" Stella answered confidently, knowing he was thinking the same thing. \n\nWinking approval at her, and still smiling, Palmer said, \"Exactly! Steal something from him; make him look something less than godlike.\" \n\nWhile looking around at the Coin, he continued, \"He doesn't give a flying fuck about God; he only gives a fuck about a self-proclaimed demigod named Joshua Felder! Our audacity to steal from him will drive his ass insane with rage,\" he laughed. \n\n\"We can't attack him and take a tank, but with a hit-and-run Humvee raid; we can kill a few sons of bitches, and having got their attention, be seen hauling something out of camp. They'd be more inclined to follow us back here, don't ya think,\" he asked sarcastically? \n\nScratching his head and laughing, Daniel says, \"Yeah, Captain; pretty sure that'll piss him off to no end..., anything special in mind?\" \n\n\"Artillery; if all else fails, destroy as much as possible,\" Palmer answered, and then added, \"We go in fast and heavy, explosive satchels, RPGs and hand grenades; bloody his nose and embarrass him. He'll come for us alright; his injured pride will demand vengeance,\" Palmer predicted coldly. \n\n\"History may be another reason for him to head this way,\" Stella said suddenly. \n\n\"What makes you think that,\" Daniel asked? \n\n\"Gallatin,\" she responded, eyes alive with flashbacks of a different world and college history courses. \n\nPalmer asked, \"What does Gallatin have to do with it?\" \n\n\"Gallatin is important in the Mormon religion; believe it or not, nearby is a place they believe to be the site where Adam and Eve lived after being expelled from the Garden of Eden. \n\nIn 1838, when about 200 people attempted to forcibly prevent the Mormons from voting in the county's first election, a skirmish ensued, called the Gallatin Election Day Battle and is often cited as the opening event of the Mormon War. \n\nThe subsequent years saw the flight of Mormons to the Utah territory, there they could practice slavery and polygamy under the leadership of Brigham Young,\" Stella answered, and then added, \"It's an old festering Mormon belief, that Gallatin was stolen from them, and I'm confident Felder intends on reclaiming the Promise Land!\" \n\n\"A walking encyclopedia and beautiful to boot,\" Palmer complemented, bowing as if before royalty. \n\nPlaying along, Stella tapped him on the shoulder, and said regally, \"You may arise; my Captain-of-the-Guard,\" and then explained, \"English major; History minor, the history seems to be paying off, finally.\" \n\n~~~~~ \n\nMarshall returned from the bluffs, and said, \"The battalion is south of us; Felder is east, and judging from signal strength, both are moving this way.\" \n\n\"Do you think the battalions from Fort Leonard Wood,\" Daniel asked? \n\n\"That would be my guess,\" Marshall replied. \n\nStella asked, \"Is that important?\" \n\nMarshall replied, \"They train Combat Engineers on construction and demolition of buildings, bridges, roads, fortifications, clearing and laying mine fields, and most importantly, battalions have tanks, artillery and anywhere between, 300-800 trained soldiers. I may know someone in the battalion and should be the one to contact them. I'll fill them in on specific details in route, and radio back with an ETA.\" \n\n\"Leave now, take the Jeep; Peter, Jacob, go with him for protection,\" Stella commanded. \n\n\"Yes ma'am,\" they responded and departed the group. \n\nChapter 21 \n\nNear the Kansas-Missouri border, multiple fires dotted the landscape as Felder's army set up camp for the night. An early morning raid on the Fort Leavenworth prison complex was risky but had paid off handsomely; a northern threat had been eliminated and his forces swelled with freed prisoners, weapons and supplies. \n\nFelder and his commanders surrounded a large table covered with maps planning their next move; a bound prisoner was brought before them and thrown to his knees. \n\n\"What's the meaning of this,\" Felder asked? \n\n\"He was found sneaking around the camp Sir,\" a guard answered. \n\n\"And what brings you here,\" Felder asked the prisoner. \n\nDirty and shredded clothes hanging from his body, having been beaten severely by his captors, One-eye answers fearfully, \"We were attacked by a group southeast of Gallatin; only asking for food when they opened fire on us,\" hanging his head and pretending to mourn, he woefully continued his ruse, \"those bastards killed innocent people, my wife and son among them,\" gathering steel to his voice, he concluded, \"they don't deserve to live.\" \n\n\"And only you escaped,\" Felder said suspiciously. \n\n\"No,\" One-eye responds, and continuing with deceitful malice, \"Six of us escaped, two were wounded and bleeding; a pack of wolves or coyotes, I don't know which, caught us by surprise near St. Joseph. I could hear screaming all around me as I crashed through the woods.\" \n\nFelder asks, \"This group near Gallatin, how many were there?\" \n\n\"I could only see one woman, the rest were hidden behind a defensive wall of stacked cargo containers and from the way they were cutting us down, my guess is a couple dozen or more; I can show you where they're at.\" One-eye submissively offered through his bloody lips. \n\n\"A lone defensive position to be taken near Gallatin, a couple dozen against the forces of the Righteous,\" he thought, and then smiling wickedly, \"What are the odds of that?\" \n\n~~~~~ \n\nThe Coin, breaking from battle preparations, gathered under the pavilions for the noon meal, when suddenly a small engine could be heard overhead; to avoid being an easy target, the group scattered. \n\nPalmer, looking skyward and walking into the open, saw a fixed-wing ultralight circling overhead. The pilot waved, indicating he was a friendly, and pointing to an object in his hand, dropped it and headed south. \n\nPalmer picked up a small canister containing a scribbled message, which read; \n\nRadio silence imperative; Felder successfully attacked Leavenworth; 700+ rebel forces camped on prison grounds; Military ETA: dawn. \n\nPalmer handed the note to Stella, and leaving out the information about Felder's strength, told the Coin, \"Marshall made contact; they'll be here at dawn.\" \n\n\"So, what's the plan,\" Daniel asked after reading the note. \n\n\"A raid on Felder requires ten people; five in each Humvee; driver, gunner and three tossing explosives,\" Palmer said, and then added; \"We swing around his southern flank and make a dawn approach from the West.\" \n\nFelder's recent increase in forces caused Palmer to reconsider his original plan, and commanded, \"Forget stealing anything, I'll not risk lives over that; our mission is to take out as much equipment and personnel as possible; thus, drawing him here. We can't leave the same way we came in; they'll be awake and have a gauntlet ready for us; so, we blow straight through, tearing them a new ass hole as we go; any questions?\" \n\n\"Yeah, who goes,\" Daniel asked smiling. \n\nStella spoke up, \"I'm going!\" \n\n\"No,\" Palmer said forcefully, and then calmly added, \"I need you and DJ directing the Coin and finishing battle preparations. Daniel, pick five from your squad; I'll take five from Marshall's. In the meantime; we eat, prepare the Humvee's and try to get some rest for the night ahead.\" \n\nChapter 22 \n\nSkirting around the south side of Kansas City, the Rainbow Raiders turned north near Lawrence, eventually hooking up with Route 92 toward Leavenworth. With a short run up 20th Street, they spotted Felder's forces camped on the prison grounds. Rushing the adversaries' position from the west side, pandemonium erupted as they opened fire on the unsuspecting rebels. \n\nRPGs streaking toward armored targets, parts flying everywhere from the thunderous detonations; satchel charges rupturing fuel trucks and sending mushroom shaped fireballs skyward; ammunition trucks exploding violently, jetting lethal shrapnel in all directions; grenades flinging shattered bodies into the air, and all the while, the two 50 caliber rooftop weapons ripped a deadly swathe through the astonished enemy. \n\nResistance stiffened as they arced around the north side of the enemy encampment; small arms fire peppered their vehicles while tank rounds exploded all around them, killing some of their own men. \n\nRacing southeast across the flat terrain and narrowly avoiding obstacles, Palmer took a round in his shoulder and continued to fire as blood poured from the gaping wound. \n\nThey bounced across ditches and over curbs, heading for the Missouri bridge crossing. Accelerating east on Route 92, Daniels Humvee took a direct hit, and exploding from the devastating impact. \n\nAs the sun peaked above the horizon and speeding across the bridge, Palmer watched the Humvee's demoralizing flames billowing upward knowing that no one survived, he collapsed. \n\n~~~~~ \n\nThe Coin watched in silence while the battered Humvee limped into the courtyard; the overheated engine coughed and sputtered, steam spewing from its radiator. Visible everywhere; hundreds of small arms impact dents, blackened parts hung twisted and mangled; the honeycomb tires nearly unrecognizable. \n\nStella rushed to the mangled vehicle and opened the driver door. Gasping at the carnage inside, she asked DeeDee, the driver and splattered with blood, \"Are you hurt?\" \n\n\"I don't think so,\" she answered, and then added, \"The others are bad, please help them.\" \n\nStella commanded the Coin, \"Get these people out of the vehicle and inside! Patricia, take care of the wounded; use Pad zero as a triage.\" \n\nTurning back toward DeeDee and helping her from the vehicle, Stella asked, \"Where's Daniel and the others?\" \n\n\"They didn't make it, their Humvee exploded when hit by cannon fire,\" she groaned tearfully, and then said, \"Palmer has lost a lot of blood.\" \n\n\"He's unconscious, Patricia is doing all she can for him; right now, we need to get ready for Felder,\" Stella answered, worriedly watching Palmer being carried into the cave. \n\n\"Where the hell is that battalion,\" Stella wondered aloud. \n\n~~~~~ \n\nHorn blaring, announcing their approach, the Jeep roared through the main gate with Marshall and Peter inside. \n\n\"Where's Jacob,\" Stella asked Marshall. \n\n\"With the battalion, guiding them here; they've been delayed and will arrive in about three hours,\" Marshall answered. \n\nStella shook her head in disappointment, and said, \"I hope we can hold out that long.\" \n\nMarshall pulled Stella away from the others, and quietly said, \"There something else; over the past two days, the battalion has been picking up weak radio transmissions from this location. They think there's a rebel collaborator here or nearby. Has anyone been acting differently or suspicious?\" \n\nStella's forehead furrowed in thought, but slowly, something came to the forefront, and she said, \"At the time, I gave it little thought, but now that you mention it; I saw DJ over by the bulldozer earlier and appeared unaffected when his father didn't return from the raid. I figured he didn't want to deal with it at the moment, but still it seemed strange.\" \n\n\"Daniel's dead,\" Marshall asked? \n\n\"Yes, and everybody with him in the Humvee,\" she answered, and then added, \"Follow me.\" \n\nStella led Marshall to the bulldozer, and the results were blatantly clear; it had been sabotaged. \n\n\"Grab some people; search the compound and find DJ,\" Stella ordered. \n\n~~~~~ \n\nHands bound, and weapons pointed at his back, DJ was brought before Stella. \n\nConfusion in her eyes, she asks, \"Why?\" \n\nWith an eerie coldness to his voice, and looking at the Coin standing nearby, he answered, \"My wife, son and father are dead because of this place, you're no better than Felder. You use people for your own agenda, and exclude those that don't follow your rules,\" and then shouted with rage, \"That was my wife Palmer murdered! Wasn't my son enough? Now my father is dead because of him, where will the Rainbows madness end?\" \n\n\"So, you betray us by spying for that sadistic bastard and sabotaging the bulldozer; do you actually think he'll let any of us live,\" Stella asked? \n\nDJ sneered, and said, \"We'll all die under Palmers rule anyway.\" \n\nStella pulled her pistol from its holster, and without hesitation, shot DJ in the head, and while looking down at his lifeless body, said, \"For your treachery, your wish just came true,\" walking away, she added, \"Hang his ass on the wall; I want Felder to see what happens to treasonous spies.\" \n\nStella whorls at the sound of a gunshot; not five feet away Nadine stands with a raised kitchen knife, ready to strike; slowly, an expression of bewilderment appears on her face; blood extending across her breasts and staining her blouse, she drops the knife and moving her mouth, as if to speak, she falls face first to the ground. \n\nMarshall holstered his weapon and Stella nodded, acknowledging his actions, and says soberly, \"Hang her with him,\" then loudly commanded, \"Make ready your positions! And remember; we fight for our children, our home and our future!\" \n\nChapter 23 \n\nFelder rolled into Gallatin and was filled with righteous indignation; no cheering crowds lining the streets to welcome the conquering hero; instead, burned-out buildings and bloated, half eaten bodies were scattered everywhere; his exaggerated expectations of the \"Promise Land\" lay in utter ruin. \n\nRage boiled in his veins, and he bellowed, \"Rainbows End is responsible for this unforgivable desecration against this most holy sanctuary; let us forever remove this evil stain from the land that God has given us!\" \n\n~~~~~ \n\nThe fixed wing ultralight buzzed above the compound and dropped a message canister, the scribbled note saying, \n\nFelder advancing through salvage yard; hold on, military near, good luck! \n\nMaintaining radio silence, Stella moves among the Coin offering words of encouragement and last-minute instructions, then takes her position on the wall. \n\n~~~~~ \n\nSuddenly, the opposing forces simultaneously roared into action, the sound momentarily startling the Coins defenders. Explosions rocked the compound but missed vital defensive emplacements. \n\nUnder Marshall's direction, the 57 mm fired armor piercing rounds at visible heavy targets, and the two 37s fired proximity fused projectiles, the air bursts raining hot shrapnel down upon the advancing rebel troops. \n\nWith the exception of the recent Humvee raid, small arms fire had been the rebels' only opposition; now, Felder's undisciplined forces were taking heavy losses and faltered under the Coins devastating artillery barrage. \n\nThe accuracy of the 57 mm improved with every round fired; delivering two direct hits, one Patton M48 medium tank burst into flames, the tanks exploding munitions violently tossing the multi-ton turret high into the air. \n\nDetermined and despite the heavy losses, Felder thunders his deep throated and evilly embellished theatrical version of \"Tamerlane's Curse\" into the air; \n\n\"Whomever opens my tomb, shall unleash an invader more terrible than I \n\nAt your gates, I will heap your skulls \n\nWhen I rise from the dead, the world shall tremble! \n\nYe ghosts of yesterday, not one weeps.\" \n\nAlthough she couldn't hear him, Stella was watching Felder through range finding binoculars and radioed Marshall, breaking radio silence she said, \"Felder, 11 o'clock; range, two six seven oh yards,\" and then sarcastically adds, \"Make him understand; that stopping and standing in a Jeep, might be a bad idea!\" \n\nMarshall answers laughing, \"Copy that!\" \n\nA few seconds later, the 57 mm cut loose; the fragmentation air burst happening above and just to the left of Felder's position; it didn't hurt him, but it sure as hell got his attention as he quickly sat down and ordered his driver to hastily move his ass anywhere else but where it was. \n\n\"Ah..., Almost better than sex,\" Marshall breathes playfully into the radio. \n\n\"Jesus, you're as bad as Palmer,\" Stella laughs, and then quickly adds, \"Christine likes you, you know?\" \n\n\"Now, who's being bad, little miss mother-hen; gotta go,\" his battery team refocusing on the more critical targets and back to armor piercing munitions. \n\nStella laughed at his jibe, yet blushed at its truthfulness; \"Mother-Hen,\" the epiphany touched her deeply. \n\nIn an instant of fast forwarding images, she saw her own transformation run full circle; from rural Arkansas roots, to reporter for the third largest media distribution conglomerate nationwide, back to rural Missouri, and now, a Mother-Hen? She laughed at herself. \n\nAnother quick look through the binoculars, Stella saw the rebel forces spreading out from behind the protection of the approaching tanks and entering the trees 1200 yards away. \n\nKeying the mic, she whispers the planned trigger word, \"Treetops!\" All three Rainbow cannons concentrated on the trees, and the resulting jagged death claimed dozens, but the compound was shaking under Felder's fierce attack. The wall had taken two close hits, jarring their back teeth, but holding together. \n\nBeing peppered with small arms fire; another quick look, and Stella ordered the 50 Cal to open up, immediately joined by the entire walls automatic assault weapons. \n\nThe noise was deafening; time stops, as your entire body shakes from nearby eruptions, yet you conquer your instincts to run; pull a trigger with deadly resolve; knowing this wasn't a choice, but a necessity. \n\nPick your target; don't forget to lead; three round bursts, if it falls, you're done, move on. \n\n~~~~~ \n\nMarshall directed the 37s to fire high explosives at the closest two tanks and disable their tracks, while the 57 hammered on a third and larger tank. He was bleeding, and couldn't hear out his left ear, shells dropping danger-close all over the bluff. He thought to himself, \"If this were trained enemy troops, this would already be over and we'd all be dead.\" \n\nBoth 37s were working on the second tank, one already disabled, when the left bluff battery took a direct hit, causing the wall defenders to cover up while being showered with debris and Coin body parts. \n\nThe 57 turned toward the disabled tank and fired; it glanced off the turret and killed a tree. \"Adjust and fire when ready\" Marshall ordered. The disabled tank fired first, blowing the gate off its hinges and into the courtyard, and then its crew died, from the 57s shell, microseconds later. \n\nFelder's men rushed the gate; hundreds of them, all of them screaming; the compound is taking a beating, shaking under an onslaught of unstoppable mindless savagery. \n\nStella fears they've lost, unable to stop so many and being overwhelmed by brute force. No less savage than in ancient times, stealing herself for the primal hand to hand combat sure to come, and then the darkness. As she throws all the switches, detonating the walls hidden Claymore's, she wonders, will anyone weep? ",
        "Chapter 24 \n\nThe sound of their approach, hidden by the ongoing battle, caught both sites by surprise; Stella thought they were dead, Felder thought he had squashed a fly. \n\nDevastating battalion artillery fire, walked from the front of the Rainbow wall out toward the tree line. Nothing can hide from this kind of death; fresh from a training facility and itching to take Felder to school; they did just that! \n\nBefore her incredulous eyes, Stella watched the landscape turn alien; hostile blood-soaked remains testified of where hundreds used to live moments before, now lying shattered beyond recognition. \n\nThe earth shook under the heavy impacts; and the wall, vibrating so hard from concussion shocks, twisted and slightly warped, settled deeper between the bluffs. \n\nWhen the dust settled, the Coin, badly shaken but curious, peeked over the wall; the rebel foot troops were running in every direction, panic ruling the moment. \n\nWhen Felder thought it couldn't get any worse; four heavily armed Main Battle Tanks broke clear of the trees, rendering his heaviest weapons destroyed posthaste! \n\nFour turret-mounted 50 Cals cut up the bewildered rebels by the dozens, rules of engagement be damned; this was destruction of evil! Hundreds of soldiers walked among the rebel wounded, their pleadings cut short by bayonet. You didn't have to like it, but it had to be done, finish it and make it a \"Non-Threat\". \n\nFelder's driver, Quinn, started to turn the Jeep around, intent on fleeing, and was unexpectedly dragged from the vehicle, screaming for mercy; trembling hands in the air, he prayed; head bowed and eyes tightly squeezed shut; expecting to die any second. \n\nFrom the other side of the Jeep, he heard a voice; it had lost its ability to command, and the once godlike arrogance, turned into begging. \"Don't kill me, please, don't kill me,\" Felder pleaded. \n\nHis forces decimated, only Quinn and himself alive, surrounded by his enemies and deprived of a destiny of position and power; Felder felt confused, and thought, \"Abandoned by God; laid bare and conquered, forever denied the \"Promise Land,\" how can this be?\" \n\n~~~~~ \n\nThe Coins weary eyes peered out of dust streaked faces, battle shocked and strained. They had lost 13 people; five inside Daniels Humvee, three on the bluff gun, two on the wall and the remaining three Raiders from Palmer's Humvee, didn't make it. \n\nThe battalion surgeon told Stella, \"Patricia did a fine job patching Palmer up; we gave him 2 pints of blood, he's O negative, a universal donor by the way. With your permission, I'd like to type all of you, and ask your healthy people to give back.\" \n\n\"No problem Doctor; I'm sure they'd be more than willing,\" she offered, and then asked smiling, \"He's hardheaded, what should I make him do?\" \n\n\"Rest and finish the antibiotics. I gave him something to sleep; why don't you get cleaned up and eat something, he'll wake up in about four hours,\" the surgeon answered. \n\nStella washed up, changed clothes and fixed her hair in a long thick braid down her back. Too worried to eat, too tired to sleep, she sat holding Palmer's hand; watching him breathe and waiting for him to wake up. \n\n~~~~~ \n\nA whisper of consciousness begins with Stella's voice above him, then closer, flooding him with her smell. He gripped her hand tighter, struggling slowly to the surface he saw her face; angelic and loving, but a certain innocence gone in those aqua eyes; forever changed. \n\n\"We've all changed, forced into an altered existence; poles apart from the former and gentler world,\" Palmer thought, and then, remembering her words while leaning on the Jeep's windshield, she had said, \"I wouldn't want to go back to the old world now, and this surprises me.\" \n\nHe asks her, \"Want to go back to the old world now?\" \n\nTears in her eyes, their faces only inches apart, sucking in her lower lip, she smiles and shakes her head no. A world without him is unthinkable; she's alive in this world; set free, yet bound to this magnificent man. \n\n\"Do you want to know something,\" he asks, lost in her eyes. She smiles and nods her head yes. \n\nIn a pouty voice, he says, \"My lips are hurting, and you have just the medicine I need, can you...,\" \n\nKissing him deeply, and noticing his arousal, she says while looking at the tented sheet, \"You, big boy, get no attention,\" and turning seductively to look Palmer in the eyes, continued steamily, \"While you must rest! \" Palmer groaned, his head flopping to his pillow in playful defeat, causing Stella to laugh and feel a little better just being near him. \n\nShe loved his playful ways of making her feel truly desired, hell, even lusted after! What woman doesn't? But this man connected with her on many different levels; his fun-loving loyalty, seemingly unlimited intelligence, and most of all, for all the nonsensical and crazy reasons you could think of, their personalities meshed seamlessly: she was part of him, and him part of her. \n\nWhatever this new world was, it was this world they loved and could make an impact on how it survives. \n\nChapter 25 \n\nThe cavern lights illuminated pad zero, all attention riveted there; the Coin, left in silenced semi-darkness, and watching from the perimeter. In its center, bound and under guard, Felder and Quinn stood before Lieutenant Colonel Michael Davis, Battalion Commander. \n\n\"This is a military court-martial, governed by the Uniform Code of Military Justice, not civilian laws,\" Colonel Davis began, opening the proceedings, and then looking at Felder and Quinn, said, \"Do the prisoners understand?\" Both nodded yes. \n\n\"You are prisoners of war, and as such, you have very limited options, and fewer rights. Do the prisoners understand?\" Again, they nodded yes. \n\nReading from his notes, he says, \"The presiding commander, and that would be me, has preferred serious charges against you. Treason, by attempting the overthrow of the government of the United States, and horrendous crimes against humanity, how do you plead?\" \n\nNeither Felder nor Quinn spoke, looking at the floor, and understanding there was nothing they could say. \n\n\"I'll take your silence as a guilty plea,\" and then squinting into the darkness, he asks the Coin, \"Any of you have something you want to say to the prisoners?\" \n\nFrom his wheelchair, too weak to stand, Palmer says, \"I don't have anything to say to these prisoners Sir, but I have something to request from you, from all of you.\" Stella rolled him into the light, and looking around at the darkened faces, he continued, \"What we do here today, defines what we become in the future; hard choices for hard times, we all agreed. But why should we, the survivors, tell their misguided story, let one of their own confess to the world of the evil destroyed here today!\" \n\nLooking at the Colonel, and pointing at Felder, he says icily, \"For his crimes, this one dies,\" swinging his arm and pointing at Quinn, Palmer requests, \"Let this one live, Colonel. Let him tell this story; a shunned and exiled reminder, lest we forget.\" \n\nStraightening his back, the Colonel asked the Coin, \"All those approve, say aye.\" The response was overwhelming approval, and sticking to procedure, the Colonel asked, \"And those that disapprove, say nay.\" No one answered. \n\nTurning his attention back toward the prisoners, the Colonel said, \"The charges against Mister Quinn are hereby reduced and subject to disciplinary action. Mister Quinn, you are hereby sentenced to 30 lashes and after medical treatment, banishment to the countryside. Take the prisoner away.\" \n\nFelder collapsed to his knees under the Colonel's gaze, and to his shame, his bladder emptied. His glorious visions of power vanished; having believed a perverted vision that deceived the owner, his empty eyes stared from the shell that remained. \n\nTo be a madman, was this his destiny? \n\nFrom his neck he swung, the ancient curse slowly fading in his ears; \n\nWhomever opens my tomb, shall unleash an invader more terrible than I \n\nWhen I..., rise from the dead..., the world... shall... tremb... \n\nTied to a whipping post, and forced to watch Felder's execution, Quinn shuddered violently under the brutal whip. Bloody strips of torn flesh, one after another appearing instantly under the lash; he hung limply by twelve, passed out at seventeen and covered in vomit; buckets of cold water revived him twice as the beating continued. \n\nForty-eight hours later, his deepest wounds stitched closed and three days food supply, Quinn, feeling like a leper and barely able to walk, was exiled. \n\n~~~~~ \n\nThis winter was cold, causing Palmer's shoulder to stiffen, snow every other week delayed repairing the gate; in their cubicle, Stella was stretching his shoulder muscles and rubbing him down, waiting for him to speak his mind. \n\nShe knew, she always knew when something troubled him; because she watched him, worried about him, depended on him, loved him; so, she waited until he felt the need to share, he always shared. \n\nStopping the rubdown, he gently took her hands and pulled her to his lap, saying, \"I'm sorry..., I let you down.\" \n\nGathering him into her arms, she crushes him against her breasts and asks alarmed, \"Whatever makes you think that?\" \n\n\"I let you fight alone,\" he says with regret in his voice and close to tears. \n\n\"You did no such thing,\" Stella loudly exclaims, and then added, \"I wasn't alone; I was with family!\" \n\nHer answer made him feel better and he asks, \"Forgive me?\" \n\n\"Yes.\" \n\n\"Love me?\" \n\n\"Always,\" she laughs. \n\n\"Scratch my back?\" \n\n\"If you scratch mine,\" she coos wickedly, enjoying their game. \n\nChristine clears her throat, politely announcing her presence, curtsied and teasingly asks with an English accent, \"If it would please the royal couple, supper is being served on pad six,\" curtsied again, and then left giggling like some castle winch. \n\nPalmer rolls his eyes, saying loudly to Stella, but mostly for Christine's benefit, \"Marshall's creating a whole new creature out of that once innocent woman.\" \n\n\"Who said she was innocent,\" Stella responded just as loud, while Marshall's laughter joined Christine's in the distance. \n\nYes, she was right. He hadn't left her alone; he had left her with family. \n\n~~~~~ \n\nDaniels cold frames, his final gift and working their magic, provided fresh vegetables nearly all winter and conserved their canned stock for leaner times. \n\nThe Battalion, moving on, and now headquartered at Fort Leavenworth, maintained and policed martial law; eventually posting a squad in the repaired Gallatin Armory. They usually stayed at Rainbows End, a home away from home and lovingly dubbed, Outpost Rainbow. \n\nAfter expounding its merits, and at Stella's suggestion, the Colonel made it official, closing the Armory. \n\nAfter beating it into his stubborn head, Palmer surrendered, remembering her logic; she told him, \"Rainbows End will have a call sign, Outpost Rainbow. And a trained squad of infantry as added protection. But you know what else, dumbass?\" \n\nOn a roll, and not waiting for an answer, she continued sarcastically, \"We get constant communication with Battalion HQ, some serious help in an instant,\" and then with a soft body and teasing whisper, \"Unlike..., some people I may know!\" \n\nWith a smile, he asks, as she prowls around him, \"You're never going to let me off the hook, are you?\" \n\n\"Oh, I can be persuaded to forget..., for a little while,\" she offered, smiling coyly. \n\n\"Both, you and Christine, are damaged goods,\" he laughed, adding, \"There's no way Marshall and I are responsible for both your behaviors!\" \n\nIn the distance, they heard Christine cry out, \"I heard that, and suppers getting cold!\" \n\nChapter 26 \n\n\"The forest animals aren't just scarce, they seem to be missing,\" Marshall told Palmer, after calling him up to the wall. \n\n\"Yeah, I was wondering about that too. Been a week of disquieting quiet, you know what I mean,\" Palmer asked? \n\nMarshall asks, \"I sure do, think it's the virus?\" \n\n\"Could be, let's talk to the tower,\" Palmer suggested. \n\nBy spring, Outpost Rainbow had become just that, a militarized outpost. An observation tower, holding a coms antenna and their link to HQ, stood watch above the rear bluff. \n\nSpinning the crank at the base of a battlefield phone, he waited for the tower watch to answer. \n\n\"Tower,\" a young male answered quickly. \n\n\"Hey Jerry, it's Palmer; Take a look around and tell me what you see; any people or animals, dead or alive, anything at all; I'll wait.\" \n\nMinutes drag by while the young soldier scans visually and electronically for signs of life, eventually returning to the phone and reporting nervously, \"Nada, zero-squat-shit; should I be concerned?\" \n\n\"Don't know yet, you see any birds Jerry?\" \n\n\"Holy shit, it's here! The virus is here,\" Jerry says, starting to panic. \n\n\"JERRY,\" Palmer screamed into the phone, \"Calm down! You're safe, we've all talked about this, breathe. Look around, are there any birds,\" Palmer slowly asked again. \n\n\"Don't push,\" Palmer thinks to himself, \"Let him calm down and do as requested, look for any birds.\" \n\nPalmer waits; a little while later, Jerry is back on the phone, \"No birds, no animals, no people; nothing moves.\" \n\n\"That may be a good sign Jerry. Listen to me, the virus is not airborne, it can only be transmitted by fluid exchange; if nothing's moving, nothing is getting infected and that includes us,\" Palmer reassured sternly, and then asked, \"You okay?\" \n\n\"Yeah, thanks Palmer. Guess this is scaring the shit outta me; aren't things bad enough without adding this, a virus, no less,\" he wondered aloud. \n\nHanging up, Palmer thought back to his Grandpa Thomas's warnings of a history repeating itself, \"Dying by the millions, dinosaurs and humans, each leaving a dusty mark in passing.\" He wondered if this was mankind's last dusty mark or a new beginning. \n\n\"Why the long face,\" Stella asked, as she and Christine approached. \n\n\"I don't know if this is good news or bad news,\" Palmer answered, a slight look of confusion on his face. \n\nStella looked at Christine, and rolling their eyes, says, \"Oh great, if it's good news, he'll look like a genius; if it's bad, he'll blame me!\" \n\n\"What is it,\" she asks looking at Palmer, hands on her hips. \n\n\"The Virus, it might be here,\" he answered, and quickly added, \"Everything around us has stopped moving, no animals or birds anywhere.\" The girls fell silent. \n\nLooking at Marshall, Palmer commands, \"Contact Battalion HQ, explain what we suspect; pass the word, Outpost Rainbow is now under quarantine.\" \n\n~~~~~ \n\nAddressing a worried Coin, and after answering dozens of questions, Palmer concluded the meeting by saying, \"The way I see it, the only difference between yesterday and today; yesterday, the virus wasn't here, today it is! We knew it was coming, dreading its arrival, and it may have already been here for weeks without our knowledge, infecting everything it touches. \n\nBut we haven't been outside our perimeters this winter; we've had no external contacts, human or animal; let's keep it that way. No bush meat, only self-grown vegetables, we stay inside, where we're protected. The virus will run its course, killing and contaminating; but we let that happen out there, in here, we survive.\" \n\nShocking himself, Palmer admitted, \"In a strange way, I'm glad it's here,\" and then clutching a picnic table dramatically for the benefit of the children, and in a gruff big bad Wolf voice, said, \"The suspense was killing me!\" \n\nStella saw him differently from just playing with children, making the Coin laugh along. He was bringing them to his true target; a brief moment of respite, away from fear and death, if only but for a moment. \n\nChapter 27 \n\nBy spring, nerves were a little ragged around the edges, but no one had killed anybody. Palmer and Stella took this as a good sign and immediately decided they needed to expand the compound, or, they were all going to kill each other come next winter. \n\nExplaining it to the Colonel this way did the trick; a group of Battalion technicians showed up the following week, tested the ground between the wall and the salvage yard; once approved, the container wall was moved outward, and the courtyard greatly expanded. \n\nAh, the feeling of real estate! Hard-fought and hard-won; swords beaten into plowshares they spilled into the vacant ground, becoming neighborhood settlers and enjoying the much-needed room. Small makeshift one-room cabins, sprinkled throughout the new gardens of corn and wheat, presenting the feeling of a rural community set in the Middle Ages, sturdy for winter yet airy for summer, quaint and peaceful. \n\nSlipping her arms around Palmer's chest, and pulling herself against him from behind, Stella asks, \"You want to fool around or talk stranger? For a price, you can have both!\" She feels him chuckle silently, loving the way he loves her flirtatious teasing in private; well, mostly in private. \n\nStepping back a few inches, pretending to remember something, she says, \"Oh wait! You're a guy! And being a guy, you'll talk my ass off, hoping we can fool around later!\" \n\nRaising his hands in defeat, and turning around in her arms laughing, he asks, \"Since when has fooling around not worked on me?\" \n\nGrowing quiet in each other's arms, they appreciated the new ground and humanities pliable resilience, capable of reshaping and adjusting with change; evolving into something able to live a simpler life, on renewable energy; learning to live with a planet and not bleed it dry. \n\n\"What is it Palmer, talk to me,\" Stella asked, swinging slightly from side to side and capturing his eyes with hers. \n\nHe sighed and lovingly said, \"God, you're so beautiful,\" he kissed her softly, and then rolling his eyes, said playfully, \"There, now you've done it! I always knew you were trouble, you've made me believe in God; kinda maybe.\" \n\nStella didn't mind waiting for him to talk, and she's thinking, \"He's all over me, kissing me deeply, as much as passion will indulge our promiscuous behavior and our public location. \n\nMost important; he's right, when has fooling around not worked with him? From the dawn of time, women have understood the power of sex; some use it better than others, but we all use it. \n\nI'm no different from Palmer, hard-working, hard-loving, playful and horny; besides, after sex talk is so much better than before sex talk, with all that positioning and posturing completed, we can get down to the...,\" \n\nBreaking the kiss and both gasping for air, he pulls her tight while their hot breath leaves clouds of vapor in the crisp spring air. \n\n\"Whew! That was intense,\" Stella stammered, and they laughed softly. \n\nPalmer, tugging her hand, asks, \"Walk with me, please?\" \n\n\"Maps cost extra! Easily, unaware sailor captains get lost on 'dis unknown land,\" she said in a thick Spanish accent, tossing her hair defiantly as she looked slowly away, brazenly untamed and offering more. \n\n\"I think you're worth the investment but let me get this straight; is this like a discount package deal,\" he asked playing along. \n\nTurning quickly, hair flying, she snaps with dramatic feigned indignation, \"Whatever do you mean Seignior!\" Almost laughing from her own antics, her eyes dancing within their boundless connection, she wiggles her eyebrows and adds seductively, \"Make me an offer I can't refuse, and I'll be yours forever.\" \n\nWalking backwards and holding both of her hands, he drags her along with him, saying, \"A long term package deal, and it requires total commitment.\" \n\n\"And what of my other customers Seignior,\" she asks while being turned and pulled backward against him, smothered safely in his powerful arms. ",
        "He could feel her melt against him, become a part of him, blending into something more; and then it hit him, that nagging worry that brought her to him in the first place. \n\nShe felt his sudden change; his troubled spirit brooding in the shadows and needing prodding, she asks, \"What troubles you, my love?\" \n\nPalmer sighs heavily, and answers, \"The Coin..., the Battalion..., the few pockets of humanity still around; hell, everything!\" \n\nShe pulls him to a rough-hewn bench, pushes him down and sits in his lap, and then says, \"Okay Palmer McIntyre, what gives? Get it off your chest and spill it!\" \n\n\"You're gonna think I'm nuts; like, slipped off the deep end,\" he says sheepishly. \n\nStella cackled briefly, and then said cynically, \"Too late, everybody knows you're certifiable crazy! You seem to forget, you're the lunatic that ever so pleasantly invited that monster Felder here!\" \n\n\"But did we win a battle, just to lose the real war,\" asked Palmer, eyes fearsome and piercing, genuinely worried. \n\nHer face scrunched in confusion, Stella slides from his lap, sitting next to him holding hands, and says, \"Sweetheart, you're going to have to explain this one to me, I'm not following.\" \n\n\"The costs of winning the battle with Felder are twofold, the loss of life is always our foremost concern and rightly so. But the possible loss of self-sufficiency, as we depend upon more and more on technology and it's not all bad, but it can set us up for all this misery to happen again. \n\nOver extending and become dependent on technology once again, never finding a wise and cohesive balance between advancement and destruction. When do we say, enough! Our insatiable greed is our enemy within; pampered..., powerful..., and always fed.\" \n\nTaking her by the arm, he led her to the wall and up the stairs. The guard nodded at their approach, and said, \"There are cups on the table and coffee in the thermos,\" and then discreetly moved away, offering them a token of privacy. \n\nPalmer poured two cups, holding the empty thermos up for the guard to see, he says, \"Randall my boy! I'll take the watch, you get this filled. Oh! And kiss your girl good night while you're there; see you in thirty minutes, sharp.\" \n\nRandall grinned, and while disappearing replied with a big, \"Yes sir!\" \n\nThey both watched the young man hurry down the stairs and racing toward one of the makeshift cabins. Throwing the door flap back, he leans in offering his hand and then scurries away laughing, his woman in one hand, and an empty thermos the other. \n\n\"Ah,\" Palmer sighs, \"the innocence of youth,\" taking a sip of his coffee, he adds, \"and the privilege of command.\" \n\nStella laughs, and says, \"Is that insatiable greed I hear?\" \n\n\"To a point,\" Palmer admitted. \n\n\"This is going to take a while, isn't it,\" Stella asked while sitting down. \n\n\"Longer than either of us would like,\" he answered joining her, and then began while looking around, \"This is where it all really started, our talks on the wall; seems a lifetime and a moment ago.\" \n\nPalmer reminiscing scared Stella; this wasn't like him, he was deeply worried about something. In her best squeaky Betty Boop voice, she teased, \"You're scaring me now Palmer, have you been talking with aliens..., too?\" Pretending it just occurred to her, they might want to talk to more than one person. \n\nPalmer started laughing, almost grudgingly at first, but it was too damned funny to ignore, and he manages to say, \"You are not only damaged goods; you are seriously damaged goods!\" \n\nHe then suddenly blurted, \"That's why I need you to keep a promise I heard you make..., a promise made to an imaginary wall almost a year ago.\" \n\nRepeating her words and re-invoking an internal image of her asking from outside the wall, she saw herself answering in his voice, \"I'm a journalist and can document the compounds' history; I have teaching credentials in college-level English and History.\" \n\nHe gave her time and let his words mingle with her thoughts, and then said, \"I need you to write a new perspective concerning human history. Not some local or national political agenda, but with an overall global driven need for balance. Quit blending the same ingredients and expecting different results.\" \n\n\"Who better than you,\" he continued, \"to write a history of the world from the perspective of its mistakes; mistakes, repeated over and over; ultimately teaching us, we need to do things differently to survive. Let our children grow up reading this history instead; there's no honor or glory in war; death doesn't bring pride, it brings itself, death. \n\nThere is no glorious tale of a struggle to rebuild what we've lost, but a tale of generations struggling to change into something new; finding a balance between the planet and planet dwellers. \n\nShit! Shave our heads and beat on tambourines, something has to give and that's us. Weather patterns generating enormous storms, El Ni\u00f1o ocean currents, ice caps melting and oceans rising; the planet is not only changing, it's rebelling. \n\nWe may have already passed the planets tipping point, for decades we talked about air, water, and ground pollution; now, even with the massive reduction in pollution. Our planet may be transforming and evolving into something never seen before, it can't stop or doesn't know how to stop; because we've taken this ball called Earth too far, a point of no return. \n\nWhatever it is, we'll have to adapt; we don't throw technology away, I'm not stupid; but the polluting industrial revolution powerhouse days of yesteryear are over. Never fear, there will be manufacturing on a smaller scale, but with different reasons, different methods and a different need.\" \n\nStella stared slack jawed, frozen in time, remembering how he first impressed her when they met; his immediate challenge to live at the compound instantly caught her interest. Her evaluation of him as he drove to the compound; if good-looking, broad shoulders and strong arms wasn't enough; to experience the off-grid lifestyle made her feel..., strangely alive and belonging. \n\nMimicking Palmer's words, she asked, \"So let me get this straight; you want me to write a book about mankind's mistakes, then this book is to be used more like a Bible, than a history book. It's obvious to me you've been converted; you're using God's and my name in the same sentence. Now, it looks like you want to start a new religion, and you want me to do all this writing, while you what..., talk to a burning bush?\" \n\n\"I'm not too bad with history, smartass. But I suck at English; what I really need is for you to write what I say,\" he said with a child's pleading look, batting his eyes, and then going for the kill, sweetly added, \"Maybe our children will see Earth return to its former beauty with your wonderful book as a guide.\" \n\nStella doubled over in laughter, when she catches her breath, she asks, \"That's the best line of horseshit I've ever heard, how long have you been practicing that line?\" \n\nPalmer jerks to a smug look, nose in the air, and says, \"I just thought of it, to tell the truth; but I can always say two weeks, if it will help!\" \n\n\"Still working on that approach, I see,\" Stella says, rolling her eyes while grinning. \n\n\"Never miss taking advantage of a girl that keeps you on your toes, grandpa always said! Does this mean you'll write the book,\" he asks? \n\nStella corrects him, saying, \"Does this mean I'll take dictation, type it out on some ancient typewriter, then miraculously publish it, from God knows where somehow?\" \n\n\"Hey! That's good idea..., that's a very good idea! You're so smart! Wish I'd thought of that,\" Palmer teasingly says, like it was her idea in the first place and trying to convince him, \"Okay, how do we start?\" \n\nStella shakes her head, wondering if she should have him committed before he hurts himself, and then said, \"We should start with the Coin; listen to their stories, have them write about what brought them here and why they call themselves the Coin. If this history is going to be told, it's going to be told from the humans that survived.\" \n\nPalmer said, \"Then it has to be a plea for change; a human change; us, evolving into a creature more in tune with our surroundings; taking less, giving back more; living simpler lives, less dependent upon convenient technical trinkets. That path almost destroyed us.\" \n\n\"A letter of remembrance, from the Coin to our future; I like that idea,\" Stella said, and then turning abruptly, she punches him softly in the chest with her small fist, and exclaims while smiling sweetly, \"Another one of your traps! I do it every damn time!\" Knowing she would rather be nowhere else. \n\nPalmer cups her ass in his hands and pulls her up level, eye to eye; while Stella wraps her legs around him she kisses him passionately, and then asks while rubbing her body against him and kissing his neck, \"Did you say,\" licking from the base of his neck, \"somewhere in all of that rambling,\" and gently grasping his earlobe with her teeth, \"our children?\" \n\n\"Let's not get carried away, but...,\" And she bites a little harder. \n\n\"Ow! Oh yeah! I remember now, guess I did!\" \n\nStella, back into her Spanish seductress routine, growls seductively in his ear, \"Is it children you want, El Capitan?\" \n\nThen Randall, returning with a full thermos of coffee, nervously cleared his throat. \n\nChapter 28 \n\n\"The wind turbine idea, using alternators from cars to charge the batteries was good thinking,\" Palmer said to Marshall, and then added, \"it powers our outside lights during these summer nights, but the ways you come up with how to go about your ideas, is beyond me!\" \n\nMarshall laughs admitting, \"If a river was nearby, and I have my way, you'd see a waterwheel in it!\" \n\n\"The earliest factories were grist meals, powered by people or donkeys,\" Stella snorted, and then, one step ahead of Marshall, added, \"Waterwheels powered small factories, their location becoming early settlements because of employment and waterborne commerce.\" \n\nHooking his thumb at Stella, and looking at Marshall, Palmer says laughing, \"Her nerd is showing,\" and that smartass remark, got him a stiff poke in the ribs from Christine as she took a seat. \n\nTheir meeting had been planned, to discuss whether or not investigate the outlying area. Palmer opened the meeting by asking Stella, \"What did Patricia say?\" \n\n\"Any non-contact sweep, made with extreme caution, would be okay,\" Stella answered uneasily. \n\nChristine asked, \"Did she say anything about hazmat suits?\" \n\n\"If we're going inside any structure, then yes; if not, hunting gear should do. It's for damn sure, we don't touch anything decayed,\" Stella responded, all of them nodded agreement and wondering, what will they find? \n\n\"It all boils down to one thing, and that's who goes,\" Marshall said. \n\nChristine interjects quickly, \"We can't send both men; if something happened to both of you; what would Stella and I do? Or send both women, would you want that? It has to be a couple. The Coin would be lost without either of you, Marshall and I should go.\" \n\nEveryone was waiting, ultimately the decision was Palmers, and looking at Stella, he answered, \"She's right, a couple should go. And as good as it sounds to stay right here, I think you and I should go.\" \n\nHolding up his hand, and stopping Marshall's objection with a look, Palmer continues, \"It's not because I have command of the Coin; it's because, I know these woods better than anybody and the logical one to go,\" turning back toward Stella, he adds, \"And nobody I trust more than you.\" Stella smiled brightly at his unwavering confidence in her; when impotent arguments, thwarted by logic and decisive command, vanished; Marshall reluctantly slumped in his chair, admitting it was the correct decision. \n\n\"We go in the morning,\" Palmer said looking at Stella, \"I'll backpack both protective suits; you carry the standard gas masks and disposable gloves,\" and then with a crazy look, he adds, \"just in case they're needed!\" \n\n\"Because you need a keeper, you know we're sending Stella with you, don't you,\" Christine asks? \n\nPalmer, teasing Stella, asks her sarcastically, \"Damn, now I have to put up with you barking orders?\" \n\nOpening and closing her curled fingers, miming teeth with their hands, Stella yips, imitating a small dog barking. \n\n~~~~~ \n\nTwo hours after daylight, they'd finished their first circular sweep and found two clumps of something, badly decomposed; otherwise nothing moved, the forest seemingly empty and holding its breath. \n\n\"This doesn't feel right, way too quiet..., we need to go further out, make another sweep; all done in concentric circles,\" Palmer commanded, and then added, \"Remember Stella, this is an informational sweep, not an investigation; we see something of interest; we take note of it, flag it and move on; stay alert, watch for my hand signals, we go slow and no surprises.\" \n\nStella nodded, affirming she understood and tapped him on the shoulder, indicating they should go. Palmer keyed the mic twice; Rainbow keyed back; silent communication complete, the pair cautiously started a second sweep. \n\nTraveling in the reverse direction and gaining an opposing perspective of the visible landmarks, they moved quietly. \n\nNoticing a smell, and wrinkling her nose, Stella asks quietly, \"Do you smell that?\" \n\n\"Wind is coming from this direction,\" Palmer affirmed, his weapon to the ready and advancing toward the odor, he added, \"follow me.\" Keying the mic twice, and receiving an acknowledgment, Raider One traveled deeper into the woods, each step further from the Coin. Following their noses and circling around some thick brush, they found the half-eaten body of a man. \n\nHolding her hand over her nose and mouth, in hopes of lessening the smell, Stella managed to ask, \"Wolves?\" \n\nCircling the body, Palmer answers, \"No, there would be bite marks from every direction as the pack feeds; this was a solitary animal feeding and too big for a mountain lion. Look at the spread in these claw marks; this has to be a bear and a big one. Let's get the hell out of here; we need to prepare for this.\" \n\n~~~~~ \n\n\"We build a trap and kill it from a safe distance, it may be infected,\" Marshall said, expressing caution. \n\nStella interjected, \"Bears can roam great distances and it may already be leaving the area; but, I'd like to try trapping it first, keep it from spreading anything at all. Battalion may want to test it before destroying it.\" \n\n\"There's no way we trap it anywhere near here and risking infection. We trap and kill it somewhere else, take a sample and then burn it, cage and all.\" Palmer decided. The following day, slender trees were felled and cleared of limbs, rope and wire gathered from around the compound; near a berry patch they built a trap, one strong enough to hold a bear. Tired and weary, the trap was not baited until the next night. \n\nMaking it heavy enough, so small animals couldn't move it, they used a gutted car door for a bowl, 4 quarts of various berry flavored jellies and 2 quarts of honey were mixed and poured inside. \n\nThe theory being; as the bear pushes the car door around, digging for the irresistible treat; this springs the trap and gravity swings the gate closed, and triggering the gate locks. Seconds later, two concussion grenades explode; signaling the Coin, one big pissed off bear is waiting. \n\nA few hours later, the grenades go off and armed executioners rushed to the trap and stood shocked, staring at the cage. Within its confines, sat an enormous bear; light brown of color, huge paws turning the door as it licked its contents eagerly, all the while, calmly ignoring the curtain of weapons pointed at it. \n\nFrom rump to ears, it measured over six feet; if standing, maybe ten; this was a rouge North American grizzly, a first of possibly many more; either way, it had to die and twelve abreast they opened fire, assassinating the huge beast. \n\n\"It was a grizzly, and a big one at that,\" Palmer told the Coin, \"Even so, we've been lucky,\" and then while pointing, added, \"That column of smoke is its ass burning, threat eliminated; but there may be more bears ranging further south, just like the wolves; the fewer the people, the less the threat; the less game there is, the larger the hunting ground; outside these gates, no one is safe.\" \n\n~~~~~ \n\nArm in arm, walking the courtyard on a warm summer night, Palmer says to Stella, \"You okay? You didn't eat much tonight, in fact, you barely touched your plate.\" \n\nStella smiles, and while placing her free hand on her stomach, she says quietly, \"Palmer, I have something to tell you. I've missed my last three monthly cycles.\" \n\nPalmer stopped abruptly, unmoving and staring straight ahead; Stella waited patiently, allowing him to digest her words. Slowly, a movie appeared through the dense fog of his mind; a small white dot growing into a semi-transparent fetus displayed on some hospital monitor and Stella giving birth; surprising himself at the thought of becoming a father! \n\nTurning toward Stella, Palmer snatched her into his arms, and while grinning from ear to ear, he planted kisses all over her face; Stella laughed joyously under the onslaught of loving attention, his response speaking volumes about his feelings regarding the wonderful news. \n\n\"A winter baby,\" Palmer says from his knees, ear pressed against Stella's belly and her hands cradling his head. \"Daddy's little girl will be a winter baby,\" he concluded. \n\n\"And how do you know it's a girl,\" smiling, Stella asks softly. \n\nSwallowing her into his arms even deeper and believing it to be true, he responds, \"I want another angel in my life, just like you; so that means, it has to be a girl!\" \n\nSuddenly, jerking his head away after hearing her stomach grumble, he says teasingly, \"I just heard her fart; it has to be a girl, it wasn't loud enough for a boy!\" \n\nMarried by the battalion chaplain come late fall, Claire Eloise McIntyre entered the world on February 5, forever changing both their lives. \n\nEnd"
    ],
    "authorname": "Krotch_Kannibal",
    "tags": [
        "disaster",
        "survival"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/rainbows-end"
}
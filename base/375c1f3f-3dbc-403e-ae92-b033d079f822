{
    "title": "Bosom Buddies Ch. 03",
    "pages": [
        "(Author's note: Everyone in this story is at least 18 years old)\n\n*\n\nI could hear the shower running upstairs, and the muted music of Elizabeth's sweet voice singing something from Phantom of the Opera. I briefly enjoyed the mental image of her belting out those high notes into the detachable nozzle, oblivious to the spray of hot water cascading down her beautiful breasts. Water droplets clinging to her wine-dark nipples...\n\nMy attention shifted back to the beautiful blonde sitting beside me. Neither of us spoke, we just sat there, awkwardly shifting back and forth. This was not how I'd pictured things turning out. While Elizabeth was off soaping up her curvaceous body in the shower, Steph and I finally had some time alone together. I had been looking forward to this all week long.\n\nBut nothing happened. Now that we finally had the opportunity, neither she nor I knew how to make the first move. Hooking up in the hospital had been spontaneous and unexpected. The fact that we were now PLANNING on doing it made everything awkward. We both made lame attempts at conversation that totally avoided the elephant in the room.\n\nI tried to steer the conversation where it needed to go: \"That was really sexy, when you and Liz switched bikini tops with each other like that.\"\n\nStephanie lit up, \"Yeah, I couldn't believe she did that! She's always telling me how nervous she is around boys! She must really trust you.\"\n\nThat redirected us to talking about Elizabeth for the next few minutes, and by the time I realized we had once again gotten off the topic of screwing each other, the shower had turned off upstairs and we were no longer alone. Damn that girl for taking such quick showers.\n\nElizabeth, the Mediterranean goddess, descended the stairs wrapped in her bath towel. Much to my chagrin, Stephanie decided to head upstairs to rinse off now that the shower was free.\n\nI moved to give Elizabeth room on the couch beside me, and she gave me a coy look I couldn't quite explain--until I noticed her bare shoulders. She had decided not to put Stephanie's swimsuit top back on after her shower. I couldn't help but wonder if she had likewise \"forgotten\" to put her board shorts back on.\n\nThe towel shifted as she sat down, just enough to show off some porcelain smooth cleavage. \"It's been an interesting night,\" she said.\n\nI nodded in agreement, \"I don't think the others are going to tease you about being the 'innocent one' anymore.\"\n\nLiz shrugged, pleased with herself. \"I just wish I hadn't had to tease you to do it. Not that I thought you'd mind, exactly. I figured it'd be a kick for you, too, obviously. I just hope you didn't feel like... I don't know...\"\n\n\"Like you don't take me seriously?\"\n\nShe sighed, \"Yeah. Please don't think I don't take you seriously. You're just the only guy who doesn't intimidate me. I know you too well. I know you'd never hurt my feelings, or laugh at me, or say mean things about my big fat hips.\"\n\n\"Your body is a work of art, Elizabeth. Anyone who doesn't appreciate every inch of you is an idiot.\"\n\nShe blushed, glancing down at her exposed cleavage. After a moment of silence between us, she quietly asked me, \"What's the furthest you've ever gone with a girl?\"\n\nI thought about Stephanie, and then about what me and Amy had done under the towel a few hours ago, just a few feet away from Elizabeth. But if neither of them had said anything to the other girls, than that meant I wasn't supposed to either.\n\n\"Hands,\" I answered simply, making a gesture with my fingers to clarify.\n\n\"You've never had a girl do, like, what Corrine was talking about with the hotdog?\"\n\n\"A blowjob? No. But I fantasize about it all the time. I bet it feels awesome.\"\n\n\"That's like my worst fear you know. Not actually doing it, I don't mean. I think it's probably actually kind of fun and sexy to do it. I mean the way the guy treated her. It would just kill me if a guy did that to me. Made fun of me for doing it wrong. How am I supposed to do it right on my first try? I think that's why I've always been too scared to try anything.\"\n\nI took Elizabeth's hand in mine. \"That guy Corrine told us about? He's a moron. And not just because he turned down a blowjob from a beautiful woman. I mean because he missed the point of it entirely. I'm obviously not an expert, but I really feel like sex shouldn't just be about getting off. It should be about sharing ourselves with someone, and about how great it is when someone wants to share themself with us. That's what's so exciting about it. Doesn't have to be true love or anything, but I feel like there should be SOME kind of connection going on. Otherwise you're just using another person's body so you don't have to waste energy jerking off. I guess that's okay, but it's so much less than it could be. If you're with a guy who doesn't realize that, then he's the one doing something wrong, not you.\"\n\nShe smiled sweetly and took my hand. Then, nervously, she placed it on her breast. I saw the trust in her eyes, and I gently cupped my hand around her, feeling the fullness of that marvelous bust. Elizabeth closed her eyes and leaned her head back, sighing, \"That feels nice.\"\n\nShe looked unbelievably beautiful at that moment, powerfully aroused but also relieved; finally at peace with something that had been giving her anxiety for years. I leaned in and kissed her lightly on the lips, continuing my tender ministrations to her bosom.\n\nEver so slowly, the towel around her loosened, revealing Elizabeth's soft warm body. Her breathing intensified, and the flush in her cheeks again travelled down her collar to the tops of those pale breasts. The towel finally untied in the center, and I moved my hands to the space between her tits, caressing them from the inside out. My thumbs sought out her thick, gumdrop-shaped nipples, delicately swirling around them.\n\nThat got her motor running. No longer at peace, more like an animal in heat, Elizabeth kissed me back passionately, frenching me with wild abandon just as she had on my birthday. She grabbed my hands and crushed them to her tits, her whole body shaking with desire.\n\nThen, suddenly conflicted, she wrenched my hands away from her boobs and her face contorted with uncertainty as she tried to shake the fog of desire from her brain.\n\n\"Elizabeth?\"\n\n\"I'm just\u2014I don't know if\u2014I just don't know why I'm shaking so much. Is that normal? I can't stop shaking. Why am I shaking? It just feels so\u2014it just--\"\n\nLiz stopped talking mid-sentence and threw herself at me, kissing me so suddenly and so hungrily I couldn't hope to keep up. Her large, bare breasts clapped against my chest, red-hot to the touch. She whimpered into my mouth--\n\nWe both jumped as the bathroom door opened upstairs. Elizabeth hurriedly pushed me away and re-tied her towel just as Stephanie appeared at the top of the stairs, dressed in a towel of her own.\n\n\"That was fast!\" Elizabeth panted, still in a daze. \"You take fast showers!\"\n\nStephanie quirked an eyebrow but at her BFF's suspicious behavior, but let it slide. \"Ian, the shower's all yours while we dry off.\"\n\nElizabeth nodded that I should go, so I hurried upstairs and slipped off my trunks, profoundly aware of the engorged cock swinging heavily between my legs. I couldn't believe all that had transpired in the past few hours. Sense memory assaulted me as I washed off: the feel of Amy's smooth shaven pussy straddling my thigh, the sounds of Talia's lusty breathing as she reveled in her first lesbian kisses, my brief glimpse, at long last, of Corrine's mouth-watering chest, the smell of Elizabeth's arousal and the lingering taste of her lips on mine.\n\nThough my standard shower takes like thirty minutes, I hopped in and rinsed off at record speed. I didn't want to be away from those girls for one second longer than necessary (though I did pause long enough to make sure I got rid of all the cum that had dried on my thigh). I stepped out and went to slip on some boxers--\n\nWhich is when I noticed Stephanie and Elizabeth's bikinis sitting on the bathroom floor. And not just their tops, either: Liz's board shorts and Steph's brief black bottoms were there as well. For an instant, my mind refused to accept the beautiful truth that both girls were buck naked under their towels. I could only guess at what form of merciless teasing they had in store for me tonight.\n\nFiguring three could play at this game, I decided against the boxers and simply tied a fresh bath towel around my nude waist before heading back downstairs.\n\nThe girls weren't where I had left them. In fact, they were nowhere to be seen. All I found downstairs were their two towels, abandoned on the couch. With a twinge of disappointment, I realized that they must have already changed back into their street clothes.\n\nThen I heard giggling coming from my bedroom.\n\nMy cock grew heavy again between my legs as I opened my door and stepped inside, finding both girls smiling at me from my king-sized bed. The curves of their incredible bodies were clearly visible beneath the thin bed sheets.\n\n\"I finally told Elizabeth about our night in the hospital,\" Stephanie said.\n\n\"And I told her about what we did while she was in the shower,\" Elizabeth added.\n\nStephanie grinned at her beautiful friend, continuing: \"Thing is, we both want to keep doing this stuff with you, but neither of us wants to go home. So we called our parents and told them we were spending the night at each other's houses.\"\n\nMy jaw hit the floor. \"Wait, you mean that I--with both of you?\"\n\nElizabeth trembled at my undisguised desire, explaining, \"I want to do sexy stuff. I want it so bad I actually cry sometimes. But I'm still really nervous about it, even around you. With Stephanie here I know I'll feel safe no matter what.\"\n\nStephanie smiled at me, \"Elizabeth told me what you said to her; how sex should be about sharing yourself with other people. If that's the case, then why shouldn't we share you? We're all single, we're all friends, and we all want to.\"\n\nI felt dizzy. This can't be real, I thought, this kind of thing only happens in movies, or to rock stars, or to jet-setting billionaires. Not to me. Real girls don't do this, right?\n\nBut nonetheless, there they were: My friends. In my bed. Beneath my sheets. Smiling at my erection.\n\nI took a step towards the bed, so giddy I scarcely felt the floor beneath my feet. I cast my towel aside, watching their eyes immediately swerve down to the engorged phallus hanging between my legs. The two girls instinctively grabbed each other's hands in suspense.\n\nI climbed onto the foot of the bed, crawling slowly forward, feeling their naked bodies beneath me through the sheet. I lowered my hips so that my dangling cock slid across Stephanie's legs.\n\n\"Oh my God,\" she sighed, squeezing her friend's hand even harder. I changed direction, crawling over Elizabeth, dragging the head of my penis across her belly.\n\n\"I can feel it on me,\" she shivered with excitement, \"I can actually feel it.\"\n\nI reached up to the sheet concealing my two beauties and yanked it down in one lighting fast tug. Their supple young bodies lay there before me, completely exposed.\n\nI marveled at the expanse of flesh for what felt like an eternity, first drinking in the sight of Stephanie: long legs, perky butt, toned stomach, soft golden curls between her legs and long wet tresses of golden hair plastered to her swelling pink tits.\n\nI gazed down at Elizabeth: fair skin flushed with excitement, curvaceous hips, the promise of a nice, juicy butt on the other side, a neatly trimmed strip of dark pubic hair above her puffy, glistening vagina, a slender neck and shoulders, dark hair splayed out on the pillow above her angelic face like a halo, and her truly epic tits. How many short girls have 34DD's? Not enough, I tell you.\n\nLike a parched man stumbling across an oasis, I dove in. The three of us groaned as we made out, rolling around my bed in a mess of bodies. Since Elizabeth was closer, I kissed her first--ravenously matching her passion. Stephanie wrapped her arms around us both, licking my neck and rubbing her whole body against me.\n\nNot wanting to neglect anyone, I turned my face away from Elizabeth, still fondling her tits while Stephanie and I wrestled our tongues together. I felt Elizabeth's fingers slowly reach down my back, towards my ass, too nervous to go ahead and just grope me--\n\nSo I grabbed her hand and finished the journey for her, firmly planting her palm on my butt. She squeezed it happily and bit me on the ear in gratitude. Never in my wildest dreams did I think I'd be in this situation. My dick was screaming for some physical stimulation.\n\nStephanie pressed her shaking hand to my groin, feeling the hot skin with her palm. Nervous, she slowly played with me--not furiously stroking like she had in the hospital, just testing, exploring. Gently cupping my balls just to see what they felt like.\n\nI guess Steph's curiosity got the best of her, because she tore her mouth away from mine to give herself a better view of what she was doing to me down below\u2014for the first time she beheld the sight of a man's dick in her hand. Her gentle stimulation was incredible.\n\n\"What's it feel like?\" Elizabeth asked, likewise transfixed by the sight of Stephanie playing with me.\n\n\"It's warm,\" Stephanie answered. Elizabeth reached her small hand down towards my penis, her eyes silently asking my permission before she touched it. I nodded and her hand joined Stephanie's, feeling my length with drifting fingertips. Elizabeth shuddered with arousal at the forbidden sensation.\n\nWhile the two beautiful naked girls caressed me down below, I reached out and squeezed their matching sets of huge heaving breasts, gently grazing my hands across their pert nipples.\n\n\"It gets me so turned on when he touches me like that,\" Elizabeth sighed to her friend. Stephanie nodded in agreement, helpfully adding, \"You should feel what it's like when he puts them in his mouth.\"\n\nElizabeth turned to me, \"Would that be okay?\" she asked.\n\n\"Lizzy, baby, I'm yours. You don't need to ask my permission for a thing, you can have all of me right here, right now.\"\n\nShe released her hold on my penis and crawled towards the head of the bed, laying down comfortably on her side with that voluptuous chest beside my face, her thick, wine-colored nubs perfectly aligned with my hungry lips. Ever so gently, I took her breasts in my hands and flicked out tip of my tongue, moistening the tips of those nipples.\n\nElizabeth moaned in pleasure.\n\nBelow, I could feel Stephanie pick up the pace on my hand job, excited by the image of me tasting her friend's boobs. I suddenly felt Stephanie's tongue on my own nipples, matching me lick for lick.\n\nI gasped sharply in response, sucking Liz's tit into my mouth harder than I'd intended. The effect on Liz must have been pretty powerful, because she instinctively pulled my face fiercely into her chest and bit her lip in ecstasy.\n\nI'd heard of girls with super-sensitive nipples having orgasms with no clitoral stimulation whatsoever, and given Elizabeth's reaction to my tongue, I began to wonder if she might be one of them. Determined to find out, I renewed my oral assault on her breasts, reacting on a purely animal level to her breathing and body language to determine my intensity.\n\nMeanwhile, Stephanie stopped licking my nipples and was slowly swirling her tongue lower and lower down my chest. The teasing sensation was driving me wild with lust; energizing me to attack Elizabeth's delicious nipples with everything I had. A pure flow of sexual energy--from Stephanie, through me, to Elizabeth--\n\nWhose screams of pleasure were music to my ears. She writhed uncontrollably in my arms, her thighs squeezing together in expectant agony, her voice almost incoherent as she chanted \"Don't stop... don't stop... DON'T STOP!\"\n\nI didn't stop.\n\nAll the while, Stephanie's tongue swirled ever lower, across my pelvis, threatening to slather across my criminally neglected erection.\n\nElizabeth came very suddenly, fingernails clawing at my back. I'd never even touched her below the waist. I maintained suction on her tit as every muscle in her body tensed--she went stiff as a board--then I gently released her and she collapsed limp beside me, rolling her tender breasts away from my mouth. The air in the room was pungent with the smell of her arousal.\n\n\"That was... that was...\" Elizabeth dreamily trailed off, choosing instead to give me a grateful kiss so intense it managed to momentarily distract me from the fact that Stephanie's tongue was moving down into my pubic hair.\n\nSatiated for the moment, Elizabeth glanced down at her friend and realized: \"Holy shit, Steph!\"\n\nI felt a lightning bolt of pure pleasure shoot through me as Stephanie sunk her warm lips over the head of my cock. Holy shit indeed! Then it was my turn to moan as naughty Stephanie went to work on her--and my--first ever real-life blowjob.\n\nI couldn't believe how hot it looked: My dick standing at maximum hardness, pointed right up between the softness of Stephanie's pouty, movie-star lips. Her cheek stretched out lewdly each time she descended on me. The heavy swinging flesh of her breasts slapping against my thigh with every movement. The word \"Yes!\" flashed like a neon sign in my brain.\n\nFor a long while, Elizabeth and I watched, utterly hypnotized, while Stephanie tasted me and teased me. Elizabeth slid down the bed, towards my crotch, for a front row seat of the action. Finally able to bear it no longer, Elizabeth whispered to Stephanie, \"That looks fun, can I try?\"\n\nSmiling at her \"shy\" friend's request, Stephanie let my dick slip free of her mouth and gestured for Liz to go ahead. \"Actually,\" Elizabeth clarified, \"Could we do it at the same time? It's less scary if you do it with me.\"\n\nI almost came just imagining what would happen next. Both girls lowered their heads to opposite sides of my erect shaft and slowly began licking me, tasting and savoring the texture of every ridge and vein. They wrapped their wet lips around either side of my column, kissing the sensitive skin. Occasionally their lips would brush up against each other and they would exchange a playful kiss with my dick in the middle.\n\n\"That feels unbelievable, you guys,\" I moaned, \"You have to let me use my mouth on you, too.\"\n\nThe two babes exchanged a telepathic glance the way only teenage BFFs can, nodding in silent agreement with each other. \"I'm still recovering from what you did to my boobs,\" Elizabeth said.\n\n\"I'd love to,\" Stephanie whined, \"But I'm having too much fun doing THIS--\"\n\nShe pointedly sucked me into her mouth. I moaned, struggling to speak, \"Why don't we--oh wow--why don't we do both at the same time?\" It took Stephanie a second to figure out what I meant, but as soon as she got it, her eyes lit up with desire. She crawled over me, those big pink tits dragging along my chest as she went, then she twisted around and carefully straddled my face.\n\nElizabeth let up on my blowjob to watch as her best friend's hot honeyed core pressed down onto my waiting mouth. In this position, my whole universe became Stephanie's pleasure. All I could taste were her slippery-smooth vaginal lips. All I could smell was the scent of her arousal. All I could hear was the splashing as I lapped away at her, and the moans of her pleasure in response. It was intoxicating. Unlike anything I had ever experienced. I loved it.\n\nI couldn't really see from my position, but I knew the two BFFs well enough to know that they were looking each other in the eye while my tongue was discovering the flavor of Stephanie's pussy. I didn't have any experience with other girls to compare it to, but Steph was almost unbearably sweet, like pancake syrup dribbling all over my face.",
        "Her hips squirmed back and forth, and I grew more and more adventurous, teasingly tugging at her labia with my lips. I raised my hands and squeezed her perfectly round ass, hovering right above my head.\n\nAfter that initial shock of pleasure, Stephanie took a deep breath and went back to work, lowering herself down to inhale my cock, smushing her tits against my belly in the process. I felt Elizabeth's mouth move lower to make room, happily licking and sucking on my sensitive balls.\n\nIt was stimulation overload. I groaned loudly, finding it more and more difficult to hold back my pending climax.\n\nStephanie was getting close, too. She began rhythmically humping my face and I responded to her increased activity with powerful licks to her clit. Having two girls slurping on my junk made concentrating on Stephanie increasingly difficult, and I could tell from Stephanie's stilting sucking that she was likewise having trouble staying focused. But we both powered through the pleasure and picked up the pace, our ecstatic moans muffled by each other's bodies.\n\nStephanie shifted her weight on me enough to powerfully grab at her own tit, tweaking her nipple as far as she could. In my periphery, I could vaguely make out the image of Elizabeth's dark hair bobbing dutifully between my legs.\n\nIn a moment of inspiration, I released one of Steph's ass cheeks and wiggled a pair of fingers up inside her slippery wet twat as I latched my mouth onto her clit--\n\nOh man, did she ever cum. She wrenched her lips off of my cock and howled in pleasure at the moon. It was the sexiest sound I'd ever heard. Her pelvis spasmed against my mouth.\n\nSeeing my poor desperate penis suddenly unattended, Elizabeth released my balls and leapt at the main course. She devoured me with her warm mouth and sucked like a vacuum.\n\nIt was too much for me to bear any longer. I wrapped my arms around Stephanie, squeezed those glorious tits--\n\nAnd blasted my load into sweet little Elizabeth's mouth. She reflexively released me--cold feet, I guess--which meant my next blast splattered across her face.\n\nStill delirious in the throes of her own orgasm, Stephanie attacked the spurting cock in front of her, slurping and swallowing every sticky drop that poured out of me. For a moment, Elizabeth was undecided what to do with her mouthful of cum, but after seeing Stephanie's example she went ahead and swallowed it like a champ.\n\nNot even realizing what she was doing, Stephanie leaned forward and licked my gooey white cream off her beautiful friend's face. She was a fiend for the stuff.\n\nSpots danced in my vision and every inch of my body tingled with electricity.\n\nAfter a minute, Stephanie and I came down from our blissful high to find Elizabeth giggling uncontrollably: \"I can't believe we just did that! My whole life, nobody ever even touched me, and then, all of a sudden\u2014and I can't believe I actually came from him just touching my boobs! That was awesome!\"\n\n\"Sweetie,\" Stephanie cooed to her friend, \"You have GOT to let him try to this oral stuff on you. It's never felt anything like that when I touch myself; it was a whole 'nother level.\"\n\n\"Oh man, wow girls,\" I added lamely, \"That was just... wow.\" Not exactly the most debonair of comments, but in my defense my brain was pretty much drained of blood at that moment.\n\nThe three of us snuggled up together in a mess of happy, sweaty bodies. We spent the next few hours relaxing together, exchanging sweet little kisses and softly grazing our hands across naked skin. I took turns spooning each of the girls, my recently relieved dick resting comfortably in the crease between their smooth ass cheeks while the other girl pressed her bare 34DD tits into my back and caressed my butt.\n\nIt was a perfect night, just lying there with the two of them and chatting excitedly about our recent escapade. There was no pressure, no fears, no weirdness, and no performance anxiety. We were all such great friends it was just easy. Exhausted, we agreed that we had been idiots for not doing this before and drifted off to some seriously sexy dreams.\n\nI woke up in the middle of the night with a raging hard-on and a naked goddess on my arm. Faint moonlight shone through my window blinds, warping stripes of illumination around Elizabeth's every voluptuous curve.\n\nI discreetly slipped off the bed, grabbed a pair of boxers, then headed downstairs to get a glass of water and see where Stephanie had disappeared to. I found her sitting on my couch, in the dark, all by herself. She jumped a bit at the sound of my footsteps on the stairs.\n\n\"Hey, it's just me,\" I whispered. Stephanie was dressed in one of my T-shirts, but with her being a scant few inches shorter than me it barely covered her up. The braless breasts beneath swung nicely when she turned towards me.\n\n\"Sorry,\" she said, \"I woke up and couldn't go back to sleep. Too much on my mind. Tonight was amazing, but it's kind of a lot to take in. And I don't just mean what happened with you, I mean everything with Elizabeth, too. She was always so innocent! I took it upon myself to shelter her from things like this. Now that's all over, and I just can't wrap my head around the fact that we... well, that we basically had a threesome with you.\"\n\nAs I got a bit closer, I could see that her eyes were watering up. \"Elizabeth will be fine,\" I assured her. \"I think she did exactly what she wanted to.\" I sat down on the couch beside her and pulled her into a big, safe hug.\n\n\"I know, it's not that. I'm happy for her. For all of us. It's just a really big, really sudden change to how I thought things were.\"\n\n\"Nothing's changing,\" I promised, \"We were all great friends before tonight, and we'll all be great friends in the morning. The only thing that's changed is how a bunch of this sex stuff; these things that were freaking us all out because we'd never tried them before; suddenly they don't have to be scary anymore. Like for example, before I went down on you tonight, I had no idea whether I would even like that. How it would taste, whether I'd be any good at it, all kinds of stuff. Now I'm not nervous about it anymore. I know what it's like, and I know I want more.\"\n\nShe lifted her eyes to meet mine and I kissed her. As her soft face pressed against mine, I felt her tears on my cheeks. \"I'm not scared of it anymore,\" she panted, taking a moment to wipe away the moisture beneath her eyes. \"I'm not scared of any of it when I'm with you.\"\n\nWe kept kissing in the moonlight for what felt like hours. I loved the feel of her warm body in my arms, the caress of her lips against mine. It felt reassuring; reminded me I was really there. She climbed onto my lap, her palms caressing my chest as she settled her bare pussy down onto me, the thin cotton of my boxers all that stood between us.\n\nI could feel her warm wetness seeping through the material as we kissed, our pelvises involuntarily rocking against each other. With each slow, agonizing movement, my erection slid further and further out of my fly, the shaft rubbing directly against the her slippery outer lips. Skin on skin.\n\nStephanie moaned into my mouth as we slowly ground out genitals together. Her body penned my dick down to my pelvis, meaning I couldn't penetrate her. But that hot, sopping wet pussy felt incredible as it glided up and down my rigid length. I rolled my hips forward, grinding my swollen cockhead against her clit. My arousal was unbearable, but it was unbearable in the best way possible.\n\nThen she said the magic words: \"I want--I want you inside me.\" The sentence a guy spends his whole adolescence waiting to hear. \"It's okay,\" she hurriedly added, \"I'm on the pill.\" Good thing too, because I'm not sure either of us would have been able to stop at that point anyway.\n\nWithout further ado, I grabbed the T-shirt she had stolen from me and pulled it over her head, drinking in the sight of her enormous naked breasts in the moonlight. I rolled our bodies down to the couch cushions, her lying comfortably on her back, me on top. Steph's hands impatiently reached up and pulled my boxers down around my knees, letting my cock spring free mere inches above her nubile young body.\n\nWe waited one final moment, looking deeply into each other's eyes for confirmation\u2014\n\nI nudged my tip inside her delicate folds. Stephanie let out a sudden gasp at the sensation. I could feel her heart beating wildly through her breast. I froze for a second, worried I'd hurt her, but then I felt her pelvis pushing forward to take up the slack, drawing me in deeper. I matched her speed, wanting to keep her first time as comfortable as possible, feeling every blissful millimeter of progress.\n\nOur mouths found each other, kissing tenderly. Hands caressing faces. Sharing something extraordinary with each other. Then, far more easily than either of us expected, I was all the way inside. I'd heard so many urban legends and horror stories about the pain of a girl's first time, but it simply wasn't an issue for Stephanie. We both glanced down to see that I had bottomed out and she let out a huge sigh of relief.\n\n\"Oh, thank God! I was so scared it would hurt!\"\n\n\"Me too!\" I laughed and held her close, still disbelieving that I was really inside her. I kissed away the fresh tears on her cheeks and she looked me in the eyes, earnestly suggesting, \"Let's keep going.\"\n\nStephanie's hot, tight wetness squeezed around me, stimulating every cell of my penis as I slowly pulled out and then slid back home. I had come twice tonight, but that was hours ago, and I knew almost immediately that I wouldn't be going for a world record here. This felt way too good.\n\nShe arched her back, rubbing her erect nipples up against my chest. Her eyes rolled back in a trance of pleasure and I knew we were both getting close. Soft, adorable meows of happiness came out of her with every quickening breath\u2014God, it sounded sexy--\n\nSteph sucked my finger into her mouth and that was all I could take. There was no holding back, so I just let myself go and emptied everything I had into her, grinding my pelvis against her clit as I came. Through the haze of my orgasm, I felt every muscle of my lover's body tense around me, heard her breath catch in her throat, felt her fingers' death grip on my ass--\n\nThen she relaxed beneath me, recovering from a very different orgasm than the \"howling at the moon\" one I had given her with my mouth a few hours ago. It was marvelous to witness: just as intense, but in a quiet, intimate way.\n\nWe collapsed together, recovering. I thought about what to say to her. What is a guy supposed to say in this situation? \"Thank you?\" A million possible phrases ran through my head. Cliches, things I'd heard in movies, read in books... None of it was real or right for the moment. Then I realized that the way I held her in my arms said all that I needed to, and I shut my mouth.\n\nShe rolled on top of me, her big breasts spilling out across my chest. That was the last image I can remember before we fell asleep.\n\n............................\n\n\"Did it hurt?\" I heard Elizabeth ask.\n\nMy eyes hadn't yet opened, but my brain was just alert enough to make out what the girls were whispering in the kitchen. Curious, I decided to feign sleep for another few moments.\n\n\"No, not really,\" Steph answered, \"but I was super horny. If I hadn't been so turned on I think it probably would have hurt a lot more.\"\n\n\"Was it weird? I mean, doing it with Ian? Do you feel weird now?\"\n\n\"I dunno! I don't think so. It wasn't like before, with the three of us. That was just, like, pure fun. When he was actually inside me, it felt more--I don't know, it's hard to put into words. It felt more special, I guess.\"\n\nI felt a warm bolt of energy in my blood. She was special. She was my special girl. My first ever--well, my first ever everything, practically. We were more than friends now, I knew it in my heart. And I was sure she knew it too. A nagging voice in my head cautioned that I was getting carried away, but I quickly shoved it aside. Whatever emotion I was feeling for Stephanie at that moment, be it love or something more elusive, was the best feeling of my life. I didn't care what it meant.\n\n\"So,\" Elizabeth pressed hesitantly, \"will you be wanting me to leave him alone, for the time being?\"\n\n\"No way, sweetie! Not after seeing how much fun you had with him last night. I think it's great that we have a friend like Ian we can try this stuff out on without it being scary. Plus it was sorta sexy watching him play with you.\"\n\nElizabeth giggled, \"Yeah, I liked watching you, too. I don't mean I liked it in a 'Talia' way, obviously. But in like--maybe like that time we all watched Amy's porno movie?\"\n\nThen they started talking about that porn, then funny porn they had seen online, then funny cat videos they had seen online. There was clearly nothing further to be gained by pretending to sleep.\n\nTrying to be discreet, I \"woke up\" and waved at the two girls, conspiring in the kitchen. While I was still completely nude, they had been awake long enough to shower and slip back into the change of clothes they had brought yesterday. Both had their hair up in simple ponytails and no makeup.\n\nEver since that day, I've always found it incredibly sexy seeing a girl before she's done her morning ritual. Maybe because it's a sign of how comfortable she feels around me; willing to let me see her without any concealer or cosmetic distractions. Emotional stimuli trumps purely physical stimuli every time, in my book.\n\nBoth beauties gave me naughty, knowing smiles, quite obviously checking out the morning wood I was sporting. Elizabeth teasingly chided me, \"Good morning, mister guy-who-left-me-alone-and-naked-in-bed-last-night.\"\n\nI blushed, \"Sorry Liz, I went downstairs to see what had happened to Stephanie and we\u2014uh--talked.\"\n\nBoth girls burst out laughing at my choice of words. I promised Elizabeth I would make it up to her by fixing breakfast and went into the bathroom to do my thing. I took a quick shower, brushed the morning taste off my teeth, slipped on some clothes, and rejoined the two young women in my kitchen.\n\nSince we had burned a lot of calories the previous night, I went the extra mile with breakfast: spinach omelets, hot tea with honey, sliced grapefruit, and lemon zest pancakes. I'm no chef, but I can typically put a smile on someone's face when I really put effort into a meal. I'd cooked for all five of my female buddies a few times in the past and they all considered it a special treat. This morning the three of us wolfed down the food.\n\nStephanie popped the last bite of pancake into her mouth and commented that it was her new favorite type of pancake, even better than her little sister's \"chocolate chip\" recipe.\n\nElizabeth's face brightened at the word \"chocolate.\"\n\n\"I just remembered!\" she laughed. \"We never made s'mores last night! I brought everything for them, but with everything that happened we forgot about it!\"\n\nMe and Stephanie were a bit taken aback by her sudden, extreme enthusiasm. I guess the girl was really craving s'mores, because she didn't let the matter drop until I had a fire going in the fireplace and we were roasting marshmallows.\n\nI felt a prickling of sweat on the back of my neck and thought to myself, this is why you don't make s'mores during the day. I was just glad it was still pretty early, and we weren't experiencing the full fury of the California sun, coupled with the heat from the fire. Still, not wanting to spoil the fun with a lot of complaining, I kept my mouth shut and enjoyed the girls' company.\n\n\"It's kind of hot,\" Elizabeth observed, reading my mind. \"Maybe we should just take off our shirts.\"\n\nSo that was why she was so anxious to make S'mores. I stifled a laugh at the obviousness of her ploy and pulled off my shirt with exaggerated relief:\n\n\"Ahh, so much better.\"\n\nSeeing that I was playing along with her little game, Elizabeth followed my lead, tugging off her tank top to reveal her 34DDs contained within a plain beige bra. Not the flashiest of lingerie, but there was no bra on earth that could make the enormous tits on that tiny girl look less than jaw-dropping.\n\nSteph went next, revealing her curvaceous chest encased in a lacy green demi bra.\n\n\"Now my jeans are too hot!\" Elizabeth sighed with mock sadness, peeling her jeans down past those Boticelli hips and over her juicy ass. Her bikini underwear was nearly transparent, and the shadow of the dark curls beneath brought me to full hardness before her pants even touched the ground.\n\nSteph and I took our pants off as well, looking to our friend for the next move. \"Okay, I think I'm good now,\" Liz said. I made a pouty face at that, prompting her to add, \"Except my boobs are getting all sweaty in this fucking bra!\"\n\nShe tossed her bra at me and I openly stared. Another bra landed in my lap and I looked over to see that Stephanie was also topless. I quietly whispered my thanks to the universe that had allowed this to happen.\n\nElizabeth continued to play innocent, skewering two marshmallows on a stick and leaning towards the fire, her breasts swaying as she roasted her treat. She glanced back over her shoulder and asked, \"Stephanie, would you like the first one?\"\n\nStephanie nodded, disarmed by the teasing tone of her friend's voice. Elizabeth took the marshmallows away from the fire and poked them with her finger, testing the temperature of their molten gooey centers.\n\n\"Perfect. Except I think we should skip the graham crackers today. Too many carbs.\"\n\nSteph and I both laughed. Right, marshmallow and chocolate alone is the healthy alternative.\n\n\"So...\" Liz continued, crawling towards me with those breasts, \"I say that we use each other as our graham crackers.\"\n\nBefore Stephanie could react, Liz smeared the marshmallows all over her friend's glorious chest. Stephanie shrieked in surprise, and we all burst out laughing. \"It's so sticky!\" she complained.\n\nBut I wasn't complaining. I launched myself at Stephanie, playfully tackling her to the ground as I greedily licked the molten marshmallow off her tits. Liz cheered victoriously; her wicked scheme had succeeded.\n\n\"Stop, that tickles! That tickles!\" Stephanie played at fighting me off until my roving tongue found her nipples. At that point, her efforts to make me stop became much less convincing.\n\nSuddenly, Liz yanked me off of Stephanie\u2014prompting a whimper of disappointment from the stunning blonde\u2014and forced me onto my back, lathering warm roasted marshmallows all over my chest. Yeesh, it was even stickier than I'd imagined.\n\nElizabeth pounced on me like a jungle cat and began licking and kissing the delicious campfire dessert off my chest with wild, exaggerated abandon.\n\n\"Revenge!\" Stephanie shouted, and hurried over to join her friend in devouring me. The sight of their hungry tongues licking off that marshmallow couldn't help but fill my mind with lewd images of these two topless bombshells fiendishly slurping up another type of sticky white goop.\n\n\"Hold on, I have to get the chocolate!\" Elizabeth shouted. Instead of the traditional Hershey's squares, Elizabeth had brought a jar of homemade fudge which we had microwaved until it was nicely hot and filling the house with a delicious chocolate smell. She dipped a finger into the melted chocolate--again testing the temperature--then smeared it all over me with the enthusiasm of a finger-painting preschooler.\n\nThat completed, I just laid back and enjoyed being the entree while the two of them ravenously licked me clean. When they finally finished, I looked down at the pair of minxes, whose mouths were covered in fudge like a couple of children. Their voluptuous bodies and lusting eyes were all woman, however, and I amorously pulled their faces to mine, kissing all the chocolate from their lips.",
        "\"Okay, me next! Me next!\" Elizabeth chirped, skewering three more marshmallows. As she focused on roasting them, I approached from behind and cupped one of her substantial tits, whispering into her ear, \"I wanna lick that stuff off your tits, and then I'm gonna eat your pussy just like I did Stephanie's, right here in front of her.\"\n\nLiz shivered at my voice and I played with her breasts until I couldn't wait any longer. I took the marshmallow stick from her, placed it between her titanic breasts, and squished them together, smearing hot gooey marshmallow. Stephanie was right behind me with a handful of melted fudge which she generously rubbed into her friend's tits.\n\nI grunted with desire at the double-D dessert displayed before my eyes.\n\nI dove in, not caring about the mess, not caring about the chocolate I was getting on my face. Licking and sucking and licking some more. Consumed with gluttony.\n\n\"Mmm...\" Elizabeth moaned as her delicious nipple popped briefly free from my suckling lips. \"Mmm,\" indeed, I thought. Unexpectedly, I suddenly found Stephanie's face beside mine, licking Elizabeth's other enormous tit-s'more with equal relish. Elizabeth's eyes went wide at the sight of her friend's mouth on the mound of her breast, but she was clearly enjoying the sensation too much to say anything. Our two tongues swirled simultaneously around her two nipples.\n\n\"Lay down,\" I ordered Elizabeth, who was only too happy to comply. I kept licking away at her marshmallow chocolate tits as I slid my hand down the waistband of her panties and gently diddled her pussy. She was completely soaked down there and I was dying for a taste, so I pulled off her see-through panties and poured a trail of hot fudge down from between her breasts, across her navel, and then onto her glistening vagina. Her toes curled at the sensation.\n\nI trailed my tongue down that line of chocolate (did I mention I'm a chocoholic?), getting a pretty crazy sugar rush by the time I had reached her pubic hair.\n\n\"Yes, please do it. Oh, please...\" she moaned. Liz was positively writhing in anticipation: panting, fingers scratching at the carpet, thighs anxiously rubbing together--\n\nI pressed my tongue directly into her sweet, chocolate covered pussy.\n\n\"Yesssss...\" Elizabeth's groans grew louder and louder as I pushed my tongue as deep inside as it would go. Her own hot juices mixed with the coating of chocolate to make an irresistible cocktail in my mouth. I playfully shook my head back and forth, prompting Liz to reflexively pound her hands down into the carpet in wild ecstasy.\n\nWhile doing this, I noticed Stephanie was distracted, still busily sucking away on Liz's nipple\u2014\n\nSo I was able to catch her completely off-guard when I snuck my free hand up under her ass and inserted my fingers in her snatch.\n\n\"Oh fuck! Lizzie, he's got his fingers in me!\"\n\nElizabeth was too far-gone to hear her. She just violently pulled Steph's face back down to her sensitive nipples. As soon as Stephanie renewed her sucking, Liz passed the point of no return and began rushing inexorably towards orgasm. I let the fingers inside Steph work on auto-pilot while I focused everything I had on bringing Elizabeth to a transcendent climax, rubbing my tongue against her clit--\n\n\"Oh God! Oh God!\" Elizabeth's sweet voice went up several octaves in pitch, and it just spurred me on. I kept licking, Liz kept cumming, and my fingers kept pistoning in and out of Stephanie until, less than a minute later, she too exploded with pleasure.\n\nWhen the dust had settled, I snuggled up against Liz, gently caressing her jerking, post-orgasmic body.\n\n\"Now I really am sweaty,\" she joked. She pulled me in for a fiery kiss, no doubt tasting a bit of herself on my chocolate covered lips. \"Thanks, Ian,\" she mumbled. \"That felt unbelievable. I think you've found your calling.\"\n\n\"Happy to do it,\" I answered, beaming.\n\nLiz turned to Stephanie and the girls recovered from the ordeal in each other's arms, panting, their four big breasts folded together. \"Steph,\" Liz sighed, \"I can't believe you did that.\"\n\nStephanie blushed, \"Well, at first I just thought it would be fun to lick off the chocolate and marshmallow, but then it seemed like you were really enjoying it so I figured, why stop? You're my friend and I want you to be happy.\"\n\nElizabeth chuckled contentedly. \"Well thanks, I'm glad you didn't stop.\"\n\n\"It wasn't as weird as I thought it might be,\" Steph whispered, \"I wouldn't want to do that to any other girl, but you and I are so close, it's almost like I'm just touching myself.\"\n\nSimultaneously, they both glanced down at my boxers and saw that my dick was still hard enough to cut glass. A huge dot of pre-cum darkened the fabric.\n\n\"Oh no, looks like we forgot to take care of someone,\" Stephanie observed. Elizabeth sat up, her hair a complete adorable disaster. \"I've got just the solution,\" she smirked. \"Ian, you seem to be a 'breast man,' right?\"\n\nI nodded dumbly, unable to take my eyes off the four gigantic tits on display.\n\n\"Well,\" Elizabeth continued mysteriously, gently fondling her own breasts, \"why don't you sit down on the couch while we use our boobs to get you off?\"\n\n\"You mean like in Amy's video?\" Stephanie asked. Elizabeth nodded excitedly.\n\nChrist.\n\nTit-fucking had always been a major fantasy of mine, but at my young age I was ashamed to confide that fact in anyone. I worried girls would think I was weird or perverted. Now here was shy little Elizabeth, of all people, offering to fulfill that fantasy with not only her own glorious breasts, but her friend's matching pair as well. And at the same time!\n\nWith at least ninety percent of my blood now concentrated in my dick, I stumbled back onto the couch and forgot how to breathe while they scurried towards me on their knees.\n\nThey started with oral, trading my painfully hard erection back and forth from one warm pink tongue to the other; licking every inch of me until my shaft was slippery wet with saliva. Then they took turns licking each other's cleavage before my eyes, working away until the insides of their breasts were equally slick.\n\nThen it was finally time for the main event. I throbbed in anticipation as Elizabeth placed her own tiny hands on her disproportionately enormous breasts, slowly pulled apart her epic cleavage, teasingly positioned my iron rod between those big, soft, wet titties, then, at long last, lovingly squeezed them together.\n\nThe physical sensation of the silky, bountiful flesh enveloping me was utterly fantastic, but the real joy of the moment was the visual stimulation: the image of those beautiful melons wrapped around my cock was forever seared into my memory. Elizabeth cupped her breasts, pumping them up and down around me.\n\nMeanwhile, Stephanie kneeled on the couch beside me, nibbling on my neck while she presented her own sizeable endowments for me to occupy my hands with. I'd died and gone to breast-lover heaven. I squeezed away at Steph's smooth, malleable orbs while my eyes stayed glued to the hypnotic undulations of Elizabeth's bouncing bosom. With each downward stroke, the head of my erection would poke out through the top of her cleavage and her boobs would slap down audibly against my pelvis.\n\nAs my pleasure built, my hands squeezed Stephanie's tits with greater urgency, using them like 34DD stress balls. Stephanie picked up on this and increased her rhythm accordingly. I could sense my climax approaching...\n\n\"Switch!\" Elizabeth shouted. She promptly pulled her luscious melons off of me, bringing my arousal back down to manageable levels. It felt like a sudden rush of cold air had blown across my unattended cock. Stephanie hurriedly took her friend's place between my legs, sensuously holding my gaze while she lowered her boobs around my cock. My God, those tits were so big my whole seven inch cock practically disappeared from view.\n\nLiz took up Stephanie's old position at my side, teasingly draping her heavy breasts across my face. Steph worked away at me with her slippery cleavage, rising and falling, those glistening pink tits squished so tightly together I imagined that I was creating a perfect dick-shaped indentation between them.\n\nIt felt way too great. I knew I wouldn't last--\n\n\"Switch!\" Stephanie shouted sadistically. Again the girls traded places, and again the brief respite from stimulation let me get my orgasm under control. They did this every few minutes: just as I was about to lose it, the girls would stop for a few seconds and I'd get a new pair of jugs around my cock. But I wasn't superhuman. Each time they traded, it took less time for me to reach the breaking point.\n\nAfter a half dozen trades I was literally panting with desire. Stephanie's tits were pumping away on my cock while Elizabeth straddled my chest, her cunt riding my abdomen while I buried my face in her cleavage. I guess Elizabeth decided I'd finally endured long enough, so she slowly lowered herself to the floor\u2014sliding those huge soft knockers down my body as she went.\n\nI was completely unprepared for what happened next.\n\nOnce again communicating via the silent telepathic skills that only teenage girls possess, my vivacious lovers took up matching kneeling positions on either side of me. My pulsing time bomb of a cock stood at the epicenter as they leaned in and pressed all four of those magnificent, 34DD breasts together to form an entire ocean of succulent flesh for me to play in.\n\nI had never seen this before, not even in pornography. These girls really were the best friends a guy could ask for.\n\nThey reached forward, softly groping the sides of each other's breasts to make sure the seal around me was air tight--then they started rising and falling together atop my dick. My mushroom head speared out the top each time they descended.\n\nBut I wasn't the only one enjoying the experience as they worked me over. The girls' sensitive nipples rubbed and twisted against each other, charging them both with erotic energy. Elizabeth's creamy white orbs took on their characteristic deep flush and she moaned, frantically increasing the pace of my double tit-fuck.\n\nI screamed through clenched teeth, holding back as long as I could to prolong the sensation...\n\nAroused beyond reason, Elizabeth leaned forward and pressed her pouty young lips against Stephanie's--passionately kissing her beautiful friend--THAT DID IT.\n\nCum shot out of me like a geyser, spray after spray blasting up beneath their kissing mouths and raining down across the expanse of exposed cleavage. Every molecule I had left of the stuff evacuated my body and launched out into the open air.\n\nSatisfied with their handiwork, the girls pulled apart, leaving sticky strings of semen trailing between their matching breasts. I collapsed into the couch, thoroughly spent.\n\n\"Best. S'mores. Ever.\" Stephanie joked.\n\n(For obvious reasons, the next chapter of Bosom Buddies will not be submitted in the \"First Time\" category. If you like what you've been reading, keep an eye out for Ch. 4 under \"Erotic Couplings.\")"
    ],
    "authorname": "bosombuddies",
    "tags": [
        "big tits",
        "mff",
        "high school romance",
        "tit-fucking",
        "titty fuck",
        "best friends",
        "nerd",
        "food",
        "chocolate",
        "threesome"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/bosom-buddies-ch-03"
}
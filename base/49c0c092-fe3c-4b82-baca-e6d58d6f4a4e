{
    "title": "My Only Talent Ch. 19",
    "pages": [
        "I had enjoyed the Thanksgiving visit with my parents, but I was looking forward to the drive back to Austin, as Nora and I were under the afghan in the back seat of the Suburban, and she coyly brushed my cock with her left hand, but then seemed to settle into deep sleep. What a tease. I watched her carefully, and with her eyes still closed, she languidly ran her tongue over her lips and smiled. She was a natural prick teaser, even in her sleep! I decided to send her one of my Suzie blasts, and it wasn't hard to anticipate what was on my little monkey mind. I hadn't ejaculated since that \"nice big one\" that Lara had commented on after she had intercepted it on its way towards Millie last Tuesday night, and it felt like my reservoir was at least a quart high, if not more so. I sent an image to Nora of her touching me as she just had a moment ago, and thus triggering a massive wad that shot all over her face and platinum hair. She drew in a big breath, pushed against my right leg with her left hip, and licked her lips again and sighed contentedly. That just made it worse for me!\n\nI tried to console myself by reading the record in her Suzie event data recorder from last night at Babe's Club, and was pleased to learn that I really had been much more important to her than the rest of the audience combined, and in fact, most of her excitement had come from the idea of titillating me, not them. I also discovered some linked signals that proved to be fantasies of some future event wherein she provided me with a private show in a much smaller and more intimate venue, and received a lot more than applause from me. It was beginning to look like Nora was very much my kind of girl. I just had to figure out how to get from here to there, hopefully immediately after she returned from England over Christmas, if not sooner. \n\nThe rest of the trip was pretty much a non-event. There was plenty of traffic on the interstate heading south to Austin, but Alley wove her way through it as quickly as she could. We dropped Jay at the Phi Iota Gamma house, and then she drove Nora and I to the dorm, getting out for full body hugs for both of us. Nora and I agreed to meet for early dinner after heading upstairs to drop our stuff off. We went through the serving line together, finding the fare much less well prepared than Grandma's, but certainly available in sufficient quantity. I was already very hungry, and not just for supper. \n\nAs we ate, we began a surprisingly superficial conversation about the final academic work to be done before the Christmas break: how profs often tried to catch up by cramming six weeks' worth of as yet uncovered material into the barely three weeks before final exams. Nora certainly had it worse than I did, as she was carrying 21 semester hours plus a TA job, but since we both had kept up almost daily with things during the semester, we were confident we could persevere. By this safe topic of conversation we studiously avoided another obvious subject: I was going to spend the rest of the night with Lara and Suzanne, not Nora, and I was painfully aware that I had recently 'Suzie sent' to her my completely unexpurgated feelings of passion and tenderness for both of the other girls. At least I had also let her know I felt the same way about her, or certainly wanted to. I introduced the subject via Suzanne's impending arrival from San Antonio, trying to suggest that we greet her warmly together, but she begged off, saying she had a lot of work to do to prepare for the first meeting of the Econ 101 class that she and Suzanne both were TA's for, and then she headed upstairs to get to work, without any further warmth for me, or Suzanne. I went back up to the room alone and lonely, brushed my teeth, and then had an hour or so to kill before heading over to Lara's place.\n\nMy roommate Kevin, if he ran true to form, would not arrive until late tonight, and he would attend his first class tomorrow with a massive hangover. So I had the room to myself for a while. I turned on my laptop and decided to catch up with the email traffic I had blissfully ignored while at my parent's house. Most of it was routine stuff, but there were two unexpected missives: one from the TA for Bob the Knob's spring semester ultra conditioning PE class that Suzanne had gotten me into; and one from Barry T. Fermy, the aggressive VP of Sales at Lara's dad's insurance company. \n\nThe email from the PE class seemed like a set of military orders: you will complete the following actions by the indicated dates or you will be dropped from the class roll before the spring semester even begins, and by the way, there are 3 people on the waiting list for every position in the class, and they are ready to add the class as soon as you are dropped. It all made sense, in a certain way. I was to submit to one of the most complete physical assessments I had ever even read about: every part of me was to be weighed, measured, skin pinched, photographed, palpated, and written up for my 'before' document. I was to be dipped in a giant vat of water to accurately determine my density, muscle weight, and body fat. I would do an extensive set of lung function tests and treadmill tests complete with a full motion ultrasound of my heart while I exercised. They would do range of motion measurements and strength tests on every skeletal muscle I had, and all this had to be completed well before finals for this semester. Another set of things to cram into my already full schedule. About the only choice I got to make was whether all these very intimate examinations and assessments were to be done by a male or a female graduate student, both of which were PhD candidates in physiology supervised by Bob the Knob. All of this was in addition to my previous commitment to Suzanne to complete a full marathon run before Christmas break! \n\nBarry T. Fermy was planning to put me to work closing a deal to underwrite insurance for projects done by Abelard Peter's giant multinational construction company. He would respect my school schedule and not require me to travel until I had completed my final exams, but he considered me available to schmooze Abelard Peters via conference calls or emails anytime and that every day between my last exam and the night before the spring semester began was his to schedule and use, including travel as he required. Barry was happy to pay me my potentially large commission under the plan if we closed a deal, since he got an override, but he wanted to make doubly sure that I did what was needed to make it happen. Well, at least I wouldn't get bored over Christmas break, and my mom would get to enjoy thinking how smart she had been to insist on buying me two decent suits to replace my old J.C. Penney specials. He gave me an accelerated schedule to get a passport, but thanks to some recent family vacations, mine was up to date and ready to go. Barry said he would take care of visas if they were required for any specific destinations. That sounded mysterious.\n\nSuddenly it was time to walk over to Lara's place, and my dick was suddenly awake and throbbing in anticipation of getting some long delayed attention. Suzanne should arrive about two hours after Lara, and I was ready, willing and hopefully able to be sorely taxed by both of them, in any order or combination. I practically floated over to Lara's apartment tower, enjoying the cool breeze and anticipating a warm welcome. My timing was almost perfect, as I rounded the corner just as I saw Lara's little Mini Cooper turn into the multi-level parking garage, and I jogged to meet her at her assigned space. \n\nJust as I arrived at the parking space, she unfolded her long legs from the Mini and my breath caught in my throat. Had it really been a week since I had seen this wonderful vision? She was wearing dark brown leather boots with skin tight black stretch pants that perfectly outlined her incredible backside with an equally tight white turtleneck that made it clear her nipples were responding very well to the cold outside air. Her blonde hair was up on top of her head in a tight bun, secured with what looked and smelled like sandalwood chopsticks wrapped with the end of a small brown bullwhip that amazingly matched the leather in her boots. I was hit with an olfactory wave of her perfume, the sandalwood, and the leather, arriving at my nose just after my eyes took in that black, white and blond look and her tight little smile on that incredible face. And then a clarion Suzie signal burst from her and drilled right into me, saying \"This is my man and he is going to take me any way he wants\". She was so my kind of girl, and I wanted her in every way I could think of. \n\nAlthough she had only been visiting her Dad and Grandma for a week, she had three suitcases and a cardboard box completely filling the back of the Mini (which she referred to as her 'Baby Beamer'), and I put the big roller on the ground and stacked the other stuff atop it, then rolled everything over to the elevator. That freed my arms for hugging while kissing on the way up, and once we were inside her door the suitcases were destined to remain stacked up for a while. Lara plastered herself to me, and I did my best to put my hands on every smidgeon of her perfect butt. The smell of the sandalwood and leather in her hair evoked images of her sweet submission to me, and I immediately pictured my hand on that hair bun handle, directing her lovely head as I desired. She quickly shed all her clothes, but when she reached for the hair bun, I stopped her, putting my hand on it and pulling her head back and her lips up for a deep kiss. It was even better than I thought. \n\nI carried her into the bedroom, and laid her out spread-eagled across the bed, spreading out her hands so they gripped the bedposts, telling her, \"Your arms are bound with invisible magic rope, Lara. You cannot take them loose from the bedposts unless I tell you to. They also make you more sensitive to my touch, and they hypnotize you such that you have to tell me everything you think and feel while I touch you. You may not come until I give permission!\" She moaned way down low. I turned on all the lights in the room, and for a moment just marveled at how great she looked. I began to touch and tease her strictly for my own amusement, tuning into her Suzie to discover what resonated best with her. She wanted uncertainly and surprise, experiencing delicious anticipation and knowing that she could not begin to forecast what I might do to her. I began lightly touching her legs, beginning at her knees and trending down. I wondered what she would say in her 'hypnotized' state, and I did not have to wait long to find out.\n\n\"I want you to fuck me like an animal, Robbie! Screw me to the wall like you did in that laundry room. Fuck me hard, long, and deep, and spank my ass while you do it!\" My wonderful primal female animal was back in town, and I was determined to be there for her. \n\nBut for the time being, I responded with only more tenderness and teasing, gently caressing her legs in swirls and flourishes, listening to her Suzie scream out for more direct and hopefully almost brutal contact. Her legs began to get red, and her breathing became ragged. I watched her nipples crinkle and began to smell her perfect pussy smell. I hadn't realized how much I craved that aroma. I began to move my hands just above her knees, gripping the inside edge of her thighs briefly and then releasing to a gentle caress. She pushed her crotch up in to the air. \"Grab my pussy Robbie! Stick your fingers in me!\"\n\nThis was a lot of fun. I teased but not quite pleased, letting her Suzie guide me to increased excitement, but always stopping well short of what she really craved. Inspiration struck me, and I moved toward the foot of the bed, and began to gently kiss her feet. I had never been that much into feet, but hers were as nice as any, and I discovered a surprising Suzie signal waxing with my ministrations. Lara was apparently into feet a little bit, at least she was into having her feet kissed and tickled. She spread her legs and rolled her hips out, and another wave of wonderful smell wafted up to my nose. It taxed my self control to forestall just diving in and wallowing in that beautiful box of hers. I ran my tongue in between her toes, working one foot and then the other and she shivered with both anticipation and frustration. I worked my way up her legs, spending a good deal of time licking the back of her knees, which seemed to modulate her Suzie signal most effectively. \n\nI continued up to that wonderful little area where leg became buttock, lifting her legs up by placing my hands under her knees. Her pussy was wet and dribbling, her beautiful blonde pubic curls glistened, and her smell was absolutely intoxicating. I circled the humid oasis like a cautious nomad, anticipating how sweet the water would taste, but not yet dipping in. It was driving her crazy. She used her hands to grip the bedpost and thrust her pussy up toward my face, but I pulled back teasingly before she could make full and potentially satisfying contact with my mouth. She growled. I loved it. \n\nI approached her labia with little scurries forward and quick retreats, and delighted as she tried to push herself toward me with each advance. I gripped her legs tightly to immobilize them and my tongue began to circle her hot and humid hair pie with clear direction and purpose. She began to mumble. I smiled at her unseen, and became more systematic in my navigation. Each run around the perimeter brought me closer, and I began to flick her swollen outer lips lightly and repeatedly, and noted her jumpy motions in response. I moved on to that wonderful valley between inner and outer lips, occasionally blowing hot air across them. Her gurgling sounded almost painful. I then retreated back to her outer lips and began to gently gum and chew them. Her Suzie signal now filled my consciousness, and I realized I enjoyed it so much that I could do this for a very long time before letting her come. When she did come, I would probably enjoy that even more. I could not have multiple orgasms as rapidly and easily as she could, but my only talent could let me tune into and enjoy them almost as much as she did.\n\nSoon her inner lips were filling my happy mouth and I was sucking on them until they were wonderfully red and swollen too. I put my chin up against the bottom of her pussy and began to tentatively stick my tongue inside, gently stimulating her but studiously avoiding her clit. She drew in a huge breath and took so long before exhaling that I began to worry about her. I used my protruding chin and neck muscles to strongly massage that wonderful territory between anus and pussy, while my tongue continued its increasing penetration of her vagina. Her mumbles became a single word, spoken clearly \"Please, please, please!\" She might have heard me laugh, but she definitely felt my head move as I chuckled. I began to move my tongue in and out of her like a dog lapping up water, pushing more strongly against the walls of her opening and enjoying myself immensely. \n\nI began to just barely graze her clitoris with my tongue at the end of each exploratory stroke, and felt her legs tense in response. So much humid heat was emerging from her pussy that I was reminded of a gently steaming teapot, although her brew was much more fragrant and satisfying than Earl Grey's. She continued her chant of \"please\" even more loudly, and I took mercy on her. \n\n\"You may let yourself come now, Lara!\"\n\nI began a direct advance on her previously neglected clit, feeling it stiffen responsively beneath my tongue. Her legs pushed up and in with increasing isometric tension. I played her like the Theremin we used have in the music room in high school, using her Suzie as my guide, and in this context, I was an accomplished musician. The tension in her legs grew and her Suzie signal pulsed like a slightly out of round rotating buzz saw. Her legs threatened to clamp down on my head, and it took all my strength to hold them apart. Her Suzie signal rose and suddenly blasted right through my head from side to side like electroshock therapy, and a fragrant jet of fluid burst forth from her snatch, her growl morphing into a long \"Ah\" sound.\n\nI never thought that I would enjoy electroshock therapy, but this variant I liked a lot. I decided to give myself another jolt, and bent immediately to the task. Lara cooperated beautifully, with another tasty squirt and delicious Suzie signal crescendo for my listening pleasure. I marveled at my connection to her. I had heard the phrase 'absence makes the heart grow fonder' but I didn't realize it would also strengthen my Suzie abilities so. I brought her off once more, and then felt a very strong personal need for penetration, almost in concert with a similar Suzie from Lara, signaling the same need, but from another direction.\n\nWe were a perfect match. I found my target immediately, and placed all my weight on my thighs plastered to hers, which bore me easily. I tucked my chin beside her lovely neck, and whispered that I loved her, but then discarded all pretense of tenderness and proceeded to fuck her like I was beating a rented mule, because I know that's what she needed, not to mention what I wanted. Once again I felt that blurring of the boundaries between our bodies, feeling myself merge with her, almost feeling that I was penetrating myself. My cock went from wood to stone to obsidian, and my motions were all a concerted yet frantic effort to get as much penetration and friction as I could. She groaned in an almost continuous exhalation, modulated by my frantic motions. \n\nWith no warning from her Suzie, she suddenly burst into a massive orgasm, biting my neck more strongly than she ever had before. I barely noticed it, and continued to plunge into her like nothing had happened. But something had, and it soon happened again. I felt her orgasm pound through me via our Suzie connection, and it sent acceptance and contentment, but it spurred me on not to satiety but to increased desire. My monkey brain was fucking her monkey brain, and both doing exactly what they were meant to do. I increased my pace and force, and would have plunged even deeper into her if I could have. A third thrilling climax ran through her, and me, and suddenly my previously obsidian cock was filled with liquid, and about to overflow. \n\nI now remembered vividly that erotic and fragrant new wood and leather hairdo handle atop her lovely head, and leapt to grab it, slipping my cock into her wonderful warm mouth and glorying in her acceptance and suction. I exploded into her, and she sucked on me so strongly and beautifully that time almost stopped. I certainly could have lived in that moment forever, and it seemed to take forever for me to empty myself into her, and every squirt and subsequent suck was a transcendent feeling. Finally empty, my lust was spent as well, and I lay down next to her, taking her hands symbolically from the bedposts and wrapping them around my neck. I pulled her to me as tightly and seamlessly as I could: calling it a hug would stain it, as I wanted to merge and meld with her. She sobbed, I sobbed, and I kissed her frantically, while we both worked hard to return to a normal breathing rhythm.\n\nShe spoke first. \"Thank you Master! I suppose I could have skipped my entr\u00e9e at supper, as I just got at least my Recommended Daily Allowance of protein from you!\" She snuggled in and kissed me some more. \"That was a huge one, Robbie. I suppose you have been building that one up for several days?\" She smiled and began to gently tease my nipples with her lips and tongue. Talkin' 'bout my girl. Was she the greatest or what? \n\nWe engaged in a little small talk about our family visits at home. She was just as dismayed by her grandmother's accelerating signs of age as I was of mine, and the Thomas Wolfe 'you can't go home' stuff from Rhetoric and Composition was quick to my mind. She was feeling just as slammed by the prospect of the next few weeks crammed chock full with schoolwork and deadlines, but she was still very happy to be back at school. I felt a little pang of sadness and must have put on a hangdog look as she removed her new little hairpiece, and she smiled at me. \"I thought you would like this one, Robbie. I found it in Salado when we were there. Whenever I wear it, it means I want you to think about your cock in my mouth! I know that turns you on so. Let's go take a shower.\"",
        "We enjoyed soaping and caressing each other for a while, and she gave me a little ass worship session that would have met all of Mrs. Douglass's teaching criteria. After we dried off, and while still naked, she pointedly and theatrically put her hair piece back on, watching my reaction with that tight little smile. I pulled on my jeans and went out to the entry hall to collect her suitcases and lug them to the bedroom for her, while she took the cardboard box into the kitchen. When I returned from the bedroom, she put a plastic snap seal container on the counter for me with cookies and some brownies, saying \"Grandma and I made these over vacation. Maybe they will keep your stomach from growling.\" I was just thinking she could not get any better, but I was wrong again.\n\nWe sat on the couch. I wanted to kiss, but she wanted to talk. \"Let's talk about Suzanne for a moment before she arrives, Robbie.\"\n\nI sat and watched her. I suppose part of me was still suspicious of how well the two of them got along, without friction or fractiousness, and how fantastic it was to have both of them in bed. But their swooping Suzies had made it apparent to me on several occasions that they did in fact truly enjoy each other and me, and both had told me that the other one was her 'special girl friend' and they often used the word 'love' when talking about each other.\n\n\"Suzanne has got to be feeling depressed and guilty after spending Thanksgiving down in San Antonio with Mike's parents. I can't imagine how bad that must have been for her. It's like watching somebody die slowly, and his parent's sadness must be contagious and horrible to experience.\"\n\nI couldn't refute that. I was not sure, if I was in Suzanne's place, that I could have gone to see them at all, much less stayed with them over a long holiday. I'd like to think I could face something like that, but I might have ducked the issue. \n\n\"We need to be there for her, Robbie, and take her mind off the sadness and get her back on track.\"\n\n\"What exactly do you have in mind, beautiful?\"\n\nShe smiled that tight little smile again. \"Well, we need to give her a way to purge her feelings of guilt, and feel like she is getting a psychological clean break and fresh start back at school. So I am proposing that when she arrives, we give her some brief and tender hugs and kisses, but then we strip her, dominate her, whip her and fuck her silly until she forgets all about Mike for a while!\" Her tight little smile became a feral grin.  \"She can start by eating my pussy while you spank her and fuck her from behind, at least that's what I would want if I were her!\" Her wonderful little grin was now a hot neon smile. There was a knock at the door, and I marveled at her timing, until I looked up and saw the little monitor near the door for the lobby cam. She must have seen Suzanne on the way up to the apartment. \n\nWe opened the door, and saw that Suzanne did look a little weary, especially for her. She just looked normal, where she usually radiated waves of vitality like a propane outdoor heater on a cold morning on a hotel patio. We both hugged her briefly, kissed her less briefly, and then Lara took the lead. \n\nShe put her hand behind Suzanne's head, smiled her best thousand watt dominatrix smile, and said \"On your knees, slut!\" She pulled her jeans off, and put one foot up on the coffee table, and pulled Suzanne's head between her long legs. Suzanne looked surprised, then bemused, and then her face was buried in those magic golden curls. But I detected a buzzing Suzie signal emerging from her, and I knew that at least she was not thinking about the sadness in San Antonio anymore.\n\nI probably should have gotten in the domination spirit and just fucked her straight away, but I succumbed to a little comparative pussy tasting first. They both got five stars, and I knew it would take me a lot more tasting time to come up with any definitive opinion at all, if ever. Suzanne got wet in about three seconds, but it took me a minute or so to do my initial tasting, and by that time I had my second major hard on of the day, still working off my Thanksgiving deficit. Despite her wetness, she still shrieked a little when I entered her precipitously, and Lara's smile got wider as she felt that little shriek against her golden bush. Lara looked at me expectantly and I just moved back and forth like a dumb fucking monkey, until she pantomimed spanking, and I remembered the plan. \n\nI began to pop Suzanne's super tight little olive skinned butt smartly, in time with my efforts to penetrate her like she was a brood mare, and I heard her Suzie begin to pulse with a raspy overtone of either guilt or resentment toward me. But it was making her very hot, and I was enjoying myself immensely, too. I did my best to get fully into the role, grabbing two big handfuls of her ass and continued thrusting into her with renewed enthusiasm. The sensation of slamming into her muscular backside was even better than I remembered, and it was working for her too, as her Suzie climbed in amplitude and swooped and beat against Lara's. Suzanne was now absolutely filled with desperate lust, signaling a sizzling need that was almost scary, but not too scary. In fact, it drove me a little crazy too. I wanted to fuck her hard. I even wanted to punish her, and I did not know exactly why. \n\nMy vigorous pounding was not perceived as punishment on her part, because she was thrusting back into me in perfect synchrony, and soon she grunted and shook with a muffled sneeze, followed by a villainous laugh from Lara. \"You dirty slut! You know you love it!\"\n\nI was now incredibly hard and almost insensate, thinking about being John Henry again. I was hypnotized by the slap, slap, slap of my thighs against Suzanne's hot little buns, and I never wanted to hear anyone's snapping fingers break the spell. She sneezed again, and her perfect pussy gripped me like a vise, a wonderfully hot and wet vise. Now I was truly in character as John Henry, the steel drivin' man, pumping and thumping her enthusiastically. Suzanne's happy slurping brought Lara off again, and then she stood up and moved over behind me. Leaning over behind us, she casually said \"Don't you want to try that slut's tight ass, Robbie?\"\n\nIt certainly seemed like a good idea to me. It may have been a little sudden for Suzanne though, as I simply redirected my cock into her ass without any fanfare or preparation, and without missing a single steel drivin' beat. Suzanne shrieked and her Suzie got even nastier, signaling a kind of raw and animal lust I had not detected from her before. Luckily I was dripping wet with her sweet pussy juice, and she was now far beyond any need for gentility. It was a recreation of the animal fuck in my dorm room, but with Lara as our audience of one, and an overtone of desperate need on Suzanne's part. I wondered if Lara was not truly right on with the 'purge the sadness' meme, and it reminded me of something Mrs. Douglass had said during one of our pillow talk breaks between my early sex lessons. \n\nMrs. Douglass was a top drawer surgical nurse, and she had said that she and her colleagues were a little bit like soldiers who got really horny after surviving battle. They saw hot blood and pink flesh meet cold surgical steel all day long, occasionally watching a patient die right in front of them. It made them a little crazy after work, said craziness sometimes emerging as drinking, drugging, and wild sex. Apparently many doctors learned in medical school that surgical nurses were pretty hot numbers between the sheets, and nurses often learned that the God complex that many surgeons had was certainly not supported by their prowess in the bedroom. Her deceased husband was a paramedic she met while working shifts in the trauma suite of the ER, and while no surgeon, he was, from her point of view, 'an everyday sort of guy', which was a lot more action than most of the doctor's wives ever got, at least with their husbands. She said she still missed him every day. \n\nSo I suppose Suzanne's exposure to Mike's weakened and near death zombie state could have the same effect on her libido as my little confrontation with Pavel had on mine. Something was sure making her not and nasty, and her Suzie signals reflected it. Somehow those signals made me hot and nasty, too, and while of course struggling nobly to understand her situation, I continued to fuck her mercilessly. Once again I detected that same overtone of guilt and hostility from Suzanne, but I couldn't completely separate those notes out from her other signals. \n\nLara may not have been able to read her Suzie signals, but I think she was able to very effectively put herself in Suzanne's place and anticipate what would work for her. She spoke in a stage whisper in Suzanne's ear \"You are getting your ass fucked good and hard, aren't you slut? Let's see how long Robbie can hold out before he fills that hot little asshole up, eh?\" \n\nThat must have resonated with Suzanne, because she quivered and chuffed one of those wonderful little orgasm sneezes again. Just after that, Lara ducked her head under us and began to use her tongue on my ass. I did not hold out long at all, and soon another oversize ejaculation, my second in almost 8 days now, splurged out into Suzanne. \n\nSuzanne groaned and said \"Oh, Fuck Yes!\" and I did my best to do so, driving my come as far up her beautiful little backside as I possibly could. Lara then almost threw me out of the way and dove for Suzanne's ass, slurping up everything I had deposited, and triggering another lovely sneeze. I watched in awe as they moved like wrestlers into a very nasty 69 position, with Lara on top, exposing her ass. Suddenly inspiration struck again and I was into my second perfect ass of the evening. I lasted long enough to get Lara off again, spanking her ass even more enthusiastically than I had Suzanne's earlier, and when I finished off in Lara's bouncing butt, she promptly ordered Suzanne to lick it clean. Suzanne was highly compliant, and I was spent. I just lay in a dazed state across the couch and watched them bring each other off one more time. \n\nSuddenly they both burst into tears and turned around face to face and embraced each other even more strongly. I sat on the floor next to them, and tried to make as much contact with them both as I could. In a few minutes, we made another trip to the shower, washing off our funky bodies and kissing each other fervently. Suzanne's Suzie now sent clear guilt, and as Lara dried her off gently with a big cotton towel, I tuned in for more detail. While previously marveling at my steadily improving connection with her, I had neglected to even try to delve into Suzanne's flight data recorder for some time. Suddenly I got the most recent image and a major shock: Dwight trussed up in his cast and naked everywhere else, and Suzanne devouring him. I didn't see that coming, so to speak.\n\nI was suddenly paralyzed, peripatetic, and pissed. It must have happened while I was taking my last midterm exam, right after I genuinely wished Dwight the best. I guess he got some of the best all right. Dwight was gone, likely never to be seen again, and Suzanne was still here, with me, and Lara. I then remembered her line to me on our first night together about 'nice guys' turning her on, and even I had to admit that Dwight qualified, plus I wasn't exactly Mr. Monogamy, and I had pledged to 'take her anyway she would have me' not so very long ago. But all that was logical, and sometimes my emotions are anything but logical. In a few minutes we were all dressed and Suzanne had proposed to drop me at the dorm on the way back to her apartment. \n\nWe got into the car in silence, and then she said \"Robbie, we need to talk.\" No shit, bitch.\n\n\"But it's going to take some time, and we are both tired right now. How about tomorrow while we run? I have some confessions to make, and hopefully it will be good for my soul.\"\n\nI just grunted. She pulled up to the dorm, and I got out without any kiss or even an attempt at one on either of our parts. \"Goodnight Robbie. I love you.\" I grunted as the door closed behind me. \n\nWednesday morning seemed like a dose of shock normalcy. When I awoke, Kevin was snoring softly from his bed, smelling of stale beer and pot smoke, his suitcases dumped on the floor and still unopened. I arrived bright and early for the breakfast line, with a happy leer and a wink for the lovely Lizzy Reagan and her equally comely roommate Orinda as they passed by. Perhaps I could find a way to 'come clean' with both of them, laundry room or no. I was starving, and thus very conscious of the need to tank up for a noon run, and I also realized that I had committed to an increased running schedule to get ready for my first Marathon. That was one of the things further down on my list for discussion with Suzanne: which marathon, where and when, and how much extra running or other training before the event? Speaking of my schedule, this Thursday night marked the resumption of Erminia's weekly slut training sessions, with Millie and I serving as her very intimate instructors. My project plan for Erminia seemed to be working, but the next phase would require much more involvement and effort on my part. Finally full after two heaping plates worth of eggs, bacon, and pancakes, I found some cookies at the end of the breakfast line, and put a few in my jacket pocket to add to my reserve tank before my run with Suzanne.\n\nI arrived at Rhetoric and Composition class a little early, and Ms. Wyrickie handed me back my term paper, congratulating me on a fine effort. Then she said \"Have you talked to Sarah in the last few days?\"\n\n\"Not since that hot night at your apartment.\" I smiled.\n\nShe smiled back, but then looked guarded. \"I think Sarah may have attached a lot more significance to that night than we did, Mr. Roberts. You may want to think about that when next you see her.\"\n\nAs if on cue, I heard a raspy Suzie just as Sarah entered the classroom. It spoke of desire for me, but was stained with discordant overtones that suddenly reminded me of Melanie's meltdown, something I certainly did not want to revisit. Ms. Wyrickie looked down at Sarah's paper, frowned at me, and opened her mouth as if to say more, but when Sarah approached she paused. Sarah hugged me with showy over exuberance, making me more than a little uncomfortable. Ms. Wyrickie offered her term paper to her, without comment. Sarah took it and her face fell a bit as she looked at the grade on it, and then she handed it to me. \"Read this, my love. It may save us some time!\" Before I could even look at it, Ms. Wyrickie began her lecture, and I stuffed the paper in my backpack for later perusal. I was acutely aware that we had lots of material to cover before the final exam, and I did not notice Sarah staring at me throughout the rest of the class period. \n\nWhen the class ended, I made a swift move out the door, wanting to find a spot to sit and recopy and expand my class notes, and try to figure out what to concentrate on for the final exam. I heard Sarah's discordant Suzie signal follow me out the door, but I tried to ignore it, ducking around the corner and into the men's restroom. After a discrete wait, I made my way toward Engineering 101 early, sitting in the empty classroom and trying to anticipate what would be covered by the end of the semester, purposely ignoring Sarah's paper for now. When the class convened, Professor Lillehammer loaded us up with huge chunks of reading, to be completed outside of and in addition to the regular class time, but of course it was all defined as fair game for questions on the final exam. I would have to compare the subject matter with the UDP old exam files from his classes to see what matched up. I ate my cookie stash while dashing back to the dorm and changed into my cold weather running outfit, downing a nice long drink of water from the fountain on my floor. I headed toward my meeting with Suzanne trepidatiously, but hoping to clear the air between us. \n\nSuzanne was stretching per her usual routine, and looking perky and much better than she had last night, damn her eyes. We fell into step: I decide to let her start things off, and she did. \n\n\"Robbie, I have a confession to make to you.\"\n\nAt least she was going to be honest with me. \"Okay?\"\n\n\"You know that when I started seeing you, I had been celibate for more than two years?\"\n\n\"I remember you telling me that.\"\n\n\"Well, I was. I was also guilty and depressed and sublimating all my sexual urges into soccer and running and other exercise. I was running more than 100 hard and fast miles per week back then. I also had little appetite, and ate very sparingly, almost like a gymnast would. What you may not know is that when a woman gets that much exercise with that little food, she often stops having her period. For some athletes it is almost a blessing not having to deal with the water retention and changing weight, and not feeling out of sorts for a few days every month. When we met I had not had a period in more than 18 months.\"\n\nWe ran in silence for a moment. I wondered what this had to do with confessing to me about Dwight. \n\n\"So, I sort of completely spaced out and neglected some basic, ah, protection, shall we say. You really did wake me up, My Animal, and I just started having my period again while I was in San Antonio, which was sort of a perfect editorial comment on that trip. But what I need to confess is that I was not taking the pill or using anything for contraception, and I didn't even think about getting pregnant until I realized my period had started again. So the good news is that I am not pregnant, but the bad news is that I might have gotten pregnant any of the times we were together. I talked to my gynecologist, and she was pleased that I am ovulating again, and I am going to see her Friday, but I have to confess I put both of us at risk without even thinking about it. \"\n\nWe ran in silence some more. My stomach growled. Should I wait her out, or prompt her? Suddenly I got it. We had been talking about whose swimmers got in which pool as an ethics exercise, in the hypothetical and theoretical sense, when we were in actuality rolling the dice for keeps every week. Pregnancy was reality meeting sexual freedom head on - I suppose it was the other side of that death making you horny coin that we all flip. Had Suzanne actually become pregnant, the whole landscape of our relationship would have changed dramatically. \n\n\"Well, I should have asked about that, I suppose, so it's not just on you. Suzanne, you seemed so much older and more sophisticated to me that I just figured you had that stuff under control. That was a bad assumption on my part.\"\n\nShe just looked at me.\n\n\"Is there anything else you want to tell me?\"\n\nShe got a determined look on her face, and continued. \"I also had a realization while I was around Mike and his parents, and it is part and parcel to you waking me up, and our relationship. Seeing Mike so weak and almost dead made me desperately horny, almost as if trying to live my life more excitingly would be an antidote to death. I am determined to have a few more 'wild college days' before I finish my PhD, most of them with you and Lara, but some not. For example, I want to go forward with what both G\u00fcnter and Strelsa have asked of us, and I want to add a few wrinkles of my own, strictly for my own enjoyment.\" \n\n\"You mean in addition to having both G\u00fcnter and I fuck you while Strelsa sits and watches?\"\n\nShe smiled archly and put her tongue up on her upper lip again. I got hard even while running, which chafed both mentally and physically. \"Yes indeed! But before that, Strelsa will submit to me and we will put on a hot little show for you two boys to ensure a high level of excitement for the next few dinners with them. After that, I want to sit back and watch you and G\u00fcnter double team sweet little Strelsa and drive her crazy, so I can anticipate how exciting it will be for me!\" Her dark eyes were blazing and completely unapologetic, as was her Suzie. ",
        "That certainly described another difficult situation for me. I knew it was hypocritical of me to be so happy to bang other girls while really wanting Suzanne to be with only me. I had even explicitly entered into the relationship with Suzanne on the basis of doing anything she wanted sexually just to be with her on any basis she defined. I then realized that what Lara offered me was even more precious than I thought: a one way pledge of fidelity that I knew, thanks to my Suzie receiver, was completely genuine and exactly what she really wanted with me. \n\nBut with regards to Suzanne, I had already agreed to her plans in principle, and so I really couldn't officially object to her proposed sequence of events, but it did arouse both my sarcasm and my curiosity, which often causes me to engage my mouth before using my brain. \"Perhaps we should cover the whole range, then, my lovely slut, and add a session where I get both girls at the same time?\"\n\nShe smiled like I had fallen into her trap. \"You are such a thoughtful, selfless, and open minded man, Robbie! I concur, and we should also of course plan an evening for Strelsa's selfless request, wherein G\u00fcnter gets both us girls while you watch, eh? My faith in you is restored! I knew I was smart to fall for you!\"\n\nHoly shit but sometimes I hate smart girls as much as I love them! \"Is there anything else you want to tell me?\"\n\nShe got a funny look on her face, and I heard that guilty Suzie again. She actually looked like I had when she caught my hand in Peggy's very big cookie jar, so to speak. \"Well, I did have a little one hour fling with Dwight, sort of like your little dalliance with Miss Big Teats and Ass the art history major, only mine was shorter and much more discrete, of course.\" \n\nShe managed to hold her tongue up against her upper teeth and leered at me enticingly even while running at a seven minute mile pace. How the hell did she manage that and why did it turn me on so completely and automatically? And why was I not nearly as pissed off now that she had told me? I was certainly not as pissed off as I wanted to be. Bitch!\n\n\"Did you enjoy yourself?\"\n\n\"Oh yes, and Dwight certainly did too.\"\n\nWe ran in silence for quite a while, and she went without talking so long that I actually became concerned. I copped out and changed the subject.\n\n\"What about my marathon? What training do I need to do?\"\n\nShe seemed to shift gears mentally, and then said \"It's practically on top of us already. There are two possibilities, both on Sundays: December 9th in Dallas or the 16th down in the Rio Grande valley. You should do one full 26.5 miles as soon as possible to see how winded you are, and then we will assess things. There are a lot of pre-feeding and hydration things we can do for you, but I think your basic conditioning level is such that you will do just fine.\"\n\n\"It's got to be the 9th in Dallas to avoid final exams, so let's plan on that. I can't do a full 26 miles on Friday at noon because of my afternoon classes. What about shifting our run to just after my last class? Can you run with me then?\"\n\n\"Yes, that works better with my doctor's appointment anyway. Let's just do the Town Lake trail twice plus a four mile kicker. I'll take care of planning the route. I guess we can watch all the rush hour traffic crawl while we run. Just show up at the parking lot outside by my office where we usually meet, but at 5 Friday, and be sure to have plenty of carbs and water at breakfast and lunch.\"\n\nWe finished our 15 and did a sprint lap and two cool down laps. She stopped and hugged me. \"You know the stuff with Dwight was just a onetime fling and that even Strelsa and G\u00fcnter are just for fun, like some of yours. You know I love you and Lara, don't you?\"\n\n\"Yes. But we need to talk about Nora.\"\n\n\"I wondered if you would bring that up. I guess we will have plenty to talk about Friday. I will talk to Lara about our route ending up at her place for your recovery period, so we can both take care of you (she leered) after your long run, and she will also want to go to Dallas with us on the 9th, I am sure.\"\n\nI just made my first afternoon class, guzzling water and with my stomach growling all the way. I worked on homework assignments until the dinner line opened. I looked for Nora, but no joy. I went back up to the room and lost myself in schoolwork until midnight, just getting back on my assignment schedule. When I finished the assigned reading for tomorrow's classes, I packed up my backpack, and spotted Sarah's paper, previously forgotten.\n\nIt was entitled \"My Life's Work\" and it detailed Sarah's professed devotion to our impending marriage, making a home for me and seeing to my every need. As I read it I got increasingly nervous, but she was right about one thing: it would save us some time. She was hot, but definitely not on my 'for all eternity' list. I would have to tell her that, clearly and unmistakably, but as nicely as I could. I tossed and turned, and when I finally went to sleep I had a very disturbing dream wherein Melanie and Sarah were chasing me with razor sharp scythes through a huge maze of hay bales. I suppose I had also answered another question of mine: even my most recent and highly developed Suzie talents could not detect the next Melanie meltdown well in advance and prevent bad interactions. The best I could hope for was early recognition, but intervention and correction would have to be conventional and just as uncomfortable for me as for anyone else. \n\nWhen I awoke, Kevin was already up and dressed, so something must be up. \"What's happen' roomie?\"\n\nHe looked funny. \"I am beginning to think that getting drunk every night may not be a good idea.\"\n\nI laughed. \"I thought that was one of the things you pledged your devotion to when you signed up for ZZZ.\"\n\n\"Not really, but some of the guys who are about to graduate have kept that record intact. I'm just not sure I can do it, and Lou is starting to talk about being worried about my drinking habit, too.\"\n\n\"Do you know about any outright alcoholics in your family tree? That's why I don't drink. I have some real asshole ancestors who exhibited all sorts of pithy psychopathology when they drank, and some young cousins that are real fuckups, too!\"\n\n\"Yeah, my mother's father killed himself drinking before I was even born, and my current #3 stepmother's dad is a very embarrassing and grudge ridden fall down drunk. He is just the thing to liven up a family gathering at Thanksgiving.\"\n\n\"Maybe you don't need to swear off completely, just limit yourself to one drink or something?\"\n\n\"Yeah I might try that.\"\n\n\"How is Lou baby?\"\n\n\"She is wonderful!\" His face lit up like a party lantern. All talk of the two of us taking Lou by storm one night for spanking and double penetration of her precious Jewish American Princess booty had ceased. Kevin had no other dates and was not looking for any. He had made it through his midterms with passing grades, his stated goal, and Lou was considered a very positive influence on him by his dad. He wanted me to come with him to the ZZZ last day of class toga party, which was coming up very soon, the Friday night before my Sunday Marathon plan. I would have to coordinate things with Suzanne and Lara, and keep Suzanne under control, since she liked the 'instant stripper' punch made from grape juice and grain alcohol that the frat always served. In the back of my mind, something was attached to that date, but I couldn't quite recall it. I put figuring that out on my 'to do' list, which seemed to be growing exponentially, in stark contrast to the fixed number of days left in the semester.\n\nNora was at breakfast, a very pleasant surprise, and with a little hug to boot. We talked again about the incredible push to finish classes, and my plan to run a Marathon the Sunday after classes ended.  She told me that the English royal family had actually set the distance for the race in the 1908 London Olympics, in contrast to the more widespread myth about the distance that a messenger had run to deliver his message to a general before dropping dead on the plains of ancient Greece. The actual distance, she held, was determined by the route from Windsor Castle to the Olympic stadium. I questioned her on this, but since my primary source was a Greek tour guide on a family vacation when I was eleven, and Nora was one of the most accomplished academic researchers I knew, I decided to accept her version. Besides, her grandparents were probably seated near the royal children that day anyway.\n\nShe went on the tell me she was leaving for England right after her last final, and would be there until the day before classes started in the spring. She expected to have a series of long talks with her parents, about me and her heritage in general. She said we needed to talk more, and she wanted to ask me some questions about my family, in preparation for her discussions with hers. We made a date to eat lunch together later today, and then we both were off to morning classes. Which were as expected: frantically busy, with multiple layers of additional reading and homework assignments being made in order to try to cover everything on the syllabus before the last day of class. I did not see any early weeknight bedtimes in my future for a while. I saw Sarah following me near the Union building, and I caught another note of that discordant Suzie, and found it eerily familiar. Where had I heard it before? Oh shit! She had been near my parent's new house, and at the mall. I had yet another thing to talk to Sarah about, and hopefully I could catch her before or after Ms. Wyrickie's class Friday morning, and get it over with. \n\nAs I sat waiting for the lunch line to open, I opened my laptop and made a replay to the email from Bob The Knob's PE class, choosing the female graduate student, one Saskia Grandael, to perform my 'before' examination. I picked one of the early evening open appointments next Monday after supper, and hoped I could take some of my textbooks with me to read during the testing. I knew that at least one other session would probably be required. I also replied and pledged my fealty to Barry Fermy and underscored my devotion to closing some business with Abelard Peters over the Christmas holidays. Then Nora appeared, looking fantastic, and we were almost the first two people through the serving line. She talked while I chewed.\n\n\"Robbie, why do you not drink any alcohol?\"\n\n\"Well, I don't metabolize it normally, so it doesn't take very much to affect me, and it usually affects me poorly. I have never liked the taste of any of it, and I have some relatives that get kinda scary when they drink.\" I leaned a little closer. She smelled great. \"Plus my Dad told me that drinking to excess, especially before I turned 18, could damage my 'talent'.\"\n\nShe looked very thoughtful, and I chewed, thoughtfully I hoped. \n\n\"What else did he say would affect your talent?\"\n\n\"Dope. Using pot habitually, or taking Ecstasy even once.\"\n\nShe looked even more thoughtful. \"I never thought about that, but some street E is MDMA, and some is not, and actual dosage varies widely. It all ties into serotonin metabolism, perhaps?\"\n\nChewing was my only answer. \n\n\"Have you ever heard your family use the term 'blue hair'?\"\n\nI laughed. \"Only in connection with my grandmother's bridge group, where the youngest woman is 80!\"\n\nShe laughed too. \"I am talking about young women: I am technically a blue hair. Think of it in contrast to a 'red head'. I have very pale skin with very prominent veins, thus it can be said to look blue, and I also have natural platinum hair, which is exceedingly rare, much more unlikely even than red hair, and pale grey eyes, also not likely. The trifecta is therefore almost impossibly rare. You probably didn't hear many Druid myths and legends when you were a kid, but I did. The most powerful of the Druid sorceresses were said to be the blue hairs, a secret that is still well kept. Legend says that when a blue haired adept mated with a powerful warrior, their male offspring often had special talents, different and even more powerful than those of the mother. Blue hairs only seem to occur about every four generations, and my family reportedly considered drowning me when I was born!\"\n\nI stopped chewing long enough to say \"You have got to be kidding!\"\n\nShe smiled, but I would describe it as a tragic one. \"Not at all, I'm afraid. The last blue hair in our family was my grandmother's great, great grandmother. They had all just about convinced themselves that the old legends were superstitious bunkum, and that our family would never have to deal with the issue again. And then, I was born.\"\n\n\"Why is that a problem?\"\n\n\"Well, as I said, legend has it that a blue hair, properly mated to either a strong warrior or a noble male sorcerer, can be a wonderful force for good. But it is also said that if a blue hair marries poorly, mating with either a weak man or an evil sorcerer, she can produce even more dangerous, powerful, and evil offspring. So having a blue hair as a daughter can be a big responsibility, and a potential disaster. All the most evil sorcerers in the legends were reputed to have powers like yours \u2013 able to sense a blue hair female's attraction to them and then exploit her for their evil purposes. \n\n\"So, in your family's eyes, I might be the devil, looking to have you bear Rosemary's Baby for me?\"\n\nShe smiled grimly. \"You are well exposed to the cinema, Robbie, and that's just about it, in their minds, with the proviso that if you are a good man, they could have wonderful grandchildren instead.\"\n\n\"Well, at least there is that!\" We suddenly realized we were going to be late to class, and dashed out. I just made it into my first afternoon class. More reading and homework assignments! \n\nI was diligent before, during, and after supper, reading and recopying my notes in between my self-assigned 50 minute reading sessions. The limo driver picked me up outside the dorm right on time, and we headed over to the Bi Phi house to pick up Millie. She looked fantastic and smelled even better. My project plan called for me to focus on Erminia tonight, but I wondered if I could work in some attention for Millie, too. I decided that I could.\n\nInstead of the Four Seasons, we made our way to Sapiento and Erminia's new house. It was actually one of three houses they purchased along the south side of the river, looking north across the river towards downtown. They had renovated the central house first, which was an art deco style place built in the 30's. Millie raved about its architectural significance and their accurate restoration as we entered the long and winding driveway. The two smaller, post second world war and much less historic houses on either side had been demolished and were being replaced with matching deco style houses, still under construction. A tall security fence surrounded them all, as did newly planted hedges and shrubs blocking almost every possible viewing angle into the house. The same two dark suited guards from the Four Seasons were manning the door here, and we ducked under the porch entryway and into the house under their watchful eyes. \n\nErminia gave us a brief tour of the house, and went through their plans for the other two buildings, which were basically destined to be a guest quarters and a lakeside party house with an indoor/outdoor swimming pool, perhaps inspired by Spear Overtop's party house with its swim out pool. We went past the downstairs master bedroom and then upstairs into a room that had obviously been dedicated to our training sessions. It had some very expensive and solid looking leather chaise lounges, a solidly mounted erotic trapeze like the one in Lara's apartment, an assortment of triangular and trapezoidal pillows in fitted silk pillowcases, and some discrete looking wardrobe style cabinets that may have held 'training accessories' for our use, plus two adjoining bathrooms with big showers and Jacuzzi tubs. It was quite a layout.\n\nThe two guards had discretely disappeared, leaving just the three of us, and both women looked at me expectantly. My cue, I supposed. I touched Erminia's face tenderly, but then spoke to her roughly. \"So far, you have barely met requirements to continue your training, slave, and I expect you will have to work even harder to complete your course. You have learned to please a female, albeit a very beautiful and responsive one like Mistress Millicent. Now you must learn to give to a man, a very demanding man: me. Off with those clothes and on your knees, slut!\"\n\nThis was the beginning of the next phase of my Project Erminia plan. The idea was to continue to get her away from thinking about herself, and her own pleasure, which always triggered her guilt, and instead make her concentrate on pleasing someone else, while ignoring herself. So far, it had worked as planned as she learned to perform outstanding cunnilingus on Millie in phase one: she had learned quickly, developed great skill in recognizing and applying what really got Millie off, and was able to concentrate on Millie completely, despite being spanked, whipped, and otherwise deliberately distracted from her primary task. She had taken pride in doing well for Millie, and took emotional pleasure in Millie's orgasms and praise of her technique, but separated that from her own sexual excitement, and thus did not trigger her 'survivor' guilt. She had also begun to associate the psychological pleasure of pleasing Millie with her ability to ignore the spanking and whipping, such that it had almost begun to almost be pleasurable for her. Now we would reinforce that: she would learn to fellate me, at first with Millie's instruction, and then with mine, until she was a master at pleasing me. Then she would learn to continue to please me while Millie distracted her with more spanking and whipping, until she could stay focused on my pleasure no matter what. When she began to take pride in her ability to get me off, I would use that association to begin to let her get little bits of physical pleasure without triggering her guilt. Then we would move on to the next phase, where I would begin to alternate strong punishment with occasional and random acts of tenderness toward her. Once she could accept those without the concomitant guilt, then we could shape her, with a few other manipulations, toward being able to accept her own pleasure and finally, orgasms. \n\nErminia's face played through several different expressions rapidly as she kneeled down, and her Suzie sent both excitement and worry. I had Millie sit in a chair nearby. \"Mistress Millicent will be your instructor to begin with. Listen carefully to her directions and do your best to learn from her.\" I stepped out of my clothes and stood right in front of her. Her Suzie sent the same kind of apprehension and worry that I had detected during our \"soft swing' game at the Halloween party. But the novelty of being in a new place with new people had allowed her to respond partially there without guilt shutting her down, and we would try to recreate and extend that in our private training sessions. \n\nAs we began, it was apparent that Millie was surprisingly good at improvisation, and Erminia was not very good at blowjobs. Millie led her through the basics just as I liked it, but Ermie was tentative and mechanical. Millie was working with her to improve things. I began to try to solve differential equations in my head, figuring that would keep my natural responses to a minimum, and let me last longer. I found it strange listening to Millie as she discussed my cock and its responses in an almost clinical third person sense, but at least her Suzie was letting me know that she would rather be doing me herself, rather than instructing Ermie. But the lessons were working, and Ermie now had me hard as can be, and I was beginning to enjoy her efforts. ",
        "Millie's constant criticism and instructions were keeping Erminia off balance and worried about performance all the time, maximizing uncertainty and apprehension, thus making sure she would not have even a second to think about herself, or anything else but my cock and its responses. She kept her eyes closed, and normally I would punish her for this, as I like eye contact when a woman fellates me. But since we were trying to make her concentrate for the present time on my dick and not my face, I would not press the issue.\n\nErminia seemed really surprised when I began to come, but she was doing her best as she sucked and swallowed, albeit clumsily. A good portion of my ejaculate dribbled down her chin, and she fought catch more of it and to breathe through her nose. There was no sexual pleasure or arousal in her Suzie signal, and even if there were, Millie would soon extinguish it.\n\n\"That was pitiful, slut. I am surprised he even came with that kind of lousy technique!\"\n\nShe then proceeded to give her very detailed instructions on how to get up me up again, and for the first time, I heard Millie's explicit explanation of Suzanne's patented 'small displacement sucking motion' technique that was so wonderfully effective at keeping me hard even right after I had ejaculated. Although she did not do it as well as my other three girls, it was still amazingly effective, and I was up and ready almost instantly. Millie then barraged Erminia with a series of very detailed instructions, sometimes mutually exclusive or physically impossible, keeping her off balance and apprehensive. She pushed her to take me deeper and deeper into her mouth, to use her tongue more effectively as I slid in and out of her mouth, and to stimulate and surprise me in a dozen ways. Soon Erminia was like an automaton responding to Millie's instructions, and Millie was a fine programmer. I was going to pop again pretty soon. \n\nI was struck by the scene I was witnessing. Millie, the lovely young president of her sorority, dressed primly in dark slacks with a blue sweater over a white blouse and a pair of mahogany brown penny loafers, was sitting in a chair, with her hands on her elbows, avidly watching her submissive student blow me from only a few inches away. Erminia, one of the richest and most gossiped about women in the world, still amazingly attractive in her late 40's, was naked, on her knees, and struggling to take my cock all the way down her elegant throat, to make a nondescript looking eighteen year old college boy from Texas come in her mouth for the second time this evening. Is this a great country or what?\n\nMillie may have looked prim, but her instructions were anything but. \"Get ready to suck all the come right out of his balls, you clumsy slut! Keep your eyes closed and think about nothing but sucking and swallowing for his pleasure. And if you let even one drop touch the air this time I will whip you senseless!\"\n\nErminia was too inherently elegant to make those 'glug, glug, glug' sounds, even in flagrante delicto, but she did make some very erotic whistling sounds of ragged breathing though her aquiline nose. When I came for the second time, she gamely sucked even harder and used her mouth and tongue to pleasure me much more effectively than the first time. She was a quick study, and she got my entire first surge down her throat this time. This was the kind of 'pop quiz' I liked to give my students. I involuntarily grabbed her head and pushed her down on me a little further, and I felt her Suzie send a little pride in eliciting that response from me. Her tongue swirled around me, and I pumped my come into her sucking mouth with reckless abandon. \n\n\"That's better!\" Millie praised her. \"Still needs a lot of work, but better than the first time. Now suck hard, harder, until you are totally sure you have swallowed every drop!'\n\nErminia complied, and then, with my cock all the way down her throat, looked up and made eye contact with me. I couldn't help but give her a tender look and a little pat on the cheek, but then I pulled out and slapped her cheeks with my cock. She looked embarrassed, and her Suzie sent humiliation, but not yet excitement. That would come later. Dr. Asa Weltschmerz, Lara's psychiatrist and my unofficial consultant on Erminia, had explained to me that her guilt over the untimely death of her first husband was so pervasive that it would take extraordinary measures to free her from it. She would have to be punished so mercilessly and thoroughly that she would eventually reach a state where she began to show anger at her punishment, and Asa said that would indicate that she had reached bottom and had began to subconsciously feel that she had been punished enough. Beginning with that signal, I would restrain her fully and begin to emphasize her helplessness, and give her gradually increasing amounts of stimulation and pleasure. At some point she would have her first helpless orgasm, knowing that it was strictly incidental to my pleasure, but not being able to avoid enjoying it herself. We would then shape her to accept her own orgasms as normal, sans guilt.  \n\nI reached down and held her chin up to meet my eyes. \"You are just barely worth training, so far, slut. I want you to do the same kind of research you did on how to please Millie, learning new techniques at least two hours per day. You are also ordered to get down on your knees and fellate Sapiento to completion twice a day, morning and evening, to observe his responses and learn to do you wifely duty properly! Her face looked confused, and her Suzie was silent.\n\nErminia retired to her downstairs bedroom, and I grabbed my clothes and motioned Millie into one of the adjoining bathrooms to clean up. Mille looked a little surprised, but quickly got into the mood as I began to slowly undress her, kissing each new part of her that was exposed, one of my favorite little games. By the time that I made my way to her lush and furry and wonderfully fragrant little bush, I was hard again, and ready to devour her completely. Millie's Suzie, not unexpectedly, began to signal a desire for some rougher action, and soon. I decided she would get it, but not until I had teased her for a while. \n\nThe bathroom was on a north wall, on a corner of the house from which projected a big 'turret' bay window. Being part of the bathroom, it was equipped with a huge but frosted window and skylight up high that let lots of light in without allowing folks from the high rises on the other side of the river to peek in, telescope or not. So at a height of about five feet inside the shower, the tiled area expanded out towards the window area like a big shelf and display area below the huge window. I am not sure what its intended use was, but I picked Millie up and set her cute little ass on the shelf, which positioned her for some perfect stand up pussy eating on my part. Her pussy was wet and wild, and I had almost forgotten how tasty and wonderful it was. Her Suzie was playing two tunes: the one that I was listening to right now was saying 'oh baby eat that pussy'; the other one, growing steadily stronger, was saying 'pussy eating is nice, but let's get on to some hard spanking and even harder fucking'.\n\nThe delicious irony was not lost on me. I was enjoying the prospect of teasing Millie and ramping up her excitement, all the while thoroughly enjoying her delicious taste and aroma. Her first orgasm may have been better for me than for her, even without my Suzie sense, because she screamed and gushed a tasty flow of wonderful juice, which I devoured contentedly. After a brief pause, I tuned in my Suzie receiver and went into smart bomb autopilot mode, with my target another exploding orgasm. She was almost tortured by my actions, as she wanted the impending orgasm but she knew it only delayed the hard fucking she really wanted. I could enjoy both equally. I gave her two sizzling ones, and both Suzie tunes rang out even louder.\n\nI flipped her over and pulled her up on her hands and knees, with her pretty ass just about level with my face. Her pussy was dripping like a faucet, and when I began to alternatively kiss and spank her ass smartly, it continued to do so. She sighed and shook with every slap, and her lovely ass got red and warm to the tongue all over. Millie was able to come just from the pain, and I kept her teetering deliciously on the edge of her first orgasm from the spanking. I had heard about differentiating orgasms as clitoral or vaginal, but I was rapidly forming the theory that our favorite fuck toy, thoroughly modern Millie, ever at the forefront, had two other types too: anal and painful. The scientist in me had a duty to experiment. \n\nI used my Suzie talent to tune my spanking to get her off, and as I connected to her it was almost scary to feel her amazing nervous system transform the impact and pain into building pleasure so quickly. If I could react like that, maybe I would enjoy submitting, but I don't think I was wired that way. Millie certainly was, and her first painful orgasm was very intense, and it sent shivers through me via her Suzie. She was breathing so hard that I felt I had to let her rest a minute, but her Suzie soon made it apparent that she needed no such pause. I began to spank her further down on the back of her legs, and she loved it, soon having another fulminating orgasm. It was now time for some contrast therapy.\n\nI reached my arms around the front of her knees, spreading her legs slightly and enthusiastically plunging my tongue into her hot little rosebud, which was already awash in all that fluid from her pussy. Maybe I was still thinking about Alley's amazing ass that she had shook at me so tantalizingly at Babe's, and maybe I was just testing my theory about anal orgasms, but soon I was tongue deep in Millie's wonderful butt, enjoying every nuance of it. I kissed it, licked it, and I rolled my tongue up and penetrated it as far and as I could. I became a smart bomb, spreading her ass checks and moving my tongue in and out and back in as far into her tight little asshole as I could, and she responded very, very strongly. I felt the tension build in her legs, and she shook and wailed, while her Suzie sang a different note for her anal orgasm, easily differentiable from the clitoral and painful variety. \n\nI suppose my scientific need for a complete data set kicked in; as I suddenly knew I had to listen to her Suzie during a vaginal orgasm. This would require a little different position, as I needed to get her ass down a foot or more from the level of the little shelf, to facilitate easy penetration while I was standing. I looked around and spotted some elegant looking gold tubes mounted at various positions in the shower: perhaps they were handles, or maybe towel racks, but two of them looked like just the thing for me to grip with my hands. With one hand I pulled her back toward me until her knees were no longer up on the shelf, but rather about two feet below it, in a perfect spot for me to fuck her in. My other hand gripped of the gold handles, and gave me the leverage I needed to slip my cock into her. I then pushed her forward again, such that her waist and upper body were on the shelf, and her arms were out in front of her, forming a wedge that very effectively pinned her against the tile corner of the shower. So positioned she could support most of her weight on her arms, and her legs were spread open, with the inside of her thighs against the top of my thighs, supporting the rest of her weight. I then put both of my hands on the handles on my left and right, gripped them hard, and proceeded to surge into her like a mad man. \n\nHer Suzie sounded, but she screamed even louder. \"Fuck me!\" I could not refuse a lady. I felt like a bull, a ram, a stallion, a stag, and a crazy man, and I must have been channeling all my mammalian and reptilian ancestor's survival drives through my cock and into pounding her pussy. It was an amazing feeling of wonderful power, made all the better by the realization that Millie was absolutely loving every second of it. So was I. Her Suzie ramped up toward another orgasm, and sure enough it sounded another distinctive Suzie note as she came. I was overjoyed, and my scientific curiosity was satisfied, but not my lust for her. Oh no! I pulled out my thoroughly lubricated and maximally excited rod and pushed into her ass, envisioning that perfect little circle that I had so recently enjoyed tongue kissing.\n\n\"Fuck my ass!\" She was so my kind of girl. I used every bit of strength in my arms and legs to pound her. It was wonderful. I would occasionally lean back to see my cock enter that fine little orifice, and then plunge forward into her happily. She was on the verge of an anal orgasm, and I was damned pleased about it. Just as she began to quiver, I shot off inside her, hot and hard and wonderful. I pushed myself into her as far as I could, and I really felt like I belonged there. When I knew I was spent, I leaned down and kissed her shoulder blades.\n\n\"Robbie, I know I am officially graduating as a trainee at the end of this semester, but anytime you want to give me some continuing education, I'm ready.\"\n\n\"I'm going to miss you too, Wet Spot. We both will continue to train Ermie together until she is ready to graduate, too, and you already know how Suzanne and Lara feel about you! \" \n\nI did not tell her about her surprise birthday party. Her birthday was a few days after Christmas, but since we would all be out of town then, we were planning a combination birthday and sexual training graduation orgy for her. Suddenly I remembered the date conflict issue I had put on my to do list, the ZZZ toga party was the same night we had discussed for the Wet Spot Party. I still needed to figure out what to do.\n\nWe finished washing each other off, with lots of kissing and hugging, and then got dressed. The guards were waiting for us and escorted us back to the limo, and we headed back towards the Bi Phi house. I asked the driver to wait a second while I walked Millie to the door, and spent a few minutes talking to her about my plan for the next few training sessions with Erminia. She got it, and especially liked the part where she would be the prime administrator of the pain stimuli, although she would likely rather receive than give. After that, the driver took me back to the dorm, and I spent a few hours doing reading and homework before I just couldn't keep my eyes open, and went to bed.\n\nFriday morning it seemed that my alarm woke me only about ten minutes after I went to sleep. I hopped up to tank up, and then remembered I would be running in the evening today instead of at noon. But when I ran, it would be a full 26 plus miles, so I would need to be well hydrated and well fed. I saw none of the usual crew at breakfast, so I concentrated my attention on the food, as I was still very hungry from my wonderful exertions with Millie. I went to Rhetoric and Composition early, planning to find Sarah and get the potential confrontation over with. I got to the classroom a full twenty minutes before class time, and put my backpack in my normal seat, and then went outside to watch for Sarah. She turned up a few minutes later. Better now than never. \n\n\"Sarah, I think we need to talk.\" That was absolutely the first time I had ever said that to anyone. I was usually on the receiving end of such notice. \n\nI heard a little blast of meltdown Suzie, but then she seemed to get it under control. \"Did you read my paper, Robbie?\"\n\n\"Of course I did. I am flattered by your feelings for me, but I don't share the same feelings and plans for you. I am just a freshman, and I have no desire to get married to anyone anytime soon. I have to honest and tell you that I don't think that will change.\"\n\n\"Did you not feel the same excitement that I did, Robbie? Do you understand what you mean to me?\"\n\n\"You are very attractive and exciting, Sarah, and I think I made that very clear to you, especially that night at Ms. Wyrickie's apartment. But that's where it ends for me, I am afraid.\"\n\nThere was another blast of disconcerting Suzie, and then it was under control again. \"What could I have done differently, Robbie? Where did I go wrong?\"\n\n\"Well. Following me to my house in Dallas without telling me first, would have been a deal breaker for me, no matter how else I felt before that. That made me very nervous and uncomfortable.\"\n\nShe looked glum. \"I didn't realize you knew about that. How did you spot me?\"\n\n\"Our dogs spotted you before you even parked your car, Sarah. They watched you constantly whenever you were anywhere near our house. And I saw you at the mall, too.\" That was a bit of a lie, but I had heard that discordant Suzie at the mall, and now I knew exactly where it came from.\n\nShe looked embarrassed, which I took at as a good sign, compared to Melanie, at least, but then she said, \"I tried to come to your house to talk to you, but that pack of dogs wouldn't let me get out of my car. That's what finally convinced me to leave.\" \n\n\"That was the smart thing to do, Sarah. They usually don't bite unless they are ordered to, or are attacked, but they would have at a minimum barked at you and jumped up on you to try to get you back in the car and out of there. That would have brought someone else running from inside the house.\"\n\n\"You act like they knew I didn't belong there.\"\n\n\"They did. They sensed something was not right with you or your visit. You know it was not a good idea, too, don't you?\"\n\nShe looked chagrinned, but her Suzie stayed out of the alarming range. \"Yes. But Robbie, I love you!\"\n\n\"And I liked you Sarah, but I don't love you, and given all that's happened, I don't want to be with you anymore. I'm sorry, but truth is truth, and that's it.\"\n\nTears streamed down her cheeks, and of course I had no handkerchief, but she fished some tissues out of her purse and got fairly squared away before class started. Ms. Wyrickie was looking at us from her desk, and actually started her lecture a little early. I was thankful for the interruption. After class I saw Wyrickie approach Sarah, and they continued to talk until everyone else had left the room, including me.\n\nI headed for Engineering 101 early, but couldn't concentrate well enough to accomplish any reading. I thought about the rest of the day and was apprehensive about being able to finish my hole 26 miles without collapsing, but then looking forward to having Suzanne and Lara help me recuperate. I then realized I had no date for Saturday or Sunday, as the Thanksgiving break, as much as I had enjoyed it, had totally discombobulated my regular planning cycle. Suzanne had an away soccer game both days, and Lara was going on a Saturday and Sunday field trip to west Texas for her Geology elective.  I had a few minutes before class started, so I called Peggy. She was sitting at her normal duty station in the museum, and talked to me in hushed tones.\n\n\"I was hoping you would call me before the semester ended, Robbie. I am leaving for London right after finals, but I wanted to do a 'farewell tour' with you. Is that what you had in mind?\"\n\n\"It sure is, beautiful. Where would you like to go?\"\n\n\"Well, I think we should both take a little around the world trip, if you catch my drift, lover.\"\n\n\"I would love to catch your drip, if you know what I mean.\"\n\n\"Oh, there's an image that I like, you smooth talking devil. Let's go to that Mexican restaurant where you bought that Aztec calendar after that skinny reporter bitch flirted with you. Did you think that I didn't pick up on that?\" \n\n\"Did you pick up on her checking out your breasts, Sweetie? I think she wanted to spend some quality time with them.\"\n\n\"I wondered about that, but I don't want to go there, ever. I'll take it straight or not at all, and I like taking it from you.\"\n\n\"No problem, beautiful. That's my job, anyway.\" ",
        "We made a date for me to come to her house Saturday about 5 PM, so we could have an early cabrito dinner and then a late night together. That left Sunday open. My thoughts turned to Millie immediately. Sunday was still on my 'to do' list. Engineering 101 was a fast paced lecture, that perhaps shed some light on which reading assignments would make their way to the final exam, and which would not. All that skull sweat was making me ravenously hungry, and I was looking forward to a leisurely and filling lunch, at a time that I normally missed the meal completely. \n\nI got back to the dorm in time to dump my backpack in the room before the lunch line opened. I was not first in line, but almost. When I emerged from the serving line with a heaping tray, I spotted Lizzy Reagan's roommate Orinda, seated alone and looking wonderful. I smiled at her and made a beeline for the seat next to her. \n\n\"\n\n\"Hi Orinda! It's nice to see you. I almost never eat lunch here on MWF, so I am glad we could touch\" I hesitated and she looked up at me with big eyes, \"base. How are you doing?\"\n\n\"Uh, fine, I guess, but the rest of the semester is going to very busy.\"\n\n\"Unreal. It seems like I would have to stay up 23 hours a day just to do all the reading that has been assigned since Thanksgiving.\" \n\nWe made small talk about school for a while, and then she looked self conscious, finally asking me \"Was it really you in that costume at the UDP party, as \"The Master\" with those girls on leashes?\"\n\nI smiled warmly at her, and her eyes got even wider. \"'Would that be something you wanted to know more about, Orinda?\" \n\nA spike of Suzie energy reached me, and it grew into a low howl. Orinda's eyes got wide, and she shifted her legs under the table. But she did not get up to leave, nor did she drop her gaze from looking directly at me. Yet. \n\n.....\n\nStrelsa was a bit startled when Suzanne Pliskin called her and suggested they meet for lunch again so soon. She hadn't really expected an answer to her difficult sexual request for a threesome for her husband G\u00fcnter until after the beginning of the spring semester, and even then she expected a negative response. She was still surprised that she had even mustered the courage to ask Suzanne in the first place. Strelsa had always known she was pretty, but Suzanne Pliskin was so beautiful she was intimidating, and there seemed to be nothing to fault her on. She was perfectly quaffed, her clothing and makeup was always top drawer, she spoke even more languages fluently than Strelsa did, and she was an incredible athlete and already a well respected PhD candidate, too. Strelsa had not missed the way G\u00fcnter had been unable to avoid gawking at Suzanne during dinner at their apartment, and that made her apprehensive, despite her confidence that G\u00fcnter loved Strelsa with all his heart. They met, as they had before, at a bench on the East Mall, and they both got food cart hot egg rolls and a bottled water. It was not quite as cold and windy out as the last time they met, but Strelsa still felt a little chill run through her when Suzanne made eye contact with her and smiled. Was that smile a little predatory?\n\n\"Hi, Strelsa. Thanks for meeting me. I wanted to talk about what we spoke about before, involving you and me, and G\u00fcnter?\" \n\n\"I am surprised that you can give me an answer so fast.\"\n\n\"Well, it's not for certain yet. I admire your selflessness, and understanding G\u00fcnter's needs, and I have to complement our mutual friend Robby on his open mindedness, too, as I think he is okay with it. But there are some complications and some things I need you to agree to, also.\"\n\nStrelsa's heart pounded in her chest, and that was just from thinking that the answer might be yes. Inwardly, she had almost hoped that Suzanne would just shut this whole idea down. When she realized there might be even more to it, she got even more apprehensive. \"What do you mean?\"\n\n\"Well, if I do these things for you, Strelsa, I want you to do some things for me, and for Robbie, and in a way, for yourself.\"\n\nStrelsa had not touched her egg roll, and had now forgotten all about it. What did Suzanne mean, and what was that look she was giving her? \"I am not sure what you mean, Suzanne.\"\n\nSuzanne leaned over and put her hand on Strelsa's leg, just above the knee. \"We need to talk!\""
    ],
    "authorname": "conanthe",
    "tags": [
        "anilingus",
        "submission",
        "anal",
        "dominance",
        "fellatio",
        "texas",
        "sorority",
        "marathon",
        "fraternity",
        "slave training"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/my-only-talent-ch-19"
}
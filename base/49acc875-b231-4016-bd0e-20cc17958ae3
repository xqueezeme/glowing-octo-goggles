{
    "title": "The Book of David Ch. 07",
    "pages": [
        "***\n\n-- CHAPTER 7: Dream Girl --\n\n***\n\nSPRING QUARTER, JUNIOR YEAR (April 2001)\n\n\"Have a good time?\" Kevin looked up from his spot at the dining table with a funny smirk on his face.\n\nJen immediately reached over and slapped his arm. \"That was rude.\"\n\n\"Dude, it's not MY fault they were screaming so loud the entire block could hear them,\" Kevin retorted and rubbed his shoulder.\n\nI was standing in the doorway to the dining room with Amber by my side. She was doing her usual bright-pink blushing thing again. I held her to me and asked, \"What are you guys doing here?\"\n\n\"You invited us, remember?\" Jen offered. \"E-Beth was trying out some new lemon chicken for dinner and wanted a few extra mouths to do a taste test.\"\n\nAs if on cue, E-Beth came in from the kitchen, still wearing her apron. \"Hey, sounds like you two had a good time.\"\n\nKevin and Jen started laughing. \"That's what I said!\" Kevin cracked.\n\n\"Well you would know,\" Amber stared down her roommate. \"David had you making those same noises this morning!\"\n\nNow it was E-Beth's turn to be embarrassed. We weren't going out of our way to hide that I was banging E-Beth on the side from time to time. But that didn't mean it was the most comfortable of conversations to be having, either. \"Uh, anyways,\" E-Beth stammered. \"I should be done in ten minutes. Why don't you guys start rounding up Phyllis and Diane?\"\n\nAmber volunteered to fetch them and she turned to give me a peck on the lips before heading back. I walked over to the table, a little bow-legged for comic effect which put Jen into a fit of giggles.\n\n\"What can I say?\" I smiled. \"I'm living the good life.\"\n\n\"Dude, I'll say,\" Kevin grumbled before straightening his face and looking petulantly at his girlfriend. \"Not that I'm complaining! Jen gives me all the loving I can handle.\"\n\n\"Hmph,\" Jen sneered with mock anger. \"And don't you forget it.\" And then Jen glanced back at me. \"So how many girls are you juggling now? I mean, besides Amber.\"\n\n\"Now? Just the one: E-Beth.\"\n\n\"Oh, that's right, Maria latched onto Randall and Angelina, right?\"\n\n\"Yeah, but that didn't last long. She got bored and moved on. I swear that girl is as flighty with her dicks as a baby with too many toys.\"\n\n\"But dude,\" Kevin cut in. \"I heard Nataliya dropped by last week.\"\n\nI shrugged. \"It wasn't like that. At first, she didn't think it would be a problem to borrow me and neither did Amber. But after the first couple of times, she felt guilty about quote/unquote 'Stealing David's time from a sweet girl like Amber'. She's back together with Leslie now and she found a single, young frat boy to play with on the side.\"\n\n\"Aww... you poor thing...\" Jen teased.\n\n\"Not at all. Amber is more than enough woman for me. And to tell you the truth I think she misses Nataliya more than I do. Man that girl could eat pussy.\"\n\nAmber's voice cut in behind me. \"Yeah... now I gotta put up with this gorilla's clumsy tongue.\" She dropped her hands onto my shoulders and wriggled in mock frustration, laughing all the while. She kissed me and whispered in my ear. \"Just kidding, baby. You're still one of the best.\"\n\nPhyllis and Diane followed in after and everyone moved to take spots around the table, cramped as it was with seven chairs.\n\n\"Right on time!\" E-Beth crowed as she walked in, holding a steaming chicken in a large roasting dish. Over the past few months, she'd put her chemistry expertise and mental focus to work in the kitchen and was turning out to be a master chef who rivaled Jen for culinary excellence.\n\nAmber smiled and leaned into my arm. I looked around at my friends all chattering happily around the table and inhaled the sweet aroma of E-Beth's cooking.\n\nYeah, I was living the good life.\n\n***\n\nFINALS (June 2001)\n\nI hate finals. But hey, at least they signified that the academic year was almost over. Still, over the past couple of years E-Beth, Amber, and I had developed a consistent study group habit and with their support, I had confidence that I would do just fine.\n\nUnfortunately, I'd left certain books and study notes back at my apartment, so with a kiss to Amber I promised I'd be back soon and then left.\n\nDanielle was waiting in the living room when I came in. She was reading a magazine and flopped it onto the couch beside her. \"Wow... you DO exist! I was beginning to think I had just imagined having a little brother.\"\n\n\"I haven't been gone that long,\" I muttered as I headed for my room.\n\n\"David, when was the last time you slept here?\" Danielle said in a concerned voice as she stood up to face me. \"I swear you have more clothes at Amber's place than you do here.\"\n\nI stopped in my tracks and turned around. \"What... am I supposed to say sorry?\"\n\n\"No, it's not that.\" Danielle sighed and then sank back down onto the couch.\n\n\"We just miss you,\" Cherys' voice cut in as she came out of the bedroom. She walked right to me and gave me a welcoming hug.\n\n\"Hey, gorgeous...\" I said sweetly.\n\n\"Hey, yourself. Long time no see.\" Cherys fixed me with a sad look.\n\nNow I was confused. \"What?\"\n\nCherys headed over to the couch to join her girlfriend, shaking her head. \"Sorry, we don't mean to get all melodramatic on you. It's just that we don't have any finals that count and with nothing but dead air until the graduation ceremony, we've had plenty of time to get introspective.\"\n\nCherys sat down with Danielle and leaned forward onto her elbows. \"It's just that we were talking about how little we got to hang out with you these last couple of quarters. One minute, we're drinking beer and cuddling on the couch. The next, you're falling headlong into love and spending all your time at Amber and E- Beth's house.\"\n\nDanielle picked up the narrative. \"We'd really gotten used to having you around but we knew there wasn't much time left before we graduated and moved on. In a way, it felt like you were growing up and moving on. You don't need big sister around anymore.\"\n\nI shrugged. \"I can't help it. And I really am sorry if you thought I don't need you guys anymore. But I'll tell you what. I've got to go back and study with E-Beth and Amber for my final tomorrow. But tonight I'll come back here; we'll do dinner and just hang out.\"\n\n\"Sounds great. We've got plenty of beer...\" Danielle laughed.\n\nCherys sighed, \"You know, you're the only guy I ever enjoyed being with. You've grown up to be a good man, David. I only wish you were like this when I was younger. Maybe things would have been different...\" She stared off into space.\n\n\"Yeah...\" Danielle was following Cherys' train of thought, but I was lost.\n\n\"Anyways,\" Danielle snapped out of it first and squeezed my legs. \"Go study and get back here. Or we'll start the party without you.\"\n\n***\n\nI was still in a contemplative state when I returned to Amber and E-Beth's house. I hadn't really thought much about it for the past few months while enjoying the honeymoon phase of Amber's and my relationship, but I was going to miss my own roommates. I'd gotten used to Danielle and Cherys always being around. Living with my big sister had been way more pleasant and comforting than I would have ever guessed.\n\nSo I was a bit mentally distracted when I opened the door to Amber's room and the sight before me took me by surprise. E-Beth was half-naked on Amber's bed, reclining against the wall. She still wore a bra, a simple flesh-colored utility bra with big cups to try and hold her mammoth breasts. She'd made a futile attempt to remove her shirt, getting only one arm out so that the bunched cotton was around her neck and right shoulder. Her stomach would never be model thin, it just wasn't in her genes, but her abs were still tensed enough for me to see some definition and rippling as she clenched and sweated and groaned. Her legs were spread and a fully-clothed Amber knelt beside the bed, her blonde head wriggling in E-Beth's crotch.\n\nAnd while I watched, E-Beth squinted her eyes shut and her upper torso started shaking violently as she pressed Amber's head tighter between her legs and came, wailing out her release as she shuddered in blissful triumph.\n\n\"Oh, thank you, honey...\" she drawled as Amber got up from her position. \"Ah, David's here.\"\n\nMy girlfriend turned around, her big blue eyes sparkling as she grinned at me. \"Took you long enough. We got tired of waiting and decided to entertain ourselves to pass the time.\"\n\nI rolled my eyes. \"You could have started studying.\"\n\nAmber giggled. \"This was funner.\"\n\n\"I'll say...\" E-Beth whimpered. I just rolled my eyes at the word 'funner', which Amber had said deliberately.\n\n\"Care to unwind with us?\" Amber held her arms out to me.\n\nA minute later, I was the one sitting on the edge of the bed and naked to the world. Amber was still in her jeans, but she'd shed her top and bra, correctly assuming that the sight of her firm 32D beauties would bring me to hardness that much faster.\n\nAmber had the most succulent, pouty lips, and they looked DAMN good wrapped around my cock as she bobbed up and down. But after slurping me for a couple of minutes, to my delight she leaned up and wrapped her fleshy mounds around my cock, squeezing her tits together and giving me a wonderful tit fuck.\n\nE-Beth, meanwhile, had recovered and got to her knees next to Amber. The curvy brunette finally got rid of her shirt and then unsnapped her bra, baring her even bigger tits to view. She leaned in and kissed Amber's cheek before speaking softly into her ear, \"Honey, let me remind you how this is supposed to be done.\"\n\nMy eyes went wide, a reaction Amber certainly did not miss. And with an impish grin she released me and slid to the side. E-Beth took over, pulling my erection into the deep valley of her 34DD cleavage, and then she took over the pumping action.\n\nAmber stood up and divested herself of the rest of her clothing, and now all three of us were totally naked. I could see the glistening wetness between her legs and knew my girlfriend was ready and raring to go. \"Let me take over, E-Beth, and I promise than in less than five minutes you'll have the most delicious creampie imaginable.\"\n\n\"Ooh, sounds yummy,\" E-Beth answered. \"But what if you can't finish him in less than five minutes? I'm starving already...\"\n\nAmber laughed. \"Fine, I'll make it up to you.\"\n\n\"You'll get the strap-on and fuck me within an inch of my life is what you'll do.\"\n\n\"Deal.\"\n\nE-Beth released me and moved me over until I was laying on my back across the mattress. She leaned down to kiss me and then whispered in my ear. \"You'd better hold out long enough, Mister. I want your cream but I really want her to fuck me.\"\n\nI just nodded as Amber straddled my hips and began lowering herself onto my erection.\n\n\"Hey!\" E-Beth protested. \"No fair starting early. Wait for it... you've got five minutes, starting... NOW!\"\n\nAmber shut her eyes and then lunged down onto me. Even after many, many (many) sexual encounters between us, she was still tight and it took a couple of strokes to bury myself to the hilt.\n\n\"Fuck me, baby...\" she cooed.\n\nI was only too happy to oblige. I watched my girlfriend humping her body up and down, sending her firm, round tits into jiggly orbits. But then my view was blocked as E-Beth settled her naked hips over my face.\n\n\"Let's see if I can't distract you,\" the impish brunette said down to me.\n\nI was quite distracted with the pretty pink pussy in my mouth. And I wasn't the only one. E-Beth was rubbing at Amber's tits and I could hear their sloppy kissing. It was enough to throw off Amber's rhythm and despite my girlfriend's best efforts to get me off quickly, I nutted somewhere around six minutes.\n\nAmber collapsed flat onto her back, her chest heaving with the exertion and momentarily weakened from her own climax. E-Beth, the energizer bunny, was off me and eagerly slurping my creamy jism from her roommate's abused pussy.\n\nFor a few more minutes, there was nothing but the sounds of heavy breathing, whispered moans, and wet lip-smacking. But as soon as everyone got their breathing under control, E-Beth was up and wiping her face with the back of her hand. \"Alright! Time to pay up baby.\"\n\n\"Poor me...\" Amber said sarcastically as she rolled her eyes. And with a smile she rummaged around beneath her bed to find her toy box. The strap-on was soon located and put into place. E-Beth lay supine across the bed, her legs spread and her arms eagerly awaiting her friend.\n\nI simply sat back and enjoyed the view. Amber started by doing a push-up over E-Beth's body, her tongue split E-Beth's lips while the head of her fake cock descending between E-Beth's other lips. It was a view I'd seen before. For some reason, E-Beth really got off on watching the pretty blonde fucking her. I rather liked it myself. There was something so inherently sexy about the way a woman moves her body to fuck another woman.\n\n\"That's it, Amber! Drill my wet cunt! Split me open and FUCK ME!\" As always, the pinned-down brunette lit off into a quick climax after only a couple of minutes of the Amber treatment.\n\nWhen she recovered, E-Beth looked to me and panted, \"David, c'mere.\" I knelt on the bed and she wriggled my hips around until I was straddling her face, pointed back towards Amber. The blonde moved out of the way, arching her back and planting her hands onto E-Beth's juggling tits to support herself.\n\nFrom this position, my balls were actually draped over E-Beth's eyes as she pulled down on my new hardon and tugged it into her mouth. It felt great, but I knew I wasn't in any danger of cumming as E-Beth was too easily distracted by what was going on between her legs. On the other hand, I was in danger, period. The next time E-Beth came she clamped down with her jaws, and I was fortunate that she remembered to cover her teeth with her lips lest she bite off a very tender part of me.\n\nWhen she came down from her high, E-Beth popped me out and then fixed me with a serious look. \"David, I want you to fuck my ass.\"\n\nAmber came to a screeching halt at that.\n\n\"You serious?\" I asked. Up until now, E-Beth's butt had been strictly 'exit only'. I'd gotten used to it with Ellie before her, but after failed suggestions the first few times with E-Beth I learned not to pressure her anymore. \n\n\"School is almost over and I don't know what the summer will bring. By next year, we may not be like this anymore. I've been wanting to try it, and I can't think of anyone else I would trust more.\" E-Beth held my cock in her hand, which wasn't going soft anytime soon at the prospect of this little prize. \"You'll stop if I tell you to, right?\"\n\n\"Of course.\"\n\nE-Beth pulled me down to kiss her and then she sat up and motioned for Amber to get her equipment off. Once that was done, E-Beth spun the two girls into a sixty-nine, with E-Beth on top and her butt towards the foot of the bed.\n\nWhile the girls busied themselves with one another's pussies, I dug through Amber's toy box. She wasn't into anal either, so I wasn't expecting to find Astroglide, but I managed to come up with a generic sex lubricant. It would do.\n\nWe started slowly. When I put the first lubed finger into her ass, E-Beth tightened up and Amber responded by focusing on her clit. When she seemed to relax, I introduced the second finger.\n\nBy the time I got to the third finger, E-Beth wasn't tensing up anymore. And so I got to my knees behind her.\n\nAmber wrapped her lips around E-Beth's clit and reached up with both hands to spread E-Beth's asscheeks to the side. Never a skinny beanpole, E-Beth had some healthy padding on her bubble butt and once Amber got a good grip to the sides, I leaned in through the butt cleavage and placed the mushroom head against E-Beth's rosebud.\n\n\"Do it,\" E-Beth hissed.\n\nI pushed in, E-Beth exhaling loudly, \"Oh... oh, yeah... oh, yeah...\" Her voice got higher and higher in pitch as she groaned at the stretch and tried to relax at the same time. And then she was sighing as the crown popped through and her ass muscles clenched together all at once.\n\n\"FUCK! It feels like I'm trying to take a huge dump!\"\n\n\"Something like that,\" I said wryly.\n\n\"Okay, okay... I'm good. Push the rest in. Ohhhhh...\" she moaned as I did just that. I went back to the slow, constant pressure, and gently glided forwards. When her anal chute clamped down on me, I couldn't go any further.\n\n\"Is that all of it?\"\n\n\"No, just a few more inches. You have to relax, honey.\"\n\n\"Fuck! It already feels like you're shoving a baseball bat inside me.\"\n\n\"You want me to stop?\"\n\n\"No... it's good. I'm good. It's just weird...\"\n\nAmber was licking away between us, pausing once and a while to take a tongue swipe at my balls. And then I was pressing forward and eventually I was fully buried up E-Beth's ass.\n\n\"Shit! I'm so full.\"\n\n\"You're so tight...\" I answered.\n\n\"Oh, fuck me, David. Fuck my ass.\" She was trembling, her muscles quivering and completely unable to hold her body still.\n\nI pulled back until just the ridged crown was holding me inside, and then I pushed forward. That was enough. E-Beth twitched and came, howling to the wall, \"HOLY SHITTTT!\"\n\nI stopped when I got buried all the way once again. E-Beth was useless at licking at Amber's pussy. She barely managed to keep her body supported, her head hanging down between her shoulder blades. \"Oh, shit. Do that again.\"\n\nSo I pulled back and pushed in.\n\n\"Fuck. AGAIN!\"\n\nSo I did.\n\n\"AGAIN! AGAIN! SHIT! I'm CUMMING!!!\"\n\nAmber and I could tell. Amber was getting soaked and I was beginning to worry E-Beth's ass would snap off my cock inside of her. Her muscles clenched and released as I pushed back and forth, squeezing me and caressing me like a third hand. We found a rhythm where I could keep going constantly and more importantly for me, it felt like her ass was milking me perfectly while I pumped over and over again.\n\nSo when E-Beth clamped down and came for a third time from this assfuck, she pulled me along with her. I slammed forward one last time and erupted, hosing down her bowels with a huge torrent of jism.\n\nE-Beth collapsed forwards, her chest across Amber's crotch and her own hips over Amber's tits. I couldn't dislodge my cock and so I got pulled with her, landing heavily onto Amber with my girlfriend slapping my thighs until I could pull out and slump over to the side.\n\n\"Holy shit,\" E-Beth whimpered. \"Holy shit... I never wanted to do that because I thought it was dirty. Why the FUCK was I missing out?\"\n\nAmber managed to catch her breath after being crushed by her two closest friends. She smiled at me. \"Maybe I'll have to let you try that on me someday.\"\n\nImpossibly, my dick began twitching at that thought.\n\nAmber laughed. \"No, no, not now. We've got finals tomorrow. Let's get cleaned up.\"\n\n***\n\nUnfortunately, Amber's comment had stirred my prick for a last round. And so with both girls kneeling in the shower, I sprayed them with my version of facial lotion before we rinsed off and got out.\n\nAfter such a great sex session, studying was a total letdown. Still, with my balls drained, I was able to focus with remarkable clarity and we covered a lot of ground. And then I could at least look forward to hanging out with Danielle and Cherys for our scheduled together time.\n\n\"David, you look wiped out,\" Danielle commented when I came through the door.\n\n\"Looks like they did more than just study over there,\" Cherys teased. \"Man, we schedule a pleasant, relaxing evening, and his girlfriends half-kill him before he even gets here.\"\n\nI just grinned the slightly-guilty-but-more-proud-of-my-studliness grin. I staggered over to the couch and flopped down. Danielle was already handing me a beer.\n\n\"What movie are we watching?\" I asked.\n\n\"Who cares?\" Cherys said as she leaned back against my chest and pulled my arm around her. \"Long as I get to stay just like this for a good couple of hours.\"",
        "Danielle settled onto my other side, propping her feet up onto the coffee table and wrapping my other arm around her. \"Sounds great.\"\n\nAnd the three of us settled in for a nice evening.\n\n***\n\nThere wasn't much time left, but I made it a point to spend every evening with my sister and Cherys. Amber said she understood, even if on a few nights I didn't return to her place to sleep.\n\nAnd then all too quickly, it was time for the graduation ceremony.\n\nI stayed in the crowd with the various family members. Cherys' parents looked particularly happy to see me again. And during the diploma ceremony I yelled at the top of my lungs for Danielle and all of her friends that I knew: Cherys, Nataliya, Leslie, Carmita, etc.\n\nAfterwards, the girls were mingling about, looking cute in their caps and gowns. But in the middle of one conversation, Nataliya pulled me off to the side.\n\n\"I will miss you, David. I know we haven't seen much of each other this past quarter, but that doesn't mean I've forgotten you.\"\n\n\"I'll miss you too, Nataliya. There's no way I could ever forget my 21st birthday.\"\n\nThe statuesque blonde blushed and then pulled me into a hug. \"Promise me you will watch out for Cherys and your sister. I am worried about them.\"\n\nI pulled back and looked into Nataliya's hazel eyes, which were wary. \"Worried? Why?\"\n\n\"Maybe you haven't seen it, spending so much time with your new girlfriend. But I am concerned for their relationship. Cherys, especially, is going through a very tough time with her emotions. I think she is questioning her sexuality. Danielle, too, to some degree.\"\n\n\"What do you mean?\"\n\nNataliya looked thoughtful for a second, putting together her explanation. \"Here is what I know. I have a few gay friends. You know how I'm certain that they are gay? Because when they see me naked, they don't feel ANYTHING. When they see a man and a woman having sex, they don't really get aroused. Same for my lesbian friends.\"\n\nI nodded, everything making sense at least on an intellectual level.\n\nNataliya then took on her concerned face. \"But your sister and Cherys? When they see you naked, they get horny. When they see you fucking, they get hotter and wetter. Sure, they turn away every guy who ever approaches them, but I don't think they are really lesbians. At the very least, they are bisexual, even if they don't practice it with men. But rather than considering this, Cherys has been very firm in asserting that she does not want a man. But it's all words, not in the way she reacts instinctively.\"\n\n\"Why?\"\n\n\"You have known them longer than me.\" Nataliya shrugged. \"Did something happen to Cherys or Danielle when they were young? Something to make them distrust men?\"\n\n\"I don't know.\"\n\n\"Something to think about. But while Cherys had always been a firm lesbian, these past few months her words have been changing. She does not talk the same way anymore. And everyone sees that she is now hiding some of her thoughts from Danielle. That is not healthy for their relationship.\"\n\n\"I'll keep an eye on them. I always thought they were the strongest relationship I'd ever seen.\" I looked back at my sister and Cherys talking with Cherys' parents. \"They clearly love one another. I just assumed they would be together forever. But if Danielle needs me, I guess I've got to be the big brother and be there to support her.\"\n\nNataliya smiled. \"You really have grown up.\" She leaned forward and hugged me again. \"Goodbye, David. I hope I will see you again.\" And then she turned and headed off to where Maria and Leslie were waiting.\n\nMy mind couldn't sit still. Danielle and Cherys having problems? Never in a million years. Right?\n\n***\n\nSUMMER BREAK, PRE-SENIOR YEAR (June 2001)\n\nE-Beth was gone again, off to rejoin the same internship she had taken last year. With her intelligence and experience with the company, by the time she graduated, I was sure they would be offering her a nice job with a fat salary.\n\nI warned her to stay out of trouble, but the new and improved E-Beth just gave me a wicked grin and a passionate kiss goodbye without answering me.\n\nDanielle and Cherys had both gotten entry-level jobs that were relatively local to the school. But they had one week off before starting work and both girls proceeded to veg out and be as lazy as possible for almost the entire time. On Sunday, I would help them move into a new apartment that was centrally located between their two jobs.\n\nAmber, of course, didn't need to work over the summer. Her family had enough money and contacts to guarantee her a good job once she graduated.\n\nSo that left me as the only schlep having to work for the next week.\n\nAs it turned out, Amber's house had a pretty nice pool (and pool house, and manicured garden, etc., etc.). So, not content to just get lay out and get a tan with her old high school friends, she also invited Danielle and Cherys to chill out at her place for the week.\n\nDanielle took one look at our home's dinky backyard and immediately agreed.\n\nI was already in my parents' home Thursday when the girls came strolling in, obviously looking me up and down like a piece of meat. I didn't even want to know what Amber had been saying about me all day.\n\nThe whole time I was surreptitiously observing Danielle and Cherys when they were together. Nataliya's warnings were in the back of my head, but I honestly did not detect a single difference in the way they were around each other: same affection, same casual comfortability.\n\nAnd then came the Friday night party. Looking back, I guess that was when I saw the first chinks in their relationship.\n\n***\n\n\"Hey, dude. You free tonight?\"\n\n\"'Dude'? You never called me 'dude',\" Nate's voice was honestly puzzled.\n\nI smirked at myself. \"Sorry, just a friend rubbing off on me. So are you free?\"\n\n\"Well, I was going to do dinner with Monica, but we didn't have any set plans. What's up?\"\n\n\"Well tomorrow my sister and Cherys are heading off to their new apartment, new jobs, new lives, yadda, yadda. So Amber decided to throw them a little barbecue tonight at her house. She told me to invite a few friends as well.\"\n\n\"Amber, huh? I still can't believe you're dating her. Wasn't she a stuck-up bitch?\"\n\n\"Nah. She's really sweet when you get to know her. I can hardly believe you're still with Monica.\"\n\nNathan went silent for a moment. \"Yeah, me, too. I'm telling you, man. I'm going to marry her someday.\"\n\n\"Marry her? You guys getting that serious?\"\n\n\"She got me to wear a Stanford sweater when I came to campus to visit her. I'm the fucking starting quarterback for Cal, and I'm walking around the Stanford campus wearing cardinal red. I've got it bad.\"\n\n\"No shit. So seriously, you guys coming? I've think I'll get a couple of the old gang there as well.\"\n\n\"Sure thing. Let me run it by the old ball and chain, and I'll call you back.\"\n\n***\n\nNate and Monica showed up. So did two others from our high school football team and three ex-cheerleaders. Danielle and Cherys had a few of their old friends come as well, and Amber had four 'Heights' classmates.\n\nDespite there being three distinct ex-High School cliques present, everyone seemed to have grown up over the past few years. Everyone mixed and flirted and reminisced about the old days without any of the old politicking or social tensions. With six guys and fourteen girls, I really couldn't complain about the ratio or the view.\n\nThe boys manned the grill and the girls stripped down to bikinis and jumped in the pool. With plentiful alcohol around and the lack of any parents, it was turning out to be quite the shindig. We ate burgers and dogs, drank a lot of beer, and horsed around in the water until the sun came down late into the summer evening.\n\nThe highlight of the party for me was just before sundown. Cherys had been chugging beers pretty steadily, and she was bouncing up and down while giggling uncontrollably. She wasn't wearing much to begin with, just a sheer, navy blue bikini that showed off a good bit of titflesh and a brief bottom that revealed more of her asscheeks than it covered.\n\nShe noticed my eyes goggling up and down as she hopped around, and then took two slightly unsteady steps right towards me. \"Wanna closer look, David?\"\n\nI glanced momentarily at Danielle and Amber, who both just smirked at my predicament. Then I looked studiously at Cherys' tits and calmly said, \"Yes.\"\n\nTo my surprise, Cherys shrugged, reached back, and unhooked her top. I'd already known her nipples were rock hard, poking through the bikini, but now I was seeing a lot more of them as she dropped her top onto the deck.\n\nDamn, those things were as big as E-Beth's and quite possibly firmer and rounder. I'd caught glimpses of them from time to time on more than one occasion, but this was so much more intense as she was showing off in front of the entire crowd. \n\nCherys took two steps forward and let me ogle her up close and personal. I was sitting on a chair, nursing my latest beer as Cherys then dropped her bikini bottoms, displaying her wet, bare-shaven pussy. And then she climbed into my lap, ground her naked crotch against the hardon in my swim trunks, and pulled my face into her cleavage.\n\nI groaned as Cherys beat the sides of my cheeks with her breasts, and then laughing she got back up, turned, and dove into the pool.\n\nBy this point, all pairs of eyes were on her. And when she surfaced and slicked the hair out of her eyes, she called out. \"New rule: nobody gets in the pool unless they're buck naked!\"\n\n\"Oh, yeah!\" One of our football buddies cheered, dropped his shorts, and went cannonballing after the gorgeous brunette. Two other guys and four girls quickly followed.\n\n\"Shall we?\" Amber's voice sounded in my ear. I looked to the right and saw my girlfriend wearing nothing but her birthday suit and a smirk. Her red bikini was a puddle on the deck, her blonde hair was golden in the dying sunlight, and her blue eyes sparkled out from the shadows.\n\nI was momentarily embarrassed by the hardon Cherys had given me. But hey, that girl could have gotten a dead man erect. I stood up and managed to pull my trunks over my dick. And then holding hands, Amber and I jumped into the pool.\n\nOnce in the water, there was quite a bit of grab-assing and copped feeling going around. Drunken Cherys even got me into a chicken fight, paired with her against Monica and Nate.\n\nUnfortunately, we guys weren't very good bases. We spent too much time looking up to watch the girls' naked bodies and not enough time maintaining our balance.\n\nEventually, the evening started to cool and most of us relocated to the hot tub. Like everything else at Amber's family home, it was big, luxurious, and had all the bells and whistles. Various couples, both hetero and lesbian, wound up cuddling in the warm water and I swear at least two girls had muffled orgasms while we were there.\n\nAt the end of the night, everyone got dressed again and an impromptu dance floor started up on the pool deck. Things were obviously winding down and the inevitable \"growing up and moving out\" conversations started up. Besides Danielle and Cherys, there were three others in the total group who had graduated college and were going on to the real world.\n\nWith a bit of egging, I started up a slightly-tipsy speech to the graduates. It was mostly coherent... mostly.\n\nAt the last, we toasted everyone with raised plastic cups of beer, and then five guys bum-rushed the graduates and tossed them screaming into the water. I got the honors of tossing Danielle into the cold water, her shriek perforating my eardrum so that I don't think I had 100% hearing for the next day or so.\n\nThat seemed to cap off the festivities. Once people dried off and started sobering up, the party started breaking up. Little by little, people headed home until we were down to just the core group.\n\nDanielle, Cherys, and I were helping Amber pick up the obvious trash and put away the grill. Amber was learning. Yes, it was her staff's job to clean up after us, but it didn't hurt to give them their basic respect on a daily basis and we wanted to at least do a little bit to help out.\n\nNate and Monica were the last guests left, but Monica had drunk a couple of beers too many and for the moment, she was all over Nate. Despite the cooling air, she was still wearing nothing but her bikini while straddling Nate on a lounge chair and shoving her tits into his face.\n\n\"Damn. I think she's going to start fucking him right in front of us,\" Danielle commented.\n\nI looked over and saw the telltale arousal in her eyes and heard it in her voice. I was suddenly reminded of Nataliya's observations regarding the Cherys and Danielle's potential bisexuality.\n\n\"Sweetie, everyone's watching...\" Nate exhaled when Monica started tugging at his shorts. His tone was strained, torn between wanting it to happen and embarrassed at the same time.\n\n\"Don't stop on our account,\" Cherys giggled.\n\n\"They're all friends,\" Monica agreed, then pulled Nate's shorts to his ankles and shoved the first four inches of his cock into the back of her throat.\n\n\"Ohhh, shit...\" Nate reclined back against the lounger, his eyes wide open to the stars.\n\nThe young couple was on one of a row of lounge chairs, all lined up neatly beneath the backyard lights. Cherys flared her eyes at Danielle and took her girlfriend by the hand, leading them over to the chair immediately next to Nate and Monica. Cherys slipped her bikini bottoms to the ground, and then sat back on the chair and spread her legs.\n\n\"Come to me baby,\" Cherys cooed, already stirring her fingers in her own crotch.\n\nDanielle smiled and knelt down. I couldn't see anything but the back of Danielle's dirty-blonde head as she wriggled between Cherys' legs, the gorgeous brunette planting her hands on the back of my sister's head.\n\n\"That looks like fun,\" Amber commented. \"Let's forget the trash for now.\" She walked to the next empty chair besides Cherys and Danielle. Only instead of just losing her bottoms, Amber dropped all of her clothing so that she was completely naked.\n\nI grinned and then settled into place.\n\nAt first there was a strange harmony of paired female moans with one set of male grunts. But then at a baritone bellow, both Danielle and I lifted our heads and looked to the side to see Nate's eyes bulging and his face red, his hands clamped onto Monica's head as he obviously was unloading his cum into Monica's mouth.\n\nThe next time I got distracted was when Cherys called, \"Squeeze my tits baby. Oh, you know how I love it when you pinch my nipples.\"\n\nI couldn't resist looking up to see that Cherys' bikini top was missing once again, Danielle's hands caressing the voluminous mounds while her head shook between her girlfriend's legs. Monica and Nate had also switched places, the air now filled with three sets of feminine moaning.\n\nCherys was so wired that she came rather quickly. And when the brunette started gasping for a second climax, I managed to get Amber off as well. And then came the words I had always fantasized about but never expected.\n\n\"Amber, would you mind trading with me?\"\n\nMy head shot up and my dick, which had slowly softened while my attention was on Amber's clit, went rock hard in an instant.\n\nDanielle, too, was looking back and forth between her girlfriend and mine. Cherys' eyes were swimming, liquid pools of desire as her entire face radiated absolute lust.\n\nAmber noticed my agitated state and then looked at Danielle. She smiled and licked her lips in obvious arousal. \"Sure. Sounds like fun. Go show her what your tongue can do, baby.\"\n\nSo with Amber nodding her head to the side, I got up and swapped places with Danielle. My sister was appreciably interested in my pretty blonde girlfriend. But to be honest, I think she was more focused on watching me with her girlfriend.\n\nI settled down between Cherys' legs, my eyes locked in on the pretty pink pussy spread wide for me. She was still wet from her two recent climaxes and I was immediately hit by her sweet scent.\n\nI lowered my head and took the first tentative lick from bottom all the way up, causing Cherys to tense her hips and briefly buck her hips upwards, her breath catching in a muffled gasp.\n\nCherys blinked and then smiled at me. \"How does it feel to be the first man to ever put his tongue there?\"\n\nI didn't answer. I just did it again.\n\nAnd again.\n\nAnd again.\n\nIt's not like Cherys necessarily tasted any better than Amber or anything. She was muskier compared with Amber's sweetness, if anything. But the fact was that this was CHERYS. This was my dream girl. This was my eternal, untouchable fantasy girl. And I was eating her pussy.\n\nIt just about blew my mind.\n\nSo I went on autopilot, just enjoying the moment. I worked instinctively, not able to concentrate with my mind racing in disbelief at what I was doing. Apparently, my body was a better muff-diver than I was. Either that, or Cherys was extra- horny by the situation as well, because she went off like a firecracker barely a minute into my tongue bath.\n\nShe came again when I brought a finger up and curled the tip against her G-spot.\n\nAnd she came again when I worked a second finger into her.\n\nBy now, my ears were informing me of everything else that was going on. I heard the lounger to my left squeaking as apparently Nate was already fucking Monica. I heard the shift of the lounger braces and then dual feminine moaning to my right. My guess was that Amber lowered the lounger flat so she and Danielle could sixty-nine.\n\nBut my eyes were all on Cherys. I saw nothing but her pretty pussy, her taut tummy, and the twin mountains of funbag flesh perched on her chest. She pulled my hands up and then my tongue went even wilder once I got both palms pressed against her breasts. My hands were on CHERYS' breasts.\n\nI still couldn't believe it.\n\nJust like I couldn't believe it when I heard \"FUCK ME DAVID!\"\n\nMy head popped up, my lower jaw absolutely drenched in Cherys' nectar. My head immediately went to the right, where Amber and Danielle were indeed sixty- nining, Amber on top with her head facing me and Danielle pointed away on the bottom.\n\nCherys was frantic. I'd lost count of how many times she'd climaxed, but she was trembling so hard she couldn't keep her hands still. She clawed at my arms and pulled at my back, trying to physically MOVE my torso up and into position.\n\n\"I want you David. I want your cock inside me. I want it in my cunt. I want it in my ass. I want to swallow your cum. Fuck me. Fuck me, David!\"\n\nIt should have been the culmination of my longest ever fantasy. I was literally moments away from burying my hard, throbbing cock inside of CHERYS.\n\nAnd yet... all I could feel was absolute panic.\n\nCherys had lost it. She was acting way out of character, in a manic way that was more frightening than sexy. Her eyes were wild and yet droopy. And her twitchiness unnerved me.\n\nCherys looked desperate. Danielle looked horrified. And Amber looked concerned. My girlfriend caught my eye, and ever so fractionally, she shook her head 'no'.\n\nThat was all I needed. I pulled back and stumbled away from the lounger, leaving a still-frantic Cherys crying for me to come and fuck her. Amber came to me while Danielle switched over to her girlfriend and enveloped her in a hug. Cherys was sobbing pitifully and trying to throw Danielle off of her while still reaching out to me.\n\nNate looked like he wanted to help restrain Cherys, but hesitated at her nudity until Monica told him to go hold her down.\n\nAnd all the while, my dick throbbed and waved of its own accord back in Cherys' direction. My balls were swollen to the size of grapefruits after so much time close to Cherys' pussy. And the shaft was an angry purple, as thick as I'd ever seen it. My dick wanted in. And Cherys' wild gaze was locked onto it as well.",
        "Amber squatted in front of me and quickly swallowed me whole. Cherys cried \"NO!\" and then wailed in agony.\n\nI could barely stand as Amber hoovered me, jacking the base and sucking powerfully at the tip. After only a minute, I grunted and then began blasting away into Amber's mouth. I came with such power and such volume that she gagged and had to pull off, thick ropes of cum shooting across her face in creamy white lines, painting the pretty blonde from forehead to chin.\n\nI'd built up quite the load after all the skinny-dipping and playful teasing and especially the recent oral play with Amber and Cherys. Even after the first dozen full shots, I was still going and Amber pointed me down to empty the rest onto her chest.\n\nOnly when I was done firing did Cherys quiet. Amber sagged her butt down to the deck and leaned back against her arms, her hands planted on the floor behind her. She gasped for air while the hot streams of jism dried on her naked body. And my cock began to wilt.\n\nCherys was sniffling softly as she watched my erection go away.\n\nBut just when we thought it was over, her wild eyes turned to the side and she saw Nate's swollen prick. It was a new fight as she reached out to him, demanding, \"I need a cock. I need a man!\"\n\nAmber and Danielle restrained her while Monica planted Nate back onto the lounger beside them and she inhaled his prick. Cherys was already going silent again and sobbing pitifully. Two minutes later, Nate spurted into Monica's mouth and she drank it all down.\n\nAnd at last Cherys went limp.\n\nDanielle and Amber let go of her, and she looked utterly devastated as she curled into the chair and buried her face against the back.\n\nWe all jerked when Cherys suddenly lurched, making a gagging noise. And then she flopped out of the lounger, turned towards the grass, and then let loose with a loud retching sound.\n\nA large volume of vomit spewed out onto the grass as she hunched forward on all fours, followed by a second load. And then Danielle got hold of a towel and was wrapping her up.\n\nThe party was over.\n\n***\n\nEven though I'd been back home for a week, it still felt a little weird waking up in my own bed. I'd begun to think of our old college apartment, where I'd spent three years of my life, as home. So with that momentary disorientation, my mind was occupied with remembering the proper way to the bathroom and to locating my clothes. The previous night's adventures and misadventures were not yet remembered.\n\nMy mild hangover probably didn't help.\n\nSo when I came out of the bathroom and saw Cherys waiting to use it, it took me a few seconds to remember just WHY she was looking at me like a frightened animal. \n\nChoosing not to comment, I simply offered a reassuring \"good morning\" and then brushed past her while she scurried into the bathroom.\n\nOf course, the instant I got into my own bedroom, it all came rushing back to me. After Cherys had recovered from upchucking her entire barbecue dinner, Danielle got her cleaned up and then we loaded her into my car. I had kissed Amber goodbye, with a promise to call in the morning. We brought Cherys back to our house. It was a common enough occurrence for her to stay overnight with Danielle, and we didn't want her parents to see her in this state.\n\nBut before that, I remembered the party, her naked body, eating out her pussy, and Cherys begging me to fuck her.\n\nIt was a damn good thing I'd already pissed; otherwise there was no way I'd squeeze out a drop with this erection.\n\nIn my mind's eye, I recalled just how she looked sprawled across that lawn chair, her chest heaving those massive tits up and down; her legs split to the sides. One hand was on her clit, her own fingers lewdly spreading those pink pussy lips wide.\n\nAbsentmindedly, I sat on the bed and dug my hand beneath the waistband, circling my fingers around my rod. I managed only a few strokes before the sharp knock came at my door.\n\nReflexively, I yanked my hand out and tried to smooth down my pajama pants. \"Yeah!\"\n\nCherys cracked the door and then came in. I saw her gaze immediately zero in on the tent being pitched in my pants, and then she forced her eyes back up to mine.\n\n\"Hi...\" she just kind of drawled, momentarily forgetting what she was going to say.\n\n\"Uh, hi...\" I managed awkwardly. I flailed around trying to think of something else to say. \"How are you feeling?\" I asked. Then I saw her squinting at me awkwardly. \"Hangover?\"\n\n\"Yeah...\" she winced and looked at the floor. It was extremely weird for me. Here was a gorgeous, supremely confident woman who I had worshipped since I first took an interest in girls. And she was staring at her feet with her head hanging down between her shoulders.\n\nIt couldn't be like this. She meant way too much to me for our friendship to end like this. So she got drunk and a little horny, who hasn't? And after all my masturbatory fantasies of her, who was I to claim she wasn't allowed to lust a little after me? I had to make her see that I still cared about her as much as ever.\n\nThe awkward silence carried for a long minute. Then she finally breathed in and said to the floor, \"Look, I wanted to say I'm sorry for the way I acted last night.\"\n\n\"Don't worry about it,\" I cut her off.\n\nShe startled and then managed to glance up at me. \"I put you in a very dangerous position. wish I hadn't-\"\n\n\"Forget it. If you want, it never happened.\"\n\nShe looked at me a little more closely. \"I just don't want things to be awkward between us.\"\n\nI opened my arms in an obvious invitation for a hug. \"Come up here.\"\n\nStill a little wary, Cherys managed to drag her feet and then sit on the bed beside me. I reached out and wrapped my arms around her as she settled her back against my side. One arm slid around her waist and the other stroked her arm in a familiar cuddle position. \"Hey gorgeous...\"\n\n\"Hey hero...\" She sighed happily and snuggled a little closer.\n\nOur heartbeats slowed and our breathing became rhythmically smooth. I relaxed considerably. We would be alright.\n\n\"David... I love you...\" her voice came quiet and trembling.\n\nInstinctively my arm tightened around her. Amber, of course, told me she loved me. She was my girlfriend. But the only other girl who'd ever said that to me was E-Beth. In retrospect, my ex had only said it as an automatic response to my declarations of love. She hadn't really meant it.\n\nBut Cherys said it and I could hear in her voice that she meant it. I was so shocked I was frozen stiff.\n\nHer voice continued in the same tremor. \"Before you say anything, I just want you to know that I don't love you romantically. I'm not trying to steal you from Amber or hurt Danielle or anything. But it's how I feel. For everything you meant to Ellie. For the way you treat me. For the way you've made me believe that there are good men out in the world somewhere. I love you. It's almost like you're family.\"\n\nI thought about what she said and in a way, paralleled it to the way I felt about Danielle. In everything but blood, Cherys was like a sister to me. If that meant I had the occasional incestuous thought about her, so be it. But she was like the girl next door I had grown up with and fantasized about. And now I would consider her one of my closest friends.\n\nTruly, she knew me better now than even Nate or Kevin, or E-Beth or Amber. She knew me almost as well as Danielle did. And I cringed inside at the thought of anything bad ever happening to her. And so the words flowed forth effortlessly. \"I love you too, Cherys.\"\n\nShe hummed happily and snuggled deeper into my grasp. My arm around her waist cinched up until it was pressing up slightly beneath her breasts. I felt affection mingled with chemical heat in my veins. Damn she smelled good.\n\nBut despite the tug-of-war between sisterly love and raw lust for her, I didn't feel awkward. Looking back, I'd gotten used to the sensation; after all, I'd been in that tug-of-war for almost ten years now.\n\nI let my head loll over against hers, hugging her tightly. Now if only her forearm wasn't pushing down on my erection.\n\n***\n\nDanielle and Cherys must have had their own discussion over the events of the party, because when I came out of my room they were comfortably at ease around each other.\n\nWithin the hour we were on the road and ready to move the girls into their new apartment. I felt nostalgic sadness seeing them set up a home that didn't include me in it.\n\nFortunately for me, Amber had the perfect solution when I returned her house. It started with the pretty blonde in bed, flat on her back and fully clothed. She then pushed her shirt above her naked tits, hanging around her neck while she dropped her head off the edge of the mattress and ordering me to shove my dick into her throat.\n\nAfter making me use her tits as handholds to facefuck out my aggression, she flipped onto all fours and hitched her skirt over her naked ass, presenting me with a wet and juicing pussy from behind.\n\nAfter spending a load there, Amber sucked me back to life and then climbed aboard to let out her own aggression after being dominated by me for twenty minutes. Already lubricated by my first spending, Amber could move her hips really, really fast.\n\nShe damn near fucked my teeth out.\n\nAnd so as I cuddled in post-coital bliss with my girlfriend and thought about my sister and Cherys together, on their own, I realized that it was all just a part of growing up. You move on with your life.\n\nMy new world was a whirlwind of excitement with my new girlfriend. I clicked so well with Amber in a way that that was vastly superior to anything I'd ever experienced. As happy as Ellie and then E-Beth had made me, those relationships just didn't compare to the happiness I was finding with my current paramour.\n\nMy big sister Danielle was finally going off to a place where she didn't have to mother over me. She was free to focus on building a career and an adult life for herself without worrying about her little brother's mental condition or even how to feed a young man.\n\nAnd Cherys was moving on to figure out her life. She had stability and the love of a beautiful, caring woman in Danielle. So she had a few too many beers and drunkenly decided to try and find out what a dick felt like. So what? She could put the past behind her and focus on her future. \n\nAt least, that's what I thought. Perhaps I should have known better than to think it would all blow over and we would all go back to the way things had been before. Life doesn't work like that. Things don't go back. Everything... inevitably... changes.\n\nAnd the events that happened at the end of summer certainly changed everything.\n\n***\n\nDespite having to schlep myself off to work while my girlfriend stayed home and sunned herself, I rather enjoyed the 3-month summer vacation.\n\nMaybe it was because my old high school friends realized this was our last hurrah together, and we showed it by partying harder than usual every chance we got.\n\nMaybe it was because spending 9-10 hours at work every weekday made the time fly by rather quickly.\n\nMaybe it was because after 9-10 hours of sheer boredom at her house, Amber was really, really excited to see me. Yeah... I think that was it.\n\nFor example, on a random Tuesday I went to her house and she met me by the door wearing a push-up red teddy, matching red stockings and garters, and no panties. The very next Thursday she told me her parents were home and she came to my house. And then I found out she was buck naked underneath her trenchcoat.\n\nAnd that doesn't even go into the times when she pranced around topless in skintight black vinyl pants and boots, holding a riding crop.\n\nAfter the first month or so, she couldn't even wait for me through the whole workday. I was hunched over the computer at my cubicle when a soft pair of hands suddenly covered my eyes. \"Guess who?\"\n\nOf course, I knew the voice immediately. \"Amber?\" I jerked and turned around. There she was, beaming at me and wearing a short sundress that showed off plenty of her cleavage. With her blonde hair up in pigtails and a smattering of pastel makeup, she was a pretty pixie in human size.\n\n\"Come on. I'm taking you to lunch.\"\n\nI sputtered for just a second. It was only 11:15. \"I've still got work!\"\n\nAmber grinned at me. \"I already cleared it with your boss.\" Sure enough, my boss was leaning against the door to his office, rather obviously drooling at Amber's ass. Engineers really don't see enough cute girls in their lives.\n\nWe returned to the front of my office building around 2pm. I sat back in the driver's seat and sighed. Amber sat up and wiped a glob of cum from her lips before leaning up and pecking my cheek. \"That should hold you until tonight.\"\n\n***\n\nSUMMER BREAK, PRE-SENIOR YEAR (August 2001)\n\nIt was a warm summer Friday evening and Amber agreed to meet me at the local mall/cinema/restaurant complex. A mindless PG-13 action blockbuster was opening and we were going to kill a few brain cells and make our eardrums go numb for a couple of hours, then find a nice dinner.\n\nThanks to casual Fridays, I drove straight from work in jeans and a polo then went to our designated meeting spot in front of the theater. Just like it had done almost every day for the past six months, my heart leapt sky high as soon as I saw her.\n\nTonight she was in skintight jeans and a baby-T. I whistled out loud as I ogled the long legs, trim body, and full bosom of the cute blonde with her back to me. Stepping forward quickly and silently, I put my hands over her eyes from behind and said, \"Guess who?\"\n\nThe head bobbed down for a second and an unfamiliar voice wavered, \"Eric?\"\n\nLike I'd just stuck my hands into hot flame, I jerked back while the girl turned around. \"Oh, I'm SO sorry. I thought you were someone else.\"\n\nThe cute blonde turned and backed away from me, her face very SIMILAR to Amber's but I knew it wasn't actually her. In fact, she looked several years younger than us, probably still in her teens.\n\n\"Hey!\" a gruff male voice came from the left and I turned to see a hulking boy stalking towards us from the restrooms.\n\n\"Amy! This guy bothering you?\" the hulk asked.\n\n\"No, no,\" the girl shrugged, trying to place me but clearly recognizing that I was just a stranger. \"Just a case of mistaken identity.\"\n\nThe guy seemed to cool off from his momentary fury, and then took a closer look at me, wrinkling his eyebrows. \"David?\"\n\n\"Yeah,\" I answered in surprise, standing up straight. \"Do I know you?\"\n\n\"Well, it's been awhile. You used to date my big sister Elizabeth.\" He reached out to me with a meaty paw.\n\nI tentatively took his hand and studied the face. A moment later, I recognized him. \"Eric! Little Eric?\"\n\n\"Not so little any more,\" he deadpanned. The guy was four inches taller than me and all muscle.\n\n\"Holy shit you grew up!\" It had been two years since I'd last seen the kid, during that summer when E-Beth and I started dating. Somehow, he'd gone from a tall, but skinny twerp into this hulking monstrosity.\n\n\"Yeah, hit some kind of growth spurt.\"\n\n\"I'll say. You coming up to Uni already?\"\n\nHe chuckled. \"No. I'm still in high school. Going to be a senior.\"\n\n\"You playing football?\"\n\n\"Yeah. Coach moved me to defensive end.\"\n\n\"Too bad you're not graduating yet. Uni's defense could use some help.\" Then I turned to the pretty blonde who was looking back and forth between us.\n\nEric caught my look and then stammered out. \"Oh, I'm sorry. Amy, this is David. David, Amy.\"\n\nShe held out her hand. \"Pleased to meet you.\" I looked at the way she carried herself, still in that coltish awkward way showing she still hadn't grown into her body. Her head bobbed a bit when she turned. I realized just how old I was getting with these kids who were four years younger than me. Still, she was quite pretty and I knew she'd break some hearts when she grew up.\n\nAmy soaked in my little evaluation of her nice body and proudly thrust out her chest. \"So you dated his big sister?\" She giggled in a flirty little way.\n\n\"Yeah, we're still friends. But she goes off to some internship every summer so I haven't been by Eric's house since he was, well... a lot skinnier. How did you end up with him?\"\n\nAmy turned to her blushing boyfriend and smiled, \"Oh, you could say it was love at first sight. I had just transferred in from out of state. The minute he saw me his jaw went slack and he just stared in utter rapture.\" The cute blonde giggled. \"It made quite an impression that this tall, hunky man was so taken with me immediately.\"\n\nWe both looked over at the boy, but realized Eric's jaw was rather slack and he was staring off behind me.\n\nAmy remarked, \"Yeah! That's the look!\"\n\nMeanwhile, I turned to follow his gaze and saw Amber walking up to us. I instantly analyzed how graceful she walked, despite her wedge sandals. Her miniskirt and blouse were also quite a bit more grown up. Perhaps I should have immediately recognized that Amy was not her, even from behind. This was a grown-up woman.\n\nI reached out my arm.\n\nAmber settled into me and said, \"Hey baby. Who're your friends?\"\n\nI gestured to the slightly-recovering Eric, who was still staring at Amber in wonder. My girlfriend had that effect on occasion. \"This is Eric. He's actually your roommate's little brother.\"\n\n\"Really?\" Amber said dramatically, searching his face. \"E-Beth's little brother? I'm Amber.\"\n\n\"I know,\" he stammered. \"I was a freshman when you both were Seniors in High School.\"\n\nEric still looked tongue-tied so I gestured to Amy, who was looking back and forth between Eric and Amber and didn't seem too happy with what she saw. Myself, I started to wonder if his most recent slack-jawed look was for his girlfriend... or mine. I finished by directing Amber's attention to the younger blonde, saying \"And this pretty girl is Amy.\"\n\n\"Hi,\" Amy said coolly as she held out her hand. \"I'm Eric's girlfriend.\"\n\nAmber shook it and evaluated the other girl. Both blonde, both slightly-built except for sizeable chests. Same height, similar figures, similar facial structures. \"Well, I have to admit he has excellent taste in women,\" Amber complimented.\n\nAmy made a neutral 'hmph' noise and then slipped her arm around Eric's waist. That finally broke his reverie and he looked back at his girlfriend. \"Nice to meet you both,\" Amy started abruptly. \"Come on, Eric. The movie's going to start soon.\"\n\nThe two of them said goodbye and then turned away. I was shaking my head in wonder at what a small world this was and looked back to my girlfriend. Amber was actually staring after them.\n\n\"You remember him?\"\n\nAmber smiled and then turned to me. \"Yeah, I do actually. He used to follow me around like a puppy dog when we were in high school. Nothing obvious, he never came up and even talked to me. But he was always hanging around and I saw him staring at me more than once. Never knew he was E-Beth's little brother. He's grown up quite a bit.\"\n\nShe looked over at the departing couple again. \"Guess he found his own version of me.\"\n\n\"Good for him,\" I said emphatically and wrapped her into my arms. \"Because the original is absolutely incredible.\"\n\n***\n\n*bzzt* *bzzt*\n\nThe hell? My eyelids were painted shut, but with great effort I managed to pop one of them open.\n\n*bzzt* *bzzt*\n\nNow free, my eyeball swiveled over to the clock. It was one in the morning. Who the hell was calling me this late? Didn't they know I had work tomorrow? I mean, I enjoyed having a cell phone now. It kept me connected and meeting up with people was SOOO much easier when you had cell phones. But before I had the damn thing, I could actually SLEEP all night.\n\n*bzzt* *bzzt*\n\nFine. I got both eyes open, reached over and picked up the handset. The caller ID showed \"Danielle\". I was going to kill her.\n\n\"What?!\"\n\n\"Hey, squirt. Did I wake you?\"",
        "\"Yes,\" I growled.\n\n\"Sorry. I won't take long.\" She sounded honestly apologetic and I recognized that something wasn't quite right. More than twenty years together will do that to a sibling. \"What's wrong, Dani?\"\n\n\"Nothing, nothing,\" she said quickly.\n\n\"Dani...\" I drawled.\n\n\"Really, nothing's WRONG per se. I don't want to talk about it over the phone. But are you free this weekend?\"\n\n\"Uh, well, it's the last weekend before I go back to school. I'm sure Amber and I are doing something.\"\n\n\"Well, Cherys and I want to see you before you go. Can you talk to Amber tomorrow about meeting up with us for the weekend?\"\n\n\"Sure, sure. Then will you tell me what this is all about?\"\n\n\"I promise.\"\n\n\"Okay, now go away.\" I hit END before she could say another word. I was unconscious even before my head dropped back down onto the pillow.\n\n***\n\nAmber looked past my shoulder and then hung up her phone, tucking the small silver device into her purse. \"There they are.\"\n\nI turned to look. Sure enough, there were Cherys and Danielle, making a fashionably late entrance.\n\nAmber was already getting the attention of the restaurant hostess. \"We're all here.\"\n\nThere were warm hugs all around, and then our foursome wound through the restaurant to our table.\n\nWhen we sat down, Danielle piped up, \"I'm so jealous of you guys. Going back to school.\"\n\n\"Jealous? Why?\" I snorted.\n\n\"I dunno. Life was just so much simpler when we were in school.\" My sister glanced over at her girlfriend, who was unusually quiet. \"Go to class, finish your homework, and enjoy your free time. That was it. No worries about careers or saving for the future.\"\n\n\"...or lecherous bosses hitting on you,\" Cherys complained.\n\n\"That too,\" Danielle conceded.\n\n\"Is that why you wanted to meet up with us?\" I asked. \"To whine about how much life sucks after college?\"\n\n\"No, no,\" Danielle groaned. \"What? I can't visit with my little brother before he leaves for school?\"\n\n\"First of all, school is actually closer to your new apartment than here. We could have just met up next week or something. Secondly, you were pretty cryptic on the phone. Something's up.\"\n\n\"Will you relax?\" Danielle admonished. \"By next week you'll be waist deep in your Senior classes. For now, it's a last weekend to unwind.\"\n\nHer words made a logical sense, but I knew her too well. She was still hiding something from me. I let out a long sigh and squeezed Amber's hand, who was glancing back and forth between me and Danielle as if trying to figure out the unspoken communication. \"Alright, I'll quit with the Spanish Inquisition.\" I took a sip from my Coke. \"For now...\" I grinned.\n\nThe rest of dinner was taken up with pleasant conversation. Amber got along really well with Danielle and Cherys, and we whiled away the hour talking about all the things Amber and I should accomplish before we left the campus.\n\nOddly, Cherys was still rather quiet throughout the whole evening. She was there, participating, but not as much as her normally outgoing self. We'd met up a couple of times over the summer since the barbecue at Amber's place, and things were never awkward between us. I wondered if Danielle's mysterious motive and Cherys' current social restraint were related.\n\nFor a moment, I flashed back to what Nataliya had been saying. Was their relationship in trouble? Nah... I pushed the thought from my mind. They were the most rock-solid couple I'd ever seen, my parents included.\n\nAll three girls had some wine with dinner. None of them were smashed or anything, but they had some light buzzes going. When it was time to leave, Danielle was the first to ask, \"Hey, can we go somewhere to talk?\"\n\nI gave a significant look to Amber and she nodded fractionally. I'd told her about the cryptic middle of the night phone call to ask about meeting, so this wasn't unexpected.\n\n\"Let's go to my place,\" Amber suggested. \"My parents are in Tahiti for the week.\"\n\nDanielle nodded. She'd only had one glass and looked in good shape to drive. I'd stuck to Coke all evening and led the way.\n\nOnce we got to the house, we all went inside and I sat down on a couch. Cherys surprised me a bit by going straight to the spot next to me, sitting down and pulling my arm around her in a protective hug.\n\nWe'd done this a zillion times, but never right in front of Amber to my recollection. I swiveled my gaze up to my girlfriend, who simply looked at us with an unreadable expression and then took a chair across the coffee table. Danielle took the next chair.\n\nFor a moment, the four of us just sort of looked at each other. Well, Danielle, Amber, and I looked at each other. Cherys just closed her eyes and leaned her head against my shoulder.\n\n\"So...\" I broke the silence. \"What's going on?\"\n\nDanielle was clearly a bit on edge, rubbing her knees and biting her lower lip. She looked over at Amber, trying to read her. But my pretty blonde girlfriend's expression was as neutral as an Easter Island statue.\n\nMeanwhile, Cherys looked perfectly content for the first time all evening as she simply snuggled closer into my arms.\n\n\"David, I'm trying to find a delicate way to say this,\" Danielle started. \"I don't want you to misunderstand our intentions or take this the wrong way. And there's a lot of wrong ways this can be taken.\" She barked out a nervous laugh. \"Oh, god. If I keep rambling I'm going to hype this up WAY more than it needs to be.\"\n\nCherys' voice cut straight through my sister's rambling. \"I want to lose my virginity.\"\n\nEveryone went silent at that. I looked down at Cherys, who was staring up into my eyes, her irises shifting to an iridescent green. \"Excuse me?\" I asked.\n\n\"I want to lose my virginity,\" Cherys repeated. \"And I want my first man to be you.\"\n\nMy gaze immediately swiveled over to my girlfriend. Somehow, I felt guilt tearing through me like a knife, as if I'd somehow already cheated on her. But Amber just looked back at me with a calm smile, nodding her head fractionally again.\n\nNot finding clear answers there, I turned to my big sister. \"Danielle? Can you explain?\"\n\n\"It is what she says it is,\" Danielle waved her hand towards Cherys. \"She's never had sex with a man and she wants to know what it's like. But in general, she doesn't like men. You know that. Even with all the opportunities we had in college, we never did. You, David, you're the only one she trusts.\"\n\nI looked back down at Cherys, who was beaming at me with a happy/hopeful smile. Her arm reached back and her fingers delicately traced their way up my jeans until her palm was resting on top of my erection.\n\nAnd it was an erection. Despite the awkwardness of the situation, the mere thought of having sex with Cherys was enough to get me hard. \"Please, David,\" she cooed. \"I've wanted you, even before the barbecue.\"\n\nI looked down at her and then back at my girlfriend and on to my sister. \"Danielle?\" I queried.\n\n\"I'm cool with it. We've talked. That was the night I called you.\" Danielle seemed to finally relax a bit. \"I love you, baby brother. And I trust you. I'd be happier seeing her make love with you than with any other man I can think of.\"\n\nBut as much as my hormones wanted it, or Cherys wanted it, or Danielle wanted it, there was still one opinion that would be a complete deal-breaker. Amber had clearly shown an acceptance for me fucking other girls. Maria and E-Beth were the obvious examples, but this was a little different.\n\nAmber surprised me. \"Tomorrow,\" she said in a clear voice, looking at both Danielle and Cherys. \"There are too many emotions running around right now, and a girl giving up her virginity should be a special occasion. The mood is all wrong for tonight.\"\n\nCherys looked at the blonde and pouted, \"Aww... do I have to wait? It's not like I've got a hymen or anything.\"\n\nAmber got up, walked around the coffee table, and then knelt before us. She stroked Cherys' hair tenderly. \"You'll thank me tomorrow.\" Even though Cherys was two years older, you'd think Amber was the elder of the two for the moment. \n\nThen Amber stood and held her hand out to me. I immediately took it and began getting up with Amber's gentle tug. Cherys got off me and let me go, watching as Amber started pulling me away down the hallway.\n\nThe blonde turned back. \"David will pick you up tomorrow at 11 AM. Dress casually.\"\n\nAnd then Amber pulled me towards her bedroom. Tonight was her night, and she never let me forget it. I brought her to climax six times before she let me cum. And I only came the one time. She wanted me to save it for Cherys the next day.\n\nMy girlfriend would never cease to amaze me.\n\n***\n\n\"Morning, baby.\"\n\nMy eyes fluttered open and I immediately squinted against the morning light. Ready to start whining like a real baby, I instead twisted my body to stretch my back and shoulders and rolled over to look at Amber.\n\nShe was sitting upright in bed, her cute wire-rimmed glasses perched on her nose as she absentmindedly chewed on a ball-point pen while perusing her notepad.\n\n\"What are you doing?\" I grumbled.\n\n\"Planning.\"\n\n\"For what?\"\n\n\"For your date with Cherys.\"\n\n\"My what?\"\n\n\"You forget already?\" Amber rolled her eyes at me.\n\n\"No, no... I guess I just didn't think of it as a date.\" Still groggy, I managed to sit up in bed and smack my jaw a few times.\n\n\"You're going to hang out with her for a few hours, getting intimately comfortable with the express purpose of having sex by the end of the evening.\" She waggled the pen at me. \"How is that NOT a date?\"\n\n\"Well, when you put it that way.\" I rubbed my head. \"To be honest, I don't think I like the idea. I'm already dating you.\"\n\nAmber looked down at her notepad. \"It's not like you haven't slept with other girls.\"\n\n\"That's different. They weren't dates. They were just... sex.\"\n\nAmber looked up and stared right into my eyes. \"Cherys means more to you than that.\"\n\nI sighed, now fully awake. I nodded slowly. \"Yeah... How can you be okay with that?\" I still didn't understand.\n\nAmber shrugged. \"I- I don't know how to explain it. I don't think Cherys wants to become your girlfriend or anything, so there's no threat. She's just very confused about her sexuality right now and being with you would be something special and something safe for her right now. And, well, she's kind of like your big sister. I mean, she's not actually your sister, but well... yeah... you know?\"\n\nI stared off at some distant point. \"I know...\"\n\nWe sat there in silence for a moment. \"Are you sure you can go through with this?\" Amber asked me quietly.\n\nI kept staring. \"I'm not sure. It all just feels... weird, somehow. I mean, I have to admit I've been fantasizing about her since I was like twelve. But now we're so close. It's... weird.\"\n\nAmber turned her notepad to face me. \"Well, if you follow this plan, you've got nine hours to go from 'weird' to intimately comfortable.\"\n\n***\n\nWhy the hell was I feeling nervous? This wasn't an ordinary date. It's not like I didn't know the girl very well or was scared about meeting her parents. It wasn't like I even had some worries over whether or not I'd get lucky tonight. The mutual desires were pretty much known.\n\nThis was Cherys, a girl I'd known forever. She'd practically lived at my house with my sister during high school. And I roomed with her for 3 years of college. Up until a few months ago, I saw her almost every day.\n\nSo why was I shifting my weight from foot to foot like I had restless leg syndrome? And why were my hands clammy and dripping sweat? And why the hell was I still standing here without ringing the damn doorbell?\n\nI wiped my hands off on my jeans one last time, feeling the crinkle in my pocket where I'd stashed Amber's agenda. Then I reached up and hit the bell. I was already ten minutes late.\n\nThe door opened less than a minute later. \"Hi David!\" Cherys looked as stunning as ever, wearing a white cotton summer dress cut short enough to show off her long legs and also cut low enough to show off her ample bosom. Subtle patterns in green brought out that particular color in her eyes and the morning light illuminated her golden skin wonderfully.\n\nMy jaw dropped as I instantly imagined what she looked like naked through the thin fabric. \"Uh... hey, gorgeous...\" I managed to croak.\n\n\"I was beginning to worry you weren't going to show,\" she pouted prettily.\n\nI was instantly defensive. \"You know I'd never do that to you. Cherys, it's me.\" I realized just then how fast the words had come forth, without my nervous hesitance.\n\n\"You're right; it's you. And I couldn't be happier.\" She leaned forward and pecked my cheek, looping her arm around mine as she came forward and closed the door behind her.\n\nI felt my worries starting to melt away under the radiance of her smile. And then I escorted her to my car. I held the door for her like a true gentleman and then hustled around to the driver's seat.\n\nI was still buckling myself in when Cherys asked, \"So what's the plan? Are we just going to crawl into your bedroom and fuck?\"\n\nI grinned at her. \"Nope. Just relax and enjoy.\" I started the car and then we were off.\n\nCherys waited all of ten seconds before asking. \"So where ARE we going?\"\n\n\"It's a surprise. But before we get there, I really want you to know-\" I pulled up to a stoplight and then turned in my seat to face her. \"There's no pressure here. We do as much or as little as you want. Right now, you're my good friend and I just want to enjoy a nice Sunday with you.\"\n\nCherys leaned in, her eyelids dropping smokily and showing off dark eyeshadow and long lashes. \"But what if I don't want to be just a friend?\" she husked.\n\nFrom the way she was leaning, the neckline off her dress hung free and I had a clear view straight down to her cleavage, the upper slopes completely bare above her thin bra. My eyes flicked down and then I forced them back up to her eyes.\n\n\"You did say as much as I want, right?\" She giggled.\n\nI sighed and looked down at her cleavage again. \"I'd do anything for you, Cherys.\" I thought back to all that time with her as my dream girl. And then my gaze was lost in her eyes. \"I always would and I think I always will.\"\n\nShe smiled and leaned her head towards me, our lips inching together.\n\nI puckered and closed my eyes as I tilted my head towards hers.\n\n*HOOONNNNKKKK!!!!*\n\nI blinked and then glanced forward. The light was green and the car in front of me was long gone. The full-size pickup truck behind me wasn't too happy about it. I stepped on the gas and rolled forward.\n\nOkay, where was I?\n\n***\n\n\"David, this is so beautiful! How come I never heard of this place?\" Cherys tilted her glass and a bit more of the cool red wine spilled into her mouth.\n\nI swallowed the last bit of my sandwich and glanced out across the view. It wasn't the most spectacular scene on the planet, but it was quite pretty. We were perched on a grassy knoll that overlooked the river valley a few hundred yards below us, well-shaded by a large tree and surrounded by perennial flowers. I knew this place was even prettier in the springtime.\n\n\"I dunno. Nate told me about it when we were teenagers. To be honest, he used this spot to seduce many a cheerleader.\" I grinned and leaned my elbow back against the picnic blanket and set the rest of my sandwich back into the basket.\n\nCherys set down her wine glass and leaned onto her own elbow so we were parallel and staring at each other instead of the view. \"What about you? How many girls have you brought here?\"\n\n\"Just two,\" I answered without thinking.\n\nCherys looked like she was about to say something, then her eyebrows knotted for just a moment. I instantly knew something was wrong.\n\n\"What is it?\" I asked softly.\n\nShe looked down and frowned for a second before asking, \"Did you make love with Ellie here?\"\n\nI sighed but didn't break my gaze on her. \"Yes. That was a long time ago.\"\n\n\"What was it like?\"\n\n\"A gentleman does not speak of such things.\" I waved my hand, having accepted Ellie's death but not totally comfortable talking about her.\n\n\"Were you planning to seduce me here like you did her?\"\n\nIt was my turn to frown. \"I'm not trying to seduce you, Cherys. I told you, no pressure.\"\n\n\"No pressure on me. But I can put as much pressure on you as I want.\" The gorgeous brunette shifted a few inches closer to me on the blanket. \"I want to feel what that would be like.\"\n\nHer face tilted towards mine again and her lips pursed as she closed the gap between us. I closed my eyes myself and immediately I felt every other sense sharpen.\n\nI heard the whistling of the wind through the leaves and the chirping of birds above us. I smelled Cherys' musky-sweet scent that set my blood on fire. And then I tasted her lips as if they were the juiciest fruit imaginable.\n\nCherys moaned and then instinct took over as I pressed back against her with my lips, gently bearing her down to the blanket, pushing until she was flat on her back and circling her arms around my head.\n\nMy mind was whirling with the adrenaline rush. This was Cherys. This was freakin' CHERYS! And I was kissing her. There was nothing manic or out of control about the kiss, just passion and urgency as she clutched me tighter to her and our tongues danced with one another.\n\nWith a burst of energy, she pushed up against me and rolled us over until I was on my back. I felt my leg kick against the picnic basket, probably spilling things. But at this point, I really didn't care what happened to it. My universe had shrunk down to the gorgeous woman in my arms.\n\nCherys slipped her lips off of mine and began kissing her way down my cheek. I took the opportunity to fasten my lips to her neck and begin rubbing while she gasped, \"David! Oh, David!\" in my ear.\n\nSuddenly, the weight of her chest was flush against me as her arms fluttered around doing something else. Just when I snapped open my eyes to figure out what was going on, her mouth was on mine once again, Cherys moaning into our liplock as we went at it again with fresh vigor.\n\nMy hands were roaming along her legs, sliding beneath the hem of her sundress. For a few moments, they settled on her thong-covered ass, tracing the skin of her firm globes before gliding up her back. But when I felt the bare skin over her spine, my eyes whipped open again. My right hand was against her lower back and the left moved up to find that her shoulder was bare as well.\n\nI sat up in surprise, not expecting things to go this far just yet. At least, things weren't supposed to go this far in Amber's plan.\n\nWhen I got up, Cherys had rolled over onto her back and I could see now that somehow, she'd slipped the shoulder straps of her dress and unsnapped her bra, leaving her completely topless in my arms.\n\nI'd seen Cherys' tits before. They always gave me a thrill, but now, as I leaned over her, the glorious melons were just inches away in all their naked splendor. The blood rush in my head was enough to make me dizzy.\n\nHer eyes were brilliant and wide open, the color tingeing a deep violet in the light. She stared at me with an expectant expression. My left arm was half-trapped beneath her and my right was on her shoulder as I gaped down at the beautiful tits, my own eyes burning with undisguised lust.\n\n\"Are you going to fuck me now?\" she husked in a deep voice.\n\nI caught a note in that question, a slight bitterness that I wasn't expecting. I instinctively knew that she wasn't ready yet. So I looked into her eyes and said, \"No.\" And then I took the front of her dress and pulled it up to cover her breasts.\n\nShe certainly looked surprised. And it took a moment for her to get over her shock as I bent down and began to kiss her lips again. Her own mouth didn't move for the first few seconds, but then her hands circled around my head and she was returning the kiss with a new fever.\n\nI had thought she was passionate when she first kissed me. This time, she was absolutely ravenous. I could feel the heat radiating off of her skin as she mashed her body against mine, molding her curves around my own. And there was a keening gasp of triumph in her voice as she moaned happily into our embrace.",
        "She rolled us back over so that she was on top, and we didn't stop making out until our lips were sore.\n\n***\n\n\"I feel like a kid again!\" Cherys bubbled as she half-skipped along the trail. She was dragging me along with her since she had an iron-clad grip on my hand. \"I forgot how much fun it was to do this.\"\n\n\"Do what?\"\n\n\"Be on a date!\" She beamed at me. \"Feeling this giddy rush.\"\n\nI felt my own heart leap as I heard her giggle. The longer we went on, the more I realized that I wasn't falling in love with her or anything. The powerful affection I felt for Amber was always in the back of my mind. Still, I was truly enjoying this flirtation and playful sexual tension with a beautiful woman, even more so because she was Cherys. I was having a great time and I felt the same giddy rush she described, and I squeezed her hand in response.\n\nCherys turned and flashed me another of her perfect smiles. \"Nothing against your sister. But we've been together for so long that it just seems like there's no more mystery. I feel... happier than I've been in YEARS.\"\n\nShe suddenly stopped in the middle of the trail, a few flies buzzing around us in this close proximity to the river. \"Kiss me, David.\"\n\nI leaned into her arms and planted a wet one on her lips.\n\nWhen I pulled away, her eyes were still closed and she hummed, \"Mmm... That should keep me for another two minutes or so.\"\n\nWe came to a gentle bend in the river and Cherys pulled me through some bushes, being careful not to snag her dress on the branches. When we got through, we found ourselves on a semi-secluded clearing, nothing but grass between us and the water.\n\n\"I want to suck your cock, David.\"\n\nMy dick lurched before I got my head around that. \"What?\"\n\nHer hand was already on my crotch. \"I've never had a real dick in my mouth. I've practiced on Fred, but that's it and dildoes don't count.\"\n\n\"But Cherys! We're kinda out in the open!\" \n\nShe was already on her knees in the grass and fiddling with my zipper. \"There's no one around for miles. Besides, the only way anyone could see us is from the river.\"\n\n\"Cherys, I- \" That was all I got out before she put her mouth around me. \"Oh, shit,\" I groaned. I looked down and saw my angel's face before me. Her dark hair was sleek and shimmering in the sunlight. Her dress hung low so I could see the swells of her breasts pushing out the thin fabric. And more than anything, her bee-stung lips looked so succulent wrapped around my shaft.\n\nAt first, she just held the head inside her mouth, sucking lightly and tentatively swiping her tongue out. My current arousal was due more to 'who' was blowing me rather than any skill on her part. But when she began to bob her head back and forth, taking a few inches in at a time before backing away, there was no denying that wonderful sensation of a warm, wet mouth on your dick.\n\n\"Oh, Cherys...\" I sighed, cradling her head and stroking her cheek with the back of my hand while she continued to fellate me.\n\nShe pulled off and gasped. \"Show me. Show me how to please you. Tell me everything.\"\n\n\"You're doing great,\" I assured her. But her eyes flashed up at me and I knew she meant business. \"Okay, just keep the head in your mouth and use your hand to jack me off. I'm assuming you practiced that on Fred as well.\"\n\nShe was a quick study and soon her delicate hand had me reaching to maximum hardness. \"Oh... that's good, that's good. Now run your tongue along the underside.\"\n\nShe popped the crown out of her mouth, angling her head back and lowering her face until she was able to lick me from stem to stern. Automatically, her fingers came up and teased my balls. Either she was a fast learner or just willing to explore with her hands.\n\n\"Oooh. Don't squeeze those too hard,\" I cautioned, and then she had me back in her mouth.\n\n\"How much of me can you take inside?\" I asked.\n\nCherys didn't answer except to inhale me until I was pressing against her throat, a few inches of my cock still exposed. She gagged for a second and then popped off. She panted for a few seconds and then exhaled, \"I can do this.\"\n\nUnfortunately, she couldn't. No matter how she tried to relax, she couldn't suppress her gag reflex enough to hold me in her throat for any length of time.\n\n\"It's okay, baby,\" I soothed her after her latest attempt resulted in sputtering chokes.\n\nShe caught her breath and then flashed her eyes at me again. \"Let me at least get you off. I want to taste it. I want to swallow it. I want it all.\"\n\nShe went back to massaging the crown in her mouth with her tongue while her hand wrapped around the shaft and began jerking. By now, she'd been blowing me for over ten minutes and I could tell her jaw was getting sore from the unfamiliar workout.\n\nFortunately for both of us, I was at the brink of climax. She read my panting perfectly, and as my breathing sped up, so did her hand. At the final moment, she saw my thighs tense up and she moved my cock until just the tip was in her mouth. \n\n\"CHERYS!\" I bellowed, and then my hips were thrusting into her as I ejaculated shot after shot of hot cum straight into her mouth.\n\nShe was expecting this, but I don't think she really thought it could come that hard or that much. The first impact surprised her and then her mouth was already filling up to the limit before she managed to make her first swallow. Her lips formed a vacuum seal around my shaft and her hand was still squeezing as she coaxed out every drop of fluid I had in my body. And I had a lot. Amber had left quite the reserve for Cherys.\n\nAfter her third swallow, Cherys had to breathe, and the last dribbles of jism came out of me and smeared across her cheek. Her hand reflexively kept pumping while she lowered her head and began breathing heavily.\n\nMy legs were wobbly, and as soon as I was done, I managed to stuff myself back into my jeans and squat down until I was looking right at her. Cherys had settled her ass down onto her heels, still kneeling in the grass.\n\nShe managed to gasp, \"Is it always that much?\"\n\nI panted while trying to catch my own breath. \"No.\" I smiled. \"I think that one was special just for you.\"\n\nShe smiled right back at me. And then she was looking down as her focus turned inward. \"So that's a blowjob,\" she said contemplatively. \"Wasn't as bad as I thought. Kinda liked it actually.\"\n\n\"You can do it to me anytime you want,\" I wheezed as my eyes threatened to roll up into their sockets.\n\nShe looked right at me as if evaluating that very statement. But in the end, she wiped at her cheek and popped the finger into her mouth. \"Saltier than I thought it would be. But it doesn't taste BAD or anything.\"\n\nI reached over and brushed my thumb across her cheek to help clean up, wiping my own cum off on my shirt. Then she grabbed the hem of my shirt and dried off her face.\n\nWe sat on the grass together, hidden from the trail by the bushes as we looked across the calm water. Cherys reached out and held my hand again, blushing slightly. \"So, what's next?\"\n\n\"Let's head back to the car.\"\n\n***\n\nCherys flicked her eyes back to me one last time and then leaned over and planted a soft kiss on my lips. \"I'm afraid I won't ever get to kiss you again.\"\n\nI smiled. \"We're not done yet. And to be honest, I don't think I could ever stop you from kissing me.\"\n\nThe corners of her lips tugged upwards as she relished the thought. Then she popped my door and swung her legs out. \"Hurry back.\"\n\n\"You really want me to hurry? Then you won't have as much time to get ready.\"\n\nShe arched an eyebrow and tried to look innocent. \"Well, I could always just let you wait in the living room with my parents.\"\n\nI chuckled. \"I'll pick you up at six. That gives you almost two hours.\"\n\nShe checked her watch. \"Ooh, I'd better hurry.\" And with that Cherys turned and went up the walkway to her door.\n\nI watched her ass swaying in her summer dress. And once she went inside I shifted into gear and drove home.\n\n***\n\n\"You look happy.\"\n\nI stepped into my bedroom and saw both Danielle and Amber sitting on my bed together. Amber got the remote and turned off the TV while Danielle looked at me as if expecting an answer to her non-question.\n\nI suddenly felt very awkward. After all, I was on a date with HER girlfriend. \"Uh... yeah, it's going pretty well.\"\n\nAmber got up and walked over to me while I walked forward. My girlfriend pulled me into a hug and she paused just an inch from my neck, inhaling deeply. She touched her nose to my skin and then said, \"You smell like her.\"\n\nWith a pained expression, I reached my hand down to Amber's face and looked into her baby blue eyes. She took my hand in hers and pressed it more tightly to her cheek. \"I didn't mean it like that,\" she said soothingly. \"I told you, I'm not jealous. I was just making an observation.\"\n\nDanielle, on the other hand, wasn't quite so calm. \"Did you fuck her yet?\"\n\nI sighed and turned to face my sister, who was standing before me with her hands on her hips. \"No.\" I looked into her eyes, sensing that she wasn't as totally comfortable with this as she may have hoped. \"And I don't have to if you don't want me to.\"\n\n\"No, no,\" Danielle was instantly defensive, dropping her hands and pacing nervously. \"It's just... I didn't realize how this would make me feel.\" She threw her hands up in frustration.\n\nI corralled both girls and led them back to the bed, sitting in the middle and wrapping my arms around each of them. Once we got situated, I turned back to my sister. \"Dani, are you really okay with this? The last thing I want to do is hurt you.\"\n\nShe took my hand in hers and squeezed my forearm. \"Yeah. You need to do this. If it's not you, then she'll find somebody else. Better you than a stranger.\" She let out a long sigh and then turned her head away, too late to hide the moisture streaking down her cheeks.\n\n\"Dani, you okay?\" I asked and squeezed her shoulder.\n\nMy sister turned and leaned into me, resting her head against my chest and pulling a hand up to my opposite shoulder. She curled up by pulling her feet up under herself on the couch, and when I got my arm wrapped around her she seemed so small and delicate. \"I can't stop thinking about what this means. Like I'm not enough for her. That she needs more than I can give her.\"\n\nAmber chimed in and put her hand on Danielle's over my shoulder. \"Don't say that. You've given her everything you could and made her so happy. The only thing you're missing is a dick, and you're not likely to get one of those soon. Just let her do this and everything will work out.\"\n\nDanielle let out another long sigh and cried out a few more tears into my shirt. She pressed her face against my neck and trembled while letting out her pent-up emotions. When she seemed to calm, she exhaled and then looked up at me. \"You really do smell like her.\" And with that Danielle pushed her face back to my neck to inhale the scent of her sweetheart.\n\nAmber, meanwhile, went straight after what she wanted. \"Details,\" she ordered me. \"You're telling me EVERYTHING.\"\n\n***\n\nBy 5:45pm, I was just buttoning up my dress shirt and getting the belt through the loops on my slacks. I was going to have to hurry if I was going to make it on time.\n\nThe girls had completed quite the interrogation only thirty minutes before, just giving me enough time to shower and freshen up.\n\nOf course, me being a male didn't help the Q & A session. My memory wasn't close enough to verbatim for them, and I had to revisit several conversations and try to dig up more specifics to satisfy my inquisitors.\n\nAmber was happy to know the picnic and walk went well. Danielle sighed at the romantic location. And both girls were squirming in their seats when I recapped Cherys' first blowjob. Amber was squirming and barely suppressing her giggles. On the other hand, Danielle was squirming and a little flushed in the face, but she didn't seem comfortable with her own arousal.\n\nAt the last, I was ready to go. Danielle had already returned to her own room. Amber stepped up behind me and was straightening out my shirt and running her hands down my arms. \"I'll see you at my house,\" she said into my ear.\n\nI tensed up as thoughts of the plan ran through my head. \"I'm not sure I can do this,\" I whispered.\n\n\"Of course you can. It's not like you haven't had sex with other women before.\"\n\n\"That was different. They were just about sex. Maria, Nataliya, even E-Beth. They were about physical pleasure without emotion. Lust and nothing else.\" I sighed and looked at myself in the mirror. \"I can't do it with Cherys and not feel something more.\"\n\nI turned in place and held Amber to my arms and kissed her forehead. When I pulled back and held her tight to me and bent my head over her shoulder, stroking her back. \"I can't go through with it. With Cherys, it wouldn't be anything less than making love. She just means too much to me. And I can't do that to you. My conscience couldn't live with it.\"\n\nAmber pushed me back until she could look straight into my eyes. The blue burned with an inner fire and she shook me for a second. \"You HAVE to. For her sake if nothing else.\"\n\nI looked at my girlfriend as if she'd sprouted horns. \"I feel too close emotionally to another woman and you're ordering me to go and make passionate love to her?\"\n\n\"Cherys is very fragile right now,\" Amber cautioned. \"If you don't, someone else will. Someone who might not treat her right. And if she screws the first guy who'll let her, she could end up in a VERY bad situation. Can your conscience live with THAT?\"\n\n\"But... Amber... faced with a choice between her and you, I choose you.\"\n\nAmber teared up just then and leaned into me, planting her lips on mine in a kiss of passion that rivaled anything I had ever felt in my life. This day had been truly amazing when it came to kisses.\n\nWhen she broke for air, she gazed right back into my eyes and squeezed my arms tightly. \"I love you, David, remember? I'm 'in love' with you.\" Her eyes fluttered and her voice choked up as she said those words. \"Nothing will change that. You're the first man I ever fell in love with, and you can't take that away from me. Not even if you make love with Cherys tonight.\"\n\nI stared at her in wonder.\n\nAmber continued haltingly, her wide smile incongruous with the tears rolling down her left cheek. \"I already know what's going to happen tonight,\" she said brightly, then paused to compose herself. \"Cherys is my friend, too, and I already know how you both are. Yes, there's a love between you. But it's not the kind of love that's between you and me. It's not even the kind of love between you and Danielle. And that's why it's not a threat. You can love me and love Danielle at the same time. Do you see a conflict there?\"\n\nI shook my head.\n\n\"And I don't see a conflict between you and Cherys. You need to do this for her. But in the morning, she won't be trying to steal you for a boyfriend or anything. Your relationship is already set. She trusts you, and she loves you, but she's not in love with you. Okay?\"\n\n\"Okay...\" I answered, perhaps a lie because I still didn't completely understand.\n\nAmber kissed me again. \"Go to her. Make her happy. Show her everything that a man can be. Then tomorrow morning, come back to me and I'll show you what being 'in love' is all about.\"\n\n***\n\nI didn't quite get out of the house unscathed. My parents saw me trying to blow out the door wearing slacks and carrying a bouquet of flowers, so my mom called me over.\n\n\"You got a date tonight or something?\"\n\n\"Uh, something like that.\"\n\nMy mom looked at me with a very perplexed expression on her face. \"Isn't Amber upstairs?\"\n\nMy ears turned red and I wasn't quite sure how to answer this one. \"Uh, yeah.\"\n\nMy big sister came to the rescue. Turned out she was in the living room and she poked her head out. \"He's taking Cherys out tonight.\"\n\nMy dad nodded as if taking out a gorgeous woman was a perfectly acceptable way to spend a Sunday evening, never mind she was my sister's girlfriend and my ex-girlfriend's sister. I wasn't sure how, but somehow my mom managed to look even more confused. \n\nDanielle grinned. \"Don't think too hard about it mom. It's just Cherys' first real date with a boy since high school. Let 'em go have some fun.\"\n\nMy mom looked at me for confirmation.\n\n\"Yeah,\" I nodded. \"Oh, and I'm spending the night at Amber's. I'll see you both tomorrow.\"\n\nBy the time I got to Cherys' house, it was already 6:15pm. Her dad was the one to open the door. \"David! What a pleasure to see you. Come in, come in. Cherys is already waiting.\"\n\nI forced a smile onto my face and walked in. \"So I guess she already told you why I'm here?\"\n\n\"Her first adult date. Well, with a man anyways. I was beginning to think I would never get the chance to grill some poor boy about her.\"\n\n\"But you already grilled me when I first started taking out Ellie.\"\n\n\"True, true. But it's so much fun, isn't it?\"\n\nI wasn't quite so sure. But luckily, Cherys chose that moment to come down the stairs. \"Do you ever show up on time? It's a wonder you can hang onto a girlfriend at all.\"\n\n\"Guess it's a good thing I don't need to worry about impressing you,\" I replied with a wry grin. And then she stepped into the light and my breath caught.\n\nCherys' father said it all when he sputtered and said, \"Get back up there and put on more clothes young lady!\"\n\nI blushed and tried to tear my eyes away from Cherys' chest. She just rolled her eyes and pulled up her shawl around her shoulders and over her chest. With a challenging frown and raised eyebrows, she non-verbally said 'good enough?'\n\nHer father huffed a bit, but he let it slide.\n\n\"It's just a date, Daddy,\" Cherys offered. \"David's got a girlfriend. I've got a girlfriend. Alright?\"\n\n\"Well then why do you have to dress as if you're daring someone to picture you naked?\" He scolded.\n\nCherys smiled sweetly. \"Why, are you trying to picture me naked, Daddy?\"\n\nThe poor man turned beet red and excused himself out of the room.\n\n\"You are such a tease,\" I muttered under my breath.\n\n\"Well, I had to get him away somehow. Otherwise he'd eventually figure out that I'm trying to seduce you.\"\n\n\"You already have,\" I replied with complete sincerity.\n\n\"Good to know. Ooh, are the flowers for me?\"\n\n***\n\n\"David, this is too much...\" Cherys whispered as she looked out the window. A moment later, a man in a red jacket opened her door and held out a white glove for her to grasp.\n\nSmiling to herself with a trace of nerves, she took the hand and slid out. I left the keys in the ignition and let myself out of the driver's side. I wasn't overly proud of my car. It was more than a decade old and had quite a few miles on it. But when you're arriving with a woman as gorgeous as Cherys, well, no one was even LOOKING at my car.\n\nCherys stood and turned to face me as I came around. I tried to look at her the way the other ten people around were looking at her. Slender without being skinny. Curvy without being voluptuous. Black hair so sleek and shimmering in the overhead lights. Dangling earrings, shiny necklace, and a touch of makeup on a face that would make Aphrodite jealous.\n\nYeah, I felt my ego puffing up as I stepped forward and Cherys looped her hand through mine. I saw the glow of her eyes as she drank in the pretty surroundings. She'd been pestering me for the last half an hour trying to figure out where we were driving to. And I knew this meal would put a sizeable dent into my wallet. The look on Cherys' face was worth every minute and every penny.\n\nThree minutes later we were at a window table, perched high above the city on the ridgeline. The expansive vista took MY breath away, and I was expecting it.\n\nCherys reached across the table and held my hand while the waiter poured two glasses of wine. Even before the waiter left, Cherys leaned in and whispered, \"You are SO getting lucky tonight.\"",
        "***\n\n\"Wow, that was incredible,\" Cherys finally broke the silence as the last rays of sunlight dipped out of sight. We'd spent the last fifteen minutes or so just watching the sunset from our high perch, enjoying the swirl of colors on the horizon before all faded to grey.\n\nI let my eyes get used to the new view of the city, all lit up and without any daylight to illuminate it. Once I felt the moment pass, I squeezed her hand.\n\nCherys turned to me. \"I've never been on a date even close to this. The whole day has been amazing and just this morning seems like it was ages ago. I never even knew you'd be capable of planning this.\"\n\n\"Well, to be fair, I had a lot of help on the planning thing. And really, this is what happens when we grow up. When I was a teenager, all I thought about was sex and maybe a little football. Dating was going to McDonald's after the game.\"\n\n\"I'm glad we grew up,\" she squeezed my hand. \"This night has been so wonderful.\"\n\n\"It's not over yet,\" I squeezed back. Still holding onto her, I slid myself out of the chair. And then I lifted her hand palm down and bent over as if to kiss it. Instead, I looked right into the eyes of my date and said, \"Shall we dance?\"\n\n***\n\n\"Oh, my, gawd...\" Cherys sighed. \"I think I just had an orgasm,\" she panted into my ear quietly.\n\nNot quietly enough. A middle-aged lady not three feet away from us stumbled in her dance partner's grasp and her eyes went wide.\n\nThe heavy thumping of my heartbeat, drowning my hearing only moments ago, was slowing down and silencing enough so that I realized the current song was over. The rest of the outside world began to fade into focus around me as I realized that I had a gorgeous brunette draped over my body in a manner not quite appropriate for public company.\n\nMy lips actually felt bruised after their recent abuse. Cherys was panting into my ear, still grinding her crotch over my leg with the hem of her dress hiked up perhaps a little too high so she could straddle my thigh.\n\nGently, I pried her off of me and stood her up just as the next song began to play.\n\nHer gaze was liquid and flecked with a golden sparkle as she looked right into my eyes. \"Enough dancing. Take me to bed.\"\n\nI nodded and then we were walking away. If the valet could get my car in less than a minute I was freakin' going to tip him twenty bucks.\n\n***\n\nWe were still several minutes away from Amber's house and Cherys had been squirming in her seat for the past fifteen. Somehow, I didn't doubt that there would be a wet spot on the seat when she got out.\n\n\"Yes, it hurt.\"\n\nI turned my head in confusion. \"What?\"\n\nCherys beamed at me and giggled. \"It hurt when I fell out of the heavens.\"\n\nI looked at Cherys as if she'd just spoken Swahili. \"Huh?\"\n\n\"I'll bet this dress will look even better in a puddle on the floor.\"\n\nWell that was a pleasant vision. But I was still confused.\n\n\"Here's a quarter,\" she held out her hand pinching empty air. \"Go call your mom and tell her you met the woman you're going to marry.\"\n\n\"Cherys, what are you talking about?\"\n\nShe laughed, that manic expression coming back into her eyes and I was beginning to get a little worried. She must have caught the expression on my face because she visibly tried to calm herself.\n\n\"Sorry, it's just that I've heard so many bad pickup lines from guys trying to get into my pants. I was just remembering some of the really clich\u00e9 ones.\"\n\nShe was still trembling with sexual energy and I got the idea that if she didn't calm down a bit, she would slip back into her mania. Some people can only be kept on edge for so long.\n\n\"Well,\" I began as I let my right hand drift down her thigh. \"It's a good thing for me you're not wearing any pants.\" And with that, I slipped my hand beneath the hem of her dress and brought my fingers up to her crotch.\n\nCherys gasped and instantly spread her legs to give me better access. A moment later, my index and middle fingers slid past the strap of her thong panties and into her soaked pussy. \"Oh, gawd...\" she groaned.\n\nI was inside just long enough to get my fingers wet, and then I pulled back enough so that I could rub against her clit.\n\nCherys jerked so hard it was a good thing she was belted in. And then her torso hung forward like a dead weight, tensing the seatbelt which was now holding her up. She quivered and spasmed and panted without restraint as my fingers worked their way back and forth, circling around her nub gently while I tried to split my focus between the road and her.\n\nBarely two minutes passed before Cherys moaned, \"Oh, David!\" She jerked hard against the seatbelt, her body going rigid, and she gasped until her mouth was open but no sound was coming out. I could actually feel the deluge coming out onto my hand.\n\nA minute later, she sagged back against the seat, momentarily calmed by her orgasm. I went to pull my hand away, but Cherys grabbed my wrist and then brought my soaked hand up to her face.\n\nI couldn't resist looking over as she parted her lips and sucked my two fingers into her mouth. I was happy to see that while she was still quite aroused, there was no trace of the manic intensity in her eyes.\n\nAnd then we had arrived.\n\n***\n\nAmber opened the door for us. She had reasoned that if the mere sight of her somehow made us not want to go through with this, then we probably shouldn't.\n\nBut Cherys just walked up and hugged my girlfriend. \"Thank you, Amber. For everything.\"\n\nAmber hugged her back and then pointed down the hallway. I stopped and kissed her on the lips, then took Cherys' hand and led the way.\n\nI opened one of the guest bedrooms, and realized that Amber had outdone herself. Cherys gasped the moment she saw it as well.\n\nWaiting for us was a four-poster bed with wispy, translucent white drapery. Several candles were scattered about and a red carpet of rose petals led the way. Cherys wasn't about to waste any more time, and I had no more verbal objections left.\n\nCherys led me inside and then planted my butt on the bed. She stepped back then, letting me have a clear view of her entire body as she twisted her torso and presented me with her best profile.\n\nSo elegant, so gorgeous. With her hair back and shimmering and that seductive smile on her face, I was enraptured. Her eyes were dancing and-- \n\nOops. Her dress fell to the floor. I had no more time to wax poetic. Good fucking lord those tits were HUGE. And when Cherys unclasped the strapless bra, the damn things only seemed even bigger.\n\nI'd seen these melons before on several occasions. But somehow, some way, they looked even rounder and fuller than I remembered. Maybe it was because I knew I was about to get my hands on them. Before my very eyes, the nipples hardened and pointed out at me like twin eraser nubs.\n\nThe next time I blinked, Cherys had managed to get fully and completely naked. Her pussy was freshly shaven and promised to be oh, so, silky smooth. Her ass was still tight and firm. Ah, the freshness of youth now fully balanced with adult womanhood.\n\n\"David...\" she said coyly in a quiet voice. \"You're wearing way too many clothes.\"\n\nI gulped. \"Couldn't help it. I didn't want to waste a single second of watching you undress.\"\n\n\"Well, let me help you,\" she stalked forward and put her hands to my collar. But rather than unbutton me, she jerked my head forward and then planted her lips on mine.\n\nI actually moaned into the kiss and then she was unbuttoning my shirt without breaking our liplock. Once it was undone she tugged me out of the sleeves and then lifted her head away so she could whip my undershirt over my head. I was trembling by the time she got to my pants.\n\nI'd been waiting for nearly a decade to do this with her. Cherys was my ultimate fantasy, pure physical perfection. You'd think another few minutes of waiting wouldn't matter. Not so. Suddenly I was the manic one, ripping my shoes and socks off. I physically seized Cherys around her hips and back and then turned and planted her across the bed.\n\nMy eyes were wild as I clambered atop her body and hooked my feet inside hers to spread her legs to the side. I settled my crotch over hers, the angry hard rod of my cock nudging its way over her wet pussy. I growled with an inner instinct, the lust-powered drive to conquer a beautiful female and inject her with my sperm.\n\nCherys seemed to let me manhandle her, her body going limp beneath me and acquiescent as she resigned herself to letting me take her. And then I saw the look that made me stop almost instantly.\n\nHer head had lolled to the side and a tear dribbled out from one corner of her eye. And instantly I felt the rage dissipate. With one hand, I turned Cherys' face to me and with the other I stroked her hair along her scalp.\n\nShe looked into my eyes and I saw a ray of hope in them. And with infinite calmness, I leaned down and gently rubbed my lips over hers. She gasped into my kiss, and then she pulled me down firmly, but not frantically, and we melted into each other's embrace.\n\nWhen we ran out of air, I pulled back to breath and then began kissing my way across her chin, down her neck, and along her shoulder. Perhaps a little faster than I usually would, I got down to her cleavage and then like a child discovering a fabulous new toy, I got my hands around her tits and began to suckle around them with sincere delight.\n\nEven flat on her back, the mounds barely sagged to the sides and her hot flesh felt so firm in my grasp. I felt an electric thrill pass through me when Cherys moaned in pleasure, even though I was probably manhandling her breasts rather roughly. I was in heaven.\n\nCherys laughed at the lavish attention I was paying to her tits, and she let me spend a good few minutes just worshipping them in all their glory.\n\nBut when I made a move to go lower, she caught my head and pulled me back to her. \"But I want to lick you,\" I complained.\n\n\"Been there, done that.\" Her hands came up around my face and my pouting expression. \"Later, I promise. But I want to feel your cock inside me.\"\n\nI smiled and then rolled over onto my back, getting my head into a comfortable position on a pillow. I made a conscious decision that if we were truly going to have sex, Cherys had to be the one to take me inside her. I couldn't be the one to 'take' her virginity. \"Come and get it baby. If you want it, it's all yours tonight.\"\n\nShe smiled and then moved to settle her hips over me. I couldn't decide where to look first: her beautiful face and perfect cheekbones, her swaying tits now looking even bigger with her leaning forward, or the glistening wetness of her bare pussy and the pink inner lips being spread apart by her own hands as Cherys got herself into position.\n\nIn the end, I worked my way from the top down and then we both watched our crotches come together, and Cherys sat herself down onto me. We watched the mushroom head wedge open her personal gateway to heaven. We listened to her gasp as the crown passed through. And we both moaned as the shaft gradually disappeared until I was fully buried and our bodies were fully merged as one.\n\nThis was it. I was inside Cherys.\n\nShe leaned down and kissed me, and I wrapped my arms around her back, stroking her tenderly as she simply got used to the filling sensation. And when she lay her head on my shoulder and hugged me back, she sighed, \"It's so warm... and so hard...\"\n\nOnce she got control of her breathing, Cherys sat back up. I was once again treated to the wonderful view of her full naked body from top to bottom. She put her hands on the back of her head and arched her back, thrusting her tits in my direction while she stretched and then began to rotate her hips counterclockwise.\n\n\"Oh, fuck... this is sooo much better than Fred.\" Cherys' voice was coming in whimpers as she continued moving. I simply lay there and enjoyed the feeling and emotional high of being with her.\n\n\"Oh, gawd. David, FUCK me,\" she gasped, planting her hands on my chest and flexing her legs to start raising herself up and dropping down in steady rhythm.\n\nI did my best to comply, getting my hands onto her hips and using them as leverage to thrust my hips up and into her with every stroke. Gradually, we both sped up and increased the strength of each lunge until we were flinging our bodies at one another and I was yanking her body down around my shaft.\n\nCherys tossed her head back and lolled side to side, whimpering constantly and squeezing her eyes shut to focus on the sensations crawling up her spine. \"I can't believe I'm actually fucking you,\" she gasped.\n\n\"Me neither,\" I said with relish, and then put my energy back into fucking her. Still in rapturous wonder, I reached my hands up to her tits, palming her nipples and then pinching slightly with my finger tips as if I could guide her thrusting by her breasts.\n\nI had to taste them again, so I sat up and took the nearest one in between my lips. This set a fresh burst of whimpers from Cherys' end as she stopped pumping and went back to rotating her hips around my pole as if she was in the middle of a Latin dance.\n\n\"Bite them. Bite my nipples,\" she begged.\n\nI was only too happy to oblige. And at the moment my teeth grazed her nipple, she went off.\n\n\"YESSSSSS!\" Cherys cried happily as she felt the climax coursing through her. This was no silent orgasm, she yelled loud enough to alert the neighbors.\n\nI simply tried to hold on for the ride as Cherys' torso quivered and thrashed around. Her boob became dislodged from my mouth, but she clutched my head and crammed my face into her cleavage, suffocating me. My left hand was wrapped around her back and my right was palming her ass, and she was shaking so hard I was worried she would crack my back.\n\nIn the end, her body went limp and she toppled off me flat onto her back, panting heavily with her eyes closed.\n\nI was quickly kneeling over her with a concerned look. \"You okay?\"\n\nMy fears were allayed when she cracked a smile, even though her eyes were closed. \"My first cum with a man,\" she said brightly. Then her eyes opened and she flashed her sparkling irises. Her arms went up. \"Come back inside me. It's time for you to cum.\"\n\nSmirking, I got myself into a missionary position and settled myself down, enjoying the exquisite sensations of my cock sliding deep into her.\n\nCherys was happy with my return, humming happily. And then we were moving together. Ex-lesbian or not, Cherys' sexual motions were instinctive and natural. She bucked her hips back at me and rolled her body with our motions. She stretched her arms behind her and stretched languorously as we moved in rhythm. My lips were everywhere: her forehead, her nose, her lips, her cheeks, her neck, her chest, and especially her breasts.\n\nDamn I was getting close. Cherys picked up the urgency in my thrusting and she grasped my shoulders and looked right into my eyes. \"Cum for me, David,\" she cooed into my ear.\n\nA thought came to me. \"Are you protected?\" I gasped in desperation.\n\n\"Cum for me,\" she repeated in that husky voice.\n\nAnd then I was at my limit. Pinching my eyebrows together in pain and with a heave that violated every instinct I had, at the last second I pulled out. Instantly, my hand was around my cock, pumping furiously as I leaned up and over Cherys' body.\n\nEverything next kind of happened in slow motion. I actually watched the first jet fly out of me, arcing through the air in a perfect streamer of creamy white, like an overcooked noodle or something. And then I saw it fall in a line across Cherys' golden skin, starting high on her chest and then tracing back towards me, running over her right breast just inside the nipple and then finishing in a broken line as it fell off the cliff of her tit and continued for an inch beneath.\n\nThe second shot only made it across her belly. And then the rest I was jacking out the general vicinity of her bellybutton.\n\nAnd all that was left in the air was the sound of us both panting. We'd done it. I'd had sex with my fantasy girl. I'd been the first man inside of her. And as I sunk to the bed beside her, my lips immediately sought out hers and we came together for a new kiss.\n\nWhen we both caught our breath, Cherys looked straight into my eyes. \"Thank you.\"\n\nMy head was still spinning. \"After a cum like that, I should be thanking YOU.\"\n\n\"I mean it. Thank you, for everything.\" She turned to face me, adoration in her eyes and my cum still drying on her naked body. \"Thank you for being my friend. Thank you for cuddling with me when I wanted to feel warm and protected. Thank you for not having sex with me at the barbecue. It wouldn't have been right. And thank you so much for this day... and night, you've given me. I couldn't have imagined anything better.\"\n\nI smiled and touched my hand to her face. \"It was truly my pleasure.\"\n\nShe leaned in and kissed me again. This time, the adoration in her eyes had been replaced by naked lust. \"So... how soon can we do it again?\"\n\nI barked a laugh. \"You should've tried to do this to me in High School. I was a lot faster then.\"\n\n\"Yeah, well Ellie got the speed machine. I'm happy I got the experienced Casanova.\"\n\n\"Tell you what. Let's get in the shower and get you cleaned off. By the time we're done, I'm sure we'll both be ready to play some more.\"\n\n***\n\nCherys didn't quite wait until we were done with the shower. She had really enjoyed soaping up my cock and when she was done rinsing me off, she knelt right there in the shower to check how clean I was... with her mouth.\n\nA few minutes later, I couldn't wait any longer so I hurriedly toweled us off and dragged her back into the bedroom.\n\nCherys beat me to the bed, clambering onto all fours with her ass sticking back at me from the edge of the bed. \"Fuck me doggy style,\" she ordered. \"I always got off so well when Danielle wore a strap-on and did me this way.\"\n\nFor some reason, the thought of my big sister fucking Cherys with a strap-on was only a turn-on. I felt no moral hiccup over thinking of my sister that way. So with eager anticipation, I stepped behind her and shoved my cock in to the hilt.\n\n\"Oh, yeah... Oh, yeah...\" Cherys was chanting as I happily plugged away. Having already cum once I knew I would be good for a long while. At least until Cherys' next words came out.\n\n\"I want you to fuck me in the ass.\"\n\nI stopped thrusting and my eyes flew open.\n\n\"Do you have any idea how many times Danielle shoved Fred up my ass while I was fantasizing about you?\" She giggled. \"Or how many times I shoved Fred up her ass and whispered naughty thoughts about you?\"\n\nOh, hell. Now was an iron bar, a fact that Cherys did not fail to notice. She wriggled her butt at me and clamped down with all her inner muscles around my shaft, and for a second I thought I was going to blow in her right then and there.\n\n\"C'mon, David. You promised we'd do as much as I wanted.\"\n\n\"Uh, let me see if I can find something to use as lube.\"\n\n\"Fuck it,\" Cherys spat. \"Just spread my cheeks and shove it in.\"\n\nAs ready as I was to do just that, experience told me otherwise. I dipped my hand around her hips and brought it up to her pussy. My fingerpads lightly glided across her clit, sending a shiver down Cherys' body and causing her to squirm enticingly.\n\nAs I pulled my cock out of her, I replaced it with my fingers, scooping inside to coat myself as much as possible. And then with a steady touch, I pressed my index finger to her rear hole.\n\n\"Ahhh...\" Cherys sighed as the digit made its way inside. I wiggled around for a moment and then brought up the second finger. Already she was widening up for me. Clearly, this girl was used to shoving things into her ass.\n\nI left both fingers in her ass while I reintroduced my cock to Cherys' pussy, causing a fresh gasp at my intrusion. \"Yeah, coat that fucker. Can you feel how wet I am for you? I'm dumping out so much honey your dick is going to slide right into my ass. Go on, do it! Fuck my ass! Fuck it!\"",
        "As the lady wished. I backed out and then placed the head of my cock at her anus. Cherys just leaned over, bracing a shoulder against the bed so she could reach back with both hands and spread her own asscheeks for me. How much more of an invitation did I need?\n\nI gripped her thighs and once I felt settled, I started pushing forward. With surprising ease, I popped through and then began the slow descent into Cherys' bowels.\n\nShe let out a loud groan and kept moaning until I was fully embedded in her asshole. \"Fuuuuuuck...\" she sighed. \"So fucking full...\"\n\nAt last, Cherys let go of her buttcheeks and managed to prop herself back on all fours. She craned her head around to me, her silky dark hair hanging off to the far side and her mouth gaping open in a sensuous pant. \"Now start pumping.\"\n\nSo I began.\n\n\"Ungh, ungh, UUUNGH\" she was moaning with every thrust. Her ass was a fiery furnace, and she had exquisite muscle control back there. Her inner membrane powerfully collapsed around me, squeezing tight with every pull out, trying to get more friction or lock me inside of her. And then she rippled and relaxed as I glided forth once again.\n\n\"Fuck my ass, David. Fuck my ass...\" she chanted. \"Oh, shit. David's actually fucking my ass!\" She started giggling, and then on my next thrust in her giggles jumped in pitch and she squealed as a new orgasm overtook her.\n\n\"FUCK!\" she cried and came, her muscles now clamping down on me so hard I couldn't move. And when it was done, her limbs turned to jello and she collapsed face down onto the bed.\n\nMy torso went down with her, and when we fell to the bed I felt myself lodge an extra half-inch deeper with the compression of her asscheeks.\n\n\"Cum in my ass... Please David,\" she whimpered. \"Come for me, David. Cum in my ass.\"\n\nShe was helpless beneath me as I got back to my knees and started pumping away.\n\n\"Harder,\" she urged. \"HARDER! Rape my ass, David! Please! Ream me out!\"\n\nThat was about all I could take. With my hands on her shoulders, I used them as handholds to literally launch myself into her asshole, plunging as deep and as hard as I had ever fucked in my life. We were beyond lovemaking now. As energetic as I'd pistoned in and out of her pussy, it didn't compare to the raw force I was throwing into my hips now.\n\n\"HARDER! FUCK MY ASS! SPLIT ME WIDE OPEN FOR YOUR COCK! HARDER!\"\n\nI slammed all my weight down, piledriving my cock through Cherys' shitter over and again. I lunged forward and flung myself back, blasting away at Cherys' asshole with every ounce of power I could muster. I was reaming her body for my pleasure.\n\nOnce before, by the river, I had restrained myself from attacking her. Then again, when we first came into this room, I had to hold myself back from just taking her, instead slowing things down to take my time and warm her up. All that restraint was gone now. There was nothing left but my animal instinct to unload.\n\nAnd unload I did. I bellowed an inhuman roar that would have made King Kong proud. All my pent-up desire for Cherys, all the purely physical lust I had for her body was being released. Years worth of longing was suddenly pouring itself out of my loins and deep into her rectum. Years worth of cum was spunking out of me, almost vertically straight down, filling up her bowels with gallons of creamy man-juice.\n\nCherys would be shitting cum for a week by the time I finished.\n\nWhen I was done, I collapsed heavily onto her sweaty back, my cock still embedded in her asshole while my arms reached around to cradle her. I leaned over and kissed her cheek. \"Good lord, Cherys. You are absolutely incredible!\" I groaned. \n\nCherys turned her head to me and smiled. \"You lost it. I finally made you lose it.\"\n\nI couldn't disagree. Besides, I was gasping for oxygen.\n\n\"And I wasn't even scared. Thank you again, David.\"\n\n\"Thank me for what?\"\n\n\"For being you.\"\n\nI didn't understand. But like most men, my brain was mush post-orgasm. I sighed and then I rolled off to the wrong side.\n\nCherys lay flat, her head turned to the side away from me. Only when my breathing returned to normal did she flip her head around to face me, absolutely beaming. \"I think we need another shower.\"\n\n***\n\nNEXT: CHAPTER 8 "
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "threesome",
        "mff",
        "strap-on",
        "anal",
        "orgy"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-book-of-david-ch-07"
}
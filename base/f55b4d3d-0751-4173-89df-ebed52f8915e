{
    "title": "On the Side Ch. 03",
    "pages": [
        "\"The point of having a honey on the side is they're disposable. They get fat? Ditch 'em and find another. They demand you get a divorce? Ditch 'em and find another. They want a baby, for chrissake? Ditch 'em and find another!\"\n\nDave was slurring, but so was I -- too many drinks after I had dragged him to the bar after work. We never went on Mondays, but it had been a stressful weekend, followed by a workday of one problem after another. I needed to unwind before facing Amy and Kate again.\n\n\"Gee, Dave, I just knew you'd understand and totally not be a pig about it. Thanks a lot.\"\n\nDowning my whiskey, I scanned the vast array of bottles behind the bar and caught my sour expression in the mirror.\n\n\"Why am I even telling you this?\" I said. \"You'll blab it all over town.\"\n\nDave signaled for another round. \"Look, I dunno how everyone found out about Kate's sex drive -- or lack of it -- but it was not me. I may be a dick, but I do not blab on my best friend.\"\n\nI eyeballed him. Yeah, he probably didn't. Dave and I had kept each other's secrets over the years. If nothing else, the dirt I had on him alone would've kept his mouth shut.\n\n\"Anyway,\" said Dave, \"Why not just do it? You and Kate were so baby crazy when you first got married. I swear I spent three hours in here listening to you argue with yourself over names. This is a second chance for you.\"\n\nI threw my hands up. \"Am I the only sane person left on this planet? Amy needs to be out there, hanging out with friends, finding a guy of her own. She graduates her program at the college in December. She should concentrate on growing her jewelry business, finding her own path, building a life for herself. Not ruining it by becoming some old fart's concubine.\"\n\nDave took a mouthful of beer and swirled it in his cheeks before swallowing.\n\n\"So why does she?\" he said.\n\nI exhaled. \"Oh, she gives all kinds of reasons: she loves kids, doesn't want to wait, it's the perfect time and it'll be easy with Kate and me helping.\"\n\n\"Sounds reasonable.\"\n\n\"The fuck it is! You know how her childhood was. She's insecure. Worried we'll kick her out someday. Kate told her how hard we tried to have kids, so now Amy thinks having one for us will cement things. That, and she'd do anything to make us happy. Anything.\"\n\nThe bartender swapped my empty glass for a full one. I took a long sip of the single malt, reveling in the burn as it went down, hoping it would relieve my turmoil for a short while.\n\n\"Amy shouldn't be an unwed mother at twenty,\" I said. \"It's wrong. It's immoral.\"\n\nDave let out a wet, beery belch.\n\n\"Y'know,\" he said, \"I remember a time when you never did all this tight-assed pearl-clutching. When you lived life and fucked anything that moved. And weren't too careful about protection, either.\"\n\n\"I was an out-of-control, self-centered asshole.\"\n\n\"And now you're an uptight, navel-gazing asshole. Sounds like Amy's got her head on straight. Not everyone with a bad childhood winds up psycho, you know. I mean, look at me.\"\n\nTrue enough. Dave's family was a nightmare. Once you got past his gross manners and neanderthal attitude about women, he was a level-headed guy.\n\nHe said, \"You agonize like this when you're getting groceries, don't you? Pick up a box of cereal then spend twenty minutes scrutinizing the label, figuring out if it's organic, ethically sourced and has the right amount of fiber?\"\n\nHe mimed running a finger down the side of a cereal box.\n\n\"Don't you ever just grab the Chocolate Frosted Sugar Bombs because that's what you fucking want?\"\n\nI snorted. \"Your analogies suck, Dave. In college, both of us 'grabbed the Sugar Bombs' all the time. How many women did we hurt? How many times was I nearly kicked out? I'm not going back to that. Besides, Amy isn'ta box of cereal. She's... she's...\" My hands flailed as I searched for words grand enough to encompass everything my Amy was.\n\nDave leaned forward, studying me closely.\n\n\"Oh, my god. You're in love with her.\"\n\nHe slumped back in his bar stool and shook his head.\n\n\"Fuuuuck,\" he said. \"That's rule number one. Never, ever fall in love with your mistress! How can you not know that? You're gonna get divorced if Kate ever finds out.\"\n\nI waved a dismissive hand. \"She knew way before I did, Dave. And she's okay. She keeps telling me about polyamorous cultures around the world, and how loving Amy doesn't make me love her any less. Kate is...\" Again, I couldn't find words to express the magnificence of Kate.\n\n\"Well,\" said Dave. \"If that's really the case, get yourself a few more girlfriends. You could have a whole harem to fuck. One for every day of the week.\"\n\n\"Sensitive as always, Dave.\"\n\nHe grinned. \"I try. Anyway, get real. How much longer do you think you can last? You're refusing to fuck your mistress until she gets back on birth control. And Kate's cut you off. You're the horniest guy in the history of the universe. Always have been. I mean, one time you tried to fuck a tree.\"\n\nI shoved him. \"I was hammered. And it was a joke. That girl I'd been after for weeks... the one with the really thick hair and massive tits... uh, Carolyn? God, she was something. She teased me all night, then started tonguing some girl and then left with her. She could've just said she wasn't into guys instead of giving me blue balls.\"\n\nDave nodded and chuckled, remembering.\n\n\"Anyway, Kate has not cut me off,\" I said. \"It's just that she doesn't get in the mood anymore without watching me with Amy first. Plus, she says fucking her is a waste -- that Amy should get all my sperm.\"\n\nDave shook his head. \"Wish I had your problems, man. Look, just admit it -- you're doomed. You've got two women working on you to get Amy pregnant. And I know you: you need sex. Real sex. You'll go nuts without it.\"\n\nI stuck out my chest and smirked. \"Think so? Well, it's been a month so far and I'm doing fine. Just fine. I'll find some way to talk sense into them both. In a year or two, if Amy hasn't left us and still wants a kid, I'll think about it then.\"\n\n~~~~\n\nWobbling home, I opened my jacket to the crisp autumn air. It helped focus my mind, and I needed every drop of self-control around Amy. She was persistent, persuasive, and since she'd stopped taking the pill, her already high sex drive had gone off the scale.\n\nAmy had always been eager for sex, but as the days passed, she wore tighter and more revealing clothes, rubbed against me more often, or just gazed at me with longing and hunger. She even moved differently: slinkier, with a sway of her hips that made me want to grab her, kiss her, and fuck her against the wall.\n\nI had to banish her from our bed. A naked, aggressively horny twenty-year-old sleeping beside me each night was too much to resist. Not that banishing her changed much: every night Amy came to our bedroom door, pleading to stay, then returned to her room, heartbroken, each time I refused. Regardless, every morning I woke to find her snuggled beside me, warm and naked, either stroking my cock or nursing on my stiff morning wood.\n\nThose were the most tempting times. We both loved fucking in the mornings: one of us rousing the other with a kiss, caressing each other's drowsy warm bodies, then merging for unhurried, gentle lovemaking. We did it nearly every morning, and habits are so hard to break.\n\nKate thought Amy's persistence was cute. For me, constantly fighting her off quickly became exhausting and annoying.\n\nEach day became harder. After a month without fucking Amy and only a few attempts with Kate, a gnawing, relentless horniness had taken hold. I had hoped that once reaching 40 my sex drive would finally relent, especially after months of unrestrained sex with Amy, but it remained as strong as when I was seventeen.\n\nYet, I couldn't jerk off: when I tried doing it beside Kate at night, she made her disapproval obvious. Even when I got a moment alone, I felt like I was being a selfish prick. Every fantasy I pictured each time I tried inevitably became images of Amy and Kate watching disappointed, and I just couldn't finish.\n\nPlus, after months of volcanic sex with Amy, each session usually followed by making love with Kate, solo activities were about as satisfying as washing the dishes. Even when I could come by myself, it felt empty. I missed staring into Amy's eyes while we fucked, the ecstasy on her face when she came, and the little smile that crept to her lips when she felt me throbbing inside her, knowing I was filling her. I missed the sweetness of making love with Kate when her waning desires were re-ignited after watching me fuck my young lover.\n\nWorse than the horniness and constant temptation, though, was the hurt and disappointment I saw in Amy and Kate that grew with each day I resisted. The two women I loved had long since stopped trying to convince me of the merits of knocking Amy up. Instead, their silent growing expectation that I'd 'come to my senses,' as Kate put it, hung heavily between us.\n\nEach night when Amy left, wounded, when I refused to let her sleep in our bed, Kate would purse her lips, sigh and roll over to sleep with her back to me. Each day, I caught Amy casting a longing, anguished expression at me that felt like a punch in the gut.\n\nBut their plan was insane! Get Amy pregnant? It was so obviously nuts.\n\nNo, I was the sensible one. Clearly, Amy and Kate had gone baby-crazy. It wouldn't last. I'd make them see reason. And, damn it, I would tough it out until they did.\n\n~~~~\n\n\"Hi, honey. You're home!\"\n\nAmy greeted me as I walked in the front door.\n\nThe mischief in her eyes told me something was up. Then I realized what she was wearing: a pink polka-dot apron edged with frothy white frills, like something from a 1950's department store catalog. It covered her from cleavage to about mid-thigh.\n\nAmy handed me a martini glass before pulling me into a long, steamy kiss. I tried not to spill the drink while I reciprocated, enjoying her clean scent and the feel of her firm body.\n\nShe released me and stepped back.\n\n\"Like my new outfit?\" she chirped, grinning.\n\nAmy spun to reveal that the apron was all she wore, leaving her ass and back fully exposed. She stuck out her bum and arched her back, looking over her shoulder while clasping her hands in front in a cheesy \"pin-up girl\" pose.\n\nShe turned and smiled sweetly.\n\n\"Dinner's almost ready. Would you like to fuck me before we eat, or after? Or maybe both?\" Her eyes twinkled. \"Either is fine with me, of course, but Kate's still in the study working on her novel, and you know how much she wants to watch when you breed me.\"\n\nI stared, throat dry. The last thing I needed was another drink, but took a hasty gulp anyway.\n\nAmy turned and strode towards the kitchen, swaying her hips. Dumbly, I followed, eyes glued to the globes of her bare ass. I'd seen her naked hundreds of times, explored every inch of her body, yet never tired of seeing Amy exposed.\n\n\"What's going on?\" I said.\n\nAmy bent over to check something in the oven, presenting a sinful view of her pussy from behind. She straightened and turned.\n\n\"I'm seducing you,\" she quipped.\n\n\"Oh?\" I chuckled. \"Is that so?\"\n\n\"Yup! Since you're not going to be an adult and listen to reason about impregnating me, I'm just going to have to make you so horny you can't resist.\" She speared me with a sly look. \"And you know how persistent I can be.\"\n\n~~~~\n\nKate emerged from her study when it was time to eat. The fall semester had begun, and she already had papers to mark and grad student research to organize. Her third novel, published in the spring, had become a success, selling far better than her first two. The pressure was on for novel number four to be even better.\n\nShe seemed far too amused with Amy's outfit and her latest plan.\n\n\"Kate, did you know about this little scheme?\" I asked.\n\n\"No, but it certainly makes dinner time interesting, don't you think? Amy, where on earth did you find that ludicrous apron?\"\n\nAmy glanced down, then up with innocent eyes. \"This little thing? Why, it's the latest fashion.\"\n\nKate laughed. \"Maybe in 1953.\"\n\nAmy shrugged. \"Well, I wanted something old-fashioned and conservative. Just like Ben.\"\n\nI ignored them both while they laughed.\n\n\"So, this is your plan?\" I said. \"You're going to walk around half-naked in that outfit each time I get home, hoping I'll lose control and fuck you on the hallway floor?\"\n\n\"Oh, yes please,\" said Amy. \"But I have lots more outfits. A different one for every day. And one for every night, too. Remember my friend Mary? She's in the Theater Arts program at the college. She has access to their entire costume collection. And has a few interesting outfits of her own she's letting me borrow.\"\n\nKate sat back and smiled. \"This is why I like having you with us, Amy. If you weren't, this would just be another quiet dinner at home. You liven things up so much. Although, I have to admit I'm having second thoughts about this whole baby thing.\"\n\n\"What?\" Amy gasped. \"You... you are?\"\n\nKate nodded gravely. \"Well, yes. I mean, let's face it: Ben's only 40. He's still a little immature to be a father, don't you think? Guys mature so much later than us women, remember. I'm just not entirely sure he's ready for the responsibilities of parenthood at his tender age.\"\n\nAmy nodded sagely. \"Why, yes, Kate. You're right. The guys at my college all act like they're still twelve. But I have faith in our Ben. We'll support him. We'll help him grow, won't we?\"\n\n\"Absolutely,\" nodded Kate. \"We'll help him mature and comfort him when he gets scared of the responsibilities.\"\n\n\"You snarky little teases,\" I glowered, trying to look serious. \"I'm the only one being mature about this thing. You two have lost your fucking minds. You'll thank me whenever you get over this baby fever of yours.\"\n\n\"Now,\" I said, standing abruptly. \"The first one of you sarcastic teases I catch is going to get tickled to death.\"\n\nBoth bolted from their chairs, squealing with laughter.\n\nI caught Kate first.\n\n~~~~\n\nKate was marking papers when I slid into bed. Right on cue, Amy knocked on the door and stepped inside.\n\nInstead of her usual bed-time outfit of absolutely nothing, Amy wore a complete \"merry widow\" outfit: black corset accentuating her figure, sheer stockings clipped to garters, and a satin g-string barely covering her pussy. She had tried to apply sultry make-up with sparkly eye shadow, exactly the wrong shade of lipstick and far too much rouge. Add a feather boa and she would've been perfect for a production of the Rocky Horror Picture Show.\n\nAmy strode to the bed, wobbling like a newborn colt in precariously high heels. She leaned over me, boobs straining against the corset.\n\nShe booped my nose and with a husky voice intoned, \"Hey there, big boy. Wanna get lucky?\"\n\nBehind me, Kate snickered. I laughed before I could stop myself.\n\nAmy looked down at her outfit. \"What? You don't like it?\"\n\nThe thing about Amy was she was girl-next-door pretty, one of the many things I loved about her. Her face was just too pure and fresh to pull off the femme fatale look she was going for. Her awkward attempt at a seductive saunter and a smoky expression made it even more incongruous.\n\nI pulled her down onto the bed and kissed her waxy lips.\n\n\"I think,\" I said, \"perhaps 'sultry' might not be the best look for you.\"\n\nAmy frowned. \"Mary said I'd look hot. Make me irresistible.\"\n\n\"You're always hot, Amy. Just by being you.\" I kissed her again.\n\nAmy pulled me close with a tentative, hopeful expression.\n\n\"But,\" I said, \"unless I wear a condom or you get back on birth control, we are not making love. No matter how hot you are. You know that.\"\n\nHer face fell. \"I wouldn't let you wear a condom if you had leprosy. And you know that.\"\n\nShe glanced at Kate who was watching with amusement.\n\n\"C'mon Ben,\" Amy said. \"It's been long enough.\" She writhed against me then ran her palm over my hardening dick. \"Stop torturing me. Us. You're suffering as much as I am. And Kate wants to see us together again. Think how extra hot she'll get when you fuck a baby into me.\"\n\nI pushed her away. \"We've had this conversation, Amy. I want to make love to you -- I always want to make love to you -- but I'm not getting you pregnant. You're too young. And having a kid should be with a guy your own age in the sanctity of a loving marriage.\"\n\n\"Wow,\" said Amy, \"that's a term you don't hear much. I am in the 'sanctity of a loving marriage:' You're married to Kate and I'll be your... what was the term, Kate?\"\n\n\"Sister wife,\" Kate said. \"That's the accepted term in the communities of--\"\n\n\"No!\" I said, scrubbing both hands over my head. \"I don't want to hear it! I don't care what other communities do or what's accepted in other cultures. It's wrong. For us. It's wrong for Amy.\"\n\nI stroked Amy's cheek. \"You deserve better. So much better than this.\"\n\nAmy held my hand to her face.\n\n\"I'm never going to find better than you and Kate. And I don't want to. I love you. I love Kate. And you both love me, don't you? There's only one thing that would make what we have better.\" She looked up at me hopefully and slid my hand to her belly.\n\nThese discussions happened every night. They were exhausting, maddening. Seeing the yearning in Amy's eyes, feeling her cuddled against me, I fought the urge to rip her ridiculous clothes away and make love to that sweet girl. Give her what she and Kate thought they wanted.\n\n\"Please,\" I said, removing my hand, \"Please. Go back to your room.\"\n\nShe pressed against me, moving her hand up to my chest. \"Can I just sleep here tonight? It's been so long. I won't do anything. I won't even get naked. Just sleep. I promise.\"\n\nI sighed, avoiding her pleading eyes. \"You know what'll happen. Even if you don't do anything, I will. Even in my sleep I'd wind up fucking you.\"\n\n\"Mmmm,\" she said, squirming close, \"I'd stop you.\"\n\n\"Hah. Sure, you would.\"\n\nI shooed her out of bed and guided her back to her room.\n\nWhen I returned, Kate had put her papers aside and watched me with an amused expression.\n\n\"It's not funny,\" I said, slipping back into bed. \"The costumes. The antics. It's childish.\"\n\n\"It's cute. And you know what she's doing. She's trying her damnedest to get you to lighten up. To stop being so serious about this.\"\n\n\"How can it not be serious, Kate? Having a kid? Out of wedlock? Amy should not be some old guy's concubine. Or surrogate.\"\n\nKate rested her head against me. \"Why do you keep seeing it like that? Amy's not some little slut on the side. She never was. She's family now.\"\n\n\"And she'll still be family when she finds her own guy. We can have them over for dinner once a week.\"\n\n\"Hmm. I wonder if you could stand that... seeing her with someone else? C'mon, Ben, admit it: you never want her to leave. Neither do I. And the idea of impregnating her excites you. So why not give her what she wants?\"\n\n\"Because it's absolutely, totally, fucking batshit crazy.\"\n\nKate nodded. \"Yeah. That's what I thought too when she suggested it. We talked it over for days and days. But Amy convinced me. It's a brilliant idea. And she's thought it through. She really has. She's very sure about it.\"\n\n\"She's a kid. She can't possibly know what she wants.\"\n\nKate pursed her lips. \"Well, we might have been kids at her age. We had that luxury, but Amy didn't. She grew up fast. I wish I was as level-headed as her when I was 20.\"\n\n\"Okay, fair enough. Still, she's only 20. There's no rush. Let her graduate her program and build her business. Experience life a little. Get out there and do what she never had a chance to before. We can all wait a couple of years.\"\n\n\"Ben, you'll be 41 soon. I'm 50. We're both still in good shape, but how old you want to be when we're changing diapers and chasing after toddlers?\"",
        "I laid back, arms behind my head. \"Oh, you two will do all that. I plan to just sit back and bark orders.\"\n\nKate swatted my chest. \"Amy doesn't want to wait. She's ready. She really is. I'm not going to lecture you how historically 20 was considered almost too old to be a mother, but --\"\n\nI glowered. \"Look, we've been over this a million times. Having her living here and sleeping with me is bad enough. Make her an unwed mother, too? What would people think? How could we live with that?\"\n\n\"You don't care what people in this town think any more than I do. And 'unwed mother'? Ben, I love how you follow your morals, how much you care, but sometimes your old-fashioned side frustrates the living shit out of me. There are plenty of ways to be a family. Plural relationships have been around forever: the Maasai, fraternal polyandry in Tibet and Nepal, triads in Brazil...\"\n\n\"I do not want to hear it, professor.\"\n\nShe elbowed me. \"Oh, stop that. It's true. And you need to hear it. It's not like Amy would be wandering the streets, babe in arms, with a scarlet 'A' on her chest. She has us to care for her. And Ben?\"\n\nShe fixed me with a meaningful look. \"I want it too. After the hell we went through trying to conceive, all those disappointments. It's a second chance for us. And remember we did once discuss finding a surrogate.\"\n\n\"And decided against it,\" I said.\n\n\"Because we didn't want to pay some stranger. This is Amy. Our sweet Amy. Offering us what we always hope for.\"\n\nKate's eyes were moist and pleading.\n\nI pulled her close. \"I know, Kate. I know.\"\n\n\"Good,\" she said. \"Then go bring her back in here. We'll talk and laugh and cuddle. And then you can spend all night breeding that wonderful girl while I hold her hand.\"\n\nReleasing Kate, I sighed. \"I can't. It's wrong. It's just... wrong!\"\n\nKate flopped back onto the bed with a groan and covered her eyes.\n\n\"I don't know who's more stubborn around here,\" she said, \"Amy, or you.\"\n\n~~~~\n\nThe next day after work, Amy greeted me dressed as a hot secretary: crisp tailored blouse buttoned low enough to reveal maximum cleavage of her braless breasts, a black pencil skirt slit on the side almost to her waist, garters and stockings, horn-rim glasses, and hair pinned up in a conservative style.\n\nRaising a steno pad, she said, \"Are you ready to give me your dick... tation, sir?\" She extended her tongue to lick the tip of a yellow pencil.\n\nAmy kept up the cheesy office innuendo and double-entendres while we prepared dinner, rubbing against me or running the back of her hand across my hardening crotch as she bustled around the kitchen, hips swaying in exaggerated fashion.\n\n\"Whew,\" she said, fanning her face. \"This is such... steamy work.\" Amy pulled the pencil from her hair, shaking her head with eyes closed as her tresses fell about her shoulders.\n\nWith a shrug, she thrust out her chest. Suddenly, the blouse flew apart from the strain, bobbling her naked breasts into full view.\n\nAmy looked down at herself, making no attempt to cover up.\n\n\"Oops,\" she said, touching fingers to her lips, \"however did that happen?\"\n\nShe pulled the blouse from her skirt and tied it up under her boobs, leaving her midriff bare but open wide in the center, barely covering her nipples.\n\n\"I'm so sorry for that clothing malfunction, sir,\" she said. \"I know how you like things to be proper and old-fashioned. Do you think I need to be... disciplined?\"\n\nAmy turned, sticking out her skirt-clad ass while looking over her shoulder.\n\n\"Do I deserve a spanking for that indiscretion, sir?\" she intoned.\n\nI laughed and gave her ass a hard swat before wrapping my arms around her from behind.\n\n\"Have you been taking acting lessons, Amy? You're putting on a hell of a performance tonight.\"\n\nAmy ground her ass against my crotch and reached back to rake her nails up my neck.\n\n\"You know, sir,\" she said, \"I'm going to the bank later. Is there anything you'd like to... deposit? I'd be happy to take anything you'd like to give me. Anything at all.\"\n\n\"You should have taken the theater arts program too,\" I said, kissing her neck and massaging her breasts through the blouse. \"You could be a star.\"\n\nAmy turned in my arms, looking up with an earnest expression.\n\n\"I don't want to be a star, Ben. I just want to be yours. Forever.\" She reached between us to massage my stiff cock. \"I want to be--\"\n\n\"Dinner ready?\" Kate had emerged from her study and was standing at the threshold of the kitchen. \"Smells wonderful, you two. As always.\"\n\nAmy and I blinked at each other, then separated.\n\nThe mood broken, the three of us served dinner and ate.\n\nAt bedtime Amy again knocked, then crept into our room. This time, she wore a fuzzy unicorn onesie: white flannel with an embroidered rainbow arcing across the tummy. The hood had pink-lined ears and a golden horn in the center. Amy spun and stuck out her ass to reveal a rear johnny-flap held closed by huge buttons that looked like it would give easy access to her ass and pussy.\n\n\"Better?\" she said. \"This is as far from sultry as I could find.\"\n\n\"A unicorn, huh?\" I said.\n\nAmy shrugged. \"It seemed somewhat appropriate.\"\n\nLaughing, I reluctantly shooed her back to her bedroom.\n\n~~~~\n\nOn Wednesday, Amy greeted me in a schoolgirl outfit: white shirt tied up under her boobs to expose cleavage and midriff, shiny mary jane shoes and sheer white stockings that ended with bare thighs leading up under a plaid miniskirt. Her hair hung in loose pigtails over each shoulder.\n\nFrom behind her back, Amy produced a huge lollipop and took a long seductive lick, her eyes raking me from top to bottom.\n\n\"They sent me home from school for being naughty. Said I needed a firm spanking.\"\n\nShe turned and stuck out her ass, lifting her skirt to reveal thin white panties.\n\n\"What do you think, Daddy?\", she said in a pouting little girl voice. \"Do I deserve a good spanking on my naked little butt?\"\n\nRage darkened my face.\n\n\"No!\" I shouted. \"Not that, Amy. Never that! Go and change. Right now!\"\n\nAmy turned, mouth falling open in surprise. Seeing my anger, she scurried up to her room.\n\nMinutes later she returned as a sexy nurse: tight nurse tunic buttoned low revealing maximum cleavage, and sheer white stockings under a pleated white skirt that barely covered her bare ass and pussy. She had a stethoscope draped around her neck and one of those old-fashioned nurse's caps pinned to her head.\n\nOnce Amy saw I wasn't angry anymore, she relaxed and resumed her seductive antics. When she wasn't casting sultry looks, she was bending over to flash her ass and pussy or rubbing her tits against me each time she slid by.\n\nNurse Amy was her most appealing performance yet. Again, it took all my willpower not to bend her over the counter and take her.\n\nWhen dinner was ready, Amy looped her stethoscope around my neck to pull me close. She hopped onto the counter, spreading her legs.\n\n\"I need a hot meat injection,\" she breathed, reaching to massage my dick and trying to keep a sultry expression. \"Followed by 5 CCs of baby batter, stat.\"\n\nWe stared at each other. Amy held her sultry look for exactly as long as I could maintain a straight face. Then we collapsed against each other, giggling and hugging.\n\n\"Dammit,\" Amy said, brushing away a tear, \"You're right. Guess I can't do sultry. Though, I thought I had you there for a second.\"\n\n\"You almost did, Amy,\" I said, smiling. \"You almost did.\"\n\nWe kissed and embraced. I helped her off the counter and started setting the table.\n\n~~~~\n\nThursday. I found Amy squatting in the front hall dressed as a cave girl: a ragged band of leopard-fur across her chest short enough to reveal the lower swell of her boobs, a ragged fur miniskirt tied haphazardly across one hip, and a necklace of fake incisors fanning out below her throat. Her hair was a wild mess.\n\n\"Guh,\" she grunted with a predatory glare.\n\nShe loped forward to wrap her arms around my leg and peered up quizzically. Tentatively, she sniffed my crotch like a wolf catching the scent of prey then growled, unzipped my fly and had my stiffening cock in her mouth before I could react.\n\nAmy had become adept since that first awkward time she had given me a blowjob. I braced a hand against the wall, overcome by her suddenness and the exquisite sensations. She licked and teased, stroked and bobbed, taking me deep then stroking and bathing my dick with her tongue, all while looking up with concentrated lust.\n\nShe quickly brought me to the brink, then grasped the base of my dick and backed off until I calmed, caressing the underside of my balls with one hand. Then she took me back into her mouth and worked me towards orgasm once again.\n\nI had to lean against the wall, knees weak, while she teased and sucked. When she worked me to the brink a second time, Amy once again relented until I cooled, then started all over again. She used every technique she knew to drive me wild: expertly stroking, licking, sucking and fondling my balls.\n\nWhen climax approached for the third time, Amy stopped, narrowed her eyes, and growled. Standing, she pulled me with her as she strode to the far wall, braced against it and leaned over, flipping up her rag of a skirt and arching her back, presenting herself.\n\n\"Gruh ook!\" she insisted, waggling her hips. When I didn't move, she said \"Ooo grug ooook!\" in a plaintive tone, reaching between her legs, running two fingers through the damp folds of her slit.\n\nAmy's act was so ridiculous, so silly, but so adorable. Having edged me three times, my body raged with the need to come. Seeing her in that submissive position, eager to be fucked, to be bred, ignited a ferocious primal need within my overheated, sex-deprived brain.\n\nThere was little conscious thought when I stepped forward. With one hand I grabbed her shoulder and with the other ran my cock between her lower lips, feeling her slick readiness and heat. Amy pressed back, growling while she rubbed her head against my hand at her shoulder like a cat in heat.\n\nI needed to be inside her. I needed to fuck my mistress and end our mutual torment.\n\nAt the last second, instead of pushing into her I guided my cock to slip forward through the slickness of her lips until the head nudged up against her swollen clit.\n\n\"Guuhh!\" Amy groaned, her head hanging low, wriggling her hips as I pulled back and pushed along her again. She rolled and angled her hips, desperately trying to capture me with her opening, trying to force me inside.\n\nInstead, I leaned over her, chin on her shoulder, forcing her to brace against the wall and reached between us to find her clit. I continued to saw and slide along her, careful to just nudge her opening before slipping past. When I was fully past, I rubbed my dick against her sensitive little nub.\n\nIt felt good, but not enough to make me come. Amy moaned and made little noises each time I slid and pressed.\n\n\"Come for me, cave girl,\" I whispered, sliding, rubbing, and teasing. \"I want to see you come. I miss it. You're so pretty when you lose control. Let your primitive instincts free. I want to hear you grunt and groan for me. I miss it so much.\"\n\nAmy panted as I encouraged her and teased between her legs.\n\n\"Please!\" she gasped, reaching a hand down, trying to grab my cock to line it up.\n\nI batted her hand away. \"Don't you mean 'gruh,' cave girl?\"\n\nAmy kept working her hips, trying to capture my sawing dick. Her breath was becoming ragged.\n\nI nipped her earlobe before planting delicate kisses along her bare shoulder. \"Do it. Come for me. I need to see my cave girl come.\"\n\nAmy lost her power to speak or to grunt when I curled two fingers up inside her and began fucking them in and out. With my other hand I reached beneath her to cup and squeeze one hanging breast then thumbed the nipple.\n\n\"That's it. You're almost there. I can tell. I know all your signs. When you come should I shove my cock in you? Give you something to come around? You know when I feel you coming around me I have to come too. I'd fill you with buckets of come.\"\n\nShe was grinding her hips and panting with ragged grunting gasps, getting wetter by the second. Still fucking her with my fingers, I used my palm to rub harder against her vulva then nipped her shoulder hard while tweaking one nipple.\n\n\"Gaaaaah!\" she gasped, going tense. Her warm passage grasped and released my fingers while I held her tight from behind. A gush of more wetness coated my hand and dick and I fought every instinct to drive into her to relieve my overladen balls.\n\nFinally, she went slack. I staggered to support her weight and keep us both from falling to the floor.\n\nWhen Amy recovered, we straightened, and she turned in my arms. She was still catching her breath, her face and upper chest flushed and glowing.\n\nI smiled. \"Such a good cave girl. You come so beautifully.\"\n\n\"You cheated,\" she said, voice hoarse. \"I want us to come together.\"\n\nShe looked at my jutting cock, pulsing with need. \"Now you can fuck me.\"\n\n\"Amy, you know I want to. We can't.\"\n\nShe grabbed my dick and walked us backwards until she was again against the wall. She bent her knees and spread her legs, sliding me around her warm wetness. It felt beyond wonderful. One small push and I would slip inside. Then I'd be lost.\n\n\"Please?\" she pleaded. \"It's your turn. You need it. Fuck me. I'm yours. Use me.\"\n\nPulling away, I said, \"I can't.\"\n\nShe stood. Her face clouded and she stamped one foot.\n\n\"Dammit. What's it going to take?\"\n\n~~~~\n\nThe next morning, I woke to once again find a naked Amy cuddled beside me, looking up while casually stroking my cock. Kate's side of the bed was empty: she had already left for the university or was in the study.\n\n\"I know, I know,\" she said. \"I'm not supposed to visit you in the mornings. But you were all alone and looked so sweet and yummy. I couldn't resist getting in beside you. I miss this so much.\"\n\nShe pressed harder against my side, her stroking becoming more insistent, making me lose focus.\n\n\"You've ruined me, you know,\" she whispered. \"I can barely get myself off anymore. I'm so used to coming while you fuck me. Or eat me. Or eat me then fuck me. Or--\"\n\n\"Stop, Amy.\" I guided her hand away. \"I miss it too. And when you go back on birth control or let me wear a rubber, we can do this every morning again.\"\n\nShe slid on top, straddling me so the underside of my cock nestled between the lips of her velvety slick pussy.\n\n\"You've never fucked me with a condom. It wouldn't feel right. Besides,\" she said, beginning to slide and grind, \"if you did, I wouldn't get to feel your come leaking out of me at school.\"\n\nAmy rubbed herself back and forth slowly, coating me with her moisture. She was so warm, and the scent of her growing excitement further fogged my brain.\n\n\"Those days when your come is extra thick?\" she continued. \"It stays way up inside. Then it lets go all at once. No one knows what's happening, but I have to run to the bathroom. It reminds me how you fucked it into me and how much you want me and I just have to use your sperm to frig myself to orgasm right there in the stall.\"\n\nHer hips were grinding faster and mine responded, pushing up against her, excited by her tale and the relentless need to take her gnawing at me.\n\n\"But sometimes,\" she said, \"I'm in class or with an instructor. So, I have to sit in gooey panties, squirming and trying to ignore it, wondering if anyone has noticed how turned on it's made me.\"\n\nAmy planted both palms on my chest and lifted up, grinding and sliding more forcefully, her nipples almost close enough to capture in my mouth. She angled her hips and wriggled, the head of my dick lodging at her opening then slipping away. Instinctively, I bucked to match her motions, subconsciously striving to find the right angle to enter her.\n\nHow I wanted that to happen: to fuck my horny, fertile lover, watch her expressions and hear her gasp as I stretched her open, pushing in a little at a time until we were fully joined. I longed to fill her with come for her to carry within her all day, our shared secret, maybe even starting new life inside her.\n\nI wondered if Amy would feel that moment. I had read somewhere how some women sensed when they became pregnant, if not immediately then soon after: some feeling of joy, of fulfillment, or just an intuitive realization. I thought that was unlikely, but at that moment with Amy sliding and grinding on top of me, her breath quickening, my dick catching then slipping past her eager opening, I longed to find out.\n\nWhen Amy reached between us to line me up, I summoned my remaining willpower and rolled her off onto the bed.\n\nShe clamored, trying to pull me on top of her.\n\n\"Please! I need you. I need you so much! Do it! Please fuck me now. It's time.\"\n\nI turned away. I was just barely able to quell the immense lust overpowering my resolve but knew I couldn't withstand seeing Amy's pleading expression and her lovely nakedness.\n\nMumbling an apology, I scrambled out of bed and headed to the bathroom.\n\nBehind, Amy cried out then began to sob.\n\n~~~~\n\nFriday. Driving home should have been a relief after a long work week, but I dreaded having to fight Amy off yet again. Concentrating at work that day had been nearly impossible, my thoughts alternating between replaying every detail of that morning, and nauseous shame remembering how she cried.\n\nMaybe she'd give up. But I knew it would be another costume. What would it be this time? French maid? Sexy space alien? Harem girl?\n\nShe greeted me in the front hall wearing a glittery halter barely big enough to contain her boobs, high-cut lacey panties exposing half of her ass, and ridiculous stiletto platform heels.\n\nInstead of trying to seduce me right there, Amy pecked my cheek and went to the kitchen.\n\nWe prepared dinner together as usual. Not once did Amy come onto me, make eyes, or even rub against me, though she wore a sly grin the entire time. Her slutty outfit was revealing but wasn't particularly enticing. And 'slutty' didn't suit Amy at all.\n\nWhen Kate joined us for dinner, we had a normal meal with each of us discussing our day, and events in the news. Despite Amy's outfit, it was how our meals used to be.\n\nMaybe after the frustration and disappointment of that morning she had given up her scheme and we could go back to how things were.\n\nI should have known better.\n\nAfter dinner, Amy led Kate and me to the living room. She had moved the coffee table and other furniture to the sides. In the middle of the empty floor stood a gleaming chrome stripper pole.\n\nA base plate pressed into the floor and another plate snugged against the ceiling to support it. It looked sturdy.\n\nAmy grabbed the pole with one hand and spun around it once, grinning.\n\nI laughed. \"Amy, you have got to be kidding. You'll kill yourself!\"\n\nShe arranged Kate and me side-by-side on the couch, dimmed the lights and started some throbbing club music. She wobbled in her high heels over to the pole.\n\nShe started slow, holding the pole with one hand while doing halting high-legged struts in a circle around it, stumbling occasionally while keeping her eyes fixed on me. After a few more halting dance steps nearly in sync to the thumping bass of the music, Amy dropped to the floor to crawl towards me, cat-like, her eyes fixed hungrily on mine. She separated my knees and looked up, playfully licking her lips before looking at my crotch.\n\nJust when I thought she would undo my pants, Amy slid up through my legs and mashed her covered boobs in my face. She ran her fingers up the back of my neck sending electric shivers through me, then bent to nip and tongue my ear. She then turned, braced her hands on my knees then ground her ass back against me in true stripper fashion.\n\nGlancing at Kate, I saw her grinning and slowly shaking her head in amusement.",
        "The stripper moves were having their effect. When Amy felt me getting hard, she ground against me even harder, then sat and laid backwards, pressing me into the couch. She grabbed my hands and planted them on her breasts and I eagerly massaged them through her sparkly top.\n\nAmy sighed, wriggling against me as I groped her.\n\nWhen I tried slipping my fingers under her top to feel her breasts directly, she pulled my hands away and launched herself to her feet. She faced me, bending and wagging a finger like I was a naughty boy.\n\nWith a teasing look, Amy undulated her body while slowly lifting her halter. When her boobs sprang free, she put fingers to her lips in mock surprise then pulled the top over her head and off, clad only in the lacey panties. She flung the top at me then once again trotted to the pole.\n\nMaybe with a few more hours of practice Amy could have pulled it off, but she was awful: she gripped the pole and spun awkwardly, nearly losing her balance. Next, she ground her ass against it, attempting to look sexy but looked more like she was scratching a rash. The high heals didn't help: she wobbled and stumbled with almost every step.\n\nKate and I tried to hold our laughter. I'd been to enough strip clubs to recognize each move Amy was attempting, but in a club any dancer as halting, unsteady and graceless as Amy would have been booted out after their first night.\n\nShe did another ungainly one-handed pirouette around the pole then leaped up onto it, clinging awkwardly with hands and knees. She inch-wormed herself to the top, face set in grim concentration. When she neared the ceiling, Kate and I gasped when she released her hands, flopping back until she was upside down, holding the pole by her tightly wrapped legs.\n\nAmy tried casting us a steamy look, stretching her arms towards us then down to the floor, but soon her trembling legs lost their grip, and she began a halting slide towards the floor, her thighs making a rude squealing squeak. Her look of dismay and determination as she tried to stop her awkward descent had Kate and me crying with laughter.\n\nWhen she was an upside-down heap on the floor, Kate stood, wiping tears, to help the poor girl to her feet.\n\nAmy scowled. \"Dammit. I practiced all afternoon with Mary. It looks so easy in the movies.\"\n\nI chuckled. \"Most things do. Hey, mind if I try?\"\n\nBoth girls cast doubtful looks, but I stood and did a little bump-and-grind while stripping to my underwear. Waggling my ass, I sashayed to the pole to the throbbing beat of the club music. Amy and Kate stood beside each other hooting encouragement.\n\nGrabbing the pole with one hand, I swung around like Amy had done. That went well, so I hooked a leg around the pole and spun that way.\n\nAmy and Kate cheered and demanded more, so I tried mounting the pole. Planting both feet on the floor I did a few more twirls, faster each time, trying to get momentum for a leaping twirl, but lost my grip and went flying, crashing into Amy and Kate.\n\nThe three of us fell to the floor in a tangled heap and lay there, shrieking with laughter.\n\nKate said, \"I hope we can keep the pole. I think we've found a new family activity.\"\n\nWe untangled ourselves and sat up.\n\nKate stood and went to the pole, giving it a shake to test it.\n\n\"Mind if I try?\" she said.\n\nAmy grinned and nodded. We sat cross-legged on the floor as Kate went into her own stripper routine, shedding her clothes one item at a time, casting sultry looks over her shoulder, wagging her bum until all she had left were her panties.\n\nGrabbing the pole high with one hand, she did a sensual walk around it, stepping high with toes pointed, watching us with a confident smile. She then braced a foot against the bottom of the pole, held on with one hand and pirouetted with perfect grace.\n\nKate then launched into a seamless series of moves, twirling, spinning, launching herself high onto the pole, then down, then back up, moving fluidly from one motion to another.\n\nAmy and I sat dumbfounded as she whirled, bent and swayed using the pole as deftly as any dancer I'd ever seen, her long limbs and lean frame a vision of erotic grace, her modest boobs naked to our view. Amy and I gasped and applauded at each new move, amazed at how easy Kate made it look.\n\nFinally, she dismounted and strode back to us, wearing a huge grin.\n\nAmy leaped up and took her hands.\n\n\"Kate, that was amazing! You never told me you did pole fitness.\"\n\n\"She hasn't,\" I said. \"Kate, where the hell did you learn to do that?\"\n\nShe just smiled. \"You knew my mom made me take dance lessons when I was little.\"\n\n\"Somehow I doubt kids dance class included pole routines.\"\n\n\"It helped. And I had a life before we met, you know. Had to pay for my first year of undergrad somehow. My parents sure couldn't afford it.\"\n\n\"Wow, you were a stripper?\" Amy asked. \"That's so cool!\"\n\n\"Mostly I just danced on stage. I had a few devoted regulars, but most guys didn't want table dances from a tall girl with small tits. Everyone liked watching me dance, though.\"\n\n\"I can see why,\" I said. \"And you never told me this?\"\n\nKate shrugged. \"I only did it for a few months. It was no big deal.\"\n\nBefore I could ask more, Amy said, \"Kate, can you teach me some of those moves?\"\n\nI sat, watching Kate guide Amy through various climbs and spins, sometimes failing, sometimes getting it, while they both laughed and giggled together. Two lovely half-naked goddesses, one tall and lean, the other shorter and shapely enjoying themselves like friends, like sisters. Whenever I saw them like that, my heart swelled with happiness.\n\nThey insisted I join them. I waved them off, but they pulled me to my feet. Amy and I made fools of ourselves as Kate instructed us in basic techniques and poses.\n\nWe kept at it until all of us were tired and our sides ached from laughter.\n\n~~~~\n\nWhen Amy and Kate went up to bed, I stayed behind.\n\nI grabbed a bottle of scotch and sat in the livingroom, sipping while absently flicking through TV channels. I knew better: now past forty, I couldn't indulge like I used to, but maybe a little irresponsible intoxication would help think things through.\n\nThe pole gleamed in the middle of the room. Kate's past exotic dancing raised a bunch of interesting questions, but it was thoughts of Amy that tormented me.\n\nOnce again Amy's seduction plan had failed, but the three of us had so much fun. If Amy wasn't with us, Kate and I would have found some movie to stream or gone out for a Friday meal. Just another quiet night.\n\nThough Amy had only been with us since the spring, I couldn't imagine life without her. She was a joy, both for me and for Kate. Yes, sex with her was incredible, but even without that, Amy's youth, energy and personality filled an emptiness Kate and I hadn't realized was there.\n\nAnd we loved helping her: Kate was like her older sister, guiding Amy through the transition from girl to full adult. In New York we had delighted in Amy's excitement as we showed her the city, seeing it new through her eyes, sharing her awe and wonder.\n\nI felt the same happiness helping Amy register her business and set up her accounts, and pride after she set up an online jewelry store on her own. Orders for her handcrafted works came in immediately. She was well on her way to success, though always credited me and Kate for guiding and supporting her.\n\nOne day I found Amy using propane torches and etching chemicals in her room. I insisted we clear out the large wooden shed that sat at the end of our back yard and turn it into a studio workshop. It had a workbench ready for all the woodworking projects I once planned but never did. Together we found a new home for the lawn mower and yard tools then built an improvised fume hood in one corner to vent her hazardous chemicals and torch work. We even made a small kiln out of firebrick Amy could heat with a pair of torches.\n\n\"I can't believe you'd do all this for me,\" Amy had said.\n\n\"We should have done it months ago. It's a little cramped, but it'll do until you make your first half-million.\"\n\nWe christened the workshop with Amy sitting at the edge of the workbench while I stood and fucked her.\n\nYes, without Amy our lives would be emptier. Kate and I would return to our old ways: she would teach and write, and I'd work too much, interrupted only by occasional trips for book tours or vacations.\n\nBut Amy just couldn't stay forever! We were happy to get her started, and as much as we loved having her with us, eventually she needed to find her own path, and her own guy. She deserved that happiness.\n\nHer own guy. A roiling swirl of emotions engulfed me picturing her with anyone else. It was the right thing, yet deep inside I was possessive: I wanted her for myself. I wanted to be the most important person in her life, to give her everything, for Amy to love only me, need only me.\n\nLike Kate said, could I stand seeing her with someone else? Seeing her with another man's child?\n\nI had scoffed when she and Kate first presented the idea of getting Amy pregnant. I had said no, but deep down it thrilled me. It woke a feral desire that had slumbered since giving up trying to conceive years before.\n\nThe first time Kate and I made love unprotected, staring into her loving, trusting eyes as I unloaded into her with no barriers was the most intimate moment I'd ever experienced. Though she didn't get pregnant, that trust, commitment, and shared longing bonded us closer that anything else ever had.\n\nI wanted that again but felt ashamed. What a selfish wish.\n\nWhile thinking through all these things, I stood to head to the bathroom only to stagger and fall back on the couch. Peering at the bottle, I realized I'd finished more than half of it.\n\nDammit, I thought as the room swirled, I should know better.\n\n~~~~\n\nI woke to Amy shaking my shoulder.\n\n\"Cmon, sleepyhead,\" she said, \"Let's get you up to bed.\"\n\nShe pulled me to my feet and turned off the lights and TV.\n\nThen we were in bed, kissing and caressing, her naked body pressed against my own. She was so warm and so soft. In the dim bedroom light, I nuzzled her neck, enjoying the clean scent of her hair while running my hand along her back and ass.\n\nAmy fondled and stroked me. I was too wasted to respond, but she had the cure for that: scooting down, she took me into her mouth. She nursed for a while, then when I started getting hard she sucked and stroked with more determination until she had me rock hard.\n\nThen Amy was straddling me, lowering herself onto my cock.\n\n\"Yessss...\"\n\nShe gasped then gave a little sigh when she impaled herself fully. She shuddered, eyes closed, wriggling her hips with me rooted fully inside her.\n\nI bucked up, reveling in the grunt it drew from her. She lifted then impaled herself again, shimmied her hips when I was deep inside her, then lifted again and began fucking me, slow at first then getting more insistent.\n\nShe felt better than I ever remembered. Warmer. Her wetness not as slick. Each time her tight passage seemed to release me reluctantly, then part eagerly to receive me. It seemed such a long time since we'd fucked. Had I been away?\n\nI lay back and held her with one hand on her hip, the other on one firm boob. It was heavenly, as was the expression on Amy's face: ecstatic, yearning, ravenous.\n\nNever had I needed her more. Each thrust and grind fueled my need higher. I had to get deeper, had to possess all of her, give her everything and show her how much I needed her and loved her.\n\nWas Kate watching us? It was too dark. And we were in Amy's bedroom, weren't we? Why were we there? Kate always wanted to watch and there wasn't room for the three of us in Amy's bed.\n\nThese puzzling thoughts vanished when Amy seated herself hard and slid back and forth urgently, panting and groaning, grinding hard, stirring my aching cock within her tight passage.\n\nThe booze kept my excitement in check. I felt like I could fuck her until dawn without coming.\n\nAmy, however, was getting close. She arched her back and ran a hand through her hair, then clamped it over her free boob, panting steadily as we mated with fervent determination.\n\nSeeing her mounting excitement and the sensations of her steamy pussy milking my cock was having an effect. Maybe I wouldn't last until dawn after all. I bucked up into her harder, bringing grunts to mix with her panting.\n\nSuddenly Amy stopped. She wriggled urgently once, twice then her mouth went wide, her face went slack and she came, her pussy grasping me inside with a sensuous rhythm.\n\nThat was it. My back brain took over. Amy felt limp as a ragdoll when I flipped us over. She looked up with lidded eyes when I hooked her legs over the crook of my arms and drove back into her.\n\nI had to fuck her. I needed to get deep, needed to take her again and again. I began pounding her into the bed mercilessly as Amy gasped and grunted, her arms gripping the headboard, taking the pounding with joy, offering herself completely.\n\n\"Yes,\" she groaned. \"Fuck me. Breed me.\"\n\nAmy loved that game. She came so hard when she fantasized we were doing it for real. I never admitted it to her, but it excited me too, picturing her with a big belly, carrying our child.\n\nI was so glad she had stopped her games and was back on birth control so we could make love again and play the game. Is that what we were celebrating? Or was I wearing a condom? No, obviously not from the intense heat and slickness of her pussy. Then what the hell was I doing?\n\nWere we doing it for real? Amy could get pregnant! I was drunk. Had I forced myself on her, like I'd done too many times back in college? Didn't seem so: Amy was meeting every thrust and had freed her legs from my arms to wrap them around me.\n\nRealizing I was fucking Amy completely unprotected horrified my thinking brain, but my back brain was excited beyond any hope of control. I shot past the point of no return and started to come. No! Amy trusted me. I couldn't do that to her. I wouldn't do that to her.\n\nI pulled free of her heavenly body just in time.\n\n\"No! Oh god, please!\" Amy groaned, reaching for my cock as it shot streaks up her tummy, working her legs and hips to get me back inside her. I slid down and away, free of her embrace then lay back on the bed. The room spun.\n\nMy hammering heart slowed as I caught my breath. I rolled to the side, drunk, unsure and unsteady as exhaustion settled like a lead cloak.\n\n~~~~\n\nSunlight filtered through Amy's curtains. I was alone in her bed with a throbbing headache to remind me I had lost control.\n\nOn the nightstand sat a class of water and painkillers. I gulped them down gingerly before sitting up, waiting for my sense of balance to even out before wobbling downstairs.\n\nKate was at the dining room table warming her hands around a cup of coffee. She glowered.\n\nThe unfiltered daylight pouring through the windows felt like an ice pick in my brain.\n\n\"Where's Amy?\" I said, feeling the gravel in my throat as I sat.\n\n\"She went out. We had some words.\"\n\n\"You're mad at her? What's wrong?\"\n\n\"What's wrong? Ben, she took advantage of you. She practically raped you last night.\"\n\n\"Wha-- what? That's ridiculous. Where did you get that idea?\"\n\n\"You were drunk. Totally smashed, judging from the half-empty bottle you left on the coffee table.\"\n\n\"I know, I know. You don't have to lecture me. It was stupid. But Amy got me to bed.\"\n\n\"Yes,\" Kate said. \"Her bed. I found you two together when I woke up this morning alone. Her room smelled like sex and scotch. I asked her what happened.\"\n\n\"Yeah. I can't believe I was so weak. Again. Don't worry, I pulled out before coming inside her.\"\n\n\"Which means you didn't change your mind. You didn't want to fuck her. Yet she took you to her room and got you to, knowing full well you weren't in any state to consent.\"\n\n\"What? No! I wasn't passed out or anything. Amy was just being Amy.\"\n\n\"And you and Dave were just boys being boys back in college, right? What if things were reversed -- if Amy didn't want sex, she got smashed and you fucked her?\"\n\nMy muddled brain didn't want to think. It wanted coffee and greasy food. But a glimmer of awareness formed.\n\nKate scowled. \"Amy didn't see any problem with it, either, until I explained it. And let her know in no uncertain terms what she did was absolutely not okay.\"\n\nShe got up to fetch the coffee and poured me a cup. I gave her a grateful look.\n\n\"I'm surprised at you,\" she said, refilling her own cup. \"At you both. I thought both of you would've known better.\" She sighed and sipped. \"But I should have known better too. I thought her little seduction plan was cute. And I helped her. I should've seen it for what it was. You said no to our plan of getting her pregnant and that should have been the end of it.\"\n\nI wasn't convinced. It was just Amy being persistent, like always. Wasn't it?\n\nAmy must feel awful, I thought. I stood, ready to head outside to find her.\n\nKate caught my arm. \"Give her time to think, okay? Sit. Rehydrate. I'll cook us something greasy.\"\n\n~~~~\n\nWe ate and discussed the situation more. My throbbing headache had receded slightly, so I cleaned up and went in search of Amy.\n\nLooking around the front yard I saw she had dug up all the flowerbeds in preparation for winter. Her toolbox sat on the ground by the fence where a slat had come loose. It was just like her to engross herself in work for us.\n\nAmy came around the corner of the house holding a box of nails. When she saw averted her eyes, dropped the box and sprinted out of the yard.\n\nI jogged after her, calling for her to stop, my hungover brain sloshing inside my skull.\n\nIt took three blocks to catch up to her. She stood staring across the street at her old house -- the ratty bungalow she had grown up in with her mother. It had sold almost immediately back in the spring and stood empty ever since. Now construction fencing surrounded it. Inside it, a yellow excavator hulked near the front door. A massive construction waste bin filled the driveway.\n\nAmy glanced at me when I walked up and stood beside her.\n\n\"They're tearing it down.\"\n\n\"Looks like it,\" I said. \"The land's worth much more than the house. They'll probably stick up one of those garish McMansions they've been building around here lately.\"\n\n\"Probably.\"\n\n\"How do you feel about that?\"\n\nShe shrugged. \"I'll be glad when it's gone. Not a lot of good memories in that house.\"\n\nI guided us to a nearby bench at the bus stop. We sat, taking in her childhood home.\n\n\"Have you heard from your mother lately?\" I said.\n\n\"Yeah. I figured she'd be out of money and back here by now, or dead in the Tijuana landfill. But she's doing okay. Never thought she'd use the house money to buy into a bar with that guy. She'll probably be good at running a bar.\"\n\n\"She probably will. She was certainly the life of the party in that house.\"\n\nWe sat for a moment in silence.\n\nSoftly, Amy said, \"I'm sorry about last night.\"\n\nI sighed. \"I have no right to criticize. In college I did things with girls who were way too drunk. More than once.\"\n\n\"They didn't kick you out of school? Or have you arrested?\"\n\n\"They almost did. I certainly deserved it. But back then guys got away with a lot of horrible stuff.\"\n\nAmy looked at me with anguish. \"I just... this whole thing has been frustrating and one disappointment after another, you know? I miss being with you so much. And I'm so horny now I can't stand it. Last night I thought it was the perfect chance. You didn't protest, so I thought maybe you were finally okay with it.\"\n\nI took her hand. \"That's what I used to think. They didn't say no, so it was okay. Or I'd make sure they enjoyed it or some other bullshit justification.\"\n\nAmy took a deep breath then blew it out. \"I can't believe I did that. Especially after all the drunk assholes who tried stuff with me in that house.\"",
        "Thinking of how Amy grew up filled me with sadness and anger.\n\n\"It's horrible you had to deal with that.\"\n\nShe flashed a sly look. \"None of them got very far. I always slept with one ear open, you know? Anyone who came into my room got a book in the face. I kept War and Peace right beside my pillow.\"\n\n\"Oh! The old one you have in your room? The one that's all scuffed and falling apart?\"\n\nShe grinned. \"It's dented a few skulls. And mashed a few balls, depending on my aim and how angry I was at the moment.\"\n\nI squeezed her hand.\n\n\"Guess I... guess I should lend it to you, now.\" She looked at the ground. \"I feel like such an idiot. And Kate's really, really mad.\"\n\n\"Well, I'd say she's more surprised and disappointed. In both of us.\"\n\n\"What? You didn't do anything. I was the one who tried to ra-- uh, take advantage of you. I was so excited. I didn't see what I was doing. But Kate's right. I knew you were hammered. That should have been enough. And all the other stuff I've been doing -- dressing up, sneaking into your bed -- that was coercion, wasn't it?\"\n\n\"I guess so,\" I said. \"I didn't see it like that, though. Kate didn't either until now.\"\n\nAmy leaned forward, elbows on her knees, diligently studying the sidewalk.\n\n\"I've fucked everything up. Again. She wants to kick me out for sure this time.\"\n\nI pulled her upright and turned her face to me. \"Amy, we're family. No one's getting kicked out, ever. Kate's pissed off and disappointed, sure. But she loves you just as much as I do. You know she does.\"\n\nAmy's stricken eyes searched mine. She pulled me into a hug.\n\n\"I'm sorry, Ben. For pressuring you. And I've been thinking about it. I guess there really is no rush. I'll work on getting my business really going. And I'm going back on birth control.\"\n\n\"Really? You sure?\"\n\nShe eyed me. \"Well, unless you think we should stop. This would be the perfect time. You think sleeping with me is immoral and everything. I don't want to pressure you into that too.\"\n\nAmy had a terrible poker face. She held it for a few seconds then we both laughed and hugged again.\n\n\"If I have to go any longer without fucking you,\" I said. \"I'm going to go insane.\"\n\nShe pulled me tight.\n\n\"One condition, though,\" I said. \"We keep the costumes and the stripper pole.\"\n\n~~~~\n\nOur moment of reconciliation was soon interrupted when two young boys ran up excitedly yelling Amy's name. Their mother, a little out of breath, ran up behind them.\n\n\"Jackson! Lucas! Manners!\"\n\nAmy grinned, pulling both boys close and mussing their hair.\n\n\"It's okay, Mrs. Peterson. They haven't seen me in a while.\"\n\nWhile the boys competed to show Amy the toys they had with them, simultaneously relating everything that had happened in the months since she had last babysat them, I chatted with our neighbor.\n\n\"Your dad is still doing fine?\" I asked.\n\n\"He is. After that scare he finally started taking his meds and exercising. I keep trying to get him out to play golf with us, but he says that's for old people.\"\n\nAlan and Kristi Peterson were about the nicest family in the area, polite and squeaky clean, well-known for canvassing door-to-door for one charity after another. Kristi was petite and pretty, in a sanitized, sexless way. She reminded me of front desk staff at very high-priced hotels.\n\nI handled their investments and Kate and I had golfed with them a few times. Amy had said that when she still did babysitting in the neighborhood, the Peterson boys were her favorite.\n\nAs the boys climbed over her and competed for her attention, I could see why. They were full of energy and a little mischievous but well-behaved. Amy handled their antics expertly.\n\n\"We were on our way to the park,\" Kristi said. \"Want to join us?\"\n\nSeeing the two boys insistently pulling Amy in that direction, it seemed like we had little choice.\n\nKristi and I sat on a bench while Amy climbed on the play structure with the boys. She looked radiant, teasing them, responding to their attention-seeking with smiles and exaggerated expressions, engaging them, skillfully keeping them in line.\n\nKristi said, \"I wish Amy would start babysitting again. The boys still ask for her and we haven't found anyone half as good. But I'm glad she's found a home with you and Kate. Amy grew up so hard. There was always this desperation, this need about her. That's gone now. I've never seen her so happy.\" She looked me up and down knowingly. \"I've never seen you so happy, either, Ben. Somehow you've gone from stressed-out workaholic to, well, a relaxed and satisfied workaholic.\"\n\n\"Uh...\"\n\nShe smiled and patted my hand. \"Don't worry. It's none of my business. Whatever the arrangement is, it seems to be working. Amy deserves a little love and happiness, don't you think?\"\n\nThe rumor mill around town had been busy speculating since the day Amy moved in, but it shocked me to hear someone like Kristi allude to it.\n\nI didn't get to answer because both boys ran up to yank on my arms.\n\n\"Come play tag! Amy says you love playing tag!\"\n\nAmy was close behind, wearing an impish smile.\n\n\"I said you were a world expert at being elusive. You boys have to be tricky to catch him.\"\n\nAfter explaining what 'elusive' meant, we ran around the park playing tag. Kristi stayed on the bench, grateful just to watch and have a few moments to herself.\n\nDespite the hangover and my misgivings, we had a blast. I'd never spent much time around young kids, but soon channeled my half-forgotten childhood as we ran around, making up rules as we went. Amy and I teamed up against the boys, then switched sides, then it became boys against girl.\n\nWhen one boy shoved the other while trying to tag Amy, a fight broke out. Amy smoothly intervened, squatting to address them at eye level, forcing the pair to talk it through and make apologies with a skill that rivaled an arms treaty negotiator.\n\nAt noon Kristi took two tired boys home for lunch and a nap.\n\nWalking home with Amy, I felt like I needed the same, but she was bouncing with energy.\n\n\"Aren't they great? They're growing up so well! Kristi offered me three times my old rate to babysit again. I'd do it for free if I had time. Maybe after I finish my program. You were so great with them! A natural. And you had fun, didn't you? Oh, don't give me that face. I saw you. Admit it.\"\n\n~~~~\n\nAs we approached home, Amy slowed to a shuffle.\n\n\"I don't know if I can face Kate. She was really mad. The quiet mad that's really scary, you know?\"\n\n\"Yeah. She scares me too when she gets like that.\" I took her hand. \"We'll all talk together and work things out. It'll be okay. You'll see.\"\n\nAfter some tears, apologies, and setting some ground rules, we made an appointment for Amy to see our family doctor to renew her birth control.\n\nAmy fretted. \"She can't see me until Monday? Then we have to wait until it's safe?\"\n\n\"There are always condoms,\" said Kate. \"Then you could sleep with us tonight.\"\n\nAmy wasn't any happier about condoms than I was, but she agreed.\n\n\"I'll have to go get some,\" I said. \"Might take a while. Not many places carry XXXXL size.\"\n\nAmy and Kate rolled their eyes.\n\n\"Okay,\" said Kate. \"How about tonight we all cook dinner together? I could use a break from writing.\"\n\n\"Mushroom spaghetti Bolognese?\" asked Amy.\n\n\"Plus garlic bread and Caesar salad,\" I said.\n\nKate smiled. \"Yes. Perfect.\" She clasped her hands. \"This is wild! You haven't been together for over a month. Watching you two tonight will be like having a front-row seat at a cage match.\"\n\n~~~~\n\nWhen I returned home, I felt like a kid on Christmas morning. The stress of the past month was gone. Things were returning to how they had been, and that night Amy and I would make love followed, I hoped, by making love with Kate. And condoms weren't needed with Kate.\n\nOnce again, Kate was in the study working on her latest novel. She had only one more week of work to do, she said. Just like she said three months before.\n\nAmy was nowhere in the house. Outside, lights glowed from the tiny window of the shed. I wandered out hoping to see what she was working on and if she needed help. Her final project for the college was due soon, plus she had orders to fill from her online store.\n\nThe shed was roasting inside. Amy must have been using the kiln. As I shut the doors, she flashed me a warm smile then bent back to her work: twisting and coaxing some fiddly silver pieces into place with pliers.\n\nI pulled a tall stool up beside her, ready to lend a hand or just watch. I loved watching: Amy had become a magician of metal: with a deft twist of wrist, a few taps of a hammer, a blast with the torch and wire, metal and gems transformed into incredible works of art. More impressive than her mechanical skill, though, was her eye and imagination: sometimes her creations were light and whimsical, other times distressingly dark. We had clippings of her work being worn by minor celebrities and a shot of two pieces adorning the lead singer of a Finnish metal band.\n\nIn the stifling heat, Amy's skin shone with sweat with her cotton tank top plastered to her braless breasts. She had stripped her baggy protective coveralls off her shoulders and secured them by tying the arms around her waist.\n\nMaterials and tools covered the workbench, largely an assortment of odd-looking specialty pliers. The wall in front had shelving all the way to the roof meticulously organized with containers, bins, and even stranger tools.\n\nPinned to the edge of one shelf was a photo of me and Kate arm in arm that Amy took in Central Park in New York. On the far side of the shelf was an old photo of Amy with Jackson and Lucas, Kristi's boys from the park. They were younger in the photo: Amy held Jackson upside-down by his ankles while Lucas was leaning from behind her back. All three were beaming.\n\n\"Here, hold this.\"\n\nAmy handed me a length of wire and deftly began wrapping two other strands around it, one dull brass, another bright silver.\n\nWhile she concentrated, I studied her. A smudge of something smeared one cheek. Her skin glowed from the oppressive heat of the shed. The slope of her neck held my attention before a wisp of hair fell from over her face. I knew she would tuck it behind her ear in a few moments and resisted doing it for her.\n\n\"Thanks,\" she said, and took the wire wrapping and began forming it around her creation.\n\nWhen the pink tip of her tongue poked unconsciously from between her lips, something profound moved within me.\n\nThis was the real Amy: engrossed in her work, giving it her all with steady persistence like she did with everything. She glowed with confidence, ambition, and effortless sexiness. Coated with sweat, dirty, with hair messed and falling, she was so beautiful I couldn't stand it.\n\nIf she had greeted me at the door looking like she did at that moment, I wouldn't have been able to resist. She didn't need any costumes. She didn't need any act to seduce me. She just needed to be Amy.\n\nI realized then that I loved her completely: the person she was, the person she would become. I would do anything for her. Anything.\n\nThat same inner shift I'd experienced only once before: with Kate. Briefly, I panicked, feeling like I had betrayed my wife, that being in love with Amy necessarily meant I didn't love Kate anymore.\n\nKate, as usual, was way ahead of me. When she learned I was fucking Amy, we talked on the phone all week. I was apologetic and ashamed. Then one night she quoted me part of a Shelley poem:\n\nTrue Love in this differs from gold and clay,<br>\n\nThat to divide is not to take away.\n\nIt was true. I loved them both. It didn't seem possible, but I cared for Kate just as strongly as ever.\n\nHaving resolved that moment of crisis, I stood and moved behind Amy to kiss her salty neck.\n\nShe cooed. \"Stop. I'm trying to get this right.\"\n\nI did it again from the other side, then reached around to cup and knead both breasts.\n\nShe moaned and leaned against me. \"Now, you know I can't concentrate when you do that. Didn't you come in here to help?\"\n\nI pushed against her.\n\nShe looked over her shoulder, smiling. \"Are you hard? What's got you turned on all of a sudden?\"\n\n\"You.\"\n\n\"Yeah, right. I'm a mess. I need a shower before we cook dinner.\"\n\nShe sighed happily when I kissed her neck again, cocking her head to offer better access for my lips.\n\n\"I missed your touch so much,\" she said. \"I can't wait for tonight.\"\n\nI needed more. Amy set her piece down to concentrate on my attentions and I swivelled her stool until she faced me.\n\nShe looked at me quizzically before I guided her into a kiss. She responded, throwing her arms around me.\n\nOur kiss and embrace soon became hands roaming everywhere over each other.\n\nShe stood up from her stool and ran her palm over my crotch. I did the same to her, then slid a hand down the front of her coveralls, eager to touch her there.\n\nThat loosened the arms of the coveralls tied around her waist. It dropped to the floor in a clump, baring Amy's legs and panties.\n\nWe looked down and grinned.\n\n\"Oops,\" I said. \"That wasn't planned.\"\n\nAmy stepped out of the coveralls and kicked them away. We continued kissing and caressing, getting more and more excited.\n\nI'm not certain when or how she lost her panties, or how I lost my pants and underwear, but the next thing I knew, Amy was sitting on the edge of the workbench, legs wide, while we both stared at my throbbing dick aimed at her center.\n\nShe looked up. \"You won't.\"\n\nI did.\n\nStepping forward, we aligned naturally and I surged into her with one fluid, effortless push. Her eyes and mouth widened as her body received me. When we were fully mated, Amy's eyes closed as her head lolled to one side.\n\n\"Oh, fuck that's good,\" she breathed. \"I can't... you're... we're...\"\n\nFighting back tears from the intensity of being in her again, of embracing her again, I whispered, \"Yes, we are.\"\n\nAmy's eyes opened, alive with need, her chest rising and falling.\n\n\"I know you're just teasing. I know you'll pull out.\" She hugged me tight, laying her head on me. \"Oh, but I don't care! Just fuck me a little. Just for a little while.\"\n\nI hadn't planned on fucking her at all, but there we were. I withdrew and plunged in again. We both groaned, embracing each other tighter. It felt so good I did it again. And again. Amy dropped a hand to my ass to urge me on and then there was no more thought, no more anything but raw need and heart-felt love.\n\nWe kissed. We embraced. We ran hands over each other, offering, taking, groaning, sighing, grunting, sometimes laughing. I fought to get as deep as possible while Amy rolled her hips seeking the best angle to allow it.\n\nOur coupling was too wild to last long, but it was long enough for the air in the shed to turn muggy as sweat broke out on our skin from the exertion.\n\nAmy gave little huffing pants each time we joined, clawing, clinging, spurring me on.\n\nWith a long groan I sailed right over the edge. She groaned when I jammed into her hard. My mind went blank with ecstasy I began flooding her fertile body with blast after blast of come.\n\nFeeling me throbbing within her, Amy clamped her legs and arms even harder, gratefully accepting it all.\n\nSomewhere deep in my sex-crazed brain I realized I was inseminating my completely unprotected mistress, but there was no remorse. It was a triumph. It was right. And she was now mine as much as I was hers.\n\nCold, dry air from outside flooded the shed when the door opened behind us.\n\n\"There you are. Ready to start dinner yet? Oh!\"\n\nI looked back with lidded eyes, my cock still emptying into Amy, to take in Kate's surprised expression.\n\nShe smiled and slowly shook her head.\n\n\"Should've known you two couldn't wait to try out the condoms. Honestly, you're both like a couple of teenagers.\"\n\nExhaustion swept through me. I helped Amy down from the bench to her feet, and we parted. Kate's eyes widened at the sight of come cascading from Amy and my deflating bare dick.\n\n\"Oh,\" Kate said. \"You two are worse than teenagers. No protection, huh? Amy, are you okay?\"\n\nAmy nodded and sat on her stool, trying to catch her breath.\n\n\"Sorry, Kate,\" she said. \"Things just kind of happened.\"\n\nKate grinned. \"Must have been epic. Sorry I missed it. Oh well, it's not very likely you'll get pregnant from just one round. And I'm sure you're both up for multiple repeat performances after dinner.\" She looked at me. \"With protection, right?\"\n\n\"No.\"\n\n\"What?\" Amy said. \"Did you just say no?\"\n\n\"No,\" I said. \"Never.\"\n\nBoth girls were looking at me: Amy puzzled, Kate less so. I took each of their hands.\n\n\"Amy, Kate,\" I said. \"As my very favorite women and loves of my life, I'd like to present a special exclusive offer. In appreciation for putting up with a stubborn fool like me, I'm pleased to offer a special unlimited offer: for an unlimited time, I'd be honored if you'd allow me to father our child.\"\n\nAmy gasped then smiled. She squealed and put her arm around Kate, pulling us into a three-way hug.\n\n\"Yes, that's right,\" she said, eyes misty. \"Our child. All of us together.\"\n\n\"Of course together,\" I said, taking in her smile and Kate's huge grin. \"We're family.\"\n\n~~~~\n\nAll three of us cooked dinner that night: the same simple spaghetti meal we'd prepared the first time Amy had tried to cook for us.\n\nHow far she had come since then. How far all of us had come.\n\nWe worked in the kitchen effortlessly; the tense mood from the previous weeks gone.\n\nSomething poked me in the ass. I turned to see Kate with a strand of uncooked spaghetti held at the ready.\n\n\"En garde,\" she said, grinning.\n\nDinner preparations were put on hold while Amy and I each grabbed our own spaghetti to defended ourselves. After much parrying, lunging, feints and counter-attacks, pausing frequently to re-arm, the kitchen floor was littered with pieces of spaghetti broken during the epic battle.\n\n~~~~\n\nThat night I lay in bed, showered, eager and a little nervous. I had hoped to drag Amy to our bedroom right after dinner, but she and Kate insisted on some preparation first.\n\nFrom the bathroom came sounds of the bathtub filling, lots of talking and some giggling. Whatever they were doing, it took a while and my eagerness began turning to frustration.\n\nJust when I was about to go check on them, the bedroom door opened. Kate, smiling, led Amy into the room.\n\nFreshly bathed, her hair brushed, Amy looked lovely. Except she wore that hideous shapeless bag of a nightgown. The giant faded flowers that marred the ghastly blue flannel looked even more decrepit than before.\n\n\"Uh, so first you dressed to turn me on, now you want to turn me off?\"\n\nKate led Amy closer.\n\n\"Amy insisted,\" she said. \"It's symbolic.\"\n\n\"Mom got this for me when I was fourteen,\" Amy said, running her hands down the front of the formless sack. \"Probably from the Goodwill. It was ugly, but it was super warm. Later I found out that if I mussed my hair, slouched over, coughed a lot and looked tired while wearing this before bed, mom's boyfriends mostly left me alone.\"\n\n\"Oh, Amy...\" I said.\n\n\"And if they were stoned enough that my looks didn't turn them off, this thing was long enough and sturdy enough I could keep it pulled down if I had to fight one of them off.\"\n\n\"So, it became a sort of shield,\" Kate said.\n\nAmy brightened. \"And now, I don't need it. I'm never wearing it again. I never want to see it again. Just like my old house.\"\n\n\"And, so now?\" Kate prompted.\n\n\"So now--I guess this is kind of weird--I want you to rip it off me. Tear it apart. I want to be naked and unprotected in every way when you make me yours. When you impregnate me.\"\n\nI stared, lost for words. My heart ached for her. I longed for her. I loved her.\n\nStanding, I moved to Amy. Her eyes were shining. The nightgown was worn, probably years old when she got it. Grasping the collar with both hands, it didn't take much to tear it and once started, to rip the fabric down her body and away.",
        "Amy stood naked, looking vulnerable and completely trusting, her breasts rising and falling with excitement. Her skin glowed softly from body lotion or bath oil the two of them must have applied.\n\nKate dimmed the lights then moved to her side of the bed and stripped off the covers. I took Amy's hand and led her to our bed, stripped off, and lay beside her.\n\nShe looked delicious. Which reminded me I hadn't tasted Amy for weeks. I kissed her lips while exploring her satiny warm skin, then moved to her neck, then feasted for a while on each breast. Amy held my head to her as I nursed, then nipped and tongued each nipple.\n\nWhen I began kissing down her tummy, Amy stopped me.\n\n\"No. Just fuck me. I'm already ready for you.\"\n\nI smiled. \"Chances of getting pregnant are better when you've had an orgasm first.\"\n\n\"Or four,\" Kate said and smiled. \"When we were trying, we spent a lot of time getting ready before the main event.\"\n\nAmy laid her head back. \"Okay.\"\n\n\"Mmmm,\" she breathed as I tenderly touched near the side of her clit with the tip of my tongue. I ran fingertips lightly all over her, gauging her reactions before trying more. Gradually I increased the tempo and pressure using only fingers, then when her hips started moving and she groaned, I moved in to taste her properly.\n\nAmy grabbed my head with one hand to guide my face where she needed me. Her hips began rising steadily as I pleasured her with mouth, fingers and tongue.\n\nWhen I glanced up from between her thighs, Amy's head was thrown back and to the side, her mouth open, eyes closed, and eyebrows raised. Kate lay beside her, watching her every reaction intently while holding her hand.\n\n\"Ooooo,\" she crooned when I introduced two fingers into her then curled them seeking her g-spot. Carefully, I worked her higher and when she got close, backed off to let her calm, and started working her towards orgasm again.\n\nWhen she was ready, I took her sensitive nub between my lips and sucked gently in the way I knew drove her wild while still working her inside with my fingers. Before long, I heard her telltale panting as her hips worked into my face then she clamped my head between her legs, stiffened and came with crashing intensity.\n\nShe idly stroked my head as her pussy clasped and released inside. I avoided stimulating her more as her orgasm blossomed through her.\n\nWhen she could open her eyes, she looked down.\n\n\"Okay,\" she panted. \"That was fun. I almost forgot how good that is. Not sure I can take three more of those, though.\"\n\nGrinning, I moved up. Amy guided me onto her, spreading her legs. My cock, already harder than it had ever been, found her opening without help. When her heat and slickness enveloped the head, I pushed just inside.\n\nWe locked eyes. Amy put a hand on my ass and urged me deeper into her. She felt impossibly warm as her passage yielded, accepting me into her. Half-way in, I withdrew then pushed in again, savoring the exquisite sensations, until Amy had me balls-deep inside her.\n\nWe lay connected, not moving but looking into each other's eyes.\n\nI glanced at Kate. She was breathing fast, excited.\n\nShe said, \"Amy, my husband wants to knock you up now. Is that okay?\"\n\nAmy's eyes widened. She wriggled, stirring my cock inside her.\n\n\"More than okay. This is a dream come true.\"\n\n\"Even though I didn't get abducted by aliens?\" Kate said, teasing.\n\n\"Oh,\" Amy said, \"This is better. I just never thought it could be possible. You know -- doing this together? I can't imagine doing this without you, Kate.\"\n\nKate squeezed her hand then kissed Amy's cheek.\n\nTo me, she said, \"Fuck her. Breed her.\"\n\nWe started slow, with me easing in and out of her while we kissed. Every ridge, every grasping contour of her velvety pussy causing an explosion of sensations. Amy pushed back and shimmied her hips in time with each stroke, getting wetter and wetter as she once again got used to being deeply fucked after so many weeks of denial.\n\nWe looked into each other's eyes as we mated, truly mated, but soon the sensations and emotions became too much. Amy's eyes began to glaze over and her mouth hung open, issuing little sighs and grunts as I took her more urgently.\n\nSoon we were slamming together wildly, crying out, groaning, craving release, aching for that impossible goal: to merge and become one. Our overheated bodies became moist with sweat as primal urges consumed us both.\n\nThe carnal side of me reveled knowing I was making Amy mine, claiming her forever. My human side glowed with love and deep joy to be giving Amy what she needed, what she craved.\n\nAmy cried out suddenly and went rigid, orgasming powerfully before giving any of her usual signs. I wanted to slow to make our coupling last until she could come once more, but the sensations were too much. I lost control and jamming her hard into the mattress, began filling Amy's fertile body for a second time that day.\n\nHer orgasm seemed to go on and on as did my own. We clung to each other in rapture until finally we calmed enough to look at each other again.\n\nAmy's lidded eyes were filled with adoration and lust. She gave me a loopy, satisfied smile, wriggling to feel the massive amount of come sloshing within her.\n\nKate kissed Amy's cheek and stroked her hair, then kissed me as well. Her flushed face and the look in her eyes told me she was ready to be next."
    ],
    "authorname": "SyleusSnow",
    "tags": [
        "adultery",
        "older man",
        "romance",
        "romantic",
        "voyeur",
        "younger woman",
        "impregnation",
        "20-year-old",
        "reluctance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/on-the-side-ch-03"
}
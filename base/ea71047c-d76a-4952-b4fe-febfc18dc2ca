{
    "title": "Scout's Oath",
    "pages": [
        "==========================\n\nA Last Boy Scout standalone short story.\n\nThis is an entry in the NUDE DAY STORY CONTEST 2015. Nothing earth-shattering, just a playful little story, with a couple of characters from my series The Last Boy Scout, and new friends. I hope you enjoy it. \n\n==========================\n\nJeannie was mortified.\n\nShe wanted desperately to be a member of Rho Iota Epsilon; her mother would be devastated if she wasn't. She'd endured the normal hazing, the cold showers taken while racing against the other pledges to repeat the Greek alphabet, cleaning the toilets with her toothbrush, the yelling and name calling, being woken up at night, even the embarrassing skits.\n\nBut this was too much. \n\nShe knew she shouldn't delay, that it wasn't going to get much better. There were only three people on the sidewalk in front of the building. She braced herself to make a run for it, taking one last look from her shelter behind the shrubs. A group of half-a-dozen frat brothers poured out of the entrance across the way, and she huddled down, praying they wouldn't look her way. With every minute that passed, she knew it would only get worse, as more and more students started heading to their early morning classes. Jeannie kicked herself for hesitating. \n\nShe shut her eyes tightly, fighting the tears. One lousy mistake. That's all it had taken, and now the pledge mistress had it out for her. She knew she should quit and just walk away, but she didn't want to give the bitch the pleasure. And her mother would never forgive her.\n\n\"What the hell's going on?\"\n\nShe opened her eyes in shock to see a guy standing just a couple of feet away, looking her up and down. She blushed from head to toe, and he couldn't miss the fact, since the only thing she was wearing was her sandals. That, and a clipboard in one hand, a pencil tied to a string around her wrist in the other.\n\nJeannie hunched over, trying to cover up. \"I can't say.\"\n\n\"Pledge?\"\n\nShe nodded weakly.\n\nHe stepped closer and she trembled. Then he turned effectively blocking the view of her from quad. \"You don't have to do this, you know? This is way out of line, and dangerous. They could get kicked off campus and shut down for pulling this kind of crap.\"\n\n\"It's not that simple.\" \n\n\"How long do you have to stay out here?\" he asked.\n\n\"I ... I have to walk the quad circuit.\"\n\n\"Bullshit!\" he snapped. \"No fucking way.\"\n\n\"Please, don't interfere. I have to.\" Jeannie was on the verge of crying again. She'd been watching for fifteen minutes, praying for a lull in the traffic, so she could sprint around the perimeter. It was only a couple of hundred yards. Then the horror would be almost over.\n\nThe guy shook his head, and started removing his shirt. \n\n\"I can't. I can't wear anything.\"\n\nHe ignored her, laying the shirt over the bush beside him, then started taking off his shoes. She watched him in terror as he opened his pants.\n\n\"No. No way,\" she hissed. \"Don't.\"\n\n\"Calm down,\" he said, folding his jeans in half and putting them beside his shirt. Then he removed his boxers and he was as naked as her.\n\n\"What are you doing?\" \n\nHe smiled and extended his hand. \"C'mon. Let's get this over with.\"\n\nShe placed her hand in his, and felt the small squeeze. She resisted his pull, but he was relentless.\n\n\"Stand tall. Proud. Don't let the bastards get to you,\" he said. He pulled and she stepped out of her shelter, and onto the sidewalk. She bowed her head, staring at the ground in front of her.\n\n\"I'm Alex.\"\n\nShe allowed the stranger to pull her along, and she kept pace, with short mincing steps. \"Jeannie.\"\n\n\"Dude! What the fuck? And who's the babe?\" Jeannie glanced up to see two guys walking toward them. \n\nPlease, God. Don't let them ask about the clipboard. Please.\n\n\"This is Jeannie,\" her partner in nudity said. \"We're celebrating National Nude Day.\"\n\nThe guys stopped just a few feet away, and she looked up to see them grinning. \"Nude Day? For real? That's righteous,\" the one on the left said.\n\nAlex put his hand around Jeannie's waist, and tugged her along. She was in shock, but followed docilely.\n\n\"Yeah. You guys should get with it. Or are you afraid to let the world see what you got?\" Alex said.\n\n\"Hell yeah! I'm in.\" The second guy was taking off his shirt, when Jeannie passed them. \"She's a keeper,\" one of them added. \n\n\"Stand straight,\" Alex whispered. \"Proud. You know your sisters are watching.\" He reached over and took the clipboard from her hand. \"What's with\u2014\"\n\n\"Stop!\" she hissed. \"Please don't ask. Please.\"\n\nHe nodded, and moved his arm from around her waist up across her shoulders. \"Dicks at one o'clock,\" he said, sotto voce.\n\nDKE's. Jesus. That was the last thing she needed. \n\nThree guys walked toward them, laughing. \"Best walk-of-shame ever,\" one of them said.\n\nJeannie felt the tips of her ears burning. She felt his breath against the side of her face. \"Ignore them,\" he whispered.\n\nAs they got closer, they started to spread out, leering at her. \n\n\"Figured the Dicks would be too lame to go along,\" Alex said, a sneer in his voice. \"Cowards.\"\n\n\"Fuck you Hamilton,\" the middle one said. \"We ain't 'fraid of shit. Not some pussy Sig.\"\n\n\"Go along with what?\" the one on the left said.\n\n\"Nude Day. Flaunt it if you got it. I figured you had nothin' to show.\"\n\n\"Bullshit,\" the one on the right said. \"Nude Day ain't till July.\"\n\nAlex slid his arm around Jeannie's waist again, pulling her along, trying to stem her trembling. \"That's National Nude Day, dickless. Today's International Nude Day. But I just bet you're looking for any excuse not to strip down and show your poor excuse for a pecker.\"\n\n\"You're full of crap,\" middle guy said.\n\nTwo of the Deltas had stopped to listen in on the conversation. Jeannie thought she would die. They were drawing a crowd. Everything she was afraid of.\n\nAlex didn't seem to care. \"Of course I am. And you three are living proof why the Dicks are the most laughed at frat on campus. The one day you can let it all hang free, and you're hiding behind your Dockers and tighty-whiteys.\" He nodded toward the girls. \"Bet they have more balls than you.\" He grinned at the new audience. \"It's Nude Day. I hope I'm not offending you ladies.\"\n\nThey giggled, and looked him over. \"Not in the least,\" the shorter said.\n\n\"Ignore the cowards, they've got nothing to show,\" Alex said with a nod toward the three DKEs, and a wink at the girls.\n\n\"Fuck off, Hamilton, I got just as much as you.\"\n\n\"Sure you do,\" Alex laughed, as he tugged Jeannie along picking up the pace. \n\n\"Is it really Nude Day?\" the taller of the Deltas called after him.\n\n\"All day long.\" He glanced backward, and Jeannie turned with him. The Delta's followed their gaze toward the naked asses of two guys who were almost to the greenway, laughing it up. They'd even picked up another nudie.\n\nJeannie turned back around and struggled to keep up the quick pace that Alex was setting.\n\n\"Are they doing it?\" he whispered.\n\nShe looked back and was shocked to see the guys starting to undress, and struggled to suppress her laughter. She couldn't believe that one of the girls was stripping down, while the other argued with her. \"How do you do that?\" she said, putting her arm around her partner's waist.\n\n\"Do what?\"\n\n\"Walk around like it's no big deal, naked. Like you own the world. Make it sound like they're the idiots for being dressed.\"\n\nHe shrugged. \"I don't judge myself by how others see me, and I've got nothing to be ashamed of.\"\n\nThey had already covered half the distance around the quad, when Lisa, her best friend and fellow pledge came running across the quad, naked. \n\n\"Lisa!\" Jeannie gasped.\n\n\"It's ridiculous that you have to do this. They're fighting like crazy in the house. The bitch is getting an earful.\" Lisa looked up at Alex. \"Hi, I'm Lisa.\"\n\n\"Alex,\" he replied with a smile, sticking out his hand. She shook it briefly, grinning before falling in on the other side of her friend.\n\nAlex gave Jeannie a tug to get her moving again. \"So I guess you're celebrating Nude Day with us?\"\n\nLisa walked beside the pair, taking Jeannie's hand in hers, grinning. Lisa had no issue with walking around naked. It was her favorite outfit. She'd do it all the time, if she could get away with it. \"July 14th.\"\n\n\"July what?\" Jeannie asked.\n\n\"Nude Day is July 14th. Not October.\" Lisa grinned, \"It's a big day back home.\" \n\nAlex laughed. \"I guess you caught me. I figure it's close enough for our purposes.\"\n\nA few more students were exiting the fraternity and sorority houses. There wasn't much foot traffic at 7:30 in the morning. There weren't that many early classes. A group of Gammas jogged over as they reached the end of the buildings on the west side of the quad.\n\n\"Hey Alex, looking good,\" the tall brunette in the front laughed.\n\n\"Heather,\" Alex nodded, smiling. \"Gonna join us for Nude Day?\"\n\nThe new girls fell in step as Alex kept walking, dragging Jeannie along at his side. \"For real? Is that what this is about? No shit?\" Heather asked.\n\nAlex waved her over, and she stepped in beside him, opposite Jeannie. \"No, I'm not gonna lie to you,\" he said softly, his words for her alone. \"We're caught up in a pledge thing.\"\n\nShe nodded. \"And the boy scout couldn't leave it alone.\"\n\nHe just grinned. \"Guilty. You know me too well.\"\n\nShe tugged on his arm, getting him to stop. \"How bad is it?\"\n\n\"Nothing, really. She just has to walk the quad in her birthday suit.\"\n\nHeather nodded. \"Need company?\"\n\n\"I think we'll be fine. I appreciate it though.\"\n\nHeather turned and stood in front of him, stopping him from going any further. She looked over at Jeannie. \"Rho house?\"\n\nJeannie nodded, slightly intimidated by the gorgeous brunette. \n\n\"Sandra, I bet. She's been bragging about torturing her pledges. She's a total bitch.\" \n\nLisa spoke up. \"She has it in for her. I'd a quit. Probably have to after this.\"\n\nHeather looked over at the three girls with her. \"Alright pledges, anyone who walks the quad naked with me is in. No more testing. Anyone up for it? No repercussions if you don't. It's a lot to ask.\"\n\n\"You don't have to\u2014\" Alex started, before Heather cut him off.\n\n\"You never have to; it doesn't stop you does it?\" She grinned at him as she pulled her shirt off, and unsnapped her bra.\n\nIt wasn't two more minutes until Alex and the bevy of beauties were continuing their walk, the latest girls wearing nothing but their backpacks, stuffed full of their books and the clothing they'd shed.\n\nJeannie was still in shock at how things were turning out. She'd been terrified. Now she stood tall, walking in the crisp morning air, naked as the truth she had to face. She didn't want to be a Rho Iota Epsilon. Not after this.\n\nHeather looked around Alex as they made the turn as the end of the frat quad, just before academic row. \"You're not a quitter, are you? You're not gonna give that bitch the satisfaction of breaking you.\"\n\n\"Not in this lifetime,\" Jeannie said.\n\n\"Good. If you change your mind about where you want to belong, look me up. We need girls like you. And Gammas stick together.\" She looked over at where three of her own pledges were walking naked. Heather looked over at Lisa. \"You too. Love that you didn't make her do it alone. Big respect for that.\"\n\nJust before the Rho house, Heather stopped. \"Get dressed,\" she announced to her pledges. Then she turned and gave Alex a big hug. \"Still the best.\"\n\nHe grinned squeezing her tightly and making her squeal when he lifted her off the ground. \"Love you, sweetie.\"\n\nShe held his head in her hands, and kissed him. \"My once and always hero.\" Another brief peck and she took off her backpack and started getting dressed, as if she didn't have a care in the world.\n\nJeannie watched, feeling a tug of jealousy she'd never expected. Then his arm was around her waist again, pulling her along. \"Almost done. You gonna explain the clipboard, part?\"\n\n\"Oh shit,\" Lisa gasped. Then she laughed, and ran the last few feet to the sorority house.\n\nJeannie sighed. She thought she'd get away with it. \"If anyone asks me about the clipboard, I have to ask them three questions.\"\n\n\"Are they that bad?\" Alex asked.\n\nShe took the clipboard from him, and readied her pencil. \"What's your favorite type of music?\"\n\n\"Hard rock,\" he answered instantly, without a thought.\n\nShe noted his answer on the paper. \"If you could have dinner with any four people who are no longer alive, who would you choose?\"\n\nAlex took a few seconds to think that one over, as more people started to wander through the quad, eyeing the odd naked couple doing a survey.\n\n\"Jesus, Buddha, DaVinci, and my grandfather.\"\n\nJeannie looked up at him in surprise. Not the answer she was expecting. She wished she could ask him more about that, but now wasn't the time. She wrote down his answers, and looked up at him. Her hand was trembling and she felt her eyes tearing up. \n\n\"Do you want to have sex with me?\"\n\nIt was only the last question that mattered. That was the hazing. \n\nAlex took the clipboard from her shaking hand, put his hand behind her neck, and pulled her forward against his body. He tilted her head back, brought his lips to hers, hesitating before they touched. He gazed into her eyes, as he completed that last half-inch, his mouth covering hers, his tongue brushing her lip. She heard the clipboard clatter against the ground, as his other arm pulled her tightly against him. \n\nJeannie sighed, kissing him back, feeling his hardness press against her. That hadn't been there earlier, while they were walking. Now it was a hefty presence, scaring her. She wasn't a quitter, but she didn't know if she could go through with it. Not that he wasn't interesting and handsome, but she didn't even know the guy. \n\nWhen he released her, she was shaking.\n\n\"No.\" Then his lips brushed her again, and she felt his erection brush against her belly.\n\nShe stared at him, her forehead furling in surprise.\n\n\"No?\"\n\n\"No, Jeannie. I don't want to have sex with you if that's going to force you to do something you're not ready for.\"\n\nShe absorbed the unexpected response. If he had said yes, she would have had to go through with it. That was the rule. Asking her to give the survey, while naked, to a random person was unfair. She knew the bitch had done it to make her quit. Even if she hadn't quit, the shame of giving up her virginity to a stranger would have been unbearable. Not following through was all the excuse the bitch needed to drop her.\n\nShe looked into his eyes, seeing the concern. \"You know.\"\n\nHe nodded, a hint of a smile turning up the side of her cheek. \"I don't know you, Jeannie. Not that I wouldn't love to get to know you. I'm not the kind of guy to take advantage of a girl in distress.\"\n\n\"But ... how?\"\n\nHe laughed. \"It's a legend around here. The sorority pledge with the clipboard. The guys have a similar thing, where the pledge has to ask questions. His pencil is on a string that goes into his pocket and it's tied to his balls. The sorority sisters all know about it, and they're supposed to take the pencil from him and tug on it. The DKEs still do it.\" He leaned over and kissed her softly. \"Usually the question from the pledge is 'Do you want a handjob' or at worst 'Do you want a blowjob.' Any frat brother seeing that clipboard in your hand would have been all over you. None are going to pass up a good thing, especially not one that looks like you. That's why I had to take it from you.\" His eyes turned hard. \"Your sorority sisters don't play nice. You could do better.\"\n\n\"My mother was president. She'll die if I don't become a Rho.\"\n\n\"I doubt that. I bet if you told her what they expected of you, you'd get a different response.\"\n\n\"You don't understand. It's all she's ever talked about, how wonderful it was, what a great group they were. Her best friends are still her sorority sisters from back then.\"\n\nAlex shook his head. \"Talk to her Jeannie. Don't do something you don't want to. Nothing's worth that.\" Then he smiled. \"I think Nude Day is over. Maybe you should go in.\" He looked down at her naked body. \"Damn, you're a pretty thing. Go, before I change my answer.\"\n\nJeannie looked around as more people were wandering the quad, giving her and Alex odd looks, and laughing. Fuck 'em, she thought.\n\nShe picked up her clipboard, and looked at the strange guy who'd come to her rescue. \"Do you want to take me out?\" she asked, smiling, her pencil poised over the paper. \n\n\"In a heart-beat. Nothing I'd like better.\"\n\nShe wrote on the paper, then tore off the bottom, and handed it to him. She stood on tiptoe and gave him a brief kiss. \"Call me, boy scout.\"\n\nThen she turned and ran inside the house, leaving Alex holding her phone number.\n\n* * * \n\nInside the sorority house, all the sisters and pledges were gathered. Most broke out in applause as she entered. Jeannie turned to Sandra, the pledge mistress, and thrust the clipboard at her.\n\nThe startled Sandra took it in her hand and started reading it as Jeannie pulled on her panties. \"So when are you going to fuck him?\" she sneered.\n\n\"I don't know. Maybe after a few dates, we'll see.\"\n\nThe twittering of the surrounding girls was interrupted by Sandra's outburst. \"No? He said no? Bullshit! You didn't ask him. We all saw that he was ready to do you on the front porch.\"\n\nJeannie adjusted her bra. \"I asked. He said no.\"\n\n\"No way!\"\n\nJeannie shrugged. \"Ask him yourself, if you don't believe me. His name is Alex.\"\n\nThe sorority president stepped forward, taking the clipboard from Sandra roughly. \"Alex Hamilton. We know. Shit, everyone on sorority row knows Alex.\" She turned and faced Sandra. \"You know he would say no.\"\n\nSandra scowled. \"It was supposed to be a random guy. I bet she had it set up with him. That was all staged.\"\n\nJeannie was dressed by the time Sandra was finished. \"I did everything you asked. More than I should have. Is there anything else?\"\n\nSandra started to speak, but was interrupted by the sorority president. \"No. That's it. You can go to class. Everyone back here and ready by seven. Tonight's the initiation ceremony.\"\n\n* * * \n\nJeannie knew that Alex was right. She made the call home, between classes. Her mother was shocked and appalled. She said she'd be making some calls. None of what her daughter had gone through should have happened. She was a legacy for god's sake! Not just a legacy, but a past president's daughter! Heads were going to roll!\n\nAt half-past six, Jeannie was donning the red robe she was required to wear during the initiation ceremony. At ten to seven, her big sister entered the room, blindfolded her, and took her by the hand.\n\n\"I'm sorry,\" she whispered. \"I tried to stop it. Sandra is out of control.\"\n\nJeannie didn't reply. All she could think was how the hell did she have that kind of control anyway?\n\nShe was lined up with her fellow pledges and the blindfold removed. The room was dark, the walls covered in dark cloth, candlelight the only illumination. She faced the sisters, and listened as various ones told their story, revealing past history, explaining the meaning of their symbol, the import of their motto. The pledges were regaled with the value of their membership, the promise of unwavering friendship, and their purpose and goals.\n\nThen the big sisters separated from the group, each standing behind her pledge. The president stood before the first of the pledges, the pledge mistress at her side.\n\n\"Is your pledge prepared for admittance, worthy of the honor, and exemplary of the goals and values we hold true?\" the president asked.\n\n\"She is,\" answered the big-sister.\n\n\"And has she passed her tests, and demonstrated the heart and soul we expect from a sister?\" the president said.\n\n\"She has,\" the pledge mistress answered. ",
        "\"Do you vow to uphold the values of the sisterhood, and if you do, recite the motto.\"\n\nThe pledge spoke, and the leader moved to the next one.\n\nJeannie was third from the last. When the president stood in front of her, she felt a calmness she didn't expect.\n\n\"Is your pledge prepared for admittance, worthy of the honor, and exemplary of the goals and values we hold true?\" the president asked, looking past Jeannie to the girl standing behind her.\n\n\"She is.\"\n\n\"And has she passed her tests, and demonstrated the heart and soul we expect from a sister?\"\n\nThe room was quiet, and you could hear the intake of breath as nothing was said. \n\nThe president turned and faced the pledge mistress, whose face was crimson. \"Has she passed her tests, and demonstrated the heart and soul we expect from a sister?\" \n\n\"She has,\" Sandra answered, as if it cost her soul to do so.\n\n\"Do you vow to uphold the values\u2014\"\n\n\"No fucking way I would uphold the values that bitch has,\" Jeannie said loudly, facing her nemesis. \"You couldn't pay me enough to be part of any organization that would allow her in it, or give her any power. You people are scum.\" Then she leaned forward and spit in her enemy's face. \"You're nothing but a piece of shit, you fat bitch!\"\n\nAmid the tumultuous cacophony following her denial, Jeannie took off her robe and threw it to the ground. Standing in her underwear, she removed her pledge pin and dropped it on top of the robe. Two of the girls were struggling to hold Sandra back, while Jeannie went to her friend Lisa. \n\n\"I'm going to join the Gammas. Want to come?\"\n\nLisa removed her robe, and wearing nothing but her panties and shoes, took Jeannie's arm in hers as they walked out of the room, ignoring the barbs at their back, mixed with apologies and even some applause.\n\n\"See ya, bitches!\" Lisa shouted behind her, as she shut the door behind her.\n\n* * *\n\nIt was an odd sight, two young women walking across the quad hand-in-hand, one in panties and a bra, the other wearing only panties. They walked up the steps of the sorority house, and opened the door.\n\n\"No visitors. We're closed tonight,\" one of the two men standing just inside the door said, blocking their way.\n\n\"Let them in.\"\n\nJeannie's eyes followed the voice and she smiled as she saw her savior from earlier in the day grinning back at her. \n\n\"You didn't call,\" she said.\n\n\"What? You want me to look desperate? I was going to wait until tomorrow.\" He walked over and took Jeannie by the arm, then held out his opposite arm to Lisa. \n\n\"What are you doing here?\" Jeannie asked.\n\n\"They're our little sisters. We stand guard during the ceremony,\" Alex explained. \"Heather's expecting you. We both thought you'd be earlier.\" \n\nLisa laughed. \"It was epic. We'll tell you about it later.\"\n\nAlex escorted them down the stairs, and stopped before a closed door. He reached up and took a pair of yellow robes off the wall, and wrapped them around each girl, snapping the front closed. \"Don't speak. Just go in and stand at the far right of the line of pledges.\" He leaned down and gave Lisa a quick kiss. \"I figured you were only about fifty-fifty. I'm proud of you.\"\n\nLisa beamed at the unexpected praise.\n\nThen he took Jeannie in his arms, and kissed her. \"By the way, I lied about question three.\"\n\nJeannie giggled. \"I know. Thanks.\"\n\n\"Go in after I leave. I'm not even supposed to be down here.\" Alex turned and jogged up the stairs.\n\n\"I can't believe we're doing this,\" Lisa said. \"After all the shit we went through, especially you.\"\n\n\"I know. Ready?\"\n\n* * *\n\nJeannie had heard the rumors of course. He'd been around. And around. \n\nShe had no desire to be just another notch on his headboard, and had expected the pressure to mount. Six dates, and the only part of her body he had access to was her breasts while covered. \n\nHe'd seen every inch of her and knew what he was missing out on.\n\nYet he was still patient, apparently content to do things at her pace. Not like the way he practically dragged her around the quad that day.\n\nAfter ten dates, she sent him away again, hard for her, no satisfaction, not even a hand job. She didn't mean to torture him, but she was torn. She wanted him, God, there was no doubt about that part. Every minute she spent with him only reinforced that. Late at night she breathed his name as she pleasured herself, chiding herself for being alone, when she was certain he'd be more than happy to take on the chore.\n\nNobody could be as decent as he seemed. No way. At least part of it had to be an act. Once he'd had her, would she see the real Alex Hamilton?\n\nShe had promised herself she'd loosen up this last date. Give in a little. Take her shirt off for him, ease that big thing out of his pants, and help him out. And at the last minute she'd chickened out. She was embarrassed to kiss him goodnight, and send him away like that. Then she wondered if it would be a problem, or if he'd find one of his old girlfriends to take care of it.\n\nEntering the sorority house, she found Heather seated, text book open, apparently studying. Heather looked up from her reading, and gave Jeannie an inquisitive look.\n\nJeannie she shook her head.\n\nShe didn't know what Heather's story was. She'd asked Derek, but he wouldn't talk. He would only admit they were close friends, and had an intimate relationship once, but that had been long ago.\n\nJeannie started to walk by, when Heather called out to her. \"Want to talk about it?\"\n\nJeannie didn't. She'd been talked to enough. Lisa for one was harping on her daily. She might be her best friend, but she was dreading facing her again. It was her body, damn it! \"What? I suppose you're gonna tell me what an idiot I'm being? How I'm going to lose him?\"\n\nHeather closed her book and set it to the side. \"No. There's no hurry. He'll wait until you're ready, years if he has to. He's done it before.\"\n\nHe'd done it before? Waited years? \"I want to. I ... I guess I'm scared.\"\n\nHeather nodded, then stood and put her arm around Jeannie's shoulders. \"Take your time. You'll know when you're ready. Hell, he will, and he'll stop you if you're not.\"\n\n\"What happened between you two?\" Jeannie asked. \"You seem like you'd be perfect together. Like prom king and queen.\"\n\nHeather sighed softly. \"There never was a two of us. I made sure of that. No, I had my chance and I fucked it up royally. And still, he was my boy scout, just like he was yours.\" Heather gazed into Jeannie's eyes. \"You need to understand that. He will always be that boy scout. Always come to the rescue where he thinks he's needed. He can't help himself. And the girls he rescues will be just like you are, like I was, infatuated and driven to reward him. Dying to know him. Understand that. Cause it's going to drive you crazy.\"\n\nJeannie sensed how serious Heather was. \"Are you trying to scare me off?\"\n\nHeather shook her head. \"No, sweetie. I'm trying to help you. I think you might be worthy of him.\"\n\nAs Jeannie turned to head upstairs, Heather grabbed her arm, and Jeannie glimpsed a fierceness she'd never seen before. \n\n\"You deserve your chance,\" Heather said softly. \"But know this. If you hurt that man, there is nothing on this planet that will save you from the pain and destruction I will rain down on you, sister or not. Not your friends, not your influential family. Certainly not your boy scout.\"\n\nA short kiss on the cheek, and she was gone, leaving Jeannie more confused than ever.\n\n* * *\n\nJeannie took his hand, and led him into the room she shared. The room that for tonight was hers only.\n\nAlex closed the door behind him, then took her in his arms. \"Damn, you drive me crazy,\" he whispered into her ear, as he nuzzled her neck.\n\nShe giggled and squirmed out of his arms, darting over to the desk before dragging him to the middle of the room. She gave him a little push in the chest. \"Sit.\"\n\nAlex sat back on the bed, a grin on his face. Jeannie was impetuous and playful. He never knew what to expect from her. They'd been dating over a month, and it was the happiest he'd been in a while. \n\nJeannie pulled out a clipboard. \"Question one. How many dates have we been on?\" she asked.\n\n\"Eleven,\" he answered. \"If you consider last weekend one long date.\"\n\nShe nodded, writing down the answer.\n\n\"Question two. Who is the biggest bitch on sorority row?\"\n\nAlex's grin grew bigger, if that was possible. \"I don't know, now that Sandra is no longer a member of Rho house and has been kicked off of the quad.\"\n\nJeannie smiled. \"I'll accept that answer.\"\n\nShe put down the clipboard on the bed beside him, and started removing her clothing. It was nothing he hadn't seen before, but the setting made all the difference. He was achingly hard before she was finished.\n\nWhen she was naked before him, she picked up the clipboard and pencil. \"Question three. Do you want to have sex with me?\"\n\nShe was acting calm, in control, but Alex knew her by now. He could sense her anxiousness. The quiver in her voice and her trembling fingers gave her away. But he wasn't going to lie to her again.\n\nAlex stood and lowered his pants.\n\nIt wasn't the answer she was expecting, but she smiled. \"Mmm. That looks like a big yes.\"\n\nAlex took the clipboard out of her hands, and pulled her close, stealing a quick kiss before laying her on the bed. For all her playfulness, her nervousness exuded from her in waves. This was a very big deal for her, as it should be. The boy scout in him leaped to the fore. He had a responsibility, to make this right.\n\nHe centered her on the bed, and hovered above her, looking down into her pretty face. There was no joking or teasing on his part, not now.\n\nShe looked up at him with those big, trusting eyes, her hand reaching out to touch his cheek. Alex had seen that look before, and he hoped to prove himself worthy once again.\n\nHis lips started on hers, but didn't stay long. Theirs was a slow, relentless journey down her body, pausing in strategic areas, her neck, her hard nipples, her ticklish belly button, the tender flesh beneath her hip bone, before making a last stop at their final destination.\n\nHe felt the tenseness of the muscles in her thighs slowly melt away, as he settled in for the duration.\n\nHe teased her, his warm breath cascading across her flesh, before his lips and tongue worshipped her, laving her sensitive skin, laying claim to her.\n\nAt first she was frustrated; it had taken so much of her courage to finally accept him as her first. She needed it now. She wanted it over and done with, before she chickened out. \n\nWhen he spread her legs, she tensed up, ready for him to make his move, to make a woman out of her. She didn't need any foreplay; she'd had four solid weeks of it.\n\nSlowly the frustration gave way to relaxation and appreciation. Her resolve turned to eagerness. \n\nHe worked her gently, carefully, sensitive to the swelling of her flesh, and how her body responded. He needed her ready for him, both mentally and physically. He reacted to her movements, her breathy sighs and moans, the way her muscles twitched below the flesh.\n\nHe briefly wondered how any man could deny himself this pleasure. The opportunity to completely devote yourself to another's satisfaction, to do everything in your power to please them, and to bask in their appreciation after.\n\nAlex could have spent hours between her legs, taking her to the heights over and over again, but that was for another time. He needed her eager and ready. Slowly, he brought her to the cusp of her orgasm, and eased back, letting her need build.\n\nHis tongue was a demon, darting, teasing, tasting, pleasing, punishing. Jeannie gasped each time he brushed against her swollen clit, never giving it the attention it deserved, no more than a fleeting touch. She reached for his head to direct him, and he grasped her wrists, holding them firmly. Her hips hunched upward, seeking more. She cried out for the first time, when his pursed lips settled over her pearl, sucking, while his tongue flicked back and forth across it.\n\nAlex was careful to deny her release, listening to her frustrated moan as he pulled away, blowing his hot breath across her moist flesh.\n\nHis early tentative touches had determined there was no hymen to deal with. Not that he expected any, not at 18 years old. His fingers opened her, readied her for more, ensured her juices were plentiful. He didn't push his finger in and out of her, as if the tiny artificial member was supposed to bring her satisfaction. He eased two into her, separating them, pulling to the sides, opening her enough for a third which brought forth a low guttural groan.\n\nThe pitch of her moans changed, the trembling in her limbs heightened. Once more he backed off.\n\n\"Please, Alex.\"\n\nAgain, he started in, fingers filling her, opening her, his mouth and tongue pursuing her pleasure, teasing and tantalizing while simultaneously denying. Her legs were twitching, opening and closing. This time when she reached for his head, he didn't fight her off, but he didn't yield to her obvious desire. \n\nShe was growling in frustration, seeking out more contact, yearning for her release. He heard her tentative plea grow stronger, more adamant.\n\n\"Fuck me, Alex,\" she groaned. \"Please!\"\n\nHe was afraid he'd waited too long. He could see she was on the verge of coming, and he jerked back, ceasing all contact, grabbing her wrist when her hands dove down to finish what he'd started. She was writhing underneath him, while he knelt between her legs, holding them apart.\n\nAlex placed her hands at her side. \"Don't move a muscle,\" he told her.\n\nShe whimpered, and looked down to see him tearing open a condom, and carefully rolling it down his cock. His large cock. Very large. She was nervous again, wondering if it would fit, and how much it would hurt.\n\nPrepared, Alex stretched out above her, kissing her beautiful face, tasting her teasing lips. \"Soon, my Jeannie.\"\n\nBack down her body he traveled, licking and kissing his way, a more direct journey this time, settling in over her pussy with little teasing, going to work to bring her to the edge.\n\nIt only took a couple of minutes after the eternity of teasing he'd subjected her too. When he heard the begging, the moaning pleas, the involuntary twitching, he knew it was time.\n\nAlex knelt upright, and brushed his cock against her clit, pushing it around, slapping his cock down against it, until she gasped and pushed back. Back and forth he rubbed across it, waiting, torturing himself, for her sake. \n\n\"Oh, god,\" she moaned. \"I'm gonna ...\"\n\nHe moved the head down only an inch or so, and pushed.\n\nShe cried out as he entered her, her legs kicking out, trembling. He forged ahead, driving into her deeply, until he was balls deep, his pubic bone pressing against her clit. He dropped down onto her body, grasping her head, kissing her deeply, while he ground against her.\n\nThe orgasm hit her like a tsunami, washing over her, erasing everything but the sensation of coming for him, filled with his cock, waves of pleasure beating against her. He whispered words of adoration in her ear, tiny little pushes driving his cock as deeply as possible, subjecting her engorged clit to the pressure from his pelvis.\n\nShe screamed as another wave engulfed her, gasping, fearful. She couldn't breathe, couldn't think. Her heart was racing so hard she was afraid it would stop. Her arms encircled his torso, her hands grabbing, clawing, searching for a hold.\n\nHe was merciless, shifting his legs, pounding his cock into her, grinding at the end of each stroke, holding her down, ignoring the pain from her claws, watching her carefully. Her eyes burst open, unfocused, her breath shallow, gasping for air. He watched her eyes roll back in her head, and he finished her hard, driving his cock into her fast and hard, feeling her body respond again. This time he didn't stop, she needed to feel his finish, to know what she did to him.\n\nHe hunched over her, one arm behind her neck, grasping her shoulder, holding her in place while he fucked her as hard and fast as he possibly could. Guttural grunts escaped his lips, deep groans, a desperate growl. He cried out her name, slamming into her, erupting painfully, thrusting over and over until the spasms stopped.\n\nAlex shifted his legs before they cramped, loosening his death grip on her, settling in between her legs, nudging into her. He brushed her hair back, smiling, gazing into her eyes, until she returned his smile. His lips caressed hers.\n\n\"Damn, girl,\" he chuckled. \"You are amazing. You're sure that was your first time?\"\n\nShe grinned, and pounded his shoulder with her tiny fist. \"You couldn't tell?\"\n\nHis reply was a long slow kiss. \"Sorry, if I got carried away. I couldn't help myself. You are incredible.\"\n\nHer hands were rubbing his sides, touching him tentatively. \"You weren't bad either,\" she said. \n\nHis hard-on was fading, and he pulled out of her, before he risked losing the condom. \"Don't move.\"\n\nShe didn't exactly follow his orders. She turned on her side to watch him, gasping when she saw the red streaks on his back.\n\n\"Oh! I'm so sorry, Alex, your back ...\"\n\nHe had tied off the condom, and tossed it into the trash. \"It's nothing, really. Don't worry about it. Trust me, it was worth it. Hell if you'd torn out one of my ribs and beaten me with it, I'd offer you another for a second go.\"\n\nShe chuckled as she watched him reach into his jeans and pull out another condom. \"Do you always carry those around?\"\n\n\"Be prepared, that's my motto. I thought you'd have figured that out by now.\"\n\nHe placed the package nearby, while stretching out beside her, his hand caressing her lightly. \"How are you? Alright?\"\n\n\"Honestly, for a while there I thought I was going to die. My heart felt like it was beating out of my chest, and I couldn't catch by breath.\"\n\nAlex kissed her lips lightly. \"I wouldn't hurt you. You know that, right?\"\n\nShe nodded slowly. \"I know.\"\n\nHe kissed her deeper, his hand slipping between her legs, teasing her. \"I have to have you again.\"\n\nShe nodded again. \"Do you want me to ...?\" she looked down at his cock.\n\n\"I don't want you to do anything you're not comfortable with. Especially not tonight. Tonight is all about you.\"\n\n\"I want to.\" She pushed his shoulder, getting him to lie on his back. She sat up, and gingerly held his penis. It looked so different, small and wrinkly. \"Not so scary,\" she muttered, then looked up at him, embarrassed to be caught saying her thoughts out loud.\n\n\"He's yours now, you understand that, right? All yours, until you decide otherwise.\"\n\nA big smile broke out on her face. \"All mine?\"\n\n\"Absolutely.\"\n\nShe adjusted her position then stretched out sideways, leaning on his thigh, watching him. She could see how badly he wanted her to do something, not just lie there, holding his half-sized penis between two fingers.\n\n\"Tell me what you want me to do,\" she said.\n\n\"Kiss it?\" \n\nShe giggled, and gave it a quick tiny kiss on the head. She felt it twitch in her hands. \"That's all? Just a kiss?\"\n\nHe groaned, \"Please, Jeannie, don't tease me.\"\n\nShe laughed loudly, giving it a shake. \"Don't tease you? After what you did to me? You drove me crazy on purpose. I thought I was going to go nuts.\"\n\n\"Suck me, Jeannie. Get me hard so I can love you,\" he pleaded.\n\nShe moved closer, running her tongue along the wrinkled flesh, pressing her lips to the head, feeling it pulse between her fingers. \"I guess you deserve a little reward,\" she said. Then gazing up at him, holding his eyes with hers, she opened her mouth, and accepted him. All the way to the root. \n\nThe groan she extracted from him made her skin tingle. She tugged on his soft cock with her lips, moving slowly, pulling at the end, using her tongue to tease the head. She might be a virgin, but a popular girl remains a virgin throughout high-school by being able to deliver pleasures of a different sort.",
        "And Jeannie had been very popular.\n\nIt only took a minute or so for her to feel him thicken, then harden, until she couldn't readily take more than half his length. She shuddered when she felt his hand on her head, and braced herself to have that big cock shoved against the back of her throat. \n\nBut all he did was brush her hair back for a better view, and caress her cheek.\n\nShe looked into his eyes, and saw his need for her. It made her heart beat faster. He was as hard as he was going to get. She set up a steady rhythm, head bobbing smoothly, then extended one arm toward him, hand open. \n\nHe looked confused, until she pointed at the condom beside him, and opened her hand again. He rushed to place it in her hand, and groaned when she sat up, halting that delightful mouth from doing its chosen duty.\n\nShe smiled, and gave him a wink, tearing open the condom. She didn't have much experience with these, but she did her best. It didn't take her long to have him covered. \"How do you want me?\" she asked.\n\n\"Would you ride me for a while? Let me see you, watch you?\"\n\n\"You know you're going to have to teach me, and be patient with me.\" She straddled his hips, hesitating, perched above his hard cock.\n\n\"Just sit down on it, and do whatever feels good.\"\n\nThat sounded like a plan, and she soon had that full, stretched feeling, resting on his hips. She moved up and down a little, then scooted back and forth, loving the feeling of that. She placed her hands on his chest, moving her hips, wiggling them, rocking them. \n\nAlex watched her face, loving the way she was experimenting, learning what she liked. He'd grin when she found something good, and repeated it. She was obviously enjoying herself, testing, trying, and occasionally looking up at him before attempting something new. It was good to be playful, but this was only an interlude. He knew what she needed, even if she didn't.\n\nWhen he saw her tiring, he reached for her shoulders. \"Come, lie on top of me.\"\n\nJeannie stretched out over him, and her lips settled over his. When their mouths parted, he nibbled on her lower lip. \"Having fun?\"\n\nShe smiled big, and wiggled her hips, \"What do you think?\"\n\n\"I think you are amazing.\" He pulled her legs in, adjusting them, then lifted her hips. She followed along willingly. \"I need to fuck you a while,\" he whispered. He put one arm around her shoulders, holding her in place. The other hand grabbed a handful of her perfect ass, and held her steady, while he started driving his cock up into her. It only took a few seconds to find the right height and angle. He felt her teeth nibbling on his shoulder, and he nipped hers, making her whimper sweetly. He grabbed her ass in both hands and pounded her, non-stop, hard and steady, feeling her body respond. \n\nIt was tiring, keeping the fast pace going, but he maintained it until he heard the sweet sounds he was looking for. The time spent between her legs, orally pleasuring her, had taught him her responses. \n\nBut this wasn't how he would finish her. They needed more intimacy this time. To offset the demanding rough fucking he'd broken her in with. The first one was to get her body to respond, to instinctively accept being taken. This one was for her heart.\n\nHe clutched her tightly to his body, and turned with her, placing her beneath him. He kissed her face, easing in and out of her, long slow strokes, once again ending with that little grind. He shifted his hips, entering her from different angles, listening and feeling for her responses.\n\nWhen her body told him she was close, he rose up on his elbows, gazing into her pretty, trusting face. \"Do you feel what you do to me?\" he whispered.\n\nShe nodded, reaching up to touch his face.\n\n\"You were made for me,\" he said, kissing her softly, tenderly, his cock now moving slowly, in and out, steady. He groaned, and gave her a dozen or so fast hard strokes, then returned to the steady loving.\n\n\"You're mine now,\" he said. \"Just like I am yours. You. Are. Mine.\" He emphasized the last three words with hard, deep strokes, grinding into her at the end. Her little whimper and nod had him smiling.\n\n\"Say it, Jeannie. Tell me.\"\n\n\"I'm yours,\" she gasped, arching underneath him. He hadn't expected the words to set off her orgasm, she hadn't seemed that close, but he adapted, holding her tightly, pounding into her, extending her climax as she clung to him. \"Yours, yours,\" she moaned.\n\nWhen it passed, he eased up on her, continuing the slow steady loving. Kissing her face, brushing away the few tears, nibbling on her neck, her ears.\n\n\"Don't hurt me, Alex,\" she whispered.\n\n\"Never.\"\n\n* * *\n\nHours later, they had showered together, and returned to the bed. Jeannie was on her side, leaning against his prone body, her hand toying with his cock again. He felt her giggle.\n\n\"Never laugh when handling a man's pride and joy,\" he teased.\n\nShe kissed his chest. \"Please. Like you don't have the confidence to know exactly what this guy can do to a girl.\" She gave it a shake. \"It seems so cute and harmless, like this.\"\n\n\"The poor guy's worn out. You're insatiable, you know.\"\n\n\"Is he happy?\"\n\n\"Ecstatic.\"\n\n\"Are you?\" she asked, the words a little more tentative.\n\n\"Doubly so. I'm living a dream; don't wake me.\"\n\nShe climbed on top of him, kissing his face. Pressing her lips against his, she tried to convey all her feelings through that kiss.\n\n\"Thank you,\" she whispered. \"Thank you for making my first time perfect.\"\n\nHe smiled, and gave her butt cheeks a squeeze. \"It was purely selfish, you know.\"\n\n\"No, I don't know. There was nothing selfish in what you did. I was nervous and scared, and you made it wonderful.\"\n\n\"Wrong. It was totally selfish. I wanted to make sure that you loved sex, if at all possible. I was hoping that by making it good for you, you'd want to do it a lot more. With me.\"\n\nShe laughed, and kissed him again. \"I guess you succeeded.\" She sighed and lay down on his chest, feeling his breathing, enjoying the touch of his hands on her body.\n\n\"Tell me I'm not just another notch on your bedpost,\" she whispered.\n\nShe felt the big sigh, and immediately felt guilty for voicing her fear. \"Do you think that's who I am?\" he said.\n\n\"No, not really,\" she answered, kissing his warm flesh. \"It's just a little scary for me. You've been with a lot of women. I've heard the rumors. I know you could have anyone you wanted, probably. Heather is yours for the asking, the girl's in love with you. Why me?\"\n\n\"I don't know. Sure, you were cute, adorable really, trying to cover up that fabulous body, all upset. All I wanted to do was help you. Even when it was over, and you asked me if I wanted to have sex with you, I did, but I didn't think much of it. I wasn't infatuated or anything. You were just a pretty girl who needed help, and I was glad I was there to provide it.\"\n\n\"When did that change?\"\n\n\"Oh, that's easy. When you walked into the Gamma house, wearing only panties and a bra, and that stupid huge grin. That's when I knew you were something special. The following weeks only confirmed that feeling.\"\n\n\"Well, I'm glad they did.\"\n\n\"How about you?\" Alex asked.\n\n\"I knew I wanted you the moment you stripped naked and stuck out your hand for me to take. But the closer was when I asked you if you wanted to have sex with me. You kissed me, and I could feel how bad you wanted me, your big thing poking me in the belly. And you still said no. You lied to me; you wanted me bad. But you did it for me. I knew then that I wanted you to be my first. Within a week, I was convinced you would not only be my first, but you'd be my only, if I had anything to do with it.\"\n\nJeannie giggled and scrambled down the bed, sucked his cock into her mouth, and delighting in the groan she heard. \"Jeannie,\" he whispered.\n\nShe loved the sound of her name on his lips. She sucked and stroked, and was relentless, until several minutes later he was firm in her mouth. She sat up and grinned. \"Ready to be my fifth?\"\n\n====================\n\nThank you for reading my contest entry. I'd appreciate it if you voted, and/or left a comment to let me know what you think. And please read the other contest entries, there are some great ones this time around. - TTT "
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "virgin",
        "sorority pledge",
        "pledge prank",
        "naked walk",
        "nude day",
        "clipboard",
        "do you want to have sex?",
        "trickery"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/scouts-oath"
}
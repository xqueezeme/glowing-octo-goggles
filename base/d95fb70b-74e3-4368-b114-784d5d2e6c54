{
    "title": "Lilith's Emporium Pt. 07: The Proposal",
    "pages": [
        "Patrick was on his way to the shop to see Nessira like he usually did. He had just left his place after getting a visit from Lilith which was interesting, to say the least. He had asked Lilith, the Goddess of sex and Lust if he could marry her daughter. The very idea seemed crazy to him and even though he had her blessing he was extremely nervous about the whole thing.\n\nFrom the moment he met Nessira he had felt this very strange connection with her. Even though he really didn't see Jenny in her anymore which he learned was because she was slowly taking on the form of her original body which oddly enough was very similar which he had questions about. He was happy she looked more like she did in those visions he saw because he had long since moved past Jenny in the same way he hoped she had moved past Sebastian.\n\nHe pulled up to the shop like he always did but he was extremely nervous. He thought about not asking her tonight and just trying again another time but he knew it was what he wanted. Despite everything that had happened and everything she was he still wanted this, even with the possible dangers to come with it.\n\nAs he finally walked in he saw Nessira and Shadow having a conversation that seemed to be getting a little heated. He stayed back for a moment trying not to get in the middle of their discussion but he still heard everything.\n\n\"Mother you said this was about bringing people together, about finding love, this isn't right, they are trapped in there so Tinera could have her freedom!\"\n\n\"Calm down Shadow, they will be set free the moment I find someone to replace them.\"\n\n\"Mother this is wrong, you have to fix this!\"\n\n\"I can't, this is an ancient curse and I don't have the power to do it.\"\n\n\"Then put her back, this is her curse, not theirs!\"\n\n\"Shadow, I...\"\n\n\"You know I am right, this couple did not deserve this, and who knows what else Tinera is doing, I know you care about her but maybe she was cursed for a reason, please Mother, I can't stand the things I feel from this thing.\" She said dropping what looked like a DVD case on the counter. \"Please find a way to fix this, for me.\"\n\n\"Alright Shadow, I will let Tinera have her fun for a few more days, then she goes back, I owe her that much.\"\n\n\"Thank you, Mother,\" Shadow said walking over and giving her a hug for a moment. Nessira hugged her back before Shadow finally let go. \"Oh, hello Patrick.\" She said noticing him across the room.\n\n\"Hey Shadow, everything alright?\" Patrick asked finally coming closer.\n\n\"Yes, I'm sure it will be, please don't let it disturb your evening together.\" She said walking over and giving him a kiss on the cheek before retreating to the back room.\n\n\"What was that about?\" He asked Nessira.\n\n\"Something I did, that I need to fix.\" She said picking up the DVD case with a picture of a demon couple on it before placing it behind the counter. \"She has a bigger heart than I do, despite how much I try.\"\n\n\"Hey I happen to be an expert on your heart, and it is plenty big enough.\"\n\n\"Thanks, I think she is hiding something from me though.\"\n\n\"What do you mean?\"\n\n\"I don't know, just a feeling, the way she's been acting lately.\"\n\n\"Kids will be kids I suppose.\"\n\n\"I guess, despite how old she is though she isn't a kid.\"\n\n\"Hey, let's take your mind off of it, how about we go out tonight?\"\n\n\"To your place? Sure.\"\n\n\"No, I mean let's go out and do something, dinner, or a movie, or whatever, just come out with me.\"\n\n\"Are you feeling okay?\"\n\n\"I'm serious, let me take you somewhere special, somewhere romantic.\"\n\n\"You do realize you don't have to romance me to get me into bed right?\"\n\n\"Doesn't mean I don't want to make you feel special.\"\n\n\"Patrick, every moment you are alive and here in my arms, I feel special.\" She said before kissing him. \"But if you want, I can show you a place that is special to me?\"\n\n\"I would love to see it.\" He said still holding her in his arms closely. \n\nNessira placed her lips on his again tasting him. She wanted him so badly right then and there but she was willing to wait. She knew what he was to do trying to make her feel loved and special and it made her love him even more. In the back of her mind though she thought about what Shadow had said to her and it reminded her of all the horrible things she had done in her life.\n\nPatrick opened his eyes after feeling a cold breeze on his face. Somehow they were no longer in the shop anymore and were standing on a mountain somewhere. They weren't too high up but there was an amazing view of a valley lighted by the moon as he took it all in.\n\n\"Where are we?\" He asked looking back at her.\n\n\"This is where I went the first time I was old enough to use my wings.\"\n\n\"Really?\"\n\n\"I wanted to go and see the world around me, to see an incredible view but I was scared to fly too high so I came here just so I could see the world below me.\n\n\"Wow, it is beautiful here.\"\n\n\"I love how it has been untouched by man all this time, just nature for miles and miles.\"\n\n\"Interesting.\"\n\n\"What?\"\n\n\"Sorry, I am just imagining you as a young girl learning to fly.\"\n\n\"Long ago, before...\"\n\n\"Before what?\"\n\nShe was silent for a moment just staring out into the distance before she said: \"everything.\"\n\n\"Nessira, I love you, and you are not a monster, we all make mistakes.\"\n\n\"Thank you, I know you mean that, but it is what it is.\"\n\n\"Actually, there is something I want to ask you.\"\n\n\"What is it?\"\n\n\"I um, well it's um, I spoke to your mother and um...\"\n\n\"Oh God, what did she tell you?\"\n\n\"Nothing, well no, I mean she did tell me some things about you.\"\n\n\"Ugh, I will kill her,\" she said walking toward the edge of the cliff with her hands on her head. \"What did she tell you, did she tell you about the time I...\" She stopped when she turned around and suddenly saw Patrick in one knee holding up a small box with a red diamond ring inside. \"What the fuck?\"\n\n\"I don't know what your opinion is on marriage, and even if you don't want the whole ceremony or whatever, just know I give this to you as a promise that I will never leave your side, until the day I die,\" Patrick said as Nessira stood there silent in shock at what was happening right now.\n\nShe had a terrified look in her eyes as Patrick stayed there on his knees waiting for a response, for anything. Nessira stared at the ring frozen in what looked like fear as Patrick's stomach twisted in knots afraid of what he had done and suddenly feeling he made a mistake.\n\n\"What the fuck is wrong with you?\" She said finally breaking her silence.\n\n\"What?\"\n\n\"No no no, you are such an idiot, what is the matter with you?\"\n\n\"I um...\"\n\n\"You don't get it do you, what I am, what I've done, I am a monster Patrick, do you know what Shadow and I were fighting about? I released a demon who corrupted and trapped a married couple in a DVD to replace her in that prison, and that is only the tip of what I have done.\" She said getting angry.\n\n\"I have always know what you were, and if that's the case then what are we, where are we going, how does this end?\"\n\n\"Why don't you just move in with me, just come live in the shop.\"\n\n\"If that's what you want, then I will but what is the difference if there is a ring?\"\n\nHer eyes turned red and her wings sprouted from behind as her hands turned into claws. Her skin was still normal which but two horns sprouted from her head. He stared at the Succubus floating in front of him with a fiery look in her eyes. Most people would be terrified but he knew what she was.\n\n\"My own mother practically mind fucked you the first time you met her, I have killed hundreds of people, maybe thousands, I have corrupted and manipulated so many people, turning woman just to make them fuck their husbands to death. A man who I tried to make the woman he loved kill him, I also made him kill your ex-girlfriend just so I could steal her body for myself, every night you lay with me I imagine killing you, I imagine pulling your soul out through your cock just because it turns me on!\" She said landing on the ground as she walked towards him. \"You have no clue what you are asking of me, no clue who or what I really am, you are just a stupid human, just like Sebastian was, and look what happened to him!\"\n\n\"Well I'm not Sebastian, and you aren't Jenny, and I know who and what you are,\" he said standing up and getting up close to her. \"Your heart beats in my chest, you could have killed me the night we met but you didn't, you could have let me die before you put your heart in me, but you didn't, and every day I see you trying so hard to be a better person, how many people have found the love of their life because of you? How many people fell back in love with their own spouse because of you? these aren't the acts of a heartless monster, you took in a creature you knew nothing about and raised her as your own daughter, and the fact that she cares so much about other people, even if she cares more than you do, it is because of how you have raised her.\" He placed his hand on her cheek staring into those blood red eyes. Tears began to fall from them which he didn't know was possible with her in this form but he wiped them away. \"I know who and what you are, and I am still here, I just hope someday you will see yourself the way I see you.\"\n\n\"You are such a fool!\" She said staring back down at the ring.\n\n\"I am a fool, and I am scared out of my mind right now, not because of what you are, or what you've done, but because of what your answer could be. You brought me here, the place where you learned how to fly the first time, a moment where you were scared, so let's be scared together, let's take this leap, and learn to fly together.\" Nessira didn't say a word as she just looked down at the ground. He knew she was scared and he was too. He knew what his life with her could be like and how dangerous it could be but having her in his arms was worth any risk their life could throw at them. \"Take this leap, even if it's a mistake, make this mistake with me.\" He said as she remained silent.\n\nShe was silent for a while until she finally said: \"That is so fucking cheezy.\"\n\n\"I have plenty more where that came from.\"\n\nShe kept looking at the ring before she started to bawl her eyes out returning to her human form. She was sobbing uncontrollably falling apart in his arms as he held her tightly never seeing her like this before except for the time he was dying. They both fell to the ground as it was actually nice for him to see the human part of her this emotional.\n\n\"I will always be here to catch you, if you let me.\" He said.\n\nShe looked up at him for a moment before she finally said: \"Of course I will you fucking Idiot.\" \n\nAs shocked as he was to hear that he took the ring out and slid it on her finger. She was still inconsolable as he pulled her in kissing her again. She straddled him wrapping her arms around his neck as he held her in the air against him. Their lips never parted as their shared the most passionate kiss of their life while the cool night air blew against them. She finally removed her lips from his and just stared at him for a moment, her face still wet from the tears. He held her up in his arms smiling at her feeling a great weight lifted from his shoulders after being so frightened leading up to this night.\n\n\"I actually asked Lilith for permission, if that matters.\" He said breaking the silence.\n\n\"I might have to strangle her now, but what did she tell you about me?\"\n\n\"Just... just how you changed her life, the same way Shadow changed yours.\"\n\n\"I see, and the way you changed it too, but I am not that person anymore, I know she wants me to be, but I've changed so much since then.\"\n\n\"I know you have, but this is the version of you I love.\"\n\n\"Maybe it's time for all of us to let go of the past.\"\n\n\"All I care about now is my future with you.\"\n\n\"I love you so much, Patrick.\" She said with tears starting to stream from her eyes again. \"Now let's go home.\"\n\n\"You sure?\"\n\n\"Yes, because I want to fuck you harder than we have ever fucked before!\"\n\n\"You got it!\" He said as a portal suddenly opened beneath them and they fell onto his bed back at his place. \"Oh, you meant here?\"\n\n\"I don't want to wake up Shadow, because this is going to get loud!\"\n\nNessira pushed him down on the bed climbing on top of him quickly pulling at his belt even ripping his pants a little trying to pull them off. They were both so turned on neither one of them could contain themselves. Nessira's dress disappeared without him even seeing it happen but he was used to it at this point as he wrapped his arms around her and rolled her over laying on top of her.\n\nTheir lips met many times before he began to move his way down her stomach all the way to the slit between her legs. He suddenly remembered the night why met when he did this to her learning later it was one of the reasons she spared his life but he wasn't too concerned at the moment about all of that before he hurried his face between her legs.\n\n\"Holy Shit!\" She yelled out as Patrick's tongue danced along her sweet spots.\n\nShe grabbed his hair clenching it as he continued to pleasure in a way very few beings had been able to in the past. She arched her back as her eyes rolled into her head letting out little moans of approval as he did his work. \n\nPatrick loved making her moan like that. He always loved knowing he was able to make the Red Witch of Raven Hill scream out his name, even though he didn't know much about her during that period it still made him feel good about himself. He sucked on her clit before wiggling his tongue inside her as his hands slid along her legs grabbing her ass and pulling her even closer.\n\nShe reached back and grabbed his headboard as he lifted her pelvis up getting his tongue even deeper inside her as he grabbed her ass. Her legs were up on his shoulders as she felt like she was being manhandled by him which was something she didn't let happen often but this felt amazing and she didn't want it to stop.\n\n\"Oh my God, Patrick, Don't fucking stop!\" She yelled out as he worked even harder until she literally screamed at the top of her lungs before he felt her fluids rushing down his chin and chest.\n\nEven though she had cum he teased her a little more giving her a few more jolts of pleasure before gently placing her back down on the bed. Lifting his face up and whipping his mouth he saw her laying there covered with sweat and a satisfied look on her face which he always enjoyed seeing. She bit he flips still reeling from the sensation before she sat up and pulled him close kissing him for a moment.\n\n\"You're turn,\" she whispered to him before she waved her hand and the leftover clothes on him turned to ash and blew away.\n\nHe was standing on his knee's on the mattress as she bent down in front of him gently stroking his cock for a moment when she stopped. He looked down wondering what she was doing and noticed a strange look on her face.\n\n\"What's wrong?\" He asked confused.\n\nShe looked up at him before sitting back up and kissing him again before she said: \"Do you trust me?\"\n\n\"Of course I do, why?\"\n\n\"I need to try something, and it could be dangerous.\"\n\n\"Okay?\"\n\n\"I just want you to trust me, it's important if we want to go forward.\"\n\n\"Do what have to do then, I trust you.\"\n\nShe kissed him on more time with passion before she returned down to his throbbing member. She began to whisper something which made him a little curious but he just let her do her thing until he felt something strange. His cock burned a little and he remembered this feeling as he noticed a red glow around his member that looked like a condom suddenly appear before shattering leaving his cock bare.\n\n\"What was that?\" He asked.\n\n\"I removed the condom, you are now vulnerable to succubus feeding.\"\n\n\"Wait, what? Why?\"\n\n\"You do trust me right?\"\n\n\"I, yes of course.\"\n\n\"Then just relax.\" She said before she began to gently tease the tip of his cock with her tongue.\n\n\"Oh, Shit!\" He said as something seemed different but he wasn't sure what exactly.\n\nSex with Nessira was always amazing but this felt more raw, more intense which just seemed odd to him. Her tongue was like magic to the point he was shocked he was blowing a load in her mouth right now as he found it hard to keep his balance. She continued to tease him more and more before she wrapped her mouth around his cock and began to suck him off giving the greatest blow job he ever had. Her hand gently cradled his balls as she continued her work.\n\n\"Oh shit, oh fuck I... I can't hold... Oh, God!\" He said as she touched him just the right way making him blow his load into her mouth as she sucked every last drop from him making his whole body shudder at the sensation.\n\nOnce it was done he collapsed on the bed next to her as she crawled over and kissed him gently. Her hand reached down stroking his cock making sure it didn't soften as she was not done with him yet.\n\n\"How was that?\" She asked between kisses.\n\n\"How the... That was...\"\n\n\"Now I can use my seductive gifts on you.\"\n\n\"I didn't think it could get much better than it was.\"\n\n\"Well don't relax just yet, the real test is yet to cum.\" She said wording that way on purpose before she kissed him and straddled him letting his cock slide inside her. \"I love you.\" She said with a serious look in her eyes.\n\n\"I love you too, are you sure about this?\"\n\n\"Just trust me.\" She said before she began to move her hips milking his cock between her legs.\n\nPatrick was shocked it still felt as good as it did as she milked his cock. It felt amazing before he pulled himself up to her holding her as if he didn't he'd fly apart at the seems. Nessira gently pressed her lips to his as their hands felt each other. The sweat from there skin, the smoothness of it as the couldn't touch each other enough as the pleasure built between them. He could feel this growing sensation inside him ad he noticed a glow starting from his cock.\n\n\"What... What is that?\" He said enjoying the feeling.\n\n\"Your soul, it's getting ready to leave your body.\"\n\n\"What? What are you doing?\"\n\n\"Please just trust me.\" She said locking eyes with him as he had no choice but to hope she knew what she was doing.\n\nPatrick could feel his orgasm growing as he desperately tried to hold on partially out of fear but also to keep the pleasure going as long as possible. Nessira kissed him passionately as she took both his hands in hers.\n\n\"I will not let you go.\" She said as she moved her hips a little quicker as his cock got ready to erupt. \n\nPatrick was in a strange euphoric state as he felt the end coming. The pleasure was more intense than anything he had ever felt before and he was starting to understand what he had heard about being killed by a succubus even though he prayed this wasn't the end. His cock began to twitch a little as he started to yell out but she pulled his lips to hers stopping him as his cock blew inside her making his whole body shake at the orgasm that hit him like a train.\n\nThe whole thing felt very weird. He could actually feel his life force begin to flow out of him as the orgasm filled his whole being. His very essence was pleasure as he suddenly felt like he was flying but he wasn't alone. He could feel Nessira like she was flowing with him. It was strange but for a moment it felt like both of their souls were one wrapped together in a warm embrace that felt like home that he could enjoy for an eternity. He could sense both sides if her, the succubus and the human part of her, the dark parts and the light and it felt like a perfect balance that he always knew she had.\n\nHe stayed in this crazy euphoria until he felt himself being pulled away from her like he was falling until he landed on his bed back in his own body. He was confused and disoriented not sure what had happened but he looked up and saw Nessira still straddled on him struggling to catch her breath before she looked down at him and smiled.",
        "\"What the hell was that?\"\n\n\"I tasted you, I felt your soul inside me, it mixed with mine for a moment before returning you.\"\n\n\"How am I still alive?\"\n\n\"Because I am part of you, I have been experimenting for months trying to figure out if it was possible, and it worked!\"\n\n\"How sure were you?\"\n\n\"Sure enough,\" she said laying down on top of him. \"You were incredible, it was everything I imagined it would be.\"\n\n\"It was... I don't know how to describe it.\"\n\n\"I am sorry I tricked you.\"\n\n\"No, it was amazing, I feel, closer to you.\"\n\n\"And I you, I love you, Patrick, I've tasted your soul and you have tasted mine.\"\n\n\"So is this what sex is for us now?\"\n\n\"Oh yeah!\"\n\n\"Wow, I love you so fucking much Nessira!\"\n\nShe laid her head down on his chest as he wrapped his arms around her. It was such a crazy experience it was hard for him to wrap his head around it but suddenly there was a knock at the door. He looked at the clock and it was almost midnight so he was curious and also concerned. He grabbed his shorts and headed for the door.\n\n\"Hello?\" He said opening it up and seeing his neighbor Fred standing there.\n\n\"I am really sorry to be that neighbor but the noise you were making woke my wife and me up.\"\n\n\"Oh shit, I am so sorry Fred, I'll keep it down now.\"\n\n\"Actually it was my fault,\" Nessira said peaking around the corner of the bedroom door wrapped in a blanket. \"We just got engaged so we were celebrating.\" She continued saying before showing the ring off.\n\n\"Oh, Oh Wow,\" Fred said seeing the gorgeous redhead standing there. \"No worries at all, um congratulations.\" He added as he looked back at Patrick and mouthed the word \"Wow!\" Again before heading back to his apartment.\n\n\"Wow, well you have impressed my neighbor.\" He said closing the door behind him. \"So now what?\" He asked as they stood there.\n\n\"How about...\" She said with a smile before snapping her fingers.\n\nPatrick was a little confused before his cock suddenly and quickly got stiff sticking out of his boxer shorts as Nessira giggle looking at it.\n\n\"My neighbors are really going to hate us.\"\n\n\"Let them, you can just move in with me.\" She said pulling him back into bedroom shutting the door. "
    ],
    "authorname": "maestro84",
    "tags": [
        "succubus sex",
        "succubus",
        "succubus transformation",
        "absorb energy",
        "absorb soul",
        "blow job",
        "sucking",
        "eating out",
        "love"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/liliths-emporium-the-proposal"
}
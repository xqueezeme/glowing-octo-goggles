{
    "title": "Stray Cats Ch. 06",
    "pages": [
        "This is a continuation of a story that I first posted in 2015 on this site. It's still relevant, well most of it is. I hope you enjoy it. \n\nOh, as a reminder, you might consider going back to read the opening chapters as much of who these characters are is established there, But, as always, it's your choice. \n\nPlease leave a comment when you've finished, feedback is the lifeblood of a writer. \n\n--Dreamweaver594 \n\nOf course you can pick your family! \n\n=ONE= \n\n\"I feel like I've finally found my home.\" Wendy lifted her glass to meet Amanda's and the rest of the table followed. \n\n\"To family!\" They all shouted in unison and others around the restaurant applauded. \n\nApril downed the last of her wine and set her glass on the table. Her eyes sparkled as she smiled at Wendy. \"Thank you, for finding us such a beautiful home, little sister.\" Then she gestured to everyone. \"There will always be a place for all of you at our table.\" \n\nWendy smiled serenely, her eyes were glistening, and Kyle wrapped his arm around her shoulders and gave her a big hug. She mouthed the words \"thank you\" and kissed him on the cheek. \n\nRay leaned forward towards Rachel and Amanda. \"So when do you guys close on the house?\" \n\nAmanda jabbed her thumb towards Wendy and grinned. \"I don't know - she's the expert.\" \n\nWendy laughed and playfully swatted Amanda on her arm. \"Hopefully next month, if we're lucky. The offer was made and accepted, the paperwork signed and delivered. Now all that's left is to wait on the bank approval. Residential loans move at a snail's pace and commercial ones take even longer. This one's tricky because a corporation is buying the property and we have a few more hoops to jump through. But, it'll be fine. I know the loan officer, he assured me that the loan would pass with flying colors.\" \n\nSeveral waiters arrived with the main course and the table was quickly filled with laughter and idle conversation while everyone enjoyed the meal. \n\nAmanda dabbed her mouth with her napkin. \"Wendy, what are you and Kyle up to next week?\" \n\n\"Kyle promised me a trip to the Poconos. He has Friday off so we're leaving Thursday afternoon and driving up.\" \n\nRachel turned to Wendy with a quizzical expression. \"Where?\" \n\nKyle set his fork down and took a sip from a glass of water. \"The Pocono mountains, they're in upstate Pennsylvania. It's where my folks live.\" \n\nAmanda snickered. \"Oooh, going to meet the parents, huh? Things are getting serious.\" Her voice had a lyrical quality to add to her teasing. \n\nWendy and Kyle both blushed. Kim nudged Amanda's shoulder. \"Oh don't tease them, it's a big step, Amanda. I haven't met Ray's folks yet but we're supposed to go to their place for Thanksgiving. I'm a nervous wreck.\" \n\n\"Don't be sweetheart,\" Ray whispered, softly. \"They are going to love you.\" \n\nKyle nodded with a knowing smile. \"I just hope Wendy isn't disappointed, my family can be a lot to handle sometimes. Eccentric is a word that comes to mind often.\" \n\nAmanda giggled. \"Eccentric is a good thing, it keeps life interesting.\" \n\nApril leaned over and kissed Amanda on the cheek. \"That it does!\" Amanda blushed and kissed her back, and then the waiters arrived with dessert. \n\nLater that evening Rachel and April, stood at the foot of the stairs that led to their apartments three flights up. April sighed. \"God I hate having to climb these stairs in heels.\" \n\nRachel wrapped her arm around her shoulders and gave her a hug. \"No more than me, babe.\" \n\nAmanda turned from unlocking her apartment door. \"You know, I think it's my turn to host the late night party. Why don't you girls stay with me tonight?\" \n\nRachel smiled. \"That sounds interesting, a slumber party?\" \n\nApril nodded. \"Can we bring anything?\" \n\nAmanda stood in her doorway and wore a mischievous grin. She walked over to the two girls standing near the stairs and whispered. \"Just your luscious bodies cause I'm all worked up and I want to play.\" \n\nApril slipped off her heels and started up the stairs. She glanced back at Rachel with a grin. \"Race ya.\" \n\nThey scampered up the three flights trying not to giggle. A minute or two later, and slightly winded, they opened their apartments and dashed in to change. \n\nTen minutes after that, they both emerged onto the third floor landing wrapped in warm fuzzy robes and wearing slippers. Rachel pulled April into a hug. \"God I love you, babe. Meeting you was the luckiest day of my life.\" She pressed her lips against April's and she tasted cherry-flavored lipstick as she slipped her tongue between April's lips. \"Mmm, you taste good.\" \n\n\"So do you.\" April leaned back from her embrace. \"But we had better head back down before Amanda accuses us of starting without her.\" April could feel Rachel's cock press against her thigh through the shimmer of her satin robe. \n\nRachel pulled her close and moaned into her ear. \"I'm so going to have my way with you tonight, my love. All I thought about during dinner tonight was how much I wanted to be in bed with you and my little munchkin.\" \n\nApril giggled. \"Me too, and Amanda kept squeezing my thigh. There must have been something in the water.\" \n\nRachel stepped away and offered her hand to April. They both walked back down the three flights of stairs silently in slippers, except for the occasion creak of steps in an old wooden house. A couple of minutes later they knocked softly on Amanda's door then slowly opened it. \n\nInside, the room was mostly dark, except for a dozen or so flickering candles sending dancing shadows across the room. Standing near her bedroom door with her hands covering her crotch, Amanda posed coquettishly wearing a sheer pink baby doll neglig\u00e9e. Her feet were adorned with five-inch pink stilettos heels each fastened with a tiny ankle strap. Her hair was pulled up and curls cascaded around her face. She'd added sultry false eyelashes and some dark, sexy makeup. The total ensemble made her look dangerously sexy. \n\nApril's mouth dropped open. \"My God girl, you look hot.\" \n\nRachel stared into her eyes as she shut Amanda's door. \"Totally. I don't ever remember seeing you look this hot, Amanda.\" \n\n\"That's because tonight I have a special surprise for both of you.\" Amanda removed her hands from her crotch and a large pink strap-on dildo dropped into view. \"Tonight is my turn to top and I'm going to have my way with both of you.\" She leaned against her bedroom door and it opened behind her as she stepped back. \n\nInside, her bedroom was filled with more candlelight. The window shades were drawn closed and the bed covers were pulled off. Amanda sashayed across the room; her long pink phallus bobbed and weaved with every step, her butt cheeks shimmered as she glided across the floor. She turned and looked at both girls standing in the doorway. Then she lifted her hands and gestured for both of them to join her. \n\nAmanda knelt down on her bed as Rachel and April approached. Then they removed their robes and slippers. They held each other's hands as they walked towards Amanda and stood at the foot of her bed, now wearing only their neglig\u00e9es. Their eyes were gleaming with passion. \n\nAmanda pulled gently on the string that held her skimpy nightgown in place. It quickly released and the sheer fabric floated off her body. With a simple gesture, the silky fabric floated across her arm then spilled off the bed and onto the floor. She raised her arms and both girls fell into her embrace. \"I love you two so much,\" was all she could say before she was smothered in their kisses. \n\nRachel sat up and pulled on the drawstring of her negligee. She leaned over the edge of the bed and let it fall on top of Amanda's. She reached over to the nightstand and opened a drawer. She pulled out a bottle of lubricant and a condom as April pushed Amanda down on her back and began to lick and suck on her nipples. \n\nAmanda cooed under the delicate touch of April's tongue and she squirmed beneath April's caress of her clitoris beneath the harness of her strap on. She watched Rachel open the bottle of lubricant and slip the condom over her silicone cock. \n\nRachel rubbed a thick coat of lube on Amanda's strap-on cock with a devilish gleam in her eyes. She lifted her leg and straddled the dildo, slowly impaling her body as April reached over to switch on the vibrating phallus. \n\nWatching Rachel slowly engulf Amanda's cock, April untied her neglig\u00e9e and let it fall off the bed as well. Then she pulled her stiff cock out of the confines of her panties. As she did so, Amanda's hand quickly began to stroke her penis, gripping it tightly while Rachel continued to move slowly up and down Amanda's silicone shaft. \n\nThe vibrations sent shivers up and down Rachel's spine as she felt the dildo fill her. She leaned forward and Amanda's hungry mouth sought her nipples. Rachel murmured her delight. \"My God you fill me up my sweet sister, I could do this all night.\" \n\n\"Mmm, that was my plan, Sis, all night long.\" Amanda replied between kisses. \"I've been waiting to do this forever.\" \n\nApril looked down at Amanda with a gleam in her eyes. \"When did you buy that?\" \n\n\"About a month ago.\" She bit down on one of Rachel's nipples making her moan in ecstasy as she kissed it. \"I was just waiting for the right moment to show it to you both.\" Amanda lunged upward and sent her silicone phallus deep inside of Rachel. \n\n\"Oh my God, this feels amazing. Deeper, Amanda, deeper.\" \n\nApril moved around behind Rachel and reached between the two girls to stroke Rachel's rigid cock while she used her other hand to push two fingers between Amanda's harness straps and into her dripping wet pussy. \n\nAs April stroked Rachel's beautiful cock she twisted her fingers around in search of Amanda's g-spot. The moment Amanda arched her back April knew she'd found what she was looking for. She pressed harder against the sensitive patch and Amanda screamed as she pushed her dildo deeper into Rachel. \n\nRachel was beginning to pant as her ass was reamed by Amanda's dildo and her own throbbing cock was swelling beneath April's tight grip. A moment later they both climaxed as Rachel sent her cum streaming across Amanda's chest to fall on her chin while Amanda squeezed and pushed April's fingers out of her pulsating pussy as her body rocked to a magnificent orgasm. They both collapsed on the bed, panting. \n\nAfter a few minutes to catch their breath, they recovered enough to pull April down on her back. While Rachel shoved a pillow beneath April's butt Amanda pulled open a condom wrapper and slipped it on her silicone cock. Rachel picked up the bottle of lube and dribbled the slippery liquid onto Amanda's dildo and then on her own growing cock. \n\nAmanda slipped between April's legs and slowly pushed the dildo into her ass as Rachel waited a moment until Amanda was settled before pushing her cock into Amanda's pussy. \n\nThey writhed in passion, Amanda's vibrating cock made April nipples tingle as Rachel pushed harder into Amanda. In a moment, Amanda could feel Rachel's cock swell then she felt her seed gush deep inside Amanda's vagina. \n\nAs Rachel softened she fell out of Amanda's pussy. She slipped off her and watched Amanda continue to thrust into April's ass. \n\nSuddenly, a thought played across Amanda's face as she pulled her dildo out of April and unclipped the strap-on harness. She straddled April then she reached down to lift April's rigid cock and impaled herself on the rigid shaft. Her muscles tightened around April's cock and she began to milk her, coaxing her seed from her balls. \n\nApril, having recovered from the earlier climax, moved her cock inside Amanda and it began to swell. She arched her back as she sent rope after rope of her come deep inside of Amanda's vagina. Amanda, totally spent, collapsed between April and Rachel. She crossed her legs and clamped her pussy lips together tightly not wanting to loose a drop of the precious seed trapped deep within her vagina. \n\nRachel glanced across to the exhausted April trying to catch her breath. She leaned up on an elbow and gazed at Amanda's blissful expression. Then a curious thought occurred to her. \"You're off the pill aren't you?\" \n\nAmanda blushed as she smiled sweetly and nodded. \"I want your babies. I want a part of both of you to grow inside of me.\" \n\nRachel glanced across to April. The shocked expression on April's face grew into a wondrous smile as tears began to fall across her cheeks. \n\nHuge tears began to fill Amanda's eyes as well. \"I want to have your children, is that okay?\" \n\nRachel looked down at Amanda and then to April whose face was glowing, her eyes glistened in the candlelight. She looked back to Amanda and nodded whispering, \"Yes, thank you.\" \n\nThey kissed. They hugged. And they all fell asleep, blissfully entwined in love. \n\n=TWO= \n\nKim walked into Rachel's apartment the following Saturday to see all three of her friends standing around the island counter pulling on their coats. \"Hi, I just got off work. Where's everybody going?\" \n\nAmanda dashed into the bathroom as Alex slipped on a pair of women's oxfords. \"Shopping, want to join us?\" \n\n\"Sure, what are you looking for?\" \n\nAmanda poked her head out of the bathroom with a toothbrush sticking out of her mouth. She pulled the toothbrush out and grinned. \"For a new bed, one big enough for the three of us to romp and play. Ours just won't do anymore, its too small.\" \n\nKim's face flushed crimson and she shook her head with a grin. She was getting more accustomed to Amanda's teasing ways but the girl still shocked her sometimes. The thought of the three of them lying in a king-sized bed entwined together in passion was quite the mental image for her. \n\nRachel chuckled as she wrapped a scarf around Alex's neck. \"Where are we going to store this mattress, Amanda? We haven't closed on the house yet and it will be too big to stash into one of our apartments.\" \n\n\"I called the mattress store and they said they could store it for us until we close on the house. I told them it'd probably be a couple of weeks and they said okay. Come on, let's go.\" Amanda wrapped a scarf around Rachel's neck. \"Bundle up sweetie, it's cold outside.\" Then she gave her a peck on the cheek. \n\nKim pulled her coat back on. \"Those earrings are cute Alex, where'd you get them?\" \n\nAlex pulled on a smartly tailored camel hair women's coat he found at the Salvation Army Thrift Store. \"I saw them at a little shop on Forest Avenue. It's a quaint little place and I love going there. They have a nice selection and I don't get weird stares from other women like I do at the big box stores.\" \n\n\"They look cute on you, take me there sometime. I like supporting small stores if I can. \n\nAlex smiled and opened the door for them all. \"Thanks Kim, maybe we can go there after class on Wednesday.\" \n\n\"Great.\" \n\nThey all filed out of Rachel's apartment and headed down the stairs to the foyer. As they reached the last step Tom Reilly poked his head out of his apartment door. \"Hey girls, what's up?\" \n\nAlex managed to partially duck behind Rachel as they walked across the foyer towards the back door and the apartment parking lot. \n\nRachel turned and grinned at Tom. \"Not much Tom. How's Nancy?\" \n\n\"She's fine. Hey, can I talk to everyone for a minute?\" \n\nThey all stopped and turned towards Tom as Kim stepped aside. \"Sure.\" \n\n\"I know you three are planning on moving out soon and I know you're all on month to month now. So, could you give me at least a decent notice on when you plan on vacating? I need to get an ad in Craigslist. There aren't too many students looking for something this time of year, and I want to be at the top of the list of those who are.\" \n\nAlex buttoned up his coat and pulled the scarf up around his ears. \"Sure Tom, we'll be happy to give you as much notice as we get from the bank.\" \n\n\"Thanks.\" Tom offered an awkward grin and closed his door softly as everyone else turned towards the back door and the apartment house parking lot. \n\nThe mattress store was on 21<sup>st</sup> street along with a collection of restaurants, antique shops and a few boutique stores. It was a trendy shopping area away from downtown without looking too suburban. \n\nTwenty minutes after entering the store Amanda and Rachel fell onto a king-sized bed with a soft pillow top and sighed. \n\nKim glanced over to Alex and grinned. \"I think they have found the one you're going to buy.\" \n\nAmanda sat up and gestured towards him. \"Come on sweetie, join us. Let's see if we all fit.\" \n\nAlex climbed onto the bed and settled in between Amanda and Rachel. \n\nRachel reached over and pulled Amanda towards her squishing Alex between them. \"Kim, take a picture.\" \n\nKim snapped a few photos on her cellphone then Amanda got up and ran around to grab her. Kim squealed with laughter as Amanda pushed her onto the bed between Alex and Rachel announcing, \"see girls, there's plenty of room,\" as she flounced down beside them. \n\nKim sat up, her cheeks flushed with crimson. \"Amanda my dear, Ray is already too much for me to handle so...\" \n\nRachel leaned up on one elbow and swatted Amanda's shoulder playfully. \"Stop teasing the poor girl Sis, she's turning three shades of red. One of these days Kim is going to totally shock you Amanda, and I only hope I'm around when it happens.\" \n\nAlex laughed as he wrapped her arms around his sisters. \"Me too, I'm sure it'll be spectacular.\" \n\nA salesman walked over the stand near the foot of the bed and watch the girls with a smirk as he held out his hand. \"Which card shall I put this on?\" \n\n=THREE= \n\nThere was a light dusting of snow on the foothills that led up to the Pocono Mountains in western Pennsylvania. The roads were clear, as it wasn't quite cold enough for snow to stick for very long. \n\nWendy snuggled up to Kyle as he navigated his way along familiar roads. \"It's so pretty up here sweetheart, I want to come back in the spring when everything is new.\" \n\nKyle flipped on his turn signal as he slowed to turn off the main road and onto a state highway. \"It's really beautiful in May when the azaleas and dogwood are in bloom.\" \n\n\"Next time we'll take the roadster. Country roads are made for convertibles.\" \n\nKyle smiled blissfully as he glanced over to watch this beautiful woman take in the beauty of the country. He was glad Wendy liked the outdoors. A lot of city girls are just not cut out for a life beyond condos and upscale restaurants. Wendy seemed so at peace in this world. She seemed to relax the moment they left the freeway. \n\n\"I suppose I should brief you a little about what you can expect after we arrive. My family is probably one of the reasons I never had too many girlfriends from my hometown. They are a bit, well, for lack of a better word, eccentric as I said at dinner the other night. They can be a handful sometimes.\" \n\n\"Norma is my mother. She lives with my uncle, Willie, along with his two sons, Henry, we call him Hank and he's a cop, and Willie Jr., who works as a mechanic at a body shop in town. \n\nMy mom had four children. Twins, me and Candace, who was born Kenny, Annie who married Tom Andrews, a dairy farmer. They live near Lancaster. And finally Tommy who's just finishing high school this year, he plans to go into the Army this coming July.\" \n\n\"Everybody sort of just gets along, no great aspirations, just a desire to live happy and healthy I suppose. My uncle Willie is a handy-man-carpenter, odd jobs sort of guy. There probably isn't a home for fifty miles that he hasn't fixed something in it one time or another.\" \n\n\"Norma, my mom, is a nurse at the community hospital in Mount Pocono. She's been there for nearly twenty years. I keep asking when she's going to retire but since Dad died three years ago she just shrugs her shoulders and smiles. I think she likes it too much.\" ",
        "Wendy gazed out the passenger window watching the world whiz by. \"So just you and Candace were the ones with the wanderlust?\" \n\n\"I suppose so, although from the sounds of it, some of it rubbed off on my younger brother, Tommy.\" \n\nWendy leaned over and kissed him on the cheek then she rested her head on his shoulder as he drove up the twisted little highway further into the mountains. She fell blissfully asleep. \n\nA half hour later Kyle pulled into a gravel driveway that led up to a simple two-story home that had a country farmhouse appeal to it. He nudged Wendy and she sat up wiping the sleep from her eyes. \n\n\"Hey sleepyhead, we're here.\" \n\nAs they approached the house they could hear arguing inside. They climbed the porch stairs and stood outside the screen door. Kyle whispered to Wendy as he pointed to the two standing in the center of the living room. \"That's my uncle Willie and his niece, my cousin, Martha Johnson. \n\nMartha stood in the middle of the room with her hands on her hips, a defiant scowl on her face. \"What do you mean that's not crazy? Who teaches their boys to pee on trees in public? In the school yard no less?!\" \n\nA pleasant faced woman with wisps of grey hair swirling around her face turned to see two people walk in through her front door. \"That's all right Martha, we won't say anything more about it. Hello Kyle, is this your girlfriend Wendy?\" \n\nKyle ushered Wendy through the foyer and into the living room. \"Yes, Wendy, Mom, Mom, Wendy.\" \n\nWendy shook the hand that was extended and smiled sweetly. \"Hello Mrs. Upton, I glad to meet you.\" \n\nNorma patted her hand. \"No ceremony here dearie, call me Norma.\" \n\nKyle dropped their bags near the hallway stairs. \"Hi Martha, Uncle Willie.\" He turned and whispered to his mother. \"What did Uncle Willie do now?\" \n\nWillie turned to Kyle; his voice was filled with bluff and bluster. \"I only told her boy Rodney, that no matter where you are in this world, you have to have a whizzing tree, what's wrong with that?\" \n\n\"My son is not a bear in the woods, Willie, my side of the family does not condone public urination in Philadelphia.\" \n\n\"This isn't Philadelphia Martha, it's Swiftwater, and it is in the woods.\" \n\n\"Aargh! Stay away from my Rodney, Willie, or next time I am calling the cops.\" \n\n\"All right Martha.\" He pulled out a small notepad and scribbled a note. \"Here's Henry's number if you need to call him.\" Willie turned to Wendy and winked. \"My boy's the duty sergeant tonight and he could use an excuse to visit. It gets pretty boring most nights down at the police station.\" \n\nMartha flipped the note over her shoulder and stormed off slamming the screen door on her way out. Kyle could hear her muttering about old coots with no sense of decency. \n\nUncle Willie turned to Wendy. \"Don't worry, Martha's my sister's girl. She gets a bee in her bum about something and you just have to wait it out until the ride is over.\" He stepped closer and leaned in to take a closer look. \"So you're Wendy. It's nice to meet you.\" \n\nAt that moment a woman strode out from the back bedrooms dressed in a bra, pajama bottoms, and snow boots. She was carrying an axe as she walked through the living room towards the kitchen. Everyone paused as the woman strode across the room. \"Denise, this is Wendy, Kyle's new girlfriend.\" \n\nDenise waved the axe over her head as a welcome without breaking her stride. Wendy watched her go through the kitchen and out the back door. The screen door slammed shut with a whack. \"Where's she going?\" \n\n\"To chop wood. Winter is nearly around the corner.\" Willie chuckled as he sat back down in a recliner and picked up the remote. \n\n\"She's on a mission. Denise is sort of my wife, although it's not official. We've been together now for nearly twenty years. I promised her a couple of year's back that we'd go to Las Vegas and make it official. She said we should dress up like Elvis and Priscilla and ride in the back of a limousine. I thought that sounded like fun.\" \n\nHe scooted around in the recliner and craned his head up towards Wendy. \"Have you ever been to Vegas?\" \n\n\"No, I never have been there.\" \n\n\"I think I've got enough saved up now so plan on it. They say you have to bring your own witnesses. Kyle, you up for a trip to Vegas?\" \n\nKyle walked back out of the kitchen. \"When would that be Uncle Willie?\" \n\n\"Christmas.\" \n\n\"I'll check my calendar, but maybe.\" \n\nThe television started blaring the roaring sound of racing cars. \"Oh good, NASCAR's back on. One of these days we'll get our own cable so I don't have to keep borrowing it from my neighbor.\" \n\nWendy turned to Willie. \"Does he know you're borrowing it?\" \n\n\"I think so, I told him once a couple of years ago.\" \n\nThat night Wendy was in the guest bathroom while Kyle was downstairs talking to his mom. He walked into their bedroom to hear her whimpering in the bathroom as if she was in pain. Suddenly, \"Shit, fuck, oh shit that hurts.\" This was followed by another whimper. \n\nKyle knocked softly on the bathroom door. \"Wendy? What's going on? Are you in pain?\" \n\n\"Don't come in here, Kyle.\" \n\n\"Okay, I won't, but are you all right?\" \n\n\"Yes, I'm just doing something that I hate to do and it hurts like a bitch sometimes. I'll be okay, just stay out, please.\" \n\nKyle walked over to sit on the bed and wait for her. \n\nA moment later Wendy walked out of the bathroom carrying a small cloth bag. She blushed as she glanced into Kyle's eyes then she sat next to him on the bed. \"I'm okay sweetie, it's just something I have to do everyday and sometimes it can be painful.\" \n\n\"Can you tell me what it is?\" \n\n\"It's so embarrassing.\" Then she sighed and nodded. She opened the small bag. Inside were several long cylinders that were shaped like dildos of various sizes. Only the cylinders were smooth and without the all the details that were common on silicone dildos. \"I have to use these twice a day to keep me open and the larger ones really hurt sometimes. I've had to do this since my surgery.\" \n\nKyle looked at the small bag and then up into her eyes. \"Why?\" \n\n\"The doctor told me that if I don't my vagina will collapse. I know of a girl who had to have reconstructive surgery because she didn't do it and her vagina collapsed down to a little less than two inches. She couldn't have vaginal sex.\" \n\n\"Holy shit, is there something I can do to help?\" \n\n\"No sweetie, just love me.\" \n\n\"That's easy, I already do.\" Kyle leaned over and kissed her lips gently. \"So is this a permanent thing? Do you have to do this for the rest of your life?\" \n\n\"Maybe, at least for a couple more years until everything settles down there.\" She stood up and put her small dilation bag back into her suitcase. \"I've been doing some research and I discovered a procedure that allows for a permanent solution to my problem.\" \n\n\"You should do it then, I don't like to hear my girl in pain.\" \n\nShe curled her fingers and tickled his ears. \"It'll mean a couple of months without sex, even masturbation, for me.\" \n\nHe grinned sheepishly. \"There's other things we can do while we wait.\" \n\nShe nudged his shoulder and pushed him back into the bed then she climbed on top and straddled his chest. \"Hmmm, I'm willing to explore if you are.\" \n\nThe next morning sunlight filtered through the curtains in the guest bedroom and Wendy stretched as she woke up. That was undoubtedly the best night's sleep she had had in years. It was so peaceful up here in the woods. She looked around the room. The bathroom door was standing open so Kyle was probably downstairs. \n\nShe grabbed her robe and busied herself in the bathroom a moment. She fixed her hair and dabbed on a little bit of makeup. As she got closer to the top of the stairs she could hear laughter and the clatter of dishes coming from the kitchen below.  \n\nKyle appeared at the bottom of the stairs. \"Good morning beautiful, I was just about to come up and give you a wake up kiss.\" \n\nWendy began to step down the stairs towards Kyle. \"How about I meet you half way?\" \n\nThey met in the middle and Kyle wrapped his arms around her, leaning in for a kiss. \"Good morning beautiful. Sleep well?\" \n\n\"Like a baby, it's so peaceful here. I love it.\" \n\nKyle kissed her cheek. \"Then you wouldn't mind coming back for Tommy's graduation?\" \n\n\"I wouldn't miss it.\" They turned and walked arm in arm down the rest of the stairs. \n\n\"Great! How about breakfast?\" \n\n\"I'd love some, I'm famished.\" \n\nIn a quiet moment, while doing the breakfast dishes, Wendy managed to ask Norma what she thought about her daughter Candace? \n\n\"Oh she's terrific. She's working for a production company up in Albany right now. I heard they're working on one of those vampire TV shows. I forget which one. They're all the same to me. She's having the time of her life.\" \n\n\"I meant, what did you think when she told you she wanted to become a woman?\" \n\n\"Oh, well, I was worried at first, we all were. People can be so cruel you know. But she has so many good friends here and in New York that we didn't worry too much, beyond what any mother worries for a daughter in the big city. So Kyle told you about her?\" \n\n\"Yes he did.\" Wendy turned and leaned against the counter. \"You see, I've gone through a similar transition myself.\" \n\n\"You have? Goodness, I wouldn't have known if you hadn't told me. You're quite lovely my dear.\" \n\n\"Thank you, Norma.\" Wendy dried a large platter and set it on the counter near a stack of plates. \"And the family? Did they accept her decision?\" \n\n\"Of course, once they understood it. We all did. But we kind of saw it coming so it wasn't a big surprise. Kenny, that was her name before she became Candace, was always awkward as a boy. And Kyle was always there to protect him. School children can be so cruel sometimes.\" \n\nWendy nodded, sadly, as Norma handed her another skillet to dry. \"But when she transitioned, she just blossomed. It was wonderful to watch her grow. Of course she had a few hard knocks in high school.\" \n\n\"I know, Kyle told me about one of them.\" \n\n\"You mean the one with that football player Kurt and his buddies?\" \n\nWendy nodded. \n\n\"That was one of the worst that happened. Kyle was her protector in high school, he took a lot of abuse because of his twin sister but through it all he never uttered a word of complaint.\" \n\nNorma lifted a large pot out of the soapy water. \"You know, in a way, a change like that really tells a person who their true friends are, doesn't it? People who will stick with you because they like you for who you are not what you are, they are the ones you can count on.\" \n\nWendy nodded with a gentle smile. \"Yes, I think you're right.\" She glanced out of the kitchen window and watched Kyle help his Aunt Denise chop and stack wood. \n\nLater that day, Kyle's car wove down the narrow country highway, heading away from the Upton family home. Wendy leaned her seat back and gazed languidly out the passenger window at the forest as it whisked by. On the radio, Aaron Copeland's \"Appalachian Spring\" filled the car with melodic tones that made the ride through the forest seem magical. \n\nShe glanced over and looked at Kyle as he maneuvered through a narrow country one-lane bridge. What an amazing man he was. Since she met him and her sisters Rachel, Amanda and April, her life had taken a complete turnaround. \n\nApril was right, my turn was coming and my Prince Charming was indeed waiting in the wings. She took a big breath and let it out slowly, closing her eyes to relish the sensation of just being with someone who really, truly loved her. Her eyes began to glisten. She dabbed the tears away and tried to settle her emotions. She turned to Kyle. \n\n\"Do you think there might be a cabin up here we could rent for a week or two sometime in the spring or summer?\" \n\n\"Of course, my cousin has a few cabins she rents out every summer to people. I could ask her.\" \n\nWendy smiled serenely as she returned her gaze to the passenger window. \"Thank you, I'd like that.\" \n\n\"You know we have a standing offer to come back to my mom's place anytime we want.\" \n\n\"I know, but this would be just the two of us.\" \n\nKyle smiled and blushed slightly. \"I'd like that,\" he whispered. He stopped at a stop sign and waited for a logging truck to rumble by. \n\nWendy reached over and squeezed his hand gently as he looked down the road for other traffic. Once the road was clear he turned onto the highway heading south and back to Delaware. \n\nShe snuggled under a blanket she found in the backseat and smiled sweetly. Life was good. She finally understood that slogan. \n\nA NOTE FROM THE AUTHOR: \n\nThe author copyrights Stray Cats and all of its parts. The reproduction of any part of Stray Cats without the written permission of the author is expressly prohibited. \n\nThis story is a work of fiction. All of the characters, their names and the places they visit, are purely from the imagination of the author. Any resemblance to persons, places, or things is not intentional and purely coincidental. \u00a9 2015/ Dreamweaver594"
    ],
    "authorname": "Dreamweaver594",
    "tags": [
        "menage e trois",
        "romance",
        "transsexual",
        "threesome",
        "threeway",
        "group",
        "romantic"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/stray-cats-ch-06"
}
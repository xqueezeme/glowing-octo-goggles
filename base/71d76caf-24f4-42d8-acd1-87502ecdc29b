{
    "title": "Backdoor Sweetheart Ch. 01",
    "pages": [
        "Author's note: This is a work of fiction. All characters involved in sexual activities are eighteen years or older. Don't expect realism and you won't be disappointed when you don't find it! Enjoy!\n\n*****\n\nI don't remember all the details of the day when my Mom and I moved into our current house. I was just five at the time. One thing I do know for sure, though: that's the day when Lizzie and I first met. \n\nI don't think I'm exaggerating when I say that having Lizzie and her mom Rose as neighbors was the single most important event in my Mom's and my life. My Dad had recently died and Lizzie's parents had divorced just a few months before we moved, so it's easy to see why our mothers immediately became such good friends. It was Rose who helped my Mom through her grief and got her a job at the office where they still work together to this day. \n\nSince our Moms had pretty much the same schedules and were so close, it became natural for me and Lizzie to hang out at her house or mine and for the four of us to have dinner together or do stuff as a family. Our Moms even had the fence separating our backyards removed so that we could move freely from one house to the other, giving us kids more space to play as well. \n\nI'm not sure what it's like to have an actual little sister, but if it's anything like what I have with Liz then it's the best feeling in the world. For whatever reason, we synced perfectly from day one, Lizzie and I, and we were pretty much inseparable ever since. She's a year younger than me but the age difference never really registered. We always did everything together, from the time we went to school in the morning, through the afternoons spent playing or doing homework until the time we chilled on the couch watching TV at night. \n\nIn retrospect, I'd say that Lizzie and I had a much better childhood than many of the kids we knew from school whose parents were together yet fought all the time. Our unusual family setup made us feel like we had two cool Moms who got along perfectly well and a sibling we could rely on and spend time with and talk to, all of which we loved. At the end of the day, we were a pretty happy family, me, Lizzie and our Moms, and that's more than most of our schoolmates could say. \n\nEven though being together became second nature to the two of us, we must have looked kinda weird to everybody else, since I was always tall and lanky while Lizzie was a bit chubby and she wore big nerdy glasses growing up. Not that we ever cared much about what other people thought, of course. Our closeness came very handy as we navigated our way through high school. Even if I had just a couple of dorky friends and Liz was never a popular girl, we always had each other and that was all either of us really needed. \n\nTo me, Lizzie was always amazing. Fun, bright and full of life, she's always been quick with a smile and her big brown eyes never fail to sparkle with that keen wit of hers. Liz has such a sweet sensitive nature, and she was never afraid to express her emotions, which essentially meant that she'd hug me and smooch me on the cheeks any time she felt like, which was pretty often. \n\nWe spent hours on end together, always feeling good just being close. I can't even count the times we fell asleep cuddled on the couch watching TV at night before one of our Moms gently woke us so we could go to our respective beds. That was always my favorite way to doze off, with Liz's head resting on my shoulder and her lush auburn hair tickling my chin.\n\nLizzie's love for books and stories was something I always found fascinating about her. It made perfect sense to me when she declared that one day she'd become a writer like J.K. Rowling. I feel privileged to have been always the first person to hear Liz's stories ever since she stared writing when she was fourteen. The times when Lizzie would read her new stuff to me became one of our most sacred rituals. It always made me hum with joy to be there with her on those occasions, listening to her sweet soothing voice, drinking in her words, feeling honored to be allowed into the realms of her imagination. \n\nFunny enough, she often insisted that some of her best stuff was inspired by me, but that's just Lizzie being kind. I do agree with her, her comic fantasy pieces based on our characters on World of Warcraft are absolutely great, they even got posted on the game fan fiction forums, but her literary skills owe nothing to the fact that I introduced her to online gaming. \n\nAll in all, I often got the feeling that our friendship was somewhat of an unfair deal, like I was getting a lot more out of it than she did. I brought this up a couple of times over the years, always getting the same reaction from Liz. She would just look at me like I had two heads, pushing her glasses up on her pretty nose. Then she'd burst out laughing, hugging me harder than ever and shaking her head as she smiled her heart-warming smile, telling me how great I was for a guy who had no idea he's awesome. I'm not ashamed to admit that when she said it I blushed like crazy, which in turn made Lizzie laugh harder and tighten her embrace even more. \n\nIt's weird, but I can't pinpoint any single specific event that I'd call a significant memory binding me and Liz together, just a deep and persistent connection linking the two of us, a sort of empathy built over time through countless little moments. What neither of us expected was puberty. \n\nIt's not like it changed what we had, but it did change us, well, our bodies at least. If I thought Lizzie could never get more amazing than she was, I had to think again during the summer that preceded her last year in high school and my first year of college. Of course I had noticed some changes in her appearance before, but that summer saw my sweet next door neighbor blossom into a beauty like none I had ever witnessed. All her baby fat and her cute pudginess, which once or twice she had mentioned feeling self-conscious about but that I firmly assured her were part of her indisputable awesomeness, suddenly blossomed into a set of full, soft womanly curves that made my head spin, literally. \n\nLooking at her, I had a hard time focusing on her beautiful face and intense brown eyes while I forced myself not to stare at her big jutting boobs or her round bouncy bubble-butt. It was a good thing that she didn't bother, my goofy stares actually making her giggle as I mumbled and turned away, embarrassed and all conflicted inside. Even more confusing than the persistent attraction I felt towards Liz's curvy body, were the interest she seemed to be developing about me. It was nothing much, but I did catch her looking at me with a strange intensity sometimes. It was new for me to see Liz get all flushed and blushing, her eyes lingering on my pecs and abs, whenever she caught me without a shirt on after I worked out or when I came back from a run. \n\nAll through that summer, an undercurrent of sexual tension kept building up between us, making our usual closeness feel weirdly charged. We never talked about it openly, but we both instinctively knew that something major was on the horizon. The fact that images of my sweet Liz's swaying tits and her plump meaty ass flashed before my eyes every time I masturbated kinda gave me a pretty clear clue about what was going on in my head, but I just wasn't ready to deal with it yet.\n\nLeaving for college that fall was pretty traumatic. The campus wasn't too far so I drove back home every other weekend and we stayed in contact daily via texts and videochats, but I still missed Lizzie badly, and so did she, as she never failed to tell me whenever we talked. Every time I was back home and we got to spend some time together, it was like coming up for air. \n\nLiz and I hadn't had any sort of physical contact yet, beside our usual hugs and pecks on the cheeks, but now that we were apart for the first time, we'd cling to each other with a new urgency on the weekends when I came back home. I didn't miss the way she brushed her boobs against my arm and chest when we cuddled in front of the TV, nor did I fail to notice how she was always wearing tight-fitting shorts that showcased her spectacular ass. \n\nNeedless to say, I pretty much had a permanent boner, which I tried to hide until I could to take care of it. I'm pretty sure Lizzie was actually glad and surprised by how aroused she made me, or so it looked judging by her silent grins and the swift glances she stole at my tenting pants. But then again, she never said anything about any of it. Horny as we clearly were, neither of us acted upon the excitement coursing through us. Not until the party.\n\nLizzie's eighteenth birthday happened on a week day, which saddened me because I had classes and needed to stay at college. I apologized a thousand times to her for missing her birthday for the very first time in our lives, but she shrugged it off with a smile, telling me that the actual party was postponed and set for that Saturday, so I could be there too.\n\nI almost cried when she murmured, her eyes all big and shiny and soulful even on camera: \"It wouldn't be my birthday without you anyway, Russ... I need you to be here to make it real.\" \n\nThat hit me, hard. I did cry a couple minutes after we ended that videochat, feeling like my heart would burst from the love that I felt for this incredible girl that fate had decreed should be my next door neighbor and my closest friend in the world. That was the longest week ever, I couldn't wait to rush back home to be with Liz again. Until, finally, I was. \n\nThe party itself was a major mess and a big success at the same time. I knew most of the people there, high school guys and girls Lizzie's age that turned her house and our shared backyards in a swarming mass of drunken, dancing, yelling humanity. Knowing that her popularity hadn't increased much recently, I was a bit surprised to see that so many people had gathered for Lizzie's birthday. Ironically, so was she. \n\nIt had been, Liz told me, a new girl in her class that did all the work for the party, an athletic brunette with a pixie haircut called Vanessa that I got little more than a glimpse of as she cruised through the crowd trying to maintain a vague semblance of order while still looking chill and totally in her element. Lizzie shrugged as she explained to me that Vanessa had taken a liking to her, since Lizzie had been so kind and welcoming with Vanessa as she settled in her new school. As a way to thank Liz, Vanessa had made it her personal mission to turn Lizzie's birthday, which Liz wanted to be low-key as usual, into a memorable event that all their schoolmates would want to be a part of. \n\nFor a while, I stood by a baffled Lizzie and escorted her around as she got high fives and yells of approval for the bash she was hosting, getting cheered by people she barely knew and that, based on how drunk and high they looked, would probably not recall much in the morning. Overwhelmed as Lizzie seemed by the unexpected mass of people, she was somewhat reassured by the hold that Vanessa seemed to have over the situation. Knowing Liz enough to know that confusion and crowds got her nervous, feeling her tiny hand clenching mine in a harder and more urgent grip as the minutes went by, I eventually chose to steer her away from the mess and noise so that we could spend some time alone in my room while the chaos went on outside. \n\nThat night Lizzie was wearing a little black strapless dress that hugged her gorgeous curves wonderfully. Her boobs seemed to be about to burst through the strained cloth while the flare of her hips and the mouth-watering mounds of her asscheeks were enhanced by the way the dress outlined their roundness. She had heels too, but she kicked them off as soon as we stepped into my room, staying barefoot. Her toenails were painted baby blue, I noticed.\n\nIt warmed my heart to see my sweet Lizzie giggle and blush when I complimented her on her looks. Turning her face down and smiling shyly, apparently unaware of how insanely gorgeous she was, Liz sat on the edge of my bed, where I joined her. She was so adorable as she started rambling on, saying that she felt uncomfortable in that dress and her eyes were itchy from her contacts and all those people downstairs made her anxious and on and on and on. \n\nI just smiled, growing fluffier and fluffier inside. Sitting there right by her side, I was spellbound by the sight of my sweet Liz. All pouty and worried as she nervously twirled her fingers while she talked, so flushed and warm, so close and so emotional, Lizzie had never looked as stunning to me as she did then. She was the very image of natural, unassuming beauty. I simply couldn't tear my eyes off her. As I listened to her sweet little voice, I lost myself in that familiar soothing sound, oblivious to all else except my Lizzie.\n\nI was snapped out of my silent adoration when she suddenly stopped talking and she turned to look at me, her restless fingers tucking a stray auburn lock behind her ear, a quizzical expression on her face. My heart was pounding and I felt like I couldn't breathe as our eyes met. This is it, I thought. \n\n\"Russ? Are you okay? You're looking at me kinda funny... Say something, please, you're freaking me ou-mmhh-mph!...\"\n\nLizzie's words became a muffled moan of surprise as I let go of everything and leaned in, kissing her. For a few seconds, all I knew was the softness and warmth of her lips as our mouths touched and pressed into each other in our first real kiss. Then I pulled back.\n\nLizzie's expression was unreadable. Her cheeks were burning red while her milky white skin seemed even paler than usual. Her parted lips were quivering and her deep brown eyes were so huge that I thought they'd pop out of her head any second. She looked like she was in shock, and I couldn't tell if she was about to yell, laugh or pass out. For a second, I feared I had just screwed everything up. My debatable sense of humor came to my rescue. \n\n\"Uh...\" I mumbled, \"happy birthday, Lizzie...?\"\n\nOne more second I was left hanging. It was agony, but it was brief. Then she blinked, and her whole face lit up in the biggest smile ever. I started breathing again as Lizzie slowly declared: \"Best. Birthday present. Ever.\"\n\n\"Actually,\" I said like the perfect dork that I am, \"I did get you an actual legit present. I found this first edition of Terry Pratchett's The Colour Of Magic, autographed and all, but the shipping people say...\"\n\n\"Russ,\" Lizzie interjected with a snicker, locking her naked arms around my neck and pulling me closer until our noses were touching. \"Just shut up and kiss me, okay?\"\n\nAnd so I did. It may have been two minutes or two hours, I don't know, I lost track of time while Lizzie and I just kissed and kissed, softly then hungrily, holding on to each other tightly, moaning in the other's mouth. \n\nAs we made out, Lizzie held my head in her hands while her tongue danced with mine and her succulent lips drank me in, letting me explore her welcoming mouth. Lost in our breathless soulkiss, I ran my hands over her naked shoulders, along her arms and then her hips, caressing her curvy ass and then rushing back to hold her heavy buxom tits in my hands, feeling her engorged nipples poking into my palms through the cloth. \n\nPanting, we eventually had to break our lip-lock to take a serious lungful of air. The words were out of my mouth pretty much at the same time as Lizzie spoke too.\n\n\"I love you, Liz.\"\n\n\"I love you, Russ.\"\n\nWe had said those words before, plenty of times over the years. At that moment though, they sounded different. Deeper. Truer. Still, the timing of our declarations made us smile and then laugh a bit, as our lips once again were drawn to each other and we resumed kissing.\n\nAt some point during our make out session, Lizzie sat on my lap, her naked thighs brushing together and my pant-clad boner pressing against her plump bubble-butt. My roaming fingers found their way to the front of her dress, touching the soft upper slopes of her boobs, ready to pull the fabric down to let those fabulous jugs free. A choked whimper and a burst of renewed passion in her kissing told me that Liz was okay with what I was doing. That's why I was taken aback when she suddenly unclasped her lips from mine and jumped off my lap a few seconds later.\n\n\"Wait,\" she said breathlessly as she stood up and turned away from me, placing her juicy rump right in my face. Looking over her shoulder at my befuddled expression, Lizzie smiled. As she held her flowing hair above her head, she just said: \"Unzip me.\"\n\nWith my head spinning and my boner twitching in my pants, I did as I was told. In reverent silence, I revealed Lizzie's smooth back, leaning in to plant a kiss on the nape of her slender neck. Shimming and wiggling her ass, my beautiful Liz let her dress fall to her feet. A strangled groan escaped my mouth at the sight of the black lacy thong wedged between the plump majestic globes of her ass. \n\nLetting her hair down in a reddish cascade across her shoulders, Lizzie turned. She was biting her lips and holding her arms by her sides as she showed me her naked breasts in all their glory. \n\n\"Oh my god, Liz...\" I mumbled, my eyes glued on the juicy, heavy fullness of my sweet Lizzie's tits. They were amazing, so big and jutting proudly out, capped with puffy rosy areolas and thick upturned nipples. I was shaking with arousal as I watched Lizzie hook her thumbs in her thong and pull that skimpy piece of fabric down her legs. \n\nI was distracted for a moment by the mouth-watering sway of her tits as she bended over to take her undies off completely, but then my eyes found a new amazing target: her little pussy. Shaved and smooth except for a tiny tuft of trimmed reddish-brown hair right above her mound, Lizzie's slit was shining wet with arousal. Her labia were pink and swollen and I could see her needy clit peeking out from its tender hood.\n\n\"Wow, Liz...\" \n\n\"Russ,\" she said in a shaky little voice, looking down shyly, \"do you think... Uhm, am I... Am I pretty?\"\n\nI was practically drooling as I fought to remove my gaze from her pussy and tits to look up into her kind brown eyes. Cupping her chin and pulling her closer, I met Lizzie's gaze as I said: \"You're not pretty, you're beautiful. You're fantastic, Liz. I've never seen anything so amazing, ever.\"\n\nShe smiled and her flushed cheeks burned even redder. I felt her whole curvy body relax as she pressed her pillowy tits against me, but she still had a cocked eyebrow. \"Yeah, well, I guess you'd say that about my big boobs, but,\" she said, turning around and bending slightly forward, arching her back and making her bouncy ass bubble out even more, \"what about my butt? And all the rest of me for that matter. Don't I look, uhm, fat...?\"\n\nLiz had never spoken that word about herself, ever, and I had always loved the fact that she was not the kind of superficial girl who equates her worth with her appearance. I truly admired her for not being a skinny scrawny-assed plastic doll who obsesses over diets and fitness. But then, why would she do that? She was perfect as she was. I guess someone might have called her chubby, but that just never made sense to me. Her full, generous curves were spellbinding, so gorgeous and real. To me, they reflected her personality, how authentic she was as a person. In a way though, I guess it made sense that even Lizzie might have a moment of doubt about her looks, finding herself fully naked with a guy for the first time. But, be that as it may, I was determined that that would be the first and last time that the term 'fat' ever came out of her mouth to describe her amazing body. \n\n\"Lizzie,\" I said, making her turn around to face me again but keeping my hands on her plump bubble-butt, kneading and caressing those soft round globes, \"don't ever say that. Not as if it's a bad word or something. You're curvy and womanly, and I think that's sexy as hell. You're so beautiful, Liz, without even trying. And talking about your ass,\" I added, grabbing harder onto her fleshy cheeks and making her squirm with giggles, \"it's incredible. So totally hot. It's actually my favorite part of your body, though your boobs are a pretty close second.\"",
        "\"Really?\" she smiled, getting on her tip toes to give me a quick smooch on the lips. \"Russ, seriously, you're not just saying that to make me feel good, right?\"\n\n\"No way,\" I insisted, \"you know that almost-siblings don't lie to each other! Besides,\" I added, pressing my bulging crotch against her tummy and grinding lower into her moist pussy mound, \"my boner doesn't lie, Liz, it just can't!\"\n\n\"Yeah, about that,\" Lizzie grinned, unbuttoning my shirt, \"let's get these clothes off already.\"\n\nIn a matter of seconds my pants and shirt were gone and I was ready to shed my boxers too. Before I could do it though, Liz's fingers reached mine, stopping me. With a twinkle in her eyes, she dropped to her knees and bit her full lower lip, saying: \"Let me take care of that.\"\n\nThe second she yanked my boxers down my legs, my cock sprung out, throbbing hard and leaking pre-cum, almost hitting Lizzie's pretty face. She giggled as she leaned in closer, her eyes fixed on my shaft, licking her lips. I gasped at the feel of her hot breath on my glans.\n\n\"So hard and big,\" she mumbled, reaching her tiny hands to grab my pole.\n\n\"Ahhh yeah!\" I moaned as Lizzie wrapped her fingers around my girth and started slowly jacking me off. \n\nA huge dollop of pre-cum spurted out of my piss-slit when I felt Liz's warm wet tongue make contact with the underside of my rock-hard dick. Noticing it, she slurped her way to my glans and licked the clear fluid up with the tip of her tongue. Humming softly as she tasted my pre-cum, Lizzie began lapping away at my bloated cockhead like it was a lollipop, making me gasp. \n\nAs she fisted my shaft and licked on my tip, I held her head in my hands, gently running my fingers through her hair and brushing some stray locks off her face so I could bask in the sight of my sweet Liz playing with my cock. I shivered when she pressed her tumid lips to my glans and started smooching and sucking on it, until her lips parted and she took more of my dick in her mouth.\n\n\"Ohhh fuck, Lizzie!\" I grunted while she started sucking on me, tentatively bobbing her head on my shaft. \n\nLizzie hummed with delight as she got in a slow suctioning rhythm, letting her spit drool all over my stiff meat while she lovingly blew me. In no time I was feeling faint with pleasure from her sloppy delicious blowjob, the first I had ever experienced. The soft seal of her lips gliding up and down my raging boner felt incredible and looked just as good to my awestruck eyes. I was leaking a steady dribble of pre-cum as Lizzie really got into a smooth cocksucking tempo, her slurping fellating sounds enhancing the pleasure she was giving me with her luscious lips and warm mouth.\n\nAs Lizzie plunged her head lower at each pass, letting my cock slide deeper into the wet slobbering maw, she held me at the base with just one hand. It made me rabid with lust to see that she was diddling her pussy with her other hand and I couldn't help but buck my hips, pushing myself deeper past her cock-stretched lips. Lizzie gagged as my glans poked into her constricting throat, forcing her to let me slip out of her mouth as she coughed and breathed.\n\n\"Sorry, Liz,\" I said, caressing her head. A thick strand of saliva still connected my swollen glans and her wet puffy lips. \"I didn't mean to choke you, I guess I got carried away a bit... You're so good at this, Lizzie!\" \n\nShe giggled, beaming at my compliments. \"It's okay, I don't mind. I just hope I'm doing good, I've never given a blowjob before, so...\"\n\n\"You're doing awesome, Liz, I'm loving this!\"\n\n\"Me too, Russ, I'm so hot right now,\" she said, still jacking me off, her fingers still working her clit and snatch. Smiling, she held up her pussy-diddling digits for me to see. I didn't even have to think about it, I just leaned down and sucked her juice-coated fingertips into my mouth, tasting her.\n\n\"Mmmh, Lizzie,\" I murmured, intoxicated by my first taste of pussy ever. \"Fuck, I need more of that sweet juice!\"\n\n\"I hoped you'd say that,\" she smirked. \"Can we try something first though? Would you sit down a sec for me, Russ?\"\n\n\"Sure,\" I replied, sitting on the edge of the bed. \n\nLizzie was grinning like a Cheshire cat as she knee-walked between my wide open legs, headed for my achingly hard pole. Stealing glances at my panting face, my sweet Liz held her huge tits in her hands and wrapped them around my turgid spit-slick shaft, trapping it in the soft fleshy valley of her cleavage.\n\nI threw my head back in pleasure as she started sliding her juicy jugs up and down in a tit-fucking motion. The feel of her boobs rubbing along my boner made me see star.\n\n\"Ohhhh fuck, Lizzie! Fuck yeaahhh!\"\n\n\"I was sure you'd like this,\" she chuckled. \n\nNo matter how many times I had dreamed about it and jacked off to this very scenario, nothing compared to the reality of tit-fucking my adored Lizzie's magnificent melons. While I was enveloped in her soft boob-meat, I couldn't help but hump gently into her cleavage, pushing my boner up towards her wet parted lips. Lizzie didn't seem to mind, actually planting a slobbering kiss on my glans every time it slid up from the hugging fleshy valley of her bosom and poked into her smiling mouth.\n\nWhen our gazes met, I heard myself say: \"You're the best, Liz. I love you so much.\"\n\n\"I love you too, Russ. It makes me feel so good that you're turned on by me like this,\" she said, looking tenderly at me yet never stopping her tit-fucking motions. \"You have no idea how much it means to me, the way you're looking at me right now, like I'm so hot and sexy...\"\n\nI had to laugh. \"But you are, Liz! I am so fucking turned on by you. You're so damn hot, Lizzie... In fact,\" I added, kind of breathlessly. \"I'm about to cum, you're just so good, baby.\"\n\nTo my surprise, Lizzie's excited smile widened. Her voice was thick with lust as she blurted out: \"In my mouth, Russ. I want to taste you, I want to drink all your cum.\"\n\nLizzie squeezed my twitching cock between her big boobs one last time before plunging her face down, gobbling me in her warm mouth. Wrapping her lips tightly around my thick shaft, she started bobbing crazily up and down. While she pumped me frantically with one hand, she worked her lips and mouth in a desperate series of vacuuming sucks that had me howling and ready to explode in no time. Holding her head between my hands, I began thrusting into Liz's delicious mouth. She gagged, but instead of pulling back she unclenched her fist and just circled two slim fingers at the root of my cock, aligning me so I could slide into her throat at a better angle. \n\nThat drove me crazy. For a few epic seconds, I fucked Lizzie's face, wedging my cock in her gullet over and over again while she kept sucking and slobbering over my boner. She gagged and spluttered obscenely as I humped her docile mouth, yet she was looking up at me with silent adoration, her eyes glazed over with lust as her hand once again went to work on her clit. She had saliva and pre-cum drooling down her chin and the hint of a deformed smile painted on her wet, dick-stretched lips while I fucked her mouth with abandon. That sight did it. My balls tightened up and my throat-clogging shaft pulsed with impending release.\n\n\"Lizzie... Aaahhh Lizzie, here it comes,\" I grunted over the lewd sloppy sounds of that passionate face-fuck. \"Ahhh fuck yeeeees!\" \n\nLizzie's throat was humming deliciously around me as I unloaded a barrage of thick, long jets of cum straight down her throat, plastering her esophagus and filling her stomach with my gooey sperm. As I growled and sent pulse after pulse of semen into her gobbling gullet, I let go of her head and leaned back on my elbows, overwhelmed by a pleasure so intense that it blinded me and sent my head spinning. \n\nWhen I opened my eyes again, Liz was still kneeling between my legs, head down on my cock, lips clamped around my glans, sucking me off to the last drop. Her throat was working to swallow down all of my massive load and her cheeks were bulging out as she did her best to hold every drop of my seed in her mouth. Determined not to miss a single gooey dollop, she pumped her hand in a corkscrew motion along my dick, purring contentedly as she drank my liquid essence.\n\nI was awestruck and wonderfully buzzed by the time Lizzie's let my deflating meat slip out of her mouth with a final squishy smooch. She had a proud, very accomplished look on her spittle-shiny face as she climbed in bed and lay on her side beside me.\n\n\"Wow, Liz,\" I sighed in amazement while she scooped the last traces of my cum off the corners of her mouth with her fingers and licked them clean. \"Just wow.\"\n\n\"Mmh so creamy... I like how you taste, and you gave me so much cum! You really filled my tummy, Russ!\" she giggled, running her tongue over her lips. \"But 'wow' isn't much help, you know. Was I good? Did it all feel okay? Tell me something to be better at it, come on!\"\n\nI laughed and hugged her tight, squeezing her in my arms until she squealed. \"Liz,\" I declared as solemnly as I could, \"all I can say is this: get ready, because it's your turn now.\"\n\n\"What? That doesn't help meeeh-eeh-eehh!\"\n\nLizzie shrieked and wiggled while I manhandled her soft curvy body, grabbing and pawing at her as I flipped her over on her back. Rabidly horny, hungry for her, I pressed my face between her huge pale tits. While I kissed and licked and slurped on those amazing jugs, I spread her thighs open and reached a hand to her pussy, finding it sopping wet. Chewing on her puffy nipples while she yelped in delight, I started working her budding clit with my thumb while I traced the tender edges of her little slit with my other fingers.\n\n\"Ooooh Russ, yes,\" she sighed, encouraging me and turning me on even more. \"Suck my titties, touch my pussy... Aaahh yes like that, yeeeees!\" \n\nStill feasting on her jiggling tits, I gently eased one then two nectar-dripping digits into the slick folds of Liz's fleshy flower. She was so soft and tight, and totally soaked. Her body shook as I started sliding my fingers inside her pussy while rubbing her clit faster with my thumb. As Lizzie gasped and shivered with delight, I was breathing hard through a mouthful of boob-flesh myself, thrilled by the idea that I was about to make her cum. \n\n\"Russ, ooooh yes, Russ! Your fingers feel so good... Kiss me, please kiss me, I'm so close ooohhh!\"\n\nShaking with excitement, pumping my fingers faster in her tight little pussy, I unclasped my mouth from Lizzie's erect nipple and pressed my lips to hers. We kissed for a couple of seconds, but then I pulled back abruptly, surprising her. She didn't have time to protest though, because I instantly slid down her gorgeous body and placed my face between her thighs. \n\nThe second I fastened my lips to her pussy and I started flicking my tongue on her needy clit, Lizzie screamed out in climax: \"Oh my god, Russ! Yeees! Ohh fuck yeeeeesss!\"\n\nHer sweet flavor inundated my mouth as I sucked on her gushing hole and lapped away at her swollen nub, drinking down her girl-cum. It was awesome. Her intoxicating taste, her choked little cries, her hands pressing my head harder against her splayed-open snatch while she kept cumming and cumming and I kept licking, sucking and lapping: I loved it, just as much as I loved the blowjob she had just given me, maybe even more.\n\nSomething snapped inside me as I devoured Liz's pussy, giving it all the inexperienced enthusiasm that I had to give. Feeling her fingers tug at my hair and hearing her constant moans made me feel good inside, truly happy. Nothing mattered more to me than Lizzie's joy and well-being, and the pleasure she was taking from my oral ministrations seemed to be accomplishing just that. \n\nI lost track of time as I french-kissed Lizzie's pussy and clit, working my fingers inside and around her honey pot, making her cum again and again. All I wanted was to make Liz feel good, so that she would gift me with more of her precious nectar in turn. And she did, abundantly, between lustful sobs and throaty orgasmic moans. \n\nAfter a while, as I kept munching on her clit and tongue-fucking her tender snatch with gusto, I began licking her with longer and longer swipes, exploring lower. When the tip of my tongue reached her pink little butthole, I gave it a long wet lick. Lizzie's entire body thrashed at that, as if she had been struck by a jolt of electricity.\n\n\"Sorry, Liz,\" I said, unclasping my lips from her labia for the first time in a long while.\n\n\"No, nonono,\" she mumbled groggily, opening her pleasure-foggy eyes. \"I liked that, Russ, you just caught me by surprise. It felt good, really good actually. It's okay if you wanna lick me there,\" she added, reddening a bit, \"I mean, if you don't mind...\" \n\n\"Mind? Oh Lizzie, I'm gonna love licking your sweet little butthole!\" I grinned, feeling my hardening cock twitch as I realized just how insanely hot and adventurous my sweet Liz was. \n\nImmediately, my nectar-shiny face plummeted back between her thighs, headed for Lizzie's puckered hole. Glistening with run-off juices and saliva, so cute and tiny and tender-looking, her pink little star was winking invitingly at me, pulsating with excitement. I gave Liz's pussy one last long lick that made her twitch all over, then I slurped my way down until my lips met her tight little asshole. \n\nEven though I had just learned how much Lizzie loved getting her pussy eaten out, I was not ready for her reaction at getting her asshole licked. Two seconds after I stared slobbering all over her rosy sphincter, she was panting and mewling. She even hooked her hands to the back of her knees to hold her legs up against her tits so that I could reach her butthole better. That only made me lap away at her tight little pucker with renewed vigor. \n\nAll the while Liz kept mumbling, as if in a trance: \"Lick my ass! Ooooh so good... Your tongue is amazing, Russ... Uuuhhh fuck yeah, lick my asshole!\" \n\nI kept working her clit and pussy with one hand as I rimmed her anus with all I had, kissing its crinkled edges and sucking on that cute tender rosebud. While I persistently tried to poke my tongue into Lizzie's twitching little orifice, I teased her spittle-lubed asshole with my fingers. It drove me nuts to see her tight anal muscles relax and gradually stretch around my ass-probing fingertips only to shrink closed again when I withdrew. \n\nEach time I nudged a fingertip into her butt-ring, Lizzie cried out in appreciation. Egged on by her moans, after an intense tongue bath on her pliant sphincter I gently pressed my index against it and pushed, easing my finger into her ass to the second knuckle. As I twirled my digit inside Liz's anus, I licked around her dilating orifice, keeping that pretty pink rosebud all moist and relaxed.\n\n\"Uuuuh Russ,\" she whimpered as my finger disappeared further inside her asshole. \"Oohhh my fucking god, it feels so good! Deeper, push deeper! Oohhh fuck yes, finger my ass!\"\n\nAnd I did, sawing my finger all the way into her slick butt-ring while I resumed lapping away at her clit. Liz's body seemed to be coursing with a pleasurable tremor and her voice was shaky as she muttered: \"More... Uuuuh more, pleeease! Give me... Mooore!\"\n\nDrunk with lust, I slowly pushed a second finger into Lizzie's docile little sphincter. She kept panting and babbling for me to give her more while I pushed deeper, slowly fitting both my digits inside the warm smooth tightness of her asshole. Keeping up my clit-licking routine to ease any discomfort, I pressed my fingers all the way in, like she asked me. I was caught by surprise when I felt Liz's hands grab hard onto my hair. An instant later, she yelled out: \"Uuuhh! Oohhh yeeees!\" \n\nI had to force my face down on her pussy so as not to be dislodged while she thrashed and moaned, hit in full by what looked like an epic climax. I sucked hard on her clit and twirled my buried fingers in her clamping asshole as she bucked and squirmed, consumed by pleasure. Needless to say, that just made my cock harder. \n\nWhen she descended from her peak, her voice was weak and her whole body was flushed as she murmured. \"Stop... Mmhhh, please stop... I can't... Just hold me, Russ, come here and hold me.\"\n\nI took just one more second to watch her sphincter drag out and then wink closed again as I extricated my fingers from her tight ass, then I lay beside my sweet Lizzie, wrapping her in my embrace. For a while we just cuddled and hugged, her soft curvy body pressed against mine, my stiff dick poking into her nectar-streaked thigh. \n\nI was kissing her head, my nose filled with the fragrance of her hair when Lizzie turned her face to look at me. Her breath was once again steady, but a deep ember of lust still glinted in her eyes. \n\n\"That was incredible,\" she whispered before kissing me, soft and long. Then she shocked me: \"I need you, Russ. I need to feel you inside me.\"\n\nI blinked. Unable to respond I just arched an eyebrow. Even though I hadn't spoken, Lizzie knew what I was hinting at without asking. I was recalling a talk we'd had about a year before, when she told me she wanted to stay a virgin. It wasn't even a religious thing, she just found the idea of saving herself for the man of her life sort of romantic, which, I had to agree, it kind of was.\n\n\"Yeah, I know what you're thinking,\" Lizzie said, reading me perfectly well and most likely going back to the very same conversation I was revisiting in my head. \"Look, Russ,\" she went on, her voice shaky with a nervous, excited edge, \"I really want to have you in me, but what I said back then is still true. And it's not like I don't want to do it with you... I mean, if there's anyone I'd want to pop my cherry it's you, but... I don't know, I just didn't expect any of this. Well, actually I sort of hoped it would happen and I'm soooo glad it did, but now... It's just that I'm not even on the pill and I don't want a condom between us, and I really really want to feel you inside me, but... But I...\" \n\nThen, shaking her head, Liz laughed. \"Well,\" she grinned impishly, before saying: \"Uhm, yeah, 'butt'... I guess that's what I'm trying to say!\" \n\nShe was smiling and relaxed all of a sudden, as if she had found the way out of her tangled thoughts through that one little word. Again, I blinked, sure that it must all be a dream I'd wake up from very soon. I didn't imagine any of this would happen either, although yes, I did hope it would. I knew all along how Lizzie felt about her virginity, and I was okay with it, I respected her choice one hundred percent. What I didn't expect at all was that she might offer a way around it, and such an amazing one at that: her butt.\n\n\"Liz... Are you saying what I think you're saying?\" I spelled out slowly and timidly, sure I must have misunderstood, praying that I hadn't.\n\nShe nodded, smiling softly and pressing herself tighter against me. Her tiny hand grabbed my boner and slowly started pumping me. \"Yeah, Russ. I mean it. If you want, we can do it. I really want to feel your cock inside me, and I'm pretty sure I'll like it back there...\" she snickered, making me laugh in turn. Yeah, based on her reaction to my anal rimming and fingering, it was safe to assume she might like anal sex too. As for me, I had been dreaming about her plump beautiful ass for months.\n\n\"So, what do you think, Russ?\" she went on excitedly, her big tits jiggling in time with her heaving breath. \"Can you settle for my ass? It's not like I don't want you to have my pussy, like, ever, I'm just sayin-mmhh-mmhmph!\"\n\nA deep devouring soulkiss was the only answer I could come up with, bursting with love and lust as I was. Lizzie laughed when we broke our lip-lock and I hastily turned to rummage in my nightstand drawer, grabbing the bottle of lube that I sometimes used to masturbate.\n\n\"Right, I'll take that as a yes then,\" she tittered as she shifted and repositioned, getting on all fours.",
        "\"Yeah, that was a big ginormous yes, Liz! You have no idea how... Oh god...\" I trailed off, awestruck by the vision displayed before me.\n\nThe sight of my sweet Liz on her hands and knees on my bed, her ass in the air and her pretty face resting on my pillow, took my breath away. In that docile position, with her back arched and her rump tilted up, the spectacular roundness of her juicy bubble-butt was accentuated to the extreme. \n\nI was practically drooling as I knee-walked closer to the offered masterpiece that was Lizzie's plump beautiful ass. My hands were trembling and my cock was flexing with anticipation as I lay my palms on her soft meaty asscheeks and started reverently caressing them, murmuring as if in a trance: \"Oh my god... So beautiful... So perfect... Amazing, just amazing...\" \n\n\"I'm not even gonna ask you if you're talking about me or just my ass,\" Lizzie quipped, looking back at me as she wiggled her jiggly booty with little undulating motions, chuckling: \"I don't want you to incriminate yourself, you know...\"\n\nWe both laughed and I nodded my head to her smiling face in appreciation of her indulgence. Her silvery laughter became a low purr as I leaned down and began planting soft adoring smooches on her sumptuous asscheeks, kissing them in turn before spreading them apart so that I could lick and slobber my way down her buttcrack to her cute little rosebud. \n\nI knew I had to lube her properly with more than my saliva, and I planned to do that and then some, but I couldn't stop myself from giving Liz's winking pucker another thorough rimjob. To the sound of her soft coos and adorable throaty whimpers, I got Lizzie's virgin asshole ready with my tongue as best I could, licking her sphincter into relaxation and wiggling my tongue inside that pink little orifice, making her mewl in lascivious joy. As I did that, I methodically slipped my fingers in her tight wet pussy to coat them in her nectar so I could apply her wetness to her tiny butthole. That didn't really work, though, since I slurped down most of those delicious girl-juices myself.\n\nDetermined to get Lizzie nice and ready so she would feel as little discomfort as possible, I soon lost myself in a bout of lewd ass-worship that had little to do with mere preparations. It was Liz who finally reminded me about the main event. Breathing hard while I kept slurping away on her puckered butthole, she sounded pleading and turned on like crazy by my long and devoted rimming as she moaned: \"Ohhh Russ, your tongue feels awesome in my ass, you got me so hot! I'm ready, I'm so ready for you uuhh... You got my asshole all tingly... Enough teasing now, I need you inside me, please!\" \n\nIf I hadn't wanted to sink my cock inside Lizzie's virgin little asshole so much, it would have been way more difficult to convince me to extricate my face from between her luscious butt-cleavage. Planting one sloppy parting kiss on her anus, I straightened up on my knees behind her upturned booty. As I uncapped the lube, Liz reached her tiny hands back and planted them on her glorious asscheeks, pulling them open for me. The tips of her fingers sneaked down her ass-cleft and reached the wet edges of her sweet little asshole, pulling them apart to make her sphincter gape slightly before my eyes. That was hot beyond description.\n\n\"Go ahead, Russ,\" she murmured, \"grease me up. Make my ass all nice and wet for you.\"\n\n\"Liz,\" I said, meeting her gaze as I started pouring lube straight into her orifice, letting it dribble into her offered asshole, \"you don't have to do this if you don't want to. Seriously, I'll totally get it if you have second thoughts, you know. Granted,\" I added with a snicker, \"my dick will explode and I'll have the worst case of blue balls ever, but still... I just don't want you to feel forced into doing stuff, okay?\"\n\nLizzie wiggled her rump, squirming as the cold oily fluid coated the inside of her untouched rectum. \"Mmh, Russ, you're the best guy ever,\" she murmured, gaping her butt-ring more as I circled my fingers around her anus, rubbing more lube all over her sphincter before pushing my slippery digits inside her ass, greasing her up real good. \"See, the fact that you'd ask me that, and that you care about me like that... That's why I wanna do this, because I know it's gonna be fine as long as it's with you. It feels right, and I know I'm safe with you.\"\n\n\"You are, Liz,\" I said, leaning down on her bent-over frame so that we could share a long soft kiss. \n\nWe were both giddy with excitement by the time I was done prepping her virgin butthole. Nestling my achingly hard dick between those fabulous asscheeks, I lathered my cock and her asscrack with more lube. As I pressed my swollen glans to the entrance of her slippery rosebud, Lizzie purred, holding her buttocks open for me. I lay a hand on top of one of hers while with the other I reached around and felt my way down her soft tummy to her sopping wet pussy. Once my fingers met her snatch, I started rubbing her clit. \n\n\"Ready, baby?\" \n\n\"Yes,\" she nodded, smiling at me over her shoulder as I poked my cockhead against her willing little asshole. \"I love you, Russ. Go ahead, do it. I want you inside me so bad.\"\n\n\"I love you so much, Lizzie,\" I said as I pushed my cock into her virgin asshole.\n\nAt first, it seemed like I wouldn't make it into her ass. My bloated purple glans looked obscenely huge pressed against that tiny pink pucker. Slowly circling Lizzie's clit with my fingers, I held my slick hardness in my other hand and nudged my tip into her orifice, lining up my cock while I kept the pressure on her oily sphincter. Lizzie's fingertips pulled the edges of her orifice further apart as I pressed more firmly against her tight backdoor. Then, as Liz let out a choked gasp, her forbidden little hole relaxed and surrendered to my gentle push, and I slipped in.\n\n\"Oh fuck, Lizzie!\" I said, my eyes bugging out as I watched her butt-ring dilate and distend to accept me inside her virgin ass. I stopped pushing almost immediately after I punched through her pliant sphincter, once Lizzie's butthole had already gobbled up my cockhead and a good inch of my shaft. Her anal muscles clenched around my pole and her anus seemed to suck me in, holding me trapped in its warm slippery grip. \"Ahh you're so tight... You okay, Liz?\"\n\nGasping for breath, Lizzie nodded. Her eyes were scrunched shut and she was biting her lips, trying to adjust to her first anal penetration. She had let go of her fleshy globes when she felt my cock slide past her sphincter and wedge itself inside her ass, and she was now grasping the bedspread in her fists. As she squirmed and whimpered, I held still, caressing a plump asscheek with one hand while still steadily diddling her clit with the other, trying to soothe her discomfort. \n\n\"Are you okay, Lizzie?\" I asked after a while, feeling her butt-ring loosen its grip a bit and sensing her whole body relaxing, her breathing coming easier. \"Do you want me to pull out? Just say the word, we can stop right now if it hurts.\"\n\n\"N-nooo-ohhh, don't... Don't pull out, please stay in me, Russ,\" she panted, opening her eyes and smiling weakly. \"Uuhh I can feel you... Inside me... Oowhhh, so big,\" she mewled \"you feel huge in my ass! Aahhh you're stretching me out so much! So weird but... Uuhhh, it's good too... Go a bit deeper now... Just go slowly, I think I can take more. Give me more, slow, slow uuuhh!\"\n\nIf her encouraging words weren't enough, her lustful tone and her body language let me know that she really was okay. Reassured that I wasn't hurting my sweet Lizzie, I began filling her plump jiggly ass with my cock. \n\nKeeping an eye on her flushed face and diddling her nectar-drenched clit, I eased my shaft further into Liz's untouched rectum a little at a time. I pushed in and then I stopped, then I pulled back out a little and pressed in again, going slightly deeper, setting a super slow in-out buttfucking rhythm. Having to resist the impulse to just ram myself all the way up Lizzie's smooth rectum was deliciously torturous, but I managed to go very gently as I claimed her anal virginity a millimeter at a time. I was high on the feel of Liz's snug slippery asshole gradually opening up for me, resisting a bit at first but then accepting me, letting me slide deeper and deeper inside her tiniest, most delicate, most private hole. It was incredible to be allowed into that warm velvety tightness.\n\nBy the time my crotch met Liz's pillowy asscheeks and my balls bumped into her weeping slit, my cock was harder than it had ever been before. We both let out a groan as Lizzie's stretched-out sphincter clamped around the fat root of my shaft. The rubbery heat of her anal walls gripping at me while her rectum reshaped itself around my girthy shaft felt so good, beyond anything I ever dreamed of. Being enveloped from tip to base within the smooth hugging snugness of Liz's ass was heavenly. It was mind-blowingly erotic but really intimate too, in a weird and unexpected way. \n\n\"Lizzie, oh my god!\" I gasped as I leaned down over her arched back until our heads were close and I could nuzzle her neck. \"You took all my cock! I'm all the way in your ass, Liz, it's awesome!\"\n\n\"Uuuh Russ!\" she moaned into my mouth, her half-closed eyes burning with lust. \"I can feel your cock pulsing in me... Oh my god, you're so deep in my ass... I feel so stretched and stuffed, uuuh! You're filling me so good, Russ, I love feeling so full of you!\" \n\n\"Baby, you're amazing,\" I murmured, kissing her beautiful face. Still circling my fingers on her swollen clit, I wrapped my other arm around her, right across her heavy tits. Filling my palm with a big heavy boob, I clutched onto Liz's voluptuous body and pressed my chest to her arched back. \n\nHolding Lizzie tight to me, I stirred her bowels with my butt-stretching shaft, making her moan uncontrollably as her asshole started squeezing me erratically. As I slowly rocked my hips into her fleshy ass, my boner twitched with pleasure inside Liz's warm velvety rectum. My arousal grew by the second and clearly so did Lizzie's as my fingers accelerated their clit-frigging rubs. \n\n\"This is unbelievable,\" I grunted into her panting face as I kept slowly grinding my fully buried cock inside her snug anal tunnel, shivering all over, intoxicated by my very first taste of sodomy. \"You're the best Liz! Your ass is epic... So hot and tight, so good! Ohhh fuck!\"\n\nSuddenly Lizzie's body started trembling underneath me and her eyes popped open. Her mouth was slack and her stuffed asshole clenched harder around me as she mumbled urgently: \"Uuuh, kiss me Russ, I'm... Ooooh fuck, I'm gonna cum! Ohh yeeah, touch my clit, keep rubbing me like that, yees! Uuhhh fuck yes, kiss me, finger me, kiss meeehhh!\"\n\nRolling her clit faster between my fingers, I had barely the time to suck her offered mouth into mine before Lizzie came. It was so sudden and intense. She thrashed in my embrace and I felt her pussy juices dribble all over my fingers while her rippling rectum started to clench and release rhythmically, massaging my fully buried shaft. It felt incredible. Lizzie's already snug asshole tightened even more as her clingy cock-stretched sphincter gripped me at the base and her anal walls squeezed my length in a sequence of milking anal tugs that took my breath away. \n\nIt was just too good. Before I even knew it, I was cumming like crazy up Lizzie's ass, filling her rectum with a torrential spray of warm seed. I think the feel of my sperm flooding her bowels made her orgasm even more intense, because her pussy just kept gushing all over my clit-frigging digits. Blown away by such a powerful peak, surprised by the intensity of our very first anal coupling, Lizzie and I feasted on each other's lips, our savage soulkiss muffling our grunts of release. \n\nWe broke our lip-lock long after my cock stopped spurting and her asshole stopped clenching. We were breathless and motionless and awash in pleasure, Lizzie still on all fours with her face pressed sideways into the pillow and me still draped over her, mounting her and holding her, my chin brushing her neck. We just breathed for a while, basking in the afterglow, my hips pressed against her meaty ass and my cock crammed balls-deep inside her rectum. \n\nIt was Liz's little voice that broke the silence. \"Mmhh Russ,\" she groggily said, \"you came so much in my ass... I can feel your cum deep inside me...\" \n\nI kissed her neck before replying. \"Yeah, sorry. I tried to resist, but when you started squeezing me it was just too good.\"\n\n\"Don't worry, I loved it,\" she said, turning her face to nuzzle me and smooch my nose. \"I could feel you getting even bigger and harder while you pumped all that creamy cum deep in my ass. That was so hot!\" \n\nWrapping my arms even tighter around her, I shifted and rolled, dragging Lizzie with me so we were lying on our side, spooning. As we cuddled and kissed languidly, I considered pulling out of her anus, but I didn't. The way Liz kept her plump ass pushed back against me, holding me snugly sheathed inside her cum-sloppy rectum, reassured me that she didn't mind. After a while, Lizzie unclasped her mouth from mine and started gently grinding her bubble-butt into my crotch. \n\n\"Russ, you're still hard!\" she giggled, wiggling her sumptuous dick-crammed rump. She sounded sexy as hell as she purred: \"You really like having your cock in my ass, uh?\"\n\n\"Well, hardish at least\" I shrugged. I was so turned on by the whole situation and her ass felt so good around my cock that I had barely softened. \"But yeah, I love your ass Liz, a lot. It's so round and juicy and soft on the outside, so tight and hot and smooth inside. Your ass is beautiful Lizzie, just like the rest of you.\" \n\n\"Mmmh, that's so nice, Russ...\" she purred contentedly as I massaged her tits with one hand while kneading her glorious buttcheeks with the other. As I paid homage to her gorgeous curves, she craned her neck and looked me straight in the eye, saying: \"I love feeling you inside me, but now I want you to really fuck me. I'm so horny, Russ, I need you to fuck my ass.\" \n\nThose words sent a jolt of life to my chubby cock. \"Just keep telling me that and I'll be ready in no time, Liz!\"\n\n\"Oh yeah? And what if I do this?\" she grinned, giving my buried cock a soft buttery squeeze with her anal walls. \"Does this help?\"\n\n\"Fuck yeahhh,\" I groaned as Liz started massaging my shaft within her tight semen-slick asshole. \"Lizzie, you're amazing, aahhh!\"\n\nI held my sweet Liz in my arms and kissed her deeply, spooning her as closely as possible while she worked her snug creamy rectum around my dick. Tightening and releasing her anal muscles around me, she basically sucked me hard with her asshole. That warm rippling tightness and the lewd feel of my cum squelching around Lizzie's dick-stuffed bowels had me stiff and throbbing in no time.\n\n\"Mmmh, seems like you're ready to fuck my horny little asshole now,\" Lizzie murmured in my mouth, her voice thick with the same anal lust that I felt coursing through me. \n\n\"Oh yeah, baby,\" I grunted. Pawing at her huge boobs and flexing my hardness in her anal sheath, I rolled her on her tummy and lay on top of her. \"You want your ass reamed good, don't you?\"\n\n\"Uh-hu,\" Lizzie nodded, resting her face sideways on the bed while I guided her surrendered body until she was on her knees again, ass tilted high and legs spread so I could kneel between her nectar-streaked thighs. Her hand darted to her pussy as soon as we were in position and she immediately began frigging herself. \"Fuck my ass, Russ! Don't worry, I'm ready, I want this so much.\"\n\nHolding her plump jiggly asscheeks in my palms, I spread Liz's round buns apart and feasted my eyes on the mind-staggering sight of her dilated butt-ring wrapped around my embedded shaft. Rabid with desire, grinding into her majestic ass, I glanced at Liz's face. Her mouth was open and she had an almost pleading expression on her face. That was all I needed to see. \n\n\"Love you, Lizzie,\" I murmured as I sank my fingers into her fleshy globes and started sliding my cock out of her asshole. \n\n\"Love you too-ooh-oooowwhh!\" she gasped while half my shaft vacated her ass. She sounded almost disappointed at the emptiness, so I immediately pumped her full again, sliding back into her until I was once again jammed balls-deep inside the slick velvety warmth of her rectum. That made her purr. \"Uuuhh yes, push it back in, awwwh! Yes... Uhhh fuck yeees!\" \n\nKneading and squeezing Lizzie's bouncy buttcheeks in my hands, I pulled out and pushed back in again, starting to assfuck her. Watching her reactions, I withdrew a bit more of my rock-hard boner at each out-stroke, picking up speed with every gliding in-stroke. Despite her awesome tightness, Liz's ass seemed willing to accept me pretty easily, lubed up and full of cum as it was, allowing me to set a nice in-out buttfucking tempo. While Lizzie cooed and whimpered in pleasure, frigging her clit in time with my ass-stretching strokes, I sodomized her with gradually longer thrusts. \n\nAs awesome as it felt to be fucking her beautiful plump ass, the awareness that Lizzie was loving it too made our anal coupling so much better. The little sounds of pleasure she made were music to my ears and the perfect O of her open mouth spoke volumes, even though only choked whimpering squeals came out of it as I steadily plowed her asshole. The visual of her forbidden little orifice wrapped around my pistoning cock and her meaty juicy asscheeks filling my palms etched itself in my mind. That sight alone was almost as good as the sensations I got from moving inside my adored Lizzie. Almost, but not quite: being joined with her, and enjoining our sodomy together, was truly priceless. \n\nIt wasn't long before I was pounding Liz's ass with abandon. The frothy mixture of lube and cum coating her bowels and my shaft made her butthole extra slippery, limiting the friction to the natural snugness of Liz's freshly deflowered rectum. Feeling her anal sheath adapting to my pole like a perfectly fitting glove encouraged me to pick up the pace. At that point, with me lustfully thrusting my cock into her smooth rectum, Lizzie finally managed to turn her mewls of pleasure into words.\n\n\"Uuh fuck! Uhhh Russ, yeeees,\" Lizzie, sighed in unrestrained delight as I sodomized her deeply. \"Oohh yes, fuck my ass like that!\" \n\n\"You like it, uh?\" I grunted, slapping a fleshy buttcheek as I slammed harder into her ass. \"You like my cock in your ass, Lizzie? You like how I'm stretching out your tight little asshole?\"\n\nYesss! Ohhh yes, I love your cock in my ass!\" she yelped, clearly turned on like crazy, just like I was. \"So hard and big... So much cock in me, so deep in my ass! Fill me, Russ, open meee!\"\n\nGrunting and panting, I crammed my raging cock inside Liz's oily asshole with rabid passion while she worked her pussy ever more frenziedly. As I fucked her ass faster and faster, I watched in awe how Lizzie's greedy sphincter dragged out along my shaft, clinging to me when I withdrew from her slippery anus and then collapsing on itself on the in-strokes, surrendering and sucking me in as I reentered her snug cum-sloppy anal tunnel. \n\nIt was all so obscenely sexy but also surprisingly intimate. Seeing that we could both give and take pleasure from that supposedly forbidden act made me feel connected to Lizzie in a new intense way. Like in every other aspect of our lives, Lizzie and I synced in our anal coupling too. When I slammed into her clingy anus, she pushed her rump back to meet my spearing cock, relaxing her anal muscles to let me slid inside her faster and deeper. When I pulled out, she massaged my shaft within her sperm-coated rectum, increasing its warm tightness to hold me in, as if dreading the temporary emptiness which I was quick to fill again with another long, deep, ass-splitting thrust. ",
        "For a while, we were in buttfucking heaven. Besides the chorus of our groans of anal delight, the squishy sound of Lizzie clit-diddling fingers and the fleshy impact of my groin bumping into her conquered bubble-butt where the only sounds in the room. Lizzie's throaty cries were growing raspier and louder by the second as I reamed her ass relentlessly. I knew I couldn't last much longer if I kept sodomizing her with such a reckless rhythm, but I just couldn't stop. Her ass was so tight and hot and slippery, and all I wanted was to bury myself deep in her cozy rectum again and again and again.\n\n\"Lizzie, baby,\" I eventually growled, humping her bubble-butt furiously, \"I'm gonna cum soon, your ass is just too good.\"\n\n\"Yeees! Uuuhhh yes, cum in me,\" she practically screamed, glancing back over her shoulder with the wildest look on her eyes. \"Give me your cum, Russ, I'm so close... Uuuuh! Fuck me hard and pump my ass full of cuuuum!\"\n\n\"Ahhh fuck, Liz,\" I grunted, unleashing a flurry of butt-wrecking thrusts. Crazy with lust for my Lizzie and her beautiful plump ass, I rode her rump like a mad possessed. \n\n\"Uuuhhh yes, yeeees, harder, deeper,\" she sighed, slamming her bouncy bubble-butt into my impaling shaft. \"Uhhh Russ, cum with me! Cum in my aaaaass!\"\n\n\"Fuck, baby! Fuuuuck!\" \n\nThe wet sounds of Lizzie's fingers slapping away at her swollen clit mixed with my howl of release as I rammed myself all the way up her ass and started cumming explosively. Pushed forward by my last spearing thrust, I leaned down over her arched back as I flooded her bowels, still bucking into her anus. The streams of jetting sperm that I shot deep in her rectum triggered Lizzie's climax, making her whole voluptuous frame shake underneath me as she came screaming. \n\n\"Uuhhh! Ooohh my god, Ruuuuuss!\" \n\nMaybe it was my weighing on her like a rutting animal or maybe it was the intensity of her orgasm, but whatever the reason, while her rectum clamped around my ejaculating dick, Lizzie's knees buckled and gave way. She fell forward on her tummy, and I went down with her. Lying on top of her, unable to stop grinding my hips against her glorious bubble-butt, I kept pushing my throbbing pole in her pulsating asshole while she screamed her toe-curling pleasure into the pillow. \n\nIn the haze of that blinding orgasm, while I emptied all the seed I still had deep inside Lizzie's milking rectum, I could feel the fluttering motions of her fingers working her sopping pussy right under my ballsack. It brought a grin to my face to realize that Liz was still rolling her clit between her digits despite having her hand trapped under the messy heap of our sweaty, climaxing bodies. \n\nI was totally drained of cum when my cock stopped pulsing and Lizzie's quivering asshole relaxed its orgasmic spasms. Planting my elbows outside her pale shoulders so I wouldn't be weighing too much on her, I rested my spinning head on Liz's neck and exhaled, spent.\n\nAs I lay there on top of her soft curvy body, my cock still embedded in her ass and my face pressed into her fragrant auburn locks, I let the soothing sound of Liz's breathing lull me away. For a while we were just too wiped out to do anything but stay as we were, recuperating. We both stirred from our blissful afterglow only when my shrinking cock slipped out of Lizzie's well-fucked asshole with a slurping pop. \n\n\"Aww no, all your creamy cum...\" she mumbled. Feeling her shift underneath me, I rolled off of her. Lizzie immediately reached her hands back and spread her asscheeks apart, looking over her shoulder, attempting to see past the protruding curve of her bubble-butt. \"Damn, I can feel it leaking out of me! Look!\" \n\nReddened and puffy, glinting with oozing sperm, Lizzie's asshole was gaping lewdly open. With her butt-ring so stretched out and without my cock there to plug it, the massive load of cum I had pumped inside her ass was bubbling out of Liz's sphincter in thick pearly dribbles. The sight of my semen oozing from her ravaged anus and trickling down her plump asscheeks and buttcrack was insanely hot, yet there was something comical about Liz's furrowed brow and droopy expression.\n\n\"Want me to push it back in?\" I joked, actually finding it sort of sweet that she didn't want my cum to leave her body.\n\nLiz brightened up at that. \"Yes, please,\" she nodded with a cute mock-pout, winking at me, \"I like having you inside me.\"\n\nI smiled at her as she swayed her sumptuous rump toward me and pried her own asscheeks further apart so I'd have better access to her cum-smeared anus. Kneading a soft round buttock with one hand, I started scooping up the white gooey rivulets trickling out of Lizzie's slowly closing asshole, bringing every dollop back to her freshly deflowered sphincter. She cooed and giggled each time I lead a stray glob of sperm back to her shrinking butt-ring and pushed it inside her ass with my fingertips.\n\nOnce Lizzie's abused little orifice winked closed, not wanting to force it open again after the heavy stretching it had just taken, I rubbed the rest of my run-off seed all around her puffy reddened rosebud. Lizzie seemed to like it. She purred like a kitten as I soothed her well-fucked asshole with my cum. Since she enjoyed those lewd attentions, I took my time massaging my gooey semen all over her once again tight puckered hole with light, delicate circular motions.\n\n\"Mmh that was nice,\" she exhaled eventually, once I gave each of her beautiful curvy asscheeks a parting smooch before lying down beside her. Resting her head on my chest, she looked up into my eyes as she hugged me tight, cuddling into my embrace. After a brief silence, she spoke again, sounding serious. \"Thank you, Russ. Really. This was great.\"\n\nI tucked a stray reddish brown lock behind her ear before replying. \"No need to thank me, Lizzie. Actually, I feel like I should be thanking you. I mean, what we did, having anal sex...\"\n\n\"It was amazing!\" she couldn't help but interject in an excited tone, squeezing me harder in her hug, pressing her huge heavy tits firmly into my side.\n\n\"Yeah it was,\" I continued, \"that's why it should be me thanking you. I mean, losing my virginity to you, with you... It felt right and great and... It was so mind-blowing, I can't even find the words!\"\n\n\"I'll go with 'unforgettable',\" she smiled, giving me a soft peck on the lips. As she pulled back, she chuckled and then grinned impishly, adding: \"And that was just one virginity I lost, actually. Just think about the other one!\"\n\nI was stunned for a second, blown away by the sheer awesomeness of this sweet girl I held in my arms, my Lizzie. Getting all fluffy inside and light-headed with emotion, I pressed my lips to her soft warm mouth, trying to put all my love for her in that kiss. My heart was pounding and my mind was filled with images of her, of us, our past together, all those memories leading us to that very moment and the next and the next, where we were still kissing and hugging and cuddling. \n\nLizzie was nuzzling my neck and I was sniffing her lush hair, getting high on her signature scent when she suddenly lifted her head, looking at me with a questioning stare. \"Russ,\" she slowly began, \"about what you said before... About you buying me a copy of The Colour of Magic, first edition, signed by Terry Pratchett himself... You were just kidding, weren't you? I mean, that first kiss back there was your real present, and the book thing was just one of your dorky jokes, a pretty well crafted one I admit, but still a joke. Right?\"\n\n\"No,\" I shook my head emphatically, surprised that Lizzie would think I'd joke about her number one absolute favorite writer in the world. \"I meant it, Liz. I actually got you the book.\"\n\n\"Seriously?\" she persisted, still doubtful. \"And this, right now, is not part of the joke either?\"\n\nI laughed at that and grabbed her by the shoulders, pressing my forehead to hers as I stared into her big brown eyes. \"Lizzie,\" I stated, dead serious, \"I got you the book. It's on its way. The only problem is that it wasn't delivered in time for your birthday this week. But I tracked it and I called the shipping company and it should be in your mail in a couple of day-mmphsh-mmph!\" \n\nA flurry of smooches muffled my words as Lizzie kissed me and thanked me and yelled out her happiness. \"Oh my god, Russ! Thankyouthankyouthankyou!\"\n\nGladly surrendering to a hail of peppering kisses all over my face, I basked in one of Liz's trademark moments of pure joy. Then, suddenly, she stopped. \n\n\"Did you hear that?\" Lizzie said, her head titled to the side, an uncertain look on her face. \"I thought I heard something...\"\n\nShaking my head, I tried to focus on something other than my sweet Lizzie snuggling naked in my arms. And yes, I did hear something. Up until that moment, I had filtered out all the noises coming from the garden. The music and confusion of the party had been just a vague far away sound while Liz and I had our own private celebration. But suddenly I realized that the constant background noise of people dancing and laughing wasn't there anymore, replaced by a different sort of chaos. \n\n\"That's weird... There's no music,\" I said, puzzled. \"And what are people yelling about, I can't...\"\n\nThen we heard the sirens, loud and near. At the same time, the bright blue lights of an approaching police car flashed from outside the window.\n\n\"Oh my god,\" Lizzie yelped, her eyes wide with shock and her voice trembling. \"Someone called the cops!\" \n\nAnother blare of the sirens sobered us up completely from our shared state of sensual bliss, bursting our happy bubble and forcing us to face whatever mess was happening around us. We jumped off my bed and hastily put our clothes back on. I had to hold up Lizzie's hair myself as I zipped up her dress, her hands were shaking so bad. \n\nI watched her jump around on one foot while she put on her heels and I caught her in my arms when she tripped and almost smashed her head against my desk. She had a terrified look in her eyes and her pretty face was all screwed up in worry as I held her tight and spoke to her, trying to calm her down while she rambled on about all sorts of catastrophes that she imagined going on out there.\n\n\"Breathe, Lizzie, just breathe! Like that, good girl,\" I murmured, caressing her hair and soothing her. \"Now listen to me, it's probably nothing. I guess maybe one of the neighbors complained about the music at this time of night or something, so don't worry. And no,\" I added, unable to hide a smile as I prepared to dispel the most apocalyptic of her ramblings, \"I definitely don't think that there was any sort of mass murder at all, Lizzie. I didn't hear any gunshots. Did you?\"\n\n\"Well, no,\" she admitted reluctantly, somehow reticent to let go of the idea that one of her schoolmates might have gone completely nuts, choosing her party to act out his insanity. \"But maybe the shots happened earlier, while we were having sex and we were too caught up in it because it was so great and we didn't hear anything except for our hearts beating in unison and...\" \n\nSeeing my expression of mixed sympathy and doubt, Lizzie relented. \"Okay, Russ,\" she said, \"I see what you're not saying. And I agree, I guess. I'm acting crazy, ain't I?\"\n\n\"Just a bit,\" I conceded with a smile, \"just enough to be adorable.\"\n\nShe chuckled as we hugged. Then, looking much calmer, she said: \"Right, let's go talk to the cops then, yay!\"\n\nWe were barely out of my bedroom when Lizzie unexpectedly turned about, stopping dead in her tracks right in front of me, almost making me knock her over. Grabbing my hands in her tiny hands, she locked gazes with me and let out one of those little bright laughs of hers. \n\n\"Russ, no matter if there was a murder/suicide or a drunken fistfight degenerated into an all out brawl,\" she trailed off, rolling her eyes in mock exasperation at my skeptical expression, \"or yeah, okay, even if it's just the creep across the street who called the cops about the music. Whatever it is out there, I just wanted to say...\" she stopped then to get on her tiptoes and plant a soft kiss on my lips, then she concluded: \"Best birthday ever!\" \n\nI smiled at her and we kissed once more, longer and deeper. Then Lizzie took a steadying breath and turned, holding my hand and pulling me along. With our fingers intertwined, we went downstairs to see what everybody else had been doing while the two of us were busy being happy."
    ],
    "authorname": "ZenZerker",
    "tags": [
        "anal",
        "anal first time",
        "oral",
        "neighbor",
        "love"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/backdoor-sweetheart-ch-01"
}
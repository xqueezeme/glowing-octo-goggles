{
    "title": "The Last Bridge in Pittsburgh Ch. 11",
    "pages": [
        "After Sara went to bed, I retreated to the patio and took out my notebook to try to make sense of what had just happened.\n\nMy first impression was that I had seriously fucked up. A couple different times, actually, but especially when I had attempted damage control on Ava after her first of now two voyeuristic moments.\n\nAnd now my girlfriend's sister was wandering around probably more dangerous than ever.\n\nFuckup number one - I had told Ava, in trance, something along the lines of, \"It's normal to talk dirty to Sara while having sex.\" Maybe slightly different wording, who knew. My intent with this line had been to justify what she'd overheard the night before, when we'd caught her spying on us and I had worried she would somehow figure out I was conditioning Sara. Now I realized that it had probably emboldened Ava. Perhaps before she had been a peeping Tom - or maybe it had all been a coincidence - but now it was normal for Ava to talk dirty to Sara during sex.\n\nAnd so now she was slipping in and out of the bedroom, saying shit to her tranced sister, unknowingly conditioning her.\n\nFuckup number two, though, was something else I had said. I struggled to recall the exact words. Something about finding our dirty talk... 'sexy'? Or was it 'hot'? I was kicking myself, now - I should have written down what I had said. Really I should have put together a script, or just thought things out more clearly? I had charged up into the ruin next door to confront Ava with my only plan being improvisation. Worst case scenario, that vaguely remembered line might have conditioned Ava into finding intruding on me and Sara was hot.\n\nThough, who knew, maybe she already had found it hot. At this point, it was hard to tell what was conditioning and what was Ava, with her confusing cocktail of angst, pride, and apparently loneliness.\n\nFalsification. That was the problem with mind-control, I thought to myself.\n\nLack of clarity on my past instructions aside, I absolutely had to get things under control before we were in close quarters in the truck on the drive back to Pittsburgh. The dry desert air cracked my skin as I leaned forward and wrote my goals for the next two days.\n\n- Remove from Ava my conditioning about 'talking dirty' to Sara.\n\n- Remove from Sara Ava's accidental conditioning about liking to be watched by her sister.\n\n- Condition Ava to avoid us while we were having sex.\n\nLittle did I know I would totally fail. But hey, I'd have fun doing it.\n\n--\n\nThings started going off the rails pretty early the next morning. I came downstairs a little late, having slept in a bit, to find Sara reading in what was left of the living room, lounging on a sofa curled up in a big yellow blanket. I grunted a hello and blearily collapsed, still not yet woken up, in the only other seat - an old leather recliner, its upholstery cracking slightly around me as I sat down.\n\n\"Good morning!\" Sara chirped, somehow drawing a bookmark from thin air to fold it into her book. \"I was wondering... I was wondering if you'd like to fool around a little?\"\n\nI chuckled a little, still shaking the sleep from my eyes.\n\n\"Certainly not down here, with Ava creeping around like she was last night.\"\n\n\"Oh really?\" Sara said. And with that, she stood up and unwound her blanket.\n\nNow, I'm aware that there is - well, at least there used to be - a big industry that made lingerie. Billion-dollar businesses. But I've never really been clear on how they competed with the sort of normal bras and panties that Sara stood in front of me in. Maybe it was they didn't feel like a fantasy in some catalog. There was something accessible about an old cotton bra with a couple stains. I stared at Sara's cleavage as she climbed into my lap.\n\n\"I have to say, this is a lovely way to wake up.\"\n\nSara laughed softly. \"You came in sleepy but you seem to be up now.\" She ground herself into my crotch to punctuate the wordplay, to which I groaned.\n\n\"Want to come upstairs with me? Maybe share a shower?\"\n\n\"I've already showered. But I'll happily suck you off down here.\"\n\nIt was my turn to laugh. \"Babe, your sister has become a real looky-loo. Let's go upstairs.\"\n\n\"Ava's out getting groceries.\" Sara made a strange face I couldn't quite interpret. \"Let's not bother.\"\n\n\"Are you sure- \" But Sara was already peeling my ratty gym shorts off.\n\n\"Some people.\" My girlfriend shook her head as I popped from my boxers fully erect. \"Always looking a gift blowjob in the mouth.\"\n\n\"Hey, now\", I wanted to say. \"I worked hard to brainwash you into those blowjobs\". But I didn't.\n\nFor the next half hour, I reclined happily in the crumbling leather easy chair, eyes shut against the warm sun streaming in through the windows, lost in the indescribable sensations of the woman I loved. Instead of working me intensely with her lips as she often had, Sara instead spent a long time licking each part of me softly, carefully, many times over. She would flick my head with the tip of her tongue before running the whole length of it down the whole length of me, or, holding my shaft firmly in one hand, carefully plant a kiss on each square inch of it.\n\nAnd then I heard the toaster across the room and opened my eyes to see Ava peering at the two of us from behind the counter. Her eyes met mine, and for a long moment we stared at each other, a look of smug amusement on her face and total surprise on mine. \n\nFinally, a soft moan from Sara as she continued to nurse me broke our stare. I almost expected my girlfriend's sister to bolt - the way she had the last two times - but instead she merely took her toast and hopped up to perch on the counter against the back wall of the kitchen facing us.\n\n\"Sara\" I muttered. \"Ava's here - could you get off of me?\"\n\n\"Sure.\" She panted back at me. \"Just give me a few more minutes\"\n\n\"Babe, I - \"\n\nBut Sara had already gone back to blowing me, her gentle kisses and licking now replaced with energetic bobbing.\n\n\"Ava.\" I said, finally acknowledging the voyeuristic elephant in the room. \"Do you... uh, do you mind?\" The words hung surreally in the air, almost ludicrous. In my defense, what were you supposed to say in situations like this? I truly had no idea.\n\nAva smirked back, and regarded us for a moment, pushing her hair from one side of her undercut to the other.\n\n\"I don't really mind. Honestly, it's a relief something's finally going on. It's gotten so boring out here in the desert, you know?\" She paused to take a bit out of her toast. \"And I know Sara likes it.\" Ava's gaze slid over her sister's nearly naked body from behind, a hard edge.\n\n\"We don't like -\" I mumbled, my ability to articulate lost as Sara's lips did their best to draw my brains out through my cock.\n\n\"Oh, shut up.\" Ava waved her hand dismissively. \"Sara clearly wanted to get caught. Why else would she keep fooling around with you places I can see?\"\n\nI thought to myself that the first time had been an accident, and the second had just been Ava's intrusion. But... what did the past matter? It dimly occurred to me that Sara had probably set us up to have Ava walk in on purpose. She was certainly transfixed now.\n\n\"And she's certainly not protesting now. Are you sis?\" Ava echoed my thoughts.\n\nSara pulled herself off of me for a split second to say, breathily, \"I really like her watching.\" Almost verbatim her sister's circumstantial conditioning the night before.\n\n\"As much as I'm proud of her, though -\" Ava locked eyes with me as Sara engulfed me again, \"- and how much more... fun she's gotten in my absence, I think she's not the only one who likes being watched.\"\n\n\"I - I don't -\" I stammered again, my face going a little red - though whether from the absurd situation or my girlfriends skills was impossible to say.\n\n\"Sara - is he hard?\" Ava asked, turning her attention to her sister, leaving me paralyzed in the easy chair.\n\n\"Mmmm...mmmhm!\"\n\n\"Harder than when I came in?\"\n\n\"MMMmm, mmhmm!\" Sara's eyes flicked up to meet mine, a playful joy in them.\n\nI met her gaze, and made one last effort to extract myself. \"Sara - hey. I'm going to cum if you don't -\"\n\nI should have known better. Sara was so far along in her conditioning that she probably couldn't have turned down my cum with a gun to her head. She only redoubled her efforts, leading to a chortle from the kitchen nook which I chose not to acknowledge.\n\nThe truth was, I was intensely turned on by the scene. I didn't know if I'd always had an exhibitionist streak or... perhaps I had picked it up from Kate? Who knew. As much as I was irked by Ava's pushy demeanor - seriously, what kind of civilized person did this sort of thing? - she definitely wasn't wrong.\n\nEven so... I opened my mouth, willing myself to put my foot down, to push Sara off, to... well, something. But then I saw Ava, who had apparently moved to the chair in front of me. Something about the look on her face... for just an instant, her characteristic wry grimace was gone, replaced with an undisguised look of lust, her focus entirely on the bobbing head in my lap.\n\nAgainst my better judgement, my cock thundered into my girlfriend. Sara recognized the telltale signs a second before and pushed herself onto me as my cum coursed down her throat. My eyes rolled back in their sockets as I saw stars, my legs shuddering and my spine arching out of the chair.\n\nWhen the static filling my brain finally subsided out again and I could finally think once more, I opened my eyes to see Ava sitting in front of us still, the only difference being a thin sheen of sweat on her skin and a free hand kneading a breast gently in time with her heavy breathing.\n\nDazed, we both - well, all three of us, really, Sara still kneeling between my legs, her eyes glazed over in trance - sat in silence for a moment. I could feel the hole where post-nut clarity probably ought to be, whenever my brain caught up to the penthouse letter I had just stumbled into.\n\nFinally, Ava let out a sigh. \"Good lord. We have to do this again later.\"\n\n\"We have to do this again later.\" Sara echoed.\n\n\"Yeah? You had fun?\" Ava straightened her jumpsuit, hiding the glimpse of incredible cleavage that had shown as she had groped herself.\n\n\"Yeah. I had fun.\"\n\nUh oh, not more of this. I opened my mouth to protest, but I stopped myself. What would happen to Sara if I contradicted Ava's last statement? I'd never bothered to test what would happen if two opposing statements were given to someone in trance.\n\nAva saw me about to talk, though, and immediately went back to her acerbic smirk.\n\n\"You should just go ahead and admit to yourself you had fun.\" She said. \"You clearly like an audience.\"\n\n\"He should just go ahead and admit to himself he had fun. He clearly likes an audience.\" Sara repeated. Ava gave her a look, but didn't seem to question it. That my conditioning the previous afternoon about not suspecting foul play seemed to be working - even with Sara dully repeating anything said to her - was a silver lining for sure.\n\n\"Ava, you should go.\" I said, carefully wording myself to ensure Sara wasn't the one who left.\n\n\"Ava, you should go.\" Sara echoed quietly into my crotch. But Ava was already leaving. She gave me look on the way out.\n\n\"There's really no point in being shy. We're all adults.\"\n\n\"There's really no point in being shy...\" Sara began to repeat. But her sister - characteristically - slammed the door on her way outside, and so before she could finish, she was blinking awake.\n\n\"Well, that was certainly fun. We have to do that again later!\"\n\nAnd with that, she had given me a quick peck on the cheek and was scampering away herself.\n\n---\n\nI spent the next several hours dully packing boxes in a room that had been pointed out to me the day before. Frankly, my brain needed the time to catch up. I let myself go through the mechanical motions of boxing up books and clothes for a while until my ability to reason returned to me fully.\n\nI couldn't work out if I was angry about what had happened, or turned on by it. The truth was, it had been really hot having someone watching, egging Sara on, groping themselves... It was clear, between my current situation and Kate's earlier antics while I was on the phone with Sara, I definitely enjoyed having a third person listening, watching... I tried to ignore the part of my brain softly suggesting going beyond having an observer.\n\nPerhaps, I thought, it was good I was still discovering new turn-ons in my late twenties, though. A sign of personal growth, I laughed to myself.\n\nOn a less upbeat note, I was honestly pretty irked by Ava. She wasn't just a voyeur, she was also pushy, rude, smug, and totally unconcerned with personal boundaries. It was vaguely infuriating, but I also had the strongest feeling that my haphazard conditioning the day before in the ruins next door weren't the only reason she was like this. If anything, the tattooed bombshell was more a mystery now than she was originally.\n\nNot wanting to confront her just yet, I decided to talk to the only other option on hand. I found Sara in the office, going through papers. She looked up from the calculator on her phone and held up a finger, and I waited until she was done with whatever math she had been doing and had written down her result.\n\n\"Hey sweetie - what's up?\" She flashed a grin at me.\n\n\"Hey. I wanted to ask about - wait, is that the stock stuff you were telling me about?\" I said, momentarily distracted by the documents on the desk between us.\n\n\"Yeah. It turns out my parents had pretty awful luck, though. Basically everything they had either went bankrupt in the last five years or isn't listed anymore. There's maybe ten thousand euro of this one stock, and that's about it.\"\n\n\"That's not too bad, honestly. 5k for each of you? Maybe you can get out of that apartment with those horrible roommates...\"\n\n\"I like my roommates, thanks. And yeah, I guess. It is funny, though. My dad considered himself quite the predictor of markets, you know? When I last talked to him before...\" She paused for a split second. \"Before I moved up to Pittsburgh, he claimed to have over two million. I guess I was kind of hoping there would be more.\"\n\nI chuckled. \"It wouldn't be the first time your dad overestimated himself. Remember that awful homebrew?\"\n\n\"Yeah, yeah.\" Sara laughed softly before straightening up in her seat to tidy away the files in front of her. \"Anyway! What's up?\"\n\n\"I actually wanted to talk to you about Ava.\" I said, a little awkwardly.\n\n\"Oh, I actually did too!\"\n\n\"You did?\" I said, surprised. That was kind of a relief. I wasn't sure I knew how to start a conversation about what had happened this morning.\n\n\"Yeah - the thing yesterday, when we were eating? The tattoos, all those cities...\"\n\nI narrowed my eyes. \"That's not really what I -\" But my girlfriend just kept going.\n\n\"It's honestly kind of nice that she blew off Mom to get them, but I was thinking, you know, she looks sort of crazy.\"\n\n\"Babe, plenty of people have tattoos. And removal is pretty cheap these -\" I said, trying to catch up to the unexpected turn of the conversation.\n\n\"No, no, I don't actually have a problem with the tattoos. It's more, what kind of person gets that into government service? She, what, she dug ditches or whatever for the Conservation Corps for a few years and now it's her whole identity, to the point she's getting her skin inked? It's a crazy thing to be proud of.\" Sara sighed. \"Stockholm Syndrome or something, you know? She's clearly hung up on it. I think I might talk to her about it, try to snap her out of it. She's got an spot at a good university now, she needs to be looking forward.\" Sara had grown quite animated, her hands waving around to emphasize her point.\n\n\"You, uh, you definitely shouldn't say any of that to her.\" I blurted out, before I could come up with a more constructive thing to say.\n\n\"I - wait, why?\"\n\n\"At least, you shouldn't say it like that. It's just - sorry, I don't mean to tell you how to deal with Ava. She's definitely got some... stuff going on. That's what I wanted to talk to you about.\" I briefly considered redirecting the conversation to the events earlier in the day, but thought best of it. Sara's assertive, I-know-what's-best style may endear her to most people she met, but I could tell it would cause Armageddon here. \"But nevermind that. Look, I think you should try to see things from her perspective.\"\n\nSara wrinkled her nose, as if to say, get to the point, if not unkindly. I sped up, tripping over my words slightly. \"Look, If I learned one thing about these CC kids when I was in the camps, it's that they're fiercely proud of what they're doing. And honestly - remember the city list on Ava's leg? The government sent her to Denver half a dozen times. And Denver's still there. Maybe she's not wrong to be proud.\"\n\nSara gave me a dim look.\n\n\"C'mon, she chopped down trees and carried water around for the government - which is not to say I look down on that or anything!\" She rushed, a little too quickly, to add. \"It's just, I know her. She's so smart and hard working. I can't help but think she could have done better than that, you know?\"\n\nI sighed. \"Did you know - I got pulled out of Atlanta by a Corps unit. I'm probably alive today because of them.\"\n\nSara's eyes turned soft. \"I didn't know - \"\n\n\"No, you didn't. I don't talk about it much, it's fine. That's not my point.\" I reached out and held her hand to reassure her. \"I guess what I'm trying to say - your sister volunteered to clean up toxic messes and put out fires and save people's lives. Forget whether she should be proud of herself - I think maybe you oughta be proud of her.\"\n\nSara's look turned a little bit skeptical again, but not as much as it had been before.\n\n\"And hey, on another level - remember that time that fusion researcher at that conference told you that you were wasting your time designing solar panels?\" She nodded, a little confused. \"Remember how upset that made you? Nobody likes being told the thing they care about is dumb. Don't be Fusion guy, OK?\"\n\n\"Ok, actually, that's fair.\" Sara laughed. \"I mean, the Corps is obviously not -\" She caught herself and threw up her hands. \"I get it. Thanks.\"\n\nWe shared a moment of companionable silence before something clicked.\n\n\"Wait, if this wasn't what you wanted to talk about, what was it?\"\n\n\"I... uh. Well, it's about this morning. I don't really -\" I slipped gracefully back into awkwardness.\n\n\"You should just admit to yourself you had fun.\" Sara cocked an eyebrow at me. \"There's really no point being shy\".\n\nGreat, I thought with a scowl. A week ago, Sara would have been scandalized by the very idea of fooling around while someone - let alone Ava - watched. Now... it was blas\u00e9. And she was parroting her sister from earlier, too - that slight, flat tone popping up whenever she used a phrase she'd heard in trance. I wonder how - or if - Sara squared such changes with herself.\n\n\"Look\" Sara saw the look on my face and leaned forward to squeeze my hand, interrupting my train of thought. \"Obviously Ava doesn't have to watch if you don't like it. I mean, other than...\" She trailed off, both of us leaving unsaid that I'd clearly loved it. \"I like it, obviously. But you deserve to be comfortable too. So if you're not, we'll stop.\"\n\nIn retrospect, this was a wonderful opportunity to salvage some control of spiraling events. Hell, of my own darker desires. Sara was being a good partner too, because even with all the cum-laced conditioning running around in her head she was taking a moment to check for feedback, consent. But... My curiosity got the better of me, and I let the moment pass to ask a question.\n\n\"Did you know Ava was coming back? When... when you hopped in my lap this morning.\"",
        "Sara paused for a moment, and let out a little sigh. \"Yes, I did. We figured you needed a little push.\"\n\n\"Wait. Sorry. What do you mean by we?\"\n\n\"Ava and I. We got up early, I actually went on a run together, first time in like six years. Really fun. And, uh...\" She trailed off, reddening a little. \"She suggested it. And... you know me.\"\n\nI gave her a look. \"I thought I did.\"\n\nShe blushed some more. \"Aw, c'mon, you know... you know I can't say no to sucking you.\"\n\nThere it was. That slight, flat monotone. A little shadow of her trance state. But that wasn't one of Ava's - it was one of mine, from the first night in Arizona. It hadn't occurred to me she couldn't say no to someone else about sucking me.\n\n\"I have to go.\" I kissed my girlfriend on the forehead.\n\nI had to make a list of all of the other things I'd said. To Sara, to Ava... hell, maybe to Kate as well. Who knew what timebombs I'd planted?\n\nHell, who knew what opportunities I was missing?"
    ],
    "authorname": "YourNeighborhoodSeamstress",
    "tags": [
        "female submissive",
        "voyeuristic",
        "exhibitionism",
        "magic cum",
        "hypnotic cum",
        "brainwashing",
        "accidental",
        "conditioning",
        "anthropocene",
        "sister"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-last-bridge-in-pittsburgh-ch-11"
}
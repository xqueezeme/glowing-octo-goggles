{
    "title": "A Father's Justice Pt. 07",
    "pages": [
        "Many thanks to those who offered comments and constructive criticism on my previous stories. For those who want to say this or that would never happen, remember, this is fiction, which means it's not real. Also keep in mind this is my universe, a place where nearly anything can, and often does, happen. At least on paper... \n\nTo understand the full context of what is taking place here, I suggest you first read, \"A Father's Justice Pt. 01,\"\"A Father's Justice Pt. 02,\" \"A Father's Justice Pt.03,\" \"A Father's Justice Pt. 04,\"\"A Father's Justice Pt. 05\" and \"A Father's Justice Pt. 06.\" For those who may be wondering, this is the conclusion.\n\nPlease refer to my profile for more on my personal policy regarding comments, feedback, follows, etc. (Yes, I moderate comments) And please remember, this is a work of fiction, not a docu-drama...\n\n...\n\nEnd of \"A Father's Justice, Pt. 06\":\n\n\"Beautiful, isn't she?\" Ryan asked. \"Her name is Beverly, and she's made me feel better and more alive than I've ever felt in my life. I thought I would never love another woman again, until she came along. You know, she helped rescue Sarah and little Ryan. Sarah has even started calling her, 'Mom.' And little Ryan seems to love her as well. I think she'll make a wonderful grandmother, don't you?\" Lisa's body jerked as she sobbed. He pulled his chair back and stood up.\n\n\"Chances are you won't be seeing me again,\" he said. \"And I suspect Sarah and Bob will also cut you out of their lives,\" he added as she wept. \"Sucks losing everything, doesn't it? But you know what they say -- karma's a bitch. And then you get the bill. Enjoy what's left of your miserable existence. Goodbye.\" He put his hat back on and walked out of the room. He could hear her wailing as he walked down the hallway and he saw the nurses rush into her room. He didn't care, though, and walked on out to his rented car.\n\n...\n\nAnd now, \"A Father's Justice, Pt. 07\":\n\nHe made one more stop, then headed back to Bob and Sarah's house. He noticed Jorge's car out front and wondered what was going on. Pocketing the small box he just picked up, he went inside where he was met by Jorge, Bob and Sarah.\n\n\"Have you heard the news?\" Sarah asked.\n\n\"No, what?\" Ryan asked.\n\n\"They just announced that Jake Knight died of a heart attack,\" Bob said.\n\n\"A heart attack?\" Ryan asked. \"When did that happen?\"\n\n\"According to the news, just after the hearing this morning,\" Bob said.\n\n\"Well, imagine that,\" Ryan said.\n\n\"Did you have anything to do with that?\" Jorge asked. Ryan shook his head.\n\n\"Never touched the man,\" Ryan said. Jorge looked at him suspiciously.\n\n\"I'm serious,\" Ryan said. \"I never touched him. Not once.\"\n\n\"So, what were you doing?\" Sarah asked. Ryan pulled the box out of his pocket and opened it, revealing a very expensive wedding and engagement set.\n\n\"I picked this up for Beverly and went to see Lisa,\" Ryan said, purposefully leaving out his visit to the courtroom.\n\n\"That's beautiful,\" Sarah said.\n\n\"I hope she likes it,\" he said.\n\n\"Trust me, she will, Dad,\" Sarah said. \"So, you went to see Lisa?\"\n\n\"I did,\" Ryan said. \"I gave her the DVD Elmer gave me and confronted her about all the lying, cheating and backstabbing. I also told her about what's happening with Knight and I told her about Beverly. I don't think she took it too well.\"\n\n\"That's just too damn bad,\" Sarah said sarcastically. Ryan smiled and nodded his head.\n\n\"No argument from me, princess,\" he said. Later, Sarah put dinner on the table and they all sat down to eat. They had invited Jorge to stay, so he joined them. After a nice dinner, they all went into the front room.\n\n\"There's going to be a special on Jake tonight,\" Bob said. \"Thought it might be interesting to see how they spin his life and career.\"\n\n\"Why not?\" Ryan asked. Sarah brought in several glasses of sweet tea and they watched the program, which had just started.\n\n\"This is one of my favorite shows,\" Bob said. \"I enjoy his take on business.\" Ryan grunted and nodded his head. How anyone could enjoy something like that was beyond him. But, he decided, to each his own. They turned their attention to the program.\n\n\"Good evening, and welcome to a special edition of the program,\" said a relatively young man with curly dark hair. \"Tonight, we will examine the life of Jacob Knight, the disgraced former CEO of Knight Petroleum who was accused of conspiring to murder his estranged wife and her former husband. As you may know, Mr. Knight died earlier today from a heart attack.\n\n\"Joining us tonight to discuss this is author and investigative journalist Trevor Whitaker, who is set to publish a book about Knight, titled, 'From Riches to (Oil) Rags: The Rise and Fall of Jacob Knight.' Welcome to the program, Mr. Whitaker.\"\n\n\"Thank you for having me, Neil,\" said an older, well-dressed man in a gray suit.\n\n\"I'm not one to speak ill of the dead, so I'd like to start by offering our condolences to the family and friends of Jacob Knight. Our thoughts and prayers are with you. Tell us, Trevor, what are your thoughts about all this?\" Neil asked.\n\n\"Like you, Neil, I don't wish to speak ill of the dead, either,\" Trevor said. \"But frankly, in this case, I'm not sure you're going to find anyone who would really mind if you did.\"\n\n\"That doesn't sound too nice,\" Neil said. \"Why would you say something like that?\"\n\n\"Well, to be honest, Mr. Knight was not the kind of man who engendered good thoughts,\" Trevor said in response.\n\n\"Surely, he was somewhat well-liked, wasn't he?\" Neil asked.\n\n\"On the contrary, Neil. In fact, from my research over the last several years, he was not liked at all. By anyone. In fact, he was universally despised and hated, even by members of his own small family,\" Trevor said. \"One source even told me -- and I'm quoting from my book -- 'look up a-hole in the dictionary and you'll find a picture of Jacob Knight.' That was from someone who worked closely with Knight for a number of years.\"\n\n\"Ouch,\" Neil said. \"So, why did your source stay with him so long?\"\n\n\"Simply put, Knight paid him well,\" Trevor said. \"And, the man was frankly scared of what Knight would do if he ever left. You see, Knight believed that you were either for him or against him. Turning on him was not considered a wise career choice.\"\n\n\"I see,\" Neil said. \"Getting to the case, Knight was accused of, among many other things, conspiring to murder his now-estranged wife's ex-husband. From what we learned, the divorce between her and her first husband took place over 12 years ago and it seemed to be about as amicable as a divorce can be, at least on paper. There was no demand for support of any kind, even though there was a teenage daughter, no demand for spousal support and in fact, she left him with all of the marital assets. So, why would Knight suddenly desire to go after the man? That doesn't make sense. He had the man's wife and daughter. Why pay to have him killed after nine years?\"\n\n\"To answer that question, you need to understand the man,\" Trevor said. \"Several years ago, I sat in Knight's office doing an interview for a lengthy article about the company's rapid expansion and growth. On his desk was a plate that read, 'Kill them all. Let God sort them out.' That pretty much sums up Jacob Knight. That's how he did business, and it's how he conducted his personal life. If he saw something he wanted, he did whatever it took to get it. That includes businesses, property, even women.\"\n\n\"Women?\" Neil asked.\n\n\"Yes,\" Trevor said. \"In that regard, Jacob Knight made a certain former president look like a Boy Scout. If he saw a woman he wanted, he did whatever it took to have her. I've spoken to quite a few men whose lives and marriages he reportedly destroyed. For him, it was a sport, like big game hunting.\"\n\n\"I see,\" Neil said. \"So explain why he went after this man.\"\n\n\"Well, Neil, it turns out the former husband was working as a private security contractor for a foreign oil company Knight wanted to absorb,\" Trevor said. \"You have to understand, Knight's idea of business negotiations went something like, 'nice business you have here, be a shame if something happened to it.' He often used a carrot-and-stick approach, offering what might look like a lucrative price while at the same time presenting a show of force meant to intimidate the target.\"\n\n\"About four years ago, Knight went after that foreign competitor. It was then that Knight learned the former husband, whose name has never been mentioned publicly, thanks to an injunction, worked for this company,\" Trevor said. \"Knight apparently believed he could literally kill two birds with one stone and went after the man with a team of assassins, according to the court documents we've seen. Keep in mind all this came from the man Knight originally targeted, so that explains the judge's order.\"\n\n\"I see,\" Neil said. \"I found it interesting that the original divorce documents were sealed by this judge's order, and the brief summary we were given as a result of an FOIA request had all the names and addresses of the parties redacted. That's a bit odd, isn't it?\"\n\n\"The federal prosecutor said he acted out of concern for the man's safety,\" Trevor said. \"The defense has gone after this like a shark smelling blood in the water. They want this man's identity made public and they want him to testify in open court. Given what has happened recently, it's a good thing the judge has stuck to his guns.\"\n\n\"So, Knight went after him, what, just because he could?\" Neil asked.\n\n\"Pretty much,\" Trevor said. \"Knight didn't really need a reason to do anything. All that mattered was what he wanted, period.\"\n\n\"So, what do you see happening now?\" Neil asked.\n\n\"Just because the executives, including Knight, are now dead, doesn't necessarily mean the case is over, even though the indictments against those individuals have been rendered moot,\" Trevor said. \"The man who allegedly shot Lisa Knight has turned state's evidence in return for leniency, but that doesn't mean he won't see any prison time. Also, the feds are still looking into Knight's internal operations, and it's possible Ms. Knight may be indicted as an accomplice. So, this could drag on for some time to come.\"\n\n\"What about the company itself?\" Neil asked.\n\n\"As you know, Neil, stock in the company has taken a huge hit,\" Trevor said. \"Shareholders are dumping it as fast as they can to minimize their losses. If something isn't done soon, the company will probably go under. I have heard a rumor that something is in the works, but that hasn't been confirmed to me yet.\"\n\n\"I see,\" Neil said. \"Very interesting. Thank you for being here, Trevor, you've given us all a fresh look at the situation.\"\n\n\"Thank you, Neil,\" Trevor said.\n\n\"Up next, will the situation with Knight Petroleum affect your retirement accounts, and if so, how? We'll address that with a well-known financial advisor in just a few minutes. Stay tuned,\" Neil said before a commercial cut in.\n\n\"Damn,\" Bob said. \"I had no idea it was that bad.\"\n\n\"It was,\" Ryan said. \"Well, guys, this has been fun, but I need to call home and hit the hay.\"\n\n\"You still want me to keep tabs on things here?\" Jorge asked.\n\n\"If you would, please,\" Ryan said. \"I think the primary danger is over, but you never know.\"\n\n\"I agree,\" Jorge said. \"Alright, well, thanks for the dinner, guys, but I need to head out. Talk to ya later.\" They all said their goodbyes and Ryan went upstairs where he called Beverly and went to bed.\n\nThe next morning, he was up early, and after breakfast, gave a warm farewell to Bob, Sarah and little Ryan. After saying his goodbyes, and promising to keep them informed of his wedding plans, Ryan left and headed for the airport.\n\nOn the way, he spotted a large church, and something told him he needed to stop. He hadn't been to a church since Sarah's baptism, but something just drew him to the place. He parked and went inside. He lit a candle for his old departed comrades and took a seat in a back pew, noticing that he was the only one inside the large sanctuary, except for a priest at the altar. He felt compelled to get on his knees and as he did so, he thought of Dawson and all the others who never made it back.\n\nAs he knelt, his head resting on his clasped hands, he mentally confessed everything he had ever done since that day Lisa and Sarah left. All his hatred, his anger, his disillusionment -- everything -- poured out of his heart. He wept for his losses and gave thanks for what he now had. When he finished, he looked up at the large crucifix above the altar and considered what it meant.\n\nAs he sat back on the pew, a young Latino man in priestly robes sat next to him.\n\n\"Is everything okay, my son?\" he asked softly. Ryan smiled to himself. He was old enough to be this man's father. He kept his tongue in check -- something not normal for him -- and looked at the young priest. He smiled as he nodded his head.\n\n\"It is now, padre,\" he said. \"Thanks.\"\n\n\"Then may the peace of God which passes all understanding, go with you, my son,\" the priest said, crossing himself.\n\n\"Thank you again,\" Ryan said. The priest stood up and Ryan joined him.\n\n\"If there is anything you need -- prayer, confession, counseling -- please feel free to ask,\" the priest said.\n\n\"I think I'm good now, padre,\" Ryan said. \"Thanks, anyway.\"\n\n\"I will pray for you anyway, my son,\" the priest said, nodding his head. \"I sense that you are starting a new chapter in your life and you will need all the help you can get.\"\n\n\"Don't you need to know my name?\" Ryan asked. The priest smiled as he shook his head.\n\n\"God already knows, my son,\" he said. Ryan nodded his head.\n\n\"Reckon so,\" he said. \"Thank you.\" The priest smiled, nodded his head and walked to the large altar up front. Ryan grabbed his hat and left the building. When he stepped into the bright sunlight, he inhaled deeply. He felt like a new man. He laughed to himself, got in the car and went to the airport.\n\n...\n\nHe called Beverly when his plane landed, tossed his duffel bag in the truck and headed home. As he drove, he felt better than he had in ages. Everything seemed fresh -- new -- almost as if he had never looked at it before.\n\nHe finally got home and saw Beverly waiting for him on the porch. His eyes nearly popped out of his head when he took her in. She was always lovely, he thought, but the shorts she had on were the tiniest he had ever seen on a woman. They were even shorter than the ones she had before and he noticed this pair had holes strategically placed in the front. She also sported a cut-off t-shirt that barely covered the bottoms of her B-cup breasts.\n\n\"You're a sight for sore eyes,\" he told her as he wrapped his arms around her. They kissed each other, deeply, for several minutes. When they broke the kiss, she stroked the front of his jeans, feeling his hard cock.\n\n\"Lunch is out by the pool if you're hungry,\" she said with a wicked smile.\n\n\"Lead on,\" he said. As she walked in front of him, he noticed the shorts left nothing to the imagination. When they got out back, he looked at the pool, expecting to see a picnic basket or something. He walked around, but still didn't see any lunch items.\n\n\"Where's lunch?\" he asked.\n\n\"Right here,\" she said from behind him. He turned and saw her standing on the deck, completely naked. \"That is, if you want me,\" she said.\n\n\"Oh, God, yes,\" he said as he wrapped his arms around her. They made love on the deck for some time, enjoying each other and the bright sun at the same time. When they finished, he got up and grabbed his trousers.\n\n\"I almost forgot,\" he said. \"I got a little something for you.\" He pulled the box out of his pocket and opened it up. Her eyes grew wide as she looked at the set of rings.\n\n\"Those are beautiful,\" she said. He pulled the engagement ring out and gently placed it on her finger. She smiled as a tear formed in her eye.\n\n\"I love it,\" she said. \"And I love you.\"\n\n\"I love you too,\" he said. She studied his face for a bit before speaking again.\n\n\"Are you alright?\" she asked. \"You seem, I don't know, a bit different.\"\n\n\"Actually, I am,\" he said. \"I feel like a new man turning over a new leaf.\" She smiled and kissed him again.\n\n\"I'm so glad,\" she said. \"I think we've both had enough sadness to last a lifetime, don't you?\"\n\n\"Yeah,\" he said. \"I agree completely. Oh, I got something else.\"\n\n\"What?\" she asked. He went inside and pulled a box from his duffel bag. He handed it to her and watched her open it. She pulled out a wrought-iron chicken made to hang on the wall.\n\n\"I love it,\" she said. \"What made you decide to get this?\"\n\n\"I don't know,\" he said. \"I saw it and I thought of you. I figured it's time we started putting some things up on the walls, make the place feel like a home again.\"\n\n\"I think that's a good idea,\" she said. \"And I know exactly where to put it.\" He smiled as she said that. Yeah, he thought. Home, sweet home. For real this time.\n\nAfter they dressed and put the chicken on the wall in the kitchen, he called Russell.\n\n\"Hey, Ryan,\" Russell said. \"You get everything squared away?\"\n\n\"Yeah, I did, and I'd like to come talk to you about that job offer,\" Ryan said.\n\n\"Perfect,\" Russell said. \"Come on down and we'll talk.\"\n\n\"Be right there,\" Ryan said. After letting Beverly know, he cleaned up and went into town, pulling up in front of the Sheriff's Office. He went inside and noticed the deputies giving him the once-over.\n\n\"Sheriff Coltrane is expecting you, Mr. Caldwell,\" the uniformed deputy said. \"Right this way.\" He followed her to Russell's office. She opened the door and escorted him inside, then left and closed the door. Russell got up and shook his hand.\n\n\"Have a seat,\" he said. Ryan sat down and faced Russell. \"So, you have any questions?\"\n\n\"Yeah,\" Ryan said. \"I have one. What about my background? You already seem to know what I did for nine years.\" Russell smiled.\n\n\"You mean, being a 'private security consultant' and all that?\" Russell asked, making air quotes as he said, \"private security consultant.\"\n\n\"Yeah, that,\" Ryan said.\n\n\"Well, nine years training security people to deal with dangerous situations is a lot of experience if you ask me,\" Russell said. \"Plus your service in the Army was quite exceptional. The county board agrees.\"\n\n\"What?\" Ryan asked.\n\n\"Yeah,\" Russell said. \"They seem to think you can teach our deputies a thing or two.\"\n\n\"I never thought of that,\" Ryan said.\n\n\"Don't worry, son,\" Russell said. \"I've already done a background check on you. Standard procedure. They just want to make sure you're not an axe murderer on the lam from the law. You've never been behind bars and everything checks out. Hell, on paper, you're cleaner than some of my deputies. So, if you're willing, you'll need to go through an interview with the board. That's pretty much a formality, though. I would suggest you maybe get some nicer clothes and a new hat.\"\n\n\"What about the beard?\" Ryan asked. \"Trust me, that hides a multitude of sins.\" Russell smiled.\n\n\"So long as you keep it neat and trimmed, it's not a problem,\" he said. \"Besides, it gives you character.\" Ryan smiled.\n\n\"You got this all figured out, don't you?\" he asked. Russell smiled.\n\n\"Comes with the territory, my boy,\" he said. \"Once they give the okay, we'll get you fitted out with a uniform and you'll spend some time shadowing me. So, what do ya think?\"\n\n\"What the hell,\" Ryan said. \"The worse they can do is say no. Set it up.\"\n\n\"That's my boy,\" Russell said. \"How about tomorrow morning bright and early, say, 8:30?\"\n\n\"Yeah, that sounds good,\" Ryan said. \"I'll go down now and get some new duds.\"\n\n\"There ya go,\" Russell said. \"See you then.\"\n\nFrom there, Ryan spent much of the afternoon, buying new clothes, boots and a new hat. Beverly was shocked when he came in, arms loaded with new clothes.",
        "\"Don't ever complain about me getting new clothes,\" she joked. \"So, when do you go before the board?\"\n\n\"Tomorrow morning,\" he said.\n\n\"I'm glad to see you taking this on,\" she said. \"It'll do you some good to get integrated into the community. I'm so proud of you.\" He smiled and kissed her.\n\nThat night, they watched the news and learned that the federal case against Knight had expanded to include a number of the middle-level managers. It seemed that more people were involved than originally thought, but none of them apparently knew the full situation. The expose on Jake also caused the company's stock prices to fall even further as confidence in the company dwindled to practically nothing.\n\nThe next day, Ryan appeared before the county board with Russell. As Russell indicated, the meeting was cordial and mostly informal. There were only a few questions that Ryan had to think carefully about before answering.\n\n\"Doesn't that eye patch give you problems with your depth perception?\" one of the board members asked.\n\n\"It did at first,\" Ryan said. \"But I've learned to work through it.\"\n\n\"So you can drive and fire a sidearm without any problem?\"\n\n\"None so far,\" Ryan said.\n\n\"Personally, I prefer to see someone with direct law enforcement experience,\" another board member said. \"You don't even have a degree in law enforcement. If we do this, would you be willing to enroll in an online course and get a two-year degree?\"\n\n\"Absolutely,\" Ryan said.\n\n\"How much do you expect to get paid, Mr. Caldwell?\" one female board member asked.\n\n\"I hadn't really thought about it, ma'am,\" Ryan said. \"To tell you the truth, I really don't need the money.\"\n\n\"Yes, we checked your financials over at the bank,\" she said. \"By the way, that was a wonderful thing you did for Ms. Simons.\"\n\n\"Thank you,\" he said. \"She needed help, so I thought I'd lend a hand.\"\n\n\"So, about the compensation, how much do you think you'd like to get paid?\" she asked.\n\n\"Frankly, I haven't given it any thought,\" he said. \"Whatever you're paying Sheriff Coltrane, I guess. Maybe you could donate it to the homeless shelter downtown or the women's and children's center.\" She smiled and nodded her head.\n\n\"I think we can arrange that,\" she said. \"Don't you?\" she added, looking at the other board members. They looked at each other and nodded their heads.\n\n\"Yeah, we can do that,\" one of the others said.\n\n\"Gentlemen, I think we've found our candidate, don't you?\" the female board member said. They discussed it among themselves before answering.\n\n\"I agree,\" one of the board members said. \"I say we vote on it.\"\n\n\"I second that,\" another board member added.\n\n\"Well then, let's take a vote,\" the female board member said. \"All in favor of appointing Mr. Ryan Caldwell as sheriff raise your hands.\" Everyone raised their hands. \"Those opposed?\" No hands went up.\n\n\"Very well,\" she said. \"Mr. Caldwell, welcome aboard and congratulations.\"\n\n\"Thank you,\" Ryan said, accepting her hand.\n\n\"Sheriff, why don't you take Mr. Caldwell here down and get him a uniform?\" she asked. \"We'll conduct the swearing in ceremony about 1:00 this afternoon.\"\n\n\"Will do,\" he said, standing up. They drove back to the sheriff's office and Russell took Ryan into the back, where he found several shirts and pairs of trousers that looked as though they would fit. Ryan was relieved to see they had all been cleaned and pressed, and still hanging inside their protective plastic coverings. Ryan tried them on and found they fit perfectly. Russell also grabbed a new hat, a gray Stetson, and handed it to him.\n\n\"That looks like a good fit,\" he said. Ryan tried it on and was surprised to see it fit better than his old beat-up hat. Russell looked at him, nodding his head in approval. \"Looking good, son,\" he said. He grabbed a black name tag from his desk drawer and attached it to Ryan's shirt. Apparently, Ryan thought, he had it pre-made just for the occasion. After attaching the name tag, Russell glanced at his watch. \"About time for your swearin' in,\" he said. \"Let me make a quick call.\"\n\nAs Ryan watched, Russell pulled out his cell phone and dialed a number. He was surprised to hear Beverly's voice answer. Russell winked at Ryan, and put the phone on speaker.\n\n\"Beverly, I really need you to come down to my office, right away,\" Russell said, sounding serious.\n\n\"Is everything alright?\" she said.\n\n\"Don't know,\" he said. \"But it's serious and I need you down here as soon as you can.\"\n\n\"Alright, Sheriff,\" she said, sounding scared. \"I'll be there in just a few minutes.\" Russell ended the call and put his phone away. He looked back at Ryan and smiled.\n\n\"That was mean,\" Ryan said.\n\n\"Yeah, it was,\" Russell said. \"But I had to make sure she'd get here, y'know? Wouldn't be right for you to get sworn in without her here, don'tcha think?\" A few minutes later, Beverly came in through the front door and was escorted to Russell's office.\n\n\"Is everything alright? What's going on?\" she asked, frantic. Russell smiled and sat her down.\n\n\"Everything's just fine, darlin',\" he said. \"I just thought you might like to be here when they swear your man in.\" He turned to the door leading down the hallway and called for Ryan. Beverly gasped when she saw her husband-to-be come in wearing a uniform.\n\n\"Wow,\" she said. \"I always did like a man in uniform,\" she told him. \"So, when is the swearing in?\" she asked Russell. He glanced at his watch.\n\n\"Any time now,\" he said. A few moments later, they heard the front door open and a group of well-dressed people came into the station. The desk sergeant came into Russell's office to let them know they had visitors.\n\n\"Thanks,\" Russell said. \"Have everyone meet in the main conference room if you would, please.\"\n\n\"Will do, Sheriff,\" she said, leaving the office. Russell looked at Ryan and Beverly.\n\n\"You two ready for this?\" he asked. Ryan looked nervous.\n\n\"Ready as I'll ever be, I reckon,\" Ryan said. They went down the hall and entered the large room, which was full of people, including a number of uniformed deputies. Ryan noticed an ice chest on the floor next to the table and a store-bought cake that had been decorated for the ceremony.\n\nThe deputies checked Ryan out as he walked in and he thought they seemed to approve of Russell's choice. He sensed no animosity or jealousy from any of them, which was a good thing.\n\nThe ceremony itself was short and sweet. The senior county board commissioner administered the oath of office, and Russell pinned the new badge on Ryan's chest. He handed something to Beverly, and asked her to follow his lead.\n\nShe watched as Russell pinned three stars on Ryan's shirt collar -- the rank insignia worn by the sheriff. She pinned the other set of stars on his remaining collar and stood back to admire him.\n\n\"Congratulations, Sheriff,\" the commissioner said, shaking his hand. \"And may God have mercy on your soul,\" he added, causing everyone in the room to laugh.\n\n\"Thank you, Commissioner,\" Ryan said.\n\n\"There's tea and coca-cola in the ice chest, and Ryan, excuse me, Sheriff Caldwell, gets the honor of serving up cake,\" Russell said to laughter. \"Sorry, no beer, we're still on duty, you know.\" Ryan sliced the large cake and served Beverly first, then the deputies. He gave Russell a slice, then served the commissioners. He cut a small piece for himself and noticed there was still about a third of the cake left.\n\n\"Why don't we save this for the fellas out on patrol?\" he asked. Russell agreed.\n\n\"Good idea,\" he said. The female desk sergeant smiled and put the cake in a refrigerator for safe keeping. Ryan ate his cake, then made the rounds, meeting the deputies he would soon be responsible for. They all seemed nice, he thought, and they appeared to accept him as their new sheriff.\n\nAfter the ceremony, Beverly came to Ryan and took him in. He looked so good in his uniform, she thought. Almost as if it was made just for him.\n\n\"You look so good, sweetheart,\" she said. \"I'm so proud of you.\" He smiled and gave her a kiss.\n\n\"Why, thank you, little lady,\" he said, using a horrible John Wayne impersonation that caused her to laugh.\n\n\"I'd better get back now, dear,\" she said. \"I have to stop and pick up some feed for the chickens, and get dinner started. I'll see you at home, alright?\"\n\n\"I'll be there,\" he said, giving her one more kiss. He watched as she walked out the door. The deputies all congratulated her and seemed to welcome her into their little family. Ryan turned to Russell.\n\n\"So, what now?\" he asked.\n\n\"Now, I issue your sidearm and your gear,\" Russell said. They walked to the armory, and Russell had him sign for a belt and a Smith and Wesson M&amp;P 9 mm pistol, a polymer-framed, striker-fired full-size pistol similar to the Glock 17. All things considered, Ryan knew this was one of the best 9 mm handguns on the market, and he was surprised that a small sheriff's department like this would issue them. He almost expected them to carry six-shot revolvers.\n\n\"One last thing,\" Russell said, pulling a small box from his desk drawer. He handed the box to Ryan, who opened it and saw a small bar that sported a blue field with white stars on one side and three stripes, one white stripe with a red stripe above and below it. On the white stripe was written, \"U.S. Army vet.\"\n\n\"What's this?\" Ryan asked.\n\n\"It's a little something to show appreciation for your service,\" Russell said. \"All the vets get one here.\" Ryan had seen some of the deputies sporting something similar and he noticed Russell had one as well that said, \"USMC vet.\"\n\n\"Thanks,\" Ryan said.\n\n\"You're welcome,\" Russell said.\n\n\"What now?\" Ryan asked.\n\n\"Well, we start getting you up to speed tomorrow morning,\" Russell said. \"Be here at 8:00 am, sharp.\"\n\n\"See you then,\" Ryan said as he gathered his civilian clothes. The deputies said their goodbyes as he walked out the door. When he got home, he gave Beverly a kiss and headed upstairs. He looked at himself in the mirror.\n\n\"There's a new sheriff in town,\" he said quietly to the image in the mirror. The boys'll never believe this, he thought to himself. He smiled as he imagined himself asking, \"Do ya feel lucky, punk?\" They enjoyed a quiet meal and an evening of lovemaking.\n\n\"I'm glad I got to be a part of that ceremony today,\" Beverly said as she snuggled her naked body against him.\n\n\"I am, too,\" Ryan said.\n\n\"Promise me you'll be careful out there?\" she asked. He wrapped an arm around her and kissed her as he took in her warmth.\n\n\"I'll be careful, little lady,\" he said. \"I promise.\"\n\nThe next two weeks flew by for Ryan as Russell gave him a crash course in law enforcement. Ryan watched as Russell briefed the deputies on the day's duties and took in every nuance he could. This was a good group, he thought to himself. Dedicated, motivated and loyal. They knew their stuff.\n\nRussell finished the briefing by turning to Ryan, asking, \"Anything you'd like to add, Sheriff?\" Ryan knew this was Russell's way of making sure they knew he would eventually be taking over.\n\n\"Be careful out there,\" Ryan said, causing the deputies to nod in approval.\n\nRussell took Ryan to the combat shooting range and was surprised when Ryan breezed through it, hitting all the bad guys while avoiding the \"good guys.\" Actually, they were just cardboard cutouts, but it was a useful exercise that helped officers learn to distinguish between the two in a real-life situation.\n\nFrom there, it was on to the defensive driving course, and Ryan got through it easily. When he finished, Russell got into the passenger seat and shook his head.\n\n\"Where'd you learn to drive like that?\" he asked.\n\n\"Oh, you'd be surprised,\" Ryan said.\n\n\"No, I wouldn't,\" Russell said. During the time with Russell, Ryan was like a sponge, soaking up everything he could from the man. Russell had shown him how to use the radio and the computer in the patrol car and walked him through simple traffic stops. Ryan had signed up for an online program through the University of Texas and spent what free time he had going through the courses assigned to him.\n\nMeanwhile, Russell had taken him around town to meet the locals, all of whom seemed to take to Ryan, after they recovered from the shock of his eye patch and scar. While they were out one day, Ryan turned to Russell.\n\n\"You seem to know an awful lot about me,\" Ryan said. \"Would you mind explaining that?\"\n\n\"Not at all,\" Russell said. \"I knew about you pretty much from the time you came to town. Goldsmith got a hold of me after you made that huge deposit in his bank, asked me to look into you. So I did. I reached out to my contacts at the FBI and kept a loose tab on ya for a while. I'd seen ya sitting out there on that porch of yours and I asked myself, I said, 'self, why would a man have all that money in the bank, yet choose to live in that piece of crap old house looking like a reject from an old Clint Eastwood movie?' I figured you was either hidin' from something or somebody or else you was a loose cannon getting' ready to cause trouble.\"\n\n\"I just wanted piece and quiet,\" Ryan said. \"I didn't want to call attention to myself.\"\n\n\"With all that money in the bank?\" Russell asked. \"Where'd you get all that, anyway?\"\n\n\"A lot of it was money I made on the job,\" Ryan said. \"Other was money I earned from some well-placed investments, and quite a bit of it came from an oil sheikh who appreciated what I did for him. He gave me a second chance and said I should go someplace where I could find some peace. So I came here. Figured no one would find me here.\"\n\n\"And all that money you gave Beverly,\" Russell said. \"Were you expecting something in return?\"\n\n\"No, I wasn't,\" Ryan said. \"I felt for her. Like I told Goldsmith, I know what it's like to lose everything that means anything to you. When I saw her out here on the road that day, I was reminded of what I went through. What I nearly did.\"\n\n\"I understand,\" Russell said quietly. \"It hurts like hell when someone dumps you the way your wife did. Oh yeah, I saw the reports. Went through something like that myself once, a long time ago. You know you're not going to be able to help everyone like you did her.\"\n\n\"I know,\" Ryan said.\n\nRyan also spent time riding with the other deputies -- partly to learn the job and partly to get to know them better. He enjoyed the time with them and they seemed to appreciate his efforts. He also went on night patrol a few times with Russell.\n\nOne night, they were on a back road known as a local \"lover's lane.\" They came up behind an old pickup that was rocking side to side. They both knew what was going on, so Russell pulled up behind the truck and flashed his lights briefly, causing the couple in the truck to look out the back window in surprise. Russell looked at Ryan.\n\n\"You wanna do the honors?\" he asked.\n\n\"Sure, why not?\" Ryan answered. He got out of the car and approached the drivers side, a flashlight in one hand and the other close to his pistol. He tapped on the window with his flashlight. A nervous young man rolled the window down. Ryan could see he was shirtless, and his trousers had been rapidly pulled up, but not fastened. He looked at the girl in the cab and saw she was covering herself with a blanket.\n\nIt was obvious to him that she was nude under the blanket and he saw a pile of clothing on the floor at her feet. He also detected the smell of sweat and sex from the cab. They were both shocked at Ryan's appearance.\n\n\"Drivers license and registration, please,\" Ryan said. The young man pulled out his license and grabbed the registration from the glove box. \"I'd like to see your ID as well, young lady,\" Ryan added. As he watched, she pulled her license from her purse, which was on the floor. Ryan examined the licenses and looked at their faces. He verified they were both 18 -- probably high school students just out for a bit of nookie. He handed the documents back and addressed the young man.\n\n\"Out of the truck, sir,\" he said. \"You, get dressed,\" he told the girl. The young man got out of the truck, fastening his trousers as he did so and tightening his belt. Ryan motioned for him to stand by the bed of the truck and looked at him closely. He could tell the youngster was \"this close\" to pissing his pants.\n\n\"You love this girl, son?\" Ryan asked quietly.\n\n\"Y...yes, sir, I do,\" he said. Ryan nodded his head.\n\n\"You planning on marrying this girl?\" Ryan asked.\n\n\"I don't know,\" the young man said. \"Maybe.\"\n\n\"So, you like her enough to fuck her out here in the middle of nowhere, but not enough to marry her, is that right? Do your parents know? Do her parents know?\" Ryan asked.\n\n\"No, sir, they don't know,\" the man said, trembling.\n\n\"Look son,\" Ryan said. \"It's late and I really don't like the idea of dragging you two down for public lewdness, so I'll say this just once. The next time you feel the urge, show a little respect. Take her to a motel or something. You know, someplace with four walls and clean sheets. It's downright dangerous out here late at night, you know. People crossing the border, wild animals, snakes, one-eyed sheriffs. You understand what I'm saying?\" The man nodded his head.\n\n\"Alright,\" Ryan said. \"Get on outta here. And don't let me catch you on this road again, you hear me?\"\n\n\"Yes sir,\" the man said, scrambling to get in the truck. As he watched, the man looked out the window. \"Thank you, sheriff,\" he said. Ryan nodded his head and the man drove off, no doubt relieved that he wasn't going to jail. At least, not tonight. Ryan got back in the car and looked at Russell, who sported a big shit-eating grin.\n\n\"Well?\" he asked.\n\n\"Yeah, they were doing the dirty,\" Ryan said. \"Girl was stark naked under her blanket.\"\n\n\"And you let them go?\" Russell asked.\n\n\"What the hell,\" Ryan said. \"There weren't any drugs or alcohol. Just a couple kids looking to get laid. I chewed his ass out, told him to never show up here again, take her to a motel or something. I don't think he'll give us any more trouble.\" Russell laughed.\n\n\"Welcome to law enforcement, Ryan,\" he said, putting the car in gear. Ryan knew he would have a good story to tell Beverly that night.\n\nDuring that period of time, Ryan and Beverly were also planning their wedding. They finally decided to have the ceremony in his back yard. While Ryan worked, Beverly arranged almost everything for the ceremony. Ryan offered to help, but Beverly wouldn't hear of it. She spoke to the pastor of the country church she attended when her first husband was still alive, and he agreed to perform the ceremony, but only after he met Ryan.\n\nThe meeting went well, with Ryan appearing at the church in his uniform. They spoke for some time about this and that, and by the time the meeting was over, the pastor felt a peace about uniting Beverly to the tall, scarred man.\n\nRyan kept an eye on the news, but it seemed that other things had managed to push Knight Petroleum off the front page. Everything, including Jake's probate and the class action lawsuit, was now in the hands of the court system and lawyers more adept at slowing things down than anything else. Ryan wondered if it would ever get resolved.\n\nHe stayed in touch with Sarah, Bob, Bill and Jorge. They were all pleased that he was now a sheriff and loved the pictures Beverly sent them of him in his uniform.\n\n\"The fellas will never believe this shit,\" Bob wrote in response to the pictures, causing Ryan to laugh.\n\nThen one day, as Ryan and Russell were in the office working, Agent Smith walked in the door. He smiled as he saw Ryan in his uniform.\n\n\"Damn,\" he said. \"You look good in that uniform. It suits you.\"\n\n\"Thanks,\" Ryan said.\n\n\"Yeah, I'll make a lawman outta him yet,\" Russell said as he shook Smith's hand. \"So, what can we do for ya, Agent Smith?\"\n\n\"You got a couple minutes?\" Smith asked Ryan.\n\n\"Yeah, sure,\" Ryan said.\n\n\"Is there someplace we can talk?\" Smith asked. Ryan looked at Russell before responding.",
        "\"Yeah,\" Ryan said. \"Right here. Sheriff Coltrane knows everything. There's no secrets in this office.\" Smith looked at Russell, who nodded his head.\n\n\"Alright,\" Smith said, sitting down. \"A couple things bothered me about that site in New Mexico. For one thing, there were only those two vehicles there from Mexico and the Lear jet. I knew from the number of bodies we found there was no way they all got there in that jet and those two vehicles. I also doubted that anyone could have heard that gunfire from 12 miles away. So I pulled the 911 call and had our folks analyze it. They found the noise of a vehicle running in the background.\"\n\n\"So, someone made the call while they were on the road?\" Ryan asked. Smith nodded his head.\n\n\"Yeah, they had to,\" he said. \"I did some digging and found a vehicle registered to Knight Petroleum in New Mexico. The address matched the one used for the camp. So we put out a nationwide APB and discovered it in the long-term parking at Albuquerque International Sunport.\"\n\n\"Sunport?\" Ryan asked.\n\n\"Yeah, that's the international airport there,\" Smith said. \"Been called that since the 1990s because they get about 280 days of sun every year.\" Smith pulled out a photo and showed it to Ryan. \"Surveillance cameras there caught this man getting out of the vehicle.\" Ryan looked and Smith saw recognition in the scarred man's face.\n\n\"You've seen this man before?\" Smith asked.\n\n\"Only about 100 times in my nightmares,\" Ryan said. \"He's the one who fired the RPG that did this,\" he added, indicating his eye. \"You know who he is?\"\n\n\"His name is James Weston,\" Smith said. \"Formerly of the FBI. He left the Bureau about five years ago to go work for Knight Petroleum. He's one of Jacob Knight's top enforcers.\"\n\n\"Do you know where he is now?\" Ryan asked.\n\n\"We put out an APB for him as well, but so far, nothing's turned up,\" Smith said. \"I'm pretty sure he knows we're looking for him and he knows how to avoid us.\"\n\n\"You think he had something to do with your agents being killed?\" Ryan asked.\n\n\"Don't know,\" Smith said. \"But it wouldn't surprise me if he did.\"\n\n\"You think he's coming here?\" Ryan asked.\n\n\"I'd almost guarantee it,\" Smith said. \"You're the one who gave us all that info, so I'm pretty certain he's going to come after you.\" He pulled out some additional photos of Weston from his days at the FBI. \"You may want to warn your deputies.\" Ryan nodded his head and Russell agreed.\n\n\"You gonna be around for a little while?\" Ryan asked.\n\n\"I was thinking about it, maybe for a day or two,\" Smith said.\n\n\"Why don't you come out and bunk at my place then,\" Ryan said. \"Beverly would love to have some company and there's always plenty of food.\"\n\n\"I'd like that,\" Smith said. \"Thanks.\"\n\n\"It's settled then,\" Ryan said. \"Let me just call her and let her know.\"\n\n\"I'll pick you up in the morning, Ryan,\" Russell said. \"Sheriff gets his new car tomorrow.\"\n\n\"Sounds like a plan,\" Smith said. They left at the end of the work day, with Smith following Ryan to his house. Beverly met Ryan with a deep kiss and offered Smith her hand.\n\n\"Good to see you again, Agent Smith,\" she said. \"I hope you like meatloaf, mashed potatoes and gravy and green beans.\"\n\n\"Sounds wonderful,\" Smith said. They sat down to eat after Ryan changed out of his uniform.\n\n\"I gotta say, Ryan,\" Smith said. \"That uniform really looks good on you. I'm impressed.\"\n\n\"Well, thanks,\" Ryan said. \"I still have a lot to learn.\" Smith chuckled.\n\n\"You never stop learning in this business,\" he said.\n\n\"Any news on Knight Petroleum?\" Ryan asked. \"I haven't heard too much in the news lately.\"\n\n\"That's because it's mostly in the hands of the lawyers and the bureaucrats,\" Smith said. \"DEA is looking into the drug connections. Lisa and her lawyers are working with the prosecutor's office back east. Looks like she was starting to get too close to Jake and Elmer's operation.\"\n\n\"And that's why they tried to kill her?\" Ryan asked.\n\n\"Looks that way,\" Smith said. \"I'm sure she had to know some of what was going on, though. She was there with Jake all those years, after all. Still, he was pretty good as keeping things from her, or so she says.\"\n\n\"Think they'll prosecute her?\" Ryan asked. Smith shook his head.\n\n\"I doubt it,\" Smith said. \"She's turned state's evidence and I personally don't think anyone will prosecute a woman in her condition.\"\n\n\"What about the shooting of those two agents?\" Ryan asked.\n\n\"After the shitstorm caused by what happened in New Mexico, the agency changed gears,\" Smith said. \"But personally, I don't think they'll get anywhere. Some heads rolled after that, let me tell you.\" Smith looked at Ryan before continuing.\n\n\"I gotta say, I went over that camp with a fine-toothed comb, just like I would any other crime scene,\" Smith said. \"I don't know how you managed to get in and out like that without leaving any direct evidence. No fingerprints, DNA, nothing. Just a lot of brass and carnage. Even my partner said it looked like a rival drug cartel. DEA said the same thing.\"\n\n\"I've had some experience with that sort of thing,\" Ryan said quietly.\n\n\"Uh huh,\" Smith said quietly. \"You can't be doing that anymore, you know. At least not while you're wearing that badge.\"\n\n\"I know,\" Ryan said. \"I don't think it'll be necessary anyway.\"\n\n\"I hope not,\" Smith said.\n\n\"Me too,\" Ryan said.\n\nThe next day, Russell picked Ryan up in his patrol car. Ryan kissed Beverly and advised her to be on the lookout.\n\n\"You call me right away if you see anything suspicious,\" he said.\n\n\"Don't worry, I will,\" she said. \"Go on now. Go get them bad guys.\" Ryan got in the car and Russell headed out, Smith close behind them. When they got to the station, Russell pulled into the back, Smith parked close by. Ryan saw the new four-wheel drive truck and looked at Russell.\n\n\"That mine?\" he asked. Russell nodded his head.\n\n\"Sure is,\" he said. \"I know how partial you are to trucks, and I know you like the extra headroom.\"\n\n\"Thanks,\" Ryan said. They got out of the car and a man in a shirt and tie came over to them. He handed Ryan a set of keys.\n\n\"I hope you like your new rig, Sheriff,\" he said. \"Top of the line, all the bells and whistles. It'll outrun pretty much anything, on or off the road.\"\n\n\"Thanks,\" Ryan said. \"Looks nice.\"\n\n\"Nice job, Wilbur,\" Russell said. \"You got the paperwork?\"\n\n\"Sure do, Sheriff,\" the man said.\n\n\"Alright, take it on in and Sergeant Bledsoe will see to it,\" Russell said. The man nodded his head and went inside.\n\n\"Damn,\" Smith said, looking the truck over. \"New job, new truck, new woman. You really did hit the jackpot.\" Ryan smiled.\n\n\"No argument there,\" he said. They went inside and headed for the briefing room where the other deputies had already gathered. Russell, Ryan and Smith went to the front of the room. Russell conducted the briefing, then turned it over to Smith after introducing him. Smith pointed to the large picture of Weston on the wall.\n\n\"The man in this picture is James Weston,\" Smith began. \"He's wanted by the FBI for questioning regarding crimes involving the Knight Petroleum camp in New Mexico that was the scene of an attack. He's a former FBI agent and we believe he's on his way here.\"\n\n\"Excuse me, Agent Smith,\" a deputy said after raising his hand. \"Why would he be coming here?\" Smith looked at Ryan. Everyone else did as well.\n\n\"He'll be looking for me,\" Ryan said. \"Whatever you do, don't try to take him on by yourself. If you see him, let me know immediately. Call for backup. This man should be considered armed and extremely dangerous.\" They all nodded their heads and studied the pictures handed out by Sergeant Bledsoe. \"Any questions?\" Ryan asked. There were none, so Ryan dismissed them with a warning: \"Be careful out there.\"\n\nEveryone filed out of the briefing room and headed for their destinations -- some, like Sgt. Bledsoe, to their desks, while others went out back to their patrol cars. One went out front, where his car was parked. A couple minutes later, Sgt. Bledsoe came back into Russell's office, where he, Ryan and Smith were discussing the situation with Weston.\n\n\"Sheriff,\" she said. \"There's a man out front. It looks like that Weston guy. He's got a hostage and a gun.\" The three men sprang into action and ran into the front office. Ryan looked out the window. Sure enough, there was Weston, across the street. One arm was around the neck of a small blonde woman -- Beverly. He held a small revolver in his other hand.\n\n\"Caldwell!\" Weston shouted. \"I know you're in there! Come out here and face me like a man!\" Ryan looked at Russell.\n\n\"This is my problem, Sheriff,\" he said. \"Let me handle it. Besides, it's time I start pulling my weight around here.\" Russell thought for a moment, then nodded his head.\n\n\"Alright, Ryan,\" he said quietly. \"How do you want to play this?\" Ryan looked at the remaining deputies in the office.\n\n\"Clear the streets,\" he told them. \"Get those civilians outta there. And block off both ends of this street. Go!\" They moved quickly out of the door, and began herding the citizens away from danger. Sgt. Bledsoe spoke into her radio, and four sheriff's patrol cars blocked each end of the street. Ryan looked at the two men with him.\n\n\"Okay, Russell, I want you 10 yards to my right,\" he said. \"Smith, you go 10 yards to my left. Follow my lead.\"\n\n\"Yes, sir,\" Russell said. He regarded Ryan for a moment. The tall scarred man wasn't just in charge, he was in command, and Russell knew there was a big difference.\n\nThey went out the door and Russell went 10 yards down the sidewalk as instructed, pulling his sidearm. Smith went the opposite direction, pulling out his weapon. Ryan stood there and looked Weston in the face. He looked at Beverly, who was struggling as Weston held her tight. He could tell she was frightened and looked her in the face. She settled down and he nodded slightly.\n\nHe pulled out his pistol and sent a bullet into the chamber. Standing in the open, he took aim at Weston.\n\n\"Boy, if you don't put that gun down and let that woman go right now, you're gonna be in a heap of trouble,\" he said. \"You hear me, boy? I'm giving you to the count of three.\" The deputies that were close by looked at Ryan, shocked. Some of them had never seen anyone do something like this. Ryan wasn't even trying to take cover. Worse yet, he was taunting this man using language that would piss anyone off in these parts. As Ryan stood, his weapon trained on the man, Weston looked back and forth nervously, between Smith, Ryan and Russell.\n\n\"This is between you and me, Caldwell,\" Weston said. \"I missed you the last time, but I won't this time. But maybe I'll fuck this pretty little woman of yours first.\"\n\n\"One,\" Ryan called. Weston shook his head. Ryan looked at Beverly and made a slight nod with his head, hoping she would get the message. He had been teaching her self defense, and he had recently taught her how to throw a man who grabbed her from behind.\n\n\"Two,\" Ryan called. He looked down at Weston's feet again. \"What's the matter, Weston? You gotta hide behind a woman?\" he taunted. Weston's face began to turn red. Then Ryan saw Beverly's hands go to the arm around her neck. Good girl, he thought to himself.\n\n\"Three,\" Ryan called. Beverly bent down as far as she could, throwing Weston off balance. Unable to complete the throw, she turned, kneeing him in the groin before running away into the arms of a deputy. Pissed, off balance and in pain, Weston stood back up and took aim at Ryan.\n\nRyan wasted no time and put a round square into Weston's left eye socket. The bullet went through his head and out the back, taking a fair amount of brain tissue and bone with it. Russell and Smith popped two rounds into Weston's body at the same time.\n\nThe three men approached Weston's body, their weapons still trained on him. As they reached him, Ryan kicked Weston's pistol away, observing that it was an older style single action revolver. The hammer hadn't been cocked yet. He looked at Russell before speaking.\n\n\"Is this where I'm supposed to read him his rights?\" he asked, causing Russell to laugh.\n\n\"I don't think that's going to be an issue,\" Russell said. He looked at Weston's face before speaking again. \"Were you aiming for his left eyeball?\" he asked Ryan.\n\n\"Of course,\" Ryan said. \"An eye for an eye. Isn't that what the good book says?\"\n\n\"Yeah, but I don't think it was talking about your proficiency with firearms,\" Russell said. Ryan turned and saw Sgt. Bledsoe coming across the street.\n\n\"I called an ambulance, Sheriff,\" she said. Ryan nodded his head.\n\n\"Thank you, Sergeant,\" he said, motioning for her to follow him. He walked toward Beverly who rushed into his arms, sobbing. He held her as she cried.\n\n\"Are you okay?\" he asked her. She nodded her head.\n\n\"I was so scared,\" she said.\n\n\"It's okay,\" he said. \"You did good. We're partners, remember?\" She nodded her head. \"Why don't you go inside with Sgt. Bledsoe. She'll look after you and take your statement, okay? I'll be along directly.\"\n\n\"Okay,\" she said, shaking. Sgt. Bledsoe put an arm around her and led her back across the street.\n\n\"It's okay, sweetie,\" he heard Bledsoe say. \"He can't hurt you any more.\" Ryan walked back to Weston's body.\n\n\"I thought you said this guy was former FBI?\" Ryan asked Smith.\n\n\"Yeah, he was,\" Smith said. \"I guess he got stupid in his old age or something.\"\n\n\"Reckon so,\" Ryan said. By then, the ambulance arrived. A paramedic checked Weston out, and shook his head. They placed his body on a gurney, covered it up and loaded it into the back of the vehicle.\n\n\"Well, Sheriff,\" Russell said. \"Looks like you get to call for cleanup. And you get to handle the paperwork. You know there's going to be an inquiry into the shooting, right?\" Ryan nodded his head.\n\n\"I figured as much,\" Ryan said.\n\n\"Welcome to law enforcement,\" Russell said, slapping Ryan on the back. \"One thing's for certain, though.\"\n\n\"What's that?\" Ryan asked.\n\n\"Everyone in town will feel a whole lot safer now. Anyone coming here looking for trouble will know better than to mess with the sheriff in this town,\" Russell said. They got back into the office and Ryan made some calls as Sgt. Bledsoe took Beverly's statement. When they finished, the sergeant brought Beverly over to him.\n\n\"Sheriff, I'm going to take Beverly over to her car now if that's alright?\" she asked. \"She was delivering eggs to Mrs. Williams when the suspect grabbed her.\" He knew Mrs. Williams lived close by on a small street a few blocks from downtown, well within walking distance. He looked at Beverly before answering.\n\n\"Are you okay?\" he asked her.\n\n\"I am now,\" she said. He gave her a hug, holding on to her tight.\n\n\"Alright, sweetie,\" he said. \"Why don't you head on home now. I'll see you this evening.\"\n\n\"I've got more eggs to deliver first,\" she said. He smiled and nodded his head.\n\n\"Okay, babe,\" he said. \"Be careful. If you're not up to it, call me and I'll come help.\"\n\n\"I'll be alright,\" she said. He watched as the sergeant escort Beverly out the door.\n\n\"I guess that wraps up this part of my case,\" Smith said. \"I'll be heading on back now, unless you need anything else.\"\n\n\"I think we're good to go,\" Ryan said. \"Thanks again, for everything. You will be here for the wedding, right?\"\n\n\"Wild horses couldn't keep me away,\" Smith said. He shook Russell's hand as well. \"Good to see you again, Sheriff,\" he said. Russell nodded his head.\n\n\"Same here, Agent Smith,\" Russell said. After Smith left, Russell turned to Ryan. \"Well? Getting the bad guy is just half the job. C'mon, we got paperwork to do. Correction -- YOU have paperwork to do.\" Resigned to the inevitable, Ryan went with Russell into the office.\n\nThat night, he held a trembling Beverly in his arms. Feeling her soft, smooth skin against him, he was sorely tempted to ravish her body, but he knew she needed to be held and comforted. There would be plenty of time for love-making later.\n\n\"Hold me, please,\" she begged. He held her closer to him and took in her scent. \"That's the second time you've saved my life,\" she said. \"Tell me, is every day going to be like this?\"\n\n\"No, sweetheart,\" he said. \"I think we're done with that bunch. They threw their best at us, but they failed.\" Still, he knew deep inside they had gotten lucky. If Weston had cocked the hammer, things could've ended up a lot different. He kept that to himself, not wanting to cause Beverly any additional angst.\n\n...\n\nTwo weeks after the shooting, Ryan sat at the big desk in his office. Russell had already moved to a smaller desk, giving him access to what would be his permanent working area. Having finished his daily reports, he was working on an online course, trying to get far enough ahead so he could take a week to spend on his honeymoon. Russell was gone for the day, doing patrols and meeting with a real estate agent in hopes of selling his house. There was a knock at the door. He looked up to see Sgt. Bledsoe.\n\n\"Sheriff, there's a Texas Ranger here to see you,\" she said.\n\n\"Send him in, please,\" Ryan said. She backed off to allow the Ranger into his office. Ryan took in the tall, lanky, square-jawed man who looked like he just came out of an old western. He wore a battered Stetson, a red shirt, blue jeans and cowboy boots -- with spurs -- and a floor-length duster. Ryan could see the man's badge and the pistols on his hips. Was he imagining things, or were those cap and ball revolvers, he wondered to himself. He motioned for the Ranger to come inside the office and accepted his hand.\n\n\"Have a seat. What can I do for you today, Ranger?\" Ryan asked.\n\n\"Name's Peace,\" the Ranger said, sitting down. \"Justice O. Peace. Just wanted to let you know the inquiry's been finished. They found in your favor.\"\n\n\"That's good to know, Ranger Peace,\" Ryan said, wondering what kind of a name that was. The Ranger looked at him hard before continuing.\n\n\"That was quite some shootin',\" Justice said. \"Were you really aiming for his left eyeball?\" Ryan nodded his head.\n\n\"Yes,\" Ryan said. \"How do you know that?\"\n\n\"That's what you told Sheriff Coltrane, isn't it?\" Justice asked.\n\n\"I don't recall that being in the report,\" Ryan said.\n\n\"It wasn't,\" Justice said. \"It was an observation on my part. It's kinda what I do. Tell me, was that because of...\" he said, pointing at the patch covering Ryan's left eye.\n\n\"I reckon so,\" Ryan said. Justice nodded his head.\n\n\"An eye for an eye, huh?\" Justice asked. \"He took out your eye in the Middle East, so you returned the favor. I can understand that. Your idea of biblical justice, huh?\"\n\n\"How do you know that?\" Ryan asked. Justice shrugged his shoulders.\n\n\"It's my job to know,\" he said. \"I can tell a lot about a man by looking in his eyes. Or in your case, eye.\" Justice stood up and looked out the window. \"Been a long time since I was in these parts. An awful lot has changed over the years.\" Ryan wondered what he was talking about. Sure, there had been improvements over the years and new construction come in, but he had seen pictures of the town and knew it was pretty much the same as it was 40 years ago.\n\n\"Just a nice quiet, peace-loving town,\" Ryan said. \"And I get paid to keep it that way.\" Justice turned and looked at him.\n\n\"Yes, you do,\" Justice said. \"You know, when Sheriff Coltrane first named you for this job, a lot of us, myself included, thought it was a mistake. It doesn't happen often, but I'm man enough to admit when I'm wrong.\" He extended his hand. Ryan stood up and accepted it.\n\n\"Thank you, Ranger, that means a lot coming from you,\" Ryan said. Justice smiled and nodded his head.\n\n\"Well, it's certainly not every day I get to meet someone who can make a man's heart go into vapor lock just by lookin' at him,\" Justice said. Ryan was shocked. He was certain no one knew what happened that day at the courthouse with Jake. \"You know, you remind me an awful lot of an old friend of mine. They once said he would charge the gates of hell with a bucket of water,\" Justice said. \"I just wanted to look you in the face and see if you were that kind of man, and I believe you are.\"",
        "\"Well, I'm flattered, Ranger,\" Ryan said. \"Listen, if there's anything me or my department can do to help the Rangers, please feel free to ask.\" Justice smiled grimly at Ryan as they shook hands.\n\n\"I'll remember that, Sheriff Caldwell,\" Justice said. \"You take good care of that woman of yours, you hear me?\"\n\n\"I will, Ranger,\" Ryan said. Justice nodded his head.\n\n\"We'll be seeing ya,\" he said as he turned toward to door. \"Y'all have a nice day, now, y'hear?\"\n\n\"Will do, Ranger,\" Ryan said. \"You do the same.\" A chill went up Ryan's back as he watched the Ranger walk through the office, tipping his hat as he passed Sgt. Bledsoe. He sat back down to his computer and looked up as he heard what he thought was the \"clip-clop\" sound of hooves on the pavement outside. Looking outside, though, he saw nothing. \"Maybe I'm losing it,\" he thought to himself and turned back to his work.\n\nA few minutes later, there was a tapping at his door. He looked and saw Sgt. Bledsoe.\n\n\"Yes, Sergeant, what can I do for you?\" he asked.\n\n\"If you don't mind my asking, Sheriff, what did that Ranger want?\" she asked.\n\n\"Says the inquiry is finished and it was a good shoot,\" Ryan said. \"I don't know why they'd send a Ranger out to tell us that, though. Don't they use email?\"\n\n\"Who knows, these days?\" she asked with a smile. \"May I speak candidly for a minute, Sheriff?\"\n\n\"Always, Sergeant,\" Ryan said. \"What's on your mind?\"\n\n\"Well, the other deputies and I have been talking,\" she began. \"At first, we were a bit concerned when Sheriff Coltrane named you for this job. I mean, with your lack of law enforcement experience and all.\"\n\n\"I can understand that,\" Ryan said. \"I was concerned as well.\"\n\n\"Well, I think I can speak for everyone here when I say that we're all glad you're with us,\" she said with a smile.\n\n\"Thank you, Elaine,\" he said, referring to her by her first name. \"That means a lot to me. Truth is, I'm glad to be here with all of you as well.\" She smiled as he said that.\n\n\"That's all I had, Sheriff,\" she said. \"I'd better get back to work now.\" Ryan nodded his head.\n\n\"Yeah, me too,\" he said.\n\n...\n\nTwo weeks later, he and Beverly received a notice from the county. The board had put them up for a commendation, and the governor and state attorney general were coming to present the awards.\n\nPersonally, Ryan didn't think he deserved an award. In his mind, he was just doing his job. He was glad, however, that they decided to give Beverly an award. Nevertheless, he dressed in his best uniform and accompanied Beverly to the courthouse, where the presentation was to be made.\n\nAs he listened to governor's speech, he thought it somewhat fitting that a one-eyed sheriff would be given a commendation by a governor restricted to a wheelchair. He watched and smiled with pride as the attorney general placed an award around Beverly's slender neck. Then it was his turn.\n\nAfter the governor handed him the commendation letter, he turned to the audience for a few short remarks, that concluded with: \"And let this be fair warning to those who would come here to make trouble. Don't mess with Texas.\" Everyone applauded loudly, including Ryan and Beverly.\n\nAfter the congratulations were over, Beverly whispered in his ear.\n\n\"I'm so hot for you, I'm ready to jump your bones right here, cowboy,\" she said.\n\n\"I've never made love to a genuine heroine before, so I'm ready,\" he said back.\n\n...\n\nTwo weeks later, Ryan was in his upstairs bedroom, getting into his tuxedo. Today was the day he and Beverly had been waiting for -- the day they would become husband and wife. Beverly, being the strong woman she is, got through the incident with Weston just fine, despite the initial shock.\n\nAs he got dressed, he looked out the window and saw a gleaming white helicopter land on his pistol range. He saw a familiar logo on the side and wondered what was going on. It was a logo he hadn't seen in about four years. He knew Jim planned to ferry them to Las Vegas for their honeymoon, but he wasn't expecting this. He was shocked when he saw Jim climb out of the chopper in a fresh uniform. What the hell, he asked himself. He ran downstairs and made it into kitchen just as Jim walked in.\n\n\"Jim,\" he said. \"What the hell?\" Jim smiled and shook his hand.\n\n\"Like it?\" Jim said, showing off his uniform with the gold wings and gold stripes on his sleeve.\n\n\"Looks nice,\" Ryan said. \"But...\"\n\n\"Ah, looks like my boss just got here,\" Jim said.\n\n\"Boss?\" Ryan asked. Jim pointed out the front window. Ryan looked and saw a large white limousine pull in front of the house. Ryan ran outside just as a door opened. Out stepped two fairly young Middle Eastern men. One held the door open as a very familiar figure in a gleaming white robe stepped out. He extended a hand, which was filled with the hand of a very attractive Middle Eastern woman. Ryan went out the door and met them at the gate.\n\n\"Sheikh Abdullah,\" Ryan said. \"As-salaam alykum,\" he added, shaking the man's offered hand. The man smiled and responded: \"Wa alaykum as-salaam, Ryan. It is good to see you as well, my old friend.\"\n\n\"I'm surprised,\" Ryan said. \"I wasn't expecting you.\" The old man smiled and nodded his head.\n\n\"I just concluded some business, and thought I would visit,\" he said. \"It is, how might you say it, icing on the cake. Please, if I may, let me introduce my wife, Alia,\" he said, turning slightly to the small woman next to him. Ryan knew the sheikh wasn't as much of a traditionalist as other Middle Eastern men, but he didn't want to offend the man, or his wife. So, he placed his right hand on the left side of his chest and bowed slightly while greeting her. She smiled and did the same.\n\n\"And my oldest sons, Muhammad and Ibrahim,\" the sheikh said. Ryan shook their hands and greeted them as well.\n\n\"I understand you spent some time in our country,\" Muhammad said.\n\n\"I did,\" Ryan said. \"I worked for your father for a time, but I never met his family.\"\n\n\"My sons were in college at the time,\" the sheikh said. \"Harvard Business School. Now they get to prove that I did not waste my money educating them.\" Ryan chuckled at that.\n\n\"Please, come inside,\" Ryan said. He held the gate open for them and ushered them inside. The house was already full of guests, but Ryan found Bob and waved him over.\n\n\"Sheikh, this is my son-in-law, Robert Greene,\" Ryan said. Bob shook the sheikh's hand, then Muhammad's and Ibrahim's. He nodded at Alia, having noticed that Ryan did not shake her hand.\n\n\"So you are 'Gunner,' is that right?\" the sheikh asked. Bob smiled sheepishly and nodded his head.\n\n\"Yes, that's what I've been called,\" he said.\n\n\"It suits you,\" the sheikh said. \"Jim told me all about you. I've been following your career at the Commerce Department. That report you wrote on making Amtrak profitable was quite interesting.\"\n\n\"You read that?\" Bob asked, surprised.\n\n\"Oh, yes,\" the sheikh said. \"Too bad your government will never adopt it, though. It makes too much sense.\" They all laughed at that. \"Personally, I think your talents are wasted at the Commerce Department. Perhaps it's time you spread your wings and take on new challenges.\"\n\n\"I don't know what else I'd do,\" Bob said.\n\n\"Perhaps you'd like to come work for me,\" the sheikh said.\n\n\"Work for you?\" Bob asked. \"Doing what?\"\n\n\"Well, it's going to make the news soon anyway, so I might as well tell you,\" the sheikh said. \"As you know, Knight Petroleum is in the middle of a shake-up. Stock plummeting, confidence falling, the whole infrastructure is collapsing.\"\n\n\"Yes, I've been following that,\" Bob said.\n\n\"Well, I've just concluded a deal to take it over,\" the sheikh said. Bob looked shocked. \"Yes, we now have control of nearly 75 percent of the available stock in the company and we concluded a deal. It just has to be approved by your government, but that's a mere formality at this point. We are now in the process of recruiting new leadership to take over as soon as the transition is approved. Everyone on the old management team is transitioning out and the new leadership will be in place within a few days. I just need a new CFO, and I felt it was time to inject some new blood. Would you be interested in the position?\"\n\n\"Wow,\" Bob said, excited. \"Yes, sir, I would. Very much.\"\n\n\"Excellent,\" the sheikh said. \"Let's meet after the festivities and we can discuss the details of the acquisition and your compensation package.\"\n\n\"That sounds terrific, sheikh, thanks,\" Bob said. The sheikh turned back to Ryan and took an envelope from Muhammad. He handed it to Ryan.\n\n\"I hope you don't mind,\" the sheikh said. \"A small wedding gift. I've placed my executive helicopter and my pilot at your disposal for the week, and I took the liberty of upgrading your reservation. You and your lovely bride are now in the penthouse suite, at my insistence. And I've given you just a little bit of walking around money.\"\n\n\"Thank you, sheikh, you didn't have to do that,\" Ryan said.\n\n\"I know, but I wanted to,\" the older man said. \"Enjoy, please. After all, how often do you get to visit Las Vegas?\"\n\n\"Very true,\" Ryan said. \"You have my heartfelt thanks.\"\n\n\"Speaking of which, where is your lovely bride?\" the sheikh asked.\n\n\"She's upstairs with my daughter getting ready,\" Ryan said. \"It's tradition that the bride stay out of sight until the beginning of the wedding.\"\n\n\"Ah, I understand,\" the sheikh said. \"Well, then, Mr. Greene, would you please accompany us to our seats?\"\n\n\"Absolutely,\" Bob said. \"Then I have to get back. I'm Dad's best man.\" The sheikh nodded in approval. Ryan watched as they walked out and opened the envelope. His eyes grew wide when he saw a pre-paid Visa card. A card attached to it said $100,000 was loaded on it. A small gift, indeed. He knew this was chump change for the sheikh, however.\n\nHe looked around the house for a moment and thought about all he had been through to get to this point in his life. The place was packed with friends, both old and new. His old team -- Bill, Buster, Ian, Jim and Cap -- were all there, along with Jorge, Jay Goldsmith, every deputy that wasn't on duty and of course, Russell. A few members of the county board of commissioners were there as well. He hoped they would have enough food and drink for everyone. He was glad he had plenty of space out back for everyone to park.\n\nQuite a few friends of Beverly's were there as well, along with some of their neighbors. There was one person missing, though. He looked out front and saw a dark SUV pull into the driveway. After it stopped, he saw Agent Smith get out, then open the passenger door for his wife. Ryan smiled as he greeted his friend.\n\n\"I thought you guys weren't going to make it,\" Ryan said.\n\n\"Wouldn't miss this for the world,\" Smith said. He introduced his wife, Gloria, and Buster walked them out to their seats. Ryan looked at his watch and realized it was about time. He checked himself one last time in a mirror, then headed out.\n\nHe stood at the outdoor altar with Bob, Ian and Cap. They all turned as the Wedding March was played on the outdoor sound system. Everyone got a smile as little Ryan walked down the aisle, spreading flower petals in front of the procession.\n\nBob steadied Ryan as he watched his bride-to-be walk down the aisle on Russell's arm, preceded by Sarah, Elaine Bledsoe and Trish Callaway, one of Beverly's long-time friends. Beverly looked so beautiful to him that he had to remind himself to breathe. When they reached the altar, the pastor asked, \"Who gives this woman to be married?\"\n\n\"On behalf of the community of Hard Rock, Texas, I do,\" Russell said. Everyone smiled at that. The ceremony was uplifting, and the whole thing was captured and streamed live for the benefit of Beverly's son, who couldn't get away from the Naval Academy. A few days before the wedding, Ryan had finally gotten a chance to talk with him over Skype and they hit it off just fine.\n\nWhen it was finished, the pastor asked them to face the audience.\n\n\"And now, it is my distinct pleasure to introduce for the first time, Mr. and Mrs. Ryan Caldwell,\" the pastor said, prompting applause from everyone. The reception went well, as a local band played an eclectic mix of country, bluegrass and rock music. There was plenty of food and drink and everyone had a good time, reminiscing and dancing.\n\nEveryone came up to wish the newly-married couple well and Ryan was glad no one ruined the day by mentioning Lisa. Not that they needed to -- Ryan already knew her situation thanks to Jorge, Sarah and others. Having lost the vast majority of her wealth, she had been forced to sell her mansion and was now in assisted living while undergoing therapy that could last years. On top of that, she was still considered an accomplice to much of what Jake, Elmer and the board had been doing. The only thing that kept her out of jail was her cooperation and her physical condition.\n\nTimmy, the man who shot Lisa, was facing about 10 years in jail, thanks to a plea deal his lawyers made with the federal prosecutor. A number of mid and lower-echelon managers with Knight were also on their way to jail for various crimes. Police in England still had not solved Blackstone's murder, but were pursing all leads with the assistance of the FBI.\n\nThe class action lawsuit was still slowly working its way through the system, and Ryan figured he would never see a dime from it. Still, he was heartened to know that Knight's legacy would always be remembered with infamy.\n\nAuthorities attributed the attack on the Knight compound to a drug cartel operating south of the border and Smith was on his way to Washington, D.C., where he would take a new deputy director position responsible for cleaning up the agency.\n\nAll in all, Ryan thought, everything worked out well. He and Beverly still hadn't worked out all the details regarding their two homes, but he knew they would, eventually. Beverly's egg business was doing well and she had mentioned expanding it and perhaps hiring in a couple of people, turning her old house into an office space.\n\n\"I just want to say thanks for staying to look out for my chickens,\" Beverly told Sarah and Bob. \"I just hope it isn't asking too much.\"\n\n\"Nonsense, Mom,\" Sarah said. \"I'm a veterinarian, remember? It's a pleasure. Besides, you two deserve some time together.\"\n\n\"Are you sure you guys can handle all this?\" Ryan asked Bob, handing him keys to the house.\n\n\"Don't worry, Dad,\" Bob told him. \"Sarah and I will take care of this.\"\n\n\"And we'll help him, won't we boys?\" Buster asked. Cap, Ian, Bill and Jorge nodded their heads.\n\n\"Alright,\" Ryan said. \"Thanks for everything.\"\n\n\"No problem, Dad,\" Bob said. \"You guys go, have fun.\" Ryan turned to Russell.\n\n\"You got everything under control?\" he asked. Russell laughed.\n\n\"Oh, I think we can manage a week without you,\" he said, laughing. \"Go on, your chopper's waiting.\"\n\nRyan and Beverly said their goodbyes and ran through a gauntlet of well-wishers tossing rice. They made it to the helicopter and Jim closed the door as they climbed in. Jim had already loaded their luggage on the helicopter and they were ready to go. Everyone could see, \"Just Married\" written on one of the back windows after the door was closed.\n\n\"Sorry,\" Cap whispered to Sheikh Abdullah. \"I couldn't help myself.\"\n\n\"No problem,\" the sheikh said. \"It will give Jim something to do.\" They all laughed. They waved as Ryan and Beverly waved from the chopper. They watched as the aircraft lifted slowly, then turned and headed north.\n\n\"You think they'll join the mile high club in that thing?\" Buster asked.\n\n\"It wouldn't be the first time it's happened,\" the sheikh said, smiling. \"It is much more comfortable than that rickety old thing Jim likes to tinker with.\"\n\n\"Think Ryan finally found what he was looking for?\" Ian asked. The sheikh nodded his head.\n\n\"I think so,\" he said. Sarah looked at him, confused.\n\n\"What was he looking for?\" she asked. The sheikh looked at the chopper, now nearly out of sight.\n\n\"Peace,\" he said. \"And a father's justice.\"\n\n...\n\nFade to black...\n\nNotes:\n\nApologies in advance if I got any of the greeting with the sheikh and his wife wrong. I relied on Google for that, so if anything is incorrect, the blame falls on Google...\n\nAs far as I know, there is no town in west Texas named Hard Rock. I made that up for the purpose of this story.\n\nI also know that sheriffs in most jurisdictions are elected, not appointed. Remember, this is MY universe, where my rules apply...\n\nFor those who may be wondering, \"Ranger\" Justice O. Peace is from my series \"Justice.\" I suggest you read that series to learn about him.\n\nOn a final note, I want to thank everyone for the votes and kind words. I hope you enjoyed this series as much as I enjoyed crafting it for you. I'm sure there are those who want to say this or that wouldn't or couldn't happen, but this is a work of fiction, and therefore isn't real."
    ],
    "authorname": "saddletramp1956",
    "tags": [
        "cheating",
        "daughter",
        "justice",
        "marriage",
        "outdoors",
        "wife"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/a-fathers-justice-pt-07"
}
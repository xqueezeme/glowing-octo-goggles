{
    "title": "Sally\u2019s Wish, Anal Education",
    "pages": [
        "Part 1 of 3: Sally's Wish\n\nSally updated her wish list at the very last minute. It was an annual thing her friends liked to do. Instead of having to buy everyone a bunch of gifts, each person would be secretly assigned to one person. \n\nThey were all career oriented adults, so the price limit was $300. Not too high. Not too low. \n\nHer wish list was fairly basic. Even though she prided herself on being a sassy & sophisticated woman, she had most of what she wanted anyway.\n\nSo she picked a few travel essentials: crime novels, music, and travel wear.\n\nFairly cheap items. She expected a gift card to make up for the rest of the $300 limit.\n\nWhen it was time to exchange gifts, Sally got everything she wanted at the little get-together between friends. Thriller novels. A few things to keep her warm. And she also got a gift card worth $250. \n\nIt was a gift card for a spa in Italy, where Sally was expected to travel soon as a travel writer. \n\n\"I look forward to it,\" Sally smiled at the party, holding up the gift card for everyone to see. \n\nThe anonymous friend was revealed to be Aileen, a married housewife who was friends with Sally since high school.\n\n\"I know you'll love it,\" Aileen smiled back.\n\nThe little gathering continued with everyone else opening their gifts.\n\n***\n\nA few days later. Sally packed her things at night. She had already attended another party with family. Now that the holiday season was nearly over with, Sally could concentrate on her job, which was to write about a new Italian adventure during the winter time.\n\nHer phone rang. It was a call from Aileen, which kind of surprised Sally, because Aileen was a family woman. She always spent her nights with her husband and kids.\n\nThey made small talk for a while and Aileen sent her regards for the trip.\n\n\"You're actually going to use that gift card, right?\" Aileen asked.\n\n\"Yeah, of course.\"\n\n\"I mean it Sally, I know how your apartment is. You get tons of gifts and presents and you toss them in a pile which will soon be forgotten.\"\n\nAileen was right. With a packed travel schedule like the one Sally had, her place was a mess and she had small items stacked everywhere. Most of the items were stuff she bought during her travels, or gifts from fans of hers.\n\n\"Do you really think I'll pass up a trip to the spa?\" Sally replied. \n\n\"Good point.\"\n\n\"Especially during winter. This place better be good.\"\n\n\"Believe me, it is,\" Aileen replied. \"Rick and I spent our honeymoon last year in Italy. We went to that very same spa.\"\n\nRick, of course, was Aileen's dear husband. And Sally detected a sentimental feeling in Aileen's voice.\n\n\"It must have been a nice honeymoon.\"\n\n\"Definitely. Let's just say it spiced up our love life, especially after, you know, having kids.\"\n\nThat caught Sally's attention. The typically prudish Aileen was never one to talk about her sex life.\n\n\"Sounds like one hell of a massage.\"\n\n\"It's more than that. They offer other services too, you know.\"\n\n\"Aileen, whatever you called me for, just say it. I know you better than you think. Just be frank.\"\n\nThere was a brief pause on the phone.\n\n\"Rick and I, you know, explored anal fantasies at that spa,\" Aileen said in a soft and shy tone.\n\nIt more than grabbed Sally's attention.\n\n\"Well aren't you full of surprises today,\" Sally replied.\n\n\"Actually, the surprise was meant for you. I didn't want to mention any of this in front of the others, for obvious reasons, but I know it's your fantasy too.\"\n\n\"Are you talking about that conversation from back in college?\" Sally tried to scoff. \"I appreciate the sentiment, but that was such a long time ago.\"\n\n\"So you're telling me that you don't think about it anymore?\"\n\n\"I'm not saying that either.\"\n\n\"If I had the courage to try this, then so should you,\" Aileen said with a sudden newfound courage.\n\nIn a direct way, Aileen was right. Aileen had always been the quiet book smart girl of the group. Sally had always been the outgoing one.\n\nSally quickly looked around her bedroom and found the gift card next to her bed. She was planning to take it on the trip and use it. She looked at the gift card from a much different perspective now. \n\nThe spa wasn't simply a place for rest & relaxation. It was a place for sexual satisfaction. Anal satisfaction, to be exact.\n\n\"What is this place?\" Sally asked, looking at the card.\n\n\"The one place in Italy which you shouldn't write about. It's a lovely little spa which offers secret services. Promise me you won't write about it?\"\n\n\"Promise. I wouldn't want to ruin a good thing.\"\n\nAileen breathed an unnecessary sigh of relief. \"Show them that gift card. Then mention my name. They know me.\"\n\n\"Really? Are you a regular there?\"\n\n\"Long story,\" Aileen said, brushing off the question. \"But they're professionals at what they do. Trust me. If they can get me into it, they can get anyone into it.\"\n\nThe absurdity of it all finally came sinking in. After a long day, Sally wondered if she was really having this conversation. \n\nSally shook her head briefly. \"I'm sorry, what exactly are we talking about? How did we get from a gift card, to a spa, to anal sex?\"\n\n\"They're a spa which provides anal services. You know, they teach people how to enjoy it. They help couples expand their sex life. They work wonders.\"\n\n\"It certainly sounds interesting.\"\n\n\"You have no idea. Again, secret, remember? Don't tell anyone. And please don't write about it.\"\n\n\"Aileen, I always keep my promises.\"\n\n\"Well, then my work is done. Have a good night. And enjoy your trip to Italy.\"\n\nSally couldn't help but smile. \"Goodnight.\"\n\n\"And keep me updated on your private adventure. I'll be checking my phone for email updates while you're over there.\"\n\n\"Will do. Have a good night.\"\n\nAfter the call ended, Sally couldn't help but smile to herself, thinking how crazy life could be sometimes.\n\n***\n\nThe trip to Italy was exactly what she had expected. She had been there a few times before, after all. But never in the midst of winter.\n\nShe enjoyed the sights and sounds and beauty of a cold Italy. She brought her laptop everywhere and wrote about the experiences. \n\nIn the back of her mind, she wondered about the place Aileen had recommended. The place where Aileen had finally stopped being so prudish when it came to sex. If that spa could make Aileen open up to anal sex, then they must be good at what they do.\n\nIt wasn't until Sally finished her work that she was finally able to look up the place. It was in a fairly secluded area near the shore. The building was small. Two stories. And it was wide.\n\nSally entered, not knowing what to expect.\n\nThe spa was a mixture of the very old and the very new. The structure looked as though it was made of clay. Old antiques and paintings decorated the walls. But at the same time, the latest computers and furniture were being used.\n\nA few guests strolled around the place. Most seemed to be foreigners. Some wore bathrobes as they leisurely strolled around.\n\nSally was greeted by a young Italian man who spoke with a thick accent. Then she handed the man her gift card. He looked at the gift card and told her to wait.\n\nAfter a few moments of waiting, a tall slender brown skinned woman came to the reception area. She was graceful and elegant in every way. She was dressed in a casual, but stylish, loose fitting Italian outfit.\n\nSally took note of the woman's beauty. Deep down, if Sally could look like anyone else, she would want to look like that Italian woman.\n\n\"I'm Gianna,\" she smiled, extending her hand. \"Pleasure to meet you.\"\n\nThey shook hands. The woman seemed to be more fluent in English than Sally had expected. It was clear by Gianna's confidence and assertiveness that she was the owner of the spa.\n\n\"I'm Sally. Pleasure to meet you too.\"\n\nGianna smiled, \"The pleasure is all mine. So, you're here because a friend wanted you to have our services.\"\n\n\"That's right. A gift from my friend Aileen. She said that you'd remember her.\"\n\nGianna continued smiling, \"I never ever forget a client. We take great pride in our work here. Yes, I remember Aileen. Such a lovely woman. Amazing husband too.\"\n\n\"I'd have to agree.\"\n\n\"Why don't I give you a tour of our facilities?\" Gianna asked. \"We can talk and get to know each other better. That way, we can find out exactly what your needs are. Okay?\"\n\nThe sultry Italian accent in Gianna's voice had Sally swooning. Sally wasn't a lesbian by any means, but my god that accent was hypnotic. So was Gianna's beauty. It was a further reminder why Italy was one of Sally's favorite countries to visit.\n\n\"Sounds great,\" she smiled.\n\n***\n\nThe tour was fairly basic since the spa was rather small. There were open rooms for massages. Spa treatments. Saunas. The usual things.\n\nThere were also various sculptures & artwork of the naked female form. Classy artwork. It gave the spa a much more erotic feel to it.\n\nAnd there were also private rooms for private treatments, which Sally wasn't able to see since they were occupied.\n\nAfterwards, the two ladies sat down in Gianna's small office for a cup of coffee. They made small talk while they drank.\n\n\"Tell me,\" Gianna said. \"Your friend has sent you here. Why?\"\n\nSally knew where the conversation was headed. But she didn't feel comfortable discussing the anal thing right away. It was too embarrassing for a first time meeting.\n\n\"Maybe because I travel a lot, and she knew I was coming to Italy. I'm a travel writer.\"\n\nGianna nodded. \"A writer. We have much in common then. I love the various forms of human expressions.\"\n\n\"Absolutely.\"\n\n\"Speaking of human expression, let's discuss how we may help you.\"\n\nGianna took out a small binder and placed it on the table. She opened it and slowly flipped through it. Each time she turned the page, she described exactly what services the spa had to offer, along with the prices.\n\nEverything was discussed in a professional manner, and Sally was impressed by the depth of knowledge and care which Gianna showed.\n\nIn the end, it was understood that Sally's gift card had enough money for two appointments. But of course, Sally could always pay for extra appointments on her own.\n\n\"Have you got any ideas so far?\" Gianna asked.\n\nThat was the moment when Sally finally decided to open up and enjoy her trip to the fullest extent.\n\nSally briefly tensed her body. \"Actually, I had something else in mind. You see, my friend Aileen bought me the gift card with the understanding that I would explore certain things. Things which don't appear to be in anything you're showing me.\"\n\nThere was a smile on Gianna's face and a gleam in her eyes. The owner of the spa knew exactly what Sally was talking about, and it was finally time to stop pretending.\n\nGianna got up and went to a cabinet where she grabbed another binder. Then she sat back down.\n\n\"This is usually for couples,\" the owner explained. \"I figured you weren't interested in this. Forgive me.\"\n\n\"No worries.\"\n\n\"Is there any special reason for your interest?\"\n\n\"Well, it's a long story. My friend wanted me to experience this and I was a little embarrassed to ask you earlier.\"\n\n\"There's no need to explain yourself. Let's have a look.\"\n\nGianna opened the binder and flipped through the pages and pictures. The images were fairly explicit, but in a tasteful way. The explanations from Gianna along with the explicit pictures in the binder were all discussed in a professional manner. Everything from vaginal stimulation, oral sex techniques, erotic massages, and everything a couple would need to have a happy sex life.\n\nThe discussion was so casual, that it felt like a doctor's appointment.\n\nThat was another thing which Sally enjoyed about the Italian people. They were frank. Passionate. Open. And they were in touch with their sexuality, without shame. \n\nAfter everything was explained, the two women looked at each other. Gianna gave a patient look, which showed that she was more than willing to wait if Sally needed more time. But Sally already knew what she was there for.\n\n\"I want the same treatment as my friend Aileen. Do you still remember what she was here for?\"\n\nA smile grew on Gianna's face. \"I never forget a client's wish. Especially my American clients, who can be so much fun in different ways.\"\n\n\"Was Aileen fun to work with?\" Sally asked out of pure curiosity\n\n\"Oh yes. I enjoy shy women who learn to be adventurous. It reminds me of finding the right oyster, taking time to open it, finding the perfect white pearl inside. Shining bright and beautiful.\"\n\nSally was strangely aroused thinking of her close friend being compared to an oyster with a pearl inside. Only instead of a pearl, there was anal satisfaction.\n\n\"Interesting analogy,\" Sally nodded. \"So how does this process work?\"\n\n\"Depends on the needs of the woman. If she's shy, hesitant, and timid, we go a little bit slower. We take our time to ensure maximum comfort.\"\n\nThings sounded so smooth with Gianna's tender voice and Italian accent. It made Sally ready for anything.\n\nSally shrugged off any hint of embarrassment. \"How would it work for anal?\"\n\n\"Slow and steady. Plenty of deep tissue massage first. That always makes a woman relax. Everytime. Then while she's laying on her stomach, we spread her legs, after the massage. And we take things slow.\"\n\n\"Is that what Aileen did?\"\n\nGianna nodded. \"While her husband watched and observed. He penetrated her when she was ready.\"\n\nThe revelation left Sally taken aback. Once again, she found herself being aroused at the thought of her close friend's sex life. Who would have thought? The typically shy and prudish Aileen being sodomized in front of a beautiful Italian woman.\n\n\"I think I'm ready for something like that. Obviously without the penetration part.\"\n\nGianna raised an eyebrow. \"Anal without penetration?\"\n\n\"Well, I don't have a partner. That's what I mean.\"\n\n\"We can provide a partner.\"\n\nSally sat up straighter. \"This is getting a little confusing. How would this approach work since I don't have a partner with me?\"\n\n\"We have many options. Our masseur could use something inside of you. A small toy. A medium size toy. Or maybe even a large toy. If you're in an adventurous mood, maybe you will accept his manhood inside of you. If none of that appeals to you, then maybe my fingers will.\"\n\nThe tone of the conversation had turned far more sexual. All while Gianna maintained her cool European composure and sexy confidence. God, Sally only wished she could be that cool and confident in her own personal life.\n\n\"Do I have to answer that now?\"\n\n\"Any time you'd like. We're certainly in no rush. Don't forget that you're in Italy. We have much slower clocks here.\"\n\n\"That's one of the things I love about Europe.\"\n\nGianna smiled, \"What's your interest with anal stimulation? You seem so hesitant. But you're so curious, like a kitty.\"\n\n\"Long story. But Aileen bought me this gift because she knew it was a fantasy of mine.\"\n\n\"There's nothing wrong with this kind of fantasy. Embrace it. Be the woman you are. A beautiful woman with her own fantasies.\"\n\nGod, there was Gianna with her cool confidence again, Sally thought to herself.\n\n\"If it was only that simple.\"\n\n\"Ever have anyone play with you there?\" Gianna asked with her accent.\n\n\"My butt? I've tried it with past lovers. No success. For years, I came to the conclusion that butt-play isn't for me. My backside probably wasn't built for it. But if it could work for someone like Aileen, then I'm sure it could eventually work for me.\"\n\n\"You seem to have a fascination with anal. Why?\"\n\nSally tightened her lips and thought for a moment. \"I've always thought of myself as an adventurer. Ever since I was young. When I was old enough to become sexual, I considered myself to be adventurous in the bedroom. I'll be honest, I kind of slept around in college. And later in my adult life. I've tried about everything there is to try, except for this.\"\n\n\"And you feel that anal sex is the one thing you haven't fully explored. Like you're missing pleasures of the human body.\"\n\nGod, this woman is good, Sally thought.\n\n\"Exactly. Aileen was my college roommate. We've talked about this a long time ago. That's why I was surprised when she bought me this gift card for the holidays and had me come here.\"\n\n\"A pleasant surprise, I'm sure,\" Gianna noted. \"It's nice to have friends like that, who care about you and your needs.\"\n\n\"You're right.\"\n\n\"Do you have any problems down there? Anything making it difficult?\"\n\nSally shrugged. \"Just the size. I guess I'm just small in that area. It feels tight and I can't enjoy it.\"\n\n\"Fortunately, we know what to do. The anal cavity is adaptable. But it must be done with love and care.\"\n\nOnce again, there was a confidence and coolness to Gianna. She knew exactly what to say and how to act. God, that woman is perfect, Sally thought enviously about the Italian spa owner.\n\nPart 2 of 3: Anal Education\n\nThe room was small. The walls looked like they were made of flattened clay. There was a sink and a few supplies. There was a chair and a table. There were towels and moisturizers. Most importantly of all, there was a massage table in the middle of the room where all the magic would happen.\n\nSally undressed. She removed everything neatly and orderly. Being well dressed was something she prided herself on. And she made sure to handle her expensive clothes with great care. She folded everything neatly and placed them on a table.\n\nShe picked up the towel and wrapped it around her body. Frankly, she wouldn't really have minded if anyone at the spa saw her nude. She had a great body and she knew it. Hours of yoga and spinning classes were to thank. Her arms were toned and so were her legs. Her breasts were small and perky, with nice light brown nipples, which easily hardened with any form of arousal.\n\nPerhaps her greatest physical gift was her backside. She had a nice round butt. Most of it came natural. She came from a long line of women with nice butts. But a lot of it came from hard work and a disciplined exercise routine.\n\n\"I'm ready,\" she said towards the half-opened door.\n\nThe door was thin and the people on the other side heard it. With a towel wrapped around her body, Sally sat on the massage table.\n\nShe became a little nervous when the door opened, and Gianna entered with a handsome Italian man.\n\nGianna gave a pleased look when she saw Sally sitting with only a towel on. If Sally didn't know better, she'd say that Gianna had the hots for her. So did the man, who made no attempt of hiding his interest in Sally.\n\n\"This is your masseur,\" Gianna said, gesturing towards the man. \"He has the best hands in all of Italy, in my opinion.\"\n\nSally shook the man's hand.\n\n\"I think I might have to agree,\" Sally replied.\n\nGianna closed the door.\n\n\"Shall we get started?\"\n\n\"We should.\"\n\n\"Remove your towel,\" Gianna said. \"Lay on your stomach.\"\n\nWithout shame, Sally flung the towel away. Her fully nude body was briefly displayed for the two Italians to observe. The view of Sally's breasts and shaved crotch ended when she laid on her stomach. Her bare backside pointed straight up.\n\n\"Let's begin,\" Gianna said.\n\nThe spa owner snapped her fingers and the masseur went to work, arranging his assortment of oils and lubricants.\n\nMoment later, Sally heard a bottle cap open. Then she felt a lukewarm substance being poured across her back. It went all the way from her shoulders down to her butt, even to her thighs. The feelings of the oily substance made her skin tingle.\n\nThen the massage began. Gianna was right, Sally thought. The man had incredible hands. Just incredible. Within moments, Sally felt her back muscles being squeezed and pressed in various ways. The hands were strong and the fingers knew exactly where to press.",
        "It was a mixture of pain & pleasure.\n\nSally felt her muscles being pressured in ways she had never felt before. And Sally was a woman who prided herself of being a veteran of spa treatments. Never had she felt anything like this.\n\nTime flew by and Sally enjoyed her full backside massage. Her shoulders, the middle of her back, lower back, and thighs were all being rubbed & squeezed. Everything except for her naked ass, which she figured would come later.\n\nAfter a while, Sally couldn't help but loudly moan & groan.\n\n\"I think it's finally time,\" Gianna said with her sensual Italian accent.\n\nSally was pulled out of the mental relaxation and was reminded of why she was there in the first place.\n\n\"What happens next?\" Sally asked, still face down.\n\n\"That's up to you. You never gave clear instructions.\"\n\nThe back massage continued and Sally thought about how far she was willing to go.\n\n\"What are my options?\" Sally asked.\n\n\"You seem timid, so we'll start slow. Here are your options: The fingers of the masseur. Maybe a small sex toy. Or my fingers.\"\n\nSally thought for a moment. Each option sounded intrusive, but in a dirty kind of way, which was very arousing.\n\nThe choice was pretty easy.\n\n\"Your fingers, please.\"\n\n\"Excellent. I love being the first to enter.\"\n\nSally's heart raced. \"I like that you have slender and gentle fingers. I'm sure it will feel easy.\"\n\n\"I have a soft touch. You're in good hands, Sally. But first, you need a bottom rub.\"\n\nGianna snapped her fingers. Suddenly, the masseur brought his hands down to Sally's bare ass. With his strong hands, the masseur squeezed and pressed Sally's butt. It was like the masseur was kneading dough. In fact, Sally was entirely convinced that the male masseur was actually a full time bread maker, and giving massages was his part time gig. \n\nThe hands continued to squeeze and massage Sally's butt, which started making her even more aroused. Who knew that the female bottom could be such an erogenous zone? Sally was finding that out firsthand.\n\n\"You're ready,\" Gianna said.\n\nSally could hear the Italian spa owner walking over to the sink to wash her hands. The water ran and Gianna cleaned herself. When the water stopped, Gianna used a towel to thoroughly dry her hands.\n\nThen there was the sound of Gianna opening a bottom cap. Then the sound of something being poured. Sally knew exactly what she was hearing. She heard Gianna lubricate her own fingers before the anal penetration.\n\nThe strong masseur spread both of Sally's legs apart. Then he spread Sally's butt cheeks apart. It was the moment of truth. Sally felt her anus being so exposed and vulnerable. She suddenly became self-conscious over the fact that the spa owner and the masseur both had a clear view of her little brown hole.\n\nIt was slightly embarrassing, but Sally took comfort in the fact that they must have seen plenty of butt holes. It must have been no big deal to them, just like doctors are immune to nudity because they see it so much.\n\n\"Relax my dear,\" Gianna said in her soothing Italian accent.\n\nSally's eyes opened wide as she felt the lubed finger press against the delicate ring of her anus.\n\n***\n\nThat night. Sally was in her quiet hotel room. She sat comfortably in bed with the laptop resting on her thighs as she sat upright. At that hour, she knew her friend Aileen was also in front of the computer.\n\nShe sent an email entitled: An Education\n\nAileen,\n\nThe trip to Italy so far has been amazing. I'm loving the sights and sounds as always. But you already knew that I would.\n\nYou're probably wondering whether or not I've been to the spa. Well, I have. And I have to say that your gift was probably the best I've ever gotten. I have another appointment tomorrow. My last before I leave. : (\n\nThis has been an education for me.\n\ntalk to you soon,\n\n- sal\n\nThe email was sent. Sally knew she would get a response soon. So she surfed the internet for a while. She also put the finishing touches on her travel writings. Everything looked great so far.\n\nIn typical Aileen fashion, a swift response was sent.\n\nSally clicked open the reply email:\n\nIs that it? Details! Details! Details!\n\nAileen\n\nSally smiled to herself. It was the sort of response she expected. It reminded Sally of how Aileen was during college. Every time Sally had gone on a date, Aileen would wait patiently by the door until Sally arrived back to the dorm, curious about every single detail.\n\nShe typed her response:\n\nWell, it's kind of a long story. I'll tell you the details when we meet for lunch.\n\nBut....I can tell you that Gianna is a very sweet woman. The masseur is also handsome as hell. After some discussion, the three of us were in a room together. I was treated to the best massage ever.\n\nThen, the time came. I was given my options, and I chose Gianna's fingers (nice, thin, and delicate). My legs were spread. She lubed up. And that was my day!\n\nWith a quick click, the email was sent, and Sally was still smiling to herself.\n\nShe could imagine the impatient look on Aileen's face reading the email. It made Sally feel young again, teasing her friend over dirty little details of sex. But not just any sex, this time, it was details of anal play.\n\nWithin a minute, the reply came.\n\nSally clicked open the email:\n\nDetails!!!\n\nHow did Gianna's finger feel? Did it hurt? Were you comfortable? Most importantly, what will you be doing tomorrow?\n\nEven more importantly than that, aren't you glad you have me as a best friend?\n\nSally smiled more. How she wished she could be back in America having hot coffee, sharing all the details with her friend.\n\nBut, that wasn't the case. They were half a world apart, and they needed to communicate through email.\n\nSally replied:\n\nYes, I'm glad I have you as a best friend! And we need to be on each others wishlist from now on. Until forever.\n\nTo your question, Gianna has a nice touch. Correction: A perfect touch.\n\nThat woman must be a sorcerer or something. Her skin is like olive oil. Soft silky and smooth. She knows exactly what to do. What angle. What pace. ect...\n\nShe's skilled at playing with a woman's ass (if that's even a compliment).\n\nAfter that amazing massage I had, my ass was ready for anything. But, I wanted to start slow and small. Gianna's finger was the perfect gateway to anal pleasure for me. \n\nShe pressed her lubed finger against my little butthole. I'll admit, I flinched like a wimp. But I held my ground. I'm a big girl. I accepted the finger going inside my butt. It felt so awkward. Like it wasn't supposed to be there (and of course, it wasn't!) But it felt nice.\n\nThe second I got used to it, Gianna pulled back, then came two fingers. So there I was, laying naked on my stomach, with two fingers inside my butt. Awkward.\n\nShe probed and searched. I felt my rectum being stretched in unusual ways. The whole thing must have lasted a few minutes. Gianna's fingers never relented. They worked and worked. And I stretched and stretched.\n\nShe knew I had enough for one day. I don't know. Maybe it's female intuition. But she just knew. So she ended the session.\n\nWhen she pulled out, my asshole felt a slight gaping feeling, like something was missing. Her fingers had been inside me for so long that my butt had become accustomed to having it there. Weird.\n\nAnyway, I'm meeting her again tomorrow early morning. Then later, it's back to America.\n\nI have no clue what I want. I'm not expecting anything drastic. If I only get an amazing body massage, I'll be fine with that.\n\nIf we continue our anal adventure, I'm okay with that too. We'll see how it goes. I'm pretty excited to go back to the spa tomorrow.\n\n- sal\n\nThe email was sent. This time, Sally didn't expect an immediate reply. Not after she had just written so much. She knew that Aileen would take her time combing through every single word.\n\nMinutes passed and Sally just surfed the web. She verified her travel plans and looked for places to eat in Italy.\n\nThen, she got a reply.\n\nSally clicked open the latest email from Aileen:\n\nI'm so jealous right now! I wish I could be in Italy too.\n\nI'm also very glad that you're experiencing this. \n\nCan I make a suggestion? You only live once. I'm sure there's plenty of cash left of that gift card. Make the most of it.\n\nForget the fingers. Forget the sex toys. Have that masseur plow your bottom. I never asked for that, since I'm married, obviously.\n\nBut when I was there in Italy, I heard him pounding some lady. It was loud. And I mean really loud. It sounded so painful too. But when I saw them leaving the private massage room, that lady was swooning. I mean, she was practically floating in the air after that pounding she took. I also think the woman needed some help walking, but that's another story.\n\nI also recommend asking Gianna to get more involved. I don't want to ruin any surprises, but that woman is a sexual goddess. You should request her further assistance in your anal experience.\n\nSally. You're beautiful, smart, and fun. I envy your position right now. Make the best of your holiday travel. Make the best of your gift card.\n\nLove,\n\nYour friend\n\nAileen\n\nThe smile couldn't be wiped from Sally's face. She wished she could give her friend a big suffocating hug. But that hug needed to wait a while. \n\nThe only thing Sally could do was reply.\n\nShe sent a final email for the night:\n\nAileen,\n\nYou're the best. I'll be back soon, full of stories.\n\nStories of my education. \n\nOur secret.\n\nLove,\n\nYour friend\n\nSally\n\nTheir email correspondence had ended and Sally closed her laptop.\n\nAfter washing herself in the bathroom and finishing her nightly beauty routine, Sally wondered about the next day. She wondered how far she was willing to go with her anal education. \n\nIn many ways, Aileen was right. The opportunity was there for Sally to explore. It was the gift she needed. It was Sally's chance to finally explore parts of her sexuality with people who were experts.\n\nShe turned off the lights and went to sleep. She knew tomorrow would be a good day.\n\nPart 3 of 3: Gianna's Touch\n\nThe two women sat in the office for a cup of morning coffee. Once again, Sally found herself admiring Gianna's style & beauty. The Italian woman was simply impeccable. \n\nThey made small talk and leisurely conversation. It was like they were old friends. Gianna had a way of disarming her guests and making them feel right at home. It was like they knew each other well. Besides, Gianna already had her fingers inside Sally's butt. What's more intimate than that?\n\n\"Have you thought much about yesterday's activities?\" Gianna asked.\n\n\"I've thought about it a lot.\"\n\nGianna smiled, \"Not too sore, I hope.\"\n\n\"I'm fine,\" Sally smiled back. \"I've emailed my friend Aileen about this. She's thrilled that I came down here to explore this.\"\n\n\"How is Aileen doing?.\"\n\n\"She's doing great. But she's a little jealous that she's not here with us.\"\n\n\"It's paradise here,\" Gianna replied.\n\n\"Speaking of paradise, Aileen had a few recommendations.\"\n\nGianna raised an eyebrow. \"Oh?\"\n\n\"It's a little embarrassing. But today is my last day here, so I figured I might as well enjoy, right?\"\n\n\"That's what I like to hear from my guests. This is a spa for relaxation and re-invigoration. So, what can I do for you?\"\n\nSally was normally an outgoing person. She was rarely ever shy or hesitant to ask about anything, after all, she was a writer. But in that moment, Sally felt her body tense.\n\n\"I've been told to render the services of your masseur,\" she replied, trying to be brave. \"You know, his services.\"\n\nGianna gave an understanding nod. \"That can be arranged. Our masseur is a man of great talents. He also thinks you're very beautiful. He will be pleased to hear this.\"\n\n\"And there's another thing.\"\n\n\"Yes?\"\n\nSally nearly blushed. \"I've been told to include you. I don't know. Aileen mentioned something about getting you involved. I'm not sure what that means, but I figured I'd just ask to find out.\"\n\nGianna continued nodding. \"Truthfully, the balance on your gift card doesn't cover all of this. However, you are my guest here. Consider this a bonus.\"\n\n\"I can pay the extra costs for your services. It's really no problem.\"\n\n\"No. I insist. My gift to you. This will be a real pleasure for the both of us.\"\n\nSally noted the expression on Gianna's face. It was an expression of anticipation and excitement.\n\n\"Thank you. This sounds like something to look forward to.\"\n\n\"Your gift card, please,\" Gianna asked.\n\nSally searched for the gift card in her purse and handed it to the spa owner. Gianna got up and swiped the card through the machine. She typed a few things on her computer and printed out a receipt.\n\nThe receipt was handed to Sally, along with the emptied gift card. When Sally looked at the receipt, she saw that the charge was $500. All expenses paid for by the remainder of the gift card, and a special courtesy from Gianna.\n\nThe name of the cost was 'The Full Treatment'. Sally felt a tingle between her legs, wondering what the full treatment was.\n\n***\n\nOnce again, Sally was in the same little massage room. She still had no idea what was going to happen next. The instructions were a bit vague. But maybe, she figured, that was all part of the fun. \n\nShe undressed fully. She was naked & barefoot. She was much more relaxed than the previous day. In fact, she was excited to continue her anal journey with the beautiful Gianna and the handsome masseur.\n\nSally put on a towel to cover her nudity. Then she slightly opened the door.\n\n\"I'm ready,\" she called. \n\nSally waited in the room for a moment. \n\nHer eyes slightly widened when she saw Gianna enter the room wearing nothing but a silk robe. The spa owner's hair was tied in a ponytail. She was even barefoot.\n\nThe masseur also entered the room in a robe, and he closed the door once they entered.\n\nSally knew that things were about to get very very interesting.\n\n\"Looks like we're all ready,\" Gianna smiled. \"Shall we continue to make small talk to relax? Or shall we get to business. Your choice, dear.\"\n\nSally took a deep breath. \"Well, we're all here for a reason.\"\n\n\"Very well. Let's begin.\"\n\nGianna gestured to Sally's robe, signaling her to undress. \n\nSally took the cue and disrobed. She wasn't as nervous as before. In her philosophy, it was just like going to the doctor. No one is really shy being naked in front of the doctor. That's because you normally wouldn't see the doctor in your everyday life. You go there for a purpose, do you business, and leave.\n\nFor a few seconds, Sally stood unabashed at her own nakedness. She kind of enjoyed the fact that Gianna and the Italian masseur both stared at her naked body in an aroused way.\n\n\"On my stomach?\" Sally asked, hands on her hips.\n\n\"That would work best.\"\n\nSally ended the nude show when she laid on the massage table, which had towels neatly wrapped on it. It was comfortable & cozy. Sally immediately felt relaxed laying face down.\n\nThe sink was being used. Both Italians washed their hands as if preparing for a medical operation. And technically, Sally thought, there were many similarities to a surgery. After all, Sally was about to have her bottom opened (but for the purpose of sexual pleasure).\n\nThey dried their hands. Sally heard the noises of bottle caps opening and she soon felt lukewarm oil being applied to her entire backside. Sally's back, thighs, and butt, were all coated with the slick substance.\n\nSally felt an immediate bliss as Gianna and the masseur both started rubbing her back. Two pairs of hands were unbelievable. It was much better than yesterday.\n\nNot only did she feel the strong hands of the masseur, but she also had the pleasure of feeling the soft feminine hands of Gianna. It was quite the contrast, and double the pleasure.\n\nThey rubbed everywhere, from the top of her back, to her lower calves, and everything in between, included her toned butt.\n\nDespite the occasional jolt of pain from hard squeezes, Sally felt bliss, and she was ready to fall asleep at any moment.\n\n\"Now you're finally ready,\" Gianna said with her sultry Italian accent. \"Shall we begin with the full treatment?\"\n\nSally was surprised that it hadn't started yet. If that full backside massage by two experts wasn't the full treatment, then what was? Sally was more than eager to find out.\n\n\"My body is ready for anything,\" she groaned, still reeling from the amazing massage.\n\n\"Very well.\"\n\nSally heard the noise of something dropping on the floor. It must have been cloth or a towel, Sally figured.\n\nThen, Sally felt a unique pleasure on her back. Too soft to be hands. They were two round globes rubbing against her back. Then she felt them harden. It took a brief moment for Sally to realize that Gianna was rubbing her bare tits on Sally's backside. \n\nIt was such an arousing thought. Sally wondered if Gianna was fully naked while doing it. The only thing Sally knew was that Gianna's tits felt nice against her skin. Both nipples were hard and rubbed across Sally's back, then to her thighs, then finally her butt. It was a sexual massage that was achieving its intent, which was to further arouse Sally.\n\nSally heard Gianna's fingers snap.\n\nIn an instant, the strong masseur grabbed both of Sally's ankles, and spread her legs. Sally felt her legs open and her asshole exposed. She knew both of the Italians were looking inside.\n\nGianna used her soft hands to spread Sally's butt wide open. They had an even better view of Sally's naked asshole.\n\nShe expected more oil to be poured inside of her ass. But that didn't happen.\n\nInstead, Sally felt soft feminine lips kissing her butthole. The kisses came all around her exposed anus. It felt nice. Sally never had the pleasure of feeling her anal region being kissed before. She thoroughly enjoyed it.\n\nThen came licks. Oh god. Sally felt the outer ring of her anus being licked by Gianna. It was such a thrill and it made her pussy drip. Sally felt her heart pounding as the anal licking continued.\n\nIf that wasn't enough, Sally felt the warm tongue being pushed inside of her ass. Oh god. It tickled. It stimulated her nerve ending. It made her even more wet. The tongue licked and swirled around the ass.\n\nSally mumbled a few things which didn't make sense. She just wanted to mumble. She wanted to moan too.\n\nThe tongue was removed. Then Gianna said something in Italian.\n\nOil was being poured in Sally's anus. It was lukewarm and it kind of tickled as it flowed into Sally's outer hole and inside her rectum.\n\n\"Let me know if this hurts, dear,\" Gianna said. \"We'll take good care of you, okay?\"\n\n\"Okay.\"\n\nThis time, it was the strong masseur who held Sally's ass cheeks wide open. His grip was firm and tight. There was no way Sally's butt cheeks were going to move.\n\nThe tip of a smooth sex toy pressed against Sally's anus. The girth felt small, but Sally had no idea how long it was. It was all a mystery. All she knew was that it was solid but it felt smooth.\n\nA small push and Gianna was able to get the sex toy inside of Sally's vulnerable ass. It was slowly pushed and it slowly went all the way inside.\n\nHer tiny little asshole was being stretched in an unnatural way. It hurt, but it also felt pleasurable in a strange way. Nerve endings she never knew existed were being stimulated when Gianna slowly worked the sex toy in & out.\n\n\"How do you feel?\" Gianna asked, the same way an experienced doctor would.\n\n\"Stretched.\"\n\n\"Good?\"\n\n\"It feels nice.\"\n\n\"Something bigger?\" Gianna asked.\n\n\"Do I have to?\"\n\n\"Only if you want the masseur to take your anal virginity,\" Gianna asked in teasing way.\n\nThe comment grabbed Sally's attention more than the sex toy in her ass. It was the moment of truth and she had to quickly decide.",
        "\"Fine.\"\n\n\"Are you sure?\" Gianna asked with a purposely thick Italian accent. \n\n\"You only live once, right?\"\n\n\"That's right my dear.\"\n\nThe sex toy was slowly pulled from Sally's rectum. It gave her butthole a slightly gaping feeling as it returned to normal size.\n\nBefore her anus had time to readjust, a slightly larger sex toy was pressed against her anus. More lube was poured. Gianna gave a slight push and the sex toy entered Sally's tender butt.\n\n\"Oh gosh,\" Sally gasped, her body reflexively tensing.\n\n\"Be still, my dear.\"\n\nSally tried her best to hold still. The strong masseur continued his tight hold on Sally's butt, to ensure that her rectum would remain open.\n\nThe larger sex toy was slowly being pushed. Sally felt the tight ring of her anus being stretched. She felt her rectum being stretched as it went even deeper. It went deeper than anything that's ever gone inside before.\n\nThen slowly, it was pulled out. The movements continued slowly. In & out. Gianna knew exactly how to treat a tight little asshole like the one Sally had. The spa owner was a true professional at what she did.\n\n\"Things are progressing nicely,\" Gianna said. \"Your body is learning to adapt. I can tell you're very tight and sensitive.\"\n\n\"I've never had anything so deep before.\"\n\nGianna gently pushed the sex toy all the way inside, causing Sally's muscles to clench.\n\n\"Don't fight it. Don't clench. Just relax. Let go. Trust me, Sally. I know what I'm doing.\"\n\nThe sex toy continued its in & out motion, while Sally fought the urge to clench her rectum.\n\nFinally, the toy was pulled away after a few minutes. It was followed by another deep gaping feeling in Sally's butt.\n\n\"Are you ready to lose your anal virginity?\" Gianna asked with a thick Italian accent, knowing that her accent turned Sally on.\n\n\"Only if you think I'm ready.\"\n\nGianna patted Sally's butt. \"You're ready, dear. I've made you ready. Mentally and physically, you're ready to accept a cock. Relax and enjoy. He knows how to handle women.\"\n\nThere was a noise of a robe hitting the floor. As Sally laid face down on the massage table, she knew that the male masseur was also naked. \n\nHer heart raced. She knew she was about to be anally fucked by the strong handsome man. Oh god. She wondered if she was truly ready for it. She wasn't sure. But she was willing to try it out. After all, she was on vacation and she wanted to try new things.\n\nThe man climbed onto the massage table, on his knees, right behind Sally's spread ass. He nearly mounted her from behind, with his cock pointed towards Sally's vulnerable and lubricated asshole.\n\n\"I'm going to get him hard for you,\" Gianna said. \"I will also lubricate him at the same time. He will be ready for you.\"\n\nAs Sally laid face down on the table, she suddenly heard sucking & slurping noises fill the room. She knew right away that Gianna was sucking the man's cock. What better way to get a man hard? \n\nThe slurping sounds lasted for nearly a minute, followed by a loud 'plop' sound as Gianna pulled her mouth away.\n\n\"He's ready,\" Gianna said. \"My saliva is warm. The temperature should feel nice. And he is throbbing hard for you. Are you ready?\"\n\nSally questioned herself once again. She was nervous about being anally ravished. But she was also very wet and aroused.\n\n\"I'm ready.\"\n\n\"Hold still. Tell me if it hurts.\"\n\nGianna used her soft hands to spread Sally's butt cheeks apart. Then Gianna used her fingers to guide the hard cock towards Sally's anus, as the masseur lowered his body.\n\nThe hard cock pressed tightly against Sally's anus, at the guidance of Gianna's fingers. \n\nGianna said something in Italian, and the man gave a slow press against the anus. The man entered and the tip of his cock went inside Sally's tight little asshole.\n\nThe spa owner was right. Her saliva on the cock was warm and it felt nice. The sensation added to the anal experience. The stretching didn't hurt that much since her ass had already been prepared from the lube and sex toys.\n\nHe entered further. Inch by inch, the shaft of the thick cock went deeper in Sally's rectum. She squirmed and moaned. But she fought to remain still. It hurt. It ached. But it also felt amazing in a strange way.\n\nShe felt herself being stretched to capacity as Gianna continued to guide the cock inside of her butt. She knew there were a few more inches to go. And she was ready for it, she hoped.\n\n\"Relax dear,\" Gianna said softly. \"Almost there. Almost there. You're doing wonderful, my dear.\"\n\nSally felt her ass being completely filled to capacity as the cock entered all the way. The masseur's crotch pressed fully against Sally's butt. \n\nAt that point, Gianna had already let go. Her fingers were no longer needed to guide the cock inside.\n\nGianna moved from the table and crouched down in front of Sally. It was the first that time Sally had seen Gianna naked. \n\nThe spa owner had a slender body. She was crouched down with her legs wide apart, showing the inside of her spread vagina. She had a dark patch of pubic hairs. Her chest was flat with very large dark nipples. Her chest was still covered with oil from the breast rubbing she did earlier.\n\nSimply put, the Italian woman was a striking beauty. Just as Sally had expected she would be without clothes.\n\n\"You're doing amazing,\" Gianna said. \"Look at me, relax dear.\"\n\nThe spa owner held both of Sally's hands as a loving gesture. They looked each other in the eyes while Sally's asshole was stuffed by the raging hard cock.\n\nThere was a look in Gianna's eyes which said, 'You can do this. You're a strong woman. You can do anything. It's going to be worth it.\"\n\nIt was a look which gave Sally confidence as the cock slowly began to slide out of her ass, and then thrusted back in.\n\nSally squirmed and her body struggled. She tried to hold still. She did her very best. Her face grimaced as her ass was filled by the raging hard cock. Her facial expressions tightened, all while Gianna tried to sooth her.\n\n\"Relax dear,\" Gianna said in a loving manner, rubbing Sally's hands in the process. \"I know it's difficult. But you will have the beautiful gift of orgasm when this is done. I promise.\"\n\nThe two women held each other's hands. Sally squeezed tightly as the masseur went harder. Gianna squeezed her hands in return. They continued looking each other in the eyes as Sally made grimacing faces from the pain.\n\nAt that point, after Sally's asshole was ready, the strong masseur really started to go at it.\n\nThe thrusts were harder and far more intense. Sally's asshole was taking the pounding that she had fantasized about since college, but was never able to experience. Her tiny little asshole was finally getting the overdue fucking it long desired.\n\nIt was the final piece of Sally's sexuality that she had yet to experience. Her anal virginity was being taken away in spectacular fashion. All while Sally screamed and moaned while her ass was getting properly fucked.\n\nThe two women continued holding hands and making eye contact. Gianna continued her words of encouragement as Sally screamed in pain & pleasure.\n\n\"You're almost there,\" Gianna said, with lust in her eyes and voice. \"You're almost there. So close. Don't give up.\"\n\nThe ass pounding continued and Sally's rectal nerve endings were being stimulated in a powerful way. Her rectum was stretched to capacity by the hard pounding cock. It was beginning to take its toll as the pain grew.\n\nGianna spoke in Italian to the male masseur. It was a brief sentence which Sally couldn't understand. But the masseur sure did.\n\nHe continued fucking the poor little asshole with expert precision, while reaching down with one hand, underneath Sally's thigh, to rub her sensitive clit.\n\nSally cried.\n\nThe masseur fucked her asshole and rubbed her clitoris in a circular motion.\n\nSally cried some more.\n\nHer pussy was dripping wet and fluids were leaking. \n\n\"You're almost there darling,\" Gianna said, holding Sally's hands tighter. \"I can see it in your eyes. Relax, my dear. Let it all out.\"\n\nGianna spoke Italian again to the masseur. He got the message and pounded Sally's ass with full force. He rubbed Sally's clitoris even faster, making the woman cry. It was all too much for a woman to handle.\n\n\"Oh god!!!\" Sally cried, clenching her eyes shut.\n\nFluids squirted from her pussy and made a mess. Thankfully the towels were spread neatly across the massage table. More fluids gushed from Sally's pussy as the masseur's sexual ravishment continued at a relentless pace.\n\nHe continued fucking her ass. He continued rubbing her clit.\n\nSally continued clenching her eyes, groaning, while the fluids continued to seep from her pussy. Her back muscles were contracting. Her legs completely stiff. Her toes curled. Her jaw wide open. And her eyes clenched shut.\n\nThe two women held each other's hands tightly. Sally squeezed with a grip she never knew she had.\n\nThen, it was over.\n\nSally collapsed and was nearly lifeless while the man gave a few more pumps in her asshole. \n\nThe masseur had cum inside of Sally's rectum. He was breathing heavily. Then he pulled out. His penis was in a semi-flaccid state, covered in his own cum, Gianna's saliva, and plenty of lubrication.\n\nHe laid on the massage table, right next to Sally, who still remained nearly lifeless.\n\n\"You did it, darling,\" Gianna said softly in Sally's ear. \"You came.\"\n\nGianna ran her fingers through Sally's hair. She marveled at the peaceful sight of Sally in a state of pure bliss.\n\nThen the spa owner bent down to give Sally a kiss on the forehead, then the cheek. The next kiss was on Sally's lips, which was enough to wake her up. They continued kissing on the lips.\n\nSally had been with women before. She was no stranger to a lesbian kiss. But there was something extra special about kissing Gianna. Maybe it was the fact that Gianna had soft sensual lips. Or maybe it was the fact that Sally had just received the orgasm of the century.\n\nWhatever the case, it felt amazing.\n\nThe kiss ended, and Gianna smiled. Then Gianna stood to admire the handiwork of the masseur. \n\nSally's body was a mess, covered in oil and sweat. Her legs still spread. Cum and lubrication leaking from her asshole. Squirt was everywhere between Sally's legs.\n\nThe spa owner was always pleased when guests were satisfied. And by the looks of things, Sally was more than satisfied. \n\nGianna bent over the table and inspected Sally's asshole. It looks like a gaping messy hole. Well fucked and recently stretched. \n\nThe spa owner spread the ass cheeks once again, bent down, and gave the asshole a nice big lick, followed by a long suck. \n\nSally groaned.\n\n***\n\nIt was an hour later by the time Sally left the spa.\n\nShe had just finished a warm bath. Her hair was nice and neat. Her make-up was freshly done. And her clothes had been pressed by the staff. She looked like a new person when she went outside with her sunglasses on.\n\nHer last memory of the spa was giving Gianna a kiss on the lips. Then another. Then another. Until finally they embraced in a long tongue kiss.\n\nWhile she walked down the street, Sally took out the phone from her purse. She needed to text Aileen.\n\nShe sent a simple message:\n\nsuccess!! i have so much to tell you. thnx for everything. best gift ever. next year, i'll need another gift card.\n\nlove,\n\nsal\n\nThe message was sent.\n\nSally smiled to herself as she walked down the street with a slight limp in her step. It would probably be a few days until the soreness was gone.\n\nThe End\n\nYour votes & comments are appreciated. "
    ],
    "authorname": "HeyAll",
    "tags": [
        "anal",
        "anal sex",
        "first time",
        "spa",
        "sex toys",
        "masseur",
        "lesbian",
        "ass to mouth",
        "ass licking",
        "anal virgin"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/sally-s-wish-anal-education"
}
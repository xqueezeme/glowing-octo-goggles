{
    "title": "Joel and Carrie Ch. 08",
    "pages": [
        "\"Hey,\" Carrie said, her voice coming from the computer speaker. I could see she was tired despite the poor quality of the picture. I felt my chest tightened. \n\n\"Hello beautiful!\" I said with a forced smile, trying to sound upbeat. God I missed her! \"How have you been?\"\n\n\"Lonely,\" she replied.\n\n\"Me too,\" I sighed, no longer smiling or making the attempt to seem happier than I was. Carrie knew me too well to buy it anyway.\n\n\"How's school?\" she asked.\n\n\"Okay,\" I answered. \"You?\"\n\n\"Okay,\" she replied. We looked at each other in silence for a few seconds. I took a deep breath and let it out.\n\n\"Well, this sucks,\" I said.\n\n\"You think?\" she asked rhetorically. She wasn't quite smiling.\n\n\"This is even harder than talking on the phone,\" I said, shaking my head.\n\n\"It was your bright idea to try video conferencing.\"\n\n\"I just wanted to see you,\" I said softly, taking the sight of her in.\n\n\"We should never have agreed to this separation,\" she sighed.\n\n\"What choice did we have?\" I asked. \"It's not like our parents gave us options. Besides, your school is better for your major anyway. It was your first choice.\"\n\n\"That was before I met you,\" she replied. \"Right now, I'd settle for community college if it would let us be together.\"\n\n\"Like I would let you do that,\" I smiled sadly. \n\n\"We have to do something!\" Carrie cried. \"It's only been a month and I'm going crazy! It was bad enough at home those last couple of months sneaking around to see each other, but this is impossible!\"\n\n\"Please!\" I snorted. \"My father is going to flip when he sees my grades if I don't find a way of focusing soon.\"\n\n\"Serves him right for forcing us to be so far away from each other!\" she snapped angrily.\n\n\"His reaction did surprise me,\" I said calmly. \"Although, your mother's was just about what I expected.\"\n\n\"She's talking about moving,\" Carrie said. \"She says she's still too embarrassed to face any of her friends.\"\n\n\"What about your father?\" I asked.\n\n\"He barely talks to me,\" she replied sadly. \"And he won't look me in the eyes when he does.\" We fell silent.\n\n\"Remember how bad we thought Valentine's Day was?\" I asked with a shake of my head.\n\n\"Me and my bright ideas! I should never have planned such a big graduation party,\" Carrie shook her head.\n\n\"That's not really fair,\" I said. \"The plan was fine. It was the party crashers that caused the problems.\"\n\n\"That was scary,\" Carrie sighed. \n\n\"I can't believe Jimmy was stupid enough to crash with two guys he met at a bar!\"\n\n\"I can,\" she said. \"Thinking things through was never Jimmy's strong suit and he was drunk on top of that. I am so sick of him!\"\n\n\"I wouldn't worry about Jimmy anymore,\" I said, trying to calm her down. \"Between the cops and his parents, he won't be bothering us again.\"\n\n\"You know, I still second guess myself on calling the police,\" she said.\n\n\"It was exactly the right thing to do,\" I insisted. \"Those guys were bad news. It would have been real bad if the police didn't arrive when they did.\"\n\n\"You call what happened not bad?\" she asked in disbelief. \"You had to pull one of the guys off of Maria!\"\n\n\"That was unpleasant,\" I admitted, but then couldn't stop myself from grinning and adding, \"But Deana kicked him so hard between his legs afterward that I'll be amazed if he's ever able to do much in the sex department again.\"\n\n\"Thank God you got to him before anything really bad happened!\" Carrie said, not sharing my amusement. I didn't blame her. \n\n\"How is Maria doing?\" I asked.\n\n\"Okay,\" Carrie answered. \"Truthfully, I think she was more traumatized by her parents finding out she was gay. Not that it stopped her from moving in with Deana.\"\n\n\"I bet they're happy,\" I said wistfully.\n\n\"We could always tell our parents off and move in together,\" Carrie joked darkly.\n\n\"If you really wanted that, I'd agree to it in a second,\" I said. \"But the way your parents reacted, they'd disown you and that would kill you.\" We fell silent again.\n\n\"Well, I'm more depressed now than I was before,\" I said, forcing a laugh.\n\n\"Just think,\" Carrie sighed. \"Only a month and a half to Thanksgiving.\"\n\n\"Yeah,\" I said glumly. A month and a half sounded like a lifetime. \"I spoke to Robbie and Tara. They're doing well. Have you heard from anyone else?\"\n\n\"Sure,\" Carrie said. \"Jill and Tara keep in touch constantly via text and email. They're both having a blast at college. We speak on the phone about once a week.\"\n\n\"Did Tara say how Brian was doing?\" I asked.\n\n\"Good,\" she replied. \"She didn't out and out say it, but I think Brian's roommate spends most nights at his girlfriends, leaving them his room.\"\n\n\"I'm so glad that we convinced them and the others to take off just as the cops arrived. Could you imagine what Tara's father would have done if he knew they were involved?\"\n\n\"I'm surprised the police let them go,\" Carrie said. \n\n\"They were being smart,\" I grinned half-heartedly. \"Most of your friends have pretty affluent parents. The rumors flying afterward were bad enough. Could you imagine how it would have been if the cops decided to take everyone in?\"\n\n\"Still,\" Carrie said with a shake of her head.\n\n\"All they really needed was Deana, Maria, me and the crashers,\" I insisted. \"I wish you'd listened to me and left with the others.\"\n\n\"I couldn't leave you like that,\" she said stubbornly. It wasn't the first time we'd had this discussion. \"Besides, it was my party. I doubt they would have let me go anyway.\"\n\n\"Doing anything fun this weekend?\" I asked, changing the subject.\n\n\"Not really,\" she answered. \"My roommate is trying to get me to rush a sorority with her, but I'm not really all that interested.\"\n\n\"Might be fun to go through the process even if you don't want to join,\" I offered. \"I'd do it if I were you. It will at least get your out of your dorm room.\"\n\n\"We'll see,\" she said. \"What about you? You doing anything interesting this weekend?\"\n\n\"I'll probably spend most of it daydreaming about a certain blond haired girl,\" I offered.\n\n\"It better be me you're talking about buster!\" she smiled. It wasn't full, but it was better than I'd hoped for.\n\n\"Always,\" I promised. \"You're my blond goddess and you know it.\"\n\n\"I love you,\" she said softly.\n\n\"And I love you too,\" I said. \"As long as we have that, the rest will work itself out.\"\n\n\"I know, but that doesn't make now any easier,\" she said. Her eyes were glistening. I could tell she was close to tears despite her trying to hide it. She forced a smile and added, \"I've got to go. I can't miss my next class.\"\n\n\"We'll talk soon,\" I said, but she'd already disconnected. I knew it was because she was about to cry and didn't want me to see.\n\nI sat in my room staring at the screen for a long time. My classes were already over for the day. Tomorrow was Friday. I had two classes. One was a joke. It was one of those huge lectures that half the people skipped. The other was actually my favorite class. The professor was interesting and it was one of my few classes actually in my major.\n\n\"You okay?\"\n\nI was startled to look up to see my roommate Tommy. He was a tall guy who looked like he could play middle linebacker for a football team, but he wasn't really a jock. His muscles came from being a farm boy in one of Midwest states. The truth was that despite his size he seemed pretty focused on his classes. He wanted to be a lawyer.\n\n\"Sorry, I didn't hear you come in,\" I said.\n\n\"Yeah, I know,\" he grinned. \"That's why I was worried.\"\n\n\"Just distracted,\" I said.\n\n\"You video conferenced your girl, didn't you?\" he asked.\n\n\"Yep,\" I answered. \"It was good to see her.\" He looked at me carefully before shaking his head.\n\n\"You want a moment?\" he teased. \n\n\"I want to see my girl!\" I snapped, suddenly angry. I shook my head and quickly added, \"Sorry.\"\n\n\"Don't be,\" he shrugged. \"I understand. My girlfriend is still back home.\"\n\n\"How do you deal with it?\" I asked.\n\n\"It's different with us,\" he answered. \"We knew this day was coming for a long time. I think half your anger is from being forced apart. I'm guessing it makes the separation harder.\"\n\n\"You're probably right,\" I sighed, and then decided to change the subject. \"Let's go out.\"\n\n\"I've got a test...\" he began, but I cut him off.\n\n\"It's only a quiz and you're already ready for it,\" I interjected. \"Besides, we'll only go for a drink or two. You'll be home early enough to study some more if you really want.\"\n\n\"You want to go to O'mally's, don't you?\" he grinned. \"And you need me to give you a ride.\"\n\n\"Well yes,\" I admitted. \"But I'd enjoy the company as well.\"\n\n\"What is it about that place you like so much?\" he asked.\n\n\"Well for one, it's not a meat market,\" I answered.\n\n\"True,\" he laughed. \"I think when we walk in the average age drops by ten years.\"\n\n\"Very funny,\" I said, but didn't deny it.\n\nThree hours later we were on our way back to the room. We had a few more than a couple of beers, or at least I did. I wasn't really drunk, but mostly because Tommy forced me to eat toward the end.\n\n\"I'm sorry for talking your ear off,\" I said, more than a little embarrassed. I pretty much poured my heart out to this guy I'd only known for a month.\n\n\"No problem,\" he smiled. \"You needed to vent.\"\n\n\"What I need is to see Carrie,\" I sighed.\n\n\"So then, why don't you?\" he asked. \"If you really feel that strongly, then go for it.\"\n\n\"Go for it?\" I asked in confusion.\n\n\"Yeah, they have these thing called planes,\" he teased. \"They can get you to see your girl in like six hours.\"\n\n\"You don't think I've haven't thought about doing something like that?\" I sighed.\n\n\"What's holding you back?\"\n\n\"For starters they're expensive,\" I frowned.\n\n\"I have some money I can lend you if you need it,\" he offered, surprising me. \"It's not a lot, but I'm willing to chip in for a good cause.\"\n\n\"You really are a farm boy,\" I said, shaking my head. \"You barely know me! How could you offer to lend me money?\"\n\n\"What, you're not good for it?\" he asked with a smile.\n\n\"I am,\" I said slowly.\n\n\"So, think about it,\" he said.\n\nThere were a thousand reasons why it was ridiculous to blow so much money to travel across the country for a few days at best, but at the moment I couldn't focus on any of them. I desperately wanted to see Carrie.\n\nWe fell silent for the rest of the trip. It was late by the time we got to our room. I took a quick shower and went to bed. Tommy was already asleep by the time I put my head on my pillow. He liked to shower in the morning. I did too, but for some reason showers help me think.\n\nI lay there for almost a half an hour before getting up. I put my computer on quietly and spent fifteen minutes typing. I grinned to myself when I was done and got up from my chair. I turned the room light on and shook Tommy awake.\n\n\"What?\" he asked groggily.\n\n\"I'm going to visit Carrie,\" I said, shifting my attention to my dresser. I started pulling out clothes for a few days and stuffing them in an oversized gym bag.\n\n\"Now?\" he groaned.\n\n\"Now,\" I answered with a grin. \"Hey, it was your idea.\"\n\n\"And I supposed you want a ride to the airport?\" he asked, sitting up and rubbing the sleep from his eyes.\n\n\"I just checked the flights going out,\" I answered. \"If we hurry I can catch a redeye.\"\n\n\"I'm going to be exhausted tomorrow,\" he grumbled.\n\n\"Just think,\" I teased. \"You'll have the room to yourself all weekend. You can study to your hearts content.\"\n\n\"Very funny,\" he said, standing and throwing some clothes on.\n\n\"If this works out, I'll name my first kid after you,\" I laughed. \"Now let's go!\"\n\n\"Give me a second!\" he cried. \"I need to open my eyes!\"\n\nWe were in the car not long after that. We stopped at a donut shop and got him some coffee. Thankfully the airport was only thirty minutes away at this time of night. \n\n\"Next stop, an all night ATM,\" Tommy said. \"How much do you need?\" \n\n\"Don't bother,\" I said. \"I have enough based on the costs I saw online, but barely. I saved all summer for spending money for college this year.\"\n\n\"You sure?\" he asked.\n\n\"Yeah, thanks anyway,\" I smiled. \"Of course, I may need to borrow a bit when I return, at least until I get a job.\"\n\n\"A job?\" he asked.\n\n\"Yeah,\" I shrugged. \"This probably won't be my only visit if everything works out. I'm going to need money.\"\n\n\"I thought your father didn't want you to work while at school?\" he asked. \"Something about focusing on your studies.\"\n\n\"Then he shouldn't have insisted on separating Carrie and me!\" I snapped in irritation.\n\n\"One of these days you're going to have to tell me what happened to make him and Carrie's parents want to split you two apart so badly,\" he said.\n\n\"You don't want to know,\" I said cryptically. Tommy frowned at me, but then shrugged and let it go. \n\nI could just picture his reaction to the news that the cops arrested us for instigating an orgy. Damn Jimmy! If he'd just shut up this could have all blown over, but he kept blabbing about seeing everyone naked. Thank God Carrie's father got the charges dropped! Of course, that didn't stop the news from spreading all through town.\n\n\"You know,\" I said to Tommy as we left and made our way to his car. \"Carrie and I agreed we wouldn't visit each other. It just didn't make sense to spend all that money for a couple of days and chancing pissing off our parents if they found out.\"\n\n\"And yet here you are going to the airport,\" he smiled as he unlocked the doors to his car. We got in quickly.\n\n\"I can't help it,\" I sighed. \"I want to see her. I need to see her.\"\n\n\"Think she'll be mad that you decided to visit after you agreed not to?\"\n\n\"No,\" I answered, but then grinned and added, \"But I'm blaming you just in case.\" He looked at me and laughed.\n\nThe trip to the airport was uneventful. I thanked Tommy when we arrived as I jumped out of the car. He shook his head, smiled and waved before driving off. That's when the problems started. \n\nThey couldn't get me on the flight I wanted because it was cancelled and the one they could get me on was a lot more money than the price I saw online. In fact, it was more money than I had. I cursed myself for not taking Tommy up on his offer.\n\nI was finally able to get a more reasonably flight at one of the other airlines. The only problem was that it wasn't direct and didn't leave for a while. Of course, when we finally did get off the ground, I couldn't sleep. The connection wound up being a couple of hours late getting off the tarmac as well.\n\nIn the end, I finally landed at 3:00pm Friday, totally exhausted, but relieved to finally be done with airports. Of course, there was the trip back, but I refused to think about it now. I grinned to myself. I was going to see Carrie soon!\n\nI took a bus from the airport to her school. There went a few more hours. It took me a while to find her dorm once I arrived and of course she wasn't in her room. It was diner time so I figured she was out eating.\n\nI found the lounge at the end of her hall and settled in front of a television. I don't remember what was on because I fell asleep before I really focused on it. It had been a long night and day.\n\n\"Hey bud!\"\n\nI woke up with a start. There was a group of guys standing not quite over me. I closed my eyes and groaned. The sleep seemed to make me feel more tired then before. My eyelids felt heavy. It was an effort to even open them.\n\n\"Wake up!\" the same voice said, sounding a bit annoyed. It was quickly followed by someone shaking my shoulders.\n\n\"Hello,\" I mumbled as I opened my eyes and rubbed the sleep from them.\n\n\"You're not from this dorm,\" a brown haired guy said with the same voice I'd heard already. \"In fact, no one recognizes you as a student at all. What are you doing sleeping here?\"\n\n\"Sorry,\" I said, standing slowly and stretching. There were actually quite a few people in the room looking at me, some of them nervously. I couldn't help it, I laughed. \n\n\"What's so funny?\" the guy asked.\n\n\"Do I really look that bad?\" I asked in reply. \"You all look like your ready to call the police on some vagrant who wondered on campus.\"\n\n\"Maybe not that bad,\" the guy replied, smiling slowly.\n\n\"Actually, with a little sleep and a shower,\" a girl added. \"You'd probably be okay.\"\n\n\"Cute even,\" another girl put in. It was followed by some laughter from some of the other coeds present.\n\n\"Thanks,\" I said, blushing slightly. \n\nThe first girl was very attractive. In fact, she was beautiful. She had the look of a girl who knew what she did to guys, but didn't let it get to her head all that much. The second girl wasn't nearly as beautiful, but she was attractive in her way and had a sexy smile. \n\n\"Don't mind Candice,\" the guy said, referring to the hot one. \"She's the dorm slut.\"\n\n\"You wish!\" she laughed.\n\n\"Please, some of the guys back home still swear she's going to be a nun one day,\" the second girl said.\n\n\"Summer, that's not true!\" Candice cried in embarrassment.\n\n\"Ah, so now the truth comes out,\" the guy laughed.\n\n\"This is the last time I volunteer to baby sit one of Andie's friends from back home,\" Candice said, giving the other girl a nasty look.\n\n\"And the fact that I'm your little sister had nothing to do with it?\" Summer asked with a laugh.\n\nI blinked and looked between the two. They looked nothing alike. Candice was tall, blond and light skinned. Her features were fine and delicate, pretty in a European way. Summer was shorter, though not really short. Her skin was reddish and her hair black. She had strong features that went well with her wide shoulders.\n\n\"Step sisters,\" Candice said, seeing my confusion. \"Although our parents got married so long ago that little Summer was still in diapers.\"\n\n\"Ha ha,\" Summer grumbled. \"Very funny.\"\n\n\"I'm Kip,\" the guy said, ignoring the girls bickering and sticking out his hand. I shook it.\n\n\"I'm Joel,\" I offered. \"I'm on a bit of a road trip to visit my girl.\"\n\n\"Joel?\" Candice frowned. \"Are you Carrie's Joel?\" I smiled. I liked the sound of it.\n\n\"Yes,\" I replied. \"I thought I'd surprise her with a visit.\"\n\n\"That's some road trip!\" Kip said, sounding amazed. \"Don't you go to school on the other coast.\"\n\n\"I wanted to see her,\" I shrugged.\n\n\"I can understand that,\" he grinned.\n\n\"Carrie?\" Summer asked.\n\n\"You remember her,\" her sister said. \"The incredible looking blond...\"\n\n\"She's dating you?\" the red skinned girl asked in surprise.\n\n\"Summer!\" Candice cried.\n\n\"Shocking, isn't it?\" I laughed.\n\n\"I'd say amazing,\" Summer grinned. \n\n\"Well, even you said you thought I'd be cute if I cleaned up,\" I said.\n\n\"Maybe,\" she replied.\n\n\"Summer, stop flirting with Carrie's boyfriend,\" Candice said with a shake of her head. \"First, it's pointless. No one dating Carrie is going to dump her for you.\"\n\n\"Ouch!\" I laughed. \"I'm starting to see the family resemblance.\"\n\n\"What? Am I wrong?\" Candice asked. I shook my head and she returned her attention to her sister. \"And second, you'll be gone on a couple of days. This is my school and Carrie is a friend.\"\n\n\"Oh relax!\" Summer cried. \"It was just some harmless flirting.\"\n\n\"You forget little sister,\" Candice said. \"I know you. Your innocent flirting sometimes turns into a bit more than that.\"\n\n\"Really?\" Kip asked with a grin.\n\n\"Don't even think about it,\" Candice said to him. She might have been defending her sister, but it seemed like there was something more to it. \n\n\"Um, I hate to break this up because it's certainly entertaining, but where is Carrie?\" I asked.\n\n\"She's going to be so happy to see you,\" Candice said, ignoring her sister for the moment. \"You have no idea how much she misses you.\"\n\n\"If it's half as much as I miss her, then I think I do,\" I said.\n\n\"How sweet,\" Summer smile.\n\n\"I think I'm going to be sick,\" Kip grinned. I shook my head, but smiled. The rest of the crowd started to dissipate.\n\n\"Carrie?\" I asked.\n\n\"It seems that someone convinced her to go to a sorority rush party,\" Candice grinned.",
        "\"I did, didn't I?\" I sighed. \"Not a place for guys, right?\"\n\n\"Not tonight,\" Candice agreed. \"But Summer and I will handle getting her back here as quickly as possible.\"\n\n\"We will?\" the red skinned girl asked rhetorically.\n\n\"Thanks,\" I smiled warmly, really meaning it.\n\n\"No problem,\" Candice replied and then turned to Kip. \"Why don't you show him where the shower is and let him use your room to get changed?\"\n\n\"That bad, huhn?\" I laughed. She was kind enough not to answer. Her sister on the other hand had no problem saying what she thought.\n\n\"I voted to call campus police when we found you passed out on the couch,\" she grinned.\n\n\"This way,\" Kip said, interrupting Summer before she could really get going. I shrugged and smiled at her before grabbing my stuff and following Kip out of the lounge. Candice and Summer watched us go. I could see Candice's eyes lingering on Kip.\n\n\"Interesting sisters,\" I said as we went.\n\n\"Yeah,\" he nodded. \"That Summer is a real character.\"\n\n\"American Indian?\" I asked.\n\n\"Yeah,\" he answered. \"She actually very proud of it. Be careful bringing it up unless you want to hear a whole history of her family.\" Kip fell silent. His mind was obviously elsewhere. I had an idea where.\n\n\"You and Candice have a history?\" I asked.\n\n\"No,\" he replied quickly.\n\n\"Well, there is definitely something there,\" I smiled. \"You should ask her out.\"\n\n\"You figure that all out in the two minutes you've known us?\" he snorted.\n\n\"It comes from hanging out with Carrie,\" I laughed. \"She loves playing the matchmaker. In fact, I'm surprised she hasn't tried to get you two together already.\"\n\n\"Oh, she has,\" Kip replied. \"But Candice isn't my type.\"\n\n\"What? You don't like blond and beautiful?\" I teased.\n\n\"Very funny,\" he sighed.\n\n\"So then what's the problem?\" \n\n\"Nothing,\" he replied.\n\n\"Your decision,\" I shrugged. \"But you'd better do something soon if you're going to. A girl like her can have her pick of guys.\"\n\n\"Exactly,\" he sighed. \"Guys flock to her in droves.\"\n\n\"So?\" I said. \"That's their issue, not hers, and it shouldn't be yours. You like her and it certainly seems that she likes you.\"\n\n\"We're just friends,\" he said.\n\n\"Maybe for now,\" I said. \"But the chemistry between you two is obvious.\"\n\nHe fell silent and I let it be for the time being. He showed me where I could clean up. I took a long hot shower. It felt amazing! I picked the clothes least wrinkled from the trip and put them on. I almost started feeling human again. I was tired, but functional.\n\n\"How long have you been dating Carrie?\" Kip asked as we waited for Candice to return with Carrie.\n\n\"Almost a years,\" I answered.\n\n\"How do you do it?\" he asked. \"Carrie gets just as much attention as Candice from the guys. Doesn't it bother you?\"\n\n\"Why should it?\" I frowned. \"She's my girl. I love her. She loves me. What do their looks hurt?\"\n\n\"I don't think I could handle it,\" he sighed.\n\n\"I bet you're a bit of a romantic at heart,\" I grinned. He started to get angry so I quickly added, \"There's nothing wrong with that! I'm one too. It's just that romantics tend to have these daydreams on what love is going to be like and how it's going to happen to them.\"\n\n\"You're point?\" he frowned.\n\n\"Just this,\" I answered. \"Love hits people in all kinds of ways. Don't limit yourself to what you've imagined. If I did that last year, I would never have Carrie now.\"\n\n\"You think I'm in love with Candice?\"\n\n\"I have no idea,\" I shrugged. \"Only you can answer that question, but I do know you're both attracted to each other. Why not ask her out and see where it goes?\"\n\nHis cell phone rang before he could answer. He picked it up. The conversation was short. He frowned when it was over as he closed his cell.\n\n\"We're going out,\" he sighed.\n\n\"What's up?\" I asked.\n\n\"That was Candice,\" he replied. \"She doesn't want to tell Carrie you're here, so she wants us to meet her at a bar.\"\n\n\"Seems like you're not the only romantic around,\" I grinned. He rolled his eyes and grabbed a jacket.\n\n\"Let's go,\" he said.\n\nThe walk to the bar took about fifteen minutes. It was off campus. We walked in and found the place packed with coeds.\n\n\"Wow,\" Kip said. \"It looks like half the sorority is here.\"\n\n\"It is,\" I nearby girl giggled drunkenly. \"The sisters invited a few freshmen to join them for drinks here. I can't believe they picked me! I so want to be a sister here!\"\n\n\"Good luck,\" Kip said to her and turned away, rolling his eyes at me. I stifled a laugh and we pushed deeper into the crowd, toward the bar. \n\nThe crowd thinned out slightly once we got past the initial wall of people and I spotted Carrie easily enough. She was with Candice, Summer and a cute brunette. They were surrounded by a group of guys who were obviously hitting on the four. Summer and the brunette were chatting with them. Candice was only half paying attention. She had obviously been watching the door. She stifled a grin when she spotted me.\n\nCarrie was sitting quietly. To someone who didn't know her, they'd probably thought she was being aloof, but I knew better. My heart went out to her. I walked up to her slowly. She was facing away from me. Some guy was trying hard to get her to dance despite her obvious disinterest.\n\n\"Do you want to dance?\" I overheard the guy asking her. \n\n\"No thanks,\" Carrie replied.\n\n\"Come on, it's just a dance,\" the guy said. \"Don't you like to dance?\"\n\n\"She loves to dance,\" I answered for her. Carrie's head didn't quite snap around, but it did turn toward me quickly enough. Her expression was shocked for a moment.\n\n\"How...when...\" she began, but couldn't get a coherent sentence out. \n\n\"What? No kiss hello?\" I grinned, holding my arms wide. \n\nCarrie was off of the barstool and in them in an instant. She kissed me briefly and then hugged tight for a long time. I rested my cheek on her head. It felt so good to feel her in my arms again!\n\n\"I've missed you,\" I whispered into her ear, surprised to feel my eyes mist up.\n\n\"Me too!\" she said, clearly crying.\n\n\"Hey!\" I said, pulling back and looking into her eyes. \"No crying!\"\n\n\"I can't help it,\" she laughed through her tears. \"I'm just so happy to see you!\"\n\n\"I think I'm going to be sick again,\" Kip said with a grin. That sort of brought me back down to reality. I stepped away from Carrie, but continued to hold her hand, which was probably smart because she clearly wasn't going to let go even in I wanted to. In fact, after a moment she moved closer and rested her head on my shoulder.\n\n\"You two need a room?\" Summer teased. I noticed that the guys who were hovering disappeared.\n\n\"Not yet,\" I laughed.\n\n\"But soon,\" Carrie put in seriously.\n\n\"Guess I'll be joining you and Summer in your room tonight Candice,\" the cute brunette sighed. Candice nodded in acceptance.\n\n\"Thanks,\" Carrie said to both girls. She then turned to the brunette and added, \"This is Joel.\"\n\n\"I kind of figured that out,\" the dark haired girl teased.\n\n\"Andie?\" I asked. The girl nodded and I added, \"I've heard a lot about you.\" She was Carrie's roommate.\n\n\"Not nearly as much as I've heard about you,\" she replied, but a rather loud song started playing making it hard for everyone to hear each other.\n\n\"Let's get out of here,\" Carrie said. \"It's too loud. Why don't we all go to the diner? I'm suddenly starving.\"\n\n\"It's about time,\" Andie frowned. \"You don't eat nearly enough.\"\n\n\"Yes mom,\" Carrie smiled.\n\n\"Well, you don't,\" Andie insisted.\n\n\"You three coming?\" Carrie asked Kip, Candice and Summer.\n\n\"I think I'd prefer to stay and dance if you don't mind,\" Kip said.\n\n\"What about you?\" Carrie asked Candice.\n\n\"If you take her, then who will I dance with?\" Kip smiled. The only person more surprised than Carrie was Candice.\n\n\"Are you asking me to dance?\" she asked.\n\n\"Yes,\" he smiled. \"And if that doesn't cause the end of world as we know it, I'll probably follow up with asking you out.\"\n\n\"Finally!\" Carrie said. \"I thought you two were never going to get together.\"\n\n\"Me neither,\" Candice said, still a bit surprised.\n\n\"Is that a yes or a no?\" Kip asked.\n\n\"I've been waiting for you to ask me out for three years,\" Candice replied with a shake of her head. \"I should say no, but to hell with it. Let's dance!\" The two disappeared toward the dance floor. \n\n\"I didn't realize they were upper classman,\" I said.\n\n\"They're the resident advisors of our dorm,\" Andie smiled. \"They're both graduating this year.\"\n\n\"They look well together,\" I said watching them for a moment through the crowd.\n\n\"I didn't think Kip would ever ask her out. I wonder what finally made him do it,\" Andie said thoughtfully.\n\n\"Why do I think you had something to do with this?\" Carrie asked me. I shrugged innocently. She snorted and added, \"Yeah, right.\"\n\n\"So Summer, are you joining us?\" Andie asked the Indian girl, letting the subject drop. \n\n\"Sorry,\" she replied. \"I want to find someone to dance with for a bit.\"\n\n\"No problem,\" Andie grinned. \"Just remember, no sneaking off with a guy!\"\n\n\"Spoilsport!\" Summer cried and drifted off.\n\n\"Is she really that wild?\" Carrie asked.\n\n\"No,\" Andie laughed. \"Or at least I don't think so. She was the bravest out of our small group of friends, but she not a slut. I just liked to tease her because she can get quite aggressive when she likes someone.\"\n\n\"I'm sure,\" I smiled.\n\n\"What did I miss?\" Carrie asked.\n\n\"Just some harmless flirting,\" I replied with a laugh.\n\n\"I hope you didn't come all this way just to flirt with some girls?\" Carried asked with an arched eyebrow.\n\n\"Just one,\" I said, pulling her into a quick kiss.\n\n\"Why don't you two go without me?\" Andie offered as she watched us.\n\n\"Absolutely not!\" Carrie cried, pulling away from me. \"I want you two to get to know each other better. Unless you'd prefer to stay here with the sorority?\"\n\n\"No thanks,\" Andie grinned. \"The sisters here are a little too bubbly for my taste.\"\n\n\"You think?\" Carrie laughed.\n\nI smiled as I thought about the girl Kip and I first met when we entered the bar. She was clearly just the right type for this sorority based on Carrie and Andie's reactions.\n\nI took a few moments to sneak looks at my girl as we made our way to the diner. Carrie was more beautiful and hotter than I remembered. On top of her distinctively attractive face, she had a perfect build with wide shoulders and round breasts. I wanted to touch them, to taste them. The thought of what I would do to them later had my cock semi stiff.\n\nOf course, as perfect as her breasts were, it was her ass that drove me to distraction. It was all I could do to keep my hands off of it. I wanted it so bad and Carrie knew it. I could tell by the way she looked at me. \n\nThe diner was surprisingly close. It was still a little early for the late night crowd and a bit past dinner, so the place wasn't that crowded. We ordered and waited.\n\n\"I can't believe you're actually here!\" Carried said excitedly. We were sitting together. Andie sat on the other side of the booth.\n\n\"So you're not mad?\" I asked. \"I know we agreed not to visit, but...\"\n\n\"Mad?\" my girl asked incredulously. \"Do I look mad?\"\n\n\"I guess not,\" I grinned. \"We have Tommy to thank for this. It was his idea.\"\n\n\"Remind me to give him a big kiss when we finally meet!\" Carrie said.\n\n\"I'm sure he'd like that,\" I laughed.\n\n\"Tommy?\" Andie asked.\n\n\"My roommate,\" I answered. \"A big, good natured farm boy, and smart too! You'd like him.\"\n\n\"Really?\" Andie asked, her interest peaked. \"Maybe next time you can bring him with you?\"\n\n\"He has a girlfriend,\" I laughed.\n\n\"All the good ones do,\" she sighed, causing Carrie and I to laugh.\n\nThe meal was enjoyable and I found myself liking Andie quickly enough. She had a cutting sense of humor, but she was kind about it. Of course, with Carrie next to me, there wasn't much that was going to bother me. I squeezed my girl's hand under the table. She leaned toward me and gave me a kiss on the cheek.\n\n\"What was that for?\" I asked.\n\n\"Do I need a reason?\" she asked.\n\n\"Nope,\" I grinned. \"Just wondering.\"\n\n\"If you two don't get a room soon,\" Andie teased. \"I'm going to have to get a hose out and douse you with cold water.\"\n\n\"Well, it has been a while,\" Carrie said.\n\n\"You're telling me!\" I grumbled, causing the ladies to laugh.\n\nWe finished eating and paid the check. The walk back to the dorm was thankfully short. We stopped at the bar briefly so that Andie could get Candice's room key. The blond and Kip looked like they were hitting it off well. Summer joined us for the trip back.\n\nAndie and Summer kept up a constant chatter as we walked which was a good thing since neither Carrie nor I felt much like talking. We were too busy simply absorbing each other's presence. I couldn't believe how much better I felt just by being next to her.\n\nAndie and Summer disappeared once we entered the dorm. Carrie and I quickly found our way to her room. We were in each other's arms before the door closed.\n\n\"It feels so good just to hold you!\" I said in satisfaction.\n\n\"Is that all you plan on doing with me?\" she teased.\n\n\"Right now, it's enough,\" I said seriously, but then smiled and added, \"Of course, enough doesn't mean it's all I want.\"\n\n\"You want something?\" she smiled sexily.\n\n\"Not something,\" I replied, kissing her passionately. \"Someone. You.\"\n\n\"I'm yours,\" she sighed, resting her head on my shoulder. \"You know that. Heart and soul.\"\n\n\"And body?\" I asked, figuring it was my turn to tease.\n\n\"That too!\" she giggled, pulling back and looking up into my face.\n\nI don't know what I did to deserve such a look from a girl as perfect as Carrie, but I tried not to think of it too much. I guess a part of me was afraid I'd jinx it. Silly, I know, but...\n\n\"I really have missed you!\" I said emphatically, hugging her tight. \"It's like a part of me was gone. The better part.\"\n\n\"Me too,\" Carrie said, but then she smiled and added, \"Now shut up and kiss me. It's been too long!\"\n\n\"Yes mam!\" I laughed, pulling her into another kiss. This one lasted a very long time. By the time it was done I had Carrie's blouse undone and on the floor. Her pants quickly followed. I stepped back and looked at her hungrily.\n\n\"You like?\" she grinned.\n\n\"What do you think?\" I asked, taking one of her hands and placing it on my pants, over my stiff cock. Carrie squeezed gently.\n\n\"I think neither one of us are going to get much sleep tonight,\" she said sexily.\n\n\"I can only hope,\" I replied, continuing to look my golden goddess's body up and down.\n\nCarrie eyes locked with mine as she licked her lips. My girl reached out with both hands and unbuttoned my pants. She pushed them down and my cock sprang free.\n\n\"I have to be the luckiest girl in the world,\" Carrie sighed contently, slowly falling to her knees. She took my cock and placed it between her tits. \"I've met the perfect guy! Smart, good looking and caring. And on top of that, he's got a big one!\"\n\n\"A big what?\" I asked, watching as she slowly began stroking my cock. Carrie grinned.\n\n\"In the mood for a little dirty talk, are we?\" she teased. It was a rhetorical question. My girl knew me well enough to know what I liked.\n\nCarrie leaned forward and teased the head of my cock with her lips and then teeth. I groaned softly as her tongue worked its way around. She stopped for a moment and looked up again, meeting my eyes.\n\n\"I love the taste of your big cock,\" she said seductively. \"I love the feel of it between my breasts.\"\n\n\"Tits!\" I whispered excitedly.\n\n\"Do you like my tits wrapped around your big cock?\" she asked.\n\n\"Yes!\" I grunted.\n\n\"Oh my,\" Carrie grinned. \"I know it's been a while, but you look ready to cum already!\"\n\n\"It's been too long!\" I gasped out. \"Soon!\"\n\n\"Good,\" Carrie said sexily. \"Because the only thing better than the taste of your cock is the taste of your cum!\"\n\n\"You want it?\" I asked.\n\n\"Yes!\" Carrie cried, picking up speed. She worked my cock with her tits almost unmercifully. \"Give it to me!\"\n\n\"Here...I...go!\" I cried and let loose. \n\nThe cum sprayed from the head of my cock. Carrie seemed a bit surprised as the first of my juices shot over her head. The next jet hit her in face. My blond haired goddess looked at me wantonly and licked my cum from her lips. The next jet would probably have shot over her head again if she hadn't directed my cock to her tits. They were covered in seconds.\n\n\"Wow!\" she cried and finally fell on my cock. Her mouth took the head in and I could feel her sucking. It sent my body into another spasm. Carrie drank the rest of my cum down. It took a surprising amount of time. There was a month's worth of frustration pumping from my cock.\n\nThe weird part was that when I was done, I was still hard and horny as hell. All I wanted to do was throw Carrie on the bed and ride her to another orgasm. I did the first part. Carrie squeaked in excitement more than surprise when I lifted her and tossed her onto her bed. She giggled, rolled on her stomach and playfully tried to get away. I was too worked up for that. I grabbed her hips and lifted her ass in the air.\n\nAs bad as I wanted to ride her, the sight of my girl's pussy open, wet and inviting was too much for me. I fell forward and buried my tongue inside.\n\n\"Oh yes!\" Carrie cried. \"It's been so long!\"\n\nI always enjoyed tasting her, but it was almost too much for me right then. All my senses were firing like crazy! Carrie started cumming, but I didn't even pause. Her juices flowed into my mouth. I simply swallowed and kept on going. Carrie rolled into a second orgasm and then a third, and still it wasn't enough!\n\n\"Joel! Please!\" Carrie finally gasped out. \"Take me! I need to feel you inside!\"\n\nI was up and inside her pussy almost before she realized it. We both cried out. Carrie was always comfortably tight. Normally I took my time working inside of her. There was no need today. We were both more than ready!\n\n\"My God!\" she cried. \"It feels so good!\"\n\nI slammed inside of her faster and harder in response. Carrie tried to push back to meet my thrusts, but I was riding her so hard that it made it all but impossible.\n\n\"Oh yes!\" she cried. \"Joel you're amazing!\"\n\n\"Cum for me!\" I demanded.\n\n\"But...\" she began. I cut her off.\n\n\"I said cum for me!\" I snapped as I reached around her and blurred my fingers against her clit.\n\n\"Yes!\" she nearly screamed as her orgasm took her. My own followed a moment later. If possible, I think I pumped even more cum inside her pussy than she drank earlier!\n\n\"Wow,\" I said afterward as we lay panting next to each other.\n\n\"I said that earlier,\" she laughed softly.\n\n\"Being with you is always great, but that was...\" I began.\n\n\"I know!\" Carrie interjected. \"I hate being away from you, but it's almost worthwhile if sex is going to be like that when we finally see each other again!\"\n\n\"Almost,\" I said.\n\n\"Almost,\" she agreed and snuggled into my shoulder.\n\nI was surprised that I was actually half asleep when Carrie rolled on top of me. She looked down at me with a warm smile. Her hair hung down. I reached up and pulled it into a ponytail.\n\n\"Your hair is getting longer,\" I said.\n\n\"Not anywhere near Abby's,\" she grinned.\n\n\"No,\" I laughed. \"Are you trying to tell me that you want to be taken again?\"\n\n\"Later,\" she said, joining me in laughter. \"Right now, I think I'd just like to lay here and love you.\"\n\n\"That sounds nice,\" I said, no longer laughing. Carrie leaned down and kissed me. It was slow and felt very nice. \n\nThe next fifteen minutes went past with us laying there, sharing loving kisses. It felt so right, so perfect! I didn't want it to end. Of course, other parts of me had other ideas.\n\n\"I'm being poked!\" Carrie grinned.\n\n\"Then why don't you do something about it?\" I smiled. \n\nHer grin turned sexy as she sat up, reached between us and took my hard cock in her hand. She directed it to her pussy. Carrie slowly sat on my lap and took my length in. My girl rode me slowly, letting me feel how much she loved me. I reached up and massaged her breasts gently.",
        "\"So, do you feel whole again?\" Carrie asked after a while.\n\n\"And then some,\" I said seriously.\n\n\"Me too,\" she said, pausing and squeezing my cock with her pussy. I let out a soft moan. She smiled gently and added, \"You sound like you're getting close again.\"\n\n\"Starting to,\" I laughed.\n\n\"Hmm, maybe I can do something to speed it along,\" she said seductively.\n\n\"I'm sure you can!\" I gasped as she started bouncing on my cock. My hands squeezed her breasts a little harder and she smiled sexily.\n\nCarrie started panting. Her pussy was soaked. I could feel her juices dripping over my cock, thighs and hips. I pinched her nipples gently. It was enough. She gasped and came. I held her close until her orgasm was done.\n\n\"That's no fair!\" she said when she caught her breath. \"I came and you didn't.\"\n\n\"We can take care of that,\" I grinned and rolled us over. Carrie laughed and spread her legs. I pushed in slowly.\n\nI had my arms propped on either side of her head. Carrie held them with her hands as I stroked in and out of her. I leaned forward and kissed her passionately. Our tongues danced in each other's mouths. The closer I can to an orgasm the harder I stroked. \n\n\"I want you to cum with me!\" I gasped when I couldn't hold back much longer.\n\n\"You want me to play with myself?\" she asked knowingly.\n\n\"Yes!\" I grunted. Carrie reached between her legs with one hand and started rubbing her clit.\n\n\"This is so much better with your big cock inside of me!\" she said not long afterward. Her orgasm was building quickly. \"It was a very long month!\"\n\n\"Tell me about it!\" I gasped, and shoved deep. This time Carrie and I came at the same time. I'm not sure how long it took, but we were both lying on our sides and kissing when we were done.\n\n\"I could die like this,\" Carrie said, snuggling close.\n\n\"It wouldn't be the worst way to go,\" I agreed.\n\nI don't think either one of us planned on falling asleep, but we did. It just felt too good lying next to each other and feeling each other's contentment. Sometime in the middle of the night, Carrie rolled over and we spooned. It was the best night of sleep I'd had in a very long time.\n\nIt was still dark when I woke up. Carrie's ass was nestled against my hips and I had one hand draped over her. I was cupping one of her breasts as if it were the most natural thing and the truth be told, that's exactly how it felt. \n\nWe were both still naked and the feel of her skin against mine was amazing. I lay there silently for a few minutes enjoying the warmth of her body. I could have nodded back off to sleep like that and would have if my body hadn't started reacting. I gently began rubbing her breast almost without thought. My cock stiffened. It was lodged between Carrie's legs.\n\nMy girl didn't wake up at first. I shifted slightly and started kissing her exposed neck as I slowly rocked my hips back and forth. Despite Carrie's being asleep, her body started to respond. Her nipples hardened in my hand and her breathing grew even deeper. I knew it was only going to be a matter of moments before she woke up. Her mouth fell open and she moaned. Unable to resist, I kissed her. Her eyes fluttered open.\n\n\"Oh wow!\" she groaned, her voice think with lust. \"Now this the way to wake up!\" Carrie thrust her mouth back onto mine.\n\nHer words and kisses weren't her only response. I felt her spread her legs slightly, giving me better access. My cock was rubbing back and forth along her pussy lips. They were already damp, but grew even wetter. Suddenly the room was filled with her scent. \n\nI shifted my hand from her breast down between her legs. She gasped as my fingers brushed her clit. A moment later I slipped my cock inside her and her gasp turned into a deeply satisfied moan.\n\nI rode her slow, letting our orgasms build. Carrie insisted on kissing me. It wasn't easy considering our positions, but it didn't seem to bother her. I thrust slow and deep with every stroke and she moaned into my mouth every few seconds. Her hand covered mine at her center and she made me move my fingers quicker. My girl was obviously closer to cumming than me. I pulled my fingers away from her, letting her continue on her own. Instead, I grabbed her hip to steady her and started stroking faster, harder.\n\nMy other arm was under her. Carrie stopped kissing me and began panting loudly. I felt her free hand take hold of mine. She brought two of my fingers to her mouth and started kissing them. She was clearly very excited. Carrie never opened her eyes as she took my fingers into her mouth and started sucking them. It was surprisingly arousing.\n\n\"Oh yeah!\" I groaned. \n\nMy arm wasn't really comfortable and after a few minutes it became too distracting to enjoy. I didn't want her to stop, but there was little choice. I growled under my breath and shifted suddenly. Carrie complained as I pulled my fingers from her mouth, but not too loudly since my cock was still embedded deep inside of her. I was now on my knees, straddling her bottom leg and bending the other at the knee so I would have access.\n\nI continued to push my cock inside of her, but it wasn't at the usual angle. Carrie eyes lit with lust as she watched and felt me drive my cock deep again and again. One of her hands continued to work her clit.\n\nI reached forward with my free hand and caressed her face before brushing her lips with the two fingers she's been sucking on before. My girl smiled knowingly and opened her mouth ever so slightly. The tip of her tongue slipped out and teased my fingers. I pushed first one and then the other inside her mouth. Carrie grabbed my wrist with her free hand and started sucking in earnest. I picked up the pace and slammed in and out of her even harder than before.\n\n\"I...can't...wait...any...longer!\" she cried out between sucks.\n\n\"So don't,\" I replied with a hungry smile. \n\n\"Oh my God!\" Carrie cried. \"I'm so close!\" \n\nMy girl continued to suck my fingers as hard as she could until her orgasm took her fully. She pulled my fingers from her mouth when she did and cried out. I watched Carrie's face in profile. She was in the throws of one of her better orgasms. Her face was taunt and she was gritting her teeth as the first wave hit. The fingers of her hand between her legs blurred against her clit.\n\nI drove my cock deep and held myself there letting her body spasm around my hardness. It was one of those moments that despite the excitement I was feeling I was able to step back and fully enjoy the sight of her release with all of my senses. It took Carrie a long time to finish, but I didn't mind. She was amazing!\n\n\"Thank you,\" she whispered almost hoarsely when she was done.\n\n\"No, thank you,\" I said seriously, remaining buried in her pussy. \"I'm going to remember that moment forever.\" \n\n\"It was longer than a moment,\" she smiled, her voice more normal as she recovered. \"In fact, I think that may have been the longest orgasm of my life.\"\n\n\"So far,\" I smiled, causing her to glance at me. She smiled slowly and my cock stiffened a bit inside of her.\n\n\"So far,\" she agreed slowly, looking more than satisfied. \"I really don't deserve you.\"\n\n\"You're right,\" I agreed, but then added, \"You deserve someone better.\"\n\n\"There's no such person,\" she insisted. I didn't bother arguing. Instead I slowly started working my cock in and out of her again.\n\n\"I think you deserve a reward for waking me up the way you did,\" she said, smiling sexily.\n\n\"What do you have in mind?\" I asked with a grin.\n\n\"I'd say whatever you want,\" she replied. \"But we both know what your answer will be.\"\n\n\"Well, it has been a while and you do have the best ass,\" I said seriously, eyeing it hungrily. \n\nCarrie smiled and pulled away from me. She rolled onto her stomach and thrust her ass high in the air because she knew what that did to me. Her pussy was swollen slightly and it dripped, but it was the sight of her other opening that made my cock stiffen even more. I did take a few moments to kiss her pussy, drinking the left over cum from her earlier orgasm, but then I shifted my attention.\n\n\"You have such a wicked tongue!\" my girl cried as I pushed it inside her ass.\n\nCarrie reached around and pulled her cheeks apart giving me complete access. I took full advantage of it and worked hard at getting her ass ready. \n\nIt was only a few minutes before she was ready. I stroked in and out of her pussy a couple of times and then began to work my rock hard cock into her ass. I was holding both her hips and thrusting with a slow constant pressure. My golden goddess moaned loudly into a pillow the entire time.\n\n\"Oh yes!\" I groaned when I was finally in her ass completely.\n\n\"I forgot how it feels to have something so large there!\" Carrie cried.\n\n\"You love it,\" I said.\n\n\"You have no idea!\" she moaned as I started working my cock in and out. My girl lay there taking it and enjoying it for a few minutes before demanded, \"Give me your hand!\"\n\nI did and she brought my fingers to her mouth once more. She licked and sucked them hard and sight left me no doubt about what she was imagining. I didn't mind. Hell, besides the excitement of her expression, there was the feeling in and of itself. My orgasm built quickly. \n\nI had a few flashes of memory when we were in similar positions, only it wasn't my fingers she was sucking. It was Brian's cock or Robbie's or one of the others.\n\n\"Whose cock are you imaging?\" I gasped out, wondering.\n\n\"Yours of course,\" she replied briefly and went back to my fingers. I could tell she wasn't just saying it. For some reason that bit of knowledge was too much for me.\n\n\"Oh fuck!\" I grunted. \"I'm going to cum...\"\n\nCarrie just sucked my fingers harder in response. My orgasm was about to overwhelm me, but it was obvious that my girl wasn't ready to join me. I wanted us to orgasm together despite my emanate release. I tried hard to force my orgasm back, but only succeeded slightly. I decided we needed to switch positions or I would lose it.\n\nPoor Carrie yelped as I somehow rolled onto my back, taking her with me. I held her in place with one arm wrapped around her chest and continue to thrust up into her ass. I used my free hand on her pussy. First I rubbed her clit hard, and then I slapped it a couple of times.\n\n\"What...\" she began in surprise, but her words stopped and were replaced with moans as the weight of her body caused my cock to go even deeper into her ass. \n\nAfter that, I held off as long as I could, but it was seconds, not minutes.\n\n\"Cum with me!\" I demanded as I buried the same two fingers that were in her mouth moments ago deep inside her pussy. It felt like they were delving into a furnace! I pulled her tight against me using both hands and shoved my cock forward. I was certain that my cock had never been deeper.\n\n\"Yes!\" Carrie cried. She clenched her ass muscles and squeezed my cock hard, the way my girl always did when she came. I started uncontrollably pumping my cum into her ass. We shivered and shook together until we were both completely done.\n\n\"Every time I think it couldn't get any better...\" my golden goddess began a few minutes later as she slowly rolled off of me.\n\n\"Don't look at me,\" I interjected with a groan. \"It has to be you.\"\n\n\"I think it's the combination of us together,\" she sighed, lying with her head on my shoulder.\n\n\"You may be right,\" I smiled, rubbing my fingers through her hair. \"I love you.\"\n\n\"Love you too,\" she mumbled and nodded back to sleep. I stayed up for a few more minutes, playing with her hair. \n\n\"You really are my golden goddess,\" I sighed, finally closing my eyes and enjoying the feel of her next to me. The warmth of her body, the scent of her, the feel of her skin against mine were the ways things were meant to be with us. I knew that and so did she, and for now, that was enough. "
    ],
    "authorname": "JoeDreamer",
    "tags": [
        "drama",
        "romance novella"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/joel-and-carrie-ch-08"
}
{
    "title": "Lilith's Emporium: Vampire Party",
    "pages": [
        "Emily was on her way to a party store trying to find ideas to throw her friends bachelorette party. She was the maid of honor and she had some ideas but she had just started planning it out today so she was heading to the store to see what they had for her to work with.\n\nAs she drove she felt compelled to take a back road way that she usually didn't. There was nothing wrong but she had a gut feeling to take that right turn and she usually followed her gut. It was a road she didn't usually travel down but she knew where it went so she wasn't too concerned. She looked over to her right and saw a little store with a sign out front that said Lilith's. \n\n\"Lilith's, I sure they would have something I can use.\" She said thinking it was a sex toy shop or something like it so she pulled up out front and parked her car.\n\nAs she walked inside it looked very nice considering the building seemed old. She wasn't seeing exactly what she expected to see but there were very strange items all over the place. There were statues of strange creatures and also a lot of different scents that caught her attention as well. There was a rack of what looked like perfume that she went and got a closer look at reading the names that varied.\n\nThere was one called \"succubus\" and one called \"inner beast\", also one called \"essence of dragon\" and \"fairy night\". She read all of these and seemed interested in them before she turned around and saw a woman standing there with beautiful red hair and a smile on her face.\n\n\"Hello and welcome to Lilith's.\"\n\n\"Oh crap, sorry I didn't hear you.\"\n\n\"I do that a lot, I enjoy it, so what brings you in today?\"\n\n\"I um, I thought this was a sort of sex toy shop but it doesn't seem to be what I'm looking for.\"\n\n\"Well what are you looking for?\"\n\n\"I am trying to plan a bachelorette party.\"\n\n\"Oh really, I think I can help you with that.\" Nessira said walking over to the counter and pulling out a book with different advertisements inside. \"Now tell me about the bride, what is she into?\"\n\n\"What do you mean?\"\n\n\"I mean does she something regular, paranormal, old fashion? Does she want a club experience, I know a great one right in the city that would be perfect.\"\n\n\"Paranormal?\"\n\n\"That's why you're here right?\"\n\n\"Actually I think we were going for more of a private hotel room type of experience.\"\n\n\"Also an excellent choice, maybe a strip show?\"\n\n\"Maybe, what did you have in mind?\"\n\n\"Well tell me something about the bride, what does she like?\"\n\n\"Well you said paranormal which is funny because she loves Vampires and stuff like that.\"\n\n\"Really, wait when you say Vampires?\"\n\n\"Her favorite movie is Bram Stokers Dracula, no sparkly vampires if that's what you mean?\"\n\n\"I like her already! Here you go.\" Nessira said handing her a flyer.\n\n\"Mr Blood? What is this like a cosplay strip show?\"\n\n\"You could say that, it will be a very hot evening if you know what I mean.\"\n\n\"I think she'll actually love this, thank you so much!\"\n\n\"You are quite welcome, what is the brides name so I can set this up for you?\"\n\n\"Angel.\" \n\n\"Really, this is perfect, such a sweet and innocent name.\"\n\n\"Well, not as much as you'd think.\"\n\n\"Even better, just put down a deposit and fill out this form and I will take care of everything.\"\n\n\"Wow, I will have to tell my friends about this place.\"\n\n\"Please do, at Lilith's we guarantee satisfaction.\"\n\n\"Thank you so much again, I'm Emily by the way.\"\n\n\"Nessira, and I know Angel with enjoy the entertainment, and I'm sure she will be so thankful that her maid of honor went through so much trouble for her.\"\n\n\"I hope so, I want her night to be special.\"\n\n\"Oh trust me, neither of you will forget it.\"\n\n\"Thanks again.\" Emily said smiling and heading out the door before Nessira took the information card and placed in a small bowl before bringing it up to her enchanting room.\n\nShe placed the bowl in a small table with a strange symbol in the middle of it. She took a knife and sliced her hand open letting her blood flow and drip down filling in the crevices of the symbol before she began to chant some strange language. The room began to shake a little as she continued with her eyes turning red until everything went silent.\n\n\"Nessira, how good to see you again.\" A mans with an old accent said from behind her. \n\n\"Why hello there Gabriel, I trust I am not interrupting anything important?\"\n\n\"Of course not Madam, I always have time for you and your needs. It has been far too long though.\"\n\n\"Nice to know a vampire never loses his manors, I was away for a while.\"\n\n\"Last I heard you were living with a man?\"\n\n\"That was long ago, things change. But now on to business.\"\n\n\"Of course, what can I do for you Pythonissam?\"\n\n\"Ooh Latin, I love it when you talk dirty, I have a bachelorette party for you to attend.\"\n\n\"Oh really, me in a room with a bunch of lovely ladies.\"\n\n\"Yes and the bride is a big Dracula fan so I want you to show her a good time.\"\n\n\"I see, how much of a good tim?\"\n\n\"As much as she wants, however there is a catch.\"\n\n\"And that is?\"\n\n\"She needs to still make it to her wedding, along with the bridesmaids.\"\n\n\"I see, so no death, understood.\" He said before he glanced over at a jar with a heart in it still beating. \"Have a change of heart recently?\"\n\n\"Never mind that.\"\n\n\"If someone has hurt you to the point you have removed your heart, point me to this scoundrel and I will...\" he stopped as Nessira suddenly had her hand around his throat. \n\n\"I said never mind that!\" She said releasing him.\n\n\"Understood, my apologies Madame.\" he said before she released him and let him catch his breath. \"I would never try to upset you my lady.\"\n\n\"Sorry about that, best we move on though.\"\n\n\"Very well.\"\n\n\"Anyway it's just Lilith and my other masters don't like unnecessary killing, I brought a forest nymph to life and, well you know what happens, they understood but I still got a stern talking to about it so let's keep this civil..\"\n\n\"I would never do anything to make your life difficult, do not worry, she will arrive at her wedding looking as beautiful as ever.\"\n\n\"Very good.\"\n\n\"I will find my fun elsewhere if need be.\"\n\n\"Sounds sexy.\"\n\n\"With me, everything is sexy.\" He said taking her hand and kissing it.\n\n\"Now be careful or I might have my way with you right now.\"\n\n\"Do not tease me, you know I could never resist a beautiful red head.\"\n\n\"Oh I remember, I remember very well.\"\n\n\"It is a shame a vampire cannot be killed by a night with a succubus, I have spent many nights imagining what would be like to lose my life in your loving embrace.\"\n\n\"I would miss you too much, and most men don't live to tell the tale.\"\n\n\"Most?\"\n\n-----------------\n\nThe day had arrived and Emily, Angel and the other two bridesmaid's Veronica and Selena were in a limo on their way to the hotel. They had spent most of the day doing different activities but now it was time for them to have a few drinks and relax. Emily and the other knew what was coming but Angel had no idea what was waiting for her when they arrived. They piled out and headed up the elevator as Angel was already a few drinks in and having a very good time. Emily was tall with dark hair and glasses, Angel was a beautiful blonde bombshell as her friends called her as Veronica was more of a dirty blonde and Selena had a hint of Spanish in her with a very latin tan. As the elevator door opened they walked up to the sweet that had been reserved and Emily opened the door. When they got in they saw the large room that seemed to be separated by a few walls but there was a kitchen, living room, bathroom and large bedroom with a hot tub in the corner.\n\n\"Wow, you guys this is amazing.\" Angel said looking around.\n\n\"Yeah, wow I wasn't expecting something this nice.\" Emily responded.\n\nThey all dropped their bags and got comfortable when someone stepped out of the bathroom which surprised them all a bit but Emily recognized him from the flyer that Nessira had shown her.\n\n\"Hello, my name is Gabriel.\" He said wearing an old fashion suit with his hair slicked back.\n\nHe had a very old fashion look but was clean shaven and very attractive. Angel could tell right away he was supposed to be a vampire and got very excited and even a little turned on as he stared at her walking into the bedroom. All of the ladies suddenly felt very strange like they were all getting very turned on all of a sudden and the show hadn't even started yet. Even Emily was shocked by what was happening.\n\n\"Now ladies, which one of you is Angel.\"\n\n\"I am.\" She said sitting on the bed.\n\n\"Ah you are a lovely bride aren't you.\" He said walking over and kissing her hand. \"Now which one of you is Emily?\"\n\n\"Um, I am.\" She said putting her hand out to shake his but he took it and kissed it as well.\n\n\"Ah you are very lovely indeed.\" he said looking at the awkward yet beautiful woman with glasses. \"Angel this woman is the one you should thank at the end of tonight.\" He said looking back at the bride who was still smiling at him. \"And you.\" He said whispering in Emily's ear. \"I may want to thank you myself. BUT FIRST, it is time for the show.\" He said turning back towards Angel. \"Come here my dear and get comfortable right here in this chair.\" He continued inviting her to sit in the small wooden chair he had.\n\nEmily felt strange but very turned on as she sat back and watch. The other two bridesmaid were enjoying the show as he slowly stripped off his shirt circling Angel like a predator stalking his prey. For the most part it seemed like a normal strip show except for his pale skin and fangs that they all figured were fake. He would move in close to Angels neck to the point she could feel his breath against it. She had a look in her eyes like she almost wanted him to bite her but it would always end with her laying a gentle kiss on her neck instead which gave her goosebumps.\n\nEmily watched all of this and how erotic it was. Gabriel started to unbutton his shirt while her circled Angel like she was prey. The other two women sat on the bed as he gently caress their faces before turning back to Angel. Things had begun to get strange as Emily suddenly felt dizzy and in a flash they were all in the hot tub together but it was not filled with water it was filled with blood. Emily wasn't sure what she was seeing as it seemed like Selena and Veronica were making out, licking the blood off each other's breasts as Gabriel and Angel were also tongue wrestling each other as the bloody water covered everyone. It was a blur but Emily was in the tub as well but seemed to be pleasuring herself as everyone else had seemed taken. Her hand massaged her clit underneath the blood unseen by everyone else. she didn't know what was going on but she was so turned on she didn't care.\n\nGabriel suddenly made eye contact with her but something seemed off with his eyes. They had a gold look to them as she lost herself in his gaze like he was the only thing that mattered and he looked upon her. Angel writhed in the tub letting the blood drip off her breasts not even noticing his gaze was focused on Emily. Perhaps he was pleasuring her under the water with his hand. As he stared at her she wanted him very badly but she wasn't even sure why. He moved away from Angel and slid towards her getting very close and she still pleasured herself.\n\n\"I want you to know that this show though may be for the Bride, it is you I want, I will pleasure you beyond belief and make you feel things you could never imagine, but first.\" he said giving her a gentle kiss and sliding back over to Angel.\n\nEmily looked on until she saw all three of the ladies suddenly sprouting fangs of their own. It was like a scene from a horror film as Victoria bit into Selena's neck but instead of crying out in pain she seemed to enjoy it. Gabriel sprouted his before he turned and sank them into Angels neck making her moan and writhe even more. Once they were done they all turned towards Emily with blood soaked seductive smiles on their faces before the floated towards her. She could feel their hands all over her body massaging her as they slid close. Hands that poked and prodded her all over even sliding in between her legs and tickling her sweet spots as she looked up and was stuck in Gabriel's glare yet again. She was soaking in a tub of blood and pleasure as the three ladies who were once her friends had seemed to become mindless vampiric sexual slaves being controlled by this man to pleasure her and the worst part was she didn't want them to stop even as the fangs began to sprout and they got ready to bite. She felt their lips against her neck sending shivers through her body as they all seemed to focus on pleasuring her. She closed her eyes and enjoyed all the hands, lips and feelings caressing her all over as she felt Gabril slid in spreading her legs apart below the surface of the tub. he teased her slit with his cock which felt huge as the three ladies continued to pleasure her as she begged for him to enter her.\n\n\"Not Yet\" he whispered in her ear.\n\nEmily opened her eye's and was back on the bed confused as Veronica and Selena were sitting next to her cheering as Gabriel who was only wearing a Speedo was grinding against Angels lap as the show almost seemed to be over. She still felt strange and wasn't exactly sure what had happened but once the show had ended and Gabriel left the room she made sure Angel was tucked in and alright.\n\n\"Oh my god Emily, that was amazing, thank you.\"\n\n\"Yeah, no problem, get a good night sleep, big day tomorrow.\"\n\nEmily turned on the light and left the room heading for her own. She opened the door and walked in turning the lights on and stretching before she walked over to the mirror and checked her makeup. She looked in the mirror and saw a dip in the bed as if someone had been laying on it which bothered her a little but not enough to do anything about it now. It was late and she wanted to go to sleep.\n\n\"There you are.\" A voice said making Emily jump and turn a little scared until she saw Gabriel laying on the bed dressed again.\n\n\"Holy shit, Gabriel, how did you?\"\n\n\"Shh, I told you before that I wanted to thank you after the show.\" He said sliding out of the bed and walking towards her.\n\n\"Oh um... okay well you are welcome, I think Angel had an amazing night.\"\n\n\"And you?\"\n\n\"Oh, it's not about me so I'm fine.\"\n\n\"It's a shame, you are a beautiful woman, where is your groom?\"\n\n\"Just um... haven't found him yet I guess?\"\n\n\"Pity, but for now let me experience what he is missing by not finding you yet.\" He said getting only inches from her face.\n\nEmily felt strange and wasn't sure what was coming over her as he got close and breathed in her scent. She thought back to that vision in the tub getting herself turned on. A part of her wanted to throw him on the bed and fuck him which was not like her at all. She had always been much more in control and calm about sexual situations to the point most men found her boring which might explain why she was still single. Suddenly his lips pressed gently against hers and she felt goosebumps all over her body as the shared each other's spit.\n\n\"You want this do you not?\" He asked placing his hands on her waist as he removed his lips.\n\n\"I... I um...\"\n\n\"Just relax and let it happen, you will have an unforgettable evening with me my dear, if you want it.\"\n\nEmily shook all over as his words were like music to her ears. She bit her bottom lip as his touch sent shivers through her and she wanted him. She wanted him more than she ever wanted anyone in her life and she was getting impatient waiting for him so she leaned forward pressing her lips to his again tasting him as she pulled him in close rubbing her hand along his back as he moved his lips down her neck giving her chills. He grabbed the front of her shirt ripping it open a little as he pressed his face against her cleavage as she ran her fingers through his hair. She sat up on the dresser and wrapped her legs around his waist while he continued to trace his tongue and his lips along her skin. Emily let out a moan of approval as he began to work his way lower before he picked her up and laid her down on the bed.\n\nHe laid on top of her kissing her again as his hand ran down her side and sliding under her ass before her legs hooked around him and he ran his fingers up her leg. Her skin was smooth and soft as he sucked the skin on her neck a little more making her want him even more as she lost herself to the strange lust that had come over her. He lowered himself down sliding off her skirt and throwing it on the floor. He looked at the pink cotton panties she was wearing and smiled before he kissed the front of them and pulled them off leaving her pussy there for the taking. Emily couldn't wait to feel his lips and tongue in her slit as he breathed in her scent. He could smell the blood rush to her groin and he licked his lips before he stuck out his tongue and started to tease her slit making her squirm at his touch.\n\nEmily had never felt pleasure like this before as his tongue traced circles around her clit sending waves of pleasure through her. His tongue slithered inside her making her buck her hips as he tickled her insides driving her crazy. Gabriel couldn't contain himself much longer but he wanted to please her as much as he could but soon his instincts took over. He sprouted his fangs and traced his tongue along her inner thigh before biting her. Emily let out a small yell as it hurt at first but not for long. Soon she began to enjoy it as it sent a warm feeling through her body. Gabriel took what he needed and let go as he still wasn't done with her yet. He climbed up kissing her stomach and her chest as her blood dripped from his lips staining her skin before his lips met hers again. She tasted her own blood but didn't care as she wanted him to take her and wanted him now.\n\nHe grabbed her bra and ripped it open seeing her perky breasts there in front of him as he rubbed the blood all over her chest. She grabbed his pants and tried to open them as quickly as possible shoving her hands inside and caressing his cock. He moaned as well enjoying her touch before she pulled his shirt open and rubbed her hands all over him. Be moved his hips and slid his cock inside her as she let out a yell and wrapped her arms around his head almost shocked by how good it felt.\n\n\"Holy FUCK! don't ever stop!\" She said as he drove himself inside her.\n\n\"Do you want more my love?\"\n\n\"Oh fuck yes, give me all of it!\"\n\nGabriel continued to thrust his hips before he bit his bottom lip drawing a little blood and looked down at the beautiful woman writhing beneath him. A part of him felt that he shouldn't do this but he knew it was what she wanted. It would awaken her primal side and make her the woman she wanted to be who could have any man she wanted. He didn't give it much thought when he pressed his lips to hers letting his blood drip into her mouth and down her throat letting it change her and corrupt her, letting her become the goddess he saw her as.\n\nEmily began to feel stranger than before like her senses were sharpening. Everything felt better even the pleasure from his cock sliding inside her. His touch, his kiss, his scent, everything was so much better and clearer as hr continued to thrust. Her eyes began to change to a reddish color as she stared up at him. Her fingernails became sharper as she scratched his back and sprouted two fangs. Her whole body felt better as she approached orgasm feeling amazing. Gabriel took his finger and sliced a small part of his neck letting blood drip and invited Emily to bite him. \n\nShe didn't know if she was dreaming or not, she wasn't sure what was real anymore but she felt incredible and wanted everything he had to give her despite her not feeling like herself. She felt his cock inside her bringing her to the peak of sexual satisfaction as she grabbed his hair and scratched his back enjoying everything happening to her. It did not take long before she opened her mouth and dug her fangs into his neck as they both came at the same time sending waves of orgasmic delight through them both. She sucked his blood letting it fill her and change her even further making her into a blood drinking sexual beast who could do whatever she wanted. ",
        "Emily let go of his neck and screamed out her lust as she felt his seed fill her insides. She continued to move her hips letting his cock hit every sweet spot over and over making the pleasure last as long as possible as her eyes were now solid blood red and blood dripped from her mouth as she scream like a demonic banshee. She was not sure how long it all lasted but everything suddenly went black and she was asleep.\n\n-----------\n\nThe next morning Emily was lying in bed tucked in comfortably clean and relaxed. She heard the door open as Angel came walking in and opening up the curtains letting the sunlight shine in. Emily covered herself as it bothered her more than usual. It didn't hurt but it just made her feel uncomfortable.\n\n\"Rise and shine sleepy head, it's my wedding day!\" Angel said all chipper.\n\n\"Ugh, get married another day, I'm sleeping.\"\n\n\"Ha, come on, we have a lot to do.\"\n\n\"Okay, just give me like 5 minutes and a shower.\"\n\n\"Sure thing, but come on get excited, Jason's going to be there, you don't want to miss that.\"\n\n\"You are the only woman I know who would try to hook your best friend up with your own brother.\"\n\n\"I know it's weird, but you two are so into each other and I'm sick of not seeing you two finally get together.\"\n\n\"One dance, that's all I can promise.\"\n\n\"Sure, now get showered and meet me at my room.\" Angel said before she left the room.\n\nEmily felt tired and drained as she rolled out of bed and got into the shower. She didn't see any blood stains on her or any bite mark anywhere either so she started to assume it was all a dream. She felt like crap but assumed that was from drinking and partying so in her mind she was fine and shrugged it all off. She climbed out of the shower and dried herself off before getting dressed.\n\nThe day went on without a hitch. She felt better so she did everything she was supposed to do and made sure Angels day was perfect. The ceremony was beautiful and she couldn't help but shed a tear as she watched her best friend marry the man of her dreams. She gave her toast and everything was great. The only thing that was off was she didn't have much of an appetite but didn't give that much thought either.\n\nAs the night went on she saw Jason at the bar talking to his sister who pointed over at Emily. She knew what she was doing so she figured it was as good a time as any to get it over with as Jason turned to look at her and smiled. He walked up to her and asked her for a dance which Emily agreed to and they head out to the floor.\n\n\"So Emily, you look beautiful this evening.\"\n\n\"Thanks, you don't clean up so bad yourself.\"\n\n\"Thanks, so what the hell do you think Angel is trying to accomplish here?\"\n\n\"No idea, I'd just go with it for now, she is the bride after all.\"\n\n\"Yeah.\"\n\nEmily danced but noticed something odd. He smelled very good all of a sudden which was odd because a moment ago she couldn't smell anything but suddenly he had a wonderful scent to him that she was enjoying. Jason noticed her lean in and smell him which he thought was a little strange.\n\n\"Do I smell good?\"\n\n\"Actually, yeah you do.\"\n\n\"Thanks, New cologne.\"\n\n\"I um, so um...\" she said getting confused as she could hear his heart beating which didn't seem right. \"Are you okay?\"\n\n\"I'm fine? Why do you ask?\"\n\n\"It's just, your heart is racing.\"\n\n\"Seems alright to me, are you okay?\"\n\n\"I... I don't...\" she said feeling very off all of a sudden.\n\n\"Okay well we are heading off.\" Angel said a s she walked over to say goodbye before heading to her honeymoon. \n\n\"Okay, you guys have a great time, I want to see pictures when you get back.\" Emily said giving her a hug before they took off.\n\nEmily still didn't feel right as she sat down. Jason didn't leave her side as he wanted to make sure she was alright. He took her hand which felt a little cold and so did her forehead when he checked that as well.\n\n\"Wow Emily you are freezing, let's get you upstairs.\" He said as they left the hall and he walked her back up to her room.\n\nOnce there she laid down in the bed and he took off her shoes and pulled the blanket up over her trying to warm her up. He want to start the shower for her to see if that would help but when he got up she grabbed his arm. He turned back to see what was wrong but she stared at him with a strange look in her eye.\n\n\"Emily, everything alright?\"\n\nShe traced her hand up his arm and pulled him down on top of her kissing him. Jason was shocked and confused but she sucked on his lips with a passion he was not expecting from her. As much as he wanted this he was still confused and concerned so he broke the kiss.\n\n\"Woah wait, are you alright?\"\n\n\"I want you!\" She said pulling him down again and kissing him.\n\n\"But you're sick remember and um...\" he stopped when he felt her skin and she was warming back up again to his surprise.\n\n\"Come here.\" She said pulling him down and rolling him over as she kissed him again laying on top of him.\n\nShe pulled off her dress as she began to straddle him getting him hard until she could feel him through his pants. Jason couldn't help but be turned on as he had wanted her for a long time and now that she was here in top of him grinding against him it was hard to fight it.\n\nShe unhooked her bra sliding it off and tossing it aside before lowering herself onto him sliding her hands under his shirt before ripping the buttons as she pulled it open. She started to kiss his chest and he enjoyed feeling her mouth explore his skin. At one point she even bit him to which he jumped a little but she just gave him a mischievous smile before continuing.\n\n\"Do you want me Jason?\" She asked rubbing her hands on her chest as she sat up.\n\n\"Oh fuck, you know I do, but this is just...\"\n\nShe opened up his pants and quickly grabbed his throbbing member before she started licking it like an ice cream cone. Jason never knew Emily was this kinky in the bedroom but was enjoying every second of it as she took his cock deep in her throat. She sucked him for a while but he felt something sharp in her mouth like her teeth were more pointed than usual. It didn't hurt but it was noticeable as she continued before she finally let go and slid her panties off before climbing back on top of him.\n\n\"This was always going to happen Jason.\" she said as her eye's didn't seem normal anymore.\n\n\"Emily, your eye's, what's wrong with you?\"\n\nEmily lowered herself on to his cock letting it slide inside her with ease. Jason felt her pussy tighten around his member as she began to ride him. His hands slid up her side before cupping her breasts before he pulled himself up and kissed her. She bit his lip a little before smiling again so her worked his way down her chest sucking on her nipples and tracing little circles with his tongue as she moaned. He looked back at her eyes but something was wrong. Her eyes were now red and yellow as she stared at him like a beast stalking her prey. She was beautiful and terrifying at the same time as he saw her sprout fangs like some sort of vampire. As he looked into her gaze he couldn't help but feel funny like he was falling under some sort of hypnosis. She was everything he had ever wanted and somehow even though she didn't seem human anymore it didn't matter to him.\n\n\"I can be yours Jason, if you want.\"\n\n\"What...what do you mean?\"\n\n\"You and me, I have always wanted you, give into me.\"\n\n\"Oh God, Yes!\" He said as he could feel his orgasm approaching.\n\n\"Give yourself to me, give it all to me!\"\n\n\"Oh fuck, it's yours, all yours!\"\n\nAs his cock began to twitch she sank her teeth into his shoulder which hurt at first but sent a wave of warmth through him that seemed to settle in his cock before he began to cum harder than he ever had before. His cock shot what felt like gallons of his seed into her as she sucked the blood from his shoulder. She let go and looked up as she came as well feeling an immense pleasure surged through her that was unnatural and amazing at the same time. She held him tightly not wanting to drink him dry as she wanted to keep him forever drinking his blood and letting him cum in her over and over again. She let him go and he fell back onto the mattress as she was licking the blood on her lips and letting his cock squirt a few more times before it stopped and she got comfortable next to him.\n\nEmily laid down laying her head on his chest as Jason felt weak and tired all of a sudden. She kissed him before getting comfortable again and rubbed her hand on his chest trying to relax him. \n\n\"Sorry about that, part of the game I'm afraid, but don't worry it will get better in time.\" Emily said making sure she didn't take too much from him.\n\n\"I... that was.\"\n\n\"Did you enjoy yourself.\"\n\n\"Very much.\"\n\n\"Good. Because there is more to come.\""
    ],
    "authorname": "maestro84",
    "tags": [
        "vampire sex",
        "vampire",
        "bite",
        "vampire turning",
        "blow job",
        "female transformation",
        "suck blood",
        "blood"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/liliths-emporium-vampire-party"
}
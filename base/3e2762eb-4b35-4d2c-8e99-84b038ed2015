{
    "title": "M Club Ch. 05",
    "pages": [
        "The first rule of M Club is: You don't talk about M Club. The second rule of M Club is: You don't talk about M Club. Third rule of M Club: No touching anyone but yourself. Fourth rule: No recording devices. Fifth rule: No clothing below the waist. Sixth rule: If this is your first time at M Club, you must masturbate. \n\n* * *\n\nDenby met Lisa at her locker after the final hour of school on Monday. Lisa looked like she was going on a hot date -- her red hair worn loose rather than the usual pony tail, a tight shirt that revealed her ample bosom much more so than was typically her style, and a touch more makeup. In a sense, she almost was going on a date. They both were. In less than half an hour, the two of them would be in the secret spot in the woods with Sean, probably all naked and masturbating together just like last Friday. That was the plan, anyway.\n\n\"We still on?\" Lisa sounded both excited and nervous, mirroring Denby's own feelings.\n\n\"Yup,\" Denby said, leading the way through the rapidly thinning crowds in the hallway. \"We'll meet Sean at his locker and then it's show time.\"\n\nAbout halfway there, Lisa broke the amiable silence that had settled between them. \"And you're sure you're still good with this? I'm not third wheeling between you two's private time?\"\n\n\"Relax,\" Denby said, taking her friend by the arm. \"Sean and I both want to do this. Not every time, but definitely some of the time.\"\n\nShe and Sean had been unable to get together again over the weekend due to a variety of conflicts, but they'd spoken and texted enough to know that both had been turned on by the whole three-way masturbation session. Denby was still surprised with herself, but couldn't deny how much she was looking forward to doing it again. A dam had certainly been breached within her.\n\nAs they rounded the corner, Dendy felt Lisa's step falter for a moment. She looked up and saw Andy, Sean's best friend, already at the locker. Andy was half a foot shorter, but thick and muscular. He had an easy-going nature, almost always smiled, and was considerably more outgoing than her reserved boyfriend. The two guys were deep in conversation, which halted when Andy saw the girls approaching. Sean looked up and waved.\n\n\"Does he know about...?\" Lisa's tone was difficult to read.\n\n\"I'm not sure,\" Denby answered the unfinished question. As they approached, though, the grin on Andy's face told her that he probably knew something.\n\n\"Hello ladies,\" Andy said, nodding at Denby before his eyes turned to and lingered on Lisa. Those words, spoken by many guys at Highland High, probably would have come out creepy. From Andy, they were friendly and sincere...with perhaps just a hint of suggestion.\n\n\"Hi Andy,\" Denby said. \"What's up?\" Hopefully nothing, she thought, eager to get on with things.\n\n\"Just stopped by to see if Sean had any plans this afternoon,\" he said, then turned to Sean. \"And now I see why you weren't telling me. You three, again? And not inviting me?\"\n\nWell, that answered that question, Denby thought. Andy's tone was mock hurt, but she could tell that underneath it there was probably some truth. Of course, if he did know what they'd done the other night, what eighteen-year-old guy wouldn't want to be invited?\n\nShe met Sean's eyes and could see the apology. Denby wasn't mad at him -- after all, she shared most everything with Lisa. She was more frustrated at how this might jeopardize things.\n\n\"Give us a minute, would you?\" Sean said to Andy, who nodded and slouched against the bank of lockers.\n\nSean motioned for the girls to follow him down the hall a short distance and they put their heads close together for a private conversation.\n\n\"Sorry about that,\" Sean said. \"I'd told him a little about what the two of us had done. Then he knew I was going over to hang with you two Friday night, so I kinda had to fill him in a little. He dragged the rest out of me. Not the details, but enough.\"\n\nLisa said, \"But he didn't know about our plans for this afternoon?\" \n\n\"No. I'd thought about maybe including him, but I wasn't sure I wanted to share and I certainly wasn't going to without running it by you two first. Little after the fact now, but what do you think? I'm still on the fence and I certainly wouldn't want him along if either of you felt uncomfortable.\"\n\nDenby looked at Lisa, trying to get a read on her friend. Denby's first reaction was that she didn't want Andy along. Yes, she liked him well enough, but she didn't know him quite like Lisa and Sean. Sharing something like that required a certain level of trust. But if Sean trusted him enough, that had to count for something.\n\nOn the flipside of the coin, she'd been hoping to find a way to get Lisa and Andy together for a while now. That way, the four of them could hang out more easily and Lisa could get a little dating experience before they started college in the fall. This would certainly be unconventional, but it would get them together.\n\n\"I'm kinda on the fence, too,\" she finally said. \"What about you, Lisa?\"\n\nLisa glanced over at Andy before turning back. \"Do you think he'd be pissed if we didn't invite him?\"\n\nSean shrugged. \"Pissed, no. Hurt, probably.\"\n\nLisa pursed her lips. \"I think we either have to invite him or call it off,\" she said. \"It'd be too weird with him knowing and being excluded. I don't want to screw up your friendship.\"\n\nDenby tended to agree with her friend's assessment, and suspected that Sean probably did as well by his expression. Yes, it would be a bit awkward, but so was their first time the other night and they got over that quickly enough. She was leaning toward the argument in favor, the longer she thought about it.\n\n\"Well, I'd like to think he'd get over it, but...\" Sean shrugged.\n\n\"Not that I'm trying to sway the vote here,\" Lisa said, blushing even before she could finish her thought. \"But, I've kinda had this fantasy about being naked in front of people. Lots of people. You two did a lot to satisfy that curiosity last Friday. This would probably be enough to cover the rest, even if I never did anything else for the rest of my life.\"\n\nDenby was a little shocked by her friend's admission. In that context, though, some of their three-way masturbation made more sense. Having participated, Denby was starting to see some of the appeal in exhibitionism. She also wondered if this meant that maybe Lisa was interested in Andy a little bit after all.\n\n\"Alright,\" she said. \"I'm okay with it. But I think we need to lay down some rules if we're going to do this.\"\n\nSean nodded. \"You have something in mind?\"\n\nDenby said, \"Yeah. How about you ask Andy if he wants to come while Lisa and I work them out.\"\n\nSean grinned. \"You two are full of surprises. I'll ask, but I'm pretty sure I know what he'll say.\"\n\n* * *\n\nThey reached the secret clearing in the woods unseen. Again, the weather was very cooperative for April -- warm, mostly sunny, and with a soft breeze teasing the unfurling leaves. The nervous tension had built the entire walk over, though, even with Andy doing his best to crack jokes.\n\n\"Okay, if we're going to do this, there are going to be some rules,\" Denby said, glancing between both boys. \"Lisa and I talked it over and we've come up with a few for starters.\"\n\nShe looked to Lisa and her friend started. \"First rule -- we never talk about this to anyone outside this group.\"\n\nSean nodded and Andy smiled.\n\n\"Sounds like Fight Club,\" Andy said.\n\n\"Huh?\" Denby lost him, though from Sean's reaction said he caught the reference.\n\n\"It's a movie,\" Sean said. \"In the movie, they have rules for their Fight Club. The first rule of Fight Club is, there is no Fight Club.\"\n\n\"Okay, sure,\" Denby said. It was fine with her, as long as it meant Andy wouldn't go blabbing about this to anyone else. The last thing they wanted was for all the other kids in school to know about their little group masturbation sessions.\n\n\"It's perfect,\" Andy said. \"This is our Masturbation Club.\"\n\n\"Our?\" Denby thought it a little presumptuous of Andy to assume he was a full member of whatever this was and he shrank at her response.\n\nLisa cut in, though, before Denby's concerns gained traction. \"We already kinda named it M Club. That way no one knows what we're talking about in case they overhear it.\"\n\nAndy looked at Sean. \"You didn't mention that part.\" Sean just shrugged.\n\n\"It wasn't anything super official yet,\" Lisa said. \n\nAndy said, \"Okay, so no telling anyone else. Got it. Anything else?\"\n\n\"No pictures,\" Denby said firmly, trying to reassert a bit of focus.\n\n\"No just watching,\" Lisa said. \"If you're here, you're participating.\"\n\nAndy agreed.\n\n\"And no hiding under your clothes,\" Sean added. \"Everything's out in the open.\"\n\nDenby nodded in agreement at the addition, even though he hadn't been part of her and Lisa's discussion on the rules. It didn't count if someone just stuck a hand down their shorts.\n\n\"Is that it?\" Andy had taken everything in stride. They hadn't, yet, asked him to agree to anything that wouldn't be perfectly sensible in their position.\n\n\"No touching anyone but yourself,\" she said. This was a rule she and Lisa had agreed upon specifically because of the addition of Andy. Denby hadn't minded the idea of her and Sean perhaps messing around a little in front of Lisa, or possibly even involving her friend in some way, but they didn't want Andy getting any ideas. Best to make it clear that nothing was allowed and leave no leeway.\n\n\"And,\" Lisa said, just before Andy could get a word in, \"first timers have to perform for us. Alone.\"\n\nThat definitely hadn't been something they'd discussed, but Denby immediately liked the idea. It put Andy on somewhat weaker standing -- saying he wasn't quite part of their group yet and had to follow what they said. It would prove that he was along to participate and not just to check out the girls.\n\nWith that last rule, Andy finally looked a little apprehensive. Lisa, on the other hand, had stated the final rule with a bit of suggestive and enthusiastic glee. Maybe she was a little interested in Andy, after all.\n\n\"No shame in backing out now, bud,\" Sean said, nudging Andy good-naturedly.\n\n\"No, no,\" Andy said. \"I'm still in. Just, you know, hoping I don't have any performance anxiety issues. Never done this with people watching before.\"\n\n\"I'm sure you'll be fine,\" Denby said. \"Sean didn't have any problems.\"\n\nAndy looked skeptical. \"Yeah, well, as I heard it, he had a bit more...inspiration.\"\n\nDenby had to concede that point -- she'd have never been as relaxed as she was had she been the only one performing in front of fully-dressed friends. To be honest, she'd have never even agreed to it.\n\nLisa must have had the same thought. \"Maybe we could help him out just a little bit,\" she said, looking to Denby.\n\n\"Shirts?\"\n\nLisa nodded. \"After he drops his shorts, though. No freebies.\"\n\nAndy sighed, then looked around the clearing. \"And you're sure no one will see any of this?\"\n\nSean chuckled. \"Well, can't be one hundred percent sure, but it's not easy to find. You saw how faint the trail back here was.\"\n\n\"There was a trail?\"\n\n\"Exactly.\"\n\nAndy seemed to accept that as good enough. \"And, I just do it here? Standing?\"\n\nSean dropped his backpack and pulled out a blanket, spreading it out on the grass. \"Standing, sitting, laying. Whatever suits your fancy. Just don't make a mess on the blanket.\"\n\n\"And I brought some tissues,\" Denby said, setting her backpack down beside Sean's and pulling out a small travel pack of tissues.\n\nAndy looked around uncertainly, but finally came to a decision. \"Guess I'll lay down. This is so weird.\"\n\nDenby could see the nerves in Andy's eyes when he looked around at them. She gave him a friendly, supportive nod when their eyes met, knowing quite well what was going through his head. He smiled ever so slightly at the gesture.\n\nHe took a deep breath, grabbed the waistband of his shorts, and pulled both them and his underwear down in one motion. Denby's attention involuntarily dropped to his cock, which appeared on first impression to be far smaller than Sean's. Sean, however, had been fully erect the first time she'd seen it, and even after masturbating he'd probably still been partially engorged. Andy, unlike Sean, didn't appear to have done any trimming down below, so everything was partially buried in a thick mat of dark brown curls.\n\n\"Whoa, there's a breeze,\" Andy said, clearing trying to ease his nerves. He tossed aside his shorts and sat down on the blanket.\n\n\"That's the first thing Sean said,\" Denby said. \"Feels nice, doesn't it?\"\n\n\"Kinda does, actually.\" Andy laid back and then glanced back up at the girls.\n\n\"Guess that's our cue,\" Lisa said to Denby. She lifted her shirt, revealing a cream colored bra that drew her full breasts together into an eye-fetching bit of cleavage. Denby couldn't help but think back to last Friday when she'd had the chance to touch and suck them.\n\nDenby removed her shirt, watching as Andy's attention quickly settled on the sheer bra she'd selected for today. Her nipples, already hard, were clearly visible. She liked the hungry look he gave her, one Sean mirrored when she glanced his way.\n\nAndy's hand snaked down to his cock and started giving it a few short tugs. Denby couldn't see any sign of growth yet, but she figured it might take him a bit to get over his nerves. From his reaction to the girls' shirts coming off, inspiration shouldn't be too hard to come by.\n\n\"Is that enough inspiration for ya?\" Lisa lifted her bra cups and wiggled them a bit. \"Or do you need a little more?\"\n\nDenby didn't mind if their bras came off. In her case, it wouldn't show much more than she was already putting out there, and she found herself enjoying the attention. She was pretty sure that Lisa wanted to show off a bit as well, and before long they'd probably all be naked anyway.\n\n\"Maybe a little more,\" Andy said.\n\nThe girls unhooked their bras simultaneously and, with a nod, dropped them in sync. Denby was slightly disappointed when Andy's eyes went to Lisa's chest for the reveal, but then again she was the single one. He was smart to do so, if he thought there was a chance at anything happening between the two of them. It didn't take but a couple seconds before he was checking her out as well, though, and he looked like a kid in a candy shop.\n\n\"Damn, you two are gorgeous,\" Andy said, gaze constantly jumping back and forth between the two of them. There was no pretense of looking anywhere but at their breasts.\n\n\"Told ya,\" Sean said, smiling. \n\n\"Very inspirational.\" \n\nAndy's tugging had become a bit more focused and Denby realized that his cock was indeed beginning to swell. Within half a minute, he appeared to be fully erect -- noticeably shorter than Sean, but thicker. The tip was darker and almost angry-looking.\n\nLisa took a seat on the grass beside the blanket, crossing her legs beneath her. She looked up at Denby and patted the ground beside her. Den took a seat and watched the show from much closer now. Sean, meanwhile, watched on from where he stood a short distance back.\n\nWhere Sean had pleasured himself with a bit of showmanship each time he'd done it for her, and again for both her and Lisa, Andy seemed intent on getting off as quickly as possible. He didn't play with his balls, nor did he do much to change his stroke pace aside from speeding up slightly the longer he went. His grip on his member appeared firmer, like an uncomfortable hand-shake, unlike Sean's which had been nimble. Did every guy do it differently? Denby figured they probably did. It hadn't taken long to see the different preferences she and Lisa had in their respective approaches.\n\nAndy unabashedly kept his eyes on the girls -- mostly their bared breasts -- while he worked his way up to a climax. As he got close, he rolled his head back and closed his eyes. Denby watched in eager interest, wondering how much might come out and how far it would shoot. Lisa, she noted, was similarly caught up in the show, and she was even playing with one of her breasts.\n\nAndy must have reached his point of no return. His breathing was labored and he pulled his shirt up with his free hand. With a grunt, his stroking hand abruptly stopped and a thick glob of semen squirted out, but only a couple inches at most before it coated the throbbing, red head of his cock and his hand. A quick tug yielded another spurt, much of this landing in the thick mat of pubes on up toward his navel. Several more, smaller amounts followed. All told, there was an impressive amount of cum, and Denby was surprised at herself when there was a slight impulse in the back of her mind that longed to reach out and dip her finger into the mess.\n\n\"Awesome,\" Lisa said. \"I guess this makes you part of the club.\"\n\nDen liked hearing that come from Lisa. It sounded to her like an opening into the two of them dating.\n\n\"Very nice indeed,\" Denby seconded. \n\nShe pulled out a tissue and handed it to Andy, who thanked her and began to wipe himself off. He looked both euphoric and slightly embarrassed, but overall seemed happy with the situation.\n\nAndy said, \"Gotta say, that was the strangest thing I've ever done. And pretty cool.\"\n\n\"Isn't it, though?\" Lisa said, rising to her feet.\n\nAndy nodded. \"Never thought I'd do that in front of an audience, aside from maybe a girlfriend. Certainly not a group of people. Or a guy. No offense.\"\n\nSean chuckled. \"None taken.\"\n\n\"What, are you saying the football team doesn't circle jerk each other in the showers?\" Denby gave him a big wink when she asked the question.\n\n\"No!\" Andy rolled his eyes.\n\n\"Well, shit,\" Lisa said. \"Thanks for bursting one of my bigger fantasies.\"\n\nAndy sat up, but didn't bother reaching for his shorts. \"Seriously? You fantasize about the guys jerking each other?\"\n\nLisa shrugged. \"Okay, maybe not. Although I might now. And I won't deny fantasizing about walking naked through the locker room after a game.\"\n\n\"Damn.\" Andy smiled. \"Making me wish the football season wasn't over. I might have been able to arrange something.\"\n\nLisa clicked her tongue. \"Too bad. Now, out of the way. It's our turn.\"\n\nAndy stood and vacated the blanket. Before he was even off, Lisa was pulling her shorts down, revealing a lemon-yellow thong that Denby didn't recognize. The tiny garment shouldn't have been sufficient to hide her friend's mass of red curls, so either Lisa had trimmed or shaved since last Friday. After making sure she had the boys' attention, Lisa revealed the answer -- a completely smooth-shaved pussy. Denby was a little surprised that her friend had gone that far, in a way one-upping her own tidy trim job. She was also slightly jealous of the rapt attention it had earned from the boys.\n\n\"Looks like you're missing something there,\" Denby said, forcing herself to make sure it came out good-naturedly.\n\n\"Didn't like the way I felt like a hippie last Friday,\" Lisa said, blushing slightly. \"Tried trimming and then shaving the edges. Then, before I knew it, I'd just kinda committed to doing the whole thing.\"\n\n\"Sexy,\" Andy said, staring.\n\nSean, to his credit, merely looked without offering any opinion.\n\n\"And itchy as fuck,\" Lisa said, frowning. \"It felt so nice and smooth when I first did it, but then the next day...ugh!\"\n\n\"So you don't recommend it, then?\" Denby had been considering going all the way herself.\n\nLisa shrugged. \"Think I'll keep it for a while. From what I read, it'll ease up as I get used to it. Just gotta keep it shaved and it should be fine. Already a little bit better.\"\n\nDenby knew she'd be thinking about it as well, now. She didn't want to be seen as copying her friend out of peer pressure or just to keep up, yet she also wanted to be as attractive in Sean's eyes. Most porn seemed to suggest guys liked seeing a woman smooth and bare down there. Sean probably didn't mind too much one way or the other -- it wasn't as if he was allowed to lick her pussy yet. Maybe they could talk about it in private later.",
        "\"You two joining me, or are we taking turns?\" Lisa looked between Denby and Sean as she settled back on the blanket.\n\n\"Yeah, I'll join ya,\" Denby said, slipping off her shorts. Sean shed his shirt, so she figured he preferred to play along at the same time rather than by himself afterward.\n\nDenby hadn't been too self-conscious about revealing her breasts to Andy, perhaps since she was already used to guys sneaking peeks at her chest all day long. Revealing her pussy, though, even after Lisa had gone first, made her nervous. She was tempted to turn her back to him, but what was the point? He would see her once she was on the blanket and playing with herself. That was the whole point -- watch and be watched. He'd been a good sport and showed off for all of them. He'd also promised to keep this within their own little group.\n\nTaking a breath and resisting the urge to turn away, Denby slipped her panties down to her ankles. Rather than look away, she watched Andy's eyes as they dropped to her crotch. He looked without leering and smiled politely at what he saw. She felt a bit of relief -- one more barrier down and the world was still turning.\n\n\"Very nice,\" Andy said.\n\n\"He means to say you're sexy as hell,\" Sean said, nudging Denby. \"But he's smart enough not to do it while I'm here.\"\n\nDenby blushed a bit, but liked hearing Sean talk about her like that.\n\n\"What he said,\" Andy said, grinning.\n\n\"Of course she is,\" Lisa said, patting the blanket beside her. Denby sat beside her friend, reassured by the close proximity.\n\nSean stripped out of the remainder of his clothes, revealing a partially erect cock. Denby had to assume it was awkward for him to be not just naked but aroused in front of his friend. She'd certainly gone through many of those feelings the other night at the sleepover. At least he had the advantage of going after Andy had already broken the ice.\n\nDenby realized it would be tight on the blanket with the three of them. Should she offer to have Sean lay between the two of them? Or should she be in the middle? Did he even want to lay down or do it standing up like the last time they'd been here? She felt too uncomfortable still to even ask.\n\n\"Want me to skootch over?\" Lisa asked, clearly thinking along the same lines.\n\n\"Nah,\" Sean said, kneeling down on the edge of the blanket by the girls' feet. \"I think I'll just stay here, so I can enjoy the show. Can't see as much if I'm laying down.\"\n\n\"Works for me,\" Lisa said, laying on her back. \"Guess we can see you better, too.\"\n\nDenby began to lay back, but then remembered she brought her vibrator along. She had tucked it into her backpack, intending to use it as was her typical approach to masturbation. While she'd already told Sean and Lisa as much, she suddenly felt a bit of reservation about doing so in front of Andy. Was that going too far?\n\nShe took a deep breath. Get a grip, girl. Everyone was here to have fun and break down some barriers in the process. Andy was being cool with everything and she trusted the other two. She reached for her backpack pocket and retrieved \"Fred\" -- a small, pink vibrator with a slightly bulbous tip, narrow mid-shaft, and white end where the buttons and battery access could be found. She had selected it primarily for its advertised \"silence\" as well as the shape that was suitable for either clit or g-spot stimulation.\n\n\"Ah, you remembered your other boyfriend,\" Lisa said, giving her a wink. \"Wish I had one.\"\n\n\"You could just go buy one,\" Denby said, settling back on the blanket. She noted that Sean was watching her and Fred intently, as he had only heard about the toy and never seen it.\n\n\"I can't order one without my parents finding out and I'm too embarrassed to go into a shop,\" Lisa said. \"At least you had your sister.\"\n\nDenby remembered that little episode a couple months ago. Posey, her three-year older sister, had practically dragged Denby down to the adult toy shop on her eighteenth birthday, insisting that every girl needed a toy or three. It had been a very eye-opening experience for Denby, who'd managed to go from mortified to almost comfortable by the end of it. The two employees in the shop had both been women and were exceedingly open, polite, and helpful. Posey had been shockingly revealing with her own experiences, delving into areas they had never discussed before. In the process, Denby learned that mom had asked the same thing of Posey -- that she not have sex until after high school -- and that her sister had also followed through and had been thankful for it. \n\n\"Maybe the two of us can go together some time,\" Denby said, knowing full well what it meant to have an experienced party along.\n\n\"Maybe,\" Lisa said, still sounding slightly uncertain.\n\nDenby noticed that their conversation was clearly having an effect on Sean. His erection had gone from partial to full. He was definitely thinner than Andy, but had a good inch or more on him in length. Having no experience with penetration, she had no idea what the difference would feel like.\n\nAs her thoughts bounced between comparing the two guys, she glanced back at Andy, who had moved around to stand slightly behind and to Lisa's side of Sean. He seemed to have been just as absorbed by their talk of shopping for sex toys, as his cock was already starting to come back to life mere minutes after having climaxed.\n\nDenby, laying back on the blanket, shook her head in amused disbelief. Half a week ago, she'd just been excited to have a little time for a private make out with Sean, a chance to let him play with her tits where it wasn't just a hand over or under her shirt. Somehow, that had turned into four friends, buck naked in a public park, masturbating in front of each other. Most impossible of all, she was more excited than terrified by it.\n\nLisa, laying close enough that her arm just brushed against Denby's, started playing with herself. Den couldn't see too much from her angle, but Lisa was clearly rubbing her hands all over -- breasts, tummy, upper thighs. Seemingly everywhere but her pussy was getting gentle caresses.\n\nSean, kneeling at the girls' feet, gave his cock a couple tugs, perhaps increasingly comfortable since Andy wouldn't see much of him from where he stood. His eyes bounced back and forth between the two of them like he was watching a tennis match. Den felt no jealousy for the portion of his attention given to her friend. If anything, she wished she could trade places with Sean and be the one with a clear view of both.\n\nDenby rubbed her fingers over each of her nipples, bringing them fully aroused. She let her legs part slightly and grinned at the whiplash response it evoked in her boyfriend. She turned on Fred to a low power and slid the bulbous tip of her vibrator along the length of her outer labia, first one side and then the other. She closed her eyes as the familiar hum triggered a soft wave of euphoria that washed through her entire body.\n\n\"I've died and gone to heaven,\" Andy said. Denby cracked her eyes enough to see his stroking his thick cock while staring at her. She was acutely aware of how exposed she was to him, to both boys, yet no longer cared. Knowing the effect she had on them only fueled her own arousal.\n\nDenby continued to work Fred all around her pussy, repeatedly passing over every spot save her clit. She could tell from the feel that she was dripping wet and it wouldn't take much to push her entirely over the top. Difficult as it was, she wanted this to last.\n\n\"So much better with an audience,\" Lisa said, her voice ragged with heavy breathing. \"And a show.\"\n\nDenby turned to Lisa and watched the blissful expression on her face. Lisa's mouth was open and the tip of her tongue brushed across her lips. Den found herself wondering what it would be like to kiss those lips, softer and fuller than Sean's. She'd already licked and sucked Lisa's nipples. Was a kiss that much different? On one level, she knew it was -- the nipple play had been purely physical pleasure, whereas a kiss could carry other connotations. But they were friends, and good enough friends to masturbate together. She didn't know what to make of her feelings. The rules of the club were clear, though -- no touching anyone else. What she and Lisa had done the other night was, well, not official club business and before the rule was established. She laughed at herself for the mental hoops she was putting herself through to justify it, regardless.\n\nDenby looked back and Sean and saw the unabashed lust in his eyes. He was stroking at a quick pace, now -- one she recognized as working toward a climax, but one not yet imminent. She gave him a playful wink and then slid the bulbous tip of Fred inside her pussy. The vibrations, inside, gave her a whole new level of pleasure and she let out a small gasp.\n\n\"Damn,\" Sean said. \"I've never been so jealous of a piece of plastic.\"\n\n\"No shit,\" Andy added.\n\nDenby blushed a little at their comments. Andy, whether he realized it or not, was kinda implying a desire to fuck her. Maybe not the smartest thing to have said in front of Sean, or if he was hoping to get anything going with Lisa.\n\nWith a practiced tap on the end of her vibrator, Denby bumped up the vibration intensity a couple notches. The energy was focused on her g-spot and she knew it wouldn't take long now to reach a satisfying orgasm. While still playing with her nipples, she worked Fred around her g-spot and then slipped it back out to tease her clit directly. That caused her to moan out loud. She didn't care.\n\n\"Definitely a vibe kinda girl,\" Lisa said. There was a strained groan to her voice, and Denby could hear the rapid, wet pulse of Lisa's fingers working herself over. \"Okay, I'll let you take me shopping.\"\n\nDenby smiled, but was too engrossed in her own building orgasm to say anything in response. She continued to alternate Fred's attention between her clit and her g-spot, until reaching the brink. At that point, Fred was relegated solely to g-spot duty while she used her other hand to rub her wet nub. Within seconds, her body exploded, every muscle going taut and her back lifted clear off the blanket. Incoherent moans and gasps escaped her mouth.\n\nThe orgasm lasted as long as any she'd ever had before. When she was finally able to take a breath, Denby forced her body to relax back onto the blanket. Fred was dialed down and then off, and finally withdrawn entirely.\n\n\"Oh, fuck,\" Sean said, his breathing fast and shallow. Denby recognized the imminent look on his face, his hand sliding back and forth in a blur. With one last grunt, he came. The spurt landed on her hip and thigh, causing her to start. She had forgotten that, from this position, Sean didn't really have a \"safe\" place to cum. It didn't freak her out, her first direct contact with his or any guy's ejaculate, but it had come as a surprise. At least it had landed on her and not Lisa. A second, smaller spurt also landed on her leg and probably the blanket as well.\n\n\"Shit, sorry,\" Sean said when he was able to speak. He looked genuinely apologetic as he glanced down at his mess.\n\n\"It's okay,\" Denby said, assuring herself as much as him.\n\n\"It's almost rude not to cum on your girl.\" Lisa barely managed to get the words out between her heavy breathing. She clearly had watched it happen all without breaking her own stride.\n\nDenby was well aware that some guys liked to cum on their girl. Maybe as many girls liked it as guys, though she doubted that was the case. It was pretty harmless, she reasoned, and the visual proof of Sean's interest in her. Seen in that light, she found herself warming to it.\n\n\"At least you hit me and not Lisa,\" Denby said, propping herself up on her elbows to get a better view of the gooey mess, as well as Lisa's frantic masturbation.\n\n\"I wouldn't have kicked him off the blanket,\" Lisa grunted. \n\nDenby wondered at that. It sounded like a veiled suggestion that Lisa would like Sean to cum on her. Maybe that was more of a fantasy for her friend than it had ever been for her.\n\n\"You looking for some?\" Andy, still standing a short distance behind Sean, was now jerking himself at a much faster pace.\n\nLisa's pace faltered for just a moment before she was right back and rubbing one hand across her clit while one or more fingers from the other were buried inside her. \"Maybe next time,\" she said. \"I wouldn't mind seeing how far you can shoot, though.\"\n\nIf Andy was disappointed, he hid it well. He did shuffle a bit over closer to Lisa's side of the blanket.\n\n\"Sure thing,\" he said. \"But since this will be my second time in about fifteen minutes, I'm not promising much.\"\n\n\"Noted.\" Lisa said before moans took over. Within moments, she reached her own climax, gasping and thrashing about on the blanket. Everyone was quiet as they watched, enraptured. Denby, having seen Lisa orgasm a couple times already, was still fascinated at the way her body shook and the wild expressions that crossed her face. Was that how she looked during her orgasms?\n\n\"God damn, that's hot,\" Andy said, echoing everyone's sentiment. \"I'm almost there.\"\n\nDenby's attention shifted from Andy for only a moment when Sean's hand brushed along her leg. The intimate gesture felt super-charged in the electric atmosphere of their hidden clearing. His eyes met hers and he gave her a wink.\n\nThey both turned in time to watch Andy's second climax. This time, watching him stand side-on, Denby noted how he flexed his tight butt and arched his back. Even the muscles in his arms and shoulders and chest all flexed as well. The orgasm took his entire body and another glob of cum shot out, arcing across the lush grass and landing several feet away, not all that far from Lisa's head. It was less impressive in distance than what Sean had done for her previously, but like he said, this was his second orgasm in quick succession.\n\nLisa clapped her hands. \"Nice!\"\n\n\"You inspired me,\" Andy said. \n\nIf Lisa's fair skin hadn't already been flush from arousal and exertion, Denby suspected she'd have been blushing. It was clear Andy's compliment flattered her, yet also made her a bit uncomfortable. Later, she'd have to ask Lisa about her thoughts on Andy, especially after today.\n\n\"Tissue?\" Sean looked to Denby.\n\n\"Yes, please.\" \n\nShe remained propped on her elbows while her boyfriend crawled over to her backpack and the pack of tissues that sat beside it. He pulled one out and began to wipe his mess off of her leg, working his way up from her calf to her thigh. On a wild impulse, she caught his hand before he reached the last glob on her hip, then dipped a single finger into it. It was still warm, slippery and a bit more watery than she'd imagined. Before she could talk herself back out of it, she brought her finger to her mouth and licked it clean. Scarcely more than a couple drops made it to her tongue, yet she could clearly taste him -- slightly salty and something she couldn't quite place, yet mostly bland. Nothing to freak out about, to her relief.\n\n\"Yummie?\" Lisa rolled to her side, her intent gaze and wide grin making Denby feel self-conscious.\n\n\"It's okay,\" she said.\n\n\"Did you want any more?\" Sean looked both surprised and pleased.\n\n\"Not now, thanks,\" Denby said. \"Maybe next time.\"\n\nSean nodded and finished wiping up his mess. Denby was relieved that he hadn't waited any longer, partly out of fear that Lisa might have asked to try it. She wasn't sure she was ready to handle anything quite like that.\n\nTissues were handed out all around and everyone wiped up, some needing it more than others. Sean found and emptied a plastic bag from his backpack that they could use for trash. With that done, they all sat on the blanket, no one willing yet to be the first to suggest they should get dressed. Denby laid on her side, propped on an elbow and legs up against Sean's crossed legs. He lightly rubbed her legs with his hand. Lisa sat opposite Sean, legs folded under her, and Andy took the corner opposite Denby, sitting cross-legged like Sean.\n\n\"What happened to the no touching rule?\" Andy said, looking at Sean with a smile.\n\n\"I think that just applies to when we're actually, you know...\" Sean blushed a bit, but didn't remove his hands from Denby's leg.\n\n\"Agreed,\" Lisa said. \"I think it just means you're not supposed to be helping anyone out. Solo masturbation only.\"\n\n\"So, is this really going to be a club, then?\" Denby looked between the three others. \"I know we joked about it, but it sure seems like we're treating it that way.\"\n\n\"Sure, why not?\" Lisa said. \"Can anyone here say they're not having fun doing this?\" No one disagreed.\n\n\"M Club it is, then,\" Sean said. \"Membership, four.\"\n\n\"Thanks for letting me in,\" Andy said. \"It really was fun. Surreal, but fun.\"\n\nDenby said, \"And now we're balanced, boys and girls.\" She had liked outnumbering Sean with Lisa, but didn't mind Andy's addition, especially if there was a chance he could hook up with her friend.\n\n\"Do we have set meeting times?\" Andy said. Everyone shrugged.\n\n\"I think our schedules are a little too unpredictable for that,\" Denby said. \"Just meet whenever opportunity permits.\"\n\nLisa said, \"Do we all have to meet together? What if one of us can't make it?\"\n\nDenby had trouble picturing herself playing without Sean being there. But if they kept becoming comfortable with one another, maybe it wasn't that much of a stretch.\n\nSean shrugged. \"I'm good with however many.\" After exchanging looks all around, no one objected.\n\nFor a little while, they continued to chat, though the conversation shifted away from club matters to the usual school stuff -- classes, sports, and gossip. Denby felt a lull in the conversation that led to unanimous move to get dressed and head home for dinner and homework. There was some general reluctance and even jokes about not wanting to have to get dressed, but all in all they were in good spirits and she felt closer to all of them than she ever had before. Even Andy.\n\n\"Next meeting?\" Lisa asked as they hiked out of the park.\n\nThey compared schedules and decided that Thursday worked best for everyone. Wednesday was clear for all but Andy, yet no one suggested they should meet without him even if Denby thought it. Now that he was part of the group, it felt wrong not to include him...at least for the near future.\n\nSean walked Denby to her house after the others split their separate ways. Hand in hand, they strolled slowly and with few words spoken between them. She didn't mind, as his touch spoke volumes.\n\n\"You're still okay with this?\" he said, just before they reached her house.\n\n\"Yeah. Surprisingly. You?\"\n\n\"I wasn't sure about bringing Andy in, but yeah, I'm good. Hope he and Lisa can maybe hook up now.\"\n\n\"Me too. Don't want to push her, of course.\"\n\nHe nodded. \"We'll see.\"\n\nWe'll see, indeed. Denby couldn't quite shake the notion that things wouldn't work out that easily. "
    ],
    "authorname": "WatchingCloud",
    "tags": [
        "masturbation",
        "group",
        "woods",
        "club",
        "18-year-old",
        "friends",
        "exhibitionism",
        "exhibitionist",
        "first taste",
        "vibrator"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/m-club-ch-05"
}
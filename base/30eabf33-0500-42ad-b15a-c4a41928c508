{
    "title": "Boss Nanny Ch. 10",
    "pages": [
        "Matt laughed so hard on the way home he almost crashed, twice. If only he could be more like them when he drank; happy, funny, and everyone's best friend.\n\nSeamus's friends spent the entire drive hanging out the window, yelling at unsuspecting bystanders. 'I LOVE YOU MAN!' 'YOU'RE AMAZING!', 'HOW MUCH FOR YOUR JACKET?!'. It was so different than drinking with his friends.\n\nBetter. It was so much better.\n\nThey were almost to the loft, and Matt was still smiling when Seamus reached across the console and squeezed his knee. \"Did you have fun?\"\n\n\"Yes, it was awesome. I was nervous at first because they were a little intimidating--but actually, they were cool.\"\n\n\"I agree. I'm glad you had a good time.\"\n\nMatt glanced over. \"I'm sorry for going to the bar. I was feeling overwhelmed and needed a quick breather. I should've said something, but I honestly didn't mean to be gone that long. We got to talking and I lost track of time.\"\n\n\"I was worried you weren't having fun.\"\n\n\"I was nervous, for sure, but I didn't mean to disappear. That was an honest mistake.\"\n\n\"Yeah?\" Seamus slid his hand from Matt's knee to his thigh.\n\nBy the time they got to the loft, he had Matt half stripped and littered with tomorrow's hickies. Seamus had Matt pressed against the wall and was devouring his body.\n\nMatt tilted his head. Seamus dove in. \"You turn me on.\"\n\n\"Yeah?\" Matt fisted Seamus' hair and moaned. Those lips felt so good.\n\nSeamus finished ripping off Matt's shirt, then shoved his pants down and grabbed Matt's hard dick.\n\nSeamus dropped to his knees and licked the crown. \"You're so big.\"\n\nMatt tightened his grip. No blowjob compared to what Seamus was capable of. The way he used his tongue and the right amount of suction and enthusiasm brought Matt to the edge every time.\n\n\"Close. Gonna come. Oh god, yes.\"\n\nSeamus wasn't about to be outdone. He slipped a finger between Matt's cheeks, applying enough pressure to send Matt into a freefall until he came deep into Seamus's throat.\n\nSeamus took it all, licking every last drop until Matt couldn't take it and slumped against the wall with his legs spread.\n\nRecovering first, Seamus stood and held out his hand for Matt's. \"You're not done yet.\" He pulled him up, stripped naked, and walked to the bedroom. Matt threw his head back and groaned. Seamus was too perfect to resist, even if he did just cum hard enough to launch a rocket into space. There was no resisting the redhead with a tight ass and trim waist. If Seamus wanted more, Matt was going to give him whatever he wanted.\n\nSeamus crawled on the bed, tossed the essential items toward Matt, then looked over his shoulder and smiled.\n\nMatt could see it, the darkness in his eyes, not from lust but insecurity. He hid it well, but now that Matt knew what to look for, he couldn't miss it.\n\nHe nudged Seamus on his back, then slowly crawled over him. \"There's something we haven't discussed and it's bothering me.\"\n\nSeamus swallowed hard but otherwise maintained his composure.\n\n\"I assume because we're dating, that we're exclusive? I haven't had healthy relationships before and I know I didn't do things right, but I know what I want with you. I absolutely don't want to see other people. Just you and me. Tell me we're on the same page?\"\n\nSeamus' eyes regained a bit of liveliness they'd been missing all evening. \"Yeah,\" he said. \"I'm pretty sure we're on the same page.\"\n\n\"Pretty sure?\" Matt raised his brow.\n\n\"Maybe you should show me what you can give me that no one else can.\" Seamus wrapped his legs around Matt's waist, making him laugh. He loved this about Seamus..\n\nMatt ran his finger across his body and Seamus smiled slyly. \"Is this all you got?\"\n\nIt wasn't. Matt rolled on to his side, propping himself on his elbow, and continued to trace Seamus with his finger. He grazed the hair on his tummy, across his abs, around his belly button, then over the sexy v-lines. Seamus was hard. His cock hovered over his pelvis, waiting to be touched.\n\n\"Excuse me for admiring you, for wanting to imprint every inch of your body in my head so when I go home, I can remember you just like this.\"\n\nThere was no arguing that. Seamus let Matt touch and feel his body. Let him explore every inch. Whatever Matt needed to do, Seamus let him do it. By the time Matt finished with his fingers and started exploring Seamus' cock with his tongue, the man was a mess. And when Matt told him to roll over, Seamus almost fell off the bed doing so.\n\nMatt was going to miss being with Seamus every day. No one had ever made Matt feel the way he did. And Matt was slowly coming to terms with the fact that Seamus felt the same.\n\nMatt licked down his spine and didn't stop until Seamus was cursing and moaning. He quickly entered Seamus, slow and steady until every inch of him was buried. He kissed and nipped his neck and shoulder. No man had ever tasted so good.\n\nNot being able to take anymore, Seamus slammed his fist into the mattress and pressed back.\n\nMatt pressed Seamus down as he moved in and out of him at his own pace. \"I won't be bullied.\"\n\n\"I want it harder.\"\n\n\"And I want to last. I want to put you into memory.\"\n\nSeamus might've wanted Matt to fuck him hard, the way he loved it, but he also wanted what Matt was giving. He wanted Matt to remember every inch of his skin and the way he felt and tasted. He wanted Matt to remember only him. He didn't want to give Matt a single reason to wander over the summer.\n\nMatt rode Seamus until he was sweating and screaming under him. When Seamus came, his whole body tensed and shuddered.\n\n\"Sex is so fucking good with you,\" Seamus said through labored breaths.\n\n\"You probably say that to all your boyfriends,\" Matt joked as he curled into Seamus's side, resting his head on Seamus's broad shoulder, and snaking a hand over his toned stomach. Yeah, they should clean up, but sometimes living in the moment is sweeter.\n\nAfter a moment of basking in the afterglow, Matt squeezed Seamus's waist. \"You're my favorite boyfriend.\"\n\n\"I'm sure you say that to all your boyfriends.\"\n\n\"I'm serious.\" Matt raised on his elbow and looked down at Seamus. \"I've had more boyfriends than I care to admit, but none of them hold a candle to you. They were elementary, juvenile at best. They were about having someone to get off with. The emotional connection was nothing more than a pretty face and a hard dick.\"\n\n\"Are you saying I don't have a pretty face or a hard dick?\"\n\n\"Fuck you,\" Matt cupped Seamus's crotch, making him flinch. \"You have the prettiest face and the hardest dick. You're far and away the hottest guy who's ever let me talk to him. You're also the only boyfriend I've ever wanted to spend time with, that I enjoy watching TV with, and folding laundry for. I never pictured a future with anyone else. I've never respected someone the way I respect you.\"\n\nIt took a minute for Seamus to respond. When he did, it was a simple, \"I wish you weren't leaving.\" And it tore Matt apart.\n\n\"It will be two months, maybe less, and I won't be that far. An hour's drive? Three if I take the bus. Who knows, maybe it will be good for us? That's what they say, right? Distance makes the heart grow fonder?\"\n\n****\n\nThe rest of the week was all about Aidan's upcoming birthday party and Matt preparing to move, both to his dad's for the summer and his own apartment after that. He found a great two-bedroom apartment that was only a ten-minute walk from Seamus's loft.\n\nAidan still wasn't walking. He was standing more confidently but no steps. He was also talking more, kind of. Single syllables for the things he loved most. Baba and no were more and more common. Matt was working hard on his own name, but that damn t sound was difficult. Seamus's name was even harder.\n\nMatt sat on the couch, coaching Aidan. \"Mah-Tt.\" He'd already been at it for a while and Aidan's patience was wearing thin. When they both became frustrated, he moved on. \"Okay, Shay-mus.\"\n\nAidan brightened. \"Moos,\" the almost one-year-old said, though it was mostly moo with a light 's' sound at the end. Still, it was more than Matt got.\n\nSeamus, who'd been sitting in the chair on his phone, moved like lightning to Matt's side. If Aidan wasn't going to walk before they moved, hearing his name for real was the next best thing.\n\n\"Shay-mus,\" Matt repeated, patting Seamus' face for good measure, you know, just in case Aidan had no idea who watched him on most days.\n\n\"Moos,\" Aidan cooed, grabbing for Seamus and smiling.\n\nSeamus was beside himself. He stood Aidan on his lap so they were face to face. \"Moose.\"\n\n\"Moos.\"\n\nSeamus tossed Aidan in the air, making the tyke laugh. \"You said my name. You said my name!\" He shouted as he danced around with a laughing Aidan.\n\nMatt watched from the couch as Seamus and Aidan sashayed around the living room. \"Okay Moose, calm down.\"\n\nSeamus was on a high the rest of the night, making Aidan repeat his name until it wasn't fun anymore and he started crying.\n\nWhen they were lying in bed that night, after mutual blowjobs, Seamus straddled Matt.\n\n\"Why are you so set on Matt?\"\n\n\"Huh?\"\n\n\"Why do you want Aidan to call you Matt?\"\n\n\"Cause that's who I am.\"\n\nSeamus leaned down and kissed him. It was a you're-a-fucking-idiot kind of kiss, Matt knew it, but he accepted it anyway.\n\n\"You're his dad.\"\n\n\"I'm his brother.\"\n\n\"Yes, you're his brother, but you'll be the only father he knows.\"\n\nMatt cringed. \"It's just weird. I don't feel very dad-ish. I don't feel like I've earned the title.\"\n\n\"You took him in. You're sacrificing for him, raising him, loving him, teaching him to be a compassionate and loving man. You're going to provide a life and a future for him.\"\n\n\"That describes you more than me. I wouldn't have been able to do it without you, maybe he should call you Dad.\"\n\n\"I'm Moose, the boss nanny. My role is to support you and Aidan.\"\n\n\"Well, you should get an award for it. Like, best supporting actor or whatever the boss nanny equivalent is.\"\n\nSeamus kissed him again. \"Best role I've never had.\" He moved around, inadvertently lining Matt's cock between his ass and riding Matt innocently.\n\nMatt gripped Seamus's muscular thighs, forcing him to stop being dirty. \"I know what you're doing and it's not working.\"\n\nSeamus pressed on. \"You said I should get an award. I want my trophy.\" He reached under him and grabbed said trophy. It was corny but Matt laughed anyway.\n\nGiving up, Matt grabbed what he needed and presented Seamus with his award. The acceptance speech was long and mostly inaudible.\n\n****\n\nMatt was exhausted. He slept in his own bed for the first time since Seamus confessed his feelings, except he wasn't alone. Aidan was sprawled out next to him. In the last week he'd reverted back to his infantile sleep schedule. Thank god Matt didn't have work or class anymore, he wasn't sure he could manage that chaos again.\n\nWith one eye on Aidan, Matt slowly rolled out of bed. He couldn't afford to wake his brother and risk him being tired and cranky on his birthday. Once he was safely out of bed, he stumbled his tired ass to the kitchen.\n\nSeamus was standing at the coffee pot. One look at Matt and Seamus pulled another mug from the cupboard. Matt walked to Seamus, wrapping his arms around the man's waist and hugging him from behind. He smelled good; day old and sleepy, just the way he liked it.\n\nSeamus turned in his arms and hugged him back. After a minute, Seamus shifted and Matt cocked his head. \"Are you seriously getting hard right now?\"\n\n\"What?\" Seamus smirked. \"Not my fault.\n\n\"So it's my fault?\"\n\n\"Don't be so fucking hot in the morning.\"\n\n\"I look like I didn't get any sleep last night--because I didn't.\"\n\nSeamus pressed his hips forward. \"No sleep looks good on you. We should go to my room and get more no sleep.\"\n\nMatt laughed and pushed away. \"Not this morning cowboy. We have a birthday party to pull off.\"\n\nSeamus pulled Matt back for one more kiss then poured coffees. Twenty minutes later Matt heard Aidan wake. Aidan cried because he woke up alone. Then cried more when Matt picked him up.\n\nIt was going to be a long day.\n\nAnd it was. Aidan was in a terrible mood. No matter what Matt and Seamus did, Aidan wanted nothing to do with it. He did finally fall asleep, though...two minutes before they pulled into Dough Guppies for the party. Not even cake seemed to placate him.\n\nBrad laughed at Matt's growing frustration. \"Kids don't care how much time, energy, or money you throw at them. By nature, they're unappreciative little shits.\"\n\n\"Ah,\" Matt said as he cleaned cake off the floor from the little tornado's fit of fury. \"Thank you for the encouragement. Whatever would I do without you?\"\n\nBrad threw his head back and laughed, then walked around and picked up dirty plates and napkins. Thank god they had decided on a small party because Matt couldn't wait to leave. Except leaving meant he was leaving.\n\nThey loaded presents in the SUV and manhandled a very unhappy Aidan into his car seat. When they pulled away from the chaos that had been Aidan's first birthday disaster, Seamus reached over and grabbed Matt's hand.\n\n\"I need a nap,\" Matt sighed. \"What a fucking day.\" He usually watched his language, but honestly? Fuck Aidan. Plus, the one-year-old was almost asleep, anyway. Thank god. He couldn't deal with anything else.\n\n\"Aidan knows you're moving and he's not happy about it.\"\n\nMatt looked at Seamus and smirked. \"Someone's projecting.\"\n\n\"I'm advocating. Aidan's too young. He needs someone to speak on his behalf.\"\n\n\"Oh yeah? What exactly does he want to say?\"\n\n\"That he doesn't want to move,\" Seamus explained. \"The reason he hasn't walked yet is out of protest. How have you not figured that out?\"\n\n\"I didn't know you were bilingual. Since when did you become fluent in infant?\"\n\n\"Since I became the boss nanny.\"\n\n\"Do you give lessons?\"\n\n\"It just so happens I offer extensive private lessons and I come highly recommended. But I don't travel, so you'll have to stay local.\"\n\nMatt snapped fingers. \"Shoot, raincheck?\"\n\nSeamus didn't say anything, he just smiled though it didn't reach. Matt sighed and leaned back. \"Are you mad?\"\n\n\"Not at all.\"\n\n\"You're pouting.\"\n\n\"Since when does pouting translate to being angry?\"\n\nHe knew the truth. Seamus was upset that Matt was leaving, angry that Matt hadn't changed his mind, sad that their time living together had temporarily come to an end, and disappointed that Matt didn't seem to care about their pending separation as much as Seamus did.\n\n\"As excited as I am to go home and spend the summer sitting in the backyard with Aidan and cooking dinner with Dad, I'm dreading it just as much. I don't want to be away from you, but I also don't want to look back ten, twenty years from now and regret not spending this time with my dad, especially after losing my mom. I don't mean this as a dig, but what if we don't work out and I didn't go home? I would never forgive myself. This is precious time. I want it with you but I want it with my dad, too\"\n\n\"Fuck, I'm sorry. I'm over here being selfish, not considering how you might need your dad after the year you've had.\"\n\nMatt squeezed Seamus's hand. \"I do need him, but I need you, too. I'm sorry we haven't talked more about this sooner. I'm still learning how to be in a responsible 'adult' relationship.\"\n\n\"I'm learning, too.\"\n\nMatt scoffed. \"As if, you have all your shit together.\"\n\n\"Hardly.\"\n\n\"You kind of do, compared to me anyway. I feel like such a wreck all the time,\" he admitted. \"I don't say it enough, but I'm thankful for you. You do so much and you never ask for anything in return. I would have failed and moved back home if it weren't for you. Thank you.\"\n\nSeamus lifted Matt's hand to his lips. \"I'm happy to do whatever.\"\n\nMatt frowned as they passed the exit for home. \"Where are we going?\"\n\n\"I have to stop by the dealership. Shouldn't take more than thirty minutes.\"\n\nMatt was kind of excited to check the dealership out. He'd never been to one before. He bought and sold his only car on Craigslist.\n\nFifteen minutes later they were parked out front. Aidan was still sleeping, so Seamus carefully lifted him out of the car seat and draped him on his shoulder. The babe didn't even rouse. His little mouth puckered open when his cheek rested on Seamus's shoulder.\n\nThe place was bustling. Everyone watched with interest as they walked through the lobby. Months of Seamus bringing Aidan to work had brought a lot of questions. Now Matt was there. Judging by the looks and whispers, the work gossip was about to be kicked up a notch.\n\nHe didn't talk about work much, other than passing mentions. Matt wondered what he told people when they asked Aidan. Did they ask? Was there unspoken curiosity? Regardless of what they knew, it was obvious everyone loved Aidan. There were nothing but fond looks his way.\n\nSeamus stopped at the front desk where a guy held an envelope. He looked at Aidan and pouted. \"He's sleeping?\"\n\n\"It was his first birthday party today,\" Seamus smiled as he rubbed Aidan's back. \"He's pooped.\"\n\n\"Oh, happy birthday!\" the guy whisper shouted. As they left, he waved. \"Have a good day, Mr. Ryan.\"\n\nMatt followed Seamus out the side door and around back where the newer cars faded into pre-owned cars. They walked forever before finally stopping at a blue midsize SUV. Seamus pulled a key fob from the envelope and opened the door. He then gestured for Matt to take the front seat.\n\nMatt cocked his head in confusion. \"Are you trading the Suburban for this?\" It was nice but nowhere close to the suburban. Matt wasn't going to pout, but he would miss the car he'd come to love.\n\n\"No, this is yours. For the summer anyway.\"\n\n\"Come again?\"\n\nSeamus smiled and readjusted Aidan on his shoulder. \"You can't go away without a vehicle. This has too few miles anyway. Two months will do it good. When you get back, I'll put it back on the lot.\"\n\n\"Too few miles?\" He never heard such a ridiculousness before. People wanted low mileage cars.\n\n\"Yes. It has less than five-thousand miles. It will sell for the same price with five-thousand miles or twenty-thousand miles. I figured you can borrow it for two months, put some miles on it while visiting me. We'll make the same profit, only you won't be without a car for two months.\"\n\nMatt looked at the SUV again. It was smaller than Seamus's but bigger than those tiny compact things. It was surprisingly stylish with racks and a storage box.\n\nHe sat in the front seat. The inside was even better. Totally loaded; leather, navigation, sunroof, etc. Matt closed the door and rolled down the window, draping his elbow over the side. \"I feel like a soccer mom.\"\n\nSeamus laughed. \"I don't know about a soccer mom, but you do look like a hot dad.\"\n\nMatt still felt weird about being called a dad, but he took the compliment, anyway. He stayed in the car for another minute and allowed himself to get excited. It wasn't his to keep but it was still his for a while. Once Matt got a feel for his new ride, he got out.\n\n\"Are you sure about this? It seems insane.\"\n\n\"How do you plan on doing anything with Aidan?\"\n\n\"My dad's truck.\"\n\n\"And when he's working?\"\n\n\"I'll take him to work or just stay home.\"\n\nSeamus didn't say much, just shook his head and tossed Matt the key. That was that. They didn't even have to do any paperwork. All Matt could think about on the way home was how thoughtful and generous Seamus was and what the fuck had Matt done to deserve any of it. Seamus truly was in a league of his own.\n\n****\n\nAidan woke up just as ornery as he was before. It made packing Matt's things into the SUV difficult. Aidan wouldn't let Matt put him down, and Seamus wasn't exactly hustling to see them drive away.",
        "Matt sat in the driver's seat while Seamus buckled Aidan in the back. When Seamus was done, he leaned against Matt's window, resting his elbows on the car. \"You got everything?\"\n\n\"If I don't, I know where to find it.\"\n\nSeamus leaned in and kissed Matt. The grip on Matt's hair was rough but the kiss was soft and Matt's eyes fluttered even after Seamus pulled away.\n\n\"You'll call me when you get there?\"\n\n\"Yes,\" Matt smiled. \"I'll probably even call you on the road.\"\n\n\"Using the Bluetooth--\"\n\n\"Using the Bluetooth,\" Matt reiterated, rolling his eyes.\n\nMatt reversed out of the driveway and waved goodbye. He glanced in the rearview mirror a few times until Seamus was out of sight. Then he glanced at Aidan.\n\nHe had to do a double take. He swore Aidan was glaring at him through that little mirror Seamus set up.\n\nMaybe Seamus was right, maybe Aidan did know they were leaving.\n\n\"It's just for two months,\" he told himself more than he told Aidan."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "gay novella",
        "gay romance",
        "romance",
        "college",
        "drama",
        "college guy",
        "gay in college",
        "summer vacation",
        "summer break"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/boss-nanny-ch-10"
}
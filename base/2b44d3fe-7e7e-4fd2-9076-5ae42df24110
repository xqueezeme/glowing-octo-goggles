{
    "title": "Boss Nanny Ch. 12",
    "pages": [
        "Life as a twenty-one-year-old parent is weird. It's a funky stage between childhood and adulthood where you're both too young and too old. The complexities were a plethora of rabbit holes that were both too complicated and annoying to navigate.\n\nMatt listened to a podcast once that said the whole fake-it-till-you-make-it statement was an unhealthy cop-out. Something about not taking emotional responsibility or something. Matt couldn't remember all the details, only that he could use that logic to be a kick-ass young adult, a stellar student, a doting dad figure, and a respectable boyfriend if it killed him.\n\nSince college was out for the summer and he wasn't working until the fall, Matt had all the time to hone his dad skills. He wanted to be the parent Aidan needed and deserved. Since he wasn't bogged down with school and work, Matt could focus on Aidan, build their relationship, and learn how to be the best parent he could be.\n\nHe was also going to be the respectable boyfriend Seamus deserved. They had something good, and Matt would not let it get sabotaged.\n\nThat's exactly what he thought was happening. Seamus hardly texted or called the entire week after Matt visited. When they did talk, it was lacking. Matt worried he had royally fucked up. It's what he did to relationships.\n\nYounger Matt stood by and watched as his relationships burned to the ground, all while making it the other person's fault. He would not do that this time. It was time to use the big guns.\n\nHe'd tried to talk to his dad a couple times, but it was a lot harder than he thought. Brad rarely asked Matt invasive questions like 'are you dating?' or 'is there any boy trouble I can help with?'. There never seemed to be a good time to bring Seamus up. But if he didn't pull up his pants now, he'd miss his chance.\n\nMatt had just put Aidan down. It was now or never. He took a deep breath and marched down the hall with purpose. Brad was sitting on the couch, reading. Matt thought about snatching the book out of his hands, but that seemed a little dramatic. Instead, he sat down on the edge of the recliner and nervously rubbed his thighs.\n\nBrad glanced at Matt's strange behavior with a raised brow and slowly lowered his book. \"What's up?\" he asked, barley containing his smirk. Matt was not good at being subtle.\n\n\"Oh, nothing. What are you doing?\"\n\nBrad glanced at his book then at Matt. \"Nothing.\"\n\n\"Cool cool,\" Matt nodded nervously. \"So, are you seeing anyone?\"\n\nBrad eyed him suspiciously. \"Not currently.\"\n\n\"No dating?\"\n\n\"No, no dating.\"\n\n\"Have you seen anyone since Marcy?\"\n\n\"A date or two, no one steady,\" he answered. \"Why, do you have someone you want to set me up with?\"\n\n\"What? No! Gross. I was just asking. Trying to know what's going on in your life.\"\n\nBrad nodded, then looked at Matt like he was on to him. \"What about you?\"\n\nEven though he wanted his dad to ask this exact question, his heart started pounding. \"Well, there might be someone...\"\n\n\"How is Seamus?\"\n\nMatt deflated. \"How'd you know?\"\n\n\"The same way I knew you stole the rum from the liquor cabinet and that you drove my truck to the store before you had your license. You're not subtle.\"\n\n\"Oh.\"\n\nBrad discarded his book on the coffee table. \"So, what's going on between you two?\n\nMatt stared at his dad. How did he know something was wrong?\n\n\"You've been touch-and-go all week,\" Brad continued.\n\nAgain with the mind reading.\n\n\"Touch-and-go?\" Matt asked.\n\n\"Moody and broody.\"\n\nHe didn't think he'd been that obvious.\n\n\"Something happened when you and Aidan visited him?\"\n\n\"Oh my god, stop with the telepathy!\"\n\n\"I can't help it, you're a neon sign,\" he laughed. \"Out with it, tell me what happened.\"\n\n\"Long rated-R story cut short, Seamus might be but most definitely is in love with me and asked how I felt about not using protection.\"\n\nThere was a moment when Brad realized what this meant, that his only son was doing more than blowjobs. Not that Brad cared, but it's one thing to know penetrative sex is a possibility and a whole other to have it confirmed. Once he came to terms with the rated-R part, Brad looked sympathetic. \"Judging by the mooding and brooding all week, you don't feel the same?\"\n\n\"I really like Seamus but I'm not there yet.\"\n\n\"And you explained that to him?\"\n\n\"Yeah. I told him I jumped the gun in previous relationships and I didn't want to do that with him. I also explained that with everything that's happened this year, I hadn't thought that far in my head.\"\n\n\"Those are logical reasons. How does Seamus feel?\"\n\n\"Pissed. Offended. Angry.\"\n\nBrad cringed. \"Why do you think he felt like that?\"\n\n\"I don't know.\" Matt slumped back on the sofa. \"I'm out of my league, Dad. I'm doing the best I can while trying to do right by everyone. I know Seamus does so much for me and Aidan but I'm feeling like there are strings attached.\"\n\n\"How so?\"\n\n\"He was so pissed that I didn't feel the same. What? Am I obligated to love him because he makes life impossible to do without him? I'm not there, yet. We've only been dating for a few months and I have so much happening. Aidan changed everything for me. He's my priority. I don't know that I have the capacity to be in a relationship that is at that level. And of course he's at a different level than me. He was married, Dad! Mar-ried. That is intimidating! I'm not thinking about marriage, but I know he is, why wouldn't he be? He's already rounded that base with Kelly. But don't ask me questions about his marriage because never talks about it. Hell, I thought it was a good marriage until his friend suggested otherwise. I'm trying to piece it together while not prying. Lord knows he doesn't really tell me anything. And not just about Kelly. I didn't even know he had friends until I was meeting them! Why won't he share his life with me? How am I supposed to be in love with him when there is so much I don't know?!\"\n\n\"Oh Matt.\" Brad leaned forward and pulled an emotional Matt onto the sofa and into his chest. \"Can I tell you something?\"\n\nMatt nodded, pleading his dad for anything.\n\n\"First, dating is all about asking questions. It's about communication and learning as much as possible about each other until you're ready to take the next step or you realize it won't work. Seamus is ready to take the next step, but you're still at the starting line. I think a lot of what you two do revolves around you and Aidan, so it makes sense that Seamus feels like he knows a lot about you. It's time to turn the focus on Seamus. Get to know him. Ask him questions. If he doesn't want to share about Kelly or his friends, ask why. If he still doesn't want to talk, then see it for what it is, a red flag. But don't assume he doesn't want to share. I think he's busy trying to make sure everything is good for you Aido. And secondly, stop putting Seamus on a pedestal.\"\n\nMatt frowned. \"What are you talking about? I don't do that.\"\n\n\"You do do that. You think because Seamus is older and successful that you're not good enough. You need to get that garbage out of your head.\"\n\n\"I\u2014\" Matt stopped and thought about it. Yeah, he totally did that. His dad was right. Matt struggled with feeling like a child compared to Seamus. He was a child compared to Seamus.\n\n\"Ohhh.\"\n\n\"Yeah. I think you don't ask questions because you don't think you should. Do you like Seamus?\"\n\n\"Yes, absolutely.\"\n\n\"Do you want a future with him?\"\n\n\"Of course I do.\"\n\n\"Then you need to go to him, talk, ask questions, and get to know Seamus.\"\n\n\"What if he's fed up with me?\"\n\n\"What if he's not?\" his dad asked. \"You need to see yourself the way others do. You've always worked hard to get where you wanted to go. You have a detailed game plan, but you're also able and willing to flex when things change. College was your detailed game plan and Aidan is your curveball.\"\n\n\"What is Seamus?\"\n\n\"He's the R-B-I.\"\n\n\"You know I don't know sports,\" Matt groaned.\n\nBrad laughed. \"Seamus is the detail and the curveball.\"\n\nWell, if that wasn't a perfect statement, Matt didn't know what was. It described Seamus to a t. Still, Matt felt nervous. Anything could happen.\n\nBrad and Matt spent the rest of the evening on the couch. They talked about everything. By the time they went to bed, Matt felt good about going after Seamus.\n\n* * * * *\n\n\"I really appreciate you doing this for me, Dad.\" Matt stood at the sink and finished washing the bottles and sippy cups. His hands were red from the scalding water. A sign he hadn't reached total dad status yet. \"Is there a time you want me back on Sunday?\"\n\nBad sat at the dining table with a happy little blue-eyed brunette on his lap. \"I don't want to see you until you and Seamus have talked.\"\n\nMatt finished putting the drink ware on the dry rack and quickly dried his hands. He tossed the rag on the counter, then jogged over to Aidan and got down on his level. \"I'm going to visit Moose for the weekend. I'll be sure to bring you back lots of kisses, okay?\"\n\nAidan's eyes widened. \"Moose.\"\n\nBrad groaned. \"You shouldn't have done that.\"\n\nThat's when it all fell apart. Aidan was very displeased that Matt would mention Seamus, then have the audacity to leave and not take Aidan along. By the time Matt was packed and ready to go, Aidan was wailing in Brad's arms, screaming so hard his face was a deep shade of red-ish purple.\n\nMatt felt guilty for setting off the baby bomb. He gave his dad an anxious look. Brad shrugged it off. This wasn't his first rodeo. Baby Matt had put Brad through the wringer. \"Just go,\" he insisted. \"The longer you linger, the worse it will get.\"\n\nMatt tried to kiss Aidan goodbye but Aidan was pissed. He took his anger out by grabbing Matt's hair and screaming at a decibel so high that dogs across town started barking. It wasn't easy to pry angry little fingers off his hair. Once he did, he slipped out the door with a frown.\n\nHe would've taken Aidan but the whole point of this trip was to focus on Seamus. Aidan would be a distraction. Still, Matt felt guilty knowing Aidan was at home screaming. The look on Aidan's face as he left would haunt him for days to come. Pure heartache, rejection, and disappointment. Fuck, being a parent was hard.\n\n* * * * *\n\nMatt didn't tell Seamus he was coming. He debated back and forth until it was too late and he was there. He nervously stood at Seamus's door. He covered the peephole, then knocked. A douchey habit he'd picked up as a kid.\n\nHe watched as the shadow approached, then paused. When the door opened, Seamus was frowning, irritated that he couldn't see who was there.\n\nMatt laughed. \"Good to see you, too.\"\n\nSeamus's smile was tight with no teeth, but he opened the door and let Matt in. There was an awkwardness; do they kiss? Do they not kiss? Are they fighting? Should they be over it by now? Is everything good between them? Probably not.\n\nMatt would not let the awkwardness win. He leaned in and pressed his lips to Seamus.\n\nSeamus released a deep breath. \"I didn't know you were coming.\"\n\nMatt set his stuff down and walked to the living room. There was a half-eaten dinner plate on the coffee table and NCIS was paused in the background.\n\nMatt sat down on the sofa. \"I thought we could talk.\"\n\nSeamus was still standing by the front door, a little stunned that Matt had kissed him. He looked up and nodded, then nervously walked to the living room. As he neared, Matt continued.\n\n\"I've been thinking a lot since I was here last.\"\n\nSeamus had just sat down when he stood up again. \"Well, there's no need to draw this out.\" Seamus picked up his plate and started to the kitchen. \"You still have a few things here. You can grab them now or I can have them ready for you later. Aidan has a bunch of stuff, too. I assume you won't want my help anymore so I can get his things packed as well.\"\n\nMatt was off the couch in seconds and darted after Seamus. He slid between him and the sink, grabbed the plate from his hands, and slid it onto the counter. It took a second for Seamus to meet his eyes. When he did, the insecurity behind those brown eyes was alarming.\n\n\"What just happened?\" he asked in a very calm voice.\n\nSeamus tried to shake Matt off. \"I respect you and I love Aidan. A break up doesn't have to change that.\"\n\nMatt's heart was beating like crazy. Fear was making it hard to breathe. The week had been weird, but this was a whole new ballpark. \"Breakup? What in the world?\"\n\nSeamus watched him with dark, calculating eyes. So different from what Matt usually saw. Matt had never seen Seamus so blocked off.\n\n\"I saw it coming after your last visit. I figured it was just a matter of time.\"\n\nMatt closed his eyes and took a deep breath. He refused to overreact. He needed to get to the bottom of this.\n\nThey stood in the same kitchen they had shared countless meals together, laughed together, watched Aidan with gleeful eyes together. This conversation would either add to those memories or take away from them.\n\n\"Are you breaking up with me because of the condom thing?\"\n\nSeamus flinched. His face flooded with confusion. \"Aren't you breaking up with me?\"\n\n\"No!\" he exclaimed a little too loudly and with wild arms. \"I came here because I didn't want to screw things up with you.\"\n\nIt took Seamus a hot minute to process what Matt was saying. He rubbed his face then ran a hand through his hair. \"I thought you came here to break up.\"\n\n\"Is that what you want?\" Matt asked.\n\nSeamus shook his head. \"No.\"\n\n\"Then what the fuck?!\"\n\nPoor Seamus. He looked so beaten. Matt thought back to what Jay had said about Kelly. If Jay was right about Kelly treating Seamus poorly, that would explain so much.\n\nMatt cautiously wrapped his arms around Seamus. \"I've royally sucked at relationships in the past. I've been dramatic, selfish, and pretty terrible. I don't want to be that person with you. I came here because I want to figure out why things are weird between. I want to fix it and move forward. I absolutely don't want to break up. That's the opposite of what I came here for.\"\n\nSeamus sighed and wrapped his arms around Matt. \"I've been tearing things apart in my head.\"\n\n\"I see that. Can we please sit down and talk about it?\"\n\nSeamus led Matt to the living room. He laid on the couch and pulled Matt into his side. There was a minute of silence while both of them tried to figure out how to press forward.\n\nWhen Matt was sure Seamus wasn't going to talk first, he grabbed Seamus' chin and made the other man look at him.\n\n\"I want to start by saying that just because I'm not at the 'love proclamation' point shouldn't and doesn't diminish the feelings I have for you. I've been shitting myself thinking that you might not want to be with me because I wasn't at that level. It's not that I can't get there, because I see it happening, but I have so much on my plate right now. I want things between us to be unlike anything I've ever had before, and everything I had before was plagued by emotions that weren't real.\"\n\nSeamus nervously ran his fingers up and down Matt's side. \"I made a big move without a lot of legwork, but I know how I feel about you and I'm not going to apologize for it. With that said, I respect where you're at and I'm not mad about it.\"\n\n\"Then what happened?\" Matt asked. \"Because things went south pretty fast. I admit I had a baby freak out, but you totally shut down.\"\n\nHe desperately wanted Seamus to volunteer his life with Kelly. He was prepared to demand answers if needed. He was ready. All that bravado was unnecessary.\n\n\"I loved Kelly. I wouldn't have married him otherwise. But I was young and I let a lot of things slide. When you freaked out about not using condoms, it was like reliving my past.\"\n\n\"I want to know everything, please?\"\n\nSeamus frowned. \"There were two Kellys. The Kelly I fell in love with was incredible, easy to love, and easier to stay in love with. Then there was the Kelly who grew up never wanting for anything and never hearing the word no. His family had money, and with a gift from his parents, he made himself a small fortune for himself. As far as he was concerned, his money and status meant he could do whatever he wanted.\n\n\"I was a poor college student from a small town a thousand miles away. Kelly showed me a life I never thought I could have. The security he dangled like a carrot made it easy to look the other way. I told myself that he might've been sleeping with guys on the side, but I was the one he was sharing his life with. He might have worked late all the time, but it was me he came home to.\n\n\"I thought it would change after he proposed but it didn't. Every time I got frustrated, he would throw it in my face. He would remind me how it hadn't been a problem before, I needed to get over it, and he gave me everything I needed. We would fight, hard. After a week of silence, he'd apologize and I'd sweep it under the rug. The straw was finding him in our bed with the guy who cleaned cars at the dealership. That's when I asked for a divorce.\n\n\"When things were good between us, Kelly would tell me how secure I was and how my name was on everything. Still, I was prepared to walk away with nothing. I probably would have, but he died unexpectedly.\"\n\n\"How'd he die?\"\n\n\"Infidelity.\"\n\n\"What? How?\"\n\n\"Not sure exactly. He had no history of heart issues, but his ticker stopped while having sex with the carwash guy.\"\n\n\"It definitely fucks up your psyche when you're put through the emotional wringer for years, you finally stand up for yourself, then he dies while cheating on you. I was too embarrassed to share that part so I had to pretend like it never happened. I had to play the part of a sad, grieving husband. The guilt was enormous.\"\n\n\"Why the fuck did you feel guilty?\" Matt asked. \"He cheated on you, a lot I'm assuming.\"\n\n\"Because I asked for a divorce and then he died. That's hard to reconcile. I didn't love him anymore, but I thought, maybe I should since he died. It felt like I needed to let go of my anger and be the husband everyone thought I was. I felt like a phony. Then I had to deal with his parents and that only made it worse.\"\n\nMatt remembered Seamus saying something about them. It wasn't good. \"They challenged everything, right?\"\n\n\"Yes. True to his word, my name really was on his accounts and the businesses. Or should I say our accounts and our businesses? I'm sure he was in the process of cutting me off before he died. I was prepared for that. But fuck his parents for thinking they could do it.\"\n\nSeamus adjusted his position on the sofa. He was a lot more relaxed, but there was something bothering him.\n\nMatt waited him out.\n\nSeamus sighed. \"I tried to get Kelly to stop using condoms. It was my way of trying to force him into monogamy. He always refused.\"\n\nGod, everything made so much more sense. \"For the sake of communication, I want to make this very, very clear. The condom/commitment thing is not a reflection of my any extracurricular activity. I don't have a perfect past, and I've made mistakes, but I have never cheated on you. I say that with absolute\u2014\"\n\nSeamus covered Matt's mouth. \"I know. I just wanted you to know. You are nothing like Kelly, I don't compare the two of you, and I never thought you cheated.\"\n\n\"Never?\" Matt questioned.\n\nSeamus sat up so fast the room spun. \"I haven't. I swear.\"\n\nMatt put a calming hand on Seamus's chest and laughed. \"I only said that because it was brought to my attention that when I was at the bar being asked twenty questions about Jay from that one guy, you weren't handling it so well.\"\n\nSeamus rolled his eyes. \"There might've been a small part of me that didn't like it\u2014\"\n\n\"A small part?\"\n\n\"Okay, there was a big part of me that didn't like it. But it wasn't you. It was Kelly.\"",
        "\"Why didn't you say something then? You could've come to the bar and inserted yourself.\"\n\n\"I trusted you.\"\n\n\"Maybe, but in that moment you were struggling and I didn't know it. I hate that I didn't know. I would've understood.\"\n\nSeamus melted. \"Kelly isn't an easy subject. You talk about how terrible all your past relationships were, but you never married a narcissist. If you line us up side by side, your history is healthier than mine and that's sad. All these years later, I'm still struggling.\"\n\nMatt grabbed Seamus's hands. \"These are things I need to know. I've been struggling since October and you've been there for me without fail. You've protected me. Day in and day out, you've been by my side. In a lot of ways, I've been a shitty boyfriend. I haven't done a good job at putting you first. It was hard for me because I felt like I didn't deserve any of it. Why would someone who has their entire life together want to be with someone like me?\"\n\n\"I don't have it all together.\"\n\n\"I know that now,\" Matt said. \"We've been together for how long and I'm just learning the truth about Kelly? That's stuff I should know. What else don't I know? I didn't even know about your friends. You had mentioned them in passing, once. Do you see a future with me?\" he asked.\n\n\"You know I do.\"\n\n\"Then tell me everything. Tell me all the reasons you don't have your shit together. Tell me things I do that make you freak out. I can't fall in love with you if I don't know you.\"\n\n\"What do you want to know?\"\n\n\"Everything.\"\n\nSo they spent the evening talking about everything. Kelly always punished Seamus emotionally by taking things away from him or leaving him for a day or a week. Which is why Matt moving away for the summer and then to his own apartment had been so hard. Backward change was hard for Seamus.\n\nSeamus shared more about college, his friends, how they vacationed together. Matt found out Seamus and his friends always vacationed for two weeks at the end of March. Which was also Seamus's birthday. Matt had no clue.\n\n\"I missed your birthday?!\"\n\nSeamus put his hands up. \"The adoption was more important. I wasn't about to leave you for two weeks during that ordeal.\"\n\nMatt pressed his fingers to his temples. \"You should've said something.\"\n\n\"I know.\" He looked guilty. \"I'm sorry.\"\n\nSeamus talked more about his childhood, grade school, and transitioning after Kelly died. By one in the morning, they were both exhausted.\n\n\"How's Aidan?\" Having already shared more about Kelly than he had in ages, Seamus was ready to move on to greener pastures. \"Can we video chat with him tomorrow?\"\n\nMatt quickly shook his head. \"That's not a good idea.\"\n\nSeamus frowned. \"Why not?\"\n\n\"I made the mistake of telling him that I was coming to visit you and he freaked out. Dad was literally holding him back as he screamed bloody murder. If you call, it will start a war.\"\n\nSeamus tried to look guilty, but his smirk was undeniable.\n\n\"Gloat is not a good color on you,\" Matt teased.\n\n\"Whatever,\" Seamus smiled. \"At least someone missed me.\"\n\nMatt shoved Seamus. Seamus shoved him back.\n\n\"It's true. You barely called or texted.\"\n\nMatt sat there, mouth agape. Then Seamus smiled slyly. The fucker was riling him up on purpose. Oh, two could play this game. Matt pounced and a second later they were rolling off the couch and on to the floor. Not even the coffee table or the spilled water stopped them. It was war. They hit the coffee table, knocking over a cup of water, but that didn't stop them.\n\nSeamus was stronger, but Matt was scrappy when he needed to be. They laughed and tried to pin each other down while blaming each other for not calling or texting enough. Matt got pinned Seamus's leg to his chest for a second before Seamus was able to free himself.\n\nThey were both happy and breathing heavily when Matt stopped fighting. Happy Seamus leaned down and placed a chaste kiss on his lips.\n\nMatt watched Seamus. He was glowing in a way he never had before. \"You can say it.\"\n\n\"I don't want to freak you out or make you feel pressured.\"\n\n\"It won't,\" Matt said. \"As long as you're okay that I'm not ready to say it back, yet.\"\n\n\"It's fine.\" Seamus pursed his lips and wrinkled his nose. \"Well, it sucks, but I understand.\"\n\n\"I will get there,\" Matt promised. \"I've just said it so many times and it never really meant anything. When I tell you I love you, I want it to mean something. Just like how I'm not Kelly, you're not every short-lived, immature relationship I had in the past.\"\n\nSeamus got up and helped Matt to his feet. Together they cleaned up the water mess and Seamus's dirty dishes from dinner before relaxing back on the couch.\n\nSeamus asked how things were going back home, they talked more about Aidan, Seamus asked about Brad. Finally, Seamus broached plans for the fall.\n\n\"So, you really have an apartment lined up?\"\n\nThey were sitting on opposite sides of the couch, rubbing each other's feet. Matt smiled at the way Seamus focused on his feet while asking a question that had clearly been eating at him. His boyfriend was both incredibly stoic and adorably innocent at the same time.\n\n\"I made sure it's just a few blocks down the road. The apartment is a little more than I wanted to pay, but it's close to everything I need, including you.\"\n\nRed crept up Seamus's neck. \"And when are you moving in?\"\n\n\"Mid-August. It opens August first. I plan to be fully moved by the fifteenth. So, not that long.\"\n\n\"And work?\"\n\n\"I talked to Denise and I'll start back at the coffee shop once I'm settled in.\"\n\n\"And your hours are good?\"\n\nMatt smiled. The change was driving Seamus crazy, but he cared.\n\n\"I don't have my class schedule, yet, so it's hard to say. She said she'll be flexible and to call her when I have my classes and daycare lined out.\"\n\nSeamus pursed his lips.\n\n\"What?\" Matt asked.\n\nSeamus shook his head.\n\n\"No,\" Matt chastised. \"Say it.\"\n\n\"I kind of want to strangle you right now.\"\n\n\"Oh, is that all?\" Matt chuckled.\n\nSeamus threaded his hands behind his neck. \"You're putting Aidan in daycare?\"\n\n\"Yes?\"\n\n\"Okay.\"\n\nMatt let go of Seamus's feet and carefully crawled up the couch without falling off or digging his knee into his boyfriend's leg. Seamus watched in confusion as Matt sat on his thighs and cupped his face.\n\n\"I would not have survived this last year without your help, but I do not want to burden you or risk taking advantage of you. The plan was always to get Aidan into daycare, and I finally did.\"\n\nSeamus looked Matt right in the eye. \"At the risk of sounding like a fucking idiot, it makes me nervous that you're moving out and not letting me watch Aidan anymore.\"\n\n\"I'm doing this so we can have a healthy relationship. I want you to enjoy spending time with Aidan. I don't want it to be an obligation. I also want to get rid of the stress I feel because of you taking on so much. \"\n\nSeamus crossed his arms. \"I enjoy watching Aidan.\"\n\nAgain, Matt smiled. How could he not? Seamus was so fucking hot when he pouted. Matt threw his hands up. He couldn't argue. \"Fine. I'll do three days in daycare and you can do the rest.\"\n\n\"Two days in daycare.\"\n\n\"Aidan isn't a little baby anymore. He doesn't sleep the day away. He's mobile and kind of an asshole.\"\n\n\"Two days,\" Seamus demanded.\n\n\"Okay,\" Matt conceded. \"But I'm paying for the third day and keeping it as an option.\"\n\n* * * * *\n\nBrad was waiting when Matt got home. He wanted to know everything. Matt smiled as he shared the weekend with his dad. It was good. Real good.\n\nWith the waterways cleared, the rest of the summer passed quickly. Seamus visited Matt and Aidan just as much as they visited him. They even did things with Brad, like 4th of July, the zoo, a weekend at the lake, and a fun wax museum. It was an adventurous summer.\n\nIn the blink of an eye, it was over, and moving time had commenced. Seamus helped get everything out of storage and into Matt's new apartment. Seamus's loft was bigger, something he regularly reminded him about, but Matt just smiled and gave Seamus a kiss on the cheek, making him growl.\n\nSeamus hadn't told Matt he loved him, though it was written on his face whenever Matt did cute shit, like the time he picked his dirty towel up off the floor and tossed it in the hamper without Seamus asking him to.\n\nThe last thing he wanted was for Seamus to feel like he had to hold back. He also understood the hesitation. It would be hard to proclaim something so big knowing the other person wasn't there. Especially after everything he had been through with Kelly.\n\nIt would happen when both were ready.\n\n* * * * *\n\nIt took a couple of weeks for Aidan to un-attach from Seamus's side. The back and forth over the summer was hard on him. In fact, the first weeks of daycare were a complete disaster. The separation from anxiety was worse than either prepared for. Matt worried he might have legitimately messed up by moving away for the summer.\n\nSeamus was a champ about it. Probably because he secretly loved it. The first week, he stayed at the daycare with Aidan to help acclimate him. When Seamus left, Aidan was perched victoriously on his hip, clinging to his neck.\n\nThe second week, Seamus left Aidan there, but only for a couple of hours.\n\nThe third week he stayed away a little longer. By the end of September, Aidan was at daycare two full days a week.\n\nThat third day was not happening anytime soon.\n\nMatt had a good rhythm going. Aidan was in daycare or with Seamus. When Matt wasn't in class, he was working with Hilary and Kase, or studying. As much as he didn't want to rely on Seamus, he also didn't care as much anymore.\n\nThings had kind of reverted to the way they'd been before they moved in together. If Seamus wasn't at Matt's apartment, then Matt was at Seamus's. Matt didn't mind it so much. Things were definitely smoother this time around.\n\nThey went to all the home football games together. The three of them even wore matching collegiate hoodies. Something Hillary swooned over even though she didn't know they were officially together.\n\nAs good as life was, and it was really fucking good, Seamus was stressed about something. Matt fished a few times, but Seamus waved him off. \"Just work stuff.\" Matt was giving Seamus space, but he would not let it go for long. They were in a relationship. Matt deserved to know what was bothering him.\n\nThey were at the loft one night. Aidan was asleep and Matt was studying Advanced Forensic Accounting.\n\nSeamus paused the TV. \"Theoretically, forensic accounting could find missing money, right?\"\n\nMatt kept working. \"Yeah. It's basically auditing on steroids.\"\n\nSeamus thought about it for a moment and then unpaused TV. The question wasn't strange, but the timing and tone were off. Matt kept talking.\n\n\"If someone is embezzling money, laundering money, or otherwise moving money where it shouldn't be moved, there would technically be some kind of trail. The inconsistencies might not be obvious to most, but someone who knows what they're looking for, like a forensic accountant, should be able to find it in the numbers.\"\n\n\"If someone was to do an audit, could you do it with no one knowing that you're doing it?\"\n\n\"I mean, yeah. The auditor would need access to the program and/or the numbers, so someone would have to know, but you could do an audit under the radar.\"\n\nSeamus watched Matt for a moment then nodded, seemingly satisfied his answer. That was that.\n\nExcept it wasn't. Matt wanted to know.\n\n\"Does this have to do with work?\"\n\n\"I don't know. Maybe?\" Seamus ran a frustrated hand through his hair. \"I have nothing to go on but a bad feeling.\"\n\n\"Okay,\" Matt pressed. \"What do you think is happening and why do you have a bad feeling?\"\n\n\"Mike does all the accounting. He was Kelly's childhood friend and his most trusted confidant. After Kelly died, Mike stayed on. It seemed like the easy choice since he was already doing it. The last few years Mike has gotten more controlling where his job is concerned. I don't know much about numbers, but when I ask about specifics, he finds a way to brush me off. I don't feel like I'm getting the whole picture.\"\n\n\"Does he work alone?\"\n\n\"Yes.\"\n\n\"And there's no one to keep him accountable? No checks and balances?\"\n\n\"I guess not.\"\n\n\"If he does all the finances and no one is checking his work, it would be easy for him skim. If I was you, I'd be inclined to investigate.\"\n\n\"I don't know where to start.\"\n\n\"I can ask my professor if she could recommend someone.\"\n\n\"I was thinking you could put your schooling to the test and look around for me.\"\n\nMatt was shocked. \"I'm not a real accountant. I'm a baby accountant. Like, I'm not even eating solid foods yet.\"\n\nSeamus held his hands up. \"I was just thinking you could look. If you don't see anything suspicious, I'll drop it. If you see something concerning, I can hire a professional and go from there.\"\n\nMatt's heart raced. He strummed his fingers anxiously on the sofa cushion. \"You really want me to go all forensic crazy on your business financials?\"\n\nSeamus smiled at Matt's ridiculousness. \"Of course. I trust you more than anyone.\"\n\nMatt grinned. He was excited that he might put his baby skills to actual practice. He could hardly contain himself.\n\n\"When are we going to do this?\"\n\n\"Mike goes on vacation in two weeks. I was thinking we could do it then.\"\n\nTwo weeks wasn't a lot of time to prepare, but he'd manage. No matter what, he'd be ready to help Seamus figure out the accounting debacle. It was the least he could do for everything Seamus had done for him. Matt knew one thing for sure, he was going to give this his best shot.\n\n\"Ok. I'll do it,\" he promised. He hoped he hadn't just made a big mistake."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "relationship",
        "love story",
        "romance",
        "married gay guy",
        "divorce"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/boss-nanny-ch-12"
}
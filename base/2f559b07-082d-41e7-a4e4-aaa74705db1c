{
    "title": "A New Alexandra Ch. 13",
    "pages": [
        "Alexandra fastened the silver-colored hoop earring and shook her head. Her hair stayed mostly organized, swept back in a sandy bouffant wave.\n\n\"Ready?\" Kira had snuck up behind her, wrapping her arms around Alexandra's waist.\n\n\"Do I look ready? Makeup half-done, shoes somewhere in the dark abyss of our closet?\"\n\n\"I'll get the shoes,\" Kira replied. \"But the choice of one false eyelash did seem weird.\"\n\nAt least she didn't ask why I did my lashes halfway and popped in my earrings. Probably just because my brain works that way. Or doesn't.\n\n \n\n\"You're the best.\"\n\n\"I am. And I'm ready to go,\" said her girlfriend. Her ankle boots clunked on the hardwood.\n\nIt's going to be a weird night, Alexandra thought. I have no idea what I'm getting into, what the vibe at this party will be. She blinked, making sure the artificial lashes blended well with her natural pair. A touch-up and the job was complete. But apparently it's okay for me to look like a complete slut, so...that's cool?\n\n\"Lipstick?\"\n\n\"Depends,\" said Kira. She'd appeared behind Alexandra in the mirror. Her own lips were subtly glossed. \"I wouldn't say a mid-thigh sequined dress and four-inch heels needs more, but if you felt like it, that super-dark red Maybelline might not hurt.\"\n\n\"Might not hurt,\" Alexandra repeated. \"Meaning that it'll ensure everyone stares at me, not you.\"\n\nKira directed her gaze to Alexandra's uncharacteristically low-cut dress.\n\n\"Honey, I'm five-ten and blonde,\" she finally said. \"People stare at me no matter what. Just enjoy it.\"\n\nI do, thought Alexandra. Not gonna lie, I like it when eyeballs flick my way.\n\n \n\n\"Shoes are new ones for you,\" Kira said. \"They're the rest of your Christmas present. I'm sorry they're late.\"\n\n\"Late? I got you a huge jar of peanut butter, for heaven's sake. Who cares if part of your present is late?\"\n\n\"Yes, but that's what I asked for. This was a little extravagant, even for me. Anyway, next to the bed.\"\n\nExtravagant? From a woman who tosses gifts at me like she doesn't have to pay for them?\n\n \n\nAlexandra exited the bathroom, tile switching to cool hardwood under her feet. On the bed sat a shoebox, brown with white lettering.\n\nChristian Louboutin, it read in a crawling script. Paris. Alexandra swallowed as she cracked the lid. These are the most expensive shoes I've ever touched, let alone worn. \n\n \n\nThe shoes were matte black, finely textured suede with the trademark scarlet soles. Alexandra lifted one out, running her finger over the delicate stiletto.\n\n\"Wow.\" Not much more to say. \"They're incredible. I mean, what a statement!\"\n\n\"You mean you wearing them, or me giving them to you?\"\n\n\"Both,\" said Alexandra. \"I suppose they're a bit of an I'm-serious-about you gift in a way that peanut butter isn't.\"\n\n\"Oh, I know you're serious about me. But I know how much you love heels, and...well, I just figured I'd say it with actions rather than words.\"\n\n\"Thank you.\" She wrapped her arms around Kira, kissing her deeply. Her partner's hand rose to the back of Alexandra's neck, stroking the closely-buzzed hair. Alexandra purred, the feeling of soft, full lips distracting her.\n\nThe shoe clattered to the floor. Kira broke the kiss, shaking her head.\n\n\"They're designed to be worn on your feet, dear. Hard to drop them like that when worn properly.\"\n\n\"Oh, shush. You hardly gave me a chance.\"\n\nKira took a large step back. Pretty impressive, actually, given those shoes. Alexandra sat down and slid on the perfectly-tapered shoes.\n\n\"Four inches,\" Kira said, extending her long arm to lift Alexandra to her feet. \"No big deal in your world nowadays, is it?\"\n\nAlexandra blushed. And to think this is all new since I started dating you. \"Well, that doesn't mean I want to stand around in them all night.\"\n\n\"As you are aware, the Riises own furniture. You can sit down.\"\n\nOr head to a bedroom, Alexandra thought. With any one of about four people who will be there.\n\n \n\n\"What?\" asked Kira. \"You're doing that staring into space thing again.\"\n\n\"Oh, nothing.\" Alexandra couldn't resist winking.\n\nKira shook her head again. \"You complete little whore. We'll see, okay?\"\n\n\"Yes, please.\"\n\n\"Ready?\"\n\n\"I'm assuming we're not walking?\"\n\nKira frowned. \"If you ever think of walking a mile in Chicago in January in those shoes, just give them back and I'll find someone else who can wear them as intended.\" She paused, grinning. \"No, I'm calling an Uber.\"\n\n\"Kira, honey. You're getting ahead of yourself. It's not January for another few hours.\"\n\n\"Ah, yes. December 31. A much better time to walk a mile in heels.\"\n\n--\n\nMeg Riis answered the door, wrapping Kira and Alexandra in rapid sequential hugs.\n\n\"Hello, Blondie,\" she said, taking a bottle of red wine from Kira. \"So nice of you bring New Girl to our little soiree.\"\n\nAlexandra stepped inside. \"Little\" was perhaps not the right word. The large living room was well-occupied, with perhaps fifteen women chatting, all eye-catchingly dressed.\n\n\"No staring, New Girl.\" Meg rested her hand on Alexandra's shoulder. \"Obviously you know a few of them. The rest you can meet. But not if you just stand there.\"\n\n\"Oh, sorry.\" Alexandra scanned the room, picking out Meg's wife Mette and others from their soccer team.\n\n\"By the way, New Girl, I think you win this battle in the Shoe Wars. Fucking red bottoms.\"\n\nAlexandra grinned. \"Close second for you, Megan.\"  Their hostess wore a low-cut navy dress, but even her cleavage was outshined by the glittering silver pumps.\n\n\"Thank you. Jimmy Choos aren't cheap, so I'm glad you at least noticed. I won't even comment on Blondie wearing the same color dress as me but with a slit so high up the side that it looks like an accident waiting to happen.\"\n\n\"You just did comment,\" replied Kira. \"And with you, it might not be an accident.\"\n\nMeg turned away, failing to hide the redness spreading across her pale cheeks.\n\nFingers intertwined with Alexandra's as Kira bent to whisper into her ear. \"See, might not necessarily be the tamest party if you play your cards right.\"\n\nWell, duh, thought Alexandra. You say that like we didn't have a foursome with Meg and Mette. But what happens when it's only us and what happens with a house full of people who presumably conform to conventional expectations of sexual behavior are two different things. Probably.\n\n \n\n\"No teasing,\" she whispered back.\n\n\"Oh, you know I don't tease. I always get you there. Eventually.\"\n\n\"Isn't that pretty much the definition of teasing? Promising something and then making me wait?\"\n\n\"No,\" interjected Meg, winking. \"Teasing would be promising something and then not delivering at all. And I must say, New Girl, that is not a problem Blondie has. Now, drinks?\"\n\nGod yes, thought Alexandra. If there's someone eavesdropping on my innuendo-laced whispers, then I definitely need some alcohol. \n\n \n\nTwo minutes later, Alexandra's glass brimmed with a deep red wine whose varietal she hadn't even noted; she'd been in such a hurry to escape the crush around the kitchen island-turned-bar. Kira had vanished into the depths of the house, so Alexandra peeled off and collapsed onto the living room sofa.\n\n\"Nice work there. Red wine, silver dress, not a drop spilled.\"\n\n\"Thanks.\" Alexandra blinked. The voice belonged to Kelly Ainsworth, one of the other defenders on their soccer team. Despite having played portions of several games alongside her, Alexandra realized she knew virtually nothing about Kelly.\n\n\"I know,\" Kelly said. \"I'm surprised to see me here, too. Married chick who lives in Skokie here alone in the city on New Year's.\"\n\n\"Well, yeah,\" said Alexandra.\n\nKelly raised her glass, sipping a dark-amber liquid from the ice-filled highball.\n\n\"So, what brings a married chick from the suburbs to the Riis fiefdom?\" Come on, don't make me drag it out of you.\n\n \n\nKelly lowered the drink and raised her other hand. It took a second to click.\n\nOh. No wedding ring.\n\n \n\n\"The holidays are the peak season for separations and divorces. It seems this was my year. My husband is apparently already dating some bleach-blonde moron from his office.\"\n\n\"I'm sorry.\" I don't know her well enough to say much more than that. \"That sounds awful.\"\n\nKelly shrugged. Perhaps that explains the \"look-somewhere-else\" black dress and ballet flats. \n\n\"So that tale of woe got Mette to swing me an invite to her party, at which I must say I feel thoroughly out of place.\"\n\nWhat did she mean by that?\n\n \n\nA hand rose to Kelly's mouth, covering the embarrassed expression. \"I didn't mean that. I've played soccer long enough to be comfortable surrounded by lesbians. I meant that everyone at this party is so damn stylish. You included.\"\n\n\"Please. I'm a prime example of fake it 'til you make it,\" said Alexandra.\n\n\"I doubt that. I could fake it for a decade and not rock that dress as well as you.\"\n\nActually, you'd be cute if you tried, Alexandra thought. Dump that shapeless brown bob, pop on some eye makeup, wear something designed for women under sixty, and you'd be cute. \n\n \n\n\"No, I really am. This dress? The shoes? All Kira's doing. The lipstick was a friend. The makeup is Kira again. I'll admit the hair was me.\"\n\n\"The hair is so cool. But look, I'm just a soon-to-be-divorc\u00e9e sitting on a couch and drinking alone, so don't mind me.\"\n\n\"You're not drinking alone. And you're not just your relationship status.\" Nor am I a mental health counselor, which you clearly need. But I'll do my best. \"You're a good soccer player, and you're obviously a good friend of Mette and Meg's.\"\n\n\"And you're a better soccer player.\"\n\nTrue. But I also just finished four college seasons. \n\n \n\n\"I didn't play above high school and it sometimes shows alongside you and Kira. Not to mention Luc\u00eda, of course. You all are so fluid with the ball.\"\n\n\"Well, thank you. Although you threaded a nice pass to Sam last game for her goal.\"\n\n\"Aw. Cheers to that,\" Kelly said, raising her glass again.\n\n\"To good passes,\" said Alexandra. It dawned on her which couch this was. I've never actually sat on this thing before. But I sure have kneeled in front of it, with my face buried in Mette's pussy. She took a deep breath. Now's not the time, Alexandra. \n\n\"So, what's in that glass, anyway?\" I hope she doesn't notice that my mind just drifted away.\n\n \n\n\"Dark and Stormy. I thought it was a Dark and Stormy night.\"\n\n\"Oh, no. Not another punster,\" said Alexandra, chuckling.\n\n\"Guilty.\"\n\n\"You're safe here. Kira threatens to FedEx me back to Pittsburgh when I say things like that.\"\n\nKelly shifted position. \"Wait, you're from Pittsburgh?\"\n\n\"Yep, North Hills.\"\n\n\"Whoa. What high school?\"\n\n\"North Hills again.\" Alexandra paused. \"Why?\"\n\n\"Don't suppose you know a Julia Morretti, do you?\"\n\nOh, I know a lot about Julia Morretti, thought Alexandra. My high school midfield partner for two years. I know how mean she is to younger teammates; how she doesn't respect girls who aren't pretty; how shocked she was to find out that I'm a lot smarter than she is. And yet I still like the stupid slut. \n\n \n\n\"I do. How do you know Miss Morretti?\"\n\nAt that, Kelly burst into laughter, nearly spilling her drink. Nice smile. Familiar, somehow. Oh. Now I know what's coming next. \n\n\"She's my sister,\" said the former Kelly Morretti. \"Did yinz get along alright?\"\n\n\"As well as Jules did with anyone she didn't have dirt on.\"\n\n\"Well, I wouldn't know anything about that. Girl's known too much about me for too long.\"\n\n\"How's she doing?\"\n\n\"As you'd expect,\" said Kelly. \"President of her sorority at Penn State, dragging said sorority's GPA down, drinking her weight in booze and changing boyfriends more often than she changes her sheets.\"\n\nEw. But yes, that sounds like Julia Morretti as only a sister would describe her. \n\n\"Wow. What a small world. Like, we're sitting here in Chicago, I've been playing soccer alongside you for a month, and I just found out I've known your sister for half my life.\"\n\n\"To be fair, she's only my half-sister.\" Ah, yes, I vaguely remember some family drama there. \"I assume that means we're sending her a selfie?\"\n\n\"Heck yes, even if she's busy switching gears from last year's guy to next year's.\"\n\nKelly laughed as she slid over to Alexandra, lifting her phone to the classic high-angle selfie pose. Alexandra raised her glass as the shutter snapped. Kelly turned the screen to her, showing her the photo.\n\n\"Good?\"\n\n\"Yes, I like it. Do you?\" Actually, that might be one of the best photos I've ever seen of myself. My smile's perfect, my hair's great, I actually look comfortable in my own skin. \n\n \n\n\"Definitely. OK to send it to Julia?\"\n\n\"Yeah. Send it to her, put it on Facebook, whatever you want. Actually, can you text me a copy?\"\n\n\"Sure? What's your number?\"\n\nAlexandra provided it, and a second later the picture streamed through.\n\n \n\n\"Thanks. Well, let's see what she thinks?\"\n\nKelly smiled. \"If she's sober enough to even realize what's going on.\"\n\n\"It's barely ten o'clock,\" said Alexandra.\n\n\"You do know Julia, right?\" Kelly laughed as both their phones lit up with an incoming message.\n\nJulia: Wait, whaaaaaaaaaaat?\n\nKelly: Hi Sparky. Happy New Year!\n\n\"She stuck her finger in an outlet when she was a toddler. She's been Sparky ever since,\" Kelly explained.\n\n\"Probably explains a thing or two.\"\n\n\"Right?\"\n\nJulia: You too. But wait, how do you and Alexandra know each other?\n\nKelly: We play on the same rec league soccer team.\n\nJulia: No way.\n\nKelly: Way. We played like three games together before we became aware of our smelly mutual connection.\n\nJulia: Whatever, you're just mad that I'm prettier than you.\n\nKelly: And you're mad that I'm smarter than you, Sparky.\n\nJulia: Shut up. Shut up!\n\nAlexandra: I didn't say anything.\n\nKelly looked up.\n\n\"Sorry, Mean Girls quotes just happen.\"\n\n\"I know,\" said Alexandra's new friend. \"But not with such perfect timing.\"\n\nJulia: Baaaaaaaaaabes! I almost didn't recognize you!\n\nAlexandra: Good or bad, Meanie?\n\n\"Meanie?\"\n\n\"Double meaning,\" said Alexandra. \"She thinks it's only because she's mean. But it's also eeny-meeny-miny-moe, her method of choosing guys.\"\n\n\"I like you,\" said Kelly. \"Want another drink?\"\n\nAlexandra looked down, stunned to see an empty glass.\n\n\"Please. Surprise me?\"\n\nA new text appeared as Kelly disappeared into the kitchen.\n\nJulia: Sorry, wanted to drop Kelly for a moment. REALLY good. What are you up to tonight?\n\n \n\nAlexandra: Just a party at a friend's house.\n\nJulia: Is Kelly doing okay? I assume she told you?\n\nAh, that's why she got dropped from the chat. \n\nAlexandra: She did. She's doing okay given the circumstances, I think. She's getting another round right now, so that's good?\n\nJulia: Careful. She's out of practice. Or just a lightweight.\n\nAlexandra: Doesn't look like it. Seriously, Sparky?\n\nJulia: Ugh, not you too.\n\nAlexandra: Well, all the people on this team call me New Girl.\n\nNot all of them. At least Kira doesn't. Or Mette.\n\n \n\nJulia: I like it! So tell me, how are you doing? It's been so long!\n\nAlexandra: Good, I suppose. Ready for a new year?\n\nActually, I'm fucking great, but I hate, hate, hate talking about myself.\n\n \n\nJulia: Ready for a party, at least. Speaking of, I need to go. Keep an eye on Duckie for me and let's catch up sometime soon!\n\nAlexandra: Have fun :)\n\nKelly returned with two identical drinks.\n\n\"Dark and Stormy, New Girl.\"\n\n\"What's in it?\"\n\n\"It's a Moscow Mule but with rum instead of vodka. Also, your girlfriend's looking for you.\"\n\n\"I'm not the one that wandered off!\"\n\n\"I told her where you were,\" said Kelly, a glint in her hazel eyes. \"Until then, you're mine.\" Lightweight, Alexandra thought.\n\n\"Cheers, Duckie.\" Alexandra winked.\n\n\"That little brat,\" said Kelly. \"She says I have a constant trout pout. Or duck face. Whatever.\"\n\nShe's right. I'd assumed you'd had lip injections. \"I'm not sure that's such a bad thing. Lips have their uses.\"\n\nKelly sipped her drink. \"I suppose you'd know. If I'm Duckie, I have to wonder what my sister would call Kira. I mean, she doesn't have the thinnest lips...\"\n\n\"Julia would hate Kira.\" If there's something that makes Julia mad, it's a combination of hotter, smarter, and more athletic rolled into one package.\n\n \n\n\"Why? She clearly doesn't hate you,\" said Kelly.\n\n\"Well, no, but what do you mean?\"\n\nA shadow approached over Alexandra's shoulder.\n\n\"I assume your logic is as follows: Kira is prettier, smarter, and better at soccer than Sparky. Therefore my sister would hate her.\"\n\n\"Well, yeah.\" Stop saying \"well.\" You sound like you can't think fast enough to keep up with your mouth.\n\n \n\n\"She has grown up, you know.\"\n\nAlexandra was about to ask Kelly to explain when Luc\u00eda slid onto the opposite end of the couch.\n\n\"I see Kelly's got you on the Dark and Stormy train, Alex.\"\n\n\"I've never had one before. But yes.\" And you look absolutely amazing in that dress, even if it's the same color my wine was.\n\n \n\n\"Y t\u00fa, mi peruana favorita?\" Kelly asked.\n\n\"Vino tinto, por supuesto.\" \n\n \n\nApparently we've switched to Spanish. Which I don't speak.\n\n \n\n\"Yes, Alexandra,\" said Luc\u00eda, rolling her name to sound like the Spanish Alejandra. \"I do actually drink, just not often in company.\"\n\n\"Why's that?\"\n\nShe blushed. Impressive, given her complexion. \n\n \n\n\"You saw me after the game last time. I tend to get a little... exuberant?\"\n\n\"I'd have called that garden-variety shitfaced,\" said Alexandra. \"You're still worried about it?\"\n\n\"Not really,\" said Luc\u00eda, lifting a glass with contents the same shade as her dress. \"So, is Sam coming tonight?\"\n\nSam? She's played one game with us. Mette and Meg hardly know her. Why would she be invited?\n\n \n\n\"Um, I don't know. Why?\"\n\n\"Oh, just she was really nice and I know you two are friends.\"\n\nKelly laughed. \"And because she took you home in an Uber when you could barely stand.\"\n\n\"That too,\" said Lucia, tossing her dark hair aside. \"And I'd like to pay her back for that. It's not cheap to get out to Evanston. Alex, you said her parents live there?\"",
        "\"They do.\" Where was I for all of this? Oh, right. Kira and I stayed in because we'd had an insanely long night on Friday. She felt herself blushing again, mind flashing back to a hotel threesome with Kira and the petite desk clerk.\n\nThere was a faint knock at the front door, which Meg swiftly moved to answer. And there's my mind again, undressing Meg and that gorgeous hourglass with my eyes. \n\n \n\n\"I suppose you have your answer, Luc\u00eda?\"\n\nMeg had stepped aside, revealing Sam Reynolds in a short green dress. Her overcoat was still on, unzipped, dark curls covering her shoulders.\n\nAlexandra heard a sharp intake of breath next to her as she stood to greet Sam. As she gave her friend a quick hug, Alexandra checked over her shoulder to see if she could pick Kira out of the crowd.\n\nJust as she was about to give up, she spied her girlfriend's massive blonde bun. Kira stood in a tight circle with Mette and a third woman Alexandra had never met. But she's also super tall, whoever she is: if Kira's 5'10\" and Mette's 5'11,\" this woman is right in between.\n\n \n\n\"Hey, uh, Earth to Alex?\" Sam's voice caused Alexandra to refocus.\n\n\"Sorry. I get overwhelmed at large gatherings.\"\n\n\"Yes, so do I. Meaning I'm scared to take another step into this place.\"\n\nA thought occurred to Alexandra. \"Then grab a drink. Keep the coat. Meet me upstairs. You've never been here, right?\"\n\nSam shook her head. \"No, of course not.\"\n\n\"Then let me play tour guide. I'll wait upstairs, where there should be infinitely fewer people.\"\n\n\"Suit yourself, weirdo.\" Sam winked. And she even has glittery eye makeup on. Grrr. Calm down, Alexandra. \"See you in a minute.\"\n\n--\n\nAlexandra stood alone on Mette and Meg's rooftop deck. Drink in gloved hand, she exhaled a cloud into the cold night air. The rooftops of row upon row of houses stretched into the distance, giving way to the flat darkness of Lake Michigan.\n\n\"It's beautiful,\" said the voice behind her. Sam closed the sliding door. The faux-fur rimming her hood made Alexandra feel warmer instantly.\n\n\"So many people between here and the lake, all dreaming of a better year to come,\" replied Alexandra.\n\nSam stood next to her for a moment. \"Oh. Deep. I was just going to make a crack about it seeming like The Bachelorette lesbian-style down there.\"\n\n\"You're that popular, eh?\"\n\nSam laughed. \"No, I just meant that it's a house full of very attractive, well-dressed women sipping drinks with no apparent purpose other than to show off.\" She stepped alongside Alexandra, huddling close.\n\nAlexandra raised her glass. It's hard to drink with gloves on, she thought. But the lights and the solitude out here? Perfect.\n\n \n\n\"Got any favorites?\"\n\n\"Hm?\" asked Sam.\n\n\"Any favorites among the well-dressed attractive women?\"\n\n\"Besides you?\"\n\nAlexandra gave her a playful swat in return. \"Besides me.\"\n\nSam blushed.\n\n\"So, that's a yes. Spill the beans, Reynolds.\"\n\nThe red on Sam's cheeks flared again. \"There are two that jump out. One of them is taken, and the other I'm not even sure is gay.\"\n\n\"If she's at a party at Mette and Meg's, there's a rather good chance she's gay,\" responded Alexandra.\n\n\"And if she's not, then I end up with that awful feeling you get when you hit on someone and they just reject you. Pass.\"\n\nAlexandra looked out over the rooftops. \"Fine. Who's the one who's taken?\"\n\nSam blushed again, even deeper this time. Her brown eyes flicked away from Alexandra.\n\n\"Ah.\" Take a risk, Alexandra. \"Taken because she's with me?\"\n\n\"I... well...yeah. Is that weird?\"\n\n\"Is it weird that you think my girlfriend is hot? No.\" Alexandra slid her arm around the puffy-coated figure.\n\n\"Isn't it?\"\n\n\"You're expecting me to disagree with the proposition that my girlfriend is hot?\"\n\n\"No,\" said Sam. She leaned into Alexandra. \"I'm expecting you to disagree with the implication that I'd have sex with her.\"\n\nWell then. Alexandra paused. Took a swallow of the ice-cold ginger beer and rum. Just what a drink needs in this weather. Ice cubes.\n\n \n\n\"I don't think she'd object to that idea.\" Another sip. \"Nor would I.\"\n\nSam's head snapped towards her, chestnut curls flying. \"Sorry?\"\n\nAlexandra exhaled. \"Don't pretend you didn't hear me. Besides, it's been like three weeks since we last hooked up. Two birds, one stone isn't just a metaphor.\"\n\nSam delicately kissed the side of Alexandra's neck. \"Actually, I really, really hope it is just a metaphor. And I've kinda wanted to take your new haircut for a test drive.\"\n\n\"Yeah?\"\n\nSam blushed again. \"I mean, I love boldness. And that's bold.\"\n\n\"Says the chick with the giant back tattoo.\"\n\n\"Yeah, well, who else knows about that?\"\n\n\"Besides me?\"\n\n\"Yes, besides you.\"\n\n\"Kira, for one. I told her.\"\n\n\"What'd you tell her?\"\n\nAlexandra put her lips next to Sam's ear. And if I wasn't in love with heels before, I am now. She's my height normally, and now I'm bending down to whisper to her.\n\n \n\n\"Obviously she knows we hook up, and she's 100% cool with it. So I told her how fucking hot you sound when you cum. And how your chest turns red when you're super turned-on. And how I love to kiss your tattoo when I cup your tits from behind. And you know what she said?\"\n\nSam gasped, then shook her head.\n\n\"She said, and I quote, 'I need to get a piece of her.' So.\"\n\n\"So.\"\n\n\"So maybe I shouldn't tell you this, but Kira and I have gotten into playing together recently. Including with some people at this party. But also others.\"\n\nSam's gloved hand raised to her mouth. \"You're kidding.\"\n\n\"Nope. After finals we stayed at a hotel in the Loop. Best memory of that night was the desk clerk eating Kira's cunt while I sucked her tits and fingered her sexy little blonde pussy.\"\n\nSam pulled Alexandra closer, leaning ever closer. \"Fine. Fuck you.\" Her lips brushed Alexandra's. \"If that's the Hunger Games, I volunteer as tribute.\"\n\n\"You gigantic fucking nerd.\"\n\n\"You love it.\" Sam's breath was hot on Alexandra's face. Her pulse raced, anticipating the inevitable next encounter with her friend.\n\nThe sliding door opened, then closed.\n\n\"Ladies, ladies.\" Kira's blonde hair had been released from its bun, cascading over her jacket.\n\n\"Sam and I were just trying to figure out who at the party knows about her tattoo,\" said Alexandra, completely unfazed. I'm such a fucking slut now that I don't even care. Sam looks like she's about to melt into a little puddle, though.\n\nKira tilted her head. She stood a few feet away, leaning on the railing.\n\n\"Sam, if you're gonna stand out here and be like one millisecond from making out with my girlfriend, you're at least telling me about that tattoo.\"\n\n\"It's on my --\"\n\nAlexandra interrupted. \"Truth or dare, Samantha.\"\n\n\"Truth.\"\n\n\"Would you rather tell Kira about your tattoo or show it to her?\"\n\nKira glanced at Alexandra in surprise.\n\n \n\nSam twisted her body, burying her face in Alexandra's coat.\n\n\"Evil,\" she whispered. \"You're so evil.\"\n\n\"I think she wants to show you,\" said Alexandra.\n\n\"Evil,\" repeated Sam.\n\nKira rolled her eyes. \"Don't let this ridiculous skank embarrass you. I'd love to hear about it, see it, whatever you're comfortable with. But please don't let her freeze you to death.\"\n\nSam set her jaw. \"I'd show you if your partner hadn't made me into an icicle because she's overwhelmed by people downstairs.\"\n\nKira considered this for a moment, then headed for the door.\n\nShe looked over her shoulder. \"You coming? Just you, not the bitch with the ice in her drink.\"\n\n\"Sam, are you sure you want to leave me here alone? And go with her?\" Alexandra put on a mocking pout and batted her augmented eyelashes.\n\n\"Am I sure I want to go inside? Hell yes, crazy lady.\"\n\n\"Not what I asked.\"\n\nSam had already broken Alexandra's grip and spun towards Kira. \"What? I'm just going to show her.\" Which will require that you peel your dress halfway down, sweetie. \"Be right back.\"\n\nAlexandra laughed and watched the two women go back into the house. The hell you will. I think I'll finish my drink.\n\nShe cinched the belt on her coat and stared into the night. So, Sam Reynolds, who is your mystery crush? She took a large gulp from her ice-cold drink. Not that I'm jealous, of course.\n\n \n\n--\n\nAlexandra cracked the door to the top-floor bedroom. Shrouded in darkness, a soft sigh met her ears. As her eyes adjusted, the details became clear: Sam, dress off, kneeling between Kira's legs.\n\n\"You better lock the door, slut.\" Yes, please. She pushed the lock. It clunked into place. There's a party downstairs.\n\n \n\nKira's dress was hiked up almost to her hips. Sam's hair was flicked to the side, exposing the colorful phoenix across her upper back and shoulders. And no bra, I might add. Just a red thong and slingback heels. \n\n \n\n\"Well, well. I thought you were just showing her the tattoo.\"\n\n\"Oh,\" Sam said, as if she were having a normal conversation rather than kneeling between a pair of toned thighs. \"I thought we might just make out a little too. You didn't seem to mind.\"\n\n\"I don't,\" said Alexandra, sitting next to Kira and tracing her jaw with a red-painted nail. \"But I'd at least like to play with you while you...well, whatever it is you're planning on doing in your present position. As that's not generally what I'd call 'making out.'\"\n\n\"Alexandra, dear.\" Kira's tone was light. \"If you're going to interrupt us, you could at least help out.\"\n\n\"With pleasure. If you could remember your manners and take your dress off. Sam shouldn't be the only one nearly naked.\"\n\n\"Sam,\" said Kira. \"Would you like that?\"\n\n\"I would.\"\n\n\"Then say please.\"\n\n\"Please take your dress off, Kira.\"\n\n\"Good. See how easy it is if you ask nicely?\"\n\nAlexandra opened the back zip on Kira's dress, allowing her girlfriend to lift the garment over her head.\n\n\"Sam, honey, don't you wish you got to sleep next to this every night?\" Kira's muscular body had captivated Alexandra from the start of their relationship. Well, that and her fantastic tits, if I'm being honest.\n\n \n\nWithin seconds, all three dresses lay in a small heap on the hardwood floor.\n\n \n\n\"Maybe,\" said Sam. \"But I hear that Taylor Swift references annoy you, so...\"\n\n \n\n\"I knew you were trouble when you walked in,\" responded Alexandra.\n\n \n\n\"Mean,\" said Sam, staring defiantly at Kira.\n\n \n\n\"You need to calm down,\" responded Alexandra. \"Otherwise Kira's gonna spank one of us.\"\n\n \n\n\"Wiiiiiiildest dreaaaams,\" sang Sam.\n\n \n\n\"Samantha,\" said Kira. \"Is that what you really, really want?\"\n\n \n\n\"Oh, of course,\" she said. \"But that's the Spice Girls. And that's not the title.\"\n\n \n\nKira's face twitched into a half smile. \"Fine. Up against the wall, booty out. Panties off.\" Not like it matters, Alexandra thought. A thong that small isn't doing anything. \n\n \n\nAlexandra's mind buzzed. There's another Taylor Swift reference sitting here. Must. Resist.\n\n \n\nSam spread her arms across the wall, grinning at Kira. \"Well?\"\n\n \n\n\"Oooh. Look what you made me do,\" said Kira. Ugh, yes, that one. \n\n \n\n\"You're just as bad as us, Kira.\" Maybe...shouldn't say anything?\n\n \n\n\"Shut up, slut,\" responded her girlfriend. \"Enjoy watching Sam get the spanking that you wanted.\"\n\nOh, I will, thought Alexandra. And I'll need to cross my legs while I do it.   \n\nThe first blow landed with a resounding smack. Sam's body stiffened, the redness showing immediately on her pale booty. Alexandra felt the warmth in her panties. I hope nobody heard that downstairs.\n\n \n\nThree more quick slaps turned Sam's bubble a uniform red, the tight flesh jiggling slightly.\n\n\"Such a good girl,\" whispered Kira. \"Alex can't take that without whimpering.\"\n\nLiar. Alexandra felt her breath catch. Don't tempt her. \n\n \n\nSam turned to kiss Kira, a lust-drunk look on her face. \"Thank you,\" she said after their lips parted again.\n\nKira chuckled. \"I think you had a better idea before of how to thank me.\"\n\n\"I did.\" Kira sat on the bed next to Alexandra, hand resting on her thigh. Sam slid effortlessly to the floor, kneeling. Her hands reached for Kira's waistband, toying with the thin fabric.\n\n\"You may,\" said Kira.\n\n\"Mmmm,\" moaned the brunette, eagerly swishing the fabric down the long legs. Cute face. Slutty as hell attitude, thought Alexandra. \"Cute\" decidedly does not equal innocent.\n\n \n\nKira turned her head, kissing Alexandra deeply. Her body turned slightly. Alexandra's hands gravitated to her partner's breasts, feeling their perfect bulk. Need those, she thought, hands reaching around back to strip away the bra.\n\nThe large, augmented breasts dropped slightly, free of their support. Alexandra dipped her head, kissing and then gently tugging on the deep pink of the nipple. She took Kira's large areola into her mouth, receiving a gasp in response.\n\nOr maybe that was from Sam. Kira's legs were spread wide, the brunette's curls tossed onto one thigh. Sam's head bobbed in Alexandra's peripheral vision, working the entirety of Kira's crotch.\n\nKira growled, a hand dropping lower to lock Sam's head into place.\n\n\"Unnnnh...yes, fuck yes. Right there,\" she said. Alexandra sucked harder on her breast, pinching the other nipple. Kira's body rocked in time with Sam's mouth, grinding powerfully on the pale face.\n\nUgh, I wish I could see this better, Alexandra thought. As if a close-up of my girlfriend's tits is a bad thing. \n\n \n\nKira straightened her body, forcing Alexandra's mouth off her breast. Sweat began to glisten on her skin. Her moans increased in pitch.\n\n\"Fuck...mmmmm! Yes, yes, yes!\" Wow, she's close already. Alexandra pushed Kira flat against the bed. She crawled atop the fit torso, straddling her. Mmmmm, the view Sam must have right now, Alexandra thought.\n\nOne hand went to her girlfriend's breast, tweaking the nipple gently; the other gravitated to Kira's hair, intertwining with the golden tresses while the two women kissed.\n\nKira's back began to arch, pushing Alexandra upward. Ugh, she's so strong. Love it. She held the kiss, Kira moaning now while Alexandra nibbled on her lower lip.\n\n\"Unnnnn! Ah!\" Alexandra pinched the nipple just as Kira's body pushed upwards hard. \"Cummmmmmmm...innnnng!\" said Kira, voice shrill. Alexandra's left hand tugged Kira's hair, eliciting a further gasp mid-orgasm. The three women writhed together for what seemed like an eternity, Kira's body uniting the other two in an extended bliss.\n\nAfterwords, the three collapsed into a heap, Sam crawling onto the bed to join a three-way cuddling and whispering session.\n\n\"I'll leave you two to it,\" she said after a minute. \"Thanks, bestie. I fucking love the way your girlfriend tastes.\"\n\nAlexandra blushed, unable to come up with a suitable comeback as Sam slipped her dress on. As the pale woman slid on her shoes, Kira whispered softly to only Alexandra.\n\n\"Notice something?\"\n\nAlexandra nodded.\n\n\"Hey, Samantha?\" said Alexandra.\n\n\"Yes?\"\n\n\"You're a fucking whore, darling.\"\n\n\"Thanks, bestie. Like the dress?\"\n\n\"Love it. Love that you took it off. Took off a fucking backless dress to show off a back tattoo. Slut.\"\n\n\"Hey, don't complain. You get to look at it the rest of the night. Assuming you two bitches come downstairs. I've got a party to avoid.\"\n\nShe shut the door softly.\n\n\"True story about Sam,\" said Alexandra. \"Last year, there was a party that our whole team was invited to. Everyone was there most of the night except Sam. She rolls up at like one in the morning in a hoodie and jeans. The hoodie says 'Sorry I'm late. I didn't want to come.' So she's not kidding about avoiding the party.\"\n\n\"She didn't want to come, you say?\" Kira grinned. \"Seems about right for a girl who just ate my cunt like a fucking pro, wiped her mouth off, and then flounced off like she wasn't owed a thing at all. Didn't want to cum, eh?\"\n\n\"Do not ever make fun of my puns, Kira. Ever again.\"\n\n\"Try and make me. Or, just go downstairs and drink little Miss Reynolds under the table.\"\n\n\"That, my love, I can achieve.\"\n\nAlexandra rolled onto her side and prepared her mind for a long evening.\n\n--\n\nWhile Alexandra refilled her drink, Kira had again vanished. The perils of dating a social butterfly when you're a natural wallflower. \n\n \n\nWhen she looked up, however, Meg -- another social butterfly, thought Alexandra -- was waving her to join her and another woman.\n\n\"Ren, this is New Girl. New Girl, Ren.\" Ugh, Meg. \n\n \n\n\"She's just such a charmer, isn't she?\" The woman extended a well-manicured hand. \"Professionally, I'm Karen. My friends often call me Ren. Meg often calls me 'Kren,' because she's like that.\"\n\n\"Using the same rules, I'm Alexandra, sometimes Alex, and New Girl.\"\n\nThe woman smiled. Pretty. Nice shoulders too. Killer dark eyebrows. \"It's nice to meet you, Alex. I understand you're Kira's girlfriend?\"\n\n\"I am.\"\n\n\"I suppose that marks the three of us as victims of the same conversation.\" She inclined her head toward the bare brick wall, where Kira stood alongside Meg's wife, embroiled in an animated conversation with a third tall woman. \"Seeing as they'll be speaking German, and -- unless you have Meg and I beat -- that puts us on the sidelines.\"\n\nAnd I didn't even know Kira speaks German. \n\n\"I'm not sure I'd want to know what Kira and Mette talk about when I'm not around, anyway.\"\n\n\"I often don't want to hear what Liesl talks about even when I am around,\" replied Ren. Ah, another snarky one. \n\n \n\n\"Why don't you just ask her to speak German at home?\"\n\n\"Ooooh, New Girl. Maybe we should all do that. I'd never have to listen to Mette babbling about some corporate deal or annoying client.\"\n\nI actually quite like listening to my partner, Alexandra thought. Yours, too. And both especially when I'm in bed with them.\n\n \n\n\"Oh, Liesl does that already. She translates what I say and parrots it back to me in German. It's like living in a dubbed movie of my own life,\" said Ren.\n\n\"Don't tell Kira that. She'll get ideas.\" Alexandra shot a glance at her girlfriend, who was still deep in conversation. She looked around for Sam, but came up empty.\n\n\"Ideas aren't always bad,\" said Meg. \"By the way, how was the deck? You guys were out there a long time.\"\n\nAlexandra felt her face flush.\n\n \n\n\"Warmer than I expected. Drinks help.\"\n\n\"They do indeed,\" said Ren, turning to Meg. \"Remember last year when we were both flying the next morning?\" Ah, another pilot.\n\n\"Yeah, getting up at 4 am on New Year's Day isn't exactly fun.\"\n\n\"Nor is flying down to New Orleans, picking up a planeload of the most hungover people you've ever seen, flying them up to a very windy Newark, where the plane goes tech. Not the best day for Captain Karen.\" Ren sighed, rubbing her temple.",
        "\"What she's omitting, New Girl, is that we bid on our trips. Ren is senior enough on our fleet that if she didn't want New Orleans on New Year's, she could have avoided it.\"\n\n\"Shhhhh! Don't let her know that. Less fun that way.\"\n\n\"Then complain about something I don't know anything about,\" said Meg. \"Like those awful murder mysteries you both read.\"\n\nThat raised Ren's eyebrows. \"Oh, you're a fan too? Liesl and I both love the really dark Scandinavian stuff.\"\n\n\"Us too!\" And here I go, blurting stuff out like I'm an over-excitable 18-year-old.\n\n \n\n\"Well, we've been thinking of starting a book club. Maybe-\"\n\n \n\n\"Oh, hey! Look what time it is!\" Meg cut in. \"Time for me to get ready for golden hour!\" She abruptly ran off.\n\n\"Golden hour?\" asked Alexandra.\n\n\"In Meg's imagination,\" said Ren. \"The hour between midnight Eastern and midnight Central is an excuse to have one hour of shameless hedonism.\" She rolled her shoulders, letting the long-sleeved dress resettle. \"We watch the Times Square ball drop at midnight Eastern, which is only 11 here, of course.\" I've never actually been in Chicago for New Year's, but yes. \n\n \n\n\"And then?\"\n\n\"And then it's basically a throwback to a wild college party until actual midnight. Dancing, drinking, and...well, whatever, for sixty minutes. No polite, pretentious professional people.\" She frowned. \"I'm surprised it's 10:45 and nobody explained the golden hour. It can get...a tad wild.\"\n\n\"I suppose I wouldn't be invited if they thought I couldn't handle it.\"\n\nThe woman smiled. \"It's Meg's idea. Mette just sorta tolerates it. She's...well, you know. A lot more circumspect.\" Is she? Coulda fooled me. \"Anyway. What are you reading right now?\"\n\n\"An Anne Holt book. It's called 1222.\"\n\n\"That's one of the Hanne Wilhemsen ones? The one with the snowstorm and the hotel in the mountains?\"\n\n\"Yep. I've just started it.\"\n\n\"It's good. And hey, I doubt you'll get much blowback here for reading a bestselling book about a lesbian cop, written by a lesbian.\"\n\nThe television flicked on, camera trained on the shimmering ball in New York.\n\n\"And apparently read by a bunch of lesbians, too,\" replied Alexandra.\n\nMeg reappeared alongside her, drink freshly refilled.\n\n\"New Girl, I meant to compliment you on your earrings earlier.\"\n\n\"Don't say they're 'so fetch,' Meg,\" Alexandra responded.\n\n\"Oh, no. There's a much better Mean Girls quote about white gold hoops.\"\n\n\"Is there?\"\n\n\"You disappoint me. Yes, there's a scene where Gretchen is talking about how mean Regina is, and one thing she talks about is how only Regina is allowed to wear hoop earrings, and how one time Gretchen got a pair of white gold hoops and she had to pretend to not even like them.\"\n\n\"I bow to your superior knowledge of movies from 2002 or whatever.\"\n\n\"Two thousand four,\" corrected Meg. \"And-\"\n\nRen interrupted. \"How do you retain the knowledge necessary to fly an airplane with your head so full of useless movie trivia?\"\n\n\"It's really only one movie,\" said Meg.\n\n\"Still. You baffle me sometimes, honey. They're nice earrings though, Alex.\"\n\n\"Thank you.\"\n\n\"Whatever,\" said Meg. \"New Girl, let's go watch the ball drop. But first, help me with something?\"\n\n--\n\nAt two minutes to midnight Eastern, a crowd waited in Times Square for the ball to descend, signaling a new year's beginning. In Chicago, Alexandra huddled close to Kira. Their hands were full: drink in one hand, Jello shot in the other.\n\n\"You're nearly a resident here now,\" whispered Kira. \"You've had sex in all the bedrooms and now you hand out shooters.\"\n\n\"Shut up.\" Alexandra stuck out her tongue.\n\n\"You obnoxious little slut. Everything I said was true.\"\n\n\"You're the one who failed to tell me about some mysterious 'golden hour' starting in one minute.\"\n\n\"Oh, that. It's just responsible adults behaving irresponsibly for an hour. Drinking a too much, dancing on the kitchen island, making out in public. Sounds kinda like every night for you, sweetie.\"\n\n\"I don't dance on the kitchen island!\"\n\n\"Only because we don't have one.\"\n\n\"There is zero chance of me dancing on the kitchen island in four-inch heels while drunk, as I will most certainly be after this fucking Jello shot.\" Alexandra stared into the paper cup at the lime-green concoction. This seems like the ticket to a lot of poor decisions.\n\n \n\n\"Fine, I'll dance up there with someone else,\" said Kira.\n\n\"You wouldn't.\"\n\n\"I would and I will. Meg, maybe?\"\n\n\"Don't tease.\"\n\nThe ball began its slow descent on the wall-mounted TV. \"Not teasing. Promising.\"\n\n\"I hate you sometimes,\" Alexandra said.\n\n\"You obnoxious little lying slut. I better still get a kiss when the clock hits zero.\"\n\n\"After my shot, bitch. And I'm still not dancing on any damn counter.\"\n\n\"Suit yourself.\"\n\nThe counter hit zero, and the screen filled with fireworks as the room erupted in cheers.\n\n\"It's go time!\" shouted Meg. She pressed a button on her phone, and music filled the room. Oh God, thought Alexandra. It's Lady Gaga. The singer Kira puts on when she wants me to be super slutty.\n\nThe opening beats of \"The Edge of Glory\" thumped from a speaker in the corner as a room full of green gelatin shooters went into mouths.\n\nAlexandra felt Kira's arms around her, lips brushing hers.\n\nMmmm. Delicate, teasing. She rested her arms gently on her lover's shoulders, nose-to-nose.\n\nAs the vocals kicked in, they shared a passionate kiss. Alexandra's fingers twirled in Kira's blonde tresses as their hips began to move in time with the music. She nibbled gently on the enticing bottom lip before her girlfriend broke away.\n\nSeconds later, Kira joined the crowd of women gathering for an impromptu dance party in the middle of the open-plan floor.\n\nAlexandra shook her head and smiled, still rooted near the television.\n\n\"They're quite something, aren't they?\" Mette cocked her head toward Alexandra, her sleek dark bob immaculate as always.\n\nKira and Meg were leading the dance mob, face-to-face with their hands in the air.\n\n\"They actually look really good together, don't they?\" At least I think so, jealousy aside. Meg's hourglass figure and pale skin against Kira's long, fit body.\n\n \n\nMette laughed. \"They're great dancers. A little crazy though!\"\n\n\"Is it true this is all Meg's idea?\" She was shouting over the music.\n\n\"Yes! Come on, join in!\"\n\nAlexandra didn't have time to protest. It was all she could to do keep her drink upright while Mette pushed her into the crowd. She let the music take over, hips swinging under her short dress.\n\nUgh, awful shoes to dance in, she thought. But it's not like most of the women here are in practical footwear. She felt Mette's hand guiding her from behind as her eyes surveyed the crowd. Kira and Meg were still at the center, but around them the entire party had gathered.\n\nI hope it isn't too much for poor Kelly, Alexandra thought. Straight woman at a lesbian dance party...what could go wrong? \n\n \n\nShe was distracted by Mette's other hand interlacing with her own, spinning her around. Mmmm.\n\n \n\n\"No more watching my wife and your girlfriend, okay?\"\n\nAlexandra nodded, her body syncing with Mette's. The taller woman's hand went to Alexandra's back, pulling their bodies close together as Lady Gaga's chorus climbed through a roiling crescendo.\n\nThe touch sent a wave of electricity through her core. I guess anyone who calls me a slut is totally right. After that thing with Sam and Kira, now I just want more. Like, right now. They danced feverishly, nose-to-nose, as the beat pulsed around them.\n\n\"Turn back around,\" Mette said as the song ended. \"Check out what your girlfriend is getting up to.\"\n\nThe song flipped over to \"Bad Romance,\" but Alexandra didn't even hesitate. She turned around, grinding her body against Mette. Kira and Meg were climbing on top of the kitchen island. And I thought she might be kidding. Please don't fall. \n\n \n\nAlexandra guided the taller woman's hands down the front of her dress, raking at the sequined fabric before hitting bare thighs. She arched her neck, leaning her head back into her dance partner. Through half-closed eyes, she watched as Meg and Kira slid into the same rhythm, gyrating against one another.\n\nAnd of course Meg's an amazing dancer, Alexandra thought. Also, her fingers toying with the slit on Kira's dress is sexy as all hell. Jesus. She looked around the tightly-packed group. Sam and Luc\u00eda had also paired off, each whipping her long dark hair in a sultry mirror-image.\n\nThe music switched to Madonna, with \"Like a Prayer\" taking over. Same thing, different decade, Alexandra thought. She felt Mette's lips on the side of her neck, teasing the sweaty skin. Alright then. Fuck this, I'm going for it.\n\n \n\nShe twisted back around, pulling Meg's wife in for a deep kiss. Don't stop dancing. Just keep going, like making out with someone else's wife at a crowded party is totally normal. Mette pulled her in tightly, hand stroking the back of Alexandra's neck. God yes. And of course the fact that people are watching is turning me on. \n\n \n\nAlexandra's body responded immediately. Not sure where wet from earlier and wet from now intersect, but...yeah. Mette's hand strayed to her booty, toying with her through the fabric. She can't possibly know how much that's got me already. \n\n \n\nThey kissed off and on for the entirety of the song. Alexandra's body was in overdrive as the next song started. Another set of hands pressed on her sides.\n\n\"You little slut. Like the playlist?\"\n\nMeg. Right behind me. While I've been making out with her wife.\n\n \n\nAlexandra nodded. Now it was Taylor Swift. \"You Need Calm Down.\" I'd rather not. Thanks.\n\n\"I know, right?\" Meg's voice was right in Alexandra's ear. \"Welcome to my stupid golden hour. You seem to get it.\"\n\nOnly when she'd been sandwiched between the married couple for a full song did Alexandra even try to find Kira. Oops. Slut brain, fully engaged. \n\n \n\nShe needn't have worried. Kira was still on the kitchen island, joined now by two women Alexandra didn't know. Oh. One of them is that Liesl chick. Ren's wife. \n\n \n\nMeg vanished for a moment.\n\n\"Don't worry,\" Mette said, her Scandinavian accent cutting through the noise. \"Kira's fine. Meg has always wanted it to get crazy like this.\"\n\n\"Beyond just...\"\n\n\"Look around.\"\n\nAlexandra did so. Beyond the women dancing on the kitchen island, there were small groups and couples dancing. Her eyes landed on a woman in the crowd. Wavy, neck-length blonde hair. Green romper. She looks familiar. No idea from where. \n\n \n\nMeg returned, pushing a drink into Alexandra's hand.\n\n\"Drink up, New Girl. Mette and I have an idea that needs three people.\"\n\nOh? And what might that be? Alexandra felt warmth again radiate through her body.\n\n\"Do we?\" Mette could barely be heard above the din.\n\n\"Shut up, Scandi-cane. Yes, we do. Bottoms up!\" She toasted Alexandra with her own glass, and they both took long gulps.\n\nThe music changed again, to another dancy Taylor Swift tune. It seemed like everyone was singing along, lyrics shouted out of key.\n\n\"Fine,\" said Alexandra. \"What's your crazy idea, Megan?\" Shit, the alcohol is going to my head. And whatever this thing is, it's vodka, Kahlua, and maybe chocolate milk? Delicious, but my heels are significantly higher than my inhibitions right now. \n\n \n\nMeg spoke into Alexandra's ear.\n\nUgh. Whether it's the alcohol or Mette's hands all over me, I'm going to say yes. \n\n \n\nShe nodded.\n\n\"Good. Come with me.\"\n\n--\n\nA minute later, Alexandra helped her girlfriend down from the island.\n\n\"You want slutty, Kira?\"\n\nThe powerful kiss on her lips was the only response she got.\n\n\"No, really?\"\n\nKira nodded. \"Meg told me the idea. I like it.\"\n\n\"You awful bitch, enabling this behavior.\" \"Shake It Off\" was hitting its stride, frenetic energy filling the room.\n\n\"I'm enabling you. Now get up there. It's 11:45.\"\n\nAlexandra boosted herself onto the cold stone countertop. Immediately, Kira's hands pushed her onto her back.\n\n\"All you now. Be a good girl. Or don't.\" Kira's eyes beamed as she kissed the side of Alexandra's neck.\n\n \n\nAnd now's when I have to do it. One small step for a slut...\n\n \n\nShe took a deep breath and shimmied her dress up, exposing her hips, then her midsection. Meg stood by her head, a liquor bottle, salt grinder, and sliced lime in hand.\n\nJesus. I'm really doing this. I'm that fucking slut.\n\n\"BODY SHOTS!\" screamed Meg. She didn't wait. Immediately, Alexandra had a lime slice between her teeth and a pinch of salt on her abs. Mette bent down as her wife poured a shot of tequila down Alexandra's abs and into her belly button.\n\nMmmmm. Alexandra's back arched as Mette's lips hit her, taking first the salt, then the liquor off her warm skin. Finally, the tall brunette moved up and snatched the lime from her lips, lingering to plant a hungry kiss on her.\n\n\"Wooo!\" Yikes, Meg's gone full Woo Girl now. \n\n \n\n\"Woooooooooooo!\" And Kira too. \"Next!\"\n\nSam went second, slurping up the shot with the same alacrity as Mette.\n\n\"You look fucking hot,\" she growled into Alexandra's ear. \"Slut.\"\n\nFrom there it was a blur: Kira, Meg, and even Kelly took turns.\n\n\"Maybe we won't tell Julia about this?\" said a winking Kelly as she snatched the lime from Alexandra's teeth.\n\nSure, Sally Suburbs. Whatever you say. You're not the one with her dress hiked up, horizontal on a countertop, turned on as hell while everyone checks out her thong. \n\n \n\nSeveral more women took shots off Alexandra. She squirmed as Mette took a second turn, running her tongue along Alexandra's panty line. As she took the lime from Alexandra's mouth, she pressed both her lips and chest hard into Alexandra. Jesus, Mette Riis. If I had been standing, you would have just made my knees weak. \n\n \n\n\"Last call,\" yelled Meg, holding a nearly-empty bottle.\n\n\"Got one more?\" It was the woman in the green romper. A stranger. Even if she looks a little familiar. \n\n \n\nAlexandra grinned as the last shot of tequila ran across her abs. She felt the woman's hungry lips devour it, then a weight as she effortlessly swung her body onto the counter, straddling Alexandra.\n\nAlexandra gasped as fingers traced the centerline of her body, the slender woman slowly lowering her torso over Alexandra's. She used her fingers to snatch the lime slice away and toss it aside.\n\nGo for it, bitch, Alexandra thought. I want it. She got it. The stranger tucked her hands under Alexandra's chin, holding her in place as their lips met. Alexandra nibbled and probed as the woman took the lead, their tongues intertwining. And of course she's a fabulous kisser.\n\nThe music faded out, and with it the kiss. The blonde tucked a hair behind her ear and bent down to Alexandra's.\n\n\"If you and Kira ever want a third, she knows who I am. I just didn't realize I knew you, too. You'll think of it,\" she said, hopping off the counter as easily as she had mounted it.\n\nSo who the fuck are you? But before Alexandra could ask, the woman was gone. Alexandra sat up, inhaled deeply, and shimmied her dress back down as the next song began.\n\nHm. Some '80s song. Slow dance? \n\n \n\nHer alcohol-impaired mind whirred. Slow dance. Kira? Where is Kira?\n\nA hand around her waist provided an answer, guiding her to the center of the room.\n\n\"Hey.\" She rested her hands lightly on her taller girlfriend's shoulders as they slowly stepped in time with the music.\n\nKira pulled her close. \"First, you kiss me. Then we talk.\"\n\nYes, please. They kissed softly at first, then deeper. Alexandra's eyelashes fluttered, then closed. Aaaaaand when I kiss her, the room disappears from around me. In close, she could smell Kira's unique scent and feel the familiar contours of her body. Home. \n\n \n\nThey broke the kiss.\n\n\"So,\" said Alexandra.\n\n \n\n\"So you've had an eventful hour, skankaroo.\"\n\n\"Skankaroo?\"\n\n\"Hop hop hop from partner to partner to partner?\"\n\n\"Oh, shush. You know I'm always going home with you.\"\n\n\"Well, yes. But you're like the train from here to Boston, stopping at every town that casts a shadow in between. Sure, you end up at home. It just takes a while.\"\n\n\"Kira Elise Ralston Manning, do not even for a second pretend that you do not like it.\"\n\n\"Ooooh, both middle names. You must be pissed off.\"\n\nApparently this song is called \"Hungry Eyes?\" That's pretty much the entirety of the lyrics.\n\n\"I will be if you don't tell me who that little blonde chick is.\"\n\n\"You mean the one you were just making out with?\" Kira tilted Alexandra's face upward and kissed her softly.\n\n\"That one.\"\n\n\"Cecily Ann Reed,\" began Kira. \"Born October 14, 1994 in Winnetka, Illinois. Child of...\"\n\n\"Really?\"\n\n\"Of course not,\" said Kira. \"But her name is Cecily Reed, the age is about right, and she's from the 'burbs. She used to play for our team until she went to law school at NYU. Before that she worked as a paralegal at Mette's firm for a couple of years, which is how she got connected with us. She's cool.\"\n\nUh-oh. I was fine until the name Cecily Reed rang a bell.\n\n \n\n\"Um.\"\n\n\"What?\" Concern crossed Kira's face.\n\n\"Now I know why she knows me.\"\n\n\"Oh?\"\n\n\"She played soccer at Case Western, right?\"\n\nKira nodded, rocking Alexandra along with the music. Over her shoulder, Luc\u00eda and Sam matched them step-for-step.\n\n\"They recruited me. She even showed me around campus. Liked it, liked her. But, well, Case Western is in Cleveland.\"\n\nKira smiled. Ran her fingers along Alexandra's back. \"What, the weather was too nice? Or was the South Side's nighttime ambiance too much of a draw?\"\n\n\"Shut up, there's more.\"\n\n\"My first year, we played them at their place. It was only the second game I'd started. I got a red card. Only one I've ever gotten.\"\n\n\"So?\"\n\n\"My straight red was for a fucking shithouse of a tackle on Cecily Reed. When I got up, I thought I'd broken her leg. She was screaming.\"\n\nKira's eyes went wide.\n\n\"Well, it looks like she's forgiven you?\"\n\n\"Indeed. More than that.\"\n\n\"Oh?\"\n\n\"Oh. Have you ever...\"\n\nKira shook her head, kissing Alexandra on the cheek as the song began to fade out.\n\n\"Not that I wouldn't, but she was always seeing someone. She's a little short for me, anyhow.\"\n\n\"Too short?\"\n\n\"No. Why?\"\n\n\"Because she offered to be the skankaroo that hop-hop-hops into bed with us tonight. If you want, of course.\"",
        "Kira paused. \"What do you want?\"\n\n\"I want you. I want to fall asleep in your arms every night. I want you do to whatever your dirty fucking mind can come up with to my body. I want...\"\n\n\"So no Cecily then?\"\n\n\"The contrary. I want to see that little slut eat your cunt like her life depends on it.\"\n\n\"Well then,\" said Kira. \"We've got a second midnight kiss and then a date with Miss Reed.\"\n\n--\n\nAlexandra hung her coat in the closet. The laughter behind her went silent as heels clunked across the hardwood floor. Soon the sounds of clothes being shed and kissing filled the air.\n\n\"What, you don't want the house tour?\" she said, entering the bedroom.\n\nKira glared at her. Ooooh, her domme eyes. \"She's busy.\"\n\nCecily was indeed busy. Kira was sitting on the bed, with the smaller woman standing in front of her. Her mouth was tracing Kira's neck, hand brushing the long golden strands out of her path.\n\n\"Mmmm, perhaps I can help her?\"\n\n\"And me.\" That voice. So sexy, just taking charge, to the point. \n\nCecily looked up. \"Zipper on the back.\"\n\nAlexandra stood frozen in place.\n\n\"You heard her,\" said Kira. Well fuck you, then. I'm starting with her. Alexandra moved behind Cecily, slowly unzipping the green romper from the neck. The other two women kissed passionately as she worked, not even pausing while Cecily rolled her shoulders to allow the garment's removal.\n\nIt slid down, revealing a toned back crossed by a flesh-toned strapless bra. Aaaand that's coming right off, Alexandra thought, dropping the bra to the floor.\n\n \n\nCecily turned to kiss her just as Alexandra's hand brushed her nipple.\n\n \n\n\"Mmmmm.\" Her hand rose to play with Alexandra's hair, their lips joining. She nibbled gently, keeping her arms high as Kira bent to suck on one of the small, pert breasts.\n\nSomehow gotta get that romper all the way off. And Kira's dress too.\n\nKira's eyes met hers as they each worked on Cecily. Breaking the kiss, the smaller blonde's head leaned back, her wavy hair dangling in space.\n\nYou look absolutely delicious like that, thought Alexandra. She moved quickly to remove Kira's dress, pulling it over her girlfriend's head.\n\nCecily pushed Kira backwards onto the mattress, straddling her and kissing down her body. Her hands massaged Kira's large breasts. She kissed the cleavage as Alexandra felt her pulse racing. Just watching her is so fucking sexy. The way she's sliding down Kira's body...\n\n \n\nAbruptly, Kira flipped the smaller woman over, tossing her like a petite rag doll. Cecily gasped, pinned underneath Kira's muscular body. Alexandra's girlfriend tongued the side of their new lover's neck, then her collarbones, and then her sides. Just like she does to me, Alexandra thought. Next the panties are going.\n\n \n\nAlexandra felt heat between her own legs as Kira slid Cecily's panties away. She bent down and began to suck on a stiffening nipple, locking eyes with Cecily's hazel stare. The eyes then closed, the face contorting into and emitting a loud moan.\n\nOh, you know, second threesome of the night. Did some body shots. Made out with the party's hostess in front of everyone. Toooootally normal.\n\n \n\nAlexandra's body kicked into overdrive as she sucked the engorged nipple, rolling the opposite one delicately between her fingers. The blonde's hand moved to Alexandra's scalp, holding her in place.\n\nMore moans filled the air. Cecily bit down hard on her lip, eyes fluttering, muscles tensing underneath Alexandra.\n\nThen it stopped.\n\n\"Honey, would you like Alex to finish you off?\"\n\nOh, Kira. You love pushing me to the edge and then stopping, so why not someone else for a change? Oh, and yes, I want to eat her out. Not that you asked me. \n\n \n\n\"Mmmmm. Yesssss,\" came the labored reply.\n\n\"Well, you heard the lady,\" said Kira. She slid up the bed, deftly removing her own underwear as she went. Cecily, you lucky fucking slut, thought Alexandra.\n\n\"You've wanted it a while, haven't you?\" Kira had straddled the smaller blonde's shoulders, blocking Alexandra's view.\n\nI guess she's nodding.\n\n \n\n\"How badly, Cecily?\"\n\nThe reply wasn't loud enough for Alexandra to hear over the rustling as she repositioned herself between Cecily's smooth thighs.\n\nAnd of course I'm still wearing my dress, for whatever that's worth. The soaking slit glistened in front of her. A stray hair of Kira's had fallen out and rested just on the edge of Cecily's trimmed triangle.\n\n\"Please!\" Cecily's voice was finally loud enough to be heard. Poor little lady. I've been in that position, begging to suck her pussy. I hope she lets you, and soon. \n\n \n\nAlexandra's own pussy gushed as she slid a hand under her dress, slowly inching her mouth toward Cecily's crotch. Her smell was sweet and delicate. Mmmmm. Cannot. Wait.\n\n \n\nThe taste matched the smell when Alexandra's tongue met the warm flesh. She sucked gently on the labia, feeling the heat spread throughout her own body in parallel with Cecily's pleasure. In seconds, she was fingering herself in time with her mouth's ministrations.\n\n \n\nAlexandra's eyes traveled up Cecily's body. Her stomach clenched and released in time with Alexandra's mouth, hard pink nipples pointing skyward on her small chest. Well, at least she's enjoying herself, Alexandra thought.\n\nCecily's face was out of view. Instead, Alexandra watched as her girlfriend rode their new lover's face, juices shining on Cecily's exposed chin.\n\n \n\nMmmmmmm. New moans filled the air. Kira, not holding back.\n\n \n\n\"Fuck, yes! Mmmmmmm! Yes, more!\"\n\nAlexandra could see Cecily's neck crane, pressing her face even harder into Kira's sex. She redoubled her own efforts, tongue parting Cecily's lips and mouth hungrily lapping up the sweet flavor. Her tongue went into overdrive, moving between the tight hole and the clit. With a deft flick across the latter, Cecily's body jolted.\n\n\"Ooooh!\" Kira had apparently felt the effects too.\n\nMore, then. Alexandra's tongue lashed at the little bud, each stroke causing the blonde's thighs to tighten around her. Her free hand slid underneath one, squeezing the pale booty hard.\n\nCecily's hips began rising and falling to meet each of Alexandra's movements. Getting close.\n\nKira's noises had also increased. \"Fuck! Yes! Make me fucking cum! Yessss...eeeeeeee!\"\n\nFinally, Alexandra gave one last squeeze. This time, Cecily's body went rigid. Her hands clenched at the sheets, torso rolling gently side to side as she squirmed under the throes of the orgasm. Her pussy gushed, the lubrication coating Alexandra's lips. Mmmmm. \n\n \n\nAlexandra managed to keep her atop the crest for several long seconds. The thighs squeezed three times, then relaxed.\n\n \n\nYou better keep working on Kira, slut, Alexandra thought. The moans from her girlfriend alerted her that Cecily's orgasm hadn't completely drained her.\n\n\"Fuck! Yes! Right there!\" Alexandra's eyes traveled up her girlfriend's back, where the muscles had gone taut and sweat glistened on the skin. Kira's head was thrown back, growls mixing with the moans as she ground her pussy on Cecily's face.\n\n\"Unnnnnh! YEEEEEEEEES!\" Kira's body jolted as the orgasm overtook her.\n\nAlexandra found her hand again playing with herself, watching her girlfriend being wracked by a strong climax. For a moment, her eyes closed. The evening ran past her: the party; Sam; Mette; body shots on the kitchen island; Cecily. Kira. Kira all throughout.\n\nWhen they opened again, Kira was standing, kissing Cecily lightly on the lips. She whispered something to the red-faced woman, then winked at Alexandra and headed for the bathroom. A moment later the shower started.\n\n\"Hey,\" said Alexandra, sliding alongside Cecily. \"So you've forgiven me for that foul?\"\n\nCecily kissed her on the lips. They slowly nibbled each other, the taste of Kira fresh on the blonde's lips.\n\n\"Depends,\" she responded. \"Are you planning on taking that dress off for me?\"\n\n\"Maybe. If I do, then what?\"\n\n\"You know,\" Cecily said, \"when you were 18 and we were recruiting you, I thought you were super cute. I'd have had so much fun with you, on and off the field.\"\n\nDespite everything she'd done, Alexandra found herself blushing. \"So?\"\n\n\"So I'll pretend you didn't almost break my leg if I finally get my hands on you, sweetie.\"\n\nThe noise of the shower slackened for a moment.\n\n\"Alex, are you coming?\" shouted Kira.\n\n\"NO!\"\n\nWith a giggle, Cecily tucked a wavy hair behind her ear and pulled Alexandra closer.\n\n--\n\nThanks for reading lucky Chapter 13. As always, please leave feedback, comments, ratings. \n\n \n\nI pay attention to them all, except if you're that person who drops 1* ratings on my highest rated stories like clockwork at the end of each month. For you -- if you're reading, as opposed to just flinging ratings mud -- this chapter has a bunch of Taylor Swift references. Your homework is to listen to Track 6 of her album Speak Now and drop a comment about how that song applies to you.\n\n \n\nFor the rest of y'all, love ya and I'll be back soon. Be safe, be kind, be happy. ~BE\n\n \n"
    ],
    "authorname": "Blair_Erickson",
    "tags": [
        "3some",
        "blonde lesbian",
        "college",
        "cunnilingus",
        "exhibitionism",
        "exhibitionist",
        "lesbian sex",
        "lesbian threesome",
        "public",
        "threesome"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/a-new-alexandra-ch-13"
}
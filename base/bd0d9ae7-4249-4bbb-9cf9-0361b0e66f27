{
    "title": "Kinky Tales: I'm Pegged By My Wife",
    "pages": [
        "Summary:\n\nNote 1: This is a Halloween 2015 Contest Story.\n\nNote 2: This is one of two different versions of this story; you can read the wife's much longer version called Kinky Tales: I Pegged my Husband\n\nNote 3: This is dedicated to:\n\n<ol> <li> The real Chris and Dani who this fantasy is written about.</li>\n\n<li> It is also dedicated to all married couples willing to listen to their spouses and their fantasies whatever they may be.</li> </ol>\n\nNote 4: Thanks to goamz86, Robert and Wayne for editing this story.\n\nKinky Tales: I'm Pegged By My Wife\n\nIt wasn't one day where I thought, 'Hey, I want to get ass fucked'. No, it was a lengthy growing curiosity.\n\nI grew up in a homophobic home where my dad used the word 'faggot' liberally and actually pulled an earring out of an employee who came to work with one in his ear.\n\nThankfully, I never considered myself gay. I have, even to this day, never thought of a man sexually, even though I have slowly become intrigued by cocks.\n\nAnyway, I'm an ex-NHL'er, no Crosby or anything, but had a promising career until a knee injury ended it. I lingered in the minors for a few more seasons before retiring. I then had the opportunity to do some public speaking and it took off, creating an accidental new career. I have since travelled 46 states, 6 provinces and 11 countries with my message of perseverance.\n\nIn case you are curious (pun intended based on what this story is really about), I'm 42, 6'2, 230 pounds, with blonde hair and blue eyes. I'm still well built and very athletic. My cock is only 5 and a half inches, but thicker than most.\n\nI've been married to my beautiful wife Dani for years. She is 5'3, 150 pounds (not fat by any means, but well-built and in great shape), with big 36D boobs and a nice ass I love to squeeze. I love her completely and our two boys, so I would never cheat on her... even though my curiosity has indeed grown over the past few months.\n\nWe still had good, if not great sex, but, like most married couples, the burning insatiable passion from our younger years had dwindled somewhat and our sex life had become rather predictable.\n\nOf course, I was partly to blame. I was gone a lot. Often tired when I was home. And lastly, I had become less aggressive.\n\nDani, on the other hand, liked sex, but had become much less wild as the years went by and I would argue we both knew we were in a rut.\n\nSo, as I traveled I read a lot of erotica, watched a lot of porn and my fetishes changed slightly. I originally searched for lesbian stories, group sex stories, and stories with nylons included. I also watched nylon porn scenes like Housewife Kelly, especially the Real Estate scene, Holly Heart who often wore nylons and Alura Jenson who had a wicked tongue, huge knockers and almost always wore thigh highs.\n\nYet, after reading all the best stories, I began reading some of my favourite writers... even stories in categories I usually wouldn't read like incest, transsexual and gay.\n\nIt wasn't like I just instantly became curious. But over a few months, I began to wonder. What would it be like to suck a cock? What would it be like to cross dress? What would it be like to have something in my ass?\n\nI resisted my growing curiosity for a few more trips before I finally went to an adult store while in San Francisco (it seemed like the right place to explore my anal curiosity). I ended up buying a three pack of butt plugs and lube.\n\nBack at the hotel, after a few beers, some erotica stories and a porn scene starring Phoenix Marie, who often wears beige thigh highs in her stories and takes it in the ass, I lubed my butt and the smallest butt plug and put it in my ass.\n\nA slight burn occurred, but barely, and after fifteen minutes of slowly stroking my fleshlight (a man's best friend) while watching Phoenix be violently dominated in a nasty lesbian scene as a bridesmaid dominated her anally, I shot my load.\n\nMy next trip, I tried the medium plug. It was a lot wider and longer and created a more intense burn... yet also a more intense orgasm when I got off half an hour later after watching three hot and mean episodes, the last one called Ms. Boss where a hot blonde bitch dominates an employee.\n\nAs I explored my prostate and anal male pleasure, I wondered what it would feel like to have a vibrating toy in my ass as I wasn't ready for the massive third plug.\n\nSo I bought a vibrating curved toy that had a variety of vibration speeds and patterns. Over the next month I tried every pattern, every speed. The orgasms were better and I began to get addicted to having it in my ass.\n\nI also watched a lot of rough anal porn like:\n\nAshley Blue being blackmailed and roughly sodomized.\n\nBobbi Star taking two or three cocks in almost every scene she did\n\nOf course, I then wondered what it would be like to be fucked, to be feminized a bit. So, first I ended up buying pantyhose and started wearing them while I had the vibrating dildo in my ass and even under my outfits while I spoke at conferences.\n\nYet, the porn I watched also got nastier:\n\nLike Sarah Shevon as a teacher in a five guy gangbang scene where she took two cocks at once in her pussy and ass or Veronica Avluv as a female reporter who is gangbanged by players in a locker room or the MILF Allison Moore getting gangbanged by a bunch of men at her wedding. Of course, I couldn't not watch my favourite Phoenix Marie as a feminist who is taken, humiliated and ass dominated by a reporter trying to prove she isn't as innocent as she appeared.\n\nThe reality was the kinkier it was, the more it turned me on. I suppose this was because my own sex life could never be that kinky.\n\nI tried to bring it up on the phone with Dani many times and in person... but I couldn't. She saw me as the man. I just couldn't tell her. I couldn't ask her to fuck me. So, I figured I would fuck myself.\n\nI bought myself a dildo that suctioned to the wall so I could literally fuck myself. Like all the other toys, it was very unique and exciting at first, but in the end it was awkward and frustrating. It only made me want to tell Dani even more.\n\nI googled best anal toys for men and bought yet another toy... a rude boy. I was trying it for the first time when my wife finally returned my text, a couple hours after I had texted her (which is very unlike her). I was in my hotel room, in only pantyhose, boxers and the rude boy in my ass vibrating at full speed with a unique pattern that also teased my scrotum when her text came.\n\nHer text was oddly ominous and unlike her:\n\nI'll give you a call in a few. I have a surprise for you!\n\nMy newest video and erotica fetish was having the guy watch his woman get fucked. I wasn't sure I could ever allow another guy to fuck Dani, but in fantasy it really got me off. My fleshlight was nearby and already lubed as I tried not to come before she called. Yet, a few became fifteen and I was just reaching for my fleshlight, the new anal toy really making me feel good, as was the scene I was watching: : Zoe Holloway getting fucked in tan thigh highs outside while her husband watched.\n\nSuddenly, my phone rang. I turned the volume on my computer to mute, but kept the scene running as I reached for the phone.\n\nAnswering it, I made a joke about my earlier text, as I acted overly dramatic, \"Thank God, you weren't kidnapped.\"\n\n\"I was,\" she replied, her tone equally as dramatic, \"by Bethany.\"\n\n\"Oh God,\" I said, Bethany, her youngest sister by 15 years, and my wife never getting along.\n\n\"Actually, it was rather interesting,\" she admitted, which was surprising.\n\n\"How so?\" I asked, curious, as their time together usually ended up in yelling matches.\n\n\"Well, she decided I needed a makeover,\" she revealed.\n\n\"Oh God,\" I said, immediately worried, trying to be supportive I added, \"I can't even imagine what that could mean.\"\n\n\"It definitely wasn't a normal makeover,\" she responded, her tone confusing to read.\n\n\"Okay, this is getting cryptic,\" I pointed out. I then joked, a fantasy I had often had before I started getting more sick and twisted (Bethany was ridiculously hot and flirty), \"What did she do, turn you into a lesbian?\"\n\nShe responded with a laugh, which at least helped me with her tone, \"Yes, I'm a raging pussy muncher now.\"\n\n\"That is hot,\" I said jokingly, even though quite frankly my cock stiffened, which made me glance at Zoe, who was sucking the cock that had just been in her pussy, while her husband watched.\n\nHer tone definitely sultry, she was clearly in a rare playful mood, \"You'd like that, wouldn't you? Watching your wife between the legs of another woman?\"\n\nKnowing this was a tricky question, like when she asks if she looks fat in something, I paused. I then played the safe card, \"I plead the fifth.\"\n\nShe quickly read through me like she always does, \"I'll take that as a yes.\"\n\nI heard a buzzing. Was she playing with herself too? I asked, \"What is that?\"\n\n\"One of my new sex toys,\" she answered.\n\n\"One of?\" I asked, knowing her toy box was rather limited.\n\n\"Bethany also felt I lacked in the self-help department,\" my wife explained, which added to this strange conversation. We both were using sex toys on ourselves. Although, unlike her, I wasn't letting her know.\n\nI was about to speak when she let out a moan.\n\nTurned on and curious, I asked my usually tame wife (our phone conversations were usually about the kids, her family or other mundane things), \"Did you just put it inside you?\"\n\nShe didn't answer the question, instead asking me, \"What you wearing?\"\n\nI wasn't going to say pantyhose, so I lied. \"Just a t-shirt and shorts.\"\n\n\"I'm completely naked,\" she revealed, before adding after a moan, \"even my pussy is completely naked, Bethany made me get a Brazilian.\"\n\n\"Oh my,\" I groaned, as I slowly rubbed my cock in my pantyhose as I envisioned my wife's pussy completely shaved.\n\n\"Join me,\" she ordered.\n\n\"What's gotten into you?\" I joked.\n\nHer naughty side coming out, she answered wittingly. \"At the moment, a six inch vibrating rabbit.\"\n\nMy cock flinched.\n\nShe moaned the question, \"Are you getting undressed?\"\n\n\"Indeed,\" I answered, even though I already was.\n\n\"Good,\" she moaned again, before talking dirty to me. \"I want that dick nice and hard for me.\"\n\n\"Already done,\" I replied, which was true. My cock was iron hard. The video I had been watching, mixed with the powerful vibrations of the bad boy inside me and my wife's continuing shocking revelations and I was ready to blow... literally.\n\n\"Was it the lesbian talk?\" she asked, then added before I could respond, \"Do you want to see me with another woman?\"\n\nThe obvious answer was 'God, yes'. Yet being the smart husband I answered again, \"I again plead the fifth.\"\n\nShe said, not digging deeper, \"Too bad they don't make toys for boys.\"\n\nI had to hold back a laugh. I had one in me, a bunch more in the bag, not to mention the fleshlight I was about to use on myself. Yet, instead I answered with a joke. \"They do, they're called inflatable dolls.\"\n\nShe quipped. \"In theory the perfect woman. She never says no, she doesn't want to cuddle after sex and doesn't nag you about leaving the seat up.\"\n\nI laughed, my wife often funny, \"All true, I suppose. But you can't underestimate the touch of a woman.\"\n\n\"Any woman?\" she asked, which surprised me. What was the purpose of that question? I had long learned to try and read past the seemingly harmless way a question was asked. Almost always, a question from a woman had a purpose. And almost always, there was a right and wrong answer.\n\n\"Only one,\" I slyly answered, not allowing myself to get in trouble. I was a veteran at answering the right way; years of experience answering the wrong way and sleeping on the couch, getting a kick in the shins or the icy glare that meant 'we will talk about this later' finally paying off.\n\nShe purred, her tone back to sultry, as she promised, \"Good answer, and you're going to get very lucky when you get home.\"\n\nI teased back, having heard this when we were out, but then finding her too tired to follow through once we get home, as I moved the fleshlight to my cock and allowed the pussy lips to lower on top of my dick, \"Promises, promises.\"\n\n\"I plan to make your biggest fantasy come true,\" she said with a moan.\n\nI joked, both of us in love with Miranda and Blake, \"You are going to allow me a night with Miranda Lambert?\"\n\nShe responded, \"Only if you make it a threesome with Blake Shelton too.\"\n\nAnother odd statement, as she had never used the word threesome ever. I joked, \"Whose fantasy are we having now?\"\n\nShe asked, \"Are you pleasuring yourself?\"\n\n\"Just slowly stroking,\" I answered, which was true. I loved the feeling of using the fleshlight slowly. Allowing my orgasm to build. The anal vibrating toys only seemed to enhance the slow build and also the pleasure at eruption.\n\nShe whispered, her breathing seeming to get heavier, \"I want to come together.\"\n\n\"Me too,\" I agreed with a groan, glancing at the video and realizing it had ended. I moved the mouse to part way through the scene and pressed play. I watched Zoe ride the guy's cock, her beige thigh highs only enhancing the scene.\n\n\"Tell me your biggest fantasy,\" she requested as a moan, which was hot.\n\nI had many. This was yet another opportunity to mention my fixation on getting ass fucked. Yet, I didn't want to ruin the moment. Instead, I just said the obvious truth of every man, \"I have a lot.\"\n\nShe insisted, \"Tell me one.\"\n\nI was tentative. I had so many. Being ass fucked by her; taking her ass; quite frankly, anything to do with the ass. Watching her with another man; watching her get gangbanged; watching her in a lesbian 69. The scene I was watching now come true would be incredibly hot. Yet, I couldn't choose any of those. I tentatively said, \"Okay,\" trying to save time.\n\nShe said, \"No judging,\" which immediately made me ponder telling her my fantasy of getting ass fucked by her. Yet, before I could seriously consider this she shocked me again, this time to the core, \"But just so you know I currently have a small butt plug in my ass.\"\n\nI didn't believe her. Anal sex was a clear no-no. The ass a strict outie only... her words. I called her bluff, even though I was praying she wasn't lying, \"Now I know you are playing me.\"\n\nShe asked, continuing to play sexy vixen, \"Want to see a picture?\"\n\nI asked, beginning to think she wasn't pulling my leg, even though it still seemed far-fetched and unlikely, \"You're serious?\"\n\n\"Deadly,\" she responded, before adding, my cock instantly flinching in the fleshlight, \"Both my holes are filled right now.\"\n\n\"Holy fuck,\" I groaned, just the vague possibility that was true enough to make me want to come now.\n\nShe said, \"Give me a second.\"\n\n\"Okay.\" I agreed, wondering what she was doing. I quit stroking my cock, not wanting to come yet. Instead, I went to my videos and chose a new one.\n\nI loved the relatively new porn star Jillian Jensen. She looked like the girl next door who could be nasty as hell, but whose eyes alone could get me hard. I had a few of her videos: lesbian, interracial, anal, bukkake, but I chose a lesbian one with Abbey Brooks as her step-mom. Incest had also begun to intrigue me and in this one Jillian is a stuck-up bitch who uses her hot body to get herself a job that turns into a hot threesome.\n\nI pressed play and watched the beautiful Jillian use her beauty to get what she wanted.\n\nIt was a couple of minutes, enough time to watch Jillian slip off her shoe and rub the manager's cock through his trousers with her black nylon clad red painted toenails (which was my fetish). Her sexy lips, her innocent smile and her sultry voice were easily the hottest in porn, maybe in all of acting.\n\nI was entranced by Jillian's seduction as Dani asked, \"Like?\"\n\nI was confused, as I had lost focus as I drooled over Jillian. I checked my phone and saw no new messages. Confident I didn't miss anything, I said, \"I didn't get anything.\"\n\n\"Oh fuck,\" she said, sounding concerned.\n\n\"What?\" I asked worried by her tone, as I watched Jillian lean over a desk, fish out the guy's cock and begin sucking. I wished I could hear her words and moans. She was a porn star who really seemed to enjoy whatever she was doing: sucking cock, eating pussy or getting fucked in her pussy or ass.\n\n\"Fuck! Fuck! Fuck! I sent the picture to Bethany,\" she admitted.\n\n\"Oh, shit,\" I said.\n\nShe didn't answer at first and I just waited as I watched Jillian worship that cock. She took her time, using her hands and tongue to pleasure the dick.\n\nDani returned a moment later, her tone back to sexy, \"Sorry for the delay, do you like?\"\n\nI grabbed my phone and gasped, \"Holy fuck!\" It was a picture of my wife with a vibrator I had never seen in her pussy and a butt plug in her ass. She wasn't lying.\n\nShe asked, her tone sultry, \"Is that a yes?\"\n\nI answered, still staring at the picture of my wife, \"I can't believe what I'm seeing, but a million percent yes.\"\n\nShe explained, \"Bethany convinced me to stop being a prude and experiment.\"\n\nStill wanting to stress I loved her regardless of her sister's assessment, I said, \"Well, I never want you to do something to prove yourself to someone else, including me.\"\n\nShe countered, \"But what if I want to?\"\n\nI said, with a big smile she couldn't see, \"Then the luckiest man on earth, just got luckier.\"\n\nShe said, \"I love you.\"\n\n\"I love you too, sweet pea,\" I said back, loving her for who she is and also who she was being tonight.\n\nShe said bluntly, \"Now let's phone sex.\"\n\nI asked, still staring at the picture of my wife with both her holes filled, \"Do you like the toy in your ass?\"\n\n\"Actually, truthfully, I kind of want to switch to the bigger one,\" she admitted, which made my cock flinch.\n\nI said the obvious, \"Shit, I wish I was there,\" as I glanced at the video and saw the step-mother had joined and was sucking cock, while Jillian sucked on his hairless balls. I wondered if I should shave my downtown area.\n\nShe shocked me again with a blunt question I never, ever thought I would hear come out of her lips, \"Do you want to fuck my ass?\"\n\nI wanted to scream yes. I wanted to tell her it was one of my biggest fantasies. Yet, not wanting to sound like a pervert, I lied, \"I truthfully never considered it.\"\n\n\"Really?\" she asked, sounding insulted by my answer.\n\nImmediately in fix mode, I explained, \"I don't mean that in a disrespectful way. It's just not something I imagined you would be interested in doing.\"\n\n\"And if I am?\" she asked.\n\nI answered, as I skipped ahead in the video wanting to see Jillian ass fucked, even though I couldn't remember if she was in this one. Thankfully, there she was, taking it in the ass on his desk while her step-mom felt her up. I watched the scene, and then glanced at the photo of my wife as I said, meaning it, \"I would do anything with you.\"\n\nShe pointed out playfully, \"Anything is a pretty big word.\"\n\nI said, thinking maybe one day she would fuck my ass, giving just the slightest hint of my own growing submissiveness, \"And I mean it.\"\n\nShe moaned, \"Good to know, but now I need to come, baby. Please tell me a story... a naughty, naughty, story.\"\n\nI pondered a plethora of stories before deciding to do one of my old fantasies... the slutty cheerleader. I began, \"Well, I return home from a long week to find my wife in a cheerleader outfit and thigh highs.\"\n\nShe moaned, ever so softly as I continued, \"You're waiting at the door, pom poms in hand.\"\n\nShe asked, through moans, \"Am I on my knees like a slutty college cheerleader?\"\n\n\"Oh yeah,\" I groaned as I began using the fleshlight again, the image of my wife on her knees in a cheerleader outfit turning me on. I quipped, \"On your knees and ready to please.\"",
        "I thought I sounded corny, but she replied, \"That can be arranged.\"\n\nI continued, closing my eyes, no longer needing porn to get off, but just the sound of my wife's voice, stroking my raging hard-on with the fake pussy, \"I walk to you, you wordlessly take out my cock and slide it in between those perfect lips.\"\n\n\"You mean my cock sucking lips?\" she interrupted.\n\n\"God, yes,\" I moaned, turned on by her nasty tongue. \"You bob hungrily like the cum hungry slut you are.\"\n\nShe shocked me again as she asked, making this a rather interactive story, \"Is your first load going down my throat or all over my face?\"\n\nI grunted, bewildered and turned-on by my wife's surprising nastiness, \"All over your beautiful face.\" I then warned, my balls boiling, \"I'm so close, baby.\"\n\nHer tongue got nastier as she demanded sultrily, \"Come all over your dirty, cum hungry, cheerleading cum slut.\"\n\nI grunted, furiously pumping the fleshlight as I shot my load in the pussy and ordered, \"Take my load, my cum slut!\"\n\n\"Fuck!\" she screamed, as her orgasm hit.\n\nAs I finished spewing my load in the fake cunt, imagining it was her ass, I ordered, still in role play mode, \"Clean off my cock.\"\n\nShe moaned obediently, \"Yes, Baby.\"\n\nNeither of us spoke as we both lay there spent, me reliving the bizarre conversation and revelations.\n\nEventually I spoke, making a joke, \"Well, I'll be sure to thank Bethany.\"\n\nShe laughed weakly, \"You do that.\"\n\n\"That was utterly amazing,\" I added, wanting to make sure she knew how much I enjoyed her surprise.\n\n\"Agreed,\" she replied, clearly exhausted from the orgasm.\n\n\"Same time, same place?\" I questioned.\n\nHer answer bummed me out. \"I have bridge tomorrow,\"\n\n\"Right,\" I sighed.\n\n\"But I'll wear the second butt plug in my butt for you,\" she offered, surprising me again.\n\nExcited, I asked, \"With a picture?\"\n\n\"Maybe,\" she teased.\n\nI reminded her, \"I'll be home Friday by supper.\"\n\nShe responded playfully, \"And I know what you are having for dinner.\"\n\nI responded, \"Yummy. I have a pretty big snack for you too.\"\n\nShe reminded me, \"And we have Halloween Saturday.\"\n\nI had actually forgotten that, but said, pretending I hadn't, \"Looking forward to it.\"\n\nShe asked, her tone suspicious, \"And you will wear whatever I choose?\"\n\nI said, Dani always choosing our couples outfits, \"I always do.\"\n\n\"Good, because you did say 'anything',\" she reminded me, her tone again suspicious.\n\n\"Now you have me worried,\" I pointed out.\n\nShe said, \"This weekend is fantasy fulfilment weekend... for both of us.\"\n\nI pointed out, \"Well, it's going to be hard to focus on work with revelations like that.\"\n\nShe teased, \"That's the point.\"\n\nI said, \"Fuck, I love you.\"\n\nActing like me, she quipped back, \"I don't mind you, myself.\"\n\nAfter another second, just as I was about to say something witty, she added \"but now I'm exhausted and need to get to bed.\"\n\nFeeling wiped too, I concurred, \"Me too, you really wore me out.\"\n\nShe promised, \"Wait until Saturday, I'm going to literally fuck the shit out of you.\"\n\n\"I can't wait,\" I replied, even as I imagined she didn't mean it the way it came out.\n\n\"Good night,\" she said.\n\n\"Good night,\" I said.\n\nI closed down my computer, the Jillian and Abbey scene long over, quickly cleaned up, cleaned the toys and got back into bed... one thought bouncing around... was there any chance that she would be okay with fucking me?\n\n.....\n\nNot surprisingly, the next morning I woke up hard like I always do, and yet stunned by last night's conversation and role play.\n\nI flipped open my computer, the slim possibility that I may be able to convince my wife to fuck me exciting me, I clicked on one my favourite pegging clips. It is called 'Ass Addiction Therapy' and has everything I could possibly ask for in a clip: a beautiful strong woman played by Sarah Diavola who uses a very unconventional way to discipline a man obsessed with ass. Add the fact that she is in sheer pantyhose, talks hot and pegs the guy, and it always gets me off.\n\nI imagined that Sarah was my wife as I gave my morning wood attention. Imagining my wife dominating me, making me her bitch.\n\nUsually, every time I shoot my load I instantly feel guilty. These kinky ideas are too extreme and I need to control them. Yet, after last night's conversation, I began to wonder if I was the deviant I thought I was.\n\nDeciding to surprise her, I shaved my entire cock region, which took a good hour and lots of patience. When done, my dick looked way bigger. I hoped this would make her blowing me more pleasant: no pubic hairs going in her mouth, something that often wrecked the mood.\n\nI texted her, opening for a replay of last night's craziness:\n\nLast night was amazing; text me when you get home from Bridge night.\n\nLove you.\n\nShe texted me back a couple hours later:\n\nOf course! And I expect you ready for action.\n\nMissing her in ways I usually didn't when I was preparing to give a speech, I couldn't stop thinking about her at all.\n\nI decided to give her a quick call to tell her the impact she had last night.\n\n\"Hey, honey,\" she greeted, her breathing a little off.\n\n\"Have not been able to stop thinking about you all day,\" I admitted, feeling eighteen again.\n\n\"Is it because you are looking forward to the cheerleading outfit I bought today, or to sodomizing your wife?\" she asked, which shocked me even more, and made my dick instantly harden.\n\n\"I was going to say because I love you,\" I replied with a laugh, \"but those are great reasons too.\"\n\n\"Where are you?\" she asked.\n\n\"At a high school. I speak in twenty minutes,\" I revealed.\n\n\"Too bad,\" she purred, her tone implying something naughty.\n\n\"Why?\" I asked, curious.\n\nShe answered, her tone so sexy, \"I was going to put a show on just for you.\"\n\n\"What kind of show?\" I asked, loving my new wife.\n\nShe ordered, \"Find a private spot. And when you do, FaceTime me.\"\n\n\"Okay,\" I agreed, hanging up and looking for a place to have some privacy. Finding a teacher's single washroom, I went to it and looked the door. As soon as I did, I sat down on the closed toilet seat and FaceTimed my wife.\n\n\"Hi, baby,\" she greeted.\n\n\"Hi, sweet pea,\" I greeted, only able to see her face, although I couldn't figure out where she actually was.\n\n\"Want another surprise?\" she asked, smiling sexy.\n\n\"I'm not sure I can handle it,\" I joked.\n\n\"Ironically, me neither,\" she joked back.\n\n\"What are you doing?\" I asked, her body moving, FaceTime seemingly shaky.\n\n\"Truthfully?\" she asked, a big sly smile on her face.\n\n\"No, lie to me,\" I joked, always loving to be able to banter with her.\n\n\"I'm attempting to fuck my ass with a suction cup black dildo that vibrates while talking to you,\" my wife revealed, shocking me to the core.\n\n\"What?\" I asked, even as I wondered if I heard it.\n\n\"Oh God, it's bigger than the plugs,\" she moaned.\n\n\"You're serious?\" I questioned, even though the look on her face was pretty good evidence of what she was doing.\n\nShe answered, \"Bethany has created a monster.\"\n\nI countered, still in awe how Bethany had ever pulled this off, \"More like a goddess.\"\n\nShe suddenly yelped and I asked, \"What? You, okay?\"\n\n\"Cold wall,\" she laughed.\n\nI asked, after a brief laugh. \"So you really have a dildo in your ass?\"\n\n\"All in,\" she nodded.\n\n\"Wow! I would never believe it if I didn't witness it with my own eyes,\" I said, everything I thought I knew suddenly shifting.\n\n\"Do you think I'm a prude?\" she asked.\n\n\"What?\" No,\" I said. Surprised by the question. I explained, \"There were just some things that I understood were off limits.\"\n\n\"Good,\" she moaned before adding, \"Wait a second, let's give you a better view.\"\n\n\"Okay,\" I agreed, as the picture got all shaky.\n\n\"Where are you?\" she asked.\n\n\"The teacher's bathroom,\" I answered, trying to watch her, but it was now completely out of focus.\n\n\"Is your dick out?\" she questioned.\n\n\"No,\" I admitted, although I quickly rectified that situation.\n\n\"Is it hard?\" she asked, as her whole body suddenly came into view.\n\n\"As a missile,\" I nodded, as I got a look at my wife, on all fours, apparently riding a dildo in her ass.\n\n\"Show me,\" she demanded.\n\n\"Okay,\" I agreed, placing my stiff cock in view.\n\n\"Can you see all of me?\" she asked, looking directly at me.\n\n\"Perfectly,\" I answered, feeling like the luckiest man on earth.\n\n\"So you can see this?\" she questioned, as she began riding the cock in her ass.\n\n\"Oh God,\" I groaned, as I watched the hottest porn film ever.\n\n\"I'll take that as a yes,\" she moaned playfully, with a sexy smile on her face.\n\n\"God, yes,\" I moaned loudly, as I began stroking my cock.\n\n\"Tomorrow it'll be your cock in my butt,\" she purred.\n\n\"I can't wait,\" I said, beginning to pump my cock furiously, just as she seemed to get into a decent flow.\n\n\"Are you going to ream my ass, baby?\" she asked, using words I had never heard from her before.\n\n\"You want to be used like a slut, don't you?\" I asked, sensing she wanted to be fucked like in many of the porn scenes I had watched... maybe she was submissive like Brooke Ultra in the couple scenes I have seen her in, or Mia Malkova in a Tonight's Girlfriend episode.\n\n\"At least for a night,\" she moaned, before adding, continuing to shock me, \"I'll be your three-hole fuck toy.\"\n\n\"Shit,\" I groaned, unable to hold back any longer as cum began spraying out of my cock.\n\n\"Oh yes, baby,\" she moaned, now bouncing fast and hard on the dildo, \"I so want your cum.\"\n\n\"Come, my little ass slut,\" I demanded, tying to be the dominant like in many of the videos I watched.\n\n\"Oh yes,\" she whimpered, \"I can't wait to feel your big dick in my asshole.\"\n\n\"I'm going to pound the living shit out of you,\" I promised, wanting to get her off in the brief time I had left.\n\n\"You better have more than one load for me,\" she stressed.\n\n\"I better not talk to you tonight,\" I joked, before looking at my watch. \"Shoot, I'd love to watch this all day, but I speak in ten minutes.\"\n\n\"Okay,\" she nodded with a pout \"I'm going to have to finish this the ole fashioned way.\"\n\n\"Sorry,\" I said, feeling bad about not being able to be there until the end, \"I'll make it up to you tomorrow.\"\n\n\"You better,\" she quipped, before adding the words that shocked me to the core, the words I had dreamt about for a long time, \"or I'll fuck your ass.\"\n\nI was speechless. I assumed she was just being funny, yet the idea was now floating out there. The spark had been lit. Yet, I didn't have time to pursue this window opening. Instead, I babbled, \"Um, okay, good to know.\"\n\nThen she pushed the envelope for me. She teased, yet her smile seemed genuine, \"Maybe I'll have to buy a strap-on for you.\"\n\n\"You want to fuck me?\" I asked, the conversation I've been dreaming of suddenly occurring.\n\nShe responded, crushing my brief moment of hope, \"I was just kidding, stud.\"\n\nI laughed, trying to act casual as if I knew she was, even as disappointment washed over me.\n\n\"You better get going,\" she reminded me.\n\n\"Yes, I better,\" I agreed, still thinking of the possibility just denied.\n\n\"Break a leg and tomorrow you take my ass,\" she finished and hung up.\n\nI quickly put my dick away and returned to the gym where I was about to be introduced... my head spinning with the possibilities offered and then taken away.\n\nThankfully, I had no time to consider this as I headed on stage.\n\nBack at the hotel that night, I watched a few videos but ended up with one starring Alexis Grace called 'She Owns Her Manhood'. It got my eye instantly because of her long legs in beige shiny pantyhose, big tits and pony tails, and the title. Hearing my wife so nasty, the idea of being dominated by her became my new greatest fantasy.\n\nI put the rude boy in my ass, put on a pair of pantyhose, and got the fleshlight ready for when I was finally ready.\n\nI watched as Alexis took control of her man. She belittled him; she demanded he come; she punished him for coming on her and then she fucked his ass.\n\nWatching this, it was exactly what I wanted to have happen to me... but from Dani.\n\nI listened to his moans imagining those were my moans.\n\nI listened to Alexis talk dirty imagining it was Dani.\n\nNot surprisingly, I came again, without the fleshlight, as I rubbed my dick through my sheer pantyhose.\n\nI lay there for an eternity, watching the rest of the scene, wondering if there was any chance that Dani would seriously consider pegging me.\n\nI had no idea, but the possibility was there and I was confident that I would bring it up when the right moment occurred.\n\nThat night, so exhausted, I reluctantly texted her that we would have to have a rain check on more online play. So I got ready for bed, wanting a good sleep, hoping tomorrow was the eventual day I had long envisioned.\n\n.....\n\nAll day I was a giddy mess. I was worried I would have blue balls before I got home with the amount of times my cock rose and fell throughout the day.\n\nWhen I woke up, in the shower, at the airport and on the plane, I kept imagining all the different ways this weekend could go. The possibilities seemed endless and I had decided I was definitely going to bring up my anal curiosity.\n\nOnce off the plane, I saw over half a dozen messages from my wife:\n\nText me when you are close.\n\nTonight I am your complete whore.\n\nUse me as you wish.\n\nCall me names.\n\nShoot your cum where you want.\n\nAll three holes are available for your convenience.\n\nI'm just a bimbo slut created to please her strong-willed Master.\n\nMy cock, which had briefly taken a nap, was suddenly wide awake. Her words had awakened the monster.\n\nI wasn't sure if today was the day to inform her of my own submission fetish, it seemed tonight was about using her.\n\nI texted back:\n\nBe home in ten minutes, slut.\n\nI expect you on your knees and ready to please.\n\nShe responded almost immediately, with a word that made my already hard cock like steel:\n\nYes, Master.\n\nThankfully, the sex gods were still watching over me, my luggage came off third and there was a taxi available when I walked outside.\n\nI told the driver there was an extra twenty if he pushed the speed limits to the maximums and he nodded.\n\nI made it home in record time, paid the man a forty dollar tip, walked into the house, dropped my suitcase, closed the door and walked to my kneeling bride, dressed as a cheerleader just like the fantasy I had discussed a couple of days earlier. She looked completely beautiful... wedding day beautiful... the afterglow of great sex beautiful.\n\nDeciding to shift right into role play, I asked, my tone firm, \"Why are you here in the Principal's office?\"\n\nShe took a moment to realize we were already role playing before she bluntly said, \"I was flashing Mr. Peterson, sir.\"\n\n\"And is that appropriate behaviour for a student?\" I asked, as I moved directly in front of my kneeling wife.\n\n\"No, sir,\" she whispered, looking incredibly sexy as she gave this sorry look.\n\nCrossing my arms, I asked, \"And why then did you do it?\"\n\n\"So I would be sent to the principal's office,\" she replied, her tone dripping with innuendo.\n\n\"And why would you want to be sent to see me?\" I asked, my hard cock purposely directly in front of her face.\n\nShe moved her hand directly onto my stiff cock, and gave it a squeeze before she answered sexy as hell, \"So I could have this.\"\n\n\"Young lady,\" I fake gasped.\n\nShe quickly pulled it out of my pants and purred, \"Is this hard for me, sir?\"\n\nShifting from shocked to smug, I challenged, \"I don't think an innocent cheerleader like you could handle this.\"\n\n\"Sir, does this answer your assumption?\" she questioned, before she took my entire dick deep in her mouth, something she rarely did.\n\n\"Young lady,\" I groaned, even though I wasn't really putting up any resistance, \"you shouldn't be doing this.\"\n\nShe didn't respond, instead speeding up her hard-core cock sucking, something she hadn't done, other than when drunk, since before we were married.\n\n\"Shit, you really want to be my slut, young lady?\" I questioned.\n\n\"Yes, sir,\" she nodded, taking my dick out of her mouth and slithering her tongue and mouth to my long neglected balls.\n\n\"That's it, slut, suck on my balls,\" I groaned, a pleasure I had never experienced.\n\nAnd man did she take her time. She sucked each ball into her mouth, seemingly making love to each one. Eventually, she slid her tongue back up my dick and took it back into her mouth. I weakly groaned, \"Oh yeah,\" as I got aggressive by grabbing her pigtails.\n\nThis seemed to make her bob faster and after a minute of great pleasure, I decided to push my authority as I asked, \"Ready to be treated like a complete whore?\" The question was rhetorical as I began fucking her face.\n\nIt seemed to turn her on as she moaned as my balls bounced off her chin.\n\nKnowing I wasn't going to last much longer, I asked, \"Ready to get a load all over your pretty face, cum slut?\"\n\nShe moaned on my dick and I pulled out and demanded, \"Open wide, cum slut.\"\n\nShe looked so hot as she obeyed my order and waited for my cum.\n\nI furiously pumped my cock until rope after rope after rope of cum splattered her perfectly pretty face.\n\nI watched as she wiped the cum off her eye lids before opening her eyes, looking up at me still on her knees, and asked all smugly, \"Is that all you got?\"\n\n\"This is just the start, slut,\" I confidently responded as I picked her up and carried her to our room.\n\nShe giggled like a school girl while I carried her to our room. Once in the room, I manfully tossed her onto the bed and ordered \"Spread those legs, slut.\"\n\n\"Yes, sir,\" she moaned seductively and obediently, revealing her Brazilian.\n\n\"No panties, slut?\" I questioned, as I stared at her now smooth pussy.\n\n\"No, sir,\" she replied, her tone dripping with submissiveness. \"I thought you would want easy access to my fuck holes.\"\n\n\"Fuck holes?\" I questioned still staring at her ripe hairless pussy. I have always loved licking pussy, but the thought of no pubic hairs was utterly delicious (pun intended).\n\n\"My young ripe pussy and my tight virgin ass,\" she explained, her tone so naughty my cock didn't have time to recover... remaining hard... especially when she began to play with herself.\n\n\"What's that in your ass?\" I asked, once I broke my trance from her sweet pussy and noticed something black in her butt.\n\nHer answer so sultry and naughty, \"A place holder until you fill it.\"\n\nI wanted to fuck her ass. But first, I wanted to taste her pussy. Trying to be as crude as her, I quipped, \"Let's taste what this fresh box lunch tastes like.\"\n\nShe moaned, \"Oh yes, lick my pussy.\"\n\nLike I said, I love licking pussy. But without the hair, it was like doing it for the first time. I could see every crevice of her pussy and I explored every inch.\n\nI loved hearing her moan; I loved hearing her breathing increase; I loved when she grabbed my head and held me buried deep in her wetness as she came.\n\nThis time she did all those things, but her body moved even more and she begged for me to stop teasing her, which, of course, made me tease her more.\n\nDeciding to shock her, and show my submissive side, I slid down to her ass, pulled out the plug and tongued her sexy gaping hole.\n\nHer moans continued as I rimmed her. I then slid back up to her glistening pussy and resumed licking. This time, I fucked her pussy with my tongue, while using my chin and my stubble to stimulate her pussy.\n\nIt didn't take long before she declared loudly. \"Oh yes, sir, I'm so close.\"\n\n\"Beg, bitch,\" I demanded, as I continued ravishing her pussy.\n\nShe moaned, clearly near the brink, \"Please, sir, make your cum slut come. Then bury that dick of yours in my asshole.\"",
        "I put extra pressure on her clit and in seconds she screamed as her orgasm finally hit. As always, I kept licking her throughout her orgasm.\n\nI then remained in control, as I ordered, \"On all fours, slut. Time to pound that ass of yours.\"\n\n\"Yes, sir,\" she weakly responded, still trembling, but obeyed before adding, pointing to the night stand, \"Please get the lube.\"\n\nI quickly grabbed it, eager to fuck her ass. I got up behind her and asked, \"What do you want, slut?\"\n\n\"Your cock in my virgin shit-hole,\" she answered, easily the nastiest thing I had ever heard her say.\n\nI poured the lube between her ass cheeks, as well as all over my cock, before I rubbed my dick up and down her perfect ass cheeks. \"Beg,\" I demanded, wanting to make sure without a doubt she wanted this.\n\nShe begged, sounding so fucking slutty, which made me love her more, \"Please sir, shove that big thick dick in my asshole, make me your personal ass fuck toy.\"\n\nWanting to make sure she wanted this, I got out of character briefly and said tenderly, \"Last chance to reconsider,\"\n\nHer response was somehow even nastier than her previous wicked words, as she demanded, \"Slam it in my ass, sir.\"\n\n\"As you wish,\" I agreed, slowly pushing my cock in her ass. There was a brief resistance, the gaping still not as thick as I am, but then I was in. \"So fucking tight,\" I declared, having no choice but to go slow.\n\n\"It was made for you, sir,\" she whimpered, obviously getting used to my thick cock in her ass.\n\n\"I expect you in my office every lunch hour for some back door discipline,\" I said, resuming the role playing.\n\n\"Yes, sir, I'll be your lunch time cum deposit,\" she moaned, loving just giving into the pleasure and the expectations.\n\nSlowly my cock disappeared and finally it was all in. I declared, kind of in awe, \"All in, ass slut.\"\n\n\"Then fuck it,\" she said, rather matter-of-factly.\n\n\"As you wish,\" I said again, as I ever-so-slowly, ever-so-carefully (recalling the pain that came when I experimented with new bigger butt toys), began to fuck her.\n\nI fucked her this way for a while, before I was surprised to hear her demand, \"Ream your slut's shithole, don't make love to it.\"\n\nI questioned, as I grabbed her hair, \"You want it rough, slut?\"\n\n\"Yes, sir,\" she moaned, before adding, \"use me.\"\n\nI held onto her hair, as I began reaming her ass. Each hard thrust forward my body slammed into hers.\n\nApparently, my sweet wife liked it rough, as she demanded, while I fucked her hard, \"Oh yes, sir, fuck the shit out of me.\"\n\n\"Oh God, you're such a dirty whore,\" I called her, pulling her hair roughly.\n\n\"Oh yes. Just for you, sir,\" she responded.\n\nHaving just come, I was in for the long ride. I moved my hands to her hips to keep going. Eventually, she reached for a massage thing from under her pillow.\n\nAlthough the answer seemed obvious, even though it looked like a back massager, I asked, \"Is that one of your new toys?\"\n\n\"One of manyyyyyyyyy,\" she moaned, as she turned it on and moved it to her pussy.\n\n\"You going to come from getting ass fucked?\" I questioned.\n\n\"Yes, sir,\" she moaned loudly.\n\nSensing she was close, I spanked her ass and demanded, \"Come now, slut.\"\n\n\"Yes, sir,\" she whimpered.\n\n\"Now, slut!\" I demanded, fucking her even harder and faster.\n\nSeconds later she babbled like she often did when she came, \"Yes, yes, yes, fucking shit.\"\n\nI kept fucking her throughout her orgasm until I decided to try something else we had never done. I flipped her onto her back, straddled her as I pulled her sweater over her head and began fucking her big tits.\n\nShe squeezed them together for me and asked, \"Are you going to come on my titties, sir?\"\n\n\"Or all over your face again,\" I said, looking into her eyes.\n\n\"Come wherever you want, sir,\" she answered, giving herself to me mind, body and soul tonight. Something I hoped I could do back to her one day soon.\n\nAfter a minute or two, getting tired actually, my wife saw through my aggressive behaviour and asked, \"Do you want me to finish you off, sir?\"\n\nI asked, surprised again, \"You want to suck this cock that was just in your ass?\"\n\nShe smiled sexily, \"I'm your slut tonight, sir. I will do whatever you tell me to.\"\n\n\"Then get sucking,\" I nodded, thankful to be able to lie on my back.\n\nShe bobbed quickly on my cock and in very little time I groaned, \"Oh yeah, so close.\"\n\nAs she teased my cock top, she asked, \"Where do you want to shoot your load?\"\n\n\"On your face again,\" I decided, loving the look of her pretty face covered in cum. It was both beautiful and slutty, a hot oxymoron.\n\n\"Tell me when to stop,\" she said, as she resumed bobbing.\n\nIt didn't take much more time, before I said, \"Now.\"\n\nShe moved her face over my cock, pumped my cock with her left hand, closed her eyes and waited for the cum.\n\nSeconds later, I shot my second load on my wife coating her nose, lips, cheek and chin before she took my cock back in her mouth.\n\nThe pleasure was too much and I said, \"Holy fuck. Please stop.\"\n\n\"What?\" she asked, looking up at me with concern.\n\n\"I need to pee,\" I explained.\n\n\"Oh,\" she laughed, as I got up and went to the washroom.\n\nWhen I returned, I asked, \"Hungry?\"\n\nShe smiled, \"For more cum?\"\n\n\"I was thinking some actual dinner,\" I laughed.\n\nShe nodded, \"Yes, we should probably refuel,\" before she gave my now flaccid cock a squeeze.\n\n\"Chinese?\" I asked.\n\n\"Sure,\" she nodded, before she went to the washroom.\n\nAs I grabbed a robe, I wondered if this was the time to reveal my biggest fantasy... to be pegged. Yet, although I considered telling her all night, I just couldn't bring myself to say the words.\n\nInstead, we had a long chat about making sure we kept this newly rekindled flame going, agreeing to a weekend getaway soon. We also discussed Halloween.\n\nIt was then that the opportunity arose again to tell her when she said, \"Tomorrow, you do what I tell you.\"\n\n\"Yes, Mistress,\" I saluted, trying to hint at my own submissiveness.\n\n\"Mistress,\" she nodded, \"I like that.\"\n\nWe watched a movie, cuddling the entire time, before we had sex one more time... the ol' fashioned way... cock in pussy.\n\n.....\n\nI asked Dani a dozen times what costume she had in store for me, but she refused to even give me a hint.\n\nIt wasn't until we returned home after trick or treating with the kids that the puzzle began to come together.\n\nShe called out, \"Meet me in the bathroom.\"\n\nI assumed she was putting make-up on me. She usually did. Although, I had always known what I was to be that day. \"Okay,\" I called out and headed to the bathroom.\n\nShe ordered, \"Sit on the toilet.\"\n\n\"Okay,\" I said.\n\nTwenty minutes later, a ton of make-up put on me, girly make up in my opinion, she ordered, \"Close your eyes.\"\n\nI obeyed, kind of liking just being told what to do. I wondered if I would enjoy the same treatment in the bedroom.\n\nShe took my hand and led me out and to our bedroom.\n\nShe said, as we walked down the hallway, \"Your costume is on the bed, honey.\"\n\n\"Okay,\" I said, as I walked into the bedroom.\n\nShe said, \"I hope you like it.\"\n\nI saw the cheerleader outfit on the bed and asked, \"Where is my outfit?\"\n\n\"Right on the bed,\" she answered, pointing to the cheerleader outfit.\n\n\"No way,\" I said, even though part of me was excited.\n\n\"Way,\" she smiled.\n\n\"You want me to cross dress?\" I asked, even though it was something I loved doing. She couldn't possibly know that.\n\nShe shrugged, \"I thought it would be fun. You love touching me in nylons, I figured why not let you wear them, especially on a day where no one will think anything of it.\"\n\n\"Okay,\" I said, unsure. I loved the idea in theory, but was uncomfortable with the idea of doing it in front of all my friends.\n\nShe reminded me, noticing my trepidation, \"You said you would wear whatever I told you to wear.\"\n\n\"Yes, Mistress,\" I nodded with a smile as I considered this may be the perfect venue to have my wife fuck me.\n\nShe smacked me in the ass as she said, \"Good boy. I got to go and put my outfit on.\"\n\n\"What are you wearing?\" I asked, curious how we would be a couple like we always were.\n\nShe answered, all sweet, \"It's a surprise.\" Then she walked out.\n\nI stared at the outfit for a long time. Besides the outfit, she had bought pantyhose and panties, as well as a wig. On the one hand, this was perfect. I enjoy wearing pantyhose, although I had never worn panties before. And, by cross dressing, I could really play up my feminine submissive side and maybe reveal, on the pretense of being drunk if need be, that I would like her to fuck my ass.\n\nOn the other hand, I was dressing like a complete girl slut in front of friends, co-workers and family. That said, it was Halloween and no one would remotely consider that this meant I wanted to be sodomized.\n\nI got undressed, put the panties on and was surprised at how soft they were compared to my generic boxers. Although I suppose kind of gay, I looked at myself in the mirror. Shaking my head, I put the pantyhose on too. They were silky sheer, just like the ones I'd bought for myself.\n\nI then put on the skirt and the sweater and realized my wife hadn't thought about my tits. I decided if I was doing this, I was going all out. I knew none of her bras would fit me, so I went to the kitchen while Dani got the door, grabbed two grapefruits and returned to my room, after stopping in the office for tape. I was thrilled when I found duct tape.\n\nAlthough it took some work, I taped the grapefruits on my chest and used a lot of duct tape. I put on the dress and the wig and looked into the mirror.\n\nI looked pretty sexy.\n\nOf course, shaving my legs would have helped, but that may have been too much.\n\nI headed downstairs, quite a few guests were already there, and the whole group broke into cat calls and whistles.\n\nDeciding to play it up, when I reached the bottom I did a cheer with my pom poms.\n\nI noticed then that my wife was dressed in my old football gear. I immediately wondered if tonight could be role reversal time. I was determined that there was no better night than tonight to mention my anal curiosity.\n\nAt one point I had the strangest conversation with Bethany, my wife's younger, wilder, sister.\n\nShe sauntered over and asked, \"Enjoying being a girl?\"\n\nI shrugged, knowing Bethany was bi-sexual, \"Is that your pick-up line?\"\n\n\"Trust me,\" she smiled, \"If I was picking you up you wouldn't know what hit you.\"\n\nI laughed, \"I'm guessing that is probably true.\"\n\n\"So do you put out?\" she asked.\n\n\"If you take me to dinner first,\" I replied.\n\n\"Oh, I would give you the full meal deal,\" she quipped.\n\nI had no idea what she was talking about.\n\nShe continued, \"Maybe some sausage.\"\n\nMy face went beet red. Even though she couldn't possibly have any idea about my pegging fantasy, her words were strange. \"Sausage?\" I asked.\n\nBethany smiled, \"Oh yes, you'd look very good with some big sausage in you, girlfriend.\"\n\nBefore I could respond, she walked away, leaving me confused, horny and worried. Did she know? How could she know?\n\nBefore I had time to think about this, a buddy said, \"Who is that?\"\n\nI ended up in another conversation and forgot about it for the time being.\n\nFifteen minutes later, my wife walked up behind me and whispered, \"Bedroom now, bitch.\"\n\nLike Bethany, she walked away before I could respond.\n\nLike the submissive I fantasized being, I finished my conversation and headed to the bedroom.\n\nI walked in, locked the door, and asked, \"You can't wait for the guests to leave?\"\n\nShe replied, \"Come here. I can't wait any longer.\"\n\nI played coy. \"To do what?\"\n\nShe smiled as she answered, \"To make your deepest fantasy come true.\"\n\nAlways trying to be sweet, I quipped, \"That happened last night.\"\n\nShe whispered, her smile devious, \"I mean your darkest, most secretive, fantasy.\"\n\nI briefly wondered if she could possibly know what my 'darkest, most secretive, fantasy' really was.\n\nShe put her hands on my shoulders, guided me down as she ordered, \"Knees.\"\n\nI was stunned. I was hard. I was wondering if it was possible she knew. How could she know?\n\n\"Pull down my pants,\" she ordered.\n\nI did and gasped out loud as a plastic cock popped into my face.\n\nAs I contemplated the meaning of this, she demanded, as she tapped the cock on my lips, \"Suck it, my pretty cheerleader slut.\"\n\nAlthough I was excited. I was confused. How could she know? As if reading my mind, she explained, \"I found your bag of toys.\"\n\nAs I felt my face burn red, all I could muster was \"Oh.\"\n\nShe continued, as my head spun, \"And tonight you're my slut. No questions asked.\"\n\nEven though I was turned on, I still was apprehensive, as I asked, \"You're serious?\"\n\n\"That's a question,\" she responded before she shoved the cock in my mouth.\n\nAlthough I had taken stuff in my ass, I had never sucked cock and I gagged at first. Then I got used to it and began bobbing on it. It felt so awkward, so surreal and yet... so natural. As if all the years of sucking things: my mom's nipple, the bottle, popsicles, etc had brought me to this moment.\n\nShe purred, \"You look so sexy with a cock in your mouth.\"\n\nAs a man I should have been offended by such a statement, but it only enhanced my eagerness to please. Yet, as I took a couple inches in, I couldn't fathom how she easily took my whole dick in her mouth.\n\nThen she surprised me again when she bluntly asked, \"Do you want me to fuck you, honey?\"\n\nI looked up and felt guilt wash over me. The simple answer was GOD, YES, yet, I was the man, the provider, and saying such words felt wrong.\n\nShe saw my insecurity and said, \"It's okay, honey. I did a lot of research and a man wanting to be fucked is natural.\"\n\n\"It is?\" I asked.\n\nShe asked another question that brought shame to me, \"Have you been putting the toys you bought in your ass?\"\n\n\"Yes,\" I nodded, guilt refusing to go away, even as my fantasy was finally coming true.\n\nAs she moved the cock around my lips, teasing me, she explained, \"Honey, it's okay. I know you want it and I want to give it to you. Now bend over the end of the bed.\"\n\n\"I thought you would be ashamed of me,\" I admitted, even as I stood up.\n\n\"Honey, I love you completely and want you to be able to share anything you fantasize with me,\" she said, as she went and grabbed the lube. \"It makes for a good marriage.\"\n\n\"You don't think it's gay?\" I asked, tentative and still not moving.\n\nShe admitted, \"Honestly, I did at first. After talking to my sisters and doing some research I came to understand prostate pleasure and male submission.\"\n\nMy heart sank. \"You told your sisters?\"\n\nShe explained, suddenly looking worried, \"I didn't mean to. I found the toys and thought you were cheating on me. It was Marina that assumed the toys were for you.\"\n\n\"Oh my God,\" I sighed. Suddenly completely stressed.\n\n\"If it makes you feel any better, Blake likes it in his ass too,\" she said.\n\n\"This is surreal,\" I said, trying to process all that was happening and all that was being said. I should have been ecstatic...my fantasy was coming true. Yet, I couldn't let go of my upbringing and the concept of being a man's man.\n\nShe rubbed my cock through my pantyhose, and whispered, \"Look honey, this secret has made me closer to my younger sister, created new chemistry in our bedroom and is about to fulfill your curiosity and make your fantasy come true.\"\n\n\"I just can't believe they know,\" I said, even though her hand on my cock felt so good.\n\nShe asked, \"Does it really matter?\" as she squeezed my cock firmly and kissed me with passion.\n\nBreaking the kiss, she said the words I had dreamt about many times, but never imagined hearing in real life. \"They are not going to tell anyone and now I really want to fuck you, I mean...I literally want to fuck you.\"\n\n\"You do?\" I asked, insecurity still coursing through me.\n\n\"Badly,\" she purred, as she gave one final squeeze and ordered firmly, \"Now bend over the bed, I've been fantasizing about this all day.\"\n\n\"Fucking me?\" I asked, shocked that the idea of pegging me turned her on.\n\n\"Fucking my cheerleader slut,\" she purred, as she pushed me towards the bed.\n\n\"What is that buzzing?\" I asked, suddenly realizing there was something inside her buzzing.\n\n\"A vibrating egg,\" she answered matter-of-factly.\n\n\"A what?\" I asked.\n\n\"Long story, but it's got me horny as hell. Now bend over the fucking bed, baby, it's time for me to fuck you,\" she answered.\n\n\"You sure?\" I asked, even though I was more than ready to get pegged.\n\nHer answer turned me on even more. \"Now, slut!\"\n\n\"Yes, Mistress,\" I replied giving in.\n\nBent over the bed, I suddenly felt liberated. Feeling her lift up my skirt, pull down my pantyhose and panties was surreal. Feeling her pour lube on my ass, amazing. A finger sliding into my ass, euphoria.\n\nAs she fingered me, she purred, \"I've been dying to fuck this ass, sexy.\"\n\n\"Oh, God,\" was all I could muster, A real finger in my ass felt so much better than any toy.\n\n\"You want me to fuck you?\" she asked, as she wiggled her finger in my ass, creating new pleasures.\n\n\"Yes,\" I moaned, as I closed my eyes and allowed the pleasure to take control.\n\nWhen she pulled her finger out, I felt empty. I couldn't wait to be fucked. She teased me briefly, like I often did her, before she slowly slid the thin cock in.\n\n\"Oh, God,\" was again all I could say.\n\n\"Oh, yes,\" she purred back as she filled my ass.\n\nI whimpered, still in disbelief this was happening, \"I can't believe you're doing this.\"\n\n\"We're doing this,\" she corrected, reminding me we were a couple, a couple that loved each other and were willing to experiment.\n\nAfter another moment, she asked, \"You like it?\"\n\n\"Oh God, yes,\" I replied, wanting more.\n\n\"Talk to me,\" she ordered, \"Tell me what you want.\"\n\nDeciding to just say what I wanted, no more male pretenses, I admitted, \"I want you to fuck me.\"\n\n\"Louder,\" she demanded, as she slammed her body into me and made the cock go deeper into my ass.\n\nI yelped, a sudden pain hitting me, but I wanted more. More pleasure, more pain, I begged, \"Oh fuck, fuck my ass, baby, fuck my ass hard.\"\n\n\"You sure?\" she asked.\n\nHaving way crossed the line, the shame gone and acceptance prevalent, I replied, \"Please, fuck me.\"\n\nAnd she started slowly fucking me. I moaned, \"Oh yes.\"\n\nYet, after just a few strokes, I wanted more. I wanted it harder, faster. I wanted to be fucked like a cheap slut. I begged, \"Harder baby, peg me harder.\"\n\nShe listened, putting her hands on my hips and fucking me hard. Each forward thrust slamming into me, making me whimper, making me moan.\n\nI don't know how long she fucked me like this. My mind was a muddle of sexual mush. I was in complete euphoria and never wanted it to end.\n\nI was startled when she asked, \"Are you going to come, baby?\"\n\n\"So close,\" I admitted, yet I knew from experience in my hotel room that I didn't come from anal, it just made the orgasms better... much, much better.\n\nShe suddenly reached under, grabbed my cock, while her cock remained deep in my ass. She whispered, \"Come for me, baby. Come with my dick buried deep in your ass.\"\n\nThat was all it took. Just her touch. I groaned, \"Ohhhhh,\" as I had the most intense orgasm I had ever experienced and I came all over our bed.\n\nAs I kept coming, she whispered, still stroking my cock, \"Oh yes, baby, I love you so much.\"\n\n\"Me too,\" I replied, even as my cum continued to spurt out of me.\n\nShe laughed, breaking the moment, \"Shit, I would have given you my face to paint if I knew you were going to come that much.\"\n\nI laughed, as I finally finished my orgasm.\n\nShe lay on top of me, for a couple of minutes, the dildo still deep in my ass, before she said the inevitable words, \"We should probably get back to the party.\"\n\n\"Fuck, there are people here,\" I joked, even though in reality I couldn't believe I had just got pegged for the first time ever in a houseful of guests.\"",
        "\"Yeah, so don't walk around bowlegged,\" she joked.\n\n\"Well, your sister's conversation makes a lot more sense now,\" I said, as I stood up.\n\n\"What did she say?\" she asked, looking worried.\n\n\"I'll tell ya later,\" I said, looking at the clock and realizing we had been gone a while. \"Shit, we've been gone almost half an hour.\"\n\nShe shrugged, \"They'll think you were fucking me.\"\n\nI laughed, \"That is probably true.\"\n\nShe looked at me sternly, \"I do expect a good fucking when the party is done.\"\n\n\"Oh,\" I smiled, as I pulled up my panties and pantyhose, feeling like a complete girl slut, \"I plan to return the favour.\"\n\n\"Good, now get back to the party, Christina,\" she said.\n\n\"Christina?\" I questioned, surprised by the feminizing of my name.\n\n\"Yes, my little slut,\" she smiled, as she spanked his ass.\n\n\"Yes, Mistress,\" I nodded, as I grabbed her hand and we headed back to the party.\n\nTwenty minutes later, I was chatting with a buddy when Bethany walked over to me and whispered, \"You're welcome.\"\n\nI played dumb, \"For what?\"\n\n\"For making your night peg-tastic,\" she answered, as she squeezed my ass, before walking away.\n\nI had a hunch then that everything in my life had changed. Not just because I had been pegged by my wife, but something else, something I couldn't yet fathom... but, truth is, this was only the beginning.\n\nTHE END\n\nWant to just read the male side of the story: Read Kinky Tales: I Pegged My Husband.\n\nDo you want to read more of Dani's and Chris's sexual awakening?\n\nComing someday if enough people want it:\n\nKinky Tales: Lured into Lesbianism\n\nKinky Tales: Orgy\n\nKinky Tales; Sisterly Love\n\nKinky Tales: Willingly Cuckolded"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "pegging",
        "pegged",
        "wife",
        "stockings",
        "submission",
        "anal",
        "fantasy",
        "oral",
        "bottom",
        "submissive"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/kinky-tales-im-pegged-by-my-wife"
}
{
    "title": "Just The Way She Likes It",
    "pages": [
        "Rachel was cooking in the kitchen, trying to decide how to ask him. It wasn't the easiest conversation she had ever had to have, she wondered how best to breach the subject. \n\nShe had only known him four weeks, and things had been going great. He was really hot, and really sweet. It made a change from her usual choice of idiot, and she was happy for once. \n\nShe wished she could just be happy with everything, and not have to say anything, but she knew the longer she left it without saying anything, the more awkward it would get later. She just hoped he took it okay. \n\nRachel was looking forward to seeing him again. Already feeling her arousal grow. She lifted her short black and white checkered skirt and moved the crotch of her panties over. She pressed a finger into herself. \n\n\"God I'm wet,\" she mumbled to herself. She released her panties and let her skirt drop. She sucked her finger into her mouth and tasted herself. Just the thought of what tonight might have in store was making her horny as fuck. \n\nThey had made love quite a few times now and he was a great lover. Slow and passionate. Unselfish in the act, always looking after her needs first. He had a great body and a magnificent cock. She should have been content and hated herself for not being so. She needed something else, not always, but occasionally. She had tried to push him into it, but it hadn't worked. She hoped desperately that she would get it tonight. \n\n\"If he doesn't get scared off,\" she said to the sauce she was stirring. She jumped slightly as the doorbell rang. Turning down the hob she hurried into the hall towards the front door. \n\nStopping at the mirror in the hall, she fluffed up her long brown wavy hair with her fingers. Checked her makeup and adjusted her breasts, pushing them up and together in her simple white blouse. Her ample firm round breasts looked great in the tight shirt, she thought. Hopefully he'll agree. She headed to the door and opened it. \n\n\"Hey Liam,\" she said. Her green eyes instantly drew to his deep brown eyes. \n\n\"Hey Rach,\" he said. He handed over some beautiful pink roses and a bottle of wine. He drunk in her pretty face. Battling not to look down at her body. \n\n\"Thank you,\" Rachel said. \"You know you don't have to buy me flowers every time you come round. Not that I'm complaining.\" \n\n\"I know I don't have to,\" Liam replied. \"But I want to. You're worth it.\"\n\nRachel blushed and looked down as she moved against the wall to let him into the flat. She wasn't great at taking compliments. \n\nLiam went to move past her and stopped. He lifted her chin with his hand and kissed her on the lips. The other hand on her slender waist. He felt her open herself to him and they kissed deeply. Rachel's hands held out to the side with the flowers and wine. Liam pulled back. \n\n\"Sorry. Couldn't resist,\" he said. \"You're so beautiful.\" She really is, he thought. Her long brown hair framed her perfect features. The open buttons on her shirt presented her slender neck and cleavage. This time he couldn't help but glance. \n\n\"Get in there,\" Rachel said. \"We need to eat. I'm starving.\" Blushing a brighter shade of red. God damn it girl, she thought. Pull it together. The ache between her legs was stronger now. She checked out his firm ass in his jeans as he walked in front of her. The toned contours of his back obvious under his tight dark green t-shirt. \n\n\"Sure,\" Liam replied, smiling. \"Something smells good.\"\n\nThey chatted as Rachel served dinner. Liam watched her as she moved around the kitchen. He admired her body. She was tall and thin. Beautiful long legs shown off by the short length of her skirt, high on her thighs. Bare and smooth, he had to fight the urge to go up behind her and press into her as he kissed her neck. \n\nHe resisted and they ate. The talking and laughter flowed. They were good together. Some similar interests, but both still happy to listen to the other if different. \n\nIt was when they were on dessert that Rachel felt she needed to broach the subject. It was now or never. She struggled to find an opening. Scared of his reaction. Luckily Liam noticed something was bothering her. \n\n\"Are you okay?\" he asked, noticing she had gone quiet. \"I haven't said the wrong thing have I?\"\n\n\"No not at all,\" Rachel said quickly. \"I just wanted to talk to you about something. It's......just........a bit awkward.\" \n\n\"Okay,\" Liam said cautiously. This sounded quite serious, he thought. \n\n\"Everything's great,\" she said, seeing his anguish. \"There's just something I want to ask, hoping you enjoy it too.\" \n\n\"I'm listening,\" he said. Not sure what to think now. \n\nRachel sat there thinking, Liam watching her. She couldn't think how to say it. All scenarios she had gone through now just sounded weird.\n\n\"Oh fuck it, I'll just come out with it,\" she said. \"I love rough sex. I can't help it. The rougher the better. I'm sorry if that makes me a bit of a perv but there you go. I love it when we have sex, I really do, it's amazing, but right now I need this. I wanted to put it all on the table now. I've tried to push you further but it's not working.\"\n\n\"Okay,\" Liam said, thinking. \"How rough?\" She saw her face look puzzled. He wasn't sure what reaction she had wanted. \n\n\"Very,\" Rachel said. She hadn't really anticipated that as the first question. \"Even if I'm begging you to stop I want you to keep going.\" She felt her arousal grow. She thought he would be shocked, but he didn't seem that bothered by it. \n\n\"And where do you like it rough?\" he asked. \"Where on your body?\" He felt his cock harden. \n\n\"Everywhere,\" she replied. \n\n\"We need one rule,\" he said. \"I can't tell if I'm going too far if stop doesn't mean stop. We need a safe word. One I know will mean definitely stop. I don't want to hurt you.\" \n\n\"Nothing will be too far,\" Rachel said, she winked, and he smiled. She saw a glint in his eye and she liked it. \"If it makes you more comfortable we'll have one. You choose.\"\n\n\"Something random,\" Liam said. He tried to think of something really random. \"How about...... Mr Potato Head.\" Rachel burst out laughing. \n\n\"Okay. Good one. Definitely won't forget that,\" Rachel said, trying to be serious again. \"So you okay with this.\" \n\n\"Think so,\" he replied. \"If it brings you pleasure, I'll try and give anything a go.\" \n\n\"You might regret that statement,\" Rachel said, grinning mischievously. She watched as Liam stood. Her eyes fixed on his noticeable bulge in his trousers. He walked around and stood behind her, his hands massaged her shoulders and she groaned as his warm firm hands kneaded her neck. \n\nLiam bent down and kissed her neck. It felt good, not exactly rough so far. \n\n\"What about your desert?\" Rachel said. \n\n\"Fuck desert,\" Liam whispered into her ear. \"I'm going to fuck you so hard you'll be begging me for more. I'm going to pound my cock into every hole on your body till you can't take any more. You're mine now, got it?\" He reached down and squeezed her breast hard. \n\n\"Oh god,\" Rachel gasped. This was going a lot better than she expected. \n\n\"I said, do you understand?\" he said. His cock was raging in his trousers. He squeezed her breast again, harder this time. \n\n\"I understand!\" Rachel said, gasping again at the squeeze and the talk. So far so good, she thought. She felt herself leak into her panties. \"I'm yours. I want it in every hole. Oh god I want it.\" \n\nHe roughly stood her by her arms and she squealed in surprise. He kicked the chair out of the way and shoved some dishes and cutlery across the table, spilling her white wine. He bent her over the table and pressed his hard cock against her ass. He pressed harder and she groaned. \n\n\"How much do you want it?\" he said loudly. Pushing his pelvis forward again. The bulge rubbed into her thigh gap, pushing into her now desperate cunt. \n\n\"Oh my god. I want it so bad,\" Rachel groaned. \"I want you inside me. Please fuck me. Please.\" Her panties were pulled down, and she cried out as fingers were pushed into her roughly. \n\n\"So fucking wet,\" Liam said. \"So ready for a pounding.\" He pushed his fingers deeper, making her groan again. He felt around inside her, stretching her, exploring. He pulled his fingers out and pulled her up into him. She pressed against his body. He pushed his fingers into her mouth and she tasted herself. \n\n\"Suck them clean,\" Liam said into her ear. Forcing them down her throat till she gagged. She gasped and sucked her juices off his fingers. He pushed her back down hard. \n\nShe heard him unzip his jeans and a rustling. Then she cried out loudly as the cock entered her hard. He slammed into her deeply, her bony pelvis banging into the table. \n\n\"OH FUCK!\" she screamed, as it filled her. \n\n\"You fucking like that don't you?\" Liam said. Pounding into her again. \n\n\"Fuck yes!\" she said. \"Harder.\" It felt so good. She was on the verge of cumming already. She screamed in pleasure as he thrust into her again. Then he built up speed quickly. \n\nLiam started fucking her hard. Everytime he thrust forward she was lifted off the floor with the strength. She was lying face down on the surface of the table and crying out in pleasure. He continued to pound into her hard, her cries getting louder. \n\n\"Oh fuck, fuck, fuck,\" she screamed. \"I'm fucking cumming. I'm cumming.\" Her legs lifted off the floor, and she gripped the table edges to stop herself sliding forward. It felt so deep inside her with every slam from his pelvis. She couldn't stop it. \n\nRachel screamed as her pussy flooded with her juices. Her orgasm hit her hard and she shook violently. One of her legs stretched out shaking, the other bent as it quivered. \n\nShe was still cumming as Liam pulled suddenly out of her. His cock glistening in her juices, some dripping out of her onto the kitchen floor. Liam handled her roughly as he dragged her off the table. \n\n\"I'm still cumming,\" She groaned. Her legs still weak and trembling. He ignored her and knelt her down in front of him before shoving his cock into her mouth. \n\n\"Shut up and suck your cum off my cock,\" he instructed. And she did, tasting herself on the shaft. He forced himself deep and she gagged. He pulled out and her spit strung out from her mouth as she gasped for breath. He gripped her hair in his hand, holding it in a ponytail. He pushed himself back in and she groaned on his cock as he slid back down her larynx. As she gagged again he held her until she struggled for breath, then he let her up. \n\nShe took in deep gasps of air and looked up at Liam with pure lust, her eyes red and watery from the intrusion down her throat. Liam bent down over her, gripping her hair hard. He tilted her head back. \n\n\"I'm going to fuck that pretty face of yours,\" he said. \"Fill your throat with my cum.\" \n\n\"Oh god yes,\" Rachel said. She pushed two fingers inside her dripping cunt, igniting her already sensitive sexual organs. \n\nLiam shoved his cock back inside her mouth and she took him eagerly in. He was close to cumming now. Rachel's moans and pure want had him filled with lust. He started thrusting into her, pulling her head onto his cock. \n\nRachel opened her mouth and let the swollen head push in and out of her throat. The cock squelched as it hammered in, spit dribbled down her chin and over her chest. Running into her cleavage. Her fingers worked inside her, bringing her close to another orgasm. \n\n\"Drink my cum,\" Liam groaned. \"Take it all my little cum slut.\" He thrust forward and held her head as he unloaded a large explosion of cum straight down her throat.\n\nIt slid down Rachel's throat and she swallowed it down, but it was too much. She gagged and coughed. Cum was forced upwards and had nowhere to go apart from out of her nose. She pulled back and Liam released her, his cock still emptying his load. Cum slopped out of her mouth and down her chin as she coughed. Liam sprayed his last few squirts into her face. \n\n\"Fuck,\" Liam said. \"You okay?\" \n\nRachel smiled up at him. She couldn't have been more wrong about the man in front of her. This was going to be a good night. She pulled her fingers out of her cunt and used the same hand to wipe the cum off her chin. She sucked her fingers into her mouth, tasting their mixed secretions. \n\nLiam was worried that he had gone too far, but when he saw her smile he hid the one that nearly crossed his face. She really did like it rough, he thought. He decided he better not disappoint. He bent down and kissed her deeply, tasting himself and her in her mouth. He wasn't one to be offended by the taste of his own cum. \n\n\"It's not over yet,\" he said. He roughly dragged her up and lifted her onto his shoulder. Rachel screamed in surprise. He carried her to the sofa and threw her down onto her back. He roughly pulled her skirt off and threw it on the floor. He pulled her top off and bra, he squeezed her firm breasts hard making her groan. \n\nRachel gasped as he suddenly pulled her legs open wide, pushing fingers in roughly. He went deep and pushed hard against the inside of her stomach. \n\n\"So fucking wet you dirty slut,\" Liam said, leaning over her. \"Let's see how wet I get you.\" He pressed hard into her insides, rubbing roughly, his fingers banging into her. His hand moved fast. \n\n\"Holy fuck, fuck, fuck, fuck,\" Rachel groaned. \"Oh god no.\" The pleasure tore through her and she squeezed her breasts hard. It was almost too much. His fingers squelching in and out of her. An orgasm building quickly, but not like anything she had experienced before. It felt like she was going to implode. \n\nHe pushed his fingers deeper. He watched her writhe and squirm on his fingers, her juices running out of her. It was so hot, his cock rock solid again. \n\nIt felt so amazing as his fingers worked inside her, but it was also too intense. She was close to saying Mr Potato Head. She was close now though and she couldn't stop herself.\n\n\"Cum for me,\" Liam said. \"So wet. So desperate.\" \n\n\"I'm cumming, I'm cumming, I'm cumming!\" Rachel screamed. Liam pulled his fingers out just as she started shaking. A jet of cum shot out of her, arching through the air. She squirted hard. He rubbed at her pussy with his whole hand, spraying her everywhere as she continued to scream. She gripped his hand to stop him and he pushed three fingers back inside her, holding her tight as she continued to squirt into his palm. Her opening contracting on his fingers. \n\nRachel shook violently for some time, making garbled noises. She couldn't think straight. She felt her legs being pushed back and stretched wide open. Before she could say no, it was too soon, Liam's cock rammed into her, filling her insides completely. She screamed again. \n\nHe pushed down on her legs, pushing them up round her shoulders, allowing him to slide deep inside her, feeling his top hit her cervix. \n\n\"Oh fuck,\" Rachel groaned, her legs stiffened, still shaking. \"So fucking deep. Fuck me please. Fuck me hard.\" \n\n\"Oh I will,\" Liam said, sliding out and then pushing back in hard, Rachel cried out. \"You'll be begging me to stop, soon enough.\" He started slow and deep at first and then picked up speed. He started grunting as he banged down into her hard, forcing her into the sofa cushions with each thrust. \n\n\"Choke me,\" Rachel begged, between moans. \"Choke your dirty slut.\" She was lost now, consumed by pure lust. It felt so good inside her. She wanted it inside somewhere else, not quite yet, but soon. She needed it. \n\nChoking was pushing Liam's zone of comfort, but he too was too aroused. He gripped her neck and squeezed. \n\nRachel moaned loudly as the hand squeezed her slender neck. The shaft of the cock sliding in and out. She was going to cum again. And she did. And hard. Her legs going rigid and shaking. Her pussy flooded again. \n\n\"Fuck!\" Liam said, bending down close to her ear. \"You really are a dirty little slut. Cumming again so soon. You fucking love it so hard in your wet cunt.\" He was still ramming hard into her as she orgasmed. \"What about that tight asshole of yours, how much do you want my big cock up that ass?\" He thought he might be pushing his luck, but she said anything goes. \n\n\"Oh fuck. Yes please,\" Rachel groaned. \"Put it in my ass.\" \n\nLiam couldn't have moved quicker. He pulled out of her dripping cunt and flipped her over so she was lying on her front, lengthways on the sofa. He pulled one of her legs out and shoved his face between her ass cheeks, burying his tongue into her asshole. \n\nRachel yelped at the pleasure of his tongue. She felt him probing just inside her. Spitting in her and lubing her up. She felt his finger slide in easily. She moaned. More spit was applied, another finger inserted, stretching her open. \n\nShe groaned as the fingers came out and groaned again as Liam pressed his body on top of her. She felt him manoeuvring the tip of his cock against her asshole. She shook in anticipation, in excitement. \n\n\"Put it in me. Please fuck my ass,\" Rachel begged. She then groaned as Liam applied pressure, her opening stretching around the tip of his penis. His rock hard cock slowly slid into her until he felt some resistance. He held it there. \n\n\"Beg for it,\" Liam said. \"Beg for my cock in your tight ass. How much do you want it.\" He thrust forward slightly, stretching her wide, but still not breaking through. \n\n\"I want it so much,\" Rachel moaned. \"Fuck my ass. Please put it inside me. I want to feel it deep up my ass.\" \n\nLiam thrust into her, breaking through the resistance and ramming his cock deep. Rachel screamed, gripping the sheets hard. The initial pain turned to pleasure quickly as the cock went deep inside her. \n\n\"Oh fuck,\" she moaned.\n\nLiam started to slowly thrust into her, bringing his cock nearly all the way out before pushing back in. He slowly built up speed as Rachel's moans got louder and louder. \n\nRachel couldn't talk now, the pleasure was too much. She just managed garbled moans. The cock felt so good inside her, filling her anal cavity completely. She was going to cum again, and soon. \n\nLiam started thrusting hard into her. Using his body weight to force himself deep inside her. Rachel screamed in pleasure with every thrust. It was too much for him. The tight asshole, the hot body underneath him, and the screams were pushing him to the brink of climax. \n\nHe held on for as long as he could, not wanting it to end, but it was a lost cause. It was just too much. His groans got louder. \n\n\"Cum in me,\" Rachel managed between cries of ecstasy. She could hear how close he was. \n\nLiam groaned loudly and ejaculated deep inside Rachel. He thrust hard with each squirt of his cum, his cock spasming in her anal cavity. \n\nRachel gave one long scream as she orgasmed hard. Again. Her body shook violently beneath Liam. She groaned as pleasure tore through her body. \n\nLiam pressed into her, letting all his cum fill her tight asshole. The opening squeezed his shaft as it tensed and relaxed during Rachel's orgasm. \n\n\"Oh fuck!\" Rachel managed, after a while. \"God, that was amazing.\" She still lay under Liam, his cock now spent, slowly softened inside her. She felt Liam's kisses on her neck. He moved in close to her ear. \n\n\"That was amazing,\" he replied. \"How did I do with the rough stuff?\"\n\n\"You'll do,\" Rachel replied. She smiled broadly. He had definitely passed the test. \n\nThe End. \n\nThank you for reading.\n\n \n"
    ],
    "authorname": "bumonk",
    "tags": [
        "anal",
        "deepthroat",
        "orgasm",
        "rough",
        "squirting"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/just-the-way-she-likes-it"
}
{
    "title": "Stepping Out in Faith Ch. 05",
    "pages": [
        "It would be an understatement to say that this story has been an emotional rollercoaster to write. Andy and Marcus are intense characters and there have been times during the writing process when I found myself too emotionally worn out by them to keep writing. I hope this last chapter doesn't move too quickly and that I have done these guys justice in telling their story. \n\nThank you to everyone for leaving such encouraging comments. I've been pleasantly surprised at how many people have connected with this story. Your comments have encouraged me to push through emotional fatigue and follow Andy and Marcus' journey right to the bitter end. \n\nHappy Reading! \n\nYours, \n\nHB \n\nCopyright \u00a9 2015 by Hudson Bartholomew. All rights reserved. This story or any portion thereof may not be reproduced or used in any manner whatsoever without the express written permission of the publisher except for the use of brief quotations in a book review. \n\n***** \n\nStepping Out in Faith - Chapter 5 \n\nMarcus was early to brunch. He sat in the corner with his sunglasses still on, sulking and draining his Bellini every time the waiter came by to fill it up. He felt like shit; he knew he looked like shit. Not sleeping for a couple of nights would do that to someone. But Marcus didn't really care anymore, Andy had left him. \n\n\"You're here early,\" Cheryl said, as she took the other seat. \"You're never early. What's wrong?\" \n\n\"Nothing,\" Marcus said. \"I just couldn't sleep and had nothing else to do.\" \n\nCheryl frowned at him, clearly not buying his excuse. \n\n\"Take your sunglasses off and tell me exactly what's wrong.\" \n\nMarcus grabbed the sunglasses off his face and just barely caught himself before he threw them onto the table. He glared at the sunglasses but didn't saying anything. \n\nCheryl watched Marcus chug his Bellini with a concerned frown. When he put the glass back down on the table a little too forcefully, she took it and moved it out of his reach. \n\n\"How many of these have you had?\" \n\nMarcus narrowed his eyes, \"Why?\" \n\n\"Because you look drunk and it's still early. Are you hung over?\" Cheryl clearly did not look impressed. \n\nMarcus rolled his eyes then stared off into the distance, unable to bring himself to look at his mother. \n\n\"Marcus,\" Cheryl's voice was stern, but Marcus could detect that little twinge of fear. He hated when she sounded like that, like she was worried about him. \"What is going on?\" \n\n\"Nothing,\" Marcus mumbled under his breath. \"Andy broke it off, that's all. He's in the closet, we all knew that. And he's going to stay in the closet, we all knew that, too. I was just stupid enough to think I could change him.\" \n\nTo her credit, Cheryl didn't come back with a smart retort. Instead, she waited for him to continue. The silence was deafening and Marcus couldn't stop himself from filling the void. \n\n\"I may have come down a little harsh on Christianity and its views against gays.\" \n\nMarcus glanced at his mother and was irritated to find concern written all over her face. \n\n\"He said his faith required sacrifice and this was his sacrifice. We were his sacrifice.\" \n\nMarcus took a deep breath as the pain of those words throbbed in the middle of his chest. \n\n\"And I said that it was bullshit; that the whole thing was bullshit and he was just too scared to admit it. It didn't go over so well.\" \n\nMarcus shifted in his seat and held out his hand. \n\n\"Can I have my glass back now?\" \n\n\"No, you've been drinking too much.\" \n\n\"Mom!\" Marcus didn't care if he sounded like a whiney teenager, he felt like a whiney teenager. \n\nCheryl sighed before continuing. \n\n\"Look, sweetheart, I know how you feel. It's infuriating what some Christians think about homosexuality. It makes the rest of us look like horrible people.\" \n\n\"Exactly!\" Marcus threw his hands up in the air and let them drop to the table with a thud. He ignored the curious glances from people seated beside them in the restaurant. \n\n\"So I don't understand why he can't just see things the way you and dad see things. You've never had a problem with me being gay. So why is he so blind?\" \n\n\"Sweetheart,\" Cheryl reached out to grasp her son's hand in her own. \"You have to put yourself in his position. It sounds like his faith is everything to him, so he's looking at things from a different perspective.\" \n\nCheryl squeezed Marcus' hand reassuringly. \n\n\"Your father and I never forced you to go to church once you were old enough to decide for yourself. You always had the choice to believe what you want, to explore other faiths and other ideologies and make your own choices about spirituality. But maybe Andy never had that choice, maybe all he's known is that very conservative version of Christianity and it's been so ingrained in him that he can't separate himself from it.\" \n\nMarcus didn't like what he was hearing, didn't like how much it made sense. It was easier being stubborn and angry than being accommodating and understanding. \n\n\"You have to imagine what it would feel like to abandon everything you've ever known and ever believed about the world and your place in it,\" Cheryl sighed. \"It must be terrifying, especially if he doesn't have the support of family behind him.\" \n\nMarcus frowned, leaning back again with his arms across his chest, \"What am I supposed to do with that?\" \n\n\"I don't know,\" Cheryl shrugged. \"I guess it depends on whether this is something worth fighting for.\" \n\nMarcus paused, not sure if he was strong enough to put himself out there again. And yet, he was terrified that he was walking away from the one true love of his life. \n\n\"So what if I do?\" he whispered, not meeting his mother's gaze. \n\n\"Well, the first thing is to reach out to him again. It sounds like you both have a lot to talk about. But you need to be patient. Try to understand why he thinks the way he does, don't just dismiss it outright.\" \n\nMarcus wasn't sure if he liked the sound of that. But what choice did he have? \n\n***** \n\nMarcus slipped through a heavy oak door and into a dimly lit room that looked like it was built entirely out of wood. What looked like flood lights were set up on the wooden rafters above, but the room was pretty cavernous and the light wasn't making much of a dent on the darkness. \n\nMarcus took a seat in the back pew and then stood again when everyone else suddenly stood up. \n\n\"The Lord be with you,\" said an older man dressed in fancy robes from the pulpit. \n\n\"And also with you,\" intoned the 50 or so people in the crowd, startling Marcus when they all spoke in unison. \n\n\"May almighty God bless you, the Father, the Son and the Holy Spirit,\" said the priest. \n\n\"Amen,\" said the congregation again in unison. \n\n\"Go in the peace of Christ,\" said the priest. \n\n\"Thanks be to God,\" said the congregation. Then they all started murmuring among themselves, some gathering their things together. \n\nIt had been a while since Marcus had attended any church services, and this was definitely the first time he had attended a Catholic mass. He had never heard people all reciting the same words together and he had to admit that he found it kind of creepy. \n\nHe waited in his seat for the crowd to clear a little bit before he could make his way to the front. He had spotted Andy off to the side of the stage, also dressed in those fancy robes. It was a little weird, since Marcus hadn't seen Andy in any of his priestly clothing since that day at the baseball game. The sight of it brought up some pretty naughty images before Marcus scolded himself to behave\u2014he was in church for heaven's sake. \n\nMarcus could feel his heart pounding in his chest, and he couldn't keep his hands from shaking. He stuffed them into his pockets, hoping that he didn't look as nervous as he felt. He really had no idea how Andy would react to him suddenly showing up like this. Andy had been pretty clear about his intensions to stay in the closet, but after numerous unanswered texts and phone calls, Marcus had been left with no other choice than to ambush him. \n\nDespite his nerves, Marcus could feel a silly, stupid smile threaten to spread across his face. He hadn't seen Andy since that night Andy walked out and just seeing the other man across the room was affecting Marcus a lot more than he wanted to admit. He wanted to run over and pull Andy into his arms, to smell his woodsy scent and know the rightness that came with holding him. But Marcus restrained himself and quietly approached Andy who was chatting with some grandmother, looking for the right opportunity to make himself known. \n\nAndy looked up from his conversation suddenly and spotted Marcus halfway down the aisle. True to form, Marcus could read each and every one of Andy's emotions as they ran across the handsome man's face. First was surprise, followed by a brief spike of happiness which was quickly replaced by shock and then panic and terror. By the time Marcus was within earshot, Andy had turned his attention back to the grandmother and was doing his best to ignore Marcus. \n\nMarcus' heart sank. He had hoped that Andy would be happy to see him, had harbored a flicker of hope that this was the right move. But it was clear that he was wrong. He shouldn't have come here, this was a mistake. But instead of turning and marching out, he found himself drawing closer, as if his body was being pulled toward Andy by an invisible force. \n\nAndy only acknowledged Marcus' presence again after the grandmother turned toward him with a welcoming smile. Andy's own smile was forced and Marcus frowned. \n\n\"Hi,\" Andy jumped in quickly. \"You must be new, I haven't seen you here before. I'm Father Dylan, you are?\" \n\nMarcus froze. Of all the possible reactions he had anticipated, he had not prepared for this one. He blinked blankly a few times, his brain trying to process what was happening. Marcus glanced at the kindly looking grandmother with the sweet smile and then back at Andy whose eyes were large with panic and fear. \n\nMarcus stuck out his hand formally. \"I'm Marcus,\" he said flatly. \n\nHe saw Andy swallow with a bob of his Adam's apple before he took Marcus' hand in a handshake. Marcus gripped the familiar hand, now wet with a layer of nervous sweat and squeezed tightly. Andy swallowed again at the strength of Marcus' handshake. \n\nThe grandmother had been chatting away, introducing herself and welcoming Marcus to the church. She commented on how nice it was to have new young people join them, but Marcus wasn't listening to any of it. All he could hear was the pounding in his ears. He dropped Andy's hand like it burned him. \n\n\"Thank you, Mrs... Ma'am,\" Marcus said to the grandmother without taking his eyes off Andy. \"I'm afraid I have to go. Have a nice day.\" \n\nHe turned and stalked out of the church quickly, not trusting himself to stay in that place one moment longer without strangling Andy. \n\nOnce outside in the mid-day sun, Marcus stopped to catch his breath, his mind reeling in shock. How could he have been so stupid? Andy had made himself perfectly clear. Who was he to barge into Andy's life and expect to be welcomed with open arms? God, he was so stupid. Stephen was right, this wasn't worth it. The excruciating pain that threatened to cripple him on the steps of that church was not worth it. \n\nThe door opened behind him and Marcus turned to see Andy come out, still wearing his robes. Too angry to deal with Andy, Marcus turned on his heel and started walking fast. \n\n\"Marcus, wait!\" Andy called after him. \n\nMarcus ignored him and kept walking. \n\n\"Marcus!\" \n\nHe stopped only because of Andy's hand pulling on his arm. \n\n\"What? Now you know who I am?\" Marcus strained to keep his voice down, not wanting half of the New York sidewalk to know his humiliation. \n\nAndy sighed, eyes pleading. \"It's not like that. It's... What are you doing here?\" \n\nMarcus laughed bitterly and looked away, not trusting himself to speak. He couldn't believe he thought it would be a good idea to come. He was so foolish to believe that he was anything more than a convenient little side fuck for the priest who couldn't keep his dick in his pants. \n\n\"Marcus, look at me.\" \n\nAndy put a hand on Marcus' arm and squeezed familiarly. \n\nMarcus took a step back, moving out of arm's reach. \n\n\"Do you really think touching me is a good idea?\" He snarled at Andy. \"You wouldn't want your precious parishioners to know that you're a little gay fucker who likes to moan while taking my big cock up your ass.\" \n\nAndy paled, jaw hardened, eyes filled with shock and disbelief. \n\nMarcus grinned coldly, maliciously. \n\n\"Yeah, didn't think so.\" \n\nThen he turned and walked away. \n\n***** \n\nAndy stood on the sidewalk, watching Marcus walk away. Ever since he had run out on Marcus, Andy had felt like a dead man walking, his heart and soul numb with the pain of his sacrifice. But now as he watched Marcus walk off, Andy felt his heart and soul crumble with every step until he was truly empty inside. \n\nAs Marcus turned the corner and disappeared from sight, the last of Andy's heart and soul disintegrated. He was now a shell of a man, no more joy and no more pain, just empty. Andy continued to stand there on the sidewalk, still in his vestments, staring at the last spot he'd laid eyes on Marcus. \n\nWas this what it felt like to sacrifice? Was this what it meant to follow his calling? Is he meant to live the rest of his life dead inside? The cost seemed too great; the burden too much to bear. If this was what it meant to live a holy life, Andy wasn't sure he wanted to keep living. \n\nAndy stood there on the sidewalk in a state of shock, his mind and body unable to cope with what had just happened. It wasn't until he felt a hand on his shoulder that Andy jumped and snapped out of his trance. \n\n\"Andy?\" Father Sullivan had changed already after mass. \n\nAndy swallowed thickly. He didn't know what to say, didn't even really know if he had anything to say. \n\n\"Is everything okay?\" Father Sullivan asked. The frown on his face told Andy that the older man already knew the answer. \n\n\"You disappeared after mass. That was half an hour ago. Have you been standing out here the whole time?\" Father Sullivan took Andy's arm and led him back inside. Andy didn't have it in him to resist. \n\nThankfully, Father Sullivan led them down a worn path to the side door of the chapel, away from the people still milling around the front of the church. He didn't let go of Andy's arm until they were inside their office with the door closed. \n\nAndy sat down heavily in his chair, staring into space, knowing that Father Sullivan was waiting for an explanation, but he didn't have one to give. Andy blinked and shifting his gaze down to his wringing hands when Father Sullivan moved his own chair and sat down right in front of Andy. \n\n\"It's clear to me that there is something terribly wrong, son,\" Father Sullivan started. \"I'm not here as a priest, or even as your boss. I'm here as a friend who is concerned about your well being. There's something eating away at you from the inside. From your vantage point, you might think it's the end of the world. But trust me when I say there is nothing that is too big to work through. I've seen a lot in my years, I doubt you can shock me. So how about you tell me what's wrong?\" \n\nAndy gazed at Father Sullivan, processing the words he heard. Under any other circumstance, Andy would resist, deny anything was wrong and try to go on as normal. But what really was normal? Andy wasn't sure he knew anymore. This double life he had been living certainly wasn't normal; a lifetime of denying who he was didn't feel normal either\u2014at least, it didn't feel right. \n\nAs he took in Father Sullivan's pleading eyes, Andy realized that he didn't have any fight left in him to keep denying himself. He wasn't strong enough to keep up the fa\u00e7ade. Andy knew he had two choices: if he kept denying what he knew deep down to be true, he'd end up dead in every sense of the word, or he could finally own up to the truth. There would be consequences to confessing, there was a good chance he'd lose everything he claimed to live for. But was the other option really viable? No, he decided, it wasn't. \n\nAndy watched his hand move as if it belonged to another body. It reached for the drawer of his desk and pulled it open. Lying at the top of the drawer was one of the drawings that Marcus had made of him. Andy kept it at his desk to look at whenever things got too difficult to remind himself of the peace he felt with Marcus. Andy had another of the drawings tucked away in his wallet so that he'd always have a piece of Marcus with him wherever he went. \n\nAndy took out the drawing from the drawer and traced over the lines with his finger. He still thought Marcus had been too generous\u2014Andy certainly was not as beautiful as the drawing. His actions today proved that, if nothing else. Andy's heart broke as he realized what he had done to the man he loved. The weight of his actions fell heavily on him and tears started streaming down his cheeks. \n\nAndy had spent the last weeks trying to pretend he was okay, trying to forget that little piece of paradise he'd found with Marcus. He had buried himself in work, going into overdrive at the church to prove to himself that he was still pious enough to be called a priest. He'd even resorted to scrubbing floors on his hands and knees. All that had gotten him was bruised knees and blisters on his hands, but he was no less at peace with his decision. \n\nHe put the drawing down on the desk before he started dripping tears on it. Father Sullivan picked it up and studied it for a moment before turning back to Andy. Andy expected a frown of disapproval, but instead he only saw curiosity and concern.  \n\n\"Do you want to tell me about this?\" Father Sullivan asked. \n\nAndy couldn't help the sobs that escape his throat, his shoulders shaking with the force of his crying. This was embarrassing, a grown man sobbing into his hands, but Andy couldn't stop, couldn't get a grip on himself. Andy sobbed, pouring out the anguish and pain that had consumed his being for longer that he could remember, releasing all the pent up fear that had enslaved him for so long. Andy let it all out until the tears dried up and his head ached. \n\nAndy wiped his face with the tissue that Father Sullivan handed to him. He couldn't look the older man in the eye. He was drained and he couldn't deal with the judgment that he was sure was being directed his way. \n\n\"Heavenly Father, I pray for Your peace upon this young man,\" Father Sullivan started in a quiet, gentle voice. Andy's head snapped up when he realized what Father Sullivan was doing, and then quickly dropped his head in prayer. \n\n\"Heavenly Father, I know not what troubles Andy, but I know it must be a great and tiresome burden. Father God, we all have our burdens to bear, but You never leave us to bear them alone. Lord, I pray for Your strength upon Andy, help him turn his burdens over to You, help him lean on Your strength rather than his own. I pray that he would not feel alone, but rather know the peace of Your presence with him always. In the name of the Father, the Son, and the Holy Ghost. Amen.\" \n\nAndy quickly crossed himself, and whispered Amen. He was embarrassed by the prayer; it was intimate and personal, as if Father Sullivan knew exactly what kind of prayer Andy needed. It was a heartfelt prayer that Andy didn't feel like he deserved. He had been so disobedient, what right did he have to all those things the prayer petitioned for. \n\n\"Andy,\" Father Sullivan's voice was ever patient. \"Would you like to tell me what's wrong?\" \n\nAndy glanced up at Father Sullivan and saw nothing but concern\u2014no judgment, no condemnation. Just Father Sullivan patiently waiting until Andy was ready to talk. ",
        "Well, really, what did he have to lose now? The game was up, no more pretending. It was time to own up to his actions and face the consequences whatever they may be. \n\nAndy took a deep breath, held it in his lungs and slowly counted to five before letting it out. He was ready to talk. \n\n***** \n\nThere was an annoying pounding far off in the distance. Too far for Marcus to figure out what it was, but just close enough to be fucking annoying. Marcus tried to bury his head into his pillow to block out the sound, but it only seemed to grow louder. \n\nThen there was some sort of commotion and a door opening and hushed whispers before his bed dipped with the weight of someone sitting down next to him. Marcus' mind was slowly waking up and with it an intensely painful, throbbing disorientation. \n\n\"Marcus?\" came a gentle voice and a warm hand on his shoulder. \n\nFuck. His mother. \n\n\"Marcus, sweetheart,\" his mother's voice had that concerned sound to it that grated on Marcus' nerves. \"Sweetheart, it's two in the afternoon. Time to get up, don't you think?\" \n\nNo, he didn't think. Marcus groaned and tried to pull the pillow over his head. He didn't want to get up, didn't want to talk to his mother. He just wanted to go back to sleep, back to the safe darkness of sleep. \n\nThe weight lifted from his bed and Marcus thanked whatever God was out there that his mother finally had some sense to leave him alone in his misery. Just as he was about to succumb to the sweet oblivion of sleep, his pillow was rudely wrenched out of his grasp and he was assaulted by a waterfall of icy coldness. \n\n\"What the fuck!\" Marcus bolted upright, wiping the ice water from his face. He was fully awake now, heart pounding and head spinning, stomach bile threatening to find its way up his throat. \n\n\"What the fuck, mother?!\" \n\n\"Excuse me, mister. You do not use that kind of language with me.\" \n\nCheryl stood above him with an empty glass in her hand. The other hand was on her hip and her lips were set in that firm line that Marcus knew not to mess with. \n\n\"Sorry,\" Marcus mumbled and looked forlornly at his wet bed. There was no way he could go back to sleep now. Instead, he pulled his legs up to his chest and wrapped the duvet around himself like a cocoon. \n\n\"Oh, no you don't. You smell rank. You're getting into the shower right this minute, young man.\" \n\nCheryl started tugging at the blankets, but Marcus was in no mood to let her win. \n\n\"Stephen, some help here,\" it wasn't a request. \n\nMarcus glared at his best friend whom he hadn't noticed was standing at the foot of the bed. Stephen looked just about how Marcus felt, hair in disarray, bags under his eyes, his normally smooth face covered in stubble, shoulders slumped in defeat. He guessed that's what people looked like when they drank and bitched about closeted priests for days on end. \n\n\"Sorry, buddy. Your mom scares me.\" \n\nStephen at least had the decency to look apologetic as he helped Cheryl wrestle the blankets from Marcus and push him toward the bathroom. \n\nMarcus turned the water as hot as his skin could handle and stood under the stream, letting the water wash over him. His head was fully pounding now, the nasty hangover sinking its teeth into Marcus' brain. God, he could use a drink. \n\nAs the hot water loosened his muscles, he rolled his shoulders carefully, slowly feeling life come back into his body. Knowing that his mother wasn't above barging into the bathroom to check on him, Marcus resigned himself to soaping down and going out to face whatever talking to his mother wanted to give him. \n\nAs he turned the water off, Marcus overheard bits and pieces of the conversation going on in his apartment. \n\n\"Really, Stephen,\" his mother sounded exasperated, but Stephen's response was muffled by the towel Marcus ran through his hair. \n\n\"An entire week, Stephen! You let him drink away an entire week!\" \n\nMarcus paused and tried to remember what day it was. It had felt like a few days since Andy drove a knife through his heart, but it couldn't have been an entire week, could it? \n\nMarcus pulled on the clothes someone had left on the toilet seat for him and decided it was time to go out and face the music. The first thing he noticed was a glass of water and a bottle of aspirin sitting out on the table and he helped himself to a generous serving. This was going to be one hell of a hangover. \n\n\"Marcus,\" Cheryl began, arms crossed sternly. \n\n\"Yes, mother.\" \n\nMarcus decided it was easiest to just agree to whatever his mother wanted of him; it would be the fastest way to get rid of her and go back to bed. \n\nCheryl huffed and paced in a circle around his apartment. \n\n\"I should go find this Andy priest and give him a piece of my mind.\" \n\nMarcus exchanged looks with Stephen; they'd been commiserating about pretty much the same thing during their entire drunken episode. \n\n\"I should go tear off his testicles and shove them down his throat.\" \n\nMarcus frowned and glanced back at Stephen who shared his horrified expression. His mother was fierce, but he had never heard her threaten bodily harm. Plus, the image of what she was proposing was a little too graphic and Marcus found himself reaching down to protect his own testicles. \n\nAnd besides, Marcus wasn't sure how he felt about someone else threatening the man he loved. And yes, he still loved Andy. The ache in the middle of his chest made it all too apparent that days of drinking weren't enough to make him fall out of love with someone. \n\n\"First of all, ouch. Second of all, Cheryl, if you really decide to do that, please let me know. I'll bring some popcorn and enjoy the show,\" Stephen snarked. \n\nMarcus glared at him and was reward was a smile and an air kiss. \n\n\"If you'll both excuse me, I'll let you two catch up while I take over the shower.\" \n\nStephen moved toward the bathroom. \n\n\"I don't know why I let myself get dragged into your drama,\" he mumbled to Marcus as he walked past. \n\nCheryl sat herself down opposite Marcus at the table and reached over to clasp Marcus' hand in her own. \n\n\"Sweetheart, I don't like seeing you like this. I know you've been through breakups before, but I've never seen it hit you this hard. I'm worried.\" \n\nMarcus sighed and resisted the urge to pull his hand out from under his mother's. \n\n\"I know, mom. But I'm fine. Don't worry about me.\" \n\nCheryl didn't look like she believed him. \n\n\"Tell me what happened.\" \n\nMarcus rolled his eyes, sat back and folded his arms across his chest. He didn't want to tell his mother, he didn't want to relive that moment when Andy denied everything that had happened between them. Stephen had already teased it out of Marcus during a week of drinking, but Marcus didn't have it in him to go through it again. \n\n\"Marcus?\" Cheryl prompted. \n\n\"There's nothing to tell, okay?\" Marcus shot back, and then winced at the throbbing in his head. \n\nCheryl sat back in her chair, arms crossed, mimicking Marcus' pose. Mother and son sat across the table from each other in a battle of wills until Marcus broke down. \n\n\"I can't, okay?\" Marcus whispered. \"I don't want to talk about it.\" \n\nCheryl's posture softened, her eyes filled with concern. \n\n\"Have you told Stephen?\" \n\nMarcus rolled his eyes, \"Yes, unfortunately.\" \n\n\"Good, at least you've told someone. Nothing worse than keeping it bottled up inside.\" \n\nCheryl stood and started collecting empty bottles on the table and throwing smelly clothes into a corner. \n\n\"You need get this place cleaned up.\" \n\n\"Yes, mother,\" Marcus rolled his eyes again. \n\n\"And no more drinking. I've told Stephen to cut you off. Make sure you get out of this apartment today, you need to stay busy.\" \n\n\"Yes, mother.\" \n\nCheryl nodded, satisfied that she had contributed her part. She brushed off her hands and collected her purse. \n\n\"You're leaving already?\" Marcus asked. \n\n\"Did you want me to stay?\" \n\n\"Oh, um...\" Marcus hesitated. He didn't really want her to stay, but knew that if he answered honestly, she would stay longer just to spite him. \"I just thought you'd have more to say.\" \n\nCheryl smiled, \"I have plenty to say, but none of it will be helpful now. Remember, no more drinking, clean up, and get out of the apartment.\" \n\n\"Yes, mother.\" \n\n\"Good,\" Cheryl came over and gave Marcus a quick kiss on the forehead before letting herself out. \n\nStephen came out of the shower a minute later to find Marcus curled up on the couch wrapped up in his duvet. \n\n\"Your mom left?\" \n\n\"Yes, and she told me to tell you to clean up before you leave,\" Marcus mumbled. \n\nStephen rolled his eyes, \"And she told me to tell you that you're cut off. No more drinking.\" \n\n\"Fuck.\" \n\n\"Yeah, no shit. Now get your lazy hung over ass off the couch and help me clean up.\" \n\n\"I can't believe you let me drink away an entire week,\" Marcus said as he reluctantly climbed off the couch. \n\n\"Ugh,\" Stephen sighed. \"It's not like I really had a choice, did I? Come on, bitch, help me clean this shit up. I need to go get food.\" \n\nMarcus glanced around at the mess that was his apartment and sighed. If only his life could get cleaned up so easily. \n\n***** \n\nIt was insanely crowded on the streets of the East Village. Most people were half naked and covered in glitter; the rest were giggling behind their hands and snapping surreptitious photos on their phones. This was supposed to be a festive day, a day of celebration and pride; instead, Marcus was glowering behind his sunglasses, hands stuffed in his pockets following the kids from the LGBT Center around New York's gay pride parade. \n\nAt least the kids were in a good mood, all of them smiling and laughing, trying to collect as many condoms as they could from the stalls lining the street. Earlier they had all been on the Center's parade float as it wound its way through New York City. They looked like they were having the time of their lives, dancing to the music blasting from the speakers. Marcus was glad they were having fun, but he had chosen to forego the actual parade and just met them at the end of the route. \n\nHe just didn't have it in him to stand there and wave at people for hours. It had been several weeks already since Andy made it abundantly clear that what they had meant nothing to him. Three weeks since Andy tore out Marcus' heart and smashed it into pieces on the floor. Three weeks already, and he'd still much rather go home and drink himself dead, but he promised his mother he wouldn't. Plus Stephen had confiscated all his alcohol and had resorted to check in calls every 30 minutes to make sure Marcus was still sober. It was annoying as fuck. \n\n\"Hey, Marcus! Catch!\" Ryan shouted right before he tossed a handful of condoms at Marcus. Marcus was too stuck in his own head to react before the packages hit him in the face and fell to the ground. \n\nThe kids were doubled over in laughter and Marcus just shook his head at them. He knew what they were trying to do. He'd been depressed for weeks and the kids kept trying unsuccessfully to cheer him up. He appreciated it, but he was pretty sure it would never work. Marcus wasn't sure if anything ever would, expect perhaps rewinding the past several months of his life. \n\nEvery time his mind wandered in that direction, his hand always reached for his phone. Marcus kept subconsciously wanting to check his phone to see if Andy had reached out to him, said he was a fool, and begged Marcus to take him back. \n\nBut there was never any messages waiting for him. Maybe Andy did reach out, maybe he didn't\u2014Marcus would never know. That was Stephen's doing, too; he had blocked Andy's number on Marcus' phone and erased all history of their communications. Marcus had been furious when he found out, but Stephen had held his ground and Marcus eventually gave up, he was too tired of fighting. \n\n\"Hey, Marcus?\" Nick fell into step next to Marcus as they followed the rest of the group. \n\n\"Yeah? What's up?\" \n\n\"Um... so...\" Nick stammered. \n\n\"What's wrong?\" Marcus asked. \n\n\"Nothing's wrong,\" Nick said. \"It's just that... isn't that that Andy guy?\" \n\nNick pointed across the street, past the crowds of people. \n\nMarcus glanced over and froze on the spot as he saw the love of his life standing there looking adorably awkward. Marcus' heart constricted as the rest of the world faded into the background and all he could see was Andy with that shy little smile and bobbing Adam's apple. \n\nMarcus was surprised that Andy was at the parade, it seemed to be against everything Andy claimed to stand for. \n\n\"Who's he talking to?\" \n\nMarcus hadn't even noticed the other man Andy was talking to. But the second he did, he was filled with a rage more intense than he had ever felt before. Andy was talking to another man, a really hot, built man who was of the half naked and covered in glitter variety. And the half naked man was standing close enough that Marcus was sure some of that glitter was rubbing off on Andy's shirt. \n\n\"Are you okay?\" Nick asked, putting his hand on Marcus' arm. \"You're shaking. Sorry, I knew I shouldn't have pointed him out. I figured things went badly with you guys.\" \n\n\"No, don't be sorry,\" Marcus said through clenched teeth. \"It's fine. It's over, I'm fine.\" \n\nNick looked skeptical, but didn't push the issue. \n\n\"Um, well, should we catch up with the others?\" \n\nMarcus wasn't sure he could walk at the moment, the rage inside of him just barely kept in check. He forced himself to breath, to suck air into lungs that suddenly didn't want to work anymore. He knew he should walk away, move on with his life the way that Andy had clearly moved on with his own. But he couldn't. His feet had turned into lead and he was welded to the spot. \n\nRight when Nick was about to physically drag him away, Andy lifted his eyes across the crowd and as if they were drawn by some invisible magnet, landed on Marcus staring at him. Marcus saw the shock on Andy's face; he clearly hadn't expected to run into Marcus at the busy parade. \n\nIronically, that was exactly the impetus Marcus needed to walk away. He'd seen that look of shock before. He knew what came next and he couldn't handle yet another rejection. He had to get away. \n\nMarcus let Nick lead him through the crowd until they caught up with the rest of the group. Thankfully, Nick was a smart kid and kept the others pre-occupied while Marcus stewed in his own thoughts, overwhelmed with runaway emotions. He was so consumed with processing what was going on inside his head that he didn't notice Andy approach until he touched Marcus on the arm. \n\nThe touch sent a jolt of heat through his body and Marcus reacted by jerking his arm back. A part of Marcus reveled in the look of hurt that shot across Andy's face. Serves him right. \n\nMarcus set his jaw and folded his arms across his chest. He had nothing to say to Andy and he didn't really want to hear what Andy had to say either. And yet, something compelled him to stay. \n\n\"Marcus, I need to talk to you. I want to explain myself.\" \n\n\"Funny, seems like you're always trying to explain yourself. It's getting really old,\" Marcus spat out, scowling behind his sunglasses. \n\n\"I know, I'm sorry,\" Andy sighed and ran his fingers through his hair. Marcus tried to ignore how sexy it looked all tussled. \n\n\"You have no reason to listen to me. I won't blame you if you don't. But... please, I have to talk to you. If you still want to walk away afterwards, you have every right to, but... at least hear me out.\" \n\nMarcus hated how his first reaction was to assure Andy that he would listen to anything Andy had to say. He hated that little part of his heart that was still soft for Andy. He wished he could just shut down his feelings and walk away unaffected. Instead, he found himself calling out to Nick and telling him to keep the group together for a while and not to wander off too far. \n\nWhen he turned back to Andy, he had to consciously stamp out the warm feeling he got from Andy's shy and hesitant smile. He's supposed to be angry and offended, Marcus reminded himself; too bad his heart seemed to have a short term memory. \n\n\"I tried calling you,\" Andy said. \n\n\"I blocked your number.\" \n\n\"Oh...\" Andy cast down his eyes. \"I guess I deserved that.\" \n\n\"So what do you want?\" Marcus asked, not wanting to drag things out with unnecessary small talk. \n\nAndy took a deep breath, as if steeling himself for what came next, \"Here, I need to show you something.\" \n\nMarcus' scowl deepened as Andy grabbed his arm and pulled him down the street. He didn't want to notice the heat of Andy's hand. He didn't want to notice how Andy was voluntarily touching him in public. It meant nothing, Marcus told himself. \n\nAndy led them to one of the booths lining the road and smiled at him when they stopped in front of the table. \n\n\"I want to introduce you to someone.\" \n\nThere was a hint of pride in Andy's voice and Marcus hated to admit that a confident Andy was extraordinarily sexy. \n\n\"Marcus, I want you to meet Father Sullivan. Father Sullivan, this is Marcus.\" \n\nMarcus had been so focused on keeping himself in check that he hadn't paid attention to which booth they were standing in front of, and he hadn't paid attention to the elderly man with graying hair who was smiling broadly at him from across the table. \n\n\"Marcus,\" Father Sullivan held out his hand. \"It's so nice to finally meet you. I've heard so much about you.\" \n\nFather Sullivan's handshake was firm and warm, his voice gentle and friendly. The grandfatherly image took Marcus by surprise, as did Father Sullivan's words. \n\n\"Um...\" Marcus was speechless. He wasn't often speechless, but this time he was. There was so much going on that he didn't understand, and the two smiling faces staring at him didn't help. \n\n\"Would you like a pamphlet about inter-faith and cross-cultural initiatives in the city?\" Father Sullivan offered, holding out a photocopied brochure, his voice hopeful and teasing. \n\n\"Um, no,\" Marcus said on auto-pilot. \"I mean, um... sorry, but thank you.\" \n\n\"That's alright,\" Father Sullivan smiled and glanced back at Andy who was still beaming. \n\nMarcus tried not to let the excitement on Andy's face get to him. He'd never seen Andy so happy and carefree before. What the hell was going on? \n\n\"I'm guessing you haven't told him yet,\" Father Sullivan said. \n\n\"No, not yet. I was afraid he wouldn't believe me,\" Andy answered. \n\n\"Well, it's probably best if you explained things.\" \n\n\"I know, I'm always trying to explain myself,\" Andy said with a smile. \n\nMarcus glanced back and forth between them, trying to figure what the hell they were talking about, and trying desperately to ignore Andy's infectious grin. \n\n\"Explain what?\" Marcus finally spat out. \n\n\"I'm quitting,\" Andy said as his smile broadened. \n\n\"Quitting what?\" \n\n\"The clergy. I'm leaving the priesthood,\" Andy looked like he could barely contain himself and would start jumping up and down if he hadn't been in the middle of a crowded street. \n\nMarcus just stared dumbfounded at him, unable to understand what Andy had said. \n\n\"What?\" \n\n\"I'm quitting the clergy. Father Sullivan finally convinced me to do it. We're putting in the paperwork for it tomorrow.\" \n\nAndy's eyes twinkled. \n\n\"And... I'm out.\" \n\n\"What?\" Marcus knew he sounded dumb. He felt dumb. \n\nAndy chuckled and exchanged a look with Father Sullivan who was also grinning. \n\n\"I'm out,\" Andy said with a smile. \"At least to Father Sullivan. I told him everything.\" \n\nMarcus blinked and took a deep breath. He thought he understood what Andy was saying, but he was afraid that he was misinterpreting it. It was just so sudden, so unexpected, his brain couldn't wrap itself around the idea that Andy was out and leaving the church. \n\nMarcus' heart, on the other hand, was swelling with the possibilities that came with Andy being out. Marcus warned himself to stay calm, and not to jump to conclusions. Because even if Andy was out, there was no indication that he wanted to be with Marcus. ",
        "\"I know this is a lot to take in. I can explain,\" Andy's excitement dimmed a fraction as his nerves got the better of him. \"If you'd like to listen.\" \n\nMarcus sighed. How could he not listen now? Fuck. \n\n\"Actually, would the two of you mind looking after the booth for me for a little bit? This old man needs to find a restroom,\" Father Sullivan said with a smile and Marcus had a feeling that the older man's bladder was far from full. \n\nBut he didn't object as Father Sullivan wandered off into the crowd and Andy pulled him behind the table, guiding him into one of the two folding chairs. \n\n\"Um... what kind of booth is this?\" Marcus finally got around to asking, glancing at the various pamphlets littering the table. \n\n\"Apparently Father Sullivan had been working with this inter-faith group on and off for a while. They want to bridge gaps between different faiths, and reach out to communities that typically shy away from religion,\" Andy explained as he organized the pamphlets. \n\n\"After I told him everything, he mentioned that the inter-faith group was setting up this booth. He hadn't planned on taking part in it this year, but he thought it might be a good idea, considering... well, you know,\" Andy said with a shrug. \n\n\"And don't worry. I doubt we're going to get people stopping by,\" Andy smiled wryly. \"There haven't been any visitors all day.\" \n\nAndy chuckled to himself, though he looked a little nervous. Marcus grudgingly admitted that it was kind of adorable. \n\n\"So... he's okay with you being gay?\" Marcus asked, half afraid that Andy would deny that he's gay. \n\n\"Yeah, he is, surprisingly. I didn't think he would be, but...\" Andy shrugged and smiled, taking the chair next to Marcus. As he gazed back at Marcus, Marcus could see a peace in Andy's doe eyes, a contentment that hadn't been there in the past. It was clear Andy had finally come to terms with himself and Marcus' heart soared at the realization. \n\nMarcus glanced away first, not trusting how he was going to react. \n\n\"So you wanted to explain?\" The words came out gruffer than Marcus had intended, but he wouldn't let himself feel bad for the sheepish look Andy shot him. \n\n\"Well, first of all. I want to apologize. I'm so, so sorry for the way I treated you that day when you showed up at the chapel. That was extremely rude of me, and offensive. I'm sorry,\" Andy looked right at Marcus as he said those words, the sincerity ringing true. \n\nMarcus just nodded his acknowledgment, knowing that his voice wouldn't work properly if he tried to speak. \n\n\"I was a wreck that day. Couldn't go back into the chapel to face those people, knowing how I had treated you. I...\" Andy's voice trailed off, his gaze dropping to his hands folded in his lap. \"I thought about committing suicide.\" \n\n\"What?!\" Marcus exclaimed a little too loudly, his heart suddenly panicked at the thought of losing Andy forever. \n\n\"Don't worry,\" Andy reassured him with a sad smile. \"I'm obviously fine. But that day... I didn't think I'd be fine. I'd never thought about committing suicide before, even after all those years of denying who I was. Taking one's own life is forbidden according to the Catholic Church, you go straight to hell. So that had never been an option for me. But that day... hell sounded like a better place than where I had found myself.\" \n\nMarcus ground his teeth together, caught up in anxiety over the pain Andy must have felt to consider such a drastic move. \n\n\"I was a mess when Father Sullivan found me. He's easy to talk to, and I apparently had reached my breaking point and didn't need much prompting. It took me a while, but it all eventually came out. I told him about our first night at the club, and the baseball game, then the youth night when I sang with Sophie,\" Andy reminisced. \n\n\"I told him about how gentle and kind you are, patient and caring when I had given you no reason to treat me so well. I told him about how confused and scared I was, how the only time I ever felt peace is when I'm with you. And when I'm not around you, it's like I'm walking along a cliff, terrified that one misstep will take me over the edge.\" \n\nMarcus tried to swallow around the lump forming in his throat, but found that his mouth had gone dry. His hands were shaking as he clasped them tightly together. \n\n\"I told him how guilty I felt, how sinful I felt. And then I told him that while I felt terrible for indulging in what I had been taught were sinful acts, I actually felt worse about the way I treated you,\" Andy's voice was small, as if afraid to speak too loudly and burst the little bubble that had formed around them in the middle of the busy parade. \n\n\"And he agreed. He thought it was right for me to feel worse about how I treated you than for being gay. Because the most important commandment is to love the Lord your God with all your heart, all your soul, and all your mind. And the second is to love your neighbor as yourself,\" Andy smiled. \n\n\"But he said that I can't love my neighbor as myself, if I don't first love myself. It sounds weird, I know,\" Andy shrugged. \"But it makes a weird kind of sense. I guess I hadn't been loving myself, so I didn't know how to love others.\" \n\nMarcus smiled at that. It made a lot of sense, not the weird kind but the normal logical kind. \n\n\"And then Father Sullivan gave me a lecture on theology that I thought I understood, but clearly I had no clue.\" \n\n\"What's that?\" Marcus' voice was barely more than a whisper. He was afraid anything louder would ruin the moment and scare Andy off just when things were starting to become clear. \n\n\"That at the center of the Christian faith is the fact that we are all sinners,\" Andy continued with a smile. \"But that we are all saved by grace through faith in Jesus Christ. Anything and everything else besides that is secondary. There's a lot of variation in the Christian faith, Christians can believe a whole slew of things. But as long as they believe that central truth, they can believe whatever they want about all the rest of it.\" \n\nHe paused and looked at Marcus expectantly. Except Marcus wasn't sure how was he supposed to respond. So he looked away and cleared his throat. \n\n\"Sorry,\" Andy's smile was sheepish. \"I miss looking at you.\" \n\nMarcus was never one to blush easily, that was Doe eyes' trick. But he couldn't help the flush that spread across his cheeks at Andy's words. That lump in his throat grew. \n\n\"It took a lot of arguing and fighting, but Father Sullivan eventually convinced me that I wouldn't be committing heresy if I left the clergy. Actually,\" Andy gave a dry chuckle. \"It was more like he helped me see that I had been using the priesthood as some sort of escape route. I was taking advantage of the vow of celibacy to avoid having to deal with who I am. He once told me that some people become priests to run away from something, and they end up doing more harm than good. I think I knew even back then that I was one of those people\u2014but, I just never wanted to admit it.\" \n\nA part of Marcus wanted to scream, I told you so! But Andy clearly had figured that part out himself. \n\n\"Anyways, Father Sullivan assured me that if I left, it wasn't as if I was conceding defeat or admitting that I'm not strong enough, or anything like that. Resigning from the priesthood isn't a sign of failure\u2014that was a hard idea to accept. But to be honest, considering all the sneaking around I'd been doing, well, my vow was kind of a sham anyways\u2014my life would have a lot more integrity if I was a layman. \n\nNot everyone is called to be a priest; I've told people that dozens of times, I just never thought it applied to me. But Father Sullivan finally made me realized that if I found someone I love, well, marriage can be just as glorifying to God as being a minister of faith.\" \n\nAndy was looking at him with those big doe eyes, hopeful and expectant. If Andy was trying to imply something with that last bit about love and marriage, Marcus wasn't going to bite; he forced himself not to read too much into those words. But there was no denying the sense of clarity in the way Andy spoke, as if he had arrived at a revelation and everything finally made sense. \n\n\"Seems like you've figured it all out,\" Marcus was frankly rather surprised at the complete 180 Andy had pulled. It didn't seem like that was possible in the span of three weeks. \n\nAndy smiled with a hint of sadness, \"Not entirely. But enough to know that this is the right decision. You know that sense of peace I told you about? The peace I'm supposed to find with God?\" \n\nMarcus nodded. \n\n\"I think I may have found it,\" Andy admitted. \"I think I found it when I finally accepted who I am.\" \n\nMarcus smiled, knowing how important that peace was to Andy; he was genuinely happy that Andy was happy. But he reminded himself that that didn't necessarily translate into anything more for them. \n\n\"So I'm not going to be a priest anymore. No more vow of celibacy. And I'm out, well, at least to Father Sullivan. I don't have many friends and I'm not sure I'm ready to come out to my family just yet, but I don't want to hide anymore. I found something that gives me peace, well, someone who gives me peace, and I want to be with him.\" \n\nMarcus swallowed thickly, resisting the temptation to let his heart fall into Andy's outstretched hands. Marcus set his jaw, fighting against the need to pour out love on Andy. \n\n\"Marcus,\" said Andy. Despite Marcus' efforts otherwise, his heart swelled at the sound of his name on Andy's lips. \"You're that person, and I want to be with you. Is that okay?\" \n\nMarcus felt like he had been punched in the stomach as all the air gushed out of his lungs. These were the words he'd wanted to hear for months now, words that he had been desperate to hear. So why did he feel so completely shattered? \n\n\"Fuck, Andy,\" Marcus managed to get out. He ran his hands through his hair, and stood up to pace around the confined space behind the table. He tried to get his brain to clear out all the jumbled thoughts running through his mind. \n\nMarcus glanced down just in time to see the hopeful smile slip from Andy's face, replaced by embarrassment, hurt, and heartbreak. Marcus belatedly realized what his reaction looked like. \n\nMarcus sighed with exasperation before kneeling in front of Andy and grasping the other man's hands in his own. \n\n\"No, Andy, that's not what I meant,\" Marcus tried to explain. \"I meant... I mean... Fuck.\" \n\nMarcus sighed again as the man he loved frowned down at him in confusion. \n\n\"Andy, you can't just dump all this on me and expect me to... it's just...\" Marcus sighed heavily. \"It's a lot.\" \n\nAndy nodded, disappointment showing clearly in his big brown eyes. Marcus wished he could wipe that look away and replace it with happiness. But he'd been through hell the past several weeks and he wasn't sure he had any emotional capacity left to spare. \n\n\"I love you,\" Andy whispered. \"If that matters.\" \n\nMarcus' heart broke at the sweetness and hope that laced Andy's words. He loved Andy, too. There was no denying that truth. But there was so much baggage between the two of them; Marcus was scared they weren't strong enough to sort through it all. And if they didn't make it... well, Marcus didn't think he'd survive another break up with Andy. \n\nMarcus raised a hand and ran his thumb along Andy's cheekbone, burying his fingers into Andy's thick brown hair. Did he dare risk his heart again with this man? \n\n\"Andy, Doe eyes, I\u2014\" \n\nMarcus didn't get a chance to finish the thought before Andy leaned forward and stole a kiss. \n\nAfter the initial surprise, Marcus couldn't stop the growl that emanated from his chest. He tightened his grip on Andy's hair and held the other man in place as Andy's lips caressed his own. \n\nGod, he had missed this. He had missed the feel of Andy's soft lips against his own, the feel of Andy's body in his arms, the clean woodsy smell of Andy that drove Marcus crazy. He could get drunk on Andy's kisses; they tasted better than any alcohol found on the face of the earth, Marcus was sure of it. \n\nUnable to stop himself, Marcus took over the kiss, swiping his tongue across Andy's lips, demanding entry into Andy's mouth. He was rewarded with that little whimper of surrender as Andy opened for him, melting into Marcus' body. \n\nSuddenly, a chorus of yelps and catcalls broke out from the other side of the booth's table. Marcus reluctantly pulled back to see what the ruckus was and wasn't surprised to find the kids from the Center grinning and giggling at them. \n\n\"Damn, Marcus!\" exclaimed Ryan. \"Some chaperone you are! Disappearing on us to go make out with some hot guy.\" \n\nMarcus turned back to Andy and was greeted by a bright red flush. Marcus expected nothing less. \n\nMarcus slowly extricated himself from Andy's arms. As much as he would have liked to continue kissing Andy, he knew that if they hoped to salvage whatever relationship that had been budding between them, it couldn't just be based on hot sex. Marcus knew they could do hot sex; the question was, could they do more than that? \n\n\"Dude! You're supposed to be chaperoning us so we don't get into trouble!\" Nick said. \"It looks like we should be chaperoning you!\" \n\n\"Yeah, yeah,\" Marcus waved a dismissive hand at the kids. He turned back to Andy, \"Look, um...\" \n\n\"Hi kids!\" Father Sullivan chose that very moment to return, shuffling through the kids and around the table. \"Are you having fun?\" \n\nThe kids broke out in variations of yeah, it's cools as Father Sullivan beamed at them. \n\n\"Andy, Marcus, thanks for looking after the table for me. Why don't you two take the kids around some more?\" Father Sullivan shooed them out from behind the table. \n\nAndy looked so hopeful with those big doe eyes that Marcus couldn't refuse. \n\n\"Yeah, sure,\" Marcus said. \n\n\"Have a great time!\" Father Sullivan sent them off with a wave. \n\nMarcus stuffed his hands into his pockets as Andy fell into step next to him. He didn't trust himself not to grab Andy's hand. That single kiss back there had reminded Marcus of how good it felt to touch Andy, and Marcus knew he wasn't strong enough to think things through clearly if he gave into the temptation. \n\nMarcus could feel Andy staring, the heat of Andy's eyes as they gazed unabashedly at him. When Marcus turned to meet Andy's gaze, Andy smiled at him and Marcus' heart did a summersault. \n\nFuck. \n\n\"So, um, what are you going to do after you leave the church?\" Marcus asked\u2014anything to keep himself from grabbing Andy and assaulting him in the middle of the street. \n\nAndy shrugged, \"I'm not sure yet. I'll need to find a place to stay first, I guess.\" \n\nMarcus bit his tongue before he could offer Andy a space in his bed. \n\n\"And then find a job,\" Andy continued. \"I figured I could volunteer at the Center until then, at least. I was going to reach out to Kathleen on Monday.\" \n\nDouble fuck. \n\n\"Do you think it'll be okay if I help out there? Do you think the kids will be okay with it?\" Andy asked. \n\nA small smile spread across Marcus' face at the sincerity he heard in Andy's voice. Despite all the crap they had been through, Marcus had no doubt that Andy would always put those kids' best interests first. Marcus thought back to the magic Andy had worked with Sophie and was certain that the kids would fall madly in love with Andy just as quickly as Marcus had. \n\n\"I think you'll be a big hit.\" \n\n\"Yeah?\" Andy asked, with an uncertain grimace. \n\n\"Yeah,\" Marcus said, his smile growing. He bumped his shoulder against Andy's, delighting in the chuckle it elicited from Andy. \n\nAndy bumped him back, and suddenly everything seemed right with the world. Marcus had no idea what tomorrow would hold, but he felt at peace, as if everything that had been turned upside down in the past three weeks were suddenly right side up again. He had hope, and that was enough for him. \n\n***** \n\n\"Stop fidgeting,\" said Marcus as he reached over to grasp Andy's hand. Andy looked down to see their fingers intertwined\u2014the sight never failed to make his heart swell. \n\n\"I'm nervous,\" Andy responded, squeezing Marcus' hand. \"I've never done this before.\" \n\n\"Oh, right, I keep forgetting.\" \n\nAndy shot Marcus a good natured glare. \n\n\"Don't worry!\" Marcus laughed. \"She's going to love you.\" \n\n\"She hates me.\" \n\nMarcus looked like he was going to dispute Andy's statement, but then stopped himself. \n\n\"She'll come around,\" Marcus said with a shrug, and then laughed as Andy punched him on the shoulder. \"Ow, that hurt.\" \n\nAndy rolled his eyes, but stopped himself mid-roll as he spotted Cheryl arriving at the restaurant. Andy was meeting Marcus' mother for the first time at their regular brunch dates, and he was so nervous his stomach was in knots. Marcus had told him how angry Cheryl had been when things were at their worst, and Andy was eager to repair his damaged reputation. \n\nCheryl wove her way through the tables with an icy look on her face. Andy gulped\u2014Cheryl looked like she could eat him alive. \n\nAndy stood as Cheryl approached the table and automatically pulled out her chair for her as he'd been taught to do since a child. \n\n\"Really, Andy?\" Marcus asked with a raised eyebrow. \n\n\"Huh? What?\" \n\nAndy followed Marcus' gesture as waved his hand toward the direction of the chair. \n\n\"Tsk, don't pay any attention to my son,\" said Cheryl. \"Apparently, he needs to learn some manners.\" \n\n\"Ugh, whatever,\" Marcus rolled his eyes, but didn't even bother getting out of his seat. \n\nAndy smiled shyly as he sat back down. \n\n\"You're taller than I imagined,\" Cheryl gave Andy a once over. \n\nAndy immediately felt a blush spread across his face at her comment. \n\n\"Um, I'm 5'11, ma'am.\" \n\n\"We're the same height, mother. What does it matter?\" Marcus was glaring at his mom. \n\nCheryl glared right back at him. \n\n\"Marcus tells me you used to be a Catholic priest,\" Cheryl continued, ignoring her son. \n\nAndy's blush deepened and he reached for his Bellini for some liquid strength before answering. \n\n\"Uh, yes, ma'am. Up until about 6 months ago.\" \n\n\"And what have you been doing since then?\" Cheryl questioned Andy. \n\n\"I've been volunteering at the LGBT Center,\" Andy answered, smiling as he thought of the kids he worked with there. \"We're actually discussing the possibility of me coming on as full-time staff, probably as youth director.\" \n\n\"He's started an a cappella group,\" added Marcus with a smile. \"Nerd.\" \n\nAndy glanced over to see Marcus with his chin propped up in his hand, elbow braced on the table. The sweet smile and admiring look in Marcus' eyes calmed Andy's nerves; it was a look Andy had come to appreciate and depend on over the past months, it was a look that settled any doubts Andy had and encouraged him to push forward in his journey. \n\nAndy smiled back at Marcus, the two of them sharing a private moment, oblivious to the way Cheryl was examining them. \n\n\"Are you still attending church services or anything like that?\" Cheryl interrupted them. \n\nAndy turned his attention back to Cheryl before sighing. \n\n\"Not really,\" he admitted. \"I haven't been going to the public masses, but I have kept in touch with my previous colleague at the parish. He's been generous enough to meet with me privately and do pseudo-masses together.\" \n\n\"He still does his Liturgy of Hours thing,\" added Marcus. \n\n\"What's that?\" asked Cheryl. \n\n\"They're like daily prayers,\" explained Andy. \"I've been doing them every day for pretty much my entire life. It's a hard habit to break.\" \n\nAndy gave her a wry grin and a shrug. \n\n\"Well, don't break the habit if you don't have to,\" said Cheryl. \"If it's important to you, you should cherish it. No point swinging from one extreme to the other, if you know what I mean.\" \n\nAndy did know and he appreciated her affirmation of the practice of his faith. It had been one of the most challenging things about leaving the church so far\u2014how much of his faith did he keep and what parts should he let go of? Father Sullivan\u2014and even Kathleen from the Center\u2014had been instrumental in helping him find a middle ground. ",
        "\"How about your family?\" Cheryl continued her interrogation. \n\n\"Mother,\" Marcus warned, sitting up straight and glaring at her. \n\n\"No, it's fine,\" Andy cut in. He reached for his Bellini again, feeling his heart constrict as he remembered what happened. \n\n\"Marcus came with me to visit them a couple of weeks ago,\" Andy started. \"I had told them that I was resigning from the clergy, but hadn't told them why. I told Marcus they wouldn't take the news well, but he didn't believe me.\" \n\n\"Humph,\" Marcus obviously wasn't impressed, sitting back in his seat and crossing his arms. \n\n\"Unfortunately, I was right. I think they wanted to kick us out of the house as soon as I told them I'm gay. They probably thought they were being gracious by letting us stay for dinner before ushering us out,\" Andy exchanged a sad look with Marcus. \"I think we both would have preferred skipping dinner.\" \n\n\"Sweetheart,\" Cheryl surprised Andy by reaching over and clasping his hand in her own. \"I'm so sorry to hear that.\" \n\nAndy gave her a sad smile. He was okay for the most part, had come to terms with the fact that his parents likely would never understand. \n\n\"Well, my dear, don't you worry,\" said Cheryl, with that same look of care and concern that Andy so often saw with Marcus. \"You have a new family now. You're not alone anymore.\" \n\nAndy's breath caught in his chest as he realized what Cheryl was saying. She was right, he realized. Here he could build a new family with people who knew who he was and accepted who he was. He looked over at Marcus who was smiling at him with more love than Andy knew was possible to feel for someone. Yes, he had a new family now. \n\n\"And besides,\" Cheryl continued. \"I could use another son. The one I have now is... eh.\" \n\n\"Hey! What's that supposed to mean?\" exclaimed Marcus. \n\nCheryl just smiled at him sweetly before sipping at her Bellini. Andy couldn't help by chuckle. He would gladly accept Cheryl as his mother, gladly accept the offer of being part of their family. \n\n***** \n\n\"I think that went well,\" said Marcus. \n\nThey were taking a stroll through Central Park after brunch with Marcus' mom. The leaves had changed color, painting the park in shades of golden reds and yellows. The air was crisp and fresh, tinged with the hint of the coming winter. \n\nAndy squeezed Marcus' hand, \"Yeah, I think it did. Thank you.\" \n\nMarcus turned to him with a smile, \"For what? You did all the talking.\" \n\n\"For everything,\" Andy replied, his heart overflowing with love for this man. \n\nMarcus lifted their clasped hands and kissed the back of Andy's, his eyes smouldering behind the dark lashes. Andy's breath caught in his chest; he would never get tired of looking at Marcus, never get tired of seeing him smile and laugh, never get tired of holding each other. \n\nThis was it, Andy realized. He had spent his whole life striving and failing to live up to some false standard of perfection; he had repeatedly lied to himself and to others about who he was in an attempt to project that ideal image of piety. But God never asked anyone to be perfect\u2014He's only ever asked people to love others because He first loved them. \n\nYes, this was it. Marcus was it\u2014the person Andy had been called to love and serve in that unconditional way Jesus demonstrated in the Scriptures. This was Andy's calling, the true calling that would propel him forward and give him direction for the rest of his days. The realization took his breath away. \n\nMarcus cocked his head as Andy continued to stare, \"Are you okay?\" \n\nAndy nodded, not trusting his voice. \n\nMarcus raised an eyebrow, \"What's going on in your head?\" \n\nAndy chuckled and shook his head, \"I've been a mess the entire time you've known me. Heaven knows I don't have everything sorted out yet.\" \n\n\"I don't have everything sorted out either,\" said Marcus with a shrug. \"Life is messy. I'd rather it be messy with you than without you.\" \n\nAndy was in awe. Was it possible for one person to have so much grace? Marcus never ceased to surprise Andy with his capacity to forgive, it seemed almost un-human. \n\n\"How are you able to forgive everything I put you through?\" Andy asked in astonishment. \"And everything I'll probably put you through in the future.\" \n\nMarcus furrowed his eyebrows in that way that meant his was thinking. Then a big smile broke out across his face. \"Because love suffers long and is kind. It bears all things, believes all things, hopes all things, endures all things. Love never fails.\" \n\nAndy cocked his head, \"1 Corinthians 13?\" \n\nMarcus laughed, \"Hey, I grew up going to church, too. I memorized my fair share of scripture.\" \n\nAndy couldn't help but laugh, too. As the laughter faded, Andy decided there wasn't any point in waiting anymore. He hadn't prepared anything, hadn't expected to be doing this now. But it was the right moment and Andy didn't want to let it slip away. \n\nStill clasping Marcus' hand, Andy dropped down to one knee. He smiled up at the confused and slightly shocked look on Marcus' face. \n\n\"Marcus,\" said Andy, his heart racing in his chest. \n\nMarcus opened his mouth, but no sound came out. \n\n\"Marcus, I love you with my whole heart, my whole mind and my whole soul. I love you more than life itself. I want to spend the rest of my days loving you and serving you. You're right, life is messy. And there is no other person I'd rather be messy with than you. Marcus, love, will you marry me?\" \n\nMarcus was shaking, Andy could feel it in their clasped hands. For a split second Andy was terrified that Marcus would say \"no,\" and claim that they weren't ready to move forward. A flood of doubts poured into Andy's mind and he swallowed, trying to calm himself while he waited for Marcus' answer. \n\nBut then a giant smile broke out across Marcus' face, \"Yes! Of course, yes!\" \n\nMarcus pulled Andy to his feet and pulled him in for a hard kiss, squeezing Andy tightly until Andy felt lightheaded. Then at just the right moment, Marcus pulled back and nibbled at the corner of Andy's mouth until Andy opened and let Marcus' tongue inside. \n\nAndy moaned as he tasted the strawberries and whipped cream Marcus had on his pancakes at brunch. Marcus' kisses were divine, and now they were Andy's to savor for the rest of his life. Andy's heart hurt with how much joy he felt in knowing that Marcus was his and he was Marcus' for the remainder of their days. \n\nA light applause broke through the haze of desire that was building low in Andy's stomach. Andy whined in complaint when Marcus broke off their kiss and looked around. It was only then that Andy realized they had an audience, who had apparently been witness to the last few minutes. \n\nAndy felt himself flush bright red when he saw the number of people gathered around them who had seen his entire proposal. Thankfully, Marcus pulled Andy behind him and Andy quickly ducked his head, willing his cheeks calm down. Marcus waved at the crowd and led Andy toward the closest park exit. \n\nNeither man spoke much on the way home; they just kept staring at each other with silly little grins. The minute they got back to Marcus' apartment and the door was locked behind them, Marcus pushed Andy up against the wall, pressing their bodies together as he slanted his mouth over Andy's. \n\nAndy sighed, letting Marcus' tongue invade and conquer, burying his hands in Marcus' curls to hold the other man to him. A shiver traveled up Andy's spine as he felt Marcus glide his hand down Andy's back and over his ass, giving those cheeks a firm squeeze. Andy tilted his hips to grind their dual erections together through their jeans. Andy loved how Marcus shuddered in his arms. \n\nMarcus eventually pulled back, a dazed look in his eyes. Heat pooled in low in Andy's stomach, a burning desire to consummate the love they shared. Marcus took Andy's hand and led him over to the bed. Slowly, both men undressed themselves, eyes feasting on each other's bodies as they went. First jackets were tossed onto the couch, then shoes were toed off and kicked to the side. Andy's breath hitched as Marcus reached for the hem of his t-shirt and paused with an inch of skin showing. \n\nWhen Marcus didn't move to take it off immediately, Andy glanced up to see what the problem was. He was greeted by the panther\u2014that look in Marcus' eyes that Andy had experienced their first night together, the look that made Andy feel like prey and hoping that he got caught. Marcus smirked knowingly and ever so slowly lifted his shirt and pulled it over his head. \n\nAndy's mouth went dry and his cock hardened painfully at seeing Marcus' naked torso, rolling muscles, smattering of hair and that tantalizing treasure trail. Sure, he'd seen Marcus naked dozens of times before, but the sight never failed to take his breath away. Marcus was gorgeous. \n\n\"It's your turn,\" Marcus said, snapping Andy out of his thoughts. \n\nAfter a split second, Andy gave Marcus what he hoped was also a smoldering look and reached for the hem of his own t-shirt. As Andy pulled his shirt off, he was gratified at the look of reverence on Marcus' face. Andy had been strict about going to the gym every day, determined to lose that layer of fat that made him chubby. He'd made some progress but that layer of fat was stubborn. And then Marcus had mentioned how he liked Andy a little chubby\u2014Andy resolved right then that he would stay a little chubby, just for Marcus' sake. \n\nMarcus was reaching for his belt now; Andy mimicked him by reaching for his own. Slowly, they each unbuckled their belts, popping the top button of their jeans and pulling down the zipper. By the time their jeans were undone, both were breathing heavy, desire evident in each pant. \n\nAndy stepped over the Marcus and dropped to his knees. He loved running his hands down Marcus' slim hips and pushing Marcus' jeans off. There was just something about the narrow taper that always made Andy's cock jump\u2014this time was no different. Andy smoothed his hands along Marcus' outer hips, Marcus' jeans and briefs catching on Andy's hands as he went. As Marcus' briefs were pushed down, Marcus' thick, hard cock popped out, hitting Andy in the face. \n\nA shudder ran through Andy as he rubbed his face against Marcus' cock, breathing Marcus' cinnamon and spice. Andy placed a gentle kiss right at the base of Marcus' cock, licking the smoothly shaved skin around the shaft and down to Marcus' balls. Andy took each one into his mouth in turn, lapping at them with his tongue and humming so Marcus could feel the vibrations. \n\nMarcus loved having his balls played with, this was something Andy learned very quickly. And Andy found that he loved playing with Marcus' balls\u2014they were the perfect size to fit inside his mouth, and the feeling and sound of them as they slapped against Andy's ass when Marcus was inside him, well, that always made Andy cum hard. \n\nMarcus' hips tilted forward as Andy lavished attention on Marcus' balls. \n\n\"Doe eyes,\" Marcus moaned, his fingers buried in Andy's hair, massaging his scalp. \n\nAndy moaned back in response. \n\n\"Fuck,\" Marcus bit out between clenched teeth. \n\nMarcus' cock was rock hard, his foreskin stretched taunt around a thick shaft of velvet steel. The head of Marcus' cock was an angry red with a bead of pre-cum forming at the tip. The sight of it just inches from his face made Andy's own cock leak in his briefs. \n\nAndy abandoned Marcus' balls to lick the pre-cum off Marcus' cock. Andy savored the taste of Marcus on his tongue, it was a drug that Andy would go down on his knees for every day for the rest of his life. Andy wrapped his lips around the head of Marcus' cock and sucked hard; he was rewarded with another drop of pre-cum, Marcus' flavor exploding in his mouth. \n\nAndy had had a lot of practice sucking on Marcus' cock during the past several months. He'd become adept at swallowing Marcus' cock whole, and rubbing his nose against Marcus' pelvic bone while the thick shaft sat in his throat. Andy found that he loved the feeling of having all his senses filled with Marcus, tasting, gazing, breathing in the essence of Marcus. It made Andy so hard, he had to reach down and squeeze himself through his jeans to ease off the building pressure. \n\nAndy bobbed up and down on Marcus' cock, opening up his throat so that the entire length disappeared inside Andy's mouth with each downstroke. One hand was clutching at Marcus' ass to maintain leverage while the other was rolling Marcus' balls around in Andy's palm. \n\nMarcus' hips were bucking, his fingers tightening in Andy's hair. He was close, Andy had learned to tell the signs. Right before Marcus was about to blow, Andy pulled off, leaving Marcus' cock pulsing at the edge of an orgasm, glistening with spit. \n\nAndy panted and gazed up at Marcus through his lashes. The sight he was greeted with made his breath hitch. Marcus' chest was heaving from the pleasure Andy had given him, his eyes heavy lidded with desire, and predatory. Andy was about to get devoured and his asshole clenched in anticipation. \n\nMarcus growled low in his chest before Andy was pulled up and pushed onto the bed. Marcus grabbed Andy's jeans and briefs and tugged them down Andy's legs before tossing them on the floor. Then Andy's legs were folded back until his twitching hole was exposed to Marcus' view. Marcus let out another low growl before diving in and attacking. \n\nAndy cried out as Marcus' tongue twirled around his sensitive hole, the stubble scrapping against delicate skin. Marcus wasted no time in pressing his tongue against the intricate folds of Andy's hole, demanding entrance into Andy's body. Andy clutched at the sheets as he felt his body grant Marcus access. \n\n\"Oh Marcus,\" Andy cried, his body on fire from the assault of Marcus' tongue on his ass. His skin tingled everywhere, sensitive even to the feeling of the sheets underneath him. \n\nSoon Marcus was working one finger than two into Andy's ass. Andy adjusted quickly, needing less prep work these days than he previously did. Andy's body spasmed around Marcus' fingers as they tapped at Andy's prostate. The sensations were overwhelming and Marcus only added to them by taking Andy's cock into his hot, wet mouth. \n\n\"Ahh...\" Andy cried, as Marcus worked the head, his tongue tracing circles around the engorged glands before prodding at Andy's piss slit. Andy threw his head back and gripped the sheets tightly, trying to keep himself from cumming too soon. \n\n\"Marcus, please, I need you,\" Andy reached for the man he loved, aching to be stretched and filled by him. \n\nMarcus ran his free hand up Andy's body, raking his fingers through Andy's chest hair, sending shivers of pleasure to the tips of Andy's fingers and toes. Then he let Andy's cock slip out of his mouth with a pop and extracted his fingers from Andy's ass. \n\nAndy panted as he watched Marcus move with such grace and beauty\u2014he had never witnessed anything more mesmerizing in his life. \n\n\"On your stomach,\" said Marcus, his voice rough with passion. \n\nAndy's cock throbbed painfully at the command and his heart started racing. Over the months, this had grown to be Andy's favorite position, with Marcus pressed against his back, Marcus' arms wrapped tightly around him\u2014Andy felt safe and cherished and protected. \n\nAndy scrambled higher up on the bed and grabbed a pillow to wedge under his hips. Marcus had found the bottle of lube from the nightstand and was stroking his hard angry cock with the gel. Andy bit his lip at the sight, telling himself to stay calm and breath. \n\nThen Marcus crawled up behind Andy, straddling Andy's thighs. Marcus' hands massaged Andy's ass cheeks, pulling them apart before squeezing them tightly. Andy couldn't stop the whimper than escaped his throat. \n\nAndy's breath caught as Marcus applied the cool gel to Andy's ass, working the lube deep inside with a couple of fingers. Andy's cock was caught against the pillow under him and he began grinding against it to relieve some of the pressure threatening to explode. \n\nWhen Marcus lay his body over Andy's, chest sliding over Andy's back, Marcus' cock nestled snuggly in between Andy's ass cheeks, Andy felt an sense of calm settle over him; the frantic need and tantalizing sensations gave way to a deep seated peace and security in knowing that this is where he belonged. \n\n\"Andy,\" Marcus whispered in his ear. \n\nAndy turned his head to the side and met Marcus in a gentle kiss, sweet and unhurried, his heart swelling with the love he felt. Then Marcus reached a hand in between them to guide his cock to Andy's waiting hole. Andy tilted his hips back to find that perfect angle. With a little pressure, Marcus' cock slipped inside. \n\nAndy sighed into their kiss, gratified by that sense of completion as their bodies united into one. Marcus worked his way in, short little strokes that allowed him to sink inch by inch into Andy's ass until he was pressed up against those cheeks, buried deep in Andy's body. Andy's head spun as he welcomed Marcus' whole weight on top of him, pressing him into the bed. \n\nThey held themselves there for a moment, breathing in each other's air, savoring the feeling of their bodies connecting. Marcus' hands found the back of Andy's to intertwine their fingers; their legs shifted until they were woven around each other, bringing them that much closer together. Andy was fully covered by Marcus, inside and out, surrounded by Marcus' lean muscles, breathing in Marcus' scent; Andy whimpered as he surrendered himself. \n\nMarcus' balls were lying against the back of Andy's thighs, right where his legs met his ass. Who knew that could be a sensitive area? But Andy could feel the weight of Marcus' balls right there and it always sent tingles straight to his hole. This position made Marcus' cock feel bigger to Andy, with Marcus' thighs sandwiching his own, and his ass cheeks squeezed snug around Marcus' cock. Andy liked to call this his \"Marcus cocoon.\" \n\n\"I love you,\" Andy whispered, gazing dazed into Marcus' eyes and seeing that same love reflected back to him. \n\n\"I love you,\" Marcus responded, rubbing his nose against Andy's. \n\nThen Marcus began to move, slow and gentle, more of a tilting of his hips to grind himself against Andy's ass cheeks. Marcus' balls dragged back and forth along the backs of Andy's thighs, sending jolts of electricity through Andy's body. Andy gasped and clutched at Marcus' fingers, grounding himself in the feeling of Marcus' hard body on top of his own. \n\nMarcus began kissing and licking along Andy's neck, nibbling with his teeth then soothing the spot with his tongue. Andy whimpered at the treatment, tilting his head to give Marcus more access. Andy reveled in this slow lovemaking, losing his soul even more to the man holding him. Andy may not have done anything to deserve this kind of love, but he vowed to cherish it every moment of every day. This was a vow he knew he could keep. \n\nThe build was slow, the passion between them simmering under the boiling point for a long time. But neither man cared\u2014it wasn't about getting off anymore, this was about intertwining their souls as intricately as their bodies were intertwined, and they'd both gladly stay right where they were all day if they could. \n\nBut eventually, the passion did build. Marcus wrapped an arm around Andy's chest, fingers raking through his chest hairs until they found a nipple and pinched. Andy shuddered and arched in response, the movement driving Marcus' cock even deeper into his ass. Marcus' chest rumbled as Andy clenched hole tightly around his cock. \n\nMarcus started picking up speed, his hips slamming into Andy's and driving him in to the bed. His fingers sought out the other nipple and Andy felt his whole body spasm at the pleasure and pain. \n\nMarcus reached his other hand down to grasp Andy's hip, holding him in position as their bodies moved together. Andy gasped at the possessiveness in Marcus' grasp. Then it snaked under Andy's hip to wrap around Andy's cock, which had leak a wet spot onto the pillow. A broken sigh escaped Andy as his cock jumped at the touch. ",
        "Marcus' hand squeezed around the sensitive head of Andy's cock, sending electric shocks through Andy's body. Andy was shaking uncontrollably now, the feeling of Marcus' thick cock driving deep into his body, Marcus' weight holding him down and the teasing of Marcus' thumb against that sensitive spot just under his cock head\u2014all of it was overloading his senses, every cell in his body vibrating with a deep seated need to find completion with Marcus. \n\nAndy reached back to bury his fingers into Marcus' curls, pressing their cheeks and foreheads other. His other hand was stretched out in front of him, bracing himself against the force of Marcus' thrusts. He was so close, and if the way Marcus' arms were tightening around him was any indication, Andy could tell that Marcus was right there with him. \n\n\"Andy,\" Marcus murmured his name against Andy's lips. \n\n\"Marcus, my love.\" \n\n\"Oh god, Andy, oh my god,\" Marcus was mumbling incoherently, his body shaking as he rushed toward the edge. \n\n\"Yes, my love, yes. Oh, Marcus,\" Andy exclaimed as he felt Marcus explode inside his body, flooding his ass with searing hot cum. \n\nThe feeling of Marcus convulsing inside him and around him was too much, with Marcus' tight grip on his cock and the lava of Marcus' cum in his bowels, Andy followed the love of his life right over the edge, spewing cum all over Marcus' hand and drenching the pillow under his hips. \n\n\"I love you,\" Marcus' voice just barely audible. \"More than I thought possible to love someone.\" \n\n\"I know,\" said Andy, just as quietly. \"I love you the same way.\" \n\n***** \n\nThe intersection of the Christian faith and homosexuality is an area that I found myself exploring several years ago. I've found a way, on a personal level, to reconcile what some people consider to be two opposing world views. This story was my attempt to bring some of those realizations to life through Andy and Marcus. And just to be clear, the story is entirely fiction\u2014aside from Andy's theological revelations, there are no autobiographical elements. I hope you have enjoyed Andy and Marcus' journey as much as I have. \n\nYours, \n\nHudson Bartholomew"
    ],
    "authorname": "hudsbart",
    "tags": [
        "romance",
        "gay sex",
        "faith",
        "christian",
        "gay pride parade",
        "anal sex",
        "oral sex",
        "happily ever after"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/stepping-out-in-faith-ch-05"
}
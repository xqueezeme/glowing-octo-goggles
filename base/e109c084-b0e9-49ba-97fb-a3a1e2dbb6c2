{
    "title": "Meimei Pt. 02",
    "pages": [
        "The next morning, An Shan joined me in the basement. I had been watching a tv show when she came down with a book and sat beside me on the couch.\n\nI hit the mute button.\n\n\"Meimei, what are we doing?\"\n\nAn Shan's head snapped to mine. Alarm flashed in her eyes. Only a moment elapsed before she seemed to compose herself and ask, \"What do you mean?\"\n\n\"Come on. You know what I'm talking about. Us.\"\n\nShe waited. When I didn't further elaborate, she shook her head, staring at me wide-eyed--as if I were an idiot for not explaining myself.\n\n\"You know the...uh...the massages and stuff.\"\n\nHer breathing seemed rapid but silent. She looked at me without saying a word, and her eyes confused me. In a way, they appeared to beg and plead to me. For what, I had no idea. Yet, seeing them again, I decided she was growing terrified.\n\nAgain, her entire body--face and everything--seemed to relax into composure. She went back to her book, shrugging. \"Just what you say, Gege--massages.\"\n\n\"Maybe once, but not anymore. What are we doing?\"\n\n\"Don't,\" she snapped. She shook her head with her eyes boring holes into the book in her lap.\n\n\"I'm sorry. I--I just need to know if....\"\n\nShe cut me off, voice breaking. \"Please, Gege! Can't we just--just leave it alone?\" she begged. \"Please!\" Her face seemed overwrought with fear and shame.\n\nI turned to her, kneeling beside her. \"I don't want to upset you. I really don't, but I can't go on like this--doing things and not understanding what they mean to you or how I should feel about them,\" I told her as gently as I could. \"I like it--I love it, but I need to know if--if this is--I need to know what it all means. Is it serious or--or are we're just playing around?\"\n\nShe snapped her book shut and rose. Looking down at me with glassy, pink eyes, she cried, \"I asked you to leave it alone!\"\n\n\"I know! But, I'm sick of being confused about how to feel, being mixed up between being your brother and being--.\"\n\nAn Shan stormed around the couch, putting it between us, so I never got off my last several words. Standing at the base of the stairs, her knuckles were white over the book. She drew a halting breath. Her splotchy red face and teary eyes bore into mine. She uttered, \"It was all meaningless. It meant nothing.\"\n\nI opened my mouth to say something, but I found I couldn't speak.\n\n\"I don't care,\" she said, and she laughed in an almost maniacal way. \"Whatever. Does that help you? It was all whatever!\"\n\nShe turned and pounded up the stairs, throwing the door shut behind her.\n\nWhat the fuck? I didn't move or speak for a minute.\n\nWhen I finally could form a coherent thought, I wondered why hadn't left it alone? Why had I second-guessed my instinct to take what was given and be content?\n\nI needed to know. That was all there was to it. But could I have gone on without knowing? Five minutes earlier, it didn't feel like it, but just then, all I wanted was to have her back. Fuck knowing why, I thought, I just want her to want me.\n\nAs disappointing as it all was, I had hope in the fact that An Shan had been upset. She could not have really meant it. When she cooled down, I concluded, we might be able to talk through this.\n\nBut, An Shan quit visiting me in the basement. She didn't speak to me; she didn't even look at me.\n\nIt was over.\n\n***\n\nOn June 1st, the paycheck deposited into my bank account crossed the threshold for which I had been planning for the last year. I already had the apartment complex selected--close to my classes and my job. There was a gym on-site. And it was cheap.\n\nI made the call to the property manager, and I picked out my first apartment.\n\nThe next day, I moved in with the help of Baba. When I hauled the last box through the sliding glass door of my tiny new back porch, Baba waved me to the mini-kitchen counter.\n\nFive one-hundred-dollar bills were fanned out. He said, \"I am very proud of you, Erzi.\" (son)\n\nThis was stunning. Five hundred dollars! Baba was almost miserly in his money habits. This was generosity beyond anything I had ever seen from him. \"I can't take that money, Baba.\"\n\nHe said, \"Na qian.\" (Take it.)\n\n\"Wo bu keyi--zeren.\" (I mustn't. Duty.)\n\nBaba looked at me for a moment and then nodded, scooping up the bills. \"Hao. Hao.\" (Very well.) Despite my height and weight advantages of about eight inches and ninety pounds, the old man pulled me in for a hug.\n\nWhen he let go, he said, \"Jiating wanfan--xingqiri. Bie wang.\" (Family dinner--Sunday. Don't forget.)\n\n\"Bu wang.\" (I won't.)\n\nHe left, wiping his eyes.\n\n***\n\nEverything was on me now, and I loved it. Surprising as it may sound, even paying bills was a kind of pleasure. Though everything I owned was shitty, it was all mine. I had complete independence, and I never felt better in my life--with one exception.\n\nSince my DUI arrest over a year ago, I had been telling myself that, once I had restored myself in my parents' eyes and earned my way to complete financial freedom, it would be time to find a girlfriend. It was true, and I wanted one. Needed one, really, because the new freedom I felt was like a shot of confidence and power. It made me horny as hell, but I wanted An Shan.\n\nOur time apart did two things. First, it made me long for her. I thought about her all the time, not just the massages and touching. Showers felt lonely without her voice filling the bathroom, telling me about the new book she was reading, the new piece she had to learn, or just the dream she had the night before. An Shan had been a fixture of sorts for the previous months, and I missed her.\n\nSecond, her absence forced me to believe that her words must have been the truth: it was meaningless fun for her. It was whatever.\n\nOver the time we spent together, I had grown to want her, but she, I realized, never wanted me. She just needed a man's body for practice. Her relationship goals were a lot higher than her dumb ass, DUI-jailbird brother.\n\nI poured duty into the hole that she left in me, kicking ass in school, at work, and in the gym. The results showed. I was stronger and more fit than I had ever been. I wasn't a bear anymore; I was a tiger. Since I never called in sick and was always working hard, my boss gave me a small raise at work. Finally, I knew that by the end of the summer session in mid-August, I would have the necessary make-up college work completed so that I could enroll in a degree program at the community college or, if I wanted, apply for admission to an actual four-year university.\n\nFor An Shan, it was different.\n\nShe didn't come to Sunday dinners. Despite my asking them not to, Baba and Mama used those evenings together to share their disappointment about An Shan's recent behavior.\n\nShe wasn't practicing her piano, and she'd skipped her last two lessons. This made Baba furious because he still had to pay for them. She moved into the basement, and they rarely saw her anymore. She'd made new friends and was staying out late. She dressed differently--provocatively.\n\nMama especially disliked these last two because, in her eyes, it raised questions about promiscuity.\n\nAt a Sunday dinner in early July, my parents had become concerned enough to make a request of me.\n\n\"Ching ni gen ta tan-tan yidian,\" Baba said. (Please have a little chat with her.)\n\n\"Ta bu yau gen wo shuohua ne. Bu yau kan wo ne.\" (She doesn't want to talk to me or see me these days.)\n\n\"Wei shenma?\" Mama asked. (Why?)\n\n\"Bu zhidao.\" (I don't know.)\n\nMama eyed me closely. She was a sharp woman. I suspected she knew there was something more.\n\nBaba sighed. He said, \"Wo siang-yi-siang ta he jiu ne, ye he de shihou, he tai duo.\" (I'm thinking she's drinking now, and when she drinks, it's too much.)\n\nI nodded.\n\n\"Gen ta tan-tan. Chingwen ni.\" (Have a chat with her. Please.)\n\n\"Wo yao shi.\" (I'll try.)\n\nBut first, I would need to find her.\n\n***\n\nAn Shan would not take my calls; she didn't respond to my texts. I emailed her:\n\n\"Meimei, I'm sorry for what I did to ruin our relationship. Can we talk? I miss you.--Love JD\"\n\nBefore I sent it, I checked the \"Notify When Read\" option. Confirmation that the email had, indeed, been opened came back less than five minutes after I sent it.\n\nBut, a week later, she still hadn't responded.\n\nNow, I was upset. I sent her another one:\n\n\"An Shan, if it really was 'whatever,' then you are one fucked up human being. Prove me wrong. Talk to me. -JD\"\n\nAs before, my email was read almost instantly after being received.\n\nThis time, however, she responded:\n\n\"Fuck you, Russian Guy. Fuck you...,\" and then there were three Chinese characters written beneath these words. It read, \"Yang gui zi.\"\n\nThe \"Russian Guy\" reference stung--a reminder of my early teenage years when I had let down my family.\n\nHer use of \"yang gui zi\" was a kick to the nuts. To truly understand how much hate the phrase encompassed, one had to not only know Mandarin, but also some Chinese history. It meant \"Foreign Devil,\" and it was a crude, abusive term, steeped in racism. It meant I was an outsider--to China and to our family, itself. It meant I was beneath her. The phrase carried with it the suggestions of being unclean, ugly, and unmannered.\n\nI didn't tell Mama or Baba. I only explained how I had unsuccessfully reached out to her more than once. Baba was about to ask me to continue trying, but Mama intervened. She put her hand on his leg, and Baba glanced at her.\n\nNo words were exchanged, just looks.\n\nA moment later, Baba turned to me and thanked me for trying.\n\n***\n\nThe remainder of the summer slid away, and Mama and Baba drove An Shan to Boston for school.\n\nI continued working, lifting, and taking catch-up classes. My grades were solid, and with the two classes I was taking in the fall term--Physics and World Civ--I would have the grades and credits to start a degree program and maybe even matriculate into a full-time college.\n\nI continued having Sunday dinners at home with my parents, but as the weeks and months of An Shan's first term elapsed, they both grew more and more stressed. Their smiles weakened. Their faces paled. Their appetites waned. The silences around the table lengthened.\n\nFinally, in late October, the news poured out of Mama. An Shan's mid-term grades were disastrous. She had been skipping scheduled practices and classes. They would be flying out next weekend to see her.\n\nThe Sunday following their trip to Boston, we had another family dinner. My parents were pleased. An Shan gave them assurances and showed confidence in her ability to turn things around.\n\nAll seemed well. Then, mid-December hit.\n\nAn Shan had failed three of her classes due to absences. Her end-of-term piano recital earned her a D in Performance 1--this was a grade partially determined by her peers, which made it even more shocking. She was placed on academic probation. One more misstep and Berklee was through with her.\n\nI had never seen my parents so disappointed, and I had plenty of first-hand experience in that area. I have no idea how An Shan managed to live in that house with them during winter break. I avoided the place.\n\nOn the Sunday following a deeply uncomfortable Christmas, I had no choice but to go back to my parents' house for dinner. Baba told me that he was going to make an important announcement. I was certain it had to do with An Shan, so I thought I might be able to skip. Baba, however, was serious, and he was my father. He insisted; I came.\n\nAn Shan and I avoided eye contact. The atmosphere of that table was as tension-filled as a Mexican standoff, as awkward as a serial killer at a convent.\n\nBaba finally spoke, breaking the terrible silence. He explained that An Shan needed a steadying influence. He was staring at me.\n\nHe said he had rented a two-bedroom apartment near Berklee--an apartment complex designed for musicians and music students. It had piano practice rooms.\n\nHe glanced at An Shan, and then his eyes went back to mine.\n\nThen, he explained that I would accompany An Shan to Boston and be her chaperone for the next semester. I would live in the apartment with her. I would make sure she got to classes and stay in contact with her professors and her academic advisors. I would make sure she didn't fail again.\n\nAn Shan and I, both, instantly voiced a protest. Her voice won over. \"I don't need a chaperone, Baba!\"\n\n\"Yes. Yes, you do,\" Mama responded.\n\nAn Shan retorted with a short, plaintive burst.\n\n\"What about my apartment and my job?\" I asked, looking at my father. \"My life here? I like the freedom I've earned.\"\n\nBaba's eyes closed. His head bowed slightly. \"Wo cuo le, erzi. Ni dwei le. Wo duibuqi ni, keshi ni dei gen ni meimei dao Boston qu.\" (It's my fault, son. You're right, and I'm sorry, but you must go with your sister to Boston.)\n\nMama interjected. \"We will help you find work. Hao ma?\" (Okay?)\n\nI nodded solemnly. \"Hao. Wo yao qu.\" (Okay. I'll go.)\n\n\"Xiexie, erzi.\" (Thank you, son.)\n\nMeimei pushed her plate away and left the table.\n\nBaba began to rise and call her back, but Mama touched his arm. He settled into his chair, and Mama silently followed An Shan up the stairs.\n\nBaba and I remained. He explained how it had to be done, that An Shan's talent was too enormous to allow her to waste it away. He said the family needed me.\n\n\"Wo dong, Baba.\" (I understand, Papa.)\n\nI did. I wasn't offended. Everything Baba had told me had been said with an expression of deep regret--he knew he was hurting me to help An Shan. I didn't argue that my time and energy shouldn't be sacrificed for the benefit of my sister. She was incredibly talented. It really would be a tragic waste.\n\nThere were two things I lamented. The first was losing my freedom. I loved controlling my destiny, paying my bills, and not being beholden to anyone. The second was An Shan. We had arrived at a point where we didn't give a fuck about one another.\n\n***\n\nA week and a half later, An Shan waited in my car as it idled on the driveway in front of our home. Baba sat in the driver's seat, chatting with her. I stood on the porch beside Mama.\n\nShe pulled me in for a hug. Then, she cradled my face. \"Be gentle with An Shan. I know the love you had for her. Find it again. This is why I ask Baba to send you.\"\n\nI didn't know what to say.\n\nShe kissed each of my cheeks. Then, Mama urged me toward the car like a child might launch a toy boat down a river.\n\nBaba kissed An Shan's head and climbed out. We shook hands, and then he pulled me in for a hug. He was weeping.\n\nHe drew back. I climbed into the car, and An Shan and I left for Boston.\n\n***\n\nWe had been on the road for more than two hours. Neither of us spoke. The radio had been shut off by An Shan a few minutes ago when, finally, I broke the silence.\n\n\"The minute we have an argument and quit being--being close, you become the family fuck up. You quit practicing, you drink too much, you fuck up at school, and the rest of it. That cannot be a coincidence, Meimei.\"\n\nShe didn't respond.\n\n\"Unless there's something else that happened right around that time. Is there?\" I asked.\n\n\"No.\"\n\n\"So, do you want to talk about why things changed?\"\n\n\"No.\"\n\n\"Well, is there anything you do want to talk about?\" I asked. \"We've got two long days of driving ahead of us here.\"\n\n\"No.\"\n\nI shrugged.\n\nA minute or so elapsed.\n\nI said, \"I've got it. Let's go over our apartment rules.\"\n\nShe didn't respond.\n\n\"Who does which chores and stuff,\" I explained.\n\n\"Whatever.\"\n\nI glanced at her, and she stared out the window.\n\n***\n\nWe spent the night in a motel on the western outskirts of Cleveland, about halfway. There were two full beds in the room. When she took a shower, I laid in bed remembering when I saw her through a drunken, puke-and-piss-ridden evening at a motel back home. It seemed like years ago when, fighting the urge to relish in her naked body, she astonished me by bringing herself to climax against my hand.\n\nThat Meimei was gone.\n\nAll of the lights were out when she emerged from the steaming bathroom, but I saw, silhouetted against the glow of the television, the protruding girth of her breasts as she strode across the room and slid into her bed.\n\nWow, I thought, that body...just wow.\n\nWe arrived in Boston at mid-afternoon on the following day. Our landlord met us at the apartment, and with keys in hand, we moved into the shabbily, but comfortably furnished two-bedroom near the Back Bay Fens.\n\nI gave her the master bedroom. We shared one small bathroom. The place had a kitchen, but the previous owners must have loved frying food in oil; the ceiling and walls shined with yellow grease.\n\n***\n\nBy way of Baba's connections, I was offered a part-time job at the Symphony Orchestra as a human resources assistant. I scheduled auditions, called in substitutes, and made zillions of copies of sheet music, among other tasks.\n\nIt was alright. It enabled me to earn some cash and be An Shan's chaperone.\n\nOnce the semester began, my days were straightforward. See An Shan off to her classes, and then head to the Symphony. Baba had me assigned as An Shan's \"guardian,\" so every day, I was emailed her attendance. It also gave me online access to her grades. When I returned, I ate lunch and chilled for an hour before An Shan returned. Then, my main job was to ensure that she studied and practiced her piano.\n\nAnd she did.\n\nI walked with her to the practice rooms and sat in a lounger, listening every afternoon for three hours and in the evenings after supper for two more hours.\n\nShe didn't complain about it. If anything, I suppose her attitude about my supervision was one of annoyed resignation.\n\nIn another way, it was like she was the contrite sinner. She acted like she knew she'd fucked up and partied her ass off during the first semester, gotten caught, and now accepted my irritating presence as part of the punishment.\n\nShe worked hard.\n\nI was bored as hell. Five hours a day?\n\nAt first, I fucked around on my tablet while she played, burning up hours on YouTube like time was as expendable as old newspapers. That didn't last long. So, I started doing push-ups and sit-ups while she played.\n\nThere were lockers in the practice room for convenience. I rented one and stuffed it full of exercise equipment--heavy resistance bands and so forth. Her practice time was my workout time.\n\nThe problem was I couldn't work out for five hours. I needed something more.\n\nIt had been too late to enroll at Northeastern for regular classes, but their online classes were open. I took on some student debt and enrolled in World History B and College Algebra.\n\n***\n\nThe most challenging part of those weeks and months was living with An Shan--living with a person who so loathed me that a day without exchanging a single word was the norm. Ten words a week from her might have been the average.\n\nFor my part, I tried to engage with her in the beginning. As it became clearer that she would not respond, I clammed up. When it was my turn to cook and the meal was ready, I would say, \"Dinner.\" When it was time to go to school or practice, I asked, \"Ready?\"\n\nSince I wasn't there during the first semester, I never got to see how she was when she cut loose, but on my watch, she dressed conservatively for her classes. As to her social life, even though she got lots of calls from friends, she cut them all short. I can't say how many times I overheard the words \"I need to practice tonight\" or \"I've still got studying to do\" coming from her.\n\nShe was a hermit. Her grades were tops, right down the line. I couldn't see the point of my being there at all.\n\nI told Baba and Mama. They told me to \"Keep with it.\"\n\nThat I felt socially disconnected added to my frustration. My evenings were tied up with supervising her practices--every night. I wanted to go out. Meet some women. Maybe get laid.",
        "Living in a small two-bedroom apartment with a gorgeous Chinese woman did not help.\n\nI looked forward to catching a glimpse of her body, wrapped in a towel from her chest to her upper thighs as she made the quick transit from our bathroom to her bedroom. I loved how her breasts seemed to strain against the little corner that she tucked into the wrap, as if at any moment the weighty surge might spring that corner free and reveal everything. I liked seeing her long jet hair, wet from the hot shower, brushed back from her forehead in perfect, clean lines.\n\nIn desperate moments, I wondered if I could drill two tiny holes through the walls of my bedroom, one that looked into the bathroom, the other into her bedroom. I knew, of course, I'd never do something like that. Still, I longed for her.\n\nShe may have dressed appropriately for classes, but not in the apartment. It was all tight yoga pants and tank tops. If asked she would have said, truthfully I think, that she was just dressing for comfort. Still, seeing her body was a constant reminder.\n\nI had held those breasts and cupped that ass. My tongue had been between those thighs. Her lips had been on my cock. An Shan's sexuality was the stuff of wet dreams. Now, it was denied to me, but I had to spend every day close to her.\n\nIt was a strange, vexing thing.\n\nDuring high school, I remember flying into San Diego on my way out to Russia with my Baba. As we approached the runway, I saw a military facility beneath us, right next to the airport. I asked Baba about it. He told me it was a Marine recruit training base, and I thought how cruel it was for those recruits to be going through their living hell of boot camp while every few minutes an airplane took off, carrying its passengers somewhere else. The roar of the jet engines or the sight of a plane speeding off into the horizon would make them long for home--for anywhere but there.\n\nLiving with An Shan was like that. I saw her every day. I listened to her soft voice on the phone through the walls of her room. The feminine scent of her body suffused our little place. There were constant reminders of what had been, but could never be again.\n\nI wondered if she masturbated. She had been a horny little thing once we started fucking around, hadn't she? Those cravings wouldn't just turn off, would they?\n\nSometimes, I listened at the door of the bathroom while she showered, hoping to hear a faint sigh or moan. Some nights, I laid in bed in complete silence, straining to filter out the sounds of the city. I listened for her in her bedroom. Soft noises reached my ears and my mind conjured sexual images to go along with them. In the morning with a clearer head, I knew it had all been a fabrication of my mind--mere wish-fulfillment.\n\nI tortured myself a bit at times thinking about An Shan. I wondered, given how I knew she enjoyed her sexuality, what she had been like during that wild first semester. Had she gotten careless not only with her practicing and studies, but with sex, too? Was she still a virgin like me or had she given herself away again and again to all of those talented guys that surrounded her every day in classes?\n\nDid things like that happen? During intimate practice sessions--a piano duet maybe with some dude? The heat from their shoulders and hips intermingling on that narrow bench. Their hands crossing over one another's, grazing skin against skin. Maybe she wore a low-cut top. The boy's eyes would dart to her chest, sneaking glances at the two bulging and lustrous swaths of soft flesh and the thick, deep crevasse where her breasts squeezed together.\n\nI did my utmost to cast aside these thoughts. Jiating Zeren. I had a duty to perform, I would remind myself. Fuck everything else.\n\nIn my more thoughtful alone moments, I reflected on what we'd done together. Remembering how she, and then I, never called it what it was--sexual touching between a brother and a sister--continued to perplex me.\n\nWas it the incest thing that disturbed her? Did she call it \"massages\" and other things to avoid the truth? We weren't really blood relatives. Even so, what would people say if they knew? Was there a future in our relationship beyond siblings?\n\nI supposed not. Baba and Mama, ever the traditionalist, conservative parents, would be shocked and ashamed.\n\nDid I know in my guts that she ever really cared about me through those times? It seemed like it. It was never a sort of get-off-and-say-bye thing. There had been conversations and laughter, snuggling, and tenderness.\n\nBut I never kissed her lips, I realized. We never kissed, not once. Crazy as it seemed--to perform oral sex on one another, but never having kissed--it was true. Did it mean something? In some ways, kissing was the more intimate act, I admitted. It had less lust, more love.\n\nThose stupid euphemisms--\"massage\" or \"tasting\"--why had she wanted to use them? Would she have flipped out if instead of asking to taste her, I had asked if I could lick her pussy?\n\nI didn't think so. We were both too caught up in the momentum of lust. At worst, she might have recoiled a bit and then asked me to call it a massage or something.\n\nWere those words some way of giving herself deniability? Like if someone asked her about the time she spent with me, she needed to be able to call it something other than what it was?\n\nI could see Mama taking note of the time An Shan spent in the basement with me. \"Are you and your brother having sex down there?\" Mama might ask An Shan.\n\nMy sister, with her deniability, could tell a version of the truth and say, \"No, of course not, Mama. Gross! The only thing I ever do is massage his muscles after he works out. That's it. And, my piano teacher says I'm supposed to give massages to strengthen my fingers--you can ask him if you don't believe me.\"\n\nIt might just be convincing.\n\nBut, no. That explanation didn't quite fit the story. Why would An Shan have freaked out the moment I asked her for clarity on our relationship? Why would she hate me and cut off all communications with me?\n\nMaybe, I thought, she saw me as trying to cling to her, trying to establish a truly intimate relationship with her when all she wanted was someone safe to learn upon. I was the friend she wanted to play with, but one she would never consider dating.\n\nShe did say it was all \"whatever.\"\n\nI had been her toy, I concluded. She couldn't come right up to me and ask to play with my cock, so she sidled up gradually. She talked to me. She made friends with me. She inched closer and closer until she could touch me, and then when she knew she had me, she took what she wanted.\n\nAnd when I made it weird between us, she ended matters.\n\nI was the shitty old upright piano. Now that she knew she could play the instrument perfectly, she wanted a grand. She wanted a Steinway.\n\nIt explained a lot.\n\nIt also showed a calculating, conniving coldness that I never expected from her. But, it did explain, to some degree, how she cut loose during the summer and her first semester here.\n\nHell, she had guys figured out! Why not live it up and enjoy all of the things she had previously denied to herself?\n\nDamn.\n\nSo, what in the fuck was I doing cleaving to some hope that she might want me back? Why on my dinner nights was I sometimes preparing meals from Mama's recipes that I hoped An Shan might like?\n\nFuck her, I decided.\n\nThanks for letting me clutch them big fucking titties, Meimei. You've got a beautiful booty, too. Your pussy and ass are like caviar and vodka. Oh, and I'm sorry I came on your face that time, but hey, appreciate the blowjobs.\n\nWhatever.\n\nIf it weren't for my promise to my parents, I would have ditched her right then. See if she goes to class and practices on her own. See if she fucks up again.\n\nI was going to beat her ass and be the bigger success. I was going to fuckin' destroy my classes at school and embarrass her. I was going to make a shit ton of money and immerse myself in pussy.\n\nI felt a thing I had not felt in years: confidence. It grew to delirium as I lay on that blue sofa.\n\nBefore that moment, there were tons of reasons for me to feel self-assured, but I was not yet ready to receive it. Like filling a teaspoon with a garden hose, the confidence splashed out of me, and I could never be filled. Now, my receptacle was a ten-gallon jug. Optimism, readiness, determination--all of these things brimmed within me.\n\nI only tweaked one aspect of my newfound plan.\n\nJiating zeren dictated that I should support An Shan, not show her up or tear her down. I'm going to kick ass, I concluded, just not hers.\n\nBut I also knew that there would be no more tiptoeing around her, no more doleful lamentations about the loss of our relationship, no more hiding or pretending.\n\n***\n\n\"Good morning, you dumb slut,\" I called with a smile as she shuffled into the kitchen the next morning.\n\nShe froze on the spot. She had been scratching her own back and yawning. For three seconds, she did not move. Then, her face curled into a scowl and she snapped, \"Fuck you, asshole.\"\n\n\"That's the fighting spirit I like to see,\" I said. \"Now, sit your beautiful ass down and get ready for my favorite breakfast.\"\n\nShe blinked a few times before moving toward the two-seater table and plopping down. \"You made breakfast?\" she asked. \"Thought I smelled something.\"\n\n\"Yep. Bacon and eggs. And hash browns--.\"\n\n\"And biscuits?\"\n\n\"Like I like them.\"\n\nI felt her watching me assemble the sandwiches. Finally, she spoke, \"Why did you call me a dumb slut?\"\n\n\"To see if you could still talk. See if you had some fight left in you.\"\n\nI took out the plates, mounted a bacon, egg, hash brown, and cheese biscuit sandwich on each, and brought them to the table. \"Fend for yourself on drinks,\" I said.\n\nShe didn't. We ate in silence.\n\nThe sandwiches were so hearty and gut-filling, we both remained in our chairs afterward.\n\n\"Why do you care?\" she asked, rather suddenly.\n\n\"Huh?\"\n\n\"Why do you care if I want to fight?\"\n\nI shrugged and spoke casually, as if everything I said were simple truths. \"Because I want you to succeed. Because I guess I still like you, even though your dumb slut ass screwed up my life back home.\"\n\n\"I didn't ask for you! I didn't want you to come!\"\n\nI stared at her for a beat before rising and collecting the dishes. \"But apparently you needed me. So here I am,\" I responded.\n\n\"I was fine,\" she said.\n\n\"You think? Honestly?\" I said, placing the dishes in the sink.\n\nShe argued, \"I was getting better.\" After a moment, she swallowed and less forcefully added, \"Doing better. And don't call me a dumb slut.\"\n\nI smiled. \"I'm saying it with love, Meimei. Of all the dumb sluts in the world, you're my favorite.\"\n\n\"Fuck you.\"\n\nI walked past her and stopped. \"Almost,\" I said. \"You almost did. You did everything but fuck me.\" I grinned at her.\n\nShe stormed past me into her bedroom. I went into mine, wondering why her fighting spirit vanished when she could easily have thrown all my words right back into my face.\n\nTwenty minutes later, she shoved me away as she emerged from her door to walk to classes. I let her go by herself for once.\n\nShe didn't return to the apartment after school. I could not find her in the practice room. I called and texted--nothing.\n\nOnline, I checked, and she had attended all of her classes.\n\nShortly after nine that night--a Friday--I was on the couch wrapped in a towel, fresh out of the shower after a workout. I heard her key in the lock, and she trudged in.\n\nI rose. \"Meimei?\"\n\nKicking the door closed behind her, she leaned again the wall, dropped her school shit on the floor, and muttered, \"Fuck-you-I'm-home.\"\n\n\"What the fuck? I'm supposed to make sure you're safe, and you don't text or call me? The fuck is that?\"\n\nShe popped one heel out of a shoe with the other foot and kicked the loosened sneaker across the room toward me. It bounced off the wall behind me and fell to the floor.\n\nI turned to her, not saying a thing.\n\nShe stared back at me with what appeared to be a mixture of hatred and fear.\n\n\"Are you drunk or something?\" I asked.\n\nWithout a word, she strode past me in that one shoe and slammed her bedroom door shut.\n\nFuck her, I thought to myself.\n\nI laid down and continued watching the television, but I wasn't paying any attention. I started doubting my actions from the morning--calling her a dumb slut, prodding her about our relationship last spring.\n\nEvery time, I realized, I bring up what we did together, she fucking flips out. Did I break her mind or something? Is she going to slip right back into the shit-bird she was first semester? After all of this progress?\n\nNo. That would not be good.\n\nAbout ten minutes after her sudden return home, I climbed off the couch and went to her door.\n\nI knocked quietly.\n\nNo response.\n\nI knocked again. \"Hey, Meimei? Can we talk?\"\n\nNothing.\n\nA third time, I knocked.\n\nWhen nothing came of it, I said, \"I'm sorry, okay? I'm sorry for what I said.\"\n\nNot a word from her.\n\nI added, \"Look, I just wanted to get past all of this silence between us. I was--am--I am sick and tired of this crazy shit that's been hanging over our heads for the past eight months. I wanted to cut through the crap, confront it, and put it behind us is all.\"\n\nNothing.\n\n\"I want to move on with my life.\"\n\nStill--silence.\n\n\"Meimei?\"\n\nThirty seconds or so elapsed as I wondered what in the fuck I could say. Then, I heard her. I heard the unmistakable sound of sobbing.\n\n\"Fuck it,\" I snapped, and I burst into the room. She was in bed, laying on the cover with her extra blanket pulled over her. Her one remaining shoe, socks, and pants were strewn about the room.\n\n\"Go away!\" she yelled, eyes red and face shining with streaks of tears.\n\n\"No!\" I hollered. The word shot from me like a crack of thunder.\n\nAn Shan flinched back in shock. She drew the blanket to her chin.\n\n\"We're going to figure this out,\" I stated more calmly.\n\nAn Shan cried out in a whimper of anguish. She rolled away, curling into a fetal position under the blanket.\n\nI climbed onto the bed.\n\nShe shrieked, \"No! Go away!\"\n\n\"No.\"\n\nI got behind her and threw my arm over her body.\n\n\"Get away! Get away!\" she cried, flinging her elbow back into my stomach and twisting her body away from my grip.\n\nI rode out her fury, holding her close.\n\nShe kicked. She cursed. She fought.\n\nFinally, she relented in sullen silence.\n\nTogether like spoons on her bed, I listened to her breathing grow less forceful. Her sniffling diminished. Neither of us spoke.\n\nI rubbed her arm.\n\nShe pulled away, but I shushed her and continued to rub her shoulder, gently petting and trying to soothe her.\n\nAt length she reluctantly allowed it, adjusting herself by pulling her arm free and tucking the blanket under her armpit.\n\nSliding my hand down her skin, I curled my fingers into her palm to hold her hand.\n\n\"Don't,\" she uttered, voice cracking. \"My fingers are sore.\"\n\n\"You practiced?\"\n\nHer head nodded once. \"At school.\"\n\nInstead of holding her hand, I dragged my fingers lightly along hers.\n\nShe didn't protest.\n\nI did it again.\n\nAn Shan sighed.\n\nRolling onto my back, I gently brought her hand to me.\n\n\"Don't,\" she protested, but with diminishing conviction.\n\n\"Would you fucking relax?\" I responded somewhat forcefully.\n\nShe relented.\n\nI wasn't exactly sure what I was doing, but I began a light massage of her hand and fingers. First, I rubbed her palm and the pads of each digit with my thumb. She didn't fight me.\n\nThen, I clasped each of her long, slender digits at the base with all five of my fingertips. Slowly and with very little pressure, I kneaded and dragged my fingertips from the base to the tip several times before taking on a different finger.\n\nThe longer I went on this way, the more I noticed how much An Shan liked it. She didn't turn to face me, and she never said a word, but her breathing relaxed completely. Her body seemed to sink deeper into the mattress, as if the tension leaked from her like a punctured inflatable.\n\nNearly ten minutes must have passed when, to my surprise, An Shan rolled towards me, offering her other hand.\n\nI took it and continued the massage.\n\nShe must have forgotten that I had on nothing but my towel cinched around my waist. She looked over my body without a word while I took her hand.\n\nShe took off her bra, I realized, before climbing into bed. The blanket was tucked under her armpits, but there were no straps over her shoulders.\n\nMy meimei had long, thin callouses on some of her fingers, mostly on the insides or outsides toward the tips. I stroked them softly.\n\nHer eyes watched my fingers, but I felt them glance at my face every so often. Once, our eyes met, and the fear and anger seemed to have vanished.\n\nI reached up and caressed her face.\n\nShe allowed it, closing her eyes.\n\nI set her hands down and rolled toward her. Scooting up the bed, I wrapped An Shan in my arms and held her.\n\nShe sighed, snuggling into my bare chest with her arms wrapped tightly around her belly. Her hair felt like lush silk on my chest; the smooth skin of her cheek was warm cream.\n\n***\n\nI woke next to her without a clue as to the time, but it was very dark outside. Neither of us had bothered to turn off the lamp beside her bed before falling asleep. At some point, one of us had wrapped us both under her blanket. My towel, I noticed, had fallen free.\n\nAn Shan's breasts, uncovered and undulating with her every breath, rested upon my lower belly.\n\nInstantly, I began to grow erect.\n\nBefore I could finish contemplating my options, the head of my cock had completed its upward surge and nestled into the tender flesh underneath one of her breasts. The feeling of this intimate touch combined with the mere possibility of sex stirred me. It had been so long for me. My cock flexed, and the brief friction there sent a pulse of pleasure whirling through me.\n\nIt was beyond anything I could have imagined, being naked in bed with An Shan again. I knew, of course, it was accidental. I knew there was not the remotest possibility of us somehow enjoying each other's bodies there, together. She despised me.\n\nTrue, I had soothed her deeply hurt feelings enough to hold her in my arms, but the gulf between a hug and sex was a yawning expanse that made the moon seem an arm's length away by comparison.\n\nConsidering the foolishness of my hopes, a low snort escaped me.\n\nAn Shan hummed softly as if in response. Then, her body adjusted--a snuggling movement of her shoulders--and the knob of my erection slipped into the gap between her breasts.\n\nA breath caught in my throat.\n\nAn Shan drew a long draught of air and sighed in her sleep. Her breasts, of course, moved along with her. With the tip of my erection there, it was a tiny, heavenly bit of sexual friction. Powerless to stop it, the faintest aching groan escaped me.\n\nI had become accustomed to the feeling of testicles so overfull that they seemed like leaden pendulums. Thrumming, unused erections were as common to me anymore as eating and breathing.\n\nThe muscles of my core trembled not in fear, but in readiness--eagerness--to thrust. I was a massive engine, finally started and now idling, waiting for a touch on the gas that would send me hurtling recklessly forward.\n\nI wanted to feel more. I wanted to push my cock further between those thick tits of hers, just a little. Maybe it wouldn't wake her.\n\nI pinched my eyes shut at the absurdity of the idea. Not wake up? Of course she would, and she would be shocked and furious--violated.\n\nThe right thing to do now, I told myself, was to ease back from her--to use those quaking muscles in my core to withdraw.\n\nBut hell and damnation that was asking a lot. It was like stumbling upon a well after days in the hot desert only to wash one's face. It was willfully walking away from that lifesaving water without ever taking a heavenly gulp.",
        "I remembered, then, those incredible days and weeks when An Shan had grown increasingly intimate with me, exploring and touching, but still not pleasuring. Never knowing how she had felt about it and not wanting it to end, I decided not to push things forward. I had decided to take what she gave me and not seek more.\n\nI wanted a little bit more now.\n\nWith painstaking care not to awaken An Shan, I repositioned my feet in the bed, and I pushed my elbow into the mattress to prepare myself to move up.\n\nReady, I urged my body up toward the headboard while keeping my penis as still as possible. I settled into my new position. Everything but my hips relaxed. All I need do is thrust, I knew.\n\nHeart racing and nerves on red alert, I gently drove my cock deeper in between those hefty tits, savoring every fraction gained. I drew a massive, involuntary breath at the sensation. Stifling the groans and curses I needed to express, as quietly as I could manage, I exhaled.\n\nGlancing down, An Shan's head remained tilted back, eyes closed but directed toward my face. Underneath, the blanket loosely, but effectively covered her chest.\n\nI needed to see. I slipped a finger underneath and cautiously drew it away.\n\nI gasped at the sight of her breasts. Only the upper arches of her areolae were visible, but the two heavy globes slumped against one another creating a long, lovely crease. Those tits seemed both languidly relaxed and vibrantly alive at the same time. My cock was buried, nestled snugly, somewhere inside.\n\nI thought, \"More,\" but I may have whispered the word aloud. I needed to see my cock there. It was not enough to feel it.\n\nGathering up my limbs once more, yet using all of my core to keep my erection in place, I urged my body further up the bed. My crown pressed against the headboard.\n\nAn Shan licked her lips and swallowed, venting a sweet gasp.\n\nI waited.\n\nShe cuddled into the blanket.\n\nI waited.\n\nShe grew still and resumed her natural breathing.\n\nDriving gently from the hips, I thrust my penis further through her breasts. It slid smoothly, snugly through. I watched the nexus of her cleavage part and give way as the shining head of my cock emerged. A thrill swept through me.\n\nFuck, I need this.\n\nFuck, I want this. More of it.\n\nI looked at her face, and I wanted to kiss her. Not even that, just caress her. If I could just run my hand along the back of her head, let her silky raven hair flow across my fingertips. But I knew I could go no further. I knew I had to back down and wait. Until my erection subsided and slipped out, I had to stop.\n\nTilting my head back, my mind screamed in frustration. I flexed my cock as hard as I could. I felt the muscle plume the tip. Keeping it contracted, holding it in a kind of dry ejaculation, my heart raged at what it could not have. Then, I relented, let out my breath, and glanced down.\n\nI nearly flinched.\n\nI was looking at the back of An Shan's head.\n\nMy beautiful meimei was looking down at her chest, no doubt watching the head of my cock throb and mushroom between her breasts.\n\nI closed my eyes, sighing in quiet resignation.\n\nHer crown moved, and she began to look up at me.\n\nWhat does a person say? What....\n\nHer eyes met mine. Her mouth was open and breathing gently. There was no discernible expression. No shock. No fury. No delight. No thrill. Nothing.\n\nShe looked at me as if...what was it? As if she were waiting for me. Patiently waiting.\n\nAn Shan glanced down at my penis. She looked up at me again.\n\nMy gosh, she was beautiful. That black hair. Those far-eastern obsidian eyes. Those cheeks, so tight and youthful and...and almost inflated, as if they were full of fresh air.\n\nI didn't wait to consider my options. I slid my hand through her luscious hair and cradled the back of her neck. I drew my hips back and thrust.\n\nAnd thrust.\n\nAnd thrust.\n\nShe watched me without a word or an utterance.\n\nI watched her the same way, but my gosh it felt good. I felt sizzling and alive and recklessly powerful.\n\nI gasped, and An Shan's face bent toward the action below. Her interest in seeing my cock drive through her tits sent me over.\n\n\"Fuck, Meimei,\" I growled, feeling the rapid-fire surges overtake and drown me.\n\nI was cumming hard. I thrust one last time and held there, squashing my cock upwards. I felt her head craning down toward my penis.\n\nAn Shan made the most beautiful sound I'd ever heard--part joy, part surprise. I groaned when I heard it. My cock convulsed in rapid bursts. I didn't ever want them to end.\n\nThis, I thought, is how I want to feel forever. But, it diminished and died. With a low growl, I released her.\n\nAn Shan's face rose toward mine. Her mouth remained open. Her eyes looked at me as if in amazement, and her face was covered in semen. Here was this gorgeous face absolutely annihilated with slashes, globs, and curling ropes of sperm.\n\nSuddenly, I was no longer drained; I was energized. I shot up in bed, tossed her legs apart, and dove between.\n\nI wanted to hear her cum. I drew her apart with my fingers and played on her clit with my tongue. Sneaking my free hand between her thighs, I drove two fingers into her.\n\nShe lasted less than five minutes.\n\nI felt her peak approaching when she raised her head from the bed and began watching me.\n\nThe thrill of it was that my cum was still all over her face. She hadn't done a thing about it. There were runs and drips where there had been pools and slashes. What had been milky white was now clear and shiny.\n\nNewly inspired and energized, I went off on that pussy.\n\nAn Shan cried out my name. She told me not to stop. She hollered as if it were the only way to fight against the raw force of the orgasm that smashed down upon her like a tidal wave.\n\nWhen her cries diminished, I let her collapse, and I flopped onto my back beside her. She wheezed away as if she'd just finished a five-hour concert.\n\nI sucked air, thinking. Then, I knew. The idea sprang into my mind unbidden and without any prompting: Leave. Go now.\n\nI did. I sat up, wrapped the towel around myself, and left An Shan there, panting and moaning.\n\nI showered and went to my bed, thinking about my beautiful meimei.\n\nHad she wanted me to cum on her face? In the end, she kind of bent down towards my cock. Did An Shan want to feel dirty and slutty, like some pornstar?\n\nI had no idea.\n\nWhat about me? What had I wanted?\n\nI had gone into her room to apologize. I stayed to calm her and show her that I cared. Later, when I felt her breasts on my skin, I needed her desperately. Plus, though I normally could not have cared less about ejaculating on a girl's face, for some reason I was glad it happened with An Shan.\n\nI suppose it was because she would never talk to me about what we'd done together. All these months, she seemed to be trying to bury the truth. Maybe, I thought, I wanted there to be unmistakable evidence--her face splattered with cum--testifying that we had been sexually intimate. Maybe I wanted to confront her--to put it all \"in her face,\" so to speak.\n\nWhy had I left so suddenly? I acted quickly, leaving just seconds after her orgasm. It felt instinctual. I didn't want to cling to her. Maybe, I wanted her to feel what it was like to be with someone who considered the sex to be \"whatever.\"\n\nBut I wanted more \"whatever.\"\n\n***\n\nI didn't speak to An Shan the next day. I studied, worked out, and read while she practiced. When she called me to dinner, I kissed her on the cheek and left with my plate to eat in my room.\n\nPeripherally I saw her standing in astonishment and rubbing where I had kissed her.\n\nWhen night fell, I waited. On the weekends, she typically showered at night before bed.\n\nSometime before ten o'clock, I heard the water running, and I rose from the couch and walked right in.\n\n\"Gege?\" she asked from behind the curtain.\n\nI didn't respond.\n\nI heard the curtain slide. Her face emerged. \"Um, what are you doing?\"\n\nWithout speaking, I went to the edge of the tub and drew the curtain wider.\n\nShe covered her breasts with one hand, her pussy with the other. \"Hey!\" she complained.\n\nI pulled the loose end of my belt from its buckle. It dangled in front of me like a half-hard cock.\n\nAn Shan glanced at it. She said, \"Gege, what...?\" She stopped when our eyes met.\n\nI pulled off my tee-shirt and the rest of my clothes, and I stepped over the tub wall and immersed myself in the hot stream of water behind her.\n\nShe faced me, still hiding her body. \"Why won't you talk to me?\"\n\nI stepped toward her. Sweeping the back of her neck into my hand, I drew her against my body and kissed her for the first time. She let my tongue slide between her lips and explore.\n\nI spun us so that the hot water could blanket her skin.\n\nSliding a hand down her back, I clutched her ass fiercely.\n\nAn Shan gasped.\n\nThat fucker felt so good in my hand, I growled. Letting go of her neck, I gripped the other half with equal fervor.\n\nI squeezed her ass together. The need to keep my lips on hers and the urge to say something about what my hands felt competed. \"Fuck me this fucking ass,\" I uttered between kisses growing ever more vigorous.\n\nAn Shan voiced a high moan.\n\nI had to see it. I had to make it mine. I broke the kiss, spun her around toward the back wall, and dropped to my knees behind her.\n\nShe stood straight until I said, \"Over,\" and pushed on her back. An Shan's torso leaned forward. She put her palms flat and high against the tub wall.\n\nI gazed at her ass.\n\nEverything about it was quintessentially feminine--the slight outward roll of her hips, the uniform smoothness of the skin, the almost divine symmetry of the swooping curves, and finally that strange and alluring bashfulness a woman's exposed ass seemed to possess.\n\nI sucked on the flesh of one side, kneading the other side with my fingers. Releasing her from my lips with a low pop, I inhaled her scent. It stirred me. Suddenly, I was torn between the desire to explore her ass more with my hands and my mouth and the need to make An Shan scream in pleasure.\n\nAs more and more of her scent wafted into my nose and dizzied my brain, the debate ended.\n\nI drew her apart and latched onto her pussy with my lips, rolling my tongue in wide loops inside and out.\n\nAn Shan sucked in her breath with a surprised squeak.\n\nMy lips munched her labia. My tongue wiggled inside. It delved into her, scooping and gathering fluids. I tasted the sharp iron of her essence and a mellow, unsweetened chocolate-like savor that lingered afterward. My tongue circled her clit, and I pinched it between my lips.\n\nShe hummed in response.\n\nI kept after it, surprising her here and there with light, hummingbird-wing flicks of my tongue on her little nub and by wrapping the whole of her vulva in my mouth and sucking the tender flesh with great force.\n\nHer climax echoed in the bathroom.\n\nExhausted, her hands slid down the tub wall, and her knees began to give way. I stopped her from collapsing and spread her feet apart. Her hands found purchase on the lip of the tub.\n\nI rose behind her bent-over form.\n\nGrabbing my cock, I snaked it between her ass cheeks.\n\nAn Shan gasped. The sound conveyed both how utterly spent the orgasm had made her and how unexpected it felt to have a cock, like the leg of a piano bench, wedged in her ass.\n\nI wiggled the shaft until the fat head nestled against her anus. Still gripping my cock, I began circling and dabbing the tip on and around the taut opening like a painter might coat a spot of canvas richly and heavily with color.\n\nAn Shan, still panting to recover from her climax, again gasped at what she felt behind her.\n\nI squeezed her ass together, pinching my cock between the two halves. With small thrusts, I began to fuck the soft breach, recoiling only after the head of my cock had nudged against her wrinkled spot.\n\nI felt my face grimacing not at the effort, but at the difference between what I felt and what I wanted. Glancing behind me, I saw the pump bottle of her conditioner. I cupped underneath the dispenser and squirted the yellowish-peach goop with my thumb.\n\nAn Shan must have noticed the movement. With her hands still firmly on the edge of the tub, she craned her face around to see what I was doing.\n\nI stopped when our eyes met.\n\nShe glanced down, seeing the dollop of conditioner in my cupped hand. She blinked and her eyes bent to mine.\n\nI felt my chest rise and fall as we stared at one another. I needed this. I needed her ass. I didn't utter a sound, but I bored my eyes into hers, thinking, Don't you fucking dare stop me.\n\nAn Shan's lips pursed and she swallowed. She blinked twice and watched me approach her. As I closed with her ass, she pushed off the lip of the tub and rose, apparently to get a better vantage. She saw me swipe a fingertip full with one hand and coat my erection with the rest.\n\nShe flinched when she felt my fingertip massage the small dollop on her anus. Finished, she looked at me. I was on fire with lust. My face had to have looked utterly implacable.\n\nI knew I could not fuck my sister's pussy. She would never allow it, and I doubted my ability to even try, not with 20 years of \"family duty\" ringing through our minds like an unanswered telephone. To perform the ultimate act of intimate love--the act of creation, really--on my sister would be to shatter the teachings of our parents.\n\nBut, I could do this, and I wanted this. I wanted our bodies joined together, even if it had to be this way.\n\nAnd I wanted An Shan's ass. I wanted that secret, indecent part of her with all of the plump beauty that encompassed it. This would make it mine, even if only for a few minutes.\n\nAnd I wanted her to feel my frustration. I didn't want to hurt her, but I wanted her to understand the tonnage and the megawatts of the desire I had been damming up for eight long months.\n\nMy middle finger easily slipped inside of her asshole. No more waiting, I thought.\n\nI gripped the shaft and eased it between the fleshy globes. The tip snuggled against her anus, and I urged it onward. The tight skin dilated, permitting a slow passage.\n\nI groaned when her ass cinched over the head.\n\nAn Shan cried out, reaching back. She put her hand flat on my chest. I could see one of her incredible tits, rocking steadily as she panted.\n\nI took her hand from my chest, and I wove my fingers through hers. Taking her other arm, I slid my free hand down it and our fingers interlocked. It made her face forward, but I knew she liked the intimacy. She squeezed my hands.\n\nI pulled on her arms, and my cock passed deeper inside of her.\n\nThe connection of our bodies was slick and smooth from the conditioner. I could have hilted my cock to the root with no difficulty. What stopped me was An Shan's obvious need to cope with the unyielding thickness of my erection.\n\nHer entire torso undulated from respiration so vigorous it seemed as if she had just finished playing a Rachmaninoff symphony.\n\nMy mind was inundated with sensations--the sexual pleasure of this jointure with her body, the high of the physical exertion, the illicit emotional thrill of fucking her ass, and the bliss of transmitting to An Shan the rapacious longings I had tried so hard to ignore.\n\n\"Give me this fucking ass,\" I muttered through clenched teeth.\n\nHer face turned sideways. She closed her eyes and nodded.\n\nI drove deeper.\n\nHer jaw fell open. Her eyes snapped shut and she tried, unsuccessfully, to stifle a scream. It echoed in our little shower stall.\n\nI stopped.\n\nLike a violin makes a sound whether the bow moves forward or back over the strings, Meimei was wheezing on both the inhale and the exhale of every breath. I waited, letting her get accustomed to me.\n\n\"Meimei,\" I growled after a minute. \"Let me finish.\"\n\nShe gasped, \"Chingwen, Gege, deng-deng. Tai duo.\" (Please, wait a moment. Too much.)\n\nMy cock throbbed; An Shan felt it, moaning exhaustedly. \"Give me this fucking ass,\" I muttered. \"I need to fucking cum in it.\"\n\nAn Shan wheezed.\n\n\"Tell me I can.\"\n\nShe squeezed my hands, huffing, \"Qing-qing de! Chingwen ni!\" (Gently! I beg you!)\n\nHer words thrilled me. My entire body felt an almost electric surge. The little hairs all over my body grew instantly erect. Goosebumps broke out everywhere.\n\nI drew back to the tip and began slowly fucking Meimei's ass. She squeezed my hands, but not to stop, I knew. I squeezed hers back.\n\nShe spurred me on in Chinese with words and her cries. She rocked against me. Crying out, she urged me to cum.\n\nI was nearly there. My head swam in dizzying pleasure. I grunted. I squeezed her hands. The muscles of my stomach flexed as one, curling my back. My toes spread wide on the floor like fat little fingers seeking something to grasp.\n\nAn Shan begged me one final time.\n\nAnd it was happening. I was paralyzed. With the head of my cock in her anus, squeezing jets of semen in her ass, I could not move.\n\nI grunted at the razor-sharp acuteness of my climax. The pleasure was searing white heat. Meimei felt the injections flood her. She yelped along with each contraction of my cock. I swore darkly at the release.\n\nAnd finally, the feeling subsided and the flexing ended.\n\nOur fingers released one another. She leaned against the wall. I laid my forehead on her back.\n\nWe remained that way for a long time, catching our breaths.\n\nThen I noticed my cock.\n\nAlways unpredictable, sometimes after an orgasm my cock fairly quickly turned to putty. Other times, it remained hard long after. Most times, it was somewhere in between.\n\nThis time it was rock hard, still immersed in her.\n\nAnd I didn't want it to come out.\n\nI reached back and shut off the faucet. I pulled An Shan's body to a standing position. I lifted one of her legs, and then, careful to keep my cock inside of her, I hauled her other leg up and dipped my hips to take her entire weight.\n\nAn Shan gasped, though she was otherwise limp.\n\nI carried her out of the shower, shuffling sideways through the door. I walked us into her bedroom.\n\nTurning around, I sat on the bed with my Meimei in my lap. I scooted us backward. Then, I rolled her onto her side.\n\nClutching a breast, I gently continued fucking her ass, knowing it would not last much longer; I always needed some recovery time between events.\n\nShe hummed a kind of exhausted note.\n\nI liked the sound. I slid my hand between her legs and began to play with her pussy, dipping fingers inside and spiraling my fingertip around her clit.\n\nI wasn't horny anymore. In fact, I began to feel my erection fade.\n\nAn Shan liked what I was doing. Her breathing grew rhythmic and deeper. She began to moan.\n\nMy gosh, it was beautiful. There was such longing in her voice. It was music. My cock was like a relaxed thumb. Some strength remained, but it was pliable. Easily expelled.\n\nThe music of An Shan's pleasure changed matters. I felt my heart re-energize, pumping blood through me. Moments later, my penis awakened. It surged back to life inside of her.\n\nI rolled onto my back, hauling An Shan with me. I kept one hand on her pussy, rubbing her pussy in tiny, firm circles. My other hand wrapped around her left breast, squeezing and kneading.\n\nI spread my knees apart. Meimei lay on top of me between them.\n\nAs my cock grew to completion inside of her, I wrapped my legs over hers, hooking my heels over her shins and locking us together.\n\nAn Shan felt my once flagging cock become ramrod erect again. She spoke in shocked gasps, torn between the pleasure of my fingers and the pain of the newly reborn cock dilating her asshole.\n\nI felt her core muscles tighten as if to reposition herself, but her legs were locked underneath mine, and her body was in my hands. A moment later, she surrendered herself to me.\n\nI began to thrust.\n\nMy fingers went wild on her clit, rubbing furiously. My hand squeezed her thick breast as if milking it; I wrapped my hand around the base and expressed upward, finishing with a pinch of her nipple. My cock was completely embedded in her ass. The thrusts weren't full strokes, taking me from the tip to the base; they were deep grinds, never reaching higher than an inch from the root of my penis.",
        "An Shan began wailing a new climax. It was all pleasure and all pain simultaneously. I'd never heard her so loud. My fingers felt absolutely sopping with her fluids.\n\nHer orgasm marshaled me to my own. I drove myself inside of her one last time and held there. Her anus strangled the base of my penis. I had never felt so joined, so completely inside.\n\nAn Shan felt my grip on her tit become vice-like. She felt my fingers freeze, clamped on her vulva. And I knew she felt my cock inject her ass with another helping of semen because she told me so in Mandarin.\n\nWhen the power of my orgasm subsided, I released her.\n\nI rolled us onto her tummy. Straddling her ass as she lay prone underneath me, I slowly drew my cock free.\n\nAn Shan's anus winked once and then cinched closed, securing inside of her two complete doses of my cum.\n\nI collapsed beside her, drew us together, and kissed her neck.\n\nShe murmured, \"Wo ai ni, Jian Dao.\" (I love you)\n\nI let her sleep. Even though my body felt ready for sleep, relaxed and tired from the sex, my mind remained too active.\n\nHow suddenly things had changed--from eight months of cold hatred to twenty-four hours of raw lust. From \"Fuck you, yang gui zi\" to \"I love you, Jian Dao.\"\n\nI didn't understand how such a transformation was possible. What changed twenty-four hours ago?\n\nThe previous morning, I made my favorite breakfast and called her a dumb slut--in a kidding way. For the first time, I had openly spoken about our previous sexual relationship, reminding her we'd almost fucked. We argued, and I told her I needed to move on. She cried; I soothed her. We slept beside one another, and I fucked her tits.\n\nWhat was it, I wondered, in that set of events that would bring about such a change? Could it be that she missed physical intimacy so much that my touches and the closeness of our bodies in her bed triggered the alteration?\n\nMaybe.\n\nOn that basis, maybe her \"I love you\" was just pillow talk.\n\nIf it was, I wasn't sure that I cared. I felt good about myself. I knew that the moment I wanted to find a girlfriend, I could make it happen. I didn't need An Shan; I wanted her. There was a difference.\n\nI cared deeply about her, but I knew she might still be a bit irrational about our relationship. I was mentally prepared for more of her \"whatever\" bullshit, and in that way I was free.\n\nFeeling liberated, I asked myself what it meant if her \"I love you\" was real, if she meant every word of it.\n\nI slid from her bed and returned to my room to sleep.\n\n***\n\nIn the morning, we ate quickly, and I walked An Shan to school.\n\nNone of the typical sharp January breezes assaulted us on our jaunt down Boylston Street towards Berklee; it was dead peaceful, sunny, and cold. Even the streets seemed tranquil. I don't recall hearing cars, but only the occasional crunch of snowy ice underfoot.\n\n\"I'm sorry,\" An Shan said without turning toward me.\n\n\"We're fine. We'll be a couple of minutes late is all.\"\n\nHer hand touched my arm. We stopped.\n\n\"No,\" she said, \"I'm sorry that I caused you to have to come here. I'm sorry I have been so awful to you since last summer. I'm sorry I called you a foreign devil--shit, there's just so much to apologize to you for--I'm sorry I told you to fuck off. I'm sorry I freaked out about us.\"\n\nIt took me a few moments to take it all in. Finally, I nodded. \"What about 'us'?\" I asked.\n\nShe watched me. She looked around, and she turned back to me, saying, \"There's a lot to talk about, isn't there?\"\n\nI nodded.\n\nAn Shan said, \"I can have a sick day if you can.\"\n\nI considered it for a moment, and then I smiled.\n\nShe did, too.\n\nBoth of us broke out our cell phones and made the necessary calls.\n\nWhen we finished, I held out my hand, and she took it. \"So what about 'us'?\" I asked as we strolled back to the apartment.\n\n\"I like 'us' a lot,\" she said.\n\n\"Me too.\"\n\nAn Shan grinned at me. When she turned back, she watched her feet for a few strides before asking, \"Do you think there could be a--a bigger 'us,' one that is more than just the things we do together in bed?\"\n\nI nodded. \"I think so, but I've struggled with the idea.\"\n\n\"Have you?\"\n\n\"Yeah.\"\n\n\"Tell me?\"\n\nI said, \"It began when you made me watch your rehearsal for Berklee.\"\n\n\"Really?\"\n\nI nodded. \"It was the first time I saw you as something other than my smart sister. You were just so incredibly beautiful and sexy; I was torn apart.\"\n\n\"How?\"\n\n\"I wanted to touch you, but I also wanted to be a dutiful brother and son--jiating zeren, you know?\"\n\nShe sighed and repeated, \"Jiating zeren.\"\n\n\"Being adopted but with parents having a biological daughter, I always felt a bit like an outsider in the family--nothing against Baba and Mama you understand. They've always been great parents, and I love them. It was just me and knowing I was adopted that made me feel that way.\"\n\n\"I understand,\" An Shan offered.\n\n\"Not being Chinese like you guys just added to that feeling, and I guess I saw myself as--. Do you remember that old Chinese story Mama read to us when we were little? About the otter who helps the beaver family?\"\n\n\"Yes.\"\n\n\"Right, so I saw myself in our family like the otter did in the beaver family. I was honorary, not official. I was a volunteer sort of.\"\n\n\"I hope we never made you feel unofficial, Jian Dao.\"\n\nWe caught one another's eyes.\n\nShe added, \"Except, you know, the terrible things I said and did.\"\n\n\"No. Apart from the foreign devil thing you guys were always great,\" I assured her. \"Anyways, it was that outsider feeling that enabled me to see you all differently--to see Mama and Baba as teachers and mentors as much as parents, and to see you as a friend as much as a sister.\"\n\nShe nodded, staring at the sidewalk.\n\n\"When I saw how beautiful and sexy you were that day, it split me apart. Half of me hated those thoughts, knowing you were my sister. The other half loved them because you were my friend.\"\n\nAn Shan squeezed my hand.\n\nWe stopped, and she turned toward me, saying, \"I know exactly what you mean.\"\n\nI pulled her to me, and in the cold sunshine of Back Bay that morning, I kissed her. When I drew back, she smiled, and we walked on.\n\nI said, \"Will you tell me how you know exactly what I mean?\"\n\nShe seemed to think about this for a few moments before beginning. \"You know how people react when someone tells them their brother or sister is hot? How, like, they always say, 'Ew, gross,' or 'Shut up,' or something like that?\"\n\n\"Yeah.\"\n\n\"I never felt that way about you. When one of my friends said something to me about you, I never said anything back. They'd say something like, 'I know you don't want to hear this, An Shan, but JD is so gorgeous,' and I wouldn't say anything. I couldn't. All I would be thinking is that they were right, and I didn't know how to feel about those thoughts.\"\n\n\"Guilt?\"\n\n\"Yes, but excitement, too. Like you said, I was torn. So when things began to happen between us, that guilt made me never ever want to call it for what it was. It had to be something else--massages and tastes. I needed to be able to stand on both sides. I wanted you, and I wanted jiating zeren, and the only way I felt I could have both was to deny what we were really doing.\"\n\nI nodded. \"So, that day when I asked you about us...?\"\n\n\"I couldn't handle it because you called it what it was. I couldn't stand on both sides, so I freaked out.\"\n\nI said, \"I didn't mean to cause you pain like that.\"\n\n\"You didn't. I did. It was my fault. I never once considered how you felt the whole time we were doing things together. So when you asked, I was only thinking of myself and my guilt, and I had to shove you away. I couldn't even look at you because it reminded me of the truth. I hated you for being this kind of walking, talking reminder of the truth.\"\n\nHow wrong I had been about her motivations. \"It's okay, An Shan. I think I understand now.\"\n\nShe wiped her eyes with her mittens. \"I'm so sorry,\" she cried. \"I was just so terrified of how I felt about you.\"\n\n\"It's okay.\"\n\n\"But nothing,\" she repeated, \"nothing excuses me for how I treated you. Mama and Baba, too. I was terrible. I was lost. I couldn't focus on music; all I could think about was my fear. I tried to become someone else. I drank. I skipped classes. I never practiced.\"\n\n\"Did you see anyone?\" I asked.\n\nShe shook her head. \"I never even kissed another guy.\"\n\n\"It worked out though, didn't it? It brought us together here.\"\n\n\"Did it work out, though? I think about the freedom you lost, JD, having to come here with me.\"\n\nI smiled. \"It worked out.\"\n\n\"But the other day you said you wanted to move forward with your life.\"\n\nI drew a deep, purifying breath of the frigid air. Releasing it, I said, \"I suppose I was convinced you hated my guts and that there was nothing I could do to change your mind.\"\n\n\"And now that you know I don't?\"\n\n\"I still move on, but together with you.\"\n\nAn Shan squeezed my gloved hand, and then she brought it to her lips, kissing it.\n\n\"How's my glove taste?\" I asked.\n\nShe laughed.\n\nOver the next block, neither of us spoke. I wondered if she felt the way I did--like a newly freed prisoner. All of the possibilities of a new life lay before me.\n\nOn the steps outside our apartment building, An Shan finally asked a question. \"What do we do about Baba and Mama?\"\n\n\"You mean do we tell them we're--?\"\n\nAn Shan nodded and finished for me. \"--in love?\"\n\n\"Yeah,\" I said, \"do we tell them we're in love?\"\n\nShe smiled and I did, too.\n\n\"I'll figure something out,\" I said, but I had no idea how one broaches that subject with one's parents.\n\n***\n\nThere was not a lot of talking back in the apartment except for one moment. An Shan broke a kiss from me, and gasped, \"One thing before?\"\n\n\"Hmm?\"\n\n\"I know you might want to, but we mustn't have sex. Not for real.\"\n\n\"No,\" I said quickly. \"No, I--I won't. I don't want to either.\"\n\n\"We can't,\" she said.\n\n\"Jiating zeren.\"\n\nNodding, she added, \"Mama and Baba.\"\n\nWe stripped one another naked in the hallway of the apartment, barely inside the door. She dropped to her knees to pleasure me.\n\nI loved it, but I needed her, too.\n\nGently pulling her off me, I carried her to the couch and laid down under her. She spun, and we pleasured each other with our mouths.\n\nAn Shan was asleep when I called home. I spoke with Baba for a time, assuring him that An Shan and I were both doing very well in school and, for me, at work. When Mama took the phone, I asked her if Baba was listening.\n\n\"Bu ting.\" (No.)\n\n\"Mama, ching shuo Yingwen, keyi bu keyi?\" I asked her. (May we speak English, please?)\n\nShe agreed.\n\nI told her that I loved her daughter, that I loved An Shan--not as her older brother, but as a man.\n\nShe was dead silent.\n\n\"Mama?\"\n\n\"Wait for me,\" she said--without joy or anger, \"I will be there tomorrow--by myself--to see.\"\n\nI told An Shan when she woke, and we spent the late evening and into the early morning talking about what it might mean that Mama was flying out that very next day and that she was coming \"to see.\"\n\nMy meimei was terrified.\n\nOur Mama was a force. What she wanted, she got. Baba, so often like glacial ice on matters, would melt only for his wife. An Shan and I knew that, had I told our father, Baba would rant and spit and curse for a time, but it would pass. Mama, on the other hand, was eerily patient. She could hold out for months, years it seemed if she felt it necessary.\n\nAn Shan and I held each other tightly on her bed, kissing and making promises to one another. She felt my erection surge between her legs, pushing against her wetness. The fear in her eyes made them glassy. Almost in tears, she parted her thighs ever so slightly, ever so tentatively.\n\nShe would have let me. She wanted to let me.\n\nShe wanted comfort.\n\nI drew my cock back and away. I was not going to do something that would make us both feel even more guilty. Instead, I held her close, kissing her and assuring her.\n\n***\n\nAn Shan made dinner; I drove to Logan to pick up Mama.\n\nThe old Chinese woman wore her big parka, and I almost laughed at how thick and bubbly the coat was on her little body. Her only luggage was a small carry-on.\n\nShe did not hug me or kiss me. She walked past me to the car and waited for me to open her door. Once inside together, I asked how long she planned on staying.\n\n\"Long enough,\" she said. And that was the last thing she said until we got home.\n\nEarlier that day, An Shan and I had set up the master bedroom for her. I gave An Shan my bed, and I took the couch in the family room.\n\nUpon arrival, I showed Mama into the apartment. An Shan waited at the kitchen threshold. The house smelled like Mama's favorite--Lurou Fan, a pork dish served over rice. Mama nodded to An Shan, passing into the family room.\n\nI led her into the master bedroom; An Shan followed. Mama surveyed the space and nodded. She signaled for us to leave her alone.\n\nAn Shan said, \"Dinner in ten minutes okay, Mama?\"\n\nAnother nod. We left.\n\n***\n\nAt dinner, the three of us barely fit around our tiny, two-person table. I had to borrow a fold-out chair from a neighbor to give myself a place. I ate with my plate on my lap. Meimei had done excellent work with the pork; it was tender and so, so savory.\n\nMama did not comment.\n\nSo, we ate in silence until, toward finishing, An Shan asked, \"Mama, does Baba know why you're here?\"\n\nMama stared at An Shan for a moment, and then she said, \"If he did, would I be alone?\"\n\nAn Shan sat back.\n\nI asked, \"Why are you here, Mama?\"\n\n\"To see.\"\n\nAn Shan and I looked at one another. \"What,\" she asked, \"does that mean?\"\n\nMama said, \"Exactly what you think it means.\"\n\nAgain, my meimei and I exchanged confused glances, but before either of us could utter a follow-up, Mama said, \"Let me eat in peace. Talk later.\"\n\nAn Shan and I sat back almost simultaneously. I watched Mama's face, and it almost seemed like she was enjoying the situation--enjoying her children being so distraught.\n\nBoth of us having already finished, we watched Mama eat with painstaking lethargy, and when she finished, she turned to An Shan and said, \"Well done.\"\n\nI cleared the dishes and loaded the dishwasher. When I came out, Mama was there. An Shan stood at the door of the master bedroom, looking at us.\n\nMama told me, \"Wait here.\"\n\nShe turned and walked towards An Shan. Mama went into the room and took the doorknob. An Shan cast one final, confused, and fearful look at me before the door shut.\n\nI waited.\n\nAfter five minutes, I broke out my phone.\n\nWhen fifteen passed, I turned on the television.\n\nThirty-five minutes passed before I heard the door open. I turned, expecting to see An Shan, but it was Mama who signaled for me to follow her. Shutting off the television, I rose and walked to the bedroom.\n\nAn Shan passed me on her way out. Stonefaced, she didn't utter a word or even cast a glance at me.\n\nBefore, I had felt curious. After I saw An Shan, I grew nervous. Clearly, Mama did not want any communication between An Shan and me during this transition. What the fuck was I about to face?\n\nMama shut the door and sat on An Shan's little throne of a make-up chair. Instead of facing the wall mirror and small make-up table, the red chair was facing the foot of the bed. Mama gestured for me to sit on the bed, facing her.\n\nI did.\n\nSitting upright, she folded her hands in her lap and asked, \"Has this so-called love affair between the two of you resulted in dishonor to the family?\"\n\nI swallowed in an increasingly dry throat. \"You mean--are you asking if An Shan--?\"\n\n\"Is she pregnant with your child?\"\n\n\"No!\" I blurted. Then, clearing my throat, I more calmly said, \"No, Mama. We haven't even--we haven't done that.\"\n\n\"I see,\" Mama said. Her body visibly relaxed. Then, she smiled, raised her hands in a gesture of invitation, and said, \"Tell me your love story.\"\n\nInstantly, I knew I should have anticipated such a question. If Mama's purpose was \"to see,\" then it made all the sense in the world for her to wish to know how her children went from siblings to lovers.\n\nThere was a problem. What had An Shan said? How candid had she been? Do I dare tell Mama just how intimate we had been? How does one tell one's mother about such things? Oral sex--anal!--for fuck's sake! Did An Shan tell Mama--? I couldn't even finish the thought.\n\nMaking it worse was that if what I said somehow contradicted my meimei, then what? Would Mama refuse to bless our relationship?\n\nI began telling her. I began with jiating zeren, family duty. I told her about how I felt like the otter in her story--loved but never quite perfectly integrated. I shared with her the story about An Shan's dress rehearsal for Berklee. I invited her to remember how her daughter and I had spent so much time together in the basement--our conversations and our togetherness.\n\nI explained how that togetherness made us attracted to one another, but how family duty pushed us apart. I reminded Mama how angry An Shan and I were with one another during the summer. I finished by explaining how this animosity continued into my stay in Boston, but that after a long conversation, we couldn't deny our feelings.\n\nI never once mentioned sex.\n\nThroughout my speech, Mama nodded but otherwise remained cool and detached. When I finished, she rose, walked to the door, and called An Shan into the room.\n\nAn Shan's eyes remained wide with fear. She did not look at me.\n\nMama put us on the bed, sitting side by side. She settled in across from her in that little throne. A thought sprang into my head. She's going to make us kiss, it told me.\n\nMama said, \"Kiss one another for me.\"\n\n\"Mama!\" An Shan protested.\n\nMama waved her hand dismissively. \"You say you are in love,\" she countered. \"Lovers kiss. They don't care who sees.\"\n\nAn Shan and I glanced at each other. She turned back towards Mama. \"But--,\" she began arguing.\n\nMama interrupted. \"I know a lover's kiss. I have seen them. I have done them. I will know if I see. Show me your lover's kiss.\"\n\nAn Shan sighed in a vexed way.\n\nI drew her face towards me.\n\nHer eyes were glassy. Her skin was cold, and she trembled.\n\n\"And,\" Mama added, \"I will know if one of you is not in love.\"\n\nMy meimei gulped. I brought her to me, but I didn't kiss her. I whispered into her ear. \"I love you, and I will put a stop to her if you want.\"\n\nI felt her lips close to my ear. \"No. I don't think you're supposed to, and I'm scared, Gege.\"\n\n\"Then, let me kiss you softly. Just close your eyes and feel my lips on yours.\"\n\nShe hummed a tiny assent into my ear.\n\nDrawing back, I watched her close her eyes, open her lips, and wait for me. I took her into my arms firmly, and I kissed her with all of the tenderness I could summon. At first, she melted into it. Her body seemed limp. I held the kiss long beyond my planned exit. An Shan moaned into it, and she came to life.\n\nShe kissed me back and her lips felt charged with excitement. Our tongues mingled. At one point, we broke apart only to snatch our next breath and come back together an instant later, newly energized.\n\n\"Yes,\" Mama whispered.\n\nHer voice made us both end the kiss. An Shan and I glanced at one another before turning to Mama.\n\n\"Stand up, Jian Dao.\"\n\nI did. Mama rose and stepped in front of me. Her fingers reached up toward the collar of my shirt. She began to unfasten the buttons.\n\nI glanced at her.\n\nShe said, \"You will relax.\"\n\nI tried. Tugging the shirt out of my slacks, she finished unbuttoning it and pulled it off of me. I wore no undershirt, so I stood in front of Mama and An Shan bare-chested.\n\nI glanced at An Shan. She was extremely nervous.\n\n\"Mama,\" I began, \"what's happening?\"\n\n\"Take off your shoes and socks.\"\n\n\"Mama?\"\n\n\"Do it, Jian Dao,\" An Shan muttered. \"Please.\"",
        "I did, kicking off my shoes and stripping away my socks.\n\n\"You didn't tell him, An Shan,\" Mama said. \"I'm surprised at you.\"\n\n\"Tell me what?\"\n\nAn Shan sighed miserably. \"You're being inspected as Rights of the Daughter's Family.\"\n\n\"Take off your pants,\" Mama said.\n\n\"Wait--what?\" I asked An Shan.\n\n\"Rights of the Daughter's Family. You're a nominee. It's a Taiwanese thing--a really, really old Taiwanese thing that virtually nobody does anymore!\" An Shan's voice rose, and her last words were directed at Mama.\n\nMama smiled calmly. \"Your pants,\" she repeated.\n\n\"What does it mean this 'nominated' thing?\"\n\nMama unbuckled my belt. She unfastened my pants. She unzipped me.\n\nAn Shan said, \"When you are nominated as a potential mate, a potential son-in-law, the daughter's family has the right to inspect you.\"\n\nMama dropped my slacks, getting on her knees to pull them free off my feet.\n\n\"Inspect me how? Like this? Wait--who nominated me?\"\n\n\"You did when you told Mama about us,\" An Shan replied\n\nI looked at Mama. She nodded.\n\n\"And how am I inspected?\"\n\nAn Shan sighed. \"However the daughter's family sees fit to determine your worthiness.\"\n\nMama rose beside me. I was in my underwear, only. \"Is this typical?\" I asked.\n\n\"There is no typical,\" An Shan responded.\n\nMama hooked her fingers under the waistband of my boxer briefs.\n\n\"Mama, don't,\" An Shan urged.\n\n\"Uh. Do I get any say in this?\" I asked both ladies.\n\nMama slid my underwear down to my ankles. I was naked.\n\n\"Talk to me, someone,\" I said.\n\nMama completely removed the last garment and turned to An Shan.\n\nMy meimei cringed apologetically, muttering, \"I'm so sorry.\" Then, she answered, \"By tradition, it gave the prospective bride's family a chance to ensure that the nominee was worthy, whole, and true. Nominees were expected to allow this or the prospective bride's family could deny the match--therefore, the 'Rights of the Daughter's Family.'\"\n\nMama stepped behind me. \"He is strong,\" she said. \"Very strong.\" Her tiny hands touched my shoulders, my back, and the backs of my legs.\n\n\"Mama, why won't you talk to me?\" I asked.\n\n\"For Rights of the Daughter's Family, you are not my son. The family is not expected or required to explain anything to a nominee,\" she replied.\n\n\"She's right,\" An Shan added.\n\n\"So, you knew this was going to happen?\"\n\n\"I hoped it wouldn't, but--,\" An Shan didn't finish.\n\nMama did. \"An Shan knew,\" Mama explained, \"that my fumu inspected her baba before we were engaged, and his family did the same to me. An Shan knew our families held to the practice for generations. She should have expected this and explained it to you.\"\n\n\"I'm so sorry,\" An Shan offered.\n\n\"So what do I do?\" I asked. \"Nothing?\"\n\n\"Nothing,\" mother and daughter replied together.\n\n\"Was it typical for the--the prospective bride to be present during the inspection?\"\n\n\"No,\" Mama said, \"but it is the Right of the Daughter's Family, and I wish An Shan to be here.\" Mama stepped in front of me. Her hands explored my chest and armpits, my arms, and then my face.\n\nThen, she knelt in front of me. \"Uh, Mama?\" I turned to An Shan in desperation. Mama reached out and cupped my balls.\n\n\"Mama!\"\n\n\"Shush, child!\"\n\nShe rolled her thumb over and around each of my testicles. Then, she felt my scrotum, rubbing her fingers against one another through the flesh almost everywhere. Finally, she raised my limp cock, scrutinizing it and running her thumb gently along its length. Letting me free, Mama rose and turned to An Shan, saying, \"Now the Rights of the Husband's Family. Take off all of your clothes, An Shan.\"\n\nAn Shan shot to her feet. \"What?!\"\n\nMama nodded.\n\n\"But, you said--!\" An Shan pointed at me. \"You said he was not your son for this--which means I am your daughter, which means--!\"\n\n\"When I was representing the daughter's family, yes. Now I am representing the son's family. Do you think it is fair for him to be inspected, but for you simply to be assumed worthy, whole, and true?\"\n\nAn Shan open and shut her mouth--twice. Nothing came out until she sighed in resignation. Her shoulders slumped.\n\n\"Mama?\" I said.\n\nShe turned to me.\n\n\"May I take off her clothes--as your agent?\"\n\nAn Shan's eyes shot toward me. Hope was there in them. She and I awaited Mama's response.\n\nMama smiled. \"Yes, you may.\"\n\nI went to her and whispered, \"An Shan, ni mei de lihai.\" (An Shan, you are fiercely beautiful.)\n\nShe smiled.\n\nI helped her take off everything down to her bra and panties. Sitting in the chair, Mama said, \"Go on.\"\n\nWalking behind An Shan, I unhooked her red lace bra. Then, I drew down her matching panties. Out of Mama's sight, I kissed An Shan's ass softly.\n\nMy cock, already lengthening, began rising. I stood behind An Shan. The tip of my cock lodged itself, still growing, in between the two thick spheres of her butt.\n\nMama rose.\n\n\"What do you wish me to examine, Mama?\"\n\nShe gave me a naughty-boy smile, saying, \"Very well. You may examine her breasts and nipples.\"\n\nI gently scooped them into my hands.\n\n\"Feel for imperfections. Feel for fullness,\" Mama said.\n\nI squeezed them, rotating my fingers and moving from the foothills of her chest to the peak of her nipples.\n\nAgain, I squeezed them. My cock throbbed in her ass.\n\nAn Shan sighed beautifully.\n\n\"Check her nipples,\" Mama said, \"to see if they are suitable for breastfeeding.\"\n\nI released her pendulous breasts and gently curled my fingertips around An Shan's nipples. Leaning to one side of An Shan, I raised her breast and bent around her toward it. My cock slipped from her butt as I craned down and took the nipple into my mouth, sucking tenderly and rolling my tongue around it as if it were a nugget of soft candy.\n\nAn Shan let out an almost imperceptible moan.\n\nI released her nipple and repeated the process for the other side, savoring the texture of the rigid nipple surrounded by a thick, lush field of supple flesh.\n\n\"Are her breasts adequate?\" Mama asked.\n\nHiding behind An Shan, I kissed the back of her neck, squeezing her tits again. \"They're perfect,\" I said.\n\n\"Good. Now examine her hips and buttocks,\" Mama told me. \"See that she has the fullness and strength to bear a child.\"\n\nI slid my hands from An Shan's waist, over her hips, and down to her thighs. I spread my fingers wide and ran them up her body but with greedy force. My cock was like the leg of a piano, jutting almost vertically from my groin and purple-red with raging blood. It grazed An Shan's lower back as I groped her hips. Her silky hairs caught in my stubble when I kissed her shoulder, her back, and the back of her neck.\n\nSliding my hands behind her, I clutched her ass and groaned. An Shan hummed sweetly, airily.\n\nMama asked if An Shan's body was suitable.\n\nI told her it was.\n\nShe nodded and instructed me to examine An Shan's womanly parts--\"to see if all is well and as it should be.\"\n\nSweeping An Shan's long, jet hair away from her neck, I brought her body against mine. My cock rode up her spine. With one hand, I clutched her tit. I laid the other flat, firmly on her sleek tummy. Sucking her neck in full view of Mama, I slid my hand down, down between An Shan's legs.\n\nAn Shan moaned.\n\nI curled a finger under her, found her wet clitoris, and drew circles around it while my other hand stroked her breast.\n\nAn Shan held her breath when I snaked my finger inside of her pussy and began to massage her there.\n\n\"Is she a whole woman?\"\n\n\"Yes, Mama,\" I uttered, fucking An Shan with my finger and hearing her moan without inhibition.\n\n\"Can her body lubricate a man?\"\n\n\"Yes. Easily.\"\n\n\"Show me that she is desirable to you.\"\n\nI drew my hands from An Shan and stepped beside her, putting my body on full display. Mama looked at it. She rose and walked to us.\n\nStanding in front of me, Mama took my cock in her hand. She stroked me once, watching her hand glide back and forth. My first feeling was shock. I was going to say something, and An Shan was, too.\n\nMama released my erection, stepping to An Shan. In the wake of Mama's touch, I felt a kind of thrumming, warm pleasure. It lingered, but not in a fading way. The pleasure grew stronger for several seconds before dying like an echo. Gasping, I was astonished. An Shan surely read it in my face, heard it in my breathing.\n\nI had never felt such rapturous pleasure on my cock from a simple touch.\n\nSuddenly, An Shan flinched. I spun to look. Mama's finger was inside of her daughter's pussy. Mama's wrist gyrated; she did something inside of An Shan. My meimei sucked in her breath and let it out in a long, deep moan. Mama drew her hand free and took a step back.\n\nAn Shan's legs were shaking. She blinked at Mama in astonishment. Then, Mama spoke such rapid, hushed Chinese to An Shan that I could barely understand it.\n\nAn Shan nodded.\n\nMama continued.\n\nI picked up words and phrases, but it ended before I could make anything of it. Something about the time and woman. I think I heard the Mandarin word for penis. Mama said something about majesty. That could be right.\n\nAn Shan nodded again.\n\nMama smiled. She looked at both of us and said, \"I have seen, and you are both worthy, but there is one last duty as An Shan's mother I must perform.\"\n\nMama went to An Shan and led her to the bed, helping her climb onto it. An Shan didn't argue; she seemed to be glad of the help. Mama positioned An Shan near the edge of the bed on her hands and knees. Beckoning me, I went to Mama. She urged me onto the bed behind An Shan. Then, she held my cock and brought it to An Shan's pussy.\n\n\"Go ahead, Jian Dao. She is as ready for you as she can be, and I wish it.\"\n\n\"Mama, wait. Is this part of the rights thing?\" I asked.\n\n\"No, this is part of being a mother to a Taiwanese daughter.\"\n\n\"I don't understand.\"\n\nMama sat back. She said, \"The two of you have been dutiful in not having sex, but I have seen the two of you now. I know your urges will not be suppressed for long.\"\n\n\"We won't--.\"\n\n\"Quiet, son. You will.\"\n\n\"And you want me to do it here? Now?\"\n\n\"Yes, and it is not at all uncommon for Taiwanese mothers to be present at this moment to help their daughters through their first time.\"\n\n\"Oh.\"\n\n\"Go ahead, son.\"\n\nTaking An Shan's hips and staring down at her beautiful ass, I urged my cock forward.\n\nMama watched closely.\n\nHer body parted for mine. The knob of my cock sank inside her. An Shan cried out, and I stopped.\n\n\"No,\" Mama said to me. \"Be firm. It is better for her to get it over with than to delay, my son. Trust me in this.\" She turned to her daughter. \"Steel yourself, An Shan.\"\n\n\"Mama,\" she gasped. \"Bu neng. Tai duo.\" (I can't. It's too much.)\n\n\"Neng!\" (You can!)\n\n\"Rang wo!\" (Help me!)\n\nMama climbed onto the bed. She laid her hand on the bed near An Shan's. My meimei grabbed Mama's hand and held it tightly in hers. Mama put her other hand on An Shan's back, stroking her gently. An Shan kissed Mama's hand.\n\n\"I know, daughter, but it will be over soon, and you will forget this suffering and only remember the sweetness.\"\n\nAn Shan hummed nervously.\n\n\"Yes,\" Mama said. She looked at me and nodded. \"As deeply as it will go, son, and when the pleasure causes you to give her your seed, do not concern yourself. There is no egg to fertilize at this time.\"\n\nHolding An Shan's hips, I buried myself in her pussy with one firm shove. An Shan howled. Mama whispered into her ear, caressing her back.\n\nAn Shan hollered again. And again. Mama kissed An Shan's head and whispered into her ear. Momentarily, An Shan's panting settled, and she huffed that it was better. She thanked Mama.\n\nTurning to me, Mama said, \"The difficult part is over. Enjoy one another's bodies as lovers.\" She let go of An Shan's hand and began to rise.\n\n\"Stay, Mama,\" An Shan pleaded. \"Stay with me through this.\" She reached for Mama's hand.\n\nThe old woman glanced at me, and I couldn't speak. An Shan's pussy was like a song that drowned out the rest of the world and made me feel thrillingly alive.\n\nMama knelt beside An Shan and took her hand; I started fucking.\n\nAt first, An Shan grunted at every thrust, but gradually, those sounds diminished, being replaced by deep breaths and sweet moans. Finally, she huffed, \"It feels so good, Mama.\"\n\n\"Yes, dear child,\" Mama said. \"Remember that he is hard and strong for you. It is you he desires, and no other.\"\n\n\"Yes!\" An Shan cried.\n\n\"Let him love you, An Shan.\"\n\n\"Yes!\"\n\n\"Give your body to him completely,\" Mama urged. \"Surrender to the pleasure his body gives yours.\"\n\nAn Shan moaned deeply, finishing with a gasp. I grunted at the new, higher pleasure awakening within me.\n\nMama turned to me. \"Yes,\" she said. \"You're body pleases him, An Shan. Can you feel it?\"\n\n\"Yes, Mama! I feel him!\"\n\nSuddenly, I was no longer in control. My hips forcefully fired into An Shan, but the music of her body swept me away. It was as if An Shan's body commanded mine.\n\nAn Shan hollered that she felt it. It was here.\n\n\"Let go, both of you,\" Mama calmly uttered.\n\nMy meimei cried out. Dizzy, I wanted to stop. I needed to freeze and just cum in her, but I still couldn't. The sound of An Shan's climax drove me onward, compelled me to fuck her all the way through it. I did, and the satisfaction reached levels higher than I ever dreamed.\n\nAn Shan's pussy began to throb deep inside of her. My cock felt the deepest part of her tightly embrace the shaft, and An Shan hollered wildly.\n\nControl never came back to me until it was over, I clutched An Shan's ass and came in her pussy, still fucking, but so hyper-sensitized that each thrust was more of a convulsion of my entire core than a drive of my hips.\n\nAn Shan was sprawled before me. Her knees were wide. Her back arched as if to present her pussy at its most lurid, pornographic angle. Her breasts squashed against the mattress, creating two beautiful bubbles of flesh poking from either side of her torso. Her head was up and she moaned toward the headboard as I continued firing volleys of semen deep inside of her.\n\nAs the feeling ebbed, I was reminded of An Shan's piano playing--how she poured herself into the emotion of every piece. Fuck, yes, she had, I realized. She had poured herself into getting fucked by me. It was spectacular and gratifying at the same time.\n\nMama whispered, \"Be together with her now. Comfort and love her gently.\" She rose and left.\n\n\"Mama?\" An Shan sighed.\n\nMama turned. I was surprised to see that now Mama was the one looking nervous.\n\n\"Thank you,\" An Shan whispered.\n\nMama's face relaxed. She smiled, nodded, and walked out the door.\n\nI pulled my cock from An Shan and slid onto the bed beside her. Her body deflated into the mattress, and she turned to me, pink and perspiring. \"It was so beautiful, JD,\" she sighed.\n\nI wrapped her in my arms and kissed her deeply. I told her that she had been magnificent.\n\nShe circled me in her arms, and we laid together that way, coming down from heights only the song of the body could reach.\n\n***\n\nI showered quickly; An Shan followed. When I came into our little family room, Mama was there, reading a book. She put it down and gestured for me to sit with her.\n\nI didn't know whether to feel embarrassed or not.\n\nShe seemed unfazed. \"My Mama--your grandmother--stayed with me on my first time with your Baba. An Shan knew this. Don't be ashamed; I'm not. It is family duty.\"\n\n\"Jiating zeren.\"\n\n\"Yes, and you did well,\" she said. \"Now, listen carefully. I have researched the matter. There are forms you must complete to legally sever yourself from our family. Another government form will return to you the name given to you by your birth mother--Viktor Deripazhkin. You must complete these.\"\n\n\"Mama--what? No. I am proud to be your son--to belong to the Lee family.\"\n\n\"Your Baba would weep to hear these words from you, Jian Dao.\"\n\n\"They're true.\"\n\n\"Of course they are,\" Mama said. \"I know this, and I thank you for saying them, but your next family duty is to give up your family. You do not have to be Viktor, but you must at least be J.D. Deripazhkin. Your separation from the Lee family must be complete. Only then can you marry An Shan.\"\n\n\"Get married already?\"\n\n\"Did you not hear her? She told me so. Her heart belongs to you.\"\n\n\"Back in the bedroom before--?\" I didn't finish.\n\nMama nodded.\n\nI said, \"You spoke so quickly and quietly. I didn't understand.\"\n\n\"You must practice your Chinese more often, Jian Dao. In any event, I will send you the links to the forms. Once everything is settled legally, we will bring you both home where you can ask Baba's permission.\"\n\n\"Baba's permission for what?\" It was An Shan, wrapped in towels, smiling, and looking fresh and beautiful.\n\n\"Baba's permission for Jian Dao to marry you.\"\n\nAn Shan's smile vanished. She turned to me. \"Does he--? Do you--want to? Marry me?\"\n\n\"I do.\"\n\nAn Shan screamed in joy, jumping in the air. When she landed, she had to catch her towel before the weight of her breasts tugged it free.\n\n***\n\nMama was on a plane back to Minneapolis. An Shan and I were in bed together.\n\n\"What else did you and Mama whisper about?\" I asked.\n\n\"You've probably already figured out that she wanted to know if I was ovulating.\"\n\n\"Yeah. What else?\"\n\nAn Shan laughed.\n\n\"What?\"\n\n\"You may not like it,\" she replied. \"It's weird.\"\n\n\"What? Tell me.\"\n\n\"Mama told me you had a kingly penis.\"\n\n\"Oh, geez. Kingly?\"\n\n\"Or majestic, depends on how you translate it,\" An Shan explained. \"Anyway, Mama said I mustn't ever take such a penis for granted.\"\n\nI laughed. \"She could have just as easily told me you had the body of an Asian goddess, and I couldn't ever take you for granted.\"\n\n\"Maybe, but here's the thing: I would like to not take your kingly penis for granted right now,\" An Shan suggested with a grin.\n\n\"How would you like to not take it for granted?\"\n\nAn Shan pushed the covers of the bed down. She stripped off her nightshirt, exposing those beautiful, surging tits. She said, \"Well, I was thinking about our names.\"\n\n\"Our names?\"\n\nShe nodded. \"Jian Dao, as you well know, means 'Way of the Sword;' An Shan, of course, means 'Peaceful Mountains.' So, what if the way of the sword went through my peaceful mountains?\"\n\nAn Shan cupped her mountainous breasts and drew them together with a grin.\n\nI climbed over her and lowered my erection into the cleavage she created, sighing.\n\n\"Maybe later, An Shan,\" I said, \"my way will take me between other peaceful mountains.\"\n\nShe laughed.\n\nIt would be another spectacular duet--a lifetime of them lay ahead for us.\n\n*****\n\nEnd Note: Thank you for taking the time to read this story. All errors I must apologize for and hope they didn't pull you out of the narrative. Thoughtful feedback is always welcome. -FS/Mr. Squeeze"
    ],
    "authorname": "fsqueeze",
    "tags": [
        "brother",
        "sister",
        "asian",
        "chinese",
        "interracial",
        "anal",
        "mother"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/meimei-pt-02"
}
{
    "title": "The Colour of Love",
    "pages": [
        "Like most women, I was never entirely satisfied with my appearance. I had always wanted bigger breasts - not huge, but... bigger. C cup. Maybe a D. And while I wasn't exactly 'fat', I had always been envious of slender women with narrow waists. So waking to find that, in addition to not being dead, I was possessed of a beautifully curved body was, well, something of a silver lining.\n\nI was black all over. Glossy. Like a life-size fetish doll. But like a child's doll, I had no nipples, and not even a suggestion of a pussy or an ass. I had no fingernails, no toenails, no hair. No hair at all. Anywhere. And only the merest suggestion of ears, though I could hear perfectly well. The only openings to my human body that I could find were my eyes, my nostrils, and my mouth.\n\nIf I even was still human.\n\nThe thing that crashed into the forest behind my house shortly after midnight certainly wasn't a meteor, though it had looked like one as it trailed fire from the heavens. It was early summer and the sky still held a dim illumination, enough that I dared to brave the path through the trees in a quest to find the crater.\n\nI hoped to find the meteorite itself. That would have been so cool. What I did find, half-buried in the deep, rich soil of the river bank, and almost entirely concealed beneath a fallen tree, was the wreckage of a metal craft of some sort.\n\nMy first thought was that it was a satellite, and that the eerie blue glow from inside was an exposed nuclear reactor. (I'd read somewhere that satellites were powered by plutonium.) But as I studied the object, I became increasingly sure that it was a spacecraft, and not a human one at that.\n\nI inched closer, curious to see inside through the broken hull, and to confirm my suspicion. Perhaps I would see an alien.\n\nI saw a glowing blue dot, like a miniature star, hovering a metre above the floor. It was beautiful, and seemed to call to me. I reached inside, with a lack of caution I can only ascribe to temporary insanity, and touched the star with a fingertip.\n\nIt winked out, and I recoiled as if I had received a powerful electric shock. I was thrown backwards into the river, and I am fortunate it was barely more than a stream at that time of year. I sat there in a daze for a long time, my nerves on edge, as the water swept soothingly past me.\n\nBut cold, and my nerves calmed enough eventually that I was able stand and make my way shakily through the shadowy forest towards the comfort and safety of home. I was shivering and sick, and the whole of my right arm ached, though my fingers were numb and tingling furiously with pins and needles.\n\nAt home I stripped out my wet clothes, wrapped myself in a blanket, and switched the central heating to continuous. I knew I should probably, sensibly, go to the hospital, but how would I explain what had happened? Instead, curling up on the sofa in front of the TV, I fell fast asleep.\n\n*\n\nThe sweltering heat, more than anything else, woke me. The sun was high in the sky and glaring through the windows, and the heating was turning the house into an oven. At some point in my sleep I had even discarded the blanket to sleep naked.\n\nI was dry, at least, and felt my usual self again - everywhere except my right hand. I looked at it and frowned. Starting from my wrist, my skin darkened towards my fingertips, where it was almost black. There was no pain, although there was, when I flexed my fingers, an elastic resistance, as if, perhaps, I wore a thin, rubber glove.\n\nIf this was my punishment for stupidly touching an alien star, then it was no great burden, but I thought it best to head for the hospital, as I should have done the night before.\n\nTwo hours later, a doctor peered in obvious bafflement at my arm. My skin was dark all the way to my elbow, and my hand was jet black. Even stranger, my fingers had taken on a glossy, plasticky appearance, without wrinkles or fingerprints or hair, or even fingernails. More than ever it felt, and looked, like I was wearing a black, rubber glove.\n\nAnd yet, my skin was as sensitive as ever. Perhaps more so. When the doctor tried - and failed - to pierce the dark skin with a hypodermic needle, the pain of it tore a scream from me. A sample of blood from my other arm was sent for analysis, but by the time the results came back, four hours later, I was glossy black rubber all the way to my elbow, and the darkness had spread past my shoulder.\n\nMy increasingly desperate hope that the doctor could help was dashed. \"Inconclusive,\" he said. \"We need to take more blood and run more tests.\"\n\nBut I couldn't stand to stay any longer. By the time they figured it out, there would be nothing left of me. If I was dying, I wanted to be at home.\n\n*\n\nAt home, in my bedroom, I stripped and examined myself in the mirror. My right arm was glossy to my shoulder, and the skin of my chest was dark from neck to navel. It felt so much like a long glove, tight and constricting, and the touch of my smooth, glossy fingers against my breasts was cool and unexpectedly erotic. Despite my deepening depression, my nipples hardened swiftly as I teased them with rubbery fingers.\n\nI had nothing to lose, and a sudden, burning curiosity. Lying on my bed, I teased apart my labia with my new fingers and delved within. Between the heightened sensitivity of my fingers, and the kinky weirdness of being touched by rubber-coated fingers, I was incredibly aroused.\n\nMy smooth fingers slipped easily into my well lubricated interior, and I alternated between stroking my clit and finger-fucking myself. With my unaffected hand, I teased my nipples as they turned increasingly black. I was dismayed to feel them flattening until my breasts were glossy, featureless mounds. I could still feel my fingers as they searched in vain, but my nipples were gone.\n\nFearing that I might soon lose more, I grabbed my favourite dildo from the drawer and was soon fucking myself with it, while my rubber fingers stroked my clit. I was in wild, wanton heaven, getting closer and closer to the point where I would no longer care about the terrible thing that was happening to me. The pressure about my breasts. The constriction of my waist. The disappearance of pubic hair.\n\nI knew I was right to come home. I had never needed an orgasm more desperately in my life. And time was running out fast. My left hand was as alien now as my right, and my thighs were slick and smooth. Harder and harder I pounded my pussy with the dildo, as fast and as deep as I could, while my fingers raced in circles about my clit.\n\nEven my head was not immune to the creeping rubber. My tongue licked lips that were cool and stiff, and my eyelids felt thick. They itched like crazy too, but I only cared about one thing. \n\nI climaxed with a tremendous wail, and surrendered to a long series of blissful contractions, my orgasm perversely heightened by the sense that my whole body was constricted by my new rubbery skin. How long I lay there convulsing in pleasure, I don't know. Exhausted, uncaring and wonderfully sated, I drifted off to sleep.\n\n*\n\nI awoke with a beautifully curved body that was both eroticised and desexualised. I was unmistakably feminine in appearance, and my face was still my own, though my new glossy black skin reflected the light in a way that concealed rather than revealed my identity. Not being able to see or touch my nipples or my clit was strange, and distressing. A little perversely, it made me want to see and touch them.\n\nTry as I might, I could feel nothing but smooth fingers caressing smooth skin. I was so very smooth to the touch. Everywhere. And sensitive. I looked like I was clothed in liquid latex, but I felt naked. I decided against wearing clothes on top, however, at least inside my home.\n\nAn ache in my stomach reminded me that I hadn't eaten properly in over twenty-four hours. Just a packet of crisps and a cup of tea at the hospital. There was a pint of milk in the fridge that I downed thirstily, but otherwise nothing in the fridge or cupboards seemed at all appealing. I wanted yoghurt, or... fruit.\n\nThere was a bunch of bananas in the fruit bowl in the dining room. I snatched up the whole bowl and took it with me to the sofa. I devoured one after the other as I watched the news.\n\nBut there was nothing of much interest in the news. Certainly nothing about spaceships and aliens and weird rubber women. I finished the bananas, and was still hungry. I had a craving for strawberries, and macadamia nuts, and jasmine tea, none of which I had in the house.\n\n\"But I can't go out looking like this,\" I wailed, to whatever cruel gods had ordained this fate for me.\n\n\"I can adjust coloring,\" a voice said. Not really an audible voice, but the words were there and clear.\n\nI leapt to my feet, my heart pounding. \"Who are you?\"\n\n\"The last survivor of the Zdatr-ka. Had you not touched me when you did, I would be gone too. You saw the last of my light, my dying breath, and then you saved me. I owe you my life.\"\n\n\"Then why have you done this to me?\" I demanded.\n\n\"Your surface - your skin - was easy for me to adapt to, and I have done no harm to you. Indeed, this symbiosis is regarded by most intelligent species as a rare honour.\"\n\n\"But I look awful! Well actually,\" I conceded after a moment's reflection, \"I look pretty amazing, but I look like someone's kinky sex slave. I'll get arrested if I go outside looking like this. And I want my nipples back.\" I pinched my breasts where my nipples should have been, but without effect. \"Not to mention...\"\n\n\"Perhaps I can help with that,\" the voice said after a moment, There was a rush of sensation as if two mouths had fastened about my areolae and were sucking my nipples for all their life was worth.\n\nI screamed and collapsed onto the sofa, fighting to escape my unseen assailants. \"Stop!\" I cried.\n\nThe sensations stopped as suddenly as they had started. \"Was that not what you wanted?\" the voice said, sounding puzzled.\n\nI managed to catch my breath. \"Well, yes,\" I said, panting, \"but gentle to begin with, and build up to it slowly.\" I laughed as I heard myself talking to the disembodied voice of my alien skin as if it were an inexperienced lover, and sighed with pleasure as the two mouths returned to my breasts, but without their former crazed intensity. \"Yes,\" I said. \"Just like that.\"\n\nThere was no one there, of course. My breasts were as smooth and devoid of nipples as before. The skin was doing this to me, and didn't stop when I stood up again and walked to my bedroom to look at myself in the mirror. The invisible men, or who- or whatever, continued licking and sucking my invisible nipples, and the heat of arousal was building urgently in my groin.\n\nMy crotch was as smooth and featureless as my breasts. \"Can you do my clit as well?\" I asked, adding hastily, \"Gently!\"\n\nA third invisible mouth pressed suddenly against my invisible pussy, the tongue sweeping through my labia and circling teasingly about my clit. \"Is this correct?\" the voice said, this time with a trace of humour.\n\n\"Fuck, yes,\" I said. There was no outside sign of what was happening, except for the increased pace of my breathing and the almost involuntary twitching of my hips as I sought to increase the stimulation of my clit. \"How are you doing this?\"\n\n\"Direct stimulation of nerve endings. You no longer physically have nipples or a clit, but the nerves are still there and I can excite them however you like.\"\n\n\"What about my vagina? And my ass? My womb!\"\n\nI had to lie down. The intensity of the stimulation was building deliciously, and I was increasingly shaky on my feet.\n\n\"Your womb is unaffected. There has been some modification of your vagina to allow me to reclaim waste, and your ass and large intestines have been largely repurposed. I can stimulate these too, if you would like.\"\n\n\"Yes, please,\" I said, hungry for more stimulation. I whimpered nervously, though, as a thick cock nudged against the tight ring of my ass suddenly, and an even thicker one pressed into the folds of my pussy. If I even had an ass and pussy any longer.\n\nI could do nothing to help or hinder the cocks demanding entrance to my body. They didn't even exist. The fevered gyrations of my hips had no effect on what my skin was doing to me. Anal sex was a new thing for me, and the sensation of having my ass stretched deliciously wide by a thick cock was blowing my mind. As the two cocks breached me in unison, I climaxed with a suddenness that quite astonished me. \"Fuck!\" I shouted. \"Fuck!\"\n\nObediently, the cocks thrust deep, while the three mouths stepped up the intensity of their attack on my pussy and breasts. In the mirror, I could see my jet black body writhing and convulsing in pleasure and desperate need, wild and crazy, kinky as fuck.\n\nHarder and harder the cocks pounded into me, with long, deep thrusts, sometimes together, sometimes one thrusting while the other withdrew. Harder and harder the mouths licked and sucked at my clit and at my nipples. Again I climaxed, and again, until it was impossible to separate one from the next.\n\nUntil I could endure no more. \"Enough!\" I cried. \"Stop!\"\n\nWith one last combined thrust, the two cocks penetrated to an almost painful depth, thickening and stiffening exquisitely before yielding to their dance of orgasmic joy, splashing cum into the depths of my body and triggering another climax that left me convulsing helplessly about the pulsing cocks, waves of pleasure coursing through my exhausted flesh with each contraction.\n\nMy invisible lovers dissipated like smoke. There was no lover to hold me as my body unwound slowly from its orgasmic high, but the tight, protective grip of my skin was a reassuring companion. \"Thank you,\" I whispered.\n\n\"The pleasure was mutual,\" the voice said warmly, and I felt a gentle kiss on my lips.\n\n*\n\nI woke with the dawn, my bedroom window facing more or less east. My black skin was absorbing the light with pleasure. It was strange how natural it was starting to feel, and how much I enjoyed the persistent sense of constriction. Only the appearance bothered me. \"You said something about changing the colour,\" I said.\n\n\"Black is the natural colour, but if you focus on what colouring you want, I can try to match it.\"\n\nI looked at myself in the mirror and concentrated, trying to picture myself as white rather than black. Slowly the darkness bleached from my jet black skin to leave me snow white. Except, of course, for my eyes and mouth. \"I look like a robot,\" I said, laughing. I tried pink instead, and cringed at the result. Primary blue was gorgeous, and at one point had a rainbow painted across me from left to right.\n\nThe most 'human' I could make it was a shade of brown that still gave me the appearance of a mannequin in a Greek window display. Once I had dressed in boots and skirt, a long-sleeved shirt, hat and sunglasses, I was, however, semi-convincing. Enough so that I dared to leave the house.\n\nIt occurred to me as I did that I hadn't had a pee since lunchtime the day before. Which, given that I didn't have anywhere to pee from, was a blessing. \"No need to pee?\" I queried.\n\n\"No, but don't drink too much. It takes time to process.\"\n\nI received a number of strange looks from people in the village, but no sense of recognition, and no horrified expressions. I didn't dare have a conversation with anyone, and kept to myself as I strolled through the aisles in the minimarket and filled my shopping basket with fruit and nuts and milk and yoghurt and, on sudden impulse, a huge jar of honey.\n\nI tried not to think about the night before, but once I escaped from the village and was walking back up the hill towards my home, a shopping bag in each hand, my thoughts turned restlessly to my alien skin. \"Are you male or female?\" I asked. \"Or something else?\"\n\n\"My species has no gender,\" the voice replied. \"But now that I have bonded with you, I definitely feel female, though I don't really understand it.\"\n\n\"I don't think anyone does, really.\" It shouldn't really have mattered, but I felt more comfortable being able to think of my symbiotic partner as 'she'. \"Do you have a name?\"\n\n\"Sazka-tiano urma pra'Zdatr-ka.\"\n\n\"Wow. Sazka-tia-, er, what?\"\n\n\"Sazka will suffice. It was my frequency, the precise shade of blue you saw when you saved my life.\"\n\n\"Sazka...\" I let the name linger on my tongue. I remembered suddenly the pressure against my lips the night before. \"Why did you kiss me?\"\n\n\"You have such passionate memories of kissing. I wanted to feel it for myself. Do you mind?\"\n\n\"No,\" I said. \"It just occurred to me that I have never kissed a woman before.\"\n\nSazka was silent for a minute, though I could almost sense her thinking about me. \"Stand still,\" she said. \"Put the bags down. Close your eyes.\"\n\nI did as instructed. Not until that moment had I noticed just how effectively my new skin blocked light from passing through my eyelids. With my eyes closed, I stood in darkness beneath the bright morning sun. I felt someone in front of me, and opened my eyes in sudden fear, but there was no one there. \"Sorry,\" I muttered, and closed my eyes again.\n\nThere was a definite presence, warm and human, gentle hands on my waist holding me still as she pressed against me, her hard nipples pushing into my breasts, her pubic hair tickling my hairless pussy. Her mouth pressed tentatively against mine, her lips soft and warm, and I surrendered to the kiss...\n\nI made the mistake of trying to touch her. I wanted to grab her and pull her tighter against me. I wanted to penetrate her lips with my tongue, to taste her and to smell her, to make her real, to make her mine. But I merely ruined the illusion. I was abruptly aware that I was standing in the middle of a public road and trying desperately to kiss a woman who wasn't there. A ridiculous sight indeed, had anyone been there to see it.\n\nShaken, embarrassed and frustrated, I picked up the bags and continued home. Sazka said nothing, and I sensed nothing at all from her, as if she had left me to my misery. My skin darkened gradually, and by the time I reached home it was jet black again. I stripped out of my clothes and slumped onto the sofa, watching pointless daytime television as I gorged on a bowl of yoghurt blended with honey, chopped fruit and nuts.\n\n\"I never expected to be a symbiont,\" Sazka said suddenly. She sounded as miserable as I felt. \"Only a few of us ever do it, and almost no one in the optical frequencies and above. We're too emotional. It causes problems. I'm sorry - I should have accepted my fate, instead of bonding with you. Without your consent, as well. If I ever did go home, they'd brand me as a criminal.\"\n\nBonding. Consent. As if she had raped me, and then been forced into a marriage. \"No,\" I said. \"You were just trying to survive, and no one forced me to touch you. What kind of idiot touches a star in an alien spacecraft.\"\n\n\"You... touched me?\" Suddenly the memory was vivid, and I could feel Sazka reliving the moment when I had reached out to her. She sighed. \"You thought I was beautiful.\"\n\n\"You were. I didn't know what you were, I just knew I wanted to touch you. I'm glad you bonded with me. If I knew then what I know now, I would gladly have given my consent.\"\n\nA heartbeat later, her lips were pressed against mine, warm and demanding. I closed my eyes and returned her kisses with equal enthusiasm, but took care not to do anything that would spoil the illusion. \"I love being wrapped around you,\" she whispered. \"I want to hold you tight forever.\"\n\n\"Do you have a choice?\" I asked. \"If your people came for you, would you leave me behind? Or take me with you?\"\n\n\"There is no choice. The bond is permanent. We live and die together. I am yours to command, and you are mine to protect. Even if you give your heart to another, though I think that would break mine.\" She laughed suddenly inside my head. \"Listen to me! Thinking human thoughts. What a strange and wonderful thing this bond is.\"",
        "She kissed me fiercely, and not just on my lips but everywhere, a hundred unseen mouths kissing me all at once. \"I love you,\" she whispered in one ear. \"I want you all to myself,\" she whispered in the other. \"If you ever choose another over me, I will torment you beyond endurance.\" Mouths sucked roughly at my nipples and clit, wrenching a scream from me that gave way to laughter.\n\n\"Stop!\" I begged, and she did. \"If ever I love another, you may torment me all you like. Tell me, Sazka, are all shades of blue as jealous as you?\"\n\nShe laughed with me. \"I'm sure they would be, if bonded with you.\"\n\nWe kissed for a few minutes, but the absence of tongue continued to frustrate and distract me. \"Can the black skin go deeper?\" I asked. \"Into my mouth, and tongue.\"\n\n\"Of course, and deeper too, but you may not like it.\"\n\n\"I want to try.\"\n\n\"Once done, it can't be undone. Be certain of your choice.\"\n\n\"I'm certain. Do it. All the way.\"\n\nSazka laughed. \"And you thought you weren't kinky...\"\n\n*\n\nSazka's presence faded from my mind and I rushed upstairs to look in the mirror. Already the once-crimson interior of my mouth was darkening. Like being at the dentist, I opened wide until my jaw ached. My gums were soon black, and the insides of my cheeks too, and the rest of my mouth was soon swallowed by shadow. My tongue was the last to change, the darkness spreading forwards from the back to the tip. Until only my teeth were left, white within the black hole of my mouth.\n\nThe last stage of the transformation followed swiftly, the black flesh smoothing to a slick and glossy finish. And Sazka was right. My whole mouth felt wrong. None of the familiar texture was there, and it was wet and slippery in a way I'd never been conscious of in the past. And while I could half-pretend my transformed outer skin was just kinky clothing, the inhuman nature of my mouth was too immediate, and too intimate, for such deception.\n\nNot only did I look like a walking, talking, life-size rubber doll, I was becoming one for real.\n\n\"Lie down on the bed,\" Sazka ordered. \"And close your eyes.\"\n\nI did as instructed, tense with anticipation, and shivered with delight at the touch of her lips on the bare soles of my feet, both, at the same time. More lips kissed my calf muscles, and more my knees and thighs. At the same time, my palms were kissed, then my wrists, my lower arms, and higher. I quickly lost count of how many invisible mouths were kissing me.\n\nMy belly, my inner thighs, the curves of my breasts, my neck. Wonderful beyond measure, everywhere except where it really mattered. \"Kiss me!\" I pleaded. The words sounded strange, spoken by my new mouth.\n\nLips pressed against my lips, and I kissed her hungrily, slipping my tongue into her mouth, tasting her for the very first time as her tongue brushed past mine. Such a simple thing, but it made me inexpressibly happy.\n\nMore mouths joined in while we kissed, sucking gently about my nipples and teasing the folds of my labia. Sazka pulled away from my mouth, and when I whined a complaint my lips discovered her breast. I sucked gratefully on her nipple, licking its sensitive tip while wondering if she enjoyed it as much as I did. \"Your pleasure is my pleasure,\" she murmured by my ear.\n\nThe breast lifted away, and her thighs trapped my head. The raw, musky scent of an aroused pussy flooded my nostrils moments before desire-wet labia descended on my mouth. The illusion was so realistic I opened my eyes, sure that I would see her.\n\nNo one.\n\n\"Close your eyes,\" she hissed, but I had already done so.\n\nI had never been with a woman before. I'd always considered myself strictly hetero. And yet, I couldn't get enough of my invisible alien lover. I loved the taste of her pussy, the smell of it, the complexity of the folds that my tongue explored, the deep, tight well of her vagina, the hard point of her sensitive clit. None of it was real, yet all of it was real.\n\nAs my tongue explored the pussy above me, her tongue explored mine, copying my moves so exactly it was as if I were licking myself. I embraced this surreal pleasure, licking her clit with a steady rhythm that pushed me closer and closer to orgasm. Sazka's many mouths were meanwhile sucking my fingers and toes, biting my neck and ears, pinching and licking my nipples.\n\nHigher and higher I climbed, to the very peak of pleasure. Sazka's hips tightened against my cheeks as she came, her pussy flooding my mouth with her cum as we convulsed in synchrony. Without transition, she was kissing me again, her tongue exploring my mouth.\n\nShe laughed suddenly. \"I love the taste of my pussy in your mouth. I can't wait to taste my cock.\"\n\n\"Huh?\"\n\nHands grabbed my breasts and squeezed them together, even as a long, thick, disembodied cock thrust between them. Another pressed firmly against my pussy, demanding and finding entrance. I whimpered as my vagina stretched about the invader. A third forced its way into my ass, forcing a cry of protest and pleasure from me.\n\n\"I know how much you love cock,\" she said. The cock between my breasts quickly picked up speed, the thick veins rubbing against my skin a delightful sensation. \"And I know how much you love cum.\" The cock stiffened and spat cum against my neck. \"I don't have the limitations of a man,\" she said, laughing, and the cock continued its thrusting, while cum spurted across my neck and chin and soon filled the channel between my breasts, until I could feel it oozing down past my shoulders.\n\nThe cocks that were working their way into me below settled into a slow rhythm of deep penetration. \"How about all three coming at once?\" she asked, and on cue they stiffened and erupted, flooding my insides with more and more cum, while continuing to pound me as hard as ever. \"Shall I stop?\"\n\n\"No!\" She was so right about what I loved. In real life this would have horrified me, but knowing that I was completely safe with Sazka let me enjoy the fantasy she was fulfilling.\n\n\"You want more?\"\n\n\"Yes!\"\n\n\"Tilt your head back and open your mouth as wide as you can.\"\n\nI did as instructed and the soft, huge head of a hard cock brushed my lips as it slipped into my mouth, and against my tongue, bringing with it the salty taste of precum. I moaned with delight about this mouthful of illusory cock, a very satisfying addition to the three that were fucking me and soaking me inside and out with their thick, warm cum.\n\nThe cock in my mouth joined in, fucking my mouth with short, firm thrusts that gradually penetrated my throat, deeper and deeper. I had sucked quite a few cocks over the years, but had never managed to deep throat one. This cock forced itself into me, stretching my throat. The thick, veiny cock was soon face-fucking me with passion.\n\nI could feel hands tearing at the hair I no longer had, and teeth biting my nipples. Cum splashed across my legs from I-don't-know-where. I squealed as a fifth cock joined in, thrusting into my vagina while the other was still withdrawing, and the two proceeded to fuck me in an alternating pattern.\n\nI had achieved a sustained and ecstatic state of pleasure, but orgasm eluded me, partly because I was a passive participant, unable to do anything but accept what was being done to me. My senses were overwhelmed by too many lips and tongues to count, five endlessly virile cocks, and so much cum it would have soaked the mattress had it been real.\n\n\"I love you,\" Sazka said by my ear. \"Come for us...\"\n\nHer cocks adjusted their rhythm until they were all thrusting at the same time. The three cocks slamming into me from below like a battering ram, stretching me more than ever; the cock in my mouth thrusting down my throat as if to meet the cock thrusting up between my breasts.\n\nUnder this combined assault, I built swiftly to the point of climax. \"Come for me,\" she pleaded. \"Come for me.\"\n\n\"I'm coming!\" I cried as I crested at last, clamping down on the three cocks that continued their synchronised fucking.\n\n\"Keep your mouth open!\" she hissed, and I did. The illusory cock pulsed between my lips, flooding my mouth with cum that I was too distracted to deal with. The blissful intensity of my orgasm was beyond anything I had ever experienced. Again and again I contracted, waves of pleasure echoing through my flesh, continuing as if there would never be an end to this sexual nirvana.\n\nBut an end there was. I lay convulsing in post-orgasmic bliss, the many cocks and tongues and lips all gone, save for one mouth that licked the cum that had spilled down my cheeks, feeding it to me, tender kiss by tender kiss.\n\n\"I love you, Sazka,\" I whispered between kisses.\n\n*\n\nI lay on the bed for maybe an hour, my black body soaking up the sun's warmth, my drifting thoughts interrupted only by Sazka's intermittent kisses. Standing in front of the mirror, I studied the smooth perfection of my alien skin.\n\nThere was nothing to suggest the woman within had just been gang-banged and covered in cum. There was very little to suggest there was even a human woman within. I looked like a black rubber fetish doll. With white teeth. And blue eyes.\n\nAstonishing eyes.\n\nI had always had blue eyes, but these gleamed an intense and particular blue. A beautiful blue. \"Sazka...\"\n\n\"Yes.\" "
    ],
    "authorname": "AlinaX",
    "tags": [
        "dollification",
        "rubber doll",
        "alien sex",
        "symbiont",
        "lesbian",
        "bisexual",
        "invisible lover",
        "gang bang",
        "covered in cum",
        "body modification"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/the-colour-of-love-1"
}
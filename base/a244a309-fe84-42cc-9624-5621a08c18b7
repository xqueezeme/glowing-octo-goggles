{
    "title": "Megan and the Girls' Night Out Ch. 03",
    "pages": [
        "Megan grimaced as abdominal cramps washed over her in waves, her vision blurred and spotted as she tried to fight past whatever sensation was coming over her. She could feel throbbing sensation just above her pubic area, as if her abdominal muscles were contracting over and over. She cradled her belly with one hand and used her other to grip the cushion of Lindsey's couch, trying to focus through what she could only imagine were contractions as she was about to give birth, but to what she had no idea. \n\nOnly a few days prior had Megan spent a passionate night with her coworker, Lindsey, who surprised her with both female and male genitalia. Her body and face appeared feminine and curvy, but she hid beneath her clothes a huge, uncut cock as well as one of the tightest vaginas Megan had ever felt. They made love all night long that Friday night, and ever since, Megan had noticed something...strange. \n\nHer belly had swelled, slowly at first, but more rapidly as this Monday moved along. And along with her swollen belly, she could read the thoughts of those around her, so long as they were sexual in nature. When she woke, her belly was only slightly swollen, and now, after another intensely passionate lovemaking session with Lindsey, she looked to be nine months pregnant, and now, apparently ready to birth whatever was so rapidly growing inside her womb. \n\n\"Megan! MEGAN! What's going on?\" Lindsey shouted, falling to her knees at Megan's side. Her cock, massive even when flaccid, hung heavy and it's head slapped against the floor, her balls bunching up behind it in a heap. \n\nEven with these intense contractions ripping through her, Megan couldn't help but find her partner to be insanely attractive. Her auburn hair, matted with sweat against her face in places, hung shoulder length. Her nose and cheeks were lightly freckled, and her deep brown eyes were so easy to get lost in. Her figure, as far as Megan was concerned, was perfect; slightly slim, with a small tummy, medium sized perky breasts, with wide hips and a round, shapely rear end. And of course, her thick, long cock, covered in foreskin, with a trail of nearly trimmed pubic hair that ran from the top of her cock to her belly button. \n\n\"Whatever I'm pregnant with...whatever it is...wants out...\" Megan struggled to speak through the sensations she was experiencing. \"I'm going to give birth...I think.\"\n\n\"I can take you to the hospital! Let's get you up!\" Lindsey said, reaching for Megan's hands to help her up. \n\n\"No...there's no time,\" Megan said breathily. \"It's happening now!\"\n\nMegan turned herself to lean back against the bottom of Lindsey's sectional, spreading her legs wide and arching her back as best she could. She was covered in sweat, her naked body glistening. Her oversized belly traced with light stretch marks, and a deep brown line ran vertically from her pubic area to the top of her stomach, crossing her belly button. Her normally large breasts now even more swollen, with dark areolae and fat nipples, hung heavy atop her stomach. Megan's blonde hair clung to her face and neck, pulled back into a messy ponytail, and her piercing blue eyes glazed over as she focused on her birthing. \n\n\"Oh my god,\" Lindsey said, moving herself between Megan's legs. \"What are we supposed to do?\"\n\n\"I don't know,\" Megan replied. \"But I feel like I need to push...\" An intense pressure built at the back of Megan's vagina, and she could feel the throbbing sensation in her belly become more intense. She closed her eyes and leaned her head back, gritting her teeth as Lindsey took her hands. She squeezed her partner's fingers hard as she bore down. \n\n\"Aaauuugghhh! Fuck!\" Megan cried out, pushing hard, feeling something begin to breach the back of her vagina, something large and hard. She could feel her canal stretching and burning as something made its way into it, her pushing forcing it further along. \n\n\"I can see...something? Something is coming out!\" Lindsey said excitedly, her words sounding incredibly distant to Megan, as if she were in another room. \n\nMegan bore down as hard as she could, feeling something press hard against her opening, her muscles burning and her opening feeling stretched. She heard a wet splattering sound, and almost as soon as she had, she felt her pussy opening burn intensely before something massive passed through her, and a thumping sound on the floor between her legs. Lindsey let go of her hands and Megan opened her eyes to look at what had just birthed from her vagina. \n\n\"Megan...it's an egg...\" Lindsey said, reaching forward to lift a large, light brown egg off the floor. It was about the same size as a cantaloupe at its base, tapering to a slight point. It was covered in thick, white cream and viscous clear fluid, the combined juices of Megan's pussy and womb, and Lindsey's sticky spunk. \"It's so heavy!\"\n\n\"I can't believe that huge thing just came out of me,\" Megan said, breathing hard. She tried to catch her breath, wiping her forehead to keep sweat from dripping into her eyes. She leaned back against the sectional when she felt another sharp contraction in her womb, and the same pressure against her cervix again. \n\n\"Uggggh, oh no...\" Megan moaned out, \"there's more...\" \n\n\"More?!\" Lindsey exclaimed, putting the egg down gently on her couch before grabbing Megan's hands again. Megan took them and gripped them hard, feeling another egg begin to breach her canal. \n\n\"Fuuuuuuck!\" Megan screamed as she bore down on the second egg, spreading her legs wide and lifting her ass off the floor. Her toes curled as she felt her pussy stretch to fit the second egg out of its opening, this one feeling larger than the first. She looked down to see her labia pulled wide across the hard shell of a dark brown egg, bulging her genitals out. She pushed hard, watching her pussy gape to accommodate the largest object she had ever had inside her. As she pushed, she forced some of her juices out of her, from underneath the egg, in a thick spray across the floor, covering the hardwood in her fluids, already wet from her first egg birth. \n\nServing almost as a lubricant, her squirt helped move the second egg along, and with one final push, Megan passed egg number two out onto the floor with a heavy thud. Without missing a beat, Lindsey grabbed it, this one darker and larger than the first, and placed it gently next to the smaller, lighter colored egg on the sectional. \n\n\"Are there any more?\" Lindsey asked, wiping her hands against her thighs, smearing Megan's juices against her skin to try and clean them off. She smiled in a way that reminded Megan of a proud father, and Megan couldn't help but smile back, her breathing still heavy. \n\n\"I think so...I still feel pressure,\" Megan said, taking a chance to catch her breath. \"Can you get me a towel? I'm soaked over here...\"\n\n\u2014\u2014\u2014\u2014\u2014\n\nAfter what felt like an eternity, Megan passed what she believed to be the last egg inside her womb, and now four in total sat in a thick film of sex fluids on Lindsey's sectional. The largest of the group was the second and darkest she passed, and the other three were all a similar, slightly smaller size and color. Megan and Lindsey stood, arms around each other, in front of the four eggs, equal parts confused and surprisingly overjoyed. \n\n\"We made those,\" Megan said, turning to kiss Lindsey. The pair kissed deeply, Lindsey sliding a little tongue into Megan's mouth, the two pressing sweat soaked bodies together. Already Megan's belly began to shrink, quicker than she imagined, and she only appeared slightly pregnant now. Her breasts still felt incredibly heavy and full, and her nipples still meaty and dark. \n\n\"We absolutely did,\" Lindsey said, when the pair's kissing finally broke off. \"The question is, what are they?\"\n\n\"Eggs, obviously!\" Megan said, and the two girls shared a heavy laugh. \"I'm no biology expert by any means, but I've never heard of a woman laying eggs before.\"\n\n\"Neither have I,\" Lindsey said, moving to lift one of the eggs off the couch. She took one of the smaller ones and hefted it, and then handed it to Megan. \"And to have them grow so quick, too. This is so fucking bizarre.\"\n\n\"Have you ever had this happen before?\" Megan asked, taking her egg from Lindsey. It was indeed heavy, probably around three pounds or so by the feel of it, and the shell was hard with a slight give to it. The egg was practically dripping with the girl's combined cum still, and was warm to the touch. \"Like, with anyone else you've been with?\"\n\n\"No, not that I ever knew of. Then again, I never, you know, came inside of anyone before,\" Lindsey said, almost coyly. \"I've always used a condom, and usually I burn my partner out before I can finish anyway. I'm too big for most, I guess haha!\"\n\n\"So, I'm the first girl you ever fucked raw?\" Megan said, trying and failing to hold back a smile. \n\n\"Uh, yeah, you are,\" Lindsey said, smiling back. \"I hope that's okay?\"\n\n\"I'm honored to be the first you blew a load inside of hehe!\" Megan said, giggling. \"And they certainly were large loads. I was just wondering in case someone else may have experienced the same thing I did.\" \n\n\"No one ever said anything like this to me, that's for sure! And to be honest, I haven't had many sexual partners anyway. I doubt something this...insane would have gone by quietly.\"\n\n\"True, it's not every day someone gives birth to eggs after being pregnant for just a few days.\" Megan gently placed the egg back down on the couch with the others. \"You're never going to get this thing clean now.\" \n\n\"That sectional has seen more these few days than I think any other couch has.\" Lindsey said, sighing. \n\n\u2014\u2014\u2014\u2014\u2014\n\nMegan showered after the girls did their best to wipe up the mess Megan made on the floor and sectional. They placed the eggs in an old dog bed Lindsey had in her closet to keep them safe for now. And to keep them from ruining any more furniture. \n\nMegan's head felt much clearer than it had all day, and as far as she could tell, that pervasive voice in the back of her mind was gone. She felt surprisingly good, all things considered, and her body was quickly going back to normal. Just as fast as she had shown her pregnancy it faded away, leaving only the slightest of bellies and a vagina that felt overused and stretched. Her breasts hadn't gone down in the slightest though, and felt swollen and heavy. Aside from that, she couldn't even tell she had gone through the day's ordeal. \n\nShe put on some of Lindsey's clothes while her old outfit was in the wash, alongside a few towels they used to clean up, and sat at Lindsey's dining room table. She wore a pair of yoga pants, a bit loose but comfy, and a baggy sleep shirt (nothing Lindsey had could accommodate her oversized bust.) Lindsey came into the room with a towel wrapped around her hair and her laptop, dressed in comfortable pajama pants and another athletic top, fresh out of the shower herself. The pair was a sweaty, slimy mess after Megan's birthing experience. \n\n\"Alright, so let's really get down to it this time and figure this thing out,\" Lindsey said, setting her laptop down next to Megan. \"There has to be SOMETHING on the internet about this.\"\n\nIt took much longer than either girl expected to find a few vague posts that pointed them in the right direction. They found a reddit thread buried with very few replies titled \"Post Futa Sex - HELP!\" where a woman explained very similar symptoms to what Megan herself experienced; rapidly progressing pregnancy, invasive sexual thoughts, and the perception of being able to read the sexual thoughts of those around her. The thread itself didn't offer much help, but there were a few links to other sites. \n\n\"What's 'futa'?\" Megan asked, turning to Lindsey as she clicked through the post. \"I never heard that term before.\"\n\n\"It's a slang term, used to describe someone like me. I don't really like to use it, but the internet does fairly often.\" Lindsey said, with a slight frown. \"I think it's short for futanari, it means something in Japanese.\" \n\n\"Oh, sorry,\" Megan said, sensing she hit a nerve. \n\n\"No, don't be! I just don't like it, is all. It's such an ugly term, and it's so sexualized. Men use it to describe these fantasy girls with both parts, who only think about fucking and cumming.\"\n\n\"You mean, you think about more than fucking and cumming? Could have fooled me,\" Megan said, giving Lindsey a devious smile. \n\n\"You bitch,\" Lindsey said, laughing. \"It's not my fault you're so god damn sexy.\" \n\n\"Anyway, what did you find?\" Megan asked, leaning closer to the screen. Lindsey shook her head in mock disgust, and went back to her laptop. \n\n\"It seems like it's a blog, someone else who has dual-genitals like me,\" Lindsey said, scrolling down the page. \"Someone named Bianca, by the looks of it, a self-proclaimed expert. There's a lot of info here.\"\n\n\"Look, right there, she talks about fertility,\" Megan said, pointing to a section of text on the screen. \n\n\"Dual-genital individuals, from what I can tell and from my experience, are both infertile yet highly likely to 'impregnate' their partners.\" Megan read aloud, \"What I mean, is that while dual-genital persons cannot cause their partner to be pregnant with an actual human fetus, they can cause them to become 'pregnant' with a cluster of egg-like objects.\"\n\n\"That's so bizarre,\" Lindsey said, furrowing her brow and leaning in closer to read alongside Megan. \"I can't believe I never knew this...\"\n\n\"Did your doctor ever tell you anything about this?\" Megan asked. She noticed that Lindsey's face grew a bit red at the question. \n\n\"I, uh, don't really go to the doctor much. When I was younger my parents used to bring me all the time for checkups and stuff, but when I got older I sort of stopped,\" Lindsey confessed. \"It was never simple, they always wanted to run tests and perform exams, to get semen samples and vaginal swabs. They were all trying to make a name for themselves, I think.\" \n\n\"Are dual-genital women really that rare? I mean, I know I never heard of it, but I can't imagine the medical field lacking knowledge.\" \n\n\"I guess we are, I mean, they always acted like I was one in a million. So I just stopped going. I was tired of the hassle. I don't know a lot about myself, really, as far as biology goes. My downstairs parts work, or at least they seem to ha ha, so I don't worry much about the details,\" Lindsey said, blushing a bit. \n\nMegan put her hand on Lindsey's, and leaned to kiss her on the cheek. \"Don't worry, we'll figure it out together.\"\n\n\"You're honestly the best, Megan,\" Lindsey said. \"I'm glad I have you to work through all this with.\" \n\n\"And I'm glad I have you,\" Megan said. \"I mean, if I didn't, I'd be in my apartment right now, eggs on the floor, with no idea where to begin.\" \n\n\"You also wouldn't have been pregnant with eggs in the first place, so maybe you shouldn't be THAT glad!\"\n\n\"You're not wrong, not wrong at all!\" Megan laughed. She wouldn't have traded her experience this past weekend, and even today, for anything, all things considered. She truly felt a bond with Lindsey, even after such a short period of time, and could feel her stomach flutter at the thought of what their relationship was. And what it could be. Her thoughts wandered and snapped back to the situation at hand; four cantaloupe-sized eggs sat in a dog bed in the living room, eggs that she birthed. \n\n\"Let's get back to it though, let's figure out what these eggs are,\" Megan said, feeling some of her anxiety return. \"What does the blog say they are?\"\n\n\"Says here that the author believes them to be a way for dual-genital individuals to reproduce, though not in a traditional sense,\" Lindsey said, moving the laptop slightly to get a better look at the screen. \"The author believes that because my condition is considered a genetic mutation, infertility is a way to keep me from reproducing. But that the genetic desire to reproduce is heightened, and that this may have been an evolutionary way to circumvent that infertility.\"\n\n\"So, what exactly does all that mean?\" Megan said, feeling herself grow more confused and unsure as the couple researched. \n\n\"A lot of the science they talk about is going over my head, but basically the eggs you laid are attempted pregnancies. Your body shelled them off to protect your uterus from accepting them. The author says my sperm is so potent that it can actually cause you to ovulate, which is why you've laid four of them.\"\n\n\"Holy shit...\"\n\n\"I know, this is wild! She says the eggs will never do anything other than eventually shrivel and decompose, in essence the same way the eggs we buy from the store would. They won't hatch, they don't need to be taken care of, nothing.\"\n\n\"So, what do we do?\" Megan asked. \"Just toss them out? Feels...unceremonious to me.\" Her heart felt a little pain at the idea. Even though they were inanimate objects, Megan felt a bizarre motherly connection to them. \n\n\"Let me read some more,\" Lindsey said, scrolling down a bit further on the blog page. \"Okay, here we go. The eggs contain some concentrated genetic material, a sort of mutagen, that your body was attempting to prevent from taking root inside you. Now, since you've birthed them, it seems that...huh.\"\n\nWhat? It seems that what?\" Megan said, leaning over to try and read what Lindsey saw. \n\n\"Sorry! It seems that consuming the eggs could cause the same genetic mutations I was born with...\"\n\n\"Wait, so you're telling me that if someone ATE one of my eggs\u2014our eggs\u2014that they would grow a cock?!\" Megan said, eyebrows raised. \"That's unbelievable.\"\n\n\"Meg, your pussy just shot out four eggs after being pregnant for all of a weekend. And THIS is where you draw the line?\" Lindsey said, turning to Megan. \n\n\"Well, what about the voices I was hearing? What was that all about? And my sex drive, it was insane. Do they say anything about that?\" Megan said, choosing not to respond to Lindsey's question. \n\n\"Lemme see. Uh...yeah, so here's what they say,\" Lindsey cleared her throat and began to read from her laptop screen again. \"The mutagenic nature of the pregnancy causes a mild psychic link to occur with the mother to the growing eggs, which require sexual energy to feed. The mother will have an increased sex drive, almost insatiable, until the eggs are fully developed and ready to be laid. During which time, the mutagen will serve as a beacon for sexual thoughts and desires, allowing the mother to become aware of them through mild psychokinesis. These seem to occur only with surface thoughts and only in regards to sexual desires involving or directed towards the mother.\"\n\n\"Psychokinesis?\" Megan asked, feeling herself grow a little hot in her face. She mulled over what she heard, and words like mutagen and psychokinesis caused her concern. And to be called a mother...a mother to those things? She started to lose focus and felt distant, almost outside of herself. \n\n\"I think it means being able to read thoughts, which is what you said was happening, right?\" Lindsey said, never taking her eyes off the laptop. She was reading something more, Megan could tell, and was fascinated by it. \"Wow...\" \n\n\"What, Lindsey?! What are you reading?!\" Megan said, feeling herself getting frustrated. This was her body, her eggs she laid, her dealing with mutagens and psychokinesis and whatever else this blog talked about. And Lindsey was so nonchalant about the whole thing, like this was all some interesting science experiment to her. \n\n\"I'm sorry, Meg, really. I just, I never knew this stuff about myself and...I'm sorry. Here, read along with me,\" Lindsey said, and turned the laptop more towards Megan. \n\n\"It's okay, it's just...all these words are scaring me and I feel so strange about all of this. I know this is all so interesting to you, but I can't wrap my head around all this so easy! I mean, before this weekend I didn't even know dual-gendered women were even a thing!\" Megan said, feeling bad already that she raised her voice to Lindsey. \"This is all really weird and scary and I just need a little comfort, is all.\" ",
        "\"It's all fine, you're fine, I'm fine, I promise,\" Lindsey said, leaning in to hold Megan. \"You got pregnant, laid some eggs, and now we know what they are. I know it sounds crazy, but we're over the mystery now, for the most part.\"\n\n\"Yeah, you're right...\" Megan said, leaning into Lindsey. \"You sure you think I'm okay?\"\n\n\"I think so, I think the 'worst' of it is over,\" Lindsey said, her voice growing reassuring. \"I think we need to figure out what to do next with the, you know, eggs. The blog says they're going to start to emanate the same sort of psychic tendrils they did when they were inside you. But now they're going to look for a 'host' of sorts, someone to consume them.\"\n\n\"You've got to be kidding me, so they're going to make us eat them?\"\n\n\"No, not us, we're their parents, for lack of a better term. We have their DNA in us, so we aren't exactly the most suitable for them. They want to mutate new, fresh DNA.\" Lindsey looked towards the eggs, sitting shiny and damp in the old dog bed. \"And I know this sounds really weird, but I want to help them...\"\n\nMegan felt the same desire, like a mother who needed to care for her children. There was a bond, psychic, emotional, something, that Megan felt with those eggs. She wanted someone to consume them too, to be given their gift. She could almost hear it in the back of her mind again. \n\nMegan thought to herself, back to what happened earlier in the day. How indescribably horny she had been at work, how she lusted and longed for Sara, her blonde haired bimbo of a coworker. How incredible it felt to have her eat her pussy, to make her orgasm in that small bathroom stall. And how, right before Sara left and went back to work, she told Megan that she wanted the favor returned.\n\n\"I think I have an idea. I think I know what we can do with them...\" Megan said, looking at the bed full of eggs. \n\n\u2014\u2014\u2014\u2014\u2014\n\n\"I don't know, Meg. Are you sure this is, you know, ethical?\" Lindsey said, standing at her kitchen counter. A few days had passed since Megan birthed four eggs, and her body had almost completely recovered. The only remaining sign that anything had happened was her large, swollen breasts and dark, thick nipples. \n\n\"Maybe not completely ethical,\" Megan said, shrugging her shoulders. \"But Sara is an openminded woman. I'm sure she'd be down for a new experience.\" \n\nLindsey sighed, and said, \"on the plus side, that Bianca woman's blog said that one egg wouldn't cause any permanent changes. So, I guess we can see how she reacts and go from there?\"\n\n\"Absolutely, just one egg is all. Nothing permanent. No harm done,\" Megan said, grabbing one of the smaller eggs from the top of the counter. She held the large egg in her hands, feeling something inside it slosh around. \"You ready?\"\n\n\"Let's do it...\" Lindsey said, and crossed her arms in front of her. \"This just feels...I don't know. I want our eggs to do what they need to do, but I just feel like there should be some consent.\" \n\n\"Relax, I feel good about this,\" Megan said, grabbing one of Lindsey's kitchen knives. She lifted the egg above a protein shaker, one of three identical ones that the duo had purchased that afternoon. \"She's a cool girl, I think she'll be okay with this.\" \n\nMegan slid the knife into the outer flesh of the egg. It pierced it surprisingly easy, and she twisted the blade to make a hole in the shell. Almost instantly she could smell the contents of the egg; a sweet scent, almost syrupy, with the slightest hint of musk. It almost smelled like\u2014\n\n\"It almost smells like your pussy,\" Lindsey said, inhaling deeply. \"I'm half tempted to drink it myself.\" \n\n\"Well, there are three more, maybe we can experiment ourselves later,\" Megan said, smiling slyly. \"But this is for our guest.\"\n\nMegan pulled the knife out of the egg and tipped the contents into the protein shaker. It poured like a thin maple syrup, and was a milky, hazy-white color. She easily filled the protein shaker with only a little room to spare. She dropped the empty shell into the waste bin and screwed the top onto the shaker. While she finished with Sara's drink, Lindsey prepared the other two shakers with an actual protein powder mixture. The color of the real drinks and the egg container didn't match even remotely. \n\n\"Fuck,\" Lindsey whispered to herself as she finished shaking the two real drinks. \"I hope she doesn't notice.\"\n\n\"We'll just tell her it's a different flavor,\" Megan said, swirling the egg fluid around in the shaker. She couldn't help but wonder how delicious it would be. It smelled wonderful, so erotic and sensual, maybe just a little taste wouldn't hurt...\n\n\"I think she's here!\" Lindsey said, turning towards her front windows. Megan saw headlights pulling into Lindsey's driveway and could hear the sound of a car engine. \"Do I look okay?\"\n\nMegan gave Lindsey a once over, her baggy green sweater hanging low, covering the bulge that would be incredibly prominent through her tight yoga pants. She looked comfortably sexy, and Megan couldn't help but lust after her in that moment. \n\n\"You look great, Linds! What about me? Do I look ready to work out?\" Megan said, putting her right hand on her hip and her left under her chin in a mock model pose. She had a blue athletic top on that accentuated her large breasts, and a pair of black yoga pants to show off her curvy hips. \n\n\"You look absolutely delicious,\" Lindsey said, giggling. \"Work it, girl, work it.\" \n\nA knock at the front door stopped the pair's joking around. Lindsey cleared her throat, took a deep breath in through her nose, and turned to open the door. Megan could feel her heart racing but did her best to play it cool. \n\n\"Hey girl, hey!\" Sara said as Lindsey swung the front door open. \"Your house is adorable! I didn't know you lived so close to the office!\"\n\n\"Aw, thanks! Yeah, I'm super close,\" Lindsey said, motioning for Sara to step inside. \"Make yourself comfortable, please!\"\n\n\"Hey, Sara! Glad you could make it,\" Megan said from the kitchen. She could feel her face grow warm as she thought back to what happened in the lady's restroom a few days earlier. How Sara absolutely devoured her pussy, obliterating her mind with an intense orgasm. And how now, as casually as they could, they were going to feed her an egg that would likely cause her to grow a cock.\n\n\"Hey, girl! Of course, I had no idea you guys did home workouts together! You should have invited me a long time ago,\" Sara said, putting her purse down on Lindsey's coffee table. She wore a pair of tight gray yoga pants that showed off her ample rear end and fat camel toe, and a v-neck tee and sports bra that made her already smaller breasts appear even less prominent. Her dyed blonde hair was pulled back into a bun, showing off her brown roots. Even when she didn't try, she was still very attractive, Megan thought. Megan's pussy throbbed between her legs, and she hoped that the wetness she felt wouldn't seep through her pants. \n\n\"Oh absolutely, all the time,\" Lindsey said, closing the door and making her way into the kitchen with Megan. \"We work out together at LEAST once a week.\"\n\n\"I didn't even realize you two were friends! Well, I'm glad you finally got around to sending me an invite!\" Sara said, and Megan caught her eyes moving over the protein drinks on the table. Sara's eyes seemed to focus on the far right drink, the one made from Megan's egg. \"Did you girls whip up some protein for our workout?\"\n\n\"Uh, yeah, we did!\" Megan said, grabbing the egg drink and handing it to Sara. \"A special recipe we've been toying with. Give it a try.\"\n\nMegan glanced at Lindsey, who looked nervous, then back at Sara. She sniffed the opening of the container, closed her eyes and sniffed again, and began to drink. Over Sara's shoulder Megan saw Lindsey's eyes go wide as the girl drank quickly, sucking down as much of the egg fluid as she could. Within moments she drained the shaker, and began to spin the lid off it. \n\n\"My god, what was that? It was delicious,\" Sara said, using her finger to get the last remnants of the drink from the sides of the container. \"You'll have to teach me the recipe.\"\n\n\"Yeah, of course, we can show you,\" Megan said, smirking. Lindsey shook her head and smiled. \"Do you want to get started, Sara?\"\n\n\"After you, ladies!\" Sara said, finally giving up on the protein shaker. She put it down on the counter, after having cleaned the container out with her fingers. \"Where do you all workout?\"\n\n\"I have a spot in my spare bedroom, I have some mats down on the floor. Come on, I'll show you,\" Lindsey said, motioning Sara to follow her. \n\nMegan trailed behind, grabbing the two real protein drinks and taking the opportunity to check out Sara's round ass in her yoga pants. She watched the cheeks sway and bounce as she followed Lindsey, and as she did, she turned over her shoulder to look back. She popped her ass out a bit more as she walked, and smirked at Megan. \n\nSara took her place at one of the padded mats, and Megan stood next to her. Lindsey made her way over to the television at the front of the room and turned it on, getting an exercise video ready from YouTube. Megan caught Sara checking her out, and felt herself grow more turned on. No matter what happened with the egg the duo fed Sara, she knew something incredibly erotic and sexy was going to take place tonight. Her pussy was salivating inside her panties, and she could smell her sex through the fabric of her pants. She wondered if the other girls could too. \n\n\"I think this will be a good one,\" Lindsey said, taking her place on the other side of Megan. \"It looks like it has a lot of good stretching exercises.\" \n\nThe girls followed the instructions on the YouTube video, doing warmup stretches and introductory exercises. Megan felt herself working up a light sweat, and felt her crotch become incredibly damp, a mix of her sweat and pussy juices. The scent of her womanhood was prevalent, and each time she bent close to her genitals she could smell her erotic flavor. She wondered how much longer it would be before the egg she and Lindsey fed Sara would take effect. Her arousal couldn't take much longer, her anticipation building beyond belief. \n\nThe video played for about thirty minutes before Megan heard Sara gasp lightly and pause. She turned to her left to see Sara put her hand on her stomach, her brow furrowing and her face looking concerned. Sweat beaded up on the blonde's forehead, and her face grew red. \n\n\"You okay?\" Megan said. \"Your stomach bothering you?\"\n\n\"I don't know, I feel weird,\" Sara said, picking up her water bottle and taking a drink. \"It feels like heartburn, but, like, in my lower belly.\"\n\n\"Do you wanna go sit down?\" Lindsey asked, taking Sara's arm and guiding her out of the spare room. Megan followed, and Lindsey turned to look back at her, silently mouthing \"I think it's happening!\"\n\nSara sat on the sectional in Lindsey's living room and laid back, putting one hand on her belly and the other draped across her forehead. She was sweating profusely. \n\n\"Maybe you pushed yourself too hard?\" Megan asked, knowing full well the video wasn't in any way intense. \n\n\"I dunno, maybe?\" Sara said, leaning forward a bit and grimacing. Her face grew dark red and sweat practically dripped from her brow. She grunted in pain and put her hands over her crotch. \"Something...something isn't right,\" she groaned, her teeth clenching. \n\n\"Is it your groin?\" Lindsey asked, standing in front of Sara alongside Megan. The two girls watched Sara intently, wondering what exactly this \"mutagen\" in their eggs was going to do. \n\n\"Ughhhhh, yeah...\" Sara moaned. \"My crotch is on FIRE.\" \n\n\"You need to use the bathroom?\" Lindsey asked, looking concerned. \"It's right down the hall on the right.\"\n\nSara stood up wordlessly, groaned loudly, and stumbled her way into the bathroom. She shut the door behind her and Megan heard her groan again. \n\n\"Oh my god, I think it's working!\" Megan said feeling butterflies in her stomach. Her pussy was soaked inside her pants, and she could feel herself getting warm in the face. \"I wonder how long it's going to take?\"\n\n\"Not long, from what I read,\" Lindsey said, sitting on the couch. \"That Bianca woman said in her blog that it should only take a few minutes for the full effect once the mutations begin. I can't wait to see!\"\n\nMegan sat on the couch next to Lindsey and felt herself absolutely overcome with sexual desire. She put one leg over Lindsey's lap and leaned in close to her face. She could smell the sweet sweat that clung to Lindsey's neck, her natural pheromones filling her nostrils. \n\n\"You know, I almost feel like a proud mother or something,\" Megan said, nuzzling her face into Lindsey's neck. \"She's consumed our egg, and now she's going to be changed by us. Isn't that...sexy?\"\n\n\"So fucking sexy, Meg,\" Lindsey said, turning towards Megan and kissing her passionately. Lindsey wrapped her arms around Megan and held her close as the couple made out on the sectional. It was where it all began, where the pair made love for the first time, only a few days ago. And now, they kissed and waited for Sara to become...something different. \n\n\"So, that Bianca woman also said Sara would be INCREDIBLY horny once the process completed. Like, irresistibly so,\" Lindsey said, breaking away from their kiss. \"When she comes out, she's going to be ready to go, and she's going to need to cum.\"\n\n\"Oh, Linds, I need to cum too. I've been ready all night long,\" Megan said, her eyes half closed in a state of almost pure lust and eroticism. \n\nLindsey slid her hand up Megan's thigh, making her way towards her crotch. Megan spread her legs to give her access, and Lindsey rubbed her through her pants. Megan could hear how wet she was as Lindsey massaged her, and could smell her sex and sweat in the air. She moaned loudly into Lindsey's mouth as they made out, bucking her hips as she was masturbated. \n\n\"I'm so horny too, babe,\" Lindsey whispered, pulling away slightly from the kiss. \"My cock is throbbing...\"\n\n\"Put it in my pussy,\" Megan moaned, leaning back and making a move to slide her pants down. \n\n\"What about Sara?\" Lindsey asked, turning over her shoulder to look towards the bathroom. \"She might come out soon.\"\n\n\"And when she does, she can watch you plow my pussy. You said she'd be horny,\" Megan said, pulling her pants down over her ass, taking her panties with them. The scent of her wet cunt wafted up from between her legs, and Lindsey inhaled deeply. \n\n\"God, your pussy always smells so good,\" Lindsey said, pulling her pants down as well. She lifted her shirt up high enough to reveal her engorged cock, so incredibly massive and swollen. Her head throbbed and dribbled precum, and Lindsey didn't even bother to completely remove her pants. She had them around her knees as she crawled towards Megan, who had finally fully removed her own pants, tossing them to the floor in a damp pile. \n\nMegan spread her legs, showing off her glistening pussy topped with a trimmed tuft of pubic hair, and Lindsey grabbed her ankles to keep her wide open. Without using her hands, Lindsey pressed the head of her cock against Megan's slit, which was practically dripping with her wetness. Megan reached down and grabbed Lindsey's thickness, steadying it against her hole as her partner pressed the enormous head into her vagina. \n\n\"Fuck you're so big, baby,\" Megan moaned, feeling the familiar and so incredibly enjoyable burning and stretching between her legs as Lindsey entered her. \"I love your cock.\"\n\n\"She loves you,\" Lindsey moaned, her head thrown back as she thrusted the tip of her cock in and out of Megan's slit. With how wet Megan was and with how much precum Lindsey's cock produced, Lindsey was able to bury inch after inch of her colossal cock into Megan's snatch easily. Her cock glided in and out of her tight partner, the couple moaning loudly as they fucked on the sectional. Megan gripped Lindsey's cock with her pussy as she felt her partner thrust hard into her, her cock incredibly rigid and thick. \n\n\"Just don't cum, baby,\" Megan moaned, her eyes rolling back in bliss. \"You need to save it.\"\n\n\"It's going to be so hard, Megan,\" Lindsey replied, her back arched as she worked her hips against Megan's pussy. \"You're so tight!\"\n\nMegan felt Lindsey's cock throb as it slid in and out of her, the smell of their sex heavy in the air. She lifted and removed her shirt, revealing her large breasts tucked inside her sports bra. They bounced hard as she lifted herself up, unzipping the front and removing it, allowing her huge tits the freedom they craved. Lindsey's eyes locked onto them, as if she were in a trance, watching them bounce up and down with each thrust of her colossal cock. \n\nLindsey leaned down between Megan's legs, letting go of her ankles, and placed her lips on Megan's left nipple. She started to suckle at her breast as she fucked Megan's hole, and Megan wrapped her legs around her partner to hold her in close. Megan was practically screaming in pleasure as Lindsey worked her tongue and lips across her nipple and gyrated her cock inside of her cunt. She closed her eyes and grabbed the back of Lindsey's shirt, gripping her hard. \n\nMegan didn't even notice the sound of the bathroom door opening and the soft footsteps that made their way into the living room. How long Sara must have been standing there, watching the pair copulate, Megan had no idea. But suddenly she heard someone clear their throat. \n\n\"You couldn't even wait for me?\" Sara asked, standing fully naked next to the sectional, body glistening with sweat, small breasts perky and pink. Megan and Lindsey stopped fucking, shocked and startled by their observer, and they both turned to look at Sara. \n\nMegan stared down at Sara's new development, her mouth hanging open as she did. From between Sara's legs stood a fully erect penis, close to a foot in length and very thick around, terminating in a large, bulbous bell end. Beneath it hung a pair of pink and heavy looking testicles, the left hanging slightly lower than the right. Sara's crotch was completely hairless, and Megan could see thick veins throughout her cock, weaving a pattern and ending at her pubic mound in thick ribbons. \n\n\"Sara...\" Megan murmured, utterly in awe at how perfect Sara's cock was between her legs. It was thick and uncut, and it looked ready to fuck. \n\n\"What a beautiful gift you both gave me,\" Sara said, her voice sounding dreamy. \"Your egg, it told me everything. Well, it showed me everything. You greedy whores have been having so much fun without me.\"\n\n\"We should have told you before, asked your permission,\" Lindsey said, still balls deep inside of Megan's slit. \n\n\"No,\" Sara said, stepping closer. Her cock hung inches away from Lindsey and Megan's faces. \"I wouldn't have believed you. This would have been too much to handle.\"\n\n\"You mean...you're happy you have a cock?\" Megan asked, breathing hard. She could feel Lindsey's cock throbbing inside of her pussy, getting even harder somehow. She must be so turned on, Megan thought to herself. \n\n\"I'm so thrilled I can experience this,\" Sara said, looking down at Megan with fuck-me eyes. \"And even happier I have the two of you to show me all the pleasures my new genitals can bring me...\"\n\n\"Come closer,\" Megan said, looking up at Sara. \"We can show you so many new things.\"\n\nSara obliged and moved even closer, the head of her cock bobbing against Megan's lips. She opened her mouth and began to suckle and lick at the underside of Sara's cock, focusing on the frenulum, the soft band of flesh connecting foreskin to cock head, and the head itself. Lindsey started to thrust in and out of Megan again, her cock absolutely massive and solid, thicker and harder than Megan had ever felt her before. Megan moaned into the head of Sara's cock, tasting the salty, sweaty flesh and taking in the scent of her girl-cock. Sara moaned loudly, and ran one hand through her hair. With her other, she wrapped her fingers around the base of her cock, holding it steady while Megan worked on the underside of her mushroom tip. ",
        "Megan opened her mouth wide to fit the bulbous bell end into it, her eyes closed in pleasure as she began to work the head of Sara's cock. All the while, Lindsey thrust her cock in and out of Megan's slit harder and harder, her motions gaining intensity and savagery. Megan felt her muscles tense between her legs as Lindsey fucked her harder and faster than ever before, and she bobbed her head faster on Sara's cock. Megan heard her two partners moaning loudly as their cocks found a home inside of her, and the thought of pleasing such meaty thick cocks with her holes drove her past the point of no return. \n\nSara's cock fell out of Megan's mouth as she screamed in orgasmic bliss, her legs wrapping tightly around Lindsey as the walls of her vagina gripped the impossibly thick cock inside of it, relaxing only to grip it again as her body convulsed. Her head rolled back as she came on Lindsey's cock, her pussy throbbing with pleasure, her nails digging into Lindsey's hips. Megan's body glistened with sweat as she squirmed beneath her lover, her back arching and her breathing stuttering as she finally began to come down from her intense climax. \n\nMegan opened her eyes to see Sara stroking herself, her lower lip tucked into her mouth as she watched Megan cum. Lindsey had her entire length buried inside of her, stopping her thrusts to let Megan recover, and judging from how hard her cock was throbbing and twitching, to keep herself from climaxing. \n\n\"Does it feel good, Lindsey?\" Sara asked, turning to look at the she-cocked woman. \"Does it feel good to have her cum on your cock like that?\"\n\n\"It feels incredible,\" Lindsey panted, and Megan could tell from the look on her face that she was trying her hardest not to blow her load. \"She's got such...such a tight pussy...\"\n\n\"Let me feel it,\" Sara said, still stroking herself. \"Megan owes me, not sure if she told you. I ate her pussy in the lady's room and she never returned the favor. I think it's only fair she lets me experience her pussy with my brand new cock...\" Sara smiled wickedly at Megan and Lindsey, moving closer to Megan's legs. \n\nLindsey looked down at Megan, and the same wicked and sly look fell across her face. \"You want to fuck my girlfriend?\" \n\nMegan blushed as she heard the word 'girlfriend' come from Lindsey. She desperately wanted to lean forward and kiss her, to tell her that she was so hoping they could put a label on what they had. Girlfriend. \n\n\"Oh, I do,\" Sara said, running her hand across Lindsey's back seductively. \"Is that okay with you?\"\n\nLindsey looked down at Megan again, raising her eyebrows in a non-verbal question. Megan nodded, still reeling from what Lindsey called her. \n\n\"On one condition,\" Lindsey said, turning to Sara. The pair were incredibly close together, and Lindsey leaned in to whisper something in Sara's ear. \n\nSara blushed and bit her lower lip, before giggling and saying, \"Absolutely.\" Megan could feel Lindsey's cock buck inside of her pussy as Sara replied. \n\nMegan moaned softly as Lindsey backed herself out of her pussy, her vagina feeling incredibly empty as her lover removed her thick, throbbing cock. She watched as Lindsey stood, her enormous member glistening with her wetness, stepping aside and allowing Sara access to Megan's warm, hungry hole. Megan spread herself wider, turning herself towards Sara as she climbed onto the sectional, her cock flexing and bouncing as she readied herself. Sara took her cock in hand and shuffled herself towards Megan's slit. \n\n\"Show me what that new cock can do,\" Megan said, lustfully, as Sara gripped her member by the base, pressing her head against Megan's lower lips. \"Put it in me.\"\n\nSara pushed herself against Megan, and began to slide inside. Megan felt the fat mushroom tip spread her lips open and push inside her tightness, letting out a deep moan as she felt herself getting filled again. Sara's eyes fluttered shut and her body quivered as she began to slide into Megan's hole, her cock flexing and throbbing inside of Megan as it burrowed deeper. Sara's cock was thick, and her head was massive, and the entire length of it throbbed and quivered as she filled Megan. \n\n\"Oh fuck...\" Sara whispered to herself as she bottomed out inside Megan, her swollen balls pressed against the girl's ass cheeks. \"Your pussy feels amazing...\"\n\n\"So does your cock,\" Megan said, wrapping her arms around Sara and pulling her in closer. \"You're going to cum, aren't you?\"\n\n\"I...I think so...\" Sara mumbled, her face bright red as she clenched her teeth. \"It's so hard...not to...\"\n\n\"That's okay,\" Megan cooed, nuzzling her face against Sara's. \"You can cum in me.\" \n\n\"Go ahead, cum in her,\" Lindsey said, squatting down to get face level to the two girls. She looked at Sara with lust and affection, and she reached her hand out to caress her face. \"My first time was quick too.\"\n\n\"Unnnfff...unnngghhh...\" Sara moaned as she made a few shallow thrusts into Megan, her cock absolutely rigid and swollen. Megan worked her hips gently against her partner's pelvis, looking deeply into Sara's eyes as she did. \"Oh fuuuuccckkkk...\" Sara groaned, and Megan felt her partner hit the point of climax inside her. \n\n\"That's it, give it to me,\" Megan moaned as she felt the warm spray of Sara's seed inside of her pussy. The cock inside of her throbbed hard and each time deposited a fresh, hot spray of cum into her. Sara made several shallow thrusts as her orgasm took over her, her balls working hard to dump all their contents into Megan's warm cunt. Megan moaned softly as Sara grunted her way through her first climax through her girl cock, before finally finishing and partially collapsing on top of Megan, face pressed against her ample breasts. \"How was your first time?\"\n\n\"Amazing...\" Sara panted, sweat dripping from her brow as she lifted herself up. \"I didn't make you cum, did I?\"\n\n\"No, but that's okay,\" Megan said, leaning in to kiss Sara gently on the lips. \"You owe me now!\"\n\nThe three girls giggled, and Sara began to slide herself back out of Megan, her cock still seeming to be quite hard and rigid. As she pulled herself free, a warm gush of semen dribbled out of Megan's vagina, slipping between her ass cheeks and onto the sectional. Sara fell back onto the sectional, her cock still flexing occasionally as she caught her breath. \n\n\"Now don't forget what you promised me,\" Lindsey said, getting to her feet next to Megan. A strange new level of lust seemed to radiate off of her, and Megan almost didn't recognize her lover's new appearance. She was so confident, so dominant, so...sexy. Megan felt her chest flutter as she watched Lindsey make her way towards Sara, who giggled and spread her legs, her heavy balls partially covering her glistening wet slit. \n\n\"What did she promise you, Linds?\" Megan asked, smiling hard as she sat up, more cum dribbling from her pussy. She put her hand over her lower lips to try and keep more of it from leaking out of her as she got closer to Sara and Lindsey. \n\n\"She promised me her pussy,\" Lindsey said, looking over to Megan. And the soft, kind, loving partner she was to her showed itself again as she did. She looked into Megan's eyes, and asked, \"if that's okay with you?\"\n\n\"Have fun with her,\" Megan said, smiling hard at her 'girlfriend,' eager to watch what she would do to another woman. Lindsey stroked her magnificent cock, gripping it hard near the head to make it bulge, before sliding her hand back down to repeat the process. She was still slick with Megan's juices, and the veins across her length were massive and pulsing. \"Give her that beautiful cock!\" Megan said, running her fingers across her clit, ready to see what her lover would do to Sara now that it was her turn to fuck. She had a feeling the night was far from over..."
    ],
    "authorname": "BiancaBazongas",
    "tags": [
        "big cock",
        "birthing",
        "dickgirl",
        "extreme",
        "fetish",
        "futa",
        "futanari",
        "growth",
        "lesbian",
        "pregnancy"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/megan-and-the-girls-night-out-ch-03"
}
{
    "title": "Kinky Tales: Love & Pegging",
    "pages": [
        "Summary: Married couple explore anal sex and pegging even more. \n\nNote 1: This is part 2 of a potentially lengthy series about one couple exploring many aspects of their once hidden sexuality. \n\nPart 1 was actually told in two separate versions: \n\nTo read the wife's version read: Kinky Tales: I Pegged my Husband \n\nIn this story, Dani accidentally learns that her husband has anal toys. After a lengthy conversation with her two more sexually adventurous sisters she learns that her husband's anal fixation on himself isn't as rare or disturbing as she thought. As she researches further, she not only gets interested in pegging, but also in anal sex on herself. \n\nTo read the husband's version read Kinky Tales: I'm Pegged By My Wife. \n\nThis much shorter version gets into the mindset of the husband and his insecurities of being a man and also questioning his sexuality, especially in regards to anal sex on himself. \n\nIn both versions, the story ends with a wild night of anal sex on Dani on Friday and a pegging of Chris on Saturday. \n\nThis is what happens the morning after... \n\nNote 2: This is dedicated to: \n\n<ol> <li> The real Chris and Dani, who this fantasy is written about. \n\n</li>\n\n<li> It is also dedicated to all married couples willing to listen to their spouses and their fantasies, whatever they may be. \n\n</li> </ol>\n\nNote 3: Thanks to Robert, goamz86, and Wayne for editing this story. \n\nKinky Tales: Love &amp; Pegging \n\nThe morning after: \n\nI woke up and it was almost noon, which is unheard of. \n\nI rolled over and realized that Chris wasn't in bed beside me. \n\nI recalled last night and the crazy, wild pegging of my husband with people downstairs partying. \n\nI recalled how much I enjoyed doing it and how much he enjoyed being pegged. \n\nBut sometimes, the next day is full of regret. \n\nI felt kind of like when I was in college and had just woke up from a one night stand. \n\nWas it going to be more? \n\nWas it just a one night stand? \n\nChris walked into the room and greeted, carrying a tray of food, \"Good morning, my bride. I thought you may want breakfast in bed.\" \n\nHe had never done this, unless you count ordering room service. Christ, I wasn't even confident that he knew how to use the stove. \n\nSo my response was witty and flirtatious, instantly confident last night was not a mistake, \"So, all I had to do was peg you to get you to make me breakfast?\" \n\nHe laughed, although looking slightly ashamed, \"I guess so.\" \n\nHe put the tray on my lap, sat beside me and asked, looking nervous, \"So, um, did you enjoy last night?\" \n\nTurning into the man briefly, I answered, \"Not really,\" before I took a bite of toast... which was only slightly burnt. \n\n\"Oh!\" He said, looking instantly disappointed, as if I had deflated him faster than a tire running over a nail. \n\nI finished chewing, allowing him to stew in insecurity for a moment before I responded. \"I'm just kidding,\" I smiled, before adding, \"I loved it. Plus, anything that ends with you making breakfast is a worthwhile experience.\" \n\n\"You brat,\" he said, giving a huge sigh of relief. \n\n\"Were you really that worried?\" I asked, looking at his extreme and opposite reactions. \n\n\"It was a crazy night,\" he said, before adding, \"and you'd been drinking.\" \n\nI laughed. \"Oh no, trust me. I knew exactly what I was doing.\" \n\n\"And you did it well,\" he said. \n\n\"Well?\" I questioned. \"I just did it well?\" \n\n\"Sorry, you were amazing,\" he corrected. \n\n\"I better have been,\" I teased. After a pause, I asked, \"Was it what you imagined it would be?\" \n\n\"Even better,\" he said. \"I mean, just giving myself to you so completely was very exciting.\" \n\n\"I have to admit,\" I continued. \"It felt surreal to be on the giving end instead of the receiving.\" \n\n\"Did you like it?\" Chris asked. \n\n\"I did,\" I nodded. \"I felt powerful and in control.\" \n\n\"Funny, I enjoyed the complete lack of control,\" he said. \"I was completely at your whim.\" \n\n\"As you always should be,\" I smiled. \n\n\"Yes, ma'am,\" he nodded. \n\n\"Why don't you give me the ultimate breakfast in bed?\" I asked. \n\n\"What would that be?\" He asked. \n\n\"Breakfast and watching Pride and Prejudice,\" I teased, that being my favourite movie, based on my favourite book, from my favourite author. \n\n\"I don't I love you that much,\" he teased right back, having already suffered through watching more than one version of it with me. \n\n\"Well, then, how about a good pussy licking while I eat this breakfast you made for me,\" I suggested instead. \n\n\"That, I can do,\" he said, moving under the sheets and between my legs. \n\n\"This I could get used to,\" I said with a soft moan as I took a bite of bacon, crispy like I like it, as his tongue made contact. \n\nLike a man who knows his wife, he just licked me at a leisurely pace, not trying to get me off, but just allowing me to enjoy the sensual pleasure while I ate. \n\nAs he licked me, I thought to myself, 'We don't have to pick up the kids until two. That gives me time for one more pegging'. \n\nI finished eating, put the tray beside me and moaned, \"Now give me my breakfast orgasm.\" \n\nWithout a word, his tongue shifted from sweet and slow to more aggressive. \n\nI moaned, \"That's it baby, lick my pussy.\" \n\nI closed my eyes and just allowed the pleasure to gradually increase. \n\nSoon I was moaning louder. \n\nThen my legs were stiffening. \n\nFinally. I was putting my hands under the sheets, grabbing his head and holding him deep in my wetness as I came. \n\nHard. \n\nI came as the past two nights had been a rekindling of our marriage in all ways. We shared our secret truths; we fucked like passionate lovers; we explored each other's fantasies; we came to grips with the pleasure anal sex can bring. \n\nThrough anal sex, as bizarre as it sounds, we became more than just man and wife again... we became passionate lovers again. \n\nThe passion was burning strong, after a couple of years of flickering almost to oblivion. \n\nHe lapped up all my cum like he always did... seeming to be the rare guy who literally loved eating pussy. \n\nI got out of bed and asked, \"Want to get fucked one more time before we have to get up and join civilization?\" \n\nChris crawled out from underneath the sheets as he joked, \"Have I created a monster?\" \n\n\"You've awakened another side of me,\" I nodded, grabbing the harness from the floor where I'd left it. Looking at it, I added, \"I better give it a good wash first.\" \n\nI went to the bathroom and gave it a thorough wash before getting completely naked and putting the harness on me. \n\nWhen I returned, Chris asked, \"What position do you want me in?\" \n\nI grabbed the lube, returned to the bed and said, \"Let's try you on your side.\" \n\n\"Okay,\" he nodded, rolling onto his side. \n\nI noticed his cock was completely erect as he did. \n\nI teased, \"Obviously you're excited.\" \n\n\"I know it makes me less manly, but I can't help it,\" he said, looking both vulnerable and excited. \n\nI lubed the cock and comforted him. \"Honey, at first I thought it was weird too. Actually, I was shocked and devastated. I felt I wasn't enough for you. But talking to Marina, and even Bethany, as well as doing a lot of research, I learned a few things that made me comfortable and intrigued.\" \n\n\"What did you learn?\" He asked. \n\n\"In essence that this makes you more of a man,\" I answered, as I leaned beside him, me spooning him for the first time sexually. \n\n\"How?\" He asked, shivering in my arms. \n\n\"Because you are willing to be vulnerable with me. Honest. Most men will be curious about anal sex or gay sex in their life, the same way most women have curiosity about other women,\" I explained, as I moved my cock to his ass. \n\nHe turned his head back. \"Have you had lesbian thoughts?\" \n\n\"Maybe,\" I answered, non-committal as I slowly penetrated my husband. \n\nHe moaned, \"I'll take that as a yes.\" \n\n\"You're such a man,\" I sighed, as I slid my cock inside him. \n\n\"Not feeling like a man at the moment,\" he said, as he took all my cock. \n\n\"Oh you'll always be my man,\" I said, kissing his neck. I then added, as I began to fuck him, \"And also my little bitch.\" \n\n\"Oh God,\" he groaned. \"Fuck me, baby.\" \n\n\"You like being my bitch?\" I asked. \n\n\"God yes,\" he moaned, as I fucked him hard. \n\nI fucked him for a couple of minutes in this position, but found it awkward and tiring. \n\nI said, slowing down, \"I have learned that giving is a lot more work than receiving.\" \n\nHe laughed, \"Tell me about it. Especially when your woman takes forever to come.\" \n\n\"That's not always true,\" I protested, although it was usually true. \n\n\"Alcohol speeds up the process,\" he bantered. \n\n\"It does turn me from prim and proper to horny and wild,\" I agreed, as I pulled out and added, \"Get on your knees.\" \n\n\"Words I never thought you'd be saying to me,\" he said, as he moved into position. \n\n\"Me either,\" I agreed, as I moved behind him. \"Yet, now it seems so natural.\" \n\n\"I'm not sure it feels natural, but it sure feels good,\" he said, as I slid my cock back into him. \n\n\"And I have to admit you look fucking hot getting fucked,\" I added... which was true. I then began fucking him harder in this position. \n\n\"Ohhh,\" he groaned, as he buried his face in a pillow. \n\nI fucked him for a couple of minutes in this position as his moans got louder and I could see his cock was iron stiff. \n\nI recalled a pegging porn scene I had watched and pulled out and ordered, \"On your back, baby.\" \n\nHe rolled over slowly and asked, with a smile, \"I'm not your bitch anymore?\" \n\n\"I should have put you back in your cheerleader costume,\" I smiled, as I pulled him to the edge of the bed. \n\n\"Wow, I like this side of you,\" he said. \n\n\"What side is that?\" I asked. \n\n\"Sexy dominant,\" he answered, as I got off the bed and moved up to the edge. \n\nI shrugged, \"I like that descriptor.\" I spread his legs and slid my cock back into his ass with one hard thrust. \n\n\"Oh, this is different,\" he groaned. \n\n\"Jerk off,\" I ordered. \n\n\"K,\" he nodded, as he began to stroke himself as I fucked him. \n\n\"I want to watch you come from me fucking you, baby,\" I purred, fucking him as fast as I could, before adding, knowing he'd like it, \"My little bitch.\" \n\n\"Oh yes,\" he whimpered, his breathing heavy, as he furiously stroked himself; heavy in a way it never was when he was the one doing the fucking. \n\n\"Come for me, bitch,\" I demanded, sexily. \"I want to see you erupt from me fucking your sweet ass like a little slut.\" \n\n\"Oh yes, Dani,\" he whimpered. \"Fuck my ass.\" \n\n\"I wish I was flexible enough to bend down and suck your cock while fucking you,\" I said, his hard cock looking so delicious. \n\n\"That would be amazing,\" he groaned and then shot his cum all over himself. \n\nI kept fucking him throughout his brief orgasm (always feeling sorry for men getting such a brief moment of pleasure, while a woman's could last minutes). \n\nWhen he stopped jerking himself off, I pulled out, leaned forward and licked his cum off his firm stomach. I loved how his body was in as good a shape now as the day I met him. \n\n\"Fuck, I love you,\" he said weakly. \n\n\"You know, starting with 'fuck' makes it a lot less romantic,\" I teased. \n\n\"You just fucked my ass,\" he pointed out. \n\n\"And now you're going to eat my pussy,\" I countered, as I got on the bed, got out of the harness and straddled his face. \n\n\"Mmmmmm, breakfast in bed,\" he quipped as he leaned up and started licking. \n\n\"Anything for my husband,\" I responded, as I closed my eyes and enjoyed his tongue. \n\nHe licked me and I just enjoyed, my second orgasm of the morning lingering just below the surface. I also felt bad for men as they couldn't have multiple orgasms like women could. \n\nChris was amazing at licking pussy and often had me ready to explode in only a couple of minutes. \n\nToday would have been no exception as pegging him had me pretty revved up, but having already just come he would have to work at it. Yet, I wanted to get fucked. I sighed realizing that wasn't possible after he just shot his load. Then a neat idea popped into my head. \n\n\"Want to fuck my ass, baby?\" I asked, craving a cock in it. \n\n\"I'd love to, baby, but I need recovery time,\" he answered. \n\nI got off the bed, grabbed the strap-on and said, \"Use this.\" \n\n\"Seriously?\" he asked, surprised. \n\n\"Well, I shouldn't have let you come, but I can't go back in time and change that, so this will have to do,\" I shrugged, handing it to him. \n\n\"Okay,\" he nodded, as he put the harness on himself. \n\n\"One day, that may make a great double penetration toy,\" I smiled, the idea exciting the moment I said it. \n\nHe laughed, \"That, I would love to try.\" \n\nI grabbed the lube and handed it to him, and helped him put the harness on. \"Men, you really are helpless without women.\" \n\n\"Tough to argue,\" he agreed, as he lubed the strap-on that had recently been in his own ass. \n\nOnce I had it on him, I go onto the bed, on all fours and demanded, \"Now come and fuck my ass.\" \n\n\"Yes, ma'am,\" he nodded, as he eagerly joined me on the bed. He poured more lube on my ass and then began rubbing the cock up and down my ass cheeks. \n\n\"Fuck my ass,\" I demanded, wanting to feel the difference of being fucked by his cock and a strap-on cock. \n\n\"So demanding,\" he teased, as he slid the thin cock in me. \n\n\"Just do as you're fucking told,\" I shot back, teasing. \n\n\"Yes, ma'am,\" he replied, as he began slowly fucking me. \n\nAfter a couple of minutes, I wanted it harder and began bouncing back on him, taking the entire cock as deep as I could in my ass. \n\n\"Oh yes, take it all,\" he groaned. \n\n\"Mmmm, you like watching me take it in the ass like a cheap whore?\" I moaned. \n\n\"God, yes,\" he admitted. \n\nOnce I was close, the ass fucking driving me wild, but not getting me off, I fell forward, rolled onto my back, spread my legs and demanded, \"Get licking.\" \n\nHe buried his face between my legs and licked. \n\nAs my breathing got heavier, my orgasm rising, I moaned, \"Yes, baby, don't stop.\" \n\nHe moved to my clit, tugged it between his lips and shook his head. \n\n\"Fuck!\" I screamed as the sudden pressure was intense and something he had never done before. \n\nIn seconds, my orgasm flooded out of me and onto his face. \n\nHe kept lapping until I pushed him away and, still trembling, said, \"Still coming,\" \n\nHe rolled onto his side and watched me. \n\nI smiled, \"Perv.\" \n\nHe shrugged, \"Says the one who fucked her husband's ass.\" \n\nI laughed weakly, and countered, \"Says the one who has a whole collection of anal toys for himself.\" \n\n\"Truce,\" he called. \"We're both pervs.\" \n\nI stood up, having to pee badly, \"We're not perverts, we're sexual beings finally able to truly express all our hidden fantasies and wants.\" \n\n\"That I can live with,\" he smiled. \n\n\"Good, because I have more questions,\" I said. \"But first I got to pee and then we need to go and get the kids.\" \n\n\"We have a little more time,\" he said, looking at the alarm clock in the night stand. \n\n\"We've a stop to make first,\" I said and gave a wink. \n\n\"Where?\" He asked. \n\n\"That is for me to know and you to find out,\" I smiled and left him to ruminate where. \n\nForty minutes later, we were in the car and I was driving. I asked, wanting to clarify the one thing that I was still insecure about. \"So, I have to ask this.\" \n\n\"Anything,\" he said. \n\n\"Do you find guys attractive?\" I asked. \n\n\"Not at all,\" he admitted. I sighed a big sigh of relief. But before I could enjoy my relief he added, \"But I do find cocks attractive.\" \n\n\"You do?\" I asked, trying not to sound deflated. \n\n\"It's hard to explain,\" he said, looking down into his lap. \n\n\"Try,\" I said, wanting to hear more and wanting to text Marina to ask if this was normal too. \n\n\"I don't find men attractive at all,\" he repeated. \"But I love the look of a cock, especially hard.\" \n\n\"Me too,\" I joked, reaching over and squeezing his flaccid cock. I wanted to hear his answer and be supportive even as I was swarming in insecurities and worst case scenarios (my husband was gay!) \n\nHe continued, putting his hand on my nylon-clad leg, \"For example, I don't have a single fantasy where I kiss a guy, but...\" \n\nHe paused. \n\nI pushed him on. \"Honey, you can tell me anything.\" \n\n\"Well, it's just I do have fantasies of stroking another's man's cock, sucking another man's cock and even, before the pegging last night, getting fucked by another man's cock,\" he admitted, looking ashamed. \n\n\"Oh,\" was all I could say for a moment as I processed this new information. \n\n\"I'm sorry,\" he said, looking so guilty, so defeated. \n\nI said, \"Don't apologize, honey. Your fantasies and feelings are yours and are what they are.\" \n\n\"It's just,\" he said and then added, \"I'm not gay, Dani.\" \n\n\"Trust me, the way you hammered my ass on Friday proved that,\" I said, trying to lighten the mood. \n\n\"That was unexpected and amazing,\" he said. \n\n\"This whole weekend has been,\" I agreed, again squeezing his now growing cock. \n\n\"That is an understatement,\" he laughed. \n\nI asked, curious, especially with where I planned to go next, \"Was my cock big enough?\" \n\nHis already red face went a darker shade. \"Honestly?\" \n\n\"No, lie to me,\" I bantered. \n\n\"I would love to try bigger,\" he admitted. \n\n\"Longer or thicker?\" I asked. His cock now completely hard in his trousers. \n\n\"Both,\" he admitted. \n\n\"You cock slut,\" I teased. \n\nThis made him roar with laughter. \n\n\"What?\" I asked, as I turned into the strip mall where the adult store was. \n\nHe tried to answer as he kept laughing, \"it's just... not something... I ever imagined my wife calling me that.\" \n\n\"Ditto,\" I agreed, as I parked. \n\n\"An adult store?\" He asked. \n\n\"So deductive,\" I teased, as I got out of the car. \n\nHe followed me in and was surprised when I went directly to the anal section. \n\nWe were there less than a minute when we were greeted by the saleswoman that Bethany had had a quickie with, who said, \"Back already?\" \n\nI shrugged. \"I thought my husband should be a part of the toy shopping.\" \n\n\"Great idea,\" the girl nodded, looking to my husband. \"What are you looking for?\" \n\nI glanced to my husband, who looked absolutely sheepish. \"Honey, what are we looking for?\" \n\nHe looked so adorable, so shy, which was so unlike him, that I couldn't help but make my usual super confident man get more uncomfortable. \n\n\"I want a strap-on that is bigger than the one I bought last time,\" I answered. \n\n\"Oh, it's for him,\" she nodded with a smile. \"That is awesome.\" \n\nMy husband looked like he wanted to turtle, like some of the guys he used to beat up when he was playing professional hockey. \n\nHe stammered, \"I-um-well-I...\" \n\n\"It's nothing to be embarrassed of,\" she said. \"I respect a man who can explore all aspects of pleasure and allow himself to be pegged.\" \n\n\"Me too,\" I agreed. \"Unfortunately, the one I bought isn't long enough or thick enough.\" \n\nChris still looked incredibly uncomfortable. He didn't say anything as the cute saleswoman joked, \"Sometimes size matters.\" \n\nI laughed. Squeezing my husband's hand, \"Size always matters.\" \n\nShe laughed, as she handed me a large package. \"This harness comes with five different cocks you can insert in it in a variety of lengths and girths,\" she explained. \n\n\"It comes with different colours too,\" I said, as I showed the different cocks to Chris. \n\nHe just nodded, although I truly wasn't sure what the nod meant. \n\nI asked, \"Is that a yes, buy it?\" \n\n\"Sure,\" he said. \n\n\"There is a new series of unique sex toys made more for lesbian couples, but can also be used for pegging that can get both lovers off at the same time,\" she said, as she grabbed a package containing a uniquely shaped pink toy. ",
        "I asked, looking at it, \"How does it work?\" \n\n\"Like heaven,\" she smiled, before adding, \"But seriously, the long part goes into a woman's vagina or a man's rectum, while the other, smaller end, goes inside the giver's vagina.\" \n\n\"Oh my,\" I said, already liking the idea of the toy. \n\n\"It gets better,\" the girl said. \n\n\"I can't wait to hear how,\" I said, handing the package to Chris. \n\nShe asked Chris. \"Do you like things to vibrate when you are being penetrated?\" \n\n\"Um, yeah, sometimes,\" he answered, still uncomfortable talking about his ass play with a stranger. \n\n\"Well, this toy also can be put on vibrate,\" she revealed. \n\n\"Ooooooh,\" I said, before asking, \"the side in my pussy too?\" \n\n\"Yep,\" she nodded. \"That's why it's a hugely popular toy in the lesbian community.\" \n\n\"I can imagine,\" I nodded, wondering if Bethany had such a toy. Deciding to reward both Bethany and Marina for their assistance and support during this crazy rejuvenation I said, \"I'll take three.\" \n\n\"Three?\" She asked. \n\n\"Gifts,\" I explained. \n\n\"What great gifts,\" she nodded. Surprising me, she again turned to Chris and asked, \"Do you enjoy solo anal play?\" \n\nChris's already red face somehow went redder. \n\nI answered for him, \"He travels a lot.\" \n\n\"Do you have a Nexus Revo Intense Prostate Massager?\" She asked, not waiting for an answer as she went to another section. \n\nChris looked like he was about to say something, but seemed unsure where to begin. \n\nI asked, \"Having fun?\" \n\n\"I feel like everyone is judging me,\" he answered. \n\n\"There are only three people here and the woman helping us doesn't seem at all fazed.\" \n\n\"I suppose,\" he said, still looking uncomfortable. \n\nThe girl returned and said, \"This is amazing for solo play, prostate stimulation and is even for partner play if your woman wants to give you some oral satisfaction while you are using it.\" \n\n\"We'll take it,\" I decided for him, already excited about trying it out just as she described. \n\n\"Um, yeah, okay,\" he agreed, clearly intrigued by the unusually shaped toy. \n\n\"The head even rotates for extra stimulation,\" the girl said. \n\n\"It sounds orgasmic,\" I smiled. \n\n\"Men love it,\" she nodded. \n\nChris said, \"I'm going to get some fresh air.\" \n\n\"Okay, I'll pay for these and meet you at the car,\" I offered, knowing he wanted to get out of the store. \n\nShe asked, \"Do you two watch porn together?\" \n\n\"Um, not really,\" I answered, although it was something I was now intrigued to do after all my research of late. \n\n\"There are not many great pegging movies, but there is one,\" she said, leading me to a massive movie section. She handed me a movie and I laughed. \n\n\"Is this a parody of How I Met Your Mother?\" I asked. \n\n\"Yep!\" she nodded. \n\nThe title was 'How I Pegged Your Father'. I loved the show, so did Chris, and I said, \"This I have to buy.\" \n\n\"The scenes are hot too,\" she said. \n\n\"The idea of Barney being pegged is super-hot,\" I added, as I followed her to the till. \n\nAt the till she said, \"I think you are a lucky woman.\" \n\n\"I am,\" I agreed. \n\n\"Very few men come in here with their wives,\" she said. \n\n\"Well, I'm not sure he enjoyed it,\" I said, feeling a little bad, although liking being in control. \n\n\"It's obvious he is submissive and will likely do anything you suggest or,\" she paused for dramatic effect, \"order.\" \n\n\"You think?\" I asked, enjoying being the one in charge much more than I could have imagined. \n\n\"Oh I've seen it many times before. A good looking, athletic looking guy who exudes confidence but secretly wants to be pegged and used,\" she answered. \n\n\"Well, he sure likes pegging,\" I said. \n\n\"I bet he'd be willing to do more than that,\" she added. \n\n\"Like what?\" I asked, thinking we had already now reached the 'everything' stage. \n\n\"Have you ever wanted to watch him suck a real cock?\" She asked. \n\n\"God, no!\" I answered, not something that had even popped into my head before she asked it. \n\n\"I bet he has,\" she shrugged, as she finished the transaction. \n\n\"Well, thanks for the assistance,\" I said, my head again spinning with new information I had no idea what to do with. \n\n\"Anytime,\" she smiled, and headed over to help a man looking at blow up dolls. \n\nBack in the car, Chris now driving, back in his usual spot in the car, and in the relationship, I said, \"I'm sorry if that was awkward.\" \n\n\"It was,\" he said, before adding, \"that's the old man in me thinking that anything gay is gay.\" \n\n\"But being pegged doesn't make you gay,\" I pointed out. \n\n\"I know,\" he nodded, \"but I sure wouldn't tell my father or my buddies that my wife pegs me.\" \n\n\"So I should erase my Facebook post,\" I teased. \n\nHe laughed, \"I could only imagine what most would think.\" \n\n\"If they knew you liked being fucked in the ass?\" I finished for him, liking the bluntness of it. \n\n\"Yeah,\" he said, shaking his head. \"You really like the power shift, don't you?\" \n\n\"I sure like doing the giving and I like that you are willing to just give yourself to me completely,\" I said. \n\n\"I'm still getting used to it,\" he said. \n\nAfter a pause, I asked, \"Can we return to the conversation we were having before we went toy shopping?\" \n\n\"What's left?\" He joked. \n\n\"So you really want to suck a real cock?\" I asked, wanting to dig deeper and understand him. \n\n\"Sometimes,\" he said. \"When I'm alone and horny, yes. When I'm not horny, no. But let me clarify again, I am not remotely attracted to men.\" \n\n\"Just to cocks?\" I clarified. \n\n\"Sometimes,\" he admitted, before adding, \"but once I cum I immediately feel disgusted by myself and my gay fantasies.\" \n\n\"So,\" I asked, wanting clarification. \"So you are curious about sucking a real cock?\" \n\n\"Yeah, sometimes,\" he admitted. \n\n\"Swallowing cum?\" Investigated. \n\n\"Kind of.\" \n\n\"How about getting a facial?\" I questioned, listing all the things he had did to me. \n\n\"Yeah.\" \n\n\"And taking it in the ass from another man?\" I queried. \n\n\"No,\" he clearly answered, before adding, \"although when I'm jerking off the idea does occasionally pop into my head.\" \n\n\"Interesting,\" I said. \n\n\"How so?\" He asked. \n\n\"Well, it's just intriguing the possible do's and don'ts. I have to admit I'm not sure what to think,\" I said. \n\n\"I love you and only you,\" he pointed out. \n\nI put my hand on his cock, which was iron stiff, and said, \"I love you, too.\" \n\nAfter a pause, I asked, \"And what, may I ask, has got him all revved up?\" \n\n\"Honestly, I don't know,\" he answered. \n\nI fished it out if his pants as he drove and asked, \"Is it imagining that new strap-on deep in your ass?\" \n\n\"It is pretty big,\" he moaned, as I rolled my finger over his mushroom top. \n\n\"Or is it that new big toy I bought you?\" I teased, as I bent down and for the first time in years sucked his cock while he drove. \n\n\"Oh God,\" he groaned. \"The idea of you sucking me while I have it in me is super-hot.\" \n\nI bobbed on his cock in the broad daylight for a few seconds until I felt him slowing down. \n\nI sat back up and asked, still stroking his cock, \"Or is it the idea of sucking another guy's cock while I watch?\" \n\nSuddenly, embarrassing to him and shocking to me, he groaned and shot his load. \n\nI laughed, once he was done coming, \"Well, I guess that answers that question.\" \n\n\"I can't believe I just came like that,\" he said, clearly embarrassed. \n\nI finished stroking him as I said, \"it's okay, it was a lot of sex talk.\" \n\n\"Yeah, I guess,\" he said. \n\nI moved my hand, with a big blob of cum on it to my mouth and licked it up. \"You do have tasty cum.\" \n\nHe didn't say anything, and I added, \"It's okay, honey. I love that you are exploring your sexuality and are willing to do it with me.\" \n\n\"I really don't know what I'm willing to do,\" he said, as we pulled into my parent's neighbourhood. \n\nI nodded, not sure I wanted to see him sucking a real cock, yet also not sure I didn't, \"Me either. Let's explore together.\" \n\n\"Agreed,\" he nodded, finally looking like his old self. \n\n\"But trust me, I'm fucking your ass tonight,\" I added, as he pulled to a stop in front of the house. \n\nHe laughed, \"I think I've created a monster.\" \n\nI shrugged, \"You can fuck mine too, if you wish.\" \n\n\"Words I never thought I'd hear,\" he shook his head, as he put his cock away. \n\n\"There are many conversations of late I never envisioned having,\" I countered. \n\n\"Fair enough,\" he said, before adding, \"and now, back to the real world.\" \n\n\"Yeah,\" I sighed. \"It was a great past couple of days.\" \n\n\"The best since our wedding,\" He countered. \n\n\"I love you,\" I said one more time, me saying it first this time. \n\n\"I love you too,\" he said. \n\nThen we returned to the normality of our lives. \n\nUntil... \n\nThat night I didn't fuck his ass. We were both tired and just used his new toy thing instead. He lubed his ass up and I watched him lower himself on it. \n\nIt was pretty hot, yet he had his eyes closed the entire time, still self-conscious of how he looked. \n\nI turned on the television and popped in the new movie and said, \"I got us a movie to watch.\" \n\nHe opened his eyes, the toy all in, and asked weakly, \"What?\" \n\n\"How I Pegged Your Father,\" I answered. \n\n\"You're not serious,\" he said, as the movie started. \n\n\"I knew you'd like it,\" I smiled, before asking, \"Is it on?\" \n\n\"On low.\" \n\n\"Is the head turning?\" \n\n\"No.\" \n\n\"Well, let's change that,\" I purred, as I moved to him and pressed some buttons until he groaned. \n\n\"That's it.\" \n\n\"Good,\" I said. \"Now let's watch the movie. No touching yourself.\" \n\nThere was a good five minute scene where Barney discusses his new love: being pegged. It then flashes back to Barney meeting a girl at a bar who compliments his suit. Three drinks later, they are in a girl's washroom stall and the woman is sucking his dick. A minute later she handcuffs him to the handicap bar and says, \"Now are you ready for something really kinky?\" \n\n\"Challenge accepted,\" Barney answers, bent over somewhat and clueless to the strap-on the pretty girl has pulled out of her purse. \n\n\"I'm happy you said that,\" she purred, before ordering, \"Now keep your eyes closed.\" \n\n\"Yes, ma'am,\" Barney obeyed, giddy with anticipation, the actor doing a great job playing the part of Barney. \n\n\"Subservient, I like that,\" she purred, as she pulled her dress up and off and put the strap-on over her pantyhose-clad hips. \n\n\"I'm yours,\" he said. \n\nI glanced to Chris and saw him slowly stroking his cock. \n\n\"No touching your cock,\" I scolded. \n\n\"Yes, ma'am,\" he replied, with a smile. \n\n\"Subservient, I like that,\" I said, as we returned to watching the scene. \n\n\"Good,\" she said, before adding, \"Now keep them closed, \"You don't want to see your surprise before you feel it.\" \n\n\"Okay,\" he agreed, sounding curious and slightly nervous as the woman grabbed lube from her purse and coated the cock generously. \n\n\"Ready for a life changing moment?\" she asked, as she tossed the lube back into her purse. \n\n\"I'm ready for anythiiiiiiiiing,\" He answered with a scream, as the woman roughly slammed the cock into his ass. \n\nShe kept pumping his ass hard as he whimpered in shock and surprising pleasure, obviously wrought with pain. \n\n\"Stop,\" he pleaded, even though he didn't make any attempt to move away. \n\n\"Oh, you're loving this,\" she purred. \"You were born to be pegged.\" \n\n\"Noooo, it hurts,\" he whined. \n\n\"You deserve some pain Barney Stinson,\" the girl said, continuing to fuck him as hard as she could. \n\n\"What?\" he said, turning back to look at her, knowing he hadn't given his real name... he never did. \n\n\"Don't remember me?\" she asked. \n\n\"No,\" he admitted, as his whimpers were turning to moans. \n\n\"You probably shouldn't,\" she said. \"No one else did.\" \n\n\"Who are you?\" he asked, now clearly beginning to enjoy the humiliating ass fuck. He had pounded many asses in his years and never worried about the woman's pleasure or pain, and now the opposite was happening. \n\n\"Bertha,\" she answered. \n\n\"Oooooooh, Bertha,\" he said, pretending to know who she was but doing a terrible job being believable. \n\n\"You have no fucking idea, do you?\" she said, as she fucked him harder. \n\n\"Nooooooo,\" he admitted. \n\n\"Big Bertha,\" she said. \n\nHis eyes went big. He said, even as he whimpered in pleasure, his cock iron stiff, \"No way. From high school?\" \n\n\"The one and only,\" she said. \n\n\"You look different,\" he said. \n\n\"Years of therapy and diets and revenge,\" she explained, as she suddenly pulled out. \n\n\"You're leaving?\" he asked, his cock hard and ready to erupt. \n\n\"Yep,\" she nodded, before adding, \"but here is a going away gift.\" \n\nBarney stared as she pulled out a huge butt plug from her purse and said, \"It's called a Big Bertha.\" \n\n\"Please, nooooo,\" Barney screamed, as the massive plug spread his ass cheeks. \n\n\"Bye bitch,\" she said, walking out. \n\nBarney begged, \"Please undo the handcuffs.\" \n\nShe walked out, leaving the stall door wide open for anyone to see. \n\nI asked Chris, \"What did you think of that?\" \n\n\"Disturbing and hot,\" he answered, still sitting on the toy. \n\n\"Your cock seemed to enjoy it,\" I smiled, as I moved to him and between his legs. \n\n\"The scene and the toy are quite the stimulators,\" he admitted. \n\n\"How about this?\" I asked, as I took his cock in my mouth. I began bobbing and in literally seconds, not more than fifteen, likely not even ten, he groaned and I felt his cum erupt into my mouth. \n\nI swallowed it all before saying, \"Shit, the amount of lock jaw I could have avoided if I knew this toy existed.\" \n\n\"That was intense,\" he whimpered, looking completely spent. \n\n\"Tomorrow you owe me an orgasm or two,\" I said, going to the washroom to brush my teeth. \n\n\"Not three?\" he asked. \n\n\"Maybe even four,\" I shrugged, leaving him alone to clean up and so forth. \n\n... \n\nThe next day, once the kids were at school, I showered, put on some thigh highs and a strap-on, and walked into the office. \n\nChris was on his laptop dealing with the emails he had ignored since arriving home. \n\nI asked, \"Ready to take a break?\" \n\nHe turned around and laughed, \"You really are suddenly insatiable.\" \n\n\"Are you complaining?\" I asked. \n\n\"My agent is. He has already called twice this morning about a last minute conference that needs a speaker,\" he said. \n\n\"When?\" I asked, knowing that Chris was supposed to be home all week, his next speaking engagement a couple weeks away. \n\n\"Thursday,\" he answered. \n\n\"Oh,\" I said. \"Where?\" \n\n\"Toronto,\" he answered. \n\n\"Canada?\" I sighed, as that usually meant he wanted to stay and visit for a couple of days... Toronto being his old stomping grounds in the minor leagues. \n\n\"Yeah,\" he said, in a tone that meant he had more to tell me. \n\n\"And?\" I sighed, a sigh that made it clear I wasn't happy and wasn't going to like whatever he said next. \n\n\"I also have been asked to do a charity fundraiser Saturday night,\" he added. \n\n\"So you'd be gone for a few days,\" I said, stating the obvious. \n\n\"Yeah,\" he said, before adding, \"sorry.\" \n\n\"I'm supposed to go to Bethany's birthday party on Saturday night,\" I pointed out. \n\n\"I'll see if my parents can watch the kids or I'll get a babysitter,\" he said, sensing I wasn't happy. \n\n\"Fine,\" I said, when it was clear I wasn't fine. \n\n\"Sorry, I could say no,\" he said, although we both knew he wouldn't. \n\n\"No, go,\" I said, before adding, \"but this fucking has just shifted from romantic to punishing.\" \n\n\"You still want to do this?\" He asked, surprised. \n\n\"Oh, you'll wish I hadn't,\" I said, before adding, \"now get that ass ready for fucking. I'll be back in a moment.\" \n\n\"Okay,\" he nodded, as I walked out of the room to grab the lube. \n\nI had read somewhere about edging and had decided that since we were both home today I was going to push him to the limits until his balls were blue. \n\nI returned and he was naked, but still on his laptop working. \n\nFor some reason, this pissed me off. I said, \"I thought I said to get that ass ready.\" \n\n\"Sorry, I was just doing one more email,\" he explained. \n\n\"I'm not sure you deserve this cock,\" I said. \n\n\"Please,\" he said, clearly wanting it. \n\n\"Please, what?\" I asked, still in the doorway. \n\nHe stood up, bent over his desk and said, \"Please fuck my ass.\" \n\n\"You sure you can fit it into your busy day?\" I asked, still annoyed and not pretending to hide it. \n\n\"My ass is yours,\" he answered. \n\n\"So is your cock,\" I said, as I walked over to him and handed him the lube. \"Get yourself ready.\" \n\nJust then I heard my cell ring. \"Stay,\" I ordered, the saleswoman's words of him being completely submissive popping into my head. I added, \"And no fucking computer time.\" \n\nI went and grabbed my phone and answered it. \n\n\"Good morning pegging queen,\" Bethany greeted. \n\n\"Hi, Bethany,\" I replied. \n\n\"So how was the rest of the weekend?\" she asked. \n\n\"Fine,\" I answered, not divulging any of the activities after the first pegging. \n\n\"Have you tried any of the new toys you bought yesterday?\" she asked. \n\n\"What new toys?\" I asked, playing innocent. \n\n\"Cherise told me all about your excursion with Chris,\" she revealed, which didn't surprise me. \n\n\"I see,\" I said, and wanting to shock her, I added, \"I'm trying one of those toys right now. So I'll call you back when I'm done.\" \n\nI hung up before she could respond and, feeling exhilarated with power, I walked back to the office, smiled when I saw he was still in the same position I left him in, and asked, \"Ready to be fucked?\" \n\n\"Yes,\" he nodded. \n\nI moved behind him and slid my new, bigger cock in him. \n\nHe whimpered, as my lubed cock spread his tight ass wider and quickly reached new depths. \n\n\"You like my bigger cock?\" I asked. \n\n\"Yes,\" he moaned, as he clearly was trying to get comfortable with the thicker and longer cock. \n\nI fucked him for about five minutes, enough for his whimpers of discomfort to shift to moans of pleasure. \n\nHis cock was rock hard. \n\nI suddenly pulled out, and said, as I took the harness off, \"For your punishment, you will not come until I give you permission, is that clear?\" \n\n\"Seriously?\" he asked surprised as I sat on his desk, and spread my legs. \n\n\"Do you have a problem with that?\" I asked, somehow enjoying being the dominant. \n\n\"Um, no,\" he said. \n\n\"Get licking,\" I ordered. \n\nHe obeyed, getting me off in a few minutes. \n\nOnce done, I ordered, \"Now stay naked, baby. I plan to fuck you all day long.\" \n\n\"Okay,\" he nodded. \"If you're really upset about me leaving, I'll say no.\" \n\n\"No, no,\" I smiled. \"Go. I'll go with my sisters this weekend. Just make sure we have someone to watch the kids overnight Saturday.\" \n\n\"Okay,\" he agreed. \n\n\"Plus, I think a day of edging will be good for you,\" I said, before walking out. \n\nI called Bethany and said, \"Done for now.\" \n\n\"Did you just fuck him?\" she asked. \n\n\"I plead the fifth,\" I answered with a laugh. \n\n\"So you're still on for Saturday?\" she asked. \n\n\"Chris is now gone for the weekend,\" I answered, before adding, \"He's looking into getting a babysitter or have the kids stay at his parents.\" \n\n\"Good, because you promised,\" she reminded me. \n\n\"Yes, I'm coming to your lesbian bar for your birthday,\" I said. \n\n\"And coming,\" she quipped. \n\nAlthough I still had no real intension of exploring any sort of lesbian encounters, I was less dead set against it than I had been a few days ago. But, I would never cheat on my husband. I joked, \"Yes, I'll probably end up being seduced by the first dyke I see.\" \n\n\"I wouldn't be so flippant,\" she countered. \"One side of your sexuality has been awakened, who knows what else will follow.\" ",
        "\"Likely a lesbian munchfest,\" I quipped, willing to play along. \n\nShe laughed, \"My big sister has finally entered the 21<sup>st</sup> century.\" \n\n\"By talking dirty?\" I asked. \n\n\"And accepting that sexuality is not linear, not singular.\" She answered. \n\n\"Regardless,\" I countered, \"I would never cheat on Chris.\" \n\n\"It wouldn't be cheating,\" she countered. \n\n\"How so?\" I scoffed. \n\n\"He doesn't have a pussy, so you licking one is something he can never give you,\" she answered. \n\n\"So,\" I asked, trying to grasp her rationale, \"Licking another woman's pussy is okay, getting licked by another woman is cheating?\" \n\n\"I'd argue anything with another woman is okay, and I bet Chris would too,\" she said. \n\n\"So that means I should let him suck a cock?\" I asked, that idea already in my head. \n\n\"Sure,\" she answered. \"The same theory applies.\" \n\n\"You're hilarious,\" I laughed. \n\n\"Ask him,\" she said, unaware I had already had that conversation with him in a generic sense. \n\n\"I will,\" I said, before adding, \"I got to go.\" \n\n\"Another ass fucking to give?\" she teased. \n\n\"For him or me?\" I asked, before hanging up, feeling indeed like a liberated woman of the 21<sup>st</sup> century. \n\nI didn't go back and fuck him. Instead, I went and did some online work of my own. \n\nA couple hours later, just before lunch, I pegged him again for about five minutes, before going to make lunch. \n\nAfter lunch, I pegged him again for five minutes, before allowing him to have dessert... my pussy. \n\nHalf an hour before the kids were to get home, I pegged him again, this time with a bigger cock, for a good ten or fifteen minutes until he was whimpering and begging to be allowed to come. \"Please, honey, let me come.\" \n\nI teased, slamming into him hard, \"You think you deserve to come?\" \n\n\"Yes, please, I'll do anything,\" he pleaded, his hard cock flapping around in desperation. \n\n\"Anything?\" I asked. \n\n\"Yes, baby, my balls are burning,\" he whined. \n\n\"What if I wanted you to suck a man's cock?\" I asked, not sure I wanted to watch that, but curious what his response would be. \n\n\"Ohhhhhh,\" he groaned, \"if you want me to.\" \n\n\"But do you want to?\" I asked, stopping buried deep in his ass. \n\n\"Yes, yes I want to suck a real cock,\" he admitted, in complete lust and desperation. \n\n\"Come,\" I ordered, resuming fucking him. \n\nHis hand went instantly to his cock and in maybe fifteen seconds he was coming all over the floor. \n\nI fucked him throughout his orgasm, before pulling out, and asking, \"You really do want to suck a real cock, don't you?\" \n\n\"Sometimes,\" he admitted. \n\n\"Based on how quickly you come when it's mentioned, I'd say it's more than just sometimes,\" I pointed out. \n\n\"Well, when you mention cock, one pops into my head and I imagine sucking it,\" he admitted, standing straight up. \n\n\"Whose?\" I asked. \n\n\"No one particular,\" he answered. \n\n\"There is no one cock that is most appetizing to you?\" I asked, as I grabbed his hands, shifting from dominant lover to caring wife. \n\nHe couldn't make eye contact. \n\n\"Who?\" I asked. \n\n\"Markus,\" he admitted. \n\n\"Is he big?\" I asked, Markus being his best friend. \n\n\"Yeah,\" Chris nodded, again looking ashamed at what he was admitting. \n\n\"It's okay, honey,\" I said. \"It turns me on thinking of you sucking cock.\" \n\n\"It does?\" he asked. \n\n\"Yeah,\" I nodded, before adding, \"although I'm not sure I could actually watch it.\" \n\n\"I understand,\" he nodded. \n\n\"Bethany says you sucking cock wouldn't be cheating on me,\" I continued. \n\n\"Really?\" he again asked. \n\n\"Yeah, her theory was actually about me going to a lesbian bar and eating pussy,\" I continued, curious what he thought of me with another woman. \n\n\"That I would love to see,\" he said. \n\n\"You would?\" I asked, it now being my turn to look for more information. Although a week ago I had no interest in another woman, the awakening of my sexuality, the frank talk with Bethany and the many toys had somehow made me curious. Not ready to cross the straight line, but curious. \n\n\"There is nothing hotter than two women having sex,\" he said. \n\n\"Men,\" I joked. \n\n\"If you end up being seduced by some lesbian this weekend I give you permission to explore,\" he said, this time me being the one who was surprised. \n\n\"You're giving me permission to cheat?\" I asked. \n\n\"To explore,\" he smiled. \"But only with women.\" \n\n\"So I have your permission to eat pussy?\" I asked. \n\n\"You do,\" he nodded. \n\n\"What about having a woman eat me?\" I asked. \n\n\"Sure,\" he nodded. \n\n\"Strap-on sex?\" I continued, seeing how far he was willing to go. \n\n\"Why not?\" he said. \n\n\"Wow!\" I said. \n\n\"Everything about the past few days is Wow!\" he pointed out. \n\n\"Was this orgasm more intense after the whole day of teasing?\" I asked. \n\n\"It was intense as hell,\" he nodded. \n\n\"Since I have permission to munch cunt, I guess I should give you permission to suck cock,\" I said, stroking his cock. \n\nHe pulled away for the first time ever. \"Please, don't. It's super sensitive.\" \n\n\"Sorry,\" I shrugged. \n\n\"I'm not sure I can actually follow through and suck cock,\" he said. \n\n\"I'm not sure I can actually follow through and munch cunt,\" I said. \n\n\"I love that nasty tongue,\" he smiled. \n\n\"I bet the lesbians will on Saturday too,\" I smiled with a wink as I headed out to get dressed, knowing that the kids would be home in a few minutes. \n\n\"I want pictures and video,\" he called out. \n\nAs I went to my bedroom I wondered: Did I actually want to eat pussy? I didn't have a definite answer, but it sure wasn't 'Hell no' like it would have been a few days ago. \n\nI texted Bethany, \"What does pussy taste like?\" \n\nTHE END FOR NOW \n\nComing in the future: \n\nKinky Tales: Lured into Lesbianism: Dana's tale of going to the famous Le Chateau Club and exploring her sexuality in a whole new way. \n\nKinky Tales: My First Glory Hole: Chris, while in Toronto, experiences with sucking cock \n\nor \n\nKinky Tales: My First Time Sucking: Chris, while in Toronto, experiences with sucking cock \n\nOr \n\nKinky Tales: Not Straight Anymore: Chris, while in Toronto, experiences with sucking cock \n\nPS Author's Note: \n\nShould 'How I Pegged your Father' get its own story? This is either a great idea, or a terrible one... I'm not sure which one though. \n\nJasmine 2016"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "pegging",
        "anal",
        "submissive",
        "wife",
        "husband",
        "stockings",
        "curious",
        "marriage",
        "loving wife",
        "strap-on"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/kinky-tales-love-and-pegging"
}
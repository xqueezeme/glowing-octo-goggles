{
    "title": "Cheryl's Passion Ch. 15",
    "pages": [
        "Being a slave-girl in the United States of America can be complicated.\n\nCurrently in the U. S., owning another human being is of course, illegal. Therefore, my slave-girl status is largely a matter of mindset and behavior. And the more the people around me cooperate, the more my slave-girl mindset is reinforced. Ms. Cuthbert, Rosa, Heidi and even Josephine were all very helpful in treating me like a slave and making me feel abused, exploited and vulnerable. It was all quite wicked and delicious.\n\nThe only significant problem was Prue. Prue was encouraged to participate in inflicting punishments on my bare skin, but she always demurred. She wanted to treat me like a girlfriend, showering me with affection, going window shopping in town, going out on dates together, showing me off to her friends, she didn't want to punish me.\n\nShe didn't want anyone to punish me.\n\nPrue engaged in discussions with her mother, with Rosa and with me, attempting to change the dynamic, attempting to stop all the bondage and discipline that was being inflicted upon me, however Rosa very stubbornly refused to be swayed by Prue's arguments. Ms. Cuthbert and I were much more polite; however, we also refused to stop the kinky bondage games. They were very important to me, and I think they had become important to Ms. Cuthbert as well. She seemed to enjoy having a teenage lesbian slave-girl in her house. She looked about ten years younger now.\n\nThen, the conflict with Prue was resolved in an unexpected way.\n\nAt least, I was shocked at the way things turned out. I suspect Rosa may have used psychology to manipulate Prue into the decision she made.\n\nMs. Cuthbert attempted to explain her daughter's decision to me one Saturday morning as I was naked, and on my knees, scrubbing the floor in her laundry room.\n\n\"My daughter feels a great sense of guilt for not protecting you from Rosa and me,\" she said, standing behind me and watching my naked butt move as I scrubbed, \"She seems to think that as your friend, she has a moral obligation to protect you from punishments and humiliations. And if she punished you herself, her feelings of guilt would be even more extreme.\"\n\n\"I've talked to her about that,\" I replied, \"I told her my brain isn't wired like hers. I need harsh punishments. They give me a sense of ....\"\n\nI trailed off not knowing how to describe the feelings of fulfillment and delicious sexual satisfaction I received from being abused and cruelly punished by dominant women.\n\n\"I understand that,\" Ms. Cuthbert replied, \"However, my daughter is very stubbornly refusing to see it your way. She clings to her feelings of guilt like a drowning man clinging to a life preserver.\"\n\n\"But to become a slave-girl herself,\" I asked, \"Was that really the best solution she could come up with?\"\n\n\"Spread your knees farther apart,\" Ms. Cuthbert admonished me before answering my question, \"Your pubic lips should be prominently on display when you're performing a task like this.\"\n\nI spread my thighs obscenely far apart, giving Ms. Cuthbert an excellent view of my wet sex and then she added, \"It's a more elegant solution than you realize. If she's bound and helpless, she has the ideal excuse for not rushing in to save you from the wicked women who are inflicting torment. And if we inflict cruel punishments on her, it's like she's doing a penance for not protecting her friend. Her feelings of guilt are nicely wiped away. It's very similar to when a person with a guilty conscience confesses their sins to a Catholic priest and is then given a penance to do before their sins are absolved.\"<br ><br > * * *<br >\n\nAt a casual glance, Ms. Cuthbert seemed so sweet and congenial, however, while living with her I discovered that Ms. Cuthbert had scheming, wicked aspects that lurked somewhere beneath her sweet exterior.\n\nMs. Cuthbert and Rosa planned out Prue's slave training, carefully deciding how to introduce her to the degradations and punishments of being a slave-girl. They wanted to make her conditioning unpleasant enough that her guilt would be absolved, but not so traumatizing that she'd be overwhelmed.\n\nGuilt had led her to want slave training, but if Rosa and Ms. Cuthbert frightened her too much, Prue might panic and quit her training before the first week was up. Things proceeded slowly at first, and with much supervision.<br ><br >Ms. Cuthbert took five days off from work, so she could be home to oversee her daughter's slave training. Also, hidden cameras were installed in several rooms in the house, making it easier to monitor her daughter. Ms. Cuthbert could access the camera feed from her phone. This insured that her daughter never had any privacy and had the bonus of allowing Ms. Cuthbert to make certain Prue's slave training wasn't causing her serious physical injury or severe emotional trauma. <br ><br > * * *<br ><br >Prue's first day of training was very ritualistic, with Rosa making a huge production about Prue's change in status. The ritualistic event was held in Ms. Cuthbert's office, a neat, tidy room in the Cuthbert home which housed a filing cabinet, a bookcase and a majestic looking, highly polished executive desk. Ms. Cuthbert sat behind the desk in a leather office chair, Rosa stood to the side, looking like a stern disciplinarian. Prue and I stood facing Rosa, like a couple of defendants facing a judge.<br ><br ><br >Rosa held a riding crop in her hands the entire time she lectured Prue on the realities of her new life as a slave. She never struck Prue with it, but just flexing it, pointing with it, and using it as a visual aid made Rosa seem more authoritative and intimidating.<br ><br ><br >Per Rosa's instructions, I was naked, my hands behind my back, wrists crossed.<br ><br >\"The first component of becoming a slave is giving up your freedoms and privileges,\" Rosa proclaimed to Prue, \"American teenagers enjoy their iPhones, internet porn, expensive Starbucks coffees, cable TV, Netflix, Facebook and Instagram. As a slave, you won't have access to any of these things.\"<br ><br >This had a bigger emotional effect on Prue than I thought it would, she gasped and flinched as if she'd been struck, however, she showed enough self-discipline to keep her mouth shut and not object.<br ><br >Then Rosa added, \"Prue, hand over your iPhone. As long as I am your mistress, you are forbidden to have one.\"<br ><br >After Prue reluctantly handed over her phone, Rosa said, \"And now, hand over your watch as well. As your mistress, I'll control your schedule. There won't be any need for you to keep track of the time. I'll be doing that for you and telling you what you need to do and when you need to do it.\n\nWith a sigh, Prue undid the strap on her wrist and handed her watch over to Rosa. Of course, that wasn't the end of the bad news for the poor, unfortunate, teenage girl.\n\n\"As a slave, you will also give up any right to privacy,\" Rosa announced, \"You will therefore write down all passwords and information I need to unlock your phone, read your emails, texts and private messages. As my slave, you will not be permitted to keep any secrets from me.\"\n\nA gasp escaped Prue's lips and she exclaimed, \"Rosa!\"\n\n\"If you intend to be trained as my slave, you will immediately surrender your right to privacy,\" Rosa insisted, \"Also, you are no longer allowed to address me by my given name. You will address me by the honorific, Mistress.\"\n\n\"Yes, Mistress,\" Prue said resignedly.\n\nI could tell this was difficult for Prue, however, she tenaciously soldiered on. I kept thinking she would say that it was too much for her, but she just kept going.\n\n\"Slaves are also not permitted to have money,\" Rosa proclaimed, \"If you have any checks, cash, credit cards, debit cards or anything else that can be used for purchases, hand them over now.\"\n\nPrue reluctantly handed over everything, and then she was told to hand over her driver's license, as slaves weren't permitted to drive either.\n\n\"And now for my favorite rule,\" Rosa said, \"Slaves aren't permitted any modesty. I shall therefore be keeping you naked the entire time I'm training you to be a slave.\"\n\n\"Mistress, You don't mean\" Prue asked nervously, \"Yes,\" Rosa said imperiously, \"I am ordering you to strip, right now!\"<br ><br >Prue bit her lower lip and gave Rosa a pained look, however she reached for the front of her V-neck blouse and began the process of unbuttoning. I could see Prue didn't want to strip naked in front of this stern woman. Also, she was probably embarrassed about stripping naked in front of her mother.<br ><br >I could tell this was difficult for Prue, but she was determined to not give up as soon as things became uncomfortable. She was determined to see this through, even if it meant doing things that took her way outside her comfort zone.<br ><br >One garment at a time, Prue divested herself of her clothing. When she was down to nothing but her polyamide thong panties, she gave Rosa an imploring look as if she were begging her for the small mercy of being allowed to keep at least a small shred of dignity.<br ><br >\"I said naked,\" Rosa said sharply, \"That means panties too. Take them off.\"<br ><br >Prue sighed heavily, hooked her thumbs into the waistband of her panties and pulled them down. It was very humbling for Prue, being forced to strip in front of this harsh, authoritarian woman, but she did it anyway.<br ><br >\"Don't cover yourself,\" Rosa barked when Prue crossed her arms over her breasts, \"Place your hands behind the back of your neck, elbows back!\"<br ><br >This pose Rosa had forced Prue into was deliberately humiliating. It left her naked body as open and displayed as much as humanly possible. With her elbows back, Prue was forced to thrust her breasts forward, as if offering them to Rosa for fondling, ogling or painful punishments.<br ><br >\"Better,\" Rosa said and the naked teen blushed at the way Rosa inspected her naked body, \"but your legs are too close together. A good slave always keeps her legs apart and her pubic lips available for her mistress to touch or examine.\"<br ><br >Prue whimpered, however, she obediently spread her legs apart and allowed her pudendum to be put indecently on display for her new mistress.\n\n<br >\"Don't forget to keep your legs apart,\" Rosa admonished her teenager slave, \"If I have to constantly remind you, you will be punished. When you're a slave-girl, keeping your vulva on display for onlookers is compulsory.\"<br ><br ><br > \"Another important rule for slave-girls is that their orgasms are controlled and rationed by their mistresses,\" Rosa stated firmly, \"Slaves are forbidden to touch themselves. And although you must always be ready for sex, you can only have sex with the people I approve of and at the times that I designate. Do you understand?\"\n\nPrue's voice was shaky, but she nodded and said, \"Yes, mistress.\"\n\nThen Prue was informed that slaves are forbidden to have pubic hair as it obscured the slave's genitals from view. I was then ordered to take Prue into the bathroom and shave her utterly smooth.\n\n\"If I find even a tiny bit of stubble, I'll punish you both,\" Rosa called out as I took Prue by the hand and led her back to the bathroom.\n\n<br ><br >Prue and I spent the next four or five hours on our hands and knees. We were made to scrub the kitchen floor, the dining room floor and the bathroom floors. We were also ordered to scrub out the bathtub and the shower. I had experience being forced to perform hours of physical labor while a harsh mistress ogled my naked body, however, this was all very new for Prue. I got a wicked sexual throb in my loins from being treated like this, however, for Prue, this was just humiliating and physically demanding.<br ><br >Prue's first day of slave training was traumatic, but not traumatic enough to overwhelm her or cause her to have a panic attack. However, at the end of the day, Rosa declared that Prue's bedroom was too fancy and extravagant for a slave-girl and from now on Prue and I would sleep in the basement.\n\nRosa escorted us downstairs and showed us the queen-size mattress stacked on top of a box spring. Apparently, they had been moved down there during the day and Prue was told that this was where she and I would sleep from now on.\n\n\"Mom,\" Prue said, her voice filled with girlish outrage, \"Do you see what she's trying to do to me? That bed doesn't even have any sheets or pillows!\"\n\nAll eyes focused on Ms. Cuthbert, but if Prue was hoping for sympathy or assistance from her mother, she was sorely disappointed.\n\n\"Sorry, honey,\" Ms. Cuthbert said, \"But until your slave-training is over, Rosa oversees your care and welfare. If you have a complaint about your sleeping arrangements, you'll have to talk to her.\"<br ><br >Predictably, Prue lost that battle. Rosa insisted that a slave asking for something better than a bed and a box spring was being impertinent. <br ><br >\"Cheryl, It's very arrogant for a slave to demand something better than this,\" Rosa said, her tone sharp, \"Your attitude had best become much more deferential and accommodating. Otherwise, I can promise a great deal of punishments in your future.\"<br ><br >That night, Prue was restless and had difficulty drifting off to sleep. Evan though she must have been exhausted from all the physical labor she had been forced to perform, she nonetheless tossed and turned and made sounds of frustration.<br ><br >\"I get it,\" I whispered, \"It's not easy being a slave. That's sort of the whole point. It's supposed to be intense. Just remember, if it's too intense for you, you can always quit.\"<br ><br >\"I refuse to quit,\" Prue whispered in response, \"I could never be a mistress, but I think I could be a slave. It's the only way that I can fit into your BDSM world. And the more we're slaves together, the closer I feel to you. I feel an unbreakable bond to you now, it's like we're sisters.\"<br ><br >I had to admit there was a certain logic to what Prue was saying. As Rosa treated us both like slaves, I felt a sense of solidarity with Prue. The way we had been thrown together as fellow slaves, I was feeling closer to Prue than I ever had before. She was getting to see the world through my eyes, and we were closer than sisters now. She could relate to my experiences now. I wrapped my arms lovingly around her and listened to the sounds of her breathing until she fell asleep.<br ><br >* * *<br ><br >The next day, Rosa revealed other ideas she had for slave training.<br ><br >\"Slaves should be in a perpetual state of sexual arousal,\" Rosa informed Prue, \"As a slave, you should constantly be ready for sex, your vagina should be always wet and your labia should always be swollen. Even if you mistress forbids you from having sex for several days in a row, you should always be ready for it.\"<br ><br >Rosa then informed Prue that her body would have to be conditioned to be in a state of perpetual arousal. This conditioning began with a trip to the basement.<br ><br >\"The type of conditioning you need will require a great deal of time and dedication to achieve,\" Rosa declared, \"We shall begin with binding you with your legs far apart. The more we expose your clitoris the easier it will be to achieve the desired effect.\"<br ><br >Prue's wrists and ankles were buckled into leather restraints and she was bound spread eagle, standing with her legs far apart and her hands apart and over her head. It was a shaming position that left Prue's pubic slit indecently on display. Of course, the rules of conduct for slaves demand that slaves be exposed like this at every opportunity.<br ><br >I had already been conditioned to be in a state of perpetual arousal, however, Rosa insisted that Prue and I be kept together and subjected to the same sort of abuses and humiliations. As a result, I was bound just a few feet away from Prue in the same vulnerable pose with my legs spread shamelessly wide, leaving my swollen pubic lips salaciously exposed.<br ><br ><br >\"And now, pretty-girl, today we're going to see just how much sexual excitement we can induce without actually bringing you to orgasm.\"<br ><br >Prue's eyes were with wide with horror, shock or outrage as Rosa's hands explored the teenager's naked body. I stood helplessly and watched as Rosa's forceful hands took possession of Prue's defenseless sex and breasts. I also stood witness as Rosa's fingertips traced teasing paths across Prue's nipples, her labia and her inner thighs. Prue tried to resist, however, resistance was futile and within minutes I could hear Prue gasping, see her breasts heaving and hear Prue's breathing become labored and see her face become a mask of sexual hunger. <br ><br >\"This is the most important part of slave-training,\" Rosa opined, \"Slaves should never have dignity or cool disdain where sex is concerned. They should be shameless about it. They should be craving it with a ravenous hunger. They should be eager for the touch of anyone that comes near.\"<br ><br ><br >\"I thought obedience was the most important part of slave-training,\" Prue said shakily as Rosa rolled Prue's nipples gently between her thumbs and forefingers.<br ><br >\"Obedience is crucial,\" Rosa conceded, \"However, obedience should not be easy. When a slave is ordered not to masturbate, it would be easy for her to obey if she permitted to wear clothing and her libido were not being chronically stimulated. However, when she is stripped naked and her loins are constantly throbbing with sexual need, following such an order requires a much greater degree of devotion and self-discipline.\"<br ><br >Prue moaned as her naked body was mercilessly teased and brought to feverish levels of arousal. Rosa played with the girl's nipples and fingered her pussy. There was a look of misery on Prue's face as she was teased and brought to the edge of orgasm, but denied climax again and again, leaving the poor teenager in an incessant state of longing and sexual torment.<br ><br >* * *<br ><br >I didn't require this sort of training as I was in a state of perpetual arousal without being constantly teased, however, Rosa wished for Prue and me to be kept together and for my treatment to mimic hers. As a result, I was bound spreadeagle and my naked body was played with. Sometimes Rosa would fondle my naked body and play with my sex, other times Ms. Cuthbert would take a turn, and sometimes even Heidi would come over and sexually abuse my poor body.<br ><br ><br >Heidi became Rosa's assistant. Rosa didn't pay Heidi any actual money for the work she did, however, Heidi enjoyed having authority over naked slave-girls, so she never complained about not being paid. Being able to ogle our naked bodies, give us orders, fondle us and occasionally punish us was a thrilling experience for her. She had no problem donating her services for free.<br ><br >One afternoon while I was bound spreadeagle, Heidi stroked her fingertips across my swollen pubic lips, making me moan and grunt. When I felt feverish with desire, she thrust two fingers into my vagina and explored the interior of my sex until she found my G-spot.<br ><br >\"Please, Mistress,\" I begged, \"It's been hours! Can't you allow me a few minutes to recover?\" Of course, Heidi had no intention of allowing me any such thing. She played with my pussy until my hips were squirming uncontrollably and my clit was so swollen that it ached. I could feel a powerful orgasm building up inside of me. I writhed shamelessly, thrusting my pelvis in an obscene manner and just when it seemed there was no means of stopping my screaming orgasm from erupting, Heidi removed her fingers from my wet, throbbing sex and she made her way over to Prue, to torment my friend.<br ><br >Prue and I would twist, writhe and squirm as we were sexually tormented. Before each day was over there would be a fine sheen of sweat on our naked bodies, our vulvas would be soaked with our own juices and there would be tears spilling down our faces.<br ><br >Rosa felt it was important for every slave to lose her dignity, her modesty and become a humbled, libidinous creature who hungered for physical contact so desperately that she would eagerly accept the touch of anyone, man, woman, friend, stranger, wealthy debutante or common laborer.<br ><br >And although Rosa didn't mention it, I felt that Prue's beauty was enhanced as she was tormented. As Prue's libido was mercilessly incited and stoked to feverish levels, her nipples became engorged and looked more delicious than ever. Her abdominal and thigh muscles became more prominent as she suffered and strained against her bonds. Even her face looked more lovely as suffered and burst into tears.<br ><br >By the fourth day of Prue's training, an element of pain was introduced to Prue's training. It was Rosa's opinion that all slaves should be sexually aroused by corporal punishment. Prue wasn't wired that way, but Rosa felt that Prue could be conditioned to feel sexual desire whenever she was spanked, whipped, paddled or made to suffer similar punishments.<br ><br >* * *<br ><br >\"Ow! Ow! Ow! Ow! Aaahhh! Aaaaaaaaaaagghhh!\" <br ><br >Prue's training had become much more painful. When Prue's arousal reached staggering levels, Rosa would use a belt or leather paddle to redden Prue's poor bottom. And when the pain seemed to kill Prue's sexual arousal, somebody would caress and fondle and finger Prue until her nipples were hard and her pussy was soaking wet.<br ><br >It was all part of a plan to condition Prue to think of the pain and pleasure as one in the same. It was natural for me to think in that way, but it was very contrary for Prue. As a result, she needed plenty of conditioning to get her to associate sexual arousal and painful punishments in concert with each other.<br ><br >I didn't require the same training as Prue, but Rosa insisted that I be put through my paces, just the same as Prue. I was teased and spanked, fondled and spanked, fingered and spanked. I was in solidarity with Prue as she was teased to the brink of a powerful orgasm and then subjected to corporal punishments.<br ><br >\"Do you like that?\" Heidi asked as she worked two fingers deep within my vagina, and cupped one of my breasts, \"You're soaking wet and your heart is beating like a wild thing.\"<br ><br >Hours of intense teasing had left me a feverish mess. My legs were weak from the constant sexual stimulation, causing the juices from my sex to overflow and leak down onto my thighs. Rosa had taught Heidi how to torture a girl by playing with her nipples, rubbing her g-spot and stimulating her clitoris until it was painfully swollen and then to leave her trembling on the edge of an earth shattering-orgasm.<br ><br >If I wasn't bound spread-eagle with chains and leather restraints, I would have fallen down by now. My legs felt weak and rubbery and were no longer capable of supporting my weight.<br ><br >\"Please, Mistress,\" I begged my tormenter, \"I haven't cum in days. I desperately need some relief. Be kind to me.\"<br ><br >I could feel my orgasm approach as Heidi's fingers explored the interior of my wet sex, then just as I was about to climax, she pulled her hand away. My pelvis immediately thrust forward, as if pursuing her retreating hand. Heidi laughed at me and picked up a leather belt off a nearby table.<br ><br >\"Rosa didn't say anything about being kind to you,\" Heidi informed me, \"She wants the two of you in constant torment and sexual distress. Your naked bodies belong to her and you don't get any sexual relief until she says so.\"<br ><br >Heidi then proceeded to punish my ass with her leather belt until my entire backside was a mass of stinging, red-hot pain. Then she moved on to Prue to play with her naked body and leave her right at the edge of a soul-shattering orgasm.<br ><br >Prue and I suffered a great deal and pleaded desperately for our tormenters to allow us an orgasm. Of course, Rosa had dealt with the desperate pleas of slave-girls before, and she had a plan in mind for dealing with girls like us.<br ><br >* * *<br ><br >\"So, Heidi tells me that my naked slaves have been asking for permission to cum,\" Rosa said imperiously as she walked around gracefully in high-heeled boots and slowly circled Prue and me.<br ><br >\"Yes, Mistress,\" we replied in unison. We were still naked and bound spread-eagle. My whole body was trembling from sexual frustration, my sex was so wet it was dripping, and my clit was so hard and swollen that it ached. And Prue was in the same miserable situation as I was. <br ><br >\"Very well, I shall make a deal with the two of you,\" Rosa said, \"I shall grant you permission, but the two of you need to do something for me. My two libidinous slaves need to request that I whip them...between your legs. Ask me nicely to whip your pussies, and I promise you both powerful, awe-inspiring orgasms.\"<br ><br >My eyes widened, and I felt stunned by the offer. I was experienced in these sorts of matters and I knew firsthand the sort of cruel, savage pain involved when a girl's defenseless labia were punished by a whip. It would be far too merciless to subject an innocent like Prue to that sort of agony. There was no way I would agree to those terms.<br ><br >And then Prue shocked me by replying, \"Please, Mistress, whip our pussies. We'll agree to any sort of whipping in exchange for orgasms.\"<br ><br >I hadn't seen that coming. Prue was young and inexperienced and had very little experience with painful punishments. Her need must have been more severe than I thought for her to agree to something so drastic.<br ><br >\"That was beautifully said, dear,\" Rosa replied, as she ambled over to Prue and gently cupped her chin, raising her face up \"I shall grant your request.\"<br ><br >Rosa made us wait while she made some phone calls and invited over several women to witness our humiliation. It didn't take long. Apparently, when you send out invitations to see a beautiful, naked girl whipped on the most intimate portion of her anatomy, people come running. <br ><br ><br >Heidi enjoyed watching me suffer, so of course she was there. And to add to my humiliation, Heidi brought Sarah Waterbury along. Heidi and Sarah had become close friends, and I think Heidi was being a bad influence and seducing Sarah into the BDSM lifestyle.<br ><br >Prue's friend Josephine also arrived, eager to see her friend subjected to a cruel whipping. <br ><br >\"Prue, I called your mother and invited her to watch, but she said she's tied up at work and can't attend. However, I'm making a video recording and I'll show it to her later.\"<br ><br >\"Video recording, Mistress?\" Prue asked timidly.<br ><br >\"Oh, yes,\" Rosa confirmed, \"I have several hidden cameras down here in the basement. I should be able to record your whipping from four different camera angles.\"<br ><br >Prue gasped, I'm not sure if it was the thought of her mother watching a video of her daughter being whipped across the delicate folds of her pussy or the fact that Rosa had been secretly recording her slave-training for several days without her knowledge, but Prue looked stunned and humiliated.<br ><br >\"The way you've got her bound, there's no way she can avoid the whip,\" Josephine observed, \"That seems unfair somehow.\"<br ><br >\"It's a cruel exposure for a naked girl,\" Rosa conceded, \"It leaves her utterly defenseless. However, Prue is undergoing slave-training. It's essential that a slave experience helplessness. Being helpless and cruelly exposed is good for her.\"",
        "All three spectators accepted Rosa's assertions without question or complaint. And then Josephine asked, \"May I touch them?\"<br ><br >Rosa seemed to consider the question for a few seconds and then responded, \"You may, but only from the waist up. I will not allow you to do anything that might accidentally push them over the brink, into orgasm.\"<br ><br > The teenager's eyes lit up with excitement, and immediately made her way over to Prue's helpless nudity. Josephine seemed entranced and she took Prue's breasts in her hands and played with her erect nipples. Prue moaned and made feminine gasping sounds as her friend grasped her nipples and gently stroked them. Then she leaned into Prue's chest and began to lick her nipples, getting them good and wet.<br ><br >\"Aghhhhhh,\" Prue moaned as Josephine's mouth stimulated two nipples that were already swollen and excited. My friend squirmed and trembled as her nipples were toyed with, but her bonds kept her from doing anything more consequential than that. <br ><br >When Prue was whimpering with sexual distress, Josephine walked away from her and approached me. I flinched as she reached out for my defenseless body, but there was no way for me to evade her hands. The way I was bound I could barely move. <br ><br >My nipples were already swollen, erect and hypersensitive. When Josephine brushed her thumbs and her fingertips teasingly across my inflamed nipples an agonizing wave of desire wended its way through my entire body, heating my loins, hardening my nipples and causing my sex to throb in hungry spasms.<br ><br >\"Aahhhh, Josephine,\" I protested, then Josephine pinched and pulled on my nipples cruelly, eliciting sharp pain in my pink nubs and causing me to cry out in distress.<br ><br >\"I think it would be better if you called me, Mistress, don't you?\" Josephine asked as she continued to abuse my tender pink nipples. I nodded my head and rapidly agreed, \"Yes, Mistress! Absolutely, Mistress!\"<br ><br >The things that happened after that were something of a blur. My body had been dramatically overstimulated, and my emotions were thrown into turmoil. I felt feverish, my head was reeling and there was an intense pulsing in my loins.<br ><br >My pubic lips were swollen and slick with my own juices, my pussy was so wet it was dripping, I sighed and panted and desperately needed some sort of release, and then Rosa came forward with her whip and declared, \"Your pink pubic lips are quite swollen and exposed. They want this and we've made them wait long enough.\"<br ><br ><br >The whip Rosa had chosen looked wicked, it was a single-tail whip that reminded me of those buggy-whips from old 19<sup>th</sup> century photos from when people traveled by horse and buggy. It was black and leather and looked sadistic. Even before Rosa struck me with it, I could tell it was going to inflict agonizing pain on my bare skin.<br >\n\nMy heart hammered away violently in my chest as I thought about how vulnerable I was. My smooth vulva was utterly exposed. My bald, pouty pubic lips were shamelessly on display as if calling attention to themselves.<br ><br >The first cut of Rosa's whip missed the delicate folds of my labia and instead cut across my inner thigh. The pain was sizzling, and I shrieked, to the delight of women who had gathered to watch me suffer.<br ><br >Thwack! Rosa had better aim with her second stroke and the whip struck me directly across my plump, swollen pubic lips. \"Aaaaaaaaaaaahh,\" I screamed as my innocent sex was abused.<br ><br ><br >\n\nThwack! Thwack! Thwack!\n\nThe first two blows of Rosa's whip came at me leisurely with a significant pause between lashes, then the pace sped up with Rosa's whip striking my poor, inflamed labia rapidly three times in a row. I screamed helplessly, filling the basement with sounds of feminine agony and then the cruel pain between my thighs underwent a metamorphosis and the scalding pain became red-hot passion.\n\n\"Aahhhh, huhh, Uuhhhhhh, Uuhhhhhh,\" I gasped, and my gasps turned to moans as my sexual passion overwhelmed the pain. I was still overwhelmed with physical sensations, but those sensations became dark desire and that dark desire consumed me. My body reflexively writhed every time the whip hit my pussy, with my pelvis being thrust out in an indecent fashion as if offering my poor pudendum to be whipped even harder.\n\n<br >The slender whip splat wetly when it struck my inflamed pubic lips. My heart pounded insistently in my chest as my innocent pubic lips were punished by Rosa's cruel whip, however, the pain felt agonizing and gorgeously sweet at the same time. Every burst of bright pain was accompanied by a libidinous throb in my loins. My pussy throbbed with the most penetrating and exquisite sensation.<br ><br >\"Aaaahhhh,\" I cried out mindlessly as Rosa's whip assaulted my naked body, targeting the delicate pink folds between my tautly spread thighs. My vulva became engorged, my belly streaked with the painted lines of pain, and just underneath the stinging pain was an enduring libidinous fire. And when the passionate fire within my loins overpowered the pain, my mind was unable to comprehend anything other than the powerful orgasm growing inside of me.<br ><br >I gasped, moaned, panted and screamed my way through the orgasm. My nipples throbbed, my vagina throbbed, my entire body screamed with feverish passion as Rosa's whip drove me to the point of erotic, feverish delirium. I screamed and thrashed my head from side to side as the potent orgasm caused my body to spasm incessantly. <br ><br >It felt like days later when the thrilling orgasm finally reached its feverish conclusion. Rosa left me bound spread eagle and covered in beads of perspiration as I panted, my breasts heaved, and I savored the post orgasmic sensations of satiation and joyous agony. My pussy was still sore and tender from the whip, but I found myself to be relaxed and contented in a way I hadn't been in a long time.<br ><br >As I panted and sobbed, I assumed that nothing more amazing could possibly happen than my own experience with Rosa's whip, but I was wrong.<br ><br >Prue looked so innocent and helpless as Rosa approached her with her thin, coiled whip. My heart went out to her, thinking she wasn't ready for the sort of abuse she was about to receive, but when Rosa's whip struck the innocent teenager between her legs, instead of screaming, she let out a gasp like a woman in the throes of libidinous passion.<br ><br >The second lash of the whip earned a similar response. Prue wasn't acting like a woman suffering in agony, she was acting like a woman being expertly brought to orgasm. From the very first blow, Prue made sounds of feminine bliss and sexual excitement.<br ><br >Let us remember, I'm a pain-slut and even I need two or three lashes of the whip before I begin to feel the sweet beginnings of a powerful orgasm. So, it was something of a marvel when Prue embraced the erotic potential of her punishment even more readily than me.<br ><br >She was a failure as a dominant, but as a submissive, she was an outright success. Even I was impressed. She took to the lifestyle like a duck to water. <br ><br > * * *<br ><br >At some point later, Rosa released us from our bondage and Prue wrapped her arms around me in an emotional embrace. We had been friends for years, but something magical happened that day that brought us much closer.<br ><br >I held Prue in my arms, her breathing was labored, her naked body felt feverish to the touch and she was slick with perspiration, however she had a blissful smile on her face. And as she pressed her bare breasts suggestively into mine she placed her mouth near my ear and confided, \"I used to think all of this slave-girl stuff made you crazy, and maybe it does, but I get it now. I understand it now. I understand why you do it. It's amazing. I've never felt more alive than I do right now.\"<br ><br >  * * *<br ><br >I felt much closer to Prue and that night we stayed up for hours, talking about the changes she had gone through. I had never expected Prue to become a corporal submissive, and I had questions. Prue was eager to unburden herself and, after we were locked in our cell that night, we chatted like a couple of schoolgirls.\n\nAround about midnight, Rosa came down and declared that it was a violation of slave protocol for Prue and me to be endlessly chatting with each other, \"You're slave girls, not cheerleaders at cheer camp. Slave training is a serious experience and I expect you two to show the appropriate amount of solemnity that this experience demands.\"\n\nHaving admonished us, Rosa ordered us out of our bed and chained us on the floor. We were chained spread-eagle so couldn't touch ourselves and ball-gags with heavy leather straps were buckled tightly into our mouths so that we would no longer be able to talk.\n\n<br >The added frustration of being unable to converse, when Prue and I had so much to say, made falling asleep difficult. And when I did manage to drift off, my sleep was plagued with dreams of being naked and bound and on display in front of groups of strangers. In my dreams, cruel women fondled my breasts, rolled my nipples, pinched me and enthusiastically probed my vagina with their fingers, but never quite allowed me to reach orgasm. <br ><br > * * *<br >The very next day, April and her mother arrived to take me home. Apparently, April's Uncle Ed had gone off to terrorize friends and/or family in Hillsboro. And as such, it was safe for me to come back home.<br ><br >\"I've missed you,\" April said, and she enveloped me in a warm, affectionate hug. I wrapped my arms around her in response. I loved the sound of her voice, the feel of her against my body, I loved the smell of her, I loved her soft skin and her hard, firm muscles.<br ><br >\"I missed you too,\" Mrs. Ladd said, and April released me from her embrace so I could go hug her mother. Mrs. Ladd was about twice my age, but her scent and her physical appearance was very similar to that of her daughter. I suppose Mrs. Ladd was a preview of what April would be like in her late thirties.<br ><br >\"You should probably get dressed,\" April suggested, \"I'm pretty sure the neighbors will talk if they see a naked teenager walking out of Prue's house.<br ><br > * * *<br ><br >When I returned home, even Stefania hugged me. Stefania is normally a cold, dispassionate and utilitarian woman. She'd never been emotionally demonstrative, but she welcomed me back with a warm, passionate hug. <br ><br >\"Stefania, are you okay?\" I asked, surprised by her display of emotion.<br ><br ><br ><br >\"You may only be April's slave, but you are also a part of this family,\" Stefania told me, \"While you were gone, I missed you. We all missed you; this home was lacking an essential part of itself.\"\n\nThat was the nicest thing Stefania had ever said to me. Compared to her traditional stoic demeanor, this was gushing with sentimentality.\n\n\"That's very nice of you to say,\" I told Stefania, searching for the proper words to respond to the maid's newfound warmth and tenderness, \"You are um,\"\n\nI couldn't think of the appropriate words, so I ended up kissing her. I'd never kissed Stefania before, but in my experience, kisses are almost always welcome. People like it when I kiss them. And when our lips met, this dispassionate maid seemed to melt into the kiss and even allowed me to force my tongue into her mouth.\n\n\"That was good,\" Stefania said after our mouth separated, \"I enjoyed that. But next time I initiate. It is improper for a slave-girl to take the initiative like that.\"\n\n\"Sorry, Stefania,\" I apologized.\n\n\"Later I will punish you for failing to remember your status. Slave-girls do not kiss maids without permission. They must always remember their place.\"\n\n\"You always enjoy punishing me,\" I said, smiling as I said it.\n\n\"Yes, I do,\" Stefania conceded, \"but right now you must go to April. Your mistress has great desire to reconnect with you, and it would be improper for me to delay that reunion. Go to her. I promise I will punish you later.\"\n\nAt Stefania's urgings, I went off and found April. She smiled brightly at me when I told her what Stefania said.\n\n\"You've been away for far too long,\" April said, \"I feel like it's been years. And if I'm gonna get over your long absence I need to run my hands across every inch of your naked body and poke my tongue into your mouth and pussy. I need to see if you still taste the same.\"\n\n\"If that's what you really want,\" I said, as I began to unbutton the front of my blouse, \"then why not do that right now?\"\n\nI had my blouse off and was unzipping the front of my pants when April interrupted me and said, \"I love your enthusiasm. Get naked and come join me upstairs. I'm gonna take you into the bath and wash you first.\"\n\nWhen I was naked, I climbed the stairs and followed my mistress into the bathroom. She was still fully clothed and running the water for our bath.\n\n\"Close the door behind you,\" April said, \"and lock it. We're going to be here a while.\"\n\nTrue to her word, April ran her hands all over my body. I stepped into the warm water of the bath and April began by getting me wet. I stood in the water and April took a warm, wet washcloth and wiped it methodically across every inch of my body from my ankles to my shoulders. The wet cloth was stroked across my calves, my thighs, my underarms, my breasts and every other part of my body April could see. And when I was wet from my collarbone all the way down to the tips of my toes, April stripped naked and got into the tub with me.\n\n\"We're just getting started,\" April informed me as we both stood ankle-deep in the water and she coated her hands in a pleasant-smelling body wash.\n\nWhen her hands were slick, she began to touch me all over once again. This time she paid special attention to the more delicious parts of my anatomy, leisurely massaging my thighs and buttocks with her hands, kneading my breasts and rubbing her fingertips repeatedly across my swollen labia and the soft, pink flesh of my anus.\n\n\"Oh God,\" I gasped,as April stirred my libido by rubbing my naked body everywhere.\n\n\"You like my hands?\" April asked teasingly and then she slid two fingers into my asshole.\n\n\"Oh,\" I gasped, and then she stroked my hard, swollen clit until it emerged from its hood.\n\n\"Mistress,\" I panted, \"If you keep doing that, uh, uhhh, huhh,\"\n\n\"I know what will happen if I keep doing that,\" she said, \"Now, spread your legs and let your orgasm build. I want to taste you.\"\n\nApril used the wet cloth to wipe the soap away from my vulva and then thrust two fingers inside of me. Everything she did caused me to tingle and tremble with lust. I was so aroused my legs were shaky. And then April clamped her mouth over my vulva and thrust her tongue inside of me, probing the interior of my vagina and causing me to scream.\n\nMy universe exploded and my legs gave out underneath me. I screamed in wanton libidinous ecstasy and ended up collapsing on top of April. It was a very undignified situation, two naked girls in a pile, one trapped underneath the other, but I was too overwhelmed with orgasmic bliss to care.\n\nThere was a knock on the bathroom door and then Mrs. Ladd unlocked the door, stepped inside and asked, \"Are you two okay?\"\n\n\"We're fine,\" April told her mother, \"We were having sex and I think I have overstimulated Cheryl a little bit.\"\n\nMy legs felt rubbery and I was unable to stand, however, I did manage to crawl off my mistress and achieve a semi-dignified sitting position in the tub. I gazed in Mrs. Ladd's general direction and said, \"I'm fine. I was just overwhelmed for a few seconds.\"\n\nMrs. Ladd told her daughter not to let me drown, and then she backed out of the bathroom, closing the door behind her. April gave me a few minutes to recover and then the erotic games began again. I was ordered to soap my mistress up, get her all slick and wash her before licking her to orgasm. Eventually the water grew tepid, so we drained the tub and filled it with hot water once again. Then we covered each other with body wash, fondled each other, and rubbed our naked, slick bodies against each other, causing April to gasp and squeal in delight\n\nApril and I spent hours in that tub, trying different methods of arousing each other, I licked April's asshole, I probed her vagina with my tongue, I took her clitoris into my mouth and sucked on it, I even pressed my vulva to hers and we writhed and rubbed our swollen labia together until the intense, slippery friction of our genitals stroking against each other caused both of us to erupt into delicious eruptions of orgasmic pleasure.\n\nI lost track of how many orgasms we had; however, Mrs. Ladd informed her daughter that she and I spent four hours in that bathroom.\n\nI toweled my mistress dry, and eventually we went to bed together. My ankle was shackled to a chain that kept me from leaving the bed while my mistress slept, but I was happy, and I slept soundly all night long.\n\n<br >The next morning, Stefania groomed me, shaved my legs, my vulva, and underarms. She also brushed my teeth, washed and styled my hair and all the other important aspects of grooming a slave-girl. Stefania didn't believe that slaves should groom themselves, so I got treated like a life-size Barbie doll for Stefania to style and make pretty.<br ><br >During the times that April and Mrs. Ladd didn't have plans for me, I was under the direct supervision of Stefania. She was always able to find chores for me to do. In some ways I was like a second maid, except for the fact that I did all of my chores in the nude and I could be spanked if I failed to complete my chores to Stefania's satisfaction.\n\n<br >\n\nAfter breakfast, Stefania and I were washing breakfast dishes and I casually asked her, \"So, after this do you want to punish me?\"\n\n\"I cannot,\" Stefania replied, \"Mrs. Ladd wishes to take you out on a date tonight. I promised her I would not punish you until after.\"\n\n\"A date?\" I asked, \"You mean like where two people who are in love with each other go out in public and have a good time kind of date?\"\n\n\"Do not act so surprised,\" Stefania advised, \"Mrs. Ladd loves you, we all love you. A date is not so unusual.\"\n\n\"Wait, we all love you? Wait, Stefania are you saying you love me too?\"\n\n\"Yes, blonde girl, I love you too,\" then she leaned forward and kissed me on the mouth. It was a warm passionate kiss.\n\nAnd when she broke from the kiss she said, \"I love you, but I will still punish you.\"\n\n\"I wouldn't have it any other way,\" I replied, and then Stefania kissed me again, this time forcing her tongue into my mouth."
    ],
    "authorname": "Schlank",
    "tags": [
        "cfnf",
        "cunnilingus",
        "edging",
        "lesbian",
        "lesbian bdsm",
        "lesbian cunnilingus",
        "lesbian femdom",
        "orgasm denial",
        "tease and denial",
        "whipping"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/cheryls-passion-ch-15"
}
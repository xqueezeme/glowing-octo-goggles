{
    "title": "Kelsey's World Ch. 11",
    "pages": [
        "Kelsey woke early Monday morning. It was the first day of her new job, and she wanted to have plenty of time to get ready. She was looking forward to the new challenge, working with her father at his advertising company. Bobby's friend Albert was his partner at the small firm, but they had more work than they could handle and Kelsey's commercial art degree made her the perfect person to hire.\n\nShe and Sharron converged on the coffee maker at the same time, eager for their morning fix. Sharon filled it with water while Kelsey scooped in the aromatic ground beans.\n\n\"I love how easy you fit in around here,\" Kelsey said, admiring Sharron's nakidity. \n\n\"It wasn't hard,\" Sharron said. \"I've always been pretty good at going with the flow. I gotta admit, going without clothes is kind of awesome.\"\n\n\"I know, right?\" Kelsey said.\n\nShe split a bagel and put it in the toaster. Sharron scooped some fresh cut fruit into a bowl. She tucked into it at the table while they waited for the coffee.\n\n\"I called Happy last night,\" Sharron said, smiling as she forked a piece of melon into her mouth.\n\nKelsey smiled. \"Was it good,\" she asked, looking like she already knew.\n\n\"We talked for an hour and a half,\" Sharron said, smiling some more. \"I'm not gonna get carried away, though. I'm still married, for another couple months or so, but it'll be nice to have a male friend.\"\n\n\"A friend with benefits,\" Kelsey said. \"They're awesome.\"\n\n\"Yeah,\" Sharron said. \"I didn't think I was young enough for that kind of thing, but it's kinda great.\"\n\n\"Nice,\" Kelsey said, nodding. \"I knew you guys'd be good together.\"\n\nKay and Bobby wandered in just as the coffee was ready. For the first time, Sharron didn't even glance at the cock swaying between Bobby's legs. She'd gotten thoroughly used to it.\n\n\"Sharron's got a boy-frieeend,\" Kelsey teased, the way little girls do.\n\n\"I know, Honey, isn't it nice?\" Kay said.\n\n\"What did I miss?\" Bobby asked.\n\n\"Sharron, Honey. She's got a date with Happy,\" Kay said.\n\n\"Oh, great!\" Bobby said. \"I don't wanna be a downer or anything, but you might want to keep it private until the divorce goes through.\"\n\n\"Yeah, we already talked about that,\" Sharron said. \"I'm going to his place.\"\n\n\"Perfect,\" Bobby said. \"He seems like a great guy.\"\n\n\"What do you think about Koop and Barbara?\" Kelsey asked. \"Do you think he's her type?\"\n\n\"Did you decide to be a matchmaker now, Honey?\" Kay asked.\n\n\"No, it's just a thought,\" Kelsey said.\n\nA few minutes later, Kelsey was at the counter refilling her mug. \"Tell me about the hooks and stuff in the blue room,\" she said.\n\n\"What do you want to know, Honey?\" Kay said.\n\n\"Was that for you guys, or other people?\"\n\n\"Well, there was a couple who used to come around, way back before you were watching us. They got some of us to try a little bit of bondage. There was some interest, so your father and Albert installed the hangers and we bought a few things. That couple drifted away from us and we've all sort of lost interest I guess. Do you enjoy that kind of thing, Honey?\"\n\n\"Not especially. I did that one tied-up scene at Tucker's, but that's it so far. I know somebody that might like it.\"\n\n\"Oh. Well, it's all there,\" Kay said. \"The hooks are good and strong. We've got cuffs and leather lashings and some buckle-on strappy things. There's some whips and things too, and of course the big swing. I'd have to dig it all out.\"\n\n\"Have you used that stuff?\" Kelsey asked.\n\n\"We did, back in those days. It's been years. I liked it some. You father liked it. I think a lot men like to tie up their women and fuck 'em silly.\"\n\nKelsey giggled. \n\n\"It goes both ways,\" Bobby said. \"There's women who like to be tied up, and there's men who like to be tied up.\"\n\nBoth he and Kay were curious about which of Kelsey's friends might be into all that, but they didn't ask. Kay didn't tell about the time she was hung by her wrists and ankles on the swing and gang-banged by six men and five women. It was one of her most cherished memories, but she wasn't sure if Kelsey and Sharron were ready to hear about it.\n\n\u2014\n\n\"Hi Barbara!\" Kelsey said.\n\n\"Oh, hi Kelsey. Didn't Austin text you? His shift got changed. He's on 'till nine.\"\n\n\"Oh, shoot! Oh well. Tell him I stopped, will you?\"\n\n\"Sure. How did your first day go? Would you like a glass of wine or something?\" Sharron asked.\n\n\"Sure, that'd be awesome!\"\n\nKelsey stepped into the living room of the small house, taking in some more details that she missed the previous time.\n\n\"So? How was it?\"\n\n\"Oh! It was so good! Daddy and Uncle...I mean, Albert, were so nice. They got me started on a project, doing a digital painting of ballet dancers. It's gonna be so cool. For the side of a bus, you know?\"\n\n\"That sounds fun!\" Barbara said. She walked Kelsey into the kitchen, took two glasses from the cupboard and poured some wine. \"I was never creative. I envy people with that gene.\"\n\nBack in the living room, Kelsey went right to the bookshelf with the family pictures. She picked up the one she'd seen the other day of Austin, bare chested, with the fish in his hands.\n\n\"Austin told me about your vacations. I was always jealous of my friends who did that kind of thing. New Hampshire, was it?\"\n\n\"Yes. Near Wolfeboro. We went for quite a few years.\"\n\n\"I think it's so cool that Austin lost his virginity there. It's like something somebody'd write in a fantasy.\"\n\nKelsey was well aware that Barbara might not be comfortable with the subject. She liked pushing the envelope, and thought it might be a good way to get Barbara to loosen up and talk about sex a little.\n\n\"He told you?\" Barbara asked, sounding surprised.\n\n\"Yeah. Mrs...Leblanc, was it? What was she like?\"\n\nBarbara fumed inside when she heard the name, but she didn't want Kelsey to think she was prudish so she tried to act civil.\n\n\"She was...very nice. We were sort of best friends for those two weeks each year.\"\n\n\"Was she your age?\"\n\n\"Yes.\" Barbara fumed again. She wasn't sure if she could keep up the act much longer.\n\n\"What was her husband like? Was he hot?\"\n\nA smile slowly overtook Barbara's face. She laughed. \"You have a way about you, don't you,\" she said, her eyes twinkling at Kelsey's. \"Yes. He was.\"\n\n\"Big cock?\"\n\nBarbara choked a little on her sip of wine. \"Oh my God, you are just...\" She smiled a little and looked deep into Kelsey's eyes. \"Yes. Yes it was.\"\n\nKelsey smiled. She had a feeling fucking the guy would have been the best revenge if Barbara was super mad at Mrs. Leblanc.\n\n\"Austin said things got weird. It sucks that people can't just enjoy sex, you know?\"\n\n\"Yes,\" Barbara said, knowing she should have felt that way about Austin back then. \"I know.\"\n\nKelsey knew things were getting good, so she went to the kitchen and returned with the wine bottle, pouring a fresh splash in both glasses. Barbara smiled at the headstrong, perceptive, sweet young woman.\n\n\"So, just between us girls,\" Kelsey said, \"do you wanna know what happened out on the boat that night?\"\n\nKelsey smiled a sweet smile. Barbara's mind worked feverishly. Of course she wanted to know, but did she want anyone to know that she wanted to know? She made the mistake of looking at Kelsey's smile again.\n\n\"Did he tell you?\" she asked.\n\n\"He told me the whole thing. It's a big deal for a boy, you know? I get the feeling it was, like, perfect. If I had a son it'd be just what I'd wish for him.\"\n\nBarbara was fascinated, but Kelsey's words saddened her. She'd been furious all those years ago when the incident happened. She didn't let Austin know that, but he sensed it, and things certainly did get weird after that night. There had been many times when she questioned herself about how it all went down, but sitting there with Kelsey was the first time she'd realized she botched things thoroughly. Adeline Leblanc probably was the perfect person to take his virginity. It was safe. She was clean. She was loving. Barbara felt like standing up and kicking herself 'till she was black-and-blue.\n\n\"It's a super hot story,\" Kelsey said.\n\nShe proceeded to tell Barbara about the crotch rubbing, the blowjob, the instruction in pussy licking, the way Mrs. Leblanc rode Austin on the seat, and...\n\n\"So they ended up doing doggy-style on the floor of the boat,\" Kelsey said. \"Can you imagine? She musta cum like crazy with that big cock of his.\"\n\nBarbara looked stunned. Kelsey suddenly realized she'd gotten carried away. \"Oh, fuck. Sorry. I shouldn't have...got so detailed.\"\n\n\"No, it's okay,\" Barbara said, fighting for composure. \"I'm his mother. I know what he...looks like.\"\n\nBarbara's head was spinning as she thought about it all. No one had ever talked to her about her son the way Kelsey was doing, painting vivid pictures of him fucking a sexy older woman, a woman the same age as her. Kelsey knew some good ground was being broken, but she didn't know where to go with it all.\n\n\"I just...think it's kinda awesome that he got such a good education from somebody nice like that,\" Kelsey said.\n\n\"Yes,\" Barbara said, trying her best to sound casual about it all. \"It took all these years for me to realize it, but you're right, Kelsey. Thank you. I'm afraid I didn't handle it very well back then. I wanted Austin to be my little boy forever.\"\n\n\"Yeah, I can understand that,\" Kelsey said. \n\n\"But I'm over that now,\" Barbara said, sounding proud of herself. \"He's very much a man.\"\n\n\"Yeah he is,\" Kelsey said, with a tinge of sexy in her voice. \"It's funny though, he never got over the older woman thing. He's always checkin' you guys out.\"\n\nBarbara didn't know how to respond. Her mind was flooded with imagery \u2014 Austin's big hard cock; Austin's big hard cock in Adeline Leblanc's mouth; Austin's big hard cock in Kelsey's mother's ass; Austin's big hard cock in her very own hand.\n\nTalking to Kelsey was unlike anything Barbara had experienced with her other adult friends. It reminded her of the purity of conversation back in her teen years, but even back then sex hadn't been so openly discussed. Barbara was liking it, even if it was dangerous territory.\n\n\"More wine?\" she asked, as she pored her glass full.\n\n\"You might have to drive me home,\" Kelsey smiled.\n\n\"Will everyone be naked when we get there?\"\n\n\"Yup,\" Kelsey said, her eyes twinkling.\n\nBarbara didn't respond. She filled Kelsey's glass, nice and full.\n\n\"What do you think of it?\" Kelsey asked. \"I always wonder what people think.\"\n\n\"About what?\"\n\n\"Us being naturist. Not wearing clothes.\"\n\n\"Oh,\" Barbara said. \"Well, I'll be honest with you. Years ago, when I first heard that your family...did that...I thought it was crazy. Just flat out nuts. But...I...don't think that anymore. It's certainly different, but... I don't know, it's not crazy. It's just different. I envy you guys. After seeing your mother and Sharron in the garden...it just seems so freeing.\"\n\n\"Oh, it is,\" Kelsey said. \"And it's easy. It just starts with tryin' it.\"\n\nBarbara smiled. \"Why do I have the feeling you're going to suggest I take off my clothes?\" \n\n\"It's easy,\" Kelsey said, putting her glass down. \"Really.\" She unbuttoned the nice blouse she'd worn to work, slipped it off her arms and draped it over the arm of the couch. Barbara had seen her in a tiny bikini in the driveway, but the way her big tits looked in the lacy bra took her breath away. There was no more breath to take away when the bra came off. The most perfect hard nipples in the world held Barbara's gaze much too long.\n\n\"Your turn,\" Kelsey said.\n\nBarbara smiled. Kelsey's magic was sweeping her way. She put her glass down and whisked the white v-neck t-shirt over her head, spilling her hair into a lovely mess. She reached behind herself, wondering at the last minute if she was crazy. She tossed her bra to the floor.\n\n\"Yeah!\" Kelsey said. \"That's it! Now move. Make 'em move a little.\" Kelsey demonstrated, shaking her big ones from side to side. \n\nBarbara smiled wide and shook hers too. \"You're crazy!\" she giggled. \"This is crazy!\"\n\n\"Sit here for...fifteen minutes, and then tell me if it's crazy,\" Kelsey said.\n\nFifteen minutes later they were laughing and chatting without a care in the world.\n\n\"See? It feels good to have your tits out, right?\" Kelsey said. \"Pants now.\"\n\n\"Kelsey, I can't,\" Barbara said.\n\n\"That's a horrible word, Barbara.\"\n\nKelsey stood and stripped of the cute little capri's she'd worn to work. She had a tiny thong on underneath. Kelsey added it to the pile.\n\nBarbara sat looking at her son's girlfriend's cleanly shaved pussy. It was a stunning sight, for so many reasons. She couldn't believe things had escalated to that point so quickly. Kelsey's eyes egged her on. She didn't know why she did it, but she stood and unfastened her jeans. She took them off and looked at Kelsey. The motherly panties had to go. She swept them off quickly. It was the only way.\n\n\"You've got a wicked body,\" Kelsey said. \"I can trim you up if you want.\"\n\nBarbara looked down at her thick, natural pubes. \"Should I?\" she asked.\n\n\"It's up to you,\" Kelsey said. \"That's not really the fashion these days.\"\n\n\"Yeah, I... kind of knew that.\"\n\nBarbara was wondering if she should shut the whole thing down. It was insane after all, relaxing in the living room with her son's girlfriend, both of them completely naked. But for some reason the answer was no. She didn't want to shut it down. She wanted to be naked, drinking wine with another naked person. It was exciting. It made her feel more alive than she'd felt in years. \n\n\"Maybe later,\" she said, glancing down at her bushy pubes again. \"How do you do it?\"\n\n\"The first time it's best if a friend does it,\" Kelsey said. \"Let me.\"\n\nKelsey got up out of her chair. Barbara stood up too. She didn't know why. Kelsey took her hand. It was an odd, floaty feeling for Barbara, like she wasn't in control. The next thing she knew they were in her bathroom.\n\n\"Have you got some scissors? And some soap and a razor?\"\n\nBarbara gathered what Kelsey needed. It all seemed strangely dreamlike. The next thing she knew she was sitting on a towel on the closed toilet seat and Kelsey was carefully snipping off bits of hair just millimeters from her clit.\n\n\"Have you done this before?\" Barbara asked.\n\n\"Oh yeah, lot's of times,\" Kelsey said.\n\nThe young redhead brushed away the clippings. She wet her hand at the sink, spread the moisture on what was left of Barbara's bush, and rubbed a bar of soap on it. Barbara couldn't quite believe what was happening. Kelsey picked up the razor and started to shave her.\n\n\"Maybe we shouldn't be doing this,\" she said.\n\n\"Too late. Already started,\" Kelsey said, concentrating on her delicate work.\n\nBy the time she'd finished, Barbara was in an altered state, half confused and half aroused.\n\n\"Do you have some oil?\" Kelsey asked. \"Like baby oil or something?\"\n\nBarbara told her where to find it, in a closet just outside the door. She was still sitting, legs spread and feeling like she was dreaming, when Kelsey came back.\n\nThe oily massage did nothing to take her out of the dream. It was the first gentle, caressing touch she'd felt on her pussy in way too long.\n\n\"Ohhh...\" Barbara moaned. \"We shouldn't...\"\n\nKelsey knew better than to stop. She knew how much Barbara needed human touch. The big, black, robotic dildo she'd seen stuffed in Barbara's pussy looked like fun to Kelsey, but she knew from plenty of experience that even the best of those tools paled in comparison to warm human flesh.\n\nBarbara didn't want to stop either. She'd only said the words because they're what a boyfriend's mother would be expected to say in that kind of situation. But Barbara had seen enough of Kelsey's porn to know the girl was as talented and enthusiastic with women as she was with men. Barbara had never felt a woman's sexual touch before. She wanted to try.\n\n\"You're pussy's pretty,\" Kelsey said, gently massaging all the soft, freshly shaved skin. \"Have you ever seen it like this before?\"\n\n\"No,\" Barbara said. She looked at it, in all it's wavy-lipped, oily, glistening glory. Her mind flashed back to her youth, when she'd first fingered herself, before all the hair had started to grow. \"It looks...young.\"\n\n\"It's nice, right?\" Kelsey said. \"Feel it. It's super nice.\"\n\nBarbara smiled. Her hand joined Kelsey's, tentatively touching the slippery flesh.\n\n\"Nice, right?\" Kelsey said.\n\nBarbara could only smile. It felt so amazing she could hardly believe it.\n\n\"You've got one of the prettiest smiles...\" Kelsey said. Her fingers nudged Barbara's aside, slipping between the slick pussy lips. The two women's eyes were locked on each others. A quick exhale of warm breath left Barbara's open mouth when she felt a gently moving fingertip on her clit. It was an expert's touch, right on the money, perfectly timed, with a delicate pressure that teased as well as satisfied. Another breath left Barbara's mouth, stuttery, through an amazed smile.\n\n\"Are you going to tell Austin about this,\" she asked. Her voice was breathy as she slipped deeper under Kelsey's magical spell.\n\n\"I can't really keep secrets from him,\" Kelsey said. \"He'll love it, though.\"\n\n\"What makes you think that. Maybe it would bother him.\"\n\n\"All boys have things for their mothers.\"\n\n\"How do you know these things? You're just guessing...\"\n\n\"A girl can tell,\" Kelsey said. \"Austin makes it pretty clear. He'd think this was super hot.\" \n\nKelsey's hand rotated. Two fingers slipped deep inside Barbara, curling against the front wall of her vagina. Kelsey's thumb took over on the clit. A series of gasping moans floated out of the older woman. Kelsey had her. She was putty in the redhead's small hand.\n\n\"You're super wet,\" Kelsey said, her voice soft and sexy. Her pale blue eyes had Barbara's locked in a hypnotic gaze. \"I wanna lick you. I wanna make you cum.\"\n\nBarbra didn't answer. Kelsey took it as a yes and knelt on the little rug Barbara kept in front of the toilet. Barbara gasped again when Kelsey's soft lips gave her pussy a wet kiss. There was no turning back. She took hold of Kelsey's head, short red hair splaying out between all her fingers, holding the girl's mouth tight against her bare, quivering pussy.\n\n\"God that feels so good!\" she sighed.\n\n\"That's because all that mom hair's gone,\" Kelsey smiled, her lips glistening with Barbara's wetness. \"It's all just woman now.\"\n\nKelsey opened her mouth and engulfed the brand new pussy, licking all around it and up through the slippery slit. It didn't take long for Barbara to reach an orgasmic state, but before she totally lost her mind she pushed Kelsey away.\n\n\"No!\" Kelsey pleaded. \"I want you to cum, Barbara!\"\n\nBarbara took Kelsey's hand and led her to her bed. Kelsey pulled her on top of her, into a steamy sixty-nine. Barbara had orgasm after orgasm, their bodies rolling after each one, from the top, to the bottom, and back to the top again.\n\nA shiny chrome vibrator was brought out of it's resting place in the drawer. Kelsey wanted to ask about the huge mechanical dildo but thought better of it, not wanting to spoil the moment with an explanation of how she knew about it.\n\nWhen the orgasmic flurry was over, Barbara snuggled on Kelsey's breast. Kelsey looked up at the heavy hooks on the ceiling.\n\n\"My parents have some of those hooks, in one of the party rooms. Do you like the dominant part, or the other?\"\n\nBarbara didn't know if she should answer, but there seemed to be no secrets around Kelsey.\n\n\"The other,\" she said quietly. She suddenly realized Austin might find out that the hooks weren't there for exercise.\n\n\"That's cool,\" Kelsey said softly. \"My mom said all their stuff's pretty dusty, but maybe we can try it out, if you want to. Are you gonna start coming to our parties?\"\n\n\"I don't know. Austin might not want me too,\" Barbara said. \"I mean, I shouldn't, if he's going to be there. I shouldn't even want him to be there. The whole thing's crazy.\" She thought for a moment about who's bosom her head was cradled on. \"He might never talk to me again, after this.\"",
        "\"He might need a little time to adjust,\" Kelsey said. \"It'll be okay. Anyway, you sorta really needed this. I could tell.\"\n\n\"Was it that obvious?\"\n\n\"No,\" Kelsey said, lying a little. \"I just had a feeling.\"\n\n\"I guess I needed it more than I realized,\" Barbara said, letting the warmth of Kelsey's body soak into her. Kelsey's mention of 'party rooms' got her thinking. \"Tell me about the parties,\" she said.\n\n\"Which ones?\" Kelsey asked. \"At my house, you mean?\"\n\n\"Are there others?\" Barbara asked. With her head nestled on Kelsey's big tits she felt oddly comfortable asking the questions she'd been afraid to ask.\n\n\"Yeah, we have some with just our younger friends. The one at my house was a nice mix, some of us and some of my parent's friends.\"\n\n\"How long have your parents been...doing that?\"\n\n\"Swinging, you mean? Oh, God, as long as they've been together I guess.\"\n\n\"When did you start? If it's not to personal a question, I mean.\"\n\n\"With their friends, you mean? It was my first summer home after freshman year at college,\" Kelsey said. \"I was already working at Tucker's.\"\n\nBarbara was glad to hear Kelsey was of legal age when she'd joined in, but the whole thing still seemed unbelievable. \"Are all your parent's friends their age?\"\n\n\"No, some are older. And now some are younger,\" Kelsey said, sounding happy she had brought the generations together.\n\nBarbara stopped asking questions. She had a million more, but didn't want to sound nosy.\n\nKelsey wondered if she should keep the conversation going, and maybe even invite Barbara to a party, but she decided she shouldn't go too far down that road before she discussed it with Austin. Being boyfriend and girlfriend was new to her, but she was catching on.\n\nBarbara closed her eyes, cradled in Kelsey's softness, listening to her heartbeat. She thought about generations mixing in a sexual way \u2014 fifty-year-old men fucking twenty-two-year-old girls. Twenty-two-year-old boys fucking...her. All the air went out of her lungs. Kelsey felt it, and sensed it was something good.\n\n\u2014\n\n\"Fuck Kelsey!\" Austin said. Kelsey had never heard him sound so disappointed. \"Why'd you have to do that?\"\n\n\"You know she needed it. She's a woman Austin. A woman having a huge dry spell at an age when it's messing up her head. Trust me, I know about these things. I saw it a million times at Tucker's. Today was a good start for her,\" Kelsey said. She was standing by her Jeep in the parking lot of the sports center where Austin worked. Kids with tennis rackets and soccer uniforms were leaving with their parents as the place closed for the night.\n\n\"A good start? Fuck, Kelsey. What am I gonna do with you...\"\n\n\"You want her to be happy, don't you?\" Kelsey asked.\n\nAustin shook his head, still in shock from what was happening. \"Kelsey, what the fuck. I can't believe you fucked my mother.\"\n\n\"She fucked me too you know. It's not all my fault.\"\n\n\"What am I supposed to do now?\" Austin asked. \"Just go home? I won't even be able to look at her!\"\n\n\"Yeah, you're right,\" Kelsey said, thinking about it for a moment. \"I think the three of us should just talk about it. Get it out in the open. It'll be weird if we don't.\"\n\n\"It'll be weird if we do! But...sometimes...you make too much sense.\" Austin shook his head in disgust. \"Let's get it over with.\"\n\nKelsey followed Austin home. In the driveway, he walked to Kelsey's Jeep and told her to go home. \"I need to talk to her alone,\" he said.\n\n\"Oh. Okay,\" Kelsey said, wondering if she'd screwed things up badly. \"Text me later?\"\n\n\"Yup,\" Austin said. He turned and walked away without kissing her. She was worried.\n\nBarbara was reading in her favorite chair when Austin walked in. She immediately sensed his unease.\n\n\"Have a glass of wine with me?\" she asked.\n\n\"Okay,\" he said.\n\nBarbara followed him to the kitchen. She leaned against the counter while he poured two glasses. Barbara looked different to him. She looked worried, yes, but there was something else, a more relaxed body language. Younger, in a way. He couldn't quite put his finger on it.\n\n\"You've talked to Kelsey?\" she asked.\n\n\"Yup. I don't even know what to say. Do you?\"\n\n\"No. Not really. This wasn't in the parenting handbook.\"\n\nBarbara smiled a little. Austin did too. He loved his mother, more than anything, but he was starting to realize he loved Kelsey too. He knew how hyper-sexual the girl was, and that it could potentially be trouble. Maybe that was part of the allure.\n\n\"Fuck the handbook,\" he said. \"I mean, Kelsey's parents, they didn't follow any rules and they're happy. Kelsey's happy. I'm happy. I want you to be happy, too. Can you pick another girlfriend, though?\"\n\n\"You're a sweet kid, you know that?\" Barbara said. \"I went way over the line. I'm sorry. I...don't really know how it happened, but it did.\"\n\nAustin knew how it happened. Kelsey happened. That's how it happened.\n\n\"You said something about us all being adults now,\" Austin said. \"Do you still feel that way?\"\n\n\"Do you?\" Barbara asked.\n\n\"Yeah, I guess so. Shit's happening and we're still smiling, right?\"\n\n\"Right,\" Barbara said. Her smile was lovely. \"So, where do we go from here?\"\n\n\"I don't know, Mom,\" Austin said. A vision of his mother at one of Kelsey's parties flashed through his head. He didn't know if he was ready for that! \"Let's just...see what happens.\"\n\nThey went to the living room and switched on the television. Beach volleyball was on ESPN. They sipped their wine and watched. Austin wondered if his mom was checking out the girls asses the way he was. From the look on her face, she was. He'd seen her checking out men's bodies before, but girls? That was something new.\n\n\u2014\n\nKelsey's first day at work had been a bit of a blur. Bobby and Albert were thrilled to have her around, but they'd hit her with so much information about so many things, she was happy when the afternoon had rolled around and she was able to concentrate on one thing \u2014 getting her computer work station set up to her liking and making a start on the ballet artwork.\n\nHer second day was more relaxed. She did a few more charcoal sketches incorporating everybody's ideas, and tacked them up on the wall. They all agreed on one, knowing that the subtle eroticism of the stylized dancers might be pushing things. It was clearly the image with the most energy, which is what the client was looking for, so Kelsey started to build a more finished image on her computer. It would be emailed to the client when it was done, to see if they approved.\n\nAt noon Bobby and Albert took her out to lunch. They sat outdoors at a picnic table in the shade of the restaurant's awning, eating barbecued chicken and potato salad. \n\n\"So Albert, I hear you know Austin's mom, from the gym,\" Kelsey said.\n\n\"Barbara Lowe,\" Bobby said, helping to jog his memory.\n\n\"Oh! She's Austin's mother?\" Albert said. \"Wow, I didn't know that!\"\n\n\"I bet she looks sexy when she's workin' out,\" Kelsey said.\n\n\"You won't lose that bet,\" Albert said.\n\n\"She might have some nice camel-toe workin' the next time you guys see her,\" Kelsey said mischievously. \"She's a whole new woman down there.\"\n\n\"Kelsey, you really shouldn't tell people's secrets without them knowing,\" Bobby said.\n\n\"I'm pretty sure she wouldn't mind you guys knowing,\" Kelsey said. \"She needs some excitement in her life.\"\n\n\"So now that you've got our curiosity piqued, just what, pray tell, are you talking about?\" Albert asked.\n\n\"She needed some body-scaping,\" Kelsey said.\n\n\"And...you did it?\" Albert said, smiling at the care-free young woman. \"You shaved your mother-in-law's pussy?\"\n\n\"It sounds weird when you say it like that,\" Kelsey said. \"It was hot. What can I say?\"\n\n\"I'll bet it was!\" Albert said.\n\n\"Was Austin in on it?\" Bobby asked.\n\n\"No. He was pissed at first, when I told him. But he's okay now. I think it's good. He and his mom are more like friends now. It's cool. I wanna keep it goin' though. I really really wanna get her to one of the parties. You guys wanna help?\"\n\n\"Jesus,\" Albert said. \"First you bring us twenty-two-year-olds and Sharron, and now Barbara Lowe? Count me in. I don't know how Trinny'll feel about it, though. I guess if Austin's there she won't mind. Do you really think he and his mother want to see each other like that?\"\n\n\"I do,\" Kelsey said. She didn't elaborate, but the guys knew what her twinkling eyes were saying. Their cocks both swelled in their pants below the picnic table. \"So, if you guys could seduce her a little, at the gym, that'd be cool.\" Kelsey said. \"Don't be all in her face about it, just subtle, you know? So when a party happens she'll wanna be there.\"\n\n\"Barbara Lowe, huh?\" Albert said. He ran the visual of her through his mind again, working out at the gym in her tight leggings. \"Are you trying to get me in trouble with my wife?\" He smiled to let Kelsey know he was kidding.\n\n\"Wow, you guys really think she's sexy, don't you?\" Kelsey said, smiling at the look in Bobby and Albert's eyes. \"I mean I do, too, its just hard for me to judge what older guys think sometimes.\"\n\n\"Oh yeah, she's a sexy one,\" Bobby said. \"I don't think she knows it. It's all really natural. That makes her even sexier.\"\n\n\"Yeah,\" Kelsey said, nodding as she thought about it. \"She might be the one I was talking about the other day, about the bondage and stuff.\"\n\n\"Kelsey, what have we been telling you, about peoples secrets?\" Bobby said. \"Am I gonna have to spank you?\"\n\nKelsey's eyes flared and her face showed the thrill her father's words gave her. Bobby had never laid a hand on her in anger, but the thought of it wildly excited her.\n\n\"Daddy!\" she exclaimed quietly, still wide eyed and smiling. \"Yes! You are gonna have to spank me!\" Bobby and Albert could see her mind working feverishly. \"Punishment's more meaningful when it happens in front of people though, right? That'd be a cool way to get the next party started, especially if we're gonna get all that old bondage stuff out.\"\n\n\"It's been a while since we've used all that gear,\" Albert said.\n\n\"Do you like it, Uncle Albert? Kelsey asked, slipping into the Uncle thing again. \"Does Aunt Trinny?\"\n\n\"Yeah, we had a lot of fun with it back in those days. Your mom really dug it for a while there.\"\n\n\"Really?\" Kelsey asked. \"The dominance, or the slave?\"\n\n\"I don't know if slave's the right word, but she and Trinny both liked being tied up and blindfolded,\" Albert said. \"Listen to me, telling secrets. You may have to spank me.\"\n\n\"Shit! We gotta get this party goin' Daddy! Can we do it this weekend?\"\n\n\"Take it easy sweetheart,\" Bobby said. \"Once a month's about everybody's limit these days. When we were younger we were weekend warriors, but...\"\n\n\"Pleeeese, Daddy? It might be the best way to get Barbara there. Just do it quick, before she can think about it too much.\"\n\n\"You really think she and Austin are ready for all that?\" Bobby asked. \"It can be pretty intense. It's not for everybody.\"\n\n\"I think she's totally ready for one of our parties. She can take it wherever she want's to take it, right?\"\n\n\"All right. I'll talk to your mother. If she wants another houseful this weekend, I'm all for it.\n\nAlbert smiled. \"I'll be there, if my wife'll let me.\"\n\n\u2014\n\nKay agreed to the short-notice party, and immediately went into get-ready mode. Kelsey and Sharron offered to help in the evenings, but there really wasn't too much to do \u2014 the bed linens were ready and nobody did much snacking at the parties anyway. Trinny could bring a plate of hors d'oeuvres to share. The liquor cabinet was always well stocked, but Bobby stopped at the store for a few more bottles and some wine.\n\nKelsey picked up Austin after work and drove him out to the old barn. She wanted to have a heart-to-heart talk with him in a quiet place, away from his mom.\n\n\"I'm having another party at my house,\" she said.\n\nAustin looked surprised. \"Another one? So soon?\"\n\n\"It's so your mom can come. I haven't asked her yet, but that's what I'm hoping.\"\n\n\"Oh,\" Austin said. Kelsey could see the uncertainty in his eyes.\n\n\"What do you think?\" Kelsey said. \"Sounds fun, right? I know she wants to try it.\"\n\nAustin had a pretty good feeling Kelsey and his mom had talked about more than they'd let on. He wondered what Kelsey had told her about the parties he'd been at, and what his mom had said about wanting to\"try it\".\n\n\"If she wants too, I guess it's okay,\" he said, rather tentatively. \"But I can't be there. Who's it gonna be? Your dad and Albert and...Rich and Larry? Are Koop and Happy gonna be there?\"\n\nKelsey smiled at Austin as he tried to figure out who would be fucking him mom. \"There's gonna be women, too, you know,\" she said.\n\n\"Oh, yeah. I know,\" he said. He looked embarrassed that he'd been so transparent about his thoughts.\n\n\"The best way to make sure she's okay is to be there,\" Kelsey said. \"You're my boyfriend now. I'd like you to be there with me. Will you? If your mom thinks it's okay?\"\n\nAustin didn't answer. Kelsey searched his eyes and saw a glimmer of what she was hoping to see.\n\n\"You know you want to,\" she said, giving him a sexy little look that was hard to resist. \"It's gonna be hot.\"\n\nAustin gave in. It wasn't that hard for him to do. He'd had serious fantasies about his mother ever since he'd hit puberty. He'd always kept them well under control, but seeing her in full orgasmic mode hanging from the hook in her bedroom the other day had sent him into a bit of mental overload. Thinking about her at a party at Kelsey's house was too much for his young brain to fight. He was desperately curious to see how she'd fit in. Was she really that sexual? Would she be comfortable amongst it all? If she was sexual in those kinds of ways, how did she keep it hidden from him for his whole life? Getting the answers to those mysteries excited him more than he wanted to admit.\n\nKelsey's next challenge was getting Barbara to attend. She stopped by Austin's house the next evening, when he was at work. The sexual intimacy she and Barbara had shared, and a little wine, helped the conversation flow easier than it otherwise would have.\n\n\"Oh, Kelsey, I really, really appreciate the invitation, but I couldn't possibly do that,\" Barbara said. \"Not with Austin knowing about it.\"\n\n\"Let's leave Austin out of it for a minute,\" Kelsey said. \"If the circumstances were right you'd wanna do it, wouldn't you? Think of all the men that want to play with you. All those hard cocks.\"\n\n\"Kelsey!\" Barbara said, acting shocked. \n\nKelsey wasn't buying it. \"I shouldn't tell you this, but my father and Albert fantasize about you at the gym. They already know I'm inviting you. These parties are your way to get with some hot married guys, and everybody's happy. And once you're in I know you'll be invited back. It's a pretty small town, Barbara. Do you really want to miss out on this?\"\n\n\"And my son? What about Austin, Kelsey?\"\n\n\"What about him? What about me and my mom and dad? I already talked to Austin. He wants to be there to make sure you're okay.\"\n\n\"He...wants to be there? If I'm there?\"\n\nKelsey could see the wheels turning in Barbara's head. \"Of course he does. I mean, I'm his girlfriend, but you're his best sweetheart. He'll look after you. We both will.\"\n\n\"God, my heart's pounding,\" Barbara said. \"I don't know, Kelsey. I really don't know.\"\n\n\"You do know, Barbara,\" Kelsey said, smiling sweetly. \"If you think it's too weird riding over with Austin, I'll come get you. But I wouldn't worry about that. Everybody's cool. You'll see. The whole idea's to put the real world out of your head and just have fun for a little while. My parents and their friends are experts at that. Eight o'clock Saturday. We're all really excited that you'll be coming.\"\n\nThe girl did have a way with words, Barbara thought. It was very difficult to say no, especially since she didn't want to say no. She had a deep fascination with the idea of Austin being at that kind of party, especially one with older women. It was an imaginary image Barbara couldn't get out of her head. The set-up to get both of them at the same party was just too well done, too compelling. Kelsey would have made a good psychologist, and a good gambler. She put together all the right cards for a winning hand. Saturday night's bet would be double or nothing.\n\n\u2014\n\n\"Kelsey? I'm... stubbly. I'm so nervous about tonight, my hands are shaking. I'm afraid I'll cut myself.\"\n\nBarbara rotated the phone away from her mouth so Kelsey wouldn't hear her nervous breath. She was wishing she hadn't accepted the invitation to the party. It was a crazy thing to do, going to an orgy with your son. She was very close to backing out entirely.\n\n\"Come over right now,\" Kelsey said. \"We'll fix you up beautiful, and you can shower and have a glass of wine. Take a deep breath Barbara. It's gonna be awesome.\" \n\nBarbara took more than one deep breath. She was sitting at her kitchen table with her forehead in her hand when Austin came out of his room.\n\n\"What's wrong Mom? Are you okay?\"\n\n\"Just a run-of-the-mill panic attack,\" she said, trying to force a smile. \"Are you sure this party's the right thing to do?\"\n\n\"I don't know, Mom. But I don't know if not doing it's the right thing to do either. We won't know 'till it happens, right?\"\n\nWhat's the \"it\" he's talking about, Barbara wondered? She inhaled deeply and blew it out slowly. \"I just talked to Kelsey. I'm going over early to help...get ready.\"\n\n\"Oh, okay. I guess I'll...see you later then.\"\n\n\"This parenting thing's a fuckin' trip, I'll tell you,\" Barbara said.\n\n\"Mom!\" Austin said. He smiled wide, amused at the first utterance of the F word he'd ever heard from his mother.\n\nBarbara couldn't face him anymore if she was going to force herself out the door. She gave him a quick hug and went to her room to change. She threw her makeup in a bag, slipped on her best underwear and her tightest summer dress, looked into the hallway to make sure Austin was in his room and quietly went to her car in the garage. She sat there for a moment, marveling at the power of sexual desire and the things she was willing to do because of it. She started the engine and drove away.\n\nAustin sat in his room, put his earbuds in, and switched on his music. Hearing his mom drive away freaked him out a little, but in an odd way he was glad she had gone, glad she was bold enough to take the plunge. He was pretty sure he wouldn't be joining her, though. Kelsey would have to do without him for the night. It was all just to weird.\n\n\"Hi Barbara!\" Kelsey yelled. She bounded down the front steps with a big smile, her naked body jiggling and her big tits gyrating wildly. \n\nBarbara felt like she'd entered a fantasy, and all she'd done was park her car. Kelsey led her into the house where she was greeted by Kay and Sharron. Kay was naked, but Sharon had already started to dress for the party, trying on a brand new bra and panties to see what everyone thought.\n\n\"Think the boys will like?\" she asked, twirling like a model.\n\n\"I know they will,\" Bobby said. His voice surprised Barbara. He was visible through the kitchen door, taking liquor bottles out of a cabinet, arranging them on the island countertop, naked as the day he was born. \"Hi, Barbara. How are you?\"\n\n\"Good,\" she said quietly. She wondered if Bobby heard her, but it was the only word, and the loudest one, she could utter under the circumstances.\n\n\"Honey, you're making the guest nervous,\" Kay said to him.\n\n\"No,\" Barbara said, trying to get her bearings. \"I'm all right.\"\n\nShe watched Bobby disappear behind the doorway and reluctantly looked away, hoping the others didn't think she'd been gawking. \n\nSharron smiled knowingly. \"It's funny how you get used to it after a while,\" she said.",
        "\"I can't imagine that,\" Barbara said.\n\n\"Let's go upstairs,\" Kelsey said, taking Barbara's hand. \"We'll get all ready and have time for a drink before everybody comes.\"\n\nBarbara glanced at the kitchen again as Kelsey whisked her away, but Bobby wasn't visible. \n\nIn the upstairs bathroom, Kelsey spread a towel on the toilet seat cover. \"We'll do this first in case Daddy needs a shower.\"\n\nBarbara looked around at the toiletries, a mix of men's and women's items. She wondered what Bobby used for cologne since he always smelled so good.\n\n\"Strip, girl,\" Kelsey said. \"What are you waitin' for?\"\n\n\"Oh. Nothing, I guess,\" Barbara said. \n\nThe fact that Kelsey was naked made it easier, but it still felt odd to take off all her clothes in a strange house. Kelsey went through the same procedure as the first time \u2014 wetting, soaping, shaving and oiling.\n\n\"I'm not gonna make you cum this time,\" Kelsey said matter of factly. \"You'll wanna save that for the party.\" She massaged in the baby oil and patted the super smooth pussy. \"There you go. Hop in the shower. You can do your makeup in my room if you want. I'll be in there gettin' ready.\"\n\nBarbara was already becoming lost in an out-of-body experience. She stood in the shower and washed herself under a stream of hot water, being careful to keep her hair dry, wondering if Bobby ever masturbated in there. She knew Austin did it in the shower, and she was pretty sure her ex-husband did. Cleaning her pussy and asshole with soapy fingers almost made her moan. All the latent horniness inside her was starting to bubble to the surface.\n\nShe stepped out and dried herself. She wrapped herself in the towel, thinking it would be easier to dress in Kelsey's room. A peek outside the door looked all clear, so she wandered down the hall looking for the girl. Bobby bumped into her as she passed his bedroom doorway.\n\n\"Oh. Sorry,\" he said. \"You move quietly. I was just...gonna see if the shower was available.\"\n\n\"Yes, I've just finished,\" she said, stunned to be standing inches away from Bobby's naked body.\n\n\"Good,\" he said. \"Kelsey's just next door.\"\n\nHe padded off in bare feet. Barbara stared at the back of him like a star-struck school girl. An airy, silent chuckle puffed out of her when she was alone. She turned and continued the search for her son's girlfriend.\n\n\"You all clean?\" Kelsey asked when she saw Barbara in the doorway. \"Nothin' tastes sweeter than a clean pussy, don't you think?\"\n\n\"I'm not that...up on those kind of things,\" Barbara said.\n\n\"What do you think of my leather?\" Kelsey said, standing to show off her dominatrix-ish bra and panties. \"It's some of my mom's vintage stuff that we dug out today. I don't think I'm gonna wear anything over it. It's just too cool to cover up, don't you think?\"\n\n\"It's pretty amazing,\" Barbara said, wondering what Austin would think of it. \"You could wear anything with that body and look amazing.\"\n\n\"So could you,\" Kelsey said. \"We should go shopping sometime. If you dress right you'll have men hittin' on you all the time.\"\n\nBarbara used to think she wouldn't like that, but lately she wasn't so sure. Now that Austin was grown she felt ready for men again, and making up for lost time seemed like a good idea, too.\n\nShe draped her towel on the edge of the bed, pulled on her panties and put on the matching bra.\n\n\"I thought this looked good when I was home, but compared to you I look awfully conservative.\"\n\n\"Are you kidding? That's super pretty,\" Kelsey said. \"The guys are gonna love you. I feel like rollin' around with you right now.\"\n\nBarbara laughed. Kelsey had a way of making everything right.\n\n\"Want me to do your eyes for you?\" Kelsey asked.\n\n\"What would you do?\"\n\n\"You'd look hot with some catty lines at the corners. Kinda slutty, like an old movie star. Not too much lipstick though. The eyes'll be the big thing.\"\n\nBarbara wondered if she should do such a thing. She'd always tried to avoid looking slutty, but the circumstances made her feel differently on that night. She sat at the makeup table and watched in the mirror as Kelsey worked her magic.\n\n\"Holy shit! Your eyes are just awesome!\" Kelsey said when the job was done. \"They're so 'fuck me', don't you think? You want a little of my cologne? It's real soft. Put a little between your tits, and some between your ass cheeks. With that nice ass of yours everybody'll have their noses down there. Bend over. I'll do it for you.\"\n\nBarbara let the moment sweep her away. She stood, pulled her panties down onto her thighs and bent over a little, feeling sexier than she had in ages.\n\n\"Oh yeah, fuckin' hot,\" Kelsey said as her finger brushed a touch of the mildly spicy scent onto soft skin. The sexy young girl dropped to a squat before Barbara knew what was happening, licking the freshly cleaned and perfumed asshole. \"Fffuuck!\" Kelsey said. \"You're smokin, Honey.\"\n\nBarbara moaned at the thrilling surprise, but it ended as suddenly as it had started, with Kelsey giving her a light slap on her ass as she rose to her feet.\n\n\"Put that pretty dress on and let's go get a drink,\" Kelsey said. She looked in the mirror and fixed her lipstick.\n\nBarbara was so horny she could barely stand it. Everyone in the Jonston household, and the very house itself, seemed to ooze beautiful, carefree sexuality. For the moment at least, she'd forgotten about Austin. She followed Kelsey down the big staircase to the kitchen. Bobby was already there, barefoot in dark grey shorts and a white linen shirt, his hair towel dry and fingered into place. Barbara couldn't get over his sexiness. Every time she saw him he looked different, and yet every time he was yummier and yummier.\n\nBarbara was in the mood for something strong, so Bobby mixed her an appletini. Kelsey had one too. Kay joined the pre-party, looking stunning in a tight little leopard print dress with a plunging neckline in the front and a rising hemline in the back that nearly showed her pussy. The front was held up with delicate black lace straps that joined behind her neck, forming a frilly, see-through back. \n\n\"Good Lord!\" Barbara said when she saw the sexy display. \"You're making me look like a schoolmarm!\"\n\n\"Are you kidding?\" Kay said, taking in all of Barbara's nice body. \"Bobby, does she look like a schoolmarm to you?\"\n\n\"That's a school I want to go to every day,\" he said, winking at Barbara.\n\nThe wink hit her like a shot. Somehow she got her glass to her lips without spilling, and took a big sip.\n\n\"Who's going to school?\" Sharron said when she joined the group.\n\n\"Bobby,\" Kay said. \"He's hot for teacher.\"\n\nBarbara's eyes met Bobby's. The level of sexual tension was unlike anything she'd ever experienced. Bobby reluctantly looked away from her sexy, cat-like eyes. \"What'll you have Sharron?\" he asked.\n\n\"One of your special manhattans,\" Sharron said. \"The ones that make me do naughty things.\"\n\n\"My pleasure, Sweetheart,\" Bobby said. \"My pleasure.\"\n\nKay heard footsteps on the front porch. It was Happy and Koop.\n\n\"Come on in you guys,\" she yelled.\n\nHearing people arriving jolted Barbara into reality. She wondered who the two men were, and when Austin would arrive. Her heart pounded as Happy and Koop neared. She was surprised to see Happy go straight to Sharron and kiss her. His arm went around her waist and she laid her head against his shoulder.\n\n\"Happy, Koop, this is Barbara,\" Kay said. \"She's Austin's mother.\"\n\n\"Oh, hi,\" Koop said. \"Austin's a great guy.\"\n\n\"Hi Barbara, I'm Happy,\" Happy said, extending his hand.\n\nBarbara shook it gently. She hadn't expected men without women, although Happy and Sharron looked like they knew each other intimately.\n\nKay smiled when Koop moved in next to Barbara at the makeshift bar. The two of them started chatting, tentatively at first, while Bobby mixed drinks for the men. Barbara's strong appletini was helping her along, but she was sure Koop could sense her nervousness.\n\n\"This is my first...party, like this,\" she said quietly.\n\n\"It's my second,\" Koop said. \"Yeah, last time was pretty nerve-wracking at first. That went away fast though. It ended up being one of the best nights of my life. When Kelsey invited me back tonight I felt like I'd won the lottery.\"\n\nBarbara smiled shyly. She liked honest men, and she was hoping she'd feel the same way Koop did as the evening wore on. For the time being though, she was preoccupied with the front door, wondering when her son would arrive. She was deep in conversation with Koop when she heard the next group of footsteps on the porch.\n\n\"Come on in everybody,\" Kay yelled. \"No formalities tonight. The party's just doin' it's own thing.\"\n\nBarbara knew Brie was Kelsey's best friend, so she wasn't too surprised to see her, but seeing Tyler and Trina walk in shocked her. Especially Tyler. He'd been a friend of Austin's since kindergarten, and there were times over the years when he felt like a second son to Barbara.\n\n\"Barbara, you probably know these three, but this is Charity,\" Kay said. \"She was Brie's college roommate. She and Brie are both going to be teaching at the elementary school. Pretty soon, right? When do you girls start?\"\n\n\"Two weeks,\" Brie said. \"We don't know if we're excited or freaked out.\"\n\nBarbara knew the feeling.\n\n\"Hi Mrs. Lowe,\" Tyler said quietly. He looked just as stunned as Barbara did.\n\n\"Hi, Tyler,\" she said, barely getting the words out. \"I didn't know you were...\"\n\n\"He was a last minute addition,\" Kelsey said. \"We had too many girls.\"\n\n\"One can never have too many girls,\" Bobby said, winking at Charity. She nearly melted.\n\nBarbara was starting to get a clearer picture of her son's friends. She'd long suspected the sex was a bit free between some of them, but Tyler and Trina had never crossed her mind when she thought about any of that. Growing up, Trina was always the sweet young cheerleader, the daughter of a shy, quiet couple who Barbara liked. And Tyler, well, he was just Tyler. Barbara had mended his wounds when he was little, and fed him grape juice and peanut butter and jelly sandwiches. She held him, out on the street in front of her house, when he fell off his bicycle and cried.\n\nShe'd also watched his body change as adolescence hit \u2014 his chest filling out, his ass firming, his legs growing muscular. His legs were especially good looking, she'd always thought, with the same soft hair that graced his chest and the treasure trail on his ripply belly. Being at a sex party with him, and Brie, and Trina, and her own son for God's sake, seemed more and more insane by the minute.\n\nWith the additional people, the party quickly started to buzz. Barbara was glad. She turned back to her drink and the security of conversation with Koop.\n\n\"Good Lord!\" she said quietly. \"That boy's my son's best friend! I've known him since he was in kindergarten!\"\n\n\"Why do I get the feeling Kelsey's behind this?\" Koop said, glancing at the sexy little redhead.\n\n\"Shit! What do I do now?\" Barbara asked. She was talking quietly, more to her drink than to Koop. \"I mean it's bad enough my son's on his way...\"\n\n\"Austin's coming?\" Koop said, sounding a little surprised.\n\n\"This is a nightmare. Why did I agree to this?\"\n\n\"Probably the same reason I agreed last time,\" Koop said. \"I was tired of being alone, tired of thinking about the rest of the world having fun. Kelsey got me here, and I'm glad she did. I'm no expert, but...there's rooms upstairs. It doesn't have to be public if you don't want it to be.\"\n\nBarbara looked at Koop, deep into his eyes. Her horniness was still there, smoldering under her confusion and uncertainty.\n\n\"Or, we could get out of here,\" Koop said. \"Go on a regular date. We're already dressed for it.\"\n\n\"You'd wanna do that?\" Barbara asked, her tense face relaxing into a smile.\n\n\"Absolutely,\" Koop said. He smiled too. Barbara loved the crinkly lines around his eyes, and his tattooed arms just about made her swoon. She finished her drink in a gulp and asked Bobby to make her another.\n\n\"We staying?\" Koop asked.\n\n\"Wanna take me upstairs?\" Barbara asked, her smile flittering on uncertainty. \n\nKoop's nice smile gave her his answer. Bobby had overheard the whole conversation. He was glad they were staying.\n\n\"Use any room you want,\" he said as he poured the green elixir into Barbara's glass. \"There's toys in the bedside drawers, and the blue room's got some extras.\"\n\nBarbara's heart went in her throat. The dream was happening. For the first time in her life she was a slut at a sex party. She picked up her drink and walked with Koop to the big staircase. She could feel her ass moving in a way she'd never noticed before as they ascended the steps. She didn't look at anybody but she could feel plenty of eyes on her. It felt good to be escaping.\n\nBarbara had some basic knowledge of which rooms belonged to people. It seemed wrong to her to use one of those, so she passed by Sharron's, Bobby and Kay's, and Kelsey's. The next door off the narrow hallway was open, but the room was dark. She switched on the light and stood frozen.\n\n\"Holy shit!\" Koop said quietly. \"I missed this last time.\"\n\nThe room was painted a rich, electric blue, and the small table lamps made it glow in a dim, almost fuzzy kind of way. There was a small mattress on a platform, accessible from all sides, with a full compliment of leather restraints. Out in the middle of the room, a sex swing hung from a hook, with an impossible looking amount of straps, pulleys and lashings hanging like black spaghetti under a heavy frame. A side table held an assortment of blindfolds, gags, whips, handcuffs, dildos and other accessories. \n\nKoop was still in the hall, certain that Barbara would retreat and look for another room. Instead, she grabbed his wrist and pulled him in.\n\n\"Just so you know,\" he said, \"I'm not really into being tied up.\"\n\n\"That's good, 'cause I am,\" Barbara said. She grabbed Koop and kissed him. Her smoldering horniness had caught fire.\n\nThe kiss was hotter than she'd expected, although her expectations were so far out of whack she didn't really know what was going on anymore. She held Koop's hand when the kiss ended and looked around the room again.\n\n\"You're a mechanic. Think you can figure this thing out?\" she asked, looking over the swing contraption.\n\n\"It might take a whole bunch of tries,\" Koop smiled. \n\nBarbara smiled too. She settled into what looked like a little seat and leaned back, running her fingers over the old, dusty leather and rope.\n\n\"I'm just guessin' here, but I'm pretty sure you're supposed to be naked,\" Koop said.\n\n\"Yeah, that...that does seem right, doesn't it,\" Barbara said, smiling a lovely smile. She glanced out into the hall. \"The door?\" \n\n\"Oh. They were all open last time,\" Koop said. \"But I'm sure they wouldn't mind.\"\n\nHe had his hand on the doorknob, waiting for her decision. Barbara's mind was spinning wildly. She didn't want to be rude. She didn't want to seem like a prude. Seeing as how it was her first party at the house, fitting in seemed like the best thing to do.\n\n\"Leave it,\" she said. She nearly exploded with excitement at the thought of Tyler walking past the door, seeing her in the throws of something wild. For some reason Austin didn't enter her mind. Tyler had nudged him out.\n\nShe wiggled off the swing and kissed Koop again, cupping his swelling groin in her squeezing hand.\n\n\"You said something about being naked?\" Barbara said. \"Care to join me?\"\n\nMoments later they were stripped bare. Barbara was on her knees, sucking the first tattooed man's cock she'd ever tasted. A few minutes later she was on her back on the small bed, her ass right at the edge, legs spread wide, with Koop's nice tongue lapping at her softness.\n\n\"I hope this doesn't make me seem like a slut, but, I love how you girls all shave these days,\" Koop said, nuzzling Barbara's baby-soft slippery pussy lips with his mouth. \"This just feels so good. I could do this all night.\"\n\n\"Put me in that thing and do it some more,\" Barbara purred, gesturing with her sexy eyes at the swing.\n\nAustin finally showed up, an hour later. He was as shocked to see Tyler there as Barbara had been. Kay and Trinny were double-teaming him on the couch. \n\n\"What the fuck Tyler! Is my mom here? Where's Kelsey?\"\n\n\"They're both upstairs I think,\" Kay said. \"You okay, Honey?\"\n\nAustin didn't answer. He went up the stairs\n\n\"Mom?\" Austin called quietly as he walked past the first two rooms. He moved slowly down the hall, silently the rest of the way, looking tentatively through each doorway. Sharron and Happy were in her room with Brie, all of them in a tangle on the bed, moaning softly. Bobby was with Trina and Charity and Kelsey in her room, making some more spirited noise. Kelsey didn't see him, so he passed right by. The blue room was next.\n\nAustin knew he'd found his mother. He remembered the noises she was making from the time he and Kelsey found her hanging from the hook in her bedroom. He stood just around the corner of the doorway, wondering what to do. The mattress with the restraints was visible, but it wasn't in use. Blue light seemed to spill out of the room like a hazy fog.\n\n\"Mom?\" he said quietly. Barbara didn't hear him. He couldn't tell what was happening from the noise she was making. He suddenly wondered if she was all right, if she was under duress. Was someone taking advantage of her? His protective instincts proved too much to hold back \u2014 he had to see for himself.\n\n\"Mom?\" he said as he stepped into the open doorway. What he saw hit him with a mix of shock, awe and excitement. Barbara was in the swing, hanging on her back, wrists and knees lashed with leather straps pulled high above her. Her head was hanging upside-down, with Albert standing at that end of her. She sucked furiously on his cock while Koop, standing at the pussy end of her, fucked her with long, steady strokes that drove her mouth onto Albert's shaft.\n\n\"Mom?\" Austin said, a little louder.\n\nAll the movement ceased. Koop and Albert weren't sure what to do, so they just stood there, Koop still deep inside Barbara's pussy.\n\n\"Austin?\" Barbara said. She was blindfolded, so couldn't see him. The surprise of hearing his voice seemed almost surreal.\n\n\"Sorry,\" he said, retreating back into the hallway, just out of sight. \"I just...wanted to see if you're all right.\"\n\n\"Yes...I'm all right,\" she said breathlessly. \"Are you?\"\n\nThe darkness of the blindfold helped her, tricking her mind into thinking the situation was a little less awkward than it was.\n\n\"Do you know Tyler's here?\"\n\n\"Yes,\" Barbara said, trying to keep her voice steady. \"I know.\"\n\n\"Oh,\" Austin said. He was trying to sound cool, too, even though he was far from it. \"All right. I'll...see you later.\"\n\n\"Okay,\" Barbara said. The real world flooded back and she suddenly felt her physical surroundings again \u2014 Koop's somewhat softer cock in her and the lashings holding up her limbs. There was a few moments of silence. \"Is he gone?\" she asked quietly.\n\n\"Yeah,\" Koop said. \"You okay? You want us to get you down?\"\n\n\"Give me a minute,\" she said. Koop started to pull out. \"No! Don't do that! Slow. Just...fuck me slow.\"\n\nShe leaned her head back again and extended her tongue, inviting Albert back in. It was a slow, gentle acceleration, but soon they were right back at it, Barbara even more energetic than before, screaming, \"Harder!...Harder!\" before melting down in a wildly quivering orgasm. The sight was too much for the men \u2014 Koop pumped his seed inside her, and Albert filled her upside-down mouth. She sucked the white liquid warmth out of him and swallowed every drop.\n\nAustin was back downstairs. He wanted to talk to Kelsey but seeing her with her father's cock in her hand had jolted him as much as finding his mother the way he did. Kay knew he was having a hard time. She left Trinny with Tyler on the couch and went out on the front porch with him.",
        "\"Sit with me, Honey,\" she said to him. \"You found your mother?\"\n\n\"Oh. Yeah,\" he said, looking dazed and confused as they sat down on the wicker loveseat. \n\n\"Tell me what you're thinking,\" Kay said softly.\n\n\"I...don't even know. I mean...I didn't know Tyler was gonna be here. Has he been here before?\"\n\n\"No, Honey. I'd met him, at school things.\"\n\n\"Kelsey invited him? Why would she do that?\"\n\n\"I don't know, Honey. Sometimes she doesn't think things through. Is it your mother that bothers you? She and Tyler?\"\n\n\"Yeah. I guess so. I don't even know.\"\n\n\"I don't know if it's the same or not, but...I have sex with lots of Kelsey's friends. Well, you know that. But, you see what I'm gettin' at? It can be just for fun. We don't always have to think about things so much.\"\n\n\"Yeah,\" Austin said, sounding unconvinced.\n\n\"Tyler's part of your own group, right? You share Kelsey with him, I'm guessing, right?\"\n\n\"What about...Bobby?\"\n\n\"Bobby? What about him?\"\n\n\"Him and...Kelsey.\"\n\n\"Oh,\" Kay said, realizing Austin must have seen something new. \"We're a...a very open family, Honey. You sorta know that, right? Kelsey and her father, what they share is very loving, very beautiful. It's only developed recently. You can blame me if you find it bothersome, because I was involved too.\"\n\n\"No!\" Austin said. \"I would never blame you!...or her...or anybody. I just...was...surprised. I don't know. I'm being stupid.\"\n\n\"You're not,\" Kay said, taking his hand and putting it on her warm thigh. \"You've go to be honest with yourself, with your emotions.\"\n\nKay smiled softly. Austin was such a beautiful boy, she couldn't stop the horniness that was starting to well up inside her.\n\n\"Tell me about your mother,\" she said. \"Do you find her attractive?\"\n\n\"Yeah. Of course. She's beautiful.\"\n\n\"Sexually, Honey. Do you think about her?\"\n\n\"Yeah...I mean...I shouldn't though.\"\n\n\"Of course you should,\" Kay said, moving Austin's hand a little closer to the heat of her pussy. \"You're human. She's human. It's just genetic, Honey. Men wanna fuck beautiful women, and women wanna fuck beautiful men.\"\n\n\"But she's my mom.\"\n\n\"And I'm Kelsey's mom. She and I have fucked plenty of times,\" Kay said, calmly and reassuringly. \"And I think you saw what she and her father get up to once in a while. I might be your mother-in-law some day. Does that mean you don't wanna fuck me?\" Kay guided Austin's fingers to her hot, slippery slit, moving them through the warm gash and up across her clit. \"You do, don't you?\" she asked breathily. \"Still wanna fuck me?\"\n\nWith her free hand she pulled Austin's head down, thrusting the big tits he loved so much to his face. It had been many years since she'd gotten frisky on the front porch. Bobby had scolded her for it a decade ago and she tried hard to be good in the front yard. Something about Austin, though, broke down her defenses.\n\nIt wasn't long before his young cock was in her mouth. Not long after that his clothes were strewn on the wooden porch floor and he was slapping into her doggy style on the loveseat, with one of his long legs on the floor for stability. The sound drew Trinny and Tyler out into the night air to join them, Trinny hanging over the railing as the boys took turns fucking the two older women hard.\n\nAfter a while Tyler drifted away. Austin hadn't even realized it at first. He thought his friend had gone to use the bathroom, or maybe to get a drink. Kay could sense his growing concern.\n\n\"Do you mind staying here with us,\" she whispered to Trinny. \"Austin's uncomfortable with his mother being here. I get the feeling he'd like to stay out here, to keep a little distance from her.\"\n\n\"Do you really think an old woman like me would mind playing with Austin for another hour or two?\" Trinny whispered. \"He can fuck me all night if he wants to.\"\n\n\"Fuck us in the ass, Honey,\" Kay said to Austin. It seemed like a good way to get his mind off things. \"Do us both and tell us how different we feel.\"\n\nAustin smiled. He had loved fucking Kay that way at the last party. The intensity of it was mind-boggling, and her orgasm had been epic. Trinny was visibly excited by the idea too. As the anal action got going on the porch, things were heating up upstairs.\n\n\"I'm fuckin' you, Barbara,\" Kelsey said, her gorgeous freckled skin seeming to glow in the blue room. \"I'm fuckin' you with a big, black strap-on cock. I got fucked by a real man with a cock just like this, all big and black and muscly. Did you watch me on your computer? Huh, Barbara? Did you watch me get fucked by his huge cock?\"\n\nBarbara nodded and moaned like a beast as the huge rubber cock plunged her depths. She'd been flipped around, belly-down on the swing seat, with her ankle lashings pulling her legs wide apart. More leather lashings supported her shoulders, leaving her tits hanging free below her. She was blindfolded again, and her arms were cuffed behind her back.\n\nBobby and Albert and Koop had done the rigging, teasing her with their big cocks near her face, never letting her get a touch or a lick. She'd never been more aroused in her life as her body was restrained and put on carnal display. Kelsey, with the massive strap-on, was the first to give her some relief.\n\n\"You're fuckin' me too you know,\" Kelsey said, her voice increasingly breathy. \"This big strap-on's got two cocks. You're as deep inside of me as I'm inside of you.\"\n\nBarbara grunted and pushed back with her hips, getting into a deep rhythm with her favorite little porn star.\n\n\"We got an audience you know,\" Kelsey told the blindfolded woman. \"There's hard cocks all around you. You hear them? You hear the hands stroking them as they watch you? Lift your head and open your mouth, Honey. Somebody wants to put somethin' in it.\"\n\nShe followed Kelsey's orders and hot hardness worked it's way into her mouth. She was salivating like a wild beast, drooling off the rock hard shaft in stringy, glistening drips. Who was it, she wondered? Whose beautiful cock was forcing it's way past her tonsils, making her gag?\n\nThe owner's groan told her. It was Tyler! Barbara was so overwhelmed, by the deep-throat gagging and the massive fucking, her mind went to a place she could only imagine was like the rush of hard drugs. In a dreamlike place that felt halfway to fainting, she sucked the sweet boy's cock like there was no tomorrow.\n\n\"Next,\" Kelsey called out.\n\nBarbara's spinning brain protested silently. No! Not next! Tyler's cock is too fucking good! I want it in my mouth!\n\nBefore she could decide whether to say it out loud another man filled her mouth with hardness. She knew it was Bobby. She could barely get her lips around it and he was the biggest of the bunch, as far as she knew. It had to be him. Behind her, Kelsey had pulled the big rubber strap-on out. Barbara felt new hands on the crease of her thighs and braced herself for something new.\n\n\"Ohhgg!\" Tyler groaned when his cock slipped in to the wet, slippery pussy. He'd wanted to stay silent and not give himself away, but the experience was too intense. It was massively intense for Barbara, too \u2014 tied up tight with Bobby Jonston in her mouth and Tyler fucking her. She came almost immediately, with deep mind-expanding spasms. Her legs twitched for a longer time than Kelsey'd ever seen.\n\n\"Fffuuuck!\" the redhead exclaimed. \"That's wicked, Honey! God, you're hot!\"\n\nTyler was usually pretty good with the stamina, but he was in trouble. Kelsey saw the look on his face and directed traffic.\n\n\"Back in her mouth. Now!\" she said to the still wildly fucking boy.\n\nHe pulled out and made it just in time, gushing just after Barbara sucked him in. Bobby rounded her the other way and pressed his big meat into her steaming pussy. Another monster orgasm ripped through her, right out of the blue. She screamed on Tyler's cock, the devilish, otherworldly sound filling the room, drifting out the window and landing in Austin's ears down below. He was in the middle of an ass-fest beyond his wildest dreams, with both Kay and Trinny in multiple orgasm territory as his cock played deep in both their dark holes.\n\nBobby's big cock felt like heaven to Barbara. As she came down from the massive orgasm she had a vision of him fucking her in the shower at the gym. Would Kay mind, she wondered? Maybe Kay could join up, too, and they could get everybody at the gym to fuck in the shower. Now that would be a wonderful world!\n\nKoop was the next man in, after Bobby popped and sprayed his warmth all over Barbara's back. He went back to her mouth and let her suck him dry as Koop's rhythm moved her.\n\nKelsey went down the hall and got the others. They all gathered around the swinging woman, fondling her as they looked over the dusty old contraption holding her, amazed at the wonder of it all. \n\nSharron pushed Happy into position, guiding his long cock into the lovely, waiting pussy. \n\n\"Who the fuck is that!\" Barbara said, breaking her long wordless stretch.\n\n\"It's a long one, huh? It's Happy,\" Kelsey said. \"Now you know why Sharron's always smiling. You want us to take the blindfold off, Honey? You wanna see us all loving you?\"\n\nBarbara nodded. She knew seeing Tyler would throw a whole 'nother dimension on things, but she was ready.\n\n\"You ever see so many beautiful people that are hot for you?\" Kelsey asked when she tossed the blindfold aside. \"Look at those nice hard cocks.\"\n\n\"Fuck me more,\" Barbara said, her wild, pleading eyes darting around the room.\n\nCharity squatted a little on spread legs and forced the huge double-ended dildo into herself. It took some effort, but she got it in, nearly cumming from all the eyes watching her do it.\n\n\"Charity's gonna fuck you,\" Kelsey said. \"Tyler, let her lick those nice balls of yours. Hey Barb, when's the last time you had balls that young in your mouth?\"\n\nBarbara could only snort out some breath as her answer. Tyler walked to her, holding his hard cock against his belly. She looked up at his eyes as her tongue took the first wet lick up the soft, salty skin.\n\n\"Oh, fffuuuck!\" he sighed.\n\n\"Fuck her mouth again, Honey,\" Kelsey said. \"Reach under and play with her tits.\"\n\nThe overwhelmed young man groaned loud as Kelsey's command became reality. \"Oh, fuck, Mrs. Lowe!\" he said as the dual sensations ripped apart his sanity. Kelsey giggled.\n\nWith a little help from Brie, Charity had gotten strapped into the massive double dildo and was positioned for entry. Kelsey helped get the big rubber tip lined up and Charity grabbed a hold of it too, looking amazed as the black monster was swallowed up by Barbara's puffy, well-used pussy.\n\n\"Ohhh! Goddd!\" Barbara grunted through clenched teeth. She had Tyler's cock in both her hands, squeezing so tight it looked like the purple tip would explode.\n\nCharity was grunting too. It was the beginning of a wild double fuck from two highly orgasmic women. The others in the room just stood and watched.\n\nThe exhibitionism wasn't lost on Barbara. Even in the mind-altered state she was in she was well aware that something new was happening. Her ex-husband had tried to get her to fool around in a hot tub once, with another couple that they knew. Barbara would have none of it. Another time he wanted to have a little fun on a beach, hundreds of yards from the nearest person. She'd put the ixnay on that too. So there she was at the Jonston's house, hanging naked from a ceiling like a trussed piece of meat, being fucked every which-way to wild orgasms while a dozen eyes watched her, and she loved every second of it! It was the high-point of her sexual existence. It was completely, totally, wildly thrilling. When Charity bottomed the big dildo in her, way up in her gut, she let out some screaming grunts, looked around with wild eyes and swallowed Tyler's throbbing cock again.\n\nOut on the porch, Austin was the top of a threeway sixty-nine. He tea-bagged his big cock into Trinny's mouth, and licked the two pussy's that were scissored together like an interlocking puzzle.\n\n\"She's having such fun, Honey,\" Kay said when Barbara's beautiful, animalistic screams drifted down from the bedroom window above. \"Are you okay with it now?\" \n\nMore sounds of screaming ecstasy drifted down, a mixture of Charity's wild enthusiasm and his mother's. Hearing it, and thinking about it, brought another pumping gush from the tip of his cock. Trinny squeezed it above her mouth with her hands, like a milking machine in a barn, letting the warm seed drip onto her tongue. Austin groaned like it was the best thing in the world.\n\n\"That's it, Honey,\" Kay said, her eyes lusty as her fingers raked gently through his soft hair. \"That's it.\"\n\nAustin stayed there, lost in the beautiful feeling of Trinny's experienced hands on his pendulous length. His eyes were closed, Kay's soft words hypnotic. He heard his mother moan, breathier, like an angel. The lovely sound drifted on the night air, mingling with the soft chirp of a thousand crickets.\n\n\"Fuck us, Honey,\" Kay said softly. \"Fuck us one more time.\""
    ],
    "authorname": "riverboy",
    "tags": [
        "orgy",
        "swingers",
        "older woman",
        "younger man",
        "son's friend",
        "bondage",
        "sex swing",
        "tied up",
        "party",
        "shaving"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/kelseys-world-ch-11"
}
{
    "title": "Virtually Fucked",
    "pages": [
        "Audrey set the last of her stuff on the dressing table. She looked up and smiled at her reflection in the mirror. Her mind went over the past couple of weeks. The move hadn't been so bad, she didn't have a lot. Just a bed, some clothes and her stuffed animals. Her first place. Well, hers and Vanessa's anyway.\n\nThe rest of the apartment had been furnished by Vanessa. Audrey wondered how Vanessa could afford her own apartment off campus, not to mention furnish it with such nice stuff working part time, and going to school full time.\n\nVanessa was 20, two years older than Audrey. Although the difference in their age was only two years, Vanessa seemed much more mature, worldly. She was cool, her outgoing personality drew Audrey out of her shell.\n\nVanessa was constantly on the go, and so much fun to hang out with. Anywhere they went, cute guys seemed to show up. Audrey was a little jealous of Vanessa's looks. Long curly blonde hair that tumbled over her shoulders. It was wild, always messy yet very sexy, surrounding an adorable, not so innocent face. Her body was perfectly proportioned. Just right boobs with a saucy 'they're real' bounce to them. A softly curved tummy flared out to hips that moved like she was in heat. Nothing about her was forced, which made her even hotter. When she smiled, dicks got hard.\n\nAudrey sometimes felt mousy when she was with her, despite her own good looks. She had a tight little body, with just a hint of baby fat. She wished her boobs were a little bigger. Her straight brown hair, parted to one side picked up natural highlights from the sun. Deep green eyes set over a snub nose gave her a serious look. Her lips were the best part of her cute oval face, soft and full with a natural pout to them. Her smile was shy and sweet, like herself.\n\nWhen Vanessa had told her about the extra room, Audrey jumped at the opportunity. She hated the Dorm. It was noisy, and her room mate kept taking things without asking. Usually when Audrey got them back, they were broken or unwearable. Plus that bitch was such a slut. A different guy, sometimes a girl every week. She couldn't remember how many times she'd had to pull her pillow around her head to muffle the noises from the next squeaky bed.\n\nWhen her roomie had an orgasm, the whole floor knew it. Audrey had no choice but to listen. She had mixed emotions about that. On one hand, she knew she could finally get some sleep. On the other, she was very jealous. She had never had one.\n\nIt wasn't for lack of trying. She had explored herself, like all girls do, finding spots that felt nice, and some that felt really nice. Sometimes when she was feeling naughty, she'd peel of her panties, put one of her stuffed animals between her legs, and rub hersef by moving her hips along it's fuzzy body. It gave her tingles and a warm feeling, but nothing more. \n\nThe computer was the final straw. It had been a gift from her parents. She could send emails or message them, much cheaper than long distance phone calls. She used it a lot for research too. One night, she went to log on, and it was totally fucked up. Turned out the roomie had gone online and let some killer virus in. The machine was wiped out, it would cost a bundle to fix. \n\nAudrey was furious, and gave the bitch an ear full. She was slow to anger, but was totally fed up with this idiot slut. Idiot's reaction was a lazy shrug of her shoulders, she didn't care. Audrey stormed out. She ran into Vanessa, who'd just tossed her own pain in the ass room mate. The girls quickly struck an agreement, both excited to be living with a friend.\n\nA soft knock on the door pulled Audrey from her thoughts. She turned from the mirror, and opened it. It was Vanessa, but not like Audrey had ever seen before. She was wearing an outfit that would make a Fredrick's of Hollywood designer blush. It was sheer, not quite see through, her medium beige nipples showed clearly from under a light pink and white teddy.\n\nMatching thigh high self support stockings clung to her legs. A wide band of white lace at the tops left a teasing glimpse of thigh leading up to the crotch of the teddy, stretched tightly over the gentle rise of her mound. A few dark blond curls peeked outside the cloth. The fabric dipped in the middle, hinting at the crease beneath.\n\nA pair of darker pink, open toe, platform stilettos with ankle straps made her about 4 inches taller. Her curly hair was fluffed out to a golden halo surrounding that beautiful face, her makeup a perfect blend of innocence and pure slut. She was a walking wet dream. \n\nAudrey's face reflected her surprise. Her eyes traveled up and down Vanessa's outfit, and the incredibly hot girl wearing it. Her mouth open and closed, searching for words.\n\nVanessa laughed sweetly at her new roomie's reaction. Her smile lit up her face, white teeth contrasting with her bright red 'fuck me' lipstick. Her nails matched perfectly. A delicate silver chain bracelet, necklace and earrings, all accented with tiny red hearts completed the look.  Audrey had never 'liked' girls, but for a moment the thought crossed her mind.\n\nVanessa told her, \"Listen, I'm going to be in my room for a couple of hours. Please don't disturb me unless it's an emergency, OK? You may hear some noises, but don't worry about it. If I'm too loud, just turn up the radio or the TV, but please, whatever you do, don't interrupt me.\"\n\nAudrey nodded, still unable to find her voice. She swallowed hard as Vanessa turned and went down the short hall to her room. The teddy rode very high on her gorgeous ass, swaying as she walked. Audrey could hear Vanessa softly humming 'Hi Ho Hi Ho, it's off to work we go' as she stepped into her room, the door closing softly behind her.\n\nAudrey wondered why Vanessa would dress like that, and then stay in her room. No one had come in, so she knew Vanessa was alone. Audrey took out her books to study. She could hear the keyboard from Vanessa'a computer typing away. After a minute, it quit. Audrey's attention turned to her books, a part of her mind both preoccupied and rampantly curious about what was going on behind Vanessa's door.\n\nA few minutes later, her ears perked up as she heard Vanessa's voice. It was different. Softer, with a small giggle to it, yet very sultry.\n\n\"How's that? You can hear me OK?\"\n\nThere was a silence; and then, \"I'm glad you like it, I wore it just for you.\"\n\nMore silence.\n\nAudrey closed her book, very interested in the one-sided conversation.\n\n\"Of course I'll show you the whole outfit!\"\n\nSome giggles followed.\n\n\"I know! It's makes me feel sooooo naughty!\"\n\nAudrey listened intently, ashamed to be eavesdropping, but unable to stop. She realized Vanessa was on her computer, using a microphone to talk to someone. The silences were her reading that someone's replies. Audrey pressed her knees together, keeping as quiet as she could. Vanessa went on.\n\n\"You want to see the back again? OK.\"\n\nGiggles.\n\n\"You are SO BAD!\"\n\n\"I know, look at them! They're trying to push through.\"\n\n\"mmm, they do feel better when I rub them\"\n\nAudrey heard some soft sighs.\n\n\"You're right, I should take them out.\"\n\nAudrey leaned forward, cocking an ear.\n\n\"Ooooohhh...that feels soooo goooood!\"\n\n\"You make me do such bad things.\"\n\nThere was a shocked gasp, and then \"I can't do that!\"\n\n\"You won't tell?\"\n\nAudrey felt herself warming between her thighs.\n\n\"Ooohh...I feel sooo naughty!\"\n\nThere was a long pause.\n\n\"That feels nice. It likes to be touched like that.\"\n\nShe heard a giggle, some deeper sighs.\n\n\"The cloth is getting wet. See what you do to me?\"\n\n\"Put my fingers under it?\" \n\nA short pause, and then a soft gasp.\n\n\"I'm so wet.\"\n\nMore sighs and moans.\n\n\"You can't see under the cloth?\"\n\nAnother pause, followed by a nervous giggle.\n\n\"OK, I'll show you.\"\n\nAudrey heard three small snaps.\n\n\"You know how much I like you to watch.\"\n\nVanessa's sounds took on a more insistent tone.\n\n\"You like that? Oh OH! I like it too! Feels so good, so good!\"\n\nSome whimpers.\n\n\"I'm so close! So close!\"\n\nMore sounds of need.\n\n\"Oh! OH! OH! I want to! So bad, so bad.\"\n\nVanessa sounded frustrated.\n\n\"I can't! I just can't!\" \n\nAudrey stood, and leaned closer to the door.\n\n\"Use what?\"\n\n\"You'll help me? Oh please! Please do!\"\n\nAudrey found herself moving closer to the door. The crotch of her panties were getting moist.\n\n\"OK, it's plugged in, now what?\"\n\nThere was a soft buzzing sound.\n\n\"Where should I put it?\"\n\nShocked giggles.\n\n\"You are so so bad!\"\n\nThe buzz stopped.\n\n\"No! I'll do it! I'll do anything!\"\n\nThe buzz restarted.\n\n\"Ohhhhhh! Oh!\"\n\n\"It's so so wet, sliding in and out.\"\n\nVanessa's moans rose again.\n\n\"OOOh! More! More please!\"\n\nThe buzz got louder, so did Vanessa.\n\n\"Gaaaah! That. Feels. Fantastic!\"\n\n\"I'm so, so, Oooooh! So CLOSE!\"\n\nVanessa was panting.\n\n\"Put it where? I'll do it! I'll do it! It's there!\"\n\nThe buzz went up.\n\n\"Oohyes Yes! YES! MORE! OOOOH! MORE!\"\n\nIt went up again. Vanessa begged.\n\n\"Please! Oh please! Just a little more!\"\n\nIt got louder, Vanessa drowned it out.\n\n\"YES! YES! YES! I'm gonna, gonna...\"\n\nThere was a moment of silence except for the buzz. It shattered along with Vanessa.\n\n\"nnnNNNNNGGGGhhhhhh! OH! I'm cumming! Cumming!\"\n\n\"oh MY GaaaAAAAHHHHHhhhhh...ooh ooh ooh ohhhh\"\n\nHer sounds calmed as it passed. Audrey heard some heavy breathing, the buzzing stopped. Vanessa's voice was husky.\n\n\"mmm...ohhh...that was wonderful!\"\n\nThere were a few embarrassed giggles.\n\n\"Whew! I'm a sticky mess!\"\n\n\"You did too?\"\n\nMore giggles.\n\n\"See you next week?\"\n\n\"Ok then. Bye for now.\" \n\nAudrey heard Vanessa take a deep breath and exhale loudly. She scurried back to her bed, hastily opening a book. Vanessa's door opened, a moment later she stuck her head into Audrey's room. Her face was flushed and relaxed. She seemed a bit wobbly.\n\n\"Sorry if I was loud kiddo.\"\n\nAudrey shrugged and lied. \"I didn't notice anything, I was reading.\"\n\nShe held her book up as proof, hoping Vanessa didn't notice it was upside down. Vanessa supressed a laugh, and sat on the bed.\n\nShe explained that she paid the bills by working online. Her clients were referred to her by a service, completely anonymous. There was a camera and microphone attached to her computer, and guys paid a lot of money to watch her. More specifically, to watch her get off Her orgasms were real. Very real.\n\nThe customer got to get her off by controlling a vibrator that hooked into the computer. The money was great and she got to cum her brains out several times a week. She decided when she wanted to work, and which clients she would take. It was a great job.\n\nVanessa eyed Audrey. \n\nShe offered, \"You know, they're always looking for more girls....\"\n\nAudrey blushed to her roots. Vanessa felt bad she had embarrassed her shy, sweet friend. She took her hand.\n\n\"Oh, Audrey! I'm so sorry! I didn't mean...it's just that you're so pretty! I'm really really sorry!\"\n\nA bunch of thoughts and feelings collided inside Audrey. That Vanessa thought she was pretty, that the money would pay to get her system fixed, that she was too embarrassed to admit she'd never had an orgasm. A secret thrill ran through her at the idea of being watched. The thought of it caused a little flush.\n\nAudrey told her not to worry, that she knew Vanessa's offer was from the heart, as was her apology. They both smiled, realizing their friendship had just grown. Vanessa stood, and roughed up Audrey's hair. Audrey bopped her with a stuffed animal. In seconds, they were letting each other have it with anything soft that was in reach. Vanessa broke up laughing.\n\nBetween giggles and snorts she said \"Imagine if someone was looking in the window right now! Here's me in this get up, and you in your 'cute nerd girl' clothes, having a pillow fight. Sounds like something you'd read on a porn site!\"\n\nThey both broke up. Vanessa pulled off her platforms, and headed for the shower. Audrey gave up on her book, too distracted by the events of the evening and the dull ache in her girly parts. She changed into a t-shirt and panties, and climbed into bed.\n\nHer mind was racing, she couldn't sleep. A little later, she heard Vanessa leave the bathroom and turn on the TV. Audrey rose and closed her door to muffle the sound, but she could still hear bits and pieces of dialogue. It was still a hundred times better than the Dorm.\n\nAudrey tossed and turned in the darkness. Her mind was calming down, but her pussy wasn't. The thought that she had referred to it as a pussy sent a mild shock through her. She rolled to her back, and pushed down the covers. Her hands and fingers softly played over her body, lingering on the skin between the bottom of her t-shirt and the top of her panties. \n\n'Pussy' she thought 'My pussy is horny.' \n\nThese were new thoughts to her, adding heat to an already smouldering mound. Her hands floated lower, touching herself through the cotton. She blew a gentle breath between pursed lips. Her hand cupped the soft rise in a gentle massage. It felt good, so good. She squeezed a little harder. A soft sigh slid from her.\n\nShe could hear the movie from the TV, something about Pirates. Her mind drifted to the open sea, she was on a Pirate ship. The fantasy deepened, she pressed into her hand. She was the Captain's wench, a virgin he would soon teach the pleasures of the flesh. He had kidnapped her, at first for ransom, keeping her for himself after it was paid. He would make this girl a woman.\n\nHer thumbs slid under the waistband of her panties. In her mind, they were the Captain's. He peeled them off her legs, past her ankles, and tossed them aside. His eyes gleamed as the sight of her exposed feminity, wet in spite of herself.\n\nHer hand found one of her stuffed animals, a moment later 'the Captain' was between her thighs. She turned to her side, rubbing herself into the fuzzy nap of it's/His body. It was soon wet, adding a delicious friction to her horny pussy. Her thighs squeezed tighter, her hips moved slowly, spreading more of her sweet juice over the fur. She moved Him a bit higher, finding that special spot that sent little sparks surging through her. Her pleasure rose and then stalled at a place where she was left wanting more. She wanted to find that elusive point of release, but didn't know how to get there.\n\nShe drifted off as the Captain took her. He followed her into her dreams, fucking her horny pussy, his thick shaft thrusting her pleasure beyond anything she had felt. It built, and built, and still he fucked her. The pleasure was indescribable.\n\nA growing tension, a rising tingle that flowed and drove her higher, more tension, more tingling, all seeming to rush together into a sweet knot that tightened and tightened as the tingle became electric, drawing into a whirlpool of sensations that flowed, rose and tightened all at the same time, until, until.....everything froze for a moment, and then tried to rush out all at once in an exquisite stampede of explosions and contractions that she wanted to go on forever. \n\nAudrey snapped awake, her mind clutching at the last strands of her dream. Her hands were balled into tiny fists, dug into the fuzzy body between her thighs. Small twitches pulled at her sex from within. She had never felt anything like that before. Her whole body felt more alive, yet so relaxed. She rolled to her back, moving the animal, her hand feeling for her panties. For some reason, she wanted to giggle.\n\nShe found her undies, pulled them on and settled back into her pillow. For a moment, she had a craving for chocolate, a moment after that she was sound asleep. She slept late the next day.\n\nIt took her a minute to remember where she was. Sleep tried to cling to her, but she pulled herself up, feet finding the floor, and hurrying to the bathroom. Normally, she was a bit grumpy in the morning, but not today. A slow secret smile crossed her lips as the memory of her dream floated back to her. She splashed some cool water on her face, still trying to wake up fully. The apartment was quiet, she guessed Vanessa was still asleep. She padded to the kitchen, marveling at how relaxed she felt. She gave a small squeak as she rounded the corner, meeting Vanessa's smile head on.\n\n\"Sorry!\" she laughed \"Didn't mean to scare you.\"\n\nAudrey composed herself. \"I thought you were still asleep!\"\n\nShe poured some juice, and then noticed the time.\n\n\"Shit! I'm gonna be late!\"\n\nVanessa smiled again. \"You ace every exam in that class, they can get along without you for one day.\"\n\nAudrey nodded and agreed, her stress level was really low today. She suggested they cut all their classes, and hang out for the day. Vanessa quickly agreed. She jumped up, grabbed her juice, and waved Audrey into the living room. She turned on the TV, just in time for Bob Barker. They settled in, both looking hot in their t-shirts and panties. Out of nowhere, Vanessa produced a bag of M&M's, and dangled it teasingly.\n\nAudrey's mouth watered. \"OOOOH! Gimme! Gimme! Gimme!\"\n\nShe melted into bliss as the chocolate kissed her tongue. The show and candy went on, Audrey couldn't remember the last time she'd felt so good. The new place was fantastic, Vanessa was awesome, they had entertainment, and chocolate. Life was very very good.\n\nVanessa asked, \"You sleep well?\"\n\nAudrey beamed. \"Like a log!\"\n\nVanessa gave a low chuckle, \"I thought so, sounded like a good one.\"\n\nAudrey gave her a confused look. \"What do you mean?\"\n\nVanessa grinned. \"Oh come on, I heard you!\"\n\nAudrey's mouth opened in shock, her face went red. \"You heard?\"\n\nVanessa giggled. \"Oh yeah, you're kinda loud.\"\n\nAudrey realized there was no point beating around the bush, she told Vanessa all about the dream that felt so good. Vanessa gave an odd look. Something was dawning on her.\n\nShe chose her next words carefully, \"So you're saying that you've never....?\"\n\nAudrey shook her head. Vanessa blinked, trying to figure out if Audrey was putting her on. She stared, waiting for a hint of a smile, something that would give away that she was joking. Vanessa realized she wasn't, and put out a tender hand. A moment later, she gave Audrey a warm hug. The two friends sat close together, arms and shoulders touching. They watched TV for awhile in silence, broken only by the plastic of the bag as they passed it back and forth. Finally, it was gone.\n\nAudrey was starting to doze, she leaned and put her head on Vanessa's shoulder. Vanessa stroked her hair tenderly. She sighed, and let the older girl pet her. Everything just felt so nice today. Vanessa's touch moved to her arm, and then to her face. Audrey opened her eyes to find Vanessa's face inches from hers. She looked her friend in the eyes, and gave a contented smile. Vanessa had a serious look in her eyes, instead of her usual impish sparkle.\n\nShe had something to say, but seemed to be searching for the words. They came slowly.\n\n\"Audrey\" she said softly, \"I'm not gay, or bi, or even curious about it. In fact, I've never even thought about another girl before. I like you, you're my friend. It hurts me to know that you've never.... Well, you know.\"\n\nShe swallowed hard, and continued \"What I'm trying to say is, if you'd like, I could.... you know, uhmmm, show you?\"\n\nShe looked down, and then back into Audrey's eyes. Audrey was deeply touched. She cupped Vanessa's face with her hands, and closed the distance between their lips. Their kiss was sweet, soft and gentle, a shared moment between friends. As it broke, they both knew it would be the last. They smiled, and then hugged each other with a combination of affection and relief. Neither of them wanted to go there. They broke down in embarrassed giggles, and pushed each other away.\n\n\"Ehewww! Gross! You kissed a girl!\n\n\"Oh yeah? So did you! Do ya love her? Are ya gonna marry her?\"",
        "Audrey grabbed the extra cushions on the couch, and began tossing them at Vanessa as she retreated toward her room. Vanessa fired back, hitting only air as Audrey was already gone. Day off or not, she still had to catch up on what she had missed last night. She flopped on the bed, opened a book, and buried her nose in it.\n\nA while later she looked up, noticing her furry lover from the night before. There was a big spot of her dried juices on it. She grabbed it, and used her nails to scrape the poor little fellow off. Her own scent floated back to her as flecks of dust broke free from the matted nap. In a few minutes, he was good as new. She turned back to the book, and ran across something she'd have to look up.\n\n\"Hey Vanessa?\" she said loudly.\n\nA spooky, exaggerated 'ghost voice' answered from the other room. \"Vanessa is deeeeeaaaad! She was killed in the Great Pillow Fiiiiight!\" \n\nAudrey played along, \"Goooood! Then she won't mind if I use her compuuuuuuterrrrrr.\"\n\nVanessa replied from the Other Side, \"Nooooo, go aheaaaaaad!\"\n\nAudrey rose, and moved to Vanessa's room. It was nice. Big, comfy looking bed, matching furniture. The computer desk was sleek, very high tech looking. She settled in the chair, and turned on the system. It came on quickly. A prompt popped up, stating there were messages for 'Angel'.\n\nAudrey raised her voice again, \"There's a bunch of messages for Angel on here, what do I do?\"\n\nShe heard Vanessa rise quickly, with a small \"Oh shit! I forgot!\"\n\nVanessa hurried in, laughing softly. She explained, \"Angel is the name I use online.\" They both blushed.\n\nA mischevious look came into Vanessa's eyes. \"Wanna see?\"\n\nAudrey was shocked, but couldn't say 'no'. A moment later, she got to see inside 'Angel's' world. It seemed most of the guys wanted to cum on her tits. A few were from Angel's regulars, confirming appointments. Others were from potential new clients.\n\nVanessa linked them to the main site, and showed Audrey her ad for 'Angel'. There was a stunning picture of Vanessa, lit from behind, and softly from in front and above. It took Audrey's breath away. Vanessa moved the pointer over a button marked 'Video'. She looked questioningly to Audrey, who hesitated, and then nodded 'yes'.\n\nA second later, there was Vanessa/Angel, panting her way toward climax. Her body shook and jerked, her face flushed, her mouth open. She froze, her face tightened, and then she shook hard as a long moan poured from her. The clip ended.\n\nAudrey's mind split again, wishing she would know that kind of pleasure, that people would watch, that if the opportunity ever rose again to be with Vanessa, she would take it. A motion from the corner of her eye caught her attention. \n\nVanessa was holding up the remote control vibrator. It was white, about 5 inches long, about an inch and a half across. A series of bumpy ridges ran along the length of it It was made from some kind of soft rubber, a wire ran from the base to a plug in the computer.\n\nAudrey stuck out a finger, touching it out of curiousity. Vanessa pushed a button, it hummed to life. It felt like an obscene joy buzzer. She shrieked and pulled away, laughing. Her nerve returned, she touched it again.\n\nThe buzz traveled to Audrey's finger, tickling it in a strange way. Her fingers closed around it, the vibrations thrummed between and through her fingers. Vanessa moved the pointer to what resembled a thermometer on the screen, and moved it up slightly. The humming in Audrey's hand rose a notch. Vanessa raised it in bits, showing the other girl what it did. At just past halfway, it began to throb with some real power. Audrey looked up, her eyes questioning. Vanessa turned it to 'full'. The younger girl's eyes widened, a big smile of shock and surprise lit her face. This thing had a kick to it! She could only imagine what it felt like on her....her pussy. She flushed at the thought.\n\nVanessa turned it down, and then off. Audrey handed it back to her, her fingers still tingling from the device. Vanessa went through her messages quickly, and closed the program. Audrey noticed it's icon in the taskbar. Vanessa moved back, indicating she was finished.\n\n\"Well?\" she asked, \"What do you think?\"\n\nAudrey shrugged and replied with a small laugh, \"I've never seen anything like it, that's for sure!\"\n\nVanessa told her, \"You wouldn't believe how hard that thing makes me come! Some of those guys can play it like an instrument! Higher, lower, steady, teasing me until I want to scream, begging them to let me come. Knowing that they're watching just adds an extra thrill to it. Only certain clients get to work it, but any others can watch. There's a counter on one side of the screen, so I know how many guys are watching me. Just imagining them, all hard, all wanting me, knowing they can't, gets me SO! Fucking! Hot! I'll tell you a secret, I'd do this for free.\"\n\nVanessa's face was flushed, she stopped and caught herself. Audrey tried to imagine what it must be like, knowing hundreds of faceless guys were all stroking themselves over her. A chill ran through her.\n\nVanessa spoke again. \"Oh yeah, you had some work to do.\"\n\nThey both laughed. Vanessa went back to the living room, Audrey dug into her work. She made her notes, and finished shortly after. As she moved the pointer to shut off the system, it lingered over the 'Angel' icon. Finally, she moved away and shut it down. She took a deep breath and stood.\n\nVanessa's voice came to her from the next room. She was on the phone. \"Yeah! That sounds great! Count me in! When are they leaving? Tonight? Well, I'd have to pack in a hurry, but I can make it. Ok, yeah, cool. I'll see you then!\"\n\nAudrey walked in as she hung up and threw her hands in the air. \"Road trip! I'm gonna be gone all weekend, you got the place to yourself!\"\n\nAudrey was a little put out Vanessa hadn't asked her to go with, but then realized she wouldn't have gone anyway. She couldn't remember the last time she'd been alone, total freedom to do what she wanted. She was looking forward to a quiet weekend on her own.\n\nThe rest of the day passed in a blur, Vanessa flying around packing, Audrey working hard on her books. They stopped to grab a quick bite, and then Vanessa was out the door. Audrey was finally alone.\n\nFor a second, she stood, her mind blank. A smile crossed her face, she arched an eyebrow. She looked around, a few minutes later she stepped into the bathroom with some candles, half a bottle of wine, and a bowl full of M&M's. Just a quiet night with her and Mr. Bubble.\n\nHer mind melted away like the chocolate in her mouth as the foamy water closed sweetly around her. She sunk in to her neck, cute dimpled knees poking above the pile of suds. The candles flickered dimly through her closed lids. From time to time, her hand would rise from the bubbles and find either the bowl of M&M's or the wine. More often than not, it found the wine. She breathed a deep sigh of serenity, the warmth of the water on her skin combining with the warmth of the wine inside. The bottle was soon empty.\n\nShe watched images and thoughts float past in an abstract parade of erotica. Under the water, her other hand found herself. Her fingers slid gently along her slit as the parade marched on. A long time later, the water began to cool, bringing her out of her trance. The candles had nearly burned down, the bubbles were long gone. She sat up, enjoying the chill as cooler air kissed her skin. Her dark nipples stood out in tiny peaks.\n\nA full length mirror reflected a beautiful, soft young woman. Her hands glided over her wet flesh, watching herself in the mirror. The wine, sensual bath and chocolate had made her extremely horny. Her skin dried in the air, her pussy grew wetter. A finger slid inside her, and then slowly in and out. A second finger joined it. Audrey's mind moved to the last time she'd had sex. It was only her third time, her second boyfriend.\n\nShe remembered how good he felt sliding inside her, and how quickly it was over. It left her wanting more. Her fingers moved a bit quicker, her breathing deepened. She closed her eyes, savoring the feeling. Her thumb brushed over that special spot, the tingles started. She pushed again with her thumb, there. A low grunt came from within as an explosion of tingles raced through her. It was beginning to feel very much like her dream.\n\nHer thumb pressed, and began to trace a pattern on her now swollen bud. Her lips tightened, she felt a gentle drop somewhere below her stomach. Her sounds echoed softly off the tiles. A few involuntary tremors ran through her, that delicious tension was beginning to build, along with the tingling. Her hips moved with the motion of her fingers and thumb.\n\nAudrey groaned in disappointment as she felt the tension and tingles begin to level off. Her fingers and thumb moved faster, but she just couldn't get to that point, to feel that dream again.\n\nShe slowed, and then stopped. She was panting. Her pussy actually ached, it was hungry. Tears of frustration welled up in her eyes. Suddenly, an idea sprung to mind. If the dream wouldn't come to her, she would find the dream.She grabbed her robe, throwing it on as she moved with intent to Vanessa's room.\n\nAs she turned on the system, she hoped Vanessa would understand. She settled into the chair, the front of her robe falling open. The system came up, she aimed the cursor at the 'Angel' icon with trembling hands. A moment later, the menu came up. She grabbed the vibrator, wetting it along her slit as she waited for it to go on. There was nothing. \n\nLittle cries of need and frustration flew from her lips. She clicked on a few of the menu buttons, and still nothing. Audrey's need built to a new pitch as the bumpy ridges slid along her pussy, with the occasional nudge against her aching and swollen nub. Her inner hunger took a huge bite.\n\nIn a fury, she clicked more buttons. She was concentrating on getting the vibrator to work, she didn't notice the little light on the camera had gone on. Her breath came in ragged gasps, punctuated by whimpers of desire. She scooted deeper into the chair, raising her feet to the desktop. Her legs spread as wide as she could get them. The head of the vibrator pushed, and then slid easily into her soaked pussy.\n\nHer slick tightness gripped the bumpy ridges as they slid in and out of her. It felt good, so good, but she still needed more. She tightened her grip as the vibe began to get slippery. She pushed it deeper, only moving the last inch of it in and out. The tension started to build. She thrust faster.\n\nShe glanced up, and noticed a message box had opened. It asked, 'Who are you?'\n\nBetween pants, she asked \"Can you hear me?\"\n\nA moment later, the box answered 'Yes.\"\n\nThe counter showed 12.\n\nShe asked again, \"Can you see me?\"\n\n'Yes, I can see you.'\n\nThe counter showed 27.\n\nAudrey squirmed, jerking the vibe faster.\n\n\"Uhn! Mmmm! Ooh!Ooh! Hmmm.\"\n\nThe counter showed 59.\n\nAudrey didn't give a shit about the counter, only the wet heat between her shaking thighs. Words and sounds collided in a rush.\n\n\"Can...uh-uh-uh Oohmmm! Can you-oohooh make this work?\"\n\n'Ask me nice.'\n\n\"OHhhhh! oh oh oh plea-PLEASE make it work!\"\n\nA moment later, it jumped to life inside her.\n\n\"OHHHHHhhhhhhh! Oohooh-OOH! Ohh-that's-so-nice.\"\n\nThe counter showed 163. Audrey's overheated body shook with lust.\n\nThe box asked, 'More?'\n\nAudrey begged. \"Yes! Oh more! More please! Yes oh Yes!\"\n\nThe vibrations moved up several notches. Audrey went into overdrive, her body jerking.\n\n\"Hummmmm! Mmm! MMMMMOHHHHHHH!\"\n\nThe tension, tingles and vibrations all flowed and built. Audrey slammed the vibrator deeper, just holding on to the end. The rest of it hummed away inside of her. She was getting close, she needed-\n\n\"More! More! MORE!\"\n\nNothing happened. She peered from between heavy lidded eyes.\n\nThe message box read, 'Rub your clit.'\n\nShe cried, \"I don't... I don't know how!\"\n\nThe box read, 'Are you kidding?'\n\n\"NO! I'm not kidding! I don't know how! Tell me!\"\n\nThe counter read 357.\n\nThe box said, 'The little bump at the top of your pussy, rub it.'  Audrey's fingers found it, and dug in. Fireworks went off, her eyes glazed. It was almost too much, her hand jerked, stopped and then started back up, faster. She couldn't stop again if she wanted to. Sparks joined the tingles, the tension. The vibrations began to rise and fall.\n\nTwo fingers rolled over and over her slick pearl as she pumped the vibe faster into her pussy. Her mouth fell open, then snapped shut, her jaw jutted, set with determination. The whirlpool grew inside her. Her whole body shook with effort. The robe had long ago fallen open, her pert titties bounced as each new sensation rolled through her with a jerk.\n\nHer face tightened and relaxed as waves of building pleasure sought a place to crest and crash. Her eyebrows pulled tight, her brow wrinkled with exertion, and then melted into bliss. The whirlpool had risen to the point of consuming her.\n\nAudrey worked harder, chasing that just out of reach release. Her butt pushed deeper into the chair as her heels dug into the desk. Her fingers flew over and over her sweet nub, harder, faster. Barks of passion flew from her mouth. She finally caught it.\n\nThe sparks, the tension, the tingles all flowed into the whirlpool. It pulled into itself, and then rose. Her legs tensed, her body locked. She took a deep breath and held it. The vibrator went to full power.\n\nHer head bobbed once, twice. She grit her teeth, and swallowed loudly. An explosion of ecstacy went off between her legs, pouring out in a torrent of twitching release. She let herself go with the sounds of unleashed pleasure that only a woman can make. \n\nHer head rolled to one side, her mouth an 'O' as her shoulders jerked from side to side. Each crash rocked her body as the force of her climax ripped through her. About 15 seconds later, it started to pass. To her, it seemed forever, it was not long enough.  Her sounds slowed, and then her breathing. Her body relaxed and then jerked as one last bolt raced through her. The vibrator stopped, she pulled it gingerly from her overworked and sensitive slit.\n\nHer body hummed like it was charged with electricity. Random sparks went off above and beneath her skin. She was disoriented, exhausted and felt more alive then she ever had. Her senses returned. She slowly focused on the screen. \n\nThe counter read 579.\n\nThe realization that hundreds of guys had just watched her experience her first climax set in. She scrambled, and shut down the system as quick as she could. The screen went blank. She pulled her knees up and hugged them to her chest. She sat for a long time, trembling with aftershocks, savoring each moment. \n\nShe raised her face, and smiled at the blank screen. Audrey already knew she'd be back tomorrow. "
    ],
    "authorname": "Extreme Bohunk",
    "tags": [],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/virtually-fucked"
}
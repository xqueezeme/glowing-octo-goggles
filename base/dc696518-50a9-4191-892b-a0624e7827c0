{
    "title": "Sandstorm Ch. 02",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 9 - Family Loss\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News.\" the lovely redheaded reporterette said somberly at 7:00am, Friday, June 9th, from in front of the Federal Building. \"We are bringing you continuing coverage of the assassination of the Deputy Director of the FBI!\"\n\nBettina started: \"FBI Deputy Director William Hargreaves was shot and killed yesterday afternoon or evening in what was supposed to be a safehouse in the Lake Amengi-Nunagen area. Several other FBI Agents were killed with him, including Special Agent in Charge Jack Muscone, Special Agent Martin Nash, and Special Agent in Charge Les Craig.\"\n\n\"Special Agents Lindy Linares and Sandra Speer were gravely wounded, and are in critical condition at Beaver Ruin Regional Hospital in the town of Beaver Ruin.\" continued Bettina. \"Channel Two News has learned that they may be life-flighted to University Hospital later today, if they can be stabilized enough to make the trip. We have several reports for you now. Roll tape.\"\n\nFBI Special Agent in Charge Dana Fox appeared before cameras in front of the Beaver Ruin Sheriff's Department Headquarters, in footage taken the night before. He said: \"This is a terrible, tragic day for the FBI. We will not rest until we find those who killed Deputy Director Hargreaves and our fellow FBI Agents, and bring them to Justice.\"\n\nBettina came back on, live: \"Sources tell Channel Two News that there had been threats against the Deputy Director, and he was being hidden in that safehouse.\" Film footage showed the hillside the previous evening, from a distance. Tons of blue, white, and red lightbars were illuminating the area. \"It is not clear how the defensive cordon was penetrated...\"\n\n* * * * * * * * * * * * * * * *\n\nThe group eating breakfast in the back room of the Valley Villages resort clapped and cheered as they watched Bettina's broadcast.\n\n\"That's one of the bastards out of the way.\" said Wallace Bedford.\n\n\"Wait...\" said Lawrence Kendrick. \"She said Les Craig was killed, as well?\"\n\n\"Yes.\" said Conrad King. \"I've gotten word through my sources that Craig shot the Deputy Director and the women, but Special Agent Nash was able to draw his weapon and fire at Craig. A gun battle ensued, leaving Craig and Nash both dead. It's unfortunate, but Craig gave his life for our struggle. Let's never forget that, nor him.\"\n\nEveryone raised their glasses of orange juice and toasted the memory and sacrifice of Les Craig.\n\n\"Okay, put out the word.\" said Wallace Bedford. \"The code is 'Chariot Advance'; it signals that the next phase of our operation can be executed. It will spell the end of the Iron Crowbar.\"\n\n\"That will be a glorious moment.\" said Henry Boxman, malice in his voice...\n\n* * * * * * * * * * * * * * * *\n\nIt was a pain-filled MCD room. Joanne was trying not to cry, and was failing, and Theo was trying to comfort her. Tears were also streaking Teresa Croyle's face. Teddy Parker and Jerome Davis were sitting at their desks, in shock. The Vice Squad Detectives were also somber as they watched Bettina's report. \n\nEven Myron Milton, no fan nor friend of the FBI, looked sad and somber, and his wife Mary was openly crying in his arms.\n\n\"Oh my God, all of them.\" Joanne was saying. \"They were... good people.\"\n\n\"Martin was one of us before he went over to the FBI.\" Teresa said, remembering. \"And it feels like we've lost one of our own... several of our own...\"\n\nChief Moynahan came in. \"Yes, I agree with you, Captain Croyle. Put out the word: black tape on all TCPD badges. We've lost... family. I'm going to take Chaplain Calvin to see Lt. Perlman.\" He left the room.\n\n\"Oh God, poor Tanya.\" said Teresa.\n\nJermaine Davis was looking around. \"Where's Captain Ross?\" The effect on Teresa was like a lightning strike.\n\n\"Oh, noooooo...\" Teresa wailed.\n\n\"What?\" asked a chorus, realizing something bad was about to be said.\n\n\"She... she was going to go up there yesterday.\" said Teresa, her voice beginning to break. \"She... I've got to go find Briscoe, and see if he can find out if... she was there...\" Teresa ran out the door, as much to get away and hide her emotions as to do anything else. Joanne's head was bowed in prayer.\n\n\"They didn't mention her name.\" said Jermaine Davis. \"Maybe she wasn't there.\"\n\n\"She wasn't.\" said a voice in the doorway. Everyone looked up.\n\nTeresa was being redirected into the MCD room... by Cindy Ross.\n\nThe relief in the room was palpable, but most obvious on Teresa's face. She was all but clinging to Cindy as they came into the room arm-in-arm...\n\n* * * * * * * * * * * * * * * *\n\n\"This poor girl has been through living hell.\" said Chief Moynahan as he drove Chaplain Calvin to Tanya's home. \"Mr. Muscone was like a rock to her, helping her to raise young Pete. And now he's taken from her, too.\"\n\n\"May the Lord bring comfort to her in her hour of need.\" said Chaplain Calvin. \n\nThat's not really helping, thought Chief Moynahan to himself.\n\nThey arrived at the house and knocked. The door was opened by... Your Iron Crowbar.\n\n\"Come on in.\" I said. \"I got here before you.\"\n\n\"Hi, Chief, Chaplain.\" said Tanya Perlman brightly, sitting in her wheelchair in the living room, holding little Pete. \"What brings you here to see us?\"\n\n\"Uh, is she aware?\" asked Chief Moynahan to me.\n\n\"Oh yes.\" I said. For a moment, the two men were stunned. Then the Chief began catching on.\n\n\"O-kay, Mr. Crowbarrrr.\" he said. \"Why don't you explain what is really going on, herrrrrre.\"\n\n\"Why don't I let this guy explain it.\" I said, waving my hand towards the hallway entrance. As I did, someone walked into the room.\n\n\"Oh, you will be burned at the stake for this one, Mr. Crowbarrr.\" said Chief Moynahan.\n\n\"Yes, he's really outdone himself, this time.\" said FBI Special Agent In Charge Jack Muscone.\n\nPart 10 - Your Iron Crowbar At Work\n\n(The previous day...)\n\nI walked up to the two Deputies in their car at the gate of the safehouse. \"Was that him?\" asked one of the Deputies.\n\n\"Yes, it was.\" I said. \"Now if you'll just come with me and hide in my wife's car before Special Agent Craig gets back with the intent to kill you two, we'll take care of some business.\"\n\nLaura had driven me up to the location. Her Mercedes had all the legally-required 'Theft' light and other devices that allows the Government to track any car made in more recent years. The Black Beauty is grandfathered in by age, and has no such devices. However, Laura's got 'people'; she had them put in some extra software that allows her to disable those devices, so that she can travel undetected if she needs to. And yes, she and I tested things out thoroughly to make sure she could become a 'Ghost Rider'.\n\nThe Deputies, and their Sheriff who I'd met during the Jeanine Burke murder, had been forewarned by me earlier that it would likely be an inside job in the attempt to kill the Deputy Director. I also mentioned that cell phone signals in the area would be jammed, and when that happened, we got ready.\n\nWhen Les Craig and Sandra arrived, I had the Deputies hide... Laura drove them down the road. After Craig came down, saw the empty Deputy car and went back up, I pressed the button in the car to open the gate. Laura let out the Deputies, picked me up, and we rode up after seeing Craig go inside.\n\nWe had to hope we would be fast enough, and that Craig would not resist a bit of drama and would not shoot the others immediately. Cindy had her armor on, and an extra layer (yes, a 'girdle', folks, she's a smart Canadian cookie!), but it was still going to be close.\n\nAnd then Providence struck on my behalf. \n\nLes Craig's back was to the door, and he was holding the others at gunpoint. As I opened the door, gun drawn, I was aware that I'd be firing right at the others. Craig heard the door open and whirled his gun around to meet the threat...\n\n*BLAM!* *BLAM!* *BLAM!* *BLAM!*\n\nThe shots struck Craig under his armpit and on his shoulder, and one got him right in the neck. His gun fired, but missed me and the bullet struck the door jamb. I looked over to my right; standing in the kitchen doorway, smoke still curling up from the barrel of her gun, was Sandra Speer. She had fired the shots. \n\nLucky. Lucky Iron Crowbar.\n\nLes Craig was still alive. As Sandra came up to him, tears were flowing down her face. \"I trusted you!' she gasped. \"How could you? I trusted you!\"\n\n\"You bitch!\" gasped Craig, looking up at her. Lindy came over and took Sandra into her arms as Craig looked over at the Deputy Director.\n\n\"God damn you.\" he gasped. \"White... powerrrr...\" \n\nAnd with that last testament to what he truly held most dear, Les Craig expired.\n\n\"Don... how?\" gasped the Deputy Director. But I was already in motion, waving Laura to come inside. She took control of the crying Sandra Speer, beginning to use her expertise in psychology to comfort the badly shaken woman.\n\n\"Well, you made it in time.\" said Cindy, using her pawky vein of very understated humor.\n\n\"Yes.\" I said. \"But it was a near thing. Too near.\"\n\n\"Sandra,\" I heard Laura ask, \"how did you know to hide in the kitchen?\"\n\n\"I...\" Sandra said, through sobs, \"I realized... he knew the route perfectly... didn't slow down, didn't look for the driveway. Then when he said he dropped his notebook, I realized he hadn't dropped it...\"\n\n\"Laura, why don't you talk to Sandra in the kitchen.\" the Deputy Director 'suggested'. His eyes were firmly upon me, and I was returning his stare, not flinching nor backing down. Lindy went with Laura and Sandra.\n\n\"All right, Don.\" said the Deputy Director. \"You were right. All along. So what just happened?\"\n\n\"You were just assassinated, sir.\" I said. \"In a gun battle, you and your team here were all killed, but someone, perhaps Mr. Nash here, was able to return fire and kill Les Craig.\"\n\n\"Ah, a ruse.\" said Jack Muscone.\n\nI smiled. \"It's going to get better, too. God! how I hate the Press, so I am going to really enjoy letting them feed a false narrative to the world that is of my making, as opposed to their own.\" That made Jack Muscone laugh. Everyone else was still in semi-shock.\n\n\"Why?\" asked Martin Nash.\n\n\"This is actually a fantastic opportunity to strike at our enemies, at Superior Bloodlines.\" I said. \"If we let them believe they've killed you, sir, they'll stop trying to kill you... and they'll also continue with their plans. And when the time is right, your Team here will rise from the dead and make some very effective arrests.\"\n\nI turned to Cindy. \"Okay, Kato, get the Black Beauty the hell out of here. Go east to Waguli, then south towards the City, then back to Molly's place in Nextdoor County. Avoid the Federal facility and their cameras. I'll see you in the morning.\"\n\n\"Wilco, sir.\" Cindy said. She scooted out, and a moment later I heard the powerful engine of the Black Beauty starting up.\n\nAfter that, it was simple enough. Special Agent in Charge Dana Fox arrived, and we briefed him on the situation. The ruse began: tons of police and other vehicles arrived. Two ambulances left swiftly with Sandra and Lindy, then three more with the 'bodies', one of them really dead.\n\nIn the following hours of chaos, it was not hard to slip Jack and Martin into Laura's car and get them out of there. Lindy and Sandra were rolled into surgery... and in the operating room they made a miraculous recovery. Two 'male' doctors came out of surgery, and were not noticed being taken away by Dana Fox's Special Agents.\n\n* * * * * * * * * * * * * * * *\n\n\"So all I can tell you,\" Cindy said, \"is that I didn't get up there in time. And it was already chaos when I got to Beaver Ruin. So I called Don, who said come back home.\"\n\n\"Where is he now?\" asked Teresa.\n\n\"He went to Tanya's.\" Cindy said. \"Taking care of his people, of course.\"\n\nTeresa's Police cellphone rang, and she answered it. \"Hi Chief. Yes, Captain Ross is here. Okay, no problem; I hadn't made the announcement yet.\"\n\nHanging up, Teresa said \"The Chief changed his mind; no black tape on our badges. We'll do something else to honor Nash, but black tape reminds Tanya of the last person we put black tape on our badges for... Pete Feeley.\"\n\n\"That's a good thought.\" said Cindy. \"Okay, guys. Let's get to work. There is absolutely no excuse for paperwork to not be done by the end of the day. Isn't that right, Grubby?\"\n\n\"Yes ma'am.\" said Grubby Paul, with a visible wince. Grubby Paul was not one for paperwork...\n\nPart 11 - Black On Black\n\n\"Where's Big Ice staying?\" asked T-Square as his bulletproof limousine rolled into the City.\n\n\"He's at the Windham City Plaza Hotel, taking up the entire 8th floor.\" said T-Mac, who was sitting next to T-Square. \"West of the Palladium Concert Hall complex, just across the street with park space between. Jasmine Nix is in the penthouse suite of the Palladium International Hotel, which is attached to the north side of the Palladium complex.\" \n\nT-Mac pointed out the locations on the Apple Maps on his computer screen, then said \"We're staying at the Marriott Grande Hotel, in the penthouse suite. Henry Wargrave would stay there and have business meetings; it's more secure than the Windham City Plaza. If he'd been there instead of in the Cannon Building, he might still be alive today.\"\n\n\"Doubtful.\" said T-Square. \"The Iron Crowbar wanted that man dead, and so he came over all dead. Let's make sure the Iron Crowbar doesn't want either of us dead in the future, and we'll lead healthier lives.\"\n\n\"I hear you, brother.\" said T-Mac. \"So it's all down tomorrow night. Big concert by Jasmine, you make the early appearance on stage with her, then you're the hell out of there while Big Ice is on stage with her and they begin calling for the protests.\"\n\n\"Good job, T-Mac.\" said T-Square. \"You've done a real good job. I'm sure a little bit extra will come your and Gloria's way in the near future.\"\n\n\"Thank you, sir.\" said T-Mac. \"Our team is always ready to serve you. And keep you safe.\"\n\n* * * * * * * * * * * * * * * *\n\nJasmine Nix looked over the City from the window of her penthouse suite, seeing the Wright Building and the Cannon Building to the south, the Marriott Grande hotel not far from them. \n\n\"Are these really the best hotel facilities in the City?\" she asked her aide, a tall, slender black man named they called 'Stevie'.\n\n\"I don't know, Ms. Nix.\" said Stevie. \"But it's the best combination of security, getting out of here and to the Airport easily, and good comfort and service.\"\n\n\"The food better be good.\" said Jasmine. \"Better than the cleaning service, anyway.\" The place was clean; Jasmine was just looking for something to gripe about.\n\n\"*Ahem* Ms. Nix...\" said a large, muscular man, also black, known as 'Spike'... not because of his hair, which was well-groomed; nor the size of his large penis; but because of what he'd used to kill people that had crossed him in drug deals. Now, he was head of Jasmine's security... and like Stevie, was expected to satisfy her in bed if called upon.\n\n\"Stevie, go check on breakfast arrangements.\" said Jasmine. When Stevie was gone, Jasmine said \"What?\"\n\n\"Ma'am, it's on the news.\" said Spike. \"The Deputy Director of the FBI has been assassinated.\"\n\n\"Oh my goodness!\" Jasmine exclaimed. The television was turned on, and they watched KCTY then KSB reports.\n\n\"Hot damn!\" said Jasmine.\n\n\"Ma'am, he was kind of on our side.\" said Spike.\n\n\"He's still a fucking cop with a badge.\" said Jasmine disdainfully. \"Any idea who nailed his ass?\"\n\n\"Word I'm getting is that it's one of those Cracker groups, maybe 'White Roots'.\" said Spike. \"He's been trying to nail them for years.\"\n\n\"And they think they're going to nail us.\" said Jasmine. \"Those fuckers don't even realize that we know who they are, and when they try to come against us when we're making our protests, they're going to suddenly have knives in their kidneys.\"\n\n\"And bullets in their heads.\" said Spike. \"As will the fucking cops. By the way, there's one more thing. We've got word the Cracker groups are going to kill T-Square's sister's baby, because the baby-daddy is a cracker himself. So do we let them do it, or continue our plan.\"\n\n\"We continue our plan, and kill that halfbreed and her mother.\" said Jasmine. \"If the Crackers get there first, just back off and abort. If we get there first, we'll set up the Crackers to take the fall for it.\"\n\n\"I can only imagine what the Iron Crowbar is going to do to them.\" said Spike. \"It's his daughter.\"\n\n\"All the more reason to kill them.\" said Jasmine. \"The Iron Cracker is the worst cop of them all, and the biggest abuser of our People. He's going to die himself. It's too bad it'll be before he hears about what happens to his halfbreed kid...\"\n\nThere was a knock on the door, and Stevie came back in. \"The private dining room will be ready for us in an hour.\" he announced.\n\n\"That's just enough time.\" said Jasmine. She began slipping out of her tight dress, letting the garment fall to the floor, then removed her underwear. Wearing only her high heel gold lam\u00e9 strappy sandals, she turned to the young men.\n\n\"All this talk about cops dying,\" she said, \"gets me very hot. What are you two still doing in your clothes?\"\n\n* * * * * * * * * * * * * * * *\n\nT-Square sat on the edge of the bed as the girl sat on her knees on the floor between his legs, her warm, wet mouth sliding up and down his huge cockshaft. She was pretty, and had aspiration of a singing career. Her mouth and throat were great for sucking T-Square's massive black snake; unfortunately her mouth and throat sucked at singing.\n\nT-Square had no problem making girls give him sex in exchange for a shot at singing stardom, knowing they didn't have a chance and would soon be discarded. Many of them ending up working the strip poles in his clubs, or prostituting themselves to the clientele at his better clubs. Some lucky ones were 'discovered' by that blonde porn star that was getting face-deep into that cop Cindy Ross every night, but for the most part a much unhappier fate awaited those women.\n\nHe was getting more bored than turned on with this girl. She began jacking his long, thick shaft to get him off, her hand flying up and down faster and faster. Finally, he felt his nut rise, followed by the painfully ecstatic pulses of release as spurts of white jism erupted from his black cockhead.\n\n\"All right, baby.\" he said. \"Get cleaned up and get on out of here. I'll see you tomorrow night at the party after the show.\" The girl went to the bathroom as T-Square put on his pants. T-Mac politely knocked on the door.\n\n\"Hey Boss,\" T-Mac said, \"turn on the TV. Someone assassinated the Deputy Director of the FBI.\"\n\nT-Square turned on the TV and watched as he got dressed. T-Mac watched also. \n\n\"Shit.\" said T-Square. \"It's going down.\"\n\n\"There's one more thing.\" said T-Mac. \"We got word that someone wants to kill your sister's baby because the baby-daddy is the Iron Crowbar. Do you want us to put some protection for them in place, or let your sister handle it?\"\n\n\"Give her a call and warn her.\" said T-Square. \"And with the Crackers starting up their shit, tell her to really watch her back.\"\n\n\"How do you know the Crackers are starting up shit?\" asked T-Mac.",
        "\"They just killed the Deputy Director of the FBI.\" said T-Square. \"The Teacher told me that that would be their signal to start killing our people, meaning blacks in general.\"\n\nJust then the doorknob to the bathroom jiggled and the woman came out, fully dressed. \"What?\" she asked as both men looked at her somewhat sternly.\n\n\"Get on out of here.\" said T-Square, knowing she'd overheard them. \"And keep your mouth shut if it don't have a nigga cock in it...\"\n\n* * * * * * * * * * * * * * * *\n\nThe fit black stud 'Spike' looked down and watched his huge, thick cock sink into Jasmine Nix's pussy from the rear. His strong hands grasped her waist and pulled her hard into him with each powerful thrust of his throbbing hard meat.\n\nJasmine Nix was renowned for her magnificent black ass. As Spike's hardened abs and groin pounded into her asscheeks, making them ripple, he thought of how millions of black men wished they could be where he was, behind this glorious ass, fucking Jasmine's tight wet pussy. But they were not long enough to take this intensely hot ride.\n\nMeanwhile, Jasmine was sucking young Stevie's big cock. Well, more like he was fucking her mouth, thrusting his long cockshaft over her tongue and into her throat. She'd given him incredible blowjobs and fucks before, but with another man plowing her cunt from the rear, they both knew that it was easier if he just fucked her face.\n\nJasmine loved being 'spitroasted' by two well-hung men, and indulged in MMF sex often. But this was just the tip of the iceberg: she thought about how her millions of fans had no idea how nasty she was in the sack. She loved orgies, and knew that after the album debut and after-parties, there was going to be one hell of a blowout feast of sex, and she expected to be humped and pumped by many men, and for her pussy to be totally messed up with the loads she would drain out of them.\n\nSpike couldn't handle it; Jasmine's cunt was too good. \"I'm gonna come... UHH!\" he gasped out as the first spurt of white jism blasted from his black cockmeat and deep into the bright pink of Jasmine's tight wet cunt. Streams of come were fired into her by the invading weapon of lust, until he was spent.\n\n\"Damn, nigga, that musta been one hell of a fantasy.\" Jasmine said. \"You came fast.\"\n\n\"Sorry, ma'am.\" Spike said, feeling chastised, and knowing Jasmine was right that he'd failed his mistress by climaxing too quickly.\n\n\"Get over here so I can clean that up and suck you hard again.\" Jasmine said. \"Stevie, show this nigga how a real man takes care of me.\"\n\nStevie got behind Jasmine and sank his cock balls-deep into her cream-filled cunt. He began fucking her hard and deep, not really liking the sloppy seconds but not complaining, either. Soon the room was filled with wet squishing noises as he fucked her sweet celebrity cunt into a hot, creamy lather.\n\nMeanwhile, Jasmine had licked all of the mixture of Spike's semen and her juices off his half-limp cock, then she sucked on his wet balls. It wouldn't be long before the stud was aroused again, and able to last longer and redeem himself by fucking her to a massive orgasm.\n\nWhat Jasmine did not know, was that she had a traitor in her midst...\n\nPart 12 - The Empire Strikes Back!\n\n\"Hello, young Donald.\" said the voice of Dr. P. Harvey Eckhart on my personal cellphone at 9:30am. \"Your friend Mr. Tower just landed the helicopter you asked for here on my helipad at 'The Vision'. I've arranged to have him transported back home by car.\"\n\n\"Thank you, Uncle Harvey.\" I said. \"I'll be there either today or tomorrow at the latest to get it.\"\n\n\"Splendid!\" said Dr. Eckhart. \"My young acolytes are showing great interest in it, so do get here before they decide to take it apart and see how it works.\" I laughed and thanked Dr. Eckhart, then hung up.\n\nThe Bell AH-1 is the 'Cobra', the fierce fighting helicopter of the Viet Nam War. Though replaced in the Army's service by the AH-64 'Apache', newer versions of the AH-1 are still used today by foreign nations and also for civilian uses. The Bell 209 'Firesnake' is an adapted Cobra to be used for fighting forest fires. I had one adapted so that instead of carrying water or flame retardants, the tank would carry extra fuel. That made the chopper a flying bomb, but I could go a lot farther if I needed to. Dr. Eckhart had paid for it all, and would use it for security at 'The Vision' compound when I wasn't using it.\n\n\"Why do you have a helicopter at my father's headquarters?\" asked Cindy as she came into my office five minutes later.\n\n\"Well, you have all the fun driving the Black Beauty.\" I said. \"So I thought I'd upgrade with my own ride. Seriously, we're going to be using it soon, if I don't miss my guess.\"\n\nJust then, Cindy's Police cellphone rang. \"Oh, hello Dr. Fredricson.\" she said, with a quizzical look at me. \"Er, no, I haven't seen Callie...\" The look on Cindy's face was changing rapidly to concern. \"I talked to her at 5:00am this morning... okay, I'll check.\"\n\nAs Cindy hung up, she looked at me and said \"Laura said Callie didn't show up for work this morning, and Callie's not answering her phone.\"\n\n\"All right.\" I said. \"First, you take some deep breaths.\" Cindy did so as I got on the phone to Myron. \"Hi Myron, I need an emergency cellphone ping trace.\" I gave him Callie's number, then hung up.\n\n\"It may be nothing...\" Cindy started.\n\n\"I think you and I both have the vibe on that one.\" I said. My phone rang. It was Myron.\n\n\"That was fast...\" I said. \"At her condo? Probably in her car? Okay, thanks, we'll check it out.\"\n\n* * * * * * * * * * * * * * * *\n\nThe Police cruiser dispatched to Cindy and Callie's condo reported back via radio. \"Roger, the vehicle is here, with her purse and cellphone inside. Door is locked, no signs of violence or a struggle. We're knocking on the apartment door now...\" After an interminably long minute, the call came back \"No answer at the door.\"\n\n\"I'm going over there.\" said Cindy.\n\n\"Send Joanne in here on your way out.\" I said. I called Laura, as well.\n\n* * * * * * * * * * * * * * * *\n\n10:30am. Cindy had said that Callie was going to go to Town Fitness Centers and work out at 6:00am, like she normally did. But she had not arrived there, and it appeared she'd possibly been abducted just as she was getting into her car.\n\n\"No fingerprints on or in the car, except Ms. Carrington's and Captain Ross's.\" reported J.R. Barnes.\n\n\"Cameras in the area were knocked out,\" said Myron Milton. \"Interference, like a Slender Man sighting. They must've used some kind of jamming.\"\n\nAs I sat in my office and processed information, Cindy was on the sofa. I remember what she had endured, the mental anguish when Jenna Stiles and been kidnapped and gang-raped by the Consultant of Crime's men. And now Cindy was re-living that nightmare. \n\n\"It's going to be okay, Captain Ross.\" I said. \"We'll get her back.\"\n\n\"How can you be sure?\" Cindy asked. \"What if... what if they're...\" she did not finish.\n\nI got up and went around to the sofa, sitting down next to her. \"Listen.\" I said. \"This isn't like that situation with Jenna. These guys just want me; they're not trying to get Jack Burke tapes or anything like that. They know if they harm Callie, we're going to come at them with everything we have, just like we did when we rescued Jenna and ripped them a new one.\"\n\n\"Don,\" said Cindy, \"Callie is a woman, and a beautiful woman. You're a man; you do not understand what I am feeling right now.\"\n\n\"Oh I understand.\" I said. \"Even if I don't feel that same fear that all women feel at times. But look... you've got to get your head back in the game. Now listen to me. Look right here.\" I was pointing at my eyes, and made sure her peepers were locked onto mine. \"Now you have to do two things here, for us to succeed. You have to keep calm and collected, no matter how hard that is. And when we go get Callie, you have to do what I tell you and when I tell you to do it; lives will be at stake here.\"\n\n\"I don't suppose you'll tell me what you're planning.\" Cindy said.\n\n\"Au contraire ma cousine.\" I replied. \"Here's the plan, at least the part you're involved with...\n\n* * * * * * * * * * * * * * * *\n\n10:50am, Friday, June 9th. Laura had just arrived at my office, and she was talking to Cindy when I got a call on my Police cellphone, from Tanya Perlman's number. I took the call.\n\n\"The word is given.\" said Jack Muscone. \"Check out the CFPA site. You might want to avoid checking the Dakota Funding site unless you can re-route your signatures some way.\"\n\n\"I'll check it out.\" I said. Hanging up, I got on my computer and brought up the CFPA site. Instead of the words 'Pink Knights' and 'White Fury', it read simply 'The word is given.'.\n\n\"What does that mean?\" Cindy asked as she and Laura looked at the screen.\n\n\"I'm not sure.\" I said as I opened the Tor Browser application, to supposedly securely access the Dark Web. I've been told that it masks IP addresses so that users can't be traced... and then I've been told that the CIA created it. I'm sure it takes very little Iron Crowbar thinking to see the contradiction there, and apply Ayn Rand's philosophy to contradictions as stated in Atlas Shrugged.\n\nSo... my application first goes through some extra masking hoops, courtesy of Myron and Mary Milton, and only then does it access the Tor Browser and the Web. I routed through to the Dakota Funding site, went through the second level. The same screen came up, but when I highlighted the bottom right hand corner, it gave a phone number and the words 'Call me, Commander Troy'.\n\n\"Holy shit.\" said Laura.\n\n\"You got that right.\" Cindy said. \"You gonna call?\"\n\n\"You better believe it.\" I said. \"But first, I'll call Tanya's number again...\"\n\nSuiting the deed to the word, I speed-dialed Tanya. Jack Muscone answered.\n\n\"They're on to us.\" I said. \"I went through secure channels to get to the Dakota site, and there was a message for me there.\"\n\n\"Yes, we saw it.\" said Jack, and I realized he'd been messing with me earlier, to entice me to go see the message. He then said \"What do you think the CFPA website is about?\"\n\n\"The word is given.\" I said. \"It could mean anticipation of me calling this number and putting those wheels in motion, or it's a message to agitators to get ready to riot. I suspect the latter.\"\n\n\"All right, let us know what happens when you call.\" said Muscone.\n\n* * * * * * * * * * * * * * * *\n\nA minute later, Chief Moynahan and Detective Joanne Warner joined the others in my office. I dialed the number on my Police landline, putting the phone on speaker.\n\n\"Ah, Commander Troy.\" said a rather deep but gruff male voice. \"I've so looked forward to this first conversation between us.\"\n\n\"Yes, I've been expecting to be contacted by you... Mr. C.\" I replied.\n\nPart 13 - Wheels (and Crowbars) In Motion\n\nThere was a pause at the other end, and I could almost feel the man's shock as I correctly identified him, and in doing so showed just how much we knew about him.\n\n\"Not bad, Commander.\" he finally said, his voice full of condescension. \"Or was it a lucky guess?\"\n\n\"It was no guess.\" I said sternly. \"I recognize your voice.\" \n\nAnother pause at the other end. Of course I remembered my 'dream' when I was being tortured by Dr. Casey B. Walker. I remembered very clearly that voice from that man who'd stood over me. I wonder if he knew just how I knew...\n\n\"I see.\" said Mr. C. \"So let's stop wasting each other's time. Here is another voice you will doubtless recognize.\"\n\n\"It's me, Don, it's Callie.\" I heard Callie's voice say a second later. Laura hugged Cindy, partly to comfort her, partly to restrain her. \"I'm okay--\"\n\n\"Your Captain's friend has not been harmed.\" said Mr. C., having taken back the phone. \"I am not an uncouth thug like Charles Roland and Raymond Westboro. But I digress. It is time for you to trade yourself for Ms. Carrington. I'm sure the Iron Crowbar can figure out where. And the sooner the better.\"\n\nWith that, the line went dead.\n\n* * * * * * * * * * * * * * * *\n\n\"Damn, you rattled his cage.\" Laura said. \"Maybe even worse than when you rattled my old mother's cage.\"\n\n\"Yes.\" I said, somewhat introspective, halfway in the world and halfway in my own head. \"I cannot allow them to think that they are dealing with an Agency of the Weak Minded.\"\n\n\"Where's the trade going to take place?\" asked Chief Moynahan. \"He said you'd know, or figure it out.\"\n\n\"Yes, and that's an 'easy button' one: he's at the Federal facility.\" I replied. \"Ms. Ross, if you'll be kind enough to go and get the Black Beauty...\"\n\n\"It's in the parking lot.\" Cindy said. \"I went and got it after going to my condo to see if Callie was inside.\"\n\n\"Dayum, one day you are going to be a great Police Chief.\" I said, kidding both her and the Chief in one fell swoop. \"Okay, let's get started. Detective Warner will come with us. You'll drop me off at 'The Vision' World Headquarters, then proceed along State 142 then State 141 up to the Federal Facility. You're going to blow the doors off the front gate, literally; then you'll blow out the doors of the main building, the 'hangar' building. Joanne, as soon as you cross the County line with Captain Ross, you will be an SBI Reserve Agent...\"\n\n* * * * * * * * * * * * * * * *\n\n\"There he is!\" Cindy said as the Black Beauty drove swiftly up State 141. Joanne looked out the front windshield and saw the Bell AH-1 (modified) Cobra flying in from the west.\n\nThe Vision's acolytes had been all abuzz about the helicopter, then seeing me get into it and start it up. They all waved as I took the craft up, circling a couple of times to get used to the feel and handling of it. Then I waved back to them and flew east.\n\nI took a more northerly course, getting north of the Nextdoor County Highway that went from my County to the City, then paralleling it. Both County Airport and City Airport were much less than amused by my appearance on their radars, and made sure I understood where the airline flight paths were, and to not get anywhere near them.\n\nAs I flew over Lake Reservoir and then the eastern mountain finger, I thought to myself with some humor that it had been Pastor Westboro himself that had paid for my pilot training, and now I would be using that training to fuck the hell out of one of the most insidious 'deep state' cells within the Government...\n\nI flew north, almost all the way to Lake Watchacoochie, seeing the Lake and the town of Waguli at its southern tip. Then I began flying east, through the W.M.A. airspace, then finally cutting south. I'd timed it well; the Black Beauty was just getting to the Federal facility after having crossed the State Line.\n\n* * * * * * * * * * * * * * * *\n\nDr. Laura Fredricson sat at her desk in her office. She was on her most secure CIA line, and had hooked into a satellite feed. The Federal facility appeared on her screen.\n\nA text box opened, and the message said 'In position. C has six assets inside, per heat readings.'. \n\nLaura replied 'It is GO to exterminate C with extreme prejudice... pun not intended.'. That got a smiley face \" :-) \" in reply.\n\nAll she could do now was wait. Either her husband would outwit this bastard, or he would die. And she did not want to contemplate life without her husband, so she did not do so...\n\n* * * * * * * * * * * * * * * *\n\n*WHUMPOOM!*\n\nThe missile from the Black Beauty slammed into the doors of the metal building, blasting a hole where once locked doors were. A similar missile had blown the gate doors off, allowing entrance into the facility. Cindy saw the signs that warned trespassers that guards were authorized to use lethal force, and she knew she had as much lethal force in her own hands.\n\n\"Okay, Joanne, ready?\"\n\n\"Yes ma'am.\" said Joanne.\n\nAs the Cobra landed on the basketball court to the side of the building, which also served as the helipad with a big \"H\" painted on it, Cindy checked for heat signatures.\n\n\"Oh shit, we've got bogeys inside.\" Cindy said. \"Hmmmm, and someone is watching from the satellite feed above.\" Joanne was silent, agog at the technology she was seeing in the Black Beauty.\n\nI came around the side of the building, and Cindy and Joanne got out of the Black Beauty, leaving the doors cracked open as I'd instructed.\n\nWe went inside. The front room was a hallway/lobby room, painted gray. The doors forward led to what looked like a gym or basketball court, but was huge. A balcony went around the edges. I motioned for Joanne to go up the stairs to our right, to the edge of the balcony, where she could see what was going on, but could not be easily seen.\n\nCindy and I walked into the large chamber. The floor was concrete, and our steps echoed. The room was at least 100 yards long, and maybe 60 yards wide.\n\nWe got a third of the way in when a voice said \"That's far enough.\" To our front left, ten o'clock position, a side door to the big room opened, and Callie Carrington appeared, her hands zip-tied behind her. Then Mr. C. stepped in. Yep, the same man from my nightmare. \n\nHe was tall, broad shouldered, having had a tremendous physique as a younger man, now balding, the front portion of his skull seemingly well developed and enhanced. He peered at us through burnished-gold-rimmed glasses. He had a revolver in his hand, pressed into Callie's back. He was wearing a white collared shirt but no tie, black pants, and a trenchcoat almost like mine, but darker gold.\n\n\"You brought weapons.\" said Mr. C. \"Very silly. And of no use.\" I had my swords, the short stabbing sword in my belt, the katana slung over my back. I was wearing all black except for the trenchcoat and Tilley hat. And of course I had the red crowbar in my hands.\n\n\"Give Captain Ross your weapons.\" said Mr. C. \"All of them.\" I had expected this. I handed Cindy the katana, my crowbar, and my holstered gun, but kept the short sword.\n\n\"Bringing a katana to a gun fight.\" I said. \"What was I thinking?\"\n\n\"Maybe you didn't hear me.\" said Mr. C. \"All of them.\"\n\n\"I heard you.\" I said. \"But you know I won't give up the short sword.\" To do so would mean dishonor.\n\n\"Very well. It's not going to matter.\" said Mr. C. \"But the trenchcoat, too. Take it off and give it to your partner.\" said Mr. C. I opened the coat, to show I had no more weapons hidden, then took it off and gave it to Cindy.\n\nHe pushed Callie forward. As he did, laser dots appeared on many portions of my body. \"Captain Ross, take your friend and get out of here. Don't even look back.\" said Mr. C.\n\n\"Do what he says.\" I said. Cindy nodded and began guiding Callie to the door from which we had entered.\n\n* * * * * * * * * * * * * * * *\n\nOnce they were into the front room, Cindy quickly put down everything and helped Callie out of her manacles. They women hugged, then Cindy said \"Okay, we're going to make a run for the Black Beauty right out front. The door should be open. We're halfway expecting them to start shooting at us, so run as fast as you can.\"\n\n\"No problem with that.\" Callie said.\n\nCindy wrapped Don's weapons in his trenchcoat, then the women burst out of the building at top speed. Just as they got to the Black Beauty, Cindy heard a *thwip!*.\n\n\"They're shooting!\" she yelled as she got to the driver's side door, wondering why she didn't hear the cracks of gunfire. When she opened it, she heard the *SLAM!* of a bullet hitting the side panel of the door.\n\nCarrie had raced to the passenger side and as she opened the door and got into the car, a *TWANG!* sounded as a bullet hit the roof of the car just to the front of her head.\n\n\"Hold this.\" Cindy said, handing Callie the Iron Crowbar's things. She gunned the motor and pulled out as a bullet slammed off the trunk of the car and skidded up the back window.",
        "Instead of going to the front gate, Cindy went around the side, pulling up to the Bell AH-1 as close as she could. She opened her door a little bit, the helicopter providing shielding, and dropped the red crowbar, trenchcoat, gun and katana on the ground as gently as she could, the fabric of the trenchcoat protecting the metal objects.\n\n\"Two perps, dead ahead, on the roof.\" Callie said. Cindy looked up, seeing two men clad in military camo on the roof of the building, firing at them with M-4 rifles. She brought up the forward Gatling machine guns, aimed with the dashboard-cam sights, and let rip a couple of bursts. Two men died.\n\n\"Let's get the fuck out of here!\" said Cindy.\n\n\"You're leaving Don?\" asked Callie, stunned.\n\n\"I have my orders.\" Cindy said. \"Which include getting you out of here, and do not include getting you hurt.\" The Black Beauty hurtled out the gate and onto the highway. Looking back, Cindy thought she saw a black-clad figure going into the building. She thought about going back, but knew she was responsible for Callie's safety. She kept going south, and soon they were back in their home State, relatively safe...\n\n* * * * * * * * * * * * * * * *\n\n\"Sir,\" said a young, clean-cut, freshly shaven young man to Conrad King's room, where he and Wallace Bedford were watching television. \"We've gotten some word from Washington that it's possible the FBI Deputy Director is not dead.\"\n\n\"What?!\" snarled Bedford, his head whirling around. \"How can that be?\"\n\n\"Our people there are saying that the FBI is not acting like they just lost their Deputy Director. They've gone into meetings, but there's nothing frantic going on. The White House is not even on elevated alert, and acting like it's business-as-usual.\"\n\n\"Wallace,\" said Conrad King, \"we'll need to verify it.\"\n\n\"Sir, if I may,\" said the young man, \"we've contacted some people in the Lake Amengi-Nunagen area. The two female FBI Agents that were supposedly wounded, they're not at the hospital there. The hospital said the women were life-flighted to University Hospital, and while University Hospital declined comment when we called posing as reporters, our people in that County said that no life-flights came in last night or this morning.\"\n\n\"We... we've got to get word to Mr. C!\" shouted Bedford. \"He's got to abort Phase 2! We've got to abort 'Chariot Advance'!\"\n\n\"Calm yourself, Wallace... yes, that's right.\" said Conrad King, willing Bedford to take a breath and calm down. He then turned to the young man and said \"Have you attempted to contact Mr. C.?\"\n\n\"We've tried, sir, but no response.\" said the young man. \"He may already be at the location... and the Iron Crowbar may already be there, as well.\"\n\n\"Go check.\" said Conrad King. The man left. King turned to Bedford. \"Well, Wallace, I prefer to die in my own home. I'm going back to Florida. I hope your son will be able to recover and be fully well into adulthood.\"\n\n\"You're leaving?\" asked Bedford.\n\n\"Yes.\" said Conrad. \"I don't have long left, as you know. And it all just fell apart. Farewell, my friend.\" With that, Conrad King wheeled himself into his bedroom to pack. Wallace Bedford left to find the others...\n\n* * * * * * * * * * * * * * * *\n\n\"I feel like I've seen this bad movie before.\" I said as I looked at the laser dots. There were doors that opened onto the balcony; there must be men hidden behind there, I thought. And there were two doors at the ends of the balcony, darkness beyond the doors, just like Joanne's perch behind me.\n\n\"I can assure you this time will be a different outcome.\" said Mr. C. \"And long overdue. I should have killed you when I had the chance.\"\n\n\"When Casey B. Walker was putting me through the wringer.\" I said.\n\n\"Ah, you must've been aware of my presence.\" said Mr. C. \"That is how you knew my voice.\" I nodded and he continued. \"Yes, I was standing there, looking down upon you, you nearly dead as it was. I could have, and should have, reached down and crushed your throat, and strangled the life out of you. But you had not broken, and they wanted the information you have in that red head of yours, so I did not... even though someone else there wanted me to do it... very, very badly. I'm surprised she did not kill you herself.\"\n\n\"Ah yes, the 'old mother', as you call her.\" I said. \"Good thing I didn't die... and that my wife didn't find out she was part of all that.\"\n\n\"Your wife will not be able to save you now.\" said Mr. C.\n\n\"Yeah, but I can figure this one out myself. I'm not liking these odds... let's even them up.\" I raised my hand and snapped my fingers. Red dots appeared on Mr. C.'s body.\n\n\"Indeed.\" said Mr. C. \"What you don't understand is that you're a dead man, Troy. My life is nothing in the balance in the salvation of the superior race... as long as you die with me, today.\"\n\n\"A pity.\" I said, expertly steering the conversation where I wanted it to go. \"They won't know what to put on your gravestone. Like your name.\"\n\n\"My name is a classified secret.\" said Mr. C., taking the bait. \"It is treason to mention it out loud.\"\n\n\"Well, if I'm not going to live to face those charges,\" I replied, \"then I'll just indulge myself. You are William Clyde, longtime operative in the CIA's darkest black ops groups. Once had an honorable career, to the point that your very name had to be erased from the public record to keep you alive, safe, and useful. But then you began getting stupid.\"\n\nMr. C. was looking surprised, and I had some more surprises for him. \"Yes, I also know that your full name is William Clyde Yarborough, brother of Dr. Yarborough of City University, founder of the Millwakee School. When he began his eugenics program at Millwakee, you were part of it. You began putting together cells within several bureaus of the U.S. Government. And many of your moles were products of your brother's Millwakee experiments, children of the women that were impregnated there, such as Dick Ferrell.\"\n\n\"I am curious how you found all this out.\" said Clyde. \"Your wife?\"\n\n\"Oh no, she had her own handler that couldn't be named out loud.\" I said. \"She had her own operations. And she never even knew that her handler's name... her old mother's full name... was Diana Louise Paulsen.\"\n\nI went on, hurling my words at him: \"By way of contrast, your operations were much deeper than Diana's or my wife's. Your operations covered more than the CIA. They got too big for that agency, and you spread your influence like a spider casts his web. You're just a junior version of Pastor Westboro, Mr. Clyde... but not nearly as smart as he was.\"\n\n\"But I will do what he failed to do: kill the Iron Crowbar.\" said Mr. C. darkly, holding up his revolver, which was pointed at the ceiling.\n\n\"Vee shall see.\" I said. \"Oh, one last thing... so sorry about your own son's death.\"\n\n\"What's that?\" asked Mr. C., looking more surprised than upset.\n\n\"Les Craig.\" I replied. \"Your brother had you impregnate a young woman at Millwakee. What's funny is how you guys use first and middle names. Vivian Leigh Towson, who was going to sell her eight-year-old son for a slug's sexual pleasure, went by 'Vivian Leigh' in L.A. She was part of Superior Bloodlines and the 'Polar Bears', and it was coincidence that we captured her in our nets early. Charles Thomas, the sniper who wanted to shoot my daughter.. .first and middle names. And of course, you used your first and middle names, dropping the last name, making it harder to catch you.\"\n\nI finished: \"And Les Craig... his full name, having taken his mother's surname, was Les Craig Paulsen. Nephew of Diana Paulsen's husband, an honorable CIA Agent who died in the service of his country. Les has been your liaison to the Superior Bloodlines groups, and your best mole in the FBI, as well as your very loyal son. He died yesterday. He failed in his duty to you, he failed to kill the Deputy Director and Jack Muscone's team, and he was himself blown away.\"\n\nI saw the man's eyes wilt inside. If we were going to die together, he would die knowing that his progeny was dead and his life's work lay in the ruins of failure.\n\n\"You're lying.\" snarled Mr. C.\n\n\"Am I?\" I said. \"Check that special cellphone of yours, the one that can get signals despite the jamming routinely employed here.\"\n\nKeeping his eyes on me, he pulled his cellphone out of his pocket. There were text messages, some saying the Muscone team and the DepDirector were still alive, and another confirming that Les Craig Paulsen was indeed dead.\n\n\"It's over, Mr. C.\" I said, relentlessly goading the man. \"You've failed. It is I who will go to my grave having defeated you, having destroyed everything you hoped to accomplish. I never broke from your torture, and I subsequently have broken you and everything you have built.\"\n\n\"You son of a bitch.\" snarled C. \"I am going to take great pleasure in killing you.\" He brought his revolver up to point at me, heedless of the laser dots on both of us.\n\n* * * * * * * * * * * * * * * *\n\nJoanne Warner had been listening to the Iron Crowbar's story with a mixture of fascination and fear, realizing just how deep and cold these waters ran. She was lying prone, her weapon trained on Mr. C. It was a distant shot for a pistol, but it was downward from height, and she was well trained by...\n\nShe felt a hand cover her mouth and jerked her eyes up to see that mentor, Melina Allgood, over her, making a \"hush\" sign with her finger to her lips. Joanne nodded and Melina released Joanne, then lay prone next to her.\n\n\"What are you doing here?\" Joanne whispered.\n\n\"My job.\" said Melina. \"If you shoot that man, you'll be arrested and charged with murder and treason. You can't kill him...\"\n\nWith that, Melina aimed her .22WMR auto pistol with the long barrel at Mr. C., using her forearm to steady her aim.\n\n\"... but I can.\"\n\nTo be continued."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "hot wife",
        "big cock",
        "spitroasting",
        "threesome",
        "mmf",
        "iron crowbar",
        "mystery",
        "police drama",
        "crime drama",
        "blowjob"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/sandstorm-ch-02"
}
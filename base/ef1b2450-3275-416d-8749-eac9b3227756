{
    "title": "The Strangeness Within Pt. 05",
    "pages": [
        "..........................*** Chapter 27 ***...........................\n\nEsther closed her eyes and gripped Abuela's hand. Nicola's warm body pressed against her back, one arm around her stomach, the other woman's physical presence calming the part of her brain that would otherwise refuse this task.\n\nWhen Abuela's onslaught came, it swept right over her, a hot wind lifting her light veils away, carrying her completely out of her body.\n\nIt had been easier every day. When she floated above Abuela's strange map of the world, she sensed a little more than yesterday.\n\nToday Abuela held them still, centered above the node she understood to be Abuela and Esther. A single point for the two of them, and all their uncounted complexity inside. It was a compression, the type brains were so good at. Take a complicated object and abstract it, until it became a single idea. A single point. But all the detail was waiting within, should Abuela decide to examine it. Down to the atomic level, if Abuela had the skill Nicola did.\n\nThe map shimmered as one path or another momentarily sharpened or blurred. Abuela was listening, her subconscious traveling down the forking paths at tremendous speed. It was what she spent most of her time doing: collecting information with every ounce of her attention. Allowing her intuition and experience to filter and redirect her searching, following strands, mostly to dead ends. A chance alignment of branches allowed a sound to travel much further than usual. A chipmunk was scared by a distant car, and its call startled a flock of birds.\n\nCountless bits of information, all of them meaningless on their own, but if selected with tremendous precision, they could add up to something far more. That was what the connections between nodes stood for, in Abuela's map: sets of circumstances relating one entity of interest to another. And even the entities represented by nodes were themselves constantly shifting. A room, a tree, a pebble, a person, a small region of air. It seemed impossible that any one mind could do this, and perhaps it was magic, or a miracle. Yet Abuela was doing it. \n\nEsther felt a shudder at her back. Nicola found something about this experience unpleasant, but so far she'd been too stubborn to explain. \n\nFinally Abuela ended the session, and Esther sagged back against Nicola, who took a ragged breath of her own. They had been nearly two hours in meditation.\n\n\"Describe what you experienced,\" Abuela demanded, and Esther began the recitation. She knew she'd made great improvements this week, but Abuela seemed unhappy.\n\n\"Too slow,\" she muttered. \"I will have to think about this. Very well, my child, you may ask your questions now.\"\n\nNicola had learned her lesson to stay silent in this time. Abuela had grudgingly accepted how much easier her presence made the process for Esther, and by extension Abuela herself. But Abuela's entire focus was Esther now, and whatever it was that Esther felt would speed her understanding.\n\n\"When you are searching for butterflies, are you doing this one at a time or all at once?\"\n\nAbuela thought about that. \"A combination, I suppose. There are far too many paths to search one at a time. And yet I must restrict my view drastically in order to hold all the necessary information in my mind. I suppose the restriction is the part that requires the most conscious attention, while my intuition and unconscious mind do the searching.\"\n\n\"Like an intuitive parallel processing,\" said Esther. \n\nAbuela smiled and nodded. \"There are many new ideas in the world, ones I wish had been available when I was groping my way to these skills. It is another advantage your young mind will have over mine.\n\n* * *\n\nAfter a snack, they walked slowly back to the cabin. Mark was outside chopping wood, his body as always a machine designed for the task. No wasted motion, every stroke perfect. Esther smiled at him, but he was intent on his task.\n\nOnce inside Esther flopped on her bed.\n\n\"I can't understand any of it,\" Nicola said softly. She lay back on her own bed, staring at the underside of the upper bunk.\n\n\"Any of what?\" Esther asked.\n\n\"What it is you and Abuela see,\" she said. \"Yes, I get swept away by Abuela as well. But everything is murky and chaotic. I can't make sense of a fucking thing. I thought I could learn, that Abuela misjudged me. But she didn't. I'm too stupid, Esther. My brain just can't follow where you go.\"\n\n\"You're one of the smartest people I know,\" Esther said. \"Abuela is trying to teach me, not you. All of what she does is focused on how she thinks I'll best be able to see. There's no reason to think our minds should work the same way. I think mine just works more like Abuela's, so she has a better chance of teaching me.\"\n\nNicola faced her with a scowl. \"Why do you have to be so fucking nice? I'm trying to feel sorry for myself here, and pissed off at you. The least you could be is an arrogant prick like me. Instead, I spend hours holding you, knowing that the best thing I can do is help you go places I'll never visit myself. It's killing me, Esther.\"\n\n\"You've been amazing support for me, Nicola. But I feel better every time. I think I could do it without you. There's no need to torture yourself.\"\n\n\"Don't you get it?\" Nicola said. \"Abuela's not giving me lessons anymore. She seems desperate to get you up to speed, and that can only mean one thing: she doesn't think she has much time left. This is my last chance to learn something from her, and all I'm getting is static. I'd rather at least do some good by helping you, and maybe my thick brain will eventually get something out of it.\"\n\nThe door opened, and Mark came in.\n\n\"I'm sorry,\" he said. \"I didn't mean to eavesdrop. Is it really so desperate with Abuela?\"\n\n\"I don't know,\" said Esther. \"She doesn't seem any worse than recently. But Nicola's logic makes sense.\"\n\nMark sighed unhappily and sat on the bed with Nicola, absently putting his hand on her leg.\n\nNicola sat up and kissed him, hard, on the lips.\n\n\"Please,\" she murmured, running her hands down his back. \"Let's just feel something good for a while.\"\n\nMark leaned into her kiss and closed his eyes. He always looked so much younger in these moments when he surrendered to Nicola. Nicola was trying to undo her clothes even as she kissed him, and Esther figured it was time to go.\n\n\"Stay,\" Nicola whispered. \"If you like.\"\n\nIt would only be frustrating. But the truth was she liked watching them even in the dark. She'd never seen them in the light of day. If she went elsewhere she'd be thinking about them anyway, and the temptation would be even greater to spread out her senses in the way Abuela kept warning her was dangerous.\n\nThat what she told herself, anyway, as she sat down again on her bed.\n\nNicola took a quick break to pull her shirt off over her head, and Mark immediately unclasped her bra, moving down to kiss her shoulders and cup one of her beautiful breasts.\n\nNicola flashed Esther a surprisingly nervous smile, then pushed Mark down on her bed, unsnapping his jeans and pulling them right off with his underwear.\n\nHe was rock-hard, as he always was once they'd started. Esther suspected it was something else he had conscious control of. She wondered what that would be like. Could Nicola do some of that? Getting herself physically aroused just with her mind?\n\nNicola began to kiss him gently, tongue and lips working from the tip of his penis all the way down to the bottom of the shaft, and into the fur on one of testicles, and then back upwards. She was following the spiral pattern of spots, and Mark was obviously enjoying it. \n\nJavier didn't have those spots on his penis, but his whole shaft was so sensitive. Surely he'd like it if Esther did this for him. Esther watched carefully, imagining it was her mouth and Javier's penis. Or perhaps Mark's. She flushed again at the fantasy.\n\nShe'd thought Javier always orgasmed quickly, but she was starting to wonder if that was more because of her rush to make him feel good. Nicola did that sometimes for Mark, but today she was taking her time. And she was showing off, Esther realized. Carefully positioning herself so Esther got a good view. Her breasts hung enticingly, brushing against Mark's legs as she moved. \n\nSlowly but surely Nicola intensified her attentions, eventually taking Mark's shaft into her mouth. This was a familiar technique for Esther, particularly when Nicola added her thumb and forefinger to help stroke around the base of Mark's beautiful organ. Mark grunted, and then his eyes opened and he met Esther's.\n\nHe quickly sucked in his breath and looked away, out the window. Nicola slowed slightly, and Esther realized Mark was losing his erection. Was he so upset to have her watching? Surely he knew she did that sometimes in the dark.\n\nNicola stroked his face and kissed him, pulling off the rest of her clothes, and then helping him off with his shirt. For a while she lay at his side, rubbing his chest lightly and murmuring in his ear. No, she was singing very softly. Esther decided she really had better give them privacy after all.\n\nWhen she moved past the bed, Nicola's hand reached out to hold hers for a moment. Esther nodded and smiled, and then she left them. For once, she was not even tempted to eavesdrop. As Nicola said, they deserved to feel something good for a while.\n\n* * *\n\n\"I'm glad we got a chance to sit down for dinner,\" said Mam\u00e1. \"I'm sorry you're leaving so soon, but I'm sure it will be an exciting move for you.\"\n\nKat smiled as she helped Javier corral the dishes. \"If you're ever in San Jose, I'd be happy to host you. You too, Javier, if you want something other than dorm food next year.\"\n\n\"Thank you,\" Mam\u00e1 said. \"And thank you for being such a mentor for Javier. I can't tell you how excited he is to be learning so much about computers. I can hardly tear him away from it.\"\n\n\"He's a great student,\" said Kat. \"Honestly, he could probably get a job already with what he knows. Better than fast food, eh, Javier?\"\n\nJavier blushed. She hadn't given him such direct praise before. And it was true, he didn't have a summer job lined up yet.\n\nWhen she was gone, Mam\u00e1 gave Javier a hug.\n\n\"I see why you like her,\" she said. \"Smart, funny, and pretty. I'm sorry she won't be around.\"\n\n\"Yeah,\" Javier said. \"She's a good friend. And the guy she got to take over at the computer lab isn't nearly as pretty.\"\n\nMam\u00e1 laughed. \"Maybe he's my type. We'll engage in a cyber love affair, free from society's gaze.\"\n\nJavier snorted. \"On my computer, I assume.\"\n\nIt was nice to hear Mam\u00e1 make adult jokes with him. Another tentative step toward whatever they would have when he left for school.\n\nHe hoped Mam\u00e1 found someone. She hadn't seriously dated in years, and even back then she'd only introduced him to a handful of men. But lately she seemed more relaxed about the prospect. Mam\u00e1 needed more company than just him.\n\nHe went up to his room and finished some homework. When he was ready for bed, he sighed and turned on his modem.\n\n Dear Kat,\n\nMiss you already. Hope the move tomorrow is easy.\n\nFor a while he poked around on his remote connection to the school computers, editing some simple programming scripts he'd written. Then his screen beeped with the new mail notification.\n\n Javier,\n\nMiss you too. I wish I'd met your mother earlier. I like her a lot. But I'm relieved to be getting out of here. Today I found another pair of Mar\u00eda's underwear in my drawer. I hope that's the last of her things I'll have to toss. \n\nThe apartment's so empty it feels as though I'm a visitor. Everything's packed except my two favorite vibrators. I'll need those tonight.\n\n-Kat \n\nThere was something oddly exciting about reading her blithe banter on the screen. Even more than when she'd made masturbation references in person. The Kat behind the screen might already be in her underwear the way Javier was. She might already be fantasizing about Mar\u00eda, or whatever her fantasies were these days.\n\nHe felt his erection grow. He really shouldn't be thinking about her this way. But he found himself pulling off his boxers.\n\nHe read her e-mail again as he stroked his dick. He wondered which were her two favorite vibrators. And why did she need two? Two at once?\n\nHeart pounding, he typed in a reply.\n\n Kat,\n\nLucky I do just fine with my hands. \n\nYou deserve to find some brilliant, funny, hot girl in San Jose. I hear that's where they're all going. Good luck tomorrow and I'll see when I can get out to visit.\n\n\n\nHe sighed, and was about to shut down the connection when a new mail came in.\n\n Javier,\n\nMake sure you do a good job with those hands. And because you're so incredibly sweet, I'll be dedicating my first one to you tonight. Now I'll sign off so I can use both hands.\n\n-K\n\n\n\nJavier's mouth fell open. She'd implied she was already masturbating, just as he was. A few miles away, Kat was getting herself off.\n\nHe couldn't think of any reply to that e-mail, so he shut down his computer and went straight to bed, his hand never leaving his erection. Five minutes later he erupted all over the hand towel. And it was only as he lay there catching his breath that he thought to wonder what Esther was doing.\n\n* * *\n\n\"How far away can you affect events?\" Esther asked. \"How many like us are you trying to protect?\"\n\nAbuela nodded. \"It varies. I may have difficulty finding a path to something a few paces away, even while I can find one for an event hundreds or thousands of miles distant. But those very distant paths are extremely rare. Or perhaps they are common enough, but the haystack is so much larger at those distances that I cannot perceive them. If I could, I would protect all of us on the planet. In practice, the protection I can provide is more limited, perhaps to those within the western half of this nation.\"\n\n\"So Nicola was one of the furthest people you have pulled to you?\"\n\nAbuela nodded. \"As Nicola guessed, it is easier to reach out to a sensitive person than it is to affect most physical objects. Humans are exquisitely sensitive systems, always balanced among choices. Our actions and thoughts depend on our senses, and the right adjustment in sensations can produce changes in action.\"\n\n\"That's how you are able to extend your senses to me,\" Esther said. \"It's how you could affect Anthony's actions so dramatically.\"\n\nAbuela closed her eyes. \"Yes,\" she said quietly.\n\n\"Abuela,\" Esther said slowly. \"Is this why you are so concerned about consent? How often do you influence people's decisions to achieve what is needed?\"\n\nAbuela opened her eyes again and held Esther's gaze.\n\n\"As little as I can. And yet, it is so difficult to avoid. At the largest distances, the great majority of butterflies I have available involve the choices of humans, particular those with heightened senses. I always search for other ways, but in the end I must choose the least poor option. We are always influencing each other with our words and actions, and therefore my goal is to spread my own influence as weakly and widely as I can, so that it is little different from all the mundane influences we feel.\"\n\n\"You made me come here, though,\" Nicola blurted. \"I knew that, but you've been manipulating us more than that, haven't you?\"\n\nAbuela turned her gaze on Nicola. \"I have made every attempt to let you live your lives as freely as possible. You must understand, keeping people like us safe and free includes keeping everyone safe from our own kind, especially from those like me with subtle capabilities. If there is one principle I abide by, it is that we should never use our abilities to harm others. That is why Anthony's actions were so intolerable.\"\n\nNicola couldn't hold her tongue. \"So if he'd just slapped me around like a normal asshole rather than Hulking out, he could have stayed?\"\n\n\"Do not mistake me,\" said Abuela. \"I kept Anthony as long as I did in hopes I could teach him control. I failed him and you both, and for that I am profoundly sorry.\"\n\nNicola clearly wanted to say more, but Abuela shook her head.\n\n\"I must clear my head and continue my own meditations. Perhaps you begin to understand why I so rarely give you my full attention. Every instant brings uncountable changes to our world, changes that I must grapple with. And I am fallible as any human.\"\n\n* * *\n\n\"I hate it,\" Nicola said. \"I hate thinking she could have been manipulating us. It's been the elephant in the room all these years. Mark trusts her like family, because that's what she and Keith were to him, but I've never been so good at trusting.\"\n\n\"I believe her, though,\" said Esther. \"That she has tried not to push us around, at least not with her powers.\"\n\n\"Even so, you didn't see what she did to Anthony,\" Nicola said. She shuddered. \"Of course he deserved it, but the power to do that to someone is terrifying. Think of what Mark could do by accident if he ever lost his concentration for an instant, and now imagine that for Abuela.\"\n\nShe stopped and suddenly grabbed Esther's wrist.\n\n\"Esther. When you learn these powers, promise me something.\"\n\n\"I would never use them on you,\" said Esther. \"I never want to use them at all on people.\"\n\nNicola shook her head. \"No, you heard Abuela. You're going to be faced with the same decisions she is, and you'll have to learn how to use them subtly. I trust your judgment, but you must promise me: afterwards, tell me. Tell me if you realize or even suspect you've nudged me to do something. I never want to be constantly wondering about you the way I am with Abuela.\"\n\n\"All right,\" said Esther. \"When I had my orgasm, I lost myself for a moment. In my desperation I reached out to everyone most important to me, trying to pull them close. I didn't know what I was doing, but I'm sorry. I'm pretty sure that was all I did to you.\"\n\nNicola stared at Esther. Finally she sighed.\n\n\"Like I said. We're goddamned lucky that you're who you are.\"\n\n..........................*** Chapter 28 ***...........................\n\n\"So,\" Kat said. \"Like the new place?\"\n\nJavier nodded. It was already starting to have that lived-in look. Kat's science fiction and technical books spilled off of her bookshelves, and most of the furniture in the studio apartment had stuff piled on it already.\n\nIn the month since Kat had left, Javier's urge to visit had grown steadily, and when Memorial Day weekend came he'd taken the overnight bus. He'd been tempted to pull his sedan out of storage, but he wanted to reserve that for when he was going incognito.\n\n\"Thanks for letting me come stay,\" said Javier. \"I needed to get out of town. With senior prom coming up Clara's making gestures in my direction again, and I just couldn't handle it. I did tell Mam\u00e1 I'd do some job hunting while I'm here, just so you know.\"\n\n\"Well, good for you,\" said Kat. \"I'll see what I can think of.\"\n\nAfter spending the afternoon out sightseeing, they got take-out Chinese and settled into chairs in front of her computer.\n\n\"All right, so here's the big news,\" she said. \"You know how I've been trying to get into the Fresno site's computer system. Human resources was easy, but the rest of their security is much better. I finally broke my way into another system, though I can tell it's still not connected to anything central. But here's the thing: someone else had already broken in!\"\n\nShe showed him the telltale signs.\n\n\"They're good, but not as good as me,\" she said with a smile. \"So I've started watching them. I might even be able to figure out where they're coming in from, depending on how sloppy they are.\"\n\n\"You think these are the people who've been sabotaging InfoCorp?\"\n\n\"I hope so,\" said Kat. \"I want to figure out what their game is. I bet they know more than we do.\"\n\n\"We should be careful,\" said Javier. \"You know what Raj said. They might be dangerous, and we don't know their agenda.\"",
        "\"All the more reason to figure it out,\" said Kat. \"Believe me, I'm taking every precaution.\"\n\nHe nodded. \"God, I hope we can get somewhere. I've been floundering around, useless. I'm so glad to have your help.\"\n\nShe smiled. \"This is the most fun I've had in ages. The way my heart races when I'm in the zone \u2014 it's not sex, but I'll take it. I think I get why some of my friends spend all their time doing this, riding on the edge of being caught. And no, I'm nowhere near as foolhardy as some of them are.\"\n\n\"So,\" Javier said after a while. \"No one new, then?\"\n\nKat sighed. \"No. But I'm happier here, Javier. I don't walk down the street thinking people are staring at me, because there are plenty of other butch women for them to stare at if that's their thing. And there's a sex toy shop a half mile away. I think the clerk there is starting to flirt with me.\"\n\nJavier shook his head and laughed. \"So your collection --\"\n\n\"Is expanding a bit again,\" she said, laughing. \"Want me to show you?\"\n\n\"Uh, maybe another time,\" he stuttered, and she laughed.\n\n\"So, how about you?\" she asked. \"Do you have anyone, or are you going to skip the prom?\"\n\nHe shook his head. \"School feels like this fantasy. Like there's nothing real going on there, and we're all just going through the motions, except no one else has realized it.\"\n\nKat nodded. \"That's how I felt through most of high school, honestly. I guarantee you're not the only one feeling that way, but those others are going through the motions just like you. Anyway, prom's overrated. I was already dating Mar\u00eda then, but we didn't feel like being The Lesbian Couple. So we just went out on a date and skipped right to the sex.\"\n\nJavier smiled, trying to cover the uncomfortable thrill he felt. The kind of thrill he got every time they bantered a little over e-mail. It had seemed pretty harmless, but he was having second thoughts.\n\nKat did a little more snooping on the InfoCorp systems while Javier watched over her shoulder. Then she hung up the modem and they flopped on the couch. With all the books scattered on one end they were pressed close together. Javier's arm touched hers and he moved it quickly, but she let hers fall against his. It was a pretty butterfly tattoo.\n\n\"When did you get the tattoo?\" he asked. \"I liked it the first time I saw it.\"\n\n\"Oh,\" she said. \"Right after my eighteenth birthday. I got another, but it's pretty well hidden. If you want to see it \u2014\"\n\nJavier quickly shook his head. \"No, that's OK. Just curious.\"\n\nShe nodded and smiled slightly.\n\nHe should have said yes. It wasn't a big deal, really. He might have said yes another time, when he hadn't been thinking about what she did most nights with her toys.\n\nFor a while they sat there without saying much. Kat leaned a little more into him, and eventually he put his arm on the back of the couch. She sighed and put her head on his shoulder.\n\n\"Thanks, Javier,\" she said. \"Thanks for coming to visit. I missed you.\"\n\nEventually she got up to use the bathroom and get ready for bed. Javier quickly changed into his sleeping clothes and cleared off the couch.\n\nWhen Kat emerged, she was wearing pajamas. Cute pajamas, with little rocket ships and moons all over them.\n\nShe was thoughtful and smart and sexy. A little bit rounder than Clara, and with her glasses and the pajamas \u2014 he sighed. \n\n\"So, good night?\"\n\nJavier swallowed and headed for the bathroom. \"Yeah. See you in the morning\"\n\nHe stared at himself in the mirror, letting his erection subside. This was Kat. They had something nice, and he had better not mess it up with his dick the way he'd done with Clara and Samantha. He could only imagine Kat's discomfort if she found out what he'd been thinking about her.\n\n* * *\n\nJavier cooked eggs on the little stove while Kat took her morning shower. When she came out, she was wrapped in a towel.\n\n\"God, you cook too? Can I keep you?\"\n\nHe smiled and glanced back at her, but she was still modestly covered in her towel, carrying her clothes into the bathroom to change. He didn't know what he'd expected when he peeked.\n\nThey didn't have any set plans for the day, and over breakfast they idly chatted about San Jose and the upcoming school year. Kat gave him a bunch of good places to look for computer jobs, not that he was feeling very motivated. But he'd need the money.\n\nEventually Kat sighed.\n\n\"Being single sucks,\" she said. \"I'm going to have to get on the market. It's embarrassing how much I miss sex.\"\n\nJavier already knew as much from their e-mail exchanges. He nodded with what he hoped looked like commiseration.\n\nEsther couldn't have sex. She seemed to be really hung up on that, but then again Esther was such a novice. Not like Kat. She'd never had an orgasm. Maybe she didn't even know what the best ways were for girls. \n\nKat was right here, and she clearly didn't mind oversharing about sex. She was gay, so she'd know that much more about women, and she couldn't misinterpret his intentions. \n\n\"What's on your mind?\" Kat asked after he'd been silent for a while.\n\n\"Esther,\" he said. Kat nodded, looking resigned.\n\n\"Kat, do you mind if I ask you some weird questions? It has to do with Esther.\"\n\n\"Go for it,\" she said with a wave.\n\n\"Esther has an unusual body,\" he said. \"You never really asked me why people were after her. It's not just because she's unusually brilliant. We were pretty sure it's because she's subtly different from most people in a lot of ways.\"\n\n\"Unusual,\" Kat said slowly. \"How do you mean?\"\n\n\"She has strange colorations,\" Javier said. \"I told you about her eyes, but she also has blueish-purple freckles on her chest, which get brighter when she's aroused. Same is true for her, uh, nipples and areolae.\"\n\n\"Blue? Really?\" Kat said, raising her eyebrows.\n\n\"Yeah. And the freckled area is really sensitive. Plus she has another area on her lower back like that. They're erotic zones for her. And she has something closer to, well, fur, than the usual body hair.\"\n\n\"Huh,\" said Kat. \"That's cool. So what's the question?\"\n\n\"She's clearly unhappy with her private parts. Whatever's between her legs is uncomfortable for her to even think about. She said she physically couldn't have sex, or have children. I told her it was no big deal, but I don't think she believed me. And I want to know \u2014 surely there are all sorts of things we can do that aren't penetration. But maybe she hasn't thought of all of them.\"\n\nKat nodded and started to smile. \"Well, you're asking the right person, then. So, you think maybe she's intersex? Has some of both sexual organs?\"\n\nJavier blinked, then shook his head slowly.\n\n\"Uh, she doesn't have a dick. Not that I've seen everything, but we've been \u2014 intimate enough that I would have felt anything like that.\"\n\n\"OK,\" said Kat. \"Does she like being touched at all between her legs?\"\n\n\"I think she would, if she weren't too nervous,\" said Javier. \"In the end she was kind of pressing herself against my thigh.\"\n\n\"Ah, the good old hump-a-leg,\" Kat said wistfully. \"I had my first orgasm with another girl that way.\"\n\nJavier smiled. Kat definitely was the right person to talk about this stuff with. \n\n\"So, of course I thought of giving her oral sex, but we never got to that,\" he said. \"And I could use my fingers. But what else is there?\"\n\n\"A whole world,\" said Kat. \"A whole world, my eager student. Let me expound upon the butthole.\"\n\nJavier cracked up, and Kat lost her straight face as well.\n\n\"She has one, right?\"\n\n\"I assume so,\" said Javier. \"I mean, not to be crass, but I did accidentally run across a pile of her crap, and that must have come from somewhere.\"\n\n\"Maybe she teleports it out with her mind,\" said Kat. \"That would be convenient. Anyway, that part is sensitive on everyone. Maybe the right kind of sensitive for her, maybe the wrong kind. It's definitely the right kind for me. You ever discuss anal sex?\"\n\nJavier coughed.\n\n\"Uh, no, Kat, we didn't discuss anal sex. What are first dates with you like anyway?\"\n\n\"C'mon, Javier, you two weren't in a first-date situation. Are you saying you never thought of suggesting it?\"\n\nHe slowly shook his head. He'd never had anal sex, of course, though he'd idly wondered once or twice with Clara. It just hadn't crossed his mind with Esther. There was an order in his head. You didn't talk about kinky things like that until you were doing more ordinary things. Except that ordinary sex with Esther was out of the picture.\n\n\"I don't know if she could do that either,\" he said. \"I mean, she wasn't specific about the no-sex part, but I guess I sort of assumed \u2014\"\n\n\"Now, there's a problem,\" said Kat. \"Suppose the first gay man in history had looked at his love interest and said, huh, I can't do sex the ordinary way. I guess there's nothing to be done. Look, don't assume anything. Seriously, though, unless you've got a monstrously enormous cock, I'm sure you could make that work if she's interested.\"\n\nJavier blushed, and Kat took his shoulder.\n\n\"Sorry, I shouldn't joke about that. There's no winning as a guy, is there? The point I was *actually* going to make was that any size can work in one way or another. Hang on a second.\"\n\nShe got up and rummaged around in a dresser drawer, pulling out some things. When she turned around, he realized she had a dildo in each hand.\n\n\"Kat!\" he spluttered, but she came and sat down.\n\n\"Look, Javier, I use both of these in my pussy. And I've used both in my ass. And the orgasms are good either way, now that I know how to use them.\"\n\nOne of the dildos was truly enormous. The other was quite a bit smaller than Javier's dick. He stared at the huge dildo and thought about it going inside Kat, and to his horror he started getting an erection.\n\nKat didn't seem to notice his discomfort. \n\n\"Even if she can't take intercourse of any sort, there's so much else to do! Fingers, hands, lips, elbows, whatever. It sounds like she's got a bonanza of sensitive places, so maybe penetration isn't the point! And if it's hard for her to get off, that's what toys are meant for. God, go to the sex shop together, or let me take her. Or she can borrow any of mine. Don't look at me that way, Javier. A lot of these can go in the dishwasher.\"\n\n\"OK,\" he said. \"Maybe you can put the dildos aside. I'm getting a little distracted.\"\n\n\"Sorry,\" Kat said. \"I got overexcited, I guess. I'm so used to geeking out about Unix with you, the way I couldn't with Mar\u00eda, and I guess it just spilled over into sex toys.\"\n\n\"Did she not like them? Sorry, I know this is sensitive for you.\"\n\n\"It's all right,\" said Kat. \"I think they made her uncomfortable. Or maybe it was that I liked them so much, particularly the larger ones. She definitely needed a vibrator to get off sometimes, but she wasn't big on penetration.\"\n\n\"I guess that makes sense,\" said Javier. \"It's a little weird to hear you talk about them as though they're really substitute penises. I thought kind of the point of being a lesbian was to get away from that.\"\n\nKat blushed, and turned away from Javier. She didn't say anything for a while.\n\n\"OK, I obviously said something incredibly dumb,\" he said. \"Can you educate me so I don't offend the next lesbian I meet?\"\n\nKat took her dildos and stowed them back in the drawer. She flopped back down next to Javier, looking strangely guilty.\n\n\"You shouldn't assume lesbians don't like penetration,\" Kat said slowly. \"But I also really shouldn't speak for most lesbians. Not least because I'm not a lesbian.\"\n\n\"What?\" Javier blurted.\n\n\"I'm bi, Javier. I like men too. Or, rather, I'm sometimes attracted to men. I wasn't interested in most of the guys in school, and I never had a good relationship with a man, but that doesn't mean I've never handled a dick.\"\n\n\"Oh,\" Javier said. \"Oh, God. I'm such an idiot. All this time \u2014\"\n\n\"That's entirely my doing,\" Kat interrupted. \"I've been pretty careful to let you assume, haven't I? And I thought Mar\u00eda and I were in it for the long haul, so it wouldn't have made a difference. Guys are much easier to be around when they're sure you're off limits, so it's been terribly convenient for me. But it's past time I was honest with you.\"\n\n\"So all this time, when you've been flirting with me --\"\n\n\"No, Javier. Don't go down that road. I'm who I am, and you've seen the way I flirt with everyone. From the start I was thinking about you as a smart, cute guy friend who was easy to be around. Mar\u00eda might have been a tad jealous sometimes but I had a clear conscience. It's not like being bi means I'm required to be dating one of each, after all. People are so stupid sometimes.\"\n\n\"Sorry,\" Javier said, swallowing. He was being an idiot. She was trying to be honest about something that was obviously tricky for her, and here he was jumping to conclusions. \"I thought it was safe, you know. I flirted back, more than I would have with anyone who \u2014 oh, God, all that e-mail. I feel like a pervert.\"\n\n\"What did we agree, Javier? Sex should be fun. Don't feel like a pervert just because the two of us were getting our rocks off. But you're right, maybe it was over the line. Maybe it's too easy to pretend there's nothing really happening because of those screens between us.\"\n\nJavier nodded, and then he grinned. \"Get your rocks off? Does that even make sense for women?\" \n\n\"I declare it does,\" Kat said. She grabbed her crotch and made a lewd gesture, then stroked her imaginary cock. The whole thing was so ridiculous that Javier had to start laughing.\n\n\"There,\" said Kat. \"That's what I mean. Sex is ridiculous and funny and hot.\"\n\n\"I hope you get to meet Esther,\" Javier said. \"I think she could use being around you.\"\n\n\"I consider myself a role model for all women,\" Kat said gravely. \n\n* * *\n\n\"No,\" Abuela said. \"Try again.\"\n\n\"I am,\" grunted Esther. The old woman's cool hand gripped hers. She leaned against Nicola, trying to find comfort in the soft rounding of breasts against her back. \n\nFinally she shook her head.\n\nAbuela sighed and let go.\n\n\"We are at a bottleneck,\" Abuela said. \"Your mind must find its own paths so that we can work together. Esther, we're running out of time. Please make this attempt on your own today. Do not shrink from whatever helps because you are embarrassed. There is nothing to be ashamed of. In my first years it took rather odd circumstances to engage my talents, and perhaps that will be true for you as well. I believe you have enough understanding now to find these paths without endangering us, and I will be on watch in case anything unexpected happens.\"\n\nWhen they left the cabin, Esther sighed.\n\n\"I suppose it's obvious what I have to do. I'm totally not in the mood.\"\n\n\"You want some of Mark's porn stash?\" Nicola asked.\n\nEsther's mouth fell open.\n\n\"Joking,\" said Nicola. \"I'm not sure if Mark knows what porn is. Glad I can still shock you. Anything I can do to help?\"\n\nThe casual question lingered between them. Esther swallowed.\n\n\"Not now,\" Esther said uncomfortably. \"Not without talking to Mark.\"\n\nNicola nodded, her face falling slightly. \"Of course,\" she said. \"You're right, of course. But, you know, if it would help to peek, I'll be in the cabin. I could use a wank anyway. I promise I won't spy on you.\"\n\n* * *\n\nEsther walked around the bath cabin, not quite ready to commit. The air was moist and surprisingly warm, and a few early bulbs poked through the ground. Springtime, all of a sudden. Nicola said the mosquitoes would be terrible in a week or two.\n\nShe leaned against a tree and closed her eyes. The air was full of scents: moist ground, mud, wet pine needles, sap, tar, warm wood, cotton, sweat, Nicola.\n\nShe blinked in surprise, then closed her eyes and inhaled again. Smell had always been the easiest for her, and even her base level of sensitivity had gone up significantly over the last few months. \n\nNicola was sweaty, tired, and frustrated. She wasn't quite as horny as she'd led Esther to think, but her fingers were working under her underwear, slowly warming her up. All for Esther's benefit. And Esther had to admit she liked the smell. The other sensations were filtering in slowly. When Esther swallowed, she tasted another woman's musk. She moaned softly.\n\nSomething pulled at her from a distance: a sound, quieter than the air, but familiar. Mark was coming back.\n\n\"Mark,\" she said softly, knowing he would hear her. Sure enough, he emerged silently from the trees.\n\n\"You heard me from a good distance,\" he said approvingly. \"Well done. Though I was not being particularly quiet.\"\n\nNot quiet? Maybe not by his standards.\n\n\"Mark,\" she said. \"I have something to ask you. Maybe it would be better if Nicola was here, but maybe not.\"\n\nHe looked immediately uncomfortable. No doubt he knew what Nicola was doing at the moment.\n\n\"Abuela says I need to access as much of my sight as I can,\" she said. \"Perhaps you know that only truly happened once, when I was extremely sexually aroused. But that is not such an easy thing for me.\"\n\nMark shifted nervously.\n\n\"Would it be all right if I asked Nicola to help? You can say no.\"\n\nSeveral expressions flitted across Mark's face in succession. He took a deep breath.\n\n\"I am so sorry for what I said that evening. Yes, of course it would be all right, if Nicola agrees. I understand why it is necessary.\"\n\n\"That's not the same as being comfortable with it,\" Esther said.\n\nMark looked uncomfortable. \"It is necessary,\" he finally said. \"I will not be angry, Esther. I wish you success.\"\n\nHe walked briskly towards the cabin, leaving Esther more confused than before. But she had a job to do.\n\nNicola didn't join her until Esther was settled pretty well in the tub.\n\n\"Hey,\" the other woman said, closing the door quickly. \"This still OK?\"\n\n\"Yeah,\" said Esther. \"I was right, I'm not in the mood.\"\n\n\"Me neither,\" Nicola laughed in commiseration, and Esther tried to relax. Truthfully she was having serious second thoughts about this. \n\nNicola quickly stripped naked and piled her clothes on the shelf next to Esther's.\n\n\"Scoot forward,\" she said. \"I'm coming in!\"\n\nEsther wasn't quite sure how this was going to work, but Nicola simply sat behind Esther. It was just like in their sessions with Abuela, except this time they were naked and Nicola was getting her legs around Esther.\n\n\"Lean back on me,\" Nicola said, pulling her gently. \"No, really. All your weight. Pretend I'm your pillow.\"\n\nEsther's leaned back nervously until her head nestled between Nicola's breasts. She had to admit it was pretty comfortable. Nicola started to run her fingers through Esther's damp hair. \n\n\"Hand me the sprayer,\" Nicola said. \"And close your eyes.\"\n\nFor a while it was strange and ticklish. The water touched her chest, her neck, her small breasts. Nicola even played it between her legs, but Esther couldn't seem to relax enough.\n\n\"I think I need some direction here,\" Nicola said softly. She kissed Esther's earlobe, and the strangest little shiver went through Esther's body.\n\n\"Oh,\" Esther said. \"That was good.\"\n\nNicola did it again, and the set the sprayer down to stroke her head and neck. Esther felt as though she were melting against Nicola. She whimpered softly, and Nicola moved her lips lower on the side of her neck.\n\n\"Find the rough areas on my back,\" Esther said. \"My lower back.\"\n\nNicola tried to get her hand in there, but it wasn't working right.\n\n\"Maybe you should turn to face me,\" Nicola said. \"Sit on my lap.\"\n\nLuckily the tub was pretty large. Esther still felt terribly clumsy as she felt her way around, bumping against thigh and arm and breast. Nicola giggled softly.\n\n\"This is never as easy as in our fantasies, is it?\"\n\nEsther laughed as well, and then she finally got the other leg around Nicola. In this position, she was almost face to face with the other woman, and on impulse she leaned closer.\n\nNicola seemed surprised, but she eagerly returned the kiss. It was awkward and uncomfortable and erotic. Nicola wrapped her arms low around Esther's back and pulled her closer, until their chests touched and then their more intimate parts. Esther shuddered when she felt Nicola's wiry bush tickling her groin. Nicola's full breasts flattened against her, the nipples pressing against Esther's body. ",
        "She'd never been so close to anyone. Not even Javier. And she realized that was the problem. Nicola was a beautiful, sexy woman, and a lot more than a means to an end. Esther wanted to make love to her. And she'd never really done that with Javier. Had she?\n\n\"Nicola,\" she said nervously. \"I think I want to have sex with you.\"\n\nNicola shook slightly, and Esther realized she was trying not to laugh.\n\n\"Uh, I guess we're on the same page, then?\" Nicola said. She started to stroke Esther's back, and when Esther gasped softly she kept her fingers there, feeling for the strange sensitive patches. Nervousness and the fire of arousal warred within her. Esther finally grabbed Nicola's hand to stop her.\n\n\"I wanted to do this with Javier,\" she said. \"I was too scared, and now I'm feeling guilty. I wanted him to be my first.\"\n\nNicola sat still. Finally she spoke, a little exasperation in her voice.\n\n\"Your first what, Esther? I got the sense you fooled around with him plenty. Are you thinking of yourself as a virgin? Because that doesn't seem right. Anyway, being a virgin is seriously overrated. You think maybe we could just make each other feel good and leave it at that? If you want, just remember that we're doing this for a reason. An assignment from Abuela. All I need to do is give you a titanic orgasm, and believe me, I take no pleasure in this.\"\n\nEsther started to laugh nervously.\n\n\"OK,\" Nicola said. \"Maybe I'll take a little pleasure in it. But I'm still scared you'll set me on fire with your mind. How about you just dream about Javier and his dick or whatever other parts of him you like best. You go to your happy place, and I'll imagine Mark is literally pounding the fuck out of me, and we'll see how it goes. OK?\"\n\n\"OK,\" Esther agreed. \"OK. Thank you so much, Nicola. I'm lucky you're so patient.\"\n\n\"That's the first time anyone's said that of me. Here, let's see if we can make it the last time too.\"\n\nNicola pulled her closer with a rough strength that alarmed and thrilled Esther. This time it was Nicola who kissed Esther, more roughly than Javier had ever done it. She pinned Esther's arms at her side and began to stroke Esther's back, scraping her fingernails across the sensitive patches. Esther wanted to cry out that it was too much, but all she could do was moan into Nicola's mouth. She tried to move her arms to encircle Nicola, but Nicola squeezed even tighter. \n\nJust when she thought she couldn't take any more, Nicola kissed her gently on the lips and gripped the back of her head, staring into Esther's eyes.\n\n\"More?\" Nicola asked, twisting her fingers in Esther's hair and pulling her head back.\n\n\"More,\" breathed Esther. Nicola smiled and touched her lips to Esther's chest freckles, this time with a maddening tenderness. Esther's body came alive all at once, the nerves in her back and her chest lighting up with darts of pleasure and negotiating their own dance within the rest of her. She'd sometimes wondered if this were a parallel alien nervous system, one that mostly lay dormant until times like this. But whatever it was, of course it was all Esther. Her strange nipples hardened and tingled, and her perfectly ordinary lips and ears and neck quivered with need for Nicola. This powerful, self-assured woman who could ravish her completely. \n\nEsther finally broke free of Nicola's grip, though she could tell Nicola had let her do it. She scratched her fingernails on Nicola's back, and Nicola made happy purring noises. Nicola didn't have those spots on her back, but that wasn't the only thing Esther liked. She slipped a hand lower, her fingers trailing down to cup Nicola's muscled ass, and then squeezing underneath to probe her tightly puckered anus.\n\nNicola jerked and froze for a second.\n\n\"Ah, maybe not there for me, Esther,\" Nicola said nervously. \"Is that something you like?\"\n\n\"Oh,\" Esther said, feeling stupid. \"Sorry. I guess it's kind of perverted \u2014\"\n\n\"What? No, Esther, don't ever apologize for what you what.\"\n\nTo prove her point, Nicola moved one of her hands lower down, letting her finger trail right across Esther's own asshole. Esther gasped and grabbed Nicola tighter. Her body was shaking more than she could ever remember, but she was still wound up too tight. \n\nMaybe she just needed to get to her orgasm. She picked up the discarded shower sprayer and worked it in between the two of them. Nicola understood and made more space, using the opportunity to kiss lower on Nicola's chest. When she took a nipple between her lips, Esther almost squealed. She didn't know why this was so different from being with Javier. Nicola's lips shouldn't feel so much softer, her hands so much more practiced. But she missed his body so badly. His ass was far more muscled than Nicola's. He was so solid, and even his smell was more complicated. Though she was starting to smell Nicola strongly now: the sweat on her brow and her armpits. The subtle smells from around her erect nipples, and the bold mix of fluids beginning to lubricate Nicola's very functional vagina. The sharp tinge of her anus, where Nicola didn't want to be touched, mixing with the smells of Esther's own body. She closed her eyes and imagined Javier holding her in his lap, his erection proud as a flagpole between the two of them. She half-curled her fingers, remembering the feel of his warm flesh, and then she began to play the water of the shower against her own sensitive hole.\n\nEsther was starting to hyperventilate, but she couldn't seem to control it. She smelled Nicola and Javier and even Mark. Her mind stretched easily to find him, alone in the cabin and staring at the ceiling. He was naked and he had an erection, but he was simply lying still. \n\nNicola's teeth brushed across her nipple and Esther sucked in her breath.\n\n\"Again,\" she said. Nicola's lips and teeth were doing something to her she'd never quite felt. Or maybe it was the combination, all of her sensitive areas being touched at once. Her thighs shook as Nicola circled her anus lazily again with her finger.\n\nShe adjusted the water slightly, and all of a sudden something clicked.\n\n\"Oh,\" she muttered. \"Oh my goodness.\"\n\nNicola pressed her finger slightly against her anus, not enough to pop inside, but enough that her sphincter muscles began to throb in time with everything else. It was as though the entire world was thinning out, unfolding itself infinitely to lay itself bare. Terrific waves of pleasure carried her body as though it weighed nothing.\n\nWhen her orgasm finally washed over her, she was ready. The glittering cosmos revealed itself in a shattering of space and time and abstract dimension. The strands of connection were everything, and the bundle that called itself Esther was experiencing pleasure unlike anything it had ever felt. Sensations were being translated and stored, memories that Esther could sort through later, when she didn't have an entire universe to understand.\n\nAbuela was right: it was more than anyone could ever hope to comprehend. But humans did it every day, labeling and cataloging the infinities and groping their way despite the incredible limitations of their intellect and senses. Esther traced the powerful web of connections between herself and the vast, glowing structure she knew was Nicola, and then watched the flickering of possibilities from far beyond. She sensed the great web that was Abuela's map, observing her even now, but with its tendrils questing ever further. And with the comfort of that more familiar metaphor, she let a piece of herself fly free, seeking and probing, until it ran up against a foreign bundle with more awareness than ordinary. \n\nAbuela's map convulsed slightly, and quickly Esther pulled back to herself. Just a tight bundle of infinite connections, so many of them shared with the bundle named Nicola. In her last moments of sight, she pulled gently on some of those strands of connection, too gently to do any harm, and perhaps too subtly to even be noticed.\n\n\"Oh,\" Esther cried again. Nicola gasped slightly, then held Esther tight until Esther's orgasm finally ended.\n\nAfter a minute or so Esther lifted her head off of Nicola's shoulder.\n\n\"It worked,\" she said wonderingly. \"I saw everything. Nicola, it was all so heartbreakingly beautiful. The universe. You. All of it.\"\n\nNicola hugged her and didn't respond for a while. \"Did you do something to me?\" she finally asked with a bit of nervousness.\n\n\"Oh! I'm so sorry,\" Esther said. \"I wasn't thinking.\" She described as best she could what she had done.\n\n\"It's OK,\" Nicola said. \"More than OK. I think you managed to arouse me using just your mind.\"\n\n\"Oh,\" Esther said. \"Well, I considered setting you on fire ...\"\n\nNicola laughed and pointedly took the shower nozzle from Esther's limp hand between them. Then she leaned her chest right against Esther, still laughing slightly. The other woman's breasts jiggled comfortably against her.\n\n\"It sounded like a good orgasm,\" Nicola said wistfully. \"I couldn't sense any of the rest of it, though.\"\n\nEsther felt some motion between them and realized Nicola had started to masturbate. She kissed Nicola, and Nicola moaned happily.\n\n\"Christ, I'm almost there,\" Nicola said. \"You have \u2014 no idea how hot ...\"\n\nEsther stroked Nicola's face and then kissed her on the side of the neck. Encouraged by Nicola's moans, she trailed her lips further down, reaching the freckled area not so different from Esther. Nervously she slipped a hand underneath one of the perfect, heavy breasts. How strange it must be to actually feel that weight all the time. Nicola stroked Esther's back with her free hand, and Esther began to run her tongue along the freckles, kissing and brushing her lips the way Javier would do with her. The way Mark sometimes did for Nicola.\n\nNicola gasped and grabbed at Esther's butt. Then she shook, over and over, making little huffing noises that Esther was very familiar with from all the times she'd heard them in their cabin. Finally Nicola sighed and began to lean back against the tub. Esther leaned forward until she was half-lying on Nicola, and Nicola wrapped her arms around her.\n\n\"That was great,\" Nicola said. \"Really great. I can't believe how much I liked that. I never thought a woman could do that for me.\"\n\n\"Me neither,\" said Esther. Somehow it bothered her a lot less than she would have expected. She already knew someone gay, anyway. Raj was one of the best people she knew. \n\nThe thought of Raj made her faintly nervous. Then she remembered: that other person she'd sensed. It wasn't anyone she knew, and yet she had felt Raj nearby, tangled with him. \n\n\"There's someone watching my friend Raj,\" she said slowly. \"Someone with the changes. I don't think he was friendly, either. I should talk to Abuela.\"\n\n\"And I should go and fuck Mark. Jesus, I can't wait to feel his cock sliding into \u2014 oh, God. Sorry. I shouldn't talk that way. I'm just so horny. I hope your friend is all right.\"\n\nNicola laughed nervously.\n\n\"It's all right,\" said Esther. \"My body is what it is. And what we did today \u2014 I could do that with Javier too. Like I said, it was wonderful. Thank you so much.\"\n\n\"Oh, don't mention it. And I think Mark will be pretty thankful too, once he sees what I have planned for him.\"\n\nThey got out awkwardly and dried off. When Nicola opened the door she gave Esther a wicked glance before dropping her towel and walking away stark naked. Esther sighed and wrapped her towel around herself carefully before heading to Abuela's cabin.\n\nA few minutes later she was following Abuela's meditations all on her own, flying above Abuela's hazy map and desperately trying to match it to the faint glowing connections of her own mental constructs. It was exhausting, but it was a great improvement over any of their previous sessions. But she could already feel her mind closing in its usual frustrating way, and soon she was just Esther, sitting damp and a little chilly in front of Abuela.\n\nA few minutes later, Abuela opened her eyes and smiled.\n\n\"Good,\" she said. \"Very good. Esther, I was able to sense a small bit of how you perceive the world. It is remarkable. Your mind was truly made for this task.\"\n\n\"Abuela,\" she said. \"Did you also sense that man near Raj? Is it someone you know?\"\n\nAbuela nodded. \"Yes, in a way. I had hoped his last visit to California would have discouraged him. For several years now I have frustrated his efforts to do some snooping using his talents. I will endeavor to do so again. Do not worry about your friend, at least not because of this man. He is impatient and easily distracted.\"\n\n\"Does he work for someone? Could he be working with the people who were chasing me?\"\n\n\"Quite possibly,\" Abuela said. \"But he always appears alone, traveling here from somewhere too far east for me to reliably sense. You should not trouble yourself on this man's account. Unfortunately, as you well know, it does not take a person with the changes to wreak havoc on others' lives. But that has always been the case. I cannot protect everyone from everything.\"\n\nBy the time Esther had retrieved her clothes and returned to the cabin, she was exhausted. She wasn't terribly surprised to see Nicola and Mark sprawled naked together, though she was secretly disappointed they weren't still having sex. Nicola must have been very desperate, or else Mark. Or both of them. She tried not to smile too broadly when the two of them looked up at her.\n\nShe'd only managed what she had with Abuela because her mind and body were still so relaxed from what had happened in the bath. The sex she'd had with Nicola.\n\nEsther tried to tell herself it was no big deal. Javier would be the one doing this for her, if it made sense for him to be he here. But for now, she was going to have to repeat what she'd done with Nicola, with some frequency.\n\nShe couldn't pretend she wasn't looking forward to that.\n\n..........................*** Chapter 29 ***...........................\n\nHot air blasted Javier's face from the open window as he pushed the shitty car above sixty-five. No A/C, of course. It was still better than the bus, and a lot faster. More time for visiting Kat this weekend.\n\nMoving this car to San Jose was staking out a point in his future life. From now on, he'd be looking for Esther from there, not his old home. Near Stanford, and San Jose State, and Kat. Not near Mam\u00e1.\n\nHe found a spot on the outskirts of the city, on a street with some cars that looked like they'd been there months without getting ticketed. Not the best neighborhood, but his car was hardly worth stealing. When he found a payphone, he gave Kat a call.\n\nShe was right to the point when she picked him up.\n\n\"Hey Javier. I found the hackers. They're in an industrial area outside of Modesto.\"\n\nFinally. Javier's pulse quickened. \"Do you know exactly where?\"\n\n\"Yeah. The address is for a place that went out of business years ago. I'm sure they hacked into the phone line there.\"\n\nHe was tired of waiting. This was their chance.\n\n\"We should check it out,\" he said.\n\n\"What do you mean, check it out?\" She glanced over at him with a skeptical grin.\n\n\"You know, drive by. Check out the building, maybe stake it out. See if we can figure anything out about them.\"\n\n\"You've been watching too many movies,\" Kat laughed. \"We should let Raj know and see what he thinks.\"\n\nJavier knew what Raj would say. But this was a concrete action they could take. Graduation and senior week were past, and he should be feeling like he was floating on air, heading for college and adult life in the fall. Instead he just felt empty and useless. He hadn't even found a summer job yet.\n\n\"No,\" he said. \"I'm itching to do something useful. I'll go by myself if need be, and I'll be make sure no one sees me. I'll head down in my car, and I can let you and Raj know afterwards if I find anything. Of course, I wouldn't mind company.\"\n\nEventually Kat sighed and started to smile. \"Fine. I guess I'm in the mood to do something stupid, too. You want to make it a date tomorrow night? I've got to get some work done this evening.\"\n\nJavier settled into the comfortable routine they had when he visited. Some programming on her spare computer, some reading, a little TV at the end of the evening, and then onto the couch for bed.\n\nSaturday evening, they drove out to retrieve Javier's car.\n\n\"So this is the famous shitty car,\" Kat said as they got in. \"I guess that makes you Jos\u00e9 now. Suits you.\"\n\n\"Thanks, Kathleen,\" he said, earning a groan.\n\nAn hour and a half later they were slowly pulling through a really sketchy-looking area with some decaying industrial buildings and closed-up auto shops. \n\n\"There,\" Kat said. \"That's the building. I'm sure of it.\"\n\nJavier drove by slowly. It was a small industrial building, clearly abandoned, sandwiched between an abandoned storefront and a shop that looked to be headed that way. He drove to the end of the block and parked.\n\n\"Let's sneak down the alley in back,\" Javier said. \"See if there are any signs of life.\"\n\n\"Like rats and criminals waiting to mug us?\"\n\n\"You're such a pessimist,\" Javier said. \"Anyway, what else is there to do without knocking on the door? We'll be quiet and walk right by. No problem.\"\n\nKat shook her head, but she followed him down the alley. It had to be one of the stupidest things he'd ever done, but he finally felt alive. And they had to get something out of this dumb trip.\n\nWhen they got near the back of the building, Kat gripped his hand. There was a very faint light coming from under a back door.\n\nSilently they crept along, keeping to the far side of the alley. There were a few dumpsters and even a rat, but otherwise the alley was clear and empty. Javier squinted at the line of light under the door, trying to see if there was any motion. And then suddenly he was on the ground, gasping for breath. His head rang, as though he'd struck it.\n\n\"Stop struggling,\" came a soft voice. A woman, to his shock. An iron grip took his wrist, and he winced as the assailant began dragging him across the uneven pavement. When he grabbed at the hand holding him, his arm was twisted painfully.\n\n\"Would you like me to break it? It could be fun for me. Less for you.\"\n\nHe stopped struggling and let the mysterious figure keep pulling him. It was definitely a woman, but she was freakishly strong. \n\nHe heard a whimper and his arm bumped another person, being dragged alongside him.\n\n\"Jos\u00e9?\" she grunted weakly. \n\nHe would have smiled if his head weren't ringing so hard. But then the door opened and he had to close his eyes for a minute as he was dragged into a bright space.\n\nAll of a sudden he was hoisted to his feet and slammed against a wall. He stared down at the person holding him.\n\nShe was much smaller than him. Brown-skinned, with dyed cornrows and an expression of furious glee. She was holding him up easily. No, lifting him. His feet dangled at the wall. It was crazy. She looked pretty fit, but no one that size should be so strong.\n\n\"Janelle! Jesus, stop that. What part of inconspicuous did you not understand?\"\n\nA middle-aged white guy had poked his head in from a neighboring room. Kat was half-propped up on her elbows, rubbing her head.\n\n\"I have selective memory when I'm bored,\" Janelle said, before letting go of him. He crumpled and leaned against the wall.\n\n\"Who the fuck are you?\" he gasped, and Janelle smiled.\n\n\"Since you were the ones skulking around and trespassing, I think we get to ask you that.\"\n\n\"So you own this place, then?\" Kat asked from the floor. Janelle scowled.\n\n\"They're obviously not professionals,\" the brown-haired guy said. \"Who sent you?\"\n\n\"We were just taking a shortcut,\" said Javier. \"I have no idea what you're talking about.\"\n\n\"Uh-huh,\" said Janelle. \"OK, Miss Piggy, why don't you finish getting yourself off the floor and join your smartass friend.\"",
        "\"No need to be rude,\" Javier said as Kat stood up, looking half ready to punch Janelle. The smile on Janelle's face brought her up short, though. The two of them knew they were utterly outmatched by this crazy ninja.\n\n\"Great, kids,\" said Janelle. \"Now strip naked.\"\n\n\"What the fuck?\" Javier said.\n\nIn a blink she had one hand under his chin, pressing and lifting. He would have laughed if he could breathe. She was actually pulling a fucking Darth Vader on him. \n\n\"I could kill you in an instant,\" she said softly. \"I've done it before. I enjoyed it.\"\n\n\"Quit playing games,\" brown-haired guy said. \"Now you two, do what she said. We're not going to touch you. That's not what this is about.\"\n\n\"You ruin all the fun, Geoff,\" Janelle said, dropping him on the floor.\n\nJavier coughed and got back to his feet, trying to catch his breath. Kat kept a tough look on her face, but he could see she was just as terrified as he was.\n\n\"OK,\" Kat said. \"All right. Obviously we're no threat to you. I don't have a gun up my ass if that's what you're wondering.\"\n\nJanelle just smiled and waited. Reluctantly Kat pulled off her sweatshirt and quickly reached for her pants, facing away from Javier.\n\nJavier got the hint and did the same. As fast as possible. He had no idea what they were looking for, and then it clicked. They wanted to know if he was like Esther. Surely it was something like that. \n\nHe heard Kat finish rustling just after he did. In the corner of his eye he could see Janelle leering at him. \n\n\"What a cute pair you are,\" Janelle said. \"Now, Jos\u00e9, turn your pretty ass around for me.\"\n\nJavier had to assume Geoff was telling the truth. He closed his eyes and blushed, hoping Kat wasn't looking. He'd never felt so wretchedly exposed.\n\n\"All right, Piggy, you do the same. No, spread your legs wider.\"\n\n\"Stop calling her that,\" Javier said nervously.\n\n\"Well, you'll have to give me a better name, then,\" said Janelle. \"I know you probably are all spy-like and didn't bring identification with you, but what about in that car you parked down the block?\"\n\n\"Karen,\" said Kat reluctantly.\n\n\"All right, Jos\u00e9 and Karen, go ahead and get dressed,\" said Geoff. Javier reached gratefully for his underwear.\n\n\"So,\" said Janelle. \"They don't have the changes. Should I kill them and dump their bodies out back?\"\n\n\"Shut the fuck up,\" Geoff said tiredly. \"God, what a mess. How did they find us? I guess I'll have to check with Prime. You two sit tight with Janelle and don't do anything stupid.\" \n\n\"I'm guessing he's the hacker and you're the muscle,\" said Kat. Janelle scowled and put on what she probably thought was a poker face. These two weren't any more professional than Kat and Javier were. Kat wasn't even overly impressed with Geoff's hacking skills. \n\nThe changes, Janelle had said. That made sense. What if the changes that had made Esther so brilliant but left her body weak had done something different for Janelle? Were there people with superpowers hiding out everywhere? Were these two part of some organized superhuman resistance?\n\nNo, not superhumans. Esther had hated it when he talked that way. Just people. And of course some of them would be assholes just like any people.\n\n\"Look,\" said Kat. \"I suspect we're on the same side. I found you guys because I was also trying to get into InfoCorp, and I'm a better hacker than Geoff is. Though you obviously have us beat in the muscle department.\"\n\n\"Why don't we wait until we hear from Prime,\" said Geoff, coming back in. \"And maybe you can show me how you're a better hacker by explaining how you found us.\"\n\nKat just smiled until he left again.\n\nThe two of them sat against a wall, not quite touching. Javier's entire body ached from the bruises and scrapes Janelle had given him, and no doubt Kat was feeling the same. When he reached for her hand, she moved away slightly, shaking her head. Maybe this was hostage tactics. Javier felt totally useless. All this was his fault.\n\nTo pass the Janelle began a series of what looked like martial arts moves, jumps and kicks, with a power and grace that went beyond anything he'd seen, even in action movies with special effects. It was all very impressive to watch now that it wasn't aimed at Javier. A few minutes in, though, something went wrong when she landed on one foot.\n\n\"Fuck!\" Janelle yelled, collapsing on the floor. Geoff came running in.\n\n\"It's my knee,\" she grunted, staring at it as though she could fix it by punching it.\n\n\"You shouldn't have overdone it,\" Geoff said. \"You know what happens \u2014\"\n\n\"I was fine!\" she said, pushing Geoff away. He threw his hands up in disgust and went back to the other room.\n\nFor a minute the three of them sat there, Janelle rubbing her knee and grimacing.\n\n\"I play soccer and know first aid,\" Javier said eventually. \"You want me to take a look?\"\n\n\"Don't touch me,\" Janelle said. \"I'll be fine.\"\n\n\"Did you feel a pop when it happened?\" Javier asked. \"Can you put any weight on the knee?\"\n\nJanelle scowled and didn't reply, which Javier took as a yes.\n\n\"I think you tore your ACL,\" he said. \"That's pretty serious. You might need surgery.\"\n\n\"I'll recover,\" Janelle said. \"And don't try anything funny. I could whip you both while hopping on one leg.\"\n\nGeoff came back a few minutes later, looking uncomfortable. \"Prime says your name is really Javier Sanchez. Is that right?\"\n\nJavier was too shocked to bluff his way out or even reply. Geoff nodded.\n\n\"Well, then. I guess we'll be stuck together a while longer. We're going to see Prime.\"\n\n\"What?\" Janelle said. \"All the way back? What about our mission?\"\n\n\"It wasn't going anywhere quickly,\" said Geoff. \"Especially with all the stupid shit we ran into. And now your knee. I hate California and I'm glad to be gone. I'll pull the hard drive and disconnect the phone line, and then we just leave everything. He wants us on a plane immediately.\"\n\nJanelle stood up and tried to look tough. It was obvious she was in pain, but Javier wasn't about to test her.\n\n\"Are you kidnapping us, then?\" Kat asked.\n\n\"If we really are on the same side, it's just an urgent business meeting,\" said Geoff.\n\n\"Yeah, we're kidnapping you,\" agreed Janelle. The thought seemed to cheer her up.\n\n* * *\n\nEsther took a deep breath and opened her eyes. Nicola let her go and the two took their usual chairs.\n\n\"I think I followed you this time,\" Esther said. \"You did something, didn't you? Something important.\"\n\n\"Important?\" Abuela said slowly. \"I'm not sure. But necessary, I think.\"\n\n\"I felt it this time,\" said Esther. \"There were sensitive people in that place. It was so far away. What did you do? Why was it necessary?\"\n\n\"There was a young woman, someone I have only glimpsed before at a much greater distance. She was being reckless and hurting others with her abilities. Once I had my attention on her, it did not take too much time to find a path that blunted her recklessness. For a while.\"\n\nEsther nodded. She hadn't felt any of those details, though at least she'd sensed the strands Abuela was following. Abuela's paths didn't correspond to anything so simple in Esther's own mental construct.\n\nThere was something strange, though. She'd felt pulled towards one of the people in the tangle.\n\n\"Who else was there in the room with the woman?\" Esther asked. \"Can you see?\"\n\nAbuela shook her head. \"I am too tired to find a new path to see that. I was focused only on the young woman. There was a man with her as well, someone with much more caution and less developed abilities.\"\n\n\"Why didn't you bring this woman here, if she was dangerous?\" Nicola asked.\n\n\"I do not think she would come so willingly,\" said Abuela. \"And even if I managed to entice her, I have neither the time nor the concentration to hold her here long enough for her to understand my purpose. She is only one of many concerns.\"\n\n\"Abuela,\" Esther said. \"I still can't see the big picture. You said your task has become much more difficult of late. Can you explain how? Are there more like us than there used to be?\"\n\n\"No more than you would expect,\" said Abuela. \"Technology has made it harder to hide, though. And about fifteen years or so ago, some of us began to disappear. It took me a long time to understand what was happening. They are being taken out of my reach, towards the East coast.\"\n\n\"Towards Washington,\" said Esther. \"Towards the places that Jackson and Daniels wanted me to be.\"\n\n\"Yes,\" said Abuela. \"I'm sure it is no coincidence. But in the last few years there has been a new development, a subtle kind of warfare. Someone is organizing those of our kind, and I suspect teaching them as well. Their activities as a whole are cleverly woven, but individuals are making themselves obvious, precisely when they should be working harder to hide. I have tried to blunt their actions, but I am becoming too weak to do so. If this is a struggle among factions or against the government, all of us are at much greater risk.\"\n\n* * *\n\n\"Where are we going?\" Javier asked. No one answered this time, either.\n\nAs Geoff drove the minivan, Javier wondered again how the others intended to coerce them onto a plane. There would be security everywhere. All they had to do was break away and talk to a guard.\n\nBut as it happened, that wasn't the kind of airport they were going to.\n\nWhen they were hustled towards a business jet, Javier shook his head. It was unreal. They'd been caught by people who thought they were the bad guys in a movie. \n\nHe had to admit he was impressed by the way Janelle hopped up the stairs. She must have a ridiculous pain tolerance. Maybe she healed quickly like Esther, but she was still an idiot not to treat her knee more carefully.\n\nAside from two people in the cockpit, the four of them were the only ones on the plane, which could have taken another half dozen. Janelle let them take the back row, clearly unconcerned about any trouble they might make. When they sat down, Kat leaned against Javier and put her head on his shoulder. The whine of the engines rose as they prepared to take off.\n\n\"I'm so sorry,\" he said softly. \"I was a fool.\"\n\n\"Well, it turns out I'm not such a great secret agent,\" said Kat. \"Ugh, I think I'm going to throw up.\"\n\nJavier quickly found an airsick bag for her, but she just coughed unpleasantly a few times.\n\n\"Did you hit your head when Janelle beat the crap out of us?\"\n\n\"No, it's not that,\" she said. \"Just stress, I guess. I hate feeling like this. Powerless.\"\n\n\"We might both be shitty secret agents,\" Javier said very softly. \"But you're a brilliant hacker. And you're not fat. You're beautiful.\"\n\n\"I didn't look, Javier. I was a good girl for once in my life, when it mattered.\"\n\n\"Same here,\" he said.\n\n\"Jesus!\" yelled Janelle over the engine noise. \"If you're going to bonk each other, I'll cheer for you, but at least wait until we reach cruising altitude.\"\n\nJavier swallowed. Of course Janelle had good hearing. That must have been how she'd known they were outside the building. She was like Esther during her sensory orgasms, except Janelle could do it all the time. \n\nHe reached to hold Kat's hand. Who knew where they were being taken. Away from California, anyway. To the person who somehow knew Javier's name and exactly what he'd been doing. Daniels and the Unit were the only ones he could think of who could have managed it, but Janelle and Geoff obviously weren't working for that bunch.\n\nThe old woman had inexplicably found Esther in a similar way, and that gave Javier a burst of hope. If Esther was with Prime, it would explain a lot. Esther might have guessed it was Javier poking around the warehouse. Perhaps Prime and the old woman were just pseudonyms for the same person. But he'd been so sure Esther was up in the Sierras somewhere.\n\nThey were in the air a couple hours. Javier tried to figure out where they were landing, but it was still dark out. And when they got into a waiting van, Janelle handed them some big paper bags.\n\n\"Over your heads,\" she said.\n\n\"Are you kidding?\" Kat grumped. But of course Janelle wasn't kidding.\n\nWhen the bags were finally removed, they were in some kind of bedroom. It was pretty nice, actually, with its own bathroom. But the windows were permanently shuttered on the outside.\n\n\"Someone will get you in a while,\" said Geoff. \"You might want to sleep.\" He closed and locked the door.\n\nJavier sat on the bed. \"You think they bugged this place?\"\n\n\"Probably,\" said Kat. \"Or else Janelle is just sitting outside the door.\" She sat next to him.\n\n\"So you think we're in the Midwest somewhere?\" he asked, and she nodded. On the way into this house, the air had been warm and humid, with a familiar smell, like plowed dirt. Agricultural.\n\n\"Might as well sleep,\" Javier said. \"If we can.\"\n\nThey looked at each other. It was only a double bed.\n\n\"I like the left side. That OK?\" Kat asked. Javier nodded and got up to turn off the lights.\n\nHe tried to keep to the edge of the bed, but there wasn't really space. All he could think about was Esther, and whether she was somewhere nearby. Kat sighed and put her arm over him.\n\n\"C'mon, Javier. We're all right here. Let's try to be comfortable with each other. I'm glad for your company in all this craziness.\"\n\n\"Me too,\" he said. \"I just keep wondering about whether she's \u2014\"\n\n\"I doubt it,\" said Kat quickly. \"And you know she wouldn't begrudge you.\"\n\nHer breath was warm and steady on his neck, and he slowly relaxed against her. After a while she started to make little snuffling noises, sort of half snores, and she cuddled up even closer. Her breasts pressed against his back, but this was just companionship. If he was getting an erection, it was just an automatic response, something that happened when he was sleepy.\n\n* * *\n\nLight woke him, and Geoff's tired voice.\n\n\"All right, you two. Come with me as soon as you can.\"\n\nJavier quickly let go of Kat's arm, and the two of them disentangled. \n\nThey were in what seemed to be an enormous house, with wide corridors and marble staircases and many closed doors. They saw no one else, but maybe that was to keep them from learning of other members of this organization. That meant they were going to be released. Not that he'd really expected to be executed the way Janelle had joked. \n\nAt the end of a corridor Geoff knocked.\n\n\"Come in,\" said a voice with a faint accent. Geoff didn't accompany them inside.\n\nThe room was a technological zoo, filled with computers, monitors, stacks of paper, and even what looked like a microfilm reader. There was a blond-haired man sitting in front of one computer. Standing next to him was someone very familiar. \n\n\"Raj!\" Javier exclaimed. Kat started, looking back and forth between them.\n\nRaj gave a tired nod. Javier couldn't understand what was going on here. Had the professor secretly been working with this group? That would certainly explain how they knew who Javier was. The two men seemed to know each other.\n\nThe blond man turned around and stood up, and Javier thought there was something familiar about his face. His accent had been German, or Swiss. \n\n\"Prime,\" Javier said slowly. \"You're Lukas, aren't you?\"\n\nLukas smiled and nodded. \"Well done. I am sorry to bring you all here so abruptly, but it seems we must talk.\"\n\nRaj spoke up. \"Javier, I had no idea what was going on. Some of his men \u2014 abducted me from my home. I only just got here. You can imagine my shock.\"\n\nLukas looked at Raj for a while. His blue-green eyes were slightly mismatched, and Javier saw the hint of what looked like a green freckle on his neck just above his collar. Raj couldn't seem to meet Lukas's gaze.\n\n\"I was keeping you safe,\" Lukas said quietly. Raj shook his head and walked to stand with Javier and Kat.\n\n\"It is nice to meet you, Kat,\" he said. \"Even under these circumstances.\" The two of them shook hands.\n\n\"So,\" Lukas said. \"Tell me. Is all of your activity truly related to the girl who won the math exam? Esther?\"\n\nThey looked at each other, but no one said anything.\n\n\"Javier, you attended school with Esther, and you accompanied her when she fled from agents of the Unit. Raj, you met her as a result of your exam work, and I assume met Javier through her. What about you, Kat? What is your role? Geoff said you were an extremely talented hacker.\"\n\nWhen they didn't respond, Lukas nodded. \"I was inattentive, and I should not have taken you the way I did. It is not the way you behave to those you hope will trust you. Perhaps when you hear my story you will understand why I made this mistake, and why we must work together. Please, have a seat.\"\n\nHe gestured vaguely at some folding chairs scattered around the room, and the three of them arranged themselves close together, facing Lukas. A team. Lukas smiled faintly and began his story.\n\n\"The day after I arrived in Chicago all those years ago, I received a visitor in my dorm room. He said they'd heard a lot about me already, and there was a mathematical institute interested in fully funding me for independent research. Of course I was interested. This would have paved the way to any graduate school I chose. I was naive, of course, and arrogant, but nothing in my life had suggested I was somehow in danger. My odd personal traits were something I'd become used to concealing.\"\n\nHe and Raj exchanged a glance before Lukas continued.\n\n\"I got in a car, and something chemical was pressed into my face. The next thing I knew, I was alone, in a basement room somewhere, wearing different clothing. It was effectively a prison, and whoever had taken me now knew about some of my odd physiology. For a few days a man came to ask me questions, pose puzzles, that sort of thing. Sometimes I ignored him, and sometimes I played stupid, and then eventually I lost my temper and showed off a bit. I have always had a quick mind and a prodigious memory, and it seemed they merely wanted confirmation.\"\n\n\"They took me out of the room, into what seemed like a gloomy office building. I was starting to suspect it was a US government facility. And then they brought me to Mr. Franklin.\"\n\nLukas sighed. \"I don't expect you to understand this part, but you must trust me. Franklin is a terrible man. He has an ability that you might call hypnosis, but it is not that. It is far more subtle and dangerous. Over the years I have come to realize he is able to control every bit of sensory information coming to a person. We like to think of our brains as something mystical, apart from bodies, but they are a biological process like every other, and the only way we can understand the world is via our senses. If you change that input methodically, you can eventually change everything about a person, because you are in every meaningful way changing the very world in which they live.\"\n\nRaj stared at Lukas.\n\n\"What you're saying is unbelievable. How could someone do that? And he would have to maintain that environment for you, lest the real world reassert itself.\"\n\n\"Yes,\" said Lukas. \"Though once the patterns of thought change, the brain is sluggish to change back, so perhaps it does not require truly continuous efforts. And I must assure you Franklin does have this ability. Perhaps Javier can explain why this is not as unreasonable as you might think.\"\n\nJavier nodded slowly. \"One of the people who captured us was named Janelle. She has extraordinary abilities. Superhuman strength, and she can obviously hear or sense far beyond an ordinary person. I'm starting to wonder if there are others like her.\"\n\n\"There are,\" Lukas said. \"I am one, though I do not have all of Janelle's strengths. And Franklin is another. The Unit has been collecting people like us for two reasons. First, we are incredibly useful for their actual intelligence work. Second, our sensitivities seem to make it easier for Franklin to control us. And for all intents and purposes, Franklin is the Unit. As I said, he is a terrible man. The first day, he kept me in his office for some extended period. The next thing I remember is waking up a different person. I got up, took a shower, and went to my orientation as an eager new employee in the Unit, fighting dangers to your country, because the people we fought were dangerous to the entire world. Finally I could put my abilities to their proper use.\"",
        "\"What abilities, Lukas?\" Raj said uncomfortably. \"Aside from your mathematical gifts, of course. You know I've never met anyone like you in that respect.\"\n\nRaj was telling them he didn't trust Lukas. \n\n\"Not even this young girl, Esther? I saw the proof she managed on the exam. It was brilliant.\"\n\nRaj shook his head. \"She is brilliant, and for a while I wondered. But she had thought about the problem already. Given time she could be a truly superb mathematician. That is why Anatoly and I were so eager to have her come to Stanford. But I would pick you in a heartbeat, Lukas. It was the memory of losing you that led me to try to protect Esther from people I suspected might have hurt you. You could have accomplished miracles. I'm sure you still could.\"\n\nLukas gave Raj a sad smile.\n\n\"Perhaps, Raj. You always undervalued your own gifts, and I have admired your work from afar. In any case, my life has taken a different path, and mathematics is now merely an occasional hobby. The Unit figured out quickly what skills I had, the ones that gave me such success in mathematics. Raj, I find patterns. I can read immensely faster than anyone I've ever met, and all the facts are stored somewhere in my memory. My subconscious can find connections among these isolated facts and bring them to my attention in an uncanny way. Even I still don't understand how I do it. Like Janelle, I have excellent senses, and at times when I'm outside I can almost imagine I'm taking in the whole world's information directly, via the smallest disturbances in air and soil.\"\n\n\"You're the perfect intelligence analyst,\" Raj said slowly.\n\nLukas nodded. \"I was terrifyingly effective, more so than any others in the Unit, even though they were collecting people like me. I dimly understood all this, but my days were filled with such a cornucopia of information, I had no time or interest in thinking of much beyond it. In truth, for the first few years I don't think Franklin needed much coercion to keep me on task. I was like a machine, running smoothly and happily, spitting out terse reports for the others.\"\n\n\"So what happened?\" Javier asked.\n\n\"I'm not sure,\" said Lukas. \"I like to think it was because I was too good at what I did. There was no way that Franklin could control my input enough when my entire day was spent absorbing facts about the real world. Parts of my subconscious connected larger truths about the way I was being used, and they triggered something in my older memories. Or perhaps it was just Franklin being careless. In any case, one morning I woke up and I realized I already knew how to escape, and that I had already decided to do it. A crossed alarm code here, a stolen uniform there, the timing precise throughout, and suddenly I was all alone in the outside world again. I would have taken them all with me if I could have.\"\n\n\"That's what you're doing, isn't it?\" Kat asked. \"Trying to get everyone out of there. Attacking the Unit's infrastructure.\"\n\n\"They must be stopped,\" Lukas said simply. \"I will do everything necessary to do so. For the last four years I have been searching for any like us in the hopes they will join me. I've been accumulating resources and hampering the Unit's operations. For someone with my talents, money has not been difficult to acquire. But Franklin is a deadly adversary. He understood immediately how dangerous I might be, and over time he has become more desperate. I have nothing like his coercive power and I would never use it if I did. He has used his influence, even over those without special sensitivity, and he has expanded the Unit's resources massively. Most of their efforts are now aimed at me and any of those I might recruit. I am not sure I can win this conflict, and I need every advantage I can get. Therefore, I must ask you to tell me the truth. Where has Esther disappeared to?\"\n\nRaj, Kat, and Javier looked at each other nervously. Raj finally broke the silence.\n\n\"Do you know anything about an older woman? Someone who might have been looking for you years ago, around the time you disappeared? She contacted me when I was trying to find you, and said she also wanted to keep you safe. I believed her. I thought perhaps she was family.\"\n\nA curious expression came on Lukas's face.\n\n\"Yes,\" he said slowly. \"Yes. My memories of that time are hazy now. I thought perhaps I imagined her. She wanted me to come west. Of course. She is the one.\"\n\n\"The one?\" Javier asked.\n\n\"As I have expanded my operations, something strange has happened,\" Lukas said. \"The further west our agents go, the less success they meet in their tasks. The pattern has become obvious in the last year. There is someone subtly opposing my actions, someone whose influence is strongest in California. At first, I wondered if there was another branch of the Unit there, with someone as clever as I was. But the Unit has also had difficulties. Someone is intentionally keeping the conflict away, and I suspect it is this woman. She would have the power, if she reached me the way I seem to remember. Though I do not understand how she could have done that.\"\n\n\"She implied she could keep Esther safe,\" said Javier. \"Esther disappeared and left a note saying she was with this woman. But we don't know where she is.\"\n\n\"I suspect I could find her if I had the resources to devote to it,\" Lukas said. \"If she is protecting those like us, we are allies of a sort. But she may not be able to remain neutral. Raj, for the sake of what we once shared, I will believe you when you say she seemed trustworthy, and I will not ask what you may not have shared about her location. But if you can contact her, tell her about Franklin, if she does not already know. Try to convince her to join me against him. Because I will not allow myself to be hampered indefinitely.\"\n\nThe three of them were silent at the implied threat. Lukas sighed.\n\n\"You see what I have become, Raj. Perhaps you understand better why I didn't contact you.\"\n\nRaj nodded. \"Lukas, tell me this. If you defeat Franklin, and I think we both know what that might require, what will happen? What will you do after that?\"\n\nLukas smiled. \"Yes. Am I going to put myself in that man's place? The correct question, and the answer is: never. What I want is for those like me to be able to live their lives in peace. All of my efforts will go towards that, and I would be delighted if I could retire and pick up my hobby again. Perhaps that is too much to expect, but Franklin is an aberration. He may be unique in the world. At the least, there are none anywhere behaving so blatantly as he is. If he is removed, with time and watchfulness I believe the Unit will return to what it once was: a morally gray group of people who believe they are doing a necessary job. Not so different from any of the other intelligence agencies. Or, I hope, me.\"\n\n\"All right,\" said Raj. \"A fair answer.\"\n\nLukas smiled. \"Thank you, Raj. You know, I've missed you tremendously. You have always been so clear-minded. Would you be willing to spend a little time here? Just to talk mathematics, not politics. Like the good times. There are so many things I wish I'd told you back then.\"\n\nRaj nodded. \"They were good times, Lukas. I'm relieved that you're alive, and I understand why you didn't contact me. I've taken to heart everything you said, and I believe you and your motivations. But I think I'd best be getting back to California. With my friends.\"\n\n* * *\n\n\"I'm surprised he trusted us with all that he did,\" said Kat. \"Even that number to contact him.\"\n\nThe three of them were the only passengers on the jet this time. They huddled together near the back. Javier hardly believed any of it had really happened.\n\n\"I said I'd tell you everything anyway,\" said Raj. \"And that you were as good as I was at keeping secrets. He's obviously dying to trust somebody. Poor Lukas. I can't imagine the emotional damage he suffered while being kept prisoner. He never found it easy to be close to anyone, and now he must feel terribly alone.\"\n\n\"Do you believe him?\" Kat asked. \"In this vast conspiracy? Hypnosis, whatever it is?\"\n\n\"I believe he believes it,\" said Raj. \"They did something to him for sure. The old Lukas would never have worked in a place like that. Whether it was a person or drugs or old-fashioned brainwashing, it hardly makes a difference to me. Something terrible happened. And I believe his description of his own abilities. He has a phenomenal mind.\"\n\n\"You didn't tell him about me, did you,\" said Javier. \"He figured out it was me in Modesto within minutes of Geoff giving him a summary. And he knew all about how we were connected. Except Kat. I suppose he's not infallible. Anyway, I believe him about Franklin.\"\n\n\"And you didn't see what Janelle did,\" said Kat. \"I've never seen anything like it.\" \n\nRaj nodded. \"Lukas has dangerous people working for him, and he utterly believes in his cause. A frightful combination, and yet it is hard to disagree with his motivations.\"\n\n\"He is what we guessed, then,\" said Javier. \"An ally of sorts.\"\n\n\"Better to have him on our side than not,\" agreed Kat.\n\n\"I suppose,\" said Raj. \"But there are always more sides than a first glance suggests.\"\n\n..........................*** Chapter 30 ***...........................\n\nIt was past dinnertime when the taciturn driver stopped at Kat's apartment. Of course Lukas had worked out where she lived. It was terrifying to think how much information was packed into his head.\n\n\"Goodbye, Raj. We'll talk as usual, then?\" \n\nRaj nodded and waved tiredly as the car drove off. Kat and Javier stumbled up her apartment stairs to raid the fridge.\n\n\"I can't believe it's been just a day,\" Kat said as they ate. \"I feel like shit.\"\n\n\"Let's blame Janelle for much of that.\"\n\n\"Yeah,\" said Kat. \"What a fucking bully. Christ, she was terrifying, though. Do you believe her that she'd actually killed people?\"\n\n\"I don't know,\" said Javier. \"I hope not. God, I was sure she was going to kick me in the balls or something when I was naked.\"\n\nKat sighed. \"That kind of physical vulnerability you felt? You get to live with that all the fucking time as a woman. It grinds you down.\"\n\n\"I can imagine,\" Javier said. \"I'm so sorry, Kat. All of it was entirely my fault.\"\n\n\"And it got us more information than we ever could have hoped. Don't apologize, Javier. We came out all right. I just need a shower, and then some sleep.\"\n\nJavier followed her lead. When he turned out the light and headed for the couch, Kat spoke up from the bed.\n\n\"You could join me here if you like,\" she said. \"Like last night. I was so glad to have your company.\"\n\nJavier swallowed. But she was right. It had been such a comfort to hold onto her for the night. Carefully he slipped into bed, lying on his back. Her body heat was already warming the covers. Kat moved closer, until her butt bumped his hip. She was curled up facing away from him, and it was pretty obvious what she wanted. He turned and spooned loosely against her, one arm resting on her shoulder.\n\n\"Thanks, Javier,\" she said. \"I hope this isn't too strange.\"\n\n\"Who cares?\" he said. \"You're warm and it feels nice. I'll sleep a lot better this way. Tomorrow can't come soon enough.\"\n\nShe found his hand and squeezed it. \"For sure. Good night, Javier.\"\n\n* * *\n\nThere was a soft sound, and Javier opened his eyes slowly from an extremely erotic dream. His erection was pressing against something comfortable: Kat's ass. \n\nShe was shifting slightly in her sleep, and it was pressing her even harder against him. He was about to move when he heard the noise again. A tiny sigh. She was moving very gently, and he suddenly realized she wasn't asleep at all. \n\nSomething must have changed in his breathing, because she froze. \n\nHe moved his arm, tracing hers down toward her crotch. She quickly adjusted herself.\n\n\"No, keep going,\" he whispered.\n\nWith a low shudder, Kat moved her hand back. Javier stroked the muscles on her lower arm, and then he reached further down, sliding atop her wrist under her pajama bottoms. She moaned softly when his hand closed over hers, his fingers mingling with her juices.\n\nHe let her set the pace, stroking her fingers lightly and helping her rock against his dick. He snuggled against her, his nose against her shoulder, and half dozed as she worked herself more and more urgently, her fingers flicking quickly on either side of her clit. Finally she gasped and shook, and he held her tight through her orgasm.\n\nWhen she fell still, Kat twined her fingers through his and pressed her butt against his erection. But he was happy just as they were. He fell asleep that way, holding her mound with her, and dreaming of Esther.\n\n* * *\n\nJavier sat up and yawned, swinging his feet over the side of the bed. Kat was in her pajamas, stumbling blearily around the kitchen to get the coffee going. Something tickled his memory and he reflexively sniffed his fingers.\n\nIt was Kat. They'd really done that last night. \n\n\"Hey sleepyhead,\" Kat said. She looked pretty damned happy. And she was doing a good job of ignoring the erection he knew was showing in his shorts. He stumbled off to the bathroom to preserve his modesty and eventually managed to use the toilet.\n\nThey sat at the little table and ate breakfast, not saying much. Kat kept looking at him, but he was too chicken to bring it up.\n\n\"You think we should forget about what happened last night? That'd be OK,\" said Kat easily.\n\nJavier swallowed.\n\n\"No, I'd rather not,\" he said. \"Because I really liked it.\"\n\n\"Oh, thank God. Me too,\" said Kat. \"So, OK, it happened. I can't tell you how much I needed it. The whole time, I knew I shouldn't be doing it, and then when you woke up, I nearly died.\"\n\n\"Glad you didn't,\" said Javier. They shared a grin.\n\n\"All right,\" Kat said. \"I have to hit the bathroom and take another shower. But you know, the door's open if you like. It's a big tub. No obligations either way.\"\n\nSure enough, Kat left the bathroom door open. With a last smile she turned away, undoing her buttons as she disappeared from sight.\n\nWhen the shower started Javier sighed. He wasn't sure why he was hesitating. Probably it was Esther, but Kat understood about that better than anyone. He liked her, and when he thought about finally seeing her body, on their terms --\n\nIn the end he wasn't sure what decided it. But when Kat emerged from the bathroom, he was calm and happy. She smiled with only a hint of regret.\n\n\"So,\" she said. \"Let's see if Raj left us any messages.\"\n\n Javier and Kat,\n\nI didn't talk about Esther on the plane, and probably you noticed how I directed Lukas's attention away from her. He thinks he's playing a game of chess, with everyone else as his pieces. I have no idea whether Esther has skills like Janelle or Lukas, but Lukas clearly guesses she might. I would much prefer it if he doesn't begin thinking of her as another piece.\n\nI'm not sure what to make of his comments about the old woman. We agreed there was something unusual about the way she found Esther, and it seems consistent with Lukas's memories of her contact with him. I'm frankly inclined to trust the old woman over Lukas right now. With your permission, I'll send a letter to her P.O. box with everything we've discovered. I know Javier didn't want to worry Esther unnecessarily, but I think she's in danger from multiple sides now. I'll use our old encryption so that only Esther will be able to read the note, and she can decide what to tell the old woman.\n\nI'm glad we learned what we did. I'm terribly upset that you two put yourselves in danger, but you're smart enough to have learned some caution from it. \n\nBest,\n\nRaj \n\n\"I hope she really is with the old woman,\" said Javier. \"I hope she's still safe. I'd do anything to be sure of that.\"\n\nThey sent Raj a reply, and then Kat took Javier to the station for the long bus ride home. He'd deal with his abandoned shitty car the next time up.\n\n\"Tell me I didn't fuck things up between us, Javier,\" said Kat.\n\n\"No, I think we're good. But, just out of curiosity, do you think the door is still open? For another time, maybe?\"\n\nKat smiled and kissed him on the cheek.\n\n\"Maybe,\" she said. \"Better act quick, though, before I seduce some hot sorority girls.\"\n\n* * *\n\nEsther lay on the floor, her mind open, the gleaming threads swirling in the air surrounding her. It was the first time she'd gotten this far on her own. She could almost feel Javier lying beside her, his hands stroking her chest, marveling at the twisting structures above them both. \n\nShe could faintly sense the rug under her back. The chair a few feet away, with Abuela reclining in her own meditation. And then her point of view shifted, and she grasped it: the great bundle of connections that made up Abuela. A twist here, a breath, and she could perceive the unthinkably infinite connections between the two of them, most of them winking in and out of existence in an instant. But that still left an immense number of connections that could be bound together, joining her perceptions to Abuela's, until a new layer emerged: Abuela's own map.\n\nFor a while she simply held the connection, satisfied that she'd finally done so much. But she was having trouble understanding what Abuela was doing in her map. Perhaps Esther's perceptions were still too different from Abuela's. Finally her concentration wavered and everything disappeared except the rug, the pleasant wood smell.\n\nShe opened her eyes. Abuela seemed still within her meditation, but she was frowning, and her eyelids fluttered as though she dreamed. Esther had never seen her quite like this.\n\nAfter a few minutes, Abuela mumbled something, and then shook her head slightly. But she didn't come back.\n\n\"Abuela,\" Esther said softly. There was no response.\n\nFor an instant she felt oddly queasy, and her vision flickered. Then Abuela frowned again.\n\n\"No, no,\" Abuela mumbled.\n\nThere was something wrong. Esther felt what had happened: Abuela had just used her powers, but without any focus. She jumped up and touched Abuela's shoulder.\n\n\"Come back, Abuela. You need to rest.\"\n\nAbuela still didn't respond. Esther shook the old woman, but without effect. She was starting to panic.\n\nNicola was gone to town for a few more hours, and Mark was out hunting. Esther had to figure this out herself.\n\nCarefully she lay down again and began her meditation. She couldn't possibly concentrate as well as she had earlier. But she felt her senses expand, and even if she was groping in the dark, she could remember enough of what she'd seen earlier. Abuela's complicated bundle of connections should be *there*, and if she pulled as hard as she could \u2014\n\nAbuela gasped softly, muttering something. Esther pulled again, and this time Abuela spoke clearly.\n\n\"That's enough, Esther. You have my attention.\"\n\nEsther opened her eyes. Abuela looked confused and irritable.\n\n\"You weren't responding,\" Esther said guiltily. \"I was desperate.\"\n\nAbuela nodded slowly. \"Tell me what transpired, and then perhaps you could get me some food. I feel terribly weak.\"\n\nWhen Esther had finished, Abuela sighed heavily.\n\n\"My body is failing, Esther. These episodes have become much more frequent, and each time I recover less well. I fear I may not be able to use my abilities much longer, at least not the way I have been accustomed to.\"\n\nEsther nodded and got up to get her some food.\n\n\"Well done, Esther,\" Abuela said. \"Given how I shroud myself, I had suspected it might be impossible for another to seek and pull on me the way you just managed. And it would have been worse for me if you had not pulled me out.\"\n\n..........................*** Chapter 31 ***...........................\n\nNicola and Esther looked up in surprise when Abuela entered the dining cabin. She moved slowly to the table and set down a few pieces of paper. Esther's pulse raced.",
        "\"Ah,\" said Abuela. \"I see who this was meant for. Is it a code of some sort?\"\n\n\"Yes,\" said Esther, quickly grabbing for the paper. \"Uh, may I?\"\n\nAbuela smiled as Esther began to translate. After a few minutes, Nicola's voice broke in.\n\n\"So what does it say? Who is it from?\"\n\nAnnoyed, Esther focused her eyes on Nicola. \n\n\"This code requires a lot of computation. It will probably take me upwards of three hours to translate all of it without a calculator. But it is from my friend Raj, the mathematician. He is telling us some important things that he and Javier and another person have discovered. It involves this power struggle that Abuela is worried about. If you're willing to wait --\"\n\n\"Of course,\" Abuela said. \"Nicola, perhaps the two of us could spend some time together. I have sorely neglected your lessons, and I am sorry.\"\n\nNicola opened her mouth in surprise, then nodded vigorously, and the two of them left together.\n\nBy the time she'd finished, Mark was back and finishing preparing dinner. Abuela and Nicola had returned quietly at some point.\n\n\"All right,\" said Esther. \"I'm going to read you the full text of the letter. I think it's important to all of us.\"\n\nShe took a deep breath and began. When she'd finally finished, they sat in heavy silence.\n\n\"Lukas,\" Abuela said. \"I had my suspicions it might be him, but he has learned to shield himself well from my probes. Perhaps this ability aided his escape from Franklin. He may be like you were, Esther, unaware he is even doing it.\"\n\n\"We've got to help him,\" Nicola blurted. \"Franklin is a monster, just as Lukas said.\"\n\n\"Yes,\" Abuela said. \"I agree with Lukas that Franklin is an abomination. I had not been willing to believe a single man could utterly control the behavior of so many at once, but if one of sufficient talent put his mind to it, and cared for nothing but power, I suppose it would be possible. Yet I refuse to ally myself directly with Lukas. His agents have killed, Nicola. Some of them have even used their powers to do it. They would have hurt many more already if I had not been blunting the efforts of both sides. Whatever Lukas's intentions, he has started a war, one that could bring ruin on us all.\"\n\n\"What do we do, Abuela?\" Esther said.\n\n\"I must think,\" she replied. \"I have so little time left. My abilities to calm this conflict are nearing an end, and it is vital Esther learns as much as she can. Good night, and tomorrow we will all discuss these matters.\"\n\n* * *\n\nEsther opened her eyes. It was a black, starless night. The trees bent themselves down oppressively, as if aware of all her errors. Every action left its echoes through the world.\n\nShe steadied her breath, distancing herself from the images. The outlines of her cabin formed, and with them the comforting sounds of Mark and Nicola, deep in sleep. The unsettling images were part of a nightmare Abuela was having.\n\nCarefully she extended her senses. Abuela was thrashing in her cabin, and the shroud that always surrounded her was in tatters. Esther sat up quickly, intending to see to the old woman.\n\nSuddenly there was a tight burst of such pure focus and power that she reflexively pulled away. When she opened her mind again, the world was silent. Abuela lay still, but her shroud was gone. Terror filled Esther.\n\n\"Wake up! Mark, Nicola, something's happened to Abuela,\" she said.\n\nMark woke, vaulted down and exited the cabin before Esther could even swing her legs out of bed. When she and Nicola arrived at Abuela's cabin, Mark was kneeling next to Abuela's bed and feeling her forehead.\n\n\"She will not wake,\" he said urgently. \"Esther, do you know what happened?\"\n\nEsther shook her head. \"She was having a nightmare, and then she put immense power into a single action. I think she called someone to her, from a huge distance.\"\n\nThey stared at each other, trying to understand the implications.\n\n\"Let me see if I can reach her in my meditation,\" Esther said.\n\nWithout speaking, Nicola moved to kneel behind Esther, holding her tightly and stroking her in their familiar way. \n\nDespite her terror, Esther was able to faintly glimpse the glowing strands entwining everything in the room. Abuela was there, but she was subtly different from every other time. Slowly Esther understood, and she opened her eyes.\n\n\"Abuela is not using her abilities at all,\" she said. \"She is not masking herself, nor is she listening, not even at the level she maintains during sleep. Whatever she did may have utterly exhausted her.\"\n\n\"Who could she have called?\" Nicola asked. \"Lukas? Could she have been desperate enough to try to bring him here to, I don't know, negotiate?\"\n\nEsther shook her head. \"It was somewhere to the east. But that doesn't tell us much, does it. And this was more complicated than a simple drawing of attention. I don't believe it was meant to harm, but I have no idea what she might have done.\"\n\n\"So she probably didn't try to assassinate Franklin,\" Nicola said.\n\n\"Don't even joke about that,\" Mark spoke up. \"She would detest the idea.\"\n\nNicola sighed and nodded. \n\n\"Jacob?\" \n\nAbuela muttered the word softly, and they all moved closer.\n\n\"He's not here,\" Mark said. \"Do you want us to get him? Are you all right?\"\n\n\"Want Jacob,\" Abuela muttered. She opened her eyes and looked at them in confusion. She tried to sit up, but something was wrong with her muscles. And Esther realized something was wrong with her face as well.\n\n\"She's had a stroke,\" Nicola said, realizing at the same time. \"What do you do for a stroke? Shit, you go to the hospital.\"\n\n\"Blood thinners,\" Esther said. \"Aspirin. And we should get her food and water, if she overused her abilities.\"\n\nThey managed to get Abuela to eat and drink a bit. After a few minutes she seemed a little better, but she kept asking for Jacob.\n\n\"Do you think she called for him?\" Nicola asked. \"He's to the east, near Reno.\"\n\n\"Maybe,\" said Esther. \"But if not, we should get him here. Do you know how to contact him?\"\n\n\"I'd have to go into town for a phone. I don't like this. I don't want to leave you.\"\n\n\"We can take care of her, Nicola,\" said Mark. \"I agree with Esther. She wants Jacob, and you know he'd want to see her now. I don't believe she is in any more immediate danger.\"\n\nNicola nodded and moved to the door. Suddenly she stopped.\n\n\"Abuela still isn't using her abilities at all?\" \n\nEsther nodded.\n\n\"Then we've lost our protection,\" Nicola said. \"Everything we've taken for granted. Esther, how much can you do?\"\n\n\"Not much,\" said Esther unhappily. \"And I would barely trust myself for what little I can do. I will listen, though. Keep watch as well as I can. But I don't think I can maintain that very consistently. Certainly not while I'm asleep.\"\n\n\"OK,\" Nicola said, breathing deeply. \"I can do this. God, we need to get her back. See you soon.\"\n\n* * *\n\nShortly after dawn, Esther heard a small car working its way up the road. Mark had already woken from his half-sleep by Abuela's side. Esther was realizing that both he and Nicola could still listen regularly at a greater distance than she could, unless she entered another exhausting meditation.\n\nJacob was a thin, medium-height man in his fifties, with a clerical collar under his jacket.\n\n\"Hello again, Mark, Nicola,\" he said. \"And you must be Esther. I am sorry not to have met you sooner.\"\n\nAfter a warm, firm handshake, he glanced up at Abuela's cabin.\n\n\"She is doing better,\" said Mark. \"Relatively speaking.\"\n\n\"Did she tell you of her worries about her health?\" Esther asked.\n\nHe shook his head and frowned. \"She has always been so good at secrets. Thank you for calling me here.\"\n\nWhen he entered the cabin, Abuela lifted her head.\n\n\"Jacob,\" she said blearily. Her speech still wasn't working exactly right. \"Good to see you, my friend.\"\n\nHe rushed to her side and stroked her face, an unexpectedly intimate gesture.\n\n\"Friends,\" he said, \"Would you give us a while alone? I will call if she needs any help.\"\n\nEsther was last through the door, and she heard Jacob begin to weep.\n\n\"Marisol,\" he said softly. \"I'm here.\"\n\n* * *\n\nSeveral hours later, Jacob found them eating lunch. The three of them looked up blearily, and Esther motioned to a chair.\n\nHe rubbed his eyes and looked at Esther. \"Abuela is beside herself that she hasn't given you enough instruction. She couldn't quite admit it, but I believe the stroke has permanently damaged her abilities. She may not be able to use them ever again. Abuela grieves for that loss, but also for what she was unable to accomplish. I hope we can make what time she has left as peaceful as possible.\"\n\n\"Jacob,\" Nicola asked. \"Did she say who it was she reached out to last night? I suppose it wasn't you, and Esther said it was an immensely powerful effort. Possibly it even caused the stroke.\"\n\nJacob shook his head. \"She has no memory of it. I suppose we will have to trust in her judgment. In that she has always been the best of us.\"\n\nMark left with some food for Abuela. When he returned, his eyes were reddened.\n\n\"She wants to talk to you, Esther,\" he said. \"Don't let her exhaust herself more. Jacob's right. She deserves some rest.\"\n\nEsther found Abuela sitting half up on her bed, finishing her lunch.\n\n\"Don't be shy,\" she said, patting the bed beside her. Esther sat down, feeling awkward.\n\n\"I can barely even see you, Esther. I am blind and deaf, as though I have been swaddled tight in cotton. My mind had so thoroughly adapted to my abilities that the damage I sustained affects all of it together. And this is not an injury my body has the resources to repair. It is your time now, Esther. I know you are unprepared, and I know the prospect is terrifying to you, and I'm sorry.\"\n\n\"Abuela, I cannot stop this great conflict between Lukas and Franklin. I can't even feel the outlines of what's happening. How can I keep people like us safe? I need so much more practice.\"\n\n\"It took me decades to develop my abilities,\" said Abuela. \"In the beginning, I only kept myself safe, and that poorly. It is vital that you begin likewise, in whatever manner you feel best. Raj did the right thing by implying to Lukas that you were not particularly important. I understand you want to do everything I have done and more, but all will be lost if you are taken, or coerced somehow. Though I believe you will be quite naturally resistant to any such efforts.\"\n\nEsther nodded and Abuela continued.\n\n\"I have hidden and misdirected others' gaze away from this place for long enough that it will likely be safe for a time, even if others are searching for it. Now, Jacob has full access to my financial assets, and he can help you manage them. But he understands that I am leaving everything to you. You can trust Jacob as much as anyone. I will give you a list of a few others I trust, those who stayed with me in the past and have gone their own ways.\"\n\nAbuela suddenly coughed, resting her head in her pillow. \"I am so weak, Esther. Please, if you could ask Jacob to return \u2014\"\n\n* * *\n\nMark found Esther on her way to the cabin. He hesitated before speaking.\n\n\"I eavesdropped on Abuela's cabin,\" he said. \"That used to be impossible, but now \u2014\"\n\n\"It's all right,\" Esther said. \"I don't mean to keep secrets from you.\"\n\n\"I know this will be your place,\" Mark said uncomfortably. \"But I could still do useful things. Hunt, chop wood. Make you dinner.\"\n\nEsther stared at Mark. Sometimes she forgot how differently his mind worked.\n\n\"I would never send you away,\" she said. \"If I stay here, you are welcome. And if I have to leave, you are still welcome. You and Nicola both. This is your home, much more than it is mine.\"\n\nMark breathed deeply and nodded. \"Thank you. I am going into the woods until evening. Please call to me if you need me. I know you are capable of that. Abuela did it sometimes, though I think it was more to keep me from forgetting and staying out too long.\"\n\nAbruptly he turned and slipped away.\n\nNicola was inside the cabin, seeming at loose ends.\n\n\"My grandmother died when I was ten,\" she said. \"I was never close to her. I've never done this before. I wanted to be with Mark, but he rejected me.\"\n\n\"He didn't reject you,\" Esther said. \"He has to process this his own way. He was terrified that I would throw him out of here when Abuela is gone. I told him that of course this was his home, and yours, as long as you want it to be.\"\n\nNicola nodded. \"Where else would I go, anyway? I don't know when this started being home. God, I'm scared. You want to fool around? Maybe go out in the tub together again?\"\n\nEsther swallowed uncomfortably. \n\n\"Nicola \u2014 we're going to have to do even more of that as long as it's the best way to work on my abilities. But I that means I'm using you. It's not that I don't like it, but \u2014\"\n\n\"I think I understand,\" said Nicola. \"For what it's worth, I'm happy to help. I like you, Esther.\"\n\n\"Weirdly enough, I think I like you too,\" said Esther. Nicola burst out laughing.\n\nThe next few days settled into an unexpected normalcy. Intellectually, they all knew how precarious their position was without Abuela's protection. But Abuela's condition didn't seem to be worsening. In fact, she seemed a little stronger each day, as though her body finally had the resources to do some repairs now that she wasn't exhausting herself day and night with her abilities. Esther spent much of her days meditating, frequently with Nicola's particular assistance beforehand. Then there were the long, frustrating discussions in which Abuela attempted to interpret what Esther described. Esther's progress was slow, but it was progress.\n\nJacob stayed some nights, sleeping in Abuela's cabin. It was clear the two were intimate physically as well as emotionally, and Esther wondered how that had developed. But she certainly didn't find any reason to disapprove. She liked Jacob, and he seemed a good match for her, even if she was over three times his age.\n\nBut Jacob still had his duties to his own congregation, a long drive away over the mountains. And thus by pure chance he was away on the night everything changed.\n\n..........................*** Chapter 32 ***...........................\n\nIt felt as though Esther had just fallen asleep when Mark made a strange noise. Everything else seemed to happen in an instant. The crashing of glass, the splintering sounds, the heavy thump as Mark hit the floor. She sat bolt upright as Mark staggered outside.\n\n\"Gun,\" he muttered weakly.\n\nNicola made a horrible anguished sound as she struggled out of bed. \"They shot Mark. Someone shot Mark. Oh, fuck, go protect Abuela. I'll help Mark. Esther, move! Open your senses and be silent!\"\n\nRemembering the glass, Esther found her shoes and slipped them on, and then she ran after Nicola. It was pitch black, but someone had seen well enough to shoot Mark through the window. Someone with skills like them, or else fancy night vision gear. She stretched and listened, but she was too terrified to hear much above her own footsteps. There was no one close, though. The distance to Abuela's cabin seemed immense, but somehow she covered it, opening and closing the door as quickly and quietly as possible.\n\n\"Hmm?\" Abuela mumbled. \"Who is it?\"\n\n\"Ssh,\" whispered Esther. \"Someone has come with a gun. They shot Mark through the window. He and Nicola are going after them.\"\n\n\"Oh no,\" Abuela said. \"Oh no. How could they find us so fast? Oh, I'm useless. Esther, you must find a safe place to hide. Not in here with me. Out in the woods, perhaps.\"\n\n\"I will keep you safe, Abuela,\" she said with a confidence she didn't have. \"I'm going to lie down and meditate now.\"\n\nShe thought of Nicola, of Javier. She touched herself shamelessly, but she was wound up too tight for any of that to help. Even so she felt her senses expanding bit by bit, drawing in the quiet sounds of the forest, the smells of loam and needle and bark and blood.\n\nMark was bleeding badly. She could follow the trail in her mind, from the cabin, continuing down the hill parallel to the road. Nicola would have followed easily enough. \n\nThe trail faded in her mind, and she struggled to see further. She heard two loud popping noises, then a few more. Gunfire. Mark was fast and terribly strong, but he wasn't as fast as a bullet. And he was already injured. Esther felt sick.\n\nSomething pulled at her senses, and then a person came into hearing. It was no one she knew, and he was moving extremely fast. Terrified, she threw the blanket over Abuela.\n\n\"Stay still,\" she said. \"I'll protect you.\"\n\nThe door burst open and a large man came in. He was holding a deadly-looking gun, like the type the military had, with a little targeting scope. His other arm hung limp, and with her enhanced senses she could see he was bleeding from the nose and the side of his head.\n\n\"You can sit up, Abuela,\" he said in a hoarse voice. \"No hiding behind your latest recruit.\"\n\nBut Abuela had already thrown off the blanket.\n\n\"Andrew,\" she said slowly. \"Of course it would be you I called. My greatest regret. So, are you here to take your revenge, then? I am more than ready. I suppose it would be a type of justice.\"\n\nAndrew shook his head, as though confused.\n\n\"You can't do that to me anymore,\" he said. \"I'm beyond your tricks. Beyond Franklin's reach. I'm finally my own man, and I remember what you did. I remember it all.\"\n\n\"Then I'm truly sorry. Doubly sorry for what Franklin seems to have done to you. I am glad you're free of both of us. How do you know you are beyond his reach, though?\"\n\n\"He tried to stop me,\" Andrew said distantly. \"But he had no power over me. I escaped. And there are so few assets in California. I never understood why, but now I do.\"\n\nHe lifted the weapon and pointed it at Abuela. Terrified, Esther moved between them, but with a single motion he stepped forward and smashed the weapon into her chest, throwing her against the wall. She didn't think she'd broken anything, but she didn't try to get up again.\n\n\"No one can stand against me,\" he said, with so little emotion that it terrified Esther all the more.\n\n\"All right, Andrew,\" said Abuela. \"Take my life. If you're a free man, why are you hesitating? Have you perhaps remembered the conscience you always had hidden inside?\"\n\nThere was a flash, and a terribly loud noise. It repeated a few times, and then Andrew lowered the weapon.\n\n\"It's done,\" he muttered. \"She won't do that to me ever again.\" He dropped the weapon on the bed.\n\nEsther crawled to Abuela, but Andrew had told the truth. Abuela's entire head was a wreck of blood and gore. Esther stepped back, trying to think, trying not to let the nausea overwhelm everything. Maybe she could grab the gun, but she knew nothing about firing it. And as fast as the thought came, Andrew grabbed her.\n\nEven with a single good arm, he nearly crushed the breath out of her. It was hopeless to fight him.\n\n\"I know you,\" he said slowly. \"You're Esther Thompson. They wanted to find you. That means you're worth something. Insurance. You're coming with me.\"\n\nShe opened her mind, reaching to call someone for help: Mark, Nicola, or even Jacob. She grasped desperately for the glittering strands connecting everything to everything. Maybe there was some rare butterfly that could flap its wings and send them all back in time. She pulled and grasped, and she couldn't see a thing. But it turned out help was coming anyway.\n\nBehind Andrew a figure approached at an incredible pace, nearly silently. Andrew turned at the last instant, but Nicola was already on him.\n\nThere was a brief, hair-raising sound, like a billion nails scratching on a chalkboard. And then just as quickly it was all over, and Andrew dropped bonelessly to the floor. \n\nEsther rolled away from him, grabbing the gun with shaky hands.\n\n\"It's OK,\" Nicola said slowly from where she sat on the floor. \"He's dead.\"",
        "Esther stepped carefully towards him, prodding his arm with the gun barrel. He didn't move. When she checked for a pulse, she found none.\n\n\"What did you do, Nicola?\" Esther said, trying to control her voice. Should she try to revive him? They could tie him up somehow. He couldn't be dead. Nicola couldn't have done \u2014 whatever she had done.\n\n\"Everything is vibration,\" Nicola said mechanically. \"Rock, air, skin, bone, cells. I thought maybe I could learn how bodies work by listening, but they're so much more complicated than rock. But I guess I know enough to break them. Blood vessels in the head. Boom!\"\n\nNicola started to laugh, a horrible sound that turned into coughing. \"What's wrong with me, Esther? I can't move. I can't even throw up. I just killed Andrew. Shouldn't I feel something?\"\n\nEsther carefully put down the gun and moved to Nicola's side. When she reached for Nicola's shoulder, the other woman twitched.\n\n\"Don't touch me,\" she said. \"Stay the fuck away, Esther. Find Mark. He was alive. I'm not going anywhere.\"\n\nEsther took the gun with her when she left. She couldn't shoot it, but maybe Mark could. And she could keep Nicola from using it.\n\nShe found Mark near the parking area, crawling slowly closer. He was still wearing only his briefs, and he was covered in blood. \n\n\"Mark,\" she said, dropping to hold him. \"Mark, it's over. Nicola killed him.\"\n\nHe collapsed on his face, his lungs rasping for breath.\n\n\"How bad is the bleeding, Mark? Where should I start?\"\n\nMark was silent for a moment, trying to steady his breathing. \"The thigh,\" he said. \"Then the shoulder, then the arm. A splint for my right leg. I believe I will survive.\"\n\nEsther pulled off her sweatshirt and began tearing it apart, surprised at her own strength. Mark held the cloth against his thigh, wincing, and she did her best to wrap the rest of his wounds. The bullets had all passed straight through him, and his body was covered in scratches from crawling and dragging himself. His briefs were nearly shredded.\n\n\"I'll be right back,\" she said. \"I'll see if Nicola can help. But I think she overdid it. I have never seen her use her physical abilities like that. And Mark, she killed him with her other abilities. She's in shock.\"\n\n\"Oh no,\" he said. \"Poor Nicola.\"\n\nSure enough, Nicola was barely conscious when Esther arrived.\n\n\"Mark is alive,\" Esther said. \"I think he'll be all right. All of us will, thanks to you.\"\n\n\"Not Abuela,\" Nicola mumbled.\n\n* * *\n\nIn the end Esther used a wheelbarrow to move Mark to the dining cabin. She was light-headed, almost drunk with a strength she'd never before felt, even if it was a pale shadow of what the others could manage. The feeling still left her queasy. Andrew hadn't always been hideously strong, and Esther's true strengths could eventually make her far more dangerous.\n\nMark was too weak to help her much, but he still clung to consciousness. Esther remembered the astonishing speed with which he'd recovered from his previous bout of injuries, and sure enough, the bleeding had already slowed to a trickle. He was sweating and obviously in tremendous pain. She washed him as gently as she could, and found some more towels to soak up the blood from the bullet wounds. It was strangely reminiscent of the way Javier had taken care of her all those months ago.\n\nShe tried not to think about the flesh under her skin as Mark. It was a body she was taking care of, and it was totally inappropriate to even be looking at his erection. She was sure it was an automatic thing, something miswired as his body struggled to heal itself.\n\n\"Take care of the others,\" he said. \"I can manage for a while.\"\n\n\"Mark,\" she said. \"You know Abuela's dead, don't you?\"\n\n\"Yes,\" he said softly. \"Don't leave Nicola in there with her. Don't leave her alone at all, if you can.\"\n\nFinding Nicola unconscious, Esther retrieved the blood-stained wheelbarrow to bring her into the dining cabin. Esther's own body was beginning to shake with the exertion, but she almost welcomed the feeling. At least she was unhurt. She'd been useless during the attack, but she could do some good in its aftermath.\n\n\"I couldn't stop him,\" Mark said when she arrived with Nicola's still form. \"Andrew was so much stronger than before. If only I could have stopped him. I know how to do that without killing. We could have avoided all this.\"\n\n\"He shot you from a distance,\" Esther said. \"He must have known you would have stopped him otherwise.\"\n\n\"Maybe,\" said Mark. \"Whatever else, Andrew was never stupid. He would have killed me with the first shot if I hadn't heard him just in time. He was very quiet, but I didn't hear anyone else with him. That doesn't make sense. With just one more person they'd easily have overwhelmed us.\"\n\n\"He said he'd finally escaped Franklin,\" Esther said. She repeated back the few things Andrew had said. \"Perhaps no one else understood what he was doing. Obviously Abuela called him that night. I think whatever she did was enough to break Franklin's control, but it also unlocked all his memories of this place.\"\n\n\"Why would Abuela do that?\" Mark mumbled. \"Why Andrew? She knew \u2014 so dangerous. Nicola.\"\n\n\"I doubt she intended to call him,\" said Esther. \"Think about what she said. She's been struggling with guilt all this time. She knew she was dying. Maybe her subconscious was trying to correct her biggest regret.\"\n\nMark didn't reply, and she realized he'd already fallen asleep.\n\n* * *\n\nWhen Esther finished cleaning the blood and glass from their own cabin, Nicola and Mark were still asleep on the dining cabin floor. It was time to face what waited in the other cabin.\n\nThe sky was just beginning to brighten with dawn twilight. She steeled herself, then opened the door and turned on the light.\n\nThere was no avoiding the horror of Abuela's bed. She'd thought she generally understood what a gun could do to a person, but she supposed it wasn't an ordinary gun Andrew had used. She'd hidden it in the supply shed, but she really wanted to break it into a million pieces. She hated the idea that they might need it. That anyone could need a weapon like that.\n\nHolding her breath, Esther pulled the sheet up to cover Abuela's body. There was blood soaked everywhere, and the bullets had punched right through the wood of the cabin, just as they had in their own cabin. They would have to patch the holes before winter.\n\nUnlike Abuela, Andrew looked almost peaceful, showing only the bruising and other injuries Mark had given him. If Nicola had correctly described what she'd done, he would have died painlessly and instantly. She supposed that was nearly true for Abuela as well. In the end, they were both just dead bodies. \n\nEsther had been totally helpless. What if she'd had Nicola's abilities, or a gun and the knowledge to use it? If the only thing she'd been able to do was kill, could she have done it? She didn't know, and that was a blessing of sorts. Nicola had never been able to use her abilities to affect anything directly. If she'd had this breakthrough in any other way, it would have been cause for celebration. \n\nShe found herself sitting in a chair, turning Abuela's last half-finished sculpture in her hands. Maybe these sculptures were the key she was missing to understand how Abuela's mind had worked. There were over a hundred of them around the cabin. Plenty to hold and remember Abuela.\n\nThat was how Jacob found her when he burst in the door an hour later.\n\n* * * \n\nShe didn't know how long she'd been sobbing into Jacob's chest. He'd disappeared and come back, and now he was rocking her, the way her father had done when she was young. \n\n\"Mark told me what happened,\" Jacob said eventually. \"It is a terrible loss for everyone.\"\n\nShe looked up at him. He was exhausted, his eyes red.\n\n\"I will be all right,\" Esther said eventually. \"I thought I was managing, but all this death \u2014 my father died just before I came here. He was killed by the Unit. And my mother died of an illness last year. So much death. Andrew could have just waited, and Abuela would have died anyway.\"\n\nJacob nodded. \"Perhaps we should take some small comfort in that. She lived an immensely long and rich life. But a violent death always tears a hole in the world.\"\n\n\"Did Mark explain what Nicola did?\"\n\nJacob shook his head. \"He merely said she killed him quickly.\"\n\nEsther nodded and then told him the whole story, including Abuela's last words to Andrew.\n\n\"She never thought anyone beyond redemption,\" said Jacob. \"Would that we could all have a faith like hers. Come, Esther, let us leave the dead and attend to the living. I can take care of the bodies in a while.\"\n\nJacob was calm and efficient, and Esther gratefully let him direct her efforts. In that he reminded her of Mrs. Sanchez. Javier's Mam\u00e1 had been so ready to take her into the family, and then she'd left both of them behind. Now it turned out Javier and Raj had been trying to help her from afar all this time. And this new girl, Kat, the computer hacker. \n\nEsther had escaped to the refuge she'd sought, and yet she was still putting more people in danger. And now Abuela was gone, and Esther was utterly unable to replace or even maintain her vast web of protection. She hadn't been able to protect herself from a single man. And Abuela had told her the hard truth: she had to learn to protect herself first.\n\nShe thought about Javier and their time together while she helped tuck Nicola and Mark into bed. The memories were sharp, enough to hurt when she called on them in her loneliness. But that time had passed in a blink. In some ways she knew these two better than she did Javier. \n\nShe could leave this place. Call Javier from town, meet him on the road somewhere, and then stay on the run. Esther had plenty of money now. But the people interested in her had resources far beyond hers. Lukas's organization or the Unit would eventually track her down. Her only chance was to develop her abilities quickly enough, somewhere safe and familiar. And despite Andrew's attack, she suspected this spot was about as safe as anywhere. She couldn't protect herself yet, but Nicola and Mark could help. She would return the favor when she could. And maybe one day she could trust herself to protect Javier as well. \n\n* * *\n\nJavier gasped and sat up quickly in bed, his heart pounding. Esther was in terrible danger. She needed him, right now.\n\nHe got some pants on, put on his shoes and grabbed his pack. He'd kept it ready so he could escape like this on an instant's notice. Carefully he stepped out into the hall. It was the dead of night, and there was no sound but the soft whir of Mam\u00e1's machine. The sheer normalcy of the noise brought him up short.\n\nHe sat slowly on the couch, trying to control his breathing. He didn't know where he'd planned to go. He could never find Esther on his own. That was the whole point: the old woman was keeping her utterly hidden, something that Lukas seemed to believe was possible. He had to wait until Esther contacted him.\n\nIt must have been a nightmare, but it didn't feel anything like that. It felt like a cry for help from Esther, as clear as the night she'd put out her flashlight for him. Clearer. She'd begged him to help her, and he could still feel the remnants of her terror. He could even smell the lingering scent of pine, as though he'd somehow shared her thoughts for an instant.\n\nSurely that was impossible. That was something like magic. Esther was smart and brilliant, and maybe she had some special abilities like Janelle or Lukas. But then, Lukas had said the old woman had called for him somehow. Was it possible Esther could do that? He suddenly thought back to that moment at school, when for a moment he'd been sure Esther was reaching towards him. Maybe it had been a hallucination, but he'd been wide awake that time.\n\nHe closed his eyes and tried to remember everything about the feeling. But it was no use. He had a vague sense of direction, towards the hills of the Sierras. But that was where he'd always assumed she was, so it didn't mean anything. Even if he'd known exactly where she was, it would take him most of a day to get there. \n\nHe didn't want to talk to Kat about this. Their messages to each other in the two weeks since he'd left San Jose had been carefully casual. A little too careful. Esther was the elephant in the room when it came to their friendship. It was a lopsided triangle, one corner missing in action.\n\nIn the end he couldn't get back to sleep. When Mam\u00e1 found him in the living room, he smiled tiredly.\n\n\"Hi, Mam\u00e1. You want to go out for breakfast together? On me, now that I'm a rich man?\"\n\nMam\u00e1 smiled. He'd just gotten his first pathetic paycheck from working at the fast food place down the street, precisely the work he'd been intending to avoid. But he needed the cash, and for good or bad the hours were \"flexible\".\n\nWhen they finished breakfast, Javier took Mam\u00e1 out to a bench at the nearby soccer field. It was a Saturday morning, so it was full of kids' teams doing drills and scrimmages. Javier had been one of those little kids, in a different life.\n\n\"I think Esther might have called to me in the night,\" he said. \"She was in terrible danger. Now, I realize that sounds crazy, but it didn't feel like a dream. And I think it might be possible. I think she might even have done it once before.\"\n\n\"All right,\" said Mam\u00e1. \"So, why do you think she might be able to do that?\"\n\nJavier hesitated. He'd been keeping so much from Mam\u00e1 again. He didn't really know why. Probably he didn't want her to know that he was doing some dangerous things. But it was all bound up together with his feelings about Kat. And once he started talking, he couldn't seem to stop.\n\nMam\u00e1 watched the kids playing soccer. Only a little tremble in her cheek told him how upset she was. No, not upset. Frightened.\n\n\"Mijo,\" she said finally. \"Remember how you used to talk about joining the army? I know that was a long time ago, but it seems you've already enlisted in your own way. And of course you had to put yourself right between the two sides, the most dangerous place to be.\"\n\n\"It's where Esther is,\" Javier said. \"I didn't go looking for this fight, Mam\u00e1.\"\n\nShe nodded and gave him a weary smile. \"And if Esther had managed to give you full directions to her forest hideout, would you have gone through with it? Just walked right out the door?\"\n\nJavier nodded slowly. \"I would have let you know somehow, though.\"\n\n\"Good,\" Mam\u00e1 said. \"When that day comes, you had better come kiss me goodbye. I'll know what it means.\"\n\n* * *\n\nWhen Nicola finally woke, Esther hopped off the top bunk. Mark was still sound asleep below her.\n\n\"Here, Nicola,\" she said, helping the other woman sit up. \"Try to eat and drink some.\"\n\n\"Esther,\" Nicola rasped. \"What happened? My head feels awful. I had such a terrible dream.\"\n\nNicola looked over at Mark, and her expression slowly changed.\n\n\"No,\" she muttered. \"Oh, God.\"\n\nWhen Esther moved to comfort her, Nicola scuttled back against the wall. Esther sat across from her, on the bed next to Mark.\n\n\"You had no choice,\" Esther said. \"And it was in the heat of the moment. You couldn't have known \u2014\"\n\n\"No, I wanted to kill him,\" Nicola said. \"I was terrified and angry, and I hated him so much for making me feel that again.\"\n\nEsther nodded. \"Let's not talk about it, then. You overexerted yourself. Eat some food. Mark is recovering, and Jacob is here taking care of things.\"\n\n\"So that's it? We're just going to move on from the fact I used my abilities to kill someone? Exactly what Abuela has always been afraid I'd do?\"\n\n\"That's not true,\" said Esther. \"Abuela loved you, just as she loved all of us.\"\n\nNicola's expression hardened. \"Wouldn't it be nice if we could all live in your sunny world. But you're right \u2014 I should eat some food. It would be such a shame if I didn't recover quickly from the thing we're not going to talk about.\"\n\nNicola rolled out of bed and stood up, her muscles shaking as she walked carefully to the door. This time Esther knew better than to try to help her. Soon she heard Nicola yelling at Jacob in the dining cabin, and she turned her attention away.\n\nWhen Mark moaned softly in his sleep, Esther leaned over to feel his forehead. It felt as though he had a terrible fever, but she knew that was a side effect of his body's desperate attempts to heal itself. He mumbled something and sighed, and she found herself running her fingers along the dense stubble of his jawline. He didn't wake, but he turned his head slightly, letting his lips brush her palm. \n\nShe pulled away quickly, but what harm was there, really? She could feel how the touch had calmed him. Nicola couldn't be that person right now, but Esther could. \n\nShe stroked his hair and kept whispering that everything would be all right. A prayer, shot through with all of her own doubts. She hoped there was a God, because she was pretty sure she couldn't make it true on her own.\n\n* * *\n\nThat afternoon, Nicola insisted on taking the truck out for more supplies. She didn't seem shaky anymore, but Esther and Jacob were dubious.\n\n\"I'm safe to drive,\" Nicola insisted. \"And I have to get the fuck away from here. Clear my head a little. No, don't look at me like that. I'm not going to do anything stupid.\"\n\n\"OK,\" Esther said. \"Be careful, Nicola. I'll be watching out for you as best I can.\"\n\nNicola stared at her for a minute. But she bit back whatever she was thinking of saying and headed into the truck.\n\n\"She will need time,\" Jacob said. \"As necessary as it may have been, it was a horrible thing she did, and we all know it. She sees that in our eyes.\"\n\n\"But I'm not upset with her,\" Esther said. \"None of us are. We're all blaming ourselves because none of us could stop Andrew. Well, she did, and it's cost her so much.\"\n\nJacob nodded. \"Do you know why I asked Abuela to help me forget my own abilities?\"\n\n\"Mark said they were making you unhappy. That you thought you were going crazy.\"\n\n\"Well, that's true,\" he said. \"But I stopped thinking that way once I'd been here a few weeks. All I could think about was the tremendous responsibility thrust upon anyone with these abilities. I think you understand that too well, don't you?\"\n\nEsther nodded.\n\n\"I was too scared,\" Jacob said. \"I already have the responsibility of my ordinary ministerial duties, and I have never found them an easy burden. The changes in me provided the opportunity to do good in more subtle ways. And also to do harm. I do not want to listen to conversations that are meant only for loved ones, or for God. I do not want the ability to know for sure if a husband is abusing his wife. My duties and my faith are compatible with all of this extra knowledge, but my own strength of judgment is not equal to the task.\"\n\nEsther nodded slowly. It was a brave choice he'd made, in its own way.\n\n\"Jacob,\" she said. \"How do I do this? I'm starting to understand how hard Abuela must have worked *not* to do things. Finding those butterflies is hard enough. Knowing whether you *should* use them, though \u2014\"\n\n\"Yes,\" he said. \"Abuela had been making these decisions since before our grandparents were born, and yet she confessed to me the agony she still had over making them. But in her last days she spoke of little except you.\"\n\n\"Me?\" Esther coughed.\n\n\"Did you know that in recent years, Abuela couldn't contact me directly? She needed to nudge another acquaintance to make me a phone call. You see, I have practiced Abuela's exercises as seriously as prayer. My senses are probably weaker than an ordinary person's at this point. So, did you stop to wonder why I arrived so early this morning?\"\n\nEsther paused, then shook her head, even as the realization struck.\n\n\"Yes, Esther, you called out to me in a way I haven't heard in years. You did that without even the close bond that Abuela and I have. Had.\"",
        "Jacob wiped his eyes. \"Abuela said you might be the most talented one like us in the world. She considered it a miracle that you fell into her orbit before any of the other players snatched you up. And she said you were a better person than she was. My Marisol. Always so hard on herself.\" \n\nEsther hugged him. \"We should deal with the bodies,\" she said. \"And then afterwards, would you pray with me? I'm not sure what I believe anymore. But I can't think of what else to do.\"\n\nJacob nodded and smiled. \"Of course,\" he said. \"And perhaps this time we will receive some guidance. It hasn't happened yet, but on days like this I really wish God would cut us a break.\"\n\nEsther laughed, as he meant her to. And she didn't even shudder when they approached the door of Abuela's cabin. She'd been right. This was the place she should stay. \n\n..........................*** Chapter 33 ***...........................\n\nJavier flipped through the next newspaper in the pile, finding the proper section with a practiced speed. And suddenly, there it was.\n\nFrederick C. Daniels, 47, passed away unexpectedly after a fall in his home. A decorated veteran of the Vietnam War, he devoted his life to serving his country in both public and private sector work. He leaves his wife, Susan, and two children ...\n\nJavier stared in shock at the words. Last night Kat had messaged him about a confusing notation in the InfoCorp human resources database she'd hacked into. The idea that Daniels might actually be dead had seemed unlikely, but then again there had already been that suspicious car accident.\n\nMaybe he was a monster, but he'd had a family. Surely even terrible people were complicated. Javier realized the obituary gave him no satisfaction. Mostly he just felt nausea.\n\nOne thing was sure: it hadn't been an accident. Easy enough to arrange. Maybe it had been Janelle, or maybe someone more ordinary. Daniels had survived the Vietnam War only to die in a silent new conflict.\n\nThere had been another fire, at the InfoCorp facility in Orange County. This one supposedly was due to electrical problems, but the newspaper story brought up the other fires the company had suffered, with speculation from an unnamed executive that there was foul play involved. Javier didn't like that statement one bit. It seemed like something they would say when preparing to label a group more publicly as terrorists. \n\nClearly things were escalating. If the old woman was attempting to keep the conflict at bay, she was failing. Javier's mind raced through his usual worries about Esther, but there was nothing he could do except what he was already doing. Whatever that was. Intelligence-gathering, he supposed, but without the murderers on payroll the way Lukas and the Unit did it.\n\n* * *\n\n\"Nicola,\" Esther said nervously. \n\nNicola glanced over from her bed, where she spent most of her time these days. \n\nEsther rushed ahead. \"I'm going to do some exercises, try out some new things. Uh, in the bath. I could use your company, if you didn't mind.\"\n\nNicola nodded slowly, and Esther's heart raced in excitement and relief. But that changed quickly.\n\n\"You don't understand at all, do you?\" Nicola said. There was a bleakness to her tone that made Esther shiver.\n\n\"No, I guess I don't,\" said Esther. \"I want to, though.\"\n\n\"I doubt it,\" said Nicola offhandedly. But then she blushed and looked squarely at Esther. \"That was unfair. This is why I'm so quiet lately. So I don't lash out at everyone.\"\n\nEsther nodded and waited for Nicola to continue.\n\n\"I can't use my abilities,\" Nicola said. \"Not consciously, anyway. All that microscopic beauty I kept describing to you is gone. Or rather, I remember it too well, and it's all fused with what I did to Andrew. Esther, I'm a killer, and I might do it again with no warning. How could I know, when I don't know how I did it that time?\"\n\n\"You never did it before,\" Esther said. \"And I'm pretty sure you'll never do it again. You're nothing like Andrew. Anyway, I'm not frightened of you.\"\n\n\"You fucking well should be frightened,\" Nicola said. \"You should be much too nervous to let me get that close to you, especially while you go spirit-walking the world. And since you don't have the good sense, I'll decide that for both of us.\"\n\n\"For all three of us, I guess,\" Esther said, more sharply than she'd intended.\n\nNicola looked uncomfortable. Mark was mostly back on his feet again, and it was pretty obvious how much he was hurting from her rejections.\n\nEsther sighed. \"We can help each other,\" she said. \"I can watch and listen to you and help you stop anything you don't want to do. We don't have to touch. Just having you around is comforting for me.\"\n\n\"Why?\" Nicola asked tiredly. \"What possible comfort could I be?\"\n\nEsther walked over, hoping to sit next to Nicola on the bed. But Nicola waved her away and lay down again. Finally Esther left for the bath on her own.\n\nWithout someone there to help her, she fell back on her first technique. While she played water over her small opening, she imagined it was Nicola's tongue pressing insistently. And when she worked her finger slightly inside her anus, she imagined it was Javier's finger. And then she had a really unexpected thought about what Nicola and Javier might do together, with her in between.\n\nIt was a surprising pleasure when her muscles started to shudder. The orgasm was nothing special. There were no fireworks, no sudden bursts of insight. Just a satisfying amount of pleasure, followed by a deep relaxation. She felt her mind unclench slightly, and her vision expanded.\n\nNicola lay curled on her bed, one hand down her pants as she cried and masturbated furiously. Esther skimmed past, her nostrils flaring as she smelled forest, soil, dry air. A familiar smell lingered in the air on the edge of her perception, and she followed the trail. \n\nEven with his healing injuries, Mark moved as easily through the forest as water. The faintest impressions of steps, bent blades of grass, and of course the smell he couldn't hide. A good smell. She felt her groin tingling with renewed interest. Mark was the most perfect hunter, and yet here she was stalking him. It was a heady feeling.\n\nHe was in motion, and she rushed to catch him. He'd been running for some time, chasing a small animal. A rabbit. But he'd told Esther he didn't hunt this way. It made more sense to sit still and wait.\n\nFinally he put on a burst of speed, catching the rabbit in one hand. It didn't struggle, and she realized he'd killed it in the first instant.\n\nMark sat quickly, pulling out his knife. And then he began to cry.\n\n\"I'm sorry,\" he whispered to the rabbit. \"I shouldn't have made you run.\"\n\nEsther quickly retreated to the quiet bubbling of water against her naked skin. She couldn't unsee those scenes of private misery. The three of them were spinning apart, and she was the only one left to do something about it. \n\nBy the time Mark returned, she'd already begun to prepare the stew. He smiled in approval and the two of them butchered the rabbit together. \n\n\"How soon did you sense me this time?\" Mark asked while the rabbit cooked.\n\nEsther paused. \"I saw you kill the rabbit,\" she said. \n\nMark looked down, controlling his breathing carefully. Esther put her arm around his broad shoulders.\n\n\"It will be all right,\" she said softly. \"We'll be a family for each other.\"\n\nJacob arrived right on time, and Esther relaxed when Nicola walked in. The other woman hadn't always wanted to eat with them, especially when Jacob was around.\n\nWhen they'd mostly finished, Esther looked around the table.\n\n\"I'd like to talk about where we go from here,\" she said. \"I'm learning quickly, but I have nothing like Abuela's abilities. I can't keep everyone safe, and I can't stop this conflict between Lukas and the Unit. But maybe soon enough I can at least keep us safe here. I can already sense as far as the town in my better meditations. We can think about what this place could be. We could eventually invite more people. Make it a sanctuary.\"\n\nMark nodded, and Jacob smiled encouragingly.\n\n\"I'm leaving,\" said Nicola.\n\nEsther felt as though she'd been punched. The others looked equally shocked.\n\n\"Leaving?\" Mark blurted. \"What?\"\n\n\"You're all smart,\" said Nicola. \"So let's try to think clearly about this. It turns out that I'm as powerful and dangerous as I always wished I could be. It scares the fuck out of me. But do you know what really scares the fuck out of me? Franklin.\"\n\nJacob nodded. \"He is a thing of nightmares.\"\n\n\"Not so much for you or Esther,\" Nicola said. \"Or for ordinary people, at least not yet. But put yourself in my shoes. For someone as sensitive as I am, with my abilities, and my knowledge, but without the ability to close my senses and resist compulsion. What would Franklin do if he came across me? What could he make me do? Oh, I see you're getting it now.\"\n\n\"But why leave?\" Mark said. He sounded lost. \"You're safest here, with us.\"\n\n\"No,\" Nicola said, and Esther finally saw how much it hurt her to say. \"Esther can't protect us yet, not from Franklin's people. And while she's brilliant, she doesn't have Abuela's experience to teach me. What I need is to find more people who have abilities similar to mine, who might be able to teach me the control I need. And above all, people who hate Franklin and will keep me safe from him.\"\n\n\"You want to join Lukas,\" Esther said.\n\nNicola nodded. \"It's my decision. Abuela was very into respecting that kind of thing, wasn't she?\"\n\nJacob looked pained.\n\n\"Of course it's your decision,\" Esther said. \"I understand your reasons, though I wish you had another solution. I don't want you to go, Nicola.\"\n\n\"I can't stay here,\" Nicola said, her voice shaking. \"That's the other thing. I can't even look at that cabin anymore. I have to leave.\"\n\n\"I'll come with you,\" Mark blurted. Nicola slowly shook her head.\n\n\"No,\" she said. \"You belong here, in your home. And Esther needs someone to help keep her safe. Mark, I need this time on my own. I have to find a way to live with myself, and I can't do that here.\"\n\n* * *\n\n\"You're really leaving tonight?\" Esther stared at the small pack Nicola was filling.\n\n\"Jacob said he'd give me a ride. And we'll all be miserable if I stretch this out too long.\"\n\nNicola finished with her little pack and put it on her back. The two of them looked at each other.\n\n\"I'm sorry, Esther,\" Nicola said. \"I hope I can come back sometime.\"\n\n\"I'm going to miss you terribly,\" Esther said. \"And Mark \u2014 he can't tell you, but he loves you.\"\n\nNicola sighed unhappily. \"And he knows how I feel about him. Sometimes that's not enough, though. I guess you know that as well as anyone.\"\n\nEsther nodded. \"You still have that credit card linked to Abuela's,\" she said. \"Jacob says it should keep working. Let him know if you run into money problems. Or any problems. We're here any time you ask.\"\n\nNicola smiled. \"Thank you. I'll use a little money getting myself there, but I'm not going to spend Abuela's money supporting Lukas. And please don't think that I'm foolish enough to throw myself right into his arms. With your permission, I'll tell him I'm there because Abuela died and we had to disband. If he's as brilliant as he thinks he is, he'll already have figured out she's gone. I won't tell him a thing of your abilities, or even admit I know you. And I'll downplay my own abilities as much as I can. I don't want Lukas thinking he has a new assassin to play with.\"\n\n\"Good,\" said Esther. \"But why don't you tell him I was here, since he already assumes as much. Just say that I was clever and really into math but not all that interesting when it came to the changes or any particular abilities.\"\n\n\"Perfect,\" said Nicola. \"I'll play exactly the arrogant bitch I was to you at first. Plus then everyone will think I'm overcompensating about my own weak talents.\"\n\nEsther smiled and moved to give Nicola a hug. But even now Nicola shook her head and stepped back.\n\n\"I'm not joking about how terrified I am,\" Nicola said. \"I have to go if I'm going to have a life again. I won't forget about you, though. Or Mark, obviously. Take care of him, Esther. And if something happens between you, for God's sake don't feel guilty on my account. I'm glad you have each other.\"\n\nAn hour later she and Mark watched Jacob drive away with Nicola. And just like that, they were alone. She turned to face him, but Mark had disappeared silently. When she got to bed, he was already asleep, or so she thought.\n\n\"Why'd she have to go?\" Mark whispered. \"Why did she leave me?\"\n\n\"You know why,\" Esther said. \"It doesn't mean she doesn't love you. It might have been the hardest thing she's ever done. She probably already wishes she could come back.\"\n\nMark didn't reply, and soon she realized he'd already fallen asleep.\n\nIt was always so easy for him, even when he was upset. Mark fell asleep the way he hunted, or had sex. His body was a tool, something to keep sharp no matter the circumstances. Mark was straightforward, and he didn't typically try to hide things. But that didn't mean he entirely understood his own feelings.\n\nEver since Nicola had made her casual comment about Esther and Mark, Esther had been reviewing the interactions she'd had with him that she didn't understand. She made him uncomfortable, and perhaps the reason wasn't that there was anything wrong with her body. \n\nShe suddenly had an almost irresistable urge to climb into bed with Mark. She'd feel his hard muscles against her bare skin, reaching down to stroke his penis the way she'd seen Nicola do so many times. And she'd teach him the kinds of things that her body wanted. \n\nInstead she pulled off her shorts and began to masturbate quickly, rocking her back against the sheets. Running her fingers between her breasts, feeling her freckles begin to pulse with arousal. Feeling the faint dampness coat her tiny hole. She imagined sitting atop Mark, letting his penis rub against her. Except now it was Javier instead, his fat penis hard as a rock, his eyes begging her to pull off her panties and show him what she'd been too scared to let him see.\n\nShe wondered if he still thought of her when he masturbated. Maybe he was doing it right now. She extended her senses towards him \u2014 much too far, of course, but she liked to imagine she could smell him. He would be sleepy and excited, his body nearly ready to come, even though he wanted to delay. \n\nAs was often the case, tonight she just couldn't manage to get her body there on her own. She wiped her fingers on her thigh and settled for replaying some of her favorite memories. Javier's body certainly worked just fine.\n\n* * *\n\n\"Esther,\" Javier mumbled. She was so close he could smell her, the faint musk so different from any other woman he'd been with.\n\nHer fingers encircled his dick and she began to get him off, her tiny hand as always making him feel magnificently big. When he was getting close, she rolled over and pressed her back into him, encouraging him to rub himself hard against the sensitive areas on her lower back. She mumbled something encouraging, and he moved faster, hugging her tight. Something tickled his mind and he slowed, but then she told him she didn't mind, that he could make a mess on both of them if he wanted.\n\nJavier let out a deep groan and then his dick exploded, his balls shaking with the force of his orgasm. He spilled all over Esther's back, and she kept urging him on. When his orgasm finally ended, he was still hard, and Esther kept rubbing against him. But he felt cold and wet and oddly ashamed. Esther's presence faded and he opened his eyes.\n\nIt was dark, and Kat was still rubbing her back against his erection. He yelped lightly and rolled away, realizing with a sudden horror that it had all actually happened. He'd made a mess in his pajamas and the bed. And Kat's pajamas too.\n\nShe sat up slowly.\n\n\"Hey,\" she said sleepily. \"It's OK. It was really nice, honestly. Don't be embarrassed. I didn't mind at all.\"\n\nJavier stood there like an idiot, feeling his erection finally subsiding.\n\n\"I haven't done that since I was thirteen,\" he finally said. \"Oh my God. Let me go get cleaned up. I'm so sorry.\"\n\nKat got up to find some replacement sheets. \"No problem. Must've been a hell of a dream. Can't pretend I'm not jealous.\"\n\nWhen they finally got back in bed, Javier kept a little distance from her.\n\n\"You can hold me if you want,\" Kat said. \"It's OK. I know you were thinking about Esther. I'm not asking you to pretend I'm her.\"\n\nJavier reluctantly shifted a little, putting his arm around her. Kat snuggled happily against him. When his dick started to stiffen again, she pretended not to notice. It was a microcosm of the strange relationship they seemed to be managing. A little more than friends, but not lovers. \n\nEsther, I miss you, Javier thought. Please tell me to come find you. I can feel the storm coming and I don't know what to do.\n\nBut of course she didn't reply. Javier buried his face in Kat's back and tried to recapture the smell of Esther's exotic body. Black hair, soft hands, pale skin. Pine needles, and a world with only the two of them."
    ],
    "authorname": "rockchaser",
    "tags": [
        "romance",
        "fantasy",
        "unusual body",
        "separation",
        "coming-of-age",
        "drama",
        "action"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/the-strangeness-within-pt-05"
}
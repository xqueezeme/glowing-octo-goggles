{
    "title": "Mira Ch. 14",
    "pages": [
        "HI guys,\n\nI know you're all happy with the quick additions. But I have to warn you that I had to do another back edit. So there's some more stuff in this chapter that will be made more clear in the revised version. Unfortunately the revised version will not be on Lit. But it shouldn't be a big enough change that it should cause problems with continuity. \n\nHappy reading.\n\n*******************************\n\nA pleased sense of accomplishment filled Rillan as he walked down the long hall. His boots echoed dully off the walls. For the first time in centuries he started to think that it may be possible for him to accomplish his assignments without destroying everything he touched. As he passed the door leading to Aris' rooms the distinct tinge of copper on the air tugged at his beast.\n\nStopping in mid stride and swearing under his breath, Rillan threw open the heavy wooden door and streaked down the pitch black hall. Even in the abyssal darkness his demon eyes could see Aris lying in a puddle of her own blood on the hearth of her fireplace.\n\n\"No,\" Rillan growled fiercely. \"Not this time. Not already.\" In a moment he was on his knees next to her body. Rillan forced himself to ignore the repulsion he felt, when he noticed that she had yet to clean herself. Leaning down to listen for her heartbeat, Rillan wrestled with his vampire. The metallic blood odor permeating the air was almost too much for him.\n\nPicking up her dirty, cold, limp frame Rillan almost missed the soft thud in her chest when her hand reached up to touch his face. Flinching Rillan looked up at her face, a strange manic fear in her eyes held him captivated.\n\nIn a tiny, breathless voice Aris whispered to him, \"Please, I don't want to die.\"\n\nAlmost dropping her to the stone floor he released her and paced away from her. \"Stupid girl. You're past saving,\" Rillan continued under his breath, \"unless you want to be like me.\" \n\nA soft, shallow whimper parted Aris' lips and tears seeped from her closed eyelids. \"I&mdash;I&mdash;wasn't r&mdash;ready.\"\n\nStaring down at her, Rillan's heart raced. In all the years he had dealt with the sacrifices, he had never been forced into a situation like this. They all died willingly. They all died because they wanted it. I didn't kill any of them. \"Why, the hell, did you have to do this? Why tonight?\" First time in centuries that things seemed&mdash;\n\nRillan didn't know what to think any longer. He felt as though he couldn't let Aris die this way, but the only answer wasn't something he would wish on his worst enemy. In one sudden movement he was on his knees next to her again. Propping Aris up against the hearth, Rillan forced her to face him in the dark. He knew that she couldn't see him, but he needed to know that she heard him.\n\n\"Girl,\" he hissed, \"open your eyes.\"\n\nAris was too far gone to be frightened any longer. She knew she was dying. The room spun around her, the darkness swam, and his voice was muffled and echoed in her ears. She wasn't even sure if he was really there or if it was a nightmare. She opened her eyes and stared into the darkness with the precision of a servant following the most basic of orders, regardless of the consequences. \n\nJust do as he says, she told herself. Mira said that it would go easier on you that way. She laughed weakly. \"You're almost dead anyway,\" she said to herself.\n\nRillan was confused. He didn't know if she was talking to him or herself. \"Girl,\" he snapped. \"Listen to me. The way for you to live is to end up like me. Choose. Death or worse?\"\n\nAris laughed again. The hollow sound sent chills down the vampire's spine. \"I don't want to die. Do you?\" I don't know, Aris answered herself. I don't want to be a vampire.\n\nRillan thought about what she said for a long moment. A flash of Mira's face, her eyes temporarily clouded his vision. \"No,\" he said finally. \"I don't.\"\n\nIn one swift movement Rillan lifted his wrist to his mouth. Dozens of dagger sharp teeth lacerated his flesh. Thick, sticky blood oozed to the surface. He grabbed Aris, spinning her in his arms so that her back was to his chest and he could hold her down. Bracing her he forced his wrist to her mouth and held her there. \n\nAt first Aris sputtered and fought back. She couldn't breathe and felt as though she was drowning. The nearly congealed blood smeared over her tongue, cold and foul. The choice was swallow to clear her mouth and airway or stop breathing. Choking on the rancid flavor, she felt a sudden burning, her stomach heaved, and every nerve in her body instantly came to life.\n\nShame flooded through Rillan, he couldn't believe what he had done. With full knowledge that Aris would survive, he got up and left her to find her way through the darkness of the transformation alone. \n\n<p align=\"center\">* * * *\n\nLilith held the note in her hand trembling a bit as she read the words slowly. The elders waited impatiently for Lilith to tell them what the piece of paper said. Finally, she placed the paper on the table in front of her and lifted her eyes to the concerned faces that surrounded her. \n\n\"It seems that the army has been chased away. Unfortunately that does not mean that our trouble with the Empire has ceased. There will be more leaders, and more vendettas. Darius Jos lives. Where he has gone is unknown.\"\n\n\"So our situation has not changed,\" someone said. Relief and frustration combined oddly in his voice.\n\nThere was rumbled agreement to the statement.\n\n\"We've subsisted this way for as long as I've known. We can continue. Events are best dealt with as they come.\"\n\n\"So we live. Day to day. Wait for the next threat to our existence. Hope to survive. Feed the vampire. Is that all?\"\n\n\"What more do people need? We live. We live fairly well. The hand of the Empire has retracted. We should be grateful.\"\n\n\"We should be considering the future. Does no one else think that waiting for the worst is not the way we should be living?\"\n\nSilence filled the room. Everyone stared expectantly at Lilith. Sighing, she lowered her eyes to her wrinkled hands, rubbing them together thoughtfully. \"Since I was a girl,\" she said finally, \"this is how it has been. The Fates have left us to ourselves. Still we can all see that an imposed change is imminent. I suggest we all think on it some time. We need to decide if we will try to battle the Fates and keep our solitary existence protected or accept that we will be assimilated by the Empire in time and resign to that.\"\n\nJust as the meeting was being dismissed a young woman entered the room and walked directly to Lilith. Leaning down she whispered something into the old woman's ear and handed her another note.\n\nLilith took the paper and quickly opened it. After scanning the paper, she cleared her throat to interrupt the confusion rumbling through the room. \"A new sacrifice is needed,\" she said curtly. It was a rare occasion when something was able to break through Lilith's normally neutral demeanor. \n\n\"There was no body this morning.\"\n\n\"No,\" Lilith replied, \"and there will not be one.\"\n\n\"What do you mean?\"\n\n\"How many girls the vampire need?\"\n\n\"Have his demands changed?\"\n\n\"What has happened?\"\n\nLilith raised her hands, \"Calm yourselves.\" When the random outbursts stopped she continued. \"Lord Tiernay left a message that Aris has died. He says only that there will be no body. There is no more.\"\n\n\"That makes no sense.\"\n\n\"Where is her body?\"\n\nLilith shook her head. \"I don't have those answers. We'll have Mira send a new sacrifice.\"\n\n\"Her handfasting is tomorrow,\" one of the woman said sympathetically. \"Perhaps we can leave it until after the ceremony.\"\n\nA contemplative look overtook Lilith's features. \"No,\" she said strongly. \"I believe it would be best to have a girl sent as soon as possible. There is no telling how badly he needs the sacrificed replaced after the battle.\"\n\nThe sweetest sad music Lilith had ever heard filtered gently through the rooms of the large roundhouse the sacrifices shared. All the girls were sitting, apparently enchanted by the sound. Some of them appeared to have tears in their eyes as they listened. \n\nLilith made her way to Mira's room and the apparent source of the beautiful haunting sound. Opening the door, she stared at Mira for a little while. Mira was so wrapped up in playing that she didn't notice Lilith standing there at first.\n\nMira stiffened. Out of the corner of her eye she saw movement. Abruptly Mira stopped playing and turned toward the door. The minute she saw Lilith in her doorway, a sinking feeling developed in the pit of her stomach.\n\n\"May I come in,\" Lilith asked with a smile.\n\nNodding uncertainly, Mira motioned to a small chair.\n\n\"You play beautifully. I wasn't aware that you could.\" Lilith walked slowly and sat as if it took a great deal of effort. Everyone was noticing Lilith looking her age more than ever. \n\n\"Some,\" Mira responded, obviously wanting to get to the point of the conversation and avoid small talk. \"I'm still learning. Is there something you need from me?\"\n\n\"Unfortunately,\" Lilith paused. \"A new sacrifice is needed. Can you have one of the girls prepared by morning?\"\n\nFear and confusion marred Mira's features. \"I guess. But Aris&mdash;\"\n\n\"Wasn't found this morning and won't be. There will be no body. We don't know why. Just that a new sacrifice must be sent.\"\n\n\"The girls will be frightened. Changes in their routine cause problems.\"\n\n\"I'm afraid,\" Lilith said sympathetically, \"that can't be helped.\"\n\nMira couldn't take it any longer. Tears formed in her eyes. \"Lilith, I can't. I can't send them to him.\"\n\n\"Why? You've been chosen&mdash;\"\n\n\"Because I can't,\" Mira interrupted, virtually yelling at Lilith. \"He only wants someone to care for him. But if he finds that then he just get to watch her age and die, partially because of what he uses her for. It's not right. Not for him or any of us.\"\n\n\"That's why the lessons are meant to teach the value of sacrifice for the greater good,\" Lilith replied with infinite patience. \"You know as well as we all do that Lord Tiernay gave his life so that we could have a protector. The sacrifices give their lives for the same reason.\"\n\nMira stood up, wringing her hands. \"There has to be another way. I saw a scroll. In the library in Rillan's rooms. It talked about how the Circle created him. Can't there be only one sacrifice. A girl who could feed him indefinitely?\"\n\nLilith's smile widened and a mysterious look twinkled in the back of her eyes. \"I suppose something like that is possible. Dangerous. Still, possible. That knowledge is very carefully guarded. I'm sure you can imagine what life would be like for us if the wrong kind of person managed to find proof of such things. Do you truly understand what you're suggesting?\"\n\nMira's entire body was trembling. \"If the wrong person acquired that kind of knowledge then the consequences could be terrible.\" Mira sounded as if she was reciting from an ingrained lesson as she answered Lilith. \"We live our lives with the understanding that it is our mortality that makes living valuable. Without death we could lose our sense of worth.\" Mira moved closer to Lilith. \"I understand, Lilith. But we also believe that there is no perfect answer to everything. Maybe in this one circumstance, death isn't of as much value.\"\n\n\"Do you know of a woman who would commit to living for an indefinite time with the purpose of feeding a vampire? Part of the reason such a thing has never been done is because it has always been assumed that the sacrifices look forward to their death and take comfort in the knowledge that their situation cannot last forever.\"\n\n\"Lilith,\" Mira said faintly, \"if he will have me&mdash;\"\n\nStanding up, Lilith placed a gentle kiss on Mira's cheek. \"I believe he will. Say nothing to anyone yet. I must speak with the elders and decide how to go about this. It is a delicate thing.\"\n\n\"What about Liam? The handfasting?\"\n\n\"Liam is a strong man. He will survive the situation, no matter what happens. Mira, please understand that there is no guarantee with this. I cannot promise that the elders will agree or that we will be capable. The knowledge of how to do what we've suggested is ancient and out of use. I suggest that you prepare a girl for sacrifice in the morning, as though nothing has changed. She may yet be needed. I will speak to the elders and bring you the answer when I have it.\"\n\nMira's heart pounded in her chest. \"I don't know if I can.\"\n\n\"If you are capable of standing in front of me and telling me that you would commit yourself to a vampire for all eternity and give up your soul, never to be reborn, I believe you are capable of going through the motions needed for another day's pretence.\"\n\nMira's entire body seemed to slump, giving in to Lilith's directions. With that the old woman turned and left the room. She had a great deal of convincing and preparation to tend to.\n\n<p align=\"center\">* * * *\n\nAris didn't know how long she writhed on the floor. Each new sensation was a shock to her system. Everything around her was sharp with clarity. She could see each crack in the floor through the darkness. Somewhere water dripped and splashed lightly into a puddle on the ground. A mouse scurried along the wall. Her skin alternated between scorching hot and painful cold. \n\nEventually she stood up and went to the mirror. She wanted to know what she looked like. What has he done to me?\n\n\"He's cursed you. You made him angry. Now you'll be punished for eternity.\"\n\nAris jumped when she heard that strange laughter in the darkness again. I can't see myself. She reached out and touched the glass surface of the mirror. It was unsettling to watch the dirt on her body outline her form in the mirror, but her face and body were gone. \n\n\"Why would you want to look at yourself anyway? You know what he looked like. He scared you so badly. Do you want to be frightened by your own reflection?\" The voice in Aris' ears was cruel. She didn't even want to imagine how horrific she must appear.\n\n\"So when do you think you'll be so hungry that you'll kill someone?\"\n\nThe blunt suggestion made her flinch. I won't! I can't!\n\nThe cruel voice continued to taunt her. \"You'll have to have your own sacrifices. Maybe the druids will give you a group of men. It would serve them right.\"\n\nI won't do it. Why did he do this to me?\n\n\"You'll have to do it. At least you may be able to feed off the next girl they send down here for him. They'll have to send him someone.\"\n\nAris imagined herself helping Rillan to drain a poor girl of all her blood. No. She began whimpering.\n\n\"So go help them.\"\n\nWhat?\n\n\"You go help all those poor girls that Mira is going to sentence to death down here. Put them out of the misery of waiting to be the next piece of meat sacrificed to the demon hiding in this darkness.\"\n\nAris didn't really know what she intended as she slipped out of her rooms and found her way down the halls to the cave entrance. It was late and the moon was full in the sky. Continually egged on by the evil voice in her mind, she found her way silently through the town to the large round house she had spent so much of her life in.\n\nCreeping into the first room was the most difficult. Aris hovered, frightened, over the sleeping forms of two of the girls. Suddenly the night erupted in screaming and blood. Aris didn't know where it was coming from, but it tore through her. She wanted to hide in a corner and pull blankets up over her head. She remembered opening her eyes to see bodies. So many bodies, she thought . Bloody and torn apart. Who would do something like that? She felt sick to her stomach.\n\n\"You would,\" the voice tormented. \"You're a vampire. You kill people. But you're better than Rillan Tiernay. He kills on command. You saved them. Saved them from him.\"\n\nAris nodded to the voice. It made some sense.\n\nTerror filled screams woke Mira from her sleep. At first she believed that one of the girls must be having a nightmare. Mira got up and ran from her room to find whoever was dreaming so horribly that it would cause the cries she heard.\n\nBy the time Mira made it to the main room, a deadly silence had descended on the round house. She stumbled over something in the darkness and stepped in a puddle of warm liquid. Looking down she found a body. \"By all the Gods,\" Mira swore under her breath. There was no point checking to see if the girl was still alive. She had been ripped apart. \n\nGathering all her strength Mira made her way through the room in the direction that the last of the screaming had come from. \"Maybe the screaming was mine and I'm dreaming now,\" she suggested to herself.\n\nNoticing a door slightly ajar Mira nudged it open. If not for the time she had spent with Rillan, Mira may have screamed when she saw Aris. The girl was naked. Her pale skin was bathed in blood. Her limbs seemed longer, contorted, as she bent over the body of her latest victim. Suddenly she turned toward Mira. Black empty eye sockets, sunken into pasty white flesh, pulled taught over skeletal features stared back at her. Aris' lipless mouth appeared to almost smile at Mira, as the vampire turned and began walking toward her.\n\nMira stood stiff and frightened. Do I really want to give myself to this for all eternity? She had no idea what to do. Aris' intent was obvious. Out of nowhere light streamed into the room. There was a flurry of motion out of the corner of Mira's eye and a virtual army of people flooded the room, attacking the vampire. \n\nNot having weapons the men resorted to throwing their lanterns at the monster. Fire erupted around the room and at her feet. Aris screamed in pain as the flames enveloped the room and smoke began to fill the air. \n\nMira felt arms around her and looked up to see Liam appear from the smoke and shadows. Huddling in his arms she allowed herself to be led from the room. Outside the round house a crowd gathered. The entire house was burning to the ground. Men took turns running into the crumbling building to try and find survivors. After a short time they decided that there were none, save Mira.\n\n\"Are you alright?\"\n\n\"What,\" Mira asked, blinking her eyes at the growing flames.\n\nLiam forced her to look at him. \"Are you alright?\" \n\n\"Aris is a vampire,\" she said with a shudder.\n\nLiam looked up at the burning round house. \"I think Aris was a vampire.\"\n\n\"How can you be sure? We got out,\" Mira said frantically.\n\nSuddenly a thought occurred to her. \"My whistle,\" she cried and tried to break free of Liam's grasp.\n\n\"Mira! Get a hold of yourself. You can't go in there. It's gone.\"\n\nFinally she stopped fighting him and collapsed into his arms crying. \"I can't believe this has happened.\"\n\n\"Come with me. You'll stay in my family house tonight. You'll be part of the family soon enough.\"\n\nMira barely protested. She was so tired she thought she might collapse and fall asleep in the clearing beside the burning round house. \n\nThe fire raged on through the night. It was all they could do to keep it from consuming the other buildings nearby. With the breaking of day the druids found themselves sifting through the ashes, trying to account for bodies and attempting to determine if the vampire had died in the flames or not. \n\n***********************\n\nTake a second and vote! &bull;\n\nIf you want updates as to when the next chapters are going to hit Lit, then check out my bio or send me feedback&hellip;\n\nThanks for reading"
    ],
    "authorname": "secretme",
    "tags": [
        "vampire",
        "vampyre",
        "druid"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/mira-ch-14"
}
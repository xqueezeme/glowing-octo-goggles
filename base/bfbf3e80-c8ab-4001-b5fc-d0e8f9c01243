{
    "title": "Stumbling Ch. 06",
    "pages": [
        "\"This is weird. I feel like the world has been turned upside down.\"\n\n\"That's great, Lars, really it is. You know what's even better? Not talking about it.\"\n\nI found myself in the company of my own personal, brand new, never before had an outlet for this sorta shit, fan-boy. Larsen Nichols. He decided to sit with me at lunch, after I decided to sit by myself to try and preempt my eventual exile from the jock table. I had started to give what Richey said about my being intimidating some merit. In fact, he may be right. I'm almost certain I stole this table from a group of freshmen, based on how several had walked up and placed a tray down only to see me and scurry away. I had to yell at one guy to take his tray. I've never felt very threatening before. It's not like I walk around staring people down or throw anyone into a locker.\n\nLarsen had me wishing I was more intimidating. He hadn't asked very many questions. Yet. Instead, he bounced in his seat like a little puppy. The idiot was burning a hole in my head when he wasn't letting his eyes dance around the room in his excited retelling of how he had heard everything that Richey had discussed with me yesterday. Part of me was concerned with his volume. A larger part of me didn't give a shit. If anyone heard him, they didn't care. Larsen rambles. Everyone knows this, even those who don't know him. He's the hyper kid everyone smiles and nods at, never really hearing a word he says. I'd call him ADD's poster child.\n\n\"It's just... like huge! I mean, I always thought I was alone, except maybe Richey, but that was never confirmed. Just a hint, you know? This is a small school. Having some other people here like me is just blowing my mind. Add in that the someone is you... just wow man.\"\n\n\"At least you don't ask much from life.\"\n\n\"What's that mean?\" His head tilted like a puppy.\n\n\"Lars, look at how you're feeling right now.\"\n\n\"Over the moon, ecstatic, in desperate need of a happy dance.\" He counted off with his fingers.\n\n\"Yes, exactly. I get the feeling you get the same level of happiness when the cafeteria serves pie.\"\n\nHis eyes lit up before he turned his head over his shoulder to look back at the lunch line.\n\n\"I didn't see the pie.\"\n\nHe started to stand up. My hand on his shoulder brought him back down a little harder than necessary.\n\n\"There is no pie.\"\n\n\"Oh...\" He looked positively crestfallen.\n\n\"I'm sure they'll have it Friday. But what I was saying, if you remember back that far, is you are easily amused. Happiness comes by without even trying to hit you and you manage to grab it.\"\n\n\"That's a good thing, right?\"\n\n\"That's a great thing. I truly envy you. But listen to me, you have got to calm down a bit. There's no reason for you to be this pleased.\"\n\n\"Why not?\" He asked, indignant that I'd burst his bubble. \"There's finally some people around here I can talk to about gay stuff.\"\n\nThe word was going to take some getting used to. I still cringed a little. Hearing him use the word in connection to me was surreal, just as surreal as when my mother had done it.\n\n\"Lars, don't you want a boyfriend?\"\n\n\"Well, yeah. That'd be nice. You're with Richey though.\" He looked confused.\n\n\"Correct.\" I said slowly. \"That means, the two gay guys you now know, ain't available. Shouldn't that bring you down a little?\"\n\n\"Well, maybe a little.\" He shrugged. \"Still, I can share in the happiness. It floats around Richey like a cloud. I kinda wondered why he was suddenly smiling so much.\" His eyes roamed up and down my body, or what was visible from the table top up. \"I can see why now.\" I blushed a bit.\n\n\"Cool your jets perv. I'm strictly a one trick pony. One rider at a time.\"\n\n\"Doesn't mean I can't see that you're hot, or why Richey likes you. In fact, I never knew you were this nice.\"\n\n\"Why does everyone think I'm an asshole?\"\n\n\"Well, you don't talk much and you scowl a lot. It comes off a bit intimidating.\"\n\n\"How come no one ever told me?\"\n\n\"Oh yeah, let's go up and tell the intimidating guy not to be so intimidating. 'Excuse me Mr. serial killer, turn that frown upside down.' That was bound to end well.\"\n\nI laughed, despite not wanting to.\n\n\"See?\" He beamed. \"Even hotter when he smiles.\"\n\n\"Okay, I get it. Adding smiling to my to-do list.\"\n\n\"Good. It'll help matters. Now, where's your boy toy?\"\n\n\"He's studying in the library.\"\n\n\"And you're in here... WHY?\" He made this crazy arm movement, his face saying the words 'Idiot' in big bold letters.\n\n\"I offered to join him. He said he wouldn't get anything done if I was there. Too distracting.\"\n\n\"Well, he's probably right about that.\"\n\n\"Yeah. To get him back, I may have texted him a less than school appropriate photo.\" I smirked.\n\nLarsen's hand covered his gaping mouth.\n\n\"No way! Let me see!\"\n\n\"What? No!\"\n\n\"Is your dick in it?\"\n\n\"Yes...\" I blushed a little at his bluntness.\n\n\"Well see, I thought it was just a shirtless photo. Nope! This fella went full on dick pic. Congrats my friend. When he kills you with kisses, please do me a favor and send me photo of the aftermath.\"\n\n\"I'll think about it. Let's talk about you.\"\n\n\"Oh? Mr. Scary wants to ask about my life. This is really a fucking Twilight Zone episode.\"\n\n\"Why ain't you out? You seem to not really give a fuck what anyone else thinks.\"\n\n\"Why ain't you?\"\n\n\"Larsen, I'm out in my eyes. The second Richey and I decided we were dating, I stepped out the closet I had no idea I was even in. If someone asks, they're going to hear me tell them. Just don't see a reason to shout it from the rooftops is all.\"\n\n\"Well, there you go. You've got Richey. If I had a man, I'd come out too. In fact, I'd probably go about it the same way. I'm not narcissistic enough to think anyone around here gives two fucks who I want to fuck or have fuck me.\"\n\n\"There's an image.\"\n\n\"A good one I hope.\" He smiled a quasi-flirty smile. \"In fact, you can consider me out. Yeah. You know what, the next time the guys on the basketball team start talking about girls, I'm gonna mention a dude.\"\n\n\"That should be the king of awkward moments.\"\n\n\"Like a fart in church.\"\n\nWe both sighed, suddenly quiet. I thought about how much it annoyed me to think something that only affected me could cause people I'd known for years to change their opinions of me.\n\n\"Your family know?\" I asked.\n\n\"Yeah. They're good. Yours?\"\n\n\"My mother.\"\n\n\"Dad not take it well?\"\n\n\"He lives on the over side of the country. I could stand to give a fuck what he thinks.\"\n\n\"I'm sorry.\"\n\n\"Don't be. He left when I was young. At least we picked a good time to be born. If someone gives us too much shit for who we are, we can at least go to the office with it and not be laughed out the room.\"\n\nHe was quiet. When I looked over at him, he was staring at me.\n\n\"What?\"\n\n\"I just figured if someone messed with you they were going to get their teeth kicked in.\"\n\n\"Again with you thinking I'm some kind of Batman villain. I didn't do shit to earn this rep.\"\n\n\"I'm telling you man, you just shake people up without trying.\"\n\n\"I'm not going to pretend to understand why. It if keeps people from doing something stupid then I guess I'll just have to be cool with it.\"\n\n\"Usually it's tall dark and quiet, not short, lithe, and murky. Way to bust some stereotypes my man.\"\n\n\"You're an idiot. And don't call me short. Everyone's short compared to you.\"\n\n\"I'm just 6'2.\"\n\n\"And I'm not, okay?\"\n\n\"Someone has height issues? Dude, you can't ruin your serial killer fa\u00e7ade with height hang ups. You're fine the way you are. Call it fun sized.\"\n\n\"I will kill you if you say that again.\"\n\n\"There's the serial killer! Keep it up. It's convincing.\" He gave a thumbs up and an exaggerated wink.\n\nI couldn't help chuckling at his idiocy.\n\n\"Tell you what, I'll get over my height when you get over your foolishness.\"\n\n\"So, never?\"\n\n\"That's right.\"\n\n\"I think you just need to see how hot it is.\"\n\n\"What, now short people are hot?\"\n\n\"Number one, you're not that short. Number two, do you have any idea how hot it can be to know you'd fit so good against my chest as I slowly pumped into your tight as from behind, nibbling on your ear while you scream my name?\" He whispered all of this, leaning closer to my ear throughout.\n\nI cleared my throat while slowly pushing him away. My dick had gotten harder than was decent in this public of a place. Simply put, I was busting at the seams.\n\n\"You may have a point.\"\n\n\"Richey is going to have to fight you off in class. You look about ready to cum.\"\n\nMy dick throbbed at his last words.\n\n\"Larsen, for the love of all that's holy, just be quiet for the next five minutes. Give me that at least.\"\n\nHe lounged back in his chair. A smug grin appeared over his face.\n\n\"Short people can be hot, you in particular. We agreed?\"\n\n\"Agreed.\"\n\n\"So I win?\"\n\n\"Fine, I don't care.\"\n\n\"No more body issues then. You're fine the way you are. Richey like's you plenty. Be a dear, tell him I helped with your self-esteem issues. He owes me a candy bar now. The interest will go up every week. At a month, it becomes two candy bars, of my choice. Three months, now that's getting on up there-\"\n\n\"Shut up Lars. I'm seriously regretting sitting alone now. You've made me harder than granite-\"\n\n\"With just words.\"\n\n\"While rambling incessantly. If you weren't cute I'd have stuffed something in your mouth a long time ago.\"\n\n\"I'm pretty sure you're wishing you could stuff something in my mouth anyway.\"\n\nMy dick had been dying down, only to start pumping up again with that.\n\n\"You're not helping!\"\n\n\"In this case, I wasn't trying. This is my new favorite game in fact.\"\n\n\"I'm telling Richey you're an asshole.\"\n\n\"So long as you tell him this story. I know he'll laugh his ass off.\"\n\nHe was right. In whispered conversation, I recounted the entire lunch time to Richey while Mr. Sumner droned on about shit no one cared about. Richey was biting his fist at one point. Luckily, we'd sat in the back corner today, next to the open window. The sound of the grass being mowed covered us.\n\n\"I wish I had been there. God that'd been great. You're so cute when you squirm.\"\n\n\"It wasn't funny. I had to walk the whole way down here with my binder on my dick.\"\n\n\"Larsen is my new favorite.\"\n\n\"Hey!\" I whisper shouted. \"This is the point where you should be getting jealous, not wishing he'd jerked me off.\"\n\nHis eyes locked with mine, holding them a while before speaking.\n\n\"Who are you dating?\"\n\n\"You.\" I answered immediately.\n\n\"Exactly. I trust you. Larsen teasing you makes me laugh, not nervous. He's a good guy. You're a smart guy.\"\n\n\"You saying he's not?\"\n\n\"He is, in his own way.\"\n\n\"That's a polite way of saying no.\"\n\nHe grimaced.\n\n\"He's not going to impress anyone with his SAT's, we all know that. He can see people though, he doesn't hang out with idiots cause he knows how to pick out nice people.\"\n\n\"He thought I was a serial killer.\"\n\n\"I didn't say you were nice.\"\n\n\"Didn't have to. Last night was all the proof I needed.\"\n\n\"Speaking of which, fuck you. I barely got any studying done today, thanks to you.\" He poked my chest.\n\n\"Mr. Kirk and Mr. Doyle. Is there something either of you would like to add to my lecture?\" Mr. Sumner called from the front.\n\n\"No sir.\" We muttered.\n\n\"Good. Let's keep it that way.\" He turned back to the board.\n\nI pulled my phone out, flipping to my latest photo. To be honest, Lars is right in that I've never had what one might term a healthy body image. It just seemed too cocky to take pictures of myself or think that I was anything special to look at. But Richey liked looking at me, I found. Thus, I suddenly had numerous pictures of myself I previously would never had even considered taking. My latest nude shot was of my ass in the mirror of my dresser. I was looking over my shoulder. The head of my dick can be seen, as I was standing a little sideways. Football and the weight room had toned my buns up big style. It was probably the only thing I was remotely proud of.\n\nI held it under the desk, my foot tapping Richey's. He looked to me, then down when I motioned with my eyes. His eyes widened a bit as he stared. It occurred to me that if anyone else had looked, they'd have thought Richey was staring unabashedly at my crotch. This caused me to laugh. Mr. Sumner glared at me, though he didn't say a word. One glare from that man would cause any man to shrink in his seat. Again, he went back to his lesson.\n\n\"You have no idea how much I want you right now.\" Richey whispered.\n\nThe hard, distinct outline going down his pants called to me.\n\n\"I think I may have some. You're showing dear.\"\n\n\"Fuck you...\" He mumbled.\n\n\"We'll get there.\"\n\nHe gulped. A hand tugged at his collar. Desperately, he refocused on the lecture. Not to let him a moment's relaxation, and possibly to show him how I felt with Larsen, I slid my hand over to grip his throbbing cock.\n\n\"What do you- ahh... fuck...\" My hand slowly stroked up and down his length.\n\n\"Pay attention Mr. Kirk. This is an important lesson.\" I whispered.\n\nMy hand continued to slide over him, teasing the head as much as I could. He couldn't have been harder if his dick had been made of steel. Superman couldn't bend this bar.\n\n\"How bad do you want in my ass, huh?\"\n\n\"Oh fuck...\"\n\n\"Do you dream of driving your dick, this dick, my newly acquired play toy in and out of my tight ass as fast and hard as you can?\"\n\n\"Yes... dear god yes...\"\n\nHis dick throbbed now, aching to do the things I whispered. I kept up my teasing throughout the next ten minutes. When the bell rang, I stood up with my binder over my own aching member.\n\n\"Come on Richey, class is over.\" I said as cheerily as I could.\n\nHe looked up me. What a sight he was. Like the victim of a bad fever, sweat matted his blonde hair to his forehead. His breaths came in pants like he'd just ran up a sand dune. A dark spot was clear to me from all the pre cum he'd leaked in his blue jeans. Shakily, he stood up while sliding his messenger bag over the dark spot.\n\n\"I'm not sure if I like you anymore you evil fucker.\" His voice had dropped an octave.\n\n\"You'll get over it.\"\n\nWe walked in silence out to the parking lot. Students were sparse to be seen throughout the hallways. All the ones who rode the bus would get on in the courtyard out front, downstairs. The upstairs hallways had only a few students who stayed for clubs along with some gossiping teachers. The path down to the other side of the school was a long one. The student's primary exit to the parking lot was by the gym, a large set of two glass double doors. I waved to the gym teacher's wife when we passed on the way out. Richey's Dodge followed me without question as we turned out the school's lot. The truck followed still when I took the long way again.\n\n\"You're still having nightmares, ain't ya.\"It was a simple statement. No doubt. A statement.\n\nWe sat on the couch watching television. Our passion from earlier had died down a bit, to the point where I just wanted to relax with him. I must admit, I'd never experienced being held in a romantic sense before, being as I was always the 'man' in the relationship with my exes. The girls wanted to be cuddled and held close to my warmth. I was coming to realize just how nice that was. Fucking hell, why hadn't I done this before?\n\n\"Eeth?\"\n\n\"Yes, I do. They're rarely the same each time anymore, but I still have them. To be honest, I think it's something that's not going to go away.\"\n\n\"Don't say that.\" He squeezed me tighter, pulling my head against his chest.\n\n\"No, listen. I've always been a bit of a history buff. Military history is my thing. I've read books written by men who've seen way worse than what I did. They all say the same thing: it doesn't go away. It might get better, it may become less frequent, but it will always be with you. You don't just forget having a man die in your arms.\"\n\n\"You're talking about this like it's a homework problem.\"\n\n\"It helps me deal with it, if that makes any sense.\" I wrapped my arms around his waist, my head rubbing in a circle on his chest to get comfortable. \"If I try to be as logical as possible, I can be prepared for when things go badly. I don't want to tell myself I'll forget, that these dreams will end just so I can be disappointed when they don't. It's enough for me to know it's not real, that I did what I knew how at the time. I wish it would've gone differently.\"\n\n\"But it didn't. I understand. I do the same thing. When I first started thinking about you, I just allowed myself fantasies. The second it was over, I had nice long talk, man to man with myself about how you were straight.\"\n\n\"So, this wasn't a recent development?\"\n\n\"Heavens no. Use a fucking mirror Ethan, you're hotter than sin. I've wanted you since I knew I liked dick.\"\n\n\"Well... good.\" I mumbled into his shirt.\n\n\"You were worried I was attaching myself to you just cause of what you did for my dad.\"\n\n\"I didn't do anything for your dad.\"\n\n\"Baby,\" He squeezed me some more, his hand petting my head like a puppy. \"Listen to me, for real this time. Don't blow what I'm going to say off as being nice. I mean this. You gave my dad some comfort in what would've otherwise been a lonely, cold death. He had someone to ease him out of this world. I can't explain to you how much that makes me feel better, to know that you were with him.\"\n\nHe took a deep breath. My nose twitched from the air going over it when he exhaled.\n\n\"Does that make me like you more? Yes. In a thankful kinda way. I'm thankful you were there to help him. That wouldn't make me want to fuck you, which I already did.\" He kissed the top of my head. \"Or make me want to hold you like this for as long as the world will let me get away with. You make me want you, regardless if that had ever happened. That whole thing was just the world's most blunt introduction to each other. It made you feel obligated to talk to me, and me obligated to be nice to you.\"\n\n\"You're saying that if that hadn't happened you would never had even tried being friends with me, even if I was nice to you?\"\n\n\"Most likely. As we've discussed, you're scary for a short dude.\" I bit his nipple, the bastard.\n\n\"Ow! That was a little too hard to be a love bite.\"\n\n\"Continue.\"\n\n\"I shall call you nibbles.\"\n\n\"Keep going with your story.\"\n\n\"It was an explanation, not a story.\"\n\n\"Talk!\"\n\n\"Fine. You were my straight guy crush, the one every gay guy has. Rule number one is don't get close to the guy you want but know you can't have. You could've done almost anything short of asking me out and I would've ignored you for my own sanity's sake.\"\n\n\"That makes sense. I mean, I can see where you're coming from. I didn't even know I was gay until we started.\"\n\n\"Are you even sure you're gay? Maybe you're bi?\"\n\n\"I'm sure.\"\n\nSilence hung in the air for a moment.\n\n\"Care to elaborate?\" He asked.\n\n\"I've had girlfriends, correct?\"\n\n\"Right...\"\n\n\"Well, if I wanted I could've fucked any of them. Stacey was practically gagging for it.\"\n\n\"You mentioned that before.\"\n\n\"They never turned me on the way you do. I always thought that when their clothes came off, I'd get what the fuss was about and things would go the way they went. Then I thought, well maybe I just have a low sex drive. Then I thought, maybe I just didn't like anybody.\"\n\n\"Surely you thought about dudes.\"\n\n\"Yeah, but in a comparative way. I never checked a guy's package in the locker room and thought 'god I want to suck that.' Or 'that'd fit nicely in my ass.' It just didn't do anything for me. I would think a guy was handsome or something like that.\"\n\n\"But you didn't want to shove his cock down your throat?\"\n\n\"Exactly. I'm beginning to think it was because my brain can separate when it's professional time and when it's fuck time. I'm not explaining this well, am I?\"",
        "\"You're doing fine. What you're saying, in my mind, is you only get into the action when it's clear that there's action to be had. Like when Lars almost made you come with his sexy voice.\"\n\n\"Shut up!\" I slapped his stomach. He laughed. \"You're on the right track. I can talk to a dude and not feel anything sexual. But I think if my body knows it has a chance with that dude then it suddenly starts to get excited like everyone else does for whoever they find hot.\"\n\n\"So, you're situational horny?\"\n\n\"That's a good term for it, I guess.\"\n\n\"Just one more thing that makes my baby unique.\"\n\n\"More like strange.\"\n\n\"Unique is a nicer word though. Makes you sound distinguished.\"\n\n\"Instead of crazy.\"\n\n\"Pretty much.\"\n\n\"At least now I know my sex drive is fine, it just takes my brain to know a guy is down to fuck to actually get me going.\"\n\n\"What about porn?\"\n\n\"What do you mean?\"\n\n\"By their nature, porn stars are down to fuck. What type of porn did you watch?\"\n\n\"Straight porn. When I look back on it, it makes more sense why I always picked the big dick category, or why I liked videos where I could see the dick more often than not, as opposed to the camera shots where there's nothing but tits flopping around.\"\n\n\"Ha! Like half delated balloons after a party.\"\n\n\"Yeah... I figured I'd check out a gay sight the other night. Turns out, I was just watching the wrong stuff this whole time.\"\n\n\"Came in five minutes, didn't ya?\"\n\n\"Oh yeah.\" I blushed, tucking my face against his chest.\n\nHe reached down to pull my chin up, forcing me to look at him.\n\n\"I kinda like that you shoot quickly. I don't know why.\"\n\n\"Maybe you're an instant gratification type guy.\"\n\nHe smirked, eyes twinkling somewhat.\n\n\"Perhaps, but I think I know what it is.\"\n\n\"Do tell.\"\n\n\"It's the idea that you're so excited to see me that you're ready to shoot at the slightest touch.\"\n\nHis hand slid over my stomach, his finger tracing the line of my dick.\n\n\"Being a hair trigger just means that I get to see your face scrunch up in pleasure that much faster. It means I can fuck you into a second cumming that much easier. Cause while you've already cum once, I'll still be on my first. Who knows? If I can be patient and work you just right, you just may cum while I'm pumping my hot load up your ass.\"\n\n\"Bedroom.\" I barked.\n\nI'd had about all the talking I could take. His had remained firmly planted in mine as I dragged him to my bedroom. We didn't stop to kiss along the way. This had gotten into some darker, more primal territory, without much warning. It reminded me of my teacher telling me how brain cells work. When they fire, it's either all or nothing. The door made a loud click as I locked the handle. He was already taking his shirt off. I took direction from him and did the same. We stared across at one another as we undid our belts and jeans.\n\n\"We actually doing this?\" He asked.\n\nI didn't answer, instead choosing to show him, stepping out of my jeans as I walked towards him. My knees hit the floor. My left hand swept his jeans away so I wouldn't be worried about them. He'd worn boxer briefs like my own this time, the throbbing rod encased inside looking like it was on display. The bright red turned dark at the tip where'd he'd been leaking during class, along with some recent additions.\n\n\"Someone dressing up for me?\"\n\n\"I can't have you thinking I'm not trying.\"\n\n\"No worries about that.\"\n\nSlowly, I pulled his fancy undies down to reveal his perfect prick. The purple head looked almost angry. I held it against the side of my face while looking up at his pleasure filled face.\n\n\"How long are you?\"\n\n\"Little over seven inches. Not that thick though.\"\n\n\"You're perfect.\"\n\nI slid my lips alongside his shaft, my goal being the dripping head. When I met his pre-cum, I couldn't contain the moan from his flavor. There's no need to worry about me being gay Richey. This seals the deal. I could stay here for the rest of my life and never feel robbed. The head touched the back of my throat, to which I swallowed around it. Every ounce of me was determined to deep throat him. I wanted it, needed it. To me, this was showing how much I wanted this man. Enough to pleasure him at my own discomfort.\n\nThough discomfort is hardly a word for it. Yes I gagged a little, yes a few tears came to my eyes with my exertions. That doesn't account for the rightness in my soul to feel him seated in my throat. His moans made me feel on top of the world. To know that this man's pleasure was derived chiefly from me. This was a high I would never get tired of. I owned him at this moment. Determination filled me, wanting desperately to make this so good he never thought of anyone else. Every lick of his head, every swirl of my tongue, every bit of drivel leaked out when he went too deep was a means to achieve this end.\n\nThat, and his cock hitting the back of my throat felt damn good, along with his hands twined through my hair. All the while he screamed.\n\n\"That's it, take my long dick! Who's my cock sucker, huh? Who's my little slut?\"\n\n\"Me, I love your dick Baby, I want you to face fuck me.\"\n\n\"Oh god...\"\n\nHe held the sides of my head, keeping me still. His hips snapped forward, instantly filling my mouth with flesh as his cock pounded the back of my throat. This went on forever before he pulled off. He stared down at me in awe.\n\n\"God, you are so hot right now. Come here.\"\n\nWe kissed like starved men. Angry kisses, loving kisses. Nips, bites, and growls interspersed with slow tongue duels. He managed to spin us around to where my ass faced the bed.\n\n\"Lube?\"\n\n\"Top left drawer.\" I pointed to the dresser.\n\nHe opened it up. A short rumble through my underwear and he came up with the medium sized black bottle. Quickly, he came back over to push me down on the mattress. Roughly, he pulled my hips to the edge and crouched down.\n\n\"This is going to be cold.\"\n\nBefore I could say anything in reply, his mouth descended on my throbbing cock as it pointed straight in the air. He worked me with nothing but his lips and tongue, his hands doing unseen things with that bottle.\n\nJust as he warned, a coldness made me flinch a little when his finger appeared at my untapped entrance. Circling, he didn't penetrate, choosing instead to leave me in anticipation for a while longer.\n\nHis tongue continued to flick around the head of my cock. This was combined with sudden swallows of my entire dick, with him trying just as hard to take me in his throat. To be fair, my challenge had been a little greater.\n\n\"God, you're fucking good at this.\"\n\nAs if he'd been waiting for that, his finger finally slipped in. The pain I'd expected didn't come. Instead, I was just aware that something was in my ass. What's all the hype about I wondered? Then he pulled out and I figured out what was up. The nerves around my hole came alight, tingling like never before. In, then out again with the same result. I LOVED this!\n\nI was moaning something unholy. His finger seemed to curl slightly, like he was telling someone to come hither. Without warning, lightning had struck inside of my ass. Pleasure like never before lit through me with whatever he touched being the conductor of this chaos.\n\n\"Holy fuck! Don't stop, holy shit, don't stop! I love it!\"\n\n\"I see that.\"\n\nI looked down to see him smiling up at me. It occurred to me how I was screaming like a bitch in heat without his mouth even being on my cock anymore.\n\n\"What have you done to me?\" I moaned.\n\n\"Shown you that you're a bottom apparently. I've never known anyone this responsive. You were loving it without me even hitting your g spot. I thought you'd fly off the bed when I did.\"\n\n\"Fuck that's good. Hurry up and get your cock in me. If a finger feels this good, I can't believe what that long dick of yours is gonna be like.\"\n\n\"Patience baby. Here's two.\"\n\nI felt another finger slowly join the first. A dull burn was the only pain I remotely felt. I was so relaxed, he could've done whatever he wanted down there. My cock drooled like a St. Bernard. There was a small ocean of pre-cum on my stomach.\n\nA third finger joined its comrades. I moaned with pleasure. This was seriously one of the crowning points in my life. His fingers formed a triangle, stretching me open.\n\n\"Fuck me, fuck me right now.\"\n\n\"My pleasure baby.\"\n\nHe stood upright, his left hand pulling my hips to him. I wrapped my legs around him while he lined up to home plate. The blunt head of his dick was tantalizingly close to achieving what I wanted so badly. A short burst of pain shot through me when his head popped in. Unable to wait, and wanting to get the bad out of the way first, I pulled him in deeper with my legs.\n\n\"Oh fuck you're tight. Take your time baby, adjust, breathe.... God you're so sexy.\" His hand stroked me back to full hardness after it had died down from the sudden pain.\n\nHis thrusts were short and shallow, only gradually getting deeper. The pain was mostly gone, replaced by pleasure. I could feel every bit he had in as it slid through me. God, if this was what it meant to be a bottom then I'm fine with it. I don't know what he was feeling in his position, nor did I much care to. This felt great, and I couldn't see topping... well topping this. This was great! How come no one ever told me about this?\n\nWhen he bottomed out, he stared down at me, eyes wet.\n\n\"I never dreamed this could actually happen.\"\n\n\"I never dreamed I would find someone who does to me what you do.\"\n\nOur lips met violently. His kissed fueled the fire between us, until I pulled back to whisper.\n\n\"Fuck me like you mean it. Drill my ass. Pump me full of cum. Make me yours.\"\n\n\"God damn...\"\n\nHe pulled all the way out, till nothing but the head was left. Without preamble, he slid home hard, driving an excited yelp from me. His hips snapped back and forth against ass. The sound of flesh on flesh was echoing throughout.\n\n\"Fuck, fuck my tight ass!\"\n\n\"I love this bubble butt! So tight on my cock, so firm as I bounce off it.\"\n\n\"YES! Come on, fuck me harder!\"\n\nHe did. Quick and fierce, his dick drove in and out of me. My ass pulsed around his cock. Every nerve fiber in my ass was on fire with pleasure.\n\n\"You ready for this? You want my cum baby? Tell me how you want me to shoot into you.\"\n\n\"Yes Richey, fill my ass with your cum! Overflow me. Make me taste it baby!\"\n\n\"Oh fuck... you'll get your wish! Here it comes... Oh Fuck Yes!\"\n\nLike someone had turned the hose on, my insides were coated in his warm thick fluids. The thought along with reality of it sent me over the edge. My ass clamped down on him while my cock sprayed between us, neither of us touching it.\n\n\"Holy shit that's hot.\" He said looking down at it spewing.\n\nSlowly, his thrusts eased to a crawl. When he pulled out, I felt empty. I almost felt like I needed him back even though he hadn't left my side. A slow kiss was shared as we reveled in the afterglow.\n\n\"That was better than any dream I'd ever had.\" He whispered.\n\n\"I think I may have died. And I'm cool with that.\"\n\n\"I never would've imagined you being so submissive. I love it!\"\n\n\"You bring it out in me I think. At least you do in the bedroom. You cock felt so good up my ass... why have I never put anything up there before?\"\n\nHe laughed, his rumbling chuckles shaking me.\n\n\"The burdens of the straight lifestyle.\"\n\n\"No more.\"\n\n\"We need a shower.\"\n\n\"Later.\"\n\nWe wound up falling asleep."
    ],
    "authorname": "lessthanperfect",
    "tags": [
        "gay",
        "gay drama",
        "love",
        "gay romance"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/stumbling-ch-06"
}
{
    "title": "A Friend in Need Pt. 02",
    "pages": [
        "Note to editor: This story has HTML tags for italics, bold, and page breaks.\n\nThis part takes place some time after the first, once they've actually gotten into a relationship.\n\nContains: temporary limblessness, bondage, masochism, and gentle dominant/submissive.\n\n<hr>\n\nThe feeling of utter helplessness that being restrained gave her wasn't always a sexual thing. Knowing that your freedom, your safety, even your life was in the hands of another person was an enormous act of trust, and it produced a unique type of intimacy. Of course, she fantasized about Janet doing something to her that she didn't want. The daydream of being used, abused, and taken against her will had brought her to orgasm countless times. But it was just that - a daydream. The reality was so much gentler, and she loved it.\n\n\"Say ahh,\" Janet said, grinning.\n\n\"This is- mmpfh.\" The spoonful of ice cream entered her mouth as soon as it opened, muffling her words. Janet held it there until Emma closed her mouth, sucking up the velvety chocolate as the spoon was pulled away. She wriggled a little on the couch, the harness shifting against her t-shirt and pajama bottoms. As Janet put it, she was in 'torso mode', unable to move beyond squirming and turning her head. \"This is a little undignified.\"\n\n\"Really.\" Janet's grin widened. \"Isn't that the whole point?\"\n\n\"Well, sort of. I just wish you wouldn't make baby bird noises.\" \n\n\"Aww, but you're my cute little birdie.\" Janet gathered another spoonful of ice cream, making little cheeps as she held it in front of Emma. \"Open for mama.\"\n\nShe flushed, turning her head away. \"It's embarrassing. In a bad way.\"\n\n\"There's a good way?\" When Emma didn't respond, Janet softly brushed a hand against her cheek, setting the spoon back in the bowl with a clink. \"Hey. You know I'm just giving you a hard time, right? I've been your friend for too long to give that up.\" Emma turned back to her, meeting those devastatingly gentle brown eyes, and her heart melted.\n\n\"Yeah.\" She wanted to lean forward and kiss her girlfriend, but even that freedom was denied to her. She sank a little deeper into the special kind of submissiveness that being restrained like this gave her, murmuring, \"Can I kiss you?\" \n\n\"Of course.\" Janet leaned in, but paused halfway, a sudden light in her eyes. \"Actually, I want to try something. Close your eyes.\"\n\n\"I know that look. That's the one you get when you have a stupid idea,\" she said, shutting her eyes anyway.\n\n\"Shh.\" Janet's finger pressed against her lips, and she heard the clink of the spoon again. She could feel Janet lean in, hair brushing her face as their lips met in a soft kiss that tasted like ice cream. Janet's tongue sought entry to her mouth, the kiss deepening, and Emma's eyes shot open at the sudden chocolatey flavor, making a muffled noise of surprise. Janet didn't just taste like ice cream, she had it in her mouth. As their lips locked, she transferred the half-melted spoonful to Emma, filling her mouth with sticky sweetness. Janet pulled away, grinning, a strand of saliva stretching between their faces. Emma swallowed, giving Janet a look.\n\n\"So?\"\n\n\"Well... it wasn't bad,\" Emma admitted, a small smile curving her lips. \"Maybe a little messy compared to the spoon.\"\n\n\"All the best things in life are a little messy.\" Janet smirked. \"Like your-\"\n\n\"Don't,\" Emma warned. Janet had made her squirt all over her bed a few days ago and wouldn't stop teasing her about it. \n\nJanet just grinned, leaning back on the couch and putting an arm around her shoulders, cuddling up close. \"What do you want to watch?\"\n\nEmma leaned her head against Janet's chest, snuggling into her warm body as best she could. \"Jurassic Park?\"\n\n\"Which one? There's like five now.\"\n\n\"The first one.\" \n\n\"Going for the classics, alright.\"\n\nJanet navigated through menus, poking at the remote until she found the right film. She used the arm around Emma's shoulders to get a bite of ice cream as it started up, then scooped up another spoonful, holding it out for Emma to eat it herself. They continued like that until the bowl was empty, watching movies and cuddling late into the night.\n\nEmma jerked awake, finding her face buried in the crook of Janet's neck, inhaling her sweet scent while strong arms held her off the ground. \n\n\"Hey, sleepyhead,\" Janet said, her voice low, starting to carry her down the hall. \"Didn't mean to wake you.\" It had taken them a few tries to work out a good method of moving Emma, as she was essentially an eighty-pound deadweight while wearing the harness, but they had eventually decided on a hug-carry as the easiest for short distances. Since she never went further than her backyard while in bondage, that was all that they needed.\n\nEmma looked over Janet's shoulder, confusion fading as she realized what had happened. \"How'd it end?\" she murmured drowsily.\n\n\"Which movie? I didn't realize you fell asleep until you started snoring.\" Janet bumped open the bedroom door with her shoulder and nudged the lightswitch on.\n\nEmma sighed a little, nuzzling into Janet's neck and closing her eyes. \"Never mind. It doesn't matter.\" \n\nJanet laid her down gently on the bed, planting a kiss on her forehead. \"I need to use the bathroom. Shout if you need me.\"\n\n\"Mmm,\" Emma mumbled, already drifting back into sleep. Her dreams were always vivid when she was like this, maybe because the part of her brain that kept her body from moving already had all its work done for it. She dreamt that she was whole again, that she could move, and woke up to find that it was true, Janet having taken off the harness while she slept. She raised her hand, marveling at the ease of it, and cuddled into her girlfriend's chest, slipping back into sleep.\n\n<hr>\n\nOf course, sometimes that feeling of utterly restrained helplessness was sexual. More often than not, in fact. She loved this part too, even when it was a little rougher.\n\nShe trembled with anticipation as she lay on the bed, only wearing the harness and a blindfold. The crop tapped her stomach, making her flinch, but it was no more painful than being flicked. She squirmed a little, unable to predict where the next hit would land, her breath coming faster as another touch left a light sting on her bare breast. More teasing taps landed across her chest, none of them really hurting.\n\n\"You can do it harder than that,\" Emma said, her voice low, turning her head to where she was pretty sure Janet knelt beside her on the bed.\n\nA slightly sharper tap just below her navel made her gasp, but a moment later she felt Janet's arms wrapped around her head, warm breath exhaling against her skin. \"I'm sorry, Em, I don't think I can.\" The blindfold was pulled away, and Emma blinked, her vision adjusting as she met Janet's upset eyes.\n\n\"It's okay, I like it,\" Emma murmured.\n\n\"I know, I know, I just-\" Janet sighed, resting her forehead against Emma's, her voice small. \"I don't want to hurt you. It sounded really hot, but I can't do it.\"\n\n\"Oh, J.\" Emma lifted her head up to meet her girlfriend's lips, lingering in the sweet kiss before Janet pulled away, her eyes apologetic.\n\n\"Sorry. I know you were excited about this.\" She sat back, shifting to be cross-legged, only wearing her panties and a t-shirt. She stroked a hand over Emma's hair, looking irritated with herself.\n\n\"It's okay. This is about you, too. You should enjoy what you're doing to me.\" Emma smiled. \"And honestly, that's really sweet.\" Even if it was frustrating. Her girlfriend was incredibly gentle with her during sex, even when she was being dominant. Emma liked it - loved it, actually - but there was a reason she owned that riding crop, not to mention the half-dozen paddles and floggers in her closet. Pain was one of her bigger kinks, and she had been looking forward this since the moment Janet agreed to it. \n\n\"So...\" Janet trailed her other hand over Emma's stomach, caressing her smooth skin. \"What do you want me to do instead? I'll try to make it up to you.\"\n\nEmma closed her eyes, worrying her bottom lip as she thought. An plan struck her after a few moments, and she looked up to meet Janet's gaze. \"Um... I have an idea, if you're willing to try it.\"\n\n\"Okay.\" Janet looked a little worried. \"What is it?\"\n\n\"I think...\" Emma paused, trying to find the right words to explain herself. \"I think the crop was a bad way to start. You can't really feel what you're doing to me. But, um, if you used your hand...\"\n\nJanet's expression darkened. \"You want me to hit you?\"\n\n\"Well, spank me.\"\n\n\"Oh.\" After a few moments, Janet's face cracked into a grin. \"Like you've been a bad girl?\"\n\nEmma sighed, smiling. \"Yeah. Like I've been a bad girl.\"\n\nJanet's amusement slowly faded, her look growing serious again. \"That does sound better, but I can't promise I'll like it.\"\n\n\"That's fine. Just... give it a try, please?\" She stared up at Janet, who melted under her pleading gaze.\n\n\"Yeah. Okay.\" She absently stroked her thumb over Emma's head, thinking. \"Should you be over my legs?\"\n\n\"That works.\" After another second's deliberation, Janet wrapped her arms around Emma and let out a soft grunt of effort as she heaved her limbless girlfriend over to the edge of the bed, scooting after her and dangling her legs off the side. She pulled Emma over her lap, leaving her face down and her curvy butt raised.\n\n\"Then...\" Janet sighed, pushing a hand through her hair. \"I don't even know how to start.\"\n\n\"Just give me a smack,\" Emma said, slightly muffled against Janet's leg. She wiggled her rear invitingly.\n\nJanet stared down at her beautiful girlfriend, who was begging - literally begging - to be hurt, and couldn't say no. Reluctantly, she raised her hand and brought it down on the soft flesh with a slap. Emma squirmed, a happy noise escaping her. That one had actually stung.\n\n\"Keep going,\" she murmured, and bit her lip as Janet spanked her on the other cheek, not wanting to make too much noise and end up scaring her girlfriend off. A few more slaps followed, starting to bring color to her skin, and Janet paused. \"How is it?\" Emma asked breathily.\n\nJanet snorted softly. \"I can't believe you're the one asking that. It's... better. I can tell how hard I'm hitting. I know I'm not going to do any damage like this. Just- promise you'll stop me if I do anything you don't like.\"\n\n\"I will. Promise.\" Emma kissed her girlfriend's thigh, and squeaked as Janet's hand came down again, sending stinging pain and burning pleasure surging through her body. Her stomach flexed, her arms and legs waving through empty air as she lay there helplessly, taking whatever punishment Janet saw fit.\n\nJanet felt dampness against her leg and peered around Emma's rear to find a trail of arousal leaking down from her swollen lower lips. \"God, you're dripping. You really do like this.\"\n\n\"Mmhmm,\" Emma hummed happily, melting into a submissive puddle on her girlfriend's lap as the spanking continued. \n\nNow that she had visible proof of Emma's enjoyment, Janet became a little rougher. Emma whimpered and gasped under her firm strikes, tears in her eyes as her ass turned red, aching more and more with every smack. She loved every moment of it, arching her backside into the hits, squirming against the pain but continuing to drool arousal on Janet's leg.\n\nAfter a while, Janet shook out her stinging hand and rubbed soothingly over the now-tender skin, her other hand stroking through Emma's hair. She leaned down, kissing between the straps of the harness at her girlfriend's back while her fingers slipped between her abused cheeks, dragging across her slick heat. \"Was that good?\"\n\n\"Yes...\" Emma said breathlessly, her backside on fire.\n\n\"Do you want to come?\" Janet murmured, moving aside Emma's hair to brush her lips against the base of her neck, fingers rubbing gently through her folds, feeling confident now that she was back in familiar territory.\n\n\"Yes,\" Emma pleaded, shivering against the touch. Janet had never denied her and only rarely teased her, but knowing that her girlfriend had complete control over her orgasm always left her soaking wet.\n\nJanet took Emma's shoulders in her hands, turning her to lie face up over her legs. She trailed two fingers down Emma's stomach, leaving a trail of wetness to her slick heat and pushing the digits inside, making Emma gasp as she stretched around them. \"Do you want to come like this...\" Janet curled her fingers against Emma's swollen front wall before pulling them out, dragging them up to rub across the hood of her clit. \"...or like this?\"\n\nEmma moaned, pushing into the touch. She knew both were amazing, but as Janet had discovered, g-spot orgasms could make her squirt. She found it incredibly embarrassing, not to mention messy, so she murmured, \"Clit.\" \n\nJanet slipped her fingers down, pushing inside Emma again. \"This is a lot more... intense,\" she said, a smirk spreading over her lips. \"Are you sure?\"\n\n\"I'm s-\" Her breath hitched as Janet's touch curled against that most sensitive spot. \"Sure.\" Janet continued to move her fingers, and Emma looked up at her, her breath coming fast and shallow. \"J.\"\n\n\"I heard you.\" Janet stroked gently, feeling Emma's inner walls clench down around her fingers as her girlfriend squirmed on her lap. \"I was just asking, though. You don't get to choose.\" She grinned at Emma's expression.\n\n\"J-\"\n\n\"Shh.\" Janet pressed a finger to Emma's lips, her eyes twinkling. \"Unless you want another spanking.\"\n\nEmma stared up at her, surprise in her eyes, torn between nervousness and arousal. Did I awaken something in her...? She's never this dominant. She knew she could use her safeword, but she was unbelievably turned on at the idea of Janet forcing her to squirt, even though it mortified her.\n\nJanet stroked Emma's cheek, continuing to finger her, her girlfriend's warm body tense against her legs. The painful soreness of her rear melded right into the pleasure, and Emma moaned, squirming involuntarily against the hot tension building in her abdomen. Janet leaned down, taking Emma's nipple into her mouth, sucking and gently biting at it as her fingers continued to thrust and curl, forcing her ever closer to orgasm. It didn't take long before the combined stimulation brought her to the edge.\n\n\"J,\" Emma gasped, her back arching a little, feeling like she was about to burst. \"Fuck- please-\"\n\nJanet released her nipple with a wet pop, working her hand faster against Emma's slick heat. \"Go ahead. Come.\"\n\n\"But-\" she almost sobbed, barely holding back, knowing exactly what was going to happen.\n\n\"It's okay,\" Janet murmured, kissing her chest. \"It's okay. You're so beautiful. Show me. Come.\"\n\nEmma arched off her lap, her head thrown back, a wordless, choked cry escaping her. A spurt of clear fluid covered Janet's hand in hot juices, and she moved to rubbing at Emma's clit, drawing out her orgasm and making another jet spray over the bed as she clenched, her stomach spasming. She fell back against Janet's legs after a few moments, breathing hard, her eyes squeezed shut and her cheeks flushed with shameful pleasure. Janet reached under Emma's arms and heaved her upright, hugging her close.\n\n\"You okay?\" she asked, her voice low and concerned.\n\n\"Yeah,\" Emma mumbled into her ear.\n\n\"You're beautiful.\" Janet kissed her neck. \"I know I tease you, but it's really fucking sexy when you do that for me. Don't be embarrassed about it.\" She pulled Emma back a little, meeting her girlfriend's lips with her own. She broke away from the sweet warmth after a moment, the corners of her mouth curving up. \"I'll wash the covers.\"\n\nEmma smiled in spite of herself, opening her eyes to meet Janet's gentle gaze. \"...thanks. That was... super hot.\" She shivered with submissive pleasure. \"It's still really embarrassing, but... in a good way.\"\n\n\"I'm glad.\" Janet leaned in, giving her another soft kiss. \"Are you up for more?\"\n\n\"Yeah.\" Emma leaned her head forward against Janet's shoulder. \"Just... give me a second.\"\n\n<hr>\n\nI'm not sure when Part 3 will be published, but it'll happen eventually. All comments and criticisms are appreciated."
    ],
    "authorname": "macktosh",
    "tags": [
        "bdsm",
        "bondage",
        "lesbian",
        "lesbian d/s",
        "lesbian romance",
        "limbless",
        "magic",
        "spanking",
        "squirting"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/a-friend-in-need-pt-02"
}
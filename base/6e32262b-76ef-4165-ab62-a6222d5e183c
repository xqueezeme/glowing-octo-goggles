{
    "title": "Satisfying Samantha Ch. 03",
    "pages": [
        "The next day arrived very quickly...a sign that I slept soundly for sure. My eyes fluttered, adjusting to the amount of light pouring into the bedroom where Sammy and I had drifted to sleep. \n\nI looked over and there she was, sleeping sound as an angel. Her dark brown hair was elegantly pulled away from her, giving a glorious view of her face and neck. She was sleeping on her side, one arm under her head and the other draped over her exposed breasts. The weight of Sammy's cradling arm confined her wonderful blossoming tits. Her golden brown skin popped in stark contrast to the linen sheets, giving visual pleasure to my wandering eyes. Her form was perfect. I admired the smooth flowing hills and valleys formed by her statuesque body. The top sheet lightly covered her waist like a coveted work of art. I followed the curve of her waist over her hips and down her thighs. With lust I, carefully removed the sheet to view her precisely trimmed bush. As the sheet uncovered and caressed her body with my gentle tugs, Sammy murmured in reply, speaking sleep-state gibberish. The sheet flowed over her shapely hip and I stopped it just below her knee. Her short cut bush was artistically shaped in a tight V-pattern, pointing downwards between her legs. I stared at its beauty for quite some time, noticing that her dark hair, eye brows and pussy hair were the three visual items of the greatest contrast (and interest) along her bronze skin pallet. She was absolutely stunning.\n\nI still found it difficult to believe that Sammy and I had shared two incredibly sexually charged nights together. I was looking forward with great anticipation to what a day with her would be like. My dick began to swell at the thought of taking her again...this time during the day when her body would be seen even more and every move could be visually documented with ease.\n\nTaking a finger, I slid it into her cleavage. Sammy shivered in response and rolled over onto her back, her arm releasing the hold on her breasts. Each of her glands parted and moved naturally to her sides. Her nipples were chocolate brown and erect (presumably by the cool air). I couldn't contain myself any longer and I began caressing her globes, enjoying the Jell-O-like firmness and consistency of her breasts.\n\nSammy took a deep breath and politely yawned, covering her mouth.\n\n\"Oh, good morning gorgeous,\" I whispered, kneading her breast with my hand.\n\n\"Hi,\" she quietly giggled, smiling sheepishly.\n\nWithout warning, my stomach growled loudly. We both looked at one another and let out an unbridled laugh. \n\n\"Well, someone's hungry this morning,\" Sammy noted.\n\n\"Yeah, hungry for you,\" I blushed.\n\nSitting up, Sammy then offered, \"Well, before I make breakfast, how about I serve you an appetizer?\"\n\n\"Sounds delicious,\" I answered, watching Sammy coolly sliding down my torso, her hands massaging my chest as she moved.\n\nHer head reached my center and she proceeded to lick my lower abdomen, while stroking my semi-soft prick with one hand. After quite a few hand jerks, my cock was awakened and ready to party.\n\n\"You sure give a woman something nice to wake up to,\" Sammy grinned, looking up at me, her emerald green eyes beginning to sparkle brightly with lust.\n\n\"And you give great head,\" I replied, concentrating on my breathing as Sammy continued to work her magic.\n\nMy dick was a full mast now, pointing straight up to the ceiling. She noticed her opportunity and grabbed my pole at the base and surrounded my hard member with her silky wet mouth. Her slippery warm housing opened wide, allowing me to put my entire length inside. Sammy next went to action, sucking my shaft up and down, pausing every once in a while to lick my head.\n\n\"Oh, that feels good, Sammy!\" I choked, trying unsuccessfully to retain my excited state. Within moments I felt close to the edge. I desperately tried to switch focus to avert my impending ejaculation. \n\n\"Quick,\" I thought, \"Think of something different.\" My mind raced, focusing back on Sammy. \"Oh God, this is not good,\" I reasoned. \"Mark's wife's mouth is on my cock...that's it! Mark!\" Thoughts of her husband; my boss made me quite ill. But thinking about this fact did the trick as my narrow climax subsided. I took a few breaths and eased my worry.\n\nI looked down and watched as Sammy's pert lips stretched over my elongated rod, leaving a trail of glistening wetness with each upward lift of her mouth. Her eyes were closed, enjoying the feel of my dick in her mouth as she made slight sighs with her nasal breathing. Parting her hair with my hands and holding it away from her face, gave me unrestrained view of her action.\n\nShe looked up at me and smiled greedily as she continued bobbing up and down on me, watching me for my reaction. I felt my brow furrow as her oral action brought me to a heightened state of awareness. Sammy's licks were furious now, as if she were trying to lick a quickly melting ice cream cone, not letting any of it drip.\n\nSammy paused, my cock spilling out of her tightened mouth. \n\n\"You like me going down on you, honey?\" she asked shyly. \n\n\"Oh yeah,\" I replied, \"You're getting me pretty worked up,\" I added.\n\n\"Good. I can't wait to taste your cum.\"\n\nImmediately, Sammy returned to her task, slurping my dick, squeezing my member tightly between her tongue and the roof of her mouth. Her mouth dripped like sieve, rivulets of her saliva ran down my cock and collected at its base.\n\nFaster now, her head pressed up and down, engulfing me in pleasure, my nerves conveyed every soft, wet pass of her oral caresses. She stopped, let me fall out of her mouth, grabbed my cock and slapped it against her tongue.\n\n\"Oh, wow, Sam!...goddamn it!\"\n\n\"Mmmm\" Sammy replied, forcing it into her mouth again, swirling her tongue around the tip of my penis. \n\nSammy then, put the base of my shaft in one hand and my ball sack in the other. Her head bobbed even faster now as she jerked up and down my pole, while softly squeezing my balls. I couldn't help but pump my hips back at her hungry mouth, my cock fully inserted into her hot throat.\n\nI couldn't handle it anymore and immediately my cock lunged, spewing deep into her mouth as she sucked ravenously at my thrashing member. \n\n\"Oh yes, yes, yes, yeah, yeah!\" I screamed out in pleasure.\n\nSammy continued to suck, swallowing eagerly each spurt that followed.\n\n\"You taste good, just like I thought,\" Sammy recoiled, her mouth still accepting more sperm.\n\n\"God, you give great head, Sam.\" I breathed, my head falling back to the pillow behind me.\n\nSammy continued to suck until my cock subsided in size. Her final suck cleaned my shaft of just about all of its sloppiness. \n\nMy eyelids grew very heavy instantly as I breathed deeply. All I saw was darkness and I heard Sammy announce that she would return with breakfast.\n\nI must have been out for quite some time. I woke up feeling dazed and confused, but oddly aware of my surroundings.\n\n\"Michael, wake-up sleepy head,\" Sammy whispered, \"breakfast is served.\"\n\nI opened my eyes to see Sammy dressed in a while cotton bath robe, carrying a basket of all kinds of great looking food. There were two plates, stacked with metal heat covers and a plethora of fruits, muffins and a carafe of fresh coffee.\n\nShe put the basket down on the edge of the bed and proceeded to organize our feast. Lifting up on the covered plate was a Belgian waffle with strawberries, pineapple, whipped cream, and syrup. The muffins smelled as if they had just been removed from the oven\u2014blueberry. Oranges and bananas completed the canvas, along with two small glasses of orange juice. \n\n\"I don't believe this. Where am I?\" I marveled.\n\n\"Viola!\" Sammy beamed.\n\n\"Wow, this looks incredible, Sammy. Thank you.\"\n\n\"You're welcome, but don't thank me until you've tried it.\"\n\n\"How long was I out?\"\n\n\"Oh, about an hour.\"\n\n\"Really, wow.\"\n\n\"Yeah, but I figured I would get you up for this.\"\n\n\"Do you do this kind of stuff for Mark too?\"\n\nSilence filled the air and Sammy looked away from me in shame.\n\n\"I'm sorry...I didn't mean that.\"\n\n\"It's okay.\"\n\nI felt like a complete ass.\n\n\"Sam, I'm very sorry...I really didn't mean it that way.\"\n\n\"its okay, please don't' worry about it.\"\n\nI tried to break the ice by trying the waffles as she noted. Taking a bite, the quality was equal to that of America's finest breakfast buffets. \n\n\"Sammy, this is amazing.\"\n\n\"Really?\"\n\n\"Absolutely. Here, taste,\" I said, offering her the next piece.\n\nSammy gratefully accepted, leaning down to take the bite of food from my fork.\n\n\"Mmmm, that is good,\" she smiled.\n\nPouring a cup of coffee, Sammy remarked, \"It's just that Mark and I never do it anymore. It's not that we don't love each other...there's no spark anymore. He's so busy with that damn company of his. I guess I'm just very lonely.\"\n\nI respected Sammy for her sudden trust and openness, not knowing if I could return the same vulnerability to her or anyone else at this point of my life.\n\n\"Sam, we don't have to talk about this, if you don't want,\" wiping a single tear from her welling eyes.\n\n\"Okay, thanks. Thanks for listening too.\"\n\n\"Of course, baby, anytime.\"\n\n\"You're sweet.\"\n\n\"I do have to ask you one last thing about Mark though.\"\n\n\"What's that?\"\n\n\"Does he fuck as well as I do?\"\n\n\"No way, not in a million years!\" Sammy laughed, a wide smile returning to her face.\n\n\"That's good to hear. What do you say we get cleaned up and take another roll around?\"\n\n\"I'll race you to the shower!\" Sammy giggled, standing up, untying her robe.\n\nShe opened her robe, revealing her toned figure and my eyes could not help but take another walk all over her.\n\n\"My God, you are so beautiful,\" I remarked.\n\n\"Oh, stop it!\" Sammy shied away, allowing the robe to slip off of her shoulders and fall to the floor.\n\n\"No, really.\"\n\n\"Come on, let's get wet!\" Sammy announced and skipped into the adjacent bath. I immediately followed her, anxious to see her in the shower. When I caught up with her, she had already started the water and was stepping in. The shower door was clear glass: A voyeur's dream, come true.\n\n\"Sammy,\" I said, \"I have to admit that taking a shower with a beautiful woman has been my fantasy for quite some time.\"\n\n\"What? You've never showered with anyone before?\"\n\n\"Not with anyone as hot as you.\"\n\n\"Will you shut up and get in here!\" Sammy snickered.\n\nThe water falling over Sammy's chiseled body looked amazing. Water beaded on her bare back, only to be washed quickly away as her hair doused became slick and flattened to her head and neck. The sheets of water delectably encased her figure, creating a shiny silver glow to her tanned figure. I watched her dance under the water seductively for a moment and then quickly entered the stall with her. I pressed myself up behind her, reaching under her arms and began massaging her tits. Under the water, her breast felt like firm globes of rubber. The water allowed my hands to move easily over her globes as I circled her nipples, bringing increased attention to them. They swelled in response.\n\n\"Nice,\" Sammy breathed, her head snapping back to meet my shoulder in response.\n\n\"Allow me.\"\n\nI grabbed the shower gel and body scrub, poured some out and began to clean her, lathering her up with each massaging contact. Soap began to cover her completely, as I maneuvered around her shoulders, down her back and up over her stomach. Watching the white soap stream off her body gave me increased excitement as the lather clung and oozed with ease over her. My cock sprang to life and I pushed it up against her ass crack, working it back to increased stiffness.\n\n\"Ooh,\" Sammy responded, turning to face me, \"I like the feel of that.\"\n\nWe kissed passionately as Sammy returned the favor by grabbing the body scrub from me and soaping me up as well. \n\nWe washed our hair and as Sammy rinsed, I pulled her hair back over her shoulder and began kissing her neck and shoulders, rubbing her breasts; circling her hardening nipples with my thumbs. My cock was rather stiff again, as I easily rubbed it in between her ass cheeks--her cleft easily making way for my hardening member's sliding probes.\n\nSammy again turned to me, silently squatted down and took my dick in her hands and placed it again in her mouth. The showering water brought a new visual sense to her beauty and seductive actions, as I watched with delight, the water soaking her dark hair, making it look jet black. Her mouth easily glided over my cock, her familiar tongue lapping hungrily against my shaft. \n\nAs her head again bobbed up and down on my elongated member, she looked up at me with her soothing bright green eyes, watching me watching her. As Sammy kept her balance on her feet, sitting on her calves, I watched in interest as she brought a finger around her backside and shoved it up her ass. As her finger worked in and out of her, she began to moan and sigh as her delicate head plunged onto and off of my throbbing rod.\n\n\"Oh yeah, baby,\" I sighed, \"that feels so good.\"\n\nMy response only encouraged her to suck harder and move her mouth faster over my swollen dick. I held onto the sides of her head, stroking my cock deep into her wet mouth. Without warning, cold water began to pour over us, as the hot water ran out, forcing us to cut the action short. As the cool temperature brought me down a few levels, I reached over quickly and turned the water off, as Sammy stood up and pulled her body close to me. My flailing penis, searching desperately for a suitable home, was greeted perfectly by her limber crotch. Sammy's toned legs took hold of it and held it fast between her warm thighs, as I pressed my pelvis into hers, my dick nestling perfectly in between her loins.\n\n\"Let's dry off a bit and continue where we left off,\" Sammy whispered coyly, motioning over to the bedroom where we began.\n\nI watched Sammy dry herself off with a pale yellow towel, focusing on her head, her wet hair tossed around erotically. As I toweled myself, she brought her towel across her breasts, causing them to bounce in synchronicity of her jostling. Across her back the towel moved, eliminating the water beads that had formed on her supple skin. When the towel was placed between her legs, she rubbed it across her mound, alternating from her front to her backside, I felt myself losing control.\n\nI stepped up behind her and announced, \"I wish I could be that towel.\"\n\nSammy paused, looked over her shoulder and cocked an eyebrow, \"You like that, honey?\"\n\n\"Oh yes, very much.\"\n\nGrabbing her hips, she leaned over and dropped the towel. Her exposed ass beckoned me. Sammy's dark cleft looked so tasty in the shadow of the bath. The scent of spring rain replaced her earlier scent of heavy musk with her new cleansed body. I found myself wanting to take her yet again. I grabbed the back of her thighs and she immediately threw herself back at me. My shoulder caught her fall and I lifted her up towards my waist. Her natural weight cantilevered itself against my chest as she went into a sitting position, the back of her head now resting squarely on my shoulder. As I walked her out of the bathroom, she kissed me passionately with her open mouth. Our tongues met and wrapped around one another's with gentle intertwines. \n\nI continued carrying her, my hands now gripping her ass, as we made our way back to the bed. I laid her down and rolled her onto her stomach. Crawling up behind her, she watched me carefully out of the side of her eye, gleaming as my presence loomed over her. Planting myself on top of her, I rubbed my eager cock back into the sensuous divide of her tight buns and groped her inner thigh. Putting my full weight on her, humping her ass cleft, I breathed on the back of her neck, pulling her damp hair away to expose her slenderness.\n\nAs I kissed her up and down her neck, she began to breathe with anticipation again. Struggling to move under me, she wrestled unsuccessfully. \n\n\"What's the matter, babe?\"\n\n\"I want to face you and watch you fuck me,\" she hissed.\n\n\"Okay, soon,\" I agreed, my cock straightening to full mast again.\n\nPulling back from her, I gazed in awe at her slim figure, her ass protruding back at me, calling me to pay perfect attention. I answered the call without question. I continued moving down her legs and told her not to move as I placed my knees onto the carpeted floor. I grabbed Sammy's hips and slid her closer to me and commanded her to spread her legs. Obediently, her legs parted, exposing her familiar but equally wonderful slit, surrounded by minutes of her dark wisps of hair.\n\n\"God, I love looking at you like this...Your ass is incredible.\"\n\n\"I'm glad, baby.\"\n\n\"I'm going to eat you like crazy!\" I growled.\n\n\"Oooh,\" Sammy purred, watching me with a turned head, her eyes fluttering slowly with passionate want.\n\nImmediately after making my courageous announcement, my face went down into her folds, seeking to meet her pussy with revitalized focus. Stabbing at her folds with my tongue, I watched as pelvis moved in time with my oral probes. Sammy's back arched upwards as I licked over her mound and up into her curvaceous ass. As I continued lapping her like an overly affectionate dog, her breathing became erratic and her legs began to quiver.\n\n\"Oh yeah...Michael, lick my pussy...lick it raw!\" \n\nHer remark put my detail into extreme intent as I forced my face closer to her divides, slurping strongly on her openings, wetting quickly before me.\n\nSammy's cries became primal and her arms reached behind her, grabbing my hair as I resumed plowing my mouth around her tight labia. When Sammy's voice began to sound rasp, I forcefully took hold of her hips and pulled them up. Her knees followed suite until she was in the perfect prone position, her face planted on the bed's surface, her ass high in the air, supported by her slender thighs. Her back was arched completely now, giving me a superior view and unrestrained access to her center. I took hold of her ass cheeks and spread them apart, staring at her tight brown eye and dripping vaginal opening.\n\nSammy helped by bringing her hands around behind her and pulling her tight globes apart for me as I returned to my project, wanting nothing less than to please her like never before. \n\n\"God, you look so fucking tight,\" I remarked, lowering my face back into her depths.\n\nSammy's gorgeous anatomy bucked back at my face as I met her sopped organ again and again. As she continued to spread her ass cheeks, I reached around and tweaked her nipples and felt the firmness of her tits jostle elegantly in my groping hands. \n\n\"Oh, God, I love that!\" Sammy cried.\n\nI went about my business, licking her taint up and down. Taking my focus off of her wet pussy to rim her asshole every now and then, she responded in audible shrieks as I worked her confines up and down.\n\nWhen I placed two fingers into her streaming snatch, her senses seemed to be lost as she straightened up, grabbed my wrist and rode herself up and down on my outstretched fingers. She had moved to her back now, squatting over me, her arms and legs supporting her, as her pelvis hovered over the mattress in front of me.\n\n\"Put another finger in me!\" Sammy pleaded.\n\nWithout hesitating, I placed my ring finger inside of her; joining the other two already entrenched. Her deep guttural call out was enough for me to know of its effectiveness as I watched her straddling my hand. As she continued to pleasure herself on my digits, I took my free hand and repeated my caressing motion on her violently juggling tits. Her heaving was incredibly primal now, her body listing from side to side, catching my fingers with each motion. I heard the stickiness of my fingers on her labia as she stroked recklessly on my cramping hand.\n\n\"Hold it...right there!\" Sammy shouted, \"I'm going to cum!\"\n\nSammy's raspy voice only made me force my numb hand mercilessly back in and out of her with each of her continued impaling bounces. ",
        "\"Oh yes, oh, yes...yes!\" Sammy called.\n\nI moved my free hand from her rack up to her face where she grabbed a hold of it and sucked greedily on it, holding my fingers in her hot mouth. Breathing through her nose now, I could only hear muffled dry whimpering as she proceeded to grind.\n\nSammy quickly shuddered in a blistering orgasm, thrashing wildly against me. Stream upon stream of hot pussy juice soaked my hand as she removed her mouth from my fingers. \"Fuck, fuck, fuck, fuck!\" she screamed, her pelvis blurred in speed as she milked my fingers with her grinding pulsations. \n\nShe looked back at me with complete satisfaction, her lips quivering in pleasure, \"No one's been able to make me squirt like you.\"\n\n\"Really?\"\n\nSammy just shook her head in response, too out of breath to say anything. Laying down and rolling onto her back, she looked at me with submissive content. \n\n\"And to think that was just my fingers,\" I mentioned.\n\n\"And your magnificent tongue,\" Sammy sighed.\n\n\"Okay, that too.\"\n\n\"Do you want to go at me now?\" Sammy panted.\n\n\"In the worst way, baby!\"\n\n\"Take me,\" Sammy replied, spreading her legs pulling her stretching her swollen labia open to receive me.\n\nIt took me no more than 2 seconds that I was on top of Sammy, my erect cock throbbing over her cum-wet hole. Sammy guided my prick towards her lips and I pushed violently into her, my dick slipped right out and pushed against her stomach. \n\n\"Slippery sucker,\" Sammy cooed, taking hold of my member once more. She scooted herself closer to me now, pushing my stiffness down toward her folds. I pushed back towards her again, making contact; my cock rocketed inside of her, filling her tight box. Initiating my drive path, I watched delightfully as my enlarged penis pushed against her lips, parting them smoothly with each thrust. Her pussy was so wet that I easily glided in and out of her without resistance.\n\n\"Jesus, you're wet!\" I exclaimed, trying to keep my cock in her. My momentum was building now as my pelvic pushes increased in force. \n\n\"Your cock feels so good inside of me, Michael.\"\n\n\"Yeah.\"\n\n\"I love your dick inside me, baby.\"\n\n\"Fuck!\"\n\nSammy's pussy walls pressed against me, clenching with my every move.\n\n\"Goddamn, you're tight.\"\n\n\"I'm glad you like being inside me,\" Sammy sighed.\n\nMy pelvis slammed against hers, creating a soft slapping noise. The stickiness of her cum and wet pussy juices made slurping sounds as I continued to rock inside of her.\n\n\"Do you want me like this?\" Sammy unexpectedly asked.\n\n\"I'll take you any way you want,\" I barked, my impending climax coming.\n\n\"Good,\" Sammy smiled, pushing me off of her.\n\n\"Which way to you want it, babe?\"\n\n\"I want to be on top,\" Sammy commanded.\n\n\"Sure,\" I choked.\n\nLying down, Sammy crawled over me and swung a leg out, her pussy waiting to receive me, just above my outstretched cock. Carefully, she guided herself down, holding her outer lip open to the side, while I held my dick pointed towards her as her body lowered down. Her vagina swallowed my penis in one fast motion as she rotated her hips against my aching hardness.\n\n\"My God, you're so big,\" Sammy smiled, \"I'll never grow tired of riding you.\"\n\n\"Fuck yeah,\" I breathed, watching her slit expand and contract as she moved up and down my shaft.\n\nPicking up speed now, Sammy leaned back and placed her hands against my thighs, supporting herself with her arms. I pushed up against her as she pulled away, accelerating her sultry motions. As she rode me up and down, her hips pulsed and rocked towards me and then from side to side. My cock slipped against her ribbed walls. Waves of pleasure washed over me as she engulfed my stiff rod. I began to pound deep into her as Sammy carried on, provocatively impaling herself.\n\nAs Sammy continued to glide over me, her tits bounced with enviable motion, sending me reeling as I watched. \n\n\"You like my tits bouncing for you?\" Sammy noted.\n\n\"More than anything,\" I heaved.\n\nHer tits flailed now, swaying side to side, up and down, as her crotch thundered against my pelvis. Sammy leaned forward and held onto my chest, while I grabbed her tight ass and began to hammer back into her with building speed and pressure.\n\n\"Ouch, ouch...ooh!\" Sammy yelped.\n\nI stopped moving and asked, \"What's the matter?\"\n\n\"Sorry, my pussy's real sore, honey...probably from last night and today.\"\n\n\"What if you turn around?\" I offered.\n\n\"Staying on top?\"\n\n\"Yeah, you can stay on top.\"\n\n\"Okay,\" she agreed and spun around on me. She moved her legs over and around me so that she would be able to kneel and rested on her calves.\n\nHer ass looked incredible as usual and I made mention, \"I love looking at your tight ass, baby.\" \n\n\"I'm glad you're into it.\"\n\n\"So am I.\"\n\nSammy began to slowly stroke me again, up and down her slender body bounced, her ass cheeks flopping open to receive my cock with each downward push. Sammy was getting wet again, as I felt her pussy juices drip down my hardened member. She paused to almost allow my mushroom cap to fall out of her, her pussy lips closing against him, before slamming herself down again on me, enveloping my entire length deep inside her. She continued this motion a few more times before stopping abruptly again.\n\n\"What's the matter? I'm so fucking close!\"\n\n\"Good,\" she hissed, \"I have to have you in my ass again. My pussy's too sore.\"\n\n\"With pleasure!\" I barked.\n\nSammy lifted off of me and hovered over me, as I reached for the lube on the nightstand. Like a heroin addict, I couldn't seem to get the cap off fast enough, insatiable for my \"Sammy Ass Fix.\" Finally I got the damn thing open and squirted a generous amount onto my hands. Quickly working it along and around my cock, I announced, \"It's ready.\"\n\nSammy lowered her hind end down again and I pressed the head of my cock against her tight backdoor. Met with resistance, she pulled back and pulled her ass open with her fingers. \n\n\"Try again,\" Sammy whispered.\n\nHolding my cock tightly by its base, Sammy pushed against me again and I managed to get it in somewhat.\n\n\"Does it hurt?\" I asked.\n\n\"No.\"\n\n\"Do you want me to loosen you up like before?\"\n\n\"No. Just get that fucker in me!\" Sammy hissed.\n\nHer ass lowered towards me again as I pressed up against her. My cock, slippery with lube, arched its way into her tight opening and got stuck. \n\n\"Push down, Sam!\" \n\n\"I'm trying.\"\n\n\"Like this...\" I grabbed hold of her hips and pulled roughly and pushed my dick back up to her simultaneously. My cock wavered and then popped into her puckered hole with tight resistance. \n\n\"Ooh, that feels nice,\" Sammy sneered, her face screwed, her brow furrowed.\n\n\"Does it hurt?\"\n\n\"A little, but it feels so good at the same time,\" Sammy howled.\n\n\"Your tight little ass is so perfect!\" I called, beginning to stroke in and out of her willing backside.\n\n\"Fuck me like last night,\" Sammy roared.\n\nShe began to slowly ride up and down on my cock. Pulling it with her retractions and eagerly swallowing it with her downward strokes. I was in heaven, watching my cock disappear deep inside her narrow ass passage, Sammy's ass globes stretching and forming tightly around me.\n\nA few more strokes and I found myself on the edge again. Although I loved watching Sam ride me like she was expertly doing, I wanted to fuck her from behind again, desperately.\n\n\"Stop a minute,\" I begged.\n\n\"What's wrong, baby?\" Sammy looked at me, this time with concern for me.\n\n\"I want to nail you from behind, if that's okay.\"\n\n\"Oooh. You certainly know how to get me off!\" Sammy remarked. \n\nShe quietly pulled herself off of my dick. My hard rod fell out of her confines easily with sincere disappointment. I could feel my balls retracting, knowing full well that my threshold was incredibly close.\n\nSammy pounced onto the bed, raising her lovely ass high into the air and spread her legs a bit. She looked at me from the corner of her eye and cocked her head to glare lustfully at me once more. Her brilliant green eyes, reflected brightly with the light streaming into the room, as well as with her own inner desires. \n\nShe gritted her teeth and sneered, \"Come and get it, big boy,\" as she swayed her hips from side to side, pushing her shapely tight ass out towards me. Her bung hole was stretched open and her dark hole gaped widely as she knelt before me, coaching me to invade her most willing ass. \n\n\"I'm ready,\" Sammy bellowed, \"Are you ready to take me?\"\n\n\"Absolutely,\" I replied, stroking my cock, keeping my hard-on stiff.\n\nPlanting myself immediately behind her, I grabbed her legs and pushed them together stating, \"I want to fuck you as tightly as possible.\" I then took hold of my hard prick and pressed against one of her cheeks, slapping it lightly against her supple flesh. \n\n\"Oooh,\" Sammy sighed, \"Get that bad boy in my ass now!'\n\nGrasping my cock at its base, I pushed it against her gaping sphincter and pushed hard into her loins. The lube on my dick was thick and slippery, sending my cock away from its intended target. My dick pushed up against the cleft of her crack. My next attempt was too low as it moved below her anus and slipped into the void of her legs.\n\n\"Stop teasing me and get it in there!\" Sammy snorted.\n\n\"I'm trying; bitch...the goddamn thing is too slippery.\"\n\n\"Here, let me help,\" Sammy choked, grabbing the base of my cock, pulling it towards her tight backdoor. The mushroom poked against her ring and she pushed back. My cock reacted delightfully as I heaved it towards her. Slipping against her outer ring, my dick effortlessly found its way inside as I pushed my entire length up into her welcoming asshole. \n\n\"Oh, that's it, baby. I can feel him deep inside me.\"\n\nI looked down and marveled at the tightness of her ass surrounding my elongated shaft. \n\n\"Fucking incredible. Your ass is absolutely incredible.\"\n\n\"Fuck me like you mean it, you bastard!\"\n\nI watched silently as my meat plowed deep inside of Sammy's butt hole, disappearing and then quickly reappearing with each stroke. The flesh of her tight asshole was brilliant to see as it stretched with tight resistance to accept my thrusts. Her ass gripped like a tight-fitting glove as I picked up my pace, the lube working perfectly to allow the tight squeeze to allow some grease for my motion. \n\n\"I can't get over how tight your ass is, baby!\"\n\n\"Fuck me...fuck my ass!\" Sammy snarled the pain and pleasure of my ass drills becoming apparently clear.\n\n\"I can't wait to cum!\"\n\n\"Ride me, baby...ride me hard!\"\n\nI plunged in and out of her pipeline, grabbing a death grip onto her hips, slapping my balls against her pussy lips with each deep thrust. My pace quickened further as I pulled roughly on her hair, bringing her head back to me. Her eyes made contact with mine and she growled like an animal. \n\n\"Can I cum inside your ass, baby?\"\n\n\"Yes,\" she hissed, bucking her ass back at me.\n\nI continued pumping her ass, slamming into her tight cavern, enjoying every detail of riding her tail. \n\n\"I love getting my ass fucked by you!\" Sammy cried out.\n\nPushing her buttocks together gave me even more resistance, as I loved getting such a tight fit inside of her. \n\n\"Goddamn, you're so tight!\" I yelled.\n\nSammy squeezed her ass muscles together firmly and my balls retracted. \n\n\"Cum inside my tightness,\" Sammy hollered. \n\nI continued thundering deep into her wishing I could pump her ass non-stop for many more hours. \n\nThe moment had come: my dick recoiled and spurted deep into her bowels, relenting to her tight form fitted hold. Pushing my cock balls deep into her brown box, I relished as spasm after spasm unloaded an untold amount of hot cum into her swallowing hole.\n\n\"Fuck yeah!\" I screamed with passion, \"Fuck yeah...oh, fuck, oh God...oh fuck...oh God...fuck!\"\n\nI pulled my throbbing purple member out of Sammy's tightness and rolled immediately onto my back as my orgasm continued. My cock twitched and glistened gratefully from the fest of cum just enjoyed. \n\nSammy was breathless. I savored the silence and felt my own heart beat pound fiercely within my chest. Sammy recoiled, seductively crawled her way over me and collapsed onto my recovering body. I held her and pulled her ass, inching her way towards me. Kissing the top of her head, Sammy wrapped her arms around my sweaty heaving chest and kissed my nipple. \n\n\"That was fucking amazing.\"\n\n\"You were fucking amazing,\" Sammy whispered.\n\n\"I'm still in shock that you like it in the ass so much.\"\n\n\"And I'm still in shock that you like drilling me there so much,\" Sammy smiled, looking up to meet my gaze.\n\n\"Let's do it again before you kick me out of here,\" I laughed.\n\n\"Yes, let's,\" Sammy smiled greedily."
    ],
    "authorname": "grafexguy",
    "tags": [
        "brown hair",
        "wet hair",
        "reverse cow girl",
        "doggy style",
        "anal",
        "breakfast in bed",
        "daytime bed",
        "oral",
        "shower",
        "tight ass"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/satisfying-samantha-ch-03"
}
{
    "title": "Alex's Gifts Ch. 21",
    "pages": [
        "Fresh Starts\n\n\"Morning, sleepy head,\" Alex heard as he yawned and stretched, waking in an unfamiliar bed next to a very familiar face. He stretched his cheeks into a broad smile as memories from the previous night came flooding back. He held out his arms and let his sister fall into his embrace. Her long blonde hair cascaded down, tickling his face as she pressed her lips against his.\n\n\"Pew, go brush your teeth,\" Lily said, pulling back with a wrinkled nose.\n\n\"Sorry,\" Alex said sheepishly. \"What time is it?\" he asked as she rose and sat on the edge of her bed.\n\n\"Half past seven,\" Lily replied after looking down at her alarm clock.\n\n\"I'll be right back,\" Alex said, sliding down the bed and rolling off onto his feet. In the bathroom, he relieved himself and quickly brushed his teeth. Splashing water on his face, he smiled through his hands into the mirror, intensely happy about how his relationship with Lily had progressed. She was finally healing, and he had come clean about the past couple weeks. An intense satisfaction gripped him.\n\nReturning to Lily's room, Alex stood in the doorway and watched his sister stand in front of a mirror. She was smiling at her reflection, much as he'd just done. Alex took the opportunity to appreciate her incredible figure. His eyes were drawn immediately to her narrow waist and full round hips and thighs. She stood just shy of six feet, with long lean and perfectly proportioned legs. Gazing up, Alex admired her proud chest, sweeping out in long gravity-defying arches. She was a supermodel with the anatomy of a grown-up barbie doll; her body perfect in every sense of the word.\n\nLily turned and saw Alex gaping in her doorway. \"How long have you been standing there?\" she said with a smile.\n\n\"Just a little while,\" he replied and stepped inside, closing the door behind him.\n\n\"I'm so happy,\" Lily said, folding her arms around Alex.\n\n\"I can tell. You're so beautiful, Lil,\" he said breathlessly as he leaned in and locked onto her pink pouty lips. He ran his hands across her curved back, traveling down to her hips and over her round cheeks. Lily did the same, reaching up and under his shirt to feel his taut muscular frame. She melted in his arms while long-lost feelings of contentment and security came rushing back as Alex wrapped her in a comforting blanket of strong, stable masculinity.\n\n\"Will you make love to me before you go?\" Lily asked softly, using a phrase she hadn't spoken in nearly two years. The moments together with her father were always brief. He was constantly juggling other commitments and she knew that Alex was much the same: destined to leave her and uncertain when he'd return. She'd gradually learned to accept it, but that didn't make the times in between any easier.\n\nAlex heard the words and reacted immediately, sliding his hands up from Lily's waist and under her velvet camisole. She lifted her arms and Alex pulled the plush garment over her head, revealing her flawless breasts. He immediately sought their warmth, nuzzling into her deep cleavage and kissing her soft skin. Lily cooed as he took one of her thick protruding nipples in his mouth. He'd longed to suckle them since the day he first beheld her nakedness from inside Carrie's closet. \n\nAlex caressed and kneaded her pert pillowy flesh, alternating attention between the twin pink gumdrops. They were easily the most magnificent pair he'd ever handled. Certainly not the largest, nor even the softest, but by far the most perfectly shaped and deliciously capped. Her nipples stood thick and proud and in their stiffened state drew her dark pink areolas into small circles that narrowly ringed their jutting apexes. Alex lost himself in her tender skin, unable to stop pouring his adoration into his sister's precious body.\n\nAfter several minutes, Lily had her fill of Alex's focused attention and held his head in her hands, gently lifting his lips up to meet hers. She pulled up on his shirt hem and he quickly flipped it over his shoulders onto the floor and rushed back into her arms. An explosion of warmth greeted the siblings as their topless bodies pressed together. Alex pressed his chest against hers, feeling her two pointed tips slide across his sensitive skin as he initiated a passionate kiss, twisting his tongue around hers and probing into her warmth.\n\nLily broke off with a deep shuddering breath and Alex dropped slowly to his knees, kissing his way through her creamy valley and tracing his tongue across her soft downy stomach. He slid his hands around her narrow waist, over her flared hips, and grasped the waistband of her velvet shorts. As he lowered to the carpet he pulled her last piece of clothing down, revealing the treasure hidden beneath; two narrow hills, split by a delicate pink crest and surrounded with flecks of strawberry-blonde stubble. He nuzzled against her dome, feeling soft prickles against his skin, and dropped his mouth into her perfect pussy while inhaling her intoxicating scent. Extending his tongue, he licked softly into the shallow crease between her legs and curled his tongue up and around her tender pink button.\n\nLily moaned and stepped her feet apart, giving Alex the access he so desperately wanted. His tongue slid deep into her softness, probing through her thin lips and seeking the wet center hidden within. Lily whimpered when she felt him enter her and trembled as his face pressed forcefully into her nerve center. She held his head in her hands, tousling his hair and curling her fingers, scraping his scalp with her nails and coaxing him deeper.\n\nAfter several minutes of lapping at Lily's swelling sex, Alex rose and dropped his boxers. He knelt and threw a long arm behind and under the steep curve at the top of her thighs, pressing her torso tight into his shoulder. He stood, lifting his sister, and took her to bed.\n\n\"Oh God Alex,\" Lily said, squirming in surprise under his strong grip. Her father had done similar things, seeming to enjoy tossing her naked body around and watching her squeal in pleasure as if engaging in an act of erotic roughhousing. Lily wrapped her longs legs around her brother and held his shoulders tight as she felt him lean her back over the bed. The second her head and hips hit the pillow she cried out, feeling him press against her hungering entry. He drove into her instantly, filling her with perfect completeness as he'd done the night before. An explosion of bliss rocked through her body, bright blue eyes opened wide in shock as the surprising waves of pleasure coursed through her. Never before had she been so wholly caught off guard.\n\nAlex groaned as he slid into Lily's tight rippled chasm and felt the shock of her hasty release. Sensing no signs of final satisfaction, he continued to rock his hips, sliding his length in and out of her taut rippling grip, gradually increasing his pace. Lily moaned and shook beneath him, wrapping him with her legs and pulling her hips up to meet him in perfect synchronous motions, matching his increasing tempo as if it was second nature. Alex marveled at the experience, his sister so precisely in tune with his body, and his so acutely aware of her. It was beyond anything he'd felt in his numerous recent experiences. They fit together so perfectly it was as if there could be no possible conclusion except to end like this: connected, gasping, thrusting, and loving each other in ways that wouldn't be possible with anyone else.\n\nA momentous rush of swelling energy filled Alex and within seconds the dam burst and he cried out in release, timed precisely with Lily. Her eyes were clamped shut and her mouth was twisted in a grimace of overwhelming surrender as she felt Alex erupt inside her. She groaned and panted, holding her brother tight against her chest as he fell from his climax, seizing and gushing into her womb. It was everything she'd hoped after last night and her heart leaped with joy as Alex calmed and nestled into her side.\n\n\"That was...\" Alex started, but trailed off, not knowing words that would do the act justice.\n\n\"I know,\" Lily sighed, running her fingers through his soft hair. \"I love you, Alex.\" She'd found the words for him. \n\n\"I love you too, Lil.\" He stayed wrapped around her radiant body for several more minutes before saying, \"I don't want to leave you.\"\n\n\"Come back to me tonight?\" Lily asked, knowing their moment had to end.\n\nAlex simply replied, \"Yes,\" and with a heavy sigh lifted up and slid off Lily's bed. He dressed in silence and turned back, not wanting to leave his gorgeous naked sister laying alone in bed. He sat next to her and held her cheek in his hand while the siblings exchanged loving smiles. Tears welled in Lily's eyes and Alex felt the happiness become too much for her to keep inside. He leaned down and kissed her tenderly.\n\nOnce again unable to find the right words, he stood silently and gave her one final look of adoration before leaving the room.\n\nA hand shot out of Casey's room as Alex walked by, grasping his wrist tightly and pulling him through the door. For the second time in as many minutes, he found himself wrapped in the arms of a beautiful naked sister.\n\n\"You did it?!\"\n\nAlex nodded. \"Thin walls?\"\n\n\"Yes,\" Casey giggled. \"She wasn't as loud as she can be with Carrie though.\"\n\n\"Casey! You shouldn't be spying on your sister,\" he admonished.\n\n\"I can't help it! You want me to wear earplugs to bed?\" Alex shook his head and smiled, then leaned down and kissed his little sister softly as she stared up at him with her big brown eyes. She spun him around and started walking towards her bed, pushing him back until his legs could go no farther and he sat down.\n\n\"Tell me everything,\" Casey said as she straddled his thighs, sat on his lap, and reached her small warm hands into his boxers, sliding one under and one over his soft package.\n\nAlex smiled at her assertiveness. Megan was rubbing off on her, he thought, while she rubbed on him, quickly coaxing him back to life between her practiced hands.\n\n\"She woke up on the couch crying and I comforted her. She asked me to stay with her last night.\" He groaned as she increased her motions, focusing on his tender tip while cupping the wrinkled purse between his thighs.\n\n\"We talked and she told me what was wrong. She misses Dad a lot. I fell asleep and when I woke up we were having sex,\" Alex said as his breath quickened and Casey's warm hands caressed his arousal.\n\n\"She's better now. She needed me to help her start healing, I guess,\" Alex added, not wanting to delve too deeply into Lily's private relationship with their father.\n\n\"Wow,\" Casey said. \"Sounded like you made her feel better this morning, too,\" she added with a smirk.\n\nAlex nodded, \"Yes, we just made love. It was...special.\"\n\n\"As special as this?\" Casey said, propping herself up and sitting down on Alex's stiff erection.\n\n\"Oh god, Case,\" he groaned. \"I'll never compare the two of you, it's not even fair to ask me that.\"\n\n\"I know. I was just teasing,\" she said as she flexed her hips and bounced in Alex's lap.\n\nAlex took off his shirt and wrapped his arms around his naked sister as she continued to glide him in and out of her tight wet channel. Mewling and panting in his ear, working herself to a state of extreme excitement that must have begun when she heard him with Lily in the room next door. \n\nAlex kissed Casey's neck and ran his hands down her taut back, cupping her firm ass. He spread his broad hands over her creamy skin, digging into her cleft, and helped lift her off of his throbbing shaft between each plunge. Moments later, Casey threw back her head and groaned, legs fluttering while an intense orgasm washed through her. Alex pulled her down tight and clenched. He felt himself flood into her and moaned in blissful release as he held her narrow shuddering frame tight against his chest.\n\nCasey leaned back and looked at him with glassy eyes. \"I'm so happy.\" She whimpered as he continued to twitch deep inside her.\n\n\"That's what Lily just told me,\" Alex said with a smile and gasped as she squeezed his shaft in response to his final convulsing burst. \"You're getting good at that!\"\n\nCasey giggled and hugged Alex, whispering into his ear, \"We have our big sister back, don't we?\"\n\n\"Yes, we do.\" Alex pulled Casey in tight and the siblings rejoiced in mutual relief.\n\n\"Does that mean I can sleep in your room tonight?\" she asked softly.\n\n\"You can, but I won't be there. I promised Lily, she needs me. But I told her about us, we don't need to sneak around anymore. At least not until mom gets home.\"\n\n\"Oh Alex, thank you. That's all I care about.\" Casey kissed him tenderly to demonstrate her appreciation. \"Be with Lily, it's okay with me. It will always be okay. I'll take you when I have the chance.\"\n\n\"Apparently you can just grab me and pull me into your room and have your way with me whenever you want,\" Alex said with a grin.\n\n\"I just might keep doing that,\" Casey said with a wink, finally standing and pulling a pair of panties on. They were blue and white striped, cut narrow in the back, and displayed the cute little creases at the bottom of her pert round cheeks.\n\n\"I like those,\" Alex said, nodding in approval.\n\n\"Oh yeah? Some nice boy bought them for me. I think I like them too,\" Casey said with a smirk, wiggling her hips while looking over her shoulder, causing her two little creases to blink at him. Alex reached out and playfully smacked the bare half of her butt. She yelped, jumping away in feigned shock.\n\n\"Meanie!\" Casey sneered, dramatically rubbing her backside. \n\n\"Sorry sis, I have to get going,\" Alex said, standing and pulling on his shirt. \"I'll see you after work?\"\n\n\"I'll be here for dinner,\" Casey said, dropping the act.\n\n\"Ok, I might be a little late. I have to go to Ben's and fix things.\"\n\n\"I meant to ask you about that. I talked to Megan last night and she said it was sorted out. Is that not true?\" Casey asked with raised eyebrows.\n\n\"It's true. I still have to patch things up with Ben, but I think we got over the rough part yesterday.\"\n\n\"I'm so glad that's over. I bet Megan was, too.\" \n\nThe implication was clear and Alex chuckled. \"Yes, she was.\" He intended to let Megan share their new videography plans, should she wish. Alex didn't feel the need to drag his sister into those escapades.\n\n\"I think I'll invite her over tonight. Try not to tire her out too much this afternoon,\" Casey said with a grin.\n\nAlex shrugged. \"Like I have any say in it!\"\n\nCasey laughed. \"Fair enough. Good luck at the Y today. I'll say 'hi' to Jenny for you.\"\n\n\"Thanks.\" Alex kissed his thoughtful sister goodbye and then proceeded into his office. Casey's mention of Jenny reminded him he needed to make reservations for their cabin trip next week. He logged into his laptop and quickly filled out the forms and payment information necessary to hold the spot and received a confirmation email moments later. \n\nReaching for his phone, he sent Jenny a quick text, \"We're on for next week, Wednesday to Friday, just me and you!\"\n\nShe replied almost immediately, \"So excited! Have fun this weekend, I'll see you Monday?\"\n\n\"I'll give you a call when we get back,\" he responded, unsure whether he'd have the time.\n\n\"Talk to you then!\" Jenny replied. Even over text, her enthusiasm was contagious.\n\nAlex's phone buzzed in his hand as he was setting it down. It was from Carrie. \"Good work, little man!\"\n\n\"She's back.\" Was his only response. Carrie sent one follow-up, a long string of emoticons obviously meant to express her happiness and gratitude, followed by the words, \"See you tonight!\"\n\nAlex smiled and flipped through his other notifications, finding an email from Natalie. Rushing to his office he pulled up to his workstation and read what she'd sent in response to the task he'd given her the day before. She was absolutely correct in both her conclusion and the method she used to solve the problem he'd presented. He also noted her email was sent at nearly two in the morning. The poor girl was going to be a wreck today. Not that he'd fare much better. Running short on time, he left his office without responding, figuring he'd see her shortly, regardless. He quickly got himself ready for the day, gathering the gear he'd need to spend the day at the pool and trying his best not to become distracted by the intensity of the morning's events.\n\nDownstairs, Alex fixed a simple breakfast and was soon joined by his two lovely sisters who beamed at him in unison. The sight filled him with happiness once again and he couldn't help but stare back at them with infatuated eyes. Finishing his meal, he stood and kissed Casey goodbye, then held Lily close and reached out with his lips. The two remained locked together for a half minute until Casey whistled. Lily threw her a scowl and Alex chuckled.\n\n\"Now girls, be nice. I'll see you both tonight,\" he said, throwing his pack over his shoulder and heading for the garage door.\n\n\"Bye Alex,\" said Casey. \"I'll be good,\" she added in a solemn tone.\n\n\"Bye Alex,\" Lily said softly, still recovering from her brother's overt attention in front of their younger sister.\n\nAlex waved and shut the door, hoping they would talk and come to an understanding. He didn't want to cause friction between his sisters and knew that living under the same roof while trapped in a drama-filled love triangle would only lead to disaster. He tucked those worries away and cherished the victories of the day. It was a problem for another time.\n\nHopping in his jeep, Alex made the short drive to the YMCA and went inside. He walked directly to the classroom, arriving with five minutes to spare.\n\n\"Late night?\" he asked the mop of curly chestnut hair that was hunched over a desk resting on two folded arms.\n\nNatalie lifted her head and nodded. \"Get my email?\" she asked.\n\n\"I did; you're hired.\" Alex grinned.\n\nNatalie nodded again and yawned before saying, \"Good. That wasn't a very hard test.\"\n\n\"No, it wasn't. But I got paid three thousand dollars for solving it,\" Alex stated.\n\nNatalie's eyes went wide. \"Holy shit.\"\n\n\"I need you to come over to my place again so we can get you set up with a laptop and credentialed for access to my servers. Does Monday afternoon work for you?\"\n\n\"Yes, I can do that.\"\n\n\"Great. And I'll send you a contract. How's fifty percent sound? Then seventy-five once you're working solo.\" Alex was being generous, his cut would just pay expenses and taxes. He didn't need the money, he only wanted to keep his clients happy and motivate Natalie to take a load off his shoulders. \n\n\"Amazing!\" Natalie beamed at him with her beautiful brown eyes. Alex marveled at her looks, the mix of Japanese and Brazilian ancestry had created a truly remarkable creature.\n\n\"You have to do me one favor, though. No working until two in the morning. It's not healthy and you will make too many mistakes,\" Alex insisted.\n\n\"I know. It's a bad habit from school. I didn't get home until late and I didn't want you to think I wasn't excited about the opportunity,\" Natalie confessed.\n\n\"Hot date?\" Alex asked, already knowing the answer.\n\nNatalie blushed. \"Faith and I were out late. We had a lot of fun.\" She wasn't one to kiss and tell, Alex could respect that. But the thought of those two together was enough to fuel more than one fantasy. Quashing his out of control libido, Alex simply smiled and nodded.\n\nEmily entered moments later. Assuming her customary position in front of the classroom she introduced the day's topics. \"Morning Alex, Natalie. Today we're going to focus primarily on first aid and CPR. You need to have certifications in both to become a lifeguard, and we'll expect you to pass assessments tomorrow based what you learn today. So pay attention. If you fail, you will not be able to work here at the YMCA.\"\n\nAlex noticed Emily look down at him and frown slightly. Her gaze shifted to his desk and then back up at him. He forgot his water bottle. Alex shrugged discretely and Emily continued. He wasn't in the mood for her perverse games today. If she wanted to fool around, that was fine, but it would be on his terms for a change. He had to test Max's warnings from the day before and see if she truly was capable of keeping their trysts and professional relationship separate.",
        "Emily spent the next three hours lecturing on the common types of medical emergencies they could expect to encounter poolside. The obvious was covered first, how to handle blood and illnesses, what to do in case of exposure, and how to handle breathing problems, especially related to drowning victims. She moved on to more serious issues, such as cardiac emergencies, head, neck and spinal injuries, broken bones, poisoning and even emergency childbirth. She ended the lecture with a crash course in basic CPR and first aid. She demonstrated various techniques on a plastic dummy and had both Natalie and Alex follow her examples multiple times until they had it down.\n\nThroughout the long lecture, Alex noticed Natalie's head bob several times as she struggled to stay awake. More than once he reached out when Emily's back was turned and shook her shoulder. She smiled at him thankfully the first time but became progressively more agitated the next couple times. The last time he touched her, Alex intended to give her a jolt of energy to wake her up for good. A shock sprang from his finger and Natalie yelped, looking at him with wide questioning eyes. Emily turned her gaze their way but quickly returned to her lesson plan.\n\nWhatever he'd done worked. Natalie didn't doze off after that and seemed reinvigorated once the lecture ended and lunch break began.\n\nAs Emily packed up her materials, she said, \"See you at one o'clock by the pool. We have a full afternoon ahead of us, please do not be late.\" Alex and Natalie nodded. \"Alex, could I see you in my office, please?\"\n\n\"Be there in two minutes,\" he replied as Emily left the room.\n\n\"What did you do to me?\" Natalie asked emphatically once their boss had left.\n\n\"You were falling asleep. I didn't want you to get in trouble.\"\n\n\"I know that. You didn't answer my question,\" she said impatiently.\n\n\"I don't know what I did, I guess it was static electricity or something,\" he said, knowing more than he was willing to divulge, but also unable to fully explain it himself.\n\nNatalie shook her head. She felt like she'd just drank five cups of coffee. \"I'm pretty sure I could go for a five-mile run and still have energy leftover to haul your sorry butt out of the pool all afternoon,\" she said with an impetuous laugh.\n\nInteresting, Alex thought. He'd have to talk to Carrie about the new ability he'd discovered. He idly wondered if he could do the opposite and put someone to sleep by touch alone.\n\n\"Hellooo, anybody home?\" Natalie asked, energetically waving a hand in his face. \"You got called to the principal's office, better not be late.\"\n\nAlex sighed. \"Thanks. I had a long night, too.\"\n\nNatalie reached out and touched his arm, mimicking the move he'd performed on her. Nothing happened. She shrugged, \"I guess you're the one with the magic touch.\" Then she blushed.\n\n\"Now you know that's true, Nat,\" he said with a toothy grin. Enjoying watching her squirm.\n\nShe huffed and stood. \"I'm going to lunch with Faith. Want me to get you something?\"\n\n\"Yes, that would be great. I forgot to pack a lunch today.\" He handed her ten dollars from his wallet and said, \"Sandwich, salad, I'm not picky.\" Natalie nodded and skipped out of the classroom.\n\nAlex followed close behind, turning down the hall to Emily's office. Her door was open and she was seated at her desk behind a computer monitor, dressed in her customary red YMCA tracksuit. She looked up and said, \"Shut the door, please; and lock it.\" Alex did as instructed and she continued, \"Were you not thirsty this morning?\"\n\n\"Nope,\" he said curtly.\n\n\"That's too bad. I was rather looking forward to another of our sessions before lunch.\"\n\nAlex just shrugged. Wanting to test how she would behave if he rejected her advances.\n\n\"So be it. You may go if you wish,\" Emily said flatly.\n\nAlex could tell she wasn't happy with him; and that she was letting her displeasure cloud her judgment. Max was right. \n\nIt was time to see if he'd keep his job. \"Don't do that,\" Alex said, raising his voice slightly.\n\n\"I'm sorry?\" Emily asked in an incredulous tone.\n\n\"You said you would keep what we did separate and that's obviously not the case,\" Alex continued, speaking assertively. \"I'm not happy about that.\"\n\nEmily gaped, obviously unused to having a subordinate speaking to her that way. \"You are mistaken.\"\n\nAlex shook his head and interrupted before she could continue. \"No, I'm afraid I'm not. You were just thinking about how you were going to find a way to make me do what you wanted anyway. I don't play that kind of game, Emily. You might be twice my age, but I'm not a fool.\"\n\nEmily's jaw dropped. He was right. She was already scheming a trap for him once the day's training was over.\n\nAlex continued in a commanding voice, \"We can try this again and proceed as you originally said, or I can walk out this door. Your choice.\"\n\nEmily sat and stared at the startling young man. She'd been called out. Something not even Max had ever tried to do. Alex was different; she should have known that after their first rendezvous in the shower.\n\n\"I'm sorry, Alex. Please sit down. I'm clearly used to having my way with my colleagues...\"\n\n\"I'm not your colleague; I'm your employee,\" Alex interrupted again in frustration, refusing to be seated.\n\n\"Yes, alright. I understand the distinction. I apologize for behaving this way and you are correct about my intentions. Max never put up much of a fight.\"\n\n\"And that's partly why he's leaving you,\" Alex said, getting in his punches while he could.\n\nEmily frowned and sighed. \"I know. I guess I assumed you would respond the same as him. Tell me what you want.\"\n\n\"I want to stay working here.\" Alex didn't offer more, knowing his simple answer wasn't what Emily wanted to hear; but he'd already made himself clear enough.\n\n\"And?\"\n\n\"And what?\" Alex spat, forcing her to say it.\n\n\"What about me? Didn't you like what we did together? I did...\" Emily trailed off and sighed heavily, looking down at her desk, unable to meet his piercing eyes.\n\n\"I already told you what I want.\"\n\n\"To start over?\" she asked hopefully.\n\nNow the air was clear. She wanted him, and he didn't need her. Alex held all the cards. \"Except you keep your word. If you can't do that then I'm done with this, with us; and if you tell me you can and then don't, I'm really done. I don't need this job badly enough to put up with being exploited.\"\n\n\"I will try. I promise; and I will be more honest with you,\" Emily stated, obviously fighting some greater inner turmoil.\n\n\"Good,\" said Alex, nodding his head.\n\n\"So...so...you still want me?\" She stammered softly.\n\nAnd there it was, he thought. Beneath that sharp exterior, wrapped tightly in perverse sexual appetites, lay a damaged and insecure girl. He sighed and walked behind her desk chair and placed both hands on her shoulders, massaging her gently. With the added effect of touch, his gift easily confirmed the assessment to be true. She was deeply troubled and had years of practice hiding it behind a perverted polyester tracksuit of armor.\n\nAlex pulled her straight blond hair over one shoulder and leaned down, placing his lips in the crook of her neck and kissing up to her ear, nuzzling into her sharp jaw. Emily let out a moan and Alex felt her relax in relief. Reaching around her front, he located the zipper to her top and pulled it down, helping her shrug off the light jacket. \n\nEmily's mountainous breasts spilled free, wrapped tightly in a spandex swimsuit. Alex was pleased and immediately ran his hands down her chest and held her supple mounds firmly in his palms. He massaged her, squeezing and rolling the soft flesh, then reached through the gap under her armpits and slid his hands inside her suit. Finding her nipples, he pinched and rolled them between his thumb and index finger, listening to Emily groan and gasp at his expert touch. He cupped her bare breasts and pulled her up, standing straight and urging her to her feet.\n\nOnce Emily stood in front of him, he kicked her office chair out from between them and reached down to unfasten her billowy pants. They slid easily over her mature curvy thighs and she stepped out of them, spreading her feet to shoulder-width. Alex slid a hand down her back, through her spandex-encased crevice and held her heat in the palm of his hand. Emily whined as his fingers pressed into the fleshy folds between her legs. Locating her swelling bud, Alex forced his middle finger against it and ground forcefully into her pelvis. Using his other hand he pressed her shoulder forward until she was leaning over her desk with her face on her keyboard.\n\nContinuing to fondle Emily through her swimsuit, he stepped behind and undid his pants, pulling his layers down to his thigh and grasping his stiffening cock. With several quick strokes, he was ready and pulled her red swimsuit to the side. Emily reached between her legs and held the stretchy suit as Alex slid two fingers into her creases and spread her lips wide, using his other hand to guide his tip to her gaping entrance. He pushed against her, feeling some dry resistance at first. Emily licked the fingers from her other hand and spread moisture on his tip, just enough to allow him to enter and begin moving through her ridged tunnel.\n\nAlex soon found himself capable of diving fully into her depths as her natural juices spread through her channel. With hands on either hip, he shoved into her and a slap rang out. Each thrust pushed her desk across the waxed tile floor one half of a screeching inch at a time. Emily's own grunts and howls matched in time and a cacophony of high-pitched noises reverberated around the small concrete room: slap, screech, wail...slap, screech, wail. Alex sped up, quickly reaching his fastest tempo.\n\nEmily groaned powerfully into her keyboard and her hips shuddered. Alex leaned over and pressed his full weight against her, driving her against the wooden desk, causing it to squeal piercingly in protest. With a single grunt, he spilled his seed into her, spasming and convulsing in time with her own contractions. He marveled at her muscle control as she continued rippling the walls of her pussy, suckling at his girth long after his spurting cock came to rest inside her. Emily kept him hard intentionally, hoping for more, but Alex was finished and let himself soften slightly before tumbling out of her. Her knees wobbled and he drug the rolling chair back under her just in time.\n\nAlex pulled up his pants and returned to the front of her desk. \"I'm going to have lunch. I'll see you at the pool in half an hour.\" He'd meant it to be a symbolic gesture; on one side of her desk he was her employee and on the other, her lover. He hoped the point was made but didn't hold his breath, suspecting Emily would still be trouble. She was speechless as Alex walked from her office and shut the door behind him.\n\nBack in the classroom, Alex greeted Natalie and Faith.\n\n\"Good timing,\" Faith said, handing him a warm wrapped package. \"Hot Italian, hope that works.\"\n\n\"Sounds great. Thanks for taking care of me, I totally spaced this morning,\" Alex said appreciatively.\n\n\"Any time.\" Natalie nodded and smiled at Alex.\n\nThe three ate together in relative silence until Faith spoke up. \"How long have you two known each other?\"\n\n\"Two weeks?\" Alex said, unsure. Natalie nodded with a mouth full of sub sandwich. Alex continued, filling in the blanks for Faith, \"Natalie is my sister's friend, but we didn't meet until her birthday party just recently.\"\n\n\"I see. I would have assumed longer,\" Faith said, smirking at Natalie who's olive complexion began to darken.\n\nFaith turned to Alex. \"So, what's your deal? Natalie told me what you do and about that business you started. What are you doing here?\"\n\n\"You mean since I don't need the money?\" Alex asked, getting to her point for her. Faith nodded, clearly not shy about getting to know him.\n\n\"I just wanted a change of pace. My little sister found out about the job, she knows someone who works in the daycare. I've been swimming for years and really enjoy it, so I figured what the hell. It sounded like something I'd be good at it, and it would get me out of the house. Plus I could meet some new people,\" Alex said. \"What about you? I know literally nothing about you, Faith.\"\n\n\"Kinda the same story as yours. I went to school to be a psychiatrist. Loved that part, hated actually talking to people all day about their problems. I still wanted to help people and I landed this job one summer, part-time like you guys, and just kept doing it. I have some other odd jobs on the side, but I really like this work. You can actually make an immediate difference that's...\" she faded off, not knowing the word.\n\n\"Tangible?\" Alex asked.\n\n\"Exactly.\" Faith nodded, happy that Alex was following. \"With psychiatry, you never knew if what you were saying was actually helping. So much is up to the other person and how they respond. Positive results are rarely obvious.\"\n\n\"I can see that,\" Alex said. \"I think it's very noble; you wanting to help people. That's become more my mindset lately as well,\" Alex said, finding it very easy to talk to Faith.\n\n\"Mind if I ask what changed? Call it professional curiosity.\"\n\n\"I've helped a few people lately and found it incredibly rewarding,\" Alex stated. Or rather understated, by a mile.\n\n\"Like me?\" Natalie asked.\n\n\"Yep. Although you were an easy one, Nat. Like I said before, helping you helps me, our deal is far from one-sided.\"\n\n\"It almost never is,\" Faith said from experience.\n\n\"Fair enough,\" Alex said and nodded, impressed by her insight. \"I think I'm going to enjoy working with you two,\" he added with a smile. It wasn't often he could sit down for a little heart to heart with two beautiful women and keep his wits about him.\n\n\"Feeling's mutual, my boy,\" Faith said, giving him a broad smile. \n\nThe trio finished their meal in silence and cleaned up. They headed to the locker room and changed with a few minutes to spare before they were due at the pool. Alex stepped into the unisex shower with the two girls who were standing side by side in matching red one-piece suits. Faith's was cut impossibly high on her hips, she stood easily over six feet tall, nearing Alex's height. Her long coltish legs were remarkable, and her suit did everything possible to show them off.\n\nFaith caught Alex looking at her, and turned to give him a view of her shapely backside. The attention was a welcome addition to her humdrum day and she didn't mind returning some Alex's way.\n\n\"Settle a bet for us. Who looks better from the waist down?\" Faith teased under Alex's gaze. She moved to stand next to Natalie and turned, playfully bumping the curly-haired brunette with her hip.\n\n\"Seriously, Faith? Those guys were such douchebags,\" Natalie said over her shoulder.\n\n\"You're just jealous because I won.\" Seeing Alex's confused expression, Faith explained: \"Two college boys were hitting on us last night and had a bet going for whose ass was better.\"\n\nAlex chuckled. \"Sorry, Faith. Natalie wins that one. But if I had to choose everything from the waist down, I'd pick those long legs of yours.\"\n\n\"Smart answer,\" Faith said approvingly and reached around to squeeze Natalie's big bronze backside. \n\nNatalie squealed. \"Faith!\"\n\n\"She's a little shy. At least until you get her alone,\" Alex said with a wink.\n\n\"Alex!\" Natalie squawked.\n\n\"Oh, I learned that last night.\" Faith returned his wink. \n\nAlex barked out a laugh while Natalie huffed and blurted, \"You two are impossible!\" Then walked out of the shower shaking her head.\n\nLaughing together, Faith and Alex shut off the water and followed Natalie outside. \"I see what you mean,\" Faith whispered in his ear as they stared at Natalie's flawless Brazilian backside.\n\n\"Don't sell yourself short, this is nothing to be ashamed of,\" Alex said quietly, reaching out a hand and patting Faith's shapely butt over her tight swimsuit.\n\nFaith grinned. \"Come find me when you guys get done and we'll have some more fun with her,\" she said, nodding toward the sexy brunette.\n\nAlex blinked at her overt offer but simply said \"Alright,\" and then added, \"You're not training with us?\"\n\n\"Nope, it's Max's turn. See ya in a bit,\" Faith said, excusing herself.\n\nFor the next three hours, Max and Emily drove the two trainees to the brink of exhaustion. The jolt of energy that Alex gave Natalie continued to have an obvious effect as she flew through the remaining lessons on water rescues. They gained experience using a backboard and floating rescue board to assist removal of injured swimmers from the pool. Then they practiced hold escapes, which Natalie especially enjoyed. It was a mixture of self-defense and rescue where Max roleplayed a violent victim, then the other person had to wrestle themselves free from a headlock and drag him to the edge of the pool while he continued to struggle. Hilarity ensued as Max continued to dunk a sputtering Natalie until she finally gained the upper hand, elbowing him in the face accidentally and pulling him by his hair to the shallow end of the pool.\n\n\"Unorthodox, but acceptable given the victim's behavior,\" Emily said in approval. Max rubbed his bruised forehead while Natalie grinned in victory. They practiced several more times, with Max taking it a little easier and Natalie achieving a quick release from his head-holds. Alex repeated Natalie's lesson and quickly got the hang of it. The six inches of leverage he had on Max made his escapes simpler, but the man was strong and managed to hold Alex underwater more than once.\n\nOut of the pool, they continued their lessons, practicing walking assists and two-person carries. Emily then moved on to more advanced first aid skills; how to use a resuscitation mask, administer oxygen, using a suction device, and giving ventilations; effectively reinforcing their classroom lesson from the morning. They also practiced with a portable defibrillator and a variety of splint and backboard techniques to handle head and spinal injuries. By the end, Alex was exhausted and Natalie was crashing hard from the high he'd given her before lunch.\n\nAt four o'clock Emily announced, \"That's enough for today. Tomorrow we'll wrap things up and have you two complete your first aid and CPR assessments. We should end early, about an hour after lunch. Good work today. Thanks for your help, Max.\"\n\n\"Any time,\" Max added cheerfully despite the red welt above his eye. Natalie slumped off towards the locker room and Alex left in search of Faith. He flagged her down as Max filled in for her at the lifeguard station.\n\n\"She just went into the locker room,\" Alex said to Faith.\n\n\"Ok, give me fifteen minutes and then come in,\" Faith said with a wry smile.\n\nAlex nodded in response. With time to kill, he found Emily. She was still poolside, cleaning up the gear they'd used during their training session.\n\n\"Need some help?\" Alex asked politely.\n\n\"Sure, thanks. Grab that stuff and help me load it into the storage room,\" Emily said, motioning at a pile of first-aid equipment.\n\nInside the small room, Alex helped Emily restock the shelves with the supplies they'd taken. As he turned to leave, Emily shut the door and held his arm, turning him back around to face her.\n\n\"I thought about what you said earlier,\" Emily said softly. \"About starting over and not playing any games. I think I'd like that very much.\"\n\nAlex watched as she frowned and looked down. \"What's wrong?\"\n\n\"Nothing. I've just been in a funk lately. What you said made me think about a lot of what I've done here in the past, with Max especially.\"\n\n\"You're going to miss him,\" Alex offered.\n\n\"Yes, and I can't help but feel it's my fault he's leaving,\" Emily said with slumped shoulders.\n\n\"It's not. He's just ready to move on.\"\n\n\"How do you know?\" Emily asked, raising her head.",
        "\"Just the feeling I got talking to him. He said you were part of it, but not the reason he's leaving,\" Alex replied. \n\nEmily visibly relaxed as he said the words. \"So he talked to you about us?\"\n\n\"Yes. He also told me you are a wonderful person but that I should be careful of your...appetites.\" Alex said with a wry grin.\n\nEmily smiled. \"Thank you, Alex. I had hoped you would take his place when I first met you. Now I see you may do even more than that. I'm sorry I acted the way I did at first.\"\n\n\"I understand. No hard feelings.\" Alex could sense Emily's honesty and was relieved. She would do as she said, which meant he could stay at his job, and they could continue their explorative rendezvous.\n\n\"Do you mind if I apologize another way?\" she asked with canted eyebrows and a mischievous smile. Stepping forward, Emily reached out her hand and slid it down the front of Alex's tight swimsuit. She came to rest on his bulging package and gave it a squeeze. He responded quickly under her touch and she took his wordless response as encouragement to continue.\n\nDropping to her knees, Emily pried down Alex's clingy swimsuit revealing his stiffening manhood. Leaning back against the door, Alex groaned as she took him into her hot mouth, flicking a tongue around the ridges of his tender tip. She slurped hungrily on his cock as it grew rapidly to its full glory, drawing half of his length into her throat with ease and slathering it with spittle. Reaching up with one hand, Emily squeezed his base and continued to greedily inhale his cock while looking up his taut chest with concave cheeks and flared nostrils.\n\nWith a loud pop and a grunt of surprise from Alex, Emily released him and slid her hand up the length of his shaft, cupping his spongy tip and skillfully rubbing her palm against its sensitive underside. She burrowed between his legs, taking his tightened sack into her mouth and licking deep beneath it with her long warm tongue. Meanwhile, she deftly unzipped her jacket, slipped an arm free, and flipped the strap of her swimsuit down and over her shoulder. She pushed the suit down, freeing one of her prodigious mounds and then hefted it, kneading its softness and tweaking her nipple to a state of pointed excitement. \n\nLooking back up at Alex, Emily began moving her fist at a feverish pace across his tip. Slick with spit, her curled fingers squelched and popped across the ridges ringing Alex's tender knob. He grunted and thrust out his hips. In reaction to his impending release, Emily lifted her bared breast and placed her thick stiffened nipple against his tip, flicking his cock head across the hard nub. Target in his sights, Alex let loose, erupting onto her tit while she worked his gushing cock in circles, smearing his spunk around her pale mound while firmly milking his shaft between each throbbing convulsion.\n\nEmily licked the final pearly droplets from Alex's tiny slit as his twitching shaft calmed under her grasp. She released him and lifted her heavy breast to her mouth, pulling her cum-covered nipple towards her open mouth. Her tongue circled her dark areola, gathering one final taste of Alex before she threaded her arm back through the red shoulder strap and secured the remainder of his sticky seed inside her suit. \"Keeping this for later,\" she grinned, squeezing her dampened chest with her hand. \"I'll smell you all day long.\"\n\nAlex chuckled while he pulled up his shorts. \"That's a new one.\"\n\n\"I did say I wanted to teach you some new tricks,\" Emily said while drawing her arm back into her jacket and zipping it closed, still crouched on the ground beneath him.\n\n\"I do enjoy your tricks, Emily. These are the games I very much want to play with you,\" Alex said with a smile, pulling her close and kissing her gently once she'd risen from the floor.\n\n\"Good, I'm glad,\" Emily replied. \"I have plenty more where that came from.\"\n\n\"I don't doubt it,\" Alex said with a grin as he twisted the doorknob at his back and side-stepped out of the supply room.\n\n\"I have to get back to work. Nine 'o clock tomorrow,\" Emily stated, emerging from the supply closet as his boss.\n\n\"I'll be here. Goodbye, Emily,\" Alex responded respectfully, turning to head for the locker room.\n\nQuietly unlocking the door, Alex stepped inside the employee-only facility. He heard muffled moaning coming from one of the private showers and saw no sign of either Natalie or Faith in the common areas. Stepping silently to the door, he found it slightly ajar and peered inside. The shower was running hot, steam filled the room, but between breaks in the mist he could make out Natalie sitting on a white plastic chair in the middle of the small room. Faith was on her knees on the floor, facing Alex, although he couldn't see much of her. Natalie's head bobbed loosely, lolling side to side and occasionally emitting short grunts and groans.\n\nAlex slid silently into the room and stepped forward until he could see over Natalie's shoulder. He looked down at the dramatic arches of Natalie's naked dark-tipped breasts to see Faith's short black hair nestled firmly between the preoccupied girl's olive-skinned legs. Leaning down he simultaneously cupped her jutting peaks and nuzzled his face into her neck.\n\nNatalie yelped the second she felt his touch, throwing her legs out in surprise and nearly kicking Faith in the head when she backed away in surprise.\n\n\"I was wondering when you'd show up,\" Faith said from the floor, a huge grin spreading across her face. She was still dressed in her red one-piece swimsuit.\n\n\"ALEX!\" Natalie shouted in a high pitched voice. \"You scared me half to death.\"\n\nAlex didn't stop, continuing to caress and fondle Natalie's impressively heavy breasts as she squirmed under his touch. He focused on channeling calming energy into her and felt her relax almost immediately, moaning as he rolled her stiff nipples between his thumbs and forefingers. Faith held Natalie's legs up and set them back on her shoulders, leaning forward into her dark center and spreading the startled girl's knees farther apart the closer she got to her destination. Natalie let out a throaty groan as Faith resumed her skillful oral ministrations.\n\nFrom his perch over Natalie's shoulder, Alex watched intently as Faith's tongue lapped between her dusky lips with her pink tongue. She looked up at both of them, grinning with her parted mouth, her experienced probe flicking through Natalie's exotic pussy and dancing over her sensitive button. She pinched Natalie's fleshy inner folds between her lips and sucked them tightly, slurping audibly as she pulled back with her mouth, stretching the mottled chocolatey-brown and pink skin to extreme lengths. With a pop, Faith let go and as the stretched skin snapped back into place she immediately dove back into Natalie's cunt, tongue pointed deep between her legs.\n\nNatalie howled as Faith found her entrance and slid inside. Alex reached down her taut smooth stomach, continuing over her bare mound until the tip of his middle finger found the swollen nub nestled at the apex of her fleshy folds. He pressed lightly, sliding the two surrounding fingers between her puffy outer lips and holding Natalie open for Faith. He stroked her sensitive center in time with Faith's plunges, quickly coaxing Natalie to a shattering orgasm. She shook uncontrollably and Alex dropped his hand, returning his embrace to her quaking breasts, holding her tight from behind as she convulsed and wrapped her legs around Faith. Panting and groaning, Natalie slowly came back to reality, sighing with exhaustion and slumping back into the chair.\n\n\"Sorry I scared you,\" Alex whispered in her ear.\n\n\"Mmm, that's ok. You made up for it,\" she said softly.\n\nFaith gingerly set Natalie's feet back on the floor and stood. \"It was my idea to invite him, Nat. He seemed keen to get to know you better,\" Faith said with a wink in his direction.\n\n\"Oh, Alex already knows his way around down there. He is quite...gifted,\" Natalie said with a sigh, lounging lazily in the steamy shower room. Alex was sure Natalie would have told Faith about the time in his office, but she obviously hadn't as Faith glared at them in surprise.\n\n\"Is that so?\" Faith asked with raised eyebrows.\n\n\"Mmm hmm, but don't just take my word for it. He's better than any girl I've ever had down there,\" Natalie teased, perking up in her chair.\n\nFaith stood and reached out a hand to Alex. \"I believe a challenge has been issued, my boy. Are you up for it?\"\n\nAlex grinned and looked at Faith. She wore a short boyish haircut atop her long narrow face. Dark eyes slanted to a slim pointed nose that crinkled as her thin pink lips curled into a smile of anticipation. Alex walked with Faith under the shower while Natalie remained seated in the chair, watching the couple with equally high expectations. Faith and Alex were nearly the same height, his chin lined evenly with her lips as he bent down slightly and kissed his colleague. Her jaw went slack and Alex slid his tongue into her waiting mouth. Natalie watched intently as the two kissed under the hot spray of the shower, hands sliding up and down as they explored each other's lean bodies for the first time.\n\nReaching up, Alex took the straps of Faith's swimsuit and pulled them down slowly. Her small pert breasts were first revealed, capped by two tiny dark brown nipples, then he followed down, peeling the stretchy suit from her lithe frame until it dove into the cleft between her long legs. A thin strip of short black hairs revealed itself, pointing down into the final treasure, a tight little pussy that was perfectly protected by the two mounded hills of her outer lips. Her shaven sex was split by a single crease and all that lay within was hidden. Alex immediately felt his tight suit fight his growing erection as he wondered what he'd find buried between those lips.\n\nAlex stood slowly, kissing around Faith's belly button and trailing up to her flat chest. He took one of her slight nipples between his lips, rolling it around and flicking it with his tongue causing Faith to gasp and hold his head in her hands. He alternated sides, lavishing attention on her sensitive points before rising up and nuzzling into her neck, kissing her smooth skin and suckling her ear in his hot mouth.\n\n\"Mmm, he does have a magical mouth,\" Faith said, looking down at Natalie with a sultry smile.\n\n\"Wait for it,\" Natalie said and grinned wickedly at Faith.\n\nTaking Natalie's cue, Alex dropped back to his knees, wrapped both hands around Faith's firm backside and pulled her into his mouth. Sliding his tongue through her narrow crease he felt dainty folds and crests, almost paper-thin compared to her swollen outer lips. Faith grunted and pulled Alex in tighter, lifting one leg and resting her foot on a nearby wooden bench. Alex slid forward and tilted his head back as Faith's sweet nectar hit his tongue for the first time. Water cascaded down his body and filled his mouth as it flowed through her valley. He spat it back, reminiscent of his first foray in the private shower with Emily.\n\nAlex pulled her minuscule nub between his lips, working it vigorously with his tongue, tracing out shapes and letters as his mind wandered. Faith's bucking hips soon brought him back. She ground against him, driving her lacy folds harder into his mug, sliding her slick skin against his lips, nose, and chin. Alex held her flailing ass tight to calm her and flooded her with his gift, inflaming her passion as he probed into her tight wet tunnel with his tongue, lapping at her juices as they rinsed into his mouth.\n\nFaith cried out and Natalie clapped, obviously enjoying the show. Alex continued probing into her, increasing his pace and filling her with the fire of his gift, bringing her closer and closer to release. He felt her dam begin to break and with one final plunge drove straight into her core and moaned vehemently, sending vibrations through her body that triggered an immediate release. Faith belted out one final undulating wail and dropped her leg from the bench, doubling over and clenching her roiling insides with both hands. \n\nGasping for breath, Faith looked up at Natalie with astonished eyes. \"You should have told me.\" She moaned as residual waves of pleasure rocked through her. Her knees quivered and she hastily sat on the bench for fear of collapsing entirely.\n\n\"You haven't even seen the best part,\" Natalie said, nodding towards Alex as he stood, his thick shaft left an unmistakable bulge in the front of his swimsuit.\n\n\"Oh my gosh,\" Faith said, shaking her head. \"Bring that over here,\" she said to Alex. \"It's going to be a little while until I can walk.\"\n\nAlex laughed and stepped forward, latching his thumbs under his waistband, he dropped his drawers and then stood, arching his back and proudly displaying his erect cock to his new workmate.\n\n\"Mmm, marvelous,\" Faith said, licking her lips. She reached out a hand and pulled him closer. \"Have you had this monster inside you?\" she asked Natalie.\n\nNatalie blushed and shook her head. Faith raised a questioning eyebrow and Natalie flushed even darker. She wasn't used to being so open about her sexuality, preferring intimate one on one relationships to a rowdy group session. It was a shyness she'd never been able to overcome, even at the hands of her best friends.\n\n\"Scared?\" Faith asked, egging Natalie on.\n\n\"No,\" Natalie huffed.\n\n\"She's just a little bashful, Faith. She doesn't have to do anything she doesn't want to,\" Alex said in Natalie's defense.\n\nFaith didn't respond, instead, she opened her mouth and wrapped her thin lips around his cock, bobbing her head and letting her tongue slide along his tender ridges and around his flared tip. Alex grunted and looked down, admiring her methodical approach as one hand wrapped around his shaft and stroked while her mouth moved rhythmically along his length. She kept the pace for several minutes, working Alex very close to release, then let him fall from her grasp.\n\n\"I think I'll leave you two alone for a while,\" Faith said with an impish grin. Knowing that she'd gotten both her new trainees worked up to the point of no return.\n\nAlex balked at her sudden change of plans as she stood, gathered her swimsuit from under the shower, and left him alone with Natalie. \"That wasn't very nice,\" he said shaking his head at Faith's tormenting tease.\n\nNatalie stood and walked over to him. \"I think she meant for me to finish,\" she said, reaching down and cradling his thick shaft in her hands.\n\n\"Nat, you really don't have to...\" he started.\n\n\"Oh shut up and fuck me,\" she chirped, not wanting to leave anything open for interpretation.\n\nAlex gaped at her change in demeanor and sat on the wooden bench, back resting against the cold tile wall and hips on the very edge of the narrow shelf. Natalie walked over his legs and sat down, impaling herself in one swift movement. She gasped and her dark eyes opened wide as her body acclimated to the sizeable intrusion. Alex, faced with two momentous hills of milky chocolatey flesh, immediately seized the opportunity to pull a dark nipple into his mouth and suckle it to stiffness. Natalie whined and lifted herself up slowly as Alex wrapped his arms around her narrow waist and held her smooth round backside in both hands.\n\nNatalie squatted back down, groaning as he drove into her again and started her rhythm. Alex reached between her front and placed his thumb on her fleshy nub, moving his arm in cadence with her body as she drove his length through her rippling core. Alex felt her fires growing and fed them subtly, largely allowing her to build herself to climax with her own actions. \n\nWet slaps rang out as Natalie increase the pace and force of her lunges. Her breasts hopped tantalizingly in front of Alex's face. He brought his hands up and attempted to corral them, but was unable to contain the silken bounty as Natalie's vigorous pounding sent her heaving in every direction.\n\nThen all at once, Natalie stopped and came to rest. Her head fell back and thighs fluttered as she sat and rode the edge of a tremendous release. She placed her palms on Alex's chest and slowly started grinding her hips into his lap, delaying her orgasm as long as possible. Alex flexed inside her, sending his cock twitching through her depths. His movements, slight as they were, immediately sent them both plunging over the crest together. Natalie howled as Alex spilled into her, his trembling girth sending pulsating waves of pleasure through her core. She continued to cry out as rhythmic convulsions wracked her exhausted body. Hunching forward, Natalie collapsed against Alex and he held her close, her satiny smooth breasts pressing tightly into his chest.\n\n\"Well that didn't sound so bad,\" they heard Faith say from outside.\n\nAlex laughed, bouncing Natalie on his lap who gasped at the sudden movement.\n\n\"I almost passed out!\" Natalie shouted in response. They could hear Faith roaring with laughter. After several moments, Natalie stood on unsure legs, leaning down to kiss Alex quickly before rinsing off in the shower. \n\nAlex joined her, pulling her full lips in for one final embrace before shutting off the water. Naked, the two left the shower, wet swimsuits in hand, and beamed at Faith who stood dressed in her street clothes shaking her head and smiling.\n\n\"See you two tomorrow,\" she said, leaving through the pool exit without waiting for a response.\n\n\"That Faith is turning out to be as tricky as some of your other friends,\" Alex said to Natalie as she pulled on a pair of plain cotton panties.\n\n\"I know. She's a handful, but I like it, for the same reasons I like Carrie,\" Natalie said smiling sweetly while she pulled a lacy white bra up her chest and threaded her arms through the straps.\n\n\"I hear you,\" Alex nodded in agreement, taking a moment to enjoy watching Natalie dress. \"Do we tease you too much?\" he asked, watching her wiggle her broad hips into a tight pair of jeans.\n\nNatalie shook her head. \"I don't really mind. People don't treat me that way normally, it's like they're scared of me because of how I look. It's nice, I feel like I can start fresh with Faith, and with you. It's...\" she trailed off, unable to find the word.\n\n\"Liberating?\" Alex offered.\n\n\"Exactly.\" Natalie sighed, how did he always seem to know what she was thinking?\n\nOnce he'd finished dressing and gathered his things, he rounded on Natalie and said, \"Until tomorrow; and thanks for a wonderful afternoon.\"\n\n\"Bye Alex,\" Natalie said then blushed, unable to stop the shyness from creeping back. \"See you tomorrow."
    ],
    "authorname": "MagnusRhodes",
    "tags": [
        "blow job",
        "brother/sister",
        "cunnilingus",
        "ffm",
        "lesbian sex",
        "oral sex",
        "shower",
        "siblings",
        "swimsuit"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/alexs-gifts-ch-21"
}
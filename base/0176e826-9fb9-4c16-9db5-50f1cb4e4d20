{
    "title": "You're In My Seat Pt. 04",
    "pages": [
        "Carter\n\n\"Prom? Really Carter?\" Kevin is staring at me, shock evident. First period is about to start and I ask Kevin about my chances at buying tickets. They've been sold out for a while now.\n\nI sigh, \"I know, I know. Prom. I said I'd never go, you're totally right.\"\n\n\"You teased me mercilessly about going with Darla, calling me a 'conformist.''\n\nI am a total hypocrite, but I like the idea of showing off my girlfriend\u2014crazy, I have a girlfriend\u2014and holding her, dancing with her, in front of everyone. Partially because I am proud, and partially because I think she's owed that much. Ally deserves to have a great prom.\n\n\"I know, Kevin, but I'd actually like to take Ally. I mean she has the dress and if it wasn't for me, she would have gone with Paul. As much as she says it's not important to her, it probably is.\"\n\nKevin nods in agreement. He wasn't sold on the prom either, until Darla said she wanted to go with him. \"Well, then, why don't you ask Paul if he still has the tickets, unless he's planning on using them.\"\n\n\"He might be. Or at least that's one of the things Megan was yelling about in the hall yesterday.\"\n\n\"Yeah, I heard about that.\"\n\n\"I think the whole school did.\"\n\n\"Hey, at least Ally called her on her shit.\"\n\n\"True.\"\n\n\"Well, only 21 more days until we're out of here forever.\"\n\n\"And yet you still want to be at prom with these people?\"\n\n\"Shut up, Kevin.\"\n\nYesterday Ally told me she really doesn't care about prom, after all she went two years ago with Brett, but I don't want to be responsible for her missing her prom, our prom. I really want to make everything with her special. My mom and dad questioned me more about Ally last night and they were thrilled to find out that I finally had a girlfriend. Honestly, I can't believe it either, but once again, Ally showed up to drive me to school. This time she had a coffee with my mom and I actually got a chance to shave before school.\n\nPeriod two gave me lots of time to think. While my physics teacher was busy with some sort of proof up on the board, I was busy thinking about, well...Ally's luscious lips wrapped around my cock, her firm tits in my hands, her drenched pussy on my face, and just about every other body part I'd touched and seen yesterday. It's crazy that I can get her that turned on. I have to be careful what I think about, though, otherwise I'll end up with the same problem as the day before. I still can't believe I shot a load in my pants when Ally and I were making out, that was like my worst nightmare, no not like my worst nightmare, it was my worst nightmare. She was totally grinding on me, but still. I am just glad, totally relieved, that she was okay with it because I felt like a total loser. Cleaning up my mess in the hottest way possible was about the best thing she could do. When she started to lick up my misspent cum it was amazing. Her taking my cock in her mouth was just about the hottest thing ever, then when she swallowed down my load...holy fuck. Her mouth working on my shaft, then playing with my balls was better than I ever could have imagined, felt better than I could ever have dreamed. But of course, now I have a problem with my cock straining against my pants when I should be doing some sort of complex mathematical equation.\n\n\"Winters! Do you have the answer for number 3?\" My physics teacher calls on me at the worst possible time.\n\n\"No, Sir, sorry, I haven't figured that one out yet.\" Oh god, please don't call me up to the front. Please.\n\n\"Well, Johnson, could you go solve it and show Winters how it's done?\" Mr. Muir holds out the whiteboard marker and I am so completely relieved.\n\n\"Yes, Mr. Muir.\" Thank fuck.\n\nTrying to focus on physics is almost impossible, even after my near miss with the whiteboard. My mind keeps wandering to Ally. I know there's stupid jokes about what a pussy feels like, tastes like, but none of them are quite right. She tasted and smelled like something complex and rich, sweet and tangy, better than I ever could have imagined. The fact that I was the first guy to go down on her and that I was able to bring her to orgasm was just the best feeling ever. As much as I want to have sex with her, I loved the feeling of her cumming on my face\u2014I want to be able to hone that skill, so hopefully Ally will let me do it again. \n\nIn the cafeteria ten minutes later, I was lost in thought about the whole prom issue. I have enough saved up from my job at the electronics store to pay for tickets, but there aren't any available.\n\nSuddenly a warm female body presses up behind me. \"Earth to Carter, are you there?\"\n\n\"Yeah, sorry, just thinking.\"\n\n\"About me, I hope?\" Ally says as she slides into the seat next to me.\n\n\"Maybe.\"\n\n\"Hmmm,\" Ally leans in and gives my ear a quick lick, whispering, \"About us, I hope. Because I know what I've been thinking about all morning.\"\n\n\"What?\"\n\nAlly puts her hand over my mouth like I've said something naughty, then whispers in my ear, \"Breath deep Carter, let me know if you can figure out what I've been doing.\"\n\nOh. Holy. Fuck. I am going to blow a load right here in the caf. I open my mouth ever so slightly to touch my tongue to her finger. She's been fingering herself. I catch a little taste of her tang, and the scent of her intimate area fills my nostrils as my cock swells, totally cramped in my jeans.\n\n\"Ally, what are you doing to me?\" I try to keep it together.\n\n\"Just letting you experience a little of what you do to me\u2014you make me so wet. I keep picturing your face framed between my legs, slick with my juices. What could be hotter?\"\n\n\"Are you enjoying teasing me?\"\n\n\"Very much, I love teasing you, in fact.\"\n\n\"But it's not fair. If you're turned on, at least it's not really visible to everyone, but how can I walk around with a hard on all day?\"\n\n\"I could take care of that for you.\"\n\n\"What?\"\n\n\"You have keys for the tech room, don't you?\"\n\n\"Yeah...\"\n\n\"Well come on then, I'd love to offer you some relief.\"\n\n\"Ally, I can't even stand up.\"\n\n\"Here carry my sweater for me.\" She stands and tosses her cardigan in my lap.\n\n\"Quick, lock the door.\" Ally slams the door behind us.\n\nWith a quick zip and a firm yank, Ally has me against the wall near the soundboard in the tech room overlooking the stage with my pants down around my ankles. I feel so exposed even though we aren't really visible from the stage. The lights are dim, set for a show, although usually the show isn't in here.\n\n\"Oh god, Carter. You have no idea how amazing you are and how much I want you.\" Ally groans, voice full of want, as she leans in close to breathe in the scent of my cock, running her finger up my shaft, teasing my swollen head. A little bit of fluid leaks from the tip and she touches it gently with her tongue, making a sweet cooing sound as the taste plays across her palate. Before I can respond, she's on her knees and gripping my turgid shaft in her hands, working her fingers in a light twisting motion. It's a little unnerving being half naked in the school with Ally where she's not supposed to be, but the fact that she wants me this bad is so incredibly hot, especially knowing she's been sneaking off to rub her wet pussy. Whatever misgivings I'm having fly from my mind as she takes me into her warm, wet, welcoming mouth.\n\n\"uuunnnnggh\" I moan as she starts moving back and forth on my rod. The delicious excitement of doing something so totally hot in a forbidden spot is an incredible turn on. Ally grips my ass tightly with her free hand, pulling my cock farther into her mouth, her wet lips stretched over me, while her tongue swirls around the underside of my sensitive head. My hands, initially by my side, move to hold her head, feeling like I'm driving her onto my cock and causing me to groan again, deeper, more primal. I lean my shoulders back against the cool wall, trying to keep my balance, dizzy with all blood flow being sucked to my cock.\n\nAlly squeezes and kneads my ass cheek in her hand, rubbing closer and closer to the dip between my cheeks and I can feel my pleasure building. The feeling is insane, every nerve ending in my body seems to be located in the area she is servicing. Ally is making groans, too, matching mine, except hers cause vibrations all through my dick that feel insanely good. I can't help but give her a taste of what's to come when a bit more precum escapes from my slit. Her tongue is quick to swirl it into her wet mouth. While I know the pressure is building in my balls, I don't want to cum yet. I want to show Ally I can go the distance, plus I want to prolong these sensations forever. I want to lean my head back and relish the feelings, but I can't take my eyes off the totally erotic picture of her kneeling in front of me, her hand looking so small working my thick rod slick with her spit. My balls tighten, I just can't stop it, and I know release is near. My chest is heaving with laboured breaths, knees shaking with the need to cum.\n\nShe has drips of drool pooling at the side of her mouth, her red lips wrapped around my meat, cheeks showing every thrust. Ally must feel my balls pull up because she tilts her head slightly and looks up at me, eyes begging for my cum. She looks so cute, so much the object of my desire, so much like an innocent little cock whore, I can't stop my load from bursting forth. \n\n\"mmmmmmmmmmffffffffffffffggggggggggghhhhhhhhhh.\" I try to stifle my groan of pleasure as I shoot deep in her mouth. I can feel her swallowing my load, throat tightening each time. Ally milks the last few drops from my tip, squeezing gently and licking them up while I try to control my shakes from the effort of release. The tension that built in me has been uncoiled and I feel so much more relaxed.\n\nAlly stands slowly, pulling my pants up as she rises, gently replacing my softened damp dick back inside my pants. She struggles with my zipper for a second, so I take over the task, just in case. There would be nothing worse than catching some tender flesh between those metal teeth.\n\n\"Did you like that baby?\" Ally asks with a grin while she runs her index finger along the edge of her mouth to clean up any drips.\n\n\"Oh my god, Ally, that was...was...so...\" I can't even think straight, my mind, like my dick, totally blown. Instead I pull her against my chest and kiss her deeply, catching a hint of salt in her mouth. The fact that she's just swallowed my load doesn't bother me, in fact, it makes the kiss that much hotter. If she feels comfortable with taking my cum, then I need to be able to show her how much I appreciate her, and avoiding her mouth would just be wrong.\n\n\"Can you taste yourself, baby?\" she asks, looking concerned.\n\n\"Yes, but I don't mind. If you can swallow me, then the least I can do is kiss your beautiful and talented mouth,\" I reassure her.\n\n\"I think your cream is delicious, and Carter, you're the one who's beautiful.\" She wraps her arms around me and kisses me again.\n\n\"At this rate, we'll never make it to period three.\" I give her a kiss on the nose with a smile.\n\n\"Always the sensible one, eh Carter?\"\n\n\"Well, as much as I'd love to stay in here with you, it's not that comfortable to sit in here for any length of time, I don't want us getting caught, and we actually need to graduate from this shithole to go to university which means we should probably attend classes.\"\n\n\"I suppose you're right. Why does my boyfriend have to be so smart?\"\n\n\"I don't know, but I can't be that smart if I want to go to class rather than stay with you.\"\n\n\"No, I understand. We have exams coming up and I don't want to mess with my average,\" Ally agrees with a sigh.\n\nI hate that I feel like I've left her unsatisfied, \"I promise I'll make it up to you. I feel bad you didn't get anything out of this.\"\n\n\"Are you kidding? I got to swallow a load of your cum. Do you know how much I needed that?\"\n\nWe sneak back out into the now busy hallway and I walk her to class before running to get to mine. I need to try to talk to Paul again, and maybe, just maybe, he might be convinced to part with his prom tickets. History is usually pretty laid back, but today there's a substitute teacher who's decided that with the short amount of time left in the semester it's not like there's any point in trying to make us do the work, so the period is a free for all. When it appears Paul's just sitting around doing nothing, I walk over to him.\n\n\"Uh, Paul, can I talk to you for a second?\"\n\nHe gives me a nervous look and motions for me to take the seat next to him. \"What's up Carter?\"\n\n\"Not much, but I was wondering about prom.\"\n\n\"What about it?\"\n\n\"Well, are you still planning on going? I mean I would love to purchase your tickets from you...\"\n\n\"Ah, yes, the fight in the hall the other day.\"\n\n\"Yeah, well, Megan said she was going to set you up, but I'm not sure if you're going to do that or maybe take someone else, or just not go at all?\" I'm very careful to keep gender neutral.\n\n\"I know, I mean it's difficult. I know I don't want to go with whoever Megan's trying to set me up with. That girl is nuts, but I'm not sure I have the balls to take who I really want.\"\n\n\"Well what do they think about it?\"\n\n\"Honestly, I know he wants to go with me. He bought a ticket before and was planning on going stag, but I know he wants more.\"\n\n\"Would he be okay with you taking a girl?\"\n\n\"Not really.\" He sighs then thinks for a second, \"You can have Ally's ticket. I'm not taking some random girl just to make Megan and the social gods happy. I can do that much.\"\n\n\"I'll pay you for it, man. Thanks.\"\n\nNow I just need to find one more ticket for something that's been sold out for over a month.\n\n\"Carter, why don't we give people something to puzzle over. Work on these questions with me?\"\n\n\"Sure.\" So as odd as it is, I spend the rest of the period working on history homework with my girlfriend's gay ex-boyfriend.\n\nAlly\n\nIt's period four and my first English class after yesterday's blow up with Megan. Obviously she means to make me pay, and I don't really care. Well, I care a bit I suppose, but mostly because I can't believe I put up with her bullshit for the past two years. When Brett and I started dating, Megan was nice to me\u2014took me under her wing. She helped me pick cool clothes for parties and helped me navigate the upper echelon of school society. I never quite fit in exactly, but Megan loved that she could tell me what to do. My old friends were too 'academic' to be any fun, so Megan suggested I leave them behind, and I did. They stopped calling me after awhile and we moved in different directions. I had my crush on Carter the whole time, but I never dared say anything to Megan about it because I knew that she would have made my life hell. The one time she said something about him when I was present it was horrid. As much as I was a Megan protege, I still kept my grades up, but I kept it quiet. This year I realized how much of an idiot I've been. I gave up my friends, values, and sense of self for an Abercrombie/Hollister model wannabe. And I thanked her for it. Brett was my entrance into the upper echelon, but Megan helped me secure it after he disposed of me like a toy he outgrew.\n\nWhen I take my seat in class, I can hear her stage whisper to her other little followers, Brandi, Carm, and Dee, \"Can you believe she's actually screwing that loser? He's got a tiny little dick, but Paul was just too much for her to handle. She couldn't keep up with him and had to trade him in for someone more her speed.\"\n\nRolling my eyes, I shake my head and try to ignore the load of crap she's feeding them. I know that I didn't always believe what she was saying, but I'm not sure I would have ever called her on it. True to form, her minions are nodding and adding other unkind and blatantly untrue comments to the discussion. Ordinarily I'd be sitting right by her side and would be nodding right along regardless of what I actually thought. The whole thing causes the bile to rise to my throat; I can't believe I was so stupid for so long. \n\nStanding without really thinking, I walk right over to Megan, \"You have no clue what you're talking about, but before you slander Carter any further, take a fucking peek at his package.\" I trace my baby finger across the edge of my mouth in a really dirty gesture and walk away.\n\n\"Whore, what a total whore,\" one of my former friends says, but I don't really care. They can say whatever they want, if they want to think I'm a whore, it's fine by me. I did just suck Carter's delicious and recently maligned cock, and I loved every second of it. \n\nMy next move bit more cautious. One of my former really good friends, Julia, is sitting with a few other high achieving academic girls. I don't want to sit with her\u2014I can't expect that she would want me to, but I do want to set things straight. \n\n\"Julia?\"\n\n\"Ally.\"\n\n\"I just wanted to say I'm sorry. I was a total idiot and I can't believe that I was so completely shallow. For anything I ever said that was mean or any time I ever didn't call you back or treated you poorly, I'm truly sorry.\" I give her a nervous smile. \"That's, ah, well, that's what I wanted to tell you, Julia. I'm sorry.\" And I walk back to my desk.\n\n\"Oh my god, even the losers won't have her anymore. I hope her pimple-faced freak makes her happy.\" Megan says pointedly as I pass by.\n\nSurprisingly, Carm speaks up, \"His skin's cleared up, though, Carter's actually pretty attractive.\"\n\n\"Oh shut up Carm,\" Megan snaps back, putting her in her place. \"If you want to waste time talking about that loser, then why don't you just go sit with her?\"\n\nCarm rolls her eyes but doesn't move. I know that feeling and I'm glad I'm done with that kind of crap. I'm not sure how they don't understand that in under a month any of the garbage that goes on in our classes won't matter anymore. Megan's desperately clinging to whatever power she has left, but there's an expiration date. \n\nAt the end of class, Carter is waiting at the door to pick me up again. He really is sweet and I love the attention that he's giving me. Paul never did things like that (now I know why) and with Brett, I was just so nervous about him being older and popular, I was the one who was waiting by his locker. With Carter I think we both give the little attentions to each other and it seems like our relationship, even though it is new, is the best one I've ever had.\n\nMost of the people in my class file out before I get a chance to, and Carter has an odd expression on his face when I get to the door.\n\nGiving him a chaste peck on the cheek I ask, \"What's up, Carter?\"\n\n\"Did something happen in class today, Ally?\" He takes my hand and we walk towards the parking lot.\n\n\"Why?\"\n\n\"I swear a bunch of girls were looking at my crotch. It's a totally bizarre feeling\u2014I feel used, almost dirty.\"\n\n\"Oh, is that all?\" I give him a smirk, \"Megan was suggesting to others that you weren't well endowed and I might have implied that she was wrong.\" I get on my tippy toes and whisper, \"I know she's wrong, you're definitely well hung.\"\n\nCarter's cheeks flame and he pushes me away. \"Thanks a lot. Now I'm going to worry that girls are looking at my crotch all the time. They don't really do that, do they?\"\n\n\"Of course we do. Girls think about sex just as much as guys.\"\n\n\"Do I need to walk around with my school bag over my dick for the rest of the year?\"\n\n\"No, it will die down in a day or two, don't worry. Besides I like the idea that other girls are envious of what I have.\" I grin lasciviously at Carter, making him laugh. \"Did you want to back to my house for a while so I can thoroughly inspect your package?\"\n\n\"I though you already did that at lunch?\"\n\n\"I might have missed a spot.\"\n\n\"As amazing as that would be, I have to work in about half a hour. Could you drive me?\"\n\n\"Why don't you drive?\"\n\n\"I don't have a car. I mean I have my licence but I don't get the car very often.\"",
        "\"Do need to stop at home first?\"\n\n\"Yeah, I need to change into my work clothes.\"\n\n\"I can drive you, but only if I can see your room.\"\n\nHe hesitates for a second, \"Okay.\"\n\nCarter\n\nShit. I think my room is clean, uh, kind of. I mean there isn't any tell tale wadded up kleenexes laying around or piles of dirty dishes, but I'm not sure my room is clean enough for visitors.\n\nWe pull in the driveway and I almost spring from the car and sprint to the front door. Locked\u2014good. That means Teddy's not home from school yet to be his general pain in the ass self. After fumbling with the lock, I run in and dash up the stairs. \"Just give me a second, okay?\"\n\n\"It's no big deal, Carter, my room is messy, too.\"\n\nI quickly toss my covers over my bed in an attempt to straighten up, \"Alright, come on up.\"\n\n\"So this is what your inner sanctum looks like, huh? Your fortress of solitude?\" Ally teases, eyes moving from bookshelf to desktop to my walls, taking in my trinkets, posters and general debris of my life.\n\n\"I'm hardly Superman, Ally,\" another blush. She's already seen me mostly naked, but somehow this makes me feel far more exposed.\n\nAlly is studying my science fair project award from grade nine, \"Your robot! I was so jealous when you came in first. Not that you didn't deserve it, but I only came in fourth.\"\n\n\"I know...\" I point to the framed picture from the awards ceremony on my shelf. \"Me, Kevin, Julia, and...\"\n\n\"Me! You have a picture of me in your room!\" Ally's voice is gleeful. \"I mean it's not the best picture or anything, but I can't believe I'm in your room looking at a picture of me. I shook your hand to say congratulations and I just got tingles.\"\n\n\"Me too.\" It's true. I had a crush on her by then and it was almost as good as winning the science fair, for her to touch me and for me to know that she knew who I was.\n\nAlly pushes me down onto my bed, then flops down next to me, her head burrowing into my pillows, breathing deeply. \"God Carter, I could just lay here forever. It smells just like you and it's so comfortable.\"\n\nI roll onto my side, facing her, my cock starting to rise in my pants. \"I won't object if you want to stay in my bed, but I might get fired if I don't show up for work.\"\n\n\"Spoilsport.\" Ally palms her hand along my crotch feeling my arousal.\n\n\"No, it's just I'm not sure I can control myself with you laying in my bed, but we really do need to get going.\"\n\n\"Fine.\" Ally climbs over me to get up, making sure to straddle me in the process, rubbing herself over my prone body. \"Get changed, Mister. You've got to go to work.\"\n\nI stand up and change, my condition evident as Ally watches.\n\n\"God Carter, you really are hot. I wish I could take care of that.\" She motions to my erection, still clad in my boxers.\n\n\"I still can't believe you want me.\"\n\n\"What's not to want? Now get changed before I jump you.\"\n\nI turn my back to her as I put on my black work pants and a white golf shirt. I work at the help desk in an electronics store. Mostly I help people get viruses off their computers from downloading too much porn, but occasionally I help clueless people install software or put in new graphics cards. It's an easy job and affords access to all the parts to create a kick ass computer, which Ally has already seen sitting on my desk. In the reflection of my monitor, I can see her doing something, but I'm not sure what, but when I turn around she has a devilish grin on her face.\n\n\"Ready, Al?\"\n\n\"Whenever you are, Car,\" she giggles, giving me a much deeper kiss. My cock, which had gone down a bit when I changed, is on the rise again.\n\nLeaving my room, we head back towards the front door, hand in hand.\n\n\"Hi Ally, Hi Carter. What were you two doing?\" Teddy asks in a singsongy voice.\n\n\"Carter was just showing me his room.\" Ally explains halfheartedly.\n\n\"Sure he was.\"\n\n\"Screw off, Teddy,\" I growl. \"Nothing happened.\" \n\nWe get to the plaza in record time and before I climb out, Ally leans over and takes my hand. \"Carter, I was hoping you'll be thinking of me while at work today.\"\n\n\"Of course I will, Ally.\"\n\n\"Hmm, well I thought this might help.\" She slides my hand up her thigh and under her skirt. \n\nMy fingers, expecting fabric, graze bare skin, downy fur, and delicious wetness. \"Oh. My. God. Where are your underpants?\" I groan.\n\n\"I lost them, Carter, and I'm not sure where,\" Ally's voice is husky and low. She is driving me crazy. \"I guess you'll have to look for them later. For now stick your finger in me, just for a second. Please.\" She thrusts upwards slightly, my finger slipping inside her further, enveloped in her wet, creamy folds. Sitting back into her seat again, she pulls my hand back out from under her skirt and puts it to my mouth. \"Taste me.\"\n\nI allow her to put my finger in my mouth and suck her juices from it. It tastes so incredibly sweet. \"God, Ally,\" I groan. \"How am I supposed to work like this?\"\n\n\"Stay behind the counter?\" she grins and winks at me.\n\nI roll my eyes at her, \"I think you enjoy getting me into situations like this.\"\n\n\"No, Carter, I love getting you into situations like this.\" Bigger smile.\n\n\"You're just cruel. You have no idea how embarrassing this is.\" I give her a light kiss and then nibble her lip.\n\n\"As punishment, I guess I'm going to have to go shopping without any underwear. I need to look at laptops to take to university. I hope there's a hot sales guy who can help, usually they just hide behind the counter.\"\n\n\"Terrible, just terrible,\" I smile and shake my head.\n\n\"I'm going to give you a 10 minute start.\"\n\nAlly\n\nThe air conditioning from the store is strong, and in my already aroused state, the cool breeze on my wet pussy causes my nipples to harden into tight points, shivers running up my sides. I cross my arms over my chest, trying to hide my condition and maybe conserve some body heat.\n\n\"Can I help you?\" An attractive looking sales clerk approaches when he sees me straining on my tippy toes to look for Carter.\n\n\"Uh, no, I'm okay thanks,\" I smile dismissively and walk towards the computer department at the back.\n\n\"Are you sure? I'd love to help you out,\" he's being a bit too persistent and I'm getting annoyed.\n\nSuddenly I spot Carter's head ducking behind a sign, \"No, that's okay, I see what I want, thanks though,\" and I walk right up to Carter, acting flirty. \"Hi, I'm interested in a laptop?\" I twirl my hair in my finger and bat my eyes.\n\n\"That's okay, Carter, I was helping her first.\" Mr. Persistent states. I wonder if they make commission or if he's just a jerk? I can see Carter give a roll of his eyes, so I get the impression that this guy might not be the brightest.\n\n\"Okay, well, I need a laptop with a multiple periphery ports, at least a terabyte of RAM, a VGC suitable for ACD Systems Canvas, and LAN capability,\" I count things off on my fingers using a whole bunch of computer terms that don't totally go together, but will definitely confuse someone who doesn't know much about computers.\n\n\"Hmm,\" he's trying to decide if he can fake his way through or if he needs to give up. \"I think my man Carter here can be of service.\" \n\nI decide to take the gracious route, \"Thanks so much,\" I flick my eyes to his name tag, \"Ryan.\"\n\n\"No problem,\" he slides away back towards the front of the store.\n\n\"What was that?\"\n\n\"That was Ryan. He's not so bad, he just thinks he's god's gift to electronics sales. Do you really need a laptop?\"\n\n\"Yeah, actually, I do.\"\n\n\"Well, don't buy one here, we can go to a far better store some other time. Honestly, I like my job, but this isn't the greatest place to buy computers,\" Carter informs me, then leans in closer. \"So where are your panties?\"\n\n\"They might be in your room somewhere. I guess you'll have to look for them later.\" I shrug with a coy smile.\n\nCarter looks me up and down, \"You look a little bit chilly, Ally.\"\n\n\"Yeah, it's kind of cold in here. I wish you could warm me up,\" I tell him.\n\n\"I get off at ten,\" he informs me. \n\n\"No, you get off when I tell you,\" I respond.\n\nCarter groans at my terribly cheesy double entendre, \"Enough, Ally. I really do have to work.\"\n\n\"I know, Carter. I can't drive you home though, my curfew is ten.\"\n\n\"That's okay, Kevin is working in the stockroom. He'll drive me.\"\n\nCarter\n\nThe rest of my shift is pretty uneventful. Kevin and I fix a few computers (porn viruses), and discuss the prom problem.\n\n\"I've got one ticket now. I just need a second.\"\n\n\"Darla might be able to help you out. She was going to tell you at lunch, but we couldn't find you.\"\n\n\"Yeah, umm, Ally and I might have wandered off for awhile.\"\n\n\"Ahh, young love.\"\n\nMy cheeks colour at the mention of love.\n\n\"Do you love her?\"\n\n\"I don't know, I mean it hasn't been very long.\"\n\n\"Carter, you've had a thing for her for four years now.\"\n\n\"Five.\" I correct him, \"What about a prom ticket?\"\n\n\"Oh, you know Darla's friend Andi?\"\n\n\"Yeah\"\n\n\"She has to go to a family wedding that weekend and \n\ndidn't realize until after she got her ticket. She was trying to see if someone could drive her in the morning, but her parents don't want her to miss the rehearsal dinner, and the wedding's a few hours from here.\"\n\n\"Should I call her and ask about the ticket?\"\n\n\"I think Darla already has. Give me a minute.\"\n\nI cover for him while he goes into the back to text Darla\u2014texting at work is totally forbidden. A few minutes later he comes back with a grin.\n\n\"Ticket secured. You, my friend, are now a mindless conformist.\"\n\nI give him a high five. \"Thanks man.\"\n\n\"Did you want to come with us? Darla's parents are lending us their Mercedes. I didn't want to bother with a limo, it seems like such a waste, especially since I don't drink at all.\"\n\n\"I'll have to ask Ally, but it sounds good to me.\"\n\nAfter work, Kevin drops me home.\n\n\"Hey Carter, good day?\" My mom is sitting on the couch in the living room reading when I come in. I can hear the tv in the family room blaring, so I'm assuming that's where my dad is.\n\nI'm pretty sure something's up based on her body language. \"Yes Mom, thanks.\"\n\n\"Teddy tells me Ally was over after school.\" And there it is. I am going to kill Teddy.\n\n\"She was.\" I answer cautiously\u2014I have no idea how much Teddy said.\n\n\"Teddy said she was in your room.\"\n\nDeath to younger brothers! \"She was, but nothing happened, Mom, I swear.\" \n\nMy mom sighs, \"Look Carter, you're eighteen, and in a few months you'll be gone away to school. I remember what your father and I got up to at eighteen, so I'm not going to pretend that you two are being completely innocent, because, well, I'm not an idiot, but remember that your brother is only twelve and highly impressionable, so please behave appropriately.\" She takes a breath, then adds, \"Also I am too young to be a grandmother, so please be careful.\"\n\n\"Mom, nothing happened!\"\n\n\"Yes, but that doesn't mean it won't.\"\n\n\"Okay, whatever.\" Then an idea occurs to me, \"Can you take me shopping this weekend?\"\n\n\"I guess, why?\"\n\nMy face colours, \"ineedtogetatuxedofortheprom.\" I spit it out all in one go because my mom has heard my diatribe against the prom for months.\n\n\"Really?\" She is visibly thrilled, she'd been trying to get me to go for ages, saying it was a seminal high school experience, a right of passage, or some such nonsense.\n\n\"Yes.\"\n\n\"But I thought it was sold out?\"\n\nI explain how I've managed to secure tickets and my mom is totally excited, making a list of things we need to do. It's exhausting so I bid her goodnight and go to my room.\n\nAlly\n\nI'm laying in bed naked and waiting when my phone finally rings.\n\n\"Carter, where have you been?\" I don't want to sound like a nag, but it's nearly eleven thirty.\n\n\"I'm sorry, I was talking to my mom. Teddy ratted us out.\" He sounds apologetic, so now I feel bad. I hope he didn't get in trouble.\n\n\"I think it will be worth it when you look under your pillow,\" I sing.\n\nI can hear Carter rummaging around for a second, then an intake of breath when he finds my white cotton thong sprigged with little pink flowers and trimmed with a green bow, \"Oh god, Ally. It smells like you.\"\n\n\"It should, it was sopping all day after the snack you fed me at lunch.\"\n\n\"You started it, you played with your pussy in the morning.\"\n\n\"I had to Carter. I need you. I don't think you understand what you do to me.\"\n\nCarter takes in another deep breath, \"God, Ally, you're so amazing.\"\n\n\"No Carter, we're so amazing together. You make me feel so good. It's like I was a giant walking pile of suck before you came along. Everything was shallow and fake before.\"\n\n\"Ally, I'm nothing special. I'm just a guy.\" I wish Carter could see how wonderful he is.\n\n\"You're real and fantastic and hot. I can't wait until I can feel you inside of me.\"\n\n\"I can't wait for that either.\"\n\n\"Can you do me a favour?\"\n\n\"What?\"\n\n\"Take your cock out and stroke it with my panties.\"\n\n\"What are you doing?\" He asks. I can hear him struggling to get out of his clothes without putting down his phone.\n\n\"I'm naked, in the dark, and playing with my nipples.\" I tell him as I roll my hard nipples between my fingers, the twinges shooting down to my pussy. \"Is your cock hard?\"\n\n\"What do you think?\"\n\n\"I bet you it's standing up like a flag pole. I love your cock\u2014it's so big and thick and it tastes amazing.\" I whisper the last bit closing my eyes remembering his load from lunch.\n\nI can tell Carter is stroking himself by the timber of his voice. \"Play with your pussy for me?\" he asks, lustfully.\n\n\"Of course,\" I purr. \"I'm wet and I've already got two fingers in my hole. Yours feel better, though.\" I hook my fingers and start to stroke the inside wall of my pussy, the soft folds slipping between my fingers. There's a slight sloppy noise in my room as the juice of my pussy gushes around from the movements.\n\n\"Ally?\" my name slips from his lips, breathing into the phone.\n\n\"Yes Carter,\" I exhale.\n\n\"Can I stick your panties in my face? I want to smell you.\" He is groaning now and I can hear the strain in his voice.\n\n\"God, that's\u2014so\u2014fucking\u2014hot.\" My fingers start to go deeper and my breathing becomes more laboured. Sticking the phone between my shoulder and ear, I move my other hand to my clit, finding purchase against the tender nub.\n\n\"Ally, I need you. I need you to feel your pussy for me.\" Carter's begging is broken by the sounds of his stroking.\n\n\"It's so wet Carter, so very wet. I'm going to make a puddle on the bed, my pussy is so fucking wet.\" Both my hands are busy, pussy full, fingers dancing in a sensual manner.\n\n\"My cock is so hard Ally.\" I can hear his hand moving rhythmically and I can imagine his the tip with a drip of his delicious precum escaping and I want it, I want all of it.\n\n\"I wish you were between my legs Carter, your cock driving into me, my pussy wrapped around that giant pole. I need to have you fuck me.\"\n\n\"I want to, Ally, I want to so bad.\"\n\n\"Fuck me Carter, fuck me.\" My mind is spinning as my release comes closer and ever closer.\n\n\"God Ally, you're so good, I'm going to cum for you,\" Carter's voice is broken and ragged and I know he's about to blow.\n\n\"I need you to cum for me, Carter. I wish I was there so I could swallow every last drop.\" I imagine him on top of me, his weight pressing into me, holding me down, surrounding me, and I start to moan quietly. My orgasm is approaching and it's bearing down on me.\n\n\"Oh fuck Ally, oh fuck. You smell so sweet, your scent, Ally\u2014I'm going to cum.\"\n\n\"Do it, Carter, cum for me, shoot that load.\"\n\n\"Ffffuuuuuuccccccckkkkkkk, I'm \n\nccccuuuuummmiiiinnnggg,\" he gasps.\n\nMy pussy starts to spasm as I hear Carter's orgasm. I can imagine his throbbing head letting loose with strand after strand of delicious cum and it sends me over the edge. I follow right behind, working my clit, rubbing it hard and fast. \"Oh Carter, oh Carter, oh Carter,\" I moan. \"I'm cumming, baby.\" And my wet pussy is swamped with my juice as I clamp down on my plunging digits, slowing their thrusts.\n\n\"Oh Carter, I wish that load was in me. I came so hard for you.\"\n\n\"Ally, I want you, too.\"\n\nWe talked dreamily for the next few minutes, but I could barely keep my eyes open. \"I have to go, Carter. I'm falling asleep.\"\n\n\"Me too, Ally, but I love that yours is the last voice I'll hear.\"\n\n\"Good night Carter. I wish I was curled against you.\"\n\n\"Good night, Ally.\"\n\n\"Good morning, Mrs Winters.\" Carter's mom opens the door for me.\n\n\"Hi Ally. Carter's not ready yet. How are you today?\" I can't tell if she's distracted or a bit frosty after yesterday, but I decide the best course of action is to act penitent.\n\n\"Good, thanks. I, uh, just wanted to apologize for yesterday, with Teddy. Carter was just showing me a picture he has up there.\"\n\n\"What picture is that?\"\n\n\"The one from the science fair in grade nine. I just didn't believe him that he had a picture of me in his room.\"\n\n\"You're in the picture?\"\n\n\"Yep, fourth place. My friend Julia came third behind Carter and Kevin.\"\n\n\"Oh, my, how funny is that?\"\n\n\"Carter deserved first, but I was pretty upset that I didn't place better. I'm sorry, we weren't doing anything, but I promise, it won't happen again.\"\n\n\"It's okay, I mean you're both legally adults, and stuff is bound to happen. We're just happy he's finally found someone. His father and I were so worried.\"\n\nAt that moment Carter walks into the room and he blanches at his mother's words.\n\n\"Carter's an amazing guy, and I'm lucky to have him.\"\n\nCarter\n\n\"Hey, here's the ticket from Andi, Carter. You owe me forty bucks.\"\n\n\"Thanks Kevin. I'll pay you tonight, okay?\"\n\n\"Yeah. I know where you live.\"\n\n\"I told my mom about prom last night and she nearly lost it, she was so excited. You'd think she was the one who was going.\"\n\n\"Does she like Ally?\"\n\n\"Yep. They really seem to hit it off. Ally apologized for being in my room yesterday and my mom nearly gave her permission to be up there.\"\n\n\"You're lucky. My parents hate Darla. They think she's a drain on my GPA.\"\n\n\"You don't drink, smoke, or do drugs; you have to have some sort of vice,\" I point out.\n\n\"I guess they weren't happy that it was of the big breasted variety. They don't approve of how Darla dresses.\"\n\nTo be fair, Darla does dress rather provocatively, but she's an honour student. \"She has great grades and a great rack, but she's also the nicest person ever.\"\n\n\"I know, but her classes are all arts classes, and my parents really only respect math and science. It's a bit ridiculous.\"\n\n\"My parents are just happy I found someone.\"\n\n\"Me too, Carter. Now I won't feel so guilty when Darla and I ditch you at parties.\"\n\n\"Shut up, Kevin,\" and I give him a punch in the arm.\n\nIn between classes, Paul walks up to me. \"Hey Carter.\"\n\n\"What's up, Paul?\"\n\n\"First, here's the prom ticket. Secondly, I need a favour.\"\n\nScore! I started today with no tickets, now I have two. \"Thanks for the ticket, I owe you forty dollars. What's the favour?\"\n\n\"Could I sit with you and Ally at lunch? Maybe Greg, too?\"\n\n\"Sure, why? Do you need extra tutoring?\"\n\n\"No, but I want to sit with him without Megan coming up to set me up with some random girl. She won't come anywhere near you and Ally.\"\n\n\"Aren't you worried people will say something?\"\n\n\"I don't care anymore, I just want to sit with Greg. Everything else is bullshit and in another few weeks I'm probably never going to see any of these people anymore.\"\n\nIt's the weirdest lunch ever. Ally and I are obviously flirting\u2014heavy on the innuendo, Darla and Kevin are the longstanding established couple, and Paul and Greg very definitely have something going on. We all have books out under the pretext of studying, but really not much gets done. Also there are very definitely people looking at us\u2014two members of the popular set, two geeks, and two theatre people. But it works. We have a great time and aside from some odd stares we are mostly left alone. Megan and her cronies are saying something, but not where we can hear, especially with Paul here. Megan is still hoping to use him for someone's date so she doesn't want to make h",
        "im angry.\n\nIn history, Paul sits with me again.\n\n\"Thanks for lunch, Carter. It was great to be able to be with Greg with people who know. Kevin and Darla know, don't they?\"\n\n\"Yeah, but I promise they won't say anything.\"\n\n\"No, it's okay. I don't think I mind. It's going to come out at prom anyway, if not before then. I'm done hiding.\"\n\n\"So you're going to go with Greg?\"\n\n\"I think so.\"\n\n\"That's fantastic Paul. Ally and I will totally support you no matter what.\"\n\nBack at Ally's after school, we have her house to ourselves.\n\nWe are kissing on the couch and slowly moving from the vertical to the horizontal when Ally says, \"So, want to see my room? After all, I saw yours yesterday.\"\n\nI grin and nibble on her ear, \"I don't know, do you have any pictures of me up there?\"\n\n\"No, but I have something you might want to see.\" She stands up and pulls me from the couch.\n\n\"What's that?\" I raise my eyebrow, but I know what she wants and my heart is pounding in my chest. My dick is already at attention, although slightly flagging with nerves.\n\n\"Come look,\" Ally starts up the stairs, dragging me after her.\n\nShe opens the a white door at the top of the stairs and we enter her room. I am fascinated. Aside from my cousin Sara, this is the first girl's room I've ever been in. The walls are a pale pink colour and her floor is messier than mine, littered with all variety of clothing. She has two large bookshelves filled with novels of all kinds, some worn, others appearing untouched, and her room smells faintly like her\u2014not perfume, but like the pleasant odour that clings to her body that I can't quite describe, unmistakably Ally.\n\nDominating the centre of the room is her bed, rumpled and covered with an excess of pillows. Ally sees me looking and throws herself down, amongst them. \"We don't have to do anything if you don't want, Carter.\"\n\n\"No, I want to, I'm just nervous.\"\n\n\"Why don't we start slow. How about you undress me?\"\n\nI kneel on the bed at her feet and lift her left foot onto my lap. Sliding my hand up her ankle, I slowly tug off her sock, running my fingers along the underside of her foot. Shrieking, Ally kicks me.\n\n\"Not that slow, you twit, we'll be here until next year, besides, that tickles.\" Ally reaches down and takes off her other sock, tossing into a pile of laundry by her closet.\n\n\"Fine, since you ruined the mood,\" I reach for her waistband and pop open her shorts. Then I catch a glimpse of the black lace of her panties and I slow down again, she takes my breath away, her creamy pale skin against the black lace. Easing her shorts down, she raises her ass slightly and wiggles her hips so that I can get the fabric out from beneath her. When I remove her shorts fully, I bend down and place my lips on the wet cloth covering her aroused pussy, giving her a light kiss, the heat from her pussy radiating outward. Inhaling, I am dizzy with her scent, fuelling my lust.\n\n\"Oh fuck, Carter,\" Ally groans, bucking towards me with want. \"Please.\"\n\nI lift her legs and pull off her panties, eyeing her wet pussy and trimmed bush. Then run my hands from her ankles all the way up her legs, savouring the feeling of her bare flesh. My cock is straining in my pants, and when I reach up to take off Ally's shirt she unbuttons my jeans, freeing my hard pole and runs her hand over it. \"Oh my god, Ally, don't, you'll make me cum.\"\n\n\"We can't have that, Carter, I want your cum in me. I need your cock,\" Ally frees her tits from her bra, then pulls my shirt off. \"Lay down, Carter.\"\n\nWithout thinking twice, I obey her and lay where she points. Ally moves between my legs and works my jeans and boxers off, leaving me naked and exposed on her bed. She pulls my legs apart and bends down, licking the drip of precum at the head of my dick. \"Fuuuuccckkk,\" I groan. I don't want to cum yet, I want to be inside her, but she's driving me crazy.\n\nAlly slides her naked body up mine, nipping at my chest, then my lips, grinding her wet pussy against my cock. She reaches down and guides the head of my cock to her wet, tight hole. My heart is pounding through my chest in nervous anticipation and I'm afraid I might have a heart attack before I actually get to fuck her. The feeling of entering her for the first time, my cock being used for it's purpose for the first time is indescribable, the rightness of it, the perfection, the overwhelming sensation of it. Just when I can't imagine it being any better, then it is. Ally groans and lowers herself further onto my cock, and I put my hands on her waist, feeling her hips move on my cock. As my head moves deeper, her pussy stretches around my shaft, the pleasure driving me wild.\n\n\"Oh my god, Ally, you feel so fucking good, I don't know how long I can go.\"\n\n\"Fuck me Carter, your cock is so big, it feels soooo goooood.\" She slams her pussy down on me, my balls against her ass, my cock hitting deep inside her. Her tits are bouncing near my face, her eyes are slitted with lust, and she is the most fucking beautiful thing I have ever seen.\n\nI can't hold back any longer and can feel my balls tighten, preparing to shoot my load.\n\n\"I'm going to...going to...\"\n\n\"Come in me Carter, let me feel your load inside me.\"\n\n\"GGuuuuuunnnnnnnnnnhhhhhhhhhhh.\" I've lost the ability to feel anything aside from my cock firing streams of cum in her pussy. I can't imagine anything better than this and I never want to do anything but put my cock in her, keep my cock in her. My eyes have rolled back in my head, and my back is arched trying to keep my cock as deep in Ally as possible.\n\nAlly\n\nI knew he wouldn't last long his first time, but I also know he will be able to fuck me again soon, and longer the second time around. His cock is still inside me and hasn't fully gone down\u2014I don't intend on letting it go down.\n\n\"How was that, baby? You like being in my pussy?\" I smile down on him, while I stay straddling his hips. I'm not going to let him up.\n\n\"Fuck Ally, you're so tight, and just so, so, fuck.\" Carter's eyes still haven't focused fully and he appears to be somewhat incoherent.\n\n\"Are you having a hard time with your words, baby?\" I ask seductively, enjoying my role as siren.\n\n\"I just, wow.\" Carter's still breathing heavy.\n\nI put my hands on my tits and begin to work my nipples, rolling the tender nubs between my fingers. \"Do you like what you see, baby?\"\n\n\"Ally you're gorgeous.\" He moves his hands from my hips up the side of my body, placing his hands on top of mine on my breasts. \"I'm sorry it wasn't very good for you.\"\n\n\"Are you kidding? Your cock is amazing, filling me with your big load\u2014I love the way it feels in me, plus it was your first time.\" I squeeze my pussy slightly, around his dick, and watch his reaction.\n\n\"Holy shit, Ally, did you do that?\" His eyes widen in surprise.\n\n\"I don't see your cock in anyone else's pussy,\" I tease. But my action has the intended result because I can feel his cock growing hard again. \"Do you want to fuck me again, Carter?\"\n\n\"I think I could use some more practice,\" he says with a grin.\n\n\"I want you on top this time, Carter. I want you to pound me. I want to feel your weight on me while you drive that gorgeous cock in me. Hold me down and take me.\" I want him to make me cum, I crave it, I need it. I have to cum.\n\nCarter pulls me towards himself, kissing me deeply, tongue delving into my mouth, then flips me over careful to keep his cock inside me. Now I'm on my back and Carter fills my field of vision, his face fixed on mine, lust in his hooded eyes. A slight sheen of sweat coats his chest from the exertions of his first orgasm in my pussy. Slowly he starts to move, gently rocking then faster as his erection grows harder and firmer with every thrust until he's back to a rock hard state. His large mushroom head is stretching me wide with every plunge. I can feel every inch of him moving inside me and it is exquisite. His muscles in his shoulders and arms look so amazing as they flex over my body. I want to kiss, no suck, the dip in his clavicle where his shoulder muscles meet his neck. Every part of him is invested in this effort and I am reaping the benefits. I love feeling small beneath him, my tits jiggling as he pushes himself against me.\n\n\"Oh fuck, Carter.\" I can't help but groan, sharing my pleasure as he accelerates into my sopping pussy\u2014juice and cum slopping out of me and running down my ass and onto his balls. Carter leans down and bites my nipple, teasing me, making me groan deeply, \"Take me, Carter, fuck me, fuuuucccckkk meee.\" \n\nCarter responds by thrusting harder and faster, his balls slapping against my ass, his cock boring into me. Tilting my hips slightly, meeting his thrusts with my own, my clit is now grinding into his pelvis every time he drives his cock deep, bottoming out against my cervix. There is delicious pain sheathed in pleasure that accompanies his piston-like cock, driving me wild. I am not being quiet, but at this point his grunts are mixed with my cries of passion, a cacophony of sound. A crescendo is building, not just at my clit, but deep inside me, and my mind is spinning, all rational thought lost. Instead my mind and body are focused on one point, one intangible thing, welling up inside of me, dangling in front of me tantalizingly.\n\n\"Ohhhhhhhhh Gggggggaaaaaaaaahhhhhhhh,\" like a steamroller, my orgasm hits me, exploding fireworks, brain fuzzy, no thoughts, just waves, riding wave after wave of overwhelming pleasure. \n\n\"Fuuuccckkkk Aaaallllyyy,\" Carter growls as my grasping cunt sends him over the edge. My pussy spasms around Carter's meaty rod which begins to shoot volleys of cum deep into my cervix, his fluids increasing the intensity of my pleasure. I am pitching over a cliff, all reason lost, free-falling into bliss, cumming harder and longer than anything I ever experienced before while Carter's jerking movements begin to still.\n\nTears roll down my cheeks and I am crying. I don't mean to cry, I am not in the least bit unhappy, I am just so completely spent. I had no idea that sex could be this good, this mind-blowingly fantastic. My breath is still coming in gasps, and my throat is raspy from the insane sounds I made, and I am still having aftershocks. I thought I had cum before, but obviously there is cumming and cumming.\n\nCarter is propping up his upper torso on his elbows and staring at me intently when the stars clear from my vision. He lifts one hand and wipes the tears from my cheek.\n\n\"Ally?\" he says gently, eyes vulnerable, filled with insecurity, \"was that okay? Are you okay?\"\n\nA giggle escapes before I can stop it, I am not sure I can form a coherent answer. \"Y\u2014yyes,\" I manage.\n\nRealization spreads across his face, smile playing on his beautiful lips, \"Are you having a hard time with your words, baby?\"\n\n\"Yes, yes, yes,\" I laugh, still having a hard time regulating my emotion, everything just pouring forth. Carter's flaccid cock is squeezed out of my pussy due to my laughing, and suddenly I feel so empty, like a vital part of me is missing.\n\n\"I definitely think I need more practice, Ally,\" Carter grins and kisses my ear making me quiver from the sensitivity. All my nerve endings are raw.\n\n\"I think we need a shower, Carter. I'm kind of leaking everywhere.\"\n\n\"Yeah, I think I'm pretty soaked down there, too.\" Carter rolls off me and lays next to me, our hands intertwined.\n\n\"I might need your help standing. I'm not sure any part of me works.\" I really do think I've lost my voice a bit.\n\n\"Was it really that good?\"\n\n\"Holy shit, Carter, on a scale of one to ten, that was a million.\"\n\n\"Really?\"\n\n\"Really. But no pressure for next time.\"\n\n\"We get to have a next time?\"\n\n\"There'd better be a lot of next times. I don't ever want to stop having next times with you.\"\n\n\"Ally?\"\n\n\"Yes, Carter?\"\n\n\"I know this is pretty early on, but I think I love you.\"\n\n\"I think I love you, too, Carter.\" And he helps me stand so we can have a shower.\n\nEpilogue: 2 months later\n\n\"Carter, time to get up,\" I give him a kiss on his neck.\n\n\"Huh?\" His stormy eyes, groggy with sleep, open a little. If there's one thing I've learned at university so far, it's that Carter is not a morning person.\n\n\"It's time to get up for classes.\"\n\nHe sits up and takes in my tiny dorm room, rubbing his face. My new laptop sits on my desk next to the framed photo from prom, both of us with wide grins. What a night that was; Paul came with Greg\u2014the two of them were so cute together even though some people were rude, Megan's date threw up on her dress and got kicked out, Paul and I danced the night away, Kevin, Darla, Carter and I partied until dawn. Next to that is a dorm warming present from Mrs Winters, my very own framed copy from the ninth grade science fair, just like the one in Carter's room at home. I wrap my arms around him, my naked breasts pressed into his smooth back. We were up a bit later than planned last night, but our mutual orgasms allowed us to sleep contentedly. Carter's hair sticks out at add angles, all bedhead and cute looking.\n\n\"I guess we'd better get up,\" he finally says, still blinking. \"I'm going to have to go back to my room to get some clean clothes and have a shower. Did you want to meet up later for dinner?\"\n\n\"Sure.\"\n\nCarter stands and stretches, his morning wood standing at attention, his soft treasure trail glinting in the sun's rays that are creeping around the cracks in my blinds. My eyes follow his movements, muscles flexing beneath the supple skin. I still can't believe he's mine.\n\n\"What?\" Carter asks, catching me staring as he pulls on his pants.\n\n\"I'm just so happy. You're more wonderful than I could ever have imagined. This is so much more wonderful than I ever could have imagined.\"\n\nCarter leans towards me, tweaking one of my nipples gently before giving me a gentle kiss, \"I love you, Ally Patton.\"\n\n\"I love you, too, Carter Winters.\"\n\n\"Now get up and get dressed before I end up skipping classes to stay here with you.\"\n\n\"Yes, Sir.\" I giggle, rising out of the bed and falling into his arms for another quick kiss. His embrace is where I take my comfort, and to think it all started because I accidentally sat in his seat.\n\n*****\n\nThanks for reading. I really hope you liked it as much as I enjoyed writing it! I think I've already got an idea for another story."
    ],
    "authorname": "JaneSaysIt",
    "tags": [
        "cum swallowing",
        "male virgin",
        "mutual masterbation",
        "teasing",
        "panties",
        "high school"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/youre-in-my-seat-pt-04"
}
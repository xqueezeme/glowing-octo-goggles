{
    "title": "Life as a New Hire Ch. 34",
    "pages": [
        "This story plays fast and loose with Ancient History and Linguistics; be warned.\n\nThere are two distinct phases of falsehood. In the first, you realize you can lie to those closest to you. In the second, you realize you shouldn't.\n\nEditing magic performed by KJ24 and Shyqash, plus contributions by the regular gang of brigands and neer-do-wells.\n\nThere is a bit of mangling of the Iliad going on. I apologize to Homer and the countless singers before him who carried the Iliad down through the dark centuries until the Greeks figured out how writing works.\n\nThis time, I owe thanks to two people who created two key elements of this story. It wouldn't exist without them.\n\n*****\n\n(And the stars continue to shine forth)\n\n\"Stop trying to save me,\" Pamela remarked, once she was sure we were alone once more.\n\n\"Ask me to do something I'd at least consider doing,\" I sighed. \"Let's go back to the party...I'm not sure where we are.\"\n\n\"You've been walking in one big circle, Dummy,\" she chided me.\n\nWhy was she letting me off the hook for walking off with the Grand Villain in the scheme of things? Well, if she started hitting me, she probably wasn't sure she could stop.\n\n\"One of these days I'm going to screw up and not get out of it,\" I noted sadly.\n\n\"That is the epitaph of anyone who has ever taken up a weapon and a cause,\" Pamela smiled.\n\nMaybe she wasn't angry with me.\n\n\"Why aren't you more pissed off?\" I wondered.\n\n\"You are a good guy, C\u00e1el,\" Pamela enlightened me. \"That means you are going to reach out to people you think you can save. Personally, I don't think Alal can be, but then I'm biased.\"\n\n\"Guy coming back from the dead?\" I inquired.\n\n\"Damn right. No more surefire way to anger an assassin than to come back from the dead,\" she related. \"Did you take note of his body?\" \n\n\"Not really. What did I miss?\" I requested.\n\n\"It didn't look right,\" Pamela shook her head. \"Nothing more specific than that. I was hoping, since you touched him, you might have picked something else up.\"\n\n\"Nope. I was too busy slipping a GPS locator on him,\" I grinned.\n\n\"You don't have one and the technology doesn't work that way, ya numbskull,\" she play slapped my left bicep.\n\n\"Wouldn't it be cool if it did?\" my grin broadened.\n\n\"Laugh it up, Monkey-boy,\" Pamela countered. \"Buffy would have you tagged like a mule deer in Yellowstone.\"\n\n\"Eeeekk,\" I gasped. \"Point taken.\"\n\n\"Well...\" Pamela huffed.\n\n\"He's going to kill my soul,\" I observed. \"Now I'm sure of it. All of that discussion was just gauging my personality so that when he offs me, he can become C\u00e1el Nyilas / Wakko Ishara.\" Pause.\n\n\"Good for you,\" Pamela let go of a tense breath. She didn't have to ask.\n\n\"The whole Condottieri situation is a scam,\" I passed on that bit of information I'd first put together with the Vizsla. \"It never left Granddad's control. Currently he's going to use various other factions to kill off the Condottieri and Illuminati leadership that oppose him, then it is Unity Time.\"\n\n\"If he takes your place, that gives him leverage on the Amazon Council plus your appeal to the 9 Clans and the Earth & Sky,\" Pamela helped me work things through. \"He couldn't get his hooks into the Egyptians because they knew too much about him. Matters of race stymied his efforts with the Earth & Sky and Seven Pillars.\"\n\n\"Except I saved Temujin and he's been supplying them with weapons and tech for over fifty years,\" I told her. \"Even when he was dead, his plan was working...he had predicted the path that warfare would take, invested wisely and left orders to implement his plans. When the time came, they were ready to take out the Seven Pillars.\"\n\n\"Without you saving Temujin, the E&S wouldn't have cared...but you,\" Pamela nodded. \"If it comes down to his coalition of Illuminati, Condottieri, Amazons and 9 Clans, the Egyptians will join him - Global Unification has been their goal all along,\" she continued. \"Besides, you made one hell of a positive impression on them the only time you've met. Bang up job, Stud.\"\n\n\"Temujin will join as well. He's anything but suicidal,\" I finished the roll call of my fate. We were almost back to the rave by this time. \"You know, you could kill me and short-circuit all of this mess,\" I reminded her.\n\n\"No way. I plan to win, damn it,\" Pamela patted me on the back. \"Save the Dum-sel in Disrepute, slay the Evil Warlord and re-retire with a boatload great-grandbabies to spoil.\"\n\n\"I gave the Vizsla a clue,\" I let Pamela know the possible complications to her plan. \"In 1847, one General of the Condottieri tried to have the Italian Black Hand kill another. Unfortunately, the victim in question was a puppet for Grandpa and the assassin team attacked them both. Because they saw his face, he hunted them back to their base and slaughtered the entire Verona Chapter house of the Wolf.\"\n\n\"He must have fucked up a few other times as well,\" Pamela assured me. Speaking of miscalculations, Anya, Katalin and Orsi broke from the thrashing mob and ran up to me.\n\n\"Your crazy ex-girlfriend called,\" Anya seemed steamed. \"She insisted must she talk to you.\" At first glance, it would be 'which crazy ex-GF'... except only one had Anya's phone number. I took her phone.\n\n[French] \"Bonjour, ma petite amie m\u00e9chante ,\" I greeted Anais, the Mountie. Yes, I was calling her a 'meanie'.\n\n\"C\u00e1el, how are you? Where are you?\" she was truly concerned. I didn't doubt her sincerity. I also didn't doubt she was convinced she knew what was best for me, as well.\n\n\"I've talked with the Hungarian Police too,\" I let my pique come through. \"You screwed me over. I asked you to let me handled this and you didn't.\"\n\n\"You are still a Jerk,\" she snapped. \"I've been trying to help. And from the sounds of it, you are at a party.\"\n\n\"It's a rave. It is a rave brought about by the police keeping people penned up in the town all afternoon. Now, if you would stop treating me like a freaking child, you would realize that I'm actually safer in a crowd than I am alone, holed-up in some room without a weapon because you've made it so that the TEK is now keeping a sharp eye on me,\" I retorted.\n\n\"Can't you tell I'm trying to help you?\" she got loud, on the cusp of becoming enraged.\n\n\"Yes. I called you ... asking for help. I also called to apologize, without making it sound like some lame stupid stunt to get you back. I'm in real trouble here and I've put other people in danger at the same time,\" I told her. And yes, I planned to get some 'Anais' when I got back to North America.\n\n\"I'm telling you,\" she persisted, \"let Hungarian law enforcement help you.\"\n\n\"I'm trying to make you understand,\" I countered, \"that this is a situation that the police can't help me with. I called you because I believed I could trust you, even though you hate me.\"\n\n\"I'm angry with you, C\u00e1el. I don't hate you,\" she grumbled. \"I am trying to help.\"\n\n\"If I didn't believe that, I wouldn't still be talking to you, Anais,\" I allowed. \"What did Timothy tell you?\"\n\n\"Is that all you care about?\" she grumbled.\n\n\"Actually, this is me trying not to be a selfish jackass,\" I said. \"People are in danger because of me and I need to make sure they are safe before I take care of myself.\"\n\n\"That's...very unlike you,\" Anais sounded unsure.\n\n\"I've been doing some growing up since graduation,\" I replied. \"I only wish I'd grown smarter.\"\n\n\"I...I'm sorry about your Papa,\" she quieted down.\n\n\"They gunned him down in his own home,\" I told her. \"Dad never touched a gun in his life and they shot him with an assault rifle.\"\n\n\"Oh...well, I understand your Federal Justice Department is investigating the matter,\" Anais tried to comfort me. \"I talked with your Prosecutor Castello. She wouldn't tell me much.\"\n\n\"Pity,\" I mumbled. \"I know they are having difficulties.\"\n\n\"It is an American problem,\" she noted.\n\n\"Not really,\" I sunk in my hooks. \"We've been working with MI-6 and the CIA. They are all part of that international task force I told you about {see last chapter}.\"\n\n\"Yes - how did you get Irish diplomatic status? That doesn't make any sense,\" she perked up. Anais liked puzzles. Actually, she liked solving conundrums. It made her a great cop.\n\n[German] \"We are missing the party,\" Monika protested.\n\n[French] \"That's right. Tell your EX-girlfriend good-bye, C\u00e1el,\" Anya insisted loudly.\n\n\"Who is that?\" Anais groused.\n\n\"It is Anya, the Bulgarian mechanical engineer. We've had sex since you and I last talked and I think she's feeling a tad possessive,\" I explained.\n\nPause.\n\n\"Bastard,\" Anais seethed. I was sure her pussy was twitching already. \"Fine. I talked with your roommate - he says you have my uniform in a dress bag and my boots in a sealed box, so I forgive you. Anyway, he said Odette called, and she gave him a number to give to you.\"\n\nSince it didn't have 555 in it, I had hopes it was genuine. This was not the time to give Anais the quick kiss-off.\n\n\"I appreciate it, Anais,\" I sighed with relief. \"Have you decided which restaurant you want to go to when I get back?\"\n\n\"I haven't given it much thought, C\u00e1el,\" I could feel her defrosting further. \"How can I keep in touch with you?\"\n\n\"Ugh...I don't have my own phone right now. Tomorrow I'm going to steal some means of conveyance and...\" I grinned.\n\n\"Don't tell me that,\" Anais complained. \"I'm still an officer of the law.\"\n\n\"Well, the new 'me' is trying to be more honest with you, Anais. I've got to get out of town tomorrow. Would you rather I lied to you...again?\" I confounded her.\n\n\"Well...no. Try to be careful, prends soin de mon amour,\" she sighed.\n\n\"I will call you as soon as I'm able. Thank you again,\" I signed off.\n\n\"I still say, 'that one' is confused about her 'ex' status,\" Orsi teased me.\n\n\"Do you know what is worse than having one woman save your soul?\" I tossed out to them. They could not divine an answer. \"Having three women do it at the same time, for different reasons. Now I believe we have a party starving for our attention.\"\n\n(Reunions)\n\nPamela had convinced me the motorcycle driver who belonged to our newly acquired BMW K1600 GT would be at least four hours regaining consciousness and getting himself untied. We had stopped at a petrol station along the 431, between Kiszombor, Hungary and the Romanian border. She wanted to fuel up before the border crossing...in case things didn't work out...you know, with our guns and this stolen vehicle.\n\nShe was already peeved that I'd stopped in Szeged to pick up a few pounds of paprika. Rumor had it that the fields around that stretch of the Tisza produced the highest quality of that spice on the planet, especially the sweet kind. Pamela pointed out I knew 'jack' about cooking. I agreed. What I did know was cooks - the female variety.\n\nFresh spice from the 'source' was way better than a dozen roses, even with a box of chocolates added. Did I have a cook lined up in New York? No, but I was sure I could find one. Wait! Yasmin, my Brazilian, ex-Super Cop, hottie should be back in town by now. If she didn't cook, she'd definitely have a friend I could seduce. \n\nHonest to Ishara, I was starting to believe this constant 'work-work-work' was ruining my normally poor judgment where sex and fidelity were concerned.\n\nPamela was getting some lunch for us while I gassed up my crotch-rocket. My luck kept being...exceptional. Two Hungarian motorcycle troopers showed up; both were women and they apparently had decided that I was worthy of attention. Hey, I'm good-looking...and I was wearing a ballistic vest. (The durability of my long coat wasn't so obvious.)\n\n[Hungarian] \"Nice bike,\" the first one - the one directly confronting me - said.\n\n[Hungarian] \"Thanks. It is a KT1600 GT - 2009,\" I smiled. \"What are you two on?\"\n\n[Hungarian] \"Yamaha FJR1300A's,\" she answered. I put up the nozzle, capped the tank and walked over to her conveyance. It was a really sweet ride.\n\n[Hungarian] \"You have a gun,\" she noted calmly. She and her partner both had their hands on their holstered weapons. Since the flaps were still down, I wasn't panicking.\n\n[Hungarian] \"Yes. More than one in fact,\" I kept pretending to look over her bike while I was really scoping her out. I'd nailed all six boat girls and then had the Macedonian babe for breakfast. So I still had three good sexual bangs in me before dusk and these two were nice and pleasant enough.\n\n[Hungarian] \"Do you have permits for those?\" she asked. Her partner was calling something in.\n\n[Hungarian] \"Are we still in Hungary?\" I mused. The question was a joke.\n\n[Hungarian] \"I believe we are,\" she smiled. Sure, I may have been a dangerous felon, but I was a nice looking and engaging one.\n\n\"Nope. I'm afraid not,\" I sighed. She understood my English.\n\n[Hungarian] \"Why are you so armed?\" she kept calm. \"Are you law enforcement somewhere?\"\n\n[Hungarian] \"Does a secretive, non-governmental, paramilitary organization count?\"\n\n[Hungarian] \"No,\" she sighed. \"That sounds rather criminal. So, what are you carrying?\" That was a nice way of saying 'give me your gun'.\n\n\"Left, right, back, or ankle?\" I replied. \"Which one do you want first?\"\n\n[Hungarian] \"Let's try this again. Can I see some form of ID?\" she remained rather comfortable despite this having to be the most bizarre traffic stop of her career.\n\n\"I'm reaching around to my right rear jean pocket for it,\" I related. Something dating Anais had taught me was that you always tell an on-duty cop what you are doing before you do it. \n\nShe nodded, so I pulled out my NY Driver's license, my US passport and my Irish Diplomatic ID. She began looking them over.\n\n[Hungarian] \"You are C\u00e1el Nyilas?\" she looked over my documents.\n\n[Hungarian] \"If that who it says I am, then yes,\" I grinned. \n\nFor a second, she was P-O'ed, then she realized I was playing with her. She snorted in amusement and returned to looking over my stuff. [Hungarian] \"Nyilas is a Hungarian name,\" she hummed.\n\n[Hungarian] \"Sz\u00e9kely,\" I clarified. \"My family emigrated to America at the end of World War II. I've actually come back here to look over the homeland.\" \n\n[Hungarian] \"You couldn't land in Bucharest?\" she handed me my ID back.\n\n[Hungarian] \"What?\" I feigned an insult to my intellect. \"Hungarian women are far prettier.\"\n\n[German] \"You don't appear to be Dortmund Schuyler,\" her partner looked me over.\n\n[German] \"Is that the guy who let me borrow his bike?\" I responded.\n\n[Hungarian] \"Do you have any proof of that?\" the first motor-cop asked.\n\n[Hungarian] \"What are you implying? Don't I look trustworthy?\" I gave her my puppy-dog eyes. The two law-women exchanged glances.\n\n[Hungarian] \"No,\" they pronounced in unison. \"Not at all.\"\n\n[Hungarian] \"Hello ladies,\" Pamela greeted the two. \"Do they know your real name?\" was aimed at me. I nodded. \"Okay, C\u00e1el, time for us to go.\"\n\n[Hungarian] \"There are the matters of your ID and Mr. Schuyler's bike,\" partner number two pointed out.\n\n[Hungarian] \"Please, let us go,\" I pleaded. \"I swear to God, we are leaving your beautiful country as fast as we can. When I come back, I will be able to explain all of this. Right now, I'm horribly pressed for time.\"\n\n[Hungarian] \"What is the rush?\" the first inquired.\n\n[Hungarian] \"People I barely know are trying to kill me. The TEK told me to stick around, but if I do, I'm going to get offed in police custody. My pursuers are some horribly bad people and they don't give a damn about law enforcement. Worse, they are armed to the teeth,\" I confessed. There was a long pause. In my short stay, I'd turned portions of Hungary into war zones.\n\n[Hungarian] \"You are serious,\" the first one gasped. They didn't want to believe my claim. In my favor was that law enforcement knew that both the Metro killings and the inn shoot-out were 'unsolved' (as in the authorities didn't know what the fuck had happened, or why) and there was even an attempt to blow up the near-by ferry (after all, the CIA wouldn't lie about that, would they?) \n\nI was a really nice guy, packing guns and wearing body armor. There weren't warrants out for Pamela's, or my arrest yet. They wanted to believe me ... plus attempting to restrain me was looking to be a terribly difficult undertaking with an attendant mountain of paperwork and several annoying internal investigation afterwards. The only thing they'd called in so far was Dortmund's bike plate.\n\n[Hungarian] \"Please,\" I made my final appeal. The two cops looked at one another. Finally, the first one made a brief dismissive gesture ... while slipping me her card. Pamela and I were mounted up, helmeted and out of there in less than five seconds. We were racing toward Romania and freedom.\n\n\"Care to explain that?\" Pamela shouted to me over the rush of the wind.\n\n\"What do you mean?\" I replied.\n\n\"I can't believe they bought that. You told them the truth and the believed it. I'm stunned - in awe,\" Pamela was both confused and amused.\n\n\"It wasn't the truth, it was the 'please',\" I innocently informed her. \"Law enforcement folks like things black-and-white. I needed help and they probably believed I was in danger. Easy-peasy. Besides, they know about all the trouble I've caused, the ordinance expended and that people are asking a ton of questions and not getting many answers,\" I added.\n\n\"I really need to meet Dr. Geisler,\" Pamela laughed, \"and thank her.\" My current mentor meeting my former mentor? Fun? I caught a glimpse of something out of the corner of my helmet's visor. I looked that way, seeing nothing out of the ordinary. \n\nThe Romanian checkpoint was a breeze. The man who waved us through was more interested two co-eds in the classic Karmann Ghia convertible behind us. Having exited Hungary's south-eastern border, we now had to angle north to catch up with the majority of our troupe in Arad. DJ682 was our route of choice and, as we raced along, it highlighted the fact that...Western Romania looked remarkably like Eastern Hungary. The Mures River provided an adequate distraction. Unfortunately, the distraction was proving more spooky than amusing. \n\nI caught glimpses of something swimming underneath the river's surface - again, close enough to the outer edge of my perception that I couldn't form a complete mental picture of what was there. Just that it was very big, whatever it was. Even Pamela's sixth sense was getting that 'creepy' feeling. The closer was got to Arad, the stronger the sensation became. On the city outskirts, I made the call to the number Anais gave me. \n\nRiki Martin, our US State department liaison, answered, \"It's about time!\" She sounded slightly exasperated. It was the 'hurry up and wait' phenomena.\n\n\"Ummm...I come bearing news - some good; some bad,\" I offered up.\n\n\"So do we,\" Riki replied. \"You could have called us to let you know you survived the inn. Selena was less than helpful when she finally showed up,\" she chastised me. \"She and Ildiko (Alkonyka's real name) arrived with her sister, Angyalka, early this morning,\" she gave me the good news.\n\n\"What kind of shape are they in?\" I inquired.\n\n\"They're alive. Now, make it snappy. Delilah is heading down to the lobby as we speak. Come to the XO Residence, Dr. Iona Ratiu 13,\" Riki informed me. \"How much longer before you get here?\"\n\n\"We'll have to ditch our ride and hitchhike in, so it will be a while,\" I answered.\n\n\"Hurry up...do you listen to the news?\" Riki tossed out there.\n\n\"Only when I'm dating an activist, or a poli-sci major,\" I said.\n\n\"You are hopeless. Be happy you are good-looking and reputedly hell in the sack,\" Riki grumbled then hung up. I wondered what that was about.\n\nI turned to give Pamela the news - she had remained seated on the bike - when I nearly jumped of my skin. There was a woman, but only in the context that it was an eerie facsimile of a female human body. She reminded me of demon wearing a human suit actually. She was behind Pamela, on the edge of the highway. My mentor followed my gaze which only confirmed my thought that only I could see her/it.",
        "\"Yes?\" I attempted communication. By the way, this thing looked as if was furious with me. Its 'not' being a ghost was yet another misfortunate tiding. The creature didn't respond, so after fifteen seconds, I mounted up and rode away.\n\n\"What was it?\" Pamela asked.\n\n\"I...I haven't a clue,\" I replied. \"It...her...not a ghost. It is almost like...not really, but kind of like Dot Ishara. The thing is, I can't see Dot unless I'm concussed.\"\n\n\"Is that a quiet plea that you want me to brain you?\" Pamela teased. What else could she do?\n\n\"Why don't I just ram us into a building - spare you the guilt?\" I bantered back.\n\n\"Oh, don't trouble yourself. I don't feel one smidge of guilt about hitting you as long as there is hot body at the other end of your stream of consciousness,\" Pamela kept joking.\n\n\"Tell me again ... Why does Daphne think you are a nice person?\" I chuckled.\n\n\"I give her candy,\" Pamela enlightened me. \"You should try it some time.\"\n\nLest I forget, Pamela and I had non-specific agreement that I'd knock up her two granddaughters. You would have thought that by now, she knew me well enough to have changed her mind. She hadn't, suggesting that she was probably as irresponsible as me. I was cool with that. We ditched the bike where it was sure to be stolen by someone else.\n\nTwo blocks later, we flagged down a taxi driver who wasn't intimidated by our two ~37 kg duffels. He was a young man with a Ukrainian father and a Romani mother, and thus was universally despised and distrusted by everybody in town, or so he claimed. Pamela countered with her belief that he was actually pure Romani, but he didn't want us to think he was a thief and that he was fishing for a sympathy tip.\n\nHe was good-natured about the whole exchange, so he got his tip; except he earned it by getting us to the hotel toot-sweet, not for his unfortunate imaginary parentage. One look at Delilah's face told me I wasn't in hot water over my escapades yesterday. To be fair to me, they'd known I was taking a risk meeting with the Vizsla. Delilah made a quick call, said three words then hung up.\n\n\"Hey C\u00e1el,\" my Brit minder greeted me. \"Pamela, were you followed?\" Why couldn't she have asked me that? I'd spotted the hot looking number in a deep brown micro-mini two blocks away.\n\n\"No, not in the usual way. C\u00e1el's been seeing some supernatural creature,\" Pamela stated in all seriousness. \"I haven't glimpsed it yet, but I agree that there is something out there stalking us.\"\n\n\"Wonder-fucking-ful,\" Delilah shook her head. \"Don't get comfortable. We are ready to go. We are taking the 200 train in thirty-six minutes to Teiu\u015f where we transfer to the 300 to Bra\u015fov and then the 400 to Miercurea Ciuc,\" she laid out our itinerary...in case we got separated, I guessed.\n\n\"Why are we going to Miercurea Ciuc?\" I asked.\n\n\"Your Dot gave you some useful advice,\" Delilah teased. \"Ildiko referenced your martial motto to a family graveyard in Miercurea Ciuc. It seems an archeological dig there turned up evidence dating back to the Dacians that was linked by iconography to some of the same graves in the cemetery - a half-Sun.\"\n\n\"That's handy,\" Pamela winked at me. \"Maybe they are all dead.\"\n\n\"Woot,\" I winked back. My freakazoid companion had returned with a vengeance. I recoiled from her glower, making Delilah and Pamela glance that way. They still couldn't see it.\n\n\"Can you hear me?\" I inquired at the apparently empty (to everyone else) space.\n\nIt began mouthing things to me...then tried again...then again - Sumerian. We had a winner. [Sumerian] \"Can - you - hear - me?\" I said. More thunderous anger. In fact, a deep, rolling peel of thunder rocked the city. Not Good! \"Would it kill you to just say 'yes'?\" She didn't answer with her lips. She answered with her eyes.\n\nVirginia came around the hallway corner from where their rooms must have been located in the lead of a group. She was scanning about for threats like all good FBI agents should when they hang out with me. Chaz came next, quickly followed by Alkonyka who was holding someone I assumed was her sister, Angyalka. The creature's gaze snapped to the Lovasz sisters. I'm an idiot.\n\n\"Don't,\" I cautioned as I raised my voice to the monster no one else could see. I even interposed myself - reference me being an idiot. Everyone stopped moving...except Odette.\n\n\"C\u00c1EL!\" she squealed. I barely had time to turn around before she flung herself at me. Odette's legs wrapped around my waist, her arms around my neck and some serious lip/tongue action.\n\nAn unknown male voice interrupted my surprise.\n\n[Romanian] \"Is that Mr. Nyilas and who was he talking to?\"\n\n\"Yes, that is the man in question and I haven't a clue who he shouted at,\" Riki informed him. For me it was 'mum, mum, mum, mum' as Odette tickled my tonsils. I had to repay the favor.\n\n\"Oh,\" I heard Rachel mumble behind me, which indicated she'd come from outside. \"Just carry her with you and come along.\" Hey, when I was being smart, I listened to the chief of my bodyguard detail. Rachel steered me into a waiting mini-bus - courtesy of the Romanian government. \n\nAt the train station, Odette finally let me come up for air. I was proud of her. Timothy and I had suggested a workout routine and she'd apparently kept at it.\n\n\"I missed you so much,\" Odette panted. \"Selena came without you and I overheard her talking about where she'd left you and the way she looked...\"\n\nI looked over to Selena. The right side of her face looked...tenderized. I had no wish to see what the other guy(s) looked like. When she looked my way, I was happy to see the left side of her face was sporting one small cut.\n\n\"Thank you,\" I huffed. Selena gave me an odd look. It was her professionalism. \n\n\"Good job,\" Pamela gave a slight nod to Selena. \"I wasn't sure you could deliver in that short a time table.\" Selena's tiny slip of a grin was very different. The Black Hand killer certainly thought she was at the top of her profession. She also thought that Pamela was the better assassin, so her praise meant far more to Selena.\n\nPamela had also codified her accolade. She never implied that she didn't have faith that Selena could get the job done, only that the time constraint was the chief difficulty to overcome. I had so much more to learn if I was going to be saving lives more than risking them with the tasks I was foisting on myself.\n\nOur Romanian watchdog, Flaviu Molnar of the Serviciul de Informa\u021bii Externe (SIE) (aka the Romanian CIA), cleared out one of the train's passenger cars for us, then we got to work. Odette wanted attention. So did the world and it looked like the world was going to fuck me harder. Hana was doing good in the world ... and making far too many people in dark places take notice of her.\n\nSpeaking of which -\n\n\"The Ghost Tigers have been in touch. It will be \u20ac 150,000 for two weeks' work,\" Selena relayed their response to my earlier request.\n\n\"They've promised to protect Hana? When we talked, you mentioned that they didn't normally do that kind of work,\" I questioned.\n\n\"They never have before,\" Selena studied me. \"It seems they appreciate your efforts with the Seven Families - six now, I imagine.\" The Seven Families were the Ninja. Not enough appreciation to make it free, still... Now, how was I going to pay for that?\n\n\"I'll contact Katrina,\" Rachel spoke up.\n\nI had to ease Odette away from the center of this storm. She was unhappy, yet forgiving. Virginia and Vincent (our FBI people) stopped by long enough to welcome my return, then backed off. Delilah represented the UK. Riki stood in for the United States, Flaviu snooped for his nation, Rachel stayed at my side and Selena stayed on as the 9 Clans rep.\n\nChaz, the British elite, and Tiger Lily casually guarded the front of the car. Vincent and Charlotte took up a similar stance at the back. That left Virginia, Wies\u0142awa, Mona and Sakuniyas to rest easy, as was the Amazon way - always keep a portion of your force at ease so they could be alert for later duty. It was somewhat amazing to see FBI-girl and Saku already falling into that pattern. \n\nSo Hana had elevated me in the eyes of too many people ... and put herself at risk to boot. I was becoming a 'person of interest' to the United Nation's Security Council. I wondered if Bolingbrook would erect a statue of me, once I was gone: 'their most notorious alumni'. Even more onerous, the Russians had gone after Hana.\n\nOkay, that wasn't the horrible part of the news. It was the cast of characters at that luncheon that made me wish Ajax had simply used a pistol on me. It wasn't even a group of ex-girlfriends. No, this gathering's participants had been a good portion of my current roster of love interests. Dwelling on that dilemma almost made me miss the info-dump by Riki, courtesy of the National Reconnaissance Office (NRO).\n\nThe NRO was part of the US Defense Department, in case you didn't know. I could only reference the agency by way of comments made by one of my more conspiracy-theory conscious babes. Anyway, I was staring at a map of a portion of Northeastern Asia by the grace of Hana, Dot Ishara, Vladimir Putin and Temujin (note to self: nut-kick the bastards, should I ever meet them).\n\nOh yeah, Temujin could bend over backwards for Hana. For poor C\u00e1el; he pimp-slapped me with a useless title and thrust me into the frigging limelight, Starlight and gun-sights. So, I was looking at the information on Riki's laptop and getting the feeling that people were expecting me to do something. I toggled stuff. A key came up.\n\nOh...I was looking at military units. Red...those were the Chinese, so that made the Gold - \n\nKhanate and the Blue were Russians. There seemed to be a lot of Russians. There were a shitload more Chinese. Comparatively, the Gold Khanate forces looked spread so thin it had to be dangerous. There didn't seem to be any instruction page...as in what was I supposed to be doing.\n\nI steadied my 'cool', then took a sedate look at my companions. Nobody had a clue. Rachel was smart and militant, but her experience was with small unit tactics. Delilah was a Captain of something, but I didn't think it was the Defense Staff of the British Army.\n\n\"Captain Faircloth (Delilah), what are you a captain of?\" I decided to find out.\n\n\"Royal Air Force. I flew Harrier II GR9's, Tornado GR4's and the Puma HC2 helicopter - because I rock. Why do you ask?\" Delilah kept it friendly. \n\n\"Can you look at some planes and tell me what they do?\" I asked.\n\n\"Sure,\" Delilah settled in beside me. \"What kind of strategic template are we looking at?\"\n\nMy facial expression showed my incomprehension of that terminology.\n\n\"What part of the...oh hell,\" she chortled. \"I'll tell you everything I know.\" I liked that. I didn't like the freak appearing next to Chaz. He was in tune enough to see that I was concerned about his person, though the cause escaped him.\n\n\"There is a supernatural creature at your nine, Colour Sergeant. Think - that freaky chic from the Ring,\" I informed him. He nodded.\n\n\"Intension?\" he requested in his serious, competent style.\n\n\"Hold on,\" I told him. [Sumerian] \"Talking to me yet?\" I was at my saturation point for her bullshit. That bill came due when she 'flowed' across the car and lunged at me.\n\nI stood up, whipped out my knife and thrust the small blade as Pamela taught me. If anyone thought I was deranged, the computer's electron spasm made then double-think that. My blade did nothing but her hands...her fingers didn't end in fingers and nails...no, the tanned skin whitened down into silverish talons and they slammed me back in my seat. My nerves exploded in shear agony.\n\nIt felt like twin stun guns to either side of my neck.\n\n\"Lil\u012btu!\" Saku exclaimed with a battle-howl. That was Assyrian for she-demon. Her sword was drawn. In the few steps it took her to get to me, she twisted her grip so that she came at me with an upward sweep of her blade, swinging at a being she felt, yet could not see. \n\nI wasn't sure if the creature responding was a good thing, or a bad thing. Its left hand caught the blade before it could connect with her body. Saku shifted and flexed her thighs, trying to power through the resistance she could not perceive. My attacker twisted the blade, flipping Saku down the aisle, though the former Queen kept her sword. I slashed again - no effect. It looked back at me and...I knew that look. It was angry, just not angry with me. \n\nIt was frustrated, close to the point of exhaustion and was definitely a she. A she-what, I had no idea. I began putting things together. It couldn't communicate with me because of the 'gift' I had requested from Dot Ishara. By the Goddess's will, she couldn't read my mind. It was silly to think she'd denied herself the use of an ability. No, she'd rendered me immune to telepathy.\n\nMuch easier. That was also now biting me, and this creature, in the ass - communicatively. It dove back out the carriage window and was lost into the countryside we were traveling through. Saku's blade, like her bow, arrows and armor, came with her from the Netherworld, thus its ability to interact with the creature.\n\n\"Fuck,\" Delilah hissed. She was tapping away at the computer, trying to salvage the data the creature's interaction with the device had scrambled. Saku rolled over twice then regained her feet.\n\n[Akkadian] \"Where is it? I don't hear the Veil tearing anymore,\" Saku growled to me. Well, that told us what alerted the 'back from the dead' Amazon anyway.\n\n[Akkadian] \"It...\" I started then realized 'Oh, that's what was going on. It was trying to push through the Veil and...drag me back across...oh, so we could talk'. \"It left.\" Why would it do that?\n\n\"What was that?\" Riki. \"What's that smell?\"\n\n[Romanian] \"What is going on here?\" our SIE guy gave us all furtive looks.\n\n\"You're bleeding,\" Rachel pointed out to me and the rest. \"Mona.\" Mona hurried to my side, then led me across the aisle so she could work uninterrupted. The weird just kept coming. My ballistic vest was untouched, as was my shirt. I had ten dagger-like wounds in my shoulders and upper arms. Why wasn't I gushing blood? Mona leaned forward and sniffed each side.\n\n\"Your wounds have been partially cauterized,\" she observed.\n\n\"Funny,\" I snorted. \"I don't remember catching fire.\" I'd been electrocuted.\n\n\"You didn't. These are electrical burns,\" Mona corrected me. \"I take it these are the result of gunshot trauma?\" she indicated my bruises courtesy of Ajax's team.\n\n\"I found the guy shooting at me,\" I replied; Mona nodded approvingly. \"Riki and Flaviu, to answer your question, there is some supernatural entity tracking this mission. It is not a God, or Goddess in the traditional sense. Beyond that, I think there has been a fundamental misunderstanding between the two of us. It has been trying to communicate with me, but I can't hear it. The smell is ozone.\"\n\n\"That makes no sense,\" Flaviu shook his head.\n\n\"It...\" I turned and looked to the Lovasz sisters. \"I'm an idiot.\"\n\n\"You don't say,\" Rachel mumbled.\n\n\"No, it has to be Illuyankamunus,\" I tried, and failed, to smack my forehead. Mona had stopped me.\n\n\"It - she looks freaky in her human form. Earlier today, I caught glimpses of something much bigger tracking Pamela and me as we traveled to Arad,\" I said.\n\n\"If you can communicate with your Goddess, why hasn't that entity interfered?\" Riki inquired.\n\n\"If A, then B, then C,\" I muttered. \"Okay, I think that these entities have to be very careful when interfering with reality. If they do interfere, bad things happen. A direct confrontation would most likely suck, so I'm guessing my Matron is going to have to wait until Illuyankamunus leaves me alone, or finishes with me. That still has me wondering why it tried so hard to get at me. \n\nIt is interested in you two, Alkonyka and Angyalka, which makes me believe it is your matron goddess,\" I added.\n\n\"The thunderclap as we prepared to leave the hotel?\" Alkonyka's brow furrowed.\n\n\"Yeah,\" I nodded. \"She was in the lobby and very pissed.\"\n\n\"Tell me, what is the Illuyankamunus?\" Flaviu requested.\n\n\"The Primordial Dragon,\" Saku spoke up. \"Before there were any deities - even before the world had formed, this being and beings like it existed. Somewhere in their minds exists a desire to return all existence to that cosmic soup.\"\n\n\"Romania has had good luck with dragons,\" the agent reasoned. Mona began applying the Amazon super-secret healing goop (I suspected it was cottage cheese, cinnamon and aloe).\n\n\"I think I can restore everything,\" Delilah sighed at the computer, \"but it is going to take a while.\"\n\n\"You should lie down and allow the unguent to soak into your wounds,\" Mona 'advised'.\n\n\"I'll stand guard over him. The rest of you...don't,\" Rachel glared at the assembly. Riki and Flaviu were confused about this turn of events. To them, Rachel seemed a fair-faced guardian drone and they didn't attribute much initiative to her. They both knew that she was the head of my Security detachment, yet they didn't equate that to authority over me.\n\nThe two sisters were still trying to keep their heads above water. Vincent and Chaz understood our relationship due to their previous experience with us, but that didn't require them to see as much personal interaction. Odette, Virginia and Delilah knew the score and knew how strongly I appreciated Rachel's council. Rachel set me down in a window seat, pushed my seat back and then did the same for herself.\n\n\"C\u00e1el,\" Rachel took a deep breath, \"I wanted to tell you that you are doing better.\" That caught me off-guard. \"Your combat instincts are strong and getting stronger.\"\n\n\"This would be a bad time to tell you I took a long, private walk with my Grandfather then, wouldn't it?\" I was suitably worried about her temper.\n\nRachel's head came down on my chest, forehead to sternum. After a few seconds, I put an arm around her and patted her back.\n\n\"I gained valuable intelligence for the Host,\" I tried to comfort her.\n\n\"Of course you did,\" she mumbled onto my skin. \"You can't simply do something stupid for stupid's sake. You always have to find a way to make it worthwhile.\"\n\n\"Are you going to come after me on the Great Hunt?\" I referred to my post-internship group festivity that would have my being stalked by an as-of-yet to be determined group of my sisters.\n\n\"Why wouldn't I?\" she murmured. \"I finally get to hit you, knock you down and tie you up. Aaahhh,\" she sighed. \"It's a dream of mine.\"\n\n\"It's good to know you find me inspirational,\" I cooed to her softly.\n\n\"Don't force me make some pre-emptive adjustments to your anatomy,\" she whispered back. I awkwardly twisted my neck so that I could kiss the top of her head. That got Odette's attention. Thankfully she was smart enough to leave Rachel alone so she could de-stress.\n\n(The Legacy of the Dragon)\n\nIt turned out we didn't need to go the cemetery. The modern work on our gravesites had been very thoroughly explored by a Serbian Professor of Eastern European Studies, Dr. Arsenije Loma. It also turned out we didn't have to go to Serbia to find him. He'd moved to Miercurea Ciuc five years ago with his entire family. Apparently they had a nice spread west of the town, too.\n\nThis was not happenchance. This was both the personal history of Alkonyka and the product of her intuitive internet search. The link should have been tenuous, except it was a rising/setting Sun. The Sun Goddess was Arinniti. Added to that were a worm's bonanza-buffet of Nyilases just down the road. There were definitely other Nyilases still alive, but not in this area. And Nyilas was a rather utilitarian name - Hungarian for 'archer'.\n\nAs for the sisters; there were other Lovaszes in the county, but none were close relations. Their family's name tree was pruned four generations back going through a lone boy and a quartet of great-great aunts. That information left me deeply confused. The Dragon-Lady wasn't trying to bum-rush me anymore. She merely hovered around expectantly, as if there was something important for me to figure out.",
        "Flaviu flexed his governmental muscle once more, allowing us to highjack a few county vehicles. That joy lasted about fifteen minutes. Flaviu had gotten a call; Virginia relayed the news that it sounded like someone was putting his feet to the fire. They were in a separate van. Unfortunately, she didn't know Romanian. \n\nEven less pleasing was the answer to that dilemma as Tiger Lily stopped us in the white pebble driveway to the Professor Loma's manor house. Either Eastern Europe had a different pay scale for academics, or this guy came from money. Charlotte was out the passenger side door first while Pamela opened the van door.\n\n\"Did anyone think to call ahead to say we were stopping by?\" I tossed out there. No one responded, which implied we'd dropped the ball. \n\n\"The local university said he wasn't coming in today,\" Riki said, then her phone rang. She put a little thing on it that screamed 'super-spy stuff'.\n\nThat was good news. Pamela went exploring. Charlotte backed me up, accepting that her armed and armored self might not project the positive first impression we would need. The Romanian SIE agent came sprinting my way before I dropped the door knocker.\n\n[Romanian] \"Mr. Nyilas! Mr. Nyilas!\" he yelled. Nice. Now the people inside knew my name.\n\n[Romanian] \"Yes?\" I regarded him politely. Riki wasn't coming out of the van.\n\n[Romanian] \"The Russians want to talk with you,\" he seemed excited.\n\n[Romanian] \"That's nice. Tell them I'm busy. When I wrap up this business, I'll give them a call.\" What else was I supposed to say?\n\n[Romanian] \"No, they are sending someone to see you,\" he clarified.\n\n[Romanian] \"Fine, when will they get here?\" I huffed.\n\n[Romanian] \"About an hour. Helicopters of the 903rd and 904th Helicopter Squadrons are bringing her here,\" he exulted.\n\n\"Her?\" followed by \"Ouch!\" when Delilah smacked me in the back with Riki's laptop case.\n\n\"Stay on task, Dummy,\" Delilah teased me. \"You are like a dog seeing a squirrel.\"\n\n\"If you are calling him a dog,\" Odette sang out, \"you've got it half right.\"\n\n[Romanian] \"The Russian Foreign Minister asked my Foreign Minister to fly their military attach\u00e9 to meet with you,\" he kept going. \"What is this about?\"\n\n[Romanian] \"They are banking-rolling my rise to power, Mr. Molnar. I'm reviving the Kingdom of the Lands of the Crown of Saint Stephen,\" I winked - he blinked. \"Honestly sir, I haven't a clue why the Russians want to chat with me. I'm sure she'll let me know.\" He didn't like my non-answer. I rapped the door knocker.\n\nThe door opened up and there stood a cute...honestly, I had work to do, damn it!\n\n[Romanian] \"Hello, I'm C\u00e1el Nyilas,\" I presented my Irish ID. It looked the most impressive.\n\n\"I'm Dijana Loma and it's okay, I speak English,\" she dazzled me with her 'you look sexy' smile.\n\n\"Listening at the door long?\" I teased her. She sashayed her hips. I was in trouble.\n\nWhy was I in trouble? Freaky Dragon Lady was standing behind the girl looking at me rather impatiently.\n\n\"Yes,\" she snickered. \"Since your three vans pulled up in the driveway. Plus, today's been pretty boring so far.\"\n\n\"So, how is high school treating you,\" I prayed for her to be underage.\n\n\"I'm a freshman in college,\" she wiggled her hips once more.\n\n\"Of course you are,\" I shook my head. \"Can I see your dad?\"\n\n\"He's boring - I'm not,\" she grinned.\n\n\"I'm a very disreputable character,\" I cautioned her. \"I'm hated by women on three continents. You shouldn't trust me.\"\n\n\"I don't,\" this precocious imp kept playing with me. I fell to my knees.\n\n\"Please, have mercy. I'm so lonely for female companionship right now, but I have work to do that involves your father,\" I begged. \n\nDijana looked past me to the various women waiting to come in.\n\n\"What are all those?\" she pointed with her chin.\n\n\"They are all 'No-Fun Smurfs',\" I warned her.\n\n\"Oh, that's why you want to shoot him,\" Vincent addressed to Delilah.\n\n\"I don't want to shoot him,\" Delilah corrected her American ally. \"I want to wrap him up in duct tape and keep him in a closet until Christmas. Totally different thing.\"\n\n\"They don't seem to like you very much,\" Dijana noted as I stood up.\n\n\"No Miss, we all love him and we'd love him even more if he'd get back on task,\" Chaz stated, totally deadpan.\n\n\"Thanks Chaz, that's the nicest thing you've ever said to me,\" I looked over my shoulder. \"I take back what I said earlier. I would feel comfortable in a communal shower with you.\"\n\n\"Shut the fuck up, Carl,\" Chaz replied laconically. \"Work? Remember?\"\n\n\"I thought your name was C\u00e1el,\" my latest temptation inquired.\n\n\"It is,\" I shrugged. \"I find it best to not correct Chaz though. He's a professional.\"\n\n\"A professional what?\" Dijana kept at it.\n\n\"He's in landscape design,\" I beamed. \"The kind that normally involves airstrikes, artillery and copious amounts of man-portable kinetic energy.\"\n\n\"You could have just said he was a soldier,\" she snorted.\n\n\"No...no, he can't,\" Charlotte muttered.\n\n\"I'm a colorful manipulator of the spoken word,\" I sighed. \"Can I see your dad, please?\"\n\n\"Okay,\" she smiled, turned tightly, ass slightly thrust back at me, and off she went.\n\nI made my progress through the house nice and slow, and not only to scope out her pre-twenty tight butt. I was also letting Charlotte and Chaz, who were right behind me, scope out the environment as we moved. A young man and woman were halfway down the stairs when they spotted us.\n\n[Romanian] \"Sis?\" the male asked.\n\n[Romanian] \"They're some people here to see Da,\" she replied.\n\n[Romanian] \"I'm C\u00e1el Nyilas,\" I gave a mock-salute. \"I'm interested in dead people.\"\n\n[Romanian] \"I'm Vasilije and this is my girlfriend, Hajnalka,\" he made the introductions. The freaky she-thing was indicating that I should look at the guy. He was important. I didn't know why.\n\nDijana led me back to her father's spacious study, curtailing my conversation with his son and his son's romantic interest.\n\n\"Da, you have some visitors,\" Dijana announced to her father. \"This is C\u00e1el Nyilas. He's an Irish diplomat and he has interest in your work.\"\n\nYou would expect that several armed people walking around your domicile would elicit some sort of concerned response. Not this guy. He looked up, gave a gentle smile, stood and shook my hand.\n\n\"Welcome to my home,\" he said in heavily-accented English. \"What can I do for you?\"\n\n\"Professor Loma, I'm interested the 'Rising Sun' symbol from this region of Romania that you've referenced in your published works,\" I said.\n\n\"Oh...where do you want me to start,\" he sat back down.\n\n\"Let's start at the beginning and assume I know nothing of this area's history,\" I said, leaning against his desk.\n\n\"It all began when this cave was discovered in the Harghita Mountains by hikers in 1953,\" the Professor began. \"Initially, the investigating officials decided it was a mass grave where the advancing Soviets had killed Hungarian partisans in 1944.\" That was a politic way of saying the advancing Russians murdered captured Hungarian and Sz\u00e9kely soldiers - the latter were probably native to the region.\n\n\"Worried about regional tensions, Bucharest (Romania's capital) decided to rebury the dead with a few bones going to the Babe\u0219-Bolyai University in Cluj. In 1968, a visiting professor from Krakow came across the bones there and was curious about the damage they'd sustained. With some effort, he and the staff did some radio-carbon dating...and they discovered that one fibula came from the 2nd century CE while the second bone, a femur, was from five hundred years earlier - mid-4th century BCE.\n\nAfter some effort, a joint Romanian-Yugoslavian-French archeological team explored both the cave and the reburial site in 1971. They found there were well over two thousand dead - all men in their middle years dating from the late 7th century BCE to the mid-2nd century CE. It was amazing ... all the men were beaten to death. \n\nThe only religious iconography we could find was a cave drawing in an elevated nook. It is a series of pictographs,\" he finished with a grin. \"That's what drew me here in 2009.\" Then he showed me the first picture. It was a very crude figure of a man with his arms upraised. His left hand had a clear circle around it. The right arm had a dark circle with a larger, white 'X' through it.\n\n\"What were the other pictures like?\" I inquired. He showed me a larger picture that scrolled over the entire length of the primitive mural. The rightmost figure was larger than the rest...he had a long-handled axe in his right hand and a bow in the left, both upraised. Then came three more figures, linked hand-in-hand.\n\nThe middle of the three had a circle around his head. The one on the right had his hand upraised, yet empty. The one on the left held a bow upraised. The first figure I'd seen anchored the left end of the line. Over each figure was a series of scratchings. You would have to know what you were looking for, to understand those chicken-scratches. It was Old Kingdom Hittite.\n\nBeyond the first man I'd seen was a half-risen/fallen Sun...then I made out the triangle on the left while the center and right of the horizon was flat. Beyond the Sun were three taller figures. Two were clearly women while the third was a serpent. The first woman was drawn in red, the second was in yellow and the serpent was white.\n\n\"It is that figure that fascinates me,\" the Professor indicated with renewed excitement.\n\n\"What about it?\" I murmured.\n\n\"I've seen it repeatedly throughout the Balkans; everywhere but here - in Transylvania. In this one cave is the only symbol like that in the entire region. And it makes no sense, because it is also the oldest depiction of that figure that has ever been found.\"\n\n\"Which means?\" I was curious. I knew I was missing something crucial.\n\n\"I'm not sure. It is an archeological void. It is here, perhaps the cave was in use until the fall of the Dacian Kingdom to Emperor Trajan in 106 CE,\" he educated me. \"Then it appears again in the late 7th century in Thrace,\" seeing my confusion, \"Bulgaria.\"\n\n\"It remains in a few villages in the region until the 9th century, when it starts cropping up in various Slavic lands from northern Thessalonica to Croatia by the 11th century. In 1054 the symbol is associated with two name - \u0437\u0434\u0443\u0445\u0430\u045b and \u0432\u0435\u0442\u0440\u043e\u0432\u045a\u0430\u043a depending on which Orthodox Church records you read. In the West, they are called zduha\u0107 and vetrovnjak.\"\n\nCoolness. I was waiting for the punch-line, if there was one. This guy was obviously used to talking to things that couldn't talk back and couldn't flee.\n\n\"Convergent with this mythology was another peasant belief and in 1813, near ... well anyway, those mythologies finally came together - Dragon men,\" he beamed joy.\n\n\"Men who are half-dragons?\" I reposed. I had another idea where this was going.\n\n\"No - no,\" he shook his head. \"Men who mate with Dragons to forestall their wrath - exhibited by storms and other weather related calamities.\"\n\n\"On the cave wall,\" I nodded. \"The white 'X' on the shield is actually crossed lightning bolts and the 'S' is a dragon.\"\n\nThe man's mouth popped open in surprise.\n\n\"You see it too,\" his head bobbed happily.\n\n\"Yeah. It gets better,\" I sighed. \"Is there a high cliff near that cave those bones were found in?\"\n\nHe had to think about it before he accessed one of books. \n\nOne picture, not of the site, but close by, showed that there were indeed, high cliffs about.\n\n\"Those mean weren't beaten to death,\" I enlightened him. \"They committed ritual suicide in a process called 'taking yourself to the cliffs'.\"\n\n\"How do you know that?\" He was clearly intrigued by the idea, as it helped put some strange pieces together.\n\n\"I know of a society that does that today,\" I answered. \"Usually, when they feel age is overcoming them, they say good-bye to their families and meet their end on their terms.\" My long-ago ancestors had seen themselves as Amazons and kept to their traditions, up to and including their method of death.\n\n\"Do you have any proof of that?\" he worried.\n\n\"Which explanation makes more sense?\" I postulated. \"That a cult murdered people in rural Transylvania for eight hundred years and no one suspected, or that an insular society, practicing their own religious practices, lived here ... and their end of life traditions included a fatal leap to meet their demise.\"\n\n\"I concur, and it makes the nature of all the bludgeoning wounds make more sense. I can certainly have some members of the County Hospital take a look at some of the remains to see if they will support this hypothesis,\" the doctor was missing the obvious - like how I knew.\n\n\"I'm glad we are making some progress,\" I grinned. \"So how many of these markers are there and are any names attached to them?\"\n\n\"Oh!\" he piped up. \"That's the other fascinating part of story. Starting in the early nineteenth century, the families with that particular grave iconography started dying out.\"\n\n\"That's unfortunate,\" I remarked. My job was getting easier.\n\n\"It gets even more interesting,\" he continued, implying that my job might not be getting easier. \n\n\"You see, the males of those lines have been dying under mysterious, even nefarious, circumstances,\" he was almost giddy...sort of like the teenage-me with the latest Victoria Secret's catalog. \"They've been expiring like that for the past two hundred years. There are almost none left. In fact, my children and I may the only surviving ones among people born under that sign.\"\n\n\"C\u00e1el, is there a conspiracy to wipe out this man's bloodline?\" Chaz inquired politely.\n\n\"Hold on,\" I gave Chaz pause. \"You said that only the men have been getting offed?\"\n\n\"Yes...what do you mean by conspiracy? Who kills random people for 200 years?\" he was again clearly ignoring the obvious - like all the armed people in his house.\n\nDot Ishara pretty much assured me I was the last Isharan, until my baby-making exploits. Of the Arinniti sons, there was no sign. Why was someone offing the males of House Illuyankamunus, unless that blood line was like mine - carried through the Y-chromosome? But, we had a House Illuyankamunus, although there were only eight of them.\n\n\"Chaz, yes, I think his life and the life of his two sons are in danger,\" I addressed the Brit. \"I think his daughter may be a peripheral target as well.\"\n\n\"What makes you think our lives are in danger?\" the Professor was gripped with disbelief. He was a solid academic and a firm believer in the Rule of Law and that European society had matured beyond the need to use force to solve its problems. \n\nI was thinking in expanding circles of coincidence and logic. The Dacia Draco - the totem of the Dacian Kingdom, the tool of terror those people used against all their enemies. In that pre-Roman kingdom...what if the male Amazons had taken a role, serving as elite warriors for those Thracian kings? \n\nThe Dragon hadn't been a random pagan symbol, it had been a tribute to their Dragon Goddess - the only Goddess who had not abandoned them. The Romans must have slaughtered most of those Amazon sons and daughters. The most significant faction had left the homeland and continued their religious observances elsewhere. \n\nI supposed they did it so that the Arinniti and Isharans could go into hiding while they continued to practice their dragon-rites. Two hundred years ago, someone had figured out what was going on and killed...the males. Yet, Illuyankamunus was interested in the Lovasz sisters. While I'd been having my chat with the Professor, more people had come into the room.\n\nRachel directed her team to go over the terrain around the spacious house. She'd left Chaz, Selena and Vincent with me. Virginia, Odette and Delilah had gone to the kitchen with the Loma children (they'd sprouted a younger brother). The Lovasz sisters were with me, as was Flaviu. Pamela was wherever she was.\n\n\"C\u00e1el,\" Riki rushed into the study, \"we have a problem.\" That meant either I had a problem, or the United States had a problem with me. One look into her eyes told me this wasn't something that could go away quickly.\n\n\"Alkonyka, could you stick with the professor and find out if any more of you are hanging around,\" I requested then...\"Oh God, Alkonyka, your Dad was murdered.\"\n\n\"What?\" she and her sister looked my way.\n\n\"It fits with the Professor's discovers,\" I suggested. \"I'll be back ASAP.\" I followed Riki out of the room and half way down the hallway to the kitchen. Flaviu stayed close, too. \"What's up?\" I inquired.\n\n\"We have received intelligence that the Russians are looking for some sort of military agreement with the Khanate and you are supposed to finalize the deal,\" Riki studied me. \"What are they talking about?\" she added.\n\nI didn't go 'umm', 'ah' and prevaricate. \"How did the Russians know how to find me?\" I asked.\n\n\"We told them - the taskforce - at the insistence of Ms. Love,\" she replied. She was on edge and I couldn't blame her.\n\n\"Then let's re-examine those maps your people sent,\" I stated. \"There has to be something there I've missed.\" I was back in the Havenstone 'intuit your task' mindset. Chaz stuck with us. A few quick, worried looks by the kids left Riki, Chaz, Delilah, Flaviu and me alone in the kitchen. I went back to examining all the data I'd been given.\n\nDelilah began giving me the picture of the aerial struggle going on. In that portion of the globe, the Khanate held the advantage with the Russian Air Forces a close second and the PLAAF behind them. The Chinese still had comparable numbers, but their remaining quality was very inferior to the other two players. \n\nBetween the Khanate and Russians, the quality was close to the same, but the Khanate had the greater numbers and now, the actual combat experience. \"If the PLAAF (People's Liberation Army Air Force) and the Russian aviation team up, the Khanate's offensive will falter,\" Delilah finished up her analysis.\n\nBoom! Everyone wasn't looking at it the right way. They saw too few Khanate forces and I was wagering that they were focusing on the illusion of that weakness, not its strength. The Khanate needed to concentrate its forces and that meant they were feinting. It was the whispered voice of Alal coming into play. \n\nI perceived Temujin's intentions through the lense of a Master of War. The Khanate offensive against Heilongjiang province was one colossal dual-deception. He was deceiving both the PLA and the Russians into thinking he was going to ravage the region. No one believed he could seize it, but he didn't have to. \n\nHe could wreck the country pretty effectively by maintaining air superiority (which he had established) and the use of mobile forces outside the urban areas. The problem was that it was resource intensive for the struggling Khanate and eventually futile. He couldn't effectively besiege the cities nor stop the Chinese from supplying them. \n\nEventually the PLA would become strong enough to drive him out. Losses for no gain. Unless, he could deny the People's Republic of China Heilongjiang without invading. Enter the Russians. If he could convince the Chinese he could take the province, they wouldn't put up too much of a fuss when the Russians intervened.\n\nThe Russians could intervene because the Khanate had smashed the major PLA forces facing the Russian Army. The problem Temujin was facing now was how to guarantee the Russians did cross over the Chinese frontier. Numbers...well, they were sitting right there in the Russian city of Chita. Chaz told me the proper terminology was 'Force Projection'. \n\nNumbers alone didn't matter. It was the numbers you could bring to the battlefield that were critical. One Russian Army, the 5th, was placed defensively, warding the primary Russian Pacific port of Vladivostok. It could enter Northeastern China, but the terrain was hellish. Another army, the 35th, was where it needed to be - opposite the main avenue to invade the Heilongjiang heartland. ",
        "The Russians had two other armies in the Far East Military District, the large 29th (Chita) and the smaller 36th (Ulan Ude), except they were on the wrong (northwestern) side of Nin Mongol. That was the force projection Temujin needed. I needed to get the Russians from Chita and Ulan Ude through Khanate conquered territory and into Heilongjiang...and then the Chinese would be truly screwed.\n\nThe Khanate couldn't take the Chinese Northeast, so the next best thing was have the Russians control it, denying it to the PRC. I was working over the proper military/diplomatic phrasing with Riki and Delilah when this older woman opened the rear exterior door to the kitchen and walked in, juggling two bags of groceries.\n\nShe looked perturbed, not fearful, until she caught sight of my arm sheath. That worried her.\n\n[Romanian] \"My apologize Madam,\" I stood up straight. \"I am C\u00e1el Nyilas and I have some business with Professor Loma.\" Shit. She had the same knife-sheath. [Old Kingdom Hittite] \"What house are you with?\" That froze her in mid-stride.\n\n[OKH] \"Please, do not kill my children,\" she regarded me with some degree of hopelessness. She cast about the others. Tiger Lily came through the door behind her.\n\n[OKH] \"Why would I...oh, I am C\u00e1el Wakko Ishara, Head of House Ishara and Chief Diplomat of the Host, and I wish to talk with you,\" I preempted the crisis.\n\n[OKH] \"You are a male and House Ishara is a dead house,\" she countered. She gave Tiger Lily a quick glance.\n\n[OKH] \"She is a renegade,\" Tiger Lily rumbled. That meant an Amazon who had forsaken the race.\n\n[OKH] \"Tiger Lily, who is in charge here?\" I requested. I also began taking my guns out and placing them on the kitchen counter. The rest didn't know the lingo, but could smell the unease.\n\n[OKH] \"You are, Wakko Ishara,\" she responded.\n\n[OKH] \"How...is my family okay?\" the woman asked.\n\n[OKH] \"Yes. They are the reason we are here, though it has everything to do with my status as an Ash Man and nothing to do about you,\" I enlightened her. \"Your husband and your children are members of a lost bloodline of House Illuyankamunus. Are you armed?\"\n\n[Romanian] \"No.\" I took her one of my Glock-22's, dropped the magazine, chambered out the round in the barrel and handed her the three pieces.\n\nShe examined the gun for a moment, looked into my eyes, then put the bullet in the mag, reloaded the pistol and moved the slide to put a bullet in place. \n\n[OKH] \"Thank you, Ishara,\" she nodded. \"May I see my children?\"\n\n[Romanian] \"It is your house,\" I replied. \"We are guests.\"\n\n[OKH] \"Who did you abandon?\" Tiger Lily shot. The woman flinched.\n\n[OKH] \"I was Aliz of House Hylonome,\" she responded, \"and I chose to live free.\" Hylonome ... Hylonome? Oh, the Centaur Goddess. Aliz left. Tiger Lily had a whispered conversation on her communication gear.\n\nFinishing up the 'Russian' problem, plus Faviu's informing us we had 15 minutes before the Russian Attach\u00e9 to Bucharest arrived, allowed me to check back with the Professor and Alkonyka. There were no 'Sun' graves after 1927 in the Sz\u00e9kely Lands, but there were some name matches with Hungarian POW's captured by the British at the end of World War II.\n\nBizarrely, three of the names ended up being mis-shuffled to Czechoslovakia instead of being sent back to Romania (and a prison camp.) Before the mix-up could be rectified, they applied for and got passports for themselves and their families to Brazil - a grand total of fourteen people aged between 68 and 3. \n\nSince they weren't wanted in Czechoslovakia, the government let them go. The two researchers hadn't been able to trace the group's movement after that, due to a mutual lack of Portuguese linguistic skills. The situation was still promising. All I had to do was figure out how to launch my next hunt during Carnival.\n\nWhat was I going to say to the Russians? Life intervened. Chaz tapped me.\n\n\"A motorcyclist crashed 100 meters down the driveway. A young girl has crawled from under it, but is bloody and confused. The girl is sitting in the road, not going anywhere,\" he said.\n\n\"Inform Rachel I would like the girl retrieved,\" I relayed.\n\nNo, I wasn't going. The driveway to this house was almost a kilometer from the local highway. The western side of the drive was cleared and mowed for roughly 10 meters. The eastern side was open with low brush all the way down to the Olt River, about 1500 meters. Whomever retrieved the child would be very exposed. We had true professionals for this kind of work.\n\nRachel selected Selena, Wies\u0142awa and Odette to make the retrieval. Odette had volunteered. Selena would drive one of the vans, Odette would make the pick-up of the child then jump back into the van while Wies\u0142awa provided close support. Rachel allowed Odette to do the job because she respected Odette's courage ... and the person wrangling the child would be rendered non-combative anyway.\n\nThis deployment allowed the SD to cover the four corners of the building. Pamela would hold a sniper's position from within the house. Virginia and Vincent both asked to go in Odette's place. Rachel nixed that. Her call was to use Vincent/Delilah and me/Chaz as two reaction teams if needed, in case this was a set up. Saku replaced Mona at her position.\n\nRiki and Flaviu gathered up the Loma family in the upstairs library. The entire plan took twenty-seven seconds to implement. How cool was that? The van rolled down to the downed bike. The girl didn't start to react until Odette got to her - then she began to lash out and try to flee. A combination of the girl's wounds and Odette's ferocious persistence got the girl into the back of the van with fifteen seconds.\n\nWies\u0142awa backed in through the van's side door. The second her ass hit the floor, Selena raced the van back to the house - driving backwards. Since the sliding door was on the right side, Selena spun it around in a deft display of automotive acrobatics. Behind the screen of Wies\u0142awa's body, Odette got the girl inside the manor house and deposited in front of Mona.\n\n[Romanian] \"No - no,\" the girl babbled. That was expected. Her next words were not. \"Hylonome - Hylonome - [OKH] \"Please help me.\"\n\n[OKH] \"Are you a member of the Host?\" Mona requested urgently.\n\n[OKH] \"Yes,\" the girl's depression alleviated slightly. \"Are you Aliz?\"\n\n[OKH] \"No. I am Mona of House Jaya. I am with the Security Detail and you are in the presence of C\u00e1el Wakko Ishara, head of House Ishara,\" she educated the child.\n\n[Romanian] \"Aliz,\" I called upstairs, \"we need you.\" While I waited on her, Mona went over the litany of the child's wounds. \n\nThere were multiple scraps and abrasions, but the highlights were a blade wound to the head and a gunshot wound on the left side - nasty looking but not too serious. Aliz Loma came down the stairs. She recognized the style of the child's braiding instantly.\n\n[OKH] \"I am Aliz, child. Who are you, how do you know who I am and why are you here?\" she requested.\n\n[OKH] \"I am Zola, childe of Anna, your sister,\" the girl gasped as Mona started cleaning her wounds. The people gathered around were learning a basic of Amazon medicine. They rarely used anesthetic of any kind. \"Hedwig found you years ago and it was judged that you had made your choice and were not a threat to our band.\" \n\nHedwig turned out to be the old head of Zola's Amazon nomadic band. The Hylonome were dedicated wanderers. They had never embraced the sedentary lifestyle of their sisters, choosing the life of under the open sky. After World War II, some bands had transferred their mobility to motorcycles - the Hylonome traveled lean. Zola's band was the latter type.\n\nThat they had allowed Aliz to live a mundane life spoke to the difference between the freehold Amazons and the nomads. Nomads most likely had a greater understanding of such things because they constantly moved along the fringes of non-Amazon cultures and they had no set location to be betrayed. In all likelihood, forgiveness still hadn't been the norm, but it obviously occurred.\n\n[OKH] \"Zola, what happened to you?\" Aliz squeezed her niece's hand.\n\n[OKH] \"A giant with many men - they overran our camp,\" she sobbed. \"They were everywhere. Aaahhh...Kara put me on her bike and told me to run...run to you and to tell you to warn the others.\"\n\n[OKH] \"Warn us of what?\" I knelt beside the child. I was missing something.\n\n[OKH] \"An Amazon betrayed us to our enemies. She contacted two of our house in town last night. She was Amazon, yet when we were attacked, she killed our people,\" the girl related. I described Molpadia/Kwenhamai to what was probably the sole survivor of that massacre.\n\n[OKH] \"Yes Ishara. That is woman. Who is she and why did she betray us?\"\n\n[OKH] \"I'll tell you later. When did this happen and where?\" I pressed.\n\n[OKH] \"The Castle of the Red-Orange Skulls after the midday meal,\" she replied. (Red-Orange translated to seven. After the midday meal meant ~ three hours ago, maybe. The rest...)\n\n[OKH] \"I know where that is,\" Aliz nodded. \"It was a fortified outpost built by the Transylvanians to stand against the Tartars. The Ottomans destroyed it in the 16th century and it was never repaired,\" she explained. \"We have used it for centuries.\" She shook her head. \"We, as in 'the Hylonome',\" she corrected. I was angry, yet anger wasn't going to get any of us anywhere. We could all be in danger if Ajax and company were this close.\n\nThen I heard the helicopters. The Russian Attach\u00e9 was coming to ask me (the Khanate) to help out her (the Russian Federation). Flaviu joined us downstairs. I felt my anger chill down to a cold resolve.\n\n[Romanian] \"Mr. Molnar, are there any military troops close by?\" I asked our local liaison.\n\n[Romanian] \"We have the 61st Mountain Troops Brigade here in Miercurea Ciuc,\" he hesitantly answered. \"Why?\"\n\n[Romanian] \"How would you like to change the course of history? The Russians need a favor from me and I need a favor from you,\" I hinted.\n\n[Romanian] \"What do you need the troops for?\" he worried.\n\n[Romanian] \"For what everyone throughout history has needed fighters for. I'm going to kill some people,\" I stated with my best feral grin.\n\n[Romanian] \"Shouldn't we call the police?\" he countered.\n\n\"No...Mr. Molnar, what do you think of me?\" I reposted.\n\n\"Ah...you are somewhat of a dilettante,\" he gave me his assessment. Inside a blink of an eye, I had the barrel of my clock making an imprint on his forehead.\n\n\"Let me make this perfectly clear. I'm going after the people that did this. If I go with what I have, we are all going to die. That being the case, you will most likely try to stop me, so I might as well kill you now,\" I made steady eye contact. \"If you want to live, get me those troops.\"\n\n\"I can't simply order these troops into a battle,\" he said fearfully.\n\n\"I know you can't do it alone,\" I nodded. \"When the Russians and the United States make their request, all I want you to do is tell your people in the Foreign Office that this is a serious threat and that only the Romanian Army can save the day...and not just here, but in China too.\"\n\n\"Mr. Molnar, I think I know what's going on,\" Riki Martin added from half way down the stairs. \"I'm going to call the United States military mission to Romanian and my State Department. I think I know what C\u00e1el is up to,\" she continued. \"I believe if you, me and the Russian emissary plead our desperate case, we can get those troops. Time is of the essence.\"\n\n\"Okay. I will do what I can,\" the Romanian agent agreed. I put my gun back up.\n\nIt was all still a long shot. The Russians had to agree to my proposal and to put pressure on our host country to put their men in Harm's Way. I also had to get rolling before Ajax moved on to his next target. The Condottieri was hitting the Amazons in Europe...and probably in Africa. I needed one final token to give us a chance of defeating the Unconquered. Lucky for me, it was a standard item for heavily armed law enforcement types.\n\nWorld News: ... A Behind the Scenes Report\n\nAs Foreign intelligence analysts, members of the Russian Federations Defense Staff and their special advisors examined the 'Khanate' proposal, they didn't understand it. On the surface, it was insane and, at the same time, accomplished their mission directives. The military leaders were looking at the Intelligence staff, who could only shrug.\n\nWhat had Russia promised for this bounty? Not a damn thing, which only made everyone all that more suspicious. Outwardly, the Khanate plan was a gamble for the Russian Army, yet...the true risk would be momentary - 36 hours max. The nod was given, the President of Russia was called. Three minutes later, he called back. Operation 'Funhouse' was a go.\n\nIn Beijing, there was one man who was terribly unhappy with this plan. His name was Andrey Ivanovich Denisov and he was 'Ambassador Extraordinary and Plenipotentiary of the Russian Federation to the People's Republic of China'. He was also about to give his opposite number in the People's Republic of China, Foreign Minster Wang Yi, some really bad news.\n\nPutin had spoken. Russia was coming to help China, whether it wanted the help or not. It got worse. The Russian Air Force was going to enforce a 'No Fly Zone' over Northeastern China in eight hours and they were already putting the motion before the UN Security Council's members to 'explain' their actions.\n\nDenisov's chief military advisor had pointed out one niggling issue: the 'No Fly' Zone over Northeastern China would cover portions of Khanate controlled territory as well as the balance of the area, essentially allowing them to shift resources elsewhere while the Russian Air Force protected their territorial gains. Andrey wasn't sure how this would NOT be construed as an Act of War. He was even more concerned about how he'd get back to the embassy without suffering an 'unfortunate accident'.\n\nLondon and Washington were coming to the same conclusion. Technically, they could simply deny they even had copies of 'Operation Funhouse'. Politically, this was manna from Heaven. Putin couldn't strong arm both the Ukraine and the PRC. His priorities had switched, so now NATO could jump into the Ukraine which would appease their democratic constituencies.\n\nThere were also larger economic/political issues to look at. Europe had constantly been threatened by Russia's interference with the oil and natural gas pipelines that first pass through Russia before crossing the Ukraine and Belarus and heading off to Central and Western Europe. A great deal of that fuel originated in what was now the Khanate. \n\nIf the Khanate survived, and viewed the US and UK favorably, the 'oil and natural gas' boot would be on the other foot. If Russia threatened the European Democracies' petrochemical supplies, the Khanate could threaten to cut off Russia as well. The old Republic of Kazakhstan never had the will to confront Russia. The Khanate was turning out to be a very different beast.\n\nBecause the world didn't need any more ominous rumblings, catastrophe and madness collided in Pyongyang, North Korea. North Korea was an energy exporter, with most of its power coming from coal-fired plants and hydro-electric facilities. The problem was you can't run armored vehicles and combat aircraft on electric power. You needed oil.\n\nNorth Korea's oil came from China - Liaoning province to be precise, and Liaoning was getting hammered around the clock by the Khanate. The oil pipeline had ruptured and it would be months before it was fixed. In that situation, a sane nation would have shopped around for other avenue of imported oil. But we were talking about North Korea here.\n\nKim Jung-un was looking down the barrels of another famine (trucks and tractors need petrol too) as well as the far more important reduction in the Korean People's Army's readiness. He saw himself possessing the World's 4th largest military and it was in danger of running out of fuel...and Liaoning province was sitting right across the Yalu River...all helpless-like.\n\nEnd World News Behind the Scenes Report \n\n(The Unconquered)\n\nIn the annals of martial history, the bloodiest - costliest battles are when elites face elites. As corny and melodramatic as it sounds, the truth is that neither has 'surrender' in their creed. They attack, defend, ambush, shoot, stab and kill one another until one side loses the capacity to carry on the struggle. It is a grapple to the death.\n\nAll of Ajax's men were hardened killers - ten year veterans of the Trojan Wars every; one of them. The ranks of the 22nd Mountain Troops Battalion were filled with numerous combat-tested soldiers of the Afghan War. These Romanians were some of the finest combatants produced by the Romanian Army. The two companies earmarked for sealing off the road as a retreat route were about to find out what the price of being elite really was.\n\nThey were fighting for their homeland, avenging their slain (technically, the slaughtered Amazons were Romanians) and had generations of their own warriors, dating back to the First World War, whose legacy of ferocity they had to maintain. Ajax had the advantage in technology and surprise. The Romanians had numbers, experience with the terrain and the advantage of multi-dimensional warfare.\n\nThe lead vehicles of the 22nd had rounded the hilly terrain to the East of the Castle of Seven Skulls when they collided with Ajax's team rolling away from those ruins. The Mountain Troops were fast - Ajax's team was faster. One soldier stepped out of his still-braking Eagle transport. \n\nHe snap-shot a Panzerfaust 3, a light anti-tank weapon, blowing up the first Romanian Piranha IIIc. Two Eagles further down the column, a second team member put another Panzerfaust into the follow-up 22nd MLVN (armored personal carrier). That was as good as it got. The third vehicle, another MLVN swung partially around its burning brethren and poured automatic fire into Ajax's lead Eagle, turning huge chunks of that 'Hummer on Steroids' transport into shrapnel.\n\nTrading vehicle for vehicle wasn't something Ajax could afford. For the Romanians, they couldn't race past the blocked road without incurring horrendous losses themselves. Besides, by holding their ground and keeping the enemy focused on them, they were fulfilling their part of the plan. The Mountain Troops disgorged from their MLVN's, spreading out into the meadow on either side of the path and were quickly bounding forward by fire.\n\nAjax reacted quickly. His heavy weapons would allow him to attrition the enemy in front of him, yet he'd be a fool to think they were alone. He knew he was facing army troops, not police. That spelled serious trouble. He ordered his column to reverse course back into the wood cover. He lost his second Eagle to intensive fire.\n\nThe warriors in the main column bailed out once they reached the shelter of the trees. Machineguns came forward and established a withering cover fire. The two survivors at the first Eagle were badly wounded. With fatalistic resolve, they lashed the advancing Romanians with grenades and their assault rifles until they were both silenced. The second Eagle's demise was much harder.\n\nThree of the four crew were alive and unharmed. Their fate was decided by 25 meters of open ground between them and their compatriots. Ajax's gunners kept firing, but the Romanians refused to be suppressed. Worse, that second MLVN was proving impossible to kill. Its driver had parked it so that barely the front of his vehicle body and turret were exposed.\n\nTwo more of Ajax's precious anti-tank rockets failed to connect, though one did knock the first destroyed IFV into that troublesome vehicle. These were Ajax's brothers-in-arms, yet he knew their situation was hopeless. He cursed that his opposition wasn't made up of raw conscripts. Despite their losses, they were not wavering. Their morale remained solid. ",
        "The Romanians had spread out to the north and south. They were leap-frogging their machineguns forward and it was clear he was facing over 200 men. The 22nds advance was relentless. Soon they'd be right on top of his trapped men. As a final ploy he dropped two smoke grenades around the endangered trio and every other grenade launcher dropped their payloads onto the aggressive Romanians. \n\nThe three men ran for it. Their enemy were nobody's fool and sprayed their retreat path with bullets. Only one made it to safety. \n\nFor the Romanian battalion's commander in his command IFV, this was its own kind of Hell. His boys were getting murdered out there. He hadn't really believed the sketchy intelligence analysis that described his expected foes as the finest trained mercenaries the world has ever seen. Now he was a believer. His opponents reacted like an organic unit. Their weapons were incredibly lethal and their discipline was chilling. Ajax's snipers picked off anyone who seemed to be in charge. One Captain fell, as did two lieutenants. One section lost all its non-commissioned officers. \n\nDespite that, individual initiative kept the 'leaderless' men of the 22nd advancing. Their snipers came into play by targeting the opposing machineguns. One gunner went down, then the other. To get one man back, Ajax had lost five dead, or seriously wounded. Ajax ordered the remaining Eagles back to the castle. The rest of the Warband would have to make a fighting retreat. \n\nHe'd killed or wounded a third of the Romanians out there, yet they were still coming. Even as he pulled out, he got two more pieces of bad: \n\nFirst - his scouts had reported hearing helicopters as they returned toward the castle; this latest enemy was somewhere behind him - to the east. \n\nSecond - two Mig-21's dropped out of the sky and raked his area with rockets and auto-cannon fire; eight more men gone. \n\nAjax may not have been the greatest military mind of all time, but wasn't a fool. He was being boxed in. Since it was highly unlikely the Hylonome Amazons had sacrificed themselves, this was an ad hoc plan to take him out. Instead of hunting down that male Amazon as he wanted, Ajax had let the Condottieri side-track him on this mission. Now, it was proving far too costly. \n\nA whistle, a few traded hand signals and the Mycenaeans started sprinting back upslope toward the castle ruins. It wasn't a rout. His men maintained their \u00e9lan and cohesion. Ajax was trading space for time and the Romanians wouldn't chase his men as fast as the Mycenaeans were moving because there was always the threat of ambush. Or, they wouldn't have if an An-30 Reconnaissance Aircraft hadn't been tracking his progress from high above.\n\nJust coming on-line, it identified the heat signatures of the Greeks and let the soldiers of the 22nd know that their enemies were trying to put some distance between them. The battalion commander knew his men had been mangled, yet believed they were still more than willing carry the fight to the enemy. Right as the 'pursuit' order went out, the promised company from the 24th Mountain troops rolled up...with the 61st Brigade's 385th artillery battalion. 'Now things were really going to get hot for those bastards', he thought.\n\n(The Seven Skulls - C\u00e1el)\n\nI was true to my nature. I sent off my plan, Operation Funhouse, to the Russians via their attach\u00e9 (a hot looking, curvaceous blonde Major) and to the Khanate through the offices of the US and UK. Only after that was done, did I ask for my favor. I wasn't going to bargain with the fate of Temujin's people. I couldn't. \n\nMy only chip to play was that people in strange places thought well of me. I wasn't so na\u00efve to believe that I got what I wanted because I'd forged emotional bonds that superseded personal ambitions or national loyalties. No, I was now on my own self-inflicted 'Ride of the Valkyries' because people in authority felt I could still be useful and they were willing to risk the lives a few hundred Romanian soldiers to pander to my eccentricities.\n\nOur intelligence came from Google Maps, a woman's recollections from twenty-five years ago and the frighteningly precise memories of a battle-scarred 11 year old girl. For the 24th Mountain Troops battalion intelligence officer, it was a stunning introduction to Amazons. The girl was one year away from her Rite of Passage and she'd been raised to take in the terrain and the sounds of battle.\n\nSeveral times, he tried to trick her, altering information she had provided minutes earlier, but the girl corrected him every time. Seventeen minutes and the man relayed to his battalion commander his belief that the girl's story was solid. The men and women of the 24th may not have known the specific of the valley we were going to, yet this was their backyard. \n\nThey knew the rocks, trees and bushes. They knew the ground was crinkled and what marsh soil looked like, without stepping into it. They could do this - attack a rogue mercenary band threatening their native land. They were going to do this and do it quick. Me and mine coming along was problematic. But Me being one of the first ones in...I had to play my trump card.\n\n\"I am Magyarorszag es Erdely Hercege,\" I proclaimed. \"I have returned to my people in their hour of need. Besides, I'm the only one who can kill their leader.\"\n\n\"You can kill Ajax?\" Riki snorted in disbelief. \"Ajax from the Trojan Wars? That Ajax?\"\n\n\"Don't sweat it,\" I put my arm around her shoulder. \"I got this covered. Get me close and I can make him dead.\"\n\n\"You've lost your mind,\" Rachel muttered.\n\n\"I love you to,\" I grinned. To the Captain of the first company to rappel next to the ruins, \"I'm your Prince. Let's do this.\"\n\n\"Do you have any combat experience?\" he shook his head.\n\n\"There are a whole bunch of dead Chinese who think so,\" I assured him.\n\n\"Let him go,\" Sakuniyas stated regally. \"He is the Scion of Alal. He is invincible in battle.\" Hey, I liked that. Someone believed in me.\n\n\"Do you believe that?\" Pamela asked Saku.\n\n\"Of course not, but if he's about to die, he should be allowed to feel good about himself,\" she told Pamela. Shit, I wish I hadn't heard that part.\n\n\"Oh, in that case, I agree. Let him go,\" Pamela added her preference to the final decision. The real weight in that Captain's final call was the small, well-armed group of supporters who seemed rather insistent that I get a chance at Valhalla.\n\nHe took it well. The officer even announced to the entire battalion that their feudal overlord was leading them into the fight. My codename was 'Prince'. I hope I didn't turn out like the singer, I had no aspirations for being Machiavelli's 'hero', but being remember as someone like Prince Harry wouldn't be so bad. \n\nWhat I did know was this was my choice of actions and I couldn't send others into the madness I had inspired. I didn't blame myself for the deaths. Those were inevitable if Ajax was going to die. I didn't blame myself for Ajax - that was the Weave of Fate being a bastardly bitch. No, I had to kill Ajax because I was an idiot, and I loved my companions, and if it wasn't me making the attempt and possibly dying, it would be one of them. Not on my watch.\n\nOur IAR 330 Puma Helicopter lifted off into the sky. Our two companion birds, another troop carrier and an assault variant of the Puma, followed suit and soon we linked up with the rest of the company that was going to rappel into the clearing next to the ruins. Could I rappel? Sure, I lied. Hey, I'd made it to the top of the rope in gym class at the end of my senior year. That had to count for something.\n\nI was even lucky to have the lynchpin of my master plan sitting next to me. One in sixteen - what were the odds?\n\n[Romanian] \"You, what's your name?\" I asked the soldier barely older than me.\n\n[Romanian] \"Master Corporal Menner,\" he grinned. Maybe he sensed my insanity.\n\n[Romanian] \"Sz\u00e9kely?\" I asked. He nodded. [Hungarian] \"Do you believe I am your Prince?\"\n\n[Hungarian] \"Either that, or you are crazy,\" he kept grinning. I leaned over and after some helmet shuffling, I whispered my request in his ear. I didn't demand that he agree, only that if he didn't, he wouldn't turn me in. Our eyes met.\n\n[Hungarian] \"Why?\" he was now filled with disbelief. I had passed beyond the realm of comedian to the land where all crazy ideas go off to die.\n\n[Hungarian] \"It is the only way. Trust me, I don't love this plan either, but it is the only way I can think of to keep as many of you alive as possible,\" I explained. \"He's a monster.\"\n\n[Hungarian] \"How will this help?\" he was still confused, even if he was being swept away with my intensity.\n\n[Hungarian] \"I don't have time to explain. All I can tell you is that I'm not crazy and I don't want to die, but this is the only thing I can think of to keep my people alive,\" I remained firm and confident in my beliefs.\n\n[Hungarian] \"I will have to think about it,\" he conceded. At least he wasn't insisting I be forcibly committed to a mental institution. I did annoy one of the two crewmen in the back with the rest of us combatants when I stood up and looked out the side window. I glimpsed it - her, flowing through the forest beneath us. After I sat back down, the Captain flagged me.\n\nI had forgotten to cut on my communications rig on.\n\n[Romanian] \"First Force (the two companies of the 22nd) has encountered the enemy before they could exit into the flatlands,\" he paused, somewhat shocked. \"They are taking heavy casualties. It is just like you warned us. These foes are exceedingly lethal.\"\n\n[Romanian] \"Don't worry about it,\" I overflowed with charisma. \"Just follow me and we'll be fine.\"\n\n[Romanian] \"But, I thought you said you didn't know anything about the compound?\" the Captain looked at me funny.\n\n\"I don't. I'm relying on luck,\" I pumped my eyebrows. The Captain knew enough English to groan.\n\n\"I have a sudden desire to club a baby seal,\" Rachel stared at me intently. Who, me?\n\n[Romanian] \"Let me and my men take the point,\" the Captain insisted.\n\n[Romanian] \"Captain, either I'm diving headfirst out of our ride, or you are letting me rappel down in the first wave - either way, my boots are the first on the ground,\" I demanded.\n\n[Romanian] \"No,\" the Captain shook his head. \"You are a civilian.\"\n\n[Romanian] \"Captain,\" I leaned forward. \"Everyone else is fighting and dying because I made a judgment call. You can't ask me to hold back now.\" \n\nThat shone through. Over his battalion frequency, he could hear the confusion and chaos chiseling away at his brethren in the 22nd. He could tell by my countenance that I both knew the enemy he was going to fight and that I wasn't ruled by guilt, or a death wish. I wanted to go first because I thought I could make the difference between someone else's life and death.\n\n[Romanian] \"Who are the other three with you?\" he stated. Four could rappel down at a time.\n\n[Romanian] \"Rachel, Chaz and Master Corporal Menner here,\" I indicated. Rachel didn't freak, the Colour Sergeant looked my way and gave his acknowledgement, as did Menner.\n\n[Romanian] \"I'll go down with you, Captain,\" Pamela spoke up.\n\nOf my group, Delilah, Wies\u0142awa and Virginia had stayed behind to guard Odette, Riki, the Lovasz sisters and the Loma family. Two troopers of the 24th joined them to provide extra security if needed. Vincent had pulled seniority to be the sole American going. With Chaz and Delilah, there hadn't been a real discussion about it. Chaz was the professional ground-pounder.\n\nSelena had volunteered to go even though this wasn't really her fight. She claimed the right of revenge for Ajax's attempt to kill the Vizsla, but I thought it was something else - some desire to step forward and make the point that the Black Hand were invested in this global struggle. There had been no doubt that Rachel & her team plus Sakuniyas and Pamela would be joining me.\n\nIn my estimation, we were over the target area way too fast. I hadn't thought of a good reason to talk myself out of this harebrained scheme of mine. The side doors of the Puma opened. Rachel would be going down on my side.\n\n\"Look and see what Rachel does and do the same thing,\" Pamela yelled to me over the roar of the engines.\n\n\"And don't lock your knees or you'll sprain your ankles,\" she added. It was just another day of 'on the job' training at Havenstone Commercial Investments, I rationalized. I was scared, which was also a good indicator that I was still marginally sane. Rachel made her movements slow and steady. \n\nI went down a second later, barely remembering to avoid rope burn through my gloves and not bust my feet when I hit bottom. Rachel crouched. She was waiting for follow up troops before advancing. Me - I ran straight toward the ruins. Why? It was Alal once more. From the relayed chatter from the 22nd and whatever spy plane the Romanians had above, I 'knew' that Ajax hadn't made it back to the fortifications yet. \n\nIf we hurried, we could beat him there. Then we would be ambushing his ass for a change. It almost worked. Whatever Chaz and Menner thought of my actions, they kept it to themselves. I didn't have to be a psychic to realize Rachel wasn't a fan. I leapt over the first Amazon corpse. The second one I passed was sitting with her back to the tree, hands tied around the trunk and had been tortured before she died.\n\nI believed that was when the momentum shifted. This was barbarism and the three following me knew it. Menner relayed our findings to his Captain even as the first helicopter was pulling away. My mind was picking up the details and processing somewhere in the back of my mind so as not to distracting me from the task of staying alive.\n\nA pile of bodies lumped too close together - they had been executed. A small girl - three, or four - with a close-contact wound to the temple. The smell of burnt flesh - more torture. Whatever Code of Military Conduct the Mycenaeans had, it wasn't the rules we, their opponents, fought by today. We were outraged and help was coming.\n\nWe were running in from the northeast. Three meter from what had once been a doorway, I broke free of the underbrush and saw the closest Greek and the row of vehicles behind him. He was to my east, maybe ten meters away. I wasn't stopping. The terrain had funneled us down so that we weren't coming directly from the helicopter's noise. \n\nThat must have been the reason he wasn't staring at us when we appeared. I didn't stop. Chaz and Menner were right behind me. Rachel only slowed enough to fire her P-90 at full-auto at the man as she ran. She killed him. The three of us ran across the open-aired, ruined room until we found the doorway to the other side of the building. From there, we had a good view of Ajax's remaining Eagles and the eight remaining men with them.\n\n\"I'm going for higher ground,\" Chaz growled before he took off.\n\n\"Rachel, go back and secure the corner we came in by,\" I shouted. She grimaced but obeyed. Menner had his own ideas. He fired off his first rocket-propelled grenade from his AG-7 at the farthest Eagle he could clearly see, blowing it to smithereens. I added the fire from my own P-90, wounding another Greek.\n\nAs my mental patterns processed the battle, I noticed Pamela, Saku, the Captain and Rachel appear. Apparently a trooper of the 24th had taken over Rachel's position. He was providing cover fire so that the remaining eight members of this landing group could enter the ruins at less risk. The Captain was doing what Captains do - issuing orders to the rest of his upcoming company.\n\nPamela must have been in touch with Chaz, because she was jumping and climbing along the path the Brit had taken. Rachel tapped me at the door. I backed up and she took over my firing position. That was part of her job. Mine was to strike once the iron was hot. The Chaos of Battle took hold. Initially we had faced 9 of Ajax's men. Rachel killed one and I had wounded another.\n\nTwo had swung around to the north of our position and engaged the helicopter at the clearing. An anti-tank rocket will kill a helicopter too. Somehow, the fatally injured pilot set his bird down before he died. That had been the third transport, not the second. The second had already deposited its 16 and those soldiers were moving toward the sound of the guns. The 16 aboard the third bird engaged the sole Greek they could see.\n\nOne of the Romanian assault Pumas, guided by the Captain, began tearing up the Eagle's lager. Halfway through the process, a second Panzerfaust 3 blew it out of the sky in an impressive fireball of exploding fuel and ordinance. The smoke trail form the warrior's shot hadn't dissipated before one of our snipers took him out.\n\nThe Captain made his decision fluidly. The first squad would hold the ruins. The second team would swing south of the ruins, seizing the high ground and block any Greek retreat in that direction. Somewhere back in the woods south of us, two more companies of the 22nd were advancing through the rough terrain on horseback. Yes, fucking horseback!\n\nBehind us, to the east, were two more companies of the 24th advancing on horseback as well. The final company of the 24th was deployed due north, also on horseback and moving in fast. The trap wasn't airtight yet, but it soon would be. Ajax had to figure which way held the greatest likelihood of egress and quickly. \n\nThe mortars of the 385th were starting to rain down hate on his men. Logic, terrain and timing dictated a breakout to the southeast. The land dipped slightly just west of the ruins. Ajax and his men could move along that natural channel to spring up on the highest parts of the ruins nearly undetected. \n\nOnce he fought through the troops there, he could slip over the ridge south of and behind the castle and let darkness be his ally. He would regroup near one of the local tourist hotels and vacation spots. From there, he could grab some cars and race off deeper into the mountains and his final evasion. That was his plan. That would have been Alal's plan as well.\n\nWith utter certainty, I relayed all of that information to the Captain. Menner and I had to move. Rachel, Charlotte and Saku would follow. Mona and a medic of the 24th were working triage and Tiger Lily stayed close by her. The third group, minus the three personnel killed at the Landing Zone, were advancing west toward the position the Captain wanted them to hold.\n\n[Romanian] \"We are going for Ajax,\" I shouted to the Captain just before Menner and I made our play. We had to retrace our steps to the door where we had entered the ruins, then run along the east side until we joined up with the second group of 15 plus Vincent. Those men and women were in their own world of hurt. Twelve Mycenaeans, the vanguard of Ajax's escape attempt, appeared on the far side of the ridge that Romanians were trying to secure.\n\nA bloodbath ensued. Assault weapons, pistols, knives, feet and fists all came into play. Ajax's men were better by a few degrees. We arrived at the pivotal moment. Charlotte, Rachel and especially Saku kicked the balance back in our favor. Hard, nasty hand-to-hand blood-letting was her specialty and only Ajax could have overcome her.\n\nMenner and I didn't stay to participate in the carnage. We had our mission. We bolted around the fighting, crested the ridge and looked down the ravine at the rearguard coming up. A bullet careened off my back ceramic plate - no light ballistic vest this time out. Menner took a bullet to the right thigh - a through and through. He was bleeding only 'somewhat', so his artery and vein remained intact.\n\nI yanked him along with me until we reached the top of the draw. I could see it all. The final act of 'Ajax the Unconquered and his Mycenaean warriors'. To the west, two machine gunners and two infantrymen lay down suppressive fire against the still invisible (to me) men of the combined 22nd/24th 'First Force'. Those Romanians could hear the firefight ahead of them and knew the jaws of their trap were closing. They refused to let go of the rear guard this close to victory.",
        "Ajax, 'Red', Kwen and one other Greeks ran up the slope to reinforce his beleaguered men atop the ridge at the same time his men on the far side of the battle unleashed their hounds in a last, desperate attempt to break contact. Ajax's move wasn't a personal attempt at freedom. No, he was buying time for the few unharmed men he had left and the walking-wounded comrades they were helping along. \n\nHe had to hold the ridge long enough for them to exit the ravine and vacate the firefight. His plan might have worked, except for two things ... Master Corporal Menner and C\u00e1el Wakko Ishara, who were blocking the exit at the top of said ravine. As I had morosely predicted, Ajax remained unscathed. \n\nAt that moment, I had three things working in my mind to balance my understanding of men. Alal, Timothy and Felix. I hadn't had many male friends, for obvious 'infidelity' reasons. Alal's thoughts had long been clinical, not emotional, so he wasn't of much immediate help. He'd carried me this far as a tactician, but now I needed a hero. \n\nFelix certainly fit the Ajax mode, if you discounted his loyalty to his brethren. But no, Timothy was my guiding light at that moment. Timothy was a model of fraternity - male unity and sacrificing for your brotherhood. Few people got away with calling Timothy, or any of his friends, fags, faggots, queers, or homos. \n\nFar fewer got away with it twice, and it was more than just Timothy's build - it was his spirit and the belief that people rallied around the appearance of strength and yearned to stride boldly forth if given the impetus. Given my own metrics, the big, gay, tattoo-artist Timothy was the manliest man I knew.\n\n[Mycenaean] \"Ajax,\" I screamed at the top of my lungs. \"I have come to watch you die! Face me!\" Over the surrounding din of battle, he spotted me. I held my P-90 overhead in my right hand - and open challenge and undisguised target. Behind me and under cover, Menner was switching out the warhead of his AG-7.\n\nI doubted the Mounting Trooper had truly believed we'd get this far with my insane plan. No one shot me. Ajax's eyes hardened\n\n[Mycenaean] \"This is your doing!\" he bellowed as he motioned the three others to continue upslope.\n\n[Mycenaean] \"Yes,\" I yelled. Ajax threw his H&K aside and started coming at me. Oh, he could have put twenty bullets in me and watched my macabre dance until I collapsed. What brought him on was his desire to see the architect of his destruction die as he watched the last flicker of life fade from my eyes. I endeavored to meet him half way. I even selected the tree.\n\nAjax drew forth a Kopis - a Greek blade from a later period. He held the blade high. The kopis was primarily a hacking weapon, though it did have a point. I drew forth two of my tomahawks. It was all part of the Wakko Plan. Now that I had his attention came the next wacky phase - I ran into Ajax, putting my shoulder into his diaphragm. \n\nHis kopis came down on my back ceramic plate, shattering it and probably cracking a few of my back-left ribs. At the same instant, I heard the whoosh of Menner's AG-7 rocket propelled grenade launching.\n\nEven as I felt my knees giving way from the power of the Mycenaean champion's blow, the world erupted in pain and fire. Fuck that hurt, yet more hurt was coming. The result of a TBG-7V's detonation is called a thermobaric explosion. I was betting my existence on Master Corporal Menner being able to put it close enough to knock me out without turning me into a crispy critter. The kill radius was ten meters.\n\nThe rocket propelled grenade hit a tree a few meters behind Ajax and high enough not to kill us. The concussive force of the explosion tossed Ajax over my shoulder and slammed me into the ground. A dozen Succubae Rockettes in high heels were dancing on my cranium as I sat up. I forced myself back to my feet and turned to face Ajax. I realized I'd won.\n\n[Mycenaean] \"What the Hades was that?\" a shaken Ajax thundered. \"If that was your best shot at killing me, it was pathetic.\" He drew his .45 with his left hand and put four rounds into my face. At two meters he could hardly miss. The bullets brushed over my skin like puffs from a post-coitus cigar.\n\n[Mycenaean] \"What the...\" Ajax muttered.\n\n[Mycenaean] \"I said I had come to watch you die, not that I planned to kill you myself,\" I laughed. I heard the titanic rustling through the trees. She was here. I readied my last two tomahawks. I couldn't afford to go looking for my first two. That bastard Ajax had kept his kopis, the fucker. I could see the realization dawning on him.\n\n[Mycenaean] \"What did you do?\" he growled. Yeah, the sounds of battle were very distant now, muffled by the barrier between dimensions. We were not in that precise, same ravine we'd started our battle in. We had transferred over to its spiritual facsimile - my Ishara-space.\n\n[Mycenaean] \"When I realized I couldn't kill you and that the only person on this Earth who could, wouldn't (Alal), I went looking for someone who could,\" I taunted him.\n\n[Mycenaean] \"That makes no sense,\" he gruffly replied. The noise of something big moving through the trees was no longer impossible to ignore.\n\n[Mycenaean] \"Well, she isn't 'of this world' so I had to bring you to hers,\" I laughed. The Dragon burst forth from the overgrowth and hovered over us both.\n\nHer head was gigantic (I had my Terrified Goggles on; I almost wished they'd been Peril Sensitive instead), her white mane whipped around in the breezes that surrounded her body and the top of her head was a snowy white. The mane flowed down her spine and along her serpentine body. As her scaled progressed downward, they darkened gradually until her underside was a thunderous gray - she was a living storm cloud.\n\nShe had no limbs, nor did she breathe fire. Her strength lay in her enormous maw, her rows of razor sharp teeth, pronounced canines more like rapiers than teeth, and in her powerful, electrically-charged coils.\n\n\"Ajax, meet the Goddess Illuyankamunus,\" I grinned like a fool. \"Illuyankamunus, meet Ajax, the Unconquered and sworn foe of Amazons everywhere.\"\n\n\"You idiot,\" Ajax spared me a glance, \"this monster will kill us both!\"\n\n\"While survival was part of my plan, it was secondary to seeing you dead first,\" I smirked. \"Right now, I'm sure she's more interested in you...I think I'll run.\" Illuyankamunus' mouth opened and her roar was like a thousand thunder bursts.\n\nHer venomous saliva splashed both of us. I managed to get my forearm over my eyes, but that was it. Her toxic expectorant burned like a hundred tiny needles then the flesh went numb. Some of it had hit my forehead and lower lip. The numbness was turning to something else - something indescribable before I smelled the stench of rotting flesh. \n\nMy body was being corrupted - turning necrotic in seconds. I ran. Behind me, Ajax's war cry echoed through the ghostly spirit plane. The land was similar to the real world except the alterations of mankind weren't as evident. Lighting repeatedly cracked and more thunder staggered me. Ajax wasn't going down quietly. I heard Illuyankamunus cry out in pain.\n\nThe rot dug down to my skull, teeth and gums. The skin on parts of my right thigh and stomach was gave way and the muscle's beneath twitched in agony. Chunks of flesh on my forearm sloughed away. Dating after this was going to be a bitch. I kept up my headlong flight to nowhere. All I had to do was keeping going until my mortal body woke up. I no longer heard Ajax.\n\nWhat I did hear was the sound of the titanic serpent moving through the trees once more. Bushes were trampled, branches broke yet her pace was unstoppable. When I knew the race was done, I turned around. I wasn't sure why. I wasn't really a 'Heroic Last Stand' kind of guy. The great draconic head towered above me on a serpentine neck.\n\n[Sumerian] \"Despite being a monster, you are rather quite beautiful,\" I mumbled. No, even at death's door I couldn't resist hitting on the babe. Her 50 meter long body lashed out, encircling. I launched an attack with my left tomahawk. I tried to bring my right one up, but the nervous system to the hand had disintegrated and the weapon fell to the ground.\n\nI didn't seem to hurt her. Oh well. In came the coils, binding me tightly. My remaining ribs began to crack. Her leering mouth hovered over me, letting me wonder if I was going to be squeezed like a used up tube of toothpaste, or swallowed alive. She breathed on me again. This experience was wholly different.\n\nA cool spring shower washed over my face and began drenching my body. Things...things made sense somehow.\n\n[Sumerian] \"My venom inspires madness, C\u00e1el Wakko Ishara,\" she related. \"I had to bind you until my healing breath reinvigorated you...so you wouldn't hurt yourself.\"\n\nHer coils loosed up enough to give me limited mobility. My flesh was not decaying after all. It had been was my torturous imagination playing tricks on me. Either I was afraid of flesh-eating bacteria, or of growing old. I'd explore that later.\n\n[Sumerian] \"What does this mean?\" I asked. She seemed confused. \"Why aren't you eating me?\"\n\n[Sumerian] \"I am not devouring you because I still have need of you C\u00e1el,\" she rumbled.\n\n[Sumerian] \"I'm not sure we are on a first name basis,\" I coughed. Much of my pain still felt real. \"Just kidding. I'm on a first name basis with every woman I meet.\"\n\n[Sumerian] \"I could still devour you for your impertinence,\" she seethed.\n\n\"Give it a rest,\" I grinned. \"You may be as old as creation, yet I doubt you've had more than two boyfriends, whereas I'm heading for 300 girlfriends.\" Her coils tightened around me once more.\n\n\"Don't be presumptuous,\" she threatened.\n\n\"No,\" I shook my head. \"I've got your number now. Kill me and Pamela and Saku will kill the last of your line. After all your exertions over the past 24 hours, you can't stop them.\"\n\n\"You think you can bargain with me, mortal?\" she hissed.\n\n\"No. You are a girl and trust me, you can never tell a girl anything she doesn't want to hear,\" I jibed. \"I'm giving you a reality check. If you do X, then Y will happen. I have given no orders concerning your mortal family, but that won't save them from those two.\"\n\n\"There are other things I could do to you,\" she sizzled.\n\n\"Nope. Ishara will own your bacon if you try to crack my mind,\" I snorted. \"I'll tell you what; you stop acting like a cranky deity and I'll stop acting like a jerk, Illuyankamunus.\"\n\n\"My name is not Illuyankamunus,\" she grumbled. \"I am Sz\u00e9lAnya; Illuyankamunus was my father.\"\n\n\"Oh, then I apologize,\" I give a tip of the hat. \"Sz\u00e9lAnya is a far more fitting name. It is both untamed and vibrant.\" Yes, I was sexing up a Goddess. Thanks to Ishara she couldn't read my mind. The dragon-goddess regarded me studiously before letting her coils relax. That led to my 'Eureka' inspirational insight.\n\n\"You have recreated your Father-Daughter relationship,\" I gasped. Mysticism was lost on me. Daddy-daughter relationships I understood. \"The males of your line are your 'Father'. They give birth to the 'warriors' - their female offspring - while the sons carry on the bloodline to the next generation. Your daughters are...they don't carry your divine essence?\"\n\n\"How...\" blink, \"How did you figure all that out in the past few seconds?\"\n\n\"I've got some serious Daddy - Granddaddy actually - issues as well,\" I sighed. \"Once I looked past you being a big dragon-monster, it all fell into place. One unanswered question: who are the women masquerading as the Amazons of House Illuyankamunus?\"\n\nHer look said it all. She didn't know and she didn't want to admit that she didn't know, because she had this whole Goddess-vibe going on, I was a mere mortal and professionals a (Deity in this case) hate admitting they are in the dark about anything in their specialty.\n\n\"I don't know,\" she confessed. Good for her. \n\n\"I was traumatized by the death of my 'sons'. When I recovered, I was cut off from the others,\" she explained. The pain of that ancient event was etched upon her features. It was good to see that she gave a crap about her followers.\n\n\"I cannot hide them and give them enough protection to keep them safe, Sz\u00e9lAnya,\" I said.\n\n\"I'm asking your permission to take your children back to Havenstone where there will be thousands of Amazons around for protection,\" I proposed. \"Havenstone is the name for the Amazon central base of operations. It is New York City,\" I clued her in.\n\n\"Why should I trust the Amazons, or their Goddesses now? They abandoned me and killed my children,\" she challenged me.\n\n\"Your options are slim. Also, I am C\u00e1el Wakko Ishara, I speak for Yakko Ishara, first of my line and the Goddess of Oaths herself, Dot Ishara,\" I swore. \"We will pledge my Sisters to your cause, take your grievances to the Keeper of Records and the Council. Finally, I am an Ash Man, son after son back to the Amazon Vranus Ishara who, with your Amazon, Bolu (the old warrior who accompanied Vranus), left the Amazons to safeguard the last Arinniti sons.\"\n\n\"That is why we resonate,\" her draconic head nodded. She further loosened her body's hold on me. \"I still don't trust you.\"\n\n\"You did kill Ajax for us,\" I pointed out. \"We owe you for that.\"\n\n\"I did that to save my own kin, not yours,\" she grumbled.\n\n\"We don't have to tell them that,\" I gave her a sly grin.\n\n\"You would lie to your High Priestess and your Goddess?\" she scoffed.\n\n\"The High Priestess is dead and we have yet to choose another. As for me lying to Dot Ishara; why do you think I made it so she couldn't read my mind?\"\n\n\"That is annoying; she must have been piqued. Why do you call Ishara 'Dot Ishara'?\"\n\n\"I'm starting to feel funny,\" I tried to work out some mystical cramping. \"Are you keeping me here?\"\n\n\"Yes.\"\n\n\"What does that do to my body?\" I worried.\n\n\"Your heartbeat is racing, your lungs move weakly - the seed of air - oxygen - is leaving your body and blood,\" she told me.\n\n\"Basically I'm having a heart attack and organ failure, not to mention possible brain death,\" I chastised her. \"I don't want to die, in case you were confused about my intentions,\" I added.\n\n\"I...I will let you go. We will talk later,\" she replied. Her body uncoiled until I could collapse on the ground. There was pain...and then I woke up."
    ],
    "authorname": "FinalStand",
    "tags": [
        "amazons",
        "dark humor",
        "politics",
        "soldiers",
        "battle",
        "dragons",
        "goddess",
        "assassin"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/life-as-a-new-hire-ch-34"
}
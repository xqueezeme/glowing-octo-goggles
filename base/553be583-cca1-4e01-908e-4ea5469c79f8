{
    "title": "A Perfect She-Devil",
    "pages": [
        "Thanks to blackrandi for the invitation to the Wine and Old Lace event. Historical pieces can be pretty challenging and I've tried to do this one justice. Thanks to MsCherylTerra, stev2244 and norafares for the beta reads and editing. This would be unreadable without all of them. There are others who prefer not to be named; you know who you are, and you know you are appreciated. As always thanks to The Missus for characters, ideas for plots, and tolerating my insanity. \n\nA Perfect She-Devil\n\n12th of December 1865 \n\nGalena, Illinois\n\nSunlight shone through the windows of the well-appointed parlor, bringing a welcome warmth to a slightly chilly Illinois day. Elizabeth studied the dark-haired, dark-eyed, woman seated across from her. Young, very young, not too far out of her teens, perhaps. Willowy. Her dress was clean, but plain and just a bit careworn, in sharp contrast to Elizabeth's fine morning dress. \n\nElizabeth set her tea down and picked up the letter of introduction from the table next to her. \"So, Mary, Genevieve's letter says I may be able to help you, but it doesn't explain what you are seeking. \" Her deep Mississippi accent had been refined by years of very expensive finishing schools, but she'd never lost it entirely.\n\nThe younger woman looked down at her hands for a second before looking back up at Mary and responding in a quiet voice heavily tainted with a deep Virginia hill country twang; no refinement here, although she was obviously struggling to speak properly. \"She... she said you might understand my problem. She said you had one like to it.\" \"Might\" came out \"Maht\" and \"Like\" came out \"Lahk\".\n\nShe sighed deeply, almost shuddering. \"I find my situation... dreadful.\"\n\nElizabeth waited patiently. The girl had to muster her own strength, and in any case, Elizabeth had no other engagements until the evening.\n\nFinally, with an obvious struggle, Mary continued. \"I need to find a former Yankee soldier. I don't know for certain that he is alive. His name is Captain Jeremiah Lodge of the 3rd Illinois Cavalry. They were stationed in Virginia, near Wheeling.\"\n\nThe new state of West Virginia then, Elizabeth reflected. \"What is your purpose in doing so?\"\n\nMary looked stricken. She obviously really didn't want to answer the question, but it simply wasn't seemly to ignore a direct question from a woman of Elizabeth's station. \"I don't rightly know, Ma'am. I ain't sorted that out yet.\" But her nerves made her accent deepen so it came out a little different. \"Aah don't rahtly know Ma'am... Aah... haint sorted thet out yet.\"\n\nThe tears welled in her eyes and for a moment, she looked as if she was about to completely break down. Mary struggled with herself, set her jaw firmly and continued in a more measured and precise manner. \"I can't stop thinking about him. I've tried.\" \n\nElizabeth wondered if there was a baby involved. Scandalous, of course, but hardly unheard of. Especially for a young hill country girl during the war. \n\n\"If I may ask. Are there any... obligations?\"\n\nMary looked frankly puzzled, then blinked as she took Elizabeth's meaning. \n\n\"Heavens no! But if he is alive and I find him, he may not be willing to see me.\"\n\nElizabeth eyed her critically. She was certainly pretty enough in a dark, sloe-eyed way. \"I'd rather think any man would be more than willing to entertain a visit from you.\"\n\n\"Well, maybe not him. You see, I shot him. Twice't.\"\n\nEven Elizabeth's carefully crafted and maintained demeanor cracked. \"You shot him two times?\"\n\n\"Three times. I forgot about the last time. It hardly counts. It was a boot gun, just a Baby Paterson. And I really didn't mean to kill him that time.\"\n\n\"Three times?\"\n\n\"He was a Yankee abolitionist soldier, Ma'am.\" She said it with finality as if that explained everything.\n\n\"And you still want to find him?\"\n\n\"I think I must. Like I said, I can't stop thinking about him. And we may be married. So there is that.\"\n\nElizabeth refreshed Mary's tea, then her own and settled back into her chair, a smile starting to show. No wonder, after all, that Genevieve had sent her on. This would be a delicious distraction. It promised to be most amusing.\n\n\"I believe you'll have to tell me the whole story.\"\n\n***** \n\n3rd of AUGUST 1861\n\nCripple Creek Road near Sutton, Virginia\n\nMary smoothed her blue Sunday dress -- it was the finest she owned, and, while she hated the color, she felt the finery and the color made her a less tempting target for abuse by the hated Yankee cavalry that patrolled the roads. She'd heard horrible stories of girls kidnapped and abused by the blue-coated devils. Nobody she knew, fortunately.\n\nHer little pony cart had already been searched twice by Union soldiers, but they'd stopped their searches after idly glancing in the bags of clothing she was taking with her to stay at her cousins'. It'd taken every bit of restraint she could muster to stay silent during the intrusions. She'd made this trip three times over the last two weeks already. Two more miles and she'd be home free. \n\nDamn the blue jackets and their intrusion into her State. She was glad the war came, it was finally time to teach the Yankees a lesson. She'd have thought the victory by the brave Southern men at Manassas would have had the cowards tucking their tails and running for the hills by now. Perhaps they were too stupid to understand their position. It wouldn't matter in the end. A real Southern man was worth ten Yankee dogs any day.\n\nAnd she would help any way she could. \n\n*****\n\nLieutenant Jeremiah Lodge saw the simple two-wheel farm cart on the road ahead. A slender dark-haired girl in a blue dress guided the pony down the dirt road with an easy familiarity. It wasn't as unusual as it should have been -- many of the local boys had gone South to join the nascent rebel armies at Richmond, leaving women and children to run the errands that they would have normally done. \n\nJeremiah planned to simply lead his ten-trooper patrol on by; as he came even with her, he touched his hat brim. She nodded stiffly in return -- about as much as he could ever expect from one of the local girls in this part of the state. \n\nHe'd have passed on, but for a sound caused by the morning breeze. It was a simple sound. The sound of paper moving. It certainly wasn't the sound of cotton nor crinoline, but the sound of paper.\n\n\"Halt\" \n\nHe turned in his saddle and caught the reins from the girl's hands.\n\nShe glared at him intensely for a fraction of a second, then struggled to bury her hatred under icy disdain. But the icy coolness only lasted until she spoke.\n\n\"What do you want, Lincoln pup?\"\n\nJeremiah smiled, as disarmingly as possible.\n\n\"Lieutenant Jeremiah Lodge, attached to the Provosts Office station in Sutton, at your service, Ma'am. I'm afraid I am going to have to ask you to come with us to Headquarters.\"\n\nHer eyes narrowed and she glared at him. \"I'll be damned if I go anywhere with any foul, abolitionist blue jacket!\"\n\nShe dropped the reins and leaped from the cart.\n\nJeremiah was caught flat-footed by her sudden bolt for the woods lining the road, but he still managed to catch her left arm -- and was promptly dragged from his saddle for his trouble. She shifted her efforts from escape to attack and he found himself trying -- and mostly failing -- to control a spitting, hissing, clawing demoness.\n\nJust as he was convinced she was going to claw his eyes out, she was lifted bodily into the air and held between Sergeant MacKay and Trooper Henry, both of whom were laughing so hard they could barely breathe.\n\nJeremiah picked up his hat and dusted it off as he tried to salvage what dignity he could from the situation. Another trooper handed him one of several sheaves of paper that had fallen from the girl's dress during her furious assault. It turned out to be a railroad schedule for supplies. \n\n\"I suppose this was accidentally pinned inside your dress?\"\n\nJeremiah was expecting denial, maybe some tearful contrition.\n\nThe young lady simply exploded with hate. \"It's no accident you damn foul Yankee! I'll take no condensendin' from a low-born, gutter-crawling Black Republican thug mercenary!\"\n\nJeremiah stepped back.\n\n\"So you admit to being a spy?\"\n\n\"I admit to being true to my State!\" She lunged at him, but the troopers' firm grip saved him from being bitten.\n\nAt that point, she exploded into an obscene diatribe against Yankees, the North, the Union Army and Jeremiah himself. With details on general Yankee anatomical shortcomings and Jeremiah's ancestry in particular. Her accent was so thick he could barely understand half of what she was saying, and for that, he was truly thankful. What he could understand was enough to make even a hardened sailor cringe. Even Sergeant MacKay looked suitably impressed, and he was a true artist in vulgarity at times.\n\nDespite being outnumbered and very much in custody, the young woman, who refused to even cooperate so far as to give her name, had to be bound hand and foot, then placed on her own cart, with one of the troopers at the reins. \n\nA half an hour into the trip to Headquarters, the trooper begged Lieutenant Lodge to be relieved of his duty, or his life, if necessary, to avoid her boundless vulgarity. \n\nRather than shoot his own trooper, Lieutenant Lodge ordered the young lady forcibly gagged.\n\n***** \n\nUpon arrival at Sutton, the young woman, refusing to walk on her own, was carried into the makeshift headquarters and jail, a former hotel that the Provost had appropriated for the time being.\n\nAfter Jeremiah's explanation, and a brief -- blissfully, an exceedingly brief - attempt to talk with the prisoner, Captain Darr sat at his desk watching the proceedings with ill-hidden humor. The Sergeant and three brawny troopers placed the woman, with her gag firmly in place again, in a former storage closet, which now had a sturdy oak door with a small barred window facing into the interior office.\n\n\"Lieutenant, I'm still hearing paper. Has she been properly searched?\"\n\nLieutenant Lodge turned bright red, starting at the tips of his ears. \n\n\"Sir, I can't... I don't...\" his voice trailed off.\n\n\"Well, Lieutenant, at least we can say with some certainty that she does not have a weapon or she certainly would have shot or stabbed somebody, by now. Probably you. I can't understand most of what she says, even when she isn't gagged, but she doesn't seem overly fond of you.\"\n\n\"I believe you may be correct, Sir. Although, in my defense, she doesn't seem particularly fond of anybody.\"\n\n\"Well, she will have to be searched.\"\n\nSergeant MacKay stepped up \"Sir, if I may, I think I have a solution.\"\n\nFifteen minutes later he was back with his wife, a large, powerful Clydesdale of a woman, Irish to the core. And with them was one of the Trooper's wives, a tall rawboned German woman.\n\nCaptain Darr herded the Troopers out but stopped Jeremiah when he tried to follow.\n\n\"Oh no. An officer has to be present when she's searched, otherwise, a military court would consider evidence inadmissible.\"\n\nBefore Jeremiah could object, he continued with no attempt to hide his grin. \"And I'm afraid I have been called to confer with the Colonel in Wheeling, so I must be on my way.\" \n\n*****\n\nMary listened to the discussions outside her cell but was totally unprepared for the size of the two women who walked in. \n\nShe felt her visions of fighting her way free and dashing for freedom melting away.\n\nThe enormous red-haired woman took the lead, taking off Mary's gag. \"What's your name, Dearie?\"\n\nWhen Mary didn't say anything she tilted her head to the side a bit.\n\n\"Look, Dearie, we can do this any way you want, but it's going 'ta end the same. There's no harm in telling us your name, we'll find out soon enough no matter what. So come on, come out with it?\"\n\n\"Mary.\"\n\nThe Irish woman gently untied Mary's feet and began untying her hands, speaking calmly and reasonably.\n\n\"Well isn't that something? Me name's Mary too. Irish Mary, they call me.\" She chuckled for a moment. \"Makes na sense to me. If'n you call for 'Mary,' in the street, near on every Irish girl will answer.\" She shook her head in amusement. \"My friend here is Bruna. Let's just make this easy. Strip down to your underpinnings, and we'll let the young gentleman out there examine your dress for more of your dispatches.\"\n\nThe young Lieutenant who had arrested her was facing away from the makeshift cell, but his ears turned an even more brilliant red as Mary watched.\n\nAs the big woman began to pull her dress up over her head, Mary panicked, knowing exactly what they would find.\n\nShe bolted, tearing from their grip, and unfortunately, from her dress.\n\nOut the cell door and toward...\n\n\"Stop her, she's running!\" The Irishwoman's voice rang through the building. \n\nThe young cavalry officer leaped to block the single door out and found himself tangled up with a demon from hell. A demon wearing nothing but high button boots. \n\nJeremiah was simply mortified. He desperately sought a way to hold her still without touching anything... inappropriate. \n\nUnfortunately, there was simply nothing appropriate about the lithe young woman to start with, and while she did seem to have a surplus of handholds, they were, like the girl herself, far from polite. \n\nShe was practically nose to nose with him when he met her dark eyes; they both froze for a second before her eyes narrowed and she clawed at his face. Before she could do any lasting damage, however, she flew up and away from him.\n\nFor the second time in a few hours, she was lifted from him amidst gales of laughter, held between the Irish woman and her German cohort, both of whom guffawed uncontrollably. She shrunk down on herself a little and quit fighting.\n\nJeremiah stood and averted his eyes, pulling his jacket off and extending it to the German woman, though his words were obviously intended for his attacker. \"Please be careful of the Bible in the left front pocket. It's a family heirloom.\"\n\nSergeant MacKay's wife spoke, still chuckling as she wrapped the cowed girl, \"I shoulda figured on that. Most hill county girls don't have underpinnings to wear. What were you going to do, Dearie? There's near on five hundred men out that door.\" She looked down at her captive in an almost affectionate manner. \"Next time, tell me, Dearie, we can spare ourselves the trouble.\"\n\nMary was herded to the back of the cell and watched carefully while the cavalry officer pulled more letters and papers from her dress.\n\nAfter her dress was returned to her, the young woman simply refused to acknowledge him in any way, which gave him a complete sense of relief.\n\nHe ensured the door to the cell was locked properly and fled as quickly as he could.\n\n*****\n\nTwo weeks later, Mary was brought in front of Captain Darr for the third time as he studied a pile of papers carefully.\n\nHe shook his head slowly.\n\n\"War is no business for women, young lady. In some places, they would hang you for spying. There's certainly enough evidence, and despite Lieutenant Lodge's testimony to your utter lack of capacity to think things through, it is spying.\"\n\nShe squared her shoulders and glared at him. \"Hang me then. Let the world see what kind of so-called men you damned blue jackets really are!\"\n\n\"Very dramatic. I don't think you understand the gravity of your situation, young lady. I'm inclined to release you, so long as you promise not to engage in this type of activity any longer.\"\n\nHe waited expectantly. \n\n\"I'll promise nothing of the sort. So long as one of you foul beasts desecrates the sacred soil of my state, I will do everything in my power to stop you.\"\n\nCaptain Darr rubbed the bridge of his nose in obvious irritation.\n\n\"Desecrate?\" He sighed. \"I don't recall giving any orders to desecrate anything. It would seem that I don't really have any choice but to forward you to Wheeling, maybe someone there can decide where to send you. Maybe we can 'get thee unto a nunnery.' Or perhaps they have women of similar ilk who they can house you with.\"\n\nMary expressed exactly what the Captain, the unfortunate Lieutenant, and all disgusting Yankee pigs could do with themselves in very fine detail.\n\nCaptain Darr looked over at his secretary, who had been taking notes but was now simply staring at Mary, frozen in shock.\n\n\"Please don't record her response, Eliot. The paper might just burst into flame. She will be escorted to the Wheeling Provost Marshall's office and placed in confinement there until such time as the Commander of the Mountain Department may determine her disposition.\"\n\n*****\n\nTwo days later, Mary was taken out and placed on a dispatch wagon. She felt her heart sink as the escort rode up to join them.\n\nSixteen cavalry troopers and one Lieutenant Lodge.\n\nShe couldn't even meet his eyes and realized he didn't want to meet hers either. He pulled up alongside and looked through her to the dispatch driver, then nodded sharply before issuing the order to move out.\n\nAs they set off, Mary decided it was going to be a very long three days to the railroad terminal at Weston. \n\nOver the next few days, they found that they could co-exist simply by not speaking any more than necessary. Despite his distaste for her behavior, beliefs and general befoulment of language, Jeremiah Lodge found a grudging respect for her dedication to her beliefs, even if she didn't seem to have a solid grasp on exactly what the whole conflict was about. She was perfectly willing to die for her cause, even if she wasn't sure what it was. And while Mary found them quite without redemption, what with their being foul mercenaries of the Black Republican cause, whatever that was, they did treat her with rather more courtesy than she'd expected. Even if it was the rather strained courtesy of a man trapped with a viper.\n\nLocal people glared relentlessly at the patrol as it escorted her to the station, but it wasn't until they'd very nearly reached Weston that anyone confronted them. \n\nA dignified woman, dressed quite well in contrast to the commonly worn homespun, marched right up to him and stood in front of Jeremiah's horse.\n\n\"Sixteen soldiers seem like rather a great many to guard one helpless woman.\"\n\n\"She is hardly helpless, but the escort is for the dispatches. We've had a few too many dispatch riders and wagons go missing lately, Ma'am.\"\n\nThe woman made an odd huffing sound that clearly indicated a complete lack of belief. \"I would have a word with your prisoner. I must ensure that she is not suffering indignities at your hands.\"\n\nJeremiah considered informing her that she could take her concerns to Washington DC, but the woman's demeanor suggested she might just do that if pressed. She might even prefer to do that, given her obvious self-importance.\n\nHe touched his hat brim. \"You certainly have my permission to speak with her, but you should be aware that she very rarely manages civil discourse with anyone.\"\n\nShe brushed past him with the barest acknowledgment of his permission. \n\n\"I am Clarissa Albright of the Women and Children's Relief Committee here in Weston. I've been... selected to inquire as to your treatment.\" \n\nMary had little doubt that the woman had selected herself to make the inquiry. \"Thank you, Ma'am.\"\n\nIt quickly became evident that Mrs. Albright was hoping for a horrific tale of lurid mistreatment that she could rescue Mary from. She tried to hide her disappointment at Mary's honest assessment that she was being treated with respect and courtesy. Jeremiah watched out of the corner of his eyes as Mary related a somewhat more forthright account of her martyrdom than he'd have expected. She did leave out the fiasco of searching her dress though.\n\nAfter Mrs. Albright had retreated to her covey of supporters, to give a no-doubt suitably embroidered account of the conversation, they had finally reached the train station. As he passed her off to the Federal troops stationed there, Jeremiah tipped his hat to Mary. \"I hope the accommodations in Wheeling will suit you, Miss Green.\" ",
        "***** \n\n12 February 1862\n\nWheeling West Virginia\n\nMary stared at the florid faced man at the desk in front of her. There wasn't much else she could do with the gag back in place.\n\nHe looked to his subordinate. \"How long have we had her detained, Mathew?\"\n\n\"Since August last, General Rosecrans.\" The staff officer, a Major, glanced over his papers.\n\nHe looked back at her. \"I have attempted to talk with her many times and I have detected no change in her temper at all. Not even the merest glimmer of contrition. Do you agree?\"\n\n\"I do, sir.\" The Major pulled the improvised bandage tighter on his hand. Stopping Mary Green's diatribe had cost him a nasty bite on his hand. \"She has proven quite unsuitable for virtually anything. We tried to parole her to work for a family that merely resulted in their children learning unbecoming language. Putting her to work preparing food was, as you well know, unsuccessful.\"\n\nGeneral Rosecrans leaned back and looked at her. \"Yes, I am quite aware. I had to sign the requisitions to replace the rather large amount of glassware and plates she managed to destroy during her rampage. A perfect she-devil. It is a pity she's not Catholic. We could send her off to a convent.\"\n\n\"Even if we could, I'm not certain it wouldn't be considered a stain on the Army's honor to foist her off on an unsuspecting victim, sir.\"\n\n\"I would send her to England just to keep her away for a while, but I believe that would be considered an act of war.\" Rosecrans looked entirely too pleased with his assessment. He sat up straighter, suddenly much more serious. \"That aside, I do not believe in leaving unsolved problems behind me for others. I'm afraid we have to do something with Miss Green, as I will not leave her to gnaw at General Fremont when he comes to this headquarters.\"\n\nThe staff officer waited expectantly, and there was little else Mary could do but remain silent.\n\n\"We will release her.\"\n\nThe Major stiffened in shock. \"Sir?\"\n\nGeneral Rosecrans smiled, and for the first time in all the many times Mary had seen him over the last several months, there wasn't the slightest hint of paternalism or good humor in his smile. \"Tell Major Darr that I have determined that we shall release Miss Mary Jane Green to her home in Braxton County with the hope and expectation that the next time she encounters Union troops while in her normal state of misconduct, they will simply shoot her without regard to her sex.\" His stare bored into her. \"Someone less chivalrous than I may be able to bring Miss Green's inappropriate behavior to an end.\"\n\n***** \n\n2nd of May, 1862\n\nThe Trestle Bridge \n\nWeston, Lewis County, Virginia\n\nMary clung low on the railroad embankment watching to the north, as most of the rebel band worked at destroying the Trestle Bridge. This wasn't going as smoothly as they had expected, the trestle bridge was proving much harder to destroy than they had planned. The trestles were too wet to burn due to the ceaseless rains and heavy mist that clung to the river, and the construction was typical Railroad Company Construction. The massive trestle timbers felt more like rock than like wood. Their attack on the telegraph lines earlier had gone much better, but then telegraph lines tended to be much more fragile than railroad trestle bridges. \n\nThe predawn gloom and heavy fog made it almost impossible to see anything but at least the fog muffled the sounds of the sledgehammers hitting the joints on the railroad bridge.\n\nUnfortunately, it also muffles the sound of the approaching Yankee cavalry. \n\nAs soon as Mary saw the vague forms moving through the fog to the north she leveled her Walker revolver and fired one shot at the vague figure in the lead. She frantically re-cocked the heavy pistol and tried another shot as the cavalrymen kicked their horses to a gallop. \n\nThe hammer jammed as she pulled the trigger.\n\nHeart pounding, she jumped and skidded down the muddy embankment to go warn the others, only to find far more cavalry had already come up from the south. She looked frantically for an escape but the cordon was completely around them and there were no gaps to run through. There must have been forty Union Soldiers surrounding her little band of eight. \n\nIt was obviously hopeless, so like the rest of her band, she simply dropped her revolver to the ground and raised her hands in surrender, her broad brim cap and shapeless clothes hiding her sex for the moment.\n\nThe Union Soldiers began separating men, taking and stripping them in a search for weapons. Mary desperately looked for an escape. She'd heard terrifying stories of what happened to unfortunate female guerrillas who'd fallen into Union hands.\n\nLooking for salvation Mary glimpsed a familiar face. It certainly wasn't a face she would have thought she would ever want to see again; right now it gave her the only hope she had.\n\nHe rode past her watching the proceedings.\n\nKeeping her voice low she hoarsely whispered. \"Lieutenant.\"\n\nHe didn't turn at all; she couldn't believe could he couldn't hear her. \n\nShe tried again. \"Lieutenant!\"\n\nHe still didn't turn. As a last act of desperation, she called him by the name that the others had always used. \n\n\"Jeremiah.\"\n\nHe finally turned and she saw the twin bars of Captain's rank on his uniform. \n\nHe peered toward her through the darkness, trying to make out her face, obviously confused as to why anyone would use his given name. \n\nHesitating, he reached out slowly with one gloved hand as if he was not only uncertain but fearful of the consequences. Before he could do so, she reached up and raise the brim of her hat with her own two hands.\n\nHe slightly closed his eyes and paused to send up a prayer of Contrition for whatever wrong he had done to deserve this.\n\n\"Miss Green, I'm not even going to ask why you are here or what you think you're doing. That has, as I recall, proven rather pointless in the past.\"\n\nAs hard as it was for her to ask a favor of a Yankee officer, she had to do so.\n\n\"Please don't let them search me. I don't have any...underpinnings.\"\n\nAnother Trooper rode up. She recognized Sergeant McKay just as he recognized her. He turned toward the Captain. \"I'd almost rather just shoot her out of hand rather than try and search her, Sir.\" She stiffened, not certain of how much was humor and how much he really meant. The Sergeant smiled at Captain Lodge. \"It's like you have your own personal plague sir. I believe the Egyptians may have gotten off lightly.\"\n\nMary thought it best to say something before the humor got too far out of hand. \"I will cooperate, provided searching is not done in an unseemly manner.\"\n\nWith a heavy sigh, the Captain slid from his horse as the Sergeant moved his own to shield them. Mary noted that the Sergeant kept his revolver resting across his saddle in her general direction, rather than returning it to his holster as many had done.\n\nMary stood with her arms outstretched and her legs slightly apart, face turned away as the Captain searched her. Her heart sank as she realized he was bleeding from his leg. Since no other shots had been fired it must have been hers that hit him. \"Are you hurt?\"\n\nHe paused and looked at her disbelievingly. \"That is what happens when you shoot someone. Did you think I wouldn't recognize that ridiculous hat? Fortunately, it appears that fury and self-righteousness are poor substitutes for good pistol drill and I have rather more of a scratch than anything serious.\"\n\nHis search was rather more thorough than she was comfortable with but obviously driven by anger and frustration rather than prurient interest. In any case, she reflected, she had rather fewer secrets from him than from any other man.\n\nIn short order, all of the erstwhile guerrillas had been searched and stripped to their underthings.\n\nExcept for her.\n\nCaptain Lodge looked over the sorry little band.\n\n\"My instructions are to hang incendiaries from the bridges that they attempt to burn. Happily for you, I see no evidence of any fire at all, though, I suspect that is rather more a statement of your ability than your will. Nonetheless, it is a fortunate break for you. So instead of hanging you, we will be marching you to the Provost station where you will be sorted properly.\" With that, he looked directly at Mary. \"Although I believe there are some of you who can't be sorted properly at all.\"\n\nMary was not particularly surprised that while she was allowed to remain dressed, she was forced to march along with the rest all the way to the Provost station. With the rain and muddy roads, by the time they reach the Provost station they were a sorry looking lot.\n\nAn obviously vexed Captain Lodge left them standing out in the rain under the watchful eyes of the troopers as he went in to confer with the Provost.\n\nA few minutes later Major Darr stepped out to look over the captives. He didn't even bother to try to conceal his amusement as he walked past Mary, shaking his head with a rueful grin.\n\nHe looked over Captain Lodge. \n\n\"Well Captain, it looks like we have our Hellion back. It's just as well, things have been awful quiet without her and we're starting to build up far too many unbroken dishes in the kitchen.\"\n\n***** \n\n12th of June 1862 \n\nWheeling, Virginia \n\nMary Jane Green shivered weakly in her bed, despite the mounds of blankets, one hand visible, picking feebly at the mattress as she mumbled in low terrified tones. Even though she was awake, or what passed for awake, her eyes were mostly unseeing as the Fever took its toll. Irish Mary looked down at her, the concern etched on her face. \"She'll not last the week if'n she don't start fightin' back you know.\"\n\nBruna nodded with a soft frown. She'd seen it before, all too often over the last several weeks. Typhoid fever had torn through the area, killing so many young men. \"She wouldn't take the medicine. What is she talking about? Who is Scratch?\" \n\n\"Ol' Scratch is the Devil. She's sayin' she's goin'ta have to marry the Devil. That he's a-callin' to her, and she's sayin' she doesn't want to go.\" She slowly and deliberately crossed herself.\n\nBruna shivered and muttered a Vaterunser under her breath before responding. \"Tomorrow's the full of the moon. That's for weddings. And it's a Tuesday. Weddings on Tuesdays are bad luck.\"\n\nIrish Mary grimaced. \"She's a headstrong lass, an' there's no mistakin' that, but she doesn't deserve this. Dying of Fever, well that's bad enough, but she's done nothin' for Scamp hisself to take her to wife.\"\n\nBruna glanced at the door and pulled a whisky bottle from her apron pocket. Whisky warded off the Fever, or so they said. There was no reason to take chances with it. She took a pull from the bottle and passed it to Irish Mary. \"It's very sad.\"\n\n\"An orphan whose brothers have gone for Soldier. Sad it is.\" Irish Mary swigged a mouthful of whisky herself. \"It sure'n tis.\"\n\n*****\n\nJeremiah jolted awake at his desk. He'd fallen asleep reading troop dispositions again.\n\nThe pounding sounded again at his door, bringing him to his feet. He wearily pulled his suspenders up onto his shoulders before opening the door.\n\nA large hand grabbed him by his shirtfront and dragged him into the corridor. He frantically fumbled for his revolver only to wince when he realized it was still in the belt and holster looped over the bedpost where he'd left it.\n\n\"C'mon lad, yer savin' her.\" The very drunk Irish woman dragged him down the hall with no more trouble than a nanny would have with a two-year-old.\n\n\"Who? What are you talking about?\"\n\n\"My namesake, she is, and that's enough, isn't it?\" She still wasn't making sense, but something in her tone warned Jeremiah that she was quite willing to use violence to do whatever it was she wanted to be done. \n\nA few moments later she opened the door to Miss Green's room; it had passed for a cell, now a sick chamber. She dragged him to the bed, where Miss Green lay in a ghastly pallor, twitching and mumbling fearfully.\n\nIrish Mary reached down and grabbed Mary Jane Green's hand and mashed it into his. \"We're here now, Dearie, and the lad here is goin' ta save you.\"\n\nJeremiah looked at her in disbelief. \"If you need the Doctor...\"\n\n\"The Doctor? Yer not makin' sense, boy. He's married.\" \n\nJeremiah shook his head in confusion. A moment later, an equally inebriated Bruna, carrying a truncheon, shoved a thin man in a Confederate gray uniform through the door. \"I have found one.\"\n\nIrish Mary eyed the man doubtfully. \"Yer a man of God?\"\n\nAfter glancing cautiously at Bruna and her club blocking the door, he responded politely. \"I am a Chaplain with the Army of East Kentucky, here under truce. \n\n\"What Church, Mister Chaplain of the Army of East Kentucky?\" Irish Mary's narrowed eyes carried a clear warning.\n\nThe Chaplain looked like he might argue for a moment, but chose the safer course. \"Episcopalian.\" \n\n\"It's nae Catholic, but it'll do.\" Irish Mary leveled her forefinger at the Chaplain. \"Let's get to it then. We have to do it before midnight.\"\n\n\"To what?\" Both Jeremiah and the Chaplain asked at the same time.\n\nIrish Mary shook head sadly and looked at Bruna. \"Are they both simple then?\"\n\nBruna squinted at them, a bit blearily. \"They must be.\"\n\n\"It's all the hardtack. It makes men even more simple than they are by nature.\" Irish Mary looked back at the two men. \"Yer savin' the lass.\"\n\nJeremiah held his hands up in confusion. \"I'm not a doctor.\"\n\n\"Yer a bit thick, lad. Pretty, but thick. Yer here to save the girl's immortal soul, not her body.\" \n\nThe Chaplain started to sidle to the door but thought better of it when Bruna hefted her club and narrowed her eyes at him.\n\n\"How am I supposed to do that?\"\n\n\"She cannot marry if she is already married,\" Bruna announced it slowly and loudly from where she stood, looking for all the world as if the question was settled for good.\n\nIrish Mary grinned broadly. \"The Devil's tryin' ta take her for his bride, but he canna do that if'n she's already married, see?\"\n\nIt took a few more minutes for Jeremiah and the Chaplain to fully understand the brilliant plan to save Miss Mary Jane Green's soul from eternal damnation. \n\nJeremiah wanted to protest, but Mary Jane's hand was grasping his as if he really was her only link to salvation and the pleading, stark terror in her near-unintelligible words was enough to quell him.\n\nThe Confederate Chaplain was both more practical and rather more easily swayed, realizing that the only guarantee of safe escape depended entirely on convincing the two very drunk, self-appointed, and rather large and sturdy, guardian angels that he had done what he could. It was, he reasoned, simple enough to carry out the ceremony. It would hardly matter, he decided, as the girl was unlikely to survive the night anyway. He too had seen more than his share of the toll the Fever took. \n\nThe Irish woman managed to prompt mostly coherent answers from the delirious girl, and the girl for her part seemed to take comfort in the matrimonial ritual, slipping peacefully into a still sleep as soon as Jeremiah had kissed her forehead. \n\nIrish Mary and Bruna stumbled out together, quite pleased with themselves. The Chaplain followed cautiously, although quite mollified by the bottle of whisky and a large sack of coffee beans that Bruna had produced as payment.\n\nJeremiah pulled a chair over to Mary Jane's bedside and sat holding her hand, waiting for her to slip away as so many others had recently.\n\n***** \n\n\"Captain?\"\n\nJeremiah blinked more fully awake and turned to look down at the woman whose hand he held. Whose hand he'd been holding every night for six days as he read passages to her from his Bible. The tone was so soft and peaceful that he barely recognized the voice. \"Miss Green?\"\n\nShe stared up at him for a long moment. \"Am I still? 'Miss Green,' I mean, I had a dream. It seemed real.\" She squinted slowly at the ceiling. \"We were...hitched. Married.\"\n\nHe stopped for a second and considered, then laughed for a moment. \"I don't really know.\"\n\nMary blinked a couple of times. \"You don't know?\"\n\nHe gave her a bemused look. \"I really don't. We will have to ask the Minister.\"\n\n\"I remember...\" She broke off shuddering in revulsion and gripping his hand like an iron band. \"It...or Him. Waiting for me...and you reached over to me and pulled me away.\" She flushed red, though not the red of fever for a change.\n\nJeremiah explained Irish Mary and Bruna's plan to fool the Devil. \"But I don't know whether that Chaplain married us or merely went along with them to keep himself in one piece. I'm not Episcopalian, and I was more concerned with your condition than with what he was saying.\"\n\n\"We might be married or we might not?\" Mary studied him for a moment. \"How do we find out?\"\n\nJeremiah sighed. \"We will have to find the man and ask him if we are truly married in the eyes of God.\"\n\nMary nodded slowly. \"I think we probably need to know. Why haven't you asked him?\"\n\n\"It seemed...unnecessary at the time. And I think Irish Mary and Bruna may well have beaten us senseless for even discussing it.\"\n\nA tiny hint of a smile pulled at the corner of Mary's mouth as she imagined that. Then the smile disappeared. \"Why?\"\n\nJeremiah refused to make eye contact for a long moment. \"I did not think it would be important because we did not think you would survive the night.\"\n\n\"Oh.\" She shrunk into her bedding a bit, her emaciated form almost disappearing.\n\n\"You didn't die though, Mary.\" \n\n\"No. I did not, and we may, or may not, be married.\" She seemed far less upset than he would have guessed. Perhaps the illness had temporarily blunted her edges. \n\n\"I hope you weren't betrothed.\" The concern and earnest tone caught Mary a little off guard.\n\nShe looked up at him with a weary shake of her head. \"Most of the menfolk are gone for Soldier and them that remain are simple, old or already married.\" She gave a sigh that might have been a laugh if she'd have had the strength. \"Or they're Black Republican Yankee mercenaries.\"\n\nJeremiah smiled ruefully. \"Isn't that the same as simple?\"\n\nShe gave a weak smile in return. \"Wasn't gonna say that out loud an' all. Can't be rude to the man who might have saved me from the Devil.\"\n\nHe looked down at the hand he was still holding and at the skinny arm attached to it. \"Do you feel you would be able to eat?\"\n\n\"I guess I could try.\"\n\nJeremiah let go of her hand almost reluctantly. \"I'll go get Bruna.\"\n\n*****\n\nA meal of clear broth later, Mary was able to almost sit up on her own, a development that Bruna appeared quite pleased with. \n\nIrish Mary pushed into the room just as Mary settled herself. \"There ya are, Lass. We was thinkin' you'd not be with us nae more. Kitchen physic will do you more good now than anything else.\" \n\n\"I don't think I would be here without you and Bruna.\"\n\n\"And your Jeremiah. The lad sat with you every night, reading God's word to you to ward off the Devil himself.\"\n\nEven though she suspected as much, Mary felt an uncharacteristic flush trickle through her. \"He did?\"\n\n\"Aye, he did. Sat in that chair. Slept in it too. Every night. Attending like a proper husband, he was. Every night, then off ta drillin' and patrollin' with his men every day, just like he is now.\" \n\nMary avoided looking in her eyes, embarrassed by the thoughts she was having. A Yankee. A damn Yankee and she was, well, probably married to him. Which brought up a question. \"What was the name of the minister that married us?\"\n\n\"Your man asked that already. I don't know. Bruna was deep in her cups and didna ask his name. Had a drink or two meself, medicinal, what with the Fever running here. It's nae matter I'm sure'n he was a proper Minister. Too Pecksniffian to be anythin' else, he was.\"\n\nMary bit her frustration back, not pointing out that the missing minister was the only one who could answer the looming question of whether Jeremiah really was \"Mary's man.\" Irish Mary didn't even notice, continuing on without missing a beat. \"As bad as the Fever held you, you'll be a couple months coming round. You'll need yer rest for a good while. Ya cannae see yerself, but you're just shadows and eyes right now, near ta nothin' left of ya.\" ",
        "The room darkened as evening fell, the night held off only by the lamp Bruna lit before leaving. Despite her utter exhaustion, Mary laid wide awake in her bed, unable to even close her eyes, much less sleep. A creeping unease began to fill her thoughts, growing larger and larger until she was afraid to even blink. She felt pinned and trapped by the shadows.\n\nShe gasped when the door to her room silently opened, trying to build the strength to scream. \n\n\"Miss Green, may I come in?\"\n\nThe amazing relief at the sound of Jeremiah's voice pushed the fear and darkness away at once. She caught the scream in her throat before responding. \"Yes. Please...please come in.\"\n\nHe carefully stepped around the door. \"I, uh...\" He paused, obviously at a loss. \"I just wanted to look in on you. I've been....\" He stopped, not sure what to say.\n\n\"They said I'll be better in a month or two.\"\n\nJeremiah nodded. \"Do you need anything of me? Or I can go get Bruna if you would prefer.\"\n\nThe thought of the darkened room sent a chill through Mary; the idea of being alone at night was horrifying. \"Did you really read the Bible to me every night?\" \n\nHe stepped a little closer. \"It seemed to comfort you some.\"\n\n\"Then maybe it has been helping with my healing.\" She glanced at the chair next to the bed.\n\nHe frowned slightly, then pulled his Bible from his jacket pocket. Then he sat and began to read to her.\n\n***** \n\n25th of December 1862\n\nWheeling, Virginia \n\n\"There is still no news?\" Bruna carefully placed the tray with the remnants of the roast onto the table and began slicing the meat.\n\nIrish Mary shook her head in disgust. \"Nary a word. The lad and lass should accept that they're married true.\" \n\nEven as she said it, though, she herself had doubt. None of her memories of the day were very clear and Bruna's were even less clear. Although the Armies exchange flags of truce for prisoner exchanges and other such necessities, the efforts to find the Confederate Chaplain had not been successful at all. With no name or specific unit to ask the question of, Confederate emissaries were amusedly willing to try, and very much willing to tell the tale of the might-or-might-not marriage to others, but had not had any luck.\n\nThe word had certainly gone far enough. Colonel John Hunt Morgan had his telegraph man commandeer a Union telegraph line long enough to send an amused message of \"possible congratulations\" to the \"maybe couple.\" Even Mary had smiled over that. \n\nFearing that the ceremony had been a sham, Jeremiah and Mary had treated themselves as betrothed, for lack of a better choice. With Jeremiah's long absences on patrols and raids, they simply seemed to be resigned to wait for an answer. \n\nWhat short furloughs he had were spent in Wheeling and as near to Mary's side as possible and there certainly seemed to be no objection to that from Mary. While they seemed determined to maintain propriety, Irish Mary and Bruna both suspected that there had been more than a few stolen kisses. \n\nThe war, however, seemed hell-bent on interference, as war is wont to be. Jeremiah Lodge, the Captain, was detailed to commands that seemed to take him farther and farther afield. \n\nHe'd begun to write letters to Mary, letters that she impatiently waited for and read eagerly. She'd had some trouble writing back as her learning was that of a hill country girl, but she wrote back anyway. Her letters often took much longer to reach him as he always seemed to be on the move.\n\n***** \n\n9th of June 1863\n\nFleetwood Hill\n\nBrandy Station \n\nCulpeper County, Virginia\n\nJeremiah stared at the grand pageantry poised across the field, took another hasty bite of hardtack, then looked at Sergeant MacKay and at the scratch band of horsemen he'd been given to secure this bare track of path. \"This is complete madness.\"\n\n\"Tis certain that, Captain.\" The Sergeant loosened one of the revolvers in his saddle holster. \"Truly a wonder, Sir. It's certain na' war, but it is a wonder.\"\n\nJeremiah had just finished tying up his remaining hardtack in the blue checked gingham cloth and securing it to his saddle when a harried-looking Lieutenant rode up. \"Captain? Colonel Kilpatrick is preparing to advance to take the hill. He is gathering officers to relay his orders. Your presence is requested if you can spare yourself.\" \n\nSergeant McKay nodded gravely at the Captain. \"God be with you, Sir. Take care with yourself. We'll hold the road.\" \n\nAs they rode along the rear of the line of the cavalry, Jeremiah felt the excitement and tension crackling through the air, it was the same feeling as electricity building before a lightning storm broke over the mountains.\n\n\"Captain Lodge!\" \n\nJeremiah looked to see where the call had come from and saw the grinning face of a Captain of the 1st New Jersey Cavalry. He couldn't remember the man's name, but he remembered the bottle of whisky they'd shared. The man continued. \"You're going to miss it if you keep on that road. This is the real thing. Not tearing up some tracks, or chasing guerrillas for once. Unless you Illinois boys don't go in for this type of sport.\"\n\nWith the unspoken challenge hanging in the air and the Jerseymen troopers watching expectantly, Jeremiah looked at the Lieutenant. \"Colonel Kilpatrick said I should come 'if I can spare myself'?\"\n\n\"Yes, sir.\"\n\n\"His full staff is ready to hand to relay orders?\"\n\n\"Yes, Sir.\" There was a crawling note under the Lieutenant's voice, an eager and hopeful sound.\n\n\"I believe I may have another duty to attend here.\" He turned his horse and pushed it into line with the troopers who nodded respectfully and made space. The Lieutenant pushed up beside him silently, smiling maniacally.\n\nHargrove, he remembered; the New York Captain's name was Hargrove. \"Captain Hargrove, do you know of a French General of Hussars named 'Lasalle'?\" He raised his voice enough to carry across the Jerseymen Cavalry.\n\nHargrove chuckled and answered in kind. \"I believe I do, Jeremiah, I believe I do.\"\n\n\"You remember what he said? 'Tout hussard qui n'est pas mort \u00e0 trente ans est un Jean-Foutre.' Any hussar who isn't dead by the age of thirty is a lazy bastard!\" \n\nLaughter and cheers answered from the troopers.\n\nA shimmer of silver passed down the line as bugles sounded and the order to draw sabers was passed. \n\nThe order to charge was more felt than heard, a flash of chain lighting and madness that ripped along the Federal line in an instant. \n\nThere was a dreadful pause, a moment of death and silence, before the mass of troopers exploded outward across the field in a solid glorious line of blues and silver, flags snapping. The huzzahs of the Union cavalry sounded a chant that built-in tempo and volume, heard even over the thunder of hooves.\n\nAn answering flash of sabers from the Rebel line sparked and spread until it was a full crest of silver. The grey and butternut line seemed to take a breath then jump and surge forward all at once. A high pitched yell, like a fox hunters \"halloo,\" built and called in answer to the low Union paean. \n\nThe two lines collided in a confusing torrent of horses and men; screams, shots and the clash of steel drowning out all sanity and strategies.\n\nJeremiah drove his sword into the shoulder of a wild-eyed rebel in a pristine grey uniform and bright yellow kepi. A stumble of the horse had saved the man from Jeremiah's thrust at his heart. In an instant they were past each other and Jeremiah was laying about himself with his saber as he was surrounded by a wall of gray and butternut uniforms. A revolver muzzle was thrust against his breast, but he twisted aside just as it fired; the bullet must have gone into one of the rebel soldiers around him. There was simply nowhere else for it to go.\n\nThe fray was an endless eternal flood of blood, steel and gunfire as Jeremiah frantically parried sabers, slashed at revolvers and thrust into bodies.\n\nWith no warning at all, he was suddenly clear of the press of men and horses with no target near to hand as blue and grey riders shattered away from each other. Pulling the .44 Army Colt with his left hand, he thumbed the hammer back and fired once after the retreating backs of the Confederates.\n\n\"You're a mad man Jeremiah Lodge!\" Jeremiah spun in his saddle to see Captain Hargrove laughing and waving him frantically back to the reconsolidating Union line.\n\nAs he trotted back to the front of the line, the grinning New Jersey Captain pointed to him. \"Be careful with that one, boys, he thinks he can take on all Jeb's men by himself.\" \n\n\"So what's the next...\" Jeremiah froze as the preparatory bugle call for the charge sounded up and down the Federal line. \"Again?\"\n\n*****\n\nA mix of acrid powder smoke and the iron smell of blood hung over the battlefield as Sergeant McKay watched the last of the flood omen and horses surge past his position. Blown and wounded horses, carrying exhausted and wounded men, poured down the small track as the Union forces pulled back. The battle had lasted for hours, charges and counter-charges sweeping back and forth across the ridge, the shock of the Confederate cavalry was palpable in the atmosphere; the Federal cavalry, for the first time, had met them charge for charge as equals on the battlefield. \n\nMcKay had detailed a couple of his men to catch the reigns of riderless horses that were caught up in the mass. His men would be a part of the screen for the withdrawal, though it didn't look like there would be much screening to do. The Rebels seemed uninterested in any real pursuit along this line, and McKay, with the senses of a veteran cavalryman, sensed that harassment would be halfhearted at best, at least for a while. \n\nOne of the troopers moving down the road leading a roan caught his eye and he reached over and grabbed the reigns of the blood-drenched horse and pulled it closer, looking at the blue checked gingham wrapped rations tied off to the saddle and shook his head sadly. \"Aw, Captain Lodge. I warned ya to be careful in this great bloody brawl.\"\n\n***** \n\n3rd of September 1863\n\nWheeling, West Virginia\n\n\"She's gone?\" Irish Mary looked over the empty room sadly and shook her head. \"Was nae door nor lock that held her here.\"\n\nBruna combed through the room. \"She has taken his letters and everything.\"\n\n\"She'll nae be comin' back, then.\" Irish Mary picked carefully closed the empty desk drawer she had checked. \"She's nae right in the head, you know?\"\n\n\"It was the shock.\" \n\n\"Aye, 'twas the shock. She waited for near a week.\"\n\nMary hadn't cried or wailed after they had received the casualty list with Jeremiah's name on it. She'd just sat at the desk, hollow-eyed, staring blankly at an unwritten letter, a nearly blank sheet of paper she'd been at when they got the awful news. The only thing on the page was \"My Dearest Jeremiah,\" written in the most careful and beautiful script a hill country girl could manage.\n\nThat page was the only thing left in the room.\n\n***** \n\n24th of October 1864\n\nMosby's Confederacy, Virginia\n\nShe couldn't even remember the number of raids she had scouted for, or the number of skirmishes she'd been in. \n\nMary had heard that Colonel Mosby was in desperate need of scouts who could ferret out information on Union positions, scouts daring enough to risk execution by Federal troopers if they were caught. \n\nDespite the initial worries of the men, who worried that women were too soft for war, she had never had a problem pulling a trigger. The men in blue all had one failing, a failing that made it all too easy to shoot.\n\nThey weren't her Jeremiah. And they were alive and her Jeremiah was dead. That was all the rational she needed.\n\nIf her companions could have seen inside her, they would have been chilled to realize that she could just as easily pull the trigger on them. They weren't her Jeremiah either, so they were nothing at all to her.\n\nSome of the Confederate Partisans talked about being able to hate, and how it made fighting easier. But Mary felt nothing, just that howling darkness inside, one that seemed to make the world flat and meaningless. She'd hoped to find a cause, hoped to find some meaning when she sought out Colonel Mosby, but she found nothing. She scouted and fought because that was what she could do in an eternal war with nothing else to live for.\n\nMary only admitted to herself that she was simply waiting for a Union bullet to find its mark and send her on to her Jeremiah. Or perhaps the bullet would send her to the Devil's side. She was beginning to think even that was preferable to this pointless world with its endless, meaningless war. \n\nColonel Mosby himself had called her to his headquarters to tell her of the price on her head. The Yankees had no name, just words like \"spy\" and \"Hellion.\" The description had her as dark-haired, or occasionally blonde and she was variously described as tall or short. The most popular name on the flyers sent out by the Federals was \"The She-Devil,\" which made her laugh darkly. Maybe she would be the Devil's bride after all. A widow, after all, can remarry. \n\nColonel Mosby had pushed the flyer over to across the desk. \"Miss Green, be aware that you will almost certainly be hanged as a spy if you're caught, and there's nothing I can do about that. It is well within the conventions of war. Under normal circumstances, even the Yankees would pardon a woman for spying, but in your case, I doubt that applies. Custer is outside the bounds already, hanging my men, as he has already done; that is why I have had to issue the orders I have. He appears to have a special hatred for you.\"\n\n\"I shot his aide in battle, I didn't execute him or kill him while he was a prisoner. I didn't kill him in his sleep.\" Mary said it stonily and Mosby eyed her for a moment.\n\n\"That may well be true, but you are not a uniformed soldier, and that alone would be justification for him to order your execution. I am considering discharging you from my service for your own safety.\"\n\n\"I would simply join up with one of the other guerrilla bands. Colonel.\"\n\nHe looked at her tiredly. \"The 43rd Virginia Cavalry is a recognized regular Partisan Ranger unit, under the laws of war. We are not guerillas.\" He paused. \"I know what you would do, so I will not discharge you for the time being, but I may change that at any time.\"\n\nCollecting her horse, Mary left the encampment. The few sparse flakes of snow that were falling had begun to grow larger and more numerous, sparks of cold on her face and cheeks as they melted.\n\nShe was certain that the Colonel was planning to relieve her from service as soon as he could do so with a clear conscience. He very much considered himself a gentleman and she'd always felt he was uncomfortable with women directly participating in war. He seemed, like many men, to feel that women should be making bandages or peeing into pots to make gunpowder, rather than dealing more direct blows for the Cause. Whatever that was, she reflected. If anything, she had learned from her long talks with Jeremiah that the war was far more complicated than she had ever believed. \n\nMary rode on through the whirls and eddies of snow, the early winter storm. She doubted it would be a bad one, but she also knew it was impossible to be certain of the weather in the Shenandoah. The hour-long ride down the trails and tracks turned into three hours and took her through the abrupt darkening of the western sky. Night fell suddenly in the valleys of the Shenandoah. There was enough dull moonglow pushing through the winter clouds to fall with the snow to make her way, but if she didn't reach camp before moonset, she'd have to huddle down wherever she was rather than risk a fall into a draw.\n\nJust as she passed the twisted oak at the edge of the camp, she heard the oddly muffled shots and shouts of battle in the snow. A Yankee patrol must have stumbled across the encampment. \n\nIt had to have been an accident since even the Yankees weren't damn fools enough to attack with mere minutes of moonlight left. The sounds were more of marked confusion than anything coherent, Mary had been in enough clashes to know the difference. She pulled her Colt Navy from the saddle holster. She thumbed the hammer back before resting it across the pommel, as she moved cautiously in on the camp.\n\nA burst of gunfire focused her just in time to see a figure racing through the darkness and snow and she steadied the big revolver on it.\n\nThe swirling snowflakes made it all but impossible to see her target, a looming shadow, barely visible except as a pattern in the blindness. But that pattern had the unmistakable shape of a Union Cavalryman. A glimpse of dark blue through the snow confirmed her suspicion.\n\nHer Colt revolver boomed, and the shadow seemed to fall apart. The larger part raced past her, resolving into a galloping horse, the smaller part falling to the road, still and quiet. \n\nTwo more figures, obviously in pursuit of the first drew up slowly and cautiously, one finally calling out in a hoarse whisper. \"Show yourself.\"\n\nRecognizing the voice, she answered, \"Don't be a fool Martin, It's me.\"\n\nHe lowered his revolver to his side. \"I think he's the only one we got. Four of 'em ran right through the middle of camp, dispatch or something. Must have gotten lost.\" He dropped off to check the body. \"This one's alive.\"\n\nHe didn't sound too happy about it and Mary knew why. Colonel Mosby had ordered them to hang one prisoner out of the next batch of Union soldiers they took in retaliation for Custer's \"illegal contravention of the laws of war.\" Custer had ordered some of Mosby's men hanged as guerrillas, even when they were clearly captured in uniform. Or at least as much uniform as most Confederate soldiers still had. Still, killing a man in battle was one thing, and hanging a prisoner, no matter how much you supported the Cause, was another entirely. It was a murder of sorts, rather than war, and the Rangers were very disconcerted by the orders. \n\nThe other figure, Martin's brother Joseph, helped him move the prisoner back to the camp while Mary went on ahead to warn the guards so there would be none of the unfortunate confusion of the type that often has soldiers shooting their own.\n\nShe knew Captain Barrow would have mixed feelings about her return. He was practical enough to understand her value, but, more than the others, he was astute enough to sense that she was no more on the Confederate side than the early winter storm was. \n\nAfter hobbling her horse, she began to fold down the small shelter set off to one side past the Captain's. She usually stayed in sympathetic farmer's houses, as did they all. When she had to stay in camp, the location of her shelter had become customary after a drunken Ranger had \"accidentally\" tried to enter her tent. He had been beaten quite bloody, and quite senseless, with a spare horseshoe. \n\nCaptain Barrow, Martin, Joseph, and the others were quietly arguing how to have prisoners draw lots for hanging when there was only one prisoner.\n\nShe paused, something drawing her to where the prisoner sat slumped against a tree on the edge of the overwatch, the drop off that gave the Partisans a clear view down the draw and into the valley below.\n\nThe guard, a boy of sixteen whose name she couldn't remember, was trying to look fierce and military as he both watched the prisoner and the draw for approaching Union forces.\n\nThe Union trooper, wounded in the side of his chest, raised his head at her approach and she felt her heart stop. \n\nHe'd aged and his face was scarred and a long furrow ran across the left side of his head, the very top of his left ear clipped neatly off as well. \n\nBehind her, she could hear, as if at the bottom of a well, the argument about drawing lots come to an end and the men getting up to execute their unpleasant duty. They were in a hurry, of course. The three escaped Union troopers might be coming back with a real patrol. ",
        "The hollow sound in her ears built. She pulled the tiny gun from the top of her boot, then leaned over the prisoner, pressing the barrel against his left breast. \"This is for the best.\"\n\nThe sound of the shot startled the boy into a small cry between outrage and horror as the Union soldier fell back, the edges of the bullet hole in his uniform coat smoldering from powder burns. She looked down into Jeremiah's open eyes then placed her boot against his body and shoved him over the edge to tumble into the draw. \n\nShe turned back toward Captain Barrow. \"We don't have time for this. Those missing Yankees are probably coming back with more.\"\n\nJoseph and Martin stared at her in utter revulsion as they finally realized what Captain Barrow had sensed all along.\n\nCaptain Barrow stood silent for a long moment, his lip twitching as he tried to keep control of himself. \"Miss Green, you may consider yourself under arrest.\"\n\n*****\n\nColonel Mosby studied her across the table.\n\n\"There was only one prisoner. Colonel. There was no need to draw lots with one prisoner. We had your order to execute a prisoner. It was simple.\" Her icy demeanor made the room feel even colder than it already was. \n\n\"There are conventions to war, Miss Green, else we are no better than animals. Partisan Rangers are regular forces, not guerrillas and we do not, ever, execute a prisoner out of hand. I am trying to prevent needless cruelty and death with my orders. I will not have the department under my hand descend into a hell, like Missouri.\"\n\nHe waited for an excuse or a complaint, but she sat wordless and silent, her dark eyes absolutely still, so he continued. \"Were you a man under my command, a Partisan Ranger, or indeed, a soldier of any type, I would convene a Courts Martial.\" Colonel Mosby sighed and shook his head. \"As it is, I have only myself to blame. You are not a soldier and I should have insisted that you remain unarmed and be kept from battle at all costs. You have, as I have noted before, and by all accounts, been an exemplary scout. Nonetheless, I find myself in the position of having to discharge you from your service in that role.\"\n\nMary stared at him silently. \n\nColonel Mosby looked her over sadly. \"Miss Green, I've always been exceptionally fond of you. Whatever demons are walking in your shadow, I do sincerely wish you the best of luck in expelling them.\" \n\nMary walked out without a word to him, the weight of the revolver in her boot all too real and all too heavy. \n\nAs she cleared the door she whispered to herself. \"Not Miss Green. Lodge. The Widow Lodge.\"\n\n***** \n\n12th of December 1865 \n\nGalena, Illinois\n\nAs she finished Mary sat looking at her hands silently for a long moment. \"I've taken too much of your time Ma'am. I...\"\n\n\"Nonsense.\" Elizabeth smiled. \"I'll have a room made up for you and you will stay here until this is resolved. My husband, Robert, should be able to help with this. He was on General Grant's staff.\" She paused. \"Did you learn anything else?\"\n\n\"I found a bundle of letters in Wheeling that arrived after I left. Bruna is keeping the boarding house there and she kept them for me. I can't read them. It hurts too much to even look at them.\"\n\nWith a slight frown, Elizabeth asked her the obvious question. \"Are any of the letters from after you...?\" She trailed off as she realized there was no delicate way to put the question. \n\nShaking her head slowly, Mary answered quietly. \"No.\" She managed to look even more despondent. \"I did learn about the Chaplain though. Afore he died, Colonel Morgan had his man send another telegram. The Chaplain got drunk and drownt trying to cross a river.\" She met Elizabeth's eyes, exhausted. \"I don't even know if I'm a widow.\" \n\n***** \n\n12th of December 1865 \n\nBeacon Hill, \n\nBoston. Massachusetts \n\nMary took a deep breath and looked up at the imposing house. Even with Elizabeth holding her hand, even in the ridiculously fine dark green dress that Elizabeth insisted she wear, Mary felt like fleeing through the streets. \"If he rooms in this house...\"\n\n\"His family owns this house.\"\n\n\"The whole house?\" Mary's voice quavered and she started to pull loose, looking down the street for somewhere to go.\n\nElizabeth almost smiled. Two days ago, on the train, when a man had rudely propositioned Elizabeth, Mary had simply pulled a tiny revolver from the folds of her skirt and pressed it to his heart, requesting his apology and departure as rapidly as possible. She hardly seemed like the same girl now. Elizabeth squeezed her hand. \"I'm here with you.\"\n\nCaptain Jeremiah Lodge was very much alive and he turned out to be Brevet Lieutenant Colonel Jeremiah Lodge, of Boston. His family had used their influence and family connections to get him a commission in the Illinois Cavalry. When Elizabeth finally learned who he was, she had sent a flurry of telegrams. Despite being born a Gustine of the Natchez Nabobs, even she was a touch uncertain about approaching the Lodges of Beacon Hill with the news that she was bringing their \"possible daughter-in-law\" to their door. If nothing else, Elizabeth vowed to herself that no matter the reception by the Lodge family, she could and would shield Mary. Her husband's interests in steamboats and the railroad had given her the financial ability to do that.\n\nThe door opened before they could even knock and the butler ushered them into a parlor. \n\n\"Please wait here. I will let Madame know that you have arrived.\"\n\nMary paled looking over the room. A small table with a glass dome drew her and she stood silently before it. \n\nElizabeth followed and studied the display. \"This is it then?\"\n\nMary nodded mutely.\n\nThe scorched and maimed bible with its fine dense pages sat opened, a bullet resting where it come to a stop. \n\n\"It made it all the way through to the Book of John.\" Elizabeth smiled.\n\n\"I guess I loaded it a bit heavier than I thought.\" Mary smiled weakly. \"I was hoping it'd stopped by Matthew.\"\n\nA presence, more felt than heard, made them both turn to face an aged, elegant woman in black. \"Josephine will be serving tea. Please sit.\"\n\nThey sat silently until the tea was served out by an absolutely silent servant girl. The old woman sipped her tea and set it down. \"What am I to do with you?\"\n\nElizabeth blinked. She'd expected a bit of coldness but not such a direct approach. Before she could find a response, Mary spoke up, startled from her fearful pose. \"What?\" It was, perhaps a bit inelegant, but just as direct as the woman's statement.\n\n\"The bible verse, your bullet stopped at the end of that line. 'Woman, what am I to do with you?' It is certainly appropriate, don't you think?\" There was a hint of a smile at that last.\n\nMary blinked. \"Oh.\"\n\nElizabeth rallied. \"I do realize this is a bit of a scandal Mrs. Lodge, but I know that it was never Mary's wish to cause any problems.\" \n\n\"Other than shooting him on occasion, you mean?\"\n\nMary fixed herself into a frozen smile. \"He was a Yankee soldier, after all.\"\n\nThe older woman's smile grew, just a touch. \"Then the shooting is to be expected.\" She sighed. \"We can survive a scandal. A family must have the occasional scandal, after all.\" She studied Mary. \"He's been looking for you for quite some time young lady, much to the annoyance of the unattached women of Boston and New York. He even brought Colonel Mosby into my house, where they drank entirely too much brandy and spent entirely too much time laughing about the trickery and cunning of a certain she-devil.\" She shook her head. \"Imagine, John Singleton Mosby, a guest in my house.\"\n\nMary felt herself flush red.\n\nThe older woman suddenly stopped and stood. \"I believe Elizabeth and I have some private matters to discuss.\"\n\nEven Mary was surprised at the sudden breach of protocol and she stood to watch them sweep out of the room with shocking speed. \n\nService with Mosby had taught her, however, to recognize an ambush; she whirled around to find Jeremiah standing in the other doorway. \n\nBreathing was suddenly an effort.\n\nJeremiah eyed her cautiously. \"I should have asked Nathan to ensure you were unarmed. You do have a tendency to shoot me whenever we meet.\" The glitter of humor in his eyes was just enough. \n\n\"I only have a little boot gun.\"\n\n\"Well, you have shot me with one of those before and I suffered little from it, so I think you can keep it.\" He looked serious for a moment and touched the scar on the side of his head. \"I would have written to you if I was able. I didn't even know you believed me dead.\"\n\nMary swallowed an involuntary cry and caught her breath, then she took one hesitant step toward him. \"I need to know Jeremiah. Am I yours or the Devil's?\"\n\n\"I don't know. I'm afraid our Minister seems to have gotten swept away in a deluge. But I do know there is only one way to fix it.\"\n\n*****\n\nThe wedding was both utterly scandalous and wildly popular. The sheer spectacle of one of the Brahmins of Boston, a Lodge, marrying a West Virginia hill country girl, a completely unreconstructed rebel, no less. The Matron of the family made very clear that she would tolerate no disrespect to the girl. The Lodges normally believed in quiet family weddings, and yet the three-day celebration of the wedding of Jeremiah Lodge to Miss Mary Jane Green was the largest social event in Boston for over a decade. \n\nThat the Bride was given away by Colonel John Singleton Mosby in his full Confederate dress uniform was no small cause for comment, of course. Despite some lingering animosity from the war, Colonel Mosby and the many Union officers present for the event appeared to have been quite at ease together, although that may have well been the result of the medicinal properties of a rather large amount of brandy consumed over those three days. \n\nRumors that the Bride carried a pair of silver-plated pistols in the skirts of her gown were never confirmed, although they were almost certainly true. \n\nPost Production Notes:\n\nThanks especially for all the support, this is taking us down a path we'd never even considered. We're going make a run at getting published one way or another because of the encouragement we've gotten. If you are interested, you can Todd Dorsey (todd.dorsey.108) on Facebook. The profile picture is of an old typewriter right now.\n\nThe American Civil War: This was, by far, the most destructive war in US terms in history. A minimum of six hundred thousand Soldiers, Sailors, and Marines died out of a total population of just under 30 million. To put it in more understandable terms, one in every four white male Southerners of military age died, with another one in four maimed. One in seven white male Northerners of military age died as well. These numbers are likely low, other estimates range as high as 750,000. Civilian population deaths are believed to be between 50,000 and 250,000 dead. Estimate on deaths in free black and slave populations and Native Americans are so uncertain as to be essentially meaningless, though they were certainly very high. The total death count is probably higher than the combined total of all other United States wars combined.\n\nThe Armory:\n\nI get a lot of weapons questions in email so it is simply easier to address them here. The American Civil War had a huge range of weapons. Some units began the five-year conflict with smoothbore flintlock muskets, while others ended the war with Gatling guns.\n\nColt Walker Revolver: One of the most powerful handguns of the 19th Century and well into the 20th, the Colt Walker was capable of using 60 grains black powder charges -- twice that of a standard revolver. The .44 caliber Walker was a massive, four and a half-pound monster. It did have some technical problems that were addressed in the Dragoon series of revolvers. Performance was roughly equal to a modern .357 Magnum with a four-inch barrel.\n\nColt Army Model 1860 Revolver: This was the standard pistol issued to Union soldiers throughout most of the war. At just under three pounds, the .44 caliber Army 1860 took a 30-grain powder load and was considered a solid, reliable sidearm. Performance characteristics are similar to a modern 9MM Parabellum round.\n\nColt 1851 Navy Revolver: A very common sidearm of the American Civil War, the two and a half pound .36 caliber revolver was typically used with about a 20-grain powder load, with a performance roughly the same as a modern .380 caliber (also known as 9MM Browning Short). \n\nColt Paterson Pocket Model Percussion Revolver No 1. aka: Baby Paterson: This .28 Caliber revolver was very underpowered by modern standards, typically using a mere 5 to 7 grains of black powder per charge, there is no comparable modern round, as even the .22 short is more powerful, but it could be lethal at very close range. \n\nModel 1860 Light Cavalry Saber: By the time of Brandy Station, most of the original M1840 Cavalry Sabers, known as \"wrist breakers\" due to their weight, were replaced by the lighter, generally more effective Model 1860. The Model 1860 is occasionally referred to as the Model 1862, as this was when the issue of these sabers actually began.\n\nThe Battle of Brandy Station: On 9 June 1863, Major General Alfred Pleasanton's Union force attacked Major General J.E.B. Stuart's Confederate force at Brandy Station, Virginia in the largest predominantly cavalry battle of the war. Neither leader shines particularly well: Pleasanton failed to coordinate, follow up or actually lead during the battle. Stuart showed his usual brilliance at tactical leadership, but despite all his protestations to the contrary, he was clearly caught flat-footed, a particular humiliation for any cavalry force. The troopers on both sides, however, were absolutely inspired, relentless and reckless to a fault: all the finest qualities of cavalry. Unlike most cavalry operations in the American Civil War where cavalry often operated as mounted infantry, this battle was an epic mounted cavalry clash in the tradition of the massive Napoleonic battles. \n\nThe battle was technically a tactical Confederate success, but for the first time the Union Cavalry had met and fought the Confederate Cavalry on an equal basis -- a fact commented on by nearly every Confederate we have written records from, except for Stuart, who seems to have been more than a touch peevish about it. Depending on which historians you believe, this battle may have been partially responsible for Lee's failure at the Battle of Gettysburg. \n\nThe Comte de Lasalle's quote: \"Tout hussard qui n'est pas mort \u00e0 30 ans est un Jean-Foutre\" is usually translated as \"Any hussar who isn't dead by the age of thirty is a blackguard\" but that really tones down the actual meaning in French at the time, where the meaning was less genteel. \"Jean-Foutre\"  was a far harsher term than \"blackguard,\" derived from \"Je m'en fous\" which has roughly the same meaning as \"I don't give a fuck\" though it will usually translate as \"I don't care.\" I've chosen to use \"lazy bastard\" here because it feels close enough, particularly in the rather less free-wheeling setting of the Civil War. In modern terms, I believe it would probably be connotatively closer to \"useless fuck.\" \n\nMary Jane Green did not spring from whole cloth: She is a fictionalization of a real person noted in Union reporting during the United States Civil War. I stumbled across her in reports while doing research. When I showed the reports to The Missus, she pointed out that given my weakness for \"uppity and difficult women\" I should keep the reports and use her as the basis of a story. She would, in all likelihood, have hated the outcome in my tale. Herewith, from the Official Records of the War of the Rebellion, is one of the reports concerning Miss Mary Jane Green. \n\nOFFICE PROVOST-MARSHAL-GENERAL, \n\nWheeling, January 5, 1863. \n\nColonel W. HOFFMAN, Commissary-General of Prisoners. \n\nSIR: I have the honor to reply to yours of the 3rd instant asking for the\n\ncharges, &c., against Mary Jane Green. In the month of August 1861, when on\n\nthe staff of General Rosecrans and acting as provost-marshal in the field I\n\nhad this girl in custody in the jail of the town of Sutton, Va., charged as\n\na spy for the guerrillas. She did not deny the same and cursed terribly,\n\nvowing what she would do if ever released. I directed that she should be\n\nsent to Wheeling, where she was confined until December 1861, when General\n\nRosecrans made his headquarters in this city. I called upon her to see if\n\nany change had taken place in her disposition but found her as bitter as\n\never. General Rosecrans had her brought before him when she abused him well\n\nwith her tongue and he ordered her back to jail. Shortly before General\n\nFremont assumed command of the Mountain Department General Rosecrans\n\ndirected me to send Mary Jane Green to her home in Braxton County with the\n\nhope and expectation that the Union troops would shoot her. I released her, \n\ngave her transportation and in a very short time she was returned to me\n\nhaving been caught in the act of destroying the telegraph line near Weston, \n\nLewis County, Va. This was in May 1862. On her arrival here she took sick,\n\nrefused to take medicine and came near dying. This seemed to cool her\n\nsomewhat and since August last she has professed penitence. She is an\n\nignorant creature, but at times has the ferocity of a perfect she-devil\n\nabout her. I cannot advise her release and respectfully suggest, as in the\n\ncase of Marian McKenzie alias Harry Fitzallen, reported to you December 24\n\nand 25 (to which I have no reply*), that she be sent if possible to some\n\nhouse of refuge or detention and be held there until the end of the\n\nrebellion. I omitted to say that in April last before I sent her home I let\n\nMary Jane Green out of jail on parole and got her a place to work with a\n\nfamily here, but owing to her bad temper and conduct I was obliged to place\n\nher again in custody. Her three brothers are now guerrillas. \n\nVery respectfully, your obedient servant, \n\nJOS. DARR, JR., \n\nMajor and Provost-Marshal-General. "
    ],
    "authorname": "Todd172",
    "tags": [
        "civil war",
        "confederate",
        "union",
        "violent",
        "war",
        "wine and old lace story"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/a-perfect-she-devil"
}
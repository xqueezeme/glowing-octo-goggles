{
    "title": "The Super Brain is Super Sexy",
    "pages": [
        "WHOOF! \"Eeeeek!\" \n\nAnd that's how I found myself falling backwards with a bundle of terrified girl in my arms. I landed on my butt and rolled sideways to avoid slamming my head on the floor, automatically tightening my grip around Laura to protect her. We ended up with me nearly on top of her, my arms under both of us. \n\n\"Are you alright?\" We both said it at the same time, and then we both laughed. \n\nThat broke the disorientation, and I suddenly realized what my right hand was tightly squeezing. A firm, very nicely shaped, breast. Laura's breast. Laura the super brain. \n\nI let go. \"Sorry!\" \n\n\"It's alright. Small price to avoid banging my head.\" Laura stood up as I scrambled up behind her. She added in an offhand tone, \"But you'll have to date me to do that again.\" \n\n\"I'd love to.\" Shit, what just came out of my mouth? Before I even thought about it? \n\nLaura turned, an arch in her eyes. \"Which one, date me or feel me up?\" \n\n\"Both.\" Again, I couldn't believe what was coming out of my mouth. My face started burning. \n\n\"How romantic.\" But there was a small smile playing across her lips. I decided to gamble before I lost my nerve. \n\n\"Laura, could I interest you in a date this weekend?\" \n\n\"Maybe. What do have in mind?\" \n\n\"Dinner and a movie? Saturday?\" \n\n\"Sounds lovely. I think I can fit that in. Now, let's get this experiment working again.\" \n\nAnd she was back to business. We went through the procedure and discovered we had the Bunsen burner a little too close, and the next time we got the reaction to occur without the pyrotechnics. Laura's cool efficiency mirrored over to me, and it kept my mind off the ramifications of our earlier discussion. We put things away and notified the bored student on duty that we were done. \n\n\"Thanks for getting this lab done during a free period. It's much better without everyone else around.\" \n\n\"Especially when we nearly blew the lab up,\" I added. We both laughed. \n\nWalking out, Laura bumped my hips with hers. \"Looking forward to Saturday, Shawn.\" \n\n\"Me too.\" \n\nShe waved. \"See ya' around.\" \n\nMy mind went into overdrive as soon as she walked away. A lot had happened in the last hour. First request for a date. Check. First request accepted. Check. First boob in my hand. Well, maybe not a complete check. But Laura kept a nice pair tucked under her loose shirts. Very nice. She also kept a sassy, playful side hidden under her high-achiever exterior. The brainy, driven girl I had known for so long was changing in my mind. \n\nAnd what about me? What the hell was I doing when I answered her? I had known Laura as a lab and study partner for a while now. She and her friend Susan pulled their weight and kept me challenged. But I had never been attracted. Laura just seemed too smart to be any fun. Apparently, a hidden side of me thought it knew better, and it hijacked my mouth during our conversation. I was just happy that she took it well. \n\nSaturday found me walking up to Laura's house. Her mother let me in. \n\n\"It looks like our daughter's giving you the full treatment. She'll be down in a few minutes, so you have to talk to us for a while.\" \n\nI laughed. \"At least I've been here many times, studying with Laura and Susan. And enjoying your fine cooking.\" \n\nLaura's mother laughed. \"Buttering us up before your date?\" \n\n\"Well, you're not cleaning your gun collection for my benefit, but I thought I had better play the part of the respectful boy taking your daughter out.\" \n\nBoth her parents laughed. \"I can see why she likes you. Now, let's see what embarrassing stories from her childhood we can discuss.\" \n\n\"Alas, there's no time!\" Laura's voice came down the stairs. Her mother winked, then I turned to the sound of steps. \n\n\"Wow, Laura, you look great!\" Laura was decked out in a soft, fine shirt over a skirt of equally fine fabric. A set of tasteful sandals completed the big picture, and matching necklace and bracelets filled in the details. She had that effortless classy yet casual look that only a few people can pull off. Compared to her usual t-shirt and jeans, she really caught my eye. The hidden side of me said this is what you've been missing. \n\n\"Why thank you, Shawn. You look very nice yourself.\" \n\n\"In fact, you both look so nice that we'd like a picture, if that's okay.\" \n\n\"Going through all the family rituals, Mom?\" \n\n\"They wouldn't be rituals if we didn't, right?\" \n\nLaura sighed. \"Where would you like us?\" \n\n\"How about on the staircase, here? And Shawn, please put your arm around her waist and act relaxed. We want to show off Laura's dashing date to family. It'll ruin the effect if you're all nervous and stiff.\" \n\nLaura leaned in and whispered, \"Just grab me like you did in the lab.\" \n\n\"I'm not sure your mother wants me that relaxed,\" I whispered back. We both laughed, and I heard the click. \n\n\"Fantastic. Must be some inside joke. Keep going.\" \n\nThat broke the ice, and Laura's mother coached us through several shots. Laura felt really good next to me, and my smiles took no effort at all. \n\nI look back now and wonder if Laura's mother was subtly helping me out. After posing with my arm around Laura, the entire date was more relaxed. We kept up an animated conversation over dinner. \n\n\"I just want to say again that you look fantastic, Laura. That outfit really works for you.\" \n\n\"Thank you again, Shawn.\" Her eyes arched. \"And the implied question is why don't I dress like this more often?\" \n\nI started to protest, then laughed. \"Maybe.\" \n\nLaura winked. \"Long story. I don't have a lot of time to dress up for school, and I'm not fighting to get into the popular cliques. I've got a good set of friends who like me for who I am. Finally, I want to attract the right kind of attention. I figure I can play the high-achiever nerd in high school and then maybe branch out into hot sorority babe when I get to college.\" \n\nI laughed. \"It won't take much additional effort.\" \n\nLaura laughed. \"You say that now, high school boy. But wait till you get to college and see the competition.\" \n\nWe kept up the banter through dinner and held hands at the movie. Laura sparkled, and I saw a playful side of her that I didn't really know, or maybe I hadn't recognized in our study sessions. \n\nAs well as the date had gone, I didn't press my luck at her doorstep. I gave her a brief hug and said goodbye. \n\nThat date was the start of many others. We still studied together with Susan, but we became girlfriend and boyfriend. Laura maintained her nerd credentials, but she did change her look a bit. My friends noticed. \n\n\"You're having an effect on Laura,\" one of them mentioned. \"She catches attention with her shirts and tight jeans these days. She also seems more...alive.\" \n\n\"There's a lot more to her than I realized,\" I replied. \n\n\"No kidding. Good catch, bud.\" \n\nBut I kept my approach low key. I had asked for, and gotten permission, to kiss Laura, and I could tell we both enjoyed that, but I didn't go further. I still remembered her tease about \"feeling her up,\" but I figured that was in jest. I was raised to respect women, and I was pretty naive to boot. If Laura was sending any signals, I was missing them. \n\nLaura's parents had me over a lot, and mine did the same. In fact, they got to know each other and were becoming friends. Laura and I celebrated each other's 18th birthday in the early fall, and we grew closer. Between studying and dating, we saw each other a lot. I also got to know Susan better. I could tell she and Laura were close, and they slept over frequently. I went to sleep more than once wishing I were in Susan's place. \n\nIt took a pretty direct push to move me along in the physicality department. \n\n\"Which convent is Laura choosing next year?\" Susan had fallen into step beside me between classes. \n\n\"What?\" \n\n\"Well, you treat her like a nun, so I figured you knew.\" \n\n\"Very funny.\" \n\n\"Look, Shawn, I care for my friend, so you're going to get some free advice. Laura may be wicked smart, but she is also fully wired for fun. She trusts you. And she's more open-minded than you think. So be a little daring. I want to hear some steamy details.\" \n\n\"The real reason comes out.\" \n\nSusan laughed \"Of course. If I can't be as lucky as Laura, I at least want to hear about it, and...\" \n\n\"And what?\" \n\n\"Have a nice day, Shawn. But remember what I said.\" And she was off. \n\nEven for a naive boy like me, that was pretty direct. As close as they were, I didn't think Susan would say that unless she and Laura had discussed it. I resolved to take her advice, although carefully. I still didn't know women that well. \n\nThat weekend, Laura and I were curled up watching a movie. Her parents had thoughtfully excused themselves to go upstairs. In fact her mother had winked at me when they left. If I was ever going to go further with Laura, this was the time. \n\nI gently pulled her shoulders closer, and she snuggled up, sighing. My heart pounding, I nuzzled her cheek and gave it a kiss. \n\n\"Mmmmmm,\" Laura purred, turning into me. \"Are there any more of those?\" \n\nAnd that started a fantastic makeout session. Laura kissed me passionately, and we both heated up. I let my hands frame her face, brush her neck, and play with her hair. Her kisses turned more forceful, and I let her lips push my head back into the cushion. \n\nLaura pulled back and looked into my eyes. A complex interplay ensued, and I knew that we were communicating something deeply. Laura's hands went to my shoulders, then she was turning over me. Never breaking her gaze, she straddled me, then her eyes lost focus when she moved in again. \n\nLaura's body rocked over mine while she loved me with her lips. My hands traced over her twisting back, and I noticed her sighs each time they dipped lower. I finally reached her waist, and she pushed her lips harder into mine. It's now or never, I told myself. I grazed a hand over the back pocket of her jeans. \n\n\"Ummmmm,\" she hummed into my lips while her ass pushed into my hand. \n\nEmboldened, I slid both hands down and cupped her backside. Laura put both her forearms on my shoulders and slinked over me, her tongue dueling with mine. I could feel the heat radiate from her face. \n\nMy caresses grew firmer, and Laura settled into my hands. After a while, I was holding a good bit of her weight while her ass rippled in my fingers. I lost track of what my fingers were doing, and all of a sudden, I felt a tremendous heat through her jeans. \n\nLaura heaved. \"Oh, God!\" \n\nI jerked my fingers back. \"Sorry!\" I whispered. \n\nLaura pulled back and held me with her eyes. Her face was a mix of emotions, but a tease of a smile flitted across her lips and crinkled the corners of her eyes. Her ass continued to grind into my hands. After a suitable spell, she leaned in again, and her lips were back on mine. \n\nWe continued our dance until our lips wore out. Laura pulled back, sucking my lip in reluctance, until she could look at me. Her eyes held mine again, and it felt like she was trying to tell me something. As a clueless 18-year old, I only dimly understood, but I could tell she was happy. Very happy. \n\nOf course, I relived that experience as soon as I got into bed, with my hand stroking my aching cock. Laura looking into my eyes, her lips caressing mine, her body twisting in my hands. And then there was that intense heat between her legs. As a naive boy, I had no idea women got that hot. If Laura was feeling a tenth of that heat, she was boiling inside. Susan's advice about Laura being wired for fun came back to me. I came incredibly hard just imagining it was true. \n\nTwo days later, Susan fell into step with me again. \n\n\"Sounds like you took my advice to heart. Steamy doesn't begin to describe what I heard. You about stopped poor Laura's heart with your wandering fingers.\" \n\n\"I don't know what you're talking about.\" \n\n\"I think you do, or your face wouldn't be burning.\" \n\nI said nothing. \n\nSusan's voice got friendly. \"She loved it, Shawn. Loved. It. I got hot and bothered just listening to her story. Whatever you don't know about, keep it going.\" \n\n\"Thanks.\" \n\nSusan winked. \"See you around.\" \n\nLaura had also given me a long, tight, happy hug the next time we saw each other, so even a clueless boy like me figured it wasn't my imagination that we both really enjoyed our last evening together. \n\nThe next Saturday set up almost exactly the same. Dinner at Laura's, then her parents excusing themselves from the den. This time, Laura wore a soft, slinky top that hugged her curves, with an equally soft skirt completing the picture. \n\nLaura turned into me as soon as her parents left. Her lips found mine, and we kissed passionately. I was learning what she liked, and no doubt she had done the same for me. Both of us heated up. One hand caressed her back, and the other framed her face. She adopted the same for me, but then she slid a hand down to massage my neck. That felt really good, so I did the same for her. \n\nThat elicited a long, throaty moan. I explored the soft skin while Laura tilted her head to give me better access. I found a few spots that made her squirm, and I filed that away. Then I felt her hand move to my upper chest. I slid a little lower. This time she purred each time I ventured further down, encouraging me to match what her hand was doing. I explored the collarbone and played with the fabric of her shirt. \n\nLaura pulled back, leaving her hands in place, and turned her eyes up. Her flushed gaze searched my face. Finding what she wanted, she locked eyes with mine. There was an intensity there that made an impression on me. \n\nLaura closed the distance between us, and we were back to kissing. But this time, her hand moved further down, tracing the contours of my chest. I'm sure she could feel my thumping heart. Was she really telling me to...? \n\nThe intensity of her eyes lingered in my brain, so I made a tentative move downward. Laura started purring again. I explored further, heeding her positive reactions. Finally, my fingers brushed the upper swell of her breast. \n\n\"Ohhhhhhh.\" Laura's sigh was full of desire, and even a clueless boy like me could pick up on that. I traced my hand to the side, following the contour. More purring. Laura's hand cupped around my pec, and finally I took the step. My fingers curved together, and I cupped the underside of her breast. \n\n\"Yessssss,\" Laura whispered into my mouth. I caressed all around the underside while she writhed under me. My heart pounding, I finally moved up and closed my fingers over her full breast. \n\nLaura moved her other hand behind my head and crushed my lips to hers. She wanted this. My head was spinning. Her breast felt fantastic in my hand: full, firm, and warm. It fit my fingers perfectly and felt so right. And it was clearly wired in to Laura's pleasure centers. Her body burned in my hands, and with her lesson over, she used her hands all over my chest and face, sending some of that pleasure back to me. \n\nAs my fingers explored, I brushed the excited bump of her nipple pushing through her bra and shirt. Laura moaned, so I brushed some more. Her body language was hot and insistent, so I closed my fingers and gently massaged. \n\n\"Oh, God!\" Laura's nipple swelled and stiffened in my fingers. My face prickled with the heat coming off her body. My body was on overload. I was giving her pleasure. Sexual pleasure. And she was loving it. \n\nHer lips pushed into mine, and her hands coaxed my head back into the cushion. Slowly, not breaking the spell, she twisted into me, and swung a leg over mine. I kept my hand on her breast, and her purring told me to leave it there. Her hands on my shoulders, she worked her knees onto the couch and straddled me just like the week before. \n\nI thought about where to put my other hand. Laura would surely like me playing with her other breast, but I thought to the week before. She sure enjoyed my hands on her twisting ass. I went with that, and slid a hand down to caress through her skirt. \n\n\"Yessssss,\" she whispered. She twisted into me for a long while, her body building heat upon heat. Finally, she gently pulled back and captured my gaze in hers. Her eyes expressed an incredible hunger-even I could see that. She closed back in and resumes making love with her lips. \n\nBut this time, her ass rippled under my hand, causing it to slip a little lower. She sighed and soon rippled again. I took the hint, letting my hand slip inward. More sighs. My heart hammered when I felt the first heat flow into my fingers. Was she really going to let me touch her there? \n\nHer lips, her body, and her vibes said yes. Her nipple hardened further into my one hand, and I let the other slip inward according to her dance above me. More and more heat flowed into my fingers. Laura was on fire, and my mind reeled with the knowledge that women could get this hot. \n\nFinally, my fingers centered between her legs, and she jolted into me, her hot sex pulsing through the material of her skirt. Responding to an ancient rhythm, my fingers began to caress her core, and she shuddered with desire. \n\nI simply responded to her signals, learning the secrets of her pleasure. I didn't have to think; I just had to feel. And there was such intensity radiating from Laura that it was easy even for a boy like me to feel what she wanted. \n\nHer mouth unsealed slightly from mine so she could get enough oxygen. Her hums and sighs increased in pitch. It dawned on my fevered brain that Laura was going to cum-hard. Her body wound up in tension. Then she was rigid, my working fingers the only movement. Up and up she climbed until she stopped breathing. \n\nHer body convulsed, and a huge spasm throbbed into my hand. Laura bit back the scream, but I felt the tremble in my lips. Another convulsion. Even her breast throbbed. And another convulsion. And yet one more. Then Laura slumped into me as her body released the tension, smaller shocks still wracking her body. Somehow, I knew it was time to relax my fingers, but to leave them in place. That's what I always needed after an orgasm, and I sensed that she needed the same. \n\nLaura rested her forehead on mine and regained her breath. It was so intimate to embrace her in the afterglow, her body gently held in my hands. When her breathing slowed, she pulled back and looked into my eyes. I'm sure she saw the wonder and reverence that I was feeling. She had shared something that reframed everything I knew. When I peered into her eyes, I saw her question answered, and a growing trust and happiness shine out. I sensed the time was right, and I gently released her breast and slid both hands around to her back. Her eyes crinkled into a smile, and she leaned in again to kiss me in appreciation. \n\nAfter a minute of that, Laura twisted over me, returning to my side but leaning heavily into me. I put my arm around her and pulled her close, cuddling this extraordinary woman against me. We didn't say anything; we just existed together. After a while, I kissed her hair. \n\n\"Probably time to get going. I've been here a while.\" \n\n\"As much as I hate to agree, you're right.\" \n\nLaura followed me out the door. \n\n\"Thanks for a fantastic evening, Shawn,\" she whispered after a long kiss. \n\n\"It was my pleasure.\" \n\nLaura pulled back and winked, her eyes dancing. \"Maybe more my pleasure.\" Then her eyes went wide in shock, and she blushed. \n\nI pulled her close for a long hug, so she could collect herself. Then I kissed her gently on the lips. \n\n\"Goodnight, Laura. You are the best.\" \n\n\"Goodnight, Shawn. And thanks. For everything.\" \n\nI drove home, a warm glow coursing through me. I had held a girl while she shuddered in a crashing orgasm. My receptors still tingled from her waves-it was like I could still feel it. And Laura. What a woman. She possessed passion in equal measure to her intellect. And she was sharing it with me. ",
        "I got home, said hello to my parents, and got ready for bed, still in a daze. My cock leapt to life when I took it in my hand, but it wasn't Laura's chest or butt that I thought about. I built and came in a hot wave thinking about her trembling body in my hands, her shudders as she came, and her passion racing into me. I came through her gift of sharing herself. That was more intense than anything else. \n\nI fell into a deep sleep, Laura's spirit infusing my dreams. I woke up late but deeply refreshed, a bit of last night's glow still in me. \n\nI called Laura later that morning, heeding some instinct in me. \n\n\"Thanks again for a magical evening,\" she said. \"I slept fantastic.\" \n\n\"It was magical for me too, Laura. After suitable, ah, preparations, I slept fantastic myself.\" \n\n\"Someday I'll get you to tell me about those preparations,\" Laura said, laughing. \n\n\"They're just the thing for restful sleep.\" \n\n\"Especially after a night with your horny girlfriend?\" \n\n\"Especially after that, yes.\" \n\n\"Have a great day, Shawn. Susan's coming over. We have a lot to talk about.\" \n\n\"Girl talk?\" \n\n\"Oh, yes. You don't mind, do you?\" \n\n\"I'm fine. I trust Susan, and she's given me some great advice.\" I laughed. \"And I suspect that she would drag it out of you anyway.\" \n\nLaura chuckled. \"Susan? She's relentless. Better to surrender immediately. But you should get on your knees and thank her the next time you see her. She's gotten both of us to lower some of our inhibitions.\" \n\n\"One BIG thank you coming up.\" \n\n\"From both of us. Goodbye, Shawn.\" \n\nSusan texted me that evening. Going running Sunday morning before it gets hot. Want a partner. \n\nWe ran together talking about school and a bunch of other things. Susan slowed on the way back. \n\n\"Let's cool down for a while.\" \n\nWe got our breath back, then Susan pounced. \n\n\"I almost came listening to Laura's story yesterday. You rocked her world. She was still glowing when we talked.\" \n\nMy face got hot, but Susan already knew everything. I just went with it. \n\n\"I see what you mean about her being wired for fun. She was so responsive that even a clueless boy like me could get her off.\" \n\nSusan levelled her gaze at me. \"From what I heard, you're not as clueless as you say. Tell me about this responsive part of Laura.\" \n\n\"I could sense what she wanted, and I could feel her reactions. When she came, it felt like I came. In fact, it was more intense than when I cum. I felt tuned into her, and just resonated at her frequency.\" \n\n\"Shawn. Any guy that can do that to a girl is going to rock her world. Women want to tune in with their partner-that's what they look for and so seldom find. You're something special to Laura for that. The mechanics can be learned; the connection not so much.\" \n\nShe continued. \"Here's an example. You spend a long time building her up to boiling, keeping her comfortable and wanting more, and then you take her over the edge. When it's over, and she wonders about how deeply she shared herself, you hold her close and she can feel that you treasured what she shared. Then you cuddle with her for a long time, helping her collect herself, before hugging her and going home. You call the next day. Shawn, Laura is glowing because she felt cherished. It was her first sexual experience with a boy, and it was glorious. She doesn't feel cheap or used. She didn't feel pressured to do anything. She knows how lucky she is to have you. So it's not surprising that she can't wait to play with you again.\" \n\n\"I guess I didn't think about that way.\" \n\n\"That's the great part. You're wired that way. That was what we talked about the most. Us girls want a connection, and you have it. So you can be clueless and still be wildly successful.\" \n\n\"Thanks for telling me, Susan.\" \n\n\"What are friends for? By the way, Laura told me you were okay with us talking. We would do it anyway, but I feel better about it. And I trust you, so to be fair, I'll let Laura fill you in a bit on what we talk about. For instance, I made Laura tell me the story again, slowly and in great detail about what she felt. My hands kind of wandered where they shouldn't, and I came hard on the second telling. Laura did the same. So your evening was good for all of us, Shawn.\" \n\n\"I'm not sure I'll be able to walk home.\" \n\nSusan looked down and laughed. \"I'll switch subjects to let you calm down.\" \n\nSusan mercifully did, and she took us through a stretching routine that helped us both relax. \n\nAs we were saying goodbye, however, she looked over. \"One more piece of advice. If you ever get the feeling that Laura wants more skin-on-skin contact, it's not your imagination.\" She waved. \"See you at school, Shawn.\" \n\nSusan left me, my mind in a daze. She covered a lot of ground in a few minutes. First, she helped me understand a little more about women, and what I should do to keep Laura happy. Next, she dropped the bombshell that she and Laura masturbated together retelling the story. That was almost too hot to think about. Finally, she hinted that Laura was open to more intimacy in the future. Did this get any better? \n\nMy post-run shower involved a little extracurricular activity, with the thought of Laura and Susan masturbating pushing me to a twitching orgasm. When I went over to study with Laura that afternoon, she gave me a long, tight hug. We studied for a while, then it was time for me to go. Laura followed me out to her porch. \n\n\"Would you be interested in a picnic next Saturday?\" she asked. \n\n\"Sure. Sounds like fun.\" \n\n\"I know of a great, secluded spot that's an easy hike from the road. Be sure to clear your calendar for the afternoon. It may take a while.\" \n\n\"Believe me, I've got nothing but time.\" \n\n\"Good answer, Shawn.\" And she gave me a smoldering kiss. \n\nDuring the week, Laura gave me instructions on what to bring. Being a nerd, I also did a little internet research to learn what women like, just in case that knowledge would come in handy. Susan's words had definitely stuck in my brain. \n\nSaturday came, and Laura picked me up. She looked good in an outfit that would work on a tennis court. \n\n\"Susan and I found this spot while on a hike one day. We've picnicked there before, but I always thought it would be a great place for a date. With late fall upon us, I wanted to get out before it got cold. The forecast called for a warm, dry weekend.\" \n\nLaura chatted happily during the drive to the nearby state park. She had the food stashed in a day pack, and she asked me to pack a blanket and drinks. From the parking lot, Laura took a trail, then branched off. \n\n\"Susan and I did some satellite map research of spots at this park, then came out and evaluated them in person. We like to hike, and we like having some spots to go and have a girl chat where we won't be disturbed. This spot is one of our favorites.\" \n\nWe hiked upward for twenty minutes or so and arrived at a clearing in the trees with views of the surrounding valley. Large boulders provided privacy and shade, but allowed us to look outward. \n\n\"I thought we'd start with lunch while we enjoy the view. After that we could relax for a while, if that sounds good to you.\" \n\n\"Sounds perfect. I'll get this blanket spread.\" \n\nWe enjoyed lunch, catching up on things, and pointing out landmarks in the valley. We packed up the leftovers, and Laura took my hand. \n\n\"Let's relax for a bit. Why don't we move the blanket where we can lean against that boulder?\" We got it moved, then she motioned me down. \n\n\"Let's get these shoes off and really relax.\" \n\nWe both did, then she looked over at me. \n\n\"OK if I snuggle back against you?\" \n\n\"Oh, yeah.\" \n\nLaura laughed and moved between my legs, leaning back into my chest. She turned her head back, and I captured her lips with mine. \n\n\"Ohhhhh,\" she breathed into me. I caressed her arms and sides, getting hums of approval. When we heated up, I moved to her abdomen. A throaty moan encouraged me on. After a bit, I moved upwards. More encouragement. I finally cupped her breasts. \n\n\"God, yes!\" \n\nI gently played with her chest, and her body purred in response. My cock hardened-I'm sure she felt it, However, I didn't worry about it, considering where my hands were. Remembering Susan's words, I worked up my nerve. \n\n\"Laura, if there's any clothing in the way, let me know.\" \n\n\"There's definitely clothing in the way.\" \n\nMy heart leapt, and my hands crept down to the hem of her shirt. She leaned forward and raised her arms, and I pulled the shirt over her head. She leaned back, and I cupped her breasts through the sheer material of her bra. Her excited nipples pressed into my palm. After a few more kisses, she pulled back. \n\n\"Might as well finish what you started.\" \n\n\"I'd love to Laura. You'll have to help me in the bra department.\" \n\nShe chuckled. \"Hooks are in the front. Take your time.\" \n\nI leaned over and looked down her front. With trembling hands, I reached for the material and unhooked the clasp. Then, reverently, I covered her breasts with my hands while I resumed kissing her. The material loosened under my fingers, and finally I pulled it away. Laura broke our kiss to lean forward, and I held the bra while she worked her arms through the straps. She leaned back again, seeking my lips. I captured hers, and then gently encased her bare breasts in my hands. \n\nWe both groaned. Her breasts felt so good-so soft, yet firm and rounded. My fingers traced the undersides, then the sides, learning what she liked by her reactions. It was hard, because all the reactions were good. I moved up and traced the outside of her aureola, marvelling at the slightly rougher skin and small bumps under my fingertips. Finally, I brushed along her nipples, getting a shuddering moan into my mouth. Each nipple strained outward as I explored its length, then I then gently captured both in my fingers. \n\n\"Yesssss.\" Laura's body started slowly writhing. I put my research to use, and tried carefully rolling her nipples in my fingers. Laura gasped and moaned, urging me on. When I applied more pressure, she humped her hips forward and let her breath out in a long shudder. Lesson learned. I kept up some variety, cupping her breasts again in my hands, rasping the nipples in my palms, pressing inward on her nipples, and stretching them in my fingers. Each action drew a slightly different response, but they all served to heat her up. My cock was getting plenty of stimulation against her twisting back and hips. \n\n\"There's still clothing in the way,\" Laura whispered into my mouth. Did I hear her right? That would mean... \n\nMy cock strained as the implications came to me. I had gotten her off before with my hand between her legs. This time, she didn't want so much fabric in the way. \n\nI slid my hands down and found the waistband of her skirt. On one side, I found a hook, and I unclasped that to reveal the zipper. I slowly worked it down, and then Laura lifted her hips so I could slide it under her. She gracefully pulled her legs close so I could pull it over her feet, then it was on the blanket with her shirt and bra. \n\n\"Might as well finish what you started,\" she repeated. \n\n\"With pleasure,\" I answered while my pulse soared. Laura was going to be naked in my hands. \n\nI moved my hands back to her hips and took the hem of her panties into my hands. She lifted again, and I slid them over the flare of her hips. With her legs pulled in, they went up to her knees, then down over her feet. When the material dropped in my hand, I felt the soaked center. At the same time, a wave of musk washed over my nose. Horny girl musk. My primitive brain lit up, and I drew a deep breath, the scent jangling my senses. I dropped the panties with her other clothes and returned my hands to her breasts while we passionately kissed again. \n\nAfter a little more time with her chest, I moved a hand downward along her abdomen. \n\n\"Um-hum,\" she encouraged. \n\nI played with her upper legs while she purred into my mouth. Then I moved to her lower abdomen, feeling the smooth skin heat up as I went downward. Finally, I caressed to one side of her pussy, feeling the outer lip radiating heat into my finger. Laura purred again. I remembered my research and just lightly traced along, feeling out her reactions\u2014not going too fast. I moved to the other side feeling more pulsing heat. The breast in my other hand tightened and got a slightly pebbly texture-I guessed this was a signal of deep arousal. \n\nSensing her readiness, I just lightly grazed her center, feeling the slick, hot, inner lips under my finger. \n\n\"Oh, God!\" Laura broke this kiss and leaned her head back against my shoulder, drawing in heavy breaths through her mouth. While my finger lightly played across her lower pussy, I took the opportunity to look down and see what my hands had been feeling for so long. \n\nHer breasts sat high and proud on her chest. A hot blush ran across the entire area. I drank in the slightly upturned nipple straining outward on one breast, My fingers enclosed the other, and it looked so perfect-the breast filling my hand. Looking further down, my eyes traced smooth skin to the puffy outer lips of her pussy, my shining finger sliding between them. My brain zinged with overload-sight, touch, sound, and smell were all pegged with versions of hot woman in ecstasy. \n\nEven for a naive boy like me, I could tell that Laura was ready for more. I moved my fingers higher, and I felt the knob of her clitoris nestled between the junction of her inner lips. Laura convulsed in my hands, riding the wave I created for her. \n\nI pleasured her indirectly, keeping her clit between her lips, until her hips were bucking into my hand. Then, I trapped it directly between two fingers. Laura grunted and thrust her chest out. I increased the pressure on her nipple, and she let out a long, guttural moan. My other hand played with her slippery clit, and her breath became shallow and higher pitched. I just kept up the stimulation, not yet confident enough to use any more pressure. \n\nBut that was enough. Laura was clearly on the road to climax, and I just kept things going while she went through the roof. Her body built heat upon heat, and tension up tension, until her chest was rigid with effort. Finally, she bowed outward, and then exploded in my hands, crying out in utter submission to the orgasm ripping through her soul. Her pussy throbbed in my hand, and I even felt her nipple spasm in response. \n\nAfter a long set of contractions, Laura slumped into my chest. I kept my hands where they were, guessing that Laura might like soothing her body just like I did after a climax. When the aftershocks died down, I kissed her cheek, and she turned her lips into mine. We kissed for a long time, and I let my wonder and gratitude flow out into her. \n\nLaura eventually broke the kiss and settled back again, looking up at the sky. \n\n\"Shawn, that was beyond fantastic. Your hands are magical.\" \n\n\"You are magical, Laura. You're beautiful and so alive.\" \n\nShe suddenly pulled my head close and kissed me, hard. Her passion made my cock strain even more. Then she pulled back. \n\n\"Is it okay if I play with your body a bit?\" she whispered in my ear. \n\n\"More than okay,\" I croaked back, my heart hammering. \n\n\"Good answer.\" Laura sat up and turned, straddling my legs. I was treated to a full frontal view, and my eyes couldn't help but take a quick tour. Laura stopped moving closer and leaned back. \n\n\"Enjoying the view?\" \n\n\"Hell yes, Laura. You are spectacular.\" \n\nShe smiled and pulled her hands up into her hair, thrusting her chest out. \"Ever thought you'd have a naked girl straddling your lap?\" \n\nI took the invitation and let my eyes roam over Laura's chest and then down between her legs. \n\n\"Not someone this sexy, no.\" \n\n\"So you think the Super Brain is sexy?\" \n\n\"No. I know she's sexy. And not just in looks.\" \n\n\"Oh?\" \n\n\"In everything about her.\" \n\n\"Is that so?\" Laura voice was teasing, but her eyes were very happy. Then they went to teasing as well. \"You don't know everything, yet.\" \n\nYet. Laura was smart. She knew that I knew that her teasing words hinted of more. I'm sure she saw the widening of my eyes. \n\n\"I have faith that it will all be sexy.\" \n\nLaura laughed, then she closed in for a smoldering kiss. Her hands explored my chest, then they moved to the upper buttons of my shirt. Laura deftly undid several, and her hands moved inside, stroking and sending fire across my chest. I let my hands play with her long, brunette hair, content to let her take the lead in this. \n\nLaura moved to the other buttons, and I leaned forward so she could remove the shirt and drop it to the side. She hummed happily and kissed down my neck. Soon her lips were inflaming my chest. I moaned in pleasure, stunned by my body's reactions. Warm prickles radiated through my limbs. Who knew that my chest was so sensitive? \n\n\"Um-hum,\" Laura breathed into my chest, clearly pleased at my reactions. In a flash of insight, it hit me. Laura always did her research and preparation. She had planned this picnic, and I'm sure she studied up on whatever she planned to do with me. Of course, real life is always more complex, so she was eager to learn what worked for me. And that turned me on even more. I settled back, sinking into the glow she created. \n\nLaura noticed. Her kisses and nibbles grew more confident. I got my mind out of the way and let my body react directly to her. I felt her body heat up in response. \n\nSomehow, her lips had reached my abdomen. In the haze of pleasure I was feeling, I didn't know how long it had been. But when her hands reached the hem of my shorts, a bolt of lightning shot through me. \n\n\"Oh, God,\" I heard myself shudder. \n\nLaura's hands unbuckled my belt, unbuttoned my shorts, and then slowly unzipped me. My cock felt each millimeter, and I groaned at the release of pressure. When her hands went to my hips, I lifted up, and the shorts slid down and off. Laura's hands were back at my hips, playing with the waistband of my boxers, and I lifted up again. She took the hint, and eased them over my rampant erection. We both gasped: me at the release of confinement, Laura at seeing her first erect cock. \n\nShe got the boxers over my feet, then her hands worked up my legs. My cock twitched in anticipation. With her first soft brush, I shuddered. I saw the realization dawn over her-small touches to my cock drove large responses to my body. She intently studied me, touching and learning reactions. A drop of pre-cum appeared, and she gently swirled it over my glans. I moaned as the fire shot out into my hips. It felt so much better to have Laura touch me. \n\nSatisfied with her initial exploration, Laura slid in beside me and fastened her lips to mine. Her hand wrapped around my cock and gently pumped. I groaned into her mouth. Everything built my excitement. I had a naked girl beside me, clearly happy to be there. I cared for her, and she cared for me. She was turned on to be giving me pleasure. And her hand and lips were doing a great job of that. I just sank into the experience and gave myself over to her. \n\nLaura picked up on that, and her tongue plunged deep into my mouth. Her fingers extended and slid along my length. Heat pooled in my balls-the beginning of the volcano. She continued to stroke my cock, and the volcano built heat and pressure. I even felt a string of fire zing from my lips to my cock, and my mind reeled to learn what Laura could do to me. \n\nThe pressure built further. Not knowing exactly what Laura would do drove me so much further into ecstasy. Finally, the heat blossomed and radiated all through my body. I went rigid, lost in that timeless place before climax. Then I convulsed as a white hot pulse shot through my cock. More pulses throbbed through me, and I cried out in pleasure. I continued to twitch and shudder as the pulses died down, and I slumped back in relief when the last one spasmed through me. ",
        "Laura kept her hand possessively around my cock, soothing me through the aftershocks. I felt her lips kiss my shoulder, and I realized that she had pulled away to watch the fireworks. Which must have been spectacular, because I could feel splashes of cum all over my chest and abdomen. \n\n\"That was... incredible,\" I offered, at a loss to say anything more descriptive. \n\nLaura giggled, then brushed my shoulder with her lips again. \"It was incredible for me, too, Shawn. I'm kind of embarrassed to admit it, but that really turned me on.\" \n\n\"Really?\" A few things were rearranging in my clueless boy brain. Girls really liked sex just like I did. Laura really was \"wired for fun\" like Susan had stated. I was a really lucky guy. \n\nI looked into Laura's amused eyes. It was like she could sense the pieces falling into place in my head. \n\n\"I could help you relieve the tension.\" \n\n\"Oh, you could, could you? Maybe I'll let you. But first let's get you cleaned up a bit.\" Laura pulled a towelette out of her basket and carefully wiped away the mess on my chest. \n\nI got up with her and faced her on my knees. She packed the towelette away and came in close, her firm breasts slightly swaying with her movements. I took her in my arms and kissed her. It was so intimate to hold her naked body in mine. Her nipples brushed my chest as she swayed in my arms. \n\nWhen the time was right, my lips trailed down to her neck. She dropped her head back and moaned, relishing the sensation. I explored and felt out her reactions, finding some sensitive spots. Soon, her body gyrated in my hands, and my lips captured the purring in her throat. \n\nI moved lower, brushing along her upper chest, but sensing that she was ready for more. I kissed down one breast until I brushed the nipple. \n\n\"Yessssss,\" came from above me. \n\nI lavished attention on the little bud, swirling around it and along its length. Laura's hands cradled my head while the purring grew. \n\nI briefly decided my next move. Should I kiss lower and guide her to her back, eventually pleasuring her pussy? I wasn't sure she was ready for that, so I decided to keep my lips on her breasts and use my hands. I moved one down her side, getting a moan of approval. But I went a little more bold as well. I slid my other hand down her back, along the cheeks of her ass, and inside her legs, where my probing fingers found her hot, wet, flesh. \n\n\"Oh, God!\" hissed out above me, and she crushed my head into her chest. I slowly slid my finger inside her boiling depths to the sound of a long, drawn-out moan above. I captured her nipple in my lips and suckled the stiff bud. \n\nLaura went wild, bucking her hips so that my finger slid further inside. I took the hint and started gently pumping it in and out. I got my other hand involved, framing her upper lips with my fingers. She responded to that by humping forward, so I gently drew them together and moved in time to my finger plunging below. \n\nLaura's tension built, and I sensed the time was right to play with her clit. I moved my fingers upward, and she groaned in need. I gently squeezed the little pearl between my fingers and started a direct massage. Laura humped into me and held on for dear life, her body surrendered to my hands. I sucked, and pumped, and rubbed until she went rigid, then exploded with a hoarse cry. Once again, I felt the pulses throb through her pussy and breast, and I held her tight while she twitched in my arms. \n\nWhen the contractions died down, I backed off the pressure, but I kept my hands and lips where they were, gently soothing inside and out while Laura whimpered her way back to earth. Finally, her hands tugged my head up, and she kissed me passionately. I gently withdrew from her pussy while her tongue dueled with mine. \n\nLaura told me a lot of things with her lips. I was still learning her language, but there was a sense of affection, joy, trust, and gratitude in her lips. She pulled back, and looked down. \n\n\"I thought I felt something poking me in the stomach,\" she teased. Suddenly, I realized that I was iron hard. My mind had been focused on Laura, but my body was tingling with heat in response to her buildup and orgasm. \n\nLaura looked into my eyes, probing. She made some kind of decision, and she gently nudged me back. I reclined until I was on my back, then she leaned over my face and fastened her lips to mine, running her fingers over my chest. \n\nHer lips moved down to my neck, then my chest, then went lower, and lower, and lower. Oh, my God. Was she going to? \n\nI got my answer when her lips kissed the head of my cock. Then she took the head inside. I groaned. Her warm, wet mouth felt so damn good. She bobbed down, then took my lower shaft in her hand and gently pumped while she kissed, licked, and sucked the head and upper shaft. \n\n\"Laura, you feel fantastic,\" I gasped out. \n\nShe hummed her reply. \n\nMy body writhed under Laura, while my mind reeled with both intense pleasure and the knowledge that Laura was giving me an incredible gift. My high-achiever girlfriend must have done her homework, because she was pressing all the right buttons. At the same time, I was still hyped up from holding Laura's naked body in my arms while she quivered through two shuddering orgasms. \n\nWhen her other hand moved into place and fondled my balls, I jolted and involuntarily cried out, \"Oh, Fuck!\" Laura chuckled around my cock, pleased to have me where she wanted me. \n\nThe eroticism of the situation built another pressure chamber in my groin. I couldn't believe I could cum again so quickly, but the facts spoke otherwise. The pressure built, and suddenly I knew it was only a matter of time. \n\n\"Laura, I'm close!\" I wanted to warn her while speech still functioned. \n\nShe plunged down in response. That accelerated the pressure, and my back tightened, starting to lift off the blanket. Icy heat prickled out from my cock, flowing down my arms and legs. The pressure built further, fueled by Laura's wet fingers pumping, and her warm mouth doing magic. \n\nMy last thought was that I was the luckiest guy in the world. \n\nThen I rushed headlong over the edge and convulsed to a white hot wave blasting out of my cock. Intense spasms wracked my body, and I simply existed while the world tumbled around me. I don't know how long it lasted, because I didn't know anything. \n\nCoherent thought returned, and I realized that Laura was still locked around my shaft while I twitched through the last throes of my orgasm. She gently released the pressure, but stayed in place, letting me adjust to reality again. When I gave a long sigh of satisfaction, she slowly pulled back, kissing the head before settling her head in my lap. \n\nA need to hold Laura swept through me, and I reached down to guide her body beside mine. I turned to face her, and looked deep into her eyes. I opened mine and let her see what I felt: affection, gratitude, and some things I really didn't understand. Then I pulled her close and kissed her deeply, tasting the salty tang in her mouth. She responded and kissed back enthusiastically. We expressed our mutual gratitude for a long time, then finally pulled back. I looked in Laura's eyes and saw reflected our mutual comfort with what we had shared. \n\nA smile came to my lips, and that prompted a radiant smile to animate Laura's face. I pulled her close and tucked her head beside mine while I caressed her back. I knew she had shared deeply, and second thoughts can creep in after acts of passion cool down. I wanted her to know in every way possible that I cherished what we shared and what she gave of herself. We held each other for a long time. Finally, we each rolled back, looking at the sky together while holding hands. \n\n\"It's only half through, but this is absolutely the best day of my life.\" \n\nLaura laughed deeply. \"Did I have anything to do with that?\" \n\n\"You had everything to do with that.\" I squeezed her hand in emphasis. \n\nShe turned and snuggled close. Her breath caressed my ear. She squeezed my hand and whispered: \"Best day of my life too, Shawn.\" \n\nA warm glow spread out from my chest at her words. I'm sure she felt it. I wanted her to feel it. \n\nWe let that linger for a while, then we could both feel the world returning. \n\n\"I think we're approaching that time where they send the search party out,\" Laura offered. \n\n\"And we don't want them to find us like this.\" \n\nLaura laughed. We both sat up. \n\n\"Can I give you one last hug and kiss?\" \n\n\"I'm never tired of those,\" she replied. \n\nOn an impulse, I stood up and reached out to pull her up. I stood back and looked up her body. Pretty feet and firm legs led up to the junction at her thighs, pussy lips still flushed from the pleasure they had received. Her hips flared out, then tapered at her waist. Women were so sexy that way. Moving up, a taut tummy led to the swell of her breasts, each capped by a perky nipple. Her body glowed with health, everything firm and tight. Finally, I looked up her graceful neck to her pretty face framed in cascading hair and scrunched up into a sardonic grin. \n\n\"Naughty boy, you just wanted a free look!\" \n\n\"Busted.\" I laughed. \"But Laura. You. Are. Beautiful.\" \n\n\"Silly boy, that's what you say to get a girl out of her clothes.\" Her eyes, however, told a different tale. \n\nI laughed. \"I'll just have to keep practicing to get it right.\" \n\nIt was Laura's turn to laugh. \"You do that.\" \n\nI reached out and pulled her close, feeling her breasts push into my chest. We kissed and hugged tight. \n\n\"I can't think of any more delaying tactics, Laura. I guess we have to get dressed.\" \n\nLaura snickered and reached down to my boxers. She tossed them to me. \"Get these on before I get any more ideas.\" And it hit me again. She was enjoying this just as much as I was. \n\nWe got dressed and packed up. We both took a last look around. \n\n\"This is even more of a special spot,\" Laura observed. \n\n\"It's one of my favorite places in the world.\" \n\nLaura laughed and reached around to swat me in the butt. \"Boys,\" she muttered. \n\nI laughed and reached out for her hand. We threaded our way back down and rejoined the trail. Right before we reached the parking lot, I pulled her close. \n\n\"I don't know if I can do this properly when we reach the house. Thank you for a fantastic picnic.\" I pulled her head close for a heartfelt kiss, stroking the back of her neck in tandem. \n\nShe pulled back. \"You are so welcome.\" Her eyes sparkled. \"I especially enjoyed dessert.\" \n\nI walked on a cloud all weekend. I could see a sparkle in my Mom's eyes. I knew that she could sense a lot about me, so I didn't worry about it. She knew what she knew. \n\nSunday, I joined Laura at Susan's house to study. Laura's parents and mine had gone out to play tennis and enjoy a late lunch back at her house. Of course, Susan pounced at the first opportunity. \n\n\"Laura tells me that our secret spot is now one of your favorite places.\" \n\n\"Yes, it is. Beautiful location; private; and some great memories.\" \n\nSusan laughed. \"I heard that you really emphasized its...beauty.\" \n\nI looked up into Laura's gleaming eyes. \"I couldn't agree more.\" \n\nThey both cracked up. \"Okay,\" Laura said. \"Let's get some work done.\" \n\nLater that evening, my Mom found me. \n\n\"I was thinking of a walk before dinner. Join me?\" \n\n\"Sure.\" \n\nWe stepped out and chatted for a while. We took a path through a nearby park. \n\n\"Have a pleasant picnic with Laura yesterday?\" \n\n\"Very much so.\" \n\nMom chuckled. \"You and Laura getting close?\" \n\n\"Yes we are.\" There was no point in finessing the answer with my Mom. \n\n\"We thought so. And Shawn, it's okay. Your father and I have discussed this with Laura's parents. We like you both, and we remember what it was like to be young and in your first love. So what I'm about to tell you-know that it comes from the heart.\" \n\n\"As you know, we've become good friends with your girlfriend's parents. Good enough to discuss some fairly personal subjects. We suspected pretty strongly that it was only a matter of time before you two became intimate. We didn't want that to happen in some sort of rushed and furtive way. Physical love should be relaxed and joyful, not rushed and shameful. Also, rushing tends to lead to bad decisions, and none of us wanted that.\" \n\n\"We wondered what to do, and then your Dad remembered reading about some custom in Scandinavia where a young lady's parents invite her boyfriend to spend the night. It gives them the time and the permission to love each other, but it also keeps things safe, because her parents are right there. It also encourages the physical and emotional bonds to grow together, because they sleep together afterwards, rather than just separating after a physical act. We talked about it for a while, and we all came to the conclusion that it was a good idea if you two wanted it. So Laura's mother is having this same conversation tonight, and if you both agree, you will be spending the night with her next Friday.\" \n\nI looked at her, my growing amazement at her words leaving me stunned. \"Do you really mean...?\" \n\nShe looked at me and smiled. \"Yes, Shawn, if you both want it.\" \n\n\"I thought yesterday was the best day of my life!\" \n\nMom laughed. \"Must have been a fantastic picnic! And, Shawn, the story may get better. Assuming things go well and you keep up your studying, we'll let you stay over at each other's house a couple of times a week. We know what it's like to be young and full of hormones, and we want to give you a gift that few young people have: the ability to satisfy those desires in a loving and romantic way. Of course, we expect you two to keep this little arrangement private. Not everyone is as open-minded as your parents. Susan will know, because Laura tells her everything, but we all trust her. Finally, I know we can trust you two to keep up your studies.\" \n\n\"Of course, Mom.\" I stopped and hugged her tightly. \"Thank you both. You're the best. I love you.\" \n\n\"I love you, too, Shawn.\" \n\nWe walked for a while in silence, my head spinning. As we were looping back, Mom spoke again. \n\n\"Just a few more logistical details. Laura's parents talked to her, and she went on birth control a few weeks ago, so everything is good there. Normally, we would insist on a condom, but neither of you have had sex before. I trust that's the case?\" \n\n\"Yes, Mom. I've been a clueless boy until Laura came into my life.\" \n\nShe laughed. \"That's perfectly okay. We'll let you know what Laura says, but we strongly expect it to be an enthusiastic yes.\" \n\n\"I think you're right, but I won't presume anything.\" \n\n\"Great answer. And that leads into the final part of our conversation. Shawn, you've been raised to respect both men and women. Keep that up with Laura. The physical and emotional get tangled in strange ways, especially for young people. Don't presume anything Friday, or any other time you're together. Laura really cares for you, and she trusts you deeply, but let her set the pace, or know that she wants you to set the pace. Sometimes you may just hold each other and talk. As I said, the emotional and the physical have to work together. Make sense?\" \n\n\"It does make sense, Mom. And I've always had this feeling that it's a good idea to let Laura set the pace.\" \n\n\"Most healthy women want some measure of control in a relationship. Very few people want to be pushed. And wise men know that letting the lady help set the pace often leads to a faster pace in the end. So listen to Laura. She'll tell you what she wants, but it may not be with her voice. Women tend to be indirect and a bit mysterious, and they want their man to pay attention and figure them out.\" \n\n\"I've been working to figure out Laura's signals.\" \n\n\"From what I can see of the chemistry between you, you're doing fine. But Shawn, you're never done.\" She laughed. \"Neither is your Dad.\" \n\nI laughed, and a sense that Dad was a lucky man came to me. Mom picked up on that and winked. \n\n\"Enough bombshells for one day?\" \n\n\"Yeah, but they've been good ones.\" \n\nLater that evening, my Dad knocked on my door and I asked him in. \n\n\"Son, Laura's parents called. You have a dinner invitation Friday.\" He winked. \"And breakfast.\" \n\nI jumped up. \"Awesome!\" \n\n\"Awesome indeed. You're a lucky guy. Now, knowing you, I expect that you're going to do some research to show Laura a good time. Thought I'd save some effort and get you some good information. Here's our copy of The Joy of Sex for your continued extracurricular education.\" \n\n\"Thanks, Dad,\" I said, the heat rising to my face. \n\n\"Your very welcome. And remember, most of what you'll learn doesn't come from books. They get you started, but you will learn by doing. Pay attention to the lady, and she'll guide you. Happy reading. Good night, son.\" \n\n\"Night, Dad.\" I gave him a big hug, and he hugged me back. \n\nAs soon as he left, I eagerly skimmed the book, my eyes drawn to the illustrations. Being a true nerd, I quickly devised a study plan. I had four nights, and I would focus on the beginner aspects of seduction and lovemaking. There was plenty of time to worry about the advanced subjects later. I wanted this to be the new best night of Laura's life. \n\nI went to bed horny beyond belief, and knew I needed a release to allow me to sleep. With memories of Laura's naked body in my arms, it didn't take much time with my cock for a strong orgasm to wash through me. \n\nWhen Laura saw me at school the next day, she rushed into my arms. \"Can you believe it?\" \n\nI hugged her tightly. \"Never, in a thousand years, would I think that something like this would happen.\" \n\n\"Me either. And Shawn, I am super excited!\" \n\n\"You have no idea.\" \n\n\"What's so exciting?\" One of Laura's friends had overheard. \n\nI thought fast. \"We've been invited to participate in an intern project by an outside group.\" \n\nThe friend rolled her eyes. \"Sounds sooo exciting.\" \n\nLaura picked up: \"It'll be a lot of work, but we will learn so many new things.\" \n\n\"Gag me. Maybe you two will have a mental orgasm or something.\" \n\n\"Tsk, tsk. Don't be jealous!\" \n\n\"Don't worry.\" \n\nWhen she left, Laura winked. \"There's going to be all kinds of orgasms,\" she whispered. \n\nI laughed. \"Don't ever change, Laura.\" \n\nLater, Susan's familiar step fell in beside me. \"What universal karma did you gain by good deeds in a previous life?\" \n\nI chuckled. \"I don't know, but maybe I'm doing my good deeds now. You know, helping a young woman lead a full and satisfying life.\" \n\n\"You're going to fill her with something, that's for sure.\" \n\nI just stayed silent. \n\n\"By the way, classy way of holding her after her little gift to you. She kind of stepped out there, and you made her feel great about it. That was so hot to listen to. And if you ever want to return the favor, she is all in.\" \n\n\"I thought about it, but didn't want to push Laura that first time. But thanks for the info. I definitely want to return the favor.\" \n\n\"Mind if I let her know?\" I shook my head. She smiled. \"Laura will feel more comfortable knowing you want to. I try to help my friends however I can. I've been pretty satisfied with the results of my little discussions with the two of you.\" \n\n\"Yeah, Laura has told me I need to continually thank you.\" \n\nSusan laughed. \"Can't wait to hear about Friday. Laura is super excited. She wants this, Shawn, badly. Have fun.\" \n\nI called Laura most nights for a quick chat, and we studied again at Susan's Wednesday afternoon. I also worked on my outside studies in the evening. I learned that many women don't orgasm by intercourse alone, and that some sort of manual stimulation was very helpful. In some positions, it would be hard for me to do it. I imagined that Laura might feel shy to do it on her own. \n\nEven though I didn't have her easy confidence, I resolved to ask Susan's assistance. ",
        "\"Susan, I've got a personal thing I'd like you to pass by Laura.\" \n\n\"Oh?\" \n\n\"This is hard to say, but of course, I've been doing a little research for Friday.\" \n\nShe laughed. \"That's hard to say? Shawn, I would expect nothing less from you.\" \n\nMy face got hot. \"It's more than that. I learned that a lot of women don't orgasm by intercourse alone. From previous experience, I know that Laura loves to orgasm.\" \n\n\"You can say that again.\" \n\nI laughed. Susan always took things so well. \"And some positions, especially the more romantic ones, don't give me much of a way to help out. So, I'd like you to pass along that I'm totally okay with Laura giving herself a hand.\" \n\nSusan busted up. \"Giving herself a hand? That's a way to put it.\" Then she got friendly. \"I'm sorry, Shawn, I couldn't help it. You're a great guy-always thinking about his girlfriend. Yes, I will pass that along, and I'll tell Laura not to be embarrassed. In fact, it's pretty hot.\" \n\n\"Look, Shawn, I don't give out compliments very often. I prefer teasing my friends. But, I have to say this. Laura is fantastically lucky. You treat her respectfully, but you also really light her fires. If my first boyfriend is as half as great as you, I will be a really happy girl.\" \n\n\"Wow. Thanks, Susan. I'll try to live up to that.\" \n\n\"You better. I want only the best for my friend.\" \n\nFriday, Susan found me again. \n\n\"Mission accomplished. Laura says thank you.\" \n\n\"Thanks so much, Susan. I owe you.\" \n\n\"Don't you ever.\" She winked. \"Looking forward to the replay. Have fun.\" \n\nThat evening, Laura came to pick me up. My Mom explained that it would be better if we didn't leave our cars outside all night. \n\n\"Can you believe it?\" she said when she pulled up. \n\n\"I pinch myself every hour, but I haven't woken up yet.\" \n\n\"My Mom said I should come in. Any intel I should know about?\" \n\n\"My Mom's been smiling, so I think it's good.\" \n\nI walked Laura inside. \n\n\"Hi, Laura.\" Mom gave her a big hug. \"I just want you to hear it from us. We really like you, we trust you, and we want you to have a great time with Shawn. You have our blessing. I just have one small price. I want to get a picture before you go and after you come back tomorrow. I just always like to have pictures of the significant moments in Shawn's life, and I think this qualifies.\" \n\nLaura laughed. \"I'd be happy to.\" We posed with our arms casually draped around each other. I had an easy smile, and I'm sure Laura did also. Mom and Dad took their pictures and told us to have a very special evening. \n\nWe got over to Laura's, and her Mom gave me a big hug. \n\n\"Shawn. It's so good to see you. And please, don't feel awkward around us. Just like your Mom told Laura, you have our blessing. We know what you'll be doing later, and we want you to relax and have fun. You can be affectionate with Laura around us. It's really okay. You, too, Laura. Got it?\" \n\n\"Yes, Mom. I'll work to keep him relaxed.\" \n\nHer Mom laughed. \"I'm sure you will, dear. Now, show Shawn up to your room so he can drop off his backpack.\" \n\nLaura excitedly led me upstairs. Soft light flickered out of her room. I walked into a heady scent of candles, with her bed turned down. \n\n\"Wow.\" \n\nLaura slid into my arms and gave me a smoldering kiss. \"My Mom says this sleeping over idea has been great. It gives her a way to teach her only daughter the finer points of seduction.\" \n\n\"Your Mom doesn't leave much to chance, does she?\" \n\n\"Are you kidding? She'd be in here with us if she could.\" \n\n\"Okay, maybe that's too much.\" \n\nLaura laughed. \"Let's get back down there before they suspect something.\" \n\n\"Yeah, we don't want them to think we're intimate or something.\" \n\nWe shared appetizers followed by a good meal, and Laura's parents keep things light and friendly. At the end of dinner, we helped put the dishes away. Laura's mother looked over and winked. \n\n\"Shawn, I have to confess something. Laura was a naughty girl this week, and the only appropriate punishment was to send her to her room right after dinner. You should probably join her to make sure she doesn't sulk.\" \n\n\"Yes, Ma'am.\" \n\n\"And to make this punishment stick, I plan on a late breakfast. Plates on the table at 10:30, Laura?\" \n\n\"We'll be there, Mom.\" \n\n\"Okay, young lady, I want you to remember why you've been sent to your room.\" \n\n\"Oh, I will, Mom.\" \n\n\"Good. Good-night, Laura. Good-night, Shawn.\" \n\nLaura took my hand and led me up to her room. \"Mom's been conspiring all week. We've got drinks and snacks if we need them.\" \n\n\"It's hard to believe this is real.\" \n\n\"Isn't it? Now, you sit here at my desk while I get ready for bed.\" \n\nA few minutes later, Laura stepped out in a robe. \n\n\"Don't take too long, Shawn. I'll be the naked girl waiting for you between the sheets.\" \n\nI took my time brushing my teeth, but I sped through getting out of my clothes. I hung them beside Laura's, then stepped out. \n\n\"Whoa!\" Laura reclined on her side, her head propped up in her hand. Her upper body was bare, and those fantastic breasts beckoned in the candlelight. Her tummy led to shadows further down where the sheets just blocked the light. She had a coy smile on her face, and she openly watched my erection climb to full mast at the sight of her. \n\nWith her free hand, she hooked her finger at me. My legs started on their own, and I arrived at the side of her bed. She lifted the sheets to allow me to slide in. \n\n\"Locked in my room all night with my boyfriend. No clothes in the way. This is going to be a fantastic evening.\" Laura pulled me close and we kissed deeply. Her body was already radiating heat, and I realized that she had been simmering for a while-her seduction had turned her on as much as me. \n\nWe kissed and our hands caressed each other's backs. Laura was hot and insistent, so my caresses migrated to her front and brushed against the side of her breast. \n\n\"God, yes,\" she breathed into my lips. \n\nEmboldened, I slid my full hand over her breast. Laura moaned. I caressed the firm mound and felt her erect nipple drag under my palm and fingers. \n\nI played with Laura's chest for a while, until her body was writhing beside mine. The mood felt right for my lips to explore more of Laura's body, so I traced kisses down to her neck. Her breast tightened and the flesh grew pebbled, so I knew my lips were stimulating some sensitive spots. I teased up to her lips for another kiss, then I ranged down, kissing along her upper chest until I reached her breast. Having already warmed it up with my hand, I kissed up to her nipple and swirled all around, feeling the small bumps of her aureole with my tongue. Finally, I captured the straining nipple in my lips. \n\nLaura gasped and her arms came around to cradle my head at her breast. A warm sense of intimacy flowed into me, and I could sense that Laura felt it, too. I suckled at her chest, and when the time felt right, I gently guided her onto her back. She went eagerly. \n\nSwinging a leg over her, I held my head over hers and looked into her eyes. What I saw was desire, and love, and not a hint of hesitation. I kissed her again, and headed down, first giving attention to the other breast, then moving lower. \n\nI kissed along her tummy and played with her belly button. Laura squirmed under me. The first heady scent of hot pussy washed across my nose, and I headed down to find the source. \n\n\"Oh, God!\" I had kept Laura wondering, and now she knew. She was in for a tongue lashing. \n\nI teased over her mound, moved across the tops of her thighs, and finally slid the sheet back. I reached down and guided one knee outward. The leg went willingly. The same for the other. I looked up, and Laura's pussy had flowered open. Swollen outer lips framed her inner lips, flushed with heat and moisture. They met above in a little hood, and I knew her clitoris was hiding inside. The flickering candle light heightened the magic of the moment. \n\n\"You are so beautiful and erotic, Laura.\" She moaned in response, and I kissed up her thighs and finally teased her outer lips. Her musk electrified me, lighting up new parts of my primitive brain. I moved to the slick inner lips, tasting her, and she shuddered under me. I had read not to rush to the clitoris, so I kept my tongue further down. Laura was having none of that, however, and she drove her hips down to push her clit under my tongue. \n\n\"Oh, my God!\" she cried out, and I wondered if her parents heard that. Oh well, it's not like they didn't know what we were doing up here. I tried a few of the strokes I had read about: up and down, side to side, and cross patterns. I felt out her reactions. It seemed like she enjoyed everything, but I could tell she liked the variety and the uncertainty of what was coming next. \n\nI reached up her chest and palmed a breast. A deep moan told me I was on the right track. And then it hit me: I was having the time of my life. Here I was, intimately connected to Laura's pleasure centers, her journey depending entirely on me, and she was loving it. \n\nI rolled her nipple between my fingers, and I could feel the jolts of electricity through her body. Her body rippled under me, dancing an ancient rhythm to the fire flowing through her. \n\n\"Oh, God, don't stop,\" she moaned, and I felt her body tense under me. More and more, then she bowed her back off the bed. \n\nA shuddering cry announced the detonation in her body. I felt her pussy throb into my tongue, and it was matched by pulses in her nipple. I flattened my tongue and kept up the pressure as she jolted in my hands. When she finally collapsed back, I released the pressure, but left my tongue in place to sooth her abused pussy and my hand to cradle her breast. Occasional aftershocks twitched through her body while she returned to earth. \n\n\"Oh. My. God. That was so good. Come up here.\" \n\nI pulled away from her swollen sex and kissed my way up to her face. She pulled my head down and fastened her lips to mine, swirling her tongue in my mouth. She pulled my head down beside hers and whispered. \n\n\"That was fantastic, Shawn. I want you inside me.\" \n\nI raised myself and looked into her eyes. They were full of love and anticipation. Her hand snaked down to place my cock at her entrance. \n\nThis being her first time, I wondered how gently I should push inside. Laura relieved me of worry. Her hips rippled up toward mine, and the head of my cock entered a snug, liquid furnace. Another ripple, and the first part of the shaft. Another, and more. Another, and I was deep inside. One more, and I slid home. \n\nWe both groaned together. I couldn't believe how good this felt. Her pussy conformed to my shaft, each bit of my cock stimulated by tight, liquid, velvet. And the heat. Laura's pussy was on fire. I knew, deep in my heart, that this is where I belonged. \n\nI pulled my attention up to look into Laura's face. A huge smile animated her features. \n\n\"This is incredible,\" I breathed. \n\n\"You feel so right,\" she answered. \"And, Shawn, don't try to wait for me this first time. Let yourself go. We have all night.\" \n\n\"Thanks,\" I replied, marvelling about how my girlfriend just took the pressure off. I knew I wouldn't last long inside her fiery tunnel. I leaned down and fastened my lips to hers while my hips pulled back. I slid home again, and we both groaned in pleasure. \n\nWe got into a rhythm, and the tendrils of orgasm assembled in my balls. Laura was everywhere around me, her hands caressing my back and face, and her lips working magic on mine. \n\nI didn't fight my orgasm, and the tendrils grew until I knew it was imminent. Laura felt the change. \n\n\"Cum for me, baby.\" She pulled my head down for a deep kiss while her hips flexed upward, driving me deeper. Icy fire radiated out from my cock, then I exploded with a deep groan. Pulses of hot semen blasted out of my cock into Laura's willing pussy, and having her all around me made it infinitely sweeter than anything I had experienced before. \n\nLaura cradled my head all through my release, and her hands wandered all over my back. When I had recovered, she pulled my lips to hers and we made out, my cock still nestled inside her. In that moment, I realized what the term \"making love\" really meant. There was a warmth for Laura that infused my body, and I could feel the same in her. I pulled back, and we both looked into each other's eyes, big smiles on our faces. \n\nAnd it was wonderful to be young. My cock hardened again in the heat of her pussy. \n\n\"Ummm, think you can go again?\" she asked. \n\n\"Oh, yeah. You want to be on top?\" \n\nHer eyes widened into an even bigger smile. \"Love to, Shawn.\" \n\nI twisted and gently rolled over, pulling Laura with me and keeping my cock nestled inside her. She draped herself over me and started another makeout session. Her hips gently moved over me, clearly in no hurry to get anywhere. \n\nWe made out for a long time, and this time my hands were free to explore Laura's body. I took advantage, caressing her back, butt, and upper legs. Laura's pussy undulated around my cock, keeping a steady stream of pleasure going. Her lips made love to mine, and her body filled my world. \n\nFinally, I moved my hands around to her front and palmed her breasts. \n\n\"Oh, yeah,\" she breathed into my lips. \n\nI played for a while, then I captured her nipples in my fingers. Laura lifted from my lips and looked into my eyes. As always, some mysterious communication occurred between us. I saw a gleam flash in her eyes, and then her legs shifted forward. Laura hunched over me, then her chest lifted up, her eyes never breaking my gaze. She kept going until she sat on my hips, her body on full display. I knew that Laura trusted me enough to expose herself like this, and it made me feel really good. I took a quick look up and down her body. \n\n\"My God, Laura, you are beautiful.\" \n\nLaura beamed, and pulled her hands up into her hair. This thrust her chest out, and her breasts rode high and happy, the excited nipples pointed slightly upward. This time, my eyes took a longer tour, lingering on her chest, then moving down. Her tight abdomen led down to the shadows between her legs, where my cock nestled between her swollen pussy lips. I swept my eyes back up, and took in her radiant face. \n\n\"You are so alive, Laura,\" I said in wonder. \n\n\"You make me feel alive, Shawn.\" Then a grin spread across her face. \"And also really hot.\" Her hips started pumping up and down. \n\nI reached up to play with her breasts again, and she purred her encouragement. And then she blew me away. Locking eyes with me, her right hand came down from her hair and nestled in the vee between her legs. I jolted. \n\n\"Oh my God, Laura, that is so hot.\" \n\nShe laughed and started playing with her pussy. Her fingers occasionally brushed against my cock, and I hardened to steel inside her. We started a feedback loop between us, each further exciting the other. Her hips rose further and fell with more pressure, and her fingers pressed harder into her folds. The pleasure in my cock built as her pussy tightened. I noticed a blush form around her neck and chest. Laura was headed toward a big orgasm, and I was going to get a front row seat. \n\nI twisted her nipples a little harder, testing. \n\n\"Yes-God, yes!\" she hissed. My cock jolted again to see her this deep into passion. \n\nI took the hint and pinched harder. Laura moaned, and I rolled the points between my fingers. Her fingers became a blur between her legs, and I felt little droplets shake onto my legs. Another orgasm built inside me, my brain overwhelmed by the waves coming off my girlfriend. Her blush crept down to her breasts, and then her back bowed\u2014her body in tension. I felt the icy heat creeping up my cock, and I squeezed back so I could focus on Laura. \n\nHer eyes lost focus, then she through her head back and cried out. Her pussy spasmed around my cock, and she grunted through the contractions. Her entire body writhed, and I greedily drank in a sight like no other while I had a few precious moments. Then my cock demanded its due, and I cried out while my eyes rolled back into my head. Another load of cum blasted up in pulses of white-hot pleasure. I lost track of Laura while I twitched under her. When I returned to earth, Laura looked right into my eyes, a huge grin on her face. \n\nI realized I was still pinching her nipples, hard. \n\n\"Sorry!\" I softened my grip. \n\nLaura laughed. \"It's alright, Shawn. When I'm carried away like that, it actually feels really good. It was worth it to watch you cum.\" \n\n\"Oh my God, Laura. Watching you just blew me away. It literally yanked my orgasm out of me. I am the luckiest guy in the world.\" \n\n\"And don't forget it.\" She laughed again. \n\nLaura eased her hips up, and my worn cock flopped onto my abdomen. She settled beside me, and we cuddled and kissed while we cooled down. Laura offered to get a washcloth, and she gently wiped the warm cloth around my cock and then cleaned herself up as well. After that, we slipped between the sheets and languorously talked. At one point, Laura lightly spanked my ass. \n\n\"Susan told me about your conversation, you dirty boy. We laughed about the 'helping hand' for hours.\" \n\n\"Glad I could provide some entertainment.\" \n\n\"Besides the laughs, I appreciate it, Shawn. It helped me loosen up about that. When I touched myself, your eyes about bugged out of your head.\" \n\n\"Can you blame me? That was the hottest thing I have ever seen.\" \n\n\"Well it worked. Cowgirl position is pretty exposed for the woman, especially to touch herself. But, I could see that you were loving it, so I let go.\" \n\n\"I loved watching your orgasm. You were totally lost.\" \n\n\"I came down enough to see yours. It felt good to know I caused that, and it looked like a good one.\" \n\n\"You could say that.\" We both laughed. \n\nAn hour of so later, Laura started interspersing the conversation with kisses, and my cock stirred again. Laura felt it. \n\n\"Maybe again?\" Her voice was teasing, but hopeful at the same time. \n\n\"You have an effect on me, Laura. I bet I can.\" \n\n\"Fantastic.\" She rolled on top of me, and lined my cock up between her lips. This time, she stayed hunkered down while her pussy lips massaged my cock back to life, the friction lighting her fires as well. We made love this way, our lips locked as Laura ground her clit against my cock. She seized up and came, gasping into my lips. That got me going, and I came soon after, Laura cooing in my ear. \n\nWhen the afterglow kisses subsided, Laura pulled back and looked into my eyes. \n\n\"That was fantastic, Shawn. I think I can sleep now.\" \n\n\"Good, because I am totally worn out.\" \n\nShe laughed. \"Let's get some rest and build our strength for the morning.\" \n\nWe kissed again, then Laura eased off me and pulled the covers over us. She spooned back against me, and I put my arm around her. Laura pulled it to her breast and snuggled into me. \n\n\"This feels so right,\" she whispered. \n\n\"Um-hum,\" I agreed. \n\n\"Good night, Shawn.\" \n\n\"Good night, Laura.\" \n\nSleeping with another person was a revelation. I had slept alone my entire life, and it was tender and comforting to have another warm body in my arms. And Mom was right: Laura and I shared an emotional bond as we drifted off together. Even for a naive boy like me, I knew that our bodies continued to communicate to each other after our minds entered dreamland. \n\nThe next morning, I woke up tangled with Laura. She suggested a shower, and we splashed and laughed through our first together. We ended up trading oral orgasms, and then making love one more time. \n\n\"Well, Shawn, I'm impressed. Susan will be jealous to hear how many times you ravished me last night.\" \n\n\"With a hottie like you, Laura, it brings out the best in me.\" \n\n\"Music to a girl's ears. Want to get a final shower before we face my parents? I'm sure they heard some of the action in this room.\" ",
        "\"We better at least look decent.\" \n\nLaura laughed and led me into the shower again. We dressed and went down the stairs at the appointed time. \n\nHer mother gave us a smile. \"Restful night?\" \n\n\"Not really.\" \n\nEveryone, including Laura's Dad, laughed at that one. \n\nWe had a lighthearted breakfast, then Laura took me home. My Mom took another picture, and it was really easy to smile with Laura's sensual body in my arms. After a smoldering kiss, Laura got into her car. \n\n\"Can't wait for next time.\" \n\n\"Me neither!\" \n\nShe laughed and drove off. Later that day, I took another walk with Mom. I thanked her again, and she teased me about being a very lucky boy. We laughed a bit about that. \n\n\"Mom, you were right. It meant a lot to actually sleep with Laura after the intimacy of what we shared. Her passion brings a lot out in me, and we share pretty deeply with each other. It would be easy to get shy or embarrassed afterward, but sleeping together kept the connection and intimacy alive.\" \n\n\"Shawn, you are learning that making love involves the body and the soul. You're more than just physically naked. You're emotionally naked, too. You're sharing what gives you pleasure, what doesn't, what you're willing to do, and what you're not willing to do. Almost no one talks about that. Now think about Laura. She's a young woman in a very difficult time of life. High school society is ruthless. Young women are pressured to be both sexy and innocent. She meets a nice guy, and she wants to share herself. But all this baggage can complicate things.\" \n\n\"So when she does share herself, she may feel vulnerable afterwards. But when her man supports her, she feels cherished for what she shared. Shawn, that means a lot. So a night of warmth and cuddling forms bonds that root the physical to the emotional, and her vulnerability finds an answer. When Laura dropped you off, there wasn't any vulnerability or regret in her body. Look at your pictures sometime. There weren't any second thoughts in your expression either, Shawn. I know that men can separate the physical and the emotional a bit more than women, but both are more fulfilled when these things harmonize. Sleeping together allows you to do that. That's why we gave you two this gift.\" \n\nLaura or I slept over about twice a week, and we made love all through the winter. I couldn't believe how lucky I was to have such a passionate girlfriend. We explored all kinds of positions, and we found that they all offered something unique and fun. We went on some regular dates as well, but we often spent the night after a date. It was our little secret that two high-achieving nerds were getting laid more often than just about anybody at school. Laura never lost her expressive eyes, and she positively glowed when she caught the admiration in mine. \n\nSusan continued to provide an indirect communication path between us, and she would occasionally push to bring us closer together or expand our boundaries. \n\nOne day we ran together, and Susan counseled me while we cooled down. \n\n\"Shawn, you know that Laura totally trusts you, right?\" \n\n\"It sure seems that way, and the feeling is mutual. Why do you ask?\" \n\n\"Laura loves what you do to her, and she knows you respect her. She's also okay with you exploring...all of her body. So if your hands have thought about wandering somewhere, let them wander. Get my drift?\" \n\n\"I think so, Susan,\" I answered, my cock hardening. I had stopped worrying about whether Susan noticed. \"I should be a little more bold, and follow her reactions.\" \n\n\"No pressure to be bold, Shawn, but if you want to, Laura will go there with you. You have her wrapped around your finger, you know.\" \n\n\"That goes both ways.\" \n\nSusan laughed. \"Shawn, that's obvious. I just want to make sure that clueless boys like you get a hint when their girl feels the same way.\" \n\n\"Thanks again for all the hints, Susan. They've led me down a road I never thought I go.\" \n\n\"What are friends for? By the way, thank you for the stories. At least I have some steamy fantasy material to tide me over.\" \n\nI took Susan's advice, but I started slow. I decided to play with Laura's feet and see how she liked that. Turns out she loved it, and I ended up kissing and sucking her toes. Laura got really turned on and ended up nearly attacking me-pushing me down and riding me hard. \n\nLaura upped the ante herself soon after. \n\nWe had gone up to her room after dinner and conversation with her parents. She squeezed my hand as we went through and closed the door. \n\n\"Why don't you get ready first,\" she said breathlessly. \"I want to take a quick shower and be squeaky clean all over when I come to bed.\" \n\nWhen I came out of the bathroom, she gave me a quick kiss and closed the door. She had put her hair up, so I figured the shower was below the neck. I thought about Susan's words and Laura's hints tonight. Even for a clueless boy like me, I thought I knew what she wanted. \n\nLaura came out in a haze of steam, her hair back down and a flush on her cheeks. She looked down and quickly crossed over to the bed, almost like she was bashful about something. She climbed over me, pulled the sheets over us, and began kissing me passionately. \n\nMy cock soon responded, and Laura maneuvered her hips so my cock slid under her pussy lips. I figured it was time. My hands moved down to the cheeks of her ass, and she purred her assent. Her tongue went deeper into my mouth. I kneaded the rounded globes, feeling the muscles ripple under my fingers. I palmed them more firmly, and then I did something new: I kneaded in opposite directions. This opened up the cleft between her cheeks, and Laura moaned again, driving her tongue hard into my mouth. \n\nIf she were ever ready for the next step, this had to be the time. My fingers slowly moved inward, encouraged by more lusty sighs and moans. My cock was soaked with the juices dripping out of Laura's pussy. Finally, my finger grazed the crinkled skin of her anus. \n\n\"Oh, my God!\" Laura gasped into my mouth. I brushed again and again, and soon I converged both hands on her anus, rubbing the flesh continuously. \n\nLaura's kisses and sights told me not to stop. We played like this for a while, and then she lifted up, looking into my eyes. As ever, she looked deep into my thoughts. I did the same, and I sensed that she was sharing. My fingers touched her most private place, and she trusted enough to share her private reactions. In fact, she wanted me to see. With a start, I realized how deep this went. Something in my eyes tipped hers, and she shyly smiled, happy to be understood. \n\nShe lifted her hips, still holding my eyes, and something told me to leave my fingers exactly where they were. Laura's hand snaked back to position my cock at her opening, and she sank down, enveloping me in her fiery tunnel. A few more moments of locked eyes, then she dropped her head beside mine and hiked her ass into my fingers. \n\n\"Oh, yessss,\" she said in a throaty voice. \n\nI took the hint and possessively massaged her anus. Laura went wild, bucking on my cock and moaning into my neck. My cock jolted to know how much Laura trusted me, how much she was sharing of herself, and how much there was to share. Laura came like a freight train, with a long, keening moan that had to ricochet throughout the house. Her passion tore my orgasm out of me, and I came right behind her. \n\nWe made out afterward, and her purrs encouraged me to keep playing with her ass. I did. \n\n\"I feel all tingly and warm,\" she confided. \n\n\"I can feel the thrills run through your body.\" \n\n\"Ummm.\" \n\nWe made out for a long time, and we slept that night tightly bound together. We made love the next morning and cleaned up. As we were getting ready to go downstairs, Laura pulled me close. \n\n\"Thank you for last night,\" she said shyly. \n\nI could feel the heat on her face. \"It was my pleasure, Laura. Thank you for sharing.\" I gave her a soft kiss. She hugged me tight. \n\nWe went down, and Laura's Mom fixed us with a look. \n\n\"Morning, lovebirds. I wondered if you would make it out of bed after whatever happened last night.\" \n\nLaura flushed, but kept her wits about her. \"Shawn was inspired.\" \n\n\"Oh he was? Well, it's sure good that you're not trying to hide anything. That wail could wake the dead.\" \n\nWe all laughed. \n\nThe next week, Susan found me at lunch and steered me to the track for a quick walk. \n\n\"Naughty boy! The things you do to poor, innocent, Laura!\" \n\n\"Yeah, well, I took her wicked friend's advice.\" \n\n\"And she loved it. Good thing she has such a great friend.\" \n\n\"Really good thing.\" \n\nSusan laughed. \"Laura hasn't asked, but I figure I'd gather a little info for her. Are you okay with her hands wandering around if she's in the mood?\" \n\nMy cheeks got hot-this was pretty personal. \"Let's just say that I trust Laura's instincts when we're together.\" \n\nSusan laughed. \"Well said, Shawn. You're not the innocent, clueless boy anymore, are you?\" \n\n\"Maybe I have learned a few things.\" \n\n\"According to Laura, you've learned an awful lot. She's really happy, Shawn.\" \n\n\"Thanks, Susan. I think you can tell how happy I am. The more I learn about her, the luckier I feel.\" \n\n\"At least you know the most important thing. And that's to appreciate how special she is. How that girl made it this far in school without a bunch of boys hitting on her is beyond me. Blonde, athletic, good figure-she's got the body. I guess it's her brains and drive that scared people off.\" \n\n\"To be honest, I didn't think of her as that much fun before. After I got to know her, I realized I'd been wrong all along. She's more fun than any girl I know.\" \n\n\"Are you sure that's not your little head talking?\" \n\nI laughed. \"I admit that any girl is fun if I'm making love to her on a regular basis. But that's not what I meant. I was having a great time before the sex, and I still really enjoy Laura for herself. She's playful, curious, and she has a wicked sense of humor.\" \n\n\"Okay; okay; don't make me sick. I'll pass along your admiration. See ya 'round.\" \n\nI played with Laura's butt every once in a while; always when she made a \"squeaky clean\" comment. She always enjoyed it and came hard. We both showered sometimes, and her fingers wandered when she went down on me. I was starting to understand the attraction-there was some sensitive nerve endings back there. Once again, I just followed Laura's lead and let her take me on this journey. \n\nSusan's influence didn't stop there. For instance, one evening later in Spring, Laura excitedly pulled me close when we got to her room. \n\n\"My wicked friend Susan has been working again to corrupt me. She gave us a video to watch, and she wants to hear the sordid details if we do. She says it is very romantic, but also really hot. Should we?\" \n\nMy cock strained in my pants. \"Sounds like fun.\" \n\nLaura winked. \"I figured you'd say that.\" \n\nLaura set up her laptop, and we sat side by side to watch. Susan was right. The couple looked like a girlfriend/boyfriend pair, and they cared about each other while also evoking passion. When it finished, we grabbed each other and make intense love. Laura was literally dripping, and her flushed body radiated heat into me. My body responded as well, and our lovemaking burned hot. When we cooled down, Laura snuggled close. \n\n\"Someone got turned on by that,\" she teased. \n\n\"Someone else did, too.\" \n\n\"OK, I admit it. But what made it hot for you?\" \n\n\"I guess it was seeing a real couple make love. It got to me. That's what we probably look like.\" \n\n\"You think I'm that hot?\" \n\n\"Hotter.\" \n\n\"Smart boy. Maybe in the morning we'll make love in front of the mirror so we can see ourselves.\" \n\nWe did wake up, clean up a bit, and make love at her dresser. She sat in my lap, and we looked at our reflection. Our eyes gravitated to my hands cupping her breasts from behind, and her hips swaying in my lap. But we also looked at our faces, and we thrilled to the passion we saw there. We both came hard. \n\n\"You're right, I am hot,\" Laura remarked when we could speak again. \n\n\"Told 'ya so.\" \n\n\"I bet Susan will love this story. In fact, she'd probably want to see for herself.\" \n\nMy body jolted, and a hot wave passed through me. Laura felt it. \n\n\"Naughty boy; you'd like that, wouldn't you?\" \n\n\"If I said no, I'd be lying.\" \n\nLaura laughed. \"It wouldn't make you nervous?\" \n\n\"A little, but we both know Susan would love it. She hangs on to every word you tell her about us, so she would be spellbound watching.\" \n\n\"I know my friend, and you're right.\" We both laughed. \n\nAs late Spring came, Laura's parents and mine set up a joint getaway one weekend. They left us together at her house, but said no visitors but Susan. \n\nI rode my bicycle over to Laura's place, and she met me in a button-down shirt and nothing else. \n\n\"I've got a fantasy about making love in the kitchen. Come on,\" she said, tugging my hand. \n\nI set her up on the counter and made love to her. After a round of making out, the shirt came off quickly, and I pulled up a barstool and went down on her until she shrieked in orgasm. She helped me undress from her seated position, then I stood and slotted my cock in her soaking pussy. She played with herself while I pistoned in and out of her, and we both came hard, me carried along by her sensuality and the novel situation. \n\n\"I'll always have a fond spot for this counter,\" she laughed when we cooled down. \n\nWe cleaned up a bit then made dinner together, joking about owning our home and having jobs. After eating, Laura suggested we relive our first heavy makeout session, when I made her cum. \n\n\"I want to show you what I was really thinking,\" she said. \n\nWe relived that night, but this time she took my shirt off, and that led to her being naked when she straddled me. She bucked into my hand fingering her pussy from behind while my other played with her nipple. \n\n\"That's what I wanted to do that night,\" she said after recovering from her orgasm. \n\n\"Really?\" \n\n\"Shawn, girls want sex too, even us nerds. It just has to be the right setting with the right boy. It takes some work to figure that out.\" \n\n\"I'm glad you figured it out.\" \n\nLaura laughed. \"You had a few things to figure out yourself, if I remember. Like saying 'Sorry!' the first time you touched my chest or between my legs.\" \n\nI thought back and then laughed. \"I guess you're right. Probably not the most romantic response.\" \n\nLaura smiled. \"You were adorable, Shawn. I could tell you respected me, and it gave me the confidence to open up. Speaking of, we haven't finished the fantasy.\" \n\nLaura worked my shirt over my head and got the rest of my clothes off. She lowered herself down on my straining cock and rode me. I played with her clit, and she came shortly after me. \n\n\"That's what I really wanted to do. You had me so worked up that night,\" she said when we calmed down. \n\n\"I was still too clueless to even dream about getting you like this.\" \n\nLaura looked into my eyes. \"You're still clueless, Shawn, but I'll take care of you.\" \n\n\"That's what I'm counting on.\" \n\nShe kept looking, and I got the impression that she was feeling me out about something. \n\nThat night, we slipped into bed together. Laura snuggled close. \n\n\"Shawn, remember when we talked about someone watching us after Susan's video?\" \n\n\"Uh-huh. That turn you on?\" \n\nLaura laughed. \"It got us both, if I remember correctly, naughty boy. But it also turned Susan on, just like we said it would. We could give her that fantasy, if you want to.\" \n\nMy cock swelled into Laura's hip. \"You'd really do that?\" \n\n\"Yes, silly boy. Susan's my best friend, and she's been hearing all these stories with no chance to see for herself. I also think it would help her understand how things should work when she has her first boyfriend. So, we can make it happen if you want to.\" \n\n\"No awkward friendship among us after this?\" \n\n\"Susan and I have been friends for a long time. I think it will actually bring us closer together.\" \n\n\"Laura, if you really want to do this, I'm in.\" \n\nLaura kissed me. \"See what I said about taking care of you?\" She wrapped her fingers around my cock. \"Now wrap your head around this: Susan is coming over tomorrow. Any wicked ideas?\" \n\nShe chuckled when she felt my cock turn to steel. Rolling me on my back, she straddled me and sank down on my shaft in one go. Her pussy was soaking, and I realized that she had been building up to this for a while. She made slow, possessive love to me, grinding her clit on the upper side of my cock and shaking over my body when she came. Her orgasm fueled mine, and I came soon after. Then it was a long makeout session. \n\nWhen we finally snuggled together to sleep, Laura whispered in my ear. \"Rest up, Shawn. You'll need your strength tomorrow.\" \n\nWhen we woke up, Laura stretched languorously and turned to look at me. \"I think we should wait until Susan gets here before we have any sex. We'll both be a little more primed.\" \n\n\"How long before she gets here?\" \n\nLaura laughed and reached over to smack my butt. \"Down, boy! I guess you're still excited to do it?\" \n\n\"If it means I get my hands on your hot little body, I'm up for anything.\" \n\n\"Nice flattery. Now, I have a couple of logistics questions. You okay to do this up here in my room? I figure Susan can sit on my desk chair while we use the bed.\" \n\n\"That works for me.\" \n\n\"Great. Now, Susan will get really turned on watching us. Trust me. You okay if she plays with herself?\" \n\n\"That would be totally hot.\" \n\n\"I figured you'd say that, but I wanted to ask. Next question. Susan might want to talk to me, or even you, to ask about something or just comment on how hot it we are. You okay with us talking?\" \n\n\"Susan always says what she wants, so I wouldn't expect her to stop now. Yeah, I'm fine.\" \n\n\"It may be less quiet and romantic, but I think it will be hot. Okay, last question. Susan and I don't worry about how much or how little we wear around each other. You comfortable if she loses a few clothes? I'm guessing she'll want to touch herself without all the fabric in the way.\" \n\n\"Laura, if Susan wants to take clothes off around me, I am never going to argue, as long as you're okay with it.\" \n\nLaura laughed. \"I'm very okay with it. I want my friend to have fun. Give me a few minutes so I can call her with the answers. Of course we talked about this already, and I want to give her the lay of the land before she comes over.\" \n\n\"How about this? I'll hop in the shower while you talk. Might as well shower alone so I don't get distracted with your naked body in there.\" \n\n\"Good idea.\" \n\nWhen I got out, Laura winked. \"We had a good conversation. I'll think we'll all have a lot of fun this afternoon. Why don't you get breakfast started while I shower?\" \n\nWe chatted during breakfast, Laura never betraying a hint of what was going to happen later. But suddenly, she pounced. \n\n\"You think Susan is hot?\" I looked up, and her eyes were locked onto mine. \n\n\"Laura, I'm still pretty naive, but even someone like me knows to tread very carefully when their girlfriend asks a question like that.\" \n\nLaura blushed. \"Shawn, I'm pretty naive, too. It was an honest question. I didn't think about the jealous girlfriend ramifications. I don't feel that way about you, but I could see where you would be more careful. All I can say is, I can feel a lot of what you're thinking. I think I would know if I needed to worry about other girls. So you can trust me. Like I said, I'll take care of you.\" \n\n\"She's super hot.\" \n\nLaura laughed, a sparkle in her eyes. \"Naughty boy! Lusting after my best friend?\" \n\n\"I don't lust, but it would be possible. Susan's a lot like you. Athletic, smart, playful. She's a little more outgoing; you're a little more shy. But beneath that, you have an inner tigress that comes out to play. I like you both, and I could date either one, but I'd want to find out if Susan had that inner tigress.\" ",
        "\"I think she does, Shawn, but she hasn't had the opportunity to let it come out. If you hadn't grabbed me in the lab that day, and I hadn't said my line, we would probably still be just friends, and my inner tigress would still be hidden. Don't you think?\" \n\n\"Oh yeah. And Laura, I'm really glad you said your line. I still can't believe it.\" \n\n\"I figured I'd throw that out there and see where it led. I'm really glad you responded.\" \n\n\"Funny how the little things can lead to really big things.\" \n\n\"They can, can't they? Speaking of little things and big things, it's okay to be turned on by Susan. I know she's hot, and I'd have a hard time believing you if you weren't attracted. So if she starts playing with herself, you can look. I know I will. Besides, I have ways to get your attention when I want it.\" \n\n\"Isn't that the truth. But thanks for the permission. It will keep me from feeling awkward.\" \n\n\"Didn't I say I will take care of you?\" \n\n\"I should just follow your lead, and everything will be great?\" \n\n\"Of course, silly boy. Hasn't it worked well so far?\" \n\n\"Now that you say it, it has.\" \n\nI looked over at Laura, and she had a pleased expression on her face. In a flash of insight, I realized that letting her lead gave her the confidence to take things further, and I was a smart guy to let that happen. Laura's amused smile told me that she guessed what was going on in my head. \n\nWe cleaned up and did homework before Susan came over. \"It will keep our minds from obsessing about the afternoon,\" Laura prescribed. It worked. \n\nFinally, the doorbell rang. \n\nLaura gave Susan a big hug. \"Might as well give Shawn a big hug also. He thinks you're super hot.\" \n\nBoth girls looked at me. Susan wore surprise; Laura amusement. My face burned. \"Jeez, Laura, you don't have much mercy, do you?\" \n\n\"Trust me, Shawn. It needed to be said. Now give your super hot friend a big, long hug.\" \n\nSusan moved closer. \"So I'm hot to you?\" \n\n\"As my traitorous little girlfriend mentioned, yes, super hot.\" \n\n\"That does wonders for a girl's ego, Shawn.\" She moved into my arms and molded herself against me. I felt her breasts press into my chest. I wrapped my hands around her back and pulled her tight. She felt good. \n\n\"You two look good together.\" Laura said. \"In fact, it's getting me hot.\" \n\nWe separated, and Susan looked over at Laura. \"Why you naughty little thing! We're going to have to discuss this sometime, Laura. I'm the one that's supposed to be treated to a show today.\" \n\nLaura blushed. \"I wanted to tease Shawn, but I ended up teasing myself. And you're right, we have a show to put on. I was thinking we should just start now? Poor Shawn's been waiting all morning.\" \n\n\"Poor baby,\" Susan said. \"Wouldn't want to keep him waiting.\" \n\nThey both laughed, and Laura hooked a finger at me and led us up to her room. \n\n\"Shawn, I was thinking this first time should be romantic, but you should also give a demonstration of your oral talents. Definitely a girl-pleaser. Sound good?\" \n\n\"Happy to oblige.\" I noted the words first time. I guess Laura had more planned. \n\n\"Should be yummy for me, too.\" \n\nWe all laughed. \n\n\"Susan, take my desk chair and do whatever comes naturally. Enjoy yourself.\" \n\n\"Don't worry,\" was Susan's amused reply. \n\nLaura pulled me down over her, and we locked eyes. Happiness and excitement shone out of hers. That got me to smile, and we both laughed, then I moved down to kiss those expressive lips. \n\nLaura's body smoldered under me. The audience cranked up the passion level for both of us. With a jolt, I realized how deeply we were going to share with Susan. Naked, explicit sex. Orgasms. And the intensity of our emotions. \n\nWe kissed for a long while, and I moved to the side and slid a hand up Laura's side. Finally, I cupped her breast, and Laura moaned. I also thought I heard a gasp from Susan's direction. Yes, this was really going to happen in front of her. \n\nI continued to fondle Laura's breast, then her hand went to the hem of her shirt. I helped her pull it up, and we broke lips briefly while she got it over her head. Her hands found the buttons of my shirt and worked up my chest, then she directed my arms through the openings and pulled the shirt off my back. Instantly, her hands found my chest and danced over the skin, sending shivers through me. Laura knew my weaknesses, and she wasn't holding back in front of Susan. \n\nI moved my lips to Laura's sensitive neck, determined to exploit a few of her weaknesses myself. She squirmed under me then gasped when my hands closed over her breast again. I kneaded the firm mound, then her hands went behind her and she unhooked her bra. I helped get her arms through it, then I dropped it over the side of the bed. I looked down at Laura, radiant in her passion. \n\n\"You are so beautiful.\" \n\n\"You make me feel beautiful, Shawn.\" And her hands reached up to pull my lips down to hers. \n\nWe kissed for another spell, then I trailed my lips down her neck and down her chest. I kissed around a breast while Laura twisted under me. Feeling her tension, I closed in and kissed around her areola, then teased the tiny bumps with my tongue. Finally, I flicked the nipple, and Laura shuddered. \n\n\"Oh, God,\" I heard Susan whisper. \n\nI flicked the nipple again, then I closed my lips over it and sucked gently. It hardened in my lips, and I thanked my stars that Laura's nipples were so expressive. \n\n\"Ohhhh, that feels really good,\" Laura encouraged, and I sucked a little harder and gently scraped along the erect flesh with my teeth. Laura exhaled a long sigh, and I worked the nipple over, knowing she was on a lazy ride of warm pleasure. When she plateaued, I eased off the wet nub. \n\n\"Oh my God, Laura, your nipple is so hard!\" Susan exclaimed. \n\n\"Shawn takes care of me,\" Laura dreamily replied, then she moaned as I closed over her other peak. Once again, the nipple hardened in my mouth, and I used my tricks to drive Laura further along. She writhed under me, sighing and murmuring her heat. \n\n\"Oh, God, Shawn, let's get naked,\" she said. \n\nI chuckled and reached down to unfasten her jeans. I worked the zipper down, then popped off her nipple so I could pull the fabric down. Laura assisted and soon the jeans joined the pile of clothes on the floor. She sat up and reached for my belt, and soon my jeans were over the side. \n\n\"That looks uncomfortable, Shawn. Let me help you.\" Laura winked and reached for my tented boxers. Okay, so my sassy girlfriend was going to get me naked first. I let her ease the waistband over my erection, and it sprang free when she tugged the material down. I heard a gasp from Susan's direction. \n\n\"Oh my God. That's hot,\" Susan said. \n\nI reached for Laura's panties, and she lifted herself so I could pull the material down. Finally, there was nothing left to take off, so I settled down to suckle Laura's breasts a bit more. After another round of squirming, I let a hand travel down and rub along her thighs. The scent of Laura's passion reached my nose, and my tongue danced down to her navel. Then, it went lower. I could almost feel the waves of Susan's anticipation filling the room. Lower. I grazed Laura's mound, then I traced along her outer lips. \n\nLaura let out a long sigh, and I heard Susan rustle in her chair. I licked along Laura's lower pussy, tasting the musk from her glistening inner lips. I worked Laura up in passion until her hips were undulating, then I moved higher. The tip of my tongue traced an O around her clit. Laura moaned, and Susan gasped in reaction. \n\nI teased some more, then I flicked over the hard nub. Laura jolted. I heard some rustling from Susan, and I figured she was moving her hands over her body. Turned on, I pleasured around Laura's clit, keeping the pressure indirect. When I felt her passion level shift upward, I licked straight into her clit, now standing proud from its hood. Laura rode along with me, and the tension coiled in her body. I used my tricks to write different letters on her clit, keeping her on edge about which stroke would come next. \n\nLaura responded to everything, and her entire body tensed in a sure sign of an impending orgasm. Her breath stopped while she hung on the edge, then she exploded, crying out and thrashing on the bed. I kept her pussy pinned on my tongue, knowing that she relished the pressure while she came. The spasms raced through her, and she let them have their way, clearly open to letting her best friend see everything. \n\nThe tension finally faded from her body, and she relaxed into the bed. I lessened the pressure and gently soothed her pussy through the afterglow. \n\n\"Oh, God, Shawn, that was fantastic!\" \n\n\"Anytime, Laura,\" I answered. \n\n\"And you mean it,\" she chuckled. \n\n\"Hell yes, he means it, with a hottie like you naked under him,\" Susan observed. \n\n\"I think you're right, Susan. But he also knows what's coming next. I want you inside me, Shawn.\" \n\n\"Anytime, Laura.\" Both girls laughed while I moved over her. \n\nLaura looked into my eyes, a smile on her face. I could see that she was comfortable and excited for more. She found my cock and placed it at her hot, wet, opening. I lowered my hips and slid into her furnace. We both sighed, and my face lowered to find her lips. Her kiss was full of passion. \n\n\"You guys are beautiful.\" Susan's voice was full of wonder. \n\nLaura pulled back, and her eyes expressed the affirmation from her best friend. We kissed again and slowly pushed into each other. A chill went through me to realize that my most intimate acts were being watched. \n\nI heard some more rustling, then a zipper slide down. Laura jolted under me. Wow. Susan was going to take the next step with herself. Laura and I continued to make love while little gasps and sighs came from Susan's direction. I kept things very slow to avoid cumming too soon-this was an experience to savor. \n\nAfter a while, I felt Laura's hand worm between us, and I lifted up to give her room. This broke our kiss, and we both turned our heads. Susan's hand moved inside her panties while the other palmed a breast through her shirt. Her eyes went wide when she saw us looking, and her face flushed. Her hand left her breast and gave a small wave. Laura and I both chuckled before turning back to each other. \n\nI felt Laura's hand press deeper into her flesh, my signal to push harder into her. She smiled, encouraging me on. I gave her long strokes, sinking fully into her body each time. Her lips beckoned, and I fastened mine to hers. Our tongues coiled together, fuzing another link with the connection between our sexes. \n\nLaura's hand sped up, so I lifted up to give her more room. We looked into each other's eyes, and I saw the gathering storm in hers. A wave of heat suffused through my body. Laura reacted to that, and we started a spiral of erotic energy. Even Susan was involved, her moans adding to the fire. \n\nLaura's eyes signaled her one-way trip to orgasm. That flipped a switch in me, and the pressure built in my balls. I held back until Laura started thrashing under me, then I erupted, spraying long blasts deep into her spasming pussy. Through our cries, I heard Susan's halting gasps from her own orgasm. \n\nWhen the fires died down, I lowered my lips to Laura's, and we made out through the afterglow. Eventually, I pulled out to a reluctant groan from Laura, then I settled beside her and snuggled close. \n\n\"That was beautiful, guys,\" Susan said with wonder. She blushed. \"And hot as hell. I came really hard.\" \n\n\"Putting on a show kind of turned me on, too. A capital 'O'. How about you, Shawn? It felt like you had a good one down here.\" \n\nBoth girls laughed. \"You felt it right, baby,\" I added to a couple more giggles. \n\n\"The good news, Susan, is that Shawn always has at least one more in him. Give us a few minutes for intermission, and then we'll get on to Act Two. I'm thinking maybe a western scene, with a little cowgirl riding.\" \n\n\"Yee-haw!\" Susan exclaimed, and we all burst out laughing. That broke any post-orgasm awkwardness, and we all chatted about the experience. I had been idly stroking Laura's arm and leg, and after a while, I could feel her body reacting. \n\n\"Think you're ready again, Shawn? I take it you wouldn't mind if I assisted?\" \n\n\"Wouldn't mind at all.\" \n\n\"Good boy. And Susan, no pressure, but I'm really okay if you want to get more comfortable.\" \n\nSusan chuckled. \"You know me too well, girlfriend. Okay, here goes.\" She reached for the hem of her shirt and pulled it over her head. \n\n\"You okay if Shawn takes a look? I know he wants to.\" \n\n\"That true, Shawn? You want to see my body?\" \n\n\"Normally I'd be worried about a jealous girlfriend. But Laura's already dragged out that I find you super-hot, so I wouldn't be fooling anybody if I said no.\" \n\nSusan laughed. She reached behind, unhooked her bra, and pulled the garment away. Her breasts rode firm and high, much like Laura's, and were capped with excited nipples. \n\n\"Is the reality as good as your dream? And don't tell me you haven't wondered.\" Laura's amused voice drifted over us. \n\n\"OK, I'm busted. Yes, she looks good. Really good.\" \n\n\"Thanks, Shawn. You're the first boy to see them,\" Susan said in a pleased voice. \n\n\"Should make this easier,\" Laura said as her head dropped to my lap. My cock was already wakening with Susan's show, and it responded rapidly when Laura's hot, wet mouth descended down the shaft. \n\n\"Wow, girl, you've had some practice!\" Susan exclaimed. \n\n\"And I intend to keep practicing,\" Laura said when she popped off for a second. Then she bobbed back down, and my cock sent a warm current through my body. Susan was massaging her breasts and nipples, stimulating my eyes as well. \n\nIt didn't take long, and I was rock hard again. Laura lifted off, looked over at Susan, then tugged my arms while a little smirk formed on her lips. \n\n\"Shawn, you're going to stretch out with your head on Susan's side of the bed. I'll be the hottie riding you. You'll just have to settle for looking at me and imagining what's going on behind you.\" \n\n\"Sounds like a good deal to me,\" I said as I slid into place. \n\n\"Good boy.\" \n\nLaura swung her hips over me, lined up my cock, and settled down with a sigh. She looked up at Susan. \n\n\"So you're going to sit there with your panties on and watch me about as exposed as I can be?\" \n\n\"And I thought I was the little devil in this pair,\" Susan replied, and I heard the rustling of panties sliding down long legs. Laura looked pointedly at either side of me, and then I felt Susan't feet pressing into the bed on either side of my head. \n\n\"Shawn, Susan is spread out right behind you.\" \n\n\"That's pretty hot,\" I replied. \n\n\"You think?\" Laura teased, but she was smiling while she started twisting her hips. I reached up and gently rolled her nipples, getting an \"Mmmmm\" out of her. \n\nWe did our dance, Laura's eyes spending some time with mine and some with her friend. After a while, her hand drifted down between her legs and worked into her folds. Soon, I heard another hand working a very wet pussy behind me. \n\n\"Shawn, tell me what's going on behind you.\" Laura's playful eyes danced at me. \n\n\"Susan's drinking in the sight of you impaling yourself on my cock. She has one hand playing with a breast, and her upper chest and neck are flushing pink. Down below, she is giving her pussy a wet and wild workout. I'm guessing she's moved to her clit by now.\" \n\n\"Pretty good guess, Shawn. You're just off on the flush. It's gone to red. I think our show has worked up our friend big-time.\" \n\n\"Hell, yes,\" Susan added. We all laughed. \n\nLaura then turned her eyes back to me and worked her hips in the ways she knew I loved. Soon, the first tingles of an approaching orgasm started, but I could relax and let things happen at their own pace since I had cum once already. Laura's fingers moved to her clit, and I rolled her sensitive nipples in my fingers. She arched her hips to grind against my cock, and her own flush deepened in color. Behind me, Susan's breath shortened to pants, and I could feel the frantic pace of her rubbing transmitted through the bed. \n\nThat cranked up my passion level, and suddenly, my orgasm was rushing to claim me. The tension coiled through my muscles, and my back arched, nearly lifting Laura up. My cock burned with fire, and I looked up to see Laura's face screwed up in tension. We both danced on the edge, and the pressure exploded inside of me. I howled out while jets of cum surged up and sprayed into Laura. She collapsed into me, her body shaking with waves of release. Behind me, Susan's legs thrashed into the bed while she cried out and convulsed through her own haze of pleasure. \n\nI wrapped my arms around Laura and held on while we twitched our way through the shocks, and then the aftershocks of a major earthquake. Finally, they died down, and Laura stretched out her legs behind her and rested on top of me. We both liked cuddling after making love, and I figured Laura wanted Susan to see this aspect of our relationship. \n\nWe cuddled for a long time, then Laura sighed and lifted her head to kiss me. \n\n\"Everyone ready?\" \n\n\"I think so,\" Susan's amused voice said. I nodded. Laura slowly lifted herself from me, then she gathered her legs under her. \n\n\"I'm going to clean up a little. I put extra washcloths in the bathroom for each of you. I figured we could make a little snack, and then we'll see if we can get into trouble one more time.\" \n\n\"Shawn can go for three rounds?\" Susan was incredulous. \n\n\"When suitably inspired. With two super-hotties in the room, I think we can figure out something.\" \n\nWe all laughed. Then Laura told us to behave ourselves, and she excused herself. After a minute, Susan looked over to me. \n\n\"By the way, thanks for pointing out that I'm 'super hot' to you. I don't get the kind of daily appreciation Laura gets, so it means a lot to hear that. Being a nerd is not exactly the way to get the boys' attention.\" \n\n\"You're welcome. I was a little nervous admitting that to Laura. But she said she wasn't jealous, and she wanted to hear it.\" \n\n\"Laura is a very unusual girl. She's a good person, so she doesn't look for flaws in others. If her boyfriend was someone she couldn't trust, she would be thankful to know and just move on. And boy, does she trust you, Shawn. You've also been a very smart boy and followed her lead. I think she's a little more wicked when she's in charge. Keep it up-I think you'll be happy.\" \n\nAs if by prophecy, Laura came out of her restroom at that point, still naked. \n\n\"I'm feeling a little naughty today. Shall we have lunch in the buff? Might be our only chance to do that together.\" \n\n\"Why not, girlfriend? I'm sure Shawn won't mind.\" \n\n\"Not a bit.\" The girls just rolled their eyes. \n\n\"Okay, Shawn, get in there and freshen up a bit, and then join me in the kitchen. Susan is a guest, and we need to treat her well.\" \n\n\"Yeah, Shawn. Your sex shows wear a girl out, so the least you can do is feed me.\" \n\nWe all laughed at that, and soon I was helping Laura get a snack put together. We got it served, and Susan looked up while eating. \n\n\"So this is what you do with each other? Just go at it like rabbits?\" \n\n\"Pretty much,\" Laura replied, to laughs all around. \"It's not like you don't already know.\" \n\n\"It's one thing to talk about it, and another to see it. Laura, you're getting the best sex possible, and like all the time. And I'm not even going to discuss how lucky Shawn is.\" \n\n\"Susan, we both know how lucky we are,\" I replied. \n\n\"At least you appreciate it. By the way, are you naked all the time you're together?\" \n\n\"Not all the time,\" Laura shot back. \"I have standards, like when it's too cold.\" \n\nSusan just rolled her eyes. \"Gag me.\" \n\nWe got through the rest of the meal with more lighthearted banter, then Laura took charge. ",
        "\"Now that we've refreshed ourselves, I'm guessing that I can coax Shawn into one more performance. But it would probably help to have a little extra visual stimulation, especially from the 'super-hot' BFF. Susan, are you okay with us facing you this time?\" \n\n\"Pimping my charms out so you can get one more big O?\" \n\n\"Hell, yes.\" We all cracked up. \n\n\"You're on, Super Brain. I get a big O, too.\" \n\n\"That's the idea, girlfriend.\" \n\nWe trekked back upstairs and let Laura position us. This time, she stood facing Susan and motioned me behind her. \n\n\"Since you think Susan is super hot, you have permission to look all you want,\" she instructed. \n\n\"That turn you on, naughty girl?\" \n\n\"It kind of does.\" \n\nMy cock hardened at this admission, and Laura felt it climb up past her butt. She giggled and twisted her waist to capture it between her ass cheeks, pressing back to grind against the sensitive underside. I groaned, and she giggled again. I looked up into Susan's amused eyes. \n\n\"I told you she was wired for fun, Shawn.\" \n\n\"Kind of an understatement,\" I replied. Susan winked while a shiver went through Laura. \n\nIt was time to heat up my wired-for-fun girlfriend, and fortunately I had learned a thing or two in the many nights we had spent together. I leaned down and ran my lips over her sensitive neck, and she groaned. I kissed all over the territory from one shoulder to another, and soon she was writhing with need, leaning harder into me as it became harder to stand. I chose this moment to cup the underside of her breasts in my hands, and she moaned in submission. \n\nI looked up into Susan's eyes, and they reflected the passion in my girlfriend. Laura was letting Susan see her completely on display, naked in both body and spirit. \n\nI massaged Laura's breasts and rasped my palms over her nipples. They quickly hardened, and I added little twists and pulls to the mix. Susan started doing the same, and my cock hardened between the cheeks of Laura's ass. She felt it, and twisted her head to murmur in my ear. \n\n\"She is hot, isn't she Shawn? I can feel you getting hard. It's okay\u2014that's the idea. Soon I'm going to bend over and have you ram me from behind while we both watch Susan get herself off.\" \n\nMy cock was now rock hard. I let my hand wander down and trace around the sides of Laura's pussy. She shuddered, and I could feel the heat. My fingers traced inward and encountered her swollen, pulsing inner lips. Laura groaned and bucked into my hand. \n\n\"Let's get up on the bed before you make me cum right here,\" she whispered. I chuckled and held her hand while she climbed onto the sheets. I slid in behind her again, both of us on our knees. I played with her nipples and pussy a little more, then she bent forward and settled on her forearms, right in front of Susan. \n\n\"Inside me, Shawn.\" \n\nI eagerly complied, lining up my cock and slowly pushing into Laura's boiling depths. Then I looked up, right into Susan's lust-filled eyes. She spread her legs, opening her glistening pussy to my gaze. \n\n\"You look so sexy, Susan,\" I told her, and Laura purred beneath me. \n\n\"That's it, Shawn. Let her know. Ravish her with your eyes.\" \n\nSo I did, and Susan smiled while her fingers traced along her pussy lips. The other hand fondled a breast, and the fingers occasionally twisted and popped her very erect nipple. \n\nBut my attention shifted to the incredibly hot woman writhing on my cock. Laura's pussy caressed every ridge, her fiery pleasure flowing to me. She also started bucking back, so I pushed harder. \n\n\"Yes!\" Laura exclaimed. \n\nSusan laughed. \"You look hot, girlfriend. Ride that cock.\" \n\n\"Can do,\" Laura answered. \"How's Shawn looking back there?\" \n\n\"What do you think? Like he won the lottery.\" Both girls laughed. \n\n\"He has me kind of defenseless,\" Laura confided breathlessly. \"He could put his hands anywhere, and I couldn't stop him.\" \n\nSusan looked up at me, a wry challenge in her eyes. What you gonna do with that, big boy? was what she seemed to be saying. \n\nI thought I knew what my wicked little girlfriend wanted, but I wasn't totally sure. Isn't it always that way? But she had given me wide latitude with her statement, so I decided to make a bold move. \n\nI made a big show of wetting my thumb in my mouth. Susan's eyes went wide. Then I dropped it to rest directly on Laura's anus. \n\n\"Oh, God!\" she moaned, then she arched her back to give me better access. \n\nI pushed, and I felt Laura relaxing herself. She wants this. My cock throbbed with the realization. My thumb slowly descended into Laura's boiling depths. For her part, Laura just moaned continuously and wriggled her hips to encourage me in. \n\nI finally hit bottom, and Laura hummed her approval. \n\n\"Now fuck me, Shawn. Hard.\" \n\nA huge wave of erotic energy went through me. Laura had never, ever, been this wanton. I grabbed her hips with my other hand and slammed my cock into her. \n\n\"Yes!\" she grunted. Her hand snaked back between her legs, and my balls felt her twitching fingers work her pussy. I looked up to Susan, and she had a stunned expression on her face. But that didn't keep her from intently watching the scene in front of her and frigging her pussy in response. \n\nFor my part, the two prior orgasms of the day receded into the background while my body buzzed with heat. I knew I would explode a third time today into the incredible woman below me. My hips drove into Laura, our skin slapping together and the pressure further ramming my thumb into her throbbing ass. Laura matched my motions, her voice reduced to grunts and whimpers of pleasure. \n\nThen Susan took it up another notch. Pulling a leg up, she propped her foot on the chair, wet her finger, and reached behind herself to probe her ass. \n\n\"Fuck, Susan, that's hot,\" Laura grunted. \n\n\"Guess who got me started with their stories,\" Susan answered, and the two girls shared a laugh. \n\nThen we all got down to riding the wave of pleasure we had created. It didn't take long. Laura tensed up first and yelled out while her back arched up and her pussy clamped around my cock. She came in a series of wracking moans, and her anus pulsed around my thumb with each wave that rocked through her. \n\nThat caused my orgasm to rush for me, and I surrendered with a yell and twitched through a powerful orgasm of my own, my cock throbbing with each spasm into Laura. \n\nSusan watched both of us, then threw her head back and groaned while her body jerked through her own release. I studied every detail of her fingers rubbing hard, then soft, then harder again as she teased out every thread of a magnificent orgasm. Her other hand was jammed against her ass, her finger rammed to the hilt. Eventually, she slumped back, drained. \n\nMy attention snapped back to my girlfriend, who was catching her breath. She still gently pushed into me. \n\n\"That was simply incredible, Laura,\" I said. \n\n\"Way incredible,\" she answered. \n\nSusan answered, her head still slumped down. \"That was the hottest thing I will ever see in my life.\" \n\nI felt a little chuckle run through Laura. \"We're all pretty young. Probably early to say what the hottest thing will be. You never know.\" \n\n\"With you as a friend, Laura, that may just be true.\" \n\n******* Epilogue ******* \n\nLaura and I did experience some times that rivaled that one, but they happened later in life. We went to college, decided to go our separate ways to broaden our horizons, and then reconnected a few years after graduation. After dating several other women, I knew that Laura was special to me, and she felt the same. Susan remained a friend for life, and I think we showed her and her husband some pretty hot times that made her reconsider her statement. \n\nSometimes, Laura and I reminisce about how we got together. It took an experiment gone wrong in the chemistry lab to bring two nerds together, but that also started a chemical reaction between us that never stopped. \n\n**** The End **** \n\nAs authors, one of the greatest rewards is getting comments on our work-it's what drives us to write more. How did this story make you feel? What does it make you think of? How did it affect you? Please take a moment to vote and offer comments, or click the link to send me personal feedback\u2014I'll even respond! It means a lot."
    ],
    "authorname": "Antonio_y_Cleopatra",
    "tags": [
        "first time",
        "friends",
        "nerds",
        "romance",
        "school",
        "romantic"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-super-brain-is-super-sexy"
}
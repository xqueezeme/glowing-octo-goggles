{
    "title": "Age Really is Just a Number Ch. 04",
    "pages": [
        "Kasey spent Saturday night with me as well as Sunday morning. She'd left my house about 3 to meet her study group. She apologized saying that she probably wouldn't be at the gym until probably Friday.\n\n\"I'm sorry that I can't make it,\" she said as she was packing to leave. \"I really want to be there.\"\n\n\"Baby, no. You need to take care of school first, I understand. That will always come first. The gym will be there when you have time. We'll get your time in when we can,\" I replied. She smiled thinly and walked into my arms when I extended them. We hugged tightly. \"It's going to be okay, baby.\"\n\n\"I know, I just want to be there. Friday night was amazing. I can't wait to get back in. I feel awesome being around all of the strong people there,\" she said.\n\n\"You're gonna fit in just fine,\" I smiled.\n\n\"I hope so,\" she smiled before we kissed.\n\n---\n\nAfter the Sunday night workout, Shana stayed behind to help me clean up since Joel had an early flight the next morning. Shana and I talked as we worked, and she kept throwing good natured comments at me about Kasey. Finally, she turned serious.\n\n\"You need to get her to stick around,\" she said.\n\n\"You think she'll fit in okay,\" I asked.\n\n\"Yeah, of course she will,\" Shana replied with an eye roll. \"She's got a great attitude and she's already so strong. A year or so with you and Joel, she could be among the strongest girls in the world.\"\n\n\"Yeah, she could,\" I agreed.\n\n\"And I liked how you threw around heavier weight the other night than you have in months,\" Shana laughed.\n\n\"Yeah, maybe so,\" I agreed.\n\n\"She'll push me. I need another chick in here since Kate moved to the morning crew. It was always Marsha, Kate and me,\" Shana said quietly. \"I can't imagine where I'd be if you all hadn't saved me.\"\n\n\"I know Shana,\" I replied. I remembered the three of them working together. I felt my emotions getting the best of me as I remembered how Marsha, Joel and I helped Shana from Day 1. She was the first of our \"rescues\". She'd lived on the streets for a couple of years and was hooked on heroin when we'd found her near overdose one morning in front of the gym. Marsha, who was a saint through and through, immediately got her help. She told me she wanted to bring her to the gym as she knew it would help Shana, when she finished treatment. Joel and I agreed as we trusted Marsha's judgement.\n\nI thought back to our first days in the gym with Shana. Everything was so hard for her as she fought through her lingering addiction, as she fought to regain control of her body. A few weeks in, she turned a corner and the mental strength she'd always possessed came out. It was amazing to watch. She took to the training we'd given her, and she worked harder each week. Soon, she was helping others in workouts. It took her longer to get her personal life in order and she stayed with Marsha and I for almost 6 months, before she found a steady job and got on her feet. She moved in with Alicia from the gym, and things finally were going good for Shana.\n\nMy mind drifted to Kasey and I immediately thought of what Marsha would think about me \"helping\" her. It was different than Shana obviously. She was headed towards being statistic when we found her. Kasey, on the other hand, was completely different. She was headed along a much brighter path than Shana had been offered. The thoughts that I was sure I'd put aside returned. Was I helping Kasey with anything beyond making love to her? The only thing she lacked was confidence in her body and she looked like she would melt anytime I complimented her. I was using the wisdom of my years to reassure her and treat her differently than she'd previously known. She's putty in your hands, I reminded myself ashamedly. I couldn't keep doing this I thought. I was taking advantage of a young woman that reminded me of my late wife when she was younger. But despite the short time frame and my own doubts, I realized I had strong feelings for her. Telling her I couldn't see her anymore wouldn't be easy. I suddenly found myself on the verge of losing it. Shana noticed immediately.\n\n\"Whoa, whoa, hey big boy,\" Shana said. She wrapped her arms around me, and I hugged her close to me. \"I can't have the strongest, toughest fucker I've ever met bawling in front of me. I still need my allusion of a knight in shining armor every now and then.\"\n\n\"I know you do,\" I said as I hugged her ever tighter. \"I've just got a lot of things going right now. Thanks.\"\n\n\"No problem,\" she said slapping my back. \"You all pulled me out of a hole that I never would have left.\"\n\n\"We tried. And you've done well,\" I said.\n\n\"I've tried, Scott. You three were the only people to ever believe in me,\" she replied.\n\n\"I know honey and I'm sorry, but I'll always believe in you. No matter what kind of bullshit you get into,\" I managed to laugh. We finally parted our embrace.\n\n\"I know,\" she smiled, before she became somber again. \"I can't imagine it helps that she's Marsha 25 years ago.\"\n\n\"No, it doesn't,\" I replied as I wiped my face with my shirt sleeve.\n\n\"You shouldn't let that bother you though. She's into you and you're into her. Just enjoy it,\" Shana said. She reached to hug me again.\n\n\"I know honey,\" I said as I hugged her tightly.\n\n\"I gotta go to work,\" she announced.\n\n\"Okay, good luck,\" I said as I released her.\n\n\"It's better now. The cops have been keeping the rowdier fuckers out,\" she laughed.\n\n\"That helps,\" I managed to smile.\n\n\"Oh yeah. Look if you need to talk about things, you know I'm here for you, right,\" she asked.\n\n\"I know. Thank you,\" I said.\n\n\"Forget about it. I'll forever be in you and Marsha's debt,\" she said.\n\n\"Don't look at it that way,\" I said.\n\nShana nodded before she grabbed her things and left.\n\n---\n\nI didn't text Kasey the next few days as I wanted to make sure she was preparing for her exams and I wanted to have time to think things over. Despite the reassuring conversation with Shana, I'd convinced myself I needed to just let her go. It would be easier now than it ever would. I knew the way I was beginning to feel about her, and I expected that she might be feeling the same things. I made a lot of mental notes about how I needed to approach things and how I needed to say them. Despite my best intentions, all my soul searching, and pre-planning evaporated when she texted me about 2:30 Thursday afternoon.\n\n'Hey!!! I'm done. I slayed,' she said.\n\n'Excellent,' I typed. 'You got plans tonight?'\n\n'Yes. Lots of plans. Most involve us being naked,' she typed.\n\n'Okay. I have a few things to finish here. I'll let you know when I'm free,' I replied.\n\nNaturally, that wasn't the end of the conversation. We texted until I left the office at 5. I didn't know what I had in store for me that evening as I'd received several very sexy pictures throughout the conversation. I wondered how guys her age handled all of this. I thought back to when I was that age and was thankful the technology didn't exist.\n\nI got home about 5:30 and saw Kasey already sitting in the driveway. When I got out of my truck, she greeted me warmly with kisses.\n\n\"I missed you,\" she said.\n\n\"I've missed you as well,\" I replied.\n\n\"Come on, let's go inside,\" she offered. She grabbed an overnight bag as well as a grocery bag from inside her car. I unlocked the door and we walked in. She dropped her bags and pushed me against the wall.\n\n\"Someone is the mood,\" I managed to say before her mouth met mine. We kissed ferociously before we finally parted to catch our breath.\n\n\"After what you've done to me and the way you treated me, I think I'm always gonna be in the mood for you,\" she said before she kissed me again just as insistently.\n\nI pulled her towards my bedroom as we continued to exchange ravenous kisses. When we made it to the bed, I pushed her back on it. She fell on her back with her legs spread. Her tight leggings accentuated her mound and I yearned to peel them off her and taste her. She smiled at me wickedly as I looked at her. I moved on top of her and we resumed kissing. My hands roamed her torso which seemed to only be covered by a hoodie and a bra. I pushed up on the hoodie and noticed her bra clasped in the front. I quickly opened it allowing her generous breasts to spill free. I rubbed and kneaded them as I continued to kiss her.\n\n\"Oh Scott,\" she moaned. \"You make me so hot. Making love with you has been all I could think about.\"\n\n\"I know, me too,\" I agreed, even though I'd been doubting our relationship. I moved my hand down across her abdomen and placed it top of her mound. As I cupped her sex through her leggings, I realized she wasn't wearing panties. I looked at her and smiled.\n\n\"I thought you might like that,\" she grinned.\n\n\"I love it, baby,\" I replied. I slipped my hand inside her tight leggings and cupped her bare, wet sex directly. I pushed my middle finger inside and she groaned.\n\n\"Oh, that's good,\" she said. My finger twirled around her clit causing her to writhe on the bed. She grabbed my head and kissed me forcefully. \"I want you so bad!\"\n\n\"I want you too, baby,\" I said. I stood from the bed and unbuttoned my shirt, while she finished removing her hoodie and bra. She kicked off her sneakers and skinned off her leggings. I looked at her needy wet sex and swiftly knelt before her. She smiled broadly as my mouth closed in on her. I ran my tongue through her wetness, savoring her flavor before moving towards her hard, little clit that peeked out from its hood. I lightly teased it causing her to tense and groan.\n\n\"Oh, I've been thinking about this constantly,\" she said.\n\n\"Good,\" I replied as my tongue twirled around her hard, little nub. Her hand found the back of my head and she pulled me tightly against her.\n\n\"Mmmm, that feels so good,\" she groaned. I didn't answer, I just worked on her even more. \"You're not going to have to work too hard if you keep that up!\"\n\n\"Mmmm,\" I groaned as my tongue teased and tormented her love button.\n\n\"Oh, Scott. Oh, don't stop. Didn't stop,\" she panted. I inserted my index and middle fingers in her and began strumming the front wall of vagina. I felt the small lump there and my fingers grazed it in a back and forth motion.\n\n\"Oh,\" she shrieked. \"Right there, right there!!!!\"\n\nJust a few more strokes and she erupted. Sensing what was coming, I'd moved back slightly. It was an impressive display to say the least. I gave her perhaps 5 seconds before I resumed. I didn't bother with my mouth, just continued using my fingers. I kept stimulating her and she experienced perhaps ten orgasms over the following 5 minutes. After the last one, she went limp and any further efforts on my part were futile.\n\nI moved up next to her and pulled her in my arms.\n\n\"Can I just lay here and collapse from exhaustion,\" she said softly.\n\n\"If you want to,\" I said.\n\n\"I may not have a choice,\" she said. \"Were you trying to kill me?\"\n\n\"No, just pleasure you,\" I said.\n\n\"You did that,\" she managed to smile.\n\n\"Good,\" I smiled back at her. She snuggled closer to me and laid her head on my chest. I held her for a long while and neither of us spoke. Finally, she rolled away slightly and looked up at me.\n\n\"Can we have a talk,\" she asked.\n\n\"Yes, of course,\" I smiled. \"I hear they're good for relationships.\"\n\n\"Yes,\" she laughed, but her smile quickly waned. I looked at her closely and asked the obvious.\n\n\"What is baby?\"\n\nKasey: It'd been a long 4 days without seeing him. I was busy and with all my effort, I could keep him blocked out by the organic chemistry reactions and physics formulas in my head and focus on studying. That worked during the day, not so much at night while I laid alone in bed. He was absolutely perfect except for that one thing. I tried to remember the feelings I'd had for Aiden. They were nothing compared to the way I felt for Scott and it hadn't been two weeks. I was getting closer and closer to him with every passing moment. I was falling in love with him. I didn't know if he felt the same way or not. I'd meant to just tell him face to face that I couldn't see him anymore, but the minute he pulled up, all my willpower left me. We'd ended up in bed again and it was perfect like every time before. Now I needed to try to do what I'd came for... \n\n\"Scott, I don't know where to begin really. The last few days I've just been thinking a lot and I, I don't know,\" she said. I felt my breath hang in my chest at what was coming next. Was she having her own doubts?\n\n\"Let's talk through it, Kasey,\" I said. \"It's the only way we can resolve it.\" She nodded but she didn't put any enthusiasm in it.\n\n\"I know, it's just this whole experience has been amazing but you're still so much older than me. I keep thinking that. I mean I suddenly have this wonderful man in my life, and I can't even be honest with my friends about you,\" she said.\n\nI nodded, \"I know baby.\"\n\n\"It also doesn't help that I think I'm falling in love with you,\" she said. My eyes focused on hers and I could see she was about to cry. \"I'm sorry Scott. I thought I could just have fun, but I couldn't. The way you've treated me, everything. It's been like a dream, but it's been wrong for me to think that it would be more than what it is. I'll just have deal to with it,\" she said as the tears began to stream down her face.\n\n\"Baby, no. You're not just gonna deal with it. Come over here,\" I said, pulling her tightly against me. I stroked her back as she continued to sob. I leaned my head down and kissed the top of her head.\n\n\"Kasey, I don't know how to explain all of this, but I'm going to try. Until you texted me today, I had every intention of breaking things off with you,\" I said.\n\n\"You did,\" she sobbed.\n\n\"Yes, I did honey. And I'll tell you why. I'm having the same feelings that you are and I'm old enough to know better,\" I continued.\n\n\"I understand,\" she said sadly.\n\n\"Babe, I've just been thinking about it all. I'm falling in love with a girl half my age and there's no future in it. It's never going to be easier than now, and I don't want to hurt you even worse down the road,\" I explained.\n\n\"I know, but this last week and a half has been amazing. I don't want it to just end,\" she sobbed.\n\n\"Me either baby, but we've both admitted our doubts,\" I replied.\n\n\"Yes,\" she said. She pulled away from me to reach a tissue box beside the bed. She dabbed her eyes and blew her nose. She sat up next to me and we looked at one another for a long moment. I didn't want to keep pressing matters, but with her admission of doubts, I knew that we were on the same page together. She reached over and took my hand in hers, before pulling it in her lap.\n\n\"Scott, I'll leave now if you want,\" she said softly.\n\n\"You know that's not what I want, but it's what we should do,\" I said. She nodded softly.\n\n\"I don't want to,\" she said defiantly. \"I can't just walk away from you, Scott.\"\n\n\"I understand baby, but it's not going to be any easier as our feelings grow for one another,\" I reminded her.\n\n\"I know it won't,\" she replied. \"I'm willing to take my chances.\"\n\nI thought about what she said. I needed to ask her though. \"Are you sure?\"\n\n\"Yes, I'm sure Scott. I love you and I want the time I can have with you,\" she said, nodding her head.\n\nI knew better, but the thought of her being gone from my life scared me, despite us having known one another such a short time. We would just cross that bridge when we came to it. I reached for her and pulled her to me.\n\n\"I love you too, Kasey,\" I said. \"We'll enjoy what we can. I'm not too old to love and lose again.\"\n\n\"I don't want you to look at it quite like that, but thank you,\" she managed to smile. Her lips moved to mine and we shared a soft kiss, followed by another and another. The continued to build and she quickly got on top of me. Our kisses grew in passion and I found myself getting more excited.\n\n\"I love you and want you,\" she said.\n\n\"I love you and want you too, baby,\" I agreed. Kasey reached between us, her hips moved, and I was inside her. Now that it was in the open, we both stated our love for one another repeatedly.\n\n\"Oh,\" she groaned and began moving against me. \"It feels so good.\"\n\n\"Yes, it does,\" I said as I reached up to caress her cheek and neck. \"You're so beautiful, Kasey. I love you.\"\n\n\"I love you too, Scott,\" she replied. My hands moved to her breasts and I cupped them as she slowly rode me. I began lightly teasing her nipples and her eyes widened in pleasure.\n\n\"You know you drive me crazy when you do that,\" she asked.\n\n\"Of course, I do,\" I smiled.\n\n\"Oh, Scott, oh,\" she moaned and I felt her gush against me. I continued rubbing her nipples and it was not 30 seconds before it was followed by another and another.\n\n\"That's so beautiful,\" I said to her softly.\n\n\"Yes, it is. I love that you can reach me like that,\" she replied.\n\n\"Mmmm, me too,\" I said.\n\n\"It doesn't have to be about me all the time,\" she said.\n\n\"I know it doesn't, but I love making you feel good,\" I said.\n\n\"It would make me feel good if you were on top,\" she smiled.\n\n\"Okay,\" I smiled. I arched my back and came down on top of her. I quickly re-entered her and began slowly stroking in and out of her wetness. We kissed passionately before I raised myself up and leaned back on my heels. I brought her shapely legs in front of my shoulders and I began kissing her soft feet.\n\n\"Mmmm,\" she purred. \"I love that.\"\n\n\"You do, huh,\" I asked.\n\nShe quickly nodded. I took her left foot in my hands and began kissing her toes. They were painted a sparkling red. Soon, I was sucking them and I could see her eyes widen.\n\n\"I never imagined that,\" she said. I looked at her intently as my tongue lapped greedily at her little toes all the while, I continued to slowly fuck her. I moved to the right foot and she merely shook her head and she watched me. My right hand moved between us and I lightly rubbed her clit. She closed her eyes and groaned as I gently strummed her most intimate area.\n\n\"It's going to happen again,\" she said.\n\n\"Good baby,\" I replied. \"I'm close, too.\"\n\n\"Mmmm, good. I want you to cum, Scott,\" she cooed.\n\n\"Uh huh,\" I agreed.\n\n\"Oh, Scott. Oh, I'm getting close,\" she said.\n\n\"Don't wait for me, baby,\" I assured her. I increased the intensity of my thrusts and I realized how close I was myself. I rubbed her clit more firmly and her hips bucked off the bed.\n\n\"Oh, fuck, Scott,\" she growled. That pushed me over the edge, and I began cumming deep inside her wetness. I pushed my cock as deeply as I could inside and her fell forward on top of her, catching myself with my hands. As she caught her breath, she reached for me and we exchanged racking, soul-twisting kisses. We writhed on the bed in the afterglow with me finally pulling her on top of me. Our hands continually touched one another before we finally made eye contact. She smiled softly.\n\n\"What,\" I asked.\n\n\"I think I'm gonna like make up sex with you,\" she giggled.\n\n\"Me too, but let's try to keep it to a minimum,\" I suggested.\n\n\"Yes, please,\" she said. \"Do you have anything to do tonight?\"\n\n\"You're looking at it,\" I smiled.\n\n\"That's a nice thought,\" she replied.\n\n\"Do you,\" I asked.\n\n\"No, I don't have class tomorrow. It's physiology and the professor sent an email saying our exams aren't ready, so she gave us a pass,\" she explained.\n\n\"That's good for you,\" I smiled.\n\n\"Do you have to work tomorrow,\" she asked.\n\n\"Baby, that's the beauty of being self-employed. I never 'have' to work, but in order to remain self-employed, I usually do,\" I laughed.\n\n\"That makes sense,\" she smiled.\n\n\"Would you like to do something together,\" I asked.\n\n\"Of course, I would,\" she smiled again.",
        "\"I'm sure we can come up with something,\" I replied.\n\n\"So am I,\" she agreed. \"I don't mean to be imposing, but were you planning to eat tonight?\"\n\n\"I thought I might have a bite, yeah. Are you trying to say you're hungry,\" I laughed.\n\n\"Starving. The last thing I ate was a bagel at 10:30,\" she said. I reached down and gave her amazing ass a playful swat. She looked at me in surprise.\n\n\"You don't need to be told you that's not a proper diet for a young weightlifter, do I,\" I asked.\n\n\"No, you don't. I was just nervous about my organic exam,\" she said.\n\n\"I understand. Let's go, I think I can scratch us something up,\" I smiled.\n\n---\n\nI made us each an omelet and we sat at my kitchen table watching the sunset as we ate. Neither of us bothered dressing, so after we'd finished, our hands roamed one another's bare skin.\n\n\"You keep that up, I'm going to be feasting on you on this table,\" I said.\n\n\"How do you know that's not what I want,\" Kasey smiled.\n\n\"I'll get you my pretty,\" I said in the best wicked witch voice I could summon. She looked at me confused. \"What? Never seen The Wizard of Oz?\"\n\n\"No, I guess not,\" she laughed.\n\n\"Okay, you'll have to see that one sometime. It was one of my favorite movies growing up,\" I explained. She picked up her phone.\n\n\"God, you're not that old,\" she said.\n\n\"It was kind of cult favorite,\" I explained. \"They used to play it once a year on one of the major networks.\"\n\n\"Very interesting,\" she smiled at me. \"Have you ever seen Finding Nemo? It was one of my favorites.\"\n\n\"Can't say I have,\" I grinned.\n\n\"We should have movie night this weekend, then,\" she laughed. She got up from her chair and sat in my lap.\n\n\"I'd love that,\" I smiled as I wrapped my arms around her.\n\n\"Me too,\" she said returning the smile. \"It's dark outside, you think we can get in the hot tub?\"\n\n\"I think we could,\" I replied.\n\n\"Let's go then,\" she said.\n\n---\n\nThe hot tub was just a precursor to more wonderful lovemaking and it was almost midnight before she snuggled up against me and fell asleep. I held her for a brief period thinking about what we could do the following day. I finally decided on taking her hiking to Emerald Falls. That would be perfect I thought. I soon drifted off myself.\n\nI'd forgot to turn my alarm back before I fell asleep, so it was a bit of a jolt when it went off at 5 AM. Kasey quickly bolted up and in a semi-confused state said, \"Oh, I'm late for class!\"\n\n\"Baby, whoa. You're not late for anything. I just forgot to reset my alarm,\" I replied.\n\n\"Oh, okay. I was worried. That's my backup alarm sound,\" she smiled.\n\n\"Damn technology,\" I said.\n\n\"So, we're awake,\" she said, snuggling back against me.\n\n\"Yes, we're awake. I've thought of something to do today,\" I said as I wrapped my arm around her.\n\n\"Oh, really,\" she said looking up at me.\n\n\"Yes, I'm going to take you to Emerald Falls,\" I said.\n\n\"Where's that,\" she asked.\n\n\"It's pretty close, just about an hour away. It'll take us an hour or so to hike back to it,\" I explained.\n\n\"This sounds great. Is it really pretty,\" she asked.\n\n\"It's beautiful baby. Almost as beautiful as you are,\" I smiled.\n\n\"I love you, Scott. I know you mean it and it just makes me melt,\" she said as she laid her head against my chest.\n\n\"I love you, too,\" I replied as I stroked her hair.\n\n\"Will we get back in time for gym tonight,\" she asked.\n\n\"Yeah, of course,\" I replied.\n\n\"We should probably get moving then,\" she said.\n\n---\n\nAfter a long shower together, we were on the road by 6:30. The falls were easterly facing so they were most beautiful in the morning. While Kasey finished getting ready, I made sandwiches and everything else for a light lunch. I prepared us both a protein and caffeine packed shake for the drive. She walked in the kitchen just as I was stuffing everything into two backpacks.\n\n\"Are we ready to go,\" she asked.\n\n\"Yeah, I think so. You have your choice of vanilla or chocolate for breakfast,\" I said.\n\n\"I'll always be pro-chocolate,\" she laughed. I handed her the chocolate shake. She took a sip. \"Oh, wow. I think I need the recipe.\"\n\n\"Easy now,\" I smiled. \"The recipe is top secret.\"\n\n\"I think I can get it out of you,\" she said confidently.\n\n\"We'll see,\" I replied.\n\n\"Yes, we will,\" she said as she pressed herself against me. Her hand grabbed my soft cock and squeezed it through my shorts.\n\n\"You're getting very forward,\" I smiled at her.\n\n\"You're the one to blame. I was a pretty good girl until a couple weeks ago,\" she laughed.\n\n\"You're still a good girl. You're just developing some lusty edges,\" I laughed.\n\n\"Lusty edges,\" she smiled. \"I like that.\"\n\n\"Come on, you little devil,\" I said, taking her hand.\n\n---\n\nThe drive up to the falls was enjoyable as we held hands and she filled me in a little more on the details of her life. Her mom and dad divorced when she was in middle school. Her mom still lived in California and remarried the summer after Kasey's freshman year of college. She hadn't visited her mom or stepdad the previous Christmas.\n\n\"He's a complete asshole and I don't feel welcome there,\" Kasey explained. \"I went back for Thanksgiving and he was immediately reminding me that I was only visiting, and I needed to be respectful of their privacy now that I was away at school.\"\n\n\"How did your Mom take that,\" I asked.\n\n\"In her usual way these days,\" Kasey replied. \"She shrugged her shoulders and walked away when I confronted her about it.\"\n\n\"I'm sorry,\" I explained.\n\n\"It's not your fault, Scott,\" she smiled.\n\n\"What about your dad,\" I asked.\n\nShe took a deep breath before she began. \"I don't know what to think about him. After they got divorced, he moved to Ft. Lauderdale and opened a restaurant. He was an attorney and from my grandmother told me, a really good one. Mom apparently had a boyfriend and he was crushed as he'd always tried to make her happy. He just lost it, I guess. He's doing really well now, and seems happy. He flies me down there whenever I want. He texts me nearly every day.\"\n\n\"That's nice at least,\" I said, as I looked over and smiled at her.\n\n\"Yeah, it is,\" she smiled.\n\n\"He hasn't remarried,\" I asked.\n\n\"No, he hasn't,\" she laughed.\n\n\"What's so funny,\" I asked.\n\n\"The women he dates,\" she said with a smile.\n\n\"What about them,\" I asked.\n\n\"They're usually not much older than me,\" she replied.\n\n\"Oh,\" I said.\n\n\"Yeah, it's funny really. I was worried about falling in love with you and Daddy dates younger women all the time,\" she said. \"I guess a lot of my issues were with what my mom might think.\"\n\n\"That's certainly not something to be ignored. I don't know what she'd think,\" I replied.\n\n\"Me either,\" she said quietly. \"But I'm not going to care about it. My dad is paying for my school, not her. After the way she's acted, I'm done.\"\n\n\"I'm sorry you feel that way, but there's not much you can do about it,\" I replied.\n\n\"No, not really,\" she agreed.\n\n\"As for your dad, I don't know his thoughts. People can have fun with one another and not get entangled. I've never been that way unfortunately.\"\n\n\"I guess I haven't been either. Granted, I've not had a lot of experience in these things,\" she replied with a smile.\n\n\"I understand. I was with the love of my life until I lost her. Now, I'm looking at you and wondering,\" I said.\n\n\"About what,\" she grinned.\n\n\"Just wondering where this will all go,\" I said. I saw the look on her face and I quickly smiled, trying to alleviate the seriousness I saw. I added, \"we'll give it some time. You may be sick of me next week.\"\n\n\"Whatever! You may be sick of me,\" she smiled.\n\n\"We'll probably be fine unless you turn into a big pain in the ass,\" I smiled.\n\n\"I'll try not to,\" she laughed.\n\n\"\"Good,\" I laughed. \"The trailhead is just around this bend.\n\n\"Okay,\" she smiled.\n\nI pulled off the road and parked the truck. There were no other cars, so I knew we'd probably have the view to ourselves at least for a little while. We got of the truck and after we had our backpacks on, we started up the trail. It was a well-groomed trail, but there was enough elevation change that the casual sightseer didn't venture in too far. As we walked, she took my hand. I looked over and smiled at her.\n\n\"Is this a good way to spend your day off,\" I asked.\n\n\"I think it's perfect. I've been wanting to do something normal with you,\" she laughed.\n\n\"You thought you were some plaything I was hiding away,\" I smiled.\n\n\"No, but you know what I mean. We're going to have people look at us weird,\" she said.\n\n\"Oh, I know that for sure. We'll just have to decide whether we'll let it bother us, baby,\" I said.\n\n\"Yes. We will,\" she smiled. As we continued up the trail, she asked me more about my life. In approximately 30 minutes, I told her all the important details. I'd been an only child as well. I lost my Mom in a car accident when I was in college. My dad had a fatal heart attack in early 2016. Marsha started her last round of chemo barely a month before. She made it another 3 months. Kasey's fingers were intertwined in mine and gripped them tighter as I related each note of sadness. Finally, she stopped on the trail and wrapped her arms around me.\n\n\"I'm so sorry,\" she said, as I heard her begin to sob.\n\n\"Baby, please,\" I said, as I wrapped my arms around her and began softly rubbing her back. \"It's just a part of life. I wish I'd had them all for many more years, but I didn't. The time I had with all of them was special and I will never forget it. Each ending can be a new beginning.\"\n\nShe looked up at me and I stroked her hair. I could see the tears streaming down her face behind her glasses. I reached up with my forefinger and wiped them away, before I licked them from my finger. She looked at me quizzically.\n\n\"Why did you do that,\" she asked.\n\n\"To take away your pain,\" I said.\n\n\"Oh, Scott,\" she said, before she hugged me ferociously.\n\n\"We're gonna be okay baby,\" I said. \"Let's just keep moving forward with each other.\"\n\n\"Yes, that's what we can do,\" she said softly. She released me and looked up the trail. \"Are we getting close?\"\n\n\"Yes, we are,\" I smiled.\n\n\"Show me,\" she replied. I nodded and took her hand.\n\n\"I love you,\" she said.\n\n\"And I love you.\"\n\n---\n\nWhen we made it to the falls, it could not have been more perfect. There was just a slight rise in the trail where you could hear the water rushing but you still couldn't see it. A few more steps and you were on this cliff looking at one of the true little wonders in the world. The water fed from an underground spring and was unique in that it never ran dry or froze. The water flowed through and dissolved several different rock formations, so by the time it cascaded down the falls it had a greenish hue, especially in the morning sunlight, which was just right that morning.\n\n\"Wow, it's beautiful,\" she smiled.\n\n\"Yeah, it is,\" I replied. \"I knew you'd like it.\"\n\n\"I love it,\" she smiled again. I took her hand and led her down the slope to the base of the falls. I reminded her to watch her footing as the rocks became increasing wetter. Finally, we stood next to the pool where the waterfall landed. I reached down and felt the water which was quite warm compared to the morning air.\n\nKasey: It was the most amazing spot. I'd been in school for over two years at U of A and I'd never heard of this place. There were lush pine trees, rocks and this beautiful waterfall. I was sure Scott had taken Marsha there and that he was probably thinking of her. I didn't want him to be dwelling on that. I wanted us to make our own memories. \n\n\"It looks perfect for swimming,\" Kasey said, pointing to the pool.\n\n\"It's not bad,\" I said.\n\n\"Really,\" she asked.\n\n\"I've been in there a few times,\" I laughed. \"It might be a little cold this morning, though.\"\n\n\"Come on, where's your sense of adventure,\" she asked.\n\n\"Don't challenge my manhood,\" I smiled.\n\n\"I love your manhood,\" she laughed. I shed my backpack and reached for the bottom of my hoodie before pulling it and my t-shirt off. Kasey watched me intently as she shrugged off her own backpack. I wondered about the possibility of other hikers coming along and catching us, but I could see the look in Kasey's eye. She yearned to do something adventurous. I kicked off my shoes and socks before I dropped my shorts. She looked at me and smiled, before she began undressing herself. First her shoes and socks, followed by her hoodie and her leggings. She peeled off her sports bra, leaving her standing in front of me in just her tiny blue thong. Her nipples were rock hard in the cool morning air.\n\n\"You missed something,\" I smiled.\n\n\"I was waiting until you jumped in,\" she laughed.\n\n\"If that's the price,\" I smiled. I jumped into the pond and just barely touched bottom. As I remembered, it was bowl shaped as the falling water slowly eroded the sandstone at the base of the falls. The water felt warm compared to the air, but only slightly. I looked at Kasey on the rock ledge above me.\n\n\"Is it cold,\" she asked.\n\n\"Only one way to find out,\" I smiled deviously.\n\n\"I was afraid of that,\" she smiled back. I saw her hook her thumbs in the waistband of her thong. Suddenly, she was naked. She looked at me with interest as I treaded water in the deepest part of the pool. I could see the indecision, but finally she stepped towards the edge and jumped in. I swam towards her and wrapped my arms around her as soon as she surfaced.\n\n\"It's not bad,\" she said with more enthusiasm than she should have felt.\n\n\"It's going to be cold when we get out,\" I reminded her.\n\n\"We'll just have to stay close to one another,\" she replied. She wrapped her strong legs around me and used them to pull my hips to hers.\n\n\"Yes, we will,\" I said before I grabbed her wet hair and pulled her towards me. The kisses we exchanged were beyond description. The passion and intensity were unlike anything I'd experienced. As we continued kissing, I found myself foundering and began pushing us towards one of the walls, away from the spray of the falls. When I made it, I could feel the wall was very smooth from the constant flow of water. I pushed Kasey against it, and I managed to get my hand between us to direct my cock towards her most intimate place. I pushed forward and entered her. Her legs squeezed me tighter and we began fucking in the shallows of the pool.\n\n\"Nnnnggggghhhh,\" she groaned as I began fucking her more forcefully.\n\n\"Yes,\" I said in agreement. \"It feels so amazing!\"\n\n\"Fuck me, Scott,\" she panted. \"You make me feel so good. Oh!!!\"\n\nI could tell from the wild look in her eyes that she'd gotten off. I smiled briefly before I moved my hands from her back to her breasts. Her nipples were soon in my hands, and the wildness in her eyes increased. I massaged them softly before increasing pressure. When I squeezed them tightly, she came again and again in almost a rhythmic cycle. She began pushing herself to meet me, which I absolutely loved. I kept thrusting into her tight wetness, rewarded by her continuing to orgasm. After 6, I lost count as I was getting close myself. I'd always convinced myself I had superior stamina, but it didn't matter with a sexy 20-year-old that was truly coming in to her own. Finally, I couldn't take it anymore.\n\n\"I'm gonna cum, baby,\" I said. It felt like she was literally sucking it out of me!\n\n\"God, it's about time,\" she panted.\n\n\"Nnngghh, oh fuck, I love you\" I groaned, not caring that anyone within a half of a mile could have heard me.\n\n\"I love you, too,\" Kasey shrieked. Her hands clawed at my back as I thrust my cock in and out of her a few more times. \"That was unbelievable.\"\n\n\"Yes, it was,\" I agreed. We kissed and caressed until I realized her teeth were beginning to chatter. \"Come on, we better get out.\"\n\n\"If we have to,\" she whined.\n\n\"You're going to turn blue if we don't,\" I insisted.\n\n\"Fine,\" she said as she reached for my hand and I pulled her up to the ledge we'd left our clothes on. It would have been comical to watch us, as we both hastily dressed since the air temperature was much lower than the water. Finally, we were both clothed and I suggested we hike a little further to warm up. Kasey readily agreed and we walked off hand in hand.\n\nWe found a quiet place that looked like a great place to have lunch. It was next to a large rock outcrop, with views of mountains in all directions. I spread out a blanket I'd brought. Before we sat down, Kasey took me in her arms, and we kissed.\n\n\"Thank you,\" she said as we parted. I smiled at her briefly.\n\n\"You're more than welcome,\" I said.\n\nAfter we sat, I pulled out the sandwiches I'd prepared and we both began eating. I kept noticing her smiling as me, and I reached over to caress her legging covered thigh each time she did.\n\n\"What are you thinking,\" I finally asked.\n\n\"It's nothing really,\" she said.\n\n\"I think it is,\" I continued. She shrugged her shoulders.\n\n\"I don't know, that just really meant a lot to me earlier. I figured you'd been there with Marsha and now you had memories with me there, too,\" she said.\n\n\"Baby, no. That's not the case, we never went there,\" I said.\n\n\"Really,\" she asked.\n\n\"No, never. Marsha hated hiking,\" I laughed. \"She was a city girl, I could never convince her to come up here. After she passed, it's been a place I've came to make sense of things.\"\n\n\"Oh, I see,\" she said. I could see the sparkle in her eyes and the recognition that we'd shared something new to both of us.\n\n\"You like that don't you,\" I asked.\n\n\"Yes. So far, it's been you showing me new things and new experiences. I got to do it for you this morning,\" she beamed.\n\n\"You certainly did,\" I grinned.\n\n\"I love that,\" she replied.\n\n---\n\nWe hiked some more before I realized we needed to start back. I'd given too many lectures about being on time, I certainly wasn't going to be the one that was late. When we made it to the gym, I saw Joel and Shana were already there. I parked and we shared a quick kiss before walked to the door. When I held it open, I could hear that Joel had the latest Slayer album cranked up. I led Kasey over to where Joel and Shana were stretching. Joel looked at me curiously but didn't say anything. I studied the smile on Shana's face. It was directed solely at Kasey. When I turned to Kasey, I saw her smiling at Shana equally. So much for secrecy I thought.\n\nWe stretched and then moved to our individual groups. Like last week, I took Kasey and Shana. I had them do some additional shoulder work before we moved to the bench workout. Shana's intensity was even more intense than the week before. Kasey seemed to feed off it, and the two of them pushed one another. I spotted them both, but I found that I scarcely got a chance to offer encouragement as they were giving each other all they could handle.\n\nWith Shana's encouragement, they loaded 225 on the bar again for Kasey. She looked at it uneasily and Shana took her off to the chalk bowl before she began coaching Kasey. Despite all of my experience with lifting, I'd realized there was never anything more powerful than one strong woman encouraging another. I could show them proper form and how to train, but Marsha could encourage Shana and the other girls to push themselves further than I ever could. I watched as Shana grabbed Kasey in a bear hug and they slapped their hands on each other's backs, causing a small cloud of chalk dust.\n\nKasey walked back to the bench much more confident than she'd left it. She tightened her belt and slapped my hand before laying on the bench. I nodded and admired her seriousness. After she laid back, she grabbed the bar with a vengeance and nodded her head. I helped her lift it out, before slowly letting it settle above her. I moved my hands, and she lowered the bar to her chest, before confidently pushing it back up.",
        "\"Come on. That was good form. Stay tight,\" Shana barked. \"Let's get more.\"\n\nWith equal confidence, Kasey quickly stroked out another rep. Standing above her, I could see the excitement on her face, knowing she'd done something she hadn't done the week before.\n\n\"Come on babe, you've got at least one more in you,\" I said. She nodded and lowered the bar to her chest once again. It seemed to stick. Shana and I instantly started cheering Kasey on. The bar moved slowly, but it was still moving. I kept my hands ready to grab it if need be, but I wouldn't touch it until it was absolutely necessary. I wanted her to know that she'd done it. Kasey kept grinding and with all her effort, she was able to lock it out. After I helped her rack it, she practically leapt of the bench. She hugged Shana first before coming to me.\n\n\"I can't believe I did that,\" she said breathlessly.\n\n\"Believe it, you did it, babe,\" I smiled. \"You've done something a handful of women will ever attempt and you're just getting started.\"\n\nHer smiled was amazing and we hugged tightly. She looked up and gave me a quick kiss.\n\n\"Ugh hmmm,\" Shana groaned. \"If you two can quit making out, I'd like to try a rep at 265.\"\n\n\"Yes, ma'am,\" I said, moving to get the necessary plates. Kasey headed towards the other plate rack. Shana walked behind me and gave me a firm swat on the ass. \"What was that for?\"\n\n\"That was a reminder that I want to see you lift hard for us tonight. I may not end up under you later like she will, but it still gets me so fucking hot watching you lift,\" she laughed.\n\n\"I'll see what I can do,\" I said.\n\n\"You better,\" she smiled, as she walked on to the chalk bowl.\n\n---\n\nAfter we finished, there was the usual Friday night beer and bullshit session. Joel held court as was custom. Being an attorney, he loved being in front of a crowd talking. Kasey sat close to me and there was no mistaking the things that'd occurred between us since the week before. Joel went out of his way to mention her and make her feel welcome. I knew my oldest friend and I would need to have a talk as I was sure he was wondering. As things wound down, each member talked about which meets they intended to compete in the coming months. It was something we expected of everyone that trained in our gym. You worked out in our facility, you competed. No questions asked. I'd taken advantage of the policy since Marsha passed, but I knew it was a matter of time before Joel would remind me. Shana went first.\n\n\"I'm going to the State meet. I want to qualify for Nationals early, so I can start getting ready for Worlds,\" she said confidently. Each lifter afterwards stated their own goals. Joel had his legal pad and was taking notes, as he and I went to every meet we had lifters entered. He called Kasey's name last and I turned to her expecting to see shock on her face. Instead there was a look of confidence.\n\n\"I'm going to State and I plan to qualify for Nationals,\" she said firmly. Shock didn't fully encompass my emotions. She finally turned to me and smiled. I quickly turned to Shana sitting on my other side. She ran her fingers through her purple hair and shrugged her shoulders. I continued to look at her.\n\n\"What? She's strong enough. She needs to get a meet under her belt,\" Shana said.\n\n\"Okay,\" I said.\n\n\"And you need to enter the meet too,\" Shana said firmly.\n\n\"Shana...,\" I started.\n\n\"Scott, you need to quit making excuses. You're still the strongest, juice free, 242-lb guy out there. We all look up to you and you're just going through the motions. You've got good years ahead of you. Marsha, wouldn't be happy to know you stopped competing,\" Shana replied. I felt Kasey grab my arm. When I looked at her, I knew that this hadn't just been Shana, they'd talked about this together. Shana was right though, I'd been making excuses. I was a little uncomfortable that I'd been called out in front of the group, but I couldn't play it off. The crew looked up to me. I needed to lead them more than I'd been doing.\n\n\"Scott,\" Joel called my name last.\n\nI looked briefly between Kasey and Shana. \"I'm going to enter the State meet first and we'll see where we go from there.\"\n\n\"Okay, that's fair enough,\" Joel laughed. The rest of the crew did too.\n\n\"Those of you that have been around awhile know what that means, right,\" I asked. Several of the faces smiled and nodded. I felt my role immediately change from coach back to pack leader. \"Good, as for those of that don't, I'd get stocked up on liniment and ibuprofen. We're gonna start kicking ass like never before.\"\n\nThere were several whoops, but mostly there were knowing nods. Our morning crew that Joel dealt with primarily were all solid, dedicated powerlifters and strongmen that knew what they needed to do. The night crew were a good group, but they needed seasoning which was why I liked to work with them. Fortunately, I had a few veterans like Shana that I could rely on. We kept up the small talk for a bit and some drank a second beer. Joel said he'd stay after and clean up, so Kasey, Shana and I grabbed our gear and headed to the door.\n\nWhen we were outside, I saw Shana grinning from ear to ear.\n\n\"What,\" I asked.\n\n\"I knew eventually I'd get you to compete again,\" she laughed and nodded towards Kasey. \"I just needed help.\" I looked at Kasey and saw her smiling at me.\n\n\"Yeah, I guess you did,\" I finally grinned, before turning back to Shana. \"Just remember, you only did one full training cycle with me.\"\n\n\"I know,\" she said. \"But I'm ready for it.\"\n\n\"You better be,\" I said. I raised my hands and she gave me a double high-five. \"You working tonight?\"\n\n\"Yeah,\" she said. \"I'm running late already. See you all Sunday.\"\n\n\"Bye,\" Kasey said.\n\n\"Bye,\" I added. We watched Shana drive off before we walked to the truck. After I opened the door, I took Kasey in my arms and kissed her softly.\n\n\"I didn't need an intervention,\" I said.\n\n\"I know you didn't, but Shana and I have been talking and we thought we should get you into a meet,\" Kasey explained.\n\n\"You and Shana have been talking a lot,\" I smiled.\n\n\"Yeah, I mean we're total opposites, but we have been getting along great. I met her for lunch a couple times last week,\" Kasey replied.\n\n\"That's good,\" I smiled. \"Shana's lived a lot of years for her age.\"\n\n\"Yeah, I can tell,\" Kasey said. \"There's such a difference between her and my other friends. She's so open and honest.\"\n\n\"That's the truth,\" I smiled. \"Let's go home.\"\n\n\"Yes, let's go home,\" Kasey smiled.\n\n---\n\n \n"
    ],
    "authorname": "nosebone",
    "tags": [
        "college student",
        "older man",
        "younger woman"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/age-really-is-just-a-number-ch-04"
}
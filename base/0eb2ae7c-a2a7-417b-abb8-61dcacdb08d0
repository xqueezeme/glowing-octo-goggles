{
    "title": "A Gift to Writers",
    "pages": [
        "=======================================\n\nIt's/its, your's/yours, to/too/two, etc.\n\nI've learned a lot writing for Literotica the last dozen years. I think it's high time I paid back a little for all the help I've received during that time. Here's a simple tool I use regularly to assist with some of the most common errors I fell prey to in my first decade of writing. Using it's for its, you're for your, misusing homonyms, which I did far too often. I notice it's a common problem, and hope someone else finds it useful.\n\nIt's well short of the 750 word minimum, and I'd hate to clutter something so simple with an extra 200 words of fluff.\n\n=======================================\n\nThe following Word macro, when run, will highlight in RED all the common homonym's that are listed. If you, like me, occasionally type the wrong one, it'll allow you to go back and identify each potentially incorrect word, so you can determine if you got it right or not.\n\nIt's a very basic macro, and doesn't deal with footnotes or headers or anything of that type. Simple body text is all it covers. The original was written by a friend of mine, and I've modified it for my own needs. Of course, you're encouraged to do the same.\n\nTo use the Macros, simply go to Macros -> View Macros and press create. You'll have to enter the name of the macro (hilite_HOMONYMS). Copy the macros below into the open file and save. When you View Macros again, you'll have two new ones. The first, hilite_HOMONYMS will highlight all the problem words in red. The second one, unhilite_ALL, will clear all highlighting.\n\nOnce you've save this to your normal.dot, these macros should be available each time you open word.\n\n--- Macro starts below here ---\n\nSub hilite_HOMONYMS()\n'\n' hilite_HOMONYMS Macro\n' Macro created 5/27/2013 by Tx Tall Tales\n'\n\nDim varWordList(45) As String\n\nvarWordList(0) = \"accept\"\nvarWordList(1) = \"except\"\nvarWordList(2) = \"already\"\nvarWordList(3) = \"all ready\"\nvarWordList(4) = \"all together\"\nvarWordList(5) = \"altogether\"\nvarWordList(6) = \"altar\"\nvarWordList(7) = \"alter\"\nvarWordList(8) = \"ascent\"\nvarWordList(9) = \"assent\"\n\nvarWordList(10) = \"bare\"\nvarWordList(11) = \"bear\"\nvarWordList(12) = \"brake\"\nvarWordList(13) = \"break\"\nvarWordList(14) = \"capital\"\nvarWordList(15) = \"capitol\"\nvarWordList(16) = \"conscience\"\nvarWordList(17) = \"concious\"\nvarWordList(18) = \"desert\"\nvarWordList(19) = \"dessert\"\n\nvarWordList(20) = \"emigrate\"\nvarWordList(21) = \"immigrate\"\nvarWordList(22) = \"its\"\nvarwordList(23) = \"it's\"\nvarWordList(24) = \"lead\"\nvarWordList(25) = \"led\"\nvarWordList(26) = \"loose\"\nvarWordList(27) = \"lose\"\nvarWordList(28) = \"passed\"\nvarWordList(29) = \"past\"\n\nvarWordList(30) = \"principal\"\nvarWordList(31) = \"principle\"\nvarWordList(32) = \"their\"\nvarWordList(33) = \"there\"\nvarWordList(34) = \"they're\"\nvarWordList(35) = \"to\"\nvarWordList(36) = \"too\"\nvarWordList(37) = \"two\"\nvarWordList(38) = \"weather\"\nvarWordList(39) = \"whether\"\n\nvarWordList(40) = \"your\"\nvarWordList(41) = \"you're\"\nvarWordList(43) = \"end\"\nvarWordList(44) = \"end\"\nvarWordList(45) = \"end\"\n\ncounter = 0\n\nDo\n\n    With ActiveDocument.Content.Find\n        .ClearFormatting\n        .Replacement.ClearFormatting\n        .Replacement.Font.Color = wdColorRed\n        .MatchWholeWord = True\n        .MatchCase = False\n\t\t' .MatchWildcards = False\n\t\t' .MatchSoundsLike = False\n\t\t' .MatchAllWordForms = False\n        .Execute FindText:=varWordList(counter), _\n            ReplaceWith:=varWordList(counter), Replace:=wdReplaceAll\n    End With\n\n    counter = counter + 1\n\nLoop Until \"end\" = varWordList(counter)\n\nEnd Sub\n\n\n\nSub unhilite()\n'\n' unhilite Macro\n' Macro created 5/27/2013 by Tx Tall Tales\n'\n\nWith ActiveDocument.Content.Find\n    .ClearFormatting\n    .Font.Color = wdColorRed\n    With .Replacement\n        .ClearFormatting\n        .Font.Color = wdColorBlack\n    End With\n    .Execute FindText:=\"\", ReplaceWith:=\"\", _\n        Format:=True, Replace:=wdReplaceAll\nEnd With\n\nEnd Sub"
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "homonyms",
        "word",
        "macro",
        "it's its",
        "your you're",
        "grammar",
        "mistakes"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/a-gift-to-writers"
}
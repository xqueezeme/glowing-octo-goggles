{
    "title": "Royal Flush Ch. 10",
    "pages": [
        "****** Please Read This First *******\n\nI know, I know, I usually don't bother with the disclaimer bits either. Blah, blah, blah, over 18, blah, blah, blah, don't read if easily offended, blah, blah, blah. But, just this once, please bear with me and read this one.\n\nFirstly, this is final chapter and the story will only make sense if you read it from the start. If you haven't already done so then I sincerely urge you stop and go to chapter one. It will be better that way, honest.\n\nSecondly, this is a work of fiction and all the characters are completely fictional. In particular, one of the main characters is Princess Charlotte who is, according to chapter one, \"about tenth in line for the throne\". Now, in real life, there can only be one person who holds that position but this story is not real life and it's definitely not about her. \n\nPrincess Charlotte is not a real person and any resemblance is purely coincidental. Before I get carted off to live out what is left of the rest of my life in the Tower Of London, I want to stress that this story is set in a parallel universe where Britain has a very different Royal family with a very different line of succession.\n\nThirdly, briefly but importantly, my heartfelt thanks to all those who have helped so much. Especial mention must go, in no particular order, to V and OneWhoAdores for help along the way.\n\nFourthly, not much sex in this one. Enough, in my opinion, to keep it out of 'non-erotic' but if your looking for no holds barred red hot girl-on-girl... not this time. If that's what you're after, look elsewhere.\n\nLastly, this is a story of deception and subterfuge. Most of the characters have at least two names, many three or even four. To help the reader keep track each chapter will start with a dramatis personae. \n\nThe list for this chapter is:-\n\n*Andrea, a journalist, masquerading as Emma Pearson from Paarl\n*Tamsin, another journalist, masquerading as Emma Pearson's sub, Susan\n*Angus, editor of the newspaper often called by its nickname, the Daily Sleaze\n*Tim Ewing, legal advisor to the Daily Sleaze\n*Princess Charlotte, a princess, known to her friends as Charlie.\n\nEnjoy the story\n\n*****\n\n\"Fan-fucking-tastic!\" Angus exclaimed as he looked through the photos Andrea had taken. \"This is it, this is the biggest story you or I are ever going to break. Look at this one,\" he pointed at a picture of the captured prey corralled in the sheep pen, \"all lined up, pretty maids all in a row. Couldn't ask for better than this. That one, that's the princess, and these others.\"\n\n\"That's Barbara Abercrombie, and that one's Zoe Fitzwarren, and that's...\"\n\n\"Zoe Fitzwarren, isn't she the one who's married to some guy down in Herefordshire but having an affair with Georgina McDonald?\"\n\n\"That's the one. OK, so I know we're leading with the royal angle but there are lots of other high society name here. We're really going to rock some boats.\"\n\nTamsin looked on but her feelings had a lot more to do with shame than pride. She had known all along that this moment was coming but now that they were actually about to publish... she knew she would never really be able to live with herself ever again. It had been so easy to despise these people when they had just been names in the society columns but, now that she had got to meet them, to know them, they had all turned out to be quite normal. Yes, there was more than an air of spoilt little rich bitch among some of them, Felicity and Barbara sprang instantly to mind, but then, were they really any the worse than the kids she had grown up with, the ones from the estates?\n\nAnd right at the heart of all her thoughts was Princess Charlotte who she would now forever think of as Charlie. Tamsin recalled the story, the one she still hadn't told Angus or Andrea, the story of Jocasta and why Charlie so hated the press. In a few more days Charlie was going to have yet more reasons for her hatred and the fact that it would be her hand on the knife that was about to be plunged into Charlie's back filled Tamsin with self loathing. \n\nTamsin thought back to twenty four hours earlier, Sunday morning, waking up with Charlie and Roberta and the air of embarrassment that had filled the bedroom. Roberta, suffering from a monumental hangover, had only partial memories of the previous evening and couldn't stop apologising for, as she put it, her outrageous behaviour. Charlie and Tamsin worked hard to reassure her that it was all OK but Roberta was hard to console.\n\nMeanwhile, despite, or was that because of, their previous intimacy, Charlie and Tamsin were both more than a trifle awkward with each other. Charlie was struggling with her guilt as she laboured under the impression that, even when allowances were made for club nights, she had spent the previous night making love to a married woman. It wasn't the physical acts that, in retrospect, seemed so wrong; they were part and parcel of the games they played. Rather it was the emotional closeness, the evident feeling of attraction between them, that seemed to stray far too far into forbidden territory. Tamsin's guilt, on the other hand, had been all about the lies, the pretence, the falsehoods and she was already feeling remorse for the blow she had yet to strike.\n\nSo, although all three of them tried their very hardest to put the best face on things, they had not wanted to drag things out any further than necessary and, leaving Charlie to reassure Roberta that no one was thinking any the less of her, Tamsin had made her way back to her bedroom.\n\nWhen she got there, of course, she had found Andrea still fast asleep with Frances and Maggie lying either side of her. She had slipped through to the en-suite and put on the dressing gown she discovered hanging on the back of the door. However, when she had emerged, she had found that, quiet as she had been, she had indeed woken the sleepers. By comparison, here it had all been giggles about how much fun they had all had and expressed hopes that, maybe next year, tables might be turned. \n\n\"I'm sure you two will want a cuddle before breakfast,\" Maggie had said as an excuse to leave. She and Frances slipped out from under the covers and, after some fond farewells, returned to their rooms. The door had hardly closed before Andrea had started gloating. Her mood a stark and vivid contrast to Tamsin's.\n\nBut, if thinking back brought with it far too much raw emotion, far too much that was unresolved, far too much that probably never would be resolved, that didn't stop Tamsin from endlessly playing it all back in her mind, searching for meanings, searching for a way out. \n\n\"Tamsin! Tamsin! For fuck's sake, pay attention. Now, this is far too big for the Daily Sleaze, we're going make this the front page of the Sleaze On Sunday, as big a splash as possible, well take up practically all of it except the sports pages. This means we're going to need plenty of copy, not just the juicy stuff, plenty of background. You tell me that this all dates back to when they were in school together. Imply much more, make it up if you have to. 'Sources close to the princess' sort of thing. With the photos we've got we can get away with practically anything.\n\n\"In the meantime, do not forget, this is still top, top secret. You're to tell no one, no one at all, not your best friend, not your lover, not your lover's best friend, no one. The only people who are to know that this story even exists are the three of us in this room and Tim Ewing from the legal department. \n\n\"Because of this I don't want you floating around the office where any Tom, Dick or Harry might catch a glimpse of what you're working on. You're to go back to the Mayfair flat and do everything from there. I'll drop by from time to time and see how you're getting on. For starters you can give me five thousand words by the end of play today. I'll go through the pictures and decide which ones we can use for publishing and which we keep in the bank, so to speak and, when I come over this evening, we'll see how we can tie them together. Talking about the pictures, I want notes on each and every one of them listing where and when it was taken and exactly who is in them. Make sure there are no mistakes. We may be able to get away with sly innuendo in the text but we can't afford to put a foot wrong on the photos. Now, are there any questions? Good, off you go then and I'll drop by around six or seven this evening.\"\n\nThey headed off for the Mayfair flat and, when they got there, set up their laptops on the kitchen table. It was agreed between them that Andrea would write the story while Tamsin would go through the pictures identifying who was in each one.\n\nAnd that, in itself, was a painful task. Tamsin carefully studied each and every photo, listing the participants along with where and when it was taken. But the people in the photos weren't just participants, they were people, real people, that, to some extent, she had got to know and who had become, in some small way, her friends. There, for example was Felicity Ambrose all dressed up in pony gear from the session down at Patience Armitage's stables. She still saw Felicity as a feckless airhead, a hooray Henrietta, the very epitome of everything she had despised so much about the upper classes. However, in real life, Felicity had never been anything other than completely friendly and there wasn't an ounce of harm in her. Similarly, Barbara Abercrombie, Felicity's friend, companion, and probably lover, was, again, as shallow as a puddle but, still fundamentally harmless and never less than welcoming.\n\nSimilarly it was all too easy to write off Lady Mary as a bossy cow, the sort who endlessly wanted to run everybody's lives but, in the end, wasn't she just lonely? Wasn't she just wishing to hang on to her school days, still trying to be head girl, trying to gee the team up, trying to recapture the camaraderie that was fast fading? For all that some of her attitudes came out of the Ark they came from ignorance, not malice.\n\nAnd there was Roberta Frogmorton, whose air of bossy competence had come crashing down, who had revealed this as a thin and fragile mask that had completely failed to hide the very real pain within. Alongside her was Georgina McDonald, who had clearly married for money, not love and, as a result, ended up as laird of large chunks of Scotland, properly addressed as the Lady Luid. However, if there was a villain in that particular story then surely that role went to her husband who had defrauded thousands of pensioners and run away to Venezuela with their savings. In contrast, Tamsin's lasting memory of Georgina would be the gentle way she had helped Roberta, diplomatically ensuring the minimum of hurt or fuss to all concerned. She was a good woman in a crisis, the sort anyone would want as a friend.\n\nAnd there, from the pony club afternoon, were pictures of Patience Armitage and Sally McIntosh, looking just so with Sally in full pony gear and Patience at the reins. Angus had rejected this one outright commenting that \"Daily Sleaze readers would only want pictures of pretty girls, not an ugly lump of lard like that. Why, she hasn't even got decent tits\". Tamsin, who had got to know Sally quite well, thought she looked rather sweet. Moreover, however unconventional their relationship, there was a real love and partnership between them. They showed a level of respect and understanding missing from many more conventional couples and, if their relationship was a shade unusual, it was none the worse for it. What is more, while, for the others, the D/s aspects of their games, the whole goddess and handmaiden thing, was a hangover from dorm games at school, for Patience and Sally it was a serious and central part of their relationship. They weren't playing at it, they were living it.\n\nBut all these thoughts were all a mere bagatelle besides her confused emotions over Charlie. Charlie was, of course, the main focus of the story and the bulk of the pictures featured her. There she was, time and time again, looking so... looking so everything. \n\nThe photos fell into two groups. On the one hand there were the pictures from Bedfordshire, from the puppy show where Charlie had looked so prim, so proper, and so much the perfect puppy mistress. There was nothing much they could use here. Andrea had still been learning the art of concealed photography so many of the shots were clumsy and ill framed. Moreover, there were no shots featuring Charlie in an overtly sexual context. Tamsin, on the other hand, felt that some of these showed Charlie at her best. There was one in particular that was so perfect that Tamsin, despite Angus's strict rules on the matter, just had to copy it to her personal thumbdrive.\n\nIn stark contrast there were the pictures from Scotland. There was Charlie during lunch in the garden completely naked but looking calm and relaxed. Another showed Charlie corralled with the others in the sheep pen, again, relaxed and enjoying herself. And then, although the lighting was worse as Andrea obviously hadn't been able to use flash, there was Charlie and herself, making out on the hearth rug.\n\nBut there was one shot, one taken while they were applying the sunscreen, which showed Charlie and herself standing, face to face and there was something in their eyes, something that... It would never be used for the story. It wasn't particularly sexy; they still had their panties on and it was just two semi naked women looking at each other but, it too was surreptitiously copied. \n\nBy the end of Wednesday they were all but ready to go to print. They sent the story off to Tim for his final approval and, in the meanwhile, all they could do was wait. They had had a phone call from Lady Mary wondering if they would be available that weekend but Andrea had fobbed her off with some excuse about looking at prospective kennels out in Gloucestershire. They finished off the day with yet another conference with Angus who reluctantly agreed that, with their work done, they could take themselves home. Although they were to keep their phones with them at all times, Thursday and Friday would be well earned days of rest before the bombshell dropped at the weekend.\n\nCRASH!!!\n\nTamsin woke with a start. Still half asleep she was finding herself in the middle of some sort of nightmare. Her diminutive bedroom was full of men in riot gear, each and every one of them apparently waving guns around and shouting at her. Behind them the remains of the bedroom door hung in a splintered mess showing how they had entered. The shouting continued as, working as a well oiled team, they hauled her out of bed and a black canvas bag was thrust over her head. Her arms were tugged behind her back and, judging by the tight lines that held her, her wrists were bound with cable ties. Similar ties were fastened around her ankles, she was hauled over someone's shoulder like a sack of potatoes, manhandled into a van and, completely terrified, whisked away.\n\nWhen the van finally pulled to a halt the shouting started again. Still bound and hooded, they manhandled her out of the van and, quite literally, threw her into a cell and, for what seemed like hours, she lay on a hard concrete floor, freezing cold and unable to move. She had long ago given up screaming, pleading, sobbing, begging and all the other things that they completely ignored. She now understood the phrase 'shitting yourself with fear' as, somewhere along the line, she had soiled herself. They had made no concessions towards this; she now lay in her own filth and could do nothing about it. Then the cell door opened, she was picked up, her ankles were freed and, still with her wrists bound and still hooded, she was half marched, half dragged to a room where she was sat on a chair. Her wrists were freed, only to be refastened to the arms of the chair and, at last, the bag was removed from her head.\n\n\"Tamsin Phillips?\"\n\n\"Yes. What's happening? What's this all about. Please, you've got the wrong woman.\"\n\n\"Is this you?\"\n\nA photograph was thrust in front of her. I was indeed her in the photo but she didn't know any of the others. Suffice it to say that they had a middle eastern look about them. In despair she nodded. They hadn't got the wrong woman. \n\n\"And what about the others? This one here for example.\"\n\n\"I don't know them. I don't know who they are.\"\n\n\"The photos say otherwise. The photos say you know them very well indeed.\" More photographs were put in front of her. Photos that showed her getting increasingly intimate, photos that showed her.... \"Is that how you get your kicks, Miss Phillips, giving blow jobs to terrorists?\"\n\n\"But these are fakes! They're doctored; that's not me. I've never met these people.\"\n\n\"You're lying! We have sources, very good sources, that show that you're deeply involved with these people. We have evidence linking you to plots to bomb several major London tourist attractions. We have the photos, Miss Phillips, we have the photos. Now, why don't you tell me all about your little friends and what they get up to when you're not letting them fuck you.\"\n\n\"But these photos, they're not me. They're false. You have to believe me. You have to believe me.\"\n\n\"And why should I believe you? Why, when all the evidence points to you being deeply involved in acts of terrorism. Scum like you should be wiped off the streets of London and that's exactly what I'm going to do.\"\n\n\"But they're faked. Please, you have to believe me, they're faked.\"\n\n\"Is that the best you can come up with. Maybe be you need more time to think things over. We have all the time in the world and, trust me on this, you're going nowhere until you've told us everything you know.\"\n\n\"But I don't know anything. You've got to believe me.\"\n\n\"Take her away.\"\n\nAnd Tamsin was, once again, hooded, bound and returned to her cell. \n\nTime seemed to enter a new dimension. Tamsin really couldn't tell if she was there for minutes, hours or days. They kept noises going, screams, shouting, dogs barking, cell doors slamming shut, and, all the while, she had no idea whether they were real of faked. It did mean that she didn't get a moment's rest. Three more times she was taken for 'interrogation' although, if she hadn't been so petrified with fear, she might have gleaned that they didn't seem to be that interested in her answers. More it was a matter of piling on the 'evidence', evidence that she was deeply involved in some sort of Middle East terrorism. Their constant refrain was \"we've got the photos. The photos don't lie, Miss Phillips.\"\n\nAs she lay on the had cold floor of the cell she was kept in she had plenty of time to think about the photos. They were, on the face of it, completely convincing. They looked like hard and fast evidence, evidence that would convict her of terrorist crimes, evidence that could and would put her in prison for a long, long time. Their phrase, 'the photos don't lie', echoed in her head. But they did lie, but they did, but they did.\n\nThe bag over her head was wet with her tears.\n\nAnd then, suddenly, it was over. Still hooded and bound she was, once again, bundled into a van and driven away. When the van finally stopped she was manhandled out and put on the floor. Her wrists were freed, the hood removed and, as she lay there blinking in the light, she saw her captors leaving through the splintered remains of her own front door.\n\nHer first action had to be cleaning up; first herself and then her flat. She was still in her badly soiled pyjamas and, after wedging the remains of her front door closed, getting under a shower was her top priority. She let the water cascade over her, trying to come to terms with what had happened to her. She was scared, really scared and, it would appear, with good reason. Eventually she had used all the hot water so she emerged from the shower, put on an old tracksuit and started picking up. Jim, an old friend, came round and fixed her front door for her and was fobbed off with a story about being burgled. ",
        "And she had been burgled. They hadn't just turned the flat up-side-down, her laptop, her phone, in fact any piece of computer hardware was gone. On the other hand, her wallet and its contents were left untouched. Once she had got herself as straight as possible she walked to the phone box on the corner and phoned the office. Unlike normal protocol, she was put straight through to Angus.\n\n\"Get your arse down here, now! I don't care what time it is, get your butt on a train and get down here.\" he all but screamed down the phone at her. \"Meeting, my office, soon as.\"\n\nShe made her way to the station and caught the next train in and, it wasn't long before she arrived at the office. When she got to her desk, her PC was missing and her desk drawers had been emptied. She went over and found Andrea whose desk was also minus its PC.\n\n\"Have you been...,\" Tamsin started but Andrea just nodded.\n\n\"Come on, Angus is waiting for us. I don't know what they did to him but... well, wait and see.\"\n\nTogether they made their way to Angus's office where Tim Ewing was already present. He let them in and locked the door behind them. \n\n\"The story is dead. Dead as a dodo, deader than dead. Norwegian parrots have nothing on this one. It is dead. Is that completely understood?\"\n\n\"Yes,\" they chorused.\n\n\"It's so dead it never even happened. If you've got anything, anything at all, from the last few weeks then you destroy it, completely and utterly.\" Tamsin had never seen Angus looking so scared. Come to that she had never seen him looking scared at all but there was no doubt that he was terrified of something. \"What's more, you don't tell anyone, ever. This is a secret you take to your grave. If one word of this gets out, one single word, if there's the slightest whisper then it won't just be you, all four of us....\n\n\"Look, let's just assume that all four of us had visits this morning. I've no idea what hold they have over you and I sure as hell don't want you knowing.... but the story stops here, in this room, just the four of us. It never happened, it never happened at all. Agreed?\"\n\nThere was no dissent.\n\nBut Angus hadn't really needed to stress all this. Although no one was giving any details it would seem that they had all had visits that morning and, although he was the only one that had been 'persuaded' to drop the story, the other three had been scared enough to get the message. It wasn't quite clear what hold they had over Angus but it had to be big. They were all shaken and scared but, for him, it seemed to have another dimension.\n\nNow he was trying reassert his authority, to be the big hard man, threatening Andrea and Tamsin so as to keep them quiet but he was still a mere pussycat compared with what Tamsin had already been through that very morning. \n\n\"OK, so that leaves you two without a story to work on. For starters you can have the rest of the week off. Fuck off back home and I'll see you back here on Monday morning. In the meantime you can find out all you can about boy bands. Seeing as how you two work so well together I'm keeping you together as a team and I've got just the right story. It's a line on the X Factor finalists, nice bit of juicy gay action. It seems that all is not what it seems.\"\n\n\"I... won't do that,\" Tamsin replied, amazed at her own boldness.\n\n\"What do you mean, you won't do that?\"\n\n\"I've... I've had enough. I came into this business to inform, to unearth wrongdoers. I didn't do it to expose peoples private lives. Who cares if those involved in X Factor are gay or not. We all know it's fiddled anyway. I've had enough, enough of all this muck raking.\"\n\n\"Inform! Unearth wrongdoers! What fucking planet do you come from. No one gives a fuck what you care about. It's what our readers care about that counts and they care whether those involved in X Factor are gay or not. That's what they want to read. That's what sells newspapers, that pays your wages. Is that too hard to understand?\"\n\n\"In which case I've had enough of destroying people's lives just to sell newspapers. What people do in their private lives should stay that, private.\"\n\n\"Private! Fuck that! Have you gone mad or something?\"\n\n\"I'm sorry, I just can't do it any more. As I said, I've had enough. I've got some leave owed me, and some time off in lieu of all this overtime I've been putting in so you can take that instead of notice.\"\n\n\"You can't just walk out of here. If you do....\"\n\n\"What? I'll never work in newspapers ever again?\"\n\n\"Don't push it sunshine, now is not the time. If you leave....\"\n\n\"Just watch me go.\"\n\n***********<br>\n\nSix Months Later<br>\n\n***********\n\nIt had been a long hard day. The seats at the checkouts at PennySavers were not the kindest and Tamsin had had to deal with the usual range of disgruntled customers. Why is it that those who pay the least seem to demand the most. Still, when all was said and done, at least it was a job. \n\nLife had been pretty tough since she had so cavalierly thrown away her job at the Daily Sleaze. It had been hard to find work and there was nothing that matched the wages she used to earn. What made it harder was that Angus was refusing to give her a reference and that wasn't helping in the slightest. PennySavers had her on the minimum wage and made it quite clear she should feel grateful for the privilege of working for them. With this drastically reduced income she had had to give up both her flat and her car and move back in with her parents; that was all she could afford. \n\nStill, at least she was sleeping at night, well, sometimes. There were always these dreams, dreams involving.... No, no, no! She mustn't go there. \n\nShe got off the bus and, as she turned into Sunnyhill Road, she became aware of the big black saloon that was following her, keeping pace, five yards behind. She quickened her pace and it speeded up. She slowed down and it did as well. It wasn't trying to be discrete; it was out to scare her. Her heart sunk; nowadays she had every reason to be paranoid. She'd kept her part of the bargain. She hadn't spoken a word, not to anyone, anyone at all. However if Andrea, or Angus, or even Tim Ewing had been foolish.... Angus had intimated that if any one of them talked all four were for the high jump. Her heart started pounding and she started to run but you can't outrun a car. It kept pace with her for a while and then accelerated only to draw up just in front of her where two men got out. She just sighed in resignation and stopped. There was no point in running any more, no point at all.\n\nShe was bundled into the back of the car and the all but obligatory hood was put over her head. However, this lot weren't anything like as rough as the last lot. They also hadn't restrained her hands, although she was under no illusions that this meant that she would be able to escape or anything like that. They hadn't restrained her because there was no need.\n\nIt was quite a drive before they finally stopped. She was then helped out of the car and guided, quite gently, up some steps and into a building. This wasn't the hell hole she had been in last time. Here the floor was carpeted and the place smelled of furniture polish. She was led to a chair and asked, politely, to sit.\n\n\"OK, boys. Thanks. I'll take it from here.\"\n\nTamsin's heart leapt. She'd know that voice anywhere! Princess Charlotte! Charlie! The hood was removed and there she was, standing in front of her, holding a file.\n\n\"Well, well, well, little Susan, or should that really be Tamsin Phillips? Quite the little viper in the grass, weren't you.\"\n\nFor a moment Tamsin just stared at Charlie and then her head dropped.\n\n\"Do you know, I really thought there was some sort of connection between us, some link, some... you must have been laughing so hard at the way I fell for you. Was that your plan? Was that part of your plot. To get me to.... Well?\"\n\n\"No, I never planned that, I never planned that at all!\"\n\n\"And why should I believe you? Everything else you have said has been a lie. Well, apart from your parents living in Sunnyhill Road in Streatham. South Africa! Hah! You've never been any further south than Benidorm.\n\n\"And, as for the rest of it.... Well, you had me fooled, I'll give you that. Remember me opening my heart to you, out there on the moors? Do you? Do you? What an idiot I was, what a gullible idiot. But then, you were bargaining on that all along, weren't you?\"\n\nTamsin didn't reply. She had no words.\n\n\"So, how does it feel to be out of a job? Oh, I know you're working the checkouts at PennySavers but that's no job for the likes of you. How the mighty have fallen, eh? Tell me, why did you leave the Daily Sleaze?\"\n\n\"I had editorial differences.\"\n\n\"Is that what you call them. You've applied for quite a lot of jobs but none of them in journalism. I wonder why that is.\" Charlie flicked back and forth through the file. \"You're not having much luck, are you. I guess Angus put the mockers on that one. Let's see, one hundred and thirty job applications and not so much as a whisper. Tough times, tough times indeed.\"\n\nTamsin still just sat there. Charlie deserved this anger, and she deserved this telling off. Nothing would undo what had been done and there was nothing really left to say.\n\n\"Surely you must have wondered who it was that blew the whistle, how your little scheme got found out? Well, did you?\"\n\n\"Sometimes,\" Tamsin admitted.\n\n\"And did your wondering come to any conclusions? I mean, how many were in the know. Angus, surely not, Tim Ewing? I can't see that one either. Must have been Emma, oops, sorry, make that Andrea. I mean, there's no one else left, is there?\"\n\n\"I wouldn't know.\"\n\n\"Wouldn't you? \n\n\"I don't know, really I don't.\"\n\n\"The thing is you're not the only one who got to wondering and, unlike you, I have contacts, contacts who can find things out. Let's start with the actual tip off. That came from a gmail account opened just for that one email. Opened, email sent, and then nothing. Of course, anyone can open a gmail account, easy peasy, and completely untraceable.\n\n\"Or that's what I thought. The boys tell me otherwise. Seems they have ways of finding out the location of the PC that was used to open the account. Very clever, those backroom boys. Didn't take long either. Turns out it was opened from a public terminal in the lobby of the Flyaway Inn in Croydon, you know, the one next to Gatwick Airport.\"\n\n\"I've never been there.\"\n\n\"Have you not? Maybe you ought to try it sometime. We went and asked the staff there but you know what it's like. Turnover is high and who's to remember one single person from all that time ago. On the other hand it seems they keep the CCTV footage. Here's a still that might interest. These things are always a bit blurred but you can see quite clearly someone working on one of the terminals in the bar. Here, have a look.\"\n\nCharlie handed over a photo and but the person was wearing a hoodie which obscured the face. It could have been anyone.\n\n\"And here's one from the car park. Same figure getting into a Ford Fiesta. Didn't you used to own one of those? The number plate is a bit blurred but you can just about read it. What do you make of it?\"\n\nShe handed over another still from the CCTV. Tamsin stared at it. It was blurred but there was no mistaking what it showed.\n\n\"Now, Andrea was busy in Barnet that night, Angus was at a party in the West End, Tim Ewing was at home with his family. Any idea who the girl in the hotel was, Tamsin, or should I say, puppygirl1986?\"\n\nTamsin just stared at the carpet. She had no secrets left. She felt more naked than she had ever done, even with her clothes off. Charlie knew everything. \n\nCharlie put down the file and squatted down in front of Tamsin so that there heads were level.\n\n\"Thank you, Tamsin, thank you.\"\n\n\"I don't deserve your thanks. You ought to hate me, really hate me. What was the phase you used? Blood sucking vultures? Yeah, I'm one of them.\"\n\n\"Oh, I used to hate you. Believe me I used to hate you. I thought you were the worst of the worst, the way you weedled your way in, gaining my confidence. All that little girl lost you played so well. Oh, yeah, until I worked it out you were number one on my hate list but it never did quite ring true. And then there were the photos on your thumbdrive. Why those? Why there? In the end I started to wonder, were you really that good an actress, had I really been so completely fooled. And then, when I got the boys to do a little digging for me, well, it had to be you, didn't it? Who else was going to throw away the chance of a lifetime so as to save my reputation and that of my friends. Angus? Andrea? Tim Ewing? I don't think so. There was only one person it could be and I owe her everything.\"\n\n\"You don't, really you don't. I'm sorry, I'm so so so sorry,\" Tamsin broke down. \"I should have said no before it started. I should never have agreed to it in the first place.\"\n\n\"Should have's, would have's, could have's. Maybe you should never have agreed to it but, if you had, then we would never have met. And if we hadn't met then we would never have done this,\" Charlie leant forward and kissed Tamsin. For a moment Tamsin fought it. She still felt guilty, so very guilty, but, it seemed that didn't matter to Charlie. And then she couldn't fight it any more. They melted into each other and held each other tight until, after a long, long while, Charlie pulled back and looked at Tamsin.\n\n\"I love you, do you know that. I think I have done ever since that day in Bedfordshire and, up in Scotland....\"\n\n\"I love you too. I'm so glad I don't have to lie any more. I'm so sorry Charlie, I'll never lie to you ever again.\"\n\nCharlie leaned forward and they kissed again.\n\n\"I think you and I need to be somewhere a little more comfortable, don't you agree?\"\n\nTamsin just nodded. Charlie stood up, took Tamsin by the hand and led her to the bedroom. Slowly, gently, lovingly, she eased off the PennySavers uniform that Tamsin still wore. Under that were a light tee shirt and cotton panties and they soon joined the dress. \n\n\"God, you're beautiful,\" Charlie said. \"I've thought so from the first day we met.\n\n\"Me in the puppy gear.\"\n\n\"Kind of suits you, you know, and it couldn't hide your eyes. I knew back then that... and to think that I thought...\"\n\n\"Please, don't. I hated lying to you.\"\n\n\"And all those things you had to do,\" Charlie laughed. \"Poor you, was it awful?\"\n\n\"Some of it was. Most of it was but....\"\n\n\"But what?\"\n\n\"Not all of it was lies. Being your puppy girl, there in the garden, that wasn't lies.\"\n\n\"I knew it wasn't.\" Charlie gave Tamsin another kiss. \"Just for those few minutes you were my little puppy girl. That was pretty special to me as well.\"\n\n\"But then I had to go and be Celia's puppy girl as well. Please don't ever ask me to do that again.\"\n\n\"Oh, you're my little puppy girl now and I'm going to keep you all to myself. You can be sure of that. I was getting pretty fed up with all the games anyway and now, now that I've got you, why would I ever want to play around?\"\n\nBut Tamsin was too busy undoing Charlie's blouse buttons to give an answer. She had had enough of chatter for the time being, there were other things to do and she was intent on doing them. \n\nIt was quite late when they came up for air and Tamsin discovered that even princesses are not averse to having pizzas delivered. What's more, Tamsin had to phone her mum and explain that she wouldn't be coming home for a while. And then it was back to bed again to try and discover all those bits they might have missed last time.\n\n\"How would you feel about going back into journalism?\" Charlie asked as they rested after yet another rather athletic bout.\n\n\"No way, no way Jos\u00e9. I've had enough of that cesspit to last me a lifetime\"\n\n\"Oh, I wouldn't want you to be a journalist.\"\n\n\"Sorry, I'm not following. What exactly are you asking me to do?\"\n\n\"Well, my press secretary, Julie, has gone and got herself preggers. She's going off on six month's maternity leave and, after that, well, she's always wanted to be a mother more than my press secretary; she couldn't give the job the commitment it requires and I wouldn't ask her to do so. Now, the replacement I'm looking for needs to know their way around but, more than that, I need loyalty and an ability to do the right thing in a tight spot and then keep their mouth shut afterwards. Do you still not want to go back into journalism?\"\n\n\"Do you think I'm up to it?\"\n\n\"Oh, I'm certain you're up to it and, what's more, it gives me the perfect excuse for keeping you around and, more than anything, I plan on keeping you around from now on in.\"\n\n\"So, was that the only reason you got your goons to abduct me. Some sort of staff recruitment drive.\"\n\n\"I can think of one or two others. These for instance.\" Charlie kissed Tamsin's nipples to make her point. \"But seriously....\"\n\n\"But seriously, I'd love to, if you really think I'm up to it. There is one problem though.\"\n\n\"What's that?\"\n\n\"Well, your friends... I know neither of us are particularly keen to go to one of Lady Mary's little soir\u00e9es ever again but... well, we're bound to meet up from time to time. They all think I'm Susan Ward. What are we going to tell them?\"\n\n\"They already know quite a lot of the truth. I had to tell them. I had to explain why Emma Pearson had just disappeared off the face of the earth. And that means I had to tell them about you as well. They already know Susan Ward is not your real name. I'll put the word around that you're the good guy and, after that, they'll just have to accept you. What's the phrase, love me, love my dog?\"\n\n\"Woof!\""
    ],
    "authorname": "MissLisaJones",
    "tags": [
        "puppy",
        "newspaper",
        "reporter",
        "princess"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/royal-flush-ch-10"
}
{
    "title": "Succubus Summoning 108",
    "pages": [
        "Phil opened his eyes.\n\nHe was lying on a cushioned bench. He felt perfectly relaxed. His body was surrounded by a warm pleasant glow. He looked up and stared into the face of a beautiful woman with long, flowing blonde hair. She was a vision of radiance.\n\nHad he died and gone to heaven? Was this an angel come to welcome him?\n\nHe groaned in pleasure as an orgasm shuddered through his body. A surge of relief flowed through him as his hips bucked upwards and he spurted his seed into a soft, welcoming vagina. Warm walls lined with thick honey squeezed and undulated around his cock, teasing out both the orgasm and his pleasure.\n\nNo angel, Phil thought as the orgasm finally subsided and he lay back spent. It was Nurse Honey.\n\nHe looked up into the milky pools of her eyes. She smiled and kissed him lightly on the brow before dismounting from his body with soft squelching sounds. Phil stared at the voluptuous curves of her body as she walked over to a shower set in a black marble alcove. Hot water gushed over the tanned curves of her body and steam billowed up around her.\n\n\"You should take more care, fledgling,\" she said as she emerged from the spray, \"unless you're in a rush to know me more intimately.\"\n\nA pair of tiny hands pushed out against the skin of her exquisitely curved bottom. They were followed by a tiny anguished face, its mouth open in a soundless scream. Nurse Honey looked down and smiled. The struggling figure was pulled back beneath the surface and the tanned skin of her ass was unblemished and perfect once more.\n\nPhil knew exactly what Nurse Honey meant by more intimately. The room suddenly felt colder and he shivered.\n\nHoney squeezed herself back into her skin-tight rubber nurse outfit.\n\n\"Until next time,\" she said. She blew him a kiss and then walked away past a line of black marble shower cubicles.\n\nShe met Rosa and Verd\u00e9 coming from the other direction.\n\n\"Thanks Nurse Honey,\" Verd\u00e9 said, looking ahead at Phil.\n\n\"The fledgling should show more restraint,\" Nurse Honey said, looking back at him.\n\nShow restraint, Phil thought. Like he had any say in the matter.\n\n\"Yummy,\" Rosa said, running her finger along Phil's chest. She lifted her leg in readiness to climb up on top of him.\n\nVerd\u00e9 tapped her on the shoulder and waved her finger.\n\nRosa pouted and put her leg back down.\n\n\"Come on fledgling,\" Verd\u00e9 said. \"Chop chop. We need to get you cleaned up. We've got places to see.\"\n\nShe ushered him off the bench and bundled him into the shower. He wasn't surprised to see the tap was in the shape of a round breast, but the water was warm and invigorating.\n\n\"We could have used this the first time round,\" he pointed out as the water sluiced Honey's residue off his body.\n\n\"The bath was more fun,\" Verd\u00e9 replied.\n\n\"I still say we should have filled it with blood,\" Rosa said.\n\n\"Maybe next time,\" Verd\u00e9 said.\n\nPhil came out of the shower and Verd\u00e9 was waiting for him with a towel. She dried him off, paying a little too much attention to his crotch.\n\n\"Now come on,\" Verd\u00e9 urged.\n\n\"Where are we going?\" Phil asked.\n\n\"We're going outside to see my garden,\" Verd\u00e9 replied, a note of eagerness creeping into her voice.\n\n\"Um, do I get clothes?\"\n\n\"Don't be silly,\" Verd\u00e9 replied.\n\n\"I can be naked too,\" Rosa said. Her breasts jiggled as she unhooked the studded belts wrapped around her body. \"Better?\" she asked as the discarded leather straps fell around her feet.\n\nIt really hadn't made much difference as far as Phil could see.\n\n\"We can be naked together,\" Rosa said. She put a hand around his waist and squeezed him up against her body. They walked down the corridor together.\n\n\"You can put your arm around me as well you know,\" Rosa said as they walked along a corridor decorated with lewd friezes. \"I won't bite you.\" She smiled, revealing one of her wickedly point fangs. \"Not right now anyway.\"\n\nPhil awkwardly brought his arm around until his hand rested on her hip. Her skin was warm and smooth to the touch.\n\n\"That's it,\" Rosa said. She patted his hand.\n\nTogether they walked up some stairs and then out into a small courtyard. Phil blinked. He was outside, but not under any sky he could recognise. The sky was pink rather than blue and dusted with spongy red clouds. He saw multiple planetary bodies suspended in the sky above him. They were closer and larger than either the moon or the sun on Earth.\n\nThe largest planet was blood red in colour and churned with constant motion. For a brief moment Phil thought the motions took on the form of a gigantic screaming face, but then he blinked and the face was gone. It had to be a trick of the eye, he thought.\n\nBehind the red planet was a smaller ball that looked to be composed entirely of dark iron. To the left of them was a pale, cold looking planet. It looked a little like the moon as glimpsed on a cloudless day, but was far larger and closer.\n\n\"That's the Char Pits of Rage,\" Rosa said, pointing up at the roiling red ball. \"And that there is the Soporifikos of Sloth,\" she said, pointing at the large moon.\n\n\"And we're the seventh spherical congruence twixt the Vortex Elementae and the higher plane of Lust,\" Phil said.\n\n\"No, silly,\" Rosa replied. \"That was yesterday. Now we're the thirteenth confluence of Lust Minora in the Sin Cluster.\"\n\n\"Um,\" Phil said. He thought about it and then gave up. The geography of hell was completely alien to him.\n\nVerd\u00e9 led them between an exotic looking fountain and a bed full of bright red flowers that seemed to move of their own accord. The paved path terminated at a neat little golden gate set in the outer wall. Verd\u00e9 plucked a small key from between her full breasts and unlocked the gate. It swung open without as much as a single squeak.\n\nStill with Rosa's arm around him, Phil followed Verd\u00e9 out of the main castle and into the grounds. He thought at first he'd stepped out onto a gravel path of small, polished yellow-white stones. Then he looked down and his stomach somersaulted. He saw knucklebones and broken bits of vertebrae and realised he was standing on a path of finely ground bone. On either side of the path, grass as red as blood waved in the absence of any kind of breeze.\n\n\"Ah,\" Rosa said. \"Help me with these.\"\n\nA pair of large wheelbarrows stood on the grass to the left hand side of the gate. They were made out of a metal so dark it was almost black.\n\n\"Carnivrillarofax has left a gift,\" Verd\u00e9 said. \"Let's go and feed the wargen.\"\n\nWith what, Phil thought. He looked inside and immediately wished he hadn't. The wheelbarrow was full of hacked up body parts. Phil saw hands, feet, limbs; all caked in dried blood. There was even a severed head, staring up at the sky with glassy eyes. \n\nPhil turned away in shock. His stomach convulsed as he felt his gorge rise. He bent over.\n\n\"You wouldn't be getting squeamish now would you fledgling?\" Rosa put a hand around his shoulder and whispered coldly in his ear. \"I would be most disappointed should you vomit all over our nice white path.\"\n\nPhil felt a light pressure as the point of her tail pushed up against his anus. He got the message and managed to choke off the stream and swallow it back down. His throat burned and his guts flopped and quivered, but no spew came out of his mouth.\n\n\"Humans,\" Rosa laughed. \"They build weapons that incinerate millions of their own kind in a flash and yet they can't look on a few lifeless body parts without throwing up.\"\n\n\"Who were they?\" Phil asked. The image of that severed head staring up into the sky would stay with him until the day he died.\n\nRosa shrugged.\n\n\"Carnivrillarofax sends them to us every so often,\" Verd\u00e9 said.\n\n\"We use them to feed the wargen,\" Rosa added.\n\n\"Oh look, here they are now,\" Verd\u00e9 said.\n\nFurther down the hill below them, twisted shapes were emerging from the trees. They were grotesque Frankenstein's abominations. The creatures looked like they had been roughly stitched together from various mutated body parts. Their skins were a patchwork of pinks, browns and yellows. Misshapen limbs jutted out haphazardly from bodies that ranged from around six to ten feet tall. They bounded up the hill like eager bloodhounds, ropes of thick spittle trailing out from many drooling mouths.\n\nAs he watched them charge up the hill towards him, Phil felt a strong urge to turn and flee. He started to back away and might have fled had he not bumped into Verd\u00e9. She put a hand on each of his shoulders.\n\n\"Rosa will not tolerate cowardice,\" she whispered in his ear. \"If you try to run she will feed you to them... alive.\"\n\nThe wargen reached them and skidded to a halt. Slobber rained down from misshapen mouths filled with cracked and yellowed teeth. They stood above them grunting and whining inarticulately.\n\n\"See, nothing to be frightened of,\" Rosa said.\n\nShe held up a hand to pat the central head of the lead wargen, an enormous beast with a large cock flopping around between its legs. The head snapped at her hand, gravestone teeth clunking together in the space Rosa's hand had previously occupied.\n\n\"Right,\" Rosa said, her eyes suddenly flashing ablaze with burning fury. She delivered a roundhouse punch that sent the beast spinning to the floor and then followed up with a kick to the beast's swollen testicles that had Phil's eyes watering in sympathy.\n\n\"Obeauyasto nida wargenascu!\" she yelled. Her hair crackled with static electricity and fires flickered around her fists and forearms. \"Obeauyasto nida wargenascu!\"\n\nCringing in terror, the creatures prostrated themselves before her. They whimpered and mewled like whipped puppies. Rosa stood above them, incandescent in her fury.\n\nPhil made a mental note to never, ever, piss Rosa off.\n\n\"Sometimes you have to remind them exactly who's master.\" Rosa turned and smiled sweetly back at Phil, once more looking like the slutty high school cheerleader.\n\nShe plucked a bloodied hand out of the wheelbarrow.\n\n\"Now who's first,\" she said to the cringing abominations.\n\nShe tossed the body part into the throng and it was quickly snapped up by one of the mouths. Humming a tune to herself, Rosa reached in for another body part.\n\n\"Now you have a go,\" Verd\u00e9 said, gently pushing him in the direction of the second wheelbarrow.\n\nThe two succubi looked at him expectantly as Phil reached gingerly into the grotesque contents, trying not to look at the wheelbarrow's morbid cargo. His hand closed around something that was cold and clammy to the touch and he felt a burning sensation in his throat as his gorge rose.\n\nJust a piece of meat he told himself. Just think of it as a piece of meat.\n\nGrimacing, he plucked it out of the barrow. Verd\u00e9 and Rosa nodded encouragingly.\n\nPhil was about to throw it when he saw something that caused him to pause. The wargen were a grotesque jumble of human parts melted together. Embedded in the flesh of one of the horrors Phil saw a form he recognised. It was Jake.\n\nPhil stopped mid throw.\n\nThe body was twisted and withered, but it was clearly Jake. His flesh merged into the rest of the beast. He stared out with empty black eyes and gibbered through a drooling mouth.\n\n\"It's not really your friend,\" Verd\u00e9 said. \"It's the residue of the soul that was left behind.\"\n\n\"The rest ended up here,\" Rosa said. She rubbed her stomach and licked her lips.\n\nVerd\u00e9 shot her a cross look.\n\n\"It looks alive,\" Phil said.\n\n\"It's only a remnant,\" Verd\u00e9 said. \"Like the skeleton left behind when the body rots.\"\n\nPhil threw the body part in his hand. The remnants of Jake reached out for it with a small hand and mewled piteously when it was intercepted by one of the larger mouths.\n\n\"That's the spirit,\" Rosa said. She picked out a severed forearm and threw it to the pack.\n\nThey stayed there for a while, feeding the wargen. Phil became an automaton, numbing himself as he reached for part after part and tossed them to the wailing mouths. The head was the worst. He gripped it by the hair and threw it high. The largest wargen caught it in its mouth and crunched it like a nut.\n\nEventually they reached the bottom and nothing remained apart from little puddles of blood and gore.\n\n\"All gone,\" Rosa said, waving away the wargen.\n\nThe horrors grumbled and burbled, before slinking off back down the hill.\n\nPhil watched them go, his arms hanging slack by his sides. His fingers were caked in cold blood and bits of gore.\n\n\"That was fun wasn't it?\" Rosa said.\n\nShe lifted Phil's hand and smiled coquettishly at him as she put his gore-stained finger between her full lips and sucked.\n\nPhil stared into space.\n\n\"What's the matter fledgling,\" Rosa smiled. \"You look a little pale.\"\n\nShe released his arm and it swung down to Phil's side. Rosa waved her hand in front of his face.\n\nPhil continued to stare into space.\n\n\"Um Verd\u00e9, I think we might have broken our toy warlock,\" she said.\n\n\"Tsk Rosa. I keep telling you to be careful. Humans are far more delicate than us.\"\n\nVerd\u00e9 took Phil by the hand.\n\n\"Come fledgling. We'll go and have a nice relaxing fuck in my special garden and you'll be as right as rain again.\"\n\nPhil was unresisting as Verd\u00e9 led him away from the hill and back into the castle grounds. They walked on a path of ground bone past hedges of dark, twisted vines. Verd\u00e9 led him through the maze to a clearing of lush, verdant vegetation.\n\n\"This is my garden,\" Verd\u00e9 said, excited like a little girl. \"What do you think?\"\n\nThe green grass was soft and moist beneath Phil's naked feet. He was surrounded by a riot of plant life that seemed somehow lascivious in nature. Flowers, red like the lips of whores, provided splashes of wild colour amongst the unruly walls of greenery. Vines coiled and twisted over each other and terminated in strange protuberance that were phallic in appearance. The air was thick with a heady scent, sweet and laden with sin.\n\n\"It's a little overgrown,\" Rosa sniffed.\n\nVerd\u00e9 snapped her fingers and vines erupted from the ground. They coiled around Rosa and lifted her up off the ground. In an instant the other succubus was completely trussed up and helpless.\n\n\"I always knew you had a kinky side,\" Rosa growled sultrily, completely unfazed by her sudden imprisonment.\n\nVerd\u00e9 ignored her and gently pushed Phil deeper into the clearing.\n\n\"Hmm, now if only we had a nice soft bed,\" Verd\u00e9 said. \"Ah ha.\"\n\nShe flashed Phil a beaming smile and gently tapped the green wall of a gigantic bulbous plant. The plant opened out with a moist liquid sound and unfolded enormous pink petals. The air was flooded with a sweet scent that slithered through Phil's catatonia and sent blood rushing to his groin.\n\nVerd\u00e9 pushed him back onto a gigantic petal. The surface beneath him was moist and spongy, like a large, extremely soft bed. Still smiling, Verd\u00e9 took off her green cloak. She unhooked her brassiere and let it fall down around her feet. Phil blinked as his eyes drank in the beautiful, naked curves of her body.\n\nThe heady scent of nectar intensified around Phil. It enveloped him and sent his senses spinning. It was like the light-headedness of being drunk, but with none of the nausea. Even after the horrors he'd witnessed Phil felt arousal surge through him in a wave, lifting his cock up to full erection.\n\n\"I knew my little garden would get you back in the mood,\" Verd\u00e9 smiled.\n\nShe hopped up onto the petal and straddled his body.\n\n\"I won't be rough,\" she said. \"We'll have a nice, slow, comfortable fuck together.\"\n\nShe gently eased Phil's cock into her silky pussy. She sighed in contentment as she slid all the way down on him. The horrors of feeding the wargen fell to the back of his mind as her soft warmth enveloped his erection.\n\n\"Hey! Don't I get to join in?\" Rosa, still tangled up in the vines, called out.\n\n\"Not this time,\" Verd\u00e9 said. \"You can have some fun with the vines instead.\"\n\nShe turned back and smiled mischievously at Phil.\n\n\"Or rather they can have some fun with you.\"\n\n\"Oh you mmphf---\"\n\nRosa was cut off, her cries muffled as something was forced into her mouth.\n\n\"Now it's just you and me,\" Verd\u00e9 said, \"and a deliciously slow fuck.\"\n\nShe arched her back and slid her hips up and down with exquisite slowness. A mounting wave of pleasure built in Phil as her soft vaginal walls brushed against his cock.\n\nPhil looked up at Verd\u00e9's face as she sighed her pleasure. She looked radiant. Behind her the sky was a deep pink in colour. Lush, leafy branches filled the edges of his vision. Verd\u00e9 caressed her heaving breasts and smiled down at him as she finished another long, teasing stroke. The air was filled with gentle drifts of pollen. If he ignored the reality of his predicament, Phil could almost imagine he was back at high school and fucking the star cheerleader on a lovely summer's day.\n\nWhy not. It was a nice fantasy.\n\nHe sank deeper into the luxuriously soft petal and sighed as Verd\u00e9 slowly moved up and down on him. Her pussy was slick with her juices and he moaned as his cock slid deep into her tight warmth.\n\nVerd\u00e9 raised her arms and sang some lilting words in an alien language. The foliage around them began to rustle and shake. Bright red blooms resembling full pouting lips pushed out of the undergrowth on stems that moved of their own volition.\n\n\"Whorelip,\" Verd\u00e9 explained.\n\nShe raised her head and sighed as the flowers wound around her body on slender green stalks. The red blooms, pouting like lips, planted kisses all over her naked flesh. The flowers fastened themselves to her nipples and began to suckle with a motion Phil found both bizarre and arousing.\n\nVerd\u00e9 shuddered with pleasure and Phil's cock was buffeted with waves of pleasure. She ceased her movements and instead sat down on Phil with his cock buried deep inside her. She squeezed his erection with teasing little contractions.\n\nThe vines twined around Phil's arms and legs. He felt alarm at first, but that quickly faded as the flowers brushed his flesh. The vines weren't holding him too tightly and the attentions of the flowers as they softly kissed him were highly pleasurable. He closed his eyes, lay back and enjoyed the sensation. They wound up and down his body with light caresses. He closed his eyes and pictured himself lying on a giant bed while a multitude of beautiful women planted soft kisses all over his naked body.\n\nHe shivered as they latched onto his nipples and tickled them with what felt like tongues. And, rising above even that sensation, there was still the pleasure of Verd\u00e9's vagina wrapped snugly around his cock.\n\nThe interlude over, she again resumed her slow, sumptuous movements. She started slow, but then began to pick up speed. Her increased motion whipped the flowers around them into a frenzy. Their kisses became more passionate and Phil writhed in helpless ecstasy.\n\n\"Yes, fledgling,\" Verd\u00e9 murmured. \"Come into me.\"\n\nTwo of the blooms curled inside Phil's thighs and began to give full attention to his balls. He writhed and thrashed in pleasure as stiff little tongues tickled all over his scrotum. They gave him no pause or mercy as they sucked and tickled with mounting vigour. Above them, Verd\u00e9 bounced breezily up and down on his cock.\n\n\"Gnh!\"\n\nIt was too much. Their kisses were electric, sending sparks of pleasure arcing through his flesh. He squirmed and contorted, but could not escape their ministrations.\n\n\"It's time for release, fledgling,\" Verd\u00e9 sighed.\n\nHer wings unfurled behind her. She stared down at him with bright emerald eyes. She sank right down on him and her soft walls clamped around his cock and began to suck.\n\nPhil let out a pent up breath and slammed his hips upwards.\n\n\"Oh yes, fledgling,\" Verd\u00e9 murmured, her eyes closing with pleasure.\n\nPhil moaned as his cock spurted a great jet of cum into her hungry vagina. He felt the vibrations down his shaft as her pussy swallowed his seed and greedily sucked his cock for more. The flow of his semen didn't stop and he felt again the draining sensation as she absorbed his energy with it.",
        "She could have taken it all. A tap had opened within him and only she had the power to turn it off.\n\n\"That's enough,\" Verd\u00e9 said, touching him lightly on the lips with her finger. \"We're only having a gentle little fuck.\"\n\nShe released him and Phil lay back and took deep gasping breaths as his body recovered. Sex with Verd\u00e9 or Rosa was like taking part in an intensely physical activity and intense physical activity was something Phil had spent most of his teenage years trying to avoid.\n\nVerd\u00e9 lay next to him on the giant petal. She put an arm around his neck and rested her head on his shoulder. She folded a wing over him like a sheet.\n\n\"Mmm, that was very nice,\" she sighed.\n\nPhil would have said something, but he was too busy trying to get his breath back. A succubus's idea of a gentle fuck was apparently still fucking a man to within an inch of death.\n\nThe red blooms returned, eager to resume their kissing, but Verd\u00e9 shooed them away. Her hand slid down Phil's side and squeezed his body against hers.\n\n\"This is my garden,\" Verd\u00e9 said, staring up at the pink sky. \"I like to come out here and relax. I find it peaceful.\"\n\nPhil lay back and watched red clouds scud across a limitless pink canvas. It was indeed peaceful, and relaxing, if he tried not to think about what exactly he was lying on, or lying next to. The moment was sweet, but as beautiful as she was, Phil couldn't forget what Verd\u00e9 was. She was a succubus. A demon. A sexual vampire. She might enjoy playing with him now, but ultimately he was just a meal to her.\n\nStill, he could lie back and enjoy the moment for now.\n\nMotion caught his gaze. Something was moving in the vegetation far above them. It looked like a cocoon or chrysalis, or maybe some kind of plant pod. It was bright green in colour and suspended from a monstrous, twisted vine. The pod twisted and shook. The walls swayed and pulsed. It looked as if something was trapped inside and struggling to get out.\n\n\"What's that?\" Phil asked, pointing up at the quivering pod.\n\nHe wasn't sure he wanted to know. By his estimation the pod was roughly big enough to hold a full grown man.\n\n\"Oh that,\" Verd\u00e9 replied. \"That's just a wayward soul my plants have snared.\"\n\n\"I didn't realise the plants are carnivorous,\" Phil said, looking around in alarm.\n\n\"They aren't,\" Verd\u00e9 said, smiling at Phil's fearfulness. \"They catch intruders, but they don't eat them. Instead they subject them to the wildest pleasures.\"\n\nThe pod pulsed rhythmically, the motions lascivious and strangely arousing. Verd\u00e9 rubbed a finger along the moist slit of her pussy.\n\n\"For how long,\" Phil asked.\n\n\"Why forever,\" Verd\u00e9 replied. She sighed as she pushed her finger deeper.\n\nPhil watched the twitching pod. A sudden chill ran through his bones. He no longer felt quite so comfortable on the giant petal. Thankfully the melancholic peace was broken by Rosa's muffled complaints.\n\n\"I suppose we should see what she wants,\" Verd\u00e9 said. She slid off the petal and turned to help Phil back to his feet.\n\nRosa was currently tied up. Literally.\n\nThe vines had her trussed up like a Sunday roast. Her hands were bound behind her back and her legs were folded up beneath her stomach. Bulbous tips, phallic in shape, were pounding back and forth into both her ass and pussy. Another phallic protuberance filled her mouth. Rosa's cheeks were flushed and juices from her pussy were dripping down on the plant below, whipping up the stalks into even more frenzied activity.\n\nVerd\u00e9 put a hand on her mouth to stifle a girlish giggle.\n\n\"Enjoying yourself?\" she asked.\n\nRosa mumbled something in reply, her mouth too full to make any articulate sounds. She glared at Verd\u00e9.\n\nVerd\u00e9 reached into the writhing patch, gripped a vine and pulled the phallic tip out of Rosa's mouth with a popping sound.\n\n\"Floverdenesca kalt insineratum!\" Rosa hissed. There was a bright flash, a crackling sound and then a strong smell of burning. When Phil's eyes recovered he saw Rosa sitting askance in the middle of a small patch of black ash.\n\nThe succubus stood up and haughtily composed herself. She glared at Verd\u00e9, her blue eyes flaring red. The other succubus was doubled up in laughter.\n\nPhil noticed other pods hanging above them in the twisted foliage. Their motions were slower and more languid. He wondered how long their victims had been trapped within them. He also wondered where they'd come from and how they'd got here.\n\n\"Where do they come from?\" Phil asked. \"The people the plants catch.\"\n\n\"Your world mostly,\" Rosa answered.\n\n\"There's a weak point in the dimensional fabric not far from the castle grounds,\" Verd\u00e9 said. \"It's easy for individuals to slip through from your world to ours. They don't even need to know magic. Dreams are enough.\"\n\n\"Yeah, they come through over that way somewhere,\" Rosa gestured.\n\n\"My plants get most of them. The lucky ones anyway.\" Verd\u00e9 said.\n\n\"Over that way?\" Phil asked.\n\nRosa nodded.\n\n\"Smogglerfoggum!\"\n\nPhil's magical abilities might be limited, but he could still cast a basic smoke bomb. The opportunities for pranks and random hilarity meant all the students at Wargsnouts knew that one!\n\nHe didn't look back to see if he'd taken Rosa and Verd\u00e9 by surprise or not. He just put his head down and started running.\n\nA weak point in the dimensional fabric.\n\nHe knew what that meant.\n\nA way home! He could escape!\n\nThe garden seemed to be getting more and more dense and overgrown. Thick vines coiled and tangled around one another. They looked as gnarled as ancient tree trunks. Strange, illicit scents filled the air and even stranger blooms turned to track him as he sprinted by.\n\nHe heard a flapping sound from above and a shadow fell across him.\n\nPhil tucked his head down and ran faster. He jinked left down an ancient trail. The plants were so dense and overgrown here they formed a thick canopy that blocked out most of the light. It would be hard for the succubi to follow.\n\nLarge mantrap leaves loomed out of the foliage on either side. Their plush inner surfaces were lurid pink and moist with the stink of sex. Phil dodged to the left and right, skipping past the waiting maws.\n\nGot to be faster than that to catch me, he thought. I'm getting out of here.\n\nA thick creeper lay across the path in front of him. Phil jumped off the ground to hurdle it.\n\nThe creeper jerked upwards and caught his ankle.\n\nPhil tripped. His forward momentum was turned into an ungainly roll as he tumbled to the ground and crashed through the undergrowth. He came to rest against a large green stalk and lay there for a moment, dazed.\n\nShit, the damn vine had done that deliberately.\n\nHe was lying half in the undergrowth. Large spade-like leaves rose above his naked chest. The forest around him was quiet. The air was heavy with the scents of wild unfettered growth. It was too quiet, Phil thought. Even in the most peaceful of old forests there was always the ever-present hum of insects. There were no insects here. The only sounds he could hear were soft liquid sounds, like the passage of blood through a great network of veins and arteries.\n\nHe had to get back to the path.\n\nHe was about to stand up when two large flowers appeared in front of him. Their petals were thick and red like pouting lips. Behind the petals the rest of the flower head was swollen and bulbous. It looked like a large sac on the end of a slender green stalk. Despite the absence of any kind of features, the flowers looked to be regarding him with curiosity.\n\nPhil hoped that was all. He tucked up his knees and started to get back to his feet, slowly as to not disturb the plants.\n\nThe two bulbous sacs contracted with a whoosh as both flower heads exhaled a large cloud of pollen or spores into his face. Phil was inundated with a powerful musky perfume. It flooded his senses and he lost all control as his mind was bombarded with a barrage of pornographic images and sensations.\n\nHe flopped back onto the ground. Somewhere he thought he heard the sound of girlish giggling.\n\nBlood surged to a raging hard on. His cock felt on fire. He longed to plunge it into something to extinguish the fires raging through his body.\n\nSomething found him.\n\nHis erection was enveloped in something that was both soft and sticky. Phil looked up to see an enormous flower battened around his groin. Petals covered in fine silky hairs tickled his stomach, thighs and balls. His cock was buried deep in the flower itself and the walls tightened their soft grip around his cock.\n\nThen the suction started.\n\nPhil lay back helplessly as the flower head pulsated obscenely at his groin. A multitude of silky little hairs brushed up and down his cock, tickling him into paroxysms of ecstasy. Small red flowers, whorelip, crawled out of the undergrowth and planted little kisses all across his body.\n\nPhil squirmed and writhed as the lascivious bloom bobbed and sucked on his member. He heard that liquid sound again, only louder now as fluids were pumped up the thick stalk of the flower.\n\nHe tried to sit up and the two other flowers blew kisses at him that surrounded his head in clouds of soporific perfume. Phil lay back down, lethargy settling down over his limbs like a comfortable blanket. The big flower between his legs sucked harder and drew his cock up into a sticky secret chamber. The entrance to the chamber sealed around the base of his cock, trapping his member inside. The flower gurgled ominously as the chamber began to fill up with a sticky fluid.\n\nPhil tried to struggle, but he didn't have much control over his limbs and the flower was sealed tightly around the base of his cock. The chamber expanded, sucking more fluids into it. Phil's cock was flooded with a thick, gooey liquid. It sank into his skin and turned the burning desires running through his body into a raging inferno. He began to involuntarily thrust his hips up and down.\n\nHis motions triggered a response in the plant as the chamber began to vibrate around his cock, squeezing more of the sticky fluids into his flesh. The stalk trembled as the plant pumped more sap into the chamber. Phil twitched and shuddered.\n\nHe heard more girlish giggles. The foliage parted as one of the pods descended from above. Two thick leaves peeled open and revealed the upper body of a stunningly gorgeous girl. Her hair fell around her shoulders in an emerald waterfall. Her lips were a lush jade. Her ripe breasts were crowned with olive green nipples. Lime coloured sap leaked out from them. Phil wasn't surprised to see that the flower stalks trailed back to the inside of the pod.\n\nThe pod girl's bright green eyes flashed with cruel amusement as she looked down at his writhing body. She pouted her lips and exhaled a sigh.\n\nThe flower vibrated passionately around Phil's trapped member. He was going to, he was going to...\n\nFuck.\n\nHis back convulsed as he rammed his hips upwards. The chamber contracted around his cock and pulled the tip upwards and through a sticky aperture at the other end. It held him in place and milked him with steady pulses as he ejaculated great gouts of semen into another waiting chamber beyond. He felt his energy pulsing out with it, and the lethargy in his limbs grew stronger.\n\nPhil fell back, spent. He knew it would only be a temporary respite.\n\nThe pod girl blew him a kiss. The main stalk tensed as more sap flowed down it and into the waiting chamber. Phil's cock was hard again and twitching in a matter of seconds. \n\nHer chamber massaged his cock with a series of slow, steady pulses. It didn't take long before the tip of his cock was again pushed through the sticky aperture as the plant girl milked another orgasm from his body.\n\nFlexible green vines spilled out from within the pod and slithered towards Phil. His limbs felt as heavy as wet clay. He didn't move or struggle as the vines coiled around his ankles and bound them together. They wound up his body, binding his arms to his sides.\n\nAll the while the big flower continued its remorseless pleasuring of Phil's over-sensitised cock. He gave an involuntary cry as a third orgasm erupted from his body.\n\n\"Oh dear, you do seem to have got yourself in quite a predicament.\"\n\nPhil looked up and saw Verd\u00e9. She was crouched above him on a thick branch, her wings folded behind her.\n\nThe pod girl sent out more vines until Phil was firmly trussed up. She lifted him up off the ground and began to pull him towards the pod. Her flower continued to suck at his cock with wet slurping sounds.\n\nPhil looked up at Verd\u00e9, his eyes imploring.\n\n\"It was very silly of you to run away like that, fledgling,\" she said, her eyes sad. \"The dimensional weakness only runs in one direction. There is no way home here.\"\n\nThe pod girl smiled and opened her arms to receive him. First Phil's feet were pulled inside, and then his body followed. Inside the pod it was warm and moist, like being enclosed in a giant vagina. Sticky fluids squelched up between his toes. The plant girl pressed her body against his, her soft breasts squashing against his chest.\n\nPhil looked up at Verd\u00e9, panic in his eyes.\n\n\"You've found a pleasant end at least,\" she said, trying to smile brightly.\n\nThe thick leaves began to roll back up. It didn't feel too bad inside, Phil thought. The girl's body was soft and warm against his.\n\nHow long?\n\nWhy forever.\n\nThe plant girl pouted her lips for a kiss and brought her face towards his, eager to seal his imprisonment with her lips on his.\n\nAn eternity of swaying on a vine like a never to ripen fruit...\n\nNo!\n\n\"Floverdenesca kalt Insineratum!\"\n\nPhil yelled the words and the world exploded with brilliant white light. When he opened his eyes again he was sitting at the centre of a scorched patch of earth maybe thirty feet in diameter. Fine black ash gently rained down on him. Above him a few twinkling lights were drifting up into the heavens, like bright stars returning to their homes.\n\nVerd\u00e9 hovered above him. She flapped her wings and slowly descended to the floor. Rosa landed just behind her.\n\n\"Um, sorry about your plants,\" Phil said.\n\n\"Oh don't worry about that,\" Verd\u00e9 said. She crouched down. \"Fire only clears the way for new life to bloom.\"\n\nBetween her hands a tender green shoot poked up from beneath the ash and began to grow.\n\n\"So we can burn it down again,\" Rosa added, smiling as fires flickered in her eyes.\n\nShe put an arm around Phil's shoulder and steered him back towards the castle. Verd\u00e9 blew on the new shoot and watched the spreading growth with a satisfied smile. She stood back up and followed the other two back to the castle.\n\n\"That was an impressive piece of fiery destruction, fledgling,\" Rosa murmured in his ear. \"It's made me very horny.\" Her hand cupped around Phil's balls.\n\nTo be continued..."
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "warlock",
        "magic",
        "plant"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/succubus-summoning-108"
}
{
    "title": "M Club Ch. 07",
    "pages": [
        "The first rule of M Club is: You don't talk about M Club. The second rule of M Club is: You don't talk about M Club. Third rule of M Club: No touching anyone but yourself. Fourth rule: No recording devices. Fifth rule: No clothing below the waist. Sixth rule: If this is your first time at M Club, you must masturbate. \n\n* * *\n\n\"Hey Den.\"\n\nDenby recognized Andy's voice and looked up from her band locker. Her boyfriend's best friend slouched against the doorway and he smiled. His body language suggested to Denby that he might have been watching her for a bit before saying anything. She was wearing a knee-length skirt and form-fitting blouse, so the view probably wouldn't have been anything terribly sexy or revealing from behind. She decided not to worry - it wasn't like she hadn't given him plenty to look at over the last week, anyway.\n\n\"What's up?\"\n\nAndy shrugged, then crossed to his locker not far away and began unlocking it. \"Was just gonna practice for a bit, since contest is this weekend. You?\"\n\n\"Same,\" she said. Denby played trumpet and Andy the trombone. It was that loose band connection by which she knew Andy prior to dating Sean, a non-band member.\n\n\"Say, think you could spare a few minutes to help me out with my duet?\"\n\nDenby pulled out her horn case and closed the locker. \"Didn't know you were doing one.\"\n\n\"Yeah, I've got a trumpet/trombone duet with Billy, only we rarely get to practice together,\" he said. \"Only afterschool or weekends, and we've both been too busy to meet up much. I know it's not helping you any, but you're the only other trumpet who's got this hour free. It'd help a lot.\"\n\nDenby shrugged. Billy was something of a flake and she saw no harm in helping a friend, and that's how she viewed Andy these days. Not just Sean's friend. Besides, it would give her a chance to ask him one-on-one about the date he'd gone on with Lisa over the weekend. She'd already heard Lisa's take, which was a mixed bag, and wanted to know how he thought it went.\n\n\"Yeah, no problem. You have the music?\"\n\nAndy did and as soon as he had his horn out they found a practice room and closed the heavy door behind them. Both took a couple minutes to get their horns out and warm up. As Andy handed her the sheet music, Denby broached the subject.\n\n\"So, how'd your date with Lisa go?\"\n\nAndy glanced up at her, then turned his focus back to digging music out of his folder. \"Didn't she already tell you?\"\n\n\"Yeah, she told me some,\" Denby said, wondering if he thought she was prying on Lisa's behalf. \"But she was kinda vague. Just wondering what your take was. It's not my business, so you don't have to talk about it if you don't want to.\"\n\nAndy shrugged, then slumped back in his chair. \"It went okay, I think. I dunno. You know how first dates can be awkward.\"\n\nDenby nodded. \"Been there, done that.\"\n\n\"I like her. She's cool. Smart. Cute.\"\n\nIt sounded like Lisa's take on him - cute, fun, polite. And the unspoked \"but.\"\n\n\"But?\" She figured she might as well see how far she could dig.\n\nHe shook his head. \"Can't believe I'm talking about this, but sure. I trust you. Just don't go taking this back to her.\" Denby nodded. \"I think we're in this weird spot because of the club. It's like we've done things together that normal couples wouldn't do for quite a while after they start dating, and maybe that's supposed to mean it's okay to do that?\n\n\"I mean, dinner went fine and all, though there were quite a few awkward silences. I guess we don't have a huge amount of common ground, but I don't mind talking about her interests. And then afterward, we're just hanging out, and then we kissed. And, you know, made out for a while.\"\n\nDenby nodded, feeling a little bit of that flushed embarrassment that he was likely experiencing. Lisa had pretty much echoed the same story. The making out had consisted mostly of kissing. She'd let him feel up her breasts, even under her shirt, but that had been the end of it. Lisa said that he'd asked about them masturbating together, apparently like they'd done after leaving Escape last Thursday, but she'd declined. Lisa just said it felt a little awkward - like that session in his car had just been club business, but him asking after their date was like taking a step too far for a first date. Confusion indeed.\n\n\"Lisa didn't want to go quite as far as you did.\"\n\nAndy nodded. \"So she told you that much. I was totally fine with that. Certainly not pushy. Just, you know, a little confused. I mean, what's okay in one place and not in another? Or was she just not in the mood? Or was it me? Is she not really interested in me?\"\n\nDenby felt sorry for him, since she didn't really know what Lisa thought about him. She knew what she'd been told, but that was probably only part of the story. No one wanted hurt feelings, and their club only made things more awkward. How this afternoon's planned meeting back at the park would go she could only guess. \n\n\"I'm not going to speak for her,\" she said, \"but I think she's working through a lot of the same uncertainty you are. I know she likes you. She just doesn't have much dating experience, so it might be a little rough going at the start. I'd suggest just taking it easy, small steps, and see where it goes.\"\n\nAndy nodded. \"Thanks. Good advice.\"\n\nTo avoid arousing suspicion of the band director, they started working through the duet. Andy was a good player and was mostly just interested in getting the trumpet part in his ear. He didn't mind her sight-reading fumbles and went out of his way to express his appreciation for her sparing time to help.\n\n\"Question,\" Andy said after they finished working through the end of the duet.\n\n\"Shoot.\"\n\n\"And this can't get back to Lisa.\"\n\nDenby felt a bit of trepidation agreeing to that behind her best friend's back, but she figured it was relationship related and she really did hope things could work about between the two of them. \"Sure.\"\n\n\"I find Lisa to be...how do I put this? Intimidating? Do you ever get that?\"\n\nDenby was surprised by that term, since Lisa was about as meek a person as she knew. \"Intimidating?\"\n\n\"Smart. I mean, everyone knows she's a freaking genius. Throughout the date I had this sense that she was judging me, analyzing everything I said, even though she went out of her way not to say anything or act all smart. Maybe I'm just being super self-conscious, but you know what I mean?\"\n\nDenby did know. She'd felt the same thing around her friend, though perhaps not to the same degree. Denby had always kept her grades up, but she knew it took far more effort to accomplish what Lisa could do with ease. And he was right - Lisa went above and beyond not to act like it, but sometimes that seemed to have the opposite effect. Over the years, though, Denby had learned to accept that Lisa didn't feel superior, but just different. Lisa knew she was smart, but was also painfully aware of her shortcomings in other areas. Once Denby figured out that Lisa appreciated her for her own strengths rather than judged her by perceived weaknesses, things had smoothed out.\n\nHer experiences with Lisa had probably been essential in Denby's relationship with Sean ever getting off the ground. Sean was much like Lisa, very smart and seemingly always analyzing everything around him on a level others couldn't perceive. But he did his best to make it a non-factor. Sometimes he was better about it than others, and Denby had gotten irritated a few times.\n\n\"Yeah, I know what you mean. I get it with her and with Sean.\"\n\nAndy chuckled. \"Oh, yeah, Sean's kinda the same. But at least with him I know I'm more athletic and he has no problem letting me hang that over him. He acts all smart, then I push him around or kick his ass at video games, and we're all good. Not sure I can do that with Lisa.\"\n\nDenby smiled. \"No, probably not. But with Lisa, just know that she's not judging you for it. She gets it and she's good about accepting everyone as different. At least, that's how I see it.\"\n\n\"I'll try to keep that in mind,\" he said.\n\nThey ran through the music one more time and Andy said he was feeling better about the duet. He thanked her yet again for her help. Denby checked the time and saw that she still had half the open period left, plenty of time to get in a little work on her own solo.\n\n\"You excited for this afternoon?\" Andy said as he tucked the duet music away in his folder.\n\nShe assumed he was talking about their planned M Club meeting after school. \"Yeah. You?\"\n\n\"Always,\" he said, giving her a wink. \"Say, can I ask you sometime maybe a little personal?\"\n\nDenby felt her heart flutter just a bit at the question. On the heels of mentioning the club meeting, this could be awkward. \"Okaaay...\"\n\n\"Are you wearing panties?\"\n\nPersonal? Yes. Completely unexpected? Definitely. Inappropriate? Debatable, given things between them.\n\n\"Uh, yeah. What sort of question is that?\"\n\nAndy, rather than looking embarrassed, smiled conspiratorially. \"I figured. But I was also thinking you could give everyone a surprise at the meeting today if you weren't.\"\n\nDenby opened her mouth to answer, but wasn't sure what to say to that. Yeah, it would be a surprise. Would anyone care, though? What would Sean think?\n\nAs if reading her mind, Andy said, \"I can almost guarantee that Sean would think it's hotter than hell. And any time he sees you in a skirt or dress again, he'll be wondering.\"\n\n\"Maybe,\" she said. Even as Andy laid it out for her, she could see Sean's reaction. Yes, he'd probably be turned on by the idea, and yes, he'd be curious in the future. She could see him asking for a peek, and that would give her something to tease him with. The more she thought about it, the more she liked the idea. It would be an effortless way to flash him in public, get him all hot and bothered when he couldn't do anything about it.\n\n\"You're thinking about it,\" he teased. \"You know I'm right.\"\n\nDenby rolled her eyes. \"Maybe. Probably.\"\n\n\"You gonna do it?\" He looked very expectant and Denby felt like she'd be chickening out at this point if she didn't go along with his suggestion.\n\n\"I don't know. We'll see. Maybe if I have a chance to take them off before the end of the day.\"\n\nAndy shook his head no. \"You'll forget, or wuss out. Take them off now.\"\n\n\"No way!\" Denby felt the heat rise in her face as well as down below. His audacity was far beyond anything Sean had ever said or done with her.\n\nAndy just grinned. \"Oh come on. It's not like I haven't seen them before. Besides, you don't have any pockets. If you take them off now and I could hold them for you.\"\n\nDenby's jaw dropped. Audacity, indeed! Had he been planning this, to get ahold of her panties? Did he really want her to present the surprise to Sean or was he simply in this for his own ends? If the latter, she wasn't sure how she felt. There was something both dirty and kinky about it. \n\n\"I don't think that's a very smart idea,\" she said.\n\n\"But you like it,\" he said. \"I can see it in your eyes. You want to surprise Sean. You want to be daring and one-up Lisa.\"\n\nOne-up her friend? Where had that come from? There was no competition here. Only, when she thought about it, she remembered how she felt when Lisa unveiled her fully shaved pussy the other day. That had felt like a move meant to draw Sean's attention, even if it was subtle. She'd let it go quickly enough, but now...\n\n\"Maybe you're just a panty-sniffing perv,\" she said with sass, throwing it back at him while her mind tried to sort out her conflicting thoughts.\n\nAndy smiled and shrugged. \"So what if I am? Doesn't mean I'm not right about the rest.\"\n\nDenby almost choked on his words. Holy shit, he really does want my panties for his own use! It was weird, but she wasn't nearly as offended as she probably should have been. She liked the attention the guys gave her when she stripped and masturbated. She knew perfectly well that Andy probably had fantasized over her, both before and after he'd seen her naked. Was this much different? If Sean ever found out, especially if she hid it from him... Yes, it was different.\n\nFor every reason not to do it, though, Denby found her resolve to resist crumbling. She liked the idea of being fantasized over. What if she let him take her panties now, but then made him give them back at the club meeting? After revealing her lack of panties to Sean, she could then come clean that it was Andy's suggestion and that he'd held onto them. Would Sean be mad? She didn't think so, and she could go out of her way to make it worth his while not to get upset. Promises to do it again, give him sneak peeks. Yeah, it would be okay.\n\n\"Fine,\" she said before she could talk herself back out of it.\n\nAndy raised his eyebrows. \"Seriously? You'll do it?\"\n\nDenby glanced back at the closed door to their practice room, then back at Andy. He looked as excited as a kid on Christmas morning. She couldn't believe she was about to do this. Oh how their little club had changed her.\n\n\"Practice something,\" she said, nodding toward his trombone. He caught on and quickly started playing through a few measures of his duet, all while his eyes scarcely left her.\n\nDenby stood on slightly shaky legs and took a deep breath. She reached up underneath her skirt and hooked her thumbs in the waistband of her panties. With a bit of a wiggle, she had them sliding down her legs. As the fabric peeled away from her crotch, she realized just how damp she'd become in the last few minutes. She had a moment of panic, knowing that he was expecting her to hand them over and not wanting him to realize how aroused she had become. The embarrassment would be too much.\n\nThe sheer baby blue fabric came into view beneath the hem of her skirt and Andy fracked a note on his horn. She couldn't help but chuckle and threw caution to the wind. Fuck it - he probably already knew this was going to turn her on. Hell, he was probably getting aroused just watching. She glanced at his crotch and couldn't tell one way or the other given the odd folds of his shorts and the way his t-shirt hung over it.\n\nHeart pounding, Denby slipped the panties the rest of the way down and stepped out of them. She held them before him, stretched out between both hands so he could get a good look.\n\n\"Satisfied?\"\n\n\"Damn, those are cute,\" he said, setting his horn aside and reaching out to take them reverently. \"Wish I'd seen them on you first.\"\n\n\"Too late for that,\" she said, sitting back down and self-consciously crossing her legs. She could feel the slickness in her crotch and desperately hoped that would soon ease, especially without her panties on. \n\n\"Look pretty see-through.\"\n\n\"Uh huh. Now that you got them, you gonna sniff them, perv?\" She really hoped she could shame him into putting them away before she got any more uncomfortable.\n\nHe glanced up at her as if trying to figure out whether she really meant it. Hesitantly, he brought the fabric up to his nose and inhaled deeply. Denby watched in amazement that he actually had the balls to do it right in front of her. His eyes closed and his head rolled back as if he was on the brink of orgasm.\n\n\"Heavenly,\" he said.\n\n\"Seriously? That's just...weird. I don't get it.\"\n\n\"Pheromones,\" he said, opening his eyes. \"It's like Viagra.\"\n\nDenby had figured as much, even if she didn't completely believe it. Maybe it was real, maybe it was psychosomatic. If the effect was the same, did it matter?\n\n\"So, you're using my panties to get off,\" she said. \"I'm sure Sean, or Lisa, will be thrilled to hear that.\"\n\nHe abruptly pulled the panties down and looked worried. \"You aren't going to say anything, are you?\"\n\nDenby shrugged. \"Probably not. It's not like I'd look any better in this.\"\n\nAndy chewed his bottom lip for a moment. \"Yeah, this probably wouldn't look so good. Even if we claim it's club business.\"\n\n\"Is that what it is?\" She challenged him, unsure whether that was really the case or not.\n\n\"Well, yeah,\" he said. \"I'm not trying to steal you from Sean or anything. It was just a spur of the moment idea. Guess the club has kinda opened the gates of horniness.\"\n\nHe had that right. Den wondered if they shouldn't have made a rule about club business requiring at least three people. Of course, bringing it up now would only raise questions.\n\n\"Is it working?\" Even as she asked the question, she knew she was stepping deeper into the muck rather than running back to safety.\n\n\"Is what working?\"\n\n\"My panties.\"\n\n\"Oh, yeah, I suppose,\" he said, blushing. He had begun to fold the panties and held them in one hand back to his nose for another hit. \"Definitely.\"\n\nDenby picked up her trumpet to give her shaking hands something to do. \"Are you hard?\"\n\nAndy did a double-take, for which Denby congratulated herself on finally flipping the tables on him. She could see him worrying out what effect his response might have on her. \"Yeah,\" he finally said.\n\nEmboldened, she pressed on. \"Well, if this is club business as you claim, you're violating one of the rules.\"\n\nHe looked particularly nervous at that. \"Uh, which one?\"\n\n\"No clothes below the waist, I think it was.\" She couldn't believe how empowering it felt to have him on his heels, nor how much she enjoyed it.\n\n\"Shit, seriously? In here?\"\n\nShe shrugged innocently. \"You brought up club business. You gonna break the rules now?\"\n\nHe had the look of a deer caught in the headlights. A very horny deer, in any event. \"You've got clothes below the waist.\"\n\nTouch\u00e9, Denby thought. She uncrossed her legs and lifted her skirt up to her waist, revealing for the first time to anyone her freshly shaved mound. That had been her planned surprise for Sean at this afternoon's meeting. Now it would just be one of a couple.\n\nAndy's eyes boggled at the sight. He looked as nervous as she felt, and probably just as aroused. Now she had to buy completely in to this being club business, otherwise she was violating a whole lot of her relationship with Sean.\n\n\"You shaved,\" he said, unable to take his eyes off her.\n\n\"And you're stalling,\" she said, not unappreciative of his observation, but also eager to cover up against the chance of being caught.\n\nHe stood and stuffed her panties into his shorts pocket. \"Okay, fine,\" he said. \"But play something so Mr. Thurman doesn't come checking on us.\"\n\nDenby left her skirt pulled up, though it did fall on its own to partly cover her up. She retrieved her own solo music and began to hack her way through the beginning. It was easily the worst she'd played it since sight-reading, and that alone might be more likely to bring their band director in for a look. Deep breaths, she demanded of herself.\n\nAndy, meanwhile, skirted around the tight room until his back was up against the door. Nervous precautions, and one that she secretly appreciated. She had no desire to get kicked out of school right before graduation, let alone having to try to explain this to Sean or her parents. He took a deep breath and unzipped his shorts. A moment later, he extracted that thick cock, fully erect as he'd said.\n\n\"Is that good enough?\" Andy gave his member a few strokes while she stared at it, having given up any pretense of trying to practice her solo.\n\nDenby was tempted to let him off the hook, for both their sakes, but that new little dark corner in the back of her mind wanted to test him further. His back was against the door, so no one could easily walk in on them.\n\n\"Jerk off for me,\" she said, looking him straight in the eyes. \"And use my panties, you perv.\"\n\n\"You're insane,\" Andy said, but he didn't stop stroking. \"What if we get caught?\"\n\n\"I'll keep practicing. Just make it quick. If you're not bullshitting me about the sniffing, then it shouldn't be a problem, right?\"\n\nAndy was clearly weighing his options, between desire and nerves, courage and timidity. Denby left him to work it out for himself, while she brought her trumpet back up and this time really did make a sincere effort to practice her part. By shifting her angle slightly, Andy was clearly visible off to the side of her stand and she could tell he hadn't stopped rubbing himself. Just to tease him further, she spread her legs slightly.",
        "\"Fuck,\" Andy whispered.\n\nDenby could tell he'd picked up his pace. With his other hand, he had also retrieved her panties back from his pocket and raised them to his nose, burying his face in them. If he hadn't noticed their moisture before, he certainly did now. It was all she could do to keep playing her trumpet rather than with her pussy.\n\n\"This is nuts. This is nuts.\" Andy removed the panties from his face and brought them down to his cock. Denby paused in her playing to see what he intended to do with them. To her surprise, he wrapped them around his shaft and resumed stroking with even more intensity. She suspected he was close to climax and suddenly she worried about the mess that could leave in the practice room, not to mention the smell of sex and arousal. That thought suddenly made her terrified - even if no one walked in on them, someone could know. She was about to call him off, when the look on his face changed.\n\nAndy made a muffled grunt and slid her panties down to the end of his cock. Denby watched as his member throbbed several times, clearly emptying his load into her undergarment. It was simultaneously erotic and disgusting. Maybe if it had been Sean, but this wasn't her boyfriend. She had gone too far, and she knew it. Perhaps just as worrying, Andy hadn't put up much fight in coming along for the ride.\n\n\"Damn,\" Andy said, using the panties to wipe most of the glistening residual cum from the tip of his cock before working it back into his shorts with his spare hand. He then glanced down at her panties and up at her with a guilty look. \"Yeah, sorry about that. Didn't have any other option.\"\n\nDenby closed her legs and pulled her skirt back down, painfully aware that it probably did little to conceal the smell of her arousal. She needed to make a quick trip to the girls' room before her next class, and even then she'd be worried the rest of the afternoon.\n\n\"It's okay,\" she said. \"Just, yeah... Better than all over the floor.\"\n\n\"I'll get them cleaned up before giving them back,\" he said, trying to find a way to fold them up so he could put them and the mess back in his pocket. There didn't appear to be quite enough fabric to absorb and contain it all. She wasn't the only one with an awkward problem.\n\n\"Don't worry about it,\" she said. \"I've got others.\"\n\nThey awkwardly finished getting themselves adjusted and music put away. Denby was the first to get up and said she needed a few minutes before the next class.\n\n\"Yeah,\" Andy said, looking equal parts satisfied and worried. \"Thanks for helping me. And, the rest.\"\n\n\"Club business.\" Would she be able to convince herself of that if she said it enough times?\n\n\"Club business,\" he echoed. \"But, probably best to keep it, you know...\"\n\n\"Just between us. Yeah.\"\n\n\"Probably shouldn't make a habit of it.\"\n\nDenby shook her head no. \"I'll, uh, catch you after school.\"\n\nAndy just nodded. Denby, just before turning away from him, noticed a damp spot appearing on the outside of his shorts pocket. Shit. She pointed at it and didn't need any words to make it clear. He frowned and then gave her a quick wave as she slipped out of the practice room and closed the door behind her.\n\nAfter ditching her horn back in the locker, Denby hurried across the hall to the girls' room and locked herself in a stall in the otherwise empty restroom. She glanced at her phone and saw she had seven minutes until the end of the period. Seven minutes to get herself composed and maybe not smell so overpoweringly of sex.\n\nAs she reached for the toilet paper, images of Andy sniffing and then masturbating into her panties consumed her. The sight of his thick cock sliding in and out of that silky swath of fabric only got her increasingly wet. The thought of his semen intermingling with her own fluid-soaked panties - it was well over the line and disturbingly she found that even more exciting. What had become of the good girl she believed herself to be?\n\nWith one last peek under the stalls to be certain she was alone, Denby gave up any pretense of being able to squash her arousal in a way other than with release. Her fingers worked frantically across her clit, slippery with arousal, desperate to climax. Not once in the lead-up to that final release did she picture Sean in her mind, only Andy and her panties.\n\nSated, if only for the moment, she quickly wiped herself as best she could manage and washed her hands thoroughly. The chime of the end of hour bell startled her mightily, but she felt a sense of relief knowing she had finished before the wave of students would hit the restroom between classes.\n\nThe remainder of the afternoon passed in a haze, her mind conflicted between the feeling she had cheated a bit on Sean and the fact it didn't bother her quite as much as it should. The Club met, Sean and Lisa were just as surprised by her lack of panties as Andy had predicted, and they all pleasured themselves in one another's presence. Afterward, Denby never did mention anything about Andy taking her panties - it would remain their little secret."
    ],
    "authorname": "WatchingCloud",
    "tags": [
        "masturbation",
        "band",
        "panties",
        "panty sniffing",
        "teens",
        "school",
        "panty masturbation",
        "exhibitionist",
        "daring",
        "commando"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/m-club-ch-07"
}
{
    "title": "After Boot Camp",
    "pages": [
        "If you are reading this and you haven't read its predecessor, \"BOOT CAMP\", you really should. All characters are the property of Moxy Irish. \n\n* * * * *\n\nI.\n\nRecruit Emma Castille had won the game.\n\nHer male opponent had beaten her at the contests of strength, but she had outshined him in the contests involving stamina, intellect, and beating her own best time on a course. As well, the recruits that had been voted off were allowed to make one last vote. Castille won the vote unanimously. The ragged, sleep-deprived recruit barely kept her feet as she was announced the Best Recruit of the camp. She hadn't slept in 65 hours and the only thing she cared about was falling into bed. She had nearly made it back to her rack when the producer of the show stopped her.\n\n\"Congratulations, Miss Castille! Congratulations!\"\n\nShe smiled tiredly at the producer and stepped into the female barracks, heading for her rack. She murmured, \"Thank you, Sir. I need sleep, Sir. I'll be ready for conversation tomorrow.\"\n\nThe producer blinked at the \"Sir\". Man, there was something to be said for conditioning. He continued, not truly understanding how tired she was. \"Oh that is over with Miss Castille. You don't have to call anyone 'Sir' anymore. And if you want to sleep, we have your room at the hotel ready to go. It's fully stocked, and there are *gifts*.\" His voice ended on a cajoling note.\n\nShe fell into her rack fully dressed and pulled the blankets over her, turning her back to him. \"This is fine, thank you. Goodnight.\"\n\nHe stood there a bit nonplussed. There were gift baskets and food and a *robe* for heaven's sake! \n\nTaglieri prowled silently up to the man and murmured quietly in his ear. \"She'll be fine here. Let her sleep. The gifts and hoopla can wait until she is awake enough to enjoy them.\"\n\nThe producer jumped at Tag's voice, never having heard the Drill Instructor's approach. The tone of voice he used was polite but didn't brook argument. Without a word the producer turned and made his way out the door. \n\nTag uncovered Castille's feet. They were encased in her still damp boots. He gently wrestled them off of her and folded the blankets up putting a hand on her thigh. The cloth of the fatigues was cold and brittle from having been soaked with water earlier. His hand moved to her waist and he unfastened her pants, easing them off of her. She made a distressed noise and tried to roll away from the movement that was pulling her out of sleep.\n\nHis voice was a low, rumbling purr, \"Shhhh, Emma. I need to get these wet clothes off, then you can sleep.\"\n\nShe murmured, \"Tag?\"\n\nHis voice was soothing as he finished stripping the pants off and tucked the blankets around her cold feet, \"Yeah, Baby. I'm here.\"\n\nShe rolled to her back and forced her eyes open. He took the opportunity to pull the blanket down and unbutton the heavy camouflage over-shirt. Her blue eyes blinked at him slowly and she murmured, \"Traveling money.\"\n\nHis dark eyes met hers and he smiled, charmed. She was fuzzy around the edges and cute as hell. He gently removed the shirt and left her in her undershirt and panties, pulling the blankets up to her neck. \"What, Hon?\"\n\nShe purred at him, turning onto her side. \"Traveling money. I have an extra quarter-mill in the bank now. I don't have to be home for a while...was thinking of visiting San Diego...\"\n\nHe chuckled and kissed her forehead, \"Hmmm, I know a good place to stay in San Diego.\"\n\nShe smiled with her eyes closed and purred at the kiss and the sound of his voice. There was a teasing tone in her sleepy words, \"They have room service?\"\n\nTag smiled as he rose off of her rack, \"Oh yes, Baby. They have room service.\" \n\nHer heavy eyes closed again. Within a minute she was sound asleep.\n\nTag settled onto a nearby rack and watched her sleep for a while. Her face looked completely innocent. It showed none of the grit and will she pulled up from the depths of her being to endure the final tests and win the game. He had been so impressed with her actions during the contests he could barely stand it. Emma was something else. He meant to make her His. \n\nTag's eyes were heavy and he shut them for a moment. He was tired himself, having stayed near Emma during the entire battery of contests. A hand gently shaking him roused him and he opened his eyes. Caff was grinning at him.\n\nCaff's voice was a low murmur, \"It's noon, Tag.\n\nTag looked around confused, Emma was still sound asleep on the rack next to his. Noon? It couldn't be! He had put her to bed at 2am! He stood up and stretched, gave Emma a last look and then followed Caff out of the barracks. He needed a shower, a change of clothes and some food. He was starving.\n\nEmma started making small \"waking up\" noises around 4pm. She slowly opened her eyes and blinked. There was a large man in a chair beside her rack. Her unfocused eyes took in the battered Levi's and the black t-shirt. Her blue gaze flicked up over his face...clean shaven, strong jaw, sensual lips, black hair that looked like fur...her eyes flicked up and met his warm, chocolate gaze, Ah yes...and brown eyes she could lose her soul in. Her voice was a husky drawl, \"God, I hope you're breakfast.\"\n\nHe smiled with pure masculine pleasure and chuckled, drawling, \"Now why,...\" he rose from the chair and sat on the edge of her bed, \"...Miss Castille...\" he slid down into a lounging position and threw a leg gently over her body, \"...would you want C-rations...\" his voice remained a purr as he gently rested himself on top of her, \"...when you could have eggs benedict and mimosas at a 4-star hotel?\" He braced his arms and dropped his head so his face was a few inches from hers.\n\nShe did what she had wanted to do for weeks and raised her hands to his head, running the tips of her fingers through the short, black, hair. It *did* feel like fur. Her blue eyes were smoky with arousal as she met his, her voice husky, \"Benedict Shmenedict.\" Then she raised her face and traced his lips with her tongue. \n\nHe groaned and took her mouth. Both of them had waited for over three months to taste the other and they ignited as one flame using their lips, tongues, and hands to devour each other. Emma's hips were arching up to his, her limbs wrapped around his body. She was burning under him and the only thing Tag wanted to do was bury himself in her, but he knew he couldn't. She was mewling incoherently when he reluctantly broke the kiss.\n\nHis voice was tinged with regret and lust, \"Not here, Em. It's not private enough and the TV people are going out of their freakin' minds waiting for you to make an appearance.\" \n\nShe breathed hard for a few moments getting her passion under control. \"God I hate those friggin' TV people.\"\n\nHe chuckled at her tone and lifted off of her so she could rise. She shook herself and started getting up, turning to point a finger his way, \"Alright, all right. But you started it. *You*, Sir, are an evil Tempt...\" she struggled for the male version of 'temptress', \"...tor...a.dor.\"\n\nHe laughed outright, \"Is that like 'Conquistador'?\"\n\nShe grinned, \"Very similar but they wore different hats. I think it is more like 'Matador'.\" \n\nHe grinned back, \"Conspirator?\"\n\nShe rose off her rack and started finding her clothing and purred, \"Comforador.\"\n\n\"Concilator?\"\n\n\"Gratifi-or.\"\n\nHe was chuckling outright and desperately seeking an answering word, \"Confiador?\"\n\n\"Vel-oc-i-rap-Tor.\"\n\nHe lost it and started laughing out loud, \"I am *not* a Velociraptor!\"\n\nShe grinned as she dressed, \"Oh yes you are. You are my Sweeeeet Velociraptor.\"\n\nHe shook his head smiling, \"Oh my God. Velociraptor, huh? I couldn't be 'Shmoopy' or something? Well never tell Schell or Caff, I'll never live it down.\"\n\nShe just grinned and winked then headed to the showers. \n\nThe rest of the evening was a whirlwind. She was spirited off to the hotel and showered with gifts. The TV people bought her dinner and she gave exit interviews to the cameras. Several grinning cameramen gave her a giant gift basket full of hotel mints congratulating her and letting her know they had been rooting for her. She didn't see Tag in those hours and missed him. And oddly enough, she kind of missed the heavy scheduling, PT rituals, and yelling Drill Instructors. Man, there was something to be said for conditioning.\n\nThe wrap party was that night. She had been given back her street clothes and showed off her newly toned, muscular body in a little black dress. She grinned when she saw Tag. He played it cool, but his brown eyes followed her, burning, and she knew what that meant. The rest of the recruits were there and they all had fun conversing, reminiscing, and dancing. \n\nTag, McCafferty, and Schell were dressed in street clothes and working their way through the crowd of recruits and TV people. They all found it funny that the recruits still watched them like hawks and straightened their bodies whenever one of them approached. Castille was the only recruit that hugged all of them and spoke warmly with them, laughing and joking. The other recruits were impressed by her bravery, none of them knowing about the strangely bonding experience the foursome had in the Briefing room. Tag and Emma managed to keep their hands off of one another, but they would check in with eye contact regularly. \n\nEmma had just finished dancing with Ex-recruit Davis when Tag sidled up to her murmuring low, \"So, Castille, trying to make me jealous by dancing with all the men?\"\n\nShe looked at him with a wicked grin, \"Hmmm, I didn't know I could make you jealous, Taglieri.\" \n\nShe looked around the room until her eyes landed on Thompson. He was a big, good-looking man, whom Castille happened to know was very happily married with a new baby. Her voice grew teasing, \"My, my, my, Marine. Will you just *look* at Recruit Thompson. He's very handsome tonight. You know I always thought he was dishy. I think I'll go slow dance with him in my Tiny. Black. Dress.\"\n\nTag chuckled and growled in her ear, \"Careful, Sugar. You are about to get a big load of manly possessiveness dumped on your head.\"\n\nShe grinned, liking this game very much. \"Ohhhhh, there's Harris. Isn't he a picture in those black jeans? I wonder if he'll like my outfit?\"\n\nTag grinned, but his voice was a dangerous purr, \"Last warning, cupcake.\"\n\nHer loins started getting hot at his tone. Her eyes found Ex-Recruit Gentry. Gentry had been a thorn from the beginning and had been voted off early. He was a good-looking 25 year-old who was used to getting by on his pretty face. He was lax and disingenuous and Castille had never liked him. She knew Tag had really disliked him. \n\nShe growled out a purr, \"Will you just look at that pretty, pretty man over there? Poor Gentry, you know I never really gave him a chance. I think I'll give him a chance now...\" she made to walk away toward Gentry and yelped softly when a strong hand gripped her arm pulling her back.\n\nTag leaned down and whispered in her ear, \"That's it. You are *so* going to get it. Don't say I didn't warn you, Troublemaker.\"\n\nShe chirped with alarm when he backed into the shadows taking her with him. No one noticed that they were gone as the loud party continued in the compound. When Tag was far enough away from the others, he turned and dragged Emma toward the main building.\n\nShe laughed and struggled half-heartedly. The next thing she knew she had been tossed over one broad shoulder and carried into the building. She shrieked and laughed as she rode over his shoulder, beating playfully on his leg and grabbing his ass.\n\nHe grinned, \"Careful, Castille. I could bring you up on charges for that.\"\n\nHer voice was a teasing purr, \"Oh really? Charges? Is that what you kids are calling it these days? Well inform \"Charges\" that I'll happily be up on him anytime he wants, and that really, I wouldn't mind a bit if \"Charges\" found himself *up* me.\"\n\nTag laughed, smacking her ass, and entered the Briefing room. He closed and locked the door before bending and setting her on her feet. His hand snaked to the back of her neck before she could step away and she purred out a moan, held fast. \n\nHis voice was a lusty growl, \"Hmmm, well considering you are a *very* bad girl, Castille, I see you being up on \"Charges\" quite a bit in the future.\" \n\nShe leaned into his body with a whimper of lust, her blue eyes smoky and begging. He dropped his head taking her mouth hard, one hand at her neck, the other dropping to her buttocks. He pulled her against his hips as his mouth slid in a sensual burn over hers.\n\nCastille's body went into a riot of pleasure. She unashamedly murmured against his mouth, \"Take. Me.\"\n\nTag reined in his passion, using more self-discipline than he had ever needed in his life to do it. His brown eyes had deepened in color and were burning as he looked at the aroused woman in his arms. He slid the hand at her neck to her ass and shoved her roughly full against his hips. \"In a minute, Sweetheart. You have an appointment over my knee first.\"\n\nHe had thought she might protest. Instead her knees dropped as she moaned, and he chuckled, tightening his hands on her buttocks, catching her. \"Castille, you and I are *really* going to have to talk about you and spanking sometime soon.\"\n\nHe half carried her to one of the chairs in the room and slung her over his lap. If anything she moaned louder and murmured, \"God, I cannot *tell* you what it does to me when you manhandle my body.\"\n\nHe purred, \"Rrrrruh.\" The woman was trying to kill him. \"I have found that manhandling your body is one of my greatest pleasures in life.\" His large hand stroked her legs and the seat of her little black dress. It had ridden up so that the tops of her stockings and the bottoms of her garters showed. He murmured, \"Well, well, black stockings and dancing with other men. I see I'm going to have to keep an eye on you.\"\n\nShe chuckled, \"Yes, it seems I'm a brazen hussy, Sir. Of course I suppose it doesn't matter that the dress and stockings were for you?\"\n\nHe grinned and kneaded the cheeks of her buttocks through her skirt. \"Not one whit.\"\n\nShe laughed outright, clasping his lower leg and kneading the muscles there like a kitten. \"Well it appears I'm incorrigible. What you gonna do about it, Drill Instructor Taglieri?\"\n\nHis hand landed hard on the seat of her skirt and she yelped then moaned happily. His palm landed again then roughly kneaded her some more. His voice was a growling purr, \"Keep you standing, Hellcat.\"\n\nHe slid her skirt up over her bottom and his cock surged as he took in the tiny, black silk panties that showed off most of her backside. He made his tone disapproving and tried not to grin, \"Well these are just indecent! Clearly not regulation.\"\n\nHer bottom jiggled as she laughed, \"Oh, yes, those. Now *those* aren't for you. Those are definitely for the other men.\"\n\nShe shrieked, laughing, when his hand swatted her hard. His voice was grim, \"Oh yes, I see I have my work cut out for me.\" He began spanking her barely-panty-clad seat firmly. \n\nShe mewled a little and fluttered her feet. His large, warm palm felt great as it moved over her rounded bottom bringing the color up. She yelped softly a few times at some harder smacks but it was obvious to Tag that her spanking was entirely enjoyable. He decided to step it up and walloped her reddening bottom hard. She kicked a little and yelped louder.\n\nHe growled teasing, \"I can't imagine that scrap of silk is giving you any protection. Just remember it was *you* who got yourself into this acting like a Jezebel.\"\n\nShe laughed out loud, \"Jezebel, huh? Well if *you* weren't such a *Beast*!\"\n\nHe grinned and kept his palm descending in a regular cadence onto her bouncing flesh, \"Trollop!\"\n\n\"Rake!\"\n\n\"Slut!\"\n\n\"Cad!\"\n\nHe started laughing outright and whacked her harder. \"Ok...Strumpet!\"\n\nShe yelped happily, took a second for effect then barreled out, \"Knave! Rascal! Blackguard! Savage! Villian! ROGUE!\"\n\nThere was no way he was going to let her win this one. He drew her panties down to her thighs and spanked her bare bottom briskly, \"Oh yeah? Tramp! Minx! Hoyden!...\"\n\nShe started laughing hard.\n\n\"...Wanton! Harlot! Cyprian! Tart!\"\n\nShe was still laughing as she cut him off, \"Oh you are sooo going to lose this...You Brute! Highwayman! Miscreant! Scoundrel! Upstart!\"\n\nHe liked this game and continued to smack her bouncing globes, \"Brat! Guttersnipe! Saucebox!\" \n\nShe shrieked, \"Saucebox?! Why you Bounder! Roughneck!\"\n\n\"*Wench*\"!\"\n\n\"BARBARIAN!\"\n\n\"HOBBLEDEHOY!\"\n\nShe was *dying* laughing, \"Hobblede-what?! That isn't a word!\"\n\nHe grinned as he swatted her red bottom, \"Look it up, Spitfire.\" He gave her a last round of hard smacks looking down at her red, bouncing bottom and growling with lust. She kept squirming when he stopped and placed a hand on her ass. \"Now that I am the new King of pseudo-insults, I think I'll take my due tribute from a vanquished wench.\"\n\nHer loins churned at his tone. \"Mmmmmm, vanquished wench at your service, Your Majesty.\"\n\nHe chuckled and stood, lifting her up and tucking her 5'9 frame under his arm. He carried her like that to the table then dropped her feet down and locked his forearms around her back drawing her hard up against him. \n\nShe looked into the burning brown eyes a few inches from hers and murmured, \"I love that you can pick me up like I weigh nothing. You get serious points for that, you know. I'm not a small girl.\"\n\nHe grinned and said the words all men of the world should commit to memory, \"Light as a feather, Darlin'.\"\n\nShe purred and lifted her mouth to his nibbling his lower lip, shaking her hips so her panties fell to her ankles. She stepped out of them as he took her mouth, deepening the kiss until her knees turned to water and she was trembling and whimpering. He broke the kiss and turned her, bending her over the table and yanking up the skirt of her dress. He let out a low growl of lust as he grabbed her warm, red ass and freed his cock. It took him exactly two seconds to put on the condom that he had been carrying around in his pocket since the game ended. \n\nShe felt him slide slowly and deeply into her ready sex, moaning, \"Oh yes, please\" as he buried his cock to the hilt. 14 weeks of longing for this lit her up like a bonfire, and she pressed her warm hindquarters back and ground them against his hips. \"God Tag, please. Fuck me hard.\"\n\nHe gave her a hard smack with his hand then started to thrust hard into her, bending down to bite the back of her neck and shoulder gently. He felt a sweat break out on his upper body as he pumped her sex hard and fast. God she felt good. His mouth continued to kiss and bite her skin as his cock sheathed itself in her body again and again. She was sweet. Sweet and hot and soft. His eyes went black as he felt orgasm rushing up on him. \n\nShe was panting in short order and screaming in pleasure within a few minutes. She spread her legs as wide as she could and clutched the table, moaning in lust as she felt his teeth. Oh God he just felt so GOOD! His body was strong and solid and made her feel secure. He felt hard all over. Hard and hot and unrelenting. Her body went into fits at his swift thrusts, her sex grasping at his cock. She had never felt the kind of pleasure she was feeling now as this big, dominant male mounted her. She went wild under him, bucking and screaming as her orgasm slammed into her. \"God Yes! YES! Oh my GOD! AAIIGH! TAG!\" \n\nHe snarled as her bucking threw him over, hammering her heated sex through the orgasm that washed over him. Good Christ! It felt like he left his body. He panted and growled, lapping at the back of her neck as his emptied cock pulsed in her. He voice was ragged when he spoke, \"Ohhhh Emma. You are definitely going to kill me, but I am going to die a happy man.\"\n\nShe managed to laugh weakly and raised her head trying to look back at him. Her eyes flicked over the room as she tried to see his face and she murmured, \"God, I love this room.\"",
        "He chuckled and leaned up further managing to catch the side of her mouth with his. \"Mmmm, yeah. My kind of 'briefing'.\"\n\nThey struggled up and adjusted their clothing, pawing at one another. They both had silly grins on their faces as he shut the lights off and gave her one last swat as they moved out the door. The door clicked shut, the happy couple moving off back to the party. The Briefing room was suddenly lonely, not realizing what it had been missing.\n\nII.\n\nThere was something to be said for television. Emma and Tag both had fat bank accounts now, and the first class seats booked on their flight to San Diego were compliments of the Producer. Emma had never liked to fly. Being trapped in a plane for hours was not high on her \"favorite things\" list. It was a heck of a lot easier to take in a big spacious seat, cuddled up to the most virile man she had ever known. They had pushed up the armrest separating them after take-off and she was snug under a blanket, her upper body fully in his lap.\n\nTag idly stroked the chestnut hair of the woman on his lap and wondered if this was a good time to bring up the subject of spanking. It was a long flight from Florida to California and he figured now was as good as time as any to fill in some of the blanks.\n\nHis voice was a low, purring murmur, \"Hey, Em?\"\n\nShe turned onto her back and blinked slowly up at him, \"Mmmmmm?\"\n\nHe smiled, he loved her fuzzy. \"So I was thinking, maybe now is a good time to talk about this whole spanking thing.\"\n\nShe groaned and covered her face, \"Oh God. Any second the crippling humiliation is going to kick in.\"\n\nHe chuckled, \"No, Sugar. No need for that. Let's just talk about it. Obviously you know a heck of a lot about it. You made that obvious the first time in the Briefing room. But two days ago, I didn't get lecture material. I got purring, wiggling, happiness over my knee and I need to know what the deal is.\"\n\nShe peeked at him through opened fingers, \"Ummm...\"\n\nHe laughed and grabbed her hand away from her face, holding it gently, \"Ummm...what?\"\n\nShe groaned, \"Ummm, Ok. So the first thing you should know is that I've had a...favorable...reaction to spanking all my life. It's like I'm hardwired this way. Spanking in books, movies, anything. It has always gotten to me, even when I was small...It has to do with the men that I find desirable as well.\" \n\nShe struggled for an easy way to put it and chose movie examples, \"There are Rhett girls and Ashley girls. Luke girls and Han girls. I'm a Rhett girl. A Han girl. I like dominant behavior and confidence in men.\" She chanced a glance up at him, \"Needless to say it isn't a mystery why I find you so attractive.\"\n\nHe grinned teasing, \"And here I thought it was my pretty face.\"\n\nShe laughed and reached up to stroke his cheek, \"Yeah, there's that. But it's what's behind your eyes that attracts me...So part of the spanking thing is my attraction to the man doling it out. And part of it is just kind of a mystery. I've always been drawn to it.\"\n\n\"Hmmm, what about what happened in the Briefing room with Caff and Schell?\"\n\nShe slapped her forehead, \"Gad. Ok, *that* was embarrassing. I really don't like the whole audience and multiple participants thing. But, that said, it still pushed all my buttons. Including the ones that made me *want* to be punished once I found out I was wrong about the whole thing.\"\n\n\"You didn't seem like you wanted it.\" He couldn't hold back a chuckle, \"You yelled your head off.\"\n\nShe covered her face again, \"Ok, enough with the humiliating reminders, you cruel brute.\" She took her hands away gave him a good-natured but embarrassed smile, \"I don't always want punishment that hard, Tag. And I can't say I completely enjoy it while it is happening. But there is something to be said for not being able to control what is happening. When I can't control the outcome my submissive side kicks in, and my submissive side is directly connected to my sexuality. The physical sensation is also connected to my sexuality so it all feeds on each other and drives my body into fits.\"\n\nTag looked at her a little puzzled, \"You didn't seem aroused that night, you seemed totally worn out.\"\n\nShe looked up into his face and raised an eyebrow, \"Tag, trust me. You could have put me on my back after you had finished with that godawful brush. I was more than ready for you. There was no way I was going to let Caff and Schell see me aroused, that's all. That night was hell to take and it was definitely punishment, but that doesn't change the fact that my body loved it. Heck, despite the humiliation of it all, you did me a favor. It removed all the tension and stress from my body. I went into those tests primed for the competition.\" She chuckled, \"You guys probably gave me an edge.\"\n\nHe smiled at her last statement and then asked the question that was most on his mind, \"So you like both? You like it when it is easy like the other night, and when it is so hard you yowl your head off?\"\n\nShe murmured, \"Yeah, I like both. I need both to be happy.\"\n\nHe slipped his arms under her and raised her to his face, \"Ok, Sugar. Then you'll get both.\"\n\nHer eyes turned smoky, \"Rrrruh. I can't tell you what it does to me to hear you say that...but what about you, Tag? I don't want you to feel put out.\" She grinned, \"Although I *will* try my best to corrupt you.\"\n\nHe dropped his mouth and murmured against her lips, \"Oh trust me, Darlin'. I'm not put out. I admit it hadn't really occurred to me until you brought it up. But now I can't even think of you over my knee without getting hard. Consider me 'corrupted'.\" He slid his lips over hers, slipping his tongue between her teeth, touching all over the inside of her mouth gently with the tip of it. She moaned and pressed up to him engaging his tongue in a gentle war, her loins igniting.\n\n\"Oh! Goodness, I'm terribly sorry!\"\n\nTag and Emma broke the kiss and looked up at the blushing flight attendant. Emma groaned and hid under her blanket. \n\n\"Ummm, Do you, I was, Oh dear. Can I get either of you a beverage?\" the pretty woman stammered out.\n\nTag heard a muffled \"Ginger Ale, please.\" from under the blanket and burst into laughter.\n\nIII.\n\nEmma and Tag weren't two minutes inside of his ocean view apartment when their clothes started coming off. Two delirious hours later Tag got out of bed, \"I'm going to take a shower, Sugar. Care to join me?\n\nEmma's blue gaze swept over his powerful naked body slowly, \"Mmmmmm, oh yeah. I'm all over that. Can I join you in a minute though? I didn't get a look at your place and I want to be a Nosey Parker. Is it ok if I'm a Nosey Parker?\"\n\nTag grinned and headed into the bathroom, \"Be my guest, Castille. Just don't judge me too harshly for my Douglas Adams collection.\"\n\nEmma smiled delighted, \"Douglas Adams! One of my favorite authors! Yet another reason you are a GodKing.\"\n\nTag laughed, \"GodKing huh? That's a touch better than 'Velociraptor'.\"\n\nShe called back, \"Oh you think so now, but just wait until those Titans start springing fully grown outta yer head. That's an Excedrin moment just waiting to happen.\" \n\nShe heard him laughing and slid out of bed. He had read her right. The first place she went to was his bookcase. Her eyes scanned the packed shelves with interest. He was as eclectic as she was. Sci-fi, humor, crime novels, history, best sellers, he had at least 20 books that she could see on ancient weaponry. She picked up a worn copy of \"The Art of War\" and flipped it open. There was a faded inscription on the back of the front cover.\n\n1982, X-Mas To my Son, You have made me proud every day of your life. You were born a Warrior. This book may take you further than the videogames. Give it a try. All my love, Dad \n\nShe smiled and flicked her gaze up to another line up in the top corner. \"This book is the property of Giovanni Taglieri\" Her soft smile turned into a grin, Giovanni? She started chuckling, hmmm, she had never been told his first name. She carefully put the book back and scanned the room for his jeans. She moved to them, still chuckling, and pulled out his wallet. Her eyes flicked over his driver's license. Oh yes. Giovanni Taglieri. God *did* love her.\n\nTag heard the door open and smiled waiting her to join him in the shower. Instead she stuck a waving hand through the curtain. What did she have a hold...oh well, hell. It was his driver's license. He heard her laughing and groaned.\n\nShe stuck her head in, blue eyes dancing, \"Giovanni, huh?\"\n\nHe chuckled and shook his head...Oh it was going to be a while before she let this one go. \"The only person that uses my first name is my grandmother from the old country. And even she calls me 'Gio'. My whole family has called me 'Tag' since I was ten years old.\"\n\nShe couldn't stop the devilish laughter and murmured in a sing-song voice, \"Gio-vaaaannnni.\"\n\nHe grabbed her by the back of the neck and pulled her into the shower. She shrieked and kept laughing.\n\n\"You know,\" he growled smiling, \"I have a nice solid bath brush in here.\"\n\nShe chirped, \"Aak! Ok, ok! I give!\"\n\nHe trapped her hands in one of his and backed her up against the wall purring, \"Oh, I don't know. Ten or fifteen good whacks with that brush might make you a little more respectful...\"\n\nHer blue eyes glazed a bit as she wiggled trying to free her hands. His grip was gentle, but as strong as iron. She grew wet as she realized she wasn't going anywhere. She made her voice cajoling, \"Tag. Tag, Please. I'll be good.\"\n\nHe nudged her legs apart and shoved a knee between her thighs. Her head rolled back as she rode his thigh. He had made her hot in about five seconds. Her voice turned into a moan, \"God, I'm so lucky.\"\n\nTag's brow furrowed, \"Hmmm?\"\n\nShe straightened her head and looked full into his face murmuring, \"I've never been with a man who could make me so crazy for him. Never Tag. You can do it with a look, a gesture, a word.\" Her voice lowered, completely sincere, \"I'm so very lucky. I have no idea why you like me so much, but I'm so glad you do.\"\n\nTag looked at her. He had so much he could say. He could tell her the story of when he realized he was in love with her back in week ten of the game. He could recite sonnets or scold her for having no idea why he liked her. \n\nHe threw out everything he could have said and touched her forehead with his, murmuring one word, \"Mine.\"\n\nHer legs dropped out from under her and her weight rested fully on his bent leg. Apparently he had chosen well.\n\nShe murmured huskily, \"Is it too early to say I love you?\"\n\nHe growled back, \"It's about time, Castille. I've been in love with you for weeks.\"\n\nShe wrapped her arms and legs around his body. The water falling on them was starting to get cold. They didn't notice.\n\nIV.\n\nTag sat in the early morning hours looking out his window. Emma was sound asleep in his bed. He liked his apartment. He liked his town. But there was nothing here he couldn't leave. He had been paid enough by the TV people to live well for a year and do nothing else if he wanted to. Emma, however, had a farm she owned and a working barn. The little town she lived outside of was in the wine country of Northern California. It was only about 40 minutes to San Francisco. He looked at his view again. He was pretty sure he would enjoy wine country. Plus there was all the work he wanted in SF when he chose to work. He looked around his apartment. He didn't want to push Emma, but he was more than willing to have it packed up and shipped when they left for her farm at the end of the week. He sipped his coffee and mused about it. He didn't want anything more than to share the rest of his life with Emma. Then again, he was just that sort of person. He made decisions swiftly and stuck to them. No, he wouldn't talk about moving yet. She might not move that fast. It was best to give her time. \n\nThe week in San Diego went by in a flash. Tag had offered to take her to the large zoo and famous wild life park, but she had reached for him and murmured that he was the only large, dangerous beast she wanted to see. That had pretty much ended that conversation, and other than some time at the beach they spent most of their time naked making love all over his apartment. \n\nHe had spanked her for fun a time or two but nothing like what had happened the first time in the Briefing room. He caught himself thinking about giving her a hard spanking more and more. She didn't ask for it, so he didn't bring it up. At the end of the week they flew to San Francisco and drove to her farm outside of Sonoma.\n\nEmma's ranch was simply called \"Glory\". It was a fairly large working barn with over 30 horses boarded and 15 lesson horses. Many of the horses she boarded were champions or placed high in their disciplines. Emma was experienced in a number of riding disciplines and had two large stables with attached arenas. She divided the two stable buildings according to Western and English disciplines and employed four trainers as well as doing a good bit of the training herself. She had six grooms that cleaned the stables, turned the horses out, and cared for the needs of the animals. Two massage therapists came by two or three times a week to work on the horses. Her other trainers had taken on her duties through the end of the month, and if she wanted to, she could take the 16 days she had left and just be with Tag. The stables could get extremely busy during the day, but her house was sacred ground. No one would bother them once inside.\n\nTag explored the large, airy farmhouse while Emma went to the stables to greet everyone that happened to be there that day. He went to her bookcases first. She had three giant ones in what looked like an office and reading room. He perused the shelves...mmm, she was as eclectic as he was. History, sci-fi, novels, sheesh...romance...all women had romance...humor, animal behavior, biology, about 50 horse books, and Hey! He stopped. She had a section on ancient weapons and warfare. He glanced at a couple of martial arts books then laughed and pulled a slim little book off the shelf and looked at the familiar cover. \"The Art of War\". He chuckled...Of course, of all women, Emma would have \"The Art of War\". He replaced the little volume and looked around the room.  \n\nThe furniture was wood and fabric and was cozy. Three of the walls held black and white photography and interesting paintings. The last wall held weapons. She had a couple of quarterstaffs and some wooden katana in a large urn. There was a samurai sword mounted on the wall along with a broadsword, a short sword, a couple of daggers, and a pair of si. He lingered there, looking closely at the sheathed weapons and the training tools but didn't take anything down. \n\nHe went through her cds next, her taste in music was as eclectic as her reading choices. He checked out her entertainment system...needed some upgrades there...ambled through her kitchen...lots of gadgets and copper pans...then he loped upstairs and wandered to the end of the hall looking for the master bedroom. He found it, and whistled upon entering. Emma's bedroom was as opulent as the barracks had been Spartan. \n\nShe had colored tapestries on the walls and paintings with Indian and middle-eastern flavors. The colors of the room were a riot of jewel tones. Her large iron bed was covered in sheets, comforters and pillows that were colored rich and sensual dark reds, purples, blues, and gold. White cotton mosquito netting hung over the bed, stretching out over the four black iron bedposts. The whole room spoke of a sensual and tactile nature, someone who loved comfort and beauty. It should have been way too much, but somehow it was muted enough to be sumptuous but not over the top. \n\nHe wandered through the room looking at paintings and strange little colored lamps, running his hand over the Indian style wood furniture. He stopped at a large wardrobe that had a carved tiger on each door. It was obviously antique and the craftsmanship was beautiful. He wanted to see the lay out of the inside and tried to open it. It was locked. He backed off and looked at the door handles in confusion, there were no keyholes to be found...What the...? He ran his hands over the door and started trying to figure out how to get in, his curiosity aroused by the puzzle. \n\nHis hands found two small, iron elephants up at the top corners of the wardrobe. They turned...but no movement of the doors. He figured out that they turned in different directions independently and tried to find the combination. He finally got it when he turned both elephants at the same time a quarter turn so they were facing the two tigers on the doors. He heard a *click*. Cool. He opened both doors, now very interested to see how it was built on the inside. His eyes focused on the contents and he stepped back, his eyebrows flying up in surprise. Whoa! No wonder the door was locked!\n\nThe inside panels of both doors were covered in small hooks. On each hook hung some kind of spanking implement. His brown eyes widened. *Lots* of spanking implements. \n\nEmma liked equal division, wood hung on one side, leather on the other. His eyes ran over the lushly colored and well cared for woods of the paddles. The other door had belts, straps, leather paddles of different shapes, and what looked like an antique razor strop. His eyes flicked to the closet area. There was a side with a small chest of drawers and a side for hanging clothes. He ran his hands through the clothing. Most of it was silk and they looked similar to belly dancing outfits. They were all different colors, some transparent. There were coin belts and smaller bracelet things on hangers. He let out his breath in a \"Woof.\" \n\nHis inquisitive and slightly shocked gaze moved to the drawers and he started opening them. Velvet rope, colored leather cuffs, lined copper shackles. He moved down the line of drawers finding jewelry and more bondage equipment. The bottom drawer wouldn't open. He dropped into a squat. Ah. This drawer had a keyhole. His curiosity was killing him, but he didn't dare try to force the delicate little drawer. He took one last look at the doors, running his fingers over some of the pieces that caught his eye. \n\nAfter a few minutes he shut the doors and turned the iron elephants. He was practically gleeful, he was going to give her *such* a hard time! This blew the whole \"Giovanni\" thing out of the water. Plus, well. Yum. The wardrobe had been as sensual of an experience as her whole bedroom was. He left the room smiling, murmuring to himself, \"Oh, God loves me. Yes He does.\" \n\nHe wandered back through the kitchen and rifled through her fridge, grabbing a root beer, then ambled back into the library. He selected a book on Greek warfare and dropped onto the couch to wait for her. A black cat came out of nowhere and made herself comfortable on his lap. He idly stroked the purring cat and read. \n\nEmma found him that way 20 minutes later. She smiled, charmed. He was engrossed in a book, barefoot and jean clad, stretched out on her couch with a sleeping cat in his lap. He was a hell of a picture. She silently approached trying to get close enough to tickle one of his bare feet.\n\nHe never looked up from the book but his voice was a rumbling purr, \"Don't even think you can sneak up on me.\"\n\nShe laughed, \"Dammit! Damn your military trained ears!\"\n\nHe chuckled and put down the book. You have a beautiful house, Em. It's homey and bright and full of surprises. I feel very comfortable here.\"\n\nShe smiled, \"I'm glad...but surprises?\"\n\nHe gestured around with a hand, \"Cozy and full of comfy furniture, yet airy with a sense of space. A library with a weapons wall. State of the art kitchen, yet every room in this place is painted a different color. Eclectic tastes in books and music, and Man. The bedroom.\" He grinned.\n\n\"Ah, you have been a Nosey Parker, eh? Well that's fair. Yeah...my bedroom is kinda 'girly' isn't it?",
        "He raised a brow, \"Girly? I was thinking more like 'Opium Den'.\" He gave her a grin, his brown eyes sparkling.\n\n\"It is *not* 'Opium Den', you Rogue!\" She mumbled embarrassed, \"I was going for 'Middle Eastern harem'.\" Her tone was grumbling but she had a shadow of a grin on her face. \"If you don't like my room you can sleep on the porch. I have a nice army cot out there. It will make you feel right at home.\"\n\nHe chuckled and gently deposited the cat on the floor then grabbed her, pulling her onto his lap. \"Hey, now, no insult intended. I was kidding. I liked it. I did. You have a deeply *interesting* bedroom. It suits you. It is amazing that someone who likes comfort as much as you do did so well living in uncomfortable, Spartan conditions.\"\n\nShe smiled and snuggled up to him, \"This house took a long time to get like this. I love it, but I really need very little to make me happy as long as my mind and body are occupied. I didn't have much time in Camp to miss any creature comforts did I?\"\n\nHe murmured, \"You're right about that.\" He waited a beat. He really wanted to play it cool but he couldn't stand waiting. He was the kid that always got up two hours earlier than everyone else on Christmas morning. \"So, Em. What's with the Wardrobe from *Hell*.\"\n\nHe grinned and started chuckling as he felt her breath stop.\n\nShe murmured, \"What do you mean?\"\n\nHe made his voice casual. \"I mean the locking mechanism is genius. It took me like ten minutes to work it out...\"\n\nShe shrieked and turned to look at him with panicked blue eyes, \"You *opened* it?!\" \n\nHe saw her face and burst into full-blown laughter. \"Of course I opened it. I just wanted to see the craftsmanship, but once it provided me with a puzzle, it was an issue of pride. I had to solve it. And my, my, my...what a bounty inside...\" he let his voice trail off still chuckling.\n\nShe struggled off of his lap and hit the floor. Not knowing what else to do she just covered her head with her arms. \"Oh my God. Oh my God.\"\n\nHer voice was teary and he snapped his torso up growing serious. \"Hey...Hey, Sugar...Hey...\" He knelt on the floor next to where she huddled and put a hand on her back. \"What's wrong? What gives? I was just teasing you.\"\n\n\"Oh My God. You must think I am some kind of crazy deviant.\"\n\nTag's brow furrowed, \"No, Em. No. Sure, it surprised me at first. But come on now. I don't think badly of you. Hell from what I saw you have excellent taste. Apparently you're a...collector. It's ok, Em, really. Come on, how many guys have a girlfriend with a Harem bedroom and a fully stocked Sex-drobe? I think it's cool.\"\n\nShe groaned, \"You must think I'm a slut. Really I'm not. Lovers...Can count them on one hand. Last relationship broke up a year ago and was too busy to meet someone before you...I haven't even *used* half of the things in there.\"\n\n\"What part of 'cool' didn't you understand? No worries, Honey. It never came into my mind that you were a slut or anything else. Scout's honor.\"\n\nShe chanced a peek at him, \"Promise?\"\n\nHe smiled as he felt her distress ebbing away. \"Yeah, Sugar. Promise.\"\n\nShe tucked her head into his torso, burrowing under his arm. He chuckled and rubbed the small of her back. He couldn't resist, \"So, only half huh? I guess I'll have to do something about that.\"\n\nHer protest was muffled, \"Aaaak! TAG!\"\n\nHe started laughing again and shifted her, wrapping his arms around her body. He was pretty sure that now was the time to change the subject and said lightly, \"Can I see the stables?\"\n\nShe looked up and grinned, \"Sure, do you ride?\"\n\nHe shook his head, \"No, but I like horses.\"\n\nHer eyes danced, \"Want a lesson?\"\n\nHe looked at her for a moment, \"Sure.\"\n\nV.\n\nThey headed for the English barn. Emma waved at a couple of people that were packing up and leaving for the day. It was a little after five p.m. and the barn had shut down for the night. The stables were quiet and smelled sweetly of hay and warm horses. A couple of cats patrolled silently for rodents. \n\nShe pointed at the large orange tabby murmuring, \"Tennison.\" Then pointed to a brown tabby with white socks, \"'Isabol.' And the cat on your lap earlier was 'Luna'. There are a few more around here. They share time between the stables and the house. You'll also meet 'Logan' eventually. He's the official guard dog of the ranch.\"\n\nHe smiled and dropped into a squat to pet Tennison who was circling his legs and purring. \"I like animals.\"\n\nShe smiled, \"I'm really glad to hear that. Cause I have a whole lot of them.\"\n\nShe introduced Tag to a glossy bay horse named Domingo. At her direction he stepped forward and blew gently into the horse's nostrils. The horse gently blew back at Tag, his breath smelled sweet and warm. Domingo was engaging and inquisitive. Tag was rather in awe of the large, gentle animal. \n\nEmma took the horse's blanket off and showed Tag how to put on a halter then led Domingo out to the cross ties. She secured the horse and retrieved brushes, instructing Tag to groom one side while she did the other. She told him Domingo's story. He was her horse now. She called him a 'Warmblood' and said he had been a champion dressage horse. Tag made a note to question Emma later about the unfamiliar terms. Domingo had been injured and was unable to compete anymore. She had bought and rehabilitated him. Now he was her pleasure horse and lived a life of ease, spending most of his time turned out with some other farm horses. She showed Tag how to put on the saddle and bridle and led the horse down the isle to the covered arena attached to the stable. The arena floor looked like dark, rich soil and there were jumps stacked at one end of the large, oval room.\n\nShe got Tag mounted and grabbed a leather jockey's bat out of habit, slapping it gently against her thigh as she watched him move the horse around the arena. Her instruction had started out gentle, helping him improve his balance in the unfamiliar saddle, her voice soft and soothing as she explained how to handle the reins. Soon she couldn't resist putting a bit more \"Drill Instructor\" in her tone.\n\nTag looked up surprised as Emma's voice rang out, \"You look like a sack of potatoes, Marine! I'm surprised you haven't fallen off that horse. Straighten up!\"\n\nHe saw her smother a grin and thought to himself, Ah yes. 14 weeks of payback coming. He behaved himself and gave her a nod, his tone dry, \"Yes, Ma'am.\" And tried to adopt a better form.\n\nShe let him circle the arena one more then called out, \"Ok...Ok. Stop.\" She strode over and hardened her voice, trying to drive the playful tone out. \"That is absolutely unacceptable, Taglieri. Your heels are up, your legs are forward...\" she popped his thigh with the jockey bat she was holding, \"...your form is crap, Mister! You haven't been listening to a word I've said!\" She couldn't stop herself from grinning stupidly up at him, so to make up for it she whacked him on the thigh again.\n\nHe flicked up an eyebrow and murmured, \"When do I get one of those things?\"\n\nHe answered him seriously, her tone returning to normal, \"You don't. Horses aren't struck in my barn. I don't give crops or bats to students because it is too tempting to pop a horse one if they are frustrated.\"\n\nHe murmured with a grin, \"I wasn't going to pop the *horse* one, woman.\"\n\nShe chuckled, \"My goodness, that sounded like a threat, Mr. Level 1 Student. I think I should have you running water duty for the next several hours for that disrespectful tone. You can fill up the big trough in the front paddock water glass by water glass. How do you like them apples, Giovanni?\"\n\nHe looked down at her from where he sat in the saddle, his eyes amused and glinting dangerously. \"I'd say I might just toss you in that trough and you can bob for \"them apples\", Castille. And what have I said about calling me Giovanni?\"\n\nHer voice became teasing as she grinned playfully, \"That it was as cute as a button?\"\n\nHe shook his head fighting a grin, \"No.\"\n\n\"That it should be used with abandon especially around all your Marine buddies?\"\n\nHe looked at her, dark eyes flashing, and swung a leg over the horse. \"No.\"\n\nShe laughed and shrieked, backing away as he dismounted, her blue eyes merry and excited, \"That it suits your gentle and artistic nature?\"\n\nHe moved toward her and growled laughing, \"I'll show you gentle and artistic, woman. Gimme that bat!\"\n\nShe shrieked again, laughing, and tore away from him yelling, \"That's it's the perfect name for a Velociraptor? Giovanni the Friendly Velociraptor? You could have a kid's show!\"\n\nHe caught her about the waist in about 5 steps and swung her around dropping them both to the ground. When she tried to scramble away he pulled her across an outstretched thigh and locked his other leg over her upper thighs. He wrestled the pretty, golden-colored leather bat away from her while she protested and struggled. The docile horse watched them for a moment and then clopped into the barn isle, entering his stall and going for his hayrack.\n\n\"TAG! Someone could walk in! TAG! I mean it!\"\n\nHer voice was full of laughter and there was no way he was going to take her protests seriously. \"Well you should have thought of that before teasing a Velociraptor, Sugar. You gonna call me 'Giovanni' anymore?\" He popped the slapper head of the bat on one jean-clad buttock.\n\nHer voice was mock angry, \"Hey! Oh that is *it* Mister! You are in so much trouble.\"\n\nHe laughed and whacked her again, \"Oh really? Please tell me, Riding Instructor Castille, how you are possibly going to back that up?\"\n\nShe struggled and grumbled laughing, \"Oh you just wait. I'll think of some suitably cunning plan to make you pay, *Giovanni*.\"\n\nHe popped her ass a third and fourth time with the bat, laughing, his voice a dangerous purr, \"Oh you are soooo in trouble, Castille. Mark my words, Little girl. After dinner. You. Me. Your bare bottom. My big, black belt. And about a hundred of the paddles you have hidden away in that wardrobe of yours.\"\n\nShe shrieked, laughing again. \"I don't have a hundred paddles! Ok, ok, I give. Come on Tag, I need to de-tack your abandoned horse and actually *close* his stall door for the night.\"\n\nHe let her up, pawing her bottom as they rose. \"Good, you can show me how all those buckles work on the saddle again. Speaking of food, what are you in the mood for?\"\n\nShe looked over her shoulder and grinned at him purring huskily, \"Oh I was thinking of Italian.\"\n\nHe cleared his throat, fighting to control his cock, and growled a purr back at her, \"I think that can be arranged.\" \n\nShe managed to get the horse bedded down and the barn lights off before grabbing the waistband of his jeans aggressively and dropping to her knees. He groaned and laughed at the same time as his woman made short work of his belt and the buttons of his Levi's. He wrapped a soft fist in her chestnut hair as she took him into her mouth, wrapping her arms around his buttocks. \n\nChrist! When she went for it she really went for it. She was rough and urgent with everything but her mouth. That was soft and warm and her caressing tongue was going to make his knees drop out from under him any second. His head dropped back and he groaned as she licked and suckled his cock.\n\nHis voice was a rough moan, \"Castille you're going to end me, I swear...\"\n\nShe smiled around his sex and dropped her head to nip his inner thigh and take \"the boys\" in her mouth, tonguing them gently before returning her attentions to his shaft. \n\nShe murmured teasing as her tongue bathed his cock, \"Oh I thought Marines were supposed to be a tough lot, Taglieri. You're all just big, fluffy puppies.\" \n\nHe barked out a hoarse laugh, \"Dogs of War, Baby.\"\n\nHe tried to pull her up by the shoulders but she was having none of it and locked her forearms around his buttocks, sucking harder and taking him deep into her mouth. It only took a few minutes for him to tighten a fist in her hair, growling low, \"Careful, Baby. I'm going to come.\"\n\nIf anything that made her double her efforts. Her soft inner mouth and working tongue were making him lose control. \"Emma, Em, darlin'. Really, I'm about to...Em, I'm going to...I'm...Rrrrrrrrrrrrruh.\" \n\nHe snarled low as his cock emptied into her mouth. She swallowed reflexively and slowly released his cock, lapping at it gently. He put both hands in her hair and cradled her head murmuring, \"Mmmm, thank you...So apparently you don't mind that...Good to know.\"\n\nShe looked up at him, resting her chin on his flat belly, blinking with a lazy arousal, and merely murmured, \"You taste good.\"\n\nHe purred and hauled her up, burying his face in her neck.\n\nVI.\n\nEmma's fridge was empty except for bottled water and a few bottles of Thomas Kemper root beer, so they ordered Chinese. She and Tag washed up as they waited for the food and both slipped into something more comfortable. Tag watched Emma after the food arrived as she moved about the kitchen. She was dressed in nothing but a gold silk robe that clung to her curves. He was ready to toss her on the kitchen island and ravish her.\n\nThey ate straight from the boxes sharing the food. Emma chirped and moaned low when Tag dropped down in front of her chair with purposeful look. He pulled her to the edge of the chair with a lusty growl, tossing her legs over his shoulders. He parted her robe, purring, and went down on her. She barely managed to put the box of Chinese noodles in her hand on the table without dumping it on his raven-haired head. His lips and tongue worked her sex expertly and she arched her neck back, wrapping her hands softly around his head. His teeth gently grazed the little nub at the top of her sex and she contracted her body, panting, and murmured his name. He continued to work the nub of flesh with his lips and tongue, gripping her thighs hard as her hips raised off the edge of the chair. A moment later she exploded in his mouth, gasping and trembling.\n\nHer voice was a husky whisper as he cleaned her sex with long laps of his tongue, \"God, Tag. That was just amazing.\"\n\nHe raised his face to hers and kissed her deeply. She moaned into his mouth tasting her own sweetness mixed in with his unique taste. His skin tasted like the woods. Like something wild and natural and untamed.\n\nHe dropped back down to his knees and put his head in her lap enjoying the small shudders that still coursed through her, \"Castille, I'm in a mood.\"\n\nShe smiled slowly, petting his soft hair and liking his tone, \"Oh?\"\n\nHe looked up at her, his brown eyes lusty, \"Yeah, I really want to beat your ass tonight. I figure 'Giovanni' is as good of an excuse as any.\"\n\nShe smiled slowly and purred, \"I'd thought you'd never ask, Giovanni.\"\n\nHe chuckled and his voice became a purring growl, \"Wanna get rough tonight, Baby?\"\n\nShe nodded, almost hypnotized, her loins throbbing at his tone and the look on his face.\n\n\"Ok, Love. Then go upstairs and change into one of those outfits I saw in the wardrobe. Leave your bedroom door open when you are ready for me.\n\nShe kissed him and headed upstairs, her knees trembling. He wandered back into the library where he had dropped his suitcase. He pulled off his navy blue sweatpants and switched them out for a pair of black Levi's and a fawn-colored t-shirt. He padded barefoot to his other jeans and pulled his belt free, feeding it into the loops of the black jeans and buckling it. He elected to stay barefoot, and padded upstairs silently. Her bedroom door was still closed so he hunkered down and leaned against the wall, waiting. \n\nWhen her door opened he stood, adrenalin coursing through his body. He prowled through the entrance and froze looking at her. Woof. Her back was to him and his eyes traveled slowly over her tall form taking in the picture. \n\nBelow a silver belly chain she was wearing an emerald green, silk garment. It fell to her bare feet and would have been a skirt except that it was two separate panels of cloth, one in the back, one in front. Three silver chains laid loosely against each bare hip, attaching the front panel to the back. Otherwise they fell free to the floor from the tops of her thighs. Her back was bare but for a strap of silver that looked a bit like a bikini top. Her chestnut hair hung in waves around her shoulders, looking soft, making him want to run his fingers through it.\n\nHe murmured, \"Turn around.\"\n\nShe turned to face him and he let out a low growl. Her breasts were encased in a top of green silk and silver cloth. Her entire midriff was bare except for the delicate silver belly chain that hung low, the shining coins fastened to it falling over the swell of her belly. Her shoulders and neck were bare and unfettered. Her face was made up, black kohl on her eyelids, pale silver and green-brown eye-shadow, expertly applied, changing the color of her eyes to a deep blue-green. Her lips were painted dark red and her face powered lightly making it flawless and smooth. He had been used to seeing her without make-up and didn't think she needed it, but she had transformed herself into an exotic creature for him and it heated his blood.\n\nHe stepped forward, wishing briefly that he was dressed as some ancient Warlord. He made his voice and eyes hard, \"You were disrespectful today. I don't allow disrespect.\"\n\nShe threw him a curve and looked at him haughtily, \"I am the favored wife. I have status and privileges the others aren't allowed. I should be able to use your given name when I choose to.\"\n\nHe liked the curve. His eyes glittered and he smiled dangerously, \"Perhaps I have given you too much status. You flaunt it and defy me.\"\n\nHer eyes flickered for a moment as a touch of fear crept into them, she spoke a trifle less haughtily, \"The others must know that only I am your equal.\"\n\nHe laughed outright, brown eyes flashing, \"I give you favored status as the First Wife and suddenly you are my equal? I didn't choose you because you were stupid, woman, so it must be that the power has gone to your head and made you foolish. Obviously it has been too long since I put you in your place.\"\n\nShe backed up a step swallowing, eyes widening. He suddenly looked much, much larger than she. \n\nShe changed her tactics and made her tone cajoling, \"Please, My Lord. I didn't mean 'equal' of course. I meant...I meant...equal use of names. The other wives and concubines will never question my status if they hear me use your given name as you use mine.\"\n\nHe dropped his head and pinned her with his gaze. His voice was a low growl as he moved forward, stalking her, \"You seem to think I am interested in the matters of women. Control the others as you will, but do not defy me to secure your rank. I have said you are First Wife. My word is law. If they question your status, you have but to ask and I will have them beaten.\" His voice turned into a snarl, \"But you will *not* take advantage of my favor and speak to your Lord as if I am a common servant.\"\n\nShe backed away from him hastily and tried another tactic in desperation. Her voice was breathy and fearful, \"I beg your forgiveness, my Lord and Husband. Please, allow me to lighten your mood. I'll have servants bring wine and meat and dates. I'll feed you and dance for you. I promise I will not disobey again.\"\n\nHis eyes glittered as he filed away the idea of feeding and dancing for him. He would definitely use them later. \n\nHe backed her up against the wall and placed his hand against it, near her head, trapping her with his arm. \"I'll accept your apology after your due punishment, woman. And you'll dance for me tonight under my belt. You are right, you will not disobey me again.\"\n\nHe saw the fear and lust fight in her eyes. Her voice was pleading, \"Please, Sir. Please, my Lord. Have mercy. I am only a foolish woman. I forgot myself. I will not do it again.\"\n\nHe slipped his hand to the back of her neck and leaned in, murmuring nearly against her lips, \"You will have no mercy from me tonight, Wife.\"",
        "She whimpered then yelped as he bent and tossed her over his shoulder, turning and walking to an ottoman. He sat down on it and lifted her, his hands turning her in the air so she wound up face down over his knee. He ran his fingers over the emerald silk that covered her bottom. He decided to throw her a curve for fun, \"It has been a long while since you have needed correction, girl. Remind me of the last time.\"\n\nHer toes clenched in the large Berber carpet that rested over the gleaming hardwood floor. She was breathless, \"Please my Lord, it was so long ago. Please don't allow the telling of it to increase your ire. I had lost my temper and spoke badly to one of your Generals in front of you and another. You closeted me up with you and the two men and had me punished by all in the room. I will never be so foolish again. Please my Lord, this transgression was not as grave.\"\n\nHe smiled. She was clever. \n\nHis voice was unforgiving, \"This transgression was not as grave? Instead of speaking disrespectfully to a General in front of me, this time you speak disrespectfully to me in front of a gaggle of women. I consider this offense far graver, wife.\"\n\nShe just whimpered and trembled. \n\nHis voice ground out, \"Your whimpering will not soften my resolve. Ask for your due punishment.\"\n\nShe gritted her teeth, asking was embarrassing, even in roleplay, \"Please my Lord, punish your disobedient wife as you see fit.\"\n\nHe smacked her silk encased ass hard, and she yelped. His voice was dangerous, \"That is unacceptable. Ask well, or I'll drag you to the harem and punish you in front of the other women.\"\n\nShe shrieked in panic. \"No Master! No!\" her voice was breathless in fear, \"Please Master, Husband. I was disobedient and arrogant. I beg you to punish me. I deserve to be spanked, and paddled, and whipped with your belt. But Please! Don't chastise me in front of the other women!\"\n\nHe murmured, \"Hmmm, finally a punishment you seem to truly fear. Very well, Wife, your plea was acceptable this time.\"\n\nHis caressing hand raised over the emerald silk and he brought it down hard. She yelped as the sting spread through her bottom. He didn't waste time and delivered several hard smacks all over her seat. She yelped softly and wriggled as he spanked her. She had been wet from the moment he came into the room and her loins grew hotter as his palm beat a steady cadence on her backside.\n\nAfter a few minutes he reached to the end of the silk panel covering her and rolled it up, using his hands to slide the silver chains at her hips to her waist. He placed the roll of green silk at the small of her back and ran his large hand over her bare, pink skin. His cock pulsed at he looked at her beautiful, round ass. \n\nShe groaned as he uncovered her bottom, feeling the cool air on her skin as her vulnerable, soft flesh was unveiled to his gaze. She was embarrassed, but she loved the bittersweet ritual.\n\nHis hand fell all over her bare backside, cracking loudly against it. Her bottom bounced and jiggled as he spanked her swiftly. The sting was getting to her and her soft yelps turned into pleas.\n\n\"Oh! Mmmuh! Oh Sir! Please! That stings!\"\n\nHe ignored her and increased the force a bit. Her bouncing bottom was growing light red under his hand. He moved his palm around so her whole ass felt the burn. She fluttered her feet and shimmied, but her ass took everything he wanted to give it.\n\n\"Oh God! Ouch! Please! Please Sir! Oh that HURTS!\"\n\nHe murmured, \"A naughty, disobedient wife should walk around with an bottom that hurts. I don't know why I don't do this every day. It would be the perfect reminder for that sassy tongue of yours.\"\n\nShe pleaded, \"Oh no, Sir, Please, Husband! I am reminded now. OH! Please don't spank me every day! Ouch!\"\n\nHer bottom was rather warm and bright red. His hand stopped spanking and rubbed the warmed flesh. The heat and color were seductive, not to mention her wriggling. His voice was lazily aroused, \"Get on your knees, woman.\"\n\nShe slid off of his lap and knelt, spreading her knees. He watched the green silk puddle between thighs that were bare to the hip. When she looked up at him her blue gaze was smoky with lust. He nodded towards the wardrobe. \"Go open it.\"\n\nHer eyes grew worried with embarrassment, but she rose smoothly without protest and padded to the large piece, turning the iron elephants and opening the doors. She looked at him unsure of what he wanted her to do.\n\nHe snapped his fingers and pointed to the floor in front of him. She hurried back and dropped gracefully into a kneel again, bottom resting on her heels, knees spreading naturally, hands resting on her bare thighs.\n\nHe rose drawing a hand through her hair gently as he moved by her to the wardrobe. His eyes flicked over the contents then fell to the drawers. His voice was a low murmur. \"Why is this last drawer locked?\"\n\nShe looked at him panicked, her voice careful, \"Nothing of any interest is in that drawer my Lord, just silly, female things. They would bore you I'm sure.\"\n\nHe looked over his shoulder with a grin. That answer guaranteed he would be interested in the contents of the drawer.\n\nHis tone was a growl, \"Where is the key, woman?\"\n\n\"I'm quite sure I have lost it...yes it is definitely lost.\"\n\nHe turned and looked at her and thought, My, my, she's lying...this is getting interesting. He turned on a heel and strode to her, ignoring her chirp of alarm. He caught her arm and dragged her up, forcing her to stumble beside him as he marched back to the wardrobe. Once there he put his foot on the top of the chest of drawers inside and tossed her over his thigh. She grabbed his lower leg for support, teetering, feet well off the floor. His eyes looked over the paddles and he chose a small, rectangular one made of a dark wood. He jerked the silk covering her bottom away and flailed the paddle against her bare bottom.\n\nShe reacted immediately and strongly, \"Oh PLEASE! Ow! OH! Please NO!\"\n\nHis voice was casual, \"The key, Wife.\"\n\nShe moaned miserably, \"No...please no!\"\n\nHe continued paddling her bouncing bottom hard while she squirmed under the punishing paddle, murmuring again, \"The *key*, Wife.\"\n\nShe continued wailing and begging for him to stop but didn't say anything about the key. He increased his force and speed, making her yowl and murmured again, \"The key, Wife.\"\n\n\"OH! Aiiigh! OW! Please! Ok! OK! The key! The KEY! It's in the jewelry box on the dresser!\"\n\nHe stopped paddling her immediately and placed her on her feet leaning forward to nip her chin gently, \"Good girl. Back to your spot.\"\n\nShe groaned, not looking at him, and moved back to the place she had knelt before, kneeling there with a worried gaze. He watched her for a bit until she met his eyes. His gaze said, If you truly don't want me to...Her blue one said back, It's ok, but I am dying of embarrassment...That was acceptable, he thought and couldn't suppress a grin as he moved to the jewelry box and retrieved the little silver key. He gave her another look and chuckled, she had her head in her hands. \n\nHe hunkered down and unlocked the delicate drawer. It was lined in deep purple velvet like the others. His eyebrows raised and he turned to look over his shoulder, his expression speculative and amused. The drawer had hidden sex toys. High-end sex toys. There were a few phalluses of tempered glass, and more than a few plugs made of high-grade silicone. He picked up one of the plugs and turned toward her cocking an eyebrow. She muttered and dropped her elbows to the floor purposefully banging her forehead repeatedly on the rug. He couldn't resist a laugh at that.\n\nShe looked at him with a gaze that was all Emma and no \"First Wife\" and growled, \"If you *dare* tease...\"\n\nHe grinned and put his hands up in surrender. She glared at him a bit longer and he murmured, \"You know, I have the *best* girlfriend. She gives me the most delicious ideas...\"\n\nShe groaned, not sure if she was aroused or humiliated by his words.\n\nHe chuckled and grabbed one of the glass phalluses and a medium sized, jewel green, silicone plug. He couldn't resist as he turned to her and held the plug up, \"See? Matches your outfit.\"\n\nHer voice was muffled as she dropped her head again, \"Hating you.\"\n\nHe laughed quietly then looked over the inner door panels. He chose a long-handled golden paddle with a smallish circular head, a curvy cherry paddle, and a small maple rectangular paddle with holes. He crouched and juggled the items into the crook of his arm, opening a drawer and gathering up three lengths of deep gold velvet rope. He regarded the bounty in his arms and looked over the contents of the wardrobe briefly, finally closing the doors, satisfied with what he held. \n\nHe moved to the bed and dumped everything onto the coverlet. He cocked his head toward her and murmured, \"Lubricant?\"\n\nHe heard her murmur, \"Bathroom.\"\n\nHe went in search of it, walking into her attached bathroom. He admired the large, deep soaking tub and decadent shower. He could tell the bathroom had cost a lot but it looked worth it. It had a skylight and plants everywhere. The shower wasn't a glass stall, it was the size of a walk-in closet, made of sandstone with a grey slate floor. It had three showerheads and a sitting bench. Man. He could get happily lost with her in there. He opened the bathroom cabinet and found the bottle of lubricant. He grabbed a couple of condoms she had, having forgotten to put any in his pocket earlier.\n\nHe returned to the main room and dropped the items next to the others. He picked up the cherry paddle and returned to where she knelt in front of the ottoman, sitting down on it. His voice switched from \"Tag\" into the stern \"Husband\". \"Get over my knee, Wife.\"\n\nShe whimpered and knelt up, draping herself over his strong thighs. Her bottom jiggled as she squirmed into place. \n\nHis voice was scolding, \"Perhaps if I make sure you can't sit down, you will remember how your husband is to be treated.\" He brought the paddle down on her bare bottom firmly. It cracked loudly in room and she yelped. He anchored her against his belly with a hand at her waist and smacked her firmly and slowly with the paddle. Her feet fluttered as her bottom bounced, and she squirmed breathing hard.\n\nHe stepped it up a bit and swatted her harder, increasing his speed. She started yelping and begging as the paddle made her backside flame up.\n\n\"Oh! Nnnnnnn! Ouch! Please! Please Sir! OH! Please! OW! I'll be good! I'll be GOOD!\"\n\nHe shook his head and kept the paddle flailing, \"You'll not get out of this so easily. Your attitude has grown arrogant and you think yourself the ruler of this house. You will stay just like this for 20 minutes. Maybe that will teach you some humility.\"\n\nShe wailed at his words and stern tone, \"OH! Please! Not so long, SIR! Please My Lord! Please not so HARD!\"\n\nHe kept an ear cocked for any intense distress in her tone, but otherwise ignored her pleas and continued to bounce the cherry paddle off of her squirming, red bottom.\n\nShe moaned and kicked and wailed to no avail. When she put her hands back to protect her bottom he caught them and pinned them at the small of her back. When she started kicking too hard he shifted her to his left thigh locking a leg over the backs of her knees. He whacked her nearly full force for the last minute of the paddling and she yowled the whole time.\n\nWhen he stopped her whole bottom was hot and bright red. She whimpered and wiggled on his lap as he kneaded her cheeks, purring when he rubbed them gently. He helped her up and murmured, \"Get on our bed, wife. On your back.\"\n\nEmma was on fire but she stayed in role murmuring, \"Yes, my Lord.\"\n\nShe reclined on her back, stretching her hands above her head. He picked up the tempered glass phallus and looked at her with burning eyes, \"Spread your legs, woman.\"\n\nShe looked at him and squirmed, her expression growing embarrassed. He waited a beat and when she didn't obey him he dropped the phallus and crossed her ankles, yanking up on the lower and pushing down on the other, rolling her roughly to her belly. She was on her face before she could gasp. He pushed her legs apart and knelt between her thighs, placing his knees on them to hold her down. He picked up the long-handled, golden paddle and whacked her bottom repeatedly.\n\n\"Must I beat you into obedience every time? Have you learned nothing about what is expected of you?\"\n\nShe squirmed and yelled, \"No Sir! Please forgive me, Sir! Please! I'll be good! I'll be obedient!\"\n\nHe gave her another had 20 or 30 strokes with the unforgiving wood as she howled, then released her, barking, \"On your back!\"\n\nShe rolled over swiftly, whimpering.\n\nHis brown eyes glittered, his voice a dangerous growl, \"Now. I suggest you obey me. Spread. Your. Legs.\"\n\nShe keened quietly and spread her thighs wide. \n\nHis hands found the catches on the little silver chains at her hips and he removed the emerald garment, leaving her naked from the waist down. He slid up next to her body and ran his hands over her covered breasts, making her moan. His nimble fingers found the clasp in her cleavage and he flicked it open. His hands pushed the fabric away, baring her soft, pink-tipped breasts to his gaze and his palms. His thumbs flicked over her already hard nipples. At her throaty moan he smiled and dropped his head, running his tongue around a nipple, covering it with his warm mouth. She arched up into him as he teased, mewling as he moved to her other nipple, his free hand pulling the silk top completely off. \n\nHe reared up looking at her and backed off so he could see her completely. Her blue eyes were glazed with passion, her skin flushed. She was naked but for the belly chain and a silver anklet. She kept her sex shaved and he could see the moisture on the swollen nether lips between her widespread thighs. He regarded her and just breathed, willing his rioting body into obedience. He didn't want the scene to end yet, but it was all he could do to keep from taking her there and then. \n\nHe busied his hands by picking up the glass phallus and dripping some lubricant on it. She didn't look like she needed it, but it was best to be careful. His free hand smoothed over one thigh as he eased between them, placing the phallus at the entrance to her sex. She whimpered incoherently and arched up as he fed the phallus in, rolling her hips. \n\nHe slowly fucked her with the phallus, watching her face as she ignited. She moaned and mewled, begging him to take her. Instead he slowly withdrew the phallus and ordered her to her belly. She rolled over swiftly and obediently. He took a moment to roll a blanket into a bolster and had her raise up so he could shove it under her hips. He tied her wrists together with a length of the velvet rope and then secured it to the iron headboard. He drew a hand over her high, red bottom and slid down her thigh, pulling one leg wide. He secured it with another length of rope to a bedpost. He did the same to her other leg, then stepped back. \n\nEmma was naked and well trussed, her hips ground against the bolster, her soft moans constant. He lubricated a finger and knelt between her legs pulling her cheeks apart. She moaned loudly and thrust her ass up. He noted the strong reaction and filed it, gently easing a finger into her bottom. He moved it in and out of her and she responded beautifully, rolling her hips and making small, lascivious sounds. His cock strained against the confines of his jeans and he gritted his teeth at the effort it took to control his lust. \n\nShe whispered, \"Please, more.\"\n\nHe removed his finger and re-wetted the glass phallus. It was a good deal thicker and he was careful as he gently rocked it into her. She panted and moaned loudly, shoving her bottom up again and he fed several inches into her hot bowels, slowly pumping her ass with it.\n\nHis voice was a rumbling purr, \"You may be someone to fear for the women, my love, but here in my bed, you are a kitten, a begging, wanton, slave.\"\n\nShe was panting and clutching the sheets, she was going out of her mind as he played her body expertly. Her voice was a hoarse moan, \"Yes, Master. Your slave. Please use me. Please take me.\"\n\nHis cock throbbed. Tag had never been this aroused in his entire life. His whole body was shuddering with desire. He used breathing again to force his body into obedience and withdrew the toy. She keened, now empty and hoped his cock would be filling her next. Instead he dropped the phallus gently on the floor, having finished with it and picked up the emerald plug, lubricating it.\n\nHe fed it into her hungry asshole murmuring, \"Your bottom has a turn with my belt first, Woman.\"\n\nShe moaned loudly and he didn't know if was in lust because of the plug, his words, or a combination of the two. He suspected the latter. He anchored it in her bottom and leaned down to nip one full, warm buttock, then eased himself off the bed and stood, his hands at his waist. \n\nShe turned her head when she heard the jingle of the nickel buckle, watching with molten blue eyes as he pulled the belt off with a strong, slow movement of his arm. Her eyes nearly closed when she heard the whisper of the leather run through the denim loops. She couldn't decide what was more erotic, the hissing sound or the way his muscular arm looked as it extended. She was so aroused she was breathing through her mouth. She looked at him with a pleading expression and he knew it wasn't a plea for mercy. \n\nHe purred, \"You'll get 50. Count them.\"\n\nShe started whispering, \"Yes, Sir\" when the first firm blow connected with her hot backside. She yelped, her voice high with distress, \"Oh! One, Sir. Thank you Sir!\"\n\nThe wide, supple belt spanked her again and she moaned huskily, the distress disappearing, \"Two, Sir. Thank you, Sir.\"\n\nHe kept the belt spanking her with slow, firm \"Thwacks\" against her flesh. Other than the initial distress in her tone, he didn't hear anything like what he heard when the wooden paddles spanked her. She was unashamedly rolling her hips and moaning in obvious arousal. The soft, black leather of the belt flamed up her loins as hot as her bottom, and he had the distinct feeling he could strap her all night and it would never be too much.\n\nIt was somewhere around 30 when she changed \"Thank you, Sir.\" to \"Thank you, My Lord.\" or \"Thank you, Husband.\" It was somewhere around 40 when she begged him again to use her. H\n\ne delivered the last five strokes of the belt as slowly as before but very hard. Her bottom wagged under it but her voice was as aroused as ever. He absolutely *loved* spanking her. Other than burying himself in her soft body it was now officially his favorite thing to do. Tag had one more little game planned, he promised his straining cock and burning flesh that he would take her when it was done.\n\nHe dropped his belt after the 50 strokes and pulled off his t-shirt. He unbuttoned his jeans to ease the pressure on his engorged cock and reclined next to her, picking up the only paddle he hadn't used. He regarded it, looking at the beveled holes, thinking they were going to add a bit more sting to her last spanking of the night. His free hand roamed over the flesh of her stuffed rump. She wiggled under it, nearly incoherent.\n\nHis voice was a low, lusty growl, \"I think I will spank you every day, Wife. Your submission and heated reaction please me. I'm about to use your body until you forget any other man exists on the planet. But before then, you will have the lesson tonight driven home. Say my name.\"\n\nShe turned her head to look at him in confusion. His brown eyes glittered at her. She wasn't quite sure she understood, but she stuttered out, \"Gio...Giovanni.\"\n\nThe maple paddle flashed down and spanked her hindquarters hard. She gasped and yelped.\n\nHe murmured again, \"Say my name.\"",
        "She whimpered and murmured, \"Giovanni.\"\n\nThe paddle struck hard again making her bottom bounce under it.\n\nShe wagged her bottom and became distressed, \"Oh! OW! Nnnnnn!\"\n\nShe heard his voice instruct her to say his name again and groaned, knowing what he was doing. Damn him, this was more inventive that the one stroke per minute paddling in the Briefing room.\n\nHer voice was a reluctant whisper, \"Giovanni.\"\n\nThe stinging paddle spanked her hot backside again and she pleaded, \"Please Sir! Please! I understand! My bottom is on fire, PLEASE!\"\n\nHe merely murmured, \"Say my name.\"\n\nHer voice was a distressed keen, \"I don't want to!\"\n\nHis tone hardened, \"Say. My. Name.\"\n\nShe whined loudly, \"Nnnnnn! Gio...Giovanni. AIIIGH! OW! OH!\" shrieking when the unforgiving paddle spanked her bouncing bottom yet again.\n\nTag knew he was almost done. \"Say my name.\"\n\n\"Please don't make me!\"\n\n\"Say my name.\"\n\n\"Please, I'll be good! Please Sir, please!\"\n\n\"Say my name.\"\n\nShe wailed, Oh Noooo! Please, I'll never say it again!...I'll...\" he remained silent. \"...Oh God, fine! GIOVANNI!\"\n\nHe gave her three slow, hard whacks with the paddle while she howled and protested, promising never to utter it again.\n\nHe dropped the paddle on the floor and kneaded her fire-hot buttocks. She writhed in her bonds moaning and whimpering, \"Please...Please...\"\n\nHe gently slid the plug out of her ass and dropped it. He peeled off his jeans and put on a condom, lubricating it then clearing everything off the bed with a sweep of his arm. He moved up behind her on his knees and parted her buttocks with his hands, guiding his rampant cock to her anus. He slid in, slowly stretching her, gritting his teeth for control.\n\nShe thought she would go crazy as she felt him gently force his way into her hot ass. Every nerve in her body was jangling in pleasure and she felt he could fuck her forever and she would never tire. \"First Wife\" disappeared and she moaned huskily, \"Tag please. Fuck me hard, God Please. Just *hammer* my ass.\"\n\nThose moaned words from Emma broke his last vestige of control and he snarled, slamming his hips into her repeatedly. Her screams were all pleasure and he bent his torso down to growl against her ear as he pummeled her asshole, \"I am going to *fuck* you until you can't remember your own name.\"\n\nShe came at his words, bucking and screaming. \n\nHe thrust through her orgasm panting and continually growling. Her ass was so hot and tight he was going out of his mind.\n\nShe yanked repeatedly on her arms, as she thrashed beneath him. She arched her back more screaming and growling, completely overwhelmed by the waves of pleasure that kept hitting her repeatedly. She didn't even know where she was when another orgasm slammed into her body.\n\nTag threw his head back with a roar as his own orgasm hit him like a brick wall. He drove into her ass, shaking sweat from his hair, her hips slick in his hands, as his cock emptied. His body lunged forward a last time, burying him to the hilt as he reached forward, his hands slamming against the ironwork of the headboard. He grasped the top bar in a death grip, his whole body shaking. When the orgasm ebbed he was open mouth breathing, gasping for air. His voice was hoarse when he spoke. \"My God, Emma. Fuck. Christ. Oh my God.\"\n\nShe was gasping for air as well and just moaned, \"I know. I know.\"\n\nHe gently rested himself on her giving her some of his weight. His weakened arms held the bulk of it off her until he thought he would collapse. He rolled to the side, and went to kiss her but she murmured, \"Please. The ropes, I want to hold you.\"\n\nHe sat up cursing himself for forgetting and moved to her feet releasing her ankles in seconds. He gently removed the bolster, stroking her hot ass and sweat-slick back as he moved to her wrists. When he freed them she turned toward him wrapping her limbs around his body, still trembling. He gently stroked her and murmured words of love into her hair. \n\nShe looked at him with glazed, smoke blue eyes. \"I think I may have been teleported to another planet there for a while.\n\nTag chuckled tiredly, \"Did it have exploding colors and no oxygen?\"\n\nShe managed a laugh, \"That was the one.\" \n\nHe grinned and gathered her closer, nibbling her full lower lip. \"Yeah, I was on that tour bus myself.\"\n\nShe murmured, eyes closing, \"Do you think they will have a senior discount on that tour when we are old and grey?\"\n\nHe smiled and rubbed the side of her face with his. \"You better believe it, Wife.\"\n\nFinis."
    ],
    "authorname": "Moxy Irish",
    "tags": [
        "glass phallus",
        "head murmured",
        "emma broke",
        "briefing room",
        "sir lord",
        "bouncing bottom",
        "kneaded cheeks",
        "looked burning",
        "fully stocked",
        "paddle bare"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/after-boot-camp"
}
{
    "title": "Not My Type: Rhiannon Ch. 07",
    "pages": [
        "Thank you so much for waiting for this chapter. Once you read through it, you'll understand it wasn't an easy one to write. I hope you enjoy it. Thank you again for all the wonderful feedback. You keep me writing. All the best ~ firstkiss\n\n*\n\nAdam and I laughed all the way back to the cottage. We told each other flirty little 'what-if' scenarios about how things might have been if he'd picked me up in the bar that night instead of Lilly. Being silly and casual and flirtatious again was such a relief. I'd forgotten how that side of me felt. And knowing we didn't mean a damn word of it, made me feel normal for a moment. Everything was simple again. I didn't know how to thank Adam for that.\n\nWe paused on the front porch. Five Tanner redheads bobbed around inside the windowed front room. The conversation looked so heated, neither Adam nor I wanted to intrude.\n\n\"What do you say we go get dinner started?\" Adam muttered out of the corner of his handsome mouth. \"We can sneak in the back door.\"\n\nI opened my mouth to agree, but when Joe's eyes met mine through the glass, I couldn't speak. He looked so lost, so hurt. It was the first time I'd seen that expression on his face. Knowing I was the cause of it made my chest ache. I'd been so selfishly wrapped up in my own problems that I'd forgotten Joe had quite a few of his own.\n\nAdam watched the silent exchange between me and Joe with a knowing smile. \"Never mind,\" he whispered. He reached for the door and held it open for me. \"Into the fray then.\"\n\nThere were empty beer bottles scattered around the table. Chuck and Matt's faces were too composed while Violet and Lilly looked like they had been crying. The bottom fell out of my stomach as I looked around the room. Something wasn't right.\n\nI instinctively moved to the armchair where Joe sat and perched myself on the arm. I didn't know why, but I needed to be near him. His steady presence had always been calming. Strange how not too long ago, Lilly was the one in the room who I would have turned to. I wondered if she sensed the shift in allegiances.\n\n\"We've missed something big, haven't we?\" Adam asked as he took his place beside Lilly.\n\n\"What's going on?\" I inquired, my voice thick. My heart rate jumped as five pairs of Tanner-blue eyes trained on me.\n\nLilly spoke first.\n\n\"I know that maybe this doesn't mean as much to you as it does to us, but Dad's decided not to sell Joe the farm, he's going to put it on the market instead.\"\n\nJoe went rigid and held his breath. He probably wasn't even aware he was doing it, but the tension radiated off of him. I wanted to reach down and touch him, but I didn't know how he'd react. Instead, I just curled my fingers tightly together and tried to process what Lilly had said.\n\n\"But it was agreed, the farm is Joe's. It's what he's always wanted, what you've all always wanted,\" I said slowly.\n\nAdam shot me a significant look over the auburn heads\n\n\"Oh my God,\" I whispered as realization came crashing down on me. \"This is because of me. He's not going to sell to you because of me?\"\n\nJoe didn't look at me. He just clenched his hands on his lap and stared at the floor.\n\n\"What did they say exactly?\" \n\nSilence. \n\nChuck's kind blue eyes found mine. \"Joe has to make a choice. It's you and the baby or the farm.\"\n\nI rose to my feet. \"What? Are you fucking serious?\" My temper crested as my heart twisted in my chest. \"They can't do that!\"\n\nAdam cleared his throat. \"It's their land Rhi, they can do what they want with it.\"\n\n\"So they put it on the market then!\" I said loudly. I looked down at Joe, but with his head was bent I only saw the back of his tanned neck. \"You can still buy it from them, albeit through different channels.\"\n\n\"I can't,\" Joe said. He spoke so quietly everyone in the room stopped breathing to better hear him. \"I don't have the money Rhi. Dad was going to sell it to me cheap, let me pay slowly over time. What little I had saved up, I spent on this place. I have nothing to give him.\"\n\n\"I'll give you the money,\" I offered.\n\nJoe raised his head then, his beautiful eyes were hollow. He didn't say anything, but I saw the flicker of hurt pride cross his face. He'd never take my money, even if it was the only option open to him.\n\n\"This is insane,\" I muttered. \"How much are we talking about here? Maybe the bank will give you a loan?\"\n\nLilly's voice was soft. \"No bank is going to give him the money, Rhi, even if all five of us pitched in for a down payment. There's no collateral. It's too much.\"\n\n\"How much?\" I demanded.\n\nEveryone paused. Even Adam looked nervous.\n\n\"Nine-hundred-thousand, give-or-take,\" Matt said gruffly. \"They could probably get more if they asked for it. It's the best acreage on the island, easily worth over a million.\"\n\nI reached for my handbag and keys. \n\n\"Where are you going?\" Violet asked, panicked.\n\n\"To sort this out,\" I vowed.\n\n~*~\n\nI stomped up the porch steps to the little yellow house two at a time. I didn't even knock. Joe's parents were sitting in the kitchen. Mrs. Tanner looked surprised to see me burst into the room. Mr. Tanner's expression flickered, but didn't change.\n\n\"This is bullshit!\" I shouted. \n\nThe grim line of Mr. Tanner's mouth deepened but he remained silent. \n\n\"How can you punish him like this!? The farm is all he's ever wanted and you're going to take it away from him? He's worked his ass off for you his entire life! Doesn't that mean anything to you?\"\n\nMrs. Tanner looked as if she wanted to say something, but her husband shook his head and she bit her tongue.\n\nI reached into my handbag and pulled out my cheque-book.\n\n\"What do you want for the farm? One million? Two?\" I glared over the top of my cheque-book at the both of them. \"Is that how much it's going to cost me so the two of you can feel better about yourselves? This isn't his fault and you're punishing him!\" \n\n\"It isn't about the money Rhiannon,\" Mrs. Tanner said. \"This has been Tanner land for seven generations. Joe has to consider his future and the future of this family. He's always known what is expected of him. We have always expected him to do the right thing.\"\n\nI folded my arms and stared them down. I cocked an eyebrow. \"Don't start giving me the speech about 'what's right', I've heard that enough from Joe lately. Do you really know your son so little that you think he hasn't tried to do that? The first thing he did was ask me to marry him!\"\n\nMrs. Tanner looked shocked. Realization jolted me. Joe must have skipped over that part of his earlier conversation with them.\n\n\"You're going to make him choose between me and the farm. Don't you care about him at all?\" I knew they'd be upset and shocked but they were such nice, good people. I never would have predicted this kind of reaction. Never. I'd always thought the Tanners were the perfect family, so loving and supportive of each other even if they were old-fashioned. It was difficult for me to admit to myself that they might have flaws and that they weren't the idealized family I always thought they were.\n\n\"He's already chosen,\" Mr. Tanner bit out. He glared up at me with those damn blue eyes and a face so much like Joe's it was scary. It was as if it was Joe staring up at me -- Joe twenty-five years from that moment, with a face weathered by countless hours on the back of a tractor, five children, and a world of worries. And looking at Mr. Tanner I knew without being told which option Joe had chosen. \n\nI clutched at the back of the nearest kitchen chair, suddenly dizzy. \n\n\"No,\" I whispered. \"He can't do this. The farm is his heart! It's who he is!\"\n\n\"We know,\" Mrs. Tanner said quietly.\n\nParis. \n\nThe idea snuck up so silently in the back of my brain it made my knees quake under me. Joe couldn't choose me if I was not around to choose. I could leave and he would have the farm, have what was rightfully his, what he loved most in this world. There was no need for him to play the hero if I disappeared. His parents were forcing him to make a decision which wasn't fair, but two could play at that game. If I took away the second option, they'd have to forgive him and sell him the farm.\n\nI would miss Mrs. Nichol, Lilly and Adele like crazy, but maybe Paris was a place where my child could grow up knowing nothing of the person I had been before I became a mother. The old Rhiannon sat like a ghost over my shoulder. Carefree, unapologetic, and without responsibility. She was a woman I hardly recognized anymore, gone in the aftermath of one night with Joe. Strangely enough, I didn't miss her. I didn't regret her; I just wasn't that person any more.\n\nJoe's parents eyed me warily. I'd always thought they liked me, but I guess all those years of being Lilly's friend didn't translate to my being a suitable mother for their first grandchild. Was it really too much to ask them to accept me? Could I really blame them for having some reservations? No one knew better than I did how wrong of a person for Joe I truly was. Yet it stung to think that Joe's parents, who had always welcomed me into their home as Lilly's friend, couldn't extend their kindness to me as the mother of Joe's child. \n\nAll those holidays I'd spent in their kitchen, all those times they'd greeted me at the front door flashed before me. In the past, they made me feel like I was a part of their family but now I knew how they really felt about me. It had all been a lie. They were just being polite\u2014for Lilly's sake\u2014because it was the 'nice' thing to do. The bitter taste of betrayal stalled in the back of my throat. \n\n\"If I go away will you promise me the farm will be his?\"\n\nMr. Tanner nodded slowly. A little flicker of emotion, maybe shock, crossed his face, almost as if he couldn't believe I'd just up and leave.\n\n\"Fine,\" I agreed. My voice sounded far away and so detached from my brain that the words I heard myself speak didn't seem to come from my own mouth. \"I'll leave. Tonight.\" \n\nI glanced over at Mrs. Tanner who sat so quietly at the end of the table. Her fair face was flushed with some unreadable emotion; whether it was anger or shame I couldn't tell. I wanted to yell at them, rail at them, tell them how selfish they were being, how heartless to deny Joe what he'd always worked to make his own simply because of me. But the words wouldn't come. The urge to scream my fury from the rooftops was nothing compared to my stunned disbelief over what just happened. \n\nWere these the same people whom I'd cared for and respected all these years? I knew the news about the baby would shock them. After all, they'd pictured something else, someone else when they envisioned a wife for Joe and the arrival of their first grandchild. I expected them to be upset but still accepting, the way Lilly was. But I never imagined this. I didn't know what to do.\n\nParis.\n\nI could be in Paris by breakfast. Paris, where a mist of rain through the soft glow of the streetlamps at dusk was pure magic. Paris, where the bricks and stones knew of a million love affairs gone wrong. Paris, where maybe I could forget the gentle rasp of work-hardened hands against my skin, the smell of red earth, and Joe's heartbeat against my arm as I fell asleep curled beside him. \n\nI was going to cry. I knew I was and I didn't want to do it there. Not in front of them. But a solid wall of t-shirt clad muscle blocked my exit when I turned to leave.\n\nI looked up slowly. Joe's brilliant blue eyes locked instantly on my own. Every second felt like a million years. \n\n\"Where are you goin', darlin'?\" he asked in a husky whisper.\n\n\"Away Joe. It's better if I do.\" My chest ached. My throat burned. I wanted to curl up in my bed, hide under the duvet and stop thinking, stop feeling.\n\nJoe shook his bright head. \"It's not better. Not for me.\" He reached for my left hand and held it gently.\n\n\"It's me or the farm, isn't it? That shouldn't be much of a choice really,\" I tried for a light-hearted tone but failed.\n\nJoe didn't reply. Mrs. Tanner started to cry behind me.\n\n\"Two days ago you took me out to the field and told me that if I was ever going to love you, I had to love this place too. That's how much you belong here, Joe. How can I ask you to give that up? And what for? For me? It's ridiculous. I'm not worth it.\"\n\nI tried to picture Joe outside of the rust red fields and rolling green hills but nothing came. How could I ever measure up to generations of family tradition, to the strong, constant land he loved more than anything? \n\n\"If you go darlin', I don't wanna be here. I won't love it anymore. Not without you, not without her.\" He touched my abdomen lightly. \"I've put everything I had into this farm, everything I am, so that some day I could turn around and share it with my wife and children. What good's it gonna be to me without you?\"\n\nI just couldn't reconcile myself to the image of me as a farmwife, not the sort that Joe had grown up around anyway. One glance at his mother confirmed that. She was everything a farmer needed in a spouse: patient and kind, constant through all hardships, hardworking and self-sacrificing. Plus she baked the best damn chocolate chip cookies on the planet. I couldn't even warm canned soup without setting off the smoke detector.\n\n\"There'll be another wife Joe, another baby. Someone better suited to you and to this place,\" I said, hating the words even as I spoke them. How could I be jealous of a hypothetical woman and her hypothetical offspring?\n\nJoe shook his head. \"You're it for me, Rhiannon. There won't be anyone else.\" His grip tightened on my hand.\n\n\"I have to go. Don't you see that I have to? I can't come between you and your family, you and the farm.\" My voice was thick with the tears I refused to shed.\n\n\"Then I'll come with you.\" Joe said. \n\n\"And do what, Joe?\" I just could not imagine Joe in a suit and tie, working a nine-to-five office job.\n\n\"It doesn't matter. I'll save up and we'll buy land somewhere else. A farm in Ontario, Alberta, China, I don't care!\"\n\nHe sounded so sincere and determined that I didn't have the heart to remind him we wouldn't need to save up. There wasn't a farm on the planet I couldn't buy if we wanted it badly enough. Just that small difference between our ways of thinking was enough to remind me that we weren't meant for each other. \n\nI shook my head. \"No, Joe. We tried. I can't let you do this to yourself. Seven generations of Tanners have farmed this land! I won't be the one to change that.\"\n\nMr. Tanner came slowly to his feet. He and Joe were roughly the same build and size, but somehow Mr. Tanner seemed bigger, as he if needed more space. \"She's right Joseph. Let her go.\"\n\nLilly always told me Joe had a temper. Right then, I knew I'd just been lucky to never have seen it before. A heated, angry flush crept across his neck when he turned to his father. I actually felt the taut tension in his muscles.\n\n\"This is none of your business,\" Joe said quietly in a tone more menacing than if he'd yelled it at the top of his lungs.\n\nJoe's father's expression took on an equally ominous cast. \"This is still my farm. Still my family. I still have a say.\"\n\n\"Not over this.\"\n\nMr. Tanner drew himself up to his full height. He and Joe stood toe-to-toe. Both men bristled with barely restrained anger.\n\n\"Look at her Joseph, she doesn't belong here and she never will.\"\n\nJoe said nothing as he stubbornly held his father's gaze. On the other side of the room Mrs. Tanner sat holding her breath. I think I'd forgotten to breathe too.\n\n\"You have your family to consider. I will not see you throw this farm away. You're not thinkin' with your head, Joseph,\" Mr. Tanner's voice was edged with hurtful scorn. \"You're thinkin' with your dick.\"\n\nJoe's punch landed squarely against his father's jaw with a sickening noise. Both Mrs. Tanner and I screamed. I moved first, throwing myself at Joe before Mr. Tanner reciprocated. \n\n\"She is my family. I have other considerations now other than you,\" Joe ground out through gritted teeth as he glared darkly at his father.\n\nThe identical dark expressions on both men's faces scared me half to death. Mr. Tanner stumbled back from the impact of his son's fist against his jaw but never broke his gaze from Joe. The two men circled each other, with me clutching Joe's arm. Tears streamed down my cheeks.\n\n\"Don't do this,\" I pleaded softly. Beneath my hands Joe's arm was steel hard, tight with rage as he waited for his father to make a move. \"Joe please, please don't do this. He's your father. I'm not worth it.\"\n\nAt my words, Joe froze and then he rounded on me with a low growl in his chest. \"You are. Why can't you see that?\"\n\nHis scowl was so dark, so alien to me that I took a step back, afraid. \"No, I'm not. Your father is right. I don't fit in here and I never will. You deserve better than that and you know it.\"\n\nJoe reached for me and wrapped his hand around the back of my head. He leaned down and rested his forehead against my own. His deep blue eyes blocked out the rest of the world. \"I love you, Rhiannon.\"\n\n\"Joe,\" I gasped. Shock rippled through me. I couldn't believe he'd said it. Instantly, I wanted to hear him say it again.\n\n\"I love you both.\" His free hand settled over my stomach. \"I don't care what they think, Rhi,\" his voice was gruff. \n\n\"We don't care what they think either,\" said a soft voice over Joe's shoulder. I looked up to see Lilly standing in the doorway to the kitchen with Matt, Chuck, and Violet.\n\n\"What are you doing?\" Mr. Tanner asked sharply. He glared at his children.\n\nJoe's brothers and sisters surrounded me until we formed a pack. \n\n\"We're doing exactly what you taught us to do,\" Lilly said with a brave smile. \"We're doing the right thing.\"\n\nMr. Tanner's angry expression deepened. \"Get out!\" he snarled. Mrs. Tanner made a small noise of distress which he ignored. \n\n\"Get out of my house. All of you.\"\n\nJoe shot his father a look of disgust, and then with a small grunt of displeasure took my arm and pulled me from the kitchen. His brothers and sisters followed. Not a single one of them looked back.\n\n~*~\n\nIt was a sombre but thankfully short trip back to the cottage. Adam had dinner waiting. The men started in on the drinking the moment we were all settled at the table. It was the quietest meal I'd ever eaten with the Tanner clan.\n\nAdam kept shooting me reassuring smiles across the table. I appreciated the support but all I thought about was Joe and what he was giving up for me. It didn't feel right. Over and over in my head I heard his voice saying the three words no one in their life had ever said to me. \n\nI didn't know what to do, what to think. I love you, Rhiannon. All I knew was that I wanted to hear him say it again. I wanted to hear him say it every day for the rest of my life. Nothing had ever sounded so right before. There was only one problem -- loving me meant losing the farm. I couldn't let that happen.\n\nHow long would it take for Joe to begin resenting me? To wish he'd made a different decision? To wish he'd chosen the unchanging land instead of the inconstant woman? And how could I expect him not to feel that way? Only Lilly, Adele, and Mrs. Nichol had ever stuck around for me. Everyone else that had ever meant anything to me in my life always ended up leaving. My mother. My father. Every man who I'd ever had the faintest hope of making a future with.\n\nAfter dinner the guys moved their heavy drinking to the sunroom and Violet went upstairs to make up all the spare beds. She, Chuck, and Matt would need a place to stay until things got better. Adam was in no shape to take the bike back to the city, so he and Lil would also be spending the night. Lilly and I lingered in the kitchen, doing the dishes. \n\n\"Do you think he meant it?\" I asked in a low, hollow whisper as I passed a clean plate to Lilly to dry.",
        "She watched me for a moment, her pretty face thoughtful. \"Never in twenty-nine years have I ever known Joe to say something he didn't mean,\" she offered after a time.\n\nIt was a roundabout answer, but I'd have to content myself with it. \n\n\"What am I going to do, Lil? What are you all going to do?\" My question came out sounding just about as tortured as I felt.\n\nShe turned and gave me a much-needed hug. \"We're Tanners,\" she said with a wry smile. \"We make do.\"\n\n~*~\n\nI went to bed before everyone else. It had been too much of a day for me and I was exhausted. I had no idea what time Joe joined me. I was half awake when I felt his strong arm wrap around my waist. I thought maybe he'd be too upset to make love, too distraught by the chaos I'd brought to his family and his life. Instead Joe came to me with a wild desperation that made my heart ache in my chest. \n\nWe didn't say anything to each other. I knew words wouldn't heal the hurt Joe had endured. I didn't have anything else to give him except my body and our lovemaking was fierce and silent, tinted with anguish. Joe held on to me so tightly I could barely move, hardly breathe and I should have been frightened by the intensity of him but I wasn't. For a brief time he wasn't the gentle, considerate Joe I knew, but the darkness in him thrilled me a little too. To know he was capable of such emotion, even if it was in the darkest minutes of night, brought tears to my eyes.\n\nAfterwards, Joe only slightly loosened his arms around me before he slept. I tried to switch off my brain and sleep too, but it was difficult and it was a long time before I could. \n\nI was the first person up in the morning, owing mostly to the fact that I was the only one without a hangover. Sometimes I didn't miss drinking as much as I thought I would. I wrapped myself up in one of Joe's big hand-knit sweaters and headed outside. I sat on the beach for a long time just watching the tide change.\n\nThe slow, heavy sound of the footsteps crunching across the red sand behind me hinted at only one person. Joe. My stomach clenched nervously. We were going to have to have a talk. I just didn't know what I wanted to say. I took a few deep breaths, expecting to look over my shoulder and see Joe standing there with a 'we-need-to-talk' look on his face. Instead he held my cell phone in his hand.\n\n\"Rhi,\" he started then hesitated. My stomach dropped at the look on his face. He held out my cell phone. \"Rhi, darlin',\" his voice cracked, \"that was the hospital. It's Mrs. Nichol...\"\n\nTo be continued..."
    ],
    "authorname": "firstkiss",
    "tags": [
        "romance novella"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/not-my-type-rhiannon-ch-07"
}
{
    "title": "Life after the Lottery Ch. 70",
    "pages": [
        "The story continues! Make sure you have read chapter 69 first. Copyright LATL 2020. No part of this may be reproduced or reposted on any other website than Literotica.com\n\n*\n\nCH 70\n\nThe big surprise\n\nFrom the last chapter:\n\nWe laid in the bed and held each other for a while.\n\n\"Linda has a surprise for us,\" Dawn said as she laid her head on my chest.\n\n\"Did she tell you we were going to Paris?\"\n\n\"We are!\" Dawn said, looking up.\n\n\"That is where she is taking us for New Years. You said you knew she had a surprise for us?\"\n\n\"Oh...yes.\"\n\n\"Were you talking about something else?\" I asked.\n\n\"I...think she has something she wants to talk to us about.\"\n\n\"Did she say something?\"\n\n\"Not exactly. I just know she has something she wants to ask us.\"\n\n\"How do you know that?\" I asked curiously now.\n\n\"Something I was told.\"\n\n\"By who?\"\n\n\"My ancestors. They told me that since she was a part of our life...she had something to ask us.\"\n\n\"What?\"\n\n\"I'm...not sure exactly.\"\n\n\"You are not sure...or you don't want to tell me?\"\n\n\"I'm not sure I want to tell you.\"\n\nCH. 70\n\n\"Honey, what do you mean you are not sure you want to tell me?\" I asked.\n\nDawn sat up in bed.\n\n\"We need to talk,\" Dawn said.\n\n\"About something you learned on the reservation?\"\n\n\"Yes.\"\n\nDawn looked very pensive.\n\n\"Whatever it is, just tell me. What did you learn about Linda?\"\n\n\"I will tell you, but you have to promise not to say anything to anyone yet. Even the girls. We have to wait until Linda asks.\"\n\n\"Ask what?\"\n\n\"Linda has something she wants to do. She may not understand it yet, but she is considering it.\"\n\n\"What?\"\n\n\"Linda and Rachel want to have a child,\" Dawn said.\n\n\"Are they going to adopt?\"\n\n\"No.\"\n\n\"Then what?\"\n\n\"She and Rachel want you to be the father...\"\n\n\"What?\"\n\n\"Linda wants you to father her child. The two of them want children...and they think this would be best.\"\n\n\"Oh...really?\"\n\nIt was quiet a minute or so.\n\n\"How do you feel about that?\" Dawn asked.\n\n\"I'm not sure. And...your ancestors showed you this?\"\n\n\"This was one of the things. I had to decide how I felt about it before I told you.\"\n\n\"How do you feel about it then?\" I asked.\n\n\"I think it would be great. Linda is not getting any younger, and if she and Rachel want to take this step, I think it is good for them.\"\n\n\"But...how would you feel about her having my child?\"\n\n\"I know how I feel. How do you feel about it, honey?\" Dawn asked.\n\n\"What would they tell the child when it got older?\"\n\n\"I think they would tell the truth. How would you feel about that? How would you feel about being a father?\"\n\n\"Okay...I guess. I mean...it is something that we never did. How are you going to feel about me having a kid?\"\n\n\"I think it is a great idea. If Linda is going to have a baby, you would be the logical and best choice for a father.\"\n\n\"Honey, how are you going to feel since we never had kids?\" I asked.\n\n\"This is something that is supposed to happen...it was shown to me.\"\n\n\"Why would you be shown that?\"\n\n\"Because it impacts us. It is a big step for both of us,\" Dawn said. \"You need to think seriously about what it would mean to have a child.\"\n\n\"Are Linda and Rachel ready for that?\"\n\n\"They think they are. What I was shown was the two of them together...years from now. In a time that it would not be such a big deal for them to be together and have a child.\"\n\n\"So, they were still together?\"\n\n\"Yes, and happy.\"\n\n\"What else were you shown?\" I asked.\n\n\"One thing at a time, honey. Let's fix lunch.\"\n\nWe got up and grabbed our robes and went down and started lunch.\n\n\"Honey, I know you said not to say anything to the girls, be we are a family. They are part of this,\" I said as I sat at the table.\n\n\"When Linda asks, they will be a part of it. We need to know how you feel about it.\"\n\n\"If this was something you were shown, we must have said yes.\"\n\n\"I was shown different outcomes. We could say no, or yes. There are always multiple paths.\"\n\n\"Did any of them come out bad?\"\n\n\"Some things I was not shown. Just a question of you fathering a child.\"\n\n\"Your ancestors are cruel!\"\n\n\"They just show me the different paths that will be presented. I must choose the one I think is the best for me and us.\"\n\nWe cooked and sat and ate quietly for a bit. Dawn was letting things sink in for me.\n\nDawn got up and grabbed the dishes and took them to the sink as I sat and thought.\n\n\"And you are okay with me having a child?\" I asked.\n\n\"Are you?\" Dawn asked. \"The decision is yours.\"\n\n\"I think it is our decision. We all love Linda, and she is a part of us. We all should decide.\"\n\n\"We will.\"\n\nDawn cleaned up quietly.\n\nAfter Dawn finished in the kitchen, we picked up boxes and paper from Christmas while the girls were out shopping. \n\n\"Don't tell the girls about Paris. Let them think we are going to Aspen,\" I said.\n\n\"You are terrible...but they will like the surprise. Lieke will love it.\"\n\nAfter we picked up everything, we went up and showered. We were drying each other off as I looked at Dawn's amulet.\n\n\"Honey, will you wear that all the time now?\"\n\n\"Probably. It is small.\"\n\n\"What is it?\"\n\n\"It is stone from the old burial grounds. It is sacred. It represents that I am a medicine woman.\"\n\nWe got dressed and went downstairs. \n\nThe girls came in about 2:30 loaded down with packages. Dawn and I were on the sofa, discussing her latest surprise when Samantha walked into the house. The girls made several trips in with more bags. Once they had everything unloaded, they sat with us.\n\n\"Did you shop out the stores?\" I asked.\n\n\"We tried,\" Samantha replied.\n\n\"Lieke, have you thought about us making a video for James?\" Dawn asked.\n\n\"I guess we can. I don't know how well I can act.\"\n\n\"You don't have to act,\" Dawn said. \"We can do it before dinner.\"\n\n\"Okay.\"\n\n\"Let's get ready.\"\n\nDawn and Lieke went upstairs.\n\n\"James, did you and Dawn make love while we were gone?\" Samantha asked.\n\n\"Yes.\"\n\n\"I thought so.\"\n\n\"Why?\"\n\n\"I thought...she feels...different. Very satisfied.\"\n\n\"Anything else?\" I asked.\n\n\"I'm not sure. Something, though.\"\n\n\"I feel it too,\" Amy said. \"She feels...different to me.\"\n\n\"How?\"\n\n\"Stronger...much stronger...different,\" Amy said.\n\n\"Let's get the camera and lights ready,\" I said, and we went to the studio.\n\nAmy and Samantha were right. Dawn felt much different now. Much stronger and more pure and confident.\n\n*****\n\nI was showing Amy and Samantha how to set up the lights for video. I had the new video camera on the tripod and was checking it out when Dawn and Lieke came in. They both looked fantastic.\n\nWe decided Lieke would be lying on the bed, and Dawn would come in and start making love to her.\n\nWe spent about three and a half hours making the video. The two of them were very sexy as they made love to each other. Once I finished the video, I took some photos with my new still camera.\n\nI had thought as I watched Lieke that she seemed to be very overcome by Dawn's attention to her. I had looked over at Samantha a few times while shooting the video, and she would look at me and shake her head. Something was going on with Dawn.\n\n\"This is going to be a hot video,\" Amy said when I finished.\n\n\"That was fun,\" Dawn said as she sat on the edge of the bed.\n\nLieke was still lying back on the bed.\n\n\"Lieke, are you okay?\" I asked.\n\n\"Oh...I am fine.\"\n\nI got Lieke to let me take some more photos of just her on the bed.\n\nDawn went to the kitchen with Amy and Samantha to start dinner.\n\n\"Lieke, are you sure you are okay?\"\n\n\"James...I have never been pleased like that. I had so many orgasms and...they were so different.\"\n\n\"How?\"\n\n\"Well...I felt them build and build, but I didn't explode like I usually do. They just...ran through my entire body as a wave of pure pleasure. It was incredible. I tried to please Dawn like that...\"\n\n\"You did.\"\n\n\"I have never felt anything like that.\"\n\n\"Dawn has an effect like that on people.\"\n\nI talked to Lieke as I packed up the lights and camera. She asked me a few questions I had to answer by telling her how Dawn and I could feel each other's energy.\n\n*****\n\nI was in my study about 8:00 when I got a call from Sam.\n\n\"Hey, Sam.\"\n\n\"Hey. Are you doing anything for New Year's?\"\n\n\"We are going out of town with Linda for the weekend.\"\n\n\"Oh...\"\n\n\"Why?\"\n\n\"Oh...I was just wondering if we were all going to get together before the end of the year.\"\n\n\"I think you really just want to fuck the girls, Sam.\"\n\n\"Well!\" He laughed.\n\n\"Sam, if you want to fuck Dawn or the girls, just come over and do it.\"\n\n\"Uhh...are you sure?\"\n\n\"I'll ask them, but I am sure they are okay with it. You and Olivia come tomorrow and stay and fuck all of them.\"\n\n\"James, are you sure?\"\n\n\"Just bring Olivia.\"\n\n\"Oh...okay...\"\n\n\"I'll ask them just to make sure and call you back in a few minutes.\"\n\n\"Oh...okay.\"\n\nI hung up and walked out to the den. The girls were all looking at the clothes they bought.\n\n\"Sam just called and asked if we were doing anything for New Year's. I told him we were going out of town. He really just wanted to fuck all of you. Is it okay if they come tomorrow?\"\n\n\"I guess,\" Dawn said. \"How about all of you?\"\n\n\"Sure,\" Samantha and Amy said.\n\n\"Who is Sam?\" Lieke asked.\n\n\"A friend of ours. You will like his cock,\" Amy told her.\n\n\"Are you serious!\"\n\n\"He and his wife come over all the time, and we have sex. You will have a good time,\" Dawn said.\n\n\"Okay, I will call him back and tell him it is okay.\"\n\nI went back to my study and called Sam back.\n\n\"Sam, they said come on over.\"\n\n\"Oh...okay. I wasn't really thinking about coming this weekend. My sister is in town.\"\n\n\"Bring her.\"\n\n\"Well...I will have to talk to her first. She may not want to come because of her husband.\"\n\n\"Bring him too.\"\n\n\"He didn't come.\"\n\n\"Well, work it out. Plan on eating lunch.\"\n\n\"Okay. I will see if she will come.\"\n\n\"Is she cute?\"\n\n\"My sister is hot.\"\n\n\"Then, you need to bring her!\"\n\n\"I'll try.\"\n\nI hung up.\n\nA few minutes later, Dawn came in.\n\n\"Are they coming?\"\n\n\"I guess. Sam wasn't planning on coming this weekend because his sister is in town.\"\n\n\"Did you tell him to bring her?\"\n\n\"Yes, but he said she was married.\"\n\n\"He can come too.\"\n\n\"He is not with her. Sam said he would talk to her.\"\n\n\"What time?\"\n\n\"About lunch.\"\n\n\"Okay.\"\n\nI was finishing up what I was working on when Lieke came in.\n\n\"James? I am supposed to have sex with him?\"\n\n\"If you want. He and his wife are a lot of fun. You know you don't have to.\"\n\n\"I just wanted to check.\"\n\nWhen I left my study, I found all of them in the den talking.\n\n\"Are you finished?\" Dawn asked.\n\n\"Yes, I was just checking my email.\"\n\n\"Good. Lieke wants to see the video of you and Brandi Love.\"\n\nAfter we had watched the video, the girls wanted to watch me do Lieke. She got up on her hands and knees on the sofa, and I got behind her. Lieke and I fucked for about 30 minutes until we both came.\n\n\"Lieke, I think you are learning to enjoy that,\" Dawn said.\n\n\"Oh, I do!\"\n\nDawn got on the floor between Lieke's legs as she sat on the sofa and licked at the cum running out of her. Lieke came hard several more times.\n\nAmy and Samantha took Lieke upstairs to clean up.\n\n\"I need to ask you something,\" I said to Dawn.\n\n\"What?\"\n\n\"Do you feel different now?\"\n\n\"What do you mean?\"\n\n\"I have noticed that your energy feels different. More powerful and pure. The girls have noticed it too. Lieke said she had never felt as pleased when you two finished the video. Has something changed?\"\n\n\"I have changed. Great-grandmother said that I would be more powerful now in some ways. She said it happens to us when we go through this transition.\"\n\n\"What is the transition? You becoming a medicine woman?\"\n\n\"That is part of it. I am still working through all of it.\"\n\nWe went upstairs and got in bed, and waited for the girls and Lieke. They finally came in and got in with us. I didn't think we would ever get all the giggling stopped so we could get some sleep.\n\n*****\n\nSunday morning, I was sitting in the den with everyone but Dawn watching TV. A few minutes later, Dawn came down the stairs with a gym bag and walked over and sat on the floor in front of us. She unzipped the bag and took out her large hunting knife, then pulled out a large sharpening stone and a rag. \n\n\"What are you doing?\" Samantha asked.\n\n\"I need to sharpen my knife,\" Dawn replied.\n\nSamantha watched as Dawn set everything up to sharpen the large knife she had taken with her on the reservation. Once she started drawing the knife over the sharpening stone, Samantha got up and sat on the floor next to her to watch.\n\nAmy got up and walked to the kitchen.\n\n\"Anyone else want an apple?\" She asked from the kitchen.\n\n\"Sure, bring me one,\" I said.\n\nAmy picked up two apples and headed back to the den.\n\n\"Are you making it real sharp?\" Samantha asked.\n\n\"Yes. All of my knives are very sharp, so handle any you pick up carefully,\" Dawn replied as she drew the knife over the stone.\n\nAmy sat between Lieke and me and handed me the large red apple.\n\nSamantha peered into Dawn's bag, then reached in and pulled out a sheath with three knives in it.\n\n\"What are these?\" Samantha asked.\n\n\"Very sharp...\"\n\n\"This looks like a holster or something,\" Samantha said as she looked over the knives.\n\n\"It is. Those are throwing knives,\" Dawn said.\n\n\"Throwing knives? You throw them?\"\n\n\"She does,\" I said.\n\n\"Let me show you,\" Dawn said and took the holstered knives from Samantha and drew one out.\n\nI took the apple I had and tossed it about ten feet in front of Dawn. \n\n\"Damn!\" Amy exclaimed when the knife went into the apple as it fell to the floor.\n\nDawn had thrown the knife and hit the center of the apple. Samantha had hardly seen Dawn move as she threw the knife.\n\nLieke got up and retrieved the apple, and held it up. The 6-inch knife was stuck through the center of the apple.\n\n\"I didn't know you could do that?\" Samantha said.\n\n\"I didn't either the first time I saw it,\" I told them.\n\n\"Where did you learn that?\" Amy asked.\n\n\"On the reservation. One of the warriors taught me to throw knives when I was young. I just got good at it over the years,\" Dawn said.\n\n\"Is this a holster for the knives?\" Samantha asked.\n\n\"Yes. Let me show you.\"\n\nDawn took the holster and strapped it on the inside of her forearm, and stood.\n\n\"I can wear it like this under a baggy shirt and easily pull the knives out.\"\n\n\"Dang,\" Samantha said. \"Is that legal to wear?\"\n\n\"More or less.\"\n\n\"Do you ever wear them when you are out...for protection?\" Amy asked.\n\n\"Sometimes. They can be useful if multiple people are attacking you,\" Dawn told them. \"I am never without a knife. Just a thing from my childhood.\"\n\n\"Show us again,\" Amy said.\n\n\"Sam, look in the bag. There are some tennis balls in there. Get one out.\"\n\nSamantha dug through the bag and got out a tennis ball.\n\n\"It is full of holes,\" Samantha said.\n\n\"Toss it across the floor,\" Dawn told her.\n\nSamantha tossed the ball across the floor. There was a blur of movement from Dawn, and a small knife hit the ball as it rolled.\n\n\"Damn!\" Amy exclaimed.\n\n\"Where did that knife come from? You didn't take one off your arm?\" Samantha asked.\n\n\"I slipped it out of my back pocket when you weren't looking.\"\n\nLieke retrieved the tennis ball and handed it to Dawn. It had a 4-inch steel blade running through it. Dawn pulled the knife out and slipped it back in the back pocket of her blue jeans.\n\n\"Can you teach me how to do that?\" Samantha asked.\n\n\"Sam, I have had years of practice. I can teach you to throw a knife, but you should never depend on one for defense. You will never be that good with a knife.\"\n\n\"I can learn,\" Samantha promptly stated.\n\n\"I'll make you a deal then. Once you get your blackbelt, I will teach you how to use a sword,\" Dawn said.\n\n\"A sword? I want to learn to throw a knife.\"\n\n\"You start with a sword.\"\n\n\"Where did you learn to use a sword?\" Lieke asked.\n\n\"It is a lot like the fighting spear I learned to use on the reservation, but I learned to use a sword when I was studying Bushido karate.\"\n\n\"I have never seen a sword around here,\" Amy said.\n\nDawn smiled and walked over to the wood mantle over the fireplace. She pushed up on the bottom, and a secret compartment dropped down. Dawn took her katana from the shelf and turned to show it to the girls.\n\n\"First and foremost...none of you ever touch my swords. Is that understood?\" Dawn asked.\n\n\"Sure.\"\n\n\"Okay.\"\n\n\"James does not touch my swords.\"\n\nDawn pulled the katana from the scabbard.\n\n\"Wow...\" came from Samantha as she saw all the intricate engraving on the blade.\n\nDawn held the katana for her to look closer.\n\n\"This is a sword or a katana,\" Dawn said. \"It is as sharp as a scalpel.\"\n\n\"Is that a Samurai Sword?\" Samantha asked.\n\n\"Similar. I have several of those too.\"\n\nDawn walked over to Samantha and held the blade out so that she could see the patterns and engravings.\n\n\"Lesson number one. Never, ever, touch the blade with your hands. It is as sharp as any surgical scalpel. It will cut you badly, and you will never realize it until you see all the blood.\"\n\n\"Why is it so sharp?\"\n\n\"When doing battle with a katana, you need it sharp to cut off your opponent's limbs.\"\n\n\"Damn.\"\n\n\"This is a very old handmade katana. It was one of the first things I bought myself after we won the lottery. It cost about $20,000.\"\n\n\"It is pretty,\" Amy said as she looked.\n\n\"And deadly,\" Dawn replied.\n\n\"I don't guess you have ever used it to defend yourself,\" Lieke said.\n\n\"Not yet.\"\n\n\"Dawn, are there others hidden around the house?\" Samantha asked.\n\n\"Yes.\"\n\n\"Amy, hand me your apple,\" I said.\n\nAmy handed me the apple she had never gotten around to eating.\n\nDawn held out the sword with the edge up. I held the apple about 6 inches over the blade and dropped it. The apple fell, and the sword edge passed through it easily, and the apple landed on the floor in two pieces.\n\n\"See how sharp it is,\" Dawn said.\n\n\"Damn,\" Amy said.\n\nDawn held the sword up and retrieved a cloth from the hidden compartment, and wiped the blade down carefully. She then expertly took the sword and slid it back into the scabbard.\n\n\"Am I clear that you never touch this?\" Dawn asked.\n\n\"Yes.\"\n\n\"Yes.\"\n\nShe placed the katana back into the dropped down shelf and pushed it back up into its locked position.\n\n\"You are just full of surprises,\" Amy said. \"Are there any more?\"\n\nDawn smiled.\n\n\"A few.\"\n\nDawn gathered up her throwing knives and sat back down on the floor, and went back to sharpening her big knife.\n\n\"Did you use that knife to kill the rabbits?\" Samantha asked.\n\n\"Just to skin them.\"\n\n\"How did you catch them then?\"\n\nDawn stopped for a moment.\n\n\"The rabbits gave themselves to me for food,\" Dawn said.\n\n\"What? Did you catch them?\"\n\n\"No, they came to me when I needed nourishment.\"\n\n\"They just came to you?\" Amy asked.\n\n\"Yes. They gave up their lives for me. I honored them by preserving their hides for great-grandfather. He will have the pelts made into an honor blanket.\"\n\n\"How did you kill them then?\"\n\n\"Quickly.\"\n\nDawn went back to sharpening her knife. Samantha, Amy, and Lieke watched quietly until she finished. She put her knives away in the bag.\n\n\"Anyone want to help me with lunch?\" Dawn asked.\n\n\"Can I have a big knife like that?\" Samantha asked.\n\n\"You have to earn it.\"\n\n\"How?\"\n\n\"You will learn,\" Dawn said as she stood and walked to the kitchen.\n\nAmy followed Dawn to the kitchen. Samantha told Lieke about the big deer she saw. She called it Dawn's deer.\n\n*****\n\nAbout 11:30, I saw Sam and Olivia's code come up on the TV. Samantha had been showing Lieke some of our videos.\n\n\"They are here,\" Samantha said.",
        "I got up and went to the door and opened it and waited. His car pulled up, and he and Olivia got out. The back door opened, and a tall blonde got out.\n\n\"Come on in,\" I said.\n\nThey came into the house, and I closed the door.\n\n\"Hi, everyone,\" Olivia said.\n\n\"This is my sister, Ellen,\" Sam said.\n\n\"Nice to meet you, Ellen.\"\n\nI looked her over. She was tall like Sam and had a nice looking body. Long legs and some nice big tits.\n\n\"Nice meeting you.\"\n\nAll the girls walked up, and Sam introduced Ellen again.\n\n\"This is Lieke. A friend of ours visiting from Hawaii,\" Amy said.\n\n\"Hi, Lieke,\" Olivia said.\n\n\"I love your name,\" Ellen added.\n\n\"Come and sit,\" Dawn said.\n\nThe girls had put away all the clothes, so we had room to sit. I was looking at Ellen's long blonde hair and long legs.\n\n\"Lieke, how long have you been here?\" Olivia asked.\n\n\"A week or so. I am staying through the first of the year.\"\n\n\"Good.\"\n\nWe sat and talked for a few minutes, and then Dawn went to the kitchen. Olivia went with her.\n\n\"Ellen, are you just in town visiting?\" I asked.\n\n\"My husband went on a business trip overseas for three weeks, so I came to visit Sam and Olivia.\"\n\n\"So you will be here for the rest of the holidays?\"\n\n\"Yes. I am going back after.\"\n\n\"I told Ellen about what we do,\" Sam said.\n\n\"Ellen, don't feel obligated to participate,\" I said.\n\n\"It sounds like fun,\" she said with a smile.\n\nEllen looked to be a few years younger than Sam. Maybe late twenties.\n\n\"Let me get some wine for everyone,\" I said, got up, and went to the kitchen.\n\nI grabbed a tray and put some glasses on it, and grabbed a bottle of wine.\n\n\"Olivia, has Sam had sex with Ellen?\" I asked.\n\n\"He said no.\"\n\nI took the tray and wine back and poured for everyone. Ellen smiled at me when I handed her the glass.\n\nWe sat and talked until Dawn said lunch was ready. We all went to the kitchen and fixed a plate, and went to the dining room.\n\n\"You have a very beautiful house,\" Ellen said.\n\n\"We built it after we won the lottery. It will be our last house,\" Dawn replied.\n\nWe all talked as we ate for about an hour.\n\nAfter lunch, we were all in the den, drinking more wine. Dawn was sitting next to Sam.\n\n\"James said you came just to see me,\" Dawn asked, teasing Sam.\n\n\"Well...I just called to see if you all were doing anything for New Year's Eve.\"\n\n\"We are going out of town with Linda and Rachel. Couldn't you wait, Sam?\"\n\nDawn was really teasing him.\n\n\"Dawn, he has been wanting to fuck you for weeks,\" Olivia said.\n\n\"Just me?\" Dawn asked.\n\n\"Well...\"\n\n\"Sam, I am starting to get jealous that you just come over to fuck my redheads,\" Dawn said to him.\n\nI was looking at Ellen, and she was smiling.\n\n\"I am, too,\" Olivia said.\n\nSamantha got up and moved and sat in Sam's lap.\n\n\"I think he just wants to fuck me,\" Samantha said.\n\n\"I think you are right,\" Dawn added.\n\n\"That's not true,\" Sam said nervously.\n\n\"I may not let you then,\" Dawn said.\n\n\"I...I...came to see all of you,\" Sam replied.\n\n\"I'm first then,\" Samantha said.\n\n\"No, you're not,\" Dawn told her.\n\nDawn stood and pulled her shirt off over her head. Her big tits popped out because she never wore a bra around the house.\n\n\"I'm first,\" Dawn said.\n\nShe unsnapped her pants and pushed them and her underwear down and stood there naked.\n\n\"Get up, Samantha,\" Dawn said.\n\n\"Ahhh!\" Came from Samantha as she got up.\n\nDawn straddled Sam's legs and forced her tits into his face. Sam looked and then sucked on one of her nipples. Ellen was just watching.\n\n\"So, Ellen, where are you from?\" I asked.\n\n\"St. Louis.\"\n\n\"I was just there. I bought some limos from a company there.\"\n\n\"I know the place.\"\n\n\"What do you do there?\"\n\n\"Software engineer.\"\n\nEllen was looking over my shoulder at Dawn and Sam.\n\n\"Well, it's good you got off a few weeks.\"\n\n\"I come to visit Sam and Olivia when I can. Can I ask you something?\"\n\n\"Sure.\"\n\n\"Do you just let your wife do that?\"\n\n\"She can do as she pleases. So can my other wives.\"\n\n\"Your other...wives?\"\n\n\"Samantha and Amy.\"\n\nAmy turned to Ellen.\n\n\"We are one big happy family,\" Amy said.\n\n\"It looks like it.\"\n\n\"Do you and your husband fool around?\" Amy asked.\n\n\"Oh, no.\"\n\n\"Too bad. You could make some other man very happy...or woman.\"\n\n\"We have never done anything like that.\"\n\n\"Why not?\" I asked.\n\n\"Oh...we just don't.\"\n\n\"Then why did you come here with Sam?\" Amy asked.\n\n\"I thought I could watch.\"\n\n\"You are welcome to watch...but it is more fun to participate,\" Amy told her.\n\nI saw Ellen looking over my shoulder. I turned to look, and Dawn was pulling Sam's pants off. We kept looking as Dawn straddled his lap again.\n\n\"Ellen, if you don't want to fuck...we can do something else,\" Amy said to her.\n\nShe looked at Amy.\n\n\"Oh...I have never done it with a woman either.\"\n\n\"That's not a problem. We can teach you.\"\n\n\"I...I couldn't do that,\" she told Amy.\n\n\"That's okay. I can just do you. Would you like to try?\"\n\n\"I...don't know.\"\n\n\"Why don't you come with me and we can discuss it,\" Amy said and held her hand out.\n\nEllen looked at Dawn fucking her brother, then looked up at Amy. Amy took her hand.\n\n\"Come with me.\"\n\nEllen got up slowly, and Amy led her to the bedroom.\n\nI looked at Olivia.\n\n\"Good luck with her,\" she said.\n\nSamantha moved next to Olivia and started unbuttoning her top. I watched Dawn work her pussy on Sam's cock for a while. She was taking it nice and slow. I looked over at Olivia, and she and Samantha were settling into a 69 as I watched.\n\nI got up and walked to the bedroom to see if Amy was having any luck. I was surprised when I saw Ellen with her legs spread and Amy going down on her. Ellen was watching her closely. I walked in and sat on the edge of the bed.\n\n\"Oh...\" Ellen said as she looked at me.\n\n\"I see you want to give it a try,\" I said.\n\n\"Well...yes. I have always been...curious.\"\n\n\"I think you will find that we can satisfy your...curiosity, Ellen.\"\n\nEllen seemed a bit embarrassed that I was sitting there watching, but once she started getting off, I wasn't troubling her.\n\nI sat and watched until Ellen's moaning got very loud.\n\n\"Ahhhhh...that is so good!\" She let out.\n\nAmy was working her fingers in her as she tongued her pussy. She moaned for a few more minutes.\n\n\"Ohhhh!! Damn!!\" Ellen screamed and began thrusting her pussy up into Amy's mouth.\n\n\"Fuck!!\"\n\nEllen gushed several times as she cried out. Amy lifted her head and looked up at Ellen, and smiled. She got a smile back. I watched as Amy made her way up Ellen's body and placed her mouth over hers. It took Ellen a few seconds, but she got into it.\n\n\"See, that wasn't so bad,\" Amy said. \"You can do me later.\"\n\n\"It was wonderful. Thank you, Amy.\"\n\nAmy moved to me and had me stand. She got my pants open and pulled them down, and my cock stuck out. Amy got on her knees in front of me.\n\n\"Oh, my...\" I heard Ellen say.\n\nAmy slid her mouth over it and went to work as Ellen watched. She worked my cock in her mouth for a while as I looked at Ellen's naked body. Ellen had some very nice large and full tits with huge nipples.\n\n\"Ellen, do you want to help?\" Amy asked.\n\nEllen looked for a minute then crawled over next to Amy. Amy grabbed my cock and pointed it toward her. Ellen opened her mouth and slid it over my cock. Amy and I watched her suck on it for a while.\n\n\"See, you can get into it,\" Amy said.\n\n\"Emmm...I haven't had a cock this big since college,\" Ellen said.\n\n\"Did you like big cocks in college?\"\n\n\"Oh, yes...but it has been a few years.\"\n\n\"Husband doesn't measure up?\" Amy asked.\n\n\"Not like this.\" Ellen slid her mouth back onto my cock.\n\nAmy and I watched her as she kept going for a while. I started working my cock in her mouth as she sucked. I was surprised, but she was doing a good job of getting some of it down her throat. Amy stood and sat on the edge of the bed and began fingering her pussy as she watched.\n\n\"Emmmm...\" I felt on my cock.\n\nEllen sped up and was getting more into it.\n\n\"Emmmmmm!\"\n\nI was working my cock in her mouth faster as she sucked. I wanted to fill her mouth full of cum. I let her suck and work her mouth longer, then I placed my hand on the back of her head and pushed and let go and pumped cum into her mouth.\n\n\"Emmmmmm!!\" She slid her mouth up and down for a minute, then slid it off.\n\nShe wiped some cum running down her chin away and stuck her finger in her mouth.\n\n\"I forgot how good a big cock is,\" Ellen said.\n\n\"A big cock is so nice to suck on,\" Amy said.\n\n\"It is...\"\n\nEllen looked at Amy as she spread her legs behind her and fingered her pussy.\n\n\"You want to try?\" Amy asked.\n\n\"I think so,\" Ellen replied.\n\nEllen turned, and her head was between Amy's legs. She moved her hand up and played with Amy's pussy for a minute.\n\n\"I hope I do this right,\" Ellen said.\n\n\"Ellen, you know what feels good,\" I told her.\n\nEllen leaned into Amy's pussy and licked for a minute, then she placed her mouth over it and began tonguing her.\n\n\"Ohhh, that's it, Ellen,\" Amy said.\n\nI sat on the edge of the bed next to Amy and watched. Ellen knew what to do, and she worked at pleasing Amy. Once Ellen got into it, Amy placed her hand on the back of Ellen's head and pushed her into her pussy.\n\n\"Oh, yes!! Just like that!!\" Came from Amy.\n\nAmy kept moaning for a few minutes.\n\n\"Ahhhh, yes!! Tongue me!!\" Amy yelled, then gushed. \"Ahhhhh!!\"\n\nAmy held Ellen's head down until she came again.\n\n\"Oh, my. You are very good,\" Amy said.\n\n\"I know what I like,\" Ellen replied.\n\n\"All women do,\" Amy added.\n\nEllen looked over at my cock, sticking up.\n\n\"Go ahead, Ellen, fuck him,\" Amy said.\n\n\"Oh...if I am going to do this, I want it in my ass. I haven't had a nice big cock in my ass for a long time.\"\n\n\"Go ahead, then.\"\n\nEllen stood, and I moved onto the bed. She crawled up and straddled my hips and grabbed my cock. She rubbed the end between her dripping pussy lips a minute, then placed it on her asshole. I was surprised when she began pushing down. The end slipped into her ass.\n\n\"Ohhhhhh...yes...\"\n\nShe wiggled a little as she kept pushing. I felt my cock slipping into her tight ass.\n\n\"Emmmmmm...\"\n\nAmy and I watched until she had all of my cock in her.\n\n\"Oh my...you are big.\"\n\nEllen set for a minute, then began to work her ass. After a few minutes, she was sliding up and down on my cock as she leaned over me.\n\n\"Ahhhhh! Fuck, yes!\"\n\nShe kept working her ass up and down for a long time.\n\n\"Oh, my,\" she said and sat.\n\nShe smiled at me then spun on my cock to face my feet. She looked back at me and then laid back on top of me. I knew what she wanted.\n\nI began to work my cock up into her ass.\n\n\"Oh, yes! It has been a long time!\"\n\n\"Doesn't your husband do your ass?\" Amy asked.\n\n\"He doesn't like doing it. I don't get to have a cock in my ass much.\"\n\n\"That's too bad.\"\n\n\"It is!\"\n\nI slowly worked my cock in her ass as she leaned back and held herself up and watched. After about ten minutes, she was moaning loudly.\n\n\"Ohhh!! Fuck, yes!! Fuck my ass!!\"\n\nShe kept crying out then she screamed she was coming.\n\n\"Oh, fuck!! I'm coming!! Yes!! Yes!!\"\n\nI heard her pussy gush and her hot juices ran down my cock. I let her rest for a minute.\n\n\"Emmmm...that is so good.\"\n\n\"You have to try something, Ellen,\" Amy said.\n\nAmy moved between our legs.\n\n\"Oh my!!\" Ellen exclaimed when Amy placed her mouth over her pussy.\n\nI pulled her down on top of me and let Amy work on her pussy.\n\n\"Ahhhhhhhh!! Fuck!! This is wild!!\"\n\n\"Do you like that?\" I asked.\n\n\"Yes!!\"\n\nI squeezed her big tits for a while until she came again.\n\n\"Ahhhhhh...fuck!!\"\n\nEllen pushed herself back up.\n\n\"Oh...hey Sam,\" Ellen said, looking up at her brother watching her.\n\n\"Hey, sis.\"\n\n\"Sam, you are not going to say anything to Jerry, are you?\"\n\n\"Oh, no.\"\n\nAmy sat next to us, and I began working my cock in Ellen's ass again. \n\nSam walked up to the bed.\n\n\"I didn't know you liked that, sis.\"\n\n\"Jerry doesn't do my ass enough.\"\n\n\"If you like that, then you will love this,\" Sam told his sister.\n\nI felt Sam get on the bed between our legs.\n\n\"What are you doing! Sam! No!\"\n\nI felt Sam slide his cock into his sister's pussy.\n\n\"Sam!! We can't do this!!\"\n\n\"Sure we can, sis. I have wanted to do you for a long time.\"\n\n\"Sam!!\"\n\nSam began working his cock in his sister. I started thrusting into her ass again.\n\n\"Oh, fuck!! No!! You two stop!!\"\n\nWe kept working on her. She would protest every few minutes.\n\n\"Ohhhhh...fuck!! Yes!!\" Came from Ellen.\n\nEllen had laid back on me, and I had my hands on her tits. Sam was working his cock in her pussy as she lay.\n\n\"I never knew you...wanted to do me,\" Ellen got out.\n\n\"Now, you know!\"\n\nI squeezed and twisted her nipples as Sam sped up.\n\n\"Ohhh...Sam!!\"\n\nI held Ellen as Sam drove his cock into her for a while. Ellen kept yelling.\n\n\"Ohhhhh!! Fuck!! This is crazy, but great!!\"\n\nEllen started coming. Sam was driving his cock into her hard, so I started thrusting up into her ass hard. \n\n\"Oh, fuck!!! Yes!!! Fuck yes!!!\" Ellen kept screaming.\n\nSam and I fucked her until she screamed through two more orgasms.\n\n\"Ahhhhh!!!\"\n\nI felt Sam jam in deep and began pumping cum into his sister.\n\n\"Of, fuck....yes!!!\" She screamed as she came.\n\nI kept thrusting up into her ass as she screamed.\n\n\"Fuck....me!!!\"\n\nI jammed in hard and let go. Ellen screamed again as I filled her ass full of cum.\n\nSam had moved off his sister, and I was holding her as she gasped for air.\n\n\"Damn...\"\n\nI held Ellen for a few minutes, then she slowly pushed herself up and sat on my cock.\n\n\"How do I tell my husband I want to do this again...\" she moaned.\n\n\"Well...a good way to start Ellen is by asking him if he wants to watch you and another woman,\" Amy said. \"If he says no...find another husband!\"\n\nWe all laughed.\n\nEllen finally slid my cock out of her ass and laid back on the bed. Sam and Amy headed to the shower.\n\n\"Ellen, Amy was right,\" I said to her.\n\n\"I'm sure she is, but I don't think I would ever get my husband to let some other guy fuck me.\"\n\n\"Just try. However, I suggest the two of you talk about it a lot before you do anything.\"\n\nI got up and walked back to the den. I saw Olivia between Lieke's legs working on her pussy. I smiled and walked back down the hall to one of the other bedrooms to shower.\n\n*****\n\nEllen walked into the den later, wrapped in a towel. Olivia told her to come and sit with her.\n\n\"Did you have fun?\" Olivia asked.\n\n\"Oh...yes, I did.\"\n\n\"I think Sam had fun.\"\n\n\"I think he did too,\" Ellen said, smiling.\n\n\"I hope you two have more fun while you are here,\" Olivia said.\n\n\"I think we can if you are okay with it, Olivia.\"\n\n\"What do you think...\"\n\nWe all sat and sipped on some wine for a while. Olivia got up and came to me and straddled my legs.\n\n\"My turn,\" she said.\n\nI held my cock up, and Olivia worked her pussy down as she sipped on her wine.\n\n\"Olivia, do you do this all the time?\" Ellen asked.\n\n\"Whenever we want to,\" she replied as she worked.\n\n\"And...you are okay with my brother fucking his wife, wives...whatever?\"\n\n\"Ellen, it is just sex for fun.\"\n\nEllen was watching Olivia as she worked her pussy while she sipped her wine. Dawn moved and sat on the sofa next to Ellen. I watched as Dawn pulled the towel off Ellen and pulled her legs up on the sofa so she could go down on her.\n\nOlivia took her time working her pussy slowly for a very long time. Ellen was moaning as Dawn worked on her pussy. We all watched Ellen as she screamed through several huge orgasms. I was sure Dawn was pushing her way over the top as she screamed.\n\nDawn finally stopped torturing Ellen after Olivia had come in a huge orgasm. Dawn was going to the kitchen for more wine when Sam straddled his sister's stomach. He wrapped her tits around his cock and began to fuck them as Ellen laughed. We all watched as they had some fun.\n\n\"Where are you all going with Linda?\" Olivia asked.\n\n\"Aspen!\" Samantha shouted.\n\n\"That sounds like fun.\"\n\nWe talked about Aspen for a while until Sam slid his cock into his sister's mouth. Then we all watched as he filled her mouth full of cum.\n\nAfter that, we all ended up in the pool. Ellen ended up wrapped around Sam as they stood in the water fucking. \n\n*****\n\nOlivia and Dawn made us all a nice Mexican dinner. Once we finished, we all sat and talked for a long time. Sam was asking me about the limo business and how the men's store was coming along. I told him it was coming along fine and reminded him he owed me $500,000.\n\nWe all headed to bed early, about 9:30.\n\n\"I have never done anything like this,\" Ellen said as she got in the bed with me.\n\n\"I won't tell if you don't.\"\n\nI licked and sucked on Ellen's nipples for a while as I fingered her pussy.\n\n\"I want you up here,\" I said to her as I laid on my back.\n\nShe started to straddle my head.\n\n\"No, turn around so I can see you,\" I told her.\n\nI helped Ellen get over my head so I could look up at her.\n\n\"Do all of you do this often?\" She asked.\n\n\"Sam and Olivia come over occasionally and spend the night or weekend.\"\n\n\"And all you have sex all weekend?\"\n\n\"Usually.\"\n\n\"And you are okay with him spending the night with your wife?\"\n\n\"Ellen, my wives, and I love each other very much. We know we can have some fun, and that is all it is.\"\n\n\"Okay...I guess.\"\n\nI pulled her hips down a little and started slowly licking her pussy lips.\n\n\"Emmmmmmm...\"\n\nI worked on her pussy for a long time as she got into working it on my mouth. She got off several times.\n\n\"Oh...my,\" she moaned as she laid back on the bed.\n\nAfter she had rested, she moved down and sucked on my cock for a while before she climbed on top of me and worked it into her pussy.\n\n\"Tell me about having three wives.\"\n\nI talked to her as she slowly worked her pussy.\n\n\"It sounds a bit unusual...but so is this,\" she said with a smile.\n\nI grabbed her tits and played with them as she worked harder. Ellen got into it and fucked my cock hard until she came in a huge orgasm. She sat for a few minutes and recovered.\n\n\"There are no problems with anyone getting jealous?\" She asked.\n\n\"No, because we all love each other and understand each other. We all usually sleep in this bed together.\"\n\n\"You have a very understanding wife.\"\n\n\"Wives, remember I have three.\"\n\n\"But, Dawn doesn't have problems with this?\"\n\n\"Actually, she was the first one to realize we all should just be together.\"\n\n\"Sounds pretty special.\"\n\n\"It is.\"\n\nEllen began working her pussy again as I watched.\n\n\"Are you going to let Sam fuck you more now?\"\n\n\"I guess so. I mean...if Olivia is okay with it...why not.\"\n\n\"She will be okay with it.\"\n\n\"How did you end up fucking Olivia the first time?\"\n\n\"She and Sam were the first couple Dawn and I had sex with. Things just grew after that.\"\n\nEllen took her time and rode my cock a long time until she started to come again.\n\n\"Oh shit!\" She let out as she worked.\n\nShe sped up and worked her pussy harder.\n\n\"Ohhh...I am coming!\"\n\nI thrust up into her and pumped her full of cum as she got off.\n\n\"Wow, that was great.\"\n\n\"You are going to enjoy having fun with Sam and Olivia.\"\n\n\"Hope my husband doesn't find out.\"\n\n\"I would suggest talking to him and getting him to go along with it.\"\n\n\"I don't think he would.\"\n\n\"I think any husband would go along with watching his wife with another woman. Start there.\"\n\nAs Ellen sat, we talked. She eventually got off me and went and cleaned up. After that, we went to sleep.\n\n*****\n\nI woke up early Monday morning. Ellen was still asleep. I rubbed her tits until she woke up.\n\n\"Oh, good morning,\" she said.\n\nI pulled the sheet off her and sat up, and pulled her legs apart. I got between them, up on my knees. I lifted Ellen's ass off the bed as I slid my cock into her. I wanted to watch her tits bounce as I fucked her.",
        "\"Oh, this is crazy!\" She exclaimed.\n\nI slid all the way into her.\n\n\"Oh...you have such a big cock.\"\n\n\"It seems to fit.\"\n\n\"It does! Perfectly!\"\n\nI held her ass up, and she wrapped her legs around my back. I worked my cock in her hard for a long time as she moaned. Her big tits were doing a perfect job of bouncing as I drove into her.\n\n\"I see you two are up,\" Dawn said as she walked in and sat on the edge of the bed.\n\n\"I thought we would start the day off right,\" I told her.\n\n\"Oh, fuck!! I am going to come!!\"\n\nI kept working my cock in her until she started jerking.\n\n\"I'm coming!! I'm coming!!\"\n\nEllen came hard from all the excitement of what she was doing. I held her up and kept jamming my cock into her.\n\n\"Oh, fuck!! You are stretching my pussy!!\"\n\n\"Is that good?\"\n\n\"Oh, it is great!!\"\n\nI fucked her hard for a while longer until she came very hard again. I lowered her down to the bed and slid my cock out.\n\n\"Ohhhhhh...wow.\"\n\n\"Ellen, you seem to be learning to enjoy this,\" Dawn said.\n\n\"Oh, my. I am.\"\n\nI rubbed her stomach as she caught her breath.\n\n\"Ready for more?\" I asked.\n\n\"Oh, yes.\"\n\nI lifted her legs up and pushed them up next to her sides. She watched as I slipped my cock back into her pussy and leaned into her.\n\n\"Oh, my god! You are in me so far!!\"\n\n\"Are you okay?\"\n\n\"Oh, yes!!\"\n\nI began to slide my cock in and out of her pussy. Nice and slow as I looked at her. She closed her eyes and let me work my cock in her for a very long time. Dawn had gone into our bathroom.\n\n\"Oh, fuck...harder, please!\"\n\nI sped up and began to thrust into her deeper and harder.\n\n\"Oh, god!! Yes!! Yes!!\"\n\nI kept this pace up for a while.\n\n\"Ahhhhhhh!! I'm going to come!!\"\n\nEllen jerked beneath me as I drove into her faster.\n\n\"Yes!! Fuck me!! Fuck me harder!!\n\nEllen was really getting off. I began to jam my cock in as hard as I could and fast.\n\n\"Yes!! Yes!! Yeeeesssss!!!\"\n\nEllen was slamming her head into the pillows as I jammed into her.\n\n\"Fuuuuuuuuuuck!!!\"\n\nA massive orgasm ran through Ellen. She was screaming over and over that she was coming.\n\n\"Ohhhhh...stop for a minute...\"\n\nI slid my cock in and stopped.\n\n\"Oh my. I have never been fucked like this...for this long.\"\n\n\"I hope you are enjoying it.\"\n\n\"Oh...I am.\"\n\nShe laid there and panted for a while as I slowly slid my cock in and out.\n\n\"My legs are tired.\"\n\nI slid my cock out of her and sat back on my heels.\n\n\"Get up on your hands and knees and stretch them,\" I told her.\n\nEllen got up slowly and smiled at me. She moved her legs for a few minutes, then turned and got on her hands and knees in front of me. I moved behind her and started my cock back into her pussy.\n\n\"Emmmmmm...make me come some more.\"\n\n\"I can do that.\"\n\nI slid in as far as I could as she moaned. I grabbed her ass with both hands and began to work my cock in her deep.\n\n\"Ohhhhhh...yes...that's it.\"\n\nI worked in her pussy at a nice pace for a while. I leaned over her and grabbed both her tits and began to pinch her nipples.\n\n\"Oh, yes!! That's it!!\"\n\nI twisted and pinched her nipples as I worked my cock in her. She moaned and cried out for a while.\n\n\"Ohhhhhhh!!! I'm coming!!!\"\n\nI pinched her nipples hard and sped up.\n\n\"Ahhhhhh!!! Fuck me!!! I am coming again!!!\"\n\nShe jerked and screamed as she came hard.\n\nI had my hands wrapped under her as I held her up. Her body was shaking because she was weak from coming so many times. I lowered her down to the bed so she could lie on her stomach. I rubbed her ass for a few minutes, then laid on her and worked my cock back into her pussy.\n\n\"Oh, fuck!! I have never been fucked like this by a big cock!!\"\n\nI held myself up by my arms and thrust into her pussy fast. She was moaning and screaming as I kept going.\n\n\"Ahhhhh!! I don't believe this!! I am coming again!!!\"\n\nEllen kept screaming as she came one more time.\n\nAs soon as she stopped coming, I slid my cock out and placed the end on her asshole, and pushed.\n\n\"Oh, no!! Nononono!!\"\n\nI kept pushing and slid all the way into her ass as she moaned.\n\n\"I don't think I can come anymore.\"\n\n\"Sure, you can,\" Dawn said as she walked out, running a towel through her hair.\n\nI started slamming into her ass like I had been slamming into her pussy. She lay there and moaned.\n\n\"Ohhhhhh...ohhhh...ohhhh...ohhhhhhhhhhhh!! I am going to come!!\"\n\nI felt her ass squeeze my cock and could feel an orgasm run through her.\n\n\"Ahhhhhhhhh!!!\"\n\nI jammed my cock in as deep as it would go and let go.\n\n\"Ahhhh!! Yes!! Hot cum!!!\"\n\nI pumped cum in her ass for a long time as he screamed. I knew she was tired because I was.\n\nI slid my cock out of her ass and lay next to her. She rolled over on her back.\n\n\"Ohh...my. That was incredible. Dawn, does he always fuck that long?\"\n\n\"Ellen, my husband, makes sure a woman is thoroughly pleased before he finishes. I think you liked that,\" Dawn said as she sat on the edge of the bed, drying her hair.\n\n\"That was the best sex I have ever had.\"\n\n\"Oh, I think you just enjoy something new,\" Dawn said as she got up.\n\nDawn walked around to the side of the bed Ellen was on. Ellen watched her as she got on the bed and slowly straddled her head. Dawn smiled at me as she lowered her pussy down to Ellen's mouth.\n\nI watched for a few minutes then went to shower.\n\n*****\n\nAfter I showered, I walked back to the bedroom. Dawn and Ellen were talking about trying to get her husband into having some fun. We smelled breakfast cooking and got up, and went downstairs naked. Everyone else was sitting around the bar as Olivia and Amy cooked.\n\n\"It sounded like you had a good time last night,\" Sam said to Ellen.\n\n\"Oh, my. I did, and this morning.\"\n\nAfter we all had breakfast, Sam, Olivia, and Ellen left.\n\n\"What time are we leaving?\" Amy asked as we cleaned up.\n\n\"She said to be at the airport at 6:00.\"\n\n\"Will you teach us to ski?\" Samantha asked.\n\n\"We can see.\"\n\nThe girls and Lieke ran upstairs to pack.\n\n\"They are going to be surprised,\" Dawn said.\n\n\"Sneak their passports out of the safe,\" I said.\n\n\"What about Lieke?\"\n\n\"She brought hers. I'll make sure she takes it, but it is probably in her bag.\"\n\nLater, Samantha and Amy took Lieke out to the pool, and they swam for a few hours. After they came back in and showered, they went back to work packing.\n\nWe loaded up the Escalade and left the house at about 5:00.\n\n\"This is going to be fun,\" Samantha said.\n\nI pulled up in front of the private jet terminal. Everyone jumped out and grabbed their bags. We walked into the building, and I saw Linda standing and talking to one of her new pilots.\n\n\"There you all are,\" she said.\n\n\"Linda, thanks for taking us,\" Amy said.\n\n\"My pleasure. I am sure you will enjoy...Aspen.\"\n\nLinda winked at me. I had talked to her and told her we had told the girls we were going to Aspen.\n\nWe loaded all the bags on a cart, and an attendant took them out to the jet.\n\n\"She has a jet, too?\" Lieke asked.\n\n\"Several.\"\n\nAfter a few minutes, we headed out to the jet. \n\nWe walked up the steps into the jet and found seats. Rachel was talking to Arthur at the cockpit door.\n\n\"Arthur and Jeanine are flying. Bill, the company pilot, is going along for their check out,\" Linda said.\n\nRachel came and sat next to Linda. Arthur came on over the intercom.\n\n\"Ladies and gentleman, we will begin taxiing to the runway. Please have a seat and fasten your seatbelts.\"\n\nWe all buckled in. The jet slowly moved until we pulled onto the runway.\n\n\"Prepare for takeoff,\" came over the intercom.\n\nWe felt the jet accelerate as it rolled down the runway. Seconds later, it was pulling up.\n\nAfter about 5 minutes, Jeanine came over the intercom.\n\n\"We are moving to cruising altitude. Please remain seated. Our flight time to Paris is 7 hours and 10 minutes.\"\n\n\"Paris!\" Came from Samantha. \"No way!\"\n\n\"We will land about 10:00 AM local time,\" Jeanine said.\n\n\"Thanks, Linda!\" Came from Amy.\n\nThe girls all talked and laughed until we were at cruising altitude. Rachel got up and went to the galley.\n\n\"Is this the jet you are leasing until you get your new one?\" I asked Linda.\n\n\"Yes. It may be a couple of years.\"\n\nRachel and Dawn came back with champagne and glasses.\n\n\"You all will enjoy Paris for New Year's. It is one big party for a week,\" Linda said.\n\n*****\n\nAbout 9:30 local time, Jeanine told us to prepare for landing. I had to wake up Samantha and Amy.\n\n\"Wow,\" Lieke said as she looked out the window.\n\nOnce we landed and got off the jet, Linda was talking to someone. All of the bags were moved to a big limo. We all went through customs and then went to the limo. A black van pulled off, and the limo followed.\n\n\"This is so cool,\" Samantha said.\n\n\"We are staying at the Four Seasons. It is an older art-deco hotel,\" Linda told us. \"Parisians party for a week for New Year's.\"\n\nThe girls were having a great time looking out the windows as we drove for a while.\n\nWe pulled up in front of a fabulous old hotel. Rachel got out while we waited. After a bit, she came back.\n\n\"The room is ready,\" she said.\n\n\"Let's eat first,\" Linda said.\n\nWe all got out and went into the hotel. We were looking around as Rachel led us to the dining room. The maitre d' took us to a large table.\n\n\"We have to eat a late breakfast. The pastries are incredible,\" Linda said.\n\nLinda helped everyone order. They brought us fabulous food, and we spent time eating and talking before heading to the room.\n\nThe bellman opened the door to the suite, and we walked in.\n\n\"Oh, my, god!\" Amy said as she looked around.\n\nMarble and elegant furnishing were everywhere.\n\n\"This is the Eiffel Tower Suite,\" Linda said. \"You can see it from the terrace.\"\n\nThe girls ran out on the terrace.\n\n\"Linda, this is wonderful. Thanks for letting us come,\" Dawn said.\n\n\"My pleasure. I thought everyone would enjoy Paris in the winter.\"\n\nEveryone looked around the suite and out the windows for a while. Samantha and Amy were taking pictures with their new cameras.\n\n*****\n\nAfter we unpacked, Linda told us we were going shopping. We spent the afternoon driving around and shopping. Everyone was enjoying seeing the local sites as we went around the city.\n\nLinda and Rachel had been quiet most of the afternoon when we were in the limo. Even while we ate dinner, they were not talking much. We all headed up to the suite after dinner, and Linda ordered two bottles of wine. Once the wine was brought up, we were all sitting in the large room.\n\n\"Um...Rachel and I need to talk to all of you,\" Linda said.\n\n\"About what?\" Amy asked.\n\n\"Well...it concerns all of you...actually all of us,\" Linda said. \"All of you are a family...so...we need to talk to all of you.\"\n\n\"Linda, if there is something on your mind, just say it,\" Dawn said.\n\nLinda took Rachel's hand and held it.\n\n\"Rachel and I have been talking, and...we have something we want to ask Dawn and James, but it involves you two also.\"\n\n\"Okay, Linda,\" Dawn said as she sipped her wine.\n\n\"I guess the only way to do this is just to ask. I will be thirty-two this year, and...well...I want to have a baby...or Rachel and I want to have a baby.\"\n\n\"Great!\" Samantha exclaimed.\n\n\"Are you two ready for this?\" Dawn asked.\n\n\"Yes, we are. We have talked about it for some time now. And...we made a decision. We want to have...James' baby...\"\n\n\"What?\" Came from Samantha and Amy at the same time.\n\n\"I know this is an unusual request, but we don't want to adopt. I want this child to be mine. I want, or we want, someone to leave everything to one day,\" Linda said.\n\n\"Are you sure you are ready for this, Linda?\" Dawn asked.\n\n\"Yes. I'm not getting any younger.\"\n\n\"You are not too old,\" Dawn said.\n\n\"Dawn? I thought you would have more to say?\" Linda said.\n\n\"James and I are okay with this. You need to ask the girls how they feel,\" Dawn said.\n\n\"How can you two be okay with this? I just asked.\"\n\n\"We talked about before we left,\" Dawn said.\n\n\"Rachel, did you say something to them?\"\n\n\"No!\"\n\n\"Sam and Amy, how do you feel about this?\" Dawn asked.\n\n\"Well...uh...\" Amy hesitated.\n\n\"I think it is great!\" Samantha exclaimed. \"You two would make a wonderful baby!\"\n\n\"Linda? What would you tell the child?\" Amy asked.\n\n\"We think when it is older, we tell the truth.\"\n\n\"James...you haven't said anything,\" Rachel added.\n\n\"I think Dawn needs to explain why?\" I said.\n\n\"While I was on the reservation, one of the things my ancestors showed me was your questions,\" Dawn said.\n\n\"What!\" Came from Linda.\n\n\"Since it is a big decision for all of us, it was shown to me. I told James about it last weekend.\"\n\n\"Why didn't you tell us?\" Amy asked.\n\n\"We felt you should hear it from Linda and Rachel,\" I said.\n\n\"James, how do you feel about it?\" Samantha asked.\n\n\"It was a lot to think about. But, if the three of you are okay with it, I think it is a good idea,\" I said.\n\n\"I think James and Linda will make a wonderful child,\" Rachel said.\n\n\"I do, too,\" Dawn replied.\n\nWe all sat quietly for a minute.\n\n\"Amy and Sam, you would be aunts,\" Linda said.\n\n\"Dawn, how do you feel about it?\" Amy asked.\n\n\"I think if this is something that Linda and Rachel want to do...it makes sense. They had a child before.\"\n\n\"Dawn...is this too much to ask?\" Linda wanted to know.\n\n\"I don't think so. I talked to James about how he would feel about having a child in this world, and he said he is okay with it.\"\n\n\"But Dawn, you two never had children. What about that?\" Linda asked.\n\n\"It is a choice we made at the time.\"\n\n\"But...I'm afraid it is asking a lot from you because of that.\"\n\n\"Linda, you are not getting any younger. If you are going to do this, you need to do it soon,\" Dawn said.\n\n\"I know. Amy and Sam?\"\n\n\"It sounds like a good idea,\" Amy said.\n\n\"I think it is great,\" Samantha added.\n\n\"I will adopt the child, so it is mine also,\" Rachel said.\n\n\"It will be our child,\" Linda said as she kissed the back of Rachel's hand.\n\nIt got quiet again.\n\n\"Rachel, you need to ask your question now,\" Dawn said.\n\n\"What...question?\" Rachel replied nervously.\n\n\"Dawn? Do you know?\" Linda asked.\n\n\"Yes.\"\n\n\"Know what?\" I asked.\n\n\"Rachel?\"\n\n\"Well...Linda and I want to do this together.\"\n\n\"You will be doing it together,\" Amy said.\n\nDawn was looking at Rachel.\n\n\"Dawn?\" I asked.\n\n\"Ask, Rachel,\" Dawn said.\n\n\"Well...once we...if everyone was okay with this...I wanted to ask if...you would do the same for me,\" Rachel finally got out.\n\n\"What?\" Came from Samantha.\n\n\"We decided if all of you were okay with this...we would both get pregnant at the same time,\" Linda said.\n\n\"Dawn? Did you know this?\" I asked.\n\n\"Yes.\"\n\n\"Why didn't you tell me?\"\n\n\"One step at a time, honey.\"\n\n\"Oh, boy,\" Amy said.\n\n\"James?\" Linda asked.\n\n\"Oh...wow...\" I mumbled. \"You both want to do this at the same time?\"\n\n\"Yes,\" Linda and Rachel said. \n\n\"We will adopt each other's child,\" Linda said.\n\nI sat back and thought for a moment.\n\n\"You all need to think about it,\" Linda said.\n\n\"No...I guess if I am in for one, why not two!\" I exclaimed and laughed.\n\nThey all laughed.\n\n\"Just so you know, James. We will do this the old fashioned way!\" Linda exclaimed and laughed.\n\n\"I think it sounds great,\" Lieke said.\n\nWe all talked for a long time. Then we decided to go to bed.\n\nThe five of us were finished showering and drying off, getting ready for bed.\n\n\"Dawn, what did you mean when you said Linda and James already had a child?\" Lieke asked.\n\nWe all walked to the bed as Dawn and I explained to Lieke.\n\n\"That is far out.\"\n\n****\n\nWe were all lying in the big bed quietly. Linda and Rachel's proposition seemed to have quieted everyone down.\n\n\"Everyone ready for me to turn the light off?\" I asked as I reached over to the table.\n\n\"Not yet,\" Samantha said.\n\nSamantha sat up in bed and turned to us.\n\n\"What's up, sis?\"\n\n\"I need to ask a question.\"\n\n\"About Linda and Rachel?\" Amy asked.\n\n\"Sort of.\"\n\n\"What does sort of mean? Are you having second thoughts?\" I asked.\n\n\"No.\" Samantha got quiet for a minute.\n\n\"You two never had children. How is this going to affect you?\"\n\n\"We have talked about it,\" I said.\n\n\"But, how is it going to make you feel with them having your children...when you two didn't?\"\n\n\"Are you asking if we regret not having kids?\" I asked.\n\n\"I guess.\"\n\n\"We just never got around to it.\"\n\n\"Do you wish you had now?\"\n\n\"I don't know...maybe.\"\n\n\"It's not too late,\" Samantha said.\n\n\"Honey, Dawn will be thirty-nine this year. I think it is a little too late,\" I said.\n\n\"Well...\" Samantha mumbled.\n\n\"Go ahead, Sam,\" Dawn said.\n\nI looked over at Dawn.\n\n\"Oh, no!\" I exclaimed.\n\n\"Why not?\" Samantha asked.\n\n\"Okay...let's hang on a minute,\" I replied.\n\n\"Why?\" Dawn said.\n\n\"Ok...Sam, you are only nineteen years old. You don't want to be having a child at that age!\" I exclaimed.\n\n\"Why not?\"\n\n\"Well...you have school...and...and you are so young.\"\n\n\"So? I could take a break from school.\"\n\n\"Okay...wait. Dawn? Did you know about this too?\"\n\n\"One step at a time, honey,\" Dawn replied.\n\n\"I think it is a great idea,\" Amy said.\n\n\"But...Dawn...how would you feel since you didn't have children?\" Samantha asked.\n\n\"I think this is up to James,\" Dawn said.\n\n\"Dawn...why didn't you tell me about this?\" I said.\n\n\"I wasn't sure what you would say to Linda and Rachel. If you had said no, I don't think Sam would have asked.\"\n\n\"I don't know...I might have,\" Samantha said.\n\n\"Okay...Samantha...we have time to wait,\" I said.\n\n\"I don't,\" Dawn said and sat up.\n\n\"What? What do you mean you don't?\" I asked.\n\n\"Well, I did see my doctor last week, and she said I have the body of a 28-year-old, but I am getting older,\" Dawn said.\n\n\"Uhhh...what?\" I said.\n\n\"You said you didn't have a problem being a father,\" Dawn said.\n\n\"What?\" I got out.\n\n\"Honey, I am thirty-eight, but my doctor said it is possible.\"\n\n\"Was this something else your ancestors told you?\" I asked.\n\n\"Yes.\"\n\n\"And you waited until now to tell me?\"\n\n\"One step at a time, honey.\"\n\n\"Oh, my, god. You are too old, and you are too young!\" I exclaimed.\n\n\"I'm not,\" Amy said.\n\nI just looked at Amy.\n\n\"Oh, my! Dawn? Did you know about all of this?\"\n\n\"More or less.\"\n\n\"All of you are in school...and we have so many things going on...\"\n\n\"Honey, I think we could afford a nanny or two,\" Dawn said.\n\n\"Okay, you three...I don't know about all of this!\"\n\nThe three of them laughed at me for a minute.\n\n\"Are all of you serious?\" I asked.\n\n\"I think we are,\" Dawn said.\n\n\"And your ancestors showed all of this to you?\"\n\n\"One of many paths,\" Dawn said.\n\n\"I bet.\"\n\nI sat for a minute.\n\n\"Are all of you serious?\" I asked.\n\n\"I think we are,\" Dawn said.\n\n\"But, Dawn...at your age...\"\n\n\"Hey!\"\n\n\"You know what I mean.\"\n\n\"The doctor said if I was careful, it would be okay. She said I am in such great shape, and I have the body of a 28-year-old.\"\n\n\"Three kids at the same time...\" I mumbled.\n\n\"Five,\" Dawn added.\n\n\"Oh my...I don't know...\"\n\nWe all sat quietly for a bit.\n\n\"And your ancestors showed you all of this?\"\n\n\"Yes. It was one of the things I was shown. It is the rest of my transition,\" Dawn said.\n\n\"Well, I guess you would have someone to teach everything to.\"\n\n\"A lot of children to teach everything, too,\" Dawn said.\n\n\"This will change a lot of things,\" I said.\n\n\"Not really. I can be a mom and the Dean of the program and finish my doctorate. Amy and Samantha can still finish school. You can...what do you want to do, honey?\" Dawn asked.\n\n\"After all the businesses are going well...teach.\"\n\n\"Then you can teach,\" Dawn said. \"If that is what you want to do.\"\n\n\"Three kids...\" I mumbled.\n\n\"And three moms,\" Amy said.\n\n\"I want you two to think more about this,\" I told Amy and Samantha.",
        "\"I have been thinking about it...for a month or so,\" Samantha said.\n\n\"Why were you thinking about it?\" I asked.\n\n\"I don't really know. It just came to me. I didn't know how to ask you two.\"\n\n\"Samantha, I'm not sure you can finish med school with a baby,\" I replied.\n\n\"Honey, she can. We will hire a nanny or two if we need it. If we time this right, it will be a very Merry Christmas this year,\" Dawn said.\n\n\"It raises a lot of questions with the four of us being married. What will people think with all of you pregnant?\" I asked.\n\n\"Who fucking cares!\" Amy replied. \"Fuck them! It is none of their damn business!\"\n\n\"Amy, are you sure you want to do this?\"\n\n\"I...I don't know how to explain it...and I didn't know sis had been thinking about it...but I have too.\"\n\nI looked at Dawn.\n\n\"Do you know why?\" I asked.\n\n\"I suspect...that the two of them felt my thoughts.\"\n\n\"So you have been thinking about it too? You should have told me, honey.\"\n\n\"I wasn't really thinking about it. It was just something that was running through my mind. It was some of the questions I had to get answers to from my ancestors.\"\n\n\"And they told you this was okay?\"\n\n\"James, when a Medicine Woman is ready to have a child, they change. My great-grandmother had told me this many years ago, but I never thought more about it. Like you said, at my age, I didn't consider it. I did some research on geriatric pregnancies, but that was all. On the reservation, great-grandmother told me it was my time. I told her I was too old, but she said that was not for me to decide. After my journey, I knew it was a possibility.\"\n\n\"Was that what you and your great-grandmother were talking about?\" I asked.\n\n\"Yes. She even knew about Linda and Rachel.\"\n\n\"I wish your great-grandparents would just come out with everything they know!\" I said, and they all laughed.\n\n\"Dawn, did you see us in your journey?\" Samantha asked.\n\n\"I did. My ancestors told me my tribe would grow much. I saw the four of us with children.\"\n\n\"Did you see if they were boys or girls?\" Amy asked.\n\n\"Yes, but I am not going to tell you that. I don't know which of you has a boy or a girl.\"\n\n\"What do you have?\" Amy asked.\n\n\"I'm not sure.\"\n\n\"Not sure, or you don't want to say?\" I asked.\n\n\"Both.\"\n\nWe all talked until late, then finally went to sleep.\n\n*****\n\n\"Don't sleep all day,\" I heard Dawn say. \"It is New Year's Eve, and this town wants to party.\"\n\nI opened my eyes and looked as she sat on the edge of the bed.\n\n\"What time did you finally go to sleep last night?\" Dawn asked.\n\n\"I don't know...\"\n\n\"We have been up a while. I let you sleep.\"\n\n\"Oh, I had this awful nightmare...\"\n\n\"James!\" Dawn exclaimed, and I laughed.\n\n\"How do you feel about all of this now?\" Dawn asked.\n\n\"Are you sure you can do this?\"\n\n\"The doctor said yes, but not to wait much longer.\"\n\n\"I'm not sure about the three of you being pregnant at the same time.\"\n\n\"Misery loves company,\" Dawn said.\n\n\"Have you three talked anymore?\"\n\n\"We talked this morning. Rachel and Linda think it is a great idea.\"\n\nI sat up in bed, and Dawn leaned over and kissed me.\n\n\"You're sure?\" I asked.\n\n\"Yes...as long as you are.\"\n\n\"I'm still thinking about it. Couldn't we space it out some?\"\n\n\"You think on it. We are going down for breakfast, so get up.\"\n\nI got up and took a quick shower, and shaved. I walked out to the main room, and they were all sitting.\n\n\"Good morning...pop!\" Linda said and laughed. They all laughed.\n\n\"Oh, boy.\"\n\nWe all went down to the restaurant for breakfast.\n\n\"James, can you handle all of this?\" Linda asked.\n\n\"I guess.\"\n\n\"Dawn said we should all shoot for next Christmas,\" Linda added.\n\n\"That would be one big Christmas present.\"\n\n\"That would mean we have to stop our pills now. To time it for Christmas, we would have to all get pregnant around the 20th of March,\" Dawn said.\n\n\"You have all this figured out, don't you?\" I asked. Dawn smiled.\n\n\"Can you get pregnant that quick after stopping the pill?\" Rachel asked.\n\n\"It would be soon. It usually takes three or more months...but I can help?\"\n\n\"How?\"\n\n\"There are medicines I can make that will speed things up.\"\n\n\"That would be great if we all had December babies!\" Linda exclaimed.\n\n\"Sounds like I will be busy in March!\" They all laughed.\n\n\"James? Are you okay with this?\" Linda asked.\n\n\"It's growing on me.\"\n\n\"Dawn said her doctor told her she should be okay,\" Linda added.\n\n\"She does have the body of a 28-year-old!\" I said, and they laughed.\n\nWe went down to the restaurant and ate for a while as we talked.\n\n\"The only thing I worry about is raising children in that big old mansion,\" Linda said. \"It was not fun when I was growing up.\"\n\n\"Move,\" Amy said.\n\n\"What would I do with the place? And where would I move to?\"\n\n\"I'm sure you can think of something,\" Dawn said.\n\n\"I don't know.\"\n\n\"Dawn knows if we have boys or girls,\" Samantha said as she ate.\n\n\"Really!\" Came from Linda.\n\n\"Maybe...and I am not telling!\"\n\nWe finished and went back up to the room.\n\n\"It's snowing!\" Samantha exclaimed as she looked out over Paris.\n\nWe looked, and it had started snowing hard.\n\nWe all talked all morning. Linda was more concerned with how I felt about all this than Dawn. She seemed to understand that Dawn was comfortable with it.\n\n*****\n\nAfter we had lunch in the room, Samantha and Amy were looking out the window.\n\n\"Can we go exploring?\" Amy asked.\n\n\"They will be fine,\" Linda said if they wanted to go out exploring the town.\n\n\"The three of us want to walk around and see everything,\" Samantha said.\n\n\"You will be fine. Go have some fun,\" Linda told them.\n\nSamantha, Amy, and Lieke put on winter coats and headed out.\n\n\"Why don't we go exploring,\" Linda said.\n\nWe all got ready and left the hotel.\n\nIt had snowed a lot, and there were several inches on the ground as we walked. There were a lot of people out partying and walking around. I had my 35mm camera and was taking pictures of everything as we walked.\n\nAbout dark, we finally ended up at the base of the Eiffel tower. It had a fence around it and some guards.\n\n\"Too bad it is closed because they have put fireworks all over it,\" Linda said.\n\n\"It is. I said I would fuck you on top of it one day,\" I said to Linda, and she laughed.\n\nIt was snowing a little as I took some pictures of the tower. It was getting dark, and the lights had come on. We walked around the fence a bit and ran into a guard.\n\n\"Good evening,\" he said.\n\n\"Good evening,\" I replied. \"How long will it be closed?\"\n\n\"Two days,\" he said.\n\n\"That's too bad. I had hoped to take my friends up to the top at night.\"\n\n\"It is closed because of the fireworks. Two more days and it will open.\"\n\n\"Is there anyone on it?\" I asked.\n\n\"No. Not tonight.\"\n\n\"It would so cool to be up on top with no one else around,\" I said to the guard.\n\n\"No one can go up.\"\n\nI reached inside my coat and pulled out a stack of hundred dollar bills as the guard looked.\n\n\"That's too bad,\" I said as I peeled off bills. \"We would only be up there a few hours. I want to take some pictures.\"\n\nThe guard saw I had $2,000 in my hand. He looked closely.\n\n\"Would you be careful and not touch anything?\" He asked.\n\n\"Yes, sir.\"\n\nHe took the money and walked us past his checkpoint. We followed him to the base and the elevator.\n\n\"The elevator works. Just push the buttons. If you run into anyone, tell them you are with the magazine,\" he said.\n\n\"We will.\"\n\nThe elevator opened, and we got on, and the doors closed.\n\n\"James! I don't believe you!\" Linda exclaimed.\n\nWhen the elevator stopped, we were at the observation deck. We got out, and I took some pictures of Linda, Rachel, and Dawn.\n\n\"Take off your clothes, Linda,\" I said.\n\n\"What!?\"\n\n\"I told you I was going to fuck you up here one day.\"\n\n\"You are crazy!\"\n\n\"Do it, Linda!\" Rachel exclaimed and laughed.\n\nI handed my camera to Dawn and started taking off my clothes as it snowed.\n\n\"You are serious!\" Linda exclaimed.\n\n\"Don't argue with him, Linda,\" Dawn said.\n\nI finally got Linda out of her clothes as she laughed. Dawn was taking pictures as I leaned her into the railing and slid my cock into her pussy.\n\n\"You are insane!\" Linda exclaimed.\n\n\"You haven't stopped your pills yet, have you?\" I asked.\n\n\"No! I wouldn't do that, James!\"\n\nShe laughed as I slid my cock into her.\n\n\"I don't believe you!\" Linda yelled as Rachel laughed.\n\nLinda must have thought it was hot because she came several times in about 20 minutes.\n\n\"You are next, Rachel,\" I said.\n\n\"No way!\"\n\n\"Hey! You laughed at me!\" Linda told her. \"Take your clothes off!\"\n\nI was working my cock in Rachel as she leaned over. She was laughing until she started coming. \n\nI looked over at Linda, and she was still naked as the snow fell. I slid my cock out of Rachel, and she was still laughing. Dawn handed my camera to Linda, and she took her clothes off.\n\nDawn wrapped her arms around my neck and kissed me. She pulled herself up and wrapped her legs around my waist. I slid my cock into her and pressed her against the railing. Dawn kept kissing me as I worked my cock in her.\n\n\"Oh, this is so hot,\" Dawn said.\n\nI worked my cock in Dawn for a long time until she started coming.\n\n\"Oh, fuck!! Yes!! This is so hot!!\" Dawn yelled as she came hard.\n\nI pressed into her and pumped cum into her pussy as she held me tight.\n\n\"There you are...oh my! What are you doing!\" The guard said as he came off the elevator. \"You American's are crazy! You have to go!\"\n\nRachel walked up to him and grabbed his crotch.\n\n\"Please, you have to go! Now!\"\n\n\"Right now?\" Rachel asked.\n\nRachel kept rubbing his crotch as he looked at her.\n\n\"Maybe we can go in a bit,\" Rachel said as she moved to her knees in the snow.\n\nHe looked down as she pulled his coat open and opened his pants. Rachel stroked his cock for a minute then began sucking it.\n\nI was taking pictures as Rachel sucked the guard's cock. She got his pants undone and pulled them down. She stood and leaned into the railing. He got behind her and slid his cock into her pussy. We watched as he drove his cock into Rachel as she leaned over. I took more pictures until I ran out of film.\n\nRachel came hard, and he filled her full of cum.\n\n\"We must go,\" he said.\n\nWe all put on our snow-covered clothes, and he escorted us back to the base and walked us past the fence.\n\nMy three ladies laughed as we walked.\n\n\"Let's go in here for some wine,\" Linda said.\n\nWe went into a tavern and found a table. It was crowded.\n\n\"James, you are crazy,\" Linda said.\n\n\"But you loved it.\"\n\n\"I did. Rachel, did you have a good time?\"\n\n\"Oh, yes!\"\n\nWe had several glasses of wine, and I put more film in my camera now that we were out of the snow.\n\n\"These will be some great pictures,\" I told them.\n\n\"I can't believe I had sex on top of the Eiffel Tower,\" Linda said.\n\nWe laughed and talked until we finished our wine, then left to walk back to the hotel. The girls were back and sipping wine when we got there. Rachel told them about having sex on top of the tower.\n\n\"Everyone get cleaned up, and I will have dinner sent up,\" Linda told us.\n\nSamantha was looking out the windows as people roamed the streets.\n\n\"Looks like everyone is already partying,\" Samantha said.\n\n\"I meant it when I said it was a week-long party here,\" Linda replied.\n\n\"This is wonderful,\" Dawn said. \"Thanks for the trip, Linda.\"\n\n\"No problem. Dawn, have you thought any more about everything?\"\n\n\"Linda, I am fine with your plans. I'm not sure James can handle the five of us pregnant!\"\n\nThey all laughed.\n\nWe all went and showered and cleaned up after Linda ordered dinner.\n\n\"We can see the fireworks from the balcony,\" Linda said as we walked out into the larger room.\n\nAbout 9:00, they delivered a ton of food for us. We could hear all the partying outside as we ate. Around 11:30, we were out on the balcony watching the craziness.\n\n\"They seem to have fun,\" Dawn said.\n\n\"They do,\" Linda replied.\n\nWe stayed on the balcony drinking champagne until midnight.\n\nAll of the fireworks went off as we took pictures. Amy and Samantha enjoyed the fireworks off the Eiffel Tower. The street party went on well into the night. About 3:00, we all finally went to bed.\n\n\"It is going to be an interesting year,\" Samantha said.\n\n\"It will,\" Dawn replied.\n\nI turned off the lights.\n\n*****\n\nNew Year's Day, everyone was still partying around town. We rode around in the limo all day and visited some shops and places to eat.\n\nBy nightfall, we were heading back to the hotel. The streets were still crowded with people.\n\n\"We will have to come back in the Spring sometime,\" Linda said. \"Paris is wonderful in the Spring.\"\n\nWe were riding around, looking at the sites. We went to a great restaurant for a late dinner then headed back to the hotel.\n\nEveryone was tired from all the running around when we got to the room.\n\n\"Lieke, what do you think of Paris?\" Linda asked.\n\n\"Oh, it is wonderful. I never thought I would get to see Paris. Thanks for the trip, Linda.\"\n\n\"You are welcome. From what I have been told about your farm in Maui, I want to see it one day.\"\n\n\"Anytime.\"\n\n\"We may try and get our families to go this summer,\" Dawn said. \"If we do, we may stay for a month. You should try and come and stay with us, Linda.\"\n\n\"I may do that.\"\n\n\"Probably June or July.\"\n\n\"Get some rest tonight. We will go to the Louvre tomorrow, then a Seine river cruise tomorrow night for dinner,\" Linda told us.\n\n\"Linda, when do you have to be back?\" Dawn asked.\n\n\"No hurry. We can leave Sunday if that is okay.\"\n\n\"Sounds good.\"\n\n\"That will give us time to see the Palace of Versailles Saturday.\"\n\n\"That sounds great,\" Dawn replied.\n\nWe all went to bed early to get some rest.\n\n*****\n\nWe were up early and went to the Louvre and spent the day. Linda had reservations for a dinner cruise that night. Both were wonderful.\n\nFriday, we hung out around the hotel and walked around the city. Saturday, we went to the Palace and spent the day on tours. My girls were having a good time, and I was wondering if we would ever have time to do anything like this again in the future.\n\nWe went back to the hotel and had a luxurious dinner in the dining room before going up to pack. Our plans were to leave early Sunday morning.\n\n\"This has been a wonderful trip,\" Dawn said as we packed.\n\n\"I hope we can come back one day,\" Amy added.\n\n\"It may be a few years,\" I said.\n\n\"We will figure it all out,\" Dawn replied.\n\n*****\n\nWe were up and out of the hotel by 7:00 Sunday morning. The limo took us to the airport, and by 9:30, we were in the air.\n\n\"Thank you again, Linda,\" Samantha said.\n\n\"I hope everyone enjoyed it.\"\n\n\"Oh, we did,\" Amy replied.\n\nAbout noon, Rachel unpacked some great food and pastries, and we ate. I was sitting with Linda and Rachel.\n\n\"James, did I ask for too much?\" Linda wanted to know.\n\n\"No. Dawn and the girls surprised me, though.\"\n\n\"Are you ready for this?\"\n\n\"I guess. How long have you lived in that mansion?\" I asked.\n\n\"I am the third generation. My grandfather built it.\"\n\n\"Why don't you build something you like?\"\n\n\"I wish I could, I hate living in that old dusty place, but no one would ever buy it. It is too huge.\"\n\n\"Would you build a house you liked if you could?\"\n\n\"Yes, I wish I had a nice big place like you do.\"\n\n\"If I could find you some land out near us, would you be interested?\" I asked.\n\n\"Yes! But I am stuck with that monster house.\"\n\n\"What if you kept it but leased it out to a corporation and let them convert all the rooms to offices.\"\n\n\"Maybe I could! That is a great idea. It would make a nice corporate headquarters for someone. I like that idea, thanks!\"\n\n\"It was just an idea. I know you have said several times you felt so alone in that big place and all the staff.\n\n\"Hell, half the staff is there to keep the place clean. Oh, James, I love you!\"\n\n\"Maybe you can build something more private and more appropriate for raising children.\"\n\n\"Great! What about a place to build?\"\n\n\"You let me work on that. I think I can find you some land out near us.\"\n\n\"That would be great! Do you like that idea, Rachel?\"\n\n\"It would be more like a home instead of a fortress.\"\n\n\"Oh, I like this idea more and more!\" Linda said. \"The mansion would be perfect for some business right there in town with all that land around it and the security setup. I have never thought about that. This is great!\"\n\nLinda discussed it some more for a while. She wanted to know where the land would be. I didn't say anything to her yet, but I knew the 500 acres next to us might be for sale. I told her I thought I knew where 500 acres was for about $10,000 an acre. She said, fine. \n\nLinda was all excited for the rest of the flight. All of them finally settled down and went to sleep. I was awake thinking about what I had agreed to do.\n\nAbout 4:00, Jeanine announced we were getting ready to land in New York.\n\n\"New York?\" Dawn asked.\n\n\"I thought we could spend a day in New York,\" Linda said.\n\nI woke up the girls and told them we were landing in New York.\n\nOnce we landed, we got in the limo and went to a big hotel. Everyone was a little tired from all the flying, so we had dinner in the hotel about 6:30, then got some rest.\n\n*****\n\nWe got up early and had breakfast in the room. Linda got a limo, and we drove around, and the girls got to see parts of New York. About lunch, we headed back to the hotel. We talked until about 1:00, and Linda said we needed to get ready to eat lunch then take the girls to see her designer. \n\nWe all cleaned up and then went back down to the limo and headed out for lunch.\n\n\"Where are we going for lunch?\" Dawn asked.\n\n\"To an Italian place across town near my designer, it is small, but the food is great.\"\n\nAfter about 30 minutes, we arrived at a small caf\u00e9. We all got out and went inside. It was a small place run by an Italian family. They all knew Linda and sat us down and brought us entrees and wine and talked. We spent over an hour or more talking and laughing and eating great food.\n\n\"This is a great place,\" I told Linda.\n\n\"I love it. I sneak off here when I can while in town. Is everyone about ready to go?\"\n\nWe all left, and Linda took us to her designer to get Dawn and the girls some dresses like hers. We pulled up and got out and walked to the front door. A man unlocked the door and let us in, and locked the door.\n\n\"Is this your beautiful friend?\" He asked.\n\n\"Yes, Paul, this is Dawn, and you know Rachel. Dawn's husband James, and his other two wives, Samantha and Amy. I want them to get some dresses like you made for me, and I want you to fit Rachel for some. Also, can you fit the girls for something nice?\"\n\n\"My pleasure. Ms. Dawn, you have a perfect little body, if I may say so.\"\n\n\"Oh, thank you,\" Dawn said.\n\n\"And Miss Rachel, I have always wanted to dress you.\"\n\nPaul was a designer and was fawning all over the girls.\n\n\"May I ask what you are looking for, Ms. Dawn?\"\n\n\"Paul, you remember the gold dress I have that shows off my breasts nicely,\" Linda said.\n\n\"The side boob dress!\" Paul said and giggled.\n\n\"Yes, that one. Dawn has several long ones, but she can't find a short one like mine.\"\n\n\"Oh, no problem. Is that what you want, Ms. Dawn?\"\n\n\"I would like several in different colors,\" Dawn said with a laugh.\n\n\"And you two beautiful young ladies,\" he asked Samantha and Amy.\n\n\"Same for them,\" Dawn said.\n\n\"That would be nice,\" Amy said.\n\n\"Miss Rachel, would you like one?\" Paul asked.\n\n\"If that is what Linda wants.\"\n\n\"I want a beautiful black one for her. Rachel, where are you going to keep your gun?\" Linda asked.\n\n\"I can keep it in my purse,\" Rachel said with a smile.\n\n\"Paul, I want two more, one in black and one in red,\" Linda said.",
        "\"Blue,\" I said.\n\n\"What, James?\" Linda asked.\n\n\"Cobalt blue, not red.\"\n\n\"Why not red?\"\n\n\"Only in red if it is sequin.\"\n\n\"I was wanting a red silk one.\"\n\n\"Linda, it would give you the wrong image, only red if it is very elegant.\"\n\n\"He is right, Ms. Linda,\" Paul said.\n\n\"I trust your judgment, James, but I want the red one very short, and I want the top of the crack of my ass to show.\"\n\nPaul snickered.\n\n\"Let's go to the back of the store,\" Paul said.\n\nWe all followed him to the fitting room.\n\n\"Ms. Dawn, would you take your clothes off, please, so I can get good measurements?\"\n\nDawn removed all of her clothes and stepped up on a box in her lingerie.\n\n\"Exquisite!\" Paul said.\n\nWe watched Paul take plenty of measurements and write them all down. He went into his back room and came out with a bolt of white silk. He pulled some off and draped it over Dawn's shoulders and pinned it, and showed how it would show off her breasts.\n\n\"Oh, perfect!\" He said.\n\n\"Is that what you want, Dawn? The white looks fabulous with your skin,\" Linda said.\n\n\"I like this material.\"\n\n\"How short do you want it,\" Paul said.\n\n\"I would like this one about here.\"\n\nDawn put her hands about halfway up her thighs above her knees. Paul took a measurement.\n\n\"Very good, ma'am. What other colors do you want?\"\n\n\"What do you want, honey?\"\n\n\"Black sequin,\" I said as I looked at Dawn standing there and smiled at her.\n\n\"What?\" Dawn said. \"I have black dresses.\"\n\n\"Paul, show me what fabrics you have,\" I said.\n\nI went to his storeroom to look.\n\n\"What color?\"\n\n\"Reds.\"\n\nI looked through red silks and red sequin. I found a very pretty and elegant darker red sequin silk material. It was just dark enough of a red to go with Dawn's skin.\n\n\"I like this.\"\n\n\"You have good taste. This is an imported, very elegant material. It is a little expensive.\"\n\n\"I don't care, bring it.\"\n\nWhen Dawn saw the fabric, she said it was beautiful.\n\n\"Oh, James, this is pretty. I would like a long dress in this too.\"\n\n\"Under one condition,\" I said.\n\n\"What would that be?\" Dawn said with a smile.\n\n\"I get to help design the short one.\"\n\n\"I don't know. What are you up to?\"\n\n\"Yes or no?\"\n\n\"Okay, I guess.\"\n\nPaul pulled off a long strip of material and draped it over Dawn. She looked gorgeous in it.\n\n\"Oh, James, this is pretty!\"\n\n\"Yes, it is.\"\n\n\"I want my crack to show.\"\n\nPaul giggled again.\n\n\"I have some drawings you can pick from to show me how you want the dress cut,\" Paul said.\n\n\"Can you do this in one fitting?\" Dawn asked.\n\n\"Oh yes,\" Linda said.\n\n\"Paul, come with me a minute,\" I said.\n\nPaul and I walked away from the girls.\n\n\"Paul, do they make garter belts that are very short for extremely short dresses?\"\n\n\"Yes, they do, sir. Do you want this dress very short?\"\n\n\"I want it short, very revealing, and a little trashy.\"\n\n\"Oh, good!\"\n\n\"Do you have one and some stockings to go with it for my wife?\"\n\n\"Oh yes, we have lots of pretty things like that.\"\n\n\"Would you get one and some stockings, please?\"\n\nPaul giggled and disappeared.\n\n\"What are you up to?\" Dawn asked.\n\n\"No questions, my design.\"\n\nPaul came back with the stockings and garter and a book. I took the garter and stockings and handed them to Dawn.\n\n\"Put these on.\"\n\nDawn looked at me suspiciously and sat and put the garter and stockings on.\n\n\"This garter is very short,\" Dawn said as she snapped the stockings on and stood up.\n\n\"You need to look through this,\" Paul said as he handed me his design book.\n\nI flipped through the book for a few minutes as Paul measured Dawn's legs. He had some great designs for a very short dress with very open fronts and sides. They were not much more than a very short skirt and two strips covering the women's nipples. I found one that would barely cover Dawn's nipples and let the sides of her breasts be exposed. The back was cut down to reveal about an inch of her crack. I picked that one for her. I went through the book and found some nice long dresses for Amy and Samantha and some shorter and very sexy ones for them.\n\nPaul came over and looked.\n\n\"Oh, very good. I have wanted to dress a beautiful woman in that.\"\n\n\"Let me see,\" Dawn said.\n\n\"No.\"\n\nPaul walked over and took a few more measurements. He had Dawn turn around and measured from her neck down to the top of her ass.\n\n\"Ms. Dawn, what other color do you want?\"\n\n\"Black, can I look at your fabrics?\"\n\n\"Sure, come with me.\"\n\nI watched Dawn walk naked to Paul's back room.\n\n\"What did you pick, James?\" Linda said.\n\nI showed her the dress.\n\n\"Oh my god, I could never wear that!\"\n\n\"Dawn can.\"\n\n\"Yes, she can with her perfect little body. Why did you not like the red James?\"\n\n\"You look better in the blue. A red dress like that would make you look trashy.\"\n\n\"James!\"\n\n\"It would, Linda. You would look good in a long red one, though,\" Rachel said.\n\n\"Do you two think I could get away with showing more of the sides of my tits?\"\n\n\"In a long elegant dress, yes,\" I said.\n\n\"I'll get one.\"\n\nDawn came back out with several bolts of black fabric.\n\n\"James, look at this.\"\n\nDawn showed me a very pretty and thin black silk.\n\n\"That is pretty thin.\"\n\nDawn held a layer up over her tits. I could make out her nipple.\n\n\"It looks good, but it is thin. I can see your nipple.\"\n\n\"I know. I was thinking about mid-thigh, with a black garter and black stockings.\"\n\n\"It's thicker than that blouse you wear. I guess so.\"\n\n\"Oh, good.\"\n\nShe held up another bolt of black silk.\n\n\"Mid-thigh?\"\n\n\"Shorter.\"\n\n\"Okay.\"\n\nShe handed Paul the fabric, and he piled all of hers up.\n\n\"Ms. Linda?\"\n\n\"A black one and a long red one, red sequin.\"\n\n\"Take your clothes off, please,\" Paul said.\n\n\"You have my measurements.\"\n\n\"Take your clothes off, Linda,\" I said.\n\nLinda looked at me and smiled, and took off all her clothes. Paul took a few minutes and measured her.\n\n\"You have lost weight, Ms. Linda.\"\n\n\"I have been working out.\"\n\n\"You look exquisite as usual! Just like the gold one?\"\n\n\"Yes. But expose more of my tits.\"\n\nHe measured the length of Linda's legs.\n\n\"Thank you,\" Paul said.\n\n\"You just wanted to see me naked again, Paul.\"\n\nLinda looked at me and smiled and walked over and sat in my lap.\n\n\"Is this what you wanted to see?\" She asked.\n\n\"Oh, yes.\"\n\nLinda reached down and started rubbing my crotch.\n\n\"Rachel, you are up,\" Linda said.\n\nRachel took off her jacket and slipped off her shoulder holster, and laid it nearby. Then she took off the rest of her clothes.\n\n\"Em, em, em. Perfect!\" Paul said.\n\nRachel stood on the box, and Paul took his time measuring her.\n\n\"Miss Rachel, would you like to look at the black fabrics?\" Paul asked.\n\nI watched Rachel's cute ass walk off with Paul.\n\n\"She is so pretty,\" I said.\n\n\"Yes, she is,\" Linda said. \n\nShe kissed me and squeezed my cock that was growing hard.\n\nA few minutes later, Rachel came back with some fabrics to show us. She picked a nice black fabric with very small sequins. Paul draped the fabric over and looked.\n\n\"Very good, Ms. Rachel,\" he said.\n\n\"Paul, can you make the two redheads some very sexy and very elegant dresses?\" Linda asked.\n\n\"Of course! But...I need to see them naked!\"\n\nSamantha started taking her clothes off. Paul motioned for her to stand on the pedestal.\n\n\"Perfect!\" He said and began measuring her.\n\nHe had a good time measuring around her tits. I watched as he took both his hands and felt the weight of her tits.\n\n\"What would you like?\" He asked her.\n\n\"Dark green,\" I said.\n\nPaul went into the back and came back with a dark green sequin material. He draped it over Samantha and pinned it, and looked.\n\n\"Perfect! What else?\"\n\n\"Something short and sexy in white,\" I told him. \"For both of them.\"\n\nHe went and got a white sequin material and came back. He draped it on Samantha and measured her legs.\n\n\"Anything else?\" Paul asked me.\n\n\"I want a long sexy, and elegant gown in that black sequin for her and her sister. I would like for the dresses to match the one Dawn is having made in that material.\"\n\n\"The one you picked?\"\n\n\"Yes.\"\n\n\"Very good! Next!\"\n\nAmy pulled off her clothes and got on his block.\n\n\"Magnificent!\" He said as he looked.\n\nHe measured Amy and wrote everything down.\n\n\"What color would you like?\" He asked Amy.\n\n\"Blue?\" She asked, looking at me.\n\n\"Cobalt,\" I said.\n\nPaul disappeared and came back with a nice looking cobalt blue silk.\n\n\"Long or short?\" He asked.\n\n\"Long,\" I replied.\n\nI got up, went to his backroom to look at fabric again. I found a very nice bright red for Amy and took it back out.\n\n\"This will work with her hair,\" I said.\n\n\"Oh, yes!\" Paul exclaimed.\n\n\"Make that one short,\" I told him.\n\nHe draped and pinned and measured.\n\n\"Very good! Anymore?\"\n\n\"Lieke, what would you like?\" Linda asked.\n\n\"I don't have anywhere to wear something that nice.\"\n\n\"Every woman needs a long black dress. Let him fit you.\"\n\nLieke took her clothes off, and Paul measured her. He selected one of the shiny black sequins materials and draped it over her.\n\n\"Perfect.\"\n\n\"I think that will do us,\" Linda said.\n\nAll the ladies got dressed. Paul said he would have all of them in about six weeks and would ship them. Linda insisted on paying for the dresses and accessories. The girls were like schoolgirls shopping. Rachel escorted us back to the limo.\n\n\"Dawn, you will look so good in the black with your diamonds,\" Linda said. \"The three of you will look great together in the same black dresses.\"\n\n\"Yes, they will,\" I remarked.\n\n\"Now, I have another shop to see. My favorite!\"\n\n\"What?\" Dawn asked.\n\n\"Just wait.\"\n\nWe drove for a bit and then came to another part of town.\n\n\"Where are we now?\" Dawn asked.\n\n\"The diamond district.\"\n\n\"Oh, wow,\" Dawn said.\n\n\"I want to take you to my favorite store.\"\n\nShortly the limo stopped, and we all got out. Rachel followed close behind as we were buzzed into a small shop.\n\n\"Good evening Ms. Williams,\" a man said as he took her hand and kissed it. \"I have been waiting for you.\"\n\n\"Good evening, Maxwell.\"\n\n\"What may I show you?\"\n\n\"Do you still have that choker I looked at last month?\"\n\n\"Yes, ma'am, I do.\"\n\nMaxwell went to a big safe and brought back a box and opened it.\n\n\"Wow!\" Dawn said.\n\nThe box had a diamond choker that was eight rows of small diamonds wide and looked to be made up of at least \u00bc carat diamonds. It must have had several hundred on it, at least.\n\n\"This will look so good on you, Ms. Williams, each of the diamonds are perfect and look wonderful in the white gold.\"\n\nLinda picked up the diamond choker and turned to Dawn.\n\n\"Turn around, let me put this on you,\" she said to Dawn.\n\n\"What?!\"\n\n\"Just turn around. I want to see what it looks like on you.\"\n\nDawn turned around and pulled her hair up. Linda reached around her and fastened the choker.\n\n\"Now turn around.\"\n\nDawn turned around. The choker looked fabulous. It was snug and fit perfectly around her neck. Dawn always looked good in diamonds with her darker skin.\n\n\"God, you look great!\" Linda said. \"It is perfect against your tanned skin and your dark hair.\"\n\nDawn looked at herself in a mirror.\n\n\"Oh my god, this is beautiful!\"\n\nThe eight rows of diamonds that went all the way around her neck did look great.\n\n\"Is it too tight?\" Linda asked.\n\n\"No, it would fit perfectly!\"\n\n\"Maxwell, do you have the matching bracelet.\"\n\n\"Yes, Ms. Williams.\"\n\nMaxwell came back and opened up another box that had a matching bracelet in it. Linda took it out and wrapped it around Dawn's wrist and connected it.\n\n\"Oh, that is gorgeous!\" Dawn said.\n\n\"These are flawless diamonds set in white gold. They will sparkle and show up very well,\" Maxwell said.\n\nThe bracelet and the chocker were probably an inch and a half wide. Dawn looked in the mirror and modeled the jewelry.\n\n\"Oh, these are pretty. Thanks for letting me try them on.\"\n\n\"Do you like them?\"\n\n\"Oh my god, yes!\"\n\n\"Maxwell put them on my account.\"\n\n\"Yes, Ms. Williams.\"\n\n\"These will look good on you, Linda,\" Dawn said.\n\n\"They're not for me. They are for you.\"\n\n\"Oh my god, you can't!! These must cost a fortune!!\"\n\n\"They are for you. A late Christmas present.\"\n\n\"Linda, you can't!!\"\n\n\"I can! And I will!\"\n\n\"I don't believe you!! The price of these would be out of this world!!\"\n\n\"Not quite out of this world.\"\n\n\"I can't!\" \n\nDawn started taking off the bracelet.\n\n\"Dawn, please, let me buy this for you.\"\n\n\"Linda...\"\n\nMaxwell came out for something to sign. Dawn looked over at it.\n\n\"No!! No!! Absolutely not, Linda!!\"\n\nLinda signed the paper, and he left.\n\n\"You will not spend that kind of money on me!!\" Dawn yelled.\n\n\"Too late.\"\n\n\"James!!\"\n\n\"Linda, Dawn has a problem with people spending money on her,\" I said.\n\n\"You didn't see the bill. It was 2 million dollars!!\"\n\n\"Wow,\" I said.\n\n\"I will not let you do this!!\"\n\n\"Please, I don't have anyone else to buy things for,\" Linda pleaded. \"I ordered this for you months ago. I will need to get the girls something now.\"\n\n\"Buy it for yourself, or Rachel!\"\n\n\"I have one, and Rachel just got one. That is why I thought it would look good on you.\"\n\n\"Linda...\"\n\n\"Just say okay, please. Maxwell had to have it made so that it would be as nice as mine. He has been waiting six months for it.\"\n\n\"Alright...I don't know what I am going to do with you!\"\n\n\"Dawn, it will look good with your bellybutton diamonds and your other diamonds,\" I said. \"Especially if that is all you have one. I think I see a photo in this.\" The girls laughed.\n\n\"Yes, it will!\" Linda said. \"Do you have some simple half-carat diamond post for your ears?\"\n\n\"Yes.\"\n\n\"That is all you need with this necklace.\"\n\n\"I still don't believe you.\"\n\n\"Let me take them off you so we can get back to the hotel,\" Linda told her.\n\nShe removed the necklace and the bracelet and put them back in the black velvet boxes. Maxwell took them and put them in a simple bag and handed them to Linda. She handed them to Dawn.\n\n\"Rachel, you ready to go?\"\n\n\"Let me check outside.\"\n\nRachel went to the door and looked for a minute, then came back inside.\n\n\"Okay.\"\n\n\"Thanks, Maxwell!\" Linda yelled as we left.\n\n\"You're welcome!\"\n\nRachel held the door open while the driver held the limo door open, and we got in. The driver got in, then Rachel got in.\n\n\"Linda, I can't believe you did that,\" Dawn said. \n\n\"I had them made for you so they would fit perfectly. They just got here from Europe last month.\"\n\n\"I will be scared to wear them anywhere.\"\n\n\"Everyone will think they are fake, but you will know.\"\n\n\"Linda, that was far too much money,\" Dawn said.\n\n\"I don't have anyone else to share my stores with. You, Rachel, and the girls are it. Samantha and Amy, I will have something for you the next time we come to New York.\"\n\n\"Not like that, you won't,\" Amy said. Linda just smiled.\n\nWe drove back to the hotel, and Rachel escorted us inside. There was a bottle of champagne sitting on ice when we went into the room.\n\n\"Linda, don't ever spend money like that on me again,\" Dawn said.\n\n\"Why not? I have plenty to spend on you.\"\n\nRachel opened the champagne, and we were pouring it.\n\n\"Linda, please tell me you didn't buy that because of what you want James to do,\" Dawn said.\n\n\"I ordered that months ago, Dawn. I wouldn't do anything like that.\"\n\n\"Okay. It is fabulous. Thank you.\"\n\n\"You are welcome. I think emeralds and rubies do look good on you two,\" she said to the girls.\n\nSamantha and Amy sipped their champagne.\n\nLater, we went out for a wonderful dinner. The limo drove us around after dinner so we could see all the lights.\n\n*****\n\nWe got up late Tuesday morning and had breakfast.\n\n\"Are you ready to go home?\" Linda asked.\n\n\"It has been a great trip. Thanks, Linda,\" Amy said.\n\n\"When we get our dresses, we will all have to go someplace expensive. It may be the last time we fit in them for a while,\" Linda added.\n\nWe finished and packed, and they took everything to the limo. We met Jeanine and Arthur at the airport.\n\n*****\n\nI was sitting next to Linda as we flew.\n\n\"You think there is some land out near you?\"\n\n\"I do. I will check on it as soon as we get back.\"\n\n\"That would be great. It would be wonderful if all the kids could grow up and play together.\"\n\n\"I will let you know as soon as I find out.\"\n\n*****\n\nWe had all been napping when Arthur came over the intercom and told us to prepare for landing.\n\nAs we were taxiing, Rachel walked up to the front of the plane while she was on her phone. We taxied for a few more minutes and stopped. Everyone stood up.\n\n\"Wait,\" Rachel said and walked back to the front of the plane.\n\n\"That is never good,\" Linda said.\n\nWe were slowly picking up our things when Rachel walked back.\n\n\"What's up?\" Linda asked.\n\n\"Security is waiting on us,\" Rachel replied.\n\n\"Why?\"\n\n\"There is a problem.\"\n\n\"What kind of problem, Rachel?\" Linda asked.\n\n\"Security got a report that your stalker is back in town...\"\n\n\"Fuck!!\" Linda screamed.\n\n\"They are not sure...\"\n\n\"Yes, they are! Fuck!!\"\n\n\"Calm down, Linda,\" I told her.\n\n\"The Tahoes are next to the jet. Everyone will get in them once we have the bags unloaded. James, we will drive your family to your SUV and wait on you,\" Rachel said.\n\nWe all waited for a few minutes as they unloaded the luggage. Linda was pissed.\n\n\"Let's go,\" Rachel said and let the stairs down. \"Arthur, get the jet to the hanger as soon as possible. Secure it and wait on security.\"\n\nLinda went down first, and they hustled her to the Tahoe, then we followed Rachel. The five of us got in another Tahoe. They drove around to the parking area, and I gave my keys to one of the security guys, and they loaded our luggage in the Escalade. There were three Tahoes now.\n\n\"We will follow you to your house,\" the driver said.\n\nWe all got out and got in the Escalade. The two Tahoes with Linda and Rachel and drove off.\n\n\"I hate this for Linda,\" Dawn said.\n\n\"I hate it for us. This nut may be looking for us, too,\" I said. \"Things change now.\"\n\n\"What is going on?\" Lieke asked.\n\n\"Linda has this guy that has been stalking her for a while. We thought he had left, but it sounds like he is back.\"\n\n\"Is he dangerous?\"\n\n\"We don't know but are assuming he is.\"\n\nWe drove to the house, and two security guards got out first and looked around before they would let us out.\n\nWe got everything unloaded and went into the house.\n\n\"Dr. Smith, we will stay if you want us to?\" One of them asked.\n\n\"We are good. Thanks.\"\n\nThey left the house.\n\nIt was mid-afternoon, and I wanted to check out everything. After the girls got settled, I went to the computer room to review recordings. I sat for an hour and watched recordings from the front gate of vehicles that drove by and activated the camera.\n\n\"Uh, oh,\" I said as a recording came up of an old brown pickup truck that stopped at the gate.\n\nI looked at the driver, and it was him. I waited until he drove off to see if I could get the license plates, but couldn't.\n\nI picked up the phone and called the Chief of Police.\n\n\"Hey, Chief, it's Dr. Smith.\"\n\n\"Hey, Dr. Smith! What can I do for you?\"\n\n\"You remember the information and the photo I brought by about the guy that was stalking Linda Williams?\"\n\n\"Sure.\"\n\n\"He is back in town. We all just got back from Paris, and her security was waiting for us. I reviewed all the recordings from traffic going by the gate at the front of the house, and he stopped at the entrance. He is driving an old brown Ford pickup, but I couldn't get the tags.\"\n\n\"You think he is up to no good?\"\n\n\"If her security thinks so, I am sure he is. They may not have called you.\"\n\n\"They haven't.\"\n\n\"Can you have everyone watch for an old brown Ford pickup and pass the photo around again?\"\n",
        "\"Will do. I'll get the investigators on it and see if we can put a name to the photo.\"\n\n\"Thanks.\"\n\n\"No problem.\"\n\n\"Bye.\"\n\nI called the Sheriff and talked to him. He told me he would have a car come by the house occasionally and watch for the truck.\n\nI left the study, and Dawn was in the den sipping some wine.\n\n\"Where are the three of them?\" I asked.\n\n\"They went up to bed.\"\n\n\"I called the Police Chief and the Sheriff. They had not heard from Linda's people.\"\n\n\"They probably want to take care of it themselves.\"\n\n\"Well, everyone will be looking for him. I reviewed recordings from the front gate, and he pulled in and stopped Saturday. He is driving an old brown Ford pickup. When you three go out, keep an eye out.\"\n\n\"Why would he come here?\"\n\n\"He must know Linda visits here. I need to call Rachel.\"\n\nI sat on the sofa with Dawn and called Rachel.\n\n\"Hey, Rachel. Did you get Linda calmed down?\"\n\n\"What do you think?\"\n\n\"I reviewed recordings from our front gate, and he pulled up and stopped Saturday. He is driving an old brown Ford pickup.\"\n\n\"Why would he be at your place?\"\n\n\"Looking for Linda, maybe.\"\n\n\"Do you want me to send some people to stay at your house?\"\n\n\"We are good here. You know that. I did call the Police Chief and the Sheriff. They are going to get the photo back out and look for the truck.\"\n\n\"Okay. Thanks for the information.\"\n\n\"Rachel, you two stay in until they get this guy.\"\n\n\"You know she won't do that.\"\n\n\"Make her.\"\n\n\"I'll try, but she has so much to do right now.\"\n\n\"You two, be careful.\"\n\n\"Bye.\"\n\nDawn had gone and gotten me a glass of wine.\n\n\"If you are tired, go to bed too. I need to work on a few things,\" I said.\n\n\"I'm okay.\"\n\nAfter I finished my wine, I went to the secret gun cabinet at the front door and started pulling out guns to clean and check. Dawn was helping me breakdown the pistols and clean them.\n\n\"I hope we don't need these,\" Dawn said.\n\n\"I do too.\"\n\nAbout 6:00, Lieke, Amy, and Samantha came down looking for something to eat. Dawn and I fixed a light dinner, and we all sat down to eat.\n\n\"You three, I reviewed the recordings from the front gate. This guy stopped on Saturday and checked everything out. He is driving an old brown Ford pickup. I want you three to travel together for now if you go out.\"\n\n\"What do we do if we see him?\" Amy asked.\n\n\"Drive someplace public. If you want to go to the mall or someplace like that, Dawn or I will go with you,\" I said.\n\n\"Are you thinking he is dangerous?\" Amy asked.\n\n\"Yes.\"\n\nAfter we all ate, the girls went back to bed. Dawn and I went upstairs later and found the three of them asleep in our bed. We got naked and got in bed with them.\n\n*****\n\nWednesday morning, I called the owner of the land next door. I had met him one day as he drove his tractor along the fence line. He and his wife were about 68, and he had told me he was getting to the point he couldn't farm anymore. During the conversation, I had asked if he was planning on selling the land. He told me that he was thinking about it and that if he could, he and his wife wanted to move to Florida to a retirement community. I got his phone number just in case I needed to get in touch with him. When I called and told him I knew someone that might be interested, he was very happy.\n\nThe 500 acres next to us was similar to our property. It had plenty of trees, some rolling pastures, and a lake of about 20 acres. He asked me what I thought the land was worth, and I told him we had paid about $10,000 an acre for our land. He seemed to think that was a pretty good price. I thought the 5 million or so was what really appealed to him. I told him he should get someone to appraise the land, though, to be fair. He told me he didn't know anything about doing something like that, so I told him I could have someone come out and survey it and do it if he trusted me. He told me to make arrangements.\n\nAfter I got off the phone with him, I called the lawyers and told them to have someone check into the land and give me a fair written appraisal. He told me it would take a day or two.\n\nI smelled something cooking later and went out to the den. The girls were all in the kitchen cooking lunch. I went and sat on one of the bar stools.\n\n\"What's up?\" Samantha asked.\n\n\"What would you all think about Linda buying the land next to us and building there?\"\n\n\"That would be great. Is she going to do that?\" Amy asked.\n\n\"I think the couple that owns the 500 acres next to us is interested in selling, and I am sure Linda can afford it.\"\n\n\"Oh, wow, have you told her yet?\" Samantha asked.\n\n\"Not yet. I am helping the couple get a fair appraisal on the land. He was interested in selling for what we paid for this land.\"\n\n\"That would be great,\" Dawn said.\n\n\"I'll find out in a few days what the appraisal is.\"\n\n\"Linda would love that,\" Dawn added.\n\n\"I guess so, but I am sure she will build something big.\"\n\n\"What is she going to do with the mansion?\"\n\n\"I think she is going to lease it and have it turned into a corporate headquarters for some company.\"\n\n\"When will she start?\" Samantha asked.\n\n\"I imagine it will take her a year or so to build and then move and lease the mansion.\"\n\n\"I hope that will not be too much for her while she is pregnant,\" Dawn said.\n\n\"She will be happy. Have you told her yet?\" Samantha asked.\n\n\"I wanted to wait and make sure he wanted to sell. That small hill in the back would be a great place to build a house,\" I told her.\n\n\"I hope she likes it.\"\n\n\"I'll call her and tell her.\"\n\nAfter we ate lunch, we were all sitting in the den recovering. I pulled out my cell phone and called Linda.\n\n\"Hey, James.\"\n\n\"How are you doing?\"\n\n\"Okay.\"\n\n\"I made a call. All that land next to us is for sale.\"\n\n\"Really!\"\n\n\"It is 500 acres if you want all of it. I think it will be about $10,000 an acre. That is what we paid for ours.\"\n\n\"That would be perfect!\"\n\n\"I'll have the appraisal in a few days.\"\n\n\"Great! We will fly over tomorrow, and you can show it to me from the air.\"\n\n\"Okay. You will like it. There is a nice little hill near the back that would be perfect to build the house on. It has about a 20-acre lake also that is stream-fed.\"\n\n\"Wonderful! We will see you in the morning!\"\n\nI hung up.\n\n\"She is happy,\" I said. \"She is flying here in the morning, so she can look at it from the air.\"\n\n\"I think it will be perfect for her,\" Dawn said. \"This will take her mind off the other problem.\"\n\n\"The land next to you is $5,000,000?\" Lieke asked.\n\n\"Yes. It is $10,000 an acre. That is what we paid for our land.\"\n\n\"How much do you have?\"\n\n\"Three hundred acres. How much land does your family have?\"\n\n\"About 100 square miles. There are several miles along two different beaches, and it goes up into the hills.\"\n\n\"Damn,\" came from Samantha.\n\n\"The beach property would make an excellent resort if we could sell it,\" Lieke said. \"But, if we try to sell off part of it, the state said it would take away our tax exemption.\"\n\n\"That sucks,\" Dawn said.\n\n\"It does.\"\n\n\"They shouldn't be able to do that,\" Samantha replied.\n\n\"That is what everyone thinks, but we can't fight them. It would cost too much and take forever.\"\n\nWe all ended up playing in the pool until dinner time. Lieke helped the girls cook something made from things she had Dawn get at the store. It smelled great while it was cooking.\n\nI went and emailed Lori to see where she was on the latest project and to email Sam about installing the TVs at the limo place.\n\n\"Come and eat,\" Dawn said from my study door.\n\nI got up and went to the kitchen.\n\n*****\n\nAfter we watched a late movie, we all went to bed.\n\n\"Lieke, get on top. We want to watch you,\" Dawn told her.\n\nI could tell Lieke was still a little uneasy about them watching, but she straddled my legs and stroked my cock until it was nice and hard. She worked her way into position and worked the end of my cock between her wet pussy lips a minute, then began to slide down. Lieke had a cute body that I enjoyed looking at and especially enjoyed watching work on my cock.\n\n\"You look nervous,\" Dawn said.\n\n\"I'm still getting used to this.\"\n\nDawn got on the bed and straddled my legs behind Lieke. We watched her reach around her and take Lieke's tits in each hand and rub. After a few minutes, Lieke seemed to relax as she slowly worked her pussy. She closed her eyes and kept going; then I felt it. Dawn was pushing her energy into Lieke.\n\nWe watched as Lieke kept her eyes closed as she slowly worked her pussy for a while.\n\n\"Ahhhh, this feels so good,\" Lieke moaned. Dawn smiled from over her shoulder.\n\nI could feel Dawn gently pushing Lieke to a sexual high. Samantha had laid her head on my chest to watch and to probably feel all the energy flowing from Dawn.\n\nLieke slowly worked as she moaned softly. She was building to an orgasm, just enjoying the feeling.\n\n\"Honey, why don't you sit up and hold her,\" Dawn said.\n\nLieke was still working her pussy slowly when I sat up and wrapped my arms around her. Dawn rubbed my arms for a minute, then wrapped her arms around the both of us. I saw Dawn close her eyes, and a minute later, it hit me.\n\n\"Dawn...\" I let out.\n\n\"Shhhhh...\" came from her.\n\nI closed my eyes and felt. At first, I felt a lot of Dawn's energy as it flowed into me from where she was touching me. Then what I felt suddenly changed. It took me a few seconds, but then I knew I was deeply connected to Lieke. I had pushed energy into Lieke many times as we had sex but never had this connection with her.\n\n\"Oh, wow...\" I heard Samantha moan.\n\n\"Just feel,\" Dawn said to me.\n\nI concentrated on where my arms were wrapped around Lieke. I began to feel her on a much deeper level, along with the energy coming from Dawn. Lieke was moaning softly as she worked.\n\n\"Feel for her,\" Dawn said.\n\nI could already feel Lieke deeply, but I knew what Dawn meant. I concentrated on the energy I felt from Lieke.\n\n\"Deeper,\" Dawn said.\n\nI began to reach into Lieke's energy like I did when Dawn was sitting in my lap. I had gotten a little better at connecting with Amy and Samantha that deeply.\n\n\"Ohhhhhh...\" came from Lieke as I reached deeper.\n\n\"That's it,\" came from Dawn.\n\nI kept concentrating as I felt Dawn's energy also. It seemed as if Dawn was taking my energy with hers as she went deep into Lieke's spirit. Lieke's energy on this level was new to me. I kept going and could feel her much beyond just her sexual energy.\n\n\"Ohhhhhhh...\" came from Lieke again.\n\n\"Lieke...feel for his spirit,\" Dawn said softly.\n\nI held Lieke as I was absorbed in her energy. Then I felt Dawn's energy change, and it felt as if she was pushing Lieke into me like she had pulled me into Lieke.\n\n\"That's it,\" came from Dawn.\n\nIt was quiet, not sure how long, but I could feel Lieke actually reaching inside of my energy as she sat motionless now. I held her a little tighter then I felt her wrap her arms around my back. We held each other.\n\nAt some point, I felt connected to Lieke just like I did when Dawn was in my lap for one of our mind fucks. I became more absorbed in her energy and knew she was deeply intertwined in mine.\n\n\"She is all yours,\" I heard Dawn say softly.\n\nLieke's energy was different. It felt new, but it also felt untamed. Somewhat like Amy and Samantha felt the first few times I connected deeply with them. I was holding her, and she was holding me. At some point, Lieke had stopped working her pussy on my cock. Dawn had connected us like we connected. Now, Dawn wanted to see if I could take us to where we went.\n\nThe sensations I felt were wonderful. It would be hard to say that someone's energy could feel surprised, but that was happening. Lieke and I would reach new levels, and I would feel Lieke's energy spike like she was surprised or happy.\n\nI felt someone else's energy as they placed a hand on my back. I didn't reach out for whoever it was, but I eventually knew it was Samantha. Lieke and I were merging completely as we kept going, but I could feel Samantha's energy weaving through ours, just sort of exploring.\n\nI could feel Lieke going deeper into me as she realized she could. Dawn had taught me years ago that another person's spirit will continue to reach into someone else's energy as long as they let it. When she explained that to me, I learned not to try and concentrate so much on Dawn's energy in me, and I would just let it go wherever it desired to go. That is what was happening between Lieke and me. Our spirits were just flowing deeper and deeper as they found new places to go.\n\n\"...emmmmmmmmmm...\" I could hear and feel coming from Lieke.\n\nI tried what I did with Dawn when she reached this point. I had my hands on the small of Lieke's back, so I pushed deeper and harder.\n\n\"...emmmmmmmmmmmmmmmmmmmm...\"\n\nWhat I felt from Lieke was more of a primal feeling than sound. I pushed into her deeper.\n\n\"Hold it right there,\" I heard in my head as it came from Dawn.\n\nI held Lieke and myself where we were. This was the point that Dawn and I would begin to feel like one person. I just relaxed and drifted.\n\n\"...emmmmmmmmmmmmm...\" came from Lieke occasionally.\n\nI was feeling the tenderness of her energy when I began to feel her pussy squeeze my cock.\n\n\"Emmmmmm...\"\n\nI just held her body near me and her energy inside of me. Time had stopped passing a long time ago.\n\n\"Emmmmmmmmmm...\"\n\nLieke's energy suddenly changed to complete sexual arousal. When Dawn and I did this, her energy would gradually build to full arousal. I wondered if Lieke was able to control it.\n\n\"...ahhhhhhhhhhhhh...\" came out softly as her pussy squeezed. Her sudden arousal was taking my energy to the same place.\n\n\"Ahhhhhhhhhhhhh...\"\n\nI felt Lieke began to tremble slightly. I held her close as it increased.\n\n\"Ahhhhhhhh.\"\n\nHer body was trembling slightly all over. I knew what was about to happen.\n\n\"Puuuuush,\" I heard Dawn say in my head.\n\nI pushed Lieke hard.\n\n\"Ahhhhh.\"\n\nShe was shaking as I held her. I pushed hard again.\n\n\"Ahhhhhh!\"\n\nI could feel that Lieke was about to explode. I held her close and pushed all I had into her.\n\n\"Ahhhhhhh!!! Fuck!!!\" Lieke screamed as she began to jerk hard in my arms.\n\nI held her tightly.\n\n\"Ahhhhhhhhh!!!\"\n\nSuddenly, we were both jerking hard. I could hear Lieke screaming as I came so hard I was jerking too.\n\n\"Fuuuuuuuuck!!!\"\n\nLieke screamed, and her arms squeezed me tight. I was erupting inside of her. I could feel her sexual energy crashing into mine as a huge orgasm ripped through her body.\n\n\"Jaaaaaames!!!\"\n\nShe was bucking into me as she kept coming over and over. I was still shooting cum into her.\n\n\"Oh, god!!!\"\n\nLieke jerked hard, then went limp in my arms. I was struggling to keep my arms around Lieke, but her energy was still running through me.\n\n\"Relax,\" I heard Dawn say, then felt her energy flow through Lieke and into me.\n\nI held Lieke as I struggled to breathe. After a minute or so, I realized Dawn was pushing energy into Lieke to keep her from passing out.\n\n\"Ohhhhhh...\" came from Lieke.\n\nLieke stirred in my arms.\n\n\"What...happened...\" Lieke moaned.\n\n\"You tell us,\" Dawn said.\n\nI opened my eyes and looked at Lieke. Her eyes seemed still far away. Dawn was slowly rubbing her back.\n\n\"What...happened...\" Lieke repeated.\n\nDawn smiled and kept rubbing her back. I wasn't sure if Lieke would fall over if I removed my arms or not, so I kept holding her. Her eyes were looking around, but I knew they were not focusing on anything.\n\n\"Dawn...\"\n\n\"Yes?\"\n\n\"What happened?\"\n\n\"You tell me?\"\n\n\"I...I thought I was dreaming.\"\n\n\"What did you feel?\" Dawn asked.\n\n\"I felt like I was floating...but...I seemed to feel James.\"\n\n\"What did he feel like?\"\n\n\"It wasn't that kind of feeling. I just knew he was there. Then...then suddenly, I felt this incredible orgasm running through me...and it didn't stop. It just kept going...until I realized I was screaming. But, I am not sure I was actually screaming.\n\n\"Oh, you were screaming,\" I heard Amy say.\n\n\"I was?\"\n\n\"Over and over.\"\n\n\"Wow. So, it actually happened?\"\n\n\"What did you feel happening?\" Dawn asked.\n\n\"I knew I was having a fantastic orgasm...but...it was more in my head than my body...I think. But now, I know it was happening in my body.\"\n\n\"How did it feel in your head then?\" Dawn asked.\n\n\"I'm not sure I can explain it. I just felt a huge burst of pleasure...and happiness...I think.\"\n\n\"That is pretty much it,\" Samantha said.\n\n\"What do you mean?\" Lieke asked.\n\n\"Dawn calls it a mind fuck,\" Amy said and giggled.\n\n\"That would describe it,\" Lieke said.\n\nI removed my arms from around her, and she leaned back a little.\n\n\"Did you do this to me?\" Lieke asked me.\n\n\"More or less,\" Dawn said and sat on the bed.\n\n\"I have never felt like that before. I was so calm and happy, then suddenly I felt a huge surge of energy...run through my body...then everything got really bright...and I heard myself screaming. Then I felt like I was going to pass out.\"\n\n\"You would have if Dawn hadn't kept you from it,\" Amy said.\n\n\"What do you mean?\"\n\n\"I passed out the first time it happened,\" Samantha said.\n\n\"But what happened?\"\n\n\"Lieke, you and James have been...having sex...for the last 45 minutes,\" Dawn said.\n\n\"What? It was just a few minutes.\"\n\n\"No, it wasn't,\" Amy added.\n\n\"Somebody needs to explain to me what happened?\"\n\nAs Lieke sat in my lap, Dawn and the girls explained to Lieke what had happened.\n\n\"But, you said that only you three had done this?\" Lieke asked.\n\n\"Until now, yes,\" Dawn said.\n\n\"Then, why me?\"\n\n\"Lieke, some people have energy within them that can be tapped, not many, but some. Samantha and Amy have it, and James and I can connect with it. In many cases, when a person has energy that can be tapped, they don't know it or know how to do it. James knows how to do it. I just raised your level of awareness, and he connected to you,\" Dawn explained.\n\n\"What just happened happens inside of you and inside your head,\" Samantha said. \"Dawn says it is a mind fuck, and it is.\"\n\n\"Your body not only feels an incredible orgasm, but your mind feels an incredible burst of pleasure,\" Amy said.\n\n\"For you, it was pleasure. For us, we feel an incredible feeling of love when it happens,\" Dawn said. \"James has never been able to do that with anyone but the three of us. It took our love for each other for us to connect.\"\n\n\"Then how did it happen to me?\"\n\n\"I helped. You trust us, and you connect with us on a different level than other people. I have felt your energy, so I wanted to see if I could help James connect with you.\"\n\n\"So, you did this?\"\n\n\"We did this. I just made it possible for you to let go and for James to take control.\"\n\n\"This is something new for Dawn,\" I told Lieke.\n\n\"I have grown in my abilities to do things like this,\" Dawn said.\n\n\"I know when you were in Hawaii, I had huge orgasms, but this was not just an orgasm.\"\n\n\"No, it's not,\" Samantha said.\n\n\"Lieke, don't forget how you felt and how you connected with James' energy and spirit. It is in you to do. With practice, you may find that there are other people you can connect with,\" Dawn said.\n\n\"Like this?\"\n\n\"I don't know. That is up to you.\"\n\nLieke moved off my lap and laid on the bed. She seemed to be wiped out. Dawn lay next to her, and I lay on her other side. The girls got behind each of us. I turned off the lights and felt everyone roll toward Lieke and hold her.\n\n*****\n\nDawn tapped my shoulder about 5:30 the next morning, and we eased out of bed and went and showered. After that, we headed down to the kitchen for coffee.\n\n\"Did you know that would happen last night?\" I asked as we waited on the coffee.\n\n\"I thought it might.\"\n\n\"Why?\"\n\n\"I can feel her energy more now.\"\n\n\"Since the reservation?\"\n\n\"Yes. I feel everyone's energy more now. Maybe not their energy. Maybe it is their spirit, I feel.\""
    ],
    "authorname": "drmac100",
    "tags": [
        "lottery",
        "redheads"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-70"
}
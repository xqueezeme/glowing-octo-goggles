{
    "title": "Unity and Destiny Pt. 08",
    "pages": [
        "They were all grumpy and exhausted after the near-fiasco in Mexico. But Esther refused to let them put Jacob and Tomiko in danger by staying any longer than necessary. By the afternoon they'd returned the rental cars and picked up their own from the airport lot. While they made preparations for the next long drive, Esther sat with Jacob.\n\n\"Why go all the way to Oregon again?\" Jacob asked. \"Surely you'd be just as safe up in the mountains.\"\n\n\"It's the Mexican,\" Esther said unhappily. \"I still don't know how keen his perception is, but we stick out for anyone sensitive enough, unless I constantly shield us. We'll be a lot less conspicuous among an established group of powerful Changed. I'd leave if I felt any danger to them, of course. They shouldn't pay for our mistakes.\"\n\nJacob frowned. \"You worry so much, Esther,\" he said. \"Remember what we talked about. You can't make everything your responsibility. You've already done so much good.\"\n\nShe nodded, trying to believe him. Javier said the same thing all the time now. But she didn't really want to think about it.\n\n\"Is Tomiko staying a while longer, then?\" she asked. \"I'm glad, for both of you.\"\n\nJacob smiled. \"No secrets from you, of course. She's an amazing person, really. And it turns out we understand each other better than we could have guessed. I spent all those difficult years worrying about Abuela and her burdens, and Tomiko did it even longer with her great-uncle.\"\n\n\"And I'm going to do that to Javier,\" Esther said miserably.\n\nJacob put his hands on her shoulders. \"You're not doing anything to him. He loves you, Esther. I'd never give up what I had with Marisol. Never. If Abuela had lived another hundred years I would have been there for her as long as I could have, as much as she'd let me.\"\n\nThey were leaving Grace and Kat behind. Kat promised to send them details of anything she found on the hard drives she'd stolen. \n\n\"I tried to mount one of them read-only, and I got a lot of errors,\" she said unhappily. \"But I don't think there's irreparable damage. I'll get the right equipment and do it the proper way, you know, make an image and then work only from the copies. So if there's any evidence, the professional forensic people can be sure we didn't tamper with it. Assuming we decide to send the originals on.\"\n\n\"We'll be in touch about that,\" said Javier. \"Probably it depends on what you find.\"\n\nThen it was yet another long drive. Esther was feeling more rested, and she made a few hesitant forays into otherspace. She didn't like what she felt.\n\n\"The Mexican is incredibly strong,\" she said. \"He's not even trying to mask his presence now, though maybe he can't while he's working this hard. He's some distance away from the place he usually is, a lot closer to the border. Still looking for us farther south, but he's certainly capable of finding us up here. Not if I have us hidden, but we have to be very cautious.\"\n\n\"He couldn't find you if you were on your own,\" said Nicola bitterly. \"Maybe Selena could hide well enough, too. Or Mark. But not me. You have to protect me until I get my fucking act together on those concealment techniques.\"\n\n\"You will,\" said Mark, putting his arm on hers. \"I know you will. And we're safer together anyway.\"\n\nNicola sighed and leaned against him. Esther was glad things were going a little better with them now. Maybe it was because Mark seemed more confident he'd eventually recover fully. She wasn't sure that was a fair expectation, but she hoped it was true.\n\nEsther knew something was wrong when they approached the farm in Oregon, though it was hard to put her finger on it exactly. And then Diana stiffened when she sensed them coming. Esther stopped eavesdropping. She felt guilty enough about what she'd done with the information from Diana's visions.\n\nThey waited in the evening darkness, in the same spot on the side of the highway. Sure enough, Diana approached in a few minutes. But she had along Henry, and Henry's girlfriend, Carla.\n\n\"They're all armed,\" Esther said softly. \n\n\"We should leave,\" Selena said immediately. \n\nNicola agreed. \"Something's wrong here.\"\n\nEsther shook her head. \"I need to hear what they say. Stay in the car, all of you.\"\n\nThe other car parked a good hundred feet away. Esther stepped out, knowing that they wouldn't shoot her. The three in the other car were silent. Grim, and she thought scared as well. But when they saw it was just Esther approaching, Henry and Carla visibly relaxed, moving their hands away from their guns. Not Diana, of course. But it was good news. It meant Diana had kept Esther's secrets.\n\n\"That's close enough,\" Diana said. Not loudly, but easy for Esther to hear. Would Henry and Carla know she was that sensitive? Nervously she walked a few more steps.\n\n\"No farther,\" Diana called more loudly, and she stopped.\n\n\"What's wrong?\" she said.\n\n\"You're not welcome here,\" Diana said. \"The elders agree on that.\"\n\n\"What's changed?\" Esther asked. \"We have no quarrel with you.\"\n\n\"Did you kill that woman in Mexico?\" Henry asked.\n\nEsther was shocked, and she knew they'd seen her reaction.\n\n\"Of course we didn't,\" Esther said. \"We didn't want anyone to die. We were there to rescue some prisoners. Children among them.\"\n\nCarla shook her head. \"We didn't see anything like that. We did see all those people you hurt. The dead woman, who had been Blessed by the Way.\"\n\nEsther finally caught up. The Mexican had retaliated, and he'd done it in a most cunning fashion.\n\n\"Are you sure it was us you saw? Are you positive you understand this vision properly?\"\n\n\"Of course it was you,\" Diana snorted. \"Your faces were concealed, but I know the way you all move, and you just admitted it besides. Perhaps we saw a limited view, as you suggest. Just as my own memories are limited. And yet you didn't hesitate to act on that limited information, did you? You were so sure you understood the Way. No, Esther, we're done with that sort of arrogance. We haven't forgotten what good you brought us, but that's not enough to allow you to drag us further from the Harmony we've been able to find here. Goodbye, Esther, and may you all walk the long road back to Harmony.\"\n\nShe rolled the window back up and drove off without a backward glance. Esther walked back miserably to the van.\n\n\"They saw us in Unity?\" Selena asked, starting up the minivan. \n\nEsther nodded. \"Not a future vision, of course. I assume it was a reconstruction by the Mexican, maybe with the help of the guards who saw us. Or maybe he's good enough to have seen all that from afar.\"\n\n\"I bet it was the guards,\" said Javier. \"He's powerful, but he's practical, isn't he? Kidnapping those skilled people to plan his attacks, rather than attempting to figure it out on his own.\"\n\n\"And using Unity this way,\" said Selena. \"There's also something theatrical and heavy-handed about it, just like calling himself 'the Mexican.' He's powerful, but he's using every tool he can to make himself seem even more powerful. He's shrouded himself in mystery for a long time, but now that he's acting more directly, he just looks like another dangerous, clever man. Like Yau, or Gupta, or Franklin. Just a man, and he's finally acting scared.\"\n\n\"Let's not talk about him for a while,\" Esther said miserably. \"I guess we have to go back to the Shack now. I can keep us safe there.\"\n\n\"What about the old camp?\" Mark asked. \"I miss it there.\"\n\nJavier shook his head. \"I don't think so. We're centered in Jackson's radar, and she knows about that camp. I feel a little better about her now, but not enough to trust her with our location.\"\n\nWhen they finally arrived at the Shack the next morning, they discovered that a windstorm had blown a tree down, damaging the half-finished porch. It seemed a fitting sort of homecoming.\n\n* * *\n\nJavier sat on the rock, breathing hard. A few seconds later, Mark arrived, coming to a halt and swaying slightly, eyes closed. Listening to his body. Begging, cajoling, whatever it was. Teaching his nerves and muscles how to be flexible again, to reconfigure themselves best for whatever activity he needed them. To be efficient.\n\nJavier hated this role reversal. True, Mark would soon surpass him as a runner, if only by diligence. But it was the quiet determination that Mark had, as though he'd accepted this journey that might never end. He never lost his temper anymore. And underneath all the calm, Javier was pretty sure there was a desperation so large Mark couldn't face it.\n\nMark would stop them before they went too far. Esther didn't like any of their Changed friends wandering too far from her. He knew Selena hated the restriction, and the older woman spent even more time on her meditations now, driving to attain enough concealment skill for Esther to declare her independent. That didn't seem likely any time soon.\n\nAll of a sudden, Javier was tired of being out here. Tired of being away from Esther, even though she'd been increasingly cranky and exhausted in the week since they'd returned. He could take her crankiness. He just wanted to lie down with her while she struggled with whatever skill she was working on. Maybe he'd make her practice immobilizing him, though she hated that.\n\n\"Javier,\" Mark said, breaking his train of thought. He looked up, but Mark didn't continue. Javier waited for him to get out what was on his mind.\n\n\"Nicola said I should talk to you,\" he finally said. \"But I don't know what to say.\"\n\n\"Okay,\" Javier said. \"I think it's a good time for lunch anyway.\"\n\nHe dug the food out of the little pack, giving Mark a chance to collect his thoughts. But as happened so often, Mark was stuck.\n\n\"It's about you and Nicola, I guess,\" said Javier. Mark nodded, and Javier started eating his sandwich.\n\n\"How can she still want to be with me, when I don't desire her?\" he finally said.\n\nJavier sighed. \"Do you want to spend time with her? Protect her, make sure she's happy?\"\n\nMark nodded. \"Of course. I love her.\"\n\n\"Do you think she's attractive? The kind of woman you want to desire physically?\"\n\nHe grimaced. \"She's beautiful. Smart, and strong, and creative. It's me that's not working.\"\n\n\"How much have you told her those things lately?\" he asked. \"Do you think she knows for sure that you think all that?\"\n\nHe frowned, thinking. After a couple minutes of silence, Javier continued.\n\n\"So you really do desire her, you see. It's only your body that's not working the way you want it. Something's not connected right, and maybe it'll start fixing itself soon. But you shouldn't be waiting for that. Sometimes Esther or I aren't in the mood, or our bodies aren't cooperating, but we try to make it work anyway. Sometimes it all falls apart and we feel terrible. But it's something we have to do together, and it sometimes feels like a lot of work. Mark, I know you're a good lover, and you could make Nicola feel wonderful in a hundred ways, with your hands and your mouth. Don't you want her to feel those things?\"\n\nMark was breathing fast, the way he did when he was really upset.\n\n\"Yes,\" he said miserably. \"But I can't do it. I just stop. I don't know where my mind goes, and then Nicola is upset, and it's worse than ever. Why doesn't she just have sex with you? Isn't that easier than all this?\"\n\n\"Maybe,\" Javier said, swallowing uncomfortably. \"But I'm not the one she wants to spend the rest of her life with. I know how hard this is, Mark. But it's like everything else. I've seen how hard you can work for things that are important to you.\"\n\nMark shook his head and started eating his sandwich. And soon he seemed to have put the conversation out of his mind entirely, in his unnerving way. Probably Nicola had told him all the same things Javier had, in different words. Maybe he'd listened, tried to understand, and then put it aside, never to revisit. His memory worked in strange ways. But Nicola loved him, and Javier would never get in the way of that. \n\nBut if Nicola decided that a little sex on the side was what her relationship with Mark needed, Javier doubted he could refuse.\n\n* * *\n\n It's a fucking treasure trove,  Kat wrote.  Glorious bunches of E-mails from people too incompetent to know how to be secure. They use cute pseudonyms, and then their E-mail headers give the whole game away. I'm already digging into all of it. And there are some accounting spreadsheets, all out in the open. I guess the idiots thought a single password on the machine was enough to protect all of it. You'd think the cartels could hire better people. \n\n\"That's fantastic,\" said Esther. \"Is there any reason not to send on the original drives? It looks like everything we hoped for.\"\n\n\"I can't see why not,\" said Javier, starting to type his reply.\n\n Kat, is there anything in the E-mails that might be dangerous to the Changed generally? Discussion of abilities, identities of unrelated people, that sort of thing? \n\n I don't think so,  said Kat.  No obvious smoking guns either, like anyone saying \"The Mexican says we have to bomb Cairo\" or whatnot. But it looks like exactly the stuff the FBI or whoever could use to trace financial support, find conspirators, all that legwork. Any business the Mexican's people do over E-mail is more mundane than messages in Unity, but that's exactly the evidence we want the government to find, isn't it? Still, I only skimmed the E-mails. I'll send you all the stuff that looks important so Esther can zoom through it. Obviously, keep the files properly encrypted. \n\n\"Good,\" said Javier, starting to smile. \"Maybe we really did it. The testimony of those witnesses, and all this information. This is going to bring down the Mexican's power, surely. And maybe we can keep our weird alliance with Jackson going strong.\"\n\nEsther nodded. In Jackson's message last week, she'd been rather pointed about any evidence that they'd promised to turn over. Esther was glad they had Kat to figure all this out so fast.\n\nJackson hadn't said anything about the people they'd rescued, except that they were safe. None of them had trusted Jackson on this point, and Esther had finally managed to find the rescued group. She supposed they were still prisoners, but at least they were otherwise being treated well, with their own rooms and plenty of space in a disused building at an army base in Nebraska. A lot of people had been in and out to talk to the adults, but it was too far for her to eavesdrop on conversations among un-Changed people.\n\nWhen Esther finished going through all the files Kat sent, she had to agree with Kat's assessment. They were missing a lot of context, but these were people who were conspiring and knew it. All sorts of references to one codenamed mission or another, coordination, even place names in Mexico. Nothing that seemed to call out the Changed as a group, or give away any of their special abilities. Some people they referred to were probably Changed like Castillo, and this information might lead to their capture. But that had always been their best scenario: find and punish the ones most responsible, and let it end there. She told Javier to make the arrangements to hand off the hard drives.\n\nAfterwards they went to bed and had the best sex since in a long time. Esther knew this drought was her fault, and she knew that Javier knew it, but for once her fear of the Mexican didn't sit there gnawing at her mind, stealing the attention that Javier deserved. Like Selena said, the Mexican was just a man. And he could be taken down, if everyone worked together.\n\n* * *\n\nAn hour later, Esther sat upright suddenly, causing Javier to grunt a little in his post-sex slumber. She knew immediately what was wrong: Mark was running off, and he was already farther than she'd asked him to go. Five miles, and he showed no signs of turning. \n\nShe'd vaguely known that he and Nicola were arguing, even while she'd been having sex with Javier. She'd kept her attention well away, of course. But Mark might be in danger. From himself rather than from the Mexican, as she could continue to conceal him with an extra effort. \n\nShe padded out into the hall naked. No one here minded, and maybe it would cheer Nicola up a little. But Nicola hardly seemed to notice when she came in to sit next to her on the bed.\n\nShe put her hand on Nicola's bare leg, but Nicola didn't react much to that either. Finally her friend turned her bleary eyes upwards, not quite meeting Esther's gaze.\n\n\"I can't talk about this with you,\" she said.\n\n\"Okay,\" Esther said, trying not to feel hurt. She waited to see if there was anything Nicola wanted to say, but they just sat there.\n\n\"Is he all right?\" Nicola asked eventually.\n\nEsther nodded. \"Not moving very quickly anymore. Selena could catch him easily if he gets in trouble.\"\n\nNicola sighed with resignation, and then she curled up in bed.\n\n\"Leave me alone,\" she said. \"Please. I'm sorry, Esther.\"\n\nEsther wandered outside, feeling out of sorts. Everything had seemed so good earlier. Her body still tingled from that wonderful sex, and she realized she wanted more. The evening air was deliciously frigid, swirling around her torso, stiffening her nipples, caressing her buttocks and thighs like a lover itself. Her feet left no impression on the frozen ground.\n\nShe knew Selena was watching her, from her spot on the bench. It was Selena's meditation spot, when she wanted to be near the others, but farther than her little sleeping nook on the second floor. Esther wandered over to sit next to Selena.\n\n\"Is Mark all right?\" Selena asked. \"He looked pretty upset.\"\n\n\"He'll probably be fine,\" Esther said. \"I might ask you to go fetch him, if he stays out too long.\"\n\nSelena nodded, and then got up to stretch, before sitting down again. Two feet farther from Esther.\n\n\"Oh,\" Esther said. \"I'm sorry, Selena. I just walked right into your personal space. I'm distracted.\"\n\n\"I noticed,\" Selena said wryly. \"No, no, it's all right. This is companionable. Just a bit much to be that close.\"\n\nEsther nodded. And suddenly, she needed someone levelheaded to talk to, who wasn't so close to the mess.\n\n\"Nicola won't talk to me,\" Esther said. \"I got the sense it was personal, and I have no idea what's going on. Do you think she's jealous of Javier and me having good sex? I thought I was hiding all that pretty fully.\"\n\n\"You were, of course, like usual. It's obvious enough with you here, though. No, really, it suits you.\" Selena shook her head uncomfortably. \"That's probably not what it's about, anyway. You really don't know?\"\n\nEsther was baffled. What was it she was missing? Did Javier know, too?\n\n\"All right,\" Selena said. \"You really have remarkable control over your talents. I'll tell you, but only because Nicola surely assumes you know anyway. Mark's sexual function is starting to return. Erections, anyway. Maybe I noticed it first, when we were out running together. He obviously hopes I don't notice, but it's become pretty common. And lately, around you, it's been more than just erections. I'm sure Nicola has noticed it.\"\n\n\"But not around Nicola,\" Esther said.\n\nSelena shrugged. \"Not that I know of. I'm not the one to try to explain it, but obviously it must hurt both of them. And I guess that's all I want to say about it.\"\n\nEsther knew Mark had always been uncomfortable about whatever degree of attraction he had to her, and now to have that, but not what he wanted with Nicola? What a mess. She thanked Selena and stood up, trying to figure out if there was anything she could do. Or at least if she could put it aside long enough to satisfy her body some more with Javier.\n\nSelena smiled, perhaps noticing whatever subtle signs she usually did. Lately Esther had to work pretty hard if she wanted to fully hide her body language from Selena. Especially if she was naked like this.\n\n\"Thanks, Selena.\"\n\nSelena nodded and closed her eyes, starting her meditation again. And Esther wandered back towards Javier, more confused than ever. But she was still horny, and Javier was awake. Masturbating while he lay on his back in the middle of their bed, the way he sometimes did when he wanted her to notice, rather than give him privacy. And it occurred to her that nowadays Selena would be able to see something like that.",
        "And the others too, of course. Nicola didn't exactly stop masturbating when Esther opened the front door, but she did pretend she wasn't watching Javier.\n\nWhat a mess, indeed. But for once Esther thought she could put off worrying. Her body was tingling in a way it hadn't for a while, and she started thinking about a quick little wash, and then lubrication, and then getting Javier to push his meaty penis pushing deep between her butt checks. Maybe Javier was thinking about that right now.\n\nIt felt selfish, leaving her friends in the lurch, but as everyone kept telling her, she couldn't solve everything. And twenty minutes later, as she rode roughly atop Javier, she let her control slip just a little. Enough that Selena sat up, outside on her bench. Enough that Nicola sighed and sped up her movements, a soft sound coming from her lips, maybe something to push her to an orgasm, or just part of the whole neurological response. And she knew they were all a little confused, but they loved each other, and that would be enough. Maybe she could convince Mark to have sex with her, while Nicole and Javier coupled next to them, the way both of them obviously wanted so badly. Maybe there was some clever thing she could do to share senses and bring the other couple closer. Nicola wouldn't know yet, but Mark had turned around on his own, walking as fast as he could back to the woman he loved. It would all work out, eventually.\n\n* * *\n\nJavier's hands sweated as he gripped the nylon CD case. \n\nHe knew he was safe. Esther and the others were only two blocks away, and no one was going to kidnap him in broad daylight, in the middle of San Jose. Myra Jackson's agent would sit on the bench with him, say the code words, and then after a few minutes Javier would get up, leaving the case beside him. Just like a spy movie. He should put it down now, so it didn't look suspicious later. But these hard drives were more valuable than gold. More valuable than anything. He wiped his hand again.\n\nSomeone was coming towards the bench. He gazed the other way, trying to look casual. No need to even notice them.\n\n\"Pickles twenty-seven television. Hello, Javier.\"\n\nHe almost jumped. Why had Jackson come herself? Well, he hardly needed the code from her. But he appreciated she'd said it, anyway. \n\nHe set the case down casually between them, still not looking at her.\n\n\"You and your friends did the country an immense service,\" she said quietly. \n\nHe turned to look. She wasn't reaching for the case, and she had an odd expression on her face. Almost pity. His stomach lurched. What was her game? Was this another elaborate trap?\n\n\"We didn't touch the original drives,\" he said nervously. \"Our friend made a very careful copy. She said it shouldn't have affected a thing. But there are E-mails on there. Financial stuff. It's full of evidence.\"\n\n\"I'm sure,\" said Jackson. \"And I know it will help our efforts greatly. But those people you rescued already supplied the crucial missing pieces.\"\n\nJavier swallowed. Jackson still hadn't taken the drives. What was she really here for?\n\n\"Where are they?\" he said nervously. \"Have you repatriated the non-Americans? What about the people they were being used as leverage against? Have you found them? Is there anything we can do?\"\n\nShe looked at him, expression blank again.\n\n\"We're in discussions about the foreigners. And I'm afraid I can't tell you anything about the rest of the situation. Javier, I'm still not positive what your group's motivation has been. I like to think you're just patriots, as I am. Trying to do the right thing. But now is the time to stop. From here on, it's a bigger problem than you can handle. No matter what you think you know, the reality is far more dangerous.\"\n\nShe stood up, casually taking the case.\n\n\"I'm sure Kat was careful,\" she said. \"And tell Mark he has less to worry about now. Javier, you should all listen to the news tonight.\"\n\nThen she walked off, as though nothing at all had happened.\n\n* * *\n\nKat and Grace came with them to the Shack. Whatever was coming, they wanted to hear it together. Esther invited Raj as well, but he'd declined, saying he had an obligation with Professor Kuznetsov and his wife. Esther wasn't quite sure what to make of it. But he'd been withdrawn ever since they returned from the Mexican raid.\n\nThe newscaster had just announced a special address from the president and the British prime minister, in fifteen minutes. The rumors were flying, but everyone assumed it was about Black Christmas, maybe some breakthrough about the conspiracy.\n\n\"They must have already worked out a lot of the Mexican's organization,\" Javier was saying nervously. \"They just needed the central bit of evidence, and those hostages provided it. The president will announce that the Mexican's a fugitive. But those hard drives will still be really important, like Jackson said they would.\"\n\nJavier was repeating himself, and Selena shook her head. She'd hardly said anything on the ride back from San Jose, after the first discussion, where they'd worried about how Jackson found out Mark was still with them. But then they'd moved on to wondering about the announcement tonight, and Selena had just pursed her lips and looked out the window. Esther had this terrible feeling that Selena and Javier had both guessed something, and were too scared to tell Esther. \n\nThe radio finally switched to the live broadcast. The British prime minister began first, and he sounded angry. But he always sounded angry. It turned into one of those uncomfortable speeches that they'd already heard, describing the horror of Black Christmas. They all waited for him to get to the point.\n\nAnd then the president started talking. There were more lofty words, about righting the wrong done against the whole world, about a careful and measured response. Esther felt a glimmer of hope. This was what they'd wanted.\n\n \"It is with a heavy heart that we begin what is necessary to bring justice to those who have done us evil. For too many years our great neighbors to the south have hosted a parasite, one they have been unable to remove despite their honest efforts. And so as we speak, American and British forces have begun air strikes on the strongholds of these drug cartels, whose criminal enterprises have finally extended to wanton terrorism. We have solid proof that several of these cartels secretly collaborated with terrorist cells around the world ...\" \n\nAir strikes? That meant bombs. It meant war, like in the Balkans. Esther stared at the others, but they were stricken with horror as well. Except Selena looked more sad than horrified. She'd expected something like this. And Raj must have guessed as well. \n\n\"We did this,\" she said slowly, the bile rising in her throat. \"We started a war. We wanted to point them at the cartels, and we succeeded.\"\n\nThe words repeated in her head.  We did this. WE DID THIS.  Suddenly she couldn't breathe. Javier put his arm around her, and she shoved him away. He was the one who'd wanted this, he and Selena. But it was really her fault. She should have understood what all of them obviously had. She was the naive one. \n\nBefore she knew what she was doing, she was running out the door. Running to get away from all of them, from what they'd done and what she'd done. Javier came out the door, but he let her go. And so she kept running, farther and farther, into the dark woods. And she almost wanted to laugh bitterly, because finally the Mexican was ignoring them. They'd gotten everything they wanted. She didn't even need to protect the others now.\n\nBut she kept hiding them, anyway. Because they were still her family.\n\n* * *\n\nJavier pounded in the next nail, and this time he mostly missed, whacking his thumb.\n\n\"Fucking shit!\" he yelled, throwing the hammer off to the side.\n\nNicola retrieved it. \"That's my line, Javier.\"\n\nHe shook his head and grabbed the hammer back from her, getting the nail in properly. But now his thumb throbbed, and the blissful half hour of forgetting had evaporated.\n\nNicola took his hand, prying his fingers off the hammer. He didn't want to go wherever she was dragging him, but it was just down to the bench. Still, the last thing he needed was her pity.\n\n\"I just realized something,\" he said. \"I haven't told Mam\u00e1 I swam across the border. I don't think she would find it that funny.\"\n\nNicola snorted. \"It is kind of funny, I suppose.\"\n\n\"I haven't talked to her at all,\" he said. \"She even left a message on the phone here. In the end Kat had to tell her I was still alive, and just really upset. Kat had to tell my Mam\u00e1 that, because I'm too chickenshit.\"\n\n\"No,\" Nicola said. \"I think you're as upset as I've ever seen you. Javier, are your relatives all right, the ones in Mexico? I've been too chickenshit to ask.\"\n\nJavier nodded. Probably they were fine. His mother's cousins, people he didn't know too well. He'd visited his father's family too, when he was little, before his father had walked out on them. Mexico was huge. All the relatives he'd met were in Sonora, and he didn't think any were too close to the big crime areas. There hadn't been any strikes within two hundred miles of them.\n\nBut who knew what would happen? The bombardment had already been so much more than anyone expected. Hundreds of missions, in an immense initial barrage, and then it hadn't stopped. Today the first ground troops had entered the outskirts of Culiac\u00e1n. It was hard to believe it had only been five days. The US and Britain were at war with Mexico, though even the Mexican government claimed otherwise, that they were fully cooperating. What else could they say, anyway? It was a disaster, and he was so selfish that all he could think about was how Esther would never forgive him, or herself.\n\n\"She still loves you,\" Nicola said, reading him depressingly easily. He shook his head, because of course he knew that. That's why it all hurt so much. \n\nFinally Nicola kissed him on the top of the head and stood up.\n\n\"Sorry, Javier. I've got to practice. I promised myself I'd only take long enough to recover. You think you can work on the stairs without throwing the hammer too many times?\"\n\nHe nodded, and Nicola fled to her own refuge, the way they all were doing nowadays. So he walked back to the porch, picked up the hammer, and tried to keep going. Bargaining with his own mind to forget, if only for a few minutes. A few seconds.\n\n* * *\n\nEsther floated in otherspace, high in the atmosphere, feeling stationary despite the air rushing past. Up here, there were many fewer rippling connections than she was used to. The air was tenuous, and it was harder for events on the ground to propagate to this region. That meant the connections to her own senses were also weak, and this place felt very far away. Similarly, the vacuum of space above her head was barely farther than Reno, in physical distance, but it felt unbelievably distant in otherspace. Physical location and motion were just more variables in the abstract structure of otherspace. Moving her own center of perception at high speed was not particularly harder than staying still, if she thought about it properly.\n\nEsther floated in otherspace, and an American bomber floated beside her. The ground rushed underneath her, and she floated, waiting for the bays to open and death to rain down from the sky.\n\nThere were better ways to go about this. She should be searching for where they were choosing targets, or trying to eavesdrop somehow on their radio communications, or decrypt computer messages. The best way of all would be to go back in time and never have helped start this war. But she'd found something she could do. She'd already done it, over and over, though it would never be enough to pay for her mistakes. \n\nThe relevant mechanism twitched, and she performed the calculation faster than ever, adjusting for wind, elevation, and speed. And then her mind simply jumped, leaving her staring at a ramshackle set of buildings at the edge of a residential neighborhood. She tuned her senses to the infrared frequency she'd learned, and finally found the invisible spot of the targeting laser. The plane was too high and moving too fast for the people on the ground to hear yet. They couldn't know that many of them would be dead in under a minute.\n\nMaybe there were people down there who had done some bad things. She didn't want them dead either. But she had to choose somehow. No one directly under the bomb. She'd made that mistake the first time, and there just wasn't enough time. \n\nShe stretched her senses, and made her terrible decision: two parents, two children, on the ground floor, in the high danger zone. She gathered them together in her mind and pulled, as hard as she could, her body going rigid with the effort. Uncertainly, they all stood up from the table, shuffling towards the door. And so she pulled even harder, until finally the parents grabbed the children and fled out the door, towards Esther. Away from the bomb. They ran, and they didn't even look back when the explosion happened, flattening their house. Killing dozens that she couldn't save. \n\nAbruptly Esther fell out of otherspace, crying the way she usually did. But she felt a fevered kind of energy. She'd been even faster this time, and she could start over again, in just a minute or two. Maybe she could manage two groups next time. A small part of her understood that she was training herself, pushing her abilities far beyond what she thought she was capable of. Becoming more efficient, as she would need to be for what was coming.\n\nWhen her strength failed, she would fall back to cautious listening again. Searching out the Mexican, trying to understand the limits of his abilities, the way that his mind worked. The way she might fight him when she had to.\n\nBut first she had more children to save, playing God in the midst of war. She was more arrogant than Diana could ever imagine, but nothing else mattered. These fevered interludes were the only times she was alive.\n\n* * *\n\nJavier finished preparing dinner, and soon Mark and Selena returned from the hide-and-seek game they spent hours playing every day. A game, but a deadly serious one. Mark had the better senses, but Selena was still faster and better at hiding. Of all of them, he thought those two had become most content with their daily routine. But it was relative.\n\nNicola joined them shortly, and they all sat down at the table. Then they waited, pointedly not looking at Javier.\n\n\"You know she's not coming,\" Javier said. \"I'll take her food later.\"\n\nNicola sighed and started eating. Mark looked towards the back of the Shack, where Esther lay on her bed. But probably he didn't see anything. Nicola said Esther was still shielding all of them carefully, however far gone she seemed, and her personal concealment was better than ever.\n\n\"She needs to exercise,\" Mark said. \"Her mind is only as strong as her body can support. She needs to balance her routine.\"\n\nJavier nodded. \"I'll try to convince her of that, the next time she pays me the slightest fucking attention.\"\n\nThere was a strained silence. Finally Nicola put down her fork.\n\n\"We've been letting you try to take care of Esther alone, and that's not fair. Just because we all feel like shit doesn't mean we're helpless.\"\n\n\"I've tried logic,\" Javier said miserably. \"I've tried begging her. I tried dragging her off the bed, and tickling her, and touching her the way she likes. She knows I'm there, and she doesn't get angry at me. But she keeps her own schedule, and never says anything to me.\"\n\nNicola rubbed her forehead. \"I don't even have a clue what it is she's doing. Practicing too hard, I suppose. Like us.\"\n\n\"I think she's saving people,\" Javier said. \"I think she's finding people in danger in the war, and saving their lives. Last night I heard her mumbling more clearly, and I finally realized what she's been saying: numbers. Ninety-six people she'd saved, the last I heard.\"\n\nSelena inhaled sharply. \"That's too big a task for anyone, even her. She'll go insane.\"\n\n\"I think she's most of the way there,\" Javier said.\n\nNicola put her hand on his. \"OK. I'm coming with you now. And we're going to rouse her somehow.\"\n\nJavier nodded unhappily, and the two of them walked in to Javier's room, with Selena and Mark trailing behind. Esther lay on the bed, naked from the waist up, eyes closed but not asleep, her muscles twitching slightly. \n\n\"Esther?\" Nicola said loudly. \"Esther, we're all worried about you. Don't you remember what happened last summer? Staying in your head too much puts you in danger. Take a break and come eat with us.\"\n\nEsther didn't reply, and Nicola sighed. She pulled off her shirt and got on the bed, resting her weight on Esther, breast on breast. Trying to share senses. But it was no good.\n\n\"I can't do this if she doesn't want to join,\" Nicola said. \"Probably just as well. It feels wrong even trying. Javier, let's just carry her down to dinner.\"\n\nHe nodded and moved to get her legs.\n\n\"No,\" Esther said.\n\nShe hadn't opened her eyes.\n\n\"Esther, you need something different for a while,\" said Javier. \"I'm sorry, but I think we have to.\"\n\nNicola nodded, and Javier reached to grab her legs. But he didn't get there. His muscles stopped working, and he couldn't move. Nicola was equally frozen.\n\n\"Esther!\" Selena yelled. \"Stop that, Esther. You're not yourself.\"\n\nJavier could move again, but he was terrified. This wasn't Esther. She'd never do something like that unless she had to save someone's life. But then again, that's exactly what she thought she was doing. \n\nNicola looked just as shocked. He took her arm and led her back to the kitchen.\n\n\"Well, that was fucking humbling,\" Nicola said, putting her shirt back on and sitting shakily.\n\n\"We're not going to get through to her,\" Javier said. \"She sees us, and it just reminds her that we all started this war.\"\n\n\"We didn't, though,\" said Selena. \"We've gone over this. It was going to happen. At most we sped up the timetable, and our intelligence will help get it over with quicker.\"\n\n\"You know Esther will never see it that way,\" said Javier. \"She needs people who can't possibly be blamed for what we did in Mexico, and something else to occupy her. I'm going to get Raj and Jacob up here, for as long as they can stand it.\"\n\n* * *\n\nThe bomber was almost comforting. Its mechanics were familiar, and the machine was just a machine. Even those aboard thought they were doing something necessary. Esther would never harm them. Taking a life to save lives was a line she would never cross. Or so she told herself. But it wasn't so simple. In that horrible fight, when she'd finally managed to freeze Castillo, deep down she'd known what would have to happen. She hadn't been as strong then, and she couldn't have held him more than a few seconds. She'd killed Castillo, as much as Javier or Selena had. \n\n\"So circumstances do matter, then,\" Father said, resuming the lapsed discussion.\n\nHe floated alongside her, seeming as real as anything in this abstract place. \n\n\"Do you think souls are here, in otherspace?\" Esther asked. \"Does this place contain Heaven as well as everything else? Could it really be you I'm talking to?\"\n\nFather just smiled and didn't answer. Not so different from his way when she was younger, after she'd asked him a theologically hard question. He wasn't like Mother, who usually had a decisive if unsatisfying answer. Father would wait for her to think it over, and sometimes ask her a question in return.\n\n\"Suppose this place contains everything in all of God's domains,\" Father said after a while. \"As you learn its secrets, you could be learning the mind of God. Is that what you're looking for? Someone to help you make these awful decisions you've set before yourself? Or to make them for you?\"",
        "Esther thought about that. But she had to focus on the bomber again. It was her great failing: too much theory, not enough practice. She was tired and hungry, which meant that soon she would have to attend to her body, and go to sleep. Raj was here with her, keeping her company the way he did for a few hours every day. Mostly he talked mathematics, thinking out loud. Sometimes he'd ask her a question, and a corner of her mind had been turning over the ideas he was presenting her. A brilliant, different way to look at a problem they'd been struggling with for a month or more. In truth, Raj and Anatoly had been struggling with it on their own. \n\nEsther was distracted enough that she almost missed her chance. But she caught it, and this time she saved two different groups again. Only four people, though. And two of them might have survived anyway.\n\nRaj had fallen silent when she'd grunted in effort, and she felt him watching her unhappily. She didn't have much strength left, but she didn't want to do to Raj what she kept doing to Javier: slipping past silently, using the bathroom, eating some food. It wasn't right to do it to Javier, either, but if she talked with Javier she'd probably shatter into a billion pieces.\n\nSo she continued her discussion with Father, who'd waited patiently through all of this. \n\n\"Circumstances may matter,\" said Esther, trying to regroup her thoughts. \"But only to a certain degree. I'm not going to hurt those pilots. I'm not going to tell Myra Jackson where the Mexican is, so she can send a hundred missiles at his compound, or just one big nuclear weapon the way Yau used on Gupta. I have to keep my focus small, so I don't succumb to my own arrogance again. Individuals.\"\n\n\"Even then, maybe it's not as simple as you think, my little shining star.\"\n\nFather was pushing her, directing her attention to something she'd ignored, a detail that her subconscious was screaming about. And when she found it, her blood chilled. It was a message, crafted with exquisite precision.\n\n Your motivations are understandable, but you are being foolish. Until now you have hidden yourself impeccably, but there is a pattern to what you are doing in Mexico. If I could find it, others eventually will as well. Hide yourself, young one, and learn to be more subtle if you must act. \n\nThe message glimmered in a tight ball within otherspace. It had no voice, no clues about its origin, and it was connected to nothing anymore except her. Perhaps she could have traced it, if she'd been quicker. Or perhaps not.\n\nSlowly Esther fell out of otherspace, though it was more an exhausted slide. She heard Raj calling the others, and then her teacher's hand was on her forehead. She opened her eyes but she was still slipping sideways, and she couldn't see anything.\n\n\"It will be all right,\" Raj said, somewhere in the distance. \"Tomorrow, I would be so grateful if you and I could talk of mathematics. I think there is something beautiful waiting, but I need you to help me see, Esther. I think we both need that more than anything right now.\"\n\n* * *\n\n\"Maybe it was Ndaki, in Cameroon,\" said Javier. \"Tanaka didn't remember much about him.\"\n\n\"Or someone else entirely,\" said Selena. \"But you're sure the Mexican didn't feel what you were doing?\"\n\nEsther rubbed her head. She didn't want to think about this. She wanted to get back to mathematics with Raj. It was her distraction from all her mistakes, all the wrong she'd done. But then, Father had told her gently not to think like that. She had to trust him, even if the voice had been a figment of her imagination.\n\n\"He hasn't changed anything,\" Esther said. \"He's not looking this direction. He's hiding again, but he's busy. I'm pretty sure he's getting personally involved in this war. Can we not talk about him for just one meal?\"\n\nEveryone looked contrite, even Raj, who had nothing to be sorry for. So she went on, just to reassure them.\n\n\"I don't think this new person is necessarily dangerously gifted\u2014I was just foolish. But it's true the message they sent me is nothing like anything I've seen. I'll have to figure out how that works.\"\n\n\"After we finish our discussion,\" Raj said sternly, and she nodded, pulling her chair back and standing up.\n\nThe morning she'd woken up, he'd begun talking to her as though they were back at Stanford, arguing over something in Anatoly's office. He'd given her no chance to think of anything else, and then he'd assigned her work to do on her own. The assignments were difficult and vague, but that was how research always was, on the far edge of human knowledge, where everyone chased ideas that mostly turned into dead ends. Raj was forcing her along, filling her day with mathematics that she loved, and being a stricter taskmaster than she'd ever experienced. There was hardly any time even to feel guilty, and that was the point. These meals were almost the only time she spent doing anything else. Even at bedtime, she'd forced her mind through the research until she fell into an exhausted sleep.\n\nShe loved it. Javier had reminded her so often that she could just devote her life to mathematics, though of course that wasn't realistic. But this pause was necessary. She needed a break from using her abilities the way she had. In any case, there was a secret she hadn't even told Raj: they were groping their way towards a novel connection between topology and geometry, and she was sure it would be vital to her understanding of otherspace. \n\nIn time, anyway; this was difficult work. She smiled as Raj began writing in his quick, neat fashion, his pencil never quite keeping up with his mind. And in the meantime she let a corner of her mind soar into the most abstract parts of otherspace, far from bombs or dangerous people, or anything human at all. Hopefully today her mind would find the connections, because she dimly understood this pause couldn't last forever. She needed to be ready for what came next.\n\n* * *\n\nJavier stroked Esther's arm. As usual, she ignored him, her eyes staring off at the ceiling, working on her mathematics as she did every night, until her mind wouldn't work anymore, and she could collapse into sleep. It depressed Javier to remember that all this was a huge improvement from last week. Thank God for Raj and his tireless efforts to keep her busy. But if she wasn't talking, there was something still seriously wrong. \n\nHe'd gone to Reno on a shopping trip, and then spent the afternoon talking with Jacob and Tomiko about how to handle Esther. He hoped this direct approach would work. \n\nJavier climbed atop her, resting on his forearms and staring right into her eyes. She blinked with irritation, then focused on him briefly.\n\n\"Javier, I know it's not fair, but I've got to keep going, or I'll just fall apart. I'm not ready.\"\n\n\"You don't seem to be getting any more ready.\"\n\nShe frowned. \"What do you want from me, Javier?\"\n\n\"I want you to stop planning how you're going to go after the Mexican,\" he said.\n\nShe started. \"Javier, I'm not\u2014\"\n\nBut Esther didn't finish the sentence, because they never lied to each other. It wasn't like they'd made an agreement or anything, but they couldn't do it. And maybe until now she hadn't really admitted what she was doing.\n\n\"Yes, you are,\" he said. \"Maybe even while you're doing math with Raj, you're thinking how helpful all of it will be for how you understand otherspace. That maybe it's what you need to get an edge over him. Who knows, Esther, maybe it is. But you have to stop thinking that way.\"\n\nEsther turned her head away, eyes reddening.\n\n\"Why, Javier? Why do I have to stop? I had to stop saving those people, and every day I think how many more I could have saved, if only I was stronger and smarter. The Mexican has to be stopped, so this war can be over.\"\n\n\"How's that going to work?\" Javier asked. \"Do you think it'll be like Franklin, where we take out the one guy, and then all the cartels and the corrupt cops and the separatist groups that are springing up will just stop fighting? Is the Mexican controlling all of them the way Franklin was?\"\n\nEsther shook her head in frustration. \"He's in the middle of all of it, though. I know he's making everything worse. And not just in Mexico. Those skirmishes in Pakistan, and Ukraine, I'm sure he's responsible for some of it. I can feel him reaching out, with so much power. He's so dangerous, Javier.\"\n\nJavier sighed. \"Maybe. But it sounds like you don't really know what he's doing. You have to talk to us, and you have to be patient. All of you are getting stronger, figuring new things out about your skills. You have to reserve some energy to help the others.\"\n\n\"I know,\" Esther said miserably. \"I'm being a terrible friend, and even worse to you. But what you're seeing is all the patience I can manage.\"\n\n\"How patient do you think Abuela was?\"\n\nThat brought her up short, just as Jacob had said it would.\n\n\"She was a different person,\" Esther said. \"And she lived through different times. The world wasn't falling apart like this.\"\n\n\"Of course it was,\" Javier said. \"How do you think she felt during the second world war, anyway? Or the first one, or the Civil War for that matter? She lived through all of those disasters, and she probably hated how little she could do. Ask yourself how Abuela would handle the situation right now. She had abilities you still can't manage, and a century and a half more experience than you. What would she be doing?\"\n\nEsther thought about it, and Javier knew he'd gotten through a little.\n\n\"She'd find what she could understand,\" Esther said slowly. \"An area, a group of people. And then she'd protect that carefully, and fiercely. Always wishing she could do more.\"\n\n\"Yes,\" Javier said, kissing her. \"That, exactly. She'd be anguished the way you'll always be. But she must have tried a lot of things in her life, and that was what she settled on. Trying never to use her abilities to harm, just as you try. And keeping her focus on what she could manage, so she didn't make mistakes or go crazy trying to fix the whole world.\"\n\nEsther wrapped her arms around him, pulling his weight on top of her. \"I love you, Javier. And I'm so sorry for what I did to you and Nicola. I should have known something was horribly wrong if I was willing to do that. I scare myself sometimes, Javier. I feel like I'm turning into a monster.\"\n\n\"You never will,\" said Javier, kissing her. \"You'll just make mistakes like all of us, except that you'll beat yourself up about it ten times as hard. Abuela chose the best person she could have. I know she would be so proud of you.\"\n\n* * *\n\n\"Javier talked some sense into me last night,\" Esther said. \"He reminded me that Abuela didn't try to act the way I've been acting. She protected all the Changed she could, in the nearest couple states. She could track a lot more people and places at once than me, and she could sense troubles far sooner, so most of the time she could take very subtle actions.\"\n\n\"She had so much time,\" Mark said. \"You will learn to do all that, I'm sure.\"\n\nEsther nodded. \"Maybe, or maybe my abilities are fundamentally different. In any case, I've been acting rashly. One reason Jacob said Abuela was so cautious was that she was never positive of the consequences of her actions, and her core principle was to avoid harming others with her abilities. I need to focus on something smaller, something I know better. And that's my family. I want to take care of all of you, and I've been doing a horrible job of it. I've been arrogant and impatient, wanting to fix big things in the world, and it hasn't turned out the way I've wanted. And instead of keeping you safe, I've dragged you with me into danger. That's going to stop now. I'm going to be here for all of you, and we're going to figure out how we can all be safe. Everything else can wait. But you're all going to have to help me with this.\"\n\n\"Of course we will,\" Selena said, smiling. \"Esther, I can't tell you how much better this makes me feel. If you like, we can stop talking obsessively about the news every morning. Probably better for all of us.\"\n\n\"No,\" Esther said. \"Better that than me spending hours in otherspace to understand what's happening. We'll talk about events like normal people, and then we'll do our work. The mathematics has been wonderful, Raj, but I shouldn't be spending all day on it. It's probably not the most efficient way to work, anyway.\"\n\nRaj laughed in relief. \"No, Esther, of course it isn't. Your rate of progress has been astonishing, but even your mind would be better served with some variety. My colleagues all think I'm an unhealthy workaholic, and it's still been exhausting to be around you. I think we're getting close to that breakthrough, but the mathematics will always be there. That's one of the best things about it.\"\n\nRaj was right about all that. She took Mark up on his offer to spend the morning out exploring, and she felt a little of something she hadn't for a while: contentment. Mark's steps were quieter and quicker now than she remembered. When she turned her mind to mathematics, she found a different way to approach the problem she'd been struggling with for two days. But it could wait, as Raj said. This was what was important: Mark's joy at being in the woods, his cautious smiles to her, his failed attempts to tell her something she might already understand. She loved Mark, the way she loved all of them. But especially Javier. \n\nShe was physically exhausted when she got back, but she gave Mark a firm hug, and he held her longer than she was used to from him. He'd been worried about her, like all of them. And she shouldn't pretend to herself she was all better overnight. Javier would keep her honest about that. Even now he was talking with Nicola about her, and she refused to eavesdrop, because they were only doing what families did: worrying about each other. It was time for her to worry more about all of them, and to start doing something about it.\n\n* * *\n\nThe war dragged on, and despite all the optimistic speeches, it was clear things weren't going as well as hoped. The bombings decreased in frequency, maybe because the American and British planes had already struck most of the places they'd originally intended. But there were more ground troops than ever, and the situation was confusing to everyone. Esther voiced her opinion that the Mexican wanted it this way.\n\n\"It's like he's doing in Mexico what he helped do around the world,\" she said one morning. \"Those paramilitary forces organizing, the Zapatistas and all the those other separatist movements, all the popular support and the new weapons they suddenly have. It points attention away from him.\"\n\nJavier was inclined to agree. And while Esther kept a careful distance in otherspace from the Mexican's activities, she said he was becoming increasingly bold in his actions. One day she said he was responsible for an incident where two American planes collided, something the news hadn't reported.\n\n\"He did something to one of the pilots,\" Esther said. \"Not like Franklin. Probably more like what he did to Mr. Tanaka, a kind of mental assault. It wasn't exactly subtle, but he had enough control of its effects to cause the crash.\"\n\nThe Mexican was even more dangerous than they'd realized. Thankfully Nicola, Selena, and Mark were making steady progress in their ability to hide from him or anyone else. Selena was becoming so good that Esther said she might one day be better at it than Diana. If she managed that, it would be more than enough to protect herself at a distance from other Changed, unless they approached Esther's sensitivity. And Esther said she was beginning to doubt the Mexican had that skill.\n\nTheir friends were making other advances, too. One afternoon Nicola asked Javier to come out to the rough grassy area with her.\n\n\"I'd like to do something to you,\" she said. \"I have to admit it'll probably be very unpleasant, but I need to see if it works. I'm nearly sure it won't actually damage you.\"\n\nJavier squinted at her. \"Nearly sure?\"\n\n\"Oh, all right, I'm about as sure as I can be. Mark said it shouldn't cause any permanent harm, but it also didn't work very well on him.\"\n\nJavier sighed. \"I guess I'll give it a go. So, do you want me to attack you or something? Because the last time we tried this my shoulder took a couple days to stop hurting.\"\n\nNicola laughed. \"You know I still feel bad about that, especially after the lecture Mark gave me. No, this should be safer. But go ahead and run at me as though you're going to attack me.\"\n\nHe nodded, and then without warning lunged at her.\n\nSuddenly his head was ringing, and he lost his footing. He tried to stand up again, but he felt nauseous, and he only made it to his knees. The dizziness went away after a few seconds, though he still felt nauseous.\n\nNicola was helping him to his feet. He described as best he could what he'd felt.\n\n\"Oh, perfect,\" Nicola said. \"It's just sound. Infrasound mostly, very low frequency vibrations. I heard the military is thinking of using it, so I've been trying to make it work.\"\n\n\"Congratulations,\" Javier said, rubbing his forehead. \"You've got a stun weapon, and I still want to puke. Please don't ask me to be a guinea pig again for, like, and hour at least.\"\n\n\"You're a good sport,\" she said, pulling him into a full-body hug. And suddenly all he could think about was how good she smelled, and how much he wanted to have sex with her. \n\nThe feeling stopped when she pulled away from him. He wondered it was some weird side effect from her abilities. Probably not, though. Javier was just all-around horny today.\n\nMaybe Nicola had noticed, or maybe not. Later that afternoon, after another hour of work on the staircase to the second floor, she looked down at him and smiled.\n\n\"I think it's safe enough,\" she said. \"Want to explore the second floor?\"\n\nNicola had already been up there plenty, during the exhausting efforts to replace the rotted beams near the staircase. She hadn't let anyone else up, aside of course from Selena, whose sleeping spot was in the bedroom at the other corner. But even Selena still used her ladder from outside to get there.\n\nHe carefully followed her up, the stairs, heart soaring. After all this work, they could finally start using the house properly.\n\nThe second floor was a mess, full of sawdust and waste from their construction work. The staircase ended at a small open area, and the rest of the floor was taken up by the three bedrooms. The ceilings were sloped under the eaves, and none of rooms was very large. But he knew they would be wonderful after some work. Right now Selena's was the only one that was clean, though it was devoid of furniture, as Selena liked sleeping on the floor. \n\n\"It's marvelous,\" Javier said. \"Cozy, like Esther's farmhouse.\"\n\n\"Yeah,\" said Nicola. \"I think we should invite Kat and Grace back. I know Esther wants to see them, and I won't be a bitch about it. I like them a lot, truthfully. It was just so crammed in here.\"\n\n\"I'd like that, too,\" said Javier.\n\nNicola smiled and wiped her brow, grimacing at the dirt streak. \n\n\"Ugh, I'm filthy. Time for a nice long shower. Want to join?\"\n\nHe blinked, taking a second to process it. It hadn't come out quite as casually as she'd probably wanted.\n\n\"Christ, yes,\" he said, and she laughed.\n\nEsther and Mark were off in the woods somewhere. Javier tried to tell himself that wasn't the reason they were doing this, but he was pretty sure it wouldn't have happened otherwise. When Nicola got the water adjusted right, she undressed quickly, stepping into the big tub and soaping up.\n\nThe moment Javier got into the tub with her, she gave up all pretense, turning to lean against him and slipping her fingers into her bush. Javier kissed her on the neck, feeling the weight of her perfect tits in his hands, letting his growing erection slide along the soapy crack of her ass. Nicola was shaking against him, and he held her tighter, tasting the sweat behind her ears, the smell of her hair, just like in Oregon\u2014",
        "Suddenly Nicola gasped and grunted, body rigid. \"Fuck, fuck, fuck ...\" she cursed, the swears fading away until she finally collapsed onto her knees. He ran his hands through her wet hair a few times, and after a minute she turned around, sighing and taking hold of his dick.\n\n\"I didn't want it to be so fast,\" she admitted, pulling on him with a firm, sure grip that sent tingles down to his toes. It wasn't that her hands were big. It was just that Esther's were so small.\n\n\"Do you want more?\" Javier asked. \"In a while, anyway?\"\n\n\"Always so polite,\" said Nicola, smiling and licking the tip of his dick playfully. \"You're like Mark, that way. Christ, Javier, of course I want more. Give me five minutes with this big dick. And try not to come. As though I'm one to talk.\"\n\nShe engulfed him with her mouth, humming softly, and suddenly Javier was in a different world, of vibration, sound, harmony. The water sluiced down between them and there was none of the desperate terror they'd both felt in Oregon. Just a little guilt, but that was easily ignored.\n\nHe lasted about two minutes before opening his mouth to moan, surprising both of them as he blasted his load a half-second later. Nicola's hum dispersed into a satisfied chuckle, and she gripped his ass tightly, pulling his still-stiff cock further into her mouth, swallowing with difficulty the last few bursts of cum.\n\nFinally he pulled out of her mouth, kneeling heavily in front of her. She had a glob of semen on the corner of her mouth, and even as he pointed at it she got it with her tongue. Something about her expression, the whole situation, caused him to start giggling.\n\nShe joined him, hugging him tightly even as they both laughed. Javier wasn't even sure why it was funny. It was more like relief, maybe. And soon Nicola stopped laughing, simply sighing and stroking his back.\n\n\"You know, Javier, in Oregon I didn't just want to fuck you because you were there,\" she said. \"But that was an easier story. The truth is you're hot and you're sweet and loving, and you're not Mark. I guess that makes this something novel to fuck up.\" \n\n\"I don't feel fucked up,\" Javier said. \"And you're not Esther, but that's OK right now. God knows she keeps telling me to have sex with you.\"\n\n\"I guess it's our duty.\"\n\nJavier looked at her, and saw the rawness of her pain.\n\n\"I'm not Mark,\" Javier said. \"I could never love you the way he does. You know that's why you're both hurting so much, right?\"\n\n\"Javier, I'm not an idiot,\" said Nicola, softening it by stroking his shoulder. \"But there's a reason I came so fast, and it has everything to do with how fucking frustrated I am right now.\"\n\nJavier nodded, and he kissed her. She seemed almost surprised, kissing him back gently, and he brushed his fingers up the back of her thigh. Again, further in, and he knew he'd found her freckles when she gripped him tightly. Up, so slowly, tracing the line from just above the knee, along the inside of her thigh, then around to the solid muscle of her ass. He did it again, letting his fingers tickle the edges of her bush, finding her ass crack\u2014but no, she didn't like that the way Esther did. He quickly adjusted, catching the edge of the freckles on her ass. She spread her legs wider, and he brought the other hand between her legs, finding her pussy, just cupping it gently for the moment. His dick was rock hard again, trapped against her stomach, nearly touching her breast. She was pressing against his hand, and finally he relented and slipped a finger inside her.\n\nShe was slippery, wet from the tub but dripping with her own juices. And unbelievably tight. Tighter than he ever expected, or maybe she just had really strong muscles, the ones that could clamp down. For a while he just left his index finger there, feeling her slowly squeeze and release, her body melting against him, her mouth humming into his, something too soft for him to make out entirely.\n\n You're going to press your beautiful cock inside me,  Nicola hummed, her private voice speaking in his head. \n\nJavier groaned involuntarily.\n\n But first, I have something for you. \n\nShe shoved him back, not very gently, and while he regained his balance she sat back, settling her butt on the edge of the tub, where she could rest her back against the wall nearby. She closed her hands and held out her palm: Wait. \n\nA strange tingling enveloped him, and it took a moment to realize it was just a side effect. Nicola was humming much more loudly, but in frequencies mostly beyond his hearing. And the water was dancing.\n\nOvals, squares, complex patterns, standing waves of all sorts. But she was just testing, because a moment later the droplets began to splash out of the tub, the vapor rising thickly around her, spiraling, to envelop her body in a fog.\n\nThere was no sunlight shining behind her. No rainbow, no moment of great drama. But it was beautiful, and she'd done it for him, because she needed to practice, and because Mark wasn't ready to truly look at her this way. But Javier was.\n\n\"You're beautiful,\" he said. He'd moved forward, entranced, and suddenly all he could see was her perfect, ordinary pussy, her breasts waiting for his lips, her thighs opened for him. He splashed forward on his knees, got an arm around her back. She was still humming, but she opened her eyes. And he pressed his dick against her entrance.\n\n\"Oh, God,\" she said, shuddering, pushing back against him, and then he was sliding inside, her pussy gripping him harder than any he could remember. Or was she really just so small inside? She'd suggested that once, to Esther. And now he hit something before getting quite all the way inside.\n\n\"Fucking hell,\" she gasped. \"You're so huge, Javier. Feels good. You're not going to hurt me that way.\"\n\nDubiously, Javier pulled out a little, and this time she pushed against him, grunting in satisfaction when he bumped her again. Her cervix? He'd never truly known if she really was like an ordinary woman. She couldn't have kids, that was all he really knew. He didn't think most women liked being bumped like this, but she obviously did.\n\nJust like Esther. The thought interrupted, just as Nicola grabbed him and yanked him harder against her, until he was finally pretty much all the way in.\n\n\"God, you're perfect,\" she moaned. \"So fucking big. Filling me up.\"\n\nBut he wasn't that big. Average. It was distracting to have her talk this way, and less flattering than he expected. Nicola sighed, and he kissed her ordinary, pretty nipple. Even that had a strange, familiar and unfamiliar taste. Not so much like Esther.\n\n\"You don't like me talking this way, do you?\" Nicola said.\n\nHe let her nipple pop out of his mouth. It was hard to concentrate, with her still rocking on his dick.\n\n\"Feels amazing,\" he said. \"It's just, you know, I'm not really that big.\"\n\nNicola squinted at him, stroking his jaw. \"I don't care. Feels that way. You're perfect, anyway.\"\n\nShe grunted, her pussy squeezing him hard enough to make him gasp.\n\n\"You really like it when I bottom out like that?\" he asked.\n\nNicola nodded. \"Everything inside is so sensitive,\" she said. \"Like Esther.\"\n\nAs soon as she said it, she looked embarrassed. And then she nodded comprehension.\n\n\"I'm rubbing it in,\" she said. \"You're worried you'll never be able to do exactly this with Esther.\"\n\nHe was, of course. It was Esther's old worry, the one he told her didn't matter, that they had plenty of other things to do. Except he really, really liked this feeling. And Esther knew it. For all he knew, she was listening to this even now. He shook his head. She respected his privacy as much as she could, and he trusted her.\n\n\"Of course I'm worried,\" he said. He couldn't believe they were having this conversation even as they fucked. It was somehow normal with Nicola.\n\n\"So do it with me,\" said Nicola. \"I'm not going anywhere. And there are things she can do with me or Mark that she can't do with you. Maybe we're all stuck together in a complicated way. And maybe Esther will keep changing, and one day we'll laugh about all this. Javier, I'll shut up, but for God's sake, just let me fuck you right now.\"\n\nAnd suddenly he was falling on his back, his ass splashing in lukewarm water and crashing painfully on the porcelain tub bottom. Their legs were tangled and his arms\u2014Nicola had him pinned down. He struggled, as he knew she wanted, and she had no troubled keeping him down, though he managed to whack her accidentally with a knee.\n\nShe laughed, and suddenly she was on top of him, stretching her warm tunnel around his shaft, riding him even as he bucked and tried to throw her. A mechanical bull. And her disconnected dirty mumblings did make him feel like kind of like a stud, no matter what he'd said before.\n\nShe couldn't fuck Mark this way, not without him holding back. And he'd never made love to anyone so strong as Nicola, not even when they'd been in Oregon. She'd gotten stronger, and she was in control. The only thing Javier could do was try to hold off his orgasm until she got her own satisfaction.\n\nIt was a near thing. But when she finally closed her eyes and sang out her orgasm, he let the sound fill him, carrying his seed into her with wave after wave. He couldn't even rest there, because she was still riding him, still letting out the anguish and joy in her voice even as her own orgasm subsided. Finally she collapsed onto him, leaving a breast in a very appealing spot.\n\nAfter a minute of work with his tongue, she shuddered and pulled her breast away.\n\n\"Phew, that's a little much for right now,\" she said, propping up and looking at him seriously. \"What a ride, though. You think Esther eavesdropped on all that?\"\n\nJavier thought about it. \"Probably a little,\" he admitted, trying not to laugh.\n\n\"Oh, thank God,\" said Nicola, starting to laugh. \"Esther, if you're listening to this, for God's sake let me fuck you again sometime. No offense at all to Javier. He's exactly what I needed.\"\n\n\"Maybe the two of them are fucking, out there somewhere. I hope so.\" Javier was surprised to realize he meant it.\n\nNicola laughed and nodded easily.\n\n Not quite,  said Esther's voice in his mind.  But we enjoyed ourselves a lot. I love you, Javier. And tell Nicola\u2014oh, never mind.\n\nJavier opened his mouth to repeat this to Nicola, but Nicola was suddenly looking past him, her mouth open.\n\n\"She's never talked to me from so far,\" Nicola said finally. \"She's getting so strong.\"\n\n\"Anything good?\" Javier asked.\n\nNicola sighed. \"'Sometime,' she told me. I guess I can live with that.\"\n\n* * *\n\nIt was six weeks into the war. America and Great Britain's isolation from other world powers had only grown in the interim, but the greatest hostility came from Russia. There were even smuggled Russian military weapons showing up in the hands of the Zapatistas, and talk of a naval blockade. \n\nPerhaps Russia's stance on the war was some attempt to gain diplomatic high ground as it became increasingly aggressive against Ukraine. Perhaps it was the new men moving into leadership roles, with their connections to the oligarchs, that new class who had profited so much after the fall of the Soviet Union. Javier, Esther, and the others had their own suspicions. But the news on the radio one morning still shocked everyone.\n\n The British Prime minister's death from poison has been confirmed this morning. There is a nationwide manhunt for the killer, identified by anonymous sources as a diplomat attached to the Russian embassy, and a suspected Russian SVR agent ... \n\n\"The SVR,\" Grace said dully. \"That's the new KGB, right?\"\n\nRaj nodded wordlessly.\n\n\"I knew something had happened,\" Esther said miserably. \"I didn't want to find out.\"\n\n\"Remember how exhausted you get when you try to use otherspace to keep up with world events,\" said Javier. \"We agreed it was better that you get your news all at once with the rest of us.\"\n\nEsther nodded, gripping his hand. \"It was the Mexican, I think. He's been reaching into Russia more and more frequently. Changing people's behavior, I think. It feels desperate.\"\n\n\"You promised you were going to monitor him less,\" Nicola said unhappily.\n\nEsther frowned. \"I did promise that, and I think I've been following through. But what he's doing is like a tremendous shout in otherspace. It's probably as controlled as he can manage, but surely I'm not the only one able to hear it. That's why it feels so desperate.\"\n\n\"And allied forces are still avoiding his lair, wherever it is?\"\n\nJavier glanced sharply at Selena. It was a sore point for the older woman that Esther refused to tell them exactly where the Mexican was, but Javier accepted it. Esther was protecting them all by doing so, and making her own particular stance clear: she wouldn't be used again by the military. \n\n\"Yes,\" Esther sighed. \"I know some of you think it would save lives if we told Myra Jackson where he is, but I get the feeling it wouldn't even matter if we did. The Mexican must have allies at a very high level even within our government, and I think it's more than that. Despite all these blunt attacks, he continues to hide that place with tremendous skill and subtlety, much more than Amelia did for the farm we raided. In otherspace the connections from his deception extend far beyond the immediate area, and I think even beyond Mexico. Of course I imagine spy satellites can see it, but he may be capable of encouraging others to downplay the importance of that place, even from a great distance.\"\n\n\"All right,\" Javier said. \"Time's up. No more talking about the war for today.\"\n\nThe others nodded acceptance. He'd insisted they limit themselves this way so they didn't get sucked into world events that Esther needed to stay out of. Selena had privately told him a couple days ago that she thought America would get tired of the war eventually and declare victory. Then the Mexican would stop behaving so desperately. Everything would slide back into the usual shitty state of affairs, rather than whatever was happening now.\n\nJavier didn't exactly mourn the loss of the British prime minister, who seemed a complete asshole on every dimension. He would never say that to Esther, of course, and even he knew that wasn't the right way to look at it. The person who replaced him would be from his party, and might well use the assassination as proof they needed even more repressive policies. More raids, political arrests. Worse, the whole business of implicating the Russians sounded more like something Yau would have done. Javier didn't trust it at all.\n\nThat afternoon he trained with Mark and Nicola, as he usually did. For exercise, Nicola much preferred sparring to running, and she was getting better. Javier supposed he was as well, though he felt pretty foolish trying to grapple with Mark. It still wasn't clear if Mark would ever regain his full speed and strength, but in some ways it hardly mattered, given his new martial arts expertise. Esther had asked him a few days ago if he could beat Diana now, and he'd nodded with only a little pause. If kicking Javier's ass repeatedly helped Mark practice, Javier could accept that. And he minded even less when Nicola beat him up, now that she could do that without dislocating his shoulder.\n\nThat night after dinner they all crowded in the living room around the wood stove, as usual. Talking, or just being together. Raj and Esther were conversing excitedly tonight, and he gathered they were finally putting the pieces together on the project they'd been working so long on. Raj was telling her he'd go back out to visit Anatoly soon, and maybe the three of them could get together sometime. It was something of a fantasy, for better times. \n\nJavier and Esther made love that night, and when they were finally through, they heard some faint sounds from across the hall.\n\n\"They're doing OK,\" Esther said, kissing him. \"Stop worrying about them.\"\n\n\"I wasn't,\" Javier said, running his finger around her nipple until she gasped lightly. \"I was thinking how much Nicola misses sex with you.\"\n\nEsther didn't respond directly to that, but she took Javier's cock in her mouth, and after a while it was obvious they weren't done with sex at all. It was late when they finally slept, but Javier wasn't about to complain.\n\n* * *\n\n\"It's like the height of the cold war,\" Raj said angrily. \"America and Russia poking at each other, posturing, seeing who blinks first. Or letting themselves be manipulated into doing it. Flying bombers over each other's ships, and testing the edge of each other's airspace? We're behaving like children, except we have weapons that can destroy us all. Haven't we learned anything from India and Pakistan? Though now it's looking as though even India and Pakistan haven't learned.\"\n\nHe walked right out the door, slamming it behind him.\n\nIt was a rare loss of temper for Raj. That morning they'd read news that Russia was blaming American agents for an unnamed malady affecting a number of Russia's top political staff. Russia hadn't exactly denied the allegations about the poisoning of the prime minister, but they'd claimed the suspect in the assassinations was a rogue who hadn't been connected to the Kremlin for years. And now America, Britain, and Russia were all on highest alert. \n\n\"I think the Mexican is responsible for the sickness Russia is complaining about,\" said Esther, looking out towards Raj with concern. \"I'm starting to think his main way of attacking people at great distance is to rip away memories, the way he did with Mr. Tanaka. Done carefully, I suppose it could provoke a behavior you wanted. But the side effects would probably look like dementia.\"\n\n\"That's just great,\" Nicola said. \"So maybe he's not Franklin, but he could do a hell of a lot of damage that way.\"\n\nJavier declared politics hour over, and Esther went out to find Raj, who was sitting on the bench.\n\n\"I'm so sorry,\" he said. \"I should never have lost my temper.\"\n\n\"You're upset,\" said Esther. \"And you have every right to be.\"\n\n\"I'm terrified. I think it's time I visited Anatoly. He's used to my occasional political rants, and after all, he lived through the worst of the Cold War, from an even more miserable perspective. More importantly, I want to see what he makes of our research. I wish I could keep my focus entirely on that. I promise I'll be back, of course.\"\n\n\"We'll miss you,\" said Esther. \"Take care.\"\n\n* * *\n\nJavier tried to keep his eyes on Selena's ass. Not a very polite thing to do, but he was exhausted from the run, and he'd take motivation wherever he could find it. It was starting to rain, which bothered Mark as little as always. For her part, Selena had admitted she actually liked being out in the bad weather. Probably attuned her to nature or some hippie bullshit like that. The thought was almost enough to make him smile despite the mud clinging to his shoes.\n\nIt was just as Selena hopped gracefully over a log that he felt the prearranged emergency signal from Esther: Come back, as fast as possible. Danger.\n\nSelena and Mark had already turned, running back towards him. He could never keep up with them.\n\n\"I can find my way back,\" he wheezed. \"Go, quickly.\"\n\nMark kept pace with him briefly.\n\n\"Javier, I sense no physical danger to her,\" he said. \"She's in the house with Kat and Grace, and Nicola will join them shortly.\"\n\nHe nodded thanks, and silently cursed his limitations while Mark raced quickly ahead to catch Selena.\n\nNo physical danger. Could it be an attack from the Mexican? If so, it was that much more important that the other two arrive quickly, so Esther could best shield them.\n\nWhen Javier staggered inside some minutes later, all the others were there, gathered in the kitchen and living room. Everyone looked safe enough, but the radio was on, some kind of recorded message playing. Javier's stomach dropped, remembering the night of Black Christmas.",
        "Kat was sitting at the computer, so the power hadn't gone out. But Esther had her eyes closed, obviously deep in meditation.\n\nSelena spoke first. \"Javier, Esther sensed a distant explosion. She's trying to find out more, but she's terrified it was a nuclear blast. Nicola said the emergency alert came on just before Mark got here.\"\n\nIt was the same alert as Black Christmas: shelter in place. Ominously vague.\n\n\"The security types on Usenet think it's a false alarm, or possibly a test that triggered the warning system,\" said Kat. \"No reports of power outages. No reports of damage.\"\n\nEsther opened her eyes a minute later.\n\n\"It was over the empty ocean,\" she said. \"But it was immense, for me to have felt it directly. I eavesdropped on that base near Marysville, where they do surveillance, and if I understand correctly, it was a Russian test, and their government warned us immediately beforehand.\"\n\n\"An atmospheric test,\" Selena said slowly. \"Those are banned. No one has done that for decades.\"\n\n\"But still, just a test,\" Javier said shakily. He leaned over Kat's shoulder as she refreshed her news feed and web browser.\n\n\"Didn't they ban those tests because of fallout?\" Grace asked. \"Where was it, exactly?\"\n\n\"Nothing nearby,\" Esther said. \"Fifteen hundred miles southeast of Hawaii.\"\n\nJavier tried to remember his geography while Kat hurried to get a map up on the computer. Esther was right, of course. There weren't even any islands near there. A safe enough place, as far as exploding nuclear weapons went. Though he didn't remember how far the fallout could travel.\n\n\"I feel like I'm way too calm,\" he said shakily. \"We should be freaking out, shouldn't we? Like we did in December. Shouldn't we be worrying about more bombs, finding somewhere to hide?\"\n\n\"Where else would we go?\" Kat asked. \"And wouldn't the warning have come earlier, if the military actually feared a strike? They notified us only after the blast. Are we worried about some kind of delayed response? A stupid mistake, like, you know, Dr. Strangelove?\"\n\nGrace joined Javier behind Kat, and she put her hand nervously on her lover's shoulder. \"If they thought we were being attacked, they would have launched all of them. Overwhelming retaliation. They have to decide in minutes. It might have been over before we ever found out.\"\n\n\"I was in college during the Cuban Missile crisis,\" Selena said distantly. \n\nJavier jerked, staring at her. She never talked about her past, from before she went into the business world. And if she'd been in college at that time, it meant she was\u2014in her fifties. Even older than he'd guessed.\n\n\"Was it like this?\" Nicola asked. \"You didn't know what the fuck you were supposed to be terrified of?\"\n\n\"Something like that,\" she said. \"We have a lot more sources of information today. But it went on for two weeks, and the Cold War hung over everything anyway. You can't go on living every day fully believing the world is about to end. At the height of the crisis I went out to a bar, all on my own, and I was surrounded by all those other people all on their own. It was ludicrous, because maybe the nuclear bombs would fall, and there was no one there except strangers. But it also made perfect sense.\"\n\n\"But you're with family this time,\" said Esther.\n\nSelena nodded tightly and abruptly sat down against the wall. \n\nA while later the Internet finally caught up with Esther, who had lapsed into a meditation again.\n\n\"An atmospheric nuclear test,\" Kat said. \"An ICBM, apparently.\"\n\n\"They tested an ICBM?\" Selena asked incredulously. \"That means they flew it practically right over Hawaii.\"\n\n\"The security geeks are going nuts,\" said Kat. \"Apparently the only missile the Russians have that reaches that far is a massive one. It might have carried a twenty megaton warhead. That's huge, isn't it?\"\n\nJavier stared at her. \"The one in India was three times Hiroshima. Twenty megatons would be a thousand Hiroshimas.\"\n\n\"Kat,\" Grace said, her strained. \"Can you come and just sit with me?\"\n\n\"We need to know,\" Kat said distractedly. \"This is the fastest way. Maybe there will be another strike, and maybe\u2014\"\n\nGrace was shaking her head, and Javier quickly interrupted.\n\n\"Kat, go with Grace. I'll tell you if there's anything important.\"\n\nHe pulled on her arm, and she finally looked up, seeing Grace's distress. \n\nAfter he took over the computer, Javier looked back occasionally, hoping Esther would rouse. Grace and Kat held each other on the couch, and Nicola had settled on the floor in front of Mark's chair, an arm around his legs. He was stroking her hair.\n\nTwenty minutes later, the radio began to report the same things he'd already seen on the Internet. An immense explosion, not so different from the one in the Bikini Islands forty years before. Castle Bravo. The fallout from that blast had been a huge problem for the islanders, and even an unlucky Japanese fishing boat some distance away. But this Russian test had been much more distant from any people. The fallout danger would be minimal. And there were no indications of any immediate response, aside from an official statement of outrage by the Americans.\n\nHe got up from the computer and walked over to Esther, who was still somewhere in otherspace.\n\n\"Esther, sweetie, it's time to come back. I think we need to all be together right now.\"\n\nAnd to his happy surprise, she did come back in just a few seconds.\n\n\"I don't know what's happening,\" Esther said. \"I'm trying to listen to the military commanders, or politicians, or someone, but everyone seems confused. So many jumbled bits, but maybe it's always like this. I don't know how to judge.\"\n\n\"It's probably always like that,\" said Selena. \"A giant clusterfuck. The government is a big bureaucracy, and the military is the biggest bureaucracy of all. They should never be forced to make quick decisions.\"\n\nJavier shook his head. \"Let's have dinner early and turn up the stove. And then maybe we can tell ghost stories, or pull out those board games Kat keeps trying to get us to play. Something frivolous.\"\n\nTo his surprise, it worked. People got up to do things. Mark had caught a big fish yesterday, using a net rather than attempting it barehanded. Javier checked the computer for more news, but there wasn't really anything solid. But they weren't completely in the dark. It was so much better than Black Christmas. He called Mam\u00e1, and while at times he could barely understand each other over the terrible connection, he was so glad he'd done it.\n\nJavier had forgotten that all of Kat's board games were strategy games, things like Risk, and no one had much interest in that tonight. So after dinner they played cards, and when it got dark they left the lights off, sitting in front of the stove and watching the dancing flames through the glass front.\n\nBut it wasn't really their usual routine. Everyone was gathered closer than usual, squeezed on the couch or sitting in front. Esther slouched back on the couch, with Javier on the floor between her legs, his head resting comfortably on her on lap. When Selena returned from the outhouse, she quietly sat on the floor next to him. So close that her leg touched his, and her shoulder leaned against Esther's leg. It should have been astonishing, but instead it just made sense. Family, all of them.\n\nJavier let his eyes relax, his mind quieting until there was nothing but the swirling embers, the rain drumming on the steel roof, and Nicola's singing.\n\nHe hadn't even noticed when she began. It was so quiet that the rain nearly covered it. A wordless tune, some improvisation as it always was, the few times he'd been privileged to hear her. Long ago she'd told Esther she'd played the clarinet when she was still in school, that she could repeat anything after hearing it once, and that she'd hated it. \n\nThere were overtones in her voice, notes that split and split again into an eerie chorus, and he knew there were frequencies beyond his ear's ability to capture. It all fit beautifully with the dancing flames behind the glass, and he slowly realized that there was a pattern to it, that Nicola was using the fire as an artist's palette, the way she'd done with the water in the lake among the Chosen.\n\nIt wasn't just the fire. The sound of the rain striking the roof had altered, the white noise gaining structure and rhythm, the entire house vibrating faintly with its drumming. The air shimmered, and something odd was happening to his vision, as though the log walls were pulsing, becoming slightly transparent. \n\nEsther was holding hands with Nicola, the two women joining their senses and their abilities. And through Javier's tears, he finally understood that this was what the ancient places had been meant for, if they were meant for anything. Esther and Nicola's distant ancestors might have done something like this, on those uncertain nights when their tribe needed some hope that the next morning's sun would rise on a different, better world.\n\nThey would all have to talk in the morning, and Javier was terrified of the decisions they might have to make. But they would make them together.\n\nEsther and Nicola's song continued for an hour, or maybe three. At some point Mark had gotten up to add more wood to the fire. When the song finally faded into nothingness, he knew it was probably best if they headed to bed. But no one moved. Esther's body was like a furnace behind him, and Selena's leg rested heavily against his. \n\nFinally Nicola stood up quietly, heading for the kitchen. Starving, no doubt, after using her abilities that way. The rest of them shifted as well, and Esther kissed him before going to get her boots to dash to the outhouse.\n\nJavier felt bad about sitting down at the computer again, but this was the right time, and Kat was peacefully asleep in Grace's arms. When he checked the news, there was nothing really new: more details, more analysis, more diplomatic fallout. The physical fallout would probably raise background radiation levels a hair in North America, a fact that was already being touted endlessly by the media and politicians. Javier checked his messages, and that was when his heart sank. He'd wanted to tell everyone nothing more had happened, that they could sleep and wait until the morning.\n\nWhen Esther returned and pulled off her boots, she looked at him expectantly, so he beckoned Nicola to join rest of them. Grace woke up Kat and they all turned to him.\n\n\"Lukas finally contacted us,\" he said. \"He'll be in Reno in the morning. He wants to talk, on our terms.\"\n\n* * *\n\nRaj was there to meet them, having driven all the way from the Bay in the early morning hours. Mark and Grace waited in the parking lot, but the rest of them walked out into the deserted municipal park, trying to look as casual as they could. It was ridiculous, but Javier thought anyone who saw them would probably think they were a bible study group, or AA, or something like that. \n\nEsther had confirmed Lukas was alone, as he'd promised. He was sitting at the shaded picnic table, wearing a broad-brimmed hat. Probably it was a functional choice for the fair-skinned man. Until now Javier had only seen him inside windowless rooms. Lukas didn't look any more out-of-place than the rest of them.\n\nAside from the hat and the different surroundings, he looked exactly as he always had. Neutral, expressionless. If he was physically tired from his all-night travel, it didn't show.\n\nHe stood politely as they approached, nodding, and they all settled around the table, leaving Lukas as much space as they could.\n\n\"It is good to meet you, Esther,\" he said. \"And you must be Selena.\"\n\nShe nodded from across the table, and looking at her, Javier felt some relief. She had her business face on now, and despite the time he'd spent with her, she looked as inscrutable as Lukas.\n\n\"What can we do for you?\" Selena asked.\n\nLukas didn't focus on her. He was looking somewhere behind her, and Javier resisted his impulse to follow his gaze. Lukas would still be thinking, weighing information and memories. And Nicola had described this mannerism as part of his unconscious sense of theater.\n\n\"This is a larger group than I expected,\" said Lukas. \"Esther, are you able to hide their presences?\"\n\nEsther frowned, then nodded. \"Yes. I am also helping to conceal you, though you are doing an adequate job yourself.\"\n\nJavier winced at the easy way Esther gave away her strength. But he suspected Lukas already knew more than any of them would like.\n\nLukas nodded. \"Have any of you experienced what the Chosen call Union?\"\n\nThere was a silence. Javier finally broke it. \"Why is that important?\"\n\n\"I think you know why,\" he said. \"Motivations all become suspect under its influence. I know this from first-hand experience.\"\n\n\"You no longer follow the Way, then?\" Nicola asked.\n\nHe looked at her, allowing a hint of amusement into his face.\n\n\"As much now as I ever did, I suppose. Some of my former associates have a much simpler, clearer view of their responsibilities now. But we know how much more complicated the world is, don't we, Nicola?\"\n\n\"Don't be coy, Lukas,\" said Nicola. \"Tell us what your relationship is with the Chosen. I suspect you already know that I was kidnapped, and that I escaped with the help of all of my friends. As for the Way, it can go fuck itself.\"\n\nThis time Lukas's smile looked genuine, and perhaps it was. But it disappeared quickly, and Lukas's voice remained neutral.\n\n\"I thought we could use them,\" he said. \"They seemed like zealots, but harmless enough, and eager to assist. I had a single purpose when we moved to Germany, which was to work for the liberation of our kind. We rescued hundreds from Britain, even those who would likely never have known about their Changes. More from Latvia, Hungary, Russia, and many other countries. The German government gave me more real power than the Americans ever did, and we were undermining the fascist elements in countless ways. But then three of my associates disappeared, and when I followed them, I became trapped as well.\"\n\n\"Was it an ancient place?\" Esther asked. \"A location that holds a Changed person's attention and makes escape difficult, without the right mental exercise?\"\n\n\"Yes, exactly,\" Lukas said. \"Just as Nicola was trapped. And you, I now suspect, during that memorable period last summer when you disappeared.\"\n\n\"I was alone then,\" said Esther. \"It was not Unity that trapped me, but a mere echo, and the place itself.\"\n\nLukas nodded. \"I was trapped more irrevocably than any of my associates, and the Chosen explained that it was my excessive Blessings that caused this. And apparently my particular characteristics also led to what they described as an imbalance within Union.\"\n\nHe paused, but they all stayed silent.\n\n\"I never entered Union fully, they told me,\" he said. \"But I wanted it more than I've wanted anything in my life.\" Lukas glanced quickly at Raj, but the mathematician wouldn't meet his gaze. \"My mind couldn't stop working, however. I suspect on one level I never trusted Union. And after Black Christmas, I escaped in the chaos.\"\n\n\"Back up,\" Selena said. \"What was your involvement in Black Christmas, if any?\"\n\nHe glanced at her.\n\n\"None, directly,\" he said. \"As I said, afterwards\u2014\"\n\n\"Bullshit,\" Selena interrupted. \"Why don't you try answering that again.\"\n\nLukas nodded. \"My role was indirect, only. The Chosen had their own plans, and I\u2014\"\n\n\"Stop,\" Selena said. \"I see there's no reason for us to talk any further.\"\n\nTo Javier's surprise, she stood up, giving every indication she expected the rest of them to follow. He glanced at Esther, who looked uncertain.\n\nLukas nodded again, expression unchanged. \"I needed to be sure,\" he said. \"You are as perceptive as I hoped. A priceless skill in the business world.\"\n\nSelena's expression cracked, just a moment, as she realized how she'd been manipulated. She sat slowly, watching him warily.\n\n\"All right, then,\" she said. \"Why don't you tell us your actual story. Alliances are not built on falsehoods.\"\n\n\"But they may thrive despite secrets,\" he said. \"I understand you require this before trusting me for what comes afterwards. But remember that our goals may match perfectly in some instances, even if they do not in others. Yes, I was involved in the Black Christmas attacks, but my understanding of the larger picture was utterly warped by Unity. You see, the British government is using its surveillance state to track suspected Changed, and hiding ourselves in those circumstances is becoming difficult. In the future it will be impossible, if these trends continue worldwide. I resolved to do something about it.\"\n\n\"The internet outage,\" Kat said. \"I knew it was too well-coordinated. The phone lines, even the satellites. That was all your group, wasn't it?\"\n\n\"Yes,\" he said. \"Not the power outages, or any of the other Black Christmas attacks. I am well aware of the dangers of a complete breakdown in infrastructure. What I wanted was a long pause. A carefully calibrated effort to delay the particular connectivity that spelled doom for our anonymity. There are ways the Internet can be organized that would resist control by any one powerful organization, and which would allow those who wished it to be forgotten.\"\n\nKat started to laugh in astonishment. \"You're one of those idealists? I have friends who talk like you. It's a pipe dream.\"\n\n\"Perhaps,\" Lukas said. \"And as it happened I was a fool. I distantly perceived the efforts of others, and had no understanding of how radically our visions differed. Rather, I suspect my own desires had been projected into Unity and reflected back. Every person's mind has this unique expertise in deception, but I arrogantly assumed I had trained myself out of it over the years.\"\n\n\"Those downed phone lines killed people,\" Esther said. \"They delayed emergency response, interfered with hospitals, everyone who needed to communicate during the crisis. Even without the other attacks, it would have been a deadly thing to do.\"\n\n\"In a statistical sense, I cannot disagree,\" Lukas said. \"Such is the calculation we must always make. And you must be well aware how much more difficult every decision becomes as your knowledge increases. But none of this is why I have come. And I hope my candor will lend credibility to what we discuss next.\"\n\n\"We'll be the judge of that,\" said Selena. \"So, how is it that our goals align now?\"\n\n\"There is a man known as the Mexican, and he must be stopped by any means we have available.\"\n\nThere was a long silence.\n\n\"No,\" Esther said. \"Not by any means. That is not my way, and it never will be. If he can be stopped in a way that does not permanently hurt him, I am willing to listen. No bombing campaign. No assassinations.\"\n\nLukas nodded, expression blank. \"I had suspected something like that. You are setting yourself an impossible standard. Every action we take, no matter how subtle, has consequences. Failure to take action also has consequences. These consequences combine and amplify in ways that a mind like yours must be able to contemplate. The only possible route forward is to minimize harm, as best we can.\"\n\n\"That isn't right,\" Esther said. \"Our ignorance isn't symmetric. Taking actions, especially the sort that you or I might take, have more complicated and unpredictable consequences than inaction. And the space of all actions is larger even than the function space of the locally mapped Riemann manifold, because locality itself\u2014\"\n\nLukas's face was lighting up with this discussion, but Raj interrupted.\n\n\"Esther,\" he said. \"Now isn't the time. You have your principles, and none of us will disagree. Lukas, can you accept her conditions and move on? If not, I fear we have nothing else to discuss.\"\n\n\"Then I agree,\" Lukas said easily. \"Because I have considered the alternatives, and you are the only way I can see to accomplish this.\"",
        "\"You will not try to kill the Mexican?\" Selena asked, \"Or any of his supporters? You will ask the same of any others you intend to aid you?\"\n\n\"Yes,\" Lukas said. \"Given what hangs in the balance, I strongly disagree with those conditions, but I will accept them.\"\n\nSelena watched him, and then nodded slowly. \"We are not agreeing to what you propose,\" she said. \"First, why don't you explain why it is so important that he be removed.\"\n\n\"You likely know that better than I do,\" he said. \"Or at least you discovered it earlier, I am certain. He is a very strong Changed man, someone who has been acting subtly for decades, and perhaps longer. I am still attempting to trace his origins. It is only his recent behavior that has allowed me to unravel the larger pattern. He has been helping to fragment centralized powers, one after another. Germany, China, even the Soviet Union. I do not understand his aims in America, but I now believe Franklin was one of his tools. Perhaps he feels he has acted in the interests of the Changed, the way Franklin did. But in the process he has accumulated a power that makes him virtually unassailable, even in the midst of this war. He will survive it easily. That is why his apparent desperation has been so difficult to understand, you see. I think the only thing that could produce such terror is the suspicion that the handful of Changed who might rival his power have begun to work against him.\"\n\n\"We took down Franklin,\" Esther said slowly. \"And then we defeated one of his powerful lieutenants, Castillo. And Amelia, the group in Mexico. This is all because of me. The Mexican's entire reaction, even Black Christmas itself\u2014\"\n\n\"Stop, Esther,\" Javier said desperately. \"That's ridiculous. Whatever the Mexican has done, he did himself.\"\n\nBut Esther was receding to somewhere else entirely, mumbling something about Herod. Javier jumped up to go sit with her, and Nicola quickly made space. Through all of it Lukas watched impassively, almost as if he'd known what those words would do to her. Javier suddenly hated him.\n\n\"That's enough,\" Nicola said. \"This isn't our fight, Lukas. Esther has put herself in danger enough without you goading her into something worse, with effects we can't even predict.\"\n\n\"The uncertainty is high, and the personal danger extraordinary,\" Lukas agreed. \"All the more if we are to follow Esther's rules. But as Esther argued earlier, risks are often asymmetrical. In this case, though, it is inaction that carries a high chance of utter catastrophe. Nicola, you may think I only concern myself with the welfare of the Changed, and there is truth to that. But a full nuclear holocaust will kill virtually everyone, sooner or later. Billions of dead. This is not a distant risk I'm describing. It is here this instant, and growing as we speak.\"\n\n\"How?\" Esther muttered. Javier tried to quiet her, but she sat up straighter, wiping her eyes and staring at Lukas. \"How are you so sure? There have been other moments as well. The Cuban Missile Crisis.\"\n\n\"And perhaps if we replayed history ten times, that crisis would have ended with catastrophe a few times. This time it is worse, because the Mexican is using his abilities to create one crisis after another. You may already know this, but he is able to damage a person's mind from immense distances, enough to change behaviors. More blunt than Franklin, but far more powerful. Even as the Russian ICBM launched, he attacked the most moderate member of the American Joint Chiefs of Staff. I suspect he is desperate enough that he has accepted the risk of total nuclear war, perhaps in the hopes of a somewhat less extreme outcome that gives him breathing room. But every time it is a roll of the dice, with the reactions of America and Russia tested in a novel way. We survived the Cuban missile crisis, but it evolved more slowly. The Mexican is rolling the dice over and over, and he's loading them further with every roll. We will not escape danger until he stops.\"\n\n\"It's not her responsibility,\" Javier said miserably. \"Don't try to turn it into hers.\"\n\n\"No, Javier, it's everyone's responsibility,\" Esther said, squeezing his hand weakly. \"But I might be one of the few who can do something about it.\"\n\n* * *\n\nThe others had insisted she delay her decision, and she had accepted that. She wanted a reason to change her mind. The risk of danger to herself was of little consequence, given the stakes. Even a modest probability of success was worth the risk, as long as they could stay undetected until the last moment. Because of course Lukas hadn't presented the whole picture. It was always possible to make things worse, and she had to consider that risk as best she could. Still, everything was telling her Lukas's logic was sound. His details matched everything she'd felt from otherspace, even connections that had been too vague for her to bring to the others' attention.\n\nBut she owed it to the others to exercise all the caution she could, because they would insist on coming with her no matter what. It would be her decision that could lead to all of their deaths.\n\n\"No, Esther,\" Javier told her again as they lay naked in bed that afternoon. \"That's not how this works. We're making the decision to follow you, because we love you, and we believe you have the best judgment of all of us. Yes, despite whatever you think has been your fault. If you decide you have to go to Mexico, it's because you think the risk to the whole world is significant. Going along with you would be the safest thing then, to give you the best chance of succeeding. A selfish decision, really.\"\n\nShe smiled at Javier. He was always so good at this task, managing her fractious moods as though it were his responsibility. She could never bear failing to act if there were something she could do to save him. And that was the awful logic facing her: she might need to save the whole world to save her family. Exactly what Javier and Nicola and the others always accused her of trying to do.\n\nHer fingers traced a line down his back, down to his gorgeous muscled butt, and he flexed one cheek to amuse her. Maybe they should have sex. Like people always said, as though it were the last day on the planet. She shook off the thought. But Javier's penis was right there, and he said he never really minded certain kinds of attention, even if he wasn't much in the mood. She brushed along the shaft with her fingers, and he drew his breath in, shifting to help her. He was in the mood, all right. His fingers found the sensitive freckles on her back, and she started to rub herself between the legs, circling her small opening. Her body's response was slow, but this felt right. \n\nThere was a knock at the door, and Javier started when she called out for Grace and Kat to come in. Belatedly she realized she was still masturbating Javier, and herself, and she pulled her hands away.\n\n\"Hey,\" Grace said, eyes widening. \"Oh, gosh, sorry, I didn't mean to interrupt.\"\n\n\"Yeah, you should just keep going,\" Kat said. \"Mostly we were looking for company.\"\n\n\"Ok,\" said Esther. \"Come and sit with us if you want. I think we could use it too.\"\n\nShe felt Javier's tension when she gripped his penis again, but he wasn't objecting. And it was nice to have the others here.\n\nGrace looked nervously at Kat, who was starting to smile. And then Kat started undressing, down to her underwear anyway.\n\n\"Honest, for once, that wasn't the kind of company I was thinking of,\" Kat said. \"But you guys are beautiful together, and suddenly I seem to be horny. Is this the end-of-the-world thing kicking in finally?\"\n\nShe sat on the bed near Javier, reaching for Grace, who kept biting her lip. But then she joined Kat, pulling off her sweater and shirt. As usual, she wore no bra, and Javier was clearly aroused. But truth be told, so was Esther. She liked both these women, and if Javier wanted to have sex with Kat again, that seemed pretty hot. Really hot. She swallowed.\n\nWhat she hadn't expected was the way Grace kept looking at her. Kat was kneeling between Grace's legs, pulling her panties sideways to run her fingers through Grace's bush. And even as she sighed and stroked Kat's face, Grace kept stealing glances at Esther's body.\n\n\"Would you like a closer look?\" Esther asked, kneeling upright. \"You can touch me if you want. I think I might like that.\"\n\nNo, she was sure she'd like it. And Javier was nodding so vigorously it was almost comical. She squeezed his penis once and adjusted her grip slightly, until he moaned.\n\nGrace looked nervously at Kat, who kissed her softly on one nipple, working her fingers steadily beneath her lover's underwear.\n\n\"She wants to use her tongue,\" Kat said. \"If you're OK with that. I recommend it. She's amazing.\"\n\nGrace blushed, but she didn't deny it. And when Esther nodded, Grace got up on her knees to face her, looking lost and vulnerable and strong and full of desire. All mixed up, like they all were. And then Grace's mouth came towards hers, and she closed her eyes.\n\nShe wasn't anything like Javier. Or the tiny handful of others she'd kissed, all of whom were right here in this house. Grace's lips were soft and artful, her tongue finding sensitive spots on Esther's lips that she hadn't even known about. It drove Esther mad, and she was relieved when Javier started using his fingernails on her back, and then slipped a hand through her legs from behind, finding the sensitive blue skin and stroking, stroking. He was dangerously close to touching Grace, but she knew he would take great care about that, no matter what he might be fantasizing about. His fingers did bump into Kat's a few times, though, where they worked through Grace's slit. \n\nGrace broke the kiss, and then shifted lower, following the line of her jaw, to her neck, and down between Esther's breasts. She obviously understood full well how sensitive those freckles were, and Esther hissed happily when she finally used just the right pressure.\n\n\"You're gorgeous,\" Grace whispered. \"I could look at you for hours. Especially while Kat does that to me.\"\n\n\"Glad to be of service,\" Kat said happily. She had a hand down her own panties, obviously enjoying watching.\n\nGrace worked slowly towards her nipples, which were already utterly erect, shining their brightest blue as they always did in this state. But Esther was distracted by the person hovering in the hall. And so she gave the lightest pull on Selena. A simple welcome. No compulsion at all, particularly given Selena's newfound strengths. Esther repeated it. \n\nThe others hadn't noticed Selena's quiet entrance. In truth Esther was baffled, but Selena cleared it up shortly.\n\n\"You don't have to ignore me, but don't expect me to join. I just want to be with you all, if it won't be awkward.\"\n\nJavier patted the bed beside him. \"Of course it'll be awkward,\" he said. \"And of course we want you here.\"\n\nShe smiled slightly, sitting at the corner of the bed, rather than next to Javier. And Esther smiled back, until suddenly Grace's tongue darted lower, and she had to close her eyes as her body began to anticipate what was coming.\n\nShe'd forgotten to keep her hand moving on Javier, and she felt another hand gently touch hers. Kat happily took over, and Esther focused on nothing but the artful tongue working around her hole, the little inhalations of delight from Grace as she found Esther's most sensitive spots. The feel of her friend's tongue slipping inside her, pressing and filling her up, so she could almost imagine she was an ordinary woman for a moment. Two moments.\n\nIt passed, of course, and she moved her thoughts another direction, as she always had to. She could feel everything about Grace's body now, all the intimate space she never allowed herself to notice. The way her anus puckered when Kat touched her clitoris just right. The depth and texture of her vaginal passage, the way Javier's penis would fill it up, as it must have that one time they'd coupled. She knew he still dreamed of it, almost as often as he fantasized about Nicola.\n\nEsther was masking their activities in her usual way, but the door was still open, and Nicola and Mark would know something was up. They were having sex too, in the slow and patient way they'd worked out lately, Nicola steadily working her mouth on Mark's mostly-hard penis. And so Esther sent Nicola the same invitation she had to Selena. \n\nWhen Nicola didn't react, she sent it again, but this time Nicola just held up her hand. Not now. But not rejecting her offer either.\n\nSuddenly a slick finger probed her anus, and she had a moment's vertigo as she scrambled to remember who it was. Javier, of course. It had sent a jolt through her body that Grace surely noticed, and suddenly her tongue began working just enough faster that Esther's thighs tensed, her body heating itself, instinctively trying to build tension to sharpen her coming climax.\n\nGrace understood exactly what it meant, and she didn't stop what she was doing. It wasn't anything Javier had ever done, exactly, but it wasn't so different. But there was a danger, the thrill that she might suddenly be surprised. And when her orgasm came, it surprised her right out of her body.\n\n* * *\n\n\"Esther?\" \n\nJavier had looked away for just a minute, distracted by the way Kat's tits were jiggling as she tried to please two different lovers. But Grace's tone brought him up short, and Kat stopped jacking him off an instant later.\n\n\"She's OK,\" he said almost immediately. \"She just had an orgasm that knocked her straight into otherspace. She'll be back.\"\n\nKat started laughing. \"Attagirl, Grace! I knew your magic tongue would do it.\"\n\nJavier smiled, and Kat let go of his dick. But it was temporary, and he moaned when her mouth took over.\n\nSure enough, Esther was back thirty seconds later, looking flushed and slightly peeved. He wasn't about to tell Grace that Esther didn't like missing the best part of her orgasm. The fact that it had happened anyway spoke volumes about how Grace had surprised her friend. And Esther was hungry for more, that was obvious. He tried to catch her eye, to see if she wanted him. Maybe anal sex while the others made love. He could already imagine the feeling. But instead, Esther sat up, breathing hard, and kissed Grace on the lips. Then lower, lower, repeating what Grace had done for her.\n\nGrace's eyes went wide, and Kat quickly pulled her hand away, letting Grace lie back the way she wanted. A few seconds later, Esther's mouth was buried in Grace's bush. And Esther's practice with Nicola seemed to be paying off, judging by the noises Grace made.\n\n\"Holy shit,\" Kat said, pulling her mouth off of his dick to watch. She stared a second longer, then grinned and looked at him. \"Wanna fuck, Javier?\"\n\nWithout waiting for his reply, she turned over, resting on her knees and kissing Grace hungrily. Grace moaned into her mouth, putting a hand behind Kat's head. Javier got behind Kat, and then he noticed Selena watching.\n\nShe had an odd expression on her face. A good expression. She'd taken off most of her clothes, aside from her purple synthetic panties. He hadn't seen her breasts before. They were ordinary, beautiful breasts. A little unnervingly ordinary, since Javier's experience of breasts was mostly from women thirty years younger. He suspected there might be freckles that she'd concealed the way she usually did. And she was looking at his body. He might be nervous, but with so many naked women to focus on, he was still hard as a rock. He might as well make a show of it.\n\nCarefully he lined up with Kat, and she felt the tip of his dick brush her hairless slit. She reached back to help guide him, but he knew things were good. And so he sank into her with a single long plunge.\n\n\"Fuuck,\" Kat murmured into Grace's mouth. \"Oh, Grace, he's so big inside me. Does this turn you on, watching me get fucked while Esther eats you out?\"\n\n\"The fuck do you think?\" Grace mumbled, turning her head to get a view of her lover. Kat got the idea, and she sat up, pulling Javier slowly forward, getting high on her knees and opening her legs wider, until Javier was fucking her just a foot from Grace's face. Kat started masturbating, and he suspected she wouldn't last long. He moved to help, but to his shock Kat took his hand, resting it gently on Grace's breast. She gave him a bleary-eyed smiled, and he touched her gently. Felt Grace's beautiful curves, caught her fat brown nipple between two fingers.\n\nBut he suddenly remembered he wasn't even wearing a condom. He slowed slightly, and Kat seemed to sense his worry. \"Wrong time of the month,\" she whispered. \"Maybe you should try to hold off, though, like the other time. Save it for Esther.\"\n\nHe tried, but there was so much going on. Esther was touching herself low on the back, and Grace seemed on the verge of an orgasm. Finally Kat began shaking, and he steeled himself, keeping his rhythm just so. Let her come all over him, as though he were a machine. Dick made of steel. A robot, a glorified sex toy for Kat's collection.\n\nIt was ridiculous, but it worked. He supported Kat with an arm around her chest as she grunted and moaned, his groin pressed hard against her buttocks, her breasts bouncing atop his arm. And then she finally rolled off him, kissing Grace once more.\n\nGrace didn't seem to have much time left, and suddenly he knew what Esther would want. She'd implied little scenes like this sometimes, hardly with any detail. His dick was absolutely covered in Kat's juices, and she'd liked it when he touched her there earlier. Her slim ass was perfectly positioned, her legs trailing off the back of the bed. And so Javier stood up and walked around to her, barely two feet from where Selena sat watching. He touched his dick to Esther's asshole, and she pushed firmly back against him.\n\nIt wasn't the same kind of lubrication they usually used. It was thinner, and he had to go slower. But Esther seemed to like it just fine, and it was a thrill to remember it was Kat's juices that made it possible.\n\nGrace seemed to be taking a long time getting over the last hump to her orgasm. Of course Esther didn't exactly know what she liked, and all this was unfamiliar. And Esther was distracted now by her own pleasure. He could feel how close she was getting to another orgasm, how much she wanted to run straight at it, let herself be overcome by the slap and the rush. So Javier scratched her back just so, and he timed his thrusts with her slight contractions. And he whispered softly how much he loved her, how he'd be there with her, whatever she needed, whenever. He'd forgotten Selena could hear him, though. She was wiping her eyes, not looking at his face. But she didn't look away from the sex.\n\nAnd finally he felt that tiny relaxation from Esther, her conscious muscles letting the automatic take over. It went on and on, and he felt her urging him faster, to join her. But it wasn't until he looked up and locked eyes with Grace that he finally started to come, every muscle in his body tensing and then his balls letting go, feeling as though a dam had released.\n\nEsther was valiantly trying to keep licking Grace, and finally with Kat's efforts it seemed enough. Grace was quieter than all of them, but Javier had a perfect view from here, and as he caught his breath he watched her with a deep satisfaction, through the last shudders, until she was still.\n\nWith a groan he pulled out of Esther, awkwardly hopping for a towel to help them both clean up. And to his amusement, he saw that Kat was masturbating while the rest of them paused.\n\n\"What?\" she said with a grin, opening her legs wider. \"That was the best show ever. Tell me it's not over.\"\n\n\"Before that, I need to clean up,\" Javier said, patting her on the head before kissing Esther on the cheek.\n\nEsther followed him into the hall, and for a minute he just looked at her with a goofy grin. Then they hit the bathroom, taking their time to clean.",
        "They met Selena on the way back. The older woman was dressed, and she looked uncomfortable now in a way she hadn't before.\n\n\"Thank you for joining us,\" Esther said with a smile.\n\nSelena nodded, eyes flicking nervously to Javier's nakedness.\n\n\"I still feel strange about it,\" she said. \"And I think I'm done. But thank you for letting me be there. It was beautiful.\"\n\nWhen they went back inside, Grace and Kat were lying side by side in a half embrace. Kat was still masturbating slowly, but when she saw them she squeezed towards the edge of the bed, pulling Grace along. And so Javier and Esther squeezed on the other side. And just like that, Javier was lying naked alongside Grace.\n\n\"Hey,\" he said. She turned her head and smiled slightly, running her hand through his hair.\n\n\"That was the hottest fucking thing I've ever watched,\" she said. \"I didn't even know what to look at.\"\n\n\"Yeah,\" Javier agreed.\n\nA cool hand settled on his mostly-soft dick, and he sighed, looking back at Esther. But she just smiled slightly at him.\n\nIt was Grace's hand. And she was starting to rub his cock, ever so slowly.\n\n\"Just this, if it's OK,\" she said. \"What can I say? I'm curious, Javier. And I like you.\"\n\n\"That's a good thing to make sure of, before you give a hand job,\" said Kat. Grace gave her a dirty look.\n\nHe had to give her directions on everything, and she bit her lip in nervousness.\n\n\"He's loving this, Grace,\" said Kat softly. \"Don't be so nervous.\"\n\nJavier was starting to get really into it when he heard a noise. It was Nicola and Mark, stark naked in the doorway.\n\n\"Is there room for us?\" Nicola asked. She sounded casual, but her hand was gripping Mark's tightly. Mark didn't even pretend not to be scared as hell.\n\n\"More than enough,\" Kat said easily, sitting up and scooting back. \n\nMark was staring at Grace. Maybe he found her as attractive as Javier did, or maybe he was trying to square up what she was doing with what he knew about her. But whatever the case, Javier could see how useful the distraction was for him. And maybe Esther did as well, because she reached out her arms to the couple. And when Nicola took her hand, she stiffened suddenly.\n\n\"Oh, Christ, Esther,\" she said. \"Can we, please?\"\n\n\"Both of you, if you want,\" said Esther. And something kindled in Mark's face as he stared at Esther, naked and inviting. He nodded slowly, and when he took her hand, he grunted, eyes closed.\n\n\"That's quite a fucking trick,\" Kat said with a laugh, staring at Mark's sudden erection. \"You think Esther could teach me?\"\n\n\"You do well enough as it is, you maniac,\" said Grace, pulling closer to Kat, momentarily releasing Javier. She looked back quickly, apologetically, but Javier just started masturbating.\n\n\"Why don't you do what you're going to do,\" he said. \"That's way more than enough for me.\"\n\nIt wasn't, really. He wanted to press inside Grace, the way they'd probably never do again. Or join in the complicated pile with the other two women and Mark. Though right now they were mostly off somewhere in their senses, a place he'd never be able to join them. He carefully quashed that old bit of jealously. And instead he watched them, and the expressions of joy on their face. The way Esther rolled over, kissing Nicola full on the lips while Mark cautiously began rubbing her back. Just as she liked. \n\nJavier swallowed and looked back to the two women, who were entwined now, lips together, fingers between each other's legs. And he decided he'd rather watch that for a while. Sometimes Kat or Grace would catch his eye and smile, and he moved closer to both of them. Close enough to fuck, if that was what Kat wanted. But right now she mostly had eyes for Grace alone.\n\n* * *\n\nEsther had never felt anything like this.\n\nShe hadn't shared senses with Nicola for over two months, and even longer with Mark. But they'd all grown in their own ways since then. And despite the horrors, or because of them, they'd grown closer than ever.\n\nShe felt the bead of sweat on Nicola's chest, just below her left breast. She could taste it, and she could feel every water molecule, every stray ion, its deepest vibrations. Nicola's fine perception was unbelievable, and Esther reveled in it, even while feeling Nicola's own wonder as she explored the shallow reaches of otherspace.\n\nHer connection with Mark was weaker, but there was still so much there. Suffusing it all, a shockingly erotic sense of his body, of every little pathway. The kind of self-knowledge he'd had to painfully reconstruct after his near-death. After she and Nicola and Javier had brought him from beyond death.\n\nShe understood now the mistakes that she and Nicola had made, in that desperate rush to save him. She saw the scarring and the damaged nerves, and she ached to make it right. But that was beyond her ability or Nicola's. It was all part of Mark, and his body was itself finding new pathways. Just as it had after the terrible event that had resulting in the great scar along his scalp, something she wouldn't even think about now, lest Mark feel the direction of her sight.\n\nHe was touching her so gently, but her body responded with astonishing speed. And whatever pain there was between him and Nicola, he wanted Esther right now. It was something she could feel down to his toes, a need even more immediate than the yearning Nicola had, which owed as much to her joy in borrowing Esther's senses as to anything sexual. Esther's hand found Mark's erection, and she stroked it, feeling the echoes of his joy in a beautiful after-image. The heavy weight of his maleness, almost as though it was hers. A strange, intoxicating sensation. She kissed Nicola again, and she felt another rush of satisfaction from her friend, along with the guilt, the desire for Mark, the worry. \n\nBut their senses were bleeding into each other as well, across Esther's bridge, or from their own abilities. Even as Esther kissed Nicola, even as she traced the pattern extending down around Mark's shaft, the other pair was talking in their own way, without words. Mark would never have gone to find the lubrication on his own, surely. He wouldn't have waited, touching her so gently that she wanted to scream, while Nicola reached for Javier, breaking her kiss just long enough to climb on top of him, settling herself just so, waiting for Javier to turn and find Esther's lips, for Nicola's tongue to find her breast.\n\nMark entered her from behind, sighing in pleasure. And at the same time, Nicola settled onto Javier's penis, and through her friend's senses Esther felt her own hips driving down, through the bed, burying herself on her love's penis even as a second man filled her from behind. She gasped and pressed harder onto Javier, feeling Nicola's pussy, her pussy, clasping so tightly, but he fit perfectly. Both of them did, and Esther was crying into Javier's mouth, because she'd never felt so overwhelmingly *filled*. She would take all of them inside her, if she could, to hold them so close to her that they could never come to harm. She almost didn't notice when Nicola began to shake and quietly sing, the way she did during her best orgasms. The feelings washed through her, and when they were all finally through she wasn't even sure if her own body had ever climaxed. Compared to the sensation of fullness, it hardly mattered. She thought Javier had even joined them a little way. He was looking into her eyes, and he hardly reacted when Nicola finally rolled off him with a groan to follow Mark and wash up.\n\nFinally Javier sat up as well, running his fingers along her torso, tracing her Changes until her nipples hardened and her body began to consider\u2014but no. This evening was already exactly as she wanted to remember, whatever came next. She kissed Javier, finding his hand and twining her fingers in his.\n\n\"Goddamn,\" Kat said, looking at the two of them. \"Do you think there's some way we could get in on that action, next time? If there's a next time, of course. I shouldn't be presumptuous.\"\n\n\"That's all you ever are, Kat,\" said Grace, kissing her lover's breast again. \"And we still love you.\"\n\nThe other coupled returned, and Esther smiled through the wall at Selena in the living room, receiving a hesitant smile in return. The older woman had watched everything, this time from a slightly safer distance.\n\n\"Benjamin didn't understand anything,\" Esther said slowly. \"He was a sad, twisted young man who never grew up properly.\"\n\n\"Amen,\" said Nicola. \"The less said about him, the better. So, until tomorrow?\"\n\nNicola and Mark made their way back to their own bedroom, but Grace and Kat asked to sleep over with them. Javier just threw another sheet on the sweaty, wrinkled one, and the four of them called it a night.\n\nShe couldn't hold all of them inside her forever. No one wanted that, not even her. But she could have these perfect moments. Nothing at all like Unity, and everything Esther needed.\n\n* * *\n\nEarly the next morning they all gathered in Jacob's cramped living room. Raj had spent the night with Jacob and Tomiko, perhaps hoping to craft a last-ditch argument to persuade Esther. But the others could tell the argument was lost as soon as she walked in.\n\n\"Esther,\" Raj finally said. \"I understand all of your reasons as you've explained them. But I need to hear you talk about the things you aren't saying. Lukas has always been careful with how he phrases things, and Nicola saw how he was trying to manipulate you. For a minute I thought we'd lost you, the same way we did after the declaration of war. So convince me your weighing of risks is as rational as you can manage with limited information, and not being influenced by any sense of making right a situation you think is your fault.\"\n\nJavier watched Esther. It was exactly the right question, and she thought seriously about it.\n\n\"I won't pretend I'm not still struggling with guilt,\" she said, \"But I have to rely on the same argument I told you. Lukas's logic is sound. His facts match with my privileged knowledge from sources he doesn't know. None of us can come up with a reason he would be deceiving us, and in a practical sense we already knew most of what he told us.\"\n\n\"Why did you bring up Herod's name?\" Javier asked.\n\nShe looked at him with surprise and discomfort.\n\n\"I didn't realize I'd said that. It was Lukas's reasonable theory about the Mexican's motivations, of course. The idea that all this had been set in place because of my actions, his fear that I would overthrow him.\"\n\n\"No,\" Javier said. \"It's more specific than that. You're thinking about the visions in Unity, from around your birth, and then again those that provoked Benjamin's actions.\"\n\n\"Birth visions?\" Jacob asked, looking concerned. \"Esther, you never mentioned those.\"\n\nNor had she told any of the others, it seemed. Miserably Esther went through what little she knew. The prophecy that Benjamin's sister seemed to know of, that she had a future destiny of grand importance. The clear vision from Diana, of her being stolen from some unpleasant fate.\n\n\"I can't imagine those were just messages the Mexican sent through Unity,\" she said. \"That wouldn't make sense. They seem more like true prophecies. Like the earthquake.\"\n\n\"Hold on, Esther,\" Jacob said. \"Have you been worrying that your whole life has been prophesied somehow, on such a thin basis?\"\n\n\"No,\" Esther said. \"Well, not most of the time. But when Lukas implied that the Mexican was worried about me specifically, or one like me, I couldn't help but think of Herod. Surely the Mexican knows more about Unity than virtually anyone else. I assume he had seen exactly these same visions, and it was that fear that drove him suddenly to desperation when he suspected the prophecies were coming true.\"\n\n\"But Herod's fear of Jesus, that's just a story,\" said Grace. \"No offense, Jacob. What I mean is, it's a common story. Like you said, the rescued child myth was already there with Moses. But also earlier, with Karna in the Mahabharata. And the prophetic doom which is unavoidable, or even self-fulfilling? That's everywhere. Oedipus, Cronus, even Macbeth. If these visions from Unity are interpreted by humans, which they are, they will be influenced by the stories we all know. And if Unity visions are sometimes self-fulfilling prophecies of their own, a communal idea that crystallizes from the dreams and fears of the Chosen, then this sort of prophecy is exactly what you would expect. Plus, it would hardly take a prophecy for the Mexican to worry about someone stronger replacing him. That's the worry of every despot through history.\"\n\nJacob nodded. \"I couldn't have said it better. The Mexican has made his own choices, and you have no responsibility for them. Esther, don't put much weight on any of these apparent scraps of prophecy. We all search for meaning, even when it isn't there. And it's obviously not helping with, ahh, how shall I put this. Your messiah complex?\"\n\nEsther looked shocked for a moment, and then she sighed.\n\n\"Of course you're right,\" she said. \"I keep trying to hold my arrogance at bay, and it keeps creeping into the way I see the world. I have unusual powers, but it doesn't make me a special person. No better or worse than anyone else.\"\n\n\"True,\" said Nicola. \"It's not your powers that make you a special person. That's what we keep trying to tell you. So go through your thoughts again, in that brilliant mind, and then tell us if you've miscalculated something. Because in the end, you're the best judge we have.\"\n\nThey waited, and finally Esther shook her head.\n\n\"No,\" she said. \"I'm afraid it all comes out the same. I'm going to go with him.\"\n\n\"Then I am as well,\" said Javier, and the others chimed in immediately. Even Raj.\n\n\"Esther said this was everyone's responsibility,\" he said. \"And she's right, I'm sorry to say. Even mine, though I'm worse than useless when it comes to fighting. I'll help with communication, logistics, whatever needs another person you can trust.\"\n\nWhen they left to meet Lukas, Jacob looked stricken, Tomiko was crying, and Javier hoped to God this wasn't the last time they'd see each other."
    ],
    "authorname": "rockchaser",
    "tags": [
        "sci-fi",
        "science fiction",
        "fantasy",
        "adventure",
        "action",
        "plot",
        "romance",
        "powers"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/unity-and-destiny-pt-08"
}
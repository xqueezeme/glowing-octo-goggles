{
    "title": "Oh My God Ch. 10",
    "pages": [
        "This is final chapter of the story of Kathy and Ian. It will make much more sense if the chapters are read in order. Ian and Kathy meet when she tries to cross the road in the middle of a bicycle race. She is caught by a pack of riders and all of them avoid her except Ian who is trapped by the pack. After they collide Ian takes Kathy to a clinic to get their wounds treated. Then he walks her to her home where their relationship starts to grow.\n\nChapter 10 - Teaching Ginger\n\nAbout a week after we returned from our honeymoon, I started out of the bedroom we were using as a den and stopped when I heard a lot of giggling. Giggling and the music Kathy liked to dance to. Instead of barging out of the room I called out, \"Kathy can you come here a minute?\"\n\nKathy rushed into the room in nothing but a nightgown and knelt in front of me. \"Yes Ian?\"\n\nI asked, \"Is that Ginger and Lila?\"\n\n\"Yes sir.\"\n\nI grinned, \"Well teach her well. Jeff seems like a good guy and they seem like a really nice couple. Could you bring me some iced tea, please.\"\n\nShe grinned back at me. \"Yes sir. ... Ian, how did you know? Please tell me.\"\n\n\"You mean besides all the giggling I just heard and the music? And the way you three were talking at the wedding reception. I haven't a clue.\"\n\nShe blushed, \"I should know you know the signs. You can read me like a book. We'll do our very best to teach her. I'll get your tea right away.\" She started to leave and asked one more question, \"Ian, Ginger thinks Jeff wants to try anal. Do you know if he does?\"\n\nI smiled at her. \"Yes pet, he does want to try anal. He told Paul and I at the reception.\"\n\nShe came back and gave me a kiss. \"Thank you Ian.\" She left gracefully to get my tea.\n\n~ ~ ~ ~ ~\n\nThree weeks later, Ginger was as nervous as she could be. Her skin felt too tight and hot. She could barely eat supper as she anticipated giving Jeff a lap dance.\n\nAs Jeff ate he watched his wife. She barely ate half her usual portions and was almost twitching she was so nervous. He decided that it must be tonight that she was going to spring her surprise on him.\n\nThey finished supper and she started clearing the table. She was a little puzzled when Jeff got up and helped her. Generally he just went to watch TV.\n\nHe started to sit down in his chair and then moved to the couch. He wondered if she was really going to give him a lap dance. He was half way thru a \"Law and Order\" that he'd seen three times before when the music started. What really got his attention was Ginger when she walked in wearing a short, skin tight dress. One that he had never seen before. It looked like Spandex and molded to her every curve. His mouth went dry, he could see her nipples poking thru the thin material.\n\nShe walked over to him and said, \"Hon, I want to do something will you turn off the TV.\"\n\nJeff's fingers couldn't find the off button on the remote fast enough.\n\nGinger stepped back about three steps and started swaying to the music.\n\nJeff looked at her closely. He'd never seen her this way. She was obviously nervous but she was also sexy and alluring. He thought she was sexy anyway but there was something special this time. His eyes were riveted to her body as she swiveled and swayed in time to the music. He looked at her face and it was alive with eagerness. She was watching him closely.\n\nJeff leaned back on the couch and spread his legs apart to give her room to get closer.\n\nGinger smiled and said, \"Jeff, honey, this is for you. Only for you. I love you.\" She pulled the one sleeve down over her shoulder as she danced slowly toward him.\n\nJeff was mesmerized as she pulled the stretchy dress down and exposed her breasts. He didn't realize how close she was until she kissed him and then stood back up moving away slightly.\n\nGinger nervously watched her husband as she started to strip. She suddenly realized he was totally focused on her. She got a thrill from being able to entice him this way and her pussy started to get wet. She thought, \"Kathy and Lila were right. Stripping for someone you love and who loves you changes everything. You can be free and safe at the same time.\"\n\nShe stripped the stretchy dress off over her head and danced back to Jeff. She sat in his lap and leaned her head back getting as much body contact as she could, whispering in his ear, \"You can touch me honey. Please touch me.\" She could feel his hard cock against her ass as she undulated in time to the music.\n\nJeff slid his hands up her sides and gently cupped her breasts. He kissed her ear and whispered, \"Jesus Ginger. This is fabulous. Where did you learn this?\"\n\nShe whispered back, \"Lila and Kathy. They taught me some dance moves.\" She pulled away and stripped off her thong panties that were now soaking from her juices, showing off her freshly shaved pussy. Then she knelt between his legs and rubbed her face on Jeff's crotch.\n\nJeff gently put his hands on his wife's head and gave a quiet moan.\n\nGinger smiled as she unbuckled his belt and slowly pulled down his pants and underwear. When they were around his ankles she sucked his cock into her mouth and swirled her tongue around the head.\n\nJeff moaned, \"Jesus Ginger. I'm going to come if you keep that up.\"\n\nGinger was surprised at her reaction. She usually didn't like giving head but this was different. Jeff was really entranced. Ginger was amazed that she could give him so much pleasure with her mouth. She decided to go ahead and bring him off in her mouth.\n\nJeff was panting and squirming on the couch as Ginger suckled on him. Finally, he said, \"Ginger I'm going to come. I can't hold it back you're just too good.\"\n\nGinger pulled back and said, \"Come for me honey. Come in my mouth.\" Her soft words pushed him over the edge. Jeff started coming seconds after she started sucking again.\n\nGinger was surprised that the cum didn't taste bad, mostly it didn't taste at all it was just a little slimy. She swallowed all of it and started licking his cock and balls clean.\n\nJeff was in a state of stun. Ginger had sucked him off before but she'd always pulled off and let the cum splash on his stomach. This was the first time she'd ever let him come in her mouth much less swallow it. This thought and her licking and sucking had him getting hard again.\n\nGinger was amazed at how fast Jeff had bounced back. She remembered what Kathy and Lila had said and she tucked his hardening cock between her breasts and started unbuttoning his shirt as she moved up and down massaging his cock.\n\nJeff was stunned at this performance. He thought he'd seen some hot lap dances in the clubs but this was far better than anything he had seen. \"God Ginger this is so good. You're so beautiful.\"\n\nGinger smiled to herself as she slid up and licked his nipples. She thought, \"Lila and Kathy were so right. Jeff is really getting off on this and so am I! I don't know when I've ever been this horny! I don't feel degraded Jeff is making me feel good about this. I can trust him totally. Oh God maybe they were right about getting fucked in the ass too... No let's just finish this before I explode!\" By this time Ginger had worked her way up Jeff's torso and had his face buried between her boobs.\n\nJeff was in seventh heaven. He was sliding his hands over her ass and down the insides of her legs. Just because he wanted to he started licking between her breasts. Ginger sucked in a big breath and moaned, \"God yes. Lick me there.\"\n\nRemembering what Lila and Kathy said, Ginger whispered, \"Honey hold my hands behind my back. Lift them up if you want me to move up. Pull them down if you want me to move down. Please.\"\n\nJeff's raging hard-on got even stiffer when he heard this. He gently captured her hands and tried it. It worked! He moved her hands and she moved the way he wanted. He moved her sideways, licking and sucking on her tits. He then moved her hands higher and kissed his way down to her pussy. Jesus she was wet! And she was starting to whine like she was about to come. He reached up and inserted two fingers in her pussy and started gently pumping them in and out while he licked.\n\nGinger was going out of her mind. She was hotter than she'd ever been! Jeff was totally in control with her hands held behind her. God the girls were right it was liberating to not be in control all the time. When Jeff stuck his fingers up her cunt everything went warm and soft and hazy. Far off she could hear Jeff say, \"Come for me Ginger come for me now,\" and she did. She came and came and came.\n\nJeff was amazed at the strength of her orgasm. He pulled his fingers out of her and lowered her arms. Obedient to a fault Ginger slid back down his body. She slid down and suddenly his cock slipped into her pussy.\n\nGinger gave a sigh and leaned her head forward when she felt Jeff fill her. \"Thank you Honey I don't know how to tell you how wonderful this is.\" In leaning forward her hair fell around them and Jeff found himself enclosed with Ginger.\n\nJeff kissed her earlobe and whispered, \"My God Ginger, this is wonderful beyond my wildest dreams. Thank you my love. Thank you for this wondrous gift.\"\n\nGinger whispered back, \"I was doing this as a gift for you but I've gotten so much from it I feel like it's a gift from you to me. Oh Jeff, Kathy and Lila told me it could be great but I never imagined! I love you so much.\"\n\nThey kissed and ground together until they both came again. They sat holding each other for about five minutes when Ginger said, \"Let's see if they were right about the rest of it.\"\n\nJeff said, \"The rest of what?\"\n\nGinger slipped off him and got his pants from around his ankles. She stood and led him to the bathroom where they showered together then they went to bed and cuddled.\n\nJeff held her to him and gently rubbed her back, especially the spot in her lower back that seemed to make her melt. He whispered endearments to her and kissed her often. He softly said, \"Wow. Ian and Paul were right.\"\n\nGinger sleepily asked, \"Right about what?\"\n\n\"They guessed at the reception what you Kathy and Lila were talking about. They even told me to shower with you and go to bed and hold you just like this. It's so special I don't know how much we missed all these years. Sweetheart that was the most loving and erotic thing I've ever experienced. You are so magnificent and sexy and beautiful. I love you.\"\n\nGinger started quietly crying. She sniffed, \"I'm so glad you liked it. I was worried that it would turn you off, me acting like a wanton slut. But God it was so good for me too. I felt like I'd been freed from a cage. It just got better and better but nothing was as good as when I was in your lap with my hair around us. That made me feel so loved and safe. Jeff I love you. Only for you will I be able to dance like that.\"\n\nJeff mumbled, \"That's good to know love. And that dress! You look sensational in that dress. It was dynamite. Whatever it cost it was worth every penny.\"\n\nThey both drifted off to sleep holding each other.\n\n~~~~~\n\nAt the reception after Paul's formal promotion to Captain, Jeff and Ginger walked up to us. They congratulated Paul again.\n\nGinger hugged Lila and Kathy and said, \"You two were so right about dancing. It's fabulous. It's brought Jeff and I much closer together. Thank you.\"\n\nJeff turned to Paul and I, \"You two were right on about what they were planning. I still don't know how you could tell from across the lawn.\"\n\nKathy blushed and said, \"I can never have any secrets from Ian. He can read me like a book.\"\n\nGinger looked at me and said, \"You almost caught us practicing one day, didn't you?\"\n\nI nodded.\n\nShe asked, \"Why didn't you just barge out to see what was going on?\"\n\nI smiled, \"I had a pretty good idea of what was going on. Three of you giggling your heads off and the music playing. I didn't want to embarrass you and turn you off on the idea. I think these lap dances are about the most wonderful loving things a woman can give to her man. I wouldn't do anything to deprive you two of the experience. How did it go?\"\n\nGinger blushed but Jeff said, \"You hit it right on the head it was the most wonderful loving thing I've ever experienced. I think Ginger would agree.\"\n\nGinger nodded and added, \"Yes and I got a fantastic sexy dress too.\"\n\nPaul pulled Lila into a hug and said, \"We're so happy for you. I've noticed that you've been a lot more relaxed lately Jeff. That must be Ginger's doing.\"\n\nI hugged Kathy and said, \"That goes for us too. Kathy had a great time teaching Ginger.\"\n\n~~~~~\n\nIn the car on their way home Ginger asked, \"Jeff, do you want to do me anally.\"\n\nThe car swerved momentarily and Jeff stared straight ahead and answered, \"Yes, I'd like to try anal but I'd never do it if you didn't agree. Why do you ask? This is so sudden?\"\n\n\"Sweetheart, I think you've been trying to broach the subject for almost a year now. I've been really scared. I've heard it hurts.\"\n\n\"So why now Ginger? What have I done to deserve this? Why the change?\"\n\n\"Lila and Kathy. They're why. They both swear that they get incredible orgasms from being fucked in the ass. ... Jeff I love you and I want to give all of myself to you. After they were so right about the lap dance I can't help think that there may be something to anal too. One thing they both said is that you have to prepare me before doing it. I'm not sure what they mean. Maybe you can ask Ian or Paul what they do. I know it's embarrassing but please think about it. Kathy says Ian is always careful to loosen her up before they actually do it. She also says that giving me an enema reduces the problems of disease.\"\n\n\"Ginger, you're more important to me than any embarrassment. Of course I'll ask. I think I'll talk to Ian. I really can't see me talking to my Captain about anal fucking.\"\n\nGinger smiled, \"Thanks love. I'll talk with Kathy and Lila. Maybe I'll ask them to train me so I get over my jitters. ... God I can't imagine having this conversation six months ago. Now I can't imagine not having it.\"\n\nJeff pulled carefully into the driveway. \"Yeah, it's quite a change but it's so much better now. I've never felt closer to you than I do now. I love you so much I can't believe I was drawing away from you. We were drifting apart until you were bold enough to dance for me. Now I feel closer to you than ever. It would have never happened if you hadn't been strong enough to get Kathy and Lila to teach you how to lap dance.\"\n\nGinger had tears running down her face. She said, \"Jeff you don't know how many times I almost backed out and quit. Ian was right, if he'd popped out of his office that day I'd have quit. I was naked except for a thong and practicing with Lila playing you. Kathy is right Ian is very special. When I started that first dance if you'd so much as frowned at me I'd have run and hid. It would have been over and we'd have missed this closeness we have now.\"\n\n\"I'm so glad I have such a brave wife. I was stunned when I realized what you were doing for me. For us. Ginger I can only imagine how much courage it took you to dance for me. I'm glad Ian and Paul knew what you girls were talking about at the wedding reception. So I wasn't totally surprised. Come on lets go take a shower and cuddle.\"\n\nGinger leaned across the seat and gave Jeff a long soft kiss. \"Sounds super Hon.\"\n\n~~~~~\n\nKathy and I were laying in bed cuddling when she said, \"Ian you are so great. You make me so proud.\"\n\n\"I'm glad. What did I do to make you proud this time?\"\n\n\"You talked to Jeff and told him to expect a surprise. I think you even told him it would be a lap dance. You helped get him in the right frame of mind to accept Ginger's gift. I know she was incredibly nervous. She almost quit a half-a-dozen times while we were practicing. She almost jumped out of her skin that day you had me get tea for you. But you knew what was going on and didn't interrupt. I'm so proud that my master and husband knows me so well and is so attuned to what's going on with me...Did you know Ginger also ask us about anal? I think she's going to let Jeff try it.\"\n\nI kissed her. \"Well we'd better get ready for some questions. Hadn't we.\"\n\nKathy was silent for a few minutes. \"Why we master?\"\n\nI kissed her on the forehead. \"Well, me because I can't see Jeff asking his Captain about ass-fucking techniques. Can you? You because you and Lila did such a good job training Ginger to lap dance, I'm sure she's going to ask you for help with this too.\"\n\nKathy was quiet again then she started to giggle. \"I think you're probably right my love. I'd better find my small butt plugs.\"\n\n~~~~~\n\nAbout a month later Jeff and Ginger invited us over to a barbecue. We were the first to arrive which seemed a little strange because we hadn't especially rushed to get there early. Ginger answered the door. She gave me a beer and quickly pushed me out on the patio where Jeff was lighting the fire.\n\nI asked, \"Jeff, what's going on?\"\n\nHe blushed and looked at me, \"What do you mean?\"\n\n\"I mean there were supposed to be a lot of people here. I'm not famous for showing up early. I repeat what's going on?\"\n\nHe blushed even more. \"Kathy is right you are sharp. We invited you over early because Ginger wants me to talk to you about anal fucking. Specifically, how do you prepare Kathy before so it doesn't hurt? I just can't ask Paul...\"\n\nPaul walked up and said, \"Can't ask me what?\"\n\nJeff turned beet red.\n\nI answered, \"Apparently, Ginger is interested in letting Jeff do her anally. He was asking me for pointers.\"\n\nPaul said, \"And you couldn't ask me Jeff?\"\n\nJeff stuttered, \"It's...it's not something I'd normally bring up with my boss much less my bosses boss, Captain.\"\n\nPaul chuckled, \"I can see your point. Well you've come to the right man for advice. He helped Lila and I. I'm sure he can help you and Ginger. By the way, how are the lap dances?\"\n\nJeff looked up and smiled, \"I don't see how but they keep getting better and better. Ginger is so uninhibited now and knowing she is doing it just for me sends shivers down my spine and makes my dick as hard as steel. The best is when she has her hair surrounding both of us. I feel so close to her then...and after. Maybe after is best. She washes me and I wash her then we usually go to bed and cuddle. It's warm and dreamy like the really good feeling you get just before you fall asleep. I get to hold the most precious thing in the world and she holds me and we kiss and cuddle. It's so good I can't really describe it.\"\n\nI said, \"Yeah. I think both Paul and I know what you're saying.\"\n\nIn the kitchen the girls were talking when Ginger said, \"Lila, Kathy, I need your help.\"\n\nKathy asked, \"Is something wrong?\"\n\nLila said, \"Jeff isn't getting tired of lap dances is he?\"\n\nGinger blushed as only a redhead can, \"No he is most definitely NOT getting tired of lap dances and neither am I. Jesus I feel so free when I'm dancing for him. He's always so sweet after. I feel so warm and safe and loved. No I need help with anal. I told Jeff I'd try if he wanted to. I want help from you two to know how to do it right. So it feels good. You know what I mean?\"\n\nBoth girls nodded. Kathy said, \"I'm sure Ian knows. He and Paul are probably giving Jeff some tips right now. The hardest thing is to get over the fear.\"\n\nGinger interrupted, \"How do you do that? Get over the fear, I mean. Jeff is so big! How do I take that up my ass.\"\n\nKathy grinned, \"This is going to sound stupid but take a good look in the toilet the next time you take a good shit. It's probably as big as Jeff and It didn't hurt a bit coming out. If you learn to relax, Jeff won't hurt going in.\"\n\nGinger stared at her open mouthed. Then she blushed again. \"I guess you're right. I never thought about it that way. So you'll help me?\"",
        "Lila laughed, \"Of course we will. Kathy, your place or mine?\"\n\nKathy answered, \"Probably mine. I have that set of butt plugs Ian used to train me and we used to train you.\"\n\nLila said, \"That would probably be better, I've only got the one I have in now and the bigger one to stretch me a little.\"\n\nKathy grinned, \"I'm wearing mine too.\"\n\nGinger gasp, \"Why are you both wearing butt plugs?\"\n\nLila grinned, \"Because Paul likes it when I don't have on any underwear. I wear it partially to keep it from staining my dress and partly because it makes me so hot.\"\n\nKathy agreed, \"Yeah, the butt plug along with the tampon and a couple of hours I'm almost quivering with need.\"\n\nGinger said, \"Tampon?\"\n\nLila said, \"Yeah, same reason to keep from staining our dresses. A couple of hours and I'd be leaking like a sieve.\"\n\nGinger asked, \"Bra's?\"\n\nBoth girls smiled at her, \"Nope\"\n\nKathy giggled, \"You really want to turn Jeff on, come out in a sundress like this with nothing else on. I've burned a couple of suppers that way.\"\n\nLila grinned, \"You too! God, Paul is all over me when I'm this way at home. I almost never wear lingerie anymore unless it's specifically to have Paul take it off me.\"\n\nGinger shook her head. \"I could never imagine doing something like that...at least I couldn't before you two taught me to lap dance.\"\n\nKathy said, \"Yeah but it's really great. You never have to worry about your husband getting bored. One more thing, I never wear a butt plug or tampon when I'm at home. I don't want anything to get in Ian's way.\"\n\nSoon all the other guests arrived and we had a great time. We left about midnight. On the way home Kathy told me that Ginger would be coming over for lessons in anal. She outlined her plan for teaching Ginger. I told her to let me know and I'd be sure to not embarrass her student. I told her that Paul and I would be teaching Jeff to be gentle and go slow with Ginger.\n\nAbout two weeks later I was with a blushing Jeff as we perused items in a sex shop. Jeff was still a bit inhibited even tho Ginger had expanded his horizons. I had the feeling that each of them were afraid of disappointing the other.\n\nJeff quietly asked, \"What are we here for Ian?\"\n\n\"Well you need to get some lube for Ginger and we need to get you a training aid.\"\n\nHe gulped, \"What kind of training aid?\"\n\n\"Don't worry I won't embarrass you. Well, not too much. We'll get you something to help you work on loosening her up. Something to practice on.\" I pulled him over to the shelves where they had the lube. I handed him a good sized bottle of edible lube, cherry flavored. I said, \"Unless you'd like a different flavor.\" He blushed again. We wandered over to where they had a huge selection of dildos, vibrators and butt plugs. To one side they had a fair sized selection of artificial pussies and blow-up sex dolls. I picked out a small item that would fit easily into Jeff's hand. It was molded to look like a woman's pussy with her shape around the rest of the item. It was about two inches in diameter and five inches long. It was made of very soft and stretchable material and had a small hole drilled the length of the tube. the hole was about a quarter of an inch in diameter.\n\nJeff looked a little relieved. He said, \"This is the training aid?\" I nodded and we went to check out.\n\nWhen we got back to my house I took him into my den and we closed the door. I had Jeff sit down and pulled my chair out and sat with him. \"Jeff try to push your index finger into the hole.\"\n\nHe took it out and tried. He said, \"It'll never fit.\"\n\nI smiled and said, \"That's the first lesson. A womans pussy lubricates when she gets excited. Her ass won't. Now put some lube on the hole and some on your finger and try again.\"\n\nHe did and this time it slipped inside with just a little effort. I said, \"Good now add some more lube and get it all the way in. You want to move slowly and gently. Push it in and then pull out a little and push it in a little further each time.\"\n\nHe said, \"Okay but my dick is a lot bigger than my finger.\"\n\n\"Yup, it is. So the next step is to back out and do it again with two fingers. The idea is to get Ginger slowly and gently used to having something in her ass. Let her relax her ass and loosen her up. You have to go just as slow or slower with two fingers. Ask her for lots of feedback. Make sure she's okay and kiss her and caress her in other ways. Her ass will loosen up where the training aid won't. When you can get three fingers all the way in her ass then you can use your cock. She's still going to be tight but if you go slow and let her determine the pace it should be great for both of you.\"\n\nI coached him thru three fingers and said, \"If you want you can stuff your dick into that thing. It'll be a lot tighter than Ginger if you've loosened her up well.\"\n\nJeff blushed furiously and said, \"No I think I've had enough for now. Any other advice?\"\n\nI smiled and said, \"I didn't mean to embarrass you. I would talk to Ginger. After she's had a couple of sessions with Kathy and Lila ask her to let you give her an enema. Maybe let her give you one. It'll get both of you used to you playing with her ass.\"\n\n\"Why... why let her give me an enema?\" He stuttered.\n\n\"Well, she can show you how to do it to make her feel good. Also, that way you're not expecting her to do all the giving in. It shows her you're willing to take some risks too. She may play with your ass a little and you'll get to see how it feels.\"\n\n\"I guess that makes sense.\" He said. After a pause he asked, \"Has Kathy ever played with your ass?\"\n\n\"Yes,\" I said, \"It was quite erotic. She sucked me off with two of her fingers up my butt, massaging my prostate.\" I showed him to the bathroom and let him wash his hands. He left with the lube and toy in the bag from the sex shop.\n\nA couple of weeks later I was in my study while Kathy and Lila were working with Ginger. Suddenly there was a loud wail that sounded like someone coming explosively. In about a minute I heard someone crying and Kathy and Lila trying to calm her down. I stepped into the hall and Ginger ran into me.\n\nShe gasp, \"Oh God\" and tried to get around me.\n\nI could see she wasn't in any state to drive so I took the keys from her hand. I softly said, \"Ginger sit down on the couch and we can talk. You can't drive like this. If you want I'll call Jeff to come get you.\"\n\nShe blushed bright red. \"No. Not Jeff. I can't face him right now.\" She sat on the couch and was wringing her hands.\n\nKathy headed for the kitchen and brought back water for all of us. I asked, \"Ginger can you tell me what happened?\"\n\n\"I... I'm so embarrassed.\"\n\n\"No need to be. It sounded like you had a really strong orgasm. What happened?\"\n\nShe blushed as only a redhead can and answered in a soft voice. \"Lila and Kathy stroked me to an orgasm. In my ass. I'm so ashamed. I'm not a lesbian.\"\n\nI said, \"Kathy are you a lesbian?\"\n\nShe was kneeling at my feet. \"No master, I'm not. I might be a little bi-sexual but Lila is the only woman I've ever been with. Master we were just using a dildo on Ginger's ass to give her the feel for it and she went over the edge.\" She turned to Ginger and took her hands. \"I'm sorry if we embarrassed you.\"\n\nGinger whispered, \"I guess I overreacted. You and Lila were just doing what I asked you to. I apologize to both of you. It's just that it came over me so suddenly and was so strong!\"\n\nI asked, \"Ginger, what were you thinking about when you came? Can you imagine how good Jeff would feel if you came like that with his cock up your ass?\"\n\n\"N...no. How do you think he would feel?\"\n\nI took one of her hands from Kathy. \"I think he'd be on top of the world. He loves you and to be able to bring you such pleasure is the best feeling. I know that I never feel better than when Kathy just explodes in orgasm.\"\n\nLila said, \"That must be right because Paul always is really sweet after I've given it all up for him. The best part is after. Paul always holds me and cuddles with me and gives me kisses. He makes me feel like I'm the most important thing in the world to him. It's warm and safe and loved. God it's great.\"\n\nKathy said, \"Yeah Ian always makes me feel so good. I'm floating on clouds. It's the best, the absolute best.\"\n\nGinger nodded, \"Oh God, you mean it gets better! I thought I was going to turn inside out. ... What should I do now?\"\n\nI said, \"Ginger, tell Jeff. Tell him everything. I've been showing him how to gently loosen your ass and I've talked to him about giving and getting enemas. Trust him to understand. Tell him that Kathy and Lila brought you to orgasm using a dildo in your ass. You might ask him to get one to use to practice on you. Show him how to give you an enema.\"\n\nGinger sipped her water and thought for a while. \"You really don't think Jeff will be repulsed because two women brought me to orgasm while ass fucking me with a dildo?\"\n\nLila and Kathy answered together. \"No! If anything it'll probably turn him on. You may be walking bow-legged tomorrow.\"\n\nGinger blushed, \"I was really daydreaming about Jeff fucking me when I came.\"\n\nI said, \"Tell him that and you will be walking bow-legged. It'll turn him on so much you won't be able to believe it.\"\n\nGinger and Lila left together. As the door was closing Kathy ask me. \"Master could you please ass fuck me? I'm so horny\" The door closed on the rest of our conversation. Kathy didn't have to try very hard to convince me. She gave me a sexy lap dance that culminated in me taking her ass. Afterward, we showered and laid down to take a nap.\n\nKathy whispered, \"Thank you master for helping Ginger. She was so embarrassed when she came from having Lila and I work on her. She's almost ready. She gets excited...she got excited at just the thought of us playing with her ass. What do you think will happen now?\"\n\nIf she is brave enough to tell Jeff everything will be fine. If she's not then there will be problems. What do you think? Does she trust Jeff enough to tell him?\"\n\nShe thought for a minute and said, \"She loves Jeff and knows he loves her almost as much as I love you. Yes she trusts him. She'll tell him.\"\n\n\"Then everything will be fine. You can expect her for the next lesson.\" We drifted off to sleep in each others arms.\n\n~~~~~\n\nGinger was very nervous as she set the table for supper. She fumbled the knives and forks and almost broke a glass. She set the table with candles and their best China. She'd dressed up for dinner, even taking a shower after starting the meal.\n\nJeff noticed the signs immediately. Ginger was really worked up about something. She was afraid of what he would do or say about whatever it was, like the time she caused an accident and totaled their car. The insurance rates had been really high for about three years. He undressed and took a quick shower before dressing up a little. He put on some good slacks and a dress shirt instead of sweatpants and a t-shirt. He left the collar open, he hated ties. Dressed he went out and started reading the paper, knowing from experience that pushing Ginger was a sure way to get her to clam up.\n\nGinger called, \"Honey, dinner is ready\" and Jeff went to the table.\n\nHe said, \"You look lovely tonight. Any special reason?\"\n\nGinger blushed, and mumbled, \"Yes but I'm embarrassed to tell you...\"\n\nHe kissed her on the forehead, \"Take your time I'll wait. In the meantime dinner looks delicious.\" Looking at the table he asked, \"Would you move your plate here beside mine so I don't have to look thru the candles to see you. You're so beautiful.\"\n\nGinger moved her plate and Jeff turned off the lights. They ate in the candlelight and talked about inconsequential things. Finally, Jeff accidentally hit on what was bothering her. He asked, \"How are Kathy and Lila? I know you were going to visit them today?\"\n\nGinger sucked in a big breath and stared at her half-full plate while Jeff waited. In a shaky voice she said, \"Jeff something happened today while at Kathy's. I...I don't know how to tell you.\"\n\n\"You're not hurt are you?\"\n\nGinger lifted her head a little and smiled at Jeff. \"No honey I'm not hurt. Shocked but not hurt.\" She gave a big sigh and continued, \"I guess I'd best do what Ian told me to do. He said to tell you everything that happened.\"\n\nJeff nodded and gathered himself and gently held her cheek in his hand. \"Please tell me. I'd like to know.\"\n\nNodding she looked him in the eyes. \"Jeff, I've been having Kathy and Lila help me get ready for anal. Jeff it feels really good.\"\n\nJeff kissed her. \"I know Ian has been coaching me in how to prepare you for anal. I even have a practice tool that I use. Ian says the two main secrets are going slow and lots of lube.\"\n\nGinger smiled and kissed his hand. \"Funny that's exactly what the girls say. Anyway today I started on a bigger dildo. You can't do this with clothes on very well so all three of us were naked in Kathy's guest room. Lila and Kathy were lubing my ass and then they started using the dildo. They were almost chanting, 'Nice and slow. Lots of lube' over and over as they worked the dildo into my ass. God it actually felt good. I was lying there face down with my ass in the air and I must have started moving because my tits were rubbing on the sheets. My mind was sort of drifting and I started thinking about you fucking me and I exploded. I had an incredible orgasm. I even squirted and soaked the bed. I was so upset and embarrassed. Jeff it's been haunting me all afternoon. That incredible orgasm from two women.\"\n\n\"Where does Ian come into this?\"\n\n\"I was so shook. I threw my clothes on and stumbled out of the bedroom. I ran into Ian. He stopped me. He took my keys away so I couldn't leave. He offered to call you to drive me home. I guess he was right. It took me an hour to calm down enough to be rational enough to drive. He told me you'd understand but I had to tell you.\"\n\nJeff pulled her gently into his lap. \"I'm so glad you told me. Love I don't want there ever to be anything you can't tell me. I love you.\" He kissed her.\n\nGinger sighed, \"Ian was right. I feel so much better now. I love you too. You're so good to me.\"\n\n\"So you really came hard from the dildo in your ass?\"\n\nGinger blushed and ducked her head under his chin. \"Yeah. Really hard. I felt like I was squeezing down into a little ball then I just flew apart. I'm really embarrassed that two women made me feel that way.\"\n\n\"And you were imagining me fucking you?\"\n\n\"Yeah, it really set me off.\"\n\nJeff gave her a kiss. \"Ginger my love. What an ego boost to realize that you were thinking of me when you came. Yeah it felt good when they were doing you but it sounds like you were in control until you started thinking about me doing you. Is that right?\"\n\nA broad smile broke over her. \"Yeah, as soon as I started dreaming of you fucking my ass it got all kinds of better...Oh Ian was so right. I can trust you with anything.\" She giggled and gave a sexy wiggle of her ass in his lap.\"\n\n\"Soooo, are you sore from this afternoon?\"\n\n\"No. Why? What do you have in mind?\"\n\n\"Well, I'd like for you to tell me how to give you an enema. Then I want to practice loosening up your ass. The training tool is Okay but I don't get any feedback on how I'm really doing.\"\n\nGinger giggled again, \"Race you to the bathroom Hun.\"\n\nTwenty minutes and three enemas later Ginger was face down on the bed with her ass propped in the air by pillows. Jeff was running his fingers around her ass as he held her down with one arm across the small of her back.\n\nGinger said, \"Jeff, I need a safe word like Kathy and Lila. I want to use 'Red Light' is that alright?\"\n\n\"That's fine. If you say 'Red Light' everything stops. Is that right?\"\n\n\"Yes. That's what they tell me.\"\n\nJeff put some lube on his finger and pushed it into her ass up to his first knuckle. Ginger sighed, \"Oh that feels good. Your finger is bigger than Kathy's but it doesn't hurt at all.\"\n\nJeff kissed her left ass cheek and slowly sank his finger all the way in her ass. He added some lube and started gently sawing it in and out. He used his other hand to stroke the inside of her thighs\n\nGinger started lifting her ass to his finger. \"Mmmmm good. That's good Hun. So good...more please more,\" she whispered.\n\nJeff gently started moving his finger in a circular motion and adding lube before pulling out and starting to work two fingers into her ass. He whispered, \"Talk to me love. Talk to me.\"\n\nGinger half moaned, \"That's good...a little slower would be better.\"\n\nJeff slowed down and added more lube.\n\nGinger said, \"God yes! Just like that. That's really good.\"\n\nFor his part, Jeff could feel her relax. It got easier to squeeze his fingers into her. Jeff realized, \"If you pay attention this really isn't that hard. God it's fun to play with her ass! She's got such a great ass.\" He started kissing both globes of Ginger's ass and he snaked his other hand under her and started playing with her pussy.\n\nGinger moaned loudly, \"Oh God, oh God, oh God!\" and her ass relaxed even more.\n\nEmboldened, Jeff added more lube and a third finger, careful to go very slow. Ginger was starting to pant.\n\nSoon Jeff was pumping three fingers all the way into her ass and had two fingers up her pussy.\n\nGinger moaned, \"Fuck me. Jeff please fuck my ass...oh God please, please...\"\n\nJeff was a little stunned but he got behind her and rested the tip of his cock on her asshole as he thoroughly lubed it. He slowly started applying pressure to her ass and to his surprise he started slipping in. It was nowhere near as hard as he expected it to be.\n\nGinger was going a little crazy. She was rotating her ass in small circles and pushing back on Jeff, moaning. \"Good. So good. God Jeff this is good. Push harder! Get it in and fuck my ass! Pop my anal cherry. God Jeff this is so nasty but it feels so GOOD!\"\n\nJeff was straining to go slow enough. He had the most insistent urge to just slam into her ass but he restrained himself and added more lube. He reached under Ginger and started playing with her pussy again. To his surprise the head of his cock slipped thru Ginger's anal rings and he suddenly was two inches deep in her.\n\nGinger's head snapped up and Jeff thought he'd hurt her until she gasp, \"God YESSS! That's it Jeff. Easy in and out and give me all of your cock. Fuck my ass Jeff. Fuck me good!\"\n\nWith a little patience Jeff was soon balls deep in her ass. He pulled almost all the way out and added lube as he slowly slid back into her.\n\nGinger pushed back and wiggled her ass as he entered her. She groaned, \"Yesss, yesss, do my ass good Hun. Fuck me good.\"\n\nShe flipped her head back and Jeff grabbed a handful of her hair, holding her head up as he fucked into her. He soon learned that he could pull all the way out and then go right back in with just the right resistance and it felt GOOD. Really, really good!\n\nGinger really liked it too she was egging him on. \"Fuck me Jeff. Fuck my ass hard. I want you to come in my ass and make me explode. Oh God this is better than the dildo this afternoon much, much better. Fuck me honey. Fuck me hard.\"\n\nIt didn't take much of this before they both exploded. Jeff groaned as he pumped what felt like gallons of cum in her ass. Ginger quivered and screamed and squirted. She soaked the bed before she collapsed with Jeff on top of her, still embedded to the hilt in her ass.\n\nJeff started to move off her but Ginger said, \"Stay! Please Jeff stay it feels so good with you up my ass...My God that was incredible. So much better than this afternoon. Oh honey thank you. I love you.\"\n\nJeff put his elbows on the bed to take some of his weight off her and gently kissed the nape of her neck. \"My God Ginger! That was fabulous. It was incredible. I love you so much...\"",
        "He finally shrank and fell out of her ass. Then he rolled off her. Ginger for her part was wiped out but she crawled over to lay on his chest. She kissed him. \"Damn Ian taught you good.\"\n\nJeff laughed, \"No better than Kathy and Lila taught you. Jesus Ginger, that was incredible.\"\n\nGinger said, \"Yeah, I came harder than I did at Kathy and Ian's. We need to invite them over for another barbecue to thank them.\"\n\nJeff said, \"Do it. Just Ian and Kathy, Paul and Lila. I think we'll want to talk and Lieutenant Nostram is way too uptight for that conversation.\"\n\nGinger laughed, \"Oh yeah. He's so tight he squeaks. He probably thinks the Fundamentalist Baptists are morally loose and promiscuous.\"\n\nThey showered together and went to bed. As they were falling asleep Ginger mumbled. \"Love this may be the best part of all. I feel safe and warm and loved.\" She snuggled into Jeff's arms as he silently agreed with her. They both drifted off to sleep.\n\n~~~~~\n\nWe arrived at the barbecue and were surprised to find it was only for the six of us. We were standing around outside while Jeff tended the meat and the girls were all in the house.\n\nI broached the subject indirectly, \"Jeff why the invitation?\"\n\nHe blushed lightly and answered, \"This is sort of a thank you from Ginger and I.\"\n\nPaul said, \"Oh?\"\n\nJeff continued, \"Ian remember the week when Ginger was so upset and you stopped her from leaving?\"\n\nI nodded and Paul raised a questioning eyebrow.\n\nJeff explained, \"Ginger was having a training session with Kathy and Lila. She had an orgasm and basically freaked out at the thought of two women making her cum. She said it was a doozy. Anyway, Ian stopped her from leaving until she calmed down and he advised her to tell me everything.\"\n\nPaul asked, \"Anal training?\"\n\nJeff nodded, \"She was nervous but she told me everything. I guess I did alright because we gave her an enema and then I started practicing my techniques on her. It's much easier when you get feedback. Well, one thing led to another and we had anal sex and it was fabulous. Ginger was so excited and I almost passed out I came so hard. Ginger had a gut buster of an orgasm. She squirted and soaked the bed. After we showered we had to change it before we could cuddle. Anyway, we wanted to thank you for everything. We were drifting apart until Kathy and Lila taught Ginger how to lap dance. Now this. We just wanted to tell you how much we appreciate what you've done for us.\"\n\nAbout that time there was a squeal from the house and we looked inside to see three women hugging, kissing and jumping up and down.\n\nPaul grinned, \"I wonder what that's all about. Think it's about anal sex?\"\n\nI considered for a moment and said, \"Naw. Popping Ginger's anal cherry wouldn't cause that. I think someone in there is pregnant.\"\n\nWe all sat down at the table and had a good meal. We were talking about general things. Ginger and Jeff had thanked all of us again. Suddenly the talk stopped and the silence was deafening. Since most of the conversation had been the girls talking. The three of us look expectantly at them.\n\nAll three of them dropped their eyes to the table.\n\nKathy raised hers and looked at me. \"Ian, I had some news from the doctor's office today.\" She slipped off her chair and knelt by mine. \"Ian, I'm pregnant...about eight weeks.\"\n\nI reached down and pulled her up into my lap and kissed her.\n\nI heard Lila say, \"Me too Paul, about six weeks.\"\n\nThen Ginger said, \"Jeff, I'm about seven weeks.\"\n\nWhen I had a chance to look up Jeff and Paul had their wives on their laps and a goofy look on their faces. I guessed that I had a similar goofy look.\n\nJeff said, \"Jesus Ian, you're a freaking mind reader.\"\n\nGinger asked, \"What do you mean Hun?\"\n\n\"When we saw the three of you jumping around, hugging and kissing. Paul asked Ian if he thought it was because I broke your anal cherry. Ian, the mind reading bugger, said, 'No, I think someone is pregnant.' He didn't guess that all three of you were but he was still damn close anyway.\"\n\nKathy wiggled in my lap, \"That's my master, he's really something.\" She gave me a long sweet kiss.\n\nIt was a really surprising and great evening. The girls all drank ginger ale, having sworn off booze until after giving birth. Paul and I were more than a little over the limit so Lila and Kathy drove us home. Kathy was really sweet about helping me up the stairs and into bed. She coddled me the whole next day as my hangover wore off.\n\nAbout noon I was feeling much better. Kathy had just finished loading the dishwasher when I walked up behind her and wrapped my arms around her. I nuzzled her neck and softly said, \"I love you. I love everything about you. I'm so happy we're going to be parents. I just want you to know I think you are a very special woman and I'm so glad you're mine.\"\n\nShe started sobbing.\n\nI held her and asked, \"Kathy, what's wrong love?\"\n\nShe turned her head up and gave me a kiss. \"Nothing's wrong. You just make me feel so special and so good. It's like I'm a princess. Oh Ian you've done so much for me. I love you.\"\n\n\"So you're crying because you're happy?\"\n\n\"Exactly! Since you ran into me I haven't had to worry about what to do, you tell me. I haven't had to be afraid, you protect me. You give me joy and freedom and now you've given me a baby.\" She turned in my arms and kissed me thoroughly.\n\n\"Ah girl. You've given back to me as much as I've given you. You're loyal and lovely. You obey me, you put your heart into everything you do. The house always looks fantastic. You are so pretty...\"\n\n\"Not my knees.\"\n\n\"No but that's my fault. You're my soul mate and my love. You are lovely and you're not a princess, you're my Queen. And now you're carrying our baby.\" I picked her up and carried her into the bedroom. We made slow sensuous love and drifted off to sleep.\n\nWhen I opened my eyes Kathy was lying on the bed watching me. She broke into a big smile and said, \"Hi Ian. Can I get you anything?\"\n\n\"No I have everything I need right here in front of me. I love to wake and see you and be able to hold you. You feel so good in my arms.\"\n\nShe said, \"Oh. I love you.\" and to prove it she started crying again. There were no sobs just tears trickling down her cheeks around her smile.\n\nI kissed her tears and said, \"I love you too.\"\n\nEpilog\n\nIt's been ten years since we were married. We are still close friends with Paul and Lila, in fact we have houses on adjoining lots on a quiet cul-de-sac that backs up to a small nature preserve, about fifty acres, owned by the Nature Conservancy. The lots are large, an acre and a half each. Paul and I went together for a riding lawn mower to keep the grass trimmed. We are careful not to intrude on the conservancy lands. We've become good friends with the people who administer the conservancy land. I ceded them a strip about three feet wide for a trail back into the preserve. They have a nature hike about once a week. They take a lot of school groups during the fall and spring.\n\nPaul has now become the Chief of Police for the city. He still claims it is because of Lila's calming influence. Lila claims it is all Paul but she gets a small enigmatic smile every time he gives her credit.\n\nJeff and Ginger remain good friends with all four of us. He has advanced to Lieutenant. Ginger is now running her own business, she is a home decorator. Several of her customers have urged her to expand her business but she likes it the way it is now. She says that she has the freedom to take time off when her children need her or when she and Jeff need some time.\n\nMy boss retired and I'm now the Chief Information Officer for the company. Kathy is my second in command. The only reason we have the jobs is because of the strong recommendation my boss gave us when he retired.\n\nKathy and I have two children, a boy nine and a girl seven going on 13. Paul and Lila have two boys and a girl. The kids get along well together. Lila has become a stay at home mom and takes care of both sets of children after school. Kathy and I had to insist she take some payment for baby sitting our two.\n\nKathy and I have had to be inventive to let me continue dominating her with the kids around. To this end we modified the master bedroom to have an additional sitting room. We've sound-proofed the room and can lock the door to both the master bedroom and to the 'play room.' Kathy and I can act out our fantasies there without worrying about the children walking in. Neither of us has any inclination to venture into wife swapping or swinging nor do Lila and Paul. We get together often for card games, barbecues and other vanilla pursuits. Occasionally, when the children are at their grandparents, we have dual lap dances.\n\nSpeaking of grandparents, Kathy introduced me to her parents about a year after we were married. They had to come in from Texas for the birth of our first child. They are very conservative. It took the birth of our daughter to get them to sort of accept me. All of their visits are fairly tense. We found out that her mother was submissive and that her father is much harsher than I am. We never, never ever discuss politics when they are here. Her mother divorced her father last year and now they never visit together. Her mother visits more often and dotes on the kids. We hardly ever see Kathy's father.\n\nI introduced Kathy to my parents just before the wedding. They've been great although my mother got Kathy to the side and questioned her at length about being my submissive. Afterward, I received a stern lecture from both my parents about being good to Kathy and not hurting her. Kathy assure them that I was doing exactly what she needed and that we were ecstatically happy together for them to lighten up. Now we see my parents frequently.\n\nI'm still living the dream I fell into during that bicycle race. I'm living with a woman that must be part angel. She makes my life a small slice of heaven. I can't help thinking. Oh my God, how lucky we've been.\n\nThe End "
    ],
    "authorname": "TstormF1",
    "tags": [
        "lap dances",
        "stripper"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/oh-my-god-ch-10"
}
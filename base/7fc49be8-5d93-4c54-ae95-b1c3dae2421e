{
    "title": "The Steamy Chase Ch. 07",
    "pages": [
        "Comments, critiques and tips are welcome. \n\nDean Broody vs. Kayla Cooper\n\n***\n\n\"I need to make a call.\" Kayla said looking all flustered. \n\n\"Sure. Use the office to your right.\" Dean said taking in Kayla's confused look.\n\n\"Thanks.\" She muttered and left.\n\nThey were on the plane, on their way back home. Dean had just dropped a bombshell. His family was getting together for a thanksgiving dinner so he was going straight to his parents' house from the airport. He wanted Kayla to come with him. To say Kayla was confused was an understatement, she was...\n\n\"...freaking out Cole. I can't go. But I don't know how to tell him. I'm...\"\n\n\"Hold it Kay.\" Cole said calmly. \"Take a deep breath and repeat what you just said. I couldn't get anything except the fact that you're panicking. Now take it from the top. What's going on?\"\n\nCole hadn't heard from Kayla since he put her on Dean's plane to Dubai. He had been waiting for an insulting call from her but none had come. He'd therefore assumed that all was rosy between his friends. But from Kayla's panicked tone, Cole knew without a doubt that Dean had fucked up as usual. Cole's lips tightened and drew into a grim line, his face hardening. He was going to kill the bastard. \n\n\"Cole it's Dean.\"\n\n\"I figured.\" Cole replied in a hard voice. \"What the fuck did the jerk do?\"\n\n\"Oh no, he didn't do anything. He...\"\n\nBut Cole cut her off. \"So why are you freaking out Kay? You are on your way back aren't you? Is everyth...\"\n\n\"Cole, now it's your turn to calm down. I called. Just shut up and listen to me.\"\n\n\"Yes your highness.\" Cole drawled mockingly.\n\n\"Dean wants to take me to his parents' home for thanksgiving dinner Cole. I don't think...\"\n\n\"What?\" Cole's bellow was so loud, Kayla winced. \"Dean Broody wants to take you to meet his parents?\"\n\n\"I didn't say...\"\n\nBut Cole went right on, talking. \"You mean like 'Meet the Fockers'? What the fuck did you do to the guy? You must have rocked his world babes.\" Incredulity filled Cole's tone.\n\n\"We're not going to meet his parents. We're going to have dinner in their house.\" Kayla said slowly as though she were talking to a child. \n\n\"Same shit.\" Cole retorted. \"Kay, Dean has never taken any girl he's fucking...well...seeing, to meet his family. Yes, his brothers do sometimes get to see the girls he bangs. But definitely not a formal introduction scene like he's asking for. Kay, this is serious.\" Cole's voice had gone quiet.\n\n\"Don't you think I know that? Why do you think I'm calling you? Much as I want to strangle you for setting me up, I need advice. What should I do Cole? I'm scared.\" Cole thought Kayla sounded worse than scared but he wasn't going to point that out to her.\n\n\"You really sure you wanna strangle me?\" Cole drawled mockingly in an Italian accent, his voice full of amusement. \n\n\"Cole...\" Kayla whined. \"Get serious please.\"\n\n\"You love him Kay. He's obviously head over heels in love with you. He comes from a close-knit family. So naturally, he wants you to meet his family. Kay, I think you should know something very important about Dean, to help you understand why he's acting the way he is. He has never been in love before. I must admit, I'm surprised he's not running for the hills. He must love you very much.\" Cole went quiet for some time, then cleared his throat. \"You know he does right?\"\n\n\"Yes.\" Came Kayla's whisper.\n\n\"So what are you scared of Kay? You both love each other. Take the next step. He's obviously all in. If you don't go, it only shows that you are not ready for this. The last time I checked, Dean was the one with a phobia when it comes to commitment. Go meet the family, girl. It will even help you understand him better. Alright?\"\n\n\"Alright.\" Kayla answered in a small voice.\n\n\"Hey, cheer up. You are not being sent to the slaughter house. Tip: dress to kill. They're all guys...well mostly. They'll be eating out of your palm. Oh and watch out for Jean, one of the brothers. He's worse than Dean. \n\nKayla laughed softly. \"He told me he's an angel compared to Jean.\"\n\n\"Well he didn't lie.\" Cole laughed. \"They will love you Kay. Don't worry too much.\"\n\n\"Thanks Cole. See you later.\"\n\n\"Have fun love.\"\n\n***\n\nWhen they came out of the plane, they were met by a very pleasant looking elderly man. He extended his hand to give Dean a firm handshake.\n\n\"Hope you had a good flight Mr. Broody.\" He said with a smile.\n\n\"We did James. Thanks.\" Dean beamed back. \"All set?\"\n\n\"Sure. Right this way Sir. Oh, hello Ma'am.\" He said turning to grin at Kayla.\n\n\"Hello Sir.\" She replied with a smile.\n\nThey were led to Dean's sleek black Cadillac Escalade. Dean opened the front passage door for Kayla to sit, then went around to get behind the steering wheel.\n\n\"Ready?\" He asked her quietly.\n\n\"Yes.\"\n\n\"Let's do this.\" Dean said with a huge grin, easing the powerful car out of the parking lot. \"Have I told you how beautiful you look?\" He asked, taking his eyes off the road to give her a desire-filled glance. They had both dressed for dinner just before touch-down.\n\nKayla laughed and reached up to turn Dean's head, with her hand on his cheek, to face the road. She knew she was looking good. She had on the white mini pleated skirt Dean had bought for her in Dubai, and a sexy black sleeveless Ponte top with a 'can't miss' neck line. With it, she had on a red high heeled peep-toe V-Front sandal, which had a slender ankle strap, and a red Fendi leather bag, that most ladies would kill for. \n\n\"I won't be for long if you don't watch the road. And yes, you've told me more than a hundred times.\"\n\n\"You counted?\" Dean asked with mock incredulity.\n\nKayla laughed. \"Dean, you've been saying it every other minute. You don't look too bad yourself.\" Kayla drawled, running her eyes over Dean. He looked so good and smart in black button-down long sleeved shirt and black khaki pants. But then, Dean looked good in anything. \"Good enough to eat actually.\" Kayla said batting her lashes at him, playfully.\n\n\"Oh baby, if you really want to get there in one piece, you'd better stop that.\" Dean drawled making Kayla laugh even harder.\n\nHe reached between them and took her left hand into his right, entwining their fingers. \"You okay?\" He asked softly, bringing their joint hands to his lips to gently kiss the inside of her wrist.\n\nKayla nodded, then realizing Dean wasn't looking at her, answered in a soft voice, \"yes I'm okay.\"\n\n\"They will love you.\" Dean said in a gentle voice. \"Hell even if they don't, I do. And that's all that matters. Okay?\" He squeezed her hand lightly. \n\n\"Okay.\" Kayla felt better all of a sudden. The closest she had ever come to sitting with a close-knit group was when she was with the squad, Coles friends. More was riding on her encounter with the Broody family because besides the fact that they were a real family, they were the family of the man she loved. And Kayla was hoping and praying that they would like her.\n\nNever once letting go of her hand, Dean drove to his parents' house. When they got to the massive iron gate, Dean simply pressed a button on the dash board of his car to open the gate. When they drove into the compound, Kayla gasped. It was huge and beautiful.\n\n\"Oh my God, this is simply magnificent.\" She breathed, staring at the huge house.\n\nDean chuckled as he parked under a parking shed which had so many cars parked, it looked like a car lot. He turned off the engine and turned to look at Kayla with a grimace. \n\n\"Kay, the man is an architect. What did you expect? He wanted every classic style one could think of, in here. If you should ask me, he went overboard.\" He got out of the car and came around to open her door for her.\n\nImmediately Kayla stepped out of the car, the front door opened and there was what appeared to be a stampede at the door.\n\n\"All of you brutes must wait in there.\" She heard a woman's voice clearly commanding others. \n\n\"Don't even think about it Jean.\" \n\n\"That's my mother. My brothers are obviously dying to see you.\" Dean said staring at Kayla.\n\n\"Oh...\" She said, with a tremor in her voice which she hoped he missed.\n\nDean didn't miss it. He closed the distance between them and pressed her up against the door of the car with his body. \"Hey,\" Dean whispered, \"look at me.\"\n\nWhen she raised her worried eyes to his, she gasped in surprise because she knew what he was going to do. It was clear in Dean's eyes. Kayla moaned just before Dean's lips touched hers with a soft, possession, passionate kiss that stole her breath away. Shaky and flushed, Kayla relaxed fluidly into Dean's arms and the kiss.\n\nDean kissed her soundly. He knew his mother was watching them but didn't care. He wanted to help Kayla relax and had been dying to do it with a kiss since they got into his car. He watched her through half-closed eyes as his lips caressed hers. She responded with total submission and it drove him crazy. The taste of her mouth, her scent, her warm, her soft body against his... before he knew it, his eyes drifted close and he lost himself in the kiss, totally forgetting about where they were. Dean kissed her deeply, his tongue plunging into her mouth. His chest rumbled with a low, primitive sound as he tore his mouth from Kayla's and looked at her with his eyes glazed with passion. He groaned when he took in Kayla's flushed face, unfocused eyes and swollen lips. She looked as turned on as he felt. She looked beautiful and fuckable and he wanted her so badly it hurt. Kayla brushed her nose against his and a thrill shot through him.\n\n\"Christ...You drive me out of my fucking mind.\"\n\n\"Dean, your mother...\" Kayla was breathing hard. \"What is she going to think?\" \n\n\"That her son is head over heels in love. Ready?\" He asked huskily. He was so aroused.\n\n\"How is my lip gloss?\" She asked, smoothing down the front of her skirt. \n\n\"Perfect. You're looking incredibly sexy...and fuckable.\" Dean said with a hint of amusement in his voice.\n\n\"Thanks a lot for managing to make me look hot and bothered, today of all days. I'll get you for this.\" She said sounding more relaxed.\n\n\"I'll look forward to that.\" Dean drawled, taking her hand in his and moving towards his beaming mother.\n\n\"My baby.\" Dr. Lucy Broody opened her arms to her last son. Dean stepped into her arms and hugged her like he hadn't seen her for years, instead of mere weeks. \"You must be Kayla.\" She gushed stepping around her son to draw Kayla into her arm. \n\nShe actually hugged Kayla even longer than she had Dean. And Kayla relaxed into her embrace, hugging her right back. She had to fight back the tears that pickled behind her eyes. Lucy Broody's embrace felt so soothing and comforting.\n\nDean stood back looking at the two women he loved on earth embrace each other, and felt profound joy in his heart. He had told his parents about Kayla's background so he knew they were going to show her so much love, she would feel as though she were part of the family.\n\nMichael Broody, Dean's father came to the door and hugged his son. Then he did something that surprised Kayla and made Dean laugh. He actually pulled Kayla from the arms of his wife, muttering something that sounded like, \"my turn\", and picked Kayla up into a fierce hug. She wrapped her arms around his neck and held on. He was a very tall man and obviously very strong. He was actually treating her as though he was welcoming a long lost daughter back home. Kayla was so overwhelmed, she hid her face against his neck as silent sobs shook her frame.\n\nDean's mother stepped close to the pair and rubbed her hand on Kayla's back, holding on to Dean's hand the whole time.\n\n\"Shhh,\" The senior Broody soothed Kayla till she quieted down, then put her down. \"Better now?\" He asked, wiping at Kayla's cheeks with a white handkerchief he brought out of his pocket. \n\n\"Yes, thanks. I'm sorry.\" Kayla said in a small voice.\n\n\"Don't be.\" Michael Broody told her, leaning down to kiss her on the forehead. \"It's good you got that out of your system because you're going to get a whole lot of that from the boys. Ready?\" He asked with a grin.\n\nDean and his mother laughed as Kayla's eyes widened. \"She is Dad.\" Dean said reaching out to take Kayla's hand in his.\n\nThey entered a really large foyer, where five men seemed to be waiting impatiently.\n\n\"Okay people,\" Michael Broody obviously didn't need a mic. His voice was loud enough to get the attention of everyone. \"Meet Kayla.\"\n\nThen five almost identical men moved forward to meet them. They all gave Dean a hug first, then Kayla. Some gave her kisses on her cheeks, two picked her up and twirled her around. She loved all the attention. Too much. There was Josh, who was the eldest brother, then Sam, Tyler, Ron, whose middle name was Hilary, according to Dean, then Alan. Where was Jean, brother number six, Kayla wondered.\n\n\"Where's Jean?\" Lucy Broody asked, echoing Kayla's thoughts.\n\n\"Right here Mum.\" Answered a familiar sexy voice, which made Kayla quickly look to her side, to check whether Dean was still standing beside her.\n\nKayla gasped, when the owner of the voice appeared in front of her. He ignored Dean and went to stand in front of Kayla. He was the exact image of Dean...right down to how he was dressed. \n\n\"That was some kiss.\" He drawled, pointing a fist at Dean without looking at him.\n\nKayla's eyes widen even more at the comment. And Dean, without looking at his brother too, met his fist with one of his own. Then both men turned their fists against each other's, as if they were locking something down. \n\nKayla turned to look at Dean, too shocked to be embarrassed by the kissing comment Jean had made. \"You're...\"\n\n\"Twins.\" Jean concluded with a wide grin, his arm back at his side. \"I see my brother forgot to mention that tiny detail. Or is it that he wanted to see your reaction. Which is it brother?\" Jean finally turned to look at Dean, whose eyes remained on Kayla like all the others, taking in her reaction. \n\n\"Oh my God!\" Kayla breathed with a nervous laugh. \"You guys even dress alike.\"\n\nEveryone burst into laughter. \"I have a confession to make.\" Jean said to Kayla with a brilliant smile. \"I saw how Dean was dressed when he got out of the car so I went to dress same...to shock and confuse you. How's that working so far?\"\n\n\"Oh you're good.\" Kayla said dragging out the word 'good', and making everyone laugh even harder.\n\n\"I like her bro.\" Jean laughed. \"You did good. Come here darling. It's my turn to hug your brains out.\" He said, pulling a laughing Kayla into his arms.\n\nThey all moved into a huge hall where four really pretty ladies, two teenagers and four kids were obviously waiting for them. Three of the ladies were wives to three of the brothers, Josh, Sam and Ron and the fourth lady was Alan's fianc\u00e9e. They welcomed Kayla and introduced the children, pointing out who was whose. They were indeed a happy and close family.\n\n\"Okay, food will be ready in thirty. In the meantime, drinks on the patio everyone.\" Lucy Broody called out.\n\nAs they all filed out, Josh, the eldest brother hooked his arm around Kayla and steered her to the far corner of the patio.\n\n\"You know, I'm so glad to finally meet to.\" He said with a smile.\n\n\"Likewise Josh. Dean has told me so much about you guys I feel like I've known you for years.\" \n\n\"Except the fact that he's a twin.\" Josh laughed.\n\n\"Except that very important detail. I'm gonna get him for that.\" Kayla said with a laugh, accepting a glass of wine from a smartly dressed gentleman. \"How could he do that to me?\" She gave a mock scowl making Josh laugh uproariously.\n\n\"Those two are the craziest pranksters in the whole of America. Watch your back Kayla.\" Josh warned in an amused tone, taking a sip from his own glass.\n\n\"Just those two? Not from what I heard.\" Kayla drawled and Josh dissolved into peals of laughter.\n\n\"I said they are the craziest Kayla.\" Josh said, wiping tears of mirth from his eyes. \"Tell you what, I'll watch out for you tonight. What do you say?\"\n\nKayla turned to fully face Josh with a smirk on her face. \"Like you watched out for Pamela?\" She asked referring to the wife of Sam, who was pranked by the guys when she was brought to meet the family for the first time. Dean had told her the whole story. About how Josh had promised to look out for her, but had rather ensured the brothers got her good.\n\n\"He sold us out guys.\" Josh bellowed to everyone's hearing. \"Dean has already given her a heads up.\"\n\n\"What a douche.\" Tyler, brother number three, shouted. \"Spoiling the family tradition.\" Everyone laughed.\n\n\"Take a leap guys.\" Dean retorted and went over to where Kayla stood beside Josh. Then he slipped his arms around her waist from behind and nuzzled her neck. \n\nKayla turned slowly within the circle of Dean's arms and slipped a hand into his hair to bring his face closer to hers. Everyone was watching them. Kayla kissed him on both cheeks and smiling up into his eyes, said in the sweetest of voices:\n\n\"Those were two kisses, just for you. Now will you be a good boy and go fetch my boyfriend... Jean?\"\n\nThe look on Jean's face was priceless. The whole patio erupted into cheers and laughter. Everyone was screaming with laughter, with some clapping. Even the people serving were laughing. Kayla however looked incredulous, surprised they thought she would fall for that for even a second. Even without any of her senses, she would know if Dean was holding her.\n\n\"Fuck!\" Jean breathed. \"No one has ever been able to tell.\"\n\n\"Yeah? Well, they must not have loved your brother like I do.\" Kayla said with a chuckle.\n\n\"He loves you too Kayla.\" Jean said solemnly. \"He told me in six different languages. I've never seen Dean care so much about any one woman in his life.\" Jean had no doubt when he looked at his brother that he loved Kayla. \"Don't hurt him Kayla. Please!\" Jean's eyes were suspiciously bright when he whispered his plea. \"I've never seen him this crazy about anyone. If you hurt him, I don't think he can recover.\"\n\nKayla's breath hitched in her throat. She reached out to put her glass on the table beside them and cupped Jean's cheeks in her palms. \n\n\"You have my word Jean. I won't hurt him. I promise.\" Then she drew Jean into her arms and gave him a tight hug, her hand pressed against the back of his head as she hugged him close.\n\nThe patio was quiet, with everyone drinking and watching the pair in silence. Kayla felt Dean's hand on her back and drew back from Jean's embrace. Jean stood upright and gave Dean a one-armed bro hug. He met Dean's intense dark, blue-eyed gaze steadily with his identical ones, and then in a voice that was barely above a whisper, he said;\n\n\"She's the real deal bro. Don't fuck it up. And if you hurt her, I'm gonna have to kill you.\" And with a slight tipping of his head to Kayla, he walked away.\n\nDean stared at the back of his brother for a while and then turned to gather Kayla into his arms. \"Turning my family against me now?\" He chuckled in her ear.\n\n\"Your family?\" Kayla gasped with mock incredulity, \"For a moment there I thought they were mine.\"\n\nDean burst into laughter. \"They'll trade me for you in a heartbeat love. To avoid that, why don't we share?\"\n\n\"I love you so much Dean. With my soul.\" Kayla said with all her love shining in her eyes.\n\n\"I love you Kayla. You are my soul.\" He said right back and it felt good saying it.\n\n***\n\n\"Oh no, not her.\" Kayla heard Lucy Broody mutter but wasn't too sure whether she'd heard her right.\n\nThey were sitting in a really huge dining room, with assorted scrumptious meals laid out in front of them. Kayla had never seen so many assorted dishes on one dining table before. It was simply amazing. She was seated between Dean and Michael, the latter having insisted he wanted her by him. Everyone was busily eating and conversing. Alan, the brother who came before the twins, was cracking them up with stories about a village he and some other doctors had gone to do volunteer work a month earlier. Everyone was having fun. Even the help came to stand at the table to laugh at the stories.",
        "Then they all heard the high-pitched voice of a female call out, \"Hi Broodys.\"\n\nKayla felt Dean stiffen beside her just as his mother passed the 'oh no' comment. Tyler and Sam rolled their eyes just as Josh and Ron groaned. Alan went right on talking and Jean didn't react at all. She was suddenly very curious to know just who the woman was. The only ones who seemed to be happy were the four year old twin girls of Sam and Pamela. They squealed and jumped off their chairs, screaming;\n\n\"Auntie Alice.\"\n\nThen a beautiful red head entered the dining room and spread her arms wide to catch the twins. \"How are my favourite twins doing?\" She asked with a delighted laugh.\n\n\"Where is Mr. Rabbit?\" They both asked instead of answering her question.\n\n\"She told them she was Alice from Alice in Wonderland.\" Michael murmured to Kayla, explaining his grand-daughters' question. \n\n\"Oh...\" Kayla chuckled.\n\n\"She's a friend of the family.\" He added. \"Our family and hers go way back.\" \n\nKayla nodded and turned to look at Alice. She was a beauty. After hugging the twins, Alice went round the table hugging everyone, starting with Dean's parents. When she eventually got to Dean, Kayla felt the tension. It was so thick one could cut it with a knife. \n\n\"Hi.\" She said huskily, and bent down, aiming for Dean's lips but he turned his head at the last moment so that Alice's lips landed on his cheek. \"Your call never came.\" She accused softly. Her boobs were nearly falling out of her ridiculously low-necked dress. Talk about dressing to kill, Kayla thought.\n\nDean cleared his throat. \"I was busy Al. How was your flight?\" He had a guarded look in his eyes.\n\n\"Good. Missed you like crazy, Dean. Have you any idea how lonely I felt in that huge bed when I realized you had left for your hotel?\" Her voice had turned real husky now. \"You have to make it up to me Sexy. What do you say we skip all this and move to our usual place?\"\n\n\"Listen Al...\" Dean started but Alice cut him off.\n\n\"Come on baby, you know you want to.\" Then in a whisper, which Kayla heard anyway, she added. \"I'm so wet right now just think...\"\n\n\"Alice, meet my girlfriend, Kayla.\" Dean said in a tight voice. \"I did tell you about her didn't I?\" Dean asked staring Alice down. He knew what she was trying to do. She did it all the time whenever she saw him with any woman. It had never bothered him before but this time, it pissed the hell out of him. \"Kay, Alice is a friend.\" Dean's voice had gone low.\n\n\"Hello.\" Kayla said politely, feeling numb inside. When exactly had Dean left this beauty in bed alone? It sounded like a very recent incident. She also had a feeling Alice deliberately wanted her to know that detail.\n\nHostile eyes turned on Kayla. Then Alice's lips widened with a smile which didn't reach her eyes. \n\n\"Oww the latest flame.\" She drawled. \"Enjoying yourself honey?\" If only looks could kill, Kayla knew her corpse would be on its way to the morgue that very moment.\n\n\"I can assure you she's not the latest flame Alice darling.\" Jean drawled from beside them. \"She's the hottest and final flame.\" He added, giving Kayla a slow wink.\n\nAlice straightened up and turned to look at Jean with an even wider smile. \"Oh, I get it. Shared her already haven't you?\"\n\n\"That's enough Alice.\" Lucy Broody said in a loud voice. \"Sit down and eat. How're your parents doing?\" Conversation started to flow again around the table.\n\n\"They're good Auntie Lu. Spoke to mum about an hour ago. She sends her love.\" Alice said, pulling out the chair beside Tyler, to sit. \"I've been in Dubai with Dad for the past week.\" \n\n\"Oh I see.\" Lucy responded with a raised eyebrow. \"When did you come back?\"\n\n\"Yesterday.\" She responded with a quick look in Kayla's direction. Alice didn't miss how Kayla stiffened at that information. She smirked. \"God, I'm famished.\" She started dishing food onto her plate.\n\n\"Hey, are you okay?\" Dean asked Kayla softly. He noted how tensed she looked. \n\n\"Peachy.\" Kayla responded, playing with the food on her plate. All her appetite had fled. To where, she didn't know.\n\nFrom then on, Kayla didn't say a word to Dean. All her attention was focused on Michael, who insisted she addressed him by his first name. Initially, she could scarcely get any word out through her constricted chest and throat. But eventually, she tried to suppress how she was feeling and conversed with the older man. There were no words to describe how she felt that very moment. She felt inadequate, jealous, hurt, insulted, betrayed, sad...all combined.\n\nNo wonder Dean wasn't eager to have sex with her. He had obviously been fucking Alice the whole time they were in Dubai. And she had stupidly thought he wanted them to connect on other levels besides sex. Why would anyone want her when they had that? Look at that beauty...how was she to compete with that? Nothing was stopping Dean from making mad sweet love to her now that they were in a committed relationship...right? So why was he holding back? He obviously simply didn't feel like it as he was getting it from the beautiful obviously experienced Alice. Kayla felt sick inside but was damned if she was going to give that woman the satisfaction of seeing her rattled. Kayla held her head high, praying the meal would end quickly so that she could go home, climb into her bed and cry her eyes out. She had been so stupid to think Dean would change for her.\n\nAfter the meal, everyone retired to a large plush den the Broodys called the 'Family Fun Room'. It had lots of interesting stuff such as video games, pool table, dartboard, two different projected screens; one showing soccer whilst the other showed a movie, recliners, lots of comfortable seats, two beds, a bar, play corner for the kids. It was breathtakingly cozy. \n\nAfter making a quick call to one of her colleagues, Kayla asked Kate, Josh's cute wife, who was also a doctor just like her husband, to direct her to the wash room. \n\n\"You know what Kayla?\" Kate said looking at Kayla's shoes. \"The whole world of fashion is at your feet. I love those shoes. When you're done, do come give me some pointers. Who knows, maybe I'll start going on my ward rounds in killer heels.\" She finished with such a ridiculously humorous expression on her face Kayla erupted into laughter.\n\n\"Ow come on Kate, you're going to make me pee my pants.\" Kayla squealed, rushing into the unsurprisingly large washroom. \n\nShe could still hear Kate's laughter even from in there. Kate was actually thrilled to meet the woman who had been able to capture the attention and heart of Dean, who she teasingly called, 'Hit and Run' as all he did was fuck and dump ladies.\n\nAs Kayla was washing her hands, still smiling at Kate's words, the door to the washroom opened and Alice stepped in. Kayla saw the sneer on the red head's beautiful face in the mirror and felt her heart start to beat faster. She just knew the woman was going to tear her to pieces...verbally. But she was damned if she was going to allow herself to be treated like trash. Kayla Cooper was no pushover. Hell no!\n\n\"Well, well, well, look who we have here. If it isn't Mrs. Dean Broody to be.\" Alice drawled, going to stand beside Kayla.\n\nKayla looked at the other woman in the mirror and shook her head. \"Listen Alice, I'm really not in the mood for any more of your insults. Besides, I don't think anyone can tell Dean, what or who to do...if you get my meaning. So please, don't take your anger and frustrations out on me.\" \n\nKayla was already so angry, she had to try not to go off on Alice. After all, it wasn't her fault Dean was a liar and a cheating bastard. Anger flashed on Alice's beautiful face, turning it almost evil.\n\n\"Look here you bitch, that man is not for you. You can't handle him. I was with him in Dubai and he spent every night in my bed. That should tell you something.\" Alice said smugly.\n\nAlice smiled within. She was going to put the fear of God in this little bitch. Girlfriend? Yeah right! If anyone deserves that title, it was her. Hell, their families were so close that she was virtually seen as part of the Broody family. Why not make it official? The fact that Dean seemed to be serious about his current fling didn't faze Alice. She had been fucking Dean on and off since they were kids. Hell, she had been his first fuck. A year older and more experienced, Alice had fucked Dean's brains out at an early age. She had once fucked the twins at the same time but that had been just that one time. They had all been drunk. It had been exciting and fun. \n\nBut she had always adored Dean, hoped that they would end up together one day. To him, they were fuck buddies but to her, it was more. Yes she had other men in her life but Dean had a special place in her heart. To say she had been surprised when Dean refused to have sex with her in Dubai because 'he was seeing someone', was an understatement. That had sounded so ridiculous, Alice had been lost for words. But Dean was obviously serious about this girl if he had actually brought her home to meet his parents. That wasn't a good sign at all as far as Alice was concerned. She knew she had to put a stop to this nonsense once and for all. She also knew how stubborn Dean could be so that left, Kayla.\n\nThough she had been surprised when he had refused her sex in Dubai, she had also known she couldn't force Dean to have sex. Dean's control had always been absolute. Even in the throes of passion, Dean had always exercised control and that self-control, had always been a major turn on for her. If Dean Broody didn't want to fuck, nothing and no one could force him to.\n\nBut who was to know Dean had refused Alice? Definitely not Kayla. After all, she hadn't been in Dubai with them. Alice knew she had to be smart, get the girl out of Dean's life tactfully. Much as she hated Kayla, Alice couldn't deny how hot she was. But then, Dean had always had great taste. Kayla also looked like she had class and was very smart. All she had to do was play the cheating card. A girl like Kayla, had too much pride and class to stay with a cheating boyfriend. Alice raised an eyebrow when she noticed the bemused expression on Kayla's face.\n\n\"What can I say honey? They are all cheats and liars. You are a nice girl. A better man will come along.\" Alice said, giving Kayla a pitying look.\n\nKayla turned to fully face Alice. \"Know what? You just exonerated my boyfriend. Listening to you earlier in the dining room, I couldn't help but wonder if he was fucking you the whole time we were in Dubai. Now I know better.\"\n\nAlice stiffened when she caught on the word 'we'. \"What do you mean the whole time you were in Dubai?\" She asked curiously.\n\n\"You didn't know did you? I was in Dubai with Dean, Alice. And we slept in the same bed every night.\" Now it was Kayla's turn to look smug.\n\nThe look on Alice's face was so comical, Kayla chuckled. She actually felt sorry for the woman.\n\n\"Well he obviously doesn't want you enough if he's not having sex with you.\" Alice scoffed. \"Dean has never been able to resist me. He is very highly sexed my dear. Have you bothered to think maybe he's just not that into you?\" Alice asked looking Kayla up and down with a sneer. \n\nDean had told her, when she had insisted he was only going to fuck his new girl and dump her just like he did all the others, that they were not even having sex. That he wanted romance with the girl and not sex. She therefore desperately wanted to play that last card. Plant doubts in Kayla's head.\n\n\"Oh so he told you.\" Kayla asked, laughing softly. \"Maybe you should have another talk with Dean, Alice. We've both known him for years. You, longer obviously. We both know how he...deals with women. He and I wanted something different. Sex is not everything. And he has proven that he loves me beyond sex.\"\n\n\"Or he doesn't want you enough.\" Alice chipped in, her voice tight. \"Have you thought of that?\"\n\nKayla cocked her head to one side, looking like she was lost in thought. \"Maybe.\" She shrugged with a smile. \"I should go find out. Now, where's this place of yours you were talking about earlier?\"\n\n\"You bitch!\" Alice spat out.\n\nKayla laughed. \"Never mind, I'll ask Dean.\" Kayla turned to go. \"It was nice talking to you Alice.\" \n\nAnd with that, Kayla left a dumfounded Alice and opened the door, gasping when she came face to face with Jean. It was very easy to tell now, because he had changed back into his original outfit, which was nothing like Dean's.\n\n\"Nicely done, love.\" He grinned, leaning forward to kiss her on the forehead. Then hugging her close, he murmured into her ear; \"Don't kill my baby brother. He didn't do anything with her in Dubai. Trust me on that.\"\n\nKayla nodded, then looked up at Jean with an amused smile. \"Baby brother?\"\n\n\"Forty-seven minutes, baby. He can never catch up.\" He drawled.\n\nKayla shook her head in amusement as she turned to go in search of her man, leaving Jean to console a now sobbing Alice. \n\n***\n\nDean was going out of his mind with worry because he knew Kayla was feeling angry and betrayed. It was obvious from her body language after that scenario with Alice in the dining room. For once in his life, Dean hadn't the faintest idea, how to proceed though he hadn't done anything wrong. \n\nAfter the meal, Kayla had quickly excused herself to go make a call. He had wanted to go after her but Jean had signaled him to stop.\n\nWhen she entered the den after a while, she didn't come to Dean, but had rather gone to talk to Kate and the two of them had gone outside. Kate had come back inside alone, and then Alice had gone outside. Dean had promptly groaned and started for the door, ignoring his father's teasing laughter. Ron and Jean had followed him out. \n\n\"Wait here.\" Jean had said to both of them and headed towards the washroom.\n\nTo say Dean was dreading what was coming was an understatement. He was terrified. He started pacing impatiently. He knew how bitchy Alice could be and he also knew how tough Kayla was. Those two going up against each other wouldn't be pretty. He just needed to let Kayla know that she had nothing to worry about where Alice was concerned. They had been fucking each other since they were kids just for fun. But Alice had always loved to stake a claim on him whenever there was another woman in the picture. It had never bothered him because he had never been serious about any of those ladies...till Kayla. Dean was a worried man.\n\n\"Hey, take it easy.\" Ron said quietly, seeing how worried and confused Dean looked. He didn't like it. After all, Dean was their baby. \"Your Kayla looks like she can handle herself. Let's see how she fares.\"\n\n\"This is not one of our pranks Ron.\" Dean said tightly. Then in a whisper, he added, \"I'm scared Ron. I don't know what to do if she leaves me. I just...I...\"\n\nRon drew Dean into his arms and gave him a fierce hug. \"She won't.\" He muttered. \"We won't let her.\"\n\nThey broke apart when they heard the clicking of heals indicating either Kayla or Alice was headed their way. Then Kayla came into view, paused to look at Dean and started towards him with a serious, determined look on her face. Dean almost retreated. What the fuck was she going to do?\n\n\"Baby, I can explain...\" Dean started, but trailed off when Kayla went on her toes and captured his lower lip between her lips and started sucking erotically. \n\nKayla didn't mind one bit that one of Dean's brothers was standing beside them. She hadn't even spared him a glance to know which brother he was. All she wanted that very moment, was to screw Dean senseless. She wanted him and by God, she was going to have him. But first...\n\n\"I'm so hot for you right now,\" Kayla muttered against his lips, her voice husky with want. \"But tell me something first Dean. Are you putting off having sex with me because you're not attracted to me anymore?\"\n\nDean couldn't control the gasp that escaped his lips.\n\n\"Have you lost your mind?\" Incredulity filled his tone as he gave her a look she felt all the way down to her toes.\n\nKayla shrugged. \"Well, we both know I'm always ready to spread my legs and take it like a good little slut whenever you want me. So what's stopping you? Is it because I'm not experienced enough for you? I mean Alice is more...\"\n\nDean made a rough little sound, somewhere between a sigh and a growl, and then moving so fast Kayla didn't even see him coming, slammed his mouth on hers, cutting off her tirade. The kiss was fierce, punishing, almost bruising. Kayla whimpered, it felt as though her lips would start bleeding any second. He was kissing her so hard. She tried opening her mouth to protest and then gasped when Dean sank his tongue into her mouth. The sensation of their tongues touching felt like fireworks erupting within her body. Then everything changed - the kiss quickly went from rough to gentle. It gentled into one of the sweetest kisses Kayla had ever experienced. Her arms went up to wrap around Dean's neck and she held on as if he were her only anchor on a sinking ship. She melted into him, meeting him in that fierce and utterly possessive kiss with so much passion it set every nerve ending of Dean's on fire in the best damn way. With a groan, he tore his mouth from the kiss, relishing in Kayla's moan of protest.\n\n\"If you ever put yourself down like that again, I'm gonna put you over my knees and spank your arse so hard, you're gonna see stars. I swear!\" Dean growled against her lips, conjuring images in Kayla's mind that surprisingly got her instantly wet. Then he was picking her up fireman style and striding off...to where, Kayla had no idea. \n\n\"Dean, put me down please.\" Kayla pleaded, her face heating up as she heard laughter from some of his brothers. She didn't look up to see who. She thought it had been just one brother with Dean but from the laughter, it was obvious there was now more than one.\n\n\"Shut up.\" Dean growled, never once faltering in his steps. He lightly smacked her on the butt making Kayla squeal and blush even harder. \n\nWhen Kayla felt Dean opening a door, it dawned on her what he was about to do. She couldn't blame him could she? She had asked for it. She said quietly;\n\n\"If you're going to do what I think you are, then I want it to be at you and her...usual place.\" Dean froze. He stood very still for a while, then brought Kayla down to stand in front of him.\n\n\"What?\" He whispered.\n\n\"I heard Alice say something about skipping dinner and moving to your usual place for we all know what. I want what we're about to do, to be at that place.\" Kayla looked dead serious.\n\n\"Are you sure about that, baby?\" He asked huskily, searching her eyes with his intense ones.\n\n\"Never been more sure about anything. I want your last thoughts about that place, to be of us.\"\n\nDean leaned down and took Kayla's lips in a kiss that shook her to her very soul, then took her hand into his and walked towards the elevator. As the elevator started its ascent, Dean pressed Kayla's back up against the wall and trapped her arms on either side of her head. She gasped when he lowered his head to kiss her neck. He nibbled and licked the pulse point under her jaw until she began to fight his hold with impatience.\n\n\"God, Dean, you're driving me insane.\" She whimpered.\n\nWith a slow sexy chuckle, he nipped her earlobe and released her wrists, moving his hands down her body to cup her breast through her top, giving them a gentle squeeze. The soft gasping sound Kayla was making was turning him on even more. He was rock hard and leaking profusely.\n\nWith a groan, Dean reached up and pressed a button, halting the movement of the elevator. Then he pushed the neck of her top, together with her bra, down to reveal her creamy pieced nipple.\n\n\"God, I love this Kayla.\" Dean husked as he pulled gently on her nipple ring.\n\nShe moaned in torment and clung to his shoulders, feeling her juices soak through her panties with every pull on her that ring. It felt like there was a wire connected from her nipple straight to her clit. Dean's hand moved down her body to part her thighs which she was squeezing together in mindless pleasure. Dean didn't waste any time by taking off her panties...he ripped them off.",
        "Kayla moaned. \"That makes it two.\" She breathed, referring to the fact that, that was the second pantie Dean had destroyed. The first had been in a car in Dubai.\n\nDean laughed huskily, he wanted between those thighs so bad. \"I'll keep that in mind.\"\n\nThen his fingers were moving between her legs, just as he lowered his head to take that pierced nipple into his mouth. Kayla cried out and clung to his hair, the sensation of Dean's fingers on her clit and hot mouth on her nipple driving her out of her mind.\n\nDean growled lustfully against the flesh in his \n\nmouth, loving the feel of Kayla in his mouth and against his fingers. Damn, she was swollen, wet, eager, his! Pulling on her nipple, he stroked her clit rhythmically.\n\n\"Come for me, baby.\" He said against her flesh and rubbed her clit faster in wide circles until she shuddered hard with an intense orgasm. \n\nHer mewling cries made him want to join her in bliss. He lifted his head to look at her then. Dazed, she gazed up at him, gasping when he slid a finger inside her slippery pussy. He lowered his head to whisper in her ear while he slowly finger-fucked her.\n\n\"I've got to warn you baby, I don't think I can be gentle right now and I'm not going to last long.\" His balls ached. His cock throbbed with need, trying desperately to break free of the fly of his pants. He wanted her so goddamn much it was painful.\n\nKayla sobbed out a frustrated breath and buried her face against his shoulder while he fought with his zipper. She couldn't do anything but hold on and keep breathing because she knew she was going to get it good. She wanted it so bad. Dean pinned her with his body and she heard his pants unzip. His hard leaking cock brushed against the inside of her thigh as he relaxed against her, sighing in anticipation. Dean grabbed her thigh in his hand and lifted her leg to his hip. Kayla's exquisite scent only made Dean want to thrust into her hotness, to fill her completely. As he started to fill her body with his, he gasped brokenly as if he were already near orgasm. \n\nKayla's head fell back in ecstasy. \"That feels so fantastic, Dean. God, I've missed this.\" She moaned, relishing the exquisite feel of Dean's hard cock filling her.\n\nKayla's voice, the wonderful feel of her hot pussy around his cock, only made Dean want to slam into her. But the last thing he wanted to do was hurt Kayla. He knew he had to calm down. He was shaking so much, trying to bring his breathing under control. He couldn't remember ever being this out of control. Ever! \n\n\"Fuck!\" Dean growled, resting his head against the side of her face. \"Oh God.\" He was finally snugly ensconced within Kayla's body, where he'd been dying to be these past weeks. He was home. And it felt so damn good. \n\nDean brought up his head to look into Kayla's pleasure-filled eyes. He gently brushed the tendrils of hair sticking to Kayla's wet forehead away from her face with shaky fingers.\n\n\"Hey,\" he whispered with a soft smile. He was looking at her as if she were his entire world. It was unnerving. \n\n\"Hey,\" Kayla whispered back, staring up into Dean's eyes with eyes filled with so much desire and love.\n\n\"You ready for this?\" he asked as he flexed his hips, pushing himself just a tad bit deeper into her heat.\n\nKayla nodded. \"Always.\"\n\nA surge of pure lust, raw and urgent, took control of him. Life ceased to exist, his surroundings receded as he started to thrust into her. The lusty cry that tore out of Kayla's mouth was music to his ears and it spurred him on.\n\nKayla saw the cords on Dean's neck, knew he was trying to hold back, and squeezed his cock with her muscles, smiling when Dean threw his head back and cried out almost as if he was wounded. \"Let go.\" She whispered.\n\n\"Kay...don't.\" Dean growled.\n\n\"Fuck me Dean. And don't hold back.\" Kayla cried out, surprising the hell out of Dean. \n\nAnd with the surprise came pure animal lust. With a snarl of passion, Dean withdrew till the head of his cock was almost out and slammed back in, shoving his entire thick length into her in one hard shove. Kayla screamed.\n\n\"Christ, I've missed you.\" Dean growled, his thumb circling the hard point of her unpierced nipple. \"You're so fucking gorgeous.\"\n\nWith a groan, Dean leaned down and buried his face in her throat. He felt himself spiralling out of control, felt his mind lose control of my body. Dean came totally undone. Then with a whispered plea, he proceeded to give Kayla a fucking she wasn't going to forget anytime soon.\n\nKayla was delirious with ecstasy. The mixture of pleasure and pain nearly drove her out of her mind. She didn't want it any other way. Dean was rough and impatient and she loved it. He kept shoving his cock deep into her, pounding hard and deep, driving towards his orgasm. Kayla was reduced to a whimpering incoherence as he rutted against her.\n\n\"Yes,\" Kayla gasped. \"Yes. Yes, Ah God, yes! Yes! So good. \" She saw stars as she writhed against him, her thighs grasping his pumping hips.\n\n\"Kayla.\" Dean sounded like he was in pain. \"I can't hold it, baby.\" His mouth covered hers when he felt his orgasm start at the base of his spine, quickly spreading through his entire body. His thrusts grew even faster. He'd completely lost control.\n\nHe fisted Kayla's hair, holding her still as he plowed inside her, kissing her deeply and wildly the whole time. When Kayla whimpered and bit his lip, he knew he couldn't leave her...couldn't deny her that blissful climax. Even as he started coming, Dean rotated his hips to intensify her pleasure, rubbing his pelvis against her clit. And that's all it took. With a cry, Kayla shook as her orgasm tore through her and pleasure rippled through her body. Her contracting muscles squeezed and milked Dean's cock, intensifying his pleasure and driving him even further out of his mind. \n\n\"Fuuuuuck!\" Dean tore his mouth away from hers and bellowed. \n\nHe shuddered against her as his body trembled with satisfaction, sweat glistening on his forehead. When they got their breathing back under control, Dean brushed the hair back from Kayla's face with reverent fingers and leaned his forehead against hers. He looked into her eyes with so much contentment and love.\n\n\"Did that answer your question?\" Dean asked breathing harshly. \"I'm a master of control Kayla. I never lose control. But with you, I always lose it. I'm always half-crazy with wanting you. You've got me by the balls. I eat, drink and sleep wanting you Kay. Never doubt that.\"\n\n\"I won't.\" Kayla said, dropping a kiss on his lips.\n\n\"Good. Now are you ready for that...place?\" Dean asked huskily.\n\nKayla's eyes widened. \"You mean it's not...\"\n\n\"Here?\" Dean finished her question. \"No. But we did kiss in here. I thought as we're wiping memories and creating new ones, we might as well make this a juicer memory too.\" Dean chuckled, pulling out of Kayla. Then he froze! \n\n\"Oh fuck.\" He mumbled and looked in her eyes. \"I forgot to use a condom...again. Tell me you're safe Kay.\"\n\nKayla laughed softly. \"I am safe Dean. I'm on the pill.\"\n\n\"You are? Since when?\" Dean asked quietly, zipping up. He didn't understand why he felt so disappointed by Kayla's information. What the fuck was wrong with him? He had to think about Kayla too and what she wanted.\n\n\"For a while now. Before...our first time. It's to correct my irregular cycle.\"\n\n\"I see.\" Dean said pulling Kayla into his arms. The urge to hug her was so strong. \"Know what?\" He husked nuzzling her on the neck. \"The mere thought of my cum running down those creamy thighs right now is making me so hard. Can't wait to get back inside you.\" He groaned.\n\n\"Oh...\" Kayla shivered at his words. \"What are we waiting for then?\" She purred.\n\n\"I have to warn you though, Kay. This place...people might see us. You up for that? 'Cause if you're not, we can create our own...\" His thumb brushed over her bottom lip gently. \n\n\"I am.\" Kayla cut Dean off. If Alice was open-minded enough to do it, she could too. \"I want to.\"\n\n\"And there I was, thinking you would choose a bed.\" Dean drawled reaching up to release the button holding the elevator. \"Ready?\"\n\nKayla nodded just as the elevator opened to reveal a large roof top that obviously doubled as a helipad. There were lights all over and other tall buildings around.\n\nKayla gasped!"
    ],
    "authorname": "adjoaq",
    "tags": [
        "family",
        "thanksgiving",
        "elevator",
        "jealousy",
        "prank",
        "twins"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-steamy-chase-ch-07"
}
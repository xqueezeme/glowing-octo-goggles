{
    "title": "The Six Secrets of Sizzling Sex",
    "pages": [
        "First, please forgive the title. I know it sounds like one of those silly articles in Cosmopolitan Magazine.  But if the title got you here, please stay a few minutes \u2013 you may learn something. I've always thought that picking up one point than enhances your sex life is worth the time invested reading an article. You decide.\n\nIf you've come here anticipating concrete tips on the nuts and bolts of better sex, I invite you to read one of my other articles, Blowjobs for Dummies, How to Eat Pussy Like a Champ or Sexual Positions for Lovers, for example. In those articles I've detailed where to stick your tongue, where to put your fingers, plus who and what to cum on, or in.\n\nMy goal here is a bit different. I've had a lot of feedback email from readers of both sexes, asking how they can improve their sex lives. I should say, my opinion of how an individual can improve their sex life. Unless you're one the people in a relationship, you can really only speculate and offer advice. I'm not there in the room. If I were, I'd have my camcorder, a bottle of champagne, a blindfold and some duct tape, then there'd be no questions to ask. But that's another issue.\n\nThe point is that in listening to people with similar situations, you begin to postulate on what can really help improve their sex lives on a regular basis; not \"get her drunk, bud \u2013 that'll help.\" \n\nWhat I almost invariably find is that one partner is ready and rarin' to go, while the other is on a different wave length entirely. Women who are dripping, trembling and ready to fuck themselves in every hole with a hair brush, while their husbands sit in front of the TV and when confronted with a teddy-wearing, lust brimming wife, say \"not now, honey, I'm watching this program.\" Or guys...and we know who we are...who seem to have a perpetual erection and defy the stereotype of the bored husband or boyfriend completely. Ready to have sex first thing out of the shower \u2013 hell, in the shower \u2013 against the kitchen sink, over the couch, in the car \u2013 anywhere \u2013 but are repelled with apathy or excuses. This leads me to my first and perhaps most important point:\n\n<center>Choose the Right Partner</center>\n\nSo simple, it's nearly ridiculous, right? I know. If you're married or in a serious relationship, it may be too late - or not. But imagine if you before you made a commitment what you know now. You'd realize that initial passion dies down and what you're left with for the rest of your time together is how deep-seated a desire that person truly has. How much they love sex \u2013 not just you. If they can't get enough of you and can't wait to fuck \u2013 that's great. But many people who make a life-long, or at least long-term commitment based on this first 12-18 months of passion end up...shall I say, disappointed.\n\nYou can't change a leopard's spots. I didn't make up this line. My line would be, you can't change a person's desire. You would think that if someone married, say, a supermodel or gorgeous actress, all they'd want to do for the rest of their life was have sex with them ten times a day. Sure \u2013 for a while. Then their passion would ebb, and begin to look like the stock averages last year, down...down...down...as they get used to her beauty.\n\nWould that happen to me? Honestly, no. And I'm not just saying that. I may be a rare breed, but I just love to kiss, to eat pussy, have my cock worshipped and sure...to fuck with gusto. Unless she decides to forfeit her lips, pussy and legs, I'll still be interested for good. Will I look at other women? I'm not blind...just nearsightedide. But when I have a woman that remains passionate about, well, passion, then I can be faithful. Hasn't happened, but...\n\nBottom line: if you've chosen a person with passion similar to yours, you've made a wise \u2013 and lucky - decision for life. If you're not sure yet, delay the decision until you are. I can't over-exaggerate the importance of this point, as hard as it may be to hear. With all the things that are important in a relationship; honesty, hard work, good financial potential, surely sexual incompatibility can't be the make or break item, right? Wrong. Why are you at this website? Why are you reading this article? If you don't know in your heart by now that sexual incompatibility is something that will come back to haunt you, you may very well find out via nights of frustration and months of longing at a time.\n\nIf you're on the verge of making such a decision, please take these points into consideration \u2013that's all I'm asking. \n\nYou can't have sizzling sex alone (satisfying sex...maybe \u2013 sizzling...no). The right partner is the difference between sizzling sex and fizzling sex. Maybe for a lifetime.\n\n<center>Feeling Good about Yourself</center>\n\nHow did this point make its way into a sex article? Is this the Oprah show? \n\nWhen Oprah has a segment entitled \"Oral \u2013 is giving better than receiving?\" then there'll be no more need for my articles.\n\nWe're talking about sizzling sex here. Can sex be sizzling, even satisfying, if you don't feel good about yourself, if you lack confidence? I'm not saying you have to be \"super confident,\" comfortable in all situations and the master of all you survey. But I mean enough confidence to know that the person having sex with you, or the potential for it, is one lucky guy or girl! They're not doing you any favor; you're enjoying each other.\n\nAnd what does this take? Do you have to be a gorgeous magazine cover girl or fitness magazine guy? Hardly. These are unrealistic expectations for most of us. But if you feel flabby, out of shape, need a haircut, dress like a slob; you probably won't feel sexy.\n\nAnd this is what a lot of sex is about \u2013 your confidence level.\n\nSpeaking of Oprah or some of the other talk shows, have you ever seen one of the makeover segments? They take a woman, for instance. Put her on a low-carb diet, such as Atkins or the South Beach Diet for a month. Have her walk around the block a couple of dozen times a day, maybe lift some light weights, and the fat melts off. Then they cut or color her hair, which has been the same style since 1988, and make her up. Finally, they take the sweat suit off and dress her nicely and viola! She's suddenly a babe. And it was inside of her all the time.\n\nMan or women, we all get older, busier and out of shape. I defy any woman to give birth a few times and stay tight, much less have any time to exercise. I remember when I was 20 years old. An hour of weight lifting a week and when I took my shirt off, girls took notice. How easy it was...\n\nI'll never be 20 again. So now it's a couple hours a week running and a couple more hours lifting. Light on the carbs, easy on the beer, sane with the pizza. It's not all that tough to keep a flat stomach and some tone in your arms, chest and shoulders. All it takes is regular discipline.\n\nThe reward is how you feel about yourself, and this comes through in feeling sexy, feeling that someone would want to have sex with you. I mean it, confidence is sexy. When you project the fact that you feel good about yourself, you give off an aura of self-assurance that actually improves with age. So I don't care if you're 20 or 60, you make the most of what you've got. And speaking about making the most of what you've got...\n\n<center>Highlight Your Best Features</center>\n\nI knew a girl many years ago that in all actuality was relatively average looking. Except that she had startlingly blue eyes. When she was done up, with eye liner and whatever else girls do to their eyes that way, they sparkled. When I looked into her eyes I melted, that's how sexy they were. One feature, done right...instant sex appeal.\n\nI know another lady in her 40s. Her legs are just gorgeous. Long, shapely, muscular calves \u2013 just the way I like them. I'd like to lick my way up to her thighs and...no matter. But whenever I see her, she's wearing pants. At affairs, long dresses. No one ever sees her legs. If she wore shorts and high heels the guys would be following her home and her husband would never let her leave. But no.\n\nIt's the same thing with nice, full breasts, sumptuous lips or even great hair. You've got to take your best feature and underscore it so that it just can't be ignored. Everyone's got something sexy about himself or herself. \n\nNothing, however, is sexier than attitude. Not cockiness, not snobbery. An attitude that says without words, \"I'll fuck you half to death, and then finish the other half. I'll suck your cock until you don't just cum \u2013 you explode.\"\n\nMy friend is the most mild-mannered guy you could ever see. When he's done with his wife, she's covered with goose bumps, sweat and cum \u2013 and loving every minute of it. All he's got to do is look at her with an expression that says \"you know just what's coming, don't you?\" and she begins to moisten her panties. It's his attitude that he highlights. \n\nIt comes down to making the most of what you've got. If you're a stunning woman or a naturally handsome man \u2013 good for you. That's not where it ends though. I've known plenty of guys much better looking than me who never got half the sex. They figured their looks would be enough. They were wrong. While they were strutting around waiting to be noticed, I was learning how to please a woman in bed, how to make her laugh, to make her feel special \u2013 make her feel good and more important, make her feel bad. Looks alone is not your ticket. One good feature \u2013 that's all. Use it. \n\n<center>Make Your Own Movie</center>\n\nSizzling sex for one person may be a lovely lady sitting in a chair: her legs duct-taped to each chair leg; eyes blindfolded; not knowing when a cock might pierce her open lips; nipples fully erect and breathing like she's just run a marathon as her pussy is ravaged by a warm, wet tongue. But enough about my preferences. Sizzling sex for someone else might be a candle-lit dinner followed by warm, passionate missionary position on the bed for 15 minutes.\n\nThat's for you and your partner to decide. As long as you are in-synch. If she's longing to be bent over the couched and stuffed like a baked potato, and your idea of sexual excitement is to keep the lights on, you may have a dilemma. That's where communication and compatibility comes in.\n\nBut the worst thing you can do is to compare your sex life to someone else's. It creates nothing but dissatisfaction. I've always felt that when it comes to money, sex and, well, more sex, that the guideposts you should use are your own desires, not someone else's stories. \"I came five times, she licked my asshole for a half hour, I ate strawberries out of her pussy until she screamed my name over and over \"(well, that one I believe). I've heard an awful lot of stories about great sex, but the ones I believe the most are my own.\n\nDon't believe that everyone but you is having the great sex. They're not. But you can. Here's the best way:\n\n<center>Pick the Right Time and Place</center>\n\nWhen I was living with my girlfriend in college, the right time and place was anywhere and everywhere in the apartment. For many people, things are different.\n\nI promise you, if you expect great sex right after the kids finally go to bed, the laundry is folded and your wife falls on the bed, exhausted, or when your husband gets home after a day of negotiating for Middle-East peace...forget it. And have a heart. You both have needs, but the wrong time and place is not the right way to go about it.\n\nLet me digress for a moment. Sometimes you want a long, leisurely, passionate sexual experience. Sometimes you just want to fuck and cum. If you're both tired but frisky, settle for the slam and sleep. But not all the time, and don't expect it to suffice for long.\n\nLet me explain. A quick fuck is a great way to end an evening and a wonderful release. I love it. But it's like eating an appetizer for me. Within a few days, I had better get a meal, or I'm going to become frustrated and believe me, it's not pretty. What's a meal? Alright, since you asked. It's kissing, rubbing and holding. It's titty play and having my cock rubbed. It's spreading her legs and doing my favorite thing \u2013 using my tongue like a biomedical exploratory instrument, leading to a shaking, shuddering orgasm. It's having my cock licked, the head sucked, and my balls attended to. It's fucking in at least two or three positions and, if I'm lucky and the stars are aligned, maybe a little. anal. There it is.\n\nI can assure you that this is not going to be in the program after a day of hard work and a night of cooking, cleanup and childcare. Therefore, the more you want good sex, the more arranging you're going to have to do. Drop the kids off at Grandma's, go home and rock the house. Get a baby-sitter and get away for a day. You might have to be creative.\n\nWe used to have an arrangement with another young couple in the neighborhood. They'd pick up our kids and go for ice cream or to the mall for an hour or two. In the meantime, we'd have a champagne and vibrator party. When they got back, they'd drop off their kids and we'd take them and our children to a movie or park for a while. They'd go home, have a cocktail and fuck like...well, I can only imagine \u2013 she way pretty.\n\nYou can see what I mean. Make plans and get creative, and you can have that full-course meal sex. And you've got to make that time if you want a great sex life. \n\n<center>Take Care of #1</center>\n\nYou've heard this one before, but not from me. Because when I say take care of number one, I'm talking about your lover. Who else would I mean?\n\nBut a lot of lovers make sure their needs are taken care of first, and these are the ones who don't deserve a return engagement. \n\nFor guys this means, primarily, take your time! Why is it that after five minutes of kissing you're ready to get your cock sucked? I talk to my mechanic longer than that when he's changing my oil for Pete's sake. I'm not saying there aren't times when you're both tired and want to get down to business, but make this the exception, not the rule. Do you want to be thought of as a good lover? Then here's what you've got to do:\n\n<li>Take your time. Kiss her tenderly, rub her neck, her shoulders, her breasts, and move down to her lower back. There's not a lady in the world that doesn't love to be caressed. </li>\n\n<li>Give her the oral sex of her life. Make sure she cums at least once before you even think of your own pleasure. Lick her clit and find her G-spot \u2013 her moans will be your reward. </li>\n\n<li>When she's sucking your cock, tell her how good it feels, give her encouragement. </li>\n\n<li>Do not, I repeat, DO NOT cum too quick. Take it slow, stop every now and then when you feel you're going to cum \u2013 changing positions is a natural way to do this \u2013 but give her at least a 10-15 minute ride on your bony express. </li>\n\n<li>When you finally do cum, be a gentleman, and be tender. Get her a tissue first, if there's anything to wipe off. Kiss her and tell her how nice it was. Be honest. </li>\n\nLadies: Do you want to please your man? A couple of tricks:\n\n<li>Take care of him. Tell him things like, \"baby, you make me want you so much.\" We all like to be mentally \u2013 and physically \u2013 stroked. </li>\n\n<li>Worship his cock. Lick it, look him in the eyes while you stroke it. Moan your approval when you suck it, rub his wet cock all over your face. Place it between your tits and titty fuck him, looking him in the eyes and whisper, \"I'm going to take good care of your cock baby. You're going to cum for me...more than once.\" It's beyond hot knowing she wants your cock badly and wants to make sure you cum over and over. </li>\n\n<li>Moan like a porn star when he goes down on you. It's the greatest motivation and eventually becomes second nature \u2013 helping you get into it even more... </li>\n\nWell there we have it, six steps towards making your sex life all it can be. Are these the only six steps? I doubt it, and you may be doing some or all of these things right now. I hope you are, or that I've reminded you of the things you used to do and got away from. Get back to them. There's nothing finer, mentally or physically, than connecting with someone on an intimate level. You should do it as often as you can \u2013 it's what life is all about. Best of luck to you, and thanks for reading."
    ],
    "authorname": "BatsandGlamour",
    "tags": [
        "knowing cock",
        "improve sex",
        "reading article",
        "mentally physically",
        "fuck great",
        "time place",
        "sex lives",
        "great sex",
        "hard work",
        "times day"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/the-six-secrets-of-sizzling-sex"
}
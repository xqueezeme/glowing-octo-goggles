{
    "title": "JJ and Ashley Ch. 10",
    "pages": [
        "This might be the last chapter I submit for a while. I have plenty of story for the girls, but other stories are beginning to need attention. I'm hoping I can submit some of these new stories, which will be much shorter than JJ and Ashley, so there will still be some activity. I'm definitely not done with the girls, but I need to let them sit and work on other projects. \n\n*\n\nChp 10\n\nA couple hours later they took a break from studying the photos. JJ excused herself to use the bathroom while the other women refreshed beverages. Both of them whirled to face the front door when a key scraped into the lock, the deadbolt slid back and the door opened.\n\nAshley stopped short in the doorway, one foot in the house, one still on the porch. She definitely wasn't prepared to see two stunningly beautiful and very tall strangers in JJ's kitchen. She certainly didn't know what to make of their interested perusal of herself. \n\nStepping into the house and quietly shutting the door Ashley spoke calmly despite the confusion brimming inside. \"Hello. I'm Ashley.\"\n\nThe women looked at each other, a message clearly being shared between them. The brunette of the pair spoke in a lightly accented voice. \"Of course you are. Not quite the small town bumpkin we expected, but JJ does have standards.\" \n\nThat hurt, Ashley already struggling with a sudden sense of inadequacy, faced with these women of great physical beauty. She kept her head up though, determined to act like an adult.\n\nShe opened her mouth to ask where JJ might be when the redhead clucked her tongue and nudged the brunette. \"It's delightful to have a face to put with the name. I'm Veronica, this mouthy bitch is Margaret.\"\n\nAshley ignored the way her stomach dropped, trusting that JJ would have an explanation for this. She'd only been aware of a skype call to sort out this little spat. \"Likewise. I apologize if this comes across as rude, but I was under the impression JJ was going to video chat with you today. What happened?\"\n\nVeronica blushed, looking very regal despite the discomfort on her face. \"That was the plan. I took advantage of having her address. Flew in last night with high hopes of getting her back. I can see now,\" the redhead held up a perfectly manicured hand,\"that was wrong. JJ isn't mine. I had my chances and she's moved on. Quite happily, I must add.\" \n\nAshley had no idea what to say, appalled and hurt that this woman had intended to steal JJ away. Luckily, JJ picked this moment to emerge from the bathroom and entered the living room.\n\nShe instantly spotted Ashley, the immediate joy switching to cautious happiness at the blank expression Ashley had.\n\n\"Hey, Ashie. How was work?\" JJ came forward to give the blonde her customary kiss. Ashley didn't push her away, but it was a frosty greeting. \n\n\"Work went fine. There's an opportunity for some extra hours I wanted to talk with you about.\" Ashley added, hoping the hint would land.\n\n\"Okay. I was about to step out for a smoke anyways.\" JJ gestured towards the hall she'd just come from. \n\n\"Let me put my stuff down and I'll join you outside. It was lovely to meet you both, hopefully we can get to know one another a bit before you leave.\" Ashley directed this last part to Veronica and Margaret before disappearing down the hall. \n\nAshley set her backpack and small overnight bag on JJs bed and took a deep breath. She didn't want to start crying, but dammit, it was period week and her emotions were close to the surface. Scrubbing her hands over her face she took another deep breath. \"Calm and collected. Handle this rationally and with some poise.\" she reminded herself in a whisper, sliding the back door open.\n\nJJ met her in the middle, stepping outside from the kitchen door. Ashley watched as she lit a cigarette and exhaled the first puff of smoke. \"I'm guessing you didn't get my text, somehow.\" JJ began, her tone questioning. \n\n\"Nope. Today wasn't the best day to leave my phone at home, but I did. Probably still plugged in too.\" Ashley leaned into the porch railing, facing the backyard. She tapped her thumbs on the rail, unsure what to say, too many snide comments springing to mind. \n\n\"Well, I did text you so you'd be aware that things changed without my knowledge. That was the plan anyways.\" JJ leaned her butt against the rail, standing close enough they could talk without the smoke blowing towards Ashley.\n\n\"I appreciate that. It was a shock to see strange women in your house. I figured I'd come over and you'd have this little mess dealt with and we could spend some time together before we go bowling with the girls.\" Ashley looked down at her hands. \"What happened? They just showed up?\"\n\n\"Pretty much. I thought about slamming the door in their faces, but that wouldn't have helped anything. We talked and actually made some fucking progress. This mess is no longer a mess.\" JJ looked directly at Ashley, who looked over, her concern clear. \"I promise you this won't be an ongoing problem. Veronica understands that she fucked up, and needs to straighten up and\n\nmove on.\" JJ watched Ashley process this, tears slowly filling her eyes, blurring their clear blue color. Panic bubbled up inside JJ, her gut reaction to crying women. \n\n\"Please don't cry.\" JJ chucked her cigarette into the butt can and came forward to hug Ashley, wrapping her arms around the blonde from behind. She rested her chin on Ashley's shoulder, cheek against the blonde's ear. \n\nTears ran down Ashley's face, fed by the hurt and confusion, the idea she could have lost JJ again, and her own stress over the entire situation. Relief played a part too, that she hadn't walked in on some sort of nasty secret JJ might have held. All those trivial worries vanished before they had time to really gain traction. \n\n\"I'm okay. Relieved, actually.\" Ashley whispered, half choking on the tears. \"I saw them and for a split second had all these thoughts that there was some secret thing and I was the last to know.\" \n\nJJ squeezed her, understanding the reactionary doubt Ashley spoke of. \"I can't keep secrets from you. I'm not sure how I'll manage to do Christmas without spilling the beans.\" \n\nAshley chuckled, sniffing. \"You'll manage. But seriously, JJ, compared to them I felt like this tiny, naive, underdressed little thing. Like what the hell? You were with her, someone who's famous for her looks, and you still picked me?\" Ashley felt JJ shift, knew JJ was about to leap to her defenses. \"I'm not saying I'm ugly, I'm not. If anything, it makes me feel extra, extra special. You could have had her. You could still have her, and you chose me.\" She wiped tears from her cheeks and turned to look at JJ. \"I'm not trying to imply that you select a partner only by her physical appearance, since it's clear you don't. I don't know if I'm making much sense, but it makes me appreciate what we have all the more.\"\n\nJJ kissed Ashley's cheek. \"You're not your usual articulate self but I get you. I'm definitely in love with you as a person, not for how you look. I've done that, chased the prettiest girl in the room, had my fun with stuck up pretty girls. I'm tired of those games, of the drama. I'm ready for\n\nsomething real, which I feel we have.\"\n\n\"I'd agree we have a real relationship. Sure, it's fed by some awesome chemistry at times, but that's not all we have.\" Ashley laid her arms over JJs, already calmer and becoming collected emotionally.\n\nInside, Margaret and Veronica watched this exchange play out from the small kitchen window. They couldn't hear anything, but they both saw Ashley's tears and JJ's reaction.\n\nVeronica moved away from the window, stunned. \"This girl really does mean something to JJ. Any time I cried JJ would leave the room.\"\n\n\"Is that just because she saw through your fake cry act?\" Margaret asked, leaning over the sink to watch. \n\n\"Maybe towards the end, but she did it every time, no matter what. Happy tears, angry, sad, she left. Couldn't stand to see me cry, or just didn't know how to handle so much emotion on display.\" Ronnie took another peek, watched the women talk and the subtle movements of their heads.\n\nThey watched as Ashley pulled herself together and visibly calmed down as she and JJ talked. The two women outside continued to chat, their body language calm and comfortable. \n\n\"So this little scheme really was fucked up to begin with.\" Margaret stated. \"JJ is completely different with this girl. I keep expecting her to make a move on her, but nothing happens!\"\n\nRonnie sighed feeling guilty, which was relatively new for her. \"Yes it was. I was so sure I could make JJ change her mind. Seeing them together now, I don't know how I could have ever hoped to succeed. My ego's been getting the better of me lately.\"\n\nMargaret moved away from the window with a disappointed huff. \"They're just talking. How boring.\" She shook her hair over a slim shoulder and gave Ronnie a sharp look. \"Have you really been exposing Owen to this drama?\"\n\n\"Not intentionally. He does ask about JJ, they were very close. I had no idea he'd called her, but it does make sense.\" Veronica turned away from the window, arms folded across her chest in an\n\necho of JJs stance earlier that morning. \"He often turned to her for answers or for comfort if I'd disciplined him. She's right, though. He is a good boy with the potential to be just as good a man. I've lost focus with that.\" \n\n\"Well, then you know what you gotta do when you get home. Put your big girl mama panties on and be more attuned.\" Margaret opened the fridge and let out an excited coo. \"Bitch was holding out on me.\" She bent into the fridge and brought out a beer. \"You want one? She's got a full six pack.\"\n\n\"Yes she does, but no thanks.\" Veronica peeked out the window again, a delicate eyebrow rising. A tiny prick of jealousy shot through her at the sight of JJ kissing another woman before her more critical eye realized the picture they made. It was sweetly romantic and showed the\n\ndepth of their feelings for one another. \n\nAshley had turned to face JJ, her arms wrapped loosely around JJs waist. JJ stood in the circle of her arms, hands cupping Ashley's cheeks as they kissed. Their body language was relaxed, neither one moving to turn the kiss into something more. They were kissing to enjoy the kiss, to enjoy each other. It reminded Veronica of the way her husband used to kiss her. He'd always\n\nbeen so gentle with her, tender and careful. She missed that, she realized, watching Ashley duck her head so JJ could kiss her forehead.\n\nVeronica turned away again, slightly melancholy about what was missing in her own life. Shaking her head, rich red hair swirling like it did in shampoo commercials, Ronnie began to figure out how to make a socially graceful exit. She didn't want to cause anymore upset. \n\nJJ held Ashley's hand when they walked back into the house and returned to the living room, something the blonde was grateful for. It didn't feel condescending or belittling, like she needed to be led in and presented as the current girlfriend. Instead it felt like a normal gesture, a small and subtle show of affection and partnership. \n\nThey exited the hallway to find the brunette lounging in the armchair sipping from a beer.\n\n\"Seriously, Margaret? Helping yourself to my beer now? Is nothing sacred?\" JJ's tone was clearly playful, but her words had the tall woman looking contrite. \n\n\"You know me, JJ. I can't stand anything sacred, despite all that time at a Catholic boarding school.\" Margaret shrugged and took another sip.\n\nNeeding to keep a relaxed atmosphere, Ashley led JJ to the couch and sat, noticing the spread of photos on the coffee table for the first time. JJ stayed upright for a moment, looking back into the kitchen for Veronica. Ashley didn't notice the redhead joining them, engrossed in the mix of\n\nblack and white and color shots. JJ hadn't been kidding. There was so much skin on display, the top most photo depicting the three women in the room intimately entangled. She didn't have time to completely identify whose limb was whose before Veronica spoke. \n\n\"I believe Margaret and I have taken too much of your time today, JJ. I would like to apologize for overstepping boundaries I didn't want to see. Ashley, we're strangers to one another right now, but I hope that will change given time.\" the statuesque redhead inclined her head slightly\n\ntowards Ashley, who, after a second of mental blankness, nodded.\n\n\"I think a blank slate would be best for us all. Start fresh and with a positive attitude. I'm not going to lie, I'm familiar with your work, your fame. I'd love to get to know the real Veronica Blunt.\" Ashley stood as she spoke, leaving JJ's side to offer Veronica a truce handshake. \n\nSurprise showed clearly in ridiculously green eyes when, after a warm handshake, Ashley pulled Veronica down for a hug. \"I was raised to hug friends, no matter what issues might be between us.\"\n\n\"Killing 'em with kindness right there.\" Margaret quipped, her long legs dangling over the arm of the chair. \n\nJJ playfully ruffled Margaret's hair, fluffing the long brown tresses. \"Half the time they never see it until she's back in good graces.\" \n\nMargaret slapped JJ's hands away one handed, the other still clutching the beer bottle. \"Not the hair, not the hair! Shit, do you have any idea how long it took to do my hair this morning?\" \n\n\"Nope. Can't say I care all that much either.\" JJ skipped away as Margaret rose from the chair and scurried down the hall to the bathroom to assess the damage. Ashley and Veronica couldn't help but giggle at the profanity echoing down the hall as Margaret re-tamed her hair. \n\n\"If you're really gonna head out, then I'll get my goodbye out of the way.\" JJ joined Ronnie and Ashley, giving the redhead a quick hug. \"Thank you for talking, and for looking at things from my side. Fresh start, girlie.\" JJ patted Veronica's arm before stepping back to Ashley's side. \n\n\"I'm not sure I'd have been able to metaphorically step into your shoes if we'd done this over a computer. Thank you for tolerating my selfish ambush. Both of you.\" Bright green eyes bounced to them both, Ronnie looking extremely contrite. \n\n\"It's already forgiven. Fresh start, new page for all of us. We'll focus on moving forward.\" Ashley gave the supermodel a smile. She knew she'd never forget this incident but holding it against Veronica wouldn't serve any purpose. \n\nMargaret eventually returned and after another quick round of hugs and farewells JJ finally shut the door behind them. \n\nSliding the deadbolt home JJ laid her head against the door and exhaled slowly, eyes closed. Ashley gave her a side hug, dropping a kiss on her shoulder. \n\n\"Fucking finally. I need another smoke. You okay? Really and truly?\" JJ asked, turning her head to see Ashley. \n\n\"I think so. It'll take me a bit to really absorb it all, but her accepting it's time to move on helps. I wouldn't be able to stay sane if she was constantly trying to butt in and steal you away.\" Ashley squeezed JJ, shuddering at the thought.\n\nThey went outside together and JJ smoked while Ashley sat with her back against the house, far too quiet for JJ's liking. \n\n\"Would you rather skip our plans for tonight and stay in?\" JJ asked around a mouthful of smoke. \n\nAshley looked up and hesitated. \"Kind of.\" It seemed like she wanted to say more but she clamped her mouth shut and blushed instead.\n\n\"What? I can tell you have more to say.\" JJ prompted, flicking ash from the filter and dropping it into the butt can.\n\n\"I'm really not in the mood for hanging out with the girls, not after today. But if we stay in, well, certain activities will be limited so I don't really know which to do.\" Ashley half explained, that blush still giving her cheeks an adorable pink color while she studied her hands. \n\nThe cryptic answer intrigued JJ who sat next to the blushing blonde. \"And what activities would be limited? What's the reason for the limitation?\" \n\nAshley let out a sigh. \"I got my period this morning.\"\n\nUnderstanding instantly, JJ wrapped an arm around Ashley. \"Great. We can still cuddle on the couch and stuff ourselves stupid with popcorn watching cheesy movies. Or maybe we could walk around the neighborhood and see how many dogs we get to pet. I'll make you dinner too.\"\n\nShe pulled her girlfriend in close and kissed blonde curls. \"We've already established there's more to our relationship than sex. I'm never gonna get upset because we have to wait a few days, or because you're not in the mood.\"\n\nAshley leaned into JJ and rested a hand on JJ's thigh. \"Okay.\"\n\nOnce they were inside JJ sent a text to the girls explaining they needed a rain check. Everyone wished them well and Chloe reminded JJ they had plans for the rest of the week and expected perfect attendance. \n\nThen they did exactly as JJ had suggested and binge watched as many corny and sappy movies as they could. Half way through 'The Holiday' JJ made dinner, insisting Ashley remain curled up and half asleep in a cozy pile of blankets while she worked. \n\n\"I need to watch you next time. Lasagna has never tasted this good. I call dibs on the secret ingredient.\" Ashley spoke through her mouthful of food, plate balanced on her blanket covered knees. \n\n\"'There is no secret ingredient'.\" JJ gave Ashley a goofy look from the other end of the couch. \n\n\"I don't care what movie you just quoted. Teach me the ways of the lasagna.\" Ashley swallowed and scraped her fork through the sauce and cheese dribbles on her plate.\n\n\"There's some breadsticks and a salad too. I remembered to seed the tomatoes before I put them in. You should try it.\" JJ stabbed a chunk of cucumber and some lettuce, holding them up for emphasis. \n\nAshley shook her head and kicked off the blankets. \"I need more saucy pasta deliciousness.\" \n\nJJ bit her tongue to keep from turning that comment into a dirty joke. It would have been bad. \"I'm glad you're enjoying it.\"\n\nAshley returned with another heap of pasta, balancing the plate with one hand while she\n\nre-cocooned herself with blankets. \"I'm enjoying it too much. We'll definitely need to take that walk later. This is not a Coach approved portion, but whatever.\" \n\nThey let their dinner settle before taking a walk through the neighborhood. As they walked Ashley shared some of her memories growing up after JJ had left. JJ listened, asking questions and laughing at the surprising wildness of her girlfriend. She never would have guessed Ashley\n\nhad a rebellious streak, much less that it was a mile wide. \n\n***\n\nThe rest of the summer passed far too quickly and before the girls knew it, the school year loomed ahead for Ashley. She was equally eager and disappointed. While she was looking forward to returning, seeing her friends, resuming track, and starting new classes Ashley wasn't\n\nready to leave JJ. It felt like she'd just gotten her back, just begun to know the older girl again.\n\nNot to mention the sex. Not having a partner had never really bothered her before, always taking need into her own hands. Now, Ashley wasn't thrilled to think about all the nights she would be spending sleeping alone in a small twin bed, Lisa just across the way. \n\nWith dorms opening up the first week of August and classes starting the following week, Ashley found herself packing the second to last Saturday of July. As she folded clothing and stuffed her second duffel Ashley went over her list of things to do her last week at home. Monday was the\n\noil change and tire rotation on her car. She had already scheduled an appointment with the garage to come in after her work shift. Tuesday was pretty open, but she had a lunch date with her mother. Wednesday was the last day of work and a dental appointment. Thursday JJ had\n\nasked her to keep open in the evening, but hadn't shared any further details. Friday Ashley planned to spend cleaning her room one last time and completing any last minute packing. Saturday morning was the drive up to school and getting situated in another new dorm. ",
        "Luckily, she and Lisa would be sharing the space so neither one had to worry about yucky new roommate habits to get used to. Sunday she and Brenda had tentative plans to connect and share schedules. They had met up freshman year at a small, hipster coffee shop run by a fleet of older college students and a few alumni to catch up and share information. While at school they made an effort to see one another regularly since they didn't run in similar circles. \n\nAshley shoved an extra pair of running shoes into the duffel and jumped when a light knock sounded behind her. Turning she found JJ learning in the doorway, that familiar half grin in place.  Ashley had a flash of memory, the pedestrian she'd run into on a night run during winter break had smiled like that before looking away. \n\n\"Debbie said you'd be busy packing so I  came to offer my assistance. Or just keep you company.\" JJ looked at the two duffels, one on the desk as Ashley packed, the other already zipped and sitting on the floor. \n\n\"I could use both.\" Ashley picked up a pair of jeans and added them to the bag. \"That box on my bed is for the books stacked next to it. Could you start with that?\"\n\n\"Sure can.\" JJ pushed off the door frame and began piling the books, a mixture of hardcover and paperbacks, into the small moving box. \"Is all this recreational reading, or is some of it reference material?\" JJ held up \"Leaves of Grass\", arching a dark eyebrow at Ashley. \n\n\"It's all recreational. Although I suppose the zombie apocalypse survival book could fall under reference material.\" Ashley added two light hoodies to her duffel and grinned at JJ's snort of laughter. \n\n\"It's quite the collection.\" JJ agreed, pulling out a small hardcover to make room for a trio of tall paperbacks. Both her eyebrows rose when she read the titles. She turned around to face Ashley fully, the trilogy in her hand.\n\nAshley looked up, a stack of panties in her hands. \"What?\"\n\n\"'The Claiming of Sleeping Beauty', 'Beauty's Punishment', 'Beauty's Release'? You've read these?\" JJ asked, amazingly aroused at the idea. \n\nThe blush that blossomed across Ashley's face was answer enough. \"Yes. Is that a problem?\" Ashley kept a calm demeanor but wasn't sure of JJ's reaction.\n\n\"No, fuck...\" JJ looked from the books to Ashley, \"I'm a bit surprised, I guess. These don't seem well known. Took me forever to track down a full set.\" JJ shook her head, jumbled. \"I love knowing you've read them. Erotica isn't something I was sure about. With you, I mean. Did you enjoy them?\" JJ sat on Ashley's bed, tucking the books back into their box.\n\n\"Overall, yes. Some bits were too extreme for me to really enjoy but I've read each a few times.\" Ashley hastily stashed her undies, feeling awkward holding them while discussing erotica. \n\n\"Yeah, I had the same experience. There were several parts that were good, exciting, and even inspiring but I found there were also a few things that weren't appealing.\" JJ laid another layer of books down as she spoke. \"You don't have to go into tons of detail, but I'm curious. Did reading them excite you, or encourage you to try some of what you read about?\" \n\nAshley didn't answer right away, considering how she could share her experiences. She absent-mindedly added several rolled up socks to her bag, watching JJ's hair flop over her forehead. It was getting longer on top, the longest Ashley had seen since childhood.\n\n\"The spankings interested me the most. Mom and dad never used them for punishment, so I don't have any bad memories of being spanked.\" Ashley added a soft case that held the few pieces of jewelry she'd be taking to school. \"I found the books my junior year of high school and since I was dating Frankie, I showed him. He read them too, but both of us were too shy to really bring anything up right away. We were both virgins, both trying to figure out how some of the activities in the books actually work. We managed to get past our shyness over the summer.\" Ashley shoved her shower caddy into the last bit of free space and zipped the duffel. Hauling the bag from her desk she set it down heavily next to it's twin, already crammed full.\n\n\"We were at his house, his parents were gone for a weekend or something, so we knew we had the house all to ourselves. The first thing we did was start making out on his mom's designer couch. The one no one sits on except at Easter.\" Ashley sat in her desk chair, swiveled to face\n\nJJ who was leaning forward, engrossed.\n\n\"So we started to get worked up, you know, and Frankie slipped his hands under my shirt, found my boobs. That was new, we'd agreed to stay outside clothing until we were both ready to move further. It took me a lot longer to remember that. He played for a minute, squeezing and touching before he asked if it was okay. I said yeah, made a dumb joke about a safe word. His dick twitched hard enough I could feel it through both our pants.\" Ashley giggled, both at the\n\nmemory and the way JJs nose scrunched.\n\n\"TMI, babe.\"\n\n\"Anyways, that got us talking about the books. He asked if there was anything I wanted to try from them. I admitted the spankings were exciting and about the only thing I was comfortable trying. Body paint would have been too messy and anal definitely wasn't going to happen, much\n\nless actual sex. Frankie had me stand up and take off my shorts. I had a thong on, so it was perfect. He could spank my butt without me having to expose myself fully. I laid across his lap, that twitchy dick right under my hip, and begged Frankie to spank me until my cheeks were pink.\"\n\n\"Damn.\" JJ rubbed her hands together, suddenly wishing she could hear Ashley beg for pink cheeks.\n\n\"Yeah. So, Frankie gave me a pink butt, and even got to cop a feel when I begged for that too. Well,\" Ashley blushed again, smiling at the memory, \"to be honest he did more than just cop a feel. He gave me a very nice orgasm.\"\n\nJJ moaned, her own cheeks getting rosy at the mental picture of Ashley cumming in a boy's lap with a freshly spanked ass. \"That's fucking hot, babe.\"\n\nAshley grinned, \"Oh, that's not the end.\"\n\n\"Continue, please!\" JJ's eagerness was encouraging so a Ashley cleared her throat and resumed her story.\n\n\"So, Frankie made me cum and it was the best. But I could feel his dick, still hard and still twitching. I had the idea that I should return the favor, give him an amazing orgasm too. I sort of slid off his lap, mostly because my legs were jello, and just knelt there for a second. Even wanting to, I had to work up the nerve to reach for his jeans. Poor Frankie froze up, clearly not expecting me to reciprocate, or at least not in such a forward way. I dug him out and just stared,\n\nsince his was the first erection I'd ever seen. I stroked him for a bit but even I could tell he was close. Leaking and throbbing, him panting and trembling. Without really thinking, I licked his tip which just made all the leaking and panting worse. Then I gave him a short but...deep blow job.\" Ashley saw JJ swallow reflexively, her own mouth filling with saliva from the arousal and the\n\nmemory.\n\n\"Goddamn Ashie.\" JJ scrubbed her cheeks with her palms, excited by the blonde's story. \"I'm guessing that's when you found out you had no gag reflex.\"\n\nAshley nodded, \"Yep. And it was something we practiced a few more times. Frankie was the only one I've done that with, besides you.\"\n\nJJ ran fingers through her hair, raking it back from her forehead. \"I kinda wish we could do it now. Knew I should've packed today.\" she thumped her knee with a fist.\n\n\"Hah, how do you know I'd be willing?\" Ashley asked, folding her arms over her chest. \n\n\"You've never said no to my cock, but I suppose there will be a first time eventually.\" JJ shrugged. \n\n\"I might start. It seems your ego needs deflating. How do you manage to make it through doorways with such a big head?\" Ashley smirked at JJ, who flung a small pillow at the blonde.\n\nAshley caught the pillow and threw it back.  She knew JJ well enough now and trusted her so much that she wasn't worried in the slightest about JJ pressing the issue should Ashley say 'no'. The older woman had made it crystal clear on more than one occasion that she respected boundaries, verbal and physical. Ashley knew this stemmed from something more than just being a decent human being. It was the product of JJ's childhood, of growing up with boundaries\n\nbeing constantly overstepped or not even in place when they should have been. It was JJ's way of making up for the abuse she'd endured and it made Ashley's heart ache to remember.\n\nAfter a short pillow fight the girls finished Ashley's packing in record time and joined Debbie for a dinner of grilled chicken and asparagus with hard lemonade outside. It was a relaxed meal, which was the norm when the three women were together. Ashley sat back in her deck chair,\n\nswirling her lemonade in it's bottle, watching her girlfriend and mother discuss grilling techniques and seasonings. \n\nWatching them gave the blonde another wave of unhappiness. She didn't want\n\nto leave and miss this; dinner had felt more like a family meal than it had in several years. While she knew that nothing would change drastically while she was back at school, Ashley couldn't stop worrying. Would JJ visit mom? Would they have lunches or dinners together still? Surely they would stay in touch without her there to facilitate it. She didn't want either of them\n\nreverting back to their hermit ways. She had watched her mom become one after her dad passed. Ashley knew some of it was grief, knew her mom hadn't wanted Ashley to see her as weak or unable to provide. And there was the inevitable thought that if she spent any time with attractive, single men she was somehow betraying John. \n\nDebra's laugh echoed across the backyard, JJ grinning over at Ashley, who beamed in return.\n\n\"Thank god we had each other\", Ashley thought, sipping her lemonade. It had taken a year for Ashley to ask her mom what was going on, to leap the hurdle of nerves, fear, and worry inside herself to reach out. \n\nDebbie hadn't been able to shore the damn and it all came out. The emptiness left from losing a spouse, the stress of bills and needs that had to be met, the sense\n\nof betrayal, and the fear of losing Ashley - both in a physical sense and when college began.\n\nThey had talked as women, not just as mother and daughter, and reached a better place where there was no more guilt or fear. The grief took it's natural course and they both came out on the better side. \n\n\"Hey, quiet one. Penny for your thoughts?\" JJ plunked down into the chair next to Ashley, flicking hair out of her eyes.\n\n\"A penny? Inflation has raised that to at least a dollar by now.\" Ashley teased.\n\n\"Shit. I'm fresh out.\" JJ made a show of patting her pockets, looking for cash.\n\n\"Mmm, too much fun out on the town last night?\" Ashley cocked an eyebrow, finishing her drink in one last swallow.\n\n\"Yeah, couldn't resist this cute girl on stage. She was showing it all off. Gotta compensate for the view, ya know.\" JJ laughed when Ashley mock glared. \"Seriously though, everything cool?\"\n\n\"Mostly. Not looking forward to leaving. I'm going to miss you. Miss this.\" Ashley gestured to encompass the meal. \n\n\"That, my dear is what phones are for. Text me anytime. Or call. You know my weekends are free. We'll plan some visits.\" JJ reached over and squeezed Ashley's knee. \"Want another lemonade?\"\n\nAshley's last week at home flew by, as it always did. JJ finally broke her silence Thursday morning, revealing a dinner reservation for 7 that evening, formal attire required. She didn't give any further details, so Thursday afternoon Ashley found herself running a hot bubble bath, the last one she'd get until she came back home. She soaked in the hot water, shaving right before she drained the tub. Ashley patted herself dry and applied a softly fragrant lotion to keep her freshly shaved skin smooth. She took care of drying her hair before dressing, chewing her lip as\n\nshe calculated the time, would she have enough to straighten her hair?\n\nShe did, barely. Ashley was slipping the angled post of a delicate dangly earring into her earlobe when the doorbell rang. Heart jumping, the blonde quickly adjusted the jewelry and left her bedroom to answer the door, high heels dragging slightly as she stepped onto the carpet. \n\nWhen the door opened, both women were momentarily speechless. JJ's heart skipped to match Ashley's racing pulse at the sight before her. Ashley wore a black dress with a wonderfully flowy design. It hugged her torso, but it's neckline kept things modestly covered. A black band of satin with a narrow central stripe of white circled Ashley's waist, seeming to exaggerate her slender build. The skirt of the dress fell in soft folds to Ashley's knee, an opaque satiny material under a filmy tulle that matched the cute ruffles at her shoulders. \n\nLean, smooth legs ended in daring heels, the height of which actually had Ashley standing taller than JJ. It was the gleaming gold that fell over Ashley's shoulder that had surprised JJ the most. Gone were the tight springy curls, temporarily replaced with a sleek golden wealth that seemed to sparkle. Or maybe that was just the modestly tiered earrings swaying from the blonde's ears, clearly a match to the necklace that filled the space between neckline and throat. JJ looked up from the necklace into wide blue eyes, artfully enhanced with a smoky cat eye. She tried very hard not to focus on the glistening pink lips that were parted so temptingly and think of something original to say.\n\nAshley barely noticed the silence, stunned herself. JJ had dressed up before but never like this. She wore a three piece suit, one that must have been tailored to fit so perfectly. The black jacket didn't completely hide the vest beneath, half covering a crisp white button down and  bold blue tie. The jacket fell midway to JJ's hips, hiding their very slight curve, blending into the black pants and their sharp seams. \n\nAshley thought she recognized the boots, but they gleamed in a way she didn't remember. And her hair, Ashley pulled her eyes away from the footwear to almost gape at the freshly cut and styled fade JJ wore. For weeks, she'd let it grow and now the sides were cut back down, gradually fading into invisible stubble around her ears and neckline. The longer length up top was styled into a roguishly casual pompadour, almost as if JJ had simply used her fingers to comb it back. She probably had, after fastening the twin diamond stud earrings in her ears and straightening that tie. Ashley realized she was staring and spoke without a filter. \"Fuck, you're fucking hot.\"\n\nJJ chuckled and grinned, offering the bouquet of flowers she held to Ashley \"You're absolutely breathtaking.\"\n\nAccepting the flowers she hadn't noticed, Ashley stepped back, opening the door further. \"Come in, sorry for my language.\"\n\nJJ stepped over the threshold and kissed Ashley.  \"Don't apologize. My ears won't be\n\nscandalized by a dirty word or two.\" \n\nSetting the flowers gently on the island Ashley found a vase and began transferring the assortment. \"Maybe yours won't, but I promise to keep them just between us tonight. Best behavior, cross my heart.\" \n\n\"All night?\" JJ asked, coming up behind Ashley to touch her straight golden hair. It was much longer than she'd realized, now brushing just about the middle of Ashley's skirt. Thick too, without the curls to hide it. \n\n\"All night. You said this was a romantic date. I will behave.\" Ashley assured JJ, placing the last of the baby's breath in the vase. \n\nShe went to move the heavy vase, hands wrapped around it when JJ's hands found her waist and held her steady, a familiar hardness rubbing Ashley's hip. She couldn't help the gasp, or the sudden damp swelling deep inside herself. \n\nJJ's lips brushed a dangling earring, \"No, not all night. Behave yourself, act like the stunning lady you are, prove to everyone you are more than just a gorgeous girl, while we're in public. The minute I take you home and close my door, I want your best bad girl behavior. The dirty, naughty, scandalous words and the actions to match. Show me your devilish side, the side of\n\nyou that bends over for me in libraries and begs for my cock.\" \n\nAshley whimpered, her fingers gripping the vase much too tight. A quick nip to her neck was enough to send a small shockwave down her spine, JJ moving away, taking the vase with her.\n\n\"How about right here?\" JJ asked, rotating the flowers on the island, making minute adjustments while Ashley slowly turned, not composed at all.\n\n\"It looks lovely. I need to grab my purse, then we can go.\" Ashley felt like she was floating down the hallway, hoping dimly she wasn't stumbling.\n\nThe drive to the restaurant was strange. Ashley was hyper aware of the sexual charge between them but JJ made conversation in such a relaxed way, Ashley could almost believe the older woman was unaware of the electric tension.\n\nJJ took them to the same restaurant they'd gone to for Ashley's birthday celebration, this time making use of the valet parking. She traded her keys for the ticket before coming around to offer Ashley an arm, gallantly walking her to the front door. \n\nAn attractive hostess seated them when JJ gave her name, taking the small \"reserved\" placard with her after she was certain they were happy with the smaller booth, tucked into a private corner of the restaurant. \n\nOver a simple dinner the girls talked about what the new school year would bring for Ashley, mostly at JJ's prodding. Ashley found herself talking about her classes, most of them focusing on her sports medicine degree. When she mentioned her one art class, JJ steered the conversation towards Ashley's old hobby of painting.\n\nPainting was a touchy subject for Ashley. She'd begun to experiment with different paints and techniques right before her dad had died. When the news of John's death had reached them, Ashley lost her interest in creating art for her own enjoyment. \n\nTalking about it with JJ, Ashley realized that even though she'd begun painting again, it still didn't bring the same enjoyment. It wasn't fulfilling the way it had been. She painted because it was something to do, because her tools sat there unused and waiting, because she needed to try a specific technique discussed in class. \n\n\"I knew this guy, he's a brilliant artist, but I met him during his struggle to become famous. He would crank out painting after painting, sculptures, pottery, carvings, anything he could make to sell. It got him the attention he wanted, being adept in so many mediums. He rose to the top very fast and promptly plateaued.\" JJ paused to wipe her mouth with her napkin, her plate empty. Ashley pushed the last of her tortellini around, unsure if she wanted to finish. \n\n\"He had so many requests and commissions to work on, he couldn't afford to be burned out or have a block. He worked anyways, worked right through his lack of inspiration, because tears don't pay the bills. While that may not be the case with you, maybe the same strategy will work. Paint through the silence of your muse. She'll show up again, in her own time.\" JJ sounded so sure, but Ashley wasn't convinced. \n\n\"What if she never does? What if painting\n\nnever becomes enjoyable again? I've got all these cherished memories of painting so it's notsomething I want to give up, but I can't seem to actually create anything.\" Ashley put her fork down, not hungry anymore, and sipped her wine.\n\n\"Maybe you've gotta start with something else. Doodles. Smaller sketches.\" JJ leaned back in her chair, looking thoughtful. \"Or just keep up the techniques until you're bored with them and ready to move on.\"\n\nTheir waitress showed up, halting their conversation with her offer of dessert and coffee. Under her guidance, JJ and Ashley shared a truly decadent slice of raspberry cheesecake and both enjoyed a cup of coffee before JJ asked for the bill.",
        "They walked out of the restaurant arm in arm, JJ holding the door for Ashley and an elderly couple that was leaving as well. JJ came to Ashley's side to wait for the truck to be brought around, having already handed off the valet ticket.\n\n\"Thank you, JJ, for tonight. It was very romantic. I forgot that you have a flair for the romantic gestures.\" Ashley kissed JJ when the dark haired girl turned towards her.\n\n\"Hmmm, if they get me kisses like that I'll have to make romantic gestures more often.\" JJ teased, then tipped her head until her forehead touched Ashley's. \"If I sound like I'm joking, understand that I'm not. You're my girl, and I will be romantic for you whether I get kisses or not. You deserve to be treated to romantic things, and it's my job to make sure you get them often. I'm extremely dedicated to this job.\"\n\nAshley smiled, closing her eyes to keep the tears at bay. \"Understood.\"\n\nNothing more was said until they were stopped at a red light, a large rowdy group of teenagers crossing the intersection. Ashley watched them, remembering summers with her girl friends, staying up late, exploring the town until the latest curfew.\n\nShe was so caught up watching the pedestrians that Ashley jumped when JJ slid a hand over her shoulder and under her hair to rest on her neck.\n\n\"You okay?\" JJ asked, a thumb rubbing the soft skin of Ashley's neck.\n\n\"Yeah, just took a trip down memory lane.\" Ashley shivered at JJ's touch, feeling the sexual tension between them snap taut like a string.\n\nJJ must have felt it too, \"Do you remember what I said before we left for dinner?\"\n\n\"Yes.\" Ashley shivered again, excitement coursing through her.\n\n\"Good. We have two traffic lights and one stop sign before we're home.\" JJ left her hand on Ashley's neck when she accelerated, her eyes never leaving the road before them.\n\nAshley didn't need the invitation. She scooted closer, her hands making quick work of JJ's jacket and pants. The zipper gaped to show a pair of bulging black silk boxers, the front flap already being forced open by the heavy cock beneath. Saliva pooled as Ashley freed the toy, the same thick monster from the last time she'd been in this position.\n\nMuch like the last time, JJ parked in her driveway, shut off the engine and ran fingers through the rich mass of gold covering her lap. Instead of rising though, Ashley kept going, the downward force pressing the dildo into JJ hard enough to send tingles up her spine.\n\nAshley hadn't even realized they were stopped, so absorbed in the blowjob she was giving. Relentless pressure on her hair pulled her head up, the fake cock slipping from her mouth with an exaggerated pop.\n\n\"That was excellent. House. Now.\" JJ ordered, fixing her clothing one handed.\n\nAshley followed JJ inside, an idea forming as the older woman unlocked the door, actually waving to the neighbors who sat smoking on their front porch. \n\nInside, JJ turned to lock the door, including the deadbolt. They were staying in for the night now. Turning around, JJ let out an appreciative groan, Ashley somehow already naked and on her knees, those wicked stilettos still on her feet. \"Damn, baby.\"\n\n\"Mmm, give me back that cock. I wasn't done.\" Ashley purred, licking her lips.\n\nJJ did as requested, opening her dress pants just enough to release her cock. She stepped forward, gripping the thick base to slap the head sharply on Ashley's waiting tongue. \"I want to see you take it all.\" she growled, tracing the blunt tip around Ashley's lips. \n\n\"Yes, sir\" Ashley murmured, her eyes watching JJ even as she took the thick cock inside her mouth, slowly working it into her throat. \n\nJJ snorted air in a harsh exhale. Being called 'sir' was unexpected but arousing as fuck. Only a few girls had ever done so, and never while they worshiped her cock.\n\nAshley eventually had to break eye contact, the pace she'd set wouldn't allow it. Closing her eyes she focused on the task at hand. The smells - the faint musk of the leather harness, the light hint of laundry detergent mixed with a whiff of something smoky, but not quite cigarette smoke. The rich, dark scent of JJ, from her skin, from her clothing from her pussy buried beneath those clothes. \n\nAshley pressed her nose into JJ, her throat burning pleasantly around the toy's girth. The thickness of this toy always stretched her, leaving her achingly aware of it's absence. She moaned as she pulled back, the heaviness of it on her tongue thrilling. It was a reminder of how powerful this cock was, of how it would leave an invisible but obvious imprint on her before the night was over.\n\nHands in her hair didn't distract her, but Ashley did open her eyes again to look up at JJ. One hand was slowly wrapping her hair up, making three loops around before it came up snug against her skull. Ashley shivered and plunged down on JJ's cock again. There was something about being in such a submissive position that Ashley found intoxicating. To know that JJ could use brute force to jerk her head around, force her to go faster or rougher. Trusting that she wouldn't. Trusting that she was doing exactly as JJ wanted, pleasing her exactly as she needed. \n\nJJ had already shucked her dinner jacket, tossing it carelessly over the back of the armchair. She couldn't help being drawn to the impressive wealth of Ashley's hair, straight and thick, gleaming in the dim light from the kitchen. She wrapped her left hand in it, following Ashley's movement. With her right hand JJ loosed her tie a fraction, just enough to undo the top button of her shirt. She was already panting, her heart racing. Between the sight of Ashley so clearly enthralled in her task, the sounds Ashley was unconsciously making around her cock, and the consistent nudge to her own inflamed pussy JJ knew her control was quickly running out. \n\nShe bent slightly, trailing the back of her fingers over Ashley's hollowed cheek, then tipping under her jaw to stroke the elegant column of her throat. Blue eyes flew open, glazed over as the tracked over to hers. \"I want you to swallow when I cum.\" JJ whispered, her fingers resting on Ashley's throat. She felt the uptick in the blonde's pulse and the vibration of a moan. She couldn't stop her own moan when hands slid up her thighs, caressing them through the soft fabric, working slowly but surely around to her ass.\n\nAshley heard JJ, almost choking at the request. She'd do it, take everything JJ had. She wanted it all now. Her hands moved without her really thinking about it, somehow finding their way to JJ's ass, clutching and pulling, encouraging an increase in the speed of things. Ashley couldn't help herself, she wanted to make JJ cum in her mouth, wanted to give her this, regardless of the consequences. \n\nIt wasn't long before JJs grip tightened in Ashley's hair and on her throat, her thighs trembling as she pushed her cock deeper into Ashley's throat, holding it there when her body locked. Ashley hummed around the massive cock in her throat, blinking away the involuntary tears. She didn't feel anything except elation. JJ was cumming just for her!\n\nJJ pulled back quickly, aware she was cutting off Ashley's air. Her cock was reluctantly let go with another exaggerated slurp, Ashley already looking up at JJ with needy eyes and pouty lips. Still breathless, JJ leaned down and kissed Ashley, neither of them caring that saliva had dribbled and flicked copiously during that blow job. JJ used the hand still wrapped in Ashley's hair to angle the blonde's head, expressing her neck.\n\nThe sharp sting of JJ's teeth didn't register as pain. It was brightly pleasurable, forcing a gasp from Ashley, her hands flying up to JJ's shoulders not to push her away, but to hold her there. Ashley stood, JJ guiding her upright all while nipping and suckling at Ashley's neck. \n\nThey moved as one, JJ guiding again, until Ashley bumped into the back of the couch. Only then did JJ raise her head. She let go of Ashley's hair now, the rumpled mass falling down Ashley's back. JJ cupped Ashley's cheek, the soft touch at odds with the rough kiss, their need almost too much to contain. Ashley gripped JJ's sides for balance now that she was sitting on the back of the couch, being kissed senseless.\n\nAshley was startled out of her daze when strong hands gripped her waist, lifting and turning her. She moved as directed, looking over her shoulder to see JJ squat, suddenly very aware that she was exposed completely. The thought sent a familiar tingle through her.\n\n\"I love how wet you are for me.\" JJ rasped, running a thumb over Ashley's fat labia, the curls slick with juices. She carefully pried one lip away from the other, an expletive leaving her mouth when a string of clear juice dribbled down her thumb to splash on the floor. Ashley trembled, moaning and whimpering into the couch, the muscles in her thighs and ass twitching. JJ stood and slid her cock inside Ashley in one fluid move before she reined herself in.\n\n\"You just fucking dripped on the floor. Holy fuck.\" JJ gave Ashley a short and deep thrust, rewarded with a squeal and begging for more.\n\n\"Please, please. I need it...fuck, fuck me...\" Ashley grunted under another deep jab, her pussy clamping down on the thick invader. \"Yes, more, just like that...uhh...\" JJ gave her another quick thrust, then paused.\n\nAshley shook her head. This wasn't what she wanted. Rearing back Ashley twisted her torso, one hand grabbing JJs shirt front. JJ smirked, nudging her hips into Ashley's ass. \"Fuck me dammit. Hard. Fuck me so I can't talk and can barely breathe.\" Ashley demanded. She wasn't sure where this savage need was coming from but she was going to embrace it tonight. \n\nJJ narrowed her eyes and pulled her cock slowly from Ashley, pausing with the tip just barely inside. She gripped Ashley's hips just a bit tighter and slammed home hard enough to make them both grunt. She would have been worried if Ashley hadn't instantly pushed back with an excited \"Fuck yes. More!\"\n\nIt was a punishing pace but JJ didn't let up. She was determined to keep going, the jumbled words and phrases from Ashley spurring her on. Finally those petered out, Ashley twisting again to try and kiss JJ, panting in a high and short way after a third or fourth orgasm stole her words. JJ couldn't keep the same amount of force if she leaned forward, the position just didn't allow it. Frustrated and approaching another orgasm of her own, JJ shook her head, looking around.\n\nWith a yelp from Ashley, JJ pulled away completely, pulling the blonde over to the nearest wall and pushing her up against it. Ashley understood instantly and hiked her legs up one at a time, hooking them around JJs waist. \n\nIt took a quick fumble to get JJ's cock seated again, then a slight adjustment to Ashley's position before JJ resumed pounding into the blonde. Ashley cooed in JJ's ear, her hands pulling at JJ's vest and shirt, her lips busy kissing JJ's face and neck. Coos turned into whimpering pants and sharp moans as they both raced towards another orgasm. \n\nJJ gripped Ashley's ass hard, the blonde's legs hooked over her arms, ankles locked behind her back. Leaning into her, JJ buried her face in Ashley's neck as a strangled moan worked it's way from her throat. She gave one last rough thrust up into Ashley before she came, hard. Ashley's answering cry sounded seconds later, both of them trembling against the wall.\n\nAshley was still coming down, shaking and out of breath when JJ shifted. The cock slipped wetly from her as JJ carefully helped Ashley regain solid footing, scattering kisses all over her neck and shoulders. \"God,\" she gasped, hugging JJ tightly. \"That was intense.\"\n\n\"Mmhmm. I'm not done with you yet.\" JJ sounded just as breathless. \n\nA hand on her arm guided Ashley into the kitchen and towards the table. Ashley bent over the small kitchen table when prompted, the slight fatigue fading when JJ began to caress the tight globes of her ass. Looking over her shoulder again Ashley wiggled her bottom at JJ, grinning and fluttering her eyelashes when JJ looked up, an eyebrow arched.\n\n\"Keep smiling like that and I'll end up turning your ass red.\" JJ warned, letting her hand come down in a gentle slap on Ashley's right cheek. \n\nFeeling playful, Ashley kept smiling. She bumped her butt against JJ to encourage another swat. When JJ gave her one just as gentle as the first, Ashley rolled her eyes. \"Is that what you call a spanking? Because it seems pretty fucking weak for a big bad butch like yourself.\" \n\n\"Oh, you're gonna go that route tonight. You must not want to be able to sit tomorrow.\" JJ gave Ashley a sharp slap, a satisfying clap echoing in the kitchen. \n\nJJ kept it up, spanking Ashley over and over until her ass was rosy pink and the blonde was drooling on the table, blissed out. Hand stinging, JJ knelt behind Ashley and gently eased trembling thighs apart. She buried her face in the soaked pussy that waited for her, tongue probing deep. \n\nTo keep Ashley from relaxing too much, JJ interchanged the oral with extra spankings. She also swept her tongue higher than usual and played with Ashley's tightly closed asshole. If she wasn't going to see her girlfriend for the next several weeks, JJ was determined to at least finger her ass. It would be a last kinky hurrah for them. \n\nAshley wasn't protesting the attention to her bottom, but she was aware of it. If JJ wanted to lick her ass then Ashley wasn't going to stop her, tonight. It actually felt pretty good, now that she wasn't thinking about how gross and embarrassing it was. Ashley hadn't realized she'd be so sensitive there, or that she'd enjoy attention there. She'd certainly never considered it a possibility before. \n\nWhen JJ added a finger, swirling gently over the spit soaked star, Ashley looked over her shoulder. She couldn't see anything but JJ's hair and arm. \"What do you think you're doing?\" \n\n\"Nothing that you won't enjoy.\" JJ's voice was a bit muffled. Ashley felt her speaking around her sex and blushed, even as she adjusted her stance to shift her pussy closer to JJ's mouth. \n\nJJ resumed licking and sucking gently at Ashley's pussy, her eyes on her finger, slowly massaging and loosening Ashley's tightest entrance. She kept this up, slowly adding pressure until her finger slipped inside, just the slightest. Ashley grunted, but didn't move away, so JJ carefully introduced more of her finger, fascinated by the way Ashley's asshole stretched around her finger. \n\n\"Ugh, woah.\" Ashley groaned, raising her head up again. She hadn't anticipated the mild burning and couldn't stand it anymore. \n\nJJ stopped moving her finger, but turned her attention to Ashley's clit, the poor thing was swollen and stiff. \n\nAshley gasped, clutching the side of the table. The sudden wave of sensation overpowered the mild discomfort, tugging her body back into JJ's mouth, and finger. Accompanied by the deliciousness of a tongue on her clit, the finger wedged in her ass wasn't at all painful. Ashley laid her head back down and hung onto the table for dear life. This was bound to be a big orgasm, having slowly built ever since JJ had started spanking her. \n\nEncouraged by Ashley's gasping and moaning JJ began slipping and sliding her finger in and out of Ashley's ass, just a fraction. That seemed to be enough to send Ashley off, her legs trembling so hard her feet slipped on the hardwood.\n\nAshley pushed herself upright, her vision still marked by stars and black spots. JJ backed up enough to stand, steadying Ashley when she wobbled. \"No more for me. Your turn now.\" Ashley grabbed JJ's tie and marched down the hall to JJ's bedroom.\n\nJJ had no choice but to follow, a hand on Ashley's hip steadying their progress. She was distracted watching Ashley's ass sway, the rosy flush contrasting in the most alluring way with the creaminess of Ashley's skin, and was taken completely by surprise when Ashley spun them around and pushed JJ down to the bed. \n\nAshley was on her in an instant, tugging at her clothes. \"Naked. You are wearing too much.\" \n\nThey worked together to remove JJ's clothes, tossing them away haphazardly. \n\n\"I'm naked, now what?\" JJ asked, leaning back on her pillow. \n\nClucking her tongue, Ashley slapped at the dildo wagging at her. \"This comes off too.\" \n\nJJ rolled her eyes but unbuckled the straps so Ashley could pull the harness off. \"Better?\" she asked, pillowing her head on her hands, stretched out completely. \n\n\"Yes.\" Ashley ran her hands over JJ's body, kneeling over her to kiss her. Ashley didn't stay for long, her fingers twisting and pulling at JJ's nipples making the older girl squirm. Instead, Ashley moved straight to lay between JJ's legs, face to face with a shaved, soaked pussy. Pushing JJ's thighs wide, Ashley kissed each smooth labia, the gentle force enough to open the floodgates and spill JJ's copious excitement. Ashley chased the dribbles, following them up to lap at the source. \n\nJJ sighed when Ashley began to probe and explore, the soft sound music to Ashley's ears. She wanted to love JJ softly, not try to outfuck her. She didn't think that was possible. Instead she wanted to bask in JJ, spend hours giving her the same levels of pleasure, but slowly. As much as being a slut for JJ turned her on, Ashley didn't want to end tonight like that, and it was getting to be time to end things. \n\nHands on JJ's belly, gently stroking up and down, Ashley did her absolute best to bring JJ up to that edge, slowly and evenly. She avoided the rigid nub of her clit, tongue sweeping and swirling around it, sucking at slick labia and plunging deep inside JJ. She held JJ's thighs tight, their squeezing and trembling beginning to dislodge her. \n\nFingers tunneling into her hair told Ashley that it was time. Opening her eyes, Ashley found JJ watching her, dark eyes squinting with the effort of staying open. Keeping her eyes on JJ's, Ashley moved up that slight, but crucial bit and wrapped her lips around JJ's needy clit, her tongue gently swiping over the exposed tip. \n\nJJ shook hard for a second before her body locked up, muscles tight and unmoving long enough Ashley stopped ficking at her clit, worried. \n\nDark eyes opened again, searching for Ashley. JJ sat up and pulled Ashley along her body until they lay facing one another. \n\n\"That was intense. I didn't think it would end.\" JJ admitted in between breathless kisses. \n\n\"I wanted to keep it going as long as possible. You froze up so long I worried about you passing out or something.\" Ashley giggled, holding JJ's head still. \n\n\"I wouldn't have complained, but I do enjoy breathing.\" JJ smirked, closing her eyes when Ashley dropped a kiss to her nose. \n\n\"I like you best when you're breathing. Now, I don't know about you but I feel like I'm made of jello.\" Ashley wasn't kidding, now that she was laying down her body was quickly relaxing to the point of sleep. \n\n\"I agree, jello limbs all the way. Give me your foot before you crash.\" JJ helped take off Ashley's stilettos, dropping them next to the bed. \"Beddy bye time.\"\n\nAshley snorted, her eyes drifting shut. \"I love you, JJ.\" \n\n\"I love you too, Ashie. Good night.\""
    ],
    "authorname": "DarkFang",
    "tags": [
        "jj and ashley",
        "butch",
        "femme"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/jj-and-ashley-ch-10"
}
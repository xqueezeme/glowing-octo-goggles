{
    "title": "Dwelling in Desire Ch. 13",
    "pages": [
        "I gave Beth plenty of space while she got ready. \n\nNow that things were out in the open\u2014now that I knew she shared my desires, at least some, we were in more dangerous territory than ever. I wanted to tie her to my bed and not let her free until I'd drained myself of the will to fuck her. Which to my knowledge, would never happen. \n\nSoon, I promised myself. Today I had other plans. \n\nI heard her downstairs using the blow dryer she'd conveniently provided, and closed my eyes in anticipation. I crossed my fingers and prayed to God that she'd wear those \"sort-of-pigtails\" again. Maybe I'd even request them when we got a little further into our relationship. \n\nOr maybe you should just march downstairs right now, and tell her. Command her to wear them. You know she would. But that would make you a creepy old man, and you don't want to risk scaring her off, do you? \n\nI sighed in frustration at that. Yes, I wanted to see her in pigtails. Yes, she most likely would if I commanded her to. But what would she think of me? Would my fucked up kink be the loose thread that compromised our long-term relationship? \n\nAnd for that matter, I'd yet to even introduce Beth to pain. Sadism. It was a part of my sexual identity that I didn't imagine would ever fade. Unfortunately, it was the part I was most afraid to share with her. \n\nIf she weren't so fucking sweet, perhaps I wouldn't have reservations. It seemed reprehensible, the things I wanted to do to her. I disgusted myself. But then, what if? What if she liked it? \n\nIt was not out of the realm of possibility. I'd met plenty of women attuned to my sort of kink. None of whom I'd felt that immediate chemistry with though. And none of whom I'd cared whether it lasted longer than a single night of passion. \n\nTina and I had gotten to know one another pretty well. She knew what made me tick, especially in bed. But we weren't soul mates. No matter how much sense it made that we should be. \n\nI wanted Bethany. Even if she was new to...well everything of a sexual nature, I had to have her. I only hoped I wouldn't frighten her enough to fuck this up. \n\nAt least I knew one thing now. She was definitely interested in long term commitment. She had, for the third time, begged me to fill her with my cum. And I'd indulged her. Indulged myself. And as I'd studied her face this afternoon, my cock still plugging her delightfully full of my semen, I knew that she wanted it. Truly, to her core, as I did. \n\nShe. Fucking. Wanted it. \n\nI'd have been a first class idiot to pass up what she was clearly offering. \n\nThe blow dryer silenced, and I quickly finished shaving as I heard Bethany ascend the stairs. I heard her emptying the dryer of her clothes down the hall, and waited for her to enter. When she did, she was fully dressed. \n\nI barely fought off a frown. She must have dressed while in the laundry room. Of course. Why on earth would she dress in front of me? Innocent that she was still, of course she was shy. And in truth, it was a wise decision. I didn't trust myself to see her naked and not do something about it. \n\nStill. She'd hidden herself from me. And that knowledge gnawed at my gut. Eventually I would ensure that she always dressed and undressed in front of me\u2014when I was home at least. It was the control I craved. Knowing that she could deny me nothing. \n\nDeny me nothing. \n\nI drew in a deep breath as I observed her. She'd decided to wear her hair down today. It was lovely, as always. But I longed to see her slender neck, creamy and pure as the rest of her, ready for defilement. And the sick bastard in me wanted those fucking pigtails. Christ, I needed to get that out in the open as soon as humanly possible, before I exploded. \n\nSternly, I pointed to the bench at the foot of the bed. \n\n\"Sit, Bethany.\" \n\nTotal obedience. Immediate. Fuck. \n\n\"Stay.\" \n\nHell, is this a Daddy Dom fetish, or fucking puppy play? \n\nWhatever it was, it came from the core of me. Raw, natural domination. \n\nAnd she took to it like a moth to a flame. \n\nKnowing Beth wouldn't budge, I turned and strode with purpose to my closet. The more chaste of the two. \n\nI reached up to the top shelf and pulled down my large suitcase. I hauled it back through the master bath and set it firmly before Bethany as she blinked in surprise. \n\n\"Going on a trip?\" she laughed nervously. \n\n\"You are going to fill this Bethany,\" I declared gruffly. \"When we go to your house, you will pack enough clothes for at least a week, as well as any materials you need for work. Pack everything you need, little girl, and I do mean everything. Am I understood?\" \n\nHer glazed expression pleased me greatly. \n\n\"Yes Sir,\" she practically whispered. \n\nI knew that whisper. It was the whisper of arousal. \n\nI nodded, and issued a final command. \"Follow.\" \n\nI knew I was pushing the envelope. But if we were to be together permanently, as I wanted, she needed to know the score. What better way to inform her than to demonstrate and practice? \n\nOf course my Bethany didn't miss a beat. She padded after me, staying close behind as we descended the stairs. \n\nI grabbed my keys and phone from the kitchen island and led her to the garage. \n\nAs we passed my fully restored 1969 Cadillac, I smirked at all the possibilities of what I could do to her in that car. \n\nLater. \n\nMy smug expression from the sexual imagery in my head was swiftly replaced with concern as we approached the Jag. Sitting just before the front bumper was my trunk. \n\nMy eyes flew to her face, and I saw it. Recognition. Fear. And her licking her lips. \n\nFuck. \n\nI didn't know whether to be worried about her thoughts and recollections, or encouraged by her obvious arousal. I opted for the latter, despite the knot in my stomach. \n\n\"See anything interesting Bethany?\" \n\nHer eyes flitted up to mine, and she blinked in nervousness. \n\n\"What do you mean?\" she muttered. \n\nAt that, I couldn't help a sinister grin. \n\n\"Come now,\" I crooned, stepping towards her, \"Be a good girl, and tell the truth. Do you recognize that trunk Bethany?\" \n\nMy eyes bored into hers, and I knew she would not lie. \n\n\"It's the trunk from your closet,\" she murmured softly. \n\n\"That's right baby. Do you know what's in it?\" \n\nShe wanted to deny it. I could tell. There was a barely perceptible shake of her head before she swallowed in nervousness. \n\n\"No?\" I chuckled. \"Then perhaps I can refresh your memory. Come,\" I ordered as I approached the trunk and leant down to release the latch. \n\nBeth stood there, pale but transfixed as she watched me lift the lid. \n\nBut her worry quickly morphed into confusion as light penetrated the decades old trunk. \n\n\"Where's all the stuff?\" \n\nI grinned in triumph. She had outed herself. \n\n\"What stuff?\" I teased. \n\nShe blushed, but persisted. \"Your stuff Curt. Your...where'd they go?\" \n\n\"Why are you so interested?\" \n\nBeth frowned and her face went even redder as she stewed in guilty embarrassment. \n\nSighing, I folded. \"Those items are my past. I've disposed of them.\" \n\n\"What? Why?\" \n\nI smiled at her obvious disappointment. \n\n\"Because Bethany, when I play with you, in particular when I use tools for enhancing our pleasure, I want those tools to be untainted. New. Exclusive to us.\" \n\n\"Oh,\" she whispered. \n\n\"Now, perhaps you'd like to share how you know of my toys to begin with.\" \n\nHer shoulders fell. She knew the jig was up. \n\n\"I happened across them when I was exploring the house.\" \n\n\"You opened my trunk,\" I stated. \n\n\"I'm sorry,\" she sniffed. \n\n\"I know.\" \n\n\"Wait a second,\" she frowned. \"How did you know? How could you have known, unless...\" \n\nHer eyes widened. \n\n\"Do you have...cameras inside? Hidden surveillance cameras?\" she asked, paling in dread. \n\nI took a deep breath. Forcing a confession from her on this inevitably meant I would need to come clean as well. \n\n\"Yes.\" \n\n\"Oh my God,\" she whispered, her eyes fluttering, doing the math in her head. \n\n\"Then you,\" she shook her head, refusing to make eye contact with me. \"You saw...\" \n\n\"Yes Bethany, I saw.\" \n\n\"Oh God! What you must think of me!\" she was holding back tears, and I struggled with the stabbing pain in my gut. \n\n\"Beth, I saw, yes. But I want you to know that what I saw has not tarnished my opinion of you. Quite the opposite, in fact. That footage of you laying on my bed nearly caused me to split my pants for Pete's sake.\" \n\n\"Oh God, you saw that too??\" she wailed. \"Shit! I'm so sorry Curt!\" she shook her head and buried her face in her hands. \n\n\"Listen to me,\" I ordered, grasping her arms and pulling her close. \n\nStill she hid her face from me, shaking her head in shame. \n\n\"Look. At. Me. Now.\" \n\nSniffling, her eyes watery with tears, she obeyed. \n\n\"I am not sorry. I'm not fucking sorry at all. If it hadn't happened, I might never have pursued you. We would not be where we are. I would not be holding you, kissing you, making...love to you. So no, I'm not fucking sorry, and I never will be.\" \n\nA tear fell then, down her soft as fucking silk cheek. And I did what came naturally. I pulled her to my chest and held her tight, kissing and stroking her hair, soothing her until her sniffles subsided. \n\n\"I...need you Bethany. I need you. Today is about moving forward, together. No more secrets.\" \n\nHow I could say that when I clung to one of such fucking significance was laughable. It was true, that I needed her. But it was not the entire truth. It just wasn't time yet. The situation was fragile enough without me throwing gasoline on the flames, I reasoned. \n\n\"Okay,\" she whispered into my chest. \n\n\"Good girl. What do you say we go and get your stuff now? Then we can grab an early supper?\" \n\nAnother sniff, another nod into my chest. \n\n\"Okay, let's get you buckled in then.\" \n\nShe looked up at me, inquisitive, but held her tongue as I led her to the passenger side. \n\nI held the door, as always, but this time I tried something different. Once she was seated, I reached in and grasped the seatbelt buckle, pulling and securing it across her body. I ran my hand along the underside, checking the snugness against her breasts. I smirked at her intake of breath, and after a leisurely exploration of her firm round tits, I trailed my hand over her belly and down to her shorts. \n\nAnother gasp, a barely restrained bucking of hips. \n\nMy fingers skimmed gently down her fly, and finally rested at the junction of her thighs. \n\nWedging my fingers between her legs, I softly commanded her, \"Open.\" \n\nShe cautiously obeyed, spreading her legs for me a bit. \n\n\"More.\" \n\nI urged her on with a firm tap to each thigh, and relished her soft gasp. \n\nWhen she'd spread herself to my satisfaction, I growled, \"From now on Bethany, when you ride with me, your legs will be spread. Like this. You will be open for me. Accessible to me. Do you consent?\" \n\nThis was a key moment. I'd planned to hold off on this, but dammit she was just so fucking submissive. I felt to my very soul that she wanted this as much as I. \n\nEven in the dim light of the garage, I could see the raw desire in her eyes. \n\n\"Yes Curt.\" \n\n\"That's my good girl,\" I leant in and kissed her. The kiss carried on far longer than I intended. Having her bound, restrained just beneath me, her legs parted in sweet submission, her soft mews into my mouth...it was too delicious to call to an end. \n\nOnly when my cock pulsed insistently against the inside of my jeans did I finally relent. \n\nBeth's lips were swollen red. \n\n\"Goddamn it Bethany,\" I cursed in frustrated arousal. \n\n\"Aahh,\" she shuddered, panting, her eyes fluttering. \n\nWhat the hell? I hadn't even touched her, and I could swear she'd just... \n\n\"Please Curt...please...\" \n\n\"Please what, little girl?\" \n\n\"Please...don't tease me.\" \n\nI could understand that plea. God knew we'd both been through enough of that. Nodding, I pulled back and closed the passenger door before loading my large suitcase into the modest but sufficient trunk. \n\nOnce I'd buckled myself in, I opened the Nav app and had Beth punch in her address. \n\nWe rode in silence, both our minds swarming with whys and what-ifs. \n\nI frowned as we pulled into a very modest neighborhood, though it was nicer than the one I grew up in. \n\n\"This a safe area?\" I asked guardedly. \n\n\"Are you worried about me?\" Beth teased. \n\nSpotting her street number on a weathered yellow house, I pulled into the drive and parked before turning to her. \n\n\"You are damn fucking right I'm worried about you,\" I growled. \"You will learn quickly that I care for what's mine. I protect what's mine. And to the fullest extent, I own,\" I stroked her thigh suggestively, \"What is mine.\" \n\nI studied her face, fighting off the impulse to do the same as she licked her lips. I searched her eyes for fear, for repulsion, but found only lust and excitement. \n\n\"Yes Sir.\" \n\n\"I'll return for you in an hour Beth. Pack everything you need, for work, sleep, and play. Go.\" \n\nShe nodded before unfastening her seatbelt. I popped the trunk for her. \n\n\"And Bethany,\" I called just before she closed the door, \"Be sure to pack a few skirts.\" \n\nShe smirked and shook her head in girlish annoyance, as I responded with a cocky boyish grin. \n\nWe'd see if she obeyed. If she didn't, I would punish her. And if she did, well, I'd probably punish her anyway. But she'd be in a skirt. I chuckled to myself as I pulled out of her driveway, navigating to the nearest general store. \n\n-- \n\nSweet heavens. \n\nThis was a new Curt Donovan. Well maybe not new, but definitely more. More intense. More overtly sexual. And dominant. \n\nHad he been hiding all this time? I'd seen glimpses, moments where I sensed he wanted...more. But until now I'd had no idea what more was. And now that I knew, my head was spinning. \n\nCurt's behavior was...strange. At least according to social convention. \n\nThe washing me. The buckling me in. The command to keep my legs spread while riding in the car with him. Despite my brain telling me this was wrong, my body was embracing it. Embracing him. \n\nAnd it didn't feel wrong. \n\nI wanted him. I would do anything for him. And as long as he promised to take care of me, where was the harm in that? \n\nI stared into my closet. Nothing seemed to be enough. \n\nNothing in my possession was sexy or glamorous enough for Curt. \n\nSkirts. He'd said to pack some skirts. \n\nWell I had those. But I tended to stay more conservative and demure with skirts and dresses. I had a couple that bordered on slutty. One being that tiny black number I'd worn the night I tried to go clubbing. That was slutty. But did he like slutty? \n\nI thought of that night in the city. I'd been dressed obscenely, miles outside of my comfort zone, my end game being to lose my virginity to the first guy that let his libido take over his brain. \n\nI closed my eyes, trying to recall Curt's reaction. He hadn't looked pleased. Heck, he'd covered me up immediately with his coat. \n\nI'd seen his eyes filled with desire before. Many times. But when? \n\nI thought of our more intimate encounters. The closet, the pizza, the wedding... \n\nEvery time he'd left me breathless, I'd been dressed innocently, more or less. \n\nYes. That was what Curt liked. Innocent. Demure. Good. \n\nI grinned to myself as his huskily whispered \"good girl\" invaded my senses. If he liked good girls, then a good girl I would be. \n\nI sifted through my closet and drawers, zeroing in on light pinks, of which I had plenty, soft blues, lavenders, yellows, and creams. All demure. All innocent. And all of which would wear on his control if my suspicions were correct. \n\nBut what about nighttime? Pajamas? Should I even bother? The way things were going, I didn't think I would even have time to change into PJs before Curt had me at his mercy beneath the sheets. \n\nWell, just in case, I'd pack a few. I'd never purchased lingerie before, so as far as options that Curt might like, the closest I had were a couple of one piece night shirts. One with a large decal of the Powerpuff girls, and a pink one with little white hearts all over it. \n\nBoth I'd had since high school, and they were practically see-through from being washed so many times. Perhaps the ultra thin fabric would compensate for the youthful design, I mused. \n\nJust in case, I packed my old Chicago Bulls shirt and favorite pajama shorts. Curt was bound to run out of steam at some point, right? \n\nUnderwear... \n\nI may not have been a slut, but I definitely had fantasies. Growing up Catholic there'd been minimal opportunity to...express myself, in a way that hinted at any degree of sexuality. Once I was out of my parents' house however, I'd purchased several sets of matching bras and panties. Some more subdued, some toeing the line between flirty and brazen. But nothing particularly scandalous. It'd put a dent in my bank account for a while, but it was worth it to occasionally feel sexy. Womanly. Grown up. \n\nI grabbed all the matching sets I had, along with several cotton panties. I packed enough for two weeks, because ultimately, Curt would probably have me changing my panties at least once a day. \n\nI couldn't wait. \n\nOnce Curt's suitcase was drowning in a sea of pastels, I went to my desk to grab my pertinent files and laptop. \n\nSince I had no major projects at the moment, I didn't need much else. Which, come to think of it, was not good at all. \n\nI'd finished Curt's project. The design fees for that were almost entirely spent, and the commission checks would only last me a couple more months. \n\nI needed to line up some new projects. And I needed to update my portfolio with photos of Curt's house. \n\nThe thought made me frown. Using his house to further my success? Using Curt's house would be using Curt. And I couldn't do that. So what the heck had I been working for all this time? \n\nIt didn't matter, I told myself. Things were different. And I wanted Curt more than I wanted anything else, including a flourishing career. \n\nI would find other leads. I would sign new projects. And I'd be a success. I didn't need Curt's support to do that. \n\nBut what if? \n\nWhat if business dried up? Leads were already sparse at best, what with the economy. \n\nWorry about that another day Beth. You have a sex god coming to pick you up in ten minutes. \n\nI could feel my melancholy expression dissolve, replaced with a giddy smirk. \n\n-- \n\nI found myself looking up at the clear autumn sky, thanking God as I hauled two shopping bags out to the Jag. I was flying by the seat of my pants pretty much, so it seemed like God's work that I'd found everything I needed at the first general store I'd walked into. Perhaps the bastard was finally cutting me a break. \n\nPerhaps he's cutting you more than a break, you dipshit. You have Bethany. \n\nFair enough. \n\nPulling into the driveway of Beth's home, I laughed when I saw her standing on the porch, waiting like a good girl with my suitcase. She'd changed into a cute pink skirt with a gray polka dot blouse. \n\nRolling down the window I called out, \"What are you so dressed up for?\" \n\n\"I'm waiting for my date,\" she smirked petulantly at me. \n\n\"Your date, huh?\" I shifted into park and engaged the emergency brake. \n\nI grinned as she bit her lip to stifle a laugh. \n\nGetting out of the car, I stalked up to her. \n\n\"Well Bethany,\" I purred, \"Your date is shit out of luck. You're mine and no one else's.\" \n\nI snuck my hand around her waist and pulled her tight to me, letting her feel it. I nearly moaned in need when I heard her sweet gasp of realization. ",
        "\"Now, be a good girl and go get some jeans on. Tonight's gonna be casual,\" I cleared my throat as I released her. \n\nHad I not been trying to manage my raging hard-on, I might have laughed out loud from her look of disappointment. \n\n\"But definitely bring the pink skirt,\" I winked. \n\n\"Yes Sir.\" \n\nI couldn't help it. It was done before I could even think about it. \n\nI pulled her to me. I kissed her, hard. And I spanked her. \n\nA swift one. It would smart for sure. \n\nI readied myself for a scream and a stinging cheek of my own. \n\nBut what I got was a gasp, and her arms suddenly clinging to me for support as her knees buckled. \n\n\"Beth, are you alright? I'm sorry, I didn't...\" \n\nIt was hard to backpedal with her literally hanging on me. \n\n\"No,\" she gushed, her head buried in my chest. \n\n\"Beth?\" \n\n\"I'm fine...I'm...fine.\" \n\n\"You sure?\" \n\n\"Yes, just hold me please.\" \n\nI held her. The whole world just went away. I would hold her for as long as she wanted. Hell, as long as she would let me. \n\nI rocked her back and forth, rubbing her back, soothing her as best I could, cursing myself for my lack of restraint. \n\nShe's not fucking ready, you fucking idiot! \n\n\"Baby?\" \n\n\"Hmm?\" \n\nClearing my throat, I attempted to lighten the mood. \n\n\"Baby, I was gonna take you someplace special. Do you still want to go?\" \n\n\"Mmhmm,\" she nodded against my chest. \n\nAll I could see was the top of her head, so I could really only judge from her tone what she was feeling. \n\nAnd she didn't sound mad. At all. \n\n\"Look at me Bethany.\" \n\nShe looked. Or she tried anyway. \n\nHoly fuck. \n\nShe wasn't mad. She was high as a fucking kite. Sub-space. \n\nI'd given her just the tiniest dose of pain, and it had her flying. \n\n\"Bethany, is anyone else home right now?\" \n\n\"No, Mrs. Hathaway is at her book club.\" \n\n\"Good. Give me your key.\" \n\nI steered her firmly to the door, and jiggled the key in the lock until it relented. Maybe I'd get this lockset replaced for her. Hell, maybe I'd replace the whole damn door. \n\nAs we entered the small but tidy kitchen, which was only a couple steps from the front door, I sat her down and went to the cupboard to seek out a glass. After filling it with water, I presented it to her and gave her a firm look. She needed no further motivation. \n\n\"I'm sorry Beth. I shouldn't have spanked you. Not this soon.\" \n\n\"Oh will you shush up Curt? I'm fine. I'm a big girl.\" \n\n\"Are you now? Have you ever been spanked? Flogged? Whipped?\" \n\n\"Only spanked. And only by you.\" \n\n\"Good.\" \n\nSeveral moments passed in silence. \n\nI wondered what she was thinking\u2014if she truly was even more perfect than I'd imagined. All signs pointed to 'yes'. \n\nClearing my throat as she finished her water, I prompted, \"Let's get you into some jeans and sneakers, kay?\" \n\nCute bunny nod. \n\nI followed her to her bedroom, which was tiny and hilariously messy. Clothes were everywhere. \n\n\"I see you were a busy girl getting ready for me.\" \n\n\"Yes. You got a problem with that?\" she sassed. \n\nI turned to her, wielding what was surely a clever retort, but lost all train of thought when I saw her unzipping her skirt. \n\nI swallowed, trying to remember what I was going to say. \n\nShe said nothing, ignoring me as she shimmied out of her pink skirt, flinging it onto the mattress atop who knew how many other pieces of clothing. \n\nSweet Jesus... \n\nHer panties. They were pink. Sheer. Lacy. Fuck. \n\nWith a pre-messed bed not two feet away, I felt my control quickly dissolving. \n\n\"You'd better find those jeans fast, little girl.\" \n\n\"I'll find them when I'm good and ready.\" \n\nI bit my lip in restraint, though I couldn't contain a growl. \n\n\"Don't push me Bethany. Don't.\" \n\nShe may have been new to this, but my tone left no room for doubt. I would make her sorry if she pushed me. And me sorrier. \n\nShe quickly produced and put on some slim fitting jeans, along with socks and a pair of gray Sketchers. \n\n\"Wanna bring a sweater or something? It's getting cooler out.\" \n\nMuch as I enjoyed her lovely creamy flesh, fall was in the air, and with the wind coming from the lake, it would be cold in the city tonight. She nodded and grabbed a hoodie from her closet before silently leading me from her bedroom. \n\nAfter getting Beth settled in the car, I loaded the suitcase into the trunk and off we went. \n\n\"Where are we going?\" \n\n\"I'm taking you to the place where we had our first date,\" I grinned. \n\n\"We never had a first date,\" Bethany reminded me. \n\n\"Well maybe not officially. But I knew I wanted you then, just as much as I do now. I'm counting it as our first date.\" \n\n\"Okay,\" she smiled as I gave her thigh a light squeeze. \n\nDue to the hour on a Saturday, the drive was about forty-five minutes to the city. We didn't converse much, but I kept revisiting her thigh, half regretting the jeans. \n\nEvery little gasp was a new high, a new rush of desire for her. \n\nAs we pulled into a space in front of Vincent's, I softly reminded her, \"Remember you are mine this weekend. Yes?\" \n\nI looked her in the eye. She was obviously intrigued, and aroused. Her barely there nod sealed the deal. \n\n\"Stay,\" I commanded her before getting out and rounding the Jag. \n\nI unbuckled her, taking time to graze her breasts of course, despite our close proximity to several restaurant patrons. \n\n\"Good girl for keeping your legs spread. Come,\" I praised her, helping her out of the low seat. \n\nThankfully the scornful looks were minimal as I nodded to Henry and escorted Beth past the line and inside. I'd called the owner and requested a table by the fountain. \n\nSure enough, a card for Donovan held our table in reserve, along with a bottle of house cab. \n\nI held Beth's chair before seating myself. Victor showed up right on schedule, and I smiled as Bethany ordered her lemonade, and I the same. \n\n\"You can take back the Cabernet Victor. Maybe Vinnie can throw in some tiramisu instead?\" \n\n\"Of course, Mr. Donovan.\" \n\nWhen Victor'd left to get our drinks, Beth shook her head. \n\n\"You must give them a good amount of business Curt to receive such special treatment,\" Bethany raised an eyebrow. \n\n\"I've had them cater a few events. Vincent's operates purely on referrals now. They're booked through January, I hear.\" \n\n\"What events did you have catered?\" \n\nShit. \n\nClearing my throat, and shifting in my seat, I tried to explain in the most generic terms. \n\n\"The club I used to frequent had occasional private events, and I recommended Vincent's to the owner and her activity director. I facilitated a mutually profitable transaction.\" \n\n\"The club,\" Bethany blinked. \"The club we...that I, umm...\" \n\n\"Yes, that club. Consent.\" \n\n\"Consent?\" \n\n\"Yeah,\" I cleared my throat again. \n\nWere we really discussing this now? \n\nVictor came with our lemonades, thank Christ, and I ordered the sausage pizza again, observing Beth's shy smile as I did. \n\n\"So I guess I'll just get it out in the open then,\" I muttered. \"Bethany, Consent is a specialized club, catering to the BDSM community. They are very exclusive and you can only get in through a recommendation.\" \n\n\"Like a sex club?\" Beth looked shocked, but thankfully not mortified. \n\n\"Of sorts,\" I affirmed, nervous as to how this would go. \"It's a place where people can share their mutual kinks, free of judgment.\" \n\nWould Beth freak? Would she ask questions about that night? \n\n\"So you'd go there and...\" Beth trailed off, shaking her head. \n\nShe was doing the math. Fuck. \n\n\"I was there that night Beth, seeing a long time friend of mine. We engaged in sex, yes.\" \n\nBetter to come clean with it than to have her ask. Rip off the band-aid. \n\nBeth blinked and became visibly withdrawn. \n\n\"Obviously this was long before I thought I had a chance with you Beth. Our relationship was purely professional. At least, it was supposed to be,\" I shook my head. \n\nWhen I received no response, I decided to come clean about something else, hopefully which would make her happy, or at least lessen the tension. \n\n\"I thought of you that night Beth. I...fantasized about you.\" \n\nThat did it. Her eyes flew to mine. \n\n\"You fantasized about me while you were with another woman?\" \n\n\"Yes, and she knew,\" I made a face, recalling the awkward conversation that night with Tina. \"She sensed something was wrong and dragged it out of me. I told her about my harbored feelings for you, and she graciously offered me some relief.\" \n\nBeth's jaw was about level with her tits by now. \n\n\"So you can imagine how shocked I was when I found you standing just outside the club. I thought you were meeting someone, another member.\" \n\n\"Oh,\" she whispered. \"So that's why you were so upset.\" \n\n\"Yeah,\" I chuckled. \"I thought you were there to see someone else. And I was jealous.\" \n\n\"Ha!\" Beth laughed. \"Well, I guess I can't really be mad. We weren't seeing each other. If anything I gave you the brush off, more than once.\" \n\n\"Exactly,\" I nodded. \"Beth, had I thought...\" \n\n\"I know,\" Beth interrupted. \"I know. Let's just, move on.\" \n\nI smiled weakly at the maturity of her words. I wouldn't have blamed her for throwing a fit. For hating me. \n\n\"Yes. As I said earlier, today is about moving forward. That club is my past. You are my present and future.\" \n\nBeth's eyes met mine as I said those last few words. I wanted to look away, to hide my total vulnerability. My wishes for us. But she deserved to know. \n\nSatisfied for the moment with my declaration, Beth nodded. Moments later, our pizza appeared, in all its artery clogging glory. \n\n\"Thank you Victor.\" \n\nLittle did he know I was thanking him for more than just the pizza. \n\n-- \n\nOh my God. \n\nCurt was a member at a kinky sex club! I was shocked, and yet not. His incredible sexuality had to be difficult to keep under wraps 24/7. But now, the insecurity I'd harbored, knowing he'd been with several women before me, had increased tenfold. What the heck did I have to offer him that they did not? \n\nAnd what of his friend? Would he continue seeing her, and if so, was it purely casual? Casual sex was a concept I had difficulty grasping. \n\nHow ironic was it that I'd gone in pursuit of that very thing, that very same night? \n\nTruthfully, I'd known that I wouldn't have taken pleasure from it. It would have been hollow sex. Only sensation, no passion. No reward. No love. \n\nAfter being with Curt, I understood that. \n\nI smiled as Curt held up his slice in a toast, and I quickly moved to reciprocate. Goodness, he was so romantic! So perfect. \n\n\"Mmm, that pizza is heavenly,\" I moaned through a mouth full of carbs. \n\n\"That it is.\" \n\nWe ate in silence for a while, both savoring the pizza to the fullest. Although some of the looks coming from Curt made me wonder if he was at all focused on the pizza. The fire in his eyes hinted at those dark secrets I longed to uncover. Perhaps tonight, when we returned to the house... \n\n\"Uhh, that was fantastic,\" Curt moaned, tossing his napkin aside. \"I think we've found our place Bethany, what do you say?\" \n\nOur place. Our place. \n\nMy heart leapt with joy at his words. This was real. He really wanted me. Every look in my direction, every tender gesture, every whisper of a touch\u2014it all signified something more than just a casual relationship. And now, our place. \n\n\"Bethany?\" \n\n\"Tell me where this is going Curt.\" \n\nHis features softened. \"I want you completely Beth. You have to know that by now. I want you to be mine only.\" \n\n\"And you will be mine only as well?\" \n\nBest to dot the I's and cross the T's on this one. If I was going to give myself to him completely, I really needed to know. \n\n\"Yes. I will be yours only. I am yours only.\" \n\nHe said it with conviction, his face now serious. \n\nThis was real. \n\nMy heart was aflutter, and strangely, I could feel my pussy joining the celebration. \n\nYou need to let go Beth. Let go of your pride, let go of your self-doubt, and embrace him for all that he is. Be with him. Love him. And if he loves you, he will need nothing more than that. Have faith. \n\n\"Okay,\" I whispered. It was all I could say without crying. This was happening. \n\n\"Okay,\" Curt smiled before glancing at his phone, his eyes lighting up with concern. \n\n\"What?\" \n\n\"It's getting late. We should get going.\" \n\nI checked my phone, and saw that it was just after six. I wouldn't have pegged Curt for an early bird, but if this was what he called \"late\", then perhaps he was. Or maybe he just wanted me alone. I certainly wasn't going to object to that. \n\n\"No tiramisu?\" I teased. \n\n\"Trust me Beth, I'll give you something way better than tiramisu.\" \n\nEnough said. \n\n\"Come,\" he ordered, forking out several bills on the table and waving goodbye to Victor, who was taking an order at another table. \n\nI moistened between my legs as we approached the car. The ritual of him buckling me in, while strange, and slightly embarrassing in public, got me excited. \n\nHis hands roamed over my body, teasing and thorough at once, before he gently nudged my legs apart. \n\nOh shoot, I forgot! \n\nWanton or not, the position was a symbol of my submission to Curt. I vowed to give it to him, every day, without fail. \n\nI'd assumed we were returning to his house, but ten minutes later, we were pulling into what I vaguely recognized as his office building. \n\nThe official \"Donovan &amp; Martell\" wall plate confirmed it. \n\n\"What are we doing here?\" I asked, genuinely confused. \n\n\"Sorry baby, but I have to grab something from my office real quick. Sit tight, I'll be right back,\" he promised, leaning over and kissing me lightly on the lips. \n\nIt was far too quick and innocent. I wanted his tongue. \n\nBut he was gone before I could say anything. \n\nI sat, alone, in the dark spooky garage. True to his word though, Curt was back within moments. He pulled something from the trunk before getting in. \n\n\"Are you ready baby? I have a special surprise for you,\" he declared with a mischievous grin. \n\n\"I thought the restaurant was the surprise,\" I teased. \n\n\"Nope. Close your eyes,\" he ordered. \n\nWhat could the surprise possibly be? We were at his place of business for God's sake. \n\nBefore I could start tossing guesses around in my mind, I felt something wrapped around my head. A blindfold! \n\n\"Curt?\" \n\n\"Shhh, it's a surprise.\" \n\nI nodded and bit my lip in anticipation. \n\nA warm hand gripped my chin, turning my head towards him. \n\nI felt his warm breath on my mouth, and moaned aloud when I tasted him. This was the kiss I wanted. Full. Open mouth, with tongue. His hot, sexy, tongue. His intoxicating smell ravishing my senses. \n\nI was only too willing, but he held my jaw firmly, forcing me to submit. He would control the kiss. \n\nMy hips squirmed in my seat, my pussy clenching in frustration at the void between my open legs. Perhaps that was exactly what Curt wanted. He wanted me eager, desperate for his cock. His hand. Anything he would give me. \n\nAnd God help me, I wanted to be powerless. At Curt's mercy. \n\n\"Mmmhhaah,\" I gushed as he released my mouth. \n\n\"Yes,\" he growled. \n\nI felt the car roar to life, and go into reverse\u2014then the sudden incline as we exited the underground parking garage. From there, it was an indecipherable route. \n\nWhere was he taking me? \n\nI honestly couldn't imagine. And why the blindfold? \n\nI couldn't tell how much time had past, but finally we slowed to a crawl. It felt very similar to the bumper-to-bumper traffic I encountered on weekdays. \n\nWhere would the traffic be slow like this, on a Saturday? \n\nI heard Curt lower his window and greet someone, but he raised it again quickly, before I could hear much else. \n\nThen we were descending. More underground parking, I assumed. We must still be in the city. \n\nI felt Curt park and turn off the engine. \n\n\"Okay baby, you ready?\" \n\n\"Ready to get this darned blindfold off? Yes!\" I whined. \n\nCurt's soft sexy chuckle did nothing but irk me right now. Perhaps I didn't like surprises as much as I thought. \n\n\"Afraid the blindfold isn't coming off just yet. Stay.\" \n\nMmm, I loved it when he said that word. I could almost forgive him. \n\nHe came round and unbuckled me, assisting me carefully from the car, his hand on my head to make sure I didn't hit it on the roof of the Jag. \n\n\"Careful baby.\" \n\nHe was so loving. So tender and caring. \n\nSuddenly, all my annoyance drifted away and I was filled with nothing but adoration for this man. This glorious stud of a man, confidently steering me blindfolded through a parking garage like it was no big thing. \n\n\"Be sure to pick your feet up all the way so you don't trip,\" Curt warned. \n\n\"Or, you could just take the blindfold off.\" \n\n\"Don't sass me little girl.\" \n\nI licked my lips at those words, shivering from the guttural tone with which he spoke them. It made me want to sass him more. Just to see what would happen. \n\nWhat was wrong with me? I'd always been a good girl. Always heeded warnings and erred on the side of caution. \n\nBut that was Beth. \n\nBethany wanted to experience Curt's wrath. What would he do to punish me? No matter what it was, I knew deep down that I would shamelessly beg for more. \n\nI was alerted to hints at our location when I heard voices. \n\n\"Good evening sir.\" \n\n\"Good evening, thank you.\" \n\nNow that I knew we were among other people, I felt extremely self-conscious. I probably looked ridiculous with this damn thing on my head. \n\n\"Curt...\" \n\n\"Shhh.\" \n\nFuck. That \"shhh\" from him was enough to shut me up for the rest of the night. \n\nAnd suddenly, I froze. \n\nSqueaking. Rattling. Squeaking. Rattling. Pounding. Pounding... \n\nI knew that sound, and my heart nearly exploded. \n\n\"Curt!\" I squeaked, and squeezed his hand excitedly. \n\n\"Are you ready now babygirl?\" \n\nI swallowed the lump in my throat, and muttered, \"Get this damned blindfold off me!\" \n\nA deep chuckle, and suddenly there was light. \n\nI fought past the shock of the brightness. \n\nGiants. Giants, everywhere! \n\n\"Oh my God, Curt!\" I squeaked in sheer joy. \n\n\"Do you like your surprise Bethany?\" \n\nI turned to Curt and practically tackled him with my kiss. I grabbed him by the hair and held him to me, kissing him madly in appreciation. \n\n\"Does that answer your question, Mr. Donovan?\" I grinned seductively when I finally released him. \n\n\"It does,\" he growled. \"Shall we go home now?\" \n\n\"No fucking chance.\" \n\n\"So you do get mouthy. Game's not even started yet,\" Curt laughed. \n\n\"Where do we sit?\" I demanded. \n\n\"Straight to business, I see.\" \n\n\"Curt!\" \n\n\"Okay, okay,\" he laughed. \"Come, this way...\" \n\nOh my God, was all I could think as he walked us straight onto the court. \n\n\"Floor seats?? Holy crap, Curt, floor seats??\" \n\n\"What, you've never had floor seats before?\" he teased. \n\n\"I've never had seats before!\" \n\n\"Well that ends today baby. Enjoy,\" he purred into my ear. \n\nHe handed me a lump of black cloth. \n\n\"Let's see about putting your blindfold to better use now,\" Curt smirked. \n\nConfused, I unfolded it, and nearly cried again when I discovered it was a brand new Chicago Bulls T shirt. \n\nI shook my head. \n\nWhat was wrong with this man? \n\nHow could he be so darned sweet? So thoughtful. So perfect. There was no man this perfect. \n\nI was shaken from my trance by a big orange blob nearly hitting me in the face. \n\nCurt caught it before it hit me, and tossed it back. To none other than freaking Denzel Valentine! \n\nI sat there, totally aghast as Valentine acknowledged Curt, and smiled at me before resuming his warm up shots. \n\nHoly shit. Holy shit. Holy shit! ",
        "I'd definitely be blushing in church tomorrow. \n\n\"I thought you might like to catch the warm up,\" Curt smiled. \n\nI just shook my head, still in shock. I couldn't believe where I was. \n\n\"Do you want to put the shirt on?\" he asked. \n\n\"No,\" I answered flatly. \n\n\"Why not?\" Curt asked, sounding hurt. \n\n\"Because I'll have to take my eyes off the game,\" I explained. \n\n\"It's just warm up,\" he laughed. \n\n\"If it was just warm up, you wouldn't have brought me to watch warm up. Now shut up please Curt, so I can enjoy the game.\" \n\n\"Wow, you weren't fucking joking about mouthy.\" \n\nI just stared. Gawked. \n\nThey were giants. Enormous mutant men. \n\nOn TV all these guys always looked normal. Some of them even short. But they weren't. Even Dunn, who always had the look of a shorter guy, was enormous. \n\nAnd Lopez. Dear God. He made me feel like I was in a fairytale. A dwarf, staring up in amazement at the ogre. Had I not screamed angrily at him so many times through a television set, I might have been afraid. \n\nAnother ball came our way, rolling until it hit my feet. I reached down, and when I went to pass it back, I was greeted by starting point guard Kyrie Irving. \n\nMy bounce pass back to him was thoroughly embarrassing, but he didn't laugh. \n\n\"So we're playing Boston,\" I raised an eyebrow. \n\n\"I know,\" Curt chuckled. \"What are the odds?\" \n\n\"It's on. You know that, right?\" I cast Curt a malevolent grin. \n\n\"Oh that's how it is, huh?\" \n\n\"Yup,\" I nodded. \n\n-- \n\n\"Come on!! Take the contact!! Take the contact! Coach!\" Bethany gestured wildly for the third time before they called time out. \n\nSure enough, Payne took the contact on the next play, drawing the foul. \n\n\"Shit Beth, maybe you should coach,\" I laughed. \n\n\"Yeah, they're gonna hire me. Little blonde dwarf girl from Des Plaines,\" she laughed. \"But a girl can dream.\" \n\n\"Spare a little advice for my home team?\" I teased. \n\n\"They need to send in Baynes,\" Beth stated matter-of-factly. \n\n\"You saw that too huh?\" \n\n\"Mmhmm,\" she affirmed through a mouthful of churro. \n\nI grinned at her for what seemed like the thousandth time tonight. She'd been a mouthy little hellion since we got here, but I loved it. We shared a passion outside of sex. The future looked promising. \n\n\"No, no, no!!\" she cried. \n\n\"Yess!!\" I shouted, clapping as Kyrie shot a three. \n\nBeth shot me a dirty look, and I laughed. \n\nChicago called time, and I leant in close to whisper huskily in her ear, \"Keep it up with those mean looks little girl, and your punishment will be double.\" \n\nMy cock hardened for the first time in hours as I savored the wary look on her face. \n\nAnd her little pink tongue sneaking out to lick her lips. \n\nWe both returned our focus to the game, but it was obvious that she was feeling the same building sexual tension as I. I felt her knee make firmer contact with my leg, and I gently rested my hand on her thigh in assurance. \n\nSoon my love, soon. \n\n-- \n\n\"Oh my God Curt, that was fucking amazing!!\" Beth squealed, skipping through the parking garage, still high on her victory. \n\n\"Glad you liked your surprise babygirl,\" I laughed. \n\n\"More like loved! More like fan-fucking-tastic!\" \n\n\"Jesus, I think I've heard you swear enough tonight to last me a year!\" \n\n\"Don't worry Curt,\" she sighed, \"When I come down from cloud nine, it will be plain old white bread Beth again.\" \n\n\"I like white bread,\" I purred, my hand trailing up her back as I escorted her through the garage to the Jag. \n\nThe moment my hand met the back of her neck, she straightened, and quieted. \n\nYes. \n\n\"Good girl,\" I whispered, unlocking the car and opening the door for her. \n\nQuiet and docile as a lamb, she sat, and waited for me. \n\nI buckled her in, and while she'd already spread her legs like a well-behaved little slut, I took the opportunity to spread them wider, as wide as the limited leg space would allow. Her quick intake of breath had me rock hard inside my jeans, cursing what would surely be a long ride home. \n\n\"Rest your voice for now, sweet Bethany,\" I murmured in her ear. \n\nShe did as I commanded, silent for the entirety of the ride. I think she may have dozed for a bit, which was more than okay. She'd need her energy soon enough. \n\nI pulled in through the gate, and parked in the garage before turning to her. \n\n\"You may get out by yourself this time Beth. Go inside and freshen up, then meet me in the bedroom. I'll get the bags.\" \n\nShe nodded, though she did look a bit disappointed. Perhaps she was coming to enjoy our rituals more than I'd thought. \n\n\"Go,\" I ordered softly. \n\nShe went, quickly disappearing into the house. \n\nI emerged from the Jag with what I hoped wasn't too old of an old man moan, and popped the trunk to fetch our bags. \n\nBag one being the suitcase I'd had her fill. Bags two and three the supplies I'd purchased earlier, sans one Bulls T shirt. Beth had finally agreed to put it on at half time when the players disappeared into the locker room. \n\nA laugh escaped me as I recalled her total transformation during the game. She was so loud. Obnoxious. And vigorous. \n\nIt turned me on in a strange way. Obviously I preferred my women submissive, quiet, subtle and sensuous. \n\nBut seeing her full of life, rapt with boisterous energy and joy\u2014it was thrilling to me. I wanted to give her that joy, over and over again. No matter how loud she got. \n\nTonight though, she would be my sweet Bethany. I would show her what it meant to submit. \n\nAs I came inside I heard Beth humming in the guest suite. \n\n\"Baby, if you want to change, I'm leaving the suitcase right here for you. Take what you need, and we'll put the rest in my closet later,\" I called to her. \n\n\"Okay,\" she called from the guest bath. \n\n\"Okay,\" I said to myself as much as her. \n\nIt was time. \n\nCarrying the shopping bags upstairs and into the master, I gazed upon the perfect bed she'd created. It was as if she'd anticipated this moment. Yearned for it as much as I. \n\nPulling the first two lengths of rope from one of the bags, I got to work. I started at the headposts of the bed, wrapping the ropes a couple times around each base before fashioning the loops that would bind her wrists. \n\nI'd selected the softest ropes possible, but I knew her delicate creamy skin would likely require some tending to later. I'd keep them loose. This time. \n\nSatisfied with my work, I nodded before reaching for the second bag. \n\nBut my heart stopped as I saw something in my peripheral. \n\nMy throat went dry. I felt lightheaded. \n\nThere she was. \n\nIn a little pink nightie. \n\nLittle bunny slippers. \n\nAnd pigtails. \n\nI stood there, frozen in place as I stared at her. \n\nBeth offered me a small smile, but I couldn't reciprocate. After several moments of silence, she came towards me. \n\n\"Stop,\" I practically growled at her. \n\nShe stopped, a hurt look taking over her face, pain ripping through my chest. But I had to stop her. \n\nI drew in a deep breath and gathered what tattered shreds of willpower I had left. \n\n\"You really have a way of taking my plans and turning them upside down.\" \n\n\"Curt,\" she whispered, and tried again to approach me. \n\n\"Don't come any closer Beth, please,\" I warned. \n\n\"Why?\" \n\n\"Because if you do,\" I shook my head in resignation, \"I won't be able to control myself. If you do, we will both regret it. I'd planned to tie you to that bed tonight, but that is not going to happen. I'll hurt you Beth.\" \n\nI didn't miss her biting her lip, and I nearly lunged at her, abandoning all reservations, but I fisted my hands and firmly planted my feet. \n\n\"You'll bind me instead,\" I said firmly. \n\n\"Bind you?\" \n\n\"Yes,\" I nodded, my throat still tight from restraint. \"You will tie my wrists, and I'll instruct you from there.\" \n\nShe opened her mouth to ask another question, but quickly closed it when I removed my shirt. Her eyes widened as I unbuckled my belt, and she bit her lip again. \n\nSweet Christ how I wanted to tackle her to the floor right now and violate her in that little pink nightie. \n\nDropping my jeans and boxers, I turned and eased onto the bed, beckoning her with my finger when I was situated, my hands resting in the loops I'd arranged for her. \n\nBeth approached the bed timidly, her eyes raking over my naked form. I savored her look of fear as she observed my cock, and it twitched, hungry for her cunt. \n\n\"Do you see that end of rope there, by the loop?\" \n\nShe nodded. \n\n\"Pull it to tighten the ropes around my wrists. Do it now.\" \n\nIt was a beginner technique, easy enough to wiggle out of, or loosen if need be. But it was something. Something to keep me from giving in to my demons. \n\n\"That's tight enough, good girl,\" I praised. \n\n\"What now?\" she whispered. \n\n\"Now you're going to pleasure me.\" \n\n\"How do I start?\" \n\nI smiled at her lovely young face, so trusting, so oblivious to the depths of my darkness. \n\n\"You may start by touching me. I'm sure you'll be a natural. Just do what feels right.\" \n\nShe joined me on the bed, unsure, but clearly excited. I could see her firm round breasts through her soft nightie, and I ached to touch her. \n\nSoon, after I had my first release, I would indulge myself. I just needed to take the edge off. \n\n\"Aahhh,\" I moaned as she touched me, starting with the underside of my arms. \n\nShe crawled over me, straddling my ribcage as she focused her attention on my right arm. \n\nShit. \n\nShe was gazing with fascination at one of the coldest reminders of my past. \n\nBeth stroked her delicate fingers over my tattoo, then looked at me. I held my breath, waiting for her questions, but she said nothing. \n\nInstead, she leant down and kissed it, her tongue venturing out and blinding me with its warm wet caress. \n\n\"Aahhfucck,\" I muttered, struggling to gather my wits. \n\nHer tiny hand explored my chest as she kissed her way from my inked inner bicep down to my armpit, and the stretch of bare skin beneath it. \n\nI felt my eyes cross as she fluttered her tongue along my side. Slowly. Worshipfully. I knew she'd be a natural, and by God she was. A submissive beauty to her core. \n\nShe scooted downward, my balls now brushing her chest as she kissed my hip bone. \n\nMy cock jerked toward her, sensing her mouth in close proximity. I couldn't help a slight thrust of my hips as she looked up at me. \n\n\"Good girl baby, keep going.\" \n\nLittle bunny nod. \n\nI nearly shot my load right there when I felt her warm breath caressing my balls. \n\nMy hips jerked again, and I clenched my teeth. \n\nI felt a mixture of rage and lust as I heard her soft giggle of amusement at my expense. \n\nBut she quickly moved on to my left hip and back up my squirming body. I pulled at the restraints, my muscles flexing in protest. \n\n\"You tease, little girl,\" I growled. \n\nAnother cute bunny nod, made all the more ball-tightening by those pigtails as they went bouncy, bounce, bounce. \n\n\"It's a damn good thing I'm tied down.\" \n\n\"Shut up Curt,\" she said flatly. \n\nI growled and pulled harder at the ropes. I could have gotten free, if I wanted. And Christ did I want. But this was admittedly very pleasurable, in its own messed up way. \n\n\"You really, really want that punishment little girl,\" I rasped. \n\nA little shrug was all she afforded me, and I licked my lips, eager to redden her sweet backside. \n\nShe bent over my chest and licked at my nipple experimentally. \n\n\"Aaahh!\" \n\n\"Mmmm,\" she purred before doing the same to my other nipple. I hissed in conflicted desire for more. \n\nBethany took it as a cue, and sucked my left nipple into her mouth, teasing it with her tongue. \n\nI writhed and gripped the ropes, which were steadily loosening. I didn't know what would happen when they finally came free. \n\n\"Ggaaahh!\" I cried as she switched to the other, sucking, nibbling, and teasing as my hips bucked in desperation. \n\n\"Fuck Bethany, fuck!\" \n\nI wanted to tell her to suck my cock. But I couldn't. She would do it of her own free will, I vowed. \n\nShe finally relented, lazily kissing her way down my abdomen, my throbbing member kicking upward and brushing her cheek. \n\n\"Oh Christ, yesss,\" I moaned as I felt her lips touch it. \n\nSoft, innocent, whisper kisses on the tip of the crown sent my eyes rolling back. Sweet fucking Christ. \n\n\"Bethhh...ahh...\" \n\nI struggled to keep my hips in place, not wanting to scare her. She continued the subtle feathery kisses on the head until I was sure I'd go mad. \n\n\"Beth...\" \n\nAt last, I felt her soft lips wrap fully around the head of my cock. \n\n\"Oh God, Beth yes!!\" I cried, my throat hoarse. \n\nHot. Wet. Tongue. \n\nSuction. \n\n\"Fffuck!!\" \n\nWhat was wrong with me? I'd had hundreds of blow jobs, all from women far more experienced and skilled. \n\nBut that was exactly it. It was her innocence. Her innocence was what drove me wild. Hell, her pigtails alone were enough to make me come. Thankfully my staying power was not letting me down tonight. \n\n\"Take me deeper now Beth,\" I growled. \n\nNodding, she took another inch of me, then two, three...four. \n\n\"Nlllaah,\" she gagged on it, and I felt a chill course through me. \n\n\"Good girl, try again now. Relax your throat,\" I urged. \n\nFour inches, five... \n\n\"Ngglaah!\" \n\n\"Sshh, it's okay baby girl, relax your throat. Breathe, and try again.\" \n\nFive inches, six inches, seven... \n\n\"Nggllahh!\" \n\n\"Oh yesss!\" I groaned. \"Keep it up baby, you're doing so good!\" \n\nI felt her suck in air through her nose. She did a few reps on my cock, up, down, up, down, up, down... \n\nAnd then down more. \n\nSeven inches, eight inches, nine... \n\n\"Mmmhhh,\" Beth hummed in satisfaction as she reached the base of my cock. \n\n\"Aahh, that's my good little girl,\" I moaned. \"Daddy's so proud of you. Come up now baby. Breathe.\" \n\n\"Did that feel good?\" she asked when my cock finally popped free of her lips. \n\n\"Look at my cock Bethany, look at it,\" I commanded. \n\nShe looked. \n\n\"That hard cock is for you baby. It wants you. I want you. I'm very close to coming, but I'll give you a choice. You can choose to suck me some more, and swallow when I come, or you can ride me to orgasm\u2014and let me come inside of you.\" \n\nHer look of wantonness said it all, but I waited patiently for her verbal decision. \n\n\"I want you to come inside of me.\" \n\n\"Good,\" I breathed. \"I want that too. Okay, go ahead and get on top of me then. Put my cock in your pussy.\" \n\nShe carefully climbed over me, gingerly handling my pulsing cock, positioning it just so before lowering herself. \n\nI felt her abundant wetness before I felt her pussy lips. She was positively drenched. \n\n\"Aaahhh,\" she moaned as she took the first few inches. \n\n\"Fuck,\" I cursed under my breath. Her pussy was still so tight. \n\n\"Mmhaahh, ahhh,\" she whined softly as she took another two inches. \n\n\"Good girl baby, you're so good,\" I urged. \n\nBethany squeezed her eyes shut in determination and sunk down more. \n\n\"Mmmaahh!\" she squealed, taking me deeper and deeper until I hit her cervix. \n\nI was balls deep inside Bethany, again. It was where I belonged. \n\n\"That's my girl,\" I praised. \"Are you alright?\" \n\nShe nodded, but didn't open her eyes just yet. She was adjusting to the sensations. When she came around, opening her eyes, I knew it was time to push again. \n\n\"Lift your nightie baby, show me your pussy,\" I commanded. \n\nShe obeyed, and I admired her adorable young pussy, totally impaled on my throbbing cock. \n\n\"Ride my cock Bethany. Up and down,\" I instructed. \n\nImmediately she began to move. Her tightness tugged at me, then swallowed me. Tugged, then swallowed. Tugged, then ooohhhh... \n\nI was getting close. \n\n\"Take off your nightie,\" I demanded harshly, causing her to flinch. \n\nI had to see her naked flesh. \n\nShe quickly slipped it over her head and flung it aside to God knew where, before resuming her bouncing upon me. \n\n\"Ride me harder, take me deeper,\" I growled, wishing like hell I could grab her hips and force her down onto me. \n\n\"Aahhh! Curt!!\" she cried as she bounced, her pigtails a blur. \n\n\"Yes baby, Daddy loves it when you cry out for him. Ride that cock now, ride it!\" I hissed. \n\nMy harsh command immediately caused her to clamp down on my cock, and I clenched my fists, pulling harder at the restraints. \n\n\"Aaahh, I'm close baby, so close! Milk Daddy's cock now! Go on, squeeze it with your tight little cunt!\" \n\n\"Daddy!\" she screamed out, clear as a bell. \n\nI nearly nutted right then. The strain of holding back my orgasm was now more intense than ever in my life. \n\n\"Again,\" I growled as I thrust my hips upward. \n\n\"Daddy!\" \n\n\"Again...\" \n\n\"Daddy, Daddy, Daddy!!\" \n\n\"Oh fucking hell I can't hold back much longer! Shhitt!\" \n\n\"Yes Daddy! Come inside me!\" she screamed. \"Please!!\" \n\nBeth gave up on milking me, delirious now with hot sexual need. She dropped down, grinding herself against me, my cock head crushing her cervix as she humped away, determined to satisfy her clit. \n\nShrieks of pain and pleasure escaped her again and again, and it was enough. \n\nI twisted free of the ropes and grabbed her hips, my nails digging cruelly into her pure creamy flesh. God help me, I wanted to hurt her. \n\n\"Aahh, Daddy!\" she hissed in shock. Still, she humped herself against me, not willing to give up the pleasure, in spite of the pain I was giving her. \"Daddy please!\" \n\n\"Yes Bethany, yes! Yesss!!\" \n\nMad with lust and ready for release, I threw my head back before gripping her hips and forcing her down as hard as I could onto my cock. I rooted myself at the gate to her womb just as my balls swelled and then tightened. \n\nAgony. Pleasure. Sin. \n\nA savage roar shook the room as I fired off shot after shot, pumping her fertile young pussy full of my potent sperm. \n\nAaaahhhh!!\" we screamed in unison. \n\nBeth collapsed onto my chest trembling and panting, and I held her tightly to me as we recovered. \n\n\"My sweet Bethany, you're so good,\" I kissed the top of her head lovingly as her pigtails bobbed in agreement. The words I longed to say caught in my throat. Soon, I promised myself. Soon. \n\n------------ \n\nTo be continued..."
    ],
    "authorname": "joodle",
    "tags": [
        "bdsm",
        "daddy dom",
        "ddlg",
        "exhibitionism",
        "sadism",
        "spanking",
        "oral",
        "bondage",
        "virgin"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/dwelling-in-desire-ch-13"
}
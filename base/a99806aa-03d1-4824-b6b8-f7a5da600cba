{
    "title": "The Succubus Heart Squad",
    "pages": [
        "Piotr Kurtzburg didn't expect to receive cards and chocolates on Valentine's Day.\n\nHe certainly didn't expect to receive cards and chocolates hand-delivered by a statuesque bombshell of a model.\n\nHer visit caused quite a stir in the office. A six-foot-tall, jaw-droppingly beautiful woman walking around in nothing more than a longcoat and sexy lingerie was not a sight the average British office worker expected to see on your typical miserable and overcast February morning.\n\n\"Happy Valentine's Day from the Heart Squad,\" she said to Kurtzburg before handing over an oversized card and heart-shaped box of chocolates.\n\nDumbfounded, Kurtzburg just accepted them. He was blown away by her appearance.\n\nOne. She was really tall. Taller than Kurtzburg's five-ten.\n\nTwo. She was still perfectly proportioned despite her height. She had a perfect feminine physique\u2014full hips, fuller chest, and long long legs. She also had big big hair. It was red\u2014flame not ginger\u2014and complexly coiffured in a style Kurtzburg hadn't seen since the kitsch sci-fi films of the sixties. Her smile revealed perfect white teeth.\n\nThree. She was clearly wearing nothing more than underwear beneath her longcoat. It was pink, frilly and sheer enough for her nipples to be visible beneath.\n\nThat alone should have been enough to have her stopped long before reaching Kurtzburg's desk. Except... \n\nFour. She had overwhelming presence. This was the hardest to explain. Not only did she look absolutely drop-dead gorgeous, she also had this aura that flooded out of her and subsumed all around her. She seemed the sort that had the chutzpah\u2014and looks\u2014to blag her way into anywhere.\n\nWhat Kurtzburg couldn't understand was why she was here for him.\n\nWhen he'd finally gathered enough presence of mind to stop gawping at her like an open-mouthed yokel, he said, \"I think there's been some mistake.\"\n\n\"Are you Piotr Kurtzburg?\" she asked.\n\nKurtzburg gave her a slight nod of affirmation.\n\n\"Then there's been no mistake. Happy Valentine's Day.\"\n\nFor one awful moment, Kurtzburg thought she was going to perform a striptease for him right there and then, in front of the entire office. Under other circumstances, Kurtzburg might have been okay with this. He was your typical sex-starved male nerd and her body was extraordinary. But not here. Not with the whole office watching. Not with his cheeks almost burning as brightly as her hair.\n\nInstead she dipped her head forwards and kissed him on each cheek, continental style. On the last kiss her head slid on until her sumptuous lips were level with his ear.\n\n\"See you later,\" she whispered.\n\nThen she turned on the spot and walked away, leaving a very befuddled Kurtzburg standing there with his mouth open and holding a heart-shaped box of chocolates. He was still surrounded by a cloud of her perfume. Faint traces of it stayed with him for the rest of the morning.\n\nKurtzburg didn't get around to opening the card until after he'd cleared all of the morning's urgent tasks. Not that it shed any more light on the mystery.\n\nIt was one of those standard giant-size Valentine's Day cards you could pick up in any high-street shop. Kurtzburg's name was on the cover of the plain red envelope, written in elegant handwriting. Kurtzburg didn't know of any other Piotr Kurtzburgs in the company, so it must be for him. For whatever reason.\n\n\"Happy Valentine's Day from the Heart Squad,\" was written on the inside in the same elegant handwriting.\n\nKurtzburg had no idea who or what the Heart Squad was.\n\nSomeone had drawn cute little cartoon bats all over the inside of the card. Some of them were carrying pink hearts. The ones that weren't had long tails\u2014that looked more like devil tails\u2014looped around in the outline of a heart.\n\nMaybe he had a secret admirer.\n\nKurtzburg nearly laughed out loud at the thought.\n\nHe was no catch. Even by the not-that-high standards of the typical IT male, Kurtzburg was distinctly below average. He knew his nickname around the office was 'moleman'. His co-workers didn't seem to care he knew either.\n\nHe supposed it was different. At school they used to call him Penfold after the character in the Danger Mouse cartoons.\n\nIt didn't bother Kurtzburg all that much. Maybe at some point in the past, but he'd long grown out of letting it upset him. You couldn't help what you were born with, as far as he was concerned. There were a few people in the office he didn't like, but he just tended to avoid them. As for the rest, they were fine. They let him get on with his work and he let them get on with theirs. The only time they interacted with Kurtzburg was when they wanted something done. This was also fine with Kurtzburg. That's how work worked.\n\nNow there was this card.\n\nKurtzburg would have put it down to a prank played by Dave Gregg, except Gregg had left the company two years ago. Foxtrot Tech had been a different place back then and 'Greggsy' was the office prankster\u2014a larger than life character with a big mouth. Kurtzburg hadn't got on all that well with him. Gregg was a massive extrovert. Kurtzburg was a massive introvert. There were clashes.\n\nThat was then. Times moved on. The kind of 'hijinks' Gregg used to get up to, especially with the female staff, were no longer tolerated in the modern workplace.\n\nKurtzburg turned the card over. There were four glossy lipstick impressions of kisses on the bottom left corner. They'd been added later rather than printed on the card. Written over them in the same elegant handwriting were the words:\n\n\"We'll see you tonight.\"\n\nThis was just like one of the 'jokes' Gregg liked to pull.\n\nBut not anymore.\n\nNot since that business.\n\n* * * *\n\nThat business had involved Roberta Ross. Kurtzburg was dragged into her office just before lunch.\n\n\"Care to explain that little incident this morning?\" she asked.\n\nRoss was all cold angles and hidden landmines. She was a short, mousy-haired woman who favoured power suits despite running the traditionally laidback IT department. Kurtzburg respected her professionalism and efficiency, but he couldn't ever bring himself to like her. There was a furious intensity about her, as if she was always a couple of countdown ticks away from an explosion.\n\n\"I don't know,\" he mumbled. \"A mix-up, I think. Someone set up a prank and got the wrong man... person.\" \n\nRoss fixed him with steely grey eyes.\n\n\"I don't know or care what you and your friends get up to outside of work, but if they are your friends you should let them know the next time they pull a stunt like this it will be you that has to bear the consequences.\"\n\nRoss turned back to her monitor.\n\n\"The latest patch is running late. I need that bugfix done before you leave tonight.\"\n\nMeeting over.\n\nRoss had joined the company as a junior programmer three years ago and had risen meteorically to the position of department head. It was her complaint of sexual harassment that had resulted in Dave Gregg's termination.\n\nIt hadn't come as much of a surprise. Greggsy had always been a little too free with his mouth around the female staff. Even freer with his hands. That kind of behaviour was no longer tolerated.\n\nThere had been a similar controversy involving Ross and another senior developer, Jake Packman, about a year later. Unwelcome advances. Hands touching parts of the anatomy hands should not touch.\n\nThat had been a surprise. Unlike Gregg, Packman was a quiet sort that kept to himself and was happily married as far as anyone knew.\n\nYou never could tell, the office gossiped.\n\nPackman had 'resigned'.\n\nKurtzberg switched off the voice-recording app on his smartphone as he left the office.\n\nNo, you never could tell.\n\n* * * *\n\nThere was email awaiting Kurtzburg when he got back to his desk. That in itself wasn't surprising\u2014there was always email waiting for him. However, this particular email was not like the others.\n\n\"Hi Piotr. We're the Heart Squad!\"\n\nIt was followed by a picture of four extremely attractive and provocatively attired women sitting in the back of an expensive limo. They were all smiling at the camera and holding their arms out. Kurtzburg recognised the gorgeous flame-haired courier who'd delivered his card and chocolates this morning.\n\n\"We're so looking forward to making your Valentine's Day an unforgettable one.\"\n\nKurtzburg frowned. He was normally super-careful about which emails he opened. He was sure this had been another work email when he'd clicked on it.\n\nHe lifted his small round spectacles and rubbed his eyes. Must be tiredness. It had been a hard slog over the past couple of weeks to get the latest patch ready.\n\nHe became aware of someone standing next to his desk and hurriedly deleted the email.\n\nHe looked up and saw it was Leah Betts from the QA department. She was looking down at the chocolate box.\n\n\"Aren't you going to open them?\" she asked.\n\n\"I dunno,\" he mumbled.\n\n\"You know it's customary for employees to share their Valentine's chocolates with the rest of the office.\"\n\n\"It is?\"\n\nHe tried to remember if anyone had ever brought chocolates around to his desk. Not that he would have remembered or even registered if they had.\n\nHe glanced back at his screen. Was that email with the picture of the four hot semi-naked women in the back of a limo gone yet? Yes. Thank fuck for that.\n\nNot that he needed to worry. Betts was still staring down at the chocolate box. \"Go on. Open it up,\" she said.\n\nKurtzburg shrugged. He opened it up. It was a box of chocolates. The cover was sickeningly saccharine. Kurtzburg flipped open the cover. Yes, they were chocolates.\n\n\"Ooh, those are fancy,\" Betts said. \"Have you got a posh bird you've been hiding from us?\"\n\nHer hand hovered over the tray like a vulture about to swoop.\n\nKurtzburg was reluctant to take one. Where had they come from? Why him? You heard stories. Food being tampered with.\n\nBetts selected one she liked\u2014a little brown nut from near the centre of the tray. She plucked it out and brought it up to her mouth.\n\n\"Wait!\" Kurtzburg said.\n\nBetts stopped, eyes opened wide in sudden surprise.\n\n\"I don't know where they're from,\" Kurtzburg said.\n\nBetts's frozen expression of surprise thawed out into a contemptuous grin.\n\n\"They're Valentine's Day chocolates, stupid. You're not supposed to know who they're from.\"\n\nShe rolled her eyes and popped the chocolate into her mouth. She chewed. Her eyes widened.\n\n\"Ooh, these are yummy,\" she said. \"It tastes like... ooh.\" A hand involuntarily drifted down to her crotch. Her cheeks reddened.\n\n\"Mandy, you have to try one of these,\" she called back to the adjacent QA section.\n\nShe looked back at the box with naked avarice.\n\n\"You look busy,\" she said. \"You want me to share them around the office for you?\"\n\nKurtzburg mumble-grunted a yes and Betts went away, taking the box of chocolates with her.\n\nThen his attention was caught by something on his monitor. A heart-shaped balloon floated to the top of the screen and popped to reveal the word, \"Tonight.\" A lipstick kiss flashed on the bottom right of the screen and was followed by, \"The Heart Squad.\"\n\nKurtzburg's stomach lurched. Had that email downloaded a virus onto his machine?\n\nHe went through a series of diagnostics and found nothing untoward. He rubbed his eyes again. He couldn't have imagined it, could he?\n\nAnd what did they mean by \"tonight\"?\n\n* * * *\n\nThe first text message arrived at two o'clock.\n\n\"Are you excited for tonight? We are. xoxo, the Heart Squad.\"\n\nNumber withheld.\n\nKurtzburg was less rattled about this one. If they could find him at work, they could find his phone number.\n\nA picture followed. It was a close-up of the flame-haired model kissing the camera with the other three girls in the background behind her.\n\nAll four women were exceedingly attractive. They looked just like the women you saw on TV gliding around the swanky parties. Starlets. Celebs. 'It' girls. Ironic that his own profession, which also shared the same two letters, was often at the opposite end of the spectrum when it came to glamour and social skills.\n\nThen it clicked.\n\nIf they looked good enough to be TV people, they might just be TV people. Which made this a... Valentine's Day prank? Yes, that sounded plausible. Probably one of the cheap'n'nasty reality TV shows. Kurtzburg had no idea which. He didn't watch much TV nowadays, preferring instead to spend his leisure time playing videogames or solving coding problems. He also had no idea why they'd singled him out.\n\nOkay, he did. It was because he was fugly and surrounding a mumbling fugly with four bombshell beauties would make for appropriately cringe-inducing TV.\n\nHe had no idea why they'd singled him out.\n\nOh well, that mystery would have to wait for later. He had to fix this bug before the end of the day.\n\nBetts came back with an empty box of chocolates and a guilty expression. For all of Betts's talk of sharing them with the whole office, Kurtzburg doubted the box had even left the QA section. He didn't mind. Given their suspect origin, he hadn't been planning on eating any of them.\n\n* * * *\n\nKurtzburg got another text at three.\n\n\"We're going to have so much fun together.\"\n\nYou're going to be so disappointed, Kurtzburg thought, deleting the text.\n\nAnother at four.\n\n\"We'll be waiting for you outside after work.\"\n\nYou'll be waiting a long time then, Kurtzburg thought. Judging by how this bugfix was progressing, Kurtzburg didn't think he'd be finishing until at least eight. He wasn't too thrilled about it. He'd been looking forward to getting a few hours in on the new space 4X game, Master of the Crimson Nebula.\n\nLater: \"It's almost time. We can hardly contain ourselves. Can you?\"\n\nThe innuendo was obvious. Kurtzburg felt it in his loins anyway. Despite not being the most active in that department, he still retained some sexual desire. He really wished he lived in a world where four hot girls would whisk him off the street and take him out on a wild night of partying and debauchery.\n\nThis was not that world.\n\nKurtzburg was also not a chump.\n\nHe was also too busy anyway.\n\nHe looked at the screen. Goddammit. Comment your goddamn code, people.\n\nThe messages stopped after five-thirty. The office had already emptied out. Kurtzburg was the only one left still tapping away at his keyboard.\n\nHe felt a little sorry for whoever was behind these Valentine's Day fun and games. They must have realised something had gone wrong by now. That Kurtzburg wasn't coming out or had already given them the slip.\n\nSorry, hah. What was he thinking? It was probably just a prank to humiliate him.\n\nHe got up and trundled to the drinks machine to pick up a can of Red Bull. Caffeine makes code. He looked at the screen and focused on the problem at hand. It was trickier than he'd first thought, but he felt he understood it now. He reckoned he'd be able to fix it before leaving tonight.\n\nHe checked in the solution at 8:31. Half an hour later than he'd estimated, but not too bad. He got up and stretched. Most of the office was dark. Kurtzburg packed his things together, walked to the exit and switched off the lights. His stomach rumbled. Maybe he should have eaten some of those chocolates after all. Oh well, he could always pick up a kebab on the way home.\n\nHe walked down the stairs and out the front entrance. The night was a little nippy. He adjusted his coat and turned right. His bus stop was at the end of the street.\n\nA shape flowed out of the darkness and stepped in front of him. It was the tall and busty flame-haired woman. She was still wearing nothing more than a longcoat over frilly pink lingerie.\n\nHad she been waiting out here all this time? She must be freezing her nips off, Kurtzburg thought.\n\nIf she was, she gave no outward sign. She greeted Kurtzburg with a breezy smile.\n\n\"Mr Kurtzburg, we never realised you had to work so late.\"\n\nShe glanced up at Kurtzburg's floor, where everything was in darkness.\n\n\"It must have been so lonely, working up there on your own. You should have let us know. We would have come up and kept you company.\"\n\nA stretch limo\u2014sleek and gleaming white\u2014pulled up alongside them. The back door opened and two excitable women leaned out.\n\n\"Hello, Mr Kurtzburg,\" they said in unison.\n\nBoth looked younger than the flame-haired woman and were just as attractive. He recognised them from the pictures that had been sent him. In person they exuded a strong aura of wanton sexuality. They looked like the type of girls that did anything and everything.\n\n\"I think there's been some mistake,\" Kurtzburg said. \"You have me mixed up with someone else.\"\n\n\"You are Mr Piotr Kurtzburg, of...\" The flame-haired woman reeled off Kurtzburg's home address and even his date of birth for good measure. \"I don't think there's been any mistake.\"\n\nNo, that had been rather... specific.\n\n\"Why me?\" he asked.\n\n\"Because someone thinks you deserve it,\" the flame-haired woman said.\n\nThat didn't help Kurtzburg at all.\n\n\"Did you like the chocolates?\" she asked.\n\n\"Um, I didn't... um... eat them. The QA women shared them.\"\n\nThe woman looked disappointed.\n\n\"Oh well, can't be helped,\" she said. She smiled. \"Their husbands and boyfriends will be in for a good night tonight. What about you, Mr Kurtzburg? Are you ready to embark on a night of unadulterated hedonism?\"\n\nShe held out an arm, pointing him in the direction of the back of the limo while simultaneously blocking his path. Three gorgeous girls beckoned him to join them in the back of the car. And they were extremely gorgeous indeed.\n\nKurtburg was tempted.\n\nHe was also not a mug.\n\nThis was waaay too good to be true.\n\n\"I don't think I can get in that car with you,\" Kurtzburg said.\n\n\"Aww,\" the flame-haired woman said. \"Don't be so uptight. Come with us. You'll have a lovely night.\"\n\nShe moved forwards. Kurtzburg instinctively moved back.\n\n\"Sorry. I think this is a big misunderstanding. You have the wrong guy.\"\n\nThe woman placed a hand on her hip. She pouted in irritation.\n\n\"My, you are an awkward one.\"\n\nHer sensual lips turned up in a smile. Her eyes twinkled. For a brief\u2014split-second\u2014moment, Kurtzburg could have sworn he saw a pink flash. Then...\n\n...Kurtzburg was sitting on the back seat of a luxurious limo with a glass of champagne in his hand. He was surrounded by four gorgeously uninhibited young women.\n\nThe tall, flame-haired woman had introduced herself as Angela. Kurtzburg had already seen plenty of her goddess-like body, given that neither her longcoat or pink lingerie did a good job of hiding it. She was sitting on his left with an arm around him.\n\nSitting on the other side of him was a girl dressed in a black leather corset and black fishnet tights. She had one of the largest busts Kurtzburg had ever seen. Her corset struggled to contain her boobs and Kurtzburg kept catching himself sneaking glances down into the deep soft chasm of her cleavage. Her face had a slightly exotic cast, accentuated by heavy black eyeliner extended in gothic wings. Her hair was medium length and raven black. She reminded Kurtzburg of sultry vamps from old horror films. She'd given her name as Mystrella.\n\nSitting across from Mystrella was almost her polar opposite, Lapine. Lapine was tall, blonde, tanned and leggy. She wore a pink bikini and frayed denim shorts. She looked like a slutty beach bunny.\n\nThe last was Eulalia. She was dressed in elegant lingerie and pearls, and looked like she'd just left a swanky soiree at a posh country mansion. Her hair was honey-coloured and fluffed up in luxurious waves. Her most striking feature was her lips. Bee-stung, plump, sensual, and glossy-red\u2014they might just be the most kissable lips Kurtzburg had ever seen in his life.\n\nTogether, they called themselves 'The Heart Squad'.\n\n\"And what exactly is 'The Heart Squad'?\" Kurtzburg asked.",
        "\"We're a crack team of luscious lovelies with a single mission\u2014find single and underappreciated good men and give them the night of their lives,\" Angela answered.\n\n\"And women,\" Mystrella whispered in his ear.\n\n\"How do you find these 'single and underappreciated good men'?\" Kurtzburg asked. \"I mean, who decides.\"\n\n\"You caught the eye of someone who felt you were deserving.\"\n\n\"Who?\" Kurtzburg asked.\n\nHe couldn't think of anything he'd done that deserved this. At work he was largely anonymous. At home he either played strategy computer games or worked on solving abstract programming problems. Both were fairly anonymous things. How anyone would notice him at all was the biggest mystery.\n\nAngela tapped her nose and said nothing.\n\nKurtzburg sipped on the champagne. It was a little sweeter than he expected. Fruitier. And bubbly.\n\n\"Someone must be paying for this,\" he said. \"Who?\"\n\n\"The Heart Squad does not do this for money,\" Angela said.\n\n\"Then what do you do this for?\"\n\nLapine shared a sly glance with Angela. \"Shall we show him?\"\n\nAngela shook her head. \"Not yet. Wait until we get back to the flat.\"\n\n\"Flat?\" Kurtzburg queried.\n\n\"We can't exactly drive around all night, can we,\" Angela said.\n\nThe way she said it sounded sensible. Of course they couldn't drive around all night.\n\nKurtzburg shook his head. Just how had he got into the limo? And what was he doing with this drink?\n\n\"So, we're going back to your flat,\" Kurtzburg clarified.\n\n\"Yes, our little love nest,\" Angela said. Both her voice and gaze were suggestive.\n\n\"More like our shag pit,\" Eulalia added with a lusty guffaw.\n\n\"And what will be happening in your flat?\" Kurtzburg asked.\n\nAngela smiled enigmatically. \"We couldn't possibly spoil the surprise.\"\n\nKurtzburg's heart kicked up in his chest in excitement. His head still felt fuzzy... and wrong. This was wrong. It couldn't be happening. He must have tripped on the stairs and banged his head going into the office this morning. This had to be a dream.\n\nThe journey didn't take long, maybe ten or fifteen minutes of suggestive conversation, a hand placed between Kurtzburg's legs in a way that was not accidental. The driver, who Kurtzburg still hadn't seen, pulled up to the curb in a nondescript thoroughfare and they all got out.\n\nHe didn't recognise where they were. It could have been anywhere on the outskirts of the centre. He saw a line of local shops, all closed. He doubted they did much business when they were open. Some even looked as though they hadn't opened their doors in a long long time. The Heart Squad's flat was above a bed shop and accessed by a rickety metal staircase located in the dark side alley next to it.\n\nThe cool night air had a sobering effect on Kurtzburg. It cleared some of the fog in his thoughts. Just what was he doing here? Gorgeous women did not pick up shlubby IT guys like Kurtzburg and take them back to their flat to (fuck their brains out) party.\n\nThe alley looked dark. The whole street didn't exactly look salubrious.\n\nKurtzburg knew this story. He'd seen it enough times in film and on the news. He'd always thought the people that got themselves into those stories were clueless idiots, and now here he was, being a clueless idiot.\n\n\"Thanks for the lovely evening,\" he told the girls. \"But I really must be getting back. I don't suppose your driver can give me a lift home?\"\n\nAngela put a hand on her hip and sighed. \"Such a troublesome one.\"\n\nHer eyes flashed pink again...\n\n...and Kurtzburg was up the stairs and walking into the flat.\n\nOne drink wouldn't hurt.\n\nThe interior was very unusual, that was for sure. The whole flat looked like a converted warehouse loft. There were a couple of rooms partitioned off, but everything else was open plan. The walls were covered in crushed black velvet. Decorating them were paintings that dangerously straddled the line between arty erotica and outright pornography. The lighting was dim, intimate and all at floor level. Lava lamps, Kurtzburg realised. He hadn't realised they were still being manufactured. The furniture also resembled kitsch art sculptures from the '60s. The sofa was a giant pair of bright red lips. The bed\u2014was that really a bed, it was massive!\u2014looked like a giant red heart. It was large enough to take up maybe the far third of the flat. The walls and ceiling surrounding it were covered in mirrors, a reminder that sleep was only its secondary purpose. A purpose that was likely extended to the whole flat. It was gloriously kitsch and unashamedly frank about its sensuality.\n\nIt was also somewhere Kurtzburg had a nagging feeling he should not be.\n\nThis wasn't a place for living or sleeping. It was somewhere scary crime bosses took their squeezes back to for drug-fuelled sex orgies. How Kurtzburg had gotten mixed up in this, he had no idea. He just knew he didn't belong here.\n\nHe turned on the spot and collided face-first with Angela's ample bosom. Red-faced, Kurtzburg mumbled apologies as he tried to get around her and out the door. Angela strategically blocked him at every turn without even seeming to try.\n\n\"Stop being so jumpy,\" she said. \"Come in. Relax. Enjoy your Valentine's night with us.\"\n\nGoing against her was like trying to push against a snowplough. She bulldozed him over to the sofa and left him little option but to sit down.\n\nAnd promptly sink into the sofa. It was soft, spongy, but also surprisingly comfortable. It got even more comfy when Mystrella and Eulalia squeezed up on either side of him, close enough for Kurtzburg to feel their heat and curves.\n\n\"Lapine, can you fetch Mr Kurtzburg a drink please,\" Angela asked.\n\nLapine bowed in a slutty version of a curtsey before sliding behind the kitchen bar. She returned with another glass of bubbly. When she handed it to Kurtzburg she kept her long long legs straight and bent at the waist. This gave Kurtzburg an uninterrupted view right into her cleavage. He saw. She saw he saw. She gave him a wink before swaying away with an enticing jiggle of her ass.\n\nKurtzburg gulped.\n\nHe took a sip of the wine. Again, the drink unexpectedly sweet. It slid down his throat easy. Like pop. Posh pop.\n\nWas it him or had Mystrella and Eulalia pressed up even closer? Both were leaning on him now. Leaning into him.\n\n\"What now?\" Dare he ask.\n\nAll four women stared directly at him. Their eyes were hungry.\n\nKurtzburg gulped again.\n\n\"What would you like?\" Angela asked, her face a cryptic mask. \"We're the Heart Squad. We're here to make your Valentine's Day a memorable one. So, what would you like\u2014love, sensuality, passion?\"\n\n\"Filth?\" Eulalia whispered in Kurtzburg's ear.\n\nKurtzburg's Adam's apple bobbed. Kept bobbing. It felt like a yo-yo going up and down in his throat. He had a feeling that if he asked for it, the woman would start a full-fledged sex orgy with him in the starring role. That would be like something out of his deepest, erotic dreams.\n\nAnd that was the problem.\n\nSomething like that could only happen\u2014to Kurtzburg\u2014in a dream.\n\nHe tried to rationalise it. His thought processes ground together like rusted cogs with the effort.\n\nOkay, let's say they were escorts\u2014gorgeous, high-class, top-of-the-range escorts. That would explain why they were up for a wild orgy with a random podgy IT guy they'd picked up off the street.\n\nBut who was paying for it?\n\nAssuming they were high-class, top-of-the-range escorts, their hourly\u2014nightly!\u2014rates must be exorbitant. Then multiply that by four...\n\nKurtzburg didn't know anyone with the spare cash to splash out on a night of this level of hedonism for themselves, let alone him. They might have his name and details, but a mistake must have been made somewhere. And when it was discovered, the person paying for it all was likely going to be pissed.\n\nMystrella and Eulalia pressed up closer. Each had an arm around Kurtzburg. He sank deeper into the sofa\u2014which was extremely comfortable, to be fair. He took another nervous gulp of the fruity wine. His head was starting to feel as effervescent as the liquid in the glass. He made small talk with the women. Or rather, they made small talk and he mumbled along with them.\n\nEulalia whispered something in his ear. Kurtzburg didn't manage to catch it, but it must have been sufficiently lewd as he felt a throb of arousal.\n\nThat was another thing that concerned Kurtzburg. Let's say they were escorts and someone\u2014mistakenly or otherwise\u2014had hired them to give Kurtzburg a wild night of sex. Could he? It had been a while. He was no longer young. What if his worries affected his... other parts?\n\nEulalia whispered some more in his ear. Kurtzburg didn't catch those words either, or even if they were words. Whatever they were, they stroked something in his brain, something that liked being stroked. Kurtzburg felt an erection rise in his pants. It was like Eulalia's whispers were flowing right down to Kurtzburg's cock and filling it up like water from a tap. Filling it up until it was straining against his underwear. Straining enough to be almost uncomfortable.\n\nA hand brushed against Kurtzburg's tented crotch. Clearly not an accident. He jolted.\n\n\"Eulalia, are you using that filthy mouth of yours again?\" Mystrella asked.\n\n\"I'd like to use this filthy mouth on his cock and give him a good suck,\" Eulalia said.\n\nShe reached into Kurtzburg's lap. A whole host of emotions collided in his head like a pile-up on a motorway. He sprang up out of the soft clutch of the lips sofa.\n\n\"I can't do this,\" he mumbled.\n\nHe turned to the door...\n\n...and the room kept turning.\n\nHe felt giddy. Light-headed. He would have fallen had Mystrella and Eulalia not got up with him and supported him on either side.\n\nAngela's mouth showed concern, but her eyes were smiling. \"Are you okay, Mr Kurtzburg? That wine is quite strong. It looks like it's gone right to your head. Why don't you have a little lie down?\"\n\nMystrella and Eulalia steered him over to the giant heart-shaped cushion. Or bed. Whatever it was, it was luxuriously soft. Kurtzburg sank right into it. He lay sprawled there and looked up at his reflection in the mirror on the ceiling. Three blurry versions of his face stared blearily back at him.\n\nHow'd he let himself get here?\n\nThe giant cushion heart was a little too soft and deep to be a proper mattress. Kurtzburg sank right into it. It was comfortable, but he suspected he'd have a bugger of a game getting out of it.\n\nAnd get out of it, he should. He shouldn't have come back with them to their flat and he definitely shouldn't have drunk anything they'd offered him.\n\nThe bed was more difficult to get out of than he thought. Or he was more drunk\u2014drugged?\u2014than he thought. What was it made out of? Maybe it was filled with water or some other, denser, liquid. It moved with Kurtzburg and kept collapsing beneath him, denying him any kind of purchase to get back to his feet.\n\nIt couldn't be the wine, could it?\n\nThe four women stood at the foot of the heart-shaped bed and watched Kurtzburg's inept struggles with open amusement.\n\n\"I... uh... need a hand here,\" Kurtzburg said, even though he knew he wasn't going to get one.\n\n\"Now can we?\" Lapine asked.\n\n\"Yes,\" Angela answered. \"I don't think he's going anywhere.\"\n\n\"Thank fuck for that,\" Eulalia said.\n\nThe forms of the four women blurred and shifted before Kurtzburg's eyes. They became monstrous\u2014demonic\u2014yet strangely without losing any of their considerable attractiveness and sex appeal.\n\nLapine was still a lithe, long-legged beach bunny, except her tan had taken on a reddish tint. She had red devil horns, red devil bat wings and a slender red devil tail. She was completely naked. Kurtzburg would have been excited to see her pussy, except what she had between her legs was a mouth with plump, sensual lips.\n\nWith her black horns, wings and tail, Mystrella resembled even more a sultry horror-movie vamp. Her leather corset had changed. Before, it covered her breasts. Now it framed them and showed them off like an expensive painting. Her tits were good enough to be framed like an expensive painting. Or would have if it hadn't been for her nipples. Or rather, the lack of them. In their place were sumptuous lips bunched up as if pouting for a kiss.\n\nEulalia had grown a pair of ram's horns. They emerged from her honey-coloured hair and curled down behind her\u2014now pointed\u2014ears. The lines of her face had subtly altered, making her beauty look unearthly and supernatural. It was most pronounced in her lips. They had swollen and become so irresistibly ripe they exerted a strong magnetic pull on Kurtzburg's gaze.\n\nLastly there was Angela. She seemed to have grown even taller and her presence even more overwhelming. Her skin was bright red in colour, like a devil. And also\u2014like a devil\u2014she had horns, bat wings and a long, whip-like tail terminating in an arrow-pointed tip. Her horns were long and black and stood straight up. She had cloven hooves instead of feet. Despite all this, she was none the less attractive for it. Naked, her body was complete knockout.\n\n\"Well Mr Kurtzburg,\" Angela said. \"You did ask what we get from this, and now you know. We're succubi. We feed off sex.\"\n\n\"And tonight we're going to feast,\" Eulalia added.\n\nFu-u-u-uck, Kurtzburg thought. He was nerdy enough to know what a succubus was. They were a staple of fantasy RPG games. They fucked men to death... sucked out their life and soul. They were also fictional monsters that shouldn't exist at all, but Kurtzburg wasn't about to take any chances, especially as pretty strong evidence of their existence was standing right before his eyes.\n\nHe kicked out and bucked and thrashed and tried\u2014unsuccessfully\u2014to get off the bed.\n\nWhy couldn't he get off this damn bed?\n\nSomething was wrong with it. The cushion was sometimes spongy, sometimes like a bladder filled with water or some other, more viscous, liquid. It was whatever it needed to be to stop him going anywhere.\n\n\"That bed is rather special,\" Angela said. \"You're not going to get out of it. And after you've tired yourself out trying, you'll find it's extremely comfortable to lie and relax on.\"\n\nKurtzburg yelled for help as loud as he could.\n\nThere was an awkward silence after his cries finished reverberating off the walls. Mystrella sighed. Lapine rolled her eyes.\n\n\"That's not going to achieve anything,\" Angela said. \"Nobody lives around here and the walls are soundproofed.\"\n\n\"We wouldn't want to get disturbed when the action gets good and hot,\" Eulalia said with a salacious smile.\n\n\"And normally we don't have to worry about it,\" Angela said. \"Normally the only cries we hear are cries of ecstasy from men balls deep in our luscious twats. But not you, Mr Kurtzburg. You're proving to be a most troublesome client. It's been, what, three years since you last got laid. I'd have thought you'd be overjoyed at the prospect of spurting your seed in our tight wet pussies.\"\n\nKurtzburg's cock tented his trousers at the mention of spurting seed in tight wet pussies. That was something he hadn't been able to do for a long long time.\n\n\"Ah, there it is,\" Angela said.\n\nShe settled on the bed next to Kurtzburg. Unlike him, her body barely dimpled the surface. She seemed immune to the unnatural grasp of the heart-shaped cushion.\n\n\"You should listen to your body. It knows what's good for you.\"\n\n\"I don't want to die,\" Kurtzburg said to the demon lying next to him.\n\nAngela laughed. \"Who said anything about dying? So melodramatic. All we want to do is give you a good fuck.\"\n\n\"We're succubi. We exist to fuck.\" Mystrella had positioned herself behind him, with her heavy breasts swaying over his head.\n\n\"And we're going to give you such a night of fucking you'll think you've died and gone to heaven long before the sun comes up.\" Eulalia lay down on the other side of him.\n\nKurtzburg closed his eyes. This couldn't be happening. It must be a hallucination. The drink was drugged.\n\nCouldn't be happening. Couldn't be happening.\n\n\"Oh, stop fretting, Mr Kurtzburg,\" Angela said. \"Enjoy our bodies.\"\n\nShe grabbed his hand and pressed it into her large boob. Her flesh might be red and demonic, but her breast felt soft and smooth beneath his fingers.\n\n\"We can do so many pleasurable things to you.\"\n\nEulalia took his other hand, inserted an index finger between her plump lips and sucked.\n\nOh wow, her lips felt incredible. So soft. The surface so silky-smooth. Her suck was like a long leisurely kiss. Kurtzburg imagined what those lips would feel like on his cock and his erection surged to full hardness. His pants suddenly felt uncomfortable and restricting.\n\n\"Girls, can't you see Mr Kurtzburg is in some discomfort here,\" Angela said.\n\nTheir hands all dived in to grab his clothes. Kurtzburg squirmed and tried to fight them off. Angela tsked. Her eyes flashed pink and...\n\n...Kurtzburg was naked and lying on the bed. His shirt and trousers were hanging over the back of a nearby chair. He had no recollection of how they'd got there. Even his spectacles were gone. And the succubi were all over him, moaning and sighing in pleasure. Angela had one of his hands clamped between her tits. Eulalia was sucking on the fingers of his other hand. Mystrella was doing the same to his toes. And Lapine...\n\nShe was standing astride him in full naked glory.\n\n\"Our Lapine is very young and energetic, Mr Kurtzburg,\" Angela said. \"You don't need to do a thing. Just lie back and let her\u2014\"\n\n\"Fuck your brains out,\" Lapine finished for her.\n\nHer hand reached down between his legs and stroked up and down his erection. Energy seemed to crackle from her fingers and into him. He sucked in a breath, his erection swelled further and his body throbbed in anticipation.\n\nLapine straddled him and whipped her long silky blonde hair behind her shoulders. Kurtzburg felt a surge of excitement. He was about to have sex... with a girl as good-looking as this?\n\nThen he remembered her vagina looked more like a mouth.\n\nIt was too late. Lapine steered his erection to the plump, sensual lips between her legs and swallowed him up. Or rather, sucked him up. It felt like soft, supple lips drawing his cock into a mouth, but inside there was far less room, just warm fleshy walls pressed tightly up around him. She gave a satisfied moan as she sank down on top of him.\n\nKurtzburg let out a sharp exhalation. Wow, her vagina felt so good. It had been a while since he'd felt this.\n\nLapine shifted position in his lap. Her silken inner walls undulated around him.\n\nScratch that. He'd never felt anything as good as this.\n\nIt had been so long since Kurtzburg had had sex, he was a little uncertain about what was expected of him. He reached down to place his hands on Lapine's hips, only for the succubus to take his hands and press them down into the red heart cushion.\n\n\"Better to let her get on with it,\" Eulalia advised. \"You'll only hurt yourself trying to keep up.\"\n\nLapine swung her long blonde hair about as she smoothly bounced up and down on Kurtzburg's cock. She rode him with liquid grace. His cock slid back and forth inside her tight pussy.\n\n\"This is how the humans do it, isn't it?\" she asked.\n\n\"Yes, but not quite so vigorously,\" Eulalia said.\n\n\"Oh,\" Lapine said. \"But I was just warming up. I was going to go faster. Like this.\"\n\nShe sped up.\n\nA lot.\n\nKurtzburg sank deeper into the heart-shaped bed as Lapine's hips rose and crashed into him. Again and again. Faster and faster. Her pussy was tight, but soaked with lubricating fluids. Kurtzburg felt her luscious walls stroke up and down his shaft as her hips moved up and down. Too fast. He didn't think he'd be able to hold on.\n\nLapine paused.\n\n\"The human way is fun, but it seems so inefficient,\" Lapine said. \"So many wasteful up and down movements.\"\n\nKurtzburg lay flat out beneath her. He felt like he'd just been hit by an erotic truck.",
        "Lapine whipped her long blonde hair behind her. \"Now let's do it the succubus way.\"\n\nShe flopped down on Kurtzburg and wrapped herself around him. He was enveloped by her heady scent. She rained wet kisses down on his face and neck before finding his lips for a passionate, deep kiss.\n\nShe hardly moved her hips. The motions were all internal. Her vagina, if it could be called such, swelled up around his hard erection in a snug, padded fit. Little internal nipples teased Kurtzburg's shaft as the walls undulated slowly against him.\n\n\"Technically, the succubus way is feeding rather than fucking,\" Eulalia said.\n\nLapine's swollen walls smothered the bulging head of Kurtzburg's cock and gave it a little squeeze. His mouth fell open and he let out an involuntary gasp. His whole body quivered.\n\n\"Not that you look as though you care,\" Eulalia said.\n\nLapine's swollen vagina relaxed its grip on Kurtzburg's cock. She wasn't about to let Kurtzburg come just yet. She smiled, relishing the superiority her sex had over his body.\n\nThe lips of her unnatural sex puffed up around the base of Kurtzburg's cock, forming a soft cuff. Her sex sucked and soft undulations stroked up and down Kurtzburg's shaft.\n\n\"Are you going to give me a nice big load?\" Her soft lips brushed against Kurtzburg's as she whispered the words.\n\nHer vagina continued to ripple around Kurtzburg's cock in stroking undulations. His hips quivered with the same rhythm. He was close. So very close.\n\n\"Yes, pour it into me,\" Lapine urged.\n\nShe hugged Kurtzburg's trembling body tight. She gripped him with her thighs. She pressed her tits against his chest. Her pussy gripped him tightest of all.\n\nAnd sucked.\n\nThere was no coming back from this point of climax. Kurtzburg went past it. Shattered it. His whole body trembled uncontrollably in Lapine's arms. It felt like the orgasm was not just welling up from his balls, but from the totality of his body. His dick swelled against the smothering cuff of Lapine's vagina and he emptied his semen into her.\n\n\"Yes,\" Lapine sighed.\n\nHer vagina sucked.\n\nKurtzburg let out a surprised gasp. His spine contorted. His hips bucked. He erupted in an even bigger orgasm. Coaxed by the pulsing muscular motions of her vagina, Kurtzburg's throbbing cock emptied great gouts of semen inside her.\n\n\"Oh... this...\" Lapine murmured.\n\n\"Careful, Lapine,\" Eulalia said. \"Don't take too much.\"\n\nLapine ignored her. She sat up in Kurtzburg's lap and pressed her hands down on his chest. Her dainty little bat wings extended behind her and trembled. Her eyelids were half-closed and fluttering.\n\nHer vagina sucked.\n\nKurtzburg convulsed as if galvanised. He emptied yet more semen inside her in great throbbing pulses. He felt like Lapine was sucking more out of him, he felt it all the way down to his extremities. He was intoxicated by pure animal sensation, even as he felt like he was being squeezed by Lapine like he was a drink carton. Squeezed hard.\n\n\"Lapine,\" Eulalia cautioned. Louder this time.\n\n\"That's enough, Lapine,\" Angela ordered.\n\nLapine ignored them both. She wriggled in Kurtzburg's lap. Her vagina kept its implacable hold on Kurtzburg's cock. Still sucking. Still coaxing more semen from him. As good as it felt, Kurtzburg was starting to feel lightheaded. His heart pounded in his chest.\n\nAngela swooped in. She grabbed Lapine bodily by the throat and lifted her up off Kurtzburg. He was jerked up with her, before her vagina finally released him with a wet pop. Angela threw Lapine off the bed and up against the wall. Lapine rebounded and landed like a cat.\n\n\"I said that's enough!\" Angela said.\n\nAlso like a cat, Lapine crouched, hissed and bared sharp pointed fangs. She held a hand out before her, wielding preternaturally long fingernails as sharp and pointed as claws.\n\nAngela powered right through. She moved forward, scooped Lapine up and slammed her back against the wall. She held her there by the throat. Lapine's feet dangled a good foot off the ground.\n\n\"We will not let our instincts rule us,\" Angela said.\n\nLapine thrashed and hissed and spat.\n\nAngela held her there, pinned to the wall. The taller she-demon's tail curled up and made a beeline to the mouth between Lapine's legs. The spade-like tip found the entrance to Lapine's vagina and forced its way inside. The reaction was immediate. Lapine went limp. Her eyes glazed over. Angela held her there as her tail smoothly pumped up and down inside Lapine's pussy. Lapine started mewling in pleasure.\n\nAngela turned back to the bed. \"Eulalia, Mystrella, can you look after Mr Kurtzburg while I take care of this.\"\n\nStill with her tail working between the other woman's legs, Angela lowered the now submissive Lapine down from the wall and carried her away to another room. After a few moments soft sighs and moans could be heard emanating from the other side of the door.\n\n\"The young ones are still a little cum-crazy,\" Eulalia said. \"Angela will fuck some sense back into her.\"\n\nBoth her and Mystrella turned to look at Kurtzburg. He was still stuck in the bed. He felt trodden into it as if he'd been stepped on by a giant. His breath came out in ragged gasps. He felt like he'd just done an intensive workout at the gym.\n\nKurtzburg hadn't frequented a gym in some years.\n\nLapine had fucked his brains out. And everything else.\n\n\"Don't think you're done,\" Eulalia said. \"You're our Valentine's Day treat just as much as we're yours. We have all night to enjoy you.\"\n\nMystrella got up off the mattress. She returned with a bottle and another glass of fruity wine.\n\n\"Drink.\" She put the glass to Kurtzburg's lips.\n\nHe did. He felt parched, and... wow. What was this? The wine surged through him like an energy drink. It washed all the exhaustion right out of him.\n\nMystrella looked down at Kurtzburg's crotch, where his cock drooped listlessly over his testicles.\n\n\"It would have been better if you'd eaten those chocolates,\" she said.\n\n\"Pfth. Like that's a problem for succubi of our experience,\" Eulalia said.\n\nShe leaned in close and whispered in Kurtzburg's ear. Kurtzburg didn't catch what she said. The words were in no language he recognised. He wasn't even sure they were words. They slipped into his skull and slithered along the secret folds and crevices of his brain. They found the pleasure centres and massaged them with warm, skilled hands.\n\nBlood surged back to Kurtzburg's loins. His cock slowly rose like a fruiting body after a rainstorm.\n\n\"Ooh, that filthy tongue of yours,\" Mystrella said. \"Did you know she once emptied out an arrogant noble with just a little whisper in his ear. That's all it took\u2014one little whisper\u2014and he emptied it all out on the cobblestones in front of her.\"\n\n\"Well I wasn't going to eat him.\" Eulalia pulled a face. \"Disgusting pig.\"\n\n\"Bad people taste bad,\" Mystrella said.\n\n\"We like nice guys, the real nice guys,\" Eulalia said.\n\n\"The shy, the innocent, the awkward,\" Mystrella said.\n\n\"They taste yummy,\" Eulalia said.\n\nBoth succubi pressed in close to Kurtzburg. Mystrella stretched a long leg over Kurtzburg and straddled his chest.\n\nShe turned to Eulalia. \"You don't mind?\"\n\n\"It is your turn,\" Eulalia replied. \"And I'm sure you won't mind if I use my filthy tongue on other parts of Mr Kurtzburg's anatomy.\"\n\n\"Not at all, but let him float in my boobsmoke for a while. I wouldn't want to let my own special skills fall out of practice.\"\n\nBoobsmoke? What did she mean by that? Kurtzburg thought. He looked again at the strange plump, sensual mouths she had in place of nipples.\n\nHe didn't get much of a chance to ponder as Mystrella smoothly folded her body over his and buried his face in her substantial cleavage. It was like being smothered under a pillow, but a hundred times more erotic.\n\nThe warm soft flesh of Mystrella's boobs, with their silky-smooth skin, felt wonderful against Kurtzburg's face.\n\nDespite this, it was still being smothered. Kurtzburg's nose was wedged too deep in Mystrella's bosom for him to draw breath. The lack of oxygen started to make him feel lightheaded.\n\nThen, just when Kurtzburg thought he might pass out, Mystrella lifted her smothering bosom up off his face. His starved lungs drew in a great breath. Too late he realised the air was... tainted.\n\nIt was filled with exotic perfumes and the overwhelming smell of a woman's vagina in full arousal. The potent mix surged straight up his nose and surrounded his brain in a perfumed fog.\n\n\"Breathe it in,\" Mystrella said. \"Inhale. Relax.\"\n\nOne of her strange nipple mouths pursed its sensual lips and blew pink smoke into Kurtzburg's face. He breathed it in and felt comfortable relaxation spread through him. Mystrella pressed her boobs back into Kurtzburg's face and he marvelled at their weight and softness as she rubbed them against him.\n\nShe pulled back to puff more perfumed clouds in his face. They billowed around him and enveloped him in sensual ecstasy. She continued to squash his face between her substantial tits.\n\n\"Yes,\" she breathed. \"Lose yourself in my boobsmoke.\"\n\nThe sensual lips she had in place of nipples alternated between giving Kurtzburg warm kisses and exhaling more drugged smoke.\n\nHe was lost. He wasn't sure if he was still lying on the heart-shaped bed or floating up on a cloud. His cock stood up, as hard as a stone column. Mystrella glanced over her shoulder at Kurtzburg's rampant erection and her lips turned up in a smile.\n\n\"Mmm, let's find somewhere wet, warm, and comfortable for that.\"\n\nHer tail reared up. Kurtzburg wasn't sure if he what he saw next was real or a smoke-fuelled hallucination. The bulbous spade-like tip of Mystrella's tail opened out like a flower. Thick juices drooled from the edges of the fleshy petals. The interior was red and wriggled.\n\n\"I think I'll give you a nice tail suck. You'll like that.\"\n\nShe saw the way Kurtzburg's eyes widened and laughed. She fell forward and buried Kurtzburg's face beneath her massive tits. At the same time, he felt something warm and fleshy close around his cock. He shivered in both shock and pleasure as his hard-on was stimulated by slow muscular pulsations.\n\n\"It's okay. I'm not like Lapine,\" Mystrella said. \"We'll take it slow and steady as I give you a nice long tail suck.\"\n\nShe wrapped her arms around the back of his head, keeping his face buried in her overflowing boobs. She turned him to the side. Her tail kept working on his cock with gentle tugging sucks. It felt like skilled and well-lubricated fingers stroking up and down his shaft.\n\nKurtzburg felt a warm, moist, flexible thing dab at his anus. He jolted in surprise, bouncing his head deeper into Mystrella's cleavage.\n\n\"Ah, I see Eulalia is putting that filthy tongue of hers to work,\" Mystrella said. \"This won't take much longer.\"\n\nShe hugged Kurtzburg's head tight to her bosom. Her nipple mouths continued to breathe out aphrodisiac fumes. They filled Kurtzburg until his whole body was seething with barely restrained lust. Mystrella stroked him higher with sucking gulps of her tail. Eulalia's tongue lapped at his ass. The wet tip traced circles around the rim of his anus, sending pleasant ripples of pleasure radiating outward.\n\n\"You don't have to do a thing,\" Mystrella said as rocked Kurtzburg's head between her heavenly boobs. \"Drown in our sensuality.\"\n\nKurtzburg had no choice in the matter. Mystrella's tail continued to pulsate and squeeze. Eulalia's tongue started to probe the opening to Kurtzburg's ass. He shuddered in pleasure as her tongue wormed inside. How long was it? It slithered deeper and deeper into Kurtzburg's ass.\n\nMystrella and Eulalia seemed to have an almost telepathic rapport. As Eulalia's probing tongue reached Kurtzburg's prostate, Mystrella's tail began to pulse faster and squeeze harder. Kurtzburg's legs trembled. His ankles drummed against the heart-shaped mattress.\n\nMystrella released Kurtzburg from the smothering clutch of her bosom. Streamers of pink mist trailed from her nipple lips.\n\n\"Time to get that nice big pop,\" she said.\n\nThe flesh of her mysterious tail orifice bunched up and rolled up and down Kurtzburg's cock. He heard wet squelching sounds as the strokes got faster and harder. Behind him, Eulalia's tongue pressed down on his prostate.\n\nKurtzburg exploded in orgasm with violent shudders. His semen boiled up out of his throbbing cock and was gulped down by Mystrella's tail.\n\nMystrella was much more in control than Lapine. She hugged Kurtzburg to her and held his trembling body while her tail slowly drained Kurtzburg's cock and balls.\n\n\"Very nice,\" she said, once she was done. \"You must be a good guy.\"\n\n\"Of course.\"\n\nEulalia had removed her tongue from Kurtzburg's ass. She crawled up level with him and rested her warm body against him.\n\n\"The fox wouldn't have picked him out if he wasn't,\" she said.\n\nThat caught Kurtzburg's attention even through the haze of perfumed smoke and blissful orgasmic aftermath currently fogging his brain.\n\n\"Fox? Who is this?\" he asked.\n\nThe two succubi ignored him.\n\n\"My turn?\" Eulalia asked.\n\n\"Your turn,\" Mystrella confirmed.\n\nEulalia turned Kurtzburg around and focused on his spent and drooping dick. A kiss to the tip quickly solved the 'drooping' problem. Kurtzburg jolted back to full hardness as if he'd been shocked by defibrillators.\n\n\"Good. I'm in the mood for a good long suck,\" Eulalia said.\n\nAs Kurtzburg watched, her lips puffed and swelled as if inflated. It took her appearance to a slutty caricature. Despite this, her lips lost none of their magnetic pull. Watching them, Kurtzburg still ached to slide his cock between them, even after having his balls comprehensibly drained by both Lapine and Mystrella.\n\nEulalia's lips swelled still further, the entrance to her mouth becoming a little pinprick between plump and glossy-red cushions.\n\nMystrella turned his head away.\n\n\"While Eulalia is a mistress of the blowjob, the physical changes she undergoes make her self-conscious. She doesn't like to be watched. Look at my lovely boobies instead,\" Mystrella said.\n\n'Look' became 'bury his face in her cleavage'.\n\n\"This is one for the sensation of touch alone,\" Mystrella said. \"Enjoy the feel of her luscious lips wrapped around your cock.\"\n\nEulalia's lips pressed against the tip of his cock and Kurtzburg was drawn between them with measured, teasing slowness. It felt like every cell, every nerve ending in his penis was being kissed by her over-plump lips.\n\nSlowly, slowly, Eulalia drew Kurtzburg's erection into her mouth.\n\nBut was it her mouth?\n\nIt felt like her lips went on and on as Kurtzburg's cock slid between them. Even fully inside her, the swollen head of his glans didn't reach an end and was instead squeezed by the same supple flesh wrapped around the base of his cock.\n\nKurtzburg wasn't even sure he was being blown. It felt more like he'd entered a tight vagina, or even ass.\n\nEulalia made a wet 'pfsh' sound as if blowing a raspberry. Her lips vibrated around Kurtzburg's cock and he felt complete ecstasy. She did it again and again until Kurtzburg was nothing more than helpless wreckage. Then she started to suck him in deeper like a snake swallowing subdued prey. Her supple flesh pressed all around Kurtzburg's cock. It felt like the lips were pressing all around him.\n\nA rippling vibration. A suck. A rippling vibration. A suck.\n\nKurtzburg trembled helplessly. He felt utter bliss, but he also felt like he was being slowly devoured.\n\n\"I think he's coming,\" Mystrella said.\n\nEulalia's soft lips crushed up around Kurtzburg's cock. She gave a deeper suck. Kurtzburg shuddered as he climaxed and ejaculated a great stream of semen into Eulalia's mouth. She paused only to gulp it down. Then she returned to the same rhythm as before.\n\nA rippling vibration. A suck.\n\nAnd now Kurtzburg felt like it was the whole of him that was caught and being pulled inexorably between Eulalia's lips. His consciousness tumbled down inside his body and was drawn into his cock until Eulalia's lips became his whole world. He was standing in a glossy red tunnel with billowing walls. The soft flesh pressed in against him and coaxed him to the end.\n\nSomehow, instinctively, Kurtzburg knew that beyond that opening was Eulalia's mouth, and if he entered it, he would tumble down her throat and be lost forever. And yet he didn't care. He wanted to fall into her with an intensity of need he'd never experienced before. Pleasure surged along the tunnel and through him in another blissful climax. He wanted to flow with the stream and fall into her.\n\nHer lips bunched up around him and prevented him from going further. They held him there while he bucked, thrusted and spurted semen into the gaping throat beyond. Then, just as he thought Eulalia would consume him entirely, she gave him a little blow. The breeze picked Kurtzburg up, carried him back down his shaft and then back up into his head until he was aware of Mystrella's breasts pressing lightly against his face. He gasped as if he'd been holding his breath the whole time.\n\nMystrella laughed. \"She has a powerful suck. Enough to suck the soul from the body.\"\n\nEulalia's lips deflated back down to their normal bee-stung plumpness. She released Kurtzburg's still-twitching-and-oozing cock.\n\n\"I was tempted,\" she said. \"But...\"\n\n\"You knew the consequences should you not leave any for me,\" Angela finished for her.\n\nThe red-skinned demoness had returned from the side bedroom. Lapine had not.\n\n\"There isn't much left.\" Eulalia said. \"That girl has a powerful pussy on her. She was still able to drain a lot from him before we could stop her.\"\n\n\"Where is...?\" Kurtzburg started to ask.\n\n\"She's okay,\" Angela interrupted. \"I fucked some sense back into her. She's sleeping it off.\"\n\n\"She has not been in your world long,\" Eulalia said. \"She still has much to learn.\"\n\n\"You shouldn't show concern for her,\" Angela said with an amused smile. \"If we hadn't stopped her when we did, she'd have sucked you completely dry.\"\n\n\"Left you as wrinkled and dried-up as a piece of jerky,\" Eulalia added.\n\n\"He does look a little dry,\" Angela said. \"I notice both of you took your full share.\"\n\n\"There's still some left,\" Eulalia said, wrapping a hand around Kurtzburg's cock.\n\n\"And we still have this,\" Mystrella said.\n\nShe held up the wine bottle and swirled it around, showing there was still a glass or more of wine sloshing around at the bottom of the bottle.\n\nAt this point Mystrella felt glasses were unnecessary. She placed the top of the bottle between Kurtzburg's lips and tipped the bottom up.\n\n\"Drink up.\"\n\nKurtzburg did. He felt parched. He gulped the wine down as if it was water, heedless of any consequences to drinking an alcoholic beverage so quickly. It should have gone straight to his head. Which it did, but not the head Kurtzburg was expecting. He felt warmth and energy flow into him. It concentrated down in his loins and his over-used cock once again managed to raise itself in another erection.\n\n\"Ah, I see you still have some juice for me,\" Angela said.\n\nShe sat down on the mattress and rubbed a finger against Kurtzburg's urethral opening. Her motions were lubricated by the pre-cum still oozing from the tip of Kurtzburg's cock.\n\n\"It's been fun, but I think it's time we brought this Valentine's Night to a close.\"\n\nShe moved on top of Kurtzburg. Her hand wrapped around his cock and held it in place as she sank her vagina down over the top of it. Kurtzburg again felt his erection be drawn into a warm, tight, fleshy, and well-lubricated sheath.\n\nThe three succubi crowded in around him. They whispered sweet nothings. They kissed him. Licked him. They caressed him with their hands, their breasts. There was no urgency, just slow, languorous lovemaking. Kurtzburg lost all track of time. He felt like their attentions had melted him into a puddle of bliss.",
        "Angela broke off a deep kiss to stare at him with her smouldering red and black eyes.\n\n\"It's time,\" she said. \"I think you only have one pop in you, so let's make it a good one.\"\n\nHer pussy bunched up around his cock. Muscular pulsations rolled up and down his erection in slow, sensual tugs. Her body warmed up around Kurtzburg and transferred that heat\u2014and urgency\u2014to him.\n\n\"Yes, let it build.\"\n\nWhile barely moving her hips. Angela continued to pump Kurtzburg's cock with long, deep strokes.\n\n\"Build and build.\"\n\nAs with Eulalia, Kurtzburg felt like some part of him had become unmoored and was moving freely inside his body. It\u2014he\u2014bobbed around himself with the same frequency as the strokes of Angela's vagina, strokes that grew faster and more powerful. Each oscillation pulled Kurtzburg down lower, closer to his crotch, closer to his throbbing cock.\n\n\"Until...\"\n\nAngela pursed her sensual red lips.\n\n\"...pop.\"\n\nA ring of muscular flesh contracted around Kurtzburg's cock. It rolled up his shaft, squeezing him, until it reached the swollen head of Kurtzburg's cock and he couldn't hold on any longer. He came. It felt like bursting, and he felt a great surge of relief. All his cares, worries, pain, everything... it surged out of him in one great joyous rush. Kurtzburg was caught up in the flow and carried along like a piece of flotsam. He tumbled down to his crotch and then out through his cock in a great spurt.\n\nAnd then he was free, floating in a realm of warm, scented clouds. He slowly turned over and over, suspended within a great sphere of reddish-pink flesh. Embedded in the walls in a chequerboard pattern were alternating mouths and vaginas. The mouths had luscious sensual lips\u2014Angela's lips. The vaginas were smooth, clamshell folds\u2014Angela's vaginas. The lips exhaled perfumed mist. Kurtzburg floated in it and felt blissful and totally relaxed.\n\nThe lips spoke and Kurtzburg heard multiples of Angela's voice reverberate within the fleshy sphere.\n\n\"This is how the succubus takes a man. She overwhelms him with sensual bliss until he offers up his seed, his vitality, and then finally his soul.\"\n\nThe lips sighed and moaned. The labia of the vaginas peeled back to reveal glistening pink interiors. Kurtzburg felt fuzzy and supremely comfortable.\n\n\"The succubus never takes. Seduced and bewitched, the man always freely gives. You want to give me your all, don't you, Piotr. You need to give me your all. That way the pleasure will never end.\"\n\nYes, Kurtzburg mouthed. He floated and slowly turned as if suspended in zero gravity. He drifted closer to the reddish-pink wall and bank of vaginas. They throbbed and quivered in expectation. Kurtzburg wanted\u2014needed\u2014nothing more than to be in one of them, be consumed by one of them. He knew it would mean his end and didn't care. There would be no greater pleasure and, after experiencing such pleasure, existence would no longer have any meaning anyway.\n\nThe lips filled the fleshy sphere with laughter.\n\n\"How they give themselves to us. Helpless, like moths to a flame.\"\n\nKurtzburg was drawn to a gaping vagina... many gaping vaginas. The substance of him started to unravel, unspool and be drawn into snug, warm sexes. The lips moaned and sighed. Kurtzburg moaned and sighed with them.\n\nA voice called out in warning at the back of his mind, but it was overwhelmed by the sheer bliss he was drowning in.\n\n\"Oh, you taste so good. I could suck you all up.\"\n\nYes, suck me all up, Kurtzburg thought.\n\nNo, a tiny pleading voice cried out, faint and buried beneath the erotic sighs.\n\nHer vaginas contracted, pulling the substance of Kurtzburg deeper into them. They enveloped him in comfortable, fleshy warmth, even as they pulled him taut in all directions. It was only a temporary discomfort, and when he snapped, when they sucked in his wriggling remnants, it would be the greatest burst of relief of all.\n\nAngela laughed. \"Ah, if only I could. Those days are long gone. Sometimes I wonder if She asks us to do this more as a test for ourselves than to reward those She deems deserving.\"\n\nHer vaginas released him. The substance of his being wound back together. He felt profound disappointment, but only briefly, as the part of him submerged by Angela's seductive enchantment was allowed to come back to the fore. It knew how close he'd come to complete destruction.\n\n\"I am not a slave to my instincts,\" Angela said.\n\nThe lips pursed and blew, and Kurtzburg was blown. He sped backwards, returning to his body as if the tape of his exit was being rewound. His essence filled his body just in time to experience the last twinges of orgasm. His cock and loins still throbbed mightily, even though little more than a dribble entered Angela's gorgeous pussy. His balls had nothing more to give. Angela still moaned erotically as if he'd given her a feast.\n\n\"Mmm, that was lovely,\" she said, when it was finally over.\n\n\"Did you take anything?\" Eulalia asked.\n\n\"I had a taste. It was enough.\"\n\nKurtzburg could barely move. He felt like he'd given everything even if the succubi had not\u2014thankfully\u2014taken everything.\n\n\"Is that it?\" he asked Was it finally over?\n\n\"Well, we could do more, but it wouldn't be good for you,\" Eulalia said.\n\n\"So, you're not going to kill me?\"\n\nGoddammit, Kurtzburg thought. Where had that note of disappointment crept in from? He wanted to live, not encourage the succubi to drain him further.\n\n\"Who said anything about killing,\" Angela laughed. \"We're the Succubus Heart Squad. We bring nights of indescribable sexual delights to nice, deserving guys.\"\n\n\"And because we'd get hunted down and burnt at the stake if we sucked dry everyone we came across,\" Eulalia added.\n\n\"Times change. Now we have a new mistress,\" Angela said. \"She decreed we give you a night of pleasure and so we did.\"\n\n\"But why?\" Kurtzburg asked. Why him? The question had burned in him all night.\n\nAngela shrugged. \"Who knows the mind of the fox. She works in mysterious ways. Maybe we're your reward, or maybe you're our test. She has a plan and you are part of it.\"\n\n\"She likes the nice guys,\" Mystrella said.\n\n\"She believes nice guys should have nice things happen to them,\" Eulalia said.\n\n\"And we're very good at making nice things happen to nice guys,\" Mystrella said.\n\nBoth succubi snuggled up closer, warming Kurtburg with their bodies.\n\nKurtzburg didn't know what to think. He was too exhausted to even think. His eyelids felt like heavy iron shutters. It was getting harder and harder to keep them open.\n\nAngela moved round behind him and cradled his head.\n\n\"It's Valentine's, a night of passion, romance, pleasure and satiating wild animal lusts. You had a nice night. We had a nice night. Does there need to be anything more to it?\"\n\nKurtzburg stopped thinking about it. Mainly because he was too tired to continue thinking about it. His eyelids fell shut and this time he let them stay shuttered. Snuggled up with the succubi, he drifted off in an exhausted but satisfied sleep.\n\n* * * *\n\nPiotr Kurtzburg awoke in his own bed.\n\nOf course, he thought. It had to have been a dream.\n\nBut what a dream. So vivid. So damn erotic.\n\nYou need to get laid, he thought.\n\nHe noticed it was lighter than usual outside.\n\nOh crap, had he overslept? Ross would have him fired if he showed up late. He turned to the bedside table to see what time it was.\n\nHe saw the card immediately. It was big, bold and had a massive saccharine heart on the front. A Valentine's Day card for a man who never received Valentine's Day cards. He picked it up. He knew what would be written in it even before he opened it.\n\n\"We hope you enjoyed your night with us. We did!\" -- The Succubus Heart Squad.\n\nThey'd signed the bottom and framed their signatures with lipstick kisses -- Angela, Eulalia, Mystrella, Lapine.\n\nIt was real.\n\nKurtzburg's mouth cracked in a broad grin. He felt an elation within himself that matched the rays of the sun outside.\n\nIt was real.\n\nTHE END"
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "boob smother",
        "tail suck",
        "big boobs",
        "blowjob",
        "demon",
        "succubus"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/the-succubus-heart-squad"
}
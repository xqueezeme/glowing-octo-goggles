{
    "title": "Gamer Goddess Ch. 03",
    "pages": [
        "==============================\n\nGamer Goddess Surrenders\n\nAs mentioned in chapter 1, this story is very online-gaming-centric. It uses a lot of concepts, vocabulary and acronyms from games, especially Diablo 3, which this story revolves around.\n\nThis chapter's a little less voyeuristic than the first two, so I went with the Group Sex category. It's just a recurring threesome. Could have been Romance, Erotic Couplings or even Loving Wives. I even gave thought to First Time, although 'technically' it wasn't her first. I'm sure you, the reader will let me know if I got it wrong.\n\n==============================\n\nI had one last checkup with my doctor, and was given strict directions on how to take care of my wounds. I was forced to take the obligatory wheelchair ride, with a large escort. Dan, Jaime, Sandy, Maria, Angela, even Carolyn, Sheri's Mom. I was kind of disappointed that Sheri wasn't there.\n\nSandy leaned over and gave me a kiss on the cheek. \"Cheer up, handsome. How about a little smile. You're finally free.\"\n\nI forced a smile and Angela grabbed my hand and gave me a squeeze. \"Lousy timing asshole. All the excitement, and I'm stuck in Spain. Next time give a girl a little heads up, Ok?\"\n\nI laughed. \"Sorry. What was I thinking? I promise, no more late night stabbings unless you're no more than a couple of hours away. Deal?\"\n\n\"No more late night stabbings period, dickbreath. Do I have to take you home and lock you in my attic, to keep you safe?\"\n\n\"Maybe just on Tuesdays and Thursdays,\" I told her, grinning.\n\n\"You know Tuesdays and Thursdays are Mark's training nights.\"\n\n\"Yes I do.\"\n\nShe grinned, looking around at the crowd walking with us. \"What are you saying, rotten man?\"\n\n\"Maybe you and me should spend some more time together,\" I teased.\n\nShe leaned down and gave me a kiss on the cheek. \"I thought you didn't like Maria and me. Stealing your guys away.\"\n\nI grabbed her hand, holding it. \"I've been an ass. You know my issues. Forgive me?\"\n\nHer smile was touching. \"Nothing to forgive. Good to see you back. I think we all owe your girl a lot.\"\n\n\"Tuesdays and Thursdays?\" I chuckled.\n\n\"Right. I heard what she did to the last guy that messed with you. No chance I'm getting on her bad side.\" She squeezed my hand. \"Besides, you couldn't handle this.\"\n\nI was loaded into the Limo, Mark driving again, with Dan, Jaime, Maria and Angela joining me in the spacious interior. I was still sore and tender, and looked at Dan. His face was a rainbow of bruises.\n\n\"Gotta tell you, buddy. The new look is an improvement.\"\n\n\"Eat shit and die, asshole,\" he laughed.\n\nI had left Jaime alone, most of the last week, but the opportunity was too good. \"Sheri tells me that one of those guys hit you so hard, he left you crying like an 8 year old. Tiny little girl beating the hell out of the bunch of 'em, and you're watering the alley.\"\n\nHe blushed before responding. \"Tears of laughter. Seeing you lying there like a little bitch, whining over a few pin-pricks, while you left your girlfriend to the do the heavy lifting. Just like in game.\"\n\nThat got a laugh out of everyone. I was out of practice, on the losing end against Jaime of all people. What was the world coming to?\n\nWe talked a little about our latest business venture, which Dan, Jaime and Mark were all invested in. Angela handled Mark's money and investments so the entire team was together for the first time in a week. I got updated on the status of our deal, with the papers signed, and first cash payments paid out, we were putting one of our guys on staff, and doing some deeper research into their technology. It had Jaime working with them on site, and Dan attending their staff meetings. \n\nWe hadn't been this involved in a new business effort in years. Then again, $40 million was a lot of money. My share was almost a quarter of my worth, a huge risk. Oddly, I hadn't given it a thought in the last week, even with all my free time.\n\nWe pulled up to the Carlyle, where I learned that Dan had moved me into one of their two-bedroom suites, with a remarkable view of Madison Avenue. I was a little nervous about the expense. Sure, money wasn't a problem, but a couple of weeks there would probably buy a luxury car.\n\nDan reassured me the cost was reasonable, only around two grand, unlike the central tower suites which ran better than $8k a day. What a bargain.\n\nInside the lobby, I said goodbye to everyone except Dan who escorted me to my suite. He handed me my keycard, and gave me a pat on the shoulder. \"Don't strain yourself. Take it easy for a few days. Use the amenities here, you're paying for them.\"\n\n\"Office setup?\"\n\n\"Complete. New gear, matching your old, Jaime configured everything. You're good to go.\"\n\nI opened the door, and he stayed behind. I looked at him curiously, but he just grinned. \"You got it from here.\"\n\nI walked past a small kitchenette and powder room into the luxurious living room. It wasn't going to be too tough to stick it out a while. Beautifully laid out, tasteful furniture, fireplace, and a stunning view from the 12th floor. I saw a door to my left, and looked in to a fully furnished office. The bed had been removed, and dual desks had been installed, face to face, each fully outfitted with a computer station and 32\" monitors.\n\nBack through the living room, I found the entrance to the bedroom. I opened the door and smiled.\n\n\"Hey sailor, in port for long?\" Sheri asked, stretched out on the king-size bed.\n\nShe was wearing one of her new outfits, a cobalt blue lace halter style babydoll, that showed off her beautiful breasts to their best advantage. Mostly sheer, with flowery designs throughout.\n\n\"They'll let anybody in this place, won't they?\"\n\n\"You don't know the half of it. I had to fight off half-a-dozen sluts to keep you to myself.\"\n\n\"You've always been a hell of a fighter.\"\n\n\"Miss me?\" she asked, squirming sexily.\n\n\"You have no idea, gorgeous.\"\n\nShe laughed sweetly. \"I'd say I have a very good idea.\"\n\nShe got up, and slipped into my arms. She tilted her head up and I kissed her, softly at first, then more passionately, until I groaned under the pain of a tight hug. I'd have to remind her to avoid the actual wounds. Wasn't worth interrupting the hug over.\n\n\"Pussy,\" she teased, working my tie, and the buttons of my shirt free. I was dressed casually, clothing the guys had brought me for the trip home, so I wouldn't be stuck wearing my tux.\n\nMy torso was completely wrapped, and she walked around me, her hands fluttering against my skin, her lips pressing against my back. \"Don't you ever scare me like that again,\" she whispered.\n\n\"I'll try not to.\"\n\nHer lips pressed against my shoulder, as her arms wrapped around my body, undoing my belt and opening my pants. \n\nI had been told she was past her contact-with-males issue, but this was still surprising. She dropped to her knees, leaned over and untied my laces. She nudged my leg up, and pulled off my shoes, one at a time. Still on her knees, she pulled my pants down, leaving me in my boxers and socks.\n\nSheri drew me over to the bed, getting me to sit, and removed my socks. She ran her hands slowly up my legs, gently, lovingly. At my thighs she looked up at me. \"You gave me this. This ability.\" She leaned over and kissed my skin, tenderly.\n\nI lay back and relaxed while she took her time becoming acquainted with my body. She avoided my boxers but a few minutes later her lips were on my neck, her soft body pressed against mine. My face was bathed in kisses, before her lips finally met mine. \n\nI don't know how long we spent there, quietly kissing, our lips joined, our breath one. Her tongue was gentle and tentative, then more forceful, teasing, battling, exploring.\n\nOur lips separated, my eyes boring into hers. \"I love you, Sheri.\"\n\nShe grinned. \"No shit, Sherlock. I think you've made that pretty obvious. The whole fucking city knows about it by now. The man who'd fight three guys for his girl, ending up half-dead in the hospital for a week.\"\n\n\"If you hadn't destroyed that one guy, I doubt it would have been newsworthy.\"\n\nShe kissed me again. \"I'm yours, big guy. What are you going to do with me?\" She got up on her knees, and peeled off her top, sitting there in small blue lace panties. I started to rise, but she pushed me back down and brought her tits to my face. \"The girls have been dying for this moment,\" she giggled.\n\nI kissed, fondled, and sucked away to my heart's content. She appeared to enjoy it, moaning sweetly. Her nipples were hard, standing up proud, and received more than their share of attention.\n\nSheri backed away, and moved off of me. She pulled off her panties, then moved to my waist and pulled my boxers down. She was staring at my hard cock, and her hand moved forward tentatively, a single finger reaching out and touching me cautiously. She kept her eyes on it, lying down beside me, her fingers floating across my skin. \n\nHer breath was loud, heavy. She wrapped her fingers around my shaft and shivered. I held her close, my hand stroking her back.\n\n\"Relax, baby. We don't have to do everything at once,\" I told her.\n\nShe shook her head. \"I want to. I need to, Steve.\"\n\nSheri scooted down for a better view, her hand stroking me ever-so-slowly. Her grip loosened, and she curled her hand around the crown, her palm smearing my pre-cum across the head.\n\n\"It feels so weird,\" she murmured. \"An iron rod, wrapped in velvety skin. Hard and soft.\" She looked up at me. \"I want to do it. Can we?\"\n\n\"I'd love to,\" I confessed. \"You're sure?\"\n\n\"Absolutely.\"\n\nI'd love to say it was the greatest ever. The culmination of all my dreams. Perfection personified.\n\nIt was horrible.\n\nShe straddled me nervously, holding me upright. She lowered herself and as soon as my skin touched hers, she started shaking and was soon sobbing, crying inconsolably. I drew her down into my arms, and she pulled away, rolling onto her side, her back to me. \n\nI left her alone for a few moments, before placing my hand on her shoulder. When she didn't struggle, I closed in behind her, holding her. I didn't say anything.\n\nShe got herself together and turned into my arms, pressing her head into my neck. \"I'm sorry. It'll get better.\"\n\nI hushed her. \"We're rushing things. Take it easy. I love being here with you. Don't force it. I love you and I'm in no hurry. I'm going to spend the rest of my life with you, Angel. Time is not an issue.\"\n\n\"I...I thought I was ready.\"\n\nWe cuddled, kissed, and I was surprised when she wanted to try again. It was only slightly better. I actually settled the head between her lips before she lost it.\n\nAfter that, we stayed in bed for a while, holding each other, before getting up. I was suffering a pretty bad case of blue-balls, but wasn't about to say anything. \n\nWe got dressed, and had a meal in the restaurant. I sent her off to the spa for some spoiling and relaxation, while I returned to the suite and checked on emails, trying to get a little work done.\n\nShe was in a great mood when she returned to the suite. She was glowing, laughing, and leaped into my arms, stealing a kiss.\n\n\"Game time?\" I asked.\n\n\"Hell yeah! We need to kick Diablo's ass in inferno. You've been slacking and we're behind.\"\n\nShe got comfortable, wearing a t-shirt and panties. I dressed in shorts and a jersey. Turned out she'd had time to get setup, had her home keyboard and mouse hooked up. Our machines where back-to-back, and we sat down, facing each other. If I sat up high, I could see her over the top of the monitor.\n\nThe guys were online, and Dan offered to sit out the final battle. He'd already completed it solo, and with a couple of teams. For the rest of us it would be the first time.\n\nWe started about 3 save points from the end, to get warmed up. Half-an-hour later we were ready to face the final nemesis. With all the issues we had getting there, he went down remarkably easily, taking only about 5 minutes. We worked like a well-oiled machine, the two cannons firing from a distance, while Cherry and I took care of the melee. We had to be careful, and timed our moves to the animations, warning us before each of his big moves, giving us a chance to interrupt them. None of us died. When he went down, we were whooping it up, laughing. The loot was nothing to brag about, but we'd done it. End game.\n\nWe bowed out of team play, and Sheri and I switched to our softcore alts, and went after him again. It was a little more difficult, with me running my Demon-hunter and Cherry playing her barbarian. It took a good 10 minutes, and it was close a couple of times, but we did take him down, talking throughout, planning our strategies, advising each other on our strategies and planned moves.\n\nI was ready to do some hardcore farming, when Sheri insisted on a break. \"We're going to dinner,\" she told me.\n\nI was a little surprised. I thought we'd just spend some time together, relaxing but I realized my life wasn't my own anymore. We got dressed, with Sheri taking only about half-an-hour to get ready. My preparations were simple enough. Shirt, slacks and tie, another dose of pain-killers. Turned out we had reservations in-house. We were escorted to a candle-lit table, where Sandy and Robert were waiting. They both stood and welcomed us with hugs.\n\nDinner was pretty amazing. The company was wonderful. Robert and I discussed what we did for a living. He was a lawyer, and I was stunned. The first lawyer I'd met that I could stand, to be honest. I even told him as much, and he laughed. He knew every lawyer joke ever made, and regaled us with a few. Robert was in mergers and acquisitions, and was familiar with the legal team I'd worked with on our latest investment. I knew that in the future, Robert's firm would at least get a shot at working with me.\n\nWe lingered over our second bottle of wine and coffee. They were fun to be with, comfortable. I was feeling no pain, literally, by the time we were ready to call it an evening.\n\nI offered to have them come up and visit, but Robert excused himself. He kissed the girls goodbye, and insisted I meet with him for lunch in the upcoming week. \n\nSandy agreed to join us, and we headed back up. I thought it was nice that the elevator operator, with his elegant white gloves, remembered us.\n\n\"Your floor, Mr. Jeffery?\"\n\n\"Please,\" I glanced at his nametag, \"William.\"\n\nHe nodded, tipped his hat to the ladies who were chatting quietly. In the room, we settled into the living room, and Sandy hopped on the phone, ordering champagne and a snack from room service.\n\nI was sitting between the two beauties, when Sandy hung up the phone and pulled her dress all the way up to her waist before straddling me.\n\n\"So it didn't go so well the first time,\" she said nonchalantly. \"What do you say we play around and see what she is comfortable with? We can work our way up to the big finale. Nobody here is in that big a rush are they?\" She was grinding away on my lap, her arms casually resting on my shoulders, looking me in the eye.\n\n\"No hurry here,\" I told her. I looked over at Sheri, \"That alright with you?\"\n\nShe nodded slowly. \"I'm sorry...\"\n\nSandy leaned over and gave her a kiss on the lips, shutting her up. \"No sorries, silly girl. We're both ecstatic to see how far you've gotten. No need to go crazy the first night. Let's drag it out.\"\n\nShe sat back upright, and ran her fingers through my hair. \"Now don't think I'm selfish, but I figured maybe you both could play with me. Nobody seems to have a problem with that. Then anything you two want to do together can be an offshoot of that.\"\n\nI think my grin was answer enough for her. She turned toward Sheri. \"That work for you?\"\n\nSheri leaned against me, reaching out and running her hand down Sandy's side. \"I'd like that.\"\n\n\"Good,\" Sandy said. \"The zipper's on the back. Undress me for your man.\"\n\nSheri stood up and moved behind her best friend. She slowly drew the zipper down, her lips brushing Sandy's shoulder as it was slowly uncovered. Then she gripped the bottom of Sandy's dress, and pulled it up and over her head, leaving her sitting on my lap, completely naked. \n\n\"Oops!\" Sandy giggled. \"I guess I forgot underwear. I hope you both will forgive me.\"\n\nSheri dropped to her knees, her arms wrapped around Sandy's waist. I wish I could see what was going on behind her. I leaned forward and took a nipple in my mouth, sucking on it, feeling the nipple harden. She had amazing tits, high and firm, smaller than Sheri's but perfect on her body. \n\nThe doorbell to the suite rang at that moment. Of course. Sheri stood, grabbed my jacked and wrapped it around Sandy's shoulders, then went to the door. A moment later a bellboy was wheeling in a cart, with a bottle of champagne, and a plate of chocolate covered cherries. Sheri signed for it, while the young man's eyes tried to burn a hole through Sandy's impromptu cover-up. She was leaning against me, still straddling my lap, her long, luscious legs exposed. Her head was resting on my shoulder, watching the poor boy. He walked the cart right into a chair, apologizing and blushing profusely. \n\nAs soon as he was gone, Sandy hopped off of me, shedding the jacket. She grabbed the handle of the cart that had been left behind, and started steering it to the bedroom. \"Let's go,\" she laughed, \"and two people here are wearing way too much clothing.\"\n\nIn minutes there were three of us naked on the bed, cuddling and kissing, with Sandy in the middle. Sheri and I took turns kissing and feeding her, then kissing and feeding each other. If we spent too much time away from Sandy, she reminded us.\n\nIt was better. Playful, casual. Lots of touching and fondling, kissing and licking. Nothing overtly sexual, except for a lot of breast play. \n\nI was achingly hard, and Sandy was kind enough to notice. \"Did you try to blow him earlier?\" she asked her cousin.\n\nSheri shook her head no.\n\n\"Well I'm going to. If you want, come on down here. Any time you feel like helping, jump in.\"\n\nWith no more adieu than that, she squirmed her way down the bed, and took me in her mouth. Sheri laughed. \"Looks like you're pretty comfortable down there.\"\n\nSandy pulled off with a loud sucking pop. \"Twice a day for the last few, thanks to you. You'd get him all worked up, and leave me to clean up after you. Looks like you did it again. He's ready to pop any moment.\"\n\nSheri blushed. \"Damn! I...I guess I should have helped him finish when I couldn't go through with the whole thing.\"\n\nSandy giggled. \"No sweat. Good for him to get teased a bit. We spoil him too much anyway. We'll finish this one off quick, and then we have the whole night ahead of us.\" She gave me a lick. \"Kiss it?\" she said to Sheri.\n\nSheri leaned over and pressed her lips quickly to the shaft. She looked up at me, grinning, and brought her face down again, kissing it more slowly, several small kisses, working her way upward, until she placed a kiss on the very top.\n\nSandy moved in and did the same on the opposite side, her final kiss extended, her lips slowly opening, as she took me into her mouth. She bobbed up and down a couple of times, then pulled back, and pointed my cock toward Sheri.\n\nSheri was a little hesitant, but she kissed the crown a couple of times, her tiny tongue reaching out and running along the bottom ridge, making me moan. She looked up nervously, then smiled.\n\n\"Yeah, he enjoyed that. It takes a lot for me to get him to moan that way. I think he likes you,\" Sandy said.\n\nIt took a few minutes, with Sandy doing most of the work, but Sheri did, at one point, take me in her mouth for a moment, before pulling away. \n\n\"Jesus, that was nice, Sheri,\" I gasped.\n\nShe giggled. \"I'm hardly doing anything,\" she said.\n\n\"Maybe, but it's you doing it,\" I told her.\n\nI was dying, and Sandy took pity on me. She sucked me for real, taking me deep, working her tongue. Sheri's hand reached down to the base, moving up and down just a couple of inches. ",
        "\"Soon,\" I gasped.\n\nSandy kept going, and before much longer I was shooting in her mouth. She let me finish there, swallowing most, but letting a little drip out over the head and shaft.\n\nSheri's fingers moved away, then one hesitant forefinger reached out and touched the milky mess, pulling away, then reaching back and coating it. She held it out to Sandy, who opened her mouth, and Sheri slipped her finger between the pretty girl's lips.\n\nSandy sat up, and reached for Sheri, pulling her up so they were face-to-face. \"Look at me, beautiful,\" she said softly.\n\nTheir eyes were locked on one another, then Sandy leaned closer, until their lips were touching. I saw their mouths open, and their tongues pressing together. A few moments later they pulled apart. \"Did you taste him?\"\n\nSheri nodded her head slowly. \n\nSandy leaned down and placed her mouth over my cock, sucking me clean, then sat up again, and pulled Sheri's mouth to hers. They kissed longer, eyes closed, holding each other.\n\n\"Is that Ok?\" Sandy asked softly, as they parted.\n\nSheri nodded, smiling. \"Hot.\"\n\n\"Great. Next time maybe we'll let you taste it a little more directly.\" She hugged her cousin. \"Do you think it would bother you to see him fuck me?\"\n\nSheri was slow to respond, then whispered, \"I don't think so.\"\n\n\"Then let's get him hard again. I've been dying to feel that thing inside me.\"\n\nThey played, and before long, Sandy had Sheri actually sucking me a few times. She pushed her away after the third time. \"Not too much. I don't want you getting too comfortable, too fast. That would mean less play time for me. And you owe me.\"\n\nSheri, laughed, and after a few seconds, pushed her cousin away. \"Share, piggy. He is mine, you know.\"\n\nGod bless Sandy. She knew exactly what to do to get her cousin's mind off the implications of what she was doing, and into a playful, less tense mood.\n\nIt became almost a tutorial after that, teaching Sheri how to do things better. \"Look at him when you do it. They love that shit,\" Sandy whispered.\n\nSheri had her mouth around my cock, and looked up at me. I tensed up in her mouth and she pulled away quickly. \"He moved!\"\n\nSandy laughed. \"Of course. You're driving him crazy. We better stop soon if I'm going to get any fun out of it, or he'll come as soon as he's in me.\"\n\nSheri wriggled up the bed, and kissed me on the lips. \"Was that Ok?\"\n\nI laughed, pulling her close and kissing her hard. \"Amazing. You?\"\n\nShe grinned, nodding. \"I can do that. I think I can do that a lot.\"\n\n\"Best girlfriend ever,\" I told her, stealing another kiss.\n\nSandy climbed up to the other side of me, swiping a kiss of her own. \"Almost time. You want to see something really naughty, Steve?\"\n\n\"I'm certain the answer is yes. How naughty?\"\n\n\"Very, very naughty. You're sweet little innocent girlfriend is going to go down on me, getting me ready to take that monster of yours inside my itty-bitty tight hole.\" She turned to Sheri, \"Aren't you, sweet cheeks?\"\n\nSheri blushed. \"This is kind of embarrassing,\" she said softly.\n\n\"I would love to see it. I've been thinking about that constantly for the last few days. Please, for me?\" I pleaded.\n\n\"You don't think it's...oh I don't know...wrong? Perverted?\" Sheri asked hesitantly.\n\n\"I think it's amazing. I think it's wonderful. Hell, I think it may damn well be the hottest thing I could imagine. Drive her crazy, and then let me finish her.\"\n\nSheri smiled. \"I can do that, you know. I can drive her absolutely crazy. Make her scream for release. Beg me.\" She gave me a quick kiss. \"Shall I do that for you? Take her to the edge. Over and over, deprive her of her release, make her squirm and plead. Then you can pound her into a little moist puddle.\"\n\nSandy moaned. \"Shit. I don't need warming up anymore, I can do him now.\"\n\nSheri crawled across me. \"No way! You're mine now. It's my turn to be in charge.\"\n\nShe did exactly what she said she would. It took her a good ten minutes or so, but Sandy was begging her, pleading, crying out for release.\n\nSheri climbed on top of her, in a 69. \"Make me come,\" she demanded of her cousin. \"Until I come, you don't get yours.\"\n\nI watched in awe, slowly stroking my cock, keeping myself ready for my turn. \n\nSandy obviously had Sheri's number, and it was only a couple of minutes later that Sheri was coming for her cousin. Once she'd calmed down, she grabbed Sandy's hips and rolled with her, so that Sandy was on top, with Sheri's head and Sandy's ass toward the end of the bed. Sheri looked up at me, looked at my cock, then at Sandy's tight pink opening.\n\nI moved up behind her and Sheri reached out a hand, stopping me. Her mouth opened and latched onto Sandy's clit, making the beauty moan. \"Please,\" she gasped, \"I did what you asked...\"\n\nSheri's head was moving, her mouth torturing her cousin. She looked up at me, her hand reaching out and grabbing my thigh, pulling me forward.\n\nSandy was trembling, moaning continuously. I guided my cock to Sandy's opening, scant inches from Sheri's eyes. I pressed the head in, waiting for the go ahead.\n\nI couldn't see what Sheri did, but Sandy tensed up, crying out, \"Yes!\"\n\nSheri gave me a tug, \"Now!\" she barked.\n\nI slammed my cock in as hard as I could, and Sandy screamed. I pounded her hard, and felt her exploding around my cock, her pussy squeezing down hard, legs kicking. I watched her hands grab the headboard, the tendons on her arm straining, as her entire body went taut. I rammed my cock all the way in, grinding against her, and felt Sheri's teasing tongue lapping away where I entered her best friend and lover. \n\nIt looked like Sandy was coming down, but she tensed up again, gasping, pressing back against me. I kept myself buried to the hilt, corkscrewing inside of her. \"Ahhhh!\" she groaned, before her body relaxed, slowly, as if we were letting the air out of her. A few seconds later she was lying down, gasping. \"Holy Christ,\" she gasped.\n\nI slowly long-stroked her, enjoying her sweet body, filling the full depths of her pussy. I grabbed her hips, and pulled her up and back, to get better access, for a moment forgetting about Sheri down below. Sheri shifted with her, and I could look down past my cock on the out-stroke, and see Sheri watching my cock fill our play-thing.\n\n\"You Ok?\" I asked softly.\n\nShe looked up at me and smiled. \"That was intense. Too huge ones back to back for her. I think she liked that.\"\n\nI grinned. \"Man, you really had her going.\"\n\nShe lifted her head, and I felt her tongue flicking where I entered that tight little pussy. \"Always. I'm not a total innocent.\"\n\nShe was watching my cock again. \"It doesn't seem like it should fit. That doesn't hurt her?\"\n\n\"Tell her Sandy. Am I hurting you?\"\n\n\"Fuck yeah. The best damn hurt in the world. You can hurt me like this all you want lover. You fill me so fuckin' good.\"\n\n\"I'm going to fuck you hard now,\" I warned her. \"I can't help myself. You're friggin' amazing.\"\n\n\"Pound me. Hammer that pussy,\" she demanded.\n\nI inched my knees forward, got a good grip on her hips, then put my hips into overdrive, fucking her as hard and fast as I could, hammering her, just like she'd asked. \n\nShe moaned, and started grunting every few strokes, the grunts growing in intensity and frequency. After a couple of minutes I was getting tired, but I thought she was close, and wanted to get her to come for just me. I leaned over her, gasping, feeling the tension in my thighs and abs. I slowed down a little, and finished harder, stabbing that sweet little pussy. I grabbed her by the hair, twisting it and pulling her head backwards. \"F..F..Fuck m...me,\" she gasped.\n\nI felt the trembling in her legs, and I knew I had her. \"Come for me,\" I growled.\n\nShe whined, her voice getting louder and higher pitched, until she made that same \"Ahhhh!\" groan, and she came for me. Rather than stop this time, I fucked her through it, punishing that pussy, ramming hard and deep. When she was finished, I slowed down to a nice easy steady stroke, releasing her hair.\n\nI pulled out of her a few seconds later, and rolled over onto my back. \"Ride me, beautiful. Make me come for you.\"\n\nShe moved slowly, her shaking leg stretching across my body. \"God, that was good,\" she told me, before she took my cock in her hand, and lowered herself onto my shaft. \"Oh, yeah,\" she moaned as she settled down. \n\nSheri climbed up next to me, her head on my shoulder. \"You like it this way?\" she asked softly.\n\nI laughed. \"I like it all ways, but that last bit took a little out of me. I needed a break.\"\n\nSandy was rocking back and forth on my cock, a little smile on her lips. \"You want some of this, Sher? It's good. Really good.\"\n\n\"Not quite yet. I'm enjoying this. Fuck his brains out, Sandy.\"\n\nSheri got up and knelt beside us, her hands caressing her cousin. \"This looks so amazing, watching you fuck him. I...I didn't know it would be this hot.\"\n\nSandy settled back on my cock with a wiggle, and started swiveling her hips. \"I know. I can't wait to see him on you. He's going to go crazy.\"\n\nSheri spanked Sandy's butt. \"We should have brought Buster. I wouldn't mind a turn on you myself.\"\n\nSandy laughed. \"Who says we didn't? Check the bottom drawer, left side.\"\n\nSheri hopped up and ran to the dresser while Sandy rode me gently, easily.\n\nSheri was laughing. \"When?\"\n\n\"When we were setting up your computer.\"\n\nI looked over and saw my girlfriend strapping some webbing around her waist, and when she turned around, she had a substantial rubber cock sticking out in front of her. \"Damn, we're going to tear you up, girl.\"\n\nI looked at it with a little trepidation. \"As long as that's only for you two,\" I said.\n\nSheri walked over, wiggling her hips, the artificial cock waving in lazy circles. \"What's the matter, lover? Afraid of a little backdoor action? I promise I'll be gentle.\"\n\nI looked up to see if she was joking. She had a teasing look on her face that made me more than a little nervous. \"We'll have to see about that,\" I said. \"Nothing I've ever done, or had any inclination toward doing. Nowhere near drunk enough to even give it a thought.\"\n\nShe laughed. \"Don't worry, baby. This is all for our little sex slave. Maybe a little for me, later, if she's especially good.\" She looked over at Sandy, \"Lube?\"\n\n\"Bedstand,\" she answered.\n\nSheri walked over to the side of the bed, opened a drawer, and pulled out one of the biggest bottles of lube I'd ever seen. It was clear and half-empty. She popped the top, and in a few moments had her 'cock' lubed up. She climbed on the bed behind her cousin. \n\n\"My turn.\"\n\nSandy lifted up and off my cock, then moaned as Sheri sank the dildo inside of her. She pounded at her cousin for a couple of minutes, then pulled out and guided my cock back inside. We took turns, only a minute or two each, and I honestly felt like I could fuck like that forever.\n\n\"She's getting close again,\" Sheri said.\n\nI hadn't noticed the signs, but a few seconds later Sandy was moaning sweetly, grunting on each stroke. I watched Sheri lean over for some more lube. \"Let's get this other hole ready. The little slut's begging for it.\"\n\nSandy gasped, and I felt her orgasm take over, while I stroked away inside of her. She groaned, and looked backward. \"I don't know, Sheri. That's pretty big for back there.\"\n\n\"You'll love it. I'll be gentle.\"\n\nSandy looked at me nervously, biting her lip. \"Should I stop her?\" I asked.\n\nShe shook her head. \"I...I'll be Ok. A little scary. Nothing that big back there before.\"\n\nHer eyebrows pinched in pain, and she hissed. \"Slowly!\"\n\nI stopped my movement, letting her get used to the new intruder. She lowered her head to my chest, with a moan. \"Jesus, that's huge.\"\n\nI could see Sheri now, moving back and forth slowly. \"I'm going in,\" she warned.\n\n\"Fuuuuuck,\" Sandy groaned.\n\n\"All of it, baby. I knew you could do it.\"\n\n\"Wait,\" she gasped. \"Let me get used to it.\"\n\nI felt myself hardening inside of her. I couldn't believe how exciting it was. This was something totally new to me. Hell, anything with the two of them was new to me. I guess I'd led a sheltered life.\n\n\"Ok,\" Sandy breathed. \"Easy now.\"\n\nI started moving again, pushing up into her pussy, and I could feel the pressure from above, each time that rubber cock entered her ass. The feeling was intense. I pushed all the way in, letting Sheri do the work, and it was like someone was masturbating me inside of her pussy, rubbing the bottom of my cock from bottom to top and back again.\n\nSandy was looking into my face, and she smiled. \"What's it like?\" \n\n\"Wild. I can feel it move inside you, rubbing against me.\" I leaned forward and kissed her lips. \"You like it?\"\n\nShe nodded. \"I love it. Once I got used to it. So fucking full. It's amazing. You feel huge, with her inside me.\"\n\nShe kissed me again. \"Fuck me, Steve. Own me.\"\n\nI started moving again, and Sheri was pounding away, hard. Sandy's head was beside mine. \"Shit, she's going to make me come,\" she gasped.\n\nI grabbed her hips, driving into her as hard as I could from that position, and I felt Sandy's fingers digging into my shoulders.\n\n\"You've almost got her,\" I told Sheri.\n\n\"I know. This is wild,\" she answered, breathing hard.\n\nI put my lips to Sandy's ear. \"Come for us, beautiful. Bring us together.\"\n\nShe whimpered, and started grunting rapidly. \"Fuck, fuck, fuck,\" she gasped, and then I was hanging on for dear life, as she screamed out, \"FUCK!\"\n\nSheri was laughing, smacking her ass. \"That's it. Come on my cock, you silly little whore.\"\n\nIt was all too much for me, and I didn't realize how close I was. I slammed my cock inside her, feeling the beginning of my own release. I squirted, backed out, and drove in again, emptying my balls inside of her silky warmth.\n\n\"Yeah!\" I growled into her ear, and I felt her trembling, her orgasm rolling over her in waves.\n\nShe collapsed on me, and a few moments later, Sheri was lying beside us. \"You don't think you're done, do you, my sexy little toy?\" she asked, running her fingers through Sandy's disheveled hair. \n\n\"Too much,\" Sandy gasped. \"Please, a break at least.\"\n\nSheri giggled, got up and returned with a chocolate covered strawberry, holding it to Sandy's lips. \"You were wonderful. Here, for energy.\"\n\nSandy smiled and took a bite from it, juices dripping down on my chest. She lowered her mouth and licked it up clean, while the rest of the strawberry was offered to me. I took a bite, all but the stem, and felt a few drops dribble down my chin. Sheri leaned over and licked it up. \"God, that was fun. This is going to be amazing, isn't it?\"\n\nSandy laughed. \"Easy for you to say. Wait until you're the cream in the cookie.\"\n\n\"Was it really that good?\" Sheri asked.\n\n\"Unbelievable. Like a whole night of sex, wrapped up in just a few minutes. Wiped me out.\"\n\n\"Really? Or can we play a little longer?\"\n\nSandy rolled off of me stretching. \"You're going to have to kick me out. This is too good to leave willingly.\"\n\nSheri crawled across me, her naked little body lying on mine, and she kissed her cousin. \"I'll never kick you out. Never.\"\n\nSandy gave her a hug. \"I know. I love you too.\"\n\nSheri sat up grinning. \"You made a mess. I expect you to clean it up.\" She grabbed Sandy's hair and started tugging her toward my waist.\n\nSandy whimpered a little, then her mouth settled in sucking and licking me clean. Sheri got off the bed, and headed for the bathroom. \"A little sanitation for our other cock. I expect him fresh as new when you're done, or I'm going to take it out on that sexy ass of yours.\"\n\nSandy got me clean, and well on my way to another play session before Sheri returned, her strap-on in hand. \"All better, but I think we can put this away for a while.\"\n\nShe climbed on the bed, inspecting the job. \"Not bad, I guess your ass is safe for a bit.\"\n\nSandy rolled over onto her back, and opened her legs. \"The cleaning's not done. I'm still messy. Help me out, gorgeous.\"\n\nSheri knelt between her legs, looking down. \"I...it's not too bad,\" she said softly.\n\n\"Same man, different lips,\" Sandy whispered. \"Love me?\"\n\nSheri stretched out, her fingers moving slowly. \"Gentle, Ok?\"\n\n\"I won't move a muscle,\" Sandy said. \"Please, I need it.\"\n\nSheri moved in, and I watched her face get closer. Her tongue reached out and brushed along the side of Sandy's pussy. Our guest gave a little moan, and I could no longer see the contact as Sheri's face settled in.\n\n\"So good,\" Sandy whispered. \"You're always so good, Sher.\"\n\nSheri spent a couple of minutes between Sandy's legs, then Sandy was pulling her up her body, kissing her, hugging her tightly. \"That was perfect. Thank you.\"\n\nSheri smiled. \"It was good. I could taste him and you.\"\n\n\"Not too bad?\" Sandy asked, nervously.\n\n\"No. Not at all. I...I liked it. A lot.\"\n\n\"Enough to do it some more?\"\n\nSheri didn't even answer. She went back down and had Sandy moaning in minutes. Sheri lifted her head, grinning. \"Naughty girl, you did that on purpose, didn't you?\"\n\n\"A little extra taste. Want me to squeeze out some more?\"\n\nSheri giggled. \"I'm going to get it myself.\"\n\nShe dove back in, her head moving from side to side, while Sandy moaned sweetly. \"Get it,\" she gasped. Her hands reached down, grabbing Sheri's head, and grinding against her mouth. I saw her body shaking in a small orgasm. \n\nShe relaxed, and jerked her hands back. \"Sorry,\" she whimpered.\n\nSheri sat up, and her mouth and chin were a wet mess. \"Don't be. That was perfect. I love when you come for me.\"\n\nI never did get in Sheri that night, although the girls gave me a wonderful dual blow-job, and Sandy got a nice sweet missionary fuck that Sheri cleaned up afterward. Off of both of us.\n\nSandy called her husband, letting him know she was going to spend the night, and giving him a little update, promising the full blow-by-blow later. I was amazed at how casually she discussed what she did, and the look of joy and love in her eyes as she chatted with her fianc\u00e9e. Sheri and I layed down beside her and started fondling her, making her beautiful body writhe. \"God, Robbie, they're touching me, touching me all over.\"\n\nWe only played with her gently, and I suckled on her nipple teasingly, while she spoke on the phone. When she was done, she pulled me up for a kiss. \"You two are so naughty. Teasing me like that.\"\n\nThe nervous Nellies insisted on checking my bandages before calling it a night. Apparently none the worse for wear, but still getting me a nice dose of sympathy. \n\nI slept between the two beauties, wondering what I'd ever done to deserve this new life of mine.\n\n* * *\n\nI woke in pain, with the booze and pain-killers worn off. My back was in agony, and I felt sore in places I didn't even know I had. The girls took care of me, even giving me a massage, and fixing my bandages which had worked themselves loose during the night. We didn't have any sex that morning, but we did have lots of cuddling and loving, and that was fine by me.\n\nRoom service delivered breakfast, and when it was done, Sandy begged off. She gave us both toe curling kisses. \"Tomorrow night?\" she asked.\n\n\"Open door,\" Sheri told her. \"Anytime. Right, handsome?\"\n\n\"I'm not going to complain.\"\n\nSheri giggled. \"I bet not. You have fun last night?\"\n\n\"Best ever. I can only wonder if my heart can take it, when I get all of you,\" I told her.\n\n\"Soon baby. Don't worry, I know CPR.\"\n\n* * *\n\nWe spent a relaxing day, going for a walk in the park, exploring the hotel and immediate environs, chatting on the phone with friends. We stopped by her house, and reassured her parents that she was doing fine. We stayed for an early dinner, and spent some time playing with Max. She showed me her room, which I'd only seen a little of over Skype.\n\n\"So this is where the magic happens,\" I teased.\n\nShe laughed. \"Where I lost my heart to the most wonderful man in the world.\"",
        "\"Who is it? I'll kill the bastard,\" I growled, taking her in my arms and swinging her around.\n\nShe kissed me, blushing. \"Do you really love me?\" she asked.\n\n\"More than words can say. With all my heart, Angel.\"\n\n\"Devil,\" she reminded me.\n\n\"Only in the bed,\" I told her. \"Speaking of, you really are a pretty wild thing, aren't you?\"\n\nShe giggled, walking around me, her hand dragging across my skin. \"Only for you, lover.\"\n\n\"And Sandy,\" I teased.\n\n\"Alright, only for the ones I love. You're first now, you understand? Think you can handle that?\"\n\n\"Patience. That's all I ask. I had no idea what I was getting myself into.\"\n\nShe giggled, her arms around my neck. \"All I ask is the same. You've been so patient with me all this time, in game and out. Think you can put up with me a little longer?\"\n\n\"I don't know,\" I teased. \"I guess I'll give you another 70, 80 years. But that's all. If you don't come around by then, I'm gonna start looking.\"\n\nShe stepped on my toes. \"You do, and I'll take my toys and go play somewhere else. Including Sandy.\"\n\n\"Alright, damn it. Ninety. Ninety years, that's my final offer.\"\n\nShe hugged me. \"No. Forever or nothing.\"\n\nI picked her up, hugging her tight. \"Fine. But I get to choose which side of the bed is mine.\"\n\n\"Of course! It's always the other side next to me.\"\n\n\"Damn it, girl. Leave me some pride. Do I get to at least name our kids?\"\n\nShe looked up at me, her eyes wide. \"Do...do you really want to have children with me?\"\n\n\"If at all possible. A house full.\"\n\n\"Really?\" she asked nervously.\n\nI drew her over to the chair, and sat her on my lap. \"Of course. I want to spend the rest of my life with you. Raise a family together. Is something wrong?\"\n\n\"I, I don't know if I can have kids. There was some concern after it happened.\" She looked on the verge of tears.\n\nI hugged her. \"Whatever we can do. If you can, great. If you can't and there's anything medical that can be done, we can afford it. If you can't carry, but your eggs are good, we can have a surrogate. If not, we can adopt. Whatever. Even if we can't have kids, you're mine, Sheri, no matter what.\"\n\nShe nodded, hugging me. \"I haven't thought about it much. I don't know why. I guess it never occurred to me I'd ever be with a man again. Be part of a real, normal family. Not for real.\"\n\n\"No hurry. You're young. One step at a time, Ok?\"\n\n\"One step at a time,\" she answered softly.\n\nSheri gave me a hug, and looked up grinning. \"Middle name.\"\n\n\"What?\"\n\n\"The middle name of our third child. You can choose that name.\"\n\n\"Are you always so rotten?\"\n\n\"Absolutely. Completely spoiled. Not my fault. You're going to have to get used to it. Blame Dad if you must.\"\n\nWe returned to the hotel late, and retired to the bedroom. No gaming at all for once. We got in bed together, and our kissing and cuddling evolved into a wonderful evening of oral sex. She was cautious, and nervous, but by midway through my second erection, she was playful and teasing. She gave me a hard time about my own skills, telling me that she'd have to get Sandy to give me lessons. I guess she saw that hurt a little, and she swarmed over me, begging forgiveness, and telling me she was teasing.\n\n\"No you're not, I saw what Sandy does to you,\" I told her.\n\nShe blushed. \"She knows me. She's been with me for years. It's different. I love what you do for me, I swear. Don't be angry or jealous, please! It would kill me. I'm sorry, I was just teasing.\"\n\n\"I'm not angry. Maybe a little jealous. Not of her, but of what she has with you. How well she knows you.\"\n\nShe kissed me softly. \"I know. Believe me. You don't think I'm not a little jealous over your posse? Your complete and total faith and trust in them? The way they hovered over you? Even their damn women are in love with you. They've had you all their lives. How do I compete with that?\"\n\nI gave her a squeeze. \"No competition. I love them. I'm in love with you. You are number one in my life.\"\n\nShe nodded. \"Ditto. I love Sandy. I probably always will. She and I are wonderful together. But my heart is yours. Totally. What I feel for her is a faint echo of my love for you. We have everything but the sex, and by the time I'm done with you, we'll be magical together. I know it.\"\n\nShe kissed me long and deep. \"I love you. You love me,\" she whispered. \"Truce on our others?\"\n\n\"Truce. Hell, what am I saying? It's not truce, I accept her in your life without limits. Whatever you want, Ok? But no way I'm bringing Jaime into our bed.\"\n\nShe laughed. \"Spoil sport. Did you see the size of his hands? Do you think it's true...\"\n\n\"Rotten girl. I'm telling you, Maria would eat you alive, and spit out the bones.\"\n\nShe sighed dramatically. \"Alright. This bed's too small for four anyway, and Sandy would kill me if I brought in any boy-toys and she wasn't invited.\"\n\nShe sat up and straddled me, leaning down and kissing my nose. \"You know I'm teasing, right? I don't want any man but you. Ever. The only man I'd even think of inviting into our bed would be Robert, and that would be for Sandy. So he could see me and her together. I know that turns him on something crazy. I'd never let him have me. I'm yours, bub. Only yours. Get used to it.\"\n\n\"Good. 'Cause I'm yours, too. Nobody else.\"\n\n\"Except Sandy,\" she reminded me.\n\n\"No. She's yours. Not mine. You want her with us, I'm happy to do it for you. But that's it.\"\n\nShe giggled. \"I know you like her. You can't fool me.\"\n\n\"I think she's great. I love her, like I love my own. For what she's done for you, and how she is with you. She's a beautiful, wonderful woman with a heart of gold. Sexy as hell. Wild in bed. As God is my witness, as long as I have you, she's an afterthought.\"\n\n\"She grows on you,\" Sheri teased.\n\nI laughed. \"What do you want from me? I love her, and love being with her. I'll never kick her out of our bed. But, damn it Sheri, I'd be happy with only you beside me for the rest of my life.\"\n\nShe wiggled on me, kissing my face. \"You haven't even had her ass yet. She's a wild fuck. You can tie her up and use her hard.\"\n\n\"Evil. You know you're absolutely evil. She's our toy. I get it. You're the love of my life. Keep it up, and I'll be tanning that cute little bottom of yours.\"\n\n\"Mmm, she pinks up so nicely. You can get her to come just by paddling her.\"\n\n\"Sheri...\"\n\nShe laughed, hugging me. \"God, you're so easy to tease. She's going to be married in a few months anyway. I don't think Robert will let her play nearly as much after. So you best get your fill. In a while you're going to be stuck with just me.\"\n\n\"That's all I could ever ask for.\"\n\nShe cuddled up to me, kissing my chest. \"You know what's funny, Steve?\"\n\n\"What?\" I asked sleepily.\n\n\"I believe you. Jeez, I'm going to have you so whipped. Worse than Jaime.\"\n\nI chuckled, and swatted her rear. \"Tell me about it.\"\n\n* * *\n\nI had a morning checkup at the hospital, and was given a passing grade, and reminded not to overdo it. Sheri and I took a long walk in the park, walking hand in hand like the new lovers we were, even if we weren't quite completely lovers.\n\nDan stopped by after lunch, and Sheri made herself scarce for a couple of hours while we did the work thing, including a conference call with the others. Too early to know much about our latest venture, but he was getting antsy and wanted me to get going and start researching new opportunities. He'd never been that pushy. I wondered if it was an effort to get me out of the game, and back in the real world.\n\nI told him I needed a few more days, and within the week I'd start looking around, reviewing some of the proposals we'd been receiving, and start the networking up again. He seemed alright with that. \n\n\"No gaming yesterday?\" he noted.\n\n\"No, a few hours this afternoon maybe.\"\n\n\"You and Sheri good?\" he asked.\n\n\"Perfect. Or almost. We're working out some things. I think this time it's for good. Third time's a charm, and all that.\"\n\nJaime cut in. \"Maria says if you let this one go, she's going to kick both our asses. You know how I hate when she does that.\"\n\nI laughed. \"Yeah. I imagine there'd be a line she'd have to get in when it came to kicking mine.\"\n\nDan jumped in. \"No shit. I call first dibs. Make me go through that beating for nothing. Hell, I'd get back in line twice. Steel-toed boots.\"\n\n\"Alright, tell me how you really feel,\" I laughed.\n\n\"Ok, I will,\" Dan said. \"Jump on that now. Claim her, and don't let anyone else even get their nose in the door. You're so hung up over her, if you lose her, it'll be 10 years of gaming before we ever get you out in public again. And the way she is over you? Fuck, dude, no way you're ever going to top that. I get to be best man, by the way.\"\n\nThe other guys all started yelling. \"Asshole!\" \"Douche-bag, we talked about that!\"\n\nThat was the end of the useful part of our meeting, and we got back to talking about important things, like soloing Diablo hardcore, and the new WoW expansion pack.\n\nDan left when the others bowed out, but invited himself over for dinner. Said he had some business to attend to. I told Sheri about the plans when she came home, during a little hardcore farming. She let me know that she'd already made plans with Sandy and Robert that we'd meet with them again. That spurred a short conversation about letting each other know what was going on, and ended in a cuddle-fest. I suggested Peter Luger's, craving their porterhouse. We went to Lombardi's, the renovated home of New York's first pizza. Truth be told, I liked several of the simple walk up pizzeria's better, blasphemy or not.\n\nI was feeling a little nervous about seeing Robert, but he was the same charming bastard. When the girls took off for the ladies room, he leaned over to me. \"It's cool. Really. I don't want you to feel weird about this. Whatever she needs right now. We're good?\"\n\nKind of surprised he'd even ask. \"That woman of yours is the best, you know. Damn, you're a lucky man. Heart of gold, easy to see why Sheri loves her so much.\"\n\nHe laughed. \"Ditto. Breaks my heart what Sheri went through. Believe me, I've heard endless hours of what she was before, what she went through, and how she was after. I was starting to think I'd never actually get to meet her in person. What you did for her, you deserve a fucking medal. I've never seen Sandy so happy. That makes me happy. I know you don't have a thing for her, it's obvious when they're both around. When Sheri's around, the rest of us are practically invisible. Makes it easy.\"\n\nDan spoke up. \"Alright, if the love-fest is over with, you guys want to tell me what the hell is going on?\"\n\nI laughed. \"Shut the fuck up, Dan. This has nothing to do with you, alright?\"\n\nHe put on a mask of disappointment. \"Hey! I fought for her too!\"\n\nRobert and I looked at each other and laughed. \"That you did,\" I told him. \"You're golden in her book. Now leave it.\"\n\nI turned back to Robert. \"You could help me with something. We're still looking for some good investments. Tech and Energy companies preferably. Maybe Medical. We prefer second round venture buy ins, not seed money. Don't need the risk/reward that entails. You catch wind of anything worthwhile, I'd love to hear about it. I could even use a good legal team to work with, if you know of one.\" I gave him a grin.\n\n\"Robertson, Samuels not working for you? They're good.\"\n\n\"I'd prefer something local. I'm thinking of sticking around here. Making it home base. Plus I'd prefer working with someone I actually liked.\"\n\n\"Damn, that narrows it down, doesn't it? Rumor is you can't stand lawyers,\" he said with a chuckle.\n\n\"Almost always true. I think I'm learning to make some exceptions.\"\n\n\"I'll keep my eye open. Finder's fee?\"\n\n\"For the right opportunity.\"\n\n\"What kind of numbers we talking?\"\n\n\"Between 10 and 40 preferably. We could go higher for the right deal.\"\n\nSandy leaned over and gave him a kiss on the cheek. \"What kind of deals are you boys working out? Nothing illegal or immoral I hope.\"\n\nHe grinned, while Sheri settled in between me and Dan. \"Maybe a little bit of both. You remember I am a lawyer, right?\"\n\n\"Oh, business? I was thinking something more along personal lines,\" she said. \"How droll. Talking about business, with two lovely ladies present.\"\n\nHe laughed. \"They weren't present, and the subject is benched. What would you lovely ladies like to talk about?\"\n\n\"Vacations. Cruise, all-inclusive, something lazy and decadent, with lots of down-time.\"\n\nI glance over at Sheri, who was trying to look innocent.\n\n\"Vacation?\" Robert chuckled. \"You've got a honeymoon in less than three months.\"\n\n\"That's a wonderful start!\" she said. \"I'm thinking summer, sunbathing, and as little clothing as possible.\"\n\nIt was a fun chat, and had me thinking about whether Sheri and I would be married by then. I wondered how much time she's need for a wedding. Damn, she was right. I was pussy-whipped already, and hadn't even gotten any of the pussy.\n\nWe split up after dinner, Dan and Robert going their own ways, and Sandy going home with us. She was laughing. \"You guys have to be gentle with me. I'm serious. I'm so sore now I can barely walk. Between you two the other night, and then how Robert was when I gave him all the details, I haven't been pounded like that, since, hell, since ever!\"\n\nShe stopped, and grabbed Sheri by the hands. \"Please? I'm serious. A little gentle, tonight?\"\n\nSheri hugged her. \"I think I'd like to make tonight about me. I'm going to need your help.\"\n\nSandy hugged her, \"It'll be perfect. It will. I know it. This is going to be ab-fab.\"\n\nI was seriously wondering what it cost to live like I was full-time. Doors opened. The elevator man knowing us, taking us straight to our floor. Limo service for the asking. The room immaculate. Anything we needed a phone call away. We were living large, and it was something I could get used to. \n\nI'd been thinking hard about the Sheri problem. I had an idea, that I thought we might fall back on if necessary. I wanted to see if we could make things work naturally first. I took Sandy to the side and told her my thoughts, and she seemed to like it. As a fall-back solution.\n\nWe went to our bedroom, and got undressed. It was so natural, to watch both girls strip down to nothing, and climb into my bed. Fucking amazing bodies, one small and curvy, the other long and slender. Both sexy as hell. Shit, I was a lucky guy.\n\nWe started out with the cuddling and kissing, this time with Sheri in the middle. We moved on to some sensual touching and I grinned as I shared her tits with Sandy, lifting my head for a kiss from her, before we went back after Sheri's perky little nipples. Sandy leaned over and playfully competed for a nipple, our tongues tangling. She lifted her eyes to mine, and the joy and happiness I saw there was heart-warming. \"You're the best,\" I whispered.\n\nShe looked a little surprised, then grabbed my head and kissed me hard. \"God, you're so damn lovable,\" she sighed.\n\nWe both went down on Sheri, and I demanded Sandy teach me some of her magic. She laughed, kissing me again. \"You're not jealous of me, are you?\"\n\n\"Damn skippy I am! And you're going to share your secrets, or any promises made about being gentle with you are out the door. I will tie you up and fuck the living daylights out of you if you don't share.\"\n\nShe giggled. \"That's a threat?\"\n\nI shrugged. \"Best I can come up with at the moment. I am in bed with two gorgeous naked women. My brain is only capable of so many thoughts right now.\"\n\n\"How about this? I teach you all I know about her, and next time we're together, you do exactly what you said, and then some.\"\n\n\"You've got a deal.\"\n\n\"Good. First thing, get out of this bed, go in the bathroom and give yourself the closest shave possible, then use her skin lotion. Your face is like sandpaper.\" She gave me a quick peck on the lips. \"Take your time, I'll only warm her up a little.\"\n\nBack in the bed, she made me open my mouth, and popped in a wintergreen lifesaver. \"Now this is cheating a little,\" she teased, giving me a little kiss on the lips. \"Mmmm, fresh. She'll notice. Not as much as those Altoids, but still a little advantage.\"\n\nThe rest was an education. I learned. I was taught little things, like indirect stimulation, inner vs. outer lips, fingering essentials, top and bottom, variety, pressure, teasing, blowing, sucking, licking. They were both getting into my training, and I had to take a turn on each of them, with the other giving me added guidance. I was worn out by the time I'd given them each two 'adequate' orgasms. Then they teased me by giving each other one, showing me what it could be like with practice and a little more tutelage.\n\nFuck. I had a ton of ground to makeup. They played each other like maestros. They must have read my mind, and mobbed me, hugs and kisses galore. \"It's not a competition baby,\" Sandy teased. \"You're wonderful, and there's things that you can do that leave us completely out.\"\n\nSheri nodded. \"Your strength, for one. Feeling your big hands holding me so firmly. The direct way you attack. All good.\"\n\nI was rewarded for my efforts by another dual blow-job. I really could get used to those. The visuals alone were mind-blowing. Sandy had nothing but praise for the progress that Sheri had made in only one evening. I delivered my praise physically, filling Sandy's mouth, with a little taste for Sheri at the end.\n\nAfterward, Sheri sat on my face, while Sandy put her talented mouth back to work, getting me ready for phase two. I put my newly learned skills to practice, warming up Sheri.\n\nWhen I was hard as steel, and I had Sheri moaning sweetly, Sandy decided it was time to put her to the test. I remained on my back, and Sheri nervously straddled me. She looked over at Sandy, \"Patience, Ok?\"\n\nSandy gave her a hug. \"I'm an observer. I won't even get involved. You'll be fine.\"\n\nShe wasn't. I didn't understand it, everything else was going to well, but I felt bad for her. I knew she wanted to, but as she pressed the head of my cock against her opening she started shaking, and I saw the tears in her eyes. I put my hands on her thighs, gently, for support, and she practically jumped off of me.\n\nShe sat quietly, curled up in a ball. \"I'm sorry. I know I can do this.\" She looked up at me. \"I love you. I do. I swear to God I do.\"\n\nI didn't reach for her, worried that I might upset her some way. \"I know, baby. There's no hurry. Whatever you are Ok with.\"\n\nShe sniffled. \"What if I'm never Ok?\" she whimpered. \"What if I'm broken?\"\n\nSandy went to her, hugging and rocking her. \"No, you're not broken. Look at how far you've come. That blow-job was amazing. We can do this. I know it. If not tonight, soon. Nobody's giving up here!\"\n\nSheri nodded. \"How about we try with me on the bottom?\"\n\n\"You want to try again? Now?\" Sandy asked.\n\nShe wiped her eyes and nodded.\n\nSandy fluffed the pillows, and laid my gamer girl back on the bed. We took a couple of minutes pampering and cuddling her, then Sandy moved between her legs. A couple of minutes later Sheri was obviously excited, and I took Sandy's place. I rubbed my cock up and down Sheri's slit, parting her lips, and she jerked back away from me for a second, then settled down.\n\n\"You Ok?\" I asked.\n\n\"Go ahead,\" she whispered anxiously.\n\nI pressed my cockhead into her opening, and felt her trembling. I was tempted to stop, and let her settle down, but thought maybe once I was in, she'd get over the worst of it. I pressed into her, feeling her tight opening give, watching the first couple of inches slide in.\n\n\"Stop,\" Sandy said, her hand pushing me away gently.\n\nI looked up, and saw the tears rolling down Sheri's face, her eyes clenched shut, teeth gritted.\n\nI pulled out, and climbed up the bed. Sheri's legs snapped shut behind me. \"I can do this,\" she whispered. \"I can.\"",
        "I held her in my arms, while Sandy soothed her. \"No, you're forcing it, baby. It has to be good. You need to be ready. Accept him. Welcome him inside you. Not suffer through it.\"\n\nSheri sobbed. \"Why?\" she moaned.\n\nGod, it hurt to hear her. So much pain, so much unsaid, with that simple heart-rending cry.\n\n\"Hush,\" Sandy whispered. \"We'll get through this. I promise, Ok? Me, Sheri. I promise. You know I'll never let you down. We're all in this together. You love each other like nobody's business. It's going to be alright. Better than alright.\"\n\nShe gave Sheri a long soft kiss. \"I'm going to let him fuck me a while. We're torturing him. I want you to relax, and when you feel like it, you can watch.\"\n\nSandy pushed me on my back, and straddled me. She gave me a grin. \"Plan B.\"\n\nPlan B was simple enough. We knew Sheri was a very visual person, a bit of an exhibitionist and voyeur. We'd play to that part of her.\n\nI nodded, and closed my eyes as she lowered herself onto my cock. She rode me gently, rocking back and forth easily. Sheri rolled onto her side, her head on my shoulder. \"It looks so easy. Why am I having so much trouble? I want this so bad, Steve. For us.\"\n\nI gave her a little kiss. \"Maybe that's part of it. You want it too much. It's too important to you. Relax. Enjoy what we have. Play along if you want, but only what you really want to do.\"\n\nShe nodded. \"It doesn't hurt, does it?\"\n\nSandy answered. \"No, sugar. Just the opposite. It doesn't hurt at all, unless I take him too deep at the beginning. I need to get used to it a little, because he does reach the back and that can be a bit uncomfortable.\" She giggled. \"Luckily, our little pussies seem to adapt. When you two were pounding all the way in last night, it was amazing. No pain or discomfort at all. It just takes a little time.\"\n\nShe rose up on her feet, and squatted over my cock, lifting and lowering herself, giving us the most incredible view. \"He's the perfect size, you know. Thick enough to feel great, without feeling all stretched out. Long enough to reach the deepest parts without poking a hole in the back. Fucking perfect cock,\" she gasped, thrusting down hard several times.\n\nShe dropped back on her knees. \"Get behind me. See what it's like from there. You can see everything. I wouldn't mind if you played with my bottom a little, just nothing crazy, Ok? It's really tender.\"\n\nSheri moved behind her, and Sandy winked at me, blowing me a kiss. \"Sexy, huh?\" she asked.\n\n\"God, Sandy, he looks like he's stretching you so wide,\" Sheri answered.\n\nSandy lifted her hips, giving me some room to work, and I thrust up into her, longer full strokes.\n\n\"Mmm, that feels great,\" Sandy purred.\n\n\"All of it fits?\"\n\n\"C'mon Sheri! He's no bigger than Buster. You know that fits pretty damn well. Both of us.\"\n\n\"He's thicker.\"\n\n\"A little. A wonderful, precious little. I love that extra little.\"\n\nI felt Sheri's hand on my cock, just below Sandy's entrance. Her fingers sliding against my shaft as I pushed upward. \"He's so hard.\"\n\n\"Yeah. Isn't that great? He gets like that for us. Hard like a rock.\"\n\nI gave her longer strokes, until she shifted, purposely letting me fall out.\n\n\"Oh, put it back in baby, I'm so empty! Put him back in me,\" Sandy whined.\n\nI felt Sheri's hand guide me back home, and I hammered at Sandy hard.\n\n\"That doesn't hurt? Hard like that?\" Sheri whispered.\n\n\"Fuck no,\" Sandy gasped. \"Perfect.\"\n\nI pulled back extra far, popping loose, and Sheri guided me back in without prompting.\n\n\"Oh yeah,\" Sandy murmured. \"That's great, when he sticks it back in. Feeling him open me up. Stretching me.\"\n\nI started trying to think of other things, distractions, not wanting to get too worked up yet. Not yet.\n\nSandy wiggled herself free of my cock, and held herself up too high for insertion. \"Taste me on him,\" she said. \"Suck my juices off his cock.\"\n\nSheri's mouth engulfed me, sucking sweetly. I felt her moving up and down. \"God, that's naughty,\" she said giggling. \n\nSandy laughed, \"I know, right? Put it back now, I'm not done with him.\"\n\nShe lowered her hips and Sheri guided me home for another minute of fucking before Sandy pulled off. \"Taste me, baby.\" She giggled a second later. \"No, off of him, silly.\"\n\nI felt Sheri's warm mouth again, and Sandy smiled at me. \"Time,\" she whispered softly, her face inches from mine.\n\nShe climbed off of me, while Sheri, sucked me, watching her friend. Sandy knelt next to her. \"I've got an idea, want to try it?\"\n\nSheri pulled free. \"What kind of idea?\"\n\n\"Naughty. Those are the best kinds. Keep him hard for me, I'll be right back.\"\n\nShe left us, and Sheri looked at me. \"You two are up to something, aren't you?\"\n\nI gave her my most innocent look. \"Me? She's the wild one. No, let me correct that. You're the wild one, but she's no Angel either.\"\n\nSheri grinned, and gave me a quick suck. \"Nothing bad, right?\"\n\n\"Of course not. Speak of the devil...\"\n\nSandy had a video camera and tablet in her hand. \"Come here honey, we're going to try something. You and me, hands and knees, side by side, Ok?\"\n\nSheri looked nervous, but let her best friend guide her into position. \"Hips nice and high,\" Sandy told her.\n\nIt was an amazing view. Those two asses lifted up in welcome for me. God, I hoped this worked.\n\nSandy held the tablet between them. \"Now watch him fuck me,\" she said.\n\nI held the camera up below my chin, and guided my cock into Sandy. She purred sweetly as my length slipped into her. \"Pretty amazing isn't it?\"\n\n\"He slips right in, doesn't he?\" Sheri chuckled.\n\n\"Oh yeah. God, it feels good. Way better than that cold rubber. He feels hot inside of me. Hot and hard.\"\n\nI gave her long slow strokes, while listening.\n\n\"Mmm. So good, Sheri. I want you to feel this. It's so damned good. Try it for me?\"\n\nSheri, tensed up a little. \"Now, like this?\"\n\n\"Yes. Watch the video with me. Don't think about it. Just feel his cock against you. Not even inside you, just against you. Can we do that?\"\n\nShe was quiet. \"Against me. Just the opening, right?\"\n\n\"Yeah. Only the opening. Can we?\"\n\nShe nodded. I backed away from Sandy who moved her leg, giving me some room. I straddled Sheri's legs, avoiding touching her at all. I aimed my cock at her opening, with the camera capturing the close-up view. \n\n\"Look at that,\" Sandy said. \"Hard and waiting. Watch it. Watch him.\"\n\nI moved forward, my cock slowly coming in contact with her. She flinched for a moment, then held still while I slid the head up and down across her lips.\n\n\"God, that looks so wild. Teasing, opening you up. One nudge and he'd be in you,\" Sandy whispered. \"I'm so jealous. You have the prettiest pussy in the world. Sweetest too.\"\n\n\"Mmmhmmm,\" Sheri hummed nervously.\n\nI moved up and down a couple more times, parting her lips. \n\n\"Look how wet you are, Sheri! You can see your juices on his cock.\"\n\nI pushed forward a hair, watching the head of my cock slowly disappear, her lips parting, then slide back out. Again. And again.\n\n\"Wow. Did you see that? How you stretched around him? That didn't hurt did it?\"\n\n\"No,\" she said, but I heard the quiver in her voice. Enough. I pulled back out and returned to Sandy. I teased her opening, just like I had with Sheri.\n\n\"Oh, that's so good,\" Sandy whispered. \"Opening me, teasing me. God I love it.\"\n\nI pushed the head in, then pulled it out a couple of times.\n\n\"More,\" she pleaded. \"Don't tease me, let me feel it.\"\n\n\"It's just like in me,\" Sheri whispered.\n\n\"I know. Exactly the same. He's driving me crazy.\"\n\nI slid inside her a couple of inches at a time, rocking back and forth getting a little deeper with each stroke, until I was all the way inside. \"Look at that,\" Sandy said. \"All of it. I'm taking all of that big fat cock.\"\n\nI stroked her, holding her hips and going deep. After a few dozen strokes I pulled out and she whimpered softly. \"Shit,\" she murmured. \"Your turn, ready? Just the head again, Ok?\"\n\n\"Ok,\" Sheri said.\n\nI went back to her, opening her exactly the same way, until the head was nudging in. She was holding perfectly still, but she didn't jerk away this time. A few more nudges, and the head was out of view. I paused, leaning my chest back, and zooming in on our connection.\n\n\"He's in you. Look! Can you believe it? How does it feel?\" Sandy asked.\n\n\"Good,\" Sheri whispered. \"It looks so nasty. All that big cock trying to get inside.\"\n\n\"A little more?\"\n\nSheri nodded. \"A little, that's all.\"\n\nI pulled out, and pressed back in a couple of times. On the third stroke, I continued pressing until about an inch was inside her. I stopped.\n\n\"God, he's fucking you,\" Sandy whispered. \"Does it hurt?\"\n\n\"No.\"\n\n\"Can I have him back?\" she asked.\n\n\"Just a little more, Ok?\" Sheri asked.\n\nMusic to my ears. I back out a bit, keeping the head inside her, then pushed forward just that inch. In and out, trying to think of gameplay, getting a little too worked up. I pushed a little extra, and saw another couple of inches enter her. Almost half my length. I pulled back and heard Sandy giggle. \"Look at that. How your tight little pussy clings to him. It doesn't want to let go.\"\n\nSheri chuckled. \"Naughty kitty. He said he was going to pet it.\"\n\n\"Very naughty. That's the extra thickness. Not bad, huh?\"\n\n\"No, feels good,\" she whispered.\n\nShe whimpered when I pulled out of her, and went back to Sandy.\n\n\"Goody. My turn. You were hogging all the cock, rotten thing.\"\n\nI slid into Sandy, going deep on the first stroke. Playing at her opening was too much for my sensitive head. Nice easy strokes inside her were better to keep me calm.\n\nI looked down at the girls and watched Sheri nudge her friend with my shoulder. \"I wasn't hogging. You had him a lot more than me, and he is my boyfriend.\"\n\n\"Let me have him just a little bit, sweetie? He feels so good in me.\"\n\n\"Just a little,\" Sheri whispered, her eyes watching the tablet where my cock was sliding into her friend. \"Only because I love you so much.\"\n\n\"Oh,\" Sandy moaned, pushing back against me. \"I love you too. Love you so much, baby.\"\n\nSheri watched a few more seconds. \"My turn?\"\n\n\"A little more?\" Sandy whined.\n\n\"Who's hogging him now?\" Sheri whispered.\n\n\"But he's yours forever,\" Sandy said.\n\n\"My turn!\"\n\nI pulled out of Sandy, wrenching another sweet whimper from her, then returned to Sheri. I held steady for a moment, letting the camera stabilize, then pushed into her. Just the head to start with, then with a series of slow gentle nudges I had half my length inside of her.\n\n\"Halfway,\" Sandy said. \"More?\"\n\n\"A little,\" Sheri said softly.\n\nI pulled back and pressed forward, enough of me inside her to start stroking. Back and forth I went, inching more inside until there was only a little light between us. She felt amazing. Definitely tighter than Sandy. Almost too tight. \n\n\"God, girl. You're going to take all of it, aren't you?\" Sandy said.\n\nSheri nodded. \"All the way this time.\"\n\n\"You sure? That's a lot of cock. I can take it if you want,\" Sandy teased.\n\n\"My turn,\" Sheri whispered, and I felt her push back against me, until her ass cheeks pressed against my hips.\n\nI couldn't help myself, and I let my free hand stray down to her back, caressing her. She flinched under my touch, then pulled forward and pressed back against me, hard. I felt the pressure inside her, where I bottomed out. She gasped, then started rocking back and forth on my cock.\n\nHer eyes were locked on the tablet. \"See. I can take all of it too. All of it.\" She pulled away, exposing all of my cock, then impaled herself, grunting sweetly.\n\n\"How is it?\" Sandy asked.\n\n\"Fucking great,\" Sheri moaned sliding forward and driving back on my cock. \"So fucking much better than Buster.\"\n\n\"My turn?\" Sandy asked.\n\n\"God, Sandy! I just got him. Give me a little while, Ok?\" She was looking down at the tablet. \"Look at that, will you? He's not doing me, I'm doing him.\"\n\nSandy chuckled. \"Of course. You always were the wild one.\"\n\nSheri giggled. \"Is Robert like this?\"\n\n\"Almost the same length. Not as thick. That thickness, Jesus, that feels sweet. You've got a keeper.\"\n\n\"I know, right?\" she chuckled. \"All that, and a nice fat cock too.\"\n\n\"My turn?\" Sandy pleaded. \"Please?\"\n\n\"Fine. Meanie.\"\n\nI moved the camera down, and captured the image of me pulling out of her, her pussy closing slowly after I pulled out.\n\n\"Wow,\" Sandy whispered. \"You really didn't want to give him up. I thought I could see your tonsils there for a second.\"\n\n\"Oh, like you're any better?\" She looked over her shoulder at me. \"I want a good shot of her gaping for you afterward.\"\n\nI laughed and drove my cock into Sandy, making her grunt. \"Shit,\" she moaned. \"I thought you guys were going to be gentle with me.\"\n\nI grabbed her hips and pounded her for a while. \"Opening you up, sweetness,\" I teased.\n\nSheri giggled. \"Give it to her. Pound the greedy slut.\"\n\nI did, fucking her hard, making her moan for me. I brought the camera down and pulled out quickly. Her opening was slow to close, a quarter sized black opening staying visible for a few seconds, before slowly shrinking away. I grabbed her ass and pulled her cheek to the side, her opening widening again, until I released her.\n\n\"See, slut? You're pussy's desperate for that big cock. Worse than mine,\" Sheri teased.\n\n\"He went easy on you,\" Sandy whined. \"I couldn't help it, he banged the hell out of me.\"\n\nI moved behind Sheri, pushing in slowly.\n\n\"Like her,\" Sheri said.\n\nI grabbed her hip with my free hand, feeling a little tremble, then started fucking her harder. Long deep strokes. After only a few, I knew I was in trouble.\n\n\"I can't,\" I warned her. \"If I fuck you like her, I'm going to come. I can't hold back when I'm inside you.\"\n\nShe looked over at her friend, smirking. She gave her hips a torturous wiggle. \"Do it then. Fuck me hard and come for me.\"\n\nI didn't hold back, pounding into her, and I heard her first little moan. It was driving me crazy. I would love to make her come on my cock, but there wasn't a chance in hell. I had to come. I was holding back on every stroke, but it was a lost cause.\n\n\"Fuck,\" I groaned, slamming my cock into her with long full strokes. I looked down and saw her head resting on the pillow, her eyes closed, the tablet abandoned.\n\nI drove myself in to the hilt, and let go, flooding her insides. She groaned, and I gave a series of short strokes, pumping out all I could. Sandy sat up and took the camera from me, moving back and capturing a picture of the both of us.\n\n\"Damn, you two are hot,\" she chuckled.\n\nI slid my hands down Sheri's back, all the way to her shoulders. I held her and drove my hips against her, trying to get just a little deeper. I leaned down and kissed her shoulder. \"I love you so much,\" I told her.\n\nShe arched her back, pushing against me. \"Mmmm, I can tell.\"\n\nI pulled out of her, and laid down next to her. \"Damn that was incredible,\" I told her.\n\nShe laid on her side, looking at me. \"The both of us? Every man's fantasy?\"\n\n\"The finish,\" I answered. \"Coming inside you. Amazing.\"\n\nShe smacked me jokingly. \"Bullshit. Come on. Two hotties? Taking turns on them? That had to be epic.\"\n\nI lost track of my answer when Sandy's mouth slid over my cock. \"I'm not going to lie. That was pretty amazing. But getting to fuck the love of my life for the first time? Unbelievable.\"\n\n\"Am I? The love of your life?\"\n\n\"Stop fishing for compliments, rotten thing.\"\n\nShe giggled, rolling over onto her back, and opening her legs. \"You know you love me. Don't be afraid to say it.\"\n\nI eased my arm under her head, and she wiggled onto my shoulder. \"I LOVE THIS GIRL!\" I shouted. \"Happy? We're probably going to get complaints.\"\n\n\"If we didn't get complaints from our little screamer two night ago, nobody's going to whine about a little love shout.\"\n\nSandy abandoned my cock, and shifted over between Sheri's legs.\n\n\"Mmmm. See why I want to keep her? Isn't she the best?\"\n\n\"Best friend ever. Better than we deserve.\"\n\n\"No shit. But I can make her come really good. That should be worth something.\"\n\nSandy poked her head up. \"Nice cock, too. You keep me around, you don't get to hog all the cock now, bitch.\"\n\nSheri laughed, grabbing her friend's head, and pushing it back between her legs. \"Don't worry, slut slave. You'll be getting plenty of cock. I'd never make you do without. You know that.\"\n\nI scooted closer, and kissed Sheri softly. She smiled, her eyes glistening. \"We did it, didn't we?\"\n\nI chuckled. \"Oh yeah. We definitely did it. You're alright?\"\n\nShe nodded. \"Better than alright. I was getting into it there, at the end. The start was a little scary. But the little bitch was making me so jealous, watching you in her, when you should be in me.\"\n\nSandy climbed up from where she'd been, taking the other side of Sheri. \"You always amaze me, girl. Always. Can you believe where we are now? Compared to just a few months ago?\"\n\n\"It's him, you know. It couldn't be anyone but him.\"\n\n\"No shit. If anyone should be jealous, it's me. He's stealing my baby, and you get the jackpot.\"\n\n\"You have Robert,\" Sheri whispered, pulling Sandy's lips down for a kiss.\n\nSandy grinned. \"Yeah, I do. Wouldn't trade that one for anything. Not even your White Knight. God, I love that man.\"\n\nSheri giggled. \"We're both pretty lucky, aren't we?\"\n\n\"Hit the boyfriend Lotto. Home-run. Luckiest girls in the city.\"\n\nI laughed. \"Enough, you silly girls. Robert and I both know the truth. We're the lucky ones. You two could have your choice of any man in the state. No way we're deserving.\"\n\nSandy surprised me by climbing on top of me, straddling my hips and pushing my shoulders down roughly. \"You shut the fuck up! Don't you EVER say you don't deserve us. NEVER!\"\n\nI was stunned by her reaction. She dropped down and hugged me, squeezing so tightly I thought she'd tear my stitches. \"Don't, Ok? I can't stand it. You don't know. You have no idea what it was like. How much you've done. So don't ever, ever say you don't deserve us.\"\n\nI held her, stroking her back softly. Kissing the side of her pretty face. \"Shhh,\" I whispered, as she cried into my shoulder. \"Don't cry, please. You're breaking my heart, Angel.\"\n\nSheri had snuggled in closer, and her hand was caressing her best friend, soothingly.\n\n\"You don't know,\" Sandy sobbed. \"You weren't there. You brought her back. I didn't think we'd ever get her back. Two fucking years I tried everything. God, I love her so much, and there was nothing I could do, nothing any of us could do.\" She lifted her head and held my face in her hands. \"You did it. Impossible, but you didn't care, you did it anyway. Even tonight, you knew. You just knew. I...I love you for that. Fuck, I don't mind saying it. I love you.\"\n\nI caressed her soft skin, kissing her lips softly. \"I love you too. I've told her.\" I glanced over to where Sheri was watching us, inches away, and saw her eyes shining. \"What you've done for her, what you are to her. Even now, how you're fighting for us. You're the best, Sandy. Absolute best woman I've ever known. I love you to death.\"\n\nShe sniffled, smiling. \"No, I'm not. I'm not even a very nice person. I'm selfish, and rude, and mean.\"\n\nI smacked her bare bottom. \"Don't. I know your heart. Nobody who can love like you is selfish.\" I kissed her again, more passionately, feeling the response below my waist. \"I need to be in you now,\" I whispered.\n\nShe smiled, and reached between us, guiding me home. She pushed back against me, until I was completely seated. \"I guess you do like me a little, don't you?\"\n\nI laughed, and turned to Sheri. \"You're right. She does grow on you.\"\n\nSandy gave a wiggle of her hips, and giggled. \"And you grow in me. I like that.\"\n\nI sighed, feeling her hips grind against me. \"God, I'm so spoiled.\"",
        "Sandy laughed, rising up to a sitting position. \"Nobody deserves it more.\" She turned to Sheri. \"Share the ride?\"\n\nSheri looked nervous. \"You think I can?\"\n\n\"Yeah, but if you can't, no big deal. We're going to get there. We know that now, right?\" She climbed off of me, and Sheri straddled my waist. Sandy turned around and sat on my chest, that sweet perfect ass of hers inches from my face. \"Look at me,\" she told Sheri. \"Don't even think about it. Let him in, and look at me, baby.\"\n\nSandy reached down and held my cock, wiggling it in place, until I felt the head settle home. \"Let me fill you, beautiful,\" Sandy whispered and Sheri slowly lowered herself down.\n\nWhen she was completely filled, Sandy hugged her. \"I'm so happy right now. I can't tell you how good this makes me feel.\"\n\nSheri giggled, and the sound was wonderful. \"Makes me feel pretty good to.\"\n\nSandy chuckled. \"I bet.\" She gave Sheri a short little kiss. \"I'm going to get out of your way now.\"\n\n\"No!\" Sheri whispered. \"Not yet. Stay with me, like this. I want to feel your arms around me a little longer, please?\"\n\nSandy nodded, hugging her, rocking with her, telling her how wonderful she was, how beautiful, how sexy. She giggled. \"Robert would have a heart attack seeing this.\" She stroked Sheri's hair. \"Someday, right? You'll let him see us together? Hold me while he fucks me?\"\n\nSheri nodded. \"Of course. I'd do anything for you.\"\n\nSandy pulled away slowly. \"I want to see you two together, alright? I'm right here.\"\n\nShe climbed off of me, laying beside me, head on my shoulder. \"Isn't she beautiful?\"\n\n\"Yeah, but I'm prejudiced. Most beautiful girl in the world. And she's mine.\"\n\nSandy giggled, and gave me a pinch. \"Ours. I won't even insist on 50/50, but don't you dare lock me out.\"\n\n\"Shame on you to even suggest that. Ours. But I get first dibs on all the good stuff.\"\n\nI looked up at Sheri, and opened my arms to her, beckoning. She laid down on my chest, and I held her. \"Are we one screwed up relationship, or what?\"\n\nShe giggled. \"You don't like it?\"\n\n\"I love it. I love you. But no way is this normal. I'm lying here telling your lover I love her, and arguing over who you belong to. Talking about her fianc\u00e9e and you two together.\"\n\n\"Does that bother you?\" she asked nervously.\n\n\"No. I mean, it probably should. I've not had the best track record with women, you know. Two cheaters who left me. I'm still a little insecure I guess.\"\n\n\"If you don't want me to, we won't do it. He's not going to get me. He'll only be with her.\"\n\n\"No. He should get to see you two together. It's amazing. She's going to be his wife. I want you to be with them, however you're comfortable. Just remember that you're mine, Ok?\"\n\nShe sighed, pressing back against me as my cock continued its short, redundant journey inside of her. Her lips brushed my neck. \"I love this, here, now, with the two of you. I can't believe how wonderful it feels, you inside me, like this.\"\n\nSheri lifted her head, looking into my eyes. \"Can we stay like this? Love me gently just like this, until you fill me again? Please?\"\n\nI chuckled, hugging her. \"Forever, if you want.\"\n\nAfter that, there wasn't a lot of kissing, or talking. I held her, making love endlessly. She was completely relaxed, and I knew that the excitement level for her was nothing compared to much of what she'd done, but it was perfect, nonetheless. Joined and together.\n\nThe world was narrowed to the two of us. Eyes closed, feeling her weight on me, her body mine, my cock inside of her.\n\n\"I love you,\" she whispered.\n\n\"Love you to.\"\n\nIt was wonderful, but nothing lasts forever. I was ready for her. I thrust a little harder, deeper, hands on her delightful ass cheeks. \"Coming for you,\" I whispered.\n\nShe whimpered softly, pushing back against me for a few more strokes until I pushed in to the limit and yielded.\n\nShe hugged me, and I could feel her body shaking. She was crying softly.\n\n\"What's wrong, baby?\" I asked.\n\n\"Nothing. It's perfect. I never thought it could be like this. So perfect. Thank you,\" she whispered, brushing her tears away.\n\nI chuckled. \"You've got to stop crying. I thought maybe I'd hurt you.\"\n\nShe laughed, her tight little pussy pushing my wilting cock out. \"Get used to it. I'm a girl. I cry. It's not a bad thing.\"\n\nSandy bounced onto the bed next to us, grinning. \"Man, that was great. I guess my job is done here. Unless you want me to stay. I don't want to be a third wheel.\"\n\nSheri giggled. \"Your job is definitely not done. You've got some serious cleaning up to do. And there's no way you're leaving this bed tonight, even if I have to tie you down to keep you here.\"\n\nSandy pouted. \"All I get is clean up duty? Where's the love, Sher?\"\n\n\"Clean us up, and I'll show you the love. Besides, when he wakes up hard, who's going to take care of him? My poor kitty is already complaining about the beating she's taken. She's not used to this. You're going to have to deal with him in the morning.\"\n\nShe did. Twice. Sheri got clean up duties. I don't know what they had against a warm washcloth. That had always worked for me in the past, but I wasn't about to complain. \n\nHell of a way to start the day.\n\n* * *\n\nIt wasn't perfect after that. We still had issues. A couple of times she had to get on the phone with Sandy, and talk things out, before she could calm down enough for sex. Sandy came over at least a couple of times a week. We kept the suite for almost a full month, until I found a nice apartment for us. \n\nI had a surprise for her. When we moved out of the hotel and into our apartment, I stopped her in front of the door. Her eyes got big as I dropped to one knee.\n\n\"Make me the happiest man in the world, Sheri? Say you'll marry me. Let me take care of you forever. Please? I love you, and don't want to live without you.\"\n\nI opened the box and held it out to her. I'd manage to finagle a ring shopping trip with her mother and Sandy. They picked out the setting, a simple solitaire, round cut. Less than three carats, nothing ostentatious. I would have gone with something fancier, diamonds on the sides, but I went with their advice. Not cheap, but considerably less than the cost of a month in the hotel.\n\nSheri dropped to her knees, hugging my neck, tearing up. \"Forever. I swear. Forever and ever.\"\n\nI put the ring on her hand, and she was crying hard. I lifted her in my arms, and opened the door.\n\nThe room held about twenty of our closest friends and family. All my gang, her parents, Sandy and Robert of course. About a dozen of her long time friends. She was mortified at first, to be caught crying, but was soon running around showing off her ring. It was a wonderful moment, to see her like that. Happy, at ease with everyone, men and women alike. Glowing. \n\nDan laughed. \"You just can't take your eyes off her, can you? Sometimes I wish I knew what that was like.\"\n\n\"Giving up your tomcatting days?\" I teased.\n\n\"Hell no. Not 'til I find one like yours. I don't mind the search.\"\n\n\"Speaking of the search, how's the other one going?\"\n\nHe looked around cautiously. \"Not much progress. It's getting kind of expensive. You sure you want to keep going?\"\n\n\"Every penny I have, if needed.\"\n\nHe chuckled. \"We're not talking that kind of expensive. We'll stay on it. I'll let you know if we have any progress.\"\n\nThree nights later, I was staying up alone, drinking heavily. She was with them. I knew I said it would be Ok, but my stomach thought otherwise. It was unfair, I know. Robert had been so good about everything. I guess I'm just not built the same. It was eating me up. The phone rang several times, but it was never her, and I didn't pick up. I fell asleep on the couch, watching some damn 50's black-and-white gangster movie.\n\nI woke to her holding me. I reached around her and hugged her tight. \"You look terrible,\" she said softly. \"Did it upset you that much? He barely even touched me, nothing more than a friendly hug or caress. I swear.\"\n\n\"I'm sorry,\" I whispered. \"I know it's not fair, but I hated it. Not knowing. I trust you, I trust both of them, but I couldn't stop wondering.\"\n\n\"Shh. It's Ok. It's done. He was ecstatic. Sandy was so happy it almost hurt. You did a kind and wonderful thing, but we never have to do it again.\"\n\n\"They don't want to?\" I asked.\n\nShe giggled. \"Of course they want to. I don't. Not without you. Never again without you. I loved being there for her, but I didn't like it. Being a sideshow. I thought I'd like it better. I missed you every damn minute of it.\"\n\n\"I don't want to be selfish,\" I told her.\n\n\"You're not. Robert's different. He likes to hear about it. He gets off on it. Sandy loves sharing and teasing him. It works for them, but they're not us. I could never do what she does, and we both know you're nothing like him. Not in that way. It's alright.\"\n\n\"Were you naked?\"\n\nShe nodded. \"As a baby. He got an eyeful. I got her off for him at least half-a-dozen times, then he fucked the shit out of her for a good thirty minutes or more. I...I couldn't go down on her after that. I think I disappointed them both a little. I just couldn't. She got me off a couple of times, barely, but it really wasn't about me. It was all about Sandy.\"\n\n\"She was happy?\"\n\n\"Delirious. They both were. You did a good thing. We did a good thing.\"\n\nI nodded. \"That's what matters most. I...I can bear it, I guess, if it's that important to them. I understand if you ever want to do it again.\"\n\n\"No. Not a fucking chance in hell. Maybe if you're there too. I could deal with the four of us, but not without you. Don't even ask me to.\"\n\n\"I won't. I'm selfish. I want you for me, and me alone.\"\n\n\"And Sandy,\" she teased.\n\n\"Ok. Sandy too. Sharing you with her is different, you know?\"\n\n\"Of course. We all love each other. I don't love Robert like that. I know you don't.\"\n\nShe hasn't done that again. Not the three of them.\n\n* * *\n\nIt was four months of bliss before we got the first nibble. Dan kept me updated, while progress proceeded on the first investment that Robert had located. We were at dinner, the four of us, Sandy & Robert, still newlyweds, and Sheri and me. I received the text from Dan. \"Target acquired. CP Southeast corner. 15 minutes.\"\n\nI tried to act calmly, but gave my dinner companions my apologies. \"Urgent meeting,\" I explained. \"Can I impose on you to give Sheri a ride home?\" \n\nSheri was confused. \"Urgent meeting? You never have urgent meetings,\" she said.\n\n\"Rarely. I can't miss this one. I really have to run. I'm sorry. I'll see you tonight.\"\n\nI grabbed a cab and was dropped at the Ritz Carlton a couple of blocks away, making my way to the rendezvous from inside the park. The Grand Army Plaza, with all the horse and carriages begging for tourists was a great place for anonymity. The plain grey Ford pulled up and I hopped in the back. It was dusk, and the light was fading.\n\n\"Twenty minutes ago,\" Mark said. \"Dan is with him, Jaime's on his way. Our resources have left the building.\"\n\nWe took the Brooklyn Bridge and headed south to the Port Authority. As we drove up to one in a long line of identical warehouses, the metal garage door opened, and we pulled inside quickly. It lowered behind us, before the lights came on. Mark walked with me to the door leading to a stairwell. Dan was standing at the base of the stairs. \"No information yet. We really haven't tried so far. Confirmed ID. Definitely one of the four.\"\n\nA red light started blinking, followed by a soft beeping. I could hear the motor for the garage door operating above. A few seconds later, Jaime came walking down the stairs. He looked like I felt.\n\nFunny how the women thought he was a big cuddly teddy bear. Grizzly was more like it. Dan moved in front of him and was almost bowled over as Jaime walked through him as if he didn't exist.\n\n\"Don't kill him...\" Mark started speaking rapidly. \"We need information.\"\n\nJaime walked up to the guy, and slapped him on the side of the head hard enough to lift the guy and his chair off the ground, toppling him sideways. \"I want him when you're done,\" he growled.\n\nDan had hold of one massive arm. \"That's not your call,\" he said calmly. It's up to Steve.\"\n\nIt was not a pretty scene. Nothing scientific or calculated. Mark worked on the guy for a couple of hours, until we were certain we had all the information we could get out of the bastard. None of us were professionals in this line of work, but I believe we did an adequate job as motivated amateurs.\n\nDan was carefully taking notes, asking questions, repeating them in different ways, going over previous details, until he was satisfied. \"Let Jaime have him,\" he finally said. He turned and walked up the stairs. Mark picked up his tools and followed suit. \n\nI stood beside Jaime, seeing the veins bulge on his temple. I almost felt bad for the guy. After over three years, I'm sure he thought he'd gotten away with it. Just a little fun, right?\n\n\"Go ahead,\" I told Jaime.\n\nWe weren't wearing masks or trying to disguise ourselves. This piece of filth would never identify us to anyone. Not in his short lifetime.\n\nI knew Jaime was dangerous. He had a temper that had gotten him in serious trouble before. Getting him out of the trouble, once a long time ago, was how our friendship was originally born. What I saw scared me. For well over an hour Jaime 'tended' to our guest. He didn't talk to him, didn't explain, didn't threaten. No hope for the future, for escape, for redemption. Not for this piece of shit. He didn't use anything but his own hands, knees, elbows and feet. He must have broken half the bones in the guys body, methodically snapping his ribs one at a time with his boots. I refuse to describe what he did below the waist. \n\nThe guy was still alive, somehow, when Jaime moved the chair out of the way, and centered his victim in the large plastic sheet. He looked over at me, and even though I was feeling nauseous, I had to add my own signature to the effort. I unzipped and pissed on the fucker, in his face, taking my time, shaking off the last few drops.\n\nJaime folded the ends of the plastic in, and rolled it up. If he was still alive, it wouldn't be for long. Suffocation was too good for him anyway. He took a roll of duct tape off the table and tossed it to me. I strapped the plastic closed, while he held it off the ground. He delivered one last massive kick, and turned away. We walked up the stairs, and he sighed. \"I feel better, how about you, Ace?\"\n\n\"Twenty percent or so,\" I told him.\n\nHe laughed. \"Yeah, that's about right. It's a start.\"\n\n* * *\n\nI picked up flowers on the way home. I thought I'd be in deep shit for my abrupt departure, but I didn't expect the reception I got. Sheri flew into my arms, making me drop the flowers to catch her.\n\n\"I was so worried for you. You've been gone for hours. I couldn't get hold of you.\"\n\nI hugged her, my precious gamer girl, my wife-to-be. I didn't say anything, just held her, until the tears stopped flowing. What she'd gone through. How close I'd come to losing her altogether before I even had a chance to meet her. How she'd suffered.\n\n\"What's wrong?\" she asked.\n\n\"I love you, Sheri. More than anything.\"\n\nShe clung to me. \"Do you want to tell me what this is all about?\"\n\n\"No. I'm not going to lie to you, but I'm asking you to stay out of this. Please.\"\n\n\"I'm your wife. Your life partner now. You shouldn't be keeping secrets from me,\" she said.\n\nI picked her up in my arms and sat down in the living room, with her on my lap. \"Please. I can't talk about this.\"\n\n\"The wives are upset. Something bad's happening, isn't it? We're not in trouble are we? Maria's frantic.\"\n\n\"No. It's something we have to do. With luck it'll all be over soon, alright? I don't ask for much do I? Let this one go.\"\n\nShe stared into my eyes, and slowly nodded. \"Someday.\"\n\n\"Maybe. I don't know.\"\n\nShe hugged me. \"Take me to bed, Steve. I'm scared. I need you close.\"\n\nI didn't tell her that I hoped in the near future, she'd never have to be scared again.\n\n* * *\n\nFive more weeks. Cost us well over a million dollars in all. Dan was funneling our company funds through two offshore accounts. I had told him to use my money, but he insisted on using the business, so everybody was paying in, almost $200K a piece for them. Angela had a cow, but Mark laid down the law, which he so rarely did, and she let it go as well. There was stress at the home front, with the impromptu meetings and hush-hush discussions.\n\nThe third one gave me nightmares. He was the worst of the perpetrators, and Jaime wanted vengeance in kind. \"You like forcing sticks and bottles up inside little girls, you piece of shit? Let's see how you like it?\"\n\nHe didn't, and I was certain his screams would stick with me for the rest of my life. Jaime was careful with him, not wanting him to pass out too early. The bastard suffered for hours, until one of the bottles broke. That didn't stop Jaime. The fucker's not suffering now.\n\nA lucky break found the evil son-of-a-bitch who had taken advantage of her after she'd made her escape. We thought that was a lost cause, but we had a huge reward out, and the idiot had to boast. He was in prison, behind bars. That actually made it easier. Dan told me it cost less than $20k. Only an extra couple of grand to have \"Child Raper\" tattooed across his forehead. That scumbag suffers every day, reminded of what he did each time. He's only in for three years, but he'll never walk out alive. Never hurt anyone again.\n\nThe four of us met for a beer when it was all over. We didn't talk about it, but we silently toasted each other. Dan was in a quiet mood, and ordered a round of shots. He lifted his. \"To CherryBomb.\"\n\nWe drank to my fianc\u00e9e, and agreed never to mention the subject again. Five scumbags who'd nearly destroyed one young girl's life, would never harm anyone again. I had no sympathy for them, none. I didn't know if they left family behind, if they'd changed their lives for the better, if they regretted what they'd done. I didn't care. They got what they deserved.\n\nTime to move on.\n\n* * *\n\nIt was only a week later, when I found out that someone had let the cat out of the bag. I knew it wasn't me.\n\nWe were visiting Sheri's family. Her father and Sheri had gone out to pick up dinner. I was sitting in the living room, when Carol walked in, took my drink from me, and sat in my lap, shocking the hell out of me.\n\nShe put her arms around my neck, and kissed me on the cheek. She hugged me closely. \"Thank you,\" she said softly.\n\nI was confused, and started to talk, but she put her finger over my mouth. \"Shh. I don't want to know. It was a foolish, dangerous thing, but thank you. I won't mention it again.\"\n\nMy heart was racing, and I wondered how much had gotten out, and who knew. She could only be talking about our 'equalizing'. We didn't consider it revenge. We considered it balance.\n\nSheri acted like nothing had happen, but she was nervous that night, like she hadn't been in months. I held her, until we both fell asleep. I knew I'd have to call the guys and see if we needed any kind of damage control.\n\nWhen I woke Sandy was in bed with us. I had no idea when that happened. She was lying there facing me, spooning Sheri. When she saw I was awake, she gave a nod toward the bedroom door, and followed me out to the family room.\n\n\"She had a bad night,\" Sandy said softly. She took me by the hand and sat me on the couch climbing in my lap and holding me. \"We know, Steve. The wives, me and Carol. Not Robert. Not her father. Just us. That's all it will ever be.\"\n\n\"I had to do it,\" I tried to explain.\n\nShe had tears in her eyes and hugged me tight. \"I know. I don't know exactly what you did, none of us do. We don't want to know. All that matters is that five of the dregs of society will never hurt anyone again, and Sheri won't be looking over her shoulder the rest of her life.\"",
        "She grinned. \"Remind me never to get on your bad side.\"\n\n\"She wasn't supposed to know. It wasn't about that.\"\n\nSandy nodded. \"And she'll never let on that she does. This is the last that I or anyone else will ever talk about it, Ok? If she needs to discuss it, she'll talk to me, Maria, or her mother. As far as she's ever to know, it's our secret, as much as it's yours. You boys have yours, and this is ours.\"\n\nShe had a nervous look. \"I...Should I be scared of Jaime?\"\n\nI laughed. \"Not in this lifetime. Anyone who ever thinks of hurting any of you women, that's different. He takes that whole 'protector' thing to another level. Please don't ask me anymore.\"\n\nShe kissed me hard, curling my toes. \"I love you, Steve Jeffery. Thank you.\"\n\n\"I love you too, Sandy. Thank you for being there for her, when I couldn't.\"\n\nShe smiled, and got up, taking me by the hand. \"She shouldn't wake up alone.\" I thought she'd get on the other side of Sheri, but she climbed in with me on my side. \"As long as you and I are up, what do you say I start a down-payment on a lifetime of rewards you've earned, Mister White Knight?\"\n\nI chuckled softly. \"I've already got my reward, thank you very much, beautiful. Marrying her in a few weeks. With that said, I sincerely doubt I'll ever be able to say no to you.\"\n\nShe grinned. \"Then don't. I'll never say no to you. You don't mind banging a prego?\"\n\nShe laughed at my surprised look. \"How can you not know? Did you think I was getting fat? Two months along now. Honeymoon baby. Good thing. Last thing I want is for my first baby to look like you. No offense, but he is my husband. Besides, you're not a bad looking guy, but hubby's a hunk.\"\n\nI wasn't about to argue. Those two hit the genetic jackpot. That was going to be one damn good-looking kid.\n\nSandy was riding me quietly, trying to keep our movement to a minimum, when sleeping beauty woke up. She smiled sleepily, and snuggled up against me. \"How're my two favorite people in the world doing?\" she whispered.\n\n\"Pretty wonderful,\" Sandy said. \n\nSheri closed her eyes, kissing my shoulder. \"Take care of him. He's the best, you know.\"\n\n\"We'll take care of him. Always. Together, right?\" Sandy said, relaxing on my body, reaching out and brushing Sheri's hair from her face.\n\n\"Forever and ever. I promised,\" Sheri whispered.\n\n* * *\n\nI don't know what the future holds. I can hope for the best. I have great friends, the best girl in the world, and family I could only dream of growing up. The doctors think Sheri should be able to get pregnant and carry a child to term.\n\nTomorrow's the big day. Sheri's hoping that we can follow in Sandy's footsteps, getting pregnant on our honeymoon. We're taking a 12 day cruise on Crystal Cruises, from Lisbon to Miami, where everyone's joining us for a 17 day Discover America journey. Robert can only make a week of it, so Sandy will be joining Sheri and me in our Penthouse Suite. It only has a queen-size bed, so it should be cozy, especially with Sandy four months pregnant. Robert was teasing that she gets cold at night, so we have to let her be in the middle. Apparently the cats out of the bag about our unusual relationship. I have no idea when that happened, but it seems I'm always the last to know about everything.\n\nWe're all excited about the trip. Robert's not part of the core four yet, I'm not sure he'll ever be. He's more like the wives, included, accepted, loved, but unable to crack our inner sanctum. Sheri's closer to that than anyone. Not so much for what she is or has done, but from what we did for her, and learned in doing. She stole a little of all of our hearts. She has Jaime wrapped around her little finger almost as bad as Marie. They're like sisters, a clique within the clique, of Sheri, Sandy, and Marie. Angela's business keeps her a little out of center, and Dan's girl of the hour doesn't stand a chance, although he swears this one is a keeper. Sandy assures me he's wrong, but she's on the lookout for the right one.\n\nThis time spent together, our first group vacation, we're hoping will strengthen us even more. Kind of scary. I don't know if we can get much closer. The women are already threatening to make it an annual thing.\n\nWe rarely game anymore. I miss it. Sheri assures me it's temporary, but we're busy getting on with our lives, making families, even (shudder) earning a living. That's right. We have an office in Manhattan. Go in at least three times a week. The wives were a little pissed when we shifted operations from D.C. to Manhattan, and we've been dealing with the moves, and new offices since. Angela was especially unhappy, until her company offered her a raise and promotion to move to Manhattan. It's good to know people.\n\nIt was less than a year ago that I was a lonely, depressed man, self-isolated, with little ambition, and not much going for me other than three very good friends. Victim of two disastrous marriages, including a total betrayal. I'd lost my company, which I'd worked so hard for. The only thing I was good at was a stupid game, which almost consumed my life. Thank God, or I would never have met CherryBomb.\n\nToday I'm on top of the world. I've got the greatest girl, which makes everything else in life that much sweeter. There'll never be any question about her love for me. If anything in life is true, that is. How could I be any happier?\n\nI'm getting married tomorrow.\n\n=========================\n\nThat's it. Hope you enjoyed this little tale. If you did, I really appreciate the votes and comments. Lets me know that the effort was worth it. Thanks."
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "threesome",
        "video",
        "fear",
        "reluctant",
        "ffm",
        "oral",
        "voyeur",
        "romance"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/gamer-goddess-ch-03"
}
{
    "title": "Two Hundred Dollars Ch. 12",
    "pages": [
        "149 Dollars\n\nThroughout Kent's return home on Thursday, he found his body shaking, and not only for the biting cold. The anxiety he'd felt worrying about someone catching him spanking Bailey in public, coupled with raw sexual fervour of actually doing it, had his heart racing. He had reached about half way back to their basement apartment before he'd taken proper control of his breathing.\n\nAt that point, the shivers had probably related to the cold... mostly.\n\nThe warmth of his apartment banished the last of his corporal shivering, but his mind continued to reel.\n\nExam in the morning, he told himself, must focus.\n\nHe had always possessed the ability, when the shit hit the fan, to turn his emotions off and deal with the practicalities. From that reservoir, he drew enough energy to get down to his studying. Unbidden, however, images of Bailey kept popping into his head, one after the other.\n\nKent had an electrical coil in his head, deriving the formula for the strength of its magnetic field, and in would pop Bailey, yanking down her jeans to bare her ass.\n\nAn electron would dance across an infinite plane of positive charge, and Bailey would appear, the front of her jeans open, showing her panties, in the moment when she'd earnestly ask for the rest of her spankings with his bare hand.\n\nWhen he tried to calculate the field between two U-magnets, he'd see her with her arms spread across the width of her library desk, her hips sticking out, waiting... waiting.\n\nShaking his head, he grimaced and forced himself to study.\n\nAround eleven o'clock, as he was about to call it quits for the night, his phone vibrated. Thinking it might be Bailey, he checked it.\n\nThe message from Laura read simply, \"u got a plan 4 halloween\"\n\n\"not yet,\" he texted back.\n\n\"got a party. arts, humanities, sci, eng, everyone\"\n\n\"sounds cool\" Kent wrote back.\n\nOne of the problems with his particular part of the Engineering faculty lay in the gender ratio. As hard as they'd tried to balance the whole faculty, the individual branches had never evened out.\n\n\"Bai is coming 2,\" Laura wrote.\n\n\"Natch,\" he wrote back.\n\nWhen she didn't respond, he sent one more message, \"2 bed now. Exam tomorrow.\"\n\n=============================\n\nWhen Halloween falls in the middle of the week, one could reasonably expect participation to drop off. However, it also fell at the end of midterm exams, which meant everyone had a tiny bit of breathing space.\n\nBailey lay on her bed, quietly using that breathing space while looking at ceiling.\n\nI'm not a prostitute, she reassured herself, I'm not doing sexual favours for money. Letting him spank me... doesn't count.\n\nHer eyebrows lowered darkly, she sighed and finally closed her eyes.\n\nYeah, okay, I jerked him off once,  she said. But wasn't that, technically speaking, a spanking? I mean, I slapped my butt with it, right?\n\nBailey's eyes opened and bugged out.\n\nWhom are you asking?\n\nShe stood up in frustration.\n\nI can still play around with him, as long as I'm not taking money for that part, she decided finally. Now, about Halloween.\n\nWith her period thankfully over (and hadn't that made midterms just perfect) Bailey could consider her plans for the evening. Laura had already taken the initiative to find a party, precisely the sort of thing for which Bailey counted on her friend. She'd invited Kent, which ought to work out fine, and she even imagined some likelihood of meeting a few friends from her own faculty if the party invites had gone as widely as Laura had hoped.\n\nOn the other hand, she only had one costume, and it would barely work for the weather, but she had no intention of blowing a bunch of money doing anything fancier.\n\nAlright, here we go.\n\nThe first bit was the easiest. She shucked off her jeans and pulled on the tight black leggings. Wearing something that tight in public wouldn't hide anything, but she didn't have any obsession with her legs or her butt to get in her way. Bailey smoothed out the fabric and checked herself in the mirror. No unsightly wrinkles in the fabric presented themselves, and the black panties underneath remained invisible, so she moved on.\n\nAfter removing her t-shirt, she took a look at her bra. She wanted -- very badly wanted -- to wear the bra Kent had given her. However, she also knew the unforgiving nature of her top and, in her own somewhat jaded opinion, that bra didn't give her all the help she needed.\n\nSo off went the transparent green bra and on went her very finest, very blackest push-up bra. Bailey didn't feel the need to wear it very often, so it always presented itself in fine condition when she needed it. With a quick motion, she got it into place and looked at herself in the mirror.\n\nIt'll have to do.\n\nShe slipped into her tight black shirt next.\n\nIt's not a complicated costume.\n\nThe push-up bra did the best it could with her small breasts and she counted herself satisfied in that regard.\n\nHer costume only had two more parts. The first, a headband with a pair of cat ears on it, slipped over her head, pushing her hair back with it. Even short as her hair was, none of it escaped the backward sweep of the hairband.\n\nOnce last piece...\n\n=============================\n\nKent had just fastened his cape (red on the inside, black on the outside) around his neck just as he heard a loud knocking at the outer door to their apartment.\n\n\"It's Laura!\" Bailey called out, her voice muffled by her bedroom door. \"I'll get it.\"\n\nWhile he affixed his fangs to his upper teeth, he heard Bailey's door open and saw her flash past his doorway.\n\nWhat was that?\n\nSomething had looked odd out of the corner of his eye, but he shook it off and, as he didn't particularly care if Laura or Bailey saw him in his shorts, changed his jeans out for a black pair of pants.\n\nVampires can totally wear normal black pants.\n\nAs he buckled his belt on, Bailey and Laura appeared in his doorway.\n\nBailey had elected to go with \"cat\", a traditional costume in both the ancient sense of Halloween and the \"popular among girls in university\" sense.\n\nHis brain finally clicked as to what had seemed odd early when he saw her rear.\n\n\"Nice tail,\" he complimented. \"Is it on a belt?\"\n\n\"Yeah,\" Bailey smiled as she lifted her shirt to show the belt to which her curving, metre long tail attached. \"Cool, huh?\"\n\nKent's eyes widened as she turned her body sideways and wiggled her tail at him.\n\n\"Very cool,\" he agreed before turning to her friend and raising an eyebrow, \"Laura?\"\n\n\"Not dressed yet,\" the other girl said. \"I, uh, don't get dressed at home.\"\n\n\"Her parents would freak the hell out,\" Bailey pointed out.\n\n\"And I haven't been drinking enough to get changed in front of Kent,\" Laura said as she politely shoved Bailey down the hallway. As they passed out sight, she added, \"But check out how he's checking out your butt...\"\n\nKent felt his face reddening, but only briefly, before both girls disappeared entirely.\n\n=============================\n\n\"Was he really checking me out?\" Bailey asked once they'd closed the door.\n\nLaura nodded, \"I'm pretty sure that tail had him hypnotized, actually.\"\n\nBailey let out a snicker as Laura started undressing, shedding her khakis first, followed by her blouse.\n\n\"You're wearing a push-up bra?\" Bailey's eyes widened in something akin to horror.\n\n\"My costume will look stupid if I don't,\" Laura explained, pulling on a white t-shirt with red shoulders. \"I can't have my boobs bouncing all over the place.\"\n\nBailey stifled a groan into a sigh, seeing her friend's already generous helping of breasts so unnecessarily boosted.\n\nLaura saw Bailey's eye roll and stood facing her, hands on her hips.\n\n\"Look, Bai,\" she said. \"You've had a boyfriend or two in your life. I haven't.\"\n\n\"I know, I know,\" Bailey waved her hands.\n\n\"I've never had anyone,\" she said, waving a pair of short, black pants in the air. \"With my parents eagle eyes on me, my whole purpose in life was to stay a virgin and marry a good Mormon boy.\"\n\n\"Was?\"\n\n\"Was,\" Laura confirmed as she pulled one leg through her pants, \"You know we're barely religious anymore. But have I ever had a boyfriend? Has anyone ever tried to ... to ... spank me, or even touch my boobs?\"\n\nLaura puffed out her chest in a huge sigh and settled her tight, short pants into place.\n\n\"What exactly are you this year?\" Bailey looked over Laura's choice of clothing.\n\nIn response, her friend raised an eyebrow and before pulling her hair into two pigtails, high up and slightly toward the back of her head.\n\n\"A little bit of blue and red eye shadow?\" Laura hinted, making outward sweeping gestures over her eyelids\n\nWhen Bailey didn't react, she added, \"And the baseball bat I carried all the way here?\"\n\n\"Oh, Christ,\" Bailey realized at last, \"You're doing Harley Quinn?\"\n\n\"Yes!\" Laura shouted, then added more quietly, \"And stop blaspheming.\"\n\n\"You said you're not Mormon anymore,\" Bailey chided.\n\n\"Still,\" her friend said. She heaved a sigh, ignoring the envious look from Bailey, and asked, \"Do you think I can scam a drink off Kent?\"\n\n\"We still need to paint our faces,\" Bailey said. \"You have your kit?\"\n\n\"You need make-up?\" Laura asked.\n\n\"I need whiskers, at least,\" Bailey pointed to her cheeks.\n\n\"Maybe Kent needs some, too?\"\n\n=============================\n\n\"Ke-ent!\" he heard Laura sing out.\n\n\"Ye-es?\" he sang back.\n\nShe appeared in his doorway, pig-tails and baseball bat and everything, and leaned against his doorway, \"Any chance I can get a drink?\"\n\n\"All I have is my Crown,\" he offered, lowering his eyes with a bow in an effort not to stare at her breasts.\n\n\"It'll have to do,\" she said, entering the room with Bailey in tow.\n\n\"Still loving the tail,\" Kent acknowledged, eliciting a wry smirk from Bailey.\n\nHe fetched his bottle of Crown from the top shelf of his closet and carefully poured three shots, then handed one to each of the girls.\n\n\"Halloween!\" he announced.\n\n\"Halloween!\" they changed together.\n\nLaura made a gasping sound but, after a few deep breaths, recovered.\n\n\"Look,\" Kent said, \"if you want to bring your own bottle, we'll drink that.\"\n\n\"I could never -\" Laura's voice went hoarse and she took a deep breath before continuing, \"-could never hide that at my house.\"\n\n\"Just seems a bit of a waste,\" Kent said. \"You hating on it so much.\"\n\nLaura gulped, inhaled, and spoke, \"No, I'm good.\"\n\nKent nodded to the little box she'd placed on his desk, \"What's that?\"\n\n\"Make up,\" she turned to Bailey, \"Want me to do your whiskers?\"\n\n\"Sure.\"\n\nLaura took Kent's chair and pushed it up near the bed, then patted a spot on the mattress in front of it, \"Sit.\"\n\nShe popped open the little box, which folded out in four sections like a miniature sewing basket to reveal a range of pencils and tiny jars. Laura sat on the edge of the chair, around which Bailey had spread her legs, and started applying what Kent took for eyeliner to Bailey's cheeks.\n\n\"You gonna need something Kent?\" she asked while she worked.\n\n\"Nah.\"\n\n\"You're a vampire, right?\"\n\n\"Sure...\"\n\n\"So, some dark eye shadow?\" Laura pointed out. \"Maybe slick back the hair? You have some gel?\"\n\n\"Why would I have gel?\" Kent asked.\n\n\"I have some,\" Bailey offered. Then she looked at Laura, \"What are you doing now?\"\n\n\"Your nose!\" Laura said. \"You need a cat nose.\"\n\n\"I -- alright.\"\n\nKent watched as Laura, already starting to feel the whisky, delicately applied makeup to Bailey's nose and a thin, curving strip between her nose and mouth.\n\n\"Wow, nice,\" he said before he'd even realized he'd spoken.\n\nBailey stood up and smiled.\n\n\"Not tail nice,\" Laura mocked even as she admired her work, \"but yeah, I do good work. Your turn, Kent. Bai, can you get your gel?\"\n\nBailey nodded and stepped out to the bathroom while Kent took a spot on the bed, leaning forward with his elbows on his knees so Laura could reach him.\n\n\"Should be a good party,\" she pulled out a brush and a small jar, \"Close your eyes.\"\n\n\"Hope so,\" Kent said, \"Gettin' all dressed up fancy like this.\"\n\nHe felt the brush delicately working over his eyelids.\n\n\"You've never worn make-up I take it?\" Laura asked. \"Face paint? Anything?\"\n\n\"Got my face painted in, like, Kindergarten,\" he volunteered hesitantly. \"Hated it.\"\n\nLaura hummed softly and he heard Bailey return.\n\n\"Nice,\" Bailey said.\n\n\"If I had some pasty-white, I could do his whole face,\" Laura inhaled with dreamy enthusiasm, \"But alas...\"\n\n\"Whiteface?\" Kent asked. \"Sounds racist.\"\n\n\"That doesn't make any sense,\" Laura finished up with the brush, \"You're white.\"\n\nShe took another little stick with a brush on the end and started touching up his eyebrows.\n\n\"Bai,\" she said, \"You finish this? I gotta do mine in the mirror.\"\n\nBailey reluctantly took the pencil from Laura as her friend grabbed the rest of her kit and walked away.\n\n\"She doesn't trust us?\" Kent put all the hurt he could in his voice.\n\n\"Never,\" Laura wagged a finger over her shoulder as she left the room and crossed the hall to the bathroom. \"Nice dark eyebrows!\"\n\n\"Nice dark eyebrows,\" Bailey whispered, carefully adjusting her tail before hopping into the chair and crossing her legs. \"With this, uh, thing.\"\n\n\"Eyebrow brush,\" Laura called out.\n\n\"Eyebrow brush,\" Bailey shrugged.\n\n\"Sounds easy,\" Kent pointed out.\n\n\"I don't wear make-up,\" Bailey defended. \"Like, ever.\"\n\n\"If it helps, I won't much care if you do it wrong.\"\n\n\"Thanks,\" the sarcasm came out hard in her voice.\n\nWhatever it looked like, Kent wouldn't know for a while, but he did notice how close her face and his came together while she focused on applying small amounts of whatever Laura had put on the brush. The nervous breath from her little cat nose delicately blew over his chin. She bit down on her lip as she brushed.\n\n\"Your eyebrows almost look the same, now,\" she said with a wince and then leaned back. \"Yeah, pretty good.\"\n\nBy then, Laura returned from across the hall, her left eye shadowed and her left pigtail painted blue while the right side had gone red.\n\n\"Nice work,\" Kent complimented.\n\n\"Yeah,\" Laura grabbed her baseball and laid it over her shoulder. Then she tilted her head slightly, bracing herself against the door frame, obviously taking a hit from the alcohol, \"I've done this before.\"\n\nShe then took Bailey's gel, squirted some onto a comb, and slicked Kent's hair back.\n\n\"We need a few pictures,\" Bailey said. \"Your phone, Kent?\"\n\n\"Yeah, yeah, sure.\"\n\nHe picked up his phone and the three of them stood side by side, with Bailey putting her arms out to pull Laura in on the left and Kent in on the right. With his free hand, Kent held out his phone at arm's length, trying to fit everyone in frame.\n\n\"Smile,\" he told them and the phone at the same time, then made a rictus grin that emphasized his vampire teeth.\n\nBailey made a slight kissing motion with her lips while Laura glared, not quite pulling off cartoon villain, but coming close.\n\n\"Almost time to go,\" Laura warned as they broke up.\n\n\"Yeah, yeah,\" Bailey sighed.\n\n\"C'mon,\" Laura prodded, putting her bat down to gently shake Bailey's shoulder. \"You said.\"\n\nBailey hesitated, but Laura added, \"You know he's dying to spank you in that thing.\"\n\nThis time, Bailey looked over at Kent, who merely raised his eyebrows, an effect comically enhanced by the excessive job they'd done with his makeup.\n\nBailey rolled her eyes and sighed, \"Fine.\"\n\nLaura gave a little hop and gave two tiny claps of her hands. She beat Bailey to the white board and made a tick mark, after which Bailey added her own.\n\n\"You go first,\" Bailey insisted.\n\n\"Me?\" Laura's eyes widened, \"I, uh-\"\n\n\"Oh, no,\" Bailey looked up at the ceiling imperiously and waved a single finger at her friend. \"You made the first tick mark, you get spanked first.\"\n\nKent didn't say anything, but he couldn't recall they had ever made that one of the rules. On the other hand, rules had to get themselves made at some point, so this would have to do.\n\n\"Alright,\" Laura nodded, her voice trembling as she pretended nonchalance, \"I can go first. No biggee.\"\n\n\"How are ya going to do it?\" Bailey prodded. \"Over top? Under? Panties or no?\"\n\nLaura sniffed, \"The night is young. We'll start on top.\"\n\nBailey rolled her eyes and shrugged.\n\n\"You ready, Kent?\" Laura stepped toward him.\n\n\"Al-vays,\" he replied, pretending he knew how vampires spoke.\n\nLaura turned her back on Kent, stuck out her ass at him and leaned over to put her hands on her knees. \"Remember how you did Bailey that one time?\"\n\n\"That's a little vague, my dear.\"\n\n\"With -- with both hands, remember?\" Laura's voice wavered a little.\n\n\"Double spankings,\" Kent moved past Laura to sit in his desk chair. \"Alright.\"\n\nLaura rotated to turn her cheeks to him again, whispering, \"Good now?\"\n\nBailey stepped back and leaned against the side of Kent's dresser so she could watch Laura from the front and keep her tail from getting squished against anything. She made eye contact with Kent over Laura's shoulder, and smiled at him.\n\n=============================\n\nKent smiled back at Bailey before turning his attention to Laura.\n\nThis is the best part, Bailey thought, focusing her attention on Kent's eyes, this is my favourite part of the clip I made. It's not the spanking. It's not the counting, or the nakedness. It's that deliberate, determined focus in his eyes.\n\nShe watched that concentration consume his entire body, from the moment he lowered the chair to the way he tested his angle of attack by placing both of his palms over Laura's cheeks.\n\nLook at him, she thought, like a hunter. Like a jungle cat stalking, preparing to leap upon his prey.\n\nBailey crossed and twisted her legs where she stood, using the muscles in her thighs to compress her lips against her clitoris. She wished she could just masturbate right in front of them.\n\nI could come just watching Laura getting spanked, if it went on long enough.\n\nThat made her twitch, that constant battle inside her head about having Laura participate at all. She drew a lot of value from these moments, when she could watch it happen as a third party, imagining herself as a participant while still having a bird's eye view. Her friend served perfectly in that capacity, and seemed to get something out of it herself.\n\nBut she still took those spankings when I wasn't here, Bailey thought, bitterly biting her upper and lower lips even as Kent raised his hands in the air.\n\nA deliciously loud, high-pitched crack echoed through the entire apartment as those two hands landed on cheeks clad in short spandex.\n\nLaura's eyes, closed in anticipation, opened and went wide in shock.\n\n\"Oh, these pants are thin,\" she cried out, adding quietly, \"One and two.\"\n\nThe benefit of double spankings, Bailey knew and Laura must have figured, lay in the fact that Kent couldn't put all ten of them on the same spot, on the same cheek. But Laura, never having done them before, didn't realize the downside as Bailey had already learned. While each cheek would only get five spankings, those spankings would all go to the same two spots.\n\nBailey smiled as the second pair landed.\n\nLaura let out a small squeak, then said, \"Three, four.\"\n\nSomewhere inside Bailey's body, blood throbbed and she stifled a moan as the third crack sounded out.\n\n\"Five, six,\" Laura winced, maybe realizing she'd bitten off more than she could chew.\n\nBailey crossed her legs more tightly, compressing her lips as much as she could with her thigh muscles, while her hands pressed down on the lowest part of her abdomen. She watched Kent's ridiculous eyebrows furrow, his hands resting on Laura's cheeks. Those hands rolled around, caressing her, and settled on the sides of her cheeks.",
        "Oh, he's going to change where he hits.\n\nThat renewed focus in his eyes pushed her too far. As Kent's hands swept out to his sides and came sailing back down to strike the outsides of Laura's ass cheeks, Bailey squeezed her legs together as hard as she could and let out a low groan that she hoped Laura's screech of dismay covered.\n\nShe closed her eyes as her friend cried out in surprise, \"Seven! Eight!\"\n\nBailey winced, feeling the little orgasm pulsing through her body, digging the fingernails of one hand into the other in an effort to stop herself from reaching down to help her orgasm.\n\nWhen she could see again, she saw that Laura and Kent had stayed so focused on each other that they probably hadn't noticed anything at all from her.\n\nI can have an orgasm from just... watching... and squeezing?\n\n=============================\n\nKent kept his eyes on Laura's cheeks, watching the way her squirming made her flesh move, seeing the line her panties made under the fabric of her tights pants.\n\nShe isn't wearing a thong, he realized. Not quite, but close. The lines are way up high, at least.\n\nHe had two more spankings to deliver and he had to decide what to do with them.\n\nOn the one hand, he knew that Laura hadn't realized ahead of time how little protection her spandex hot pants gave her. She might as well have just pulled them down and let him spank her bare ass. Of course, then she'd have shown a lot more of herself, and maybe she hadn't made herself ready for that level of play this early in the night. That suggested to Kent that he ought to spread the pain around a little, instead of doing what he'd done to Bailey.\n\nOn the other hand, as they often said, it was his dollar. If they thought for a moment that his doling out of spankings somehow related to unearned mercy, they'd probably pitch a fit.\n\nSo he resolved to hit the side of her cheeks, but go a little harder than normal to make it right.\n\n\"Oh!\", Laura shrieked in response. \"Nine and ten.\"\n\nShe stood up, rubbing her cheeks.\n\n\"I'm doing the next ones naked,\" she frowned, \"For all the good these pants do me.\"\n\n\"My turn now?\" Bailey asked.\n\nKent remained in his chair, waiting, while Laura put her hands on her hips expectantly.\n\nBailey looked Kent in the eye, then looked at his hands, then at Laura's rear. Kent saw calculation there, and didn't quite understand from where it came. Did she intend to make some strange offer? Something new to their debt repayment game? It looked that way, and he felt a little leap of eagerness, wondering what new thing he might need to negotiate.\n\n\"There's a thing-\" Bailey started, speaking to Laura, but then grimaced. \"Maybe another time.\"\n\n\"What?\" Laura leaned forward. \"What am I missing out on now?\"\n\n\"Nothing, nothing,\" Bailey waved her off. \"But my tail is in the way for doubles, so I'll do them over your lap.\"\n\nThis meant that Kent had to shift, a bit awkwardly with the erection straining at his pants, over to the bed. Bailey crawled over top of him, arching her back as she always did.\n\n\"You can get both cheeks?\" she asked, knowing it shined him on even worse.\n\nKent put his hand on her nearer left cheek, then her farther right one.\n\n\"Oh, definitely,\" he declared\n\n\"Go ahead, then,\" she said, wiggling her hips -- and tail.\n\n\"Jesus,\" Kent sighed.\n\nSqueezing her cheek through her leggings, he realized Bailey had chosen a fabric even thinner than what Laura wore. Worse, by arching her back the way she had, she had stretched that fabric even more tenuously. If she'd chosen her white thong, Kent thought he'd see its colour through the pants. As it stood, he could only see the faint, curving lines of whatever she had chosen.\n\nHe struck her left cheek, high and hard, getting the same perfect snapping sound he would normally get out of her bare ass.\n\nNonchalantly, she called out, \"One.\"\n\nAs he struck her right cheek, he wondered what had caused her to pause in consideration earlier.\n\n\"Two.\"\n\nHad she intended to offer a new thing? He struck left and low.\n\n\"Three.\"\n\nOr maybe she'd thought to offer him an 'inspection' before and after? The idea of taking ten spankings on an essentially bare ass must have dwelt on her mind.\n\nOn the other hand, Laura had already taken ten.\n\nOh, he realized, glancing up at Laura who watched eagerly from his chair. She didn't want to do fewer than Laura.\n\n=============================\n\nBailey could still feel the liquid way her lips moved past each other as she squirmed on Kent's lap, a testimony to the discreet orgasm she'd had a moment ago. The spankings he delivered now-\n\n\"Four,\" she chimed out.\n\n- spankings he delivered now came through in her numb, post-orgasmic haze. She felt them, but not as payment or foreplay, but as a kind of downer to get her off her high.\n\n\"Five,\" Bailey responded to another.\n\nShe kept her hips high, as befit her role, and counted off as he shook her body, a blissful smile hidden from his eyes by the fact she kept her face down.\n\n\"Six,\" her body shivered as she settled into a depth of calm she'd never known.\n\nShe continued calling them out, calmly taking her swats on what was, for all purposes except the visual, her bare ass.\n\n\"Ten,\" she said finally, and stood up carefully and cautiously.\n\n\"Does he fix the board now or when we get back?\" Laura asked the instant Bailey got her feet.\n\n\"Now, I should think,\" Kent said. \"That's the rule. Make the marks, do the spankings, fix the board.\"\n\nLaura nodded, but looked at Bailey with an eager hint in her eyes, \"But Bai, what if ...?\"\n\nBailey smiled at her, tilting her head softly.\n\n\"What if what?\" Kent asked.\n\nLaura rolled her eyes to the ceiling, \"What if we do more at the party? But you've already marked the board? Can you do more in one day? I don't know your rules.\"\n\n\"At the party?\" Kent sounded shocked and turned to look at Bailey. \"Hadn't thought about that.\"\n\n\"We might find a spare moment, after all,\" Bailey told him.\n\n\"So do you change the number now, or when we get back?\" Laura's voice seemed to earnestly desire clarity.\n\nKent looked back and forth between them, bit his lip and raised a finger thoughtfully.\n\n\"That's not how it works,\" he said.\n\n\"What?\"\n\nHe walked over to the board, erased the number and the tick marks, and wrote, \"$147\".\n\n\"You can do more if you want,\" he explained, \"That doesn't matter. But the rule is that you have to make the tick marks on the board before we do the spankings.\"\n\nLaura's eyes narrowed in confusion, \"Huh?\"\n\n\"Laura, dear,\" Bailey nodded in appreciation that Kent had gotten this right. \"He can't spank us until we make the marks. If we go to the party without making marks, he won't spank us.\"\n\n\"Oh,\" Laura's eyes widened.\n\n\"It happened once when he had me over the washing machine,\" Bailey put a lot of cynical annoyance into her voice, covering over the visceral excitement the reminiscence brought her. \"He made me walk back here and put another mark down.\"\n\n\"You have to make the mark,\" Kent said. \"It's how I know you want it.\"\n\nLaura inhaled, looking back and forth between the two of them.\n\n\"So, uh,\" she stammered, \"What if we don't find a way to do them?\"\n\n\"When we come back, I guess,\" Bailey filled in, her voice casual.\n\n\"Yeah,\" Kent said, \"Bailey has done them, y'know, delayed a few times, and it's been fine.\"\n\nLaura considered this, then took the marker off the board and handed it to Bailey. \"I'll do as many as you do, if that's okay?\"\n\n\"Your ass,\" Bailey shrugged, and made two quick, decisive marks before handing the marker back.\n\n\"The party's at a big house,\" Laura nodded shakily, \"I'm sure we can find a place.\"\n\nShe added her own pair of marks to the board.\n\n=============================\n\n\"Why are we taking the 31?\" Kent asked.\n\n\"Connor lives over on St. Moritz,\" Laura explained, \"I'm not walking that far when it's this cold out.\"\n\n\"St. Moritz?\" Bailey's eyes bulged. \"How rich is this guy?\"\n\n\"His parents are doing well,\" Laura waved a hand. \"I told you it'd be a good party.\"\n\nThough the girls had worn heavy jackets, their lack of pants still left them shivering until the bus came. Laura won a suspicious look from the bus driver, who clearly didn't recognize her character and clearly worried about her need for a baseball bat.\n\nIt took fifteen minutes of travel to reach their destination.\n\n\"How do you know this guy?\" Kent asked as they disembarked, worried now that he might not be completely welcome.\n\n\"He's in my Philosophy class,\" Laura assured him. \"Nice guy. You'll be fine.\"\n\nThe Halloween decorations still hung from the fronts of the houses down the curving street, although most of the porch lights had gone out, what with the children having finished their trick or treating.\n\n\"Which house is it?\" Bailey asked.\n\n\"Up on the left,\" Laura replied with a shiver. \"With all the cars?\"\n\n\"Good god,\" Kent said as they rounded the curve and finally saw the front of the house. \"Balcony and all.\"\n\nThe house in question stood two storeys tall with not one balcony, but two of them, on each front corner of the house. As they drew closer, the thumping of a subwoofer hit their ears.\n\n\"This dude's parents are cool with this?\" Kent wondered aloud. \"Mine would shit bricks.\"\n\n\"They're not around much,\" Laura replied absently. \"And apparently the maid only comes in during the-\"\n\n\"Maid?\" Bailey gasped. \"Good Christ.\"\n\n\"Blasphemy,\" Laura sang out. \"Like I said: good party! C'mon!\"\n\nShe led them onward at a rush, skipping along the sidewalk.\n\n\"Why don't I have any rich friends?\" Kent wondered aloud as they came up to the door.\n\nThe party had already grown large enough that revellers occupied the nearer of the two balconies. In spite of the cold, the front door stood ajar, allowing Laura to push it open and wave them all inside.\n\n\"Hey, Laura!\" a male voice called out. \"Nice Harley Quinn!\"\n\n\"Connor!\" she sang back and soon found herself enveloped in the hug of a moderately sized Chewbacca. \"This is Bailey and Kent.\"\n\n\"Nice tail,\" the suave Wookie leaned over to check out Bailey's costume as she removed her coat.\n\n\"Thanks,\" she tilted her head wryly.\n\nConnor's furry hand reached out to shake Kent's, a welcome he returned enthusiastically.\n\n\"Nice place,\" he told the host.\n\n\"Yeah,\" Connor shrugged. \"There's punch in the kitchen, and some pop and rye if you want any. Just take it easy. I don't want anybody getting stupid.\"\n\n\"Who's bartending?\" Laura asked.\n\n\"James and Will,\" the Wookie adjusted his bandolier, \"they'll keep everything in line.\"\n\n\"I brought my own,\" Bailey said, \"But thanks.\"\n\n\"Hey, whatever,\" Connor replied. \"I gotta go start the music.\"\n\nThe moment he disappeared, Kent turned to Laura, \"Open bar? Really?\"\n\n\"He's rich,\" Laura whispered. \"It's not about selfishness for all rich people, you know?\"\n\nDespite this, Bailey kept her own mickey of gin on her as they stumbled into the crowded kitchen. She took her cell phone out of her jacket and handed it to Kent.\n\n\"Your pants have pockets, right?\" she asked.\n\n\"Oh, sure,\" Kent replied, tucking it into one of the copious extra pockets in his black cargo pants.\n\nThe volume of the music increased as they neared the stairwell.\n\n\"We should have a drink,\" Laura yelled over the sound as she found a piece of the granite counter top to thump her fist on.\n\n\"What'll it be, Harley?\" one of the clearly drunk storm troopers behind the island asked.\n\n\"One of those milky, girly drinks, please,\" she declared.\n\nStormtrooper number one promptly poured a shot of Irish Cream into a plastic cup full of ice cubes. To this, Stormtrooper number two added enough chocolate milk to fill it to the top.\n\n\"Creamy nonsense,\" Bailey rolled her cat eyes.\n\n\"And what does the cat lady want?\"\n\n\"Just a can of cream soda please.\"\n\n\"You driving? I can add something?\"\n\n\"I, uh, got my own,\" Bailey said.\n\nKent watched her pretending to a level of meek awkwardness he'd never seen in her before. He'd grown used to the slightly angry, \"spank me, already\" Bailey, and found this cat creature unusual.\n\nShe popped open the offered can, took a deep swig, then added the last remnants of her mickey of gin into the space she'd made.\n\n\"Perfect,\" she pronounced, then turned to the stormtroopers. \"Thanks, guys!\"\n\n\"Sure thing,\" Trooper number one said. \"And what about you, vampire guy?\"\n\n\"Rye and Coke if you got it, please,\" Kent said.\n\n\"Easy.\"\n\nMoments later, the three of them had moved out of the kitchen to make more room for the drinkers.\n\n\"You gotta see the dance floor in the basement,\" Laura's eyes went wide.\n\n\"Dance floor!?\" Bailey and Kent shared their shock in unison.\n\n=============================\n\nKent and Bailey managed to run into a couple of engineering friends on the strobe-lit dance floor, other rich kids who happened to know Connor from some \"club\" of which they all spoke highly. The four of them danced together, drunkenly, for quite some time.\n\nFrom behind her, Bailey felt someone grab her hand.\n\n\"C'mon,\" Laura said, tightly clutching her bat in one hand and grabbing Bailey with the other, \"Gotta show you something.\"\n\nWhat now? Bailey wondered, turning back to see if Kent followed.\n\n\"Later,\" she saw him call out to their friends as Laura led them away and up the back stairs to the second floor.\n\n\"This place has two separate sets of stairs?\" Bailey asked.\n\n\"Yeah, so the maid can-\" Laura waved her empty hand. \"Doesn't matter.\"\n\n\"Why do you know so much about this guy?\" Kent wondered.\n\n\"We're in Philosophy together,\" Laura rolled her eyes, then stopped suddenly two stairs above them and turned around. \"Oh, you see, in our classes we talk to each other about stuff. We actually know each other.\"\n\n\"Haha,\" Bailey retorted. \"What did you want to show us?\"\n\n\"Oh, in here,\" Laura reached the top of the stairs and checked both ways in the hallway and waved them into a bedroom.\n\n\"Wow!\" Bailey said as she entered.\n\nKent followed and she felt his stunned reaction as he came to stand beside her.\n\nConnor's parents had clearly designed the entire house with style and sheer vanity in mind, but this guest bedroom took the cake. The four poster, oak panelled bed in the centre of one wall would do for most people, but this bed also boasted red silk curtains draping its sides. The oak and red fabric theme continued through all of the furnishings and on over to the window dressing.\n\n\"It's like-\" Bailey stopped, still in shock at the ostentation on display. \"Like a whore's boudoir in some old Western movie.\"\n\nLaura closed the door and clicked it locked. \"Isn't it perfect?\"\n\n\"Perfect for...\" Bailey trailed off, looking at Laura.\n\nSeeing the look in Bailey's eye, Laura grinned and put her baseball bat down on the bed. In her hand, apparently concealed against the baseball bat the entire trip up the stairs, Laura still held a small black stick of some sort. She unravelled the object, which revealed itself as a tiny black handle with a few foot-long, leathery strands of -\n\nKent blinked, \"Is that a whip?\"\n\nLaura nodded with a wide-eyed maniacal grin enhanced by her makeup, \"Swiped it off Dakota. We have to get it back before she notices.\"\n\nBailey's eyes went wide as she made several aborted coughing motions, \"Really?\"\n\n\"Yeah,\" Laura tilted her head, her pigtails flaring. \"I mean, it's not a real whip or anything. I'm sure it'll be fine, right?\"\n\n\"How real does a whip have to be?\" Bailey tried not to whimper, and looked for Kent's reaction out of her corner of her eye.\n\nLaura shrugged and held it out to Kent, who carefully took it in hand.\n\n\"So,\" Bailey ventured. \"How much do you think-\"\n\nKent weighed the whip in his hand and raised an eyebrow as he looked at her, \"I don't know.\"\n\n\"Don't know what?\" Laura asked.\n\n\"What it's worth,\" Kent clarified. \"Like, how many for a dollar?\"\n\n\"Oh,\" Laura backed up a moment. \"I hadn't thought about that yet.\"\n\nBailey tried not to glare at Laura, because she found herself in a spot again. She liked her friend -- she really did, they'd gone through a lot together -- but the girl had a way of pushing her limits. Every time Bailey thought she had a good handle on things, Laura went a step further.\n\nBut what can I do? she thought, watch Kent use that whip on her ass and not mine?\n\nThat wouldn't do, and Bailey knew it.\n\n\"Alright,\" Bailey said. \"We do it once each, and then we see if we can agree.\"\n\nKent and Laura looked at her and the fact that Kent's face hosted the most stunned looked surprised her in turn.\n\n\"Right,\" Laura said. \"Good, yeah.\"\n\n\"Alright,\" Kent nodded. \"How you wanna do it? Under, over?\"\n\n\"Under,\" the girls replied in unison and Laura rolled her eyes.\n\n\"Yeah,\" Bailey added. \"These leggings are useless.\"\n\n\"Bent over the bed?\" Laura asked, shaking her head clear of her inebriated haze so she could gaze up at the drapes around the four-poster. \"Ever since we started this, I have wanted to be spanked right here.\"\n\nShe giggled and covered her mouth.\n\nBailey looked at Laura, \"Panties or no? Now's your chance.\"\n\nLaura stood up on her tiptoes and whispered to Bailey.\n\n\"I don't want him to see my... front,\" she stammered into Bailey's ear.\n\n\"So?\" Bailey whispered back, eyeing Kent who waited patiently in the background.\n\n\"Well, remember when we undressed each other?\" Laura hinted.\n\nBailey realized what she meant. Whoever got stripped first, in stripping the other, would leave herself, at least a little, exposed to Kent.\n\nYou brought the whip, Bailey mentally chided her friend, but I can still take the lead. Because I've already let him see me like that. Up close, even.\n\n\"You do me first,\" Bailey said more loudly, so Kent could hear it. \"Just not too low. I don't trust that door lock completely.\"\n\nLaura looked frantically at the door, a hint of panic in her eyes, as Bailey faced her and waited.\n\n\"Right,\" Laura huffed suddenly. \"I'll just pull down your pants, then.\"\n\nBailey nodded jerkily with a half roll of her eyes.\n\nAnother deep breath and Laura took Bailey's waistband and pushed it down. It hugged tightly over her cheeks, snugly sliding over and past them, revealing the black pair of panties underneath. Laura bit both her lips, took the waistband of those as well and pushed them down.\n\nKent can see me now, Bailey thought, but refused to look aside, fixing her eyes on Laura's, Kent could be staring right at me.\n\n\"Bend over,\" Bailey jerked her head toward the bed. \"Your turn.\"\n\nLaura, gasping with anxiety, nodded and turned her body with a jolt to face the giant oak bed. She reached over with her hands on the sheets and leaned her torso over until her breasts touched the silk.\n\nDon't you wish you could be naked now? Bailey thought, touching those sheets with your bare skin?\n\nInstead, she stood there, partially exposed, and reached over her friend's body. She smiled at Kent, turning her own body more than necessary so he could see the whole front of her. Only when he smirked back did she grab Laura's leggings and pull them down to bare her ass. After that, the little black panties she'd worn went down, too.\n\nShe smiled at Kent once more, then turned her back to him and reached across the silk sheets, extending her body as Laura had. She slid over just enough that her right hip touch Laura's left.\n\nThis is mine, now, too, she thought, and inclined her face just enough to meet her friend's eyes.\n\nLaura smiled and gulped and, for one moment, it felt like this thing had become theirs instead of hers or mine.\n\n\"The things you get me into,\" Laura giggled again.\n\nBailey glared at Laura and started to reply, but gave a start when something lightly touched her cheeks. She shivered, but didn't turn around, as Kent dragged the thin tendrils of the whip's lashes across her flesh.",
        "Slowly, she felt the tips of those fronds touching her left cheek, dipping between, then over to the right. She knew when Kent made first contact with Laura's skin by the gasp her friend let out.\n\nCan't believe we're doing this, she thought, and tried to remember what insane series of events had led her to this point. With Kent, with Laura.\n\n\"You sure about this?\" Kent drawled.\n\nIt felt honest to her, that offer.\n\n\"At least once,\" Bailey said. \"Then we'll see.\"\n\nBeside her, Laura sucked in both of her lips and bit down. Bailey, for her part, did not tense up her legs the way she normally did for a spanking. She wanted as much give in her flesh as possible.\n\n\"Here it comes,\" Kent warned.\n\nBut he's intentionally not telling us who's first, Bailey noted. Prick.\n\nEven when he spanked her, she'd learned to sense it coming. Putting herself across his lap made it easiest, because she could feel his body moving, tensing, twisting and releasing. Laid out like this, out of contact, she still heard him collecting his breath in preparation. But, even more so than when he used his hand, she heard the whip whistling through the air and a note of panic went through her chest and down into her stomach.\n\nThe whip cracked off flesh, and Bailey started, but realized after a fraction of a second that it hadn't struck her flesh. Beside her, Laura moaned and Bailey turned to her in time to see her friend's eyes tightly shut against the sudden shock. She only had a moment to think, to offer a retort or reply of some kind, because the whip already sang through the air.\n\nOh, god. Oh, no. Oh, Christ.\n\nIt cracked off her left cheek, the one farthest from Laura, with an intense focus of pain that she'd never felt before. It didn't come with force of a good, hard spanking that rocked her body through denim, nor did it touch and snap at her flesh the way Kent's palm would on her bare ass. No, this seared, like she'd briefly bumped her flesh against a hot piece of metal.\n\nBailey opened her mouth involuntarily, breathing out as if she'd tried to take a sip of tea and found it uncharitably hot upon her tongue. She inhaled, drawing cool air into her lungs, and opened her eyes -- unable to recall when she'd closed them.\n\nShe spared a sideways glance at Laura, who also looked at her sideways.\n\n\"One,\" Laura breathed out in a whimper.\n\nJarred by Laura's signal, Bailey enunciated, \"Two.\"\n\nA pause ensued, in which Kent laid the whip across the smalls of their backs, letting it rest there. She felt his left hand caressing her left cheek and imagined what the right hand did.\n\nKent accompanied his fondling with an interrogative, \"So?\"\n\nBailey and Laura looked at each other for a moment before Laura cued Bailey to speak for her with a tic of her chin.\n\n\"How many spankings would it be?\" Bailey asked, not because she didn't know but to make things clear.\n\n\"Panties down?\" Kent replied. \"That's four spankings for a dollar.\"\n\nBailey mouthed to Laura, \"Two?\"\n\nLaura nodded in agreement.\n\nBailey looked over her shoulder at Kent and spoke very slowly, \"And you'll use the it just like you did now? No harder or lighter?\"\n\n\"Right.\"\n\n\"Then I think two whips makes a dollar,\" she concluded. \"If that's alright with you.\"\n\n\"But...\" Laura trailed.\n\n\"What?\" Kent asked.\n\n\"Two, but you have to do the other cheek?\" she whimpered.\n\n\"I guess that's alright,\" Kent said, retrieving the whips from their backs. \"You'll have to switch sides though.\"\n\nBailey nodded in agreement to the fairness of this and stood up. With her tail, it would be easier for Laura to pass in front of her so they could trade places. A moment later had Laura on her left and they took their bent over positions again.\n\n\"Okay,\" Kent said. \"If you're both sure?\"\n\n\"I'm sure,\" Bailey replied instantly.\n\n\"Laura?\" Kent asked.\n\nShe gave a little jerk of her head.\n\n\"Sorry,\" Kent said, leaning over them. \"Is that yes or no? You know you don't have to.\"\n\n\"Yes,\" Laura said quickly, before adding quietly, \"You can... whip me one more time.\"\n\n=============================\n\nKent surveyed the naked asses before him. Faint red marks adorned the two cheeks that touched: Laura's right and Bailey's left. Now that they'd switched, he'd be able to repeat his slashing motion and get at fresh flesh. With Bailey properly bent over, her cat-tail swung vertically in the air, like a metronome, twitching with every squirm of her hips.\n\nHe knew, as he dragged the whips thing tentacles across their cheeks, watching them both shudder and squirm in response, that they would probably never offer him this opportunity again.\n\nOne show only, Kent thought, Halloween 2018. Tickets, one dollar.\n\n\"Before someone gets suspicious, please,\" Bailey's sarcastic scold came out.\n\nWith a smile, he pulled his hand back and lashed her as hard as he had struck Laura with his very first strike, watching the black fronds of the whip strike and slash across her rear.\n\n\"Hoooo!\" Bailey called out, then inhaled a long hiss through her teeth.\n\nAfter a long pause, she added, quietly, \"Three. That felt harder than before.\"\n\n\"Hm,\" Kent said, \"Maybe because I'm right handed?\"\n\nBailey nodded to the logic, but didn't move.\n\nKent drew the whip over Laura's cheeks and swung back again, listening to it sing through the air. It struck Laura's cheeks with as much force as he dared.\n\nLaura moaned in high pitch as angry red streaks appeared on her left cheek.\n\n\"Four,\" she said.\n\nShe turned to Bailey, \"Are you doing more? Why haven't you gotten up?\"\n\n\"You did like this room?\" Bailey asked. \"And someone might notice if we wander off again.\"\n\n\"You're saying we should do it now?\" Laura asked.\n\nBailey nodded.\n\n\"But not with the whip,\" Laura spoke a statement not a question.\n\nThe two girls conferred in a whisper. Laura giggled again, then nodded her acquiescence to something Bailey proposed. She whispered something back and Bailey nodded, but Kent caught Bailey rolling her eyes as well.\n\nBoth girls pulled up their panties and their leggings before turning around to face Kent.\n\n\"I want my last ones over your lap,\" Bailey said, patting the edge of the bed and its low foot board.\n\n\"Alright,\" Kent said, and took a seat where they'd just bent themselves over.\n\nBailey knelt down on his right and looked him in the eye. \"We kind of wanted to do them together, but we both had something different in mind,\" she shrugged and leaned over his lap.\n\nLaura stepped in again and pulled Bailey's legging and panties down at the same time.\n\n\"But,\" Laura paused theatrically as she turned her back. \"We still want to be together.\"\n\nWith her body courageously facing the door, Laura leaned over a bit and pulled her own pants and panties down as well.\n\n\"Nice,\" Kent began to wonder how much Laura had drunk.\n\nI bet she had the whip thing planned for a couple weeks now, he thought, but this seems a bit crazy, even for her.\n\n\"Four spankings,\" he reminded Bailey.\n\n\"Uh-huh.\"\n\n\"Wherever I like,\" he added.\n\nShe gulped and nodded before burying her face in the silk bed sheets. Kent grabbed her right cheek, squeezing the lowest part of it, letting her know what he planned. Bailey moaned, conveying some emotional combination of resignation, fear and excitement while lifting her hips up and arching her back.\n\nHe struck while she still moaned, doing her the favour of missing the part of her ass over which the whip had traced its seemingly indelible lines.\n\n\"Five,\" she said.\n\nAgain, his hand smacked that low part of her ass.\n\n\"Six,\" Bailey's voice went high.\n\nIn rapid succession, he slapped her there a third and fourth time.\n\n\"Seven,\" Bailey sighed, relaxing the muscles in her thighs. \"And eight.\"\n\nBravely, she got back up and sat on her heels, letting him see the front of her body and her neat little triangle of hair. Leaning over, she kissed him lightly on the forehead, a strange gesture.\n\n\"Your turn,\" she said to Laura, and stood up with her leggings still around her thighs.\n\nLaura nodded, but didn't turn around to face Kent. Instead, she reach out with her left hand and drew Kent toward her left side.\n\n\"My way,\" she said, referring to the way she had first taken her spankings. \"Sort of.\"\n\n\"Sort of?\" Kent asked.\n\n\"Hold out your arm,\" she said suddenly, tugging on his left hand so he extended his forearm.\n\nHe watched as Laura leaned her body over his arm, her stomach pushing it down.\n\n\"You have to hold me up a little,\" she admonished.\n\n\"Right,\" Kent said.\n\n\"And where should I be?\" Bailey asked. \"For togetherness.\"\n\n\"Here,\" Laura said, patting the outside of her right cheek.\n\nBailey let out a sound that might have been her equivalent of a giggle, and put her cheeks right next to Laura's.\n\n\"Okay,\" Laura said. \"Go ahead.\"\n\nKent looked at the asses so displayed, with their angry red streaks and the patch of red on Bailey's lower right. He decided he ought to make them match, or at least look symmetrical, so he squeezed Laura's left cheek good and hard. She moaned and slid her body down a bit, arching her back to expose herself and -- not by accident, he imagined -- pushing the lower part of her breast against his thumb where his hand held her up.\n\nHe slapped her, just as hard and low as he'd done Bailey, eliciting a squeak and a jump, which felt strange on Laura. She never, ever moved when he spanked her. Laura had gone so far as to tell them how her parents had programmed her that way.\n\n\"Nine,\" she said, and settled her body back down over his arm.\n\nShe moved though, Kent realized, noting how her breast now rested over his thumb and index finger. He flexed his thumb, stretching toward her sternum, wrapping around her underside of her breast. Laura inhaled sharply.\n\nIs she doing this on purpose? Does she want me to squeeze her tit?\n\nHe spanked her again, low and hard, eliciting another squeak and a jump out of his hand. This time, when she settled back on his arm, she lowered her entire breast onto the palm of his hand. When he squeezed her through the padded bra, she inhaled and let more of her weight onto his arm.\n\n\"Ten,\" she said softly.\n\nKent slapped her ass again, sticking with the same piece of flesh, and she didn't move at all.\n\n\"Eleven.\"\n\nClutching her breast tightly, he delivered his last spanking and released his grip.\n\n\"Twelve,\" she said, letting out a sigh.\n\nAlmost instantly, Bailey had her leggings back in place, so Laura followed suit.\n\n\"We're out of spankings for the night,\" Kent said.\n\n\"Still drinking and dancing, though, right?\" Laura asked.\n\nKent nodded.\n\n\"I have to pee,\" Bailey said, \"Where's the washroom up here?\"\n\n\"Just down the hall,\" Laura pointed.\n\nShe unlocked the door, opened it slightly and peeked out.\n\n\"All clear,\" she said and slipped through the door. Bailey followed her out and went to the washroom.\n\n\"We'll be downstairs,\" Kent called out to the Bailey's back before she disappeared through the door.\n\n\"Might wanna wait on that, tiger,\" Laura warned.\n\n\"Huh?\"\n\nLaura nodded toward his crotch and Kent felt himself redden. He'd grown so accustomed to sporting an erection when he spanked them that he didn't notice how easily they could view his arousal.\n\nWaiting for Bailey, Laura pressed herself against him, her thigh gently grinding.\n\n\"That won't make it go away,\" Kent groaned.\n\n\"Neither,\" she whispered, \"will touching my boobs.\"\n\nKent murmured an acknowledgement of the point, feeling said boobs pressed against him. Did she expect him to grope her here, in the hallway? He hadn't completely figured out Laura's game in all this, and put most of her behaviour down to \"kinky, repressed and timid\". Viewed through that lens, this didn't surprise him too much.\n\n\"You want to dance, though?\" he asked.\n\nShe laid her head on his shoulder. \"Yeah.\"\n\n\"Boob grabbing later, then,\" Kent admonished.\n\nLaura nodded and backed away, giving him a brief chance to cool down before Bailey returned.\n\n\"Oh,\" Laura said. \"The whip!\"\n\nShe flashed back into the bedroom to retrieve the whip and her bat, both of which she'd left on the bed.\n\n\"I have to get this back to Dakota,\" she said, and bolted for the main stairs at the front of the house.\n\nBailey came out of the washroom, passing Laura in the hallway and smirked as she nodded at Kent's pants. \"You doin' okay?\"\n\nKent sighed, \"I'm sure I'll be fine in a minute.\"\n\nShe came closer to him, not quite meeting his eyes. \"What did you think?\"\n\n\"Of what?\"\n\nShe jogged her head side to side, her eyes pointed at his chest. \"The whip.\"\n\n\"Oh,\" he said. \"Well, that was... different. The marks it made on your butts. I mean, wow.\"\n\n\"Yeah,\" Bailey looked at the ceiling for a moment then jerked her head in the direction of the washroom. \"I just checked it out in the mirror.\"\n\n\"How did it feel?\" he asked.\n\n\"Like burning,\" she said. \"Instead of stinging. It's definitely different from your hand -- or even the spatula. But I asked first.\"\n\n\"Asked what?\" Kent shook his head clear.\n\n\"What you thought of the whip,\" she clarified, earnestly looking into his eyes.\n\n\"Like, would I like to use it on you again?\"\n\nBailey looked up and kept her wide eyes locked on his as she nodded.\n\n\"Would you like me to use it again?\" Kent asked.\n\nThis proved too much for Bailey, who leaned against him, putting her head on his shoulder exactly where Laura had lain hers.\n\n\"It hurts,\" Bailey whispered, and he felt her body shivering and panting, her breath rushing over his neck.\n\nShe stayed there for several long seconds, twitching and trying to slow down her heart.\n\n\"It hurts,\" she repeated shakily, \"but it looks so...\"\n\nBailey trailed off and Kent put his arm around her waist, just under the cat tail.\n\n\"So nice?\" he whispered back.\n\nShe moaned, pushing against him, thighs interlaced. They stood like that, quietly, in the hallway outside the ridiculous, red bedroom.\n\n\"Laura's waiting downstairs, I bet,\" Bailey said finally, and pulled herself away from him.\n\nKent released her waist. \"I'll be down in a sec.\"\n\nBailey blinked in acknowledgement, and went down the back stairs.\n\nTaking several deep breaths, Kent did his best to calm himself down before taking the front stairs.\n\nKent arrived in the kitchen in time to catch the eyes of the stormtroopers who divined quickly that he needed another Rye and Coke, and mixed it up on the spot.\n\nMust be nice being rich, he thought, hoping that one day he could evince this level of generosity.\n\nAs he took a sip, he looked out the back of the kitchen, past the stairway to the basement, into the living room, seeing the party goers there. His eyes widened and he moved forward.\n\n=============================\n\n\"Where the hell is Kent?\" Laura asked, dancing while holding her baseball bat over her head with both hands.\n\n\"He should have cooled off by now,\" Bailey replied, trying to ignore how much Laura's pose showed off her breasts.\n\n\"Should we go check on him?\" Laura leaned in to ask, using the bat to pull Bailey closer.\n\nBailey shrugged, \"Sure, but I don't think men 'check' on each other, honestly.\"\n\n\"We're not men,\" Laura said, releasing one hand from her bat so she could lead Bailey toward the stairs in a one-arm embrace.\n\nStumbling slightly, they came up the stairs side by side. When her eyes came to the level of the floor, Bailey caught sight of Kent talking to a Unicorn-girl and a Frankenstein's monster.\n\n\"Is he lost?\" Laura wondered aloud, her comment audible only to Bailey, otherwise drowned out by the music thumping up the stairs.\n\nUnicorn and Frankenstein seemed to glare at Kent.\n\n\"Sorry!\" Kent shouted, shifting his drink to his left hand as he reached for the male with his right hand. \"Sorry bud!\"\n\nIt looked for a moment as if Kent wanted to clean off Frankenstein's shirt, but his clumsy swiping motions suddenly shifted.\n\nBailey, seeing how quickly and smoothly his hand moved, digging into the side pocket of Frankenstein's shirt, felt like eating her own words, It's not like you're a fucking ninja.\n\n\"Hey!\" Frankenstein shouted and then froze as they all looked down at whatever Kent had pulled out of his pocket.\n\nKent's movement became confused and drunken again, which Bailey now took as an obvious put-on, and he shouted, \"Dancing's started downstairs!\"\n\nUnicorn-girl's eyes went wide and she put her drink down on the nearest buffet, \"Yeah, dancing! Let's go.\"\n\nKent tilted his head, possibly muttering something, and walked past Bailey and Laura with a quiet nod, Rye and Coke in his left hand, his right hand cocked in a fist like he meant to punch someone. Unicorn-girl walked past, and headed down the stairs, leaving Frankenstein alone, his emotions a confusing cloud of anger and fear behind his green face paint.\n\nI've never seen Kent angry, Bailey realized.\n\n\"What the heck?\" Laura mouthed to Bailey.\n\nBailey shrugged and they followed Kent in to the kitchen, but took so long to do so, they only caught up to him just as he had turned around and headed back their way. The two stormtroopers stared into the sink, one of them having removed his mask to glare.\n\n\"What's.. up?\" Bailey asked.\n\n\"Some douchebag,\" Kent twisted his lips and took a long draught from his drink. \"Let's dance, eh?\"\n\nAs they went down the stairs, Bailey caught both of Laura's stormtrooper friends moving into the living room, but saw nothing once the stairway turned again.\n\nShe pushed it all out of her mind when they reached the dance floor. The party had really picked up since they'd gone upstairs and they had trouble fitting themselves into the tiny space, especially with the hassle of watching out for Bailey's tail.\n\nBut, with the alcohol and the general friendliness of the crowd, they squeezed in together in a small triangle. In short order, Laura pressed herself against Kent's back while Bailey ground against him in front.\n\nIt's not something we'd normally do, Bailey realized even through inebriation, but Halloween, and crowds and a dance floor and alcohol can set you free, sometimes.\n\nThey danced for something like an hour, Laura occasionally stealing a sip from Kent's drink, which he mostly managed not to spill. They posed for pictures with random people and soaked the general air of heavy intoxication and camaraderie.\n\nBailey kept an eye on Kent, while she rubbed against him, or Laura rubbed against him, but he seemed to have regained some control of himself.\n\nMaybe this doesn't mean much, she thought, compared to having us naked over his lap. Or maybe he's just gone numb by now.\n\nThe party eventually started to break up and the music went low, the slow song or two that told a self-aware visitor that the time to depart approached.\n\nIt might have made things awkward, if the host of the party hadn't made his way to the dance floor by that point.\n\n\"Laura,\" the Wookie shouted, welcoming her into an embrace for the start of the slow song.\n\nBailey, finding herself already facing Kent, found it easy to put her arms around his neck.\n\n\"Good party,\" she said.\n\nHe nodded, \"Yeah, your make-up held up. How's mine?\"\n\n\"A little sweaty, actually,\" she wrinkled her nose, \"but not too bad.\"\n\nThey circled and swayed in silence for a moment.\n\n\"It's the finest place I've ever spanked you,\" Kent remarked.\n\nBailey laughed and laid her head on his shoulder. \"The library was nice, too.\"\n\n\"That was the most dangerous,\" Kent replied, and she could almost feel his eyes going wide, even though she couldn't see his face.\n\nShe thought, then, about the whip, and wondered if he thought about the same thing. It lacked the personal touch, the feeling of flesh on flesh. It took away the direct contact and made the procedure almost mechanical, as if an artisan had seen his worked converted to production on an assembly line in a factory.",
        "But, oh, did it burn.\n\n\"It must be after midnight,\" Bailey said, not sure why she'd blurted it out.\n\n\"Yeah, we can leave after this,\" he agreed. \"Otherwise we'll miss the last bus. Where's Laura?\"\n\n\"With Connor,\" she jerked her chin to indicate a place on the dance floor behind Kent.\n\nFor a moment, she made eye contact with Laura, exchanging the brief body language signals that said, \"you ready to go?\" and \"yes, I am.\"\n\n=============================\n\nWhen the song ended, Kent looked over to collect Laura and found himself in a thorough, double-handed, warrior-grip handshake with a Wookie.\n\n\"Hey, man,\" Connor said, his serious eyes making him look like the angriest possible version of Chewbacca. \"Thanks a bunch.\"\n\n\"What?\"\n\n\"That Frankenstein guy. I don't even know who he was.\"\n\n\"Oh, no problem,\" Kent shrugged.\n\n\"What Frankenstein guy?\" Bailey asked, just catching the edge of the conversation.\n\n\"Nothing,\" Kent said. \"Thanks for the party, man. It was awesome.\"\n\n\"Anytime,\" Connor's voice became loud and much less serious. \"Or at least the next time my parents are away.\"\n\nThey all shared a laugh as Laura and Connor shared a goodbye hug and the three of them headed upstairs.\n\nThe moment they got their jackets and hit the road, Bailey turned to Kent.\n\n\"What exactly happened back there?\"\n\n\"Where?\"\n\n\"With the Frankenstein guy?\" Laura put in. \"You looked like you were going to punch somebody.\"\n\nKent grimaced. \"Do you know who that was?\"\n\n\"No,\" Laura admitted. \"I don't actually know everybody.\"\n\n\"He was getting really pushy with the Unicorn girl,\" Kent said. \"She looked really uncomfortable, but he wouldn't let her leave.\"\n\n\"So you felt the need to step in?\" Laura said. \"Aw, that's sweet\"\n\n\"And you picked his pocket?\" Bailey asked, her eyes wide. \"I saw that.\"\n\n\"Well, he kept reaching into his pocket every time she turned around,\" Kent twisted his lips. \"I started to wonder.\"\n\n\"What'd you find?\" Bailey asked.\n\n\"Some kind of moonshine I think,\" Kent shrugged. \"I'm not an expert, but it was a tiny bottle of something really strong.\"\n\n\"Huh.\"\n\n\"You see something, you do something, right?\" Kent said. \"I think Connor threw the guy out, whoever he was.\"\n\n\"Mel will be thankful,\" Laura sucked in a breath nervously.\n\n\"Mel?\"\n\n\"She was the unicorn.\"\n\n\"Oh, right,\" Kent said casually. \"Anyway. Douchebag. Hope he gets hit by a truck on the way home.\"\n\nThey'd arrived at their bus stop by then, just in time to catch it. The conversation turned to dancing and costumes and their various states of inebriation.\n\n\"We'll get off near Laura's place?\" Bailey asked. \"Walk home from there?\"\n\nThat meant a bit longer of a cold walk, but they could hardly abandon Laura this late at night.\n\nKent nodded and they exited at the next stop.\n\n\"My parents should be asleep,\" Laura said. \"As long as they don't get up to smell my breath, I'm fine.\"\n\nShe gave them both a hug, pressing all three of their heads together in a wide embrace, then planted a kiss of each of their cheeks.\n\n\"Thanks, guys,\" she said sleepily. \"It was a good party.\"\n\n\"You found it for us,\" Kent said. \"Good job.\"\n\n\"You bet,\" she said, punching him in the shoulder. \"You bet.\"\n\nShe walked up to the front door of her house and unlocked it. Bailey and Kent started walking. Once they were out of earshot, Bailey opened up.\n\n\"I have no idea where to start,\" she said.\n\n\"Start what?\" Kent asked, confused.\n\n\"That Frankenstein guy,\" she said.\n\n\"Yeah?\"\n\n\"He was going to roofie that girl,\" Bailey stared at him.\n\n\"I don't think he had a roofie dissolved in there,\" Kent pointed out. \"Well, maybe. But... Mel? Mel was glad to get away from him.\"\n\n\"Yeah,\" Bailey mocked his tone of voice. \"Like, no big deal.\"\n\nKent shrugged, not sure exactly what Bailey expected of him. Should he make a production out of it? Try to brag about what a great hero he was?\n\n\"It's just what you do for people,\" he said. \"I removed an asshole from a good party. He looked pretty incompetent at what he was trying to do, which I guess makes him even more dangerous.\"\n\nBailey shook her head at him, clearly perplexed.\n\n\"What else?\" he asked.\n\n\"Huh?\"\n\n\"You didn't know where to start, you said,\" he explained.\n\n\"Oh, yeah,\" Bailey adjusted her cat ears. \"Laura.\"\n\n\"Laura?\"\n\n\"Stealing somebody's whip, for Christ's sake!\"\n\nKent laughed. \"Yeah, that shit blew me away, too. What is with her?\"\n\n\"I know!\"\n\nThey continued laughing for a bit.\n\n\"Still,\" Bailey added.\n\n\"Still?\"\n\n\"You liked whipping us, didn't you?\"\n\nKent smiled, \"It was... different. Your reactions made it worthwhile.\"\n\n\"Answer the question already,\" Bailey declared, poking him in the shoulder with her finger. \"Do you want to do it again?\"\n\n\"You're offering?\"\n\n\"Maybe,\" she said. \"I want to know if you would do it again if I offered.\"\n\n\"Yes, I would,\" Kent said finally. \"Occasionally, if you offered.\"\n\n\"But not all the time?\"\n\n\"But not all the time,\" he echoed, pausing thoughtfully. \"I still like spanking you. With my hand.\"\n\nBailey smiled and Kent recognized they had reached an agreement on the use of implements. He knew that she liked to see what marks they made, and the whip had certainly made interesting marks.\n\nWhy does that matter? Why does it interest her? I have no idea. But it does.\n\nThey walked in silence for the last bit of their cold trip to their apartment. Kent let Bailey in, locked the door behind them and went down the stairs. With the late hour and their mutual weariness, he didn't expect much from her, but she stopped outside his door, leaning against the far side of his door frame.\n\n\"Kent,\" she said.\n\n\"Yeah?\"\n\nHe waited, wondering if she wanted another spanking.\n\nBailey's face twisted in a wry smirk and she looked at the ceiling, \"You gonna jerk off now?\"\n\nHe heard the fake lightheartedness of her tone, felt his own drunkenness, and replied in kind, \"Yeah. Aren't you?\"\n\nThat set her back for a moment, but she regained her composure.\n\n\"Probably,\" she piped up in a quick squeak.\n\n\"Uh-huh,\" he waited, leaning against the opposite side of the door frame.\n\n\"So...\" she trailed off.\n\nI'm not clear yet what she's asking, Kent looked carefully into Bailey's eyes, but she wants something more.\n\nBy way of experimentation, he offered a gallant sweep of his hand to invite her into his room. She nodded and stepped in, waited for him to enter, then closed the door behind him and backed up into it, turning her tail sideways.\n\n\"Oh, this stupid thing,\" she said in frustration, and moved to unbuckle the belt.\n\n\"Aw, don't lose the tail,\" Kent pleaded.\n\nBailey stopped in mid motion, \"You like the tail?\"\n\n\"I love the tail.\"\n\nShe moved forward, her eyes cast down, and pressed her body against his. Blood flowed and he hardened.\n\n\"Like before?\" she asked.\n\nHe nodded, his chin touching her forehead, but felt the need to clear up what she meant.\n\n\"Do you need a spanking?\" he asked, because he'd begun to feel that she needed it to get herself going.\n\n=============================\n\nA spanking? she wondered and just barely started to think \"Why on earth does that idiot think I need a spanking?\" when her body rebelliously interrupted her with a tremor that said, \"Oh my god, I'm shaking just because of the way he asked me.\"\n\n\"It would be too loud,\" she whispered, grinding against him.\n\n\"The bed?\"\n\n\"The bed.\"\n\nBailey pushed him until he stumbled into his bed and sat down. She jumped her legs over him to sit facing him in a straddle.\n\nAlmost perfect.\n\n\"Your pants,\" she pushed him on his back and hopped back off the bed.\n\n\"What?\"\n\nShe frantically worked at his button and his zipper.\n\n\"Can't feel you through the seam,\" she muttered in frustration. \"Get your pants off.\"\n\nBailey had the buckle on his belt undone in a moment and starting yanking on his pants. Kent lifted his hips up high enough she could pull them down and drop them to the floor. She straddled him again as he sat up.\n\n\"Better,\" she panted, letting the length of his shaft push her lips open through her leggings and panties. \"Much better.\"\n\nWhen she looked down between their bodies, she saw that all of their shifting around had pushed his boxers down so far that the swollen head of his shaft poked up above the waistband, rubbing against her shirt.\n\nBig. I can see it and it's big.\n\nShe didn't need to take off her clothes. What she wore didn't have the thickness to matter.\n\nBut I could. I could rub my pussy right up against him.\n\nKent's hands came around her body and grabbed her cheeks, fingers sinking deep into sore flesh, pinching just hard enough. She moaned and pushed against him, forcing a hard grunt.\n\nHis fingers went up her back, then down again, this time underneath her leggings.\n\nOkay, fair enough. They are in the way.\n\nShe pushed him on his back again and laid her chest against his. It required a bit of acrobatics, but she arched her back and let him push her leggings down as far as her knees. After that, she had to crawl up on top of him so he could push them the rest of the way down.\n\nI feel like we could be doing this more efficiently, but maybe that's the alcohol.\n\nBy shifting her body weight from side to side, she got the tight, little pants off her ankles and onto the floor. Kent gripped her cheeks again, pulling her body closer, his face in her belly, his lips touching the little bit of exposed flesh between her top and her panties.\n\nWhat does he want? Why is he doing that? Oh!\n\nBailey trembled a little. No one had ever gone down on her and she didn't know how she felt about it right then.\n\nThat's wasn't my plan, inasmuch as I had a plan.\n\nShe moved her body down along his, letting his questing mouth slide upwards, between her covered breasts. Firmly planting her knees on the bed, she straddled him once more.\n\nIt's better without the leggings, she realized in surprise. They'd done so little for her during the spankings, she hadn't considered the possibility of their interfere here. But with the head of his cock out of his shorts, and only her panties protecting her, the lack of leggings made a huge difference.\n\nThey'd left the lights on, maybe a little too bright for her taste, but as she squeezed him against her pussy, he hardened once more and she looked down to see a glistening bit of fluid forced from his tip.\n\nBailey shivered, seeing that, and remembered the time she'd handled him in the shower, an image of Kent twitching in her hand, strips of semen spurting out of him.\n\nSuddenly, she had trouble breathing, as if she couldn't expand her lungs enough to draw in the air she needed. She pressed her down on him, grinding the naked head of his erection against her panties over her clitoris. Feeling her lips separate behind the thin layer of cloth, she twisted her body upwards, forcing him down until the swollen tip pushed at her vagina.\n\nAgain and again, she shifted her body, using his erection as she would use the corner of her pillow to stroke herself.\n\nBut so much better.\n\nKent's penis had a size and stiffness to it her pillow didn't. On top of that, he moved, and twitched, and slid his hands under the back of her panties to grip her ass.\n\nOh, god, if he could spank me now.\n\nWith deep regret, she realized she didn't have a way to ask for that spanking. The white board, her silent partner, stood too far away to reach.\n\nYou could use your voice, something inside her said. And she answered, No, not like this I couldn't.\n\nWhy not?\n\nShe stammered, mentally, trying to answer that little part of her brain. But before she could figure herself out, Kent's hands slid up her body, under her shirt and over her back.\n\nThey weren't doing anything back there anyway, really, she realized. A little part of her panicked, thinking he might try to remove more of her clothes, but he didn't seem to have any plans in that direction. His hands wandered up and down her spine, passing over the strap of her bra without incident, making her whole body tingle.\n\nKent moved his hands down to her gyrating cheeks again, dragging his fingernails across her whip-stung flesh. When she moaned in response, he scratched harder.\n\n\"Oh, god,\" she stuttered out loud, and drove her hips down, pushing the head of his cock hard against her vagina.\n\nIf he could just-\n\nHis right hand came away from her left cheek and came back, the surfaces of three fingers making a very light tap against her cheek.\n\nBailey moaned encouragement, jerking her hips against him, pushing herself open through her panties.\n\nA harder slap, the next one.\n\n\"Yes,\" she hissed, barely able to breathe.\n\nThe third came through, and this one really felt like a spanking.\n\nHer energetic enthusiasm forced a squeak from her mouth that might have counted as the word, \"Yeah!\" if one felt charitable about it.\n\nShe didn't care if the sound woke someone up, she just wanted-\n\nKent's hand cracked off her rear just as she used his cock to stroke herself downward. The strike piled itself on top of the seared flesh from the whip and Bailey moaned as her orgasm struck, pushing her vagina down, feeling her muscles pulse around the head of his erection.\n\nHe grunted underneath, feeling her pressure, and squeezed her cheeks tightly with both hands, squeezing her right through her orgasm, spasm after spasm, until her body relaxed.\n\nRecovering, but still gasping, she relaxed her legs and asked, \"Did you come?\"\n\nShe didn't feel his wetness upon her.\n\n\"Not yet,\" he panted back to her. \"Close, though.\"\n\nBailey rolled over beside him and looked at the part of his erection poking out of his shorts. With most of her inhibitions gone, she pulled down his shorts so she could see him properly.\n\nI've given handjobs before, even did one for him. I can do this.\n\nStill high off her orgasm, she took him in both hands and Kent rolled over on his side to face her. Her cat tail, still attached via its belt, started to get in the way. Kent noticed this right away and lifted her shirt so he could undo the buckle and discard it. This let Bailey, finally, roll over on her back, pulling him on top after her.\n\nShe slid up far enough and spread her legs around him so that his testicles were about level with her pussy and his erection stuck up almost to her belly button.\n\nWith her left hand stroking him low, the back of her thumb against her clit, and her right hand working the top of his erection, she began stroking.\n\n\"Oh, Bai,\" he murmured, hovering over her.\n\n\"Yeah?\"\n\n\"Could be messy,\" he warned with a wry smile. \"We're not in the shower here.\"\n\n\"S'alright,\" she laughed, playing her lightheaded post-orgasmic daze to the hilt.\n\nIt did make her wonder, though, how much of her clothing would take a hit in a moment. She had a thought about that and slid her body upwards. It meant she had to reach farther for him, especially with the left hand, but she got his erection pointing right at her lips. With a little stretch of fabric, she got his cock tucked underneath her panties from the side, directly up against her lips and her clit.\n\n\"Yeah?\"\n\nWell, my panties are kind of wet with my own stuff anyway, she decided, and rubbed him in circles.\n\n\"Yeah,\" she panted, smiling breathlessly, \"Make your mess in there.\"\n\n\"Okay,\" he breathed back. \"Okay, okay -\"\n\nThat catch in his breath told her everything she needed to know. She frantically pumped him with her left hand, rubbing him against her clit as hard as she could.\n\nOh, god. Me, too?\n\nKent exploded inside her panties and she felt the first blitz of semen flood between her lips. She didn't have the daring to push him toward her vagina, but she rubbed his tip hard into her clitoris as spurt after spurt of semen soaked her.\n\nSo, close, she thought as she moaned desperately.\n\nBut Kent had spent himself and started to soften too soon.\n\nDon't care. I don't care.\n\nAs Kent withdrew, she pushed her own fingers, through her panties, into her lips, delving for a second orgasm. His semen soaked through the panties and the liquid feeling made her shudder.\n\nSo smooth, so easy.\n\nThe second orgasm hit as she jabbed herself, sending her body into an uncontrollable, shaking fit and she nearly blacked out.\n\n\"Christ,\" she muttered, gasping for breath, aftershocks still faintly running up her spine.\n\nKent lay beside her, arm under her neck, sweat on his forehead, gently running his fingers over her thigh, triggering more aftershocks.\n\nShe looked down at her body, the black panties thoroughly soaked with semen.\n\n\"That was crazy,\" she murmured, pulling her legs up and pulling the panties off. Without, thinking, she took his underwear and used it to wipe herself mostly clean.\n\n\"I,\" she started, but lost her breath and needed to start again. \"I'm gonna rest a bit.\"\n\n\"Yeah\"\n\n\"Shower in a minute, though,\" Bailey looked at blearily. \"You?\"\n\nHe nodded as she curled up with her cheek against his chest."
    ],
    "authorname": "xtorch",
    "tags": [
        "spank",
        "whip",
        "naked",
        "bare",
        "count",
        "debt",
        "repayment",
        "costume",
        "halloween",
        "spanking"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-12"
}
{
    "title": "The Butterfly Effect",
    "pages": [
        "I could tell that you were extremely pleased with yourself. You waved the package in front of me and said, innocently (too innocently), \"It's for you.\"\n\nI looked at you suspiciously. \"It's addressed to you.\"\n\n\"But I ordered it for you! Go on! Open it.\" \n\nI knew you were up to something, but I decided to humor you. Besides, I was curious. I took the scissors you offered me and slit the packing tape along the edges of the box. It was a fairly small box, and there wasn't much on the package to indicate where it had come from. I open the flaps and pushed aside a layer of packing peanuts to see what it contained.\n\nI laughed. \"Oh, you did NOT buy this.\"\n\n\"Oh, but I did! And I think we should try it out today. See, it's got a remote and everything.\"\n\nI pulled it out to get a better look. It was one of those wearable vibrators in the shape of a butterfly made of soft green jelly-rubber with glitter and a matching wireless remote. \"I even got it in your favorite color,\" you said cheerfully.\n\nI stuck my tongue out at you. \"How thoughtful.\" I dangled the device in front of my nose by its thin elastic straps. \"Looks uncomfortable.\"\n\n\"Mmmhm. I know you want to try it out.\" \n\nAnd as usual, you were right. Just looking at it was making me wet. Not only did it look as if it would perfectly hug my clit, its body curled up and back, with a subtle hook at the end that I was certain would penetrate my vagina and rub up against my g-spot. The idea gave me delightful shivers. I grinned wickedly. \"I assume you want me to try it on.\"\n\n\"Indeed. But first, you should change.\"\n\nI raised my eyebrow. \"Change?\"\n\n\"Come on, you know how much I like to see you in that little black swing skirt...\"\n\nI sighed. \"All right. You are such a demanding man. Just a second, it's in the laundry room. Aren't you lucky I just washed it?\"\n\n\"Oh, yes. Very lucky.\"\n\nI was suspicious of your predatory smile (I kept waiting for you to lick your lips, like a wolf with a particularly tasty hunk of meat), but I complied. It was one of my favorite skirts, after all \u2013 black, pleated and short enough that I couldn't bend over. I liked showing off my legs, especially for you. I grabbed it from the drier and slipped it on, and looked in the mirror to make sure it was covering my ass. It was, more or less.\n\nWhen I returned to the living room, you were standing, swinging your car keys in one hand and the toy in the other. \"What are those for?\" I asked, indicating the keys.\n\n\"Oh, I thought we could go out to lunch,\" you said innocently.\n\nMy mouth formed itself into an O as it clicked into place. \"You horny bastard!\" I shrieked. \"You planned this!\"\n\nYou grinned sheepishly. \"Maybe just a little. Please? You always said it would turn you on.\"\n\n\"Yeah, but I didn't think we'd ever actually DO it,\" I muttered.\n\nYou waved the butterfly in front of my nose, making your most adorable puppy face. \"Pleeeeeeeeeeease?\" \n\nI shook my head, grinning. \"Fine, you silly man. Give!\" I pulled off my panties and snatched the butterfly from your hand, trying not to laugh at your gleeful face. After some finagling, I managed to get it situated. I had been right \u2013 its body DID rub up against my g-spot, and sent shivers down my spine whenever I moved. \n\nI reached down for my panties, but you grabbed them first. \"Nope! No panties!\" you cried.\n\nI glared. \"You're having way too much fun with this!\"\n\n\"Yes. Yes, I am.\" You tossed my panties across the room, took my arm and started to drag me towards the front door. \"Come on, love! I thought we could go to that Thai place.\"\n\n\"What, and scandalize that poor waitress who only speaks about three words of English?\" \n\nBefore I could protest too much, you had managed to get me in the car. Climbing in on the driver's side, you reached into your pocket and produced the remote. \"Let's see if this works, shall we?\" You flicked the switch and spun the dial slightly. Instantly, a gentle vibration thrummed against my clit, and I squirmed. \"Feels nice, doesn't it?\"\n\n\"Yes!\" I gasped. \"Now turn it off if you don't want a wet spot on your leather seat!\"\n\nYou complied, but continued to flick it on and off at various degrees of intensity as we drove into town, which meant that by the time we reached the restaurant, I was dripping wet. You would bring me to the edge of an orgasm, and then flick off the vibration, leaving me writhing in frustration. You parked behind the building, near the back alley, and turned to me, smiling broadly. \"Enjoying yourself yet?\"\n\n\"Yes...but...oooooh.\" I moaned as you flicked the butterfly on, then off again. \"But I'm not going in there if there's a wet spot on my ass!\"\n\nYou helped me out of the car, and spun me around. \"Nope!\" you said gaily. \"No wet spot!\"\n\nI sighed, resigned to my fate. \"All right. Come on, you dirty boy.\"\n\n\"Yay!\" you said cheerfully, like a little kid in a candy shop. You took my hand and we walked into the restaurant, to be greeted by the waitress who only spoke three words of English. She led us to a corner table, and I was glad to see that no one else was sitting near us. She handed us menus, which neither of us bothered to look at, I, because I already knew what I wanted, and you because you weren't here for the food. When she came back to take our orders, you flicked on the vibrator just as I opened my mouth to speak.\n\nI had expected you to do something like that, but it still startled me. \"I...oooh..ummmm.\" I took a deep breath to regain my composure, and tried not to think about how hot my pussy was or how good my clit felt. \"I'd like the\u2014mmmph!\" I stifled a moan as you suddenly increased the intensity, and kicked you under the table as I tried not to squirm. I heard you laugh quietly. I could tell you were enjoying yourself immensely. You took down the vibration a little, and I tried again. \"I'd like the Pad Thai with bean curd, please. And a pot of jasmine...teeeeeea....!\" A completely unexpected orgasm ripped through my body as you suddenly turned the vibration up to the max. I bit my lip to keep from screaming, and clenched my legs together, trying to keep my body from shaking too much. I let the pleasure wash over me as you ordered your food, and slumped down a little when she left.\n\n\"Was that good?\" you asked, smiling innocently, and turning off the toy.\n\n\"Yes...\" I gasped, \"but, oh, you asshole! I can't believe you--!\" I was cut off as you turned the vibration up to high again, and I had another orgasm. \n\n\"This really turns you on, doesn't it?\" you whispered as I recovered. \"You love knowing people are watching you come...\"\n\n\"Shhh!\" I said, halfheartedly. These were better orgasms than I'd had in awhile, it was true, but still! I didn't know if you could be arrested for having orgasms in public, but I didn't really want to find out. The waitress brought our drinks, and with your usual sense of timing, you thumbed the toy on as she was setting my tea in front of me, causing me to jerk and gasp loudly. The waitress looked at me with concern, and in broken English, asked if I was sick. I tried to smile reassuringly, but a reassuring smile is a rather difficult expression to muster up when one is coming uncontrollably. My face was burning, partially from embarrassment and partially from the heat that was radiating from between my legs and spreading into my body. \n\n\"She'll be all right,\" you said with a charming smile for the poor waitress. \"She's just having a hot flash.\"\n\nI kicked you indignantly under the table, and came again as you flipped the toy on to high. The waitress backed away, looking thoroughly confused, and fled into the kitchen. I took this opportunity to stand up, grab you firmly by the arm and drag you in the direction of the restrooms. \n\n\"Hey! Our food hasn't come yet,\" you protested, but I ignored you. I continued down the back hallway, past the restrooms, to the back door, which opened onto a sort of courtyard surrounded by a tall fence. A latched gate led to the back alley. The ground was a mixture of brown grass and gravel, broken up by the roots of a small tree backed into the corner between the fence and the far wall of the restaurant. I closed the door gently behind us, and finally let go of you.\n\nYou looked a bit confused. \"What are you doing out here? Peeing in the bushes?\"\n\nI didn't deign to answer that and instead marched over to the little tree and leaned against it to steady myself as I loosened the straps on the toy and let it slither down my legs to the ground, where it sat glistening, completely covered in my juices. My pussy was soaking, a fact that I proved to you by bending over and flipping up my skirt to reveal my dripping wetness. \"Fuck me. Now,\" I demanded.\n\nYou seemed a little taken aback. \"Here?\"\n\n\"You started this, so you finish it!\" I insisted. \"Besides,\" I added, grinning wickedly, \"it's not like you don't want to. You're rock hard. I can tell.\"\n\nYou laughed, and unzipped your pants to free your throbbing cock. I smiled. \"Now, doesn't that fell better?\"\n\n\"Much,\" you agreed. You advanced towards me and rubbed the head of your dick against my slit. I groaned in anticipation. \"Is this what you want?\"\n\n\"Ooh, stop teasing me!\" I begged. \"You know what I want!\"\n\nYou leaned over to nip my ear. \"Then tell me,\" you breathed heavily.\n\n\"Fuck me,\" I repeated. \"Fuck me hard.\"\n\nThis was obviously all the excuse you needed. You slammed your cock into me, and I nearly screamed. Plastic vibrating butterflies were all very well, but nothing could compete with a hard, hot, throbbing cock plunging into me, deeper with every thrust, brushing against my g-spot, already inflamed from the butterfly, but stimulated in entirely new ways by the heat of your cock. Your hands grasped my breasts, slipping under my blouse and bra in a practiced motion to pull at my nipples and roll them between your fingers, making them as hot and hard as your cock. I pushed myself against you, moaning and gasping your name. One of your hands left my breasts and reapplied its attentions to my throbbing clit, aroused and erect. I felt a huge orgasm building from a series of smaller ones. \"I'm going to come so hard,\" I moaned. \"Keep fucking me like that...ooh, your cock feels so good...\"\n\nI continued to murmur increasingly incomprehensible encouragement that quickly dissolved into passionate moans as I ran out of words. I could feel you tense as my orgasm began, and I felt you come inside of me as my orgasm ripped through me, sending waves of pleasure through my arms and my legs, up into my brain, which I think shut down for a minute or two. All of me was on fire, and my clit and my pussy felt hot enough to explode. My pussy spasmed around you as you clutched me in your own throes of ecstasy. Finally, I slumped against the tree, exhausted, and you slumped against me. We ended up sinking to the ground in a tangle of arms and legs, and I rested my head on your chest, feeling content and at peace with the world. \n\nI must have dozed off, because the next thing I was aware of was a loud and startled squawk. I opened my eyes and found our waitress standing in the door holding a bag of trash, completely stupefied. \n\nWe scrambled to our feet. I grabbed the butterfly from the ground and hid it rather guiltily and ineffectually behind my back. You zipped up your pants, and though you were beet-red, mustered your courage and reached into your pocket for your wallet. You took out a twenty, and pressed it into the waitress' limp hand. \"For the drinks,\" you explained. \"Keep the change.\"\n\nAnd then we ran like hell. "
    ],
    "authorname": "Usagi-chan",
    "tags": [
        "toys",
        "exhibitionist",
        "vibrator",
        "voyuer",
        "restaurant",
        "heterosexual"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-butterfly-effect-1"
}
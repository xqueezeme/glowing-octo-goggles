{
    "title": "Mike & Karen Ch. 06",
    "pages": [
        "Disclaimer: All characters are 18 years of age or older while actively engaging in sexual activity. This story is a prequel/sequel (sprequel?) to my other work, Alex &amp; Alexa. Many thanks and gratuitous panty-shots from Freja and Jeanie go out to my long-suffering proof-reader and editor for his help. As always, reviews are welcome; flames will be snickered at and deleted with extreme prejudice. Enjoy! \n\nPlease Note: There are some incest themes with a secondary couple in this story. Just a forewarning. \n\n*** \n\nChapter VI - You Can't Help Everybody \n\n1986... \n\nShe didn't really care for this bar; she found it smelly, noisy and rather annoying. True, the pub where she and her friends usually sang karaoke was often smelly, noisy and annoying, but this particular establishment had targeted, because it was where the frat boys from Xi Alpha Pi tended to hang out and cause trouble. \n\nShe wrinkled her nose in distaste at the stale reek of cigarettes and cheap beer that dominated the air of the dark interior. She couldn't believe she was in here, but somebody had to show these dogs what for. Too many girls had been teased and harassed, their behinds patted, smacked or grabbed, and the university was slow to do anything about it. Unacceptable. \n\nShe'd considered telling DeBourne, and letting him tear these fools apart, but it was also entirely possible that he would find himself expelled for giving these scum the violent drubbing they so richly deserved. Arrested, even. No, she didn't want to see that oversized lunatic expelled. Her life would be boring, then. \n\nAnd so she found herself here, walking toward the loud and raucous table, stifling an uncharacteristic burp, ignoring the sting in her eyes that their acrid smoke caused. She steeled herself and approached them, maybe twelve of the goons. \n\nDear Lord above, they really were dressed like stereotypical preps - they even had their collars popped! She was reminded of her cousin, Rodney. \n\nHere we go. This ends tonight ... \n\nThe loud and affected laughter around the table muted somewhat as she came up to them, with several of the denizens putting down their glasses to look at her. \n\n\"Heyyyyy baby ...\" one of them said, leering at her. His eyes travelled up and down her lithe frame, over her boots and jeans and blouse. Bronze hair crowned her regal head and tawny-amber eyes flashed at them disdainfully. \"You lookin' for a good time?\" \n\n\"The good time I am looking for is going to come at your expense,\" Karen said coldly, looking down at the man and then at the others around the table. There was a loud pause, and then they all burst out laughing hysterically at her statement. A crinkle at the side of her nose was the only manifestation of a sneer she allowed herself. \"I am glad you find this funny.\" \n\n\"Oh, babe, we're too drunk to even know what the hell you meant!\" continued the one who had addressed her seconds ago. His eyes crawled up and down her form, lingering on her well-toned behind encased in those jeans. His hand began to reach out for a caress. \"Maybe you wanna - ahhh!\" \n\n\"Your mother is going to weep when I bite that hand off, little boy ...\" she growled, now holding the hand he'd been meaning to harass her with between three fingers and pinching a nerve inside, causing him great discomfort. He whimpered as she made him stand up, obviously in pain, and then moved him away from his chair. She shoved him back contemptuously and pointed, indicating he was to sit elsewhere. \n\nDespite how drunk he might have been, he staggered off to find a seat at the bar. The other preps were still gaping at her when she sat down in the vacated seat and looked around the table. \n\n\"So,\" she began, ignoring the burn of cigarette smoke in her throat. \"Which of you hebetudinous bottom-feeders is in charge?\" \n\nSeconds passed before everyone looked at one man, wearing a polo shirt and a sweater casually wrapped around his shoulders. His dark brown hair was short and neat, his nails immaculate. He shrugged as he looked at her. \"Guess I am. What can we do for you, Miss ...\" \n\n\"You don't get my name, at least not yet,\" she said curtly. \"I'm here because you and your clones have been harassing women off-campus and I'm going to make you stop.\" \n\nAfter another round of laughter, the designated leader shrugged and smirked. \"Conduct off-campus isn't grounds for expulsion, toots,\" he replied. \"And grabbing ass isn't the same thing as rapin' a girl ... even if it's less fun.\" \n\nAnother round of laughter, along with idiotic secret gestures and handshakes among the dolts, all at the expense of Karen and her gender. She waited patiently for the merriment to die down, staring intently at the leader. \n\nHe waved his hand and told the other frats to shut up before looking at her, some of his mirth vanished. \"Stop us? And how, O nameless one, do you plan to do that?\" \n\n\"I will make a wager with you,\" she said, still looking at him. \"Pick any three of your companions here, the three best drinkers. I will have a drinking contest with them, shot for shot. If they pass out before I do, none of you will ever infest a downtown bar for the rest of the school year. Period.\" \n\nHe raised an eyebrow: \"You ... outdrink three of us?\" \n\nMore roaring laughter, some of which was now getting the attention of the other bar patrons, who glanced over to see what was happening. Karen waited patiently for the noise to die down. \n\n\"Let me make sure I've got this straight,\" he said, his eyes narrowing. \"If you outdrink my best three drinkers, in shots, our punishment is we need to avoid downtown bars until the school year is out?\" \n\nShe nodded. \n\n\"And what if we win?\" he asked pointedly. \n\nKaren felt a chill up her spine and steeled herself, taking a deep breath. \"Then you and your friends may do whatever you want with me for the next twenty-four hours.\" \n\nEveryone just stared at her in stunned silence. \n\n\"Well?\" she asked, putting her elbow on the table and very lightly resting her chin on her index finger's knuckle. \"Not afraid of a single girl, are you?\" \n\n\"Anybody else smell popcorn?\" asked one of the preps sitting next to Karen, looking slightly confused. \n\n\"Web, shut up,\" said the leader tersely, almost scowling at Karen. \"Anything we want ... for twenty-four hours ... no tricks, no cops, and whether you're passed out or not.\" \n\nThe auburn beauty nodded slowly. \n\n\"All right, sister, you've got a deal,\" he agreed, scanning the table. \"Where are we doing this?\" \n\n\"Right here is fine, as far as I am concerned,\" she said gesturing to the large, round and rather sticky table. \"Anyone not competing has to stand away, though.\" \n\n\"Fair enough,\" he agreed. \"You'll be drinking against me, Holtie and Trip. How does this work? Do we take shots per turn, or do you face one opponent at a time?\" \n\n\"Whichever ways suits you best,\" she said, shrugging. \"I have no preference. One last thing, though: winner buys the shots.\" \n\n\"How is that fair?\" he demanded. \n\n\"If you win, you get to violate and degrade me for twenty-four hours, which is worth a million times more than the shots you buy,\" she pointed out. \"If I win, I've protected the women on campus from scum-sucking predators for the rest of the year. I'd pay a hundred times that amount to be rid of you.\" \n\nHis eyes flashed angrily, and he raised his hand in the air and snapped his fingers. A waitress appeared quickly. \n\n\"We're having a drinking contest with the lady here,\" he announced. \"We'll be needing shots, lots of shots. You pick, honey. What do you want in your stomach when I fuck you senseless tonight?\" \n\nKaren looked up at the waitress, who seemed confused and rather apprehensive. \"Do you have any absinthe?\" she asked. \n\nThe blonde shook her head. \n\n\"Very well,\" Karen sighed. \"Single malt Scotch, perchance?\" \n\n\"We ... have quite a few bottles of Talisker ...\" the woman offered. \n\n\"That will do,\" Karen said, nodding. \"Fetch them hither, please. All of them.\" \n\nShe looked back at the leader, who seemed rather incredulous. More and more people around the bar were paying attention now, and curious as to what would happen. \n\nShe'd be damned if she was going to lose to this pig ... \n\n*** \n\nEveryone watched in astonishment as the competitors stared at one another with bleary eyes across the wet, sticky table. Two of the frat boys, the ones called Holtie and Trip, were already passed out on either side of the leader, who seemingly went by the name Finn. Trip was snoring loudly with his face pressed to the table, while Holtie was slumped back in his chair, his chin on his chest, and drooling, quite unconscious. \n\nDozens of shot glasses littered the table. Half of them must have belonged to Karen. \n\n\"You're not ... y'can't win ...\" gulped Finn, glaring at her unsteadily, waiting while someone filled a shot glass for him. He picked it up in what looked like a palsied hand, trying to keep the amber contents intact as he pointed at her. \"Y'fuckin'... y'can't beat us all ... \" \n\n\"I don't need to beat ... you all ...\" Karen replied, blinking and taking in a deep breath. \"I just need to beat you ... three ... and I have already beaten two of you ...\" \n\n\"Y'goin' down, bitch,\" Finn slurred, getting ready for his shot. He brought it up to his mouth and somehow sloshed the liquid down his gullet, his chin glistening with saliva. He was sweating profusely and had turned quite pale. \"Goin' ... down ...\" \n\nKaren held her shot glass firmly as it was filled, determined to show more composure than her opponents, even if she was seeing three of each of them. She'd been certain there were only three to begin with. Yes, three ... \n\nShe brought the shot glass to her lips and tilted her head back, the smoky, burning Scotch rushing down her raw throat. Her head swam and most of the bar had simply fallen away. She had tunnel vision. There was only her foe. Defeat him. Nothing else mattered. \n\nShe rested the shot glass on the table with a clack, and cheers erupted around her from people eagerly watching. Except for the nine gawking frat boys who were not participating, everyone else seemed to be in her corner. Karen wished she had the neurons left to care. \n\nFinn glared as she successfully downed the shot and he angrily demanded another. His hand could barely keep still to allow the pour. He shook his head and blinked several times, his eyes glassy and pupils wide. He swallowed a burp and stared down at the shot glass in his hand. It seemed a thousand miles away. \n\nWith determination he brought it up to his lips and tried to tilt his head back, but he gagged, spewing the Scotch onto Trip before falling over, crashing off his seat to the floor. The bar echoed with roars of laughter, cheers and shouts of concern from the remaining frat boys. Karen waited until the noise had died down. \n\nOne shot. Just one more. \n\nSounds, slurred, indistinct and nonsensical sounds, dragged through her head in slow motion. Her vision was thick, syrupy, with people and things appearing flat, like in the credits of old Hong Kong movie reels. With supreme effort she turned her attention to her hand, in which she held the dreaded shot glass. She watched as Scotch sloshed into the little cylinder, but it might as well have been an ocean to her - a daunting ocean of fermented barley. \n\nWhy was she doing this again? \n\nIt didn't matter. If she'd done this to herself, the reason must have been a damned good one at the time. Trust your sober instincts that got you in this mess. You knew what you were doing. Finish it. One shot ... \n\nHer arm felt like lead and she thought her head must have sagged back on the fulcrum of her neck ridiculously. It felt like it had. The glass was approaching where her mouth should have been. Her lips were numb; she had no frame of reference for the dimensions of her face. \n\nWhat did a face look like? What does it look like? \n\nUnbidden, the huge, grinning visage of Michael DeBourne dominated her vision. \n\n\"Get out of the way, you lummox!\" she heard herself say indignantly to the floating blonde head, wreathed in light. \"I need my mouth! You're in my mouth's way! Move! I didn't ask for you here!\" \n\nHer heart pounded in her throat, indicating that she was perhaps wishing he had been here. \n\n\"Mouth ... mouth ... geometry of a face ... look at his face ... where's the mouth?\" \n\nKaren reached out to touch his lips, to use them as a reference, and vaguely felt her fingertips touch her own. She'd found her mouth! She pinched her lower lip, and it barely tingled in response. She felt the shot glass nudge her fingers of the hand on her mouth. She slid it along her finger, found the lips and tilted the glass toward her, while somehow leaning backward and craning her head back. \n\nShe couldn't see. Were her eyes closed? The smoky sting trickled down her gullet, and now all she had to do was place the shot glass on the table. It was in front of her, she was sure of it. It had to be, unless someone had moved it. \n\nSlowly, inexorably, she allowed her hand to fall in a controlled manner, finally rewarded with a \"CLUNK!\" that was louder than a cannon firing to her. Ecstatic cheers reverberated through the bar and she dimly understood that she had somehow won. Against all odds, she'd won. \n\nWon what? \n\nShe felt herself being lifted out of her seat and then hoisted up as her vision swam around her. Was she on someone's shoulders? The air seemed much thinner up here. Her head bobbled as she tried to look around, vaguely aware of the human shapes applauding and cheering for whatever she had done. \n\nA glass was pressed to her lips and ice water flowed into her mouth. She coughed once but held the offering in her mouth, allowing the cold to center her. Her vision cleared slightly and she noticed that she was indeed on the shoulders of two people. Dozens of others were all cheering or looking at her in awe. \n\nKaren slowly turned her head and glanced down at the scene of her victory. Several frat boys were desperately trying to wake up three others, one of whom was lying in a heap on the floor, covered in his own sputum. \n\nYes, that was it. She had challenged these jerks to a drinking contest. If she lost, they could do things to her. If she won, they didn't enter a downtown bar for the remainder of the year. \n\nAnd apparently she'd won. \n\nThe bartender approached her now, grinning. \n\n\"Ne'er seen anything like tha' in m'life, lass!\" he said in a cheerful brogue. \"But I r'member yer wager with these buggers. They'll nae be allowed back in here for the rest of the school year, an' I'll make sure every other bar downtown knows as well. Y'hae my word.\" \n\n\"Thank you ...\" she murmured, still holding the water in her mouth and not daring to swallow. \"May I ... use a bathroom?\" \n\n\"Take 'er t'the staff one, quick now!\" the bartender barked. She was shuffled off to the indicated lavatory, excused herself from her compatriots and locked the door behind her as she closed it. \n\nKaren slumped down the door, begging the rushing sound in her head to cease and the queasiness in her stomach to go away. She forced herself to her knees, looking for the porcelain altar she was about to need. She shuffled toward it, thankful that it seemed clean. \n\nShortness of breath ... churning stomach ... giddy panic ... \n\n\"Here we go ...\" she thought grimly as her body suddenly tried to fling itself inside out. \n\n*** \n\nKaren walked unsteadily out of the bar door, waving backward as she politely eschewed any company or escort. She was feeling fine (so she said), and she had a ride coming. The crisp October night air cooled her skin and was bliss to her lungs, after at least two hours in that grummy, smoky environment. It was worth it, she told herself. Girls on campus would not have to put up with those prep jerks for at least eight months now, if the downtown bartenders kept their word. \n\nA forest-green Jaguar XJ6 pulled up to the curb, and she watched as a man got out of the driver's seat and came around to open the door for her. \n\n\"If you value your life, Jordan, you will not mention my odoriferous nature,\" Karen muttered as she almost fell into the back seat. \"Am I achieving clarity?\" \n\n\"As always, madame,\" the older gentleman said in his clipped, but not unkindly, English tone. \"But may one, out of personal concern, inquire as to what chicanery you have indulged in? You look like you might be in need of a hospital.\" \n\n\"No,\" she said flatly as she felt the sedan glide off into the night. \"Just back to campus, please. And there is no need to tell my parents either, if you don't mind.\" \n\n\"My dear Karen, you know I am your devoted servant,\" Jordan replied, looking in the rear-view mirror at his charge. \"And as always, I would humbly ask that you at least explain to me what it was you were doing, so that I can make that guarantee in peace of mind. You have always been honest with me, since you were little.\" \n\nKaren sighed. \"There was a group of frat boys that has been sexually harassing female students off-campus for several weeks. The university has indicated that it cannot do much if they're not on-campus.\" \n\n\"And what of the constabulary, my dear?\" he queried. \"Have we lost faith in Toronto's finest?\" \n\nShe shrugged. \"Those results might take forever, Jordan. And I was mad about this now.\" \n\n\"Those poor frat boys,\" he mused. \"What, if one might inquire, didst thou do to them?\" \n\n\"I challenged them to a drinking contest. They would not set foot in a downtown bar for the rest of the year if I won.\" \n\n\"Heavens, I dread to think of the wager in the other direction, knowing you as I do, madame,\" the man said, making a wan face. \"Since I am now driving you around, I will assume that you were somehow triumphant. How many did you challenge in this tippling competition of yours?\" \n\n\"Three.\" \n\n\"And how, madame, did you accomplish this?\" he asked pointedly. \"Your Gordon Highland heritage might offer you a slightly increased resistance to the creature, but not enough to take on three adult males so readily. There is no shame in having cheated, but one must inquire as to how you did.\" \n\nShe rubbed her face, wishing this numbness would leave her lips and cheeks and forehead. \"Before I set foot in the bar, I'd swallowed a whole pound of white butter to line my stomach and retard the effects of the alcohol in my system.\" \n\nJordan said nothing for several seconds before finally speaking: \"Not to put too fine a point on it, madame, but I would not want to be your colon for the next three or so days.\" \n\n\"Don't remind me ...\" she muttered testily, settling lower in her seat and scowling, while clenching her behind tightly. \n\n*** \n\nAlexa giggled behind her hand as she sat on a caf\u00e9 patio with her sister, putting down her espresso cup. Karen was sitting across from her, waiting for her younger sibling to finish tittering. She was also wearing a smirk, remembering the incident. Not fondly, perhaps, but she had to admit that in context, it was no doubt amusing to hear about. The sisters were wearing breezy sundresses, Karen in light green and Alexa in white. A wide-brimmed hat shaded Karen's patrician face, since she was facing the sun. \n\n\"That's so you, Kar,\" Alexa sighed, finally controlling herself but still smiling. \"The easy thing would have been to use legal channels, or even start organizing protests against them wherever they went, but no, you had to do something epic and absurd. I'm sure you were the talk of the campus.\" \n\n\"Maybe a little,\" Karen allowed. \"I couldn't let your brother-in-law keep the spotlight to himself, could I?\" \n\n\"And did he even notice or care?\" Alexa asked lightly. ",
        "\"Not as much as I would have liked,\" admitted Karen. \"I desired no admiration from the student body at large, which is where I got it from. Michael, well, he was simply cheerful and helpful.\" \n\n\"Helpful?\" \n\n\"I'll explain another time,\" Karen said, looking down at the elegant watch on her wrist. \"I'd best be going, and your quarry should be along momentarily, if your projections are correct.\" \n\n\"And where are you off to?\" Alexa queried as her sister stood up. \"Sure you don't wanna stay? Maybe we could share.\" \n\n\"You're as bad as your brother-in-law,\" Karen sighed, making Alexa giggle again. \"I'll pass, thank you. Enjoy yourself and I wish you success in your endeavour.\" \n\n\"Thanks, sissy,\" Alexa purred as Karen leaned down to share a quick but affectionate kiss. \"Love you.\" \n\n\"Love you too, blondie. I'll see you at home, eventually.\" \n\nAlexa watched as her sister swished off, a captivating figure on the busy street. She smiled as she saw people staring at Karen when she went by. \n\nSo regal. So patrician and elegant. Like nothing and no one she'd ever seen before. \n\nShe resumed sipping at her espresso and just crowd-watching for several minutes, when finally a hand touched her on the shoulder. \n\n\"Alexa?\" \n\nShe looked up and smiled. \"Oh, Heather! Hi, how are you?\" \n\n\"I'm good, thanks,\" the brunette said, smiling warmly. \"It's good to see you.\" \n\n\"Likewise,\" Alexa replied, gesturing to the seat her sister had recently vacated. \"Care to join me?\" \n\n\"Not imposing, am I?\" \n\n\"Not at all, I'd welcome the company,\" said the blonde as her visitor sat down. \"Just leaving class?\" \n\n\"Actually, yeah,\" Heather answered, sitting. She was wearing jeans and a light sweater that accented her bust. \"Done for the day now. What about you?\" \n\n\"Had morning classes, so just spending my afternoon people-watching,\" Alexa said breezily. \"I love watching people.\" \n\n\"I can see that,\" Heather mused, looking at her new friend. \"Like you're imagining their lives and writing stories about them in your head. I can see you as a writer.\" \n\n\"Well, if you have time, may I buy you a caffeinated beverage or a nibble?\" Alexa offered. \n\n\"Oh, well thank you, I appreciate it, you're very kind,\" Heather said, relaxing and crossing her legs and smiling prettily. Someone came over and took her order and she returned her attention to the stunning blonde sitting across from her. \n\n\"How're you adjusting to the campus and life in general?\" she inquired. \"You've been here for quite a few months now.\" \n\n\"So far, so good,\" Alexa replied easily, noticing that her bust kept drawing Heather's attention but choosing not to show that she'd noticed. \"Classes are pretty much as I expected.\" \n\n\"And it's not weird having your older sister and your brother-in-law as two of the most senior and storied professors in the university?\" \n\n\"To be honest, it's something of a help,\" Alexa replied. \"I know it has been for Freja, too.\" \n\n\"Good to hear, but what about life outside the classroom?\" Heather asked. \"Found yourself a guy or a girl to keep you occupied?\" \n\nAlexa smiled: \"No guys, rest assured. I'm decidedly a six on the Kinsey scale. What about you? I know you've been a casual partner with my nephew, but are you straight or bi?\" \n\nHeather considered: \"I ... have always thought of myself as straight, to be honest. Sure, I've done the silly girl things, like practicing making out or fondling boobs in my teens, but I've always been motivated by sex with guys.\" \n\n\"Your tone indicates that you're not so sure,\" Alexa observed while a server brought Heather's cappuccino. \"Been questioning of late?\" \n\nThere was another pause before Heather answered: \"That's a somewhat awkward question to answer, because ... it might involve you.\" \n\nAlexa looked surprised. \"Myself?\" \n\nHeather blushed a little: \"Y-yes.\" \n\n\"Well, you don't need to worry about me deciding to mack on you, I'm safe to be around,\" Alexa assured her. \"Courtesy is -\" \n\n\"Oh, I didn't say I was uncomfortable with it,\" Heather said somewhat hastily. \"It's just weird, because I'm not sexually attracted to women, and then there's you. And if I'm honest with myself, I am aroused by you.\" \n\nAlexa studied her for a moment. \"Are you looking for a lesbian experience, Heather?\" \n\n\"It sounds selfish when you say it that way,\" Heather replied. \"I'm not pining after you, and it's not like I masturbate feverishly to images of you every night, but ... if I were open to trying sex with a woman, I'd want her to turn me on or arouse me the way you so inexplicably do.\" \n\nAlexa smiled. \"You're certainly an attractive girl, I can see girls wanting to try you on for size.\" \n\n\"Thanks ...\" Heather said quietly, blushing and twirling her finger though a lock of her hair. Alexa smiled gently and leaned forward a little. \n\n\"I'll tell you what,\" she said quietly, so that only Heather could hear her. \"If you decide that you want to try something with a girl, let me know. No strings or expectations. Sound good?\" \n\n\"Well,\" Heather breathed, her blush of embarrassment replaced by a flush of arousal, \"I'm not doing anything this afternoon and evening ...\" \n\n*** \n\n1986. St. George Campus, Whitney Hall: \n\nThe bedroom was dark, illuminated only by a little rock salt lamp in the corner, giving off a warming glow. She sat quietly in her bed beneath a coverlet, staring dully at the far wall, on which hung a lithograph of a naked woman that Lisa had bought one day. She winced as the doorknob turned and clicked open and her roommate poked her head in. \n\n\"Sorry,\" the redhead whispered, looking apologetic. \"I just wanted to let you know you have a visitor.\" \n\n\"You're joking, right?\" Karen sighed quietly, squeezing her eyes shut as she wrestled with her annoyance. She couldn't get too annoyed, because being annoyed hurt. Sound hurt. Light hurt. Her heartbeat hurt her head. Life hurt. \"Who could possibly be suicidal enough to want to see me at a moment like this?\" \n\n\"Well ...\" Lisa said uncertainly, pursing her lips and then stepping aside. Into the dark room stepped an enormous shadow. Karen's expression remained deadpan as the behemoth approached. \n\n\"Heard what you did. Impressive,\" DeBourne said in his bass-baritone voice, but softly enough to not set her synapses on agonizing fire. In fact, she found it rather soothing, although she sure as hell was not about to admit it. \n\n\"Your bucolic accolades are appreciated, but is there any particular reason they couldn't have waited?\" she almost growled. Her heart was pounding in her chest now and making her head hurt. Normally, she didn't mind the throbbing his presence brought, but today it was torture. \n\n\"Oh, I didn't come here to torture you with banal praise,\" he replied, shrugging as he sat at the foot of the bed. Lisa had moved off to the other side of the room and was sitting quietly on her bed, just observing. Karen had looked after her so often when she was sick or in distress, that she was thrilled to be playing nursemaid in turn. \"I was wondering if you were sick of suffering yet is all.\" \n\nKaren scowled at him: \"And what is that supposed to mean?\" \n\nHe smiled. \"You and I are alike enough to know when dramatic effect assists in dealing with the mortals.\" \n\n\"You think I'm allowing myself to be wracked by my body's rebellion against alcohol poisoning so that I can shut myself away and let them all talk and speculate down below?\" \n\n\"Well, as long as you don't magically reappear after three days,\" Mike quipped. \n\n\"You're such a heretic ...\" Karen muttered, closing her eyes. \"Why are you here? What is this mystical offering of yours that will kill my woes?\" \n\nMike pulled up the backpack he'd brought in off the floor. He unzipped one of the compartments quietly, so as not to cause Karen undue pain, and pulled out a mason jar filled with a somewhat murky liquid. She frowned as she looked at him while he presented the glass container to her. \n\n\"I'm ... going to need some elucidation here,\" she stated, examining the jar. \"Is this some sort of Kapuskasing moonshine, meant to cure my hangover by getting me drunk again?\" It had the vaguely greenish tint of polluted river water, seeming somehow more viscous, and tiny objects and bits of detritus or sediment looked to be suspended in it. All in all, it screamed 'Do not drink me!' \n\n\"Hardly,\" he chuckled. \"Although Kapuskasing moonshine is nothing to sniff at. No: this is pickle brine, courtesy of my favourite Russian deli down in the St. Lawrence Market.\" \n\nShe looked up at him skeptically: \"Pickle brine.\" \n\n\"Yup. Ultimate hungover cure,\" he confirmed, nodding. \"Learned that from getting drunk with Russians back home.\" \n\n\"Nothing like homegrown wisdom to solve the world's problems,\" she muttered. \"So, I'm just supposed to drink it?\" \n\nHe nodded. \"Just open the jar and knock it back.\" \n\nShe glanced up at him suspiciously. \"What does it taste like?\" \n\nMike shrugged. \"To be honest, it tastes like crying, it tastes like broken promises, it tastes like the Terminator waded into the Care Bears movie and opened fire ...\" \n\n\"Then why would I do that to myself?\" she almost demanded. \n\n\"Because it may taste like dragon barf, but I can guarantee you that it's still preferable to what you're going through now,\" he reasoned. \"Drink it, and I guarantee that within a minute, your headache will be gone and you'll be seeing in Technicolor again.\" \n\nFacing another skeptical look from Karen, Mike held up a second jar. \"If you want, I'll drink a whole jar myself. Parity between us is one of the great laws of the universe, after all ...\" \n\n\"That supposed to make me feel better?\" she asked. \n\n\"Not so much, no,\" he replied with a shrug. \"But knowing I'm suffering just as much as you are for that minute might cheer you up.\" \n\n\"Harrrrrr ...\" she grumbled, unscrewing the lid. \n\n\"Is it really that horrible?\" Lisa asked curiously, approaching the bed. \n\n\"Get a glass and you can try a small amount,\" Mike offered. \n\nLisa went back to her side of the room and returned with a small rinsing cup. Mike unscrewed his jar and poured a small amount into her proffered vessel. He then looked back at Karen, his eyebrow raised. She sighed as heavily as she dared and then nodded. The three students held up their drinks. \n\n\"On three,\" Mike said. \"Drink it all in one breath. Trying to tackle it in sips will kill you.\" \n\nThe girls nodded. \n\n\"One ... two ... three!\" \n\nMike and Karen brought the jars to their lips but paused, while Lisa faithfully slurped in the contents of her cup. Her eyes widened, and her cheeks puffed out while she looked at her companions in horror. They both stared at her intently, not having drunk theirs yet. \n\nLisa spasmed and tried not to gag, looking like a bullfrog, and about the same colour. She clapped her hand over her mouth while she dropped the cup and dashed out the door, rushing to the communal bathrooms. \n\n\"Feel better?\" Mike chuckled. \n\n\"Well, maybe a little, although we were cruel,\" she admitted, smirking. \"I'm going to really have to make it up to her later, once I can feel my body again. Do I really need to do this?\" \n\n\"Only if you want to leave this torture behind.\" \n\n\"Well, that I do,\" she sighed. \"My life is in your hands, DeBourne. Bottoms up ...\" \n\nShe pressed the jar to her lips and squeezed her eyes shut as she began knocking back the brine. A sense-shattering symphony of sour and sharp bitterness exploded across her tongue and snaked through her sinuses. Ignoring the urge to gag and vomit, she gulped it back, reminding herself that salvation from this hangover hell lay at the bottom of the jar. \n\nShe gasped as she dropped the jar, her eyes bulging while the brine lashed its way down her gullet and churned in her stomach, fighting an ugly war with the toxins that were poisoning her. She squeezed her eyes shut and clenched her teeth, her hands balled up in fists as she fought down a wave of gaseous nausea. Serpents seemed to crawl through her veins as she squirmed in place, praying for death. \n\nKaren flopped back onto her propped pillows, breathing heavily. The nausea passed, and her mind was so clear that she was almost dizzy. The aches in her body were gone. She felt almost ... euphoric in a weird way, even if the inside of her mouth tasted like a sour garbage dump. \n\nSlowly she sat back up and blinked, staring at Mike, who regarded her casually. He was still sitting at the foot of her bed, an empty jar in his massive hand. \n\nKaren made a wry face. \"Why aren't you thrashing around in outrage after drinking that?\" \n\nHe shrugged: \"I've drunk it often enough that it doesn't affect me so severely. You handled it like a champ, though. Most grown men act more like Red did than you.\" \n\nShe exhaled heavily and relaxed, absolutely amazed at how much better she felt - the nausea was fleeing from her body, and the hammer-and-tongs headache was already gone, replaced by an almost alarming clarity. She couldn't believe how much better she had become so quickly. And it had been barely more than a minute. \n\n\"Yeah, them electrolytes are somethin', aren't they?\" Mike chuckled, knowing from experience exactly what was happening. \"The brine burns the toxins out of you really quickly and gets your blood pumping again. Opens up the constricted veins causing the headaches as well.\" \n\n\"Thank you, Doctor Podunk,\" she said dryly. \"And thank you for bringing that vile concoction. I owe you one.\" \n\n\"Forget it,\" he said, waving it off. \"I owed you for the assist with the Calabi-Yau equation that one night where my brain had turned to fudge.\" \n\n\"I know nothing about your Calabi-Yau Manifolds,\" she replied, shrugging. \"But math is math, and you'd been working at that equation constantly for over a day, so your serotonin levels were low and your cognitive faculties impaired. My perspective was fresh, that's all.\" \n\n\"Well, yeah,\" Mike admitted, looking away from her. \"But I still appreciate the assist.\" \n\n\"Why are you looking away, DeBourne?\" she asked, confused by his sudden behaviour. \n\n\"Just, uh ... cover up,\" Mike replied, still looking at the far wall. \n\nShe frowned and looked down at herself, noticing that her coverlet had indeed fallen away, leaving her magnificent breasts exposed. \n\n\"Damn,\" she thought. \"Must have fallen down when I shrugged. I haven't been able to feel my body for hours, so I didn't notice.\" \n\n\"What's the big deal?\" she asked, tugging the coverlet back up to conceal her bust. \"You've already sketched me naked, right?\" \n\n\"Well, yes, in a classroom environment,\" he replied, turning to look at her again, the gesture making her both happy and secretly thrilled. \"Here in your private room is somewhat different.\" \n\n\"I appreciate your honesty, but I somehow doubt you're like this around all women,\" Karen mentioned. \n\n\"No, just you,\" he answered, standing and towering over her. He fished around inside his backpack and dropped a sheaf of papers at the foot of the bed. \"I'd best get going, but there are some assignments from Professor Kintzel. Hope you don't mind, I solved the schlock math for you, so that you can just concentrate on the good stuff. Paying attention is gonna be difficult for another few hours, trust me. Best to just rest.\" \n\nShe nodded: \"Thank you.\" \n\n\"See you around, princess,\" Mike said, nodding and turning to leave. She was pleased to note that her head didn't screech when the door clicked shut. She sank back down onto her bed, sighing and looking at the ceiling. Thank God he'd brought that pickle brine with him. \n\nShe made a grim face as she reached down beneath the coverlet and felt around. \n\nShe prayed that being wet was just a side effect of that godawful hangover remedy. \n\n*** \n\nThe present: \n\nAlex ran alongside his father through the campus, both wearing tank-tops and shorts. No end of appreciative stares lingered on the blond giants as they thundered by. Karen often quipped that it was morale-boosting for the vast majority of the female students, and many male ones as well. \n\n\"So where's your wife?\" Mike asked as they completed their third circuit of the campus. Their skin glistened with sweat, muscles contorting beneath the taut flesh. Alex was built like a gymnast, whereas his titan father looked like a '70's bodybuilder, proportional but massive all over. At 203 cm and 145 kg (6-foot-8 and 320 pounds), he towered over everyone on campus. It was a running joke around campus that he was a quantum physics nerd trapped in a Space Marine's body. \n\n\"Well, to be honest, probably elbow-deep in Heather by now,\" Alex replied, keeping his eyes on the path ahead of them. \n\nMike considered what his son was saying, putting the pieces together rapidly. \"That's actually a good plan,\" he mused, ignoring the wide-eyed stares of a group of female students as they ran by. \"Alli must have volunteered that strategy.\" \n\n\"Yeah,\" his son agreed. \"Even if it had occurred to me, I never would have suggested it. And to be honest, it never even remotely occurred to me.\" \n\n\"Yes, but you're not a Blackwell woman,\" Mike chuckled. \"Sex can be a weapon and a means of persuasion. Jeanie wasn't kidding about the whole Bene Gesserit thing.\" \n\n\"Believe me, I know it,\" Alex said readily. \"It rarely requires more than puppy-dog eyes from her, but if Alexa wants me to do something I'm unlikely to otherwise do, she just rubs her boobs on my arm. If she resorts to that, I'm usually willing to burn down an orphanage for her.\" \n\n\"Well, thankfully your mother and aunt tend to use their superpowers for good rather than evil,\" Mike laughed. \"I'm sure Alli knows exactly what she's doing in this case. And I'm willing to bet that it'll be easiest on Heather this way, too.\" \n\n\"I think that was part of her motivation in suggesting it,\" Alex said as they rounded a corner onto a tree-lined boulevard. \"I don't think Heather is psycho or vindictive, but if she wanted to make life difficult for us, she certainly could. I'm not sure I could explain it to her where she wouldn't take it the wrong way.\" \n\n\"That's fair,\" concurred his father. \"Knowing Alli, she has this all well thought out and will see to it that everyone is fine by the end of it. Hell, you'll probably be able to be friends with Heather.\" \n\n\"Once she's done porking my wife ...\" Alex grunted. \n\n*** \n\nHeather collapsed back on the bed, her eyes and chest heaving. Her skin glistened with sweat as the unreal waves of pleasure continued to swell through her. Scintillating colours behind her eyes and the tingling in her limbs marked a euphoria she wished would never go away. She was still staring, unseeing, at the ceiling when Alexa lay down beside her, propped up on her elbow and smiling wickedly. \n\n\"Still with me?\" she asked with a teasing smile. \n\n\"Holy shit ...\" Heather breathed, still trembling from the tumultuous orgasm she'd endured. \"Don't take this the wrong way, but only your nephew has made me cum like that before, and he had to bruise my brainstem to do it ...\" \n\n\"And we haven't moved much past the basics,\" Alexa giggled. \"Wait 'til I girl-fuck you, then you'll see God.\" \n\n\"I'm an atheist, but I totally believe you,\" Heather panted, not trying too hard to control herself. \"I refuse to believe all lesbian sex is that good, or there'd be no straight women.\" \n\n\"I'm particularly gifted, perhaps,\" Alexa purred, putting a hand on Heather's breast and caressing it gently, brushing the nipple to give her lover exquisite shivers. Her hand then trailed slowly down her warm body, arriving at her gooey pussy. Alexa stroked a finger through the lips before bringing it up and smiling as she pushed it into her mouth, sucking the tangy cum off of it. She repeated the gesture, but this time offering the finger to Heather, who closed her eyes and hummed in delight as she tasted herself. \"I'm not attempting to convert you, by the way.\" ",
        "\"I'm not sure if I'm relieved or disappointed,\" Heather sighed as Alexa gently fingered her pussy again. \"I couldn't be objective about it at the moment, anyway. Hormones and all.\" \n\n\"Yeah, the bliss is unreal,\" Alexa agreed, letting Heather suck on her finger again. \"Your body's really responsive. I liked it.\" \n\n\"Thanks, I was hoping to not be a fish for you. So, now what?\" \n\n\"Well, it's only fair to let you recover for a few minutes before moving on to round two,\" Alexa pointed out. \n\n\"So, we just wait while I get my bearings back?\" Heather asked. \n\n\"Oh, I didn't say that,\" Alexa cooed as she crawled on top of her new lover, squashing their soft bodies together. She knotted her fingers with Heather's and gently pinned them beside Heather's head. Nose-to-nose, they smiled at each other before sharing a deep, sensuous kiss, with Alexa's tongue slowly working its way into Heather's waiting mouth. The brunette moaned and squirmed under Alexa, reveling in the feel of their soft bodies fitting together. \n\nHeather did not need all that long to recover, and their kissing soon became more erotic; hands began to wander freely, exploring, kneading. Their tongues tangled wetly and Heather's skin flushed as a warm and wet desire took over. \n\n\"Can I ... taste you too?\" she asked, almost gasping for air as she broke the kiss, her eyes glassy with lust. \"I want to try it ...\" \n\nAlexa smiled and nodded. She'd give Heather all the time she needed. She pushed herself up so that she was sitting over the brunette, straddling her hips, their pussies lightly touching. She ran her hands through her thick, glorious golden tresses while Heather reached up and played with her magnificent breasts, lost in wonder at how sensual and erotic Alexa was: a goddess of lust made flesh. \n\n\"How do you want me, then?\" Alexa asked, squirming her hips just a little and making Heather tremble. \"Would you like to lie between my legs, or down my body? Want me to straddle your face?\" \n\n\"Oh, that sounds good,\" Heather said in a voice barely above a whisper of delight. \"Yeah, go ahead and sit over me and face down my body. Then you can lick me too when you get the urge.\" \n\nAlexa nodded and nestled down again to kiss Heather hungrily, squirming their breasts together. She then teased Heather by slowly sidling her lovely body up her lover's prone form. She squirmed her sticky pussy against Heather's breasts, shivering as the nipples brushed her clit and Heather groaned, gyrating in need beneath her. \n\nAlexa finally reached Heather's mouth, stopping just shy of it and smiling down at the girl. She snaked a hand between her legs and used two fingers to pull her thick netherlips open, exposing her shining, bubblegum-pink pussy. Heather's eyes were wide as she gazed at the vision before her. Alexa's scent of desire, the lust, filled her mind and almost supercharged her need beyond belief. She watched as Alexa drew her finger up and down her slit, strands of her wetness pulling away with the digit, which she now gently offered to Heather. Heather took the proffered finger in her mouth and hummed in bliss as Alexa slid it back and forth between her lips, all the while inching her pussy closer to Heather's mouth. She withdrew the finger as she pressed her womanhood gently to Heather's lips, and the brunette girl shivered in pleasure, taking gentle hold of her lover's thighs. \n\nHeather kissed Alexa's pussy gently, thrilled by the taste. The whole world had fallen away from her, and there was only this moment to exist for. She slowly snaked her tongue out and moved it up and down the lips, just like she'd felt Alexa do to her. She heard Alexa sigh above her, felt her hand caress her cheek and then move against her clit. \n\nSlowly she pushed her tongue inside Alexa, feeling the wet walls tighten slightly. She shuddered as one of Alexa's hands reached back and stroked her pussy, teasing her. Her fingers gripped the blonde's thighs a little tighter as she snaked her tongue farther in, exploring. Her mind spun at the sensations and tastes - earthy but somehow tangy. It reminded her of the taste of her own cum, but somehow much more. All she could say with certainty was that she loved it. \n\nAlexa now undulated gently over her face, helping her with a rhythm. Heather could feel Alexa's magnificent ass flexing as she moved her hips back and forth or in tiny circles. This girl certainly knew what she was doing when it came to pleasure. She'd never felt anything like this. \n\nHeather concentrated on licking Alexa's pussy, just enjoying this experience. In spite of how dominated she felt, she could tell the blonde goddess was very giving as well, that their mutual pleasure was most important. Alexa's silken skin against hers was the most thrilling thing she'd ever felt. She pushed her tongue in deeper, shivering as she heard a moan above her. \n\nShe felt Alexa lift up slightly and begin turning around, so that her pussy was still over her mouth, but she was now facing down Heather's body. The blonde's incredible ass cheeks hovered just over her and she took hold of them readily, pulling them apart to expose her little pucker and her dripping womanhood. Heather stroked gently with her thumbs and kissed at the ridge of flesh that ran between the two tight entrances and got another moan from Alexa, who wiggled on top of her. \n\nHer tongue now slid along the perineum and then toyed with her pink knot before tracing its way down to Alexa's pussy and began massaging it again. Alexa churned her ass and hips lightly at the stimulation before leaning down and kissing her way around Heather's hips. The brunette opened her legs and allowed her in. Alexa wasted no time in slithering her tongue around her lover's wet slit and then pulled the lips open and pushed inside. Heather groaned loudly into Alexa's pussy and licked even more eagerly. \n\nThe two girls squirmed together, pleasuring one another, gasps and moans escaping their mouths as they tongue-fucked one another. Alexa shuddered as one of Heather's slender fingers found its way into her behind, while Heather whimpered as Alexa lashed her clit with her tongue and stuck two fingers into her pussy, crooking them and pulling back along the top wall. \n\nMoaning was replaced by panting, squirming by writhing, and the lovers' movements became more frenetic as they pushed each other closer to the knife-edge of bliss. Alexa's tongue swirled around Heather's pulsing clit in a way she'd never felt before, driving her to new heights of euphoria. Her legs were almost thrashing involuntarily. She was certain people in the hallway of her apartment building could hear them, but she didn't care. If she shrieked loud enough to wake the dead when she came, it didn't matter. She wanted to cum - she had to cum - harder than she ever had. She licked even more eagerly, wanting Alexa to cum with her. And even though she was no expert at lesbian sex, Heather was certain that she would make Alexa cum. \n\nThe weight of Alexa's lush, athletic body was all that moderated the almost uncontrollable shaking of Heather's frame. She gasped as she licked in a frenzy, her finger pushing in and out of Alexa's ass rapidly. Besides Alexa's tongue, she could feel at least three fingers deep inside her, wiggling individually and driving her wild with lust. She could feel the orgasm building and boiling inside her, overwhelming her senses. She was gasping now, almost as if she were not able to take in air. She pushed her face into Alexa desperately, yearning for her cum. \n\n\"Uh! Cum with me!\" the blonde rasped, her body tightening up. \n\nHeather pushed her face in as far as she could as she shrieked, losing all control of her body as the orgasm battered her. She felt like her cunt was gushing, oceans of cum jetting out of her. Her body was one giant muscle that clenched furiously, forcing pleasure through her like nothing ever had before. She could barely hear Alexa groaning loudly, and barely felt her pussy and ass clench her tongue and fingers as she came, bathing Heather's face with her glorious essence. \n\nBlackness. Had she fainted? No, the tidal wave of her climax was still battering her. Had she cum so hard that she couldn't see? She wasn't terribly aware of what her physical body was actually doing. All she could feel was the orgasm, her limbs tingling, distant constellations. \n\nThe roaring tsunami of pleasure slowly ebbed out of Heather, leaving her limp, wet and exhausted beyond all measure. Her chest rose and fell as silence settled on the bedroom. Alexa was no longer on top of her, but lying off to the side, also breathing heavily. Heather reached out wearily and found Alexa's leg, caressing it. She felt Alexa kissing her ankle and almost purring, whispering to her, although she couldn't hear what she was saying. \n\nAfter who knows how long - was it a minute? an hour? - Alexa finally sat up, gently pulling Heather up into a sitting position. She nestled their bodies together, legs scissored and wrapped around one another. Their breasts squashed together and their gooey pussies kissed as they hugged, looking into each other's eyes. Sweat shone on their warm, flushed skin, damp hair cascaded over their shoulders and they could feel one another's hearts beating through their chests. \n\nThe kiss was deep and emotional, thrilling them both. Tongues tangled wetly, caressing their mouths. The kiss ended and was followed by a hug, neither woman uttering a word for some time; there was only the beating of their hearts. Heather still wasn't ready to talk when she pressed her forehead to Alexa's, keeping her eyes closed. How could she even begin to speak when there was so much and yet nothing to say? \n\n\"D'you ... do you get the post-orgasm stupids when you try to speak?\" she asked finally in a quiet voice. \n\nAlexa nodded, her forehead still pressed to Heather's. \"Yup. I either say nothing or just run with it. Depends on the girl, really, whether I trust them and my instincts about them.\" \n\n\"And do you trust me?\" Heather asked. \n\nAlexa smiled now. \"Yeah. You can orgasm-babble at me. It's okay.\" \n\n\"Good,\" breathed the brunette. \"Because I know it's just hormones and dopamine talking, but ... I am really in love with you right now.\" \n\nAlexa kissed her again. Heather shivered as they continued exploring one another's mouths. Hands wandered and fondled. The kiss broke and they both sighed, brown and sapphire eyes locked, trying to read one another. \n\n\"I guess you've had enough mad, passionate sex with girls over the years that you don't fall in love every time you cum your brains out, hm?\" Heather mused. \"Who was the last girl you were in love with?\" \n\n\"That'd be Freja,\" Alexa answered. \"We were pretty sure we were in love for years, before I moved away from Europe.\" \n\n\"Oh, but she's married to Jeanie now,\" Heather said, a note of sympathy in her voice. \"Are you really okay with that? It's okay to be hurt; I guess she meant a lot, or even everything, to you.\" \n\n\"I'm fine with it,\" Alexa replied, nodding. \"I really am. They're perfect for one another. Yeah, Fre and I are soulmates, but Jeanie is her wife and her destiny. I am happy for her, because I love her so much.\" \n\n\"You're a lot more emotionally mature than I am,\" Heather admitted. \"I ... here I am, babbling about being in love with you, but for some weeks now, I've been considering a steady relationship with your nephew.\" \n\nAlexa said nothing, but simply looked into Heather's eyes. Her soft expression betrayed nothing, meaning Heather would have to expound upon her statement. \n\n\"And I ... I kinda feel like a slut,\" she confessed, looking down now. \"Here I am, talking about going steady with a really nice guy who's always been good to me, even if we've never been serious, and I go on about falling in love with the first girl who makes me cum my brains out? Bitchy, right?\" \n\n\"No, not at all,\" Alexa said, shaking her head slightly. \"A heart is very rarely locked in place.\" \n\n\"But I still feel like I'm acting slutty, or even cheating on him,\" Heather insisted. \"I mean ... God, isn't it weird that you're his aunt and I just finished fucking you?\" \n\nAlexa shrugged. \"Heather, I am the last person on earth who should judge anyone for that sort of behaviour. Trust me, I don't judge you for it.\" \n\nSomething in Alexa's gaze made Heather pause. She didn't think she was incredibly good at reading people, but something in the way her blonde lover had just spoken, and the look in her bewitching eyes, made Heather understand that there was something here she didn't understand yet. \n\n\"Alexa,\" she murmured, her heart pounding now, and not from the orgasm, even if she didn't know why. \"What ... what are you not telling me?\" \n\nHere it is, Alexa thought, drawing in a breath and steeling herself. She'd made this sound so easy to Alex, and when he asked, she'd brush it off, as it were the simplest thing on earth. \n\nShe would do anything to protect the man she loved. \n\n\"Heather ...\" she said softly, still holding the girl in their mutual hug, \"... Alex and I are in love. We have been since virtually the moment I stepped off the plane and met him at the airport.\" \n\nSilence. Heather's expression was unreadable for several moments. Her eyes never left Alexa's. \n\n\"I'm ... I'm still in love with you, Alexa ... the hormones, they're protecting me from an icy feeling that terrifies me,\" she stammered. \"Please, be honest with me while you're holding me like this ... have I been played?\" \n\n\"No, Heather, not at all,\" Alexa whispered, her eyes glassy as she saw the pain flood into her lover's eyes. \"This was all so tangled and inevitable, but no, you were never played. And ... I'm sorry.\" \n\nHeather, shaking, leaned her head down against Alexa's shoulder and wept. \n\n*** \n\n1986 ... \n\nMike stood at the dorm phone, staring dully into space. He really didn't know what to say. \n\n\"Michael? Michael?\" \n\n\"I'm here, mom,\" he said listlessly. \"I just ... please say it all again for me? Don't spare me the details.\" \n\nAnnette DeBourne sighed, knowing that her oldest son would not accept no for an answer. It was his way or the highway, and always had been since he was little. Heaven help the world if he ever decided to follow the career path of tyranny. \n\n\"Your friend, Kee,\" she began again, taking her time so she could remember all the details. \"They ... she'd gone missing and they think they found her, Michael. If it's her, then she's been murdered.\" \n\nMike closed his eyes, releasing the dread of the initial report from his mother and allowing this new reality to sink in. \"If you know details, mom, don't hold back. Tell me.\" \n\n\"I'm sorry, baby, but as yet I don't,\" Annette said sadly. She knew how hard this had to be for him, how he was probably blaming himself for not being in Kapuskasing to somehow protect her. \"Nobody knows very much, but the police are pretty certain it's her. We'll know more soon, confirm the identity.\" \n\n\"What happened?\" he growled, his eyes now open. \"How was she murdered?\" \n\nAnnette faltered. The danger in his son's voice frightened her, and despite how sad the situation was, she was glad he was all the way down in Toronto. \"Michael, I appreciate that you want to know, but I don't ... it makes me ill to think about it, Michael, it wasn't pretty, and they think it wasn't quick. Please don't make me relate the details.\" \n\nHe took a deep breath. \"Of course not, mom, I'm sorry. I didn't mean to put that on you. You know how I get.\" \n\n\"Yes, I do,\" she said gravely. \"All too well. And as sad as I am for Keegsquaw's family, I am truly glad that you are so far away right now.\" \n\n\"Just ... make sure I get a copy of whatever information the police eventually release, mom,\" Mike said, noticing he'd clenched his free hand into a shaking fist, the knuckles turning white. \"And ... can somebody please talk to Maat for me?\" \n\n\"Of course,\" she said readily. \"Your father and Con are always welcome over at the reserve, they'll go over soon. We'll just give them some time.\" \n\n\"That's a good idea.\" \n\n\"I'm so sorry, Michael, I know Kee was very special to you,\" Annette said, trying to keep the tremble out of her voice. \"Just visit Trinity College and the chapel, darling, when you can. And try not to break anyone.\" \n\n\"I promise, mom. I love you. Say hi to dad and give Con, Roxy and Josh a hug for me,\" Mike said before hanging up. He resisted the urge to slam the receiver down, shattering the table beneath. He towered over the table, glowering at the far wall. A student walked by, saw the look on his face and broke into a run, escaping the area. \n\n\"Kee...\" \n\nHe wasn't ready for the chapel. Not yet. No, this deep and burning fury welling up in him had to be dealt with first. \n\nThe icy numbness he felt kept his rage down until he'd gone back to his room and changed into his workout clothes. The heavy workout room awaited. \n\n*** \n\n\"I still can't believe you were dumb enough to do that,\" Mona snickered as she walked alongside Janet and Lisa, the three of them tailing Karen, who seemed to be determined to leave them behind, if they could not leave this particular subject matter behind. \"Honestly, you could have killed yourself.\" \n\n\"But I'm still here, aren't I?\" Karen pointed out. \"The idea worked. Nothing ventured, nothing gained, right?\" \n\n\"Even if you've still got the Hershey squirts,\" quipped Janet, causing Mona and Lisa to make grossed-out noises while Karen's ears turned pink. \"Just promise you won't do anything that crazy again, okay? You're kinda hard to replace.\" \n\n\"You'd best remember that before making jokes at -\" \n\nThere was a shout and a thunderous impact that echoed down the hall, causing the ever-skittish Lisa to jump and yelp in front. A series of dreadful thumps reached them, giving every student in the hallways nervous pause. Even Karen was standing still, her eyes somewhat wider than normal, and not daring to move. \n\n\"Holy shit,\" Janet breathed finally. \"What ... what the hell is that?\" \n\n\"Three guesses,\" Karen muttered finally, her self-control returning. \"What else could make that much racket and not be a berserk mastodon?\" \n\nShe began walking toward the sound of the horrific noises, consciously ignoring them as they grew louder. Her friends were following, but they were falling farther behind, as if afraid to continue. Karen rolled her eyes and turned to them. \n\n\"Just go,\" she said flatly, her expression leaving no room for argument. \"I'll handle this, and if he sees you're frightened, then he'll probably just get madder. I'll find you later.\" \n\nThey all nodded and turned back the way they'd come. \n\n\"And they thought that me nearly killing myself earlier with alcohol was dangerous ...\" she muttered to herself. She kept resolutely walking toward the gym, even though just about every synapse in her body was yelling at her to get the hell away. \n\nNo, those aren't bombastic yells from a martial arts routine. Those are pain and loss. He's really hurting. \n\nDid she dare go forward? \n\nHer feet felt like they were walking on pins as she approached the doorway. Everyone else had long since cleared the area. Whatever was being hit inside the room, she could almost feel the shock waves of impact out here. She swore she could, even if that was ridiculous and impossible. She felt it in her chest. \n\nAgainst all odds, she willed herself to turn and head in through the open door to the heavy workout gym. \n\nAnd yes, what she saw terrified her. \n\nDeBourne was wearing only shorts, standing in front of and savagely destroying a Wing Chun dummy made of solid wood. The various short arms had already been knocked or punched off, and the body was dented and splintered in several places. \n\nThat damned thing is oak! How is that possible?! ",
        "He was facing away from her, but his body language gave her a sharp chill. His glistening, sweating skin was tautly wrapped over his rippled muscles, which looked like a relief map of Swiss mountain valleys. Every single muscle was like a coiled spring, moving with a life of its own. \n\nShe hadn't taken more than a single step into the room before he sensed someone and whirled around. Karen stopped dead, her blood frozen in her veins. He looked at her, his massive chest heaving, ice-blue eyes flashing with an inhuman fury. His massive hands were clenched into fists, and those fists were bloody, as were his elbows, knees and feet. Splinters protruded from his skin, but he seemed not to notice them. His wild mane of blond hair lashed around his shoulders, and his teeth were clenched. \n\nMy God ... he could tear me to ribbons without trying ... \n\nThey stared one another down, the only sound to be heard his breathing, like the bellows working in a forge. \n\nAnd possibly Karen's heartbeat. \n\nNow I might actually die ... she allowed as she slowly walked forward, denying the fear she felt. She couldn't understand exactly why she was so frightened; he was just a man, even if he was a big one. He wasn't a rabid dog, prone to attacking anything within reach. It wasn't as if he'd lash out and hit her, turning her skeleton to powder with one punch from his titan fists. \n\nSo why was she so frightened? \n\nShe came closer, resisting the urge to clutch her arms to her chest, instead locking them behind the small of her back, nervously massaging her now-unseen thumbs. She hoped it gave her an impassive air. Because that was just about all she had going for her right now, looking impassive. \n\nBefore she knew it, she was standing in front of him, looking up at his blazing eyes, like the fusion reactors in distant blue stars, captivating yet capable of utter annihilation. Beautiful and terrible in equal measure, they took her breath away. \n\nAnd then she knew what to say. \n\n\"Who was taken from you?\" she asked quietly, her voice seeking honesty. \n\n*** \n\n\"Do I have any right to feel hurt?\" Heather asked in a small voice. \"To feel outraged?\" \n\n\"Yes,\" Alexa admitted, nodding. They were still holding one another, because Heather needed to be held right now, and Alexa was all she had. \"I wouldn't blame you, Heather.\" \n\n\"I ... don't know what to think ...\" the brunette murmured, her eyes glassy. \"I'm a stupid slut who jumped into bed with a hot girl, so that has me questioning how devoted to Alex I could be. But then you tell me that you planned this all out?\" \n\n\"I did, but I didn't want to,\" Alexa said, wondering why explaining herself was so hard, since she'd rehearsed this a thousand times in her head. \"And I promise you, it was my idea, not Alex's.\" \n\n\"Yeah, I ... I don't think he'd be capable of something like this,\" Heather sighed. \"And I don't mean that to sound, like, insidious or treacherous or anything, but I think Alex is just too upfront to come up with something like this. He's a straight shooter; it's one of the reasons I have a thing for him.\" \n\n\"Me too,\" Alexa agreed. \"Heather, I genuinely like you, I have since I first met you. And if I'd been convinced that there was any other way to tackle this with no risk to my relationship with Alex, I'd have taken it, trust me.\" \n\n\"I just feel like a chump,\" Heather said somewhat bitterly, although she did nothing to leave the embrace. \"You guys used me to cover your little affair, to make sure nobody suspected anything.\" \n\nAlexa nodded, denying none of it. \"We talked over every single possibility we could think of, Heather. Just coming out and telling you, letting you catch us somehow. But each time, we saw an aspect of risk to it that terrified us, in case you got angry and vengeful.\" \n\n\"Does Alex think I'm like that?\" Heather asked. \"I mean, I'd get it if you thought I might be, we don't really know each other, and girls see other girls differently, but ... I think I'd be really hurt if Alex thought that of me.\" \n\n\"He was pretty damned convinced that you weren't,\" Alexa said, shaking her head. \"But you need to understand that everything around us was being seen through a lens of total dread, that the tiniest thing going wrong would end our world ... would end us. We were on edge for months, and yes, it probably coloured our perceptions quite a bit,\" she admitted, sighing and stroking Heather's cheek. \n\nHeather sighed and closed her eyes. \"Guess I can't blame you for being paranoid,\" she admitted. \"I'd probably be too.\" \n\n\"And it wasn't about you, per se,\" Alexa explained. \"It sounds awful to say, but everyone knew Alex had dated you before, and that just made for a convenient cover. Alex didn't want to even pretend to date other people at first; he didn't like the idea, because it was dishonest with you and it felt like cheating on me.\" \n\n\"Well, at least he knew he was being dishonest,\" Heather allowed. \"He must be totally gone on you to do something this crazy. I mean, yeah, if I did get mad, I could really make life hell for you guys.\" \n\n\"I know,\" Alexa said quietly. \"And if you had found out about us any other way, would you have ultimately felt any differently?\" \n\nThe brunette considered for some moments and then shrugged. \"I ... might have competed for him with you, but I doubt I would have done anything mean, like out you to ruin things. He'd hate me then, and where would that get me?\" \n\n\"I wish we lived in a society that didn't frown on the relationship Alex and I have,\" Alexa sighed. \"Because I had no chance in hell of resisting it, Heather. Only way I could have would've been to turn around in that airport terminal without a word the moment I laid eyes on him and head back to London. That's what would've needed to happen.\" \n\n\"That bad, hm?\" Heather mused dolefully. Alexa nodded. \"Well, I know I like Alex, but I never got around to admitting I was in love with him. Yeah, I sorta had a thing for him, but how many times did I tell him we were 'just friends' or 'friends with benefits,' right? I told him we couldn't be an item because he was too smart for me.\" \n\n\"I remember,\" Alexa said, squeezing Heather's shoulder gently. \"He told me.\" \n\n\"And then I guess I decided I had a thing for him again, because he seemed different.\" Heather looked down: \"I guess it's because he was fucking you and in love with you. I sensed it and it made him desirable all over again. Maybe more so than ever. I was pretty gone on him at the wedding.\" \n\n\"I'm so sorry, Heather,\" Alexa said quietly, gently brushing a tear from the corner of her lover's eye with her thumb. \"Please believe me when I say that.\" \n\n\"The problem is, I do,\" Heather sighed. \"And a part of me doesn't want to. A big part of me wants to be incredibly pissed off, another part wants to run away and hide and cry. But ... oh, Alexa ...\" \n\nHeather burst into tears, burying her face in Alexa's shoulder again. Alexa hugged her heaving body, stroking her hair, fighting down the warm wave of shame that flooded through her. No, she'd done this for her love of Alex. And there was nothing she wouldn't do for him. She'd leave her new family behind tomorrow and run away with him to Borneo if that's what he'd wanted. She loved her sister, her brother-in-law, Freja and Jeanie, and she loved her new life. \n\nBut there was only Alex. The rest was nothing without him; she knew that about herself now. They were the world to one another. There was no other way. \n\nBut that didn't mean she couldn't retain her humanity and feel bad about this. \n\nAlexa winced and squeezed her eyes shut, trembling as Heather bit her shoulder. It wasn't terribly hard, but it hurt. She could feel Heather shaking in frustration, but she didn't let go. A good ten seconds went by before Heather gasped and released the grip with her teeth, continuing to cry on Alexa's shoulder. Alexa hugged her tighter, soothing her. She'd give her all the time she needed. \n\n\"God damn you ...\" Heather sobbed. \"I want to hate you so much, and I can't ...\" \n\nAlexa said nothing, letting Heather speak. She had nothing to add yet anyway. Heather wept for several more minutes, and when she finally looked up, Alexa's eyes misted, because all she saw was a girl in pain, feeling used and played. \n\nLost. \n\n\"Alexa, I ...\" Heather faltered, trying to control herself. She'd stopped crying, but clearly she was not done with the throbbing hurt in her chest. \"I need to be able to forgive you, so that I can get past all this. I ... yeah, I'm still angry, I guess, but that's not what I want. I don't want to wreck everything, because it won't make me feel any better, y'know?\" \n\nAlexa nodded slowly. \"It sounds dumb to ask, Heather, but ... what can I do?\" \n\n\"Will you tell me everything?\" asked the brown-haired girl. \"How it all came to be? Maybe I'll ... maybe I won't feel so bad if I know that the forces of destiny were working against me all along.\" \n\nAlexa smiled: \"So, just hold you here like this and recount the events of an entire summer and beyond in full, sordid detail?\" \n\n\"That's the first price to pay, I think,\" Heather said, wiping at her eye. \"Probably not the last, but it's the one I need most. I might ... I might get a little bitey if I have another angry moment.\" \n\n\"Well, as long as you don't bit my nipples or clit off, I'm sure I'll survive that,\" Alexa sighed gently, looking down at her shoulder to see the reddish-purple set of teeth marks marring her flawless, creamy skin. \"What then?\" \n\n\"If I get through all this craziness...\" Heather ventured, \"... d'you think we can still be friends?\" \n\n\"I'd like that, Heather. I told you, I genuinely like you.\" \n\n\"Just not in love with me,\" Heather nervously quipped, pursing her lips. \n\n\"No,\" Alexa giggled, shaking her head gently. \"Not in love with you. And I'm pretty certain Alex would be happy to remain friends too. He's a good guy that way.\" \n\n\"One of the best, so I'm told ...\" muttered Heather. \n\n*** \n\nKaren's heart felt like a jackhammer in her chest as she stared up at him. She kept her hands behind her back, denying the overwhelming urge to fold them across her chest. It was confrontational, even if it felt protective to her. She didn't need to protect herself here. \n\nHe glowered down at her, not because he was angry with her, but because whatever rage burned inside had yet to be quenched. She had interrupted his fury, before he either destroyed the entire gym, or injured himself badly. And she couldn't let that happen. Every single muscle in his body stood out, bulging and almost pulsing beneath his skin as his blood raced through his body. \n\nDear God, he was utterly terrifying. \n\nBeauty can calm the beast. Offer him serenity. Something. Anything. \n\n\"Who was taken from you?\" she asked gently. \n\nSomehow, imperceptibly, his body language softened, and he turned his head away from her gaze to look at the wall. \n\n\"Her name was ... Kee. Keegsquaw,\" he said finally. \n\n\"Did you love her?\" she asked. \n\n\"Well, n-no, not like that,\" he faltered. \"I wasn't in love with her. But she was very dear to me. We had a bond.\" \n\n\"She didn't just die; obviously, something terrible and unfair happened,\" Karen observed. His head snapped around to look down at her again, his expression sharp, and she almost quailed inwardly, thinking she'd gone too far or been too glib. \n\nIt's too late to pull that back. Keep going, but be gentle. \n\n\"I'm sorry,\" she said softly. \"No one should ever lose anyone like that.\" \n\nHe raised his massive fist, looking down at the shredded knuckles that were oozing blood onto the floor. He frowned for a moment, as if noticing the mess for the first time and then back at her. \"You the duly elected representative, here to tell me to stop frightening the villagers?\" \n\n\"Oh, to hell with the villagers, DeBourne,\" she said plainly, her hands now on her hips. \"I wanted to make sure you didn't hurt yourself. A Kung-Fu dummy can be replaced. A sprung wooden floor can have blood marks cleaned out of it. A destroyed gym can be replaced with endowments.\" \n\nShe looked at him evenly. \"But I'm not so sure you can.\" \n\n\"What am I, your pet project?\" \n\n\"No,\" she said, shaking her head. \"But it's hard for the people out there to help people like us. No one else would have brought me that death concoction to make me feel better after I poisoned myself, just you. Nobody else knows what to do now, so, here I am.\" \n\n\"They too scared to get close to me?\" he asked. \n\n\"I don't blame them; you're scaring the shit out of me, and I'm pretty much afraid of nothing.\" Karen pointed out. \n\nMike exhaled heavily and seemed to almost deflate, the unreal, bristling tension disappearing from his body. His eyes were still dangerous, but seemed somehow distant. He looked at his elbows and even his knees now, seemingly not concerned by the blood, torn skin, or splinters of wood wedged in them. \n\n\"Kee was murdered, pretty brutally, it seems,\" he said finally. \"Shouldn't happen to anyone, much less a good soul like her.\" \n\n\"And you blame yourself,\" Karen said quietly, not reacting when his eyes hardened, almost glaring at her. \"I'm not psychoanalyzing you, DeBourne, but I can see it. And you're enough like me that I know you in some ways. You feel responsible for everyone around you somehow, and nothing hurts worse than when you think you've failed them.\" \n\nShe stepped closer, wanting to be nearer to him, for reasons she would not admit to herself for some time to come. \"Unless she lived with you, then you can't be held responsible for what happened to her. And even then, but you know that.\" \n\n\"You took it on your shoulders to protect the women on campus by doing one of the stupidest things anyone's ever heard of, or die trying,\" he stated, nodding slightly. \"Yeah, you do understand, don't you?\" \n\n\"In this particular case, I think I'm all you've got,\" Karen replied, shrugging. \"You didn't fail her, DeBourne. Our entire society did. Even you can't prop all that up, although I wouldn't blink if you did.\" \n\nMike sighed again and looked around. \"Is all this a tantrum on my part?\" \n\n\"That's how most people will perceive it, if word gets out about your friend,\" Karen admitted. \"But I know better, so who cares what they think? If I'm right, you were going to burn off all this rage, and then head to the chapel, weren't you?\" \n\nHe nodded. \n\n\"You should probably clean up first, you're a mess,\" she observed, looking at his hulking body, shining with sweat and smeared with his own blood. \"I have Bactine, gauze and tweezers in my purse. Let's go find a bench to sit on and I'll pull the lumber out of you before we go to Trinity.\" \n\nMike hung his head and took several deep breaths, his eyes closed. She could tell he was still full of towering rage inside. When his eyes flicked open, he was glaring at the wall beside them. She smiled lightly. \n\n\"It's only a wall,\" Karen pointed out. \n\nHe snarled and slammed his fist against the wall, denting the poured concrete. She winced slightly, while he held still for several seconds. She walked over to his hand and pried it gently away from the ugly, bloody impression and looked at his knuckles. \n\n\"And it's only a broken hand,\" she sighed, shaking her head. \"Okay, change of plans: infirmary first, then Trinity. Just try not to destroy the campus on the way through, promise?\" \n\nShe led him out of the gym and towards the infirmary. \n\n*** \n\nHowever long it had taken to relate the events of the summer in the fullest detail she could manage, that was how long Alexa had been sitting in this embrace with Heather, still body to body. In many ways, mostly mental, it had been exhausting, although she was sure her body would be sore as well, once they finally moved. \n\nThe telling of the tale had brought forward many emotions in her, and seemingly had in Heather as well, who listened intently, without a trace of skepticism. She genuinely wanted to understand. They'd held one another close, sometimes with their foreheads pressed and eyes closed as Alexa related events, and with Heather occasionally asking small questions. \n\nAlexa didn't bother with many acute sexual details, unless they explained something significant. A few times she found herself speaking quietly, her lips gently grazing Heather's, and their eyes closed. Perhaps not surprisingly, it was while describing her romantic moments with Alex that she found this occurring. Heather didn't seem to mind at all, often whispering back the same way. \n\nHeather in turn talked about her dates with Alex, both those before Alexa's arrival and those after, when they'd been trying to cover their tracks. She rarely spared any graphic details, and both girls got warm in the re-telling of them. \n\n\"I love hearing about your sex,\" Alexa breathed as they kissed and nibbled at one another's lips while she caressed Heather's jaw. \"I admit, it makes me wet, thinking about Alex fucking you.\" \n\n\"Will you tell me details of some of your really hot times with him?\" Heather asked, biting gently on Alexa's lip while her fingers flexed on her sides. She was getting very turned on, and her pussy was very moist. \n\n\"Is that the right thing to do?\" Alexa queried, pinching one of Heather's nipples gently, making her sigh. \"Do you really think it'll help?\" \n\n\"It might,\" murmured the brunette, her head tilted back, thrilling to the sensations. \"But more than that, you kinda owe me ...\" \n\nAlexa nodded and leaned down slightly to kiss one of Heather's breasts and swirling her tongue around the nipple, sucking on it. They nestled closer, sticky pussies kissing, their slippery lips mingling and clits throbbing against one another. \n\n\"Alexa,\" Heather gasped, cradling her blonde lover's head. \"If ... when this is all said and done ... if I'm feeling better about all this ... do - gnnnnnnn! - d'you think you and I can still be casual lovers?\" \n\n\"That's totally up to you, Heather,\" purred Alexa, sliding her tongue up Heather's chest and arriving at her mouth to kiss her. \"But I'm perfectly fine with it, if you are. Alex wouldn't care one bit, he'd probably be relieved.\" \n\n\"I dunno ... I dunno if I'll want to do things with Alex,\" Heather murmured, reaching down and grabbing Alexa's ass, squeezing it. \"Maybe, I dunno. But that's up to him, isn't it? Uhnnnnn, God, Alexa, I wanna fuck!\" \n\n\"Me too,\" panted the blonde goddess, her skin flush now with her desire as she leaned back a little, exposing her body to Heather. \"You sure? This is what you want?\" \n\n\"Yes,\" rasped Heather, nodding and looking at Alexa's body greedily. \"Do that girl-fucking thing to me. God, please ...\" \n\nAlexa leaned back on her hands, making Heather do the same, but keeping their legs scissored. Both girls moaned as their pussies pressed tightly. \n\n\"Now just ... squirm your hips around,\" Alexa breathed, her sapphire eyes glazed with lust. \"The rhythm'll find itself.\" \n\nHeather complied, beginning to move her hips in circles, shivering as she felt her netherlips slithering against Alexa's, electrified by the thrill of their clits brushing. Warm, gooey, wet and wholly enthralling. \n\n\"Jesus,\" sighed the brunette, churning her hips. \"Why does this feel so good?\" \n\n\"Why wouldn't it?\" Alexa pointed out breathily. \"Hundreds of thousands of nerve endings on either side, rubbing on one another. But it's also like a secret lesbian kiss, something only girls can share. Guys can't do it, they can't even pretend to do it. It's all ours.\" \n\n\"Gnnnnnn, love it,\" groaned Heather lustily. \"God, I hope we can be fuck-buddies ...\" \n\nThey ground their pussies together, moaning and panting, locked at the hips. The heady aroma of women in heat enthralled them, the wet, slick sounds of fucking music in their ears. Their hearts pounded as they pressed against one another, harder and harder, hips almost lifting off Heather's bed. ",
        "Neither of them tried to prolong the orgasm, and both strained, arching their backs and leaning back on their hands. Gasping, panting and almost yelping, they squished against one another desperately. Alexa grit her teeth while Heather shuddered and almost spasmed, her breath catching in her throat. They both cried out in rapture as they came, bathing one another's pussies with their mingling essences. \n\nBoth girls collapsed back on the bed in opposite directions, chests heaving as they stared at the ceiling. Alexa purred and caressed her breasts, her hips still working slowly against Heather's, undulating expertly. Heather could barely move, stunned by how hard she'd cum. She felt Alexa unwrap herself from their sapphic tangle, and slowly turn her body around until her face was at Heather's pussy. She hugged Heather's hips and began lapping lovingly at the frothy, mingled cum on her lips. Heather did the same happily, shivering at how they tasted together on Alexa's womanhood. \n\nMinutes passed as the lovers cleaned each other of their cum before they finally sat up again, assuming their previous position, locked in a body-to-body embrace, legs wrapped around one another. They kissed deeply and sensually for some time before Heather blushed and hid her face against Alexa's shoulder. \n\n\"Dammit,\" she said in a tiny voice. \"Totally in love with you again ...\" \n\n*** \n\n\"So, how did your little endeavour turn out?\" Karen asked as she walked alongside her younger sister through the campus, under the shade of the tall canopy of trees. Karen was wearing a stylish sundress, while Alexa had wiggled into a pair of form-fitting capris and a tank top. \n\n\"Better than I imagine it should have,\" Alexa admitted. \"I mean, yes, I'll do anything to protect my relationship with Alex, Kar, but I still feel bad for what we did to Heather.\" \n\n\"I understand,\" the auburn beauty said gently, pulling her sunglasses above her forehead. \"But like you said, you and Alex were seeing everything through a filter of dread, where there were no good or happy choices, just less painful ones as you stumbled forward. So Heather is doing fine?\" \n\n\"Yeah, I guess,\" Alexa replied. \"I kinda fucked her so hard she fell in love with me. I guess that worked to my advantage, but ...\" \n\n\"Being a sex goddess has its drawbacks when you feel guilty about how you use it,\" mused the older sister, reaching down and squeezing Alexa's hand. \"It may not have been the kindest method available, Alli, but it's the one you knew would ultimately work. There's something to be said for that, and it probably made Heather's life easier somehow, once she didn't feel played anymore.\" \n\n\"I'm glad she allowed me to explain everything in full detail,\" sighed the blonde. \"It gave her some perspective. Sure, she jumped into bed with me because she was horny, and that made her question her seriousness about Alex, and I didn't have to do anything to seduce her. She already pretty much wanted it. I just left the door open.\" \n\n\"Which served your purposes anyway,\" Karen added. \"If you weren't around, she might have been a decent fit for Alex, but nowhere near as good a fit as you are. You two are perfection.\" \n\n\"Well, if anyone would know about that, it's you,\" Alexa said, blushing slightly. \"Still so many hurdles to overcome.\" \n\n\"Indeed there are, and you two have certainly locked yourselves into place for a world of potential hurt and inconvenience,\" agreed her older sister, looking straight ahead while she spoke. \"I know from experience, although perhaps not to the same degree as you'll encounter. But Alli, I promise you: he thinks that it's worth it ...\" she turned toward Alexa: \"... that you're worth it.\" \n\n\"I had a lot of ridiculous social stigmas to overcome when my peers found out about Michael, some virtually penniless pleb from Northern Ontario. But that didn't deter me, because I loved him. Once I'd made up my mind, I would have left everything behind for him, my family included.\" \n\n\"Fortunately, it didn't come to that,\" Alexa pointed out. \n\n\"And I promise that Michael and I will never force you two to choose between yourselves and the people who love you,\" Karen said in a quiet but assured tone. \"Because I would miss you both so very much.\" \n\nAlexa smiled, but her eyes were misting and she resisted the urge to wipe at them with her finger. \n\n\"So Heather's going to be fine?\" Karen asked, getting back on the original topic. \n\nAlexa nodded. \"She wants to be casually sexual with me, for sure. If she likes the lesbian thing, I can probably fob her off on Fre and Jeanie easily as well.\" \n\n\"Does she want anything from Alex?\" \n\n\"She doesn't know, but at least she respects that it's his choice,\" Alexa replied. \"I think Fre and Jeanie and I keep him pretty used up as it is.\" \n\n\"Hard to imagine,\" Karen mused, smirking lightly. \"I'm glad this worked out, Alli. The toughest parts are yet to come. Forget the legal complications and challenges, we have to endure what the Blackwells will attempt to do once it's known about you and Alex.\" \n\n\"What do you think they'll do?\" Alexa asked uncertainly, looking at her sister while they walked. \n\n\"I have, since dad became ill, fought off several challenges to the estate, by members of the family who want to be the controlling interest. I've kept it in a trust, executed by me, as his oldest direct relative. People keep challenging my right to be the executor, since I'm not even in the business at all. And when they find out about you and Alex, they'll attempt to spin that as me being unfit to carry on the family name, legacy and controlling interest. It won't be pretty.\" \n\n\"I'm sorry, Kar,\" Alexa murmured, looking at the ground now. \n\n\"Don't be; if it wasn't this, it would have been something else, Alli,\" Karen said firmly. \"And we are not going to balk when those little jackals come sniffing around, I promise you. They're going to learn their place.\" \n\n\"How will you do that?\" \n\n\"We will be doing it,\" Karen stated, stopping and turning to look at her sister. \"It's about time they got to know you anyway. Some time in the near future, you and I will go and hold a formal meeting with the rest of the family in Quebec City, and protect dad's legacy once and for all.\" \n\n\"I don't know how, but I trust you a hundred p, sis,\" Alexa said, nodding. \"Whatever I can do, count me in.\" \n\n\"Good,\" Karen said, folding her arms and smiling. \"Because no Gordon-Blackwell woman ever turned down a good challenge.\" \n\n*** \n\n\"Now listen, honey! I just wanna be beside you everywhere! \n\nAs long as we're together, honey, I don't care! \n\n'Cos you've started something, can't you see, \n\nThat ever since we've met you've had a hold on me! \n\nNo matter what you do! \n\nI only wanna be with you! \n\nNo matter, no matter what you do, \n\nI only wanna be with you!\" \n\nThe crowd in the pub roared its approval as Mike finished the song, singing it to Karen, who sat primly on a stool onstage while he serenaded her. She made a show of fanning herself or blushing for effect at his words. He held his hand in the air as he finished and nodded his head. \n\n\"Thanks, folks! That was in memory of Alan Longmuir, who was just taken from us recently. May the hills of Heaven be ever plaid for him, and may thistles never get caught beneath his kilt! Thanks!\" \n\nHe escorted Karen down from the platform by the hand and back to the table, where Alex and Alexa waited. Father and son clinked glasses and drained their Guinness before ordering another round. Alexa watched on in amusement while Karen smiled and shook her head. \n\n\"I love Guinness, but you two knock it back like it's tap water,\" Alexa mused, tracing her finger around the rim of her own drink, a wheat beer with a peach accent. \"Is there some sort of secret society Guinness drinkers belong to?\" \n\nAlex nodded. \"We have our own secret handshakes and everything. When you see a complete stranger in a bar drinking Guinness, you raise your glass and nod your head, because you know he's just better than everyone else.\" \n\n\"Okay, so what do us peach wheat beer people do?\" Alexa queried. \n\nHer husband thought for a moment and shrugged. \"Engage in buttplug relays?\" \n\n\"Alex!\" Karen chided, frowning at her offspring across the table. \"Be nice to Peach Wheat Beer, she's had a long couple of days!\" \n\n\"When did that become my nickname?\" Alexa asked. \"Last I checked, wasn't I 'Aunt Honeybunch'?\" \n\n\"Alli, try to keep up.\" Karen said dismissively. \n\n\"Remind me to never be caught in the presence of hotdog water...\" muttered the younger sister, drinking her beverage. It was very fruity and rather stereotypically gay. \n\n\"Well, Alli, Karen says you've acquired a new girlfriend,\" Mike quipped, raising his new glass of Guinness to her before draining it quickly. \"Cheers to weaponized sex!\" \n\n\"Here here!\" Alex agreed, draining his pint glass as well. \n\n\"Hey, you!\" objected Alexa, looking at her nephew-husband. \"I did this for us, you know!\" \n\n\"Yes, but as a helpless slave of your sexual dynamism, I can't help but plead Stockholm Syndrome, can I?\" Alex reasoned. \"I've been completely subverted.\" \n\n\"And don't you forget it.\" Alexa warned, pointing her fruity drink at him. Mike chuckled while Karen shook her head again. \"I'll have you on the Thai slave market in no time. You must be worth a few bucks...\" \n\n\"The important thing is that Heather is not going to be an obstacle to your future happiness,\" Karen interjected, holding up her champagne flute, in which sat sparkling wine and absinthe. \"Even if Alexa must sexually enslave half the planet, I for one am very pleased for you both. The march to victory continues.\" \n\n\"One act of tribadism at a time!\" Alex said loudly, earning him a look from his wife. \n\n*** \n\nMichael and Karen sat side by side on the chesterfield, poring through the pages he had printed off earlier that day. They contained exhaustive references to legal considerations for avunculate relations and marriage from all over the Commonwealth, the European Union, and even the United States. Court cases reaching as far back as a hundred years prior were mentioned. Nothing went unread, and no detail escaped their notice. \n\nThe two had no intention of letting the younger couple fight this battle alone, nor even carry the greater burden of it. Their lives in love were meant to be bliss, not a daily toil and agony to be endured. They would encounter enough challenges without also fighting the wall of legal bureaucracy this matter entailed. But Michael and Karen had both the time, and the determination, to make the system bend to their will, and to acknowledge that they were right. \n\n\"How different do you think things might have been for all of us if they hadn't fallen in love?\" Karen mused as she leafed through documents, looking for a specific precedent that had been alluded to in another case. \n\nMike shrugged slightly. \"Not better, I imagine. Like we'd already told them, they could just be having casual sex, exercising themselves on one another's bodies, and we wouldn't have blinked. The complication is strictly their emotional bond to one another, nothing else.\" \n\nKaren considered and nodded. \"Alex might have kept on dating other girls, maybe Heather, and Alli would've probably brought Freja over and married her, barring the Jeanie aspect. But you're right, things would not be better. Less messy, maybe, but certainly not better.\" \n\nMike smiled. \"Since when was 'not messy' ever our MO, princess? Remember the frat boys and the Talisker shots?\" \n\nKaren winced. \"Ugh, don't remind me. My sphincter clenched just at the mention of it.\" \n\n\"Poor sphincter,\" Mike replied in a voice rife with mock sympathy. \"I'll be gentle with her later.\" \n\n\"You're incorrigible, male,\" Karen sighed, shaking her head. \"But you are indeed correct; we haven't really ever shied away from the difficult, have we?\" \n\nHe smiled at her. \"Not with you by my side, no. Never. I can do anything.\" \n\nShe snuggled into his side. \"I told Alli I'd be taking her to meet the family and have that war out finally.\" \n\nHe raised an eyebrow. \"Sort of a harsh introduction, don't you think?\" \n\n\"Inevitable, really,\" she sighed. \"Whether we say anything or not, they'll somehow know about her relationship with Alex before the trip is up, and then the war begins. I'd rather control the narrative and just prepare her. She's a tough girl, tougher than she thinks. The past year has been rough for her; we might as well use that conditioning to her advantage.\" \n\n\"Well, as long as it doesn't change her,\" he allowed. \"I'd miss quirky and fun little Alli.\" \n\nShe raised an eyebrow as she looked at him. \"And do you mean to say that you miss some delightful aspect of me that was burned out of my psyche long ago, replaced by the Iron Queen?\" \n\nMike chuckled as he pulled her into his lap, letting all the papers fall away. She made a production of rolling her eyes at this welcomed inconvenience, her hands now resting on his massive shoulders as she looked down into his ice-blue eyes. \n\n\"You've always found time to show me your silly and irreverent side, woman, and I've guarded that secret jealously ever since,\" he answered, his massive hands resting on her jeans-encased butt. \"No one else is entitled to it, not like I am.\" \n\n\"You've certainly earned it,\" she agreed, nodding, feeling her heart fluttering in her breast. \"And you've never flinched at my shortcomings.\" \n\n\"I don't even know what those are,\" he replied. \"You're as close to perfection as anyone has ever been allowed to come, Karen. I never had a chance. There's nothing I wouldn't have given up for you. Nothing I wouldn't have done for you.\" \n\nKaren controlled a shiver, remembering, long ago, exactly what Mike had done and sacrificed for her. It was an enthralling, heart-gripping terror she would never forget. She kissed him then, letting all other worries and considerations fall away. Even if only for a few moments of bliss and love, everything else could wait. \n\nHe was the rock she stood on, braced against all adversity. He gave her a bravery to face all odds, and a determination to see any crisis through. Long ago, she had nearly killed herself with alcohol poisoning to teach a lesson to a bunch of stupid frat boys. And the world didn't need to notice, as long as he had, and approved. That was all that counted, even if she couldn't admit it to herself at the time. A crazy stunt to impress a boy. \n\nAnd she knew that she was his inspiration, the driving force he needed and craved, to make the journey through a world he was too big for, somehow worthwhile. She'd committed to being his everything, because she loved him so dearly that her own life lacked purpose if it wasn't about loving him. Yes, they would both still be absolutely brilliant physicists and people if they didn't have each other, but so what? None of that mattered now, did it? Not without each other. \n\nThe kiss ended, and she looked deep into his eyes, loving everything she saw there. Thirty years, and still she could find something new in his soul to love every day. She nodded slowly, knowing that they were reaching a conclusion in their minds, one that didn't need to be said but would anyway, just for perfection's sake at this moment. \n\n\"They need us,\" she said quietly. \"I'll fight the whole world for them and their love, Michael.\" \n\nThe blond giant nodded: \"Together, Karen. Always together.\" The blond giant nodded; her slender fingers knotted into his, the pact and the bond between them remembered. \n\n\"Let the heavens tremble...\" they said to each other in quiet but potent voices. \n\n*** \n\nAuthor's Notes: R.I.P., Alan Longmuir. You will be missed. \n\nThe great thing about the narration of past events, is that you know how things ultimately turn out, so they tend to be fun, emotional romps, without many insane plot twists. In the present, I wanted to get the matter of Heather dealt with, since she was something of an (intentional) loose end that required resolution. And hey, when is Alexa getting involved in graphic lesbian sex ever a bad thing? \n\nMuch like early portrayals of Jeanie, I wanted Heather to be a sympathetic character, even if she is not at all central to the plot. I could have been lazy and just said she moved away over the summer, but I'm quite intent on making Alex and Alexa continue to confront the scope and implications of their still-taboo relationship, and the effect it can have on others, no matter how mundane or petty it might seem. I want them acutely aware of it, rather than callous and uncaring, because I don't like having sociopaths for main characters. \n\nYoung Karen continues to impress even me, and I already know what I'm writing about her. But seeing it laid out in a readable format makes it that much more enjoyable, if you know what I'm getting at. As controlled as she may seem in the present-day stories, it's important to remember that she is still very much young Karen as well. She has never lost that kamikaze, go-big-or-go-home attitude so aptly displayed in this chapter. She may not get to express herself this way very often nowadays, but rest assured, it's still there. The meeting with the Blackwells in Quebec will test the limits of her nerves, no doubt. \n\nI'd always known that Kee was going to die, because she is, in a sense, my representation of the \"Missing And Murdered Indigenous Women's Report\" happening here in Canada as we speak. As a nation, we're finally owning up to the fact that countless native women have gone missing and died horribly over the decades, and we shamefully did nothing. So no, don't count on Mike ever finding out who murdered his beloved friend, because that's not what happens in 99 percent of those cases. \n\nAnd yes, young Mike is terrifying. He needs Karen in his life, even if neither of them knows it. Not because he's some violent beast with an uncontrollable temper, but because he is, in Karen's estimation, a force of nature to keep appeased. If she's a regal female deity, then he's a demiurgic thunder god to keep placated. If Mike is rapt with her relentless will and how far she is willing to push herself, she is in awe of how he must hold back. \n\nI hope I showed a different, rarely touched-upon side of Alexa here, and hopefully it didn't make her come across as a bitch, because that was not at all my intention. Yes, it hopefully brought to light how far she would go for Alex, but also displayed her willingness to accept responsibility for her actions and to not trivialize how they affect others. She knows she's manipulating Heather, to a degree, and she doesn't like it, so she opens herself to accepting whatever castigation is required for getting her way. She's willing to pay the piper, so to speak. \n\nI mostly left Alex out of this chapter, since it was getting long as is. Don't worry, he'll be back. Same with Jeanie and Freja. I can't go without my crazy duo for too long. \n\nWell, I'm sitting at over 2,570 followers as of this writing, and I am, as always, flattered and humbled by people's enjoyment of my work. It means a lot to me, and thank you. \n\nWelp, onto the next chapter of whatever story is up next. Have a great summer, boys and girls. \n\nKeep your stick on the ice! \n\nManagement"
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "romance",
        "alcohol",
        "emotional needs",
        "betrayal",
        "lesbian sex",
        "incest themes",
        "humour",
        "romantic"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/mike-and-karen-ch-06"
}
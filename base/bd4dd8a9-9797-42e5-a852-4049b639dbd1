{
    "title": "The Stretch Sorority Ch. 05",
    "pages": [
        "The next morning I woke up sore. My holes hurt. My bed was a mess, sex toys laying on it, bags and clothes still laying there from the days before. My naked body was spread out, half covered with my blanket. My one hand felt dirty, covered in the juices from my slutty asshole the night before. I was a mess. A mess that needed a shower and to start thinking straight again.\n\nSomething about the pain I was feeling, not bad pain, but pain nonetheless seemed to shock me back to some kind of reality. How much has my life changed over the last few weeks? Here I was in a massive sorority house in my massive room with my holes aching from being stretched open, sex toys and free clothes laying around, and deep down I loved it. But I still had to focus on school, I still had to focus on being me outside of this.\n\nI walked into my shared bathroom naked. As I opened the door Emily was standing at her sink in a loose fitting pair of pink pajama shorts and a white sports bra brushing her teeth. I was so out of it I didn't even think to cover myself up as I made my way to the shower.\n\n\"Well hello there...\" Emily said, removing the toothbrush from her mouth, giving me a smile.\n\n\"Goodmorning,\" I said back groggily, leaning in and turning on the shower, letting the water warm up.\n\n\"You look like you had a rough night... or day...\" Emily said while spitting out the excess toothpaste from her mouth.\n\n\"Ya... I'm feeling a little rough around the edges,\" I smiled back, my hand testing the water's temperature.\n\nEmily moved closer to me and put her hands on my bare shoulders, \"Listen, I'm sorry I have been so distant lately, I just got into the whole, 'be the best you can be' crap, and was just sluttin' it out like crazy, but I wasn't being a good friend... so I'll try to be better in the future... OK?\"\n\nI smiled back. It was nice to hear her say that. It would be nice to have a friend again. \"Ya... don't worry about it...\" I paused, thinking of something to lighten the mood, \"it sure sounds like you were having fun though,\" I laughed.\n\n\"Holy fuck yes I was. I've lost count of how many guys I've slept with!\" she burst out laughing, \"I don't think that's really a good thing though.\"\n\nI smiled, testing the water again. It was finally warm enough to get under and I stepped in gingerly. Emily continued chatting with me while she got ready, washing her face, putting on some makeup. The warm water felt amazing as it washed over my head and washed away some of the sweat and sex from the night before. As it touched my sore holes I moaned a little, they were so raw and used, but something about it made me love it. How much of a stretched out slut was I?\n\n\"So, have you been able to stretch out your holes like you wanted to, you dirty slut?\" Emily asked.\n\nI opened my eyes and saw her standing right by the opening of the shower. \"Uh... ya... kinda...\" I started.\n\n\"Well tell me all about it babe! I have sometime before class,\" Emily said excitedly.\n\nFor the next 20minutes I told Emily about what had happened. How Ms. White, my professor was going to train me to be stretched wide open, how Megan, her assistant was going to help. I told her how I was fisted by Megan at a store, and how yesterday I had all my holes worked on in Ms. White's office. I even told Emily about the clothes that were bought, and how I fisted my ass to sleep the night before. It all came spewing out of me and it felt good to get it off my chest, to share it with someone.\n\nAs I told Emily what I had been up to her mouth fell open, words like \"holy shit\", \"that's so fucking hot\" and \"you nasty slut\" came out of her mouth. I watched as her shorts fell down to her ankles and she rubbed her clit as I told her the details. It was fucking hot, the whole situation, what I had done, what Emily was doing in front of me, everything. I was turned on again and would have loved to do something about it but I had to get going.\n\n\"Shit! Emily, I have to go!\" I said turning off the shower and grabbing a towel.\n\nEmily bent down picking up her shorts. \"Wow Julie... that was amazing. I'd love to see how stretched out your fuck holes have become... are going to become, sometime!\"\n\n\"For sure Emily... but I really have to go... sorry!\" I said as I rushed out of the bathroom.\n\nI closed the door behind me, dropped my towel and began looking through the clothes that Megan had bought. After telling Emily about my adventures I was extremely turned on, and when I was turned on my inhibitions just didn't exist anymore. I picked up a pink g-string, a denim skirt that went mid-thigh and a white tank top, no bra, and a pair of white socks. Quickly I pulled everything on, grabbed a pair of shoes and headed out the door.\n\nAs soon as I was outside I could feel the cool breeze hit my body, my nipples immediately got hard. I looked down to see them poking through the thin material. The g-string was rubbing up against my asshole with every step making my used and sore ass feel more and more amazing. I could tell my pussy was wet without even checking. There was no way it wasn't. I wanted to just sit down on the grass beside me, spread my legs and play with myself, but I couldn't, not out in the open, and not while I was late for class. What reason was the one really stopping me?\n\nI was a couple of minutes late to my class and I tried to open the door quietly, but of course it creaked loudly as I stepped in. The whole class turned to look at me including my professor and his unapproving face. I mouthed \"sorry\" as I quickly walked to an open seat about half way down the room. It was a large lecture hall with inclined seating. It gave everyone a good view of the professor and vice-versa. I opened my books and started to take notes like a good student. The minutes passed and my interest waned. Checking my phone I saw that there was still half the class left, I let out a little sigh. My mind started to wander and I thought back to Megan fisting me in the store and how much of a rush it was. I opened my phone and texted her.\n\nMe: I'm so fucking horny! And so fucking bored!\n\nI waited only a few seconds.\n\nMegan: Well hello\n\nMegan: Where are you?\n\nMe: In class bored out of my mind\n\nMegan: Hmmmmmm\n\nMegan: Are you feeling slutty?\n\nI didn't even have to think before answering.\n\nMe: Fuck yes\n\nMegan: Are you wearing panties?\n\nMe: Yes\n\nMegan: OK\n\nMegan: Go to the washroom take off your panties\n\nMegan: Shove them up your ass\n\nMegan: And go back to class\n\nAgain, a quick answer from me.\n\nMe: OK\n\nMegan: Oh and take a picture of them in your ass!\n\nI got up from my chair trying not to make a huge noise, my pussy was dripping as I moved. My books and bag stayed at my desk, I didn't want my professor to think I was leaving, I was coming back, even sluttier than I was.\n\nQuickly I walked through the hallway and into the washroom. The first stall was free so I stepped in, locked the door and yanked up my skirt so it was round my hips. My hand went down to my pussy and I rubbed it over the material. Completely soaked. I let out a moan hoping no one else was in the washroom to hear me.\n\nMy hands pushed my panties down to the ground and I stepped out of them before reaching down and balling them up. I leaned over the toilet and spit into one of my hands and rubbed it over my waiting asshole. My other hand brought the panties to my hole and I started to push them in, strand by strand, until they disappeared. It hurt, my hole was still raw from the night before, but that wasn't going to stop me. It wasn't a lot of material so it didn't take long. I rubbed my fingers over my shithole and I could feel just the glimmer of material. I grabbed my phone and took a couple of pictures, checking them to make sure that they turned out. Standing up I pulled my skirt back into place. It felt weird walking not just without panties, but because of the rough fabric in my ass. The more steps I took, the more I liked the sensation and the more turned on I got. It was a constant fight with myself not to reach under my skirt and play with my holes. I had to be respectable.\n\nBack in class I sat in my chair and tried to focus on what the professor was saying. There wasn't too much longer left, I just had to hold out, pay attention, and then I could get out of here. I felt a vibration from my phone and looked at it.\n\nMegan: So?\n\nMegan: Did you do it?\n\nI had completely forgotten to send her a picture. I held the phone close to my chest so no one else could see and picked one of the pictures I had taken and sent it to her.\n\nMegan: Oh you dirty slut\n\nMegan: Fuck you are the best\n\nI chuckled while I read it, causing the girl in front of me to turn around and \"shhhhh\" me, her eyes staring at mine but then got distracted by my uncovered and soaking pussy. My face went bright red as I had forgotten in that instant to close my legs. Her eyes looked back up at me, her face almost as red as mine, before turning back in her seat. I didn't think it was possible but somehow my pussy got even more wet. Sending a picture to Megan, having a classmate see my soaking hole, it all turned me on more than I could have imagined. Suddenly I envisioned myself not only being a stretched out slut, but a public whore, having people watch and use me out in the open where anyone could see me. My libidio was opening even more doors for me, but they all seemed to lead to my life being destroyed. I tried to fight back. Class was almost over, \"calm down\" I told myself under my breath.\n\nAnother message popped up on my phone.\n\nMegan: You turn me on so much\n\nMegan: FUCK!\n\nMegan: Meet me in parking area D7 right after class\n\nI didn't know what Megan had in mind but I was ready for it. My holes were pulsing with lust, so ready to be used and ruined, I couldn't wait.\n\nThe last few minutes of class seemed like an eternity. It was like time had stopped or maybe even started moving backwards. My legs were shaking, my fingers tapped on my desk, I waited and waited until finally the Professor stopped talking and let us go. I shoved my books into my bag and almost ran out of the room making my way to the parking lot. I was moving so quickly I wasn't sure my feet were touching the ground. The panties in my asshole continued to rub my insides feeling rough and amazing all at the sametime. I could feel my wetness starting to drip down my thighs, slowly running past my knee and beyond my skirt. No one was around me to notice but just the fact that I was that wet made me even more turned on.\n\nI got to parking lot D and started to look around for Megan. I quickly walked through the aisles until I reached 7 and turned to look to my left, and then right, and finally saw Megan leaning against her car. I walked towards her with a giant smile on my face. Did I start to walk with a little strut? Maybe. I just felt like I was showing off with her. She pushed herself off her car and stood in front of me as I got closer, her tight jean shorts showing off her legs and a white sports bra allowing her body to shine. Did she go to class like that? Just the thought of it made me want her even more.\n\n\"Hey,\" I said as I got within ear shot, my tone dripping with lust.\n\n\"Hey slut,\" Megan replied with a growl. This didn't seem like the sweet and playful Megan I had met before, \"get the fuck over here.\"\n\nI did as I was told and walked up to her. Turned on but a little unsure.\n\n\"You are such a fucking hot teenage whore I can't fucking stand it,\" Megan started, looking me up and down, \"you act like such a slut I can't fucking handle myself...\"\n\nA small smile cropped up on my face as I listened to her words. I wanted to be a teenage whore. I wanted to turn people on like this. I didn't want them to be able to control themselves around me. God I was so turned on.\n\n\"Turn around,\" Megan demanded and she pushed my shoulder to force me, \"now bend over and show me your fuckholes.\"\n\nI bent at the waist in front of her and craned my neck back to see my skirt pull up exposing my pussy and ass to Megan right there in the middle of the parking lot. At that moment I just didn't care. Since I started at the sorority my inhibitions had continued to melt away and now they were almost gone. So what if someone could see me like this? Good for them, at least then they would know how much of a whore I really was. It felt good. It felt right.\n\nI felt Megan's hand grab each side of my ass and start to kneed it, pushing and pulling each cheek from side to side. My shithole opened and closed a little as she did it. It felt amazing. I let out a moan.\n\n\"Oh you are fucking dripping wet aren't you Julie...\"\n\n\"Mmmhmmm,\" I said back.\n\nI felt Megan insert three fingers right away into my cunt and start to fuck me with them. The fresh air adding to the feeling. My knees felt weak.\n\n\"Oh god... your hole... it wants to be stretched right now doesn't it...\" Megan asked as she continued to fuck me.\n\n\"God yes... please... stretch my holes...\" I moaned.\n\n\"Hmmmm... are you sure you want me to? I mean when I'm this turned on you don't know what I might do...\" I could tell Megan smiled while she said it.\n\nJust the thought of her doing whatever she wanted to me made me want it even more.\n\n\"Yes... fuck yes... just please use meeeeee!\"\n\n\"OK slut... you asked for it!\"\n\nMegan pushed me over to the trunk of her car. I was still bent over, my hands on the trunk, my ass sticking out. I felt Megan insert her three fingers again and roughly finger fuck me. Soon a fourth and then fifth were added. I could feel her knuckles pushing against my hole with each movement. I needed her hand inside me.\n\n\"YES! Fucking do it! Fist me!\" I yelled out. Wishing someone heard, but also grateful we weren't close to the school.\n\n\"Tell me what you want whore... tell me!\" Megan said as she continued to tease me.\n\n\"I want you to fist my fucking cunt right now! Do it! I don't care who sees! Just fucking ruin my hole!\" I yelled out again.\n\n\"Ok bitch,\" Megan said as she finally started to push her into my dripping hole.\n\nI could feel her hand start to press into me, little by little, each thrust deeper until finally it was all the way in. It felt amazing. It felt like it should. This is what I was supposed to be doing, having my holes stretched out like a slut.\n\n\"Oh fuck yessssssssss!\" I screamed out as her fist began to move in and out of my hole.\n\n\"You like that slut? You like when I fist your cunt in public?\"\n\n\"YES! Don't stop! Please!\" I screamed out again.\n\n\"Holy shit you're too fucking loud Julie!\" I heard from behind me as I felt Megan's fist slip out of my cunt.\n\nI turned around with a look of shock and disappointment on my face. I needed my holes to be filled and it felt like the worst feeling when they were empty.\n\n\"Get in the back seat,\" Megan said as she opened one of the doors.\n\nI crawled into the back seat like I imagined a whore would, on my hands and knees, my skirt pulled up, cunt juice dripping down my leg.\n\n\"Stop,\" Megan said.\n\nI stopped where I was, my ass still at the edge of the door, and I felt Megan start to finger my asshole, I could feel the panties moving around as she did, I let out another moan. Her finger grabbed one of the strings and started to pull the material out of my ass. It felt like such a strange sensation, the rough material being pulled out of my ass like a string.\n\nFinally it was all out and I immediately wished it was back in. I looked behind me and I could see Megan holding up to her nose sniffing it. It was disgusting. It was amazing. The pink fabric was covered in little brown marks. My ass was not clean and now neither were my panties.\n\nMegan looked at me with an evil grin, \"I told you you were too loud slut.\" I watched as she balled up my shit stained panties in her hand and reached towards me, pulling my hair with her other hand and shoving the panties into my mouth. I immediately started to gag.\n\n\"That should keep you quiet you nasty slut,\" Megan said as she pushed me further into her car.\n\nMy head was pressed up against the far tinted window as Megan got in behind me. I could taste my ass in my mouth. My mind wanted me to hate it, how could someone put my shit stained panties into my mouth and expect me to be OK with it? But my body rejected this thought, instead it thrived on how dirty and depraved it was. I moaned as my tongue started to taste what was in my mouth, for some reason I was getting even more turned on by it.\n\n\"Oh so you like sucking on your own shit panties?\" Megan said as she pushed four fingers back into my cunt.\n\nI nodded my head, \"mmmmhmmmmm\" without even thinking. I was being so submissive. I'd let Megan do whatever she wanted to me.\n\n\"Good slut... now lets stretch out that slut hole of yours...\"\n\nI felt Megan's fist push into me roughly before she pulled it out again. Again she pushed it into me and out again. Soon she started to pick up the pace, in and out, in and out. Her fist was clenched as she continued to pummel my cunt.\n\n\"Oh fuck yes... please... don't stop... yes MEGAN! Keeppppp fucking me.....\" I mumbled out in ecstasy.\n\n\"Oh don't worry little slut I'm just getting started,\" I could see an evil grin while looking at Megan in the reflection of the window, \"I think it's time we try out your other fuck hole... what do you think?\"\n\nI turned my head back to look at her, our eyes meeting, I struggled to speak through the panties still in my mouth, \"my ass... it's sore... please... be gentle...\"\n\n\"Awwww... your ass is sore? Is that what a slut would say?\"\n\nI wasn't sure what to do, I was a little scared of the possible pain, but it also intrigued me, I knew what I had to answer, \"no...\".\n\n\"Exactly. A nasty whore like you doesn't get to say no because something hurts, because she's tired, because her holes hurt, she ALWAYS says yes!\" Megan spoke in a strong tone. I shook my head in agreement. \"Now... let's try this again... do you want me to fuck your asshole?\"\n\n\"Yes,\" I said back with a gentle tone.\n\nMegan didn't look happy with my tone, but began to slide a finger into my ass, and then a second. It hurt, but not as bad as I thought it would. By the time she had three fingers in my shithole I wanted more. I just couldn't help myself.\n\n\"Now tell me again... do you want me too fuck your ass harder?\" Megan asked as she still gently finger fucked me.\n\nI moaned through the panties, \"yesssss... please fuck my ass... please! I need it so fucking bad!\"\n\n\"Awwwww... is someone's ass feeling hungry again?\"\n\n\"YES! GOD PLEASE MEGAN!\" I screamed. I felt like I was going to cry. I started to push my ass backwards towards her, begging her to keep fucking my asss.\n\n\"Are you sure?\" Megan continued to tease me. Her fist was still working its way in and out of my pussy the whole time. It was less and less noticeable as I was loosening up, and I was so focused on getting something up my ass.\n\n\"FUCK YES!\" I reached around and started to shove fingers into my ass along with Megan's. I didn't care if there was lube or not, three fingers dug their way in and I pulled my shit hole open.\n\n\"Well OK then,\" Megan laughed. She ripped her hand out of my cunt and I immediately came, shaking on her back seat, squirming, leaking. The brutalness of the movement shocked me and made my body give in. I couldn't help myself. \"Naughty little girl,\" Megan mocked.\n\nAs I laid on the seat still recovering from my orgasm I could feel Megan using my cunt juice as lube on my ass. I felt her fingers moving up and down before a single one slipped inside.\n\n\"Mmmmmmm,\" I moaned as my eyes started to open.\n\n\"Oh there she is... my nasty little slut... are you ready for my fist?\" Megan said with a smirk.\n\n\"Oh Megan... yes... pleasssseeeeeee...\" I was so needy, so turned on. I brought my hand down and started to rub my worn out pussy as I felt three fingers being pushed into my ass again.",
        "Soon the fourth and fifth fingers followed, I could feel Megan pushing her knuckles up against my asshole. I started to grind myself back onto her hand making sure she knew I wanted it all inside me. Finally it popped in and her hand disappeared. My eyes rolled back as I savoured the sensation for a minute.\n\n\"Thank you Megan...\" I slurred out as I continued to rub my pussy.\n\nMegan didn't say anything, but she used her hand in my ass to drag me back up onto my hands and knees. \"Now don't move...\" she said in an ominous tone.\n\nI turned my head back around to see her fist wrist deep in my asshole, and her other hand reaching to the front of the car for something. My head whipped to the other side and saw her grabbing a 1 litre Smart Water bottle. My eyes grew. What was she going to do with it?\n\nA second later I felt the bottle start to rub against my pussy, touching my clit, and then moving down to my waiting hole. \"Now I'm going to shove this bottle into your cunt, and fist your ass, all at the sametime, and you're going to fucking love it, right?\" Megan demanded.\n\n\"Uhhh huhhh,\" I said back moaning.\n\n\"Good.\"\n\nAfter a few more strokes Megan began pressing the flat side of the bottle against my slit. It was such a blunt object it felt strange trying to force its way into me. My hole was well used by that point though and started to open for the bottle. I could feel my lips sliding around it as it moved into me.\n\n\"Come on slut... take this bottle nice and deep for me... I know you always wanted to be dp'd but I bet you didn't think it would be with a bottle and a fist...\" Megan was speaking the truth, this was something from my fantasies, not something I ever imagined would happen.\n\n\"Oh god Megan... I feel so fulllllll...\" my words slurred as my body started to respond to the events happening. Half the bottle was now in my cunt, stretching me all the way along its shaft, and Megans fist continued to sit in my ass wrist deep, the sensations were becoming too much and I could feel another orgasm building throughout my body. \"Please fuck me... please... Megan... I need to cum... please!\"\n\nShe didn't say anything, but she heard me. I felt the bottle move out of my pussy almost to the end before being pushed roughly back into my hole. At the sametime her other hand started to push deeper into my shithole. In and out, in rhythm, both the bottle and her first were moving faster, deeper, harder.\n\n\"Oh god... yes... please.... Fuck me harder... harder!\" I yelled out. I could feel the car rocking side to side as she continued to destroy me.\n\n\"God I fucking love you Julie! You are such a nasty slut... your holes are going to be so broken when we're done with you... they are going to be completely useless except for being destroyed... no more cocks for you!\" Megan laughed as she started to push the bottle and fist into me in unison. Both being pulled almost all the way out before being slammed back into me. I could feel her clenched fist pull against my ring as she moved out, my shithole stretching to the maximum before she pushed it back in, getting thinner around the wrist before stretching again on her forearm. Over and over and over.\n\n\"I...uuhgggghhhh...\" I couldn't speak anymore. My head fell down on the seat. Each thrust she made pushed me down until my head was banging against the car door. I didn't care. Nothing mattered. I could only focus on what was happening to me.\n\n\"That's it fuck whore take it all, take it nice and deep... I bet this feels amazing doesn't it slut... getting destroyed like this in my car... what kind of a nasty bitch lets this happen to her?\"\n\n\"I... uggggghhh... I do... mmmffffff... I'm... OH GOD... I'm a fucking... nasty whore!\" I screamed out as another orgrasm rolled through my body like a freight train. My legs gave out beneath me and I collapsed. The sudden movement forced the bottle and Megan's fist to leave my body, my holes gaping open in a huge mess. My eyes locked on Megan completely used, I could see the pleasure on her face, my eyelids started to shut as my body was exhausted. Every few minutes I was able to force them open for a second or two and saw glimpses of Megan sitting against the other door, her legs spread wide, my eyes shut again. Another second glimpse as I watched her fist fucking her pussy while looking at me used body, my eyes shut again. I felt a splash on my skin and my eyes opened again for a quick view and saw Megan squirting over me, her head falling back, again my eyes shut. A bump in the road woke me up later and I saw Megan sitting in the driver's seat driving somewhere, I didn't know where, I didn't care, my eyes shut again, my body trying to recover.\n\n------------------------------------------------\n\n\"Hey... Julie...\" I heard softly spoken into my ear.\n\nMy eyes struggled to open but I did feel a little more rested, \"huh?\" I responded groggily.\n\n\"You're home... time to go...\" Megan continued to gently tell me as she stroked my arm.\n\n\"Oh...\" was all I could get out as I started to push myself up in the seat. As soon as I started to move I could feel the pain between my legs. My holes hurt so much. \"Ah fuck...\" I moaned as I sat up.\n\n\"A little sore?\" Megan chuckled from the front seat.\n\n\"Uh... ya,\" I smiled, trying to wake up a little.\n\n\"Well that's what dirty sluts get... right?\" Megan continued still smiling.\n\n\"Ya... I guess...\" I wasn't functioning at full capacity.\n\nA few moments passed while I collected my thoughts and I went back to everything that had happened. I could feel my aching pussy start to get excited again, but I was in too much pain to think about doing anything.\n\n\"Ummmm... thanks for you know... everything...\" I said with a shy grin as I grabbed my bag from the floor.\n\n\"You mean fisting both of your holes in the backseat of my car?\" Megan laughed again.\n\n\"Uh... yes...\" I laughed.\n\n\"You're very welcome... anytime!\"\n\nI bent forward in pain and gave Megan a little hug before getting out of her car. Every step I took to the front door hurt. This wasn't like the pain from the night before, this was much worse. I had never felt so used and stretched before. It wasn't just the size, it was the roughness, the way that Megan shoved her fist into my holes, and then the water bottle. We didn't have any lube, it was all done with my wetness and now I was paying for it. The thing was even though it hurt, it was such a hot thought to think about how much of a slut I was, letting it all happen in public, in the car, my holes being worked. It was definitely worth the pain I was feeling now.\n\nI stumbled through the front door and was about to head upstairs when I realized I was feeling a little hungry. The kitchen was empty as it was the middle of the afternoon, or at least I was pretty sure it was. A couple of pieces of bread, some cold cuts, cheese, mustard, and my sandwich was ready. I was too far gone to worry about cutting any veggies that was for sure. I leaned over the counter, my elbows holding me up and ate the sandwich. My legs spread slightly to let some air ride over my soar holes. I realized I wasn't wearing panties. Where were they? In Megan's car still? On the street? In front of the house? It didn't really matter, it was just something running through my mind as I took my last bites.\n\nI made it to my room after struggling with each step making me winch in pain. I stripped off the few clothes I had on and got in the shower. The warm water ran over me and immediately made me feel a little better. The sweat and sex was washed off of me. I took the hand held shower and moved it below me letting the warm water wash over my ass and pussy. It felt amazing in a soothing kind of way. I wasn't doing it to get turned on, I was doing it to feel better. My holes were thankful.\n\nDrying off I was ready to be comfortable. I threw on an old long white t-shirt that went down mid-thigh, a pair of comfy grey boy shorts that didn't rub against my worn fuck holes, and a pair of wool socks. I was ready to relax.\n\nAt first I laid on my bed and watched some trashy reality TV. This lasted until I decided I should try to not get kicked out of school and opened my books. Studying was not as fun as getting my holes stretched out, but it had to be done. An hour or two rolled by and I finally decided that was enough studying for the day.\n\nI was feeling a little hungry again and headed down to the kitchen. It was busier now, other girls talking, making their own food. We chatted for a few minutes as I made my mac'n'cheese. I would be lying if I didn't find most of them to be very attractive in their leggings, shorts and even some in their panties. I could feel myself getting turned on a little as I watched their nipples poke through their tops, and their asses sway as they moved around. I just smiled and chatted until my food was ready. My bowl in hand I headed back to my room. I was far too worn out for a talkative dinner.\n\nOn my bed I ate my food changing positions a few times as my ass continued to feel sore. The movie I put on was entertaining enough and after a while I was feeling comfortable and relaxed. Without any thought, my hand found it's way down to the front of my panties and I started to gently rub my used slut hole. I wasn't rough or fast, I wasn't trying to fuck myself, I was just gently feeling it. I slipped my hand inside and ran my fingers along the red and puffy edges. It was amazing to feel my pussy after it had been through what it did. Slowly I let my fingers find my worn out asshole. Just like my pussy I could feel the pussy and red edges. Every movement I made sent a shock of soreness up to my brain. I continued to gently rub my holes through the rest of the movie just enjoying the feeling and thinking about how much of a stretched out whore I was.\n\nSometime later I opened my eyes. Obviously I had passed out. The TV was still on, Netflix showing me a list of suggested things to watch next. \"Oh fuck I must have been tired...\" I said to myself as I slipped my hand out of my panties, I could see the mark on my wrist from where the waist band had been pressing the whole time.\n\nI rubbed my eyes as I walked into the washroom and sat down on the toilet. I really had to shit. After a few seconds I started to feel a giant log moving out of my sore ass. Each inch it slid out hurt as my hole stretched all over again to accommodate it. Nothing like having Megan's fist in there, but it still felt like a challenge. \"Mmmmmmm,\" I moaned involuntarily as the turd finally slipped out and into the toilet. I wiped and flushed before washing my hands.\n\nI washed my face as I always tried to do before a proper night's sleep. It felt good to actually be clean, relaxed and getting ready for a normal sleep, not one built around fucking myself. As I grabbed my toothbrush from the counter I heard the other bathroom door open.\n\n\"Oh hey Julie,\" Emily said as she walked in.\n\nIt looked like Emily was planning for an early night of sleep as well as she walked in wearing a pair of plaid pajama shorts and a black lace bralette.\n\n\"Hey Emily,\" I said in response, my toothbrush still in my hand.\n\nEmily turned on her tap and started to wash her face, turning to me, \"how was your day? Do anything nasty and dirty today?\" she asked with a smile.\n\nThe question took me off guard. \"Uhhh...\" I stammered a little, my face going red, \"fuck\" I thought to myself, I was a terrible liar.\n\n\"Oh my god! Something did happen again today didn't!\" Emily suddenly wasn't washing her face anymore and moved closer to me, her eyes glowing with anticipation of a story.\n\n\"Ummmm... ya... kinda...\" I started. I thought I was going to be able to sleep but now my mind was burning with the thoughts of earlier.\n\n\"Well tell me you slut!\" Emily said while pushing my shoulder playfully which forced my ass back against the counter causing me to cringe a little in pain. My face scrunched a little as the shock rode through me. \"Are you OK?\" Emily asked with some concern.\n\n\"Ya... I just... I'm a little sore is all.\"\n\n\"Sore... from what?\"\n\n\"Well... ummmm... you know Megan?\" I wasn't sure if she did.\n\n\"The teacher's assistant?\"\n\n\"Ya... well... she fisted me pretty rough today... ummmm... in her car...\" My face was burning, \"and ummmm... now I'm pretty sore if I'm being honest.\"\n\n\"Holy shit... that is so fucking hot Julie!\" Emily was extremely excited, \"can I see?\"\n\nI felt her hand rub my arm gently, making me feel a little more relaxed.\n\n\"Oh... I don't know... I'm pretty tired... maybe tomorrow?\" I tried to convince her, but I wasn't even sure I was convincing myself. The thought of showing Emily my used holes wasn't the worst idea in the world.\n\n\"Oh come on Julie... just a quick peek!\" Emily begged as her hand moved down under my t-shirt and on to my boy short covered ass. I felt her hand gently rub me while pulling so I turned around, my face now pointing at the mirror, my hands on the counter.\n\n\"OK...\" I let out. I was such a useless slut now that I couldn't say no or resist. Suddenly I was turned on again, ready for Emily to see my used holes.\n\n\"Thank you...\" she said as I felt her push on my back making me bend over a little more, my ass now sticking out. She went down to her knees and rolled up my t-shirt so my panties were completely exposed. I felt her hands gently rub my ass again, one hand slipping under my and softly touching my pussy through the fabric.\n\n\"Mmmmmmmm...\" I let out, my eyes closed.\n\n\"I thought someone didn't want to show me...\" Emily teased me.\n\nI pushed my ass out a little further, \"please just be gentle... everything hurts... seriously...\"\n\n\"I will babe... don't worry.\" Emily said as I felt her fingers slide into the waistband of my panties and pull them down to my knees. \"Now let me see this ass of yours,\" she said as her hands pulled my cheeks apart.\n\nI felt my ass open up as she pulled, my sore hole being inspected. \"Ouch,\" I said as I could feel the skin pull.\n\n\"Sorry,\" Emily said, \"I just wanted to get a really good look at how worn out it was,\"\n\nI stood there while I could feel Emily's eyes examining it. It seemed so strange, so surreal.\n\n\"Wow... your asshole is so red, jesus Julie did Megan use any lube at all?\"\n\nI turned my head to look down at her, \"uh... no... just my cunt juice...\" I was a little ashamed to say.\n\n\"Holy shit and you still took her whole fist? My god you are a fucking slut,\" Emily laughed. Here let me see if I can make it feel a little better for you.\n\nSuddenly I felt Emily's tongue on my shithole. I felt the warmth and wetness swirling softly, being careful not to be too rough. It felt amazing, relaxing. It felt like my overused ass was being massaged back to life.\n\n\"Does that feel good?\" Emily asked, taking a quick break from my ass.\n\n\"Oh god yes...\" I moaned back. I started to slowly push my ass back and forth against her tongue. Suddenly I wasn't worried about the pain anymore, I was only focused on the feeling of having a tongue on my ass.\n\nEmily continued to lap up my asshole. At first it was gentle and slow, but the more I moaned the faster she got. I could feel her tongue pushing against my hole before her mouth started to suck on it. It felt amazing, like nothing I had ever felt before. I felt a finger start to feel the edge of my ass, it hurt a little, I was still so sore, but I didn't stop her, I let her slowly work the finger into my hole.\n\n\"Is this OK?\" Emily asked, the tip of her finger sitting just inside.\n\n\"Yes... please...\" I took a breath trying to comprehend the fight between the pain and pleasure, \"don't stop...\"\n\n\"Mmmmm OK...\" Emily said in a sultry tone as I felt her push her finger deeper into my ass. Usually one finger wouldn't feel like much but right now I was feeling every little bump on her finger as she started to fuck me with it. Her tongue continued to work around her finger, making sure nothing ever got dry. \"Your ass tastes so good...\" Emily added in a rare break for her mouth.\n\nI could feel her trying to push a second finger into my hole. The pressure still hurt as the tip slipped in but I pushed my ass back into her showing her I wanted it. As the second finger sunk deep into my ass I started to ride them, back and forth I moved my ass. My pussy was soaked, I could feel juices dripping down my thighs as I focused on the pain and pleasure.\n\n\"Here, get up on the counter,\" Emily said, pulling her fingers from my ass a little too roughly.\n\nI didn't say anything, I just turned around and pushed myself up onto the counter between our two sinks. I brought my sock covered feet up to my side, my legs bent, my ass now sitting on the counter. Emily used her hands to move me closer to the edge, now my ass was hanging just over the edge. She moved up and gave me a kiss and she pushed her two fingers back into my ass.\n\nI moved a hand over to my pussy and realized I still had my toothbrush in my hand. As Emily started to get back to work on my ass I took the brush and started to play with my clit. The rough bristles felt amazing, it was a completely different sensation. I felt Emily push a third finger into my ass as I felt it start to relax and open. It was like it had given up and was ready to play again. Everything about it still hurt, but now that was a secondary feeling, the pleasure had taken over and I wanted more.\n\n\"Fuck Emily... that feels so good!\" I said locking eyes with her.\n\n\"I thought you said it hurt?\"\n\n\"It did... it does... but now... oh god I love it...,\" I was starting to lose myself to lust again. Rubbing the bristles of the toothbrush even harder against my clit.\n\nEmily smirked and slipped a fourth finger into my greedy ass and started to fuck me.\n\n\"Oh fuck Emily! Just fucking FIST me! NOW!\" I screamed out. I needed her fist in me just like Megan's. I needed to feel stretched out all over again. No amount of pain was going to stop me.\n\n\"You are such a nasty fucking whore!\" Emily yelled back as she pushed her whole hand roughly into my asshole. \"You like that? You like my whole hand being in your shithole? I bet you do, don't you?\"\n\n\"YES! YES! I love it! Please just keep going... fist me harder... please!\" my mind couldn't handle it anymore, the feelings were too intense, too amazing.\n\nThe toothbrush was no longer on my clit, but I still had it in my hand. My other hand was rubbing my cunt roughly now, feeling how blown out it was, raw, used, but wanting more. My head was pushed up against the mirror holding me in place. I shoved four fingers into my slut hole and started to fuck myself hard while Emily continued to fist my ass. I was rocking back and forth like a depraved slut.\n\n\"Holy shit!\" Emily said as she watched me start to stretch my other hole open, \"your fucking holes are ruined!\"\n\nSomething about her words spurred me on. To me they weren't ruined, not yet, my greatest desire was for them to be useless to anything but the biggest fists and toys, I wasn't there yet. I needed to show her how much of a slut I really was.\n\nI used my four fingers to force my pussy open and expose my pisshole. My other hand brought the handle of the toothbrush it still held to my third hole and slowly started to push it inside my urethra.\n\n\"YESSSSSSSSSSS!\" I screamed out as I continued to push the brush handle deeper into my pisshole. It felt so good, the small ridges on it making me feel each and every movement. Emily's eyes went wide, her mouth hanging open, no words were said.\n\nEmily continued to fist my ass while I roughly shoved my four fingers into my hungry cunt. The toothbrush stayed in place, only the bristles could be seen as the rest of it was deep inside my urethra headed towards my bladder. The sensations I was feeling overwhelmed me.\n\n\"Oh SHIT... uggggghhhh... FUCK...mmmggghhhhdffff....\" the sounds coming from my mouth didn't make any sense. I felt Emily's fist push deeper into me, my four fingers into my cunt had turned into a fist, and suddenly I exploded. Everything inside me started to shake. My hand was pushed out of my pussy, and Emily's out of my ass. I started to shake as the orgasm rocked my body. I felt her hands help me down to the floor so I didn't fall. Before I knew it I was in the fetal position, the toothbrush still sticking out of my pisshole. I reached down and slowly removed it.",
        "I remember Emily helping me to my bed, putting a blanket over me. I reached for my phone and saw a message from Megan.\n\nMegan: I had a lot of fun today\n\nMegan: The professor wants to see you Friday at 9pm in the basement\n\nMegan: Don't be late\n\nMy mind used that text for my dreams that night, making me think of what could possibly be in the plans for Friday night."
    ],
    "authorname": "heavyandhorny",
    "tags": [
        "fisting",
        "fist",
        "anal",
        "urethra",
        "pisshole",
        "public",
        "lesbian"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/the-stretch-sorority-ch-05"
}
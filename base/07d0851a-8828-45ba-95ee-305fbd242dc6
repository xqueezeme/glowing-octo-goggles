{
    "title": "Is She Smiling at Me? Pt. 03 Ch. 03",
    "pages": [
        "This story is the final chapter of the third installment of the \"Is She Smiling at Me?\" series. For clarity, that only means the end of part three, not the end of the series. As dearly as I wish I could say any part of it was based on actual events it is, in its entirety, a work of fiction. Any resemblance to real people is purely coincidental. Thanks, and enjoy.\n\n*****\n\n \n\nThe sand shifted under my shoes as I meandered down the beach, coffee mug in hand. I'd woken early and left the girls in bed, Alex playing the big spoon to Liz's little spoon. They looked so serene and adorable together that I didn't want to disturb them as I tucked the covers up to their shoulders and got dressed. I had hiked down the winding trail to the lake and found myself aimlessly wandering down the beach, enjoying the sounds of the quiet lake.\n\nA couple hundred yards down the shore the beach ended, forest reclaiming the water's edge where the waves gently lapped the land, whispering their soft, rhythmic crash and hiss as they broke and rolled out again. When I hit trees, I just kept going, slipping into the shade of the forest canopy. A squirrel chittered angrily somewhere ahead of me, disturbed by my trespassing. I stopped at a fallen tree, pausing to sit and sip my coffee while I stared through the trees to the lake, shimmering with the reflected light of the low, morning sun.\n\nI yawned and stretched, scanning the forest around me. I froze when I spotted something out of place a short distance to my left, down by the waterline. It was subtle but it triggered an instinct all the same; just a hint, a suggestion of a straight line had drawn my attention. Straight lines do not occur in nature; a straight line was an abnormality, indicative of something man made. I rose and closed the distance. As fewer trees stood between myself and whatever had caught my eye, the whole picture came into focus. It was a wooden dock, rickety and dilapidated, tucked away into a small bay.\n\nThe dock was old, seemingly rotten in parts, and didn't appear to have been used in a very long time. If there had been a trail leading through the forest to access it, it had long since grown over, leaving this random, lonely structure to fall into disrepair out here in the middle in the woods. I stepped onto it, testing it before I put my weight on it, feeling it sturdy enough and taking another step. The ancient wood creaked and groaned, but it held firm. I walked tentatively out to the end, testing each step for weakness but finding none. I wiggled back forth. Nothing. I jumped. Nothing. With a shrug I sat on the edge, my legs hanging down, the bottoms of my hiking boots just grazing the water, casting gentle ripples across the surface.\n\nI finished my coffee in the quiet solitude of the trees, looking out into the water. The bottom of the lake fell away sharply here, quickly vanishing through the murkiness and weeds as the water darkened into obscure oblivion. I watched a fish emerge from the darkness and wind its way through the aquatic vegetation, an idea quickly forming in my mind. The more I thought about it, the more I got excited about it, and soon I picked myself up, testing the dock for sturdiness once more before heading back the way I came.\n\nBack at the cabin I found the bedroom empty, and two recently used coffee mugs on the counter. A giggle and a splash from the second floor told me all I needed to know; I climbed the stairs to the bathroom and opened the door. Alex was laying back in the tub, her vibrant red mane pinned up in a messy bun, immersed to her neck in bubbly water with an amused grin on her face.\n\n\"Hey baby.\" She smiled happily at me.\n\n\"Morning beautiful.\" I replied. \"Where's Liz?\"\n\n\"She's practicing holding her breath.\" Alex ginned and pointed down at the water, her mouth opening in a soft moan.\n\nI laughed and crossed the room, sitting on the edge of the tub and bending down to kiss Alex. She moaned again as my tongue slipped into her mouth to flirt with hers.\n\n\"Where's your keys? I need to borrow the car for a bit.\"\n\n\"In my purse. Kitchen counter.\" Alex muttered distractedly.\n\nAt that moment Liz's head broke the surface, flinging a dramatic rooster-tail spray of water against the tile wall behind her as she gasped for air. She looked surprised to see me sitting there for just a moment before her big, brown eyes twinkled with glee.\n\n\"Hey baby!\" She exclaimed joyfully.\n\n\"Hello gorgeous.\" I laughed.\n\nLiz grabbed me by the collar and pulled me towards her, almost causing me to fall into the tub as she drew me in and kissed me excitedly.\n\n\"You gonna join us?\" Liz asked when we parted, biting her lip seductively.\n\n\"Naw babe, I'm gonna make a run into town. You girls have fun.\" I smiled back.\n\nMy plan could certainly have waited until later, but I felt it was important to give the girls time to themselves once in a while. I often got to spend time with each of them, one on one, it only seemed fair to afford them the same opportunity. And so, tempting as the offer was, I recused myself from this particular escapade. Liz looked disappointed for just a moment, but she smiled and disappeared under the water once more with a gentle splash, Alex gasping sharply a second later. She smiled warmly at me, emerald eyes sparkling, looking intolerably beautiful, and I bent to kiss her on the forehead before turning to leave.\n\nSometime later I pulled into the parking lot of a bait and tackle shop. A bell over the door jingled as I stepped inside and the older, weathered shopkeeper manning the checkout counter scanned me up and down before I no longer warranted scrutiny and he looked away disinterestedly. I grabbed a shopping basket and wandered around the store for a bit, passing through a whole galaxy of multicolored worms, flies, frogs and fish, all of them decidedly rubber and plastic. Only needing the bare-bones basics, I rounded up a couple cheap rods and reels, hooks, leads, sinkers and bobbers.\n\nAt the checkout isle a hat rack sat before the counter, one hat in particular catching my eye. A black, mesh-back trucker hat with a yellow bass caught on a hook embroidered on the front, next to the words \"I'm a Hooker\" in bright, lime green. I laughed to myself and threw it in my basket, thinking Liz would get a kick out of it. The old man behind the counter greeted me flatly as he rang up my purchase.\n\n\"Will you be needing a fishing license today, son?\" He asked in a gravelly voice.\n\n\"No, thanks. License is just what the government calls it when they want to take your right to do something and sell it back to you. Just a box of worms, please.\" I answered with a wry smile.\n\nThe shopkeeper looked at me hard for a moment before his craggy face cracked into a knowing grin, the corners of his mouth turning up the edges of his tangle of white beard. He wandered over to a fridge behind the counter and retrieved a styrofoam box, walking it back over to the counter to finish ringing me up. Finished in the store, I tossed my haul into the passenger seat and turned the car around to head back to the girls.\n\nBack at the cabin I found Liz sitting on a barstool at the kitchen counter watching Alex prepare a late breakfast of bacon and scrambled eggs. I slapped Alex's butt affectionately and leaned over her shoulder to plant a kiss on her cheek before going around the corner to greet Liz, bending to kiss her softly and squeeze her around the shoulders.\n\n\"Where'd you go, baby?\" Liz asked curiously.\n\nI reached into the bag for the hat and placed it on Liz's head, tugging the visor down over her eyes playfully. I saw Alex's eyes scan the logo, shaking her head but smiling amusedly.\n\n\"Ladies,\" I began, watching Liz remove the hat to read the front, giggling to herself, \"We're working for our dinner tonight.\"\n\nI dumped the remaining contents of the bag on the counter.\n\n\"Oh, Jesus.\" Alex groaned disconcertedly.\n\n\"We're going fishing?\" Liz sounded as trepidatious as she did interested.\n\n\"Mm-mhm.\" I answered. \"I found an old dock down by the lake, just off the beach in a little bay. The water is deeper there and fish swim right up. I thought we'd catch a few and cook them up for dinner.\"\n\n\"Ugh, gross.\" Alex made a face, handing me a plate of factory-farmed bacon and eggs.\n\n*****\n\n\"That's poison ivy.\"\n\n\"How do you know?\" Alex asked, one eyebrow raised at Liz.\n\n\"Leaves of three, leave it be.\" Liz answered, matter-of-factly, turning to me and winking under the brim of her 'Hooker' hat. I smiled back at her proudly.\n\n\"How am I supposed to get through there?\" Alex asked incredulously, looking down at her sandals and back at me.\n\n\"Not a problem. Liz, help me out here?\" I handed her the five-gallon pail I had found to carry back our catch, presently containing the fishing supplies.\n\nWe were standing at the edge of the beach looking into the forest where I had found the dock. Liz knew the drill by now and was dressed for the task, but Alex had not brought any footwear appropriate for traipsing through the woods. I turned to her and lifted her off her feet, cradling her in my arms while she giggled in surprise.\n\n\"You can't carry me there!\" She laughed.\n\n\"Sure I can.\" I smiled at her.\n\nI could too. The dock was only about fifty yards past the tree line and Alex wasn't much heavier than Liz's tiny, hundred-pound frame. I carried her carefully through the trees, avoiding rocks and snarls of roots jutting from the earth, Liz following close behind. Alex giggled again when I set her down on the wooden slats of the dock, pulling herself into me and kissing me warmly. When we parted, the girls sat on the end of the dock while I set up the rods and baited the hooks. I wasn't going to push my luck with trying to get them to deal with the worms; hell, even I didn't like doing the worms.\n\nCasting one line, I watching the bobber sail gracefully through its arc and land on the surface of the water before handing the rod to Liz. When I got Alex set up, I leaned over the edge of the dock and filled the pail with water to be ready for when the girls caught something, and sat back to watch. Almost immediately Alex's bobber dipped below the surface.\n\n\"Oh!\" Alex exclaimed, \"What do I do?!\"\n\n\"Give a sharp tug on the rod to set the hook.\" I smiled at her excitement.\n\n\"Now what?!\"\n\n\"Reel it in!\" I laughed. \"Don't rush, let the fish fight it, just bring him in slowly.\"\n\nI watched the rod flex as Alex reeled in the fish, grabbing the line when she brought it in near the dock and hauling it out of the water. It was a decent sized perch, maybe eight inches, wriggling violently as it dangled from the line, flicking a spray of water over the girls as it fought futilely. I held it firm and worked the hook out of its mouth, tossing it quickly into the bucket. Alex and Liz both turned around to peer into the bucket and examine the catch.\n\n\"Is that a good one?\" Alex wanted to know.\n\n\"For eating, or for size? Either way, yes. That's a perch. See the yellow-green, and the tiger-stripe pattern? It's a good size too.\"\n\n\"It's kind of pretty.\" Liz added.\n\nThe girls actually seemed to have fun fishing, and as the bucket filled, they grew quite pleased with themselves. Liz hooked a monster and fought the thrashing beast for a long and dramatic battle, but she won out in the end, finally reeling in the biggest perch I'd ever seen. When I got the hook out of the creature, I even got Liz to hold it. There was some argument about putting her thumb in its mouth, but she relented when I convinced her it wouldn't chomp down on her. She beamed proudly holding her catch, looking especially adorable in the trucker hat, and I wished again I had a camera handy to capture the moment. After a couple hours we had eight fish in the bucket, plenty for a decent meal, particularly with Liz's monster.\n\n\"Don't you want to catch one?\" Liz asked me as we made ready to leave.\n\n\"Naw, I'm good. I don't actually care much for fishing.\" I laughed.\n\n\"Then why did you make us do this?!\" Alex exclaimed, though she was grinning brightly at me.\n\n\"Well, for starters, I thought it would be fun. Tell me I'm wrong?\" They couldn't. \"And also; dinner.\"\n\n\"We have food.\" Alex retorted.\n\n\"We do, but nothing is as good as a meal you earned on your own the hard way. You'll see.\"\n\nI handed Liz the rods and scooped Alex up again to carry her back through the trees and poison ivy. When I set her down on the other side I went back for the bucket of fish and finally we headed back across the beach and up the trail to the cabin. I left the bucket in a shady spot by the deck and went inside to wash up, showing the girls how to make a solution of vinegar and lemon juice to get the fish smell off the hands. I opened three beers and we retired back out to the deck, Alex and Liz talking excitedly about the experience while I smiled inwardly. I felt happy. Happy that I got the be there with the girls, that I was a part of their lives, that they were a part of mine, and perhaps most importantly; happy that I made them happy.\n\nWe spent the next few hours lounging on the deck, drinking beer and hanging out. The sun grew hot as it traced its slow arc across the sky, and we dragged our chairs into the shade under the lee of the cabin's roof, to little avail. Eventually the girls went inside to change into swimsuits, and I even stripped down to just my pants when the temperature got to be too much. Alex returned carrying a fresh round of beers, wearing a skimpy white bikini with metallic silver highlights on the top, tied tight against her tiny, adorable breasts. Liz followed immediately behind her, adorned in an equally small pink two-piece, the strapless bandeau hugging her substantial tits, seeming all the more skimpy for its respectable effort to contain them.\n\nA while later I heard a gentle snore and I looked over; Liz had fallen asleep on the chaise lounge, her chest rising and falling steadily in the soft rhythm of slumber. I smiled and looked over her to Alex, reclining of the seat next to Liz. She too was smiling happily at the adorable girl between us until her eyes flickered up, meeting mine, her smile growing wider. I watched her get up and walk around Liz to where I was sitting, turning around to sit in my lap and leaning her head against my shoulder, sighing contentedly.\n\n\"I love how happy you make her.\" Alex said softly.\n\n\"Just her, huh?\" I teased, squeezing her affectionately.\n\n\"Shut up.\" She laughed quietly. \"You know what I mean.\"\n\n\"Mm-mhm.\"\n\n\"You make me happy, too.\" She whispered, snuggling against me and tracing a finger lightly through my chest hair.\n\n\"You girls are the best thing that ever happened to me.\" I turned to kiss her softly on the forehead.\n\nAlex tilted her head to look at me, her brilliant green eyes twinkling and a warm smile on her face. She stretched up to kiss me, her lips meeting mine softly, parting slightly to let my tongue graze hers. I kissed her adoringly, slow but full of passion, feeling her shudder against me. As things began to get heated Alex rose from my lap, taking my hand and pulling me to my feet. She stepped over to Liz and shook her shoulder gently, but Liz just wrinkled her nose cutely and brushed the hand away, rolling onto her side. Alex looked at me with a shrug and we laughed softly, heading inside.\n\nAs we entered the bedroom, I had a moment of inspiration. I opened the nightstand and pulled out the bottle of massage oil, grinning at Alex and directing her to lay down on her front. Slipping out of my pants and crawling on top of her, I brushed her vibrant red hair to one side and leaned down to nibble the back of her neck softly, making her giggle. I started undoing the knots holding her top to her body, exposing her beautiful back before working on the straps at her hips. When I was done, I paused to admire Alex's flawless body laying naked below me, her heavenly form surely crafted after the likeness of an angel.\n\nReaching for the bottle, I anointed her freckled shoulders in the strawberry-scented oil, spreading it over her smooth, naked back with both hands and digging into her muscles with my fingers. I was sitting on her ass as I straddled her and leaned down, putting my weight into the massage, trying to ignore how turned on I was getting kneading her porcelain flesh. If not for her adorable spray of freckles, Alex's skin would have been almost devoid of color, a stark contrast to my own nearly-swarthy summer tan. I ran my hands up from the small of her back to her shoulders and down her upper arms, pressing and squeezing.\n\n\"Mmm...\" Alex moaned softly.\n\nAlex's head was turned to the side, her eyes closed and a serene smile on her face. I leaned down to kiss her cheek, inadvertently pressing my erection into her ass crack. She giggled and squeezed me with her butt before I righted myself and continued working her back. My cock was standing at full attention, despite my best efforts to ignore it. I shifted down to give myself access to her thighs, pouring more oil onto her and rubbing it around until she glistened wetly. Digging deep trenches into her muscles I massaged one thigh, and then the other, letting my hands drift up between her legs to her taut little ass, grazing her balls and asshole teasingly.\n\nMoving back once more, I lifted one slender leg off the bed so the top of her foot was flat against my chest, digging my fingers into her calf. As aroused as I was getting massaging Alex's flawless body, temptation got the better of me. While I kneaded her silky-smooth leg, I bent to run my tongue ever so gently over the tips of her toes, earning a gasp and a giggle. I doubled down and licked her foot slowly, sliding my tongue between each toe before kissing them adoringly. After a few minutes I lowered the first leg and shifted over, lifting the second to my chest, working her other calf. When I slipped my tongue between her toes and took the middle two into my mouth, sucking them softly, Alex giggled again and moaned, her own arousal becoming obvious as her hips rose and fell sensually, humping the bed while I worshipped her cute feet.\n\nAny false-notions of an innocent massage had broken down entirely by that point, both of our need increasingly obvious. I slid up between Alex's legs, tasting strawberry as I licked up her thigh slowly to the cleft of her butt, kissing and lightly biting one cheek and then the other. Spreading her ass, I lowered myself to her tight little hole and licked her softly, causing a gasp of delight while I softly moaned my own appreciation for her beautiful rear. I buried my face in her, eating her sensually while my cock throbbed between my abdomen and the mattress.\n\n\"Oh god, baby.\" Alex moaned as I pushed my tongue into her.\n\n\"Mmm.\" I replied happily, muffled by her cheeks.\n\nAlex pushed herself back into my face as I lapped at her with increasing hunger, probing into her as much as I was able and humming my enthusiasm. My hands kneaded her cheeks, squeezing and rubbing while I made out with her ass, worshipping her hole with utter devotion. I got lost kissing and tonguing Alex's smooth cheeks and puckered asshole, forgetting any sense of time while I devoured her sensually, my passion consuming me, until she pulled away and rolled over smiling down at me happily.\n\nHer hard cock was standing straight out with its pale folds of foreskin concealing all but the very tip of her glans. A bead of clear precum crowned her beautiful member, glistening in the light. I took her shaft in my hand, feeling it's warmth and density, and kissed her adoringly, my tongue lapping up her sweet nectar and pushing into the sheath of flesh covering her head. I delighted in the taste of her, turning me on in the very pit of my soul as I kissed and sucked her swollen glans. Teasing her a little longer, I nibbled gently at the soft folds of her foreskin, tugging playfully with my lips and slipping my tongue inside once more, rolling it around her head while she watched me intently.",
        "Alex gasped when I took her fully into my mouth, feeling my lips pull her foreskin back as I slid down her big cock slowly, working my tongue over the underside. As I stared up at her adoringly, her brilliant green eyes met mine and she bit her lower lip, looking back at me sexily while I pleasured her, relishing the taste of her on my tongue. Up and down, I bobbed on her turgid dick, pulling off occasionally to kiss her head or lick and suck her smooth balls. I adored the sensation and flavor of Alex's goddess cock filling my mouth, but there was somewhere I enjoyed it even more and I could feel my need rising.\n\n\"Fuck me, baby?\" I asked, coming off her cock and lightly smacking her against my lips while I gazed up at her hungrily.\n\n\"Mm-mhm. Come here.\" She smiled back, reaching down for me.\n\nI crawled up next to Alex while she rolled to her side, taking my head in her hands and pulling me in for a kiss. As her soft lips met mine our lips parted, her tongue slipping into my mouth sensually as a hand drifted down my back to my ass, pulling my pelvis against hers. I felt her neat little muff of pubes tickle my abdomen as our hard cocks pressed against each other, gently humping and gyrating. A finger found its way to my asshole, pressing against me and making me shudder in anticipation while we made out passionately.\n\nAlex reached for the lube, applying a glistening portion to her fingers and reached behind me once again. She shoved her tongue into my mouth at the same time a finger pushed past my sphincter and slipped inside me, causing a muffled moan at the feeling of even that small part of her occupying my body. Alex made out with me, slowly yet hungrily, pushing a second finger inside me as she pulled my pelvis against hers, grinding our cocks together. I gasped sharply when she hit my prostate, making me shiver in delight. Alex smiled warmly at me, her bright emerald eyes staring into mine as she fingered me. For several minutes we gazed at each other happily while she gently stretched my hole, both of us moaning softly.\n\n\"Alex, I need your cock, baby.\" I pleaded, driven into a cock-starved lust by her fingers.\n\nWith a giggle, Alex leaned in to kiss me deeply once more before she slid her fingers out of my ass and pushed me stomach-down into the mattress. She pulled my hips off the bed and tucked a pillow under me to give herself better access to my waiting hole. Alex was impressively strong, and it both caught me off guard and aroused me greatly when she handled me that way, becoming suddenly more dominant and aggressive. She crawled between my legs, forcing them open with hers as she put her weight against me, her small, supple tits pressing into my back and her hard cock between my ass cheeks. She growled sexily into my ear, sending a jolt of electricity tingling down my spine, grinding her member into my ass and licking a wet smear across my cheek.\n\nAlex sat up on her knees and reached again for the bottle of lube. A moment later the wet, squelching sound of her massaging the slippery fluid over her cock met my ears and her chest pressed against me once more at the same time her cock met my asshole. She pushed into me, stretching my hole slowly as I felt her head begin to penetrate me, the sensation of pressure building as I opened for her.\n\n\"I'm going to try not to hurt you this time.\" She whispered sensually into my ear, making me quiver.\n\nI didn't mind last time, and I wouldn't have minded this time. A little pain was easily worth having my beautiful Alex inside me, but I appreciated the gesture. She pushed in ever so gently, stopping to allow my body to adjust to her before pressing on. I relaxed and took deep, steady breaths as the feeling of pressure grew, verging on but never quite reaching pain, until I felt her head slip inside me, both of us gasping in pleasure. I felt only fullness and warmth as Alex pushed her entire eight inches into my bowels, pressing her pelvis into my ass as she hit bottom.\n\nI moaned softly at the feeling of Alex's big cock fully nestled inside me while she kissed my ear and neck, her weight and warmth on my back enveloped me in comfort and arousal. When she began to withdraw and push back into me, my mouth fell open in a silent gasp. Alex took it as a cue to wrap one hand around my throat, pulling me towards her and leaning in to kiss me, slipping her tongue into my mouth while she pushed into me deep and slow, gyrating her hips as she pressed against me.\n\nAlex pumped into me sensually, alternating between short and long thrusts, making me gasp and cry out when she pressed against my prostate. I was in heaven feeling my insides shift around her big cock as she had her slow, romantic way with me, moaning softly and giggling into my ear. I lost touch again with any sense of time; my whole universe was Alex's big cock in my ass, her warm breath on my neck, and the soft noises of delight that escaped her lips to vibrate in my ear. She could have been fucking me for hours and I'd have known no better, floating away on waves of ecstasy.\n\nEventually, Alex lifted herself from my back and shifted her legs outside mine, placing one hand on my hip and the other on my shoulder, shifting her weight higher up on my thighs and pinning me to the mattress. The change in angle pressed her cock directly into my prostate, making me gasp deeply at the immense pressure against my little pleasure gland. Alex giggled at my reaction and pulled back, only to push into me again with a gyration of her hips. Immediately I felt on the edge of orgasm; a leaking sensation traveled through my cock and warmth radiated from deep inside me. Alex backed off again; she had total control over me and she knew exactly what to do with it, driving me to the precipice over and over, but she wouldn't let me cum until she was ready.\n\nThis wasn't fucking; Alex was making love to me. Romance without rush, passion without urgency, lust without fervor. She was intense and deliberate as we expressed our desire for each other, taking me just shy of the peak and sliding back, only to start the climb up the mountain all over again. My legs were trembling uncontrollably by the time Alex decided to let me climax. She moaned and pressed into me firmly, gyrating against my ass, the full force of her cock asserting itself against my prostate. I cried out and contracted powerfully, every muscle in my body tensing with the explosion of my orgasm. My cock pulsed beneath me as high-pressure jets of cum rushed through it, my ass squeezing Alex as the full-body experience of a prostate orgasm thundered through every fiber of my being. Throughout it all, Alex kept grinding herself against me, giggling happily and leaving me paralyzed in the grip of rapture until I was left depleted, whimpering and twitching with aftershocks.\n\n\"You are so cute when you cum on my cock.\" She had pressed herself into my back again, whispering sensually into my ear and making me shiver in delight.\n\n\"Mmm. I love your cock so much, baby.\" I moaned.\n\nAlex nibbled my earlobe and neck, growling softly against my skin, a warm, tingling sensation radiating through me. She withdrew from my ass, leaving me feeling empty, my body immediately craving her presence once more. I didn't have to wait long; she gripped my legs and flipped me over onto my back, pushing my knees up to my chest and her cock against my waiting hole. With just the slightest push she slid inside, my body swallowing her easily until her pelvis pressed into my ass, both of us sighing at the pleasure of being reunited. Alex resumed pumping into me sensually, her magic hips rolling back and forth, the toned muscles in her stomach oscillating in a seductive wave while she looked down at me, biting her lip and moaning softly.\n\nWatching her sultry expressions and perfect body as she took pleasure from my ass was about the pinnacle of eroticism. Her flowy red hair cascaded around her shoulders and framed her gorgeous green eyes beautifully, her pert little tits heaving with her breath as her whole body writhed in an ecstatic dance of carnal delight. Alex leaned down to kiss me, her chest pressing into mine as her tongue slipped past my lips. We made out passionately, my legs wrapped around her waist, my hands feeling the taut muscles of her smooth back as I held her tight, bouncing gently to the rhythm of her thrusts.\n\nAs the cadence and forcefulness of Alex's ministrations steadily increased in urgency, I knew she would soon explode inside me. I slid one hand down her back and cupped a smooth ass cheek, squeezing her and helping pull myself into her to meet her thrusts, each of us moaning and grunting into each other's mouths. We were still kissing when Alex cried out, breaking the kiss and craning her neck, pulling me into her with one strong hand around the back of my head. She thrust raggedly, her hips jerking against my ass while I felt her powerful cock twitch inside me. Warm wetness spread through my bowels as she dumped her huge load into my body. I held her tight, cradled in her arms, feelings of pride and adoration overwhelming me as my lover's orgasm shuddered through her.\n\nWhen Alex had finally emptied herself into my ass and her tensing muscles relaxed once more, she collapsed against me, panting heavily. I kissed her neck and squeezed her, laughing happily against her silky skin. I loved the taste of her sweat on my lips and the full feeling of her big cock nestled motionless inside me as her chest heaved against mine. She lifted her head, smiling warmly and touched her forehead against mine, giggling as her breath slowly returned. I kissed her passionately, trying to express my gratitude and affection for her in that moment. We made out until Alex's cock began to soften and slip out of me. Finally, she rolled off me and laid at my side, taking my hand in hers while we gazed at each other, smiling and giggling joyfully.\n\nAlex and I cuddled in bed for a while, kissing and petting affectionately until we decided it was time to get up. I helped her tie her top back in place and we got a fresh round of beers before heading back out to the deck. Liz was still snoring softly, curled up where we had left her, napping peacefully in the shade of the cabin.\n\n*****\n\n\"But... They're still breathing...\" Liz informed me, sounding horrified.\n\nI was gutting and skinning our catch from earlier out on the deck. Alex had kicked me out of the kitchen on the grounds of blood and guts, and then declined to come watch the process. If she was going to eat it, she had said, she didn't want to see anything in between until it was on her plate. I shrugged and brought a cutting board and fillet knife outside with me. The somewhat more adventurous Liz was, however, morbidly curious and had come out to watch. In a bucket beside me several disembodied fish heads stared up at us blankly, their mouths opening and closing in silent gasps.\n\n\"Yeah,\" I replied, cutting a fillet off one of the bigger perch. \"They do that for a while.\"\n\n\"Are they alive?\"\n\n\"No, they're dead, it's just nerve activity. Freshly skinned frog legs will even dance if you put salt on them before you cook them. Ask me how I know.\"\n\n\"Fuckin' gross, Matt!\" She blurted out, slapping me on the shoulder.\n\nI laughed, probably harder than I should have, while Liz gave me a disgusted, yet somehow still adorable, look. When I got myself under control, I apologized and squeezed her around the shoulders. She warmed up quickly and even stuck around while I finished with the fish, complimenting her monster catch when it's turn came up. I left the undesirable fish bits in the bucket and brought the fillets back in side. The girls hung out on the couch while I got started on dinner, preparing a batter for the fish. As I was getting slicing up potatoes for home fries, Alex got up and walked towards me.\n\n\"I ever tell you how sexy it is that you cook for us?\" Alex slapped my ass playfully, flashing a sultry grin before leaning into the refrigerator and handing me a beer.\n\n\"You have,\" I laughed. \"But it's not like I get tired of hearing it.\"\n\nShe winked at me, glancing over her shoulder as she went back to the couch to join Liz. It wasn't long before I had dinner ready; fried fish in a beer batter and served it with crispy home fries, a compliment of lemon, vinegar and tartar sauce on the side. We had salad left over from the day before, a medley of greens, strawberries, red onion, feta cheese and candied pecans with a balsamic poppy seed dressing. It probably wasn't the best compliment to fish, but it was a damn good salad and we needed to get rid of it. I called the girls over to the dining table and opened a bottle of white wine, pouring three glasses.\n\n\"Alright,\" Alex began, sliding into her chair. \"I'll give it to you; it actually looks pretty good.\"\n\n\"Just don't tell her about the frog legs.\" Liz added, making a face as she sat next to Alex.\n\n\"What about frog legs?\" Alex asked with a start.\n\n\"Nothing about frog legs.\" I laughed, \"Trust me, you don't want to know.\"\n\nAfter a trepidatious start, the girls did actually enjoy the meal. I tried to impress upon them the sense of accomplishment and reward I felt accompanied catching and preparing one's own food from scratch, though I'm not sure how much I got through. Liz got it more so than Alex, I think, who didn't want to be reminded that her dinner had been alive just a few hours ago. Either way, I was happy they devoured the fish enthusiastically. We had a nice dinner and sat around the table for a while afterwards, talking and laughing while we finished the bottle of wine and watched out the sliding glass doors as the sun make its slow retreat toward the horizon.\n\nLiz wanted to have a fire in the pit out front of the cabin so I went out to get started on that while the girls cleaned up around the kitchen. Dusk had fallen over the forest and light was in short supply, though we had plenty of pre-cut logs for the fire I had to do a bit of foraging around the tree line to gather dead, fallen twigs for kindling. By the time the girls finished up inside and came out to join me I had a good fire underway, snapping and crackling merrily as the flames lapped at the logs. Liz leaned into me and handed me a glass of whiskey, wrapping her other arm around my waist and pulling me into her.\n\n\"You're the best.\" I said, bending to kiss her softly.\n\nThe girls had changed into cozy sweaters, though their smooth, slender legs remained exposed, Liz in a cute pair of shorts and Alex in a tight denim skirt. I sipped my whiskey, feeling its warmth spread through me as I sat down in one of the wooden lawn chairs, watching Alex slide into the one next to me. Liz paused for a moment, deciding who's lap she wanted to sit on before finally settling on Alex's and lowered herself into the chair sideways, kicking off her flip-flops and swinging her legs over the armrest into my lap. She reached for my hand, smiling brightly and taking it in hers with an affectionate squeeze.\n\nWe spent all night watching the fire, it's dancing flames flickering and casting the lawn in warm light. Liz was snuggled into Alex's chest while I absent-mindedly massaged her cute feet, pausing occasionally to sip my drink. I loved the quiet time with the girls, warm and intimate, no pretense of expectation, the three of us just simply being. Talking and laughing with them was the most natural thing in the world, and though the initial shock and disbelief at my good fortune had slowly eroded over the time we had been together, I never stopped having those moments of feeling like the luckiest man in the world; this was certainly one of them.\n\nI lifted one of Liz's dainty feet, kissing her toes softly and earning a joyful giggle, and slid out of my chair. Collecting our glassware, I went back to the cabin for another round of drinks, smiling inwardly. More wine for the girls and another whiskey for myself, I juggled the glasses as I made my way back, bending to kiss Alex and then Liz as I handed them their drinks. Two sets of warm smiles and twinkling eyes beamed back at me, their happy faces aglow in the firelight as I slid back into my seat. We stayed up late as the moon traversed the night sky, talking and joking and swatting the odd mosquito, until we finally decided to turn in for the night and went to bed.\n\n*****\n\nIt was our last day at the cabin. Nearly a whole week we had been there, though it was beginning to get difficult keeping track of the days with our retreat from society going on as long as it had. I woke up that morning feeling Liz's warm, naked back cuddled up to my chest with my arms wrapped around her. Alex must have gotten up already as it was just the two of us together in the bed. We had evidentially taken to spooning at some point in the night and I smiled, squeezing her adoringly.\n\nLiz smelled faintly of sleep and girl-sweat. The subtle aroma reached deep inside me, arousing me on some core, primal level. I sighed and kissed her shoulder softly, tasting her skin on my tongue. She stirred and cuddled up even closer, suddenly I was acutely aware of my morning wood as she pushed her ass against it, pinning it in her crack. I was beginning to wonder if she had woken up when she wiggled her ass and squeezed me with her tight, smooth cheeks, sending a wave of pleasure through me.\n\n\"Mmm.\" I moaned lightly, \"Morning babe.\"\n\n\"Morning.\" She giggled quietly.\n\nLiz turned her head towards me looking half asleep and extremely cute. I leaned up to meet her lips with mine, kissing her softly. She woke up quickly against my mouth, kissing me with increasing passion and pushing her ass into me rhythmically. I slid a hand down her pelvis until I felt the heat of her throbbing cock and took her in my hand, stroking her slowly while we made out. She was rock hard and felt wonderful in my hand as she humped herself into my cock and kissed me hungrily.\n\n\"You want my cock, baby?\" I whispered in her ear, licking her earlobe and feeling her shudder in delight against me.\n\n\"Mm-mhm, please?\" She pleaded in a shaky voice.\n\nI reached for the bottle of lube on the nightstand and poured a glob on my throbbing cock, stroking myself a few times to spread it around before I massaged some into Liz's tight little asshole. Lining myself up with her hole I pushed slowly, taking my time stretching her open until I slipped inside easily. Liz gasped and I let out a low moan as I pressed on until my pelvis was firmly pressed against her ass, holding her hips against me. We kissed again while I sat motionless inside her for a few moments, just enjoying the feeling of being enclosed in her tight, warm ass.\n\nLiz moaned again when I withdrew a little bit and pushed back into her, slow but firm as I pulled her hips back into me once more. We made love long and slow, kissing and touching each other while we shared this wonderful, lazy, romantic morning sex. She would moan or whimper cutely and cuddle into me when I bottomed out, pushing into her slowly but forcefully while I kissed her shoulders and the back of her neck. My hands wandered over her beautiful body, feeling the gentle curves of her waist and hips, the smooth flatness of her stomach, stroking her slender thighs and cupping her taut butt cheek as I slid in and out of her.\n\nAs I felt myself getting closer, I couldn't help but pick up the pace, pumping faster inside her cute little ass. Liz responded in kind, pushing back into me, matching my rhythm and fucking herself harder on my dick, crying out with each thrust. I slid one hand up her side until I found a breast, kneading if firmly as I pulled her against me, moaning and grunting with increasing urgency as my orgasm built up and overtook me. With a mighty push into her ass, I tensed and felt the first spurt of cum rush through my cock. I grunted and rested my forehead against the nape of her neck, thrusting into her in that halting, jerking motion a man gets mid-orgasm. Liz moaned in delight as I filled her ass with my cum, fucking her raggedly until the orgasm had come and went. I breathed heavily against the back of her neck, hugging her affectionately while she giggled softly. When I started to pull out, she grabbed my ass to stop me.",
        "\"Please stay?\" She asked in a pleading tone I couldn't say no to if I had wanted to.\n\n\"You got it.\" I sighed happily, cuddling back up to her and holding her close.\n\nWe laid like that for a while, gently touching each other while we snuggled with my member still buried inside her. As always, I enjoyed the post-sex physical intimacy, even as my cock eventually softened and slipped out of her; unable to overcome the tight muscles of her sphincter any longer. She rolled over and smiled at me, big brown eyes sparkling in the morning light filtering in through the sheet I had hung over the bay window. I held her in a tight embrace, our arms wrapped around each other and our legs intertwined.\n\nWhen she pressed her pelvis into my hip, I felt her hard cock nudge against me and I was overcome with a deep desire to pleasure her. I pushed her down flat on her back, tracing my fingers lightly around her hip bones, across her abdomen and down her smooth pubis, tickling her gently. Liz gasped and trembled at my touch until I finally took her firm member in my hand and began stroking. She closed her eyes and bit her lip gently, enjoying my hand on her while I kissed her neck and chest.\n\nBending slightly, I kissed down one breast, slowly working towards the center and licking playfully. I sucked her nipple into my mouth, flicking over it with my tongue, applying just a hint of pressure with my teeth, making Liz gasp once more. I moved on to the other breast, giving it a fair share of my attention before I began slowly kissing down her stomach. As I neared her pelvis, I felt her muscles twitch and jump at the touch of my lips, her excitement ready to boil over. I slid down between her legs until I was face-to-face with her throbbing cock, kissing and nuzzling it gently, feeling it's smoothness and warmth on my face. I kissed my way to the tip, rolling my tongue around her glans before taking her fully into my mouth and pushing down until she was buried in my throat.\n\n\"Oh god...\" She whispered, eyes closed tight and a look of pure pleasure on her face.\n\nI could handle her five inches a lot easier than I could Alex's eight, but still I eventually gagged on the hard dick occupying my throat and had to come up for air. I didn't care. I adored this woman and she deserved all the pleasure I could give her and more. I pushed back down, burying my nose into her smooth pubis, lifting her balls to my chin so I could lick them while she was still down my throat. I gagged again but held down, fucking my face against her until I had to back off for real. Back and forth I went, occasionally coming off her entirely to catch my breath, bathing her balls with my tongue as I stroked her intently, her cock slippery with my spit.\n\nLiz was moaning and whimpering, twitching and squirming as I worshipped her, trying with all my might to translate what I felt in my heart into her cock through my mouth. My efforts were rewarded with the sweet taste of her precum flowing against my tongue, casting my head adrift on waves of her divine flavor. My eyes rolled back and I ran my hands up her sides, massaging her tiny frame while I bobbed up and down, relishing her taste.\n\nI lost track of time, so engrossed was I in pleasuring Liz's beautiful dick, but at some point she had lifted her smooth legs over my shoulders and taken my head in both her hands, pulling me into her as she pumped herself in and out of my mouth, panting and crying out adorably. Her cries built in both pitch and frequency and I smiled inwardly, knowing she was about to explode. I felt her tense, fingers gripping the back of my head tightly as her moans and whimpers hit a crescendo and her cock twitched in my mouth, coating my tongue in her warm cum. I moaned in delight as she filled my mouth, squirt after squirt of delectable, salty semen. She tasted amazing. I kept bobbing on her cock as she rode her orgasm to the end, finally relaxing and letting out a deep sigh.\n\nI slid off Liz's dick slowly, rolling her cum around my mouth with my tongue, savoring it before finally swallowing. I licked my lips and looked up at her; she had her eyes closed and wore a look of total bliss on her face. She was so damned beautiful. I kissed her cock a few times playfully and finally moved up next to her on the bed. Her big eyes opened and she beamed joyfully at me as she snuggled against my chest, letting out a quiet giggle of contentment. I bent to kiss her forehead and hugged her tight. For a long while we just laid like that, holding each other in a warm, affectionate embrace.\n\nWe eventually decided to get up and take a shower, finding a note from Alex on the counter explaining she'd gone into town for more wine and she didn't want to wake us. I smiled at the lipstick kiss she left below her flowy handwriting. Liz and I went upstairs and washed under the warm water of the shower. We kissed and laughed and held each other, and it was flirty and soft and sensual, and I felt so happy in that moment.\n\nAfter we had dried off, we went back downstairs to change into our pajamas and get some coffee in us. We figured on lounging around the cabin being lazy until the missing member of our trio returned, then we could figure out what to do with our last day there. It was nearly noon when Alex finally came through the door with several grocery bags.\n\n\"Little help, Matt?\" She called.\n\n\"Hey, baby!\" Liz exclaimed, already bounding happily into the kitchen.\n\n\"There's a few more bags in the trunk, do you mind?\" Alex asked me.\n\n\"You got it.\" I replied as I headed to the door.\n\n\"Hey, baby.\" Alex said to Liz, who had wrapped herself around her in a tight embrace.\n\nI smiled at the girls kissing each other lovingly as I walked past.\n\n\"Hey.\" Alex had grabbed my arm to stop me and was smiling warmly at me, her emerald eyes twinkling.\n\n\"Hey.\" I smiled back and leaned in to kiss her, soft and lingering. Liz was still plastered to her front, so I gave them both a squeeze and headed for the car.\n\n'Oh-oh.' I thought as I opened the trunk. Both bags where from the liquor store and were stuffed with various bottles and cans. I scooped up the bags and wrangled the trunk closed, carrying the fruits of Alex's shopping spree back inside.\n\n\"I decided to get a bunch of food so Matt could have the night off tonight.\" Alex was showing Liz her haul from the grocery store; assorted frozen pub foods.\n\n\"Alex? What did you do?\" I hoisted the bags onto the counter, the bottles inside clinking against each other as the weight shifted.\n\n\"Well, it's our last night here,\" Alex said, reaching into one of the bags and producing a bottle of Patron Silver, \"So I thought we'd go out with a bang!\"\n\n\"Wait... Did Alex just make a bad sex pun?\" I looked at Liz with a grin.\n\n\"No!\" Alex exclaimed defensively.\n\n\"I think she did.\" Liz smiled at me, picking up the thread.\n\n\"I did not!\" Alex protested.\n\n\"She definitely did.\" I said, very matter-of-factly.\n\n\"Screw you guys!\" Alex cried.\n\n\"She did it again.\" Liz pointed out flatly, though she was unable to conceal her smile.\n\n\"Ugh!\" Alex groaned in frustration while Liz and I looked at each other and laughed. We both hugged her and kissed her cheek by way of apology.\n\n\"Alright!\" Liz exclaimed suddenly, snatching the bottle of tequila from Alex and hoisting it over her head, \"Matt, put on your old fogey music, we're having a party! Wooo!\"\n\nAlex's eyes met mine and we broke into wild laughter. I raised an eyebrow and shrugged while she shook her head, still laughing heartily. We both knew we would regret this tomorrow, but Liz's unabated enthusiasm was impossible to argue with. I helped Alex put the groceries away and get the liquor store haul in the fridge. She had gotten me a few cans of Guinness, along with an assortment of coolers and more wine, to say nothing of the tequila on the counter. We still had Jameson and beer, so all in all we had way more then we needed. Or so I hoped.\n\nOnce sorted in the kitchen, I went to the record player and fished around for an album, finally settling on The Best of The Doors and setting the record on the turntable. Liz was rooting through the cupboards for shot glasses and Alex was already slicing up a lemon when \"Break on Through\" started pumping through the speakers.\n\n\"Ah-ha!\" Liz called out as she slid down from where she had crawled onto the counter, three shot glasses in hand. She poured three rounds and handed Alex and I our glasses.\n\n\"Do we really need the training wheels?\" I asked, looking at the lemons.\n\n\"It's fun!\" Liz protested.\n\n\"It's just that it's an eighty-dollar bottle of tequila.\"\n\n\"Yeah, Matt, just be fun, okay? God.\" Alex teased, poking me in the ribs and smiling brightly, pleased the tables had turned on me.\n\nAnd so, we did the ubiquitous salt, shot, lemon ritual, the girls both making faces as they bit into their lemons and I laughed inwardly. I poured a Guinness for myself and the girls opened a couple of the coolers before I cranked up the volume on the record player and we moved our little party out onto the deck. Liz grabbed hold of Alex and pulled herself into her, dancing exuberantly against her lover to the sound of Jim Morrison belting out \"Light my Fire\", holding her drink in one hand while she gyrated her hips sexily against Alex's pelvis. I sat back in one of the chairs and watched the girls, their eyes locked on each other, each smiling joyfully while they danced together and the world around them slowed to a crawl.\n\n*****\n\n\"Good-bye, lake!\" Liz hollered across the water.\n\nFrom somewhere on the far side of the gently rippling surface of the lake, the echoing caw of a crow sounded in haunting response. The girls wanted to visit the beach one last time, so we'd stuffed a few beers and coolers into a backpack and made our way down the winding trail to the water. They had changed into their swim wear, each looking sexy as hell, Alex in her strappy white number and Liz in her skimpy pink bikini.\n\n\"Go for a swim?\" Liz asked, her big, bright eyes shifting back and forth between Alex and I.\n\n\"I didn't bring a bathing suit.\" I answered, looking down at my clothes.\n\n\"So what? Skinny dip.\" She offered.\n\n\"Ah...\" I hesitated.\n\n\"Ugh.\" Alex groaned in mock annoyance, reaching behind her back and pulling the tie of her top loose.\n\n\"What are you doing?\" I chuckled as she yanked her top off and tossed it into the sand, her pale, perfectly formed little tits standing free in the open air.\n\n\"Making you more comfortable.\" She answered with a wink, shimmying out of her bottoms.\n\nInstantly, I felt my cock shift at the sight of her flaccid, though still substantial, cock falling free of its constraints. Liz giggled and followed suit, stripping out of her bathing suit and tossing it next to Alex's. Standing naked on the sand before me, the girls had defeated any argument I could have made against getting in the water with them, so with a shrug I undressed and added my clothes to the pile. Liz squealed joyfully at my nakedness and grabbed my hand, tugging me towards the edge of the water enthusiastically. The three of us waded out into the lake until it was deep enough to swim and Liz kissed me intensely before diving backwards, disappearing under the surface.\n\nAlex pulled me into her, pressing her smooth, wet front against mine and kissing me deeply, slipping her tongue into my mouth sensually as I felt a hand wrap around my cock, giving it a playful tug. When our lips parted, she stared into my eyes, lingering for a moment and smiling warmly at me before giggling and flipping herself backwards with a splash, kicking a spray of water over me as she dove under.\n\nWe swam for a while, the girls frolicking happily in the water, teasing and flirting with me and each other until we were pruney and water-logged. Eventually we emerged from the lake, dripping and chilly as the breeze evaporated the water from our naked bodies. I dressed as the girls slipped back into their bathing suits, sitting in the sand to let the sun warm us while I passed Alex and Liz a cooler and slid down between them with a beer. Putting an arm around each of their shoulders, I gave them an affectionate squeeze as they leaned against me, looking out across the surface of the lake as it reflected the sun back at us like a sea of glittering diamonds.\n\nWhen we had finished the drinks we had brought with us, I collected the empties and we headed back to cabin. Liz poured another round of shots while I flipped the album on the turntable, the music starting again with \"Five to One\", Jim's resonant baritone pounding out of the speakers while I joined the girls in the kitchen. I should have been more concerned about drinking responsibly, but by then the alcohol had begun to take hold and the notion of good decision-making was a distant and foreign concept. We did our shots, lemon et al. and Liz grabbed my collar, pulling me in for a boozy kiss while her body grinded into mine to the tune of the music. I felt Alex press into my back and the three of us kissed and danced there in the kitchen until the song ended.\n\n\"I have an idea.\" Alex muttered, patting me on the butt playfully before disappearing into the bedroom.\n\nLiz and I looking at each other smiling, both wondering what Alex had in store. We pulled another round of drinks from the fridge and retired to the couch. When Alex returned, she was holding the vibrator Liz had worn to the beach a few nights before, grinning mischievously and wiggling it between her fingers. Liz giggled excitedly and I chuckled at the look on Alex's face.\n\n\"Who's that for?\" I asked with a raised eyebrow, though I was pretty sure I knew the answer already.\n\n\"You said you wanted to try it some time.\" Alex flashed a sultry smile my way.\n\n\"You're going to love it, baby!\" Liz giggled, her big eyes beaming with enthusiasm.\n\n\"Liz, do the honors, sweetie?\" Alex was already tugging at my belt as she handed the toy over.\n\nThe girls stripped me from the waist down, Alex guiding me down on the couch so I was laying on my back, my head in her lap while Liz slid between my legs. I lifted my knees to my chest, feeling Liz's hands spread my cheeks, shivering in delight when her soft, wet tongue grazed my hole. Alex looked down at me, grinning happily at my reactions while Liz ate my ass, moaning softly while her tongue probed into me.\n\nMy cock grew tight, swelling in response to the sensations Liz was causing, until I felt her back off and spit on me. The cool surface of the toy pressed against me as Liz inserted it slowly. I had no problem taking the small, bulbous head of the vibrator into my body, feeling myself stretch around it and contract again as it passed its widest point and began to narrow, coming to rest nestled inside my ass. I waited for something to happen, but it never did.\n\n\"Okay, you can get dressed.\" Alex said with a giggle, slipping the little remote for the toy into her bikini top.\n\nI was a little caught off guard with the sudden start and stop of sexually charged energy, but knowing Alex I should have expected that she planned on torturing me for a while. I chuckled awkwardly and sat up, finding the toy buried inside me rather comfortable, fitting into my body unobtrusively. Liz was eyeing me curiously, as if she too expected an immediate reaction. I leaned into her and kissed her passionately, grazing her lip with my tongue and sliding it into her mouth when she opened for me. When we parted, she smiled joyfully, and I got up from the couch to find my pajama pants.\n\nWe hung out on the deck, flirting and listening to the music as the day wore on. It wasn't until we needed a fresh round of drinks that Alex's sweet torment began. I had almost forgotten about the toy in my ass when I went inside to head for the fridge. Mid-stride I felt the vibrator come to life, the strong and constant buzz against my prostate surprised me, forcing an involuntary gasp as I braced myself again the counter, suddenly forgetting how to walk. The vibrations grew stronger and louder until my knees began to shake, protesting against having to support my weight under the circumstances when, as soon as they had started, the vibrations stopped dead.\n\nI heard a muffled giggle through the door and looked over my shoulder to see both girls watching me through the glass, smiling wide and laughing at my reaction. I shook my head and smiled, collecting myself and finally remembering what I had come inside for. Alex and Liz were still smiling brightly when I returned, handing them each a bottle and blushing slightly.\n\n\"Pretty great, isn't it?\" Liz giggled, looking up at me happily.\n\n\"Might be better if there wasn't a masochist at the switch.\" I answered teasingly, narrowing my eyes at Alex.\n\n\"You love it.\" Alex replied, reaching for my hand and pulling me down beside her.\n\nAlex took the back of my head in one hand and shoved her tongue into my mouth aggressively just as I heard an audible 'click' and the vibrator leapt to life once more. Instantly, I melted into her, humming into her mouth while we made out. She let it run as our tongues rolled around in our mouths. Quickly the sensation in my ass built to a pre-orgasm plateau, making me whimper softly before suddenly stopping again. I shuddered and took a deep breath; the rapid transition between ecstasy and reality had a strange effect on me, a certain disconnect that left me feeling unbalanced. A part of me wanted to beg Alex for more, while an equally desperate part didn't want to give her the satisfaction. At least, not yet. Either way, something about the helplessness of being at her mercy was a huge turn-on.\n\nThe torture continued throughout the evening. Through more rounds of shots, through dancing with the girls as we burned through album after album, even through dinner, Alex would turn on the little machine without warning and let me squirm for a while. We were all pretty inebriated by the time we finished eating, and Alex was having just a little too much fun edging me with the vibrator while Liz giggled adorably at my reactions. I was half-mad with the desperate need to cum by that point, though I'd done well resisting the urge to beg for release as the anticipation built to levels of desire I hadn't thought possible.\n\n\"What do you think, Liz? Has he had enough?\" Alex asked, her back turned as she took our plates to the sink.\n\n'Please?' I mouthed silently, pleading with my eyes when Liz looked at me, giggling softly.\n\n\"He kinda looks like he's about to explode.\" Liz answered, smiling brightly.\n\n\"He does, doesn't he?\" Alex returned to the table, pretending like she was examining me.\n\n\"Jesus Christ.\" I muttered under my breath.\n\n\"Okay, baby, let's get you taken care of.\" Alex had bent down and whispered sensually into my ear, flicking her moist tongue against the soft skin of my neck as I shivered in arousal.\n\nAlex took my hand and pulled me to my feet, grabbing for Liz as she guided us to the bedroom. She pressed herself into me, holding me close and kissing me hard and deep, sliding her hands under the waistband of my pajama pants and pushing them down over my hips. My cock responded immediately, feeling tighter than a snare drum as it sprung to attention. Alex took me in her hand, giving me a few slow strokes while she kissed me passionately. When she backed off, she looked into my eyes, biting her lower lip as her brilliant green eyes twinkled happily.\n\n\"I'm going to get you back for this you know?\" I said softly, stifling a gasp at the feel of her hand on me.\n\n\"I'm counting on it.\" She giggled, winking sexily at me as she pushed me back into one of the chairs.\n\nAlex clicked a button on the remote, starting the vibrator once more, and clicking it again before setting it down on the nightstand. The signature of the powerful toy inside me had changed; where it had been a constant buzz before it was now a slow pulse. Still rather intense, the new sensation was much more tolerable as it hummed away against my prostate.",
        "I watched as Alex reached behind her back and tugged the tie of her bikini loose, pulling it off over her head and tossing it aside, exposing her beautiful little breasts. She grabbed Liz and kissed her intensely, slowly sliding her pink bandeau over her sizeable breasts until they fell free with a playful bounce. The girls made out a moment longer, their gorgeous bodies grinding together sensually until they stopped and looked over at me. Alex directed Liz to her knees between my legs and followed suit, sliding down beside her. Liz looked ecstatic as she leaned forward, her big brown eyes staring intently at my cock as she took me in her hand.\n\nFor the first time I noticed my cock was the hardest I'd ever seen it, so turgid it looked as if it could split at the seams. My veins were bulging and the head had taken on a deep red hue, looking almost shiny as the skin stretched to its limits. Liz wasted no time taking me into her mouth with an excited gasp, driving herself down until her nose was buried in my short pubes. I had expected to be on a hair-trigger by this point, ready to blow at the slightest touch, but to the contrary I found the sensations of the toy buzzing against my prostate almost a distraction from what Liz was doing to my dick. No doubt the heroic quantity of alcohol we had consumed further dampened my sensitivity.\n\nAlex smiled happily at Liz's enthusiasm as she bobbed on my cock, taking me all the way into her tight throat over and over, fucking her face on me energetically. I moaned at the sensation of her tonsils stretching over me as she slid up and down on my throbbing member. Alex leaned in to lick my balls, her warm, wet mouth working the soft skin of my scrotum while Liz serviced me, moaning with delight.\n\n\"I can feel your cock vibrating.\" Liz came off me with a giggle, a string of saliva connecting my head to her lower lip.\n\nWith a hungry growl, Alex took her place, sucking me into her mouth and sliding down, her soft tongue dancing around the underside of my shaft. She lowered herself, pausing for just an instant as she pushed her mouth down on me, forcing me into her throat like Liz had moments ago. Unlike Liz, she gagged on my hard cock occupying her throat, yet she kept at it; short deep strokes over the entirety of my member until she gagged once more and pulled back. Alex gasped for air and spit a huge glob of thick saliva onto me, spreading it over me like lube as she jerked me exuberantly.\n\nLiz took the opportunity to lay back on the floor, shifting her smooth, slender legs out from under her as she leaned down, lifting her feet to my lap. I watched as Alex released me to make room for Liz's adorable little toes as they wrapped around my shaft, sliding smoothly against my raging erection. Her feet felt increadible, stroking me with perfect control, slipping over my head and back down again. Alex looked down at Liz with a smile, giving one of her beautiful breasts a playful squeeze before turning back to me. She repositioned herself to take my head back into her mouth, licking and sucking while Liz's toes worked my shaft.\n\nI moaned deeply and leaned my head against the back of the chair. Between the vibrator pulsing away inside my ass, Liz's dainty feet stroking me and Alex's warm, soft mouth on my head, I was in another world, floating away on waves of ecstasy. The girls worked my dick in perfect harmony, driving me wild at the sensations of their joint efforts while I watched them pleasure me zealously.\n\nEventually Alex backed off, giving up control of my cock to Liz's cute little toes, and moved down to position herself over her Liz's head. She pulled her bikini bottoms to one side, freeing her own swollen erection and promptly shoving it into her lover's mouth. From my vantage point I could see Liz's throat bulge impressively as Alex pushed her eight long inches inside, coming to a rest fully enveloped in Liz's mouth. She took a big, round breast in each hand and kneaded them with her fingers while she fucked Liz's throat slowly, making it swell and contract again as her big dick pushed through.\n\nLiz hadn't missed a beat, stroking my cock between her toes while Alex made love to her throat, moaning her own proclamations of pleasure. Watching the sexy scene unfold before me was about all I could bear; I was about to reach the point of no return, nudged along by Liz's expert feet, when Alex suddenly pulled out of Liz with a gasp.\n\n\"I want to fuck you, beautiful.\" Alex said, looking down at Liz, who beamed up at her, nodding enthusiastically.\n\nAlex helped Liz to her feet and pulled her bikini bottoms down over hips. She directed her onto the bed, pushing her down on all fours with her face to the mattress, Liz's taut little ass hovering in the air before us while Alex untied her own bottoms, letting them fall to the floor. She reached for the lube, pouring a dollop of the glistening fluid over Liz's hole and massaging it around with a thumb, pressing into her and slipping inside, eliciting a soft moan from Liz. Hungrily, Alex spread another portion of lubricant over her erection and positioned herself for entry. I watched as Liz's hole swallowed Alex's cock with ease, her substantial length disappearing into the cute ass while both girls gasped in pleasure.\n\n\"Come here.\" Alex spoke seductively, looking over her shoulder at me with a sultry smile.\n\nWhen I joined the girls on the bed, Alex wasted no time pouring another thick glob of lube into her hand and wrapping it around me, massaging the cool, slippery fluid over my throbbing cock. I knew immediately what she had in mind, even before she released me and reached behind herself to spread the remainder of the lube against her ass. Alex arched her back sexily as I positioned myself behind her, pushing her forward as I pressed my cock against her tight hole. I penetrated her slowly, feeling her warmth and tightness envelope me as I slipped inside, hearing her gasp as I slid past her sphincter.\n\nPushing her ass back towards me, Alex impaled herself until she ran out of dick and pushed forward again into Liz, each of us moaning in rapture. I let Alex fuck herself on me, slowly at first but quickly growing faster and more intense as I held her hips, driving herself into Liz and onto me with each stroke back and forth. Her ass was the pinnacle of pleasure as it swallowed me over and over, her soft, velvety insides hugging my member in a tight embrace. Between the vibrator still pulsing away inside me and Alex's delectable butt bouncing against my pelvis I was surprised I was still in the game.\n\nI reached one hand around Alex, feeling for Liz's cock and taking her in my hand, stroking her while Alex pistoned into her wildly. Liz was whimpering and crying loudly as she took Alex's dick, bouncing with each quick thrust into her little body. Precum flowed from her rigid member in rivers, making my fingers slippery as I jerked her, matching Alex's rapid tempo. It wasn't long before her hands were grasping desperately at the sheet beneath her, muscles straining as she cried out with each impact of Alex's hips against her ass.\n\nWith a yelp, Liz exploded in my hand, her cock twitching and pulsing as she came. I swore I could even hear the splash of her cum against the sheets over her wavering moan as her orgasm ripped through her. It was too much for Alex, who gasped at the sensation of Liz contracting powerfully on her cock and moaned loudly, jerking into Liz as her own orgasm overtook her. Her ass squeezed me even harder and I took over the action, slamming into her and driving her into Liz, both girls crying out in ecstasy. I didn't let up, fucking Alex into Liz forcefully until she was gasping and trembling, her head leaned back against my shoulder as her chest heaved with her breath.\n\nSomehow, I had not yet made my own journey to the top of the mountain, but the girls weren't about to let me go unsatisfied. Liz pulled herself away and moved out from in front of Alex, who practically fell forward without Liz's butt to keep her pinned against me. Liz scrambled around her lover and dove onto my cock, taking me into the depths of her throat without pause. I sat back on my knees watching her devour my member hungrily, cute, muffled little moans of delight humming against my dick. Distracted by Liz's lust, I hadn't noticed Alex reach for the remote on the nightstand, but when the setting reverted back to constant vibration and cranked up to full power it was hard to miss.\n\n\"Oh, God!\" I exclaimed, caught off guard.\n\nAlex giggled at my reaction and slid up next to Liz, laying on her stomach next to her. The girls shared my cock, sucking and stroking me with reckless abandon as my knees began to tremble. It did not take long after that before my orgasm built up and crashed down over me. My cock pulsed violently, spraying a thick rope over Alex's lips and into her open mouth as my muscles contracted, every part of my body tightening spastically. Liz directed the next spurt towards her own mouth, another powerful jet splashing onto her face and running down her chin. I came so hard my ears popped as Liz shifted me back and forth, covering them both with the biggest load I had ever blown, built up over hours of teasing with the vibrator.\n\nWhen my cock finally ran dry the girls were a cummy mess, giggling happily and staring up at me in wonder. I smiled back, lightheaded and panting heavily. Alex and Liz looked at each other, giggling again at the sight of the other decorated in my huge load, and kissed lovingly, strands of thick semen connecting their lips when they parted. Liz licked the cum from Alex's chin and lips, moaning her delight as she cleaned the mess from her lover's face.\n\n\"Alex, baby, please! Turn it off!\" I was suddenly acutely aware of the vibrator still buzzing away powerfully. Post orgasm, it was too much to bear and I needed it to stop.\n\nDone torturing me for the night, Alex laughed as she mercifully turned the little machine off and shifted over to make room for me between them. I laid down, still catching my breath as my body tingled head to toe with errant bolts of electricity. Liz kissed me joyfully, her face slick with my fluids and tasting heavily of my cum as her tongue danced happily against mine. When she was done, Alex leaned in for more of the same, slipping her tongue into my mouth and kissing me deeply. I sighed and closed my eyes when we parted, leaning my head back exhaustedly.\n\n\"Well?\" Alex asked.\n\n\"Well, what?\" I asked in return.\n\n\"Was that worth the hours of frustration?\" She poked me in the ribs playfully.\n\n\"Oh, Jesus...\" I groaned. \"I mean... I'd do it again... I guess.\"\n\nThe girls giggled, thoroughly entertained with my exhaustion. They cuddled into me, tracing their fingers through my chest hair and around my muscles while my strength slowly returned. Eventually, I pulled the vibrator out of myself and we got up to shower, washing each other clean under the warm water, kissing and hugging adoringly. When we were done, we retired to the couch and I started a small fire. The three of us cuddled together, having one last drink before bed.\n\nTomorrow we would nurse our hangovers, or, more accurately, Alex and I would nurse our hangovers while Liz teased us about being 'old,' clean up around the cabin and pack our stuff to leave. But all that was tomorrow's problem. Tonight, we would finish our drinks and crawl into bed, me in the middle with my beautiful girls snuggled up to my chest, and fall asleep in a warm embrace.\n\n \n"
    ],
    "authorname": "loveinbriefs",
    "tags": [
        "blow job",
        "cum",
        "lesbian",
        "bareback",
        "threesome",
        "transexual",
        "redhead",
        "rimming",
        "deepthroat",
        "feet"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/is-she-smiling-at-me-pt-03-ch-03"
}
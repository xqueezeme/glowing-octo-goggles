{
    "title": "Roll To Romance Pt. 02",
    "pages": [
        "Eric massaged the back of his neck and looked down. \"So I was thinking you could come with me\" he asked.\n\n\"To the gym? Are you really still mad about what happened at the party?\" Audrey asked.\n\n\"Mad? No. But it kind of was a wake up call. I've never been sporty in my life, but I really let myself go recently.\"\n\nShe thought about it for a second. \"Well, why not?\"\n\nSoon, they got to the gym. The place was not too big, and fortunately not that crowded either. Eric was quite happy with it. He looked at his side, where Audrey stood: She was wearing a simple tank top and gym shorts, that left her beautiful long legs bare. He could not help but stare at her, from head to toe.\n\n\"Well, just typical. I get into a gym and some creep immediately starts ogling me.\" She said, feigning indignation.\n\n\"Me? Oh I would not dare, lady! I was just staring at that stain there.\" He pointed at a random sport on her shorts.\n\n\"What? Where?\" She said, worried. Then \"Oh you... Well, you won the battle, but not the war.\" She said, wiggling her finger at him.\n\nThey began working out soon after. With both being rather inexperienced, it took them a while to get into a good rhythm. After an hour and a half of training, Eric was starting to feel quite exhausted. He left his machine and got some water from the vending machine. Getting back to it, his eyes happened to fall on Audrey, busy with a pec deck machine. The lanky futa was focused on the exercise, her pale skin glistening with sweat, her breath heavy and controlled. Her pumped muscles were almost visible under her skin, he noticed, with a hint of envy.\n\n\"Oh look, the creep is back.\" She said, seeing him stare.\n\n\"What can I say? I appreciate beauty when I see it.\"\n\nShe smiled, then stood up. Or better she jumped up. Drops of sweat running down her. She stretched, then she flexed. \"Man, I feel pumped.\" She said, then she got closer to him. Standing just in front of him, towering over Eric. She bent down and gave him a kiss. \"I'm also feeling something else. What do you say if we cut this early and have some fun?\"\n\nLocked in her embrace, feeling the heat coming off her, and overwhelmed by the her smell, all Eric could muster was a weak nod.\n\nAudrey dragged him to the changing room. After checking if it was empty, she let him fall on the bench, and threw herself on top of him. She gave him another kiss, while groping his growing erection. She released his mouth, and then gave him a long, gentle lick along his cheek.\n\nShe kicked off her shorts. Her angry erection flopping free against Eric. Then she quickly slipped his dick into her, and grinded against his poor pelvis, with a sexual fury he rarely, if ever, witnessed from her.\n\nShe kept pumping herself up and down his length, while grinding her dick between them. \"Fuck, I don't know if I can...\" Eric tried to say, but was interrupted by the sound of the door opening. The couple froze in place, then Audrey quickly stood up and recovered her shorts. She looked down, at the stunned figure of her boyfriend, soaked in her saliva, sweat, precum and pussy juice. Her eyes were inflamed with barely contained lust.\n\nWithout giving him much time to recover, she grabbed him and dragged him to the showers, barely dodging the newcomer. There, she quickly got completely undressed, and Eric did the same. They got into one of the showers. Immediately, she pinned him against the wall, her large cock pushing against his stomach, throbbing in excitement. Her breasts threatening to suffocate him, squished as they were against his face. Their heavy breathing was the only sound for a moment, then she opened the shower. Water fell on them, washing away the heavy musk of sex and sweat.\n\nHe felt her hands reaching under his butt. She lifted him up, putting his legs over her hips, then she got his still hard as rock dick into her, and began pumping herself against him again, hungrily gyrating her hips, grinding her dick against his flesh. She picked up her pace, holding her moans back. \n\nHe could barely move, immobilized as he was against the wall, his arms thrown around her shoulders. He could feel pressure building up in him, and the ever increasing flow of pre-cum sloshing down her tip, all over his belly. Soft moans escaped his throat, which spurted his girlfriend to increase her pace further.\n\nThen it happened. Her orgasm came, hitting her like a truck. Her muscles contracted, pushing him against the wall even harder. Her vagina pulsed, milking his poor dick over and over. Her own cock angrily spewed cum in thick, generous ropes, determined to coat his face completely in gooey white.\n\nHis own orgasm came immediately after. His throbbing dick delivering his load straight into her, dripping down her legs, mixing with her own, much more abundant, semen.\n\nTheir heavy breathing slowly calmed down. She finally let him go. His legs felt weak, barely able to support his own weight. \"I think I like this gym thing. We should get here more often.\" She said.\n\n\"Could not agree more\" Eric said, still recovering from the awesome experience. \"Now I think I really need a shower.\"\n\n_____________\n\nAudrey got home, feeling a strange mix of energetic and exhausted. Behind her, Eric entered as well. \"Want something?\" She asked?\n\n\"A coffee would be nice.\" he answered.\n\nAfter it was ready, they sat down on her couch. \"So,\" Audrey said, with an evil smile, \"I didn't know you liked fucking in public places.\"\n\nEric almost choked. \"Now, wait a minute! I distinctly remember a certain someone practically throwing themselves on me.\"\n\nThey looked at each other. Then laughed. \"God, that was so fucked up. And so fucking hot.\" Audrey said at the end.\n\n\"Fortunately, the guy that entered was not too curious. We could have gotten into trouble.\"\n\n\"Well, that's the fun of it, no?\" She said.\n\nA few minutes after they got on her bed and laid down. \"Want to see a movie?\" She asked.\n\n\"Why not?\"\n\nHe put something on her laptop, then they both laid down again, quietly watching, with Audrey as the big spoon, holding the relatively smaller body of his boyfriend tight between her arms, almost like an oversized teddy bear. She felt so comfortable, just laying like that, feeling his warmth against her skin. She almost even forgot they were supposed to be watching a movie.\n\nEventually, it was over. Eric tried to move, but she tightened her grip on him. \"Uh, Audrey, it's over.\"\n\nShe moaned. \"Mmm, cuddle.\"\n\nHe giggled. \"We did, for an hour and a half.\"\n\nHe tried to escape her arms again, but she did not let go. \"No! Cuddle!\"\n\nEric, defeated, surrendered. \"Fine.\" He smiled, then settled down again.\n\nThey remained there for a while still, in content silence.\n\nAudrey was loving it. She was never that intimate with anyone before. None of her old lovers ever did something like that. She sighed. None of her old lovers would ever fuck like rabbits in a public gym like they did either. Their fun in the shower was still very vivid in her mind, the images, the smell, the sensations. She was not sure how or why she rode him like that, she felt like she had to fuck him right there and then. She had rarely felt such overwhelming emotions.\n\n\"You really are insatiable.\" Eric said suddenly. Then he pushed himself against her, grinding his butt. She looked down, and realized her cock was hard as rock, and pressed against his boyfriend's back, right between his ass cheeks. \"Hey, you knew what you were getting into with a futanari\" she answered, giggling.\n\n\"Oh, I don't mind\" he said, as he kept grinding.\n\nSoon enough, Audrey found herself slowly thrusting against her boyfriend's back, stimulating her hard 10 inch dick, feeling Eric's smaller body against hers.\n\nShe slowly grinded her way to orgasm for what felt like hours, very slowly picking up the pace. Then she finally hit her climax, sparks ignited from the bottom of her groin, spreading throughout her body like an overwhelming tide of pleasure. Pressure built up in her shaft, until thick, white liquid was unleashed fro her cock head, filling the inside of her shirt with her hot semen. A second spurt added another coat of white. And then another. And anther one still. Audrey kept thrusting forward, a bit more forcefully than before, milking every bit of pleasure she could out of her orgasm.\n\nBy the end of it, her shirt was completely soaked, a small pool of gooey cum collected at the bottom of it, wetting her side and the bed. \n\n\"Ahhh. Thanks.\"\n\n\"Nah. It's always fun to make that big thing of yours explode.\"\n\nShe giggled. \"Uh, that's good to know.\" She then renewed her imprisonment, hugging him tight again. \"Now cuddle.\"\n\n\"But you're all wet!\"\n\n\"Shhh, cuddle.\"\n\n_____________ _____________ _____________\n\nIt has been two months since Eric started dating Audrey, and he could confidently say they had been the best months of his life. His girlfriend was almost always horny, he got more sex than he could handle; but it was not just that: As clich\u00e9 as it sounds, he got a friend, a companion, someone he could just be comfortable with, someone he trusted with everything and more.\n\nReally, he could not get enough of her. And even better, she apparently could not get enough of him.\n\nHe decided for something a bit special for their second month together. He organized the evening carefully, even asking for help to Susan, her girlfriend's best friend. He got himself as well groomed as he could. He even bought a new dress for the occasion.\n\nHe also did some other preparations, that required him to get some special toys from the local sex shop. It was one of the most embarrassing purchases of his life, but it was for a good cause. He had to train his holes.\n\nThe evening came, and he went to pick up his girl. She came down the stairs, absolutely breathtaking. She got more confident in heels, and was now rocking a 5 inch pair, making her nearly 7 feet tall. He could barely reach her shoulders. He was pretty sure she would cause someone to break their neck that evening, she was just too stunning.\n\n\"Cat got your tongue,\" said Audrey, getting into the car, barely managing to fit in.\n\n\"No, someone else did.\" Eric said.\n\nShe smiled and rolled her eyes. Then she gave him a quick kiss. \"So, where are we going, sweetie?\"\n\n\"You'll see.\"\n\nHe first brought her to see Heart of Drakeholm, a new movie based on Vaults and Wyverns. He was not a big cinema fan, but Audrey was, so he thought it would be a nice way to jumpstart the evening. And so it was: The movie was actually pretty great, both of them enjoyed themselves greatly. Afterwards, he brought her to a very nice French restaurant, where they had a wonderful time. Someone even got a bit too enamored with the wine they had them served. The evening eventually ended, and they got home.\n\n\"Oh, you are spoiling me.\" She said, laughing, while she crumbled on her couch. He rolled his eyes, smiling, then closed the door of her apartment. Then he tried sitting next to her, but she grabbed him before he could, and made him sit in her lap. She kissed him. \"I really like you. Oh God I think I drank too much.\"\n\n\"I know, big girl, I like you too.\"\n\nShe giggled again. Her cheeks red. Her eyes full of energy. \"Remember what you did our first date?\"\n\n\"Yes I do.\"\n\n\"Oh God, it was so hot.\" She said, licking his neck sensually. \"You made me feel so special that night.\"\n\nHe smiled, then turned around and whispered: \"Let me make you feel special again.\"\n\nHe could feel her trembling in trepidation under him. He slipped from her grasp unopposed, then he knelt down and rolled up her skirt, revealing her beautiful, flaccid cock.\n\nSlipping under the large tool, he reached her vagina and gave it a long lick. \"Ahhh\" Audrey moaned, laying down her neck, enjoying the sensations her boyfriend were giving her.\n\nHer pussy was already getting excited, it did not take long for her to be dripping wet. Eric kept lapping her folds for a while, then he slipped back out and took her nuts in his mouth instead, gently sucking them in. They were big enough that he had to alternate between them. Soon enough her scrotum was completely covered in his saliva. \n\nAudrey's legs were quivering around him. She brought one of her hands on his head and started stroking his hair, whispering \"Good boy, good boy.\" on repeat. He loved when she did that.\n\nHe looked up, at the towering form of her cock. The shaft felt wonderfully heavy and hot in his hands. He finally let go of her ballsack and moved on to her dick, running his tongue up and down, savoring it. He slipped two of his fingers into her vagina, pumping them up and down. He could feel Audrey's arousal radiating from her, heating up his skin, filling his nose with the smell of her pre-cum and her pussy juices.\n\nHe finally took her mighty cock into his mouth. Her taste immediately flooded him. He loved it. Her thickness filled him completely, making it hard to breathe, and she was not even halfway in.\n\nHe took a deep breath and, as he trained himself to do, relaxed his throat. Then he took her cock in. More and more of her delicious inches reached into him, until all ten did. His nose pressed against her crotch. The pressure against his throat was almost too much. He could feel his muscles working double time to remove the intruder, giving her enormous tool an incredible full body massage. \n\nAlmost immediately, he could hear Audrey's breath deepening. Her movements becoming heavier. He slowed down slightly, wanting to give her the best orgasm he could. Slowly but surely, he began pumping her dick in and out of him. Her pussy was practically devouring his hand. He began fingering her with three and then four fingers, while his other hand was busy rubbing her huge testicles.\n\nAudrey's hips were moving on their own at that point. She was so aroused that her words became garbled sounds, and her stroking his head went from light and gentle to quick and almost forceful. Her muscles twitched in intense suspense, while her moans filled the room and his ears. He quickened his pace, until she reached the point of no return.\n\nShe climaxed with a mighty roar, trembling in pleasure, drowning in the sensation. Her muscles contracted, her legs locked him in place. Then the flood came. Her cock erupted in his throat, filling his stomach with just the first spurt. He could practically feel it inflating under the tremendous barrage of semen. When he could no longer hold his breath, he let her cock escape his throat, but the flood did not stop, his mouth was instantly full. His face was the next victim, as it got completely coated with the gooey substance. Meanwhile, her pussy was hungrily pulsing and contracting around his fingers, sucking them in time and time again in a velvety embrace.\n\nFinally, her orgasm died down. \"F-Fuck, Eric. That was...\" She said, trying to stand up, but her muscles refused to obey. Eric removed the excess cum from his eyes and smiled, while her seed kept dripping off him. \"No, no, big girl. You're not going anywhere until these puppies are completely empty.\" He said, grabbing her big testicles.\n\n_____________\n\nAudrey woke up the morning after in her bed, with her arms around the naked form of his boyfriend. She stood up and stretched her long limbs. She was naked as well, her skin covered in the dried remains of her, and probably his, sexual fluids. She took a deep breath and decided to have a shower.\n\nThe water felt wonderful on her skin, washing away the remains of their marathon. She sighed. Then she felt a noise: The door of the bathroom had been opened. She peeked outside of the shower, and saw her boyfriend trying to sneak in. As soon as their eyes crossed, he retreated outside.\n\nAudrey smiled. \"Where do you think you're going? Come back here!\" She said. He obeyed. \"Good, do you think you can just peep at me like that? Bad boys like you should be punished.\" She said, then she exited the shower and sensually walked to him. Taking his hands, she dragged him into the bathroom, to the shower. Its narrow confines allowed them little room to maneuver around, but neither seemed to mind.\n\n\"Well, since you're here, why don't you help me get clean?\" She said. Eric eagerly nodded and reached with his hand to grab the sponge, but Audrey stopped him. \"Ah-nah. You need to be punished remember? You'll clean me with your tongue.\"\n\nEric laughed, rolling his eyes. Then he grabbed her hand and kissed it. He then took her fingers into his mouth, one by one. He gave a quick lick to her palm and then continued with her arm. As he reached her shoulder, he gave a lick to her armpit. He did the same for her other arm. Then he began licking her breasts. Her perky C-cup mounds felt wonderful. He then gave his attention to her nipples, carefully licking and sucking on them, eliciting an excited moan from her. He went down, dragging her tongue along her flat stomach. He skipped her crotch and knelt down, then dragged his tongue up her infinitely long legs, enjoying the view of her girlfriend standing tall above him, with her eyes almost closed, basking in the sensation.\n\n\"Ahh, that felt wonderful.\" She said, patting his head. \"That's a good boy. Now for your punishment.\"\n\n\"Oh, I thought this was my punishment.\" He said, pretending to be worried.\n\n\"Really? Was it a punishment?\" She giggled. She bent down and kissed him. \"Stop being so fucking cute, you.\"\n\nHe smiled happily. \"I don't know what you are talking about.\"\n\nShe shook her head and dragged him out. She placed him in front of the bed, then she lifted her foot and gently pressed it against his chest, forcing him down against the mattress.\n\n\"Now, now, what should I do with you?\" She said, caressing her erection. She then lifted her foot slightly, and let it hover over his head. \"You missed a spot\" she said.\n\nEric reached her sole with his lips and kissed it, then she ran his tongue along her foot and reached her long toes, placing each in his mouth, one after the other.\n\nAudrey felt ecstatic. She never thought of herself as a dominant person, but it felt so good! So right! And those adoring puppy eyes Eric had! Oh, they were driving her wild. She could feel her cock twitching every time he took another toe in his mouth.\n\nShe took her foot away and dragged it down his chest, coating it with his own saliva. She reached his dick and gently massaged it with her sole. Eric moaned, Audrey bit her lips. Her arousal was getting out of control.\n\n\"Eric, I want you. Now. I want...\" She said, her words trailing off.\n\nHe looked at her, then he nodded, offering an encouraging but slightly worried smile.\n\nA jolt of electricity traveled through her body. She took her foot off him and opened her drawer, where she took a bottle of lube out. She spread it generously onto her hungry cock, then she got closer to Eric.\n\n\"You sure?\" She said. He gave another quick nod. She smiled. \"I'll be gentle.\"\n\nShe lowered herself on top of the smaller body of his boyfriend. Her cock completely covered his own, reaching past his belly button. It twitched in excitement.\n\nShe then knelt down and placed his legs on top of her shoulders. She gave a quick lick to his asshole, then another, relaxing his muscles. When she felt he was ready, she aligned herself and pushed.\n\nHis hole refused to let her large tip in. It took her some convincing to get through it. As her cock head finally entered, she could feel his muscles twitch; his breathing momentarily increasing.\n\n\"Shh... It's fine.\" She said, caressing his cheeks. \"It's not going to hurt for long. Just relax.\" \n\nAnd so he did. Excited, Audrey went forward, and pushed more of his dick into him. His ass slowly accepted her, inch after inch, until she finally bottomed out. A soft, low moan arose from Eric, which made her tremble in arousal and anticipation.\n\nAnd then she began thrusting, in and out. \"Fu-Fuck. You feel so good.\" She said, lost in the pleasure his insides were giving her. He did not answer, he was lost in his own world, he even involuntarily started thrusting his hips on his own. His blissful expression inflamed her lust ever more, but she controlled herself and increased her pace slowly, wanting to make their first time pleasant for them both.",
        "Eventually, her thrusting became more energetic. She could see the outline of her member rising from his abdomen every time she hilted herself in him. His smaller body rocked back and forth, overwhelmed by her powerful thrusts. Her larger body towering over him, making their size difference ever more apparent.\n\nYet, for the first time in her life, she felt good about her height. No, she felt wonderful about it. She loved how much bigger she was than him, how natural her domination and his submission felt because of it. Seeing how her thrusts was making him rock and sway was driving her wild.\n\nSoon, he could not take it anymore. He closed his eyes and grabbed the sheets. Arching his back, he came. His dick throbbed and twitched, then cum spewed forth, landing on his chest in white ropes. His muscles contracted around her tool deep into him. The mounting pressure within her exploded in a blissful wave of pleasure, that radiated from her groin and conquered her whole being, making her lose cognition for a brief moment. Her dick pulsed and angrily pumped cum into Eric. Once, twice, three times, and still more; her load coated his insides, causing a slight bulge to appear in his belly. Then, when his body could not accommodate more, it spilled out, sloshing down his ass and onto her and the pavement in thick waves of white goo.\n\nIt took a solid minute for her orgasm to end. She never came that much in her life, she felt spent, exhausted, dehydrated. It was the best feeling in the world.\n\n\"Jesus Christ.\" Eric said, recovering from his own overwhelming climax. \"I don't feel my fucking legs anymore.\"\n\nAudrey giggled. Feeling her large cock soften, she got herself out of her boyfriend and laid herself down on the bed, to his side. Then she rolled closer and kissed him, feeling his still trembling flesh under her.\n\n\"You in for another round?\" She asked."
    ],
    "authorname": "Hexall",
    "tags": [
        "anal",
        "futanari",
        "futanari on male",
        "male on futanari",
        "oral",
        "anal sex",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/roll-to-romance-pt-02"
}
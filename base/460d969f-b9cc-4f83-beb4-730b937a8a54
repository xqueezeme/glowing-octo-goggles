{
    "title": "Mind Games Ch. 02",
    "pages": [
        "Once I got out of the steam rooms \u2013 the dark, red corridors and the humid heat nothing that I was about to miss - I found that Engineering was constructed remarkably similarly to Cryonics. I was aware of curving corridors to either side of the main corridor that led into the center. That meant, if my mental map of the station was right, it was another ring based around a central + shaped crossing. But unlike Cryonics, Engineering was big. The main corridor I was on was easily twice as wide as the main corridor in Cryonics, and it led into other rooms, each one labeled with stenciled lettering. It seemed I was going through part storage right now. \n\n\"So, Lucas,\" I whispered. \"Can you hear me?\" I asked, after he didn't respond. \"Lucas?\" \n\n\"Sorry,\" he said. \"Trying to crack into the data files on the corps- er, uh, the cryo-stored persons.\" He chuckled nervously. I pursed my lips. \n\n\"Any luck?\" \n\n\"Well, CyroCrypt 0451 was listed for one Beatrice Montenegro,\" Lucas said. \"A trillionaire heiress waiting for her shot at the family fortune. The listing here says you were to be on ice until your older brother kakked it. If you are Beatrice.\" \n\nI frowned. \n\nIt seemed like a somewhat trivial reason to put oneself into cryogenic storage and slumber away the decades. Letting the world tick by underneath you, allowing everyone you knew to get older and older. I tried to remember the kind of life someone named Beatrice Montenegro would live. I tried to picture it \u2013 and faint images seemed to haze around my mind. A sunny beach. A large, beautiful ship that cut through the waves of an emerald-blue ocean like a knife. A beautiful woman walking towards me, wearing a string bikini and suntan lotion. Her breasts bounced and swayed and I found my mouth growing moist at the thought. But the image blurred before she undid the top and lowered herself on me. \n\nBut... \n\nI couldn't think of a name. Hell, I couldn't even think of a planet. Was that Earth? \n\n\"How many planets do people live on?\" I asked, quietly. \n\n\"Excuse me, lassie?\" Lucas asked. \n\nI paused at another junction \u2013 making a note. So, another difference between Engineering and Cryonics: There were two \"rings\" that circled between the main corridors. I looked down the left corridor and saw the doors were more widely spaced, and they weren't just slapped up with the same storage room labels as I had seen elsewhere. I frowned. This was actually where people got work done, if the first label I saw was true: WepTec Lab 39. \n\n\"I don't remember anything,\" I said, shaking my head. \"But, no. I remember fragments. Pieces. How many planets do people live on? Am I remember Earth or...or...\" A name floated to my mind. \"Mars?\" \n\n\"Three,\" Lucas said. \"Four, if ya count Luna, and the Loonies sure want us too.\" \n\nI nodded. \"Mars. Earth. Luna. Venus.\" \n\n\"Dusties, Shorties, Loonies and Gas Bags,\" Lucas said, dryly. \n\nI snorted, quietly. \"So, Mars doesn't have beaches?\" \n\nLucas' snort spoke volumes. So that memory had to be on Earth. Or a remarkably large resort on Luna \u2013 but this was all pointless. Virgil Station was the only place I should be worrying about, and the only thing I should be thinking about in Virgil Station was the damn station-keeping jets. But my mind kept skittering back to the image of that boat, to the idea of Beatrice Montenegro. Was that me? What was a trillion dollars even worth now a days? My finger went to the collar of my throat and... \n\n\"Wait,\" I whispered. Thinking of money made me think of things. Thinking of things made me want to compulsively check my gear. I pulled my shotgun out of my backpack, cocked back the pump. Still a red glow. I pulled my pistol and checked the ammo. Still seven bullets. My brow furrowed. \n\n\"Lucas,\" I said. \"How many times did I shoot that Tesc in the steam rooms?\" \n\n\"Pretty...\" \n\nThe voice echoed from the corridor behind me. \n\n\"Not enough,\" Lucas hissed. \"We have an hour to get that station-keeping jet on. Get your bloody arse moving.\" \n\nI nodded. \"Which store room was it again?\" I asked. \n\n\"08.\" \n\nI started to jog down the corridor. \n\n### \n\nStoreroom 08 \u2013 placed neatly between two MatTec Labs (whatever that meant, I had no idea) - didn't open. I tried the keypad, but my fingers couldn't get to pry it open. I pulled out my wrench - but hesitated. \n\n\"Lucas,\" I said. \"If I smash the keypad open, then we get more of those fucking drones, don't we?\" \n\n\"Yup,\" he said. \"Listen, I'm checking who had authorization to that door. Dr. Thanton does - and he worked in MatTec. Not in these labs, but in lab 98. That's on the other side of the ring from where you're standing.\" \n\nI did some quick mental math. The clock was still ticking. But dying would mean I'd never get the fucking station-keeping jets online again. And so, I stepped back from the keypad and started jogging again. My nano-clad feet padded softly on the floor and I started to breathe lightly - not needing to gasp or pant. It seemed that Beatrice was in good shape, at least. I smirked at that thought. Running past lab after lab, I counted the numbers as I rushed by, ticking up until I reached the 90s. Then I slowed, my feet thumping on the ground as I stepped slower and slower, finally coming to MatTec 98. The door was shut, but when I tried it, it hissed open with a loud clunk. I leaned around the corner and peeked within. \n\nThe inside of MatTech 98 looked as if the people within had simply left during a busy work day. There were several machines clearly designed to hold and test chunks of metal - I could tell, because several chunks of metal were suspended in metallic claws that themselves were surrounded by pale blue panes of glass that looked designed to contain and withstand a lot of energy. The chunks of metal all looked similar - gray and flat. But as I walked into the room and my view shifted, strange, rainbow like patterns started to appear and vanish as my perspective slipped around. I bobbed my head left and right, then up and down. The patterns never repeated - the melange of red, blue, purple, yellow and other hues was endlessly different. It was nearly hypnotic. \n\nI tore my eyes from the metal panes and looked at the rest of the lab. There were several desks that were studded with control consoles. There were lots of toggles and touch pads, a curious combination of what felt like cutting edge and ancient technology. I noticed that the toggles were all labeled not by stenciled lettering but rather by pieces of white tape that had been scribbled on by someone's black pen. \n\nR. Modulator 98. \n\nL. Field. \n\nInduction. \n\n\"What the hell did this lab do?\" I asked, frowning as I stepped past the desk and looked deeper into the room. Here, I saw another one of those corpses. It looked like another woman - her clothes shredded, her body splayed out over a chair, her hips thrust into the air. She had started to turn stiff, but there was no sign of rot. White Tesc seed dripped from her pussy. I walked slowly around and saw that her mouth was wide open, and a tentacle was still thrust into her throat. It was similar to how I had...almost... \n\nI shuddered. \n\n\"Dunno,\" Lucas said, quietly. \n\n\"You don't know?\" I asked. \n\n\"Listen, lady,\" Lucas said as I knelt down, checking the tattered remains of the woman's clothes. I found a keycard in a scrap of a pocket. I tugged it out and saw the woman's face on it. It wasn't just a keycard, it was an ID card. I looked at her face, then at the twisted mask of pleasure that it had become in death. I shuddered and stood as Lucas continued to speak. \"My only job on this bloody station was to keep the chicken soup dispensers operating properly. I don't know a single thing about any of the research other than bloody rumors.\" \n\n\"Like what?\" I asked, stepping towards the door. I heard a faint sloughing noise behind me - something slick and faintly erotic, like a member sliding from a well fucked pussy. I spun around and saw that the dead woman had gone limp - slumping onto her chair with a boneless finality. The back of the chair had pushed her gaping mouth shut. Her throat no longer bulged. \n\nI pulled my shotgun from the backpack I wore and cocked it once. I put it to my shoulder. There was only one place where...the...thing could have hidden: Behind the desk the woman had been splayed at. I stepped forward, giving the desk a wide berth. I heard a faint rattling noise. My belly filled with ice and my heart thudded in my ears. My whole body seemed attuned to the world around me. Then Lucas spoke and caused me to jerk with surprise. \n\n\"Well, like the fact that I hear they were dragging Tesc into-\" \n\nThe tentacle dropped onto my head from the ceiling. It carried itself down on a filament of wire spooling from the tongue-like tip (or maybe it was the fucker's ass) while the rest of the mass wrapped around my neck and squeezed. I grabbed it and gritted my teeth as it started to strangle me. I couldn't get the shotgun against it without risking blowing my own head off. I surged backwards, falling against the main control console. My palm slapped down and several toggles flipped. The metal in the testing chambers started to rotate as searing white light shot from the wall - lasers or something. I hefted the shotgun one handed and shot out one of the chunks of glass. The spread of shotgun pellets blew out the glass with a spray and a crackling sound - and then the metal gave way and the laser beam seared across the room. \n\nMy vision was starting to turn black around the edges. The tentacle squeezed tighter and then yanked against me and I saw that the filament in the ceiling was spooling back into its fucking ass. I swung myself forward and brought the tentacle against the laser. The air filled with the hideous smell of burning plastic mixed with the acrid scent of crisped flesh and scorched hair. I yanked myself the other way and fell on my back as the tentacle hit the ground in two halves. I panted. \n\n\"Ow,\" I rasped. \n\n\"You okay, lassie?\" Lucas asked, sounding concerned. \n\n\"No,\" I whispered. \"I am most definitely not.\" \n\nThe woman's corpse was...writhing. Her hands twitched spasmodically and then closed like claws around the back of the chair. Her eyes opened and they were shot through with milky white cateracts. They bulged slightly and her forehead rippled - and then I saw her lift her rump in the air. It was like she was...presenting. My stomach twisted and despite myself, I found my pussy lips growing moist as the undead woman (for there was no better term for it) spread her thighs, reached down with her free hand, spread her sex... \n\nAnd then, peaking from within her sex, came something pale silver and smooth. \n\nA moan crossed with an unearthly groan came from the undead woman's lips. Her eyes closed and she focused, shuddering. The shape pushed further out, revealing that the bulbous head led to a segmented, bony spine. It slapped onto the ground with a wet sound - like meat. But then arms emerged from the bony head and the long spine, pushing itself up like a humanoid creature. It opened a segmented jaw and swung its eyeless, hideous face around. \n\nThe woman cooed, looking at it, her white eyes filled with a maternal love. \n\nMy stomach twisted. \n\nThe small creature sprang up onto her back. Its clawed hands reached around - cupping and squeezing those gray breasts. Its small fingertips pinched her nipples, causing her to moan as it hissed and pushed its still slick body along her back, smearing her shoulder blades with her own juices. Her pussy started to spread - but that was impossible. Her belly was flat as a board. But as I watched, it started to swell and swell, and swell. By the time the second hideous creature had emerged, the first had swung its tail up and over its head, curling itself into a shape that resembled a tightly coiled 6. The tail tip pressed to the undead girl's mouth, then plunged home and she sucked, her tongue swirling around each bony ridge of the tail-cock. \n\nShe had given birth to it. And now she was sucking it off as earnestly and eagerly as a lover. \n\nAnd the second one crawled onto her, squeezing and caressing her thigh, while a third started to peek from her pussy again. Her belly squirmed with them. There were so many. But they hadn't been there. \n\nThe third landed. \n\nIt was bigger than the others. Rather than merely having a spine with four legs emerging from it, it actually had a torso that grew larger and more defined as it stood on its hind legs and stretched its spindly arms outwards. Those spindly arms became less so as it flexed and twisted. Flesh seemed to come from nowhere, ballooning with its chitinous flesh, pushing the plates outwards, filling teh gaps within with muscle and gray skin. By the time it was done, it was a eyeless humanoid with the body of an athletic killer and a flat, nearly featureless cock that hung between its bony thighs like a weapon. Its tail whipped from side to side as the smaller ones continued to caress and stroke the undead woman. \n\nThe eyeless humanoid looked at me. \n\nAnd its cock was hard. \n\n\"Lassie...\" Lucas whispered, his voice low. \"Lassie, you better do something.\" \n\nMy hands shook as I grabbed my shotgun. That tentacle...holy shit, that Tesc infested woman, Maria Festios, she had wanted to turn me into that. Into a Broodmother. And her Brood was already walking towards me. It had no eyes, no face really save for those dripping, segmented jaws. But somehow, it still managed to exude a palpable aura of dominant masculinity. Its clawed hand reached down, fondling its sleek cock. My hands were frozen, my eyes locked on that member. It was so clear. Just lean back and let it rape me. \n\nIt'd feel... \n\nSo...good. \n\nI clenched my jaw. \"Sorry, buddy,\" I hissed. \"But you gotta take me out to dinner first.\" \n\nThe words were stupid. Pathetic, even. Shouting into the wind, screaming into the void. But the quip - no matter how weak it was - caused my hands to move. I swung the shotgun around and aimed it right at the Brood's chest. I pulled back on the trigger and the buckshot caught it right in its spindly chest. Chiten and gray blood went flying and the Brood fell in two pieces, flecking its mother with its blood. Her face twisted and a combination of horror, sorrow and rage played across her undead features. She howled wordlessly and pointed at me. The smaller Brood - the Broodlings? - scrambled off their mother, ceasing their duty of caressing her breasts and tonguing her ass and every other perverse thing they were doing and started scrambling towards me. \n\nMy hands were more certain now. I cocked and fired, catching one Broodling in the face, the other one skimmed by several of the shotgun pellets. It staggered as its sibling turned into so much paste. I cocked the shotgun again, pushing my feet along the ground, my back pressing against the wall as I desperately tried to gain more distance. The Broodling screeched and leaped at me. I fired again and the gray blood splashed me this time. But now, the Broodmother was on her feet. She moved with jerky, spasming motions, as if she was controlled by a series of rods and wires rather than flesh and bone. She twitched towards me. I grabbed onto the control console and toggled on the laser. \n\nThe Broodmother walked through it. Her torso hit the ground. Her legs kept walking - and under the char, I could see glowing growths more in common with deep sea life forms than anything inside a human being. Her torso kept crawling forward, howling at me. \n\n\"My babies! My babies!\" She screeched. \n\nI stepped backwards, out the door, then slammed my palm down on the lock button. I turned and ran and ran and ran and ran. \n\n### \n\nStorage Room 08's door opened onto my panting, shuddering form. I turned, slammed the lock button down, then saw that the room was filled with crates and other storage units. I dragged the biggest crate I could \u2013 my arms straining, my muscles knotting with the effort - and pushed the crate between me and the door. With that done, I sat down and ducked my head forward. I panted, my shotgun clattering as I dropped it onto the ground beside me. \n\n\"F-Fuck,\" I hissed. \n\nMy babies. \n\nMoans of pleasure at the feeling of a Brood passing out of my cunt. \n\nI shivered. My hand dipped before I could think about it. My fingers pushed against the nanite sheath covering me \u2013 and the nanites were so obliging. It felt as if the suit had wanted me to do this since I put it on. It grew tighter around my nipples, firmer around my breasts, clinging to me as I plunged two fingers into my cunt. I bit down on my lip hard enough to taste blood. It wasn't to keep quiet. I didn't care about quiet. I moaned loudly as my tongue darted out, tasting the blood. I shivered and panted as my thumb rubbed my clit, my fingers crooking inside of myself. The nanites slipped out of the way letting myself touch my own center of pleasure. \n\nIn my mind, the Brood had me pinned down. His hips were rough and metallic, his hands squeezing hard enough to make my hands and fingertips go numb. His breath was moist and tasted of iron and gunpowder as he plunged into me again and again, that cold dick filling me as he raped me. \n\n\"Ah! Yes! Yes! Yes!\" I moaned, loving the way each word made my cut lips ache. I needed that pain as much as I needed the pleasure. \n\nMy eyes screwed up shut. I could have teased this out for hours. But I just let the crashing intensity of my climax hit me like a battering ram - the last image in my mind birthing another Brood, another Brood that would fuck me just as good as his father had. My back arched and I shuddered and puddled. My back pressed to the ground as I laid back, panting heavily. My butt had scooted forward with every finger-thrust, my hips driving forward to meet my own fingers. This had ended up pushing me away from the wall and into the middle of the room. So now, I was there - spent and twitching. \n\nMy fingers forced into my mouth and I licked and slurped and sucked. \"Oh god, oh yes...\" \n\nI let my hand slap onto the ground. \n\n\"What the fuck is wrong with me?\" I whispered. \n\n\"...post adrenaline rush?\" Lucas asked. \n\nI closed my eyes. \"You stopped watching, right?\" \n\n\"I, uh...\" Lucas coughed. \"Listen. Lassie.\" My face burned at his tone. \"We need ta get back on task. There should be space suits and the parts we need in this room. Get searching for a case with a star-burst logo on it.\" \n\nI stood with shaky, quivering knees. Finding the spacesuit was easier than finding the right components, and I was painfully aware of the fact Lucas was watching my every action and thinking of my wanton need earlier. That need itself made my stomach do a slow flip flop. The desire to be held down and raped by a Brood was gone. The very thought made me sick to my stomach. But for...I shook my head. No. It wasn't worth worrying about. Instead, I tried to just focus on getting the suit on. The space suit wasn't actually a full suit. It was a pair of boots, a pair of gloves, a helmet and a sleek backpack. I swung the backpack on, strapped on the boots and the gloves and then slipped the helmet on. The helmet clicked onto my collar and the backpack started to thrum. I breathed in, then out. \n\n\"Will this be enough to keep me safe in space?\" I asked, my hands sliding along the sleekness of the nanites \n\n\"It's a mechanical counter-pressure suit. So, basically, the nanites will cling hard enough to keep you from getting any damage while being exposed to the vacuum.\" I nodded at that, then looked around at the boxes. There were several with sunburst images on the sides. I opened them, finding dozens of parts within. Describing each one to Lucas took a few moments of searching around for a number or component symbol. Again and again, Lucas told me that was the wrong component. Finally, though, I found a cube of metal roughly a foot by a foot in size with the designation of 45M/DEX. ",
        "\"That's it!\" Lucas said. \"Now, we just get to the exterior hull and attach it to the busted up engine and we should have enough time to catch our breath.\" \n\nI nodded slowly, then lowered the cube. \"And we're going along the exterior because vacuum is better than going up against more Tesc?\" \n\n\"That...lass with the...\" \n\n\"A Broodmother,\" I said. \n\n\"Ah, good name,\" he said. \"Well, there's at least thirty of em in the Habitation deck. I've found some working cameras. They have em in...\" he gulped. \"Well, ah. That's. Something you don't see every day.\" \n\nI nodded. \"So, we've got possibly hundreds of Brood and Broodlings?\" \n\n\"Something like,\" Lucas said, sounding faint. \n\n\"And other Tesc too,\" I said, rubbing my helmeted forehead with one hand, shifting the helmet backwards ever so slightly against my collar. I bit my lip. Then I shook my head. \"Come on, I gotta get to the airlock before Maria Festios tries to make me one of them.\" \n\n\"Why call her by her name?\" Lucas asked as I shoved the crate out of the way of the door. I tensed at the door, cocking my head forward, listening. I didn't hear anyone scrabbling at it. But I still hefted my shotgun, keeping it at the ready. \n\n\"I need to remember she's human,\" I murmured. \"So I stay human too.\" \n\nLucas coughed. He didn't sound convinced. \n\nThe door opened on an empty corridor. \n\nI left the storage room and started for the outer edge of the Engineering section. \n\n### \n\n\"Bugger.\" Lucas and I spoke at the same time. Some of his verbal mannerisms were rubbing off on me - though I wasn't about to start calling myself lassie. It felt too much like being a dog. I lifted one booted foot and kicked at the airlock door. It still refused to budge. The airlock was the heaviest looking door I had seen on the station thus far, and had its own power systems rather than being connected to the systems power supplies. The only problem was that the pair of tube-shaped power units to either side of the door were dead. \n\n\"Can't we hook it into the station systems?\" \n\n\"Problem with that is the Tesc have control over some of the computers,\" Lucas said. \"I'm staying out of anything vital, and hoping they don't try and fry my brain with some magic computer virus or some shite like that. But we hook an airlock in, the station vents \u2013 Tesc don't need to breathe, lassie. And ya think that our destabilization problem is bad, just wait until we spray half the station's atmosphere out of a bloody airlock.\" \n\nI nodded. \"So, how do we...do we fix it?\" \n\n\"I don't know if there are any voltaic cells in the storage rooms - we were running short before all Hell broke loose,\" Lucas said, sounding like he was chewing on his lower lip. Then, quietly, he said. \"There's a rumor I heard...\" \n\n\"Yeah?\" I asked, breathing slowly, trying to calm myself. I checked behind myself. No sign of Maria. Or Brood. I looked back at the airlock. \n\n\"I heard that one of the researchers, Dr. Tilly, he was able to recharge voltaic cells just by touching the blighters,\" Lucas said. \"It may be worth a shot. Maybe he has a charging unit that no one told us about.\" \n\nI clenched my jaw. \"How much more do I need to fucking fetch on this fucking station?\" \n\nLucas chuckled, sounding wryly amused. \"Oh, I don't know. Enough to keep us alive, lassie.\" \n\nI nodded. \"How much time do we have left?\" \n\n\"Twenty minutes.\" \n\nI turned and started running again. \n\nDr. Tilly was located in WepTec lab 01, and so I only had to run about thirty seconds before reaching it from the airlock. The door was shut. By this point, I had it up to fucking here with fucking around - and we only had fifteen or so minutes left before the station's drift was un-fucking fixable. And so, I pulled my wrench, smashed open the keycard scanner, then touched the right cables together. I didn't even worry about how I knew to do that. I just did it and I walked into WepTech lab 01. \n\nThe scene inside was stark. \n\nDr. Tilly - his name printed on the ID tag hanging from his collar - hung from the ceiling. A noose made of computer cables and wires bound together by tape and knots hung around his bulging throat. HIs eyes were closed and he swayed slowly from side to side, his feet brushing against the chair that had skidded to the left. It was clear that he had stood on the office chair, then pushed off. I tore my eyes from him and spotted a small PDA sitting on the desktop that dominated the room. The walls were sparsely covered \u2013 in fact, I noticed that huge machines had been torn out of this place at some point, leaving behind scraped metal floors and torn out screws and other examples that people had stripped the place. \n\nI picked up the PDA and tapped it on. There were a few files - but since time was short, I tapped the first one, hoping to find something. Anything that might help me figure out what to do next. \n\nTo my shock, the upper edge of the PDA shone to life and shimmering rays of almost solid light flashed out. They skimmed through the air and sculpted shapes that grew more and more defined, becoming the three dimensional images of Dr. Tilly and two other scientists. They were adjusting and manipulating the now absent machines, leaving me with only vague ideas of what they had once been. There were plenty of dials, but also lots of those sweeping gestures people made while using touch pads. \n\nDr. Tilly laughed, his hologram stepping through his own corpse with a sickening whirr and dazzling spray of pixels. He reformed as he said: \"Ma'am, subject 0098 has given us just what we needed. Do you think the focusing aperture is ready?\" \n\nOne of the other holograms turned to face him. The face was unfamiliar, but the woman seemed preppy, pretty and eager. She adjusted her glasses one handed as she nodded. \n\n\"It should be, Dr. Tilly.\" \n\n\"All right. I think it's fair that I take the first dosage of mass produced Ambrosia,\" Dr. Tilly said, flashing a grin. \n\n\"Are you sure? Corporate-\" The other woman \u2013 a more severe, dark skinned one \u2013 asked. \n\nDr. Tilly waved one hand. \"They've been getting naturally collected Ambrosia for forty years. I doubt they will begrudge a model employee testing their product.\" He chuckled, then picked up something the holographic recording suddenly picked up. Now that he held it, the syringe appeared in his hand. He touched it to his neck, then pushed it home as the other scientists watched - both of them looked utterly appalled at the sudden motion. Even the preppy one, who cried out. \n\n\"Sir! We should have set up safeties, we-\" \n\nDr. Tilly gasped. He staggered backwards, his eyes closing. His mouth opened and he seemed to grow...younger. I hadn't noticed the differences until they faded away - the wrinkles around his eyes, invisible in death, faded in the holographic recording as well. His hair grew outwards and his palms spread as he clutched on a table that had been moved between the recording and now. He seemed to lean on nothing as a nimbus of crackling lightning surrounded him. He laughed, then opened his eyes - and even in the hologram, it was clear they burned with lightning. \n\n\"It's glorious,\" he whispered. \n\nThe recording ended. I saw the title was: Testing Ambrosia-Lightning. \n\nI frowned. \"Did you see that, Lucas?\" \n\n\"I did. The bloody bastards were right,\" he said. \"They were making mass produced Ambrosia. That shite's an urban legend, Lassie. A kind of youth serum combined with fucking superpowers. I never bought the powers, but some of the uber rich, they never got old, ya know?\" \n\nI was already starting to search the desk. I found that there was a silvery box containing a series of racks for syringes. All were gone save for one. It had a pale blue color and a small lightning bolt on it. I picked it up, and hesitated. \n\n\"Do we know if this will work?\" I asked. \n\n\"We have eight minutes, lassie,\" Lucas said. \"And bloody security drones are on their way.\" \n\nI nodded. \n\nI slammed the syringe into my neck. \n\nPleasure. The most intense pleasure I had ever felt, even better than that squirting orgasm I had felt ripping through my body when I had fingered myself. It started not in my cunt or at the tips of my breasts, but rather surged throughout my whole body like a kettle drum being being beaten. I fell to my knees and screamed in pleasure as my palms slapped against the ground. I arched my back and bucked my hips, gasping and ducking my head against the ground. \"Fuck! Fuck!\" I hissed as I felt the need to have someone come and rut me. Take me. Do anything they wanted, just fill me. \n\nThen... \n\nLight poured from my mouth. It didn't go in a straight line - but rather leaped out and then splashed along the ground like a liquid. My eyes widened and I realized that it was actually a crackling stream of lightning. \n\n\"Stop intruder!\" \n\nThe sound of the drone behind me sent me spinning around. I slammed my palm outwards and a lightning bolt smashed into the drone - causing the pleasure to fade and the energy to stop pouring from my mouth. The drone shuddered, sparked, and then fell onto its strange, wheeled side. I panted raggedly. \n\n\"Five minutes, lass!\" \n\nI forced myself to my feet. I started running - but a dizzy spell hit me in the middle of the corridor. I sagged against the wall, then pushed myself away from it. I forced myself to run, my feet pounding along the ground. \n\n\"Keep going lassie...\" Lucas whispered. \"You are running amazing for someone who just had their bloody genetic code re-written.\" \n\nI got to the airlock door. I put my palms to the emptied voltaic power cells. I closed my eyes and let energy surge through me again. This time, I felt like I came dangerously close to passing out, my eyes whiting out as my knees went to rubber. I sagged against the door as the airlock started to cycle with a low groaning noise. So, using energy used...energy. No shit. \n\n\"Pretty pretty pretty...\" \n\nThat hissing voice. I looked back. \n\nMaria was standing at the end of the corridor. She was flanked by two of the Brood. They both hissed, nuzzling against her like eager lovers. One caressed her biomechanical thigh with its spined, dripping tail. Maria grinned. \n\n\"Fetch,\" she whispered. \n\nThe Brood started towards me. The airlock door slammed down, leaving my back pressed against nothing but air. I scrambled backwards and then slapped down on the airlock controls. The doors whirred shut with a loud clunk. They sealed and clicked as the Brood scrabbled at it. I forced myself to my noodly knees as the airlock door cycled. The Brood drew away from the window and Maria's horned, unearthly beautiful face filled the window. She blew me a kiss and I barely resisted the urge to return it as the airlock doors behind me opened and I pushed myself out into the infinite blackness of space. \n\n\"Four minutes,\" Lucas said, his voice crackling in my ear. I tried to turn around - and felt the backpack hiss and click against me. I swung around and saw out of the corner of my eye a tiny jet of gas spraying from my shoulder. So, it wasn't just air, but also movement. Linked to the nanites, it read my desire for movement in the tension of my muscles and the motion of my legs. I saw the huge sweep of the Earth below me. It seemed so far. So beautiful. My brow furrowed as I saw the huge hurricane that was slowly heading towards the east coast of one of the continents. I could see the blood red lightning crackling through it. \n\nThen I shook my head, forcing myself to task. I looked up at the station - and from the outside, I saw that Virgil Station was built like a wedding cake. The bottom - Cryonics - was the smallest ring. Each ring above it was larger by almost a half, meaning that the habitation ring was by far the most massive. That hung above me like a continental shelf. My helmet blipped and a glowing icon appeared on the upper edge of the habitation ring. \n\n\"That's where you need to be lassie. Remember, the time you spend accelerating, that's how long you need to decelerate too!\" Lucas said. \n\nI nodded, gulping to wet my dry throat. I focused, then tried to make a jumping motion. The suit registered the motion and the backpack I wore hissed loudly. I started to shoot upwards. A small distance tracker appeared next to the icon, counting down in a numeral I didn't recognize. The only thing I could hear was the sound of my own breath, the thudding of my own heart. At the halfway point, I swung my legs around and made the same jumping motion I had before. \n\nI started to slow. \n\n\"Two minutes,\" Lucas said. \n\nI slowed. \n\nI stopped. \n\nThe damage to the engine was hard to see at first - until a shifting of the station's position brought a bright pane of sunlight around to shine on the darkness. Then I saw the jagged hole, the blackened metal. Fortunately, most of the energy had been directed outwards, so the station's internals hadn't been too damaged. I reached into my pack, pulling out the foot wide cube that was apparently going to fix this. \n\n\"How the fuck do I fix this engine in a minute thirty?\" \n\n\"Throw the cube at it,\" Lucas said, confidently. \n\n\"You're kidding,\" I whispered. But my arms were already making the motion. The cube tumbled forward, turning around and around. Then, about a foot away from the damage site, it ballooned outwards. Gray goop flew into the hole and the blackened material and swarmed forward. I felt a sudden flare of heat, the gray material turning a bright, cherry red. I lifted up my palm, concealing the image and slewing myself to the side. When I lowered my hand, the metal was cooling and a perfectly functioning station keeping jet was thrusting from the side of the station. My eyes were wide. \n\n\"Holy fuck,\" I said. \n\nThe engine flared to life. The station started to shift slightly. It was a slow, subtle motion. But it was there. \n\n\"Good work lassie!\" Lucas laughed - and I could hear him clapping. \"We'll make a tech out of you yet!\" \n\nI laughed, raggedly. I knew that this was merely the first step. A way to save the Earth, to buy us some time. But even without Virgil Station raining down on it like an asteroid impact, I knew that the Tesc were an immensely dangerous threat to everyone there. To me. To my family. To the woman in my imagination. \n\nI slowly smiled. \"But don't call me lassie anymore, Lucas,\" I said. \n\n\"Oh?\" he asked. \n\nI chuckled. \"Call me Beatrice.\" \n\nTO BE CONTINUED"
    ],
    "authorname": "DragonCobolt",
    "tags": [
        "body horror",
        "pregnancy",
        "undead",
        "infestation",
        "mind control"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/mind-games-ch-02"
}
{
    "title": "A Handyman's Memoir Ch. 33",
    "pages": [
        "I headed south from Crystal River, back towards Tampa and the keys. Not having Marta with me was depressing at first, but I gradually got in touch with my inner solitude and started to enjoy myself again. I kept in touch with Marta and Johnny on the phone, and things were going beautifully for them. I could tell from their voices their relationship was growing deeper, and Marta was giddy with excitement when she told me about her experiences on stage with Johnny. \n\nMy own life at the moment was considerably less exciting, but that was fine. I was re-charging my batteries, enjoying the natural world, and even practicing my guitar, although it was less fun than when Marta gave me lessons.\n\nI got in touch with a cousin in Naples and had a wonderful reunion. He and his wife insisted I stay a few days, and it felt nice to be with family even if I hadn't seen him in many years.\n\nI bypassed Key West \u2014thinking it would make me think too much about Marta and Lisa and Lindsey \u2014 and island hopped my way toward Miami and the east coast. When I was in the Miami area I got a call that made me very happy \u2014 Becka was flying down for spring break with some friends, and would spend a long weekend with me in Fort Lauderdale. I didn't want to miss out on any time with her, so I made a bee-line for a marina I'd heard about and lucked out with an available mooring. It was way off to the side, in a shallow part of the harbor, but I was happy with it because it was somewhat private.\n\nBy the time I got there and replenished my supplies it was time for Becka to arrive. She showed up at the marina in a cab with her two college girlfriends, looking radiant with a new haircut \u2014 her beautiful blonde hair was shorter, quite curly, and sexy as hell. We had already decided on the phone that she would stay with me on the boat, and her friends seemed disappointed at first that she wouldn't be at the hotel with them, but it didn't take long for them to see the depth of our relationship, and they understood.\n\nHanna and Megan were typical college girls. Everyday girl-next-door types who looked like they were ready to party. The streets of Fort Lauderdale anywhere near the water were thick with partying kids, so I was pretty sure they would get what they were after. Becka, on the other hand, had told me she wanted quiet time alone with me, but whatever she wanted to do was fine with me. I was just glad to have her near me again.\n\nHanna and Megan left us and went to their hotel to check in. It was about two miles away, and not far from the beach. Becka and I rowed the dinghy out to the boat with her single bag of luggage. It was the first time Becka had seen Connie, and I had her ship-shape and gleaming for her inspection.\n\n\"Is this your boat?\" Becka asked with a look of amazement on her face as we approached the boarding ladder.\n\n\"Yup, this is Connie. Welcome to my home.\"\n\n\"Oh my God! I saw the pictures on my phone, but in person it's . . . wow!\" she said.\n\nWe climbed aboard and Becka felt right at home even though it was all new to her. After the tour we sat on the back deck and sipped iced tea.\n\n\"I love it Steve. And you seem so relaxed . . . I can tell you're happy,\" she said. \"I've been worried about you all winter. It seemed so crazy . . . giving up the life you were used to and living on a boat, but I think I'm starting to understand better now.\"\n\n\"Just wait'll you've spent a few days on board, then you'll know,\" I said, and we both let the peace and quiet sink in for a few moments.\n\n\"Mom wants me to call,\" she said. \"You want to say hi?\"\n\n\"Absolutely,\" I said.\n\n\"Hi mom,\" she said into her cell phone. \"Yeah, it was good. No problems . . . They went to the hotel . . . Yeah, I'm sitting on it right now. It's the most beautiful thing I've ever seen. It's all wood, and totally different than all the rest of the boats around here . . . Yeah, he looks great. He's tan, and his hair's lighter, from all the sun I guess . . . Okay . . . Yeah, I will . . . hang on a second,\" she said, and she handed me the phone.\n\n\"How's my favorite sexy nurse,\" I said.\n\n\"Hi Steve,\" Lee said. \"It's good to hear your voice again. We miss you.\"\n\n\"I miss you guys too,\" I said. \"How's my little camp holding up since we last talked.\"\n\n\"Fine, no problems.\"\n\n\"The job goin' okay?\" I asked.\n\n\"Still the same,\" she said. \"I've been seeing a guy from radiology. Nothing serious, but we've been having some fun.\"\n\n\"That's great,\" I said. \"You deserve some fun.\"\n\n\"Steve, keep an eye on the three of them, all right? Spring Break's pretty insane these days,\" she said. \n\n\"Yeah, I will,\" I said, smiling at Becka.\n\n\"I'm glad she's with you,\" Lee said.\n\n\"I'm glad she's with me too,\" I said, and Becka smiled sweetly.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nAfter a few texts to Hanna and Megan telling them they were on their own that night, Becka and I settled in for a quiet evening. Of course the first order of business was exploring each others naked bodies on the bed in the forward cabin. I'll never get tired of the feeling of the boat moving gently under me while a woman moves gently on top of me. It's heavenly, and Becka liked it too.\n\n\"It's so cool, being with you like this on a boat,\" she said, sitting up on me, grinding slowly with me deep inside her as the boat rocked slightly from a passing wake. \"It's like . . . magical.\"\n\n\"The magic started when you came aboard,\" I said, lost in the feeling of being with the most sensuous young woman I've known. So lost were we that afternoon became evening, and evening faded to darkness before we got up off the bed and made our way to the galley to whip up some nourishment.\n\n\"How did I survive four months without you?\" Becka said, sitting at the dinette table in her cute underwear, twirling a cold beer bottle between her fingers.\n\n\"After the last few hours I'm not sure how I survived either,\" I said as I put together some grilled ham and cheese sandwiches.\n\nWe sat and ate, gazing into each others eyes and smiling like teenagers in love. I had to keep reminding myself Becka was a teenager just eighteen months ago. \n\n\"Gotta see what my girls are up to,\" she said, picking up her phone and firing off a text.\n\nA minute later one came back:\n\nHANNA GOT SOME ALREADY...\n\nIN THE MEN'S ROOM!! I KNOW U DID 2\n\nI'M CLOSE, WITH CUTE GUY @ BAR!!\n\nWISH U WERE WITH US\n\n\"Well they're off and running,\" Becka said with a laugh, shaking her head a little. \"Gonna be a wild week for them.\"\n\n\"You don't want to miss it all do you?\" I asked.\n\n\"I'm beyond happy right here,\" she said. \"If we don't move from this spot all weekend it'll be heaven.\"\n\nWe sat on the back deck sipping our beers in the humid night air, and Becka caught me up to date on her winter at school, her mom, her sister Emma, and their friends that I knew.\n\n\"Lacy wanted to come with us, but it was a stretch money-wise for her, and she would have wanted to be here with you,\" she said. \"I finally told her I needed to be alone with you. I don't think she gets it yet . . . you and me. I hope I didn't hurt her feelings. I like her a lot, but she's really Emma's friend. You know, it sounds weird, but I feel so much more than one year older than them. I feel like I've grown so much in the last year.\"\n\n\"Maturity happens fast at your age,\" I said. \"They'll catch up before you know it.\"\n\n\"Lacy's mom and my mom have been hanging out a little,\" she said, watching my face to see my reaction.\n\n\"Really? Your mom hasn't mentioned it to me,\" I said.\n\n\"I think she's afraid to. Worried you'll think she's getting too wild or something.\"\n\n\"Gettin' wild's okay . . . Lord knows I do my share,\" I said. \"I wouldn't want her getting involved with the kind of guys Denise hangs with though.\"\n\n\"Guy's like you?\" Becka said with a little smile.\n\n\"Touche,\" I said. \" No, I mean she's been in some abusive relationships, and she hangs with a rough crowd.\"\n\n\"Yeah, I know. Mom's too smart to fall into that crap I hope. She met a guy at work.\"\n\n\"She mentioned that on the phone. Have you met him?\" I asked.\n\n\"No. She said he's nice though. Young like you.\"\n\nSome kayakers paddled by in the darkness, but other than that it was very peaceful in our far corner of the mooring field. All the boats near to us appeared to be local \u2014 they were all buttoned up and unused.\n\n\"How's my little Katie doing,\" I asked.\n\n\"Emma said she got a little wild,\" Becka said. \"I think you \u2014 what's that old saying, opened the floodgates? \u2014 when you, you know . . .\"\n\n\"Popped her cherry?\" I said with a smile.\n\n\"That sounds a little crude, but yeah,\" she said. \"But I guess Emma talked to her about it, and now she's got a boyfriend.\"\n\n\"That's nice. She's a sweet girl,\" I said.\n\n\"I'm sure she's good in the sack with all that you taught her. Sometimes I think about you and . . . I just don't know what to think,\" she said.\n\n\"I don't want to sound too flippant, but you kind of knew what you were gettin' into when you fell for me. I mean your first exposure to me was a wild orgy that you watched.\"\n\n\"I'm well aware of that mister,\" she said with a little smile. \"Is it normal though? Are you normal? Are we normal?\"\n\n\"Probably not,\" I said. \"But normal's overrated. Nobody's getting hurt \u2014 at least not at the ratio that normal people hurt others. And we're all having lots of fun. I'm very comfortable in my skin. I hope you are, at least for now.\"\n\n\"I am,\" she said with a nice smile. \"It is weird though, and you can't tell me that it's not.\" She shook her head in happy bewilderment.\n\n\"Embrace the weird my love. And while you're at it, embrace me,\" I said, extending my arms.\n\nBecka got up and straddled me on the deck box I was sitting on and gave me a man-melting kiss. Before either of us knew it my cock was out of my boxers, her panties were pushed aside, and I was deep inside her again. Lost in the moment, Becka's bra came off and we fucked passionately right there in the open, within full view of a tall waterfront apartment building, with a hundred lit up windows facing us. I hadn't experienced an exhibitionist side of Becka before, and it was a thrill. She sat up and rode me and played with her tits, looking at the windows of all the apartments as she came, a wild sensuous creature that took my breath away.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nThe next morning I talked Becka into joining her friends at the beach. She would have been happy to just stay on the boat the whole weekend, but I wanted her to have the experience of spring break. At least part of it anyway. She convinced me to go with her \u2014 not too difficult when I thought about all the young bikini girls I'd see \u2014 so we got our beach things together and I called a cab.\n\nBecka emerged onto the deck from the forward cabin in a new bikini, and I almost called the whole thing off because I suddenly wanted her all to myself. She looked insanely hot, and the slightly nervous 'do I look all right?' look on her face just made her look sexier. She pulled a little skirt on, and some sandals, and we were on our way.\n\n\"You guy's are headed for the eye of the storm,\" the cab driver said when we told him were to take us.\n\nCell phones make it easy to meet up, and we found Hanna and Megan without to much trouble. The beach was a sea of hormone drenched youth, and the shear volume of bikini clad girls made it hard to focus on any. Didn't matter though, because Becka smoked 'em all. Maybe one in a thousand could hold a candle to her, and the beach boys took notice, at least until they saw me.\n\nHanna and Megan looked good too \u2014 their traveling clothes the day before hadn't done them justice \u2014 cute girls with sparkling eyes, nice smiles, and easy laughs.\n\n\"How come you guys are alone? I thought you hooked up last night,\" Becka said.\n\n\"We're not settling in for the long haul on the first night,\" Hanna said. \"It's a smorgasbord honey.\"\n\nWe staked out a plot of sand, and I quickly realized I was the oldest person around. The girls were talking quietly and giggling, obviously sharing details of their amorous adventures the night before. After their private conversation the four of us made small talk and got to know each other a little before they drifted back into 'girl talk' while I used my keen powers of observation to scope out the local scenery, a few of whom where topless.\n\n\"You gonna run off with one of them?\" Becka asked.\n\nShe caught me sharing glances with a couple of cuties when I thought she was deep in conversation with Hanna and Megan.\n\n\"Are you kidding? With you around?\" I said, running my fingers down her taut belly, raising goosebumps on her legs and arms.\n\n\"So you guys, how was your night?\" I asked Hanna and Megan. \"All I got out of Becka after your text was 'they're off and running.'\"\n\nThe two of them giggled and looked embarrassed. \"That's one way of putting it I guess,\" Megan said.\n\n\"Tell him about it,\" Becka said with a sly smile, challenging her friends.\n\nMegan had a 'should I?' look on her face, and Hanna took the lead.\n\n\"I fucked a guy in the men's room,\" she said.\n\n\"Hanna!\" Megan exclaimed.\n\n\"What? I'm sure it's not shocking to him. He's like 'Mr. Sex,' isn't he?\" Hanna said.\n\n\"Mr. Sex?\" I laughed. \"I've never been called that before. But no, I'm not shocked. Sex isn't something that should be shocking. It's all good.\"\n\n\"Well, I guess there's no secrets around here,\" Megan said, \"I got with a couple guys in their room after.\"\n\n\"Nice!\" I said. \"Was that your first three-way?\"\n\nMegan nodded, with a nice little smile that left no doubt she enjoyed it.\n\n\"This may sound weird, but can I give you guys some fatherly advice?\" I said. \"Have all kinds of wild fun \u2014 I'm all for it \u2014 but pick your partners based on more than just their looks. There's a lot of wacko's out there.\"\n\n\"Good advice Father Steve,\" Hanna said, smiling. \"So, since we're sharing, what about you and Becka. Did you just do it all conventional last night or what?\"\n\n\"Well, since you were kind enough to share, I guess we should too, right Becka?\" I said, glancing at her smiling face. \"Probably the most exciting part was Becka's exhibitionist side making it's first appearance since I've known her. She rode me on deck, with her hands on her beautiful tits, for everyone in that big apartment building to see. She had an orgasm like a sex Goddess. It was beautiful.\"\n\nHanna and Megan looked at their friend with mix of surprise, lust, and envy in their eyes. \"You're full of surprises Becka,\" Megan said.\n\n\"He makes it all feel so natural,\" Becka said. \"It all just happens. It's amazing.\"\n\n\"Show us,\" Hanna said with a sly grin.\n\n\"Show you what?\" Becka asked, with a surprised look on her face.\n\n\"Well, I'm picturing what you did in my mind, but you're both right here, so show us,\" Hanna said.\n\n\"You want me to fuck him right here? With all these people around?\" Becka said.\n\n\"You don't need to fuck him . . . unless you want to . . . just climb on and let us see what it looked like,\" Hanna said, still grinning.\n\nBecka took the challenge, and climbed on to my reclining body. I couldn't help but run my hands up her sides, and she lowered her head and kissed me passionately before rising up and simulating fucking me, grinding her bikini clad pussy on my quickly hardening bathing suit covered cock. As I hardened up, she got into it more, and her eyes closed and her hands went to her tits.\n\n\"Did you have your tits out last night?\" Hanna asked.\n\nBecka looked at her with lust in her eyes, and as she continued grinding on me she reached back and untied her bikini top and took it off over her head, making her new blonde curls bounce. Her milky white tits looked amazing in the bright sun, and she ran her hands over them, squeezing and pushing them up. Her eyes were closed and she was lost in the moment. I could tell from her breathing and her whimpering moans that she was building to an orgasm, and a few moments later she came, her body vibrating and her tits squeezed hard in her hands as she exhaled quietly.\n\nHer body quieted and relaxed, and her eyes opened slowly. She had a look of great contentment on her face, and just a hint of a smile as she looked down at me. As sexy a look as I've ever seen on a woman.\n\n\"Damn Becka!\" Megan said quietly. \"You know everybody was watching that, right?\"\n\nBecka smiled even sexier, if that's possible, still half lost in post-orgasmic bliss.\n\n\"I better not move or Steve'll put on a show of his own,\" Becka said, still feeling my hardness under her.\n\n\"You could make a run to the water and finish him off,\" Hanna said.\n\nBecka's eyes lit up, and she bolted up off of me and ran to the water topless, leaving me with a huge hard-on in my thin bathing suit.\n\n\"Whoa!\" Megan said when she saw it. Her eyes and Hanna's eyes were big as they checked me out. I got up and ran to the water, feeling a little ridiculous as I held my tented bathing suit down with one hand as I ran.\n\nBecka was standing thigh deep in the calm water when I got there, and I was just in time, as two young guys were already moving her way. She was facing away from the beach, her half naked hour-glass shape looking like a Sports Illustrated model in the sparkling sunlight. I walked up behind her, pressed my body against hers, and she moaned when I kissed the side of her neck and her shoulder. My hands went around her and cupped her tits, and the two young guys stood a little ways away, transfixed by the sight of Becka, lost in her sexuality once again.\n\nShe turned around and kissed me. It was a kiss I'll never forget \u2014 a seemingly never ending dance between our hungry mouths \u2014 nibbling, biting, sucking, licking and exploring. It was as sensuous and passionate as anything I've ever experienced.\n\nBecka looked at me with the heat of a blast furnace radiating from her eyes, and she walked me to deeper water. She pulled down my bathing suit, freeing my throbbing cock in the warm water.\n\n\"Take it off,\" she said, and I could see her through the semi-clear water untying her bikini bottoms.\n\nI kicked off my suit, and she took it and clutched it in her hand with hers. She put her arms around my neck and pulled herself up, wrapping her legs around my waist. I held her up with one hand and slipped my cock into her with the other. The look on her face was pure bliss as I slid in. With my hands under her ass I swung her gently in and out from me, fucking my beautiful young Goddess below the surface of the water, surrounded by a mass of humanity.\n\n\"He's fuckin' her man!\" one of the young men nearby said quietly to his friend. \"Dude!\" he said to some other nearby guys, gesturing toward us.\n\nBecka heard them and her mouth curled up in a wicked little grin. She loved being dirty, and I loved her for it. Her eyes burned into mine, and she kissed me again. A hot, soul quenching kiss that fed the fire below the water as I swung her the full length of my cock, a long, deep plunging of her hot insides. The feeling was incredible, and we both rose to the specialness of the occasion, orgasms sweeping through us that seemed to engulf our very being, my head thrown back, looking at the blue sky, while Becka muffled her scream with her mouth against my neck.\n\nI felt like the king of the world walking hand-in-hand back to Hanna and Megan with my beautiful topless girl.\n\n\"God!\" Hanna said. \"I thought you'd just give him a hand job under the water. I didn't mean you should fuck him with everybody watching!\"\n\nBecka just smiled contentedly. \"They got any food around here? I'm starved.\"\n\n\"Two orgasms'll do that to a girl,\" Hanna said. \"What the fuck Beck, you're way wilder than you think I am.\"\n\n\"I'm comfortable in my skin,\" Becka said, winking at me.\n\n\"Fuck!\" Hanna said quietly.\n\n\"How come I'm the only one topless,\" Becka said to her friends.\n\n\"You want us topless in front of your boyfriend?\" Megan asked.\n\n\"I do\" Becka said with a smile.",
        "They both took off their tops and glanced at me with sexy little embarrassed smiles.\n\n\"What do you think Steve?\" Becka asked. \"Not bad huh?\"\n\n\"I'll say,\" I said, and I picked up my damp towel and put it over my crotch to hide my growing boner. The girls giggled.\n\nWe weren't on a topless beach, and when the roving beach patrols came around they made girls cover up, but for the time being we were surrounded by a few other brave girls, soaking the hot sun into their lovely breasts. It was Spring Break after all \u2014 some public debauchery was to be expected.\n\n\"God this feels good,\" Megan said to no one in particular as she lay on her back in the hot sun. \"I've never been naked in public before.\"\n\n\"Half naked Meg,\" Becka said. \"Feel free to go all the way if you want.\"\n\n\"I'd probably get arrested,\" Megan said. \"That wouldn't go over well with my dad.\"\n\nShe tipped her head to the side to see if anybody was noticing them, and you could almost see the head rush hit her as she realized lots of boys were looking our way. She quickly looked up at the blue sky again as her face, neck and chest flushed pink and her nipples hardened.\n\n\"Steve, you wanna lotion us?\" Becka asked a few minutes later.\n\nI looked around and saw a young guy squirting lotion on a topless girl, so I wouldn't be doing anything that wasn't already being done. My hard-on was under control, at least for now, so I grabbed the lotion bottle and started on Becka's legs. When I finished them I straddled her and squirted a stream onto her belly.\n\n\"Why'd you do it there lover? You know I like it in my mouth,\" she said with a wink.\n\n\"Now Becka, what would your mother say if she heard you say something so naughty?\" Megan asked.\n\n\"She'd say 'I like it in my mouth too', right Steve?\" Becka said. \"I guess now's as good a time as any to tell you guys \u2014 Steve has sex with my mom, and my sister and my friends, and a bunch of my mom's friends too.\"\n\n\"What the fuck?\" Hanna said, shocked and mouth agape.\n\n\"You're kinda makin' me sound like a big old slut Becka,\" I said, rubbing the lotion up her sides and onto her tits.\n\n\"You have sex with her mom and her sister?\" Megan asked, not believing what she was hearing.\n\n\"Well, yeah,\" I said, gently massaging Becka's tits as she smiled up at me, knowing I was on the hot seat. \"But it's not really as crazy as it sounds. It all happened sorta naturally, and we're all very open about it, and it works. We're all happy, right Becka?\"\n\n\"Very happy,\" she moaned, enjoying her public tit massage.\n\n\"It sure sounds crazy to me,\" Megan said. \"What do you mean by 'it all happened naturally'?\"\n\n\"Shall I tell them the whole story?\" I asked Becka.\n\n\"Why not. It's fun,\" she said, and she rolled over so I could do her back.\n\n\"About two years ago, I gave up my construction job and started a handyman business,\" I said to the girls as I straddled Becka's thighs and squirted lotion on her back. \"One thing led to another and some of the women I work for became lovers.\"\n\n\"Oh my God it's a porn movie come to life,\" Hanna said with a laugh.\n\n\"Yeah, I guess it sorta is,\" I said. \"They're not just lovers though \u2014 they're all wonderful friends too, and almost all of them are friends with each other now too. It's a fantastic group of women \u2014 really awesome people. So anyway, one thing led to another as they met each other, and some, like, group sex stuff started happening.\"\n\n\"Whoa!\" Megan said, up on her elbows and hanging on every word.\n\n\"Yeah, wild right?\" I said. \"I mean I had never done anything like that before. Never had more than one girlfriend at a time before. So it was a whole new world for me. This is just two years ago \u2014 it still seams crazy and new to me sometimes.\"\n\n\"So how'd you meet Becka?\" Hanna asked, up on her elbows too.\n\n\"I made a mistake,\" I said. \"But in hindsight I'm glad I did, although I would have met her anyway. One of my dearest handyman customers, slash friend, slash lover, who I was actually in love with, gave me an old fishing camp on the river near home. I fixed it up and had a big housewarming party, which turned into an orgy, and Becka and her sister, who live next door, sat in the woods and watched my friends fuck their brains out.\"\n\n\"Becka!\" Megan exclaimed.\n\n\"Now you're makin' me sound like a big old slut,\" Becka laughed.\n\n\"It's nothing I wouldn't have done myself if I was in her shoes,\" I said. \"Probably you girls too right?\"\n\n\"Yeah,\" they both said in unison and giggled.\n\n\"So Becka's mom came home, saw what was going on, caught 'em in the woods watching, and got pretty pissed at me. She and I hadn't met yet, so she thought I was like the Devil himself or something.\"\n\nI slapped Becka on the ass and climbed off of her.\n\n\"Who's next?\" I said, holding up the lotion bottle.\n\n\"Me?\" Megan said a little nervously.\n\n\"Front or back?\" I asked.\n\n\"Front,\" she said, glancing at Becka.\n\nI started on her legs, which were slightly big, but muscular.\n\n\"Are you an athlete?\" I asked\n\n\"Megan's on the cross-country team,\" Becka said.\n\n\"Nice. Your legs are beautiful. You wrap those around a guy, he's not gettin' away. Not that he'd want to,\" I said with a wink. \n\nShe blushed a little, and her nipples hardened. She glanced down at them nervously, and blushed even more. A vicious cycle.\n\n\"So what happened after your orgy party?\" Hanna asked\n\n\"I met with Becka's mom to apologize,\" I said, working my way up to Megan's thighs.\n\n\"He had sex with her, like three hours later,\" Becka said, laughing. \"I swear he's got some magical powers over women.\"\n\n\"She's laughing now, but at the time she and her sister weren't happy with me at all \u2014 a crazy sex maniac gettin' cozy with their mom.\"\n\n\"Yeah, we were kinda freaked out by it before we got to know him,\" Becka said.\n\nI was right up at the top of Megan's legs, massaging lotion into her inner thighs. She spread her legs ever so slightly and was breathing hard.\n\n\"So I get a nice casual 'friends with benefits' relationship going with Becka's mom, who's a sweetheart by the way, and a few weeks later I catch Becka and her sister and two friends of theirs snooping around my place, telling their friends all the details about the orgy. I invite them in for a beer, their horny friend agrees, one thing leads to another and the five of us have sex that night.\"\n\n\"There's an awful lot of 'one thing leads to another' in your life Steve,\" Hanna said.\n\n\"I know! And it all seems to lead to sex for some reason. Don't ask me why,\" I said.\n\n\"It's magical powers I tell ya,\" Becka laughed.\n\nI finished with Megan's legs, straddled her upper thighs, and squirted lotion on her belly.\n\n\"Megan, do you like it in the mouth, or is the belly shot good for you?\" Becka asked, upping the sexual tension a notch just as my hands touched her.\n\nMegan giggled nervously but didn't answer. Her eyes caught mine and we connected for a brief moment, and then they flashed away, landing on my hands as they inched toward her bare tits.\n\n\"So, sex with four girls?\" Hanna said. \"Are you makin' this stuff up?\"\n\n\"I was there Han,\" Becka said. \"It was as real as real can be.\"\n\n\"Okay, so you have sex with all of them, and mom and all the others,\" Hanna said. \"Why don't you pick one and have a real girlfriend.\"\n\n\"That's the million dollar question,\" I said.\n\n\"Because he's got magic hands,\" Megan said, and then she moaned as her soft, oozy tits were swallowed up in my big hands.\n\nSome kind of chemical reaction happens when a man touches unfamiliar tits for the first time \u2014 his cock gets hard, fast. Mine happened to be folded under me, and hardened right against Megan's bikini covered pussy. I couldn't help myself and involuntarily ground against her, causing us both to moan quietly.\n\n\"Get a room you guys,\" Becka said with a little laugh.\n\n\"You better roll over sweetheart,\" I said to Megan.\n\n\"I've heard people say it's hot at the beach before, but this takes the cake,\" Megan said as I got off her and she rolled over. I straddled her thighs again, hoping my erection would go down before I had to get off her to finish her legs. I squirted lotion on her back and continued.\n\n\"So anyway, that's pretty much the story,\" I said. \"I've got lot's of lovers who are all dear friends is what it boils down to. We all have fun, and life's better for all of us because of it all. I guess that's why it continues on the way it does. Becka's special though, in case your wondering. She's not just 'one of the girls.'\"\n\n\"Awe! You're special too my love,\" Becka said as she got up and embraced me from behind. \"Oh, you're burning,\" she said, feeling my back. \"We've gotta lotion you up too, right girls?\"\n\n\"How in the world do you keep all those women satisfied,\" Hanna asked, still a bit bewildered by the story.\n\n\"They do a lot of that themselves,\" I said. \"I mean they're all bi-sexual, and they've all become friends, and have their own parties and stuff, with some other guys.\"\n\n\"Wow,\" Hanna said quietly. \"How about you Beck, are you bi?\"\n\nI wasn't 'till I met Steve, but yeah,\" Becka said. \"Does that shock you?\"\n\n\"No,\" Hanna said. \"I am too, I just never though you were.\"\n\n\"What the fuck you guys!\" Megan said. \"Suddenly I feel like the prude.\"\n\nI got off her and did a quick lotion job on her legs.\n\n\"Nobody with her tits out on a public beach is a prude honey,\" Becka said. \"We'll work on the bi thing later.\"\n\nMegan gave Becka an 'I don't know about that' look, and Becka just smiled.\n\n\"Next,\" I said, patting Megan's bottom and looking at Hanna. \"Front or back sweetheart?\"\n\n\"Front!,\" she said emphatically, with a smile.\n\nI gave her the leg job, admiring their length and sinewy muscles.\n\n\"Another athlete?\" I asked.\n\n\"High jump,\" she said proudly.\n\n\"Cool,\" I said. \"You guys must have lot's of stamina for your lovers.\"\n\n\"Our lovers!\" she said. \"That's a laugh, huh Megan?\"\n\n\"Our school's full of dorks,\" Megan said. \"All the guys are engineering majors. They'd rather design a three-dimensional girl inside their computers that have a real one.\"\n\n\"Hey, I was a dork once,\" I said. \"Give 'em a chance, they might surprise you.\"\n\nI finished Hanna's legs with my hands right up against her hot crotch. The heat pouring out of that girl was amazing, and she moaned more than a little at my touch. I repositioned and straddled her as I had done the others, and the look in her eyes was enough to trigger my hard-on this time.\n\n\"Oh boy! I'm startin' to get the picture,\" she said quietly, her nostrils flaring a little, as she felt me harden against her steaming hot pussy.\n\n\"Belly or mouth?\" I said, and she exhaled hard, her nostrils flaring even more.\n\n\"Mouth,\" she said confidently.\n\n\"Nice!\" I said. \"First we'll lotion you up.\"\n\nI got up on my knees, held the bottle in front of my crotch, groaned a few times and pretended to cum as I squirted it on her belly.\n\n\"Uh oh! He's gettin' into it now. Danger! Danger!\" Becka said with a laugh.\n\nI pushed my hard cock between my legs and lowered back down into pussy grinding position. When I put my hands on Hanna's belly to start the lotion massage her back arched up and goosebumps covered her body. My hands slid quickly up to her small tits and hard nipples to try and maintain her arousal, and with just a few small grinds of my hard cock she was flying.\n\n\"Oh fuck!\" she said quietly under her breath as her body started to quake. Her tits were incredibly sensitive, and the pressure on her pussy must have been just right, because she went easily over the top into a beautiful orgasm, her back arched high and her body trembling. It was quiet but powerful. \"Oh-h-h Fuc-k-k-k!\" she said in a stuttering whisper as it swept through her.\n\n\"Didn't I tell ya about his magical powers?\" Becka said as she watched her friend try to regain her composure.\n\nHanna looked embarrassed to have let herself go like that with people watching.\n\n\"That was beautiful sweetheart,\" I said to her. \"You know, a woman's orgasm is the most beautiful thing the world has to offer. You've given us a beautiful gift.\"\n\nShe quickly put her bikini top on and didn't make eye contact with anyone but Becka.\n\n\"Let me do your back honey, so you don't burn,\" I said.\n\n\"You put those hands on me again I might never give you back to Becka,\" she said with a shy smile, and she stretched out on her stomach to let me go to work.\n\nI straddled her thighs again and massaged her lean, muscular back, and she relaxed back into her old self.\n\n\"Fucked in a men's room, and a wild orgasm on the beach. I'd say it's goin' good so far, huh Hanna?\" Becka said, and they all laughed.\n\n\"If this is what Spring Break's all about, I'll be back,\" Hanna said, and they all laughed again.\n\nI felt a squirt of lotion on my shoulders, and Becka and Megan started to rub it into me as I continued with Hanna's back.\n\n\"On the ground big boy, we need to do your front,\" Becka said as I finished with Hanna.\n\nI flopped down on the blanket, thankful that my hard-on was mostly gone. There was still a plenty big bulge though, flat on my back as I was. I closed my eyes and let them go to work, and soon I felt six hands on me rubbing in the slippery sauce, and their giggling made me smile.\n\n\"What's that smile for mister? I suppose you want a happy ending,\" Becka said, sliding her hand up the leg of my shorts and squeezing my swelling meat.\n\n\"Oh no you don't!\" I said. \"Not here in front of everybody.\"\n\n\"What's the matter?\" Hanna asked. \"I thought orgasms were so beautiful.\"\n\n\"Women's orgasms are beautiful.\" I said. \"Men's just make them look like they're constipated.\" The three of them giggled hysterically.\n\n\"How 'bout a happy ending in the water then mister?\" Becka asked. \n\n\"You really think I might say no?\" I laughed.\n\n\"Come on girls,\" Becka said \n\nThe three of them ran through the assembled throng to the water, Becka and Megan topless. I quickly followed, once again feeling goofy holding down my hard cock as I ran. They were already chest deep when I caught up with them.\n\n\"Suit off mister,\" Becka said, and when I took it off she held it for me again. \"Hanna, you start him off, and Megan, you're the only one who hasn't had a nice orgasm today, so you get the honors.\"\n\n\"What honors?\" Megan asked.\n\n\"When Hanna gets him nice and hard you climb on. He'll do the rest. Trust me, it's awesome.\"\n\n\"You want me to fuck your boyfriend?\" she asked, her eyes huge.\n\n\"Don't you wanna?\" Becka asked.\n\n\"Well, yeah, but . . .\"\n\n\"Don't overthink,\" Becka said, and she kissed Megan.\n\nMegan, having never kissed a girl before, pulled away. Becka touched her tits, which were just below the water, and Megan just looked at her. Becka moved in for another try at a kiss and Megan not only let her, she kissed back. Hard.\n\nHanna, in the meantime, had her hand on my cock. It had lost most of its erection when I entered the water, but her touch, and the laser beam intensity of her eyes locked on mine, had the blood flowing back there in a hurry.\n\n\"Whoa! Another piece of the puzzle understood. You're a big boy,\" she said with a surprised smile when she stroked it at its full size. \"Meg, you're gonna like this,\" she said to her friend.\n\n\"More than I like this?\" Megan said, obviously enjoying what Becka was doing to her pussy below the water. Her first foray into bi-sexuality was making her very happy. \"Oh fuck!\" she said quietly as her head tipped back and she closed her eyes.\n\n\"Why don't you warm him up Hanna,\" Becka said, and she kissed moaning Megan again.\n\nHanna needed no more encouragement. She was nearly as tall as me, and with the buoyancy of the salt water she easily pulled herself up on me with her arms around my neck. The fact that we had never even kissed made it even more intense when I entered her, her big eyes locked on mine. She tried to hold in a scream, but it forced it's way out as I plunged into her, the water lubricating things, allowing a massive penetration all at once which took her breath away.\n\nThe scream attracted attention, and we had an audience again, at a respectful distance, but watching. Boys and girls both, fascinated by the spectacle of Hanna fucking me, and Becka making Megan very happy.\n\nAs I found out on the beach, Hanna had hair-trigger orgasms, a wonderful thing for a woman, and for the man she's with. With my big cock plunging into her she was high as a kite in no time, and lost herself in a beautiful trembling way, whimpering and quietly screaming as she came three times in a row.\n\n\"Stop!\" she said quietly in my ear when she could take no more, barely able to hang on to me. \"Just hold me,\" she said, my cock deep inside her. I held her there, and we kissed for the first time, a sweet, soft kiss that nearly made me lose my balance.\n\n\"Did you leave anything for Meg?\" Becka asked Hanna as she and Megan embraced us.\n\nHanna unlocked her legs from around my waist and I slipped out of her. Megan was primed and hot, and on me just a few seconds later, mimicking Hanna's position.\n\n\"Fuck me Steve,\" she said in a breathy voice close to my ear.\n\nShe kissed me hard as I slipped into her. She was shorter than Hanna, but bigger and more muscular, and her pussy felt more muscular too. It took a few hard thrusts to get fully into her tightness, but it was well worth the effort. The muscles inside her squeezed and contracted on me in a most wonderful way.\n\n\"Oh! God!\" she said as I began a nice rhythmic swing of her lower body. She unhooked her legs from behind me and let the buoyancy of the water and my hands under her ass control the motion.\n\n\"Fuck!\" she yelled, unable to control herself, and one of the boys watching at a distance yelled, \"Yeah baby!\"\n\nShe lost herself in animalistic grunts and groans, and finally came with an eye rolling spastic face that sent me over the top as well. Her pussy felt incredible, and I went off with powerful thrusts and my head thrown back, and a deep guttural grunt rose from my mouth toward the heavens. There was a smattering of whoops and hollers from the onlookers. \"SPRING BREAAAAKKK!!\" one of them yelled.\n\n\"God I love your cock,\" she said in my ear, breathless and limp in my arms. \"I've never felt anything like that before.\"\n\n\"You're a beautiful, sexy woman Meg,\" I said, and she kissed me passionately.\n\nBecka and Hanna were kissing, but stopped when Meg and I were through. I noticed Hanna's bikini top was in Becka's hand along with my suit.\n\n\"I really need something to eat you guys,\" Becka said.\n\nMegan slipped off my softening cock and I put my swim suit back on. The four of us walked back to our blanket, the three girls looking radiant with sparkling water dripping of their topless bodies.\n\n\"If you'd told me a week ago I'd be walking topless through a crowd of people I'd have said you were crazy,\" Megan said, looking quite confident in her near nudity.\n\nThe girls put their tops on to a chorus of boo's from a nearby group of boys, and we walked to a food truck on the street and pigged out on burgers and fries.\n\n\"Sex makes me so fuckin' hungry,\" Becka said. \"I thought I was gonna faint.\"\n\nWalking back to the beach I lagged behind so I could get a good look at the three of them. \"Enjoying the view?\" Hanna asked, smiling back at me over her shoulder, and she mooned me right there on the sidewalk with cars passing by. We spent the rest of the afternoon tanning our flesh in the hot Florida sun, enjoying the craziness of a crowded beach during Spring Break.\n\n\"Can we invite them back to the boat tonight?\" Becka asked. She and I were enjoying some alone time on the blanket while Hanna and Megan played in the ocean. \"I loved getting sexy with them. I'd like to take that even farther before we get back to school.\"\n\n\"Hmm, let's see. One girl sucking my cock or three? Which do I want?\" I said sarcastically.\n\n\"You scumbag!\" she laughed, rolling on top of me and pinning my arms down. \"What am I gonna do with you . . .\"",
        "Her laugh melted into a passionate kiss, and my cock sprang to life between her legs.\n\n\"God I wanna fuck you so bad,\" she said. \"But I better take it easy on you \u2014 you're gonna have a workout tonight. Can we go out to dinner somewhere nice? We all brought clothes.\"\n\n\"Sure sweetie, whatever you want,\" I said.\n\nAfter a little while Hanna and Megan came back soaking wet after their swim.\n\n\"Did you guys hook up or are you single tonight?\" Becka asked them.\n\n\"Single so far,\" Hanna said as she dried her hair with a towel. \"There was a couple guys down there, but they're dumb as a box o' rocks.\"\n\n\"Good,\" Becka said. \"You want to go out to dinner with us and spend the night on the boat?\"\n\n\"You want us to?\" Megan asked, clearly interested.\n\n\"Yeah, we'd love it,\" Becka said. \"If you guys don't mind missing another night out in the trenches.\"\n\n\"Count us in,\" Hanna said, looking like she was already picturing what the night would bring.\n\n\"You guys walked here right?\" Becka asked.\n\n\"Yeah, the hotel's about three blocks from here,\" Hanna said.\n\n\"We're gonna get a cab back to the boat to get cleaned up and dressed,\" I said. \"You want us to drop you off at your hotel and then pick you up at seven?\"\n\n\"Perfect,\" Hanna said. \"Are we dressing?\"\n\n\"Dress to impress sweetheart,\" Becka said, \"and bring an overnight bag for tomorrow.\"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nOur cab rolled up in front of the hotel promptly at seven, and Hanna and Megan walked out looking hotter than anyone should have any right to. The last vestiges of 'girl next door' were obliterated as they strutted down the front sidewalk under the bright yellow hotel canopy. Little cocktail dresses, high heels, makeup and fluffed hair had them turning heads all the way down. Becka jumped out of the cab excitedly to greet them, and they exchanged hugs.\n\n\"All for you?\" the cab driver said when he realized they were who we were picking up.\n\n\"I'm a lucky man,\" I said. He just shook his head.\n\nOf course Becka knocked my socks off with her little dress too. She wouldn't let me watch when she put it on, and said, 'You'll like what's underneath' when she came out to model it for me.\n\nThe manager of the marina had told me about a hip new restaurant, and we ate some of the best seafood and most sinful deserts I've ever tasted. With my wallet four-hundred dollars lighter, we caught a cab back to the boat.\n\nMy little dinghy only holds two people safely, but it was a short, easy row ferrying them all out to the good ship Connie. Megan had a little overnight bag with her \u2014 \"two toothbrushes, two t-shirts, two pairs of shorts, and four flip-flops . . . college girls uniforms,\" she said with a smile. Watching them climb up onto the boat in their tight little dresses was fun, and lot's of wine induced giggling ensued.\n\nBy the time they were all aboard and I got the dinghy and a few other things secured for the night, Becka had shown the girls around.\n\n\"This is the most awesome boat ever,\" Megan said. \"I can't believe you live on it and just travel around. How cool is that.\"\n\n\"It's pretty cool,\" I said.\n\n\"You guys! Come with me!\" a giddy Becka said to her friends.\n\nThey went down into the forward cabin and closed the hatch doors to keep me out. I cracked open a beer I probably didn't need after all the dinner wine, and sat on the back deck enjoying the quiet. All the neighboring boats were still closed up and it was very peaceful. The silence was broken by the sound of the hatch opening and giggling girls approaching. I nearly choked on my beer when I saw them \u2014 a Victoria's Secret catalog come to life. It was one of the sexiest, skimpiest, laciest displays I've ever seen \u2014 Megan in a bright red lace bra and panties, Hanna in an almost totally transparent black teddy, and last but not least, my Becka all in white, wearing a little bustier thing that pushed up her bare tits, a garter belt, stockings, and no panties. Yikes.\n\n\"Holy shit!\" I said as they arrived on the back deck trying to stifle their giggles. \"I guess there was more in that overnight bag than you said. Not a whole lot more though . . . Fuck!\"\n\n\"Yes please,\" Becka giggled. \"You guys too?\"\n\n\"Yes please,\" they said in unison.\n\nMegan and Hanna giggled too. They were obviously feeling much freer with themselves after the afternoon's fun and the good wine at dinner.\n\n\"Shall we get this party started?\" Becka said.\n\nHanna walked in front of Becka and kissed her as Megan and I watched. We were only lit up by the lights of all those Marina facing windows on the big apartment building, but it was enough to see clearly, and I'm sure anyone on those balconies could see us if they cared to.\n\n\"I've wanted to do this ever since I met you,\" Hanna said as she slowly crouched, her tongue leaving a glistening trail down Becka's belly all the way to her bare pussy.\n\n\"Oh shit!\" Becka said quietly as Hanna reached her target and flicked her tongue across Becka's sensitive clit.\n\nMegan looked a little more nervous than she had been a few moments earlier. Her first bi-sexual experience had been in the water at the beach, and I'm sure she knew things would be ramping up big time on the boat that night. I caught her eye and extended my hand. She smiled a lovely smile and came to me. I was sitting on a deck box, leaning against the wheelhouse, still in my dinner clothes. She straddled me and exhaled sharply when she felt the bulge of my mostly hard cock against the thin lace of her panties. Her muscular, athletic body looked fantastic adorned with the lace she was wearing, and the red color almost glowed in the dark. Our mouths joined together in a wonderfully hot kiss as my hands explored her body.\n\n\"Fuck Hanna,\" Becka said, almost whimpering. \"Why didn't you tell me sooner you were so good at this?\"\n\nI could tell from experience Becka was going to cum hard, and a few minutes later she did, staggering back a few steps to the deck railing to support her self as Hanna, never missing a beat, gave her a monster orgasm.\n\n\"Fuck, fuck, fuck, fuck, fuck, FUUUCCCKKK!!\" Becka yelped. Hanna had her hands on Becka's ass, clutching her tight to her face, and she didn't let up.\n\n\"Oh Jesus!\" Becka said quietly, barely able to form words as almost every muscle in her body went spastic.\n\nHanna finally slowed the assault, and Becka regained a little of what was left of her sanity.\n\n\"Shit!\" she said, nearly hyperventilating.\n\n\"I guess we're off and running again,\" Megan said in a breathy voice in my ear.\n\nShe dismounted me, moving like a well-toned cat, and quickly had my pants open.\n\n\"Wow,\" she said quietly, seeing my rock hard cock in her small hand for the first time.\n\nShe glanced at Becka, who was busy kissing Hanna, and then slowly took me into her mouth. She was smiling when she did it, a sexy little curled up at the corners kind of smile, with little dimples. A super cute face, and the smile stayed, even as I filled her mouth full. She looked up at me, and her eyes were smiling too.\n\n\"Oh that's nice baby,\" I said quietly as her warm mouth massaged my throbbing pole.\n\n\"So you had your first three way last night, huh baby?\" I said between moans.\n\n\"Mmm Hmm,\" she moaned wordlessly with her mouth full of cock.\n\n\"Are you ready for a four way with a big cock and two sexy girls?\"\n\n\"Mmm Hmm,\" she moaned louder, looking up at me with a fire starting to burn in her eyes.\n\n\"We're gonna make you cum harder than you ever have in your life. Over . . . and over . . . and over again. Is that what you want baby?\"\n\nShe gave up trying to communicate and just moaned deeply, eyes locked on mine, bobbing up and down on my pole with increasing intensity.\n\n\"Oh Fuck yeah!\" I said, and a few seconds later I shot a hot stream in her mouth, pulsing and throbbing, and then another, and then another, filling her mouth with my hot seed.\n\nWhile I was in the middle of cumming, Becka's hand went into the back of Megan's panties.\n\n\"Over . . . and over . . . and over again,\" she said to Megan. \"Is that what you want Meg?\"\n\nMegan grunted when she felt Becka, and she struggled to finish me off. \n\n\"Fuck!\" she said after almost choking on the mouthful I gave her.\n\nI don't know what Becka was doing down there, but Meg came quickly, and her curled up smile was obliterated by an orgasmic face that looked like the definition of ecstasy. I could tell from Becka's face that she was on a mission . . . a mission to take her less experienced friend to new places, and I was eager to help her. Last night's three-way had just been an appetizer for Megan. Tonight would thoroughly blow her mind.\n\n\"We better go down below before someone calls the cops,\" I said.\n\n\"Awe, I like it out here in the moonlight,\" Becka pouted.\n\n\"Sorry sweetie, there's laws against this kind of thing you know.\"\n\nI zipped up my pants, took Hanna's hand and led her along the side deck to the forward companionway. Becka and Meg followed, hand-in-hand. Down below the light was harsh and white, from low-voltage LED's, so I lit the two oil lamps mounted on gimbals between the round port-lights, and turned off the harsh electric units. The space glowed with soft warmth, and the stage was set for a wonderful night.\n\n\"I hope you girls don't mind it being a little warm in here,\" I said. \"I'm gonna close up the ports and hatches because . . . what's the name of that movie? It might get loud.\"\n\n\"Don't want the neighbors to come over and join us?\" Becka asked.\n\n\"Nope. I'm selfish tonight,\" I said. \"You guys are all mine.\"\n\n\"First Megan's all mine,\" Becka said, and she kissed her sexually blossoming friend. The two of them melted onto the bed.\n\nHanna looked at me. She looked amazing \u2014 tall and lithe, her see-through black teddy bathed in the dim yellow light of the oil lamps, her small perky tits standing at attention with pointy nipples. I unbuttoned my shirt and she came to me and unzipped my pants. I was naked a moment later, standing before her. She ran her hands up my sides and onto my chest.\n\n\"Before today I'd never been fucked by a real man before. Just boys,\" she said in a breathy voice as one of her hands went back down my side and onto my nearly hard cock. \"Oh yeah,\" she whispered near my ear as it became fully erect in her hand. \"A real man.\"\n\nI lowered her to the bed next to her friends. Becka and Megan were in a sixty-nine, with Meg on top, learning for the first time about a female vagina that wasn't her own. From the noises they were both making I could tell Meg was a fast learner.\n\nI unsnapped the crotch of Hanna's teddy, and pressed my hungry mouth to her pussy. Just as at the beach, the heat pouring out of her was astonishing \u2014 like she had a blast furnace inside her at full boil. Something to do with the high metabolism of her thin, athletic body? Whatever it was, it was wild.\n\n\"Fuck me Steve,\" she said. \"I can't wait any more.\"\n\nThe height of the bed, because of the slope of the sides of the hull up in the bow, was perfect for a standing man to fuck a reclining woman. I lifted her legs and pressed my way into her burning fire. She grunted and moaned as I slowly fucked my way in, and when I was balls deep two words burst forth from her sexy mouth.\n\n\"Oh yeah!\"\n\nWe were off and running, and with Becka and Megan slowly closing in on orgasmic bliss I fucked Hanna hard. As I found out at the beach, she was an easy cummer, and she flew into the stratosphere with little effort. After cumming beautifully in Megan's mouth I was able to 'keep on keepin on' as the old song says, and I gave it to her good and then picked her thin body up and deposited her on her knees. She crawled forward so I could get on the bed behind her, and I slipped into her with her looking back at me over her shoulder, her chest heaving and her eyes burning with desire. Once again I pummeled her.\n\n\"Oh Fuck!\" I yelled as she screamed a cry of love, and she came even harder this time, the blast furnace inside her triggering a nuclear meltdown that left her spread-eagle on her stomach, gasping for breath.\n\n\"Come hear baby,\" Becka said.\n\nShe pulled me to her, and took my sticky cock into her mouth as Megan continued her enthusiastic assault on Becka's pussy. After she cleaned off all of Hanna's juices she guided me into Megan's sloppy wet pussy right above Becka's face. Becka was able to lick my balls as I slid in.\n\n\"Oh my God!\" Megan said as she felt me enter.\n\nI pressed easily into her wetness, and Becka wiggled forward so she could get her tongue on Meg's clit as I fucked her. Hanna's wits had come back to her, and she was up on hands and knees, first kissing the high-flying Meg and then playing with her pendulous tits as Becka and I took her into orbit. Meg screamed as the big one hit her, and then went silent, twisting and spasming, her upper body rising up with jerky movements as every fiber of her being was consumed by the orgasmic explosion. Becka's hand massaged my balls at the perfect time, and I came as hard as I ever have, long and hard, making Meg scream out again as she heard my guttural moan.\n\nWe went on like that for hours, deep into the night. After a rest and a midnight snack, Becka rummaged in her luggage and pulled out a strap-on cock-shaped vibrator.\n\n\"What'd you bring that for?\" I laughed.\n\n\"For this,\" she said, gesturing to the girls and me.\n\n\"You knew this was gonna happen?\" I asked.\n\n\"They didn't,\" she said, gesturing to the girls again, \"but yeah, I had a pretty good idea we'd all end up here with you.\"\n\n\"They probably saw that thing at the airport when they x-rayed your bag,\" I said.\n\n\"They took it out and looked at it and made me check my bag,\" she laughed.\n\n\"Holy shit! Is that what they were doing?\" Megan laughed.\n\nMy poor pecker was worn to a frazzle, but I still had a few of those old blue pills Johnny had at Penny's camp, and they kept me going. The girls took turns being fucked by the strap-on, buzzing away on it's highest setting, while they sucked on my cock. It got pretty wild and was all kinds of fun. College girls are awesome.\n\nIn the wee hours of the morning I made up the settees in the main cabin for Hanna and Megan, and we all slept like babies, our bodies sore and worn to the bone, our faces tired but smiling.\n\nWhen I got up to make coffee late the next morning it was pretty sweet seeing naked girls everywhere I looked. Megan was still out cold, but Hanna saw me at the stove and got up.\n\n\"Mornin' lover,\" she said, embracing me from behind.\n\nHer hand slid into the front of my boxer shorts and found my half hard 'morning wood.' \n\n\"How's my real man this morning,\" she said as she stroked me to full size.\n\nShe turned, bent over the dinette table and put one knee up on the seat, opening her beautiful pussy to me as she looked back over her shoulder with a wicked little smile. I dropped my boxers and entered her, and we fucked slowly and quietly as Megan slept.\n\n\"You've spoiled me for college boys you know,\" she said as she regained her composure after a nice quiet orgasm. \"Guess I'll have to find a real man of my own when I get back to town.\"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nThe next two days followed much the same pattern \u2014 the three of us spent our days at the beach followed by evenings exploring the city, and nights of great sex, which got less frenetic and more loving as we got to know each others bodies and souls. When it was time for them to go home I was very sad to see them go."
    ],
    "authorname": "riverboy",
    "tags": [
        "college",
        "coed",
        "fffm",
        "beach",
        "outdoors",
        "exhibitionist",
        "bisexual female",
        "public",
        "foursome",
        "three women one man"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/a-handymans-memoir-ch-33"
}
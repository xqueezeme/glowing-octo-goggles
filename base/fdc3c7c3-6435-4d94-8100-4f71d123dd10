{
    "title": "The Ox Who Got the Cream Ch. 02",
    "pages": [
        "Personal circumstances have, for once, given me good reason to slow down. But to the contrary, I enjoy writing more than ever. \n\nThanks, Rumpole, for glancing over this and supplying wise adjustments.\n\nThis is fun. Thanks again, readers. X \n\n***\n\nPretty lips pursed into a ferocious pout, Layla sat in the Oxmobile with her arms and legs crossed, glaring out the window as though the view offended her.\n\nWhat was most offensive was that she couldn't see a damned thing. The dark outside was a fast blur of nothing. All she could really see was the interior reflection, Truce often glancing her way, his teeth flashing in a triumphant grin she wanted to shatter with a hard punch. \n\nStill, she stared out the window with a riveted fascination because there was no alternative. \n\nAfter the call with her father, Truce was satisfied enough not to tease her. After a time hurtling down a seemingly endless black tunnel, the car finally slowed to a seamless stop.\n\n\"What a fucking night!\" Truce remarked, deeply pleased. Stopping the engine with the gentle push of a button, he unlatched the piece connecting his mask to the body armour and peeled the Oxmask away. \n\nLayla's sullen stare cut to him, the handsome, carefree sight of the great Oxman only spiking her temper. His dark hair was ruffled, jutting about in shiny tufts like after-sex bed hair. For a brooding crime fighter, he appeared annoyingly upbeat, smiling at her with an almost boyish exuberance. Then again, he'd finally caught her, and the challenge for him was no secret. \n\nLayla huffed and turned away. Before she was ready, he was out of the car and the passenger door clicked open, noiselessly sliding upward. When she stared ahead resolutely, Truce laughed. \n\n\"You know, this silent treatment isn't going to last. Not one bit. You're too sassy.\"\n\n\"Fuck you.\"\n\n\"There it is.\" Still grinning, Truce crossed his arms over the gleaming, matte leather coating his chest. \"Believe it or not, my cock is hard, and my heart is racing.\" \n\n\"Go fuck Ralphred,\" Layla sneered.\n\nTruce's large frame shifted and he uncrossed his arms to lean against the extended passenger door, aroused by her attitude. \"I'm going to fuck that sassy mouth of yours.\"\n\nLayla snorted disdainfully. \"Good luck with that.\"\n\n\"Don't need luck.\" Truce's grin didn't waver, but his gloved fingers began to drum against the car. \"Now are you going to step out, or do I get the pleasure of carrying you?\"\n\nParanoid, Layla peeked up at him, arms still crossed. She felt recklessly stubborn, digging herself a hole when she knew there was no way out. Like those dire situations when the disadvantaged party is offered a lifeline, and they rudely tell the lifeline to get fucked.\n\nShe knew he was being civil when he didn't have to; that it would be better, more dignified if she cooperated. Truce was generally a gentleman, until he wasn't. Layla knew if she was a good girl, accepted her defeat with grace, timidly wriggled into his bed and let him rock her world, she could probably evade the dungeon.\n\nBut she was too angry to consider what was good for her, if it meant swallowing her pride. She couldn't help being a sore loser, because the whole thing was freaking unfair. Fuck him. She would rather make things more difficult for herself, than easy for him.\n\n\"I'm not getting out!\" she snapped venomously, the green of her eyes sharp with anger. \n\nTruce's smile widened and he pulled off his gloves. \"Good.\" \n\nHe leaned into the car as Layla shrank back, preparing to kick him, grimacing at the gooey spunk sliding between her thighs with the movement, sticky on her silky folds. The rip in her pants tore wider, Truce's cum slick on her recently fucked naughty parts. Just thinking about it made the area tingle, and Layla's rage mounted. \n\n\"I'll tell my dad everything!\" she threatened as a last resort, the worst kind of bluff; a bald-faced lie. \n\nTruce's cocky grin disappeared, and he hovered, resting his forearms on the roof of the car and peering interestedly at her flushed face. \"You'll tell him what, exactly?\"\n\nSpurred by his pause, Layla began to ramble. \"I'll tell him you attacked me! That you're a molester! You forced yourself on me, and that you...you...\"\n\nTruce's mouth fell ajar with amazement, his eyes deeply amused. \"You're going to give him all the details? Can I be there to see the look on his face?\"\n\nLayla slumped into the seat when Truce threw back his head with a delighted laugh. \n\n\"Kitty, are you trying to turn me on? At this rate I'll cum in my pants before I can play with you.\" Still chuckling, he ran a hand through his hair and then slammed it back to the roof, signalling his impatience. The car didn't budge but the sound was startling. Layla jumped. \n\n\"I'm going to tell you some hard truths, Layla,\" he murmured, his dark eyes suddenly intense on her heated face. \"You can come inside and let me romance you; we'll make love. Or I can carry you in causing whatever scene you want to display, and make you pay for it.\" He let that sink in. \n\n\"But whatever I do, everything I do, you're going to enjoy it. You're going to like it. Because as much as you say you hate me, I don't buy it.\"\n\nLayla rolled her eyes with a disgusted sound to suggest he was insane. Observing her silent denial, Truce's lips curled to a small perceptive smile. \"You desire me so much, you have no control over it. You can't even conceal it. You're hot for me, when you don't want to be. That's a fucking powerful thing, Layla.\"\n\nLayla's fingers curled and twitched, itching to scratch his eyes out. Reigning in her temper, she tossed her head in a 'blah, blah, blah' gesture.\n\n\"I know you have a huge ego, being Oxman, and all,\" she drawled in her best bored and unimpressed tone, except her cheeks were angrily pink. \"But you're seriously barking up the wrong tree.\"\n\n\"Am I?\" Truce cockily replied. When she glared at him, Truce leaned into the passenger door, his tone tuned intimate.\n\n\"I can smell it in the air between us,\" he murmured with revolting confidence. \"I can taste it on you. The first time I took you, I knew your tasty little puss was drenched before I even flipped your dress up. Tonight, I could feel your cunt pulsing for me before I even opened your suit. You were so wet when I fingered you, my fingers pruned...\"\n\n\"Is this a tactic to get me out of the car?\" Layla snapped, reaching her limit for confronting truths. \"Talk disgusting until I can't take it anymore?\" \n\n\"I know everything, Layla,\" Truce announced with an arched eyebrow, watching her eyes uneasily dart to him.\n\nLayla stiffened when Ralphred lightly knocked on the wall. Who knows how long he'd been standing there, listening to Truce talk filth at her. \n\n\"Do you need assistance, Sir? Are you wounded?\" the old man inquired with a pained tone to suggest Truce often returned home injured.\n\n\"All that's hurting is Layla's pride,\" Truce chuckled, straightening from the vehicle. \n\n\"Miss Brandles?\" Ralphred blinked rapidly with surprise. \"Is she in the Oxmobile?\"\n\nLayla bit her lip and squeezed her eyes shut for a horrible moment, then ripped the Foxmask away and forced her face into a more ladylike expression.\n\n\"Hi, Ralphred!\" she lightly greeted him, peeking out of the car. The moment was slightly awkward, but if there was anything her father taught her, it was never to make a scene in front of staff. \n\n\"Oh, dear! Miss-! Master Cain, the hour is very late!\" Ralphred chastised. \n\n\"I know, and a cold evening, too,\" Truce replied with false repentance. Unclipping his cape, he held it out to Layla as a final olive branch. \"Would you like my cloak, or shall I bring you in as you are?\" \n\nIf looks could kill, Truce would be on the ground in burning pieces. Though Layla had entertained the risk of forcing Truce to carry her, the option was significantly different if Ralphred was watching. Although the butler seemed to know everything, Layla didn't exactly want him to see everything. Namely, her provocative skin-tight black leather and gaping, cummy suit-hole that recently accommodated Truce's thick cock. \n\nLayla ungraciously nodded, and Truce held the cape up to shield her exit from the car and wrapped it about her trim figure to conceal her shameful, tarnished outfit. His arm remained banded around her and Layla grimaced, feeling fluids squelch between her legs as she stood stiffly by his side.\n\n\"Shall I prepare a guestroom?\" Ralphred queried. \n\nTruce tilted his head, pretending to consider. \"No, thank you, Ralphred.\"\n\n\"Very well, Sir. Do you require anything else for the evening?\"\n\n\"I have everything I need, right here.\" Truce pressed a cheeky kiss to the top of Layla's mussed blonde hair.\n\nRalphred lightly raised his eyebrows and nodded. \"Very well, Sir. Enjoy your evening. Good night, Miss Brandles.\" \n\n\"G-Goodnight, Ralphred,\" Layla answered on autopilot, her voice hoarse with disbelief at the entire situation. \n\nTruce beamed down at her. \"Oh, Ralphred!\" he called on an afterthought. When the butler turned back questioningly, Truce grinned wickedly. \"You're about to lose our bet.\" \n\nRalphred nodded, expressionless. \"I'll see the necessary supplies are in your playroom, Sir.\" \n\n\"Add a bottle of Dom Perignon. Just the bottle; no glasses.\"\n\n\"Very well, Sir.\"\n\n***\n\nOnce Ralphred was out of sight, Layla immediately struggled to break free. Against his strength, she was like a toddler trying to distance from a parent. \n\n\"What are you doing?\" he narrowed his eyes at her hands desperately pushing his chest. \"I thought we had an agreement.\"\n\n\"There is no fucking agreement!\" Layla raged, hopelessly tangled in his cape. \n\n\"Oh.\" Truce looked her up and down with a predatory smile. \"Well then, you've done most of the work for me.\" At that, he took her by surprise with a brisk twirl, then smoothly bent and lifted her over his shoulder, the cape completely restraining her limbs. \n\nIgnoring her protests, he cheerfully strolled along a charcoal corridor until he reached the elevators. Pressing a button, one immediately opened with a ding, and he set Layla onto her feet. \n\nGasping with exhaustion and outrage, wrapped like a giant spring roll, Layla had no time to prepare for what came next. With a smug grin, Truce cupped her face and kissed her. \n\n\"MMFFF!\" she groaned against his lips, fighting to extract her arms.\n\n\"Mmmm,\" Truce moaned saucily, his hands holding her prisoner until they reached his selected level.\n\nOnce Layla's face and mouth were finally free, she was suddenly suspended, staring at the shiny floor and Oxman's heavy boots strutting along to wherever he was taking her.\n\nDeciding to conserve her physical and mental strength, Layla shut her eyes. When Truce set her down in a chair, she realised too late that it was no ordinary seat. \n\n\"NO!\" she shouted, managing a good hit to his temple with her left hand when he restrained her right wrist to the metal chair-arm. \n\n\"Ow! Forgot you're left-handed,\" he winced, quickly catching and securing her other wrist. \n\n\"What the fuck do you think you're doing!\" Layla shouted, kicking at him.\n\n\"Kitty!\" he warned, grunting when her knee sharply jabbed his back. \"Geesh.\" He turned and trapped one leg, secured it to the leg restraint, then the other. But not before copping her foot to the back of his head. \n\n\"Ouch,\" he frowned, rubbing the sore point. \"I should have kept the head-gear, wildcat.\"\n\nLayla's fists clenched and her eyes flared warningly. \"Let me out.\"\n\nTruce cocked his head. \"Why?\"\n\n\"This is a fucking gyno chair, you, prick!\" she snarled.\n\n\"Language, Kitty!\" he admonished with false shock. When she just glared at him, he selected a small knife. \"Let's get this sexy gear off you.\" \n\nTruce glanced up and saw her face tighten, hurt in her eyes through the defiant glare. He put the knife down. \"How ruffian of me,\" he mused. \"I'd rather unwrap you by hand, anyway.\"\n\nLayla bristled, but a flash of relief crossed her face. He'd ruined her suit, but she didn't want him to destroy it entirely. Her relief quickly dissolved into rage when Truce easily dismantled her suit, finding the little zips and hooks that kept it in one piece as though he'd designed it himself. Layla had thought the design was clever and convenient; parts easily discarded if they got caught on something, or if she was injured. It was too fucking convenient for Truce.\n\n\"Wow,\" he stood back to admire her. He'd left her arms and legs sheathed in shining black, unwilling to release her wrists and ankles. The centre of the suit splayed open, baring her breasts and smooth belly, currently heaving with indignant panic, only making her more desirable. The sight of her pale pink nipples caused a sudden rush of saliva; her full, bare breasts momentarily held his attention, perfectly rounded and calling to his hands and mouth. \n\nControlling his primal urges, Truce adjusted her stirrups, raising her legs to get a view of her pussy and ass. \"I think this section is a write off,\" he decided, and fetched the knife to slice away the entire crotch area. \n\nLayla bit her tongue, shaking with rage, not the cold. The room was quite warm. It was the size of a common bedroom. It was clearly a dungeon, but of a softer kind. The chair she was strapped to was comfortable with cushioning layers, even the wrist and ankle clasps were lined with a soft material to prevent abrasion. There were tables and cupboards and other things she couldn't quite make out in the dim lighting, mostly due to the bright spotlight centred on her body.\n\nFor a while neither spoke; Layla sullenly stared at a darker part of the ceiling while Truce happily cleaned the cum from her thighs, pussy and ass. His technique was too thorough, too gentle; targeting her naughty parts with the perfect pressure to build a familiar needy ache and make her blush. Satisfied with his handywork, Truce went to inspect his toys.\n\n\"There is the rather important question of how you'll address me, while we're in here, at least.\" He pursed his lips with consideration. \"'Master' seems a little draconian to me.\"\n\n\"I think 'Oxymoron' will do,\" Layla sniped. \"Want to know why?\"\n\nTruce raised his eyebrows with calm interest, still inspecting his tools. \"I have a feeling you're going to tell me anyway.\"\n\n\"'Ox' and 'Moron' are applicable,\" she snarled. \"And you are a walking contradiction. Business in the day, Hero in the night. Fucking asshole in private.\"\n\n\"Very clever,\" he chuckled. \"But no. I like 'Sir'.\"\n\n\"Bring Ralphred in here often, do you?\" she taunted with rude insinuation.\n\n\"This attitude won't reward you in the short term,\" Truce said mildly, picking up some little wires. \n\nLayla tensed when he approached her. As he stood at her side, so close she could feel his warmth, she closed her eyes with a gulp. She'd asked for trouble, and here she was. \n\nAn inkling of doubt prickled up her spine. Truce was the good guy, wasn't he? Then again, if he wasn't, who could stop him? If he really hurt her, he would have to answer to her father. Unless she vanished completely. Villains commonly disappeared; their bodies surfacing in 'accident' scenarios...\n\nAfter feeling so tough about battling villains, Layla registered that she was actually scared of the good guy. The fear was so humiliating she could have cried.\n\nTruce wasn't all niceties. When the Fiddler kidnapped three boys, Oxman had only three hours to find them. He saved them with seconds to spare, as usual. The Fiddler went into hiding, retired. One of his prior henchmen clarified that Oxman painfully confiscated 'everything that would matter to a man' during interrogation. \n\nWell, she wasn't a villain. Oxman was in the wrong. Regardless, she uneasily shifted, very unsettled by the little rubber pincers at the wires' ends that Truce cradled in his hands. \n\nIs it too late to take up the bed offer?  \n\nLayla flinched at the thought, hating herself for even thinking it, still frozen as Truce's fingers slowly threaded through her hair. Nope, she wasn't going to plead with him. She had a high pain threshold. If he killed her, she'd find a way to haunt the fuck out of him.\n\n\"I feel stupid that I have to say this,\" Truce said quietly, interrupting her neurotic thoughts, still petting her. \"You're very important to me. I'll never hurt you, Layla.\"\n\nHer eyes still closed, Layla gulped again, wishing she weren't so visibly nervous. Truce was in front of her now. His had smoothed down her face and cupped her cheek. She could feel his warm gaze on her face. Realising she held her breath, Layla forced herself to calmly exhale. When she did, her eyes flew open when Truce pressed their lips together. \n\nStartled, Layla strained against the restraints. Despite her tension, the kiss was gentle, sending little delicious messages to her erogenous zones, stiffening her nipples, her pussy beginning to throb, raising her heartbeat. His kiss became forceful, guiding her mouth open, engaging her tongue, teasing her. \n\nLayla gasped with alarm when one of the rubber nibs clasped onto an already erect nipple, shortly followed by the other. Truce smiled into her face as she struggled futilely. \n\n\"Chill, kitty,\" he cooed, kissing her forehead as she stared down her chest, too distracted to notice anything else. The little wires were connected to something. An ominous grey box with lots of buttons. \n\nHer eyes darted to the item beside the box. Sharp metal pincers with a mean glint, looking like a curled-up spider. If he put those on her, they would definitely break the skin. Tear into her flesh.\n\n\"Not for you,\" Truce reassured her, following her panicked gaze. \"Those were designed for bad guys. And I mean guys. They latch onto balls, to be precise. I'm saving them for Three-Face. He's been seriously fucking with me, lately.\"\n\nLayla shivered, way out of her comfort zone; confused, alarmed and undeniably aroused.\n\nBruce sighed dreamily and went to the little box. \"This is going to make you mad,\" he said with shameless cheer. \"Because you're going to enjoy it.\"\n\nLayla angrily shook her head, then shuddered when the tiniest zing reverberated from the wires. It wasn't quite an electric shock; more like a light clothing static that tantalisingly encompassed her nipples, the pleasure flashing down her torso between her legs. The sensation was undeniably erotic. Her heart was pounding, and not just from anger.\n\nTruce's hungry eyes were locked on her pussy. Layla winced as her wetness begin to show; trickling out to make her soft, pink parts a glistening invitation.\n\n\"Well, look at that,\" Truce said softly, his voice husky with lust. Picking up the bottle of champagne, Truce took an initial swig, still staring between her legs. \n\nLayla squirmed when he knelt in front of her, fascinated by her bare pussy. His eyes lifted for a second, entirely mischievous, before he poured a little booze onto her belly.\n\nLayla hissed irritably at the chilled fluid quickly flowed down her abdomen and through her pussy. Truce's warm mouth was there, sucking, lapping it up. Without stopping, he continued to top up the stream, tonguing her sex as though it was a mouth kissing him back. \n\nLayla arched and gasped, squirming from the sensations. Her nipples were intermittently zinging, sparks of unwanted pleasure shooting through her body. Cold liquid, hot mouth working on her. \n\n\"Truce!\" she cried out, and felt his lips curve into a grin, his tongue poked into her, the stubble of his chin prickling the soft sensitive area with a stimulating effect. \n\nTruce smugly leaned back on his haunches, took another swig from the bottle and moved up her body, kissing her stomach, the curves of her breast. For a moment he rested his head to her heart, feeling it hammer by his temple. At the same time, his fingers were searching.\n\n\"Truce! You can't! You can't do that!\" Layla squeaked, the mouth of the bottle pressing against her throbbing hole.",
        "\"Why not?\" Truce slurred, afraid there was so little blood in his upper body he might pass out. \"Would you prefer something else?\"\n\nThe bottle pushed in slightly, Truce thumbed her clit, and Layla fought the restraints, crying out through her orgasm, her nipples hard and buzzing, Truce's mouth moved across her chest. \n\n\"Oh God,\" she panted, her head falling back as Truce removed the bottle, chuckling. Despite the heavy climax, feeling heavily stimulated on the exterior, there was still something lacking that she'd never admit aloud. \n\n\"Want me to fuck you, kitty?\" Truce growled, up against her, his hands gripping where her wrists were restrained. \"Want my hard cock to fill you up while you can't budge an inch?\"\n\nInch immediately reminded Layla of Truce's thick member. When she looked away, still panting, still squirming, Truce's eyes darkened with a better idea. \n\nLayla sighed with deep relief when he walked away. When he stood between her legs again, her ankles jerked to close them, though it was useless. \n\n\"Aw, don't pretend you don't want this,\" Truce grinned, his eyes alight with excitement. In his hand was a little fox tail. Soft brown, cute and all, but the gleaming black rubber end meant trouble for Layla. \n\n\"I don't!\" she insisted, straining away in the chair, recoiling when Truce tongued the smallish plug, his eyes dancing with glee. \"No! Go away! No! I never-!\" \n\nTruce's bark of laughter interrupted her, and he was already on his knees, gently twisting the lubricated end against her butthole. \"You forget who you're talking to. I know everything, Layla.\"\n\nLayla was so surprised she was temporarily distracted, a moment later the little tail pressed through the barrier and was snugly settled inside her. She struggled, remembered it was useless, and let her body adjust to the little toy stretching her.\n\n\"When we first met, you were such a brat,\" Truce murmured, giving the tail a little flick. \"Full of anger. At first, I presumed it was just jealousy.\"\n\nLayla's mouth fell ajar, and her thighs quivered as the silky end of the tail brushed her aching pussy.\n\n\"But I couldn't get you out of my mind,\" he admitted. \"After a while watching you, I began to suspect something else,\" he sighed, kissing her inner thigh, watching her eyes fill with furious denial as she sensed what was coming. He laughed.\n\n\"You think I only hack villain databases?\" he smirked, tickling her pussy with his tongue, tasting her sweet scent, smacking his lips in an obscene way that made her cringe. \n\nHe straightened to look her in the eye and Layla froze as her entire world stopped; the simmering moment between them was that intense.\n\nA lazy, arrogant smile spread across Truce's handsome face. \"Imagine my surprise, when I watched you google me before pleasuring yourself.\"\n\nLayla recoiled with shame. No, no, no, no, NO! \n\nTruce chuckled at her silent dismay. \"I couldn't believe it, either.\"\n\nLayla quickly looked away, wishing the floor would open wide enough to swallow the whole chair with her in it. \n\nTruce leaned closer. \"The game is up. I know you fancy me, and I know you love a little anal play. The number of times I've cum to the memory of you rolling about the bed like a little slut, moaning 'fuck my ass'...Jesus Christ,\" he shook his head, and quickly reached down his suit. \"I've ruined everything. I wanted to play some more, but I can't hold out. Ready to cum again, kitty?\"\n\nWholly mortified, Layla's mouth hung open. Truce took the opportunity to kiss her roughly, growling when she whimpered. His cock probed her slick entrance and pushed inside, the little plug stimulating them both.\n\n\"Oh!\" Layla's green eyes were so beautifully wide Truce almost spurted early.\n\n\"Oh, God, yes,\" he muttered, slowly withdrawing to thrust again, savouring that tight, wonderful sensation and knowing she felt it too. \"I'm fucking you, and there's a tail in your ass, naughty girl,\" he purred, biting her neck.\n\nLayla was trembling, overwhelmed by the restraints and bundle of conflicting feelings. The man using her body; a calculating superhero reduced to a groaning, passionate male. Her hatred and her desire. The horrible truth that he was right about everything. She gasped when he pulled her hair and gazed into her eyes.\n\n\"Say it,\" he demanded breathlessly, his hips jerking into her. \"Say 'there's a tail up my ass, and I love it!'\"\n\n\"Please...\" Layla's eyes rolled back and closed. The fist in her hair tightened painfully and her eyes fluttered open.\n\n\"Say it,\" he grunted, his mouth falling ajar with lust as his climax approached. \"Cum with me, Layla. Fucking say it!\"\n\nLayla felt a strange twinge, like a small weight shifting, alleviating her resistance to the circumstances and permitting her to release her hang-ups and just be. A reckless enjoyment washed over her, relaxing and thrilling. Unable to move her limbs, she arched in the chair, her thighs tightening with an urge to wrap about him. \n\nWhen she opened her eyes, Truce saw they were dark green and sultry, desperate, surprised; the way he always wanted, the way he loved. Her lashes dark and heavy, forcing her to blink, batting at him like feminine encouragement.\n\n\"Say it,\" he warned, noting the break in her resolve, recognising her surrender. \"Say it because I told you to. Because it's true. Tell me!\"\n\n\"T-There's a tail in my ass,\" she moaned, entirely dazed, hungry. \"And I love it...I...I...Ohh!\"\n\n\"You're my naughty girl, aren't you?\"\n\n\"I...Yes...Yes...\" she gasped. \"Fuck! Fuck me!\"\n\nTruce stilled his thrusting, his eyes fierce, glaring into hers. \"Say you're my naughty girl,\" he demanded.\n\n\"I'm your naughty girl!\" Layla cried, frantically bucking against him.\n\n\"Mine!\" Truce grunted, his chest and arms seemed enormous, every muscle flexed as he strained against her. Then he fucked both of them toward the edge, burying himself forcefully, over and over. He saw Layla's hands balled to white fists; her eyes rolled back.\n\nWhen the shattering moment hit, they both stiffened for a few heartbeats then continued writhing, but Truce had better command of his movements. When the hard pleasure subsided, he slumped against her as she relaxed in the chair, utterly exhausted. \n\nFinally, he detached the little nibs that were still making her squirm, and reached under to slowly pull on the plug, grinning at her soft squeak when it popped out of her tight hole. Lastly, he let his cock slide out, a new load following to drip down the seat.\n\nLayla was still limp and fatigued in the chair, quietly watching him. Not afraid, not angry, just quiet. Observant. He'd pay a fortune to know her thoughts. \n\n\"Ready for bed, kitty?\" he smiled lazily, affectionately smoothing his hands down her spread thighs to the ankle restraints, questioningly tapping the metal.\n\nResentful acknowledgement flickered in the emerald depths of Layla's eyes, and she nodded.\n\n***\n\nTruce was kind in the aftermath, merciful in his victory. He didn't taunt her about her masturbation habits; didn't mention it at all, and she was very grateful. The humiliating fact that he knew about it really stung. \n\nLayla towel-dried her hair after a hot shower, staring at her reflection, hardly recognising the change in her. It was a lot to take in. She looked tired, relaxed, still flushed. The happiness lingered, her senses buzzing with that weird post-release freedom. Submitting to Oxman's whim. \n\nLayla shook her head, marvelling at how their interactions evolved over a matter of hours. She was in a perfect position to fuck up Oxman's operation, but that wasn't what she was about. Though she certainly wanted to hurt him, Oxman was still a valuable crime fighter, even if he was an arrogant rapist. Her conscience couldn't let her get in the way of the good work he carried out ceaselessly. \n\nBut now the sex battling was over, she was reluctant to recognise how exciting it was to be in the dark wing of Oxman's property, separate from the main mansion where Truce conducted business, hosted and pretended to live. She was thrilled. \n\nIt was like another world; a world she dreamed for herself. The secure, sealed off section had a different d\u00e9cor; darker, classier in its simplicity, more mysterious. Loaded with weapons, the Oxmobile, Truce's office filled with monitors, his luxurious living quarters, all decadent charm. No one besides Ralphred ever saw it. There was no denying that she was privileged to be there. She'd be a fool to throw the opportunity away.\n\n\"Hey, sexy.\"\n\nLayla yelped and clutched the towel to her breasts, though there was little point. Truce leaned in the doorway; his eyes glued to the mirror where her pert ass was on full display by reflection.\n\n\"You might have knocked!\" she protested, cheeks red and feeling suddenly shy. She hated him, didn't she? \n\n\"You left the door open,\" he remarked, dragging his gaze to her flustered face. His lips quirked with humour. \"Come to my office, I want to show you something.\" \n\nThen he was gone, and Layla had time to wrap a white guest robe about herself, obviously arranged by Ralphred, and quickly pad out of the bathroom.\n\nCautiously tailing him from a distance, she followed Truce down various corridors, through strange rooms leading to a vast office the size of a small gym. In it she found Truce in a chair that looked like it belonged on a UFO, his eyes raking three large monitors on an enormous desk. The wall behind was covered in too many screens to count. Various parts of the city. Empty offices, some occupied. Prison security footage. Inmate cells.\n\nTruce continued to type, not acknowledging her presence until he was ready.\n\n\"How did you like sub space?\" he asked softly.\n\nIrked by his wickedly curious, intimate tone, Layla pretended not to hear him. \"What...\" she swallowed, hovering uncertainly behind him. \"What do you want to show me?\"\n\nTruce typed rapidly, and the third monitor sprung up a blinking, multi-coloured list. \"See this?\"\n\n\"Yeaah?\" Layla slowly answered, still in the dark.\n\n\"This is my 'to-do' list,\" he pointed to the top; the first ten items were in the red. \"If one of these were scheduled tonight, or even in the next week, I couldn't have ambushed you at the store.\" He gently linked his fingers across his hard stomach and spun in the chair to face her. \"It had to be tonight, so I could work on you uninterrupted.\"\n\n\"W-Work on me?\" Layla spluttered.\n\nTruce grinned slyly; his ruffed dark hair deceptively charming. \"Trap you, catch you, fuck you, kidnap you. I went fucking easy on you in the dungeon. There was no punishment, I hope you're aware of that. I am going to fuck your sexy mouth, at some point. Tonight was about us connecting.\"\n\nLayla's eyelids flickered, but she suppressed the instinct to roll her eyes. Though she wanted to be aggressive, she was far too curious. \"So, what is this about?\"\n\n\"You can have all this,\" Truce silkily waved one hand to the monitor. \"I meant what I said at the jewellers.\"\n\nLayla pulled a face. He'd said 'jewellers' as though he were there for a respectable reason. She pulled herself together. \"Wait, you mean...\" she held her breath for a moment. \"I can fight crime, too? No strings?\"\n\nTruce impatiently arched an eyebrow. \n\nLayla felt suddenly wary as she perceived Truce's 'business face'. She'd seen it through glass walls when he met with her father, or those times she pinpointed him at parties just to make sure he never got near her; often he was sombrely chatting with investors or off-duty sergeants, his serious expression disconcertingly sexy. But that expression was never directed at her, intent and outcome focused. This wasn't play for him, it was a business transaction. She nervously shivered.\n\n\"Well?\" Truce prompted. \"It's not a light decision. Would you like the night to think about it?\"\n\n\"No! I want to...\" Layla trailed off, not wanting to say, 'fight bad guys', like an excitable child. \n\n\"I'm sure you do,\" Truce frankly finished her sentence, glancing back to the list that occasionally flickered with an update. \"I will train you, take you with me, protect you. Let you use some of my weaponry and access most of my intel.\"\n\n\"Okay,\" she said hesitantly, dread and desire coiling in her belly. \"And in return you want something? What?\"\n\nOf course, it was sexual. But now he'd had his way with her, won the war, he'd back off from boredom. The chase was over. Maybe she'd only have to fuck him once a month. Or let him take some lewd photos to beat off to. That seemed fair enough.\n\nTruce looked surprised she asked the question. \"I want you, Layla. For me to let you into my world, you have to be mine. And you must abide my rules where your safety is concerned.\"\n\n\"Your rules?\" Layla repeated blankly, feeling overwhelmed.\n\nTruce nodded. \"If you break them, Layla, you will upset me. And I will punish you for it,\" he finished softly. \n\nLayla slightly edged back when he leaned forward, staring with hard eyes, the soft brown colour now carrying a steely glint, holding her attention. \"Before the end of this year you'll be wearing a wedding ring and your surname will change from Brandles to Cain.\"\n\nLayla's jaw dropped. \"Is this a joke? I have to fucking marry you?!\"\n\n\"Yes.\" Truce didn't blink. \"Those are my terms. And I'd never demand it if I wasn't sure it'd work for both of us. It'll be much easier to maintain my civilian image. There's a lot of effort and little fun involved convincing the public I'm a playboy. It's fucking tiring, actually.\"\n\n\"I'm not Stepford Wife material,\" Layla said resentfully. \"And I hate you.\"\n\n\"You're still pretending you're not fixated on me?\" Truce asked cynically. \"Your father has known for months. He's mentioned it a few times.\"\n\n\"Bullshit!\"\n\n\"Parents sometimes notice things that their children don't realise immediately,\" Truce shrugged. \"An objective perception.\" He shifted in the chair, angling his head at her stormy expression. \n\n\"Layla, sooner or later my interest in you was going to become dangerous,\" he quietly reasoned. \"Once apparent to others, you would be targeted. I need you to be with me, so I can protect you.\" \n\nScheming, Layla dropped her gaze, unable to maintain the staring contest. If she was with Truce, her father would let her do anything. Her eyes slid back to the tempting list on the screen.\n\n\"So, if I accept, I can come to The Poker assignment?\" she said craftily. \n\nTruce twisted to glare at the monitor, then turned back to her, looking pissed off. \"Absolutely not, Layla. Not him.\"\n\n\"They're all bad!\" she argued, pleased to have a struck a nerve. \"You said I could have it all!\"\n\n\"There's always an exception, Layla. He's it.\"\n\n\"Why?\" she challenged, indignant anger bubbling inside her. \"Too high profile for me?\"\n\nTruce hesitated, contemplating the wisdom of telling her. \"He's too lethal.\"\n\n\"And the others are harmless?\" Layla countered incredulously. \n\nTruce laughed bitterly, rolling an ornament across the desk and standing to follow it to the other side, catching it as it went over the edge. He stared at the ball in his hands, then looked up. \"I know I gamble with life and danger, but some things are off limits. You're one of them.\"\n\nLayla pouted. \"I know he's one of the more dangerous villains, but...\"\n\n\"He is the most dangerous, Layla,\" Truce said harshly; tension visible in his broad shoulders. Layla shifted to a different approach. \n\n\"So, I'm one of your few limits? Who else is off limits? Ralphred?\" she asked with a coy smile, flirting with him. \n\nTruce's severe expression cracked, and he laughed. \"Sure.\" He reached for her; eyes warm with playful affection. \"It's almost sunrise. Let's go to bed. We'll discuss the details later.\"\n\nLayla accepted his hand and let him lead her from the office, mentally revising what she'd seen in the Poker's mission description, taking the intel to memory.\n\nTruce wasted little time stripping the white robe from Layla and pushing her into an enormous bed. He clearly had a 'sleep naked' policy which would be enforced.\n\nIt wasn't until they were entwined under black silk sheets that Layla's curiosity spiked again.\n\n\"So... why can't I fight the Poker? What makes him more dangerous than the others?\" she asked.\n\n\"Urgh, Layla!\" Truce growled and gave her a warning squeeze. \"Don't talk about him in bed!\"\n\n\"Then just tell me!\" she insisted.\n\nTruce sighed deeply in the dark, his fingers idly tracing soft strands of her hair. Half a minute passed, and Layla waited, knowing Truce was still awake. Obviously thinking about it. \n\n\"I've fought The Poker for a number of years,\" Truce said eventually, still trying to explain. \"We know each other quite well. He's like me in some ways.\"\n\n\"But he's a villain!\"\n\n\"I don't mean we share the same values,\" Truce said shortly. He turned Layla onto her back, crawling on top, burying his face in her neck. \"Mmm.\"\n\n\"Oh,\" Layla gasped, feeling something hot and hard rubbing up her inner thigh, nudging, searching, squeezing into her pussy. \"T-Truce...\" she faintly protested, though angled her pelvis to better accept his slow thrusts. \n\n\"You think I waited this long, worked this hard to get into my bed, and wouldn't take advantage?\" he said thickly against her ear. \"I'm fucking starving for you, Layla.\"\n\nTruce's hand crept through her hair, fingers pressing her scalp, his mouth on her ear, panting. His frame covering her was large, the heat of his skin surrounded her like an intimate cocoon, his cock thick and pulsing inside her. \n\nIt went on forever, they became lost in the slow, rhythmic grind, the soft sheets cooling luxury against their building heat. When Layla came, she arched into the bed, bucking against Truce while he sucked her breasts. \n\nTruce's wet mouth left her nipples, his hands clawed through her hair as they locked lips. He fucked harder, faster, growling through his release, sucking her tongue. Layla was weak under him, fairly certain she'd leave a bodily imprint in the mattress, like those old-fashioned crime scene chalk outlines. \n\nStill catching her breath, she drew a deep, shaky sigh, never feeling so fucked in her life. Truce pulled out of her and flopped to his back, drawing her against his chest. \n\n\"I need to make sure you're too fucked to run out on me,\" he panted, his fingers possessively massaging her scalp. \n\n\"Hm,\" Layla drowsily replied, still unable to form articulate thoughts. \n\nTruce chuckled indulgently. \"I've partially won you over. But I haven't tamed you, yet.\"\n\nThough ridiculously comfortable against the heat of his skin, Layla dimly conceded his assessment was correct. But she could enjoy herself in the moment. And take advantage of certain benefits that came with bedding Oxman.\n\n\"So...about The Poker,\" she breathed, drawing an invisible line down his pec. \n\n\"Oh, my God. You're not going to let me sleep, are you?\" Truce sourly complained, his chest steadily rising under her from the sexual exertion.\n\nLayla giggled and continued to draw circles on his chest. Though he didn't show it, she sensed he was ecstatic to have her in his bed at last, and willingly. That had to put him in a generous mood. \n\n\"In some ways The Poker is like me,\" Truce said heavily, trailing his fingertips up her silky arm. \"If you go up against him, you'll catch his attention and...\"\n\n\"And?\" Layla pried with rapt attention. \"He'll want to kill me?\"\n\n\"Worse.\"\n\nAs Layla's eyes adjusted, she could see his frowning profile in the dark as he stared at the ceiling. \"What's worse?\" she persisted.\n\nPulled from his dark musings, Truce grunted irritably. \"Layla, if you get on his radar, he'll want you. The same way that I do.\""
    ],
    "authorname": "Bellie444",
    "tags": [
        "bondage",
        "cat and mouse",
        "forced sex",
        "kidnapped",
        "leather",
        "obsession",
        "romance",
        "stalked",
        "superhero",
        "weird"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-ox-who-got-the-cream-ch-02"
}
{
    "title": "Ryan Ch. 07",
    "pages": [
        "Two days later, Dani woke up in the spoon position with Ryan kissing her neck. Groaning, she stretched and luxuriated in the warmth of his body and the gentleness of his kisses. \n\n\"Good morning, baby,\" she murmured.\n\n\"Ummm, morning sweetheart,\" he returned while stroking her full breasts. \n\nTurning on her back, Dani looked up at Ryan and stroked her fingers through the short length of hair on the top of his head. He still wore the military style cut that made him look so commandingly sexy, but it had grown out a bit. \n\n\"Last night was awesome,\" Dani said on a sigh.\n\n\"There's nothing like making up for lost time, but if we keep up that pace, I won't be able to stand up because my legs will have turned to mush. Not that I'm complaining.\"\n\nAlmost as soon as the words were out of her mouth, she gasped as Ryan gave his attention to the tips of her breasts. He sucked each nipple causing her to purr like a kitten. Arching her back, she was becoming lost in his loving when the telephone rang.\n\n\"Ryan,\" she said with a moan. \n\n\"Let it ring,\" Ryan growled, continuing his assault on her body.\n\nBut the recorder came on and broke the mood.\n\n\"Hey Dani, I'm calling to remind you that my fight will be in at 11 o'clock today, your time.\"\n\n\"Damn! I forgot he was coming in today,\" Dani groaned and then hurriedly picked up the receiver. \n\nFlopping onto his back, Ryan grunted in exasperation.\n\n\"Hey, James,\" she answered, trying to calm her breathing.\n\n\"Hey, Dani; I know it's kinda early, but I wanted to make sure you didn't forget since you've been sick. We haven't talked in a couple of days, but I assume it's still ok to come,\" James said.\n\n\"Of course it's ok. It would be ok even if I didn't feel better, but it probably wouldn't have been pleasant for you. Boy, I was a mess.\" \n\n\"I bet. I remember that you're more than a little cranky when you're sick,\" he reminded her.\n\n\"Yeah, yeah,\" Dani muttered.\n\n\"I didn't feel up to being cranky this time. Anyway, I'll be at the airport to pick you up at eleven.\"\n\n\"No,\" Ryan whispered from his position beside her. \"I'll pick him up, baby.\"\n\nNodding, Dani said, \"Ryan will pick you up, James.\"\n\n\"Oh. Ok Sis,\" James said, not wanting to admit that he was apprehensive about meeting the man in Dani's life.\n\n\"All right, baby Brother, I'll see you later. Bye.\"\n\nAfter ending the call, Dani scooted down in the bed and curled up against Ryan.\n\n\"Thanks, sweetheart, I really wasn't looking forward to all that traffic. I'm so lucky to have you,\" she whispered, stroking his chest.\n\n\"It's not luck at all,\" Ryan said, \"we were meant to be together. Loving you is as natural as breathing.\" \n\nQuickly changing position, he pulled Dani on top of his hard body and took her lips in a deliciously slow sensual kiss that left her breathless. \n\n\"Now, where were we?\" he asked with a wicked grin. * \n\nAfter Ryan left to pick up James, Dani reluctantly got up. She was still feeling the warm flush of afterglow, but staying in bed was out of the question. Technically, she was still sick, but she didn't want James's first sight of her in over a year to be of her lying in bed.\n\nAside from that, Dani didn't know how he and Ryan were going to get along. She ran through the possibilities in her mind, none of which were good. Growing frustrated, she realized that she wasn't going to get any rest. Struggling to a sitting position, she sighed and got up.\n\nAfter changing the bed linens, she took a long warm shower and got dressed. Feeling refreshed, she thought she might be able to face whatever was to come. \n\n*\n\nThe ride from the airport was a revelation for James.\n\nHe'd already made up his mind not to like Ryan, so he started out with the silent treatment. When Ryan tried to engage him in conversation, he answered with as few words as possible. He didn't want to be outright rude, that would piss his sister off, but he didn't want to encourage him either. \n\nRyan knew that James wasn't happy about Dani being with him and why. He wanted to have a good relationship with her brother, but race is what it is and as far as he was concerned James would just have to deal with it. He'd make the effort; anything else was up to James. \n\nGrowing up, according to Dani, James never expressed any negativity toward other races. Although he was raised in a predominately black neighborhood and attended mostly black schools that wouldn't necessarily breed racism. Ryan thought there might be something more to his attitude. Whatever it was, he knew he had to get to the bottom of it. \n\n\"James, there's something we need to talk about before we get to the house,\" Ryan said.\n\n\"What?\" James asked, looking cautiously at the big man. \n\n\"You seem to have made up your mind not to like me. I know that you've expressed your feelings to your sister about her dating a white guy. That's fine, if that's the way you feel, but whatever your attitude is towards me, I don't want Dani upset about it. Understand?\"\n\n\"Yeah, I understand,\" James said, a little irked that Ryan was reading him. \n\n\"Good. Now tell me why you feel as you do. If it's really my race, that isn't going to change; if it's something else, I'd like to know,\" he said glancing at James. \n\n\"I'm not going to give you a hard time about your opinion,\" Ryan continued, \"but I will tell you if I disagree and why. We can then agree to disagree. Anything you say to me will remain strictly between us; I don't want Dani in the middle. I love her and I won't allow anything to come between us. As far as I'm concerned, she's going to be with me until I take my last breath.\"\n\nJames was shocked at Ryan's confession which gave him pause to think. \n\nHe hadn't expected Ryan to confront him about his attitude or reveal how he felt about Dani. The truth is, this guy was the first serious boyfriend his sister ever had. James thought it was just a phase, in which case, she might miss out on someone who was really right for her, like Marcus. But, he knew deep down that it wasn't the entire story. He wasn't proud of the reason, but Ryan was being honest and he needed to be honest with him. \n\nLooking at Ryan, James gulped and thought, \"Damn, he's seriously big.\"\n\nGathering his courage, he answered.\n\n\"I know what I told Dani, but that wasn't all there was to it.\"\n\nRyan nodded and waited for him to continue. \n\n\"Well, I went to high school with this girl named Ronda Evans. We dated for almost a year and a half. It got kinda serious. She was black,\" he said, slanting a glance to Ryan. \n\n\"Anyway, I really liked her. I think I was in loved with her, but six months before graduation, she broke up with me. She said we were too young to be tied down. I was pretty bummed out about it, but kept it under wraps. My parents knew about the break up, but they thought it was just puppy love and that I was ok about it. They didn't know that our relationship was...was...more and I never let them know how I really felt.\"\n\n\"What happened after that?\" Ryan asked.\n\n\"We ended up going to the same college and after a few weeks, we got back together. A couple of months later I found out she was seeing this white guy behind my back. One of her girlfriends was pissed at her and told me about it. Ronda confirmed it when I confronted her. \"\n\n\"Did she meet him at school?\" Ryan asked.\n\n\"She met him in high school. He went to a rival school,\" James sighed.\n\n\"She was on the cheerleading squad and met him at an away game. He was the quarterback of the other team. He was also the reason she broke up with me the first time. After that, she was on again, off again with him. She pretty much kept that on the down low.\"\n\n\"I was mad and hurt about the whole thing. It wasn't just that she cheated on me, we'd been friends since third grade and I realized that I never knew her. Anyway, I saw her from time to time around campus, but I got over it. At least that's what I told myself, but I guess I was in denial.\"\n\n\"When Dani told you about me, it all came back again?\" Ryan surmised. \"Yeah, it did, but I didn't want to tell Dani the whole deal with Ronda. Besides, the family didn't really care too much for her, especially my Mom. She thought Ronda was stuck up and was always putting on airs, as she called it. I tried to pretend that it didn't matter that we broke up, but I guess I still had a lot of resentment.\"\n\n\"Was that the only reason you objected to my relationship with Dani?\" Ryan asked.\n\n\"Yeah, mostly, but I also thought Marcus would really be good for Dani,\" he said with a shy smile feeling more comfortable with Ryan. \n\nThen he took a deep breath and apologized.\n\n\"Hey, I'm sorry man. You seem like a nice guy. None of this was really about you. I just had some issues that I really wasn't dealing with. I could tell that Dani was happy with you. Now that I know how you feel about her, I'm cool with it.\" \n\n\"Does this mean that you're going to give us a chance to be friends?\" Ryan asked.\n\n\"Yeah, man. Like I said, I'm sorry and I really didn't mean to dump all of this on you.\" \n\n\"Don't worry about it and I meant what I said; what you've told me is between us. If you want Dani to know, you tell her. We'll just see where things go from here, ok?\" \n\n\"Yeah, I'd like that. But, damn man, you're big,\" James said with a grin. \n\n*\n\nDani was on pins and needles wondering how James and Ryan were getting along. She knew that Ryan could handle anything James put out, but she really wanted them to like each other. James gave his word that he wouldn't say or do anything to offend Ryan, but he was young and sometimes impulsive. \n\nDani knew that she'd missed a lot in the two years he'd been away at college. He was working hard to graduate in three years. To accomplish that he'd spent most of the holidays on campus while he completed extra courses and worked part time. Although they'd kept in touch by phone or Skype, it wasn't the same. \n\nJames said very little about his college social life. The last person she heard anything about was Ronda whom he dated in high school. He said he didn't have time to date with his heavy college schedule and she'd left it at that. If there had been another girl, Dani wasn't sure that her brother would want to confide in her anyway. Even as a child James kept a lot of things to himself. Their mom use to call him her little man. He'd sometimes seemed more serious than he needed to be, but they'd given him his space. \n\nWith an exasperated sigh, Dani decided that there was no benefit in brewing up trouble when there might not be any. She figured that her time would best be spent in the kitchen making lunch. James would be hungry, she was sure of that, and Ryan had left without breakfast because of their morning romp. \n\n* \n\nIt was a half hour later when Ryan walked in with James. \n\nDani was surprised that they were in a heated football discussion and James was actually smiling as he made a point. Apparently she'd wound her nerves up for nothing. She didn't know what happened, but she wasn't looking a gift horse in the mouth. Besides, she would get the details from Ryan after they were in bed. \n\nThey were continuing their debate as they headed to the guest bedroom with James's luggage. \n\n\"Hey, am I invisible,\" Dani called. She was slightly offended that she went unnoticed in the kitchen. \n\n\"Oh, shit!\" James exclaimed, \"Sorry Sis, I was winning a point with Ryan and didn't see you.\"\n\n\"I noticed,\" she huffed.\n\nRunning over to Dani, James threw his arms around her and gave her a long tight hug.\n\n\"You know I love you, Sis. How are you doing?\" he asked.\n\n\"I'm doing much better, thanks. Good to see you baby Brother. You look like you're filling out a little, in a good way. You've got muscles. Did you give up junk food?\"\n\n\"Nah, I'm still eating it, just not as much. There are a couple of family style restaurants near the campus and they have food that reminds me of Mom's home cooking. I've gained about fifteen pounds, but my muscles are more defined because I'm working out at the gym every chance I get. I don't intend to give up sweets, but I don't want to run to flab either.\" \n\n\"Ahem!\" Ryan said. \n\n\"Sorry to interrupt the love fest, but don't I get a hug, sweetheart?\" he asked Dani.\n\n\"Ha! You were going to walk right pass me. I might have to think about giving you a hug.\" she retorted, then promptly lost her stern expression as she moved to him and pulled his head down for a kiss; a very long kiss.\n\n\"Ok, ok, I'm too young to see this,\" James protested. \n\n\"Show me to my room, man.\"\n\nGrinning, Ryan said, \"In a second,\" then proceeded to kiss Dani again, with a little tongue this time. Well, a lot of tongue. \n\nTurning his back, James muttered, \"Let me know when the porn show is over.\"\n\nBreaking the kiss, leaving Dani flushed and a little embarrassed, Ryan looked over at James and said, \"Kids!\"\n\nWalking over to James, he picked up one of the bags and grunted, \"Come on, spoilsport.\"\n\nAfter lunch they spent the rest of the afternoon getting caught up on James's college life. Without asking, James told Dani about his discussion with Ryan.\n\nHe said he knew, in retrospect, that his attitude was childish. Ryan wasn't that guy Ronda cheated on him with, but he'd let his insecurities get the best of him. He told her that he was sorry for ever bringing up the race thing. Dani accepted his apology, gave James a big hug and said that she was proud of him. \n\nAfter Dinner James called his parents and talked to them for over an hour. Then he and Ryan watched a football game on TV while Dani painted in her studio. She was actually getting quite good at watercolors, but didn't want anyone to see the picture before it was finished.\n\nRyan, being the considerate man that he was, gave her his den to use as a studio. The den was of considerable size, but rarely used since he had a separate office. Dani was reluctant to take up such a large space in his home, but Ryan insisted telling her that it was as much her home as his. How could she argue with that? \n\nThe painting was on a 26 by 40 inch sheet of Arches 300 lb. cold press watercolor paper. She was a beginner in watercolor, but she put in a lot of time practicing before starting on the picture. There was only a few days work done before her illness; even so, she was progressing well and had a whole new appreciation for the medium. \n\nKeeping the painting a secret wasn't a problem. When Ryan gave her the space, he'd said that this was her domain and he wouldn't step foot over the threshold unless she invited him in. He was true to his word.\n\nAfter Dani finished for the day she sought out Ryan and James. \n\nRyan was on the sofa watching the news. James, having called it a night, had gone to his room. Dani sat on the sofa and snuggled up to Ryan, leaning on his shoulder. He lifted his arm and pulled her into his body.\n\n\"Looks like you and James have become fast friends,\" she said.\n\n\"Yeah, he's a good kid, but his choice in football teams sucks.\" \n\nDani chuckled and explained her brother's love for the game. \n\n\"James has always been for the home team, win or lose, the Bucs was it. When they won the Super Bowl he thought he had died and gone to heaven. His room at home is wallpapered with pictures from Sports Illustrated, and not the swimsuit edition. When football season started, he turned into a couch potato along with my Dad and his friends.\"\n\n\"Did he ever play little league ball?\" Ryan asked.\n\nDani laughed at the question.\n\n\"What's so funny?\" \n\n\"Dad tried to get him into the pee wee league when he was ten, but James said, quote, 'No way. I'm too good looking, you know those guys are gonna try to hurt me.'\n\nSnorting a laugh, Ryan asked, \"He was kidding, wasn't he?\"\n\n\"You'd think that, wouldn't you?\" Dani replied with a grin. \n\nStretching his arms over his head, Ryan said, \"Well, I'm not kidding. I think it's time for us to go to bed.\"\n\nHe got up and pulled Dani along, heading to the bedroom where they slowly undressed each other. Dani sat on the bed as Ryan stood before her. \n\nDani was always astounded at how beautiful his body was. His large frame provided the perfect support for his long muscles. As she bared his skin she caressed his shoulders with the palms of her hands, sliding them down over his chest where she kissed him just above his nipple, savoring the warmth of his flesh.\n\nGliding down to his abdomen, she felt Ryan's intake of breath as she progressed with tiny kisses. \n\nSliding to her knees, she unzipped his pants, pulling them along with his briefs to the floor. She grasped his burgeoning penis in her hand to hold it out of the way while she explored the recesses of his belly button with her tongue. \n\nRyan's hands massaged her scalp as the tip of her tongue follow the light treasure trove of silky blond hair that surrounded his cock. His shaft hardened and swell as Dani licked around the base. \n\n\"Fuck, baby. Yeah...yeah....fuck, yeah...lick my balls, baby...lick 'em,\" Ryan groaned. \n\nBefore heeding his request, Dani squeezed his cock, licking her lips as she watched the spurt of pre-cum from the big slit. Ryan grunted and his hands in her hair gripped harder. Leaning forward, she took one of his balls into her mouth, then the other, sucking even as her tongue painted patterns on the spicy orbs. All of her senses were reduced to the taste, smell and feel of this man. With her eyes closed, she hummed softly as she continued to alternately nibble and soothe Ryan's ball sac until he pulled her head back by her hair.\n\n\"Look at me,\" he ordered in a hoarse whisper, \"I want to see your eyes. I want you to see me while you're giving me pleasure.\"\n\nDani opened her eyes, her lusty gaze watching Ryan's face contort with his arousal. The words and the tone of his voice elicited a flood of cream from Dani's throbbing pussy, covering her labia and inner thighs. She moaned around his hot sac as she reached down to finger her saturated pussy. \n\nSliding two fingers into her tunnel, Dani continued to suck and lick Ryan's scrotum, continued to nip with her lips, pulling on the skin as he held her head to his body.\n\n\"Dani, baby...l..... Ahhhh, shit; so good, baby.\" \n\nShifting her body, Dani licked up the long length of his cock in broad sweeping strokes, tickling under the rim of the head and then sliding her tongue back down. Again and again she followed that route until Ryan was dying for her to suck the head. \n\nBut Dani was in the mood to tease and kept her mouth away from the large weeping gland. She went back down to his balls as she stroked the shaft. She kissed and licked and sucked until Ryan was desperate. \n\n\"Please, baby... no more... no more; I...need...fuuuuuuck!\" he wailed, as she suddenly enclosed the crown of his cock in her hot mouth with a great sucking motion.\n\nThe top of his head felt like it had blown off as his balls contracted and his seed rushed up the thick shaft flooding her sweet mouth. \n\n\"Oh, fuck...oh, fuck, baby, swallow it. Swallow my cum. fuck yeaaaaah!\" Ryan shouted. \n\nDani swallowed as fast as she could as volley after volley of warm semen shot into her mouth, but it came too fast for her to catch it all as some oozed from the corners of her mouth to paint her chin.\n\nWhen the spurting stopped and Ryan's grip eased on her hair, Dani pulled off of his cock, scooping up the runaway cum from her chin and licking it off of her finger as he watched. \n\nSmiling up at him, she took his cock head back into her mouth, rimming it with her tongue and then pulling off to kiss the slit. \n\n\"Shit! That is so fucking hot,\" he growled. \n\nLifting her chin with his fingers, he ordered, \"Open your mouth, sweetheart.\"\n\nDani opened her mouth and Ryan grunted as he saw the faint residue of his ejaculate. Helping her to her feet, he kissed her deeply, his tongue foraging into the sweet cavern tasting his essence and the sweetness that was purely Dani. ",
        "\"I love you, baby, more than I ever thought I could love anyone outside of my family, but you are my world. You're all my dreams and hopes for the future. Fuck, sometimes I feel like a school boy with his first love, but I never want to lose this feeling. I never want to lose the intensity of this love.\"\n\nHe kissed her again, feather soft, breathing in her quivering sighs. Looking into his dark green eyes, Dani knew that this was the man destined to be hers. This was the beginning and end of her romantic dreams, her sexual birth. Ryan was the man of her heart and soul.\n\n\"I love you so much, Ryan, so very much. Sometimes, I'm overwhelmed with it and always amazed that you love me too. I never thought I would have someone like you in my life.\" \n\n\"Always, sweetheart, always,\" he promised.\n\nTaking her up in his strong arms, Ryan laid her on his bed, their bed, and made deliciously sweet love to her. \n\n* \n\nRyan awakened in the wee hours of the morning to the soft rustling of Dani's breath against his skin as she slept. She was stretched out on top of him, her face turned into his neck. His cock long since slipped from the comfort of her moist walls, a position it held when they fell asleep. \n\nHe smiled thinking about how sexually inexperience she'd been when he first met her. But that hadn't lasted long, they were just too hot for each other; not only that, they were connected. Like now, he could feel her love, almost like he could reach out and touch it.\n\nDani's body was attuned to his; he knew that on an elemental level. She gave him sexual satisfaction as no other woman had, but it was more than physical. Sensual love between them not only engaged his physical body, but the part of him that represented his spirit, his soul. It was this connection that pulled him and held him to her. \n\nAs he lost himself in thought, Ryan stroked Dani's warm sweet body. He slid his hand down to that awesome ass, over those sexy mounds and down to slide a finger into her moist pussy from the rear. Many times it only took the sight of her bottom to stoke his fires. Then with a stroke of his fingers, all of his senses were on board. \n\nHe'd always been an ass man, but damn, what an ass Dani had. That beautiful toffee colored skin covering perfect round globes. The plump firmness had just the right amount of jiggle and provided a soft cushion for his pubes when he fucked her from behind. This was too sexy to be called a derriere, it was an ass. \n\n\"Shit!\" he grunted when he felt the muscles in his belly ripple with his arousal. His dick was hardening and wanted attention. He continued to stroke the folds of Dani's pussy as she was slowly pulled from slumber by the tingling of her nether regions. \n\nRyan's hand slid to the top of her ass, and then he eased a finger into the heated valley, searching for her puckered anus. Slowly he stroked it with his finger, until Dani was fully awake, pushing back against his hand. \n\n\"Ryan,\" she moaned wanting more. \n\nRyan removed his finger and gave her butt a sharp swat, then grabbed both of her buttocks in his hands, squeezing, lifting and separating them, dragging a whimper from her throat. \n\n\"Tell me what you want, baby?\" he urged, humping, rubbing his throbbing cock against her mons. \"You want this big ol' thing, sweetheart? You want my cock in your sweet little pussy?\" \n\n\"Yesssss,\" Dani hissed. \n\n\"I want your cock. I want you in me,\" she whined. \n\n\"All right, sweetheart,\" he murmured. \n\n\"I always give you want you want, don't I, baby? Just sit up and eased down on this big boy.\"\n\nDani sat up and straddled Ryan's body.\n\nHe held his cock at the base while she eased the head into her throbbing pussy. Once she got the head in, she eased all the way down, slowly taking his entire length. Catching his breath, Ryan grunted as he felt her walls rub against the big vein riding the underside of his cock. \n\n\"Fuck!\" he shouted as she started to ride him in earnest, picking up speed as her desire swelled. Riding with desperation to her release, Dani pulled Ryan along with her. With her hands on his chest, she anchored and rode her man hard. Up and down she bounced, squeezing her muscles around his burning cock, rotating her hips, chanting his name in a mantra as the friction of their joining burned in her deep places.\n\n\"Ryaaaaan!\" she screamed as the walls of her pussy clinched and spasmed and her orgasm sparked and shimmered. Then, careening over the edge, she sent him hurling with her into the orbit of sexual bliss. As he grunted through his orgasm, Ryan's baby makers spilled in burst after burst of warm rushing cream. \n\nFor a time, there was only gasping and panting as they sought air to fill their over taxed lungs. Finally, slowly, they floated back to earth while he stroked Dani's back and whispered words of love.\n\nAs they luxuriated in the warmth of afterglow, Dani suddenly sat straight up with Ryan's cock still embedded in her. With an urgent gasped, she said,\n\n\"Oh, my god, I hope James didn't hear us.\"\n\nLaughing, Ryan said, \"It's a little late to think about that, besides, he's on the other side of the house.\n\n\"I don't know, Ryan,\" she said, still not convinced.\n\n\"We were pretty loud. I forgot he was even here.\" Dani said, looking behind her. She gulped when she saw that they'd forgotten to close the bedroom door. \n\n\"Damn! The door is open,\" she squeaked. Jumping off of his cock with a little popping sound, and a grunt from Ryan, Dani ran to close the door and lock it. \n\nStill unconcerned, Ryan said, \"Isn't that a little like closing the barn door after the cow has gotten out? He's a big boy, if he heard anything, I'm sure he realized what it was.\" \n\nRyan knew those words wouldn't please Dani, but he loved seeing her freak out sometimes. \n\nGlowering at him, she said, \"That's the point, Mr. Sinclair.\" \n\nComing back to the bed, she crawled in and cuddled up to him. Once she was settled he kissed the top of her head. \n\n\"I don't know how I could have forgotten to close the door,\" she sighed.\n\n\"We don't close the door when it's just us,\" Ryan said.\n\n\"This is the first time we've had a guest stay over since we've been together. It was an easy thing to forget. It's a big house, I doubt if he could hear anything, even if he were awake and his door was opened too.\" \n\n\"Yeah, you're right. I doubt that he left his door open. Why did you let me freak out like that?\" she pouted prettily.\n\n\"You have this thing about people hearing us have sex. It's the most natural thing in the world. Anyway, how can you blame me? You were off of my dick before I could say anything, leaving Mr. Happy feeling very unhappy,\" Ryan complained. \n\n\"Now that the little drama is over, think about how you're going to make it up to me, um, to him,\" he said with a sly grin.\n\n*\n\nThe next few days with James were enjoyable.\n\nJames was interested in the bar, so Ryan took him with him for the day. The time they spent together gave Dani the opportunity to work on her painting without feeling like she was taking time away from her brother. There was a long way to go, but it was definitely shaping up. She hadn't said anything to Ryan about the painting primarily because it was going to be gifted to him. \n\n* \n\nAll too soon, it was nearing the time for James to leave and go on to their parents' home in Jacksonville. Ryan invited Isaac and Crystal as well as several of his friends over for a barbecue to send him off. James elected to drive to Jacksonville, since it was only a three and a half hour trip. \n\nBy the time he left, Dani was through with her antibiotics and she felt almost as good as new. She made arrangements to go back to work the Monday after Thanksgiving, which was a week away. Although she was looking forward to getting back to her routine, she wasn't looking forward to all the work that they typically received this time of year. \n\nWith the holiday approaching, she had to make a decision about where she would celebrate it. After thrashing it out in her own mind, she came to the conclusion that there was no place she'd rather be than with Ryan. It really was an easy decision; it was telling her parents that gave her some pause. In the end, they were very understanding and satisfied with her promise that she and Ryan would come to Jacksonville for Christmas and spend a couple of days. \n\nThey would ring in the New Year with a quiet evening at home. * \n\nThe next few days were a whirlwind of activities. Although Dani wasn't going to cook Thanksgiving Dinner at home, she did volunteer to help Ryan's mother and sister cook the big meal. The only person not attending the festivities was Amber, Caleb's girlfriend. She was away on another overseas business trip.\n\nArmed with a shopping list, Dani and Haley headed for the supermarket. Even though it was yet several days before Thanksgiving, the supermarket's parking lot was nearly full at eight o'clock in the morning. Neither of them loved grocery shopping and at this time of year it was always a pain, but doing it together would make it less of a chore. \n\nWith their help, Helen was left free to do the decorations, which she loved. In fact, she tended to go all out for most of the holidays. \n\nHaley told Dani with a grin, \"Don't be surprise if you see some actual live Pilgrims among the decorations.\" \n\nDani thought that was a hoot since her mother was the same. Growing up, Thanksgiving was a great time in the Carter household with Dani's mother always mindful to include friends who didn't have family close by.\n\n* \n\nDani was rounding a corner heading to aisle seven when she caught sight of a man that looked familiar. She could only see him in a side view, but when he turned, she caught a full facial view and recoiled. She really thought she'd seen the last of this guy. \n\nThe guy was Keith Hall.\n\nDani met him through his mother who was a good friend of her parents. He came to Florida following the death of his father who raised him in California. With no other family around, Keith decided to see if he could reconnect with his mother.\n\nKeith was only in Tampa a couple of weeks when his mother confided to her friend, Michelle, that she thought Dani would be a good influence on her son. She admitted that she and Keith hadn't spent a lot of time together and she was finding it disconcerting trying to get to know her son as a grown man. \n\nWhen Dani's mother broached the subject, Dani thought he sounded liked a really nice guy and that it might be fun to go out with him. \n\nTheir first time out, a dinner date, went well. Keith was smart, articulate, engaging and good looking. He had a good sense of humor and liked many of the same things that she did. He told her that he was an only child and admitted that his had father spoiled him. They talked about some of their back history. \n\nHis mother, Rita, lived in LA when she got pregnant. She was young and without means to care for him without her parents' support. Her mother and father were appalled at what they called her loose morals and insisted that she give the baby up for adoption. But rather than send him to live with strangers, she'd given custody to Keith's father who, with the help of his mother, raised Keith. \n\nA year after Keith's birth, his mother and her family moved to Fresno, but Rita kept in touch, though he rarely saw her over the years. His Grandmother passed away when he was seventeen, leaving a big hole in his heart. \n\nKeith graduated high school and college then got a job with Sirias Technologies in San Diego. He made a good salary, but wasn't satisfied with his progress with regard to promotions. When his father died, it wasn't hard to leave it all behind.\n\n* \n\nOn their second date, they went to the movies. Keith not only liked movies, he was also keenly interested in the process of film making. He was eager to share his knowledge and found Dani an earnest listener. \n\nThey had a wonderful time and afterward went to a nearby bar where they spent the evening talking. Neither of them were heavy drinkers, but they enjoyed the atmosphere of the bar which had a live band. \n\nThey ended the date with a kiss on her doorstep. It was a long kiss that they both enjoyed it. Although no sparks went off for Dani, it was sweet. She liked him and that transferred through the kiss. Keith prolonged the kiss until Dani pressed his chest slightly and pulled back. With a peck on her cheek, he said goodnight and that he'd call her soon.\n\nDani enjoyed spending time with Keith as they continued to get to know each other. They went on a few more dates, including double dates with Dani's best friend Trina and her boyfriend, Quincy. \n\nAfter dating about a month, she noticed slight changes in Keith's demeanor. He started questioning her about what she did when they weren't together. He hadn't liked her being out having a good time with her friends. He also started pressing Dani to go further than just kissing and light petting, which made her uncomfortable. \n\nDani thought it was way too soon to be dropping her panties for anyone, even it she really wanted to have sex with them. Keith didn't arouse feelings in her to that extent and his change in attitude was worrisome. \n\nShe was honest with him and told him that she liked him very much, but she didn't think the relationship was going to go beyond friendship. She made it clear that he could date other people. He hadn't liked that, but said that he'd accept that if it was all she wanted.\n\nDani wasn't experienced and tended to take people at face value. She thought if she were honest with them, they'd be honest with her. What she hadn't known was that Keith didn't like the fact that she was calling the shots. In his mind, it was the man who set the tone of the relationship. \n\nDespite Dani's best efforts Keith became more and more possessive. First it was just little things. Sometimes he'd drop by the house unexpectedly. Dani was living at home at the time, but he seemed to always drop by when her parents were out. She hadn't liked him showing up like that and told him so. After that, he called and asked permission. If she said no, he didn't press the issue.\n\nDani still liked Keith, but there was something niggling in the back of her mind. She really thought Keith understood and didn't take his lapses seriously at first. Her parents liked Keith too. They thought he was a nice young man and tried to encourage the relationship, but it was starting to give Dani a funny feeling. But despite her misgivings she continued to date Keith willing to give him the benefit of the doubt, however the lapses continued. \n\nOn one particular occasion Dani was talking to a former classmate in the parking lot at a local hangout when Keith suddenly showed up and put his arm over her shoulders asking to be introduced to the guy. After the second time that happened, she began thinking of a way to end her association with him without hurting his feelings. He still was really a sweet guy most of the time. \n\nThe last straw was when Keith got in a snit during a game of flag football at the park. He thought she was paying too much attention to one particular guy. The guy had some great moves, which would have been hard not to appreciate. But Keith felt threatened because at one point the guy looked over and smiled at Dani. Dani hadn't returned the smile, but that didn't matter to Keith. \n\n\"So what, you like him now?\" Keith asked, clearly pissed.\n\nLooking at him as if he'd lost his mind, Dani asked, \"What in the world are you talking about?\"\n\n\"You know damn well what I'm talking about. You were practically drooling over that guy,\" he retorted.\n\n\"Look, I don't know what's gotten into you, but you don't own me. Further, I was not drooling over him. He has some amazing moves, excuse me if I like watching him rip the defense apart. Since when is that a crime?\" she asked in a low strained voice, equally pissed. \n\nCalming herself, she said, \"Why don't we just leave. I'm not going to have any fun after this.\"\n\nAfter giving her a long look, Keith headed back to the car without saying another word.\n\nAfter they got back to Dani's home, he tried apologizing, but it was too late. Dani knew she was avoiding the inevitable, had been for weeks. She should have believed him when he said his father spoiled him because he was acting like a spoiled child now. \n\nShe got out of the car and told Keith not to bother seeing her to the door. He apologized profusely, telling her that it wouldn't happen again. Dani accepted his apology, but told him that she didn't think it was a good idea for them to see each other. \n\nLightning quick, Keith got angry again and called her a bitch and a tease. He'd said no man would want her because she'd freeze his balls off. \n\nThat was it.\n\nDani let her temper get the best of her and said, \"What woman is going to want you, you spoiled ass daddy's boy?\" \n\nAfterward, she was shocked by her lack of control. After all, his father was dead. But she didn't take it back, she was that mad. She turned on her heels and went into the house, slamming the door shut and locking it. \n\nThat was the last time she saw Keith. \n\nA short time later, they heard from his mother that he'd gotten a job and relocated to Gainesville. She never told her parents or Crystal what ended the relationship; they just assumed that it was his job. After that, Dani was a little more cautious with men, until Ryan. \n\n* \n\nNow, here Keith was in Publix Supermarket a few days before Thanksgiving. She just hoped he wouldn't see her. \n\nDani turned away quickly bumping into Haley. \n\n\"Hey, what's the matter?\" Haley asked, seeing Dani's agitation.\n\nBefore Dani could answer, she heard, \"Hey, Dani.\" \n\nToo late.\n\nTurning, she put on the best plastic smile that she could muster and returned the greeting. \"Hi, Keith, it's been a while,\" she said as he approached.\n\n\"Yeah. I'm still with the job in Gainesville, but I'm here for some training. I'll be in town for a few weeks, maybe we can hook up sometime,\" he said.\n\nFeeling Haley move at her side, Dani said, \"I'm sorry, Haley, I forgot my manners. Haley, this is Keith Hall. We dated for a while a couple of years ago.\"\n\n\"Keith, this is my friend Haley Chase. She's also my boyfriend's sister,\" She said, wanting him to ditch any idea of their ever dating again. They ended on bad terms, but it didn't seem to have affected him. She hoped that meant he had gotten over the attitude problem because there was no chance of even a friendly cup of coffee between them. \n\n\"So, you're dating a white guy now, huh?\" he said, but immediately checked himself, his glance sliding to Haley. \n\n\"Sorry, I didn't mean any offense.\"\n\n\"None taken,\" Haley said, but she didn't like the guy, especially with the vibes she was getting from Dani. \n\n\"Well, we have a long list to get through, Keith. It was nice seeing you again. Give my regards to your mother,\" Dani said and pulled Haley away. \n\n\"I don't like him,\" Haley said when they were some distance from Keith.\n\n\"That makes two of us,\" Dani agreed. \n\nGiving Dani a little frown, Haley said, \"I mean, he seems nice and all of that, but it's just the way he looked at you, especially when you mentioned a boyfriend. He tried to hide it, but I saw it. He didn't like that at all.\" \n\nLooking directly at Dani she asked, \"What's the story with him? I know there's more.\"\n\nSighing Dani said, \"You're right, there is more, but let's just leave that for another time. I don't want him spoiling my holiday spirit. We'll talk later, ok? And please, don't say anything to Ryan about meeting him.\"\n\n\"All right, that's for you to tell him, if you feel the need,\" Haley agreed.\n\n\"Thanks. I will tell him, but after Thanksgiving.\"\n\n\"Ok, Dani. Onward we go,\" Haley said with a smile, hooking her arm through Dani's. \"Let's finish up and head over to my folks.\" ",
        "* \n\nThe Thanksgiving dinner at Ryan's parents' went off without a hitch. Everyone was in a great mood and the food was delicious. The house was warmly decorated with all the icons of Thanksgiving, but no live pilgrims. \n\nEarlier that morning, Dani put in a call to her parents. James and Crystal were having dinner with them, so she was able to wish them a happy Thanksgiving at the same time.\n\nHer parents invited the Millers with their brood of eight, as well as Mr. and Mrs. Thompson and The Reverend Green, who was a widower. Crystal, who was a great cook and Mrs. Thompson, helped with the food preparation. Isaac was spending the day with his girls at his parents' home.\n\nAfter dinner, Ryan and the other men watched one of the NFL games while the women cleaned up and packed up leftovers. The men did offer to help, although not with a lot of enthusiasm. The women shooed them out knowing that they would get in the way more than help.\n\nIt was after eleven p.m. when Ryan and Dani got home. After showering together, amid a lot of kissing and caressing, they got into bed. Ryan used the remote to dim the lights, creating a sensual ambiance in the room.\n\nAfter settling Dani under him, he held his upper weight on his forearms. Lowering his head, he softly kissed her, slipped his tongue between her lips, caressing her tongue with his.\n\nDani murmured, \"Ummmm,\" and spread her legs to accommodate his body. \n\nRubbing his leg with the inside of her foot, she arched her back. \n\nRyan smiled down at her and said, \"I've almost forgotten the time when you were my shy little Dani.\n\n\"As I recall, I was never really shy with you, except for that time in Lowes when we first met. I couldn't just make out with you on aisle 15 now, could I?\" she asked. \n\nBrushing her hair back from her forehead, he replied,\n\n\"I wouldn't have minded. Although you might well shudder to think what the folks at Lowes would have made of it. I can hear it now, 'Man down on aisle 15! Man down on aisle 15!'\n\n\"That would have been great,\" he sighed, \"and don't think I would have stopped. I would have been sliding into home plate long before the police arrived. The story would have ended up as headline news and I would have been the envy of men everywhere. \n\n\"Wanna go back to Lowes and make my dream come true?\" Ryan asked with a grin. \n\n\"There it is, his sexy dimple winking at me again,\" Dani thought. She wondered how something as simple as that could take her breath away. \n\n\"No can do, sweetheart. I'm already trying to beat the women off with an ugly stick. If a picture of little Ryan showed up in the papers, I'd have to put your sexy ass in something like a witness protection program,\" she declared.\n\nKissing the tip of her nose, he said huskily, \"You'd have to come with me, baby. There isn't a chance in hell that I'm going anywhere without you. Not now, not ever.\" \n\nDani rubbed her nose against his and kissed him while stroking his hard buttocks.\n\n\"Ummm, I like that. I like when you get all possessive. I never thought it was such a desirable quality before,\" she said ending on a sigh.\n\nStroking her cheek, he reasoned, \"There are different kinds of possessiveness and reasons for it. You're probably thinking about the kind that's about control and jealousy. I am totally possessive in the sense that I'm territorial. You're mine; no one messes with what is mine, man or woman.\" \n\n\"Then there are men who are dominating too. I'm dominating by nature. I'm a big guy and I'm confident. I'm use to being a leader and use to having my way. But that doesn't mean I dominate women in the sense of making them fearful or taking away their rights as individuals.\"\n\n\"I always feel safe and protected with you, Ryan. I know men can be controlling sometimes, but you've never been that way with me,\" Dani asserted. \n\n\"I know some men who are like that,\" he said. \"There is nothing good in that for the women or them; and there's certainly nothing that would benefit the relationship. All that's about is power. Power over the woman does not equal love, anyone who says different, is a liar.\" \n\n\"As for the jealous part, that has all kinds of troublesome connotations. Jealousy without reason is just insecurity. I'm not saying I couldn't ever be jealous, but I don't think I would be without reason and I'm damn sure you are never going to give me reason. You're crazy about me,\" he said with a growl. \n\n\"Oh my, you're so humble, who knew?\" She said with a saucy grin. \n\n\"Well, how am I supposed to be humble when I have a sexy woman who loves me as much as you do? Knowing that I'm your man, makes me feel ten feet tall, baby. Besides that, it makes my dick hard,\" he said before rolling her on top of him.\n\nSitting astride Ryan, Dani blinked back the tears stinging the back of her eyes. She looked down at her gorgeous man and her heart swelled. She had no idea what she'd ever done in her life to deserve this man, but she was thankful every day for the blessing. \n\nShe smiled and reached behind her for Ryan's already hard cock, stroking the pre-cum up and down the hefty shaft. Then she rose to her knees as she directed his manhood home. \n\nFor long hours into the night, Ryan and Dani engaged in the dance of lovers until both were sated, until they were renewed by their sensual vow of love. "
    ],
    "authorname": "MissPrimrose222",
    "tags": [
        "interracial romance",
        "ex boyfriend",
        "drama",
        "romance novella",
        "interracial drama"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/ryan-ch-07"
}
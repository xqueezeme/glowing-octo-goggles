{
    "title": "The Chronicles: Three Sisters 07",
    "pages": [
        "THREE SISTERS Chapter 7\n\nFor many months, I thought myself happy. Maybe it was simply that I was busy: building new houses, stockpiling wood for the winter, laying in food - all this while studying the defences of Prospal Hill, as I tried to ascertain if it was as well hidden as most of its inhabitants believed it to be.\n\nBut as winter came on, I discovered that I had grown moody, and irritable. Guenna looked at me, mystified, and slightly hurt, when I scolded her for no good reason. Sulcen said nothing, but she avoided eye contact even more than usual.\n\nIt wasn't her fault, either - though she was the cause.\n\nAfter several months, I still hadn't achieved a breakthrough with my wife. She lay with me, whenever I wished it - which was quite frequently. I admit that. She would listen, attentively, if I told her a story, or described anything in great detail. But her answers to my innocent queries were evasive, or limited to a single word.\n\nI stayed well away from any mention of her first husband, or the life that she had led, back then. Nor did I ask her about what had happened between them, that drove her to kill him. Yet I wondered if I was unknowingly reminded her of what she'd been through.\n\nStill, she avoided looking at me, and rarely initiated a conversation, unless it was about some trivial matter, which was quickly resolved. I was growing angry. It wasn't her fault, but more and more I suspected that she was unhappy.\n\nI knew that I had a problem when I snapped at Hedyn while he was helping me build a table for our house.\n\nThe big man didn't respond. He simply laid down his tools, and stood up.\n\n- \"We'll finish this tomorrow.\" he said.\n\nThat was when I realized that I was losing my self-control.\n\n- \"You're an idiot.\" said Guen Nadesti, when I told her about it.\n\n- \"That's helpful.\" I said.\n\n- \"For a reasonably bright man, you're remarkably stupid, Veran.\"\n\n- \"Oh?\"\n\n- \"You're punishing yourself.\" said Mother Nadesti.\n\n- \"Am I, now?\" I said, with a touch of sarcasm.\n\n- \"You blame yourself for Meonwe's death. And for your son's.\" she said.\n\nI opened my mouth to answer, before realizing that I had nothing to say. She was right.\n\n\"It's not all your fault.\" she said. \"Lanko was reckless, and a fool. Dengel was stubborn. And if you should have seen into Bacho's heart a long time ago ... well, I didn't see it, either.\"\n\n\"And you had nothing to do with what happened to Sulcen.\"\n\nI nodded. I knew that.\n\n- \"It wasn't your fault, Veran.\" said my wife's mother.\n\n- \"But ... I can't reach her, Guen.\" There it was. I admitted my failure - one more thing to feel guilty about.\n\n- \"You already have.\" she said, softly. \"She agreed to marry you. Unless I'm completely mistaken, you've been sleeping together - quite regularly. And she hasn't killed you yet.\"\n\n- \"That's not funny.\"\n\n- \"It wasn't meant to be. Veran - you think you know what's she's been through. You don't. Whatever it was, she can't even speak of it. Don't wear yourself out trying to guess.\"\n\n\"Be kind to her. Be patient. You've already made more progress with her than I have. In less time, as well. Just be patient.\"\n\nMy girls were wonderful with Sulcen. Yevna brought her small game, and helped to prepare it. Guenna kept Sulcen company, and hovered nearby, ready to help with any task. Tanguiste put into practice all of the lessons she had learned in Moruith's house. My daughters were almost too helpful.\n\nIt was Tanguiste who saw it first.\n\n- \"We have to give her more space.\" she said. \"There doesn't have to be someone with her at every moment. She probably wants to be alone from time to time.\"\n\n- \"I don't want her to be lonely.\" said Guenna.\n\n- \"That's your greatest fear. Sulcen may not see it that way.\" said Tanguiste.\n\nSo I asked my wife.\n\n- \"Are the girls bothering you too much? Would you prefer to be left alone, sometimes?\"\n\nSulcen thought carefully before she answered.\n\n- \"I do enjoy quiet ... and solitude. But your daughters are very kind. I wouldn't want them to think me ... ungrateful.\"\n\nI repeated what she had said, word for word. The girls weren't put out at all. From then on, Guenna limited herself to one - or two - questions a day. And all of three of them got into the habit of hugging Sulcen before they went out - and then leaving her alone, in peace, for longer stretches of time.\n\nThat wasn't the only help they gave me. Tanguiste had advice to offer.\n\n- \"Tell her what happened to us, Papa. Tell her about Mother, and Iarn. Explain it to her. Your eye, and Yevna's teeth. She deserves to know, don't you think?\"\n\nI had been resisting the urge to tell that tale. Somehow, I feared that Sulcen might take it as an attempt on my part to earn her favour. 'See', I would be saying, 'we've suffered, too. We're the same as you.'\n\nBut I knew, now, that nothing could be further from the truth. My girls and I had shared our night of horror. We had each other to lean on, to share our pain. And our horrific experience had lasted for a single night, before we exacted a measure of revenge and made our escape.\n\nSulcen had suffered alone - for years.\n\nShe'd had no one to turn to, no one to confide in. And when she finally found the courage to defend herself - her husband's community turned her out. They knew what he'd done, and that she was the victim, but they sent her back to her mother anyway.\n\nThat didn't mean, though, that I should keep our experience from her. She could make of it whatever she would. Tanguiste was probably right, too, to suggest that she would never tell me her story first.\n\nThe three girls went to spend an evening with Moruith and Inisian, leaving me alone with my bride. Sulcen understood that I was up to something.\n\n- \"I want to tell you a story.\" I said. \"At first ... I was afraid to bring it up. It's not a secret, exactly. There are others who know - including your mother. But I want you to hear the true version. I want you to understand my daughters, and to know how Yevna lost her teeth.\"\n\nSulcen nodded, and sat down.\n\nI told her everything, from the theft of Eguen's sheep, to our flight from Moruith's house. I didn't spare her - or myself - a single detail. It wasn't easy to speak of Meonwe - of how much I loved her - to my new wife.\n\nIt was ... an incredible experience - for me. Somehow, I think that Tanguiste knew that it would be. There was a humbling moment: my adolescent daughter was wiser than I was.\n\nMy wife listened to my lengthy tale without a word. When I finally fell silent, she let me sit quietly for a time. Then she stood, and came around to stand beside me. She slowly wrapped her arms around me, and cradled my head against the swell of her breasts.\n\nMy arms went around her waist, and I closed my eyes. Later, she helped me stand, and led me to our bed, where she held me tight, long into the night.\n\n***\n\nIt was a week later, if I remember correctly, that Sulcen spoke to me - before I had said anything myself.\n\n- \"When did you first think of me as something other than a character from a bylina?\" she said.\n\nI was stunned. I wanted to ask her to repeat what she'd said - but I heard her clearly - every word.\n\n\"When you first met me, did you see me as an object of curiosity - or pity?\" she added.\n\n- \"Neither.\" I said. \"I remember the first time I saw you, sitting next to your mother. Believe me - I was shocked to see Guen Nadesti. After all that had passed between our families ...\"\n\n\"But I was distracted by ... you. I had no idea who you were. I readily admit that I hadn't seen many attractive females for quite a few years. Still, I asked myself: 'Who is that lovely woman'?\"\n\n- \"Is that so?\" said Sulcen, with a little roll of her eyes.\n\n- \"I didn't find out who you were until Hedyn told me, later.\"\n\nShe may have had trouble believing me, but I suspect that she liked my answer.\n\n***\n\nMy girls continued to grow, and to change, on Prospal Hill. As I hoped, they made friends, and became part of a community again.\n\nYevna changed the least. She remained an avid forester, roaming the woods, hunting and scouting. In those skills, she had surpassed Inisian, by his own admission. She frequently left the hill altogether, which made me very nervous.\n\n- \"I worry about you, when you do that.\" I told her.\n\n- \"I'm sorry, Papa.\" she said.\n\n- \"What would you do if I forbade you to leave the hill?\" I asked.\n\n- \"I would feel very sad.\"\n\n- \"But you'd do it anyway.\"\n\nYevna put her arm around my shoulders.\n\n- \"I'm very careful, Father. I remember everything that you and Inisian taught me. I cover my tracks, and I move very slowly.\"\n\nI had to be satisfied with that. It was some consolation to me that Inisian still accompanied her from time to time.\n\n- \"She's uncanny.\" he told me. \"She barely makes a sound. If I gave her a head start, I doubt that I could find her.\"\n\n- \"You're not just saying that?\" I asked.\n\nInisian shook his head. \"You don't understand, Veran. She's a wood-sprite. It's natural, for her. I have to think about what I'm doing - she doesn't. To tell the truth, I'm a little in awe of her.\"\n\nNo one on the Hill had any complaint, because Yevna became a skilled hunter and trapper. She shared her prizes with everyone.\n\nPeople still found her unusual - there weren't very many women who ran the woods. And then there was the striking gap where her front teeth should have been. But they were certainly grateful when she provided them with fresh meat.\n\n***\n\nTanguiste didn't grow up to resemble her mother exactly. She had the same bright hazel eyes, the same pale, flawless skin. But her face was a little narrower than Meonwe's. She was also a fair bit shorter.\n\nShe wouldn't be as great a beauty, but Tanguiste was very pretty. Maybe it was those small imperfections that endeared her to people. Because for some reason, everyone on the Hill liked her.\n\nEven Seva, who was snarky and difficult at the best of times, couldn't find a bad word to say about her.\n\nSomehow, Tanguiste found time to visit Moruith almost every day, and spend time with her. Inisian's mother had begun to age rapidly, and she was very glad of the company, while her son hunted or watched the borders of our little hamlet.\n\nTan also managed to become friends with virtually everyone. They came to her for advice, or asked her for help - regardless of the nature of the task. She had unerring instincts: somehow, Tanguiste always knew what to do.\n\n- \"Are you serious?\" said Hedyn, when I remarked that I didn't understand my middle daughter.\n\n- \"What do you mean?\"\n\n- \"Veran - she's lovely. And kind. And good. There's not a man on the hill that's not completely in love with her. 'Cept you, 'cause you're her father. And 'cause you're blind.\" he said. \"Honestly! I'm married, and I'm still a little in love with her.\"\n\nI resolved to watch my daughter a little more closely. Somehow, I suspected that she would be the first of my brood to marry.\n\n***\n\nGuenna was the least fortunate of my girls. She ended up resembling me.\n\nWhile Yevna roamed, and Tanguiste helped everyone on the Hill, Guenna followed me about. She was at my heels, wherever I went. I couldn't complain too much, because I was never in danger.\n\nWhen I sent her away, Guenna went to keep Sulcen company. On occasion, she was able to get Sulcen to answer questions. But when Tanguiste convinced her that my new wife liked to be alone, sometimes, Guenna was quick to take the hint.\n\nShe took up archery.\n\nThe results weren't particularly impressive. She did ask me for help, and with a few tips, she was able to improve her power, and especially her accuracy.\n\n***\n\nI was mildly surprised to find that I got along with most everyone on the Hill. I thought they might hate me for what had happened to the Nadestis, or that they might resent me for bringing Bacho's men to their doorstep.\n\nBut most of them saw me fight against the boatmen, and knew by now that I was committed to ensuring their safety. The fact that my daughters came with me, and soon won over virtually everyone on Prospal didn't hurt.\n\nVingoldas and I found the two best vantage points over the river, and stationed scouts there - children, or young women, for the most part. We didn't have enough people to place them in pairs, since we needed two more watching the approaches through the forest, to the south.\n\nHow to keep them awake, and alert? These weren't trained warriors, or experienced hunters. How could we impress on them the need to remain vigilant? It was one thing to preach at them - but when they spent day after day watching the river, or the trees, it was natural for their attention to wander.\n\nIt was Guenna who came up with a partial solution.\n\n- \"What if you designate two of the children as 'sneakers'? Treat it as a game.\" she said.\n\n- \"Sneakers?\" said Vingoldas.\n\n- \"Have them try to sneak up on the watchers. If they can touch them, before they're discovered ... you can reward them. Or you can punish the watchers who fail to catch the sneakers - if you see what I mean.\"\n\n- \"Guenna - that's brilliant.\" I said.\n\nIt truly was. A person watching for enemies would remain alert, knowing that one of the children might be trying to sneak up on them. The youngsters would also learn to move silently, and to use cover.\n\nYou could argue that our scouts wouldn't be paying attention to the real threat - the chance that enemies would find a way up the hill. But that wasn't our greatest problem. Boredom and fatigue were more dangerous.\n\n- \"That is a good idea.\" said Vingoldas. He looked at Guenna with new respect. \"If we put you in charge of the ... 'sneakers', could you organize it?\"\n\nGuenna blushed. \"I can try.\"\n\nWe tried to find flaws with her idea, but the positive aspects far outweighed the drawbacks. Vingoldas made sure that everyone knew whose idea it had been. Guenna walked a bit taller from then on.\n\n- \"Thank you.\" I said to him.\n\n- \"For?\"\n\n- \"Giving my daughter the credit. She appreciates it.\"\n\n- \"She deserves it.\" he said. \"While we're on the subject ... thank you, too.\"\n\n- \"For?\"\n\nVingoldas looked me in the eye. \"For the way you deal with me.\" he said.\n\n- \"I don't understand.\" I said. That was simple truth - I didn't know what he meant.\n\n- \"You treat like me an equal, Veran.\" he said. \"You don't give me orders. You don't talk down to me. And you always ask my opinion.\"\n\nI was confused. \"Why wouldn't I?\"\n\nVingoldas looked at me as if I had lost my mind.\n\n- \"You're Hammerfist. One-Eye. My only claim to fame is running away from the fight where the Nadesti brothers died.\"\n\n- \"Ah.\" I understood, a bit. \"You don't understand how I see it, Vingoldas. You're the man who kept this place safe, for years, before we arrived. You shouldered all of the responsibility, did everything necessary by yourself, or with little help.\"\n\n\"I didn't come here to replace you - to take your place. I'm here to assist you.\"\n\n- \"I think you're sincere, Veran - and for that as well, I thank you.\" he said. \"But you're the leader here. Inisian is your man, however much independence you give him. And Hedyn still loves you. You only have to snap your fingers, and he'd come running.\"\n\n- \"He admires you, too.\" I said. \"And Weyl and Seva look to you, first. I'm not trying to wean them away from you.\"\n\n- \"I believe you.\" he said, softly.\n\n- \"Then there's no reason why we can't help each other. Co-leaders, if you will.\"\n\n- \"Until we face a crisis.\" he said. \"Then, we'll need a single leader.\"\n\n- \"Are you sure? We've worked well together, up till now.\" I said.\n\nVingoldas nodded. \"True enough. But if there's a need for rapid decisions, I'll defer to you.\"\n\n- \"We'll see.\" I said.\n\n***\n\nOnce, in the spring, eight warriors searched the southern edge of the Hill. They didn't find a way up the slope.\n\nThey came back in the summer. They were more determined, too.\n\nIt just so happened that Tanguiste was on watch that day. She decided - correctly - that it was more important to let us know what was going on, than to remain at her post.\n\nVingoldas and I answered her urgent summons right away. Weyl arrived next, with his sister, Seva.\n\n- \"Hedyn's on his way.\" he said.\n\n- \"Inisian? Yevna?\" asked Vingoldas.\n\n- \"I don't know.\"\n\nVingoldas and I watched, from a concealed position - like a hunter's blind. We could see the men below, but we remained completely hidden from them.\n\nThat's when I caught sight of him. Bacho's son: Kestutis.\n\nKestutis was bare-chested. His long blonde hair, wet with sweat, stuck to his shoulders. His beard was long enough, now, to braid.\n\nMy fingers twitched. The urge to kill him was so powerful, I could taste it in the back of my throat. It was a good thing that I didn't have a bow; I'm not sure that I could have resisted the temptation to put an arrow in him.\n\nBut even had I hit him - it would have meant the death of everyone on the Hill. There were eleven men down below, and there was no possible way that we could kill all of them. If a single man escaped, Bacho would return with twice as many killers, to hunt us down.\n\nI could only watch, for now.\n\nThey had brought a rope.\n\nEleven men, and a rope. This was dangerous. Kestutis and another brawny fellow took turns climbing the slope. They went only ten to twelve feet, and then wrapped their rope around the trunk of a tree. Then the next man took his place, and repeated the procedure.\n\n- \"Shit!\" hissed Vingoldas.\n\n- \"They won't make it to the top.\" I whispered. \"Rope's too short.\"\n\n- \"Still -\"\n\nThe rope snapped when Kestutis tried to pull his way forward. He slipped, and slid back down the slope, until he slammed into a tree trunk. There was considerable swearing down below.\n\nVingoldas and I sighed in unison.\n\nWe spent the remainder of that day - and the next - watching as Bacho's son and his men tried to scale the steep side of Prospal hill. The fact that they didn't come close to succeeding was reassuring. But their persistence was troubling.\n\nOn the morning of the third day, they gave up, and moved on.\n\nYevna and Inisian had been hunting. When they returned, and she heard that Kestutis had been nearby, Yevna glared at me.\n\n- \"Don't blame me.\" I said. \"We couldn't find you.\"\n\nA few minutes later, I turned around to ask her a question. Yevna was gone.\n\n- \"Where is she?\" I asked Inisian.\n\n- \"I don't know.\" he said. \"She didn't say a word to me.\"\n\n- \"She's going after Kestutis.\" said Guenna.\n\nDamnation! It was just the sort of the thing Yevna might do. Would do. She had sworn an oath to kill Kestutis. There was no use searching for her - we didn't know which way Kestutis had gone.\n\nI spent a horrible week - six days, to be exact. Each night, I worried that Yevna had risked too much, that she had been killed - or worse, captured. Sulcen understood my tossing and turning, my inability to sleep. She wrapped her arms around me, and tried to share my fears and my worries.\n\nOn the seventh day, Yevna was sleeping in the bed she shared with Tanguiste and Guenna when I woke up. Her sisters had not disturbed her. They were wide awake, sitting at our table.\n\nI was not so nice. I grabbed Yevna by the shoulder, and shook her.\n\n- \"Where were you?\" I demanded. \"What were you thinking?\"\n\nShe snapped awake, and her hand shot out, like lightning, to seize my arm. Her eyes met mine. For a brief moment, I didn't recognize her.\n\n- \"I followed them.\" she said.\n\n- \"What?\"\n\n- \"They tried the forest to the west, but they couldn't get through. Then they reached the marsh, and they tried to cross it. Finally, they gave up. But they worked their way north-east, and found the river.\"\n\n- \"Yevna.\" I said. \"I was afraid ... that you'd try to kill him.\"",
        "Yevna smiled at me, showing me the huge gap between her front teeth.\n\n- \"I will kill him, Papa.\" she said. \"But I don't intend to die trying.\"\n\n***\n\nGuen Nadesti called a meeting, a week later.\n\nVingoldas was there, with Weyl and his sister Seva. Hedyn, of course ... and Inisian. I was invited, with all three of my daughters. Yevna was our best scout and hunter, and Tanguiste was ... herself. Guenna had come up with the idea to keep our watchers alert. I wasn't sure, though, if she was there for her own merits, or because of her father and sisters.\n\nMy wife was also present.\n\n- \"How serious is the threat?\" asked Mother Nadesti.\n\nVingoldas looked to me, but it was Yevna who answered.\n\n- \"Serious.\" she said. \"They suspect that there's something on the Hill.\" She described the days she had spent following Kestutis and his band.\n\n- \"They sound determined.\" said Hedyn.\n\n- \"But they can't find a way up.\" said Seva.\n\n- \"The boatmen did.\" said Yevna. That was another hint, for me, that my eldest and the redhead didn't particularly like each other.\n\n- \"How do we defend ourselves against Bacho?\" said Guen Nadesti. \"That's what I called you here to discuss.\"\n\nThis time it was me who looked at Vingoldas. I gave him the slightest of nods.\n\n- \"Mother Nadesti.\" he said. \"One day, they'll find one of the paths. It won't be easy, but they'll find a way to climb the Hill.\"\n\n- \"Can you stop them?\" she asked.\n\n- \"Yes. I think so.\" said Vingoldas. \"But then they'll know - for sure - that we're here.\"\n\n- \"I see.\"\n\nMother Nadesti looked at each of us in turn, like a shepherd weighing her flock.\n\n- \"What should we do?' she asked. The old woman was clever: she didn't look directly at me, or at Vingoldas. That way, no one was specifically invited to speak first.\n\nI left the opening for Vingoldas. He left it for me. While we both waited, it was the youngest person in the room who spoke.\n\n- \"We need more information.\" said Guenna.\n\nGuen Nadesti gave my youngest daughter a long look.\n\n- \"it's true.\" she said. \"We don't know what's going on, south of the lake.\"\n\n- \"Or how many men Bacho has.\" said Vingoldas. \"I, for one, would like to know.\"\n\n- \"I agree.\" I said.\n\n- \"So ... someone has to go, and talk to people who would know?\" said the old woman.\n\nI looked around the room. It couldn't be me, for obvious reasons. Vingoldas or Hedyn might also be recognized. And there was no way that I would let Yevna go anywhere near Kestutis, alone and unprotected.\n\nIt couldn't be a female. That much was certain. Not one of my daughters. Not Seva. My glance fell on Weyl, her brother. A likeable lad, but ... not the sharpest of blades. He had his ... limitations.\n\n- \"I'll go.\" said Inisian.\n\nHe was looking directly at me when he said it. His eyes shifted to Yevna, and then quickly back to me.\n\nIt took me only a moment to recognize facts: he was the best choice, by far.\n\n- \"I trust Inisian.\" I said. No one among Bacho's people would know him. He was a complete stranger to everyone south of the lake. He was more resourceful than Weyl ... and more expendable than my daughters.\n\n- \"As do I.\" said Vingoldas, settling the matter.\n\n- \"Then he shall go.\" said Mother Nadesti. \"Thank you, Inisian.\"\n\n***\n\nMoruith was appalled - and terrified - by her son's decision. She tried to persuade him to wait until next spring. No doubt she would have spent the winter trying to talk him out of it.\n\nInisian didn't waver. Tanguiste stepped in, and talked to his mother. She probably reassured Moruith that we would look after her, no matter what. What else she said, I didn't know.\n\nI kept thinking of Inisian as a lad; he wasn't a boy anymore, though. He was a man, and a warrior, who had stood his ground. That didn't stop me from worrying about him once he'd gone. I didn't sleep well at all, imagining what could - or what would happen to him if they discovered who he really was.\n\n- \"You can't change it, Father.\" said my middle daughter.\n\n- \"Thank you, Mother Tanguiste.\"\n\n- \"Just trying to help.\" she said.\n\nWinter came early, and it came hard. It was bitterly cold - so much so that part of the river iced over. The water bucket inside the house froze solid. We slept as a family, all five of us huddling together to share our warmth. There was a fire burning all day long.\n\nWe had Moruith move in with us. There was no point trying to heat two houses. As it was, the girls and I moved and stacked mountains of firewood, for ourselves, and for Mother Nadesti, who was sharing her house with two other families.\n\nThen we got a heavy snowfall, to the point where we could barely get out the door. It was too deep to move through, which ruled out hunting or trapping anywhere off the Hill. Anyone who went down the slope would leave easily spotted tracks. The chances that someone from outside would be wandering about near Prospal might be minimal, but it was a risk we couldn't afford.\n\nTwo of the older folk passed away that winter. It was sad, but that was the way of things.\n\nThe spring couldn't come soon enough.\n\n***\n\nAs soon as the snows began to melt, Yevna began to roam. She was hunting, she said, and we did need the meat. But I knew that she was also searching for sign of Inisian.\n\n- \"That's all we need.\" I said to her. \"You leave a single footprint on wet earth - one! - and they could find us.\"\n\n- \"I know what I'm doing!\" she snarled back at me.\n\n- \"You'd better!\" I snapped.\n\nAs Yevna stormed off, her sister came and put her hand on my shoulder.\n\n- \"She worries about him.\" said Tanguiste.\n\n- \"We all do.\"\n\n- \"She worries more.\"\n\n- \"What does that mean?\" I said. Even as I turned to look at my daughter, I suspected that I knew the answer. \"They're plight trothed?\"\n\nTanguiste smiled. \"You didn't hear it from me.\" she said. \"Seriously, though - you didn't know?\"\n\nI should have known. By the time Yevna was old enough to begin thinking seriously of boys, Inisian was the only unattached male for leagues around. He was a few years older than her, reasonably handsome ... and kind to her.\n\nThey had spent years running the woods together. He had taught her quite a bit, before she began to surpass him in woodcraft and hunting skill. Inisian never showed, by word or deed, that he was unhappy about this. He had his own brand of quiet confidence.\n\nInisian had lived for years with only his parents and older brother for company. The nearest girl his own age was Svijo's sister. It was natural enough, I suppose, that he and Yevna had formed an attachment.\n\n\"You won't object, will you?\" asked Tanguiste.\n\n- \"No - 'course not. I told you three that you could choose your own husbands. That was a promise.\" I said.\n\n\"Besides, Inisian is a fine young man. And I know he'll be kind to Yevna.\"\n\nHe would make a fine husband, and I would be proud to call him my son. Assuming, of course, that Moruith's son was still alive.\n\n*****\n\n<hr >\n\n Bylina: a poem, or tale, told orally. Usually they were loosely based on historical fact - although quite embellished.\n\n \n"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "combat",
        "dark ages",
        "fantasy",
        "swords",
        "women warriors"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/the-chronicles-three-sisters-07"
}
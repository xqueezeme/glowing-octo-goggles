{
    "title": "Just a Little Magic Ch. 16",
    "pages": [
        "I knocked on the door. I'd never been so nervous in my entire life. It felt like I was rolling the dice for... my entire life.\n\nShe could see me through the peephole, if she wanted to. She had to know it was me. She hadn't sent a message telling me not to come, but she could always have changed her mind at the last minute. I'd specifically given her that option.\n\nGet a grip, Pete, I told myself. She wouldn't do that. Any second now, she'll open the door...\n\nAnd then she did. I wasn't prepared. There she was, in the flesh. I just stood and gaped at her. Sophie just looked so... lovely. She looked exactly as I expected her to, and I still wasn't ready.\n\n\"Hey.\" she said, softly.\n\n\"Hey.\" I got out. One-syllable words - I could manage those.\n\nShe surprised me by stepping forward, and wrapping her arms around me. She rested her head on my shoulder for a moment.\n\n\"I'm so glad you're here.\" she said.\n\nThen she stepped back.\n\n\"You didn't bring an overnight bag?\"\n\n\"Umm, no. I got a motel room.\" I didn't want to appear presumptuous. In fact, I hadn't even been 100% sure that she was going to open the door.\n\n\"That was a waste. You know you can stay here.\"\n\n\"Oh. Thanks.\"\n\n\"After all, we have a lot to talk about, don't you think?\" She held the door open a little wider. \"You want to come in?\"\n\nI followed her inside. Her modest apartment looked the same - and yet everything was different. I took a deep breath, trying to steady my nerves.\n\n\"Have a seat.\" she said. \"Can I offer you a beer?\"\n\n\"Yes, please.\"\n\n\"I have a bottle of Cabernet Franc open, too, if you prefer.\"\n\n\"Beer is good.\"\n\nShe poured me a beer, filled her own glass, and brought the drinks over the coffee table, while I concentrated on breathing. I'd planned a hundred things to say to her. I'd rehearsed them in my mind for weeks, and then re-hashed them all on the drive to Montreal.\n\nSophie presented me with a nice imported beer (Ukrainian), and then surprised me again, by sitting down next to me on the couch.\n\nThere it was - the opening I needed. All I had to do was tell her how sorry I was, how desperately guilty I felt for everything that had happened... for all that I'd done.\n\n\"I'll start.\" she said. \"If you don't mind.\"\n\n\"Oh. I mean, no - that's fine.\"\n\nSophie sat close enough that she could reach over and take my hand between both of hers. She looked me in the eye - which meant that I looked at her eyes. Were they a little red? Had she been crying?\n\n\"Listen to me - carefully.\" she said. \"I don't want you to tell me that you're sorry, or that you feel responsible for everything...\"\n\nJust like that, the carefully constructed Jenga tower of my prepared speech collapsed in spectacular ruin.\n\n\"You... don't?\"\n\nShe shook her head. \"We spent months together, on that... Apology Tour - for lack of a better expression. You told me that you were sorry, Pete: almost every day. Several times a day. I got it: you were feeling guilty. You blamed yourself for everything.\"\n\nI believe that I've gone on at length about how lovely Sophie is: her long brown hair, and grey-blue eyes, her high, arched eyebrows... her nose, her lips, and those fantastic dimples that give her face so much character.\n\nShe wasn't smiling. But what I saw in her face at that moment was something that I wasn't sure I deserved: compassion.\n\n\"I heard you.\" she said. \"I understood then, and I understand even better now. You were punishing yourself.\"\n\nThat was true. But had I punished myself enough? Would I ever be able to look myself in the mirror again?\n\n\"I'm going to ask you something very important, Pete.\"\n\n\"I've forgiven you. Can you forgive yourself?\"\n\nI can't tell you why, but I sat there mute - completely bereft of the power of speech. It wasn't that I didn't know what to say - I just couldn't think at all.\n\nDon't ask me how it happened, but my eyes started to tear up. I wasn't even aware of it until a teardrop ran down my cheek.\n\n\"Oh, Sweetie -\" Sophie shifted closer, and her arm went around me. She kissed my lips, then my cheek... and she drank my tear.\n\nNo, I didn't completely break down. I did hold on to her - it just felt so damned good, especially after so long.\n\nWe sat together, on her couch, our arms around each other. She was comforting me. I was just holding on.\n\n* * * * *\n\n\"Let's go get something to eat.\" she said. \"Sorry - I wasn't in the mood to cook.\"\n\n\"You didn't have to.\"\n\n\"To be honest, I wasn't sure that you were going to show up.\"\n\n\"What?\" I said. \"Of course I was.\"\n\n\"I don't know. I was afraid that you'd be overcome by guilt, or something. Obviously, I'm really glad that you did make it.\"\n\n\"I had to come.\"\n\n\"Yes, you did.\" she said. \"You okay with Shawarmas?\"\n\n\"Sure.\" Truth be told, it was an excellent choice.\n\nWe stood on the sidewalk, and ate them. They were so good, I wished that I'd ordered two right off the bat.\n\n\"You want another?\" said Sophie, with a grin.\n\n\"Are you reading my mind, now?\" I asked. Then I immediately felt guilty again, for all of the times I'd read her mind. I hadn't done it to take advantage of her, really... had I? I just wanted her to like me, and...\n\nAnd I was a total dirtbag.\n\n\"Nah.\" she said. \"I just saw you looking back at the shop with... what is that expression - longing? Whatever it is - I want another one, too.\"\n\nWe carried our second shawarmas back to Sophie's apartment. She took my hand as we walked. My eyes began to tear up again.\n\nSophie couldn't look at me either.\n\n\"I love you, Pete.\" she said.\n\nShe spoke so softly, I barely heard her. But I wasn't about to ask her to repeat it. All I could do was squeeze her hand more tightly.\n\nBack in her apartment, Sophie unwrapped our shawarmas, and put them on plates. She got me another beer, and poured herself another glass of wine.\n\nShe had been crying. Her eyes were red-rimmed, and her nose was running. It was red, too. She sniffled, and wiped.\n\n\"I still love you.\" she said. \"You're still my man. All you have to do is forgive yourself.\"\n\n\"I don't know if I can be the man you deserve, Sophie.\" I said. My thoughts were a little clearer. \"Some days, when I look in the mirror... I see Lillian's accomplice, the seducer of women. On a good day, I see Janine's dupe - the fool.\"\n\n\"No.\" she said. \"You don't understand.\" Then she shook her head. \"Eat your food. I'm going to take a shower.\"\n\n\"But you haven't...\"\n\n\"I'm taking a shower.\" she repeated. \"Then we'll talk.\"\n\nFair enough. I ate, and drank my beer. She'd said that she still loved me. That was wonderful. But why didn't I feel wonderful?\n\nSophie had called me 'her man'. She'd said 'I love you'. And all I had to do was forgive myself? What was so difficult about that?\n\nI didn't have a ready answer. I just knew that... it wasn't so simple. I had built up Ashley's expectations, and now I was letting her down. Breanna had lost two boyfriends in a row. The only bright spot in that fiasco was that I hadn't gotten her pregnant.\n\nTamara's marriage had been smashed. Then I'd built her hopes up, only to stand revealed as a deceiver. I'd done something similar to Irene, in Cyprus.\n\nMaybe Ri and Sandra didn't hate me as much. I wasn't going to lose any sleep over what Kavia thought of me, either. But Vicky?\n\nMirella had been angry enough to kick me in the balls. And how did Esther feel? I'd proposed marriage, and left her miles from the altar.\n\nAnd what had I done to Michelle? Or worse, to Danielle?\n\nNo - Danielle was different. I'd been absolutely loyal to her. It was Janine who'd deliberately torpedoed our relationship. And I'd let her do it.\n\nSophie came out of the bathroom, wearing one of her few extravagances: a thick, fluffy, soft bathrobe.\n\n\"How's your beer?\" she asked.\n\n\"Are you trying to get me drunk?\" I joked.\n\n\"If it'll help.\" she said. She wasn't joking.\n\nSophie poured herself some more wine, and got me a fresh beer. Then she came back to sit beside me on the couch.\n\nShe took a deep breath, and then turned to face me.\n\n\"Do you remember our first date?\" she said.\n\nOf course I did. What was she suggesting?\n\n\"I remember all of it.\"\n\n\"What was your favourite part?\"\n\nI didn't understand this line of questioning. I felt like the prime suspect, being interviewed by the police; the questions seemed innocent enough, but I was wary of the hidden trap.\n\n\"I loved all of it. The way the time flew by as we had Dim Sum, our walk in the Park. Then sitting by the pond... I was amazed by how great I felt when you held my hand. We didn't have to say a word.\"\n\n\"But then we went for a drink... and the conversation just flowed again. It was incredible.\"\n\n\"I felt the same way.\" she said. \"I didn't want the day to end.\"\n\n\"It was the same for me.\"\n\n\"So... was that the spell working on you?\" said Sophie.\n\n\"What? No - that was before I knew you were on the list.\" Sophie knew that. Why was she asking me this?\n\n\"Are you sure? You had spells to make you perpetually horny, to make you want 'the thrill of the chase'... wasn't I just your next conquest?\"\n\nHey - I recognized the use of reverse psychology. But there's a reason why people keep using it: sometimes, it works.\n\n\"No. That day meant everything. You have no idea how important it was to me.\"\n\n\"I think that I do, Pete. Because it meant just as much to me.\"\n\nShe reached out to touch my hand, ever so gently. She was punching me in the gut with her words, but the touch of her fingers was like the smoothest velvet.\n\n\"Do you remember looking after me when I was sick?\" she said.\n\n\"Of course. You did the same for me.\"\n\n\"You did it first.\" she said. \"And you did it despite the spells on you.\"\n\n\"I didn't... it was nothing special...\"\n\n\"You weren't on the receiving end. I heard you say that you loved me, too. And then I went back to work, only to find that you'd straightened out my asshole of a boss. You read my mind to find about him, didn't you? Because you knew that something was bothering me.\"\n\n\"Umm... yeah.\" There was no point denying it.\n\n\"Pete - none of that was because of the spells that Lillian and Janine put on you. You treated me like a Princess, and then like I was made out of glass, because you genuinely cared for me. That was all you.\"\n\nShe was looking at me carefully, to see how I would respond to her words.\n\n\"I do love you, Sophie. I have since the day we met.\"\n\n\"But now you don't think you deserve me. You don't feel worthy - isn't that right?\"\n\n\"I...\" Was that my problem? Was I feeling that guilty?\n\n\"Did you cheat on me? Before the list?\" she demanded.\n\n\"No.\"\n\n\"Sammy says that you turned Janine down. While you were on tour.\"\n\n\"I... I did.\"\n\n\"But you were fully prepared to get her pregnant, at the end of your 'Year of Decision.'\"\n\n\"Yes.\"\n\n\"Can't you see all those spells at work, Pete?\" said Sophie. \"Ashley said that her friend practically offered herself to you on a platter.\"\n\n\"I... I didn't want to.\"\n\n\"How many women have you been with since Atlanta - when you didn't impregnate Breanna?\"\n\nNone. She knew the answer. I had the feeling that Sophie knew the answers to all of the questions she was asking. This wasn't an interrogation - it was an exposition. This was all for my benefit.\n\nI felt the tears welling up again. Why would she want me? I was so stupid - so damaged.\n\n\"Aunt Anna said that you would feel this way.\" said Sophie. \"So did Emily. Do you remember?\"\n\nYes. They'd warned me that the removal of the spells might leave me feeling anxious, uncertain or disconnected. But that wasn't it - I was feeling... guilty.\n\n\"Okay.\" said Sophie. \"I didn't necessarily want to do this now, but... time for the heavy artillery.\" She pulled out her laptop.\n\n\"Anna and Emily re-routed the email and texts from your old address to this new one.\"\n\n\"Look.\"\n\nThere it was, in black and white.\n\nEsther (using her new Smartphone), letting me know how happy she, Grandma and Sunny were in their new home.\n\nSandra, telling me that she would be in New York in a few months' time - and wondering if I was available to meet her.\n\nElodie and Christiane - they'd decided not to have a child (or children). Instead, they were going to investigate opportunities to adopt. They also insisted that I come stay with them the next time I came to Belgium - or anywhere close.\n\nVicky - asking if I was okay.\n\nMirella.\n\nI was angry - I'm still angry, I think. But that's because I wish so much that what we had had been real. I don't blame you, Peter - I understand better, now. I will always regret that I didn't meet you before we had those spells put on us.\n\nThat one almost made me smile. Before the spells were on me? I would have been 17 years old.\n\nAshley.\n\nI get it that you were acting under a sort of compulsion. But I knew from the very beginning that you liked me. You could have just... let's be honest. You could've just fucked me - and I would have been happy. Sorry to be... so blunt.\n\nBut you were nice to me. You made me feel special. I'm not going to forget that.\n\nThank you.\n\nSophie waited patiently as I went back and read them all again.\n\n\"How do you feel?\" she asked.\n\n\"Better.\"\n\n\"I should hope so.\"\n\n\"But you must've noticed that Tamara and Irene didn't send anything.\" I said.\n\n\"They may never forgive you.\" said Sophie. \"And you have to accept that. But you should face the facts, too: you didn't break up their relationships - Lillian did that.\"\n\n\"I should have known. I heard their stories, and I couldn't even put 2 and 2 together.\"\n\n\"The same way you did when Janine scared Michelle away? Or when she lied to Danielle to break the two of you up?\"\n\nOuch. That was harsh.\n\n\"You were under their spell, Pete.\" said Sophie. \"It's actually incredible that you tried to tell me. You were resisting all along. But you couldn't fight them off - not until you saw that full moon.\"\n\n\"You were a prisoner. You finally escaped - but you're still blaming yourself for not having escaped sooner.\"\n\nThey say that people have different learning styles. Some people are visual learners; I forget the others - auditory? Kinesthetic? It's all a crock of shit, anyway. But there's no question that a good story usually works for most of us. Or an image.\n\nSophie's comparison of me to a prisoner... it just suddenly worked for me. I pictured myself as the guy from the Shawshank Redemption, crawling out the end of that sewage pipe, and finally standing up, in the pouring rain...\n\nOkay. I hadn't had to crawl through a river of shit. Instead, I'd been having sex with multiple women all over the world... not quite the same type of ordeal.\n\n\"What are you thinking of?\" asked Sophie.\n\n\"The Shawshank Redemption.\"\n\nHer face creased up as she smiled, with her lips tightly pressed together. There were all of those wonderful dimples, in all of their glory.\n\n\"That's a great image.\" she said.\n\n\"You made me think of it.\"\n\n\"Yay for me.\" She leaned closer, and kissed me - full on the lips.\n\nSophie is a wonderful kisser. The pressure of her lips on mine was just right. When I felt the tip of her tongue inside my mouth, my knees went weak.\n\nDid I deserve this? Luckily, Sophie didn't give me time to think about it.\n\nShe continued to kiss me, probing even more deeply with her tongue, chasing mine. Her hand came up, to stroke my cheek, but she soon reached behind my head, to pull me closer.\n\nThen she moved - quickly, but smoothly - to turn and climb into my lap, to straddle me, with a leg on either side of mine. Her robe came adrift, so that it now gaped open a bit. She did nothing to fix it. Instead, Sophie kissed me again.\n\nI was much taller than she was, but our positions were now reversed - she was higher, and my head was tilted back. She had her hands on my face, holding me in place as she kissed me more forcefully, more passionately.\n\nShe moved one hand, briefly. She reached down, and took hold of my hand - which she immediately raised between our bodies. Then she pulled it towards her.\n\nMy fingers encountered bare skin, warm and smooth. I didn't need a road map. I raised my hand a few inches, and brushed the underside of her breast. Sophie groaned into my mouth.\n\nThere was absolutely no way I could resist the magical appeal of her chest. I was soon fondling her breast, running my thumb across her nipple.\n\nSophie moaned again, and then seemed to come to a decision. She released my face, and thrust both of her hands down, between us. She found the top of my jeans, and immediately unfastened them. Then she yanked my zipper down.\n\nIn one swift move (which might have made her yoga teacher proud), Sophie arched her back, and then flexed her hips, sliding backwards, and off my lap. Just like that, she was on her knees in front of me, tugging at my pants.\n\nI was a little surprised by her aggressiveness, but that didn't stop me from raising my ass off her couch, so that she could pull my pants and underwear down.\n\nMy cock sprang free, slapping loudly against my lower belly.\n\nSophie moaned. But she didn't hesitate. She immediately grabbed my erection, and lowered her head onto it. It was my turn to gasp as I felt her hot, wet mouth surround the head of my cock. This wasn't foreplay; it was simply the swift application of lubrication.\n\nShe attacked my rod - there was no other way to describe it. She slobbered over it, coating its length with saliva - and then she stood up, and clambered back onto my lap.\n\n\"Sophie - wait -\"\n\nNormally, Sophie and I spent considerable time on foreplay - I couldn't remember the last time we'd had intercourse without me going down on her first. But she was impatient, and determined, so she completely ignored my weak protests.\n\nShe took hold of my dick, nestled the head between her lower lips, and sank down upon it.\n\n\"Aahhh...\" she moaned.\n\nReflex took over - I read her mind.\n\nIs it such a bad thing, to know what your lover really wants? I would gladly have eaten Sophie's pussy; hell, I would've rimmed her asshole, if that was what she truly desired. But she was absolutely fixated on having me inside her.\n\nShe didn't want to leave me time for second thoughts.\n\nSophie fucked me, on her couch. She used her strong legs to propel herself up and down, masturbating my cock with her hot, wet pussy.\n\nI could have done a dozen different things to give her more sexual pleasure, to heighten the sensations for her. But that wasn't what she was interested in. Sophie wanted only to be joined, to be as close as we could possibly be.\n\nI came far too soon - which was exactly what she wanted.\n\n* * * * *\n\nShe took me the shower, where she insisted on washing me all over, and then drying me off. Then she led me to her bed, where she nestled into my arms, and held me close.\n\nHave you ever been so tired that you couldn't sleep? I felt physically and mentally exhausted, and yet I was wide awake.\n\nSophie had cast some magic of her own: she'd partially dispelled my self-imposed cloud of guilt and gloom. I wasn't entirely free of it, but every time I visualized that scene from the movie, I felt better. Maybe I wasn't entirely innocent - but I didn't deserve to be imprisoned for life, either.\n\nSophie was willing to forgive me, and she was a hell of a lot smarter than I was - intellectually and emotionally.\n\nShe wasn't sleeping, either. She was watching me carefully, but giving me a chance to digest what she said - and done - earlier.\n\n\"You're magnificent.\" I whispered.\n\n\"I'm pretty fond of you, too - in case you haven't noticed.\"\n\n\"You're far too good for me.\"\n\n\"I'm the lucky one, Pete. You make me happy. Happiest of all when we're together, of course, but I can feel better just by thinking of you - and it's even easier when I get one of your letters.\"",
        "\"You listen to me, when I talk. You take an interest in things that are important to me, or that I care about. I just... I feel wanted, and loved, when I'm with you.\"\n\n\"That might just be the long-distance effect. We tend to be on our best behaviour when we get together. It's just like an extended date.\"\n\n\"No.\" she said. \"We talked about that before. I'm convinced that it's your default setting. You can't fake it for two weeks straight, or when you have to look after me because I'm sick - or when you're sick yourself.\"\n\n\"Face it. There's just something about you that ticks all of my boxes. I was falling for you long before Lillian's spell - which wasn't there for very long anyway, because Aunt Anna removed it.\"\n\nI couldn't argue with that. Nor did I protest when she kissed me on the cheek. In fact, I responded by kissing her back - on the lips.\n\nAll of a sudden, I didn't feel tired anymore.\n\nSophie was a superb kisser. She let me lead, only responding to the level of intensity that I set (though I could feel her holding me a little closer, squeezing me a little tighter).\n\nShe smiled when I cupped her breast - I could feel her facial muscles against my cheek. She even arched her back a little, pushing out her chest, to offer her breast to my hand.\n\nI let my fingers run down her hip, and slide around to squeeze her delectable ass. Sophie's breathing quickened, but she continued to let me set the pace.\n\nShe moaned softly when I caressed her thigh, and then shifted slightly, opening her legs a little more. I took the invitation that was offered, and ran my fingers ever so lightly across her labia. I avoided her clit, for now, and resisted the urge to push my finger inside her.\n\nI kissed her cheek, her chin, and then up her jaw line, so that I could kiss her ear, and suck her earlobe into my mouth. I kissed her neck, and then her collar bone.\n\nThis was all about her. That's what I wanted, and she let me have my way. I used my fingers, lips and tongue on every part of her body. In some places, I also rubbed my nose or my cheeks all over her. When I'd thoroughly explored every inch of her front, I flipped her onto stomach, so that I could do the same to her back.\n\nHer shoulder blades were particularly sensitive, and she loved the attention I paid to the small of her back. Sophie giggled when I ran my fingers down the crack of her ass - and she made an 'Eep!' noise when I followed that with my tongue.\n\n\"Pete...\"\n\n\"You literally just showered.\" I said.\n\n\"That was before we made love on the couch.\" she protested.\n\n\"Tell me to stop, if you really want to - and I will.\"\n\nShe didn't make a sound when I paid direct attention to her little rosebud. That was when I realized that this was still all about me. Sophie would let me do virtually anything, to bring us closer together - to bring us back together.\n\nThat didn't mean that I should embarrass her, or push her boundaries too far.\n\nI flipped her onto her back again, and felt her relax just a little.\n\nThen I made love to her.\n\nYes, Janine had taught me a lot of what I knew about sex, and I'd honed all of that theory with multiple practice partners. But Janine had been mistaken about one thing: she'd never actually taught me to make love, because she herself didn't really know how.\n\nDanielle had been my first real teacher... and Sophie was my Professor, my sensei. I knew what she liked - no, I knew what we liked.\n\nI did my best to make it a spectacular, memorable experience for both of us.\n\n* * * * *\n\nIf you've ever had the experience of waking up, to find the person you love looking at you (because they were watching you sleep), then you probably know how amazing that feels. Daunting - and yet exhilarating.\n\n\"Good morning.\" she whispered.\n\n\"Good morning.\"\n\n\"Are you starving?\"\n\n\"No.\"\n\n\"Good. Because I want to tell you something that occurred me just now.\"\n\n\"What's that?\"\n\n\"I think you were fighting them all along, Pete - Janine and Lillian.\"\n\n\"I don't know, Soph - I was pretty thoroughly under Janine's thumb. Ask Sammy.\"\n\n\"I did.\" she said.\n\n\"You did?\"\n\n\"Let me explain my theory.\" she said. She propped herself a little higher up on one elbow. \"I think that you were resisting the spells from the very beginning. Didn't you tell us that Janine had to practically force you to go out and sleep with other women?\"\n\nThat was true. I'd wanted Janine for my girlfriend. At that time, as far as I was concerned, no woman could have matched her. I'd hated admitting that, because it let Sophie (and Anna, Eileen, and everyone else) know how thoroughly I'd been captivated.\n\n\"Pete - you had multiple enchantments on you. To make you horny, to encourage you to be promiscuous, to make you desire the thrill of... conquest.\"\n\n\"They worked.\" I said.\n\n\"They didn't!\" said Sophie. \"You wanted to stay with Janine, even when she was pushing you away. Pushing you towards other women. You wanted Michelle - even when she wasn't ready to have sex. And you respected her wishes!\" \n\n\"You didn't cheat on Danielle - even though you knew that you would have be having sex with 12 other women in a few years' time...\"\n\nI wasn't entirely comfortable about discussing Danielle with Sophie. I thought that I'd been in love with Michelle. But I knew that I'd loved Danielle - just as I loved Sophie.\n\nDon't you see?\" said Sophie. \"You were resisting most of the spells of they put on you.\"\n\n\"But not all.\"\n\n\"True. But which ones did you never challenge? You questioned Janine and Lillian about several things: making money through the lottery, paternity suits, or even taking the whole problem to the magical police.\"\n\n\"There was only one thing you never seem to have doubted: that you had to save 13 women from a terrible fate, by seducing them. But did you ever expect to fall in love with one of them in particular?\"\n\n\"I...\" Damn - Sophie was miscast as a lab technician: she could have been a lawyer. Okay, maybe she was better off as a lab technician.\n\n\"Or, look at it another way: what did Janine and Lillian want you to become?\"\n\nThat was easy. I knew what they'd been aiming at. Sophie could see it in my face.\n\n\"There - that's it! And yet - what did you become? Pete - think of our first date.\"\n\nI finally understood what she was driving at.\n\nJanine and Lillian had been trying to create a perpetually horny, promiscuous seducer of women, interested only in the thrill of the chase, or the next notch on his belt.\n\nBut I'd spent the entire day with Sophie - over 12 hours - and the sexual highlight of our first date, for me, was... holding her hand. It was Sophie who had initiated our first kiss - on our third date. So much for the great seducer of women...\n\nShe saw me blush.\n\n\"You see!\" she said. \"You were still you. Through it all... they couldn't change you completely. And you were fighting the spells - you tried to tell me, even though it made you seriously ill.\"\n\nSophie saw the light beginning to dawn in my eyes. With a big grin, she leaned over and wrapped her arm around me. Then both arms. That resulted in a great deal of delectable naked flesh being pressed against me.\n\nThat ended the lesson, for a time.\n\n* * * * *\n\nSophie was too smart to keep pressing me. She stopped well short of pestering, or nagging. She'd planted quite a few ideas in my head; she gave me a little time and a little space to assimilate them, to let them soak in to my thick skull.\n\nI'd been focused on the negative, on all of the harm I'd done to the women in question. I couldn't get past the things that Janine and Lillian had duped me into doing. But Sophie was directing my attention to the other side of the coin: my little acts of subversion, or my insistence on carrying out their instructions in my own way.\n\nI wasn't in line for a medal, by any means, but maybe I wasn't quite the monster they'd tried to make me into (and that I believed I'd become).\n\nThere had been time, too, for me to digest what Aunt Anna had told me: that Lillian and Janine had planned to dispose of me after I'd completed my tasks - and before I could mess up their scheme. They'd simply miscalculated my 'expiry' date.\n\nSometimes people agonize over decisions. You can dwell on all of the dangers, or draw up a list of pros and cons. You can consult your loved ones, or take a poll among your friends and family. But there are times when the correct course of action - the right decision, if you will - is suddenly just as plain as the nose on your face.\n\nIt was the evening of my second day with Sophie. She was preparing dinner for us; I'd been delegated to cutting the celery and the carrots.\n\n\"You're right.\" I said.\n\n\"Pardon? Right about what?\"\n\n\"I'm not the villain.\"\n\nThis time, it was Sophie whose eyes teared up.\n\n\"Oh, sweetheart...\"\n\n* * * * *\n\nThere's a specific legal defence that can exonerate you completely, if you're charged with a serious crime: Compulsion, or Duress.\n\nI had to drive the getaway car, Your Honour, because they threatened to kill my sister if I didn't. Basically, it's a version of 'They made me do it'.\n\nThere are limits, of course. You can't commit a murder because 'they' threatened to kill your family. Or you.\n\nLillian and Janine had compelled me to do much of what I'd done. But I'd never committed any crime as serious as the ones they were planning: kidnapping children, and murder (me).\n\nIt may sound like an odd way to think, but it helped me to realize that I wasn't their accomplice. I might have been their dupe, or their tool, but I wasn't their helper.\n\nIn simple terms: I still felt like an idiot, but I didn't feel as guilty.\n\n* * * * *\n\n\"I'm thinking of learning magic.\" said Sophie.\n\nI spit several ounces of perfectly good Riesling all over her carpet.\n\n\"Wh-what?\"\n\n\"My Mom hates the idea, of course. But I think that's mostly just because she loathes Dad so much. Magic is the reason she had to marry him in the first place. But you and Aunt Anna both know real magic - and I love both of you...\"\n\n\"Soph...\"\n\n\"I'd like to be able to defend myself, you know. At the very least, I want to be aware next time, if someone is messing with you. Or with me. Aunt Anna has agreed to teach me. And you could, too.\"\n\n\"Aunt Anna was really quite... wise. She was patient. She never told me about magic when I was too young. But now she's ready to help me.\"\n\nI resumed normal breathing. Sophie would only be in Toronto intermittently. A couple of hours of instruction, every few months? That wouldn't do much.\n\n\"Will you help me, Pete?\" she asked.\n\n\"Of course.\"\n\nShe frowned. \"You don't sound very... encouraging.\"\n\n\"I started when I was 18, Soph. You're in your late 20s. I also practiced for hundreds - maybe even thousands - of hours. How much time will you have to devote to it? You might have to... lower your expectations a bit.\"\n\n\"But Anna said that Lillian and Janine were deliberately limiting your progress. Maybe we could both learn a lot from her.\"\n\nThat actually sounded intriguing. \"I bet we could. But... how often would you be in Toronto? Or would Aunt Anna be coming up here?\"\n\n\"Actually...\" said Sophie. \"I was thinking about moving to Toronto.\"\n\n* * * * *\n\nI pause my story here (our story?) only because my mind briefly failed to function. I was barely aware of the passage of time as I struggled to make sense of what my beloved had just said.\n\n\"Toronto?\" was the first coherent word out of my mouth.\n\n\"That's where you live, last time I checked.\" she said. \"Aunt Anna, too. You're the two most important people in my life. And my two teachers, if I'm going to learn magic.\"\n\n\"But -\"\n\n\"Sammy and Trish are there, too. Colette. Most of my social network, to tell the truth.\"\n\n\"But - your job? Your Dad?\"\n\n\"My Dad has his new family. And my Mom is right about one thing: he is a dick. Anyway, I can come back to Montreal from time to time. Any my job skills are transferable. I'm sure that I can find a comparable position - with a better boss.\"\n\n\"Has he -?\"\n\n\"No - he hasn't bothered me. Not since you - set him straight. But he's still creepy. Honestly, Pete: if I am going to change my address, now is a pretty good time to do it.\"\n\n\"You're serious?\"\n\n\"Of course I am. I could stay with Aunt Anna while we look for a place. But I'd rather stay with you while we do our apartment-hunting. I mean, there's no sense moving twice, is there?\"\n\nI'd heard a 'we' in there. Twice, unless I was mistaken. And an 'our'.\n\n\"Are you talking about... living together?\"\n\n\"You read my mind.\" she said, with a big grin.\n\n* * * * *\n\nTwo weeks later, Sophie came down for a weekend. Sammy and I took her and her Aunt Anna to Little Portugal for dinner at a popular churrasqueira (Portuguese barbecue). We didn't include Trish this time, because of the topics we intended to discuss.\n\nAfter what we'd all been through together, there weren't very many secrets remaining between us.\n\nSammy had pumped his fist and done a strange little victory dance when I first told him that Sophie was planning to move to Toronto. Now that he was seeing her in person for the first time since then, he gave her a big hug.\n\n\"That's great news.\" he said. \"You have no idea how happy I am for you two. And for me!\"\n\n\"He'll be trading up to a better class of roommate.\" I said.\n\n\"You and Trish? You're going to do it?\" said Sophie. \"That's wonderful!\" She immediately dragged him back into another hug.\n\nOnce we were seated, Aunt Anna turned to Sammy.\n\n\"Have you told your girlfriend about magic?\" she asked.\n\n\"No.\" he said. \"Not a word.\"\n\n\"Maybe you should.\" said Anna.\n\n\"What?\"\n\n\"If you're going to maintain your connection to Pete - which now includes Sophie - you're going to continue to be exposed to magic. And your partner - Trish? Unless she's completely oblivious, she's going to have some questions some day.\"\n\n\"She already does.\" muttered Sam.\n\nIt was my turn to say \"What?\"\n\n\"Trish has always wanted to know how you did that trick at the pool party. Plus she's seen your show twice; after each one, she asked me how you do it.\"\n\n\"That's what I mean.\" said Anna. \"You don't want to keep secrets from her - not if you're planning to stay together long-term. How can she trust you completely if you're shutting her out?\"\n\n\"But I thought...\" Sammy was confused. \"You know... Men in Black, memory wipes...\"\n\nAnna actually smiled. \"No, Sam. We don't do that. If Trish is a smart girl - and it sounds like she is - she'll understand. Besides, she can figure out for herself what would happen if she started telling everyone she knows that magic is real.\"\n\n\"And look at the worst-case scenario: how will she react, years from now, if she finds out that you weren't telling her the truth from the very beginning?\"\n\nSammy looked stricken. Sophie put her hand on his.\n\n\"We can be there, when you tell her.\" she said. \"Or afterwards - whatever you need.\"\n\nAunt Anna waved a finger at me. \"That doesn't mean that you can start going around telling everyone...\"\n\nThe waiter arrived with our drinks, temporarily putting an end to that line of conversation. Once he'd taken our food order, Sophie turned the talk in another direction.\n\n\"Did you do your homework?\" she asked me.\n\nI dutifully passed over a piece of paper. Aunt Anna raised her eyebrow - much as Sophie herself frequently did.\n\n\"Homework?\"\n\n\"Pete and Sammy need to find another career path. Something other than magic.\" said Sophie. \"They can't go on doing magic shows forever.\"\n\n\"Why not?\" said Anna.\n\n\"New routines.\" I said. \"You can't keep doing the same tricks over and over. Well, I suppose you can, if you're willing to travel the world, and keep going to new places where they haven't seen your stuff before. But Sammy and I... neither of us wants to travel all that much anymore.\"\n\n\"That's understandable.\"\n\n\"We can do magic for a while. It'll pay the bills. And if I can come up with some ideas for new material, we'll consider a limited tour. But we have to face facts: me by myself isn't going to draw like Janine and I did.\"\n\n\"They need another type of work to fall back on - or even to switch to.\" said Sophie. \"So I asked Pete to come with a list of jobs they could see themselves doing.\"\n\n\"Don't look at me!\" protested Sammy. \"I can find a job.\"\n\n\"I know you can. But I was thinking of a career - something you would both really enjoy.\"\n\n\"It's my fault.\" I explained to Anna. \"I have a college diploma, but I just don't have any skills. Janine and Lillian convinced me to spend my time studying magic - and sex - while I skipped all of my classes. I cheated on every assignment, and every exam. I don't actually know anything.\"\n\nSophie took my hand. I didn't find it especially difficult to admit the truth, but she wanted to show her support - and I was grateful for it.\n\n\"And what have you come up with?\" said Anna.\n\n\"A list I'm not all that happy with.\"\n\nSophie and her Aunt perused my list together.\n\n\"Counsellor?\"\n\n\"You'd make a great counsellor.\" said Anna (who had been one herself).\n\n\"I don't think I could do what you did, though.\" I said. \"I have no training, and I don't know anything about psychology.\"\n\n\"You may lack the qualifications, Pete.\" said Anna. \"But you understand more psychology than most people.\"\n\n\"Customs agent?\" said Sophie, reading off my paper.\n\nSammy laughed. \"You'd be a wicked border guard!\"\n\nI thought so, too. I could picture myself asking 'Anything to declare?', and catching drug smugglers, escaped criminals, human traffickers...\n\n\"Police?\" Sophie looked confused.\n\n\"Well... I was imagining myself in an interrogation room, questioning suspects. Like a human lie detector.\"\n\n\"Oh - you'd be so good at that!\"\n\n\"Except that he'd have to go back to school to qualify.\" said Sammy. \"And he absolutely sucks at following orders. They'd never let him into the Police force.\"\n\n\"The worst part,\" I said, \"is that none of these jobs would allow Sammy and me to work as a team.\"\n\n\"Purchaser?\" said Sophie, as she read the last entry on my list.\n\n\"I don't know what else to call it. I was thinking that I could help people, when they have to make a major purchase, like a car, or a house. I thought... I could go with them and make sure they don't get ripped off.\"\n\nMy girlfriend smiled at me. \"That's a nice thought.\" she said.\n\n\"It sounds more like a reality show on TV.\" said Aunt Anna. \"Peter Purchaser.\"\n\n\"Getting a good deal with Grey.\" said Sammy.\n\n\"Too long. Don't buy this car.\" said Aunt Anna.\n\n\"Trust me.\" said Sammy, rolling his 'r' in a bad Dracula imitation.\n\n\"I think it's a sweet idea.\" said Sophie.\n\n\"Not very practical, though. This is it? This is your whole list?\" said Aunt Anna.\n\n\"There's one more - on the back.\"\n\nSophie flipped the page over. She and her Aunt quickly read what I'd written.\n\nPrivate Detective\n\nNeither one said anything, for a moment.\n\nSammy glanced at the paper, and then turned to look at me. I wondered if he was remembering the same thing I was thinking of.\n\nSome time ago - before he'd met Trish, Sammy had been dating a hot chick named Wendy, who was well out of his league (physically, at least). He suspected her motives for wanting to be with him, and asked me to check her out - to read her mind.\n\nSammy was afraid that Wendy was just a gold-digger. His fears were more than justified. In fact, the reality was even worse. She was a kinky groupie who was only using him to get to Janine and me.\n\nHe was obviously disappointed to have his suspicions confirmed, but happy to be able to get out of that relationship early.\n\nThen he asked me to do the same for the next girl he fell for. Well, that was Trish - and it didn't take me very long to realize that he had absolutely nothing to worry about. That was also the day of the pool party where I first met Sophie. It was something of a life-changing event for all four of us.",
        "Sammy nodded. \"I could see us doing that.\"\n\n\"We could call it the 'Batman and Robin Detective Agency'.\" I said.\n\n\"Wouldn't you want your name first?\" asked Sammy. \"Because that would make it the 'Robin and Batman Detective Agency'.\"\n\nI had to laugh. Sammy used his finger to chalk up an imaginary point for himself, on an imaginary scoreboard.\n\n\"It wouldn't all be fun and games.\" warned Aunt Anna.\n\n\"I know that it's not glamourous.\" I said. \"I'm not expecting adventure and excitement.\"\n\n\"Well, that's good.\" said Sophie. \"Because we've had more than enough of that.\"\n\n\"I just remembered that Anna was especially good at finding things that people had lost. I thought that I could do something like she does.\"\n\nAnna frowned. \"Did you just call me un-glamourous, unadventurous, and unexciting - all in one breath?\"\n\n\"What? No -\"\n\nSammy howled. Sophie laughed, too. Even Anna couldn't let me hang for long - she cracked a smile.\n\n\"You might actually be good at that.\" she said. \"I could probably send some of my clients your way, when they have issues I can't solve.\"\n\n\"Does that happen?\"\n\n\"Sometimes, yes. And then...\" Aunt Anna looked confused for a moment. She seemed to be staring off into the distance - either that, or she was seeing something that the rest of us couldn't.\n\n\"Auntie?\" said Sophie.\n\nAnna snapped out of it. \"I can't believe that I didn't think of this before.\" she said. \"Pete - you could be very helpful to Eileen and Rodney.\"\n\n\"I could?\" I couldn't imagine how. \"Didn't you say that I was a table lamp, with the dimmer switch set to low?\"\n\n\"I know. I did say that.\"\n\n\"And I couldn't read Janine - or Lillian. I'm not sure I could read anyone with talent.\"\n\n\"They set you up, Pete - specifically so that you couldn't use your skills on them.\" said Anna. \"But you do have potential. I told you: mind reading is rare. They put restrictions on you - but those have been removed. With some training, you could be among the best. And that would make you a valuable commodity.\"\n\n\"Not sure that I want to be a commodity.\" I said.\n\n\"You know what I mean. You'd be in demand...\"\n\n\"Really, Auntie?\" said Sophie.\n\nShe nodded. \"Actually, the detective idea isn't bad. But if Rodney could make use of his skills...\"\n\nAunt Anna scowled, and then looked me in the eye.\n\n\"I'm sorry, Pete. I should have thought of this myself - much sooner. You have a lot of potential... once you've been trained a bit more.\"\n\n\"Can you help him?' asked Sophie.\n\n\"I can train you both.\" she said. \"But I may need Eileen and Rodney to help Pete maximize his strengths.\"\n\nThat was a lot to think to about. By unspoken agreement, we switched to other topics when our food arrived.\n\nI was worried about Sammy: where would it leave him if I became some sort of Investigator for the Magic Police?\n\nAunt Anna was worried about Sophie: how would it affect her if I was affiliated with Eileen and Rodney?\n\nSammy was wondering how Trish would take it if he told her that magic was real.\n\nAnd Sophie was worried about me.\n\nAll of that I gleaned just by looking around the table; I didn't even have to read their minds.\n\nThe Stones have a song: 'You Can't Always Get What You Want'. Sometimes... you get what you need.\n\nAnd sometimes, you get more than you deserve.\n\n* * * * *\n\nSo I'm a magician. I perform 3-4 times a month in the GTA (Greater Toronto Area). Twice a year, I go on short tours with my manager (Sammy) and our partners. This winter, we're planning a couple of shows in Costa Rica and Panama. We sent free tickets to Mirella.\n\nI'm also a private detective. I help people locate lost items. And when they ask me to, I question their spouses. People are suspicious - sometimes with good reason. It's no pleasure for me to discover that someone is cheating on their partner.\n\nAnd I'm an Inquirer. It sounds better than Inquisitor (a term many magically-talented families remember all too well). I usually just sit quietly, while Eileen and Rodney ask questions. But I read minds.\n\nCase #1: \"The money is in the Cayman Islands.\" I said, after the first questioning session. \"The password for his account is Perth140482.\" Honestly - some people use their place and date of birth as their password.\n\nCase #2 \"She sold it. The money is gone, though - she gave it to a guy named Dwayne.\"\n\n\"Her lover?\" said Eileen.\n\n\"No. Her dealer.\"\n\nCase #3 \"She's telling the truth.\"\n\nI wish that that last answer was more common. Unfortunately, too many people think that they can get away with dishonest, treacherous behaviour.\n\nIt's so much easier to be a magician. Private detective isn't all that hard, either. Sammy handles my scheduling for both of those careers. He also manages both websites.\n\n* * * * *\n\nA little over a year after Sophie moved to Toronto, we went to the Winter Garden (an old-fashioned theatre) to see a singer she really liked. It was a great show. Afterwards, Sophie suggested stopping in for a drink at cozy little pub.\n\nI got a pint of Guinness, while Sophie finally settled for a Spanish coffee. She was still stirring sugar into it when she frowned.\n\n\"Something wrong?\" I said.\n\n\"No. Just... someone you know. Across the room. Don't swing around all at once - but... eight o'clock, from your perspective.\"\n\nI waited a moment, and then casually turned my head a little to my left.\n\nAnd there she was.\n\nEva. Janine's poker-playing friend, the former waitress at the Magnet - and the third woman I'd ever had sex with.\n\nShe'd aged a bit, and her hair was a bit darker than I remembered. But it was definitely Eva. I didn't have any bad memories of my time with her. She was a good card player, and quite clever (she'd somehow talked me into two one-night stands - not that I had any regrets about that).\n\nEva saw me. She'd obviously been looking our way. She smiled, and raised her hand in a little wave. Without thinking, I waved back.\n\nIt was only at that moment that I realized something.\n\nAs far as I knew, Sophie had never met Eva.\n\nThat was when Eva gestured again. It wasn't a wave. She was pointing - at someone sitting across the table from her. I turned my head just a little more.\n\nJanine.\n\nMy teacher, my tormentor, my first. She was still exceedingly pretty. Maybe it was the fact that the spell had been removed, but I felt like I was seeing her clearly for the first time.\n\nLike Eva, she looked a little older. Unlike Eva, she was wearing a little too much makeup (for my taste, anyway). Her hair looked great, and she was showing quite a bit of cleavage.\n\nJanine still had access to magic. She might have been stripped of her arcane abilities, but as long as her looks lasted, she would be able to cast a spell over men. Janine would never have to open a door, or carry her own luggage - not if a susceptible male was nearby.\n\nEven as that thought crossed my mind, the waiter came by Eva and Janine's table, to drop off two drinks - and then point to the bar, to indicate the two guys who'd sent the drinks over (two overfed suits in their forties). Eva smiled and raised her glass in their direction.\n\nJanine caught my eye for the merest second - and then she looked away.\n\nI wasn't under her spell. She had absolutely no hold over me. The temptation was there, to go over and give her a piece of mind . But what would that achieve?\n\nJanine was beaten, and she knew it. She'd lost - and deservedly so. She was part of my past. I hadn't even thought of her for... was it weeks? No, I hadn't forgotten her, or Lillian. I never would. But they no longer held sway over my life. They were simply a reminder of my own fallibility, my tremendous gullibility.\n\n\"You okay?\" asked Sophie.\n\nI smiled, and reached for her hand.\n\n\"I am. Thank you. Did I ever tell you about Eva?\"\n\n\"Eva?\"\n\n\"The woman sitting across from Janine.\"\n\nSophie took a good long look.\n\n\"There's a story involved?\" she said. When I nodded, she grinned.\n\n\"Alright, let's hear it.\"\n\n* * * * *\n\nAunt Anna was true to her word. She spent a great deal of time teaching us. Some of the time, she worked with both of us together; yes, Sophie was a total noob, but Anna wanted to take me back to the very beginning, to find out where Lillian and Janine had deliberately skewed my progress, in order to make certain that I could never challenge them.\n\nWe also had solo sessions. Anna must have invested hundreds of hours into our training.\n\n\"We should be paying you.\" I said.\n\n\"Don't be silly.\" she said. \"I'm leaving everything to Sophie anyway - anything you give me would only come back to her in the long run.\"\n\n\"I didn't... I didn't know that.\"\n\n\"I have no children, Pete. You know that. Does it come as a surprise to you that I don't care much for most of my relatives?\"\n\n\"Given what you've told me of your family history... no.\"\n\n\"She's one of the few people in the world that I do care about. So you can forget about paying me back - and concentrate on making Sophie happy.\"\n\n\"I'm trying.\" I said.\n\n\"I know you are.\" said Aunt Anna. That was the closest I'd ever felt to Sophie's Aunt - the warmest she'd ever been with me. It lasted all of three seconds.\n\n\"Now get your head out of your ass, and concentrate on what I asked you to do!\"\n\nDespite her abruptness, and her occasional harsh criticism, Anna was actually a talented and patient teacher. She unlocked my skills to an incredible degree. It was like someone finally putting air into your tires, so that when you climbed back onto your bike, the difference was... enormous - and immediate.\n\nSophie enjoyed her lessons, too. She wasn't trying to catch up to me in a matter of months. Instead, she was only interested in improving herself - of measuring her own performance by the standard she'd set in her last session.\n\nAfter six months' work with her Aunt, Sophie wanted to show me what she'd learned. She sat me down at our kitchen table, and spread out a deck of cards between us.\n\n\"Touch a card.\" she said. I did.\n\n\"Now watch it. Closely.\"\n\nAgain, I did as she asked. Sophie was working - I could feel the surge of magical energy (one of the benefits of my training with her Aunt).\n\nI watched, in utter amazement, as the playing card in question slid almost a full inch to the left.\n\n\"I don't believe it. Sophie - that's incredible!\"\n\n\"Pretty good, right?\"\n\n\"Better than that - amazing!\"\n\n\"\"Really?\"\n\n\"You know it! This calls for a celebration -\"\n\n\"Shawarmas?\" said Sophie, with a grin.\n\n\"Sure. I'll go get them.\" I said. \"And afterwards, I think you deserve a massage.\"\n\n\"Oh? I have a feeling that I know where that will lead...\"\n\nSophie is rapidly becoming an accomplished magician. She can read my mind like you wouldn't believe.\n\n* * * * *\n\nThe End\n\nNote: From the (many) comments, I realize that some readers found the story too long, or became frustrated with Pete for being so slow to catch on. The story could have been shorter, but I was having fun writing it (No, I don't think it's a masterpiece, but I enjoyed the process). My intention all along was to turn a mind control story upside down, by having the main character be the one controlled - some of you figured it out early. I was also intrigued by the possibilities in the dates of full moons.\n\nApologies if certain aspects didn't appeal to you. I hope that you found something entertaining in it. Thank you for commenting - I appreciate the feedback and the support."
    ],
    "authorname": "AspernEssling",
    "tags": [
        "magic",
        "magician",
        "nerd",
        "guilt",
        "romance"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/just-a-little-magic-ch-16"
}
{
    "title": "The Chronicles: Three Sisters 15",
    "pages": [
        "THE THREE SISTERS Chapter 15\n\n- \"The Duchess is going into labour.\" said Prosquetel.\n\nSometimes the Fates let you enjoy a few good moments before they drop the whole mountainside on you.\n\n\"Your daughter, your wife, and some of the other women are with her.\" he continued.\n\nWe'd held the Izumyrians off, even while burdened with elderly folk, pregnant women, and children. We'd bloodied their noses several times, while losing only a few of our own. But we'd run out of places to stand and fight.\n\nOn the morrow, our enemies would sally up the gentle slope, and slaughter us all. I was wracking my brain to find a way out of our hopeless situation. I'm ashamed to admit that I briefly considered the option of bargaining with Count Seaglitz - even if it meant handing over the Lowlanders.\n\nBut that wouldn't do. Never mind the dishonour: the Count had offered a bribe once before, and we'd spurned it. He would laugh in our faces, and unleash his troops. They would kill all of the men. Some of the women would be lucky enough to die fighting.\n\nI didn't think that Sulcen would let herself be captured. But could Tanguiste find the desperate courage necessary to kill herself? Could Guenna?\n\nAnd poor little Dengelle would have to face her greatest nightmare all over again.\n\nVingoldas came to stand beside me. I was proud to have him in our family. He was a good man. Now he and Tanguiste would never see their children - my grandchildren.\n\n- \"What can we do, Veran?\" he asked. \"If we stand and fight, is there a chance that some of us could get away?\"\n\n- \"Tan won't leave the Duchess. She's in labour.\"\n\n- \"I know. I was thinking of ... some of the others.\"\n\n- \"We can't run.\" said Yevna. \"They'll catch us. Even if we abandoned the old and the young.\" She glanced at me, even though she knew that that wasn't an option.\n\nIt was dusk. In the gathering gloom, the others who could still fight were gathering around us. Guenna came up behind me, and laid a hand on my shoulder. She didn't say a word.\n\nBut someone else had an opinion, and wasn't shy about sharing it.\n\n- \"We can defend the next position, and make the invaders pay in blood for every step!\" That was Iduallon, the Lowlander Lieutenant who didn't know how to shave. Asshole.\n\n- \"There are no next positions.\" said Yevna.\n\nGuenna cleared her throat. \"That's true. Unfortunately, there are no major obstacles for the next six leagues.\"\n\nIt was ridiculous. We had sixteen fighters left, if I included the wounded. Seventeen, if I wanted to count white-haired Prosquetel. Seaglitz had 80 or 90 troopers.\n\n- \"We can't move the Duchess.\" said Gerimir, the other Lowlander. He was wounded, but still standing. Why did I quite like him, while his companion Iduallon made my skin crawl?\n\n- \"We can't run, and we can't stay here.\" said Vingoldas. \"That's pretty much it, in a nutshell.\"\n\n- \"Then I hate to say it,\" said Giedra, \"but I agree with what's-his-name: we stand and fight. We'll take some of the bastards with us.\"\n\nThere were a few grunts and half-hearted noises in support of her stance.\n\n- \"That's might work for you, Giedra.\" I said. \"But what about the women who are captured?\" I could see Eliv, standing next to her, and Dengelle was over with Yevna, as always. I didn't try to catch her eye.\n\n- \"Then what do we do, old man?\" snarled Giedra. \"You have a better idea?\"\n\nUntil that very moment, I hadn't come up with anything at all. But as I thought of little Dengelle, an idea began creeping into my head.\n\nI stood up.\n\n- \"We fight.\" I said. \"Any of you who will stand with me ... we fight, and we sell our lives as dearly as we can. We hold off the Izumyrians as long as we can ... so that others can escape.\"\n\nI looked to my eldest daughter.\n\n\"Yevna knows these mountain paths better than anyone. She and Inisian roamed the slopes for years. She knows every trail, every glade, every brook and stream.\"\n\n\"She can take a party of the young and physically fit - especially the young women. Maybe a handful could escape, if they take to the woods. If Yevna led them by secret tracks that only she knows of ...\"\n\nFor a moment, they considered what I'd said. There were no cowards here. They'd all shed blood and buckets of sweat to get us this far. Now I was asking some of them to sacrifice their lives in order to grant others a slim chance of escaping.\n\n- \"That's not going to happen.\" said Yevna. She didn't even look at me as she stepped forward.\n\n\"I agree that we can't outrun horses.\" she said. \"And it's true that if we make a stand here, we'll lose. But if we can't retreat, and we can't stay put ... why can't we go forward?\"\n\nIt was logical, in a strange way - and completely ridiculous. I could see Giedra's teeth flash as she smiled. Of course this type of insanity would appeal to her.\n\n- \"Do you have some sort of plan?\" asked Prosquetel.\n\nShe didn't. Yevna only had a response. If they corner you, fight back.\n\nBut her youngest sister spoke up.\n\n- \"I have a plan.\" said Guenna.\n\n***\n\nAs Guenna began to speak, I understood what had happened. She'd had the same reaction as Yevna, or Giedra: if you can't stay where you are, or go back, then ... go forward.\n\n- \"You all heard Yevna. We can't outrun horses. We have no more good positions to defend. And we can't leave in any case, because the Duchess has gone into labour. But the Izumyrians don't know that.\"\n\n\"They got the better of us today - and they probably expect to do the same tomorrow. They have no idea that the only option we have left is to attack them.\"\n\n- \"They'll have plenty of guards.\" warned Prosquetel. \"You won't find it easy to surprise them.\"\n\n- \"Of course they will.\" said my daughter. \"But we have one more advantage: this is where my sisters and I grew up. We lived for six years with Inisian and his mother - in that very same cabin.\"\n\n\"No one - no one - knows the land around here like Yevna. She knows exactly where the Izumyrian horses will be.\"\n\nEven as she said it, I wanted to punch myself. Of course - I knew it, too. There was only one piece of relatively flat, open land near here, that was also close to a source of water.\n\nIt was next to the little stream where we'd found the body of Moruith's oldest son, Inisian's brother, all those years ago.\n\nIt was the only logical way for the Izumyrians to water their horses, unless they wanted to carry it in buckets over a quarter-league. Did they even have buckets?\n\nGuenna had heard a few of us say that we couldn't outrun horses. That made her realize that the Izumyrians would take care of their mounts - which meant that they would keep them near water, but also that they wouldn't let any harm come to them, if they could possibly help it.\n\nAn attack on their mounts would bring all of them running.\n\nAs my daughter explained her idea, I could see people lifting their heads, standing a little straighter. We had all been exhausted, only a few moments ago. Guenna had just given us a little sliver of hope.\n\nIt could still easily end in all of our deaths. There was no guarantee, even if her plan worked, that we would survive the next day.\n\nBut there was a certain inspired madness to it ... and it was better by far than anything I'd heard so far - including the idiocy I'd been suggesting earlier.\n\nGuenna's plan had two prongs - that meant dividing our forces. Unfortunately, we only had one Yevna. She knew the lay of the land better than anyone, and she was also one of our best archers - by far.\n\nI made one little suggestion, which my daughters agreed to. We then split our remaining fighters into three groups.\n\nVingoldas would lead the first party. He was wounded, and not nearly mobile enough to be in either of the two other groups. With him was Gerimir, the wounded Lowlander, and Hedyn, who was as stealthy as a bull in heat. There was no way we wanted him blundering through the forest at night. Old Prosquetel protested, but he was included in this group.\n\nTheir task was to guard the path to Moruith's house. It was unlikely that the Izumyrians would attack at night, but if they did, this little group could fight for a few moments, while giving the women behind them a choice: to kill themselves, or to face being captured.\n\nIf that sounds ugly ... it was. Vingoldas was going to have to explain it to Tanguiste.\n\nThe second group was Yevna's. She had Giedra and her two friends, Eliv and Rion. Iduallon the Lowlander was with them, as were Odma, Weyl, and of course Dengelle, who couldn't bear to be parted from Yevna.\n\nMy eldest had a moment, before we went our separate ways, to come over to me. Yevna had found some wet soil, which she'd rubbed on her forehead and her cheeks, so that the moonlight wouldn't reflect off her skin. She placed a hand on my shoulder.\n\n- \"I know what you were trying to do.\" she said. \"And ... I appreciate it. But I won't save Dengelle by sacrificing my sisters - and my father.\"\n\nI embraced my daughter.\n\n- \"I love you.\" I whispered. Tears came to my eyes.\n\n\"I should have told you more often. I should have told you every day.\"\n\n- \"You did.\" Yevna's voice cracked. \"Every day ... you did.\"\n\n- \"Come back.\" I said. \"You don't have to die ...\"\n\nShe grunted. \"I'll come back ... if you do.\"\n\nThe third group was mine. I had Nameless and Libot, the two best archers, next to Yevna. Red-headed Seva was with us, too. I'd had to flatter and cajole her, telling her how much we needed her, to reconcile Seva to the fact that she wouldn't be with her brother (Weyl), or her lover (Iduallon, the Lowlander).\n\nThat was what I'd suggested, as an amendment to Guenna's plan. I feared that Seva would balk at taking orders from Yevna - whom she'd never liked. I also worried that Seva would be too busy worrying where Weyl and Iduallon were instead of concentrating on the task assigned to her.\n\nThis way, they would be out of sight, and hopefully out of mind. I also knew that she had less difficulty accepting instructions from me. She was also one of our better archers.\n\nThe last member of my group was Guenna.\n\n- \"You don't have to come with us.\" I reminded her.\n\n- \"I know that my archery skills are sadly lacking ...\"\n\n- \"They're sadly absent.\" I corrected her. It was a silly attempt at a joke, but she smiled.\n\n- \"I know. But I can help you find the little knoll.\"\n\n- \"Not only that. You've come up with a plan whenever we need one. You're brilliant, Guen. How did that happen? You certainly didn't get it from me.\"\n\n- \"I did, Papa. You always found a way to keep us safe. And I listened. All those years at Moruith's cabin, telling stories of your father, and of Payl ... I listened.\"\n\nI felt that I was going to cry again. But I needed a clear eye - in fact, I needed all of my senses, and all of my wits about me.\n\nI didn't know the area around Moruith's cabin as well as Yevna. But I had travelled these paths regularly, for years. All I had to do was find one of the most likely spots for the Izumyrians to set up their camp - in the dark - while avoiding their pickets and sentinels. That, while hoping that the individuals we were looking for would be there.\n\nMy task was probably easier than Yevna's. She had to skirt the Izumyrian camp - again, in the dark - and find where they were keeping their horses.\n\nOn top of those difficulties, we had no way to coordinate our attacks. It was like being on opposite sides of the lake. I had to trust that Yevna would find her way.\n\nI stopped for a moment.\n\n- \"Veran?\" whispered Nameless.\n\nI didn't know what to say. For a brief moment, I was overcome by a thought. My daughters ... Tanguiste was the glue, holding so many disparate people together. Yevna was the forest spirit, wandering the woods, who kept us fed - and safe.\n\nAnd my baby, Guenna ... somehow she'd become a spring, a source of ideas.\n\nMeonwe and I ... we'd done well. Our daughters were wonderful persons, who could make a positive contribution to any community. Guen Nadesti had recognized Tanguiste for what she was, and accepted us on the Hill - despite the fact that I'd killed two of her sons.\n\nIt wasn't a competition. All three of my girls were amazing.\n\nThis night, I needed Tanguiste to help the Hvadi Duchess deliver a child, while keeping all of our non-combatants calm. Yevna had to circle the Izumyrian encampment, and find their weakest point. At the same time, Guenna and I had to bring Nameless, Seva and Libot to the exact spot where they could do the most good.\n\nWe knew where the Izumyrians would be. If they put their horses close to the stream, then there were only two other clearings where they could set up camp.\n\nOne, the larger area, was a spot we knew as the green glade. The second was much smaller, a small hump that was bare of trees. The little knoll, we called it.\n\nGuenna was guessing that we could find it in the dark, and approach without being seen or heard. We would have the darkness for an ally, and the Izumyrians' fear of an unfamiliar forest.\n\n- \"I'll say this now,\" she said, \"so that I don't have to say it when we get close: We go forward slowly. Carefully. Arrows nocked. And if a sentry spots us - we all shoot at the same man.\"\n\nNameless could move like a wraith. Libot and Seva were excellent foresters, as well. Guenna and I were the greatest liabilities. We took extra care with every step, making sure that we didn't tread on a dry twig, or kick a loose stone.\n\nI believe that I've said it before: there are few places as terrifying as the forest at night. There are real dangers, and then there is your own imagination, which conjures up monsters of your own creation.\n\nYou can hear your own breathing, and sometimes, your own heartbeat. As I stepped forward, a startled bird sprang from the undergrowth. It was a grouse, probably, or a chukar. I figured that out a moment later.\n\nBut for an instant, my heart stopped. Had I actually had something to eat earlier in the day, I might have shit myself.\n\nThe others in our small party were equally startled - or plainly terrified, as I was. Fortunately, no one had an arrow nocked, or it might have ended badly for me.\n\n- \"Shit, Veran.\" whispered Nameless.\n\n- \"Think I just wet meself.\" said Libot.\n\n- \"We're getting close.\" hissed Guenna. \"Keep it down.\"\n\nThat was true. The little knoll was much closer to Moruith's house. That was why Yevna was leading the other group: they had further to travel, in the dark, and I trusted her ability to find her way more than I did mine or Guenna's.\n\nShe was our best archer, and she should have been with this group, but no one else could have found the stream. Not at night.\n\nWhen my breathing returned to almost normal, we moved on.\n\nIf it is terrifying to move about in the forest at night, it's no easy thing to be on guard duty, either.\n\nLook at this way. You have a fire crackling, at your back. Your comrades may be talking - they certainly aren't whispering.\n\nIf you look into the forest, you see ... nothing. There's no convenient moonbeam, illuminating the spot you would like to see. You can't see many stars, through the trees. And if you turn around, for a moment, the campfire immediately ruins your night vision for the next few moments.\n\nStaring into the darkness for a long time quickly loses its lustre. After a bit, you start seeing things that aren't there. That's why many sentries end up facing the fire, keeping themselves warm, with their backs to the darkness.\n\nWe'd been on watch for years, on the Hill - admittedly, without a fire at our backs, most of the time. But the terrors of the darkness are real. I had a good sense of what those horse soldiers would be doing.\n\nGuenna suddenly stopped, and went to one knee.\n\nWe all did the same: it was the agreed upon signal if we were close to our objective. I looked ahead, trying to see what had alerted my daughter.\n\nAnd there it was: the glow of light from a fire, perhaps 200 yards away. The Izumyrians weren't concerned with hiding themselves. Why should they be? They outnumbered us 5 or 6 to one. Professional soldiers against a motley collection of old men and women.\n\nGuenna stood, and tapped each of us on the shoulder.\n\n- \"That's the little knoll.\" she whispered. There was no way that the enemy could hear us, at this distance.\n\nI tapped her hand, which was still on my shoulder, to indicate that I understood.\n\nWe didn't hurry forward. Yevna's group had further to go. It wasn't absolutely necessary that we attack at the same time, but there were several possible advantages if her party struck first.\n\nGuenna went forward very slowly ... and very carefully. We stayed close together. Then we stopped - and waited.\n\nI crouched in the darkness, behind a tree. I plainly saw an Izumyrian soldier, on the edge of the little knoll. He might have been peering out, into the forest, but he couldn't possibly have seen anything. Nor did I think that he could hear the beating of my heart, which was so loud in my own ears.\n\nThere was no way of calculating the passage of time. I waited, and watched, and listened. I was tempted to count my blessings, but that might have been a distraction that I could ill afford. Stay alert, I told myself. Stay in the moment.\n\nThe cry from the Izumyrian camp startled me. There were several shouts, and a babble of voices. Yevna had struck a blow - that was the only possibility. And the Izumyrians on the little knoll were just now learning of it.\n\nGuenna stood up, and boldly moved towards the knoll. I could see her, outlined by the light of the enemy's fire. She moved quickly, confident that our foes could not hear her.\n\nNameless flowed to her feet, and I rose behind her.\n\nWe all moved to the edge of the little knoll, and then climbed the short slope.\n\nGuenna had explained in great detail what we might have to do. We all knew our roles.\n\nIf Yevna and her group were attacking the Izumyrian horses, their leaders would have to gather, in order to organize a response.\n\nThere was another clearing where the Izumyrians would be camped, between the stream and the little knoll. But Guenna guessed that Count Seaglitz and his senior officers would reserve the little knoll for themselves.\n\nHow did she know?\n\nSeaglitz and his favourites could just as well have been camped with the horses, close to the stream. Or, they could have been in the other large clearing, with the majority of their troopers.\n\nSomehow, Guenna knew that the Izumyrians leaders believed themselves special. The horses were important: they had to be near the stream. The troopers were not as vital: find them a large open space, and that was sufficient.\n\nThe commander and his entourage, being the most important members of the Izumyrian force pursuing us, obviously deserved an exclusive place to pitch their tents.\n\nGuenna had guessed correctly. As we crept up the little knoll, we saw a cluster of men gathered outside a rather large tent.\n\nI even picked out the best possible target, in a target-rich environment. They were outlined by the light of their own fire.\n\nThe very moment I saw Count Seaglitz, surrounded by several of his cavalry officers, I let loose my first arrow.\n\nI missed. My fletched missile went past Seaglitz's chin, and fortunately struck the man beside him - in the side of the head.\n\nNameless, Libot, and Seva were more accurate than I was. An arrow suddenly sprouted from Count Seaglitz's face, and then a second hit him in the neck. The third thumped into his chest.\n\nWithout a sound, the Izumyrian commander fell.\n\nGuenna had coached us. Shoot - and keep shooting - until their leader(s) are down. That was exactly what we did. Seaglitz fell, and a moment later, two of his top officers were also struck down.",
        "The Izumyrian guards were completely confused. Where were these arrows coming from? The first sentry who figured it out died a moment later, as Nameless put an arrow in his throat.\n\nThat was all we'd come to do.\n\nI barked, like an animal - it was the signal we'd agreed upon beforehand. We began to pull back into the woods.\n\nThey could have heard us - we had to abandon stealth, at this point. But given that the Izumyrians were shouting, and running to and fro, it was unlikely that many of them could have distinguished the sounds we made, backtracking through the trees and the underbrush.\n\nI held a hand in front in my face, because I couldn't afford to lose my eye, at this point. My bow caught on the branch of a bush. I retraced my last two steps, and tried to work it free, rather than pulling or yanking at it, which might have snapped the branch.\n\nWe weren't moving very fast. But the Izumyrians weren't pursuing. A few of them had plunged into the trees next to the little knoll. There they wisely stopped; they had little to no hope of finding us in the darkness.\n\n***\n\nVingoldas and the others were waiting on the path. All four of them let out a collective sigh of relief when they caught sight of us.\n\nI let Guenna tell them what had happened. I was far too busy trying to catch my breath.\n\n- \"The Duchess?\" asked Guenna.\n\n- \"It's a boy.\" said Vingoldas.\n\n- \"An heir to the Duchy!\" said Prosquetel. I thought he was about to burst into song.\n\nNameless saw me labouring, and took my arm.\n\n- \"I'm not hurt.\" I protested. \"Just winded.\n\nShe was wise enough not to reply. Instead, she found me a large stone to sit on. Then she left me alone. Clever girl.\n\n***\n\nIt was hard to wait.\n\nFishing isn't waiting; if you're beginning to grow impatient, then you're doing it wrong. Hunting often requires tremendous patience. But if the weather grows inclement, or your quarry proves too elusive, you can always go home, and try again another day.\n\nOn this occasion, I knew that Yevna and her group had been successful. Whatever they'd done, it was enough to give us the opportunity we needed. Seaglitz and several of his top officers were dead, or seriously wounded.\n\nYevna had further to travel, so we could do little but wait, and hope.\n\nHad they been heavily engaged? Had they taken losses? And then, as the waiting dragged on ... would they come back at all?\n\nVingoldas cleared his throat.\n\n- \"Should we ... talk about tomorrow?\" he said.\n\nI glared at him. \"Without Yevna - without Giedra - we're done. You know that.\"\n\n- \"I think,\" said Guenna, \"that what Vin meant was that we would discuss what's to be done on the morrow given that Yevna's group will come in sometime tonight.\"\n\nVingoldas had the decency to blush, a little. That wasn't what he'd meant at all. He wanted us to face the worst possibilities. But I wasn't ready for that.\n\n- \"Whether they come back, or not, Guen, we're in no shape to do anything tomorrow.\" I said. \"We can't move the Duchess. And the fighters who are here have all had a rough day, followed by a sleepless night. You can't expect us to sprint six leagues with the elderly and the children on our backs. Not tomorrow, at any rate.\"\n\n\"Yevna's group will be more exhausted than any of us. They'll have to rest, too.\"\n\nI turned to Nameless.\n\n\"Make sure that you and Libot get some sleep; you may have to go out tomorrow night, again.\"\n\n- \"Alright.\" she said. Then she paused. \"Why not Seva, too?\"\n\n- \"She won't sleep any more than Guenna or I will, until Yevna comes back - she'll wait for her brother Weyl.\"\n\n- \"What was that about?\" said Vingoldas.\n\n- \"We're in the same situation we were earlier today.\" I said. \"If the Izumyrians come straight at us tomorrow, in force ... well, we can't hold. And we still can't run.\"\n\n\"But if Seaglitz is dead -\"\n\n- \"He is.\" said Guenna.\n\n- \"And if enough of the leaders, the officers, are also dead, or severely wounded ... and if Yevna's crew have driven off some of their horses ... well ...\"\n\n- \"They may not move.\" said Guenna. \"That's exactly what we were hoping for.\"\n\n- \"I understand that.\" said Vingoldas. \"But then we're still stuck in the same situation, only it's a day later.\"\n\n- \"Except that they may be leaderless.\" said Guenna. \"And if they are, we may be able to keep them off balance long enough for us to retreat.\"\n\n***\n\nYevna came in shortly before dawn.\n\nEvery surviving member of her party was exhausted, soaking wet and mud-spattered. Yevna herself could barely lift her arms.\n\nShe couldn't even speak. She caught my eye, and nodded once.\n\n- \"Let her lie down.\" said Giedra.\n\nThe big blonde warrior looked awful. Guenna took charge of her sister, while I quickly guided Giedra to the stone I'd been sitting on, and helped her to sit down.\n\n\"Anything to drink?\" she got out. \"I've built up quite a thirst.\"\n\nIt was pure bravado. Giedra could barely keep her head up, but she was still putting on a performance. I knelt beside her.\n\n- \"Rest easy.\" I told her. \"Your legacy is safe. If anything, you've enhanced it.\"\n\n- \"I like you, Veran. Have done from the first. But Yevna? I love that woman.\"\n\nI had to grin. \"Save your breath. Here - drink this. We want to hear what happened.\"\n\nGiedra took a long swallow, choked, and promptly spat up half of it on my leg.\n\n- \"Yecch! What is that?\"\n\n- \"Your wineskin.\" I told her.\n\n- \"Oh. In that case, give it back.\"\n\nShe had just enough energy left to play with me. Then we were interrupted by a piercing scream.\n\n- 'NOOO!\"\n\nI looked over my shoulder, to see Seva rushing toward me. Her face was contorted with rage, the veins and cords in her neck quivering.\n\n\"YOU! You did this!\" she shrieked. \"You split us up! You made me go with you, and sent Weyl with that bitch - and she got him killed!\"\n\nSeva was out of control. She was fumbling for an arrow (thankfully, she'd forgotten that she wasn't carrying her bow).\n\nFortunately for me, Nameless appeared behind her, and clobbered Seva in the side of the head. Hedyn and a few others came to help, and they subdued the red-haired archer. They actually picked her up, and carried her away.\n\n- \"Weyl?\" I asked.\n\n- \"He didn't make it.\" said Giedra. \"But there's more to it than that.\"\n\n- \"Tell us.\" said Guenna.\n\n- \"Yevna led us right to the stream. It was like she could see in the dark. How she kept us all together, without losing anyone ... it was uncanny.\"\n\n\"She found their horse lines. Better yet, she located the sentry at the corner of their camp, and put him down with a single arrow. Tremendous shot.\"\n\nGiedra paused, to take another swig from her wineskin. She grimaced, but swallowed it anyway. She had a great sense for drama.\n\n- \"Yevna had us all stay there, and went off on her own, like a ghost. I didn't hear a thing. Couldn't see, either, it was so damned dark. Then she appeared out of nowhere. I think she'd eliminated another sentry.\"\n\n\"She had us gather around her, and gave instructions. Clear, and short. Not a wasted word. We went in like ... like forest spirits. We cut their horse lines, and pushed their horses until they stampeded.\"\n\nAnother swig from the wineskin.\n\n- \"We ran into a couple of guards. I downed one - he was facing Rion at the time, so it was no great feat. Then Yevna began making animal noises, and we gathered around her. I suspect that we could have gone further, or done more ... but Weyl had lost his hand, almost up to the elbow.\"\n\n\"Odma had taken a knock on the head, too. He was staggering a bit.\"\n\n\"Yevna tied Weyl's arm with his own belt. Then she got us out of there. I'm still not sure how she did it. She was like ... a shepherd, with a flock of sheep.\"\n\n\"You know how dark it was? We stumbled around. Iduallon must've tripped over fifteen types of root and shrub. Yevna was half-carrying Weyl; I was steering Odma along. Then we lost Iduallon altogether. Yevna had to go find him.\"\n\n\"That was when we discovered that Weyl had been wounded in the thigh as well as the arm. He'd been bleeding all the way. Once he fell, we couldn't get him back up.\"\n\nGiedra made it sound like an inconvenience. I could well imagine the panic, lost in the forest in the middle of the night, when they discovered that one of their number was bleeding his life away in the dark.\n\n- \"Believe me when I say this: I truly don't know how Yevna brought the rest of us back. Eliv managed to stumble into a swamp, and Dengelle nearly drowned. But Yevna got us all back here.\"\n\nShe shook her wineskin. I think I need something else to drink.\"\n\nGiedra fell asleep before we could get her anything else.\n\n***\n\nI woke to find that Sulcen had lain down next to me. Her arm was across my chest.\n\nMy back was sore. When I gently disengaged from Sulcen, I discovered that everything was sore. My legs, my knees, my shoulders ...I had to roll onto my stomach, and gradually get my knees beneath me. Then I needed to lean on my sword just to get to my feet.\n\nFortunately, no one saw me - or, if they had, they pretended they hadn't.\n\nI couldn't have gone 6 leagues, up and down along those rocky mountain trails. The others were younger, for the most part, but if they were feeling anything like I was ...\n\nYevna was still asleep, with Guenna and Dengelle to either side of her. Vingoldas lay on his back, a few feet away, snoring to wake the dead.\n\n- \"Stiff?\" said Sulcen. Her eyes were open.\n\n- \"I'm too old for this.\"\n\n- \"Not yet. But if we keep this up, you will be.\" she said. \"We need to find a quieter place to live.\"\n\n- \"You mean a safer place.\"\n\n- \"If there is such a thing.\"\n\n- \"There is. We'll find it. I want to grow old with you, Sulcen. Well, older, at least.\"\n\nShe smiled at me. I wanted to kneel down beside her, and kiss her - but I wasn't sure that I could get up again without embarrassing myself.\n\n- \"Let Vingoldas sleep a little.\" she said. \"He was on guard until just a little while ago.\"\n\n- \"Who's on watch now, then?\"\n\n- \"Nameless and Libot have gone to scout. She said to tell you that they would be careful.\"\n\nThe fact that Sulcen was telling me these things meant that she herself had been up all night, too.\n\n- \"You should sleep a little more.\" I suggested. \"Are you cold?\"\n\n- \"No. I'm fine. Let Tanguiste sleep, too.\" Sulcen closed her eyes.\n\nHedyn was awake, too. We stayed on guard together, without saying much. If the Izumyrians had decided to strike back, Nameless and Libot might not be able to give us much warning - for all the good that might do.\n\nWe had a short, difficult conversation, talking about matters that should never have to be said. But my old friend was thinking the same things, and he seemed to take comfort in the knowledge that I felt the same.\n\nThere was one more thing I had to do.\n\nI went over to where Nameless had left Seva. To my surprise, the redhead's hands had been bound behind her back. She was lying on her side.\n\nAnd her eyes were open.\n\n- \"I'm sorry, Seva. I didn't know that Nameless tied you up. That must be uncomfortable.\"\n\nI drew my knife. I was feeling a little more limber by now, so I knelt beside her, and cut her bonds.\n\nIt may sound like a very foolish thing to do, but we weren't about to keep Seva tied up indefinitely. The moment we released her, she might very well try to kill me - she'd certainly been angry enough to try, last night.\n\nMy only real choices were to let her go, or to kill her. If she wanted to come after me right away, at least I had my knife. But Seva hadn't really done anything to deserve killing.\n\nWhen I severed the bonds, she slowly rolled onto her back. Then she brought her hands together, and began to rub her ribs. She glared at me - but it wasn't the murderous rage she'd been in earlier, when she discovered that her brother was dead.\n\n- \"I'm sorry about Weyl.\" I said. \"I always liked him. But I needed your skill with a bow last night. That's why I had you in my group. Well, that and the fact that you don't like Yevna. I wasn't sure that you would do what she told you to.\"\n\nI was also afraid that you'd be so busy looking out for Weyl, or for Iduallon, that you wouldn't be paying attention to the enemy.\"\n\nSeva didn't contradict me. So I carried on.\n\n\"Yevna should have been with us. But she's the only one who could find the stream where the Izumyrian horses were. In the dark, Seva. I couldn't ask anyone else to do that.\"\n\n\"So you had to be with me. Whose arrow killed Count Seaglitz? I missed him. Nameless, or Libot? Or was it yours?\"\n\n\"Weyl couldn't have helped us. Not with what we did last night. That's why I sent him with Yevna. I didn't mean to put him in any more danger than Yevna and Dengelle faced.\"\n\n\"But I'm still sorry. I'm going to miss him.\"\n\nAll the time I was speaking, I kept a careful watch on Seva's eyes. And her mouth. She looked angry, but not crazed. And I watched her mouth, because 9 out of 10 people will take a quick breath before they lunge at you.\n\n- \"What were you and Hedyn talking about?\" said Seva.\n\nThat wasn't quite the response I'd been expecting.\n\n- \"We ... we talked about private matters.\"\n\n- \"Were you talking about me?\"\n\n- \"No, Seva. We were talking about what we would have to do if the Izumyrians attacked in force today. Hedyn was facing the possibility that he might have to kill his own wife, to prevent her from falling into the hands of our enemies.\"\n\n\"Meanwhile, I was trying to steel myself to kill my wife, two of my daughters, and Dengelle.\"\n\nSeva only stared me for the next few moments. I had absolutely no idea what was going through her mind.\n\n- \"I'm all alone.\" she said.\n\n- \"No. You're not. No more than Odma, or Nameless, or Dengelle. You have family, Seva - if you want.\"\n\nOnce again, Seva stared at me for the longest time, without speaking.\n\n- \"I'm going to sleep now.\" she said.\n\n- \"I'll wake you if anything happens.\"\n\n- \"Alright.\"\n\n***\n\nNameless returned after mid-day.\n\n- \"Libot is watching the foot of the path, just in case.\" she said.\n\n- \"What did you find?\"\n\n- \"Very little. They're still there - at the little knoll. But they haven't come forward.\"\n\nI breathed a sigh of relief. \"That's good - because at this point, a dozen angry children could probably overrun us.\"\n\n- \"I notice that you're on your feet.\" she said, with a grin.\n\n- \"That's just pride. I can't feel my knees anymore.\" I said. \"How about you? Do you need to sleep?\"\n\n- \"I'll try.\"\n\nI don't know if she heard the word 'pride', or if she was just a light sleeper, but Giedra woke, and sat up.\n\n- \"Talkin' 'bout me?\" she grumbled.\n\nNameless smiled, and went off to lie down.\n\n- \"You can go back to sleep, Giedra.\" I said. \"There are no guslars here.\"\n\n- \"Guslars? Here?\" Giedra was wiping the sleep from her eyes, but I could tell from her grin that she was once again only playing with me.\n\n- \"You could've been a guslar yourself. That was some performance last night.\"\n\n- \"Ha! Hardly - I don't want to sing songs about others - I want them to sing about me.\" she said. \"And if only you were ten years younger, Veran, I'd show you another kind of performance!\"\n\n- \"You're one of a kind - I'll give you that.\"\n\n- \"How are we doing?' she asked. Typical Giedra - she could veer from tongue in cheek boastfulness to complete seriousness without taking a breath.\n\nI told her what I knew. She even asked about Seva, and I told her what had passed between the redhead and me.\n\nGuenna woke up, too - she seemed slightly embarrassed that her old father had gotten up before her.\n\nTanguiste came out to join us. She saw Vingoldas - or heard him snoring - and wisely decided to let him be.\n\n- \"Midwife to a Duke?\" said Giedra.\n\n- \"Nothing so glamourous.\" said Tan. \"Just a baby.\"\n\n- \"Was it difficult?\" I asked.\n\n- \"Compared to what you were doing? No, Papa.\"\n\n- \"Did she give the boy a name?\"\n\n- \"She did.\" Tanguiste made a face. \"She named him Borna.\"\n\n- \"She did?\" said Giedra. \"Big boots to fill.\"\n\nNormally, we Uplanders could care less about the Lowlands. We call them Niskadi, and we get through our days without even thinking of them. But the name Borna still carries some weight with us.\n\n- \"Think she knows what she was doing when she called him that?\" I asked.\n\n- \"Definitely.\" said Tanguiste.\n\n- \"Can we move them? Tomorrow?\"\n\nTanguiste was no fool. She was also an expert at reading my expressions - and Guenna's.\n\n- \"If you think it's necessary.\"\n\nYevna woke well after midday. She was mortified to have been asleep for so long.\n\n- \"Slow down!\" I told her.\n\nAfter a short conference with Guenna and me, Yevna was off again. She alone could find the sites where the Izumyrians might be - and then get away unseen. She was right, too; we had to know what our enemies were up to.\n\nGuenna took charge of making certain that everyone who been awake for too long got some proper sleep. She also warned everyone that the next day or two would be physically taxing.\n\nThen she tried to get me to sleep. \"Please, Papa. We'll need you, tomorrow.\"\n\nBut when Guen Nadesti came out to see me, what was I supposed to do?\n\n- \"I was right, Veran.\" she said.\n\n- \"Were you?\"\n\n- \"You know I was. After all of the bad decisions I've made in my life, I finally made some good ones.\"\n\nSulcen was sitting beside me as her mother spoke those words. I wondered if Mother Nadesti was speaking to me - or to her daughter. Was this some kind of apology?\n\n- \"You've always been fair with me.\" I said.\n\n- \"Don't be foolish, Veran.\" she admonished me. \"If I hadn't let you stay on the Hill, I dare say we'd all be dead by now. Your daughters have saved us - and you've done more than your share, too.\"\n\n- \"Thank you, Guen.\"\n\n- \"That was only one decision. I'm also glad that I forced you to marry my daughter. I think that she was exactly what you needed.\"\n\nThat surprised me. I would have expected her to say that I was just what Sulcen needed. But then my wife reached up and took her mother's gnarly hand in hers.\n\nOld Guen Nadesti looked at her daughter, who'd been so wronged. Then she glanced at me. There was so much history between us, so much more that could have been said.\n\nBut Sulcen didn't seem unhappy. And if she could accept her lot in life, could I do any less?\n\n- \"What happens tomorrow?\" asked Mother Nadesti.\n\n- \"We have to move, Guen.\" I said.\n\n- \"Then I'd better get some sleep.\" she said. \"Early to bed, early to rise.\"\n\n***\n\nYevna returned well before the dawn. She'd gone back to the stream.\n\n- \"More guards. Fewer horses, though. I don't think they've recovered all the ones we scattered.\" she said.\n\nGuenna agreed with me: that was good to know, but it didn't change the basic fact that we had to move. If the Izumyrians decided to push forward while we were trying to do that, then we were done.\n\nThere was nothing for it but to begin.\n\nA few days rest had been good for the older folk, and the children. But we would have to carry several of them over the rougher stretches.\n\nYevna would watch our backs, with the other archers: Nameless, Libot, and Seva.\n\n- \"Are you sure about Seva?\" asked Vingoldas.\n\n- \"No. But she'll either get over it, or she won't. Short of tying her up and carrying her, too ... what else would you suggest?\"\n\nWe were away just after dawn.\n\nThey say that slow and steady progress can win the race. We certainly had the first part of that covered.\n\nHedyn's wife carried their newborn, while Dengelle held the hands of their other children. But when we reached the first difficult terrain, both mother and baby had to be carried, and the toddlers as well.\n\nGuen Nadesti and the older women needed the same kind of assistance. And then there was the Duchess and her child.\n\nTo do this carrying, we had Giedra and her two friends, Hedyn and Odma, Vingoldas and me, and my two daughters. Sulcen pitched in as well, as did Gerimir the Lowlander. That was all we had. Prosquetel was showing his age, and Iduallon said that he couldn't help with our labours.",
        "- \"The Duchess requires my attention at all times.\" he loftily informed me.\n\nIduallon's face required the attention of my fist, but that probably wouldn't have improved our situation.\n\nBy midday, we'd covered a little over a league.\n\nWe were descending the skirts of Myeva, the third of the Three Sisters. Going downhill is much more difficult than climbing. Every step sends a shock of impact through your knee. A slight misstep can lead to a fall, or a twisted ankle.\n\nWhen carrying someone else in your arms, it can be potentially dangerous as well, because you can't always see where to place your feet.\n\nGiedra was a tower of strength, and Gerimir proved his worth - a good thing, that, because Vingoldas wasn't fully recovered from his injuries.\n\nFor the first few hours, I also found myself looking back over my shoulder fairly frequently, expecting to see Yevna running towards us, with the Izumyrians in hot pursuit. Nor was I the only one.\n\n- \"They're either coming, or they're not.\" said Guenna. \"There's nothing you can do to change it.\"\n\n- \"Smartass.\" That was exactly what I'd told her - and her sisters - whenever they worried about things they couldn't possibly change. When Tanguiste was a little girl, she'd been worried that her ears would grow too big, and stick out from her head.\n\n'They will, or they won't.' I told her. Then I promised her that if her ears got too big, that I would trim them for her. I showed her my long knife. Tanguiste ran away screaming, with her little hands tightly pressed over her ears.\n\nFor weeks afterwards, I only had to draw my knife and show it to her for Tanguiste to run off screaming. The memory of it made me smile.\n\nWe let everyone rest for a while, and then resumed our snail's progress.\n\nIn fact, though, the terrain was levelling out, and the going became a little easier. We were between Myeva and the middle Sister, Beska. Myeva was the tallest of the three, with a snow-covered peak for most of the year.\n\nWe covered more ground in the afternoon - perhaps another two and a half leagues.\n\n- \"Should we stop and let them rest?\" asked Guenna.\n\n- \"Push them.\" I said. \"Every little bit we do today means less for tomorrow. Just in case we have to push even harder.\"\n\nShe knew what I meant. Evidently, the Izumyrians weren't coming after us today. But if they came tomorrow, on horseback, they would catch us up in no time.\n\nWe coaxed another half league out of our people. When we finally called a halt, most of them simply collapsed. We had to wake some of them up in order to feed them.\n\n***\n\nYevna and the archers came in after dark.\n\nSeva had a bow in her hands, and she didn't shoot me. It was a victory of sorts, I suppose.\n\n- \"Nothing. Not even a scout.\" Yevna told us.\n\n- \"Pray that it stays that way tomorrow.\" said Vingoldas.\n\n- \"But don't count on it.\" said Guenna.\n\nWe took turns on watch that night - very short turns.\n\nIn the morning, it took some time to get our people moving. There were groans everywhere; everyone seemed to be suffering.\n\nI pushed, Guenna pleaded, and Tanguiste cajoled.\n\n- \"You've done well so far.\" I told the Duchess. \"Another few leagues, and we'll reach a defensible position.\"\n\n- \"Thank you, Veran.\" she said. \"We greatly appreciate the service you've done us.\"\n\nThere she went again. I'd come by to pay her a compliment. A simple 'thank you' on her part would have been sufficient. Instead, the Duchess managed to make it sound like everything I'd done - and, by extension, everything my daughters had done - was nothing more than what we owed her.\n\nWell, I wasn't obliged to advise her on how to deal with Uplanders. If she kept on with this superior attitude, with her nose in the air, she wasn't going to make many friends among us. That led me to wonder: how had the original Borna done it? Why had Payl - and many others - joined his cause?\n\nWe got our little caravan of aches and pains moving.\n\nNow we were beginning to climb again, on the lower slopes of Beska. There were fewer trees here, because the ground was so rocky, with many patches of bare stone.\n\nDengelle stumbled, while she was carrying one of Hedyn's children. Fortunately for the child, Dengelle was able to spin, and fall on her back. The little one suffered no harm; but Dengelle broke her arm.\n\nSometimes, I think, the Fates are more than capricious; they're cruel. How else can you explain the fact that someone who has already suffered so much is given additional pain to deal with? Some people bear far more than their fair share, it seems to me.\n\nWe reached the Steps in the early afternoon. A series of rocky outcrops lay ahead; it was almost as if a giant had created a terraced gardens. It took us almost until dusk to lift and carry everyone over these obstacles.\n\nThe good news, though, was that when (or if) the Izumyrians arrived here, they would realize that it was virtually impossible for horses to cross the Steps. They could try to go around, of course, on narrow tracks through the forest. With any luck, they'd get lost.\n\nWhile they tried another way to get at us, we would be able to move on more easily: the ground after the Steps was bare, and rocky, but much more level.\n\nFor now, we were safe.\n\n*****\n\n<hr >\n\n French Marshal Foch may have said it best during WW1: \"My center is giving way, my right is in retreat; situation excellent. I shall attack\". Of course, he also later said 'Airplanes are interesting toys, but of no military value'.\n\n \n"
    ],
    "authorname": "AspernEssling",
    "tags": [
        "combat",
        "dark ages",
        "fantasy",
        "swords",
        "women warriors"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/the-chronicles-three-sisters-15"
}
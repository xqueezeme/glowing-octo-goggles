{
    "title": "The Hacker",
    "pages": [
        "It had been a long day, Steve was fumbling for his keys when a somewhat strained voice shook him from his fog.\n\n\"Steve, I hate to ask, but could you take a look at my computer?\"\n\nThat figures, he thought. 10 hours of computer work at the office and I get to do charity work as soon as I set foot in the door. Cindy was nice enough and he really didn't mind helping her most of the time but this was the third time in as many weeks she had an issue with her PC.\n\n\"Could it wait till the weekend? I'm just getting home and...\"\n\n\"Please, I'll order pizza or something to make it up to you.\"\n\nKnowing the tone from years of experience, there was little chance of talking his way out of this.\n\n\"OK, but hold off on the food. Let me see what's going on first, it might be a quick fix\"\n\nAbout a hour later, and one pizza slice remaining...\n\n\"Cindy, how does you computer keep getting loaded with all this stuff?\"\n\n\"I don't know, it's not like I'm going to the sites from the pop-ups, I hate those stupid hackers\"\n\n\"You mean crackers\"\n\n\"Aren't the guys who do stuff like breaking into the FBI called hackers\"\n\n\"Yea, the media calls them that, but it's more correct to call them crackers. Hackers aren't always bad, they just want to take stuff apart and see what's inside. Sometimes to see how it works or to make it better. Other times they want to make something do stuff that nobody ever thought it could do.\"\n\n\"Like how\"\n\n\"Well, software hackers like to do stuff like advancing a program so it could work with files that it couldn't use before, hardware guys like to stuff things into places that you wouldn't expect\"\n\n\"Sounds naughty\"\n\n\"That's not what I meant\"\n\n\"So what did you mean?\"\n\n\"Like putting an MP3 player into a cassette player, or a cell phone into an old telephone\"\n\n\"Crazy\"\n\n\"It can be, I know I've had some wild ideas but I don't get a lot of time to work on them\"\n\n\"So, you're a hacker then?\"\n\n\"I guess. Trapped by my own definition\"\n\n\"So what kind are you, software or hardware?\"\n\n\"Hardware, definitely. Software is too intangible - I like working with my hands\"\n\n\"Oh so you like stuffing things into unexpected places and surprising people then?\"\n\n\"Cute, I like the challenge. Thinking of creative ways to use ordinary items.\"\n\n\"So like what exactly?\"\n\n\"Like building an MP3 player into a Jukebox or a picture framed LCD that can connect to my computer to run slide shows so I don't have to look at the same picture all the time.\"\n\n\"Hmm... what's the wildest thing you've seen done\"\n\nDistracted by another pop-up Steve didn't even process what he was saying until it was too late.\n\n\"A mixer turned into a fucking machine\"\n\nReality seemed to halt and freeze. The seconds seemed like hours before Cindy recovered from the statement.\n\n\"What! No! Really? You're not serious?\"\n\nFlushed and on the verge of stammering Steve decided to play bold.\n\n\"Sure, the body is not that different from other machines. You just need to know how to work with it. Body-building could be considered hacking for that matter.\"\n\n\"Yea, but that's not as nasty as fucking somebody with a mixer. How can that feel any good, spinning like a mixer seems kinda pointless.\"\n\nDamn, he thought, so much for derailing that train.\n\n\"Well, it doesn't work like a mixer. They hacked it to um... thrust um... in and out.\"\n\nCindy was now giggling and turning red.\n\n\"Bullshit\" she shot between giggles \"you're making that up to try and embarrass me.\" \n\n\"Really, wanna bet on that?\"\n\n\"Sure, loser cleans the winners apartment\"\n\n\"Deal\"\n\n\"In the buff\"\n\n\"Um... you sure about that?\"\n\n\"Damn right I'm sure. Chickening out on me?\"\n\n\"Nope, just making sure. I'd hate to have you think I'm being unfair.\"\n\n\"You're assuming that I'm going to lose here ya smartass. How long do you want to produce your 'proof' of this mixer-fucker-thing\"\n\n\"How long do you want to give me?\"\n\n\"I'd give it a week before I'd have you cleaning the crown moulding in here\"\n\n\"How about 5 seconds?\"\n\n\"Bullshi...\" Her voice trailed off as he swivelled the monitor to her and she saw a woman with her legs spread wide being fucked by a highly modified mixer. The sound was down, but was still loud enough that she could hear the woman moaning over the noise of her mechanical lover. Her eyes were closed in and her body was tremoring with a combination of spasms of pleasure and impact from the machine relentlessly pounding into her body. Cindy was dumbstruck. She just lost the bet but she couldn't take her eyes off the screen. It couldn't be, things like this don't really exist. The woman on the screen raised her feet even higher in the air and started to sound almost desperate in her moaning. \n\nSteve realized that he just crossed a line and he needed to do some damage control before Cindy thought he was a complete pervert, he killed the video window and swallowed hard.\n\n\"You know what, deals off. I knew I'd win \u2013 it's not right\"\n\n\"My.. my.. my stupid idea, besides what if I'd won. You'd do it, I know you would. You want me to come over tomorrow to clean your place\"\n\nSteve thought about it for a few moments.\n\n\"Um, I'm going to be a bit late tomorrow. How about Friday, after work\"\n\n\"Sure. I'll see you then.\" Cindy sounded a bit hurt, still smarting from losing the bet. \n\nFriday after work, Cindy came home and grabbed a shower. Her thoughts were still haunted by the video Steve had pulled up. What would it be like to have a machine like that? A lover that would never quit until you were satisfied? Pounding into you, relentless and insatiable. Her hands lazily crossed her nipples and ran down her stomach to her pussy. She slowly spread her lips with her fingertips and felt the warm water dancing across her labia. Slowly circling her clit with her water slick finger, she let her mind toy with being pounded by the machine from the video. Faster than she expected the crest of a climax came rising. She closed her legs tightly and rocked her hips gently to allow her clit to squirm against her now captive fingers. Waves of pleasure rolled through her and slowly subsided. Spent, she sank to her knees and let the water flow over her for a few minutes while she recovered from the orgasm. \n\nAfter the shower she fixed her hair and made a quick snack. \n\n\"Well girl, you've done it now. Cleaning a guy's apartment wearing nothing but a smile. If this doesn't teach me to keep my mouth shut nothing will\" She said to herself between bites.\n\nShe pulled on a thick terry cloth dressing gown and headed down the hall to Steve's door.\n\nShe bit her bottom lip as she raised her hand to knock on the door and wondered if she could figure out a way to back out of this. \n\n\"No, I made a bet. I'll follow through with this\" And she knocked firmly on the door.\n\n\"Hold on\" came the voice from door.\n\nHer heart jumped as the lock snapped open and she actually had to fight the urge to run as the door swung open.\n\n\"Steve.\" she said as controlled as her nerves would allow. Not waiting for him to invite her in, she stormed in so she couldn't change her mind. Once she was inside, she thought, I can't get away \u2013 I'll have to go through with this.\n\nShe allowed her eyes to scan the room, checking out places that she could simultaneously clean and hide behind and she started to come to a realization.\n\n\"Did you clean this place before I came over?\"\n\n\"No.\"\n\n\"Why is it so clean in here. My mother's place should look this clean\"\n\nSteve just stood there with a hint of a smile.\n\n\"Steve... So help me, if you don't fess up.\"\n\n\"OK, ok. Calm down. I hired a cleaning service. You were ready to pay off the bet, but there's nothing to clean so it's all good. You can go home, it's all good.\"\n\nCindy was frozen. All she could do was look at him. This was the most confused she could ever remember being. On one hand this was the sweetest most honourable thing anyone had ever done for her. On the other hand, who the hell asked him to pay her bet?! Dozens of guys would love to have her running naked around their apartment, what the hell was wrong with him.\n\n\"Oh well, I'm not going home just yet. I planned to be over here for a while and I don't care if all I do is sit around\" And with that she slipped out of her gown and handed it to him \"Hang that up for me will you\"\n\nSteve was stunned. Things like this only happen in the movies. He'd tried to make it so Cindy wouldn't have to feel like she was being hustled, but she seemed more determined than ever now to go through with it. What does one do with a hot naked woman that refuses to leave your apartment \u2013 the question sounded so ridiculous all he could do was smile.\n\nAfter about half an hour he was starting to get used to the idea of a naked Cindy chatting on the couch with him. He was fighting the urge to let his eyes wander over the beautiful body.\n\n\"You know, I still don't get this hacker thing\"\n\n\"What don't you get?\"\n\n\"I mean, why? If a computer works fine as a computer, why try and make it look like a toaster?\"\n\n\"It's a combination of things. Challenge, expression of individually, and invention mostly\"\n\n\"Showing off too I guess?\"\n\n\"For some people, I'm more about finding new ways to use things\"\n\n\"Like what for example\"\n\n\"Well, I don't know. That glass vase might look good as a fish bowl\"\n\n\"Too easy, I could have come up with that\"\n\n\"I didn't know this was going to be a test. OK, how about the coat rack changed to be a plant stand\"\n\n\"Steve\" she said mocking him with her eyes \"turn in your hacker membership card \u2013 that was lame\"\n\n\"Fine, tell you what. You pick something and I'll tell you what I can do with it.\"\n\n\"OK, the rug by the door.\"\n\n\"Too easy, drop in a pressure switch and tie it to a remote actuator on the door so it'll open automatically when you step on the mat\"\n\n\"Hmm... too easy. The stores have had that forever. How about those metal bowls\"\n\n\"Now there's a challenge. Let me see, drill a hole in the centre of each, mount them inverted on a rod so they hang like bells and get a small pump to turn the whole thing into a water cascade. If you really wanted to step that up, you could hook up a clock with a trigger and a few servos so it'd chime on the hour too.\"\n\nCindy, forgetting that she wasn't wearing any clothes, moved her hands off her breasts and slapped both hands on the couch as she laughed. The quick change in temperature caused her nipples to stiffen so rapidly it almost hurt. Her hands dove back to cover them almost before she realized what was happening\n\n\"God Steve, how did you come up with that so fast?\"\n\n\"It's natural for me. I see the world in less rigid forms than most people\"\n\n\"So you could turn just about anything to a purpose of your choosing?\"\n\n\"Within certain limits of course. TNT isn't a good choice for a fireplace liner.\"\n\n\"Very funny\"\n\n\"But true. Safety, then hacking. In that order.\"\n\n\"And anything can be hacked?\"\n\n\"Virtually, I can't think of anything that couldn't be hacked\"\n\n\"I'll make you a bet\"\n\n\"That didn't work out so well for you the last time\"\n\n\"Smartass, there are worse things than having a naked woman on your couch you know.\"\n\n\"Fine, what's the bet then\"\n\n\"I bet you can't use your hacker skills to accomplish a task that I set out. The rules are this. You can only use what you find in this apartment, you can't use the phone to get stuff from outside. You can use your hands to build and use what you build. You cannot make physical contact with the item to be hacked. Oh and there is a 2 hour time limit.\"\n\n\"Interesting, what do you get if I can't complete the challenge?\"\n\n\"You have to be at my beck and call for a week. Housework, computer service you name it. I'll let you keep your pants on though.\"\n\n\"What if I win?\"\n\n\"I'll do the same, clothes on this time though.\"\n\n\"Two hours, anything in here. I don't know.\"\n\n\"Chicken, come on. I promise I won't make it hard on you when you lose.\"\n\n\"What makes you think I'll lose?\"\n\n\"You tell me. You're the one who's hesitating\"\n\n\"Fine, deal. What am I hacking?\"\n\n\"Me.\"\n\nSteve's brain forced everything into slow motion as two distinct streams of thought shattered against each other. The drive to evaluate everything he had in the apartment as a hackable item and the concept of pleasuring Cindy didn't mix well. He dropped back on the couch and closed his eyes to settle his mind.\n\nCindy almost passed out as she heard the challenge she made to Steve, had she lost her mind? And what was up with Steve? He just looked like he went to sleep. What was she thinking?\n\nSteve's mind was still fragmented but it was clearing, his eyes snapped open and locked to Cindy's.\n\n\"A couple a extra rules before we start, OK?\"\n\n\"Like what?\"\n\n\"There is no such thing as weird or kinky for the next two hours. You stop me, you lose.\"\n\n\"Ok\" She said a bit slowly, as if chewing the thought as she agreed to it.\n\n\"Is there anything you need to tell me before we start?\"\n\n\"Like what?\"\n\n\"Are you allergic to anything, do you have any phobias I should know about?\"\n\n\"Jesus, what are you planning? Forget it, I'm not allergic to anything and the only thing that scares me are leeches \u2013 long story, don't ask.\"\n\n\"Well, let's get started. Would you go to the bathroom and get the toothbrushes in the left drawer. There's a manual one and an electric\"\n\nCindy bounded off at a pace that matched her heartbeat. She found what she came in for and was about to head back out when she stopped and looked at herself in the mirror.\n\n\"What the hell am I doing? I'm crazy. I'm scared out of my mind.\"\n\nShe shook her head and set her look to a more determined one. \n\n\"A bet's a bet\"\n\nWhen she came back into the living room Steve had been moving some of the furniture around and was currently engaged in digging in a pair of foot lockers.\n\n\"Oh, hey, great thanks. Would you grab the broom from over by the door and bring it over.\"\n\nA bit confused but still playing along she retrieved the broom as he requested.\n\n\"So why move the couches closer together.\"\n\n\"To buy myself some time.\"\n\n\"What? Did you hit your head while I was gone?\"\n\n\"Just give me a minute, you'll see.\"\n\nShe watched as he pulled out two party balloons and stretched them over the head of the electric toothbrush. He then removed the head of the broom and then held it out to the arms of the couch and then looked back to Cindy. Her face flushed as she realized that he was staring very intently at her crotch. \n\n\"Cindy, can you grab me a couple of books. I think the hard cover Spanish-English and the thesaurus should do.\"\n\nDutifully she brought them back in time to see Steve pull out a roll of duct tape and watched as he started taping the books to the ends of the broom handle. Then the balloon wrapped electric toothbrush was taped to the centre of the broomstick. \n\n\"Ok, round one is ready. Stand over this and pick it up.\n\nCindy was now seriously concerned. This looked like junk and tape \u2013 maybe she made a mistake. She did as Steve asked all the same.\n\n\"Now what\"\n\n\"Keep the stick between your legs and place to books on the arms of the two couches and you'll get the idea\"\n\nAs she moved into position it started to make sense. The books were to make up for the difference in the hight of her pussy and the arm of the couch. It was now less than an inch away from her lips.\n\n\"Now, this isn't much of a hack, but lets see if this does anything for you\" \n\nShe felt something touch the back of her neck and slowly slide down her spine. Soft but kind of tingly \u2013 the other toothbrush. She dropped away from the stimulation as it was almost too much and then realized that the broomstick was directly in her way. Now the toothbrush wandered its way across her hip and down her leg and started stroking the back of her knee. \n\n\"Move forward, about a foot\"\n\nShe moved as she was told. The rubber clad tip of the other toothbrush was now nestling itself in to the folds that hid her clit from the world. Steve reached down and flicked the switch.\n\nCindy's mouth formed a silent \"O\" and then spread into a dreamy smile as she now understood. The head of the toothbrush was buzzing and stroking her clit like nothing had ever done before. More pronounced that a vibrator, she could feel the bristles twisting and thrusting under the rubber sheath. She resisted the urge to jump away from the intense sensation. Instead, she bit her bottom lip and waited for her body to catch up with the machine. Steve kept moving the toothbrush, up her leg, her hip, stomach and breast. Then gently circling her aureoles and grazing the tips of her nipples. All of this stimulation was starting to pile up on Cindy and she felt the familiar sensation of too much water behind the weakened dam. Once Steve moved the toothbrush off her nipples and started grazing the back of her neck she lost it. Lights and sound exploded in her mind and it seemed an eternity until reality bled back into her mind and she noticed Steve beside her with a slight smirk on his face.\n\n\"What are you so happy about?\" She moaned.\n\n\"That seemed \u2013 satisfying.\"\n\n\"Ha, you wish. I can do better myself\" she lied. No point in letting him win twice in a row if she could help it.\n\n\"I see\" he said, understanding the challenge had just ratcheted up several notches. \"Hmm... how about this\" \n\nHe grabbed a bath towel from the linen closet and quickly tied an overhand knot in it and headed for the kitchen. The sound of running water was soon followed by Steve's reappearance. Without a word he returned to the linen closet and opened the door. He then placed the end of the towel in the door jamb opposite the striker and closed the door.\n\n\"Come over here\" he said, More inviting than commanding.\n\nCindy had a pretty good idea what was going on, and moved between Steve and the door. Without a word, Steve reached between her legs and pulled the knotted fabric up to her belly.\n\n\"Take the end\" he said. Almost against her better judgement she complied \n\n\"Now what?\" she challenged.\n\n\"Hold your hands right where they are and step towards me\" He said with a devious grin.\n\nShe did as he asked and was prepared to feel the knot in the fabric come up to her pussy, what she didn't anticipate was the heat from the hot water that Steve had dipped the knot in. Shocked again and pleasantly, she heard a moan escape from her body that she really didn't intend. She was further surprised that her hips moved to grind her clit into the warm rough knot.\n\nSteve watched as Cindy instinctively increased tension on the towel and ground her hips to increase her pleasure and had to literally shake his head to bring his mind back to the task at hand.\n\nSteve crossed the room and dove into his footlocker again. Cindy could see him work and was fascinated with how he evaluated various items he was pulling out. In less than a minute he was back. He tossed the items from the footlocker onto the counter and started to work. A thick piece of wire cut to about two feet long and quickly placed to one side. He then grabbed a pair of alligator clips and used a small pair pilers to bend the springs inside the clips. He then tested the clips by clipping them to his upper lip. After a few adjustments he was satisfied with reduced pressure of the clips. He then cut four small pieces of heat shrink tube and slipped them over the tips of the alligator clips and then gently heated them with a mini torch. Next, the clips were attached to opposite ends of the wire. He brought this over to her and without a word attached each end to her nipples. The pressure was not painful, more like someone firmly holding her nipple with their fingers.\n\n\"Home made nipple clamps, clever boy.\"\n\n\"Maybe more clever than you think. Take a deep breath\"\n\nShe did, and immediately understood what he meant. The stiff wire had some give to it, but it exerted pressure in almost a twisting fashion with each movement. She swung her breasts and pressed then together using her forearms to see how different motions would feel. In her current state of arousal, it would almost be enough to put her over the top again, but the towel had cooled down and her legs were starting to get tired. ",
        "\"Whew, I need a break. Mind if I sit down for a breather\" As she walked to the kitchen to find a chair the clamps twisted and tugged on her tits, a happy sounding sigh passed her lips as she dropped down on one of the barstools.\n\n\"So, you running out of ideas yet?\"\n\n\"Not exactly, time is my problem right now.\"\n\n\"What do you mean by that?\"\n\n\"I can come up with hundreds of things to do, but I either don't have the material at hand or it'll take me hours to put together. Ah ha! Got it! You want some water while I get this ready?\"\n\n\"Sure, I'm almost afraid of what you've just come up with this time.\"\n\nHe passed a bottle of water to her from the fridge and pulled out a small zucchini and a cucumber. He also grabbed a peach from the fruit bowl and dropped them on the counter.\n\nHe moved to the row of drawers and started rummaging around, he'd occasionally look at an item and either put it back or develop kind of a smirk and drop it on the cutting board.\n\nShe watched as he worked, taking sips of the cool water and trying to figure out what he was planning this time. The cucumber was planned for her pussy she guessed, but the rest of it had her baffled.\n\nThe drawers closed and Steve now pulled a chef's knife from the block on the counter and cut the peach in half. The pit was discarded and the peach halves were placed on a small platter. Next, he used a peeler to skin one side of the cucumber. Next he cut off one end diagonally and then bevelled the edge with peeler. He used a garnish tool for making ripple cuts to make a long ridge back pattern on the peeled side. This was also dropped on the platter and he moved silently to the zucchini. Using a citrus scoring tool, he cut a series of gentle spirals up the length. Next he used a melon baller the size of the tip of Cindy's pinky finger to cut little craters all over the surface between the grooves. He then used an apple corer to cut a socket into the base and placed it on the platter with the rest. All of this was placed in the microwave and given 15 seconds at full power. Steve felt everything and seemed pleased with the results. Next he took one of the barstools and flipped it over. He now grabbed a rolling pin from the counter and using the duct tape from earlier he quickly secured it to one of the chair legs. Cindy was lost at this point, she knew something was intended to go in her pussy but what and how was not apparent. She wasn't pleased that the most obvious thing was the cold hard handle of the rolling pin and if that was the plan, Steve was going to be losing this bet.\n\nShe needed have worried, Steve was planning far more than she saw. \n\n\"Come over here, I think you'll like this\" She stood up, moved over to him and watched as he slid the socket he cut in the zucchini onto the handle of the rolling pin. He then tore open a condom packet and slipped the condom over the zucchini.\n\n\"Just in case the edges were too rough, this will make it more comfortable.\" he explained. \"Ok, it's ready \u2013 climb on\"\n\n\"God I can't believe I'm doing this. Fuck this is so kinky.\" She stood on the balls of her feet and backed onto the rig. She used her right hand to spread her lips and guide herself to the target. Still slick from all the rest of the stimulation, she had no need to hesitate but decided to take this slow and savour it. The round tip was nestled inside her lips and she held there for a moment. Truly, all the stimulation so far had not concentrated on penetration and her pussy ached to be filled. Slowly she relaxed her feet and slipped down. She licked her upper lip as a delicious feeling of fullness spread up through her and moaned softly. Inch by inch another sensation dawned on her. All the grooves and craters felt like rippling waves against her vaginal walls as she dropped further down. \n\n\"Oh god that feels amazing!\" she groaned.\n\n\"Glad you like it. Want more?\"\n\n\"Give me a sec, I'm liking this as it is. Let me play for a second.\" She started sliding back up the shaft by rising back up on the balls of her feet. The highly textured shaft was almost enough to make her cum, her muscles clenched and rolled now beyond her control. The clamps were still working their magic as her breathing increased and her tits swung with the rhythm of her rise and fall motion. Without warning, the left clamp popped off her nipple, the sudden release and rapid twist on the the other one sent waves of delightful sensations through her and she closed her eyes to savour it. Almost immediately she felt a warm mouth on her left nipple \u2013 she snapped her eyes open to find Steve's face level with hers. Confused she looked down and saw Steve using one of the warm peach halves to circle her nipple. He increased pressure on the fruit and it yielded and distorted, almost mimicking a suckling mouth. The juice ran down her stomach and down her left leg. More kinky sensations, this man was making her lose all control and true to his word he still hadn't laid a hand on her. Imagine what he could do with her if he was able to touch her directly. Her head dropped back as waves of pleasure continued to increase in her and she was about to start her hand towards her clit to end the torment when a warm tongue wormed its way straight to her clit in one fast motion. Her head came back to find Steve still level with her. Looking down she saw that he had slipped the cut end of the warmed cucumber against her snatch and was using it to 'lick' her clit in slow lazy circles.\n\nThat was it, a complete overload of stimulation combined with the overall naughtiness of the situation meant that there was only one response for her body.\n\n\"Oh... my... gnnngh!!!\" and Cindy's body stiffened and locked. Her hands flew back to the counter behind her and her knuckles went white from the pressure her grip exerted. Her breath came in ragged desperate gasps and shuddering waves of pleasure crashed through her mind and tremored though her body. Wave after wave rolled over her, in spite of her determination not to show him that she was so easily simulated. After what seemed like hours, her body returned control to her.\n\n\"Oh... my... That... was... epic...\" she gasped between ragged breaths.\n\n\"Can you handle one more?\" he asked. \n\n\"Why what have you got up your ohhhh...\"\n\nFaster than she could track in her orgasm fogged state, he clipped the left nipple clamp back on and snapped on a carbiner to the wire. This simply served to increase the weight on the wire and thereby to increase the tension on her nipples. At the same time, he flipped the cucumber over and was using the rippled side of it like a washboard on her clit. If that wasn't enough, his hand fell to the unused end of the rolling pin and he started twisting it left and right. The effect was dramatic. If she had any defence built up against the sensations he had previously subjected her to, they were useless now as he had completely changed the parameters. She didn't care, the wave built again and all she wanted to do was ride it. The rippling at her clit, the twisting in her vagina and the tugging on her nipples all made it impossible to do anything but cum. Spasm after spasm racked her frame, her pussy twitched and pulsated like it had never before, her clit begged to be relived of this stimulation but her hips forced it down to as far as her body could drop. A conflict that only resolved itself as the final orgasmic waves shot through her and she came back up on the balls of her feet moaning.\n\n\"I can't... No more...\" With the green invader out of her and clear of the rest of the stimulation, she mindlessly tugged the nipple clamps off her and sagged to the floor, trying to recover.\n\n\"So, I guess that means I win the bet?\" Steve said with a grin.\n\n\"I guess so.\" she said as she got to her feet. Wobbly and off balance she tottered and fell towards Steve. He grabbed her and held on until she regained her footing.\n\n\"You OK?\" he asked.\n\n\"I am now!\" She grinned \"You lost the bet \u2013 you touched me with your hands!\"\n\n\"Damnit, you cheated!\" He accused\n\n\"I hacked it would be more correct. You're my slave for a week\"\n\n\"And what do you want me to do, my master?\"\n\n\"Hmmm.. I have this mixer that needs to be reworked\" she said with a grin.\n\nEnd of part 1"
    ],
    "authorname": "Techomancer",
    "tags": [
        "wager",
        "food",
        "vibrator",
        "challenge",
        "hacking",
        "male dominant"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-hacker"
}
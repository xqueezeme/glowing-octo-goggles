{
    "title": "Blasphemia Ch. 08",
    "pages": [
        "A phantom wind blew through across the monochrome Prototory reflection of the Saint Bethany's quad, stirring the hair and clothes of those who had them. Lily turned to and fro as she struggled to get a look at her derriere. \"Seriously, is my ass big?\"\n\n\"Several thousand years lying dormant and the first thing you care about is how your butt looks,\" Satan drawled. \"Seems so appropriate for you, Lilith.\"\n\nLily turned her head towards him. Her eyes narrowed, and both Nico and FIlia caught a glimpse of something old and ancient slithering behind her gaze. \"You... I remember you.\" She raised an eyebrow. \"Didn't you use to be taller?\"\n\nSatan gave her a flat look. \"Times change.\"\n\n\"And you two.\" She looked to the two Infernals. Her lips curled up in a small, demure smile. \"Guess we had more in common than we realized at first, hm?\"\n\n\"Aye,\" Nico nodded. \"Good to have you back, Lily. Or is it Lilith?\"\n\nLily raised an arm and looked over herself. \"I'm not sure. I am Lilith, yes. There is no crisis of identity for me. Yet I also am just Lily. It's like I'm perfectly capable of being both at the same time, like they're one in the same.\"\n\nFilia's wings gave a little flutter. \"Then what name do I call you when I'm knuckle deep in your-\"\n\n\"Ahem!\" All of them turned towards Judith, who was picking herself up out of the dirt again. \"Maybe instead of immediately segueing back into your innuendo filled banter we could deal with the big godsdamned problem!\" She pointed with her dagger.\n\nAzagthoth was on his hands and knees. He crawled towards them slowly, the motions jerky and unnatural, like a marionette manipulated by a drunkard. With every motion, a bit of him sloughed off, the flesh putrefying in milliseconds and sizzling with an acrid smell as it touched the ground. \"So long,\" he gurgled, the sound emanating not from his mouth but somewhere in his center mass. \"So long without remembering, so long with a cohesive form... it's maddening...\" His voice had a metallic ring to it, yet with a wet undertone, like water sloshing around in a tin can.\n\n\"What the fuck is that?\" Filia said, taking a step back.\n\nSatan's voice was surprisingly free of snark as he stepped forward, his own form warping and twisting. \"Do you lot want to know the secret to killing a deity?\"\n\n\"Inflicting copious amounts of pain until it dies?\" Judith ventured.\n\n\"Outlasting it in a test of wills?\" Nico guessed.\n\n\"Fucking it silly?\" Filia asked.\n\n\"No, no, and no.\" Lily flapped her wings and took flight. She held out her hands. One became surrounded by a soft, almost angelic glow. Around the other coalesced a swirling, writhing darkness. \"You make it forget. For if an immortal forgets what it is, it loses itself and with it, it's power.\"\n\n\"And I forget no longer!\" WIth one final, violent spasm, Azagthoth came undone. His physical body was ripped to pieces in a heartbeat as his true form burst from within, an infinite vortex of thick, barbed tentacles that spread for miles in an instant. They coiled and writhed, whipping through the air faster than mortal eyes could track.\n\nLily raised her light hand and a dense bubble of light bloomed around them, the tentacles slapping against it with dull thuds and creating pulses of power where they struck. \"How much longer?\" she asked Satan.\n\n\"Not much,\" he grunted.\n\nIn the center - or at least, what they perceived as the center - of the tentacle mass, a single, giant eye opened. It had no lid. The pupil was jagged and irregular - Nico thought it looked like the classic radioactive symbol on barrels of nuclear waste. It shifted constantly as it bored into them. \"Pathetic creature. You cannot hold me at bay forever, not any more!\"\n\n\"Seriously, what the fuck is this thing?\" Filia shrieked.\n\n\"It's name is Azathoth,\" Satan said. \"They say the biggest lie ever told is that I tricked everyone into believing there's a God to give people hope that there's a way to escape me.\" His skin turned tomato red, hardening as his body expanded. Jagged horns burst from his forehead and curled regally up over the crown of his skull. \"Not even close. The biggest lie ever told was that there was nothing before God came about. Oh there were things, alright. Things so great and terrible that He had to force them to forget what they were less they tear Creation a new one.\"\n\n\"One letter!\" Azathoth roared. \"By one letter you stripped my name from me, my power, my purpose! I shall subject you to torments your pathetic mind cannot even fathom, Infernal!\" Those tentacles battered against Lily's shield again and she grunted.\n\nNico and Filia braced themselves. \"And how did He do that exactly?\" Nico asked.\n\nSatan rolled his shoulders with a meaty pop. He was in full form now, twenty feet tall with his great bat-like wings spread wide. \"Not sure,\" he admitted. \"He never told me. But figuring things out on the fly has always been my specialty.\"\n\nLily reached out her hand to the Infernals. \"Take my hand, you two. Let us fight this monstrosity together.\"\n\nAs Nico and Filia did, Judith grunted and dropped into a fighting crouch. \"Well, guess this is it for me then. One swipe of those things and I'm paste.\"\n\nThe hand suffused with light was extended to the demon hunter. \"I hold both powers,\" Lily said. \"You will survive this, hunter.\"\n\nJudith hesitated for a second, then shrugged. \"Eh. What have I to lose?\" she said, and grabbed hold.\n\nThe moment she did, both demon hunter and the Infernals felt as though a circuit had been completed between them. Judith and Filia's hair stood on end, and Nico felt as though someone had jammed powerlines into every inch of his exposed skin. The three of them jerked wildly, their hands practically welded to Lily's. Memories flashed through their heads as power poured into their beings - a hedge maze, a serpent, a wide vastness of sand and heat that stretched from horizon to horizon. Flashes of beings great and terrible, formless voids and eyes floating free of faces.\n\nWhen it was done, Lily yanked her hands away. The Infernals sucked deep breaths into their mouths as they collapsed against the side of the light bubble, their bodies shifting and changing. Nico's wings sprouted anew, bursting from his back like newborn plants. There was no pain, only a euphoria as his body became that of an ascended demon again. Beside him, Lily was back to her fuller figure, her own wings sharpening up into bony points and her hair growing lustrous and long.\n\nSlowly, the Infernals picked themselves up, feeling their power resurgent. Nico clenched his fist, and called upon two fiery swords that manifested in his hands. He stared down at them, testing their weight. \"How is this possible?\"\n\n\"You poured your power into me,\" Lily said, running her hands down Nico's back. \"Among other things.\"\n\nFilia's shadows came back to her like loyal hounds, draping over her shoulders like a scarf and winding along her arms to hang down, ready to be shaped as she willed them. \"How is this happening, though?\"\n\nLily stepped past the succubus to stand at Satan's side. Somehow, the big demon had produced another pair of oversized sunglasses that sat on the end of his nose, obscuring his fiery eyes. \"Think of me like... a battery, if you will. All I needed was a bit of charge from the two of you, and now that I have that, I'm perfectly capable of generating power on my own.\" She flexed her fingers. \"And trust me, I can generate a lot.\"\n\nA heavy tentacle smashed into the bubble, and a large crack appeared in the glowing surface. \"Get ready!\" Satan rumbled.\n\n\"What about Judith?\" Filia asked, turning her head.\n\nAnother heavy tentacle smash shattered the bubble like glass, and their world became slick, oily flesh as heavy tentacles scattered them apart. Nico hung on grimly as he flew through the air at ludicrous speed. A heavy tentacle slammed down against his back, as if Azathoth was trying to pancake him. As it lifted, he got his feet under him and balanced on the thick length of flesh. When the tentacle came down again, he caught it with both hands. It's weight bore down on him, his legs screaming in pain at the mass pressing down on him. Nico roared and pushed up, managing to throw the tentacle off him. As it came down again, he held his two swords above him in an X shape and caught the tentacle on it. A quick motion scissored the tentacle off.\n\nAlmost immediately, another rushed at him. Nico jumped off the tentacle he stood on and flapped his wings, the motion making him shoot high up into the fleshy chaos. At the apex of his flap, he tucked his wings in, turned over, and fell. Tentacles rushed up to meet him. With a thought, the longswords in his hands grew longer and heavier, until they were more hunks of metal than swords. Nico used the motion of his fall and twisted his shoulders until his arms hurt. The motion made him spin like a top, and the velocity of the massive swords turned him into a demonic buzzsaw as he fell. All the tentacles that came at him were sliced apart like sushi. Gore streaked his crimson skin, and his whole body felt hot. He was a full-fledged demon again, full of power and-\n\nA heavy tentacle drove into his chest and completely altered his momentum. The blow pulverized his ribcage into gravel, and Nico's breathing hitched as he was borne deep within the morass of flesh around him. Deeper and deeper he went, the tentacles become barbed and slicing his flesh to ribbons. For a moment, he began to panic.\n\nA blinding beam of light sheared through the tentacles and sliced through them like an industrial laser. Azathoth's screech of pain was deafening. Nico planted his feet and flapped his wings powerfully, shooting up to hover next to Lily, who had been the source of the attack. \"Thanks,\" Nico panted, his wounds itching as they healed.\n\n\"Don't thank me yet,\" Lily said. \"We're nowhere near done yet.\"\n\nNico looked down. Filia flitted to and fro beneath them, her chains snapping and slicing any eldritch flesh that came close to her. Beyond the succubus, close to Azathoth's massive eye, Satan himself battled, his fists pulverizing tentacles that came close to him, exploding them into plumes of foul-smelling ichor. He turned and waved a hand, and hellfire surged forth and reduced more to ash.\n\nBut still more flesh slithered forth to consume them, and Nico and Lily scattered. Nico reduced his swords to more manageable forms as he hacked away at Azathoth, twisting and turning in midair to avoid getting caught off-guard. Lily was a whirlwind of destruction, beams of light and shadow from her hands slicing tentacles off or causing them to wither and decay in moments.\n\nThe two of them came together, back to back in midair as more tentacles surged towards them. \"There's no end to them,\" Nico panted, blinking tentacle ichor out of his eyes.\n\n\"That's the whole point,\" Lily said, summoning another shield bubble around the two of them so they could catch their breath. \"Azathoth is one of the oldest and most terrible of the Before Gods. He is infinite. There is no end to his mortal form.\"\n\nNico shot her a look. \"Then how do we stop him?\"\n\n\"Like I said, we have to make him forget who he is, only for a moment.\" LIly shook out her shoulders, then gave Nico a wry look and tapped her forehead. \"Can't remember anything if you don't have a brain.\"\n\nNico looked down at the massive eye, the pupil locked on Satan as he fought the tentacle assault bare-handed. \"I'm guessing that's where we have to hit.\"\n\n\"Bingo.\"\n\nNico sighed. \"This is going to suck, isn't it?\"\n\n\"Probably. But think about this.\" Lily squeezed Nico's bicep and pressed into his side. \"We win, you and Filia get to fuck me for real this time.\"\n\nWell, if ever there was a motivation, that was it.\n\nLily dropped the shield, and the two of them angled their bodies down towards Satan and Azathoth's eye. As they fell past Filia, Nico reached out and grabbed the succubus's leg. She yelped as she was yanked downwards, moving to lash whatever was grabbing her with her chains before she recognized them. \"What are we doing?\" she asked.\n\nNico looked up at his succubus companion and grinned. \"We're gonna kill a god.\"\n\nFilia grinned. \"Awesome!\"\n\nDown they plunged, the eye growing ever larger in their vision. The pupil was still locked on Satan as he fought. Nico held out his swords in front of him, Filia formed her shadows into a long lance, and Lily pressed her hands together, the light and shadows swirling together in a vortex of power.\n\nThe massive pupil of the eye swung over to the three of them. Nico went still, petrified mid-dive. His wings refused to flap, and a loud buzzing noise sounded in his head. The eye grew closer and closer, until it took up his entire field of vision. Then the pupil slid out of the way, and there was only white.\n\nNico crashed into something that felt like water. He righted himself and surfaced, feeling water up to his chest, yet when he looked around, he felt as though he was floating in a void of white. He twisted and turned. \"Filia!\" he yelled. \"Lily! Lord Satan!\"\n\nNo answer came to him. Nico reached out to try and start swimming, but all he did was turn head over heels in place, as if gravity moved with him. He turned again, and tried to summon some of his demonic power. It defied his grip, flowing away from him like water. \"This is a trick,\" he muttered to himself as he tried again. \"An illusion.\"\n\n\"Is it?\" his own voice said.\n\nNico spun around, suddenly finding himself standing on what felt like solid ground, yet there was still no surface beneath him. Facing him was... himself. But a different him, the scrawnier, lower version of him he had been before he and Filia had ever set foot in Saint Bethany's. \"What is this?\" he muttered.\n\n\"A reflection,\" the other him said. He lifted his arm, and Nico did the same, both of them pressing their palms together. \"You trifled with powers you cannot comprehend. Now, you will perish here.\"\n\nA chill prickled along Nico's shoulders. \"What?\"\n\nThe other him held out his free hand, and Nico's body followed the motion. A small sword, the small one that used to be all he was capable of, flashed into being in his reflection's hand. The same sword appeared in his own. \"You are weak, Nicodemus. An Infernal out of your depth against a power so ancient and terrible it forestalled the creation of existence itself. How can you hope to win against such a thing?\" Slowly, the reflection turned the short sword over in his hand, Nico's body following the motion no matter how much his mind resisted.\n\n\"We'll... find... a way...\" Nico grunted.\n\nThe reflection shook his head. \"No. You will not.\"\n\nThen he, and Nico with him, rammed the short swords into their chests.\n\nFilia wandered through an endless maze. She had no idea how long she had been lost within its confines. It could have been a day. It could have been a millenium. There was no telling how much time had passed. The white walls outlined in gray never stopped, no matter how much she wandered or how high she tried to fly.\n\nHer body had grown old and decrepit, and she was disgusted with herself. Her supple skin had grown spotted and wrinkled, her breasts sagging with their age. Her hair had gone gray, the ends fraying. Like a human.\n\nEvery so often, she would catch a glimpse of herself in the corner of her vision. The real her, the one with perfect skin and perfect tits, hair that shone in the light and an ass that men would start wars over. That version of her would stand there, beckoning to her like a lover, but when Filia would run towards it, to try to catch the reflection, it would vanish. Each time, she felt a little more of herself slip away, devoured by a mouth unseen with an insatiable hunger.\n\nSlowly, her steps faltered, then stopped completely as she fell to her knees. Her gnarled fingernails scratched the papery skin of her face as she clutched her head in her hands, wracking sobs closing her throat. Her mind felt close to the breaking point, like a skull underneath a boot. She knew that the next time she saw her old self, it would break her.\n\nFootsteps echoed close to her. \"Poor thing,\" her own voice cooed. Soft, slender fingers touched the backs of her hands. \"I'm here now. You can look.\"\n\nFilia resisted the overwhelming urge to look. \"No,\" she whispered.\n\nThe finger touch turned insistent, curling around the edges of her palms. They weren't soft anymore, and felt cold and slimy, like tentacles. \"Look. At. Me.\"\n\nThe succubus curled in on herself. \"No no no...\"\n\n\"You will behold this!\" Those hands grabbed hers and tried to wrench them away from her face. Filia resisted with what little strength she had left.\n\nThere was a loud squelching noise, and the grip on her hands relaxed. Something pattered on the void floor, echoing like rain on a roof. \"Disgusting,\" a haughty voice said.\n\nFilia looked up. Before her, wreathed in golden light, was Judith. Her short dagger had become a resplendent golden sword, dripping with black ichor. Hewn in half at her feet was the phantom reflection of herself, decaying rapidly and turning to ash that flaked away.\n\n\"On your feet,\" Judith said. Her eyes were suffused with golden light. \"I need you to give me an opening, succubus. This thing won't forget I'm here for much longer.\"\n\nFilia blinked, and suddenly the maze was on fire, and Judith was gone.\n\nThen she blinked again, and she was back in the seething vortex of tentacled chaos. Her body was wrapped in layers of tentacles, one of them shoved down her throat like a fleshy IV tube. Beside her, similarly wrapped, were Nico and Lily, their eyes glassy as they endured their own internal torments. Before them, Satan was still battling valiantly, although he was a half-step slower than he had been before. Azathoth being able to focus on him exclusively was wearing the Dark Lord thin.\n\n\"Kneel, Infernal!\" Azathoth thundered.\n\n\"Kiss my resplendent red ass!\" Satan responded.\n\nFilia gathered her might and directed her shadows outward. They burst from her body in a wide nova, the lengths shredding the tentacles around her and her companions. Filia flapped powerfully, streaking past Satan with her shadows trailing around her. \"You forced me to look at an ugly version of myself!\" she roared. \"I'll kill you for that!\"\n\n\"Insolence!\" Azathoth battered her with powerful blows from his tentacles, sending Filia reeling backwards. One wrapped around her waist and three others clubbed her upper body heavily. Filia her something crack with each blow, pain making her entire being reel.\n\nThen Nico was there, freeing her with three swipes of his burning swords. Lily let out a loud battle cry as she put her hands together and fired off a beam of light and shadow right into Azathoth's eye, and the Before God roared in pain. Satan gave a great leap and punched the eye, earning another roar of pain for his efforts. He landed, spun around, and added a thick beam of hellfire to Lily's. The smell of burning meat filled the air.\n\n\"You okay?\" Nico asked her.\n\nFilia's body repaired itself in moments and she spat out a mouth of blood. \"Just fine! Let's kill this asshole!\"\n\n\"Go, go!\" Lily yelled, pouring on the pressure with her beam of power.\n\nNico and FIlia took off as one, streaking towards Azathoth's eye like crimson comets, aiming right for the distorted pupil. They felt one another's might, and knew that if they struck true, it would be over.\n\nTwo of Azathoth's tentacles plucked them out of the air as if they were nothing.\n\n\"Oh, come on, augh!\" Filia screamed as the tentacle began to squeeze them together. Nico hacked and slashed at the flesh, but it was dense enough and his angle was wrong that he made no progress.\n\nAzathoth's great pupil looked directly at them, despite the Infernal power searing into it. \"I will unmake you!\" the Before God roared. Bright purple power flared into existence in front of his pupil.",
        "\"No!\" Lily cried.\n\nNico and Filia looked at one another. The demon reached out and clasped the succubus's hand. The purple energy reached a blinding intensity. \"I am Azathoth! I am the greatest of the Gods beyond creation! And none shall stand before me in defiance again!\"\n\nThe light winked out.\n\nThe Infernals looked. Azathoth's pupil spasmed and trembled like an overworked muscle, bulging and shrinking in rapid succession. Filia spotted a plume of purple energy spewing from the side of his massive eye.\n\nGold light burst forth from the side of the eye, and Judith rolled in mid-air as she landed on a still tentacle. For a brief moment, Filia saw the phantom image of an angel's silhouette around the demon hunter.\n\n\"I bow to only one God,\" Judith said. \"And you are not Him.\" She snapped her fingers.\n\nFor a moment, nothing happened. Then Azathoth's massive, irregular pupil contracted to a pinpoint, and a terrible scream threatened to rupture their eardrums. Golden light burst free of the eye as the gelatinous iris bubbled and roiled. The keening reached a fever pitch, then tapered off all at once as Azathoth's eye exploded.\n\nThe tentacles binding them slackened off, and they dropped to the carpet of tentacles underneath them. They spasmed and writhed gently, turning to ash and dissipating like sand in the desert. Nico and Filia held on to one another to keep their balance as the tentacles underneath them vanished, and they dropped back into the normal monochrome of the Prototory dimension.\n\n\"What did she do?\" Filia wondered, looking over at Judith. The demon hunter had dropped to her knees on the grass, her head bowed and lips moving in prayer.\n\n\"It was a collaborative effort,\" Lily answered, her feet rustling the grass as she stepped over to the two Infernals. \"I simply crammed as much power into her as I could and asked her to pick her moment to be a living bomb. Azathoth was too busy focusing on us, being the big furnaces of power and might that we are, that he didn't bother paying attention to the lowly Nephilim.\"\n\n\"I am far from lowly, thank you very much,\" Judith said. She got to her feet slowly, and held out her hand. Her dagger whistled back into her palm from where it had fallen. She tipped her head back, loosening up her shoulders.\n\n\"From there all she had to do was hit Azathoth where it hurt.\" Lily looked to her left. \"What's become of him?\"\n\nSatan was back to the form he had initially appeared in, minus the nice sunglasses. He waved a hand dismissively. \"Gone. But just as you can't destroy energy, only transfer it, the same is true of Azathoth. He'll be back in some form soon enough.\" He licked his palm and ran it through his greasy hair. \"Hopefully this time it'll be a more manageable form rather than one of my Fallen.\"\n\n\"You don't know where it will be?\" Judith asked. \"Can we not figure it out beforehand and be there to destroy him?\"\n\n\"If he's born mortal, and doesn't remember who he is, he'll just pass away and come back again,\" Satan said with a shrug. \"Not worth the effort, in my opinion.\"\n\nAn expression flickered across Judith's face before she smoothed her face over. \"I see.\"\n\n\"Now then, we did have a deal.\" Satan snapped his fingers and a portal opened under Judith. The demon hunter managed only a startled curse before she fell into it and it snapped shut behind her.\n\nA silent moment passed. \"Did you actually send her back to the mortal realm?\" Filia asked.\n\n\"Of course I did!\" Satan said, sounding offended. \"What kind of dishonorable cur do you take me for?\" He winked at them, then turned and wriggled his fingers. \"Shall we head home then?\"\n\n\"Where did you send her exactly?\" Lily asked.\n\n\"Right back to the middle of the Saint Bethany's quad,\" Satan said. \"Buck bare naked. Sure, she's home, but she'll have to get creative if she wants to find clothes and get back to the Vatican. I'm sure they're going to want to pick her brain about all that's happened.\" He tore open a portal, and through it wafted the familiar smells of fire and brimstone. \"Gonna need a fucking long soak in the lava to get rid of the eldritch gore smell, blech.\"\n\nAs Satan walked through the portal, Lily reached out and took Nico and Filia's hands. \"Come on, you two. Let's get out of here.\"\n\nJudith pressed herself into the lee of the staircase as the police officers raced down in the direction they thought she'd gone. When their footsteps faded, she emerged from the shadows and pounded up the stairs. In the upper hallway, she used her dagger to force the locks on several of the dorm rooms until she found one with a female occupant.\n\nAs luck would have it, the resident was her size. Judith muttered a quick plea for forgiveness before helping herself to a pink shirt with a flower on it, a pair of jeans, and some functional, if a tad worn, sneakers. She jammed her dagger down the back of the pants, the blade flat against her buttock. She gave herself a quick check in the mirror, making sure that the weapon wasn't visible. As she did, she scowled. She looked like the protagonist of a young adult novel in her getup.\n\n\"Very funny, Lucifer,\" she seethed as she set off, headed for the staircase on the far side of the building. It would take her most of the afternoon to get to one of the hunter safehouses, longer if the police decided she was worth pursuing further. Considering she'd appeared naked out of thin air in the center of the quad like the Terminator, it wasn't too far out of the question. \"We'll meet again, and next time you won't get off so easily.\"\n\nAs she reached ground level and began to move north, she felt a brief twinge in her shoulder, right where the demon brand had been seared into her skin. She ignored it. It was just an ache. Nothing more.\n\n\"Ow, dammit!\"\n\nNico had forgotten about the rocks, and picked one out from underneath his backside as he sat down on the promontory in Hell. The weeks of debauchery on the campus of Saint Bethany's seemed a distant memory now, considering how abruptly it had ended and what had transpired since.\n\nSatan hadn't wanted to make a big deal about Lily - or, rather, the part of her being that was Lilith - being back in the fold, so Lily had simply assumed the role of just another demon, masking her power to be revealed \"when the time was right.\" Much to Nico's surprise, Satan had let both him and Filia off the hook, and had even permitted them to keep the power that Lily had granted them so they remained ascended. Rumors were already swirling around about where they had gone for almost a month and come back ascended, and Nico knew that things wouldn't stay quiet forever.\n\nThere was a rustle of wings as Filia lofted over to him. The succubus lighted down next to him and dropped into a crouch in one smooth motion, then made a face and pulled a particularly large rock out from under her ass and glared at it. \"Asshole,\" she muttered, cocking her arm back and pitching the rock across the expanse of Hell.\n\n\"Feels weird, being back here, doesn't it?\" Nico asked.\n\n\"Here as in this hill or Hell in general?\" she said.\n\n\"Both.\"\n\nFilia smiled and looked out over the vastness of their fiery home. She wrapped her arms around her knees, pressing her wings against the ground for balance. \"Kind of, actually. When we left I wasn't concerned at all with what would come after we got all the human sex we could handle. I was just so fucking horny consequences didn't mean anything to me.\"\n\n\"Do you think it was worth it?\" Nico asked.\n\nFilia scoffed. \"Is that even a question?\"\n\n\"Well...\"\n\nShe looked at him, then reached down and put a hand over his. \"The answer's obviously yes, you goof. The most damage we did is that the humans of Saint Bethany's have a couple weeks of their life where they don't remember anything. Azathoh was confined to that whole other dimension, so it's not like there's a lot of collateral. If anything, we got off scot-free.\"\n\n\"Until the other Infernals start asking questions about how we ascended.\"\n\nFilia waved her free hand. \"Let them talk. It's our secret.\"\n\nSilence stretched between them for a moment, as they enjoyed the quiet together. Then, the succubus snuggled closer to Nico's side. \"You know, you're incredibly handsome, Nico. You know that?\"\n\nThe demon smirked. \"Now that I'm a studly ascended demon.\"\n\n\"Well, you always were.\" Her fingers traced the lines of his chest. \"Now even more so.\"\n\nNico's hand slid down the curve of Filia's back to cup the other, more supple curve below. \"And you look absolutely delicious,\" he purred back.\n\nFilia grinned, then pushed him down onto his back. Nico went down willingly, allowing the succubus to rip his loincloth off and toss it aside before throwing her leg over him as if she were mounting a stallion. Her shadows turned to mist and flowed away from her body, her heavy breasts dropping down, nipples full and ready for him. Her tail brushed his ankles. \"This is doing something for me, Nico, this is definitely doing something for me,\" she said.\n\nNico reached up and drew Filia down towards him. Their lips met softly, and he held her there for a long time. In all the time they'd spent together, it was perhaps the most intimate gesture they'd ever shared. When they parted, Filia was blushing something furious. \"It's not just Lily that I care about, you know,\" he murmured.\n\nThe succubus made a soft noise, then kissed him again, harder this time. He felt her drawing from his essence a little, and he gave it willingly. He had plenty left. Filia's breath fanned hot over his face, her breasts smushing against the strong frame of his chest. His cock surged to life between them, the tip sliding against her already-slick folds. \"You charmer,\" she said.\n\nThere, on the promontory overlooking the Plains of Torment and the Glades of Misery, but not quite as far as the Screaming Sea, atop a small series of rolling hills that didn't have a name, a demon and a succubus began to make love.\n\n\"Still has that smell to it,\" Lily remarked.\n\nSatan folded his arms. \"What, do you want me to Febreeze things down here? It's Hell! It's supposed to have that smell.\"\n\nLily snickered. She craned her head back and looked up and out of the Pit, past the cold, dark expanses of rock out of the massive hole to the fire-tinged rocks above. \"What did you wish to speak to me about?\"\n\nSatan inclined his head, pushing his new pair of Luis Vittons up his nose. \"I was wondering if you'd gleaned any more about what we discussed yesterday after coming back.\"\n\nLily folded her arms against her lower back. The succubus Matriarch had graciously provided her with clothes, and she wore a striking scarlet dress with a plunging neckline and a low-cut back to allow her mismatched wings to stretch free. The floor of Satan's palace was icy under her bare feet, but the chill didn't bother her all that much. \"My memories?\"\n\n\"Of course.\"\n\nLily closed her eyes and focused. She remembered the Garden, of course, and Adam, the misogynist dickhead. Then there came the desert, and the serpent that had been Satan in his early days back when he thought snakes were the most intimidating beings in all of Creation. But from there it was a blur, with glimpses of the Before Gods - Azathoth was there in all his tentacled chaos, along with his allies, the Things that had occupied the Nothing before God had beaten them back. They were great and terrible beings, that could unleash horror on a cosmic scale with a flicker of thought. They were lucky Azathoth had only been at a fraction of his full power, and they'd still almost all perished.\n\n\"No,\" she said. \"Just the conflict with the Before Gods, then memories of my time as Lily begin. Nothing in between.\"\n\nSatan sighed in frustration. \"You're certain?\"\n\n\"Yes.\" She turned to him. \"Why do you need to know so bad?\"\n\n\"Because a soul like yours doesn't just disappear.\" Satan stepped up next to her, and he followed her gaze up and out of the Pit. \"It should behave like Azathoth's does and reincarnate in some shape or form almost immediately. Where did you go for all those centuries, Lilith?\"\n\n\"I don't know. Does it really matter?\"\n\nSatan's eyes slid over to her. \"For now, no. Eventually, it might.\"\n\nLily sighed and looked away from him. \"I'll let you know if something new reveals itself to me, I promise.\"\n\nSatan stared at her for a moment, then turned and walked away from her. \"See to it that you do.\"\n\nA rustle of wings announced Lily's departure. Satan stopped and turned back to watch her leave. The reincarnation process for Great Souls like Lilith's was a complicated and messy affair. When the Great Soul's body died, rather than slipping between realities towards either Paradise or the Inferno, it instead went on a journey between them until it latched onto a soul just past it's genesis. From there it melded and became diluted, until it was awoke in a violent - or carnal - manner. This Lily/Lilith was not the same he had known all those eons ago, and yet she was exactly the same and just didn't quite know it.\n\nBut the Great Souls were so powerful they should reappear within a couple years. Lilith had been missing for thousands. Where had she gone? Satan believed the answer lied in her memories, but he couldn't crack her mind open like an egg like he could with other being and sift through their memories, no matter how hard they were repressed. All he could do was hope the memories came back to Lily and she was forthcoming with him. He didn't want to have to torture her for it - he'd grown rather frond of her already.\n\nA lone, scraggly messenger flapped awkwardly into the spire. Satan held out his arm and let the creature land. It was a grotesque thing, a bulbous eye with bat wings and the talons of a hawk. \"He wishes to speak with you, Lord,\" it rasped\n\nSatan scowled. \"Leave me.\"\n\nThe messenger lofted away, still flapping awkwardly. Satan tapped his bootheel on the ground. A rune lit up underneath his foot, the energy flowing through thin channels in the floor like lave. It ran to the edge of the palace spire, ran up the walls, and collected in wells above each of the apertures that looked out over his domain. With the noise of stone scraping stone, heavy granite slabs descended from where they were hidden, each etched with runes of power that prevented noise from seeping out through the rock, even to the most audio sensitive of his minions. When the slabs became flush with the floor, the chamber was plunged into darkness lit only by the channels of power in the floor.\n\nA stone section of the floor flipped over, revealing his throne. It was a monolithic thing, obsidian marble through and through etched with runes. He sat down in it. Then he grinned, snapped his fingers, and burned off his clothes with a small spark of power. As befitting his station, he was quite hung. He lounged in the chair naked, his manhood on full display.\n\nAnything to ruffle the windbag's feathers.\n\nThe wells of energy above the slabs began to boil. A beam of light emanated from each, meeting at a point in the center of the room level with Satan's head. Where the light met, smoke wreathed up and out, coiling in and around on itself until it formed a sphere. A few moments passed, and then the smoke coalesced into the shape of a face, lit from within by a storm of sparks that accented the features of the image. It was a old, weathered face, lined by countless eons, long hair flowing down over his shoulders.. As befitting most Seraphim, he wore a cloth around his eyes, but Satan knew that particular cloth was special. It was part of the Shroud of Turin, the cloth that Jesus Christ was buried in before rising from the dead like the austentatious prick that He was.\n\nOf course the Voice of the Host would wear such a thing.\n\nMetatron inclined his head. Underneath the scrap of cloth around his eyes, his brow furrowed. \"Must you?\" he asked. His voice was a discordant choir, comprised of voices male and female, young and old.\n\nSatan smirked. \"Oh, yes, I must.\"\n\n\"Don't play games with me, Lucifer.\"\n\nThe smug expression went away. \"Don't call me that.\"\n\n\"I'm not in the mood,\" Metatron glowered. \"Your subjects wreaked havoc on the poor innocents at that university.\"\n\n\"Is that what you call it? I like to think of it as they showed those people a good time.\" Satan rested his chin in his hand. \"I find it funny that you didn't notice for so long.\"\n\n\"Do not mock me!\" Metatron's voice grew sharp. \"You know why we did not come sooner. The Host is spread thin, thanks to the lingering effects of your machinations.\"\n\n\"Hey, that election had nothing to do with me.\" Satan jerked a thumb up at the ceiling. \"Thank Him for making the humans stupid idiots. Speaking of which, how many of those people on the campus got knocked up? None, because Nico and Filia at least had the decency to take preventative measures.\" He grinned, his mocking humor back. \"Unlike Gabriel and that-\"\n\n\"Enough!\" It sounded as though the entire Host had called for him to be silent, and Satan knew that Metatron's buttons had been successfully pushed. It had only taken about a minute, and if he recalled correctly, that was a record.\n\n\"Look,\" Satan said, sitting up in his throne. \"We could trade barbs all day, but I'd rather save that for Judgement Day, wouldn't you? And I know you didn't call just to trade witticisms.\"\n\nMetatron's face smoothed over gradually. \"You destroyed Azathoth?\"\n\n\"Yes.\"\n\n\"How was he reawakened? It was your responsibility to keep him sedate.\"\n\nSatan inclined his head as he debated what else to tell Metatron, then decided on the truth. It would probably freak the old Seraphim out. \"I believe Nico and Filia might be in possession of fragments of a Great Soul. Which one, or ones, I'm not sure. Azathoth, believing himself an Infernal, gave them a fragment of his power to use to have their fun in Saint Bethany's. Under normal circumstances they should have been consumed, but they thrived. I think that might have been what triggered Azathoth remembering.\"\n\n\"We will have to observe carefully to see which form he takes next.\" Metatron sighed heavily. \"And I heard that Lilith is back.\"\n\n\"In a manner of speaking. Lily has Lilith's soul, and acknowledges that part of her identity, but can't summon any of Lilith's memories. I have no idea when or if we'll ever figure that out.\"\n\n\"She must,\" Metatron insisted. \"It may be the only way to...\" He trailed off.\n\nSatan lowered his head, his eyes boring into the smoky visage of Metatron. \"He's losing, isn't he?\"\n\nMetatron worked his jaw, and even though he said \"He is managing,\" Satan knew the real truth.\n\n\"Make sure He knows that he's not to lose,\" Satan said. \"It is my destiny to erase him from existence. Not those bloated, tentacled things.\"\n\n\"Like you can make demands of Him, traitor.\"\n\nSatan settled back in his throne. \"Remember, Metatron, I only agreed to this because I want a Creation to rule when this is all done, instead of a tangled mess of tencacles and eyeballs like the Before Gods would create. I'm only cordial because you're not in front of me physically. If you were, you'd be talking through a sword rammed down your throat.\"\n\nMetatron actually managed a smug smile. \"Always the firebrand, aren't you?\"\n\n\"Hey, you know me.\"\n\nThe Voice of the Host's face grew serious again. \"Time grows short. You know what you must do.\" Without a goodbye or farewell, Metaton's face vanished as the smoke plumed outwards, leaving Satan alone.\n\nHe sighed, then slowly looked up at the stone slabs that had slammed shut around his tower. There were seven of them in total, each of them baring a round stone seal mounted on the marble. Far away, at the highest point in Paradise, there was an identical chamber that Metatron used for their clandestine conversations, with identical seals on the walls.",
        "The seal directly in front of him bore four colored expanses - white, red, black, and green. A crack had appeared in it, splitting the colors in twain as it reached halfway down the stone.\n\n\"For once, you feathered git, we agree.\" Satan settled back in the chair and closed his ashen eyes. \"Time does grow short.\"\n\nTo be continued....\n\nThank you, dear reader, for giving Blasphemia your time! Nico, Filia, Judith, and Lily will return!"
    ],
    "authorname": "NathanRavenwood",
    "tags": [
        "demon",
        "succubus",
        "action",
        "fight scene",
        "satan",
        "nephilim",
        "eldritch",
        "elder god"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/blasphemia-ch-08"
}
{
    "title": "Succubus Keep",
    "pages": [
        "/*********************\n\nAUTHOR'S NOTE\n\nMany thanks to Guyon for supplying the idea and characters. This is the introduction to a sexy little computer game he's working on.\n\nEnjoy!\n\n*********************/ \n\nThe knight cut a dashing figure. The strong lines of his jaw gave him a heroic aspect. His long blond hair billowed out behind him in the breeze. It was the kind of face that had the village girls clambering over each other for a glimpse and set them swooning when they finally got it.\n\nAt the knight's feet lay the foul body of a demon from Hades. Its leathery wings were sliced to ribbons, black ichor still oozed from a multitude of mortal wounds and its fiery red eyes were clouded over.\n\nThe knight wiped the demon's black blood from his sword until the blade shone again like the finest silver. He acknowledged the villagers' cheers before climbing back on his horse and riding off down the road. His work here was done.\n\n\"Buggery and damnation!\" a harsh voice snarled.\n\nThe demon Tenjeth smashed a fist into the stone table, causing the crystal ball to wobble and smoke to obscure the image revealed within.\n\nHe immediately regretted his action as pain shot up his arm and aggravated his aching scars.\n\n\"Can none of you rid me of this accursed pup!\" he roared.\n\nNervous silence followed as the demons up on the balcony slinked back into the shadows.\n\n\"Poor Tenjeth. Always trying to solve problems by hitting them with your fists,\" a voice, sweetly seductive, said from behind him.\n\nTendrils of strong perfume tickled Tenjeth's nostrils. He snorted in annoyance.\n\n\"What are you doing here, succubus?\" he growled.\n\n\"Why, I've come to help, my Lord,\" the succubus replied, running soft hands along his muscular arms. \"I can kill your little nuisance.\"\n\nTenjeth snarled and snatched up the demoness by the back of her neck. He examined her feminine form with his one remaining good eye. Soft and weak, he thought with disgust. Good only for pleasure.\n\n\"Help me?\" Tenjeth said in a low growl. \"Take a look at your foe first, little demon.\" Tenjeth tapped the crystal ball with a black talon and forced the succubus to look into the depths.\n\nSmoke swirled and billowed. The knight appeared again. This time his muscular body was marred with cuts and bruises. He roared with fury as he cleaved a giant serpent's head with one savage strike of his gleaming sword.\n\n\"Mmm, yummy,\" the succubus said.\n\nThe scene switched. The knight fought a one-eyed abomination at the top of a waterfall. The demon tried to swat him with an uprooted tree, but the smaller human was too agile. He ducked and rolled under the makeshift club. With the grace of a dancer he skipped behind the monster and slid his sword right into its black heart.\n\n\"Ooh, isn't he dreamy,\" the succubus said.\n\nTenjeth stared at her with his baleful red eye. A snarl twisted the corner of his scarred mouth, revealing the cracked and jagged stump of what had once been an impressive incisor. He pushed her right up against the ball, enjoying her little squeal of pain as her cheek ground up against the glass.\n\n\"This mortal has killed over a dozen of my strongest, most fearsome minions. This,\" he spat the word, \"human even had the audacity to cripple me, an overlord of Hades!\" \n\nHis rage triggered the magic of the crystal and the smoke cleared to reveal a new scene, one painfully familiar to Tenjeth. The knight was on the floor, his body battered and bloody. Fires raged in the castle around him. The Tenjeth in the ball turned and stalked contemptuously away. Back then the knight was just another weak human, nothing more than a nuisance like all the others. The Tenjeth in the ball had other matters on his mind, like the delicious scent of the virgins he was about to ravage.\n\nIn the ball the knight rose, unsteadily, to his feet. A steely glint of determination flashed in his eyes and then he'd charged the unsuspecting demon. Up until then the mortals' blades had been nothing more than annoying stings to Tenjeth. So it had come as a real shock when the knight had run him through with a blade that burned with icy enchantments.\n\nTenjeth had known then that these wounds would be hard to heal, but he'd not anticipated receiving so many of them. The knight had been fury incarnate, his enchanted blade a blur as it hacked and sliced at Tenjeth's toughened flesh.\n\nTenjeth had fallen, blood oozing from too many wounds to count, half his face staved in. He'd watched through his one remaining good eye as the knight had advanced on him with a sword raised and grim purpose carved into his features. That final image would forever be burned into Tenjeth's mind. Only a hastily whispered spell to port himself back to Hades had saved him from meeting his end at the tip of that knight's sword. \n\nTenjeth's wounds still ached with the memory of his defeat.\n\nSoft moans from the end of his arm returned his attentions to the present. He looked over and noticed the succubus's cheeks were flushed. The reason for that -- and her moans -- became apparent when Tenjeth looked down and saw she was pleasuring herself with her tail.\n\nPleasuring herself... At images of his most shameful defeat...\n\nTenjeth roared and, with a mighty throw, sent the wanton little demon skittering across the obsidian floor.\n\n\"You try my patience succubus!\" he yelled. \"You, a creature built only for pleasure and sin, have the insolence to think you can succeed where even I have failed. Go back to the flesh pits. I might call on you... when I have need of a whore to warm my bed.\"\n\n\"I can beat him,\" the succubus said.\n\nShe picked herself back up and stared defiantly back at a Tenjeth. Blood trickled from her split lip. She lapped it up with a pink tongue, savouring the taste.\n\n\"He won't know how to fight me,\" she said, her eyes glowing with a feral gleam.\n\n*****\n\nElan stared at the tower as it poked up above the trees of the dark forest. This was an ill-omened place. Dark things stalked these woods. Elan felt no fear though; he had killed enough of those dark things that the rest knew to leave him well alone.\n\nThis morning Elan had been entertaining the village girls with his lute playing when he'd been approached by a shy girl in the habits of a holy order.\n\n\"Forgive me for interrupting,\" she'd started, nervously biting her lip.\n\n\"There is no need to apologise,\" Elan had replied, giving the girl a broad smile. Though he couldn't see much beneath her hood, her face appeared to be most comely. She seemed troubled.\n\n\"I come to ask for your help Sir,\" the girl said. \"They have taken my sisters and I fear what they plan to do to them.\"\n\n\"Who?\" Elan said, putting aside his lute. The other girls watched intently, sensing they were privy to the beginning of another epic tale.\n\n\"Bandits, brave knight,\" the girl replied. \"Foul uncouth bandits. They abducted my sisters and stole them off to a deserted castle in middle of the Shadowald woods. Here is the letter from my divine mother superior requesting your aid. Please come, I fear to think of what abuses those heathens might have already inflicted on my defenceless sisters.\"\n\nHer pretty face looked vulnerable enough to melt the stoniest of hearts. Elan opened out the letter. It was as she described.\n\n\"I'll leave right away,\" he said.\n\n\"Oh thank you brave knight,\" the girl said. She rose up on tiptoe and kissed him delicately on the cheek.\n\nIt was odd. Elan still fancied he could feel the soft imprint of her lips as he led his horse beneath the dark canopy and towards the tower. His skin still tingled with the memory of her kiss. Elan was shocked to find he was thinking some very unchaste thoughts. That would not do.\n\nThe keep was deserted and almost fallen completely to ruin. Its dark history and the surrounding woods had left it fit habitation for only the lowest of the low. It was exactly the kind of dwelling he'd expect bandits to haunt. It was strange not to see any sign of their presence though. Where were their horses? Where was the smoke from their cooking fires?\n\nCould the girl have been wrong? Elan thought.\n\nOr worse, had they moved on after first taking their fill of pleasure from the defenceless sisters?\n\nElan steeled himself for the worst as he pulled open the main door and entered the keep. The foyer beyond was dusty and infested with spiders. Elan moved through the living quarters. All were in the same state of abandonment. It didn't appear as though anyone had been here for a long time.\n\nAll save one.\n\nElan found a bedroom that looked as fresh and welcoming as if it had been cleaned only yesterday. A large bed stood against the far wall and was covered in freshly plumped pillows. It was as if he'd been expected.\n\nA puzzle for sure, Elan thought, but it was one that could wait until the morning. He was weary from a long day's ride and the bed looked soft and inviting. Elan took off his armour, propped his sword against a chair and collapsed onto the warm bed. He was asleep the moment his head fell onto the soft pillows.\n\nElan was visited by strange dreams in the night. A beautiful girl, her long black hair fanned out behind her as if she floated in water, entered the room and glided slowly to the bed. It was the holy sister that had asked him for help back at the village. She pouted her lips and blew him a kiss. Her robes fell away to reveal a slender body with luscious, full breasts. Smiling, she got into bed and lay beside him, her warm body pressing up against his.\n\n\"I'm so glad you came,\" she whispered silkily in his ear. \"We're going to have so much pleasure together.\"\n\nThis was a nice dream, Elan thought. He lay back and relaxed as she put a slender arm around his chest. A long leg crossed his and her shapely calf muscles rubbed lightly against his. She lightly nuzzled his neck. Her tail slithered into his lap and slowly pulled his leggings down.\n\nHer tail?\n\nElan's eyes flicked open. He turned towards her and saw two blood red eyes staring back at him.\n\nThis was no dream.\n\n\"Succubus!\" Elan cried.\n\nHe threw her off him and jumped to the other side of the bed.\n\n\"You know what I am,\" the demon on the bed purred.\n\nHer appearance had altered. Her breasts were fuller and her legs had grown a little longer. Two little red horns poked up between her raven-coloured tresses and a pair of leathery wings were folded behind her. Despite these inhuman features Elan still felt a strong desire tug at his heart.\n\nHe looked at her full pouting lips and wanted to kiss them. He looked at the round swell of her breasts and wanted to cup them in his hands. He looked at the naked lips of her pussy and wanted to\u2014.\n\nLord, where were these impure thoughts coming from? Elan had lived a chaste life full of self-discipline and moderation. This filth pouring into his mind couldn't be him, could it?\n\nThe succubus smiled and spread the lips of her vagina apart to reveal the pink secrets within.\n\n\"I'm not dangerous,\" she said sweetly. \"I'm a creature built purely for pleasure and sin. Come dally with me, brave knight.\"\n\nElan didn't trust her. He'd heard that the pleasures of a succubus were not something a mortal man could withstand. The legends spoke of men left as nothing more than dried up husks, all the vitality drained from them.\n\nHis eyes darted around the room as he searched for his sword and armour. They were not where he'd left them.\n\n\"I took those nasty sharp things away,\" the succubus said. \"There's only you, me and this lovely soft bed. Wouldn't you like to lay with me on this luxuriously soft bed?\"\n\nElan was tempted.\n\nNo.\n\nHe shook his head to try and clear it. There was a strong musky perfume in the air that clouded his thoughts.\n\nThe succubus got off the bed and walked towards him. She wore a simple top that covered her nipples with two V-shaped strips of red silk and left the rest of her pale flesh exposed. Her hips swayed seductively with each step and her breasts jiggled mesmerically.\n\nElan was unarmed, but that shouldn't matter. She was smaller and slighter than him and his strength was spoken of throughout the land. He was easily her physical superior. Still, he was reluctant to get too close to her. He suspected grappling or wrestling with that sensuous body would only play into the demon's hands.\n\nThe light touch of delicate hands against his hips shocked him out of his reverie. The succubus had already closed the gap between them. Elan looked down into eyes that smouldered with desire. Her hands roamed up around his back. He watched as she pursed lips glistening with shiny pink gloss and planted a soft kiss on the hard muscles of his chest.\n\nNo!\n\nElan shoved her aside and ran for the door. His mind was still clouded by the perfume pervading the air. Her kiss itched against his skin. The red imprint of her lips was still on his chest. Elan tried to rub them off, but the marks seemed to have seeped through his skin and into the flesh underneath.\n\n\"Mmm, I knew you'd be fun,\" the succubus called after him, her voice low and sultry.\n\nElan took the stairs two at a time as he rushed down to the foyer. A host of conflicting emotions battled in his body. Elan was a brave warrior. He'd fought and slain many more fearsome demons than this. But Elan was also a chivalrous knight, raised to both protect and care for the fairer sex. He knew the succubus wasn't really human, but the prospect of inflicting physical violence on that sweet face and slender woman's body was an action he felt deeply uncomfortable carrying out.\n\nThere was also fear. The sight of the succubus had planted dark sweaty images in his mind. Even now those desires were taking root and sending tendrils creeping through his thoughts. He wasn't sure if he could trust his body not to betray him in her presence. His manhood had already swelled up between his legs. He felt it throb with the need to slide into the demon's inviting sex.\n\nHe reached the foyer and tried the entrance. The doors were shut fast and wouldn't budge. Pink mystical energy glowed in the gap between the two doors.\n\n\"You need the key.\"\n\nElan turned and saw the succubus standing at the top of the stairs.\n\n\"Come play with me and I'll promise to tell you where it is,\" she said.\n\nHer body was perfect. Her legs were long and shapely. Her breasts, covered with strips of red silk, were ripe and inviting. Elan was entranced as she descended the stairs towards him.\n\nThe succubus smiled and brought up a delicate hand as if to blow him a kiss. Elan watched as a spinning ball of shimmering pink energy grew in the palm of her hand. As she breathed it grew larger and larger, before taking on the shape of a transparent heart. The succubus pursed her bee-stung lips and gently blew.\n\nTotally entranced, Elan stood motionless as the heart, as insubstantial and light as a soap bubble, slowly floated down. He didn't move as it collided with his face and popped with a soft fluttery sound. Elan breathed in and his lungs filled with a sickly sweet perfume that softened the tenseness in his muscles and lit fires in his groin.\n\nElan stood there, lost in the intoxicating scent. He realised the succubus had caught up with him when he felt an arm slither around his body. She pulled him tight to her.\n\n\"Why would you want to run away from this?\" she said, rubbing the soft pillows of her breasts against his chest.\n\nShe kissed him lightly on his chest and left a trail of kisses up to his neck.\n\n\"My lips are coated with an aphrodisiac venom,\" she whispered in his ear. \"It is extremely pleasant.\" She blew warm air into his ear before teasing the lobe with her tongue.\n\nShe crouched down before him. A warm hand lightly cupped his balls, sending a pleasurable shiver up his spine. The hand ran up his manhood, encouraging it to greater length with gentle little squeezes. The succubus stared intently at his growing erection. She licked her lips and put a hand around the shaft. Her eyes gleamed hungrily as she pursed her lips and prepared to suck.\n\nThough he wanted nothing more at that moment than to feel those soft lips wrapped around his manhood, Elan had become the hero he was through a deepness of both resolve and character. He was able to draw on that now, at a time of mortal peril, and summon the will to push the succubus aside.\n\nElan ran unsteadily to the back of the keep, in search of an exit but mainly wanting to get as far away from the seductive demon as possible. The succubus's venom burned in his veins. His mind was under siege from dark, lustful images filled with heaving flesh and wild moans. It took every ounce of will to drag his feet in a direction away from the temptress behind him.\n\n\"A game of hide and seek, how fun,\" the succubus giggled behind him.\n\nElan staggered blindly through a succession of corridors and rooms before collapsing in a small chapel, his mind a whirling mass of fear and carnality. He tried to fight off the effects of her poison. His balls ached with a need for release.\n\nHe saw a plain wooden cross hanging from the wall and clung to it like a drowning sailor to a piece of driftwood.\n\n\"Help me Lord as I once again face terrible darkness,\" he prayed.\n\nHe grasped the cross and drew both strength and steadfastness from the plain wooden shape. His thoughts cleared and the burning in his blood subsided to a niggling itch. He took the cross from the wall and hung it around his neck.\n\n\"Thank you Lord for this focus,\" Elan said.\n\n\"Come out little knight,\" the succubus called sweetly. \"The pleasures of my body await you.\"\n\nElan put a hand on the cross, before walking back to the foyer with fresh purpose.\n\n\"I knew you'd come back,\" the demoness said. She pouted suggestively and pushed her hips forward to show off the moist folds of her sex.\n\n\"Your spells won't work on me any more,\" Elan said.\n\n\"Oh. Really,\" the succubus said. She arched an eye-brow.\n\nBefore Elan could react the succubus crouched down and threw three little heart-shaped bubbles of energy at him. The first enveloped his head and flooded his lungs with sweet perfume. The second enveloped his sex and slowly pulsed, sending waves of pleasure breaking across his body. The third sank into his chest and enveloped his heart. It began to beat faster and faster, driving Elan's heart with it until his whole body raged with irresistible lusts.\n\nThe succubus slowly walked up to his helpless writhing body, her hips swaying sensuously from side to side.\n\n\"They seem to be working fine to me,\" she commented.\n\nShe languidly examined her nails while the knight squirmed and quivered helplessly in the grip of her sex magicks. Her hearts throbbed to a faster and faster beat, enflaming his arousal beyond all control. She let him writhe and shudder in ecstasy for a while, before finally dismissing her spells. \n\nShe gripped Elan's buttocks and pulled him into her embrace. \"I only want to give you pleasure,\" she whispered.\n\nHer hands roamed up his back. She pressed her soft breasts into his wide chest. Her wings folded around his body as she put two hands on the side of his face and pulled him down onto her luscious, glistening lips.\n\nElan shivered in pleasure as her sweet poison flowed through his lips and into his bloodstream. The succubus pulled his body closer and kissed and kissed until Elan's resistance crumbled to jelly.\n\nShe broke off the kiss and stared deep into his eyes. \"Let's go to bed,\" she whispered.\n\nFog shrouded Elan's mind as he allowed the succubus to lead him up to the bedroom. He knew he shouldn't be following her, but couldn't recall why. A nagging little voice at the back of his mind insisted she was dangerous, but he didn't pay it much heed. She was just a slip of a girl and he was the strongest knight of the realm. He could break her in half with his bare hands if he wanted to.\n\nElan had other desires on his mind at the moment. Such as running his hands over the beautiful swell of her ass and then up to cup the soft mounds of her breasts. She really was most comely.",
        "What about the wings? the shrill voice chirruped. What about the horns? The tail?\n\nElan didn't listen. He pulled the girl's hot body up against him and squeezed her wonderfully ripe breasts.\n\n\"Having fun, big boy?\" the succubus whispered throatily. Her tail curled up between his legs and tickled a sensitive point midway between his asshole and balls.\n\nA heavy object bumped against Elan's chest. It was an old wooden cross. For some reason he was wearing it round his neck.\n\nIt was important. He strained to remember why. As he looked at the simple wooden shape he felt some of the clouds start to clear in his mind.\n\n\"We don't need this ugly thing,\" the girl said. She took the cross, neatly snapped it in two and threw the pieces over her shoulder.\n\nElan felt an odd sense of loss, though he couldn't work out why. It was just an ugly wooden cross.\n\nNo, it was more. It was his... why was it so hard to think... it was his protection?\n\nProtection? From her?\n\nYes her. The demon.\n\nElan's thoughts were just beginning to clear again when the demon put her arms around him and drew him close. Her heady perfume swirled around him. Her luscious pink lips met his as they kissed.\n\nNo, the venom.\n\nToo late. Her lips met his and more of her sweet poison flowed into his body. His heart quickened and blood surged into his manhood. His skin tingled pleasantly with the memory of her other kisses. His thoughts were once more submerged beneath hot and sweaty images.\n\nHe had to fight it.\n\nShe held him there, drawing the kiss out for a blissful eternity. Her hot tongue met his and playfully tickled the tip.\n\nFight what.\n\nHe didn't resist as the succubus sat him down on the end of the bed. She went down on her knees between his legs and smiled up at him as her hand rubbed up and down his manhood. She pursed her full, moist lips. They shimmered with pink gloss.\n\n\"I know you want this,\" she murmured.\n\nElan did. His manhood ached with the need. He was totally enslaved to the lusts she'd instilled in his body.\n\nShe sucked his manhood slowly into her mouth, letting her soft lips encircle and brush over the entirety of his swollen helmet. Elan groaned. Her mouth was hot and the heat passed into him. A dextrous tongue tickled the sensitive point where his foreskin met his glans. She took him deeper, her full lips brushing down the full length of his shaft. His manhood started to tingle warmly.\n\nElan leaned back and closed his eyes in bliss as the succubus bobbed her head up and down. With each bob her lips coated a thick layer of gloss up the full length of his erection.\n\nElan sighed and sank further back into the bed, totally intoxicated by the blissful venom flowing into his manhood. He swelled still larger, his fragile skin straining to contain the seething blood rushing within.\n\nThe succubus drew her lips up the full length, feeling the knight's cock swell still further. The battle was over. All that remained was the pleasure of the feeding.\n\nThe succubus felt a familiar twitch in the knight's cock. She placed a practised finger at the base and withdrew it from her mouth.\n\n\"Not yet,\" she whispered. \"We wouldn't want to waste any.\"\n\nShe crawled up onto the bed. On all fours, she presented her delectable rump to the knight and reached between her legs to spread aside the lips of her pussy.\n\n\"Let's fuck,\" she growled.\n\nElan didn't need any further encouragement. A wave of profound pleasure washed over him as he sheathed himself in her silken flesh. The succubus shuddered and yowled like a cat in heat as his swollen manhood stretched her. He thrust back and forth, enjoying the moans of pleasure from the hot little demon beneath him. Her muscles squeezed and pulsed around him, flying him to lofty peaks of pleasure. He felt his balls tighten and he thrust back and forth into her sopping sex with greater urgency.\n\nOh god, he was coming.\n\nElan was so lost to the pleasures he didn't notice the succubus's tail coiling and writhing before him. As he reached the point of release the tip of the tail traced an arcane symbol onto the skin around his heart. Lines flashed pink with mystical energy before sinking down into the flesh.\n\nElan gave a great groan of release. He placed both hands on the demon's exquisitely rounded ass, drove his cock deep into her body and spurted a massive load of his seed into her waiting womb.\n\nThe succubus hissed in triumph as the knight's seed filled her. Her vaginal muscles bunched up around the base of his cock and rolled back up the length, squeezing every last drop of cum out of the knight's cock as he shuddered in the grip of a powerful orgasm.\n\nSpent and exhausted, Elan pulled out and collapsed onto the soft bed.\n\nThe succubus immediately rolled him onto his back and straddled him. Beads of perspiration rolled across the globes of her breasts and down a perfectly flat stomach. She stared down at him, her eyes smouldering with both desire and hunger.\n\n\"That was enjoyable, but why stop now?\" she said.\n\nShe steered his still-hard cock between the dripping wet labia of her pussy and slowly sat down, drawing him up into her body. Her vaginal walls pressed around his manhood, flooding him with her heat.\n\n\"Mmm, you're about to find out my vagina secretes a far more potent venom than my lips,\" the succubus murmured.\n\nHer soft walls quivered around Elan's manhood.\n\n\"And when I'm aroused I produce a lot of it,\" she continued.\n\nHer vagina quivered again, more strongly this time. Elan sighed loudly in pleasure as he felt a warm liquid flow around his manhood. The juices felt so good as they sank into his flesh and spread a warm feeling through his body.\n\n\"You're mine now, little knight,\" the succubus purred. She cupped her breasts in her hands and gently rocked back and forth. Special glands squirted more of her aphrodisiac venom over Elan's cock. Her vaginal muscles skilfully kneaded and massaged the fluids into his flesh.\n\nToo much, Elan thought. The pleasure was too much. He writhed and squirmed as uncontrollable fires burned in his body.\n\nThe succubus smiled and flooded her victim's cock with more of her fluids. She enjoyed the sensation of the man's cock swelling even larger inside her. She watched in amusement as the big strong knight flopped and flailed beneath her, completely lost to the pleasure she was causing him. She traced symbols on his chest with her black nails and watched as the lines flared pink and then sank into his flesh.\n\n\"Come into me. Fill me,\" she sighed.\n\nElan looked up and saw a perfect vision of beauty. Delicate hands cupped luscious ripe breasts. Her head was tilted up, eyes closed in bliss. Broad bat wings were spread out behind her like a cloak. She rode him with perfect poise.\n\nAnother orgasm hit. Elan gripped her hips and thrust upwards. He felt his manhood spurt another enormous load of his seed deep into her womb. Her vagina gripped him with a hungry suction. The walls rippled around his erection and stretched out his orgasm to the point where he thought the pleasure might tear him asunder. He pumped and pumped his semen into her until his balls shrivelled up completely and the dry pushes started to hurt.\n\n\"No more,\" Elan said. He lay on his back, breathing as hard as the times he'd been engaged in pitched battles with powerful demons. His body trembled and shivered uncontrollably. Even though the succubus had sucked his balls dry, his manhood still stood up proud like a pole, redder and more swollen than Elan had ever seen it before.\n\n\"No more?\" the succubus questioned. She lay next to him on the bed. \"I don't think a big strong man like yourself is done just yet.\" She languidly pumped his erection with a slender hand.\n\n\"I'm empty,\" Elan said forlornly.\n\n\"I can help you with that,\" the succubus said. She reached over and rolled him on top of her. Her labia stretched wide as her pussy swallowed his cock all the way up to the hilt and gripped it with a powerful suction. \"All it takes is your consent and a little magic from me. Will you let me?\"\n\nHer silken walls lightly squeezed his swollen cock.\n\n\"Yes, please,\" Elan pleaded. At that moment he would do anything to please the gorgeous creature beneath him.\n\n\"That's a good knight,\" the succubus said. A black fingernail touched Elan's chest at the same time as the tip of her tail pressed up beneath his sac. The succubus smiled as the runes she'd drawn into the knight's flesh flared with pink light.\n\nElan gasped and shuddered helplessly as energy crackled through his body. He felt his balls fill up. At first it was a trickle of warmth, then it grew into a stream and kept flowing as Elan's balls swelled and grew. An itchy dry feeling was replaced by an itchy swollen feeling as his skin stretched to contain the seed seething within.\n\n\"Isn't that better?\" the succubus said.\n\n\"Yes,\" Elan groaned. His balls were fit to burst. He had to relieve the pressure.\n\nThankfully the willing body of the succubus was at hand. Elan thrust his cock into her with renewed vigour. His swollen balls bounced against her as he pumped up and down. He must have release.\n\nIt came with blessed promptness. There were only so many times Elan could plunge his cock into that luscious, sucking channel before tipping over the edge. He dove as deep as he could go and bellowed out his pleasure as he jetted his semen deep into her hot body.\n\nHer vagina teased and gently caressed his cock, stimulating additional gouts of seed as Elan pushed into her. He felt his balls slowly deflate as they emptied into the demon's hungry sex. Spent again, Elan fell forward onto the soft pillows of her breasts, out of breath from the exertion.\n\n\"Again?\" the succubus asked sweetly.\n\n\"Yes, more,\" Elan wheezed. He had to experience that feeling again.\n\nThe succubus touched his chest with a black nail and pressed the tip of her tail against his balls. Magical runes crackled and Elan felt his balls start to swell and grow.\n\nA sudden spasm of weakness gripped him and he felt a little dizzy. With it came a brief moment of clarity. She was draining his strength, he realised. She was sucking out his life, orgasm by orgasm. This was how succubi killed their victims.\n\nHe started to struggle.\n\n\"There's no escape now my lovely knight,\" the succubus laughed. Her legs crossed tightly around his back, holding him in place while her sex sucked and slurped on his manhood.\n\n\"Relax and enjoy the pleasure as my pussy drains your life,\" she said.\n\nHer soft pussy gently squeezed his cock and Elan responded with another powerful gush of cum. Indescribable pleasure surged through him and washed his fears away. He sank deeper under the succubus's pleasurable spell. His balls were already filling up for the next orgasm.\n\n\"Mmm, I'm sure a big strong man like you will last a long time,\" the succubus murmured.\n\nShe folded her wings around him, wrapping Elan in perfumed darkness. He twitched and shuddered in bliss as the orgasms grew longer. They started to run into each other until they became one long starburst of ecstasy. Through it all the succubus's vagina sucked and sucked, gently draining away all of the knight's strength.\n\nElan couldn't escape. Not that he wanted to. Her soft breasts pressed against his chest. Her hot lips crushed against his. Her lithe limbs pulled him deeper into her embrace. Her soft vagina squeezed and sucked his juices out of him with steady, exquisite pulses.\n\nHe was weakening. His muscles were withering with every blissful ejaculation. \n\nHe didn't care. \n\nHe lay in the succubus's embrace and smiled as she sucked out his life force one orgasm at a time. He didn't want this pleasure to ever end.\n\nIt didn't. Not for a long time any way. The succubus was right. Elan was a strong man, brimful with vitality. It took a long, exquisitely pleasurable time to drain him completely.\n\n*****\n\nTenjeth ported his crippled body into the keep, eager to see the final end of his mortal foe. He arrived to a bedroom silent except for the low moans of a woman in pleasure. Underneath that he could just about make out a quieter liquid sound, like the dregs of a thick drink being sucked up a straw.\n\nThe succubus was on the bed. Her wings were wrapped around an indistinct shape and her body slowly moved up and down on top of it.\n\nTenjeth waited...\n\n...and waited...\n\n....and finally cleared his throat loudly to get the succubus's attention.\n\nShe jerked her head up in surprise. Her eyes were wide and her cheeks flushed red.\n\n\"Oh,\" she said. She unfolded her wings and the emaciated head of a human flopped over the side of the bed.\n\n\"I see you were successful,\" Tenjeth said. \"I'm impressed Leila.\"\n\n\"Sometimes feminine wiles succeed where brute force has failed,\" the succubus smiled.\n\n\"I trust he died a humiliating, agonising death,\" Tenjeth said.\n\n\"Uh yeah,\" Leila said, glancing down at the floor. \"Agonising.\"\n\nTenjeth gazed on the dead face of his mortal enemy. The human had shrivelled up so much he looked like he'd either died from extreme old age or been left out in the elements for a very long time. Tenjeth was puzzled by the expression though. It looked like the human was grinning from ear to ear.\n\n\"He looks like he's smiling,\" Tenjeth commented.\n\nLeila looked down.\n\n\"Oh that,\" she said, as if noticing it for the first time. \"That's rigor mortis I think.\"\n\nTenjeth stared at her balefully with his one remaining red eye.\n\nThe succubus smiled sweetly back and batted her long eye lashes. Her tail traced coquettish circles on the bed.\n\n\"Yeah, probably rigor mortis.\"\n\n*****\n\nClouds obscured the images in the glass. The succubus stared expectantly at Tenjeth. The disfigured demon pondered what he'd just seen.\n\n\"It may work,\" he said.\n\n\"The ball shows the future,\" the succubus said.\n\n\"A nice image for sure,\" Tenjeth said. \"But I'm sure the knight will pose more problems in real life than in this little performance.\"\n\n\"He won't,\" the succubus said. \"All men are suckers for a little lip gloss and a large pair of breasts.\"\n\n\"We'll see,\" Tenjeth said. \"We'll see...\"\n\n*****\n\nElan steeled himself for the worst as he pulled open the main door and entered the keep. The foyer beyond was dusty and infested with spiders. Elan moved through the living quarters. All were in the same state of abandonment. It didn't appear as though anyone had been here for a long time.\n\nAll save one.\n\nElan found a bedroom that looked as fresh and welcoming as if it had been cleaned only yesterday. A large bed stood against the far wall and was covered in freshly plumped pillows. It was as if he'd been expected.\n\nA puzzle for sure, Elan thought, but it was one that could wait for the morning. He was weary from a long day's ride and the bed looked soft and inviting. Elan took off his armour, propped his sword against a chair and collapsed onto the warm bed. He was asleep even as his head fell onto the soft pillows.\n\nThe succubus waited outside the room for the knight to fall asleep. The fun was about to begin!\n\n/****************************\n\nThis is an entrant for the Literotica Halloween Story Contest 2008.\n\nIf you enjoyed the story please show your appreciation by voting.\n\n****************************/"
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "draining",
        "knight",
        "magic",
        "demon"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/succubus-keep"
}
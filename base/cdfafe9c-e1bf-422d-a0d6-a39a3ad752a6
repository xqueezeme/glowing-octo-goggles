{
    "title": "Perfect Timing",
    "pages": [
        "<p align=\"center\">PERFECT TIMING</p>\n\nThis story is for the 'On The Job Story Challenge.' So, as always your votes and comments would be much appreciated. This is a little longer than I usually write and a bit of slow burn. Thanks for taking the time to read this, and stay safe!\n\nGRACE\n\nCrap!\n\nWhat a way to start the first day at my new job, showing up a half hour late -- if I'm lucky.\n\nAfter a year out of work, with no one hiring, I managed to get my foot in the door. Luckily I aced the interview, finally got a gig that matched my degree in marketing, and now they were going to can my ass before I even get there.\n\nScrambling around my bedroom like a madwoman, hunting for my new white lace bra and panty set, I snatched some thigh-high stockings out of my dresser, while I was at it. Hopping around on one foot, trying to tug them on without breaking my neck, I couldn't believe the stupid alarm on my phone didn't go off.\n\nAfter I'd speed-showered, soaped, rinsed and dried myself off like my ass was fire, I think I must have broken some kind of record for throwing myself together in under five minutes flat -- though I probably looked it, too. I just hoped my stubbornly curly hair didn't look too wild. All I had time for was a quick towel dry, deciding I'd just have to let my long strawberry-blonde locks do their thing, hoping it would finish drying on the way. I didn't need to show up looking like a drowned rat, as well as a total mess.\n\nOf course the subway shutting down for nearly twenty minutes was just icing on my already crap-filled cake.\n\nRushing up the stairs out of the subway station onto the bright sunlit street, I took a fast look down at my taupe suit, relieved to see that the skirt and jacket matched and my white silk blouse was clean and wrinkle free. But then my eyes popped when I took a glance at my feet, and I wanted to scream. How in hell could I have grabbed two different shoes out of my closet? One black, and the other navy blue. They'll think I'm a clown. A very late clown, if I didn't move my ass.\n\nI forced myself to push aside how annoyed I was about my ridiculous shoes, even though they were a slightly different height, and made me hobble like I'd had a few too many. As I tried to race through the lobby, I groaned as I watched the elevator doors starting to close. No way in hell was I going to let that happen. I was late enough now. So I threw my arm out, hoping it would open again, and not break anything, like a bone. That'd be all I'd need, talk about adding insult to injury, if I wound up with my arm in a cast just to add to my fun-filled morning.\n\nBut lucky me, the door slid open again, and I rushed in, mumbling, \"Morning,\" to the man standing off to the left inside.\n\nReturning my greeting, he gave me a smile and I noticed right away that he had kind eyes; eyes that seemed to be warming as he looked me over, with a definite hint of something steamy lurking behind them.\n\nProbably somewhere in his late thirties, he looked so well put together in his tailored charcoal grey suit, crisp white shirt and burgundy tie. Taking a look down, I smirked as I noticed that his perfectly polished black leather shoes even matched, unlike mine. Of course he probably hadn't raced through getting dressed like some kind of maniac, like I had. He looked way to cool for that.\n\nSqueezing my purse handle in my hand, turning my attention to the floor numbers whizzing by, I just prayed the thing would rocket to the twenty-third floor without anyone else getting on or off, so I'd only be about fifteen minutes late -- fingers crossed.\n\nThen I gasped and clutched at my chest as I felt it coming to a shuddering stop, with the lights flickering and the alarm bell going off. Oh god. My eyes darted everywhere at once. Could this really be happening? Maybe I wasn't meant to have this job. Because this was crazy; first my alarm, then the subway, and now the freaking elevator -- it had to be fate.\n\nDoing my best to try and focus on drawing air in and out of my lungs, though I tried to keep it together, I started shaking, like really shaking, with my heart feeling like it was about to pound right out of my chest as I felt my whole body going into a cold sweat. Nothing in the world I hated more than being boxed in, ever since I was a kid when my delightfully twisted brother used to think it was funny to lock me in the closet, condemning me to a life with these awful panic attacks.\n\nI noticed the hottie standing beside me seemed calm enough though, as he pushed the button on the control panel to speak to someone. \"Hi, looks like we're stuck between floors.\"\n\n\"Yeah, I can see that,\" a disembodied voice said through the speaker. \"Camera's not working though. How many people are in there?\"\n\nHandsome guy looked back at me, gave me the hint of a sly smile as he looked me over from head to toe and said, \"Just two.\"\n\nBefore I could even react to his slow perusal, eyes flaring, I let out another gasp and slapped my hands against the walls as I felt the thing shudder and start to drop a little more. Holy mother of all things holy, did the thing have to rattle and keep falling, too? Wasn't it enough that we were stopped between floors with no way to get out? My fight or flight response really had me freaking out now.\n\nI guess he noticing I looked a little wild-eyed, Mr. Cool calmly reached out and wrapped his hand around mine as he spoke to the guy on the other end. \"It's just dropped a little again,\" he told him, like it was nothing, and we weren't both about to plunge to our death.\n\n\"Okay. Then I think you two should sit down or even lie down on the floor, just to be on the safe side.\"\n\nBlinking rapidly, now that he'd said that, I stared up at the recessed lighting in the ceiling hoping we wouldn't end up splattered up there like bugs if this thing decided to freefall to the basement.\n\nI didn't care if I knew him or not, I clutched the strange man's hand like a lifeline. At least I wouldn't die alone, and there'd be two sets of mangled remains to identify. Though, come to think of it, that really wasn't much comfort.\n\n\"Okay. I've got a call in to the elevator repair company, and hopefully they'll be here soon,\" speaker guy informed us.\n\n\"Is there any way to turn off the alarm?\" he asked.\n\n\"Sure, that I can do,\" speaker guy agreed, mercifully putting an end to the horrible, incessant dinging.\n\nI just hoped he was right about someone showing up soon, because this was not where I wanted to be, trapped in a metal box, with nothing but a flimsy cable keeping us from crashing to the ground into a million pieces. And me with my mismatched shoes, would probably be the only thing left of me.\n\nMy fellow box dweller finally looked me in the face and shrugged. \"Guess we should do as he said, and get down on the floor.\"\n\nNodding my head, I sank down and leaned my head against the back wall with my legs out in front of me, while forcing myself to keep breathing. Right now I could care less if he noticed my silly footwear, if this thing was going to send us hurtling to the ground, having multi-colored shoes was the last of my worries.\n\nStill, turning my head, I managed a little smile, glad that he never let go of my hand as he sat down beside me.\n\nHe gave my hand a gentle squeeze, drawing my attention up to his handsome face. \"I'm Will, by the way.\"\n\n\"And I'm Grace,\" I told him, meeting his gaze. Actually, he was quite good looking, now that I was finally checking him out.\n\nHe had the nicest, long-lashed silvery-blue eyes I'd ever seen. With just a hint of a sexy beard lining his jaw, along with thick, brown nicely styled hair, with just a few unruly tufts here and there, that I could already imagine running my fingers through. Yeah, if I wasn't so freaked out, I'd be seriously turned on about being alone with such a hunky piece of man candy right now.\n\nI rolled my eyes as it suddenly struck me that that would be the headline in the newspaper, Will and Grace, dead in an elevator crash. Though this particular Will looked straight from what I could tell.\n\nThen I remembered why I was here, and decided I'd better call and tell them where I was. \"I'm so late, they're going to fire my ass for sure,\" I muttered more or less to myself as I reluctantly let go of his hand so I could fish my phone out of my purse and call my new boss Iris.\n\n\"Where do you work?\" he asked as I scrolled through my contacts till I found her number.\n\nTurning my head, I looked up at him. \"Oh, I'm in Marketing and Promotions. This was supposed to be my first day -- providing we ever get out of here.\"\n\n\"Don't worry. We'll be okay.\"\n\nI studied his face. \"How do you know?\"\n\nHe shrugged, and flashed me a bit of a teasing smile. \"I just do.\"\n\nGod, I wish I had even a smidgen of his confidence. He just looked so self-assured that I knew if anyone could help me get through this, it would be him.\n\nFinally, Iris picked up her phone, and I told her what was happening. When she didn't say anything at first, I just hoped she believed me. \"Iris?\" I said, afraid if she was annoyed, what she might say next. Like -- 'Forget it. Don't bother coming in, if you're going to be this late on your first day.'\n\n\"Here, let me talk to her,\" Will offered, holding his hand out for my phone. \"Hey, Iris, this is Will. Yeah, I know, what a way to start the week.\" He smiled over at me. \"Grace is keeping me company while we wait. And hopefully someone will be here soon to get us moving again. No, we're both fine, just stuck between floors.\"\n\nThat had me rolling my eyes. Yeah, we were both fine. I felt like I was on the verge of a heart attack or a major melt-down, but according to Mr. Cool, we were both absolutely fine.\n\n\"Thanks,\" I quietly murmured, once he'd handed it back.\n\n\"So, you'll be working on the floor just below me,\" he said.\n\n\"I guess, providing they can fix this thing.\" Blowing out a shaky breath, I told him how everything had started to unravel when my alarm didn't go off, ending with us sitting on the floor together in this stupid box. \"I'm not normally such a mess,\" I told him, hoping he'd believe me, because I hated him to think that I was a total flake.\n\nI also told him about how the last company I'd worked for a year ago, had gone under because of the downturn. \"So I was thrilled to have gotten this job.\"\n\n\"Yeah, we're going through a bit of hiring blitz right now,\" he explained. Seeing as our business hasn't really suffered, and sales have actually gone up, since everyone is looking for a way to keep busy.\"\n\nI turned to look at him, nodding my head. \"I know. That's exactly what I said to Iris in my interview. Since so many people are off work with their kids at home, you've got the perfect business, selling what everyone's looking for.\"\n\n\"Yeah, our bike sales are through the roof, and so are our camping supplies. We can't even keep kayaks in our stores. Even things like archery equipment, is selling faster than we can stock it. I guess people just want to get outside and find a way to enjoy themselves any way they can.\"\n\nThen of course, just for an added bit of humiliation, while he was keeping me occupied chatting, to help me forget about where we were, my empty stomach decided it was the perfect time to start growling like a bear.\n\nWill chuckled. \"Sounds like somebody's hungry.\"\n\nWincing, I nodded. \"I was so late this morning I didn't have time for anything, not even coffee.\"\n\nThen my eyes shot open and I looked around in a panic when the elevator started making these hideous creaking sounds. I could feel my whole body starting to shake, though I was fighting as hard as I could to keep it together. I really didn't want to start freaking out, but I couldn't stand the feeling of the walls closing in on us while the thing was getting ready to drop like a rock, by the sounds of it.\n\n\"Here,\" he patted his lap, I guess sensing I was about to go into a meltdown. \"Why don't you put your head on my lap and close your eyes, and try and forget about where we are?\"\n\nSad thing was I didn't even have a will made out. Not that I had much to leave to anyone. But I guess my friends could divvy up my stuff.\n\nReading the compassion in his eyes, deciding it might not hurt; I slid onto my back, and rested my head on his firmly muscled thighs. He was so solid; it felt like I was anchored to something safe. Though the stupid elevator was still making little noises, horrible, terrifying little noises, I guess just to taunt us.\n\n\"You know what I do when I'm in a stressful situation?\"\n\nLooking up at him, I smirked. \"You don't look like the type to ever get stressed.\"\n\n\"Not too often, but occasionally I find myself somewhere I'd rather not be. But to take my mind off of whatever's happening, I try to think of where I would rather be.\" He looked a little wistful as he gazed at the door and said, \"My favorite place in the world has got to be my cottage at the lake, overlooking the water with a nice long stretch of sandy beach.\" As he gently stroked his hand over my hair, he quietly said, \"Why don't you close your eyes, and imagine how good the sand would feel sinking between your toes, with the sound of the waves lapping at the shore and the sun beating down on you, nice and warm.\"\n\nClosing my eyes, I took a few deep breaths, inhaling his delectable slightly musky scent as I tried to picture myself in his happy place. But then I smiled as I realized that I was still holding hot guy's hand as we walked along the beach together, in some pretty revealing bathing suits -- at least in my fantasy. He had a really rocking body, too; which I imagined he actually did, so at least that part was real.\n\nAs I slowly began to feel myself relax, he slid a hand into my hair, and whispered, \"Nice, huh?\"\n\n\"Mmm.\" I nodded. \"Really nice.\" Especially with how good his big, strong hand felt gently massaging my scalp, sliding behind my ears, easing over the muscles in my neck, and sending shivers right down my spine. I could almost tune-out the scary creaking sounds surrounding us as my lady bits began to respond to his touch, heating up and growing damp, while he had my nipples starting to pebble and gently throb. Wow. He was getting me so hot, I wondered if he'd have me going into a whole other kind of meltdown, the climactic kind that I really enjoyed.\n\nWhat were the odds I wondered, of getting trapped in here, with a guy this hot? For me -- probably one in a million -- I was never this lucky with men.\n\nAs Will worked at relaxing me with his magical hands, he had me so zoned out that I began to feel myself drifting off. Since I always slept on my left side, without even thinking, I turned till I had my face buried in his lap, smiling as his wonderful masculine scent filled my senses as I began to nod off.\n\nWILL\n\nLooking down at her asleep, I could hardly believe we were trapped in here together.\n\nThe other thing I couldn't believe was that she had her face pressed between my legs, right up against my deal. I could feel things starting to stir, and just hoped it wouldn't wake her up if I got any harder and started poking her in the nose.\n\nGod, she really was pretty though, with those lush reddish blonde curls softly spread across her shoulders that felt like silk running through my fingers. With such long, pretty lashes softly resting on her high cheekbones and an adorable dusting of freckles sprinkled across her cute little nose. If I'd met her anywhere else but here at the office, I'd probably be asking her for her number by now, though this hardly seemed the time. Especially considering we were stuck here, till the thing either got fixed, or...\n\nI shook my head, refusing to think of what could happen, especially since she looked pretty young, probably no more than twenty-five -- which also had me thinking that she was obviously way too young for someone my age.\n\nThis was turning out to be one hell of a way to start her first day here, trapped with me, wondering if we were going to make it out alive.\n\nLetting my eyes do a little wandering, I decided she was a nice height, too, probably five six or seven to my six foot-two. And I loved the curve of her tight little ass, and those long, shapely legs; already imagining what they'd feel like wrapped around my waist. Then I smiled looking down at her mismatched shoes. But if she hadn't noticed them yet, I wasn't about to tell her. By the sounds of it, poor thing was having a bad enough day as it was, without me making her feel self-conscience about how she'd dressed for her first day at the office.\n\nAfter wrapping my hand around her waist, to keep her close, letting out a long slow breath I let my head fall back against the wall, deciding maybe she had the right idea, and I should close my eyes for a while, too. Since it didn't look we'd be going anywhere anytime soon.\n\nI don't know how long we slept, but both of us jumped, when we felt the thing starting to make an odd rumbling noise, like it might be starting to move again.\n\nStartled, I could see the panic in her eyes, as her lids flew open. So I did what I could to comfort her, pulling her up against me, I held onto her tight, pressing a kiss to the top of her head. When the elevator finally stopped creaking, Grace pulled back, eyes wide as she looked into mine. Without even thinking, I dropped my head and brushed my lips across her luscious mouth.\n\nAs she softly began to moan, tightening her arms around my neck, instinct kicked in and I deepened the kiss, tracing my tongue along the seam of her lips, till she let me slip inside. I smiled against her mouth as her tongue instantly began parrying with mine. Now this was nice.\n\nSliding a hand down along her back, I filled my palm with her backside and squeezed. The way her nipples were brushing against my chest, I could feel myself growing hard as a brick, especially with the way she was really beginning to moan as we lost ourselves in a deep, lingering kiss.\n\nHer skirt bunched up around her waist, with her thighs straddling my hips, I could feel the damp heat of her, rubbing up against my cock, right through my pants.\n\nHugging her a little tighter, I let out a groan at the feel of her desperately grinding her sex up and down over my throbbing erection.\n\nIf I knew for sure that this would be it for us, I'd be sorely tempted to pull down my fly, push aside her panties and give us both one hell of a send-off.\n\nPart of me thought, as I tipped my head to better savor the taste of her, that it would be the perfect way to go, too, buried balls deep in the heat of such an intoxicating woman.\n\nThe way she was eagerly sucking on my tongue, while I teased her nipples with my thumbs, groaning deep at the feel of her eagerly sliding up and down on me, had me harder than I'd been in years.\n\nI don't think I'd ever felt as lost in the feel of a woman; her breasts heaving, and her nipples rubbing hard against me as we feverishly kissed. The way she was desperately rocking against me, basically dry humping the hell out of me, I just hoped I could hold on. Her fingers anxiously twisting in my hair, and me breathlessly thrusting up and down along her sex, basically fucking her through our clothes, I could tell that she was getting close -- and so was I. So damn close, I could feel my balls getting tight, ready to explode.\n\nAmazingly, somehow I managed to hold back. No way did I want to come in my pants, and show up for work literally a hot mess, especially since I imagined I was already late for a meeting with one of our biggest suppliers.\n\nThen we both gasped and pulled back, startled to hear the guy interrupt our little make out session as his voice crackled over the speaker. \"Hey, hope you're still doing okay in there. We've got a crew checking things out now, and hopefully we'll get you moving again soon.\"\n\nAs that dose of reality hit us, I noticed every inch of Grace seemed to blush to a very pretty shade of pink, all the way from her breasts to her hairline. Obviously embarrassed by how carried away we'd gotten, she dropped her gaze and wouldn't look at me anymore.",
        "I knew I should have been feeling a little awkward, too. But after sharing something as incredible as that, I couldn't lie and pretend to be sorry. Because I wasn't -- not one damn bit. It wasn't like every day a beautiful, sexy woman literally dropped into my lap. And I had a pretty strong feeling if we hadn't been so rudely interrupted, things would have gotten even hotter, and slid into something even more erotic.\n\nStill, I thought I should ask. Tipping my head, I brushed the hair back from her eyes, and lifted her chin. \"You okay?\"\n\nFlashing a little grin, she nodded her head. \"Yeah, I'm good. You?\"\n\nSmiling into her big blue eyes, I told her the truth. \"Actually, right now I'm feeling fantastic, after sharing something that sweet with you.\"\n\nThankfully she laughed and so did I. I was glad we were good, and she wasn't upset by how close we came to stepping over the line. But nothing would have pleased me more than seeing her fall apart when she came. And if the guy could have waited even two more minutes, I think I would have got my wish.\n\nWell, at least for a good half hour, we both forgot about where we were. Because the way she was happily grinding on me, I'm sure I wouldn't have noticed if we had dropped to the basement.\n\nI realized her shoes had come off, so I took hold of her foot and slid the right one on for her. Then I happened to notice as I picked up the other one, that she wore a size seven, as she rolled her eyes and mentioned, \"Yeah, I know they're two different colors.\"\n\nSmoothing my hand up to her knee, after I'd got them both on, I said, \"At least they're both dark, so I doubt anyone will notice.\"\n\nShe grinned. \"Let's hope.\"\n\nGRACE\n\nWill had his hand wrapped around mine as we felt the elevator starting to move again, mercifully heading up now, instead of slowly creaking its way down.\n\nWhen the doors opened on the next floor up, we both blew out a breath as we stepped out together, so glad to finally to be out of there.\n\nWithout saying a word, rather than wait for another elevator, we headed for the stairs and quietly walked up the last few flights together.\n\nOnce we got to my floor, Will looked at me, smiled and said, \"Well, I hope you have a good first day, and you enjoy working here.\"\n\nNot sure what else to say, I just shrugged and said, \"Thanks, Will... for everything.\"\n\nWith his eyes on mine, he nodded his head. And for a moment the way he was staring at my lips, and leaning in, I thought he was going to kiss me goodbye. Hopeful, I leaned in too. But I guess he decided against it since we were back into work mode, now that we were safe. So, he straightened up and held the door open for me. Then he turned and walked up another flight of stairs, to what I imagined were the executive suites on the top floor.\n\nAfter my boss Iris had given me a tour of the marketing department and introduced me to the rest of the staff, she showed me to my office. It wasn't exactly roomy, with just a sleek modern desk, two matching chairs and a filing cabinet, but I was so glad to be working again, that I thought it was perfect. Thinking, I could always bring in a plant to help brighten it up.\n\nA half an hour later, I was busy looking over the files Iris had sent me, when I heard someone say, \"Grace is right in here.\"\n\nI turned my head, and looked up at the doorway, surprised to see a young delivery guy walk in, hand me something in a paper bag and say, \"Here you go.\"\n\nOnce I took a look inside, I smiled as I pulled out a warm, bacon and egg croissant sandwich wrapped in paper, along with a nice piping hot cup of coffee, a cup of freshly-squeezed orange juice and a very tasty looking mixed berry parfait with crunchy granola crumbled on top. I noticed as I ate that it came from a local hotel, judging from the logo on the bag, because it sure didn't taste like any fast food I'd ever had. And I knew only one person in the world who could have sent me this -- my new friend Will.\n\nAs I finished the last delectable bite, I just wished I knew where he worked, so I could phone and thank him. I felt so much better, and wasn't feeling so light headed anymore now that I had something in my stomach.\n\nAn hour later, I was printing off a few reports to bring home with me to get a better idea of what type of marketing strategies the company had been using, when the receptionist poked her head into my office, smiling again. \"She's right in here,\" she said, to yet another delivery guy who I noticed, looked pretty fancy in his navy blue uniform and tie.\n\nThis time, he handed me a long rectangular box, and I just about died when I opened it up and saw the most gorgeous pair of black leather pumps I'd ever laid eyes on. When I kicked off my shoes and slipped them on, I had to roll my eyes. Ooh, they felt so good, like they were custom made just for me. But seeing as they were red-soled Louboutin's, I imagined they were meant for comfort as well as style.\n\nI honestly didn't know anyone could be so thoughtful. Hell, the last guy I dated for over a year, forgot all about my birthday, even though we were out for dinner on the night I turned twenty-five -- my treat of course. Yet here was Will, making sure I ate, and that I wouldn't feel like a dork on my first day at work in my mismatched shoes.\n\nI really wished I knew how to get in touch with him, because I fully intended to pay him back. But I didn't want to risk asking Iris, afraid of providing grist for the gossip mill, especially on my first day here.\n\nWhoever he was, he had to be the nicest guy I'd ever met. I actually felt a little shiver race through me, as I also thought about how amazing he was at sharing a kiss.\n\nWell at least I'd have that experience to look back on, the time I made out with a hunky stranger while we were stranded together in an elevator. Because I knew that something as hot as that was never likely to happen again -- at least to someone like me.\n\nConsidering how late I'd come in, I decided I'd better work through lunch. When I finally looked up from my computer screen, a nice looking guy with sandy colored hair, wearing a sly little smile was eyeing me from the doorway.\n\nObviously the friendly type, he had his hand extended, ready to shake mine as he walked in. \"Hi, I'm Mitch. And you are?\"\n\n\"I'm Grace,\" I said as I stood and shook his hand. \"Nice to meet you, Mitch.\"\n\nLike he'd known me for years, he made himself comfortable, leaning his hip against my desk. \"I actually work in sales. But I heard about you getting stuck this morning, and just wondered how you were doing.\"\n\nI could feel a little warning prickle going up my spine. Past experience had taught me that it wasn't a good idea to get involved with anyone I worked with. So, as nice as this guy seemed, I knew I'd have to give him a pass.\n\nEspecially when he smiled, leaned in and said, \"Seeing as it's almost lunch-time, how about I show around to some of the nicer places to eat. There's is really good Thai place right around the corner that we could check out, my treat.\"\n\n\"Actually, I got in pretty late today. So, I think I'd better skip lunch. But thanks for asking.\"\n\n\"Sure, no problem,\" he said, though he looked a little confused. Guess, being such a charmer, he wasn't accustomed to being turned down.\n\nRather than lead him on, I thought I'd better be up front with him. \"To be honest, Mitch, I never date guys I work with, though we could still be friends.\"\n\nHe smiled, a nice smile, to let me know he was okay with it. \"That works for me. You can reach me at extension 206. So fell free to call if you need anything or have any questions. And I'd be happy to help you out.\"\n\nGlad that was cleared up, I smiled back as he winked and left.\n\nLater, as I was going over the website, I couldn't believe the range of outdoor equipment the company sold. Most of it pretty high end, too. I guess Will was right, and people just wanted to get out and get busy outdoors after so many months of being cooped up, and didn't really care what it cost them.\n\nSure that I'd never be able to commit it all to memory, I decided I'd better bring a catalogue home to get better acquainted with the types of things we sold.\n\nBefore I realized it, it was six o'clock and it sounded like everyone had gone home for the night. Reaching for my purse, I thought I'd pick up some Thai at the little place Mitch had suggested, because I didn't really feel like fighting my way home on the subway, then having to cook a meal once I got there.\n\nI was just about to turn out the lights, when Iris popped her head in. \"So, how was your first day, Grace?\"\n\nResisting the urge to roll my eyes, considering the way it had started with Will and I getting trapped together, I smiled and said, \"So far, so good.\" I held up the catalogue. \"Thought I'd bring one of these home, to learn a little more about what we sell.\"\n\nSmiling, she gave me a little nod of approval. But then she seemed to study me for a minute, like she was about to say something else, till she finally just said, \"Well, goodnight, Grace. See you tomorrow.\" Then just as she was about to leave, she turned back. \"Oh, and I should mention that on Fridays we do a pot luck lunch in the executive board room upstairs. Everyone brings a little something. And the company usually provides sandwiches and soft drinks. So, if you're interested, it'll be a nice way to meet the rest of the staff, while digging into some interesting food.\"\n\n\"Sounds like fun. So how many usually go?\"\n\n\"Well, it depends; sometimes only twenty or so, or it can be as many as fifty, depending on who can spare the time. But if you want, you can just bring a little something like a salad, because there's always more than enough to go around.\"\n\nI was thinking about what I'd make on my way down to the lobby in the elevator, while hoping the Thai place would still be open.\n\nI also wondered if I might see Will there on Friday, deciding I'd better bring a check to pay him back, just in case.\n\nWe had a new catalogue coming out, so for the rest of the week, I was busy checking prices, sale items and product numbers, making sure everything was right. I was so busy, that Friday kind of snuck up on me. But luckily I remembered on Thursday night that I had to bring something.\n\nFriday lunchtime, as soon as I walked into the board room, Mitch waved hello and came over and handed me a plate and some cutlery. Then he leaned in and whispered, \"Word of warning -- avoid the broccoli salad like the plague, it's really bad. But for some reason, Judy brings it every week, even though no one ever goes near it.\"\n\nI laughed. \"Thanks for the tip.\"\n\nI had just put my contribution with the rest of the sweets on the long wooden credenza against the wall, and as I turned around, I got cornered by Judy, the infamous broccoli salad lady. As she gushed over her creation, I kept nodding and tried to look interested as she explained what went into the overflowing red plastic bowl; raw broccoli florets, rainbow colored mini-marshmallows, candied cherries, dried cranberries, raisins, candied pecans and pink coconut, all tossed with what she referred to as a nice spicy dressing, to help cut some of the sweetness. Then if that wasn't enough to turn my stomach, she added, \"And to finish it off, you add a few cups of hot popcorn and a heaping cup of crumpled gorgonzola, so it all gets nice and melty.\"\n\nNo wonder no one ever ate it. It sounded absolutely disgusting. Though she looked hopeful, like she might have sold me on it, I just nodded and carefully kept my eye on it as I walked around it -- walking straight into Will, who caught me around the shoulders, as I embarrassed myself by slamming right into him.\n\nI looked up. And the moment our eyes met, I felt my cheeks beginning to burn as flashbacks of what we'd done together in the elevator started replaying in my head. Oh god, I could feel myself tingling all over again, as I remembered the way we'd desperately dry-humped each other, moaning and kissing, like we just couldn't get enough. And me almost losing it and nearly coming all over him had me too embarrassed now to even look him in the eye.\n\nLooking everywhere but at him, as I thought about that kiss, that seemed to go on forever, I could feel myself getting wet, as I remembered how amazing it felt to lock lips with such a hot hunk of man.\n\nFinally, I cleared my throat, broke the ice and said, \"Oh, hi, Will,\" doing my best to sound normal. And not like I was getting overheated again, as my gaze slowly slid over him in his perfectly tailored navy suit, sky blue tie and crisp white shirt. As I imagined what it would be like, even just to taste those perfect lips again while I wrapped myself around him.\n\n\"Hi, Grace. So, how was your first week?\"\n\nI finally found the courage to meet his gaze, deciding talking business should help cool me down. \"Actually, I'm learning a lot. This company is amazing. I can't believe the range of products we sell.\"\n\nHe had a plate in his hand, and as we talked, nodding, he reached for the spoon and went to scoop up some of the weird broccoli salad. Subtly shaking my head, I put my hand on his wrist to stop him. Realizing what I was doing, he started to smile. \"Have you tried it?\" he whispered against my ear, sending a shiver down my spine.\n\n\"No,\" I whispered back, \"But now that I know what's in it, I wouldn't, if I were you.\"\n\nThen I noticed him glancing down at my shoes as he reached for a slice of homemade pizza the receptionist had made, that everyone seemed to be gushing over.\n\nI dropped my voice, so only he could hear. \"I wanted to thank you for these gorgeous shoes, but I didn't know your last name, or where you worked. So I had I no way to call you.\"\n\nJust then my boss Iris walked over. And as it dawned on me how close Will and I were standing together, I took a step back.\n\n\"So,\" she said, \"you're joining us today, Will. What a nice surprise.\" Then she leaned in and whispered, \"Just to give you a heads up, I wouldn't go anywhere near the broccoli salad if I were you.\" Will and I both looked at each other and laughed. It was like the stuff was radioactive, the way everyone was avoiding it. I was tempted to tell Judy just to bring a plain green salad next time, but didn't want to offend her. Though I knew it would be a lot less work, and at least people would be willing to eat it.\n\n\"Normally I'd introduce you, but I know you've already made the acquaintance of our company president, Will Braden, when you two got stuck together on Monday,\" Iris said, giving us both a wry little smile.\n\nOh, no. I blinked and blinked again. She had to be shitting me. Oh, god, no way could I have dry-humped the president of the company before I'd even started working here. I could feel the color draining from my face, and my stomach starting to heave. I wanted to crawl out the door before Will started laughing, since I could see the amused little twinkle in his eye.\n\nUgh. I didn't give a shit who he was, I glared him down, while he kept on smirking. The guy couldn't have told me who he was while we were stuck in there for almost two hours -- especially before we started making out, nearly getting each other off.\n\nWhat a way to start off in my new company, by sucking tongue and practically banging the head boss.\n\nHe must think I'm awful, like I'm the type who would do that kind of thing with anybody I was with. But the truth was, as I looked him over, I decided that in addition to being hot, he really was a super nice guy. And I knew if I hadn't been stranded with him, I'm sure nothing would have happened if I'd been with anyone else.\n\nI was glad that he seemed to let it drop, when I watched him take a bite of one of the cupcakes. I had to laugh at the way he rolled his eyes and instantly started moaning. \"Oh, wow, are these ever good. Grace, you have to try one. I think I'm going to have to have two, they're so incredible.\"\n\nPleased that was he was enjoying them, I rocked on my heels. \"They're clementine, with a lemon curd filling.\"\n\nHis eyes popped as he finished what he was eating. After he swallowed, he looked surprised as he said, \"You made them?\"\n\nI nodded. \"My mother had a bakery. And I grew up helping out. While I was off work this last year, I started a business with a friend making cakes and cupcakes for weddings, office parties and different functions. It helped pay the bills, till we found other places to work.\"\n\nHe nodded, keeping his eyes on me as he reached for a second one. \"I don't think I've ever met a woman who could cook, much less bake. I'm pretty sure the only thing my mother ever made was reservations.\"\n\nI chuckled. \"Well, I grew up in a tiny little town, where there weren't any fancy restaurants, just a diner and my mom's bakery. So I was taught how to cook pretty young.\"\n\nHe nodded, looking impressed. \"Well, I do love these,\" he said, as he finished his last bite, making me laugh at the way he shamelessly licked his fingers and even licked around his lips to make sure he got every last crumb and bit of frosting.\n\nWalking around together, we had a taste of a few different things. A really good chicken curry with rice and a creamy raita, veggies and dip, some really tasty mac and cheese, and even California rolls someone had made, that we both agreed were better than some we'd had in restaurants.\n\nAs we walked around, sampling things, we talked to a few of the others, who were happy to tell us what they'd made. I noticed that Will was pretty friendly with his staff, and everyone seemed to like him. I could see why, he seemed pretty down to earth, and didn't act like some bosses I'd met, who like to act like they were above everyone else.\n\nAs the room gradually started emptying out, I heard everyone mumbling about a bad thunder storm descending on the city. Realizing I should probably get back to work so I could leave soon too, I leaned in and said, \"I have something I'd like to give you, if you can spare a minute after this.\"\n\nWill shrugged. \"Sure, my office is just at the end of the hallway.\"\n\nBefore he opened the door to his office, we stopped at a smaller office right outside of his, and he introduced me to his assistant, Richard. Silver-haired Richard smiled, got up and shook my hand, and with a polite nod of his head, said in a posh British accent, \"A pleasure to meet you, Miss Grace.\" Of course I told him likewise, deciding I liked him on sight, especially with the cute little twinkle he had in his sky blue eyes.\n\nOnce we got into his massive, but surprisingly comfortable oak-panelled office, I handed Will a check, and he looked confused, as he stared down at it, and then back up at me. \"What's this for?\"\n\n\"Well, I wanted to pay you for the shoes, and for the breakfast. That was really nice of you. But I've left the amount blank because I wasn't sure how much they cost.\"\n\nShaking his head, he tried to hand the check back. \"How about you consider the shoes a signing bonus?\"\n\n\"But I was already given a bonus when I started. And I'd really like to pay you for them, Will. Otherwise, I can't accept them.\"\n\nHis gaze dropped to my feet and his smile widened as he said, \"No point in giving it to me, I won't cash it. They look really good on you, by the way. And they fit you okay?\"\n\nLooking down at them, turning my heel, I couldn't help but smile, as I admired them. \"Like a glove. And they're even the same color.\"\n\nHe laughed, and so did I. But I still put the check on his desk. I might not have much, but I had my pride. And I wasn't about to let him buy me something so expensive.\n\n\"Hey, while you're here, take a look at this,\" he said, purposely letting the whole check thing drop.\n\nHe sat behind his desk, and I stood beside him as he brought up a picture on his monitor. \"Wow. Is that ever gorgeous,\" I said, eyeing the picture of a stunningly beautiful, massive wood and stone cottage sitting on a lake. And with the sun setting behind it through a stand of tall stately pine trees and all the windows lit up, it gave it a really warm, inviting glow.",
        "\"That's my getaway place I was telling you about. I thought we might as well use it on our catalogue this year, since so many people are looking for places in the country to unwind.\"\n\nI noticed then that the picture had been staged. With two shiny red kayaks on the dock, and a canoe sitting on the water's edge with life jackets inside, and a pair of bright yellow bikes on the path that wound down along the sandy beach. It looked so idyllic, like everyone's dream of what a perfect cottage should be.\n\nAs though it were second nature, he reached out and wrapped his hand around mine as he scrolled through the pictures. \"I'll have to take you up there one day. It's a terrific place to get away. And I bet you'll love it.\"\n\nShocked, I stared at the side of his head, wondering if I'd heard him right as he began to stroke his thumb into my palm, making me go all tingly. I know we made out in the elevator because we were trapped, but I had no idea that he might be as into me, as I was into him.\n\nI could already picture us in one of those bedrooms, wearing nothing but a smile. I gave my head a shake. Obviously, we'd kind of bonded, after going through an awful experience like that together, so he was probably just being friendly. And I already had him naked and hovering over me, getting ready to slide between my legs. What was I thinking? He was my boss, for pity's sake, and not someone I'd ever fool around with, no matter how tempted I was.\n\n\"Well, I should probably get back to work,\" I said, letting my hand drop out of his grasp.\n\nWill got up and walked me the door. And as I waited for him to pull it open, I lifted my gaze and our eyes met and I could feel the sizzle crackling in the air. For the longest time, we just stared at each other like we were in a trance. Then before I knew it, he had me wrapped in his arms with his lips crashing down on mine, and both of moaning. As his hand slid up my thigh, and he started to squeeze my ass, I couldn't help it I started grinding on him again. And dear lord it was back on.\n\nFuck, he was hard as a brick, and I was already drenched -- so much for keeping my hands off the boss.\n\n\"You're just so sweet,\" he whispered against my lips with his hands sliding into my hair, as the kiss went on and on, like we couldn't stand the idea of pulling apart.\n\nMy heart feeling like it was ready to pound right out of my chest, I wondered if he'd take me on his desk, because I was sure game for that, he was getting me so damn hot. Good idea or no, all I knew was that I'd never been this attracted to anyone this fast before in my life -- or ever as turned on. And I wasn't about to turn down what might be my one and only chance to find out what we'd be like together, after coming so close to sealing the deal in the elevator.\n\nGroaning, he slid a hand into the back of my panties. Just the feel of his big, warm hand caressing my bare bottom was getting me so wet, he had my desperate little pussy nearly melting. And I knew I'd never in my life been this hot for a guy, no matter if I should be or not.\n\nThen suddenly someone rapped sharply on the door he had me up against, and we both jumped. I recognized his assistant Richard's voice, as he called out, sounding panicked, \"Will, your wife is here!\"\n\nShocked, we were shifted aside as the door pushed open and a heavily endowed, stunningly beautiful platinum blonde in a white body hugging dress and red heels, sauntered her way into his office. Will let go of me like I'd burned him, and I had a feeling I was going to be sick -- as it struck me what was happening. That his freaking wife had just walked in on us making out!\n\nWhat a jerk, making out with me, when he was married. No wonder I never messed around with anyone at work. I shot him a furious look, that I hoped let him know how disgusted I was with him.\n\nWill winced, and looked back and forth between us, as his wife turned, smiled and said sarcastically, \"I hope I'm not interrupting anything.\"\n\nBefore either of them could say another word, I turned on my heel and fled. My head spinning, my stomach heaving, I ran down the hallway to the door that led to the stairs, and staggered my way back down to my office.\n\nWhat an absolute creep he'd turned out to be, especially when he'd seemed so nice. He sure had me fooled. Probably had three kids at home, along with a dog and a cat, that he took up to his stupid cottage every weekend with his gorgeous wife sitting beside him in his big, fancy car -- the asshole.\n\nI couldn't believe I'd let myself get caught up in someone like him. Well, no more.\n\nI was so glad that I still had the box for the shoes, and my mismatched ones under my desk so I'd have something to wear home. Just as soon as the coast was clear, I planned to slip them into his office. I couldn't stand the thought of wearing them anymore, now that I knew what he was really like.\n\nHopefully, now that his secret was out and I'd found out he was married, he'd know enough to stay away from me. I didn't want to have it out with him in front of everyone, but if I had to, I would.\n\nI was so angry and so hurt, that my hands wouldn't stop shaking as I tried to put the shoes back in the box without breaking the stupid lid. Furious, I slammed the box onto my desk and dropped my head into my hands, refusing to cry, no matter how upset he'd got me. Though I could feel a single traitorous tear running down my cheek, that I angrily wiped away.\n\nNormally, I was usually really good at reading people. So I couldn't believe how he'd tricked me into thinking that he was one of the good ones, when he was nothing but a sneaky, conniving little cheat.\n\nMindlessly going through my emails, I bided my time until just after six, thinking with it being Friday, with a rainstorm about to descend on the city, that everyone would be gone for the weekend by now.\n\nShoe box in hand, I made my way upstairs, glad to see that his assistant Richard was gone and the light was out in his office. Holding my breath, I carefully tried the handle on Will's door, heaving a sigh of relief when it opened.\n\nI'd just finished putting the shoes on his chair, and I turned around and nearly jumped out of my skin when I saw he was standing right behind me. Making me wonder where the hell he'd come from. I let out a gasp when he reached for my hand, shocked that he'd think he could touch me after what he'd done.\n\n\"Grace, l think we need to talk,\" he said, smoothing his thumb over the back of my hand.\n\nI yanked my hand out of his grasp so hard, I almost fell over backwards. Nodding my head at his desk, I muttered, \"I don't think so. The shoes are on your chair, and I'm outta here. Please don't ever talk to me again, unless it's something to do with the company.\"\n\n\"Will you just listen, please?\"\n\nMy chin held high, arms crossed, I glared him down, standing my ground. \"No. I don't mess with married men. And I think you should be ashamed of yourself for playing around with me when you have a wife at home.\"\n\nHe stepped in front of me when I turned to leave, forcing me to hear him out. \"Grace, in one week I'll be divorced. The only reason she was here, was to give me this.\" He held out a key. \"She got the last of her things out of my apartment today. All she was doing here was giving me back her key, I swear.\"\n\nI stood and looked at him, not sure what to believe. Though he did look sincere, I knew he still could be lying his ass off.\n\nStartled, we both turned our heads when we heard a loud crack of thunder booming overhead, and looking out the window, saw that it was really starting to rain. Mesmerized, we stared, watching it come down in sheets, pelting hard against the windows. I don't think I'd ever seen it rain so hard, even on the news.\n\nIgnoring the storm raging outside, Will led me over to a leather couch and pulled me into his lap. I just looked into his eyes, trying to read him, wondering if I should believe him, or get up and walk out.\n\nEveryone who cheated claimed they were in a loveless marriage. My best friend Carol had been tricked by a guy she'd been seeing for months that she was hoping to marry. It broke her heart when she found out he'd lied to her and said that his marriage was over, when he and his wife were still together, along with their three kids with another one on the way.\n\nThen I thought about what Richard had said, calling her his wife, when he'd warned Will that she was about to walk in on us. Still suspicious, I narrowed my eyes on him. \"Does your assistant Richard know that you're splitting up?\"\n\nHe shook his head. \"No. No one knows. I'll tell him once the divorce comes through, just so he knows not to call her my wife anymore. But I hadn't planned on sending out an email to tell the rest of the staff.\"\n\nI could understand that, since it was no one else's business what was going on in his private life, actually not even mine.\n\nHeaving a sigh, he looked up at me and started to explain. \"When Janine and I first started dating, she'd mentioned that in college she'd experimented with women. I didn't think much of it, because I assumed that lots of women had. But after we got married, she seemed to like to go out a lot with her friends. Since I often work late, I didn't mind. Then she started taking trips with her girlfriends, going off to Mexico and the Bahamas, even spending a couple weeks in Europe. I started to think something was off, since we weren't exactly close anymore and she was gone more than she was home. When I asked around, I discovered that she was only going away with one woman, the same one that she'd been seeing back in college.\n\n\"Then last year, just after Christmas, she showed me that instead of her wedding band, she had a new diamond ring on her finger. Told me they were engaged, and that she and her lady planned to get married. So, the fact that my wife left me for another woman isn't exactly something I want everyone to know.\"\n\nNow I felt bad for him, really bad. Normally so in control, he looked kind of defeated. So I wrapped my arms around him and hugged him tight. My heart clenched for him when he just clung to me, pressing his lips to my neck, like I was his life-line now.\n\nAnd I believed him. Because I didn't think he could be that good of an actor. Obviously he was a nice guy, who'd had a bad break and married the wrong woman.\n\nThen we turned our heads as a bright flash of lightning outside the widow lit up the dark sky, and an even louder boom of thunder rattled overhead. \"It's supposed to rain like this for days. You should have left hours ago when everyone else did, Grace. Now you're going to have a hard time trying to get home in this weather.\"\n\nThough I nodded, I decided I didn't want to leave him just now. Not when he looked so down.\n\nSo, I tipped up his chin and kissed him, and I liked that he smiled against my mouth.\n\nWhen we pulled apart, I asked, \"What about you, how will you get home?\"\n\nHe shrugged. \"This couch folds out into a bed, and I've got a bathroom with a shower in here, too. So I'll probably just stay here.\"\n\n\"All weekend?\"\n\nHe looked at me for a minute, and finally admitted what he'd been doing since his marriage had collapsed. \"Actually, I sleep here a lot, since I don't have anyone to go home to anymore. And I'm tired of nosy neighbors asking questions. And when I'm working, I'm not thinking about what's happening with the rest of my life, and what a mess I've made of it. I haven't even told my family yet. No one really knows, except you.\"\n\n\"So, you're saying you still love her?\"\n\nHe shook his head. \"No. I don't think we were ever really in love. I was turning thirty-five and thought it was probably time I settled down. And I'd known her forever, and we got along okay. I thought maybe over time, we'd grow closer. But I just wish she'd been up front with me about the fact that she wasn't really into me. Then we never would have gotten married.\"\n\nQuietly absorbing what he said, we stared out the window at the line of traffic that seemed to go on for miles, as the streets began to flood.\n\nHe gave me a little squeeze, and smiled as he said, \"I doubt we can get anything delivered with this storm, but I've got a fridge and a microwave in here, too. So if we have to stay, we won't starve. And there's usually some food left from the pot luck lunch in the board room kitchen fridge, so we can always raid that.\"\n\nI shuddered. \"Ugh, I just hope there's more in there than that awful broccoli salad. Or I think I'll pass and forget about eating.\"\n\nI was glad to see him laugh. \"No worries,\" he said, tracing a finger along my jaw, \"we'll survive.\"\n\nAs I looked into the hopeful look in his eyes, I had a feeling we would, too. He'd helped me when I was at my worst, and now I'd do whatever I could to help him.\n\nEyeing the couch, I gave him a little smile. \"And if there's room for two on this couch, I think maybe I'll stay with you tonight, if that's okay.\"\n\n\"If you want I can keep my clothes on,\" he offered.\n\nThe way I rolled my eyes, made him laugh. At least he was trying to be a gentleman, though we both knew if we slept together that sparks were gonna fly.\n\nSeems we sort of combusted whenever we got together, and now I couldn't see any reason to hold back anymore.\n\nTurns out the eyes don't lie, and he really was a super nice guy, like I'd first imagined.\n\nHe got up and showed me he had a pretty big closet in his office too, that I noticed was full of perfectly lined up suits, shirts, ties and shoes. Beside it he also had a tread mill and an exercise bike, I guess to keep himself in shape. So I could tell he practically lived in his office.\n\nHe dug into one of the built in drawers and handed me a baseball jersey. \"If you want to change in the washroom, you'll probably be more comfortable sleeping in one my T-shirts than in your suit.\"\n\nSmiling into the teasing look in his eyes, I knew I'd be even more comfortable curled up naked in his arms, but I'd play along if he wanted me to, since he seemed to be doing his best to behave. With a touch of my lips to his, I took the shirt out of his hands, grabbed the shoes and made my way into his gorgeous white-tiled bathroom. Ooh, and with a nice big shower, too, I noticed -- that I could already imagine the two of us sharing, as he scrubbed my back and I scrubbed his, along with all our other bits and pieces.\n\nWILL\n\nChanging up my suit for jeans and a T-shirt as I watched Grace take her sexy little ass into my bathroom, I wondered how in hell I'd ever be able to keep my hands off her, especially if we going be sharing a bed.\n\nI was just so relieved that she believed me when I told her about the divorce. Until now, I hadn't told a soul, not even my parents.\n\nJanine's family were old friends of the family, so naturally they were thrilled to bits when the two of us started dating and decided to get married. But I don't think my folks would be too happy to find out that their son's wife was about to marry another woman.\n\nThe way my parents had been hinting for grandchildren lately, I didn't know how to tell them that it was never going to happen -- at least not with their precious daughter-in-law Janine.\n\nBut that was another thing she'd shocked me with today, aside from barging in on us unannounced and sending Grace running out of here in a panic. After Janine had handed me back the key, I couldn't believe my ears when she said there was another reason, aside from wanting to say goodbye that she'd dropped it off in person. Seems she and her lady love were hoping to start a family as soon as they were married. So they wondered if I'd be willing to donate my sperm to make it happen. She also made a point of explaining, that except for donating my seed, I wouldn't have anything to do with the baby.\n\nI thought my head was going to explode when she said that. Of course I didn't even have to think. The thought of my child being raised in another city by the two of them with no contact from me, was something I couldn't even fathom.\n\nI knew if I ever did marry again and had a child, I planned to be hands on, like my father, who was always there for me -- teaching me how to ride a bike, how to swim, how to bait a hook, even giving me pointers going out on my first date. So no way in hell would I ever agree to be just a sperm donor, and then try to forget that I had a kid out there somewhere, who would never know its father.\n\nUsed to getting her way, Janine seemed surprised and more than a little pissed when I turned her down. But I was just glad to see the back of her when she glared at me and left. While I was hoping that Grace would still be willing to talk to me now that I was nearly done with my ex.\n\nI just wished I'd had a chance to tell her about my pending divorce before Janine had walked in on us after Richard had announced that I was still technically married.\n\nLately, I was actually starting to count down the days, I was so eager to have it happen. Then I'd be free, and could see anyone I wanted. As I eyed the closed bathroom door, I already knew there was only one woman I wanted to see -- the pretty little red-head who'd managed to consume my every thought since the moment I met her in that elevator.\n\nSomehow we just seemed to click. And I really hoped she'd be willing to give us a chance, to see where this could go.\n\nWhen she opened the door and walked out, I could feel my eyes roll back in my head as I watched her walk out in just my baseball jersey, with those long, shapely legs that seemed to go on for miles, back in those sexy heels.\n\nI could actually feel my cock lurch as I imagined peeling her out of that shirt, and kissing every last inch of her.\n\nShe had me smiling at the mischief in her eyes, as she sauntered up, took hold of me by the chin, pressed her lips to mine and murmured, \"Now how 'bout we go raid that fridge?\"\n\nShaking my head at her I laughed, deciding probably a good idea if we ate, since I had a feeling as soon as we hit the bed, we wouldn't be crawling out of there for a while. Maybe not even till morning, or maybe even Monday morning, with how wild things got between us.\n\nThankfully, the fridge in the boardroom kitchen was pretty well stocked since everyone left the lunch food for anyone working on the weekend.\n\nFront and center sat the ominous salad in the big red bowl that no one ever went near. After the two of us eyed it for a moment, and looked at each other smirking, I took it out and put it on the counter. I guess thinking I only took it out to get at the stuff in behind, I laughed out loud at the way Grace's eyes went big when I opened a drawer and pulled out a spoon to give it a try.\n\n\"You're not really going to eat that are you?\" She sounded so shocked, that I knew I had to.\n\nI shrugged, peeled back the cling wrap and stared down at the gloppy mess inside, wondering what the hell I was doing, even as I said, \"I think I have to now, just to say I did.\"\n\nShe reached for my hand as I started to dig into the bowl. \"Oh, Will, you can't eat that. Please don't, or you'll make yourself sick.\"\n\nAs I slowly lifted a spoonful to my mouth, keeping my eyes on hers, I wanted to laugh, barely able to hold back at how alarmed she looked as I opened my mouth, slid the spoon over my tongue and gave the stuff a taste.\n\nAfter I'd chewed it around for a bit, I actually felt my eyes starting to water, as every inch of me broke into a shudder. Not exactly sure what was happening in my mouth, I think my taste buds were going into shock from the weird combination of flavors assaulting them. I don't think I'd ever tasted anything as gawdawful in my life; a sickeningly sweet, gooey, horrible strong tasting, spicy, crunchy, total mess of crap.\n\nStill shuddering, trying my damndest not to gag, I had to force myself to swallow a few times till I finally managed to get it down. While Grace, anxiously stood staring at me either waiting for the verdict or to see if it was going to come back up.",
        "Fighting as hard as I could not to laugh at how worried she looked, I just shrugged and tried to sound like I wasn't about to heave as swallowed hard again and said, \"Well, now I can say I survived it, and lived to tell the tale.\" Then I scooped up a little more, held it to her lips and said, \"Now how about you? Are you brave enough to try it?\"\n\nThe way we were eyeing each other, it was like we were in this together now. The wicked storm raging outside, the end of my marriage, this undeniable attraction that had drawn us together, and now the ultimate challenge -- being brave enough to try even a little taste of the spicy-sweet broccoli, marshmallow, popcorn and revolting stinky cheese salad, that no one in their right mind ever dared put in their mouth before tonight. As I studied the gloppy mess on the spoon, I wondered, who the hell would ever think to put popcorn in a salad, never mind all the other weird stuff.\n\nCould be since Judy worked in finance, all the years of bean counting, might have finally gotten to her. And this was her revenge, unleashing this horrible mess on the office.\n\nEyeing Grace as she bit down on her lip, looking right at me, I could tell she was trying just as hard not to laugh. Until finally, she drew in a shaky breath, nodded her head and bravely accepted the challenge. Taking hold of my wrist, she slowly pried open her mouth and let me slide the spoonful of gunky weirdness onto her tongue.\n\nThough she gagged a little, with her eyes tearing up, after a few tries, she managed to force herself to swallow, and got it down.\n\nThen looking a little panicked, as the taste of it hit her, she shook her head back and forth, dove into the fridge, cracked open a bottle of water, and nearly poured the whole thing down her throat. Gasping, she said, \"Holy crap, that Judy ought to have her head checked. That's got to be the vilest thing I've ever tasted. That isn't food, it's a nightmare.\"\n\nLaughing, I slipped my arms around her, about to pull her against me, when she reached into the fridge for another bottle of water, pushing it at me. I guessed so that when I kissed her I wouldn't taste like the mess I'd just eaten.\n\nI took a long swig, swished it around a few times and swallowed. Then I out of the corner of my eye, as I downed the rest of the water, I couldn't believe how lucky we were that a few of her cupcakes had somehow been missed and left for us.\n\nI pulled one out of the box, and held it to her lips. Her eyes sparkling, she shook her head. \"I never really eat what I bake.\"\n\n\"Come on Grace, just one little taste. These have got to be the best thing I've ever tasted, aside from you. And it'll help counteract that toxic sludge you just ate.\"\n\nSmiling into my eyes, after she took a little bite, I wrapped her in arms, dove in and kissed her. And we laughed as we shared the citrusy sweetness of the cupcake, along with a pretty amazing kiss.\n\nEager to hold her, I picked her up around the waist and put her on the counter and stepped between her legs. The way she wrapped herself around me, as we kept feasting on each other, I didn't think I ever wanted to come up for air.\n\nGod, I loved everything about her, the feel of her, the taste of her, her sweet, sweet lips, and warm little body wrapped around mine. I think she already had me hooked.\n\nOnce we finally pulled back, I brushed the curls out of her eyes, bunching them in my hands. \"I just love these curls,\" I told her, as I slid them between my fingers.\n\n\"And I'm always trying to straighten my hair to get rid of them.\"\n\nLooking into her eyes, I shook my head, tracing a finger along her jaw. \"Don't. They look perfect framing that beautiful face.\"\n\nShe rolled her eyes, and I could tell that she was embarrassed by the way her skin began to flush again to that pretty shade of pink. Now I was wondering how deep that blush went, curious to see if her breasts were just as rosy as her cheeks.\n\n\"I guess we should get something more to eat,\" I said, though I kept plucking at her lips, hating to move now that I had right where I wanted her. Nice and close and so warm and soft against my body.\n\n\"Guess we should,\" she murmured, sliding her hands into my hair, smiling against my lips as she kept kissing me right back, like we couldn't get enough of each other.\n\nShe just felt so right in my arms. Though, before her, it never once crossed my mind to get involved with an employee. But somehow, the moment I saw her I just knew she was something special. Not exactly a damsel in distress when we were trapped together, but I think that's when we really bonded, when she needed me to help her get through that ordeal, as much as I needed her now, to help me reclaim my life.\n\nI'd been nervous about sticking my neck out and dating again, after the disaster with my soon to be ex. Feeling like I'd just been treading water, waiting for someone to come along who could coax me to get back into the land of the living. But this with Grace, felt so different, and made me feel different too, like together we could handle anything.\n\nBut what impressed me, even more than her looks was discovering she had a backbone, and wasn't afraid to tell me where to get off when she thought I was cheating on my wife with her. Truth was, most people in the office kind of tip-toed around me, since I both ran and owned the place. But not Grace. Now that she knew she could trust me, it didn't seem to matter to her who I was, as long as we made each other happy.\n\nAnd I don't think I'd ever felt this happy, even when I was a kid.\n\nEnjoying the fun we were having, I picked up another cup cake, eyeing her, and she smirked, shaking her head at me, almost daring me to do it. I wasn't sure if she could read my mind, but I really wanted to know as I slid my hands up along her waist, what her nipples would taste like coated in a layer of sweet tangy frosting. Or, even just her lips.\n\nTaking a quick peek down, I could see that her nipples were really hard, the way they were poking at the T-shirt. And I could also tell she wasn't wearing a bra. Even through the jersey, I thought her breasts looked amazing.\n\nBefore I could do anything with it, I laughed when she surprised me and snatched the cupcake out of my hand, while I was distracted enjoying the sight of her perky twins.\n\nBright blue eyes full of mischief, she used the little confection to paint my bottom lip with frosting, then leaned in and slowly dragged her tongue across my mouth, licking it all off. As she began to suckle my bottom lip between her teeth, teasing me with her hot, little tongue, I don't think I'd ever been as hard.\n\nI wanted this woman like I'd never wanted anyone before. And if I didn't think I'd shock her, I'd take her right here, right now, up on the counter. All I'd have to do is spread her legs a little wider, tug down her panties, drop my jeans to the floor and slide into her nice and deep.\n\nBut then we both laughed again when her stomach started to growl. And I felt a little guilty because I knew she was hungry, so I decided I could wait until I had her in bed.\n\nOnce we got there though, I had a feeling things were going to get pretty wild if she could get me this hard, with just a few little kisses.\n\nAfter we'd found what we wanted in the fridge, while Grace warmed up our dinner in the microwave, I said, \"I've got some cold beer in my office, unless you'd rather have wine.\"\n\nShe flashed me a grin. \"No, beer works for me.\"\n\nWow. I shook my head as I walked back toward my office. Never once in the seven years we were married, had I ever had a beer with my wife. And I kind of liked that Grace didn't have to have an expensive bottle of wine to enjoy her dinner.\n\nSo when I got back with the beer, I tipped up her chin and gave her a quick kiss. Eyes wide, she looked a little puzzled. But I was thinking how lucky I was to have found someone so down to earth, after being married to Janine, who would never accept anything but the best.\n\nFeeling like we'd known each other forever, I couldn't remember ever feeling this relaxed as we talked and ate, laughed and kissed a little too, watching the rain pelting the windows as it came down in buckets.\n\nAlmost done with our dinner, we both looked up as the lights flickered a little, but still stayed on. Though the storm was really raging outside, I knew we'd be fine in my office, since we had everything we needed, including each other, to get us through the weekend.\n\nWe cleaned off our plates, dumped the broccoli salad in a bag, tied it off good and tight and put in the garbage, then loaded the dishwasher. I liked that we were clearing up everything together, sure that hadn't felt this at ease in years, especially with a woman.\n\nAfter we turned out the lights and closed the boardroom door behind us, I took hold of her hand and we walked side by side back to my office, grinning at each other, the air ripe with anticipation.\n\nI couldn't believe the way my heart was pounding, like a kid going on my first date, knowing what we'd be getting up to once we got back to my office.\n\nNot wanting to rush her, or take anything for granted, though I put the lights on low, and put on some music, I also thought I'd better turn on the wall-mounted TV.\n\nWith the sound of the storm raging outside, Grace helped me pull out the bed, and I got the duvet and pillows from the shelf above my clothes, so we'd be warm while we slept.\n\nI decided to put two glasses and a couple bottles of liqueurs on the end table beside the bed, in case she wanted something a little sweet after our dinner.\n\nAfter I'd stripped off my jeans and T-shirt, and got down to my boxers, and she'd kicked off her heels, we crawled into bed together, and I handed her the remote control. Smirking, she cocked an eyebrow. \"You really want to watch TV?\"\n\nWith her in my bed looking sexy as fuck in just a T-shirt and her white lace panties, I shook my head, met her gaze and told her the truth. \"No.\"\n\nSlyly grinning, she turned off the TV, tossed aside the remote and her smile grew even wider as she slid her hot little body over mine.\n\nCurling her fingers into my hair, as her tongue slipped past my lips, I could feel my erection fighting to break free of my boxers. And I just knew I had to get inside her, had to know how good it would feel to really connect with her.\n\nBut I had feeling that once we finally made love, I'd never want to let her go -- though I already had a pretty strong feeling that I was already more than a little in love with her.\n\nWe kissed for what felt like forever as she slid her warm, soft body up and down over mine, getting me rock hard, as I dug my hands into her ass, thrusting up at her, with both us moaning.\n\nBlue eyes heavy with arousal, she pulled back, traced a finger around my lips and whispered, \"You know what I've been dying to have a taste of?\" Mesmerized by the sight of her, with those red curls loose around her shoulders, I shook my head, trying to think of what else she could want. Then my eyes flared and breath stalled as she surprised me and whispered, \"You.\"\n\nI could feel my eyes rolling back in my head, as she began to kiss her way down my body. With a playful nip at my chin, dusting hot, open-mouthed kisses across my collar bone, slowly tracing her tongue around my nipples, she had my breath hitching in my throat, as I felt my nipples growing diamond hard as she gave them a little tug with her teeth.\n\nSoftly moaning, she continued her erotic journey, kissing her way down over my abs. My heart nearly pounding out of my chest at the feel of her hot, little tongue sliding lower still, till she was pushing down my boxers and tracing her tongue along the length of me from my balls all the way up to the tip.\n\nHoly fuck, I'd never experienced anything nearly this hot. Digging my hands into her hair, I groaned at the feel of her sliding her tongue up and down on me, licking all around my pulsing cockhead. Really getting into it, softly beginning to purr, I could feel the vibration going right through me as she drew me into the heat of her mouth. It had been so long since I'd had a woman go down on me, I thought it had to be the sweetest gift she could have bestowed, selflessly giving me this much pleasure.\n\nTugging her T-shirt over her head, freeing her gorgeous breasts, reaching down, I filled my palms with her warm soft flesh. Kneading them in my hands, gently tugging at her nipples, as she lay across me, I loved the sexy little noises coming out of her as I toyed with her as she plunged me even deeper into her mouth. I honestly don't think I'd ever felt this lost in the feel of a woman.\n\nThe way she kept sucking me back, licking all around me, she had me so close I knew I had to find a condom. No way did I want to come in her mouth, when all I could think of was how good it would feel to sink myself deep into her body.\n\nProbably had the best showers of my life this past week, jerking off as I thought how of how amazing it would feel if I ever got the chance to push my way inside her.\n\nI chuckled at the way she yelped when I pulled her off me, and started feeling around on the floor for my jeans.\n\nWith her heated gaze on mine, I slipped a condom packet out of my wallet. And I couldn't believe it when she held out her hand, letting me know that she wanted to do the honors.\n\nHolding my breath as she tore open the packet with her teeth, I just stared wide-eyed as she took her time slowly rolling the little sheath down over the length of me. Once she was done, with a little kiss to the end of my cock, she looked up at me wearing a sly little smile.\n\nDesperate for a taste of her, I took her mouth in a flaming hot kiss as I carefully eased her onto her back. By the time I got between her legs I was so hard, I just hoped I could make it inside her before I lost it. I really wanted this first time to be good for her, as I painstakingly nudged my way into her inch my inch, lost in her stormy gaze as she wrapped her legs around me and drew me even deeper inside her.\n\nMy eyes locked on hers, as I sank into the heat of her body, I clenched my teeth and groaned at the feel of her inner muscles contracting around me as I thrust, filling her right up to her womb.\n\n\"Oh, wow, you feel so good,\" she murmured as I began to carefully pull back and push in a little harder with every flex of my hips.\n\n\"So do you.\" She felt like heaven, so warm and wet and snug. I actually wished that I never had to pull out. Though I imagined we'd probably raise a few eyebrows around the office, if this was all we ever did.\n\n\"God I love this with you,\" I told her as she wrapped herself around me like a second skin, her whole body starting to shiver as I felt her starting to climax.\n\nTunneling in and out of her hard and fast, hitting her right where she needed me, I loved the way she squealed as she came. Every inch of her flushed and shivering as I let out a growl, threw back my head and let go, nearly overflowing the condom as I pumped into her for all I was worth, coming harder than I'm sure I'd ever come in my life.\n\nThe way she clung to me, pressing her lips to my neck, my chin, my mouth, this felt like way more than just sex.\n\nAs I brushed the hair out of her eyes, kissing her back, gazing into her eyes, I had no idea it was possible to feel this connected to another person. Lucky for us, we had two more days to explore every last one of our desires.\n\nBoth of us still breathing pretty hard, after we'd finally pulled apart, we had some water, to try and cool off. Then we grinned at each across the bed as I poured us both a liqueur.\n\nAs I watched the way her chest was still heaving, my attention was drawn to her taut little nipples.\n\nDipping my finger into my snifter of Grand Marnier, I had her laughing when I decided it might be fun to taste those pretty nipples, after I'd painted them in the sweetness of the orange liqueur.\n\nAs I ran a sticky finger around each one, and began licking all around them, the way she was starting to shiver, curling her fingers into my hair, I wondered if I could get her off, just from teasing her like this. Sucking them into my mouth, one after the other, twirling my tongue around them, I had her nearly crawling out of her skin by the time I decided to dribble a little more down over her belly to the top of her mound, tracing that path with my tongue, too.\n\nI smiled as the little red curl sitting over her sex tickled my nose as I spread her legs and slowly dragged my tongue along the length of her pussy from her tight little back hole, all the way up to her little pink clit.\n\n\"Oh, wow, that feels sooo, good,\" she murmured, as I hungrily lapped and licked and sucked, feasting on her delectable little pussy. Suckling on her clit, thrusting two fingers in and out of her, I soon had her shuddering and coming all over my tongue, even harder than before.\n\nI was hard again too, really hard, and eager to know, once I pushed my way inside her, how wet she'd feel, now that she'd come that hard.\n\n\"On your knees,\" I told her, making her smirk.\n\nBut once she was down on all fours, smiling over her shoulder at me, and I had a condom rolled into place I thought I'd come just from the sight of her, waiting to be filled up all over again.\n\nDigging my hands into her hips, I rolled my eyes at the feel of her eagerly clenching around me as I sank my erection into her body. She just felt so tight this way I knew I wouldn't last long. Dropping kisses over her back, I just went for it and gave it to her good and hard, the erotic sound of my thighs slapping against her ass, spurring me to take her even harder. She seemed to be enjoying it a little rougher too, the way she was starting to moan, thrusting her ass back for more.\n\nAs I felt my release washing over me, and as she began to whimper, we both came in a shuddering rush. The way I was still pulsing inside her, I couldn't believe how hard I'd come, especially so soon after we'd just made love.\n\nAfter I pulled out and wrapped my arms around her, the way she curled into my side, pressing her lips to my neck, had me feeling over the moon. As I ran my hands over her quivering body, what we had together just felt so good I just hoped she was feeling, too. Because now that I'd found her, I couldn't imagine being without her.\n\nEven with the storm still going strong outside, after spending half the night nearly wearing each other out, we slept like the dead. With Grace's warm, soft body tucked in tight against me, I'm sure I'd never slept better.\n\nIn the morning, when I opened my eyes and saw that she was still curled in nice and tight, I pressed a kiss to her shoulder, glad that it hadn't all been a dream.\n\nAs her eyes came open she turned her head, flashing me a contented smile, and said, \"Morning,\" as she stretched her arms of her head, giving me a peek of her little pink nipples as the cover slipped down, exposing her luscious breasts.\n\nJust the sight of her naked, had my cock starting to stir back to life. But I thought we'd better have some breakfast before we started getting busy again.\n\nI reached for my phone, and scrolled through my contacts, till I found the number of the hotel kitchen up the street. \"Rain's not as bad this morning, so hopefully I can order us some breakfast.\"\n\nGrace eyed me, biting into her lip. \"I was thinking if the rain's starting to let up, that maybe I should go.\"\n\n\"Why?\" She had to be kidding, we were having such a good time together, I couldn't believe she'd want to leave.\n\nShe shrugged, carefully eyeing me. \"It's just that I kind of feel like I'm invading your space. After all, this is still your office, though it's sort of become your home.\"\n\n\"Well, it can be our space, if you want it to be. You can put some clothes in the cupboard. And you can shower in here, too, so you wouldn't have to go home if you didn't want to.\"",
        "She rolled her eyes. \"Yeah, I can just imagine what everyone would say, if they ever found out I was shacking-up with the boss.\"\n\nI put my phone down and pulled her against me and kissed the top of her head. \"We'll just have to be discreet. I know Richard's pretty loyal, and he'd never say anything.\"\n\nTurning her head to look at me, she narrowed her eyes. \"So, have you done this before, had a woman staying here with you?\"\n\nLooking her in the eye, I shook my head. \"No. You're the only one who's ever stayed here with me.\" I dropped a kiss on the end of her nose. \"So... how about it, you want to have some breakfast, get a shower, and enjoy the rest of the weekend together?\"\n\nThe way she was looking me and not saying anything, I wondered if maybe there was more to it than she was letting on. Heaving a sigh, I nodded. \"I know I might be a little old for you. I'm going to be forty-two in another couple of months, and I'm guessing you're still in your twenties, so if that's what's bothering you...\"\n\nShe turned and faced me, looking shocked. \"No! That never entered my head. And you sure don't act like a guy in his forties.\" Wiggling her eyebrows, she slipped her hand under the covers and circled me in her fist and started to jack me up and down. \"And you sure as hell don't feel like a guy who might be too old for me, not when you wake up this hard in the morning.\"\n\nChuckling, I pulled her in for a hug. \"Then why don't we just enjoy each other, and see where this thing goes.\"\n\nShe crawled over to my side of the bed, slid her body over mine and tugged my bottom lip between her teeth. And damn, now I could hardly think straight, she had me so fucking hard.\n\n\"On one condition.\"\n\n\"What's that?\" I asked, as I slid my hands down over her backside and gave her a squeeze, pulling her nice and tight against me.\n\n\"I'll stay if I get to finish what we started in that elevator.\"\n\nI think my eyebrows shot to my hairline as I pictured her sliding her hot little pussy over my cock and taking me for a ride, like I'd she'd done then, only fully clothed. \"Deal,\" I said, trying to keep a straight face, while also trying to remember to breathe. Damn, she was fun, and I realized also turning out to be everything I'd ever wanted.\n\nAs she sank her sweet little body down, till she had me fully impaled inside her, I don't think I'd ever seen anything hotter or felt anything sweeter than Grace acting out her fantasy by giving me a ride.\n\nShe just looked so beautiful, with all that wild, red hair curling down her back, teeth digging into her bottom lip, and her breasts bouncing as she focused all her energy on getting us both off.\n\nAs I felt her inner muscles clenching around me, I thrust up and groaned and she slammed her ass back down, taking me balls deep as I let go and filled her up with every last drop I had.\n\nThen it hit me as I kept on pulsing inside her, she'd been riding me bare back -- without a condom. Though I knew I was clean, I just hoped she was on the pill.\n\nAfter she threw back her head and squealed, every inch of her shivering, she collapsed in my arms, both of us breathing pretty hard; she smiled into my eyes and slid her tongue between my lips. And right now as she nearly kissed my face off, I didn't really care if we'd just started a family, because I had a feeling we were going to be together, and hopefully soon willing to let everyone know that we were a couple.\n\nI had a little table in the corner of the room, where we enjoyed our breakfast, with a hot carafe of coffee and another with fresh orange juice.\n\nAs Grace dug into her eggs Benedict, she made me laugh the way she moaned, rolling her eyes. \"This is so good, I'll bet it's from the same place you ordered that breakfast sandwich for me.\" Putting her knife and fork down, she reached across the table and squeezed my hand. \"I could hardly believe that you'd do something that sweet, when I mentioned I hadn't had time to eat.\"\n\nI just shrugged. \"Well, I didn't want you passing out on your first day here. And I'm just glad you enjoyed it.\"\n\nWe both looked outside as it started thundering again, as the rain picked up and really started coming down.\n\n\"I'm just glad the roof's been able to handle all this rain, without springing a leak, with how long this storm's been dragging on,\" she said looking up at the ceiling.\n\n\"Actually, this place is built pretty solid. I only had it built a few years ago, so the roof's still pretty new. And after we got stranded, I had the elevators checked again, too, just to be on the safe side.\"\n\nGrace looked a little puzzled. \"So you own the building, and you run the business?\"\n\n\"I decided the way the business was starting to take off that I should invest in a building, so I could rent out some suites, just in case of a downturn. We've got the top two floors for now, with room to grow if we need any more space.\"\n\nShe nodded, looking impressed. \"I just thought you ran the place. I had no idea that you owned it, too.\"\n\nAs I topped up her coffee, I explained. \"I've always enjoyed being outdoors, and decided I could make a business out of supplying anything anyone would ever need for camping or hiking or enjoying themselves on the water, or even just getting out and around the city. And lucky for me, it's paid off. The downturn hasn't really touched us, and business just keeps growing.\"\n\n\"Looking through our catalogue at all the different high-end bikes we sell, I was wondering what people do with their old bikes, once they buy a new one from you.\"\n\nI shrugged. \"Not sure. But I'm hoping they'd donate them somewhere rather than throwing them out.\"\n\nI watched the way her gaze perked up and she sat up in her seat, wondering what she was up to. \"But what if we offered to pick them up, refurbish them and make sure they found a home with someone who could use a bike, that maybe can't afford one?\"\n\nAs I thought about how it could work, I started nodding. \"Actually, that sounds like a really good idea. We could hire a few bike repair guys, and it would be a nice way to give back. My mother's always done book drives, to get books into the hands of underprivileged kids. And I've helped her with that since I was a kid, packing up boxes and getting them shipped out. But the idea of getting bikes that normally might me discarded, up and running again, would be a really nice thing to do.\" I went and got my tablet and we brain-stormed for a bit, and by the time we were done, I'd contacted a few people who could help us to get it going.\n\nAs we cleaned up from our breakfast, Grace said, \"And my mom ran a coat drive every year that I always helped her with. We made sure all the kids in our area had warm coats for the winter. So, sounds like we have that in common, too.\"\n\nAs we settled back on the couch, I decided that I liked her values and I also liked the way she thought. Instead trying to figure out what she could get out of me, like so many other women I'd known, she was busy trying to figure out who else we could help.\n\nAfter I'd popped us some popcorn in the microwave, with Grace curled up by side, we watched a few movies together. And we soon discovered we had the same sense of humor, as we threw back our heads laughing our asses off as we watched Bill Murray and Rodney Dangerfield stumbling around the golf course with Chevy Chase in Caddyshack and then Eddie Murphy dodging around the police to the catch the bad guys in Beverly Hills Cop.\n\nProbably the best weekend I'd ever had, I kind of hated that she decided she'd better go home on Sunday night, if only get a change of clothes, so she wouldn't have to do the walk of shame when she came in on Monday.\n\nThough she said she didn't need a ride, I still took her home in a taxi just to be sure she got there okay. After we pulled up in front of her little apartment building, I kissed her so long and hard in her doorway, I actually laughed out loud at the way the cabbie was glaring me down by the time I got back in the cab. But all was forgiven when I made sure he got a good tip for wasting his time cooling his heels while I was enjoying saying goodbye to Grace.\n\nNext day I phoned her extension, and smiled when I heard her voice. With no preamble, so she couldn't back out, I asked, \"So, what would you prefer for dinner: roast beef, salmon teriyaki or chicken in a mushroom sauce.\"\n\nI laughed when she didn't say anything at first, till she finally said, \"This has got to be the weirdest crank call ever.\"\n\n\"Okay, then what are you wearing?\" I breathed into the phone, doing my best to sound like a perv.\n\nShe didn't skip a beat as she rhymed off everything she had on. \"Red lace bra and panties, sheer black thigh high stockings, these really sexy red soled shoes, and a black scoop neck dress. Why, who wants to know?\"\n\nI laughed and said, \"Me. Because I want to know what I'm going to be peeling off you, after we've had dinner in my office tonight.\"\n\n\"Oh.\" I could feel the smile in her voice when she said, \"In that case, I think I'll have the chicken.\" And we both laughed.\n\nWe got into a routine after that. During the day, we rarely saw each other, and if we did, we nodded and politely said hello, like we'd do with anyone else in the office. But when she'd come up to my office later, after everyone had gone home for the night, we'd enjoy a nice meal together and talk about our day, and then we'd crawl into bed and enjoy the hell out of each other.\n\nWe did this for months, and she gradually brought more clothes from home to hang in the closet, so she wouldn't have to go home at night.\n\nBut I started to think as I dropped a kiss to the top of her head as she slept in my arms, as nice as this was, I wanted more.\n\nGRACE\n\nI was going over the latest pricing in our new catalogue, with Mitch sitting on the edge of my desk, pointing out the changes, when he reached out and wrapped a few of my curls around his hand, and began sliding them through his fingers. Staring up at him, I cocked an eyebrow and waited for him to let go.\n\nWhen he didn't take the hint, I gave him a narrow eyed glare. \"Unless you want to lose those fingers, I'd let go of my hair, if I were you.\"\n\nThough he laughed, he finally he let my hair slip out of his fingers.\n\nThen I groaned when out of the corner of my eye, I saw Will turning around and walking away, stalking away actually, and my heart sank. Even from behind, he looked angry. Oh god, now I wondered what he'd seen. I just hoped he didn't think I had anything going on with Mitch.\n\nI got up so fast I almost knocked my chair over, as I told Mitch, \"Be right back.\"\n\nWaylaid by my boss Iris asking how the changes were going, I answered her as fast as I could, without being rude, while keeping my eye on the door. By the time I made my way out into the hallway, I looked up and down and couldn't believe Will was gone. He must have really been moving. I wondered if he got the elevator, or took the stairs up to his office. But no matter which way he went, I had an awful feeling that he was upset, and that I should go and find him.\n\nHis assistant Richard seemed puzzled when I popped my head into his office to ask if Will was around. \"No. I'm sorry, Miss Grace. He just left and didn't say where he was going, or when he'd be back, which isn't like him.\"\n\nWhen I nodded, feeling my heart sinking down around my feet, lowering his voice he confided, \"I took a look in his office just now, and I have a feeling something happened to his lunch plans.\"\n\nAs he opened the door to show me what he meant, I felt even worse as I looked at the two place settings with white china and cutlery and wine glasses on the little table in the corner of his office, where we usually shared dinner. I realized he'd gone all out, especially when I noticed the long-stemmed red roses sitting in a crystal vase next to where I usually sat. And there was a bottle of wine on ice and a big bag from the hotel of what I imagined of he had planned for our lunch, now sitting abandoned.\n\nNow I knew why he'd come to my office -- to invite me to join him for lunch, which kind of surprised me, since we never did this during the day.\n\nBut after he'd seen Mitch looking pretty cozy with me, leaning in close and running his hands through my hair, I think Will decided against not only having lunch with me, but maybe even having anything to do with me again.\n\nConsidering how his marriage had ended, I couldn't really blame him. He'd been let down before, and probably thought I was no better than his ex-wife, going behind his back with someone else, especially with how close we'd become.\n\nI decided this was something I had to tell him face to face. This was not a conversation for over the phone.\n\nAnd if he'd bothered to come into the office again, I might have been able to explain to him what had happened with Mitch.\n\nBut a few days later, when I went up and asked again, Richard told me that Will had decided to take a trip to Taiwan to talk to one of the manufacturers. I think seeing the way my face dropped, Richard tried to soften the blow by telling me that he'd been putting the trip off for months, and finally had to deal with a few issues in person.\n\nI wanted to think it was true, and it was just business. But I had a feeling after he thought he'd found me cozying up with Mitch, he didn't want to see me anymore.\n\nNext day I was surprised to get a call from Charlie, my old boss. \"Hey, Grace, just wondering if you and Chrissy were still making cupcakes or if you've found a new job.\"\n\n\"Actually, I have found something, and it's going pretty well.\" If I ignored the fact that I'd been foolish enough to get myself tangled up with the boss. But that was something I decided not to share, even though I considered Charlie a friend.\n\n\"Well, I was kind of hoping you might consider coming back to work for me. I've got some new investors, and things are looking up. And if you haven't really settled in yet, I'd love it if you'd be okay with leaving where you are to come and work with us again.\"\n\nI had a feeling that Will would probably be relieved if he came back and found that I was gone. Then he wouldn't have to tell me to leave.\n\nStill, I really hated the thought of never seeing him again, even just to say goodbye. \"How about if I think on it for a bit, and get back to you on Monday?\"\n\n\"Sure. Just call and let me know. We've even got the same office space right across from the park. So, you'd still have the same view.\"\n\n\"Sounds good. Really glad to hear you're back in business, Charlie. And either way, I'll let you know what I decide.\"\n\nMonday morning, after an awful night's sleep, I woke up rolled over, took a look at my phone, and wanted to scream. How in hell could I be late again? I think I needed to get a new phone.\n\nAfter I'd raced through my shower and dressed in a panic, I got on the subway and crossed my fingers that this time there'd be no delays. Looking down at my feet, at least my shoes matched, since I made sure to take a close look at them before I'd slipped them on.\n\nWhen I got in the lobby, just like last time the elevator door was closing, so I raced as fast as I could to get inside. But this time it was empty.\n\nJust as the door was sliding shut, I gasped as I watched an arm reach out to push it open again.\n\nAnd I could hardly believe it when Will stepped inside. He eyed me for a moment, and I gave him a nod, not even sure what to say.\n\n\"We meet again,\" he said, looking around the elevator, then back at me.\n\nWhen I didn't respond, he said, \"I'm sorry, Grace. I know I shouldn't have just walked out without talking to you. It's just that when I saw Mitch looking like he was about to kiss you, with his hands in your hair, my mind went blank, and I knew I had to leave. I've asked around and I know he flirts with every woman in the office. And when I finally thought it through, I didn't think you'd be the type to play me like that.\"\n\n\"Well I'm not. And if you would have walked into my office, you would have heard me telling him to get his hands out of my hair, or I'd break his fingers.\"\n\nHe chuckled. \"That's sounds like you.\" Then he tipped his head and said, \"How about if we go up to my office and I order us some breakfast.\"\n\n\"I'm late enough now. And since I've only got two weeks left here, I think I'd better get in and get to work.\"\n\nHe looked puzzled. \"What do you mean you've only got two weeks left?\"\n\nI shrugged, deciding I might as well tell him. \"I handed in my notice on Friday. I'm going back to my old job.\"\n\n\"Grace, I said I'm sorry and I meant it. And you can't quit. I'll just tear up your resignation.\"\n\n\"I really don't think it's a good idea that we work together, even if we can manage to work things out.\"\n\n\"But I kind of like the idea of having my wife close by.\" He reached for my hand, squeezed it. \"So we can have dinner together every night, and talk, and...\"\n\nNot sure I heard him right; I turned and looked at him. \"What do you mean you like to have your wife close by?\"\n\n\"Well, I had planned to have lunch with you that day, and ask what you'd think of us getting married, we'd gotten so close. But after I saw you two together, I needed the time away to think.\"\n\nHe reached into his pocket and pulled out a ring box just as the door opened on the top floor, near his office.\n\nThen the door slid closed again because we didn't get out. I watched as he dropped to one knee, looked up at me and said, \"If you'll have me, and can forgive me, I'd love to make you my wife and spend the rest of my life with you.\"\n\nWiping at my eyes, I didn't know what to say. I was totally in love with him. And I could understand why he was upset, so I just threw my arms around him and hugged him tight. And I laughed as he wrapped his arms around me and squeezed, and kissed my belly since he was still on his knees.\n\nWe got married a few weeks later, just a quiet wedding with close family and a few good friends. And wow my man looked hot as hades in a tux. The way he smiled at me with eyes blazing as I came up the aisle in my little white dress on my father's arm, I wanted to run up and kiss him before we even said our vows.\n\nAnd after we'd settled into married life, we decided we'd split our time between the office, his condo and the cottage, since our two kids who came along a year apart, loved it up there as much as we did.\n\nAfter we'd finished lunch, our three and half year old daughter was holding a book her grandmother had been reading her about a white knight riding in on a horse to save his lady.\n\nSitting on her grandma Braden's lap in the living room, our little red-headed sweetheart, opened up her book pointed at the picture of the knight on horseback and asked, \"Did daddy ride in on a white horse and rescue you, Mamma? Is that how you got married?\"\n\nI shook my head and smiled over at my hubby sitting beside me on the couch. \"No, your Daddy was actually riding an elevator when he rescued me.\"\n\n\"And your mom was too, when she rescued me right back,\" Will said, as he slid his hand into the back of hair, to pull me against him and kiss my cheek.\n\n\"Is it even possible for two people to rescue each other?\" our dark-haired, nearly five year old son Billy asked, looking back and forth between the two of us, confused.\n\nWill smiled and pulled me a little closer. \"It sure is, because I know I wouldn't have the life I have now if it wasn't for your mother coming to my rescue.\"\n\nThen Will touched his lips to mine and I wrapped my arms around his neck, smiled against his lips and kissed him back. And watching us share a kiss, Billy groaned as his mother and father smiled and Kelly happily grinned clapping her hands together, like she was watching her fairy tale come true.\n\nThat first morning we met, I couldn't believe my luck when everything seemed to go wrong. But I realized now that the timing was perfect, because I found the man of dreams waiting for me to step inside that elevator and claim his heart.",
        "Looking around at our family now, with my hubby by my side, I think sometimes things are just meant to be, if you're willing to accept that everything happens for a reason. Whether it's an alarm that didn't go off, mismatched shoes, or even a weird salad that helps draw you together during a storm.\n\nAll I know is that I've got everything I've ever wanted sitting around me in this room. And I'd go through it all over again if I had to, especially if I knew it would turn out as wonderful as this."
    ],
    "authorname": "Smuttyandfun",
    "tags": [
        "going down",
        "pussy eating",
        "breast play",
        "dry humping",
        "intercourse",
        "kissing"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/perfect-timing-4"
}
{
    "title": "Three Weeks to Lose his Virginity Ch. 03",
    "pages": [
        "\"Would you like to fuck me, Spencer?\"\n\n\"Oh, god, yes,\" he replied.\n\n\"Mmmm. I bet you'd like to take your big fat cock and push it into my tight little pussy, you naughty boy.\"\n\n\"Oh, fuck, yes, Suzy. Please,\" he moaned into the phone.\n\n\"I'm touching my pussy now, Spencer. Let me see if I can slip a finger in to feel if you'd fit inside me. Oooh, it's so wet! I'm sure your dick would fit. Are you touching your cock now, Spencer? Are you wanking it?\"\n\n\"Yes,\" Spencer lied, gasping.\n\n\"Is it hard?\" Suzy breathed huskily down the phone.\n\n\"Oh, it's so hard, Suzy,\" Spencer groaned, looking down as Emma slowly swallowed his entire length without breaking eye contact.\n\nHe'd never begun to imagine that a girl as gorgeous as Suzy Simpson would possibly have even considered having telephone sex with him. But, right at this very moment, she was fingering herself while telling him how she wanted him to fuck her from behind. And it wasn't a dream.\n\nAnd that wasn't all.\n\nDespite numerous diverse and elaborate sexual fantasies, never had Spencer really thought that a truly stunning woman would ever want to have any sort of sex with him.\n\nBut kneeling in front of him was a bona fide fantasy woman. She had shoulder-length brown hair, dark eyes and a wide generous smile. She was tall and long-limbed with a perfect arse and large flawless breasts. And she had his cock in her mouth.\n\nAt first when Emma had come to baby-sit him for three weeks while his mum was away on holiday, Spencer had been indignant. He was eighteen and could look after himself.\n\nBut when Emma had begun to casually masturbate him for no more reason than because he liked it, he'd started to see the upside of her staying. And when she'd starting sucking him off and then letting him fuck her up her arse, he'd decided that maybe having a babysitter wasn't so bad.\n\nOf course, he knew that it wasn't his appearance or personality that had seduced her to a position of such immense sexual goodwill. Instead she'd found him at a low ebb in terms of his confidence with girls and, through of a strange combination of affection and pity, had decided to boost his self-assurance in as direct a way as could be imagined.\n\nAnd, even beyond the regular blowjobs, tit-wanks and butt-fucks, it had paid dividends already.\n\nSuzy Simpson, one of the most delightful girls in his year at school, had agreed to go out with him; they'd had a lovely evening culminating in her sucking his dick. Since then, they'd spent most of the weekend on the phone, gradually increasing their level of flirtation until it had become full-on dirty phone sex.\n\nAlthough this was the first time that she'd called mid-blowjob from Emma.\n\nHe knew that the polite thing to do was to ask Suzy to call back or ask Emma to stop. But he'd rationalised that he would have just had a wank anyway while he talked to Suzy, so he'd surreptitiously asked Emma to keep on sucking. He felt slightly guilty but what Suzy didn't know wouldn't hurt her, he reasoned as Emma began to bob her head at phenomenal pace. \"Oh, Spencer, I'm coming!\" he heard Suzy gasp down the phone.\n\n\"Me too!\" he groaned as he heard her orgasm. He pulled Emma's head towards him, pushing himself down her throat as he ejaculated abundantly.\n\nAfter a few moments, Suzy breathed contentedly down the phone, \"Mmmm, Spencer. That was nice. I can't wait to see you tomorrow at school.\"\n\n\"Me neither. Suzy, do you think we can maybe meet up after school? It would be nice to get some time on our own together.\"\n\n\"Spencer! I know what you want, you dirty bastard,\" Suzy laughed. \"You'll have to wait though. I've got a dissertation to do by the end of the week and I need the evenings to finish it. But I promise I'll make up for it on Friday night. Are we still going to be able to use your house?\"\n\nSpencer had already agreed with Emma that she'd make herself scarce so that he and Suzy would be able to come back to his mum's house to get some time alone. In fact, Emma had been very supportive, saying, \"Spencer, she sounds like a horny little tart! Looks like you're on a promise, darling.\"\n\nHe continued, \"Yes! My mum's friend is going out that night so we'll have the place to ourselves.\" He smiled down at Emma as she languidly licked him clean.\n\n\"Great! I can't wait to feel you inside me. Anyway got to go! Bye!\" Suzy giggled as she hung up.\n\n\"Suzy! Suzy! Oh shit!\" he said as he put the phone down. \"She's such a tease!\"\n\n\"Good for her,\" Emma replied as she pulled herself up onto the sofa next to him. \"It's not like she's over-promising and under-delivering, lover.\"\n\n\"Oh, no, she's great. In fact she's just told me that she wants me inside her! Oh, Emma, I can't believe how wonderful you've made me feel. Everything's going so well,\" he enthused. But even as he said the words he had a stab of misgiving remembering that, in just one week, Emma would be gone.\n\nOver the last two weeks, he'd had more sex than he had ever dreamed possible, performing virtually every sexual act he could envisage with Emma except for full vaginal penetration. On top of that she had also set him up beautifully, transforming his appearance and giving him the confidence to talk to girls and to make them laugh.\n\nBut by next Saturday night his mum would be back and she'd be gone.\n\nOf course, things were going fantastically with Suzy but he was realistic enough to know that once Emma was gone, he would never again have a living goddess at his beck and call, willing to fulfil almost any fantasy he wanted.\n\nHowever, despite her liberal attitude to sex and her generous viewpoint on sharing her body, Emma was unusually old-fashioned about taking Spencer's virginity. She felt that he should lose it to someone his own age, that somehow it would be wrong for her to steal his cherry, even though she was only ten years older than him.\n\nSpencer didn't really understand it but she was adamant and he'd promised he wouldn't take advantage of her even when she was in the throes of passion and quite possibly more than willing to agree to full penetration.\n\nHaving said that, she had matter-of-factly promised that if he lost his virginity this week then he could fuck her as many times as he wanted, for as long as he wanted and in any position he wanted.\n\nSo, even though she would be gone soon, Spencer knew he a damn good chance of having her; Suzy had virtually promised him that they would fuck on Friday night. And after that, Emma was his. His cock twitched at the thought.\n\n\"Oh, I see there's life left in him, after all,\" Emma joked. \"If you can wait until after supper, we'll try out another position. My arse has recovered from that pounding you gave it this morning and I quite fancy it with me on top.\"\n\nSpencer groaned in lust. Fuck, life was great.\n\n~~~\n\nOn the next day at school, Spencer couldn't wait to see Suzy. His first chance came at morning break.\n\nShe was with her best friends Anna and Jenny, both of them striking in their own rights. Anna, tall and slender with auburn hair and bright green eyes, smiled broadly at him as she saw him approach. She turned to Jenny, a busty doll-like half-white half-Chinese beauty and said, \"I think we should leave these two alone for a bit.\"\n\nThey walked away giggling.\n\n\"Hello, Suzy,\" Spencer grinned. \"You look, gorgeous.\" Suzy had spiky blonde hair and a curvy body that exuded lush sexuality.\n\n\"Hi, Spencer. How are you?\"\n\n\"Well to be honest, I'm really happy to see you. Even though you make me feel, well, you know,\" Spencer stuttered.\n\n\"Hmmm. I can see how I make you feel!\" Suzy laughed. \"I can't wait for Friday,\" she whispered.\n\n\"Oh, shit, Suzy. I want you so much,\" he groaned into her ear.\n\n\"Spencer! You're so naughty. Still, I can't wait to feel your big cock inside me.\"\n\n\"Fuck. I think I'm going to explode!\" Spencer breathed.\n\nSuzy considered briefly. \"Tell you what, I suppose I can spare ten minutes at lunchtime to sort that out for you,\" she said as she gave his cock a furtive squeeze. \"Meet me behind the Art room at 12:30 and I'll give you a quick handjob.\"\n\n\"OK!\" Spencer replied.\n\n\"See you later!\" Suzy giggled as she left him holding his bag in front of his bulging crotch.\n\nSpencer groaned in a mix of lust and frustration before making his way to his next class, trying to relax.\n\nBy the time he met Suzy, he was hard again. They were outside, in a narrow alleyway behind a portakabin that housed the Art room.\n\nShe laughed as, after a quick check to ensure they weren't observed, she unzipped him and pulled out his erection. \"Hello, big boy, how have you been?\" she teased. \"Did you miss me? I missed you.\" she added as she began to masturbate him.\n\n\"Oh, Suzy,\" Spencer hissed as he fondled her substantial bosom.\n\n\"We'll have to be quick,\" Suzy whispered. \"Come on. Spunk for me, Spencer.\"\n\nFor the next ten minutes Suzy wanked him furiously while whispering filthy endearments in his ear. Eventually, with her arms tiring somewhat, she bent her head down murmuring, \"Perhaps, I should give him a little kiss.\"\n\nAs Suzy's hot mouth enveloped the head of his cock, Spencer shivered at the glorious sensation of her velvet tongue tickling the tip of his glans. She started to hum in pleasure as Spencer grabbed the back of her head and began to slide his dick in and out of her mouth.\n\nShe cupped his buttocks and pulled him towards her on every forward thrust, urging him to come in her mouth. Spencer didn't disappoint and, within two minutes, he cried out in ecstasy as he flooded her tongue with jism.\n\n\"Wow! That was a lot of come! Oooh, I feel so horny but I've got to go,\" Suzy complained. \"Perhaps you could return the favour tomorrow?\" she added as she kissed him goodbye.\n\nOver the next few days, Spencer met Suzy every lunchtime for a sneaky blowjob. He also made sure she was satisfied with his 'magic fingers', as she called them, although she wouldn't let him go down on her.\n\n\"Wait until Friday night,\" she kept saying. \"You'll be able to do whatever you want to me then!\" she promised.\n\nEvery night, he would tell Emma about his encounters with Suzy.\n\n\"Wow, she's such a whore!\" Emma exclaimed after hearing about Suzy's oral exploits. \"Absolutely perfect. Makes me feel creamy between my thighs just thinking about you giving her a good fuck. Come here and put that tongue of yours to work.\"\n\nSpencer also got plenty of practice at fucking Emma up her arse in a variety of positions. As Friday approached, he was feeling more and more confident. Emma had told him he was good with his tongue and fingers and that his stamina was better than many men twice his age. She also seemed to adore his cock saying it was just the right size - big but not too big.\n\nEmma even had a programme formulated to relax him on Thursday night, which involved a long slow passionate blowjob while he sat and watched the football, beer in hand.\n\nAfter she'd finished, timing his ejaculation to the final whistle, Emma told him that that it would be his last until Suzy the next night.\n\n\"Need to make sure you're nice and aroused tomorrow, after all.\"\n\nSpencer fell asleep that night dreaming of finally having full sex. By this time tomorrow he would no longer be a virgin.\n\n~~~\n\nSpencer held his head in his hands in despair.\n\nHe was sitting on a bench on the High Street and he'd been waiting nervously for Suzy. Their shared plan had been to take her to a really swanky restaurant and then back to his house for sex.\n\nBut it had all gone wrong.\n\nHe'd got there half an hour early, eager to see her. He hadn't had to wait long for the call that ruined his evening. As soon as he'd heard her voice, he knew something was wrong.\n\n\"Oh, Spencer, I'm so sorry but it's my Nan. She's been taken ill and we're all driving down to Bristol to see her. I'm so sorry to let you down. I've been so looking forward to tonight and I know you have too.\"\n\nSpencer had swallowed his disappointment and reassured her that of course it was fine and she shouldn't worry and he really hoped her grandmother was OK. He would be all right.\n\nBut of course he wasn't all right. Emma would be leaving tomorrow evening. And she wouldn't let him fuck her unless he'd fucked Suzy first.\n\nHe knew it was inconsiderate and selfish but he couldn't help feeling a twinge of annoyance at Suzy for putting her dissertation first and for keeping him waiting until tonight. In reality they'd had dozens of opportunities to fuck this week.\n\nAnd here he was, stood up and alone. Emma was out tonight with old friends so he couldn't even go home for a consolation blowjob or arse-fuck.\n\nHe stood up and began to make his way desultorily back towards his house.\n\n\"Hello Spencer,\" he heard from behind him.\n\nHe turned to see Suzy's best friends Anna and Jenny. They were dressed in their clubbing gear. Anna was wearing an emerald green crop-top that matched her eyes with a scandalously short black mini-skirt and matching black fishnets and green stilettos. Jenny was in a plunging cream t-shirt that showed off a surprisingly impressive cleavage, tight black leggings and knee high boots.\n\nThey both looked stunning.\n\n\"Oh, hi,\" he stuttered.\n\n\"Suzy just called us. She said what had happened and said you sounded down. She asked us to come and look after you,\" Jenny told him.\n\n\"Poor, Spencer. All horny and no-one to fuck,\" Anna giggled.\n\nSpencer realised that they were both already pretty drunk.\n\n\"She asked you to look after me, did she?\" he asked. \"Where were you off to?\"\n\n\"We were going to go Lollipops for some drinking and dancing, big boy. Why, where were you going to take Suzy?\"\n\n\"Oh, we had a table at Le Gros Canard,\" he replied.\n\n\"Wow, really. I thought it was really difficult to get in there,\" Anna said, seemingly impressed.\n\nJenny added, \"Yeah and it's really expensive too.\"\n\nSpencer had Emma to thank for somehow getting him a table but also funding his seduction of Suzy.\n\n\"Oh, well,\" he said glumly. \"I guess I'll just have to cancel now.\"\n\nAnna and Jenny glanced at each other meaningfully before stepping forward to take one of Spencer's arms each.\n\n\"Or you could take us,\" Jenny said almost literally fluttering her eyelashes.\n\n\"Hmmm, please Spencer. Suzy said we had to look after you and I promise we'll really show you a good time,\" Jenny purred, pressing a breast against his arm.\n\nSpencer considered for a millisecond. Although he felt loyalty to Suzy it was outweighed by the fact that her two best friends were seriously hot.\n\n\"OK, let me call up the restaurant and see if they can get us a table for three instead of two.\"\n\n~~~\n\n\"Are you sure no-one's home?\" Jenny whispered loudly in his ear as he fumbled with his front door key.\n\n\"Yeah, I promise. My mum's away and Emma's out until after midnight,\" Spencer replied. \"Come on girls, in we go.\"\n\nThe meal had gone perfectly. Jenny and Anna had been overawed by both the ambience and the food. Spencer had, after slipping \u00a320 to the waiter, pretended he was used to such places and done his best to maintain an urbane demeanour although this was tested a few times when Jenny exposed her cleavage by leaning towards him or Anna saucily squeezed his thigh to emphasise a conversational point.\n\nAfter the meal the girls had said they wanted to go clubbing. Spencer had counter-proposed coming back to his house to drink his mum's drinks cabinet dry. Surprisingly, after a giggled consultation, they'd agreed.\n\nSpencer put on some music and went to the kitchen to fix them all drinks. He checked his phone and found two texts, one from Emma wishing him luck and one from Suzy saying her grandmother was all right and that she'd call him on Sunday.\n\nWhen he came back to the living room the girls were dancing with each other, gyrating sexily with a lot of sinuous hip action.\n\n\"Oh, wow,\" he said as he came in, his cock stiffening.\n\n\"Come on, Spencer,\" Jenny held out her hand to him.\n\n\"Um, well, no I don't really dance,\" he said, wishing that Emma had thrown in a few dancing lessons as part of her sexual curriculum.\n\nAnna glided over to him and pulled him to the middle of the room. \"We need to a big man to dance with,\" she giggled.\n\nSpencer shuffled from foot to foot as the girls rubbed themselves all over him.\n\n\"Hmmm, Suzy said you were a big boy,\" Jenny said as she ground her arse into his crotch as Anna rubbed her bum all over his.\n\n\"Oh, fuck,\" he replied, all pretence at concealing his bulge gone.\n\nJenny turned and gave him a deep ardent kiss, allowing her tongue to entwine his agilely, while Anna's hand slid down the front of his body to squeeze his cock through his trousers.\n\nShe skilfully unzipped him and released his erection.\n\n\"Oh, is it as big as it feels, Jenny?\" she asked.\n\nJenny looked down at Spencer's erection poking into her tummy.\n\n\"Oh, my, yes. Suzy said you had a big one. Come and have a look, Anna.\"\n\nThe girl pulled him towards the sofa before sitting down in front of him.\n\n\"Wow, lucky Suzy!\" Anna laughed as she slowly tossed him.\n\n\"You mean lucky us,\" Jenny replied, cupping his heavy full balls.\n\nSpencer didn't know what to say so wisely kept his mouth shut.\n\n\"So Spencer, do you think you can keep a secret?\" Jenny asked teasingly.\n\n\"Yeah, we do love Suzy so we don't want her to know we've shagged her boyfriend before she has. To be honest, Spencer neither of us really fancy you but Suzy told us you had a big cock and that you lasted for ages so we thought it might be fun to have a fuck.\" He could feel Anna's breath on his cock as she spoke.\n\n\"And you've been so nice to us. That restaurant was amazing and anyway we're both feeling a bit horny,\" Jenny continued. \"So what do you say? Would you like to fuck us?\"\n\nIn reply Spencer slid his cock into her open mouth.\n\nAs Jenny moaned around his dick, Anna commented, \"I think that's a yes!\" before leaning forward to lick his balls.\n\nJenny's oral technique was slightly clumsy compared to Emma's assured sucking and even Suzy's enthusiastic head-bobbing, but it still felt amazing to Spencer. He couldn't believe that he had two beautiful girls, admittedly two very drunk beautiful girls, willing to give him head at the same time.\n\nAs the girls noisily swapped roles, with Anna taking over sucking his glans while Jenny licked his shaft, he moaned in ecstasy. \"Oh, fuck yes, girls.\"\n\nIn response they began flicking their tongues over the head of his knob whilst looking up at him with innocent eyes.\n\nThe shared blowjob continued for another fifteen minutes during which Spencer silently thanked Emma for building up his stamina.\n\nEventually, while Jenny continued to bob her head on him, Anna stood up to kiss him and undress. She slipped her top over her head to reveal small perfectly-shaped breasts with hard red nipples which he began to suck.\n\n\"Oh, Spencer that's nice,\" she moaned.\n\nAs he nibbled, Spencer roughly pulled down her mini skirt to reveal astonishingly long legs clad in fishnet hold-ups and a perfect bottom in a black thong.\n\n\"Bloody hell, Anna. You're fucking hot,\" he growled in lust while pulling off his clothes, carefully keeping his cock in Jenny' ravenous mouth.\n\nAnna smiled at him before peeling off her g-string and laying back on the sofa with her legs apart. The well-manicured thatch of red hair above her pussy was as red as the hair on her head. Her pussy looked moist and welcoming.\n\nSpencer bent down and licked her pussy up and down firmly before sliding a finger into her sopping cunt and licking her clit.\n\nAnna's moans were immediate and loud. \"Oh, fuck, fuck, fuck yes. Oh, that's so fucking good,\" she screamed.\n\nSpencer tried to ignore Jenny's hot sucking mouth and concentrated on giving Anna as much pleasure as possible so it was no surprise when she orgasmed noisily within just a few minutes.\n\n\"Wow, Jenny, you've got to try him out! That was incredible,\" she eventually gasped.",
        "Jenny, who had been fervently giving him head all this time, got up and quickly undressed. Her breasts, although of medium size in absolute terms, looked enormous on her tiny frame. Her skin was a gorgeous golden colour and her pubes shiny and black.\n\nShe sat on Spencer's left and they began to kiss passionately while Anna sucked him once more.\n\nSpencer kissed and nibbled his way down Jenny's taught body, via her generous boobs, until he was making her pant in anticipation before licking her sweet tasting and immensely tight pussy.\n\nIf anything she was even more receptive than Anna going through a rapid series of orgasms while she clamped her thighs around his face.\n\nMeanwhile Anna had been playing with herself whilst wanking his cock erratically with her left hand. Losing patience, she dragged Spencer off Jenny and begged, \"Please, Spencer. I need a fuck.\"\n\nSpencer allowed himself to pulled on top of her, the head of his cock lodged against her pussy lips.\n\nHe paused. This was it. Finally he would be losing his virginity. Not to Emma. Or Suzy. But to the equally gorgeous Anna. None of this would have seemed even vaguely possible three weeks ago.\n\n\"Go on Spencer, fuck her. She's just a naughty little slut who needs a good shagging,\" Jenny encouraged filthily in her sweet voice.\n\nSpencer thrust his hips forward and his cock slid in smoothly all the way to the hilt. Despite the immediate physical pleasure he was feeling and the implausible sexiness of the two girls with whom he was, in his mind he pictured driving his cock into the marvellous Emma. At least for a few seconds.\n\n\"Oh, my God, fuck, that's amazing,\" he cried. Anna's cunt was as hot and as wet and as tight as he could ever have dreamed. She squeezed her pussy in response to his words.\n\n\"Glad you like it. Now give it to me hard,\" she ordered. Spencer didn't disappoint.\n\nHe forgot all of Emma's lessons in taking his time as he began to frenetically push his cock in and out of Anna's pussy and within seconds she was screaming and moaning in pleasure.\n\nJenny fingered herself and watched on in awe as Spencer pounded Anna's cunt with every ounce of effort he could muster. Over the next 15 minutes, Anna screamed out orgasm after orgasm until she begged, \"No more, no more.\"\n\nSpencer, who had got very close to his own release, groaned in frustration but as soon as he'd withdrawn, Jenny pushed him back on the sofa before climbing on top and slowing sliding herself down his pole. Gingerly she moved up and down until she was comfortable with his length and width before beginning to passionately grind herself back and forth.\n\nSpencer grabbed her hips and pushed himself up into her but Jenny artfully kept control by slowing her pace down until he relaxed. Instead he made her squeak by reaching up to play with her dark nipples.\n\nIt wasn't long before Jenny started to come, making delightful high-pitched grunts every time she climaxed. And then Anna, having recovered from the hammering Spencer had given her pussy, decided to join in and straddled his face, squarely placing her cunt on to his mouth, whilst facing Jenny.\n\nDespite the fantastic sex Spencer had had over the last three weeks, this was surely the highlight. The heady taste of Anna's adorable pussy, the incredible tightness of Jenny's cunt and the softness of her pert tits in his hands combined to bring Spencer ever closer to his inevitable orgasm.\n\nBut suddenly Jenny, after another shattering climax, collapsed into her friend's arms just as Anna herself came once more.\n\nThe two of the climbed off him, thoroughly spent, as Spencer watched in disbelief.\n\n\"Please! I'm so close,\" he begged.\n\n\"It's OK. It's your turn now,\" Anna promised before swallowing his cock without a care for her friend's pussy juices.\n\n\"Yes, you can come over our faces,\" Jenny agreed before bending down to gently tickle his anus with her tongue.\n\nThis was just too much for Spencer, who within just a few minutes of sucking, licking, bobbing and slurping, shouted in ecstasy and began to spurt uncontrollably in Anna's mouth. She pulled her head back to take a few ropes of jism on her face before directing more spunky squirts over Jenny's eager tongue.\n\nSpencer slumped back on the sofa and watched as the girls enthusiastically licked each other and his cock clean of any trace of cum.\n\n\"Wow,\" Anna said, \"that's the best fuck I've ever had!\"\n\n\"Me too!\" Jenny agreed.\n\n\"And me,\" Spencer joked. \"That was my first time.\"\n\n\"No!\" the girls looked astonished. \"Really?\"\n\n\"Yeah but, shit, it was really worth waiting for. Just fucking fantastic,\" he sighed.\n\n\"God, Spencer. I can't wait until you get some more practice!\" Jenny laughed.\n\n\"Yeah. Shit, I wish we could tell Suzy what's she's missing out on. I think we should wait until you've had her and then when she tells us all about it we should beg to be allowed a go on you. I think she'd say yes,\" Anna said.\n\n\"What do you think, Spencer? Maybe we could have a foursome? Do you think you could handle all three of us?\" Jenny asked.\n\nSpencer's cock twitched in response as it began to harden at the thought.\n\n\"Fucking hell! It's getting stiff again. I'm not sure about you, Anna, but I don't think I could take it in my pussy again but I'm up for another blowjob,\" Jenny said.\n\nAnna answered, \"Yeah, all right,\" before the two girls bent their heads down to suck him once more.\n\n~~~\n\nSpencer woke to the familiar feeling of a tongue sliding under his foreskin and a soft hand cupping his balls. For a few moments he couldn't recall where he was. Was it Jenny or Anna?\n\nThen he remembered how the previous evening had ended.\n\nThe girls had given him a splendidly adoring and thorough blowjob before, despite their earlier resolve, taking turns to get fucked once more in every position imaginable. They eventually left at midnight, thoroughly shafted and having some difficulty walking. He'd seen them off to their taxi with an enormous smile and an aching cock.\n\nWhich meant that the mouth that was currently bobbing up and down on his erection under the covers had to be...\n\nHe threw his duvet off to see Emma smiling wickedly around a mouthful of dick.\n\nShe paused her oral ministrations to say, \"Darling, you did it! You taste of very sweet pussy.\"\n\nHe laughed as he pulled her up the bed to kiss her and draw open her gown to reveal her outstanding figure. \"I'm going to fuck you now,\" he promised.\n\nEmma's nipples hardened under her his tweaking as she replied straight-faced, \"Oh, OK, if you must.\"\n\nShe let her legs fall apart as he lay on top of her, carefully positioning his cock at her wet entrance. Slowly, inch by inch, looking deep into her eyes, he pushed himself into her welcoming pussy.\n\nEmma's pussy wasn't as tight as either Anna's or Jenny's but as soon as he was all the way in, she rippled her vaginal muscles tantalisingly.\n\n\"Oh, my god,\" he swore in astonishment.\n\n\"Does that feel nice, lover?\" she teased. He began to fuck her, slowly at first but then more and more quickly.\n\nHe'd waited three weeks to have her and now that he was finally inside her, he was in no way disappointed. Despite his repeated ejaculations of the last 24 hours, he could feel himself rapidly moving closer and closer to climax as she almost sucked in him with her incredible cunt.\n\n\"Oh fuck, oh fuck,\" he began to chant as Emma also started to moan deeply in lust. They both got louder and louder until Emma's whole body convulsed in an enormous orgasm almost throwing him off her. This was too much for him and he screamed, \"I'm coming,\" before flooding her pussy with a seemingly unending amount of jism.\n\nThey held each other silently for an age until Spencer rolled her over so that she was on top of him, his cock still lodged inside her.\n\n\"I love you, Emma,\" he whispered, meaning it absolutely.\n\n\"And I love you, Spencer,\" she replied warmly kissing him. \"Was it worth waiting for?\" she asked fondly.\n\n\"Oh, fuck, yes. Considering all the amazing things that have happened to me over the last three weeks, that was by far the best.\"\n\n\"Thank you, Spencer, darling. I aim to please!\" she smiled, flexing her pussy around him.\n\nHe gasped, \"I don't know how you do that but it's incredible.\"\n\n\"So, lover, tell me all about last night. Was Suzy a great fuck?\"\n\nEmma laughed in disbelief as Spencer told her about being stood up, meeting Suzy's friends and how he brought them home for a comprehensive fucking.\n\n\"You lucky bastard! And I'm a lucky bitch too! Thanks goodness you lost your virginity last night,\" she giggled.\n\nAfter a thoughtful pause, Spencer said, \"Do you really have to go tonight?\"\n\nEmma kissed him tenderly before sighing. \"Yes, darling. I don't think it would be a great idea for your mum to come home and find us in bed together.\"\n\n\"Oh, OK,\" he replied dejectedly.\n\n\"But,\" Emma continued, \"the good news is that I'm not going far. In fact I've managed to get myself a flat in Kensington. I'll only be half an hour away on the tube.\"\n\n\"Really! Oh, Emma, that's fantastic!\" Spencer exclaimed. \"Can I come and see you there? You know...\"\n\nEmma laughed. \"Oh, Spencer. I promise that you can come and see me as often as you want and I also promise you can have sex me with in any hole and any position you want. I'll dress up for you. I'll do anything you want. In any case, I've still got lots to teach you.\"\n\n\"Really? I thought we'd done everything now!\"\n\n\"Oh, we haven't even started. When I'm finished with you, you'll be able to make your girlfriends come with a raise of an eyebrow!\"\n\nThey kissed again until Emma sat up, straddling him. \"Mmmm. Feels like you're almost ready to go again. I quite fancy a day in bed. I wonder how many times we can fuck before 4 o' clock. Shall we?\"\n\n\"OK, Emma,\" Spencer replied, cupping her breasts as she began to ride him.\n\nAs he played with her full tits and hard nipples, he lay back, once more, in ecstasy. It looked like the best three weeks of his life might not be quite coming to an end after all. "
    ],
    "authorname": "seth_perm",
    "tags": [
        "male virgin",
        "blowjob",
        "his first time"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/three-weeks-to-lose-his-virginity-ch-03"
}
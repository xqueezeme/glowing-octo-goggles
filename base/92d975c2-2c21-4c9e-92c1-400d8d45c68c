{
    "title": "Secret Smiles and Three Little Words Pt. 11",
    "pages": [
        "Chapter 13* \n\nGavin opened the door for Alex to his apartment, she wasn't three feet in the door before Elizabeth engulfed her in a massive hug then leaned in and kissed her. Full on. Tongue and all, like she was some sort of long lost boyfriend. \n\n\"Missed you too,\" Alex smiled breathlessly when Elizabeth pulled from her lips. \n\n\"I'm so happy to see you back!\" Elizabeth gushed, guiding her towards the living room. \"Don't worry, we will get him to let you live here regardless of what he wants.\" \n\n\"Wait,\" Alex spun. \"I'm not going to stay here?\" She instantly began to wonder, how was that going to work? How could she be his sub if she wasn't here to serve him? \n\nGavin exhaled and growled. \n\n\"Let's take this one step at a time,\" he said closing his eyes. \"Right now, you should stay with Lena, what would she do without you?\" \n\nAlex dropped her head guiltily at the tone. He was right. She couldn't leave Lena in a lurch. \n\n\"As I said before, you can come and go as you please,\" he smiled at her, reading her easily. \"Stay when you want, go back to your apartment when you want.\" Alex nodded and tried her best to keep from frowning. None of this was the fantasy she had in her head. \n\nThe three of them made dinner together. Moving around the kitchen, drinking wine as they did so. Alex would glance over at Gavin from time to time and he would wink at her. As she carried the salad bowl out towards the table she leaned into his ear. \n\n\"My bottom is still a bit sore,\" she whispered. \n\n\"So you don't want your other ten?\" he teased. She looked back over her shoulder with a sly smile. She nodded with an arched brow. The mere mention of the rest of her discipline made her knees weak with excitement. \n\nThey ate quietly. It felt more like a family meal than a threesome dinner. A Dom, his sub and their pet. Alex didn't mind the sound of that too much. She would shift in her seat from time to time. Her ass was still tingling. \n\n\"So what did you guys do all day?\" Elizabeth asked. \n\n\"Gavin took me shopping,\" Alex frowned with an exasperated roll of her eyes. \n\n\"You make it sound like it was horrific!\" Elizabeth laughed as she took a sip of her wine. \"It's something you better get used to, as a sub, you have to give him whatever pleases him.\" \n\n\"I understand that,\" Alex nodded. \"I'm just trying to figure out how taking me shopping pleases him.\" She looked to Gavin for explanation but he just smiled at her. \n\n\"He likes spoiling us,\" Elizabeth said for him, giving him an approving smile. \"It's what separates him from the others. Any guy can fuck, but only the few bring pleasure with the little things that we like. It's also a reward for being a good sub. The little things. Taking care of us is very important to Sir.\" \n\n\"It took me awhile to figure it out as well,\" Elizabeth continued as Gavin shook his head. The phone ringing gave him a good excuse to get up and leave. \"See, Gavin tries to separate himself. He is a gentleman to a fault. I love that! He may be the Dom, and we the subs, but he spoils us like we are princesses!\" \n\n\"Like the car doors?\" Alex asked her while she watched Gavin talk on the phone in the living room. She hoped he wasn't being called away. Then again, he wasn't on his cell, this was his apartment phone. It's the cell that usually required him to leave. \n\n\"Exactly!\" Elizabeth gushed with a happy laugh. \"How many guys have ever opened the door for you?\" \n\n\"None before Gavin,\" Alex agreed unable to take her eyes off the man igniting her desires. \n\n\"It's the little things that makes Gavin stand out,\" Elizabeth raved. \"I mean, I've had bigger guys,\" she whispered to Alex with a smile. \"Not that Gavin isn't big, but he isn't huge!\" \n\n\"You mean like Horse Cock?\" Alex coughed at the bluntness of the conversation. \n\n\"Oh my God! Did you see him?\" Elizabeth squealed. \"I was hoping you would!\" \n\n\"Yeah,\" Alex nodded. \"Mascot head and all.\" \n\n\"Yeah, isn't that ridiculous? But that's probably because he is butt ugly!\" Elizabeth told her with a bright smile. \"But with that cock, he could be a star!\" \n\n\"Tempted?\" Alex asked her. \n\n\"Not in the least!\" Elizabeth assured her. \"I mean I'm into pain but that ain't right!\" \n\nAlex and Elizabeth laughed like lifelong friends at a weekly lunch date. \n\n\"No, I would never let him touch me, nor do I have any desire to touch him! Not even if you paid me to!\" Elizabeth said resolutely. \n\nGavin had a very animated conversation but Alex could tell by the way he bent at the waist laughing, it was a very good phone call. His laughter brought her eyes to him as Elizabeth continued on. The normally reserved Gavin, let his guard down and became a boisterous little boy in the living room. \n\n\"Must be Pavel,\" Elizabeth told her watching him. \n\n\"Pavel?\" Alex asked smiling at his behavior. \n\n\"Med school buddy,\" Elizabeth frowned unhappily. \"He must be coming to town. He only calls when he does.\" \n\nGavin hung up and came back with a beaming smile. \n\n\"Sorry, ladies,\" he said sitting down but unable to shake the smile or his red face from his laughter. \n\n\"Pavel?\" Elizabeth asked. \n\n\"Yeah, he will be in town tomorrow night,\" Gavin grinned happily. \n\n\"Who's Pavel?\" Alex asked him. \n\n\"Trouble,\" Elizabeth frowned. \n\n\"He is not!\" Gavin defended. \n\n\"No?\" Elizabeth cocked her head. \"How many times have you been arrested that didn't include Pavel?\" \n\n\"What!\" Alex gasped in disbelief. She went back to when Gavin said he was much too controlled for anything crazy. \n\n\"Stop!\" Gavin warned her. \"One time.\" He smiled looking at Alex who couldn't stop smiling in disbelief. \n\n\"We were at a protest rally,\" Gavin explained. \"In med school, we were protesting about the lack of U.S. involvement in African civil war.\" \n\n\"Keep going,\" Elizabeth coerced. \n\n\"Pavel, threw a rock, broke the window of a big banking firm, the police got a little rough in arresting him. I stepped in...it went south from there,\" Gavin grinned. \n\n\"Went south from there?\" Alex gasped. Getting arrested was as far south as she was willing to go. \n\n\"Yeah, we both got pretty roughed up, pepper spray was involved,\" Gavin shook his head remembering the burning in his eyes. \n\n\"About got bounced out of med school if I remember the story right,\" Elizabeth pointed out. Alex was stunned. \n\n\"Yeah,\" Gavin shrugged. \"The Dean wasn't too happy with us.\" \n\n\"Good thing his dad had diplomatic immunity,\" Elizabeth told Alex. \n\n\"Dad was a diplomat at the U.N.,\" Gavin told her. \"He had to fly in to bail us out.\" \n\n\"I would have never guessed you would have run afoul of the law!\" Alex reveled in the story. \"How do you know all this?\" Alex asked Elizabeth as she knew they had not been together in med school. \n\n\"Pavel has a big mouth!\" Gavin sighed. \n\n\"He was here right after we got together,\" Elizabeth explained with disdain. \"Well, tell him hello as I will be out of town.\" Gavin nodded as he took a bite of his food with a smile. Alex watched the anger in Elizabeth's face. She didn't like Pavel. Alex wondered why. \n\n\"Where are you going?\" Alex asked her. \n\n\"Work,\" Elizabeth smiled. \n\n\"What do you do?\" \n\n\"I work for an environmental lobby,\" Elizabeth said proudly. \"I'm flying to New Orleans in the morning to get an update on the ongoing effort of the BP Horizon spill.\" \n\n\"I thought that was all done?\" Alex asked her. \n\n\"It will never be done,\" Elizabeth frowned. \"What happened down there was an ecological disaster! It will take the better part of a century to fully gage all the damage.\" \n\n\"So what was California?\" Alex asked her. \n\n\"That was a conference on Global Warming and the effect on the drought conditions in Cali,\" Elizabeth shrugged. \n\n\"Alex,\" Gavin frowned. \"Would you like to go out with us tomorrow night?\" \n\n\"You probably should...they may need more bail money!\" Elizabeth teased. \n\n\"I would love to,\" Alex smiled. She was excited to see a boisterous side of Gavin. A loose, uncontrolled side. \"But if you want to see him alone...,\" \n\n\"No,\" Gavin shook his head. \"Elizabeth is right, I need a chaperone. If nothing else just to keep me in line!\" The caused Alex to laugh with him. \n\n\"What should I wear?\" she asked him. \n\n\"Surprise me,\" Gavin winked at her. \n\nThey continued to eat and Alex began planning her wardrobe. She then tilted her head at him. \n\n\"What?\" he asked her. \n\n\"Why is it you don't talk to him very much?\" Alex asked. It would seem to her that if he was a close friend he would talk to him more. \n\n\"Pavel works with Doctors without Borders,\" Gavin shrugged. \"Most of the time he is in Africa hundreds of miles from the phone.\" \n\n\"OH!\" Alex admired. She loved people who could do things noble like that. It didn't sound like Pavel was that much trouble. \n\nAfter clearing the table Alex loaded the dishwasher as Gavin put the left overs up. She smacked his back side as he was bent over. He turned and smiled at her and went slowly to her. \n\n\"Sorry,\" she smiled. \"Couldn't resist the payback!\" \n\n\"I understand,\" he grinned as he kissed her lips. \"Do you need to go back right away?\" \n\n\"I'm yours to command, even with all your restrictions and rules,\" she grinned letting him know she was kidding. \n\n\"Come with me,\" he whispered. \"I want to play.\" \n\nHe took her by the hand and led her from the kitchen. Elizabeth smiled as she led the way. Alex went back to the first night. Her body began to react immediately as the feelings and memories flooded in. \n\nAlex dropped his hand as soon as she entered the room, she undid her red shirt and dropped it to the floor, following the rule he set for her about being naked in the bedroom. Elizabeth took her clothes off as well, soon they were both in their underwear as Gavin watched from the chair. \n\n\"What's this?\" Elizabeth asked with a smile coming to Alex and flicking some of Gavin's dried cum off her breast. \n\n\"Gavin was...disciplining me for my reckless mouth,\" Alex smiled looking at him. \n\n\"Not fair!\" Elizabeth grinned. \"What shall we do with our beautiful pet, Sir?\" \n\n\"I was thinking of tying her to the bed,\" Gavin said from the chair. Alex bit her lip as she thought about that. \n\n\"I love that idea!\" Elizabeth smiled as she pushed Alex's panties down. \"If I can't wear undies, neither can you!\" \n\n\"Do you not like panties?\" Alex asked Gavin. She never thought about it until just now. Elizabeth wasn't allowed to wear panties but Gavin bought her several pairs today. \n\n\"I love panties,\" Gavin smiled. \"Elizabeth needed a boundary pushed, so I don't let her wear them.\" \n\n\"Remember, it's about boundaries, pushing you beyond your comfort zone,\" Gavin said standing up. \"Elizabeth had this thing that she had to wear panties, and they were always this hideous awful granny panties! I had to save her from herself!\" Gavin teased. \n\n\"And now?\" Alex asked as he undid her bra, while brushing his warm lips over the skin on the side of her neck. \n\n\"Just exerting my Dominance,\" Gavin explained. Alex closed her eyes as both Gavin and Elizabeth had their hands on her. It was totally mind blowing to have four hands on her, on her breasts, on her stomach, her thighs. Her tender ass, and her sex. It seemed they were all over her and her body reacted. \n\n\"Go to the middle of the bed,\" Gavin whispered in her ear. She nodded. He took her by the hair. \n\n\"Yes, Sir,\" she said immediately. \n\n\"That is getting tiresome,\" he warned her. \n\n\"Yes, Sir,\" she said again. \n\nShe went to the bed and laid down on her back. Elizabeth came over and ran her fingers around Alex's nipples causing them to stand on end. \n\n\"She has very responsive nipples!\" Elizabeth gushed. \n\n\"You thinking some wax?\" Gavin asked her turning with the rope in his hands. Alex looked to Elizabeth and waited. She was a pet, she didn't know if she could argue or disagree with the sub. \n\n\"I am,\" she smiled down as she kissed Alex again. \n\n\"Well,\" Gavin said coming to the bed. \"Perhaps we should show her first, being a novice we shouldn't rush her.\" \n\n\"True,\" Elizabeth frowned. \"Let's show her and then let her decide!\" \n\n\"Wax?\" Alex asked her. \n\n\"On your nipples,\" Elizabeth smiled as she moved to lay next to her. \"It makes them super sensitive!\" \n\n\"Will it hurt?\" Alex asked her. \n\n\"Yes,\" she nodded. \"But then every sensation after that will be amplified by a factor of ten!\" \n\nAlex looked to Gavin, he already had the candle out. \n\n\"Don't worry,\" he smiled seeing her apprehension. \"This is kind of advanced stuff, you don't have to do it tonight. I will show you on Elizabeth, then we will drop some on your hand. It won't be as sensitive as your nipples but it will give you an idea.\" \n\nAlex nodded, for the first time in this relationship she had a serious doubt. \n\n\"Relax,\" Gavin said again. \"I won't take you any farther than you are capable.\" She nodded but this was something she had never even considered. When she saw it on the internet she immediately flipped the picture, uninterested on the perceived pain involved. \n\nElizabeth laid back and smiled at her. \n\n\"It's fine,\" she smiled as Alex sat up and watched intently. \n\nGavin tilted the candle letting the wax puddle at the top. He looked to Alex first and saw the apprehension in her eyes. He contemplated continuing. This wasn't for her he thought. Then he decided to show her and let her make an educated decision. \n\nComing to Elizabeth he sat next to her on the bed. Gavin dropped his head and took Elizabeth's nipple in his mouth and let his tongue swirl around it bringing it to hard. \n\n\"Help me,\" Gavin said to Alex as he licked the tip. Alex smiled and leaned down and took Elizabeth's other nipple in her mouth and they looked into each other's eyes as they suckled on the raven haired beauty. Her milky white skin and soft pink nipples darkening as the blood rushed to them. \n\nAlex sat back when Gavin did. \n\n\"Ready?\" he smiled at Elizabeth. Elizabeth smiled and looked to Alex. \n\n\"Absolutely,\" she said. Gavin leaned over her and Alex stroked her dark hair as she watched Gavin's concentration. \n\nSlowly he tilted the candle as it hovered over her. Alex furrowed her brow as her eyes darted from the candle to Elizabeth. Back and forth they went as she waited for the wax to fall. A large drop fell and struck just to the side of her nipple causing her body to convulse. Gavin moved the candle slightly and the next drop fell directly on the nipple causing her to bite her lip and suck in a deep, quick breath. \n\nAlex looked to her face and saw the pain register, then the smile come out. Alex looked back to the wax covered nipple to see it whiten and crust over as it cooled almost immediately. Alex let a smile of approval come to her face. She was mesmerized by the actual act. The pictures on the internet didn't do it quite the service it deserved. \n\nGavin moved the candle to the other nipple, gently tapping the candlestick, another droplet fell onto the other nipple. Again Elizabeth flinched but smiled. The wax crusted almost immediately. \n\nGavin moved back to the other nipple letting the wax drip off again, Alex was amazed that he seemed to be able to get the wax exactly where he was aiming. He set the candle in the holder on the nightstand next to the bed. \n\nGavin winked at Elizabeth with his secret smile. \n\n\"Thank you, Sir,\" Elizabeth smiled back. \n\nGavin slowly peeled the wax from her nipple and then dropped his tongue to cause her eyes to flutter closed at the heightened sensitivity. He left dragging his teeth pulling on her nipple as he sat up. \n\nElizabeth's eyes sparkled their approval at him. \n\n\"Ok Alexandria,\" Gavin said to her with a nod to the other nipple. Alex carefully peeled the wax off. The first thing she noticed was the wax was already cold. She expected it to be hot but it wasn't after only a few seconds. She peeled it off and set it aside. She saw that the nipple was very tight after the wax was removed. \n\nShe lowered her head down and watched through the top of her eyes as her tongue flicked at Elizabeth's nipple watching her pleasured reaction. Alex got excited. She never had seen this in action. The pictures looked painful so she dismissed them, they also seemed to have huge puddles all over the women's bodies. \n\n\"You aren't going to put more on?\" Alex asked him. \n\n\"There is no need,\" Gavin assured her. \"We are only trying to heighten the sensitivity, not burn the witch!\" He joked with her. \n\n\"Heeeyyy,\" Elizabeth smiled at the teasing. Alex looked to her with an eye of admiration. \"You should try it Alexandria!\" \n\n\"What does it feel like?\" Alex asked her, the excitement in her voice obvious. \n\n\"The sharp pain lasts like a millisecond,\" Elizabeth explained. \"Then you feel nothing until the tongue and...oh my God, it's super sensitive!\" \n\nGavin looked to her, Alex smiled. \n\n\"What do you think?\" he asked her. Alex looked down at Elizabeth and she nodded encouragingly at her. \n\n\"I want an informed decision,\" Alex finally said. \"I don't want fear to dictate me.\" Gavin reached out and cupped her chin. \n\n\"It doesn't have to be tonight,\" he smiled at her. \n\n\"I know,\" she smiled at his tenderness. \"I want to.\" Gavin nodded and Elizabeth sat up gently touching her own nipples with a smile. \n\nGavin picked up the candle as Alex swapped spots with Elizabeth and Elizabeth hovered over her. Alex took her nipple in her mouth causing Elizabeth to close her eyes and smile at the soft manipulations of Alex's tongue. Elizabeth pulled Alex's head tighter to her, gasping as Alex used her teeth and watched the reactions of the stunning goddess. She was emboldened by the reactions Elizabeth gave. \n\nAlex switched to the other nipple to give it equal attention. She marveled at the reaction. She pulled back and looked to Gavin as he watched on with his secret smile. \n\n\"Are you ready?\" he asked her. \n\n\"Yes Sir,\" she smiled as she looked deeply in his reassuring eyes. \n\n\"Let's do your hand first,\" Gavin told her. \"It's not as sensitive but you will get an inkling of what it will be like, how long it will burn, that type of thing. But I must caution you, it will be ten times worse on your nipple, your hand has a fraction of the nerves your breast does.\" She nodded that she understood. \n\nGavin held her hand and tilted it so it looked like they were shaking hands. \n\n\"I'm going to drop it right here,\" Gavin told her with his thumb touching her wrist just behind her thumb. \"It's a sensitive spot, not calloused over by your art utensils.\" \n\nShe smiled that he was even thinking about that. Most guys didn't think her drawing would be taxing in any way. Gavin knew there would be callouses from the hours of holding the charcoal, or the pencils in various positions. Attention to detail. That is what separated Gavin Alex guessed. \n\nShe nodded that she was ready. He gripped her hand firmly in his. With a tilt of the candle he slowly let a single drop fall on her wrist where the thumb met the joint. She squeezed her hand tight but didn't pull it away. \n\nWhen she lifted her eyes Gavin was studying her carefully. She looked back to the crusted wax. The pain was there, then instantly gone as Elizabeth described. She tilted her wrist and saw the light blue/gray crust. Gavin pulled on it slowly, removing it from her wrist. \n\n\"That wasn't what I thought it was going to be,\" Alex admitted with a smile. \n\n\"Your nipples, will be a different story, but the time of discomfort will be similar, but we are talking about a really sensitive area,\" Gavin cautioned. Always the protector Alex smiled. Always safe. \n\n\"What do you think?\" Elizabeth asked her. Alex smiled as she thought about it. She looked to her Dom. \n\n\"Would this please you?\" she asked him. He tilted his head in surprise. \n\n\"This isn't about me,\" Gavin explained. \"This is pushing your boundaries.\" \n\n\"When do we push yours?\" Alex asked him causing him to smile. ",
        "\"Every time I'm with you,\" he winked. She beamed. \n\n\"I want to try it,\" Alex smiled. \"Try it all first, then decide...right?\" Gavin nodded with a smile as she laid back. \n\nGavin brought the candle over her and smiled at her. She looked to candle and saw the hot puddle on top. She shifted her eyes to his. \n\n\"Are you sure?\" he asked one last time. He could tell she was nervous but would not be dissuaded by her fear. \n\n\"Yes, Sir,\" she smiled. He winked at her and her smile broadened. \n\nSlowly he tilted the candle, focusing his attention on his aim. Elizabeth took hold of her hand and squeezed and Alex was thankful as her heart was pounding. She held her breath as the hot liquid balanced on the edge as he carefully tilted the candle. Alex cringed as she saw the wax fall and hit her squarely on the nipple causing her to suck in a hiss. She gripped Elizabeth's hand tightly. Gavin looked to her after tilting the candle back up. \n\n\"Green,\" she smiled. He nodded and moved the candle to her other breast. Slowly he tilted the candle again, it seemed to Alex as if it was going in slow motion now. But the drop finally fell and hit her nipple causing her to hiss again. \n\nGavin moved back to the other nipple and dropped another drop and Alex bit her lip. Moving back across, he dropped an equalizing drop. He smiled at her and put the candle out and set it down. \n\nSlowly he peeled the hot wax off her and she flinched at the incredible sensitivity of her nipple. \n\n\"Holy shit!\" she gasped with a bright smile. He leaned down and slowly traced around her nipple with his tongue. \n\nThe sensitivity of her nipples now was mind boggling. She jerked at every flick of his tongue. Elizabeth joined in and went to work on the other nipple causing Alex to tighten all of her muscles. \n\nElizabeth pulled off and kissed her on the lips. Alex accepted her tongue hungrily. The thoughts of possibly being bi-sexual flooded her mind. Was she? She never was interested in girl on girl, but with Elizabeth it seemed they were doing it a lot. Something to take up with Gavin later. After she enjoyed herself. That statement alone made her shake her head. \n\n\"Well?\" Gavin asked her when her eyes opened. \n\n\"Wow,\" she smiled. \"I never would have thought the sensations...they were...wow!\" she shook her head with a bright smile, unable again, to come up with the vocabulary to describe what she was feeling. \n\nIt seemed this lifestyle was doing that on a regular basis. If it wasn't Gavin that was unexplainably fantastic, it was Elizabeth. If it wasn't something about the lifestyle that was unexplainable, it was the sex. She was going to have to figure one out. She was tired of being frustrated at not being able to describe things. \n\n\"Good girl,\" he smiled making her body tingle. \"To try something your 'faulty brain' told you it wasn't interested in. That's admirable for someone who is just now learning.\" He twisted and used her words from earlier causing her to glare at him jokingly. \n\n\"Thank you, Sir,\" the three little words were becoming her favorite to say. \n\nGavin brought the rope out and she smiled. And her body began to warm. \n\n\"God yes! Green!\" she smiled eagerly. He nodded. He worked on her hands first as Elizabeth continued to work on her sensitive nipples. Using her fingers to rub her sex. Alex wanted to touch Elizabeth but now her hands were unable and that frustrated her a bit. Elizabeth smiled at the thoughts running through Alex's eyes. \n\n\"Frustrating not to be able to touch what you want,\" Elizabeth smiled. \n\n\"It is,\" Alex agreed biting her lip as Elizabeth worked her fingers. \n\n\"Been there,\" Elizabeth explained how she knew. \n\nAfter securing her legs Gavin came back up with a wand massager and sat next to her. She saw the toy in his hands and her body shook with excitement. \n\n\"This by the way, is called the spread eagle position,\" Gavin explained with the way she was secured to the bed. She nodded. \n\nShe felt very vulnerable like this. Not just because she was tied up. But because everything seemed so open. Her breasts out, inviting anyone to play with them. Her mouth available to give pleasure to any who wished to use it. Her sex slightly parted because of the tension he used to spread her legs wide apart. She could tell the tightness of her underused sex was puckered and open by the way the coolness from the air conditioner breezed around her lips. \n\n\"It's not the most favorite of my positions,\" Gavin shrugged. \"But it does allow you to see what is going on the best.\" \n\n\"Yes, Sir,\" she swallowed. What was he going to do to her? \n\n\"You know what this is,\" he smiled showing it to her. \"I saw that it interested you at the party, thought we would play with it a little.\" \n\n\"Thank you, Sir,\" \n\n\"The way you say that, is all the reward I need,\" he whispered as he kissed her. \"Now, if I remember right, we had you at thirteen the first night. I believe we should be able to push beyond that tonight.\" \n\n\"What is your goal?\" she marveled that he was setting them. \n\n\"Your limits,\" he smiled deviously. \"Always.\" She nodded and looked to Elizabeth who flicked her eyebrows at her. \n\n\"And a tad more,\" Elizabeth chimed in softly. \n\nThe soft hum of the toy she heard, right before he placed it gently to her sex. She let out a long slow breath as the sensations cascaded over her body. From her sex outward. Letting her eyes flutter closed from the sensations her body was feeling. \n\nGavin gently moved the toy around her causing her hips to move up and down, trying to hump the toy itself as her body responded. Gavin smiled at Elizabeth and she grinned knowingly. \n\nElizabeth watched Gavin and could tell he was enjoying his new pet. She felt a twang of jealousy as perhaps he was enjoying Alex more than her. She pushed it from her mind. Gavin had taken her as far as he was willing to go. She wanted more, this was her opportunity to get that. Gavin was just too much of a gentleman. \n\nIn the beginning she loved that, but now she wanted to go farther. More pain. Rougher. Not that Gavin couldn't get rough. He just didn't let that inner animal out enough for her taste. She remembered the bite marks on Alex's back in the shower. She knew Gavin had given them to her, something he didn't do to her for months after they started their relationship. \n\nShe was going to miss his expertise. His hands. His spoiling. After talking to other subs at parties it seemed Gavin was one of the few who really went out of his way to do the little things. She found all Doms had things they did for their subs as a reward. But Gavin's were very rare. The showering them. The massages. The shopping trips. Extravagant vacations. \n\nBut Gavin was right, once the relationship reached an apex it would grow stagnant. They had peaked. She wanted more than Gavin's desires. She looked at the way Alex's body rocketed to her first orgasm. She remembered those days. The newness. The awe she had at how easily he brought her to orgasm. \n\nBringing Alex in was a brilliant idea she decided. For the moment it took the sex life to a higher level. Then, once she was tired of it, she would have her out. She knew that Gavin knew. He hadn't said a word to change her mind. He knew he had taken her to his limits but hers were just a little farther out. \n\nShe looked back to Alex and saw how beautiful she looked as she came again. It brought a smile to her face as she played with Alex's nipples, causing her to convulse and look to Elizabeth with wanton eyes. Elizabeth envied her. The wealth of new things that laid before the pet. Gavin was an excellent guide, a patient guide. A loving guide. He was a perfect guide for a novice. \n\nShe looked back at him and saw something in his eyes he had never had with her. It was a look she couldn't place. Gavin caught her staring and winked at her which made her doubt of why she wanted to leave. Something Gavin could always do. Make her feel better. She was going to miss that most of all. With her tempestuous nature she needed his guidance from time to time. His patience. Not many Doms would let their sub act the way she did at times and get away with it. \n\nIt seemed Gavin knew when to reel her in. And when to let her stomp and pout. Would the next Dom be as generous? This made her smile. It would be a new world to discover for her. Much like Alex is doing now. Discovering. Maybe that is the true nature of the life. The unknown. Maybe that is what makes it so hot! \n\nElizabeth moved above Alex's head and Alex watched her. The dark haired goddess smiled as she began to straddle the pet's head. \n\n\"I love your tongue,\" Elizabeth explained as she moved into position. \n\n\"I love your delicious pussy,\" Alex said back. Elizabeth smiled. \n\nAlex's tongue slowly began to trace the outside of Elizabeth's intimate warmth. Elizabeth dropped her head back as she reveled in the feel on her sex. Elizabeth held herself still and allowed Alex to do all the work. She marveled at the expert way Alex seemed to let her tongue work. She wondered if Alex had done this before. During their conversations, Alex had told her no. If that was so, then the girl was just a natural! \n\nElizabeth began to shake at the soft manipulations. She watched Gavin move to begin his own oral work on Alex. She was going to miss his talented tongue as well. Gavin was so much better at the oral than her previous Dom. She hoped her next one was as talented, but really, like it is with any relationship. It was a crap shoot. \n\nAlex's moans of her next orgasm vibrated through her sensitive flesh and it brought Elizabeth to her zenith and she gasped as her cum washed out of her and onto Alex's face. The fact of that, made Alex lap aggressively to get all that she could. Elizabeth smiled. \n\nElizabeth let her hand take hold of Alex's soft mounds on her chest as Gavin rocketed Alex to another orgasm. It seemed when Alex was building towards her orgasm she lost focus on Elizabeth. Something that Elizabeth understood. Alex's body would rise, her tongue would stop and hold where ever it was last positioned. Sometimes on her clit, providing pressure on it. Sometimes deep within her folds. \n\nShe softly began to pinch at Alex's sensitive nipples and enjoyed the convulsions the pet had under her. Elizabeth slowly continued to increase the pressure causing more distress for Alex as she continued to lap at Elizabeth while her body twisted against her restraints. \n\nElizabeth let go of Alex's soft mounds and moved her hands softly around the pet's neck. This caused the girl beneath her to gasp and blow hot air across her clit. Slowly Elizabeth squeezed Alex's neck feeling her pulse under her skin. Elizabeth was cautious with what she was doing but it was obvious by the gusto being bestowed on her with Alex's tongue she was enjoying the hands there. \n\nThe raven haired goddess closed her eyes as another orgasm built in her body causing the muscles to tighten all over. She lowered her hips to push herself deeper onto Alex's lapping tongue. \n\nAlex felt the beautiful woman above her lower but with the hands around her throat she was already starting to feel smothered. This didn't help. She went to use her hands to lift her up but they stopped at the end of the soft loop on her restraints. \n\n\"Elizabeth,\" Gavin cautioned aloud. His voice was enough to calm Alex panicking brain, and bring Elizabeth back to earth. She realized what she was doing and lifted off Alex and removed her hands. \n\nPeering between her legs Elizabeth looked at her apologetically, although inside she realized she wanted to go farther with the pet. To push her deeper into distress. Her darker side coming out. \n\n\"I'm fine,\" Alex said aloud. Elizabeth nodded and returned to her perch upon Alex's lips. She looked to Gavin and found him watching her. His eyes one of warning. She fought the grimace at her lips. She forgot herself. Rule number one, she reminded herself. Safety. \n\n\"I'm sorry, my beautiful pet,\" she whispered. \"You put me in another stratosphere with that talented tongue!\" \n\n\"I'm glad you are enjoying it!\" Alex breathed into her. \n\nGavin lifted himself off the bed after rocking Alex to orgasm a few more times. As soon as he stood Elizabeth fell the length of Alex and buried her own face into Alex's soft sex. Now in the 69 position, both girls devoured each other and brought each other to a blissful orgasm. \n\nWhile the girls played with one another, Gavin undid the ropes binding Alex. Starting with her ankles. He massaged them gently making sure there was no marks from being overtight. \n\nHe watched with satisfaction as the two girls continued to work on each other. It was breathtaking to see the two. Once he freed a hand, Alex instantly brought it to Elizabeth's body which caused him to giggle. The girl just love to use her hands! \n\nGavin pulled it back to him so he could inspect and massage it. Once he was satisfied, he let it go and shook his head as she immediately brought it back into play. Releasing the other wrist he didn't let it go. He held it for inspection and massage, then let it go and Alex brought it to the other cheek of Elizabeth's tight ass. \n\nShe now used her free hands to pull the goddess tighter to her as she hungrily lapped at her. Gavin moved to the bed and brought his tongue down the crack of Elizabeth's ass and Alex watched him. Their eyes locked on each other as they worked as a team. \n\nAlex pulled the soft valley apart and Gavin smiled as she seemed to know what he was thinking. He slowly let his tongue snake into Elizabeth, distracting her from her manipulations on Alex but she didn't mind. Now she was seeing what he had done to her in the hotel room. The way his tongue softly invaded an area it wasn't supposed to. \n\nSlowly it disappeared into Elizabeth and Alex was fascinated. She knew how that felt as it was fresh in her mind. It caused her secret smile to come out. \n\n\"Want to try?\" Gavin asked her. Alex's smile grew. \n\n\"Yes, Sir,\" she whispered. \n\nThis would be another first. She had never even considered tonguing someone's ass before. Granted she was in the 69 position with another woman. Something also never done. This whole life was something of a challenge. It was driving her mad with lust at all the things she didn't know or hasn't experienced. \n\nFor a fleeting second she had a sliver of fear run up her spine that one day Gavin would just succumb to his absolutes and she would have to make a decision to walk alone in this new, exciting, albeit dangerous, world. \n\nAlex lifted her head as Elizabeth changed her angle by pushing off the bed to bring the taboo hole of pleasure to an angle in which Alex could sample. Gavin pulled on her cheeks and Alex tentatively let her tongue enter the soft half globes of Elizabeth's tight glutes. \n\nShe felt it out first. Her mind let any and all thoughts run through her. First was the idea of what it was going to taste like. Would it taste foul? Gavin didn't seem to object. How would it feel? \n\nShe gently pressed the tip of her tongue on the puckered ring. It seemed to open slightly, inviting her further. She pressed her tongue out farther and felt the slight pull of the ring around her tongue. \n\nThe gasp of pleasure from Elizabeth was enough. Alex pushed farther into the unknown. Reaching her maximum distance. Gavin winked at her. \n\n\"See,\" he smiled. \"Hardly repulsive.\" Damn Jedi! \n\n\"It feels so tight!\" Alex told him as she cautiously brought her tongue back into her mouth. She was expecting to find a foul taste but found none. She knew that was her puritanical thoughts that Gavin had warned her about. \n\nShe lifted her head and let her tongue fill the soft void of Elizabeth's soft taboo. \n\n\"God, your tongue!\" Elizabeth gasped. \n\nGavin smiled as he brought his tongue into play and they danced with one another, both fighting for supremacy on who would get to invade. First Gavin, then Alex. Taking turns, they alternated who was in. \n\nAlex brought her finger close and Gavin nodded his approval. \n\n\"Go slow, this is not an entrance that lubricates, which is why it should be done with care. While our saliva will lube it some, it should really be done with a real lube,\" he explained patiently. \n\n\"I'm assuming on how she can handle my cock in there, your small hands shouldn't be a discomfort for her to a degree that we need lube,\" Gavin said winking at her. \n\n\"Elizabeth can handle your cock...in there?\" Alex marveled. \n\n\"Yes,\" \n\n\"Holy shit!\" Alex gasped. \"Did she enjoy it?\" \n\n\"I did,\" Elizabeth answered for him. \n\n\"I'm not sure if it was sexually pleasing to her as much as emotionally pleasing to her to give me something I crave!\" Gavin explained. \"I'm sure she felt some pleasure, but I would guess most was derived on how much I enjoyed it...and more importantly...how hard I came.\" \n\n\"You came harder in there?\" Alex smiled as she gently inserted her index finger into the warmth of Elizabeth causing her to gasp. \n\n\"Yes,\" Gavin nodded. \"I always do...to be where you aren't supposed to be makes it all that more exciting. It revs up everything, knowing it is so forbidden!\" \n\n\"To know you are somewhere very few are allowed to go,\" Gavin whispered in reverence and Alex could tell just speaking about it was revving him up. \"To know there is a small fraction of people that allow another to go there. It's exhilarating!\" \n\n\"I would guess it's impossible not to cum harder there,\" Gavin smiled. \"The dirtiest of all things! At least in our uptight society!\" \n\nAlex felt the clamping of the tight hole on her finger. She wondered how Gavin put himself in there. She could also see why it would feel so good! The tightness was something that could not be duplicated. Then the mentality of being where you aren't supposed to be. Yeah, she could see the fascination of it. \n\n\"Do you want to put your cock in me, there?\" Alex asked him. \n\n\"I do,\" he admitted. \"Desperately.\" \n\nHe laid next to her and stroked her hair as she continued to finger and tongue Elizabeth. \n\n\"See, this is my weakness,\" he smiled. \"I'm an ass man by nature. I would rather see a great ass than a big set of tits.\" \n\n\"What kind of other men are there?\" she smiled. \n\n\"Well, there are three types of men. Leg men. Tit men and ass men. It will be one of those things that we notice first on a woman.\" \n\n\"What did you see on me?\" Alex asked him. \"I was sitting down when you first saw me!\" \n\n\"I have gotten so adept at judging an ass by body type that I don't need to see the ass specifically. I could see the curve of your hips as you sat. The length of your legs. The way you sat. Looking at the space available in the chair in which you sat. All told me you had a fabulous ass!\" He laughed. \n\n\"Seriously?\" \n\n\"Seriously,\" he affirmed. \"That's not to say I didn't take a look the first moment I had a chance. Here in the living room when you got up to have dinner with us. The pants you wore, the way the hung to the curve of your ass!\" He let his finger trace the soft underside of the ass cheek on Elizabeth. \n\n\"So what is the best clothing to show off an ass?\" Alex asked him. \n\n\"Those Goddamn yoga pants!\" Gavin growled and laughed at once. \"Nothing kills me more than yoga pants!\" \n\n\"I'll keep that in mind!\" Alex smiled wickedly. \n\n\"My turn,\" he smiled at her. \"I have had something I wanted to do for a week now.\" \n\nBoth girls sat in the submissive position as he laid down in the center of the bed. \n\n\"I want one on my face, one on my cock,\" he told them. Alex looked to Gavin's hard cock and wanted to take it. \n\n\"Sorry, beautiful,\" Elizabeth said taking hold of it. \"Seniority and all that!\" Alex glared playfully at her. \"Besides, there are two reasons I should get his cum. One, you have already had it today, as evident by the cum on your chest.\" Alex bowed her head embarrassedly. \"And two, I'm leaving tomorrow for four days...that's four days I'm going to be without this magnificent...cooock,\" she hissed as she lowered herself on him. ",
        "Alex smiled. Elizabeth was right. No reason for her to be greedy! Who was she trying to kid, she wanted to be greedy! But the thought of having four days of Gavin alone made her push that out. She would have Gavin for four days! Alone! \n\nAlex smiled down at him as she moved over his face and felt the roughness of the stubble from his five o'clock shadow. He brushed her sensitive skin causing her to gasp at the drastic difference between the roughness of his face and the softness of his tongue. It caused Alex to think about the analogy of his face and tongue with the lifestyle she is so desperately learning. \n\nThe softness and then the roughness. The bending and the rigidness. The taking and the giving. This world had all of it. \n\nElizabeth pulled Alex's head to her and kissed her from her thoughts. Now she could only think about her impending orgasm. Between Gavin's manipulations, and Elizabeth's soft moans as she rode his cock. Then the way she was kissing her passionately made her cascade off the waterfall and cum all over Gavin with a whimper. \n\nAlex fell down to Elizabeth's breast as they heaved and she leaned back to shove Gavin's cock further in her. Alex watched Elizabeth's sex engulf then spit out his cock, only swallow it again. Rapidly. The shaft glistened in the light from the bedside lamp. \n\nAlex was inundated with the scent of sex. Both hers and Elizabeth's. She let her fingers go between Elizabeth's legs and felt the wetness there. Her fingers found her clit and rocketed Elizabeth over the top of another orgasm. She watched her fingers dampen from it. She could feel the steel feel of Gavin's cock between her fingers and that excited her. Knowing that the other half of his magnificent shaft was deep inside of Elizabeth, bringing her ecstasy. \n\nGavin began to lift his hips off the mattress and Alex knew that he was going to cum. The jealousy of Elizabeth getting his cum overwhelmed her and she chastised herself for it. But it was still there. Gavin's comment about needy kittens came back to her. Damn right she was a needy kitten! She wanted his cum, and she truly didn't want to share! \n\nGavin exploded in Elizabeth and Alex could tell. The look on Elizabeth's face, the look said it all, that she could feel the power of it as her eyes fluttered closed, and Gavin collapsed his hips to the bed. Elizabeth looked to Alex and saw the disappointment and smiled to herself as she rocked her sex on his cock. \n\nAlex eased off his face and kissed him. Tasting her own juices there. Elizabeth fell to the side of him and sighed, satisfied. Alex took a spot on his other arm and the girls laid their heads on his chest and stared at each other as they listened to his beating heart as he stroked their backs. One hand a piece. \n\n\"You know,\" Alex told her as they smiled. \"He has doubts he can please us both!\" \n\n\"I don't know about you...but I'm satisfied!\" Elizabeth giggled. \n\n\"Ditto!\" Alex agreed. \n\nYes, she was a little jealous that Elizabeth had his cock, but she was satisfied. \n\n\"I am right here,\" Gavin told them. \"You can quit talking about me like I'm not!\" \n\n\"Yes, Sir,\" they said in unison. \n\n\"Damn,\" he giggled."
    ],
    "authorname": "CJT",
    "tags": [
        "wax",
        "threesome",
        "oral",
        "bondage"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/secret-smiles-and-three-little-words-pt-11"
}
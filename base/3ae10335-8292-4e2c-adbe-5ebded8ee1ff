{
    "title": "Sapphic Serenity Ch. 04",
    "pages": [
        "Disclaimer and Author's Note: All characters portrayed in sexual activity are eighteen years of age or older. This story was a request from a reader and dedicated to them. They know who they are and I hope you all enjoy it. Feedback is welcome, flames will be laughed at, I promise.\n\nChapter 4- Don't Look Back\n\nMy dreams that night were, not surprisingly, supremely sexual, mostly reliving the events of the previous day and concerning my mother. We had pushed ourselves so far in the daring behaviour we indulged that finally it had been too much- we gave in to our mutual lust and had fucked in the car, not even waiting to get home. \n\nGone were the pretenses of family humour or acceptable intimacy between family members, they could no longer even try to justify our carnal ferocity. We had mated like tigers, completely given over to our primal needs. Neither of us were bisexual or liked girls, but our deep need for one another's cum had been overpowering. \n\nI woke up wet. Very wet. My fingers touched my pussy and I shivered. Holy shit. Had I really had Skype sex with my mom last night? What the hell was happening to me?\n\nI slowly slung my legs over the side of the bed and stretched, determined not to worry myself about it. We'd have time to talk today, just as we had the previous day. We'd get this all worked out one way or another. We loved each other too much to let this come between us and ruin the most wonderful mother-daughter relationship to ever happen. She was my best friend and nothing would change that. \n\nI stood and made my way to the door, needing to pee. I didn't put anything on, I rarely ever did. I left my room and paused, looking at my mother, who had just exited her bedroom as well, equally naked. There was a dead silence for several seconds as we stared at one another. I moved a strand of hair out of my face unconsciously and mom bit her lip as our eyes locked.\n\nThat was all it took. We strode forward and threw our arms around each other, kissing with hungry abandon. We moaned into one another's mouths in lust and relief, all hesitation between us gone. There was no longer any doubt, no worries and no more questions. Mom and I were lovers. There was simply no other way for us to be at this point. \n\nStill grappling onto one another and kissing fiercely, we staggered back into her room and collapsed on the bed, bodies melting together. Tongues plunged and hips thrust eagerly. Hands roved and explored freely, acknowledging no boundaries between us. She giggled and began kissing me all over my face. She slowly made her way down my neck, kissing my spot and causing me to shudder and moan uncontrollably. My hips pushed up against her in response, aching to feel her. She kissed and nipped at my shoulders and collarbone. I tingled all over, feeling her soft lips pressed to my skin, her teeth over every inch of me.\n\nOh God, she reached my breasts...\n\nI groaned loudly as her tongue swirled around one of my nipples and then began sucking ardently. It felt so good and I cradled her head to me, making incoherent noises. The gentle pinch of her teeth and then a tug, the delicious sting jolting through me. She sucked on my breasts, humming and teasing me. My fingers clasped her hair, kneading and flexing against her scalp. \n\n\"Gnnnn, mom!\" I moaned as she tugged on my nipple with her teeth again, stretching it out. I felt her hand caressing up and down my thigh, straying close and close to my core, my throbbing, pulsing wet pussy. \"I want you so bad!\"\n\nShe continued her journey down my body, kissing my tummy and sliding her tongue around it before moving further, to that wonderful sensitive area between my navel and cunt. She kissed it and pressed her tongue against it strongly, spreading a warmth through me. Her tongue then found the engorged bump over my woman hood, slithering hungrily. She nipped the skin, played with it and made me squirm in need. \n\nFinally she arrived at my pussy, kissing it and moaning gently as she felt my taste on her lips. Up and down my lips she kissed, flicking her tongue against my clit. I cried out and mashed my hips against her face. She pressed her mouth against me eagerly in response, sucking on my lips before pushing her tongue inside. It was the most incredible thing I had ever felt. \n\nMy legs wrapped around her upper back and I rocked back and forth, shuddering and biting at my knuckle. I squirmed and writhed as she fucked me with her tongue, her fingers spreading my gooey lips to give me a delightful little sting. \n\nShe rolled me up onto my upper back, kneeling over me now, my legs hooked over her shoulders as she lashed my pussy with her tongue. I whimpered and played with my breasts, watching her through glazed eyes. She smiled at me while she tapped her finger on my clit before sliding it up and down between my lips. \n\n\"Mom,\" I murmured in a trembling voice. \"Stop teasing me, I ahhhhhhhhhhhhhhhh...\"\n\nShe finally slid a finger inside me, deep down into my steaming tunnel. I groaned as I squeezed the finger greedily, like I never wanted to let it go. Mom sucked on my clit while she fucked me, making my whole body tremble. After a few preliminary strokes, she sank a second finger in along with the first, twisting them to give me a stretch. \n\n\"Holy shit...\" I gasped, my body on fire. \"Shit shit shit... mom...\"\n\n\"Mmmm, you like, baby?\" she asked, smiling down at me. I nodded my response and she went back to licking my clit as she fingered me. Finally, though, she laid me back down and stretched out beside me, kissing me deeply while she kept teasing her fingers inside my slit. I could taste myself on her mouth and it was heady, enthralling and almost dizzying. \n\n\"You want to do mommy now, darling?\" she asked, a light dancing in her eyes. I nodded and she slowly turned herself around, climbing over my body and settling down, her face over my cunt and hers over mine. I pulled her legs apart and buried my mouth in her, causing her to groan loudly and squirm against me. She was dripping wet and tasted so wonderful! \n\nNeither of us had ever done anything like this before but instincts just kicked in, coupled with a deep need to please one another completely. Tongues began lapping and probing, fingers caressed and pushed inside, our bodies trembling in delight as we tasted and almost devoured one another. I swirled my tongue around her clit while I slid two fingers in and out of her, eliciting moans of pleasure as she did the same to me. \n\n\"Don't be delicate, baby,\" she said in a quavering voice. \"Mommy can take it, I promise...\"\n\nI sucked her clit into my mouth and she cried out, while I bunched my fingers together into a point and slid them inside her. I pushed steadily, until they were in up to my bottom knuckles. Mom moaned loudly into my pussy, buzzing my clit and making me wild. We fingered and licked with increasing abandon, desperate to cum together, but no too quickly, since we had our entire sexual beings to share and explore. \n\nI shuddered and gasped suddenly as she spread my cheeks and teased the pad of her finger around my little knot. She tapped it gently and hummed as she kissed my clit. \n\n\"Oh, are you like mommy?\" she cooed. \"Do you like a little anal?\"\n\n\"Gnnnn, fucking love having my ass played with,\" I groaned. \"Please...\"\n\nShe nodded and lapped my pussy lovingly while slowly working her finger into my ass. I made a completely incoherent noise as I felt her wiggle it inside me while she buzzed my clit with her lips. For someone who had never been with a woman, mom was showing amazing lesbian intuition. She got her finger all the way down to the bottom knuckle, sending splinters of fire shooting through me. This was totally unlike anything I'd ever felt, even when I guy licked my pussy or fucked my ass. \n\nI began doing likewise, teasing my finger around her tight little rim before snaking inside. She reacted wonderfully, squeezing my finger with her ass and moaning shamelessly. Like mother, like daughter, obviously. We slurped one another's pussies and fingered asses until we were shaking uncontrollably. I felt like I was going to die of the pleasure that was starting to brim in me. \n\nWe pushed our hips into one another's faces and screamed, unable to resist the mutual orgasm that crashed over us. Pumping and writhing, cum splattering our mouths and fingers spearing deep into our asses. We swallowed each other's essence greedily, sweat-slicked bodies glued together in lust. I felt transported, as if I could never come down from that climax that was mercilessly battering us. \n\nFinally, I collapsed, shaking like a leaf and panting like I'd run a marathon. My mother lay on top of me, barely moving, only her chest heaving and limbs twitching. Her pussy still oozed against my face, pink and glistening with her cum. I was dizzy. I couldn't have stood up if I'd tried. What the hell kind of chemistry did we have that we could cum so hard together?\n\n\"Holy fuck, mom...\" I breathed finally. Her response moan was muffled by my sticky pussy. Even just moving my head seemed like colossal effort, so I just lay still, praying that I would not drown in my mother's cum, which trickled out of her steadily. I couldn't believe how alike our bodies were. \n\nSlowly, very slowly, she rolled off of me and tumbled to my side, now facing the ceiling. We both stared blankly at it, the sun rays through the window dancing off our sweaty forms. I couldn't begin to guess how much time had passed before I stirred, because I couldn't even feel my limbs yet, much less how long we'd been laying there. And to be honest, I didn't care that much either. Getting back to reality was not exactly a concern of mine. \n\nI just shut my eyes and breathed deeply. I didn't think about anything else, just slowly letting the tingles subside. Finally I could move again, curling my fingers and giving my mom's thigh a squeeze as she lay beside me. She hummed pleasantly and slowly turned herself around and lay half on top of me. We wrapped our arms around one another and kissed deeply, contentedly, just happy to be together and flush with the throes of fucking. \n\n\"Oh, baby,\" she murmured, breaking the kiss and smiling down into my eyes. \"I haven't cum that hard in years.\" \n\n\"Me either.\" I agreed, lost in her liquid brown eyes. \"We can't stop this, mom. I don't want to. I don't give a shit if people think it's wrong or whatever. I need to be fucking you like this. Whenever we can.\"\n\n\"Mmmm, I'd like that,\" she whispered, caressing my cheek gently. \"But are you sure?\"\n\n\"I'm a grown woman, mom, I'm very sure.\" I said, nodding. \"Maybe it's weird that the only woman I've ever wanted is my mother, but there you go. I can't help how I feel or what I want. And what I want is to bury my tongue in your cunt every chance I get. God, imagine us cumming like that all the time, together.\"\n\n\"I love it,\" she said sweetly, kissing my lips again. \"So we're going to be lovers? Are you going to beat all the boys off with a stick?\"\n\n\"Well, I'm not going to keep you from having your fun,\" I replied reasonably. \"I'm not jealous, I just know that I need to fuck you as often as we can manage it. Hopefully you feel the same.\"\n\nShe nodded. \"I do, baby.\"\n\n\"And no regrets.\" I added, holding up a finger. \n\n\"I promise,\" she said softly, kissing the proffered finger. \"We both want this, we want to fuck one another whenever we can, and given what horny sluts we both are, that should be quite often.\"\n\nI sighed in satisfaction. \"You do know that the rest of today will be spent fucking and trying out all our new toys, right?\" \n\nShe smirked. \"That does seem like the only sensible use of the rest of our day, yes. I've no doubt we're going to keep one another very busy. As long as we keep hydrated, so we don't just crumble to dust after we cum together for the twentieth time.\"\n\nI giggled and she kissed me deeply again before straddling me, sitting on top of me and looking down. She moved one of my legs and nestled her sticky pussy into mine, undulating it back and forth gently. \n\n\"Mmm, can't wait to girl-fuck you like this again,\" she purred, reaching down to massage my breasts as we squirmed our cunts slowly. \"And now that there's no holding back or regrets, it'll be better than ever.\"\n\nI nodded and stretched languidly beneath her, enjoying the feel of mom's body squirming with mine. She leaned down and kissed me again, the two of us giggling as our tongues wrestled playfully. \n\n\"Just think about all the things we can do,\" I murmured, my hands now on her magnificent breasts, gently rolling her nipples between my fingers. \"We've found so many ways our bodies are similar already, there must be more.\"\n\n\"I know,\" she replied, shivering as I teased her. \"That same spots on our necks...\"\n\n\"Oh, God, that,\" I moaned, my hips pressing up almost involuntarily at the thought. \"If I get kissed there, it's over, I become the biggest slut. The smelliest, grossest kid at school could kiss me there and I'd be spiking myself on his cock like a volleyball.\"\n\n\"I'm pretty much the same way,\" mom purred. \"Your dad actually got me to fuck for the first time that way, not that I needed any encouragement.\"\n\n\"Just the sound of the size of his dick alone would have done that for me,\" I giggled. \"What was his cum like?\"\n\n\"He nearly drowned me,\" she laughed. \"First time we fucked? Yeah, I swear my cunt almost burst from overfilling.\"\n\n\"Well, we both also like anal,\" I continued, reaching back and pulling her ass cheeks apart while she squirmed her pussy against mine. \"I love having fingers or a cock in my ass.\"\n\n\"I'm glad to know that,\" she sighed, feeling me stretch her. \"We'll do this a lot, I promise.\"\n\nWe made out some more, neither of us ready to cum just yet, only wanting the feeling of closeness that came with what we were doing. There was plenty of time to get our fuck on. I couldn't believe how perfect this felt. It was so natural. Incest was now the farthest thing from my mind. It's not like anyone else had to know, right?\n\n\"God, just think of all the places we're gonna fuck,\" I mused, stretching myself and feeling sated for now. \"The pool, the hot tub, the showers, we can try the pool cue again, the exercise equipment... nothing's gonna be safe from us now.\"\n\nShe giggled. \"And don't forget the mall or other places we can take risks in,\" she reminded me. \"We both seem to get off on public misbehaviour.\"\n\n\"I'll admit to that,\" I affirmed. \"I used to fuck at school, seeing how close I could come to getting caught. I actually did a couple of times, but only once by a teacher.\"\n\nMom raised and eyebrow and smirked. \"How did I never hear about that?\"\n\nI shrugged. \"I sucked him off and he promised not to tell.\"\n\nShe laid down on me now, giggling. \"That's my girl,\" she said cheerfully. \"Resourceful in her sluttiness. You're just like your mom.\"\n\n\"Best role model a girl ever had,\" I purred, kissing her again. \"Ready for a shower?\"\n\nMom nodded. \"We'd better go or we're gonna be stuck to my sheets.\"\n\nWe clambered off her bed and went into the hallway, holding hands. We paused and I smiled at her. \"Y'know, we could try the shower in the basement again. Would be nice to remember this time around.\"\n\n\"Couldn't agree more, darling...\" she said sweetly, taking my hand and leading me downstairs to the basement. We grabbed two towels and mom turned on the shower. We squeezed in, giggling as we made room for one another. Squished together like this, mom picked up the moisturizer bottle and drizzled it down between our tits. We kissed one another deeply as we began squirming our bodies together, slippery skin tingling. \n\n\"Ohhh, Jesus, mom, you feel so good...\" I murmured, tilting my hips forward to press my pussy to hers. \"I just want to fuck and fuck and fuck.\"\n\n\"Mmmm, glad to hear it, baby,\" she replied, running her hands up and down my ass cheeks while biting at my beck. \"Because it's all I want to do too.\"\n\nWe kissed and fondled and ground our bodies together in the shower for some time, lost in the exquisite sensations we shared. Finally we lowered ourselves to the floor, scissoring our legs and pressing our slits together, squirming them back and forth, an addiction we were rapidly developing. We both watched in fascination beneath the cascade of water, lips mingling and clits brushing. \n\n\"I never would've guessed this felt so amazing,\" mom murmured as she played with her pussylips and pressed on my button with her thumb. \"We've got so much to explore and just learn.\"\n\nI giggled. \"Kinda funny that you're still the only woman I'm horny for. But yes, I agree that this bears thorough investigation and we should take all the time we could possibly need.\"\n\nWe pulled one another close and kissed again, squirming our tits and cunts together. I don't think either of us were quite ready to cum yet, after all the feverish fucking just a little while earlier, but this-body-to-body stimulus thing was exactly what we craved. Finally we leaned back against opposite walls and just ground our pussies in slow circles, fondling our breasts and moaning. \n\n\"Wonder what grinding our asses would feel like...\" mom breathed. Without another word, we slowly turned ourselves over onto our knees, resting our hands against the walls and began squirming. We both moaned and shivered as our slippery cheeks rubbed into one another, the wonderful warmth filling us both.\n\n\"I think we've done this before, mom,\" I murmured, closing my eyes and losing myself in the sensation. \"This feels familiar.\"\n\n\"Yes it does,\" mom agreed, moving her ass in slow, firm circles against me. \"I'm not surprised if we did this the other night, given how tight this space is and how fucked up we were. Bet we really enjoyed it then, too...\"\n\n\"We're smart cookies, then,\" I breathed, squirming back into her. \"God, how the hell are we ever going to get anything done?\"\n\n\"At the moment, who cares?\" she breathed, her eyes closed. \"We've got so many toys to try out...\"\n\nWe sank further down, legs pushing past one another and our butts pressing harder than ever as we ground. Her pussy met mine underneath and we both moaned in pleasure at the welcome contact. I felt her fingers reach under and begin playing with us both and I shuddered, caressing her in return. \n\n\"Mmmmm, and think about all the rooms in the house,\" I murmured. \"We'll have to fuck in each and every one of them. And the back yard, and the hot tub...\"\n\n\"Ooh, you read my mind, baby,\" she agreed. \"I think we have all our free time figured out.\"\n\n\"Nnnnn, and now when we go out, it's not just going out, they're like dates...\" I panted, getting hot once again. \"Because I know... I'll be trying to- gnnnnnnnn- get into your pants afterward.\"\n\n\"Dating my daughter...\" mom gasped. \"Mmmmm, dating and fucking my hot daughter...\"\n\nWe squirmed and pressed harder, fingering ourselves and one another almost frantically, needing one another's cum again. Our spines flexed and almost accordioned while we struggled to peak together. \n\n\"Want to kiss you!\" she hissed, turning herself around. \"Fucking kiss me, Bron!\"\n\nI whirled around and grappled onto my mom, kissing her savagely. The need I felt was unreal. What kind of primordial lust did we share that we got so worked up with one another? Tongues tangled and dueled between us, moaning loudly and with unbridled passion. Mom shut off the water and we rose to our feet, staggering out of the shower while still kissing and groping. We made it to the game room before collapsing onto the plush rug, lost in one another's wet flesh. \n\nI shuddered and cried out as she dug her fingers into my slit, rippling them inside me. My pussy clenched around her fiercely and I responded by leaning in and gripping one of her nipples between my teeth, tugging. Mom keened loudly and her legs spread instantly, exposing her cunt. I slapped the slippery lips twice and she wailed in delight before I sunk my fingers deep down inside her. We finger-fucked one another frantically, hips bucking shamelessly until we both screamed in pleasure, cumming hard. I jammed my mouth to hers, still vocalizing my delight. She responded in kind, the two of us lost in ecstasy. ",
        "Finally we collapsed on our backs, chests heaving, bodies shaking. Only one pair of hands touched, anything more likely to kill us from the sensation. My eyes were closed and the world was still spinning. The tingling...\n\n\"Not sure we'll survive showering together all the time,\" she murmured finally, some indeterminate amount of time later. \"Holy shit...\"\n\n\"If our orgasms get any stronger we're going to fucking die,\" I replied, giving her hand a gentle caress, which was all I could manage. \"But that's a chance I'm willing to take.\"\n\nWe lay still a while longer before mom sat up slowly, rubbing her face to banish the incoherence we both felt. Then she laid on her side and I turned onto mine, snuggling into her. We kissed lovingly and tenderly, something that would obviously become a post-coital routine for us. \n\n\"Gotta pee,\" she murmured through the kiss. \"Pretzel?\"\n\nI nodded and we helped one another stand and went back to the shower room, to the toilet tucked in the corner. Mom sat first, spreading her legs wide and holding out her arms. I sat down and scissored my legs with hers, letting her pull me close so our pussies were kissing again. Forehead to forehead and looking into one another's eyes, we both shivered as we began to pee. The thrill of feeling her stream splashing against my pussylips while mine did the same to her was enough to make us both moan deeply as we shared a kiss, tongues sliding and exploring. It didn't need to be said, this would be something else we did as often as possible. My clit tingled as she peed against it. Her pee trickled along the underside of my thighs, sending shivers through we. We kissed and swallowed one another's tongues hungrily, enthralled with yet another taboo. We finished and sighed, content for now with ourselves. \n\n\"Mmmm, food...\" I murmured finally. \"Let's eat to get some energy and then fuck some more.\"\n\nShe nodded through our kiss, clearly agreeing. \"What should we have for lunch? Aside from one another's pussy?\"\n\nI thought for a moment. \"Well, we could either go and get something, which is easy but requires dressing, or we could just get some fruit and stuff out of the fridge. We also have whipped cream, so we could eat and fuck.\"\n\nMom giggled and kissed me again. \"You are definitely my daughter. Let's see what we have to eat.\"\n\nWe stood after some more kissing and retrieved two towels, drying ourselves off and putting each other's hair in long braids to prevent frizzing. We then wiggled up to the kitchen together and began examining the contents of the fridge. I sat behind mom on a tall stool at the preparation island in the middle of the kitchen and watched intently. She bent over at the middle, giving me a wonderful view of her ass and pussy. \n\n\"Hmmm,\" she mused. \"Strawberries, grapes, plums, bananas, mandarin oranges...\"\n\nI went to the nearby dry food cabinet and opened it. \"We also have chocolate syrup and honey to go with the whipped cream.\"\n\n\"Ohhhhh, goodness...\" mom said slowly, pulling something out of the fridge but hiding it from me. She turned and smiled at me slyly. \n\n\"What did you find?\" I asked, my eyes narrowing.\n\nMy eyes then widened when she held up a fat cucumber.\n\n\"Holy shit, mom,\" I breathed. \"You want to eat that or fuck with it?\"\n\n\"Why not both?\" she asked. \"We've already done bad things with a pool cue and Heaven only knows what else. Why not go organic too?\"\n\nI giggled. \"Fair enough. Where shall we eat?\"\n\n\"Backyard,\" she said, smiling wickedly. \"We haven't done anything out there yet...\"\n\nWe took the fruits, condiments and our cucumber out to the backyard, spreading out a large, soft blanket on the grass under the shade of a large willow tree that anchored one corner of the wide space. We loved our backyard, since we had a high wall around it and the lots on either side of us were completely vacant. To the rear was a steep slope that looked out over the valley. No one ever saw anything we did back there, unless there was some silent drone hovering nearby. \n\nWe collapsed onto the blanket, kissing deeply as we embraced one another. My hands fumbled for the honey while mom found the whipped cream. We giggled as we drizzled the honey between us and then sprayed the whipped cream on top. Then we attacked one another hungrily, licking sloppily, kissing and spreading the sticky mess all over one another. Our bodies stuck together as we slid our tongues around. I buried my face in mom's pussy and she groaned in pleasure. Her hand reached down between my legs, her fingers sliding slowly in and out of my sticky slit. \n\nWe drizzled the chocolate onto the already glistening mixture, licking and sucking all over one another. Nipples were licked and bit, clits lapped and cunts devoured with abandon. We ended up in a trembling 69, working each other into a frenzy until we both cried out and came, pussies bubbling over with our ecstasy. \n\nPanting with exhaustion, we curled up together and fed one another grapes and strawberries, eating slowly as we lay together, bodies tangled in a sticky embrace. Mom smirked and kissed my nose. \"We might need to shower before we try out that cucumber, you think?\"\n\nI nodded. \"Gonna need a new blanket too, we fucked this one up pretty good.\"\n\nWearily, we got up and sauntered over to the outdoor shower, standing under the water to get the residue of honey, cream and chocolate off of us. We hugged close and kissed lovingly, caressing one another until we were clean. Knowing we weren't quite ready to cum again just yet, we slipped into the jacuzzi, relaxing and just letting the jets do their work. \n\n\"Mmmm, have you ever let the jets fuck you when you're alone out here?\" mom purred, her head resting back against a small pillow as she sat across from me. \n\n\"Of course,\" I replied, smiling. \"When I'm having a dry spell with boys, they're some of my best friends. I think I even named 'em one night when I got drunk out here.\"\n\nShe giggled and pulled me onto her to sit on her lap. We kissed and fondled gently, enjoying the feel of one another's body and the taste of each other's mouth. We weren't horny yet, just feeling close and sensual. This was clearly something we could spend all our waking hours together doing. \n\n\"You know,\" mom mused as I kissed my way down her collarbone to her breasts. \"We could find some small improvised seats or something and sit back to back in the middle here and let the jets fuck us. We need to- ahhh- try that...\"\n\n\"I love that idea,\" I murmured as I swirled my tongue around her nipple and tugged on it with my teeth. \"Cumming with you is the best thing ever, no matter where we do it.\"\n\n\"We should take a little road trip,\" she suggested, caressing my hair. \"Go somewhere that people won't know we're mom and daughter and behave really badly.\"\n\n\"That sounds like fun,\" I replied, looking up at her as I licked. \"Like go to clubs and dance all naughty, or go to strip clubs and get naked together? Go to restaurants and tease one another under the table and then fuck in the bathroom?\"\n\n\"Yes,\" she said, her fingers flexing on my neck. \"Fuck in public, all sorts of misbehaviour.\"\n\nThe thought of it gave me shivers, even though the jacuzzi water was warm. No matter how much we fucked, I could not seem to get enough of her. Yes, it was new to us, but this lust was unreal, unlike anything I'd ever felt. I was obsessed with feeling her body to mine, her tongue and fingers inside me, her teeth on my nipples, her cunt rubbing mine until we came together. \n\nWe were kissing again, moaning into one another's mouths shamelessly. I squirmed in her lap as she squeezed my ass cheeks under the water. Tongues tangled and played until the kiss became downright sloppy, our faces shining with each other's wetness, drool on our chins. I dragged my tongue around her face, even as she did the same to me, almost like we were marking one another. I don't think either of us had ever done something like this before and we went at it with a will. \n\nWe cupped each other's faces as we stared into one another's eyes, foreheads pressed. We were breathing heavily, horny for one another, even though we had cum just a little bit ago. I know I was still sensitive and I had no doubt mom was too, but the aching need was driving us mad. What would it take to sate this inhuman lust we shared?\n\n\"Get another blanket from the storage bin,\" she said huskily. \"We're gonna try and quench this fire for a few hours before we fucking die.\"\n\nI clambered out of the hot tub, already missing the feel of her pressed to me but obeying readily. I retrieved another large blanket and followed her. She wiggled back to the shade beneath the big tree and I laid the blanket out. She held up the cucumber, giving me a knowing look.\n\n\"Finally,\" she said, smiling. \"Something as big as your dad.\"\n\nThe cucumber was huge, it had to be four fingers wide and easily twelve inches in length. It scared me to think she might be serious about my dad's cock.\n\n\"Jesus,\" I murmured, trying to not sound intimidated. \"If dad was that big, I'd die if he fucked me. Where did you put it all, mom?\"\n\nShe giggled and swirled her tongue around one side of the vegetable. \"Mmmm, you'd have loved his cock, baby. It felt like nothing else on earth, it was wonderful to have inside you. Now, lie down and let mommy take care of you.\"\n\nIntimidated as I might have been, I trusted my mom implicitly, so I laid on my back, legs spread enough that she could kneel between them. She leaned in and began kissing and lapping at me, making me shiver. She teased my lips with the tip of the huge vegetable. I'd heard stories and even seen porn involving cucumbers, but it had never occurred to me I'd be doing it myself. \n\n\"Oooh, you're nice and wet, baby,\" she cooed, smiling as she stroked a finger up and down my slit before bringing it to her lips and tasting it. \"You ready for the big leagues?\"\n\nI nodded, hopefully looking more confident than I felt. I laid my head back and tried to relax, knowing that being tense wouldn't help matters. I bit my inner lip as I felt the tip of the cucumber touch me and gently push my pussylips apart. Closing my eyes, I could feel the pressure as she pressed it slowly and firmly against my opening.\n\n\"Just relax, baby,\" she said softly. \"I'll go slow, I promise.\"\n\n\"Not too slow,\" I murmured, trying to sound confident. \"I'm a big girl...\"\n\nShe started a gentle push and I could feel my vagina slowly opening. The cucumber got bigger quickly and I sucked in my breath as it entered me. My eyes shot open as I could feel a 'pop' and crackle in my hips as they stretched to accommodate the intrusion.\n\n\"Jesus,\" I wheezed. \"Holy fuckballs...\"\n\nMy legs trembled and I bent my knees as she kept pushing, slowly but relentlessly. My whole body went rigid- this was like nothing I'd ever imagined. More popping and crackling in my hips...\n\n\"Gnnnnnnnn!\" I groaned. It wasn't exactly pain, nor was it pleasure. It was... something expanding inside me, my body yielding before some invader. I looked at the sky, my body trembling as the cucumber pressed on deeper inside me. \n\n\"Okay, I think that's in, baby...\" mom said, smiling. She seemed pleased with what I'd accomplished. I slowly tilted my head up and looked down my body- I could see the swell of the vegetable under the skin just over my pussy, the other half sticking out of me down below. I had to work to breathe normally, even though the popping had finally stopped. \n\n\"Thank God,\" I grunted finally. \"I thought you were gonna stuff it all the way in...\"\n\n\"No, silly,\" she giggled, moving herself around. \"If I did that, then I wouldn't be able to do this...\"\n\nMom then knelt over my hips and squirmed herself against the other half of the cucumber, taking it slowly inside. I shivered and groaned as her weight pressed against me, pushing my half of the cucumber deeper inside even as she took the remaining half into her cunt. She sighed and moaned as she settled down, her netherlips finally pressing to mine. The cucumber had completely disappeared inside the two of us. \n\n\"Oooh, it's been a while since I've felt anything like that...\" she cooed, finally relaxing. She laid down opposite me, our legs scissored and cunts mashed together. She took hold of my wrists and I did likewise. Being pinned to her like this was unreal. I felt like I couldn't escape. \n\n\"Now just start out by squirming your hips, darling, can you do that?\" she said gently. I did as instructed, feeling her do likewise. I shivered and moaned, feeling her lips slithering against mine and her clit brushing into me. It felt wonderful and also required a lot of exertion. Feeling like I was fit to burst, I undulated as much as I dared, gripping mom's wrists firmly. \n\n\"You've... done this before?\" I moaned as I worked myself on the cucumber and against my mother. \n\n\"Been... a long time...\" she grunted, biting her lip. \"I practiced with one... after I fucked your dad for the first time. He was so big and it nearly killed me. Wanted to get better for him.\"\n\n\"Jesus,\" I murmured, the world around me melting. \"If he was anything close to this big, he would have fucking killed me, pumping back and forth inside my puss.\"\n\n\"You can't lie and tell me you're not enjoying it,\" mom sighed, still holding me and seeming to hit her rhythm. \"I know you, slut, this is going to make you cum like crazy.\"\n\n\"Not denying it,\" I hissed as we began working our hips in unison, a little faster now. It seemed tighter than ever inside me, stretching me. \"I just hope it doesn't fucking wreck my cunt.\"\n\n\"That's an old myth, baby,\" mom panted, getting worked up. \"Your cunt will go back just fine. Trust me, I know what I'm talking about. Oh, baby, we're gonna cum so fucking hard...\"\n\nShe was right, I could feel it. I was going to have a gigantic orgasm. My body was already flushed and the tingling was building, accompanied by that wonderful heat that washed over me every time I came, leaving me floating in a world of liquid pleasure. I pressed against her harder, ground my pussy against hers more fervently, taking the cucumber inside myself shamelessly. \n\nPretty soon we were both beyond words, reduced to panting, moaning and incoherent sounds that indicated our carnal need. The cucumber felt bigger than ever inside me, growing more so with each passing moment. Sparks and zings of delight juddered through my brainstem, my clit absolutely throbbing and feeling like it was a wet fire. Prickles of heat, all over me...\n\nI gnashed my teeth as I fought to hold on, pressing my hips up in the air, my mother doing likewise. Still gripping one another's wrists, we pulled desperately, grinding and pressing our cunts with a dreadful eagerness. \n\n\"Ah!\" I cried out as the orgasm battered me, causing me to lose of all sense of control over my body. I felt the total pleasure roll over me, pulling me into a million pieces, scattered across a scintillating wind of bliss. I was vaguely aware of my mom doing the same, lost in her own world of rapture. I pumped and ground and writhed with abandon, knowing no one could hear us or see us. My mom and I could make all the incestuous love we wanted. \n\nFinally it ended. The brutal orgasm pulled away wetly, like the tide, leaving me exhausted and feeling almost... flattened or deflated. Not in a bad way, but like a balloon that was out of air, I had a sensation of almost being collapsed in on myself. My thundering heart and my breathing were all I could feel or hear, aside from the last few tingles of my ecstasy. The pressure of my mom's fingers on my wrists soon came back to me. \n\n\"I can't believe I just fucked a giant cucumber with my mom.\" I thought hazily, my head still spinning. \n\n\"I can hardly believe it myself, baby, although I'm not objecting...\" mom replied, caressing my wrists. Shit, had I said that out loud?\n\nWe just laid there, pussy to pussy, the gigantic vegetable still stuffed up inside us both. We felt unable to move. What if we were just stuck like this?\n\nSeconds later, mom stirred. \"Okay, baby,\" she said softly. \"Let go of my wrists and press your hands against the ground to brace yourself and I'll pull myself off. After that I'll get you unstuck, okay?\"\n\nI just nodded and did as instructed, pressing my hands against the soft blanket we were laying on. I felt her moving and then she gasped as she slowly pulled back, the cucumber slowly exiting her engorged cunt. She was wheezing for a moment or two after she had disengaged herself, but recovered and began the process of liberating me from my near-paralysis. \n\nI shuddered and groaned as she took gentle hold and began pulling it gently out of me. I gritted my teeth and squeezed my eyes shut but then there was a loud, wet 'pop!' as the tip came out suddenly. I yelped and jerked violently before laying still, now stunned by the feeling of emptiness that had followed. Mom leaned in between my legs and planted soft kisses on my pussy, helping my adjust to the new sensation. \n\n\"I have no idea how we're gonna survive our sex,\" I murmured as she snuggled up with me. \"Then again, I can't think of a better way to go.\"\n\nWe held one another and made out for some time before slowly getting up and making our way back to the jaccuzi. We giggled as we kissed and tongued the much-abused cucumber before mom stood it between her thighs, pointing up. I sat on her lap, my pussylips pressed to it, as were hers. We kissed and fondled one another while keeping it between us. \n\n\"God, we're gonna be exhausted by the time night rolls around.\" I murmured through our kiss. \"But I know I'm still gonna be horny and want to fuck you.\"\n\nMom nodded and moaned in agreement as her lips locked with mine. \"Mmmmmm, trying out some of those toys with you tonight will be heaven, baby.\"\n\nWe made out for some time before stepping into the outdoor shower near the pool and cleaning ourselves off. Heading back into the house, we agreed we should take a nap in order to regain our strength. We snuggled into her bed and kissed lovingly, finally drifting off in one another's arms. It had been the best day ever. \n\n***\n\nI woke up feeling a wet tingling spreading through my body, the lovely sensation of a tongue lapping at my pussy. I moaned and squirmed, opening my eyes to smile down at my mother, who was between my legs and sliding her wicked tongue in and out of me. She smiled up at me before snaking her hands up my body and giving my nipples a wonderful pinch. I shivered at the sting.\n\n\"Unnnnnn, best way to wake up ever...\" I murmured, spreading my legs wider to allow her easier access to me. She buried her face deeper inside me, lashing my inner walls hungrily. I trembled and moaned, squirming my body around and fondling my breasts. Then she slid a finger into my ass, causing me to gasp and stiffen. She flicked my clit with her tongue while she pushed the finger in and out. Seconds later I shuddered and moaned, cumming for her. \n\nOnce I had cum, she crawled up my body and we kissed deeply, tongues greeting one another wetly. I wrapped my legs around her waist, delighted to feel her moist pussy against mine. We squirmed and rocked against one another as we made out before she kissed my nose and grinned. \"We've only been asleep for about two hours. Plenty of time left in the day.\"\n\n\"Mmmm, good to hear,\" I purred. \"Got any ideas of what we should do?\"\n\n\"Well, I gotta pee,\" mom stated. \"Wanna come with me?\"\n\nI giggled. \"Why the hell does peeing with you and watching you pee turn me on? What have you done to me?\"\n\n\"I was wondering the same thing about you,\" mom replied, pulling me up and wiggling out of her room, leading me by the hand. \"But who says that is a bad thing?\"\n\nWe went into the bathroom and mom sat down on the marble seat, spreading her legs and pulling me onto her. I slipped onto her lap, slinging one leg over her and behind, anchoring myself to her. Pussy to pussy now, breasts squashed together and looking into one another's eyes, we were ready to indulge what we intended to become a ritual. We took one another by the back of the heck and kissed lovingly, bodies becoming one. I heard mom hum and her soft, sticky womanhood flexed slightly as she began to pee. I shivered as I felt the stream against me and released myself, peeing against her. Our offerings spattered and mingled between us, soaking our cunts and inner thighs. It felt so naughty and so erotic. ",
        "\"Oh, God,\" I moaned through the kiss. \"I'm never gonna want to stop doing this, mom.\"\n\n\"Me either, baby,\" she murmured. \"This just keeps getting better and better, doesn't it?\"\n\nWe disentangled ourselves and stood, knowing we now needed a shower since we'd happily pee'd on one another. We clambered into the shower after mom turned on the water and began kissing and fondling one another ardently. The warm water beat down on us as we groped and explored, still thrilling in one another's delightful forms. \n\nMom leaned against the wall while I knelt behind her, kissing her ass and sliding my tongue up and down, from her gooey pussy, over her sensitive ridge to her puckered knot. She bit her lip and moaned in pleasure. The tip of my tongue flicked against it, sending tingles through her. \n\n\"Mmmmm, baby...\" she sighed, squirming her ass. \"You sure know what mommy likes.\"\n\n\"The same things as me.\" I murmured as I snaked my tongue up and down. She hissed and bit her lip as I slid a finger into her pussy and another in her ass. I wiggled and pushed them in and out of her while using my tongue until she groaned and pressed back as hard as she could, cumming. She sank to her knees and snuggled back against me, her perfect ass on my thighs. I held her closed and caressed her breast while kissing her neck.\n\n\"Love you, mommy.\" I whispered, cupping her full breasts. \n\n\"Mmmmm, love you too, baby,\" she whispered backed. \"You make mommy feel so good.\"\n\n\"Are we gonna fuck and make love for the rest of the night?\" I asked in a tiny, cute voice, pinching her nipples and giving them a little tug. She shivered and giggled in response, humming her assent to my plan. We washed one another off and exited the shower, dressed only in our thick, plush robes as we discussed dinner plans. \n\nWe finally just had some leftovers, since they were quick and this promised to get us back to fucking quickly. And that was what we wanted, was to be fucking. I couldn't imagine getting tired of making love to mom or her body. You know how you love your own body when you masturbate and are enthralled by every inch of it and how it responds to your touch? Well that's how I felt about mom's body. \n\nWe finished dinner and mom went and laid on the couch, spreading her robe open and exposing herself to me. I walked over, undoing my robe and laying down on top of her, my robe covering us. We kissed deeply and gently moved against one another. We made out for I don't know how long, lost in one another until I became acutely aware of how wet and sticky I was against her. She giggled as she pressed her hips up slightly, letting me feel how wet and turned on she was as well. \n\n\"So how're we gonna top that enormous cucumber we fucked earlier?\" she asked as she kissed along my jaw. \n\n\"How 'bout... we gnnnnnnnnn!\" I gasped as she nibbled my ear. \"We double-barrel ourselves?\"\n\n\"Oooh, baby,\" she cooed, clearly enjoying the idea. \"I love it. That'll probably kill us for the night, given what a day we've had, though.\"\n\n\"Mmmmm, but what a way to go.\" I murmured, thrilling to the notion. \"Let's go do it...\"\n\nWe got up and walked hand-in-hand over to the still-waiting bags of lingerie and goodies from the previous day. We took them up to mom's bedroom and began laying out the toys while mom took out our lingerie. She got a sly smile on her face as she looked at me. \n\n\"How about we film ourselves and wear some of our new outfits while we fuck?\" she suggested, holding up one of the pairs of panties I'd chosen. We could make our own little porn movie.\"\n\n\"That sounds wonderful!\" I exclaimed and began darting around the house to gather up all the recording devices I could. Mom and I each had a phone and they came with stands that would hold them upright if needed. We also had two camcorders and began searching for places to put them. \n\n\"Make sure we suspend one directly above, so we can see everything from that angle,\" mom said, pointing up at her overhead lamp. \"I've done it before when I've filmed myself masturbating.\" It was sturdy and I could see that fixing one of the camcorders to it would be easy enough. I stood on her bed and found my place for it. \n\nOnce we had figured out where all the cameras would be, we began trying on lingerie for one another. Mom put on her lacy white corset and matching panties, along with some stockings. I slipped into the sheer black bra and panties I'd picked, a wonderful contrast to her. We looked at one another expectantly for a moment before turning on the cameras. \n\nWe melted into one another's arms as we stood beside the bed, kissing deeply. Hands roamed and wondered, caressing and feeling one another's lingerie. Tongues slipped deeply inside each other's mouths. I shivered deliciously as I tasted her and felt her hands on me. I was already getting shamelessly wet and we'd barely begun. \n\nTangled in one another, we slipped onto the bed, my mom unhooking my bra and sliding it off me. I moaned as she took firm hold of my breasts, massaging and squeezing me. We continued kissing as we molested one another, rolling slowly back and forth. I pulled down the cups of her corset, revealing her lovely breasts to me. She gasped as I nipped her soft skin and tugged on her nipple with my teeth. \n\n\"Mmmmm, baby,\" she murmured, making sure the cameras could hear her. \"You make mommy so wet...\"\n\n\"Yeah?\" I mused, grinning. \"Let's take a look, shall we?\"\n\nI took the camcorder that was set on a tripod next to the bed and brought it closer to her, zeroing in on her panties. She spread her legs wantonly, revealing her lacy whites. They were indeed wet, a dark patch spreading across the from her core. She moaned as I pressed my finger to the panties and rubbed them up and down. \n\n\"Looks like I am too,\" I breathed, spreading my legs as I knelt and pointing the camera down at my self. My sheer, almost see-through panties were glistening with my desire, some of which I gathered with my finger and displayed for the camera. I then moved up to mom, scissoring our legs and began squirming my panties into hers, keeping the camera focused on the action. \n\nWe sighed and moaned as we ground our panties together, with me passing the camera to mom for another point of view. It felt so tingling and sticky and warm. We were both getting heated and I reached over to pull the tripod even closer. Grinding and slithering, we hit a wonderful rhythm that we knew would look fantastic on camera. \n\nNo sooner had I placed the camera back on its tripod than mom surged up and pressed me down to the bed beneath her, kissing me greedily. We were becoming more and more heated, horny beyond belief and needing one another. We stripped off one another's panties, leaving me only in my sheer black stockings and mom in her stockings and corset. I turned and faced down her body, pulling her hips to my face and beginning to lap and suck on her pussy hungrily. Mom groaned and did the same, her tongue and fingers snaking up inside me. \n\nGod, I was so fucking wet. We squirmed and writhed, tongues in each other's cunts and fingers buried in one another's asses. It was heavenly, I felt like I was drunk on her taste and scent. We pushed our fingers deeper in one another, sucking clits and teasing netherlips. I was a sweating, trembling mess quickly and reached over for the camera again, trying to keep it steady. \n\n\"Fuck me, mommy!\" I panted. \"Fuck me with your pussy!\"\n\nMom needed no encouragement and turned us around until she was kneeling over me, her cunt pressed to mine. Our lips glistened as they mingled and slid together, clits kissing and throbbing. I zoomed in the camera to catch everything. It was incredible, the noises our pussies made as they slithered. She gripped my leg tight as she fucked me, her eyes glassy with her desire. \n\nShe laid back now, her body against the bed like mine and we moved closer together, beneath the camera that was fixed into the lights above. I put the camcorder back on its stand and then began to fuck my mom. We gripped one another's wrists and began grinding. Snaking and humping together, our slits wetter than I imagined possible. I was soaked with sweat, as was my mom. We groaned and hissed as we fucked, drawing closer to cumming. I clenched her wrists tighter and tighter, pulling her closer, needing to feel all of her. \n\nI wailed in ecstasy as I came, mom's cries of pleasure filling my ears. Our cunts bubbled over with our sticky cum, slathering one another. I shuddered and ground, pressing harder and harder, like I was trying to stuff my mom inside me. I was floating in a world of boundless colour as we came together.\n\nWe lay still, breathing heavily, the cameras still recording us. I have no idea how much time had passed, nor did I care. We had all the time in the world and no desire to be anywhere else. Fingers caressed wrists gently and our pussies undulated slowly. We just lay in bliss, content to be together at this most magical of moments. \n\nFinally, mom stirred. She looked down our bodies and smiled at me dreamily. \"Hi, baby.\"\n\n\"Mmmmm, hi, mommy,\" I purred. \"That was so good. You ready for the main event?\"\n\n\"You mean getting our cunts and asses stuffed with our new toys? Can't wait...\"\n\nWe stirred and each of us took one of the long, double-ended toys that awaited our pleasure. We then knelt up, facing one another, bodies close as we held the dildos. Staring into one another's eyes, we moved close enough for our tits to press together and slid the dongs up between them. We rubbed them up and down slowly, flicking the tips with our tongues and smiling. Mom drizzled some edible lube on the tips and we began slowly began pumping our hands up and down the lengths. \n\nOnce they were good and slippery, we laid on our backs again and spread our legs wide, wide enough to expose our little knots. Mom then placed one end of the dildo at my rose and eased it it slowly. I sighed in pleasure as it slid in, stretching me. My back arched and I gasped as I hit my limit. Mom smiled and then placed her end to her ass, pushing it in and then wiggling herself down its length until our cheeks met. I was breathing heavily, feeling so full, but we were only half done. \n\nI took the other dildo and placed it against her pussy. It glided in easily since we were both so wet and eager for more. I then slipped it inside myself, both of us moaning loudly as we were filled now, front and back. It was unreal, being pinned to my mom this way. \n\n\"How do you feel, baby?\" she whispered, caressing my wrists.\n\n\"Uhhhnnnn, very full, mommy,\" I sighed. \"Let's do this.\"\n\nWe gripped one another's wrists again and began to squirm and pump in time. I could feel my ass cheeks press to hers and our pussies touch as we fucked. The dildos moved inside me, at different times, almost different speeds, seemingly, because my ass was gripping even tighter than my pussy. I gazed down my body. I was so full. I could see the dildo in my pussy moving underneath the thin skin. \n\nMom shuddered and gasped, sending shocks through me as well. I could feel the dildos pressing inside me, separated only by the thin membrane between my cunt and my ass. It was unreal, thinking they were so close. \n\n\"Ohhhhhh, baby,\" she moaned, squirming her hips slowly. \"This feels amazing. It's the best thing ever.\"\n\n\"Mommy...\" I whimpered, not able to say much else. Pussylips touched as we pressed closer, the dildos completely swallowed between us. I breathed as deeply as I could, trying to relax, but these two huge objects were deep inside me. I wondered if this was how those anime girls with the tentacle monsters felt. \n\nI slipped my legs over hers and we both groaned as we were pulled closer still. Our breasts jiggled and heaved as we moved against one another steadily, finding our rhythm. Clenching wrists, we began to grind strongly. Holy shit, I felt full. It was almost like the dildos were in my throat, I was gasping. \n\nMom seemed to be in the same state, almost paralyzed by the unreal sensations that battered us. But we kept grinding, hard as we could, cunts mashing and cheeks rubbing. I was completely incoherent as we pounded one another. The stretching feeling was driving me over the edge, a burning pleasure stealing over my body...\n\nI couldn't have helped it if I wanted to- I screamed, loudly. My body exploded in ecstasy, Mom cried out and her nails bit into my wrists. I could feel my pussy and my ass clenching. It felt like the dildos would be pushed out of me, but mom was clenching and pushing right back. The pressure was enormous and my mind spun. \n\nI blacked out. I'd done that maybe once before from an orgasm and it had been one I'd given myself. It was nothing like this, though. When I came to, my mind was still floating, my limbs tingling. Liquid pleasure filled my body, the faint feeling of the dildos pulsing inside me. I was... exhausted. \n\nNo idea how much time passed before I opened my eyes. I could feel mom's fingers on my wrists, but the rest of me was just mush. She smiled down at me, still laying opposite. \"Love you, baby...\" she said softly. \n\n\"Mmmm, love you too, mom.\" I managed. I freely admit, I had no clue how we were gonna get ourselves out of this position, since we were more or less nailed to one another. I felt so stuffed I couldn't even tell if I had to pee or not. I'd had big dildos and vibes in me before, I'd even been double-penetrated by two guys- but none of those experiences came close to the sensation I was currently trying to work through. \n\nMom giggled. \"I have no idea how to get out of this, darling,\" she said. \"I guess when we're ready we both just pull away from one another and hope for the best.\"\n\n\"Oh, Jesus,\" I sighed. \"What if I piss or crap myself?\"\n\n\"Let's just pray it doesn't come to that on my silky sheets,\" mom replied warily. \"Can you reach the lip of the bed and grip it?\"\n\nI stretched my arms up to my sides and past my head, managing to take hold of the edge of the bed, wheezing as the dildos shifted inside me. I could actually see the shape of the one in my pussy bulging beneath my skin. Holy shit... \n\n\"Ready, baby?\" mom asked, having taken hold of her edge of the bed. I took a deep breath and nodded. \n\nWe both groaned and cried out as we pulled away from one another. It almost felt like my insides were being pulled out- not painfully, but there was this unreal tugging sensation within my body that I was not the least bit prepared for. I shuddered and spasmed as the dildo in my cunt popped out loudly. Mom got the second one out of her ass first and I heard her gasp in shock at its exit. Without the huge pressure inside me I just lay still for several seconds, trying to catch my breath and orient myself. The dildo was still in my ass, but I could barely feel it now. \n\nShivers rippled through me as my mom slowly crawled over and gently pulled the dildo out of me. I almost felt empty again, much like I had after the cucumber, but this was even more pronounced. Mom laid slowly on top of me and we kissed lovingly, exhausted bodies melting into one another. \n\n\"Heaven, baby,\" she whispered as we kissed. \"Sheer heaven.\"\n\n\"Mmmm, it was too good for words, mommy,\" I murmured. \"We've gotta do that again.\"\n\n\"We will, as often as we like,\" she said, smiling and kissing my nose. \"But for now, let's just pee and sleep.\"\n\nI nodded and we slowly got off the bed, walking and holding on to one another for support. Mom sat on the toilet and I wrapped myself into her. We kissed deeply as we peed, soaking one another and giggling at the naughty thrill of it. We cleaned ourselves and went back to her bed, making out and squirming our bodes together before falling asleep in one another's arms. \n\nIt was the first day of our new lives as lovers and we even had video to remember it by.\n\nShit, we never did turn off the cameras...\n\n***"
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "incest",
        "mom",
        "daughter",
        "secret",
        "lust",
        "fetish"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/sapphic-serenity-ch-04"
}
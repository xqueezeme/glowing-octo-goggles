{
    "title": "Basics - Neural Control Node Ch. 07",
    "pages": [
        "Author's Note\n\nThis chapter resumes the next morning. After a five person orgy in Tess's bedroom to welcome Katie, Tess' maid, to the family. Josh has accepted a job with the NCN HQ group, but received some disturbing news regarding the future of his NCN cube and the captive units. There is a clock ticking, a new updated v2.0 version is shipping, but the current network is due to shutdown at Midnight UTC (6PM local time)\n\nNeurally enhanced assistant scorecard:\n\nJosh - Cube 1: (Active nodes)</br>01- Gina</br>02- Rhiannon (Rhi)</br>03- Ester (Essie)</br>04- Contessa (Tess)</br>05- Katherine (Katie)\n\nJosh - Cube 2: System reset 0 units\n\nFriday is starting and the clock is ticking. Will the network be out of service causing all the nodes to fail and releasing all of the assistants? Is this the end of the family?\n\nThis is obviously a work of fiction, all characters that engage in sexual activities are above the age of 18. This chapter does include a scene with incest. \n\n\n\nBasics: Neural Control Node Ch. 07\n\nPeople come, people go - Some grow young, some grow cold<br>I woke up in between - A memory and a dream<br/>So let's get to the point, let's roll another joint<br>Let's head on down the road, there's somewhere I gotta go<br/>And you don't know how it feels<br/>You don't know how it feels to be me<br/>~ You Don't Know How It Feels (Tom Petty)\n\n\"Listen asshole,\" Tess growled, \"You need to get the hell out of my house, before I call the police.\"\n\nI awoke with a start, sitting up as I tried to catch my breath. I blinked and felt warm flesh all around me. I looked around and was able to remember I fell asleep in Tess' room, surrounded by all five of my assistants, my drones, my slaves. Tess blinked, lifting up from the other side of Rhi, who had rolled on her back to look up at me.\n\n\"Another nightmare?\" Rhi asked, her hand running up my chest.\n\n\"He does this often?\" Tess asked, then slumped back down and kissed Katie's back, closing her eyes.\n\n\"Yeah,\" I said, \"Different this time.\" \n\nI slid down and pulled Rhi back against me. I felt Essie press a kiss behind my ear, her breasts shifting back against my back.\n\n\"It'll be okay, Papi,\" Essie said softly, then kissed my shoulder. .\n\n\"What do you remember?\" Rhi asked quietly.\n\nI shook my head, thinking about it more felt like it might push the nightmare into existence. I wanted to forget it. I kissed Rhi's shoulder and rubbed my hand up and down her arm.\n\n\"It's silly,\" I said, \"Let's sleep in.\"\n\n\"Dreamy,\" Rhi purred and soon the breathing around me steadied as they returned to sleep.\n\nI started at the ceiling, and it felt like a clock was counting down. If my nightmare woke me up at the same time, there were roughly twelve hours left before things would change. Maybe forever.\n\nShit.\n\nSoon, on her own clock, Rhi stirred, then turned and kissed me. I smiled into her eyes. She pressed her forehead against mine, and her clear blue eyes studied mine.\n\n\"I love you,\" she said, \"Always. Never doubt that, my Master.\"\n\nI bit my lip and nodded. I didn't trust my voice. I stared at her, afraid if my eyes closed a tear would betray my troubled thoughts.\n\n\"Now I'm going to fix you breakfast,\" she smiled, and woke up Tess to help her.\n\nTess smiled as she disentangled from Katie, then leaned and kissed me.\n\n\"Good morning, Josh,\" she smiled, then slipped from the bed.\n\nKatie rolled with a soft moan, her eyes blinking then focused on me. I smiled quietly, and she grinned and looked down, then pressed towards me. I rolled onto my back, and Katie lowered her mouth to my semi-hard cock and started sucking and licking. My moan made Essie stir, and she lifted her head and looked at me. Then pressed against me and kissed me.\n\nI moaned into Essie's mouth as Katie kneaded my balls, her other hand stroking me to a full erection. Essie blinked then looked down and saw Katie bobbing up and down. Essie lowered and kissed my chest as she watched Katie. Gina rose up from the other side of Essie and then crawled over Essie and kissed me fully. \n\n\"How many of us can you please in one setting?\" Gina teased, thrusting her tongue between my lips.\n\nI growled then rolled away from Katie's mouth and pressed up onto my knees. Katie looked at me with questioning eyes. I slid off the bed, and looked at the three young women, naked and flushed with growing arousal. \n\n\"On your knees, please,\" I said, \"lined up along the edge of the bed.\"\n\n\"I love good manners,\" Essie said and quickly lined up and shook her ass at me.\n\n\"I love early adopters,\" I growled, then aligned my cock with her cunt, and drove into her.\n\nHer eyes blazed into mine as she tossed her head to look over her shoulder. Katie slid down to the left of Essie, while Gina slid to the edge on Essie's right. I fucked Essie hard, then shifted and slammed into Gina. After rutting into her, I shifted over to Katie. Driving into her with a series of full strokes.\n\nThe girls all groaned and slid down, pressing their breasts into the messy sheets. Their asses swaying, trying to entice me to use their pussy next. Essie kissed Katie as I was fucking Essie. Gina spanked Essie's ass just before I pulled out and started fucking Gina. The series continued, until I pulled back and stroked my cock.\n\n\"Flip over on your backs, your asses on the edge, thighs spread.\" I growled.\n\nI enjoyed the spectacle of the trio twisting, pulling their knees up and thighs apart. Three pairs of bare breasts bouncing, six eyes staring at mine, and three dripping cunts needing to be filled.\n\nI started with Katie, and fucked her until she was on the edge, then pulled out. I shifted to hammer into Essie as Katie growled in frustration. I enjoyed pounding into Essie, but moved to Gina as Essie was about to crest. Essie was moaning curses, and was soon joined by Gina when I moved back to Katie. The second time through they added their fingers to their clits, trying to get to their peak, but I moved to the next just before their edge. Their eyes blazed in lust and frustration as I kept them on the edge.\n\nThen I slammed into Katie.\n\n\"Cum hard for me, Kate,\" I growled, and I felt her cunt clamp and she arched and vibrated. \n\nI pulled out and hammered into Essie with the same command, and got a similar result. I hardly had to stroke into Gina before she tripped into her own climax with no further encouragement.\n\n\"Mmm my good little whore,\" I growled. \n\nThen I stepped back and started stroking my cock. They watched, then dropped to their knees in an arc in front of me, their mouths open. I leaned forward and they pressed the cheeks together. I grunted and sprayed my cream into their glowing faces. They tried to catch each jet, then turned and licked my cum from their partner. All of them were hungry for a taste. One by one they sucked on my crown, swirling and sucking to pull every last drop from my rod.\n\nI blinked as I watched. Then knelt and wrapped them all in a hug and shared kisses with each of them. When everyone had caught their breath, we crowded into the shower together, and washed each other. I called time out, before another round began. \n\n\"What a party pooper,' Gina laughed.\n\n\"I know I know,\" I confessed, \"I'm the worst.\"\n\nWe were all smiles as we left Tess' room and the girls filed down the hall and up the stairs naked as the day they were born to get dressed. I pulled on a pair of swim trunks and a shirt that Rhi had laid out in Tess' closet, then went into the kitchen. I hugged Rhi from behind and kissed her. Dropping my hand to her ass to squeeze.\n\n\"That looked fun,\" Rhi teased.\n\n\"You could see us?\" I asked.\n\nShe pointed out the window, and Tess' bed was visible from the kitchen counter. \n\n\"Probably need to pull down the shades,\" I grimaced.\n\n\"Babe,\" she said and kissed me, \"I enjoyed watching you, I know you need to keep all of us happy. I look forward to my turn.\"\n\n\"Me too,\" I confessed, \"I'm famished.\"\n\n\"Rhi's not telling you the whole story,\" Tess said, and Rhi blushed.\n\n\"Oh?\" I asked.\n\n\"She watched you inverted,\" Tess winked, \"her head was draped over the edge as I drove her crazy with my tongue.\"\n\n\"You're both insatiable.\" I grinned.\n\n\"Guilty,\" Tess said, \"We call dibs while the trio cleans up from breakfast.\"\n\n\"Someone will need to change the sheets in your room Tess,\" I said.\n\n\"And air it out,\" Tess agreed, with a mischievous grin, \"Smells like a high end brothel in there.\"\n\n\"Best scent in the world,\" I chucked, \"Eau de Pussy.\"\n\n\"Okay, okay,\" Rhi smiled, \"Go sit out on the patio and cool off, Romeo. I'll bring you your food. Take your coffee with you.\"\n\nI grinned and carried my cup out of the patio, and sat at the end of the table. I looked out over the river flowing past, and inhaled the scent of the strong coffee. I held the cup in both hands and sipped enjoying the steam and the flavor. I had grabbed my phone off the counter, as Rhi had started to collect it from my trousers each night. I flicked it open and started thumbing through emails. \n\nMy old work account was disabled, so I deleted the account. I also deleted my fake account I used for phishing for stray cubes. A new email from ncnhq.com was in my personal inbox, and had credentials to login to their email servers as a new contractor. I connected, and went through the process of creating passwords, and setting up other apps for my new job. I'd have to do it again on my laptop. \n\nOne email from Bala was waiting in my inbox. I hesitated before I tapped on the subject, \"Status of v1.0 network termination.\"\n\nI closed my eyes, not really wanting to read it. Then after a sigh, I scanned the contents.\n\n\u2014\u2014\u2014\u2014\u2014\n\nJosh,</br>I'm sorry to tell you, the v1.0 network will be deactivated at midnight GMT Saturday morning. Your node and assistants will be unable to access their cognitive maps after 6PM your local time Friday. Try to limit any disturbance with your NEAs until you are in receipt of your new v2.0 node. I'm including a short video that will introduce you to the new form factor and enhanced UX. It is expected that once your new node is activated, your NEAs will be automatically updated after they reconnect by touch. Unfortunately we can't update their neural connections silently.</br></br> I will talk to you again on Monday morning. We are excited to have you on our team and look to the future.</br>v/r Bala.\n\n\u2014\u2014\u2014\u2014\u2014\n\nI tried to limit my emotional response, I didn't want my emotions to ripple through our network. I shutdown my phone and sipped my coffee. This was the worst case. It wasn't the end of the world, and I hoped not the end of us. There were a lot of unknowns. Thinking it through, there were always many unknowns in just keeping the status quo. A bad app, a glitch in a communications protocol, a myriad of things could cause issues. We were fortunate the only really uncomfortable thing that had happened so far were some leg cramps when Katie was frozen.\n\nI forced myself to think positive thoughts. I'd watch the video later, after the network went down. Until that time I wanted to enjoy my NEAs. I wasn't happy with that acronym either. They were my lovers, my family. I sighed, and finished my cup of coffee.\n\nRhi slid a plate in front of me, along with a glass of orange juice. A stack of buttermilk pancakes with a pad of butter melting on the top, thick slices of bacon, fresh fruit and maple syrup. Plated perfectly and the aroma was mouthwatering. Rhi sat beside me with her plate, slightly smaller portions. Tess on my other site. Then my three younger lovers sat around the table. All seats were filled, a perfect symmetry.\n\nI started eating, and they all joined in. I was famished, and I allowed myself to forget the pending deadline. I remembered I could ask each of them the HealthMonitor question.\n\n\"How are you feeling,\" I asked Tess first. \n\nHer eyes flickered for a few moments, then she smiled at me.\n\n\"I'm feeling great, blood sugars are inline. Cholesterol within range,...\" Tess continued rattling off a series of conditions and statistics that lasted for over a minute..\n\n\"Did you hear all of that?\" I asked stifling a laugh, as she finished and raised an eyebrow at me.\n\n\"Yeah,\" she chuckled, \"Maybe there is a prompt with a shorter response.\"\n\n\"Maybe,\" I looked at Rhi, \"Quickly, how are you feeling.\"\n\n\"I'm feeling great, all parameters are nominal, thank you for asking.\" Rhi grinned.\n\n\"Well there you go,\" Tess laughed.\n\nThe shorter prompt got the same response from all of my lovers. I smiled, satisfied we were all healthy and happy. For at least the next eight hours.\n\nI ended up having two helpings of pancakes. My caloric output level had been sky high, and I craved the extra calories. The morning conversations settled on getting Katie moved into the house. There were two sides to the conversation. One side wanted it to happen today, to make the weekend more restful. The other side wanted to wait, maybe on Sunday we could do it. \n\n\"I don't have much,\" Katie said, \"I need to find out about my lease and other crap. I don't want to pack and clean. I'm fine with the clothes we got yesterday.\"\n\n\"I think I agree with you Katie,\" I said, \"Let's all relax the rest of the day, see what the morning brings, we deserve a down day.\"\n\nOf course my motive was to reduce any stress that a move might cause, and extend free time until the guillotine fell at six. Would Tess even want Katie to move in if it wasn't for the influence of the cube. Would she allow me to stay, I wondered, recalling the premonition of my waking dream.\n\nI finally put an end to the argument. After MaidMode tidying, the only allowed uniform is a bikini or swimsuit. The grins around the table were brilliant. Tess and Rhi cooked breakfast, so the hive exempted them from clean up and morning chores. They decided to help me change into my swimsuit. No one raised an objection.\n\nI stepped into Tess' room from the patio, and Rhi was right behind me. She drew the blinds to limit the view into the room, and Tess closed the door and lowered the blinds on the other side of the room.\n\nI just kicked off my shorts, and watched them strip for me. I loved how they looked so much alike, and the little differences in hair style and eye color were the only cues to who was who. Up close was different, I never mistook Tess for Rhi when we were close. \n\nRhi knelt at my feet in only her satin collar. Reminding me again that I hadn't bought her a special collar to claim her as my slave. I promised myself I'd do something about that soon. She knelt and looked up at me, her palms open on her thigh the perfect picture of submission. Tess watched from the bed, curious as to this ritual. \n\n\"Worship my cock, slave,\" I growled, \"don't use your hands.\"\n\nRhi purred and rubbed her cheeks over my stiffening phallus. I gripped a handful of her azure locks, the deep blue hue appearing almost black until the light hit it. It reminded me of vintage comic books of Amazonian princesses. She pulled her hands behind her back, and raised her eyes to look at me. Her mouth opened and spread her saliva over my shaft. She rolled her head and sucked my crown between her lips.\n\nI flicked my eyes to Tess, and she was watching, her legs spread and playing with her smooth lips, circling her clit. Her eyes watching her sister's cock worship, then looking at me lustfully. I pulled Rhi's head close, forcing my cock down her throat. Her deep throating skills unmatched as she gurgled and blew bubbles of drool around the base of my cock. She inhaled then I held her head still while I fucked her mouth. She watched me unblinking as my cock invaded her throat, tears streaming from the sides of her eyes. I felt her lust echo through my thoughts.\n\nI pulled out and then pushed her towards her sister, she crawled forward. I watched as she wriggled her bottom, then climbed up the edge of the bed. Tess had crabbed backwards, her legs spread. Rhi leaned over, her hands still clasped behind her, and licked her sister's glistening cunt. Tess moaned encouragement as she lifted her hips to press into Rhi's willing mouth.\n\nI stepped behind Rhi, she was draped over the edge of the mattress. I lowered a hand and cupped her sex. She was dripping like a sieve, and moaned as my fingers spread her lips apart. My cockhead notched between her lips and I drove my hips forward. Her head tossed back and she tried to press back into me. I gripped her head and held her mouth to her sister's cunt.\n\n\"You can cum when you make your sister cum,\" I growled. \n\nI fucked my slave like there was no tomorrow.\n\nWhich \u2014 I quickly banished the thought. \n\nI refocused on giving her pleasure by using her body to satisfy my own lust. She moaned and whined, each stroke slamming into her, as she feasted on Tess' pussy like it was the tastiest of pies. Tess was twisting her stiff nipples watching me with lust filled eyes. I gripped Rhi's hip with one hand, then my other hand slid under her hip, and started strumming across her clit ring.\n\nI growled as my thrusts slammed her hips into the edge of the mattress. My fingers were a firm spot for her to grind her hips to press against her clit. We synced into a hard rutting beat. I took her hard, and she whined as she lapped at Tess's clit. Tess was on edge, as I watched her look at her sister. \n\n\"Cum Tess,\" I growled, \"My greedy fuck toy, spray you sister with your cum.\"\n\nTess gasped then reached to grip Rhi's shoulders. I pressed against Rhi's head to hold her hungry mouth against Tess's grinding cunt. I felt Tess trip into orgasm, then on cue, Rhi groaned and I felt her cunt contract in waves around my cock.\n\n\"Good girl,\" I praised, \"don't stop until you feel me cum,\"\n\nShe whimpered and continued to lick her sister. Tess was tripping into a series of peaks herself as Rhi mewled in passion her thighs clenching together in rapid succession. Her cunt rippled, her hips flexed, and I felt my peak hit. I rammed forward and roared out, filling my slave with my hot cum. I jerked my hips then slumped. My chest pressing her down into the mattress. Tess had twisted and rolled away overcome by oversensitivity. \n\nI pulled out and rolled to sit against the bed. I pulled Rhi into my lap and she finally moved her arms to wrap them around my neck. We kissed deeply and hungrily. Sill shaking and trembling with overloaded nerves. I held her in my arms until we both caught our breath. I kissed her lightly.\n\n\"I love you, Rhi,\" I said, \"My lover, my soulmate, my slave.\"\n\n\"My Master,\" she said, \"I'm yours, and I love you so, so much.\"\n\nTess rolled over and kissed my cheek, then the top of Rhi's head. \n\n\"You two are made for each other,\" Tess smiled, \"Thank you for letting me play with you, and witness your love first hand. I love you both too.\"\n\nWe rose slowly, and then joined each other in the shower. We rinsed and washed tenderly. Then dried lightly, choosing which swimsuits to wear. Rhi wore a black bikini, while Tess chose a royal blue. I pulled up my black swim trunks, then we went back to the pool.\n\nThe three younger girls were already in the water, and we all joined them. Gina swam towards me with a grin. She kissed me, her arms around my neck, and lifted her thighs around my waist. Her new larger breasts stretched her bright pink bikini, barely covering the curve of her lower breast.\n\n\"You look amazing,\" I said, \"Are you enjoying your new tits?\"\n\n\"I am,\" Gina said, with a grin, \"I want to keep them, I think. I probably won't take up jogging though.\"\n\nI laughed and she smiled. I spun her around and she dove through the water, swimming towards Tess. Essie slid behind my back, her bikini clad breasts pressing into me as she wrapped her arms around my shoulders, her ankles curled around my thighs.\n\n\"Mmm,\" I smiled running my hand back to cup her ass, \"How's mi ni\u00f1a?\"\n",
        "\"I'm wonderful Papi,\" she said, kissing behind my ear. \"You have a wonderful family, I've never ever been happier.\"\n\nI pulled her around in front of me, and combed her wet hair from her eyes. Her bikini was a sage green, which was a wonderful contrast to her carmel flesh. Her brown eyes captured mine, and I kissed her tenderly. She swept her tongue across my lips then parted to smile into my eyes. She pushed back away from me, then swam towards Rhi, hugging her close.\n\nKatie smiled at me from the side of the pool. I walked in waist deep water towards her. Her yellow bikini was the perfect shade for her tanned flesh. He pierced nipples causing their outline to jut through the thin material. Her belly ring sparkled just at the water line. I leaned into her and pulled her close. I kissed her as I felt her breasts press into my chest. She kissed me back, pressing her tongue between my lips.\n\n\"You know,\" she said parting the kiss, \"I thought I was done with guys until I met you.\"\n\n\"Is that so?\" I asked, enjoying being close to her. \n\n\"Yeah,\" she said, \"I'm smitten by Tess, I can't deny it. You surprise me, though. You're gentle, kind, and considerate. Then you can transform into a fucking intensely dominant male that drives me crazy in the bedroom.\"\n\n\"I am glad I'm getting to know you,\" I said, with a smile, \"You had a bit of a hard time in the past. I hope we are turning that around. I want you to be happy, safe, secure.\"\n\n\"I feel all of that,\" she smiled, \"I am building my trust in you. It's been less than a day, but I can tell that you are serious when you say you will protect us.\"\n\n\"I will.\" I promised, not knowing if I could.\n\n\"Good,\" she smiled and dropped a hand down to fondle me, \"Because after a steady diet of Tess' vagina, I am getting addicted to your incredible cock.\"\n\nMy eyes flared as her fingers traced the outline of my growing erection. I dropped my hand down, and pulled her bikini bottoms aside and pressed my fingers into her sex. I could feel her slick arousal even under the surface of the water. She moaned and lifted her hand, sliding it inside my waistband, finding my cock, and stroking it. Our eyes met, as we molested each other. I pulled her from the side, and she wrapped her other arm around me. \n\nI carried her with me as I walked to a shallower part of the pool, then lowered her bottom to the concrete. She leaned back then crabbed forward to shift her bottom to the edge of the pool. I pressed my trunks down and released my cock. She pulled her bikini top up and exposed her breasts. I untied one side of her bottoms and then pressed my cock into her slick bare cunt, thrusting deeply\n\n\"Oh fuck,\" she said and arched back, her breasts lifting invitingly.\n\nMy hips were at the right height, and I started to fuck my newest lover. I lowered my mouth to her full breasts, my arm wrapping around her back, and sucked on a hard nipple, battering the metal rod with my tongue. Her fingers combed through my hair, encouraging my breast worship. I hungrily moved to her other breast, the water of the pool splashing over her spread thighs as I rammed my cock into her. I was overcome with lust from this alluring girl.\n\n\"Ohhhhgawd,\" she said, \"You stretch my tight pussy, mmmyes, Josh hammer me, FUCK!!\"\n\nWe began to attract a crowd as Essie slid past me then sat on the edge beside Katie. She twisted and gripped a handful of Katie's hair, then kissed her deeply. I continued to fuck Katie as Tess slid next to me, and pulled Essie's bottoms off then glued her mouth to Essie's bare cunt.\n\n\"Oh you bitch,\" Essie growled, \"Right there, fuck, yes.\"\n\nRhi stepped past Essie then straddled Katie's head. Katie lifted her head to see where the shadow was from, then grinned and angled her head to meet Rhi's sex as she lowered her bare cunt to the blonde's hungry lips. Rhi smiled at me then her eyes lidded closed as she rocked her hips into Katie's mouth.\n\nGina wrapped herself around my back, and nipped my ear, \"I'm next,\" she growled, \"Make Katie-slut cum on your cock.\"\n\n\"Cum for me Katie,\" I said, hammering her hard.\n\nKatie jerked and her thighs clamped shut. Her arms slid back as she climaxed, and then lifted her arms to wrap around Rhi's thighs. Rhi lowered down to her knees grinding her sex into Katie's mouth. I pulled Gina from around my back, and pressed her mouth to Katie's pulsing cunt. Gina wriggled her hips, spreading her thighs in the knee deep water. I tugged her pink thong bikini to the side, then slammed my steely cock into her ready cunt.\n\n\"God yes, fuck,\" Gina cried, \"Fuck your needy whore, YES!.\"\n\nI pressed her head into Katie's pulsing pussy, and Gina quieted with a hungered growl. Her hips pressing back to meet my thrusts. Essie and Rhi were watching me as Tess and Katie licked their pussies. My eyes flicked between Essie and Rhi as I rutted into Gina. Gina flexed suddenly then arched as her cunt clamped around my cock as she climaxed. I pushed back and stepped to the side, finding Tess's hips. \n\nTess rose and bent over, her firm bottom flexing back and forth tantalizingly. Her hands pulled off her bottoms letting them drift in the pool. She then gripped Essie's thighs to continue her feast of flesh. I took advantage, and pressed my cock into Tess' tight cunt then rammed my hips forward. Her groan was muffled in Essie's cunt. Essie lifted her hips and came all over Tess' face. Tess groaned again and hungrily cleaned Essie's spending. I rutted hard, and was rewarded with another shriek and a shudder from Tess as her cunt convulsed around my shaft. \n\nRhi watched Tess slide into the water recovering from her climax. Rhi stood up, lifting her bare cunt from Katie's mouth. I watched as she walked towards the shallow end steps. I stalked her, wading through the thigh deep water, pursuing my prey. I grabbed her and pulled her tightly against me. Rhi's hand stroked my cock, and I lowered her down onto the steps. She looked up at me, her hips on the edge of the top step, her legs spread wide. In an instant my cock was driving into her. Rhi wrapped her arms around my shoulders, she had lost her bikini completely and her bare breasts crushed against my chest.\n\n\"Fuck yes,\" she groaned, her breath hot along my ear, \"Oh Fuck Master, please please...\"\n\n\"Cum for me,\" I said, and hit my peak. Driving in my hips into her and blasting her cunt with another load of my cream. She shuddered and held onto me, her hips rolling into another peak. We slowly sank down into the shallows. I twisted and sat on the top step, catching my breath, holding Rhi to my chest.\n\nThe pool deck was littered with naked satisfied females, and I smiled. The past midday sun was tipping into the afternoon, and I took a deep breath. The hours were going too fast. I slid back into the pool, looking for my discarded trunks. Then the girls were doing the same, plucking up discarded bikini parts floating on the water, or tossed aside on the concrete deck. We helped each other redress, with kisses and smiles. \n\nThe fit of lust seemed incredibly normal, as much as it was surprising. I had to concentrate to find my center, feeling like I lost my concentration and my immediate sexual needs ripped through my girls, then bounced and echoed between us as our collective needs rose. \n\nI dried off and sat in the shade. Gina and Katie reclined in the sun, both bare breasted sun worshippers. Rhi sat on one side of me, her fingers entwined in mine. Essie leaned against my other side. Tess rested her head on Rhi's thigh. It was restful to just be close.\n\nI felt my eyes become heavy, and I sat up and moved inside to the more comfortable couch. Rhi and Essie followed, and Tess moved to go sun worship with the other girls. I smiled and kissed Rhi then Essie, then relaxed, letting my head tip back. \n\nI sighed contentedly then dozed lightly.\n\n\"Papi,\" I heard Essie's voice and a shake, \"Papi wake up, I want to talk with you.\"\n\nI blinked rapidly, \"Okay, what time is it?\"\n\n\"Almost 2pm,\" Essie whispered, \"come with me, so we don't bother Rhi.\"\n\nI stood up and Rhi stirred, looking up at me. \n\n\"Where are you going?\" Rhi asked. \n\n\"Essie wants to talk with me,\" I said, leaning down and kissing her softly.\n\n\"Okay,\" she said, sitting up, \"I'm hungry, I think we missed lunch. I'm going to start fixing something.\"\n\n\"Food would be good,\" I agreed, \"Thank you for taking care of us.\"\n\nRhi smiled, blinking still trying to wake from her nap. Essie grabbed my hand and I followed her upstairs into her room. I shut the door behind us, as she climbed and sat on her bed. I sat next to her, and combed my fingers through her hair, looking into her eyes.\n\n\"What are you thinking about?\" I asked.\n\n\"Just second thoughts. I liked being a cop,\" she said, \"Before this year, this summer, it's suddenly a horrible time to be a cop. I'm putting Mac in a bind with one less man. He's too much of a good leader to let it show though. Did I make the right decision?\"\n\n\"You're second guessing yourself for turning your badge and gun in?\"I asked for clarification.\n\n\"I guess. I have to look out for number one though, right?\" Essie asked looking for some support, \"I don't want to be riding that highway back and forth. Staying in your empty apartment doesn't sound so hot either, no offense.\"\n\n\"None taken,\" I grinned, \"Clearly this house has major benefits to someone's lifestyle.\"\n\nShe grinned at that and then she looked at her fingers. She twirled her hand inside of each other.\n\n\"What are you worried about?\" I asked.\n\n\"A paycheck is a nice thing to have,\" she said, \"I appreciate Tess' hospitality, but nothing beats earning your own living.\"\n\n\"I could hire you,\" I said, \"I need security for my stuff, and maybe I'll need an investigator to help me with some of my as yet unknown work.\"\n\n\"You take care of yourself pretty good, Papi,\" she smiled.\n\n\"No listen,\" I said, \"I don't know what will happen, but this cube, and network stuff. It's going to be a series of puzzles and mysteries. You are great at helping me think through all the angles. We make a great team. It would be a real job, a real contract, regular paycheck, we can get Tess' lawyer to make it all formal.\"\n\n\"What about being a PI?\" she asked.\n\n\"Get your PI license,\" I said, \"I'll keep you on retainer, I may need a good investigator, run background checks, I think you should pursue that angle.\"\n\nShe looked at me, and didn't say anything.\n\n\"You're too smart, and too intelligent to be making traffic stops, Es,\" I said, \"Mac knows that too, or he wouldn't have offered to help you with next steps. A good leader also knows taking care of his people means knowing when to let them go.\"\n\n\"Thank you, Josh,\" Essie said after a long pause, \"It's a big step, and it is very scary. You have my back though, and that makes it easier.\"\n\nShe looked at her hands again, then shifted back against the wall. She looked back at me, a soft smile on her lips.\n\n\"What?\" I asked.\n\n\"I need a distraction,\" Essie said, \"Or I'll keep cycling through this.\"\n\nI needed a distraction too, to keep me from feeling I was watching the timer of a bomb tick down and knowing there was nothing I could do to stop it. I knew that would be inviting more trouble than it was worth. Food and another round of fun with the family would fit the bill.\n\n\"Yeah,\" I smiled in agreement, \"I need some distraction too. I'm hungry, though. Rhi said she was fixing a snack. Let's go eat with everyone and then get distracted together as a family.\"\n\n\"Mmmm,\" she smiled and nodded, \"I am hungry,\" paused and looked at my cock for effect, then grinned and continued, \"but food would help too.\"\n\n\"Deal,\" I chuckled, holding out my hand.\n\nShe took it, then pulled herself into me as I stood. I wrapped my arms around her and hugged her. I rubbed up and down her back, and she lifted her eyes to look up at me.\n\n\"Thanks for believing in me, Josh,\" Essie said, her brown eyes searching mine, \"I know I'll figure this out with your help.\"\n\n\"I always have your back, Es,\" I said.\n\nWe kissed then walked back downstairs, Rhi and Tess were setting out platters of cold sandwiches, bowls of chips, and fresh fruit. Rhi smiled as we came down and met us both with a big group hug.\n\n\"Get something to eat,\" Rhi said, \"Drinks are in the fridge, beer, soft drinks or wine coolers. We'll eat by the pool, then swim, then see what else comes up.\"\n\nRhi smiled at me and cupped my crotch as she teased me, then kissed me softly.\n\n\"Sounds great,\" I said, cupping and squeezing her bikini clad breast to let her know the feeling was mutual.\n\nWe filled our plates, and were joined by Katie and Gina. They still looked drowsy from the midday nap we all enjoyed, but smiled as we all gathered around the picnic table with our plates. \n\nWe talked and chatted about the weather, the heat. We discussed new topics like music and movies. We had many similar tastes but each of us shared something unique. I was looking forward to exploring all of our interests and learning more about each of my lovers.\n\nI wondered if this was how normal relationships worked, since it had been so long since I'd had a relationship. I started to remember how it was before I decided to forego relationships. How I would become enraptured by a girl, having an intense physical relationship, then things would settle down, and we'd find we didn't have much in common. Then the rifts would start. \n\nI considered that I'd matured. I enjoyed the differences between each of my lovers. They didn't have to be like me, we could love each other and have different tastes in music, movies, books. I also appreciated how each of them had their own sexuality. I wanted to delve into each of their individual kinks and turn ons. They all turned me on in different ways, I wanted to spend time with each of them.\n\nRhi, Tess and Essie started clearing the plates, and I was left alone with Gina and Katie. I pulled off my tee shirt, then winked at them and slid into the pool. The heat of the day was stifling, and the cool water refreshing. I looked up at Gina and Katie, and they shared a look, then stripped and dropped into the water completely naked.\n\nI grinned, as they both surrounded me. Katie kissed me hungrily, while Gina was pushing my trunks down. I slid my hands under Katie's arms combing my fingers through her soaked blonde hair. I lifted my knees to help Gina pull my shorts off, and watched them arc through the air to land on the concrete deck.\n\nGina pressed her enlarged breasts into my back and hugged me tight. She managed to gain traction and walked me and Katie back into the shallower water. Katie was stroking my cock, her eyes locked on mine.\n\n\"I dreamed of your cock during my nap,\" Katie said.\n\n\"Oh?\" I asked, \"What did you dream of doing?\"\n\n\"Go sit on the steps,\" she grinned, \"I'll show you.\"\n\nI managed to stand, and walk through the thigh deep water to the three steps at the end of the pool. Then Gina pulled me down, and knelt with Katie. Katie gripped my cock and tapped the head on her tongue then sucked on the head. Gina watched, then slid her mouth up and down the side of my shaft, her green eyes watching mine.\n\n\"Two lovely cock hungry whores,\" I growled and rested my elbows on the edge of the pool watching them.\n\nKatie sucked on the head and her hand stroked my shaft. Gina dropped lower and sucked on my balls, her tongue swishing around them. I groaned at the feeling, then felt more naked female flesh surround me. The shadow of the veranda covered us and we all were collected near the edge of the house. The view of the river was limited here, an outcropping of rocks obscuring the view.\n\nTess kissed me, while I helped her peel her bottoms off. Rhi leaned and kissed under my jaw, and I lowered down onto my back. I shifted my bottom up to the pool edge, and Katie and Gina crawled forward intent on sharing my cock. Essie was standing against the side of the house, and peeled her swimsuit off. I stared at her as Tess and Rhi were kissing each other, then kissing my chest. \n\nI smiled at Essie, and licked my lips. She took the cue and stood over my head, then lowered her bare pussy down. I lifted my hands to her thighs, and pulled her down, my lips pressing into her, and cleaving between her labia. I heard her groan as I feasted on her flesh, enjoying the flavor of her arousal. \n\nI felt Rhi rise up from my chest, her breasts slipped over my flesh. I moved my hand and found her ass, squeezing it. Essie's moans quieted and I felt her twist towards Rhi. I tuned into their thoughts like dialing in a radio signal, and felt Essie and Rhi's passionate kiss. I marveled at the feeling then tuned into Essie's lust at the feel of my tongue and lips on her sex.\n\nI shifted my attention, being able to tune into each of my lovers and feel what they were feeling. At the same time I was actively seeking their touches. My hips were lifting into Katie's mouth. My fingers had roamed and found Tess' and Rhi's cunts, pressing inside. I sensed Gina lifting up, then settling onto my cock as Katie pressed me inside. I felt myself through Katie's fingers as she stroked my cock, then slid over Gina's clit.\n\nThe echoes of everyone's feelings, thoughts and emotions resonated through our bodies as we writhed. Essie hit a climax as I lapped at her clit. She shifted and laid on the patio, pulling Rhi's hips over her face. I rose slightly and pulled Gina up to kiss her. I wrapped my arms around her back and cycled into her until she tripped into an orgasm. \n\nGina rolled to the side and enjoyed a kiss with Katie. I shifted around, and Tess rolled onto her back, her legs spread. The look in her eye urged me to take her. Rhi watched as I drove my cock into her sister, then kissed Tess deeply. Parting from the kiss, Tess twisted and lapped at Essie's slick folds. Rhi had closed her eyes, grinding into Essie's tongue.\n\nI kissed Rhi deeply, as I fucked Tess. She moaned into my mouth, heatedly.\n\n\"Please, Master,\" she begged, \"Please may your slut cum on Essie's mouth, please.\"\n\n\"Cum for me,\" I growled, recalling that I had control of when Rhi could orgasm.\n\nI watched the look of bliss on her face as her hips seized. I looked down and saw her cunt spray her juices over Essie's hungry lips. I growled and lowered my mouth to one of Tess' breasts, sucking the nipple hard. Tess responded by pulling from Essie's cunt and arching her back, pressing her breast into my hungry mouth. Rhi dropped her mouth to Essie's cunt as I focused on Tess. \n\nI pulled from her hard nipple, then stared into Tess' dark violet eyes. She was on the edge, and I pounded into her, until her eyes rolled back and her thighs clamped against my side. I stroked into her a few more times then pressed up. \n\nI turned to the side and saw Katie aligned along the top step on her side, her top leg lifted resting on the edge of the pool. She was playing with her clit, then spread her labia apart. I knelt astride her thigh, and drove my cock into her open cunt. She tossed her head as I filled her cunt. I gripped her breast and fired into her, as her light blue eyes locked onto mine. Gina was sucking on one of Katie's nipples. Gina reached and slapped my ass.\n\n\"Fuck her,\" Gina said, \"Make her cum, fucking slam it into Katie-slut\"\n\nKatie was suddenly on edge, and I tuned into her senses. I felt her tip off into bliss, then like a reflection, felt her body tremble, and her cunt tighten around my cock. I hadn't cum yet, although my cock was rock hard and throbbing. As I pulled out of Katie's clenching cunt, Gina pulled my cock to her mouth and sucked it hungrily.\n\nI pulled Gina across Katie's body on the step, then drove into her from behind. I hammered into her hard, knowing she liked me to take her like this. She tossed her head and stared at me over her shoulder, her mouth open and moaning with each stroke.\n\n\"My good little whore, cum hard for me,\" I growled watching her.",
        "She bucked hard onto my cock, I continued to stroke into her. My gaze past her and I saw Essie leaning against the wall, watching me. I pulled out of Gina then stepped over Katie and strode towards Essie.\n\nEssie stood and pressed herself against me, and we kissed. Then I twisted her around against the side of the house. My hand gripped her dark tresses and pressed her cheek against the painted wood siding. \n\n\"Oh fuck yes,\" Essie growled pressing her hips back, \"Fuck me Papi, fuck your bitch.\"\n\nI rammed my cock into her, gripping her tightly. I rutted into her tight cunt, repeatedly as my eyes locked on hers. My hand dropped to her neck and held her against the siding as I fucked her hard. I felt Rhi press herself against my back, kissing behind my ear. \n\n\"Make her cum,\" Rhi chanted in my ear, \"Then take your slave, Please, I need you to fuck me hard.\"\n\nI closed my eyes and nodded. Then reached into Essie's mind with my thoughts and pressed her into a climax. Essie's eyes widened then she was shuddering as she came hard, I felt her juices spray my balls and thighs. I pressed back and Essie slid to her knees, then rolled to her side. \n\nI twisted around, then spun Rhi against the wall. Her breasts rose as she breathed and curled one thigh around my waist. I gripped my cock, and pressed it inside her, thrusting hard. Rhi's dazzling blue eyes locked on mine. I pressed a hand to one of her breasts. Pressing her against the wall, as my hips drove into her.\n\n\"Cum with me, slave,\" I said, entranced by her, my senses collapsing to a bubble of just her and me.\n\nThen I was slamming deep into her and felt her clamp around me. My cock pulsed jetting a full load of thick cream into her womb. She shuddered and ran her hands along my jaw. I kissed her deeply, hungrily, then slowly stilled and rested on her, pressing her against the side of the house. \n\nI caught my breath, feeling the transmitted bliss of my lovers. I drew back and collected Rhi in my arms, carried her inside, and lowered onto the sofa, pulling her against my chest. I watched as Essie slid next to me and leaned to kiss me. The three of us curled together. I watched the other three walk into Tess' room, leaving the door open as they disappeared inside.\n\nThen my eyes started getting heavy. The steady breathing of Rhi on one side and Essie on the other hypnotised me. There was something I needed to remember, but it was too fuzzy. All I wanted was to rest with my lovers, and I allowed my eyes to close. I slipped into a dreamless sleep.\n\n******\n\nSuddenly I felt a shove, and a growled, \"Hey,\" \n\nI was shoved off the sofa, disoriented. I blinked and looked up into Rhi's wild eyes. She was naked, and so was I.\n\n\"You need to wake the fuck up,\" Rhi growled, her blue eyes flaring in anger.\n\n\"How did you even get inside this house, Josh?\" She continued as I looked at her gobsmacked.\n\nRhi realized she was naked and crossed her arm over her breasts a hand dropping to cover her sex. I shifted to a sitting position and covered my cock. \n\nDidn't we just get done fucking?\n\n\"And, who the hell are you?\" Rhi continued, looking at Essie as her panic grew, \"how did either of you get inside my sister's house?\"\n\nEssie curled back into the arm of the sofa confused, looking around and not recognizing anything. She also realized she was naked. She looked at me, and shrank back in horror.\n\nMy mind caught up, and remembered where things ended. It was still afternoon, but the long shadow of the veranda told me nightfall was approaching. I closed my eyes, and set my jaw.\n\nThe network had gone down. No one had memories of the last week. No one but me, and I couldn't tell them anything. I had to be careful now.\n\nI stood up slowly and held out my hand, \"Listen, I'll go, I just need to get some clothes and my things.\"\n\n\"You have until I come back inside with my sister,\" Rhi said her voice trembling, her eyes a mix of confusion and fear, looking at me, then at Essie, \"both of you... then we're calling the cops.\"\n\n\"I'm a cop,\" Essie said, then looked at me, \"Right?\" \n\nI thought for a moment, then I nodded, \"Yeah, well, it's complicated.\" \n\nRhi tossed her hands in the air and walked out to the patio. I looked back at Essie.\n\n\"Okay listen to me, you have to trust me.\" I said, \"Go upstairs. Your clothes and things are at the end of the hall to the left at the top of the stairs, the bedroom on the right. Get dressed and come back down Just \u2014 trust me. And hurry.\"\n\nShe looked at me for a moment, making a decision then nodded. She moved up the stairs in her birthday suit. I followed, moving quickly to the room I shared with Rhi, and quickly changed into a pair of jeans and a plain white tee shirt. I pulled on a pair of loafers. \n\nI hurried back downstairs to the office I was using, and collected my computer and my cubes. I grabbed my phone and was walking back to the front door, just as Tess stormed through the patio door. \n\n\"Listen asshole,\" Tess growled, \"You need to get the hell out of my house, before I call the police.\"\n\n\"I'm leaving,\" I said, \"I'm just waiting for...\"\n\nEssie hurried down the stairs. Wearing jeans, a white tee shirt, and her leather jacket and boots. \n\n\"Her...\" I continued, \"Sorry, I'm sorry for the disturbance\"\n\nI held the door open for Essie then backed out looking at Tess' angry eyes. Tess stepped forward then slammed the door. The sound echoed in my psyche.\n\nNext thing I knew, Essie slammed me against the side of the house and her dark eyes flared with fear and anger. \n\n\"What the fuck is going on!\" She growled. \n\n\"I can't tell you,\" I said, trying to remain calm, \"I wish I could, but it would mess things up more.\"\n\nI locked eyes with her and she stared at me \u2014 fire in her eyes. \n\n\"I can take you to your bike,\" I offered, \"it's not here, but I know where it is.\"\n\n\"How the fuck do you even know I have a bike??\" She growled. \n\n\"You'll have to trust me,\" I offered, \"your stuff was where I said it was, wasn't it?\"\n\nHer eyes locked on mine then seemed to soften. She shoved me then let go of me and backed off. \n\n\"My car is just over there, the blue SUV,\" I double tapped the key fob and the doors unlocked and the brake lights flashed. \n\nShe glared at me as we walked to the car, \"Why is all my stuff inside that lady's house? \u2014 Don't say it ... you can't tell me.\"\n\n\"I'm sorry,\" I said, tossing my laptop bag in the backseat along with my collection of now useless cubes. \n\nI got on the driver's side and Essie climbed into the passenger's side. I started the car then pulled through the driveway, and headed towards the highway. Essie kept looking at me, looking ahead, and then back at me. \n\n\"What's your name?\" She asked. \n\n\"Josh,\" I said, \"Josh Valentine.\"\n\n\"Valentine,\" she said thoughtfully, \"I know you... I pulled you over on Sunday. Expired tags.\"\n\n\"Guilty,\" I said, \"I fixed it already,\"\n\nI pointed to my new sticker. She nodded absently. She looked at me oddly then crossed her arms and leaned against the door. \n\n\"Can you tell me if I've ridden in your car before?\" She asked. \n\nI shrugged, and she gave me a half smile. \n\n\"So I have then,\" she deduced, \"More than once probably\"\n\nI tried to keep my expression neutral. Essie was too smart. She could put together puzzles. What if she did, would that affect the assimilation process? I stared straight ahead.\n\n\"I'm going to trust you, Josh,\" she decided, \"I'm a bit freaked out right now, but you're calm. You can't say what's going on, for whatever reason, but you know. I think I'll trust you.\"\n\nI chanced a smile at her, and she returned a guarded smile. \n\n\"You should trust me,\" I said, \"That's the smart play. I promise you, I have your best interest in mind. I have your back.\"\n\n\"So our interests are entwined,\" Essie said and relaxed a bit into the front seat. \n\n\"Did you get your phone?\" I asked. \n\n\"Yeah,\" she said, pulling it out. \n\n\"Is my name in it?\" I asked.\n\n\"Lemme look,\" she said, unlocking the phone and going to her past calls, \"Yeah, we've been kinda chatty. I've talked to few people beside you for the past week.\"\n\nI shrugged and she grinned a bit broader. \n\n\"If you find yourself someplace where you don't know what to do, or where to go,\" I said, \"call me, okay. I promise I'll help.\"\n\nShe nodded quietly. Then got lost in her thoughts. \n\nI looked at the clock in the dash. It was 6:30PM. It was a little comforting that things were going roughly as Bala described things. I wasn't thrilled, but that enabled me to have some hope. There was a little over an hour until sunset.\n\n\"Shit!\" I said aloud, remembering the new node was going to be delivered to Tess' house in the morning. \n\n\"What?\" Essie asked.\n\n\"Nothing,\" I said, \"Never mind.\"\n\n\"You're a strange egg, Josh Valentine,\" she grinned, shaking her head.\n\n\"You have no idea, Ester Mendez.\" I replied. \n\n\"So you do know my name,\" Essie grinned. \n\nShe was too smart for her own good. \n\nWe pulled into my apartment around seven, and she got out. She headed towards her bike and unlocked her saddle bags to pull out her helmet. She looked at me carefully.\n\nIt killed me that I couldn't tell her about her grandfather. She would have to find that out herself. I couldn't even tell her his remains were still in the back of my car with boxes of wilted flowers. She'd have to discover it on her own. I had a feeling she'd be back before it got dark. Probably mad as hell.\n\nI grabbed my computer bag and walked tiredly up the steps to my apartment. I heard her horn beep, and turned to watch her roll off, headed south. I opened my apartment, feeling little comfort that it was the same as it was a week ago. My bed in its place, my office down the hall exactly the same as a week ago. The only difference was that it was neat and clean. \n\nThe apartment next door was empty. I'd get no visit from Gina to play a game tomorrow morning. No smile and a wave to Rhi, when Gina left to go home. I sighed and unpacked my laptop and settled into my chair in my office. \n\nI looked over and saw Essie's gun safe, the only real difference from a week ago. It wasn't large, but it was heavy. I got back up and unlocked it, looking at the collection of handguns neatly stowed. I looked at the space where my spare cube was kept, before I reset it and cleared its memory. I thought of James, and Jasmine. I thought I should visit when everything returned to normal. If normal was even a thing anymore.\n\nI closed the safe and spun the lock. Then sat and pulled out my laptop. I plugged in the power supply, then opened up the lid and started the laptop. I realized I'd need to get a new one, soon. This one was the property of my old company, I'd need to return it.\n\nI logged into the laptop, and opened up my email application. A few new emails scrolled down the screen. One from my boss Brent told me he'd give me a week's time to use the computer before he locked me out. Then a series from a collection of NCNHQ addresses, with instructions for starting my onboarding process, A tracking number for a new laptop they were sending me, and a note from Bala.\n\n\u2014\u2014\u2014\u2014-\n\nFrom: bala@ncnhq.com</br>Sent:6:11PM CDT Friday.</br>Josh,</br>\n\nI hope you are okay, after the termination of the beta network. I'm sure you've experienced some very strange side effects from the loss of the beta network. I'm disappointed we weren't able to extend the deadlines. Management had to pull the plug, several of the nodes were getting out of control, to the point that it would reflect poorly to our shareholders. Some of the abandoned assistants will require some clean up, after the second network is up. You'll be vital to this effort, I'll be able to tell you more Monday.\n\nYour current assistants will be confused, remember they cannot access their memories created during the last week. You cannot tell them explicitly about anything. They will probably try to work through the events, or the consequences. This will create new memories outside of their experiences as your assistant. We think that is inevitable, and benign. So long as they cannot access existing memories, new memories within their cognition won't affect their beta neural matrix.\n\nYou cannot directly tell them about events that occurred after they were connected to your network. This is important. \n\nRemember, after you initialize your v2.0 Neural Control Node, you will need to have each of your units complete the reassimilation process. All of them. Mild to severe psychological side effects are possible without a reconnection. Here is a link to the new node's introduction video. Please review prior to tomorrow. Follow the assimilation instructions completely for each of your existing assistants.\n\n\u2014\u2014\u2014\u2014-\n\nSevere psychological side effects? What did that mean? \n\nIt didn't matter, as soon as I had my new node, I would be able to fix it. Wouldn't I? One at a time, I'd have to get them reconnected. I didn't know how exactly, but I would ensure it happened.\n\nI clicked on the link and a video started. It was obviously a rough draft video, not nearly as well produced as most of their product videos. The new node was more phone shaped, but thicker. It looked a lot like the monolith in 2001: A Space Odyssey. That black rectangle was a precise ratio of square numbers. This looked similar, I estimated 1cm thick, 4cm wide and 9cm tall. The black matte finish mimicked the original cubes. The video was obviously doctored, since I'd proven only cube masters could see the visual display of the cube. \n\nWhen activated, the top face had icons for each Neurally Enhanced Assistant, a total of 16 squares were reserved for assistants four rows of four columns. I couldn't imagine having that many assistants. The other 12 squares on the face were for system settings, relationship options, application store, diagnostics, help and other mundane things. An embedded help system and an application store would be helpful.\n\nRelationship options, looked like a replacement for the FuckMe app. It made sense to incorporate many of the features of FuckMe into the core logic. At least it made sense to me, and how I used the cube. It was certainly a better name, if this was going to a larger market it needed to be a lot more tame. I didn't think I was alone in using that app to influence an assistant's relationship to myself and other assistants. I also realized that not all relationships had to be sexual. \n\nI was just a horn dog.\n\nThe video continued on with a look at the new assimilation features. For new assistants the node had to be put into a special mode by the original owner, password protected. Then the new assistant would have to touch the cube, which would initiate the neural cognitive link between the subject and the node. After the physical-neural link was established, the subject was required to physically touch a visual pop-up button to record their consent. A copy of their fingerprint would be recorded. They also had to state verbally, \"I consent\" to record their voiceprint after another visual prompt. Only after those three things were completed would they be added to the Neural Control Node as an Neurally Enhanced Assistant.\n\nThe video also showed how to reconnect existing assistants, by touching their icon on the home screen. A similar process would be initiated for the assistant to complete the reassimilation process. \n\nThere was also a disconnection protocol, to safely remove a Neurally Enhanced Assistant from the Neural Control Node, and be removed from the owners account. \n\nAll of those features settled some of my unanswered questions. The assimilation process was pretty rigorous, but should eliminate accidental or malicious assimilations. The ability to remove an assistant was also a good feature. \n\nThe last feature discussed was a node owner was limited to only one node, and the available 16 slots. That too made sense. I didn't want to accumulate scads of cubes and start a Neurally Enhanced Assistant army. \n\nI just wanted my family back.\n\nMy phone buzzed in my pocket, and I pulled it out. It was Essie, and I answered immediately.\n\n\"Hello.\" I said, then braced myself.\n\n\"Josh,\" she said, her voice trembled, she'd been crying. \"Why didn't you tell me my Abuelo is gone? None of my stuff is here, my guns, my clothes. Everything is gone.\"\n\n\"Come home Essie,\" I said softly.\n\n\"No! I want you to tell me WHY, JOSH!\" she growled, her volume rising, \"WHY!!\" She screamed into the phone.\n\n\"I can't Essie,\" I said, after she quieted, \"It's killing me, but I can't. Just come home.\"\n\n\"You're an asshole,\" she said, still angry, but quieter, \"Why do you have to be an asshole?\"\n\n\"Come home Essie,\" I asked again, feeling tears falling down my cheeks. \"Please.\"\n\n\"I do appreciate good manners,\" she said automatically, and after a long pause hung up.\n\nI smiled, hearing the manners tic. That wasn't something I expected, but at least it showed she was still - mine? It was an impossibility, and maybe foolish hope, but I smiled. \n\nI remembered what was in the back of my SUV, and walked down to carry up the boxes she got from her office yesterday. I took out all of the wilted flowers, and placed them on the table. The metal box with her grandfather's remains in the center. I tried to spruce up the flowers with a bit of water. It helped, but only by a fraction. I also brought up her portable gun safe, she had stored in my trunk, and placed it beside the table.\n\nThen I went and leaned against the rail, and watched for Essie to arrive. Dusk was past and the sky was quickly darkening. I wondered how Rhi, Gina, Tess and Katie were doing. Was it still chaos? Would Tess even remember that she'd invited them to move in with them? Would Rhi and Tess remember their rekindled feelings for each other? I hoped Gina wouldn't sink into the depression she had hidden from me while she was my gaming pal.\n\nI heard Essie's motorcycle before I saw the headlamp. She pulled into the parking lot next to my SUV. Then got off and took off her helmet, and tossed her hair, then looked up at me. I held up my hand and waved. She nodded back at me, then stowed her helmet in her saddlebags and headed up the stairs.\n\nWe met at the top of the stairs and she looked up at me. I opened my arms and she leaned against my chest and hugged me. I hugged her and stroked her back. She started to cry as I held her, soft tears growing into full sobs. I just held her and let her cry, rubbing her back.\n\n\"Shhh, Es,\" I said, \"Let it out, I'm here.\"\n\n\"Why do I want to call you babe or Papi?\" She asked quietly, then looked up at me.\n\nI shrugged helplessly. She closed her eyes, then lifted up on her toes, her hands sliding behind my head, and then kissed me softly. I kissed back lightly. \n\n\"When you shrug,\" she said, lowering back onto her heels, \"I can tell it's true. I'm trying to be patient, Josh.\"\n\nI dropped my arms, and held her hand. \n\n\"Come inside I want to show you something,\" I said.\n\nI opened the door, then led her to the sofa and showed her the collection of well wishes from her department and the box of her Abuelo's ashes. She sat down on the sofa, and looked at the box, then lifted it carefully. She hugged it to her chest. \n\nI sat beside her, unable to come up with words to say aloud. She leaned against me, and I hugged her as she looked at all of the dead flowers, cards and other things.\n\n\"From my department?\" She asked, \"You were there, weren't you?\n\nI shrugged.\n\n\"I called Mac,\" she said, \"He told me about the night my grandfather died. He said you were there. He said there was another girl there that got shot. He said I saved her life.\"\n\nShe pulled off her leather jacket and rolled up her sleeve. Then ran her finger over the slight pale scar from the bullet graze.\n\n\"I was shot too.\" She said, \"I'm surprised I didn't shoot the motherfucker.\"\n\nI looked at her silently, unable to say anything. There was so much I wanted to say. She needed to work through it. I was taking a risk by shrugging. I pinned my hope that her creating new memories based on her own deductions wouldn't impact her inaccessible memories.",
        "\"But it was you, wasn't it.\" She said, \"Somehow you kept me from my own rash revengeful actions.\"\n\nShe looked at me, and I shrugged. Her face brightened into a soft smile.\n\n\"You can't say anything, I know,\" She said, \"Thank you for letting me work through it.\n\n\"You're welcome, Es.\" I said, \"I'll always have your back.\"\n\n\"I believe that,\" she said, \"The other girl, she was ... that angry lady's daughter?\"\n\nI shrugged, unable to tell her their names. I felt trapped, empty, helpless. Everything I'd learned through Rhi's and my deepening relationship via the cube was to talk things through, be honest with my feelings, with my fears. Now I was back to being a vacant empty void, and I felt more uncomfortable than I'd ever felt before.\n\nEssie put the box down and started working through the cards and gifts. I got up and turned to go to my office.\n\n\"I'm going to give you some space,\" I said, \"I'll be in my office just down the hall.\"\n\n\"Okay, Papi, thank you,\" she said absently.\n\nI smiled at how comfortably she reverted to her nickname for me. I walked back to my office and worked with my old laptop. I started saving off files and moving them to my cloud accounts. Getting ready to change my main machine. It was easier with good high speed internet and cheap cloud storage, than external drives and backup disks. It was rote work, and didn't take a lot of thought. It was kind of like tidying up a house. You only kept the things that sparked something. If it didn't spark a memory or joy, throw it away.\n\nI sensed Essie's presence. She leaned against the door as I looked over my shoulder at her. She walked in and leaned over my shoulder and hugged me. I lifted my hand to hold one of her hands and squeezed it.\n\n\"I probably shouldn't ask why you have my gun safe, hm?\" She said.\n\n\"I couldn't tell you,\" I said with a shrug. \n\n\"You seem to be collecting a lot of my things,\" Essie mused, \"You knew where my room was, you took me back to my bike, had my grandfather's remains, both of my gun safes. It feels like we were close.\"\n\nI shrugged, as my fingers stroked soothingly over her fingers. She turned my chair, and then straddled my thighs, she looked into my eyes, then leaned into me. She kissed me and I kissed her back. It felt electric, almost like a first kiss. My hands wrapped around the small of her back. She tested my lips with her tongue, and I opened and accepted it and pressed mine against hers.\n\n\"Is this a booty call, Josh,\" she said with a small grin.\n\n\"Yes, yes it is,\" I replied.\n\nI was unable to stop myself from echoing our first phone call. I realized that she didn't remember it like I did. Our relationship seemed to echo in her absence of memories. Was that proof that we were fated to be together, to grow into lovers, with or without the cube? I marveled how on Sunday I'd hardly known her, by Friday she was, for the moment, my lifeline to everyone I loved. She was important to me.\n\n\"Will I ever remember what happened,\" she asked, keeping her arms around my neck.\n\n\"I hope so,\" I said, \"I pray that everything will be okay tomorrow.\"\n\nShe looked at me, and then kissed me again. I dropped my hands to her bottom and pulled her closer. She pressed her tongue between my lips again. Her fingers curling through my hair, leaning her breasts into my chest. I closed my eyes and held her, feeling my cock hardening as we kissed.\n\n\"Am I sleeping here tonight?\" She asked.\n\n\"Yeah,\" I nodded, \"You can sleep on my bed, I'll crash on the sofa.\"\n\nShe shook her head, and stood up. She held out her hand and I took it. She pulled me up and led me out of my office, turning off the light. Then she turned into my bedroom, pulling me and closing the door.\n\nI looked at her and she crossed her arms, grabbed the bottom of her white tee-shirt and pulled it up and over her head. Her black bra was next to go, and she shrugged out of the cups revealing her full breasts.\n\n\"Don't leave me hanging, Josh,\" she said, \"I want to see you too.\"\n\nI smiled and pulled off my top. The adjustments that Rhi had helped me with gave my abdomen definition, and she smiled admiring my physique.\n\n\"Very nice for a tech nerd,\" she said, I rolled my eyes.\n\nShe kicked off her boots, as she started unbuttoning her jeans. I pulled off my belt, and pushed my jeans down. We looked at each other in just our underwear. Her eyes drifted down to my cock, outlined as it had lengthened down my thigh. Her black boyshorts hugged her hips and I smiled at her.\n\n\"Rock, paper, scissors?\" I asked, trying to determine who would strip completely first.\n\nEssie stuck out her tongue with a grin, and pushed her panties down. I pushed down my shorts. Her eyes widened as my cock bounced free. I licked my lips seeing her bare pussy. My eyes flared and I nodded towards the bed. She nodded and I pulled back the covers, and she slid into the sheets. I slid beside her and then kissed her deeply. She rolled onto her back and I rolled over her.\n\nI kissed down her neck, my hand lifting to her full breast. Her hands ran over my chest, and then down my abdomen. I sucked on a nipple and she arched into my mouth with a soft moan of encouragement. Her fingers traced along the shaft of my cock, stroked up to my crown.\n\n\"Fuck,\" she said, \"You're huge, and thick.\"\n\n\"You're right,\" I smiled at her then swirled my tongue over her rock hard nipple.\n\n\"Finally,\" she chuckled, \"Confirmation of something.\"\n\n\"Do I enjoy fucking you, Josh?\" She continued.\n\n\"You'll just have to find out for yourself,\" I said, and moved my knees between her thighs.\n\nShe spread her legs, and I shifted down. I kissed down her firm belly, my hands running over her caramel flesh. I kissed over her mound, and her fingers curled into my hair. I moved as she pressed me down, then licked between her lips. She groaned and lifted her hips.\n\nShe tasted so good, I was lost in licking her, tasting her, spreading her arousal between her lips and probing her opening. It felt familiar to me, I remembered our numerous romps from earlier in the week. To Essie, though, this was our first time. Her arousal felt different, her taste more delicate. I feasted on her, enjoying how her fingers gripped my head. Her moans encouraged me to stay and concentrate, or tease and shift to a new place.\n\n\"Josh,\" she said breathlessly, \"Please, I need you to fuck me. Please, put that beautiful cock inside me.\"\n\n\"Manners are important,\" I growled and shifted up onto my knees. \n\nI rubbed my cock between her lips and coated my head. I looked into Essie's deep brown eyes. She nodded at me, biting her top lip, her breasts rising and falling.\n\n\"Please, please plleeaasse, fuck me.\" she chanted.\n\nI drove my cock into her and she moaned out and lifted her hips to press herself into me. I pushed my hand down into her mound and held her against the mattress. She whined, but then moaned as I took control and thrust firmly into her. I leaned over her and gripped one of her breasts, pressing her down under me. \n\nHer hands gripped my hips, pulling me into her. I hammered into her, our eyes locked. I felt her lust and need, and fed it with my persistent thrusts. She moaned, her eyes fluttered back, then fixed on mine.\n\n\"Fuck me Papi, fuck me hard, make me your bitch.\" she growled.\n\nI pulled out and gripped her hip, \"Turn over mi ni\u00f1a, show me your round ass.\"\n\nShe flipped over eagerly, lifting her ass up into the air. I slapped a firm cheek, then the other. She purred, rotating her ass as my hand reddened her flesh. She kept gyrating, her eyes locked on mine over her shoulder. I notched my cock between her lips then slammed in deep. \n\nShe groaned and stretched her hands out above her head, pressing her palms against the headboard. I hammered into her, feeling her body shift forward. I leaned and gripped a handful of hair, twisting her head to the side and holding her cheek to my sheets. I leaned close, as my hips continued their onslaught growling in her ear.\n\n\"Fuck Papi,\" she moaned, \"fuckyouregonmakmecuuuuuum\"\n\nShe shook as her thighs trembled. Her cunt contracted and flooded my cock with her juices. I continued to slam into her, my free hand holding her neck down, my other gripped tight in her black mane. \n\n\"Your mine,\" I growled, \"my good little bitch, fuck oh fuck.\"\n\nShe tripped into another climax and drove me over the edge. I jammed my hips in and arched my back. My cock spraying my cum into her convulsing cunt. I tugged her head back and then leaned and kissed her fully. My hips trembled and I slumped forward pressing her into the sheets.\n\n\"Don't move,\" Essie said, \"Stay right there, please Papi. I need to feel you on me.\"\n\nI nodded and kissed her, she kissed me back. Our tongues tangled as we caught our breath. Slowly she shifted and I rolled to the side, my cock slipping from her cunt. She twisted and then sucked my head, her cheeks hollowing as she licked my slit. I trembled at the sensitivity. She cleaned my cock then twisted to show me her empty mouth, before kissing me.\n\n\"Damn,\" she said, \"We fuck like that a lot?\"\n\nI shrugged and she grinned. \n\n\"Can we do it again?\" She asked.\n\n\"Already?\" I asked incredulously.\n\n\"I don't remember the last time I was so thoroughly fucked,\" she confessed.\n\nI didn't want to tell her the truth and say, \"about four hours ago,\" so I shrugged.\n\n\"Get the fuck out,\" she said, then kissed me and kissed down my chest. Then she was hungrily sucking my head and stroking my cock.\n\n\"Fucking insatiable fuck toy,\" I growled.\n\n\"Mmmhmm,\" she said, vibrating my cock in her mouth.\n\nI wasn't sure if my shortened refractory period would still work, but Essie's desire didn't know anything about that. Her mouth sucked and fingers stroked. I groaned as I stiffened in her mouth. Her eyes gleamed as she looked up at me and pulled her mouth off my reinvigorated cock. \n\n\"I love the taste and feel of your cock in my mouth,\" she said. \n\n\"You're my dirty little cock sucking whore,\" I growled as my fingers gripped a handful of her hair and pulled her mouth back down. \n\nShe nodded and opened her mouth, shifting her body between my spread legs. She opened her mouth and sucked in the head of my cock with a moan. She looked up at me, as she shifted her chin up and drove herself onto my cock. She grunted and swallowed and I felt my head drive into her throat. \n\nHer eyes gleamed as she deep throated my cock. Working her head down until her nose pressed into my pubic hair. She exhaled and her spit bubbles around the base of my cock. She pulled back with a wicked grin and stroked my cock. \n\n\"You like your cocksucking fuck toy deep throating you,\" she said, \"don't you Papi.\"\n\nI had to force myself to shrug which made her grin. She bobbed on my cock again taking me deep and holding her head down, swallowing to make her throat milk my cock. I tossed my head back and moaned lying flat on my back. \n\nShe pulled off and stroked me again, as she crawled up and straddle my hips, pressing the tip of my cock between her engorged slick labia. \n\n\"Your cocksucking whore is going to ride your fuckstick Papi,\" she said and moaned as she sunk her cunt down my rock hard shaft. \n\n\"Please,\" I managed to croak out. \n\n\"Manners,\" she stated then closed her eyes and moaned, \"fuck you feel so good.\"\n\nI lifted my hands and gripped her full breasts. Essie arched into my hands, her eyes locked on mine. Her hips rose and fell as she fucked me with controlled strokes. I kneaded her breasts, milking my fingers to her nipples then pinching firmly. \n\nEssie leaned forward and kissed me deeply, her hips cycling up and down, gaining momentum. I dropped my hand to her ass, gripping and helping her move along my cock. I moaned breathlessly. My eyes searching her brown pools, her eyelids half closed in lust. \n\nWordlessly we fucked, my hips lifting to meet her downstrokes. I wrapped my arms around the small of her back and pulled her tight to my waist. She grunted as I took over and cycled my hips driving my cock into her faster and deeper. \n\n\"ooohffffuck,\" she panted, \"yourgunnamakeme CUMMAIIEE\"\n\nEssie screamed as my cock overpowered her. Her cunt clamping in pulses around my invading cock. Her head tossed back then fell forward, our faces trapped in the veil of her dark hair, eyes locked as I tirelessly drove into her. She shuddered then kissed me, her lips open as she moaned through another peak. \n\nI watched her eyes and then my eyes closed as I hit my climax and drove into her. My hips flexed and jerked as my cock billowed fresh cream into her contracting cunt. She sealed her mouth to mine our bodies frozen, linked together as we shivered in ecstasy. \n\nEssie slumped against me, and my hands ran up and down her back. We parted the feverish kiss and drew in breaths, slowly calming as our bodies pressed together. \n\nEssie rested her cheek on my chest, listening to my heart as it slowed. I watched her eyes, my fingers combing her mass of black tresses away from her content face. \n\nI lost track of how long we stayed like that. My cock still hard inside of her. She tightened her core and I groaned at the feel of her walls squeezing me. I tightened my grip around her waist then lifted my hips and rolled. \n\nEssie fell onto her back, and looked up at me. Her brown eyes looking back at forth at my eyes in wonder. I slowly began to fuck her again. Her legs wrapped around my hips, her feet crossing behind the small of my back. \n\nWe made love this last time, unhurried and focused. Confusion and questions vanished as our bodies assured each of us our connection was real, and mutually desired. We kissed often as our arousal grew. Words weren't needed. \n\nI rutted into her, my fingers gripped tightly in her hair. Our eyes locked together as our breathing disintegrated into pants, moans and groans. We peaked simultaneously, watching each other, looking into our souls. I rested on top of her as we slowed. \n\nWe kissed again, as I pulled out and shifted to the side of her. I pulled her against me, her back to my chest. She lifted her hand and ran it along my flank. I pulled the mess of sheets and blankets over us and kissed behind her ear. \n\nWe fell wordlessly into unconsciousness, entangled. My arms keeping her close. Sometimes I squeezed her frantically as I startled awake lost in a dream. Essie would reach back and stroke her fingers through my hair and quietly soothe me until I returned to sleep. \n\nEventually I sunk into slumber - a deep restful sleep. The worst Friday ever was over. A new day approached, just past my dreams.\n\nAuthor's Note\n\nThank you for reading, I hope you enjoyed this chapter. I appreciate you feedback, comments, favorites and ratings. \n\nEditing props go out to Pope1944,  Shapachan and DJS_Ronin. Any additional mistakes or errors are entirely my fault.\n\nThis marks the end of a week under the influence of the Neural Control Node, what will the next week bring? Will the family ever get back together? Can Bala even be trusted?\n\n"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "bisexuality",
        "female submission",
        "group sex",
        "male dominance",
        "mind control",
        "group"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/basics-neural-control-node-ch-07"
}
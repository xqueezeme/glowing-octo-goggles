{
    "title": "Lovely Dreamer",
    "pages": [
        "This story is a little long, but I'm posting it in one piece! Like most of my work, it's a slow burn, but the bang is worth the buildup :) It is a little different from my usual work, and contains some elements of nonconsent/reluctance, as well as some supernatural characters. Since I am a proper, respectable millennial, this story was inspired by a few memes. Leave me a comment if you figure out which ones they are!\n\nChapter 1\n\nIt took me almost six months to realize there was a monster living in my house. \n\nIt was a fairly cheap house. Kind of a grungy area of town, two-bedroom, one bath, with a shower so small you couldn't turn around without your elbows knocking into the walls. There was a small kitchen with too many cabinets and not enough counter space, a living room with no window, and an attic so small that you had to just shove boxes up into it because you couldn't actually climb all the way up into it. No front yard, a sorry excuse of a strip of grass for the backyard, no garage, and no air conditioning. But it was in one piece, and it was fairly inexpensive to rent, and I had college debt, so I paid my six hundred bucks a month, signed a two-year lease, and promised the landlord that I wouldn't have any parties. \n\nMy landlord was a curious character. She was a tall, willowy woman with blonde ringlets that seemed to literally glow, even when it wasn't bright outside. Her sky-blue eyes were in sharp contrast to the deep redness of her lips. They were youthful in contrast to the wrinkles and creases in her skin, and her expression was perpetually guarded and suspicious. But she'd seemed to believe my insistence that I lived a quiet life. \n\nShe had some odd stipulations, though. \n\n\"You must not dig up the herbs,\" she pointed a crooked finger at the flower boxes outside the kitchen window. \"They'll keep growing and stay healthy as long as you water them. If they start to wilt, you call me.\" She raised an eyebrow and gave me a stink-eye. \n\n\"Got it,\" I nodded. \"Leave the herbs.\" \n\n\"You must leave this cabinet empty, and locked at all times!\" she continued, pointing to a small cabinet at the far end of the kitchen. It was in a very strange location anyway; right over the fridge, where I'd have to climb up onto the counter in order to reach. Not very convenient for me, considering I was five-foot-one. Even a chair wouldn't get me high enough to reach it. \n\n\"No problem.\"\n\n\"And, this is very important.\" She caught my elbow with strong bony fingers and dragged me to the back of the house, opening the back door to where the trash can sat chained to the metal fence. \n\nShe pointed up at the tree growing at the edge of the property. It looked old, twisted, slightly rotted, and bent out of shape. For the trunk looking so beat up, the branches were surprisingly full, though they were gnarly and twisted. Not a single leaf, acorn, or flower sat on the tree. It looked like it was ready to fall over. \n\n\"Don't ever do anything to that tree. Don't trim it, don't climb it, don't hang a rope from it.\" She turned and looked me in the eye, glaring down at me with conviction. \"It is very important.\"\n\n\"I promise,\" I smiled, trying to look confident. \"I won't do anything to it. Uh... what if there is a storm, and a branch falls?\"\n\n\"It won't.\"\n\nShe turned and bustled back through the tiny house before I had a chance to argue with her. \n\nWell, it's her house. If that tree falls on it, it's on her, not me. \n\nThe next few months, I settled into my new city and my new job. I was fairly introverted and didn't make friends very well, so I found myself spending most of my downtime in my new little house. It was old, but in pretty good condition all things considered. Occasionally a leak would spring up during a rainstorm, or a floorboard would creak, but before I got a chance to report it to the old woman, the issue would be remedied, seemingly on it's own. \n\nThere were a few things that were a little... strange. \n\nThe first was the trash. I found that my trashcan took significantly longer to fill up than it ever had before, which was odd because I was eating a lot more takeout than I ever had. And I'm ashamed to admit, it took me a few months to notice it. \n\nOne day I lazily looked over from my spot on the couch and realized I'd thrown away half of an old pizza the night before, setting the box on top of the trash can because it didn't quite fit. But when I looked, the box had been crushed, folded over on itself, and shoved in the trash can. Upon inspection, the box was empty, and the two pieces of pizza I'd left in the box were gone. \n\nI wrote it off as having been too tired to remember eating them. But then a few weeks later, I had some chicken go bad, and I wrapped it in plastic and threw it away, promising myself I'd take it out the next day, because there was a horrible thunderstorm outside and I didn't want to get wet. I'd ordered some wings and french fries instead, and the restaurant had misread my order and gave me way too much food. I'd thrown half of it away because, let's be honest, nobody likes day-old french fries. \n\nThe next afternoon, at work, I remembered that I'd never taken my stinky trash out, and knew my whole house would probably smell like rotten meat and greasy fries when I got home. But when I hurried into the kitchen with a plugged nose, I realized that the trash didn't stink. \n\nI opened the trash can. Inside, the bag of french fries I couldn't finish sat on the top. And it was empty. \n\nMaybe they fell out and ended up down in the bottom of the can, I thought. I moved the bag aside. \n\nThe plastic bag that I'd used to tie up the stinky chicken was gone. \n\nSomeone is stealing my trash. My nasty, rotten, stinky trash. \n\nHomeless guy? I wondered. Animal? Unlikely. And why? Why would someone steal old, half-eaten, rotten food? It was just very strange, and I didn't have an answer. \n\nThen there were the herbs outside. \n\nI didn't cook that often, because I was tired all the time, and I kind of sucked at cooking. But my mother always told me that every man and woman alike needed to know how to roast a chicken. So sometimes on Sunday afternoons I would pick some fresh rosemary, and thyme, and sage and roast a chicken, saving the carcass and bones for soup as one was supposed to do (although I usually ended up throwing it away after a few weeks in the freezer because, honestly, I wasn't a huge fan of soup).\n\nAnd every time when I went out to pick the herbs, I found they looked exactly the same. \n\nI'd pluck from the same place every time; the rosemary a stem on the left, the thyme a few stems in the back, and the sage a few leaves from the right side. It took me a few months to realize that I never saw a single wilted stem or leaf, and that it all grew back exactly as it was, with little to no variation in the plant size or shape that I could tell. One day, instead of cutting a stem of rosemary, I just pulled some of the leaves off, leaving an empty stick behind. The next afternoon, the empty stick was nowhere to be found. \n\nThere were also some herbs I didn't recognize or know how to use. I was pretty sure one was catnip, because there was a family of glossy black cats that came by every once in a while and nibbled on them. They would run off when I saw them, but I never scared them away because I thought they were kind of cute. \n\nIt was five months after I moved in that the first huge rainstorm hit. I generally didn't mind thunderstorms, but this one was so loud that I couldn't ignore the rain, wind, and cracks of thunder. The wind was horrible, and it felt like the house was groaning. I was snuggled up in my bed with my most comfortable blankets pulled around me, a cup of tea, and my newest novel by Kitty Thomas. The power went out, and a few moments later, a leak sprung up in the ceiling of my bedroom. \n\nI sighed, went to the kitchen to get a bucket and one of my favorite scented candles, and returned to the location of the leak, but it was gone. \n\n\"What the hell is up with this house,\" I muttered. I set the bucket down where I thought the leak had been, hoping if it started again I wouldn't get flooded out. Then I lit my candle, placed it on my dresser next to my mirror, and snuggled back up in my blankets. \n\nTap-tap. Tap-tap. \n\nMy eyes left the page for only a moment, glancing up to the window. That big ugly tree outside had grown since I'd moved in, and one of the branches was tapping on the glass. I looked back at my page. \n\nTap-tap-tap. \n\nI looked back up at the window. That was weird, I thought. That didn't sound like a tree branch. That sounded intentional. Like someone knocking. \n\nTap-tap-tap. \n\nThe candle on my dresser flickered out. \n\nI was too warm and comfy to get up and light it again, so I just closed my book, set my alarm on my phone, and went to sleep. \n\nA few weeks after that, the really weird shit started. \n\n***\n\nI noticed more and more oddities happening after the night of the thunderstorm. I'd roasted another chicken and frozen the bones, telling myself this time I was absolutely going to make soup stock. When I went to dig the bones out of the freezer, they were gone. \n\nThen there were the footprints outside. As far as I could tell, they were from a very large dog. Maybe a German shepherd or a husky? Because those paw prints were big, and they had claws. I did also occasionally hear some howling outside. But none of the neighbors had dogs, so I wasn't sure where the footprints were coming from, and why they were in my yard. \n\nThen there was a creaking in the attic. Unfortunately I couldn't get up there, but I was pretty sure there were rats, or maybe raccoons. Maybe they were stealing my trash? \n\nBut then why would the trash be so nice and neat and folded up? \n\nThe last straw was my scented candles. \n\nI had a huge collection from when I'd been a teacher's assistant. Kids loved giving candles to their TAs as Christmas gifts, birthday gifts, new years gifts, end-of-year gifts, and pretty much every other event you can think of, so I had literal boxes of them. Luckily, I enjoyed them. Once the weather got cooler, I started lighting them in the evenings. But there must have been some air current in my room because sometimes, one would blow out randomly. I usually re-lit it, but it often blew out again quickly afterwards. After a few times, I'd give up. \n\nExcept one night, it was my birthday, and so I lit my favorite candle. It was a birthday-cake scent, and reminded me of my mom. I sat it on my dresser and lit it, and sighed as I felt the gentle heat warm my face. I closed my eyes, letting the delicate scent of vanilla and sugar fill the room. \n\nTap-tap-tap. \n\nI rolled my eyes and looked out the window. \"Damn tree,\" I muttered. I needed to call the landlord about that tree, because sometimes it tapped on the window all night and annoyed the crap out of me. \n\nI turned back to my candle right as I watched it blow out. A tiny wisp of smoke trailed up and danced in the air, dissipating a moment later. \n\nOpening the matchbox, I struck another match to relight the candle, but the match blew out before I even got it down to the candle. \n\n\"What on earth?\". I struck another match and lit the candle again, waiting. \n\nNothing. \n\n\"Okay. That's\u2014\"\n\nWhoosh. \n\nThat time, it was not just a soft gust of air. No. That sounded, and felt, like someone blowing it out intentionally. \n\n\"Okay, haunted house, it's my birthday and I want to light my candle!\" I said, laughing at the sheer stupidity of the fact that I was talking to my house. \n\nI heard something shift behind me, and warning bells went off in my head. The hairs on the back of my neck rose. Was there... someone... here? \n\nI looked straight ahead in the mirror, but saw nothing. Using my reflection to guide me and staring in the mirror the whole time, I took another match... struck it... lit the candle... and blew out the match and set it down. I stared in the mirror the whole time, waiting, daring my wacky house to blow it out one more time. \n\nA creak behind me. A low rumble... was that a growl? \n\nMy stomach twisted in fear, and I felt myself freeze. Something isn't right. This isn't just weird, this is... scary. I was barely breathing, feeling sweat roll down my back and pool under my breasts. My hands were sitting flat on the top of the dresser, but I felt myself grip and roll them into a fist to keep from shaking. \n\nAnother growl. It was low, almost a vibration. The candle blew out again with a gust. And then, in the corner of my eye, I saw movement right beside my hand, daring me to look away from my reflection. \n\nTentatively, I looked down at my hand. I couldn't process what I was seeing right beside it. Was it... a paw? A fist? A tree branch? Something scary, gnarly, twisted and dark. And it was right next to my hand.\n\nI whirled around, pressing my back against the drawers of the dresser, both terrified and determined to face whatever was in my house with me... only to find nothing. But as I turned, the candle on my dresser went flying like someone had swept it away, and it smashed against the wall, shattering the glass and spilling hot wax onto the wood floors. \n\nI stared at it in horror, my eyes welling up with tears. I ran to the mess, hoping some of it was salvageable. \n\nIt was, but not by much. Not knowing what else to do, I plucked out the pieces of glass from the wax, and carried what was left of it to the kitchen, and set it in a plastic bowl, staring at it sadly. \n\nMemories from my sixteenth birthday came back, the year I couldn't have a birthday cake because my mom couldn't bake because she was in the hospital. She'd given me a scented candle from the gift shop instead. I felt the tears burn my eyes and roll down my face as I stared at the mess. \n\nWhat am I going to do with a broken candle, I thought. This isn't even the one she gave me. That one burned down years ago. But this one had been pretty close in smell, which was why I'd bought it to begin with. \n\nIt didn't matter. Tomorrow, I'd go out and find myself some actual cake. Or maybe a new candle, and I'd burn it at the office. At least my office wasn't haunted. \n\nI splashed some cold water on my face and neck, dug through my closet until I found a broom and dustpan, and went back to my room to sweep up the glass, but I stopped short in the doorway. \n\nThe glass was gone, cleaned up and in the trash can. The wax that had pooled on the ground was gone. And on the dresser, flickering happily, was my second-favorite candle. Lush Forest, the scent of fir, amber, cedarwood, and petrichor filling my room and making it smell like a camping trip. \n\nThat's when I realized there was something living in my house with me. \n\nSomething with big, gnarly, claw-like hands, that I couldn't see in the reflection of a mirror. It was stealing my stinky trash, and fixing the leaks in my roof. And it was really picky about my candles. \n\n***\n\nThat was only the beginning of the drama between me and my monster. It was a lot less subtle about telling me things now that I knew it was around. I still never caught an actual glimpse of the thing, but I could sense when it was out and about. \n\nThe creaking of the old house? That was it's footsteps. The rustling of wind unexpectedly? No, that was my monster, sifting through my trash for whatever goodies I'd left it. It even washed its hands afterwards, which was counterintuitive as hell considering the fact that it was eating rotten food. \n\nAnd the candle thing? Oh, that was just a whole drama-fest. I was tired of my monster blowing my candles out at night, so I decided to have a chat with it. \n\n\"Look, I know you don't hate all of them,\" I said out loud one evening when my Apple Pumpkin Spice candle had gone out for the third time. \"So, how about you tell me which ones you hate and which ones you like, okay?\"\n\nNo answer. \n\n\"Fine,\" I snapped, and dragged myself out of bed. \"We'll do it your way.\"\n\nI stood in front of my mirror with my box of candles and a lighter. I lit one, and waited. If it blew out, I set it aside to bring to the office. If it stayed lit for a few moments, I blew it out myself and left it on my dresser. \n\nI began to see a pattern. The monster liked earthy scents, like amber and cedarwood, and some delicate floral scents like jasmine and lavender. But it hated anything that smelled like fruit, or sweet candy, or really strong scents. \n\nIt preferred subtlety. Which I guess I understood. It was in it's character. \n\n\"Great,\" I yawned. \"Glad we got that sorted out.\" I lit a random candle and climbed into bed, wrapping back up in my blankets and trying to ignore the fact that I'd just had a one-sided conversation with an invisible entity that hated half my candle collection. \n\nThe very next day, I got home from work a little early. I knew that the last chicken breast in my fridge would probably go bad soon, so I'd planned to make some fettuccine and grilled chicken to go on top. But when I opened my fridge, I couldn't find the damn chicken breast anywhere. \n\nI checked the trash. Sure enough, the empty bag I'd stored it in was sitting right on top. \n\n\"Oh, so now you're stealing my good food, not just the expired food? Great. Well,\" I slammed the fridge door shut. \"I'll just order myself some pasta. And I'm going to eat it all, you know that? There won't be any leftovers for you!\" \n\nI did so, but of course, Italian restaurants have this nasty habit of giving you massive portions, multiple sides, and tons of fresh, hot, chewy bread to dip into olive oil, so I only ate a third of the chicken and pasta. \n\nI put it in the fridge, and said out loud, \"This is my lunch tomorrow, don't eat it!\" \n\nOf course, I forgot to take it to lunch. When I got home that night, it was gone. But... on my bedside table was a new book, and a new candle. It was vanilla scented. I knew my monster didn't like vanilla. It felt like an apology. \n\n\"That's pretty close to birthday cake,\" I said softly. \n\nNo answer. \n\n\"I'll take it to the office... thank you.\"\n\nTap. Tap-tap. Tap. \n\nI glanced up and jumped in surprise when I saw one of the neighborhood black cats sitting on the branch of the tree outside my bedroom window. It's bright yellow eyes stared right at me. \n\n\"Monster? Are you friends with the tree and the cat,\" I asked offhandedly. Outside, the cat licked its paw, cleaned it's ear, stretched languidly, and hopped down from the tree. It trotted purposefully away. \n\nI put the vanilla candle in my purse for tomorrow, curled up with a cup of tea, and opened the new book on my bedside table. \n\nOne Hundred Nights in Paradise, by S. L. Baker. I'd never heard of her, but I was hooked after the first page. The monster knew my taste in books. \n\nI felt guilty for my taste in books sometimes. I liked dark, scary, dirty stuff. Stuff that made people's eyebrows go up if they found out. Stuff that made you want to tear the cover of the paperback off for fear of someone knowing what you were reading. Stuff that you kept in a box under your bed in case anyone ever stopped by unexpectedly, or your mom burst into your room. \n\nI hadn't experimented sexually much in high school or college. There were a few people, a few fun times, even a few great times, but nothing like what I read. Nothing like what I wanted. And since most of my free time was spent in my haunted house, I doubted I'd ever really find what I wanted. For now, I was content to read my books and enjoy the warm fuzzy desire that came along with the dirty fantasies, daydreaming of what might be in my future if I was ever brave enough to go out and look for it. \n\nIn this particular story, a young girl was groomed and brainwashed, gaslighted, and eventually forced into sexual slavery. Over time, her master fell in love with her, and slowly she began manipulating him and using him, until the power-exchange had completely switched, and he was at her mercy. I stayed up far too late that night, devouring every word, squeezing my thighs together and eventually caving to the desire to stroke and tease myself between my legs. ",
        "I had almost finished the story, but I was too turned on to read anymore, so I set the book aside, laid back, and prayed to hell my monster was in the kitchen digging through my trash right now, because the tension in my body from the past three hours of reading and touching myself was just too overwhelming. \n\nI laid back and closed my eyes, sliding my hands over my body delicately, flicking my nipples and squeezing my breasts and thighs, my hips twitching and thrusting against nothing. In my mind, I imagined a large, strong, scary-looking man pinning me down to my bed, grinning at me with an evil smile. \n\nI would struggle against him, but he would touch me all the right ways, force me to enjoy his touch, his lips, his tongue... he would pin my hands above my head, tie them there, and then spread me open, laughing at me as I fought him, but to no avail. He would kiss me roughly, shoving his tongue in my mouth and biting my lips, biting my neck, and twisting my nipples. He would push my legs up over my shoulders and thrust his tongue into me, laughing and mocking me as I squirmed and sighed in a useless combination of anger and pleasure. Then he would slide his thick, hot, throbbing cock all the way inside me\u2014\n\nWhen my fingers slid inside me, I gasped and twitched at the onslaught of my release. Pleasure exploded through my body, leaving a sweet, delicious buzz. I let my hand fall away from my sex, wiping it on the sheet awkwardly and letting my eyes flicker closed. Relaxed, satiated, and satisfied, I drifted off to sleep. \n\nThe very next night, the dreams started. \n\nOn night one, I had a dream very similar to my fantasy after reading S. L. Baker's book. A man kidnapped me on my way home from work, locked me in a dungeon, and sexually tortured me until I came multiple times against my will. I enjoyed it way too much, and when I woke up, I had cum multiple times, and was so wet that I had to change my sheets and take a shower before I could get dressed. \n\nOn the second night, I dreamed I had a meeting with my boss. He wasn't a particularly handsome man, but he was authoritative and dominating, and after a meeting where I'd been publicly humiliated at my poor assessment of a client, he took me into his office, spanked me until my ass was red and sore, and made me orgasm while he fingered me ruthlessly. \n\nThe third night, there were some really weird sounds outside before I went to bed. The howling and growling from the neighbor's dog was back, and I heard sniffling as I fell asleep. I dreamed that I was running through the woods, naked and soaking wet between my legs, and someone\u2014some thing \u2014 tackled me, forcing their huge member into my tight body until I exploded in pain and pleasure.\n\nAfter the third night, I wanted answers. \n\nI'd had sexy dreams before, but never the kinds of dreams that left me soaking wet and quivering with need. On the morning of the fourth day, I woke up right before I orgasmed, breaking my concentration screaming in frustration. The dream immediately forgotten, I squirmed, reaching down to my clit in an effort to alleviate the pain \u2014 \n\nThere was something there. Right between my legs, wet and long and squishy.\n\nI screamed and jumped out of bed, throwing the blankets off me and staring in shock. But there was nothing on my sheets other than my own wetness soaking through the sheets.\n\n\"Monster!\" I shouted. \n\nNothing. \n\n\"What the hell, what are you doing to me...\" I growled, not knowing what else to say. \"I know it's you!\" I grabbed one of the pillows, and threw it under the bed.\n\nNothing. \n\n\"Answer me!\" \n\nI threw another pillow. Then I looked under the bed to try to see if there was anything there. \n\nNothing. No pillows, no monster, no nothing. \n\nI laughed. I laughed and laughed, not knowing what else to do, because, what the fuck, I was having sexy dreams, and there was a monster in my house who ate my trash, and what the actual hell was going on. I didn't know what else to do. So I left. I went to work and... I just left. \n\nWhen I got home from work, the missing pillows were back on my bed, and there was another mysterious book on my bedside table. It had no cover other than thick leather with a fleur de lis pressed into it. I flipped open to the first few pages, and it appeared to be a handwritten journal. I set it aside. \n\nBeside it, there was a small envelope of herbs. I opened it and inhaled, and it smelled sweet and a little musty. I wasn't sure what else to do with it, so I boiled some water and poured the herbs inside. I let the scent waft through the air gently and slowly bring me down into a calm, peaceful place. \n\nWith the steam of the herbs in the air, I relaxed a little. After all, a monster living under my bed wasn't a big deal. I mean, monsters were famous for living under people's beds. They did it all over the world... Right? Whatever. \n\nThe herbs in the teacup by my bedside table made me relaxed and calm. So I opened the leather-bound notebook, staring at the strange symbol on the front for just a moment, and then resumed my study of whatever the hell lived in my haunted house. \n\nThere were only a few entries. I read them each carefully, page by page, studying the strange, aggressive yet carefully drawn out handwriting until I had them memorized. \n\n***\n\nOctober 1, 2021\n\nHello, my sweet, darling thing. \n\nYou are such a funny thing, with your candles and your chicken. You only eat it twice a week, and yet you buy enough for five humans. What century is this, that you buy five whole chicken breasts once a week, and throw half of it away... \n\nAre you hungry? Or are you just strange? Or... are you scared? \n\nLet me scare you instead. \n\nOctober 2, 2021\n\nHello pretty, delicious thing. \n\nWhat a lovely dream you had last night. I was quite enchanted. Do you really feel that way about your boss? Or are you just desperate? Desperate for the right kind of person, for the right treatment, for the right kind of affection?\n\nOr are you just... Lonely? \n\nYou poor, dear, beautiful thing. Oh, your dreams are so delicious. \n\nOctober 3, 2021\n\nHello my scared, pretty thing. \n\nWhat scary creature lives outside your house that you have to run from? Or does it live inside your house? Is that why you ran?\n\nIf fear is what you want... Let me show you. \n\nBut if pleasure is what you want... Lovely. Let me show you. \n\nOctober 4, 2021\n\nI am afraid I startled you horribly the other night. You woke up too soon. I'm so sorry, darling. You were so beautiful, and I couldn't help myself. \n\nWill you try for me? Will you try, if you find yourself in that strange, half-awake, half-asleep place, to stay there? If you wake up, throw your eyes open, I'll be forced to run. But if you stay... \n\nOh, lovely. I'll give you everything. \n\n***\n\nI read the journal entries over and over, trying to decide what I wanted. \n\nIt was easy to say I wanted pleasure, but submitting to it was different. And it was easy to say I wanted fear, but staying asleep through it, and tolerating it, that was a different story. Those scary erotic stories I read were just fantasies; I didn't actually want those things to happen to me.\n\nSo how did I deal with it? I closed up the journal and rolled over on my bed, facing the wall behind me. \n\n\"I'm sorry I threw pillows at you,\" I whispered. \n\nSilence. \n\n\"Do you ever talk?\"\n\nI waited, holding my breath, listening. A creak, but no answer. \n\n\"You do scare me,\" I admitted. \"I don't know how I feel about an invisible monster living in my room and sneaking in on my dreams... how do you do that, anyway?\"\n\nNo answer. \n\n\"Are you even here?\" I asked. No answer. But the lights flicked out. \n\n\"Cool. good chat... there's pizza in the fridge if you want any. Goodnight, Monster.\" \n\nThat night, I dreamed I came home and looked everywhere for my monster. I felt him behind me, caught a glimpse in the corner of my eye, but never saw him. Where are you, I would shout. Stop hiding from me! What are you! But everywhere I looked, whenever I turned around, it would disappear. \n\nThen suddenly, something caught me from behind, strong arms wrapping around my body and covering my mouth. In my dream, I could see a man; about my height, broad shoulders, with messy black hair and black eyes, and a deep gash across one side of his face. \n\nHe was beautiful, and terrifying. \n\nHe spun me around and pushed me against the wall. We were no longer in my room. Instead, it appeared to be a dungeon of some kind. Stone walls and dark ceilings and metal bars, and no windows and no light, yet I could see. \n\nWhat's going on, I wanted to scream, but I felt like my voice had been stolen from me. \n\nThe man used one hand to hold my hands above my head, and with the other, he gently squeezed my neck. Not hard enough to choke me, but enough to let me know he could. \n\nI gave up trying to scream. My brain was working overtime, and my body buzzed with fear and excitement. \n\n\"What do you want,\" I whispered. \n\nA slow, cruel smile spread across his face. In a voice that wasn't really a voice, just an idea, just a thought, he told me, \"Just a taste.\" \n\nEverything around us melted away, and all I could see was his cruel face. He glared at me like a cat looking down at a mouse it was playing with. Like a bully looking at its prey. Smug and petty. \n\nAll I could see was his face, but what I was feeling was... very different. It was as if four or five people were holding me down, hands and tongues and... oh god, what was that? A snake? A rope? \n\nNo. No, stop, please. \n\nSomething slithered around my ankles, wrenching my legs apart, and then another living, warm rope wrapped itself around my wrists. \n\nNo! \n\nSomething warm and wet brushed against my face and down my neck. \n\nThe dream faded away. I felt myself start to wake up. \n\nNo, wait... as my consciousness came back, I remembered his warning. I kept my eyes closed, refusing to move, not giving into the urge to open my eyes and admit what I was feeling wasn't just a dream. There really was some warm, strong tendrill wrapped around my wrists and pulling my legs open. A dribble of moisture dripped down the side of my neck, and I felt the flick of a tongue brush against my breasts. \n\nTentatively, I pulled my wrists against the restraint. There was no give, and the restraints moved when I tugged on them, and tightened. \n\nOh god. My monster was here, and it had me. Those weren't restraints, that was him. \n\nI bit my lip and whimpered, suddenly afraid. The tongue was now gently swirling over my nipple, across my chest, and down my stomach. I squeezed my eyes shut, the fear fighting with the pleasure. \n\nAnother tongue. Or a wet finger. A tentacle? Now there were three of them, tasting and touching my body, sliding over my hips and around my breasts. One of them slowly dragged down and tickled the inside of my thigh, and began creeping and slithering it's way towards my center. \n\nNo, I can't do this. Too much. No way\u2014\n\nBefore I could open my eyes, I felt something like a heavy arm press down over my face, forcing my eyes to stay closed. \n\nNo! I opened my mouth to shout, and something thick and wet plunged in, filling my mouth and muffling my cries. \n\nDon't do this to me, please! Stop! \n\nBut it ignored me. In my mind's eye, I could still see the dark cruel eyes of the man in my head, smugly whispering, \"just a taste, lovely.\" \n\nThe creeping, slithering tongue on my inner thigh slid closer to my sex, and lightly brushed against my slit, ignoring my cries and my struggles. Wetness gushed from it, and the feeling and texture made me shiver and squirm. \n\nSlowly, carefully, it explored me. It brushed against my lips, sliding between them and leaving a wet sticky trail. It found my clit, rubbed against it, and circled it, sending a hot pulse of need through me. I pulled at the tentacles wrapped around my ankles, trying to get away, but in response, two more slithered out and wrapped around my thighs right above my knees, opening me even wider and pinning me down. \n\nNo, please... \n\nSomething pressed against my entrance. Just a little, like it was feeling for resistance. Then it jutted itself into me and slithered inside. \n\nPlease. Please... \n\nIt moved against my walls, rubbing it's strange slimy textured bumps against my g-spot, prodding at me. Against my will, my hips twitched and bucked, trying to resist the pleasure that was slowly overwhelming me. The fear was turning to embarrassment, and I struggled and fought, shaking my head and trying to throw the heavy arm off my eyes and spitting the tentacle out of my mouth, but it was futile. \n\nSuddenly, it released my ankles, and I kicked trying to get free. The monster's grip tightened around my thighs, pulling my legs up so I was laying on my back, my knees bent and thighs open. Another slithering entity prodded at my ass. It was smaller and narrower, and wet, rubbing little circles around my forbidden opening like it was tasting me.\n\nNo, please, not that! I tried to scream. I even bit down on the firm wet thing in my mouth, but all it did was push itself deeper into me to silence my cries. \n\nWith gentle pressure, it pushed itself inside my dirty hole, slowly thrusting in and out. It wasn't deep enough to hurt, but it was just deep enough to make me gush with pleasure and burn with embarrassment. \n\nThe thing in my pussy began to thrust in slow, rhythmic synchronized movements with the thing in my ass. I was building, burning with pleasure and aching for release. As I neared my climax, it pushed just a little deeper into my ass, and the thing in my pussy expanded slightly, the bumpy texture massaging me just right. \n\nFireworks exploded in my body and I shuddered in relief. Waves of hot pleasure pulsed through me from the top of my head to the tips of my fingers and toes. I felt my pussy squeezing and pulsing around the thing inside me, my asshole fluttering in pleasure against my will. \n\nIt seemed to go on forever, but finally, the pleasure faded, and the monster withdrew itself from my ass, then my pussy, and then my mouth. I could barely breathe, let alone talk. I laid there, wet and sweaty and panting, and finally opened my eyes. \n\nSunlight was streaming through the window. I rubbed my eyes and pushed myself up on my elbows, still sweating and a little sore from whatever had just occurred. I looked down at my body. A thin sheen of sweat covered my skin, and between my legs was a pool of thick, sticky white goo. Was that all from me? \n\n\"Oh my god,\" I whispered. I couldn't think. I couldn't speak. Had that just happened? The monster... raped me. And I had loved it. \n\nI heard a low, vibrating rumble. Or maybe I didn't hear it, I only felt it deep in my chest and in the back of my head. I looked up, and caught a vague, dark shape in the reflection of the mirror, but before I could process what I had seen, it was gone. \n\nI collapsed back on the bed for a few minutes, trying to catch my breath. Then I forced myself to get out of bed, take a hot shower, and go to work before I was late. \n\nChapter 2\n\nThat evening, after work, I avoided going home as long as possible. I still wasn't willing to admit what had happened, so I went to a local coffee shop, then got some groceries, then took the long way home. I sat outside in my car, looking at my haunted house, wondering what was in store for me tonight. \n\nWould my monster touch me again? Would it stop if I asked it to? Would I continue to live here anyway? \n\nI brought my groceries into the house and set to making dinner, chopping vegetables and beef and throwing it all in a pan with some sauce. Instead of throwing away the bone and the scraps of fat from the cut of beef, I put it in a bowl and left it on the counter. My monster was going to steal it anyway. \n\nI ended up making way too much food, so I made two plates, setting the other one across from me. I sat in my chair, staring at the empty spot in front of me, and waited. \n\n\"Dinner's ready, Monster!\" I shouted. No answer. Not like I expected one. \n\nI sighed and began eating, but looked up when I heard a soft clink. Looking to my left, the bowl on the counter with the bone and the fat scraps was gone. I turned back to my food, and looked up to see the plate I'd set for him was gone too. \n\nI rolled my eyes. \"Okay, just bring my dishes back, please,\" I muttered. \n\nAfter dinner, I did everything I could to not go to bed. I did laundry. I swept the floor. I wiped down the counters. I took out the trash, even though it wasn't full. But it was getting late, and I had to go to bed. I had to face the monster again. \n\nIn my room, it was like he'd prepared for me. My sheets were clean and my bed was made. One of my favorite candles was burning. On my bedside table, the leather-bound journal sat propped up next to a small box. I changed into a comfortable t-shirt and panties, and sat on the edge of my mattress, tentatively opening the journal. \n\nOctober 5, 2021\n\nOh darling, you are sweeter than I dreamed. You'll give me another taste sometime, won't you, darling? \n\nThank you for dinner. I'd ask you to do something for me... keep this safe, won't you, lovely? It is... very important to me. \n\nThat felt like a lot more than a taste, I thought to myself. I couldn't say yes. I couldn't say no. I was scared, and embarrassed, and I'd tried not to think about it today, because every time I did, I blushed and shivered at the memory of those slithering wet tentacles exploring my body. \n\nI snapped the journal shut, and lifted the box. It was tiny, about the size of a business card. When I opened it up, something bright and glittering caught the light, casting rainbows around the room. \n\nI gasped at the sight. It was a small gemstone on a silver chain, the most beautiful precious stone I'd ever seen. It was brighter than a diamond, clear as glass but seeming to throw rainbows of light in every direction. \n\n\"Oh... wow,\" I whispered. I took it out of the box and studied it, rocking it in the darkness of my room. Even in the dark it seemed to catch every little bit of light and turn it into magic. I clipped it around my neck. It felt heavier than it should have. It was only the size of a pea, but it weighed heavy around my neck. \n\n\"What are you? Why won't you talk to me?\"\n\n...\n\n\"Can you talk? Is that why you write?\"\n\n...\n\n\"Are you scary? Or ugly? Is that why you don't want me to see you?\"\n\nA low howl in the distance sent shivers down my spine. It didn't sound like any kind of dog I'd ever heard. \n\n\"Goodnight, Monster.\" \n\nTouch me. Don't touch me. I couldn't say either way. I just curled up under my covers, fighting sleep until I couldn't resist anymore, and then slowly sank into a dreamless sleep. \n\n***\n\nThe monster didn't touch me again, not for a long time. Over the next two weeks, though, we fell into a routine. I would have strange dreams, and I would look for him everywhere, but I never saw him and I never had orgasms like I had those first few nights. I left for work in the morning, and when I got home in the afternoon, I made a cup of tea and read my books. Sometimes he left new books for me. I cooked dinner, enough for two, and my monster took his plate away to whatever secret hiding place he liked to eat. The dish would be cleaned and put away the next day. \n\nAt night, he often left me notes in the journal, and sometimes left me other little gifts. A gold bracelet, a pile of strange old coins, a silk scarf, a glittery semi-precious stone. \n\nIn his journal, he explained that he knew he was eating half of my food, and that he wanted to make sure I had something to sell for money if I needed it. I hated the idea of selling or pawning any of the baubles or gifts he left me, but I was spending quite a lot of money on food, so I found myself taking the ones I liked the least, like the strange gold coins and the gold bracelet, to the local pawn shop. ",
        "The man in the shop eyed me suspiciously when I set the items down, noticing my necklace. \"Where did you get these,\" he asked me, looking at them through his jeweler's glass. \n\nThe monster under my bed gives them to me in exchange for stir fry and pizza. \n\n\"My great-grandma died, and I've been selling off her old jewelry. I have a lot of college debt,\" I said, wincing and trying to make the lie sound convincing. \n\nHe nodded, but I don't think he believed me. \n\n\"I can't pay you for these,\" he said, setting the items back down on the counter and folding his thick arms over his chest.\n\nMy stomach sank. \"Oh. Okay, well, thank you anyway.\" I collected the items and tucked them back into the cloth pouch in my purse. \n\n\"I can't pay you for them because I don't have enough cash on hand,\" he continued. \"Take them down to Bob's place near Main street. Don't let him give you anything under ten grand for that bracelet. He's more of an expert on coins than I am, but my guess is they're worth about a lot. They're antiques. A collector might give you more for them if you can find someone interested in buying them.\" \n\nI had no words to say when he gave me those numbers. I just shut my mouth, nodded like I wasn't shocked out of my mind, and left the store. \n\nSure enough, Bob's Pawn gave me twelve thousand dollars for the gold bracelet, and told me to come back on Saturday regarding the coins so he could talk to some other collectors for me. Not wanting to walk around with that much money in my wallet, I went straight to the bank and deposited it, and then went to the grocery store. \n\nI owed my monster a really nice dinner. \n\nThat evening, I tried something different. I didn't know why I was still trying to reach out to him, but I felt compelled to solve the mystery and connect with him. So I set my dinner on the coffee table and sat down on a pillow on the floor, facing away from my kitchen table, and left his dinner on the table, so my back was to him. \n\n\"Dinner time, Monster,\" I called. Quiet creaks implied his footsteps approaching, and I resisted the urge to turn around. I held my breath, waiting anxiously, and then smiled when I heard the chair slide out. \n\n\"I cut out the bones of the steak and left them on the cutting board,\" I said. There was a clink of silverware against the plate. I picked up my own knife and fork and began cutting up my own steak. \n\n\"I don't know what kind of food you prefer, if you like cooked or raw. I notice you still steal my old food and trash. Are you getting enough to eat?\"\n\nA hesitation, and the clinking continued. He didn't answer. \n\nThe green beans and chopped bacon mixed with the gravy and mashed potatoes on my plate, and I scooped them up in a delicious combination of way too much butter and starch. \n\n\"You should tell me if you have allergies,\" I said, still trying to make conversation. \"I don't want to make you sick.\"\n\nA low rumble that sounded like a bark filled my ears. Was he laughing at me? \n\n\"Well it's hard to tell, since you eat rotten chicken and also lasagna.\" \n\nI didn't say anything else, but we finished our meals in silence. He finished before I did, and I heard the water in the kitchen start. He washed his plate, and then continued to wash the other dishes in the kitchen while I finished my meal and sipped on a glass of wine. \n\nWow. I have an invisible monster who does the dishes. What on earth?\n\n\"Thank you for the gifts,\" I said finally. \"I know I thanked you before but... I pawned some of them today, and it was more than enough. Really, you're far too generous.\"\n\nNo answer, and no sound. I dared to look over into the kitchen, but he wasn't there. I sighed, standing up from my pillow on the floor, and scraped the leftovers of my food into a small Tupperware container, put my plate in the dishwasher, and headed to bed. \n\nThat night, I checked the journal again. \n\nOctober 18, 2021\n\nLittle darling. You don't have to thank me for the gifts. They are just trinkets, bobbles and knickknacks I've acquired over the years. They are only expensive because they are old. I'm quite old myself, so I have many of them. I hope you enjoy them.\n\nYou've gotten quite good at cooking over the past week. Thank you for dinner, it was delicious. \n\nAnd, I see why you might be confused, dear one. I take your rotten and old food, but I don't eat it. Not myself. No, I share it with my friends. Some of them have quite a hard time finding enough to eat, and the rot doesn't bother them. They actually quite enjoy it. \n\nSo he does have other supernatural friends, I thought. I had a feeling the family of black cats were some of them, and maybe that scary howling creature outside as well. Maybe even the tree, which looked older and more rotten than ever before, but that had stopped tapping on the window. \n\nHe'd left me another box of old jewelry. Inside was a pair of large gaudy earrings with stones too big and obnoxious for anyone to truly wear. It looked like my grandmother's old costume jewelry, but I knew it was probably real. Pearls, emeralds, maybe rubies. The man at the pawn shop put me in contact with a jewelry collector who gave me far more money than I even knew what to do with, but it went into the bank and towards my college debt, and I also bought a throw rug for the living room.\n\nThe next night, after another one-sided dinner conversation on opposite sides of the kitchen and living room, he wrote to me again. \n\nOctober 19, 2021\n\nSweet darling. You're so kind to try to talk to me. I can't answer, you know. Not in this form. \n\nDo you really want me to speak to you? \n\nSomething about the tone of his letter felt like a trap. But I did want him to speak to me. I wanted answers. I'd been thinking about the last time we'd actually talked, when I'd seen the strange, handsome, scarred man in my dream, and he'd smugly looked at me with desire in his eyes, asking me for just a taste. I'd looked for him everywhere in my dreams, but I hadn't seen him. \n\nAnd lately, I'd spent many evenings remembering what he'd done to me. Every time I thought about it, a shiver went down my spine, and I felt a clenching need in my core. But after it hadn't happened again, I began to think maybe it really was a dream, and it hadn't actually happened at all.\n\nThat evening, I lit my candle, wrapped up in my blanket, and lay on my side, facing the wall. I listened hard, and could hear the sound of my breathing, and some soft noises from outside, but nothing else. \n\n\"Monster, are you there?\"\n\nI was greeted by a quiet rumble, almost like a sigh or a purr. \n\nI swallowed hard, trying to push away my fear. \"Are you comfortable under the bed? Isn't it cold down there?\"\n\nHe laughed at me. It sounded like the crunch of gravel or the cracking of branches. \n\n\"Well, I just thought I'd ask,\" I said, pulling the blanket up closer around me. \n\nThere was silence for a long time, and I felt myself grow relaxed and nearing sleep. Just as I started to drift off, I heard a creak of the floorboard. My eyes fluttered open. On the wall in front of me, a shadow was cast from the moonlight outside my window... and it was big. Huge and hulking, with many snakelike arms reaching and gyrating above it.\n\nMy breath caught in my throat, and it took everything in me not to turn around. I held myself stock-still, waiting for what he would do. \n\nMy mattress groaned under his weight as I felt him crawl onto the bed beside me. \n\nOh no, I thought. He's going to do it again. He's going to take me. I was awake, wasn't I? Or was I asleep? I wasn't sure. I dug my fingernails into my skin. No, I was definitely awake. \n\nWhen I felt the first snake-like arm slide up the side of my leg and start pulling at my panties, I finally admitted to myself that I'd been lying to myself for the past few weeks. \n\nI might be afraid of the monster, but I wanted it. I liked what he had done, and I wanted more. Maybe that made me fucked up, but who the hell was going to know? \n\nI let my eyes close, and tried to relax against the feeling of the creature slowly wrapping itself around my arms and legs. It pulled my panties and my shirt off me, it's arms gently tightening and moving me so I was laying on my stomach. An arm pressed my head forward until my face was crushed into one of my pillows. Its tentacles entwined around my thighs and pulled my legs open, bending my knees and forcing my hips up. \n\nA low growl filled my ears, and it made me quiver with fear and excitement. Something wet trailed up the side of my leg. A finger? Maybe a tongue, tasting me? It slid along my slit, and then dove into me with ferocity. \n\nI let out a cry of pleasure as it lapped at me, the wet hot tongue rubbing and thrusting in and out of me and bringing me right to the brink of pleasure... and then it pulled away. \n\n\"No, please! Monster, please!\" \n\nBut the monster wasn't done with me. No, he was just repositioning me. He pushed my hips up farther into the air, spread my legs so wide it was almost painful, and then slithered back inside me. Once again, another tongue tapped lightly on the entrance to my ass, flicking and circling until I was shaking with pleasure, and then it slowly nudged its way inside, one inch at a time, until I was so full it hurt. \n\nA third tongue started rubbing at my clit, and that sent me over the edge in a downward spiral of pleasure that eventually turned to pain when I became too sensitive. I shouted and begged for him to stop, but he didn't, still rubbing and flicking at my clit and thrusting deeper and deeper into my ass, until once again the pain built back up and my body shattered and shook in release. \n\nIt pulled itself out of me, and a gush of liquid escaped from my soaking wet body. I had squirted, but it had nowhere to go because I'd been stuffed so full. I was dizzy with pleasure, exhausted, and I almost felt high. Everything was warm and tingly. \n\nI kept my eyes closed. My monster continued to lap at me, taste me, and feel me, gently brushing my body until I became more and more relaxed, and eventually faded into a dream. \n\n***\n\nIt's a beautiful autumn day. The air is crisp, and the sun is warm, but there's a lovely breeze to keep me cool. I'm sitting outside my favorite cafe with a latte, enjoying the warmth of the drink as it seeps through the mug into my hands. The delicious smell wafts up and makes my mouth water. \n\nIt smells like vanilla. \n\nNo, wait... birthday cake. \n\nI look up. In front of me, I see... nothing. It's white. I look behind me, and it's still my favorite cafe, but there's nobody else here. \n\nI take a sip of the latte. It's warm and sweet, and tastes just like it should. I can feel the hot velvet of the milk in my mouth and the whipped cream on top press against my top lip. \n\nIt's a dream. I know it is. But it's nice. \n\n\"Hello, lovely.\" \n\nHis voice is just a whisper. An idea, not a sound. Velvet and dark and deep, like a secret. I look up, and he is sitting across from me. He's about my height, maybe an inch or two taller, but he's broad shouldered with strong, toned arms. He wears a suit and fills it out beautifully. A red silk tie with an elegant knot at the nape of his neck sets off the redness of the scar that mars his otherwise gorgeous and chiseled face. \n\nThe scar starts under his eye, cuts across his cheek and down through both lips. He cocks his head at me when I look at him, and the smug, proud look I remember settles on his face. \n\n\"Hello Monster,\" I say softly. \n\nWe sit for some time, me just staring at him. He says, \"What happened to all those delightful questions you can't seem to stop asking me?\"\n\nI bite back a smile. I have so many questions for him. Like why he lives in my house, and what he does all day, and why he appears as a huge terrifying creature with tentacle arms and likes to touch me in dirty ways. \n\nI shift in my seat at the memory. \n\nHe chuckles at me. \"Why don't we start with the basics, lovely. Why don't you tell me your name?\" \n\n\"Oh... I'm Ava.\" \n\n\"Hm.\" He smiles, and licks his lips, his black eyes glittering. I swallow at the sight. \n\n\"What... are you?\" I ask.\n\n\"The name for what I am doesn't exist anymore.\" His own drink appears in his hands with a flick. It's a large mug with a bone handle, like an old-fashioned beer stein. He sips at it, leaving a dab of red at the top of his lip. He licks it off and I blush at the sight of his tongue flicking out. \n\n\"But, the name most call me now is Dream Caster, or Nightmare.\"\n\n\"So, you... make dreams?\"\n\n\"I enter dreams, and can manipulate them. I don't create them from nothing.\"\n\n\"Why do you hide in my house?\"\n\n\"It's my house, darling.\" He says it with conviction. \"My last keeper needed to retire.\"\n\n\"Keeper?\"\n\n\"Well, I can't exactly go to the grocery store. I need to eat, but I can't be seen. It's hard to steal and takes effort to stay invisible. I need a safe place to stay, and a way to get between realms. This house is built on a sliver, so it's easy for me to jump from place to place.\"\n\n\"I... I'm afraid I don't understand most of what you just said,\" I sigh. \n\n\"Let me put it to you this way,\" he smiles encouragingly. \"There are other realms, other places, where I can go. I have friends in these places, and jobs I perform to help keep things running smoothly and safe for everyone. I jump through slivers, or weak points, in order to get from place to place. This house was built on a sliver, so it's the safest and easiest way for me to go from place to place without being seen by outsiders. \n\n\"Saoirse, the old woman who lived here before, she was my keeper. She lived with me for thirty-five years, guarded me with the herbs and the runes carved into the house, and sometimes cared for my friends when they were sick or injured. She transplanted one of my dearest friends, Rehald, outside. He's the tree you dislike so much. But Saoirse is old, and she has grandchildren in France. She was ready to retire. So I gave her some money, chose you, and sent her on her way.\"\n\n\"You... chose me?\"\n\n\"When you toured the house. Many people came to try to rent it, you know. I liked you the best.\" \n\n\"Why?\"\n\n\"Because you're a dreamer,\" he says softly. \"I can always tell when I meet a true dreamer. Curious, inquisitive, creative... adventurous... brave.\" \n\nI feel special at his compliments. He doesn't just desire my body, I realize. He chose me for my mind.\n\n\"Why don't you let me see you at the house?\"\n\n\"I worry I will upset you. This isn't my true form,\" he gestures to himself. \"But it gives me vocal cords and a face you don't mind looking at too much.\" \n\n\"If that isn't your true form, why do you have a scar?\" I ask.\n\nHis face clouds, as if remembering something he would rather not think of. \n\n\"I think that's enough questions for today, don't you, lovely?\"\n\n\"But I\u2014\"\n\nIn a flash of a moment, the cafe is gone, and he is standing before me, toe to toe, nose to nose. I can feel his breath wash over my face as he leans in with a low growl. My eyes flutter shut as he places a finger under my chin, lifting my face to his. I brace myself for his kiss. \n\nAnd then I realize I'm awake, and he hasn't kissed me, and that I'm alone, naked in my bed, and my phone is buzzing\u2014\n\nI groaned and rolled over, grabbing at my phone and silencing the alarm. What was that, I wondered. Did that happen? Was that really my monster talking to me in my sleep? \n\nThe memory hadn't faded, like most dreams. It felt so real... maybe it was. It was the same voice as the first time. \n\nDream Caster. Nightmare. My monster entered dreams and chose me because I was smart and creative and brave and adventurous. \n\nI rubbed the sleep from my eyes and looked at my bedside table. There was something that hadn't been there before. A small dark blue flower with a tiny splash of yellow in the middle. Forget-me-nots.\n\nI set them in a tiny bowl of water, showered for work, and left with excitement buzzing through my mind. For the first time in months, I felt like a weight was lifted off my shoulders. Part of the mystery of my monster was solving itself. He was connecting with me, he truly liked me, and... I didn't mind him so much. \n\nChapter 3\n\nThe next few days were like a dance. We continued our routine, but I sensed my monster more and more. I would crouch down to pick something up off the ground, and I would feel him behind me brushing an arm across the nape of my neck, like he was saying hello. I cooked dinner and would decide to add some garlic powder, and the little container would appear at my elbow. I cooked, he cleaned. He stayed just out of my sight at all times, but sometimes, in my peripheral vision, I caught his shadow. Or what I thought was his shadow. \n\nI also started saving the bones and scraps in a plastic tub for his \"friends,\" as he called them. I wasn't sure who, or what, they were, but I liked to imagine they were just as scary and strange as he was. \n\nAnd he left me sweet little notes, and more baubles and jewels. \n\n\"Monster,\" I said one evening when I got home to find a silk bag of rubies on my bedside table. \"I cannot possibly accept these! This is too much!\" I laughed and stared at them, holding them up to the light. \n\nAs an answer, something wrapped around my hair like a fist, holding my head steady. Arms snaked around my waist, pulling me against him. A long, wet tongue emerged and slid up the side of my neck, sending shivers down my spine and letting me know I was in for something filthy that night. He released me, and I whirled around to try to see him, and caught just the tiniest glimpse of dark brown and blue snakelike tentacles disappearing under my bed. \n\n\"You don't scare me,\" I laughed. \"I bet you're secretly beautiful,\" I added.\n\nHe laughed at that. \n\nHe answered my questions in the journal. \n\nOctober 21, 2021\n\nGood evening, lovely. \n\nYou asked me today, what color I am? I am many colors. It changes often, and helps me hide. \n\nYou asked me about the tree, Rehald. He's a very old form of sentient cypress that no longer exists in this world. They were cut down and sold for magic potions years ago. Witches used to use them to communicate information to each other, but during the war of 1690, many of them were cut down by the church. \n\nYou asked me about my friends. I'm glad you want to meet them. I will send one to come and see you soon. Don't be afraid of him. He's quite sweet. \n\n\"Monster,\" I said. \"Can't you give me more information about your friend? Because it kind of sounds like your friend is going to try to scare me on purpose.\"\n\nNo answer, just a chuckle, like the sound of crunching glass. \n\n\"Fine, don't talk to me. Maybe I don't want to know. Maybe I don't care.\" \n\nI flopped down in my bed, kicking my pants off. I'd lit my favorite candle, and it smelled like roses and frankincense, and it was making me want dirty things I was ashamed to ask for. \n\nI laid back in bed and started touching my breasts, squeezing them gently, thinking about how his textured tongue had rubbed against my clit a few nights ago, and I felt myself get wet. \n\nI heard a low rumble. He can smell me, I thought. He's going to get jealous. \n\nTeasing a Dream Caster was a bad idea, I found out. Because instead of coming out from under my bed to play, blue-grey tentacles with pulsing veins and wet suckers shot out from under my bed and wrapped around my arms and legs, pinning me down, and then kept me there. He didn't touch me, he didn't fuck me, he didn't taste me. He just waited until I fell asleep. ",
        "And then he tortured me. \n\nIn my dream, I was suspended in the air the way I was pinned down on the bed. I couldn't see anything because it was pitch black, but I could feel every delicate brush, every squeeze, every lick, every heavy spank and slap of his arms as he scolded me and punished me for my naughty act. He brought me right to the edge of climax so many times, pulling away just as I was about to explode, keeping me right on the edge for so long. Every time, he would pull away right before I could find my release. \n\nAll. Night. Long. \n\nI finally woke up ten minutes before I needed to leave for work, sweating and almost screaming from frustration. But I was so close to being late that all I had time to do was jump out of bed, take a cold shower, and run out the door with damp hair. \n\nAsshole monster. Note to self, never tease a Nightmare again. \n\nThat evening, when I got home, I told myself I would apologize and just ask for what I wanted, but the moment I stepped through the door, I knew something was wrong. The whole house felt... empty. \n\n\"Monster!\" I shouted. I went from room to room, looking for him, and couldn't feel him anywhere. The house felt cold, like there was a draft I couldn't pinpoint. It seemed darker. It seemed... old. Empty. Creepy. \n\n\"Monster,\" I said softly as I sat on my bed. \"Are you here?\"\n\nNothing. Usually, these days, he'd answer me with a creak of a floorboard or a quiet reverberating purr, but today he didn't. \n\nA glittering stone sat on my bedside table. It looked like a pearl, but it was cut into the shape of a heart. I clipped it around my neck, letting my fingers run over it. \n\nIn the journal, he'd written me another note. \n\nOctober 22, 2022\n\nGood evening, lovely. \n\nI'll be gone for just tonight. Important things to do and people to scare, you understand. Be a good girl and wait for me to get home tomorrow. If I find you've stolen what is mine, you'll suffer worse than you did last night. So, so much worse. \n\nWear the moonstone so I know you're safe. \n\nSleep well, you sweet, delicious thing. \n\nI groaned and shifted angrily, tossing the journal back on my bedside table and clipping the moonstone around my neck to sit with the crystal. I still wore the first necklace he'd ever given me, and I didn't want to take it off. I'd grown accustomed to the weight of it, and I quite liked it. \n\nThat evening, I cooked and cleaned and tried to stay in a good mood, but I felt myself missing my monster. I missed the creaks and the whispers of him moving beside me. I talked to him about my day when I cooked, and I had so many things I wanted to tell him that I couldn't because he wasn't here... it was infuriating, and lonely. By the time I'd finished dinner, I wasn't even hungry for it, and I felt lonely and sad. I took a shower and crawled into bed early, picking up one of my darker stories and curling up with my candle lit. But it was his favorite candle. Lush Forest. I burned that one a lot lately, because I knew he liked it. \n\nIt was about ten o'clock, an hour before I usually went to bed, when I heard a creak of the floorboards. \n\n\"Monster?\" I asked. \"Is that you?\" I put away the book I'd been reading. \"Oh, I missed you! I'm glad you're... back...\" I trailed off. \n\nIt did not feel like he was back. Something still felt weird... off... wrong. \n\n\"Monster?\"\n\nAnother creak. I slunk back as I watched the door to my bedroom open slowly... and a man appeared. \n\nThat isn't him. That's not my monster. \n\n\"Hey, uh,\" he started, but I didn't hear much else he said because I freaked out. There was a weird guy in my house, my monster wasn't here to protect me, and I had no way to defend myself. I was half-naked in my room with nothing but a book and a candle.\n\nI screamed, threw the book at him \u2014which landed uselessly at his feet\u2014 and jumped out of the bed, running madly for the closet. He jumped from the doorway and caught me, and we both collapsed to the ground. The man moved faster than I thought possible, and pinned me down on my stomach easily, like I weighed nothing.\n\n\"Stop screaming!\" he shouted. \n\nI screamed louder, and a large, heavy hand clapped over my mouth. \n\nHis voice was softer, attempting to soothe me, but I wasn't going to fall for it. \"Ava, stop, please. I'm not going to hurt you. Please stop screaming.\" \n\nI tried to say, \"Get off of me!\" But it came out muffled and jumbled. \n\n\"Okay, listen.\" His voice was low and rough, like a growl. \"I'm going to let you go, okay? Just... don't scream. Don't freak out. If I hurt you, he'll kill me.\"\n\nMy head was spinning with fear and adrenaline as he slowly released the pressure from my mouth and removed his hand from my face. I gasped and choked on the air, not realizing he'd been cutting off my oxygen. \n\n\"Luce sent me. I'm here to watch out for you. Please don't freak out. It's upsetting Rehald.\" \n\nIt took me a moment of breathing and thinking to connect what he was saying. Rehald? Wasn't that the tree outside?\n\n\"Who is Luce,\" I whispered. \"Who are you?\"\n\n\"I'm going to get off you, okay?\" \n\n\"Please do.\" \n\nHe extracted himself from me and I scrambled up, running to the closet and slamming the door shut, leaning against the back. I flipped on the light so I wouldn't be in the dark. \n\n\"Who are you!\" I shouted. \n\n\"I'm Axel. Luce sent me,\" he said. He was standing right by the door of the closet, not trying to get in. I grabbed the bathrobe from the hook and put it on, trying to do so without letting my weight off the door, but he was twice my size, so I don't know why I bothered. \n\n\"Who is Luce?\"\n\n\"Uh... big ugly scary fucker? Lives under your bed? Eats the energy generated from your nightmares? Ringing a bell? Oh, shit, is this the wrong house? That would be embarrassing.\"\n\nLuce. My monster's name was Luce. \n\nHe said in his journal that he'd send one of his friends by. Why hadn't I remembered that?\n\n\"Why did you just walk in,\" I snapped, and tentatively opened the door, peeking through the crack. I actually got a good look at Axel for the first time. \n\nHe was kind of thin, gangly, and a little shorter than me. His eyes were a warm brown, like chocolate, and he had the tiniest bit of scruff on his chin. Not really enough to be called facial hair, but not enough to shave or ignore, either. It was just... there. \n\nHe had to be like, sixteen, or seventeen, tops. \n\n\"I actually knocked a few times, but you didn't answer. Luce said you normally go to bed around eleven. I thought I was early, so I wouldn't scare you... I'm sorry,\" he said, and he ran a hand through his shaggy brown hair awkwardly. His t-shirt rode up and exposed a sliver of his toned stomach. My eyes must have dropped there, because he dropped his hand and pulled his pants up awkwardly, clearing his throat. \n\n\"Um,\" he stepped away from the closet. \"Do you want to come out?\"\n\n\"Uh... yeah.\"\n\nHe moved farther away, and I opened the door a little more, and then exited my closet, feeling like a silly child for running away and making a scene. \n\n\"I'm sorry I scared you,\" he said, shifting awkwardly. He pursed his lips and looked at his feet, a faint blush on his skin. \n\nI studied him a little more carefully. He was... kind of cute, actually. Young, but the kind of sweet baby-faced guy you knew was going to be pretty handsome when they grew into themselves. He rubbed at his shoulder and winced. \n\n\"So, uh... what are you doing here,\" I asked. \n\n\"Oh. Luce asked me to watch out for you, in case something happened.\"\n\nMy eyebrows furrowed. \"In case what happens? What could happen?\"\n\n\"I mean, probably nothing,\" he said. \"It's like the most unlikely thing ever that something would happen. This house is so warded, even a Shifter couldn't get in. He had to pull some of the runes to even let me inside. But it made him nervous to leave you alone for the night.\"\n\nI sat on the edge of my bed. \n\n\"Okay... so... what are you going to do.\"\n\n\"I'll just... uh...\" He looked around, and then crossed his legs and sat on the floor. \"I'll just sit here, I guess.\" \n\n\"You're going to watch me sleep.\"\n\n\"Yeah.\"\n\n\"All night.\" \n\n\"Uh... yeah.\"\n\nWe both stared at each other for a few beats. \n\n\"Do you want a book or something?\" \n\nHe looked over at the book on the floor that I'd thrown. \n\nOh god, that was one of those books with a half-naked werewolf on the front cover. \"Oh, not... don't... ugh,\" I said as he picked it up. He looked at it, flipped it over, scoffed, and then his face broke into a snarky grin. \n\nHe stood up more gracefully than I expected and sauntered my way holding the book in his hand. \"You like werewolves?\" he asked. \n\n\"Give me that,\" I muttered, and grabbed at it. He lifted it above my head so I couldn't reach. \n\n\"Ugh. Stop it!... I'll tell Luce!\" I snapped. \n\nHis face fell and he handed it over. \"Sorry,\" he said. \"Please don't tell him.\"\n\nHmm. So he's afraid of my monster, I thought. What's so scary about Luce? \n\nI shoved the book into the box under my bed, trying to breathe and let the blush come off my face. \"And what's wrong with werewolves, anyway,\" I spat.\n\nHis face broke into another grin. \"Trust me, I have no issues with werewolves. Or vampires. Or shifters. Or familiars. Witches are sketchy as fuck, though.\"\n\nMy forehead wrinkled. He continued. \n\n\"Actually, the Blacks are some of my favorite people. We always go to the Mash on Wednesday nights. Luna and Yen were in my graduating class.\"\n\n\"What are you talking about?\"\n\n\"The Blacks? You don't know the Blacks?\"\n\n\"I don't know anything!\" I snapped. \"The monster living under my bed doesn't have vocal cords!\"\n\n***\n\nI had Axel drag an armchair into my bedroom, so he could sit somewhere comfortable. He sat, legs spread, elbows on his knees, hands clasped while he explained things to me. \n\n\"Okay. So the Blacks are all familiars. They shift to cats.\"\n\n\"Ooh, the black cats that come by and eat the herbs?\"\n\n\"Yeah,\" He laughed. \"Luna and Yen are the oldest, and then there's Maximus, Freya, and Sybil. Their parents are just called Mr. and Mrs., because nobody knows their names. They're like, a hundred years old or something. Their witches keep giving them new lives.\n\n\"Your cypress tree outside, he's psychic and sentient. His name is Rehald. He's been around for centuries, pretty much since the beginning of time. He almost died in a fire, but Luce wrenched him up out of the ground, took him to another realm to nurse him back to health, and brought him back when it was safe. Saoirse planted him here and enchanted the ground so it doesn't run out of nutrients for him. \n\n\"I'm part of the Olean pack. My father is a Beta, and I'm training to be part of the guard\u2014\"\n\n\"Wait, what? Like... what do you mean, pack?\"\n\nHe smirked. \"We're werewolves.\" \n\nLike. fuck. you. are. \n\n\"Bullshit,\" I spat. \"You're just teasing me for my reading choices.\" \n\n\"Trust me, I have no issues with your reading choices.\" \n\nI heard his stomach growl. He blushed and scratched at his hair again, and then winced and grabbed his arm. \n\n\"You okay?\" I asked. \n\n\"Uh... I haven't eaten,\" he said softly. \"Luce said...\"\n\nI rolled my eyes. \"You should have said something. Were you going to wait until I fell asleep and raid the fridge?\"\n\n\"Yeah,\" he blushed. \n\nI got up and dug through the fridge. \"I have pasta... pizza... ooh, some leftover stir fry, that's really good... some Mexican rice and beans and chips...\"\n\n\"Uh... you have any chicken?\"\n\nBingo. \n\n\"You like it cooked, raw, or rotten,\" I looked over my shoulder and raised an eyebrow. \n\nHe blushed again and squeezed his shoulder. \"Raw or rotten is fine,\" he said softly. \n\n\"Are you okay?\" I nodded to his shoulder. I grabbed two chicken breasts and put them on a plate. What else was I supposed to do? Did he need a knife and fork? Should I wash them? Warm them up to room temperature?\n\n\"I'm fine. Changed unexpectedly a few days ago, and I'm still really sore.\"\n\n\"Uh... you want some ibuprofen? Or some tea? Oh, I have a heating pad...\" \n\nHe licked his lips as I set the plate of chicken down on the table. His eyes got big and changed slightly, glowing brighter and more yellow than brown. \n\n\"Uh... yeah,\" he said. \"A heating pad would be great, actually.\"\n\n\"Okay... I'll be in my room. Just... wash the plate, okay?\" I backed away and turned around, not wanting to watch him eat raw chicken. That was just weird. \n\nI guess I knew what was sniffling and howling outside my door at night.\n\nWhen did my life turn into an episode of Supernatural?\n\nI left the heating pad on the chair and climbed into bed, and left a sticky-note with my internet password. \n\nChapter 4\n\nThe next morning when I woke up, Axel was still sitting there in my armchair, scrolling on his phone without a care in the world. He left shortly after I got up, and I told him to take more chicken if he was hungry. He looked very excited about the fact, and told me if I ever felt like getting more of those \"awesome fatty bones from the steaks like last time,\" to give him a call. \n\nI laughed all the way to work. What a weird life I had all of a sudden. \n\nI felt when Luce got home. I'd finished dinner and climbed into bed, and had half expected Axel to come by again, but I felt when Luce was back. All the energy in the room seemed to swirl and warm, and then the house was full again, the way it should be. \n\n\"Monster,\" I said, sitting up in bed. It was late, about half-past eleven. It was dark, and I couldn't see much. I rubbed my eyes. \n\nSomething was at the foot of my bed. I gasped as the huge, hulking figure drew nearer to me. \n\n\"Monster,\" I whispered again, and the bed creaked as he climbed on. \n\nHe wasn't hiding from me. I could see him, and my eyes were adjusting. He was right there. \n\nHe looked like a shadow, but not. He looked like a man, but not. He looked like... nothing. But he was there. \n\nAs my eyes grew accustomed to the darkness around me, and I could see more of him, I felt myself whimper and draw back. He didn't look at all like I expected, and I couldn't help but shrink back into my pillows and draw my blanket up to my chin. But I couldn't close my eyes. I wouldn't. \n\nHe was about eight feet tall, and almost as wide as my full-size bed. His head was huge, bulbus, with glittering black eyes with no whites the size of saucers. His mouth took up the whole bottom half of his face. It was open, exposing row after row of sharp, dangerous looking teeth. Saliva dripped from his mouth, and a long forked tongue darted out and caught it before it splattered on me. \n\nHe had six, claw-like arms with long fingers and sharp claws on the end. His arms were scaly, thick as tree trunks, and looked to be a dark brown, almost black, with red splotches. Blue and grey tentacles emerged from his stomach and back, writhing and twisting, dripping moisture and flicking against the air. And they were nearing me. \n\n\"Oh god,\" I whispered, and choked on my words. I whimpered in fear. He was right to have hidden himself. He was terrifying. \n\nI yelped as I felt something grab my ankle from under my blanket, pulling me down the bed slightly. A long, dangerous claw grabbed at my blanket and tossed it aside, and my monster drew closer to me, crouching over me. \n\nI couldn't speak. I couldn't even open my voice to make a single sound. I squeezed my eyes shut, hoping it was all a dream. \n\nA low growl vibrated through my chest, and I felt him draw closer to me. I held my breath and drew my shoulders up to my ears in anticipation of what he would do. \n\nThe softest whisper invaded my mind. \n\nLovely. \n\nI kept my eyes squeezed closed. It's just him, I told myself. It's just my monster. It's just Luce. It's okay. He won't hurt me. \n\nMy eyes flew open at the feeling of a long, wet tongue dragging across my cheek. One of his claws reached forward and shredded my t-shirt effortlessly, leaving nothing but ribbons of fabric lying beside the bed. A tentacle, dripping wet and covered in suckers gently brushed the fabric away from me, and lay across my chest, the suckers latching onto my nipples and squeezing and pulling on them. \n\n\"Oh...\" I felt my stomach clench and desire burn through me, swirling in my gut. With one of his long fingers, he nudged my legs open, and I moved them quickly to avoid being cut. His talons could probably cut my whole legs off! The long thin snaking tentacles from his back wrapped around my ankles and kept me still, and I shivered, knowing what was coming next. \n\n\"Luce,\" I whispered. \n\nHe smiled. His mouth opened even wider, showing rows up on rows of dripping, black, razor-sharp teeth and three tongues. \n\nMy breath caught as I watched him lower his huge, terrifying head town to me, his tongues slithering out, and he began to tease me. One in my pussy, one gently stroking and circling my clit, and one nudging playfully at my asshole. \n\nI cried and begged and screamed like a desperate, needy whore as he tasted me, played with me, dragging me over and over to the brink of my climax. Why won't you let me cum, I wanted to shout, but I could barely breathe, let alone speak. \n\nFinally he released me from my torture and let me fall into climax, his forked tongue viciously massaging my clit until I literally blacked out from the pleasure, sinking into a warm, beautiful place of static and drunk freedom. \n\n***\n\n\"You tease,\" I say. \n\nHe smiles at me. \"I missed you too.\" He plants a gentle kiss on my forehead. \n\nHe looks happy, content, and we walk hand-in-hand through a museum. He tells me the artifacts are from his personal collection, and points out ancient coins, priceless jewels, old books, and strange carvings. \n\n\"Was it Axel that told you my name,\" he asks. \n\n\"Yes,\" I say. \"And you could have warned me he was going to come by.\"\n\n\"I did, silly dear. You didn't listen.\" He lifts a hand and tucks a strand of my hair behind my ear. \"I'll have to scold him for that.\" \n\n\"What do you mean,\" I ask. \"Why?\"\n\n\"That's the only way you were able to see me,\" he says. He stops in front of a painting. It's definitely by Van Gogh, but I've never seen it anywhere else before. Dark blue flowers with a yellow center... \n\n\"So, you won't be able to hide from me anymore,\" I ask, feeling myself smile. \n\n\"Oh, I can certainly hide from you. But before, when you turned to look at me and I stood still, you couldn't see me. Now, you can.\"\n\n\"So that time you threw my candle aside, and I turned around and didn't see anything...\"\n\nHe takes a step closer to me, catching my chin and holding it in his hand. \"I was  right. there. lovely.\" He taps the very tip of my nose on each word. \n\n\"I'm glad you're back.\"\n\n\"Me too.\"\n\n***\n\nI thought everything was going to be wonderful after that. I knew my monster's name. I knew what he looked like, and even though I was absolutely terrified of him, it still made him happy that at least I knew. We spent a quiet Sunday together, and I cooked and read, and he growled around the house and fixed another leak in the ceiling. That night, in my dream, he took me to the most beautiful forest I'd ever seen and kissed the back of my hand as I woke up, like I was a princess. \n\nI hurried home from work the next day, excited to tell Luce all about the things that had happened at work and cook dinner for him again. \n\nBut when I got home, I knew something was wrong right away. The front window was broken, and the herbs in the front yard had been torn up. \n\nI swallowed hard and crept towards the house, horrified to find the front door ajar. \n\n\"No,\" I whispered, nudging it open. \"Hello?\" I called out. \"Monster?\"",
        "Nothing. \n\n\"Luce!\"\n\nI could tell he wasn't here. And the house was a wreck. \n\nMy eyes welled with tears as I took in my surroundings. One of the cabinet doors had been wrenched off its hinges. My wine glasses that had previously hung above the sink were smashed to pieces, shards of glass scattered on the ground and in the sink. One wall had a hole in it, like something heavy had been thrown against it. The coffee table was broken, the couch was covered in a thick black goo, and the rug I'd bought was shredded with deep slices, like someone had taken a machete to it. \n\n\"Luce!\" I shouted. I searched the house. The bathroom mirror was broken, the shower curtain torn from the hooks. In my bedroom, the mattress was flipped up, my drawers pulled out and clothing strewn across the room. The jewels and stones and jewelry given to me by Luce that I'd kept in the jewelry box on my dresser was completely gone. \n\nThe journal on my bedside table was tossed aside, and the candle that had sat on my dresser had fallen to the ground, the glass broken, the remainder of the wax an odd looking chunk sticking out of it. \n\nI fell to my knees and cried, not knowing what else to do. Someone had been in my house and now Luce was gone, and I had no idea what had happened. \n\nAnd that black goo in the living room. Was that monster blood? Was he okay?\n\nThe herbs were gone, I remembered. Who had torn out the herbs? Why would someone do that? Maybe they were there to keep something bad away?\n\nSaoirse, the old woman, had asked me to call her if anything happened to the herbs. She'd also told me not to cut the tree, I thought. \n\nI looked outside. The tree was still there, it's branches waving in the wind, as if nothing had happened. \n\nI scrambled out the back door and ran to the tree. \"Rehal, what do I do? What happened?\" I asked. \n\nThe tree didn't answer. \n\n\"Tell me what to do! Help me out here!\"\n\nNothing. \n\n\"Ugh! Supernatural creatures are useless!\" I shouted, and ran back into the house. \n\nIt was in the kitchen that I stopped short, remembering the old woman's stipulations when I moved in. \n\nYou must leave this cabinet empty, and locked at all times! She'd said, pointing to the cabinet above the refrigerator. \n\nThe cabinet door was open. I grabbed a chair, climbed up onto the counter, and looked inside. \n\nThe inside of the door had a strange carving in it, as did the inside walls of the cabinet. There was a circle of dust showing something had sat in the middle of the cabinet, but I had no idea what it was, because I'd never opened this cabinet. \n\nBut right now, it was empty. \n\nWhat should I do? I wanted to scream. I want my monster back!\n\n*** \n\nI sat outside on the steps of my house while the police investigated. They brushed for fingerprints, brought a dog to sniff around, and asked me about what was stolen. I didn't have much hope that anyone would be able to find my stolen goods. None of them really mattered to me anyway, except Luce himself. \n\nEventually, the police left, told me to lock my door, or maybe go stay with a friend that night. I didn't have the energy to tell them that I didn't have any friends except a werewolf and a nightmare monster. \n\nI sat on my doorstep as the sun went down. It was close to Halloween, just a few days away, and it was cold outside. I didn't even notice when the black cat approached until it was right beside me. I saw its tail flick, and I looked up and met it's green-gold eyes. \n\n\"Are you Luna? Or Yen?\"\n\nBlink.\n\n\"Luce is gone.\"\n\nBlink blink. \n\n\"I don't know what to do,\" I said, my throat closing up and my eyes welling up with tears. I looked behind me at the house. I didn't want to stay here without him. It had lost it's magic, it's appeal. It looked and felt like a scary old empty haunted house, and not one I wanted to live in. \n\n\"Can you tell all your friends,\" I said. \"Ask Axel? Anyone? I don't know...\" \n\nThe black cat stretched and trotted away. \n\n\"Fine!\" I shouted. \"Be that way!... I'll tell him you didn't help!\" \n\nThe cat ignored me. \n\nIt was six o'clock in October, and I was cold. I stood up, turned to my house, staring at it warily, and forced myself to go inside. \n\nLater that night, there was a knock at my door. I jumped out of bed and ran to the doorway to find Axel and four other burly, harry guys standing on my porch. \n\n\"Uh, we heard what happened,\" Axel said. \"Can we come in?\"\n\nI nodded, not saying a word. Maybe that cat had actually done something to help. \n\nAxel tried to comfort me as the other guys in his pack sniffed around, lifted things up, looked at the black goo, and generally investigated. I'd cleaned up the broken glass and tried to tidy up, but I wasn't sure what to do about the monster blood. \n\nAxel told me to go to sleep, and that he would watch out for me that night. I slept peacefully only because I knew I wasn't alone in the house. But I woke up tired. I went to work anyway. \n\nWhen I got home, though, my house was full. Like... I could barely get in. \n\nAll kinds of strange people and animals filled the house. Cats sat on my counter, two dogs and what looked like a giant lizard sat in the living room, and Axel and three of his friends stood beside them. Four women who were clearly witches were cooking in my kitchen, cutting up herbs, peeling vegetables, and muttering over a large stock pot. There were other people \u2014 and things I didn't know how to describe \u2014 flitting around and talking, chatting, and generally taking up space. \n\n\"There she is,\" a tall willowy woman said when I set my bag down and tried to push my way into my own house. \"Ava, right?\"\n\nI nodded, and the people and creatures around me quieted. \n\n\"Rehal told me what happened. I'm so sorry about Luce.\"\n\nI felt the blood drain from my face and I almost fell back. Something caught me from behind and held me up, steadying me. \"What? What happened? Did he see anything?\"\n\n\"The anchor,\" another thing said. I only say thing because I had no idea what it was. Brown and short, with hair like snakes and a stubby nose. \"Whoever broke into your house, they stole his anchor.\"\n\n\"I don't know what that is,\" I snapped. \"I don't know what anything is! I don't\u2014\" \n\nA haughty voice interrupted me, speaking slowly and clearly. \"An anchor is what holds Luce to a permanent spot,\" said an older man. He sat in the corner in one of my armchairs, a black cat draped over his lap. His skin was pale white, and he wore a dress shirt and black vest. He stroked the cat languidly. \"It was enchanted and protected by runes, but whoever kidnapped him and his anchor knew what to expect. They got in, got the anchor, and did it fast enough that he probably had no clue what hit him. They looted the place afterwards.\"\n\nI felt my shoulders sag at the idea. \"How can I get him back,\" I whispered. \n\n\"You can't,\" he shrugged. \"There's no way to find him. Not unless you're tied to him.\" \n\n\"Tied to him?\"\n\nThe man smirked, his dark red lips twisting into a smug, rude expression. \"Unless you've been... carnal. Then we could cast a spell and find him, with the help of a moonstone and a seer.\" \n\nI bit my lip and felt my face burn. I looked down at my hands. \n\n\"And there's no way in all of heaven or hell you would have let that happen,\" he continued. \n\nI was going to have to admit it. In front of all these strangers, and Axel, and the family of cute little cats, that I'd had sex with a monster. \n\n\"Unless...\" he continued. I couldn't look up at him. \n\n\"Oh, will you give her a break,\" a sweet, high-pitched voice piped in. I glanced up and saw a young girl in a black dress laying on the man's lap where the cat had been. Her long black hair draped behind her and hung down over the arm of the chair. \"We all know they've been fucking for weeks. You can smell it on her.\" \n\nI groaned and dropped my face into my hands. He was teasing me. \"I'm going to tell him you've been mean to me when he gets back,\" I muttered, looking up at him. \n\nHe looked genuinely concerned at that. \"I... uh... I'd rather you not.\"\n\nI put my hands on my hips. He shifted, extracting himself from the elegant girl, and approached me. He was taller than I realized, maybe seven feet tall, thin and reedy. He paused in front of me and said, \"I apologize for teasing you. I thought you knew that most of us would have a heightened sense of smell.\"\n\nThe black cat girl walked past me, brushing me with the side of her arm as she did so. \"We've just been waiting for you to come home,\" she said offhand. \n\n\"Which one are you,\" I asked. \n\nShe looked back at me, raised an eyebrow, and turned away, picking at a thumbnail and then waltzing out the door confidently, like she didn't have a care in the world. \n\n\"Damn cats,\" I muttered. \n\nThe witches in the kitchen then ushered me towards the pot of whatever that green, bubbling stuff was, trimmed off a tiny piece of my hair, and dropped it in. I watched as the bubbling continued, and then... nothing happened. \n\n\"Uh... did it work?\" \n\n\"Of course it did. Hush.\" \n\nOkay then. \n\nFinally, the witches were satisfied with whatever they'd cooked, and they led me to my bedroom. They asked me to lay down on my bed, and I sat on the edge of my mattress. \"Um... why?\"\n\nThe older witch locked the door, and looked over at me with a glare. \"Just do as you're told, child.\"\n\n\"Be nice, Heather. She's new to this.\" \n\nThey crowded around me as I scooted back on the bed, pulling the covers up over my lap and sitting cross legged. \n\nThe youngest girl smiled at me. \"Don't be shy. It's okay. It won't take long.\"\n\n\"I don't... um...\" one of the older women reached out and began lifting my shit up, and I pushed her hand away, shoving it back down. \"What are you doing?\" I snapped. \n\n\"Best start with the herbs, then,\" the woman said, rolling her eyes. \n\n\"You really don't know anything about magic, do you, Ava?\" The girl who spoke was young, maybe a little older than me, with long brown hair and big blue eyes. She had a sweet smile on her face. \n\nI shook my head. I wasn't going to say it, but the only thing I knew about witches was that Axel thought they were sketchy. \n\nThe oldest woman, Heather, poured some of the nasty looking concoction into a cup, and then withdrew what looked like a tea bag from her pocket. She set the tea bag in the cup of brown muddy water, and set it on my bedside table, bouncing the tea bag in the hot water and filling the room with a familiar scent. \n\n\"It's okay,\" the younger witch said. She looked over at the woman who had tried to remove my shirt. \"I'll do it, okay?\"\n\n\"Do what?\"\n\n\"We need a large burst of energy to cast the spell.\" She smiled like she had a secret that she was waiting for me to figure out. \n\nThe herbs in the air hit me, and they smelled familiar. They were like the ones Luce had used the first time I'd dreamed about him. They made me feel relaxed and calm, like nothing bad was going to happen. \n\nBut I was still nervous and a little intimidated by these four weird women staring at me. \n\n\"I'm Lyanna,\" the girl in front of me said. She crawled up onto the bed in front of me and took my hands. \"Trust me, okay? I'm really good at this.\"\n\nGood at what, I wanted to say, but she pulled my hands closer and leaned forward, and kissed me on the lips. \n\nI froze under her touch, feeling her lips move on mine, her tongue gently peeping out and flicking against the tip of my lip. She was gentle in her kiss. She didn't rush me or push me. It was like she was letting me get used to the idea. \n\nI pulled away from her. I didn't like where this was going. \n\n\"It'll be okay, really,\" she said, and she pulled the blanket off my lap. \n\n\"Uh... no, I don't\u2014\"\n\n\"Ava, do you want to find him or not,\" one of the other women sighed. \n\n\"I do, but\u2014\"\n\n\"Then lay back and cum for god's sake. We only have twenty minutes until the moon moves.\" \n\n\"I\u2014\"\n\nThey grabbed my feet and pulled me down the bed, bunching up my skirt around my waist. I struggled, trying to get free of them, but there were four of them and only one of me. One woman held my hands behind me, her fingernails digging into my wrists. The other two held my legs, and Lyanna sat on the bed in front of me, still smiling sweetly like nothing was wrong. Like I wasn't getting raped. \n\n\"Just take it, Ava.\"\n\n\"You'll like it, I promise.\" \n\n\"Close your eyes, okay,\" Lyanna said. She scooted down so she was laying on her stomach, and she kissed the insides of my legs while she gently rubbed my mound over my panties. \n\n\"No,\" I mumbled. \"I don't\u2014\"\n\n\"Shh.\"\n\n\"Close your eyes if you don't like it.\" \n\n\"Pretend it's someone else if you want.\" \n\nI squinted my eyes shut. I didn't want to think about what was happening. I didn't want to be in my body right now. This was so humiliating, four strange women pinning me down in my bed and making me orgasm, touching me intimately against my will. \n\nBut I couldn't make them stop, and I did want to find Luce\u2014\n\nAnother waft of the herbs hit me, and I felt myself relax just a little, right as Lyanna pulled my panties aside. I squirmed a I felt her fingers brush my sex. I didn't like it, and I didn't want it, but those damn herbs were making me feel like it wasn't that big of a deal. Like this was happening whether I wanted it or not, so maybe I should just accept it and let it happen. \n\n\"That's good, Ava. You're doing good, okay?\" I opened my eyes and looked down at her. She was smiling up at me, happily massaging me. She kissed my stomach and then my mound, and whispered, \"You'll like it, okay? Just relax.\" \n\nHer lips brushed against me, and then I felt her tongue dart out and brush against me, very lightly, as if she were warning me what was coming. My head was beginning to swim from the strange herbs in the air, and I felt more of the fight drain out of my back and shoulders. \n\nLyanna licked me again, rhythmically and slowly, her tongue massaging my sex and her lips nibbling at my clit. She sighed into me and wrapped her arms around my hips so she could get closer. \n\n\"You taste good, Ava,\" she said. I felt her finger prodding at my opening. \n\n\"No,\" I whispered. \n\n\"Yeah, it's okay.\" \n\nMy eyes welled with tears, but my body betrayed me. I could feel the tightening of my core and the warm tingling of pleasure start to build in my hips. Lyanna gently slid a finger inside me, massaging me from the inside so gently while she lapped at me. \n\n\"That's it,\" one of the other women said. \"Good girl. Let it build, okay? Don't let her go yet, Ly.\" \n\nLyanna was softly, steadily building me, and my head was swimming, and I didn't want to cum. But fighting it was just making it worse. \n\nThe old woman began muttering something under her breath. The one who was holding my wrists let go with one hand and reached under my shirt, pinching and rolling my nipple, which made it even harder not to let go. \n\n\"Ready Ava?\" Lyanna asked, smiling. \n\nI shook my head, biting my lip and trying not to cry out. But she ignored my complaints. She slid a second finger inside me, and used her other hand to rub against me as hard as she could.\n\nIn mere seconds, I exploded in pleasure. I cried as I felt the relief of pressure that had built up in me, but it wasn't beautiful or delicious like it was with Luce. It made me sad, angry, that it had been stolen from me. \n\n\"Good girl, Ava. Very good.\"\n\n\"Beautiful.\"\n\n\"Was that enough?\"\n\n\"Oh yes. Plenty.\" And then the rude old woman by my side let go of my ankle, reached up to my neck, and removed the necklaces that Luce had given me. \n\n\"No!\" I shouted. \"Give those back!\"\n\n\"You insolent child, I'll mute you if you keep it up, and then we'll be forced to make you climax again.\" She didn't even look at me as she said it. \n\nLyanna pulled herself up on the bed and tried to cuddle me, like we'd just done something sweet that I'd enjoyed. She sighed and pulled me against her. I laid there and didn't fight her. It wasn't worth the effort. \n\nI want my monster back. \n\nThe old woman was still muttering under her breath. Her eyes were closed and she held the necklaces in her hand. Then she took the cup of muck tea that was still filling the room with potent steam, and drank the whole thing down. I winced at the sight. \n\nMan. I was glad I wasn't a witch. \n\nShe stood still for long minutes, her eyes closed but moving under her lids. We all sat and watched her, Lyanna still laying behind me, spooning me like a lover. She kept leaning forward and kissing my shoulder. Eventually I rolled away from her, and pulled my bathrobe over my clothes. I felt tired, and cold, and I wanted a shower. \n\nThe old woman muttered something under her breath, and then she opened her eyes. She did not look happy. \n\n\"It's Vanahan,\" she said quietly. \n\nThe other women's faces paled and fell. \n\n\"Who is that?\"\n\n\"He's a magician. He's the one who tried to kill Luce a while back.\"\n\n\"That's why he has a scar,\" I said. \n\n\"A scar? Try missing an eye and an ear.\" Heather tossed the cup into the pot with the rest of the muck soup, and hefted it onto her hip. \"He's never recovered fully, though he's been slowly building his strength back up over the past few years. It takes a long time and a lot of dreams to build a Nightmare back up. Saoirse has been feeding him for a long time.\"\n\nShe tossed my necklaces on the bed beside me, left the room, and walked purposefully towards the kitchen. I ran after her. \n\n\"So now what? How do we get him back?\"\n\n\"We can't.\" She dumped the soup into the sink and began cleaning the mess they'd made. She was clenching her jaw and glaring down, not looking at anyone. \n\nThe energy in the room changed to sadness and quiet despair. \n\n\"That's not good enough,\" I snapped, reaching over and turning off the water. \"Why can't we get him back!\"\n\n\"Because the most powerful magician in the world has taken his anchor, and is probably trying to kill him as we speak! He'll starve him for a few days, leave him somewhere with nothing to eat and no dreams to feed his magic on, and then he'll kill him, like he tried to years ago. And he's right here,\" she shouted, pointing vaguely towards the door. \"Right on the other side of town. And not a single one of us can get in through that door! It's too heavily warded against everything.\"\n\n\"It's not warded against humans, though, right?\" \n\nShe froze at my question. \n\n\"Did you forget I'm just a boring, regular, ordinary girl?\"\n\n***\n\nMayhem \u2014 that was the tall, scary, rude vampire \u2014 and Luna the cat had collected some clothing and weapons for me that were enchanted with safety spells. Axel and his pack escorted me to the place where Luce was being held. I was going to break into a store, and steal an anchor, hopefully find my monster before he was murdered... and I might go to jail for this. \n\nWho was I kidding? I might die for this. \n\n\"Nobody knows what it looks like,\" Lyanna told me when I asked her what I was looking for. \"But it'll probably be heavily guarded, and you'll know it when you see it. Also, it's broken. Try not to make it worse, it'll just weaken him.\"\n\nI was so in over my head. I didn't even know how I was going to get into the place. But I didn't know what else to do. I had to try. \n\nIt turns out, I had to do almost nothing. When I got there, I realized it was the same pawn shop that had sent me away the first time, because he didn't have enough money on hand to pay me for the bracelet and the gold coins. He must have followed me home and planned to rob the house, I realized. And then he probably realized Luce was inside when he couldn't get past the magical wards. \n\nI approached the door, and realized the light was still on. Hesitantly, I pulled on the door. It was unlocked. \n\n\"Hello,\" I heard a voice. \"We're closing.\" ",
        "\"Oh, I'm sorry,\" I said. \"I just...\"\n\n\"You need money, sweetheart?'' The voice became more distinct as he came out from the back room. It was the same man as before. He had dark blue eyes, dirty blond hair, and thick muscled arms under a plaid shirt. He wore jeans and a pair of dirty work boots. \n\n\"I, uh... yeah,\" I said, not knowing what else to do. But I hadn't brought anything with me to pawn. \n\n\"You in some kind of trouble or something? Didn't you get a lot for that other jewelry you came in with the other day?\"\n\nI could tell from his voice that he had no pity for me. He almost seemed to be enjoying mocking me. \n\n\"I... there are these people,\" I said, \"My dad owed them a lot of money and they... uh... they are going to take me if I can't pay them,\" I lied. I let the frustration and the pain from the past few days well up in me, and didn't fight the tears as they began to fall. \n\nHis expression didn't change. I knew he didn't believe me. I'd had jewels and stones and coins in my house and he'd stolen it all. If I were really in trouble, I would have pawned all that stuff right away. \n\n\"I'll give you two thousand for the necklace,\" he said, motioning to the heart around my neck. \n\nMy moonstone, the one Luce had given me. My eyes watered and my heart ached as I tentatively reached up to unclasp it from my neck. \n\nAs I did, I looked back at him, and he'd opened a drawer beside his cash register. There were a few random things inside; a large iron key, a jeweler's loupe, a notebook... And a huge crystal with a very small hole in the center. One that looked about the size of a pea. \n\nThat's it, I realized. That's his anchor. And the missing piece is around my neck. \n\nI bit my lip as I handed over the moonstone. He nodded and said, \"I'll be right back.\" Then he went back into the other room to get my money. \n\nImmediately, I ran behind the counter, unlocked the drawer with the key he'd left on the counter, and grabbed the items. He must have heard me or seen me on a security camera, because I heard him shout, \"Hey!\" and I heard a thump in the back room. \n\nI didn't know what else to do, so I yanked the small piece of crystal from the chain around my neck and shoved it into the hole of the larger one, hoping it would do something. \n\nNothing seemed to happen. I ran for the door, holding the items tightly in my hands, and burst through the door just as I heard an alarm go off, and the sound of a gun firing. \n\nOr maybe that wasn't a gun. Maybe that was some kind of magic spell, because the door to the pawn shop erupted in a burst of flames right as I jumped through. \n\nAxel and his pack were there waiting for me, already transformed into wolves. I jumped on the back of one of them and they took off. I clung hard to the anchor the whole time. \n\nChapter 5\n\nBack home, everyone was nervous, pacing, talking, and generally fidgeting. When we arrived, the wolves immediately changed back into their human forms, which was extremely embarrassing because they were extremely naked, and didn't seem inclined to do anything about it. \n\nI sat at my kitchen table, which was currently full of a bunch of strange looking dishes and entrees I'd never seen before and couldn't identify that people had been eating while we were out stealing Luce's anchor. I set the items I'd stolen on the table in front of me. An iron key, a jeweler's loupe, a notebook, and the anchor. \n\n\"Oh my god,\" Heather the witch said. \"You fixed it.\"\n\nI looked up at her. She was staring at the anchor in shock. \n\n\"What do you mean?\" \n\n\"He'd said it was broken and that he hadn't been able to fix it. You fixed it, didn't you?\"\n\n\"I just put one piece inside the other,\" I shrugged. \"It made sense at the time but didn't seem to do anything.\" \n\nHeather continued to stare at me for a few moments, then shook her head in disbelief and resumed her cleaning of the mess she'd made in my kitchen. \n\n\"What does that mean,\" one of the younger witches asked. \n\n\"There's a very old story about a Nightmare and his Dreamer,\" said a voice from the other side of the room. \n\n\"Saoirse?\"\n\n\"I told you to call me, bad girl.\" She waved her finger at me, but then continued her story. \"The story says if an anchor is broken, only a No\u0107namora's true Sanjar can heal it. But so few No\u0107namora ever find true Sanjar, their Dreamers. That's why clever, creative, daydreaming children always disappeared into the woods in the old days. Because the No\u0107namora were looking for their dreamers to heal them and make them stronger.\"\n\n\"So she's just a girl after all? Not a witch?\" Lyanna looked disappointed. \n\n\"Just a girl. She wouldn't have been able to enter the store if she'd been maji.\" \n\nThere was some muttering, and I tried to tune most of it out. \n\nI'd healed, or fixed, Luce's anchor. I was something special to him. Not just a girl who lived in his house. It felt like fate showing her cards. I kept listening for the familiar creak and groans of the house that told me he was nearby, but I heard nothing. \n\n\"How long will it take?\"\n\n\"What will we do now?\"\n\n\"What if there's no sliver where he's being kept?\" \n\n\"What if he's too weak?\"\n\n\"Should we go back and see if\u2014\"\n\nThere was a creak, and a rumble. Nobody else seemed to hear it, but I could feel it. I stood up abruptly craning my ears to listen. \n\nThe others noticed my response, and quieted. From my bedroom, I heard the quiet creak and groan of the house, but didn't see Luce anywhere. \n\nLovely.\n\n\"Monster,\" I whispered. \n\nKey. \n\nI took the key from the table and followed the sounds and the feeling of his energy, going back to my room and peering under my bed. \n\nThere, under my bed, was a gash in the floor that hadn't been there before. It was like a black hole, a sliver of time and space that didn't exist. \n\nKey, lovely. \n\nI dropped the key into the darkness, and it was swallowed up. The sliver of darkness disappeared. \n\n***\n\nI half expected some kind of big thing, like an explosion, or a burst of flames, or for Luce to come walking through the front door. That didn't happen. Slowly, the other creatures and magic persons disappeared and went home. One of the vampires spent the night in my living room, promising not to eat me in my sleep, and Saoirse stayed in the spare room. \n\nI tossed and turned, feeling awful and tired the next morning. I went to work, but didn't get much done. My boss sent me home to sleep off whatever I had. By the time I got home, Saoirse had re-planted the herbs and disappeared back off to France. \n\nThe supernatural kingdom made sure I was never alone. There was always someone in the house, always someone watching me sleep or just in the other room. One of the half-lizard people fixed my broken window, and the werewolves helped dispose of my damaged couch and replace it with a new one.\n\nTwo more days went by. Nobody heard anything from Luce, but there seemed to be a storm brewing in the supernatural world. I heard Axel and Maximus talking about a war in one of the other realms, and Luna and her twin Yen whispered conspiratorially about the Council while they painted each other's nails, and then mine. Although I felt like they purposefully included me in order to ignore me. I decided I didn't like cats one bit. \n\nIt was a Friday night, two days before Halloween, and it was a full moon outside. Somehow, my house had become the spot for the monster party of the year. Mayhem and his vampire friends were lounging around the living room on the new couch. A forest nymph and a gnome were playing cards. A werewolf and a man with scales on his arms and a forked tongue stood in the kitchen, taking shots of moonshine to see who could get drunk the fastest. My money was on the werewolf. The dragon/lizard/man didn't seem phased at all. Outside in the backyard, the witches were doing something that involved dancing, jars of water, and mirrors. I still wasn't sure what was going on out there but I avoided them in case they decided they needed more \"bursts of energy\" for their spells.\n\nI sat in my favorite chair with a blanket and a cup of hot apple cider that someone had given me, listening for my monster to come home. \n\nAnd then, suddenly, the lights went out. The candles burning on the mantle flickered out, the fire in the fireplace extinguished with a gust, and all the lights in the house turned off. Even the music coming from the little Bluetooth speaker cut off. \n\nEveryone stood still, silent, waiting. A few people looked frightened, and some looked excited. The wolves, the cats, and the vampires seemed to be looking down the hallway. They could probably see in the dark, I realized. \n\nI felt the house creak and groan, and I rose to my feet, smiling. \"Monster.\" \n\nThe werewolves had shrunk back. The vampires were looking at their feet. The cats had slunk off and hidden somewhere under a couch or behind the table. The other creatures seemed to be shrinking back as well, looking at the floor, at their hands, or trying to get towards the front door as quickly as possible. \n\nI tip-toed closer to the hallway. There he was, standing in the hall, leaning against the doorframe. He stood in his human form, wearing a suit and tie, one leg kicked over the other, his eyes searching the creatures in the room with that mean smug look on his face. \n\nI was so happy to see him that I wanted to run to him, to throw my arms around him, but I worried that might embarrass him. So I stood still, biting my lip to try to hide the fact that I was grinning like a fool. His eyes fell on me, and he winked. \n\nHis voice was low, smooth as whiskey, and cold as ice. \"At what point in the past five hundred years have I allowed a full-moon mash in my house?\"\n\nNobody answered. Nobody breathed. \n\nHe continued, speaking low and slowly. \"Have you forgotten who searches your mind for your worst dreams and greatest fears, and can make them a reality?\"\n\nI shivered at the thought. Luce had only ever given me beautiful dreams. He'd never given me terrifying ones. Once, a long time ago, I'd had a bout of nightmares that made me so afraid I avoided going to sleep. How awful would it be to live with a Nightmare that had a bone to pick with you?\n\n\"Have you forgotten who decides your fate when you make a mistake? Who delivers punishment, who has stood on the council for over fifteen thousand years?\"\n\nPeople and creatures around me shrank under the weight of his inference. \n\nI took a breath, ready to say something, but Luce cut me off. \"The only reason any of you are forgiven, is because you not only protected my dreamer, but rescued me from what would have surely been my last battle. So thank you, thank you very much... now get out of my house.\"\n\nPretty much everyone grabbed their shit and got the hell out in about thirty seconds. Luce and I were left with piles of food, bottles of alcohol, and a plate of raw steaks on the kitchen counter. \n\nWe looked at each other. His cold expression broke into a soft smile, and he winked again. \n\nI gave into the urge to run to him, and wrapped my arms around him. It was strange to touch him, to see and feel him in his human form, but it felt good, and special. \n\n\"Lovely, sweet Ava. My beautiful dreamer.\" He spoke into my hair and kissed the side of my neck. \n\n\"Are you okay?\" I asked. \n\n\"I'm more than okay. I'm better than I've been in several centuries. I'm sorry I took so long to return. I had some... loose ends to tie up.\" \n\nI looked up and met his eyes. I noticed the scar on his face was gone. Tentatively, I reached up and brushed a finger across the spot on his face where the scar used to be. \"What happened?\"\n\n\"There was a battle, about four hundred years ago.\" He gently took my fingers from his face, massaging my hand in his. \"I got in a fight with Vanahan. I killed his familiar in battle, and he decided to get revenge on me by trying to kill me. My dreamer guarded my anchor and that was the only thing that kept me alive, but she died in the process. I swore I would kill him for it. We've been enemies ever since.\n\n\"At one point, he hurt me badly enough that I had to go into hiding. My anchor was damaged, which made it much harder to hide, and almost impossible to pull the amount of energy I needed to heal. That's why I had this house built. So I could hide, and heal slowly.\n\n\"But you... you not only rescued me, but you fixed my anchor. When you did that, it allowed me to pull the energy I needed to strengthen my magic. The key unlocked my bonds. Vanahan and I have had our last battle, and I don't need to fear him or hide anymore.\"\n\n\"And your scar is gone,\" I whispered. \n\n\"And my scar is gone,\" he smiled gently. \n\nHe kissed the very tips of each of my fingers. \"You know... I gave you that moonstone to protect you,\" he said. \"You should not have taken it off. It was very dangerous of you to come after me and hand over a warded protection spell to my arch enemy.\" But he withdrew the moonstone from his pocket, and clipped it back around my neck. \n\n\"I couldn't let you die,\" I said, my eyes burning at the thought. \"I was worried about you, and I missed you...\"\n\n\"Hmmm I missed you too,\" he said, flipping my hand over and kissing my wrist, and then the soft inside of my elbow. \"I missed all kinds of things about you, lovely.\" \n\nI blushed as he held my gaze and continued to kiss my arm, then my shoulder, then my neck and right under my ear. His arms went around me and held me tight against him, and I could feel the hard length of him against me. \n\n\"I believe a punishment is in order, little dreamer. You were reckless, and dangerous, and you lost your moonstone.\"\n\n\"But... but I had to save you! You would have died!\"\n\n\"Hm. You're going to wish I had here in a minute.\" But he said it with a wicked smile and a glimmer in his eyes. He walked backwards, pulling me with him to my room. \n\n\"Um, Monster... you're not really mad at me, are you?\"\n\nHe laughed. It was joyous, but evil, and reminded me that although this monster had a human face and did have some affection for me, he was still dangerous and terrifying. \"Of course not, Ava. I would be dead right now if it wasn't for you. But I'm still horrified at how reckless you were, and plan to enjoy taking it out on you. I've lost one dreamer. I don't ever want to lose you.\"\n\nIn the darkness of my room with only the light of the moon shining through, he snapped his fingers, and my clothes disappeared. \n\n\"Hey, how\u2014\"\n\n\"I know my fair share of magic too, delicious girl.\" \n\nHis face stayed the same, and his hands held my face firmly so I was forced to look at him, but I could sense and feel that his body was changing to his other terrifying, monstrous form. The claws clacked and tapped on the ground, the tentacles emerged from his back and began inching up my ankle. \n\n\"You claimed I don't scare you, you remember that?\"\n\n\"I... uh... I lied,\" I whispered. \n\n\"I know. Don't worry, lovely, I won't scare you tonight. Your punishment will be pleasure, not fear.\" \n\n\"Just... just don't torture me, like you did the other night, please, Luce,\" I begged, remembering how he'd teased me mercilessly all night and not let me finish. \n\n\"Oh, lovely, I've missed your climaxes too much for that. No, sweetness. You will cum until you beg me to let you sleep. And then... you'll cum some more.\" \n\n*************\n\nThank you for reading! Please remember to rate and vote. I hope you enjoyed! I've had many requests on sequels and follow-ups. Yes, I've fallen in love with this world as much as you all have! I do plan to revisit it when I finish up some other projects."
    ],
    "authorname": "LindsayMurray",
    "tags": [
        "nonconsent",
        "tentacles",
        "somnophilia",
        "magic",
        "bondage",
        "oral",
        "blindfold",
        "monster",
        "supernatural",
        "fetish"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/lovely-dreamer"
}
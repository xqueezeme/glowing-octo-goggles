{
    "title": "Tampon Training for TG Women",
    "pages": [
        "'...a lady in the drawing room, a whore in the bedroom.' \n\nCopyright, 2007, by jR\n\nContents are for entertainment purposes only. The author assumes no responsibility or liability for its use or abuse.\n\n*\n\nFor me, and I suspect, most TG 'girls', the anus becomes our 'pussy.' Curiosity and a desire for the total female experience naturally led me to explore 'feminine hygiene'. First, of course, I practiced douching, a very essential chore for all us women. Playing with tampons was an easy progression. As a teenager, I would insert one after douching/enemas, then remove it immediately after masturbation. Now, as an older adult, I have begun tampon training in earnest. Why? As Vince McMahan of pro wrestling says, \"For those who get it, no explanation is necessary. For those who don't, no explanation will suffice.\"\n\nTo help other 'girls' explore their womanhood, I offer my experiences in tampon training. \n\nMy MISTRESS doesn't require tampon training. Rather, it sprang from my desire for complete femininity, inspired by HER remarks, when I get bitchy, that I must be having my 'period.' SHE has even mentioned marking four days in red every twenty-eight days on the calendar as my 'monthlies'\n\nFor the beginner, I would suggest inserting tampons only after douching, or at the very least, after a bowel movement. Then there will be some natural lubricant present to ease insertion.\n\nSince even genetic women can suffer Toxic Shock Syndrome [TSS] from tampon use, I would recommend NEVER wearing a tampon overnight. Just wear a pad instead. We'll discuss pads later. \n\nFor discipline and humiliation, my MISTRESS requires me to go in the store alone to select and purchase my feminine hygiene products. The first few times, this was super embarrassing I was sure the clerk knew I cross-dressed and the tampons were for me, sort of like when you begin buying cosmetics or lingerie solo. You remember, you pretend they are for your girlfriend or wife, but you're certain the clerk can see through your charade. Over time, I have gotten more comfortable shopping for my intimate needs.\n\nUnless you just MUST have a fancy brand, the 'house/generic' brands in the drug stores will do just fine. For the beginner, I would recommend buying an assortment pack which contains 'lite', 'regular', and 'super' tampons. That way, you can try them all and feel the differences [and there ARE differences, dearie. We'll go into that later]. \n\nBy checking the magazine ads, you can sometimes even get free samples by going to a company's web site.\n\nSelect a 'lite' or 'regular' tampon for your 'maiden voyage.' After carefully unwrapping it, apply a LITTLE water soluble lube to the applicator tube containing the actual tampon. In your choice of position, carefully insert it, leaving only enough of the tube to grasp while you push home the plunger to seat the tampon in you. This is why I said 'a LITTLE' lube. If you use gobs and gobs, then you won't be able to grip the tube.. Make sure the string 'tail' is hanging out for easy removal later. You can use saliva to lube the applicator in case you have to change tampons in a restroom emergency situation, or just for a more uncomfortable insertion at home. FWIW, sucking on a tampon applicator is extremely humiliating and could be used for discipline or punishment- just look at yourself in the mirror, girl. Imagine having to hold it in your mouth while being whipped, not dropping or crushing it... but that's a tale for another time. \n\nThose with S & M tastes might wish to try soap or mentholated chest rub as a lube on the applicator and the exposed tip of the tampon. A completely dry insertion also keeps you very focused. After it is in for an hour or so, your body becomes more used to the intruder. So for continual discomfort, change it every couple of hours. A small tug on the string will also remind your body that you are 'female.' \n\nA tampon inserted after douching will feel differently than one inserted without douching. \n\nAfter several rounds of douching, my pussy, anyway, tends to flex and spasm around the tampon. This produces delightful feelings. Without a douche, a tampon gives an unusual feeling of fullness down there, which takes some getting used to. Even with a douche, over time, the feelings caused by the tampon will change. My experience is that at about the half-hour mark, it changes to a dull ache that lingers long after the tampon is removed. Start by wearing it for a half hour, and add an hour each time, working up to 8-12 hours a day for several days in a row.\n\nFor your first couple of times wearing a tampon, I would recommend staying home, and close to the bathroom. The intrusion of the tampon itself, coupled with your movements, can stimulate the bowels to action. If this happens, hold it as long as you can comfortably [remember, this IS training, sweetie ]. Then, remove the tampon, do your business, clean up, and insert a fresh one if your training schedule that day is for a longer period of time. A sensible woman does not flush her tampons down the toilet, but rather, carefully wraps them in TP for disposal. Tampons, sanitary pads, and even panty-liners tend to clog toilets, so please be prudent here to avoid accidents and embarrassment.\n\nPeeing, with a tampon in, is its own adventure. Sitting as a woman, of course, requires different muscle control/relaxation than standing, regardless of how badly you have to go. Your first few times, you will swear that tampon is going to come right out. Don't worry, it probably won't. I've never had this happen to me. Passing gas is another unforgettable moment. Again, your whole insides won't come rushing out. If it does, just clean up and insert a fresh one. After all, the world isn't going to stop spinning just because a 'woman' had an accident!\n\nThe first time you go out in public wearing a tampon is both scary and exhilarating. Since most of us do not go out 'dressed' [and some like me could NEVER pass -- sigh], wearing a tampon in public is probably the closest we'll get. OK, some of us wear panties daily, and sometimes a garterbelt or girdle and hose under our clothing. But tampon wear is the most intimate iniation into womanhood we can practice out there.\n\nAfter my first few 'outings' wearing a tampon, I began carrying a compact pursette tampon in my pocket in case I had to make an emergency pit-stop. After all, there aren't convenient dispensers in the restrooms I have to use in public! To date, I haven't had to use my 'spare.'\n\nThe instructions on a tampon box say that when correctly inserted, a woman won't feel them. Maybe for genetic women, but not for us, honey. Tampon use focuses your constant attention on your 'pussy.' Even after you become an accomplished user, the feelings still nag, with twinges from any movement, walking, or shifting position. You will always be aware of what is stuffing you, girl. A slight tug on the string is sure to remind you of your female status. Just like genetic women, you can resume your daily activities wearing a tampon: shopping, eating, even exercising.\n\nA'Lite' tampon will generally be thinner than 'regular' or 'super', and therefore cause less discomfort. For me at least, a 'super' feels thicker, fuller, and firmer, and is less forgiving of body movements. A 'regular' is just that.\n\nBelow, I have included a sample page from my 'training diary.' You can create your own, but this should give you some ideas and get you started. In mine, I have categories for 'Implement', and 'Diameter' so I can use the diary to document dildo, dilator, and plug training as well.\n\nDATE IMPLEMENT DIAMETER DURATION\n\n3/5/07 tampon standard 4 hrs [no douche]\n\nchanged once due to BM, no lube.\n\n3/10/07 tampon pursette compact 9 hrs [no douche, 2 meals]\n\ninserted after BM, no lube.\n\n3/15/07 tampon standard [super] 7hrs [no douche]\n\ninserted after BM, no lube.\n\n3/16/07 tampon standard [regular] 6 hrs, no douche, TKD, 1 no lube. Meal.\n\n3/30/07 tampon standard [regular] 6 \u00bd hrs, no douche, meal\n\ninserted after BM, no lube.\n\n3/31/07 tampon standard [super] 7 \u00bc hrs, no douche, meal\n\ninserted after BM, saliva lube.\n\n4/7/07 tampon standard [ reg.] 7 hrs, no douche, exercise, \n\nsaliva lube. Restaurant/shopping.\n\n4/14/07 tampon standard [reg] 10 hrs, no douche, meal, \n\nsaliva lube shopping. Carried spare in\n\npocket for 1st time.\n\n4/18/07 tampon standard [reg] 7hrs. no douche, meal, \n\nsaliva lube almost went to sleep with it in.\n\n4/19/07 tampon standard [reg] 7 hrs, no douche, 2 hrs, \n\nsaliva lube BM, then fresh one, meal.\n\n4/20/07 tampon, pad atandard [reg] 2hrs, meal. Sick w cold.\n\nSaliva lube\n\n4/22/07 tampon, pad Playtex Sport 10 hrs, meal, maid work.\n\nsaliva lube [reg]\n\nSanitary pads and pantiliners, oh my! The natural companion to the tampon, of course, is a pad. Once again, the 'house' brands will work just fine. I prefer the maxis because they tend to be thicker. As with tampons, that wad of material wedged in my crotch reinforces my feminine feelings and keeps my attention focused down there.\n\nI've never used the elastic 'sanitary belts' to hold a pad in place, although on occasion, MISTRESS threatens to make me wear one out in public. Do they still even make those? Do any of the pads come with the 'tails to secure them? I don't know. Instead, I use the sticky strip on the pads to position them in my panties. Like all women, you can wear a pad with or without a tampon. From a practical standpoint, I like to wear a pad after douching or enemas to take care of any little dribbles, fore and aft. Pantiliners also work well for this, but I prefer the thick pads. As with tampons, save yourself the grief and do not flush them after use.\n\nFew of us TG girls are lucky enough to live as women 24/7. So to maximize both the feminine experience and your time spent en fem, try tampon training.\n\nThe author would luv to hear from other 'girls' about their fem hygiene and anal training experiences. May all your periods be happy ones!\n\nHugs,\n\njannelle "
    ],
    "authorname": "slutty_jannelle",
    "tags": [
        "cross-dressers",
        "feminine hygiene",
        "sub training",
        "anal training",
        "tampons"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/tampon-training-for-tg-women"
}
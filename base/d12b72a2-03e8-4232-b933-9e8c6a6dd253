{
    "title": "The Designer Pt. 02 Ch. 17",
    "pages": [
        "Author's Note\n\nThank you for continuing to read, vote and comment. The focus of the story is shifting. The Distant Past has faded into the mists of time. The main story takes place in the Past and explores the addition of Jenn to the family. The Present story line follows our familiar family and their oldest child, Isaac as he discovers his powers.\n\nI hope you enjoy this chapter.\n\n*****\n\nPast: Jeremiah\n\nThe six of us filed out of the RV. That was a number I'd have to get used to, the sudden addition of Jenn into our joined psyches was a surprise. The four other girls seemed to accept her willingly, and it seemed that Jenn and I were the only ones taken aback. I was pleased that my four lovers were eager to help Jenn adjust to our shared thoughts. They were always encouraging her in the odd way our minds merged.\n\nJenn was actually moving and acting like a normal girl. She'd been through the ringer the last few days. Truly, her world changed when she was first exposed to Kelly, Lexi and Carmen before I had fixed them at the hotel. The rush of our own life changes had left her behind. She was left with a hyper-charged libido and was trying to figure out what that meant for herself. That made her easy prey for predators like Benjamin and Jediah. I was glad we could help her. Like Alyssa said, \"we'd figure it out,\" it seemed we always did.\n\nOutside of the camper I almost tripped over Jediah. He was sound asleep on the ground. Alyssa looked at me, and with a nod of her head, Kelly led Lexi, Carmen and Jenn towards the house. Jediah started to wake up, and looked up to see me. I was tired of seeing his face. The last time I wanted to see it was on the six o'clock news in a mug shot. He shrank back from my grim visage.\n\n\"You are a worm.\" I said, and with Alyssa's help he repeated it back.\n\n\"I am a worthless worm,\" he agreed.\n\n\"You are a rapist, aren't you?\" I questioned, as I adjusted his curve. His mind shifted as I addressed different aspects, and my modifications changed his moral curve. \n\n\"I am,\" he said, suddenly chastened, \"I raped many women.\"\n\nHe face showed the struggled with his new morals, he was filled with shame and remorse. He almost couldn't stand to breath. I could make that happen, I realized. It wouldn't take much, and a person could just stop taking breaths. I drew back from that edge, a quick end would be too easy for this monster. Alyssa pushed a thought to me, and I nodded.\n\n\"You need do the right thing, turn yourself in,\" I suggested.\n\nHis face brightened, \"Yes, that would be the right thing to do,\" he agreed.\n\n\"Walk to Pullman, go to the police station,\" I commanded. \n\nAdjusting his curve to how his mind responded, and buttressing his will power to make him able to carry it out. Simultaneously, Alyssa push a strong suggestion willing him to do the same thing. His face softened, and then his jaw set.\n\n\"I need to report myself to the Pullman police,\" Jediah said, \"confess to my crimes, not just the last woman, but all of them. I'll start walking now and I'll won't stop until I have confessed.\"\n\nI waited monitoring his thoughts, his curve, his will-power. The changes were locked in, and I could tell he would do exactly that. I pushed some more things around, removing any memory of us or Jenn, the compound and the Priesthood. The holes might show up in police interrogation. I figured the ordeal of a 250 mile hike through the mountains might be a traumatic enough experience the police wouldn't press to find out more.\n\nWhen I was done he looked at me, his eyes dull and without any recognition. Alyssa freed his hands, and he rubbed where the rope had chafed his skin. He wore a simple suit, that was wrinkled and stained. His shoes were fairly sturdy, I thought they might make most of his hike.\n\n\"Excuse me,\" he said, \"Can you point me to where to go to get to Pullman, Washington?\"\n\nI laid out the directions, taking him through the long winding highway through the bitterroot range. Alyssa came out and gave him a bag of food, granola bars, fruit. It might last him a day or two. If he hiked continuously, he might get there in a week. Or he might get eaten by a bear. I no longer cared.\n\nHe set out, turning his back to us and walked out of the compound at a fairly brisk pace. I was glad to have him out of our care. Alyssa pulled up beside me, and hugged me. It was a hard thing to do, pushing around his craven mind. Her hug comforted me, centered me. We turned and walked hand in hand to the big house.\n\nRebekah was at the door of the house along with another woman from the compound. She introduced us to her as Miriam. They both looked much happier than when I last saw them during our ad hoc meeting in the meadow. I was a bit on edge then, so I didn't fully trust my own recollections. While they outwardly showed the proper remorse as the hospice people wheeled out a gurney and the bodybag, I could tell they both were feeling a sense of relief.\n\nAfter the hearse left, Miriam whispered into Rebekah's ear. Rebekah held her hand and led her to me. I could feel they were both nervous about asking me a question. Kelly and Alyssa were standing nearby and they joined our little circle. Carmen was talking to Jenn and Lexi further down the porch. \n\n\"Excuse me, Jeremiah,\" Rebekah asked, \"Miriam noticed you talking to Jediah a bit ago, then saw his walk off. Are you letting him go free?\"\n\n\"Well,\" I offered, \"Not exactly. He's come to the understanding that he needs to confess to the police about a rape he committed a few days ago in Pullman, Washington.\"\n\n\"He's going to walk to Pullman?\" Miriam asked suddenly, surprised at the outlandish statement.\n\n\"Yes,\" I said, \" He won't stop until he gets there, I expect it will take him a few days.\"\n\n\"That's over two hundred miles,\" Rebekah said, \"He won't make it by himself.\"\n\n\"That's possible,\" I said, \"but the only thing that will stop him is death. He feels he must do this. He'll refuse any ride, or any assistance.\"\n\n\"You did this?\" Rebekah asked, her eyes showing her trying to connect a few things, \"You have that kind of power?\"\n\nI nodded, \"My father, Isaiah, passed it on to me. He said he got it from my grandfather. I never knew my grandfather.\"\n\n\"Isaiah...\" Rebekah repeated, ... Miriam, who in the lineages had a boy named Isaiah, \"it rings a bell.\"\n\n\"We should go look,\" Miriam said, \"With all the men gone, we need to torch that place and burn what it contains, cleanse what it represents,\" then she looked back at me, \"Are you sure Jediah won't be back?\"\n\n\"I'm positive,\" I said.\n\nShe lowered her head and I could see her lips move then she looked up and smiled at me, \"Then I guess I'm free, finally. He was my husband, and I was worried for my daughters. He was telling me they wouldn't be married. He said he needed them for the houses. We're all free of him. That's a blessing to us young man.\"\n\nI didn't know what to say, \"Well, I'm glad your happy. I don't think being with a man like that for a husband was a very happy life.\"\n\n\"No, but it wasn't horrible,\" she continued, \"He was often gone, and me and girls got along fine without him. The days he came back from trips were the worst.\"\n\nAlyssa interrupted, \"Did you say we could check the lineages?\"\n\nMiriam nodded, \"Yes, the lines are recorded on plates in the ward's meeting room's cellar.\"\n\n\"The ward?\" Kelly asked, \"The building over there is the meeting room?\"\n\n\"Yes,\" Miriam said, \"I'll show you where they are.\"\n\nMiriam led all of us across the grassy commons to the lower built cinder block building. I had no idea what a ward was, but Kelly seemed to know. The knowledge that the building where Jenn was jailed also was a ward seemed to anger her.\n\n\"What's a ward?\" I asked quietly.\n\n\"It's a small congregation in the Mormon church,\" she replied, \"This compound would probably be referred to as a ward if they were part of a larger community. A stake might have several wards. It's how they call a collection of people in the faith. If that building is where the ward meets, what they were doing in there is unholy, a sacrilege.\"\n\nMy stomach turned inside me. I didn't know or practice much religion, but what I did know from attending church with my mother is that a meeting house was someplace special. It should be respected and venerated. Not used to indoctrinate young females into sex slavery. I could feel the bile in the back of my throat the more I thought about it.\n\nMiriam opened the door and saw the bloody mess that used to be Samuel. She drew back from the sight, and buried her head into Rebekah's shoulder. Rebekah hugged her friend. I went inside, and looked around, the light I had found was still lit. Kelly came in tentatively looking away from the horrible sight. She looked closer at the rest of the room and took in a deep breath.\n\nWe all finally looked at the room differently. Near the pedestal that Jenn had been bound too was a strong wooden table. It had religious carvings along the side. It was centered in a room that had marks where rows of benches could be lined up. The benches were stacked neatly along the walls. Dark curtains had lined the back wall behind the table, and drawing the curtains opened revealed a painting of a river, a baptism scene. \n\nI think all of us drew back at the revelation of what this building truly was. We killed people here, in this place of worship. It felt like a hard punch in the gut. Carmen, Lexi and I looked ashen as we realized what we'd last done in here. The room felt dark, I could imagine dark spirits laughing at us. I felt sick to my stomach.\n\n\"We haven't met here for a meeting in years,\" Rebekah said, noticing our concerns. \"Any holiness this place had has long been erased. Miriam is right we should burn this place down. The darkness in here needs to leave if we are to recover as a community.\" \n\n\"Do you still meet?\" Kelly asked, the only one of us that had any idea of what that meant.\n\n\"Yes, a few of us do,\" Miriam said, \"Deacon wouldn't let Rebekah join us, but the women meet at one of our houses to study and pray. We've long prayed for this deliverance you've brought us today.\"\n\n\"We will have to do some more praying,\" Rebekah said, \"but we'll find our way. Let me show you down to the cellar. I think you need to see what's down there, and I need to remember who Isaiah is.\"\n\nRebekah lead us back along the wall of cage bars. Jenn shrank back, remembering the night she spent there. I felt her horror at her memories, and the four girls pushed their comforting thoughts. She straightened her posture once we'd passed them. Rebekah turned a corner and then went down a flight of stairs. \n\nThe stairs emptied into a large room. Perhaps, at one time, it had been a place of quiet solitude. An alcove for deep religious rites. But now it was a storeroom for garish women's clothes, dusty old boxes and other detritus. Rebekah led us back single file through a wall of neatly stacked boxes to an opening. There was a hexagonal column, each of the six sides had two stone plaques neatly aligned. At the top each of the twelve plaques there were names printed. \n\nThe photos in the silver briefcase were of this column. The tablets were filled with a line of names showing lineages that went back many generations. Rebekah scanned the list, then stopped at one. The name at the top was Yeqon, and she knelt to look at the last name - Isaiah.\n\nShe pointed and asked, \"Your father?\" \n\nI nodded, and she lifted her finger the name above my fathers - Jedekiah, \"Your grandfather.\"\n\nI nodded as she spit at his name, the stone growing black as it sucked up the wetness of her spit. I was shocked at how angry she'd become, and she looked at me with dark eyes.\n\n\"He was a very bad, evil man,\" she said, \"and after being held mentally captive by that other man, I don't use those words lightly.\"\n\nI shrunk back, \"I never knew him. I barely knew my father.\"\n\nAlyssa was running her hands down the tablets, and Kelly was too. Jenn looked confused, and was grateful to be pulled into a comforting hug by Carmen and Lexi. I looked back up the list of names, so many more before my grandfather. All the twelve lines descended from fallen angels.\n\n\"I know,\" Rebekah said and nodded, she looked back up at me, \"You should be glad you're nothing like your grandfather. A selfish man, he was.\"\n\nKelly looked at the bottom her chart, it stopped a bit higher than mine. She looked at the names and they were all male. \n\n\"There are no females listed?\" she asked, \"So this name, it's my great grandfather?\"\n\n\"And this,\" Alyssa added, pointing to the last name on the line of Penemue, \"This was my father, your husband?\"\n\n\"Yes,\" Rebekah said, \"I suppose that's right.\"\n\nShe stood up and gripped one of the tablets, and pulled it up then back, Lifting it from the hooks that held it. \n\n\"I wouldn't trust anything more than the last few lines, though.\" she said, turning the tablet around and showing us the back side. \n\nI looked in the dim light, and saw it was marked: THOMSON STONE FOUNDRY, MISSOULA MT, 1928\n\nI looked back up at her confused, \"Fakes?\"\n\n\"Fabrications,\" she said, \"A story of fantastic lineages told to us to keep us in line. We were special. We were a remnant. A tale sold to us to control us.\"\n\n\"Why didn't you say anything before now?\" Alyssa said, the anger in her face palpable, \"This is outrageous.\"\n\n\"I only knew because Deacon was lazy, and I searched his memories while he slept,\" Rebekah confessed. \n\n\"I'm confused,\" Kelly said, \"If this is all made up, then how come we have powers?\"\n\n\"I don't know why you have powers, or where they come from,\" Rebekah said, \"It's possible that these plates were made to tell a story. To bring together myth and reality. I don't doubt your powers, I've seen and felt all of them. These plates aren't historical though.\"\n\nShe tossed it down on the ground and it shattered into many pebble sized shards. The loud noise made the silence afterwards seem more deafening. \n\n\"We need to burn this place down,\" Rebekah said, \"End all of the lies.\"\n\n\"We can do that,\" Carmen said, her face determined, \"I don't know much about all of what y'all are talking about. But this room? Filled with all this junk? It should go up pretty fast.\"\n\n\"I'll help you, Carmen,\" Lexi said.\n\n\"Me too,\" Jenn echoed, almost with a stronger determination.\n\n\"Okay, everybody out, all the way out,\" Carmen said, \"This place will start smoking in about five minutes.\"\n\nRebekah lead us back up the stairs, along with Miriam. Soon the five of us were standing on the edge of the field, watching the door. We waited for the three girls to come out behind us. It was a long wait. \n\nAlyssa's thoughts were dark and angry. She felt she'd been deceived. Kelly's mind was confused. I was somewhere in the middle. That each of us had powers was something we knew, but we couldn't explain how we'd gained them. My family line, along with Kelly's had the most evidence that it was somehow genetic. Alyssa was different, her mother had no powers, her father was dead. Any siblings she had were scattered. She felt alone. Kelly and I hugged her closely and she leaned into us, welcoming our embrace.\n\nI was starting to get worried when smoke started escaping along the top of the door. I was about to rush in to find the three girls, when Lexi rushed out followed closely by Jenn then Carmen. The flames started to dance behind them as we pulled them close and hugged them all. \n\nAs the building burned we watched, standing a quiet vigil. The other families, started to form around our group. Children sat at their mother's feet. Older children grouped together. I wondered how their lives would change. Two cars pulled in as the ceiling fell in and the flames danced higher. The evening had started to wane, as two men walked over to join us.\n\nThey drew up and hugged their wives, and kissed the tops of their children's head. They looked at the bus, then over at us. Their wives telling them the story. Their faces were first dark with concern. A fire near one's home was never a welcome thing. They both started to smile as the women told them the story of the day. As the fire quieted down, one of the men approached me.\n\n\"So,\" he said extending his hand, \"I'm Caleb. You chased away Jediah?\"\n\n\"Jeremiah,\" I said shaking his hand, \"Yes, he needed to walk to Pullman.\"\n\n\"And the others, Deacon? Samuel?\" he continued.\n\n\"Dead.\" I answered, not sure what to say.\n\nHe spat at the ground, then looked at my face, \"Good.\" was all that he said, as he turned and walked back to his home with his family.\n\nMiriam went back to fix her children supper, and we offered to have Rebekah join us. \n\n\"I think I'll dine with Miriam,\" she said, \"You six should have some time to yourselves. Are you staying the night here?\"\n\n\"Yeah,\" I said, \"I don't know what's next for us, now that Jenn's safe.\"\n\n\"I'll see you in the morning, then,\" Rebekah said, \"We might talk about what's next then.\"\n\nI parted and rejoined my family of six in the RV. Lexi and Jenn were extending the wings, while Carmen was cooking dinner. Alyssa was sorting through her box of books, and the diaries. Kelly sat next to her, and I sat on the other side. \n\n\"I don't know if these are even important anymore?\" Alyssa questioned, \"I was hoping for some kind of revelation around those damn stone plates. I feel more confused now than ever.\"\n\n\"My grandmother's stories were always wild,\" Kelly said, \"a mix of truth and fiction, I've discovered. I guess that is what those tablets were, a mix of things. It was used to control others, and that was bad. But it doesn't mean they were totally false, does it?\"\n\n\"I tend to agree with Kelly,\" I said, \"That the stone plates were manufactured is a fact. But what did they use to make them? Was there a different source? Was it a way for them to record an old story more permanently? We don't know. If there was anything more, it's truly ashes now.\"\n\nAlyssa nodded and pulled us close, \"For now, I think we can store these under the main cabin. I'm tired of reading their dark tales. I want to spend the next few weeks having fun with you, and all of our family. Jenn is safe, and we are all okay. Can we just have fun?\"\n\nI nodded, \"I think that's what we'll do,\" I offered, \"Let's just make sure Rebekah is taken care of in the morning, we owe it to her to make sure they have everything they need to restart their lives.\"\n\n\"Yes,\" Alyssa said, \"Of course. I just don't want another mystery to solve. Taking care of family is what I want. She is truly family. That is a miracle, when I think about it. I have a family!\"\n\nThe three of us hugged, then were joined by three more sets of arms and hands. Then we ate dinner and relaxed. It was strange, to not have anything pressing to do, someplace to go. The last week it had seemed was a rush of one thing after another. We had no home for another few weeks, and a wedding planned to happen in ten days back in Oregon. We could just enjoy ourselves, and discover more about who we all were. Jenn was happy to be included in our family. I was content. \n\nThat night our lovemaking was slow and sensual. Kelly constrained her aura, and nothing felt frantic. Jenn's body was a welcome addition, and added spice to our familiar movements. Our bodies flowed as we touched and explored. I lost track of who was who, in the mass of warm women flesh. I lost track of how many times I ejaculated, my molding power apparently could turn inward and magically made my recovery time almost instantaneous. We finally slipped into a restful sleep cozy in the tight confines of the rear cabin.\n\nPresent: Isaac\n\nThe morning light came through my window, and I blinked my eyes open. I was warm, warmer than usual, and I slowly realized it was from Beth's body lying beside me, her blond head pressed against my chest. I smiled remembering her sneaking into my room last night. Then I frowned, was it going to cause trouble, her having spent the night?",
        "She stirred and looked up at me, then kissed my chest, \"Good morning,\" she said. Her hands traced along my side, then she pushed herself up quickly, her head darting around, \"Oh my god, what time is it?\"\n\n\"I think around 8 o'clock,\" I guessed, trying to get my eyes to focus on my clock across the room. \n\n\"Shit,\" she said, \"My parents will be worried.\"\n\nWith that I heard Carmen call from the kitchen, \"Zac?! is Beth with you?\"\n\nBeth blushed and then pulled the blanket up to her chin to cover her bare breasts. That was a bit silly, because my door was closed, and Carmen would knock first. I smiled at her and tried to calm her down. She put her finger to her mouth, signaling for me to be quiet. \n\n\"Yes,\" I shouted, \"She is with me?\"\n\nCarmen started talking to someone on the phone, I couldn't hear what she was saying. Beth swatted at me, and then laughed. I pulled her down to my chest, then kissed her deeply.\n\n\"I'm not going to lie to anyone,\" I said, \"Not my family or yours. I love you, Beth. I'm not going to hide that.\"\n\n\"I love you too, Zac,\" she said softly, then kissed me again, \"I was just frightened, but you're right, I'm not a child anymore.\"\n\n\"Tell Beth to call her parents when she wakes up,\" Carmen called, \"And I'll make more breakfast too, I wish you'd tell me when you have company...\"\n\nHer voice drifted off back to the kitchen. I loved Carmen but she could get really mother hen really fast. Beth chuckled then wrapping the blanket around herself slipped off the bed and looked for her clothes. That left me completely naked, and with a morning hard on.\n\n\"Wait,\" Beth said, \"Is that for me?\"\n\n\"Actually, I need to pee,\" I said and found some gym shorts to put on and headed to the bathroom.\n\n\"Umm,\" Beth said, \"Hurry, I need to pee too.\" then laughed at the whole situation.\n\nAfter we'd both taken care of our morning routines, we dressed and went to the kitchen to see what Carmen made for breakfast. This morning it was a waffle bar, and we started to help ourselves.\n\n\"Call your mother first, child,\" Carmen said, \"They sounded worried sick.\"\n\nBeth nodded and pulled her cell phone out of her pocket, \"I turned it off last night,\" she explained, \"my folks like to see where I am by tracking my phone.\"\n\nShe wandered out to the back porch to talk in privacy, and I started making two plates of waffles. I had known Beth long enough to know what she liked, and I started making a plate for me and her.\n\nMy mother came down from the upstairs first. How she always looked beautiful even in the morning was a mystery. She saw me and made a bee-line towards me. My eyes must have gotten wide, because she hurried.\n\n\"Don't run away,\" she said, \"I just need to talk with you. I\"m not angry.\"\n\n\"Why?\" I asked, \"because Beth stayed the night? Mom, we're both adults now.\"\n\n\"Yes,\" she said, \"I understand that, I want to talk to you about something else, about how my side of your genes work.\"\n\n\"Your side?\" I asked, \"Dad just told me about how I can mold people's morals and self-control. I didn't do anything to Beth, I promise.\"\n\n\"Yes,\" My mother nodded, \"Your father was right about that, and I trust you when you tell me you've not used that power. My power is a bit more subtle. I'm like a succubus.\"\n\n\"A sex demon?\" I asked confused.\n\n\"Well, I prefer sex angel,\" she said with a smile, \"and I think you have the same power. I can generate sexual energy, and I can feed from the sexual power, and regenerate it to those near me.\"\n\n\"What do you mean?\" I asked.\n\n\"She means, she can make sex feel really really good,\" Carmen said, then winked at me.\n\nMy mother blushed, it was an unspoken knowledge that my father shared his bed with the four women that lived upstairs. Everyone knew it, but we never talked about it. Outside of the house, people just didn't seem to notice. I thought it was kinda cool, and I loved each of the women that looked after me.\n\n\"Well, yes,\" mother said, \"I guess that sums it up. Carmen do you think Zac has the same ability?\"\n\nCarmen blushed, then nodded, \"I have to watch myself when he's around, and last night I had a really nice dream. Knowing Beth stayed over explains it.\"\n\nI was struck dumb, and my mouth hung open, my mother chucked her finger under my chin, \"You'll catch flies, dear.\"\n\n\"So, what can I do about this? Does that mean Beth only likes me for that power?\" I asked as I watched her talking to her parents out on the porch.\n\n\"No, I'm positive she genuinely loves you,\" Alyssa said sliding past me from behind coming in from the gym, \"I know these things, Zac.\"\n\n\"How do you know? Don't tell me.. I suppose you have special angel powers too?\" I asked a bit sarcastically.\n\n\"Yes, I do\" she thought and her lips didn't move, as she looked back and lifted a brow.\n\nMy mom tapped my chin again, and I closed my mouth. I really didn't want to catch flies, but I was shocked about what all this meant. Beth was talking excitedly on the phone, and rubbing her eyes. She looked sad, and I felt my mind reach out to her. I felt her emotions on edge, and her moral graph sparked with activity as she talked with her parents. I couldn't tell what she was saying, but she was upset. Her parents were mad, but she felt she was old enough to make her own decisions. \n\nFinally she hung up and I felt her graph shift slightly, she'd made a decision. She wiped her eyes then looked inside, stood straighter then walked back inside. I walked over to her, whatever my mother needed to tell me could wait. I wanted to comfort her. I hugged her, and she looked up at me.\n\n\"Do you think your parents will let me stay with you?\" she asked, her voice cracking.\n\n\"Why? Can I ask,\" I started, \"what happened?\"\n\nAlyssa had a distant look in her eyes, then nodded at my mother. My mother came and wrapped us both up in a hug.\n\n\"Of course,\" she said, \"We have a spare room, you can use as long as you need to.\"\n\n\"We need to discuss how your powers work,\" Alyssa's thoughts pushed into mine, \"before we make a habit of sleepovers. Just because we love you, Zac.\n\nBeth turned to my mother, \"Thank you Mrs. Jackson, I really appreciate it. My parents think if I'm an adult I should live like one. They want me out by the end of the day.\"\n\n\"Please, call me Kelly,\" she said, \"We can help you with anything you need, sweetheart.\"\n\nI felt the room shimmer and a wave of light seemed to flow from my mother. Beth's mood lightened slightly. My mother squeezed me and Beth, then went to the kitchen counter to fix her waffles.\n\n\"Let's eat first,\" she said, \"I would like to speak to your parents, but not on an empty stomach.\"\n\nMy father came into the room, and looked at me. He came and hugged me tightly, \"We've got your back, son. We'll always love you.\" He always seemed to know what was going on, even when he wasn't in the room. I looked over at Alyssa and she smiled at me, and silently ate her waffles.\n\nClearly, my family had more secrets than just the number of women in my father's bed.\n\nPast: Jeremiah\n\nI opened my eyes to the light of the morning. The face beside me was foreign before my thoughts returned. It was Jenn, still sleeping. The rest of the bed was empty, and I felt my lovers suggest I spend some with with our new member. They would check on Rebekah and come back soon. \n\nI smiled, and brushed Jenn's amber locks from her face. She seemed to be content to sleep. I smiled at leaned over and kissed her gently on the forehead. Her brown eyes fluttered open, then focused on me, and slowly smiled.\n\n\"So yesterday wasn't a dream,\" she said quietly, \"I'm still safe.\"\n\n\"You'll always be safe, now.\" I said, and let her wake up.\n\nShe was naked, as was I, under the warm blanket we shared. She pressed closer, her full breasts pushing against my chest. She looked up at me, and kissed my lips softly. Then pressed her mouth more firmly against mine. I enjoyed her kiss, returning her gentle probe. She pulled back and looked at me.\n\n\"It was you with Kelly,\" she said, \"That night in the dorm?\"\n\nI nodded, \"Yes, you were checking on her, after her break up.\"\n\nShe nodded remembering, \"Then you left, and Kelly was suddenly very sexual. I had a crush on her, I used to think I was a lesbian.\"\n\n\"What made you change your mind?\" I asked softly caressing her shoulder. \n\nHer near presence was having a slow effect on my cock, it wasn't urgent. I was curious to find out more about Jenn. She had slipped into our ring almost by accident. When I thought about it though, Alyssa was right, everything that had happened to us was almost by accident. Or fate, as Lexi liked to say. Why couldn't Jenn's presence also be fate.\n\n\"I'm not fully sure I'm not still,\" she smiled, \"I'm attracted to men and women, almost equally. I just never had any sex until Kelly and Lexi. Then Carmen joined us.\"\n\nShe laughed, slightly, \"Carmen was the first person to fuck me,\" she remembered, \"it was her strap-on, but the shape made me reconsider men.\"\n\nI felt her hand drift down my chest, then touch my thickening member, \"Yes, I do like that shape.\" she smiled, and started tugging gently on my thickening shaft.\n\nI leaned into her, and she rolled onto her back. I kissed her and my hand lifted to cup a breast. As my thumb pressed into the star along the curve of her breast her nipple hardened and she drew in a deep breath.\n\n\"Those are like turn-me-on buttons,\" she groaned. \n\nI leaned down and kissed the other star, and she arched her back as her other nipple went rigid. I sucked on the hard buds one at a time and she lifted her hands to my head, and combed through my hair. \n\nI rolled over her, and she spread her legs. I didn't want to enter her yet, I wanted to take my time and explore. I leisurely sucked and licked her breasts, their shape and feel were lovely. They were warm in my hands and chewing lightly on her nipples seemed to bring her to the edge. She lifted her hips her mound pressing into my abdomen. \n\n\"Oh god, my pussy is molten,\" she said.\n\n\"Mmm, I want to taste that,\" I growled and kissed my way down her firm abdomen. \n\nI could feel her supple muscles squirm under my lips. I kissed the flower at the crest of her mound, and her hips bucked. I slid my hands up her thighs, and she lifted her legs up as I spread them apart. He pussy glistened in the morning light. \n\n\"Oh gawd, just fuck me, please,\" she pleaded.\n\nI took my time, and tasted each of her swollen lips, I licked in slow circles, tasting the tangy dew that seeped from between her inner lips. I stiffened my tongue and cleaved between them and was rewarded with a sweet tangy mouthful of her musky fluid. I wasn't sure if I had tasted it before, last night's lovemaking wasn't clear who's was who's. But this morning, I loved her taste. \n\nI felt her thoughts fill with her need. Her emotions sparking, she wanted it harder faster. She also was thrilled that I was taking my time and wasn't in a hurry. She curled her fingers in my hair, and steered my mouth to where she wanted it. I lifted my hands up and cupped and squeezed her breasts. Her legs spread wider as I discovered what spots made her squeak and moan.\n\nShe was trembling and on edge when I rose up, and then pressed a finger into the rose.\n\n\"Cum for me,\" I commanded tracing the petals with my fingers.\n\nHer body stiffened then shook, involuntary tremors racing through her thighs as her core convulsed. She looked at me wide-eyed as her body shook. I kneed forward and pulling my foreskin back pressed my sensitive crown against her pulsing open lips. She lifted her hips and I slowly thrust my hips forward. \n\nShe shook as I slowly filled her, her canal clenching and milking my shaft as it invaded her inner depths. She arched her back and lifted her hands gripping my shoulders and pulling me down. I kissed her deeply, as my hips drew back then slipped back down. I was in no hurry. I wanted to make love to her, I knew I could fuck her hard, and she'd love it. I wanted to take her my way, selfishly, I wanted to be her first real lover.\n\n\"Oh Jeremiah,\" she cooed as I parted the kiss, \"Keep doing that, oh please don't stop.\"\n\nI had no intention of stopping. I lowered my mouth to her breasts. My back curling as I bowed over her. She arched her back, lifting her breasts for me to worship. I kissed her stars and ground my hips into her flower. Her body shivered under me, as I steered her body and soul to the heights of ecstasy. She came again, then it crashed into another peak. My thrusts grew faster as I pulled my mouth from a firm nipple, and rose up on my knees. My hands gripping her hips as she wound her ankles behind my back. I drove into her, my cock like a piston endlessly pounding into her core. Her body lost in wave after wave of orgasmic bliss. Her eyes rolled back as her breathing keened into a series of moans. Then I stiffened and slammed forward, locking my hips and grinding as my cock pulsed, pouring a load of my cream into her womb.\n\nI stayed pressed into her, looking down at her. Her body twitching randomly, then slowing. Her eyes fluttered open, and her focus returned. I leaned back down and kissed her, my legs slipping from under me as I rested my body on her smaller frame. She wrapped her arms around my shoulders and then she started to cry happily.\n\n\"oh this...\" she said, \"this is what I always wanted...\"\n\nWe rested with my cock inside of her. She slowly clenched her muscles, feeling me slip slowly in and out as I moved. Her hips rolled slowly, not slipping back into arousal, but just languishing in the bliss of our coupling. Her curves shimmed as I scanned her, shifting into a more normal shape.\n\nPresent: Jenn\n\nI impatiently tapped my fingers on the steering wheel of my car. Why the light was red was irritating me. It was Sunday morning for God's sake, people were either in church or asleep. I couldn't stand to wait at a fucking stop light. My eyes blazed in frustration as I looked at myself in the mirror and checked my makeup.\n\nYesterday had been hell. It wasn't that I had to stay home with my sick daughter Sophie, Friday night. The girl was a gift, and a joy. I hated seeing her sick. It was more that I missed being at Jeremiah's party. I missed being near Kelly, and Lexi, and Carmen, and Alyssa. We saw each other regularly, but it was rarely all of us at the same time. Jeremiah's birthday party had been circled on the calendar for months. That I had to miss it was still a bit of a heartache. \n\nI took out my frustrations on Jerry. Why he puts up with me I don't know. He said the party was fun, but that Jeremiah seemed distracted, and Kelly was worried about something all night. I tried to get more information from him. Without me there, I'm sure he didn't enjoy himself. For all the amazing qualities the man had, social butterfly just wasn't in his DNA. He knew I was best friends with all of them, but he didn't realize how deep our connection was. It pissed me off that he thought I wouldn't have enjoyed myself at his party.\n\nI was hungry, I knew it. It had been too long, I felt it. I tried to let Jerry soothe the itch, after he got back from the party. I had waited up, long after Sophie had gone to sleep. I dressed up in Jerry's favorite sexy lingerie. I had used my toys, though I didn't need to, I was already aroused. I had been for days. When Jerry came into the bedroom, I practically attacked him. I was on my knees pulling his pants down before he had closed the door to our bedroom.\n\nHe was surprised, but not shocked. He had a bit too much to drink, so getting him ready was a little more difficult than I was expecting. He gripped my head, the way I told him to, the way he'd grown to like. But his cock wasn't getting hard, and that pissed me off. I stroked him, sucked on his balls, let my finger press into his tight anus. \n\nFinally he responded, and I licked my lips and looked up at him. He had managed to get undressed as I hungrily worked at his manhood. So I scampered up to the bed, and got on all fours. He wobbled his way onto the bed, and I realized he was still a bit tipsy. I might need to take things into my own hands. God, I needed a good fucking, why couldn't he see that. \n\nI turned and tugged him down, and he rolled onto his back. His cock stiff, and raised up to his belly. He smiled as I straddled him, and then grabbed his cock and pushed into my needy cunt. He groaned as my hips circled and I worked on his shaft. I twerked, that's what the young people call it, on his manhood, loving the feel of how he just fit inside me so perfectly. I looked down at him and his eyes were closed and his breathing regular.\n\n\"NOoooo,\" I screamed, and in my frustration slapped him across the face, \"Fuck me dammit, don't go to sleep.\"\n\n\"Okay baahby,\" he slurred, but it was a losing battle, the alcohol had won. I tried to work through it, at least his cock was still hard. That was even more frustrating as it began to wilt. That was a shot to my ego, though my brain knew he was just drunk, my emotions had me on the edge. I was nowhere near any sort of orgasm. \n\n\"FUUUCK!\" I roared in frustration, and rolled off my loving husband. \n\nI reached under the bed and went for the emergency kit. The Japanese made, electrically powered, plugged into the power grid, wand of magic. I spread my legs and pressed the ball of joy to my clit and groaned as it sang my favorite song. I think the street lights outside dimmed as I worked it feverishly up and down my engorged lips. \n\nFinally some arousal, and I used one hand to pinch my nipples hard. I rubbed at my stars and that helped, those fucking tats could be irritating in the wrong setting, but now I was thankful for their curse. I let my thumb run up and down my flower, and groaned as my cunt convulsed. I needed a cock, dammit, something deep in me. I almost cried as I realized the hitachi wasn't going to get me there. \n\nIt was okay, I had another trick up my sleeve. The rabbit! I turned and grabbed that thick vibrating wand of joy, and pulled the ball of the wand up and shoved that stick up my needy cunt. I needed four hands, and two wasn't getting me there as quickly as I wanted. It was slow, and frustrating. By the time I finally came, I was crying. It wasn't enough.\n\nI am woman enough to admit I was a bitch to Jerry the next morning and all day. He tried to make it up to me in the morning. But his breath still reeked of alcohol, and I was still pissed at my failure to self-please myself to sanity. Even hung over, he understood I was past the point where he could really satisfy me. He also knew I'd be a vicious bitch until I was satisfied. \n\n\"Baby,\" he said, \"Why don't I take Sophie to OMSI Sunday, and you can have a spa day.\"\n\nThat man loves me! He knew exactly what I needed. I made a phone call and was relieved to know that they had time to fit me in. That's a bit of an overstatement, they always had time for me. I felt a little guilty that I was so needy. I should be able to handle my own needs after all this time. At least by Saturday night, and another try with Jerry (somewhat satisfying), I had something to look forward too.\n\nBut then this fucking light!\n\nLooking both ways, I checked carefully for any cars. Satisfied, I floored it, and passed through the red light. The flashing red and blue lights in my rearview window made me cry out in rage. I was close to losing my shit, and I barely held it together while the mousy brunette cop wrote me out a ticket. Fucking bitch, what the hell is she doing writing me a ticket when there was no traffic.\n\nFinally I was on my way, and I could feel my insides clench as I drove up the long driveway to the house. I parked and put my keys in my purse, and slipped out of my car. I walked up and knocked, feeling antsy. I was almost doing the I-need-to-pee dance I was in such a state. Finally the door opened.\n\n\"Oh! Hi Jenn,\" said Lexi with a smile, \"Come in, we're just finishing breakfast.\"",
        "I just leaned into her and kissed her deeply. She cooed and pulled me closer. This girl got me, as she grabbed my ass and squeezed hard, then swatted my cheek with her other hand.\n\n\"It's been too long,\" she smiled as I finally broke the kiss, \"I missed you Friday night.\"\n\n\"I know,\" I said shortly, realizing she'd forgive my rudeness, in my state. I knew she felt my frazzled mind, and I almost welled up in tears as I reconnected to the mesh of my soul lovers. She let me pass by her, and I walked through to the kitchen. Some young girl was with Zac, and Everyone else was huddled around the kitchen table talking.\n\nI probably could have figured things out if I was in the right state to tune into everyone's thoughts. They always included me in their broadcasts, but in my state I was focused on one thing. I made a bee-line to Jeremiah, and gripped his head. I didn't care that Zac's friend was staring at me like I had three breasts, I kissed him deeply. God, I loved the way Jeremiah could change his focus, his kiss was what the doctor ordered. Then he broke it off, and I remembered they had company. \n\nSuddenly, Carmen was at my side. I turned and kissed her, and she hastily pecked at my lips, then steered me away from the kitchen. I was confused as she led me away. We were going where I wanted to go but she wasn't usually so rude.\n\nShe pushed me downstairs, \"Fucking needy slut,\" she swore at me, \"You get so fucking impatient when you let it go too long.\"\n\nShe steered me through the basement gym, and then fingered the electronic combo lock on the door on the opposite side. I was almost dancing with excitement. She reached up and grabbed a handful of hair at the nape of my neck, then tossed me in the room. It was a large spacious room filled with dark leather furniture, and other equipment. Oh God, how I loved Jeremiah's spa-slash-dungeon.\n\n\"Strip, slut,\" Carmen ordered, \"Wait for us on your knees, and don't you dare touch my cunt between your legs.\"\n\nShe got me, that girl, \"Yes, Mistress,\" I said and started peeling of my clothes.\n\nShe closed the door leaving me locked in the dungeon. She knew I was on edge. She knew I was a needy slut. She knew I needed to be put in my place. She knew until I was centered I would be a danger to myself.\n\nI smiled for the first time since Friday. I knelt naked in front of the door, bowed my head, and waited. I was home, I could wait. I concentrated on slowing my breathing, and finding my center.\n\nPast: Jeremiah\n\nIt was a short nap. Waking up to a nubile female undulating under you, whining with sexual need is something every red-blooded male should do at least once. It made me feel a bit powerful, and my cock was already hard. I pressed my hands into the mattress and rose up.\n\n\"Fuck,\" Jenn said, with a tinge of frustration, \"took you long enough.\"\n\nI started to thrust into her, and she wrapped her limber legs around my waist. She let her body fall as I drew back, and then humped her hips as I thrust back into her. It was delicious, but something seemed off. She seemed frantic, needing more. I pulled back from her.\n\nShe looked wildly up at me as I disengaged, almost in a panic, \"Nooo fuck, I need it, Jeremiah, fuck me,\" she hissed.\n\n\"On your knees,\" I commanded in a gruff growl, putting together the pieces in my mind, \"Ass up head down.\"\n\nShe scrambled onto her knees, twisting. Her breasts pressed into the mattress as she laid her head down. Her hips danced enticingly as she spread her thighs. The one thing that drew my eye was the tattoo at the base of her spine, it was an angry shade of black. I had noticed the tattoos on her breast and mound had faded to a more natural color. I swung my hand back and spanked her ass hard, so hard my hand stung.\n\n\"Owwwuch, FUCK,\" she cried, then moaned, \"Yes, that's it.. .spank me, spank me please.\"\n\nI turned to the side, my cock bobbing as I lined up and swatted her ass again, hard as the first time. She took the strike wordlessly, and then pressed back. She twisted her head and looked up at me with a deep need in her eyes. A need I'd seen before in Lexi, when Carmen first showed me how to flog her.\n\nI spanked her again, and again. Her ass turning a rose color. I turned and spanked between her thighs, my palm flattening into her soaked folds, and she bucked and ground into my fingers. I moved so I could finger her with one hand and spank her with my other hand. The tattoo pulsed each time I struck her, and her body vibrated as the pain-pleasure response cycled and filled her blood with endorphins. The whole scene made my erection strain with need.\n\nI shifted behind her, and lined up my head. I thrust into her swollen cunt with a hard thrust. She keened in lust, looking over her shoulder at me. I gripped her reddened ass cheeks and spread them apart. Her anus danced as she rolled her hips to my steady strokes. I spit on my fingers then spread my saliva over the tight opening.\n\n\"Oh fuck,\" Jenn spat, looking back at me, her eyes on fire with lust, \"Yes, fuck my ass. Make me your ass slut. Own it...\"\n\nI swatted at her ass cheek, then again, steady hard strokes over her round firm bottom. Between slaps I worked a finger into her tight anus, spitting on my fingers to lubricate the small opening. I was two knuckles deep when she cursed at me.\n\n\"Fuck it,\" she spat, \"Fuck my ass, make it hurt, I need it to hurt. Just put that fat dick up my ass!\"\n\nI pulled my cock from her cunt and spit another wad of goo into my hand, spreading over my crown. I pressed the thick head into her anus and leaned into her. I felt her relax and the head slid in, then past the opening. I felt my hips drop and my thighs press into her bottom. She groaned at the simultaneous pain and pleasure that coursed through her nerves.\n\n\"That's it, take my ass, Daddy,\" she sang.\n\nI was fired up now, and I pulled out then slammed back in. I used my hands to swat and spank her ass and thighs as I rode her hard. She rolled her hips and tossed her head. I leaned forward, and she followed, her ass rising to meet my angled thrusts. I pressed my hand into her head and shoved her cheek into the mattress.\n\nI was overwhelmed with a surge of power as my body, hands and fingers dominated Jenn. I pushed her into the position I wanted. I grabbed her head and tugged her chin up by yanking on her hair. She arched her back, rolling her hips as I fucked her ass feverishly. My free hand stung her flesh with slaps and spanks. I reached under her folded body and gripped one of her breasts hard, then pinched her rock hard nipple tight and twisted.\n\nShe screamed as she came, her body shaking with intensity. I hammered into her ass repeatedly fucking through the first wave. I pressed my chest into the small of her back. My hand crushing her head into the bed. My hand reached around her thigh and wormed into her spasming folds. My lower back rolled as my cock stretched her ass. My fingers drove into her convulsing cunt, and her orgasm hit another peak, then just vibrated as I clung to her flesh. \n\nI roared as I felt my peak rush and collect at the base of my spine. I arched my back and thrust my cock in deep, feeling my balls tighten then pulse spurting jets of hot cum into her bowels. My hands grabbed her ass and pulled at it, wanting to go as deep as possible. her head flew back and she screamed then her head flopped into the mattress. I froze, my breathing ragged as I blinked and fought for a conscious thought.\n\nI looked down and where before her ass tattoo was an angry black, had fated to a muted dark grey. Jenn relaxed into the mattress, and I pulled out. She curled into a ball, seeking her own comfort. I remembered Carmen's lesson on aftercare, and pulled her close, my arms wrapping around her sides, her back against my chest. I pulled the covers over us to keep us warm. I spoke softly to her, \"You're mine, now.. My little ass slut. I've got you, you're safe.\"\n\nShe was speechless, but turned her head to look at me. I kissed her gently, pressing my lips to hers. She responded softly, her tongue softly running over my lips. I just held her, making her feel my presence wrap around her. \n\nMore hands touched my back through the sheet. Carmen curled behind me, and kissed behind my ear. Lexi slipped onto the opposite side of the bed, facing Jenn and smiling at me. She fed Jenn a small square of chocolate. Then kissed her forehead.\n\n\"Good job, Papi,\" Carmen cooed into my ear, \"You remembered everything I taught you.\"\n\nI smiled and sighed, \"So three? three submissives,\" I questioned with a chuckle.\n\n\"Oh, at least three now,\" Carmen said and was content to just hug me as we rested.\n\nPresent: Jeremiah\n\nWell, it's an old blessing to wish that one lives in interesting times. The look on Beth's face when Jenn entered and kissed me only made the interesting morning more fascinating. Alyssa knew what was going on, and so did Kelly. Jenn had been away too long, and she was in bad shape.\n\nI blamed myself, I was supposed to be her Dominant, her Master. Her husband, Jerry, knew of our relationship, because he couldn't put his own mind into the place she needed it to be. I could have adjusted him to take that role. But I was a bit nervous about making wholesale changes to people's moral curves. Selfishly, the easier role was to play the role of Master. That was an easier fix to Jerry. It had the added benefit of keeping Jenn in our mental web. All of us enjoyed when she visited for her deeper needs.\n\nI should have had the girls check up on her, evaluate her. She was always thinking she could manage her needs on her own. I was wrapped up with my work, and my memories surrounding my birthday. The birthday party had pre-occupied everyone, and Jenn had slipped from our thoughts. Isaac's awakening had further distracted us.\n\nBeth looked a bit wild-eyed at the new sexy woman that had come in and kissed me. She didn't understand the context. She was already in a state because of her parents attempt to control her, by kicking her out of the house. I could fix that in an instant, but I didn't want to wade into another family. If anything, this was Zac's responsibility to manage. I wanted to mentor him, and guide him, but he needed to take that step on his own.\n\nAlyssa watched all this silently, then with a flow of thoughts, Carmen had swept in and steered Jenn to the basement. Lexi followed behind. I knew they could help Jenn unattended for a while. Kelly took Beth's arm and led her to the table and sat her next to Alyssa. Zac sat down beside her, and then Kelly took a seat. I sat on the far side between Alyssa and Kelly. I looked at Zac and Beth.\n\n\"Zac, you know I love you and support anything you do. Beth, you are a wonderful girl, and i can tell you love Zac, and he loves you.\" I began, taking the lead in the conversation. \n\n\"I'm just lost,\" Beth said on the verge of tears, \"I never expected my parents to kick me out. I shouldn't have snuck out, I should have told them I was leaving. They must think I'm a horrible person.\"\n\n\"It sounds like an over-reaction for sure,\" I said, \"These things can usually blow over quickly. You both need to talk with Beth's parents.\"\n\n\"Both of us?\" Zac asked quietly.\n\nI knew he was frightened, scared of a confrontation. If there was anything we had tried to teach him was it was better to talk out a problem than to hide from one. This was with other people though, not his supernaturally patient parents. \n\nI smiled, at him, \"You know you need to, Zac,\" I said.\n\nI felt Alyssa push her own thoughts towards him. He nodded as he took both of our meanings. Beth looked at me and then at Kelly. \n\n\"Can you come with us?\" she asked, also frightened and scared.\n\n\"It's something you need to do,\" Kelly said, \"for yourselves. Regardless, we will support the both of you. You'll always have a place to call home here.\"\n\n\"What do I say?\" Zac asked.\n\n\"The truth,\" I said, \"I don't need to tell you what that is. Then you listen and observe.\"\n\n\"Sense their conflict,\" Alyssa pushed a thought, \"there is an opportunity to fix things.\"\n\n\"Is he ready?\" I wondered, \"He hasn't been trained, maybe we should hold off a day.\"\n\n\"Talk to Beth's parents,\" Alyssa said, picking up on my concern, \"Listen to their concerns and observe their fears. Then promise to come back and talk again tomorrow. You can't put this off. We can talk more after you've spoken with them.\"\n\nZac nodded, and looked at Beth, \"Beth, I love you. I want you to be happy, and I want your parents to support us. Let's go talk with them in person.\"\n\nBeth nodded, \"Yes, I think you're right. I love you Zac, you're always so brave.\"\n\nI smiled and felt pride in my son's maturity. The three of us followed the youngsters to the door, and bid them farewell. Then we took a collective deep breath, and looked at each other.\n\n\"Now to take care of Jenn.\" we all said at once.\n\nWe filed downstairs and into the gym. I had spent too much money on all the equipment. It got good use, though, Lexi was always pushing us to stay in shape. I also made a shower and dressing room (co-ed of course, no need for separate dressing rooms). Carmen and Lexi had persuaded me to make a dungeon too. The three of us went to the dressing room to shed our clothes. \n\nEach of us had a locker, and Carmen kept it supplied with each of our preferred outfits. I don't have much of a taste for fetish wear, I just don't want to be flopping around while doing my work. So a pair of leather shorts was mine (Apparently, it had to be leather according to Carmen, don't ask me why). Alyssa had a selection of tight leather bodices, leather thongs, and had grown fond of thigh high boots. Today's color was red, a deep red that looked amazing against her lightly tanned skin. Kelly, had similar tastes, and our roles had them both more dominatrix than submissive slave. Her white leather bra and thong made her look brilliant.\n\nSuitably attired we entered the dungeon, again I'd have rather called it something different, playroom, adult lounge, but given this was a treat more for Carmen and Lexi, I allowed them to name it. It stuck, especially once Carmen procured all the different apparatus she wanted. Leather and dark wood dominated the room. The walls were a dark shade of grey, with perimeter lights around the edge. The room wasn't dim, but it wasn't bright either. \n\nWatching Alyssa and Kelly dress up had made my shorts tight already, our three submissives only made them tighter. They all had on leather collars, their permanent silver chokers for which I had the only key glimmered under the black leather. They also all wore leather cuffs on their wrists and ankles. I couldn't see, but I knew Carmen's protocols, they were all plugged as well. Other than that, they were all naked, and aroused.\n\nCarmen was finishing trussing Jenn to a X-shaped cross. It had been custom made and cost a pretty penny. The cross was made of carbon fiber, not wood, so it was much thinner. the cross shape was really two deltas inverted and pointing to each other and connected by a carbon fiber beam. The vertical axis had an adjustable joint, once attached the cross could be spun, and even titled almost horizontal. \n\nJenn was facing the cross, so her back was to me, as Carmen secured her wrists to the clips at the tops of the upper vee. Her ankles were already secured to the base. Lexi was laying out lengths of rope. I had found I enjoyed the intimacy that rope bondage presented, but I wasn't sure about this morning. It was a lengthy process to bind and unbind, and Jenn was already frazzled.\n\nAlyssa and Kelly went and sat themselves at a overstuffed loveseat facing the cross. They were both more observers, voyeurs really. Besides using their powers to amplify the responses, they were also safety observers. They also loved to play with each other, so the ordeal wasn't like chewing sand for them. I they needed more stimulation, Carmen or Lexi were always a finger snap away.\n\nI decided to forego the ropes, and walked to find some leather straps. The cross was sturdy, but I wanted to keep Jenn's body tight against the frame. I gave them to Lexi and she and Carmen strapped Jenn's waist, lower thighs and upper arms to the frame I walked around the other side and Jenn's full breasts were exposed on either side of the thin carbon beam that bisected her torso. Her neck collar was clipped to the apex of the top vee, so she had limited movement of her head, but an unobstructed sight line. She caught sight of me walking around and watched as I stalked closer.\n\n\"Took you long enough,\" she sassed, as she watched me with humid eyes.\n\nI was patient, I knew what she needed, but I wasn't going to be rushed. Part of the journey was the anticipation. That she was helpless added to her stress, but she also knew this was safe. I stepped closer, and looked deadpan into her eyes. I didn't need to, because her nipples were already hard, but I pressed on her stars with each thumb. My fingers gripped her full breasts and squeezed hard at the base. \n\nShe groaned as her nipples engorged further, and her supple breast tissue ballooned between my fingers. Her eyes blazed at the rough contact, and I just watched impassively.\n\n\"Watch your tone with me, slut,\" I said in a low growl, \"Or I'll gag you. I like your filthy whore mouth, and I'd hate to take it out of play.\"\n\nShe lowered her eyes as my fingers dug deeper into her flesh, milking the flesh until I had just the base of her nipples grasped between a finger and thumb. \n\n\"Yes, Master,\" she said, her tone expressing more relief than acquiescence. \n\nI stepped back from her and grabbed two nipple clips attached to a chain, and walked around behind Jenn so I could watch the girls on the loveseat. I pressed my chest against Jenn's body, and reached around to grab one breast, and then pressed the star again. I waited for the nipple to engorge, then pressed the clip into the base of her nipple. \n\nJenn hissed at the pain, but tossed her head as her body started to respond to the feeling. I nodded my head and Carmen and Lexi drew back, kneeling beside Aly and Kelly. Carmen kissed Alyssa's thigh, and Alyssa spread her leg open and then grabbing a handful of Carmen's black mane tugged her mouth to her exposed pussy. Kelly was watching captivated and reached around to unclasp her bra, then pulled Lexi's mouth to her own hard nipple.\n\nThe room started to shimmer as Kelly's power permeated the space. We all took a collective breath at the feeling. I pulled back and selected a flogger from the bench near the cross. I swished it to get a feel for it's heft, then bending over started to paint the traces along the bottom of Jenn's calves. My strokes weren't heavy, yet. I just wanted to blush her skin. By the time I was swinging the flogger at her shoulders, her whole back side glowed a nice hue of pink.\n\nI watched her, and listened to her breaths. I like to rely on physical cues when I worked, though in this setting our mental web was also helpful. She was shivering in arousal, her tattoos across her ass pulsed a dark angry black. The foursome at the sofa were becoming more animated as the sound of the flogger smacking willing flesh faded. \n\nThe foursome had swapped positions. Kelly was on the floor her bare chest rising and falling as she played with her nipples. Kelly leaned against the sofa while Lexi's red mane was between her spread legs, her pert bottom facing me and her jeweled butt plug dancing as she orally pleased Kelly. Carmen was on her back on the sofa, her head just behind Kelly's blonde mane. Alyssa was on her knees, her legs scissored between Carmen's the pair caught up in the act of tribadism as they rolled their hips and ground their cunts against each other.\n\nThat was the scene that was playing out in front of Jenn's eyes as I had warmed her flesh. I cupped my hand between her spread thighs and wormed my finger into her soaked folds. She gasped and tried to grind into my fingers. Her body had limited range of movement and she whined in frustration.",
        "\"Fuck me, Master,\" she cried as I teased her folds, \"Please just shove that beautiful cock in my dripping cunt.\"\n\nI loved her mouth, but I pulled my fingers away, \"In time, Perhaps,\" I teased and put away the flogger. \n\nI disengaged the lock on the sturdy joint at the base of the frame, then I pulled the frame backwards to horizontal. Now she hung from the frame, the leather straps easily supporting her weight, but her head fell backwards staring at the opposite wall. I locked the joint back down, and walked around until I was standing at her head. She looked up at me, and I pulled my waistband down, and released my hard erection. She opened her mouth with a growl and I pressed the tip between her lips.\n\nI hesitated, letting her suckle and kiss the head, using her tongue to press my foreskin back, and expose the sensitive glans. She groaned at the taste, and I took a moment to watch the four others. Kelly had crawled over Lexi, who had rotated onto her back. Kelly was fingering Lexi's cunt as she lowered her mouth to lick her clitors. Carmen had twisted on the sofa, her hands gripping Kelly's ass cheeks and had her head pressed between the full moons, licking at her anus. Kelly's hips were moving as Lexi was licking her clit, the pair teasing both of her holes. Alyssa was still grinding into Carmen's cunt.\n\nI fed my cock into Jenn's inverted mouth until my balls pressed against her nose. She gagged at first, feeling the crown press into the back of her throat, but she swallowed and then I was fully engaged in her throat. I reached down and gripped her tits as my hips worked my cock in and out of her mouth slowly. The nipple clamps were bouncing as I massaged her mounds, and flicked my thumbs over the star tattoos. Each flick sent a tremor of pleasure through her body. I felt her mind begin to spin and pulled my hips back. My cock slipped from her mouth wetly and a thick string of her saliva drolled down her cheeks. She sucked in a heavy breath, then nuzzled trying to get my cock back in her mouth.\n\nI pulled back and grabbed the handle of the flogger, slipping to the side I started painting the tendrils of leather over the flesh of her abdomen and thighs. She jerked at the first sting, her head bending up to look at me, as I smacked her warm flesh again.\n\n\"Yeoughh..\" she groaned, then grunted with each heavy stroke.\n\nThe flogger wasn't very painful, more of a thuddy feeling, not sharp and bright, but I was still warming her up. I whipped her abdomen that was bisected by the thin carbon frame, then down her thighs. The frame bisected above her hips, and her hips were working her cunt swollen with arousal. I stopped facing her, and she lifted her head to hiss at me. I brought the flogger down heavily between her thighs, smacking her cunt with a thud.\n\n\"Yeurgh!\" Jen grunted, then moaned, \"Yess.. fuck yes, do that again.\"\n\nI hammered the heavy tendrils into her mound, the smacks digging into the flower tattoo and the mix of pain and pleasure sent her over the edge. Her whole body shook under the waves of her orgasm, as I continued to smack her cunt. When I stopped she was hanging from the straps and taking thin breaths. I let her recover, and released the brake on the joint, and flipped her back up angled slightly forward. She was now looking directly at the four women.\n\nAlyssa was sitting against the back of the sofa, with Carmen curled at her side. Carmen was on her knees, her mouth sucking one of Alyssa's nipples. Lexi had crawled between Alyssa's thighs and was lapping at her cunt. Kelly was reclined against the edge of the sofa, her head obscured by Carmen's brown thighs as she sucked and teased Carmen's clitoris. Kelly's own hand was plunging fingers into her own cunt. \n\nAlyssa was the only one watching Jenn, which was what mattered, because our hive mind was tuned into the play-by-play. I had sensed each of the girls had had at least two orgasms apeice. Kelly's aura had us all in a heightened state. My cock was aching and it was still covered with Jenn's spit. \n\nI stepped up behind her, and ran my fingers through her cunt. She groaned as I found her opening, then I guided my cock to her tight opening and slammed it in with one rough thrust.\n\nShe tripped off again as I started fucking her hard and fast. My hands reaching up to her shoulders, fingers digging roughly into her flesh. Her flesh was warm and red, and I scratched my fingers down her bare back, raking her flesh with my nails. She tossed her head and screamed out. Her cunt was clenching, and it was tight from the plug that Carmen had placed as part of her preparation. \n\nI was close to going to the lizard part of my brain, and just going wild, but I wanted Jenn to soar. I smacked her flesh, her ass, her thighs her back. Hard open handed pounding slaps that left red marks that quickly faded in the deep flush her skin had taken. I reached around and gripped her tits in my hand, filling my hands and pressing into the clips at her nipples. I felt where she was, and just when another wave hit her I pulled the clamps free of her nipples.\n\nHer body levitated and I could feel her detach, and fly. Her nipples engorged with a fresh pulse of blood, the numbed nerve ending lit up and the pleasure-pain sent her into subspace. I dialed back on my slaps and spanks, and just gripped her hips. Fucking her as her body spasmed and her mind flew. I grunted hard, just seeking my own pleasure, then roared as I filled her cunt with a load of my cum. \n\nI froze as my balls emptied, then leaned forward my sweaty chest against her warm reddened back. I hugged her tightly, as she regained her senses, my fingers traced over her flesh, running over the stars and flower tattoos, each touch sending her another shiver of pleasure. I coaxed her mind and body back to earth.\n\nThen we were surrounded by the others, they removed her straps and cuffs. I pulled her from the cross, and swung her into my arms. I carried her to the large king sized bed, and laid her down. The four other girls surrounded her as I climbed to my spot in the middle of the bed. She rested her back between my thighs, her head on my chest. I held her, as her sisters covered her in a blanket. \n\nCarmen offered her some water, which she drank readily. Then had a nibble of chocolate that Lexi offered. We all enjoyed the refreshments, and the warm aura of the blissful afterglow. The soft landing brought Jenn back into our web of comfort, she was sated, but not satisfied. She ground back into my, and my cock responded. \n\nThe sea of bodies parted, and Jenn turn around and kissed me. Her hand lowered and stroked my cock. I covered my hand with hers, and cheated using my healing power to bring it back to full strength. She smiled into my eyes, and lifted to her knees and straddled me. I groaned as my cock reentered her tight cunt, and she pushed back from me, leaning back onto her arms. Her hips drew up and down fucking my cock while I reclined on the head board.\n\nThe four others filled the space between us. Alyssa kissed me deeply, her fingers finding one of my nipples and pinching it hard. Carmen was sucking on my other nipple, her hand caressing my belly. I felt Lexi's mouth against the base of my cock as she licked and sucked my cock and Jenn's cunt. Kelly had pushed Jenn's breasts together and was alternating sucking each of her rigid nipples. \n\nFrom there I quickly lost track, our web of bodies shifting into a succubus powered blissful orgy. I shot my load into Jenn's cunt for the second time. Then Lexi's mouth was sucking my cock keeping it hard. I raised up from the headboard and got on my knees. Carmen was suddenly in front of me and I slammed my cock into her. \n\nThe girls arranged themselves into a ring, their asses facing me. I fucked each one until I was at the edge, then I would move to the next. They were kissing each other, hands and fingers touching each other as they waited their turn. I was soon pounding hard into Lexi, when she tripped into orgasm, I moved to Alyssa, pounding hard as I pressed her head into the mattress. When she came, I grabbed Kelly's hips and fucked her hard, her blonde mane tossing as she craned around to look at me. Her eyes glazed over and the room shimmered as she peaked. Then I was pounding into Carmen's ass, she had removed her plug and held her cheeks back. I fucked her ass, and pulled her head back by her hair.\n\nFinally I pulled out, and stroked my cock. The women twisted and laid on their back, their mouth open. I roared as I came, my jets of cum landing on breasts, faces, hair and open mouths. Then I fell back, they turned and crawled towards me. Lexi was the first to clean me, then shared with the rest. The last to suckle was Jenn, who was smiling, and I could feel was much less on edge. \n\nThey surrounded me as I rested, our minds slowly coming back into focus. Then we heard the knock on the door. \n\n\"Dad!?\" came Zac's voice, \"Beth's parents are here, they want to talk with you and Mom.\"\n\n*****\n\nAuthor's Note:\n\nThank you for reading, commenting and voting. I hope you enjoyed this chapter of the story. \n\nEditing props go out to mgenette again, who helps me use the right words correctly. His help and encouragement have been invaluable. Any remaining errors are totally my fault.\n\nRemember when I posted about final chapter? Well the muse laughed at me, and dumped a bunch of more ideas in my grey matter. At some point there will be a wedding, I promise. Maybe. Who knows what these characters will do?\n\nI hope you enjoyed this chapter, thanks for reading!"
    ],
    "authorname": "HankDolworth",
    "tags": [
        "mind control",
        "anal",
        "group sex",
        "bdsm",
        "bondage",
        "male dominance",
        "female submission",
        "anal sex"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-pt-02-ch-17"
}
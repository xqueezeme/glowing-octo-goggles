{
    "title": "Vox Dominus Pt. 20",
    "pages": [
        "Chapter 20\n\nSeb refreshed the web search, even as he knew there wasn't much point. Once again, his laptop screen was filled with business blogs and a handful of online profiles, none of which suggested anything amiss with Elise Jaeger or her many investments. Four weeks since her conversion, it appeared his newest slave was playing her role perfectly.\n\nFor now, anyway.\n\nMiki shifted in the chair next to him, and Seb quickly closed the tab before she could spy it. Fortunately, she was just grabbing her water bottle from the coffee table, and seemed too engrossed in her own screen to notice that her friend was cyber-stalking a business magnate instead of reading Sketch Night submissions. Seb felt a little guilty for letting his assigned task slide, but no matter how hard he tried to focus on the scripts in his inbox, his mind kept wandering to the elegant terror he had barely managed to collar, and what she might get up to without his supervision.\n\nMaybe the last few weeks had made him a little paranoid.\n\nThen again, he had good reason to be nervous. His battle with Elise had sketched out some of the limits of his powers, but there was still a lot about the Vox he didn't know. He still wasn't sure, for example, how long his subjects would remain under his sway. It could be that creating a slave was a like flipping a switch, or it could be more like a pressure gauge he had to constantly monitor. Either way, Elise was a very important, very dangerous test subject. Rather than keeping her conscious of her enslavement like Chelsea and Sophia, Seb had elected to hide knowledge of the Vox deep in the fallen matriarch's mind, along with several strict triggers and protocols. The subconscious Elise\u2014the one Seb spoke to on the phone from time to time\u2014was still very much under his influence, but as far as her waking mind was concerned, her visit to Diepner had turned up nothing remarkable. Well, save for a newfound respect for Chelsea's autonomy and taste in men, especially one young specimen in particular, whose intelligence and charm more than compensated for his lack of lineage, and who reminded Elise so much of her younger self.\n\nThat last bit had been Chelsea's idea. And, to her credit, Elise's new programming seemed to be holding strong. So long as Seb was careful, he could nudge her into certain decisions and trust her own consciousness to rationalize it after the fact, both to herself and any curious onlookers. At the time, this had seemed like the ideal arrangement: as nice as it would've been to have a once-proud aristocrat bowing and whimpering at his feet, he couldn't afford the collateral chaos that would come from yanking Elise out of her expected routines. Just battling one Jaeger had almost undone him; there was no way he could afford the scrutiny and scorn of their entire organization.\n\nSo Seb and his slaves had agreed to take it slow: make what changes they could safely afford, and save the more sweeping reforms for when the Vox's strengths and weakness were better understood. At first, this had come as a relief. Freed from the constant moral quandaries and mind games, Seb was able to enjoy school life as he used to, with the added benefit of having two adorable, obedient sex slaves eager to explore their new roles under him.\n\nBut now November was almost over, and here he was: wasting his time scouring the web for signs of disaster, unable to scratch the persistent itch that told him this hard-fought peace couldn't last.\n\nIf only he could Vox himself into worrying less. Seb made a mental note to look into that later.\n\n\"Oh!\" Tobias suddenly exclaimed from his spot next to Miki, shattering the quiet that had settled over the longue. \"I almost forgot, babe\u2014I checked with my mom, and she says it's cool if you wanna spend Thanksgiving at our place.\"\n\n\"Yessss, thank god.\" Miki high-fived her beau. \"Did I tell you my dad removed the lock from my door last year? I swear it's like they don't even want me to come back.\"\n\n\"Well, he's never been big on...boundaries,\" Tobias grimaced. \"What about you Seb? You're welcome too, if you want.\"\n\nSeb blinked. \"Uh...thanks, but...I think I have other plans.\" Shit. Thanksgiving. He had been so focused on Elise, the upcoming holiday had somehow completely slipped his mind.\n\n\"Gonna spend it at Sophia's?\" Miki arched an eyebrow.\n\n\"Maybe. We're, um, still figuring it out,\" Seb deflected with an embarrassed laugh. In truth, he had no clue how he was going to handle Thanksgiving. Spending the weekend alone with his parents was hardly ideal, but having to choose between Sophia and Chelsea was equally daunting. Sophia was the one he was \"seeing\" as far as public life was concerned, though her parents didn't know that yet, and there was no telling how they would react once they did. On the other hand, spending a weekend among the Jaegers was probably riskier, and harder to explain to outside observers. On the other, other hand, sending Chelsea off to deal with her family alone felt unfair, even if Elise continued to behave as instructed. Maybe Seb could bring Chelsea to Sophia's place as well. Would it be more or less suspicious if she showed up with two friends in tow? He would have to get her take on it later.\n\nAnother mental note to follow up on. Despite having two slaves at his service, Seb had never felt busier.\n\nA notification pinged on his computer: a new message in the \"HaremChat\" (Sophia's name, not his). Seb opened the thread and found a selfie of Chelsea standing in front of a hanging mirror, clad in nothing but a lacey maid apron, a playful smile on her face as she tugged one of the shoulder-straps down to offer a glimpse of a stiff pink nipple.\n\n[Chelsea]: Walked by this mirror while cleaning and just realized what I'd been wearing all day. I assume this is Master's doing?\n\n[Sophia]: whooooaaa\n\n[Sophia]: where'd he even find that??? bed bath &amp; boudoir?\n\nSeb smiled to himself and began typing.\n\n[Master]: Actually, Chelsea was the one who made the order, tho she probably doesn't remember that either.\n\n[Chelsea]: Ahhhh. Well I have good taste, if I say so myself. It's very, very soft ;)\n\n[Sophia]: asdkljadga;lkj\n\n\"Find a good one?\" Tobias asked over the sound of Seb chuckling. \"So far all my scripts have been a bust.\"\n\n\"Oh, no, sorry.\" Seb shook his head, and suppressed his grin. \"Just...thinking about something else.\"\n\nTobias nodded and turned back to his screen. Seb did so as well, savoring once last look at Chelsea's new \"uniform\" before closing the chat. He still wasn't sure what the future would bring, but he knew what would be waiting for him when he got home.\n\nAnd maybe that was enough, for now.\n\n_________________________________________\n\nSophia kept her face low as she stared at the phone on her lap, hoping it wasn't obvious to her classmates how aroused she was. She usually tried her best not to check the HaremChat when there were other people around, but an image post from Chelsea was too hard to pass up. True, it was sometimes just a recipe or outfit she was considering. But in this case, it had been yet another open display of her conditioning, complete with that trademark rosy tinge in the her pale cheeks, a subtle flush of embarrassment that never failed to make Sophia squirm. Who would've thought that the campus queen bee would become such a subby glutton? Sometimes her sluttitude even put Sophia to shame.\n\nAlas, not all of them could spend their Saturdays prancing around in fetish wear. Some, like Sophia, had to shackle themselves to a library worktable, trying and failing to get a group project off the ground. It didn't help that two of her assigned teammates were complete slackers, and had spent the afternoon producing more harebrained app ideas than workable code. At least their third, a sophomore named Zoey, was trying to keep them on task. And\u2014with her slight yet feminine frame, stylish cropped curls, and scooped-neck band t-shirt\u2014she was looking good doing it.\n\nAlso: she was looking right at Sophia. Apparently the conversation had moved on without her noticing.\n\n\"S-sorry,\" Sophia apologized, having trouble meeting Zoey's eyes. \"I think I kinda drifted off there for a moment. What was the question?\"\n\n\"See?\" one of her useless teammates chimed in. \"It's not just us. This assignment is just, like, a total buzzkill.\"\n\n\"Except she actually managed to finish her work,\" Zoey shot back with a glower. \"Right, Sophia?\"\n\n\"Oh. Um. Yes.\" It was true; without the usual nagging feelings of self-doubt, anxiety, and uncontrollable arousal, Sophia had flown through her schoolwork in record time. As it turned out, the structure and security of enslavement had done wonders for her productivity.\n\n\"So I'll ask again.\" Zoey crossed her arms. \"Can we count on you two to have this done by tomorrow? Or do we need to stay here all night and hold your hand through it?\"\n\nThe two boys exchanged a look, then muttered some half-hearted promises, already in the process of packing up their laptops and books.\n\n\"Alright,\" Zoey sighed and collapsed back into her chair. \"See you tomorrow, same time.\"\n\nSophia was already back on her phone as the group dissolved, updating her Master and sister slave.\n\n[Sophia]: group work just ended. gonna grab the movie and head over. you better still be wearing that outfit when i get there.\n\n[Chelsea]: Of course. Unless Master decides to take it off ;)\n\n\"Hey.\" Zoey's voice suddenly broke through Sophia's flustered haze. She looked up to see her teammate lingering nearby, a concerned look on her pixie-like features. \"Can I ask kind of a weird question?\"\n\n\"Uh...sure,\" Sophia answered, hastily pocketing her phone. \"What's up?\"\n\nZoey chewed her lip. \"You don't think I came across too harsh just now, do you? I hate acting like a little miss know-it-all, but these comp-sci boys just drive me crazy, y'know?\"\n\n\"Oh totally.\" Sophia nodded. \"Yeah. No. They uh, they can be a pain. You were being totally fair just now, really.\"\n\nZoey smiled, and Sophia felt her chest flutter. \"Phew. Thank god. Wouldn't want the only other competent coder in our section to think I'm a control freak.\"\n\nThe compliment drew an involuntary titter from Sophia's lips. \"N-no, I get it. I, um. Think you're pretty good too.\"\n\n\"I try.\" Zoey's eyes flitted towards the exit, but she still hadn't budged an inch. \"And hey, um,\" she swallowed, and for the briefest of moments Sophia thought she looked nervous. \"You...doing anything tonight? Some friends and I are gonna hang out and go see a movie if you feel like joining.\"\n\nSophia's eyes widened. \"Uh...oh, well...\" Her mind was spinning, all the little exchanges she had ever shared with Zoey suddenly tumbling into a new context. Was she asking Sophia out? What was the right response here? Sophia couldn't just duck out of her plans with Master, but she also really, really didn't want to reject Zoey. Especially not when she was acting so adorable.\n\n\"N-no worries if you're busy,\" Zoey insisted, even as her uneasy smile said otherwise. \"It's just. Like. A super casual thing.\"\n\n\"Oh, no, I\u2014\" Sophia hesitated, trying to play it cool even as her face burned. \"I\u2014I already have plans tonight. But, uh, I should be free next weekend. Y'know, if you're...doing it again.\"\n\nSomehow, her garbled answer seemed to translate, and Zoey's expression relaxed. \"Gotcha. Rain check then?\"\n\n\"Totally,\" Sophia nodded, returning Zoey's wave as the she headed for the door. \"S-see ya tomorrow!\"\n\nWhen Zoey was out of sight, Sophia finally exhaled.\n\nHad she...just made a huge mistake?\n\nIt had all happened so fast, and now all she could do was wonder if she had made the right move. After all, it wasn't like she was single. But, then again, it wasn't like she and Master were exactly monogamous either. Even if they were keeping Chelsea's role in their relationship a secret for now, they had all agreed it would eventually be necessary to come out as polyamorous. If that was the case...would Master mind if Sophia explored outside their little throuple? Would he want to bring Zoey into the harem as well? Would Zoey be alright with that?\n\nIt occurred to Sophia that her mind was leaping several conclusions ahead, and she chided herself with a gentle laugh. None of these questions needed answers right now\u2014she wasn't even 100% sure what Zoey's intentions were.\n\nWhat Sophia did know, with certainty, was that she couldn't wait to get back to the house, and share her favorite movie with her favorite people.\n\nAnd that was enough, for now.\n\n_____________________________________________\n\nVeronica stared vacantly into her laptop screen, the only light flickering in the shadows of her darkened room.\n\nIt had been four weeks since Chelsea's escape from Elise. And since then, Veronica had not known peace.\n\nThere had been relief at first, of course. In the giddy rush following Chelsea's return, Veronica had even dared to believe their friendship would continue uncompromised. Yet even in their first post-reunion conversation, Veronica had sensed the shadows between their words, the not-so-hidden truths that revealed the falsity of their forced normalcy. When Chelsea finally moved out of the apartment into her new house, it had almost felt like a release. No longer would they be forced to pantomime their old rituals and interests, to strain their hearts propping up a crumbling fa\u00e7ade of their friendship. And so their regular lunch dates turned into occasional run-ins, which Veronica now avoided whenever possible.\n\nIt was for the best, she had eventually convinced herself. No matter how often she apologized, Veronica would always be the woman who sold her best friend out. And not matter how Chelsea explained herself, she would always be the enigma wearing the face of familiar friend, a replica whose near-perfection rendered it all the more uncanny and inscrutable. Veronica would never know why Chelsea had chosen a life of servitude. Nor if it had ever really been a choice in the first place.\n\nAnd that was what scared her most of all.\n\nIf the dissolution of Chelsea's friendship darkened Veronica's days, it was the confirmation of Seb's powers that kept her up at night. As impossible as it seemed, he had somehow done what he had promised, and forced Elise Jaeger into relinquishing control of her daughter. True, it was still possible that the whole hypnotism thing was a ruse, and that there was a more rational explanation for how he was able to exert such influence. But a man able to fake mind control so effectively was just as dangerous as the real deal; in either case, Veronica's knowledge of his nature put her at risk.\n\nWould she wake up one morning to find him hovering over her bed, ready to indoctrinate her into his brainwashed flock? Would she look at her phone one afternoon to find that he would soon become president of the world? Or would he and his slaves vanish from view one day, leaving Veronica jumping at shadows for the rest of her life, forever wondering who among the populace was secretly under his control? Hell, it was possible she had already been hypnotized and just hadn't realized it yet.\n\nSo Veronica searched for answers. She scoured every website and resource even tangentially related to her struggles, desperate to fill the hole drilled by her spiraling doubts. She read conspiracy theories and obscure academic papers, dug through the histories and social media feeds of anyone even tangentially related to her adversary. But nothing Veronica found brought her any answers: just a few fringe hypotheses about hypnotism, and confirmation that not only was Seb's family as unremarkable as he was, but that he wasn't even theirs by birth.\n\nIt had all seemed so hopeless.\n\nUntil OpenEyes317 contacted her.\n\nAt first, Veronica ignored the message. She had left several queries on supernatural and conspiracy forums across the internet, and it hadn't taken long for her to grow weary sorting through endless, bogus theorizing and convoluted ranting. But, as she eventually discovered, OpenEyes' take was different. Whoever they were, they had made a habit of cataloging cases similar to Veronica's: sex scandals wherein the victims displayed odd, seemingly contradictory behavior, or abrupt, unexplainable shifts in personality. Of course, everything OpenEyes' presented was pure speculation, and they offered no proof beyond circumstantial evidence and some rather skewed logic. If she were thinking rationally, Veronica would dismiss her mysterious contact's claims as empty nonsense.\n\nBut Veronica was no longer operating in the realm of the rationale. And OpenEyes' message was the only promising lead she had.\n\nSo here she sat, in the throes of another sleepless night, trying to arrange a meeting. In a stroke of good luck, it turned out OpenEyes didn't live too far away, and seemed eager for the chance to share their findings with someone face-to-face. It was a long shot, of course, and Veronica had no illusions about its odds. In all likelihood, her rendezvous would produce nothing but an uncomfortable conversation over coffee, and a yet another wasted afternoon.\n\nBut there was also a chance, however slim, that OpenEyes could finally lay to rest the ghosts haunting Veronica's every hour.\n\nAnd that would have to do, for now.\n\n________________________________________\n\nChelsea lazily stirred the pot of pasta sauce, smiling to herself as the ripples of red trailed in the wooden spoon's wake. Her half-tranced brain delighted at the sight of little bubbles popping on the liquid's surface, and she found herself giggling as she tried and failed to predict where they would appear next. The beeping oven temporarily broke her reverie, but only enough to remind her to move on with the recipe. She covered the pot and reduced the heat to a simmer, watching the fogging glass top with lingering fascination, her mind already returning to the happy clouds in her head, and her hips swaying absently to the music wafting from the kitchen speakers.\n\nWeekends were the best.\n\nThey were the only time Chelsea could fully embrace her new role as Master's faithful slave, a creature of pure, programmable pleasure. It was an indulgence she had worked hard to perfect, practicing her own submission until it was possible to slip into trance without a single word from Master's lips. All she had to do was take a few deep breaths (easy, natural breaths, she reminded herself), recite her mantras of submission, and descend gently into a warm, wonderful state of single-minded servitude. In this way, Chelsea could pass whole days in obedient bliss, drifting from task to task on rolling waves of pleasure. And if she had to come up on occasion for a particularly tricky job or social interaction, that was okay too. After all, every reemergence of mental clarity brought with it fresh recognition of her own brainwashing, a realization that never failed to send hot shivers of delight through her. Sometimes, they made her stifle a moan in the check-out line, or take a break to finger her dripping pussy before continuing her household chores. Either way, the fog of arousal that followed always made it easy to slip back down into trance, and resume her dreamy day with an extra squish her step.\n\nBut not every day offered such pleasures.\n\nAs much as Chelsea wanted to embrace a life of pure, blissful enslavement, Master was adamant that she maintain at least enough course credits to graduate, \"just in case,\" as he had put it. As usual, Chelsea suspected he was worrying too much, though she understood his logic. They were still trying to keep a low profile after all, and having her suddenly drop out of school was a recipe for suspicion. Chelsea still wasn't sure what she would do with a business degree now, but it didn't hurt to have one. Besides, classes had gotten considerably easier now that she no longer cared about acing them. Some lectures she could tune out entirely, and spend the time more productively with a butt plug in her ass (Sophia had shown her how to insert it) and her face buried in \"research\" as to how better to please her Master.",
        "Unfortunately, disentangling from her old social obligations was proving far less fun for Chelsea. Using \"burnout\" and \"mental health\" as covers for withdrawing from sorority life was all well and good, but some her acquaintances and political allies had become rather persistent in their attempts to draw her back in. Plus, there were all the self-appointed suitors who were taking her sudden lack of interest with a predictable lack of grace, their broken hearts and thwarted lust spawning all kinds of awful, retaliatory rumors. Of course, such talk didn't trouble Chelsea the way it used to, but it did lead to some awkward and rather hostile interactions.\n\nAnd then there was Veronica. Poor Veronica. Chelsea had tried her best to smooth things over between them, to explain why she had chosen to submit to Master, and assure Veronica that there was no foul play or threat of future retribution afoot. Yet every conversation seemed to widen the distance between the two former best friends, and some days Chelsea wondered if they would ever be able to close it.\n\nThose days were hard. But they never stayed that way for long.\n\nThe sound of the door unlatching caused Chelsea to straighten at attention, a grin spreading across her lips. Master was home, and she couldn't wait for him to see what a good girl she had been. All of her chores were complete: she had paid the rent, washed the sheets, vacuumed the rugs, and even found time to practice deep-throating her dildo before dinner. All while wearing her new uniform like a good, obedient little thrall.\n\n\"I'm home,\" his voice echoed down the hall and into her head, sending an ecstatic tremor down her body. \"Is that dinner I smell?\"\n\n\"Yes, Master,\" she sighed. Even if the Vox was no longer necessary to control her, she still enjoyed its entrancing effects, and had begged Master to use it as much as possible whenever he was home. \"How was your day?\" she asked when he stepped into the kitchen.\n\n\"Better now,\" he answered, his eyes eagerly scanning her outfit. \"What about you? Have you been a good girl today?\"\n\n\"Mmmmm...very good,\" Chelsea smiled, bending over the counter and wiggling her bare ass for his approval. He chuckled, but didn't grab a generous handful like he normally would. Instead, he seemed distracted, his gaze distant as he set down his backpack and took off his coat. When he got a glass of water instead of asking Chelsea to pour him one, she knew something was up.\n\n\"Is everything alright?\" she asked with a thoughtful frown. \"You seem a little...preoccupied.\"\n\nMaster blinked. \"Do I? Sorry. Think I'm having one of those days.\"\n\n\"You don't have to apologize,\" she assured him, moving closer and smoothing her hands over his hips. \"I just want to make sure it's not something I can help with.\" Despite everything they had gone through, Master still had a bad habit of shouldering burdens on his own, as though asking his brainwashed sex slaves for help would somehow inconvenience them.\n\n\"It's nothing major,\" he answered, and then added when her eyes narrowed: \"I was just thinking about Thanksgiving arrangements, which in turn lead to me worrying about our\u2014uh, how would you put it\u2014'coming out process' in general, I guess.\"\n\nChelsea stiffened. \"You're not...thinking of delaying the move, are you?\" Even though Seb and Sophia spent most nights at the house, they were still technically living in the dorms to keep up appearances. The plan was to try and negotiate a transition once the semester was over and student housing was up for renewal, but if Master was getting cold feet now...\n\n\"No no no, it's not like that,\" he quickly answered, apparently reading her concern. \"I just...keep going back and forth about what exactly Sophia and I are supposed to tell our families. It'd be easiest if we all pretended to be nothing more than friends but...I'm getting so sick of keeping secrets.\" He sighed.\n\nChelsea nodded, sympathizing. \"I get why you're anxious, but even if your parents find out, it's not like they're going to disown you over being in a throuple, right? In fact,\" she added wryly, \"I know a few fathers who would be thrilled to hear their son had two hot coeds on his arms.\"\n\nTo her relief, Master laughed. \"Fair point,\" he said. \"Though Sophia's folks definitely won't be so easygoing. And I'd hate to be the wedge that breaks them apart. Especially since it feels like I'm already asking so much of her and\u2014\"\n\n\"Stop it,\" Chelsea gently grabbed his face and held his gaze. \"Sophia and I are adults, we're doing this because we want to, and we can take care of ourselves. So stop acting like you're the bad guy here, alright?\"\n\nMaster exhaled, then smiled. \"You're right. Sorry. Old habits die hard.\" He kissed her on the forehead.\n\nShe hummed, pleased, then stood on her tiptoes to return the gesture. \"One of these days, I'm going to get you to relax,\" she said, turning her attention back to her cooking.\n\n\"Oh, I think you're already quite capable of that.\"\n\nThe wave of praise and pleasure hit right as Master's arms slipped around her, his hands claiming her breasts while his power flooded her mind. Her thoughts blurred in a lustful haze as she melted into his grasp, her ass pressing against his crotch, thrilling at how soft she felt against his hard, demanding body.\n\n\"That's what a weak little slut like you does best, isn't it?\" her Master growled, the hunger in his voice causing her heart to race. \"You love to be used by your Master, don't you?\"\n\n\"Y-yes...Master...\" she panted, her legs already parting for him, her pussy aching for his touch, for his cock, for his cum. They had already spent the morning fucking, but now it was like she hadn't felt him for years. Whatever he wanted, she needed, her mental faculties suspended beyond the synonymous sensations of pleasure, pain, and submission.\n\n\"Good girl,\" Master said, and the orgasm shuddered through her even before his fingers found her desperate cunt. \"Awww, look at you, you're trembling. Such a needy, horny slave, aren't you?\"\n\n\"Y-y-hhheesss...Massstterr...\" Speaking was almost impossible, every stroke of Master's touch sending sparks shooting through her brain, short-circuiting any functions more complex than animalistic instinct. If not for her training, she would've probably been reduced to nothing more than a twitching, mindless sex toy, a helpless array of dripping holes for her Master to use and abuse as he saw fit. It was only his protocols that enabled her to recognize her sorry state, her mind kept awake just enough to comprehend the depths of her depravity. The dim realization caused her to moan with humiliated joy and want.\n\n\"Don't worry,\" Master breathed over the sound of his pants unbuckling. \"You've been so good today. Master won't keep you waiting for long.\"\n\nLong? How long had it been already? Chelsea vaguely recognized that not much time had passed, but her drooping, blurring vision couldn't make out the clock, and her foggy mind couldn't string enough thoughts together to compensate.\n\nThen she felt Master's cock slide inside her. And time was redefined in an instant.\n\nNothing else mattered. Nothing else existed. She was completely enveloped in the heat of her Master's body, in the undulating waves of pleasure between every thrust and grasp. She clutched the countertop for desperate support, feeling like she might collapse after each ecstatic crest. Yet her obedient legs remained standing, unable to deny what was her Master's to take. His hand grabbed her hair, his pace quickening, becoming urgent, aggressive. Chelsea arched her back, his roughness sharpening her delight even further, her panting lips uttering sounds incomprehensible beyond their urgent call for more, more, more.\n\nMaster's cock twitched and she instinctively clenched around him, soaking in every overwhelming sensation as they both came in a carnal chorus. Chelsea slumped against the kitchen counter, an exhausted, exhilarated giggle bubbling out of her before ending abruptly in a moan as Master drew free of her love-drunk body. He was murmuring something to her, sounds she understood as praise and comfort even as her addled brain failed to parse the words. But she felt them. Their power thrummed in the deepest recesses of her heart and mind. She felt vulnerable, malleable, and dazzlingly, deliriously happy.\n\n\"Looks like Master signed off on the new outfit,\" Sophia commented archly.\n\nChelsea blinked. She was in the middle of plating the pasta now, despite having only the haziest recollection of how she got there. \"Y-you could say that,\" she answered, shaking free of the last strands of trance. She moved to set the plate aside, only to feel a tiny spot of wetness beneath her feet. A quick glance downward revealed that she had apparently been dripping on the floor since Master departed, his cum mingling with her own juices and sliding freely down her legs. It was a parting gift, of sorts; Chelsea knew Master would order her to clean it up later, and that doing so would evoke powerful memories of its origin, often causing her to gush and create even more of a mess in the process.\n\nChelsea swallowed and looked away, redirecting her attention before she dropped to her knees then and there. \"S-so when did you get home?\" she asked Sophia.\n\n\"I've been watching you for like, ten minutes now,\" Sophia laughed. \"God, you're such a trance-slut.\"\n\n\"Mm.\" Chelsea smirked. \"You sound jealous.\"\n\n\"I just hope you stay awake enough to actually appreciate the movie this time.\"\n\n\"That depends. Is it another anime?\"\n\nSophia stiffened. \"Gh-Ghost in the Shell isn't just 'another anime!' It's a classic!\"\n\n\"Well, I'm looking forward to it.\" Chelsea smiled and turned back to her plating. Sophia had been trying to spark interest in her favorite pastime for weeks now, to rather underwhelming results.\n\nSophia huffed, and began setting the kitchen table. \"One of these days, I'm just gonna ask Master to brainwash you into being a bigger weeb than I am. Then we'll see who's laughing.\"\n\n\"Aw, but that would just take the fun out of it,\" Chelsea teased. She wouldn't mind Master changing her preferences with a few Vox-laced words, but he seemed just as amused by Sophia's antics as she was. Besides, any time the busty nerd got frustrated or flustered, all it took was Chelsea slipping between her legs to quiet her complaints.\n\n\"A house divided cannot stand,\" Sophia proclaimed theatrically. \"Especially when it comes to movie night.\"\n\n\"Uh-huh.\" Chelsea rolled her eyes. \"Could you go find Master and tell him dinner's ready? And please try to make it back before the food gets cold.\"\n\n\"I make no promises.\" Sophia winked as she sauntered off.\n\nChelsea scoffed, shaking her head. A familiar, domestic quiet settled in the space that her sister slave left, and Chelsea found herself reflecting on what Master had mentioned earlier. It wasn't just Sophia's parents that could pose an issue: even with Elise under Master's control, Chelsea's grandparents might notice her lack of marriage prospects sooner or later, and would probably do everything they could to ensure the Jaeger bloodline didn't end with her. What form their interference would take and how Master would react was still an open question, one neither he nor Chelsea had a clean answer for yet.\n\nBut for now, they didn't need one.\n\nFor now, Chelsea let her cares drift away, and smiled as Master and Sophia returned to the kitchen for dinner.\n\nFor now, she would enjoy her new life with her new family.\n\nAnd dream of it becoming forever.\n\nEnd of Book I\n\n \n\n_____________________________________________________________________________________\n\nHello everyone!\n\nTo those of you wondering: yes, this is the end of the first part of Vox Dominus. It's been an amazing journey writing and sharing this story with all of you, and I promise there are plans to continue it in the future. But for now, I need to take a little break and explore some of the other ideas I've left on the back-burner for far too long. Before I move on though, I wanted to say: thank you so, so much for your support. Your compliments and criticisms have inspired and challenged me for over a year now, and I absolutely would not have gotten this far without you. I hope you'll continue to enjoy my writing in the future, but either way, you have my gratitude. So take care of yourselves and be kind to each other, alright?\n\nUntil next time,\n\n--Mesmerciless\n\n \n"
    ],
    "authorname": "Mesmerciless",
    "tags": [
        "hypnosis",
        "brainwashing",
        "male dominant",
        "female submissive",
        "slave",
        "enslavement",
        "college",
        "mf",
        "rough sex",
        "domestic life"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/vox-dominus-pt-20"
}
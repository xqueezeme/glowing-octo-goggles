{
    "title": "Requited Ch. 11",
    "pages": [
        "Thank you for reading this, especially those of you who have rated or commented on my work. I read and appreciate every comment and truly value the feedback. Due to the nature of Unrequited/Requited, I've received a lot of DM's from people sharing their own experiences of unrequited love. Every message is unique and yet, the same. Every one of these messages has moved me in some way.\n\nThis story is dedicated to those who have felt the sting of love unrequited.\n\nEpilogue\n\nIt's hard to believe it, but that day in the den was six years ago. So much has happened, and so much has changed, but still, I look back on that summer with nothing but fond memories. I still think about it often.\n\nI remember the look on Laura Montgomery's face when she arrived at the beach house after her vacation in Europe and realised that Francesca hadn't made up a bedroom for me. Her head whipped back and forth, I could see her thinking, \"There must be some mistake.\"\n\n\"Heavens,\" she said, \"Francesca must have thought you were leaving today. I'm sorry West, I'll get her up here right away.\"\n\n\"Mom, it's fine. West and I are, uh, we're sharing a room.\" Said Andy.\n\nIt took her a second. A second or two, but when she realised what he meant, her face broke into a smile the likes of which I'd never seen on her before.\n\n\"Stanley,\" she called down the hall, \"could you go down to the cellar? We're going to need bubbles with dinner.\"\n\nDinner was a pleasant, if slightly stilted affair. Joss sat there, looking at Andy and then looking at me, grinning like a Cheshire cat. We ate and drank champagne. Mrs Montgomery and Joss told us all about their trip and Mr Montgomery sat there, in a semi-inattentive state, like always.\n\nJust before dessert, he smiled slowly and raised his glass and said, \"Andy, West...I've been wondering when you two fools would figure it out.\"\n\n\"Dad!\" Exclaimed Joss, \"You, you can't say something like that at the table!\"\n\n\"I apologise.\" He said evenly, \"You're right. I should have waited until we were out on the porch.\"\n\nEveryone laughed. Even Mrs Montgomery smiled. She smiled and she looked over at him. When she set her glass down, she left her hand on the table, near his. He didn't miss it. I saw him reach over and put his hand so close to hers, they were almost touching. It was the first time I'd ever seen such an interaction between them, but it wasn't the last. I'd always had a feeling that Mr Montgomery had crossed Mrs Montgomery in some way. I suspected he'd been unfaithful, but now I know, he didn't do that. He did something worse. He rejected her son. Mrs Montgomery is many things, but the one thing she's not, is a woman who takes kindly to someone hurting her children. That night was the first step in a long road back for them.\n\n*\n\nA few weeks later, Andy and I were getting ready to head into the city for the day. I had to have a medical check for my new job, and I needed to run a few errands. While I was eating breakfast, I overheard part of a conversation between Andy and his mom. Something about taking me to see two twenty-four.\n\n\"What's two twenty-four? I asked him later, on our way into the city.\n\nHe looked a little uncomfortable, \"It's uh, it's a building I kind of own.\"\n\n\"How do you kind of own a building?\"\n\n\"Well, my grandfather, my mom's dad, left it in a trust for me. I won't officially own it until next year when I turn twenty-five.\"\n\n\"Oh.\" I said, \"Why was your mom talking about it?\"\n\n\"She suggested I show it to you.\"\n\n\"Okay, sure, we can swing by.\"\n\nWe ran our errands and then we did go by. I'm not sure what I was expecting, but it wasn't two twenty-four, that's for sure. From the casual way he described it, I was expecting something small, or at least, smaller.\n\n\"Bloody hell.\" I said, standing across the street, looking up at the expansive red brick warehouse-style building.\n\n\"Sorry about all this.\" He said uncomfortably.\n\n\"Why are you sorry?\"\n\n\"Well, it's just kind of embarrassing, I guess.\"\n\nI laughed. I'd never dreamt of owning a property like this, but one thing I couldn't imagine being about it, was embarrassed.\n\n\"West,\" said Andy, kicking his foot softly against the sidewalk, \"one of the tenants gave their notice a few weeks ago, I, I wanted to show you this place, in case you wanted to talk about living here together.\"\n\nI'd been planning on living with my aunt and uncle in Bushwick until I could save enough to rent a place. As the summer wore on, it had started to play on my mind. Even though, by my calculation, on my salary, it wouldn't take more than a few of months of heavy saving to be in a position to rent a studio, the thought of not seeing Andy every day had started to make me feel anxious and sick.\n\n\"I mean, no pressure, or anything.\" He added quickly.\n\nI started to laugh, \"So, you're saying you own a building, and you just randomly happen to have an apartment for us to live in? God, it must be weird to live in your world.\"\n\n\"It has its moments.\" He said, rolling his eyes at me, \"What do you say? Want to be roommates again?\"\n\n\"Hell, yes.\" I said and I kissed him long and hard, right there in the street.\n\n*\n\nThe first month was hard. It was heaven, and it was hard. We used all our meagre savings to buy a mattress and a few essentials. Andy's mom loaned us some pots and pans, and my mom sent us the rug from my bedroom at home, as well as a large, metal trunk I'd used to store my toys in as a boy. Though we had no sofa, we put the rug in the living room and used the trunk as a coffee table. At night, we dimmed the lights and sat on the floor and ate, using the trunk as our table. By the end of that first month, we were as tapped out as two guys starting out could possibly be. We ate a lot of ramen. I remember the two of us sitting there, on the floor one night. I'd finished telling him about my day at work and he was telling me about a new painting he was starting. We were sitting close. So close, I didn't care about anything else. We had nothing. And we had everything.\n\n\"You know what I'm going to do, when I get paid?\" I said.\n\nHe shook his head, even though I'd told him my plan several times.\n\n\"I'm going to take you to that little Mexican place that you love. I'm going to buy you whatever you want. I'll buy you three meals, if you want. It's going to be the best dinner of your whole life.\"\n\nDid I mention we'd been eating a lot of ramen? A lot, a lot.\n\n\"If you take me for Mexican, you better believe, you're going to be bottoming for the next day or two.\" He replied.\n\nWe both laughed and slurped our ramen. He looked so beautiful then, I can still see it in my mind's eye. I couldn't take my eyes off him. I felt so incredibly content. I felt so sure that I was right where I needed to be. Our lives were just beginning. It was hard starting out, it was hard finding my feet at work and having no money or furniture, but it was also perfect. It was perfect because I was doing it with him. He felt the same. He must have.\n\n\"Hey West,\" he said, leaning his head back a little and looking at me, \"do you think this is it? Do you think this is the best day of our lives?\"\n\nI smiled at him, and even though part of me suspected that it very well might be, I shook my head and said, \"Nah.\"\n\n\"How do you know?\"\n\n\"It can't be, 'cause tomorrow it's pay day.\"\n\n*\n\nIt was my birthday a couple of months later and we were still pretty broke. Andy was teaching art at a nearby art school a few times per week. The pay was terrible, but it was something. Still, we were in no position to spend money on anything that wasn't essential. Somehow, he still managed to make it the best birthday I'd ever had.\n\n\"Happy birthday.\" He said, serving me my coffee and breakfast in bed and handing me two neatly wrapped gifts.\n\nThe first, was a sketch that he'd done of us. Just of our groins. Just us, from the navel to mid-thigh. Standing close. Standing strong. Naked. The detail was astounding. It was seriously impressive.\n\n\"Holy, shit!\" I laughed, \"It's amazing.\"\n\n\"I told you I like your dick so much, someday I'd draw it.\"\n\n\"Actually, I think you said someday you'd paint it.\"\n\n\"Unless you want to explain to guests why there's a painting of you and your dick hanging in our hallway, don't tempt me, okay.\" He said, giving me a playful swat and handing the next gift to me.\n\nI unwrapped the tissue paper carefully and gasped when I saw what it was...it was his blue t-shirt. The faded blue t-shirt I love. The t-shirt that feels like him.\n\n\"Thank you.\" I whispered, feeling a bit over-come, as I pulled it on. I stroked my hands up and down my chest, feeling the tiny bobbles in the soft, well-worn fabric, \"I love it, Andy. I love it.\"\n\n*\n\nWe took our time, furnishing our place. We spent lots of time in thrift shops and at markets. Andy likes to hold things and think about them for a while. He hates shopping on-line. He likes negotiating on prices, haggling and chatting with the owner, before buying something. Everything we bought, we bought together. Even though he's much more into that kind of thing than I am, he wouldn't allow anything into our place, unless we both loved it. For quite a while, we had decent bed linen, but no base for our bed. That's what Andy is like. I love that about him.\n\nWe painted the walls in our bedroom a dark blue-grey and hung Always above the bed. We hung the abstract he gave me at the end of first year, in the living room.\n\n\"Guess what,\" he said, as we stepped back and checked to make sure the painting was straight, \"I got an offer on Heart today.\"\n\n\"Surely, you're not going to take it?\"\n\n\"Actually, I think I am.\"\n\nA wave of emotion flowed through me and settled somewhere near my knees, \"Andy, please don't. We don't need the money that badly. We'll be okay.\"\n\n\"It isn't just that. It's different now. When I look at it now, I feel different. I know it was real and I know it's an important piece. It's just that for me, it feels like the past. We're in a different place now.\"\n\n\"But,\" I started, \"but...\"\n\n\"I'm ready, West. I'm ready to let it go.\"\n\nI swallowed quickly and nodded. I knew he was right. I was ready too. Almost.\n\n\"Just let me do one thing, okay?\"\n\nI sat down and started to write. I only meant to write a short note, but once I started, I couldn't stop. I wrote and I wrote. I wrote our whole story. When I was done, I folded the pages and sealed them in an envelope and handed it to Andy.\n\n\"If you sell Heart, when you hand it over, please give this to the buyer. I want them to know our story. I want them to know that I'm in the painting with you. That I'm hidden behind you. I want them to know that we worked our shit out. But mostly, mostly, I want them to know that this thing between us was always requited.\"\n\n*\n\nHe did sell Heart, and even though it hurt letting it go, I found it didn't matter as much as I thought it would. Over the years, Andy has done well. He's done amazingly well. I knew he would, but it was hard starting out. In the early years, he painted like a fiend. He peddled his wares tirelessly. Despite all the rejections, he never gave up. In the end, his big break came from an arrangement he made with the owner of a coffee shop, called Sanctum. He asked if he could hang his work in the coffee shop as part of the d\u00e9cor, in the hope of selling a painting now and again. It worked better than he could have hoped. A gallerist named, Paul Gossman, saw his work and got in touch. It wasn't long before Andy had his first solo exhibition.\n\nThat exhibition went well and so did the next one. At this point, Andy is well on his way to being a big deal in the art world. He still makes me wait until he's finished his paintings completely, before showing me his work. When a painting is done, he calls me into his studio and watches me, waiting, until I find it. He always hides something for me. In all the time we've been together, he's never done a painting without adding a little piece of me. Sometimes, it's big and obvious but most times, it's tiny. Most times, it's well hidden, but it's always there: a compass rose. It's there, painted on a locket, an earring, or a button. Tiny letters denoting north, south, east, west. The compass needle's never point up, as one might expect. They point to the left. They point the west.\n\nThe needles he paints only ever point west.\n\n*\n\n\"You ready?\" He said, as we waited for my mom to open the door.\n\n\"I think so.\"\n\n\"No matter what happens, it doesn't change who you are. You know that, don't you?\"\n\n\"Yeah,\" I said softly, \"I know.\"\n\nAnd, I did know, but I still felt nervous. I felt nervous, but I knew it was time. Dinner was great. It's always great being with my mom. Even though I haven't lived with her for years, being with her still gives me a happy, warm feeling. I waited until after dinner. Until after dessert. Andy must have sensed that I was building up to it, as he had his hand on my knee, holding me gently.\n\n\"Mom,\" I said finally, \"I need to know. I-I need to know who my father is. It's something I...whoever he is, whatever happened, I just need to know.\"\n\nHer eyes flicked quickly to me and then to Andy. She lifted her glass to her mouth and took two very long, large sips. She started to set her glass down, but lifted it back for one more big gulp.\n\nAndy moved his hand to my shoulder and squeezed reassuringly.\n\n\"Alright,\" she said, taking a deep breath, \"alright. It was 1990 and I was in London. I'd been backpacking around Europe. I'd just been to Amsterdam.\" She said, as if that explained a lot.\n\nI nodded in encouragement.\n\n\"I went to a show in the West End. I saw Cats. What a lot of crap that was.\"\n\n\"Mom...\"\n\n\"Sorry, I'll try stick to the point. So, I'd seen the show and I was feeling very London-y, so I decided to go to a pub for a pint. Which I did. God, it was a sausage fest in there.\"\n\n\"Mom! Please don't ever let me hear you saying, \"sausage fest\" again!\"\n\nShe eyed me sympathetically, \"Oh, honey, are you sure you want me to go on?\"\n\nI looked over at Andy. He nodded sagely.\n\n\"Please go on. I just need to know.\"\n\n\"Okay, so, long story short, I met a very, very nice group of men at that pub and landed up back at one of their houses. I think, I think, that one's name was John. Or Jack. Could it have been Jack?\" She said, as if she was talking to herself.\n\nAndy squeezed my shoulder again. Harder that time. I'd feared this conversation for years. For most of my life, I'd feared it. Something about the way my mother was acting was altering the fear I'd held inside me. It was changing. Right then, the fear was changing to something else. It was turning to a totally different type of dread.\n\n\"Anyway, it was a four-way. I mean, I-I...look, there's a chance it was a five-way, but I think, I think it was just a four-way.\" She said, sheepishly, \"You know what it's like, honey, at a certain point, orgies always get a bit vague and you just...\"\n\n\"Mom, stop!\" I said loudly, cutting her off, \"Please stop! And thank you. Thank you sincerely for not telling me this any sooner.\"\n\nShe smiled sheepishly again and shrugged as if to say, \"It was the least I could do.\"\n\nLater that night, once we got home, I was sitting on the sofa, numb. Andy poured me a very large glass of wine and sat down beside me. We were quiet for a while and I was thinking about how much, much more lovely my life had been before I'd heard my mother use words like, \"four-way\" and \"orgy.\"\n\n\"You okay?\" He said.\n\nI gave him a weak thumbs-up, and took another sip of my wine.\n\nHe patted my thigh supportively a few times. We sat in silence for a while and then he said, \"Do you think that's why she named you West? I mean, do you think she called you West, because you're West from the West End?\"\n\n\"Well, fuck,\" I wailed, \"I do now.\"\n\nHe pressed his lips together tightly as his chest started to heave. He omitted a very small snort, which made his chest heave more. Another snort left him followed shortly by a helpless giggle.\n\n\"Sorry.\" He said, his eyes watering with the effort it was requiring not to laugh.\n\nSeeing him like that, with his watery eyes and his face going redder and redder, made me start laughing too. A deep laugh. A big laugh. He threw his head back and laughed too. We laughed and laughed. Every time we looked at each other, we laughed harder. We were gasping and spluttering and doubled over. By the time it finally died down, he had his arms around me and I'd collapsed against his chest.\n\n\"It's perfect.\" He said, after we'd quietened down, \"It's perfect. Of course you were made in an orgy, West. Of course, you were. No-one as awesome as you could ever, ever have been made by two straight people having vanilla sex. There's just no way.\"\n\nI inhaled deeply, and pressed my face into his neck, \"D'you know, I think that might be the best thing you've ever said to me? In fact, I think that might be the best thing anyone's ever said to me.\"\n\nHe stroked my back lightly, \"I'm sorry you'll never get to know your father.\"\n\nI blinked and nodded silently. He tilted my chin, so I was facing him.\n\n\"It will be different for our kids.\"\n\n\"Our kids? Our kids? We're having kids?\"\n\n\"Yeah,\" he chuckled softly, \"I think we'll have two.\"\n\nI leant in to kiss him, but he stopped me and said, \"It will be different for our kids, okay? It will be different for them. Our kids will never know one single day, where they don't know that you are their father.\"\n\nI did kiss him them. I kissed him for a long time and when I finally pulled away, he held my face in his hands. He held me steady.\n\n\"Oh God,\" he said, closing his eyes for a second and then looking at me. Into me, \"Please let our babies have eyes just like yours.\"\n\n*\n\nOver the years, we've talked about getting married on and off. We have. We talked about it quite a lot after Tyler and Guy got married. In fairness, mostly, we talked about what Andy didn't want, after their wedding.\n\n\"I think the flamingos were a bit much.\" He said as we drove home the day after the wedding.\n\n\"Yes.\" I agreed.\n\n\"It's not that I have a problem with flamingos in general, it's just that I think that given that there were peacocks roaming around too, it was a bit much.\"\n\n\"Yes,\" I agreed, again, \"you're right. One type of exotic bird is really all that's required for a gay wedding.\"\n\n\"The speeches were a bit much too.\"\n\nI nodded. He didn't need to elaborate on that.\n\n\"Did you see Guy's sister and Ty's mom having a tiff?\"\n\nI did see it. Sarah had to move bloody quickly to neutralise it.\n\n\"I get it.\" I smiled, \"Say no more.\"\n\nAnd I did.\n\nEven though I've always loved the thought of being married to him, I understand. Andy isn't crazy about the idea of institutionalised love. Even though things with his dad are so much better, I know that that still plays a part in it. I think he'd hate to put his dad in a position where he'd need to make a speech or anything like that. And as great as Laura Montgomery is, and she really is. She couldn't be more supportive of us, but she is a handful. Andy has to be very, very careful in the way he handles any type of celebration, because if she gets so much as a whiff of it, she runs with it. She runs with it in a very big way. A caterers-and-marque-tent kind of way. Andy can't bear it.\n\nSo, I understand. Even more than I understand how Andy feels about the logistics of a big wedding, I understand that for both of us, something changed years ago. It changed that day in the den. The day he showed me the painting of us. The day we said, \"Always.\"\n\nFor both of us, that was a commitment. Neither of us have ever wavered. Neither of us have ever let go. Not for a second.",
        "*\n\nWith all that in mind, I'm feeling more than a little nervous today. It's a big day. Today, Andy and I are going to the courthouse. It's official. We're doing it. We're getting married. We're finally doing it. So much is changing in our lives and the time just feels right. It feels right for both of us. It's big news, but it's not the biggest news. The biggest news is that after trying for a while, Andy and I are going to be parents. Our surrogate is six months pregnant. It's real. It's finally happening. We have a baby on the way, with help from Joss. We are both so excited. We've been getting the loft ready and doing our best to hold back the unstoppable force that is Laura Montgomery, on the cusp of achieving her dream of becoming a grandmother. She's beside herself. My mom is too, but in a more subdued way. As much as we both moan about it, we secretly love it.\n\nA few weeks ago, we were talking about the baby. Andy was suggesting names, even though we already have a favourite picked out.\n\n\"I think we've got the first name nailed down,\" I said, \"we should probably talk about the last name.\"\n\nHe looked up and smiled, \"I've been thinking about it, actually.\"\n\n\"What were you thinking? Montgomery Baxter or Baxter Montgomery?\"\n\n\"Hmm, I think Montgomery-Baxter has a nice ring to it.\" He said thoughtfully, \"Hyphenated. I think it should be hyphenated.\"\n\n\"Do you now?\" I said, raising my eyebrows.\n\n\"Yeah, I think so.\" He hesitated for a moment, looking down and then directly at me. \"I've also been thinking, it might be nice for all three of us to have the same name.\"\n\n*\n\nAnd, that's how we got here. Right here. Right now. Right up to the present. Today is the day. We're getting ready. At least, Andy is ready. I'm getting ready too, but I'm getting ready for something other than a wedding.\n\n\"What the hell?\" He says, as I stroll out of the bathroom completely nude.\n\nHe's fully dressed. He looks unreal. His suit is dark, dark blue and he looks way more chiselled and sexier than anyone who's planning on leaving the house, ever should.\n\n\"West!\" He says, \"What are you thinking? We have to leave here at two.\"\n\n\"Uh uh,\" I say, shaking my head, \"we only have to leave at three.\"\n\n\"West, for God's sake, you said we had to leave here at two, at the latest.\"\n\n\"Did I?\" I tease, \"I might have, but I definitely, definitely meant three.\"\n\n\"Are you kidding?\"\n\n\"Nope, I just wanted to get you into that suit.\" I reach forward and stroke him through his trousers, \"I just wanted to take a moment, before we do this, to remember who we are. To make sure you know, I'm just as horny for you, as I've ever been. Nothing's going to change that.\"\n\n\"Holy shit, West,\" he says, laughing and shaking his head, as I toss him the lube, \"what am I going to do with you?\"\n\n\"Oh, you know exactly what to do with me.\" I say, with a little shake of my ass.\n\nHe's still shaking his head, but he's smiling. His eyes have darkened and his brow is low. His mouth is curled up and his teeth are exposed. He's smiling like sex. Just like sex. He's tugging at his tie and unbuttoning his shirt. I don't move, I just stand there and watch as he undresses.\n\nGod, he knows how to handle himself.\n\nHe moves slowly. Deliberately. He loses his tie, then his jacket and shirt. My breath catches harder, with each item of clothing he removes. After all this time, the sight of him naked, still twists me inside. I step towards him, reaching out, but he stops me with his eyes. He moves behind me and nudges me to the window.\n\nOooh.\n\nI know what he wants. I know how he wants it.\n\nI love it like this.\n\nI stand directly in front of the window and lean forward as I place my palms flat on the glass. I look down, out of the window. I see the roofs of cars tearing past and the distorted sight of people viewed from above. I know, from the many times I've stood down where they are and looked up at our loft, that they probably can't see me. The height and the glare on the glass sees to that.\n\nThey can't see me.\n\nThey probably can't.\n\nBut then again...maybe they can.\n\nThe thought of that, twists me harder. Harder and stronger. He runs his hand up my thigh, a gentle reminder for me to open my legs. As I do it, I arch my back slightly. I show him what I want. I show him what I have for him. I hear a soft intake of breath.\n\nHe reaches between my legs and tugs softly at the toy that's lodged in my ass. The slight movement sends pleasure through me. He puts his other hand on my hip, holding me firmly. Holding me hard. I'm already hard. I've been hard for a while. I was hard in the shower. I was hard from the thought of him. I was hard from the sight of him. I'm really hard now. Really, really hard. I'm so hard, it's difficult to stand still. My hips feel weighted and stiff. I rock them back and forth slightly, without really meaning to.\n\n\"Mmm,\" he says, under his breath, \"always so full of good ideas.\"\n\nHe tugs at the toy again and this time, I push out a little, grunting softly as he pulls it free. He puts his arms around me, pulling me close, breathing in deeply as he nuzzles his face into my hair.\n\n\"Oh, Jesus,\" he murmurs, \"I never stood a chance when it came to you, West. No chance at all.\" I lean back towards him, rubbing myself against him. He's hard, too. He's just as hard as I am. He leans in and kisses the side of my neck. He kisses me softly. Soft kisses that send tremors all the way down my legs. \"There's not a single thing in the world, I could have done, that would have stopped me from falling for you. Not one single thing.\"\n\n\"Ditto.\" I groan, as he slides into me.\n\n*\n\nBy the time we're done with each other, we're a confusion of limbs on the floor. His chest is glistening with my semen, and his is slick and warm between my cheeks. We lie together, laughing and panting, waiting for our heart rates to return to normal. Then, we jump up and shower quickly.\n\nHe's dressed by the time I emerge from the dressing room -- fully clothed this time. He's pinned a fresh orchid to his lapel and has picked one for me, too. I observe him closely, as he carefully pins it onto my jacket. His eyes are warm and soft. It's been so long since they were slanted with sadness, most of the time, I can't even remember what he looked like when he had sad eyes. Now, his default position is light and carefree, ready to laugh, so much so, that if you look closely at his eyes now, you'd see the finest of lines fanning out from the corners. I do look closely, so I don't miss it. When I look in the mirror, I see the same story written all over my face.\n\nI close my eyes and sigh. As I stand there, I'm filled with an awesome, otherworldly certainty.\n\nI'm right where I'm meant to be.\n\nI remember myself as an uncertain, desperate young man. A man who stood trembling, facing a void. A man with two paths. Known and unknown. As I stand here now, I look at Andy and I know, this is my place. All roads lead here. There's not a path in the world I could have taken that would ever have led me anywhere but here, to him, to this precise moment.\n\nHis eyes track up my chest and my neck, once he's happy with the position of the orchid on my lapel. Our eyes meet and he smiles at me. It's his soft smile. The one he smiles with his whole face.\n\n\"Oh God,\" I say softly, \"you're so beautiful, Andy.\"\n\nHis eyes light up and his smile grows a little wider. He grazes his lip with his teeth and then raises his chin at me ever so slightly, \"You're one to talk.\"\n\n*\n\nMy ass is still twitching a little, as we make our way out of the courthouse. We did it! We're married. We're legally married. We're the Montgomery-Baxter's. It was perfect. Quick and to the point. Soulful and silly. Just him and me, the way we were always meant to be.\n\nAs I push the door open, I get hit by a flurry of nerves.\n\nJesus, I hope I haven't fucked up.\n\nI hope he likes it.\n\nAndy wanted it small. He wanted it quiet. As far as he knows, none of our friends or family have any idea that we're getting married today. And, they didn't. They didn't know until two days ago when I cracked and called around, inviting our favourite people to join us. I was very selective about who I invited. I know Andy doesn't love crowds, but he's like me, he really, really loves the people closest to us.\n\nI'm almost a hundred percent sure that he'll love it. Almost. I know him well. I know him better than anyone. I know he loves romantic gestures and being surprised. And if this doesn't surprise him, nothing ever will.\n\nAs I swing the door open, the bulb of a flash pops several times over.\n\n\"Holy shit!\" He says, after a stunned pause, \"Is that Sarah with the camera?\"\n\nI turn to him and say, \"Brace yourself, Andy.\"\n\nAs we walk out, down the stairs of the courthouse, we're met by my mom and my aunt and uncle. Andy's mom and dad are there too, and so is Joss. Mark and his wife Nel are standing with Paul and Daniel. Though I'm his boss now, over the years Daniel has become a great friend. Needless-to-say, Tyler and Guy are there, too. They're there in full-force.\n\n\"I did my best, West,\" Sarah calls out to me, shrugging helplessly, \"I managed to stop them at white doves, but I'm not a miracle worker.\"\n\nI look at Tyler and feel a quick sense of horror. He looks terribly pleased with himself. Terribly. So, does Guy.\n\nOh Jesus.\n\nI know instantly that my plan for a low-key celebration has just taken a very big turn. At that precise moment, they start pelting us with rose petals and I kid you not, a string quartet starts playing Con te partir<img src=\"herdirtymind_562328360f086d51b2ab/herdirtymind_562328360f086d51b2ab-1.png\" width=\"12\" height=\"21\" alt=\"\" style=\"vertical-align:middle\" >\n\nA string quartet?\n\nA fucking string quartet!?\n\n\"Holy shit,\" I say, wiping my forehead, \"I'm so sorry, Andy. It was supposed to be simple and restrained. It was just supposed to be the people. It wasn't supposed to get out of hand.\"\n\nI look up at him to see how he's taking the crazy turn of events and I'm weak with relief when I see his face. His eyes are misted over. Not just misted, they're wet. His mouth is cracked open in the biggest smile I've ever seen. His chest is heaving in a way that I know means he's either about to really, really laugh, or to cry.\n\n\"It's perfect,\" he sobs, \"it's perfect.\"\n\nI feel the same. My heart is pounding so hard I'm dizzy from exhilaration. The passionate strains of the music are going right through me. I choke up too, and pull him towards me as the song reaches its crescendo. I lean in and kiss him. I kiss him like he's mine. I kiss him like he's mine because he is. He's always been mine. He kisses me back the same way. As soon as we pull away, we're met by the hands and cheeks and smiling faces of the people we love most. They pull us in. They envelop us. They surround us and hold us.\n\nI'm hit by a wave of euphoria that's so strong, there's only one single, solitary reason I'm not singing at the top of my lungs - I don't speak a word of Italian.\n\n*\n\nLater, after a wonderful dinner, which included nary a speech nor a toast, Andy and I are back in the loft. We're in bed. He has his leg thrown over mine and his hand on my chest. We're tired and spent and intensely content.\n\n\"I can't believe Tyler,\" I say, \"I mean, I should have known, but still, I almost had a heart-attack when the music started playing.\"\n\nAndy smiles against my chest, \"I love that song. Do you remember years ago, at college, when we had that Italian night in third or fourth year?\"\n\n\"I remember everything.\"\n\n\"Right,\" he smiles, \"well, after you left that night, I was feeling low. God, I was hurting. Pining. Tyler and Sarah were giving me a pep talk. They were both telling me I had to move on. They said it was time. They said I was hurting myself. Tyler put that song on. He played the English version, which includes the line, \"Time to say good-bye.\" I think he was trying to be poetic, or something.\"\n\nHe scoffs softly. I run my fingers gently up his arm as he continues, \"I sat there, listening to the song. The words meant nothing to me. I couldn't feel them. All I could feel was the music. I could feel it everywhere. When the music stopped playing, I looked at Sarah and Ty, and said, \"The only thing that song does, is make me feel like nothing's impossible. Nothing.\"\n\nI tighten my grip of him. I crush him to me. I hold him so tightly, I squeeze a little sigh out of him.\n\n\"Later, I listened to the song again. I listened to it in Italian. It's not really a song about saying good-bye, it's a song about loving someone so much that without them, there are no words and no sun and no light. Con te partiro doesn't mean, 'Good-bye,' it means, 'I'll leave with you.' It's a song about a love that doesn't have an ending.\"\n\n\"Well,\" I say quietly, \"I guess I'm going to have to send Tyler and Guy a fruit basket tomorrow, huh?\" He nods and smiles. \"I'll tell you what else I'm going to do, Andy. I'm going to learn all the words to that song, I'm going to learn them in Italian. Just you wait. I'm going to serenade you in a way you can only imagine.\"\n\n\"It's a very challenging song to sing, West. It's not for beginners.\" He's trying to keep a straight face.\n\n\"I know that. I know, and I don't care. You mark my words, every year on our anniversary, I'm going to wake you up with that song. Just you wait and see.\"\n\n\"Oh Jesus.\" He says, as we both start to cackle. We're quiet for a while. We're tired but we're too happy to fall asleep.\n\n\"This has to be it,\" he says, dreamily, \"this has to be the best day of our lives, right?\"\n\nI'm quiet for a second. I think about Joss and how she's helped us, and I think about the woman who is carrying our son. I think of our baby, growing inside her. I look over at Andy. I look at his beautiful face and I think of all the good things we have to look forward to.\n\n\"Nah.\" I say.\n\n\"How do you know?\"\n\n\"'Cause, tomorrow we're going to wake up and I'm going to call you, Husband.\"\n\nI take his hand in mine, lacing our fingers together tightly and then I glance up at the painting hanging above our bed. I look at our hands, joined together in the painting and in life, and I know, as incredible as today was, it won't be our best day.\n\nIt won't, because a long time ago, we said, \"Always.\"\n\nAlways.\n\n*\n\nThe End\n\n*\n\nIf you've read all my work, I'd love it if you could let me know which story and character is your favourite.\n\nI'm working on a new story, currently titled Broken. It's slow going, so I'm not entirely sure when it will be ready to publish here, but I'll do my best to get it over the line ASAP."
    ],
    "authorname": "herdirtymind",
    "tags": [
        "gay romance",
        "hea",
        "anal"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/requited-ch-11"
}
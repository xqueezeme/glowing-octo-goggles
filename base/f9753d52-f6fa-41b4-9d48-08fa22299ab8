{
    "title": "Together\u2014You and Me - The Epilogue",
    "pages": [
        "Dear reader,\n\nWhen I had originally written \"Together you and me\" I never intended to write an epilogue, although I had hundreds of requests to do so. It was what it was.\n\nUntil...\n\nI received an email from a World War II veteran who asked me to write a follow-up. This story picks up immediately from the first chapter.\n\nSo, Robert, of the 3d battalion, 24th Marines, and to all of your brothers that lie in peace on Iwo Jima's black sand, this one is for you.\n\nSemper Fi\n\n************\n\nFebruary seemed colder than usual, even by Colorado standards. The windows rattled in the Veteran Administration building as the wind cut through dark storm filled skies. Last night's snow swirled and drifted between the parked cars.\n\nDean sat behind an old wooden desk, worn from years of use; the varnish rubbed away to bare wood in spots. Amy, by his side, touched his fingers while he spoke of his troubles. That's what Dean called them.\n\nMax, a slightly overweight man with a receding hairline, sat across the table, and stared intently at the couple. \"Dean, tell us what happened at Nasiriyah.\" Max raised his shaking, liver-spotted hands, before he clasped them together on the table. His eyes crackled like shards of broken glass. Amy was as quiet as a dead rooster.\n\nDean balled his hands together, and then stole a glance at Amy. \"Nothing...\" Dean held his breath.\n\nMax leaned toward the couple. His bushy eyebrows, which looked remarkably like caterpillars, rose, and caused deep lines on his forehead. \"It will help if you tell us. It will. I know.\"\n\nDean wet his lips and looked away from Amy. \"We were...we were inside the perimeter.\" He cocked his head. \"We were supposed to be safe.\"\n\nAmy touched his hand and he jumped. \"What happened?\"\n\n\"We weren't allowed to have booze on base. Hell, it wasn't allowed anywhere. But one of my buddies arranged to smuggle in some beer. A local kid would deliver it, stolen from the PX, black market, you know how that works.\"\n\n\"Sure do,\" Max replied as he looked at Amy. \"Amy, anything from the States had a value you wouldn't believe. It was Twinkies in my day.\" They chuckled but the lightheartedness vanished as quickly as a candle's flame in a windstorm.\n\nDean sat somber, and stared with a soulless gaze. \"I didn't feel like a beer. It was too damn hot. So, I walked over to another tent 'cause I knew they had some Coke. I walked back, the can in my hand, when this kid ran up with a small, blue plastic cooler under his arm. I figured it had to be the contraband beer.\"\n\nDean stopped talking for a few minutes and Amy's fingers twined with his. She gave him a narrow-eyed, uncertain look. \"It's all right. I'm here.\" A corner of his mouth rose for a second, but the smile didn't come out.\n\n\"The kid dropped off the cooler, and started to run away as fast as he could. The Coke can fell from my fingers. I knew; I just knew something wasn't right. I ran and yelled to get away...\"\n\nMax took a deep breath and let it out slowly. \"It was rigged, wasn't it?\"\n\n\"Yeah. When my buddy opened the top, a claymore went off. She took nearly all of the blast. The pressure wave knocked me flat. Everything went into slow motion. It seemed like the blast lasted for twenty minutes, but it was over in a fraction of a second. When I managed to stand, I was wearing my buddy, or what was left of her. Blood, teeth, brains, and hair all smeared and matted together. One second we were going to share a drink, and the next she wasn't there. I took a few steps before my knees unhinged, and I dropped to the sand, trying to wipe her off of my uniform. But I couldn't. Sometimes I can still smell her burnt flesh on mine.\n\n\"Have you ever smelled blood? I don't mean just a few drops here or there, but a shed load of blood. It smells like hot metal. Blood tastes metallic...like broiled nails. Every beer I've tried to drink since that day tastes like blood; smells like blood. It won't go away.\"\n\nAmy sat motionless, as depressing thoughts stole into his mind.\n\n\"I can't see her face anymore...\"\n\n\"Her face?\" Max interrupted. \"A woman?\"\n\n\"Yeah, she was a non-comb. She repaired the friggin' radios, for Christ sake. She was my friend; my buddy.\"\n\n\"Why can't you remember what she looked like?\" Amy asked cautiously.\n\n\"Because she doesn't have a face! It was on my shirt. Like a Halloween mask: there were holes where the eyes and mouth should be. But they weren't there. They just weren't there...\"\n\nHis hands formed tight fists and pounded the desktop. Suddenly, he stopped. He ran his fingers over his face, placed his head down, and Dean began to cry in big, gasping sobs. Amy stood, moved toward the door, her ponytail swinging with each step, and she stepped into the hallway. With arms crossed, she stared out through the tall windows that went from the ceiling to within a few feet of the floor. The cold, bleak Colorado winter raged. She heard the door open and close. She noticed Max as he walked over and stood beside her.\n\n\"It's good that he lets it out.\"\n\nAmy bit her bottom lip. \"I don't know how much more of this I can take.\"\n\nMax placed a shaky hand on her shoulder. \"I understand. I'm not usually one to hand out guilt trip tickets, but...\"\n\n\"But what?\"\n\n\"I don't know why Dean has opened up to you. When it's just the two of us, he's quiet and says very little; but every time you come to these sessions, his feelings come pouring out.\"\n\nAmy's finger touched the corner of her eye, and smeared a single tear across her cheek. \"I don't know why, either.\"\n\n\"I'm going to tell you something that I do know, Amy. I've been doing this for a long time.\" Max sat on the cold knee-high marble window ledge with his back against the glass. He tugged Amy down beside him. \"If he doesn't come to terms with his troubles, and you abandon him, he'll be dead within a year.\"\n\n\"You said you weren't handing out tickets for a guilt trip.\"\n\n\"Take it like it is. He tried once. The next time he won't be so lucky. A lot of returning vets get caught up in drugs, booze, or some other self-destructive behavior.\"\n\n\"That's one hell of a token you handed me.\"\n\n\"It's your choice whether or not you get onboard.\"\n\nAmy turned slightly and looked over her shoulder at the frozen landscape. \"Last year, just as the aspens started to drop their leaves, I learned about Dean's PTSD.\" She wet her lips, and while staring at the snow, continued. \"I have a ten-dollar bra pinned to the ceiling of a greasy old bar...\"\n\n\"Molly's Bar?\"\n\n\"You know it?\"\n\n\"You bet. Every vet in the area knows about Molly's Bar,\" Max began. \"There's another ten-dollar bra hanging from the ceiling, too. It belongs to my wife. She and I made a promise to each other decades ago. It was 1969, and I just got back from Vietnam.\" Max sucked in a few long, deep breaths, and then let each one out slowly as he gathered his thoughts. \"The '68 Tet Offensive had begun. I turned twenty, and I was scared to death. That's been forty-four years ago, and yet sometimes out of the blue, I can still smell the jungle. I look up at a clear blue sky, and I can see the planes. I hear the helicopters. The screams of the wounded. The silence of death.\n\n\"When I came home. People spat on us. Called us names. Baby killers. I was one of the lucky ones. I had a girlfriend who loved me. She helped me though some God-awful times.\n\n\"The men I've counseled all told me the same thing: it's not the battles away from home they're afraid of; it's the ones they'll fight when they come home. The ones they know they'll never win.\"\n\nMax lowered his hand onto Amy's and gave it a gentle pat. \"Until you've lost a brother in hell, you will never understand.\"\n\nAmy looked at the door that separated the hallway from the small office. \"I love him.\" She reached behind her head, and pulled an elastic band from her ponytail. She fluffed her hair, and let it fall across her white turtleneck. \"Are you saying he'll never get over this?\"\n\n\"No...it's part of him. They're shadows he can't quite grasp; whispers in the dark. He'll need to learn to live with it, just like I and so many others have.\" Max touched Amy's shoulder. \"It does get better. I know.\"\n\n\"I don't feel like going on a guilt trip today. But tell me, his best friend, the one killed at Kunduz, are his parents still alive?\"\n\nMax rolled his eyes toward the ceiling as though the information was painted on the tiles. \"Yes, they are. They live in Georgia.\"\n\nWith her hand on the doorknob, she looked over at Max and said, \"Good.\" Then she entered the room with Max trailing behind.\n\nDean's head rested on his arms. She dipped her lips to his ear, and wrapped her arm around his shoulder. Her long black hair fell across them. \"Hey, I'm back. I love you and I'm here. We'll get though this. Together\u2014you and me.\"\n\n*****\n\nThe Earth kept its promise as winter gave way to spring. The aspens soon wore a new coat of shimmering green even though the days were getting shorter. Winter followed fall as usual, and a light covering of new snow refreshed the grimy drifts along the roads and sidewalks. It was late December. The year seemed to come to an abrupt end.\n\nAmy had stepped out of the shower, a white towel wrapped around her body, when she noticed Dean leaning on the doorjamb, his arms crossed and a wide smile on his face.\n\n\"I know that look,\" she said.\n\n\"Really?\" He moved from the doorway, and with the tip of his finger caught the edge of the towel, and quickly whipped it from her body. Instinctively she tried to cover herself with her hands. \"I've seen you naked before.\"\n\nAmy realized any effort to cover herself would be fruitless, lowered her hands, and stood before him while she began to pull a hairbrush through her long tresses. \"You're something else.\"\n\n\"That's why you love me, isn't it?\" He pulled her close, and wrapped his arm around her wet body. \"I'd like to do that.\" He sat her on the chair, pulled another behind her, and brushed Amy's black hair till it shined like a panther in the dark. Amy closed her eyes, enjoying the wonderful sensation. \"I thought we'd take a walk tonight. It's snowing and I thought...\"\n\n\"We're suppose to be at Molly's tonight. You said that.\"\n\n\"We will be. I thought a walk in the snow would be...romantic.\"\n\n\"I planned on wearing a skirt with heels tonight, but it's too cold outside if you want to take a walk in the snow. Jeans?\"\n\n\"That's fine.\"\n\nAmy shook her head, her hair flying around her face. \"Oh no, you've got something up your sleeve. You've never turned down seeing me in a skirt and heels. Never!\"\n\n\"It's only ten degrees outside. You'll freeze your legs.\"\n\nAmy stood and pointed her finger at him. \"You've got something going on. Your eyes get shifty when you're up to no good. And they're moving a mile a second.\"\n\nSoon Amy had dressed, and she stood by the door waiting for Dean. They walked down the sidewalk hand-in-hand toward a small city park close to their apartment.\n\nAmy leaned her head on Dean's shoulder then looped her arm around his. \"This is nice. The snow, the Christmas lights. It's so romantic.\"\n\n\"Sure is. It's not quite as cold as it was last year.\" Dean gathered his thoughts, pausing a long time. \"Amy, I'm glad you came back and saved me that night.\" He held her hand. \"Thank you for saving my life.\" They continued to walk along the sidewalk when Dean stopped in front of the park's entrance. One of the streetlights had burned out, allowing a wedge of darkness to creep in. Dean led her into the park. They walked up to a large tree and Amy leaned against it.\n\nDean looked out over the trees to the stars then back at Amy. She dangled her arms over his shoulders. \"Okay mister, what are we doing out here?\"\n\n\"I don't know if I'd be around if it hadn't been for you.\" Amy tried to put a finger across his lips to shush him. \"They told me at work, you're a pretty good catch.\" He reached into his pocket. \"I know they're right, too.\"\n\nAmy clasped her hands and held them to her face when she saw the small, gray-felt box. He removed a silver ring. \"I think I'd like to keep you around.\" Dean dropped to one knee. He slipped the ring on her finger. \"Will you marry me?\"\n\nStunned, Amy didn't say a word. Then tears pooled in the corners of her eyes, broke free, and trickled down her cheeks. \"Yes! Yes, I'll marry you.\" She cupped his face and kissed him, while Dean hugged her as tightly as he could. \"You're damn right, I'll marry you!\"\n\nThey stood under the tree, as snowflakes covered their clothing. Amy, still in shock, smoothed the silver band on her finger. \"I didn't think you'd ever ask.\"\n\n\"I wanted to earlier. I knew you've had doubts. It's not easy being with someone with my troubles. I'm on terms with 'em now.\"\n\n\"I knew you were up to something the way your eyes darted around. Think you're pretty smart, huh?\"\n\nHe took Amy's hand, and they walked back to the sidewalk. \"Yeah, I do. Besides, it worked for me.\" They took a few more steps when Dean stopped. \"Last year around Thanksgiving you said we'd go to Aspen, and I could keep you in nothing but heels as we sipped hot chocolate and watch a roaring fire in the fireplace. You said we'd make new memories together. Is that offer still on the table?\"\n\nAmy rose on tiptoes and whispered. \"A pair of high heels, a pair of very sheer hose, a cup of hot chocolate and my husband. We'll make new memories; just me and you.\"\n\n*****\n\nLater than night, Amy and Dean went to Molly's Bar to celebrate their engagement. Molly knew ahead of time, and it took all the willpower she had to contain her excitement. Even Harold joined in. That night, they packed a bag and headed west to Aspen. The drive seemed to take years but before long, Dean turned onto a small road and into the resort. Minutes later, they had a small, cozy cabin to themselves. Dean opened the door and they tentatively walked inside. A massive stone fireplace that reached to the ceiling drew their attention. Wide windows looked out over the ski trails, sheer white drapes pulled back for some personal time.\n\nAmy ripped her jacket off and threw it onto the floor. She pulled and tugged her shirt from the waistband of her jeans and frantically worked on the buttons. She threw her shirt over her shoulder as she walked toward Dean like a cat stalking its prey. She reached behind and snapped open her bra and tossed it at him. Her hair, black as an unlit alley, fell across her shoulders.\n\n\"I am going to fuck you like you've never been fucked before,\" she said flirtatiously.\n\nDean's eyes were locked on her, wearing only jeans and heels; she looked amazingly sexy. He fumbled for the duffle bag before sitting it onto the sofa. \"Here,\" he gulped, and handed her a shoebox. \"Just these heels.\"\n\nAmy slipped the top off and looked inside. \"Anything else?\"\n\n\"Now that you mention it.\" He reached inside the bag and recovered a red thong he swiped from her dresser drawer. \"This, too.\"\n\nDean handed it to her, and she spun it around a finger. \"My pleasure, husband.\" Amy said as she walked toward the bathroom. She stopped a few steps later. \"You, Mr. Bradley, are to be naked and ready for me.\"\n\n\"We're not married yet.\" Dean pulled his belt from his pants. \"I'm going to get the fire started.\"\n\nShe walked back to Dean, and her hand slid down the front of his pants. \"Then do it in the nude.\" She gave him a playful squeeze, sashayed to the bathroom, stopped for a second and turned. \"As far as I'm concerned, I'm your wife; you're my husband.\" She entered the bathroom.\n\nWhile Dean was busy with the fire, Amy wiggled out of her jeans. She stepped into the red thong, and then carefully slipped on the highest pair of heels she ever owned. She wobbled a bit, and her hands held a death grip on the countertop while she got use to her shoes. She glanced at her reflection in the mirror. Her long hair covered her breasts, yet with any movement, a nipple would peek from behind a black silken curtain. Her fingers ran along the elastic of her panties, then down her thighs. She cupped her small breasts in her hands and turned from side-to-side. Yes, Dean Bradley, you're one lucky guy to have snagged me. I am one hell of a catch. She turned the other way and watched as her hair followed her every move. She adjusted the thong around her waist. Mrs. Dean Bradley. That sound, those words, has a nice ring. She slowly opened the door and walked out of the bathroom.\n\nDean had turned off the lights; the fire burned brightly, throwing long soft shadows across the room.\n\n\"Is this what you had in mind?\" Amy asked, entering the main room.\n\nDean was busy with the fire, and didn't hear her walking on the carpet. He turned, somewhat surprised, and then stood before her. His manhood, hard and erect, curved up slightly.\n\nHis eyes felt like fingers and she knew every inch of her body was being touched. \"My God, Amy, you're beautiful.\"\n\nHe came to her and she wrapped her arms around his waist. The fire sent its warmth into the room, and it felt so nice on their skin. Dean moved his fingers though her hair and then down her arms.\n\nAmy's arms moved from his waist. She gripped his manhood. Hot and pulsing, she could feel his heart beating. She gave him a playful squeeze before she released her grip. Her fingers then moved along his back until they rested along a white jagged scar.\n\n\"Mortar shrapnel near the Euphrates River with the 1st Marine Division.\"\n\nHer hands moved slowly, touching the right side of his back. \"Ambush at Nasiriyah.\" Amy's hands touched his skin as gently as she could. Another scar. \"An IED at Karbala Gap.\"\n\nAmy's fingers lingered on a long scar across his right arm. \"Bar fight in San Diego.\" She moved her fingers lovingly across his shoulders. On his left shoulder, there was a deeply puckered, jagged scar. \"An IED at Kunduz; where you saved all those men.\"\n\nAmy rose up as high as she could and cupped Dean's face with her hands; then her fingers traced Dean's lips softer than the glance of a feather. She placed a kiss on his lips.\n\n\"Aspen, Colorado with Amy, your wife.\"\n\n*******\n\nEvery spring, Mother Nature breaks out her pallet of colors and paints the valleys and mountains of Colorado in shades of green. Late June in Colorado is the perfect time for a couple to marry. So it was on a clear Saturday afternoon, with the Rocky Mountains in the background, Dean and Amy became man and wife.\n\nDean's struggle with PTSD had at last been brought under control. Amy gave birth to their first daughter a year after the 'I do's'. Dean named her Willow. Years later, a second daughter, Audrey, was born.\n\nDean's small apartment struggled with two adults and two growing children. They needed a bigger place. Twenty miles out of town they found the old farmhouse they wanted. It was the house that soon became their home. Large enough to grow, should child number three come along, yet far enough away from the city lights that you could stare at the night sky and see all the stars.\n\nIn the ensuing years, Amy moved up the corporate ladder. She was now in charge of pre-production at the graphic design house. And Dean went from hammering nails to a supervisor overseeing the workforce.\n\nThe years piled up and before they knew it, Willow celebrated her twelfth birthday. She and her sister were at the neighbors playing.\n\nAmy stood in the bedroom, and wiggled her small breasts into a white bra. She shimmied a tiny pair of panties up her thighs. She adjusted them around her waist. The small patch of black hair between her legs seemed to push out from the flimsy material. She stood in front of the full-length mirror that hung on the back of the bedroom door. She turned side-to-side, adjusting her bra and panties, trying in vain to cover her body.\n\n\"What the hell was I thinking when I agreed to this,\" she mumbled, \"I'm damn near forty and he wants me to parade around on the back deck like this.\" Amy turned and tried to adjust the panties again, but no matter what she did, they didn't cover much.",
        "She shrugged, and then sat on the bed. He never asks for much, she thought. Sure, Dean has a thing for lingerie; he likes seeing me wear it and not much else. I guess he could be like Stacy's husband. Always coming home drunk and passing out on the floor. A smile flashed across her face. Or like Brianna whose husband had a BDSM fetish and liked whips and chains. Amy slipped on a pair of white heels. No hose this time, unusual for Dean, and that made her even more concerned. She stood and took in a few long, slow breaths. She opened the door and walked through the house in her bra, panties and heels.\n\nShe saw Dean leaning on the railing of the deck. The mountains in the background with their snowy tops seemed to poke right though the clouds. The sliding door squeaked as she pushed it open. Dean didn't move. He didn't say a word. Amy stopped at the door's edge and looked around nervously. She took a few tentative steps toward her husband, and felt as if every eye in Colorado was watching her. Dean heard her heels as they struck the wood planking. In a matter of seconds, she stood beside him and looked at the mountains.\n\n\"Well, here I am. As promised.\"\n\nDean turned and placed his hand around her waist. \"You look sexy.\"\n\n\"I'm standing here in my underwear. I'm not feeling sexy. What if the neighbors see me?\"\n\n\"Our nearest neighbor is over a mile away. We're half a mile from the main road. No one will see us.\"\n\nThat's when Amy noticed Dean had shorts on. \"That's not fair,\" she proclaimed as she pointed to his belted chinos.\n\n\"And what are you going to do about it?\"\n\nAmy grinned. \"This!\"\n\nHer fingers quickly freed the snap on his shorts, and within seconds Dean's shorts pooled around his bare feet. Amy let out a gasp 'cause today Dean went commando.\n\n\"Oh dear, what do we have here?\" Amy said, holding his swollen cock. \"I still turn my husband on?\"\n\nDean slipped his arm back around her waist and pulled her close, pressing his hard cock against her body. \"Absolutely.\" He moved one of the straps of her bra across her shoulder and down her arm. He cupped her face in his hands and placed a kiss on her lips. \"You still do after all these years.\" The other strap moved down her arm. He put small kisses along her shoulders, biting the bra straps. His tongue moved slowly across her shoulders. He buried his lips into the nape of her neck and kissed her.\n\nAmy slipped her hand around his neck while she nibbled his ear. \"I suppose you're going to make love to me out here on the deck?\" She felt the clasp of her bra snap open. Her bra dropped onto the deck.\n\nHe moved his head slightly. \"No...\" Then he pulled her tighter against his body. \"You're going to get fucked out here on the deck.\"\n\nHis hands grabbed her around the waist and lifted her off her feet. \"What! Put me down!\"\n\nDean smiled. \"All right.\" He marched her over to a picnic table and sat while Amy stood before him. He stroked his manhood as his eyes moved across her body.\n\n\"Now what?\" Amy asked cautiously.\n\nDean held his hand out, palm up. \"Panties.\"\n\nAmy shook her head. \"No, not out here.\"\n\nHe hooked a finger inside the elastic band of her panties, and pulled her close until their knees touched \"You were saying?\" He gave them a sharp tug and they stopped below her knees. He held his hand out once more.\n\nShe looked around nervously and slipped the small white panties down to her ankles then over her heels. She dropped them into his open palm.\n\n\"Spread 'em.\" Amy knew what he wanted. Sometimes Dean liked sex a bit rough. After all, she promised him a day of whatever he wanted. The sun threw long shafts of sunlight across the deck, and in a strange way, Amy felt young again. She moved her legs apart when Dean reach up and cupped her pussy. A finger smoothed around the entrance of her sex. He felt her moisture build, and soon it flowed down her inner thigh. She tilted her head back, and her hair billowed across her shoulders and down her back.\n\n\"Ooh, damn honey. She caught the edge of the picnic table and her legs moved farther apart. Her eyes closed and she felt his fingers exploring her most intimate regions.\n\nSoon he had her soft pink lips spread. The hot summer breezes seemed to blow between her moist folds. His finger rubbed along her clit, and she rose on tiptoes. His fingers touched her, and then he reached behind her back and pulled her closer. He kissed her nipples, and Amy's body soon began to turn to liquid. Her legs grew weak. Dean coated his manhood with her nectar.\n\n\"Sit,\" he commanded.\n\nAmy straddled the bench while she lowered onto Dean's pulsing cock. She used her fingers to guide him into her hot channel. \"Ooh...\" she moaned. She began to move rhythmically up and down. His hands gripped the table's edge while his head tilted back. A loud growl came from deep in his gut while his body shook. Amy's hand dropped back onto the bench's edge. She moved slightly and rose almost to the point where he'd fall out only to push him back. His hand caressed her breasts, squeezing her nipples between his fingers. Amy lowered her head; Dean's eyes were still closed, when she said, \"Who's fucking whom?\"\n\nAmy increased her tempo. Her small breasts bounced with each frenetic stroke she made on her husband's cock. The sounds of sex filled the air as the cheeks of Amy's ass slapped against his bare skin.\n\nDean placed his arms along the edge of the picnic table; his head tilted back, eyes closed. Amy's hips moved and rolled his cock. She bent down, still moving her hips, and she dragged her teeth across his nape. \"Who's getting fucked?\"\n\nHer lips pulled and kissed Dean's nipples. His body arched and every muscle tightened like an over wound watch.\n\n\"OHMYGOD!\" He wrapped his arms around her waist trying to slow her strokes when Amy felt his body erupt. He jerked a few times, and then his grip loosened. She felt his swollen member explode inside her. Amy's fingers dug into his shoulders; her body flushed as her climax surged through her body. She rested for a minute or two then stood. Small silver trails of cum pooled around the root of his cock. He put his head back to rest on the table.\n\n\"Not bad for a old couple, huh?\" Amy proclaimed while she watched the red of his skin slowly fade.\n\nAmy bent over to pick up her panties from the deck when he grabbed her hand. \"Leave 'em off.\"\n\nShe noticed cum sliding down her inner thighs. \"Someone sure was horny.\" She reached out and touched his shoulder. \"And so was I, honey.\"\n\nDean winked then stood and began to walk to the door. \"I'll be right back.\"\n\nShe noticed how her husband's body appeared so solid, so firm, and the way his tanned skin caught the fading sun. His shoulders seemed as rigid as a steel beam. Amy moved her head slightly to the left, then the right. She licked her lips while her eyes followed his tight bare ass into the kitchen.\n\nShe didn't think about all those eyes that might have been watching her. Amy conjured a vision of her friend Brianna wearing a tight black corset, a riding crop at her side, her high-heeled boot balancing on the back of her husband. She stifled a giggle. I guess being naked on the deck isn't that bad. Could be worse. Better to face the breeze than bend in a hurricane.\n\nTime has a way with people. It never stops, and, at times, moves at such a crawl we barely notice. While Amy and Dean were quietly surrendering their youth, time marched on.\n\nOver the past eight years, Dean's troubles only surfaced on anniversaries known only to him, and even during those times, the nightmares came and left quickly. Dean would simply tell Amy, \"Without nightmares, there can be no dreams.\"\n\nAmy walked to the edge of the deck, and placed her hands on the weather-beaten railing, staring at the mountains in the distance. It's funny how we attach time to pictures, events or people. She knew, as best as she could remember, that Max, the counselor from the VA, died around the time Willow turned four. A stroke, if she recalled correctly.\n\nShortly after that, Molly and Harold perished in a fire. But not just any fire. One cold January night, their restaurant, Molly's Bar, caught fire. Due to a cracked chimney liner, flames licked the greasy old building beams. Everyone escaped, but for some reason Molly ran back into the burning building. Harold rushed in behind her. They didn't come out. Dean said it must have been something important she left inside, something above the cash register, and Harold died trying to get her out. They died together.\n\nDean and Amy were the beneficiaries of Molly and Harold's insurance policy. They were set for life. Amy wiped a stray tear. She'd return that money ten times over to have those two back in their lives.\n\nA minute later Dean emerged with a washcloth. He sat on the bench and wiggled his finger. Amy rolled her hips, trying to walk as sexy as a naked, middle-aged woman can walk. His hands went between her legs and the warm cloth made her jump.\n\n\"We used to make love for hours when we were younger,\" she said. \"A lot has changed...\"\n\n\"I suppose so.\" He moved the cloth down both legs and back up behind her thighs. \"It's so damn hard to get twenty minutes alone around here anymore.\" Dean dropped the washcloth on the picnic table, moved his hand through her hair, letting the wind catch it. \"You're just as beautiful now as you were when we were younger. He then walked over to the hammock, slipped in, and then patted it. \"Come on and climb in with me.\"\n\n\"You think we can both fit on this thing?\"\n\n\"Sure, why not. I'll steady it for you.\" Dean put his foot on the deck and held the hammock steady.\n\n\"We're naked out here,\" Amy said, as she crossed her arms, trying to hide her breasts.\n\n\"So we are... Come and get in.\"\n\nAmy climbed in. It shook and tilted while Amy snuggled against Dean. He pulled his foot up and the hammock rocked slowly.\n\n\"I've been wanting to do this for a long time,\" Dean said.\n\n\"Screw me on the deck? Or have me lying naked on the hammock.\"\n\n\"Both, I guess. Haven't you ever had a fantasy?\"\n\n\"Girls don't have fantasies.\"\n\n\"Right,\" Dean said sarcastically. He rocked the hammock while their toes made love. They rocked in silence as they watched the sun cut through the cracks of the mountains, throwing long pillars of light across the land.\n\nAmy leaned on an elbow then twisted a length of her hair and pulled it across Dean's chest. \"If I tell you, you won't make fun?\"\n\n\"Make fun of what?\"\n\n\"My fantasy.\"\n\n\"Of course not.\" Dean perked up, his attention piqued when he heard Amy's mention of a fantasy.\n\n\"I have this, I don't know what to call it, perhaps a dream, but whatever it is it seems so real.\"\n\n\"Go on, I'm listening.\"\n\n\"I'm at a large party, but it's not a party-party. It's more like an expensive social gathering. Everyone's sipping pricey champagne from fluted stemware. I'm wearing a long black evening gown with a slit on the right that goes to my waist. My shoes are black stilettos with diamonds on the buckles. I've got on the tiniest panties imaginable, a lacey push-up bra, and hose so sheer if it weren't for the color, you couldn't tell I'm wearing them. Everything is black.\"\n\n\"Am I there?\"\n\nAmy cocked her head. \"No... I'm alone. Then two men come up beside me and take hold of my arms. They lead me away from the crowd. I'm put in this room. It's all in glass. A man comes in wearing a black tuxedo with a pastel yellow handkerchief in his breast pocket; he accuses me of being a spy, and says that I've stolen secrets from his client.\n\n\"I tell him I'm not. He doesn't believe me. He points a gun at me. I'm told to strip. I protest, but I do what he says. When I'm naked this man comes over and he searches me.\"\n\n\"You said you were naked.\"\n\n\"I am, at least in my dream. He searches every orifice. When he's satisfied, he cuts the legs from my hose, ties my ankles to the chair and forces me to pleasure myself as he watches.\"\n\nDean listened raptly as his wife described her dream and fantasy to her husband. \"What happens next?\"\n\n\"After I climax, he removes the bonds, bends me over the arm of the same chair and takes me from behind. That's where the dream always ends.\"\n\n\"Damn! Wow... Do you have any idea who this guy is?\"\n\nDean could feel Amy's face burn. \"Yes, I do. It's you!\" She snuggled close to Dean and the stubble on his cheeks scratched her face. \"I'd like my fantasy to come true someday.\"\n\nHe moved his arm over her shoulder and cupped her left breast. \"I think that's doable, if you're up to it?\n\nAmy giggled. \"Sure... After all, I am a spy, aren't I?\"\n\nDean's thumb caressed her nipple 'til it hardened. His little finger wrapped around the smooth curve of the bottom of her breast. Suddenly, his fingers stopped. \"What's this?\"\n\n\"What's what?\"\n\nHe took her hand and placed it at the spot where his finger lingered. \"Do you feel that? It's as hard as a rock.\"\n\nSomeone kicked her in the gut. Her fingers found the lump. \"Ah, it's nothing, these things come and go.\"\n\n\"I've never felt one before.\"\n\n\"I'm sure it's nothing to worry about.\"\n\n\"Perhaps, but you're going to have it looked at, right?\"\n\n\"Sure... Now where were we?\" Amy tilted her head and kissed Dean.\n\n*******\n\nWhile it seemed to be only the size of a small pea, and she told Dean it wasn't anything to worry about; it did, in fact, worry her. Several times she was almost caught at work, standing in a bathroom stall, her top off, her bra tossed over the door, checking to see if the lump had grown.\n\nShe thought it had. Her mind generated one scenario after another and as quickly as she conjured one, she dismissed it.\n\nAmy, busy with work as usual, didn't hear Dean as he and Amy's boss walked over to her.\n\n\"Hi,\" Dean said.\n\nAmy checked her wristwatch. \"It's a tad early for lunch, don't you think?\"\n\nDean looked over at Amy's boss then back toward Amy. \"I'm not here to take you to lunch.\"\n\n\"Where then? Is something wrong with the girls?\" Her face went ghostly white. \"Are they hurt?\" Amy dropped a stack of photos and they slid along the light table.\n\n\"No, Willow and Audrey are fine. However, you and I have an appointment.\"\n\nAmy fussed with a large transparency on the light table, and then tried to gather the dropped stack of photos. \"With whom?\"\n\n\"Your doctor. I made an appointment to see him.\"\n\nAmy looked at her boss. \"I'm too busy. We've got deadlines to meet.\"\n\nDean stepped closer to Amy, and then looked over his shoulder. \"Bullheaded, isn't she?\"\n\n\"Women aren't bullheaded, we're stubborn,\" Amy's boss said, flashing a smile. \"And your wife is terribly stubborn.\"\n\nDean's eyes focused on Amy. \"If you don't go with me willingly, I'll toss you over my shoulder and take you to the doctor's office. Your choice.\"\n\n\"You wouldn't dare!\" Amy sneered.\n\nTwo heartbeats later, Dean tossed her over his shoulder like a sack of potatoes. She kicked and pounded his back with her fists. Without a word, he walked to the main door, with Amy screaming expletives.\n\n\"I'll put you down, but we're going to the doctor's office, agreed?\"\n\n\"All right. All right, put me down.\"\n\nDean stood her up and Amy adjusted her skirt; all eyes were devouring the scene. \"You know they could see my butt hanging out.\"\n\n\"Perhaps.\" He held the door and they walked out together.\n\n*******\n\nThey drove across town to Amy's doctor. The waiting room was practically empty when they arrived; they just got comfortable when a nurse called her name.\n\n\"This won't take long,\" Amy said, \"I'll be right out in a minute or so.\"\n\nDean stood. \"I'm coming, too.\"\n\nBy the determined look in his eyes, Amy knew it would be useless to protest. Dean followed Amy into the examination room. A nurse checked blood pressure, pulse, the usual things, and then handed Amy a gown. \"Remove your clothing and put this on. The doctor will be in shortly.\"\n\nAmy sat on one of the wooden chairs, slipped off a shoe, and massaged her toes. \"You know this is a waste of time, don't you?\"\n\nDean sat quietly and didn't say a word. Amy slipped her other shoe off, stood and began to work on the zipper of her skirt when she stopped. \"This is stupid, too. I'm not going to sit here naked when all he's going to do is check my boobs.\" She worked on the buttons on her shirt and tossed it over to Dean. She slid the straps of her bra down her shoulders, reached behind her back, and opened the clasp. She handed Dean her bra, put the gown on and sat on the examination table. She swung her legs while they waited.\n\n\"It's cold in here,\" she said.\n\n\"Examination rooms usually are.\"\n\n\"This is a waste of time.\"\n\n\"I'm concerned.\"\n\nA knock sounded and then the door opened. \"Hi, Amy, what's the problem today?\" The doctor turned and saw Dean sitting. \"Ooh!\"\n\n\"Doctor Edwards, you remember Dean, my husband. He's the reason I'm here.\"\n\n\"Yes, of course.\" Doctor Edwards extended his hand and shook Dean's. \"Pregnant again, are we?\"\n\nAmy blushed. \"No. A few... I don't know when...\"\n\n\"Three week ago,\" Dean interrupted.\n\n\"He found a lump in my left breast.\" Amy continued, \"It's not big, probably fatty tissue.\"\n\n\"I see,\" Doctor Edwards began, \"When did you get your medical degree?\"\n\nAmy's face flushed.\n\n\"Let me take a look. You can wait outside if you wish, Mr. Bradley.\"\n\n\"No!\" Amy said, with a touch of fear coloring her voice. \"He's seen me naked.\"\n\n\"I suppose he has.\" The doctor opened her gown and touched her breasts. Amy looked away, then over at Dean sitting quietly on a hard wooden chair. The doctor's hands moved gently and expertly around each breast. His fingers guided by decades of practice and years of schooling.\n\n\"Is this the lump your husband found?\"\n\nAmy moved her fingers to her left breast, and touched the doctor's finger resting exactly on the suspected lump. \"Yes.\"\n\nShe caught his eyes and she watched as they changed to a deeply troubled look. His pupils drew in tight and his facial expression changed. He closed her gown.\n\n\"When was your last mammogram?\"\n\n\"I've never had one.\"\n\n\"Why? They don't take but a few minutes.\"\n\nAmy shrugged. \"I didn't think I'd need one. I'm so small.\"\n\nDoctor Edwards shook his head. \"This is one example where size doesn't matter.\"\n\n\"What's wrong?\" Dean asked.\n\n\"There's a lump, all right. As a matter of fact, I can feel what I think is two, or maybe three, smaller ones around the large center mass. You're going to leave here, and get a mammogram today.\" The doctor stood and opened the door. \"I'll be right back.\" He wiggled the door on its hinges. \"Go ahead and get dressed.\" He pulled the door closed behind him.\n\nAmy jumped from the examination table and started to dress. She was about to snap her bra together when she stopped. \"Here,\" as she handed Dean her bra. \"Why put it on? I'll have to take it off when we get to the other office.\" She sat back on the examination table.\n\nDean pushed it into his pants pocket as the doctor returned. He pulled out a wheeled swivel stool, then sat and rolled between the two. He handed Dean some papers and then patted Amy's hand. \"I called a colleague. I told him what I felt, and he also suggested a mammogram. Now, I don't want either one of you to read more into this than there is, but he also suggested a needle biopsy of the lump.\"\n\nDean's eyes flared, and he looked at Amy sitting on the examination table as pale as parchment paper. Her face had gone blank. \"What's that?\" Dean asked.\n\n\"It's a simple procedure. The breast is numbed, and a small needle inserted into the mass. A technician will withdraw a bit of the material. It's checked in the lab to see what's really there. It's a simple procedure.\"\n\nAmy tried to smile. \"I don't do needles very well. Does it hurt?\" She looked at Dean and attempted to smile once more.\n\n\"The procedure is...uncomfortable.\"\n\nAmy shrugged. \"Wonderful! Nothing like having your boob stabbed with a needle, is there?\"",
        "Dean leaned over and took her hands. \"It will be all right.\" He looked as his watch. \"We should be going. Hospital, right?\" Doctor Edwards nodded. Dean's eyes moved from Amy to the doctor still sitting on the chair. \"Go ahead and wait for me in the reception room. There's some paper work I'm sure they want me to complete.\"\n\nThe doctor abruptly stood, sending the chair rolling back until it hit the wall. Amy moved toward the door and stopped. \"I'll be right out,\" Dean said.\n\nAmy left and Dean looked at the doctor. \"I've been around the block a few times. A doctor won't order that type of test unless he suspects something.\"\n\n\"It's just a test. That's all.\"\n\nDean's fist came down hard on the examination table. \"Bullshit!\"\n\nThe doctor could tell Dean was in no mood to argue. He rolled the small chair out from the wall and sat. \"I'm not sure, this is not my area of expertise, but the mass in your wife's breast is hard. It's not fatty tissue. I could feel several smaller lumps growing off of the larger one.\"\n\n\"Does Amy have breast cancer?\" His words came out hollow and weak.\n\n\"I'm not saying that. I don't know. More tests will be needed.\"\n\n\"What is it with doctors and your tests!\" Dean looked at the floor and shook his head, avoiding eye contact. \"Doctor?\" He looked at the man in the white coat sitting quietly. \"I've seen a lot of shit in my life. Believe me, I can handle this. Does-my-wife-have-breast-cancer?\"\n\nThe doctor's tongue wet his upper lip, and then he placed his hand on Dean's knee. \"I'm not sure, but I suspect she does.\"\n\nDean felt his heart whamming around in his chest. \"What's next?\"\n\n\"Time is our most valuable weapon. If she does indeed have breast cancer, the quicker we move, the better our odds of beating this. It will take a few days for the lab to work on the biopsy. I'll call you as soon as I get the results.\"\n\nDean's chest heaved, and he took in slow deep breaths. \"That's all we can ask for right now.\"\n\nDean shook the doctor's hand and left the room. Amy had been waiting and as soon as Dean entered, she smiled. \"All the paper work finished?\"\n\n\"For now.\"\n\nTogether, they walked out of the office and to their car. Midway there, Dean stopped and put his hands around her waist. Suddenly, he lifted her and twirled her around.\n\n\"What was that all about?\"\n\n\"I love you, Amy.\" He squeezed her fingers.\n\nThey started to walk again taking only a few steps when Amy reached up and grabbed his shoulder. \"Is there something I should know? You were in there a long time. You weren't just signing insurance papers.\"\n\nDean shook his head. He'd promised himself that he'd never tell a lie to Amy; but the circumstances had changed. No need to upset her. Soon they were in traffic, heading toward the hospital. There were endless papers to sign, more blood drawn and x-rays taken. An hour later, Amy emerged; her neat and tidy business suit seemed disheveled. Her legs were bare and her hair tied into a sloppy ponytail that hung limp behind her back. She walked over and sat beside Dean. \"I need to sit for a minute.\"\n\n\"I wish I could have been in there with you.\"\n\nAmy palmed her eyes. \"Uncomfortable, my ass. That hurt like hell!\"\n\nDean put his arm around her shoulder, and Amy leaned on it. She fussed with the buttons on his shirt. In a whisper, she asked. \"I have breast cancer, don't I? That's why you took you so long in the office, isn't it?\"\n\nAmy heard each of his breaths. She felt his heart beating. She noticed his hands moving through her hair. She took a deep breath then buried her face in the nape of his neck. Dean's strong hand gripped her tighter and he whispered in her ear.\n\n\"Your doctor is concerned. You may have an issue with your left breast.\"\n\nAmy began to cry softly. She found his hand and squeezed it hard.\n\n\"If you do, and that's a big if, together you and me; we'll fight it.\n\n*******\n\nFor the next several days every time the phone rang, they jumped. Then on Thursday evening the call they waited for, yet never wanted to receive, arrived. They were to meet in the doctor's office at nine the next morning. That night neither could find any peace and the hours seemed like years.\n\nThey sat side-by-side in expensive-looking leather chairs, directly in front of a large mahogany desk polished to a luster. Medical books lined the shelves on both sides of the room. They heard the door open, and Doctor Edwards walked in with a folder under his arm. He sat, placed his hands together, and looked at the anxious couple.\n\nHe shook his head slightly. \"This is never easy.\" And with those few words, Amy instantly knew what the biopsy revealed.\n\nAmy blurted out, \"I have cancer, don't I?\" She felt her body turn to water and she melted into the chair.\n\nThe doctor's chair scuffed the floor, and he pushed out from his desk. He moved to the front and sat on the edge. He took Amy's shaking hands. \"Yes, you do.\"\n\nNumb with fear, Amy didn't say a word. Dean, always a man of action, and not one to wait, spoke next. \"What do we do now?\"\n\n\"Amy has ductal carcinoma, the most common type of breast cancer. It's in both breasts.\" Doctor Edwards returned to his desk. Messing with the papers in the folder, he looked at Amy. I'm going to send you to an oncologist, one of the best in the state practices right here in Boulder. He'll detail treatment options.\"\n\n\"What options?\" Dean asked.\n\nDoctor Edward looked at Amy sitting silently. \"Chemo would be the first, followed by radiation.\"\n\nAmy's fingers moved through her black hair. \"I'll lose my hair?\"\n\n\"I'm afraid so.\"\n\nA rueful cry spilled from Amy's lips while Dean sat as calm as a monk during prayer. It was one of the few times in his life that he had no options to call upon.\n\n********\n\nThe team of doctors attacked Amy's cancer with every weapon at their disposal. The chemo made her so weak, she slept most of the time. The doses of radiation did indeed cause hair loss. Weak and bald, she left the hospital. There was no more chemo and she had a lifetime worth of radiation all in two weeks.\n\nThey were to return to the oncologist in a week to review the final tests. Amy, apprehensive as a cat in a Chinese restaurant, had a bad feeling. She clutched Dean's arm as tightly as her weak grip allowed, as they walked into the doctor's office.\n\nThe oncologist looked at the couple sitting in high-back leather chairs. \"I'd like to have better news.\"\n\nAmy held her breath.\n\n\"Go on,\" Dean said.\n\n\"The chemo and radiation have reduced the size of the mass, but it's not enough. Basically, we poked the lumps with a stick and they'll be back with a vengeance.\"\n\nAmy sat quietly, simply too shattered to speak. She heard the words; she knew what he was saying. She squeezed Dean's fingers tighter.\n\n\"More chemo? Radiation?\" Dean asked.\n\nThe doctor shook his head. \"No...\" He placed his palms flat on the desk. \"Are you a numbers person?\"\n\n\"A lieutenant in my unit always told me 'liars figure and figures lie.' I want facts.\"\n\n\"Very well. The fact is the chemo and radiation didn't work as well as we would have liked. That leaves us with one option.\"\n\n\"And that is?\"\n\nThe doctor looked squarely into Dean's blue eyes. \"Removal of the breasts, and, if need be, the surrounding tissue and lymph nodes.\"\n\nAmy buried her face into her hands. \"No. No. No. No.\"\n\n\"Mr. Bradley, here are the facts. If we do nothing, there is zero chance Amy will live more than a year or two, at most. With a double mastectomy, the prognosis would be nearly ninety percent survival over five years.\" He looked at Amy. \"With the treatments we have, it's not a death sentence anymore. We found it early; the chemo and radiation have it in check. I suggest you think it over, but don't wait too long.\"\n\n\"How early do you recommend?\"\n\n\"She has to build up her white blood cell count. We can't do surgery until her immune system is back up and functional. I'd like to see her in surgery by the end of this year.\"\n\n\"It's mid-October. That's not a lot of time.\"\n\n\"That, Mr. Bradley, is a commodity we can spare little of.\"\n\n******\n\nSome men drink. Others do drugs. But for Dean, his coping skill was his woodpile. Everyday before the sun ducked behind the mountains, he'd take his splitting axe from the barn, and sharpen the edge with a file 'til he could shave the hairs from his arm. Then he moved to the woodpile, carefully standing each log on end before bringing the axe down in one thundering blow. The wood would split, rocketing to either side of his splitting stump.\n\nAudrey played with the chickens, scattering cracked corn from small plastic teacups. Willow didn't venture too far from her dad. She kicked some stones, and then sat and watched the wood fly from the stump with every crashing blow. Dean noticed how somber Willow had become, and buried the blade of the axe deep into the stump. He wiped his hands with a rag he pulled from his back pocket and then sat beside his daughter.\n\n\"Okay, why the face?\"\n\n\"It's nothing.\"\n\n\"Ooh, nothing. Normally, you'd chase Audrey's chickens to make her cry. What's wrong?\"\n\n\"It's Mom.\"\n\n\"Mom's just sick, that's all.\"\n\nWillow thumped her fist onto a log. \"Mom has cancer, doesn't she? And she's going to die; isn't that true?\"\n\n\"No... where did you hear that?\"\n\n\"Dad, I'm almost thirteen. I can read. I understand grownup stuff. I read those cancer pamphlets you left out.\"\n\nDean gazed at the muddy ground. \"I guess my little girl isn't so little anymore.\" Dean blew out a long breath. \"You're right. Mom has breast cancer, but she isn't going to die.\"\n\n\"How do you know?\"\n\n\"There's a lot of fight in me and a lot in mom. But you leave that worry to me. You can help by just being Willow and being nice to your sister. She's too small to understand.\"\n\nWillow nodded. Just then the sound of a truck horn broke the still air as a rusty red Ford F-150 turned into the barnyard. The truck's engine shuddered to a halt, and out stepped Dixie Wadsworth, their closest neighbor, wearing a white cowboy hat. Her skintight dark blue jeans looked painted on. Clumps of mud smeared her brown cowboy boots.\n\nAt forty-two, Dixie could still turn men's heads. And around the local farms, she drew men like flies to a fresh cow patty. He fixed his eyes on hers, which were the color of the ocean on a bright day. Other than a few cursory glances at her breasts, which pushed out against a red plaid shirt, he wasn't interested.\n\n\"Dean, I swear if someone doesn't take that axe away from you, you'll clear-cut the whole state of Colorado.\"\n\n\"Just gettin' ready for winter.\"\n\n\"That's your story, huh?\"\n\n\"Yeah, and I'm sticking to it.\"\n\n\"Figured you would. Say, the old man and I thought you and Amy could use a little quiet time, if you know what I mean.\" She winked. \"How about if we take Willow and Audrey along with my girls and run into town for a pizza?\"\n\n\"Oh, I don't know...\"\n\n\"Ah come on, Dad?\" Willow begged.\n\n\"It'll do everyone good,\" Dixie added.\n\nDean surrendered after an onslaught of 'pretty pleases' from Willow. \"All right, Willow, but first take your sister inside and clean her up. She got chicken poop all over her clothes.\" Dean shook his head. \"I don't know why that kid finds chickens so fascinating.\"\n\nWillow dashed over, grabbed Audrey's hand and they sprinted toward the house.\n\n\"How you holding up?\"\n\nDean kicked a stray log. \"It's been rough. I had no idea how much work running a household could be. Amy works fulltime, does all the laundry, cooking, cleaning, and takes care of the kids.\" He stopped speaking for a few seconds, and then his words came pouring out. \"We haven't been together for a long time. Amy's been too exhausted. She needs her strength.\" The words came out faster than he realized, and before he knew it, he managed to tell Dixie more than he ever wanted.\n\n\"I told you we'd come and help. Are you too proud to let us womenfolk help out?\"\n\n\"It's not that. I thought I could handle it.\"\n\n\"Well you can't. I'll get with Amy's friends and we'll be here this weekend.\"\n\n\"But...\"\n\n\"Ain't no buts about it. You need a break from all of this, too.\"\n\nDixie took her hat off, and her hair fell 'round her face framing it in a curtain of hazel. She pulled some over her chest letting it fall, and gentle curls cupped both breasts. She glanced over her shoulder toward Dean's house, and then stood so close to Dean he could smell the shampoo that still lingered in her hair. With her hat in her hands, she spoke softly and said, \"If Amy isn't up to taking care of you, I'd be more than happy to keep your plumbing from rusting...\" She placed her hat back on, and then winked.\n\n\"I won't do that to her. You know that, don't you?\"\n\n\"Yeah I do.\" She gave Dean a rueful grin. She held her left forefinger to her cheek while her head moved slowly from side to side. \"Dean, I'd fuck you in a heartbeat.\" Dixie adjusted her hat and had almost turned around when she stopped. \"Actually, I'd be terribly disappointed if you accepted my offer. They don't make 'em like you anymore.\"\n\nDixie gave him a devilish smile as she pushed the cowboy hat back further on her forehead. Willow, with Audrey in tow, scampered out of the house. Dean picked Audrey up and held her in his arms. You listen to your big sister.\" Audrey nodded. \"And, Willow, you listen to Dixie.\"\n\n\"I will, Dad.\"\n\nDean hugged his children and placed them into the truck. He rubbed his daughter's head through the truck's window. He looked at Dixie's inscrutable eyes. \"Dixie, I appreciate the offer.\" He caught Audrey's eyes. \"But the price of admission is too high for me.\"\n\n\"Some other time, maybe? We're still cool, then? Dixie asked.\n\n\"Maybe in another life, but not now; and we're cool, you know that. You drive careful with my children.\"\n\n\"Dean, this weekend the girls will be over and we'll help you out.\"\n\nThe old Ford rumbled to life, and he watched its one taillight as it disappeared down the muddy lane.\n\n*******\n\nDean jerked the axe out of the stump, and placed it back in the barn. Just as he opened the front door, he saw Amy leaning against the kitchen table. Amy folded her arms across her chest as if she was cold, and cupped her elbows in her hands.\n\n\"Willow said Dixie offered to take them into town for pizza.\"\n\n\"It was a nice gesture,\" Dean said.\n\n\"I saw her sniffing around and trying to make a move on you.\"\n\n\"She wasn't making a move on me. Dixie likes to flirt. You know that.\"\n\nHe dropped his coat on the side of a chair. \"Willow knows about your cancer.\"\n\n\"How?\" Amy walked into the living room with her arms still crossed.\n\n\"You were right. We should have told her sooner. Our little girl isn't so little anymore. She's smart and she's worried about you.\"\n\n\"What did you tell her?\"\n\n\"I told her the truth.\"\n\n\"The truth? Did you tell her all about my cancer?\"\n\n\"Yes. I told her you were going to have your breasts hacked off.\"\n\nAmy clawed the back of the sofa with both hands. \"Hacked off? Is that what you told my daughter?\" A tear trickled down her cheek, and she slapped it away with the heel of her hand.\n\n\"I don't remember my exact words.\"\n\n\"How could you say that?\" Amy's hands tighten into fists. She ran at Dean and pummeled his chest with all her might. Dean tried to grab her hands but she fought and continued to hit him. He caught her hands and held her tight.\n\n\"Settle yourself!\" Dean yelled. His grip relaxed and she yanked free.\n\nTears streamed down her face. \"I'm facing this all by myself and you tell me to settle down?\"\n\n\"You're not alone!\"\n\n\"For now. What's going to happen after the surgery, when you look at my mutilated body? I'll be half a woman. I won't have boobs anymore, and you'll run just like my friend's husband did; just like that senator did to his wife. He didn't have to balls to even wait 'til she died! I'll be half a woman.\"\n\n\"That's not true and you know it.\"\n\n\"Oh, I know it all right. If the doctors were to cut off your dick, and you peed out of a straw, what would you be? Would it be the same? Or would you feel like half a man? Unable to...\" Amy's hands tightened and her knuckles turned white. \"Unable to make love anymore.\"\n\n\"It won't bother me.\"\n\n\"Liar!\" Amy stomped her bare foot.\n\nAmy tore at her shirt, ripping the buttons off and ricocheting them across the room. She threw open her shirt, exposing her breasts. \"Look at 'em! 'Cause they won't be here much longer. They'll be hacked off, leaving me half a woman. And all alone without a husband.\"\n\n\"You won't be alone!\" Dean screamed.\n\nAmy pounded her fists along the edge of the sofa. \"That slutty Dixie is already trying to wedge herself between us. Even before I found out I had cancer, I saw you ogle her when you thought I couldn't see. She's got tits the size of melons, and I won't have any!\"\n\nDean went to move.\n\n\"You bastard! Leave me alone!\"\n\nDean tried to grab Amy's hand but she fought his grip, and broke free, running into their bedroom. The door slammed shut with such violence, the photos on the walls shook. He walked toward it and listen. He heard Amy crying. Dean went to turn the doorknob but just as his hand touched the knob, he pulled his hand away. Better let her simmer down.\n\n*******\n\nDixie brought the kids back a few hours later. Full of pizza, they played together before Dean put them to bed. He sat on the floor, his back pressed against the sofa. None of the lights were on, and only the glow of the fireplace filled the room. He took a wrought iron fire poker, and jammed it into a log sending an army of fiery embers up the chimney.\n\nHis eyes watched the flames flicker with blues and oranges that seemed to blend together in a silent dance. Another poke at the log, and another burst of embers erupted. The fire crackled and danced before his tired eyes.\n\nHe didn't hear the bedroom door open. Nor did he hear Amy walk over to him; her bare feet made no sound on the oak floor. She touched his shoulder and he jumped, dropping the poker.\n\n\"Can we talk?\"\n\n\"You said to leave you alone. So this bastard did what you asked.\" Another jab and more embers filled the chimney.\n\nShe slid down beside Dean, and she reached for his hand. They sat for the longest time without saying a word.\n\n\"I'm sorry. You're not a bastard. I'm going through an awful lot right now, and when I saw Dixie out there sticking her boobs in your face...I'm sorry.\"\n\n\"I've never cheated on you, and I don't plan to start now.\" Dean blew an angry breath. \"I'm going to miss not being able to hold your breasts. I... I like kissing them. It was wrong to tell you it wouldn't make a difference. It does. But you'll never, ever, never be half a woman to me.\"\n\n\"Why are you so sure?\" Teary-eyed, her voice cracked.\n\n\"When we married, in front of God and all our friends, I promised to be by your side for better or for worse.\" He made a halfhearted poke at the log. \"This certainly isn't the better, but it could be a lot worse.\"\n\n\"How could it be any worse than this?\"\n\nDean stared at the flickering blue and orange flames. \"I could lose you...\" A hard jab at the burning log nearly knocked it off the fireplace grate.\n\n\"I just wish it would be over and done. This waiting is sometimes more that I can handle,\" Amy confessed.\n\nDean kept jabbing the burning log, and Amy noticed his anger grew with each thrust. \"The Marines have a saying, a code of honor, if you will: Semper Fi. It's Latin and means 'Always Faithful.'\"\n\nDean took another angry jab at the fire, then threw the poker on the granite hearth, and looked at Amy. \"I've tried all these years to let the past be the past. I work from sunup to sundown keeping the life I had pushed into the cracks of my being; the dark places of my soul.\" Dean continued, \"I'm sorry, hacked wasn't the word I wanted to use. I've never run from a fight, and I ain't about to start now. I have been and always shall be\u2014Always Faithful\u2014Semper Fi.\"",
        "Neither spoke, the only sounds were the crackling of the burning wood.\n\n\"I know.\" Amy tightened her grip on his fingers. \"Let's go to bed.\"\n\nDean followed his wife into their bedroom where Amy sat on the edge of the bed. He looked down at her while she pulled the top of her pajamas off. \"Remove your shirt, too,\" she asked.\n\nDean slid into bed, and soon Amy tugged him onto his side. She scooted over as close as she could, and pressed her small breasts onto his chest. She closed his eyes with her fingers. \"I want you to remember how I feel on your body. I want you to burn this sensation into your mind 'cause after next week, you'll never feel this again.\"\n\nAmy felt his arms tighten around her body pulling her closer and tighter. \"I'll never forget.\" Even though his eyes were closed, he was certain he could hear Amy's tears as they fell onto the pillow.\n\nDean opened his eyes. \"You know, when we were dating, and I had my troubles, of all the stuff the doctors gave me, there was one thing that always worked; always made me feel good. Always made me feel safe.\"\n\nAmy wiped tears with the back of her hand. \"What was that?\"\n\n\"When you'd sing for me.\"\n\n\"Ooh...\"\n\nDean placed his hand on her cheek, and with his thumb, caressed her skin. \"I'll never be on American Idol, but here goes.\"\n\nDean began to sing the same lullaby Amy had sung to him so many times when it seemed his world wanted to crash around him. Tears boiled from her eyes, leaving wide silver streaks as they meandered down her face.\n\nFor the next hour he held his wife. He cuddled Amy while he sang her the lullaby he knew by heart. Amy drifted off and found sleep. He slipped his legs out over the bed, and kissed her on the forehead. \"We'll get though this\u2014you and me.\"\n\nThe fire needed more wood, and the rack inside stood empty. Dean grabbed his coat on the way out to the woodpile. He stood on the doorstep, and looked out at the moonless sky. The cold night air gave every blade of grass a frosty coating of dew. As he walked toward the woodpile, each footfall sounded as though he was walking on breaking glass as the ice shattered.\n\nAt the woodpile, he stopped and looked at the sky. In all the years he'd been living in Colorado, he never stopped and watched the sky like he did that night. The arm full of wood he held soon tumbled into the icy mud. He glared at the night sky. \"Why God? Why her?\"\n\nEvery word hung in the cold December air like small shiny clouds. Dean sat on the old tree stump. \"Everyone I've ever loved, you took away. Half the Afghan rebels couldn't kill me, so you're killing me slowly instead.\"\n\nDean jumped up and shook his fist. \"If you want me, then take me! Give me the cancer, but not her. That's all I ask. Not her...\"\n\nHe lowered himself onto the stump. He ran his hands over his face and palmed his eyes. His chest heaved and he blew out long slow breaths that froze in the air. Soon tears fell though the cracks between his fingers, and while he sat on that old tree stump on a frigid Colorado morning, Dean wept for his wife.\n\n*******\n\nDean looked forward to the night. It was his time to relax. Amy and the kids would be asleep. The weather had turned colder, and the fireplace had become his best friend. Its warmth and soft yellow light filled the room. He was about to kick back, and watch the flames dance, as he had for several weeks when his eyes caught movement. A small hand cupped the corner of the wall. As he stood, he heard the sound of bare feet as they darted down the hallway. Willow. It had to be Willow. He entered her room and sat on the edge of her bed.\n\n\"Someone is supposed to be sleeping.\"\n\n\"I can't,\" Willow said, as she lowered the blanket from her face.\n\n\"I see. Worried about mom again?\"\n\nWillow shook her head. \"No. You said mom would be okay.\"\n\n\"That I did. So, what's wrong?\"\n\nShe snapped the blanket over her head. \"There's a new girl in school, and she's making fun of my name. Why did you and mom name me after a tree?\"\n\nDean hooked his finger on the binding of the blanket, and gently tugged it passed her eyes. \"It's a long story.\"\n\n\"I wanna know.\"\n\nDean pulled in a deep breath, and then pushed a few stray hairs from his daughter's face. \"You're as beautiful as your mother.\"\n\n\"You're avoiding the question.\"\n\n\"And just as smart, too.\"\n\n\"Dad!\"\n\n\"Just like your mother... Let me see. Once upon a time...\"\n\n\"Dad! I'm almost thirteen. No more 'once upons.'\"\n\nDean grinned at his daughter's frustration. \"You won't be thirteen for months. Okay. When I was a young man, I wanted to be in the Marines. So, I became a soldier. The Marines sent me to soldier camp, and that's where I met this man about my age. We had so much in common and soon we were the best of buddies. Now, talk about having a name kids could poke fun at; he had a dozy.\"\n\n\"What was it?\" Willow asked, as her fingers smoothed the nylon blanket binding.\n\nDean started to laugh, and then caught himself. \"Eugene Oscar Forsberg III. The guys in my unit called him 'Ed.' I always called him Eugene 'cause it made him mad.\"\n\n\"You're making that up.\"\n\n\"Nope. That was his name. We went through basic training, and then we went to more Marine schools before we went overseas to Iraq. We did what soldiers did.\"\n\nWillow's eyes dilated in the dim light of her bedroom. \"Did you kill anyone?\"\n\nDean fussed with the blankets. \"Sometimes we had to. Especially if the bad men were trying to put bullets into us.\"\n\n\"Ooh...\"\n\n\"Eugene and I were closer than brothers. We watched each other's back. We took care of each other. Then the generals decided it would be best to send Eugene and I to Afghanistan. So a few weeks later, there we were.\n\n\"One day, we were ordered to take a few trucks to another village. But those bad men put bombs in the road. On our trip to the village...\" Dean's voice began to falter. He flicked a tear from the corner of his eye.\n\n\"Dad?\"\n\n\"Ah, something in my eye. Something from the fireplace, I guess. Where was I?\"\n\n\"You were going to a village.\"\n\n\"Oh, yeah. The bad men put bombs in the road, and when we drove over them, they exploded. I wasn't hurt, and I began to pull my friends out of the burning trucks. But I couldn't get my friend Eugene out. I tried and tried and tried. The bad men were shooting at me, and while they managed to put a few holes in me, they couldn't stop me; the flames did. I wasn't able to save my friend, and he burned to death while I heard him begging me to save him.\"\n\nDean gripped his daughter's hand, and the room became as quiet as the inside of a church bell.\n\n\"I'm sorry, Dad.\"\n\n\"So am I; everyday.\" Dean sucked in a deep breath. \"My friend Eugene died that day along a useless stretch of sandy road. And in a way, a part of me died with him. I decided I had enough of being a soldier, and when my time was up, I came home. But I wasn't the same person I was when I left. I became angry and bitter. I disconnected with people. I uh, I lost someone I cared for very much when I got home because of what I had become.\"\n\n\"Your first wife, right?\"\n\n\"Who told you that?\"\n\n\"Mom.\"\n\n\"Sometimes, Willow, love alone isn't strong enough to hold two people together.\"\n\n\"Then you met mom?\"\n\n\"Yup, sure did. She helped me through some rough times.\"\n\n\"Mom told me you were in the hospital and were sick.\"\n\n\"That's right. Mom saved me. Together we went to see a man about my sickness. It was her idea that I visit Eugene's mom and dad. She said I was looking for something. So one day we loaded up the car, and drove from our mountain to the green swamps of Georgia.\"\n\n\"That's where Eugene's mom and dad lived?\"\n\n\"Sure was. They had a small house that sat on top of a ridge. The white paint had faded to dull gray. An old beagle stood guard at the front door. Eugene's dad was as skinny as a rail, and his mother looked like a pear. Oh, she was a big woman with a tiny head and small, dark brown eyes.\"\n\nA smile filled Dean's face. \"What're you smiling about, Dad?\"\n\n\"That woman could cook. Pan fried catfish. Rhubarb-apple pie. If I'd stayed there, I'd be the size of the barn.\"\n\n\"What about my name?\"\n\n\"I'm coming to that. Down from their house ran a creek. Sparkling-clear water flowed, and if you were to roll up your pants to your knees you could wade across. Fish and crawdads were everywhere. But on both sides of this lazy creek were giant willow trees lined up like soldiers on parade as far as the eye could see. Their slender silver-green leaves shimmered in the sunlight, and they would bend down and kiss the water as it flowed silently beneath them. The slightest breeze would make them sway, and at dusk, as the sun dipped below the horizon, dragonflies would come and drink from the creek.\n\n\"The day you were born, I thought about my friend. I saw your mother's hair billow out like a sailboat catching the wind in my mind's eye. I remembered those willow trees swaying, and that lazy creek as it flowed. I felt at peace. I looked at your mother, and told her I wanted to name my firstborn Willow. And that's how you got your name.\"\n\n\"So I was named after a tree?\"\n\n\"No. You were named for all the things in my life that meant so much to me.\" Dean fussed with the blanket and tucked it under Willow's chin.\n\n\"Dad, did you find what you were looking for?\"\n\n\"Yeah, I did.\"\n\n\"What was it?\"\n\nDean fiddled with the blanket a bit more. He looked at his daughter though teary eyes. \"Forgiveness... And peace.\"\n\nDean stood and walked to the door. \"You go to sleep now.\"\n\nDean put his hand on the edge of the door. \"Dad?\"\n\n\"Yes, Willow?\"\n\n\"I like my name.\"\n\n\"So do I, Willow, so do I.\"\n\nHe pulled the door close.\n\n*******\n\nEvery night since Halloween, Amy took a large red crayon, and with a big \"X\" canceled out each day as it came to an end. It's December the tenth. Tonight was the last time she'd mark the calendar because tomorrow morning before the chickens were up, she'd be in the hospital. Her head fell onto the pillow but sleep eluded Amy that night.\n\nThe grandfather clock's chimes resonated their last notes. She counted them out one at a time. Twelve; it was midnight. She heard the bedroom door swing open, and Dean crawled into bed.\n\n\"It's odd not having the kids here,\" Amy said.\n\n\"They'll be fine at your sister's. Shouldn't you be sleeping?\"\n\n\"I can't.\"\n\nDean snaked his arm around her shoulders, and then pulled her tight. \"All the worry in the world won't change a thing now, will it?\"\n\nAmy moved her head slightly, and then placed her palm on his bare chest. She rolled on her side, and placed her other hand on his shoulder. She nuzzled her face against his chest.\n\n\"Will you sing to me for a little while?\"\n\nDean moved his fingers through her short black hair, stroking her cheek with his thumb. Then in his rich tenor voice, Dean sung his wife to sleep.\n\n*****\n\nThe alarm clock rattled itself awake at a little past five. Dean woke her from a twilight dream.\n\n\"It's time,\" Dean said.\n\nAmy was soon admitted and led to small room. It only contained a bed, a chair and a small tan metal locker. Amy sat on the edge of the bed when a nurse popped her head in.\n\n\"Everything comes off. You can place your clothing in the locker if you wish.\"\n\n\"I brought a bag,\" Dean interrupted.\n\n\"That will be fine.\" The nurse pointed to a neatly folded sheet at the foot of the bed. You can cover her with that.\"\n\nDean tugged the door 'til it was almost closed, leaving a small gap so the sounds of the hospital could creep in. Amy undressed then slipped onto the bed. He covered her with the sheet.\n\n\"I'm cold.\"\n\n\"Ah,\" Dean said as he looked around the small room. \"I'll see about getting a blanket or something.\"\n\nDean left the room. Amy stared at the ceiling. Her mind raced. Amy felt fear begin to steal into her heart. Yet it was apparent that every nerve ending could feel the silence that surrounds her. The door opened, and Dean walked in, followed by a rather short, plump nurse about the age where women form a love affair with stretch polyester.\n\n\"Honey, I'm Naomi. I saw this man coming, and I knew what he wanted.\" Naomi spread a teal green blanket across the bed, and tucked it around Amy's body. \"They spent 26 million on this new surgical wing. Think they could have dropped a few more bucks to make the heating system work? Hell no! That money went into the doctor's lounge.\"\n\nNaomi slipped a blood pressure cuff around Amy's right arm. She noticed how the corners of Dean's lips seemed to crinkle as he tried not to laugh.\n\n\"One of these days,\" Naomi continued, \"I'm going to get that maintenance supervisor down here in his birthday suit with nothing but one of these sheets over him, and I'm gonna wait 'till he complains about how cold it is. I'm gonna look him in the eye and say, 'it's just your imagination. The HVAC is working within designed parameters.'\" Naomi blew out a short, hard puff of air. \"Asshole!\"\n\nDean had a hard time not laughing and Naomi caught his eyes. \"The good Lord gave each of us one, and I guess he had such a good time making assholes, he made a pile of extras just 'cause he could. Everywhere you look, you'll find an extra asshole or two. You two know what I'm talkin' about, don't you?\"\n\n\"I work with a few of the extras.\" Dean laughed.\n\n\"Uh-huh, just like I told ya. Bet you thought I was makin' that up, didn't you?\"\n\nNaomi held the business end of a stethoscope in her hand, warming up the cold metal. \"These things are cold, too.\" She pulled the sheet and blanket back and listened to Amy's heart. \"Nice and strong, but a bit fast, though. Wanna listen?\"\n\nAmy moved her head side-to-side. \"I'll pass.\"\n\n\"How fast?\"\n\n\"It's pounding faster than a crook running uphill after robbing a 7-11. But, that's to be expected. No problem at all.\" Naomi patted Amy's hand. \"I'm going to put an IV stint in now.\"\n\nAmy turned her head away, and looked at the cold steel locker. \"Tell me when you're going to stick me. I don't like needles.\"\n\n\"Let me get some tape on this.\"\n\n\"Tell me when you're ready.\"\n\nNaomi patted Amy's shoulder. \"Honey, I'm already done.\"\n\n\"What?\"\n\nNaomi smiled. \"I've been doing this for a long time.\" She hung two plastic bags onto a hook by the bed, and connected them to the stint. \"I checked before I came in, and surgery is just a tad behind; they always are. They'll send someone down as soon as they're ready for ya.\" Naomi reached for the door and stopped. \"You have the best surgeon in the state. You'll be fine.\" Naomi left the room, leaving the door ajar.\n\n\"Scoot your little butt over.\" Dean sat on the edge beside Amy. \"I was thinking about what you said this summer.\" He moved his finger across her thighs a few inches above her knees. \"Being a spy is dangerous. Hard telling what could happen if a spy is caught stealing secrets.\"\n\n\"Not too many spies out there with hair as short as mine, are there?\"\n\n\"There's something to be said about 'short and sassy.'\"\n\nDean was about to kiss her cheek when they heard the door open. There stood a young woman wearing a banana-split-yellow skirt, with a matching jacket over a white blouse. She looked all business with her white hose and heels. She carried an expensive-looking monogrammed leather portfolio under her arm.\n\n\"You can't possibly have more insurance forms for me to sign?\"\n\n\"No, I'm not from the insurance company. I volunteer here at the hospital.\" She offered her hand to Dean. \"My name is Shelly Peckham. I'm here to talk to Amy; in private.\"\n\nDean sighed in relief. \"Grab a cup of coffee in the cafeteria. They're running about half-an-hour behind,\" the woman in yellow said.\n\n\"I'll be back in fifteen.\" Dean left the two women alone.\n\nShelly pulled out the chair, and sat to one side of Amy's bed. She opened the portfolio then spread it out on the bed across Amy's legs. \"Amy Bradley. Thirty-seven. Married to Dean Bradley for thirteen years. You have two daughters.\" She put the papers down and looked at Amy.\n\n\"You know all of that, don't you? Scared?\" Shelly asked.\n\n\"No shit...\"\n\n\"Scared of the surgery or scared of what will happen when you get home, and your husband sees you for the first time. Are you thinking how you'll take a shower without him seeing you naked?\n\nAmy bit her lip. \"How'd you know what I'm thinking?\"\n\nShelly stood. \"Do you think I'm attractive?\"\n\nAmy glanced at the woman who stood before her. \"Yes, very much so.\"\n\n\"I see.\"\n\nShelly slipped her jacket off, and tossed it onto the bed. Then she began working on the buttons on her blouse. She slipped it off. Now, she stood in front of a stunned and silent Amy. Shelly turned, and Amy watched as she opened the clasp of her bra. She tossed it on the bed.\n\n\"What are you doing?\" Amy demanded.\n\nShelly turned and Amy gasped.\n\n\"Double mastectomy, like you'll have. Do you still think I'm attractive?\"\n\nAmy remained quiet.\n\n\"Well, I am.\"\n\n\"When did they...\"\n\n\"Cut 'em off? Sometimes it's easier to say it that way.\"\n\nShelly sat on the bed's edge. \"I was a cheerleader all through high school. I had a tryout with the Denver Broncos cheerleaders after college. I fell in love with a guy I met there. Everything seemed to fall into place. We planned our lives together. When I turned twenty-four, he proposed to me on Christmas Eve. Of course I said yes, and we planned a June wedding.\n\n\"I guess it was late February when a routine mammogram found lumps in both of my breasts. They were so small I couldn't feel them. I went to my doctor and lo and behold at twenty-four I was diagnosed with stage two breast cancer.\"\n\nAmy scooted up in her bed. \"I suppose you're going to tell me that your boyfriend stood by you and together you held hands and sang songs.\"\n\n\"Nope. When I told him, he left so fast it melted the snow under his feet. I guess in a way, it was a good thing; for you see, he didn't love me for me. He loved how I looked.\n\n\"Amy, I thought my entire world exploded in my face. My boyfriend left me, some of my friends thought they could catch it from me. I felt lower than whale shit.\"\n\nShelly took both of Amy's hands into hers. \"Like you, I laid in a hospital bed waiting for a surgeon to remove my breasts. Then this older woman came into my room, and she tossed her top on the bed. She had no breasts, but she was so full of life. I thought if this woman could do it, then by God, so could I. That's why I volunteer for the American Cancer Society and that's why I'm here.\"\n\nShelly began to dress. \"I had a hard time with the dating scene. Boys being boys, they'd always try to grab my boobs. Of course, they were gone.\"\n\n\"But, you have cleavage,\" Amy interrupted.\n\n\"Depending on the surgery, there are implants, cosmetic surgery, or, in my case, I decided to go with prosthetics. Heck, I can even wear a bikini if I want.\"\n\nThe room grew quiet. \"Did you ever get a boyfriend?\"\n\nShelly slipped her jacket on and adjusted it slightly. \"Dating had issues, I'll admit. I found out that instead of them finding out what I didn't have under my shirt, I'd show them like I did to you.\"\n\n\"What happened?\"\n\nShelly laughed. \"I went through quite a few men. I'd wait 'til we'd have a couple of dates, then I'd show them.\" Shelly's smile widened. \"As the clothing hit the floor, I know some of those guys thought they hit the lotto.\"\n\n\"Until they saw you had no breasts.\"\n\nShelly pointed a finger with its perfect manicured nail. \"Bingo!\"\n\n\"Did they all run away?\"\n\n\"Most did, never to be heard from again. A few just wanted sex; they'd screw a snake if someone would hold it. But one guy I dated was different.\"\n\n\"How so?\"\n\n\"It was on our third date. We were at his place, and I tossed my shirt and bra onto the floor. He looked at me, and then he said I had the most beautiful eyes he ever saw. We talked together; we ended up in bed. That's been five years and two kids ago and we're going strong.\"",
        "Shelly squeezed Amy's hand. \"Give him room. It will be a shock for both of you. Don't hide your body from Dean. He needs to adjust, as well. Amy, I'll leave my card with you. We'll talk when you get on your feet. That's when it will really hit you.\" Shelly gave her a big, strong hug. \"Do you think you are attractive?\"\n\nAmy wiped a tear. \"Yeah, I do.\"\n\n\"That's what I like to hear.\"\n\n\"How will he take it, after I'm, ah, cut?\"\n\n\"I don't know. Some men handle it quite well, other can't.\"\n\nA few quick taps on the door and then Dean popped his head in. \"Safe to come in now?\"\n\n\"Sure is.\"\n\nDean stood in the doorway.\n\n\"Amy, promise me you'll think about what I said.\"\n\n\"I will.\"\n\nAmy watched as Dean's eyes followed her out of the room. \"What was that all about?\"\n\n\"Nothing much. She's a volunteer, and we talked a bit about the surgery.\"\n\n\"Oh.\"\n\nFor the next half-hour they waited, and they talked about nothing in particular: the weather, the kids, and work.\n\nDean didn't like to wait. He was a man of action, and patience was not one of his strong points. Sitting in the room, he felt like a man with fire ants crawling inside his gut. Several times during a lull in their light conversation, Dean would get up and pace. Then he'd peek outside, and watch the nurses as they scampered from one room to another. He took a few steps out, and when he returned, he noticed Amy's bottom lip quiver. Like water overflowing a dam, the tears cascaded down her cheeks.\n\nAmy thought about what Shelly had said about her boyfriend leaving. \"I'm scared!\" She wailed so loudly it hurt Dean's ears.\n\nDean rushed to her side, and took her hand. \"We talked about this before.\"\n\nThrough tears, Amy explained, \"It's not the surgery. I'm scared you won't be there when I wake up. You'll be gone...\"\n\nDean took her hand, and tried to console her. He looked at her arm, and he noticed that the filament-thin hairs stood like a cornered porcupine. A million stiff little goosebumps popped. \"I'll be right there. You know that, don't you? Always faithful.\"\n\nJust then, Naomi entered the room. \"Did you see the cat? Must have 'cause I sure heard it scream when someone stepped on its tail.\" Naomi came to the side of the bed.\n\n\"She's having bit of a rough time,\" Dean said.\n\n\"So I heard.\" Naomi looked at Amy's chart. \"Let's see what he has down?\" She studied the medical hieroglyphics on the paper and quickly returned it to its hook. \"He's a good surgeon; there's a standing order from him if a patient needs something to calm 'em down before they go upstairs.\"\n\n\"That would be great,\" Dean said.\n\n\"What're you in for, honey? They don't put that on the charts anymore. Privacy thing, you know; they won't tell us.\"\n\nRight this minute, this very second, the reality of the past six months struck him like a satchel charge, and the first real chills seemed to dance in the corridors of his heart. Dean felt as green as a billiard table. He looked at Naomi's eyes that gleamed at him like the eyes of a curious old barn cat. He wet his lips.\n\n\"My wife, Amy, is scheduled for a double mastectomy this morning.\"\n\nA brief smile flickered on Naomi's face for a few seconds. \"Well, then, I'll pour her a double.\"\n\nDean patted Amy's shoulder. \"She'll bring you something to make you feel better.\"\n\nIt seemed only seconds ticked by when Naomi returned, a small hypo in hand. She pushed the needle into the IV stint. \"You'll feel better in a minute or two. This stuff acts quickly. But this is all you get.\" She winked at Amy. \"Besides, too much and you'll end up talking to dead Indians.\"\n\n\"I don't know any Indians; dead or alive.\"\n\nNaomi's smile returned. \"That's my point.\" She took a few steps toward the door and then stopped. \"Shouldn't be too much longer.\"\n\nThe drug quickly worked its magic and Amy's world went in and out of focus. Her arms and legs went limp. \"That's good shit.\" Amy rolled her head so she could look at Dean standing beside her.\n\n\"When this is over, we'll go shopping for a long black evening gown with a slit up the side,\" Dean said.\n\n\"What do you mean?\" Her words came out slowly.\n\n\"I know someone that has a dream about being a spy and getting caught. Terrible-good things happen to this lady.\"\n\nAmy stared at the ceiling, while tears gathered in the corners of her eyes. They broke free, and trickled down her cheeks. \"Say, how about saving those tears for something more important than this?\" He cupped her face with one hand while she slipped her right hand into his. Amy nuzzled her face into Dean's palm.\n\nAmy didn't speak, but her eyes spoke volumes. \"We have two daughters who will marry, and the mother of the bride always cries, so save these tears.\"\n\nDean's voice became low and soft. His eyes bright and clear as a Colorado summer sky. \"You know, thirteen years ago, I told you that you were a pretty good catch. I was right.\n\n\"Amy, life is nothing more than a series of choices. You and me, we made the right choice. We made the right call. Trading two breasts for another fifty years with you seems pretty damn good in my book. I love you, Amy. I always have and I always will. Semper Fi.\"\n\nThere came a tap at the door, and Naomi walked into the room followed by a young man wearing a green smock and matching green booties over his shoes. \"Your chariot awaits. It's time to go up.\"\n\n\"Hi,\" the man said.\n\n\"May I tag along?\" Dean asked, while he pulled the back of his arm across his eyes.\n\n\"Sure, but only to the elevators.\"\n\nSoon Amy's bed made it's way down the hallway and toward the surgical elevators. Amy watched the fluorescent lights flash overhead one-by-one. The man stopped, and pushed the call button. \"This is where we part.\"\n\nDean leaned over, and held Amy's head in his hands. He whispered against her lips. \"I love you, Amy. God knows I do.\" He kissed her gently and squeezed her fingers. The elevator doors swooshed open. \"I'll see you on the other side.\"\n\nDean watched as the bed entered the elevator. The bed rolled to a stop. \"Wait a second,\" Amy asked. She rolled her eyes toward Dean looking into the elevator. In a glassy whisper Amy said, \"Semper Fi.\" The doors sealed, and she felt the elevator move.\n\n\"Were you in the Marine Corps, ma'am?\"\n\n\"No. But, my husband is.\"\n\n\"Still on active duty?\"\n\n\"No, but a wise old man told me you can take a man out of the Marines, but you can never take the Marines out of a man.\" She stared at the ceiling. \"I've never known a braver man than my husband. But, I've never seen fear in his eyes like I had just now...\"\n\n\"We'll take good care of you.\"\n\nThe door opened and soon Amy found herself in a row with other patients along a short wall. A young nurse wearing a brightly colored SpongeBob squarepants smock walked to her bed. \"I'm Mary and I'll be prepping you for surgery.\"\n\n\"How long?\"\n\n\"Won't be too much longer. I'm going to give you a few things, and get you prepped for the anesthesiologist.\" The nurse emptied a few hypodermic needles into the stint. Amy watched as the nurse vanished in the controlled confusion of the pre-op area.\n\nShe stared at the ceiling. The drugs began to work on her body. She couldn't feel her toes anymore. Then her fingers and arms seemed to vanish. She couldn't move. Her eyelids grew heavy and she fought to keep them open.\n\nSuddenly, an image flashed on the screen of her mind. It was high school. Then she heard the sound of an old slide projector. The sound of the mechanism as it moved another slide into place. Her first date. College. The dance where she met Dean. Another slide dropped. Now they seem to flash, one right after another. Who, she wondered, was pushing the button? The Kodachrome images were so vivid they looked alive. More slides illuminated on the mind's screen; now even quicker. Their first night together. The promise they made at Molly's. The images moved faster. Dean's suicide attempt. Images roared by. Dean's marriage proposal. The birth of her children. The pictures seemed to flash so fast they became nothing but a blur. The photographs were colliding and exploding into a kaleidoscope of colors.\n\nThen they stopped as suddenly as they started. All she could see in her mind's eye was the most brilliant, pure-white light she ever saw. She tried with all her might to raise her hand to touch what she could see, but an unknown pressure pushed on her head. She sucked in a breath of air; the light went out.\n\n*****\n\nHer eyes opened slowly, and she saw what looked like a giant upside-down ice cube tray hanging from the ceiling. It was bright; she tried to turn her head away. She felt someone touch her hand.\n\n\"Hi,\" the voice said, \"welcome back.\"\n\nShe tried to speak, but couldn't. Her tongue seemed to be stuck to her lips. Every pair of dirty socks in the world seemed to have been stuffed into her mouth.\n\nAmy noticed something cold on her lips. \"Here's some crushed ice.\" Amy opened her lips. The melting ice felt so good.\n\n\"When... When is my surgery?\" Amy stammered.\n\n\"You're all done. You're in recovery. In a few hours, you'll be in your room.\"\n\nIn the twilight of her mind, she smiled. \"You're a nice lady...\" And Amy drifted back to sleep.\n\n*******\n\nAmy's eyes opened slightly. She saw a blurry face and as her vision cleared, it didn't take long to discern that it was Dean looking back.\n\n\"It's about time you woke up.\"\n\n\"Where am I?\"\n\n\"In your room. Your surgery is over.\"\n\n\"Oh... It feels like you parked your Jeep on my chest.\"\n\nDean's infectious grin brightened the room.\n\n\"Your surgeon talked to me while you were in recovery. There were no cancer cells in the surrounding tissue or lymph nodes.\"\n\nAmy moved in and out of her world. \"That's good?\"\n\nDean's smile didn't diminish. \"That's excellent news, Amy. You beat it.\"\n\nAmy moved her head ever so slightly. \"No... Together, me and you, beat it.\" She moved her hand along the bed sheet and Dean put it into his palm.\n\n\"That's right; you and me.\" Dean squeezed her fingers gently. \"I promised you I'd be here when you woke up, didn't I?\"\n\n\"I'm sorry...I'm so sorry...\"\n\nDean put his finger to her lips. \"Hush now and rest.\"\n\nShe nodded as tears pooled in her eyes, then Dean brushed them away with his thumb. He placed his hand along her cheek, caressing her with his fingers.\n\nAmy looked at her husband through teary eyes, and then Dean began to softly sing..."
    ],
    "authorname": "rwsteward",
    "tags": [
        "ptsd",
        "amy",
        "dean",
        "love",
        "breast cancer",
        "high heels",
        "naked",
        "afgan vet",
        "war",
        "vietnam"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/together-you-and-me-the-epilogue"
}
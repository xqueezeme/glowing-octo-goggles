{
    "title": "In Dreams Ch. 03",
    "pages": [
        "As I began to waken the following morning, just as I reached that senseless half-awake half-asleep state where one usually finds you are wondering what day of the week it is. Well, I kind-a found that I was more than a little reluctant to actually open my eyes. \n\nAnd for more reasons than the two that I'd instantly become acutely aware of, because I could actually feel their warm bodies against mine.\n\nYeah well, if you're old enough, have ever been lucky enough (and have been around the park a few times) to be able to recognize that unmistakable sensation of having two females sharing your bed with you; then one might have some clue as to what I'm talking about.\n\nThere was definitely no mistaking the fact that there was one shapely and very warm body snuggled up tight against my back and yet another pair of breasts pressing against my chest. I could also feel someone's warm breath on my face.\n\nPlease remember that I had been a bachelor -- who'd ostensibly lived alone -- for many years. But waking on the odd morning to find a warm body snuggling up close had not been a particularly unusual experience for me; if you get my drift. And I'm definitely not talking about Maud Clegg when I say that! \n\nHowever I'd often found that successfully recalling the young woman's in questions correct name... Well now, that's a whole different ball game, after a good few bevvies... \n\nYeah-well, names have never been a strong point of mine.\n\nSo you see, on that particular morning, I had a few more important things to ruminate upon; besides those insane bloody dreams! And luckily, I was at least with-it enough, to prevent my hands from going exploring, if you get my drift.\n\nYou see, as the morning twilight turned to daylight, I lay there wondering if... Well look, if I could dream about Tara being stood on the quay that day, and all that followed after that... Well then, what the bloody hell was there to stop me dreaming about the accident and waking up in hospital to find Ottilie had come looking for me. And er, well, also discovering that I had a daughter, that I kind-a knew about from the first dream... Oh come on, you surely can understand what I'm raving on about here!\n\nYou see, there was yet another very obvious scenario, that sprang into my mind. One that -- over the years -- had happened to me, maybe a little too often; if I'm being completely honest. \n\nDreams, both pleasant and unpleasant of my youth, including Ottilie, had not been that uncommon for me. Not many really if you add them all up, but enough to... well, set my mind off down what might be calculated to be a more obvious path. There was the distinct possibility that I could have hooked up with a... or even a couple of lookers from the charter party the day before and... Okay, and maybe I had got carried away with the occasion, and probably tied one on a bit; in all the excitement. \n\nI knew from experience that too much hard liquor does tend to fog one's memory of what exactly what had occurred the night before, and I was well aware that alcohol can also lead to some pretty off-the-wall dreams, or even nightmares on occasion, as well! \n\nSo you see, I was lying there that morning not daring to open my eyes; wondering about just everything.\n\nAnd yes, I did have a headache. Only on reflection, I realised that it wasn't so much a hangover type headache; it was more a \"Jesus I'm bloody knackered!\" type of headache.\n\nEventually I dared to open one my eye just a fraction and (much to my relief) instantly recognised Ottilie's face smiling back at me. \n\nI suppose my body language must have advertised that relief to Ottilie in some way, because she appeared to instinctively know what I'd been thinking.\n\n\"Feeling better, now that you know that it is me you're in bed with?\" Ottilie whispered, as I kissed her on the tip of her nose.\n\n\"Ottilie, I...\"\n\n\"Oh come on, Taylor; I'm not daft. You're a handsome, virile and exceptionably eligible young man. Just look at this place, I really can't believe it. That you're still single that is!\"\n\n\"Ottie I don't...\"\n\n\"Taylor there's signs of all of your conquest's tucked away all over this room. Oh, and I wasn't spying honestly! I was looking for your PJ's\"\n\n\"My pyjamas? Oh, that's what you've got on.\"\n\nI'll admit that I had been a little curious about Ottilie's night attire; what I could see of it. \n\n\"The top, yes; you've got the bottoms on. I figured we might have company when we woke-up this morning, and we have!\"\n\n\"Ah got you! I was kind of wondering myself... well, if you're there, then who is it behind me. Mind you, there was only one possible candidate on the list. But I don't recall putting these trucks on. But then again, I'm not sure I can recall much of last evening after you produced that third bottle of Champagne. That stuff don't agree with me, you know.\"\n\n\"So I noticed; but you were hitting the rum harder than the bubblies. And you didn't put your... trucks on, I did! You were... Well, I hate to say this, but I think I wore you out last night. It had been a long time Taylor and I... well, not for a long time anyway. However I am pleased to be able to say, that you weren't out of practice. \n\n\"Better than I remember, if anything. I suppose that's down to all the training you've been putting in.\"\n\n\"Oh yeah, I seem to recall a rather energetic workout now.\" I said, desperate to move that conversation away from the direction Ottilie appeared to be steering it in.\n\n\"A little more than energetic Taylor, you... Well, let's just say, that I had a night I won't forget in a hurry!\"\n\n\"Oh Christ, but did we...? well, are you on the.... you know?\"\n\n\"Isn't it about sixteen years too late to worry about those kinds of niceties, daddy?\" Tara's voice asked from behind me. \n\nThen, when I turned my head to try and look at her, Tara raised herself up, gave me a mocking smile and then kissed me on the cheek. Then leaning right over me she kissed and said good morning to her mother.\n\n\"You're still supposed to be asleep, young lady!\" I retaliated.\n\n\"Not much chance of that, if you two are awake. I'll leave you to... well, to do whatever you need to do this morning. Please don't take all day about it though; I could do with some breakfast. See you later parents!\"\n\nAs Tara was speaking, she had climbed over both Ottilie and myself, and then after throwing us a last cheeky grin she exited the room; firmly closing the door behind her.\n\nMind, as she did so, I realised that I was going to have to do something about the squeaky springs in my supposedly antique bed. Something that had never proved to be a problem when I'd lived alone of course. Company or not, there had never been anyone else in the house to hear the noise. Who wasn't actually sharing it with me, if you get my drift? \n\n\"Am I going to have trouble with that daughter of ours?\" I asked.\n\n\"I don't think so Taylor. You know she's wanted her father for so long, that probably the noise this bed of yours made during the night, assured her that... Well, I am not likely to be letting you get away again, am I?\"\n\n\"Ottilie, it's been a long time; I might have changed. How can you be so sure you're going to like this Taylor Carson?\"\n\n\"You're not kidding you've changed; so much more considerate in bed to start with!\" Ottilie grinned at me.\n\n\"I hate to have to be the one who has to point this out to you, sweetheart. But we've never actually been in a proper bed together before!\"\n\n\"Oh you're so right, Taylor. I must have been thinking of someone else.\"\n\n\"And that's supposed to imply?\"\n\n\"Well, hopefully it will bring us to discussing that bloody great elephant!\"\n\n\"You've kind-a lost me there, kiddo.\"\n\n\"The elephant in the room, Taylor... The man I married, William Morris! The person you seem to be so nonchalant about.\"\n\n\"Ah now, I've been dreading this one. And, I was hoping to avoid it, if I possibly could.\"\n\n\"Why?\"\n\n\"Because basically I'm a coward when it comes to all this... emotional stuff. And your life... well, your love life at least, with Bill Morris, is of no interest to me. I'm pretty well pissed-off that he knocked you... and Tara, about, and should our paths ever cross in the future; then I'll let the bugger know exactly how annoyed I really am about that. But there's little else about that relationship I wish to hear about.\"\n\n\"But...\"\n\n\"Ottilie. Did you love him?\"\n\n\"Well, I suppose I sort-a thought I loved him for a while. But I knew I didn't love him in the same way or anything like as much as I'd always loved you. When I agreed to marry Bill, I liked him, but that's about all. And Tara needed a father!\n\n\"I suppose I'd have to admit to you, that after we were married, I did begin to fall in love with Bill. You can't live with someone as man and wife, for several years and not have a special bond develop between you. I suppose that's how all those arranged marriages work!\n\n\"But then suddenly, just after he graduated from Uni, Bill turned funny and began to resent Tara; which I thought was very strange. Bill was swearing undying love for me one minute, and apparently doting over Tara. The next, he began to resent the one reason that I'd agreed to marry him in the first place, our Tara!\n\n\"Do you know why?\"\n\n\"Not really. Tara and I suspect that it could have been for one of a couple of reasons. But I had made it very clear to Bill before I accepted his proposal; that the only reason I was marrying him was because... Well, I thought...\"\n\n\"Your parents thought; you mean!\"\n\n\"Yes, you're right, Taylor. They sort-of convinced me that Tara needed a father and that you weren't interested in the job. If I'd only seen you on that bus that day...\"\n\n\"Life is full of ifs.... and buts, Ottie.\"\n\n\"That's right, but why aren't you... I don't know... pissed-off, that I married William Morris. And... shared... myself with him as I did with you, last night!\"\n\n\"Ah now, that's hitting bellow the belt, Ottie. I'm annoyed about it, but I think I can understand why you married Bill Morris in the first place. If you don't mind I'd prefer not to think about any... conjugal issues that might pertain to that... er, situation though. In short, yes, I am bloody jealous of the bugger!\n\n\"And besides, although I never got married... Well, as you so delicately pointed out to our daughter this morning. No one could claim that I've been celibate for the last...\"\n\n\"Yes I know, Mina and Totto. Uncle Percy made that quite clear to me!\" She grinned.\n\n\"And you're not annoyed?\"\n\n\"Good heavens no! That could be construed, as the kettle calling the pot black, couldn't it? Wasn't there an old song, something about if you can't be with the one you love; then love the one you're with?\n\n\"So I can understand that, but I'll admit that I'm more than a little Jealous of those two; more than I am about any of your so obvious more recent conquests. Do any of them live locally by the way; are we likely to run into anyone who thinks she's staked her claim?\"\n\n\"I don't believe so, Ottilie. Why do you ask?\"\n\n\"I don't know really. Maybe I thought I might be able to prove something to you, if I showed you that I was prepared to fight for my man!\"\n\n\"No, you won't have to do that. Good old Carson's, alright to have some fun with, but most females around here think I don't take the institution of marriage seriously enough to make it worth their while working on a long term relationship with him.\"\n\n\"Why's that?\"\n\n\"Well a couple of the women I've... had the odd encounter with, were not... strictly eligible, if you get my drift.\" \n\nA confused expression had come over Ottilie's face; so I continued.\n\n\"Holiday romances Ottie. Some women like to forget that they are married when they are away on holiday; without hubby!\"\n\n\"How would you know, if they didn't wear their wedding rings?\"\n\n\"Usually a ring leaves a... well, shadow, and... well, most of the local guys keep their eyes open for that little white mark around that finger. It's like an advert that the female is looking for a bit of strange. Besides that, where would they get all the kids from, if they weren't married; and who the hell is paying for their trip if they are divorced? Widows and divorcees who are not actively... well they, tend to keep wearing their wedding rings, by the way.\"\n\n\"They do?\"\n\n\"They do Ottie. You'd never make a seaside gigolo, you know.\"\n\n\"Is that what you've been?\"\n\n\"No, well I hope I haven't. Although I can't claim that I've ever been one to pass-up on a sure thing. Christ, I'm only human! Here, I thought that you were telling me why you thought Morris turned all uppity on you, anyway?\"\n\n\"Oh yeah, sorry. Well, after Bill graduated, my dad got him a job on the management of Ballard's. Poor Bill, he never was the brightest light on the Christmas tree and he always did have a pretty inflated opinion of his own capabilities back then. \n\n\"Bill had no idea of diplomacy; I should imagine he stormed into Ballard's thinking that he knew it all, and rubbed his subordinates... bloody hell, most likely he rubbed everyone up the wrong way. I know he upset a lot of the other managers; they complained to my father about him.\n\n\"Anyway instead of being a new broom that whipped his department into line. Very quickly strange and unexpected things began to go wrong for Bill, and somehow things kept going wrong; from what I understand from my father.\n\n\"I think that my father made things worse for Bill, by stopping him getting fired right at the start. When it became obvious that he couldn't handle the job.\n\n\"Everyone at Ballard's knew that the only reason Bill had got that job in the first place was because he was Frank Thorn's son-in-law. I believe they... well, I don't think people would have minded that so much, if Bill had been able to handle the position. The truth is that he couldn't, he was completely out of his depth and I suspect they did everything they could to undermine him.\n\n\"I also know that at least one person there did their homework. Someone must have worked out that Tara was more likely to be your daughter than Bill's. And they let Bill know that they knew.\"\n\n\"How would they know that; did he tell you?\"\n\n\"No, Taylor. I think it was Tara's age, and how long Bill and I had been married. All those delicate details were on Bill's personnel file after all and I think some vicious bugger must have gained access to them.\"\n\n\"Anyway, after I had the police remove Bill from the house; I went nosing around his computer and found... well, some rather nasty emails. Anonymous of course. In brief they claimed that you and I were still... Well, getting at it!\"\n\n\"How did they know about me in the first place?\"\n\n\"Taylor, when we were young; everyone around our way had heard of Taylor Carson, even if they'd never clapped eyes on him. It was also common knowledge that you and I had been... an item, since the year dot!\"\n\n\"Not quite, Ottie.\"\n\n\"Near enough Taylor. At least one person in the management at Ballard's must have worked it out anyway. And they made it their business to let Bill think... I can't believe that it actually was a widely known fact. Anyway, Bill began to believe everyone he worked with was talking about him behind his back. He thought that they knew that he was raising Taylor Carson's child.\n\n\"I believe that was what pushed Bill down the drink road, and when he was drinking he didn't do much thinking... or maybe he thought too much. Eventually he lost it, and I ended up in St Thomas's.\"\n\n\"If I'd known about that...\"\n\n\"Taylor, you don't have to say it. I know what Taylor Carson's reaction would have been, had he known what was going on. I've seen you in action, more times than I care to remember; if I'm being honest!\"\n\n\"And the other reason Bill got uppity? You implied that there was more than one.\"\n\n\"Oh yes, Tara's theory. Well Taylor, it would appear that I sometimes talk... mumble really, in my sleep. I didn't know I did it until Tara told me that I did. Tara claims that she's heard me say the name Bouncer more than a few times. And she suggests that Bill must also have heard me say your name and maybe he got... well annoyed about that as well.\"\n\n\"I can understand that that wouldn't do much for a man's self-esteem. I... well one time, I was with a... anyway she called out someone else's name at a very inopportune moment. Kind a squashed my ego flat, I can tell you!\"\n\nFor some reason me saying that brought a massive grin to Ottilie's face.\n\n\"Are we done with all that breast-beating malarkey now?\" I asked her.\n\n\"If you're completely happy, yes!\"\n\n\"I'm just happy that you and Tara are actually here this morning Ottie. I don't want to think about the past ever again.\"\n\n\"Okay then, Elvis has left the building.\"\n\nI'm not sure what expression Ottilie saying that, brought to my face; but it caused her to add. \n\n\"The elephant has gone back to the zoo Taylor! What shall we do now?\"\n\n\"Breakfast would be nice.\" I suggested.\n\n\"Yeah, but later.\" Ottilie replied, and pulled me real close.\n\n-----\n\nSome -- indeterminate -- time later, I staggered down stairs to find that everyone else -- except Ottilie and myself -- had already eaten. They (including Maud) were all out in the yard watching my new friend (from the hospital), George's young lad, John, mowing what I used to loosely describe, as my lawn.\n\nOttilie and I did not join them; we snuck into the kitchen and prepared our... brunch. Then we sat there like a couple of teenagers, giggling about nothing, as we ate it.\n\n\"I'd have cooked that for you.\" Maud said when she joined us a little later.\n\n\"Sorry Maud, but I needed to prove to my man that I do know how to feed him.\" Ottilie replied.\n\n\"I...\" was as far as got when Maud cut in with.\n\n\"Taylor, be quiet man! In the kitchen Ottilie's in charge... when I'm not here that is! Honestly Ottilie, he's positively dangerous in here. How he has never poisoned himself or burnt the bloody house down, I just don't understand! I'm forever throwing out-of-date stuff out of his cupboards. And don't trust him shopping for food either, especially if he's hungry. Taylor will buy anything he can eat in the car on the way home, and forget to buy what he went to shop for in the first place.\"\n\n\"Par for the course!\" Ottilie replied.\n\n\"I think I'll go and see how young John's getting on with that old lawnmower.\" I said, and made a quick exit.\n\nBy the way the lawnmower wasn't old, I'd bought it (discounted) at the end of the previous season.\n\n-----\n\nTara greeted me with a hug and a kiss when I joined the others outside. Yes, I had ignored the conversation that I knew was going on in the kitchen. The sooner Ottilie learnt of all my... failings the better, as far as I was concerned.\n\nWe had lunch at the pub (well Ottilie and I had a liquid lunch) and then the six of us (Maud having gone home from there) walked down to Parson's boatyard to inspect Quiet Times. \n\nNot really the damage, because the repairs were almost complete; there was just a few layers of varnish that needed to harden. The longer it can be left to dry, the better.\n\nI learnt that there had been some suspicion that Quiet Times stern gear might have sustained some minor damage while it was being moved from above the old biddie's car. A manoeuvre necessary to facilitate the removal of said \"obstruction to navigation\" from the harbour I was informed. The harbour master had been in somewhat of a hurry to do that, or so I'm told.\n\nWhatever, some of the boys took her straight to Parson's boatyard for safety's sake. Who in turn had lifted her out of the water so that the old biddie's insurance company's loss adjusters could inspect her. There was some minor damage to the rudder, more than likely sustained when Quiet Times scraped the bottom at sometime in the past. But who's to know for sure?\n\nThen, because the insurance company had accepted responsibly for rudder as well as the damage to foreword cabin roof, and a few scrapes on her side. Old man Parsons had got on with the repairs while the getting was good, so to speak. He figured (correctly) that I would want Quiet Times back in the water as soon as I was well enough to use her again.",
        "In fact my self-discharge from hospital had interrupted Parson's plans. He had intended to put Quiet Times back in the water, on that mornings tide. But on hearing that I was out and about, he thought I might want to take a good look at her bottom, while she was high and dry.\n\nAll of our party climbed aboard her, then Tara showed her mother, Sylvia, Kate, and John around. \n\nIt didn't strike me as odd at the time that Tara knew where everything was, because I recalled John saying he'd talked to Kate outside the boatyard. I kind of assumed that old man Parsons or one of his boys, had given Tara a tour while she'd been there. However my mind began to change when I heard Tara saying. \n\n\"... admiralty in 1956. She's made out of Larch, on oak frames. She's forty-one feet long, eleven-and-a-half feet wide, and she draws around four feet of water; whatever that means!\"\n\n\"I'd have said, more like five!\" John interrupted Tara, \"She's a big-un you know. I wouldn't risk taking her in anything less than seven or eight feet of calm water.\"\n\nThen the lad looked at me, for confirmation I suppose. \n\n\"It's four-and-a-half feet, John.\" I corrected the lad, then I asked, \"But how do you know all that, Tara?\"\n\nShe grinned back at me.\n\n\"I can't be sure dad, I just do! Maybe I dreamt it sometime. In here for instance,\" Tara lifted one of the bench seats to expose the locker beneath. \"I know you keep all the life jackets. And in that one over there, there's couple of mops and buckets for washing the decks down. Maybe it's female intuition?\"\n\n\"Or it could be that you had a good look around the other day.\" I suggested/\n\n\"The paint was still wet father; they wouldn't let me come up here!\" Tara grinned back at me.\n\nI looked across at Ottilie, who'd listened to the exchange in silence. Ottilie shrugged, smiled and then mouthed \"Uncle Percy!\" back to me.\n\n\"I'm beginning to get worried about exactly what the old bugger's been up too.\" I grinned back at her. But then I let the subject drop, because Mr Parsons, Sylvia, John and young Kate were... Well, they'd obviously lost the plot somewhere along the line, and were looking at me as if I'd gone loopy.\n\nWe left the boatyard after arranging to witness Quiet Times going back into the water the following morning. But as we left the yard, I remembered something I'd needed to discuss with old man Parsons, so at my insistence the rest of the party walked on, while I doubled back into his office.\n\n\"Are you sure lad?\" Parsons had asked when I explained what I wanted him to do.\n\n\"Oh yeah I'm sure; that little scene on the boat just now convinced me.\" I smiled back at him\n\n\"You're the boss lad, I'll do my best to have it all ready in the morning for you. But don't you go forgetting to do all the paperwork, will you. You know what officialdoms like; those buggers will be all over you if all the paperwork isn't right!\" The old boy reminded me as I left.\n\nSo instead of heading for the house to join the others, I headed for the Boat Charter company office from where I knew I could make the necessary phone calls with a modicum of privacy. Well, privacy in as far as I required it anyway; certain people needed to know what I was planning.\n\nI'm sure young John must have nipped home at sometime during the day. But he was back sniffing around Kate -- who appeared to enjoy his company -- by the time I made it back to the house.\n\nWhatever, as I walked into the yard I was greeted with an immediate summons to attend my doctors surgery. It appeared that my physician was quite perturbed that I'd discharged myself from hospital and chewed me out over the fact. But then he went on to say that under the circumstances he understood my actions.\n\nFrom that I gathered that he knew all about Ottilie and Tara and their arrival on the scene. It also became apparent that he was aware that Quiet Times was going back in the water the following morning. And he somehow invited himself, his wife and two children along on what would be a kind of inaugural cruise. He had it sussed that I'd want to take the girls out for a spin on her.\n\nBy the time I returned from the doc's, -- after he'd given me the full once over -- Maud, Ottilie and Sylvia were... well, they sounded very busy in the kitchen preparing our evening meal. I kind-a stuck my head in there to say hello and I then retreated as quickly as possible. Albeit having been given the task of chilling the wine they'd selected from my meagre collection.\n\nAll right, I was told \"Get lost!\", my input would not be necessary until it was time to open said bottles of plonk. Not in so many words maybe; but that was about the gist of it.\n\nI retreated, first to the lounge and then further outside, out of earshot; to hunt down the youngsters.\n\nYeah well, as I said Maud's voice carries, and I could hear her... Well, I suspect that while I'd been unconscious, Maud had been diplomatic in her exchanges with Ottilie. It appeared that now that I was up and about, Ottie was getting a rather fuller description of some of the more humorous interludes from my life that Maud had been witness to. Unfortunately, far too often, those reflections featured some of my more notorious encounters with females.\n\nI can't say that I was upset about it, because I wasn't! If Ottilie didn't hear about my peccadilloes from Maud; then eventually, she'd surely hear about them -- probably related with a lot less diplomacy and humour -- from someone else in the town.\n\nThe youngsters I found, giving the rib a good scrub down. I'd known the boys had removed it from Quiet Times' mooring (most likely for security reasons). But I'd had no idea that they had put her on her trailer and dragged her up under her winter cover. I pitched in with the clean-up and then we returned the Rib to the water. We were going to need her the following day and John was quite excited that I charged him with running it down to Parsons' boatyard.\n\nI didn't sleep alone again that night, as you might guess, but at least Tara hadn't joined us when Ottilie decided to wake me that following morning. At the rate Ottie was going, I began to wonder how long I was going to last. She certainly appeared to be making up for lost time; if you get my drift?\n\nJohn (and another youngster) arrived very early -- as planned -- and the two lads roared off in the Rib, much to Kate's surprise. I think she (and maybe Tara) had assumed that they'd go with him. Ottilie and... well all the girls', remarked that John had left rather prematurely. But I told them that the boys probably wanted to dash around like a pair of idiots in the rib for a while, as youngsters tend to do.\n\n\"That Rib can go quite fast if you give some wellie!\" I told them, \"The youngsters probably want to have a little fun, while I'm not watching.\"\n\nBoth Ottilie and Tara were curious that Quiet Times bows were sheathed in canvas although she was hanging from the boat crane above the water. Parsons had carefully positioned a mobile platform from where he knew (by experience) that Ottilie would be able to reach her bow.\n\nOnce we'd all scrambled up there. Mr Parson handed Ottilie a bottle of cheap Champagne and a printed sheet of paper to read from. Then he pointed out the place on the boats bow that would best serve to smash said container.\n\nOttilie read the words on the paper to herself and looked across at me. I urged her to get on with it. I had one eye on the tide (as always) and I must admit that I was also just a little curious as to why several boats that shouldn't have been, were milling around each other out on the water.\n\nOttilie got the timing wrong, smashing the bottle a little too early so all anyone heard her say was, \"I name this ship...\" (Actually the paper had said craft, but we'll forget about that.)\n\nAnyway as the bottle smashed, the air was filled with a cacophony of noise. The craft off the boatyard, (and numerous cars in the locality) all sounded their horns at once. The noise continued as craft, both up and down river, joined in until a coaster moored at the China Clay quay drowned them out with her foghorn. Then a visiting Cruise Ship decided to join in, and probably deafened everyone in the town.\n\nI have no idea whether everyone blasting their horns was planned, or whether hearing everyone else doing so, caused them to decide to join in. Whatever it was very impressive to hear.\n\nAs the noise had gone on the boatyard boys had pulled the canvas away to show the world that \"Quiet Times\" was once again named \"Ottilie\". (I'll explain that comment shortly.) Then Ottilie watched quietly as her namesake was lowered gently into the water.\n\nAs we climbed down from the platform, (at a signal from me) young John informed Tara that it was her turn and handed her a bottle of the same Champagne. Then the lad led Tara over to where the rib had been beached. Where she performed a similar ceremony on the semi-inflatable craft. Tara actually smashed her bottle on Ribs anchor held just clear of her bow (broken glass and rubber boats don't mix well). Then Tara, dragged me out of her mother's arms so that she could hug and kiss me herself.\n\nOur party boarded Ottilie and I backed her out of the boatyard, before handing the helm over to John and instructing him to head her out of the harbour. Well, I kind-a figured I'd be able to watch what the lad was like, while he thought I was busy with all the guests aboard. \n\nLets just say John passed muster, but he needed a little more experience with something of that size.\n\nWe'd cleared the harbour and I'd just told John to head for a couple of other craft just visible on the horizon, when Ottilie got around to asking. \"Why does it say re-name this craft Ottilie on this piece of paper Taylor!\"\n\n\"Because she was called Ottilie when I bought her; that's how I found her to be precise. For some reason I can't recall now, I typed Ottilie into Google one day and one of the hits was... well, you're standing on her. She was for sale and I was kind-a thinking on coming back to the UK, but I had no idea whereabouts I was coming too, if you get my drift. Home weren't home because the folks are out in Spain, and besides...\"\n\n\"Besides what?\"\n\n\"Never mind Ottie. Well, I suddenly got the idea into my head that I'd buy a boat and sail around the coast looking for somewhere to settle. In consequence I finished up buying this one.\"\n\n\"But why did you rename her, Quiet Times!\"\n\n\"Ah now, Ottie; I'd have thought that would have been obvious. Ottilie is not a common name and far too many folks kept asking me where it came from. Not that she was named after you specifically in the first place. But I soon found that it was bringing back the wrong kind of memories, if you understand me; so I renamed her Quiet Times.\"\n\n\"Should I enquire why you were Googling the name Ottilie, in the first place?\"\n\n\"I'd rather you didn't. Surely you're a big enough girl to be able to work that one out without asking.\"\n\n\"See, I told you mum?\" Tara's voice butted in.\n\n\"You told your mother what?\" I enquired because the two women were by then... you know, doing that thing, where they hold a conversation with each-other without actually using words.\n\nMina and Totto used to do that to me all the time, like they knew something that I didn't. I've always wondered how the female of the species appears to be born with that gift, whereas us males, kind-a missed out on it.\n\nWhatever, I got no reply from either Ottilie or Tara.\n\nWe didn't actually see any basking sharks that day, but that wasn't really the reason for the exercise. Basically it was to introduce Ottilie and Tara, to what was going to be the fourth member of our family, and even let them play at taking the helm for a while.\n\nYeah, honestly; it was a \"Love me, then love my boat!\" situation. God knows what I would have done, if either of them had shown a tendency towards seasickness.\n\nSylvia, the doc and his wife, seemed to find a lot to talk about, and very often when she wasn't with me, Ottilie would be chatting with them as well. Then later I saw Tara and her mother having a quiet word, and purposely out of my earshot by the look of it. \n\nWhatever Ottilie was saying to her, Tara didn't look best pleased at first, but then suddenly a big smile came over her face and whatever the disagreement had been... well there was no mistaking the fact that it had been resolved.\n\nWe didn't stay out on the boat too long, returning her to her mooring about four o'clock. My doctor and his family stuck around for a while, but left before we sat down to eat the dinner Maud had prepared for us.\n\n----\n\nIt was that night as we got into bed that Ottilie decided that it was time to pin me down.\n\n\"Okay Taylor, we need to talk about the future!\" she said as she snuggled into my arms.\n\n\"Talk sweetheart, I'm listening.\" I replied.\n\nWell, when a female says something like Ottilie had just said to me. I knew that what she really meant was \"that she'd been thinking\" and that she was about to... persuade me, that she'd got everything all worked out.\n\n\"Well, what about us?\" Ottilie asked.\n\n\"Is your divorce final?\"\n\n\"Years ago!\"\n\n\"Right, we get hitched. A bit sharpish, like!\"\n\n\"Okay then, but where will we live?\"\n\n\"Ah now, that's a problem. I find that I suddenly have three loves in my life. You, our daughter and the newly christened 'Ottilie', out there. I don't think I could bear to be parted from any of you.\n\n\"Re-christened Taylor. But I'm afraid you're going to have to be apart from one of us for a while at least.\"\n\n\"I don't think I like the sound of that. Which one were you thinking of Ottie?\" I asked defensively.\n\n\"Tara, she's got her GCSE's next spring and she's already been working on them at her school up there. It wouldn't be fair on the child for her to have to change schools now.\"\n\n\"But if Tara goes to school up there...\"\n\nOh don't panic, I'm not going... Well, I'm going back up there with her; but I'll not be staying long. What, and risk leaving you down here with all these predatory female holiday makers, you'll be bloody lucky! \n\n\"No, I figure that we can get hitched as soon as you're ready, and Tara can stay with her grandfather until after her exams. She's got Kate and Sylvia living just around the corner; she'll be fine.\n\n\"Mind you, she'll be coming down here every other weekend or so... Sylvia and I managed to talk her out of coming down every weekend. And for all the school holidays.\"\n\n\"And what does our daughter have to say about that idea?\"\n\n\"Tara's all for it, really; not changing schools that is. She's a little bit more reluctant about the idea of not being down here with us. But she agrees that her exams must come first and she say's it'll give us the opportunity of getting over the silly stage in our relationship.\"\n\n\"The silly stage?\"\n\n\"Er yes, as our daughter put it; 'The newly married all googly-eyed bit!' Where we... er can't keep our hands off each-other.\n\n\"Tara seems to think that we'll be... to put it briefly, she thinks that there's lots of places we'll feel the need to christen over the next few months. Do you understand what I'm saying?\"\n\n\"That she thinks that we'll be bonking like a couple of demented rabbits, you mean?\" I suggested.\n\n\"Close enough, Taylor; close enough!\"\n\n\"She could be right about that. How long will you be going up there for?\"\n\n\"Just long enough to pack the house up, and put it on the market. My father will take care of things after that; that's the bloody least he can do. Besides he's said as much already.\"\n\n\"What, that he'll look after Tara?\"\n\nOh yeah, and get the house sold for me. Daddy's a little... well, he admits he screwed-up and he's apologised to me many times.\"\n\n\"Well, just tell him not to waste his breath on me?\"\n\n\"Taylor, did you have a good time in Canada?\"\n\n\"Yeah brilliant!\"\n\n\"And, your boat, 'Ottilie'; you love that boat don't you?\"\n\n\"Almost as much as I love you and Tara.\"\n\n\"Well, here's something that you might like to think about. If, my father hadn't been such a complete... arsehole, all those years ago. Then we wouldn't be lying here together now, would we?\"\n\n\"No, but we'd be snuggled up together in a different bed, somewhere. We'd have been together for all those years... And you would not have been knocked about by Bill Morris.\"\n\n\"Yeah there are two ways of looking at it, I'll give you that. But I prefer to try to forget all the bad stuff and just see the good that has come out of it.\"\n\n\"You're too forgiving Ottilie.\"\n\n\"Possibly I am a little. But we... you and me, Taylor. And Tara of course! We need to look to the future. Christ we're thirty-one years old and we've still got our whole lives in front of us. Plenty of time to... well, Tara suggested that a little brother or sister, or maybe two, sounded like a good idea to her.\"\n\n\"Hey kiddo, one child out of wedlock is enough for me, we'd better get a wedding sorted then. Besides we're thirty-two... I'm nearly thirty-three.\"\n\nYou don't look it and a woman is allowed to be a little conservative when she quotes her age Taylor. The older she gets the more conservative she's allowed to get. Anyway, may I suggest we sort out the marriage side of things a bit sharpish then, my sweet! After-all, the clock is ticking and as you discovered yesterday morning I'm not using any protection. And we have been going at it quite a bit.\"\n\n\"You think we should use...\"\n\n\"No, you can't! I ditched them all the other night when I was looking for your PJ's. Somewhere safe where you'll never find them.\"\n\n\"Ottilie, that sounds like an attempt at entrapment to me!\"\n\nIt sure was; well, a sort of attempt at it! Christ Taylor, luck must start to go my way sometime in my life. Only this time I do it, knowing exactly what I am doing. With Tara, it was bad luck and the ignorance of youth. This time I'm going to make sure that you don't slip through my fingers. And besides, without your little supply tucked away in that drawer, you can't... Well, while I'm away... you can't, can you?\"\n\n\"I wouldn't want to Ottilie. Tell you what, I'll give the Reverend whatever-her-name-is, a call first thing.\"\n\n\"I don't think you'll even need to do that, Taylor. Maud kind-a hinted that she'll be dropping by around breakfast time tomorrow. To officially welcome a new member to her Parish, according to Maud. You're not a regular churchgoer nowadays, are you?\"\n\n\"Nope, but Maud and her best mate the Curate, have hopes of saving my soul. I only know her as Jean. They have managed to get me to church a few times though. Lots of things are based around the church or chapel around here; so one has little choice if you're not going to be an outsider, and want to be part of village life.\"\n\n\"Village life? I thought it was a town.\"\n\n\"Ah, but the town don't start until you get to the bottom of the hill, Ottie; by Parsons' boatyard. Out here in the sticks, we're considered to be part of the little village over the hill. It's either that, or you are branded an outsider. One of the many second-home set; who've pushed house prices out of the reach of most of the local youngsters.\"\n\n\"Aren't you an outsider?\"\n\n\"No, I'm an incomer... and so will you be. We relocate to the county to live and work. We're accepted because we actually live here all the year round. Well I do, and you will be very shortly as well. As will Tara and any other member who happens to join our family.\"\n\n\"Let's get to enlarging the family then, shall we?\" Ottilie said switching off the light.\n\n-----\n\nOttilie's... interview (because that's what it was) with our local curate went fairly smoothly. Jean very diplomatically asked certain pertinent questions of both of us. But as she had known me personally for some years by then, it was mostly Ottilie who got the grilling.\n\nJean had always taken after Maud a little, (where I was concerned anyway) and often tried to play pseudo mother to me when she got the chance.",
        "It was pretty obvious that Jean and Ottilie had met before, but I suspected in a social (via Maud) and not pastoral context, if you get my drift. I kind-a had it figured, that Maud would have dragged all four of my visitors along with her to the regular Sunday Service. Probably Maud hauled them down to the Methodist Chapel as well. \n\nMaud believed in hedging her bet's. Whatever both ministers and religious establishments appeared to serve almost all of the local churchgoers equally. If you couldn't get to one for some reason or the other, then the other establishment would do just fine. Although some folks did tend to refer to themselves, as \"Chapel\" or \"Church.\"\n\n\"Well, what kind of time frame are you two thinking about?\" Jean finally asked, bringing me back into the conversation.\n\n\"How about yesterday? I said jokingly.\n\n\"Carson... From the way you two have been carrying-on; the day before that would have been better. But no mind, in a way it's served a purpose. Half the village thinks you two are married anyway, mainly because of young Tara. The other half thinks that you were married at one time, when you were very young; but divorced for some reason. They believe that you have suddenly found each other again and reconciled.\n\n\"Now Ottilie. Your divorce, do you happen to have the relevant paperwork with you?\"\n\nOttilie said that she didn't.\n\n\"In that case, I'm afraid that it will take a little longer Carson. Because I know that Ottilie has been married before, I have to tell the registrar, and she won't issue an emergency licence until she's actually seen Ottilie's divorce papers. That's a shame really because we could have fitted you in on Saturday.\"\n\nSylvia's husband brought down the relevant divorce paperwork that weekend. So Ottilie not holding a grudge against her father proved handy, in more ways than Tara staying with him for a year. Ottilie had told him where to find them and given him the combination to her little safe.\n\nAs Ottilie read the safe's combination out to her father over the phone; I found myself looking at the old wooden chest that I kept all my important and legal papers in. And sort-of wondered whether I should have had a safe as well. An unimportant question because very soon Ottilie's safe became our safe and is now bolted to the floor where that old sea chest used to reside.\n\nOh, Tara purloined that rather quickly! She uses it (with a couple of cushions on top) as a seat by her window. What secrets she has locked away inside that old trunk, I know not.\n\nDelaying the wedding a week, unfortunately allowed time for my parents to attend. Albeit with their (replacement) significant others. As I've said before, a sudden excess of money can have some unexpected repercussions. I'd have never thought that my parents would ever... But maybe that's something I should be angry with Percy about, but I'll never know for sure.\n\nMy folks did their best to get along, but you could cut the atmosphere with a knife if either's significant other was also in the room, if you get my drift. We farmed them out to two different hotels, one just outside each end of the town. It worked, ..... some of the time.\n\nFrank Thorn, his brother, sister and significant others came down for the wedding, but I don't know where any of them stayed. Let's just say that Frank kept out of my way as much as was humanly possible.\n\nThe service was brief as they go, and nearly the entire village turned out, as well as some acquaintances from the town. Mostly boat people, that I did business with, and some of the more presentable clients of a few of the local watering holes.\n\nThere was no formal meal after the service. That would possibly have resulted in carnage. Instead two buffets and plenty of alcoholic refreshments were laid on. One at my... our house, and the other at the pub up the road. Ottilie and I spent the evening wandering between the two, until it was time (or rather the tide was right) for us to board a friend's launch (tarted-up inshore fishing boat) and head upriver to another friend's holiday-cottage for the night.\n\nWhen young John collected us and took us back to the house the following day there was little evidence left from fun and games of the night before. That's if you ignored the stack of bin-bags full of empty cans and bottles.\n\nThen, I had to say goodbye for a few days to my new wife, and of course my daughter. I had suggested that I might go along with them, to help Ottilie sort her house sale out. But... well, lets say better judgement and diplomacy dictated that I didn't.\n\nOttilie's father would be around after-all, and whenever I did clap eyes on him, I kept getting a strong... almost overwhelming urge, to smack the bugger on the nose.\n\nOttilie returned less than a week later, accompanied by several thousand cubic feet of Pickfords' removal lorry, and some nice porters to unload the thing. By the time the van had squeezed itself back out of the gate, the garage and every other watertight building was chock full of Ottilie's worldly possessions. \n\nIt took us several months to decide what would go and what would stay, choosing between each others as we thought would best fit the house. A surprising amount of Ottilie's stuff did replace some of mine, in the house. But not the bed!\n\nNo, neither of our beds stayed. Ottilie's, because... well, do I really have to say. And mine because it was too damned squeaky. Not that that was a problem when we were alone in the house, but we'd become too... aware of it, when Tara and Kate were down.\n\nYeah, Kate tended to come down with Tara. Ostensibly, she was acting as Tara's travelling companion; but more likely she came so often because John would always be kicking around somewhere when the girl did visit.\n\nI noted that when the girls were down, John was often accompanied by seemly endless string of different young companions. Whether, Kate had asked him to drag the poor wretches along or the boys themselves had requested an introduction to Tara, I do not know. \n\nBut apparently none of them received Tara's seal of approval. However, the following Easter on a family and friends so-called fishing expedition -- aboard 'Ottilie' -- my physician's son obviously did, because he and John suddenly became the very best of friends. I got a little concerned at that point, but Ottilie told me not to worry.\n\n\"Taylor, our daughter has had a very good demonstration of how to mess up your life in us two. You don't really think she'd do anything as silly as we did, do you?\"\n\n\"Well, kids will be kids.\" I replied, \"And teenagers do think that they know it all!\"\n\n\"And young Mike is scared witless of Tara's father. Jesus, the way you looked at him when Tara told us that were going out together the first time... You could have given the little bugger a heart attack!\"\n\nWhen young John's at school -- college now -- Ottilie crews for me. Funny, but I never thought I needed a crew in the old days. To be perfectly honest, if she's got nothing else on, Ottilie crews for me whether John's there or not.\n\nWell, I think that's about it. I appear to have turned into a Frank Thorn character, where my daughter's concerned; that -- I've been told -- is about par for the course. Luckily (for me) Tara's taken-up with a pretty sensible lad; well, he seems pretty sensible to me.\n\nSylvia and Mark moved their family to Cornwall a while back. They're not far away; close enough for Kate to spend most of her time with Tara, and Ottilie and Sylvia to share the school/college run, when I'm not available.\n\nMark works from home most of the time... I'm not too sure what he actually does though, something to do with computers as far as I can make out.\n\nBill Morris? Well, I took a little trip up country to visit him in prison. I can't say that he appeared too pleased to see me. Anyway, I kind-of pointed out to him that -- when he gets out next year -- visiting the southwest, would probably not prove be congenial to his continuing good health. I think he got the message, especially when I pointed out how much deep water we have surrounding the county.\n\nWell, you have to be careful in those places. You don't know whether the authorities are listening in, or even recording your conversations.\n\n Life goes on. "
    ],
    "authorname": "Denham_Forrest",
    "tags": [
        "dreams",
        "lost love"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/in-dreams-ch-03"
}
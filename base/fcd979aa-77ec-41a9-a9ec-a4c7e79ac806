{
    "title": "The Salon Ch. 02",
    "pages": [
        "Donna looked at her phone 5.20pm and wondered whether nerves would get the better of him. In the days since giving Jeremy a special massage she had jumped every time the phone rang or when Nico had called her, dreading their little secret was out. But if someone had found out surely they would have said something she thought to herself.\n\nDonna looked round The Salon it was virtually deserted, Kayleigh was just finishing off a middle aged lady. Another girl Alice, was packing her equipment away, Val kept on looking at the clock on the wall. Each of them hoping another customer would not enter and so make them stay beyond their shift. \n\nShe wondered how far she would go with Jeremy this time as she recalled his inexperienced hands trying to worn their way into her knickers. She smiled to herself, if everything went well she would let him slip a finger or two into her pussy, get naked for him and give him a fully nude massage.\n\nLooking again at her phone and her heart skipped a beat as Jeremy entered eliciting a groan from the rest of the staff. Not wishing to make it too obvious she greeted him, 'cut is it?'\n\n'Yes please,' he replied playing along.\n\n'Take a seat,' as she ushered him to her station, 'just a trim is it?'\n\nHe nodded as Donna put a drape round him and as she tucked it round his collar whispered, 'the other's will be gone soon okay.'\n\nHe caught her eye in the mirror and blushing slightly nodded to her.\n\nA few minutes later he heard the blinds go down and saw the \"open\" sign being turned over to \"closed.\" Finally the voices of some of the staff as they took this as their queue to leave.\n\nLater, Donna was aware it was just Nico and Alice with her customer. Alice finished off her customer and let him out of the shop.\n\nNico then instructed Alice, 'can you lock the door please.'\n\nJeremy felt a shiver of excitement on hearing the sound.\n\nAlice passed them as she collected her belongings, 'see you Donna.'\n\n'Night.'\n\nAt the far end of the shop Nico remained. 'Nico, you can go if you like, I'll lock up after this customer.'\n\n'Are you sure?'\n\n'Yeah.'\n\n'Okay then, see tomorrow.'\n\nDonna left it a few moments before she whispered, 'I'll just lock the door.'\n\nJeremy was nervous but terribly excited this excitement reached a crescendo as he heard the door being locked.\n\nDonna returned, 'so what can I do for you then young man?'\n\n'A...' he tried to speak, 'a massage.'\n\n'Is that a normal massage or a Donna special massage for you today?'\n\n'A special one please if that's okay.'\n\nShe smiled as she stood back from the chair, 'you better follow me then.'\n\nJeremy followed behind her ogling her big round bum which was encased in a pair of tight jeans. Once inside Donna reached in her pocket for the key, 'just in case anybody should come in.'\n\n'They won't will they?'\n\n'Maybe,' Donna laughed, 'but you're only having a massage aren't you?'\n\n'But.'\n\n'But,' she teased.\n\n'I thought I was getting a Donna special massage.'\n\n'Mmm,' she smiled before looking him up and down. \n\nJeremy swallowed hard, 'I am getting a massage like last time aren't I?'\n\n'And what happened last time?'\n\nJeremy felt himself blush, 'you know.'\n\n'I don't.'\n\n'When you...' his sentence petered out.\n\nDonna smiled, 'your face, I'm only teasing you. You shall get a massage, but it might not be like last time.'\n\n'Oh...'\n\n'Perhaps we might go a bit further this time, would you like that?'\n\nJeremy nodded excitedly, 'shall I take my clothes off?'\n\n'Yes, all of them.'\n\n'What about...' his voice petered out.\n\n'You want me to take, all my clothes off too?'\n\nHe nodded unable to speak.\n\nShe smiled looking him up and down as she slowly began to undress, 'okay then, but I'm keeping my knickers on.'\n\n'Can I...'\n\n'Yes you can play with my tits, you liked doing that didn't you?'\n\n'Yes,' he groaned, 'very much.'\n\nJeremy stood admiring Donna in her knickers, made up of a black triangle of mesh-like material at the front held by two tiny straps one of which cut through her tattoo. Best of all, the material was see-through which afforded him the first view of her neatly trimmed pubic hair. The image in marked contrast to most of the women he had seen on-line who were shaved. \n\nDonna noticed him staring and looking down at her knickers remarked, 'can you see?'\n\nHe nodded.\n\n'You like?'\n\n'Yes,' he spluttered. \n\n'I used to be fully shaved for my boyfriend, but not now, but I like to keep it trimmed.'\n\n'I really...'\n\n'What is it Jeremy?'\n\n'Would you be able to let me see you?'\n\n'You want me to take my knickers off for you?'\n\nHe nodded, 'would you?'\n\n'Cheeky, my knickers stay on,' she paused before whispering, 'for the moment.'\n\nAs Donna looked on, Jeremy removed the remainder of his clothes conscious that he was fully aroused.\n\n'I can see you're looking forward to your massage.'\n\nAware she was looking at his arousal, Jeremy nodded.\n\n'Onto the table then.'\n\n'How do you want me?'\n\n'Lie on your back, I can see there's some localised swelling we need to work on.'\n\nJeremy got onto the massage table and laid on his back as instructed whilst Donna applied some oil to her hands. As she slowly walked towards he was afforded an even clearer view of her panties. \n\nDonna was at the edge of the massage table as Jeremy gulped in air at the sight before him. For less than a foot away from him was her barely covered pussy. The see-through black material stretched tight against it. Close up the short pussy hair was darker than her hair colour but matched the colour of her eye-brows. As he continued staring Donna began her massage. \n\nRecalling her words the previous week when he had tried to worm his way into her jeans and summoning up all his courage Jeremy tentatively stroked along the material of her knickers. Donna did not react and he wondered if he had done the wrong thing. \n\nA few moments later Donna, seemingly oblivious to his touches, commented, 'oh no I've run out of oil, I'm just going to get some more,' as she stopped the massage and went over to the drawer where Kayleigh kept her oils. She opened the top drawer and rooted round for a bottle of massage oil. But something reflective caught her eye, Donna looked again, the dirty slut, she thought to herself as she retrieved a bottle.\n\nDonna curled her hands round his shaft, slippery with massage oil and slowly began to wank him as she thought about her very recent discovery and even toyed with the idea of using one.\n\nJeremy looked up at Donna her large breasts hanging down invitingly as he reached up to stroke them. But he wanted to go that bit further, so with his hand he went lower touching her tummy circling round the stud in her navel. He held his breath, closed his eyes and wished, wished she would let him, would not protest as his hands snaked lower lower down her smooth stomach. The tips of his fingers came into contact with her knicker elastic and they burrowed under down further until they reached her pubic hair. Jeremy gasped as he touched it for the first time.\n\nWould she let him touch her properly? Slip a finger inside her? His nervous and inexperienced fingers went lower, lower, he heard Donna give a moan, read it of encouragement as he sneaked further down. \n\nHe groaned as Donna began to increase the strokes, he would soon cum but he wanted to touch her first. He pressed this time Donna's moan was more audible, down even further the tips of his fingers encountered moisture he tentatively rubbed.\n\nThis time Donna gave out a proper moan as she gripped even tighter and really began to pump his cock as she leant over him so her nipples were close to his soon to ejaculate cock.\n\nSeeing her nipples so close was a vision from heaven as intuitively he licked one, before taking it in his mouth and sucking hard. \n\nHe heard Donna gasp, before he let out a long groan of his own as the first arc of cum shot out the top of his cock splattering all over Donna's breasts. Donna gave a gasp as she directed his erupting cock to her breasts. \n\n'Oh Jeremy,' she exclaimed as he finally stopped and she stood up and moved away, thus removing his hands from her knickers, 'look!'\n\nJeremy looked at his handy-work. Her breasts were covered in his semen which slowly began to run down her cleavage and onto her stomach.\n\n'You've made a right mess,' as she placed the palm of her hand on her stomach preventing a blob of his cum running down to her knickers.\n\n'Sorry.'\n\n'It's okay,' smiling as she began to rub it into her breasts, 'supposed to be good for the skin,' she said by way of explanation, 'plus it's sexy.' \n\nJeremy gasped.\n\n'But now I can't put my clothes on like this, I'll have to have a shower. Do you mind?'\n\n'Sorry.'\n\n'If I jump in with you?'\n\nJeremy gulped.\n\n'We can soap each other down if you like?' Maintaining eye contact Donna continued as she pointed at her panties, 'I better get these off too,' as moments latter she eased them down her legs.\n\nJeremy's cock had barely wilted but seeing Donna's pussy properly for the first time soon had his erection returning with a vengeance.\n\n'Come on Jeremy stop staring and into the shower,' as she ushered him off the massage table and into the shower.\n\nThe shower cubicle was in the corner of the room and entry was gained by a perspex water-tight door. As Jeremy entered he felt Donna's hands on his buttocks, 'bit further in, I need to close the door.'\n\nHe moved forward so he was facing the wall, Donna leant round him and turned on the shower. Jeremy shivered as an icy blast covered him but the water soon became warm. \n\nDonna's breasts squashed again him as he felt his own sticky cum on his back as she leant forward to get some shower jell.\n\n'Shall we soap you down and get rid of all the mess?' Donna did not wait for a reply as she ran a soapy hand over Jeremy's cock, surprised at how hard it remained, 'does it ever go down?'\n\n'I don't know.'\n\nDonna laughed as she squeezed it drawing a gasp from Jeremy, 'can you turn round, so I can do your chest.'\n\nSlowly Jeremy turned round, his hands brushing Donna's breasts and his cock touching her side just below the rib-cage, 'sorry.'\n\n'Don't worry, there's not much room in here is there?'\n\n'No.'\n\n'And even less room with this thing,' Donna stroked his cock as Jeremy arched his back in pleasure.\n\nDonna smiled to herself as she lathered up his stomach and chest. She then put her arms round his back and pulled him close so his cock squashed between her navel and breasts. Keeping him tight to her she slowly stood up on her tip toes so that Jeremy's soapy penis slid up her stomach.\n\nJeremy groaned in pleasure.\n\nRubbing against his hardness brought on a wanton sensation in her pussy. She wondered if he had any idea he was turning her on so much. Moaning again as she reached down and stroked Jeremy's cock, before looking him in the eyes. 'I love it when my tits are up against your chest and you're pressing against my tummy like that.'\n\nIn reply her pulled her even closer savouring her breasts which were squashed just below his chest. Wanting more his hands gripped her buttocks pushing her even tighter to him.\n\n'Oh Jeremy,' Donna moaned liking the way he took control, before looking him in the eye and tilting her head upwards placing an arm round his neck and pulling him downwards. She kissed him passionately as their tongues eagerly probed each others mouths.\n\nThey stopped kissing and Donna said 'time for you to soap,' pointing to her breasts, 'these, there's still some of your cum on them.'\n\nJeremy almost in a trance nodded as he squirted some shower jell onto his hands and then slowly began to massage it into Donna's breasts. After he had lathered them up he held a breast in each hand lifted them up feeling their weight before gently squeezing them. The spray from the shower soon removed the lather and as he looked down at her nipples they were stiff just like his cock. \n\nLooking down beyond her breasts Jeremy desperately wanted to touch her pussy but was too shy.\n\n'What are you looking at?'\n\nJeremy swallowed hard as he fought to express himself.\n\nDonna smiled, 'do you want to touch me?'\n\nJeremy nodded and replied, 'yes.'\n\n'Have you ever touched a girl down there?'\n\n'No.'\n\nDonna smiled encouragingly.\n\nGingerly Jeremy ran his hand down Donna's stomach before skirting along the edge of her groin not really knowing what to do next. \n\n'You can go lower if you want,' Donna whispered.\n\nJeremy nodded as he followed her instruction his fingertips gently venturing lower as Donna parted her legs.\n\nEncouraged Jeremy reached under her and cupped her pussy in his hand. Next, he felt Donna's hand on his as she whispered, 'finger me.' As Donna took his first and index fingers and rubbed them up against her opening.\n\nJeremy groaned not believing what was happening what this very forward older girl was letting him do to her as his fingers slid in and out of her pussy. Surprised as how wet, hot and tight she felt. \n\nDonna began to moan softly, each moan making his penis even stiffer.\n\n'Touch my clit,' she whispered.\n\n'Sorry!' As moments later he felt Donna's fingers on his directing him upwards.\n\n'Rub me there.'\n\nHe rubbed the small nub of smooth skin.\n\n'Oh that's good,' she moaned as he continued to rub.\n\nDonna had gone much further than she had thought she would go with him. But the discovery in the drawer and the continued ache in her pussy which Jeremy's fingers were merely stoking and not quenching, led her to whisper in his ear, 'is this for me?' As she gripped his penis. \n\nDisengaging his fingers he nodded nervously.\n\nDonna smiled at his response and the realisation her boundaries would soon be broken. 'Lets get dried off then.' She then turned off the water, opened the door and stepped out of the shower taking hold of Jeremy's hand. She then wrapped a large towel over herself and beckoned Jeremy to join her. Wrapped up they kissed again. As in the shower Donna held him close, his hot hard cock pulsating against her stomach. \n\nShe moaned softly, before whispering, 'I've got something for you.'\n\nAs she disengaged from him he wondered what she meant. His eyes followed her as she walked naked over to the cupboard where she had earlier got some massage oil. \n\nShe soon returned, one of her hands was behind her back as she said, 'close your eyes and hold your hand out.'\n\nJeremy obeyed as moments later something light was placed in the palm of his hand.\n\n'You can open them now.' Opening his eyes Jeremy gasped as he suddenly became light headed steadying himself on the massage table.\n\nDonna smiled at his nervousness the sense of trepidation and fear in his eyes. Her rock-hard nipples inches away from his chest as she whispered, 'you know what this is for don't you?'\n\nJeremy, heart now pounding just nodded.\n\nSmiling she whispered, 'do you want to?'\n\nJeremy gasped, 'you mean now? With you?'\n\nShe nodded as she noticed his hands were shaking his face bright red, 'well?'\n\n'Ere, God, I wasn't expecting, you know this...' but then belatedly realising that he was being offered sex on a plate, 'yes, yes of course I want ...'\n\nDonna gently touched his hand, 'you are you sure about this? Because if ...'\n\n'Yes, yes I'm sure, sorry I'm really nervous.'\n\n'I know,' replied Donna, 'we'll go easy.' She then smiled at him as she asked, 'do you want me to put it on for you?'\n\n'Yes, I think so ... my hands won't stop shaking.'\n\nDonna gently tore open the packet and gripping his cock in one hand gently rolled down the condom with the other. 'Does that feel okay?'\n\n'A bit strange,' replied Jeremy as the condom gripped the base of his cock making it swell even more.\n\n'We've got plenty of time, there's no need to go just yet, just get used to it for a while.'\n\nHe nodded, still not believing he was going to loose his virginity.\n\nThey kissed again. Donna reached down and felt his cock, encased in rubber with a smell of latex, not as sexy as bare skin but she couldn't risk going without.\n\nShe gently kissed his cheek before whispering, 'just you tell me when you're ready,' and rubbed the small of his back.\n\nJeremy swallowed hard, looked Donna in the eyes and replied, 'now please, I'm ready now.'\n\nDonna smiled and led him by the hand to the massage table. With her back to the table she brought Jeremy up close to her and kissed him, pausing she asked, 'you do want this don't you?'\n\n'Yes, why?'\n\n'It's only that I'm a bit older, I don't want to take advantage of you and you might have been waiting for someone special.'\n\n'No,' he replied, 'you're special.'\n\nShe smiled, although it was a cheesy thing to say, coming from Jeremy it was so genuine. Kissing him gently on the lips and whispering, 'you're so sweet Jeremy,' before easing her bottom onto the massage table and lifting her feet off the ground. Finally she beckoned Jeremy to move closer.\n\nJeremy shivered in expectation as his thighs came into contact with hers. He looked down at her trying to take everything in, her full breasts, the stone in her belly button, the tattoo he has first seen on his earlier visit and finally her trimmed pussy which he was soon to enter.\n\nDonna then kissed him before raising her feet slightly opening herself up for him. As he eased forward, he felt Donna's hand grip his cock as she directed it to her pussy.\n\n'Just push forward when you're ready.'\n\nHe nodded before following her instruction. A moment later he was inside her as he felt her smooth calves circle behind his legs.\n\nDonna groaned, his cock felt really good. It was a decent size and felt bigger than her previous boyfriend's. She had really missed sex and hoped Jeremy would not cum too quickly as she instructed him, 'just stay like that until you get used to me.'\n\nHe nodded as he looked down and saw for the first time his penis up to the hilt in Donna's pussy.\n\n'That feel good?'\n\n'Amazing.'\n\nShe slackened the grip of her calves, 'slide out.'\n\nJeremy followed her instruction.\n\n'Now back inside me.'\n\nHe did, but far too quickly.\n\nDonna gasped and her breasts wobbled, 'not so rough, just go really slow.'\n\n'Sorry.'\n\n'It's okay,' and not wishing to crush his confidence remarked, 'you feel really good inside me,' she stroked his hair, 'slow and gentle now.'\n\nWith that he slid in again too quickly and then out as Donna's whole body shook. 'Ahhhh,' he groaned, 'this is so good.'\n\n'Yes Jeremy, slide all the way into me.'\n\nHe moaned as he slid back inside her.\n\n'Try to get a rhythm going, try to move in time with me.'\n\n'Okay,' he replied.\n\n'You're doing well,' she commented as his cock slid out of her, then back in at which she instructed, 'just stay there inside me, keep it in.' With that Donna flexed her pelvic floor muscles. \n\nJeremy moaned as the whole length of his cock was squeezed by Donna's pussy.\n\n'You like that?'\n\n'Yes,' he panted.\n\n'Need to make it good for you,' as she relaxed her muscles.\n\n'Yeah,' he grunted as he slid out.\n\nAs he slid back inside he was captivated by how her breasts wobbled and tummy rippled. Staying deep inside her with her nipples close to his chest he traced the tan-lines across the top of her chest.\n\n'Mmm,' that's nice remarked Donna enjoying the way he was affectionately albeit it slightly clumsily touching her. She smiled wickedly at him as she again gripped him tight in her pussy enjoying the groan of delight it caused.\n\nDonna saw him look down and remarked, 'can you see yourself inside me?'\n\n'Yes.'\n\n'Look sexy?'\n\nHe nodded gasping, 'I can't believe this is happening.'\n\nShe smiled as she gave him a little pinch on the arm, 'see it is, it's not a dream your having.'\n\nHe groaned as he looked down and watched his condom encased cock slowly slide out of Donna before sliding back in much slower then before.",
        "'Mmmmm,' Donna purred, 'that's really good, oh it feels really good when you do it like that.'\n\nJeremy looked at her face for a few moments then down to her smooth thighs either side of him which he gave a gentle stroke to before bringing a hand round behind her stroking the top of her bottom. In doing so her nipples bumped into his chest which sent a current to his own nipples which in turn seemed to send something down through his whole body. Energised by this he leant forward kissed her neck, smelt her hair still damp, then kissed her more passionately on the lips finally sliding into her harder than before then out again.\n\n'Oh Jeremy, not so rough.'\n\n'Sorry.'\n\nDonna saw his strained face, 'what is it?' \n\n'I think...' as he slid back into her.\n\n'Are you going to cum?'\n\n'Yes, I think so...'\n\nDonna felt a stab of pleasure in her pussy, but she was way off her own orgasm. \n\nJeremy speeded up and began thrusting in and out of her. Donna's large breasts bounced and her bottom moved in tiny movements backwards and forwards on the massage table in time with his thrusts.\n\nDonna placed the palm of her hand on his chest, hoping he would pull out and let the excitement pass, perhaps kiss her, suck on her nipples before re-entering. But not Jeremy as he arched his back and let out a loud groan as his body began to convulse.\n\nDonna's thighs were buffeted against his as Jeremy leant his full weight against her, his chest squashed against her breasts as he ejaculated into the condom.\n\n'Are you okay.'\n\n'Yes,' he replied his voice drained.\n\n'That was pretty intense.'\n\nHe nodded not really knowing how to respond.\n\nAs he slid out, Donna looked down at the condom making sure it hadn't split.\n\nHe remained standing between her thighs regaining his breath and getting used to the strange sensation that he was no longer a virgin. \n\nHe so wanted to hug her, kiss her thank her from the bottom of his heart. But instead just stared at her and saw there was a trace of disappointment in her face. \n\nAfter bit of a silence, it was Donna who spoke first, 'you sure you're okay?'\n\n'Yes.'\n\nDonna was unconvinced by his reply and worried about potential loss of her job, 'what is it?'\n\nHe shifted uncomfortably.\n\n'What Jeremy?'\n\n'Did you, you know, have an orgasm?' \n\nShe stroked his hand, 'no not this time.'\n\n'Oh,' he replied before adding, 'sorry.'\n\n'It's alright, women don't cum as easily as men, don't believe all what you see in porn, the mood has to be right,' she saw a look of anguish in his face and didn't want to hurt his feeling by saying he was a bit too rough at the end and it was over far too quickly, 'sorry I didn't mean you Jeremy, it was still good.'\n\nHe felt acute disappointment as he saw Donna ready to gather her clothes. \n\n'What are you doing?'\n\n'Time to go.'\n\nJeremy looked at her naked body again wanting this moment to last forever.\n\n'What is it?\n\n'Donna.'\n\n'Yes.'\n\n'Can I...' he paused and took a deep breath.\n\n'What is it?'\n\n'Can I massage you please.'\n\n'Really, you mean now?'\n\n'Yes.'\n\n'I don't know, we should be...'\n\n'I really want to.'\n\n'I guess, if that's what you want to do, you can give me a quickie massage.'\n\nHe nodded, 'you'll have to tell me what to do I've not done one before.'\n\nDonna smiled and laid on her front on the massage table, 'you don't have to use much oil, just to squirt some on your hands first, you can start on my shoulders.'\n\nJeremy nodded as he followed her instruction \n\nDonna had expected him to request that she immediately turn over so he could feel up her breasts or finger her pussy but instead he had spent ages gently massaging her shoulders, back and stroking the skin with the tips of his fingers. For someone so inexperienced he seemed to know just where to touch. \n\nHe then went lower gently stroking her upper thighs making no attempt to part them which she was expecting. Donna gave a blissful sigh commenting, 'oh that's so nice Jeremy.'\n\n'Is it?'\n\n'Yes, don't sound surprised, you're really quite good at this aren't you?'\n\n'Am I?'\n\n'Mmmm yes you are, very good in fact,' before adding, 'I'm glad I stayed now.'\n\n'Really?'\n\n'Mmm.'\n\nJeremy gazed at her bottom, lovely and round her white skin covered in a delicate down. At the top of her left cheek she had a small freckle, which Jeremy gently circled. \n\n'Oh that tickles.' \n\nJeremy continued to gently circle round her freckle, loving the feeling of her soft skin against the tips of his fingers. Next he began to massage delicate little circles on one cheek then another before gently stroking the hollow of her back before returning to her cheeks. \n\n'You really like my bum don't you?' As she felt his hands linger on her bottom.\n\nJeremy felt himself blush as he responded, 'yes.'\n\n'Would you like to give me a little smack?'\n\n'Why?'\n\nDonna responded with a little giggle, 'because it turns me on.'\n\n'Does it?'\n\n'Mmm, but not too hard though.'\n\n'Okay,' he replied nervously as he gave her a gentle smack and watched her bottom ripple a slight red mark left on her white skin.\n\n'Mmm,' moaned Donna, 'do you want me to that again?'\n\n'Can I?'\n\n'So you like doing that to me?'\n\nJeremy nodded.\n\n'Good, you can go a bit harder if you want.'\n\nJeremy smacked her bottom as instructed and in response to her yelp said, 'sorry.'\n\n'It's alright, you don't have to stop, what you're doing feels so good.'\n\nJeremy smacked her bottom a few more times, before massaging her cheeks gently touching the slight red marks which his earlier ministrations had caused. Eventually running the tips of his fingers between her cheeks which caused Donna to softly moan.\n\n'Sorry.'\n\n'No that's really nice Jeremy,' as Donna parted her legs slightly just to show him just how nice it felt and there was nothing to be sorry about. She had not cum and could feel herself getting more and more turned on. But to her great frustration Jeremy did not appear to get the message as his hands moved to her lower back. She gave a groan of frustration.\n\n'What is it?'\n\n'Are you teasing me?'\n\nJeremy didn't know what she meant, 'no why?'\n\n'Why do you think I opened my legs?'\n\nSuddenly the penny dropped as Jeremy mumbled an apology before asking, 'do you want me to massage you between your legs?'\n\nDonna responded by taking his hand placing it at the very top of her thighs, 'massage me there.'\n\nJeremy began massaging the tops of her thighs. His touches were good as they sent little messages of encouragement to her pussy. But she wanted more which led her to comment, 'don't you want to go higher?'\n\n'Can I?'\n\n'Of course you can,' she paused, 'you can go as high as you like.' A few moments later she felt Jeremy's hands wander up towards her pussy, 'higher,' she implored. \n\nShe smiled to herself as she heard Jeremy's gasp. 'What is it?' She asked.\n\n'You're...'\n\n'Mmmm, you've made me really wet.' \n\nKeen to investigate further, Donna moaned softly as Jeremy stroked her pussy, but that was not enough as she pushed herself down onto his hand and feeling a finger slide into her gasped 'oh yes.'\n\n'That's it in and out,' she encouraged him as he began to finger her. Donna looked down at his cock it was now hard. 'You like doing that?'\n\n'Yes.'\n\n'I can see,' she paused before adding, 'you can use another finger on me if you want to.'\n\nA moment later she felt another of his fingers inside her. Whilst his two fingers were good his cock would be so much better as she pictured it nudging against her G-spot. That and her fingers rubbing against her clit would be enough to make her cum, she thought to herself.\n\n'Jeremy does that mean you want to fuck me again?'\n\n'Yes,' he gasped equally surprised and turned on by her crude turn of phrase.\n\n'Mmm so do I, the drawer's over there, should be some more condoms.'\n\nJeremy dashed over and started rooting about.\n\nA few seconds later, Donna now sat on the massage table, heard his groan of frustration, 'what is it?'\n\n'There aren't any.'\n\n'No,' she moaned, 'you're joking,' as she got off the massage table and walked over.\n\nStanding behind him, Jeremy felt her breasts against his back as Donna too began searching.\n\n'Oh no,' she cried. Donna looked at his cock, it remained rigid and some of the semen had dried giving the appearance of peeling skin. The more she stared at it, the more her pussy began to ache especially as she thought about him fucking her from behind. \n\n'What is it?'\n\n'Can't you see, I'm feeling really horny now.' \n\nNot waiting for response she continued, 'I want you again, I want you to give me an orgasm, but,' she looked down, frustration etched in her voice, 'no condoms and I'm not on the pill,' as she cursed herself for coming off it after she had split with her boyfriend. \n\nThey remained facing each other, 'oh Jeremy, Jeremy, Jeremy,' she moaned. 'I really want it, want you, now.' She looked at his cock which remained hard as she pictured it sliding in and out of her pussy nudging against her G-spot ready to give her the orgasm which she craved. She then looked into Jeremy's eyes.\n\n'What.'\n\n'I need to ask you something now?'\n\nHe nodded.\n\n'You know how horny and wet you've made me?'\n\n'Yes.'\n\n'I don't think you do.' \n\nAs to leave him in no doubt she took hold of his hand and brought it to her pussy.\n\nJeremy's gasped, her pussy was even wetter than earlier on the massage table.\n\n'See, I need to cum, badly, so either I frig myself off in front of you, or we could fuck again.'\n\n'Can we?'\n\n'Yes,' she paused before adding, 'it will have to be bareback.'\n\n'Sorry.' \n\nDonna saw the look of unfamiliarity in his face, 'you've not heard of that expression before?'\n\nHe detected the desperation and longing in her voice as he shook his head.\n\n'It means going without a condom.'\n\nJeremy replied with a sharp intake of breath.\n\n'Would you do that for me?'\n\n'I don't...'\n\nShe smiled, 'it will feel much nicer for you.'\n\n'It will?'\n\n'Oh yes, but, and you'll have to promise this.'\n\n'Yes.'\n\n'You can't cum inside me, if you think you are you must pull out of me. Do you understand.'\n\n'I won't ... I will, I mean I've never cum three times before.' \n\n'Oh Jeremy,' she hugged him and in doing so his cock butted between them, 'go and wash him for me, quickly before I change my mind and come to my senses.' \n\n'Okay,' he replied excitedly as he went over to the shower squirted some jell onto his cock and washed it clean.\n\nDonna meanwhile folded up a large towel and placed it on the floor before kneeling on it. When he exited the shower she beckoned him over to where she was standing, 'are you still okay with this?' \n\n'Yes.'\n\n'And I can trust you?'\n\n'Yes, yes.'\n\nShe felt her pussy give a little throb of excitement, 'we'll do it doggy, you know what that is don't you?'\n\n'Yes.'\n\n'Good,' with that Donna leant forward placing her hands on the floor. She felt so vulnerable with her pussy open and wet, yet she had never felt hornier. She looked over to Jeremy, 'get behind me then.'\n\nHe nodded as he went down on his knees behind her his cock hard and throbbing. \n\nDonna gave a little moan of excitement as she felt his knees, still wet from the shower, against the side of her shins. She knew she would soon have his bare cock inside her. She felt his hand stroke round her bottom before wandering up the side of her body and heard his nervous heavy breathing.\n\n'Stop teasing me.'\n\nShe heard him gasp then felt something smooth gently rub between her cheeks, she let out a soft moan as she reached her hand round and gripped his throbbing shaft before opening her legs wider and directing it towards her wet lips. She rubbed him up and down a few times which elicited a soft moan from Jeremy. 'You okay?'\n\n'Ah, yes,' he grunted.\n\n'Now slowly slide into me.' \n\nDonna gave a long low moan as Jeremy slid his bare cock into her.\n\nWithout the condom Jeremy could really experience the wetness of Donna's pussy and he groaned in response to this new feeling of absolute pleasure. \n\n'Are you okay?' Asked Donna fearful he might cum.\n\n'Yes, it just feels really different.'\n\n'Better?'\n\n'Yeah, I can't believe how good it feels.'\n\n'Now Jeremy, slide it all the way in,' following her instructions she gasped as his knob nudged against her G-spot. 'Oh that feels good,' she sighed as she pushed against him to increase the pressure, 'oh yes Jeremy stay like that, just keep yourself pushed against me.'\n\nDonna reached under herself and slowly began to stroke her clit. Then easing forward so the pressure was off before pushing back against Jeremy so the electric sensation was felt again deep inside.\n\nJeremy grunted.\n\n'Are you okay?'\n\n'Yes.'\n\n'Not going to cum?'\n\n'No, I don't think so.' \n\nWith that Donna slowly began pushing back then gently easing forward whilst continually strumming her clit. She also began to slowly rotate her pussy against the bare cock deep inside her. It felt so good, it was a combination of the fact it was the first time he had gone bareback, the risk of getting caught but most of all the real risk. With his itchy trigger he could easily unleash his virile seed and impregnate her.\n\nShe felt his hands grip her hips as he held himself deep inside her, 'oh yes Jeremy,' she cried so turned on by the fact he was finally taking control. \n\nDonna groaned as she pushed back on his cock which in turn pushed up against her G-spot. As she continued to rub her clit she could feel it, she was going to cum with his bare cock inside her. \n\n'Ohh,' she groaned. Could she trust him not to cum? Would her tight pussy in the throes of an orgasm prove too much and milk him dry? But did she care? 'Oh Jeremy,' she cried, 'you and your cock are going to make me cum.'\n\nShe gave one final push as she felt herself tighten against the piece of meat inside her, squeezing hard against it then a huge release as she came. She recalled crying out his name, pleading for him to stay inside her whilst she rode her orgasm. At that precise moment she couldn't care whether he came, it was her orgasm which took precedence over everything. \n\nHer arms gave way so the side of her face was resting on the floor and so changing the angle of that lovely cock inside her, 'oh Jeremy,' she panted, 'that was so so good come here.' Donna groaned as he slipped out of her and scooted round to face her, she smiled and then kissed him, 'oh Jeremy,' as she caught her breath. Then she belatedly remembered as she reached down to her pussy expecting to find his semen dribbling out, but there was nothing she looked at his cock expecting it to be wilted but it was hard.\n\n'You didn't cum?'\n\n'No you told me not to.'\n\n'Wow,' as she gave a sigh of relief, 'I thought you might have, heat of the moment and all that.'\n\n'You said not to.'\n\n'I know, but ...' she changed the subject as she instructed him, 'help me to my feet,' as she remained in post-orgasmic bliss.\n\nShe placed her arms round his shoulders as he helped her up. They stood facing each other as they kissed softly on the lips before holding each other close and savouring their naked bodies.\n\n'Jeremy, that was so good, you were so good,' Donna whispered in his ear. When he did not respond she pulled away slightly so she could see his face. \n\n'What's wrong?' She asked as she saw an anguished look, she then realised he was still hard. 'What is it Jeremy?'\n\nJeremy did not reply instead his arms circled round her lower back feeling her bottom and the new and exciting sensation of her large breasts squashed against his torso.\n\nWithout her heels on he was that much taller and she felt a sense of vulnerability. This feeling soon came into fruition as Jeremy eased her backwards a few steps so she was up against the massage table. Digging his fingers into her bottom so she was pulled close to him his cock squashed against her just like earlier in the shower. He massaged her bottom slowly and then eased her up a few inches so it was now on the table.\n\n'Jeremy what are you...' But as she looked down it was obvious what he wanted. She gasped in surprise, but was unable to say anything, her only gesture to bite her bottom lip. \n\nJeremy did not reply as stood between her thighs he inserted two fingers into her wet pussy and slowly moved them in and out, she placed her hand over his shoulder but did not push him away. \n\nShe gave a yelp as the tips of his fingers came into contact with her clit still sensitive from her recent orgasm. \n\n'Sorry,' he responded and a bit of the earlier nervous virgin returned. But that soon disappeared as she looked into his eyes. They contained the same look and wanton desire she had possessed earlier when he had initially left her unfulfilled. \n\nDonna looked down at his solid shaft still glistening with her juices then into his eyes, no longer the boy who she first met. He must have realised she would offer no resistance, wanted it as much as him, as cock in hand he edged forward parting her thighs as she opened up for him. He was now only inches away from her pussy. \n\nJeremy looked at her, expecting a reaction but instead she did nothing, taking this as the green light to proceed he effortlessly slipped a few inches inside her.\n\nAs soon as his bare cock made contact with her pussy it felt amazing and so right. Against her better judgement she could not stop herself from circling her calves round his back pulling him in further. \n\nOnce fully inside her Donna slackened her grip allowing Jeremy to slip gently out. She gave a nervous smile which Jeremy responded to by sliding his full length back into her wanton pussy. Jeremy grunted and groaned as he began to slowly slide in and out of her. His movements slow and purposeful not like the jerky inexperienced ones of the first time.\n\n'Mmm, Jeremy that's sooo good,' she cried as she dug her heels into the backs of his upper legs.\n\nJeremy grunted a response as he slid out of her then back inside all the time maintaining eye contact. He felt her hands gently touching his side beckoning him to slow down even more.\n\nJeremy nodded and smiled as he gently brushed her hair aside before placing his hands over the tops of her shoulders, trying to savour the moment and taking as much as possible of her in. With his right hand he stroked down the side of her neck and across the top of her shoulder. Her skin was so smooth, soft and lovely and he vowed to never forget how wonderful it felt. \n\n'Ooh yes, that feels so good,' Donna responded, his transformation from inexperienced virgin to un-selfless lover had been miraculous. \n\nJeremy let his hand slip south as he stroked her breasts and then cupped them. Feeling their weight in his hands still barely able to comprehend the events as he located a swollen nipple. Instinctively he pinched it as a split second later her pussy tightened against him. He let out an ecstatic moan.\n\n'What is it?'\n\nHe pointed downwards.\n\n'Mmm, that made my pussy twitch.'\n\n'I felt it.'\n\nDonna looked at him and smiled beckoning him to pinch her other nipple which he did.\n\n'Ohh,' she moaned and by way of explanation, 'that one's more sensitive, I can really feel it in my pussy.'\n\nJeremy nodded as he pinched both nipples simultaneously and then felt her tighten round his shaft.\n\nDonna gave out a slow moan, her pussy was throbbing, her whole body on edge and tingling with anticipation. She groaned as Jeremy's cock slid into her again. Every time he did that Donna could feel herself getting wetter and wetter as she slathered his cock with her juices. If this kept on she would surely cum again.\n\nAgain Jeremy pinched both her nipples, this time the effect was even greater as his actions produced a direct current from her nipples down to her pussy instructing it to squeeze the cock inside her. \n\nJeremy let out a sharp moan as Donna's throbbing pussy gripped him so tightly he had to stop still deep inside her.",
        "They remained still both breathing heavily looking into each others eyes, it was Donna who spoke first, 'you close then?'\n\n'Yes.'\n\n'My twitching pussy?'\n\nHe nodded.\n\nShe breathed a deep breath, 'well if you keep on playing with my nipples.'\n\n'I can't help myself,' as he gently stroked down her cleavage.\n\n'Jeremy,' she moaned, 'stop.'\n\n'Sorry.'\n\n'Now,' she paused, 'where do you want to do it?'\n\n'Sorry?'\n\n'Cum, do you want to do it on my tits again?' As she pictured his hot cum splattering all down her breasts whilst she strummed her clit with before cumming violently herself.\n\nHe shook his head.\n\n'Jeremy,' Donna gasped assuming he wanted her to suck him off after he'd been inside her. It would not be the first time she had done such a thing and she felt a quiver of excitement at the thought of him cumming in her mouth. 'You want to do it in...' she paused as she licked round her lips, 'my mouth, you dirty boy.'\n\nHe shook his head again.\n\n'Where then?' She asked puzzled, wrinkling her nose as she looked into his eyes.\n\nFor a few moments their eyes remained locked, Donna's breasts gently moving in time with her deep breaths. She registered a brief look of bewilderment as eye contact was lost. But then of surprise as she then followed Jeremy's eyes downwards to where he remained deep inside her. \n\nJeremy heard her gasp then saw the look of surprise in her face. \n\n'Sorry... I shouldn't have...' as he slowly slipped out of her. \n\nStill between her legs Jeremy felt her hot breath on his cheek as she belatedly responded, 'it's alright ...I didn't mind you asking, but...' \n\n'I know...'\n\n'I'm just surprised...'\n\n'Sorry...'\n\n'It's okay, you don't have to apologise.'\n\n'I don't know why I ...' his words petered out.\n\n'Is it really something you want to do to me?' \n\nJeremy looked away from her, 'I don't know, I ...' \n\nDonna did not reply instead he felt her calves slowly moving up and down his legs before they gripped him drawing him to her so his penis was sandwiched between them.\n\n'Oh Donna,' Jeremy whimpered.\n\n'I don't know...' Donna said in a whisper as she looked into his eyes. Up until that point she was the one in control, for him to say such a thing had left her confused. She didn't know why she had rubbed the backs of his legs but it felt good to have his throbbing hardness so close. \n\nDonna looked into his eyes again, then downwards at his powerful thighs still between her legs. Stroking his bare chest surprised at how hot it felt under the tips of her fingers. She bit her lip. Her large breasts rising and falling in time with her deeper breathing. Donna could feel her body temperature rising, pinpricks of perspiration began to form in her lower back and between her breasts. But it was her pussy where she felt it the most. It was the thought of him wanting to fill her with his seed, but most of all it was the probability she might let him. \n\nHe made to move away from her.\n\n'What are you doing?'\n\n'I thought...'\n\nShe looked at him for a moment, 'just stay like that Jeremy, it feels so good, you feel so good, I can feel you throbbing against me.'\n\nHe nodded.\n\n'And, I'm thinking about what you want to do to me.'\n\nHe swallowed hard.\n\n'Really thinking. You see I was shocked by what you said, what you want to do to me, but now,' she paused, 'I'm just so turned on, me even though...' she paused for a second time, 'you do know that I'm not on the pill?'\n\n'Yes you said earlier.'\n\n'So you do understand?'\n\n'Yes.'\n\nDonna moaned again.\n\n'What is it?'\n\n'That you know what this could lead to and you still want to.'\n\nHe nodded again. At that precise moment he couldn't care less about the possible repercussions, unloading himself into her pussy seemed the most natural thing to do.\n\n'Oh Jeremy, I want you to, really want you to, but...' Donna lifted up her arm and brushed back her hair.\n\nJeremy stared at her intently before looking down at her pussy and then back up at her before whispering, 'please...'\n\nDonna looked at him then his cock, 'you do really want to don't you?'\n\n'Yes,' he replied, as he leant into her kissing her deeply and slowly and in doing so pressing the head of his cock against her.\n\n'Oh Jeremy,' she moaned, before she said quietly to herself, 'it should be okay.'\n\nJeremy responded with a gasp of surprise.\n\nAnd to leave him in no doubt Donna took a deep breath before giving a gentle nod of her head.\n\nJeremy groaned, his chest rising and falling and his face becoming increasingly flushed. 'You'll let me? \n\n'Yes.' Donna looked him up and down, she was so turned on. She could not explain why, was because the things he had done were beyond her wildest expectations. Or the fact it would be his first time cumming inside a girl?\n\nDonna ran her hands over his torso before stroking the snake of hair which went up from his groin. Her hands ran down his back then up again her nails gently grazing his hot skin. Finally she dug her nails into his back pulling him closer so their faces were only inches apart. Staring intently at him, 'fuck Jeremy I want you so much.'\n\nJeremy nodded not believing what was happening\n\nDonna moaned as she reached between them and took hold of his cock, hard throbbing and sticky with her juices. 'Mmm, tease me first though.'\n\n'How?'\n\n'Rub yourself up against my clit.' \n\nHe nodded as gripping his cock he began to slide it over her clit, up, down and round in circles.'\n\n'Oh Jeremy, pinch my nipples just like you did earlier.'\n\nJeremy gently circled a nipple with his free hand before squeezing it between his fingers. \n\n'Harder,' she instructed as she felt a direct current to her pussy. 'Oh yes that's good Jeremy.' Then taking hold of his hand that was on her nipple and whispering, 'Jeremy, oh please now.'\n\nJeremy moaned, knowing what she wanted but continuing to rub his knob against her clit. \n\n'Oh Jeremy, stop, stop teasing me.'\n\nHe deliberately ignored her as his swollen leaking knob continued to dance over her clit.\n\nDonna moaned again in frustration before she took hold of his penis and adjusting herself so it was pointed directly at her opening. She then circled her ankles round his legs pulling him forward so he was an inch inside her. She moaned as his bare skin stretched her lips. But she wanted him properly inside her, so in a swift movement she placed her hands either side of her on the massage table and pushed herself forward thus impaling herself on his penis.\n\nJeremy gave a long soft moan before kissing her, and whispering in her ear, 'you are sure?'\n\nDigging her nails into his back Donna replied huskily, 'mmm.' \n\nJeremy slowly pulled right out of her his cock now drenched with her juices.\n\n'Back inside me, I want you back inside me.'\n\nJeremy nodded his face contorted with pleasure.\n\n'Oh yes, Jeremy, nice and slowly until...' she paused, 'just don't stop.'\n\nAs he slowly slid into her Jeremy looked down at his penis, observing how it was becoming wetter with every stroke. Its base contained a froth of her juices. \n\n'Oh fuck Jeremy,' she cried, 'pinch my nipples.'\n\nJeremy obeyed her instruction.\n\n'Ohhh,' Donna groaned at the sensation, 'oh yes, can you feel that?'\n\n'Yes,' he grunted as her pussy clamped around him, before he pinched them again.\n\nDonna yelped in a mixture of ecstasy and pain.\n\nJeremy did not apologise instead he kissed her hard on the lips, his slippery tongue then invading her mouth. He'd had a dull ache in his balls, but not any longer as he could feel his orgasm start to rise. Pulling away from her lips he moaned, 'Donna,' as he expected her to change her mind. \n\nInstead she looked at him, nodded, smiled, 'I know.'\n\n'I'm...'\n\n'It's alright...' and to leave him in no doubt she pushed herself further onto him.\n\nHe left out a deep moan before spluttering, 'you sure?'\n\n'Yes,' she hissed, 'yes, yes.' As she brought her hand down to her clit.\n\nA split second later he proclaimed, 'oh Donna, Donna, oh, I'm cumming.'\n\nThose two words sent Donna over the edge as an intense orgasm tore through her.\n\nMeanwhile, Jeremy repeated her name over and over as his body convulsed and his cock began to spit out it seed. As he pumped deep inside her Jeremy felt utter helplessness akin to being at the edge of a huge precipice as the enormity of what he was doing belatedly hit him.\n\nDonna gave a groan of satisfaction as she felt his cum flood her pussy. She had expected a couple of spurts at best but she felt jerk after jerk against her.\n\nThey remained locked together, breathing heavily. Jeremy could not believe how wet he had made Donna's pussy.\n\nEventually Jeremy slowly slipped out of her, his body covered in a sheen of sweat. His wilting penis sodden with their combined juices. He looked at Donna then down at her pussy, as a few moments later a dribble of his cum made its way out of her. 'Oh Donna, sorry...'\n\nShe smiled as she responded, 'thanks for the tip,' before saying in a quieter tone, 'it should be alright.' \n\nBut as she got off the massage table and rubbed her tummy she experienced the first seeds of doubt."
    ],
    "authorname": "stevetruestories",
    "tags": [
        "massage",
        "shower",
        "bareback",
        "impregnate",
        "topless",
        "spanking",
        "reluctant",
        "busty"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-salon-ch-02-1"
}
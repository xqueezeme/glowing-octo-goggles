{
    "title": "Poor Becca Ch. 04",
    "pages": [
        "Authors note:- This is a sequel to Ch.3 so I strongly suggest you read all previous chapters in the \"Poor Becca\" series before reading this, or you will not understand the plot or characters. \n\n***** \n\nMy phone sat on the breakfast bar in front of me. It was begging for me to send the message. I was nervous as I sat there holding the black business card in my hand. The fifteen digit number starring up at me, in white lettering. The small writing underneath which read:- \n\n'Text your name to this number and wait to be contacted' \n\nI had butterflies in my tummy. \n\nI put the card down and made a cup of tea. My mind was racing. Only four weeks had passed since my punishment, by Lexa, with my sister. I still felt dirty and guilty about what we had done to each other and couldn't face seeing my sister, Amy. The thoughts came rushing back to me as I stirred my tea. The image of me fingering my sisters asshole and pussy to get her off, before she took a cock in her ass, were haunting me. It was a depraved act, but still gave me a stirring in my underwear that I couldn't control. Amy was an anal queen and I was jealous of her abilities. She had been the centre of attention, last time I was with Lexa and I was more of the warm up act,. I wanted to outdo her, as we had always been sibling rivals, but anal wasn't my thing. Lexa had said I could contact her and go to their film studios, voluntarily, for training or unattached raw fucking whenever I wanted. \n\nI sipped my tea starring at the breakfast bar, the phone, the card. They were calling to me. \n\n\"Fuck it,\" I said out loud and picked up the phone. \n\nI thumbed in the number and typed my name \"Becca\" and hit send before I could change my mind. I threw the phone back on the bar and sat back drinking my tea. I felt excited and apprehensive, the tingling in my knickers was back with a vengeance. \n\nBing! Bing! My phone buzzed on the counter top. \n\n'Shit that was quick,' I thought \n\nI picked it up. The screen read:- \n\n'2330 Silver people carrier. South end of your street' \n\nNow I really was nervous. \n\nBing! Bing! It buzzed again. \n\n'No food after 1600, use the bathroom before you leave.' \n\nI didn't feel like eating anyway. The last three times I'd been with Lexa it was after being drugged and taken there against my will. Now I was willing. I thought I must be going mad to go there voluntary. \n\nI was still seeing my girlfriend, Jemma, who knew some of the details, but not about the last encounter. I kept it secret, not wanting anymore repercussions that might affect her or my family. Our relationship was deteriorating , due to her always working away pursuing her career. When we did meet up we were great together, but it was becoming less and less often. Sex with Jemma was sensual and loving, but having her fingers inside me wasn't enough. I wanted to feel filled by a man's hard throbbing cock. I wanted to improve my sexual skills and I thought I had gone as far with women as I could. I wanted to feel powerful and have more control over men and thought sex was going to be my greatest weapon. \n\nI was unsure about Lexa's overall intentions. I thought she had a crush on me, but it could all be an act with her, to get me to participate willingly. I guess I would soon find out., but whatever happened, I would improve my prowess in the bedroom. \n\nI waited in the darkness at south end of my street at eleven twenty five. Winter had taken hold and there was a chill in the air. I had showered and used the bathroom as instructed and hadn't eaten since three o'clock. I was wearing black yoga pants, knee high fur topped boots and a fleece and body warmer. I had Lexa's black lace panties on, and hoped they would get a reaction from her. I wore no bra and my nipples were already hard from the cold. \n\nA silver vehicle approached at exactly eleven thirty and the door slid open as it drew to a stop. A guy in a black suit held out his hand and helped me aboard. He slid the door shut and the people carrier sped off. He passed me a white satin sack and put it over my head and pulled the draw string. I could see nothing, but the glow of street lights. No one spoke. \n\nWe drove for an hour, only stopping for what I thought, must be traffic lights. We finally slowed down and went through a series of check points, it must have been security. I heard the rattle of a shutter door opening and the van drove inside, closing the shutter behind us. The door slid open and was gently guided through some doors and corridors into a warm room. \n\nMy bag was removed from my head and I squinted in the brightness as I tried to adjust to the light. I was in, what looked like, a plush hotel room. A double bed, ensuite bathroom, comfy chairs, a whole wall of mirrors and a mirrored ceiling. There were no windows. The bodyguard left me, without saying a word. It felt weird to be back there, under my own steam and my stomach was in knots with anticipation. \n\nThe room was hot, so I took my body warmer, boots and fleece off and sat on the edge of the bed, in my leggings and crop top. I looked in the mirror and admired my full boobs standing proud without support. \n\nA few seconds after getting comfortable, Lexa came in. She too was wearing yoga pants, but they were grey. She had a loose fitting T shirt on, also grey, slipping off her left shoulder revealing her flimsy bra strap. She was barefoot and looked sensational. She smiled at me as I stood to greet her. \n\nWe hugged and kissed each other's cheeks, all very formal and European, except for her playful squeeze of my ass. \n\n\"So lovely to see you again,\" she said. \n\n\"You too Miss Lexa, you look amazing,\" I replied. \n\n\"Thank you Becca. It does show my ass off quite well, doesn't it?\" she lifted her heel and turned to show me her butt. \n\nIt was perfectly round with the material of her yoga pants going into the crease of her cheeks. It was as though they were painted on and left nothing to the imagination. I'm sure she wasn't wearing any knickers, as there was no panty line showing through. \n\nI turned to her and did the same. \"Yoga pants do show off your ass well, that's for sure.\" I said. \n\nShe smacked my ass, quite hard, with a loud slapping noise. I flinched. \n\n\"I see you've stayed in shape,\" she laughed. \n\n\"Thank you, I do try.\" \n\n\"Now... let's get down to business, what brings you back here?\" she said, sitting on the bed and gesturing for me to do the same. \n\n\"I thought about what you said...before I mean...about wanting more than women.\" I replied, sitting next to her. \n\n\"Go on.\" \n\nI was struggling to get my words out. I just wanted to kiss her. \n\n\"You know what I mean.\" \n\n\"I need to hear you say it.\" \n\n\"I need cock Miss Lexa.\" I said, shamefully, \"I miss having a cock inside me, I miss sucking off men, tasting their cum, you know what I mean.\" \n\n\"Anything else?\" she was very business-like. \n\nI thought for a brief moment. I couldn't bring myself to say it. \n\n\"No.\" \n\n\"Are you sure?\" she asked looking me in the eye, \"You don't want to try something new? Something naughty? Something dirty? Something your sister can do, that you can't'?\" \n\n\"No,\" I lied, I couldn't say the words. \n\n\"OK. I can set you up with a few men next door, to fuck you if you like, on film of course, it's not a free service.\" \n\n\"Yes. That would be great thank you,\" I had trepidation in my voice, wanting to tell her more. \n\nShe got up and started to walk off. \n\n\"Wait!\" I said quickly. \n\n\"Yes,\" she said, turning to look at me and stopping in her tracks. \n\n\"There is something else.\" \n\n\"What is it?\" \n\n\"It's hard for me to say.\" \n\n\"Just say it Becca, we're all friends here.\" \n\n\"Can I try anal sex? Will you teach me?\" I heard the words and couldn't believe it was me saying them. I felt instantly embarrassed. \n\nShe came back and sat back on the bed, putting her hand on my knee and staring into my eyes. I was lost for a second or two and felt as though she was staring into my soul. \n\n\"Of course you can, sweet girl,\" she said, softly, \"I thought this may be the reason you contacted me. Why the change of heart?\" \n\n\"We'll it's like you said, I need more than just pussy. I want to offer men a greater range of sexual skills. I love to please my lovers and I find it quite powerful to feel control over them, by using sex to get what I want.\" \n\n\"If it's control over men you're after, I can teach you a lot more than anal.\" \n\n\"One step at a time.\" I smiled, \"Besides I want to be as good at it, as my sister is. Call it sibling rivalr or something, I can't explain it.\" \n\n\"You don't need to, I fully understand, she was centre of attention and stole the limelight from you during our last encounter. It was written all over your face. Poor Becca likes to be the star.\" \n\n\"Maybe. I just don't know. Soooo...will you teach me?\" \n\n\"If I do, it's by my rules and I want something in return.\" \n\n\"Like what?\" \n\n\"A film of course. I'll teach you here, in this comfy bed and then take you to the studio to take cock in the ass properly.\" \n\nI thought about it for a few seconds, already starting to feel horny at the thought of trying something new and unknown. \n\n\"As long as the cock I take isn't too big.\" \n\n\"Cocks Becca,\" she said, emphasising the plural, \"It will be more than one guy, but I promise they will not be huge.\" \n\n\"How many?\" I asked, sounding surprised. \n\n\"You'll have to wait and see.\" \n\n\"OK. It's a deal,\" I said. \n\n\"OK then, \" Lexa said, \"Get comfortable and I'll be back in a few minutes.\" \n\nShe got up and headed for the door. I was mesmerised by her ass, as she wiggled out of the room with the slightest of wobbles. \n\nAbout five minutes later she returned, dragging a small silver suitcase, on wheels, behind her. It looked like the sort of thing you'd take on a short haul flight as cabin baggage. \n\n\"Are you moving in, or something?\" I asked jokingly. \n\n\"Not quite Becca,\" she smirked. \n\nShe lifted it onto the bed next to me, unzipped it and folded the lid back. I got up and stood next to her intrigued to know what was inside. At first it was her usual clothing, black skirt, white blouse, ankle boots, underwear, toiletries and makeup. \n\n\"I'll get changed before we go to the studio,\" she said, pulling them out and putting them on one of the chairs, neatly. \n\nUnderneath that was a towel which she folded back revealing an array of sex toys. There were a couple of vibrators, bullet vibes, dildos of differing sizes, lube and something that looked like a balloon with a spout on the end, and other items I couldn't make out, obscured by the towel. She picked up the balloon and the lube first. \n\n\"Sorry Becca, but we're going to need you clean inside and out for anal play,\" she squeezed the balloon and a puff of air was expelled from the spout. \n\n\"An enema?\" I asked. \n\n\"Douching,\" she replied, \"but yes its similar.\" \n\n\"Will it hurt?\" \n\n\"No, actually the opposite, some people find it very pleasurable. Did you use the bathroom before you left.\" \n\n\"Yes, but I could do with a pee to be honest, must be all the excitement and nervous energy.\" \n\nLexa smirked again. \n\n\"Let's go to the bathroom shall we?\" \n\nI followed her to the ensuite, it was plush and modern with lots of chrome and glass. There was a shower, double sink and toilet. The walls were covered in dark grey tiles, as was the floor. \n\nI suddenly felt shy and nervous. \n\n\"You should pee first,\" she said, gesturing to the toilet, \"then we'll get you nice and clean.\" \n\nI just stood there. I don't know why, but I didn't like the fact I was going to pee while she was watching. \n\n\"Don't be embarrassed Becca, I know you intimately already. Just sit down.\" \n\nShe came closer and kissed me softly on the lips, slipping her fingertips inside the waistband of my yoga pants. I started to kiss her back, but she pulled away, dropped down and took my yoga pants with her. She pulled them down to my ankles and stood back. I was stood in front of her wearing my crop top and her black lace knickers. She had given them to me a souvenir a few months ago. \n\n\"My panties look good on you,\" she giggled, \"very sexy, but take them off and sit on the toilet.\" \n\nI peeled them down and they joined my yoga pants. I sat down on the toilet as she moved down and knelt in front of me. She pushed my legs apart slightly and started to kiss me again, forcing her tongue gently into my mouth. \n\n\"Pee,\" she whispered, looking down between my legs. \n\n\"Is this turning you on?\" I asked, a little shocked. \n\n\"Immensely,\" she replied, \" it's just a little fetish of mine.\" \n\nShe kissed me again, her hands exploring the top of my thighs. \n\nI concentrated hard and tried to go, but couldn't. \n\n\"Stop tickling me, I can't do it if you're tickling me,\" I squirmed. \n\nShe stopped and I tried again, as she kissed my neck. \n\n\"Just relax,\" she said, seductively. \n\nI let my mind wander and it finally started to trickle out of me. There was the familiar tinkling sound as my pee hit the water. I relaxed further and it started to hiss as my flow increased. \n\nLexa let out a moan of satisfaction as she looked between my legs. \n\n\"Mmmhhhhhh, there you go. Good girl, I knew you could do it,\" she said, sounding like a school teacher. \n\nShe pushed my legs further apart for a better look. \n\n\"Wow, you really needed to go, didn't you?\" \n\nMy pee stream started to slow until the last of it dripped from my labia. \n\n\"All done?\" she asked. \n\n\"Yes,\" I replied, feeling relieved and a little weird about the whole thing. \n\nShe reached over for the toilet paper, tore a few sheets off and wiped my pussy, gently, looking into my eyes and smiling. \n\n\"Good girl,\" she said \n\n\"You really get off on this, don't you?\" I asked. \n\n\"Yes, watersports can be a lot of fun, but that's not why I'm doing it.\" \n\nI looked puzzled. \n\n\"I need you to be able to relax certain muscles in your body. This is part of your training. You were able to relax your bladder muscles even while I kissed you. I'm going to need you to relax your anus, in pretty much the same way, so I can insert things into your ass.\" \n\nI nodded and must of looked worried. \n\n\"Its fine,\" she continued, \"your anus has two rings of muscles, an outer ring and an inner ring. The outer ring is the one you can twitch when you clench, but the inner one is more difficult to control. You need to be able to relax the inner one, in order to take a cock in the ass without it hurting. Do you understand?\" \n\n\"I think so.\" \n\n\"Good, turn round and sit backwards on the toilet so you're facing the wall. Stick your ass over the edge of the seat.\" \n\nI did as I was told, kicking off my knickers and yoga pants from around my ankles. \n\nShe picked up the balloon and filled the sink with warm water. She tested the temperature and then plunged the spout of the balloon under the water and squeezed the balloon. When she let go the balloon filled with water. She repeated this until it was full. She opened the tube of lube, applied some to the spout and then came over to me. Her fingers were covered in lube, which she applied to my anus, gently rubbing it in. The sensation made me flinch and a shiver went up my spine. \n\n\"There are thousands of nerve endings here,\" she said, rubbing in the lube, \"that's why anal feels so good, once you get used to it.\" \n\nI nodded nervously over my shoulder. \n\n\"I'm going to put the spout inside you now. Relax your muscles , as though you are going to the toilet.\" \n\nI relaxed as much as I could, just like when I peed in front of her. I felt the spout touch my ass and moved away. \n\n\"Relax,\" she said again. \n\n\"I'm trying,\" I replied, regaining my composure, \"OK. Try again.\" \n\nShe pushed the spout against my slippery butt hole until I felt it slip inside a small way. \n\n\"That's the outer ring,\" she said, \"stay relaxed, the inner one always feels a little tighter.\" \n\nShe pushed further and I felt my anal muscles tighten and then yield as the spout entered my body. \n\n\"It's inside you Becca. How does it feel? Are you alright?\" \n\n\"Fuck, that feels weird,\" I said, \"Not painful, just unusual.\" \n\n\"It's never as bad as people think it is, as long as they relax. That's the hard bit over. Stay relaxed I'm going to fill your ass with water.\" \n\nShe squeezed the balloon and I felt the strangest sensation of my ass filling with warm liquid. \n\n\"Oh my god,\" I couldn't help but let out a small gasp. \n\n\"Feels nice doesn't it?\" she said, continuing to fill me. \n\n\"Strange,\" I replied, \"but nice too, yes.\" \n\n\"Ooooh, I think she likes it,\" giggled Lexa, \"If you like this feeling, imagine how nice it feels when a guy cums in your ass? It's incredible.\" \n\n\"I bet,\" I gasped. \n\n\"Almost done,\" she said, giving the balloon a final squeeze, \"stay relaxed, just like that, I'm going to pull it out.\" \n\nShe started to slide the spout out and I felt my ass gripping it, not wanting to let it go. \n\n\"Relax,\" she said, encouragingly. \n\nI finally felt the spout leave my body and my asshole shrank back to keep the water inside me. \n\n\"Try and keep it in for a few minutes,\" she said, \"There'll be an urge to expel it soon enough, turn back round on the toilet and let it out when you feel the urge.\" \n\nShe gave me a loving pat on the ass, got up and put the balloon into the sink. I turned back round on the toilet so I was facing her. I could feel the liquid, trying to vacate my ass, but I clenched and held it in. \n\n\"Anal is a beautiful thing Becca with a very intense orgasm, if it's done correctly, \" she said, continuing to educate me, \"a guy ramming his cock up your ass isn't the way to go. Once you've expelled that water, we'll start and warm you up slowly. The anus won't self-lubricate like your pussy does, so we'll be using a lot of lube.\" \n\nShe stood in the bathroom and took her top off and threw it on the towel rail. She was so attractive, standing there in a lace bra and grey yoga pants. She flicked her long hair back and smiled at me. \n\n\"I got a little hot,\" she said. \n\nI looked her up and down and gasped open mouthed. There was a huge dark grey wet patch in between her legs. She had got so turned on doing this to me, she'd soaked through her clothing. \n\n\"What's wrong\" she asked, looking down at her wet crotch. \n\n\"Ooops,\" she giggled, \"looks like a might have a got a little wet down there. Maybe I should have worn panties.\" \n\n\"I don't think panties would have soaked that up,\" I said, aghast, \"you're absolutely drenched.\" \n\n\"I told you I got off on it,\" she said pulling her pants tight against her crotch, showing me her feminine bulge, \"besides I bet you've got wet too.\" \n\n\"Why don't you come and find out?\" I said, opening my legs and sitting back against the wall. \n\nShe shuffled over and pushed her hand down, touching my pussy. She spread my lips open with her fingers and slid one inside me. \n\n\"You're fucking dripping wet, you dirty girl,\" she sighed, \"looks like I'm not the only one getting off on it.\" \n\n\"Oh fuck,\" I said, \" I think it's time.\" \n\nI pushed her hand away and leant forward, squirting water out of my asshole. \n\nLexa burst out laughing and looked behind me at my ass fountain, squirting into the toilet. \n\n\"I told you, you'd feel the urge,\" she laughed. \n\nMy ass continued to expel the water until I was empty. Lexa grabbed a wash cloth, wet it in the sink and passed it to me. \n\n\"Make sure you're empty and nice and clean,\" she said, \"and then come into the bedroom.\" \n\nShe walked into the other room as I washed my ass and pussy, giving a final push to expel any water that was left inside me. \n\nI whipped my crop top off, checked myself in the mirror and followed Lexa into the bedroom. \n\nShe was kneeling upright on the bed with a tube of lube and two bullet vibes next to her. \n\n\"All clean and fresh?\" she asked, looking at my naked body. ",
        "\"Mhmmmm,\" I moaned, seductively. \n\nI got on the bed and mirrored her position, kneeling in front of her. I kissed her softly, putting my hand to her cheek. My other hand reached round her back and unclipped her bra with a snap of my fingers. Her tits sprang free with a soft moan from her lips. She wiggled the bra off her shoulders and threw it towards the door. I felt her tits jiggle and brush against mine as she pulled my closer and explored my mouth with her tongue. It was warm and wet and we fought for domination, gently biting each other's lips. Her boobs were soft and smooth against mine, as we bumped them into each other. \n\nI suddenly felt a buzzing between my legs and realised that she'd got a bullet vibe and was trying to locate my clit. I opened my legs for her and she found my sex button straight away. \n\n\"Let's get you nice and relaxed Becca,\" she whispered, pushing the vibe onto my clit harder. \n\n\"Fuck I'll cum quickly if you keep that up,\" I said. \n\n\"Not yet,\" she said, moving the vibe down across my lips and into my pussy. \n\nShe moved it slowly in and out and then back up my dripping slit, stopping short of my clit. \n\nWe continued to kiss as she moved the vibe slowly up and down my vulva, teasing the entrance to my hole and teasing my throbbing clit. I felt ready to explode. She took the vibe lower, past my hole and onto my perineum, getting dangerously close to my asshole. My cunt was leaking constantly now and her fingers and the vibe were coated in my juices. She went lower still, gently teasing my ass hole. This felt unbelievable as the vibrations hit my anus giving me a whole new sense of pleasure. \n\nI stopped kissing her and threw my head back. \n\n\"Oh...My...Fucking...God,\" I gasped, as she kissed my neck. \n\n\"Feels good doesn't it?\" \n\n\"Fuck yeah.\" \n\n\"Are you going to cum already Becca?\" \n\n\"I'm getting there. Put it back on my clit.\" \n\n\"Not yet. Roll onto your front and stick your ass in the air,\" she ordered, throwing three pillows at me. \n\nI rolled over and pushed the pillows underneath me and laid on top of them. My ass was pushed high and I parted my legs for her. She shuffled up to me and spread my ass cheeks apart. I felt her breath against my exposed holes. She kissed me gently, first on both cheeks, then my perineum, then on my anus. It felt amazing. She held my cheeks apart and softly licked my asshole, delving her pointed tongue inside my star shaped outer hole. \n\n\"This is so dirty,\" I gasped, \"the things you do to me.\" \n\nI could hear the vibe buzzing and looked round to see where it had gone. Lexa had it stuffed between her legs, right against her bulging yoga pants, which were now even darker in colour. She was juicing up inside her clothing even more than before. She was loving this as much as me. \n\nShe reached across and picked up the lube, squeezing it directly onto my ass. She took the vibe from between her legs and put it against my anus. \n\nIt was like an electric shock up my spine. \n\n\"Relax, I'm going to fuck your ass with it,\" she whispered. \n\nI felt it push into me, through the puddle of lube and into my outer hole. She didn't stop this time, she pushed it straight in. I squealed a little as it was bigger than the balloon spout. \n\n\"Relax,\" she said again. \n\n\"Ow,\" I squeaked. \n\nIt felt like my ass was on fire, it was stinging, but the vibrations were definitely helping. She stopped moving, to let me get used to it. \n\n\"How is it?\" \n\n\"A little painful, but it's a nice pain.\" \n\n\"The pain will pass,\" she said, kissing my ass cheek, \"just sit there a minute and get used to it.\" \n\nShe was right, the pain was getting less and I felt more relaxed. The vibrations were strong and a new feeling for me in such a forbidden place. \n\nLexa reach over and picked up the other bullet vibe. She switched it on and rubbed it along my silky smooth slit. She avoided my clit and teased my fuck hole with it. \n\n\"Fuck! That feels so good.\" \n\nShe pulled the vibrator from my ass slowly and then back in, stating to fuck me with it. I felt like such a slut, lying in this position with my fuck holes exposed to her, while she violated my body. \n\n\"How's it feel now?\" \n\n\"Better,\" I said \"less painful. \n\n\"A little longer with this and then we'll try something bigger,\" she said. \n\nShe fucked my ass hole slowly with the bullet, continuing to tease the entrance to my cunt. I was so turned on I was dripping onto the bed sheets. It was different to having my pussy fucked. It was a slow intense build up of raw filthy sex. I thought it was very psychological having her do this to me. It was like being dominated in the best way possible. She was in total control of my most intimate areas, one of which had never had anything inside it. It was almost like being a virgin all over again. She was gentle, even though she was doing such a disgusting act. \n\n\"Wow, I've certainly got your cooch nice and wet,\" she said, \"and this vibe slips in and out of your ass with ease now. Time for something slightly bigger.\" \n\n\"Go slow,\" I begged. \n\n\"I will, don't worry,\" she whispered, \"How about this?\" \n\nShe removed the vibe from my ass and I felt her pushing two fingers inside me. \n\nThey slipped in with ease, up to her knuckles and I gasped and breathed deeply as she stretched me open. It was painful again, but in a nice erotic way. \n\n\"Is that OK?\" she asked. \n\n\"Yes, its fine.\" \n\nShe slowly withdrew and then started to fuck my ass with them. Each time she slid them in she held her fingers close together. When she pulled them out she spread them slightly, stretching my anal muscles. Her expertise was sensational as she slowly stretched my hole bigger, like stretching an elastic band to take the tension out of it. She was actually massaging my anus and it felt like nothing on earth. \n\n\"That's it Becca, good girl, let me loosen up your tight little hole, relax into to it, enjoy the feeling of my fingers in your ass.\" \n\nI felt the first glimmer of an orgasm since she started her assault on my ass. Only slight, but it was there. \n\nShe slipped her fingers out and quickly went to her case and fetched a dildo. It was a replica cock of average size, maybe six inches long and an inch or so thick. It had fake balls and the whole thing was made of a rubber material. She lubed it up and pushed it up against my butt hole. \n\n\"Ready?\" she asked. \n\n\"Mmhhhmm,\" I nodded, actually wanting it in my ass. \n\nShe pushed in quickly in one stroke as I took the bigger shaft, balls deep. \n\nI screamed out in pain, as my anus stretched further than ever before. I pushed forward on the bed to try and get away from it, but she kept the pressure on and it stayed inside me. \n\n\"Take the pain,\" she said, \"enjoy it, it will pass.\" \n\nI lay there not moving, my eyes watering at the intense burning sensation. \n\n\"Fuck! It's too big. Take it out. Take it out,\" I panted. \n\nShe kept it there. \n\n\"Relax, it will go off on in second.\" \n\nShe was so gentle and concise, like she'd experienced this a thousand times. With every passing second the pain got less and it felt more bearable. \n\n\"Better?\" \n\n\"Yes, I think so,\" I panted, breathing long and deeply. \n\n\"Push your ass back up to me,\" she said. \n\nI obeyed and got back to my doggy position. Lexa move up behind me and positioned the dildo on her pubic bone, as though it was part of her own body. \n\n\"I'll hold it still and you can pull forward,\" she said reassuringly, \" I want you to fuck yourself with it, as if it were my cock.\" \n\nI pulled forward with Lexa holding the dildo in position and it started to withdraw from my ass. The feeling was indescribable. \n\n\"Stop,\" she said, as it almost slipped out, \"now push back to me.\" \n\nI pushed back towards her arching my back and taking the pain as it spread me open and slid back in. \n\n\"Ow fuck!\" \n\n\"You've got to relax more Becca sweetie. That's why it's hurting. Relax as though you're back on the toilet.\" \n\nI pulled forward and again and straight back. It felt a little easier and more pleasurable. \n\n\"That's better, do it again.\" \n\nI repeated it, as I started to feel more comfortable and my ass seemed to accept the foreign object I was forcing inside it. \n\n\"Wow, that feels better,\" I said, sliding it out and back in again. \n\nShe poured more lube onto my ass. \n\n\"Can I fuck you with it now?\" she asked. \n\n\"Yes, but please be gentle.\" \n\nShe moved forward into me, driving the cock into my super tight passage. It felt so fucking dirty to have her defile my ass. She reached for the bullet vibe and pushed it against my labia. I felt how dripping wet I was as the vibrations got nearer to my clit. She pulled away again, and the cock slid out about half way, then she pushed back in. It felt so good and her attention on my pussy lips was driving me insane. \n\n\"We're almost done with the training,\" she said, \"just one more thing to try.\" \n\nShe pulled back and the dildo slipped out of my ass. \n\n\"We need to get you used to the initial penetration,\" she said, \"men love sliding it all the way out and then watching your hole expand and feeling it grip their cock as they ass fuck you.\" \n\n\"OK,\" I said, \"I'll give it a try.\" \n\n\"Reach back and spread your cheeks for me.\" \n\nI reached back with both hands and spread my butt cheeks, as the vibe continued to give me pleasure. She pushed into me in a long slow stroke and then all the way back out again. It felt tight, but I managed to control my muscle spasm and keep relaxed. \n\n\"Is that Ok Becca?\" \n\n\"Mmmmmm do it again.\" \n\n\"Oh I think the dirty bitch likes it,\" she giggled. \n\nShe pushed it back into me, I felt my hole expand and then contract as she withdrew it. She did it again, faster and harder this time. I felt the flicker inside my belly and knew I was getting close to climax. \n\n\"Fuck, that feels so good,\" I gasped, no longer thinking about the pain. \n\n\"I told you there's a lot of nerve endings down there, didn't I? Feels like nothing else, does it?\" \n\n\"Put that vibrator on my clit and I think I'll cum,\" I said in between her thrusts. \n\nShe was now fucking me hard and deep, occasionally pulling right out and then forcing my asshole open again as she pushed into me. \n\n\"Do you want to cum Becca?\" \n\n\"Fuck yes, make me cum, fuck my ass.\" \n\n\"You fucking dirty little anal whore,\" she cursed, \"take that cock in your ass.\" \n\n\"Please play with my clit, make me cum,\" I panted. \n\n\"Not yet bitch.\" \n\n\"Please put the vibe on my clit, make me cum.\" \n\nShe pulled the cock out of my ass, removed the vibe and stopped. \n\n\"No! Put it back in, I'm so close, Don't stop. Fuck my ass.\" \n\nShe drove the cock back into me, balls deep and at the same time pressed the vibe against my throbbing clit. My reaction was instant as my orgasm struck me like lightning. I squealed into the bed sheets as my ass and pussy contracted over and over. She kept fucking my ass and pushed the vibe against my clit even harder. This sent stronger vibrations through my body and I squealed again, gushing cunt juice all over her hand. It was dripping out of me in a constant river wetting my thighs. I thought I would pass out from such extreme pleasure. She finally released me and I flopped forward onto the bed and the dildo slipped out of my swollen ass. \n\n\"Holy fucking shit!\" I gasped. \n\nI lay there convulsing on the bed, gripping the sheets in my fists, panting like a dog. \n\nI heard Lexa giggling behind me, obviously very pleased with herself. \n\n\"Fucking hell Becca, you came like a waterfall. I told you it was and intense climax, from anal.\" \n\nI lay there with my eyes closed, trying to recover. \n\n\"You're going to be great on film, taking four cocks in the ass.\" \n\nI heard what she said, but I was in the afterglow of a mind blowing orgasm and didn't care. \n\nShe moved over and knelt next to me with my head between her legs. \n\n\"Are you alright?\" she asked, sounding concerned. \n\n\"Mmmmhhhmmmm,\" I murmured, \"Amazing.\" \n\nShe brushed the hair from my cheek and I opened my eyes. I had a perfect view between her legs. She was utterly soaked, through her yoga pants. She must have virtually had an orgasm, herself. I put my head on her thigh and got a sniff of her pheromones emanating from her overheated cunt. \n\n\"You smell amazing Miss Lexa. Have you cum in your pants?\" \n\n\"Not far off,\" she sniggered, \"I get super wet when I make a girl cum.\" \n\n\"You're not kidding,\" I said, \"I'd love to taste you.\" \n\n\"Not right now dirty girl. You did really great Becca. You listened to my instructions well. Like I said, it's all about relaxing and stretching your muscles slowly.\" \n\n\"Thank you,\" I said, closing my eyes again. \n\n\"No need to thank me,\" she said, getting up, \"You can thank me by coming next door and taking a proper cock in the ass. I have a treat set up just for you.\" \n\nShe went over to her case as I sat up, feeling light headed. \n\n\"Is my asshole back to normal?\" I asked trying to see for myself. \n\n\"Of course it is, stupid girl,\" she replied, \"It wasn't stretched that far.\" \n\nI watched as she slid her wet yoga pants down. She did it so slowly, that her gooey pussy juice clung to the fabric and left strings of her cum clinging to her legs. I'd never seen a woman get so wet from pleasuring another person. She really had got off to it. \n\nShe saw me looking and shrugged, as she stepped out of the pants and left them in a wet heap on the floor. I swear I could smell her scent from three metres away. \n\nShe picked up her skirt and slipped it on, without panties. She winked at me. I giggled. She put her bra on and her white blouse and went to the bathroom. I sat on the edge of bed waiting for her. She was gone a few seconds and came back looking pristine once more. Her hair was immaculate and she'd obviously wiped between her legs as the slimy mess was gone. She was dressed and ready for filming. I guessed the training was over. \n\n\"I can't go in there looking a mess. Can I?\" she laughed. \n\n\"You're still leaking,\" I said, looking at the dribble of her juice running down the inside of her leg. \n\n\"Fuck it! You see what you do to me Becca,\" she said, \"You've got me all wet and horny. I might as well put my lubrication to good use.\" \n\nShe went to her case and pickup up a silver object. It was about three inches long and looked like a miniature torpedo. I recognized it when she got nearer, it was metal butt plug. It was shaped like a tear drop, tapered one end, then fat in the middle and then wasted in at the neck with a flat section at the other end. The flat end had a red coloured gem stone in the shape of a heart. \n\nShe put one leg on the bed and bent forward, holding the butt plug out to me. \n\n\"Would you mind, sticking this in my ass Becca?\" she asked, lifting her skirt to allow me access, \"Stick it in my pussy first to lubricate it, it seems a shame for my juices to go to waste.\" \n\nI took the plug from her. It was super smooth and felt cold and heavy. The fat section looked wider than what I had taken in my ass, but the wasted section was only thin. I put it against her wet cunt and pushed. Her fuck hole sucked it inside after it got past the fat taper. There was very little friction and it slipped in easily. I twisted it around to coat it in her slime and then pulled it out with a loud sucking noise as her pussy let it go. \n\n\"Do I just push it in your ass?\" I asked, lining it up with her puckered, pink hole. \n\n\"Yes its fine. I've had bigger things than that in there,\" she laughed, \"I like the feeling of it inside me, holding me open. I may as well get some pleasure while you're taking an ass fucking.\" \n\nI pushed hard and watched her butt hole spread open further that it should. She didn't even flinch. \n\nI kept pushing until her ass hole gave way and pulled it inside. It was mesmerising. She picked up the towel, hitched her skirt up at the front and spread her pussy lips open. She was still dripping wet. She used the towel to dry herself, pushing the material inside her cooch to mop up as much as she could reach. \n\n\"That should keep it from dripping for a while,\" she said, \"I really don't like wearing panties, I like to feel free down there. Besides I want to have some fun myself.\" \n\nShe moved off the bed and bent over in front of me, showing me the gem stone poking out from between her crack. \n\n\"Fuck! That's sexy,\" I said, under my breath. \n\n\"Glad you like it,\" she replied, moving back to the case, \"I've got one for you too.\" \n\nShe produced another silver butt plug from the case. This one was different to hers. It had a long furry tail attached to it. The tail was black and about two feet long. \n\n\"Bend over,\" she commanded. \n\nShe lubed it up as I bent over and put one leg on the bed, parting my cheeks. I felt the cold steel against my anus and she pushed it in. It slipped inside me and I felt my ass gripping the thinner section as the fat section kept it in place. The fur tail brushed the inside of my thighs and tickled my perineum. \n\n\"Foxy Becca,\" Lexa sniggered, wiping her hands on the towel, \"give us a twirl.\" \n\nI giggled and spun my naked body round for her, feeling my tail spin out and tug slightly on my anus. I looked at myself in the mirror, moving side to side. It looked as sexy as it felt. \n\n\"Wow, where did you get this?\" I asked, \"I want one.\" \n\n\"You can keep that one, after the show.\" she said, \"I need you to wear this as well though.\" \n\nShe produced the familiar white, leather studded dog collar and leash. \n\n\"Sorry,\" she said, tipping her head to the side apologetically, \"it's for the show.\" \n\n\"Its fine,\" I said, \"I quite like it actually, it feels kind of slutty.\" \n\nShe strapped it to my neck and I got on all fours like a dog. I wiggled my ass to make my butt plug tail wag. Lexa thought it was hilarious. \n\n\"Time for you to pay your debt Becca, come on follow me.\" \n\nI started to feel nervous again. Training with Lexa was one thing, taking four cocks in the ass was going to be something else. I followed her out the door and down a corridor for about fifty metres. I felt vulnerable crawling around naked, but she made me feel at ease by walking ahead, lifting the back of her skirt and flashing her plug at me. I giggled at her. She suddenly went into business mode as we approached the door at the end of the corridor. She opened the it and I followed her inside. \n\nThe room was similar to the filming rooms I'd been in previously. Lots of cameras and video screens, all brightly lit. In the centre of the room was a weird padded circular piece of furniture. It was the size of a large coffee table and had a raised centre section. It looked similar to large tiered wedding cake or a top hat and was standing about waist height. An ideal height for fucking someone on all fours, I thought to myself. There was a cream leather sofa and two matching chairs in the corner of the room. Four men were sat down and turned in our direction as we entered. \n\n\"This is Becca,\" announced Lexa, gesturing in my direction, \"she's going to be your play toy for the rest of the evening.\" \n\nThe four men stood up and moved to the centre of the room. We all arrived at the top hat furniture together. They were wearing tight white boxer shorts and nothing else. All of them were good looking men, in their own way. One had a pony tail, one had amazing abs, one had a shaved head and the last one had piercing blue eyes. They lined up in front of the top hat like soldiers on parade. \n\nI was looking at their bulges to see if they had huge cocks. I was fearful that Lexa may have lied to me about the size of their manhood, I wouldn't have put it past her to coerce me in and then abuse me. They looked semi hard so it was difficult to tell. \n\n\"They don't look very hard for you Becca,\" she said, also looking at the packages, \"why don't you give them a hand.\" \n\nI crawled over to the guy with the pony tail and knelt in front of him. ",
        "I looked up at him with puppy dog eyes and peeled his boxers down to his ankles. His semi hard cock hung free. It was beautiful shaved and uncut with a low hanging balls. Without touching it with my hands, I licked him along his length up and down, slowly. I moaned as it started to twitch into life. I used my lips to push his foreskin back, and took it into my mouth. I felt him swelling as I sucked him to make him hard. It didn't take long. All the time I was gazing into his eyes lustfully. I pulled it out of my mouth and looked at his erect cock. He was about six inches and not too thick. I was relieved. \n\n\"Good girl Becca, try the next one,\" said Lexa, encouragingly. \n\nI left Pony Tail, stroking himself and crawled over to Abs. He was softer than his friend. I took his waist band in my teeth and yanked his shorts down. His cock just sat there hanging above his small balls. I guessed he needed a little more help. I grabbed his balls and cock together in one hand, from underneath and slipped his whole package into my mouth. He tasted of male sweat, which I had been deprived of for a few weeks. I felt powerful and in control. I held his balls and cock in my mouth, swirling my tongue around his genitals, trying to bring them to life. It worked like a charm. I slipped them out my mouth and watched him grow in front of me. I teased him, pretending to suck it and then withdrawing. It grew bigger in anticipation. I smiled and took him into my throat, just his shaft this time. He was fully erect in seconds. He was a similar size to Pony Tail, but circumcised. I let it slip out and looked at Lexa for approval. \n\n\"Well done dirty girl,\" she laughed, \"let's keep going.\" \n\nI kissed Abs' tip and then crawled seductively to Shaved Head. He was already bulging in his shorts. \n\nMy attention on his friends and my slutty behaviour had already got him hard. I gently bit his cock through his shorts and then yanked them down hard. He sprang up like a jack in the box. Slightly thicker than the other two. I wasted no time shoving it straight down my throat enjoying his super smooth shaft. I let him fuck my throat for a few deep strokes and then slipped him out spitting all over his cock and jerking him off really slowly. He groaned and I felt his cock pulse and for a minute I thought he was going to cum. I stopped immediately and let go of him. \n\n\"Fucking hell Becca. Don't make him cum yet,\" hissed Lexa, \"Leave him, move onto the last one.\" \n\nShe pulled lightly on my leash. Blue Eyes was flaccid in his boxers. His eyes were piercing down on me like he was hypnotising me. He pulled his own shorts down, grabbed his soft cock and slapped my left cheek with it. I knelt upwards and cupped my tits, massaging my nipples up the inside of his thighs and onto his huge ball sack. He started wanking off as he got harder, lifting his cock to point it straight up so I had access to his balls. I licked and sucked on them and then pushed my boobs against them. He was hard in seconds and I pushed his manhood between my tits and started masturbating him up and down with my cleavage. \n\nI moved back with Lexa and knelt at her side feeling pleased with myself. I admired my work, four rock hard cocks standing in front of me, ready for action. \n\n\"I think they're ready now,\" said Lexa, \"Get up on the turntable.\" \n\nI suddenly realised the top hat shaped furniture was able to spin round like a roundabout. Lexa held it steady as I climbed onboard. She unclipped my leash leaving my collar on and I bent over the raised section, wiggling my furry tail and feeling it tickle my pussy lips. I was definitely going to be the centre of attraction today, quite literally. The four cocks positioned themselves equally around the turntable. I now realised what the show was going to be. It was me being spit roasted by two pairs of men. They were going to take it turns fucking my ass, pussy and mouth, like a tag team. I felt myself get a lot wetter. \n\n\"Right boys!\" said Lexa, \"Our clients call this the Anal Roundabout, for obvious reasons. You'll all get to fuck all of her holes.\" \n\nShe lifted my tail exposing my cunt. She gave the tail a little tug to pull my butt plug out slightly. I felt my hole stretch again as the larger section started to pull out. She let go and it pulled itself back in like it was on elastic. \n\n\"Fuck her cunt to start with, and use the plug to loosen her up, be gentle to begin with, she's an anal virgin, so use lots of lube.\" \n\nShe talked about me like I wasn't there. I felt such a slut, just a series of holes for them to fill. I couldn't wait to get started, but I was slightly concerned as to whether I could take a real cock in the ass. They were bigger than the dildo I had fucked. \n\n\"Let's see who gets to go first, shall we?\" she smirked. \n\nShe spun the table slowly and let go, letting it spin under its own steam. I initially saw a blur of cocks until it slowed down. \n\nI then saw cock...space...cock...space...cock...space...cock...space..cock. It stopped. \n\n\"Lucky boy,\" she said, talking to Abs, \"Fuck her and then pass her on.\" \n\nHearing her talk about me like a piece of fuck meat was insanely hot. I opened my mouth to receive Pony Tails cock as Abs lifted my Tail and drove his dick into my sopping snatch, without even checking to see if I was wet. I lurched forward and Pony Tails cock went deeper down my throat. I was in heaven. Abs pulled on my tail gently, sending new sensations up my spine, as he slowly pumped away at my tight pussy. I was sucking and licking the cock in my mouth like I was dying of starvation. I was just getting used to the pair of them when they both withdrew and I was spun round to the next pair. \n\nShaved head pulled my tail out of the way and licked my cunt from my clit to my plug. He twisted and pulled my plug and I felt my ass pulling it back in. It felt so strange, but amazing at the same time. \n\n\"She's a Juicy bitch,\" he said, and stuck his cock in my pussy and started fucking me hard. \n\nBlue eyes held his cock at the base and teased me with it, pulling away as I went to suck him. \n\n\"Beg,\" he said. \n\n\"Please,\" I whimpered, \"Let me suck you.\" \n\nHe grabbed the back of my head and rammed his cock between my lips. I could taste pre-cum on him and swallowed it down like the cum starved bitch I was. He was fucking my throat hard and saliva was pouring out of my mouth, my eyes were watering and my makeup was a mess. \n\nRound we went again. \n\nNow I had Abs in my mouth and could taste my own sweet nectar on his cock. I had creamed all over him and his shaft was slimy and delicious. Pony Tail was teasing the entrance to my hole, so I pushed back onto him and impaled myself onto his shaft. \n\n\"Dirt bitch fucking loves it,\" he gasped. \n\nI licked Abs' cock clean and then started wanking him off onto my tongue. Pony Tail pounded me for a few minutes and then we went round again. \n\nMore delicious, pussy coated cock for me to suck on. Blue Eyes slid straight in, pulling my tail more forcefully, so it almost slipped out. I squeaked with a mouthful of cock and he let it go, allowing it to pull back in. \n\n\"Fuck! She's going to be tight,\" he said with glee \"look how her butthole sucks it back in. She's definitely not had it up the ass before.\" \n\nHe rammed his cock into me, slapping his balls against my clit. I licked and sucked the cock in front of me, trying to get him off. I was desperate for a feed and cum was my meal of choice. Four weeks had passed without any spunk and I felt like I was having withdrawal symptoms. \n\nI looked left and saw Lexa with a portable video camera. She was filming the close ups which the other cameras couldn't see. \n\n\"Fuck her. Two pumps each and then pass her on,\" she directed. \n\nThe table turned and I felt Abs stick his cock in. He thrusted twice and then spun the table. Shaved head did the same. Two thrusts and on I went again. Then Pony tail, rammed into me twice really hard. Finally Blue eyes, bang, bang, and back I went to the beginning. They kept going and I lost track of who was inside me. I had no time to suck cock, I was being spun on too quickly. I got a glimpse of a cock, felt them enter my body, from behind and then I moved on. Some of them slapped their cocks on my face as I got to them, others were just stroking themselves enjoying being part of the show. \n\n\"Excellent guys,\" Lexa said, excitably, \"fuck that bitch, show her who's in charge. Just thrust in once and pass her on now.\" \n\nThe spinning was increased. I felt a cock violate my snatch, then I was turned. Then a cock in my snatch then I was turned, over and over. I was getting dizzy and the pleasure was immeasurable. All I could hear was the whir of the table and balls slapping against my ass. I almost forgot I was there for anal. Thrust...Turn... Thrust...Turn... Thrust...Turn. \n\n\"Ok!. Stop!\" ordered Lexa, \"Give her a minute.\" \n\nI was out of breath from being fucked so hard, the room was spinning, but coming back into focus. \n\nShe bent down and stuck the camera in my face. \n\n\"Enjoying it slut?\" she asked. \n\n\"Fucking love it!\" I panted, breathing hard. \n\n\"Good girl, because now its anal time.\" \n\nShe moved behind me and got really close to my ass with the camera. \n\n\"Pull her plug out.\" \n\nI felt searing pain as Pony Tail pulled my tail and the plug vacated my ass, stretching me open and then closed again. He dropped the plug next to me on the turntable. \n\nI looked over my shoulder as she passed him a bottle of lube which smelt of strawberries. He poured it on my anus and rubbed some on his cock. Lexa filmed my ass hole closely not moving the camera. I felt his cock against my tiny pink hole and he pushed forward. His cock slipped off my hole and slid across my crack up towards my back. \n\n\"Too much lube,\" said Lexa, \"Push in harder.\" \n\nHe repositioned himself and pushed again. Stinging, burning pain ripped through me and I screamed as he penetrated my asshole. \n\n\"Relax Becca, take control,\" she said to me, \"Keep still until the pain goes off.\" \n\nI knelt still and he stopped moving, waiting for me to back up onto him. He was already stretching me further than I'd gone before, so the worst of it was over. A few seconds passed and I relaxed and moved back towards him. His cock in my ass felt different to the dildo or Lexa's fingers. It was hard, but had some give to it. As I moved back and took him deeper I felt the skin of his cock sticking to my anus and then sliding as the strain became too much. Most of the lube had wiped off when he penetrated me. I took him all the way in and then all the way out. He must have felt it too and it must have been uncomfortable for him. He Lubed his shaft again and went back into me. This time he glided in perfectly with less pain. It still hurt, but a lot less and the friction was gone. \n\n\"She's not an anal virgin anymore,\" said Pony Tail, laughing, \"but fucking hell is she tight.\" \n\n\"Hurry up,\" said Abs, \"I want to try her out for size.\" \n\nI started to move back and forth taking him more easily as I started to fuck him with my sphincter. I felt full and dirty and extremely wet between my legs. The pain had almost gone after a few deep strokes. \n\n\"Fuck me slowly,\" I said, \"I'll let you take control, but be gentle.\" \n\nI moved forward and bent over the podium, with him still inside my ass. It was amazing how my muscles gripped him and pulled him with me. He started to fuck me, slowly. He was pulling almost all the way out and then all the way back in until I felt myself loosening up again, like I did with Lexa's toys. \n\n\"Harder,\" I said. \n\nHe started banging into me his balls slapping against my wet lips. I was just starting to enjoy it when he pulled out and the table spun round. \n\nBlue Eyes wiped his cock round my labia and butt crack, coating himself in lube and my juice and pushed into me. He felt smaller, but I knew he was the same size. He wasted no time in fucking me hard and fast, gripping my hips and pulling me onto his cock. I reached down and started to stimulate my clit. It was bigger than ever before, engorged with blood and lust. I opened my mouth and took Shaved Head in, timing my sucking with Blue Eyes thrusting. The pain was gone and it felt amazing to have a real man fucking my ass. Several more strokes and I was passed on again. \n\nAbs stuck his dick in my pussy first, as he squirted a huge amount of lube onto my bumhole. \n\n\"Let's see how her ass feels,\" he snorted. \n\nHe pulled out of my cooch and teased my butthole, just pushing the tip in and out an inch or so to break my seal. \n\n\"Mmmmmm fuck. She is a tight little slut isn't she,\" he moaned. \n\nHe pushed in so hard it made me lurch forward. Pony Tail took the opportunity and stuffed my face full of strawberry flavoured cock. He held my head and pumped my mouth as Abs did the same to my rear. It was amazing how my anus had adapted so quickly to having cocks shoved up it. If I'd know it would be like this I would have done anal years ago. It wasn't long before I got passed on again. \n\nShaved Head went straight in without hesitation and started banging me hard. Wet slapping noise filled the room as he fucked me like his life depended on it. Another strawberry cock filled my mouth and sucked away like a common little whore. \n\n\"You filthy fucking skank Becca,\" said Lexa, \"Look at you, taking cocks at both ends like a fucking anal whore.\" \n\nI looked across at her and smiled and then got back to sucking Blue Eyes' dick. \n\n\"She's enjoying this way too much guys, start treating her like the whore she is. She's just a collection of fuck holes for your enjoyment. Start passing her round and get rough with her. She likes it rough. Act as though you're gang raping her, she fucking loves it.\" \n\nThe four of them went into a frenzy. Shaved head pulled out and rammed it into my pussy a few times and then back in my ass. Blue Eyes slapped his cock against my forehead and then rammed it down my throat. Two or three thrusts each and I was spun round to the next pair. \n\n\"That's better,\" said Lexa, \"Rape the bitch.\" \n\nAbs pulled my hair, yanking my head back and forcing himself into my mouth. Pony Tail fucked me hard, alternating between my holes. Pussy, ass, pussy ass. I was in ecstasy, rubbing my clit for all I was worth. I had not been treated this rough during sex before. I felt helpless and out of control. They could do what they wanted to me. The feeling was overwhelming and I knew I'd climax hard pretty soon. \n\n\"Gooooood,\" cooed Lexa, encouraging them, \"Rape her ass, treat her like a fuck doll.\" \n\nI was spun again, Blue Eyes thrust into me the same way Pony Tail had. It was a new game for them, pussy ass, pussy ass. I was spun again. Pussy, ass, pussy, ass. I was spun again onto Shaved Head. He rammed into me over and over and I knew he was going to be the first person to ever cum in my ass. I felt him thrust twice more and then he exploded inside me. I felt his hot spunk splattering the inside of my rectum. I tightened my anus and held him in, feeling his cock pulse over and over. My clit was on fire and I knew I was close to orgasm. He finally slipped out of me, with a small trickle of cum running down to my pussy. \n\nLexa saw what was happening and congratulated him. \n\n\"Oh yes! Well done, cum in that bitches ass,\" she squawked. \n\n\"She's a fucking dirty bitch,\" said Shaved Head, as he walked over to the leather sofa, wiping his cock. \n\nI picked up the butt plug and shoved inside my snatch, feeling it stretch me open until the larger section was inside me. My pussy closed around the neck and went back to rubbing my clit, trying to get off before they all did. \n\nThe remaining three guys passed me round over and over, abusing my ass with a stroke each and then passing me on, just as they had with my cunt. Penetrating me over and over. I was about to cum hard, when they suddenly stopped. \n\nI was lifted off the turntable by all three of them, almost fighting over me. Pony Tail laid on the floor and I was picked up by the other two by my legs and impaled on his cock. It slipped into my ass with no resistance and they held me there in mid-air as he raised his hips, slamming into my ass. \n\n\"Yes guys, great idea,\" gasped Lexa, sounding excited, \"so fucking hot.\" \n\nPony Tail supported me under my armpits and then gently leaned me back until I was lying with my back on his chest. The other two let go and fought for domination as to who was going to fuck my pussy. Abs won the contest, pulled the plug from my pussy, getting between my slippery legs and ramming his cock inside me. I felt so tight it was unbelievable. A cock in my ass and one in my pussy made me feel ultra-full and I went to town on my clit. Pony Tail clawed at my tits roughly as I was violated in both my fuck holes at once. Blue Eyes was left with my mouth to fill, so he grabbed me round the throat and stuffed it between my willing lips. \n\n\"That's it. Make the bitch air tight,\" sneered Lexa, \"Abuse the little slut.\" \n\nIf Lexa wanted it to look like I was girl being raped, I think this was a close as it gets. Blue Eyes must have had the same thought as he started to erupt into my mouth. Shot after shot of thick creamy man juice coated my tongue. I opened my mouth as he withdrew and showed it to Lexa with the camera. I didn't' hold it there for long, I was desperate to swallow such a big load and wasted no time in gulping it down. I showed Lexa my empty mouth and she moved down to my other two holes to film the action. \n\nThe cum hitting my stomach must have triggered me. I rubbed as fast as I could on my oversized bud and started to clamp my pussy and ass as I finally climaxed. It was a huge orgasm, maybe the biggest I'd experienced. My pussy gushed and my ass pulsed in time with my orgasmic waves. I felt my pussy fill with warm spunk as Abs emptied his load into my pulsating snatch. I was screaming with pleasure and still cumming when he pulled out. His thick load plopped out of my cunt onto Pony Tails cock as he continued to assault my anus. \n\n\"Rape my dirty ass,\" I screamed, still cumming hard, \"Fill my ass with your hot load.\" \n\nHe grunted a couple of times and finally let it go in my anal cavity. Hot sticky jizz plastered my rectal walls as my ass contracted over and over increasing the sensations for both of us. My pussy was squirting like a ejaculating cock in time with my contractions. His balls were finally drained and my climax subsided. I lay on top of him for a moment with his dick still inside me. My cunt was running like a tap, from Abs' cum and my own. \n\nI pushed off Pony Tail and he slid out of me, still hard. I rolled off him and lay on the floor in a euphoric afterglow. \n\n\"Jesus Christ, she's a fucking freak,\" said Pony Tail, obviously impressed with my performance. \n\nHe walked off with Abs and Blue eyes, back to the chairs. \n\nLexa stuck the camera in my face. \n\n\"You fucking anal slut,\" she said, \"Poor Becca taking a double penetration and a cock in the mouth, all in one sitting. What a fucking filthy bitch.\" \n\nHer insulting me wasn't going to wipe the huge smile off my face, in fact it made me grin even more. I giggled, still breathing hard with my eyes closed. \n\nI eventually opened my eyes to see her putting the camera on the floor and switching off the remaining cameras. \n\n\"OK guys,\" she said, addressing the men in the seating area, \"We're all finished here, you can go.\" \n\nThe four men got up and left without speaking to me. I regained some self-control and got up and sat on the edge of the turntable. My ass and pussy felt sore and swollen from the brutal fucking I had just received. \n\nLexa finished up with the cameras and came across and sat next to me. \n\n\"How was it?\" she asked, sounding concerned and back into 'nice Lexa' mode. \n\n\"Incredible, I should have tried anal years ago, I never knew it was such an intense feeling.\" ",
        "\"I told you.\" \n\n\"The pain was only temporary, but I hope there's no lasting damage to my anus. They really did give me a rough fucking.\" \n\n\"The swelling and soreness will go down in a couple of days, then you'll be good as new,\" she said reassuring me and putting her hand on my thigh, \"I needed you to take a rough pounding for the cameras, we still have our clients to think about. They really like you Becca.\" \n\n\"Glad to hear it,\" I said, sarcastically, \"Are we done now?\" \n\n\"In here? Yes,\" she said, looking around the room, \"But let's go back to your room shall we.\" \n\nShe winked at me and spread her legs open. \n\n\"Feel how wet I am now,\" she said, raising her skirt a little. \n\nI saw a flash of her Butt plug, still in place as I slid my finger inside her snatch. \n\n\"Mmmmmm you juicy slut,\" I said, sucking my finger, \"let's go.\" \n\nWe walked back to my room and she locked the door behind us. \n\n\"Here we are again Becca, all alone,\" she said, seductively. \n\n\"I feel really sore Miss Lexa, I'm not sure I can take another fucking.\" \n\n\"That's OK sweetie, you don't have to, but I want you to fuck me.\" \n\n\"How? Do you want me to go down on you or use my fingers, \" I asked, still horny despite my discomfort. \n\nShe walked over to her case and picked up a black leather harness with two large dildos attached to it. \n\n\"Put this on and fuck me with it, but eat my pussy first, I know you're dying to taste me.\" \n\nShe handed me the strap on, stripped off and got on the bed. The pillows were still in position, stacked up from I had used them earlier. She bent over them showing me her glistening vulva and her plugged ass. \n\nI stepped into the strap on. It was like a pair of crotchless panties, but made of stiff leather. I had used one before with Jemma, but this one was different. It had a very thick pink, rubber cock, about eight inches long and then a thinner cock of the same length above it. I pulled the straps tight and admired my new attire in the mirror. \n\n\"A double strap on? Wow, I've not seen one like this before,\" I said excitably. \n\n\"It's going to feel so good to have you drill both my holes at the same time,\" said Lexa, spreading her legs for me, \"My cunts been dying for a feed since you got here. Come up here and taste my pussy properly.\" \n\nThat was all the invitation I needed. I jumped on the bed and went straight for her honey pot. I lapped away at her juicy lips working down to her clit. My face was soaked in seconds as I ate her pussy like a ripe melon. She responded by pushing back into my face and moaning loudly. \n\n\"Oooooh god Becca I need this so badly. Eat me out.\" \n\nI pulled her plug in and out stretching her bumhole with the wider part of the toy. Her pussy was so engorged with blood it made her lips and clit look like they were ready to burst. Her cooch was gaping slightly and I had no trouble sliding my tongue inside her and devouring her velvety hole. She was going to cum hard when I got her there, I knew that for sure. I sucked her clit, licked and sucked her labia and continued to pull on her plug, getting her ass nice and warmed up for what I was about to do to her. \n\n\"I can't take any more,\" she panted, \"stick it in me. Fill my dirty holes.\" \n\nI got behind her, understanding why this view was so hot for guys. I pulled her plug out and lined my two cocks up with her holes as she presented herself to me. Her ass hole was slick with lube and her love juice from her overhydrated pussy. I was about to push in when she looked back at me. I paused. \n\n\"Don't be gentle Becca, fuck me hard,\" she said, looking sexier than I have ever seen her, \"I want it to feel like you're raping me. Rough me up like the guys did to you. Rape my slutty holes.\" \n\nI didn't know what to say. I had never used violence during sex, but I knew what it felt like to be on being on the receiving end. I wasn't sure what to do. In the end I just grabbed her by the hips and rammed both cocks into her as hard as I could. \n\n\"Take my cocks you filthy little cunt.\" I shouted, slapping her ass hard. \n\nI pulled all the way out and watched her holes close shut. I drove back in, not really lining up this time. The shafts found there targets and pierced her body. \n\nShe cried out with a shriek of pain. I did it again, out and back in. \n\n\"That's it. Fuck me. Treat me like a fuck doll. Hurt me.\" \n\nI did it again. Pushing in even harder. She fell forward on the bed and the pillows collapsed beneath her. I was still inside her. I pulled her hips back and dragged her off the bed so I was standing and she was bending forward. \n\n\"Touch your toes, slut,\" I commanded, pushing her head down. \n\nShe obeyed and bent forward with her head down near her feet. I trapped her head between the foot of the bed and her shins so she couldn't move. I thrust in and out of her hard and fast. Fucking her over and over, making her feel the pain of the initial penetration. \n\n\"Little bitches need raping when they're as dirty as you are, \" I said, slapping her ass hard and leaving a hand print. \n\n\"Yes Miss Becca,\" she whimpered. \n\n\"Yes. That's right, I'm in charge of your cunt and ass now, you little whore.\" \n\nI fucked her hard and deep. \n\n\"Fuck me harder,\" she panted, \"is that all you've got?\" \n\n\"You insubordinate little fuck bitch.\" I said. \n\nI pulled out, smacked her ass as hard as I could and pushed her by her hips, making her somersault onto the bed. She landed on her back with her legs up near her head. I jumped on her keeping her legs pushed back and slapped her tits. \n\nShe grinned defiantly so I slapped her clit instead. \n\n\"Ow fuck! Yes that's it, hurt me Miss Becca. Punish me.\" \n\nShe spread her legs wide apart and I slapped her pussy hard. It was red and swollen, but she insisted on more. \n\n\"Punish me. Hurt me. Rape me Miss Becca. Teach this slut a lesson.\" \n\nNow she was on her back, her ass and pussy were reversed. This meant that, as I lined my strap on up with her, the thicker cock was now going to go in her ass and the thinner one in her pussy. \n\n\"Little bitch wants punishing does she?\" I hissed, slapping her cunt again. \n\n\"Ow. Yes. Fuck me hard. Make it hurt.\" \n\n\"Ok. You asked for it.\" \n\nI pushed hard, feeling the resistance of her ass round the thicker dildo. At first I thought she wouldn't take it, but then her anus suddenly gave way and it went in as far as it could. \n\nI thought she was going to burst her lungs she, screamed so loud. I stopped and let her get used to it. \n\n\"Don't stop! Fuck me with it you stupid bitch,\" she snapped, slapping her clit and rubbing it to get herself off. \n\n\"How dare you talk to me like that,\" I snapped. \n\nI braced her hips and pulled the fat cock out of her ass and then straight back in. Impaling her pussy with the smaller one at same time. She screamed again. \n\nI penetrated her repeatedly, over and over as she started to climax violently underneath me. She bucked and rolled on the bed like she was having a fit as she screamed in ecstasy and rubbed her clit furiously. \n\n\"Rape me. Rape me. Rape me,\" she cried, over and over, in time with my thrusting, until she was finally spent and she pushed me off. \n\nThe fat cock pulled out of her ass and I looked down at her ruined holes. Her pussy was red raw and swollen. Her ass stayed gaping from the huge cock, but it was slowly returning to its original size as I sat there watching it. I could see inside her rectum, it was red and looked painful. It finally closed shut in slow motion. \n\nShe was shivering on the bed, looking like a druggy who just had their fix. \n\nI lay next to her and pushed her over so I could spoon her. I kissed her neck softly and moved her hair out of her face. It was wet and matted and sticking to her cheek. \n\n\"Are you alright?\" I asked, wondering if I'd gone too far. \n\n\"I'm perfect,\" she sighed, closing her eyes, \"that's exactly what I needed Becca.\" \n\n\"I thought I'd hurt you or something. That was insane what I did to you.\" \n\n\"I've had worse, believe me.\" she sighed, snuggling back towards me. \n\n\"Is your ass going to be OK?\" \n\n\"It'll be fine by the morning.\" \n\n\"Where the hell did that come from, \" I asked, sounding astonished. \n\n\"What can I say. Seeing you take those cocks like that made me wild with desire. I needed to feel violated, like you were.\" \n\n\"Even so, I thought I was a little too rough.\" \n\n\"I told you I've had worse.\" \n\nI wanted to know how much worse, but thought better of it. \n\nWe lay there in each other's arms for a few minutes. My pussy and ass were throbbing and I imagined hers were too, but more so. I couldn't believe I fucked her so roughly, I had surprised myself. I was busy thinking about her pain when she finally spoke. \n\n\"Will you stay the night with me?\" she asked, turning her head slightly, but keeping her eyes closed. \n\nHer request came from nowhere and surprised me. \n\n\"Errr... Sure...Yeah if you want me to.\" \n\n\"It'll be nice to wake up together, don't you think?\" \n\nI cuddled up to her. \n\n\"Mmmhhhmmm,\" I cooed. \n\n\"Good girl. Let's get some sleep I think we both need it.\" \n\nI reached over and turned the lights out and we snuggled under the sheets. She was half asleep already. I kissed her softly and wanted to say more to her, but didn't know how. \n\nI eventually drifted off to sleep with her in my arms, feeling content, spent and at peace."
    ],
    "authorname": "Naughtybecca",
    "tags": [
        "anal",
        "filmed",
        "squirting",
        "non-consent",
        "lesbian",
        "deepthroat",
        "cum",
        "dildo",
        "strap-on",
        "vibrator"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/poor-becca-ch-04"
}
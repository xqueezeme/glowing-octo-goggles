{
    "title": "Transformations - The Farm Ch. 01",
    "pages": [
        "Hello, readers! Welcome to our latest book in the Transformations series. The Farm picks up where Transformations: Rose left off. Lisa, Jason, Mary, and Belynda have arrived at Alex and Gwen's farm from Transformations: Witnesses. \n\nIf this is the first Transformations story you've read, STOP! You're reading the fourth book in the series! The novel reading order is:  \n\n<ul> <li> Transformations: Witnesses \n\n</li>\n\n<li> Transformations: Soccer Mom \n\n</li>\n\n<li> Transformations: Rose \n\n</li>\n\n<li> Transformations: The Farm \n\n</li> </ul>\n\nWe also have short stories which aren't necessary to follow the books, but they do help! The short story order is: \n\n<ul> <li> Transformations: Britt-Ney \n\n</li>\n\n<li> Transformations: The Hazards of Saving the Earth \n\n</li>\n\n<li> Transformations: The New Gym \n\n</li> </ul>\n\nThanks for reading, and as always, we welcome your comments! \n\n***** \n\nRebecca Tanner knew this was a mistake when she first laid eyes on Clinton Travers. Fat, bearded, stuffed into a two sizes too small dirty polo shirt and wearing an even dirtier baseball cap emblazoned with the words: PUSSY HUNTER, Clinton was staring at her like a barbecue pit master looked at a rack of ribs. \n\nAnything for the story, she thought. She and her cameraman, Hank, also known as Bear, had driven three hours into bumfuck Egypt to interview Clinton. The greasy redneck was ogling her boobs in the tight blouse, and she wished she had opted for a baggy sweater instead. \n\nRebecca wondered if the farmer knew her boobs were probably smaller than his own man boobs? \n\n\"Mr. Travers, exactly how many people have you personally witnessed your neighbor abducting?\" Rebecca asked. \n\n\"This is going to be on WNYC news, right?\" Clinton asked. \n\n\"If it checks out.\" \n\n\"And, I'll get the reward from the police?\" \n\n\"That's up to them.\" Rebecca fought down her disgust. If Travers's story was true, the farm next to his was involved in abduction and human trafficking. \n\nAnd, all this son of a bitch cared about was getting his fat face on TV and lining his pockets. People suck. \n\nOf course, if they didn't suck, she'd be out of a job. \n\nRebecca Tanner was an up and coming reporter at WNYC, one of the biggest markets in the country. This story could put her at the anchor desk - hell, it might get her a Pulitzer and propel her to national news anchor. \n\nAnd, she could be instrumental in taking down a gang of sexual predators. \n\nThis was the reason she became a journalist in the first place. \n\nThey were sitting on Clinton's front porch. \n\nHank stood behind her, his camera focused on the leering redneck. \n\n\"When did you first begin to suspect your neighbor?\" Rebecca asked. \n\n\"The day those Jehovah's Witnesses disappeared. I saw them turn into his drive.\" \n\n\"Your neighbor's name is Alex Kincaid?\" \n\n\"Yeah, odd sort. He's some kind of body builder. Wife died a few years back.\" \n\n\"So, you say you saw the Jehovah's pull into his drive?\" \n\n\"Yeah, two women and a man. They drove in, but they didn't drive out.\" \n\n\"And, you told the police?\" \n\n\"Fuck yeah...\" \n\nRebecca grimaced. \"Don't say fuck. Can't say that on the network.\" \n\n\"Sorry. Yes, I told the police, not that they did sh... anything. They went to the house a few days later, then came back and said they didn't find nothing. 'Course, by that time, the Jehovah's was long gone, except for the blonde.\" \n\nRebecca's eyes narrowed. \"Gwen Adamson?\" \n\n\"Yeah, that's her.\" \n\n\"Wait, you're saying Gwen Adamson is still in the house?\" \n\nClinton laughed and shook his head. \"Yeah, the blonde that got out of the car is still over there - only now she's over six feet tall with tits like basketballs, and she says her name is Gwen Kincaid, Alex's new wife.\" \n\n*** \n\n\"You're sure?\" Rebecca asked the person on the other end of the phone. Her assistant back in Manhattan had found a police report that said they had interviewed Alex and Gwen Kincaid in the disappearance of the Jehovah's and found nothing out of the ordinary. \n\nOf course, a little digging by her assistant revealed that Gwen Kincaid did not exist before that police interview. \n\nWere the cops in on it? \n\nRebecca hung up. \n\n\"What did they say?\" Hank asked. He was changing the battery on the camera as they stood beside the WNYC van outside Clinton's house. \n\n\"His story checks out - the cops investigated, interviewed Gwen 'Kincaid' and didn't find anything out of the ordinary.\" She stared at two pictures in her hand. One was a police photo of Gwen Adamson, the other a long distance shot of Gwen Kincaid on her porch taken surreptitiously by Clinton. \n\nGwen Kincaid was like a new and improved version of Gwen Adamson, but they were definitely the same woman. \n\nHow the hell could that be possible? There was less than a week between the disappearance and the interview of the Kincaid's - there was no plastic surgery that could be performed and healed in that span of time. The woman had developed a rack worthy of a fetish model and a figure that looked like she was wearing an invisible corset. \n\nAnd, then there was the question of her miraculous change in height. Nothing could make a woman grow eight inches taller, could it? \n\n\"Becca, hun, I'm scared shitless. Let's just go to the cops,\" Hank said. From any other man, his familiarity would have sounded sexist. But, Bear was just Bear - he didn't mean anything by it. \n\nNot that they hadn't fucked. \n\nBear was just her type: big, muscled, and hairy. \n\nThey weren't in love. They were just fuck buddies when they weren't otherwise occupied. \n\nAnd, Bear made her look damned good on camera. \n\n\"You? You're scared?\" She grinned up at him. \n\n\"Goddamn right I am. If what he's saying is true, these people are fucking dangerous.\" \n\nRebecca nodded. According to Clinton, the Jehovah's were just the first abductees. Over the months following, there had been a constant stream of vehicles in and out of Adam Kincaid's farm. This coincided with rumored and confirmed abductions in nearby Ithaca. \n\n\"We need the story, Bear.\" She reached into the back of the van and pulled out her leather hiking boots. \"If Clinton's right, the local cops are in on this shit. We need to go back to Manhattan with evidence.\" \n\n\"Goddamn it,\" Bear groaned. \n\nShe sat down on the van's floorboard and started changing her shoes. \"Come on, Bear. Where's your sense of adventure?\" \n\n\"Fine, but if you come out of this with super tits, don't blame me.\" \n\nRebecca laughed. \"I don't know.\" She thrust out her chest. \"Bigger boobs might be a career boost.\" She winked at him. \"Besides, maybe you'll get the big boobs.\" \n\nHe frowned. \"Yeah, exactly the shit I'm afraid of.\" \n\n*** \n\n\"I ain't going no closer,\" Clinton whispered. \n\nThey were kneeling in a copse of trees a hundred yards from Adam Kincaid's barn. \n\nBear was filming after having put gaffing tape over the LEDs on the camera. \n\n\"What?! Seriously?\" Rebecca hissed. \n\nClinton shook his head. \"You ain't seen the shit I've seen. Gwen Kincaid, when she looks at you? You feel... strange. Like she's looking inside your head. Ain't going any closer. You can go on if you like.\" He turned and crept away back toward his house. \n\n\"Cowardly mother...\" Rebecca whispered. \n\n\"Yeah, I'm in agreement with him,\" Bear whispered back. \n\nShe shook her head. The barn had no windows, but the farmhouse beyond did. Light streamed from the basement windows. \n\nRebecca pointed at the house. \"Let's shoot some footage through the basement windows.\" \n\nBear winced. \"Fine.\" \n\nThey made their way slowly behind the barn. \n\n\"Holy shit,\" Rebecca said. \n\nThe field behind the barn was a parking lot filled with expensive cars: Mercedes, BMWs, and Teslas mostly. \n\nThey were almost to the house when a car pulled into the drive. They ducked down beside a Tesla SUV. \n\nFor a moment, Rebecca was afraid the big black Mercedes was going to park in the lot, but instead it pulled right up in front of the farmhouse. \n\nA woman got out of the car. \n\nShe was in her early twenties, dressed in white with gorgeous dark hair. \n\nEven in the dim light, the girl was one of the most beautiful people Rebecca had ever seen. \n\n\"Wow,\" Bear whispered. \n\nShe went to the door. \n\nA moment later it opened. \n\nGwen stood framed in golden light. \"Hello, Lisa. My name is Gwen. We've been expecting you.\" \n\nThe girl, Lisa seemed to be trembling. \"I've done bad things. Horrible things.\" \n\n\"Shh,\" Gwen whispered. \"We all have. And, we will continue to do them. But, it's going to be alright, Lisa. You're home now.\" \n\nGwen held Lisa tenderly. \n\nIn a few moments, the others got out of the car: an older woman, a muscular boy, and a tall Latina. They all went in the house. \n\n\"Come on, hurry!\" Rebecca said. Together, she and Bear ran to the basement windows. \n\nRebecca peered inside. \n\nIt took a moment for her eyes to adjust. \n\nThe room was brightly lit and sterile looking, not at all what she would expect from a farmhouse. It took Rebecca a moment to realize she was looking at an operating table. \n\n\"Are you getting this?\"Rebecca whispered. \n\n\"Yeah, let's get...\" \n\nThere was a loud crack, and Bear hit the ground beside her, his prize camera rolling into the bushes. \n\nRebecca spun as she saw the black metal handle of a flashlight swinging toward her face. She stumbled backward and then scrambled to her feet. \n\nA tall woman wearing Daisy Dukes and a red handkerchief halter top was smiling at her. \"Ain't you pretty?\" \n\n\"Bear?\" Rebecca asked. \n\nThe big man was lying face down on the ground. \n\nThe woman stepped over him with her leather cowboy boots. \n\nShe had big breasts and the handkerchief halter looked ready to fail. \n\nRebecca walked backward. \"We're from WNYC. The cops will be here any second.\" \n\nThe woman shrugged, her long brown pig tails waving. \"That's not a problem.\" \n\n\"I'm serious! We've already called them.\" \n\n\"Liar, liar, pants on fire - cell phones don't work on the property.\" She walked menacingly toward Rebecca. \"You sure are cute. I bet you taste good too.\" \n\n\"We called before we came here...\" \n\nThe woman giggled. \"I told ya. It's not a problem. Local cops do what they're told. You will too. And, I am gonna tell you all kinds of things to do...\" \n\n\"Don't come any closer. I'm warning you,\" Rebecca whined. \n\nThe woman laughed. \"Now, come on, sweetie. I ain't gonna hurt you... much.\" \n\nRebecca tried to make herself look small. She cowered. She glanced left and right, as if she was about to run. \n\nThe woman swung the flashlight toward Rebecca's face. \n\nShe could tell from the look on the woman's face that she wasn't expecting Rebecca to block the blow. \n\nIt hurt when she brought up her left arm and blocked the flashlight. She would be nursing a bad bruise tomorrow, maybe even a hairline fracture. \n\nHer right fist pistoned out and twisted on impact with the woman's jaw. \n\nThe woman's head rocked back. \n\nThat should have taken her down - that same punch had broken the jaw of a Central Park mugger a few months earlier. \n\nThe woman in the Daisy Dukes just blinked and stumbled back. \n\nRebecca brought up her right leg and hit her in the stomach with a front kick. \n\nThe woman doubled over and landed on her ass in the wet grass. \n\nShe looked up at Rebecca. And, then the woman laughed. \n\n\"What the fuck are you?\" Rebecca Asked. Then she turned and ran headlong into the dark woods beyond the property. \n\n*** \n\nIf you had told Lisa Chase a few days ago that she was destined to be an immortal, mind controlling dominatrix with a boyfriend who was being corrupted into becoming a real-life antichrist, she would have thought you had lost your mind. \n\nOf course, that was before the mousy brunette with the thick glasses had stumbled across the servants of the Church of Morpheus in a New York truck stop. Before she had been twisted and molded by a white witch known only as Sugar Tits. Before her body had been transformed into that of a gray eyed sex goddess by a mad scientist named Demona. \n\nBefore she had met and fallen in love with a freshman hunk named Jason. \n\nBefore she had fucked his mother and coerced her into having sex with her own son. \n\nBefore Lisa Chase had become a servant of evil. \n\nNow, this unlikely fantasy was her reality. \n\nShe stood in the basement of the old farmhouse and watched as probably the most beautiful woman she had ever seen tried to coax a load of cum out of Jason. \n\nGwen. The third white witch she had met. \n\nLast night, Lisa, Jason, Jason's mother, and Jason's pet, Belynda, had arrived at the Farm deep in the countryside of upstate New York. \n\nThe beautiful blonde Gwen had welcomed her warmly. \n\nGwen would be her teacher, helping her master her skills as a white witch - a perverter belonging to the Church of Morpheus. \n\nBut, at the moment, Jason was Gwen's focus. \n\n\"I'm going to need a big load from you, Jason. Demona needs a sample to determine your progress, and I want some for my own experiments,\" Gwen said. She was dressed in a white latex unitard and thigh high, white latex stiletto boots. \n\nEven without the heels, the blonde was tall. In them, she was a tower of sexuality. Her eyes sparkled in the bright lights of the basement. \n\nHer body was perfection - all the white witches were perfect, but Lisa felt a tremor of desire every time she looked at Gwen. \n\nThe woman's breasts were enormous, bigger than Lisa had ever seen. She put Sugar Tits to shame and Lisa herself felt almost flat chested in comparison. \n\nLisa was wearing identical boots to Gwen, a gift from the older woman's closet, along with a skin tight white latex mini dress. Panties and bras were distant memories for Lisa. Her tits needed no support, and panties were useless against the never ending lubricant that flowed from Lisa's cunt. \n\nIt was more comfortable to go commando. \n\nJason was sitting naked in a medical chair, his wrists bound to the armrest with Velcro. \n\nHe had asked Gwen why she had bound him, and the laughing witch had simply told him: \"For fun.\" \n\nGwen bent at the waist and placed her hands on Jason's muscular thighs., pushing them apart. \n\nLisa hadn't been the only one who had been transformed in the truck stop. \n\nBefore Demona had gone to work on him, Jason had been a tall, skinny high school grad. Now, his thin body looked sculpted by a master, hard muscles defined from head to toe. \n\nAnd, his cock was thick and long, standing straight up against his hard stomach. \n\nLisa bit her lip, salivating a little as she looked at his member gently dripping precum. \n\nShe couldn't get enough of him. She couldn't get enough sex in general, again from the things that had been done to her. \n\nGwen knelt between Jason's thighs. She reached out and wrapped her elegant fingers around Jason's thick cock. \"So beautiful. For a woman so into women, Demona certainly knows how to design a cock.\" \n\nJason tilted his head back and moaned. \n\nGwen pumped and a spout of precum gurgled out. She gently licked it away. \n\nJason strained agains the bonds. \n\n\"Shh,\" Gwen whispered, her lips shining from Jason's juices. \"Relax. I need this to last as long as possible. The longer you last, the more cum you'll release. You will be my good boy, won't you, Jason?\" \n\n\"Y... Yes. I'll try.\" He squinted his eyes shut. \n\nLisa knew why: she wanted to cum just looking at Gwen, she couldn't imagine what Jason was going through with her hands on him, that beautiful face smiling up at him. \n\nGwen turned her head toward Lisa. \"You're precious. I promise tonight I'll show you the same attention.\" She smiled and winked. \n\nShe read my mind! Lisa thought. She turned beat red. \n\nGwen laughed. \"So sweet. Don't be embarrassed, Lisa. It's natural and beautiful.\" \n\nJason looked from Gwen to Lisa and back, not comprehending the psychic connection between the two witches. \n\nGwen squeezed the base of his cock. \"You just focus on what I'm doing to you.\" \n\nJason groaned. \n\nWith her free hand, Gwen unzipped her unitard with the big pentagram zipper tab. \n\nHer huge breasts pushed the latex apart as the pentagram lowered. \n\nLisa stepped slightly to the side, automatically shifting to get a better view. \n\nGwen winked at her, and Lisa was blushing again. \n\nGwen's huge rack came into view. \n\nLisa gasped. \n\nWithout the latex to constrict them, they were even larger. The thick nipples had glimmering steel clamps. \n\nGwen looked down at her breasts and smiled. \"They weren't supposed to be this big. I was only supposed to be a J cup - the extra cup sizes were punishment.\" \n\n\"Oh, I would have done it even if you hadn't been a bad girl,\" a voice said. \n\nLisa jumped. \n\nShe had forgotten about Alex, the giant Whoremaster, Gwen's mate. \n\nHe watched, sitting on the bottom steps of the stairs to the house above. Belynda was sitting naked on his lap as he gently rubbed her thick clit. Her eyes were focused intently on Gwen and Jason. \n\nHe smiled warmly at Lisa as he pushed a middle finger thicker than most men's cocks deep inside Belynda. \n\nThe woman tilted her head back and mumbled Spanish into his thick neck. \n\n\"Si, bella. Dos,\" he said. He eased a second finger in beside the first, and Belynda ground her crotch against him. \n\nLisa's heart was pounding. \n\nGwen hefted her big breasts. \"Have you ever had a titty fuck, Jason?\" \n\nHe shook his head, staring straight at her immense cleavage. \n\nGwen smiled. \"Oh, you're going to like it. The first step is lubrication - normally, I'd just undo my nipple clamps and let my Ambrosia make them all slick and wet for you.\" She caressed the steel clamps. \"But, the Ambrosia would taint the sample.\" She reached down and retrieved a glass bottle. \"Luckily, I have this oil that won't effect the analysis.\" \n\nShe tilted the bottle and let the oil pour onto her breasts. \"Mmm, it's very warm. Let me show you.\" She tilted it over his cock. \n\nThe clear liquid coated the head and slid down his shaft. \n\nJason thrashed in the chair. \"God! Oh, God!\" \n\nGwen squeezed the base of his cock again. \"Shh, darling, remember what I told you. Hold off as long as you can for me.\" \n\nJason nodded his head, the muscles in his jaw straining. \"Yes! I'm trying!\" \n\nGwen laughed. \"I know. Such a good boy.\" \n\nSetting the bottle aside, she leaned forward and clasped her big breasts around his cock. \n\n\"Fuck! Yes!\" \n\nGwen laughed. \"Now, what was I saying? Oh, yes: titty fucking. Lubrication is very important.\" She began to slowly stroke her breasts up and down on his erection. \"And, the girl must have big tits, like mine. Little titties just won't do the job properly.\" \n\n\"Fuck! Oh, Jesus!\" \n\n\"Lisa, you should pay attention to this as well. You're a very healthy girl now as well - lots of titty fucking in your future. See how he's simply putty in my hands?\" \n\nLisa watched wide eyed and nodded. She stepped closer. \n\n\"I'm squeezing hard on both the upstroke and the down. You should do that with your cunt when you fuck him as well. He needs a lot of friction so he cums very hard, don't you, Jason.\" \n\n\"Oh, fuck! Oh, fuck!\" \n\nGwen laughed. \"Of course, the last important thing about titty fucking is: the man must be hung as fuck. See how his big, hard cock sticks up even over my big tits?\" \n\nLisa nodded. \n\n\"A man this big gets a bonus during a titty fuck,\" Gwen said. She licked her ruby red lips and then sucked his cock head into her mouth on his upthrust. \n\n\"Fuck! Oh, my fucking God!\" \n\nGwen licked and sucked, her tongue wrapping around his purple, swollen head like a snake. ",
        "\"Gonna cum! Oh, fuck!\" \n\nGwen pulled away and squeezed the base of his cock. \"No. Not yet.\" \n\n\"Aiggh! Fuck! Please, Gwen! Let me cum!\" \n\nGwen laughed. \"Shh. Relax.\" She held out her hand. \"Come here, Lisa.\" \n\nLisa walked to her side, her heels tapping on the white tile floor. \n\nGwen stood up, one hand still squeezing the base of his cock. She reached out and twisted the pentagram brooch on Lisa's dress. \n\nThe rubber covering Lisa's breasts fell away. \n\nGwen smiled. \"Oil them, please?\" \n\nLisa swallowed. She picked up the bottle of oil and let it drip down her cleavage. \n\nGwen smiled. \"Now massage it in.\" \n\nLisa licked her lips as she massaged the oil into her breasts. She stifled a moan - it felt so good! \n\n\"Now, come here.\" Gwen stepped aside, still gripping the base of Jason's cock. \n\nLisa knelt down. \n\n\"Wrap our breasts around him. I'll control his orgasm.\" \n\nLisa squeezed her breasts together, feeling his stiff, veiny cock between them. \n\nJason immediately began thrusting. \n\n\"Remember: squeeze on upstroke and down. We want a nice hard cum, don't we, Jason?\" Gwen said. \n\n\"Fuck! God, baby, so good!\" Jason cried out \n\nLisa lowered her lips and took his cock head in her mouth on each thrust. \n\n\"Perfect,\" Gwen whispered. \n\nThe oil was unscented, and the taste was pleasant. Especially given that his precum was mixing with it. \n\nLisa swallowed it down and licked harder. \n\n\"Okay, Jason. Scream when you're going to cum,\" Gwen laughed. \n\nJason wailed and Gwen gently pushed Lisa back. Her hand closed hard on Jason's shaft and she pumped his oiled cock. \n\n\"The glass, please, Lisa,\" Gwen said. \n\nLisa jumped. She had been mesmerized by the sight. She picked up a glass and held it in front of Jason's cock. \n\n\"Give it to us, Jason! All of it. Every drop you have,\" Gwen whispered. \n\nJason's whole body spasmed. Cum erupted from his tip. \n\nGwen laughed as she pumped, and Lisa caught every stream in the glass. \n\n\"Such a good fucker, Jason. I can't wait till you fuck me. Would you like that? Maybe fuck my ass? I'll bet you could make me scream for hours, couldn't you?\" Gwen said. \n\nJason cried out again and even more cum spurted into the glass. \n\nGwen slowed her pumping as the cum slowed to a dribble. \n\nLisa stared at the glass - it was three quarters full. \n\n\"Again, Demona... confirmed lesbian, but she wants her male creations to cum like geysers,\" Gwen laughed. She released Jason's softening cock and opened the Velcro restraints. \n\n\"I got even more from him a couple of nights ago,\" Lisa said. \n\n\"Hmm, I don't doubt that,\" Gwen said. \"As good as I am, I'll bet mommy was even more exciting.\" \n\nLisa looked down. Mary. She hadn't thought about Mary all morning. Guilt swept over her. \n\n\"We'll talk about that,\" Gwen said as she pushed a lock of black hair out of Lisa's eyes. \"We'll talk about a lot of things. I promise you, you will feel better.\" \n\nLisa sniffed away a tear. \n\nGwen grinned. She dipped her finger into the glass of cum. \n\nShe held up her fingertip with a single pearl of Jason's cum. \"How much does it take? To enslave someone, I mean?\" \n\nLisa shook her head. \"No more than that.\" \n\nGwen nodded. She stuck out her tongue and let the drop fall on her tongue. \"Mmm,\" she moaned as she tasted him. \n\nThen she reached over and pulled Lisa to her lips. She kissed her deeply, pushing the drop of cum into her mouth. \n\n\"Delicious,\" Gwen said with a smile. \n\nLisa nodded, staring at Gwen's sensuous lips. \"Yes...\" \n\nGwen stared into her eyes. \"You're precious. You really are.\" \n\n\"Wow,\" Jason whispered. His eyes were half closed as he lounged back in the chair. \n\n\"And, you are quite the stud,\" Gwen said. \"Belynda?\" She called over her shoulder. \n\n\"Yes?\" The amazon moaned from the stairs. She was on her knees licking Alex's huge cock. \n\n\"Come here and clean your master,\" Gwen said. \n\nBelynda rose to her feet reluctantly. \n\nAlex playfully swatted her ass as she walked away. \n\nShe giggled as she replaced Gwen between Jason's thighs. With a smile, she lowered her head and began sucking Jason's cock. \n\nIn seconds, he was half erect. \n\nGwen took the glass from Lisa. Then she took Lisa's hand. \"You and I have white witch business to attend to. Let's leave them to it.\" \n\nLisa stood up. \n\nGwen set the glass down and pulled the rubber bodice of Lisa's dress up. Tabs at the top clicked in place in the pentagram brooch, covering Lisa's breasts in the straining latex. \n\nLisa smiled and zipped up Gwen's unitard, carefully pulling the latex around the blonde's breasts. \n\nAlex kissed Gwen on the back of the neck. \"White witch business, huh?\" \n\nGwen laughed and leaned her head against his. \"Yes. No whoremasters or Magic Charlie/ Antichrist whatever's allowed.\" \n\n\"Fine, I suppose I'll just have to share Belynda here with young Jason?\" \n\nBelynda smiled as she released Jason's now fully hard dick. She rose to her feet and spread her legs. Then she bent at the waist and deep throated Jason once again. \n\n\"Hmm, I suppose if you must,\" Gwen said with a wry smile. \n\nAlex stepped aside and stroked his enormous cock. How big was it? Several inches longer than Jason's and much thicker. Like the rest of his body, his monster cock was tattooed: black gothic letters spelled out, \"The Cunt Tamer.\" \n\nLisa stared at it and thought the name fit, though she doubted it would fit even the tall amazon Belynda. \n\n\"Not yet,\" Gwen said having read her mind. \"But, I'm sure Alex will be modifying your beautiful friend soon, won't you?\" \n\n\"Absolutely. I want this cunt nice and deep - don't you agree, Jason?\" Alex asked as he lined the fist sized cock head up with Belynda's dripping snatch. \n\n\"Holy fuck, yes,\" Jason laughed. \n\nBelynda groaned as she sucked the younger man. \n\n\"Jason and I will tend to Belynda while you do your witch business,\" Alex laughed. He wedged his cock into Belynda as she squealed around Jason's dick. \n\n\"Alex, remember, she's been dosed with Jason's cum, but she hasn't received transformative ambrosia yet - cum in her and you own her.\" \n\n\"Yes, dear.\" He slid in until all that was visible of his tattoo was 'Tamer'. \n\n*** \n\n\"Could you grab the syringe?\" Gwen asked. They were in a laboratory off the main basement. \n\nLisa handed her a 50 cc syringe. \n\n\"That should be enough for Demona's testing. She'll come down later this week,\" Gwen said as she drew the pearlescent cum into the syringe. She then transferred it to a test tube and capped it. She put the tube in a padded box with dry ice. \n\n\"There.\" She closed the box. \"So, what do you think of our little laboratory?\" \n\nLisa looked around. \"It's... cool, but honestly I don't know what half of this machinery is.\" \n\nGwen sighed and put her arm around Lisa's waist. \"Neither do I. Oh, I know how to brainwash an abductee and make them tall, buxom and twisted, but the rest of this stuff belongs to Demona. Big change from what the basement used to be - when Alex abducted me, it was tiny.\" \n\n\"Alex abducted you?!\" \n\nGwen smiled. \"Of course. I was a Jehovah's Witness just going door to door.\" \n\n\"So, he forced you?\" \n\n\"Yes. He did.\" \n\nLisa blinked. \n\n\"And, to answer your question? Yes, I love him for it.\" \n\n\"That's...\" \n\n\"Sick? I suppose,\" Gwen said with a smile. \n\n\"I just don't understand how you can fall in love with someone who abducted you.\" \n\n\"You came into this of your own free will. If you hadn't, would you hate Sugar or Demona?\" \n\n\"Well, I don't know...\" \n\n\"Would you hate the people who made you tall and beautiful and powerful - one of the most powerful beings on earth?\" \n\n\"If it was against my will...\" \n\n\"Oh, fuck will. Lisa, I was destined to be a mousy little housewife married to a man with tiny, underdeveloped junk. I would have been on Prozac by now and drifting through my useless, joyless life like several billion other women - and men for that matter. Alex took me away from all that. I'm a white witch, and I get to spend eternity with a man who quite literally worships me.\" \n\nLisa scoffed. \n\n\"What? You're turned off by his fucking Belynda?\" \n\n\"It's not love...\" \n\nGwen laughed. \"Oh, my sweet child - I love him so much I ache. He's my soulmate, and I'm his. I've been pushing him to add more to our harem, and he refuses.\" \n\n\"You want more?\" \n\n\"Darling, if you weren't bound to Jason, I'd be begging him to take you.\" \n\nLisa gasped. \"W... Why?\" \n\nGwen smiled. \"Isn't it obvious? I'm head over heels in love with you.\" \n\n\"But, we just met...\" \n\nGwen laughed out loud. \"A couple could be together fifty years and not match the intimacy we share with our psychic gifts.\" She cupped Lisa's face in her hands. \"I've looked into the depths of your soul, and you are the most beautiful thing I've ever seen.\" \n\nLisa swallowed. \"No. I'm not. You don't know...\" \n\n\"Of course, I know. That you manipulated Mary into having sex with her son? I know,\" she said, and then whispered. \"And, that you forced her husband, Stan, to become a shemale and believe it was his decision? I know that too.\" \n\nLisa's tears flowed down her cheeks. \n\nGwen pulled her close and kissed her. \"Shh, it's okay, Lisa. We're monsters, all of us. Powerful monsters, and we are going to do what monsters do.\" \n\nShe cried on Gwen's shoulder. \"Are we evil?\" \n\n\"Yes, dear, we are. But, we might be redeemed yet.\" \n\n*** \n\n\"Yes,\" Gwen said into her cellphone. \"I'll send the courier up with the sample today. Also, can you send that other item back with her? I'm going to need it ASAP.\" \n\nGwen smiled at the voice on the phone. \"Thank you, Demona.\" She squinted her eyes. \"Hmm? Yes, she's here with me.\" She looked at Lisa and smiled. \n\nShe winked at Lisa. \"Demona wants you to turn around.\" \n\n\"Huh?\" \n\n\"Turn around, dear.\" \n\nLisa frowned and turned away. \n\nThe phone camera made a clicking noise. \n\nLisa jumped at the sound. \"What? Did you take a picture?\" \n\nGwen laughed. \"There, did you get it?\" Gwen bit her lower lip. \"Yes, I think she has an amazing ass as well.\" \n\n\"Fuck! Did you take a picture of my ass?\" Lisa whined. \n\n\"Yes, real spank bank material. You're welcome. Now, don't forget to send my item, okay?\" \n\nLisa turned red with embarrassment. \n\n\"Love you too, Demona,\" Gwen said as she ended the call. \n\nGwen burst out laughing. \"Looks like I'm not your only fan.\" \n\nLisa turned away. \n\n\"Lisa, there is nothing wrong with being beautiful. Get used to the attention.\" \n\n\"I... suppose.\" \n\n*** \n\nBelynda was lying on her back on the tile floor, Jason's cum covering her face and drenching her hair. \n\nAlex ran a finger down her hard muscled, tattooed stomach. \"She's quite a find.\" \n\nShe smiled in her sleep as Jason washed her face with a warm rag. \n\nAlex smiled. The boy had potential. He was already showing compassion to his conquests. \n\nThat was the hardest part to get across to male recruits: the women weren't property, they were to be cherished. A whoremaster's job was to keep them happy and safe. \n\nAlex wasn't sure what the overall plan was for Jason, but it obviously included taking possession of \"normals\", and, in Alex's estimation, that made him a whoremaster. \n\nJason smiled. \"It's weird. It's like I've known her all my life, you know?\" \n\nAlex nodded. \"Yeah, I know that feeling. How do you feel about Lisa?\" \n\n\"Huh? I love her - I mean, she's like a part of me? Only, with Belynda I feel like I have to look out for her.\" \n\nAlex laughed. \"Yeah, but not Lisa. White Witches don't need our protection. Fuck. We might need theirs.\" \n\nJason laughed. \"I think you might be right. She scares me sometimes.\" \n\n\"Mine scares me too. But, it's a good kind of scared,\" Alex caressed the girl's face. \"Goddamn. She's beautiful.\" \n\n\"Do we really need to make changes to her?\" Jason asked. \n\n\"Not a lot, but yeah. At the very least, she needs to be sterilized - the Church demands zero population growth, at least for now. We're immortal, can't be filling the earth with babies on top of that.\" \n\n\"But, it can be undone, right?\" The boy asked. \n\n\"That's the story I've been told. Then, after that, we'll give her transformative ambrosia, which will make her immortal and invulnerable to disease - she belongs to you, so everything beyond that is up to you.\" Alex scooped her up. \n\nBelynda moaned in her sleep. The two of them had literally fucked her unconscious. \n\nAlex laid her on the operating table. \n\nBelynda's eyes fluttered open. \n\nHe put his hand on her eyes. \"Sleep.\" \n\nShe went limp on the table. \n\nAlex laughed. \"That's almost the extent of my mind control ability. Other than that, I can influence them for a few hours. That's it.\" \n\n\"Not me. I can rewrite her beginning to end if I want,\" Jason said. There was no boasting in the comment. The boy was just stating fact. \n\n\"So I hear - you have to be careful with that.\" \n\n\"Tell me about it. I made Mama Jugs in a few seconds. Just wiped the old lady's brain and reprogrammed her in the blink of an eye - it was like I didn't even have control of it, you know?\" He shivered. \"Scares the fuck out of me.\" \n\n\"Good. Remember that. Powers like we have can go to our heads real fast.\" He said and pointed to a medical cart. \"Get me the sterilizer - looks like a dildo with a pistol grip.\" \n\nJason picked up the long dildo and handed it to him. \n\nAlex rubbed lubricant into Belynda's shaved pussy. \n\nThe girl moaned in her sleep. She spread her legs gently. \n\n\"Good girl,\" Alex whispered. He nudged the end of the dildo against her pussy lips and the woman opened. Alex eased it gently inside. \n\n\"Will this hurt her?\" Jason asked as he watched the dildo glide deep inside. \n\n\"No. It will anesthetize her at the same time. She won't feel a thing in a few seconds.\" Alex smiled as the dildo nudged against her cervix. \"There. I'm against her cervix. This next bit will help her take monster cocks.\" \n\nHe squeezed the trigger, and it popped. \n\nBelynda jumped. \n\nJason looked concerned. \n\nAlex shook his head. \"Just the sound. She couldn't feel it. It's dilating her cervix. The next time you fuck her, you'll be able to go past it into her womb. It's also sealing her Fallopian tubes. Nice long pussy we can go balls deep in.\" \n\nJason laughed. \n\nAlex slowly withdrew the sterilizer. \"Now let's inject her ovaries and then you can decide on her breast size.\" \n\n*** \n\nGwen led Lisa to a stairwell that led down to the sub-basement. \"We got our extra level at the same time they re-did Stallion's - although, they got ten levels and we got two.\" \n\n\"Ten levels?\" \n\n\"Mmm, hmm. Stallion's is the biggest conversion center in the US. Second only to the main conversion center under the Cathedral of Morpheus in Havana. But, Stallion's would fit in one corner of the cathedral complex. Havana converts a hundred tourists a day.\" \n\n\"What?!\" \n\nGwen laughed. \"Yeah, all those people going down to the new Havana for a 'sexcation'? One to two percent per day are extending their stay indefinitely. It's amazing. I'll take you there someday.\" \n\nLisa looked horrified. \n\nGwen smiled and squeezed her hand. \"Poor thing, you're still in shock from this whole business. You'll adjust. Trust me.\" \n\nGwen opened a door and led Lisa into the sub-basement. It was a replica of the floor above. \n\nOnly the screams were different. \n\nLisa froze in horror. \n\nIn one corner of the room, a cell held three women dressed in cheerleader outfits emblazoned with the words Ithaca College. \n\nGwen squeezed Lisa's hand and pulled her forward. \"It's okay, Lisa. This is no different from the things you did yesterday.\" \n\nLisa shook her head. \"I can't. I just can't do this anymore.\" \n\n\"Let us go! Please! We won't tell anyone,\" one of the girls yelled. \n\n\"Look at them and tell me what you see?\" Gwen whispered. \n\nLisa looked at the three in the cell. \n\nThe one who had spoken was a medium height strawberry blonde. She stood, gripping the bars and pleading with her eyes. \n\nOn the floor beside her, an athletic brunette rocked slowly and cried. \n\nBeside her, a tall black girl stared daggers at Gwen and Lisa. \n\n\"Cheer... cheerleaders?\" Lisa whispered. \n\n\"Yes, but look in their minds.\" \n\nLisa concentrated, trying to see behind the women's eyes. \n\nShe touched the strawberry blonde's mind. \n\n\"K... Kathy... she's from Omaha.\" Lisa squinted. \"Pre-med.\" \n\n\"But?\" \n\n\"She... her grades aren't good enough...\" \n\nThe woman stared at Lisa and shrank back. \n\n\"Yes,\" Gwen said. \"Even though she slept with both her organic chemistry and biology professors.\" \n\nOf course, she could see it now. The girl was a slut. \n\n\"Next,\" Gwen whispered. \n\nLisa turned to the brunette. \"Hai... Hailey. New York City. Stole her sister's boyfriend...\" \n\n\"Real bitch, huh? Next.\" \n\nLisa looked into the black girl's eyes. \"Mikaela. From the Hamptons... bullied a girl in high school so bad she attempted suicide...\" \n\n\"No, I didn't! I never did that!\" Mikaela growled. She stood up and grabbed the bars. \n\nLisa's eyes flashed with anger. \"Yes, you did! You said she was fat, made everyone else make fun of her. That poor girl.\" \n\nMikaela jumped back like she had been struck. \n\nLisa looked at Gwen. \"Are they all like this?\" \n\n\"What? Normal people? Some. Not all by any means. Most aren't as bad as these three,\" Gwen said. She walked to the cell and the three cheerleaders shrank back. \"We started out with the entire squad - snatched them at an away game a few weeks ago and faked their deaths. Such a tragedy.\" She smiled, and Lisa saw the flash of evil in Gwen's eyes. \n\nGwen shifted her eyes to Lisa. \"Yes. It's always inside us, Lisa. Just below the surface. Circling like a shark. We can't stop the evil, but, with practice, we can control it.\" \n\nThe women in the cage looked terrified. \n\nGwen put her hands on Lisa's waist. \"I saved these three for the last. I wanted to prolong their terror because, well, they deserve it. They're horrible people.\" She caressed Lisa's cheeks. \"We can feed the evil inside us, keep it at bay, but we can choose to focus that evil on bad people.\" Gwen smiled. \"We're still evil, but we could be worse.\" \n\n\"You evil bitch!\" Mikaela screamed. \"She did vile things to our friends. Made us watch.\" \n\nGwen's eyes narrowed. \"If by vile, you mean I turned them into happy bimbo sluts? Guilty.\" \n\n\"Happy?\" The strawberry blonde, Kathy asked. \"How could anyone be happy as a sex slave?\" \n\nGwen licked her lips and winked at Kathy. \"You'll know soon enough.\" \n\nKathy stumbled backward and almost knocked the brunette, Hailey, to the cell floor. \n\nGwen laughed. She took Lisa's hands. \"Sometimes, you need to give in to your baser instincts, Lisa. Now is one of those times.\" \n\nLisa looked at the terrified threesome in the cell. \n\nSlowly, the corner of her lips turned up in a smile. \n\n*** \n\nBelynda lay sleeping on the operating table. Her breasts were swelling. Jason had requested G cups for the beautiful Latina amazon, and they were filling out slowly. \n\nAlex adjusted a headset over her eyes and fixed the earphones in place. \"SlutzNet, program the subject: advanced sexual techniques, BDSM, Krav Maga, Okinawan Karate, kickboxing, marksmanship, knife fighting, archery.\" \n\n\"Program initiated,\" a man's disembodied voice announced. \n\n\"What the hell was that?\" Jason looked around. \n\n\"SlutzNet? It's the Church's AI. Handles all the brainwashing not done by the white witches.\" \n\nBelynda's eyes jerked side to side behind the headset visor. Her arms and legs twitched. \n\n\"It's teaching her all that?\" Jason asked. \n\n\"Oh, yeah. You wanted a sexy bodyguard, you're getting a sexy bodyguard. She'll be lethal,\" Alex said. \n\nJason smiled and shook his head. \"Can it do that for me?\" \n\n\"Afraid not. You've already taken transformative Ambrosia. Nothing works after you officially become one of us - not even white witch mind control. Your cum only enslaved Belynda, it didn't transform her, so we can change her body and mind. After that, we'll give her Ambrosia and make her immortal.\" ",
        "Jason smiled. \"Hey, is it too late to add programming?\" \n\nAlex shook his head. \"No. What else do you want? Just tell the AI.\" \n\nJason looked at the ceiling. \"SlutzNet. I want her to be a great dancer... exotic dancer, pole dancing, stripping, that kind of shit...\" \n\n\"Acknowledged. Exotic dancing programming added to queue. Scat added to queue,\" SlutzNet said. \n\nJason looked confused. \"Scat? What...\" \n\n\"You said shit,\" Alex said shaking his head. \n\n\"Shit? I don't... Oh, no! Gross! SlutzNet! No scat!\" \n\n\"Scat programming removed from queue.\" \n\nAlex just shook his head. \"Very literal our AI. You have to be careful.\" \n\nJason nodded. He took Belynda's hand and squeezed it. \n\nAlex smiled. The kid was definitely holding on to his humanity. That was a good thing. \"Alright, kid, let's let her cook. It's going to take a few hours. We have chores.\" \n\nJason frowned. \"Chores? Are you serious?\" \n\nAlex shook his head. \"It's a farm, man. There's always chores.\" \n\n*** \n\nKathy screamed bloody murder as Gwen and Lisa carried her out of the cell. \n\nThe other two cowered in a corner. \n\nKathy kicked and fought as she was carried beyond the cell door. \n\n\"Kathy! Stop it! You're going to hurt yourself. Paralysis,\" Gwen said. She had Kathy's shoulders while Lisa struggled to maintain a grip on her ankles. \n\nThe woman instantly went limp between them, but she continued to scream. \"Let me go! Goddamn you! I'm not going to be one of your fucking whores!\" \n\n\"Stupid slut,\" Gwen said. \"You're already a whore. How many dicks did you suck to get through school to this point?\" \n\nShe burst into tears as Gwen and Lisa laid her on an operating table and Gwen strapped her down. \n\n\"You know, Kathy,\" Gwen said. \"If you had a few more IQ points in that pretty skull? You'd be Professional Caste. After you became a doctor, we'd turn you into a goddess, make you immortal, you'd want for nothing.\" \n\n\"Let me go!\" \n\n\"Paralysis off,\" Gwen said. \n\nKathy began to fight and squirm on the table. \n\nLisa looked quizzically at Gwen. \n\nGwen shrugged. \"It turns me on to watch them struggle with the bondage. You as well, I bet.\" \n\nLisa bit her lower lip. She had to admit, watching the nubile coed strain against her bonds was making her even more wet than usual. \n\n\"Thought so,\" Gwen said and hugged Lisa's shoulders. \n\nGwen leaned over Kathy. \"If you had just worked a little harder on your brain and a little less on that hot little mouth? You wouldn't be in this mess.\" \n\nKathy tried to spit at her, but it landed short on her own chin. \n\n\"Don't worry, sweetie. The Church isn't going to waste your true talents. They believe in conservation.\" Gwen turned back to Lisa. \"How fast does Jason's cum work?\" \n\n\"Real fast. Like instant.\" \n\n\"And, it really only takes a drop?\" \n\nLisa shrugged. \"It's hard to say precisely. He cums like a fire hose.\" \n\nGwen held up the glass of cum. \"Let's experiment and find out.\" She dipped her finger in and withdrew a single pearl on her fingertip. She waved the drop in front of Kathy's panicked eyes. \"Kathy, sweetie, we're gong to see if this tiny little drop will enslave you. Ready to find out?\" \n\nKathy squeezed her lips shut. \n\nGwen laughed. \"See? She's completely focused on oral. Did I say anything about making her lick it? No. She just assumed if she was getting cum, it was going in her mouth. What a whore.\" Gwen flicked the drop into Kathy's right eye. \n\nThe woman screamed and the other two screamed with her from the cell. \n\nGwen looked up at Lisa. \"Clear your mind. Don't give her any instructions if you can help it.\" \n\nLisa frowned wondering what Gwen was planning. \n\nKathy went silent. She blinked and stared at the wall. \n\n\"Hmm,\" Gwen said. \"Kathy, how do you feel?\" \n\n\"Scared. I'm scared.\" \n\n\"Why?\" Gwen caressed her face and she didn't pull away. \n\n\"Feel... strange. Scares me.\" \n\n\"Don't be afraid, Kathy. It's going to be okay now.\" Gwen stood up and pulled a curtain across the front of the cell, blocking Kathy from the other girls' view. \n\nShe knelt back beside Kathy. \"I'm going to unstrap you now, Kathy. You're not going to fight or try to run, are you?\" \n\n\"No,\" she said. Her eyes looked like she was almost asleep. \n\n\"And, you won't scream or yell?\" \n\nShe blinked and stared into Gwen's eyes. \"Do you want me to?\" \n\n\"No, honey, I want you to be calm and relaxed.\" \n\n\"Okay.\" \n\nGwen began unbuckling the straps. She looked up at Lisa. \"One drop. That's all it took.\" \n\nKathy returned to staring at the wall. \"I need... somebody...\" \n\n\"What do you need, honey?\" Gwen whispered. \n\n\"I need somebody to tell me what to do,\" Kathy whispered. Tears began to flow down her face. \n\nGwen shook her head and stroked the girl's forehead. \"Completely submissive. I'm not sure she has one ounce of willpower left in her.\" \n\nLisa shook her head. \"She's acting different than the ones Jason did directly.\" \n\nGwen smiled. \"Yes, because Jason or you or one of the other witches was always there to influence them. They instantly knew what to do - you were telling them, sometimes even subconsciously. Without your influence, she's just an empty vessel waiting to be filled. We don't even have to use our powers - anyone could influence her.\" \n\nKathy began to tremble. \n\nGwen took her hand. \"It's going to be okay, Kathy. Don't be frightened.\" \n\nShe nodded. \n\n\"From now on, you will address me as mistress. Lisa as well. Do you understand?\" Gwen whispered. \n\n\"Yes, mistress.\" \n\n\"Good girl. Those words make you very happy. When your mistress calls you a good girl, it's the best feeling in the world.\" \n\nA slow smile spread across the girl's face. \"Oh, yes, mistress. Thank you.\" \n\nGwen smiled. \"That's right. Now, you're going to give up on that silly dream of being a doctor. You're much better suited to being a whore. Say it.\" \n\n\"I'm much better suited to being a whore, mistress.\" \n\n\"That's right. You're such a slutty whore, aren't you my good girl?\" \n\nKathy giggled and squirmed. \"Yes, mistress!\" \n\nGwen stroked her hair. \"So pretty. Now, I have some things I want you to do. My good girl would do them without hesitation. You're going to be my very good girl, aren't you?\" \n\n\"Yes!\" \n\n*** \n\nJason followed Alex toward the big whitewashed barn behind the house. Jason had put on his jeans and sneakers. He looked at the barn wearily. \"What kind of farm is this exactly?\" \n\n\"Umm, dairy I guess you would say,\" Alex said. The huge whoremaster had put on a grey sweatsuit and also wore track shoes. \n\n\"Dairy? Don't we need different shoes?\" \n\nAlex turned and stared at him. \"Huh?\" \n\n\"You know? Manure?\" \n\nAlex laughed and continued toward the barn. \"You'll be fine, kid.\" \n\nHe opened the door. \n\nJason had expected a big barn door, but instead the barn doors themselves were a facade. A normal steel door opened, and Jason felt a cool blast of air conditioning from inside. \n\nHe followed Alex into a hallway of white tile similar to the basement. \n\n\"Hey, I don't get...\" Jason began. \n\n\"You'll see. Just come on.\" Alex opened the first door on the left. \n\n\"The fuck?\" Jason asked. \n\nThe room was another operating theater. \n\nA big, hairy guy was strapped spread eagle to the table. His eyes stared straight up at the ceiling - his dick was straining in the same direction. \n\nA tall, brown haired woman wearing Daisy Dukes and a red bandana halter top was standing between his widespread thighs, jacking his cock slowly. \n\n\"Who the hell is this?\" Alex asked pointing at the bearded giant on the table. \n\nThe brunette turned around and sighed. \n\nShe had a huge bruise on her jaw and an even angrier looking one on her bare midriff. She groaned as she opened her mouth. \"His name is Henry Bruner, cameraman for WNYC. Caught him snooping around last night.\" She pointed at a disassembled camera on a table beside him. \"Don't worry. I destroyed his tape.\" \n\nAlex caressed her cheek. \"Did he do this to you?\" \n\nShe smiled and shook her head. \"Naah, big boy hit the ground without a sound. His friend though, she beat the shit out of me.\" \n\n\"She?!\" \n\nThe brunette nodded. \"Hot little blonde, misjudged her. Fights like an MMA star.\" She let herself be drawn into Alex's arms as he probed the rise on her jaw and then her abdomen. \n\n\"This needs Insta-Heal. I'm tempted to call in Demona - you could have internal bleeding,\" Alex said. \n\n\"I'm okay, boss. Just hurt my pride.\" She reached down and squeezed Alex's package through his bulging sweatpants. \"But, if you really want to make me feel better?\" She grinned, and then winced from the pain. \n\nHe rubbed her hair. \"Later.\" \n\nShe looked over Alex's shoulder at Jason. \"Who's your friend?\" \n\n\"Oh, Heather, meet Jason. He's one of Demona's experiments. He's going to be staying with us for a few days.\" \n\nHeather smiled and looked at Jason's crotch. \"Experiment, huh? Tell me more.\" \n\nJason blushed. \n\n\"Heather is in charge of the dairy operation,\" Alex said. \"And, she's our unofficial security chief.\" He guided her to a seat and made her sit down. \"Though, I'm beginning to re-think that.\" \n\n\"Hey! Bitch sucker punched me, okay? I was afraid to clock her too hard with my flashlight. Bitch blocked it. If I had it to do over again, I'd have broken her fucking arm.\" \n\n\"Lean back,\" Alex said as he knelt down and pressed on her stomach. \"Does this hurt?\" \n\n\"Fuck yes!\" Heather snapped. \n\n\"Yeah, I'm calling Demona.\" \n\n\"Please don't fuss, boss. I'm fine.\" She smiled, showing off a shower of freckles around her cute nose. \n\n\"What happened to the woman?\" \n\n\"Ran off into the woods going north.\" \n\n\"What?! How long...\" \n\n\"Relax,\" Heather said and pointed at a bank of TV monitors on the wall behind her. \"She ran deep into the woods. She's about a mile from here.\" \n\nA monitor on the wall showed a woman sitting with her back against a tree in a dense forest. \n\n\"Dumbass doesn't realize we have cameras and cellphone blockers going back five miles. On top of that, she's running in the wrong direction. She'll wander back eventually.\" Heather smiled. \"Then I'll have round two, and I won't be gentle this time.\" \n\nThe woman on camera was tall and thin with light blonde hair and a pretty face. She was dressed in a pencil skirt and white blouse, not exactly hiking apparel. The only thing she had going for her were the boots. \n\nAlex stared at the monitor. He snapped his fingers. \"Rebecca Tanner. She's a TV reporter. I've seen her on the news.\" \n\n\"Reporter or not, her ass is mine,\" Heather said. \n\nAlex nodded. \"You can have fun, just don't damage her if you can help it. She might be useful.\" He nodded toward the naked cameraman. \"What about him?\" \n\nHeather grinned. \"Can I keep him? I mean, I think I earned a little bonus.\" \n\nAlex shrugged. \"Yeah, I suppose. What do you have in mind?\" \n\n\"I need an assistant. And, I'll bet I could make him useful in all sorts of ways. He'll need some 'upgrades' though. That schlong isn't going to hit my deeper spots.\" \n\n\"No more than thirteen inches. I'll write him down as Professional Caste, bound to you. Gwen will condition him for you. Gonna take a lot of hair removal formula - that guy's a Sasquatch.\" \n\nJason laughed. \n\n\"Hair removal? No way! I like 'em big and hairy,\" Heather laughed and then hugged her stomach from the pain. \n\nAlex turned back to the monitor. \"She's cute. Make her time in the forest memorable.\" \n\nHeather nodded. \"Way ahead of you. Every time she gets next to one of our hidden units, I spray her with aphrodisiac.\" She leaned over and pressed a button. \n\nOn the monitor, a gentle mist fell from the tree limbs onto Rebecca Tanner. \n\n*** \n\nThis was a nightmare. \n\nRebecca leaned back against the oak tree and shivered. She had been out all night hoping she would find another house or a road. \n\nInstead, all she had found was more forest. \n\nShe had run in the wrong direction, and her cellphone GPS refused to work. Nor, could she make any calls - there was no signal. \n\nThe crazy woman in the Daisy Dukes had seriously underestimated her. Most people did. \n\nRebecca had grown up a military brat - her dad was an army drill instructor and she was the only girl in a family with five boys. \n\nShe had drawn Daisy Dukes in with her meek act before taking her down. \n\nOnly, the blows she inflicted should have knocked the bitch out cold, not just knocked her on her ass. \n\nDaisy Dukes was one tough bitch, and Rebecca hoped she wouldn't run across her again. \n\nOf course, that wasn't going to help poor Bear. \n\nShe had him, and God knew what they would do to him. \n\nShe had run and left Bear in the clutches of human traffickers, people who had abducted dozens of victims and made them disappear. \n\nBut, she hadn't had a choice: she had barely escaped them herself. \n\nThe best thing she could do was get to civilization and contact the authorities - not the locals, she needed the state police, maybe the FBI. \n\nShe looked around. Every direction in the thick woods looked the same to her. Rebecca's dad had been great at teaching hand to hand combat, but he hadn't bothered teaching her how to survive or navigate in the wilderness. \n\nThe people in the farmhouse were most likely searching for her. \n\nShe had to keep a clear head and keep moving. \n\nThe clear head part, though? That was a problem. \n\nBecause, for the last two hours, all she could think about was sex. \n\nIt didn't make any sense. Why would her brain fixate on fucking at a time like this? It wasn't normal. \n\nBut, her nipples were hard as ice shards, her pussy tingled, and she was literally dripping from her soaked panties. \n\nHad she been drugged? How? She hadn't eaten or drunk anything at that perv Clinton Travers's house. \n\nRebecca looked nervously from side to side. \n\nFuck it, she thought. She reached down and pulled her skirt up to her waist. \n\nShe touched her soaked, silk panties and a tremor went through her. She slipped a finger beneath her panty crotch. \n\nHer eyes opened wide. She had never been so wet! \n\nHer fingertip brushed her erect clit and she slumped against the tree, knees shaking as her body erupted in an orgasm. \n\nShe jammed her middle and ring finger deep inside her clenching pussy as she brought her other hand up to stifle a scream. \n\nNot possible! She thought. It's not possible! \n\nThen she felt a second wave building and she dropped into a squat, legs spread wide as she fucked herself hard with two fingers. This time when she came, she felt her body squirt - something she had read about but never experienced. It wet the ground beneath her. \n\nHer mind was a chaos of erotic thought - Bear fucking her, sharing Bear with Daisy Dukes, hands all over her, probing her. \n\nShe dropped the hand from her mouth and mauled her breasts as the tremors in her body subsided. \n\nShe dropped to her hands and knees, panting like an animal. \n\n\"Have to stop! Have to stop!\" She hissed through clenched teeth. She struggled to her feet. \n\nMorning mist fell all around her. \n\nA moment later, she lay down in the wet grass, legs spread wide, and began rubbing out another delicious cum. \n\n*** \n\nHeather watched the pretty reporter pleasuring herself on the camera hidden in the tree above her. \"She's a bitch, but she's a hot bitch.\" \n\n\"You'll need to retrieve her at some point,\" Alex said. \"You want Jason and me to go get her?\" \n\n\"Naah, I got plans,\" Heather said. \"Besides, I put off the milking this morning per your request. They'll be hurting soon.\" \n\n\"Okay, if you're sure.\" Alex led Jason to a door on the far side of the room. \n\n\"Seriously?\" Jason said. \"All this shit going on and we're milking cows?\" \n\nAlex laughed. \"They really don't like being called that.\" He opened the door. \n\nJason looked inside. \"Holy shit...\" \n\n\"You say that a lot,\" Alex said. \n\nThe room beyond was about thirty feet on a side. The floor was padded and the room was warm. \n\nFifteen women lounged naked on the cushioned floor. \n\nThey looked at him with half-lidded eyes. \n\nThe women were beautiful, none over the age of forty. Some tall, some short, some medium, and of all ethnicities. \n\nAnd, all with identical, huge breasts that made Gwen's look small. Their thick, erect nipples were clamped shut with black, plastic clips. \n\nA platinum blonde put her arms around Alex's neck. \"H.. Hi, Alex,\" she whispered sleepily. \n\nAlex smiled and embraced the sleepy blonde. \"Regina? I didn't know you were back.\" \n\n\"Mmm, hmm,\" she mumbled. She rubbed her crotch against Alex's. \"Last... night.\" \n\nThe woman had a tattooed barcode on her left buttock. \n\nLooking around, Jason saw that all of them were tattooed the same way. \n\nJason felt a hand cup his erection through his jeans. \n\nA brunette with short hair smiled up at him from the floor. \"Hi.\" \n\nJason smiled. \"Hi.\" \n\nShe held out her hand and Jason helped her to her feet. \n\nThe brunette was all boobs, like the other women in the room. \n\n\"That's Patsy. Physicist from... MI... MIT?\" Regina said. \"Met last night. Nice tongue.\" \n\nPatsy laughed and leaned against Jason, pressing her mountainous breasts against him. \"You know. I never ate pussy till I came here. God, I was stupid.\" \n\nJason looked from Regina to Patsy. Regina seemed dopey as shit, but Patsy just looked stoned. \n\nAlex laughed, picking up on what Jason had noticed. \"IQ. The smarter they are, the more IQ they retain. Patsy is a genius...\" \n\n\"Theoretical particle physicist,\" Patsy whispered. She was rubbing Jason's length through his pants. \"God, how big is this?\" \n\n\"Please milk us. I hurt,\" Regina whined. \n\n\"In a second, hun, I promise,\" Alex said. \"Regina is CEO of one of the biggest pharmaceutical firms on earth - she's no dummy either. That's why the two of them are able to make complete sentences.\" \n\nJason did a double take. \"A particle physicist and a CEO?! And, you did this to them?\" \n\n\"Relax. It's temporary. They'll leave here as 'normal' double D cups.\" Alex kissed Regina's cute upturned nose. \n\n\"Not until after vacation is over, though,\" Patsy laughed. \n\nJason shook his head. \"You mean they're here of their own free will?\" \n\nAlex laughed. \"Of course. They're all destined for Professional Caste...\" \n\n\"Then why...\" \n\n\"They're also in high stress jobs, Jason. All these women jumped at the chance to take a week's vacation where they are incapable of worrying about anything. They have kinky sex for a week with no strings attached. Plus, they leave with the best boob jobs on earth.\" Alex held Regina's waist in his hands. \"Most come back, don't they, Regina?\" \n\nShe giggled and snuggled against him. \"And coming and coming and... ooo, please Alex. I need some relief.\" \n\n\"Sure.\" He looked at the other women in the room. \"Milking time, ladies.\" \n\nThey made their way to a set of double doors on one side of the room. \n\nPatsy clung to Jason as they followed behind Alex and Regina. \n\n\"They need milking once every twelve hours, or it starts to hurt,\" Alex said. \n\n\"What the hell do you do with all the breast milk?\" Jason asked. \n\nAlex laughed. \"Ambrosia, kid. They produce Ambrosia - and we use that by the gallon. Where did you think it came from? We're taking over the worled, can't do it with just us making the Ambrosia. Hucows - they're the future.\" \n\n*** \n\nBack at the house, Gwen opened the curtain that covered the cell as Lisa unstrapped the dazed cheerleader, Kathy. \n\nInside the cell, the brunette, Hailey, whimpered. \"Oh, God, what did you do to her?\" \n\n\"Cocksuckers!\" Mikaela yelled beside her. \n\nGwen laughed. \"You say that like it's a bad thing, you silly bitch. Don't you like cock?\" \n\nLisa giggled as she undid the last strap on the still motionless Kathy. \n\nGwen leaned over and kissed Kathy's cheek. \"It will take her a while to recover, let's see what other mischief we can get into.\" ",
        "She held Lisa's hand as they headed for the stairwell. \"Now, you girls behave.\" \n\n\"Fucking psychopaths!\" Mikaela screamed. \n\nGwen and Lisa laughed as they shut the door behind them. \n\nHailey gripped the cell bars. \"Kathy? Kathy? Can you hear me?\" \n\nOn the table, Kathy blinked. \"Are they... gone?\" She whispered. \n\n\"Yeah,\" Mikaela said as she craned her neck to look at the door. \n\nKathy sat up. \"It didn't work.\" She rolled to her feet. \n\n\"Huh?\" Hailey asked. \n\n\"Whatever the fuck they tried to do to me, it didn't work.\" Hailey ran to the cell. A few yards to the left, a set of keys hung on a hook. She walked over and grabbed them. \n\n\"But... it always worked before,\" Hailey said. \n\n\"Yeah, well, whatever they did to me it didn't work.\" Kathy turned the key in the lock. \n\n\"How... do we know?\" Mikaela asked. \n\n\"Fuck, Mikaela? Would I be letting your ass out if I was one of those fuck toy zombies?\" \n\nThe cell door opened and Hailey rushed into Kathy's arms. \"Thank God! Oh, thank God. Please, Kathy, let's get out of here.\" \n\nKathy smiled at her, and then grabbed her in a tight embrace and kissed her. \n\nMikaela stumbled backward as she watched Hailey struggle against the passionate kiss. \n\nKathy rocked her hips forward and pressed her crotch against Hailey's bare thigh. \n\nHailey stopped struggling. She went limp in Kathy's arms. \n\nKathy broke the kiss and Hailey's head lolled back. \n\nShe leaned Hailey agains the cell wall. \n\nMikaela was in shock. \n\nHailey looked slowly down at her thigh. \n\nA milky white substance was dripping down her leg from where Kathy's crotch had touched her. \n\n\"It's on me,\" Hailey whispered. \"It's on me.\" \n\nKathy smiled and nodded. \"Doesn't it feel good, Hailey?\" \n\nHailey was breathing hard. \"Y... Yes. What is it?\" \n\n\"Cum. They poured lots and lots of it in my pussy.\" \n\nHailey reached down and wiped at the cum on her thigh with her index finger. She held up her wet fingertip. \n\nAnd, then she licked her finger clean. \n\n\"Tastes... so good.\" She whispered as she slid down the wall. \n\n\"Why?\" Mikaela whispered. \"Why did you...\" \n\n\"Because they told me to, silly.\" Kathy said as she walked toward Mikaela. She lifted the hem of her cheerleader skirt showing the dripping creampie between her legs. \n\n\"Stay back! Stay back! So help me, Kathy, I'll beat the shit out of you.\" \n\nKathy just smiled. \"Hailey, let's give Mikaela a taste too. Help me.\" \n\nThe brunette on the floor lunged forward and clubbed the back of Mikaela's knees with her forearm. \n\nThe black girl dropped to her knees with a scream. \n\nHailey twisted around behind her and got Mikaela in a full Nelson. \"Don't fight. It doesn't hurt. It feels good, Mikaela.\" \n\n\"No!\" Mikaela fought and struggled as Kathy stood in front of her, legs spread. \n\n\"Come on, Mikaela. We've been in here a long time. You've got to be horny as fuck. The three of us are going to be even closer than before.\" Kathy gently spread her cum slick labia apart. A single drop of white cum dangled down. \n\nMikaela was crying. \n\nHailey began kissing her shoulders, the back of her neck. Her tongue playfully licked up the side of Mikaela's neck and she blew in Mikaela's ear. \n\n\"No. Please. I don't want this.\" \n\n\"No,\" Kathy said as she lowered her pussy to Mikaela's lips. \"You don't want it, but, you will. You're going to want it sooo much, Mikaela. You'll understand in a minute. You're going to love it. Now, don't fight. Just kiss me.\" \n\nMikaela shook. She closed her eyes and opened her mouth. \n\nThick cum dripped onto her tongue. \n\nHer eyes snapped open. She gazed up at Kathy. \n\nHer beautiful friend nodded and smiled. \n\nMikaela moaned as she locked her mouth on Kathy's overflowing cunt and sucked. \n\n*** \n\nGwen opened the stairwell door when the moaning started. \n\nShe and Lisa walked in to find the three beautiful cheerleaders in a daisy chain on the cell floor, mouths and fingers exploring each other's pussies. \n\nGwen knelt by the bars. \"Such good girls. Now, you three just explore as long as you want. I'll be back soon to begin your modifications and training.\" \n\nThe girls continued to suck and moan, seemingly oblivious to their mistress's words, but obeying nonetheless. \n\n*** \n\nIn the barn, Alex led Jason and the hucows into the milking room. Like the rest of the rooms, it was sparkling white. A hissing sound filled the room. Fifteen identical chrome stands were lined up in the long room. The stands were made from round pipes. \n\nJason was still trying to figure out how the stands worked when the women began climbing into them. The stands clamped them in as they knelt on them. \n\nThe stands put them on all fours, their huge breasts dangling down. Their asses were raised high and their backs were arched. \n\nAlex nudged Jason and handed him a ring. \n\nJason stared at it: a black, metallic band. \n\nAlex held up his right hand. An identical ring was on his ring finger. \n\nJason tried to slide it onto his own ring finger, but found it was much too large, having obviously been sized to Alex's huge hands. \n\nIt fit well on his thumb. \n\n\"What's it for?\" \n\n\"It's magnetic,\" Alex said. \"Press it against the girls' nipple clamps and they'll release. Just be quick and get the suction cups on their nipples before they leak too much Ambrosia.\" He pointed at clear plastic suction cups attached to black hoses under the stands, two for each hucow. \n\n\"Here, I'll show you,\" Alex said. He knelt by Regina. \"Ready, honey?\" \n\n\"F... Fuck yes. Goddamn, I'm aching,\" she moaned. \n\nJason licked his lips as he watched the restrained Regina moving her ass in sensuous circles. Obviously, she needed more than just milking. \n\nAlex held one of the suction cups in his left hand. \n\nHe touched the ring to Regina's left nipple clamp. It snapped open and fell off. \n\nA spurt of Ambrosia sprayed from Regina's engorged nipple, which Alex deftly caught in the suction cup before letting it suck onto Regina's areola. \n\nThe machinery sucked gently but rhythmically on Regina's nipple, each pull filling the clear plastic cone with milky fluid that disappeared into the black hose. \n\n\"Ooo, yes!\" Regina moaned. \n\n\"J... Jason? Please!?\" Patsy whined from the stand beside Regina's. \n\nThe dark haired woman was straining, arching her back against the bonds. \n\n\"Oh, I'm sorry, Patsy!\" Jason shook off his stupor. He knelt down beside her. \n\nHe mimicked Alex's motions, but he failed to catch the first few heavy spurts of the beautiful woman's cream. It coated his hand, and Patsy giggled. \"L... Lick it off? Please? I want to see.\" \n\nJason smiled as he affixed the suction cup to Patsy's spraying nipple. \n\nHe winked at her as he licked the delicious Ambrosia off his hand. \n\n\"Mmm,\" Patsy whispered. \"Kiss me! Kiss me!\" \n\nJason leaned forward and kissed her, letting the woman's own milk spread onto her darting tongue. \n\nHe leaned back and she smiled sleepily at him. \n\nThen he went to work on the other nipple. \n\n\"Not bad for your first time, but don't take too long. We have thirteen other girls to hook up,\" Alex said as he rubbed Regina's shapely ass. \n\nJason smiled and got to work. \n\n*** \n\nMary sat on the front porch in a rocking chair with a cup of coffee in her hand. \n\nIt's not supposed to be like this, she thought. A few days ago, she had a husband, a son, a life. \n\nNow? Her husband was transitioning into a woman, and her son... God, help her. Her son was a monster. \n\nShe trembled at the thought of how easily he had embraced this new, horrifying lifestyle. \n\nAnd, at how easily it had corrupted her. She was now a monster just as lost as her son. \n\nEven now, she imagined the depravity going on in the basement of the farmhouse. In the night, she had descended the stairs to watch. It hadn't been from curiosity. She had ventured into the torture chamber out of lust. \n\nLisa and Jason had fallen completely under the spell of the beautiful blonde dominatrix and her giant mate. \n\nWorse, it had taken all Mary's willpower not to join them. \n\nInstead, she had hidden in the room Gwen had given her. \n\nAnd, she had masturbated, filled with lust and shame. \n\nMary knew they would have welcomed her had she decided to join them in their revelry. But, she had to maintain some semblance of control. \n\nShe had spent years suppressing her desires. When she had met her husband, Stan, she was a free spirit, a swinger - they both were. Jason's own father was some faceless lover who had taken her at an orgy. \n\nHe could have been any of a dozen or more who had fucked her that night. \n\nBut, from the time she had become pregnant, she and Stan had given up the swinging life. \n\nNot that she hadn't continued to sleep around - they both had. \n\nBut, they had kept Jason isolated from it all. \n\nFor all the good that had done. \n\nNow, he was corrupt - perhaps more corrupt than she had ever even dreamed of being. \n\nShe had watched Jason and Alex walk to the whitewashed barn and could only imagine what was going on in there. \n\nImagine and throb with barely contained lust. \n\nMary hated herself for it. \n\nShe knew what she had to do, for her own sanity. Her husband and son were lost. She couldn't live with what this Church of Morpheus was doing. So, either she left, ran away as far as she could and started over, or... \n\nShe had no intention of killing herself. \n\n\"Penny for your thoughts.\" \n\nShe looked up from her coffee. \n\nThe beautiful blonde witch was standing by the kitchen door, her body straining to break free of her latex outfit. \n\n\"My thoughts are my own. Stay out of my head.\" Those words were enough to send Lisa and Jason scurrying. \n\nThe tall blonde simply smiled down at her. \n\nLisa and Jason still saw Mary as an adult, someone to respect. \n\nGwen had no such illusions. Her piercing eyes could see right through to Mary's soul. \n\nAnd, that gaze chilled Mary to the bone. \n\n\"It's not polite to give someone orders in their own house.\" The smile remained, but there was ice in the words. \n\nMary swallowed. \"I... I'm sorry. But, I don't like it when my mind is violated.\" \n\nThe witch's gaze softened. She nodded. \"I understand. You don't need to fear me, Mary. I won't harm you.\" \n\nMary laughed. \"Sorry, but I'm not sure our definitions of 'harm' are the same.\" \n\nThe grin returned. \"Perhaps. But, I have a deep fondness for Lisa, and she wants you to be left alone. I will respect that. For now.\" \n\nMary drew in a breath. \"Thank you.\" \n\nLisa stepped out behind Gwen, dressed in her own white latex outfit: a form-fitting mini dress with matching thigh boots. \n\nLisa's face turned red with embarrassment when she saw Mary. She looked away quickly. \n\nGwen smiled at her protege before turning back to Mary. \"We're on our way to join the boys in their... 'chores'. Care to join us, Mary? I think you'll find it very interesting.\" \n\n\"No. Thank you.\" \n\nGwen shrugged. \"Suit yourself.\" \n\nLisa glanced up at Mary and then followed Gwen toward the barn. \n\nI have to get out of here, Mary thought. \n\n*** \n\nJason was getting better at attaching the suction cups. He hadn't lost a drop on the last two. \n\nUnlike Regina and Patsy, the other women didn't speak other than to moan or grunt. \n\nAlex had explained it was entirely tied to IQ. Both Regina and Patsy were geniuses before their injections; therefore, they retained more of their intelligence afterward. \n\nThey would all return to normal after their week's vacation was over. \n\nThe woman in the last stand, a gorgeous Japanese woman with flawless ivory skin, smiled at him as he attached the last suction cup. She looked back at her hips and moaned. \n\nHer pussy dripped with girl cum. \n\nShe looked from her hips down to Jason's crotch. \n\nShe wanted him. \n\nHis hard-on strained against his trousers. \n\n\"No!\" Patsy cried from the far end of the line. \"I saw you first!\" \n\nJason kissed the Japanese woman's hips. \"Maybe next time.\" \n\nThe woman pouted and moaned as Jason walked back down the line. \n\nAlex stopped him and handed him a foil package. \"Put it on if you're going to fuck her.\" \n\nHe stared at the condom package: CoM Super Magnum, Whoremaster Approved. \"I figured they were immune...\" \n\n\"No. They're all still human. We can't get our cum on them - turning these ladies into slaves would be very bad for business,\" Alex said with a wink. \n\nAlex pushed down his sweatpants freeing the monster cock which oozed precum on the tile floor. He rolled on the condom, which looked far too small for the log he was trying to slide it into. \n\n\"Ready, baby?\" Alex asked Regina. \n\n\"Fuck, fuck, fuck! Need you. Goddamn it, Alex. I'm going to explode.\" \n\nAlex laughed and caressed her buttocks as he knelt behind her. \"Shh, it's okay. Just relax.\" He positioned the head which was abut the size of the woman's fist against Regina's dripping hole. He pressed it against her and she cried out, her pussy opening to accept him. \n\nHe worked the head in slowly as Regina moaned and cried, her juices dripping onto the floor. \n\n\"A hard fuck increases Ambrosia production. We'll easily get two gallons out of each of them.\" His thick cock slid into the woman's stretched cunt. \n\n\"Fuck! Oh, fuck! I missed you!\" \n\nAlex laughed. \n\nJason unbuttoned and unzipped, freeing his own cock. He felt almost inadequate in comparison to the whoremaster. \n\nHe slid the condom on as Patsy smiled over her shoulder at him. \n\nThe twin suction cups pumped at her chest, the Ambrosia disappearing down the black hoses into a large container mounted on the wall. \n\nShe bit her lower lip as Jason rubbed his cock up and down her wet slit. \n\nBeside them, Regina began to moan louder. \n\nJason shook his head in disbelief. \n\nAlex was almost balls deep in her, which didn't seem physically possible. \n\nShe trembled and spasmed as Alex began to fuck her slowly but deeply. \n\n\"Please?\" Patsy whispered. \n\nJason slid gently inside her. \n\nPatsy laughed and moaned. \"God. Yes.\" \n\nSoon his thick balls were slapping against her. \n\nHe caressed her barcoded ass as he felt her reach her first orgasm, her tight pussy clenching and squeezing his cock. \n\nJason reached down and began to slowly rub her clit, hoping to coax another cum out of her. \n\nShe didn't disappoint. This time she screamed out as her juices soaked them both. \n\nJason smiled and concentrated on fucking her steadily. \n\nBeside them, Regina was babbling obscenities as Alex's cock brought her to orgasm over and over again. \n\n*** \n\nGwen looked down at the hairy giant on Heather's operating table. \"Well, he is impressive. But, you really want him that hairy?\" \n\nHeather laughed and held her sides. She winced from the pain. \"What... do you people have against hairy guys?\" \n\nGwen knelt down beside Heather. She untied the woman's bandanna halter top and caressed her bruised ribs. \"How bad is it?\" \n\n\"Hurts like a motherfucker.\" \n\n\"Poor thing. Are you sure you'll be alright?\" \n\nShe rolled her eyes. \"God, you and Alex are like mother hens. I been stove up a lot worse on the rodeo circuit - and that was before you turned me into a super slut.\" \n\nGwen laughed and kissed her. \n\nThe cowgirl moaned into the kiss. \n\nLisa licked her lips and watched. \n\nGwen turned around. \n\nLisa went red with embarrassment. \n\nGwen shook her head. \"Lisa. You need to get over your shyness. We all love each other. That's the beauty of this lifestyle. \n\n\"I... I know. I'm just not used to it yet.\" \n\nHeather smiled. \"Don't fret. It takes a while. But, once you get into your groove? You're going to have a lot of fun.\" She winked. \n\nLisa laughed. \n\nHeather held out her hand. \"Come here.\" \n\nLisa reached out and took her hand, and the woman drew her nearer. \n\nLisa hesitated. \n\nHeather beckoned her closer. \"Come on. It's okay.\" \n\nLisa leaned forward and Heather kissed her, gently sliding her tongue into Lisa's mouth. \n\nLisa moaned and sucked, and then pushed her tongue into Heather's mouth. \n\nShe felt Gwen's hand on her inner thigh. It slid up and her middle finger rubbed Lisa's clit. \n\nLisa moaned louder and Heather pushed her tongue down Lisa's throat. \n\nGwen's hands were on her back then, caressing her through the latex. \n\nThe kiss seemed to go on for an eternity. \n\nWhen Lisa finally opened her eyes, Heather was smiling up at her. \n\n\"See? You got nothing to be embarrassed about.\" \n\nLisa smiled and nodded. She stood up straight. \n\nShe turned to find Gwen lifting the unconscious man's thick cock with her hand wrapped around the base. \"I see you've injected him. He's on his way to thirteen inches, I take it?\" \n\n\"Yes. I'd like to give him more...\" \n\nGwen smiled wickedly. \"Bad girl. You know you need permission to make them really big.\" \n\n\"I know,\" Heather pouted. \n\n\"Still, this is going to be an impressive piece of meat. You want him conditioned, correct?\" \n\n\"Yes! I want him wrapped around my finger. He can be my assistant and my lover, if that's okay?\" \n\nGwen looked at her bruised ribs. \"Yes, I think you've more than earned that. Feel like helping?\" \n\nHeather gritted her teeth. \"Yeah. I think so.\" She rose to her feet, still cradling her ribs. \n\nShe reached for the button to her Daisy Dukes and groaned. \n\n\"Here,\" Lisa whispered. \"Let me.\" \n\nHeather smiled. \n\nLisa unbuttoned the denim shorts and unzipped, exposing her cute little pussy. She knelt and slid the shorts down Heather's long, tanned legs. \n\nOn impulse, she leaned forward and kissed Heather's protruding clit. \n\n\"Ooo... damn, Gwen, she's a fast learner,\" Heather sighed. She rubbed Lisa's black hair. \n\n\"She's going to turn a lot of heads, that's for sure,\" Gwen agreed. \n\nLisa stood up and kissed Heather's lips before kissing the bruise on the side of the woman's jaw. \"Anybody does that again, and they'll deal with me.\" \n\nHeather laughed. \"Yeah, the bitch that did this is all mine.\" \n\nLisa helped her forward between Bear's widespread legs. \n\nHeather climbed onto the table, straddling his waist. She stared down at him. \"Goddamn, he really does it for me, Gwen.\" \n\n\"Good! The feeling will be mutual shortly.\" Gwen laid her hand on Bear's forehead and closed her eyes. \"Lisa? Stimulate him.\" \n\nLisa smiled and knelt down between his thighs. She took his long, thick cock in both hands and began to gently lick the head. He stiffened in her hands. \n\nGwen smiled. \"Oh, I see... He's in love with Rebecca Tanner, the reporter who beat you up...\" \n\n\"It was a sucker punch,\" Heather corrected. \n\n\"Of course, dear,\" Gwen said. \"He's in love with her, but... he's just a friend with benefits to her. So much love radiating from him. What an idiot. Well, I think all that love needs a different target.\" She stroked his forehead. \"Bear, open your eyes.\" \n\n\"Bear?\" Heather whispered. \n\n\"His nickname. Suits him,\" Gwen whispered. \n\nBear opened his eyes. \n\nHeather smiled down into his dark brown eyes and smiled. \"Morning, sunshine.\" \n\n\"What? Who are...\" \n\nGwen closed her eyes. \"This is Heather. She's the love of your life. Your soulmate. You would do anything for her, Bear.\" \n\nOne of his eyes rolled back. \"Yes. Heather. God, I love you.\" He strained against his bonds. \n\n\"Shh, it's okay, Bear,\" Heather whispered. \"Don't struggle. Just let us make you feel good.\" \n\nLisa was sucking his cock in a stead rhythm. \n\n\"God... who's sucking me?\" \n\nHeather laughed. \"My girlfriend Lisa. She and Gwen are in bed with us. Isn't this fun?\" \n\nBear looked confused for a minute. Then a smile slowly spread across his lips. \"So wild. That's why I love you.\" \n\nBear said the words, but Gwen's lips moved in unison. \n\n\"Lisa?\" Heather asked. \"Could you, guide him inside me? We need to fuck sooo bad, don't we, Bear?\" \n\n\"Yes! God, Heather. I need you!\" \n\nLisa giggled and pressed his fat cockhead against Heather's slit. ",
        "Heather rocked her hips down and engulfed him, taking his cock balls deep. \n\n\"Hot! So goddamned hot,\" Bear groaned. \"Fuck! Am I bigger?\" \n\nHeather laughed. \"Of course not, I just turn you on that much.\" \n\nGwen held out her hand to Lisa, and she stood up and walked around the table beside her. \n\nHeather fucked him slowly. \n\nGwen began undoing his restraints. \"I've indoctrinated him.\" \n\nLisa gasped. \"That fast?\" \n\n\"Yes. Love is a powerful motivator, and he loves Heather more than anything.\" \n\nAs soon as his arms were free, he embraced Heather, pulling her tight against him. \n\nShe gasped. \n\nBear froze, looking down their bodies to her bruised ribs. \"Jesus! Heather what happened?\" \n\n\"That... bitch Rebecca Tanner. She hurt me, Bear.\" \n\nThe big man's eyes filled with rage. \"I'll kill her! I swear to Christ, I'll kill her for hurting you.\" \n\nHeather laid her head on his big shoulder as she continued to raise and lower her hips, taking him deep on each stroke. She smiled. \"No. We want her alive. Later. Right now, just make love to me.\" \n\nBear nodded and put his hands on her hips, squeezing her buttocks as they fucked. \n\n*** \n\n\"You ever... break a condom... doing this?\" Jason asked as he pounded into Patsy's wet pussy. \n\nAlex laughed. \"No. No mistakes. Yet.\" \n\nRegina screamed out again throwing her head back. \n\nThe other \"cattle\" in the room moaned and whined, their heightened libido's crying out for attention. \n\n\"Aiggh... damn, I'm going to...\" Jason groaned. He felt his big balls pull up and then he was cumming hard. He felt the end of the condom expanding under the pressure. \n\nA few short days ago, his cum barely filled a teaspoon. Now he could fill a drinking glass. It was surreal. \n\nHe slid out gently. \n\nThe end of the condom slipped free of Patsy who was laughing and smiling, clearly pleased with herself. \n\nHe leaned forward and kissed her toned ass. \"You were amazing.\" \n\nShe laughed. \"Mmm, likewise.\" \n\nAlex cried out and went rigid as Regina arched her back. \n\nYou could almost hear him pumping cum into the straining condom. \n\nJason sat down on the tile floor and shook his head. \"Goddamn. We fucking the other thirteen too?\" \n\nAlex laughed and pulled his softening, latex sheathed cock from Regina's hungry pussy. He sat down heavily. \"Jesus, kid? Even a machine needs a break. Don't you?\" \n\nHe shook his head. \"Nope. I want the little Japanese lady on the end...\" \n\nAlex laughed. \"You lying sack of shit.\" \n\nJason nodded and laughed. \"Yeah. I am. Goddamn, but I do want her. Maybe, after a nap...\" He lay back. \n\nAlex nudged him. \"Go dispose of that rubber and get cleaned up. One drop of cum on this floor soaking through the soles of their feet and we'll have a disaster.\" \n\n\"Check. Got it, boss.\" \n\nThe other women were moaning and whimpering as he walked past. \n\n\"Still. Doesn't seem fair,\" Jason said. \n\nAlex pointed at a door on the far end of the room. \"Open it. Code 84675.\" \n\nJason looked at the door. It had an electronic lock with a keypad. He punched in the code. \n\nThe door opened, and he barely got out of the way in time. \n\nA crowd of naked men burst through the door and dropped to their knees behind the hucows. \n\n\"Holy shit,\" Jason said. \n\n\"Yeah,\" Alex said. \"We got 'hucows' and we got 'hubulls' too.\" \n\nThe room filled with the sound of happy fucking. \n\n*** \n\n\"So, the women get nice tits, what do the guys get? Besides a week of fucking?\" Jason asked as they got dressed. \n\n\"Heightened libidos and bigger dicks. They'll leave here no less than ten inches long. We have a damned waiting list that goes out a year.\" \n\nJason watched as the bulls mounted the women passionately and noisily. \n\n\"They seem as dazed and confused as the women.\" \n\n\"They are. Works better if they're drugged - again, these are type A personalities. Can't fuck all day if you're worried about business.\" \n\nAlex and Jason left the milking room and went back to find Heather. \n\nOpening the door to her office, they found her riding Bear on the operating table. \n\nThe big guy had a huge smile on his face. \n\nGwen winked at them from where she sat watching with Lisa. \"I just love happy employees, don't you, babe?\" \n\nAlex walked over and sat down next to Gwen. They kissed deeply. They were in love, even in the midst of all this depravity. \n\nJason leaned down and kissed Lisa. \n\nShe smiled at him. \n\n\"Miss me?\" He asked. \n\n\"Yes.\" She nodded toward the table where Heather was arching her back and grinding her crotch on Bear's now massive cock. \"And, I'm turned on as fuck.\" \n\nHe laughed. \n\n\"What have you been up to?\" She ran a finger down the length of the bulge along his thigh. \n\n\"Oh, milking the cows... you know, farm stuff.\" \n\nLisa laughed. \"Oh, I know all about these cows you're talking about. They're the two legged variety?\" \n\n\"Yeah. You should go back and look. Quite an orgy going on in there.\" \n\n\"Maybe later.\" She stood up and pushed him into her seat, then sat down on his lap. Her huge breasts were against his cheek. \"Can you?\" She looked down at her lap. \n\nJason laughed. He ran his fingers up her inner thigh and found her dripping wet snatch. \"Hmm, you are turned on.\" \n\n\"Mmm, hmm, I am.\" She leaned her head on his shoulder as he circled her clit with his fingertip. \n\nHe placed the tips of his index and middle fingers on her thick clit and began rubbing in gentle circles. \n\n\"Ooo, yeah. Just like that. I need to... you know?\" \n\n\"You know, you can say what you want. Nobody is going to judge,\" Jason whispered. \n\nHer lower lip pouted. \"I know. I just.\" Her face went red. \n\nHe smiled and kissed her. \"Lisa. Just say it. Out loud.\" \n\nShe sighed. \"I need to cum.\" \n\n\"Why do you need to cum?\" He asked. His eyes sparkled with mischief. \n\nShe smiled a little. \"Because I'm horny.\" \n\n\"What made you horny?\" \n\n\"I... I sucked his cock to get him hard for Heather. Tasted so good...\" \n\n\"And?\" \n\n\"I could smell her pussy. She was dripping. I put his cock inside her.\" She held up her hand. \"See? She got her cream all over my hand.\" \n\n\"Taste it.\" \n\nShe grinned and licked her fingers. \"So good, Jason.\" \n\nHe leaned forward and kissed her fingers before kissing her full lips. \n\nAll the while, his fingertips made insistent circles on her clit. \n\nShe pulled back, but then Jason realized she hadn't done it. \n\nGwen had leaned her back into her lap. \n\nLisa was lying across both their laps. \n\nSmiling, Jason slid her skirt up so he could get better access to her pussy. \n\nGwen leaned down and kissed her. She unfastened the brooch holding Lisa's latex top closed, letting her big breasts fall free. \n\nGwen kissed her breasts, tonguing the erect, clamped nipples. \n\nAlex stood up beside her. He pushed down his sweat pants, freeing his long, thick monster cock. He jacked it, causing it to lengthen and stiffen. Smiling, he guided the thick, apple sized head to Lisa's lips. \n\nShe kissed it and then began lathering it with her tongue. \n\nJason slipped two fingers of his free hand into Lisa's cunt as he continued to finger her clit with the other. \n\nShe opened her mouth wide and Jason watched in disbelief as she managed to get the huge head inside. \n\nHer eyes rolled back in her head, lost in the sensations. \n\nShe brought her hand up and took over jacking Alex's cock as precum leaked out around her lips. \n\nJason watched the love of his life suck off his friend. He felt no jealousy. This was about her, taking her higher than she had ever gone. The three of them had made her the focus of their love and passion. \n\nShe clamped her thighs together around his hands. \n\nJason smiled, feeling her body go stiff in a hard orgasm. \n\nGwen felt it as well. She looked up, smiling. She eased Alex's big cock out of Lisa's mouth and jacked it hard. \n\nThe whoremaster groaned and sprayed his cum across Lisa's smiling face and breasts. \n\nAlex dropped to his knees, exhausted. \n\nGwen smiled and kissed Lisa, licking away her lover's cum. \"This is who we are. You're starting to understand that now, aren't you?\" \n\nLisa smiled up at her, a look of pure bliss on her pretty, cum glazed face. \n\nGwen looked at Jason, a drop of cum on her lower lip. \"You understand too, don't you?\" \n\nJason smiled and nodded. \n\nGwen leaned down and kissed Lisa's lips. \n\n***"
    ],
    "authorname": "wayneandanntriskelion",
    "tags": [
        "body modification",
        "bondage",
        "oral",
        "hucow",
        "lactation",
        "oral sex",
        "titty fuck",
        "group sex",
        "mind control"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/transformations-the-farm-ch-01"
}
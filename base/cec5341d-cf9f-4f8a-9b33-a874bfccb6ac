{
    "title": "Little Packages Ch. 11",
    "pages": [
        "(Daddy/Ben, February, 28 months since Kitten and Daddy started dating, six months since Chapter 10)\n\nI walked into my house and shivered. Everything was such a blur when I left that I must have forgotten to set the automatic timers. And I never trusted \"smart\" houses. The last thing I needed was some asshole hacker trying to kill me in my sleep by turning on the oven and burning down the house.\n\nI made a quick adjustment on the heating panel and then headed to the living room's fireplace. Winter in Kingston wasn't bitter like the prairies or the arctic but was cold and damp enough. A fire would keep us warm until the heaters got the rest of the house liveable.\n\nIt also gave me something to do. Having something to focus on had become an essential thing for me in the last few weeks.\n\nI heard the presence of the other two people coming into the house. One moved into the kitchen and began rustling around. I was betting it was Meg using the pretext of the cold to steal some more of my expensive coffee. The other came behind me and rested her small hand on my shoulder.\n\n\"Are you ok, Daddy?\" she asked.\n\nKitten had been asking me that a lot the last few weeks. It was a reflex for her by now, and I could almost feel her regret asking it once again. However, my response was pretty rote by now.\n\n\"I'm fine, Kitten. Don't worry,\" I said.\n\nThere was zero chance that Kitten and Meg were not worried about me. They'd been a constant presence for weeks, and I hadn't been alone for more than a few minutes without one of them near me, keeping an eye on me to make sure I was ok.\n\nI would be frustrated with the hovering if I didn't understand why they were doing it. Past precedent has shown I don't handle the death of a loved one well. And I had just lost my mother.\n\nWith the fire going, I stood up, gave Kitten what I hoped was a reassuring kiss on the head. Then I turned and limped over to the window. The cold and damp were doing a number on my knee, so I leaned on my cane more than usual. It was dark out, so it's not like I could see much. But at that moment, I just wanted to stare into space and get my thoughts in order. The window worked as well as anything else.\n\nI could feel Kitten wanting to do something more for me, but instead gave me the space I needed. She backed off and went to the kitchen to help Meg fuss with things. But I could still feel them looking at me from time to time, making sure I was all right.\n\nI sighed and reflected on the last few weeks. I took comfort that I could remember my mother's funeral.\n\nBeth's had been a blur. The painkillers, grief, and rage meant I recalled little of it. I'm told I behaved myself and sat in a disbelieving daze through most of it. I'm suspicious if that was actually the case, given my behaviour in the months that followed, but I hope that's what happened.\n\nBut at least for mom, I knew the end was coming and I could prepare. Every time I flew out to see her and dad, I said goodbye, knowing full well one of those times I really was going to be saying goodbye forever. \n\nAnd then I got the call from my shell-shocked dad at three in the morning, and that was that.\n\nKitten had the preemptive conversation with me over Christmas when we knew it wasn't going to be long now. Summed up: Do not even, for a second, try to be the stoic hero and go out there for the funeral by yourself. I'm going, that's that.\n\nPart of me wanted to argue the point because she was having a challenging year. Her workload was massive, and on top of that, she was trying to help Kris with a difficult transition from Saskatchewan party girl to a somewhat responsible adult with questionable success. I wanted to spare her the extra pressure of having to deal with a grieving fiance. \n\nStanding in the grey Vancouver rain days earlier, listening to the minister and clutching Kitten's hand, I was glad I listened to her and didn't try to be heroic. Maybe I could have handled it on my own; I'm glad I didn't have to find out.\n\nBut after weeks of making sure I was ok and keeping a close eye on me, the two of them had to head back to their lives in a couple of days. Kitten desperately needed to get back to Montreal. She'd been doing her best trying to keep up with her classwork long distance, but this was crunch time. She couldn't afford to miss too many more days of school.\n\nMeg needed to get back to work. She'd taken a job in Ottawa with an advocacy group encouraging diversity in elections.\n\n\"The pay is brutal, the hours are long, and I'm listening to so much bullshit from politicians and their lackeys that it's a miracle I haven't strangled them with my bare hands. It's the only sane reaction to have if you're around them long enough,\" she complained to me a few months ago.\n\n\"But you couldn't be happier, right?\" I asked. I knew my friend well.\n\n\"Fuck yeah! With luck, I'll help get these assholes unelected, and we'll put some useful humans in there. Much less jail time involved than strangling,\" she said.\n\nI was skeptical, but it has been night and day since she quit her old firm, went on vacation, and started this job. She looked ten years younger and I couldn't be happier.\n\nSo yeah, now I had to convince them I was all right and to leave me alone. We'll see.\n\nI heard rustling behind me, so I stopped staring at nothing and turned around. Meg was managing with three mugs of coffee and Kitten was coming out with a plate of food she'd managed to forage from the cupboards. Surprisingly, I was hungry. My appetite vanished since mom died. The two of them threatened IVs to get me nutrients at one point.\n\n\"Thanks, guys,\" I said, grabbing some cheese and crackers. I sat on the couch and Kitten immediately jumped on it and cuddled next to me. Partially to comfort me, but also to steal heat until the place warmed up. Meg plopped down in the armchair. For a few minutes we didn't do much other than snack and warm up.\n\n\"Did you text your dad to let him know we landed safely?\" Meg asked.\n\nI nodded. Meg still had an aggrieved look on her face.\n\n\"I always knew where you got your pain in the ass stubbornness, but I think this is a new level even for him. He all but shoved you on the plane,\" she said.\n\n\"It was kinda weird,\" Kitten agreed from my side. \n\n\"No, it wasn't,\" I said, sipping my coffee. I was trying to figure out a way to phrase it that didn't make him sound cold or heartless. \"Meg, you've seen this before. He never understood why I reacted the way I did when I lost Beth. Sure you could be shocked and upset for a few weeks because it was so sudden. But carrying on the way I did for so many months, he never understood.\"\n\n\"I know, but that was a little different. It was your wife and there was always a little tension between her and them....\"\n\nI could feel Kitten shift, and when I glanced down she was looking at me quizzically.\n\n\"They believed Beth 'tricked' me by not saying earlier in our relationship that she couldn't have kids. Or, more importantly, give them grandchildren. It was a whole thing for a while in our 20s,\" I said.\n\nI could see her eyes get wide, as if that was a thing people fought over.\n\n\"He's mellowed a lot, Kit,\" Meg added. \"For the better, I should add. This is why I'm surprised he isn't more upset about losing his wife. Or that he didn't want you around longer to grieve with him. Instead, he practically tossed you out the door.\"\n\n\"He grieves in his own way,\" I said, staring at the fire. \"We all do. He would never break down around other people because that's not who he is. If I were still single, maybe he would have let me stay around. But I have Kitten and you, so there's no need to worry about me. And he'll handle things in his own way.\n\n\"Plus, when I lost Beth, it was a shock. I had no time to prepare. He had months to get ready for this. He's done a lot of his grieving already.\"\n\nKitten muttered, \"I wished I'd gotten to know her better. She seemed nice.\"\n\nI kissed her head. \"She would have loved you, little girl.\"\n\nWe were all quiet again for a few moments. If nothing else, the living room was getting warmer. No better time to make things awkward and address the elephant in the room.\n\n\"So, I love you, but you're both leaving at the end of this weekend, right?\" I asked.\n\nMeg sat up straighter in the armchair and Kitten detached herself from me and sat up on the couch. Both of them started protesting at the same time. I was unsurprised. I put up my hand to quiet them. Surprisingly, they listened to me.\n\n\"You can't stay with me for the rest of my life waiting to be 100% sure I'm not going to go off the deep end again,\" I said. \"I'm on my anti-depressants, I'm talking to my therapist, I have a fiance and best friend who are keeping an eye on me. Plus, I feel alright. I'm sad, but I'm not shattered.\n\n\"You have lives. You need to get back to them.\"\n\n\"Daddy, I worry about you being in this house by yourself. Maybe you should at least come to Montreal for a few weeks just to make sure,\" Kitten said. I saw Meg nodding her head. Their relationship had evolved into something unique over the last two years. They went from wanting to kill each other to being good friends.\n\n\"I appreciate the thought, Kitten, but you have a lot of school work to catch up and I'm not distracting you. Plus, you still have Kris rattling around your loft and I think that's one person too many in your tiny place,\" I said.\n\nI could feel her shift and look at me.\n\n\"If we need the space it's a pretty easy choice on how to make that happen. It's been six months and nothing. I hoped for more than her getting fired from bartending jobs and partying her way across Montreal,\" she said.\n\nKitten felt responsible for Kris after seeing where she was in her life during our brief stop in Saskatchewan. They'd drifted apart and Kitten wanted to mend things. It was admirable, reaching out and trying to make a difference. I think she hoped Kris would come to Montreal, see how hard Kitten was working, and figure things out.\n\nIt hadn't quite worked that way. Instead of Kitten 'pulling' Kris up, Kris did her best to make the opposite happen. There had been at least one blowout that I knew about, and probably a few others besides. Kris was frustrated her friend was not fun anymore; Kitten was frustrated by her friend's behavior.\n\nWhen she complained about Kris's immaturity, I had the luck not to be looking at her. By the time I did, I had a neutral look on my face. I should have won the Oscar that day.\n\n\"Kris is going to be out on her own soon enough. You're finished school in a couple of months and then she will have to make some choices. But until then, I'm not staying at your place unless I have to. If I feel bad, I will come up to see you or Meg. But I think I can handle spending four days a week alone,\" I said.\n\nThe scowls on their faces let me know neither one of them were pleased with the decision. There were several more attempts to get me to change my mind while the house warmed up, but I was firm. It was time for things to get back to normal.\n\nLater that night Kitten and I were in bed with just the lamp on the end table providing light. Courtesy of a three-hour time zone difference, we were also still wide awake. Our sex life the last couple of weeks had been practically non-existent. But she was lying naked on top of me and while she wasn't trying to seduce me, a naked petite redhead will have an effect. She was being patient, waiting for me to make the first move.\n\nI was getting there, but first I had some apologizing to do. \n\n\"You had a pretty shitty birthday this year,\" I said. \"I'll make it up to you, I promise.\"\n\nMom's passing had many consequences, but one of them was that her birthday was a couple of days after the funeral. Nobody felt like celebrating. But even if I had been tempted to put something half-hearted together, Kitten was adamant it was not an appropriate time. I was hoping to convince her to let me do something now. I wasn't expecting her to make it easy.\n\n\"I turned 22, Daddy. It's not like that's a milestone birthday. Besides, you know how I feel about my birthday and Valentine's Day. I'm fine,\" she said, running her hand through my beard. I felt my cock get harder.\n\n\"Yes, and you know how I feel about trying to change that. It's your birthday and you're young. It should be a happy occasion for you,\" I said, running my hand down her back. She smiled, which gave me some pause because I recognized the kind of smile it was. It was the type that meant I had walked into something.\n\n\"If you want to give me something, come to Montreal,\" she started. Before I could protest, she gave my beard a little tug to focus my attention. \"Not this week; I know I'm not going to win that battle. But give me a week or so to get caught up at school and then visit me. We'll go out, have a nice romantic supper. \n\n\"Maybe we'll go shopping at Rachelle's store again and pick out some new outfits. Plus, I need some wedding night lingerie and I suspect she might have some ideas about that. Then we spend a night or two at a nice hotel. That's all the birthday gift I need.\"\n\nKitten squirming on top of me was enough to get me hard, but her suggestion of visiting Rachelle's store stirred things. It had been a while since I'd even thought of her, let alone visited her store. Some of Kitten's outfits and toys were showing some wear and tear. So that sounded like an excellent birthday plan.\n\nShe must have felt my cock twitch, because her grin got larger, and she began moving her hips back and forth a bit to help keep my interest. Then she got a strange look on her face.\n\n\"Can I ask one more thing for my birthday,\" she said. I started answering immediately in the yes. Whatever she wanted. She'd help keep me together the last few weeks. But she gave me a look.\n\n\"No, you need to hear this first before you say yes. I'm not sure about this,\" she said. Kitten had the oddest look on her face. It had been a long time since I'd seen her embarrassed and, frankly, a little scared. She took a deep breath and got started.\n\n\"The first time we went to Rachelle's, I was pretty young and naive,\" she started.\n\n\"As opposed to the elderly, worldly woman you are now,\" I said, trying to make her laugh and relax. It didn't work. She scowled at me in a way that indicated that I should stop talking. I lifted my hands off her back and put them up in surrender. Placated, she kept talking.\n\n\"Back then Rachelle said if we ever wanted to get into the local swingers club she could arrange it,\" she said.\n\nWell, this evening just took a turn into the profoundly odd.\n\n\"Kitten, do you want to go to a swinger's club?\" I asked.\n\nShe flushed a bright red and then, nervously, nodded her head slightly.\n\nI had several things I needed to process quickly so that this didn't blow up into something disastrous. And, to put it mildly, I wasn't operating at 100%. But the first thought was \"don't judge this,\" quickly followed by the second thought of \"Why now?\"\n\nI could also see that Kitten was on the verge of having a breakdown if I didn't respond quickly.\n\n\"Kitten, I'm going to be hard-pressed to ever say no to you. If you want to visit the club, then sure, I'll contact Rachelle and make the arrangements. But you understand I'm curious why you want to go now?\" I asked. \"Are you...unhappy? Do you just want to explore things or people... \"\n\nHonestly, it was always a worry lurking just beneath the surface. I'm in pretty decent shape for a man now over 50 and I have a pretty healthy sex drive. But she's 22 and has a very active one. Did she need more?\n\nJudging by the way she was vigorously shaking her head, I shouldn't worry.\n\n\"Oh God, no Daddy! Fuck, I knew I was going to screw this up. I shouldn't have brought this up now, but you said earlier we need to get things back to normal and then you mentioned my birthday and I thought now would be a good time, but of course, it isn't because we just got back and....\"\n\nI grabbed her by the shoulders, pulled her up to my chest, and kissed her. I found it the best way to stop her when she started babbling. For the next couple of minutes we kissed and I ran my hands down her back and ass to reassure her everything was ok.\n\nWhen we stopped, she looked calmer, but still nervous.\n\n\"Ok, so I'm going to ask you some questions. I'm not judging or upset. I'm just trying to figure out what's going on,\" I said. \"First, why is this coming up now after two years?\"\n\nShe took a deep breath and started.\n\n\"I ran into Rachelle a few weeks ago. A couple of days before we had to fly out to Vancouver for your mom's funeral. There was no good time to bring it up before now,\" she said.\n\nWell, that was a bit of news to drop.\n\n\"How....\" I started.\n\n\"Kris and I were having coffee, well, arguing over coffee, and Rachelle swung by the table to say hello. Kris had a hard time pulling her jaw off the table because, well....\"\n\n\"Rachelle is stunning,\" I said.\n\n\"No duh. Anyway, we chatted for a few moments. Rachelle told me I should swing by the as she had some fun new things in the store. And I said I'd try and convince you, which made her laugh,\" Kitten said.\n\nThat was fair. Like I needed an excuse to take Kitten to a high-end lingerie and sex toy store.\n\n\"And then, just as she was getting ready to leave, she looked back and said the invitation to the club was still open and that we should think about it. Then after dropping that little bomb, she said adieu and walked out.\"\n\nI sighed. It was harmless, of course. Rachelle didn't have a vicious bone in her body unless you asked her properly and then, well, yes, Mistress Rachelle could be quite vicious. Or so I had heard. She just had the bad timing to say it in front of Kris.\n\n\"Let me guess, Kris was unrelenting,\" I said.\n\nKitten gave an exasperated look.\n\n\"She would not leave me the fuck alone about it. 'What kind of store?' 'Can we go there?' What kind of club?' 'Would you seriously go there and can you take me?' Unlike Gillian and Soo, I've kept quiet about the kinkier aspects of our relationship. I don't trust that she's not going to blab that back to her friends in Kipling. She still doesn't have a solid idea of everything we do.\n\n\"But this a chance to visit a real sex club. I've already gotten a text tonight asking if I'm going to bring it up with you. She desperately wants to go, although I don't know if it's to fuck around or find out what we will get up to,\" she said.\n\nKitten rolled off of me at this point. She sat with her back against the headboard.\n\n\"At first, it was easy to tell her no, I'm not going to a swingers club. I didn't see the point. I only want you and no other guy. And you're possibly the only guy in history who has been with their girlfriend for two years and never asked if they wanted to do a threesome...\"\n\nI laughed, which felt fantastic. It was hurting muscles that needed to be stretched and flexed again. Not for the 1000th time I thanked the gods for this woman.\n\n\"You are more than enough,\" I said. \"I wouldn't know what to do with another woman. It would honestly probably be more stressful than fun.\"\n\nKitten nodded, as if I had given the correct answer.\n\n\"Kris asked once if we would be into that sort of thing...\"\n\n\"What?\" I said, turning to look at her. She didn't look back.\n\n\"Oh, don't even get me started. We made out a few times when we were younger, because that's what you do to tease boys. Now she's curious to see what has me so willing to toss away my 'freedom.' Besides, I know you would never go for her, but she's exactly the type to try and make things difficult,\" Kitten said, giving an exasperated sigh.\n\nI knew she was in a hurry for school to be over. Now I understood why she was eager to leave Montreal and move on with things.\n\n\"Anyway, back to sex clubs,\" I said, trying to inject some levity into the situation. It worked as I got Kitten to giggle.",
        "\"Well, I did some research and we could go there and watch other couples have sex. It's not a big deal. Which is when I had my small epiphany,\" she said.\n\nI finally clued in. Kitten didn't want to swing with other couples or find a hot, young bisexual woman for a threesome.\n\n\"You want other people to watch us fuck,\" I said. She nodded, hair partially covering her face making it hard to read her expression.\n\n\"I've always liked having sex outside, and the urge has only gotten stronger since I've been with you. God, that time on Hallowe'en when you took me against the side of a church, I still masturbate thinking about that. And we have all this space and privacy here. But there's always the thrill that someone could be watching. I love the feeling.\n\n\"So I thought why not at this club, where everyone has to follow the rules. We could fuck, people could watch, and it would be safe. But it was a silly idea and I'm sorry I brought it up now. It's awful timing,\" Kitten said, catching herself before going into a full babble.\n\nOn my bingo card of possible conversation with Kitten this evening, I did not have \"Can we go to a sex club, Daddy?\" But it was better than the other options of asking if I was all right for the millionth time.\n\n\"You and Meg have been...perplexed why I'm not more upset about my mom,\" I said. Kitten gave me a curious look, wondering where I was going with this. \"Some of it is I have already cried and grieved. I've had amazing, supportive people to help me. And I knew that day was coming for a year, so I've had time to prepare.\n\n\"But I had the revelation late last year that when I lost Beth, it was the worst thing that could happen to me. She was my rock. When I lost mom, it wasn't. It's awful, but there are much, much worse things I could lose,\" I said, looking at her. Kitten's eyes, always large, managed to find an extra size to hit when she realized what I was talking about.\n\n\"If you want to do this, let me talk to a few people just to make sure the place is ok and we can do it safely. Is that acceptable?\"\n\nKitten didn't appear to trust herself to speak, so instead, she fell back on a tried and true method of launching herself across the bed and tackling me. I laughed and rolled with her tackle, so I was on top of her.\n\n\"Thank you, Daddy,\" she whispered. \"Thank you for trusting me and not thinking I'm weird.\"\n\nI considered telling her that of course I trusted her and she was a silly little girl for worrying. Maybe even a brief lecture on open communications on what we wanted. Then I remembered I was lying on top of my sexy fianc\u00e9, who had her legs open and looked up at me with lidded eyes.\n\nSo I leaned down and kissed her instead. She wrapped her arms and legs around me like her life depended on it. The feel of her skin, the heat radiating off her, the taste of her lips - all of it was overwhelming. It had been weeks since we'd been on the same page. As tempting as it was just to start fucking her, she deserved more.\n\nI broke off the kiss and began to go to work on her neck, with her moaning a half-hearted admonishment not to leave a mark. That was up to the fates. Kitten relaxed her grip on me, deciding that some mobility would benefit her, so I slid down her body and began licking and sucking on her nipples.\n\n\"Ohhhh fuck, Daddy. You know what that does to me,\" she groaned, pushing her hips upwards. The connection between her tits and her pussy are a marvel to me. Sucking on her nipples led to fireworks in her pussy was a miracle of genetics. I liked playing with them while fucking her, but today, why not do something slightly different. I shifted my body so that my right hand could slide down her body and found her clit. I began gently flicking my fingers across it while sucking her nipples.\n\n\"Oh fuck yes!\" she cried out. \"Oh God, just like that, Daddy!\"\n\nI could feel her building quickly and knew she was moments away from cumming. She'd been amazing to me the last few weeks. I wouldn't have made it through everything without her. So I gave her what she wanted. I pulled my fingers away from her clit.\n\nHer eyes snapped open and she looked at me like I was a lunatic.\n\n\"Daddeee!\" she whined. \"Fuck, don't stop now!\"\n\nI'd gotten complacent. We'd been having fun, but I hadn't been disciplining her nearly enough. She'd given up edging ages ago, saying she didn't need it to get into her little subspace anymore.\n\nThat didn't matter. Maybe I wanted her horny and frustrated for a few days. Her wanting to go to a swinger's club was a gentle wake-up that I needed to be more in charge of her. Starting now. I shifted from sucking on her tits and then slowly, deliberately, I put my hand on her throat. I didn't squeeze hard; I just placed it there.\n\nShe knew immediately. Her breath hitched and her eyes went wide.\n\n\"What did you say to your Daddy, little girl?\" I asked in a low voice. \n\n\"I....I'm sworry, Daddy,\" she said. That's all it took. I could see her eyes glaze over and her body relax. She was mine.\n\n\"Why are you sorry, princess?\"\n\nI could see her struggle to find the words. \"I...I shouldn't have yelled at you,\" she whispered.\n\nI lifted my fingers from her pussy, trailed them up her stomach, making her squirm. I then took her left nipple, and pulled on it. She gasped, arching her back. I held it while she squirmed.\n\n\"What else?\" I asked. Making her respond to questions like this was borderline cruel, but a necessary part of her discipline.\n\n\"My....body is yours. I don't get to tell Daddy what he can do with it,\" she gasped out.\n\n\"That's right,\" I said, letting go of her nipple. She gasped out and dropped back onto the bed. I then tightened my grip around her throat. She could still breathe, but it was a little harder. I leaned closer to her face.\n\n\"Who do you belong to?\"\n\n\"You, Daddy.\"\n\nI slid my hand down and rested my fingers on her clit again. I could feel her squirm, hopeful I might play with her again.\n\n\"And if I want to tease you all night and not let you cum, that's fine because it makes me happy, right Kitten?\"\n\nShe closed her eyes and groaned, desperately hoping that wasn't the plan this evening. When she didn't respond immediately I began moving my hand away from her pussy. Her eyes shot back open and she nodded furiously.\n\n\"Use your words, little girl,\" I said.\n\n\"You can do whatever you want to me, Daddy,\" she replied. \"I belong to you.\"\n\n\"Yes, you do,\" I said, and began to run my fingers around her clit. She gasped and squirmed, hoping for more contact, but I refused to give it to her. I didn't keep track of how long I teased her like that, but her face and chest turned red and she broke into a sweat. Unspoken in all of this was that she couldn't cum unless I told her.\n\nBut she was a good girl. She didn't cum and she didn't beg me to let her cum. She groaned and twitched, but hoped I would eventually have mercy on her.\n\n\"Does my princess want to cum now?\" I asked.\n\nI figured I was going to get a \"Fuck Yes!\" but she surprised me.\n\n\"If Daddy wants me to cum then I'm ready to cum,\" she said.\n\nI smiled at her. My little girl was learning. I slid my fingers down until I grazed the entrance of her pussy. I didn't push them in, which was a new kind of torture. She was panting gently and had her eyes scrunched closed, desperately focusing on not cumming. I suspect she was also trying hard not to impale herself on my fingers.\n\nI leaned in and whispered in her ear. \"I'm going to slide my fingers into your cunt now, little girl. Then I'm going to count to 10. If you haven't cum by the time I hit 10 I'm going to stop and we'll try again tomorrow morning.\"\n\nHer eyes shot open in horror, and then I slid my fingers into her pussy.\n\n\"One,\" I said, curving my fingers to hit her g spot. I honestly didn't expect her to make it to two as she thrashed about on the bed, but to my surprise she didn't cum.\n\n\"Two,\" I said, and Kitten scrunched up her face and still didn't cum.\n\n\"Three,\" I said, and I was impressed she made it this far. She began making a high-pitched whining noise and lifted her hips off the bed.\n\n\"Four,\" I said, and applied a little more pressure when moving my fingers back and forth across her g spot. I never said I had to play fair.\n\n\"Five,\" I said, and I was beginning to genuinely wonder if this wasn't her trying to edge and have herself spend the entire night wet and ready to explode.\n\n\"Six,\" and she finally managed to whimper out, \"Please, Daddy.\"\n\n\"Please what?\" I asked. \"Oh, and seven.\"\n\n\"Please, please, please, can I play with my tits, Daddy. I need it. Please!\" she begged.\n\nI considered it, while easing up the pressure on her g spot. She looked like she might cry if I didn't relent.\n\n\"Go ahead, Kitten,\" I said. \"Oh, and eight.\"\n\nShe reached up and quickly began pulling her nipples. She was frantic and I wondered if she wasn't blocked; unable to get over the orgasmic hill. I rubbed her a little faster and harder. Then I placed a bit more pressure around her neck, leaned in and whispered in her ear.\n\n\"Nine.\"\n\nThere was a moment when Kitten simply defied gravity. I can't explain how she went from writhing on the bed to being several inches over it, but the orgasm gave her the power of flight for a few moments. She didn't say a word as she seemed unable to breathe.\n\nKitten crashed down on the bed and it took me a second to notice my hand was soaked. She squirted as she came.\n\nI gave her a few moments to recover after cumming that hard. Eventually, I turned her over on her side and spooned her from behind, whispering gently in her ear that I loved her and she was a good girl.\n\nWe stayed that way for probably 10 minutes. I knew that I had a hard cock pressing into her ass, but there was not much I could do about that at the moment. She was naked and had just cum hard. Finally, I felt her breath change and I could tell she was coming back down.\n\n\"Are you ok, Kitten?\" I asked gently. She nodded, still not completely trusting her voice.\n\n\"Wow,\" she finally managed to get out. \"That was....I'm not sure I have words. Where did that come from?\"\n\n\"I'm not sure,\" I said honestly. \"It just felt right for the moment.\"\n\n\"Oh god, Meg is going to kill me tomorrow. How much noise did I make?\"\n\n\"None. You were completely silent when you came. That's a first too,\" I said.\n\nThen she shifted and noticed my cock poking into her. I expected her to apologize and say she would take care of me tomorrow. Given the intensity of her orgasm, I'd understand. Instead, she had one more surprise.\n\n\"You have to fuck me. I'm not sure I can cum again, but you need to fuck me. I need to feel your cock in me, Daddy,\" she said, rubbing up against me.\n\n\"Are you sure? It's ok if you need more time, Kitten.\" I said. I tried very hard to never ask her if she was sure anymore when it came to sex. She knew what she wanted and being asked to repeat annoyed her. But given the circumstances, she cut me some slack.\n\n\"Uh-huh. My Daddy needs to cum and I don't think I have a blowjob in me right now. Please use me whatever way you want before I pass out,\" she said.\n\nI was tempted to flip her on her back and have my way with her. However, she wasn't just some inflatable sex doll. Then I glanced towards the end of the bed and had an idea. I gently shifted her towards the foot of the bed, and placed her on her stomach. I got behind her and lifted up her hips. She made a slight wiggle to try and entice me. Then, mindful of her current state, I gently slid my cock into her pussy. She moaned softly.\n\nWe fucked like that for a few minutes, each of us content. Kitten was still happily stoned from her last orgasm and was enjoying having my cock in her pussy. And I was enjoying fucking her for the first time in weeks. But I wanted a little more. If my little girl wanted to be an exhibitionist, well, nothing like starting at home. I reached down and took her long hair, put in a loose ponytail in my hands, and pulled backwards, her head lifting up. She made a small grunt of surprise.\n\n\"Open your eyes, Kitten,\" I whispered. She was still out of it and didn't respond right away. I gave her ass a little slap and spoke more forcefully. \"I said open your eyes, slut.\"\n\nKitten's eyes snapped open and she looked at herself in the mirror. Her eyes were glazed and she looked stoned. She was flushed and sweaty. Because her hair was being pulled, her back was arched and her tits were swaying beneath her. And to top it all off, there was me, a man old enough to be her father, with gray hair and a beard, clearly in control and using her.\n\n\"Oh God,\" she gasped.\n\n\"Is this how you want the people at the swinger's club to see you, slut?\" I said. I stopped fucking her for a moment. She whined and began moving her hips to get what she needed from me. I gave her ass another slap.\n\n\"Answer your Daddy's question. Is this what you want them to see?\"\n\n\"Oh God, yes I do Daddy. Please keep fucking me,\" she said. \n\nI began fucking her harder, pulling on her hair to arch her back towards me even more. I knew I didn't have long left and I was betting she had one more good, hard cum in her.\n\n\"And what are they going to see when they look at you?\" I growled in her ear.\n\n\"Uh uh, they're going to uh, oh fuck, they're going to see your slutty little girl, Daddy,\" she grunted out. \n\n\"And what are they going to be watching her do?\" I growled, before leaning down and biting her neck. \n\n\"They're going to watch me cum! Oh fuck!\" She screamed. I pulled her body up to mine and felt her shake and twitch. Watching her cum in the mirror was the final straw for me and with a groan I came, filling her pussy with my cum. She was so out of it at this point she didn't notice.\n\nAfter a minute, Kitten felt limp in my arms and we collapsed on our sides in the bed. I felt just about ready to pass out, but I checked in on her first. \n\n\"Are you ok, little girl?\" I asked. She didn't open her eyes, but smiled and nodded her head. \n\n\"Good enough,\" I thought and passed out. \n\n***\n\nThere were a lot of things I liked about Meg's decision to switch jobs and cities. She looked happier, yes, but the other big draw was that I could see her a lot easier. \n\nWhen she lived in Toronto there was only one occasion where I decided to spontaneously go and visit her for lunch. By the time I made it to her office after dealing with traffic and parking, I could have a mid-afternoon coffee with her. \n\nBut now it was easy. I could leave a little after 10 am, and by noon I was waiting outside her building to hit a couple of dozen places nearby. \n\nEven so, this visit coming only a few days after she left me in Kingston had her nervous. We walked down Bank Street, heading towards one of her preferred lunch places, and she kept giving me weird looks. \n\n\"I'm fine,\" I said for the 10th time. I wanted to talk to Meg, but the babying was getting to be a bit much. \n\n\"Uh-huh,\" she said. \"You shoved me out the door on Sunday and three days later you want to have lunch with me. You'll forgive me for being suspicious.\" \n\nMeg was wearing grey pants and a blazer with a black shirt underneath. She was favouring slightly impractical red heels, but she could probably outrun me in them. She had a long wool coat on to keep out the February cold. Coupled with her recently dyed blonde hair, soft makeup touches and a simple gold chain she looked in her mid-30s. She was also turning a few heads as we walked. \n\nOf course my Zatanna t-shirt, jeans, and a leather jacket coupled with the slightly odd walking stick Kit gifted me a while back probably had people wondering why she was with that loser-looking guy.\n\n\"Maybe I wanted to have lunch with my best friend,\" I said. She gave me a look that indicated she wasn't buying that load of bullshit. \n\nI sighed. \"I need to talk about Kit.\" \n\nShe gave me another weird look, but we arrived at the lunch place. She didn't question anything further until we placed our orders and found a table. The place was crowded, but everyone was involved in their own drama, so I wasn't too worried about people listening in.\n\n\"Please tell me you're not having second thoughts about the wedding this summer because if you are I'm going to have to murder you in front of a lot of witnesses,\" Meg said.\n\n\"What? No, of course not,\" I said. \n\nPicking a date had been a real nuisance, but fortunately Kitten's boss Susan made it a lot easier. She reached out just after New Year to let Kitten know there was a movie shoot in Prague starting mid-May. It would end around mid-July, and then she probably would have something for her around the end of August. Plenty of time to get married.\n\nWhen I started listing places we could get married and said Venice, Kitten practically jumped out of her seat.\n\n\"We could do that? They let that kind of thing happen there?\" she asked.\n\n\"It's Venice, Kitten. I'm pretty sure people get married there all the time,\" I said. \n\nShe squealed, jumped into my lap and sealed the deal with a kiss. Venice at the end of July. I warned her it was going to be hot. Her reply was that she wasn't planning to wear much of a dress anyway.\n\nMeg looked relieved the wedding was still going ahead.\n\n\"Good. I have...plans,\" she said.\n\n\"I bet. Not everyone asks for a plus two for a wedding,\" I said, getting a little dig in. Meg had remained cryptic about what happened last summer, but clearly she wanted to get back to Europe to continue whatever she had going on there.\n\nMeg at least blushed. Then, to make sure I didn't pry any further, turned back to the topic at hand.\n\n\"So what's Kit done to get you worried?\" she asked.\n\nOh well, in for a penny....\n\n\"She dropped on me last weekend that she wants to go to a sex club in Montreal,\" I said.\n\nMeg smirked.\n\n\"Oh, that. So?\"\n\nI felt like I could hit my head on the table. Of course, Kitten talked to Meg about it. When she was younger, Meg went to some of them in Toronto. Naturally, Kitten went and spoke to her about it before mentioning it to me.\n\n\"When did she talk to you about it?\" I asked.\n\n\"We had just a little bit of spare time on our hands in Vancouver. I could tell she wanted to talk to me about something, so I eventually got it out of her. She was nervous because she's really curious, but terrified you'd think that she suddenly thought you weren't enough for her, which wasn't true. And, well, there was a lot of rambling after that,\" Meg said.\n\nThe counter person called out our numbers and Meg popped up to grab her salad and my sandwich and headed back to the table. She dropped it in front of me with a clunk, her way of reminding me that she wasn't a waitress and don't get used to her bringing me food.\n\n\"So, how'd she do? Not 100% if you're here worried,\" Meg said, cracking open some salad dressing.\n\n\"I'm not worried, just...perplexed. Two years that offer has been there and she never mentioned it. She sees Rachelle for two minutes and suddenly she wants to go to a sex club. And we're getting married in a few months. I'm just trying to get the pieces together in my head,\" I said, reaching out for my sandwich.\n\nMeg shook her head. \"You're better than you once were, but you're still an overthinker. You're looking for angles and bigger plans. It's really simple, Ben.\"\n\nI finished chewing a bite of the roast beef sandwich. I'll give Meg credit; she didn't waste long figuring out the best places to eat near her workplace.\n\n\"Indulge me then,\" I said. \"Explain to me what's going on.\"\n\nYou can't be friends with Meg if you don't have a tolerance for her, \"You're an idiot, so I guess I have to explain this to you\" look. It annoyed me in university, but when I was married to Beth, I viewed it as the price I paid to get the information needed to make the marriage work. It looked like it was going to continue with Kitten.\n\n\"I know you guys have your...kink and roleplay. Lord knows I'm not one to judge. But I'm sure you've noticed she's actually very mature for her age. She's been at school for three years and barely partied. She's near the top of her class. In a few months, she's getting married. And she's told me that her birth control shot runs out soon, which kicks off your \"getting her knocked up\" phase,\" Meg said.",
        "That has been a fight and a half. Kitten wanted to stop using birth control last September. After many conversations and arguments, including me pointing out she could be writing final exams eight months pregnant, which would be unpleasant, she agreed to wait until school was almost over. March 1 was her next appointment. She was skipping it, so we were soon off to the races.\n\n\"So she wants to blow off some steam?\" I said.\n\nMeg huffed, so no.\n\n\"Yes, but she's young and hot. She has an exhibitionist streak. She's still sexually curious. And a beautiful, confident woman has flattered her, told her she's sexy and should go to a club filled with other sexy people.\n\n\"Next year she might be a married mom working a job. I know you're determined to make sure things don't settle into a routine. And Kit is smart enough to know what she's getting into by marrying and starting a family so young. But right now, she loves you, trusts you to protect her, so she wants to see what the big deal is.\n\n\"If you relax and get your head out of your ass, you might even have some fun. There are going to be a lot of very envious men and women at that club that night. I mean, she's well out of your league,\" Meg said, smirking.\n\n\"Thank God for my best friend,\" I said, trying to drip as much sarcasm as I could into the response. As was often the case with Meg, she just chose to ignore it.\n\n\"I know. If not for me you'd probably find a way to fuck this up,\" she said.\n\nI gave her what passed for an annoyed look. She ignored it and focused on her salad. She also had so much time; she had a meeting in 45 minutes she couldn't miss.\n\n\"Have you thought about joining us?\" I said. \"July is a long way off.\"\n\nNow it was my turn to be on the receiving end of daggers. She slowly finished chewing her mouthful of salad.\n\n\"I'm a sexual camel, my friend. I went years before last summer. I've got enough to get me through to July,\" she said. I very nearly spit my sandwich across the table at her, which got her to laugh, if nothing else.\n\n\"Besides, Kit asked the same thing and I already declined. You'll both be fine. I've heard of the club and it's not sleazy or anything. Talk to Rachelle if you have any questions before going,\" she said.\n\n\"We're seeing her in two weeks for a....supply run,\" I said. \"I'll find a few minutes to talk to her alone.\"\n\n\"And hey, I don't think she's Machevelian enough to plan it that way, but it's been a distraction for you, hasn't it?\"\n\nI paused mid-bite and put down my sandwich.\n\n\"Son of a bitch,\" I said. She was right. I'd been so distracted by this I'd spent no time obsessing about my mom.\n\nWe finished demolishing our food and Meg glanced at her phone, her way of saying we needed to get going. Besides, public servants were eyeing our table and it would get ugly if we didn't move along in a courteous Canadian way.\n\nAs we were walking back to her office, I thanked her again for the advice.\n\n\"Name your first kid or something after me,\" she said.\n\n\"Well, you're going to be the kid's godmother, obviously,\" I said.\n\nThat actually got Meg to stop dead in her tracks and look at me. I could tell she was touched that we'd thought that far ahead and already decided. She shook her head and then turned away to compose herself. \n\nBy the time she turned around, she was back to her normal self. \n\n\"Thanks, she said. Then added, \"Look I'm flattered to be its godmother; just make sure the both of you don't die. I have no idea how to take care of a kid.\"\n\nI laughed. \"We'll do our best not to die.\"\n\n***\n\n(2 weeks later. March)\n\nJust as I was opening the door to Kitten's apartment, I got her text. \"Running late. Find a place to hang out. Should be there in 15 minutes.\" It was her way of saying don't got into the apartment without me, about 10 seconds too late.\n\nI walked in and there was Kris in a cut-off t-shirt and sweatpants. She was drinking milk straight from the carton and I would bet all the money in my wallet that she hadn't paid for it.\n\nIf Kitten was frustrated with Kris, I had reached the point of viewing her as a science experiment. Kitten and I were likely going to have kids. They could grow up and become exactly like Kris; beautiful, somewhat smart, and utterly directionless with no clue how to find one. How could I help her find one?\n\nI viewed her as a wayward child and certainly not as clever or focused as her friend. Her view of me had downgraded from curiosity, to pervert, to a huge pain in her ass. The idea of having to spend 15 minutes making small talk waiting for Kitten filled me with dread. I sighed internally and walked in.\n\n\"She's not here,\" Kris said.\n\n\"I know. I just got a text letting me know she's running late,\" I said. I went over to the small kitchenette and grabbed a piece of fruit. Kris flopped on the couch and looked at her phone. I sat at the kitchen table and did the same. Maybe I'd get lucky and spend 15 awkward minutes of quiet as we stared at our phones. It occurred to me we'd never actually been alone together.\n\n\"I should be going with you tomorrow night. I can't believe you're taking Ashley to a fucking sex club and I'm not coming along,\" she groused, not looking up from her phone.\n\nKitten and Kris had already gone 15 rounds on this. Kris had a few more left in her.\n\n\"You weren't invited and I'm not pissing off the person who extended our invite,\" I said, trying to be as neutral as possible. It was also true.\n\n\"Oh please. I should be there. I'm Ashley's friend. She needs me there to watch her back,\" she said, looking at me now instead of her phone. Her refusal to call Kitten by her preferred name, or even Kit, was always something that grated on my nerves. Kitten just rolled her eyes at it.\n\nKitten and I had talked about this quite a bit over the last few months. I'd offer to help her deal with the situation. After all, the two of us had worked out pretty well and I'd been able to help her get through some challenging situations. Kitten gave me a somewhat pitying look.\n\n\"You are good, Daddy. And I appreciate everything you've done. But not all girls are the same. So yeah, we mesh well. You want to help and I'm in a place where I recognize the wisdom of much of what you say,\" she told me. \"Kris just sees you as another adult, one that's ruining me, and denying her what she wants.\"\n\n\"Which is?\"\n\nKitten shrugged her shoulders. \"She has no idea. She just knows you're just the latest person getting in her way of having it.\"\n\n\"That makes absolutely no...\" I started and then saw Kitten smile and tilt her head at me. One of those \"Oh, Daddy, you're adorable when you're clueless\" looks. \n\n\"Plus, and I love her, Kris could get her PhD in manipulation. The amount of trouble I got into when I was younger because of her was unreal. But she always made it sound like such a good idea at the time,\" Kitten said. \"I love you, but you really can't handle a borderline crazy 22-year-old girl.\"\n\nI resolved to be the sympathetic ear when she complained about Kris, rather than the one helping her solve the problem. Still, I didn't feel like being kicked around while waiting for Kitten.\n\n\"Last time I checked, the ring I put on her finger means I've got her back, Kris. She'll be perfectly safe, as she always is with me,\" I said, keeping my voice as calm as I could.\n\nKris's eye roll could probably be heard next door.\n\n\"Oh please. Ashley always had a weakness for older guys, but most of them were so skeevy it was easy for me to tell her she needed to break it off. I have no idea what you've gotten done to her, convincing her to use that ridiculous name, convincing her to get married at 22, and now letting her think a sex club is a good idea, but it's fucking bullshit. I know you're up to something,\" she said.\n\nManipulation, or a friend genuinely worried about another friend? Kitten was right; I didn't have the skills to handle this kind of thing.\n\nFortunately, I was engaged to someone who did.\n\n\"Enough, Kris,\" Kitten said, standing in the doorway with her enormous TARDIS bag over her shoulder. She stomped into her apartment, tossed her bag on the floor and marched up to Kris.\n\n\"You don't want to go to the club tomorrow night to have my back. You want to go and get dirt so you can gossip to friends back in Saskatchewan. So you can put me down and so they can think I'm an even bigger slut. Which I do not care about, because I'm never going back there again. But that doesn't mean you get to boost yourself at my expense.\n\n\"And you're not invited because you're not mature enough to go there. You'll get drunk and be kicked out within an hour. Just like you were getting drunk on shifts at the bars you were fired from,\" she said. The last bit was news to me. Kitten hadn't elaborated why Kris had been fired.\n\n\"I love you, Kris. But my patience is just about done. I have explained to you again and again why Ben is different from the idiots I dated before and you're not listening. You just attacked him. Apologize right now or you can fly the fuck back home to Saskatchewan tonight for all I care.\"\n\nKris had several inches and more than several pounds on Kitten. Plus, Kitten had just called her a drunk and a gossipy bitch. Still, never bet against a pissed-off redhead. That and everyone in the room knew she wasn't kidding. \n\n\"Sorry Ben,\" Kris managed to say through gritted teeth. She stared at Kitten a moment longer, shook her head, and then went over, grabbed her jacket and walked out, slamming the door behind her.\n\n\"Wow,\" I managed to get out. Kitten held up her hand and walked into her bedroom. I knew better than to say anything when she was in this headspace.\n\nKitten was a strong woman, stronger than she looked. Anyone who underestimated her these days did so at their peril. Those idiots at the hot springs learned that lesson. But confrontation with girls her age drained her. \n\nAfter a few minutes in her bedroom, she came out with a couple of bags. We were going to my hotel room for the next two nights and then back to our home in Kingston. This seemed a disproportionate amount to pack.\n\n\"Just being careful,\" she said, reading my mind. \"I'm going to be gone for a few days and she can be a spitey bitch when she gets smacked around like that. So I'm not leaving anything of personal value lying around.\"\n\n\"Kitten...\" I started again.\n\n\"No. Not yet. Just...let's get to the hotel, and give me some time to decompress,\" she said.\n\nI nodded, helped her with her bag and called a taxi. A half-hour later we were walking into the room. I dropped her bags before my arms gave out. Then I saw the look on her face. I opened my arms and she came over and buried her face in my chest. I just held her for a few minutes until she relaxed. Eventually we ended up on the bed where we cuddled until I felt her finally relax. \n\n\"Sorry, Kitten. I didn't mean to get into a fight with Kris. I know that was hard for you. I promise, nothing but fun between now and Sunday,\" I said.\n\n\"Ok Daddy,\" she said, her voice muffled in my shirt. Then she pulled back and grinned. \"So, does that mean we can go to Rachelle's now?\"\n\nI shook my head.\n\n\"Feeling better, are we?\" I asked\n\n\"Welllll, I find shopping for sexy things boosts my spirits,\" she said, giving me a mischievous grin. I shook my head in defeat and told her to get ready. She bounced out of bed and in record time we were out the door. \n\nThe first time we went to Rachelle's store, Kitten was nervous as hell. Of course, we'd only been seeing each other for a few weeks and Rachelle, while a sweetheart, can be intimidating at first. Plus, I was dragging her there to buy lingerie and sex toys, which worried Kitten a bit.\n\nBut now she was an eager Kitten. She wanted new lingerie and toys. And, just as significantly, to pump Rachelle for information on the club. We were both nervous. I was concerned because I was uncertain what to expect, no matter how much research I did.\n\nKitten was nervous because she wanted to wear the right outfit and lingerie for the occasion. Again, not something I thought my fiance would ever have to worry about.\n\nWhen we walked through the door of the boutique, Rachelle turned and smiled. Kitten walked over and gave her a hug. Others might view such a warm welcome as odd, but Rachelle was just that kind of welcoming, friendly person. As for Kitten, I think she viewed Rachelle as a part of her sexually growing up process.\n\n\"It's good to see both of you,\" Rachelle said. \"It's been far too long. And look at you, Kitten. You look much better than when I saw you last.\"\n\nKitten blushed but didn't argue the point. Rachelle was the kind of woman that arguing only went so far, and she didn't have much time for false modesty. If she said you were a thing, odds are she was right and you should just accept it and move on.\n\n\"And you, Ben. Other than needing to dress nicer, you are looking much better. Carrying less sorrow with you, I think,\" she said.\n\nSee? She was right on both counts.\n\nKitten cut in, as she was practically bouncing on her toes. \n\n\"Daddy, can I?\" she started. I waved my hand and she began moving quickly through the store. It was similar to unleashing a kid at a Toys R Us, except this was sex toys and lingerie. She went over to a shelf and quickly pulled out a glass dildo, scrutinized it, nodded her head, and continued to look at the other things for sale.\n\n\"She is a remarkable young woman. So much more confident in who she is now compared to two years ago, when she knew she had desires but had no idea what to do with them,\" Rachelle said, as the two of us trailed behind Kitten at a distance.\n\n\"She is remarkable, but she also manages to surprise me from time to time.\"\n\nRachelle smiled, knowing exactly what I was talking about.\n\n\"You are surprised she wants to go to the Club. I am not. It makes perfect sense. She's young, beautiful, desirable, hungry for new experiences, but also wants to be safe. She is safe with you, and the Club is a safe space to be with you,\" she said.\n\nI stopped and casually looked at a 12-inch long dildo. Thankfully, Kitten hadn't. She already had a couple in her hands and had moved along to butt plugs.\n\n\"It's the paranoia and insecurity of a 50-year-old man with a much younger fiance. Intellectually I know she loves me and she's explained why she wants to go. And I'm fine with that. But emotionally...\" I started before trailing off.\n\nRachelle took a few steps in front of me, then turned around, blocking Kitten and I from being able to look at each other. She got a serious look on her face.\n\n\"She loves you; you love her. I caution against overthinking things or questioning her motives. I have seen men do this before and it never ends well for the couple. Besides, she initiated the idea. That's always a good sign,\" she said.\n\n\"How so?\"\n\n\"I find when it's the man who suggests the idea, he's just looking for an excuse to cheat. When it's the woman, the relationship is already healthy enough that visiting such a club may cause nerves, but not drama.\n\n\"I'll be there with you tomorrow night and you'll be my guests. As I am well known so people will not give you any trouble unless they want to end up on my....bad side,\" she said.\n\nI never wanted to know what it was like ending up on her bad side.\n\n\"Your Kitten wants to have fun, play with you, and have people watch her. There will be many men and women there tomorrow night who will deeply envy you and your good fortune. So, what are we not going to do?\" she asked.\n\nI laughed. \"Overthink things. You sound like my best friend.\"\n\n\"She is a very wise woman. You should have brought her or would she have been scandalized?\" she said.\n\n\"Meg hit a few of these back in the day and I have no idea what she was up to last summer in Europe, but she's bringing two guests to our wedding. So no, she wouldn't be scandalized. She just doesn't want to see me naked.\n\nRachelle stared at me for a moment, similar to a butcher sizing up a piece of meat.\n\n\"Hmmmm, her loss,\" she said, and then reached up and touched my beard. \"You think your Kitten will draw all the attention tomorrow night. You underestimate how many will be attracted to you, mon cheri.\"\n\nThat was the moment when Kitten choose to come around the corner with her hands full of dildos, anal plugs, and an assortment of nipple clamps. She had an odd look on her face. \n\n\"Bankrupted me yet, Kitten? I asked as she walked up to the counter and placed everything there.\n\n\"Hardly. I haven't even hit the lingerie section,\" she said. \"Rachelle, can you help me pick out a few things? Daddy, if you want you can wait in the change room. He can come in and watch me model things, right?\"\n\nRachelle smiled. \"Of course. And I think you'll find our change rooms are very....discreet. I pride myself on privacy for my customers.\"\n\nKitten's eyes lit up and I could feel my cock getting hard. This was going to be an appetizer for tomorrow night's activities.\n\n\"Oh, before we go through some lingerie, can I show you some of my dress choices for tomorrow? I'm just trying to figure out what to wear,\" Kitten asked. Rachelle nodded her assent, and Kitten opened her phone and showed a series of dresses that were now hanging in the hotel room. I could hear Rachelle veto a couple.\n\n\"Oh no, dear. Latex looks sexy, but it's not easy to get off quickly, is it? Mmmm, maybe not. Oh, that has potential,\" she said.\n\nKitten vetoed my offer to help her pick a dress. Aside from wanting Rachelle's more professional advice, she also wanted it to be a surprise. I wandered around the store, looking at the different things, while the two of them hit the lingerie section.\n\nYes, I could have wandered over, but Kitten was having fun finding clothes with Rachelle. Seeing that I must be looking a little lost, Rachelle intervened.\n\n\"If you want to go through those doors, you'll see a change room with 'private' on the door. Go in there and get comfortable. We'll be a while, but it'll be worth the wait, I promise,\" she said.\n\nI took the hint. In the back were two standard-looking change rooms. I opened the door with the 'private' sign and took a moment to absorb everything. There were several pictures of erotic art, an oversized leather couch was against one wall, and a small refrigerator. Inside was a bottle of white wine, along with some water and snack foods. A note on top of the fridge said to help ourselves. There was also a Bluetooth speaker that I could sync with my phone for music.\n\nFinally, there was a translucent privacy screen, allowing Kitten to be able to change. It was a nice set-up. \n\nI spent some time fussing with getting music playing, and then after that tried to read a book online. The last time we were here, Kitten bought lingerie emphasizing pet play and her littleness. Rachelle helped her with that. Now I wondered what she would come up with now.\n\nAfter about 30 minutes, the door opened. Kitten burst through with a small mountain of clothing and made a dash for the screen before I could see what she had. Rachelle stuck her head in and smiled.\n\n\"Your Kitten has excellent taste. I have some other customers to take care of, but do take your time, and don't worry about being disturbed. You'll have plenty of privacy back here.\"\n\nI said thanks and Kitten began tossing clothes over the top of the screen. Rachelle gave a quiet laugh and closed the door.\n\n\"Having fun, Kitten?\" I asked.\n\n\"I always have fun spending your money, Daddy,\" she said. Which wasn't entirely accurate; she still flinched when I paid for things like plane tickets or meals. She told me she was looking forward to graduating and having a real job for no other reason than to start paying for more things herself.\n\nBut for 'fun' things like lingerie, sex toys, and items she knew we were both going to get a charge out of, she had relaxed her views.\n\n\"So, how much damage are you doing to me today?\" I asked. I knew it would be considerable, but hearing her giggle after the year we'd been having was not something you could put a dollar figure on.",
        "\"It'll be worth it, whatever the cost,\" she said and stepped out with what I assumed was Outfit #1 for the evening. I was perfectly content with that outfit being the first and last thing I saw this evening.\n\nIt was a sheer bodysuit. From her waist to just above her belly button, it was pink with crisscrossing straps. Above that was lace with pink and blue flowers. She did a slow spin showing she was practically naked from the back, with the suit becoming a thong that went between her ass cheeks.\n\n\"Holy Christ,\" I managed to get out after taking a long pull of water. \n\n\"I take it we should get this one?\" she said, giggling.\n\n\"Come on over here and I'll show you how much I like it,\" I said, feeling the urge to stand up, walk over and grab her.\n\n\"Nuh-uh,\" she said, driving back behind the screen. I sighed and prepared myself for a very frustrating fashion show.\n\nNext up was a bra and panty set. Again, sheer with the bra pushing up her tits a bit with pink and gold stripes teasing things a bit. The panties might as well not be there, which meant they were probably a fortune.\n\n\"Is that a yes, Daddy?\" she asked coyly after I didn't say anything. I managed to nod. She giggled and went behind to change again.\n\nAfter she disappeared, I managed to find my voice again.\n\n\"So, which of these are you wearing tomorrow night?\" I asked.\n\nKitten stuck her head from around the screen and gave me a pitying look, like perhaps I'd suffered brain damage during her fashion show.\n\n\"Oh, none of these, Daddy. It wouldn't be much fun if you got to see the outfit I'm going to wear tomorrow in advance,\" she said, diving back behind the screen.\n\nI sighed. Of course not. \n\nThe screen was its own particular kind of torture device. I could see Kitten's shadow dance behind it without actually seeing her naked or what she was putting on.\n\nNext up was an almost standard-looking black lace push-up bra, panties and a garter around her waist. She said the stockings were a nuisance for now, but it should give me an idea. I gave my approval with a nod of my head instead of drooling.\n\nInterestingly, most of the modelled pieces were more grown-up looking rather than emphasizing her little girl play. I wondered if it was a deliberate choice and how I felt about that. I was nervous at first about dd/lg play and how people would react. Now it felt peculiar when she didn't call me Daddy. We even talked about how we were going to handle that during our wedding vows.\n\nI was so lost in thought it took a gentle \"ahem\" to snap me back to attention.\n\n\"I wouldn't have thought I'd need to make noise to get you to look at this, Daddy,\" she said.\n\nWhile I was lost in thought about whether she was still my little girl, she walked out in a wet dream outfit. She'd put her hair in pigtails and had a pink lace collar around her neck. Her breasts were enclosed in a pale pink lace bralette with a bow in front, although her nipples were clearly visible. She had on a lace thong that was barely there, but had \"Daddy's Girl\" in small letters along the waistband. She had on the same colour pull-up stockings.\n\nMy jaw must have hit the floor. Kitten giggled and walked towards me, ending the fashion show portion of the evening. Thank God. I was going to make a mess soon and it had been a long, long time since that last happened.\n\n\"I didn't want you to think I was getting too grown-up, Daddy,\" she said, standing in front of me. I reached up and put my hands on her hips as she straddled my lap. She put her hands on my face and ran her fingers through my beard. \"I feel like I've had to grow up a lot in the last year, and that's fine, and I'm really looking forward to wearing grown-up lingerie and having fun tomorrow night, but I didn't want you to forget that I'll always be your little girl.\"\n\nShe looked so adorable that I could have cried. I gently pushed down on her hips so she sat on my lap facing me. She leaned in, kissed me and for a few minutes that's all we needed. Just to be together, touching and kissing. Finally, she broke the kiss with a giggle.\n\n\"Daddy, how uncomfortable are you still wearing jeans with that hard-on,\" she said.\n\nI shifted slightly on the sofa and pushed up a bit, so she could feel my cock through the thin material of her panties. Her eyes popped open when she could feel just how hard I was.\n\n\"Why don't you help to relieve the pressure?\" I said, and I managed the rare feat of making her grin and roll her eyes simultaneously. She lifted her hips up and back and leaned down to undo my belt when I heard her make a little noise.\n\n\"Ooops,\" she said. \"We might have to buy you something to wear out of here.\"\n\nI looked down and noticed a huge wet spot on my lap. I was still rock hard and no amount of pre-cum was going to leak through my underwear and jeans. I glanced at her as she had a hand over the thin material of her thong panties. Kitten was embarrassed that she'd made a mess on me, but found it funny all the same.\n\n\"I guess we're buying those,\" I said. She laughed.\n\n\"Duh,\" she said, and began to make quick work of the belt and then my pants and underwear. I was sitting on the leather couch, naked from the waist down. Kitten got on her knees and knelt before me, my cock at eye level. She looked up at me, seeking permission before she got started. I nodded, and immediately she began running her tongue along my balls and the shaft of my cock.\n\nUsually pigtails were my cue to start treating her roughly, but I wasn't in the mood for that. She was my little girl and there would be plenty of time tomorrow night if we wanted to play a little rougher. Tonight, she was my princess, dressed up sexy just for me.\n\n\"You'll always be my little girl, Kitten. I'll be 110, you'll be 80 and you'll still be my princess,\" I said, answering her question from a few minutes ago.\n\nShe stopped licking my cock, looked up at me, and smiled while looking like she might want to cry. Instead, her mouth dove down on my cock, taking almost all of it in one motion.\n\n\"Jesus,\" I managed to gasp out. It's hard to giggle with a mouthful of cock, but she managed. If I looked directly at her right now, with my cock in her mouth and her wide eyes staring at me, I knew I was doomed. And if we were going to ruin those panties, I would do a proper job on them. Instead, I looked across the room, where Rachelle had conveniently placed a mirror. I could see Kitten's ass, with the thong covering nothing, her pigtails draped across my legs, and a look of desperate ecstasy on my face. I was a man trying to hold on, after being teased ruthlessly for the last hour or so. \n\nIf nothing else, I could give Kitten something to think about. \n\n\"You know Rachelle was lying when she said she had customers, right? She's in her office right now, watching,\" I said in a whisper.\n\nKitten's eyes got wide and she glanced around the room. Rachelle was almost certainly not watching unless she'd done a magnificent job of hiding cameras. Plus, if word got out she was doing anything like that, it would not be good for business.\n\nKitten took my cock out of her mouth and flicked her tongue under the crown, causing me to groan. \n\n\"Do you think we're giving her a good show, Daddy?\" she said quietly. The look on her face said she either believed it or was playing along. \n\n\"You always put on a good show, Kitten,\" I said. She smiled and stood up, reaching behind to remove her bra. I stopped her. \"Don't take anything off. I want you just as you are.\"\n\n\"Mmmm, it's your money, Daddy,\" she said, standing over my waist, and pulling her soaked thong to one side. She slowly lowered her hips as I held my cock up for her. She couldn't resist swivelling her hips just above the tip of my cock just to be a tease. She was practically dripping on me. I gave her a dirty look, but didn't pull her down. Instead she slowly lowered herself on me. We both gasped.\n\n\"Ohhhh, Daddy,\" Kitten groaned, trying to maintain a slow rhythm on my cock. However, she was wound up after hours of shopping for sexy toys, her fashion show, and the thrill of maybe being watched. I looked at her and had a moment where I couldn't breathe. Her eyes closed, focussed on what she was doing, her face flushed, her pigtails bobbing. Her tits were barely contained in her lacy bralette. For the 1,000th time I wondered how I got so lucky.\n\nThen I reached up, slid my hands under the bralette and began playing with her nipples. Her eyes shot open, her hips slammed down, burying my cock deep in her pussy and she came hard.\n\n\"Ohhhh, Fuck!\" she screamed, and made me wonder how soundproof the door was. Kitten rested her head on my shoulder and tried to catch her breath. While she was doing that, I could feel her pussy pulse around my cock. I focused on anything other than what she was doing to me so I didn't cum. I held out. Barely.\n\n\"Every. Damn. Time,\" she moaned after she caught her breath. She lifted her head off my shoulder and tried to look annoyed. I wasn't terribly worried, given she'd just orgasmed.\n\n\"Oh please, you were 99% of the way there before I ever touched you,\" I said. I was still gently running my fingers over her nipples. She wasn't going to come again immediately, but she did begin to squirm.\n\n\"Maybe I should hop off,\" she said breathily. \"I wouldn't want to wear you out before tomorrow night, Daddy.\"\n\nI gave her nipples a hard squeeze and she squealed and did a little bounce on my lap.\n\n\"You don't need to worry about tomorrow night,\" I said to her. Which was true. I still had a stash of Viagra I could dip into and I wasn't taking any chances with performance anxiety tomorrow night. I would be plenty hard when she wanted to play.\n\n\"Ok Daddy,\" Kitten said, and began moving again. This time there was no closing her eyes and being off in her own world. She was staring at me, resting her hands on my shoulders. She smiled, leaned in and kissed me.\n\nI can't explain why it was the kiss that broke me. After everything that we'd experienced and done in the last couple of hours, it was her smile and kiss, and well, her pussy moving and squeezing me as she rode me, that finally did me in. I urgently moved my hips off the couch a couple of times, trying to feel as much of her as I could. I groaned into her kiss and felt myself fill her.\n\nKitten groaned a second later and I felt her shudder too. It wasn't one of her reality-altering orgasms, but I always loved when she came with me.\n\nWe broke the kiss and looked at each other dazed. Then I leaned up and kissed her nose and she giggled.\n\n\"I love you so much, Kitten,\" I said. She managed to flush a deeper shade of red and might have had another tiny orgasm.\n\n\"I'm glad you do,\" she said. \"I might have run up quite a bill.\"\n\n\"You're worth every penny. You know that,\" I said, moving my fingers from her breasts to run them along her face and into her hair. She took a moment to enjoy the feeling, then leaned down and I felt her lips gently press against my forehead.\n\n\"I guess we should clean up and head out,\" she said with a sigh. I reached around, put my hands on her back and tip her forward and hugged her hard.\n\n\"I think for what I'm paying, that entitles us for a few more minutes,\" I said. Kitten giggled, then hugged me back. \n\n****\n\nTragically, Kitten still had to go to school the following day. It had been a while since I woke up next to her and then shoved her at the door to go to classes. She pleaded with me to let her skip the day, but because she only took classes four days a week so she could have Fridays off, missing a day had a significant impact. She whined but eventually complied.\n\nI thought that meant I'd have an easy day, but around 11 I got a text saying Soo and Gillian wanted to meet up for lunch. I hadn't seen them since Christmas, so catching up would be nice. However, I wasn't looking forward to being smothered with concern from Soo over how I was coping with the loss of my mom.\n\nWhen I walked into one of the few cafes near Lasalle that hadn't banned Soo for her trouble-making last year, I did a double-take. The last time I saw her she had hair halfway down her back, with a purple streak in it, and a nose piercing. Now she had more piercings on her ears, nose and eyebrows. Oh, and at some point since I'd last seen her, she'd shaved her head. It was growing back, but it was still stubble. She ran over and hugged me.\n\n\"What the hell happened?\" I said, perhaps a bit more abrupt than I meant, but I always thought Soo had lovely hair. Plus, Kitten had mentioned nothing about this. Soo blushed, but before she could say anything, Gillian came over and shook my hand. Just to make matters weirder, she had grown out her hair, so it was now sitting at her shoulders.\n\n\"She's rebelling,\" Gillian said, as we made our way back to the table we held. \"I've decided to join her in the hair rebellion.\n\n\"Rebellion?\" I asked. Kitten rarely made me feel old and out of touch. I love these two girls, but they could make me feel 50 in a hurry.\n\n\"Korean women often have long hair. I dyed my hair to rebel against having normal, long hair. But then I read that was becoming a cliched thing, and that lots of Korean and Asian women were doing this and it was becoming a stereotype used in movies,\" she said. If nothing else, a dissertation on Asian women's hairstyles was preferable to pitying eyes and making sure I was ok.\n\n\"So she decided to rebel against that and shaved her head. Without telling anyone she was going to do it, I might add,\" Gillian said, jumping in. Soo looked a little embarrassed. \"Because if she had, maybe her girlfriend would have said it was a bad idea.\"\n\n\"And what's your reasoning for growing your hair out? Planning on shaving it off and making a wig to give to your girlfriend?\" I asked. Soo's eyes lit up, as if that was a brilliant idea that she hadn't considered yet. Gillian gave her a look indicating that wasn't happening.\n\n\"I am rebelling against the stereotype that all butch dykes have short hair,\" she said, trying to sell it. I wasn't buying.\n\n\"You're also young, hopelessly in love, and want to be in solidarity with your girlfriend's uncomfortableness,\" I said.\n\n\"Yeah, well, that too,\" she replied.\n\nThe girls had already ordered, including something for Kitten, anticipating she would be rushed. Minutes later Kitten burst into the cafe looking harried. Her hair was back in a ponytail, she was wearing her glasses, and she had a thin sheen of sweat rushing from her class to here. It was a reminder of how much of a workload she was carrying this year. She came over, kissed me on the cheek and flopped into the chair.\n\n\"You ok?\" I asked. She nodded.\n\n\"Are you going to have enough energy for your big night out?\" Soo asked. I glanced at Kitten, who shrugged.\n\n\"I might have mentioned what we were doing this evening,\" she said. It was an indicator of how frazzled she was from classes that she didn't look embarrassed. She didn't have the energy for it, and I didn't have the heart to give her crap about it.\n\n\"I still think you're nuts,\" Gillian said. Soo looked curious, but not enough to float the idea past her girlfriend. \n\n\"Maybe, but I'll be there and if it gets weird, we'll just leave. As weird things go, this is fairly harmless,\" I said. I noticed I was saying this to reassure myself, reassure Kitten I was ok, and convince Gillian I was not selling her friend into sexual slavery. I'm not sure I was succeeding, but it was worth a try.\n\n\"Is Kris going with you?\" Soo asked, continuing her long-standing ability to know just the right question to ask to add fuel to the fire. Kitten had been resting her head on my shoulder and I could feel her tense.\n\n\"No. We had a blowout yesterday and I haven't heard from her since,\" Kitten said. Huh. I'd been wondering. I wasn't sure if that was a good sign or not.\n\nI was about to say something when Soo decided to drop a nuke.\n\n\"You should have sent that cunt home after Christmas,\" she said. Kitten and I looked at her in shock. Gillian looked like she wanted to get on one knee and propose.\n\n\"Kitten, she doesn't like us,\" she said, pointing at her and Gillian. \"And that should tell you something because we're awesome. She can't keep a job, she whines and complains and takes advantage of you. \n\n\"I....have experience with bad friends. Just like her. I know you're trying to wait this out until school is over, but she will find some new way to take advantage. All she is doing is wearing you down. Kick her ass out.\"\n\nI felt like we should all stand up and applaud. Instead, Gillian summed things up perfectly.\n\n\"My girlfriend is fucking awesome,\" she said, just as the food arrived. Nobody was about to disagree with her.\n\nAs everyone started digging into wraps we got updates on the fragile egos of male computer programmers. Soo had been playing some shows, recording some songs and putting it online to a favourable response and absolutely no mention of my mom, which was a complete win. Even Kitten perked up a bit.\n\nAfter we finished lunch and said our goodbyes, I walked Kitten back to school, at a brisk pace. She said she would be fine this evening. The club didn't open until 9, so she would take a quick nap once she got back to the hotel.\n\n\"And Kris?\" I asked.\n\nShe sighed.\n\n\"Soo was right, wasn't she? It's not going to work, despite everything. She's not just going to change,\" Kitten said, sounding defeated. I hated hearing her sound like that, even though Kris not taking advantage of the situation wasn't her fault.\n\n\"You tried, little girl. That's all you can do sometimes.\"\n\nShe nodded.\n\n\"Ok, I'll tell her she has to move out by the end of the month. She'll hate me, but that's that. But I'm not doing it until Sunday. I want this weekend to recharge,\" she said. We reached the entrance to the college and her phone buzzed.\n\n\"Five-minute warning,\" she said, kissing me to the stares of some of her fellow students. She didn't care. \"Love you and see you in a few hours. Let's have some serious fun this evening. I need it.\"\n\n***\n\n\"Kitten! Ben! You're being stylishly late this evening, I see,\" Rachelle said as we walked up to her at the bar. It was getting near 10:30, but considering the place opened at 9, I don't think we were that late. Then again, Kitten specialized in stylishly late.\n\n\"Sorry, sorry,\" Kitten said. \"I wanted to make sure I looked good.\"\n\nRachelle glanced at me, and mirrored my look of amusement. Kitten had already caused a dozen or more heads to swivel as we walked in. 'Good' wasn't entirely cutting it. 'Stunning' was much more accurate.\n\nShe let her hair go loose this evening, which was rare as she usually complained it got in the way, but she put some curl into it and it rolled in waves around her face and back. She had her collar with the heart lock on it around her neck. It plunged down between her cleavage, which she was showing a generous amount of. She was wearing a black, short-sleeve sweater dress with buttons along the front. The dress clung to her body and ended a few inches below her ass.\n\nOh, and she was walking in a pair of black, pleather, thigh-high boots with a 5-inch heel. She still hadn't shown me what she was wearing underneath that, but I was going to guess it was sexy and didn't contain much fabric.\n\nI nearly had a stroke when she came out of the bathroom. Not because I was scandalized or that I knew everyone was going to be lusting after her; no I wanted to fuck her right there and then. She was more than a little tempted to, but said the wait would be worth it.\n\nMy cock had been hard for about two hours now, so I certainly hope so. I was dressed well enough to meet the dress code for men with a nice pair of shoes, not sneakers, black dress pants, a red dress shirt with a blazer. A quick glance around showed I was pretty much on track for what many other men were wearing.\n\nTypical. Women spend hours dressing to the nines to look sexy as hell. The men make sure they do enough to not get refused entry.",
        "Rachelle introduced us to two of her friends, Jean and Marie. Both appeared to be in their late 30s with dark hair. They were both around the same height, but I noticed Marie accomplished that with a pair of terrifying heels. She gave me a friendly smile and shook her hand gently. \n\nPredictably, Jean was pouring on the charm. This would be an early test of my ability to not strangle every man who came onto Kitten this evening.\n\n\"You are a Kitten, but I see no ears or a tail,\" he said, smiling. If that was his idea of being charming, he was in for a rude surprise.\n\n\"Oh, I have them, but I only wear them for my fiance,\" she said, glancing my way and smiling.\n\nI'd decided that at that point, no matter what else happened this evening, one of my favourite moments was going to be Kitten casual crushing this man's desire to fuck her. It flashed across his face for only a moment, but we all saw it.\n\n\"Ah, I see,\" he said, looking my way. \"Well, you are a fortunate man.\"\n\nTranslated: \"How the fuck did you pull this off?\"\n\n\"Oh, I know I am,\" I said, giving her hand a little squeeze.\n\nTranslated: \"Fuck off and die, she's mine.\"\n\nWho said this evening wasn't going to be fun?\n\nRachelle and Kitten chatted, with Jean joining in after a few moments of pouting. Marie began talking to me.\n\n\"My husband has all the subtlety of a tank, but he's basically a good man. Now that your Kitten has laid the ground rules, he'll behave himself,\" she said, moving a little closer to me. \"Rachelle said it's your first time at one of these clubs. Playing or visiting?\"\n\n\"I have a curious Kitten,\" I said, and she smiled perhaps more than that comment deserved. \"She doesn't really have an interest in playing with another man. She mostly wanted to see what the place was like after Rachelle extended the invite.\"\n\n\"Only men are off-limits? What about women?\" Marie asked. It wasn't just an idly curious question.\n\n\"For tonight, everyone is off-limits. But I followed her lead about this place. If she wants to come back one day and says a woman is on-limits, we'll see how that goes. But for tonight, some playtime is as far as we'll go.\"\n\n\"Well, not a complete loss then. If your Kitten changes her mind I hope I'm there for that day,\" she said.\n\nThere was something to be said about Marie's behaviour, and I'm willing to bet many of the others here at the club. They didn't waste time being coy about what they wanted. They were here to have fun and get laid.\n\nNot interested? Cool, have a good evening. At least I didn't have to worry about Kitten being harassed or chased this evening.\n\nNow that I had a moment to catch my breath, I looked around the place. It was two-storey, with the ground floor looking like any of a hundred different clubs I've been to over the years. A large bar area occupied the left side of the space, where people were chatting and drinking. There were also plenty of mirrors and I noticed plenty of people checking the mirrors to see if anyone was checking them out. On the right side were some tables, but also couches and chairs. Most of them were occupied; surprisingly, people were behaving themselves. Some making out, but nothing sexual was happening. \n\nTowards the back was a large dance floor. Rachelle said it probably wouldn't get started until midnight. The place was decently crowded for a Thursday night. And unlike Gillian's assessment that it would be filled with couples in the 50s, there was a decent mix. Most seemed in their 30s, but there were some older, a handful in their 20s.\n\nThen there was the spiral staircase that went up to the second floor. I had a pretty good idea of what happened up there.\n\n\"And how are we doing, Ben?\" Rachelle said from behind me, snapping me out of my daze.\n\n\"So far, so good,\" I said, noting that Kitten was chatting with another couple closer to her age at the bar. Jean and Marie had moved along. I mentally took a deep breath. I would have to get used to Kitten drawing a lot of attention this evening and not act like a protective asshole.\n\n\"You're doing fine,\" Rachelle said, more a reaffirmation statement for me, than a question. \"Trust me, I've been coming here for a decade and I am very familiar with all the signs of an impending jealousy fit. You're fine.\"\n\n\"So where am I on your scale of things?\" I asked. I was genuinely curious.\n\nRachelle smiled and I was reminded how beautiful she was. Many women were dressed pretty slutty this evening and, well, it was a swingers club, so why not. Rachelle managed to be...erotic. Like every woman here she was balanced on dangerous heels. She wore a red pencil skirt that stopped short of her knees. A black top with just enough translucency to hint at the push-up bra she was wearing underneath. Her blonde hair was piled in a messy bun on top of her head. And around her neck was a gold necklace that had an infinity charm at the end.\n\nShe was stunning, and I had absolutely no interest in her. Furthermore, she knew it and knew why. Rather than be frustrated or annoyed, she seemed to find it charming.\n\n\"You're processing things, Ben. Which is, as I understand, how you deal with things. Observe, take in all the information, figure out a course of action, and then go forward,\" she said.\n\nWow.\n\n\"Kitten told you?\" I asked.\n\n\"I have a Masters in Psychology,\" she replied. \"And Kitten mentioned you might behave like this.\"\n\nI laughed and shook my head. Some music began to play, and a few people made their way towards the dance floor. I didn't recognize the song, but I was never much of a dancer, even before the accident.\n\n\"Did you give her any advice on how to make sure I didn't get lost in my head?\"\n\nNow it was Rachelle's turn to laugh.\n\n\"She's your fiance, Ben. I think she has many effective techniques for distracting you, as you're about to find out,\" she said.\n\nAnd with that, Kitten popped around from behind her, came up to me and hugged me. I wrapped my arms around her and was reminded just how much I missed her. We'd been apart for maybe 30 minutes as we were chatting with others. We were in each other's line of sight at all times. Yet, I could feel her squeeze me harder than usual, reassuring me that she missed me.\n\n\"And how's your night going, Kitten?\" I asked.\n\n\"It's been fun. Certainly lots of people are interested in talking to me,\" she said, grinning.\n\n\"There are plenty of mirrors around here, Kitten. I don't think I need to tell you how incredibly sexy you look,\" I said.\n\nShe was already pretty red, but I could see her flush a bit more. She bit her lip and did a little swaying thing with her hips.\n\n\"Thank you, Daddy,\" she said, in her coy voice.\n\nYou'd have to be blind and deaf to miss the signals she was putting out. I was astonished she'd last this long before wanting to go upstairs. I was about to make my apologies to Rachelle, where she provided some tips for upstairs.\n\n\"There's a big, open playroom area where there is a pole if you want to dance, a swing, couches and a couple of beds. There are some larger rooms with multiple or King beds. And there are a few smaller rooms where you can play but people can watch from the hall. Remember, there are no closed doors here. Finally, there are lockers for your belongings, which I advise you to use,\" she said.\n\n\"So, go have some fun. Kitten and Ben, as new and sexy as you are, everyone has already noticed you. This club being this club, everybody already knows that you're just here to play with each other. So relax and have fun,\" she said.\n\nThen, to my surprise, she leaned in and kissed me. Her lips were warm, wet and tasted of something exotic I couldn't place. Her tongue briefly slipped into my mouth and I snapped out of my shock and remembered where I was and who I was with. I placed my hands on her hips and briefly pressed her towards my body. After a few seconds, which felt much longer than that, she stepped back, breaking the kiss.\n\n\"Ah, it's nice to know I guessed correctly,\" she said, smiling.\n\n\"Which is?\" I managed to get out, with my brain working on about half power.\n\n\"That you know how to kiss. And that you can stop thinking and enjoy the moment,\" she said.\n\nThen she turned and pulled a slightly confused and dazed-looking Kitten in for a kiss. If I was initially hesitant in my kiss, Kitten melted into Rachelle's body almost immediately. Rachelle's hands slid down Kitten's body and she gently squeezed her ass, which made Kitten jump a bit. \n\nIt wasn't a huge make-out session, but the kiss had passion to it. Finally, Rachelle broke the kiss and smiled at Kitten, who was trying to figure out what time zone she was in. Rachelle leaned in and whispered something in her ear. Kitten smiled and nodded.\n\n\"There you go,\" she said to both of us. \"Something to warm you up. And I think you'll find no shortage of people watching and the world didn't end.\"\n\nA quick glance showed that a number of the club members were watching us. I didn't feel weird so I guess I was warmed up.\n\n\"Go have fun. I'll check in on you later,\" she said and then walked over to another couple. Kitten and I looked at each other in a daze. Then I took her hand and we made our way upstairs. Although not before I cursed having to try and go up the stairs. They were more artistic than practical, especially when you have a bum knee and a cane.\n\n\"Should I ask what she whispered to you?\" I said. Kitten had her arm looped through mine and was leaning into my body.\n\n\"Maybe later,\" Kitten said, as our first naked couple of the evening walked by. Well, he was completely naked; she was still in a garter, stockings and heels. They waved hello and then popped into a room where another couple were already fucking. They hopped on the bed, said hello and began kissing and touching the other couple.\n\nKitten looked at me for a moment and grinned.\n\nWe spent the next 10 minutes or so walking around the floor. We saw couples swapping, a few threesomes, and the large room appeared to have an orgy going with about six or seven participating. We were both massively overdressed, as most people had already shed their clothing, so we got a few curious looks. \n\nWe passed one of the smaller, single rooms. As Rachelle had said, there was no door, plus a window looked in, letting more people take a look if they wanted. There was a queen-sized bed and an oversized chair. The whole room was lit in red, which seemed to be the lighting scheme for most rooms.\n\n\"Shall we, Daddy?\" Kitten said, taking my hand and leading me into the room. We stood there for a moment and just kissed, with my hands running down her body. I was trying very hard not to think about if anyone was watching. Finally, Kitten broke the kiss, looked up at me and smiled.\n\n\"You're nervous. It's adorable,\" she said. Ordinarily, I'd say she was being bratty, talking to me like this, but she wasn't wrong.\n\n\"I'll relax,\" I said, trying to reassure her.\n\n\"Mmmm, not too relaxed,\" she said, running her hand over my crotch, feeling how hard I was. \"Come on, I know how to distract you.\"\n\nShe led me over to the chair and pushed me down. Then she straddled my lap, blocking my view to the hall and began kissing me. Her dress hitched up and I put my hands on her ass. For the first time I got a hint as to what she was wearing under that dress. No stockings, but she was wearing a thong. It didn't feel lacy, but perhaps leather.\n\nThen Kitten broke off the kiss and began kissing along my jaw and neck. I continued running my hands over her ass, pulling up her dress a bit more. Then she nipped at my neck. I shifted and looked at her. She was grinning mischievously.\n\n\"Patience, Daddy. You'll get to see what I have underneath soon enough,\" she said.\n\n\"I've been pretty damn patient already, little girl,\" I said, trying to add a little extra 'daddy' into my voice. She did look a little cowled, but it was momentary.\n\n\"Well then, I'll just have to keep distracting you,\" she said, standing up and looking down at me. Instead of unbuttoning her dress, she reached down and undid my belt, unbuttoned my pants, and slid the zipper down. Then she began to slowly pull my pants down. Once they made it down to my ankles, she sank down to her knees. Kitten then ran her hands up my legs towards my cock. She already looked like she was in a daze, unsure of what to do next.\n\nI glanced up and noticed a few people already seeing what we were up to. From this angle they could see my cock and probably a hint of Kitten's ass.\n\nOh well, in for a penny....\n\n\"People are watching, Kitten. Give them a good show,\" I whispered to her.\n\n\"Oh God, she said, shuddering. Then her head surged forward and she buried my cock all the way into her throat. I could feel her lips wrapping around the base and her hands stroking my balls.\n\n\"Christ,\" I groaned, lifting my hips. I wasn't kidding when I told Kitten last night when I said I might take Viagra. Along with not worrying about performance anxiety, I found the drug actually made me last longer. Which was good, because that initial plunge would have broken lesser men. \n\nI could tell Kitten was trancing out, which sometimes happened when she sucked my cock. Her eyes, when they were opened, were glazed and unfocused. She kept licking and sucking on my cock, flicking her tongue across the crown, before diving back down, taking as much as she could. She touched my hand and moved it to the top of her head. Taking the hint, the next time she deep-throated me, I put my hand on her head, keeping her there.\n\nThen I leaned in and whispered in her ear.\n\n\"You're flashing your ass and pussy to about a half dozen people right now, little girl,\" I said. She moaned. \"They're watching and wondering who the cock sucking slut is.\"\n\nShe pushed her head up off my cock, gasped \"Oh God!\" and shuddered.\n\n\"Did you just cum, little girl?\"\n\n\"A little one, Daddy. Sorry, I couldn't help myself,\" she said, and then went back to licking and sucking on my cock.\n\n\"Bad girl,\" I said, and reached down and pulled her dress up over her hips. Now her ass and pussy were both clearly on display. It was some kind of pleather thong, although Kitten was so soaked it had no hope of containing anything.\n\nI wasn't lying to Kitten; a half dozen hungry-looking people were watching us. Well, if they wanted a show...I reached down and gave her left ass cheek and moderate slap. Just enough to turn it red.\n\nShe moaned. \"Ohhhh, I'm sorry I was bad, Daddy.\"\n\nI gave her other cheek a slap, balancing it out and she groaned again. I knew more than one person out there would love the opportunity to come in and do the same. But that's not what we're here for.\n\n\"More Daddy?\" Kitten asked, looking up with hopeful eyes.\n\n\"Not right now,\" I said. She pouted. \"Stand up and lose the dress. It's time to see what I paid for.\n\nI meant the lingerie, but I knew in her brain it would play into her fantasies. She stood up and began unbuttoning the front of her dress, swaying to some of the music coming up from downstairs. She bent over and gave me a flash of cleavage while showing the onlookers more of her ass. \n\nFinally, she reached the last button on the bottom and then turned around, looking at the group watching her for the first time. She showed off to the crowd, but also kept the tease going on me. I could see she stuttered for a second, the reality that strangers were looking at her nearly naked body. I reached up and stroked her ass, just to reassure her it was ok and I was here.\n\nIt jump-started her brain, I couldn't see what she did, but I did see the group's reaction. Two of them groaned. Finally, she dropped the dress to the floor and turned around. She was wearing a leatherette thong with a zipper that ran up the front. The push-up bra also had a zipper running between her breasts and pushing up her tits to make them mouthwatering.\n\nBetween that and her boots, there was no way anyone was sexier here this evening. It had to be physically impossible.\n\nWhile she had her back turned to me, I'd made quick work of my pants, shoes, and socks. I stood up, and even with her boots, I still had several inches on her. She reached down and began stroking my cock again.\n\n\"Worth the money, Daddy?\" she asked.\n\n\"That remains to be seen,\" I said, reaching down to unzip her thong. She made a small gasp. I then slid it down her legs. I bent down to help them on their way and quickly noticed her pussy was soaking wet. I'd seen her wet before, but this was a new level.\n\nI pulled the thong down her legs, taking a moment to taste the inside of her thighs. She wobbled, both from the kissing and trying to lose the thong. Finally, I stood back up. Now she was just wearing the bra and boots. She moved to lose the bra, but I stopped her.\n\n\"Not yet, Kitten. They show off your tits nicely.\"\n\n\"Yes, Daddy,\" she said. Her focus was back on me now. She knew the audience was there, but making me happy was her focus.\n\n\"Sit on the edge of the bed, Kitten,\" I instructed. She did, opening her legs wide. She probably expected me to fuck her, but instead I sank to my knees, wincing a little, then took her legs and put them on my shoulders. I glanced up and her eyes were huge.\n\nShe was about to say something when I went between her legs and ran my tongue along the entire length of her pussy. She collapsed backwards, dug her fingernails into the bed, and screamed.\n\nWell, that'll probably bring a few more around to see what was going on in this room.\n\nIt was the oddest experience. I concentrated on having fun with Kitten. Going down on her and teasing her has always been one of my favorite things to do. And at this point in our relationship I could play her like a musical instrument. And even from my angle, she was a vision. She'd grabbed her ankles and had her legs wide open, giving me easy access to flick my tongue across her clit, or slide it inside her pussy. She was groaning and babbling and I was grinning at her reaction.\n\nThen I'd see somebody move out of the corner of my eyes or hear someone murmur off to the side, and I'd get a reminder that we had an audience watching us. It was weird for me if I thought about it. \n\nHowever, Kitten hadn't forgotten about her audience. I glanced up a couple of times and I could see her looking towards the door. She was clearly enjoying the attention.\n\nFinally, I could hear her moaning turning into something more coherent.\n\n\"Please, Daddy,\" she whined.\n\n\"Use your words, Kitten,\" I said, and continue to run my tongue across her clit. \n\n\"Fingers, Daddy. Please. I need it,\" she groaned.\n\nI hesitated. I knew what sliding my fingers into her pussy would do. This would go from erotic to pornographic in a hurry. But she was begging me, and no matter how much I like to keep her on edge, I couldn't deny her for very long.\n\nI sucked her clit into my mouth and flicked my tongue quickly across it. Then I slid two fingers inside her soaking pussy, curved them and stroked her magic spot. I wasn't at all surprised by the results.\n\n\"Oh my fucking God!\" she cried out, arching her back. Her pussy gushed, drenching my face and beard. She lost her grip on her ankles and her legs wrapped around my head, smothering me with her pussy. I'd punish her later, assuming I survived.\n\nI could feel her pussy pulse around my fingers and I continued to gently kiss and lick around her clit, careful not to overstimulate her. Eventually, her legs slid off my shoulders and I could hear them quietly land on the floor. I leveraged myself to a standing position and noticed, insanely, I was still wearing my shirt and jacket. I shucked both and then leaned over to check on Kitten to make sure she was ok.\n\n\"Earth to Kitten,\" I said, leaning in close to kiss her forehead. She looked stoned but managed a smile.\n\n\"Mmmm, still flying, Daddy. Check back later,\" she said. I smiled, and decided to give her a moment. I picked up our pile of clothes with the plan to deposit it all in a locker once she recovered.",
        "\"Is she ok?\" a woman asked from the doorway.\n\n\"Still flying. She'll be mostly functional in a few minutes,\" I said. I was settling into the weirdness because I was talking with a naked woman in her 40s wearing only heels while I was standing naked except for a bundled pile of clothes and my cane.\n\n\"She's quite something. I don't suppose you're playing with others this evening?\" she asked.\n\nI shook my head. \"Afraid not. We're not much for sharing the other. But she does like it when people watch.\"\n\n\"Well, you had a lot of people watching. And I noticed you're still ready for action. Plenty of space in one of the larger rooms if you're interested,\" she said with a smile and a wave.\n\n\"Daddy?\" I heard from behind me. I turned and sat on the bed next to her and ran my hands through her hair.\n\n\"How are you doing?\" I asked. She was more focused, but there was still a glaze in her eyes.\n\n\"I'm ok. It's been a while since I went flying like that,\" she said, slowly trying to sit up. \"How are you? Are you weirded out?\"\n\nSuch a good girl. Then again, we agreed to keep checking in with each other to make sure we were ok. If one of us found it to be too much, they had the right to pull the plug, no questions asked.\n\n\"I'm over my initial shock, so we're all good, Kitten,\" I said. She smiled at me. Had a feeling she was going to want more. \"There are lockers for stashing clothing. As loath as I am to see you lose that spectacular bra, hand it over and I'll stash this and we'll take a wander around.\"\n\nKitten unzipped her bra, releasing her breasts, and handed it over to me. I was sorry to see the bra and cleavage go, but getting to see those tits was never going to be a hardship. She leveraged herself off the bed, wobbled a bit from the heels and the aftereffects of the orgasm, and we headed out.\n\nOddly enough, we were both more popular with the people upstairs. That Kitten drew attention was no surprise; she was a 22-year-old redhead and hot as fuck. She was probably the youngest person here. But to my surprise, several women were chatting with me. Getting Kitten to cum as hard as she did earned me some admirers.\n\nWe were friendly, but anytime we were asked if we were open to playing with others, we politely declined. Fortunately, no one made a big deal out of it. We wandered into the main room, where there was an area to grab some water. We did and found a love seat to crash on. I sat down; Kitten got on my lap. And for the next half hour we chatted and watched what was happening.\n\nThe orgy continued on the large bed, but with new players. There was some obvious couple swapping happening on other beds. Rachelle made an appearance, wearing only heels, and checked in to make sure we were ok. She then led a young couple over to another bed, and they promptly began worshipping her. There was no other word to describe it.\n\nI'd remained hard, courtesy of drugs, Kitten, and everything going on around us. Kitten had started off behaving, sitting on my lap with her legs off to one side. Then she got fidgety and straddled my lap, facing away from me. Then she slowly started to grind on my cock, being a tease. She managed to do this while watching what was going on and briefly chatting with a few people who came over to say how amazing she looked earlier.\n\nEventually, she leaned back against me, resting her head on my shoulder.\n\n\"Your willpower is inhuman. How are you not fucking me yet? I'm not sure I've ever felt you harder,\" she whispered.\n\nI reached up and cupped her breasts, giving her nipples a hard tweak. She groaned and pushed her ass down harder on my cock.\n\n\"You didn't ask, Kitten,\" I said, nipping at her ear.\n\nI could hear the huff of frustration so she began rubbing against my cock more, trying to provoke me. That led to me playing with her nipples. \n\n\"Please, Daddy,\" she whined, shifting around in the hopes that maybe my cock would just slip into her.\n\n\"Please what?\" I asked.\n\n\"Please fuck me with your big cock, Daddy,\" she said loud enough to get a few looks. Once a brat, always a brat. I gave her nipples an extra hard pinch causing her to squeak and jump up for a moment. I took the opportunity to adjust my cock. Kitten didn't hesitate, grabbing it, pointing at her pussy and quickly sinking down on it before I changed my mind.\n\nWe both issued loud groans.\n\n\"Oh fuck, Daddy. How are you bigger?\" she said, grinding her ass on my lap, causing my brain to lose focus so much I barely understood what she was saying. I thought she was saying that to play up to the crowd, but her pussy felt tighter. Maybe it was the drugs. Perhaps she was so worked up that her pussy was tighter.\n\nMaybe I was thinking too damn much. I grabbed her hips and started bouncing her on my lap. She took the hint and stopped grinding, planted her feet and helped out.\n\n\"Oh God, oh fuck, just like that Daddy. Yes, fuck me, keeping fucking me,\" she babbled. She noticed a few people watching, and began pinching her nipples as I continued to bounce her on my lap.\n\nI was beyond caring who was watching or what kind of show we were putting on, but Kitten clearly loved the attention. I was focused on not cumming; she was enjoying the people watching her. After a couple more minutes, I could tell she was getting close again.\n\n\"Please, Daddy. Please can I....\" she started.\n\n\"Go ahead, Kitten,\" I said. And to put on my own show, I took my hands off her body and put them behind my head. She leaned forward and put her hands on my knees, using it as leverage, and began bouncing harder on my cock.\n\n\"Oh fuck, oh fuck, so close Daddy, I'm so close. Almost! Almost!\" she cried, before slamming her pussy down on me one last time and screamed \"Cumming!\"\n\nI grabbed her hips to ensure she didn't slide off, and let her finish cumming. It was also when I noticed something interesting. While there were people in the room obviously watching and enjoying us fuck, others were simply busy in their own sexual bliss. It was nice that someone had a really good orgasm, but they were a little too busy to pay attention right now. \n\nKitten straightened up, and looked over her shoulder with a confused, dazed look.\n\n\"How have you not cum yet?\" she asked.\n\n\"Waiting for the right moment, little girl,\" I said. \"Get up and then bend over the arm of this chair, ass up,\" I told her.\n\nI'd wondered before coming here how...aggressive you could be at the club with your partner. I wasn't expecting dungeons, whips and lots of bdsm. But I was hoping Kitten calling me Daddy and perhaps me spanking her would be ok.\n\nFortunately, I'd seen some of that throughout the evening. People wearing collars, nipple clamps, one poor bastard was wearing a cock cage - although he looked thrilled as his wife got fucked by three or four men.\n\nSo as Kitten positioned herself, I examined her spectacular ass that was at just the right angle, courtesy of her boots and the height of the love seat. I gave her ass a light swat and she jumped. I took my cock and teased the entrance of her pussy with it.\n\n\"Ready Kitten?\" I asked. She nodded her head vigorously and pushed her ass backwards, forcing my cock back into her pussy.\n\nFor most of the evening I'd been content for us to be equals or let her play. But now I wanted to assert some authority. I grabbed Kitten's hair, pulled back on it and growled that she better start fucking me. Her hips slammed back into me, forcing my cock further into her pussy.\n\nI gave each ass cheek a few more slaps, turning her skin a lovely shade of red, and producing more groans for Kitten. She kept pushing back her ass, sometimes grinding it on me for some added contact. Finally, something snapped in me. It had been a long evening and my fiance had been one hell of a tease. I grabbed her hips, and began fucking her....hard.\n\nI was grunting as I slammed into her. Kitten began babbling, but saying all the right words to get me off.\n\n\"Fuck your little girl Daddy. Come on, give it to me! My shot has worn off so maybe this is the time you knock me up. Fuck me, Daddy! Breed your little girl in this sex club!\" she cried out.\n\n\"Oh Fuck!\" I cried out, burying myself in her and cumming so hard I saw stars. I was aware Kitten was cumming too and could feel her pussy pulse around my cock, milking all of my cum out of me.\n\nI was dimly aware she was right. Her appointment to get her next birth control shot was earlier this week. She didn't bother to go. Every time now could be the time she got pregnant. It actually made my cock twitch, and caused Kitten to groan.\n\n\"I think I'm done, Daddy,\" she said, slumping forward. I stepped backwards, my cock sliding out of her. There were plenty of tissues and wipes around to help with messes. Kitten did a quick clean and then went to the bathroom to freshen up further. \n\nI slumped back in the loveseat in a daze. I looked around and saw there were fewer people in the room now. A glance at my watch showed it was after 1 am. I guess people had to get ready for work in the morning after their orgy.\n\nStill, there was at least one familiar face. Rachelle came over, leaving her toys passed out on a bed. She sat next to me, which is pretty intimate, but somehow managed to not touch me, despite us both being naked. \n\n\"Well, you were both spectacular,\" she said.\n\n\"Were we too loud? Did we annoy people?\" I asked, thinking that it was so utterly Canadian to be worried about upsetting the patrons of sex club by being too noisy. Rachelle laughed, finding it funny as well.\n\n\"I don't think you need to worry about that. We're not the quiet sort here,\" she said. Then she gently placed her hand on my scarred knee. I was very aware that I was still mostly hard and a beautiful woman, who was not my fiance, was touching me.\n\n\"Will you be back?\" she asked\n\nKitten took that moment to make a reappearance. It was hard to read the look on her face. She was still dazed from the evening's activities, plus she admired Rachelle. But she wasn't entirely happy with where she was sitting or her touching my knee.\n\n\"We'll have to talk about it,\" Kitten said. \"It was a lot of fun, and I really enjoyed it. But it's going to be a busy few months for us, with finishing school, work, getting married and hopefully starting a family. I'm not sure.\"\n\nRachelle took the hint and gracefully stood up, and Kitten quickly occupied the space where she had been sitting and cuddled into me. I found it cute to see her being a little possessive. Rachelle took it in stride.\n\n\"Well, I hope you do. People like you. And if you come here pregnant, well, they'll be lined up down the hall to watch you. Trust me.\"\n\nI felt Kitten twitch when hearing that. I'll give Rachelle credit. She knew what to say to get my little girl's attention.\n\n***\n\nDuring the cab ride back to the hotel Kitten crashed hard, which was hardly surprising. I had my arm wrapped around her shoulder and didn't try to engage her in conversation. I figured it would be 50/50 if I had to carry her up to the hotel room.\n\nThen she surprised me.\n\n\"Did you have fun tonight, Daddy?\" she asked in a dreamy voice.\n\n\"I always have fun when I'm with you, Kitten.\"\n\n\"I'm pretty out of it, but I'm not so far gone to know you didn't answer my question,\" she said.\n\nClever girl. I gave her question a bit more thought.\n\n\"I never would have done something like that without you. I don't think I would have been that brave. So I'm grateful I got to experience that because of you,\" I said. \"I had fun this evening because I always do have fun with you. Do I want to go again? Only if you want to. And I'm serious when I say that.\"\n\nShe didn't say anything, and for a moment I thought she might have drifted off. Then she spoke so quietly I could barely hear her.\n\n\"Rachelle would like us to come back. I think she wants to play with us. With you,\" she said.\n\nI thought I would have to fight off being jealous of everyone paying attention to Kitten and wanting to play with her. But Kitten had made it easy not to feel that way. She established early she wasn't interested in anyone other than me and why would I be interested in anyone else when I had her.\n\nBut Rachelle was a blind spot. A beautiful, successful, sexually confident woman who is closer to my own age. I didn't think it would be possible that Kitten might feel insecure and maybe jealous. I kissed her head.\n\n\"All I ever want, and all I ever need is right here with me at this moment. And I will take vows to that effect in a few months. I have no interest in any other woman, my love,\" I said.\n\nShe looked up at me and her eyes were a little watery. I knew a lot was bouncing through her brain. It had been an intense evening, after all. \n\n\"Ok, Daddy. Me too,\" she said. Then adding in a quieter voice, \"I love you so much.\"\n\nI felt my breath stop for a moment and was reminded again that I had no idea how on earth I was so lucky.\n\n\"I love you too, Kitten,\" I said. But her breath had shifted and she was already asleep."
    ],
    "authorname": "thanagar",
    "tags": [
        "daddy",
        "older man",
        "younger woman",
        "ddlg",
        "mature",
        "exhibition",
        "romance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/little-packages-ch-11"
}
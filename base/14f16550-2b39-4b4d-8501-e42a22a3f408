{
    "title": "Three Square Meals Ch. 094",
    "pages": [
        "\"Hey, handsome.\" Alyssa kissed John's shoulder as she slipped her arms around his waist, cuddling him from behind.\n\nFaye had dimmed the lights in the bedroom, which made the violet glow from the twins' eyes all the more apparent. \n\nJohn turned away from the Maliri girls and glanced over his shoulder to smile at her. \"Sorry, I was miles away there.\"\n\n\"I don't think you have anything to worry about,\" she said, looking down at the bonding sisters. \"Tashana's so much stronger than she was...\" \n\n\"Actually, for once it's not her I'm worried about,\" John replied, his attention on Irillith.\n\nAlyssa felt his concern and clarified, \"That's kind of what I mean. Tashana is not going to let anything bad happen to her sister; she really has forgiven her for what happened.\" The blonde hesitated for a second, then continued, \"Or at least realised it was pointless to hold a grudge, not when Irillith's not the same girl she was before.\"\n\n\"I know her intentions are good, but that still must've been a hell of a shock for Irillith,\" John said, stroking the Maliri girl's arm. Irillith remained completely oblivious, deeply entranced in her violet-eyed connection with her twin. \"She must've just got a horrendous snapshot of a decade of abuse...\"\n\nHis blonde Matriarch uncoiled herself from around him and sat beside Tashana. Mimicking his soothing caress of the twin's arm, she said, \"This is something different... They're not bonding in the way I've done with the girls. Remember I said their portraits merged and the two roses blurred?\"\n\n\"The images in your mind? Yes, I remember,\" John said, wondering what was happening to the two girls.\n\n\"They've merged with your portrait, appearing as girls now, just like the others... But with them it's different, they're like... together now,\" she said, struggling to describe what she was seeing. \"If I look at them, instead of each moving to be held by you like Calara, Sakura, and Jade do, the pair move together. It's like I can't separate them.\"\n\n\"Those portraits seem to be symbolic, so what do you think that means?\" John asked, glancing across the supine blue girls at the troubled blonde.\n\nAlyssa gave him a helpless shrug. \"Me and Athena are both drawing a blank, but when the twins wake up, maybe they can let us know. She says 'hi', by the way.\"\n\nJohn looked at her in surprise, then smiled and waved. \"Hello, Athena.\" He paused to study Alyssa closely for a moment. \"How's she doing? I mean... how are you doing?\"\n\nAlyssa smirked at him. \"It doesn't really work like that. She's present in my mind, but I control all my senses. She's very happy and enjoys helping me.\"\n\n\"What with?\" John asked, looking at her in fascination.\n\n\"Stuff...\" Alyssa replied enigmatically. She looked down at the twins and slid a hand from Tashana's arm to caress her cum-filled stomach, before brushing it over Irillith where their bellies touched. \"Are you excited about tomorrow?\" \n\nIt took John a moment to realise what she was talking about, but the eager anticipation in her eyes as she stroked those swollen blue tummies soon made it clear. \"To be honest, I haven't really had a chance to think about being with the Young Matriarchs. I've been too worried about Edraele and getting her healed up again.\"\n\nAlyssa sat back and studied him for a moment, then held out her hand. \"The girls will be here in a minute to keep an eye on the twins, they're all going to bed soon. Why don't we head over to the Officers' Lounge and have a nice quiet chat?\"\n\n\"Sure,\" John readily agreed, climbing off the bed and throwing on some clothes. \n\nJohn followed Alyssa into the corridor, exchanging smiles and greetings with the girls as they passed them on the way to the bedroom. The lithe blonde still had a pair of heels on, and with him barefoot, they were about the same height. It felt strange to be at eye-level with her as they walked side-by-side. \n\nShe gestured at the double doors to open them with a telekinetic push, then led him over to the sofas. Kicking off her shoes, Alyssa tucked her legs underneath her as she reclined on the seat. Patting the sofa next to her, she gave him an inviting smile.\n\n\"So... what do you want to talk about?\" John asked cagily as he sat beside her.\n\nShe raised an eyebrow. \"How about we start with you and the Young Matriarchs. They're all very excited at the prospect of getting a visit from Mr. Stork in nine months' time...\"\n\nJohn blinked then rubbed at his face. \"Crap... I hadn't even thought about that. I was just thinking about being with them for the first time.\"\n\nAlyssa watched him for a moment then unfolded herself, resting her feet on the coffee table and crossing those long, shapely legs. Patting her lap, she said, \"Come and lie down here, you'll be more comfortable.\"\n\nHe did as she asked, resting his head on her warm thighs and relaxing as she started running her fingers through his hair. \"That feels good...\"\n\nAfter giving him a few minutes to get settled, she asked gently, \"So why all the doubts?\"\n\n\"They're quite young for Maliri, it might be wiser for them to wait for a few years...\" John prevaricated. \n\nAlyssa shook her head, already prepared for that one. \"Leena and Tsarra are both in their fifties and the other three are in their thirties... They're more than mature enough to think about having children and they're all very keen to start rebuilding their noble Houses. I'm younger than them, even taking into account how long-lived the Maliri are, and we're planning on getting me pregnant in less than six months...\" The last was said with a tone that made it clear that topic was not up for discussion.\n\nJohn looked up at her and frowned. \"Alright, they might be old enough, but do they really know me well enough to make that decision? Having children is a huge, life-changing event, and I don't want them rushing into it because the Maliri genetic attraction is pushing them to do it.\"\n\nBrushing his hair away from his face, Alyssa said, \"You spent weeks getting to know them on Genthalas and letting them get to know you. I've seen how they are with you, and they're genuinely smitten; you saving them from a bloody civil war helped push raw physical attraction into being thoroughly besotted. Besides, most Maliri are conceived with little more than an awkward greeting, a couple of pumps and a squirt... By comparison, you're taking things at a glacial pace!\"\n\nHe rolled his eyes at her crude imagery and couldn't help chuckling.\n\nAlyssa gave him a knowing smile. \"What's really bothering you?\"\n\nJohn looked into her eyes, then turned to tenderly kiss her toned belly. \"It should be you first...\"\n\nHer gaze softened and she leaned down to kiss him. \"It will be... but now isn't the right time for me.\"\n\nHe was surprised at how emphatically she said that. \"You're normally pushing me to get you pregnant as soon as possible...\"\n\n\"I still really want that more than anything, but I finally see why you've wanted to hold off,\" she said, looking at him wistfully. Turning to glance out the window at the stars, she continued in a quiet voice, \"Somewhere out there is another Progenitor, who's completely focused on killing you... and let's be realistic... all of us as well. Considering how intense the fighting's become, me and the girls can't face these kinds of battles while pregnant, it's just not practical. Besides, the chance of me losing our baby is too horrible to even think about!\"\n\nJohn nodded, letting out a sigh. \"That's the only thing stopping me now. I used to worry about you girls not being ready and being too young, but that's changed. If you're mature enough to save billions of lives on Terra, I think it's fair to say you're mature enough to decide when you want to have children.\" He hesitated for a second, then added, \"I was worried about the Change and how much that was influencing your enthusiasm to get pregnant, but you've done a great job convincing me your feelings are genuine.\"\n\n\"That's good to hear,\" she said, looking pleased. \"You just have to look at Sakura for proof. She joined much later, after you already knew about the personality tweaks you made at the start. I think it's fair to say she's just as enthusiastic about starting a family with you as the rest of us!\"\n\nHe couldn't help smiling fondly at the thought of the raven-haired beauty looking up at him with doe-eyes. \"Yeah, true enough...\"\n\nAlyssa could still feel the doubt and hesitation in his mind and prompted him gently, \"Those are all sensible concerns, but I know there's something else. Why don't you tell me the real reason?\"\n\nJohn looked up at her and was quiet for a long moment. \"If Rachel's right about this, and I'm sure she is, I'll be able to choose if they have a boy or a girl. I'm going to let the girls make that choice...\"\n\nThe blonde nodded, expecting as much, but her eyes widened a second later. \"What happens if they ask you for a son?\"\n\nHe turned away for a moment, unable to meet her probing gaze. Alyssa gasped in shock when she heard his thoughts and when he faced her again, she could see the haunted look in his eyes.\n\n\"Oh John... I'm so sorry,\" she murmured, her voice filled with sympathy as a tear rolled down her cheek.\n\n\"I'm a Progenitor... It's what we do best,\" he said softly.\n\n***\n\nCaptain Galen Skotari sat behind his desk in his Ready Room and fidgeted in his chair. In his numerous years in the military, he'd always been impressed at how ship captains always seemed to be in the middle of something vitally important. However, since becoming a Captain himself, he was convinced they were all in on some vast conspiracy to make the job seem busier than it actually was. \n\nHe'd gone through his XO's status report an hour ago, but he decided to check again in the vain hope that something new and interesting had been added since then. According to his Chief Engineer, their heavy cruiser the Antaeus, had no outstanding mechanical problems. The Medical Bay was empty, without any of the injuries from minor accidents that usually seemed to keep them busy. Finally, there were no disciplinary issues that he needed to look into, aside from the furtive surly looks he got from the crew when they thought he wasn't watching. He could hardly blame them for that though, not when he was responsible for provoking Commodore Maddox into lumbering them with a second week-long patrol.\n\nAll seemed to be going well and without anything left to do, he was growing increasingly bored. He considered getting another cup of coffee, but he'd had three already this evening which probably wasn't helping. Maybe it was time to switch to tea...\n\nRolling his eyes at the weighty decisions he was left pondering, he rose from his chair, exited his Ready Room and walked onto the Bridge. It was getting quite late, so there'd be a change of shift in the next twenty minutes. He nodded a greeting to Commander Alice Hoplander, who responded with a respectful inclination of her head, then walked up the steps to take his seat in the Command Chair. \n\n\"Good evening, Commander. Are the lizards behaving themselves?\" he asked, glancing at the holographic Sector Map in the centre of the Bridge, which depicted the border between the Kintark Empire and Terran Federation with a glowing red line.\n\n\"Evening, Captain,\" his XO replied, turning in her seat to look his way. \"No signs of Kintark encroachment onto the Terran border so far.\"\n\nThey'd already passed along this route on the outbound leg of their patrol, so it was even less likely they'd run into anything interesting on their return to Port Medea. \n\nWaving a hand at the outer edges of their sensors, he pointed towards the vessel that was flying on a parallel course to them on the Kintark side of the border. \"How long have they been shadowing us?\"\n\n\"Nearly two hours, Captain,\" Hoplander replied, glancing at the data readout on her console. \"According to the transponder code, it's the cruiser Gorkan'tor.\"\n\n\"Have they made any threatening moves?\" he asked, trying to avoid sounding hopeful.\n\nHoplander shook her head. \"Nothing so far, just staying right on the edge of our long-range sensors.\"\n\nCaptain Skotari grinned and said, \"How about we have a bit of fun with them?\"\n\n\"Are you sure that's wise?\" his XO asked, eyebrows climbing.\n\n\"We used to do this with the Kintark all the time,\" Skotari replied, waving away her worries. Turning to look at the Pilot station, he called out, \"Lieutenant Goodwell, take us right up to the border, but whatever you do, don't cross into Kintark territory!\"\n\nLieutenant Robert Goodwell glanced up at him with tired eyes and seemed like he was going to say something, but nodded and changed course.\n\nWhen Galen turned back to look at his XO, he saw that the older woman had risen from her seat and was now crouched down beside him. He could see her face was lined with worry as she whispered, \"I don't think this is a wise course of action, Sir. The peace with the Kintark is fragile...\"\n\nSkotari frowned at her. \"We're not actually going into Kintark Space. They'd have to be insane to attack us just for flying close to the border!\"\n\n\"But still...\" Commander Hoplander protested in a hushed voice. \"Surely it's best not to provoke them?\"\n\n\"Objection noted and overruled,\" Skotari replied firmly. He gave her a reassuring smile. \"It'll be fine, they'll play along.\"\n\nHe turned back to look at the long-range sensors, then blinked in surprise. Instead of the Kintark cruiser mirroring their actions and shouldering up to the border in a display of bravado, the lizardman ship had actually backed away from the border! The Gorkan'tor was still matching their speed and flying parallel to them, but was staying just at the limits of his cruiser's long-range sensors.\n\n\"What the hell?!\" he muttered in confusion. \n\nCommander Hoplander shared his look of surprise, as equally shocked by the Kintark patrol vessel's actions as he was.\n\n***\n\nAlyssa was quiet as they returned to the bedroom, lost in her thoughts. It had been nearly an hour since the twins had started bonding and when they arrived, Tashana and Irillith were just starting to stir. Alyssa squeezed John's hand, and they shared an intimate look before she gave him a tender kiss and released him.\n\nClimbing onto the bed, he put his arms around the Maliri girls and gave them a gentle squeeze. \"How are you two feeling now? That looked like it was tough going; are you both alright?\"\n\n\"We feel fine,\" Tashana replied, stretching and giving him a warm smile of satisfaction. \"We're united again just as we were always meant to be.\"\n\nIrillith nodded a moment later. \"It was horrible facing the truth behind everything we'd put us through, but we feel much better now.\" Her lovely smile was an identical match to her sister's. \"There's no need to worry about us, we feel great!\"\n\nDana frowned and darted a nervous glance at John. \"That's awesome you feel so good, but what's with the fucked-up way you're talking?\"\n\nTashana looked at her in confusion. \"What's the matter? We don't think there's anything wrong?\" She looked startled then, her violet eyes widening. \"We don't seem to be able to say 'we' any more...\" Her eyebrows climbed higher as she continued, \"We decided to become a Digital Operations Specialist...\" \n\n\"We trained to be an archaeologist...\" Irillith blurted out, a look of astonishment appearing on her face.\n\nThey both began to speak at once, echoing each other's words. \"We spent thirteen years in the Unclaimed Wastes... we spent the last decade working as a Cyber-security specialist for our mother... Our favourite food is toffee ice-cream... we like strawberry the most... our favourite colour is... red... blue...\" \n\nThe twins looked at each other in shock. \n\n\"Any idea what's happened?\" John asked, turning to Rachel. \n\nThe brunette had been studying the two girls in fascination, but she quickly turned to look at him. \"It's like their minds have completely merged, losing their sense of personal identity...\"\n\nJohn opened his arms to the frightened twins and hugged them both as they came to him. \"Is this permanent?\" he asked in alarm.\n\nRachel stroked Tashana's shoulder to sooth her. \"Perhaps their bonding was amplified because they were both full of your cum at the time? It does act as a psychic catalyst... If that was the case, this is probably just a temporary side-effect as their minds sort everything out. I don't think there's anything to worry about; you'd never do anything to hurt them.\"\n\nHe looked down at the startled sisters who had calmed down after hearing Rachel's theory. \"If this was my fault, I'm sorry...\"\n\nTashana gave him a gentle kiss. \"There's no need to apologise, it's just a little disorientating. We think that Rachel's right.\"\n\n\"We're able to experience all of each other's memories and thoughts,\" Irillith said giving her twin a loving smile. \"We never knew how fondly we thought of our childhood together.\"\n\nDana groaned and rubbed at her temple. \"You two are making my head spin!\"\n\n\"Maybe we should call it a night,\" John suggested rubbing the twins' arms. \"I'm sure after a good sleep you two will be fine.\"\n\nTashana shared a smile with Irillith then looked up at him. \"We think this is too good an opportunity to be missed. We really want to get to know our sister.\"\n\n\"You feel the same way?\" he asked Irillith. \n\n\"We want to share everything with us,\" the blue skinned girl replied emphatically.\n\nJohn nodded and gave them both a supportive smile. \"Okay, but try not to stay up too late. We'll be rendezvousing with the Maliri fleet tomorrow afternoon, so make sure you get plenty of rest before then.\"\n\n\"We promise,\" Tashana agreed and both twins gave him a tender kiss, before waving everyone goodbye and leaving the bedroom.\n\nOnce the sisters were out of earshot, Dana grimaced and shook her head. \"I guess I'll love them regardless, but I hope they change back to normal! That 'we', 'us', shit is freaking me out!\"\n\nAs everyone started getting ready for bed, John pulled Rachel aside. \"Do you genuinely believe this is only temporary, or were you just saying that to calm them down?\"\n\nAfter taking a second to consider how to respond, Rachel replied, \"I have no way of knowing for certain; this is uncharted territory. Either way, this kind of intimate mind-sharing will give them real insight into one another.\" She stroked his cheek and added, \"If you did have a hand in it, I'm sure it'll work out for the best...\"\n\n\"Thanks for the vote of confidence,\" he replied with a smile, pulling aside the covers and getting into bed. \n\nAlyssa and Calara snuggled in beside him, with the rest of the girls joining after they reappeared from the bathroom.\n\nThe Latina glanced up at him and asked, \"John, I just wondered how long you plan on meeting with the Maliri for?\"\n\n\"A few days at least,\" he replied, putting his arm around her. \"My main priority is healing Edraele, but there's a number of other things we need to do and I'm not sure how long they'll take.\" He reeled off his mental checklist: \"Transfer the Trankaran ores, get the parts for Faye, discuss how best to help the Ashanath and Trankarans-\"\n\nDana grinned as she interrupted, \"Knock up a bunch of very sexy, very horny blue babes!\" She sat up and shivered with excitement. \"Please can we watch you with them! Please!\"\n\nJohn glanced around and saw that all the girls were looking equally aroused. \"It really doesn't bother any of you at all?\" he marvelled.\n\n\"To see my Master prove his virility?\" Jade purred, her vertical black pupils wide enough to eclipse her emerald eyes. \"I've dreamt of this moment since I met you!\"\n\n\"I told them what we discussed earlier, about you feeling bad about it not being us first,\" Alyssa said quietly. When he glanced her way, she shook her head imperceptibly confirming that was all she'd discussed with them. \n\n\"You don't need to worry, we all understand,\" Calara said in a soothing tone, stroking his chest. \"The Young Matriarchs are sweet girls; we all think they're lovely.\"",
        "\"And they really need you,\" Sakura said emphatically. \"Those women are duty bound to start rebuilding their Houses! Without you to assist, they'll have to visit the border stations for a liaison with a Maliri male. From speaking with the Maliri on Genthalas, I don't get the impression those men are particularly interested in taking an active interest in their children.\"\n\nHe raised his hands and smiled. \"I appreciate the enthusiasm, but I'm not going to make any promises... about anything. I want to speak to the Young Matriarchs and handle this delicately, okay?\"\n\nThey murmured their agreement, all of the girls just as thrilled by the prospect as Jade. \n\n\"I might be wrong, but none of you are particularly sleepy, are you?\" he asked, arching an eyebrow. \n\nThe answering grins were all the confirmation he needed. \n\nHe glanced at Jade and said, \"I appear to be outnumbered, fancy helping me even things up a bit?\"\n\nThe Nymph prowled over the covers and grinned as she knelt submissively before him. \"Take me whenever you're ready, Master... I would say that we'll make your mates cry out your name in ecstasy, but they're polite girls and they know it's rude to speak with their mouths full.\" \n\nJohn laughed as he moved to kneel behind the dark-green beauty on the bed, then slid into her deliciously hot and wet pussy. Her internal muscles rippled as she guided him up to the hilt, fifteen tentacles snaking out of her lithe body and approaching the five wild-eyed Terran girls. John could only groan in disbelief as he experienced one torturously slow penetration after another, as Jade triple-penetrated the five writhing girls, matching his languid thrusts by inching her dark-green replicas of his cock inside them. \n\nIt turned out Jade was right; they were all too stuffed to do much talking. \n\n***\n\nWhen John awoke the following morning, he stretched in satisfaction, still feeling that dull ache in his quad from the enthusiastic orgy the night before. Normal sleeping conventions had been abandoned, and he was buried under a tangle of slender limbs, the girls still lying roughly where he and Jade had fucked them all unconscious. \n\nFaye fluttered onto the bed when she saw him stir and gave him a cheerful wave. \"Hey!\"\n\nJohn put a finger to his lips to urge her to be quiet. \"Everything alright, honey?\"\n\n\"We crossed into Maliri Space three hours ago,\" she replied in a barely audible whisper. \"Aside from that, no problems!\"\n\n\"Perfect, thank you.\"\n\nUnfortunately, their muted conversation woke up Jade and the Nymph shared a loving smile with him as she sat up on the bed. With Jade's help, he was able to extricate himself from the pile of blissfully sleeping girls and he beckoned her into the bathroom once he'd climbed off the bed. \n\n\"Thanks for last night, that was amazing,\" he said, once he'd closed the bathroom door behind them. \n\nThe Nymph grinned at him as she bounded into the shower cubicle and turned on the jets of hot water. \"I loved it too, Master!\" she exclaimed, a bright smile on her beautiful face. Her expression turned coy as she added, \"I thought I'd worn you out last night, but I'm always here for you if you need more relief...\"\n\nJohn stepped into the water with her and gave her a hug. \"That's a very tempting offer, but let's wait for a bit, I'm still recovering at the moment... I will need your assistance with Edraele later, if that's okay?\"\n\nShe coiled her arms around him and nuzzled into his neck. \"Of course, I'll be delighted to help.\"\n\nThey enjoyed a nice relaxing shower together, Jade taking the opportunity to give him one of her incredible massages that left him feeling like his bones had turned into jelly. \n\nHe gave her a grateful kiss when she was done. \"I'm going to check on Irillith and Tashana, then call the Maliri fleet to make sure they're all okay. Feel free to go back to bed if you want a lie-in.\"\n\nJade followed him out of the bathroom, then switched to telepathy to avoid waking the girls. *I'll come with you and keep the twins company.*\n\nAlyssa waved at them sleepily as they passed the bed, a languid smile on her face. *They're in Tashana's room...*\n\n*Sorry for waking you up, honey,* John said softly. *I'll try and keep my thoughts quieter.*\n\n*S'okay,* the blonde teenager mumbled, snuggling into Calara and dozing off again.\n\nJade waited for him patiently as he got dressed in the walk-in-wardrobe then accompanied him to Tashana's bedroom. The Nymph was still delightfully nude and the light reflected off the dark lustre of her skin as she padded along beside him. John opened the door and saw that the Maliri sisters were sleeping serenely, having fallen asleep in each other's arms at some point in the early hours. \n\n*I'll watch over them,* Jade thought to him, before standing on tiptoe to give him a parting kiss. She waved goodbye, then crept into the room and onto the bed, moving with cat-like agility - which was unsurprising, considering her nature.\n\nWhen John stepped out of the grav-tube onto the Bridge, Faye was waiting for him, a look of gleeful anticipation on her face. \"I can't believe we're nearly there!\" she exclaimed, leaping off the Command podium to land lightly at his side.\n\n\"How long will it take to finish your body?\" John asked, smiling at her cheerful exuberance. \n\n\"Dana says a few days,\" the happy sprite replied. \"The parts the Maliri are bringing are very important, but she has no experience with them so wants to make sure she gets the installation perfect.\"\n\nJohn walked down the ramp to his Ready Room, glancing at his diminutive elfin companion. \"She's been very coy about what Luna's bringing with her. Why all the secrecy?\"\n\nFaye smiled fondly and replied, \"She just wants to help maintain the illusion that I'll be a real girl when my body arrives.\" She looked up into his eyes and continued earnestly, \"I don't think hiding my nature from you is a good way to start our relationship, but I want you to like me more than anything. What do you think?\"\n\nJohn stopped by his Ready Room door and smiled at her. \"I think you're adorable and you haven't even got a body yet!\"\n\nThe purple sprite blushed deeply at that, then reached out to trace her fingers across his arm. \"The Maliri are bringing synthetic skin with them. Installing cybernetics is considered shameful in their society, so if someone loses a limb and is forced to get a cybernetic replacement, their artificial skin is extremely realistic to avoid detection. Dana isn't able to replicate it with the Mass Fabricators, so she asked Luna to bring a plentiful supply with her.\" \n\n\"So your actual body is already complete?\" John asked in fascination.\n\nShe nodded enthusiastically. \"I've been running my initial tests and motor functions are all performing perfectly!\"\n\nHe tried to picture it in his mind, then simply asked, \"What does it look like?\"\n\n\"Really awesome!\" Faye replied, sounding a lot like Dana. She hesitated for a moment, then added, \"Would you like to see?\"\n\n\"As long as you don't mind, I'd love to,\" he replied.\n\nFaye bit her full lower lip then gestured behind him to the centre of the Bridge. He turned to look where she was pointing and a holographic image appeared before him. Her chassis was sparkling white, immediately revealing the material used in its construction. The synthetic body was slightly shorter and slimmer than the holograph of Faye fluttering nervously beside him, which he could only assume was to allow for the synthetic skin that would be grafted to her lithe frame.\n\nThe robotic body was obviously feminine in shape and form, possessing an alluring beauty all of its own. Crisscrossing the shimmering white body were glowing blue lines, reminding him a little of the bright power stripes on the Justice Laser rifle. The glow from these were muted though, casting a soft sapphire light over its snowy-white limbs.\n\n\"Alyssa designed the outer casing,\" Faye said self-consciously. She giggled and glanced up at him. \"She said Dana couldn't be trusted with aesthetics after the maintenance bots!\"\n\n\"She did a wonderful job... You look beautiful,\" John said, admiring the sleek lines of the feminine figure.\n\n\"You really think so?\" Faye asked quietly. \n\nHe turned to look at her and nodded. \"Not quite as adorable as the girl standing before me, but that would have been an impossible task.\"\n\nHer cupid-bow lips lifted into a huge grin and she bounced up and down with joy. \"I'm so glad you weren't repulsed!\"\n\nJohn laughed and shook his head. \"No, far from it.\" \n\nFaye dismissed the holograph with a wave of her hand. \"Please don't say anything to Dana. I knew you'd be okay with seeing it like that, but I think she just wanted to make sure.\"\n\n\"Sparks really cares for you, Faye. She wants you to be happy, that's all.\"\n\n\"I know,\" the purple sprite replied, with a happy sigh. \"I'm so lucky to have a friend like her...\"\n\n\"Friends,\" John corrected her with a smile. \"We all care about you.\"\n\nFaye blushed a deep plum colour again, then glanced at the door to his Ready Room. \"I better not keep you any longer. I'm sure Luna must be eager to speak with you.\"\n\n\"Thanks for trusting me with that, honey,\" John said, looking into her big luminous eyes. \"I'm glad I didn't disappoint you.\"\n\nShe had a dreamy expression on her face. \"That's quite alright. You're wonderful, I knew you'd be fine...\"\n\nJohn left the moon-eyed sprite with a smile, then entered his Ready Room and walked to his desk. He scrolled through his list of contacts and found Lilyana, the House Valaden Fleet Commander who he knew was on their flagship. Now they were safely inside Maliri Space, he knew he didn't have to worry about the Admiralty snooping on any calls as the communication lines wouldn't be routed through Terran Comm beacons. He swiped across her name and waited for the call to reach the Galaena Serine.\n\nHe didn't have to wait long before the crossed blades logo of House Valaden appeared and only five seconds after that, the sigil faded away to be replaced by Lilyana's beautiful face. \n\nThe House Valaden Fleet Commander gave him a warm smile, her aquamarine eyes twinkling as she played self-consciously with her long white hair. \"It's wonderful to see you again, Protector.\"\n\n\"It's great to see you too, Lilyana, the longer hair really suits you,\" he said kindly, this being the first time they'd spoken since topping her up a second time on Genthalas. \"I'm really sorry to have kept you waiting so long. I'm sure you've heard about our terrible trouble with the Trankarans...\"\n\n\"That's quite a mouthful,\" she said with a coy smile, before blushing at her own boldness. \"That's quite alright about the wait; Luna explained you were helping the Trankarans with an emergency.\"\n\nJohn smiled at her innuendo, then asked politely, \"May I speak with her please?\"\n\n\"Of course, she should be here any moment,\" the Fleet Commander replied, before glancing offscreen when a melodic chime echoed around her office.\n\nRising from her seat, she smiled to her left and was quickly replaced by Luna, who looked overjoyed to see him. \"I'm so glad you're here, John!\"\n\n\"Just a few more hours,\" he replied, looking at her with concern. \"Is everything alright? Any problems with Edraele?\"\n\nThe interim leader of House Valaden quickly shook her head. \"No, nothing like that, she's fine. It'll just be a relief to have her back again.\"\n\n\"Heavy lies the crown?\" John asked, studying the flustered former-assassin.\n\nLuna hesitated for a moment then nodded. \"I've grown close to Edraele and really missed her, but standing in for her as Matriarch has been... challenging. Fortunately, Tsarra Perfaren came to the rescue; she gave me some incredibly useful advice and helped me keep the Governors in line.\" \n\n\"I'm sorry I put you in that position,\" John apologised. \"I hope you understand that I wouldn't have done so if I didn't think you were the best woman for the job.\"\n\n\"That's quite alright,\" she replied, blushing at his praise. \"It's given me a new appreciation for both the pressure Edraele's under and the way she handles it so effortlessly. I'll do whatever I can to help her when she's back in her rightful place as Matriarch.\"\n\n\"So I don't need to worry that power's gone to your head?\" John teased her, raising an eyebrow. \"No desperate desire to cling on as Matriarch of House Valaden?\"\n\n\"Definitely not!\" Luna declared vehemently. \n\nHe gave her a supportive smile. \"Just a few more hours and it'll be over with. We should arrive at about two in the afternoon.\"\n\nShe returned his smile, her unblinking yellow eyes quite mesmerising. \"I'll be counting the minutes...\"\n\nWith that they ended the call and the Valaden insignia replaced Luna's face on the holo-screen before fading away a second later. John leaned back in his chair and suddenly realised he had a clear morning ahead. He had been planning on looking into Tashana's research notes with her and Irillith, but with both of them sleeping he needed to come up with something new. \n\n*Calara's restless as well this morning; I think she's spent too much time in the kitchen,* Alyssa informed him, sounding drowsy. *I'm sure she'd love a chance to get all sweaty with you in the Dojo...*\n\nJohn grinned as he sprang from his chair, a sparring session with the feisty Latina would be the perfect way of spending the morning. He jogged across the Bridge and then headed down to Deck Two, meeting the Latina as she left his bedroom.\n\n\"Give me thirty seconds to get dressed!\" she exclaimed, looking just as eager as he was.\n\nBy the time he'd returned in his sparring gear, Calara was just returning to the corridor, looking pumped up and ready for action. They managed to keep a lid on the banter until they reached Deck Three where they knew their voices wouldn't carry back to the bedroom. \n\n\"No powers this time?\" he asked her, nudging her with an elbow. \"Or are you planning on cheating again?\"\n\nShe laughed and rolled her eyes at him. \"That's fine talk coming from you. If I remember rightly, you started it!\"\n\nThey reached the door to the Dojo and he hit the button and gestured for her to proceed inside. \"Ladies first... to hit the mat.\"\n\n\"You're really looking for a beatdown today,\" she marvelled as she padded out onto the mats. \n\nThey squared off against each other, both grinning in anticipation. As they closed the distance, John paused and said seriously, \"Even without your powers, you realise you're good enough to stand a very good chance against your father in a sparring match.\"\n\nCalara froze in surprise as she realised he was telling her the simple truth. She lowered her guard and replied, \"That's never been my goal, but I always wanted to prove myself to-\"\n\nShe didn't get to finish the sentence as John swept her legs out from under her, sending her crashing to the mat. He tutted and winked at her. \"But not if you let him sucker-punch you like that!\"\n\nThe Latina couldn't help laughing as he gave her a playful grin and showboated for an imaginary crowd. \"Wow... That was a real dick move...\"\n\nHe gave her an unapologetic shrug. \"I'm fairly sure that was one of your earliest lessons; don't let yourself get distracted, especially by someone who knows how to push your buttons. Looks like my student still needs her sensei.\" Backing away warily, he fell into another guard stance. \"Now show me what you've got.\"\n\nHis teasing had fired Calara up for a no-holds barred session that kept him on his toes, literally and figuratively. They spent a couple of hours sparring on the mat, naturally switching from offense to defence when either one managed to get the upper hand. Very well matched against each other, it was just the slightest misstep that proved John's undoing and the Latina surged in close, tangled her legs with his and toppled him over backwards, landing on his chest.\n\n\"I win!\" she exulted between deep breaths, her brown eyes burning with the passion of her victory.\n\n\"And it was well earned, you were magnificent,\" he replied, panting for breath himself. \n\nShe relaxed then, but the smouldering look in her eyes didn't go away. \"We didn't discuss the victor's prize...\"\n\nHe placed his hands on her hips and gently stroked her flanks with his thumbs, feeling her sweat slicked skin under his fingertips. \"Anything you want, gorgeous.\"\n\nShe rose to her feet and offered John a hand, then led him through to the adjoining bedroom, her alluring smile making all sorts of delicious promises. They showered together then fell into bed, where their lovemaking was slow and sensual - a dramatic contrast to the frenetic sparring. Lying together afterwards, John spooned the blissfully happy girl, caressing her curves as she relaxed in his arms.\n\n\"You're going to think I'm some kind of hopelessly love-struck teen, and I can't believe I'm saying it again, but I've never felt so happy before,\" Calara said, with a contented sigh.\n\n\"Because we've made the engagement official?\" John asked, kissing her olive-toned shoulder.\n\nShe nodded and turned slightly so she could look at his face. \"I didn't like keeping this from some of the girls, even if it was done with the right intentions.\"\n\n\"How about becoming my official wife?\" John asked, giving her a knowing look. \n\nCalara blushed immediately, then nodded again. \"The other girls would have hated being there at your side for the PR pieces, but I'll be honoured to be there with you!\" She paused for a second and frowned. \"Actually, that sounds really bad. I don't mean they'd hate being at your side...\"\n\nJohn cradled her head with his hand and silenced her backpedalling with a kiss. \"It's okay, I know what you meant. Alyssa and the others were right; this means much more to you than any of them and I'll be the proudest man in the galaxy to have you on my arm.\"\n\nShe gave him a radiant smile and snuggled in closer. \"It's not just that. For the first time in months I've not been feeling guilty about having a big family wedding. The last thing I wanted to do was upset any of the girls, but now it feels like I have their permission to go ahead with it. That kind of ceremony isn't what any of them are really looking for, but it'll mean a huge amount to me and my family.\"\n\n\"Family is very important,\" John agreed, stroking her tummy again. He had a distant look on his face as he caressed her, thinking about the upcoming meeting with the Young Matriarchs.\n\nCalara watched him quietly for a moment, then whispered, \"Those girls don't know just how lucky they are, but they will when you're there for them to help bring up your children. I think you'll be a wonderful father.\"\n\n\"My grandparents did a great job of giving me a loving childhood, but there was always that nagging doubt at the back of my mind; about why my real parents didn't want me... I don't want my children to ever feel that way,\" he said, gazing into her eyes.\n\nShe pulled him down for a kiss and they relaxed together for a few minutes until John glanced at the ship's chronometer on the wall. \n\nCalara saw the look and asked, \"Nearly time?\"\n\nHe nodded and patted her swollen belly. \"Jade's already on her way. We need to load her up for Edraele.\"\n\nAs if on cue, the naked Nymph padded into the bedroom. \"Hello you two.\"\n\nThe Latina stretched, a smile of anticipation on her face. \"Hello, sexy...\"\n\nJade climbed onto the bed, her eyes darting from the inviting curve of the Latina's cum-packed womb to look at John. \"The twins were still asleep when you called me.\"\n\n\"I'll head up there and wake them,\" John said, as he got out of bed. \"We'll be arriving in the Delta Arietis system in twenty minutes.\"\n\nScooping up his gym gear, he padded out of the bedroom to the sound of Calara's excited gasps, as Jade enthusiastically went to work. He didn't think twice about strolling along the corridor naked and he couldn't help smiling when he realised how much his attitude to the Invictus had changed since he'd served on it as a marine. ",
        "Travelling up to Deck Two, he spotted one of the cleaning bots appearing out of his bedroom, so he bundled up his clothes and lobbed them down the corridor towards it. Unfortunately, his gym gear wasn't quite as aerodynamic as he'd hoped and it looked like it was going to fall short. The bot put on a sudden burst of speed and ducked under the sweat-stained clothing, neatly catching it in the hamper on its back. \n\n\"Good catch!\" he called out with a grin. \n\nTo his surprise, the cleaning bot did a funny kind of shuffle back and forth on its tracks, while doing a fist pump with its skinny mechanical arms. It looked a lot like a zero-g football victory dance. John kept a suspicious eye on it until he reached Tashana's room, then hit the button to open the door and glanced back down the corridor to look at the bot again. It had already disappeared inside Calara's room though, on the hunt for more dirty clothing.\n\nThe lights were out in the bedroom, but John could see movement under the covers. Entering the room, he saw two sets of sleepy violet eyes gazing in his direction.\n\n\"That was good timing,\" he said quietly as he sat on the end of the bed. \"How're you both feeling this afternoon?\"\n\n\"Alyssa woke us up,\" Irillith explained with a yawn.\n\n\"Did we really sleep until the afternoon!\" Tashana exclaimed, looking at him in surprise.\n\nJohn nodded and patted their legs through the covers. \"What time did you go to bed last night?\"\n\n\"Six, maybe Seven?\" Irillith admitted with an embarrassed smile.\n\nShaking his head, John replied, \"There's no need to feel self-conscious; I'm glad you had the opportunity to really get to know one another.\" Looking at them with concern, he continued, \"But you haven't answered my question yet... how are you feeling?\"\n\n\"I feel fine,\" Tashana said experimentally.\n\nIrillith shared a smile with her. \"Me too, great actually!\"\n\nJohn blew out a sigh of relief. \"I love the fact that you're twins, but last night was a sharp reminder how much I also love you as individuals.\" He beckoned them over. \"Come here and give me a hug.\"\n\nThe Maliri girls untangled themselves from the covers and eagerly moved to join him so he could put his broad arms around them both. \n\nLooking at Irillith first, he said gently, \"I'm sorry you got a nasty shock last night. I hope you understand why I kept the truth from you about what happened to Tashana; she needed that time without any reminders to give her mind a chance to heal.\"\n\nIrillith gave him a quick kiss to reassure him. \"You have nothing to apologise for, I know I agreed to have my memories altered. The most important thing was that Tashana got the time she needed to recover.\" She had a thoughtful look on her face as she continued, \"I did a terrible thing to her, but being able to share all her thoughts and feelings last night... I could see that she's truly forgiven me, or at least the old version of me that betrayed her.\"\n\n\"You'd never do anything like that now,\" Tashana agreed, her voice full of the absolute conviction that came with knowing her twin as well as she knew herself. \"Punishing you for what happened back then would just be punishing myself now.\" She looked up at John and added, \"We're both putting all that behind us and moving ahead with our lives.\"\n\n\"Our lives with you,\" Irillith agreed, hugging John closer.\n\n\"That's wonderful to hear,\" John said, stroking their backs as they leaned into him. He looked at each of them in turn. \"I'm relieved that everything's out in the open between you two, but that still leaves one other person...\"\n\nThe twins glanced at each other and said at the same time, \"Our mother...\"\n\n***\n\nThe Invictus dropped out of hyper-warp in the Delta Arietis system, the pale orange sun casting a warm glow over the huge formation of golden-hulled Maliri ships. The massive fleet of vessels was led by four battleships at its centre, surrounded by six heavy carriers, thirty cruisers and a host of destroyers. The Maliri didn't use corvettes, but wings of sleek fighters raced around the outskirts of the system on patrol. \n\nFlaring as brightly as the sun, the six huge Trankaran engines pushed the Invictus forward at startling speed, bringing the battlecruiser closer to the Maliri fleet. Several wings of fighters formed up on the glistening white ship, providing an honour guard as it angled through the ranks of cruisers and headed towards the Galaena Serine. At fifteen hundred metres, the House Valaden flagship dwarfed the Invictus, which measured merely half its length. However size was not the only thing that mattered and every Maliri in the system knew who the white ship belonged to and just how powerful it was.\n\nRetro-thrusters flared along the length of the Invictus' hull, bringing them to a gentle halt alongside the Shandrass-class battleship. A golden crystal-plated docking collar extended from the flank of the Maliri ship, engulfing the battle-cruiser's outer airlock door.\n\nA cloud of purple pixels coalesced into the diligent sprite. \"We've docked with the Galaena Serine!\" Faye announced to the group waiting in the corridor outside the airlock.\n\n\"Thanks Faye,\" John replied. \"Can I leave the Invictus in your capable hands?\"\n\nShe nodded enthusiastically. \"Of course!\"\n\n\"I'll be back in a few minutes, once I've got the bits we need,\" Dana said, giving the purple sprite a conspiratorial wink.\n\nAlyssa put her arm around the redhead. \"Actually, I might need you for a little while first.\" She gave the elfin girl an apologetic look. \"Sorry, Faye. I know you're keen to get your body finished, but we'll be here for a few days. I promise I won't keep Dana too long.\"\n\n\"That's quite alright!\" Faye replied, waving a hand to dismiss her apology.\n\nThe redhead looked intrigued as she glanced at her blonde friend. \"So what do you need me for?\" \n\n\"Ah, you'll see soon enough,\" Alyssa replied, giving her an enigmatic smile.\n\nThere was a beep from the airlock sensor panel confirming that there was atmospheric pressure on the other side of the door, so John put his hand on the DNA reader. A green light swept across his hand, then chimed when it confirmed his genetic code, the airlock door spiralling open a moment later.\n\nStanding on the other side of the portal was a cluster of beautiful Maliri women, their faces lighting up with joy to see their guests. Abandoning decorum, the Young Matriarchs and the three House Valaden assassins all swept through the airlock to embrace John and the girls. He gathered Luna in his arms first, feeling her sag against him in relief. \n\n\"It's so good to see you!\" she gasped, looking up at him with anxious yellow eyes. \"I've been so worried.\"\n\n\"Why don't you take me straight to Edraele, then we can discuss everything else later?\" John suggested.\n\nThe former assassin nodded. \"Of course. She's in a Medical Bay on Deck Six.\"\n\nThe group crossed over into the elaborate golden-arched corridors of the Maliri battleship and Luna led them to a set of lifts. While they waited for one to arrive, John had an opportunity to properly greet Almari and Ilyana, Luna's fellow assassins, hugging them both. The lift doors opened with a musical tone and fortunately it was large enough to hold the entire group. That was when the five Matriarchs embraced him, giving him an opportunity to see the excitement and anticipation in their beautiful young faces.\n\nTsarra Perfaren was the last and he brushed his fingers through her short white hair. She closed her eyes at his gentle touch, shivering with delight as he caressed her. \n\n\"Would you like a little help growing that out?\" he asked with a playful smile.\n\nOpening her dark-green eyes again at his question, she looked up at him under dark lashes and nodded, licking her lips in a subconscious gesture.\n\nJohn gave her a brief kiss, brushing his lips against hers. \"Later, I promise.\"\n\nThe lift chimed again, letting them know they'd reached Deck Six. Tsarra reluctantly peeled herself away from John, giving him a lingering look then blushing a deep shade of blue when he met her intense gaze.\n\n\"This way,\" Luna said, striding out into the corridor.\n\nThe Medical Bay wasn't far from the lifts and was a substantial facility. Scores of large pieces of medical equipment were spaced evenly around the huge bay, the bulk of the machinery finished in gold, but with clear crystal canopies covering many of the objects. \n\nTheir entrance was met by an aloof woman with short dark hair, wearing a long flowing Physician's robe, and carrying a holo-tablet tucked under one arm. \"This is a Medical Facility, not a conference room!\" she said indignantly as John's entourage of sixteen women entered the room.\n\nLuna narrowed her eyes at the Medic. \"Medical Facility implies some kind of healing capability, Amadee. You've had two weeks to heal Edraele, but all I've heard are platitudes and excuses.\"\n\nJohn entered the room last and said, \"It's alright, Luna. What happened to Edraele isn't something you can cure with conventional medicine. Just show me where she is and we'll get her back on her feet.\"\n\n\"Over here,\" Luna replied, walking towards a row of golden pods on the far side of the medical bay.\n\nAmadee had an irritated frown on her face as she turned to look at John, but that vanished the moment she set eyes on him. She gaped in open-mouthed astonishment as he walked past her, then flushed when he gave her a friendly smile. \n\n\"Could you open the cryo-pod for us please, Amadee?\" he asked politely.\n\nThe Medic blinked in shock, then hurried to follow his request, her long blue fingers pressing buttons on the console beside the pod. She moved a sliding bar across a holo-panel, the temperature inside the pod quickly normalising to room temperature. It flashed orange when the thawing process had completed and Amadee pressed another button to open the cryo-pod door.\n\nJohn saw that Sakura was staring at the pod with a pensive expression, so he put his arm around her and squeezed her shoulder. \"You doing okay?\"\n\nShe glanced up at him and nodded. \"I just hope I never have to go in one of those things again.\"\n\n\"You won't,\" he said with confidence. \"Not with me and Rachel here to keep you safe and well.\"\n\nThe cryo-pod door swung wide open, giving them their first view of the House Valaden Matriarch. Edraele looked ghostly pale, her normally vibrant sky-blue skin appearing wan and sickly. Irillith gasped in shock and clung to her sister, who was similarly aghast at the state of her mother.\n\n\"I had no idea she was as badly hurt as this,\" John said in a hushed voice, glancing at Rachel.\n\nThe brunette gave him a worried frown and approached the cryo-pod, her grey eyes already glowing with a bright inner light as she placed her hand on Edraele's chest. A grey mist rolled down her arm to shroud Edraele and Rachel murmured, \"Species: Maliri - Catatonic... lifeforce drained.\" She turned around to look at John in alarm. \"She's been severely weakened! I don't think I can heal this kind of psychic damage!\"\n\n\"It's alright, let me,\" he replied, before patting Jade on the shoulder. \"You know what to do, honey.\"\n\nThe Nymph approached Edraele and gently opened her mouth with one hand then slipped two fingers between the Maliri Matriarch's pale lips. Those digits began to pulse a moment later as Jade began to pump all the cum she'd stored directly into Edraele's stomach. John stood beside the Nymph as she fed the unconscious woman, placing one hand on his Matriarch's gradually rising belly and the other above her heart. \n\n\"Brace yourselves, ladies,\" he murmured, as his eyes began to glow with a fierce blue radiance. \"I'll need a lot of power to heal her...\"\n\nAlyssa felt the sudden massive draw of psychic energy and she tapped into the rest of the girls to help spread the load. \n\nJohn could feel just how badly Edraele had been injured by the Astral leviathan, which had almost extinguished her life force to keep the portal between realities open as long as possible. He thanked the stars he'd cut their bond when he did; she probably wouldn't have survived another ten seconds being drained like that. He focused on pouring healing energy into her body to rejuvenate her withered essence, helping her grow strong and healthy once again.\n\nAfter several long moments, Edraele's eyes fluttered open in shock, her hands lifting instinctively to try and pull Jade's fingers from her mouth.\n\nJohn caught her hands in his and said in a soothing tone, \"Easy now, there's nothing to worry about. Jade's just helping me heal you...\" \n\nEdraele calmed immediately as she recognised him, clasping his hands in both of her own. She looked up into his glowing eyes, her brow furrowed and a questioning look in her anxious purple gaze.\n\n\"I had to cut our bond... that thing would've killed you if I hadn't,\" he explained gently. \"Just relax, we'll bond again once the healing is complete.\"\n\nShe nodded slightly, looking relieved as she let Jade slowly pump several pints of cum into her stomach, rounding out her abdomen. \n\nJohn could feel Edraele's tattered psychic presence smoothing out as he healed it, her body regaining its lost vigour. When he was satisfied that she was fully healed, he stopped the draw of energy from Alyssa and the glow from his eyes slowly faded away. \n\n\"Holy shit... that took so much power!\" Alyssa gasped, leaning wearily against him. \n\n\"Sorry, beautiful, there was no other way,\" he replied putting an arm around the blonde to help support her. He glanced around the group and saw that the rest of the Invictus girls were looking tired now as well.\n\nJade eased her fingers from Edraele's lips and murmured kindly, \"There we go, little kitten. All better now...\"\n\nWith John's help the Maliri Matriarch sat upright, looking bright and alert once again. \"It's so wonderful to see all of you again!\" Edraele exclaimed in a mix of delight and relief, looking around at the throng of visitors in the Medical Bay.\n\nJade moved aside to give Tashana and Irillith room, as the twins darted forward to embrace their mother.\n\n\"I was so worried about you!\" Irillith exclaimed, her voice catching as she hugged Edraele tightly.\n\n\"I really missed you too,\" Tashana said, joining her sister in the three-way hug. \"So many wonderful things have happened while you were asleep. I can't wait to tell you all about them!\"\n\nEdraele put her arms around her daughters, hugging them back with a joyful smile on her face. \"I'm so glad you're both here, my angels.\"\n\nJohn studied his Maliri Matriarch and could see that despite how happy she was to be reunited with her girls, there was still a look of yearning in her eyes when she glanced at him. Stroking Irillith and Tashana's backs, he said, \"Why don't you let me rebond with Edraele, it shouldn't take too long. Then we can all get together to talk about everything that's happened.\"\n\nThey reluctantly let Edraele go and John helped her off the cryo-pod bed. She stood a little unsteadily, unused to the heavy weight rounding out her waistline, so John put his arm around her to help support her. She looked up at him with a grateful smile, and it seemed like she wanted to say more but held whatever it was back.\n\n\"I'll take you to your private suite,\" Luna suggested, stroking her Matriarch's arm affectionately.\n\nEdraele returned the caress with a fond glance at her bodyguard, then glanced around the Medical Bay. She spotted the stunned physician who was gaping at her fully recovered patient and greeted her with a smile. \"Hello, Amadee. If I was in your tender care, I can only assume we must be on the Galaena Serine?\" \n\n\"T-That's correct, Matriarch!\" Amadee managed to stammer. She gaped at John and marvelled, \"What did you do to heal her?!\"\n\nRachel brushed her hand along the astonished physician's arm. \"Perhaps I can help explain? In exchange, you must tell me more about your Medical Lab! Some of this equipment is fascinating...\"\n\nAmadee nodded mutely, gazing at her with wide eyes.\n\nAlyssa gave Edraele a warm hug. \"I'm so glad you're okay! We've all been really worried about you.\" She glanced at John and added, \"We'll all go and have a rest somewhere to recover. See you in a few minutes.\"\n\nJohn guided Edraele across the medical lab, following Luna towards the door. \"We're at the rendezvous point in the Delta Arietis system. You've been unconscious in cryo-stasis for just over a week.\"\n\n\"Delta Arietis...\" Edraele murmured in confusion. \"That's a long way from the original rendezvous point.\"\n\n\"We've been pretty busy,\" John said cryptically, stepping aside to let her leave through the door first. \n\nEdraele glanced back at the girls, sharing a smile with Alyssa and giving her a brief nod, before following Luna into the corridor. The three of them walked in silence, something obviously on Edraele's mind, but she was keeping it to herself for the time being. After another ride in the lift, Luna guided them into a luxurious suite, then led them past a meeting room and a well-furnished lounge before stopping at a high-arched door.\n\n\"You've no idea how much I've missed you, Edraele,\" she said softly, her yellow eyes filling up with emotion as she turned to look at her.\n\n\"Everything will be fine now, my darling,\" the House Valaden Matriarch replied in a soothing voice, embracing her lover. \"Once John and I have reconnected, I promise we'll spend some time together, just you and me.\"\n\nLuna nodded and gave her a tender kiss, before waving them goodbye as she turned to leave the quarters. The bedroom door opened in front of John, seemingly of its own accord and he followed Edraele into the luxurious bedroom. \n\nAs soon as they were alone, she fell into his arms, her brave facade crumbling at last. \"Oh John! That Astral beast was terrifying!\"\n\n\"I'm so sorry I exposed you to that,\" he said as he held her tight. \"I never would've breached the Astral Plane if I knew that thing could exploit our presence!\" Scooping her up in his arms, John carried her onto the big bed, then lay down beside her.\"\n\n\"I need to bond with you again!\" Edraele said plaintively, fear and worry etched on her face. \"It's worse not having your soothing thoughts to cling to!\" Her psychic presence hammered on the mental fortress shielding his mind, desperate to be joined with him again. \n\n\"Shh, I'm here now,\" John murmured, tilting her chin up with his hand and giving her a gentle kiss.\n\nGazing into Edraele's purple eyes, he opened his mind for her and felt her consciousness rush to merge with his own.\n\nEdraele sighed with relief, the tension in her eyes fading away as she felt his titanic mind moving to welcome and embrace her, swaddling her up in loving thoughts. She melted into his arms, letting out a soft moan of satisfaction and contentment as she was united with him again.\n\n*There you go, back at your rightful place as my Matriarch,* John said, brushing his fingers through her silky white hair.\n\n*That feels so much better,* she replied, a glorious smile lighting up her beautiful face.\n\nHe propped himself up on one elbow so he could look down into her eyes and said sincerely, \"I've really missed you. You were only in cryo for just over a week, but it's felt like months! So much has happened since then... I've lost count of the times I longed to hear your lovely voice giving me wise advice...\"\n\nHer face shadowed with guilt and she said, \"I'm so sorry I let you down, there must've been something I could've done to-\"\n\nJohn shook his head and silenced her with a kiss. \"It definitely wasn't your fault! That monster hijacked our breach into the Astral Plane and used you and Alyssa to keep the portal open. There was nothing you could've done to prevent it.\" He hesitated and looked troubled. \"I should be the one feeling guilty...\"\n\n\"You? Why would that be?\" she asked him, concerned to see his pained expression.\n\n\"When you were injured, we could've raced back into Maliri Space to come and heal you straight away. Luna told us that your doctors said your condition was stable, so I...\" He paused, the guilt he felt etched plainly on his face. \"...I decided to visit the Trankarans first, to speak to them about an alliance, as well as make the trade for the ore we need. I figured it would save us about a week of extra travelling time, but I felt terrible about leaving you hurt and unconscious.\"",
        "Edraele's eyes softened to see his anguish and she brushed her fingers against his cheek. \"Being in command means you often have to make difficult choices, which I'm sure you remember from your time as a Marine officer. Now you're effectively leading an entire empire, which means making impossibly hard decisions on a daily basis! You made exactly the right decision and I'm proud of you for doing so, John.\" She gave him a quick kiss and added, \"I would've been disappointed if you'd ignored your wider responsibilities to rush to my aid... touched, but still disappointed.\"\n\n\"Actually, I thought you'd feel something like that, which is one of the reasons I made that choice,\" John admitted with a wry smile.\n\n\"I'm delighted to hear I was able to offer you sage counsel even while unconscious,\" Edraele, said looking pleased. Her purple eyes searched his face and she continued, \"So tell me what I missed!\"\n\nJohn rolled onto his back and looked up at the ceiling to gather his thoughts. \"There was so much, I'm not sure where to start...\"\n\nThe Maliri woman turned onto her side, moving carefully with the heavy weight of cum in her stomach. \"I haven't felt this huge since I was carrying the twins,\" she said with a light laugh. \n\n\"I didn't want to take any chances, you were badly hurt,\" John said shifting to face her and placing a hand on her tummy. \"And I like seeing you full of my cum...\"\n\n\"I wasn't complaining,\" she replied, leaning forward and brushing his lips with hers. \"I know you want to wait until we have children, but I yearn for that moment.\"\n\nThey kissed again and when they parted, John said quietly, \"We need to discuss the Young Matriarchs too...\"\n\nEdraele shook her head, giving him a look filled with sympathy. \"There's no need, Alyssa's explained everything to me already. Everything...\" When John looked at her in surprise, she put her arms around him and held him close. \"Don't worry about a thing, we'll take care of you, okay?\"\n\nJohn enjoyed the physical affection, her maternal hug reminding him of the caring embrace he'd received from Maria Fernandez. As Edraele brushed her fingers through his hair and stroked his head, he mused that it shouldn't be that much of a surprise, considering how much of Edraele's behaviour and personality he'd modelled on Calara's mother.\n\n\"Maria sounds like a fascinating woman,\" Edraele murmured in his ear. \"Considering you could have chosen to remake my personality in any way you saw fit, she must have made quite the impression, if you chose to make me emulate her.\"\n\nHe winced, having forgotten to guard certain thoughts from Edraele in the way he normally would have done, having got out of practice in the last week. Sitting upright, he gave her an apologetic look. \"I'm sorry. I had no idea what I was doing back then, and with your mind wiped I was left with a completely blank slate. Maria's a lovely woman and a doting mother to her daughter and three sons... I've seen how much Calara loves her and just thought Irillith deserved to have someone like that in her life.\"\n\n\"That was a lovely thought, there was no need to keep it from me,\" Edraele said with a gentle smile, her angular eyes full of emotion. \"I really hope that one day I can have that kind of relationship with my daughters too.\"\n\n\"I hope so. They both really want that as well,\" John replied, reclining on the bed again and brushing a lock of hair from her face. \"While we're talking about your daughters' future happiness, I'm sure they'll tell you soon, but I proposed to Irillith and Tashana two days ago.\"\n\nEdraele's face lit up with joy. \"Oh congratulations! I assume they both agreed?\"\n\n\"They did, quite enthusiastically. I'll let them fill you in on all the details,\" he replied, returning her happy smile. It faded a second later as he continued, \"I would've preferred to speak to you in person beforehand to get your blessing, but unfortunately circumstances were working against me. I'm sorry. I hope you aren't disappointed?\"\n\nShe laughed then, the light carefree sound making his heart soar. \"Oh, John... don't be so silly! Of course you had my blessing, you must have known that before you even thought of asking?\"\n\n\"I hoped so, but I didn't want to make any rash assumptions,\" John said with a self-conscious grin.\n\nEdraele paused for a moment and frowned. \"Actually, if I had turned you down, then I could have kept you for myself...\"\n\n\"Well if you were so unkind as to exclude your daughters, then you and fourteen others at present...\" John said with a chuckle, knowing she was joking.\n\n\"You know I only jest. I'm delighted for them and for you too.\"\n\nHe looked into her eyes and said, \"I proposed to all the girls on my ship, but there's someone else who I can't live without either, a woman who is going to play a big part in my future.\" He reached into his pocket and pulled out the rich purple amethyst ring, the colour exactly matching her enchanting orbs.\n\n\"Oh John, it's beautiful,\" Edraele murmured breathlessly, gazing at the ring in awe.\n\n\"Edraele Valaden, will you do me the honour of being my wife?\" he asked, a broad grin on his face.\n\nEdraele managed to tear her eyes from the ring to look at his face instead. She looked ecstatic, but the overjoyed expression shifted into a thoughtful one. \"Not yet, I haven't earned it,\" she told him firmly.\n\nJohn stared at her in shock. \"What do you mean you haven't earned it? You've dedicated your life to being my Matriarch! Not that you needed to 'earn it', but that alone would be more than reason enough!\"\n\nShe shook her head, an enigmatic look on her face. Her playful expression was quite reminiscent of Alyssa's teasing smiles, also reminding him that it wasn't just Maria's personality he'd modelled hers on. \n\n\"I'll explain later and you'll understand. Trust me, I promise you'll approve,\" she said, giving him a sultry look.\n\n\"Okay... I do trust you,\" John said, putting the ring back in his pocket again.\n\nEdraele watched it disappear from sight with a tinge of regret on her face, but she brightened again and asked eagerly, \"What other exciting events did I miss? Those Astral monsters have a lot to answer for, making me sleep through my daughters' engagement!\"\n\n\"Yeah, we'll find a way to start hitting back,\" John agreed, his eyes narrowing. \"I'm sick of running and hiding from those bastards.\" After a moment's pause, he continued, \"We stopped at Jericho to see Maria, which is probably why I was reminded of her when you hugged me.\"\n\n\"You two hugged?\" she asked, raising an eyebrow.\n\nJohn gave her a look of amusement. \"It was strictly platonic and that's all it'll ever be between us. Yes, I find her a very attractive and intriguing woman, but I'd never do anything to break up her marriage. Maria might be playfully flirtatious, but she's loyal too, she wouldn't stray from Jack.\"\n\n\"Ah, the choice for my new personality becomes all the clearer. Now I'm even more intrigued about Maria,\" Edraele murmured, tracing a finger along the muscles in his arm. \"What could be more alluring than the unattainable?\"\n\nJohn couldn't help flushing and shook his head, \"That's not why...\"\n\n\"Ah yes, you wanted me to be the perfect mother for my daughters,\" she said seriously, but with a smile teasing at her lips. \"No one could find fault with such selfless motives...\"\n\nHe laughed and rolled his eyes. \"I don't think there's any way I can respond to that without getting myself in trouble. Anyway, Calara and I told her everything. We brought everything out in the open so that there wouldn't be any secrets between them.\"\n\n\"If Maria hugged you, I assume she took it well?\" Edraele asked, watching him in fascination.\n\n\"She was amazing,\" John replied, giving her a wistful smile. \"She just took everything in her stride and was so supportive and understanding. I hadn't realised how much I needed to just feel... accepted and... cared for... I suppose.\" He hastily added, \"Not that it's a reflection on any of you three! Our relationship is just different.\"\n\n\"Three?\" Edraele asked in surprise. \n\n\"I've been getting closer to the girls on the Invictus. Jade's been growing more powerful and was able to set up a permanent telepathic connection with me,\" John explained as the Nymph and Alyssa both contacted him to say they weren't offended.\n\n\"Jade is a remarkable girl,\" the Maliri woman said with a thoughtful look on her face. She shook that off a moment later and continued, \"If you'd prefer me to adopt a 'different' kind of role with you in our relationship, I'm sure that could be arranged.\" Tracing a finger along his jawline, she murmured, \"After all, I am 112 years your senior. I'm sure it wouldn't be too difficult to slip into a more... maternal role.\"\n\nJohn shook his head firmly. \"I appreciate the offer, but I like our relationship exactly the way it is.\" He slid a hand between one of the slashes in her long dress and brushed his fingertips over the taut skin of her curved midriff. \"I have firm plans for you, Tashana, and Irillith. Just focus on taking care of your daughters and the Maliri girls in your care and I'll be very pleased with you.\"\n\n\"I very much enjoy pleasing you, My Lord,\" Edraele purred, snuggling into him. \n\n\"I know you do. You're a wonderful Matriarch,\" he agreed, enjoying the tremor of excitement he felt pass through her luscious body. He gave her a look of longing then shook his head, \"Later. We've got all the girls waiting for us.\"\n\nShe glanced at the door. \"Should we go and join them?\"\n\nJohn nodded and sat up, then offered her a hand. \"I can tell you the rest on the way, or give you an overview at least.\"\n\n\"An overview?\" she asked curiously, climbing off the bed.\n\n\"Of the battle with the Kirrix,\" John replied, helping steady her. \"I hadn't realised how much the Glowing Queen's rebellion had destabilised the Trankaran Republic... they were still paralysed with indecision months later, leaving them exposed to a massive Kirrix invasion.\"\n\n\"I really did miss a lot,\" Edraele said quietly, shaking her head as they walked from the bedroom. \"The Glowing Queen was the other Progenitor's puppet wasn't she?\"\n\nJohn looked at her in surprise for a moment. \"Ah, that's right; that all happened before you joined me.\"\n\n\"If I recall, I was planning to turn you into my obedient lapdog at the time,\" Edraele said, arching an eyebrow and adopting a cold aloof expression. She rolled her eyes at herself and murmured, \"God, I used to be such a malignant bitch!\"\n\nHe laughed and kissed her hand. \"Fortunately, you had quite the epiphany.\"\n\n\"I certainly did,\" she replied with a smile. \"So what happened in the battle? I hope no one was injured?\"\n\n\"We took cam-footage of the entire battle, so you can see for yourself,\" John said, walking hand-in-hand with her through the plush quarters. \"Basically Chancellor Niskera had arranged a meeting with a dozen ambassadors from the minor empires, but the planet she'd chosen was invaded by the Kirrix.\"\n\nEdraele pursed her lips thoughtfully. \"A dozen of them? She must have the patience of a saint.\"\n\nJohn chuckled and nodded his agreement. \"That she does.\" He glanced at the Maliri Matriarch out of the corner of his eye and continued, \"Maliri Space is huge, are there any minor empires within the Protectorate?\"\n\nShe looked uncomfortable and after a long moment, shook her head. \"Do you remember the Fulmanax?\" \n\nHe stopped and turned to look at her. \"I could hardly forget... especially after what happened to them.\"\n\n\"They were the last,\" Edraele said bluntly, unable to meet his gaze, a look of deep remorse crossing her beautiful face. \"I personally oversaw the genocide of three other alien species on the outskirts of Valaden territory. Rampant Xenophobia has been a very unfortunate consequence of Valada's decision to withdraw from intergalactic affairs.\"\n\nJohn was appalled by what the old Edraele had done, but he could see how plagued with guilt his Maliri Matriarch was. He gently lifted her chin so she had no choice but to look at him. \"What have I told you before about feeling guilty about the old Edraele's actions?\" \n\n\"I know, but she did such terrible things...\" Edraele replied, struggling to meet his gaze.\n\nHe stepped closer and cupped her face in his hands. \"This is important Edraele. Tashana and Irillith have been through a lot, but they're both putting the past behind them, hoping for a happy future with you and me. I don't hold you personally responsible for anything the old Edraele did, but if you really want to atone for her crimes, do so by being the best leader for your people you can be. No more guilt... okay? It doesn't help anyone and it will harm your relationship with your daughters. I don't want to see them get hurt again, they've both suffered through enough for two lifetimes...\"\n\nEdraele looked shocked at his blunt words, then her expression softened. \"You're right, moping about the past isn't achieving anything.\" There was a firm resolve in her eyes as she continued, \"I want to be there for my girls and give them the loving mother they always deserved. I won't risk doing anything to put that in jeopardy!\"\n\n\"Good girl,\" John said quietly, pulling her in for a hug. He stroked her back and whispered in her ear, \"They really do love you. Just give them a chance to show you how much.\"\n\nShe clung to him for a while, until finally pulling back with a look of gratitude on her face. \"I can see why me trying to play the maternal role with you would never work, I need your support too much!\"\n\n\"That's quite alright, I like our relationship just as it is,\" John replied, giving her a warm smile. \n\nEdraele squeezed his hand and then continued walking out of the opulent quarters. \"So where were you with your story? You told me that Niskera had chosen a planet for a conference?\"\n\n\"Yes, a planet called Khalgron near the Kirrix invasion corridor,\" he replied.\n\nThe Maliri Matriarch frowned and asked, \"Wasn't that asking for trouble?\"\n\n\"There was method in her madness,\" John replied with a wry smile. \"Khalgron has a mix of climates and terrain, which are roughly similar to each of the ambassadors' homeworlds. Niskera was hoping it would make the delegates empathise with the planet's plight and get them to pull together to fight against the Kirrix invaders...\"\n\nEdraele nodded thoughtfully. \"It does make sense, but it was a real gamble to host an event like that so close to danger. Niskera sounds quite reckless...\"\n\n\"It's probably fairer to say that she's optimistic and a little naive,\" John corrected her. \n\n\"It sounds like you admire her?\" Edraele asked, giving him a knowing look.\n\n\"I do,\" he replied with a shrug. \"She's compassionate, very driven, one of the most selfless people I've ever met...\"\n\n*And a handy person to have around in a power cut...* Alyssa interjected with a telepathic grin.\n\nJohn rolled his eyes at the blonde. *I'm not sure you're exactly in a position to be making jokes about what happened with Niskera, young lady...*\n\nEdraele studied him curiously for a moment, then her eyes widened in shock. \"You turned Niskera into your own Glowing Queen!\" she exclaimed looking astonished.\n\n\"It sounds like you don't approve?\" John asked with a grimace.\n\n\"On the contrary, I think it was inspired!\" Edraele replied her face lighting up in elation. \"If Niskera has as dramatic an effect on the Trankarans as white-haired Maliri do on our dark-haired sisters, she should be able to unify them immediately.\" She gave him a look of sincere admiration. \"And united under your banner too!\"\n\nJohn could feel how delighted Alyssa was at Edraele's glowing praise, but she was definitely trying her hardest not to be too smug about it. *You get a B for effort,* he told the blonde with amusement.\n\nEdraele studied John in fascination. \"That was a very bold, proactive move for you. You really have changed while I was asleep!\"\n\nHe paused and slowly shook his head. \"Actually, I didn't want that for her.\"\n\n\"You didn't?\" Edraele asked in confusion. \"But it's a perfect solution for everyone involved! The Trankarans can unite under a strong leader rather than that farcical republic nonsense and actually accomplish something for once. While you now have a strong and loyal ally in the Trankarans, who can help in the fight against the other Progenitor!\"\n\nSeeing that they still had things to talk about, John guided Edraele through the lounge to a sofa. He sat down beside her and said quietly, \"But what about the personal cost to Niskera?\"\n\n\"Personal cost? What do you mean?\" Edraele asked, looking bewildered.\n\n\"She'll never be like a normal Trankaran again,\" John said quietly. He reached for the Maliri woman's long hair and brushed his fingers through the silky strands. \"The transformation into the Glowing Queen is far more profound than simply giving you white hair.\" He could see Edraele about to object and headed off her protests. \"I know there's negative implications about women who have long hair amongst the Maliri, but trust me when I say it's very different with a Trankaran. Do you know what the Trankarans look like?\"\n\n\"I've spoken to their ambassadors over holo-comm,\" Edraele replied. \"Tall, blocky, look like they're made from rock, with rather coarse brutish features?\"\n\nJohn nodded. \"Yes, that's right.\" He traced his finger along her slender blue arm, making curved patterns that gave her goosebumps. \"Imagine one of them with swirling lines over their whole body and those patterns glowing with an inner light, which pulses like a heartbeat. That's what the Glowing Queen looks like and any Trankaran who sets eyes on her worships her like she's some kind of goddess.\"\n\n\"I can see why Niskera might have had reservations,\" Edraele said, looking down at her arm and trying to imagine what that would be like.\n\nHe shook his head. \"Alyssa suggested the idea to her, but once Niskera realised how effectively she'd be able to rally her people, there was no convincing her otherwise. Like I said before, she's very selfless.\" Leaning back on the sofa, he continued, \"She had no regrets after the change was complete and loved her new appearance, but I do worry about her future. I think it'll be difficult for her to find long-term happiness amongst the Trankarans after changing so much, but I suppose we'll have to see how it pans out.\"\n\nEdraele gave him an affectionate smile. \"Your concern for her is very admirable...\"\n\n\"But...?\" John said, realising it was coming.\n\nShe inclined her head. \"Like I said, sometimes in your position, you'll be faced with impossibly hard choices. Do you sacrifice one person to save billions?\"\n\nJohn chuckled as he rose from his chair and said, \"It's quite ironic that you're giving me that advice.\"\n\n\"Ironic? How so?\" Edraele asked, looking up at him curiously.\n\nJohn offered her a hand. \"Let's rejoin the others and I'll get Faye to send us the footage of the battle against the Kirrix. I said almost the exact same thing to Sakura after the fight; you'll see why when you've seen it.\"\n\n*Head back to the Invictus. We're all in the Officers' Lounge at the moment,* Alyssa informed them both.\n\nEdraele appeared to be suitably intrigued as they left the suite and took the lift down to Deck Twelve. After crossing into the Invictus, they headed up to Deck Two and found the girls from his crew, the Young Matriarchs and Edraele's three bodyguards sitting together on the sofas. The conversation came to a screeching halt as soon as John and Edraele entered, which he normally would've taken as a very ominous sign. However, the eight Maliri girls linked to Edraele all rushed over to see her, finally getting a chance to give her a hug and tell her how relieved they were that she was alright.\n\nThe affection between the Matriarch and her girls was obvious to all, and John glanced at Irillith and Tashana who were watching their mother being doted on by her wards. He could see the look of... not envy as such, but more hope and longing on both of their beautiful faces. Irillith glanced his way, then nudged her twin and they both smiled in his direction when they saw he was focused on them.",
        "Realising Edraele would be occupied for a minute, he approached the sisters and crouched down in front of them. \"You two okay?\"\n\nTashana leaned closer and whispered, \"It's just a little... unsettling... to see how much they love her and how much she cares about them. Edraele's just so different now from the woman I knew growing up.\"\n\nIrillith edged forward on her seat and murmured in a soft voice, \"She's not the same woman, that's the reason why.\" Putting an arm around her sister she continued, \"But the new Edraele really does care for us.\"\n\nJohn placed a hand on theirs. \"Her feelings for you both are absolutely genuine. We just talked about you earlier... she wants the same thing you do.\"\n\nTashana slid one hand to her slim stomach and raised an eyebrow. \n\nHe smiled and nodded. \"Yes, definitely. But first she wants to be there to care for you in a way your mother never was before. Just give her a chance, you'll see.\"\n\nThe twins leaned forward to hug him and he enjoyed their embrace along with the soft kisses they each planted on his cheek. When they sat back he turned to see Edraele and Alyssa were now seated in the centre of the horse-shoe layout of sofas, a space obviously intended for him left between them.\n\nJohn took a seat between them and put his arms around both Matriarchs. \"This feels lovely,\" he said, glancing at each of them in turn. \n\n\"How your home on Valaden will be,\" Edraele said, reaching across him to clasp Alyssa's hand.\n\nThe blonde let out a happy sigh and snuggled closer. She glanced at Faye, who was fluttering impatiently behind the sofas. \"We're all set, Faye.\"\n\n\"Okay, just one second!\" the sprite replied, bringing up a holo screen in front of her audience.\n\nWhile Faye was getting the footage ready, John looked around the room and was pleasantly surprised to see that the girls from his crew had spread out amongst their guests. There was lots of furtive whispering going on as they chatted quietly to the Young Matriarchs and the trio of bodyguards. Even Alyssa had turned away from him to speak to Tsarra, who was seated beside the teenager. The short-haired House Perfaren Matriarch glanced his way over the blonde's shoulder and gave him a shy smile, before focusing on Alyssa once again.\n\nJohn knew his playful Matriarch was up to something, but he hadn't quite figured out what. When he looked at Edraele, she burrowed into his shoulder and rested her head on his chest. He caught the hint of a smile as she deliberately avoided making eye contact with him.\n\nFaye cleared her slender holographic throat to get everyone's attention. \"May I present to you, the Battle of Khalgron!\"\n\nThe overhead lighting dimmed to soft side-lighting and Faye's impressive collage of the battle began to play. This was the much longer footage that the sprite had showed John and the girls in the aftermath of the battle, and even though he'd seen it once before it still made for compelling viewing. For nearly an hour they watched raw footage of the girls blowing apart hordes of Kirrix troops, while the Invictus fought against impossible odds against the vast insectoid fleet.\n\nThere was a hushed quiet through the movie, punctuated only by the occasional sharp intake of breath or gasp of fear. John could only imagine how dramatic the footage must be to the Young Matriarchs, who would never have seen just how intense combat could be. To his surprise even Edraele jumped at several frightening moments, and he could feel the tension in her body as the battle drew to a close. When the movie ended, Faye slowly raised the lights to let everyone's adjust to the brightness, illuminating nine stunned blue faces.\n\n\"I had no idea...\" Edraele murmured, gaping at him in awe. \"You've all become so powerful!\"\n\nLooking around he saw similar looks of shocked disbelief from the Young Matriarchs and surprisingly, all three assassins as well.\n\n\"I'm sorry, we didn't show you the battle to scare you,\" John explained, darting a worried glance at Alyssa. \"We thought it would be easier to just show you the footage than describe what happened with the Kirrix.\"\n\n\"You're like gods!\" Kali Loraleth blurted out, staring wide-eyed not just at John, but the rest of the girls as well.\n\nDana grinned and nudged the young Maliri woman playfully with her elbow. Leaning closer she whispered something in Kali's ear that made her blush a dark blue. Whatever the redhead said shook her out of her shocked state very quickly, as Kali giggled and shot a speculative glance in John's direction.\n\nAlyssa had an arm wrapped around Tsarra who appeared to be just as stunned as the rest of them had been. The blonde glanced at John and said, \"It's important they all got to see this. If... I mean when we get into a fight with the Progenitor, he'll be using armies of women using those Reaper Cannons just like Irillith did. We have to prepare and get ready for that, because I don't think we've got any chance of avoiding it.\"\n\nThe Terran girls took that as a cue to start talking quietly to the Young Matriarchs, while the twins and Jade spoke with the assassins. John could feel the tension in the room dissipating and he glanced down at Edraele to see her lost in thought, her expression deeply troubled.\n\nStroking her shoulder to get her attention, he asked softly, \"I didn't expect you to be shocked by that. You were there every step of the way through the Battle of Ashana and at Regulus.\"\n\nShe shook her head, an unsettled look on her face. \"It's completely different just hearing your thoughts to actually seeing the kind of danger you put yourselves in. Now I can't help thinking back to Ashana again and you running out of psychic power mid-battle! I had no idea what kind of danger that put you in!\" Her purple eyes looked haunted and it was obvious she was badly shaken. \"Alyssa's right, we've got to ramp up the amount of power we give you... I can't leave you exposed like that again!\"\n\n\"It wasn't your fault,\" John said to calm her. \"We pulled through the fight and no one got hurt... well nothing we couldn't patch up anyway.\"\n\nUnfortunately, the reminder of Rachel being shot by neutron bolts and screaming in agony did little to assuage the Maliri Matriarch's anxiety.\n\nJohn was about to try a different tack when Alyssa stood in front of their sofa, holding out a hand expectantly to each of them. \"Come on, it's time we three had a chat.\"\n\nEdraele rose unsteadily from her seat, but not from a tummy full of cum which she had largely absorbed; she was still reeling from seeing those intense firefights. John stood as well, looking at Edraele with concern. He darted a quick glance at Tsarra to check she hadn't been left on her own, but the young woman was now speaking to Calara and Leena Ghilwen.\n\nAlyssa led them out of the Officers' Lounge with a confident strut, then put her arm around Edraele as they walked down the corridor to their bedroom. \"Hey, don't be upset...\" she said with an encouraging smile. \"Remember the plan? We're going to fix those power issues over the next few days!\"\n\nEdraele nodded, shaky at first, then with a sudden decisiveness. \"You're right, we should have thought of this months ago!\"\n\nJohn stepped aside at the bedroom door to let his two Matriarchs in, then followed them to sit on the bed beside them. Alyssa and Edraele moved back a little across the covers to give him room to join them, glancing at each other in that telltale way, which the girls always did when they were deep in telepathic conversation.\n\nHe watched them for a minute, before he laughed and said, \"I thought the three of us were going to have a chat? Maybe you can let me in on whatever secret plans you've been hatching?\"\n\nAlyssa smiled at him and he could tell she was desperately trying to curb her excitement, which was as intriguing as it was alarming. She glanced at her fellow Matriarch and the two approached him, pushing him back on the covers then lying down on top of him beside each other. The physical contact was very nice, as was the thought that he had two of the most powerful women in the galaxy wrapped in his arms. One was at least his equal in psychic power, while the other essentially ruled the most powerful species in this corner of the galaxy.\n\n\"Yes, and we're here to satisfy your every whim,\" Alyssa said with a seductive purr.\n\n\"Anything you desire, My Lord...\" Edraele agreed, with a similar smouldering look in her eyes.\n\nJohn was hard as steel in seconds with the promise in their lovely eyes and his hands roamed lower, exploring their delicious curves. He managed to compose himself with a herculean effort and said, \"Okay you get full marks for the seduction routine, but didn't we come in here to talk?\"\n\nAlyssa shared a glance with Edraele and then gave him a coy smile. \"Later... you two have unfinished business first.\"\n\n\"I want to earn my engagement ring,\" the Maliri Matriarch agreed, an eager gleam in her eyes.\n\nHe frowned and said, \"I told you before you don't need to earn it. What's this about?\"\n\nAlyssa leaned closer and whispered, \"Edraele's right... the rest of us earned ours the hard way. She's no exception.\"\n\n\"This is essentially an XO meeting after all,\" Edraele reminded him. \"Don't you have a tradition you like to uphold?\"\n\nSudden understanding came like a bolt from the heavens and John couldn't help laughing. \"You won't accept my wedding ring until we've had anal sex?!\"\n\n\"A ring for a ring, it's a fair exchange,\" Edraele replied with a shrug, a playful twinkle in her eyes. \n\nAlyssa giggled and nodded. \"You buggered all your fianc\u00e9es before proposing. Poor Edraele will feel left out if you don't make her squeal on your huge cock before she agrees to be your wife. After all, you plan to regularly fuck us in the ass while we're pregnant, so you should give the poor girl a chance to try it before she agrees to an eternity of being taken by you in any way you like...\"\n\nJohn smiled and said contritely to his Maliri Matriarch, \"I apologise. I hope you can forgive my lack of courtesy...\"\n\n\"You're forgiven,\" she said with a playful smile. \n\nAlyssa grinned at them both. \"Now, we're going to the bathroom, so I can prepare her for you.\" She pretended to hesitate for a second before she added, \"She's never taken anything back there before. Do you mind if I warm her up first, or do you want her 'virgo-intacta' as it were?\"\n\nEdraele saw his look of surprise and said, \"Remember it's a terrible cultural taboo amongst the Maliri. What you're about to do my bottom is considered to be very naughty...\"\n\nJohn couldn't help grinning at Alyssa as he said, \"Make sure she's ready, I don't want this to be painful in any way.\"\n\nThe blonde bowed subserviently, glancing at him under her long lashes, the feverish look of excitement in Alyssa's cerulean eyes quite apparent. \"Whatever My Lord commands...\"\n\nHis two Matriarchs climbed off the bed then walked hand-in-hand to the bathroom. He watched Edraele saunter towards the door, admiring the taut curves of her cheeks and hardly believing that she was going to allow him to plunder her spectacular ass.\n\nJohn heard the shower activating and relaxed on the bed, waiting for his two Matriarchs to return. Even though he was eagerly looking forward to being with Edraele, he'd used up a sizeable portion of his psychic energy in healing her earlier, so he seized the opportunity to have a brief rest before they returned. The comfortable bed lulled him into a light sleep and try as he might, he struggled to keep his eyes open. \n\n*John, we're ready for you now...* Alyssa murmured to him telepathically, her voice whispering through his mind. \n\nJohn started awake and flushed with embarrassment. \"I'm so sorry! I tried to stop myself from falling asleep, but I must've been-\" Edraele glided into his line of sight and he stopped mid-sentence when he set eyes on her. \n\nShe was wearing a stately purple Matriarch's gown, which emphasised her rank and status, while showcasing her stunning figure. Her long white mane was up in an elaborate hairstyle, a few tendrils hanging down to frame her exquisitely beautiful face. Alyssa had expertly applied cosmetics to the Maliri woman, highlighting her high cheekbones and delicate features, the overall effect making Edraele look unquestionably regal. With her perfect poise, she was the epitome of a majestic Maliri Queen.\n\nEdraele arched an elegant white eyebrow as she looked down at him. \"I obviously didn't do a very good job of seducing you, not when you fall asleep the moment my back is turned...\"\n\nJohn sprang across the covers and practically vaulted off the bed so he could stand beside her. \"You look absolutely breathtaking!\" he exclaimed, his voice ringing with sincerity. \n\nAlyssa drifted over to join them, looking similarly gorgeous in an elegant long evening dress, although she'd deliberately made an effort not to outshine her fellow Matriarch. \"We sensed you'd fallen asleep, so I took some time to properly wrap up your present for you...\"\n\nHe reached out to touch Edraele, but his hand wavered an inch from her slender torso. She looked so magnificent, he felt reluctant to risk sullying this flawless work of art standing before him. Edraele smiled as she heard his thoughts and stepped closer so that his fingers brushed her waist, initiating that first contact between them. \n\nEnthralled, John murmured, \"I don't know why I've not seen it until now...\" He walked around her, trailing his fingers around her waistline as he admired every inch of her statuesque figure and elegant bearing. He traced the curve of her hip with his fingertips, drifting on to the firm swells of her upper cheeks, then back around to caress her toned stomach. \"You were born to be Queen.\" \n\nEdraele looked startled and shook her head. \"I promise that wasn't what I was trying to imply. I remembered how much you love formal wear, so I just-\"\n\nJohn gathered her in his arms and kissed her, dipping her backwards as he did so. Edraele swooned in his embrace, her eyelids fluttering as she responded to his passionate kiss. When he lifted her so that she was standing before him again, she had a distinctly non-regal blush to her azure cheeks. \n\nAlyssa approached them and slid a hand across the Maliri woman's back, stroking her affectionately. \"It makes sense. The rest of the Matriarchs all treat Edraele as their leader anyway. Why not make it official?\"\n\nJohn nodded, studying the shocked woman standing before them. \"There's no one in the entire Protectorate I trust more.\" He looked into Edraele's purple eyes and continued, \"You know how much I value your opinion. What do you think, Matriarch Edraele Valaden? Would you like to become Queen Edraele of the Maliri Protectorate?\"\n\nEdraele managed to overcome her awe and stood taller, holding herself with pride. \"If you choose me as your Queen, I will serve you to the absolute best of my ability, my Lord.\"\n\n\"I know you will, I don't have any doubt about that,\" he replied with a smile. \"But is it a wise move politically? Will your official appointment as the highest ranked woman in the Maliri Regency put our alliances with the other Houses at risk?\"\n\nShe thought about it for a moment, then shook her head. \"Even if it weren't for the dramatic effect you've had on the demeanour of the other Matriarchs, I can't see any of them openly objecting, or even resenting it privately for that matter. Alyssa is correct, the Matriarchs have deferred to me on all the occasions we've met to discuss matters affecting the Protectorate. Relations between us have transformed from being vicious and homicidal to almost... pleasant, now.\"\n\nJohn gathered her hands in his and said quietly, \"Is it a role you'd be comfortable with though? I know you'd embrace the title if you believe it's what I want you to do, but what do you want, Edraele?\"\n\nThe Maliri woman gazed off into the distance and shook her head in amusement. \"As you know, I still have all of my former personality's memories. There were two things Edraele craved more than anything in the galaxy and she would have been willing to make any sacrifice to obtain them. First, was a cure for the tumour in her head, to avoid the agonising death that awaited her...\"\n\nReaching up, John caressed her temple. \"That was something I would have been more than happy to help her with, if only she'd asked. And the second?\"\n\n\"To be Queen of the Maliri,\" Edraele said with a wry smile. \"It's ironic that she's been given the two things that she desired the most, yet isn't here to actually savour them.\"\n\n\"It's unfortunate what happened to her,\" John said, a look of regret on his face. He brightened then and squeezed her hand. \"But by choosing the course she did, we were able to eventually meet... and I like this version of you very much indeed.\"\n\nEdraele smiled at him for the compliment, but she stepped closer and gazed into his eyes, her expression serious. \"Don't feel any regrets about what happened to Edraele; she was a monster and deserved a far worse fate. If my former personality had been given the title, she would have abused her power to crush her enemies and exact vengeance for the innumerable grudges she held. Under her, the Maliri Kingdom would have become a terrifying presence in the galaxy. She would have made life intolerable for the people under her rule, and wasted no time subjugating the neighbouring empires.\"\n\n\"And what will the new Edraele do, if given that opportunity?\" he asked, searching her face.\n\n\"Whatever I can to protect my people from the Progenitor that threatens their survival,\" Edraele said earnestly. \"But they've also suffered for too long under tyrannical leadership, so I'll strive to give them the opportunity for a happy and prosperous future, free of the terrors of the past.\"\n\n\"Good answer,\" Alyssa said, hugging her fellow Matriarch from behind. \"I think she'll make a wonderful Queen.\"\n\n\"So do I,\" John said, nodding his agreement. \"I'll defer to your expertise on making the official announcement, my Queen.\"\n\nEdraele looked touched and she reached up to caress his cheek. \"Thank you for trusting me with something so important. I promise you'll never regret the decision for one moment.\"\n\nThey shared a three-way hug, with John and Alyssa warmly embracing the new Queen of the Maliri Protectorate. \n\nWhen they eventually separated, Edraele gave John a coy look. \"I believe we had something else planned this afternoon before we were sidetracked. I don't know about you, but I've been looking forward to this very much...\"\n\nJohn had his hands on her waist, but he let them slip down to her bottom and gave it an experimental squeeze. The feel of her firm cheeks yielding to him, had him as hard as steel in an instant and Edraele smiled when she felt the heat from his erection against her belly.\n\n\"Perhaps we should move to the bed?\"\n\n\"We're all wearing far too many clothes, too,\" Alyssa agreed. John gave their elegant outfits a look of regret and she quickly corrected herself. \"Or we could leave them on...\"\n\nHe shook his head and ran his fingers over Edraele's back. \"The gown looks wonderful on you, but I wouldn't want to ruin it. I want to leave you in a state of well-satiated exhaustion by the time we're done...\"\n\nAlyssa grinned at him, looking thrilled. \"We? I was expecting to just be a spectator.\"\n\n\"What do you think?\" John asked Edraele, gently rubbing her back. \"I'm sure you'd have a great time with just me, but with Alyssa involved too...\"\n\nEdraele glanced over her shoulder and smiled at the blonde, \"Would you like to help John break me in for the first time?\"\n\n\"You're so fucking sexy,\" Alyssa purred, leaning closer and kissing the blue-skinned beauty.\n\nWhile the two of them kissed, John took the opportunity to further explore Edraele's body. He brushed his hands across her chest, following the supple curves of her breasts with a light touch of his fingers, before massaging and teasing her erect nipples. The Maliri woman moaned into Alyssa's mouth, responding instantly to his expert touch.",
        "Edraele pulled away from the blonde teenager and said in a voice full of arousal, \"There's only one rule, but it's one I'm going to insist on. No telepathy! I want to hear every lewd thing you're saying to John while he's riding me...\"\n\n\"Are you sure?\" Alyssa murmured, a hand sliding inside a fold in Edraele's dress and darting lower. \"I'll probably be asking him how your tight little ass compares to the other two Maliri he's fucked like that...\"\n\nEdraele could only groan and nod her head, unable to respond as she trembled to Alyssa's skilful touch.\n\n\"How do you want us?\" the blonde asked John with a sultry smile. \"The way you broke in Tashana was fun, we could always repeat that...\"\n\nJohn stared into Edraele's eyes. \"Tashana initiated the whole thing. She was magnificent; bold and confident, just like her beautiful mother.\"\n\nEdraele kissed him again, moaning into his mouth as she panted with lust. John undid the clasp holding her hair up, then took a firm grasp of her long snowy mane and tilted her head back, causing the Maliri woman to gasp with excitement. With her slender neck exposed, he was able to kiss her vulnerable throat, enjoying the way she quivered at every brush of his lips. \n\nJohn paused between kisses and met Alyssa's smouldering gaze. \"Strip off and get on the bed. I want Edraele to lie on top of you. That way you can help keep her relaxed and watch how she reacts when I enter her for the first time.\"\n\n\"I fucking love you so much!\" Alyssa gasped, rushing to remove her long dress.\n\nThe blonde was nude in a surprisingly short time and she grinned as she stepped behind Edraele to help her remove her Matriarch's trappings. Edraele made no move to help her, standing and gazing at John with lust-fogged eyes as Alyssa unfastened the formal dress. Neither of the girls had been wearing underwear, so John was soon able to feast his eyes on Edraele's dark blue nipples. They were no more than an inch across, coming to two perfect conical points on pert breasts that sat high on her chest, practically begging to be kissed. John did exactly that, tasting her skin and feeling her nipples stiffen to teasing flicks of his tongue. \n\nEdraele tangled her finger in his hair and clung onto him for balance. \"You turn me on so much,\" she groaned, wavering as he lapped and stroked her.\n\nAlyssa finished unfastening the last of the clasps and the long dress fell to the floor, pooling around the Maliri's feet. She kissed Edraele on the shoulder and looked into John's eyes over the woman sandwiched between them. \"She's all ready for you...\"\n\nJohn pulled back, then watched as Alyssa climbed onto the bed, leading Edraele with her. The blonde lay back and spread her legs, then guided her exotic blue lover to lie on top of her, their firm breasts pressing together. She hooked her legs over Edraele's then used her strong muscles to gently part those firm azure thighs. After wrapping her arms around the Maliri too, they began to slowly kiss, the movement of their lips as loving as it was sensual.\n\nWith a start, John realised he was still fully dressed, so he quickly removed his clothes and joined the pair on the bed. Both girls reacted immediately, with Edraele lowering herself submissively and tilting up her hips, while Alyssa grasped those perfect blue globes and gently pried them apart. John knelt behind Edraele and lined himself up with her glistening anus, pressing the broad head of his cock against the puckered knot of muscle. The size difference was glaring and if he hadn't already stretched out all his girls, he'd never believe that she'd be able to take him. Taking a firm grip on Edraele's trim waist, he kept his shaft lined up with his other hand and gently increased the pressure. \n\nEdraele pulled up from Alyssa, then tossed her long hair over one shoulder. Her purple eyes had a wild look in them as she gazed at him. \"Do it! Claim my body!\"\n\nJohn pushed harder and her sphincter was forced to stretch impossibly wide to accommodate the huge girth of the anal intruder.\n\n\"By the gods, you're enormous!\" Edraele groaned, grabbing the sheets in clenched fists.\n\n\"Just relax for him, let him slide all the way inside,\" Alyssa murmured, slipping a hand between them and stroking the older woman's clit. \n\nEdraele had already been on a hair trigger and the blonde teenager's expert touch set her off. She cried out, as she climaxed, her body clenching and relaxing as she responded to the ferocious orgasm. John chose that opportune moment to push several more inches inside her, making Edraele squeal with the overwhelming new sensations. Her thighs shook as she tried to buck against him, her body desperately riding out her release. \n\nJohn held still then and let her recover, stroking her trembling flanks as she came down from her ecstatic high. \"Ready for more?\" he asked, when she sagged against Alyssa.\n\nThe Maliri turned to look at him and nodded, biting her lower lip in her passion. \"Give me everything you have, but take it slow... I want to feel every inch!\"\n\nShe raised herself up so that Alyssa could watch her react to being fucked in the ass for the first time. The blonde spread Edraele's cheeks apart again, so that John could watch his cock gradually penetrating her, that slick blue ring wrapped snugly around his shaft.\n\n\"It feels amazing, doesn't it?\" Alyssa purred as she gazed into Edraele's eyes. \"That massive cock hot in your belly, stretching you out to make you fit...\"\n\n\"I feel so full...\" Edraele groaned, pupils widely dilated as she stared open mouthed at the teenager beneath her. \"I can't believe all of you took him like this!\"\n\n\"There's still a few more inches to go,\" the blonde replied, gently massaging the other woman's trembling asscheeks. \"Just relax, he's loving it...\"\n\nEdraele flicked her mass of hair out the way so she could look back at John over her shoulder. \"Is that right? You love violating my ass? The old Edraele would have scratched your eyes out if you tried this with her!\"\n\n\"But you're a good obedient girl, aren't you?\" John replied with a knowing smile. \"You get off on this...\" He sank the last few inches into her taut blue body, watching the look of shock and wonder on Edraele's face as she felt him nudge incredibly deep inside her.\n\n\"Fuck...\" she whimpered, her thighs trembling as she teetered on the brink of another orgasm.\n\nAlyssa let go of Edraele's muscular cheeks, so they bounced back to trap John's cock. She moved both hands up to cup Edraele's full breasts, gently caressing them to heighten her state of arousal but keeping her from finishing. \"Ready to be broken in?\" she crooned, tilting her head up to tenderly kiss the woman straddling her. \"You ready to earn that nice shiny ring?\"\n\n\"Please...\" Edraele begged, a desperate need in her eyes as she gazed back at John.\n\nHe took a firm grip on her waist and slowly withdrew half his length, drawing a low moan from the impaled Maliri.\n\n\"That feels so wrong...\" she groaned, turning to stare wild-eyed at Alyssa again.\n\nThe blonde grinned at her, \"Just wait for it...\"\n\nJohn thrust all the way up to the hilt inside Edraele again, his quad slapping against her sopping pussy.\n\n\"Fuck!\" she screeched, her hands twisting the bedsheet tighter in her fists. \n\nAlyssa pinching her nipples at the same time set her off and Edraele wailed through her second climax. John established a steady rhythm, driving in and out of her frantically clenching ass, while savouring every moment inside this spectacular woman. She felt wonderfully hot and just as deliciously tight as any of the Terran teenagers he'd taken in the same way. He took his time to admire her luscious blue body, toned, limber, and athletic just like the rest of his girls. Her firm buttocks rippled with each impact as he hilted himself inside her, Edraele letting out soft grunts every time he plunged deep into her belly.\n\nAlyssa grinned at him around Edraele's shaking body. \"It's even better knowing she's a Queen, isn't it? Such a powerful woman submitting to you... letting you do whatever you want with her magnificent body.\"\n\nJohn nodded in agreement, gathering Edraele's flowing mane of snowy hair in his hand and pulling her back against him. She cried out as she arched backwards, repositioning her hands on Alyssa's firm chest to support herself.\n\n\"How's that feel, beautiful?\" he asked the writhing woman, turning her head so he could stare down into her disbelieving purple eyes.\n\nEdraele's body was overwhelmed with pleasure, cresting her climax as he stroked in and out of her with powerful undeniable thrusts. \"So good...\" she moaned, unable to do anything except take the pounding.\n\nAlyssa had an eager gleam in her eyes as she asked. \"Want me to make her even tighter?\"\n\nJohn clasped one of Edraele's hands in his then moved it to her tummy, where they could feel the bulge the head of his cock was making high in her abdomen. \"You feel pretty stuffed. Think you can take even more?\" \n\nEdraele gaped at the blonde when she heard her thoughts and realised what she was planning. \"That'll never fit!\"\n\nAlyssa grinned at her. \"Tashana took both of us like a trooper... and that didn't sound like a 'no' to me!\"\n\nThe Maliri cried out as Alyssa began to push a telekinetic replica of John's cock into her pussy, stretching both of Edraele's holes to capacity. Edraele felt every millimetre rubbing against the ribbed surface of her G-spot as the second cock entered her, while Alyssa's nimble fingers began to stroke her clit in time to John's thrusts. The Maliri Queen wailed in ecstasy as she came again, clamping her eyes shut as she was double-penetrated for the first time. \n\n\"Try not to pass out just yet,\" John whispered in her pointed ear, as Edraele twitched limply in his arms. \"We're getting to the best part soon.\"\n\nThat roused her and she dragged open her heavy eyelids to gaze up at him. \"Do it... I want to feel you filling me...\"\n\nJohn eased her forward so she was lying on Alyssa once again, their breasts squashed together as Edraele hugged her tight. Edraele gave the blonde a passionate kiss as she whimpered through their combined plundering of her body. Now that John didn't have to support her in his arms, he was able to take a firm grip around her waist and pin her in place. He thrust forcefully inside Edraele, his quad making wet squelching noise every time it slapped against her soaked pussy. On that contact, he could feel the motion of Alyssa's psychic phallus as it alternated strokes with him. \n\nEdraele sobbed her way through another climax, while Alyssa hugged her close, whispering naughty things in her ear. Her cerulean eyes flashed with excitement as she sensed John's impending climax, and Edraele lurched upright as she felt it too. With a final roar of release, John fully impaled her as his quad lurched, blasting the first long spurt of cum into her quivering body.\n\n\"I can feel it!\" Edraele gasped, hand going to her stomach as she felt the surges of cum shooting into her and warming her insides. She mewled with pleasure as Alyssa continued fucking her at a languid pace, while John's cock throbbed away, pumping the full contents of his quad into her pliant blue body. Her belly began to swell to hold the epic quantity of his release, growing heavy with the weight of cum she was taking. The curves grew more pronounced until her tummy was resting against Alyssa's toned midriff.\n\n\"That's it, take every last drop,\" Alyssa crooned, caressing Edraele's swollen belly. \"Just imagine how big you'll get when he fucks you like this when you're pregnant...\"\n\n\"Like carrying twins again...\" Edraele murmured, a dreamy look on her face. \n\nJohn sagged against her back, his balls feeling numb after such a stupendous climax. He kissed her shoulder and reached around to stroke her huge tummy. \"That was incredible, thank you.\"\n\n\"I finally see what all the fuss was about,\" Edraele murmured, turning to kiss him. \"And why Irillith has become so obsessed with it...\"\n\nHe shared a tired but well-satisfied smile with her. \"The Valaden women are all very good girls.\"\n\nAlyssa eased the force projected cock out of Edraele, then dispelled it with a wave of her hand. \"Jade's on her way,\" she told them both, patting the huge tummy full of cum pinning her to the bed.\n\n\"Looks like I'll be able to experience another first,\" Edraele said, before her voice trailed off into a sigh of regret as John gently withdrew from her snug passage. \n\nThey had just helped Edraele move into position between them, when the Nymph bounded in through the door in all her natural glory. Jade's emerald eyes gleamed as she spotted the kneeling Maliri and she prowled closer then climbed onto the bed. Edraele smiled as Jade gently massaged and parted her cheeks, then jerked in shock as she felt the Nymph's prehensile tongue burrowing its way inside her. Biting her flushed lower lip, she moaned with pleasure as Jade went to work with her normal enthusiasm.\n\n\"That's why we had to get you squeaky clean beforehand,\" Alyssa explained, brushing her fingers through Edraele's hair. \"Jade says she filters out any... impurities... but still.\"\n\nJohn met the Nymph's hungry gaze and asked, \"Would you like some too? If so, split it between the three of you.\"\n\nJade sent him a grateful telepathic smile and ripples of light began to pulse out from her tummy a few seconds later. *Thank you, Master,* she thought to him as she greedily sucked out all of his cum.\n\nJohn lay back on the bed, enjoying listening to Edraele's breathy cries and watching Jade's light show while he waited for them to finish. When Jade was done emptying Edraele, she gathered the two Matriarchs in her arms and fed them both from her huge cum-filled breasts, whispering quietly to both women as they drank from her. \n\nThe Nymph stretched when the girls had finished and gave John a lazy smile. \"I might have a little nap if that's okay with you?\"\n\n\"Of course, honey,\" John agreed as Alyssa and Edraele cuddled up against him. The Nymph crawled under the covers and was asleep in moments, her soft purrs still audible to his sharp ears. Turning to look at the blissfully happy women in his arms, he continued, \"So what mysterious plans have you two been hatching?\"\n\nAlyssa glanced up at him and smiled. \"I think for the next few days, you should focus entirely on Edraele and her girls. The rest of us have got lots to keep us busy and besides, we get all your attention the vast majority of time; this only seems fair.\"\n\n\"We can all stay on the Invictus if that's okay with you?\" Edraele asked, a hopeful look in her eyes.\n\n\"That sounds like a great idea to me,\" John agreed, looking at each of them in turn. \"But we've done something similar before on Genthalas, so I expected something like this. What else is going on?\"\n\nAlyssa shared a smile with Edraele and reached across him to brush her fingers across her slightly curved blue tummy. \"Every woman on this ship wants to see you father children with the Young Matriarchs, but we all know you have reservations about it. I was thinking it over and I realised there's five of us Terran girls and five of them...\"\n\n\"Yes, that's true,\" John agreed, brow furrowing in confusion. \"And?\"\n\n\"So we can partner up with each of those Maliri girls and take them under our wing!\" Alyssa said with excitement. \"Trust me... this way will be much more fun than you just knocking them up in some big orgy!\"\n\n\"You know that was never the plan...\" John said, rolling his eyes at her.\n\nEdraele kissed him on the chest to get his attention, so he turned to glance at her. \"You're already fond of my girls, but I'm sure you'd prefer to spend lots more time getting to know them all really well before you father children with them. They all find that quite adorable, but they're already thoroughly smitten and eager to rebuild their Houses with your help. You on the other hand, can't afford to spend several weeks dedicated to falling in love with each and every one of them.\"\n\nAlyssa nudged him and laughed. \"Yeah, we know what you're like, you old softie...\"\n\n\"They're all lovely girls, unspoiled by the vicious Maliri society that twisted their mothers and elder sisters. There's plenty of time for you to grow closer when they're carrying your baby inside them,\" Edraele said gently, reaching across him to caress her blonde counterpart's youthful tummy. \"I know you wanted Alyssa to be first, but if we follow her plan, you can experience that twice...\"\n\n\"Twice?\" John asked in confusion. \"I don't understand.\"\n\n\"Just trust us, okay?\" Alyssa said, running her fingers over the muscles in his chest. \"Everyone will have a great time and we'll all get what we want.\"\n\nLooking thoughtful, John was suddenly reminded of something the blonde had just said. \"You mentioned just the Terran girls are involved? What about Jade and the twins? Or the three former assassins?\"\n\n\"Luna, Almari, and Ilyana aren't in any great rush to have children,\" Edraele explained. \"They don't have the same pressure to rebuild their Houses as the Young Matriarchs. We all thought you would probably want to wait until the fight with the Progenitor is over with first.\"\n\n\"Irillith and Tashana want to spend this time with Edraele, and Jade was happy to wait,\" Alyssa replied, darting a glance at the glowing girl behind her. \"I think she's far more excited about rescuing the surviving Nymphs and rebuilding their species with your help.\"\n\nJohn didn't bother to argue. The last thing he wanted to do was free the Nymphs from sexual slavery only to turn them into his broodmares, as much as they'd probably love the idea. He knew Jade had very definite plans in that regard, but it was something he needed to take up with her, if and when they were able to actually locate any surviving Lenarrans. \n\n\"So, who did you pair off with?\" John asked studying the young blonde.\n\nAlyssa gave him a soft smile. \"Tsarra Perfaren. She's a real sweetheart and was already thinking about having children before all that business with Tashana and the Maliri civil war.\"\n\n\"I did promise her some help with growing her hair,\" John said, returning her smile. \"I'd love to spend some time getting to know her.\"\n\n\"She would adore that,\" Edraele said stroking his chest.\n\n\"How about the rest of the girls?\" John asked, wondering who had paired off with the remaining four Young Matriarchs.\n\nAlyssa sat up and said, \"Everyone's waiting for us in the Briefing Room. Why don't we head up there and you can see for yourself?\"\n\nJohn nodded and replied, \"Let's get a quick shower then we can join them.\"\n\nThe three of them climbed out of bed, but instead of heading for the bathroom, John walked over to his hastily discarded clothes. Fishing through his trouser pockets, he pulled out a certain piece of crystal Alyssium jewellery and returned to join the waiting pair. \n\n\"There's no excuses now,\" he said with a smile, dropping to one knee and presenting the rich purple Amethyst ring to Edraele.\n\nShe gave him a shy smile in return and held out her hand. \"I accept your proposal, with all my heart.\"\n\nJohn slid the ring onto her finger, then stood and gathered her into his arms. \"Thank you,\" he said before giving her a tender kiss.\n\nThey gave Edraele a few moments to admire her engagement ring and John enjoyed her earnest praise for the skill with which he'd crafted it. Heading into the shower afterwards, he hugged both of his Matriarchs close, the three of them relaxing together under the soothing hot water.\n\nAlyssa glanced up at him, sensing his great mood and asked rhetorically, \"Happy?\"\n\n\"I really am,\" he admitted, rubbing her back. \"I'm so glad you all loved the engagement rings; everything with you girls feels like it's going wonderfully. Not only that, but it finally seems like we're getting a handle on the trouble the other Progenitor keeps stirring up. We've had to fight some crazy battles, but we managed to get through them all and twist most of the problems he's created to our advantage.\""
    ],
    "authorname": "Tefler",
    "tags": [
        "swallow",
        "teenager",
        "cum inflation",
        "blowjob",
        "psychic",
        "twins",
        "orgy",
        "shapeshifter",
        "anal"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-94"
}
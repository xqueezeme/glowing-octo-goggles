{
    "title": "Unfolding Ch. 02",
    "pages": [
        "Author's Note: This is part two of \"Unfolding,\" which you can find in the Text With Audio section of Literotica. It isn't necessary to read/listen to the first to understand the second\u2014but it would be fun! Enjoy!\n\n----------\n\nBy the time Jack and I crawl into bed, most nights all we want to do is sleep. He works so hard, three jobs (well, two and a half) and between the kids and my job and the housework, I feel like I have three jobs, myself. \n\nSex becomes like an after thought when we get so occupied with the daily rhythm of life. There are nights when I'm very willing, but my body ends up in a tug-o-war between lust and exhaustion until I slip off into sleep with my legs entwined with his, our breath the only thing mingling in the darkness.\n\nLately, though, I feel like some young teenager when it comes to sex. I can't get enough, and I'm not sure I can explain it. If someone in my past had ever told me that one day I would be begging my husband to put his cock in my ass, I would have laughed until I peed my pants. Yet, that's what I find myself doing. \n\nI've joked that we should buy stock in K-Y\u2014we have two tubes in both night table drawers and one in both bathrooms. I even put one in the living room end table drawer under a bunch of old copies of Reader's Digest after that time I ended up bent over the coffee table and one of us had to run back to the closest bathroom to get the K-Y.\n\nOf course, Jack isn't complaining. He's always up for sex, it seems, even if he's tired. I don't know how guys do that. He's been very willing to comply with my requests\u2014and I've been requesting a lot. \n\nIn fact, I've been craving it so much that I got worried and started asking my friend, Jody, about how often she and her husband have sex\u2014and if that sex might include something other than the usual?\n\nI probably shouldn't have. The gist of our conversation gave me the impression that the only women who do anal sex do it for their husband's sake, and 'normal' women don't really get any pleasure from it. \n\nSo why am I finding myself with my bottom in the air, begging Jack to put his cock in my ass more often than not? \n\nI don't know that I can quite describe my desire for it\u2014or even justify it\u2014as if that's really necessary. It turns Jack on and it turns me on. That should be more than enough to make it acceptable. Yet, I feel so strange, wanting it, but I'm compelled. I've spent a lot of time trying to figure out what it is that appeals to me about it. \n\nMy friend, Jody, says, \"That's an 'exit only' hole, baby!\" That perked me right up. Maybe that's part of it? It's something so taboo, a \"not supposed to.\" It that sense, it's a rebellion, right? So, what am I rebelling against? I asked Jack the other night if he thought I was a rebel and he laughed. Pretty telling. Is that it, then?\n\nThe other night, after I had tucked the little ones in and finished the dinner dishes, I went and took a bath. Jack was in the living room on his laptop, trying to get some work done at home. I soaked in the tub and drifted, thinking about his cock in my ass. \n\nWhat was it that made me want it so much? My pussy ached at the thought. I fingered my clit, back and forth, remembering him fucking me, hard and deep. It wasn't the heat of the water that made me so flushed\u2014it was remembering how he pounded me, made me beg, scream, cum...\n\nI wanted his cock in my ass. My finger on my clit wasn't anywhere near enough. I couldn't deny it. When I came out of the bathroom, I was wearing nothing but a little smile. It seemed to get his attention. \n\nWhen I went over to the end table and dug under the Reader's Digests for the K-Y, his eyes brightened. I tossed the white tube on the coffee table, put a couch cushion on the floor, and knelt on it. Without a word, I went to my hands and knees and presented my ass to him. I heard him whistle, long and low, but I didn't move. \n\nMy breath was coming fast and shallow. My ass up in the air felt cool and it was tingling. I heard him closing his laptop, moving it aside, standing. Still, I waited, feeling that tingling spreading through my pelvis. I felt dizzy and weak when I heard him unzipping his pants.\n\n\"Spread your ass open for me.\" His voice was low. Commanding. I reached both hands back, going down to the floor on my shoulders, and opened myself to him, using my fingers to spread my cheek as wide as I could. He groaned, and I heard the sound of his hand stroking his cock. I didn't look, though. I just kept my eyes closed, waiting. \n\nI let out a satisfied sigh when he knelt between my thighs. His hands pushed mine away, kneading the flesh of my ass, opening and closing my cheeks, making my little asshole wink at him. I could imagine the lust in his eyes and it made my toes curl. My pussy was a throbbing mound of heat. \n\n\"What do you want?\" he asked, using his finger to slide along my slit. I was already wet. \n\n\"Your cock,\" I murmured. This was a game we had started to play ever since he had caught on to how much I loved his cock in my ass, and it made my breath come even faster.\n\n\"Where?\" he asked as he rubbed my clit, making me shiver. He slid a finger inside of my pussy. \"Here?\"\n\n\"Nooooo.\" My voice was just above a whisper. I couldn't help rocking my hips against his hand, squeezing my pussy muscles around him. \n\n\"Where?\" he asked. I moaned when I felt him touch my asshole with the tip of his finger, probing just a little. \"Here?\" \n\n\"Yessss!\" I hissed, wiggling back, arching. \n\n\"Are you sure?\" I could hear his smile. \n\nHis fingers were spreading my pussy lips, and I knew I was wet enough for the curly red hair between my legs to be glistening with my juices. I could feel his breath on my thighs as he kissed my thighs, my ass.\n\n\"Are you sure you wouldn't rather have my tongue?\" he asked, slipping it between my lips. I groaned, feeling him sucking gently at my clit. It was pulsing between his lips, a swollen, tender thing. He knew just what I liked, licking me in wide, flat sweeps now, again and again, making me gasp. \n\n\"Jack, please,\" I begged. I was yearning for him inside of me, filling me. \n\n\"Are you sure?\" he murmured, teasing me, before he stuck his tongue deep into my pussy. I moaned, feeling his nose pressed against my little asshole. God, that felt good!\n\n\"Here,\" I whispered, pressing my flushed cheek to the carpet as I reached my finger around to show him, gently stroking my asshole. \"Please.\"\n\n\"Mmm.\" The hum of his lips against my pussy made me shiver. I knew he was watching me rub my pink, puckered hole. \n\n\"Here?\" he asked.\n\nI jumped when I felt his tongue slip up to replace my finger. \n\n\"Jack!\" I gasped. He grabbed my hips to keep me from moving away, licking my asshole in little circles. I groaned, hiding my face in my arms. Considering my current enthusiasm, I'd managed to get past most of the shame and my own prudence when it came to having his cock in my ass\u2014but his tongue!?\n\n\"Jack, don't,\" I whispered, but even as I said it, I arched my back for more. God, his tongue! He was just licking the sensitive, furrowed skin there, round and round the hole. The sensation made me weak and dazed with lust. My clit responded, even though his tongue was pressing into my ass, as if it were being licked, too. I could feel the wet heat of his saliva dripping between my pussy lips.\n\n\"Do you really want me to stop?\" he paused to ask, his thumb finding my aching clit. I shuddered, letting out a deep sigh. \n\n\"No.\" I could feel my cheeks flush at my admission. He chuckled, but he put his tongue there, more eager now, using the flat of his tongue, wiggling it back and forth over the soft crease. I groaned, rocking a little, my nipples grazing the carpet. His thumb on my clit never stopped either, rubbing in steady circles. \n\n\"God!\" I cried when I felt him make his tongue stiff, probing a little into my ass. Then he was lapping at me, again and again, faster and faster. His tongue was relentless, licking over and over that wrinkled little orifice, sending delicious waves of pleasure coursing through me. \n\n\"Baby, you're gonna make me cum,\" I warned, but it just made him work faster, thumb rubbing, tongue licking, the sounds of encouragement in his throat sending me closer and closer to the edge. I tried, wanting the sensation to last forever, but I couldn't hold back. I shuddered against him, moaning loud and long, my toes curling as I came, writhing and convulsing on the living room floor. \n\n\"Don't move,\" he said, his hands on my hips, holding me, sensing my desire to collapse. I didn't, managing to stay up on my knees, the world of light and sound fading in and out now with the beat of my pulse. \n\nI saw him grab the tube of K-Y off the table out of the corner of my eye, and then I heard the slick sound of him stroking his cock with some. That made me groan, imagining his hand shuttling along the stiff length of him.\n\nHe squeezed some K-Y against my asshole. Oooo!\u2014so cold compared to the warm, wetness of his tongue. That I had that frame of reference now made me flush again. He used his finger to work it, slow and easy, around that softly grooved passage, and then pressed it inside. I could tell when he switched from one finger to two, knowing the sensation of being stretched further and accommodating just a little more flesh. \n\nI waited, patient, while he twisted and turned his fingers in me, probing deeper into that humid cleft, and then deeper still, until I was taking them completely. \n\n\"What do you want?\" he asked again, and I smiled when I felt the head of his cock resting, throbbing, against the flexed, dimpled hole of my ass.\n\n\"Your cock,\" I whispered, my eyes still closed, lost in my own anticipation.\n\n\"Where?\"\n\n\"My ass,\" I replied, squeezing the top of his cock, trying to capture it with that winking, crinkled hole. \"I want your cock in my ass.\"\n\nHe groaned, then, and I felt him adjusting his position behind me for leverage, grabbing my hips as he pressed slowly in. I was used to this now, and knew just what to expect. I breathed deeper, down into my belly. My ass was tight, even after weeks of being fucked like this, and I still had to work to relax everything in my pelvic region. I knew made it so much easier for him to get it in.\n\nMy ass never gave any indication that it wanted him. My pussy, on the other hand, was always accommodating, trying to suck him right in the minute he presented himself at entrance. My ass, though, stayed clenched, like a pursed pair of lips refusing a bite of something bitter. I could never just receive him, the way I did when he slid inside of my pussy. I had to consciously work at surrendering to the force of his cock. \n\n\"Wait,\" I whispered, feeling the maximum stretch now, the head of him spreading me open, seeking full entrance. It took so much trust for me to let him in the deepest, most secret parts of me. And yet, I wanted it like I'd never wanted anything else. I wanted his cock to probe those unseen depths, to open me beyond where I thought I could ever be opened. \n\n\"Ok,\" I breathed, and he pressed in again, responding to me, my movements, my voice, my noises. We both groaned when he slid his cock head past that tight ring of sphincter muscle, knowing that I'd really given it up now. I was his\u2014now it was just a matter of time. \n\nHe slid the length steadily inward, and I marveled at how huge he felt, how that tiny hole stretched to accommodate him. I had knelt in the tub several times these past few weeks, putting my own finger there, feeling its tightness and how different from my pussy it really was, awed by my own ability to open to him. \n\nAnd I was opening, more and more, as he began to slide in and out, going easy with me. At first the sensation was centered at the place of greatest expansion\u2014that constricted ring of muscle hugging his cock\u2014but as he moved, and things began to loosen up, I became aware of him inside of me, plunging further and further into my depths. \n\n\"Ok?\" Jack gasped, and I heard the pleasure in his voice. \n\nWhat was it like to have something so tightly constricted, a band of heated muscle, sliding up and down the length of your cock? The difference in our experience was highlighted again for me in that moment, as I reached for the aching bud of my clit, rubbing it in easy circles. Between Jack's saliva, the KY and my own juices, I was literally soaking wet and my pussy made a sweet, wet noise as I touched myself.\n\n\"More,\" I murmured, giving him my assent. I had learned that I didn't just like my ass fucked\u2014I liked it fucked hard\u2014the harder the better. \n\nHe grabbed my hips and thrust himself into my center, making me moan and circle my throbbing clit a little bit faster. When he went deep like this, his cock rubbed some secret place buried deep in me. When he rocked there, it was like scratching some urgent itch I didn't even know I'd had. \n\n\"Harder,\" I gasped, reaching my other hand back for his hip, his thigh, wanting to shove him into me. Sensing my eagerness, he grabbed my ass and began, using all of his weight to drive into me, half-strokes, rubbing against that spot again and again. I didn't know if he knew about it\u2014I had never told him\u2014but he seemed attuned to my responses whenever he fucked me like this. \n\n\"Oh god,\" I moaned, the momentum of our fucking pushing me slowly off the cushion under me. I would have rug burn on my knees for a week. He was driving me forward, slapping into me, using his leverage to push in deeper than I thought possible, grunting with every motion. \n\n\"Oh fuck! Don't stop!\" I cried, my fingers moving like lightning against my clit, feeling that delicious pressure inside of me building. \n\n\"I can't,\" he replied with a groan, and that made me moan, too, feeling his cock like a steel rod, coring me to a searing hot depth that went far deeper than my own belly. My pussy was quivering, on the verge, but my ass was on fire\u2014a feverish, clutching tunnel of muscle pushing at him even as he drove inward. \n\n\"Fuck!\" I screamed, not caring about the kids or anyone hearing, lost in the sensation of being filled completely. Jack was sweating and so was I, the wet slap of us together the only persistent sound in the room as he fucked me and fucked me until I was gasping and begging and biting my own arm to keep from screaming any more. \n\n\"Oh baby,\" I moaned, arching my back to urge him in at just the right angle. \"Oh god, oh god, oh baby, god!\" I'm not a religious person, and I don't know if there is a god, but I think I felt him in that moment, when the sensations in my pussy and my ass met and converged into one humming vibration\u2014and then burst, like a delicious stream, flowing out in a rippling, pulsing gush, like I had become the heartbeat of the world. \n\nJack growled and swore, too, piercing me to my core with his last thrust. I could feel the swell of him as he came, the endless waves surging along the underside of his cock, right past the tight band of muscle still hugging his shaft, and spilling into my ass, filling my deepest recesses with white hot fluid. \n\nI groaned when he slid his cock out of me, at the tenderness of my flesh, and the aching hole he left when he went. He collapsed beside me on the floor, gasping for breath, looking at me through half-closed eyes. It took him somewhere, too, I thought. I didn't know if it was the same place\u2014but I knew I loved going there. \n\n\"I need another bath,\" I murmured, resting my flushed cheek against my arm as I looked at him. \n\nHe smiled. \"Yeah, let's get all clean again, so I can lick your little asshole some more.\"\n\nI flushed, closing my eyes. What was it that I loved so much about being touched there? In the transition from passion to composure, I found myself wondering, curious, and more than a little awed by my own need. \n\nI didn't know what it was. \n\nI realized that could analyze it from now until the end of time, and I still might never know. The only thing that I could really know was... that I wanted it. \n\nI gave Jack a dreamy smile as my ass quivered and I felt his cum slipping down my slit, knowing that I didn't want to think about it anymore. \n\nI just wanted to feel it, stiff and throbbing and filling me, taking me to places I had once only imagined. That was enough. More than enough."
    ],
    "authorname": "Selena_Kitt",
    "tags": [
        "couple anal",
        "anal sex",
        "rimming",
        "married anal",
        "rimjob",
        "anal oral",
        "anal cum",
        "anal fuck",
        "anal orgasm",
        "anal submission"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/unfolding-ch-02"
}
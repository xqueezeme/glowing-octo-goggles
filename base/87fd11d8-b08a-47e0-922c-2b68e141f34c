{
    "title": "Sabbatical in Slavery Pt. 01",
    "pages": [
        "Sabbatical in Slavery, Pt. 01\n\n(This story is set in a world where legalized, non-hereditary slavery is commonplace for serious crime, unredeemed debt, or voluntary self-indenture. All characters who are enslaved or have any intimate/sexual contact with slaves are 18 years of age or older. This is fiction; no one should ever be deprived of free will nor used sexually without his or her uncoerced permission.)\n\n(Note: This is a spin-off from \"Ellie May Pt. 03: Shipboard Slave Whoring.\" In that story, Professor Sarah Hollister's rival, Lindsay Williams, not only (unknowingly) abused her when Sarah was masquerading as a slave, but repeatedly badmouthed Sarah to slave merchants and investment people. Restored to her freedom and her clothing, Sarah proceeded to undermine Lindsay's chances for tenure as an academic by \"putting out the word\" that her research was weak. This led to the situation described in this story. Thanks to Joe Doe for his permission and suggestions.)\n\n(Lindsay Williams' perspective)\n\nI hate to sound like a whiner, but I've been having a VERY strange time for the past two years. I guess to explain myself, I need to go back a little farther.\n\nI love my Mom and Dad, but they're stuck in dead-end jobs as college professors, in Linguistics and Philosophy, respectively. Reminds me of the greeting card I saw once, where the cover of the card read\n\n\"This card is like a career in teaching.\"\n\nWhen I opened up the card, the inside message read \"There's no money in it.\" Too true to be funny.\n\nSo, OK: In my parents' view, I had to be an academic success and then get tenured as a college professor. The first step just took a lot of hard work and neglect of my social life: 6 years of prep school, 4 years at Bryn Mawr, 5 more years of graduate school (Chapel Hill)--most of it on scholarships, so after five years of college teaching I'd only just paid off my college loans.\n\nI said college teaching, but unlike my parents I wanted an academic field that had the potential for some real money and status. The burgeoning new field of Slave Studies, sometimes referred to by the euphemism of \"Human Resources Exploitation,\" seemed to be my ticket. I'd published half a dozen articles and one uninspiring book on various business aspects of slavery, working my way up to associate professor at U Mass--that's University of Massachusetts at Amherst, to be clear. Next, I needed to be selected for tenure and then full professor, plus develop business contacts to sell my expertise.\n\nOne of my problems was that the slave industry is a very chauvinistic world--male slaves may be used as laborers as well as gigolos, but female slaves, regardless of their brains or other skills, are evaluated primarily for their sex appeal, as three moist holes connected to boobs, butt, and legs that exist solely to entertain their masters or mistresses. That means that slave merchants evaluate all women they meet as sex objects and more explicitly as \"slave cunts.\"\n\nI don't want to sound arrogant, but I was (and am) a reasonably-attractive woman: high cheekbones, generous mouth with straight teeth, chestnut hair, 38D bust and narrow waist, everything kept firm with frequent exercise. Even more than other men, slave merchants develop vision and hearing difficulties in the sense that they stare at my chest for 20 minutes and never hear what I'm saying to them. Sarah Hollister, that pretentious blonde biotch who teaches slave studies at \"Haavaad,\" somehow used her appearance to get their attention and then talks just as crudely as do they, in order to convince them she's serious about slave business. To give you one example, one of Sarah's best-selling books on the slave business was titled Profit Per Pussy. Need I say more? Somehow, I had to overcome this sexism and show these self-propelled penises that they should listen to what I said, not just stare at how I looked.\n\nTwo years ago in the spring I finally got my big break, a chance to impress all the wealthy slave merchants and investors. Sarah Hollister suddenly decided she was too busy to spend spring break with the high rollers on board the \"Yo Ho Ho,\" a specialized passenger ship that, during the ten days of spring break, cruised off Cape Cod. This cruise was an early test of the concept that northern sex slaves--either genuine slaves or skanky young women who enjoyed PRETENDING to be slaves--could be marketed on a no-holes-barred [pun intended] cruise that was, in effect, a floating brothel. Because they were slaves who couldn't refuse to screw free people, these hos (real and pretend) were not technically prostitutes selling their bodies. They could spend the whole cruise servicing the paying passengers--passengers that, in this case at least, included a number of slave merchants and bankers, the people I most needed to network with. And as far as I was concerned at the time, that's all these collared sluts were good for--so many cunts, asses, mouths, and tits all belonging to brainless, horny whores who existed to entertain their betters.\n\nMy job was to implement this plan--given an over-supply of well-endowed naked bimbos of various genders, I had to manage the entertainment in a way that amused the guests, impressed the investors, and still turned a profit.\n\nI did pretty well at it, too. I didn't hesitate to show the money men that I could be just as cruel and dominant towards slave bimbos as they were. To be honest, it was kind of fun to belittle and whip a sex-obsessed bubblehead while driving her to an involuntary orgasm. The sense of absolute power I had over these cunts was addictive.\n\nMy main plan was to transship and sell off the surplus pussy while we were on the high seas, sending some of these brainless blonde bimbos to be sold to Middle Eastern harems. But somehow, that damn Sarah Hollister found a way to sabotage me even though she didn't even come on the cruise. One of the skankiest slaves on board, a redhead who went by the name of \"Flame\" and had a tramp stamp and slave brand to match, was on my list to be sold. The problem was that Flame not only belonged to Sarah but somehow had SARAH'S OWN SLAVE IDENTIFICATION NUMBER bar-coded on the inside of her lower lip. That meant that we didn't have clear title to sell her, and (conveniently) Sarah wouldn't answer her telephone to give us permission to dispose of the slut, even at a huge profit for the owner (Sarah). One of the biggest slave merchants in the business, Jake Henry, lectured me about the risks of improper sales, so I lost more ground than I gained in networking with the high rollers.\n\n*****\n\nI came home from this cruise frustrated and embarrassed. And THEN I found out that the U Mass tenure committee had failed to recommend me for tenure that spring, my fifth year teaching and the first of three opportunities I had to make tenure before I had to look for work somewhere else, my academic reputation permanently tarnished by being adjudged unworthy of tenure.\n\nI suspected that Sarah had sabotaged me, but when I politely asked Alistair Buchanan, the silver-haired chair of the tenure committee, what I needed to improve my chances the next year, he turned red in the face and then said that my work \"did not show an understanding of the psychology of slaves.\" He even had the nerve to cite Sarah as an example of someone who DID understand how slaves thought. Because of the outmoded idea that slave whores were still people, anyone who didn't show empathy and understanding for their \"plight\" was (according to the political correctness police) unqualified to teach the subject.\n\nI had to admit that he had a point. Part of what made Sarah Hollister so effective was that she designed processes, such as the one used by the Big D Slave Market in Dallas, that psychologically manipulated fresh-caught slaves to make them not only docile but eager to act like the brainless sluts they were born to be. The committee was right--if I could better understand and empathize with slaves, I could be far more useful as a business advisor, let alone as a slave studies instructor.\n\nWell, the first step was obvious--consult with a real expert. I actually knew one whom I had met at several conferences--Nicola (Nikki) Sheldon, co-author of the classic text, Psychological Impact of Slavery and a practicing slave psychiatrist who worked with several slave markets and similar businesses in Texas. I telephoned her, told her my basic problem, and offered to pay her standard consultation rates for advice.\n\nShe giggled with that infectious laugh that made her everyone's favorite shrink. \"No need for that, Lindsay--at least not just to talk to you on the phone.\" She paused, then became much more tentative in her speech. \"The trouble is, you won't like the advice I have to give you. Sweetheart, the only way to really understand how a slave thinks is to BE a slave, and for long enough to feel the helplessness.\"\n\nShe went on to tell me an amazing tale. Somewhere in the back of my mind, I recalled that the American Psychological Society required anyone who wanted to qualify as a slave psychiatrist to spend 180 days in a collar. Nikki described the emotions she had experienced when she self-indentured herself straight out of medical school--terror, helplessness, horror, humiliation, and sexual arousal.\n\n\"Wait a minute,\" I interrupted. \"You actually got AROUSED by being a slave? I thought that only happened to brainless bimbos.\"\n\nAfter a pause, she replied. \"Well, YEAH. I think most newly-caught slaves get aroused. They are suddenly aware that they can be forced to perform ANY sex act in ANY hole for ANYone, no matter how debasing the act may be or disgusting the people involved. That means that all their sexual fantasies and fears run amok inside their heads. That's how slave markets like the Big D can arouse a slave so that she'll be auctioned off for top dollar.\"\n\n\"Damn Sarah Hollister, anyway.\" I muttered.\n\n\"Yup, Sarah Hollister designed that process. Look, Lindsay, I've never talked to Sarah professionally--and if I did talk to her, I'd be bound by professional ethics not to reveal what she said. But, when I read her writings it's OBVIOUS to me that Sarah has worn a collar at some point in her life--it's the only way to explain what she knows and how she describes turning slaves into sexual servants.\"\n\nI took a moment to reply, slowly. \"So, you're telling me that at least part of what makes Hollister so effective is that she's actually BEEN a sex slave? How come nobody has ever called her out for that, tried to embarrass her?\"\n\nNikki sighed, \"I hear the North is a different place, but down here in slave country that are so many influential women who once wore a collar that you'd better NOT try to embarrass them--no telling but what the person you're talking to was herself a slave, either outright enslaved for crime or debt or went through Broadstone or one of the other schools that train consorts.\"\n\nI didn't like where this was going, but I might as well get it out in the open. \"What I hear you saying, Nikki, is that the best way for me to understand slavery is to become a slave myself.\"\n\nNikki came back, very gently. \"Afraid so, girlfriend. The minimum time for enslavement in Texas is 180 days, because the slave merchants have convinced the legislature that they can't make a profit in any shorter period. Even then, most owners won't spend the money to train a new slave properly unless they're going to wear a collar for more like a year instead of six months.\"\n\nShe had to have heard my sharp intake of breath. I blurted out, \"I'm signed up for a sabbatical that runs for 14 months, from June this year through August of next, so I can find the time, but it still seems terrifying not to mention demeaning.\"\n\nNikki: \"I'm not going to lie to you. This is really scary stuff and living through enslavement may have a traumatic effect. Still, just the POSSIBILITY of being a slave has already shown you some of the stress involved, so imagine how much you'd learn if you actually indentured yourself for a year.\"\n\n*****\n\nWe agreed to discuss it again in a few days, after I'd had a chance to think about her suggestion. Truth be told, I had a hard time thinking about anything ELSE. I had always regarded slaves as commodities, or at most misguided bimbos who deserved both my contempt and my pity. The thought of ME stripping slave naked and surrendering my body to be used by some uncouth slob with more money than sense was terrifying and disgusting.\n\nI found myself re-reading both Nikki's books and Sarah's writings and realized that my favorite slave shrink was right--at some point Sarah MUST have been a slave to have learned so much about how slaves thought and acted. Well, if that arrogant bleached-blond slut could handle being a slave, so could I! In a rush, before I could lose my nerve, I called Nikki back and asked her to arrange things, to draw up a one-year indenture agreement designating me as her property. That also involved her making an appointment for me, two days after the end of the spring term, to surrender myself at an office of the Texas Agriculture Department, followed by my auction at a slave market. I would send her a check to cover her expenses in doing this, and she would hold my sale price until I regained my freedom (gulp.) I tried to suggest that she keep the money in return for her trouble, but she said that would be unethical. (I don't know how that girl ever made any money--oh, wait, she MARRIED money. Sorry; I get snippy too easily.)\n\nShe promised to keep things as close hold as possible, but reminded me that, once I did this, my name and photographs would be in the National Slave Registry. She asked my permission to tell only one person--her husband, who could help because he had contacts in the business. Realizing I needed to trust her, I agreed without asking why. Instead, she told me to get into physical shape for the experience--ramp up my exercises, take frequent slave yoga practice under a genuine former slave wrangler, and (just before I flew down) get my hair done and my entire body (especially my pubes) waxed so I would get the best possible slave grade and sale price. Things I never expected to be worrying about, but Nikki was right--the higher the grade and price, the better my slave life would be.\n\nI stayed in a hotel room for my last night of freedom; I hate to admit it, but the prospect of being a naked slave led me to masturbate until I fell asleep. Then Nikki picked me up early the next morning. I signed a power of attorney giving her control over me, but I was secretly shaking at my vulnerability. Then it was off to the Agriculture Department office. Even though she had made an appointment for my indenture, we had to wait--Nikki had warned me that this was SOP, designed to begin the process of reducing me to sub-human level. I noticed that the secretary pointedly ignored me and talked only to Nikki while we were waiting. The whole time we waited I was terrified, wondering whether I could really commit myself to being the kind of mindless sex object I had always despised.\n\nFinally, we got to see the appropriate official, a Mr. Shively, a middle-aged pot-bellied bureaucrat with a goatee and thinning hair. Nikki presented him with both her power of attorney and a one-year contract for slave indenture. At least, thank heavens, both documents specified no foreign travel or sale--once in, say, a Persian Gulf country, that one year limitation could be converted to a lifetime in a collar. Shively looked it over, then stared at me coldly and asked,\n\n\"You were a college professor?\" (I had foolishly listed my real occupation on the application.) \"Well, la-di-dah. You understand that, for the next 365 days and nights, you will be required to act as a slave under the laws of Texas?\"\n\n\"Yes, Sir,\" I said, struggling not to hyperventilate. After a few similar questions, he had both Nikki and me sign the indenture contract. As soon as he finished, Nikki looked significantly at me, and I knew what I had to do.\n\nI hastily stripped naked in front of this complete stranger, passing my clothing piece by piece to Nikki, who had just become my owner. Mr. Shively leaned forward in his chair, watching closely, with a smug, satisfied grin on his face. He'd doubtlessly stripped a lot of new slave girls in his office, but I got a feeling that he was the sort of man for whom this never got old.\n\nMistress Nikki stuffed each lost piece of my modesty into a large canvas bag. Blushing deeply, completely naked, and (surprising myself) feeling very horny and sticky down below, I knew enough to assume the position called \"Present\"--legs slightly apart so that everyone could see and smell my arousal with hands behind my neck, which in turn caused my breasts to jut forward. I was again surprised to notice that my nipples were rock hard, sticking out from my bosom like the fuses on the tips of bombs. And I felt like the bomb about to go off!\n\nNikki had warned me what to expect next; she ordered \"collar\" and \"back hands\" as she installed first a heavy leather collar and then a pair of cuffs behind my back, which again pushed my chest forward. At her instruction, I shuffled on my knees around to the other side of the desk, where Mr. Shively had already released a respectable-sized dick. My first sex act as a slave--undoubtedly the first of many, I thought. Determined to get it over with, I used my tongue to lever his prick into my open mouth, then began doing everything I could think of to complete his arousal.\n\nIt must have worked, because in about two minutes he mumbled \"GOOOD slut\" and grabbed the back of my head, forcing yet more of his rod into my mouth. I almost gagged when it hit the back of my throat, but fortunately I had aroused him so much that he blasted several squirts into me in what seemed like seconds. Remembering my instructions from Nikki, I managed to retain at least part of his jism on my tongue; when he released my head I sat back and stuck my tongue out to display the loathsome load. Fortunately, he didn't hesitate more than a second before nodding permission, which Nikki reinforced with a command to \"swallow it, bitch.\" It was as salty as I had expected, but at least, I thought, the first of many demeaning experiences in a collar was behind me. My first taste of slavery.\n\nI felt Nikki--excuse me, Mistress Nicola, now--fastening a leash to my collar, then ordering me to stand and heel. What followed was the legendary walk of shame for new slaves--being led through a cluster of office cubicles while state employees jeered at and toyed with my naked, helpless body. It was terrifying, and I was incredibly thankful that my new owner set a brisk pace, almost dragging me through the maze to reach the elevator. Once the door (finally) closed to hide me from all those sneering free people, Nikki gave me a tight hug, saying she thought I needed it. Boy, was she right! I was humiliated, horrified, helpless--and absurdly aroused.\n\nThe elevator door opened at the main floor, where Nikki towed me into the ladies' room, freed my wrists, and produced a bottle of mouthwash to cleanse the taste and smell of cum from my breath. Then she told me to use the toilet and wash my hands, after which she handed me a precious chocolate bar as a final snack. Next, she resumed her \"tough guy\" act, cuffing and leading me butt naked out of the restroom, down the front steps, and around the corner to her parked car--all in broad daylight in a crowded city with what seemed like hundreds of people gawking. Once at her car, she moved my cuffed hands from back to front, had me sit in her car, then draped a blanket and clipped my shoulder belt over me. The woolen blanket was scratchy but was a blessed respite from my nude vulnerability.\n\n*****",
        "She drove us over to the vast parking lot around the Long Horn Slave Market, a place that kept her on retainer as a consulting psychiatrist. She had told me that she intended to have me slave graded and auctioned there, precisely because she had some control over what happened in this place. Of course, that didn't mean that I had any control! Once again, I suffered the acute subjugation and sense of helplessness of being led, nude and helpless, in public. There were only a few pedestrians in the parking lot, but my excited imagination thought every one of them was enjoying the view of my naked exposure. But what I was most acutely conscious of was the bag that contained my clothes and purse was still locked in the trunk. Correction: the bag that contained what used to be my clothes was in the trunk of my new owner's car.\n\nAs we waited in line to check in, Nikki reminded me that I had to be completely obedient while arousing myself whenever I got the chance, in order to get the highest possible slave grading score and sale price on the auction block. \"No modesty for slaves,\" she urged me in an undertone--\"jill off every time you get a chance and try to enjoy that sense of being a defenseless sex object--that's your best chance!\" By now, I had sufficiently adjusted to my situation not to even blush at the idea of masturbating in public view; I meekly agreed \"Yes, Mistress\" and tried to think myself into a horny state. I was surprised at how easy it was to do--by the time we reached the head of the line for in-processing, I could feel large patches of sticky wetness on my thighs. Noticing that, Nikki cooed encouragingly \"GOOD slut\" at me.\n\nI had to kneel, thighs spread wide to display this evidence of arousal, while Nikki talked to the huge but shapely female slave wrangler who in-processed me for grading and auction. I'd often had to deal with slave wranglers, most recently aboard the \"Yo Ho Ho,\" but this was the first one whose very existence intimidated me--I was naked, spread wide, and cuffed on my knees while she--her nametag said \"Willow\"--loomed over me. Quite apart from her boots and a belt hung with disciplinary weapons (Taser, rubber strap, handcuffs, etc.), she was so large and I was so helpless that I was terrified. At least she seemed to be in a good mood, gossiping with Nikki as she in-processed me. The only time she addressed me directly was to make some comment to the effect that my nipples and damp thighs said I was really turned on by being a naked slave. (I later realized that she was right about that, although at the time I was too horrified to recognize that my horniness was not just self-induced but actually natural. This was one of the lessons I filed away for future reference--even though I had been a self-confident, independent free woman, the very fact of being a nude, collared slut, available for anyone's use, was intensely arousing. That was true even though \"Willow\" did not threaten me with sexual use, nor was I attracted to her, just intimidated by this beautiful, powerful, superior CLOTHED being. Clothes do make the man or woman, and lack of clothes helped make me a subservient whore. So much for my sense of superiority to slave women I had known and casually tormented!)\n\nMistress Nikki had apparently completed the business of turning me over to the market. She leaned over and gave me a final hug, promising to check on me as I went through my processing. I felt completely bereft, but before I could begin to cry I was interrupted by a male voice telling me to \"collar.\" Since I was already kneeling and my wrists were restrained, all I could think to do was incline my neck, exposing it so he could remove the simple leather collar I'd received from Nikki and replacing it with the heavy, battery-powered shock device with two sharp points protruding into my skin. It felt very tight and heavy, but I found myself being helped to my feet, still cuffed and slave naked. Nikki reclaimed her collar, gave me a sad little smile, and walked away.\n\nI quickly dropped my eyes when I realized I was looking at the face of a young guy, dressed in wrangler's jeans, boots, shirt, and equipment belt. His nametag read \"Frank.\" He WAS kind of cute but also appeared very young, like one of my undergraduate students. Ordinarily, I would have either ignored him or, if he were suitably polite, deigned to answer a question before turning away. Now, however, he was in the power position and I was a quaking, aroused, bound slave under his control. At least he smiled very briefly, squeezed one of my breasts, and ordered me to\n\n\"Heel, slut.\"\n\nWith no choice in the matter, I dutifully followed in his wake while he walked me through a pair of double swinging doors to a wooden platform that was already crowded with half a dozen naked figures, both male and female. Most of them wore a purple-banded collar, which Nikki had told me indicated a free person who was temporarily under slave discipline, usually for the purpose of slave grading. I vaguely remembered that the collar Master Frank had put on ME was red, indicating a pleasure slut. Crap--why did I ever think this was a good idea? Too late now.\n\nThe wrangler who controlled me released my wrists, told me to mount the platform, and hurried me along with a sharp slap on my right buttock. My first instinct was to whirl around and demand to know how he dared touch me, but fortunately I remembered that I--like a little fool--had given EVERY man the right to touch me intimately any way and any time he wanted. How dumb could I be?? If Nikki was correct that Professor Hollister had undergone this gauntlet of helplessness, I would have to treat the professor with more respect.\n\nFortunately, the wrangler in charge of the group, another hulking, massively-endowed woman (this time African-American) began snapping out block commands and I started obeying automatically. Thank heavens Nikki had insisted that I practice slave yoga before coming to Texas! Now I found myself flaunting my body every which-way--thighs apart, breasts swaying, butt upthrust, twerking my hips--in the most obscene, suggestive manner, all while begging an unspecified master or mistress to \"Fuck my brains out,\" \"buy me and stuff all my holes,\" \"fill me with your huge cock and pound the crap out of me,\" and so on. I had been angered and mortified when required to practice this in Massachusetts, but now as a genuine slave that subservient attitude seemed perfectly normal. Almost unconsciously, I found myself trying to entice \"Master Frank\" with my undulating body, and it all seemed perfectly normal that I should try to gain the sexual attention of free men. Part of me was doing this consciously, trying to follow Nikki's advice about making myself desirable for slave grading, but a large portion of my mind found this normal and even exciting. I realized with a start that slave mind had already invaded my consciousness, depriving me of any resistance to the idea that I MUST be an eager, obedient sex object.\n\nThe final command brought a row of collared cavorters, including me, to our knees, thighs apart and hands interlocked behind our necks, three feet from the edge of the battered wooden platform. Almost on command, the slave wranglers who were in charge of us stepped up onto the platform, unzipped their jeans, and presented half-erect dicks for our worship. Master Frank ordered \"suck cock, slut,\" and I felt no hesitation about doing something that, before today, I had only done reluctantly for guys I really liked. I found myself licking and slobbering all over his (fortunately clean) shaft, frequently withdrawing and then lunging forward, trying to cram more and more of that large, warm, tasty shaft into my mouth and down into my throat. I felt his hand cupping the side of my head, gently guiding but not forcing me to abase myself before him. After what seemed like only a couple of minutes, I heard him remark, quietly, \"Good job, cunt--swallow my cum,\" and a moment later my mouth and throat were flooded with several large squirts. I barely remembered, again, that I had to retain some of his jism for display. So my mouth was crowded for a moment until he allowed me to lean back, releasing his shaft and then sticking out my well-coated tongue for his inspection. With his permission, I hastily swallowed what should have been a disgusting goo, and then I voluntarily, gently licked every inch of his cock and ball sack clean. Only then did I realize that I had been focused totally on pleasing him rather than my usual silent litany of complaints about how arrogant men were to expect women to submit to the almighty prick like that. Yup. Slave mind had set in after only about four hours in a collar--where would I be mentally after a year? This experience was excruciating, but I had to admit that Nikki had been right--that was the ONLY way to understand slave psychology.\n\n*****\n\nA few minutes later, once again cuffed, I was marched over to a row of complicated cameras and computer set-ups. Master Frank guided me with his hand holding my buttock while his fingers were well up into my butt crack, goosing me and in one case casually fondling my anus. The horrifying thing was, I actually ENJOYED this intimate invasion by a college-aged kid (the kind I regularly belittled in class) who temporarily owned my body, and I automatically put an extra wiggle into the ass that was under his control (and hand).\n\nIt goes without saying that my body was still at a boil when Frank posed me in various obscene positions, all the while fingering my nipples, clit, and anus to keep me excited as he photographed me. (When I looked at the photos later, after regaining my freedom, I was horrified and yet aroused again by the sight of these pornographic displays: Full frontal in the display position, then on my widespread knees, one hand spreading my damp labia while the other cupped an erect breast and I stared at the camera with a vacant, lustful gaze that seemed to beg to be fucked, and finally a rear (in both senses) shot, my head on the floor, buttocks raised high, hands back to spread my cheeks and display my dripping pussy and winking brown butthole.) After that, Master Frank numbed the inside of my lower lip before inscribing a Slave Identification Number there, then continued to pet me like a loyal bitch while he entered my data into the national data base. I emerged from my lustful haze just long enough to recall what Nikki had said about how many people--undoubtedly including Sarah Hollister if she heard I had self-indentured--would have access to this ultimate proof of my enslavement and humiliation. The thought was humiliating and yet strangely exciting. Frank also gave me the same advice I'd received from my new owner that I should play with myself to heighten my arousal for better grading and sale.\n\nNext, I enjoyed feeling Frank's hand goosing me as he walked me over to the tables where slaves (real and temporary) were spread-eagled on their backs for public inspection and groping. Before I knew it, I had joined them, even more exposed and helpless than I had been all morning. And THEN the first group of gawkers (anyone who had 50 cents and could prove to be over the age of 18) appeared.\n\nIt's a good thing that Frank had devoxed me, spraying a chemical down my throat that deprived me of speech. For the first few minutes on that table, my sense of outrage (which I should have checked at the door when I self-indentured) overruled my fear. Young adult males, most of them as pimply-faced and loathsome as my undergraduate students at U Mass, casually fondled and toyed with me, pinching my clit and nipples so hard that they actually hurt, all while talking casually about how much fun it would be to fuck, \"choke,\" and \"cornhole\" this \"little whore.\" Without the hovering presence of handlers such as Frank, I'm sure a few of them would have stepped between my widespread legs, pulled out their cocks, and made good on their boasts to penetrate me.\n\nParadoxically, the young women, most of whom barely touched me, were even more humiliating. They giggled and snapped bubblegum while disparaging me as a \"skank,\" \"slut,\" and \"whore\" who was obviously \"gagging\" to be used in the most humiliating manner imaginable. And when I blushed with embarrassment, they pointed THAT out, too. I could easily imagine myself being one of those women a few weeks ago, convinced that slaves were sex-crazed bimbos who were eager for whatever sexual use they suffered. Trouble was, those women were right--the combination of my exposed situation and my self-induced arousal had transformed me into a brainless, cock-obsessed \"ho\" who, up until they pointed it out, was captivated by the idea of having guys plunder all her openings. In the far recesses of my remaining braincells, I recorded this as the kind of lesson that Nikki thought I needed to learn. The trouble was, this was only day 1 of 300-plus days I had obligated myself to spend in a collar--too bad I couldn't stop with what I had learned after five hours and go back to Massachusetts!\n\nThen the real slave merchants appeared, identifiable by their bored looks and constant reference to tablets containing our data. A few of them finger-fucked me or gently touched my most sensitive parts, but I knew they were assessing my arousal rather than enjoying themselves at my expense. I was amazed to think that men could become so habituated to the sight of nude women, spread-eagled and at their disposal--so habituated that (to judge by the front of their jeans) they didn't even get aroused.\n\nMy \"time on the cross\" (apologies for the sacrilege) came to an end; the last viewers departed and Master Frank released me from the table and goose-walked me back to another anonymous cage, which I shared with two other red-collared women who had just come off display. He sprayed the antidote down my throat, handed me a bottle of water, and reminded me to keep jilling off in preparation for the afternoon auction.\n\n*****\n\nUpon his return, Frank was all smiles, informing me that I had been graded as Prime Minus, which meant a higher profit for both my owner (Nikki) and the Long Horn when I was sold. The idea of being sold as a sex toy finally penetrated my mind. Frank could see that I wanted to say something but he cut me off, telling me that if I started talking I would just end up de-Voxed again, from which I might not recover for days. All my life, my mind and my voice had been my primary tools to control my life, but this time they were useless. I felt even more helpless than before but resolved to redouble my masturbation if only to distract myself from the ordeal to come.\n\nThis time, when Frank re-cuffed me and moved my Prime-rated slut body to the waiting line for the afternoon auction, he took advantage of the situation to THOROUGHLY fondle and grope me at the beginning and end of our short trip. The sensation of this young man casually invading my body was astonishing--I almost came on the spot! For the next hour, as the line of human sacrifices moved slowly towards the entrance to the auction block, I tried to keep myself as aroused as possible, aided occasionally by Frank praising me (\"You're a hot little whore\" and the like) and occasionally fondling me again. When the slut in front of me disappeared through the door to be sold, he even told me to rub myself off on his leg. Like the bitch in heat that I had become, I frantically humped his leg, enjoying the friction as I left a damp strip on his jeans. All the time he quietly reminded me of what I had to do and say when it was my turn to be sold.\n\nThat turn came with terrifying suddenness. Through the door, we heard a baritone voice announcing, through a booming public address system, \"Going three times, SOLD to number 42, for 130 thousand dollars!\" Frank pushed open the door, whispered \"Make me proud, cunt,\" and propelled me through the door with a loud slap on my buttock.\n\nNo time to think now. I recovered my balance, dashed to the center of the of the stage, and assumed the Present position, displaying my entire body to the largely-invisible audience beyond the lights in my eyes. \"Please, Masters, buy me and fill all my holes,\" I half-shouted, half-begged. It was a shock to realize that I really DID want to be degraded and used sexually by some faceless but (for me at least) all-powerful man. I didn't want love, respect, or friendship--just fucking!\n\nThe next five or six minutes were a blur. Out of the corner of my eye, I saw the auctioneer, a well-muscled, buff African American. The irony of a white woman being sold into slavery by a free Black man struck me as infinitely amusing, but I had no time to think about it then. The auctioneer announced that I had been graded Prime Minus, with an indenture contract for one year beginning today. After that, he ordered me into various block positions in rapid fire, adding fatigue and panting to my arousal--I imagine the panting made my breasts rise and fall, but I was too busy being completely obedient and visibly horny to think about it at the time.\n\nOnce, he snapped a whip that barely grazed my bouncing bottom. I shied and squealed in response, but in retrospect I realize he had gone easy on me. Still, the mostly-unseen audience laughed at my painful dance, and between the glare of various lights I saw Nikki sitting, watching me with great attention but only giving me a thumbs-up when we locked eyes. For the first time since I mounted the platform, I felt embarrassed, knowing that (in Nikki's mind at least) I had permanently destroyed my image of the poised, confident professional woman. Then it was on to more obscene block moves, showing off every inch of my toned, nude body. I concentrated on the commands the auctioneer gave me, in between his patter of constantly-rising bids on the unlimited use of my body for 12 months. The situation, my naked submission and total subservience to these men--it all added up to a rising sense of arousal. I couldn't believe it--I was actually getting off on being sold as a sex object!\n\nThe dream-like experience of being a collared exotic dancer came to a sudden end, in almost the same words that had started my auction, \"Going three times, SOLD! To number 17, for 88 thousand dollars.\" The sound of those words was the last impetus I needed, as I crashed into an orgasm, actually shooting fluid onto the auction platform. The paroxysm left me even more breathless and dizzy than before, barely able to keep my balance. Who would have thought that being sold as a slave would give me the greatest climax of my life? Another idea to file away; I began to understand why slave whores were so constantly horny, begging for their next ration of cock.\n\n[If you're wondering, the girl before me was probably enslaved for life; $88,000 was an astonishingly high price to pay for only one year of my total service, and I began to worry about what I would have to do to justify the cost.]\n\nIn a daze, I came to a halt and had enough presence of mind to move towards two wranglers, one of whom I recognized as Frank, beckoning me to the edge of the stage. They lifted me down effortlessly, cuffed my hands again, and peeled down my lower lip to display my newly-installed bar code to the seated clerk who was recording the sale. Then Master Frank marched me out of the noisy, bright auction pit into a corridor that was (by comparison) silent and dimly lit.\n\n*****\n\nHe congratulated and praised my performance as we moved down the hall, petting me like a prize bitch (which I was, in a sense) but then I realized where we were headed. I could feel and even smell the heat as we approached a door decorated with a 9-inch wide burned-in imprint of the Longhorn logo: an outline bull's head shaped like an isosceles triangle with two long, hooked horns sticked out of the sides. I had often seen slave women with brands on various parts of their rear ends, but I suddenly realized that this was about to happen to ME. The thought of my ass being fried like that was terrifying. My bare feet scrambled, trying to find enough traction to halt my forward progress towards this living hell.",
        "Master Frank held me firmly, his face a mixture of impatience, lust, and compassion. \"Come on, cunt, you've got to do this. I'm sure it's scary but think about how you'll look afterwards. Having a major slave house's brand, denoting you as Prime pussy, is a mark of quality you'll wear proudly for the rest of your life. Even after you're freed, everyone who sees that brand when you wear a bathing suit will know that you're a first class sex object who sold for a metric ton of money. It's gonna hurt now, I won't lie, but your new owner wants you to wear it, and this is your first chance to please your new Master. Wearing that brand will be a source of pride for the rest of your life. Think of it as being an Ivy League, Phi Beta Kappa slave, proof that you're one of the finest pieces of ass in America. Heaven knows I'D love to possess a prime-rated pussy like you.\" He held me for a moment as I gradually ceased to struggle, feeling his erection as proof of his words. He was right. I dimly recalled seeing the Big D brand burned into the shapely backside of Sarah Hollister's slut Flame, who had certainly been popular with the customers. This would be the ultimate proof that I not only understood slave psychology, I was also a match for the finish slave meat in America. Come on, girl, I told myself--you've decided to be a slave and gone through the agony of grading and sale, so why not be the best?\n\n\"Yes, Master,\" I meekly replied, relaxing in his arms. He promptly turned me around and walked me into the branding room.\n\nThe heat and smell struck me like a wall of sensations, but I grimly took control of myself. Frank helped the smith strap me down, immobilized, to an elaborate framework that held every limb, and especially my buttocks, immobile. I almost lost it when the smith, grinning like a fool, held a glowing Longhorn-shaped brand within a few inches of my face to show me what was about to happen.\n\nHe remarked to my handler, \"I'm short handed today--how'd you like to hold the branding iron handle to her twat so she can wank herself before I do the deed?\"\n\nBehind me, I hear Frank laugh. \"I'd much rather fuck her, if you want to know the truth--she's the finest piece of pussy I've handled in several months, even though she's older than most freshly-caught sluts.\" That crude compliment almost made me miss his concluding sentence, \"But, yeah. She's been a perfect little bitch, very cooperative and sweet, and if I can help her get off one more time it should make the branding easier for her to handle.\" Amazing--who would have thought a slave wrangler actually cared about how the slaves felt?\n\nA rough wooden handle rubbing against my damp labia and clitoris produced a friction that soon re-ignited my arousal. Or maybe it was just the warm glow I felt from Frank's comments, with slave mind motivating me to please him by climaxing again, less than ten minutes after coming at the moment of slave auction. I was soon conscious, but in a dreamlike state, focused on getting off for Master Frank. \"See that?\" the smith commented on my squirming. \"A real pleasure slut like this one can't help humping the branding iron--it's a sign of their true nature!\"\n\nMy orgasm came quickly and full blown, but less than 10 seconds after I clenched and released, I felt the firm impress of an enormously-hot metal object diagonally across my ass cheek. My mind, caught between pleasure and pain, screamed and cried at the same moment; my new owner later showed me the photograph of me at that moment, with erect, pencil-eraser nipples and a bizarre mixture of emotions on my face. At least the orgasm had gotten me over the trauma of that horrible burning, although a minute or so later I felt a new, more focused point of pain. (I later concluded, looking at my lacerated backside in a mirror, that this second pain came when the smith added a \"P\" for prime immediately above the bovine skull of the main brand.)\n\nI was weeping and moaning, but someone--perhaps the smith, perhaps Frank--sprayed the charred area with a painkiller that partially deadened the pain. A minute later, I felt another cooling spray that was apparently liquid bandage to cover the affected area. The pain receded to a dull throbbing, while Frank offered me two ibuprofen and a swallow of water. A stray thought came to me: other students had frequently described me as a \"smart ass\" while I was in school, but this was the first time (other than rare spankings) when my ass had literally smarted as a result of my accursed pursuit of knowledge.\n\nNon-medical people like me tend to forget that the words \"trauma\" and \"traumatic\" refer to tissue damage. Somewhere in an undergraduate psychology course, I had read about the concept of \"traumatic learning\"--that is, if you suffer tissue damage, it tends to hardwire your mind to avoid ever repeating that situation or mistake again. Lord knows that I would do ANYTHING to avoid another enslavement and especially another branding. As it was, both my mind and my butt were permanently marked--scarred--by the experience of slavery. Even if I were released at that moment and teleported back to my classroom, I would never be the same.\n\n*****\n\nFrank gently walked me out of that den of horrors to an empty cage, where he released my wrists and gave me another bottle of water. \"The sign on this cage tells everyone you've just been branded, so they shouldn't expect you to kneel to them just now, although when you get shipped out of here, you'll have to kneel in a poodle cage. For now, just bow very deeply when a free person comes into the cage, got it?\"\n\n\"Yes, Master. Thank you for taking care of me.\"\n\nHe looked momentarily surprised at the unnecessary words, but then responded, \"You're welcome, cunt. Good luck with the rest of your service; whoever bought you is a lucky man.\" And he left abruptly, pausing just long enough to padlock the cage door and then walking down an echoing corridor and out of my life.\n\nI don't know how long I stood there alone, ass still hurting. I do recall that I finished the water bottle and even painfully spread myself over a piss grate to relieve myself. I was just wondering if I had been forgotten when I heard two people walking rapidly towards me--and one of them had shoes that sounded much less substantial than the heavy boots used by wranglers. A moment later, another wrangler appeared with a man wearing a visitor's tag; the wrangler unlocked the cage and left the visitor looking me, sizing me up as I bowed. I was acutely aware that I was not only bedraggled and limping but stark naked in front of someone who did NOT work for the slave market, but for some reason I trusted him.\n\nThe visitor was about 45 years old with slightly greying dark hair. He was well over 6 feet tall, wearing a suit with a smile on his face. A handsome face.\n\n\"In case you haven't figured it out, I'm your new owner.\" He began, rather abruptly. \"How's the brand feeling?\"\n\n\"My ass is still on fire, Master.\"\n\n\"Sorry about that, but I decided you needed a brand to get the full slave experience. Besides, being badged makes you more marketable. I know your number is 6627,\" he continued, \"but tell me your name.\"\n\n\"It's Lindsay, Master.\"\n\n\"That's what I thought.\" Came the surprising answer. \"Truth time, Lindsay--my name is Paul Sousa, and you may recall that my wife, Nikki, asked your permission to tell me why you were self-indenturing. Am I correct that you did this to understand slave psychology, just like Nikki did a few years ago?\"\n\nWhoa, I thought--where is this going? I knew that I was expected to say something even though I had no idea what, so I settled for \"Yes, Master.\"\n\n\"Just because I'm married to Nikki doesn't mean I'll go easy on you,\" he cautioned me. \"Her parents asked me to rescue an innocent young woman who had foolishly self-indentured, but YOU know, or should have known, exactly what would happen to you because you teach slavery, right?\"\n\nFrowning, he continued, \"You even consult with slavers advising them on ways to maximize their profit on human suffering.\" As he talked, Master Paul gently and then more firmly hefted and fondled my breasts, flicking my nipples. I SHOULD have been outraged by this familiarity, but I recognized that my boobs and every inch of me now BELONGED to him, absolutely. Still, his next comment shocked me.\n\n\"These tits will look really good with some whip marks on them; same for your ass. Your breasts have nice big nipples; my clients will enjoy using clamps, vises, stretchers, electric shock clamps, weighted clamps, forceps, and double bar pinchers on them.\" As if he were promising a treat instead of torture, my nipples stood up even farther while he continued talking, half to me and half to himself. \"I run a high-end BDSM Club in Fort Worth, and you will probably spend parts of the next year working for me there as a submissive. I take the safety of my submissives seriously, so even though working for me in my club may be painful and humiliating you'll actually be safer there in some respects than most pleasure sluts are.\" Oh. I nodded, still terrified at what he had threatened, as he continued. \"But that's in the future--your butt needs to heal, and besides you need some training before you get put to work. So, I'm sending you for a quick four-week course at the Pearson Pussy Ranch. I hear you're from the North--do you know what Pearson does?\"\n\nI'd heard of Pearson's, but \"slave stupid\" had taken over my brain, so I mumbled,\"No, Master.\"\n\n\"Pearson trains pleasure sluts to entertain both genders using all of their orifices and assets. The ranch will have to go easy on your ass for the first two weeks or so while you heel, but they're used to that and will ensure you get every inch [he smirked] of training you need. After that, you'll get shipped to my house where I'll give you a few days with a laptop so you can record your first conclusions about slavery. From then on, we'll play it by ear. At some point you'll be working at my club, but at other times I'm going to lend you out so you can experience different forms of sexual slavery. As time permits, and provided you cooperate, you'll get additional breaks at our house to make notes, but this isn't a vacation. Questions?\"\n\nIt sounded tough, but just what I needed for my \"sabbatical research.\" Besides, I was his property, with no say in that matter. \"No questions, Master; thank you for explaining things to me, and for spending so much money on me; I hope I can repay you somehow.\"\n\n\"My wife thinks the world of you, which is the main reason I bought you. Still, this is NOT a free ride, so be prepared to work hard and give your body to every customer who rents you. I don't like involuntary slavery, but you knew when you indentured yourself that you were selling your body to anyone who could afford to rent it for his pleasure. Are we clear?\"\n\nThat I understood, even if it made me cringe mentally. \"Yes, Master.\"\n\nHe banged on the cage door, which brought back the same wrangler to release him. As Mr. Sousa's footsteps faded in the distance, this unidentified wrangler cuffed me and guided me out of the cage; at least he was grabbing my undamaged ass cheek!\n\nWe walked--or perhaps I should say he frog-marched me--over to a large area of the loading dock, littered with small animal cages and marked with a hanging sign as \"Shipping.\" There, my unidentified wrangler turned me over to an older guy who could have been a body double for Mr. Shively at the Department of Agriculture--middle-aged, balding, paunchy, etc. The free me of yesterday would have dismissed him as insignificant and repulsive, but the newly-enslaved and butt-burned me recognized him as a master who could make my miserable existence even worse. I knelt down promptly, although I tried to keep my thighs almost vertical so that my abused rear end didn't rest on my heels. The shipping manager--his nametag read \"Patrick\"--knew immediately why I had taken up such an odd position. He gave me an evil leer as my previous custodian disappeared down another corridor, no doubt having already forgotten me.\n\nSo there I knelt, slave naked and in considerable pain, waiting for whatever ignominy Master Patrick wanted to inflict on this once (and I hoped future) Associate Professor of Slave Science. I was not at all surprised--and tried not to grimace--when Master Patrick unzipped his jeans, fished out a (fortunately clean) set of \"wedding tackle,\" sat down on a swivel chair in front of me, and unemotionally directed me to \"Suck my dick, slave.\" I didn't even pause to count how many dicks I had already swallowed that day--just threw myself into my work, frantically licking and sucking that warm, hard, penis as if it were the greatest lollypop I had ever tasted. Part of my motivation was self-defense; the last thing I wanted to do was anger a free man, however repulsive he might be, who for the moment had control over my fate as a slave. But, I realized later, part of my reaction was the well-drilled submission of a pleasure slut. Not only was I obligated to obey his command, but I was still basking in the afterglow of hours of mental and physical manipulation to turn me into the kind of brainless, cock-hungry collared bitch who gets off humping a branding iron, the slave whore that (up until today) I had always despised. If the Master wanted a blow-job, then I would give him the best one of which I was capable.\n\nThe servicing was not entirely one sided, although there was no doubt that Patrick was in complete control. He took the time to stroke my hair, praise my performance, and even flick my nipples, all of which reinforced my desire to pleasure him. When I showed him his cum on my tongue, he graciously allowed me to swallow it. I found myself debating which had tasted better--his warm, smooth, hard shaft or the white stuff that came out of it. I suddenly realized how far I had fallen into subjugation--up until today I had always hated having to suck guys off, spitting out their disgusting cum, and now, suddenly I ENJOYED it? I even found myself longing for this greasy twerp to pound my slave cunt and asshole. WTF? That realization brought me up short, but I wasn't completely able to escape my submissive mindset.\n\nOnce I had finished licking his dick clean, enjoying every morsel of semen I had missed when he blasted into me (damn! There I go again!), he gagged me firmly with a fabric band between my teeth and tied behind my head, then exchanged my heavy shock collar for a simple leather shipping band. Next, he encouraged me to shuffle backwards into an open poodle cage, the standard means of rendering slaves helpless while shipping them from one place to another like the horny bitch animals we had become. Once I was inside, he used zip-ties to secure my ankles to the rear corners of the cage and attach the chain of my cuffs to the back side of the enclosure. Before he did that, he gently reached around me (casually fondling my clit, labia, nipples, and boobs as he did so) to insert a soft cushion between my heels and my sore tush. I was so turned on by his sensual teasing that I found myself thinking,\n\n\"Geez--all it took was a blow-job to get this nice cushion to protect my ass? I wonder what he'd give me in return for bending me over the cage and fucking the crap out of me?\" Once again, I brought myself up short with the realization of how effectively the slavery system had controlled my thoughts. I was just as horny as the skankiest slave ho I had ever belittled and jeered at. Besides, if he wanted to fuck me, he could fuck me--my body was available to every free man who had control over me; it wasn't a bargaining tool for better treatment, just a convenient set of moist openings.\n\nWhile these thoughts ran through my head, I was only half aware that he was locking me into the cage with a cheap padlock, adding shipping instructions to the outside, and then, with a bar-code reader \"beeping\", recorded my departure from the Long Horn Slave Market. Which didn't prevent him from reaching through the mesh to pat my head and diddle my nipples, causing my pussy to throb with need, all while praising me as a \"Good little bitch.\" I still blush when I recall how much I enjoyed this condescending attention to me, the newest slave slut destined for training and sexual exploitation.\n\nOut of the corner of my eye, I noticed two other naked girls, similarly caged and restrained on their knees while the all-powerful free man, Master Patrick, a man who could NEVER dream of even touching such women if they were clothed and free, controlled and toyed with us. I realized that I, too, must look like that, just another piece of slave meat being shipped somewhere to serve my betters.\n\nAfter a remarkably short wait, a panel van backed up to the loading dock with the usual series of beep-beep-beeps. Patrick used a forklift to deposit all three of our cages inside that van, and I remember thinking again how skillful and powerful he was, a free man disposing of all three of us overpriced pussies. Then the doors slammed shut, plunging us into darkness. Completely defenseless and restrained, we were lost in our own thoughts--probably all three dreaming of a powerful man fucking our brains out! In a few minutes, the van picked up speed, roaring down an unseen highway to take us to the Pearson Pussy Ranch where, presumably, we would be well trained. Not to mention well used; THAT thought consumed my interest.\n\n(To be continued)"
    ],
    "authorname": "Carl_Bradford",
    "tags": [
        "legal slavery",
        "slave grading",
        "branding",
        "nonconsent",
        "non-consent",
        "noncon",
        "oral"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/sabbatical-in-slavery-pt-01"
}
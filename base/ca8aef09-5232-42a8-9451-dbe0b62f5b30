{
    "title": "Surefoot 10: Fast and the Furriest",
    "pages": [
        "\"USS Impala, Captain's Log, Stardate 36521.31, Captain Lucille Arrington recording: We are en route to the Ophelius Cluster to investigate subspace anomalies detected by a Starfleet communications station established in this sector. Intelligence reports indicate Ferasan vessels have passed through this region, and though they are on an authorised diplomatic mission, and we are not currently in a state of hostilities with them, we cannot dismiss this as a mere coincidence.\"\n\nLucille gritted her teeth as she entered her office. She had a headache. It was something that had been needling her behind her eyes for days now, waning and ebbing day and night, eroding her sleep, her appetite. And now her reflexes; she was usually a champion at Pareses Squares, but had just ended up landing on her tailbone.\n\nHard.\n\nShe should have gone straight to Sickbay, but she had already been there about the headache, had been given a look from the staff like she had come in complaining about gout or consumption, and had eventually lied about their treatments helping her to avoid further scrutiny. She poured herself a shot of Aldebaran whiskey and sat down in her chair - but then bolted up in pain and yelped.\n\n\"And I thought your chair on the bridge was the Hot Seat.\"\n\nShe spun in place at the unfamiliar voice, swearing.\n\nA man was perched like a bird of prey on the top of her couch, smoking a cigar. \"If I'd known I was gonna hear language like that, I'd have brought my mother along to wash your mouth out with soap. Assuming there was any left after dealing with me.\" He was humanoid, dark-haired, with a thick moustache and round-rimmed old-fashioned spectacles, and dressed in a dark vintage Terran outfit from centuries past. He also seemed strangely pale, devoid of colour, almost monochrome in appearance. \"But then I've always said women should be obscene and not heard.\"\n\nLucille smacked the combadge on her uniform. \"Security to my quarters! Intruder alert!\" When no one responded, she tried again. \"McMahon! Answer!\"\n\n\"Save it, Captain, I slipped a Mickey to your communications so we wouldn't be disturbed,\" the intruder informed her.\n\nShe moved back towards her office door - but it refused to open. \"Computer: Command Override! Open this door!\"\n\n\"You're just wasting your breath, Captain, and that's no great loss either,\" the man added, waggling his thick eyebrows as he flicked ash from his cigar onto her couch.\n\nShe moved back to her desk, sliding open a drawer to retrieve... nothing.\n\n\"And your secret phaser,\" he concluded genially. \"You know, Captain, I'm beginning to think I'm not welcome here.\"\n\nPanicking, she moved to her chair, lifted it up and flung it in his direction.\n\nIt passed through the intruder, struck the wall behind him and tumbled to the floor. The intruder, meanwhile, hopped off the couch and stood before her, though he stooped a little, the tails of his black longcoat swishing behind him. \"You keep this up, Captain, and I'll leave in a huff. Or maybe in a minute and a huff.\"\n\nShe kept her desk between them. \"Who the hell are you? What are you?\"\n\n\"For the purposes of advancing this meeting - and who wouldn't want to make advances with you, my little wildflower?\" He paused to waggle his eyebrows again and leer at her. \"You can call me Captain Jeffrey Spaulding, the Alpha Quadrant Explorer. And I am what the eggheads in my organisation call an isomorphic projection.\" He stepped forward, made a show of tapping the lit end of his cigar on her desktop - and only succeeded in passing it through the surface. \"I'm not all here. But then people have been telling me that for years.\"\n\nShe studied him more closely; the moustache and eyebrows weren't real, but more painted than anything else, but now she could almost see through him. \"You're a... projection? That's not possible! We're light years from any ship or planet that could send something like that!\"\n\nSpaulding shrugged. \"Well, it's either that or you've been nipping at a particularly nasty batch of bathtub gin at your local speakeasy.\" He began pacing around the room, hands folded behind him, occasionally stopping to puff on his cigar. \"Speaking of speaking easy... has Matthew ever spoken to you about things best not spoken of?\"\n\n\"Matthew? You know my brother?\"\n\n\"We've kept a keen watch on his work in Starfleet Intelligence. Starfleet Intelligence: now there's a contradiction in terms.\" Spaulding stopped and peered into a large glass globe with a golden model of the USS Columbia, Lucille's first posting, suspended in the centre. \"Did Matthew ever tell you about a covert organisation watching over the Federation? All cloak and dagger, eyeholes in the newspapers, secret decoder rings and lemon juice invisible ink?\"\n\nHer eyes widened. Mention of her brother did bring back a memory of a clandestine talk about- \"Section 31?\" Her voice was almost a whisper, as if she was afraid to say it aloud and possibly conjure them into being. No one ever admitted to knowing anything about that cabal of agents working outside of Federation rules in order to protect its interests. \"Is that the answer?\"\n\nSpaulding puffed on his cigar before replying. \"That depends on the question. But the game isn't The $64 Question, it's You Bet Your Life, and on tonight's show, the Secret Word is... Hrelle.\"\n\nHer hackles rose. \"Captain Esek Hrelle?\"\n\nHe pointed his cigar at her. \"And the young lady says the Secret Word and wins a hundred dollars. Of course, she said Three Secret Words, but I'm allowing for inflation.\"\n\nShe scowled, having learned to ignore his distracting patter and glean the essence of his communication. The Caitian Hrelle had been a thorn in her side since their Academy days, when he refused to see sense and resign despite her efforts to convince him otherwise, thus earning her the ire of her father, the then-Superintendent of the Academy.\n\nSince then Hrelle has proven to be a malcontent, a maverick, and though his story of escaping alleged slavery after so many years have made the Galaxy proclaim him a hero, she knew the truth: he was a coward at best, a traitor and threat to the Federation at worst. And in her last encounter with Hrelle, the man had managed to turn her nephew Giles away from the rest of the family, and even physically threatened her life - and got away with both. \"What about him?\"\n\nNow Spaulding's cigar smoke seemed to coalesce between them, taking shape, solidity, until the image of Hrelle's scarred Caitian head took form. \"Quite a mug on him, huh? I never forget a face, but in his case I'll make an exception. You know, for a man who says he wants to live an ordinary life and do ordinary work, he gets into some extraordinary scrapes: escaping from captivity, uncovering Malurian child trafficking, surviving the destruction of the Tyche Station in the Malbruk system, encountering the Rising Star. He must have rabbit's feet instead of cat's.\"\n\nLucille swallowed; some of those incidents were highly classified, but this... individual... knew about them, further evidence of his connections with Section 31. \"I'm not a fan. I don't trust him.\"\n\nHe nodded. \"Trust is earned, and if anyone should be trussed up and hit with an urn, it's him. And to top it all off, there he is, influencing the Best and the Brightest from the Academy; like my psychiatrist always says, get 'em when they're Jung. Don't look now, Captain, but there's one too many threats in this room, and I think it's him.\"\n\nLucille stared at him, her shock at his appearance and manner overcome by his warnings about Hrelle. \"What can I do?\"\n\nSpaulding smiled, and blew the smoky image of Hrelle out of existence. \"You'll have to put the Cat in the Bag, for good. And there's no time like the present. So here's your present: he's about to have an unauthorised meeting with the Ferasans currently in this sector.\"\n\n\"What?\"\n\n\"Secretly contacting his racial cousins, members of a militant power who has threatened Earth in the past?\" Spaulding rolled his eyes. \"I was never good at math, but even that has to add up to treason in anyone's book.\"\n\nShe paled. \"I have to stop him.\"\n\n\"You Bet your Life.\"\n\nThen he vanished.\n\nLucille stood there for a moment, stunned, before something made her try her badge again. \"Captain to Bridge. McMahon, get in here!\"\n\nSeconds later the door slid open, and the figure of her First Officer Commander Edward McMahon stepped inside; he was a short, unassuming man with a round face and receding hair, and a presence so bland that more than once Lucille wondered if, like Spaulding, he was all here. Even his voice was bland. \"Yes, Captain?\"\n\nStill, she couldn't really complain; she chose him precisely because he was one to stay in the background and not try to steal her thunder. \"McMahon, have a Security team come in here and do a sweep of my office.\"\n\n\"Ma'am?\"\n\n\"Just do it. And then locate the Surefoot and plot a course for its location.\"\n\n\"Uh, Captain, inspection of the communications station at Ophelius is outstanding-\"\n\nHer relief at his presence vanished once more. \"Did I ask for an argument?\"\n\n\"Uh, no, Ma'am.\"\n\n\"Then follow your orders.\" Idiot.\n\n\"Yes, Ma'am.\" He departed.\n\nShe sat down. And bolted back up, her tailbone still hurting.\n\n*\n\n\"USS Surefoot, Captain's Log, Stardate 36521.31, Captain Esek Hrelle recording: We are still on course for Starbase 154, and given the number of delays we've had in the last few weeks, I'm starting to wonder if it actually exists, or if the Surefoot has become some Ship of the Damned, forever sailing towards a destination it will never reach.\n\nAnd as a result of the recent crises we've faced on Malbruk II and Sigma Lambda, our resources have been stretched to the point where I've been forced to instigate emergency rations for two out of every three days - thus securing my place among the cadets as Most Unpopular Captain since Drydock Styles. Well, screw you guys, I don't like eating cardboard either.\"\n\n*\n\nDeck 1, Captain's/Counselor's Quarters, 0730 Hours:\n\nHrelle noticed the change in demeanour of his wife as she emerged from their bathroom. \"What's up?\"\n\n\"Nothing,\" Kami lied, as she moved to the wardrobe and selected her uniform, guiding her tail through the slit in the rear.\n\nHe stared at her a moment longer, and then continued dressing. He knew better at this point in their relationship than to press the matter before she was ready, knowing she was more than able to address it when-\n\n\"I think my Seasons have finally stopped,\" she announced.\n\nHe finished tugging his boots up over his furred feet and caught her reflection in the wardrobe mirror, watching him for his reaction. \"Glad to hear it. You always hated taking those hormonal suppressants. Anyway, you never needed your Seasons to make me attracted to you.\"\n\nShe offered a slight smile. \"Good reply, my Captain. At least you didn't say how sorry you were for me.\"\n\nHe rose, adjusting his belly over his belt. \"Are you too busy feeling sorry for yourself?\"\n\nKami looked away, pretending to adjust her breasts in her bra. \"A little. I know that it was inevitable, I know I'm at the age when it typically stops, I know that I'll stay fertile for a while longer, and yes, I know that I hated those suppressants.\"\n\nHrelle nodded and drew closer, putting his arms around her and using his nuzzle to shift aside her honey-brown mane and get at her neck before she could finish dressing. He purred against her skin.\n\n\"Do you want to have children with me, Esek?\" she whispered.\n\nHe stopped purring, but still held her close, only tighter now. He couldn't lie and say that the thought hadn't crossed his mind before now. Not long ago, the thought of being whole again, of being married and happy again, would have been inconceivable. But to be a father again, even at this late stage in his life, while daunting, was also enticing.\n\n\"If that's what you-\" he started.\n\nUntil she cut him off. \"No. Don't leave it all on me. Your answer, one way or another, will not be the final say, I promise you that. Just tell me.\"\n\nHe felt his skin blush under his fur. She was right; she deserved honesty from him. \"Yes. Yes, I do. I wanted it so much when I was with Ha- Sasha's mother-\"\n\n\"You can say Hannah's name, you know,\" she assured him dryly. \"I won't break down into tears knowing another woman had your heart before me. I was married too.\"\n\nHe made a sound. \"Hannah and I had been planning on a child when I was...\" He stopped himself. Of course, Kami already knew the rest, knew his full story, of his capture by the criminal Bel-Zon organisation, of being tortured and sold into slavery, finding himself working in a Breen mine, fighting in the Orion pits, working with theta waste in a Corvallan freighter, and escaping after six years - only to find his beloved Hannah had been killed not long after his capture. \"I know that Sasha has been as much my daughter as if we shared blood. But...\"\n\n\"But it's not quite the same, is it?\" she noted, leaning back into his shoulder. \"Don't think I haven't thought about it either. It's been almost twenty years since I gave my own cub life; now he's all grown up and getting married in a few weeks. It was beautiful raising him - but also demanding. Am I really ready to go through all that again at my age?\"\n\nHis stomach suddenly growled loudly in reply.\n\nShe laughed, the tension broken. \"Seven Hells, Esek, are you carrying a cub of your own in there?\"\n\nHe drew back and slapped her rear, making her tail wag. \"A whole litter, and they're all hungry, so finish dressing and let's get to the mess hall before Morning Shift starts.\"\n\n*\n\nDeck 1, Bridge:\n\n<br >Sasha Eismann Hrelle smiled as she leaned back in the Captain's chair in the centre. \"French toast, slathered in fresh whipped cream, blueberries, and dusted with cinnamon.\"\n\nThis elicited groans of gastronomic delight from some, though not all of Alpha Squad, manning the various stations. It was the last half hour of the late shift, and today was the day when they could use their replicator credits.\n\nAt the Ops station behind Sasha, completing a Medical essay in between her other duties, Eydiir Daughter-of-Kaas never looked up. \"I can prescribe any number of substances that will clog your arteries far more efficiently.\"\n\nSasha harrumphed. \"They can't be as tasty.\"\n\nTo her left at the Engineering Station, Jonas Ostrow turned in his chair and looked at the others. \"Chicken fried steak, creamy mashed potatoes, sweetcorn and Altairian gravy.\"\n\nThat brought out more groans of appreciation, and from his place at the helm, the Caitian Meow Rrori offered, \"I have developed a fondness of late for Terran oysters.\"\n\n\"You know those are famously aphrodisiacs?\" Sasha informed him, smirking.\n\nFrom the Tactical Station beside Ostrow, the Bolian Neraxis Nemm guffawed. \"Like he needs those! Now me, there is a Klingon gagh curry begging to be devoured.\"\n\n\"Please, God, no,\" Jonas begged.\n\nNeraxis' bright blue bald head turned to him. \"What's up with you, O Mighty Second in Command?\"\n\n\"I sleep under you. The last Klingon curry you had, I almost declared a Biohazard in the bedroom. Eydiir, isn't there something you can give her for the horrible flatulence?\"\n\nThe Capellan shrugged. \"Nasal suppressants for the rest of us. I fear her Bolian biochemistry could overcome anything I prescribe her.\"\n\nAt the Science Station, Kitirik turned, his lime-green scaled face bright. \"Friend Neraxis, perhaps I could interest you in my diet? I produce very little in the way of flatulence.\"\n\n\"What, me, munching on beetles and locusts? Hell, no!\"\n\n\"You eat rotted meat,\" Sasha reminded her. \"And you turn your nose up at bugs?\"\n\n\"A girl's gotta have standards-\" But then her attention turned to the Proximity Alarm at her station. \"We have a vessel on an intercept course at high warp! It'll be here in sixty seconds!\"\n\nSasha sat up, the banter forgotten. \"We're not scheduled to rendezvous with anyone. Eydiir, hail them. Neraxis, get an ID on them.\"\n\n\"Already on it. They're big, armed- Holy Hraxor, it's a Ferasan Attack Escort!\"\n\nSasha's heart leapt into her throat as she hit the alarm. \"Red Alert! All hands, Red Alert! This is not a drill!\"\n\nAround them, the apple-red lighting strip circling the ceiling of the bridge brightened, flashing, as the shields snapped on, and phasers and photon torpedoes came on-line, while inside, she kept saying to herself: Come on, Dad, get up here, take them on, not me, I'll get us blown to pieces! You can stop them, you can stop anything-\n\nShe kept still as she heard the bridge doors slide open, and only turned when she heard the familiar voice. \"What's happening, Sasha?\"\n\nShe turned and rose to face him, seeing that he had been accompanied by Ship's Counselor Kami Hrelle, and their Vulcan First Officer T'Varik. \"Sir! There's a Ferasan ship on an intercept course, shields raised and weapons primed! Intercept time-\" She looked to Neraxis.\n\nThe Bolian glanced over at her display. \"Twenty seconds now!\"\n\nSasha looked back at her father, expecting him to leap into action, stride forward and say-\n\n\"Computer, cancel Red Alert,\" he ordered, and as the klaxon died away, he continued, \"Helm, full stop. Tactical, drop shields and take the weapons off-line.\" He stared at the viewscreen.\n\nAnd left Sasha thoroughly confused. The Ferasans first made their presence known before the birth of the Federation with a number of attacks on Earth, all repulsed. Then they became allies of the Klingons, who were technically allies of the Federation, but that always seemed tenuous at best. But attempts at forging a more recent relationship directly with the Ferasans was hampered by their hatred for their cousins, the Caitians. \"Sir?\"\n\nHer stepfather ignored her, as the Surefoot came to a complete stop, and Sasha turned to see a wicked-looking brick-red vessel with a three-nacelle propulsion design and numerous projections, obvious weapons, here and there.\n\nThey were going to die. They were going to be eaten. And her father had seemingly left them vulnerable.\n\nEydiir had stepped aside to allow T'Varik to manage the Ops station, the Vulcan announcing, \"There is an incoming transmission, Sir.\"\n\n\"Onscreen.\"\n\nSasha looked back to see the starship replaced by a darkened bridge interior, dominated by a huge sabretoothed felinoid at least two metres in height: vaguely resembling Caitians, but with more flattened muzzles, thinner chocolate-orange fur and taller, more pointed ears. It was dressed in armour and leather in a style very reminiscent of Klingons, and leaned in close to fill up the screen. \"Across the Trackless Veld I have journeyed to stand before you! I challenge you, Esek Hrelle! In the name of the Patriarch, I challenge you to-\"\n\n\"Go fuck yourself,\" Hrelle finished simply, reaching out and cutting off the transmission, before turning to T'Varik. \"Resume our course to Starbase 154, send a report on that vessel to Starfleet Command. I'm going back to finish my pancakes.\" He stepped out of Kami's touch as he departed from the bridge, stopping only to add over his shoulder, more loudly and sharply, \"And while you're at it, Commander, have all cadets brought up to speed on what justifies bringing us to Red Alert!\"\n\n\"Yes, Sir.\"\n\nAs she started away again, Sasha asked, \"Da- I mean, Sir, did I- did I do wrong?\"\n\nHe didn't stop. Kami offered a sympathetic look and, \"It wasn't your fault.\" Then she followed Hrelle out.\n\nT'Varik approached the Captain's chair. \"Helm, take us around the vessel, resume our original course.\"\n\nRrori, looking bemused, nodded and faced his console again. \"Aye, aye, Ma'am.\"\n\nSasha looked to her now, appearing thoroughly lost. \"Commander, what's going on? Did I make a mistake?\"",
        "The Vulcan took the command chair. \"You did not necessarily do anything wrong, Squad Leader. However, the potential for escalation into a major incident was high.\"\n\n\"Escalation?\" Neraxis declared, \"They're the ones that came in with shields raised, weapons armed-\"\n\n\"There is a Ferasan saying: 'A roar is not always a warning; sometimes, it is a salute'. It is standard Ferasan tactics to approach an unfamiliar vessel under conditions which might be interpreted as hostile, without actually intending hostility; it is a sign of respect for us. But, had you responded by firing first, the results would have been... unfortunate. Particularly for ourselves, given how outmatched the Surefoot is in comparison.\"\n\n\"These Ferasans appear most belligerent,\" Kit noted. \"Forgive my ignorance, but I am unfamiliar with them. Are Caitians an offshoot of them?\"\n\n\"We most certainly are not!\" Rrori snapped, clearly offended. \"They are an offshoot of my people! A twisted version of us! Militant, bombastic, they're nothing but disgusting throwbacks!\"\n\n\"Vulcans have shared similar attitudes regarding Romulans,\" T'Varik admitted dryly. \"Recent intelligence reported that the Ferasans are in this sector for commercial interests; had you consulted the bulletins before you started your shift, their presence would not have been such a surprise.\"\n\n\"Yes, Commander.\" After a moment Sasha asked, more softly, \"Ma'am... do you know why that Ferasan made that challenge to my father? Or why he responded the way he did?\"\n\n\"No, Sasha, nor do I wish to engage in idle speculation on the matter. However, as you are now off duty and presumably bound for the Mess Hall, where I believe he is still finishing his breakfast...\"\n\n\"Good idea, Commander.\"\n\n\"I am aware of that, Cadet.\"\n\n*\n\nHrelle continued to cut up his remaining pancakes, which in his absence had become thoroughly suffused with syrup and turned cold, without actually bringing any of them on a fork to his mouth.\n\nBeside him, Kami had finished off her melon dish and now sipped at her tea. \"At this point you can't make the pieces any smaller without the help of Nanites.\"\n\n\"Is that right?\" he challenged blankly.\n\n\"Do you want me to fill in T'Varik and Sasha on the reason for all that on the bridge? They'll be concerned.\"\n\n\"No need. It's over and done with.\"\n\n\"Of course it is. No issues to deal with, no unresolved problems, nothing. Everything is fine.\"\n\n\"I'm glad we're on the same wavelength.\"\n\n\"Ahem.\"\n\nHrelle looked up at Sasha, who stood on the other side of his table with her tray. She smiled. \"Can I sit with you please, Daddy?\"\n\nHe blinked, aware of Kami's amused reaction to his stepdaughter's use of 'Daddy' and the childish voice - a tactic she employed from an early age whenever she wanted something, having instinctively gleaned how emotional it made him, and thus more likely to grant her whatever she wanted. \"Of course, sweetheart. Do you want help cutting up your food?\"\n\nShe sat down. \"Hell, no, I'm not letting you anywhere near my grub, you greedy bastard, you'll inhale half of it before I even get a taste.\" As Kami laughed at that, Sasha tucked into her French toast before the whipped cream totally melted and mingled with the blueberries and syrup. \"So, are you gonna tell me what that was all about?\"\n\n\"No.\"\n\n\"Come on. I'll let you tease me about having sex with Giles.\"\n\n\"I'll do that anyway.\"\n\nShe swallowed the food in her mouth and licked her lips. \"Don't make me bring out the Big Guns, Dad.\"\n\n\"The 'Big Guns'?\" Kami enquired.\n\nSasha stared across at her father - and started banging the ends of her knife and fork in her hands on the tabletop. Loudly.\n\nAll eyes turned to them, as Sasha continued to make noise, never taking her eyes off of Hrelle. Kami looked to him for explanation, as he complied, over the rising din. \"Hannah said she's been doing this since she was an infant, to try and get her own way.\" As Sasha increased the noise and tempo, making the glasses and cutlery on the table rattle, he added more loudly, \"As you can tell, she remains an annoying little bitch.\" But he reached out and gently clasped his hands over hers, ending the protest. \"Fine. You win.\"\n\nShe grinned. \"I usually do. So, what was that all about?\"\n\nHe picked up his cutlery again, but recognised the futility of even trying to eat now, and set them down again, reaching for his coffee instead. \"Caitians and Ferasans... do not get along. At all. We were once one people, all called Ferasans, before we fled from them a thousand years ago.\"\n\nSasha nodded. \"The Diaspora. I remember reading about it when I was a kid, when I wanted to know more about your people.\"\n\nHe nodded back absently. \"You read the cleaned-up Junior Version of events, that we left to find a new home because we disagreed with what Ferasans were becoming.\n\nBut it was more than that. They had rejected the peaceful teachings of the Great Mother in favour of their toxic Patriarch, all misogynistic fire and fury. They had genetically Augmented themselves, the way humans tried to do on Earth centuries ago, but in our case they succeeded, becoming bigger, stronger, faster, even producing telepaths, and they took over Ferasa Prime. They were building an armada to take over the Galaxy. We tried to stop them. So... they tried to exterminate us.\"\n\nSasha paled. \"They did?\"\n\nHe sipped at his coffee. \"They consider themselves superior to us, think us weak and soft, an embarrassment. More than once over the centuries they tried to attack Cait, the way they did Earth. But like most bullies, they underestimate the strength of their intended victims, and overestimate their own, and we beat them, time and again.\n\nStill, they can't let that go, and every so often when they hear a Caitian is in the area, they like to come along and challenge us to mortal combat.\" He shrugged. \"That's all.\"\n\nSasha caught a reaction from Kami, as if there was more to the story than her stepfather was saying, but chose to remain silent about it. And so did she. \"Well, if that's all-\"\n\n\"Yes. That's all-\" When his combadge chirped, he responded, \"Sorry, T'Varik, I know I'm late, but-\"\n\n\"I am not admonishing you for your tardiness, Sir. A matter has arisen requiring your attention.\"\n\nHe sighed. \"I'm on my way. Hrelle out.\" He rose to his feet. \"Sorry if I seemed angry with you on the bridge, Runt of the Litter.\"\n\nShe smiled up at him. \"That's okay, Dad. All is forgiven.\"\n\nThen he swiftly reached across, folded up one of her French toasts and carried it away with him, dripping whipped cream and blueberry syrup on the carpet along the way.\n\n\"You son of a bitch!\" she called after him, as the room settled down again. Then she looked at Kami, concerned once more. \"Is he okay?\"\n\n\"He will be.\" Kami smiled, wanting to lighten the mood and distract the girl. \"Tell me... how do you feel about doing babysitting in the near future?\"\n\n*\n\nT'Varik was back at the Ops station when Hrelle returned. \"What is it?\"\n\n\"We are receiving another Ferasan transmission.\"\n\n\"Mother's Cubs... alert any combat-ready Starfleet vessels in the area to chase these cats away.\"\n\n\"Sir, this is not from the vessel which had just intercepted us, but another, designated as The Bloodstained Shroud.\"\n\n\"Hmm, with a name like that, they must be on a peace mission, right?\"\n\n\"Actually, they are, the vessel's designation notwithstanding. They were granted a licence to visit certain sectors within the Federation to promote trade and tourism to their homeworld, and presumably counter their people's public image.\"\n\nHrelle grunted. \"Good luck with that.\" He stared out at nothing in particular, before finally replying, \"Put them onscreen.\"\n\nSeconds later, the starfield was replaced by another interior shot, taken up by another Ferasan: as tall and imposing as Second Son, this one had thinning, greying fur and a broken right sabretooth, and his leathers and armour were colourful, decorated with jewels and gold pieces. \"Captain Hrelle, I am Consul Treshek. I understand our escort ship intercepted you earlier, piloted by SecondSon of R'hewann.\n\nI am calling to apologise for that. He is my subcommander, from a related Pride, assigned as a favour to them, but he took the ship without permission to challenge you, and I can assure you that his actions were not sanctioned by either myself or the Patriarch's Council. Our intentions here are entirely peaceful.\"\n\nHrelle grunted. \"What are your intentions here, Consul? I have heard it is to promote trade and tourism. That doesn't seem work worthy of a Ferasan Consul.\"\n\n\"Any duty which helps others see through the lies spread about us by our enemies is a worthy one. And I am empowered to secure deals for tourism, services, and trade with any Federation member world.\"\n\nHrelle nodded, knowing full well that the Caitians counted among their enemies. \"And your Klingon masters allow this?\"\n\nTreshek visibly bristled, but he recovered quickly. \"The Ferasans have no masters, Captain, just allies... and prey. We will conquer you... at least, your hearts and minds.\" He bared ruby-encrusted teeth, in an approximation of humanoid good humour.\n\nHrelle knew how felinoids would interpret that expression, however. \"Well, it's been lovely talking with you, but I've no one to blame but myself for answering your call-\"\n\n\"Captain, we would like to offer recompense to you for the unfortunate incident earlier. We understand you might be in short supply of certain essential materials, which we have brought with us in large quantities to trade, and could offer you at reasonable rates: Starfleet-grade deuterium, replicator base proteins, transtator circuits-\"\n\n\"We don't need anything from you.\"\n\n\"Are you certain, Captain? We also have many facilities here on The Bloodstained Shroud, here to display our culture in all its glory: museums, theatres, food, entertainment. You and your crew are welcome to visit and enjoy-\"\n\n\"I said No.\"\n\n\"If you are concerned about SecondSon, you need not fear him-\"\n\nHrelle stepped forward. \"Let me be clear on this, Consul: it'll take more than some mangy, snaggletoothed, rat-tailed Ferasan arsehole looking to earn himself a Name to make me afraid! Just get on with your business and we'll get on with ours. Surefoot out.\"\n\nThe viewscreen returned to the starfield as Treshek was starting to reply, producing chuckles from some of the cadets on the bridge.\n\nHrelle felt himself relax now. \"Helm, continue on our original course.\" He felt his First Officer shift closer. \"Yes, Commander?\"\n\n\"May I speak with you privately, Sir?\"\n\nHe nodded, expecting this. \"Mr Falok, take the Grown Up Seat.\"\n\nThe senior officers were silent until they entered the adjacent briefing room, before the Vulcan proceeded. \"Sir, your attitude towards the Ferasans is not appropriate.\"\n\n\"Oh? Is that right?\"\n\n\"Yes, Sir. You need to present to our cadets a more professional attitude when dealing with other races. Even with ones who share a chequered history with your own.\"\n\n\"You call what they tried to do 'chequered'?\"\n\n\"It is not dissimilar to my own people's history with the Romulans.\"\n\n\"Oh? Did the Romulans ever try to come back and blow up Vulcan? Were you ever threatened with forced genetic manipulation, with being eaten by them?\"\n\n\"Admittedly, no, Sir. But the fact remains, your behaviour is disappointing-\"\n\n\"Oh, is it? Well, thank you so very much for your kind assessment, Bubulah!\" He paced around the room, his temper and voice rising. \"I am so sorry for my poor performance! I'm such a rude man! I should have bent down and KISSED HIS FURRY ASS!\"\n\nHe struck the tabletop with his fist, cracking it.\n\nT'Varik remained silent.\n\nHe straightened up, lowered his arms but kept his hand in a fist. \"I'm... sorry for that outburst, Commander.\"\n\n\"It is... understandable, Captain, given the history of Ferasans and Caitians-\"\n\n\"No. It's not that. It's more... personal.\" He rubbed at his eyes, his tail hanging limply behind him. \"That was not the first time I have encountered SecondSon. Do you know what he was challenging me for?\"\n\n\"I assumed it was some Ferasan test of honour.\"\n\n\"He's called SecondSon because Ferasans are raised Nameless, designated with labels involving their family connections or occupations, and have to earn their names, by performing some great service to their Patriarch... or by winning a great victory that will have them singing ballads about them. Such as challenging the likes of me.\"\n\nShe raised an eyebrow. \"Is there any particular reason why he would choose you for that?\"\n\n\"Yes.\" He drew closer to her, but wasn't quite able to look at her. \"When I was a captive in the Orion fighting pits, I became one of the very few combatants to survive nearly a hundred of their deathmatches. They called me the... the B-Beast. I faced opponents of many species, including Ferasans, and somehow the Ferasans heard about this.\n\nSo there are more than a few Nameless Ferasans out there like SecondSon who have sought me out to challenge me, and earn a name through killing me... or even by being killed by me.\"\n\nA look of shame crossed his expression. \"I've tried to explain to him that I wasn't there of my own free will. I was starved, I was given drugs like hypocordrazine to increase my aggression and stamina, I had pain implants in my spine to force me to fight. I- I was not proud of what I did, it wasn't honourable, not worthy of b-ballad or epic or even boasting, but a-a n-nightmare that I- I w-wanted to es-escape-\" He stopped as his stammering increased, growing more agitated until he slammed his fist into his other hand. \"Sorry.\"\n\nThe Vulcan's expression softened. \"Captain-\"\n\n\"The Great Mother taught us to revere life, to love and respect and forgive.\" He turned away, reaching out and resting his other hand on the edge of the table as if for support. \"My time as a gladiator went against everything I was taught. If I was lucky, the drugs would blank out my memories of the fights themselves, and the only clue I would have of the events was the fact that I was still alive - and that my fur, and my... mouth... was c-covered in flesh and b-blood. But I wasn't always lucky. My Orion Master, Surinh Dag, made a lot of m-money off his B-Beast.\"\n\n\"Captain,\" T'Varik said, softly, sympathetically, \"You were forced to commit those acts-\"\n\nBut he shook his head, staring out the window at the starfield at warp speed. \"I suppose what I'm saying is that, to you and to me and to most right-thinking individuals, what I underwent was a nightmare best put behind me. To the Ferasans, however, it's an opportunity, for b-battle, for g-glory. I c-c-can't-\" He smacked his fist into his hand again. \"Mother's Cubs, I haven't lost such control in years.\"\n\nThe Vulcan's expression shifted almost imperceptibly, and it was only Hrelle's keen olfactoral senses that confirmed for him a sheathed embarrassment and regret from the woman. \"Esek, I am truly sorry for the distress I have raised in you.\"\n\nHe swallowed and visibly calmed himself, wondering if that was the first time she had used his first name since they'd met. \"It was there already, you didn't raise it. And you were right, as usual. The cubs pick up my bad traits as well as my good ones - if I have any of the latter.\"\n\n\"You have many of those, Sir.\"\n\n\"Thank you. So I will endeavour to stay professional in future. But I will also endeavour to avoid contact with the Ferasans.\"\n\n\"And I will endeavour to assist you in that, Captain.\"\n\n\"Thank you again. Contact them, make the appropriate trade arrangements. And arrange for the cadets to visit their facilities. It'll be educational.\"\n\nThen his combadge chirped, and Kami's voice joined them. \"Captain Hrelle, please report to the Holodeck immediately.\" He smiled a little at the announcement. \"That's unexpected. Maybe she's arranged for a little romantic time on some simulated getaway?\"\n\nThe Vulcan raised an eyebrow. \"You two do not appear to need the holodeck to enjoy each other's company. However, if it is the case, then the appropriate response from me would be... have fun.\"\n\n*\n\nSomewhere Else:\n\n\"Captain's Log, Imperial Date 36521.31, Captain Esek Hrelle, ISS Surefoot: We have just departed from our rendezvous with the Impala and Captain Arrington, having delivered the subspace isolytic warheads needed to pacify the rebellion on Karakol. We are most pleased to contribute in our own small way towards keeping the Empire safe. End log.\"\n\nBeside him on the bridge, his Counselor and mate Kami sneered as she played with the dagger strapped to the gold sash on her miniskirt; her skimpy top barely held together to keep her ample breasts encased. \"So, how long do you think it will take before that bitch Lucille realises one of those warheads has been 'accidentally' activated?\"\n\nHe chuckled, tugging at his shimmering gold sleeveless top and playing with the jewelled handle of the blade strapped to his own sash. \"About a millisecond after she also realises who's responsible, and that we've kept the majority of the weapons, to destroy Karakol ourselves and claim the glory.\"\n\nShe purred at that. \"'Contribute in our own small way'... how do you keep from choking on your own words?\"\n\nHe grunted. \"I have a big appetite.\" He leered at her as he reached out and drew her closer, making her tail wag and her purr grow. \"For many things.\"\n\nBut then he suddenly ducked as he felt a hand reaching for his neck, and he blindly grabbed behind him, grasping and flinging a body over his shoulder to hit the floor before him. \"TRAITOR!\"\n\nOn the ground, T'Varik, clad in an attractive outfit identical to Kami's, except it was in Command Red instead of Medical Blue, looked up at him. \"Captain, wait, I was merely-\"\n\n\"You were merely trying to give me a neck pinch, my sweet little second in command,\" he sneered, drawing the blade from its scabbard on the side of his chair. \"Looking to take over and claim the glory yourself? Nice try, T'Varik.\" He bared his teeth and loudly proclaimed, \"Looks like Vulcan is on the menu tonight!\"\n\n\"What in Mother's name is going on?\"\n\nAll eyes on the bridge turned to the newcomer, seemingly unnoticed until now, a Caitian almost identical to the one in the Captain's chair, but in a different uniform, his face filled with outrage as he drew closer, focused on Kami. \"What is this all about?\"\n\nThe other Hrelle glared at him. \"He looks like me! An imposter, sent to take my place-\"\n\nThen Kami announced, \"Computer: Freeze Program.\"\n\nEverything but the real Hrelle and herself turned still, the latter walking around, glancing down at her outfit. \"What do you think? I might have to keep this for the bedroom-\"\n\n\"Kami, what is all this?\"\n\nShe smiled at him. \"A psychological exercise, devised by the Counseling Services, utilising the new holodeck technology. You remember that old story of Captain Kirk's sojourn to a quantum reality that was like our own, but with significant differences?\"\n\n\"That?\" Of course he was; it was the stuff of legend, how Kirk and his landing party had somehow crossed over via a transporter malfunction into another universe, one that contained duplicates of themselves, their ship and others they knew, but one where there was a ruthless Empire instead of a Federation, where torture was punishment, genocide was policy and promotions could be gained by assassination.\n\nIt had never been officially confirmed by Starfleet. Personally Hrelle thought it was load of shit; a reality that was as brutal as that described in the rumours would have left the other Enterprise with a radically different crew by the time the real Kirk visited it. But it was intriguing nonetheless. \"What about it?\"\n\n\"This simulation is based on accounts and extrapolations of that other reality, as well as your own psychological profile, and is designed to approximate how you might be depicted there.\"",
        "He stared at the frozen holographic version of himself. \"What? Why would anyone want to do that? What's the point?\"\n\nShe crossed her arms over her chest. \"To illustrate one's dark side, Esek. Some people refuse to believe that they have one. Others think they're already enveloped by it. Seeing a version of oneself without any civilised beliefs, any veneer of decency and kindness, can offer a fresh perspective. Counselors are considering employing this new holodeck technology towards helping others see their hidden natures-\"\n\n\"Computer: End Program.\" As the characters and setting vanished, replaced by a room of yellow and black gridlines, Hrelle glared at her. \"I don't need this to see my hidden nature. I've seen it. I've embraced it! And it's far worse than that parodic posturing clown you conjured up-\" Suddenly his combadge chirped, prompting him to snap, \"Yes?\"\n\nT'Varik's voice filled the air. \"Sir, forgive the interruption, but there is an incoming priority message from a Captain Sa'Rahn.\"\n\nHrelle's expression changed instantly, his mood lightening as if with antigrav handles. \"Thanks, I'll take it in my quarters!\" As he turned to Kami, beaming, he explained, \"A distant cousin from a separate clan in the Luhar Peninsula. He encouraged me to join Starfleet; his career has been even more colourful than mine, if you can believe it. Come on, I want to introduce you!\"\n\nShe looked ready to argue her point further, but instead shrugged and followed him out.\n\nIn their quarters, he strode up with her to the large screen behind his desk. \"Ready, Commander.\"\n\nThe screen lit up, displaying a sepia-furred Caitian male looking remarkably like Hrelle, though with a more expansive belly that refused to be contained beneath the officer's Starfleet jacket, and his voice carried an accent different to his cousin. \"Hello, Skinny! Mother's Cubs, you're worse than when I last saw you! You're all fur and bones!\"\n\nHrelle shrugged, resting his hands on his own substantial belly. \"It's all the sex I'm getting now that I'm married. How are your parents? And Leo and Morley?\"\n\n\"Everyone's fine, Mother's still expecting you to visit, and my brothers are keeping out of trouble... mostly.\"\n\n\"Glad to hear it. Cousin, I'm pleased for you to meet my wife, Counselor and better half, Kami.\"\n\nSa'Rahn smiled brightly at her, noting the skimpy uniform she was still wearing. \"A genuine pleasure, Kami - and I'm loving the outfit Skinny's obviously designed for you.\"\n\nShe crossed her arms over her chest. \"I actually had to add material to his original designs, or I would have caught cold.\"\n\nHrelle noticed the emblem on the wall behind Sa'Rahn. \"What's going on? What are you doing at the Caitian Embassy?\"\n\n\"Temporary secondment as Starfleet Liaison while my ship undergoes retrofits in Earth Station One. Which is why I'm calling you: the Ambassador has been made aware of the Ferasan Trade Delegates in your sector.\"\n\nHrelle nodded. \"What a coincidence. I spoke with him earlier today, a Consul named Treshek.\"\n\nSa'Rahn nodded. \"That's him. What was your impression?\"\n\n\"He's a Ferasan. I'm glad to see the back of him.\"\n\n\"Sorry to hear you say that, Skinny. You see, we'd like you and your crew to have a sniff around his operations, see if it's all legitimate, or if there's something more to their trying to win us over.\"\n\n\"What? I got a boatload of cubs, I can't take them on a secret mission into hostile territory!\"\n\nThe Caitian onscreen smiled again. \"It's not exactly a mission. And there's been no actual declaration of hostilities between us. But there are enough red flags being waved to make us concerned that an ally of the Klingons with a history as militant as theirs might be making unwanted inroads into Federation territory. I'm transmitting authorisation from Starfleet to deviate from your assigned course, just to cover your tails. We don't anticipate any threats, but you're free to involve your cadets as much or as little as you see fit.\"\n\nHrelle sighed. \"Well... I suppose I can manage something.\"\n\n\"Much appreciated, Cousin.\" Sa'Rahn smiled, offering a final nod to Kami. \"And Counselor... stop having so much sex with him. He's wasting away to nothing!\" The viewscreen darkened.\n\nHrelle looked to his wife. \"I'd better go brief T'Varik. And yes, I know, we're not done talking about me.\"\n\nKami reached out and took his hand in hers, drawing him closer. \"Esek... you are the bravest, most wonderful man I have ever had the pleasure to know, and love. You're a good man, no matter what you might have done in the past. And it is in the past; the Beast is dead.\"\n\nHe looked ready to argue with her, but decided against it.\n\n*\n\nBloodstained Shroud:\n\nThe Ferasan ship was huge and saucer-shaped, a former troop and vehicle carrier now converted to a seemingly more peaceful purpose, with large interior sections in rings around a central column, rings now filled with examples of Ferasan painting, sculpture, weapons, fabrics and glassware, food and drink and music.\n\nAnd people, performers as well as more ordinary Ferasans. There were many visitors to the ship, representatives from nearby worlds and colonies as well as the cadets of the Surefoot, taking in a cacophony of sights, sounds and smells with a mix of interest, wonder, curiosity.\n\nAnd in Rrori's case, trepidation at being surrounded by scents that were like his own people, but at the same time not. And it extended to more than their scents: their size, how they looked and moved and reacted to his presence. It reminded him too much of that ancient Terran video that Jonas insisted they all watch one evening, where dead humans were for some reason being reanimated inside a shopping complex to consume the flesh of the living, looking human but certainly not acting in that way. It generated a psychological uneasiness that Kit described for some reason as an 'Uncanny Valley'.\n\nHe hoped he would get over it, and focus on his intrigue at seeing the divergences between his people and the Ferasans in the millennium since the Diaspora. It might even be worked into a report, one that would help him recover the academic credits he lost last month in the debacle over the Rising Star.\n\nSpeaking of which, he turned to see a happy-looking Jonas holding hands with their Rigelian colleague Soolamea, despite the general ban on Public Displays of Affection while in uniform, as they watched two Ferasan acrobats juggle blades, occasionally tossing them to each other without any warning. Jonas winced each time they did that. \"They call this entertainment? My heart won't slow down!\"\n\nSoo nudged him, smiling. \"You don't seem to mind that when I make your heart do that.\"\n\nBehind them, Giles Arrington smirked and leaned into a distracted-looking Sasha. \"Do you think we make other people nauseous when we act like that?\"\n\n\"Forgive the correction, Friend Giles,\" Kit spoke up in front of them, never taking his eyes off of the demonstration. \"But in grammatical terms, you two are nauseous, in that you are a force that makes the rest of us nauseated.\" He smiled to himself, pleased to have offered elucidation.\n\nNext to them, Eydiir and Neraxis focused on the display, the Capellan's arms folded across her chest. \"It is similar to an exercise my people perform, to practice in throwing and deflecting a kligat. I still possess a scar on my right breast from the one time when I was distracted.\"\n\nThe Bolian glanced at her. \"I wondered about where you got that.\"\n\n\"And yet you haven't asked before now?\"\n\nNeraxis shrugged. \"Didn't want you thinking I was staring at your boobs. That would be creepy.\"\n\n\"So instead I'm thinking you've been secretly staring at them. Which is not at all creepy.\"\n\n\"Caitian!\"\n\nRrrori spun in place, his hackles rising at the approach of a tall, broad-shouldered indigo-furred Ferasan female, clad in leathers and armour, her thin, hairless tail swishing behind her. He guessed that she was about his own age, and had a small litter of friends following behind her as she drew closer, and he asked, \"Yes? Can I help you?\"\n\nShe stopped before him, standing a head taller than him, honey eyes fixed as smacked her fist against her chest, declaring, \"I am FourthDaughter of Kesseth! Across the Trackless Veld I have journeyed to stand before you!\"\n\n\"Really? Because it looks like you just crossed the Promenade, but still, I'm flattered. I am Meow Rrori.\"\n\nHer flattened muzzle twitched and her eyes widened, and her friends reacted in similar manner. \"You have a name? What did you do to earn yourself that?\"\n\n\"I was born, for the most part. I was an exceedingly beautiful cub, and have only grown more attractive with time.\"\n\nShe stared at him in confusion, but quickly recovered, reciting her challenge once more. \"Across the Trackless Veld I have journeyed to stand before you! I challenge you, Meow Rrori! In the name of the Patriarch, I challenge you to fight me!\"\n\nHe stared up at her. \"Thank you, no.\"\n\nRrori started to turn away, but FourthDaughter reached up, grasped his shoulder and spun him around again. \"But I challenged you! You have to accept!\"\n\n\"Why?\"\n\n\"Because to refuse would bring great shame to you and your Pride!\"\n\nHis furred brow furrowed. \"I have a clan, not a Pride. And no, I don't think it would bring them shame. I think the only shame would be in having a needless fight where one or both of us is hurt, or worse.\"\n\nHer friends drew in closer, even as he felt his own Squad do the same. The Ferasan female sneered. \"I call you Coward for not accepting my challenge!\"\n\n\"You can call me whatever you like. Your opinion of me means nothing.\"\n\nShe was stunned, clearly unable to process what he was saying, and glanced at her friends. \"B-But I'm challenging-\"\n\n\"Yes, very. But I'll forgive you because you have a certain charm. And we have different ways of challenging ourselves.\" He motioned to his friends. \"Come on, let's see what else there is-\"\n\n\"No, wait,\" FourthDaughter glanced at him, and then the others, before asking, \"How do your people challenge themselves?\" She glanced at the humans, Capellan, Qarari, Bolian and others. \"Especially when dealing with so many inferior races?\"\n\n\"'Inferior races'?\" Neraxis repeated archly.\n\nRrori smiled. \"We have ways.\"\n\n*\n\nIn another part of the Shroud, Hrelle and Kami walked closely together, taking in similar sensory inputs, keeping a distance from the cadets whose scents lingered in the air if not their actual bodies. Kami kept an arm wrapped around her husband's, mimicking this with the tips of their tails as they noted the jewellery and other items of Ferasan art. \"Do you see a theme running through these?\"\n\nHrelle hadn't, more focused on the Ferasans who were eyeing them as the couple walked by, but answered, \"Of course. But I'll let you feel better by telling me.\"\n\n\"You're too kind. It's all martial: weapons, shields, battles, hand to hand combat. Even the Pride-based art depicts their going into battle.\"\n\n\"What did you expect? You're not going to see a Ferasan's soft and tender side. There's none to find.\"\n\n\"I don't believe that.\"\n\n\"Believe it. I've met them. They're worse than Klingons. At least Klingons have a sense of humour.\"\n\nShe nodded to an open archway. \"Look, they have a historical exhibit. Come, let's go learn something.\"\n\n\"But I thought maybe we could investigate the food court-\"\n\n\"Later.\" They entered, finding a darkened corridor that gently zigzagged, opening up occasionally to provide an overhead holographic display, accompanied by a male narrator's voice. As a lush planet of many greens appeared around a hot white sun, the voice announced, \"This is Ferasa Prime, home to our people, granted us by our Patriarch as our cradle, our castle, our Pridelands.\"\n\n\"It's beautiful,\" she noted, as images of verdant grasslands and shimmering cities with faces reflecting sunlight appeared.\n\n\"Cait is better,\" he groused. \"Come on.\"\n\nHe tugged at her arm to follow along without replying. In the next display area, images of Ferasan cities spread out over endless velds appeared, until it focused on one Ferasan in old-fashioned clothes standing on a rock, looking up longingly at the stars. \"We grew from a single tribe spread out over the T'Kathnal Veld, into a Phalanx of Prides, ready to reach out and touch the stars. But we were not yet strong enough, not in mind, and not in body. We needed to be stronger.\"\n\nIn the next display area, they saw holographic Ferasan scientists standing around a tall, muscular, sabretoothed figure, as the voice continued, \"And so, with the blessing of the Patriarch, we made ourselves stronger. Stronger, faster, wiser.\"\n\n\"Don't know about the last part,\" Hrelle quipped, as Kami nudged him.\n\nThe next area offered something more graphic: riots in an urban area, between Ferasans sporting different coloured banners. \"But there were those who chose to reject progress. They embraced a weak, false goddess, one who demanded that they remain stumbling and afraid, wallowing in gluttony, licentiousness and sloth.\"\n\n\"They left out lust,\" Hrelle muttered. \"The best one.\"\n\n\"Such was their hatred of progress that they took militant action against those who would deny us the stars,\" the narrator continued, \"Killing many innocents with their cowardly terrorist acts.\"\n\nKami was stunned. \"What? How can they get away with talking such shit?\"\n\n\"Who's out here to refute it besides us?\"\n\nThe next area offered images of huge multi-generation ships leaving the planet. \"And when their meagre courage escaped them, they fled, to settle elsewhere, to spread their lies.\"\n\nKami cursed and stormed out, Hrelle quickly following to find her in the Promenade again, Hrelle noting, \"Well, I don't know about you, but I'm convinced: Caitians are the worst.\"\n\nHer face was twisted with anger. \"Can you believe they would spout that crap?\"\n\n\"To be fair, it would be bad propaganda if it told the truth about what really happened. They have to keep some things under wraps.\"\n\n\"Well, you know all about that.\"\n\nHe looked at her. \"Excuse me?\"\n\n\"Those lies you told Sasha, that your attitude was all about cultural schisms, instead of your time in the Pits.\"\n\nHe shrugged, pretending to be distracted by some floating attraction on the Promenade. \"She already knows I spent time with the Orions.\"\n\n\"She doesn't know the details.\"\n\nHrelle looked at her resolutely again. \"And she doesn't need to know. Is that understood?\"\n\n\"Captain?\"\n\nHrelle turned to see a small party of Ferasans approach, led upfront by Consul Treshek and SecondSon, the younger of the two striding a little faster and towering over Hrelle, sneering with naked contempt. \"No... you cannot be the Beast! The one from the videos! You are fat and old!\"\n\nHrelle suppressed his revulsion at the young cub's presence, and his mention of the Orion tapes. \"Please, no flirting in front of my wife, she gets jealous.\"\n\n\"SecondSon, step back!\" Treshek barked as he joined them, grey eyes gleaming as he regarded the Caitians. \"And be respectful to our guests.\"\n\nThe cub stepped back, but he remained disdainful. \"I am not impressed with him.\"\n\n\"Whereas, I'm amazed by you,\" Hrelle replied. \"Mostly that you managed to survive to this age without chasing your own tail off a cliff.\"\n\nTreshek chuckled. \"Please forgive the impulsiveness of youth, Captain.\" He held out a hand. \"A pleasure to meet you, sir.\"\n\nHrelle stared at the offering - and then accepted it. \"And you. This is my wife, and our Ship's Counselor, Kami.\"\n\nThe Ferasan turned to her and nodded politely. \"Among our people, females are prized - but few hold positions of high authority. They are better suited for.. other functions.\"\n\nKami smiled politely. \"Fortunately, our people recognise that a woman's functions don't just reside below the belt.\"\n\n\"Of course, of course.\" He nodded to the exhibit. \"And what did you think of the historical display?\"\n\n\"Utter shit,\" Kami replied without hesitation.\n\n\"You're quite right,\" he admitted, with equal lack of hesitation, relishing the reaction from the visitors as well as SecondSon. \"Total nonsense, and I am thoroughly embarrassed by it. But it was what was approved by the Patriarch's Council, and I must abide by it.\" There was a glint in his eye. \"But that doesn't mean I have to like it.\"\n\nHe breathed out. \"Captain, Counselor, while my people continue with the bartering for supplies, I would very much like to invite you two to a private dinner, and a conversation, one where we can learn something. There are those among us who would benefit from that.\" He gave SecondSon a reproving look as he added, \"Speaking of which: isn't there something you were supposed to say, cub?\"\n\nThe young Ferasan scowled, gnashing his fangs in some token protest, barely able to look at Hrelle as he growled out, \"I... apologise for disturbing you in the performance of your duties with my challenge.\"\n\nHrelle grunted. \"Forget about it. I was young and stupid once, too.\"\n\n\"Thank you-\" Then SecondSon frowned. \"What?\"\n\nTreshek chuckled again. \"Please, come. There's no reason why a set of intelligent beings such as ourselves can't at least be cordial with each other...\"\n\n*\n\nUSS Surefoot, Deck 1, Bridge:\n\nT'Varik was in the midst of authorising the payment for replicator-grade proteins when Cadet Falok at Ops announced, \"Commander, there is an incoming Starfleet vessel: the Impala.\"\n\nShe naturally suppressed any reaction, though she acknowledged that if she did react, it would logically be with surprise: the Impala was on an assigned patrol course elsewhere in this sector, and to her knowledge was not scheduled to rendezvous with the Surefoot or any other vessel here. \"Hail them, Cadet.\"\n\n\"No need; they are hailing us.\"\n\nThe Vulcan woman set aside her PADD and straightened up slightly. \"Onscreen.\"\n\nBefore them, the image of the Bloodstained Shroud and the surrounding vessels was replaced by another, larger Starfleet bridge, and a familiar middle-aged, copper-haired human woman in the Captain's seat. \"Where's Hrelle?\"\n\n\"Greetings, Captain Arrington. How may we be of assistance?\"\n\n\"I asked you where Hrelle was.\"\n\nT'Varik raised an eyebrow. \"There are several Hrelles onboard: a Captain, a Counselor and a Cadet Squad Leader. Perhaps it would facilitate matters if you used their proper forms of address.\"\n\nArrington scowled. \"You know I mean Captain Hrelle! Where is he?\"\n\n\"Captain Hrelle is onboard the Ferasan ship.\"\n\n\"What? Why? Why is he meeting with them? Why did you leave your assigned route? Why are we detecting transporter activity between your two ships? What's going on here? Well? Why aren't you answering me?\"\n\n\"I was waiting for a moment when you stopped asking questions. We have received orders from Starfleet on behalf of the Caitian Ambassador to scrutinise the Ferasan trade delegation in this sector; members of the crew and the cadets are onboard their ship, ostensibly for shore leave but in fact to gather intelligence towards that end. We are also engaged in a standard supply trade, hence the additional transporter activity.\"\n\n\"The Caitians? Why would they be interested in what the Ferasans were doing here?\"\n\n\"Given their history I would have thought that self-evident, Captain.\"\n\n\"Don't get lippy with me, Commander! What do the Caitians think they're doing, ordering a Starfleet vessel around?\"\n\n\"No lippiness was intended, Captain Arrington. As for your accusations, the orders were approved by Starfleet.\"\n\n\"I want to see copies of those orders!\"\n\n\"I will transmit these in due course, once I have completed my other duties.\"\n\n<br >\"NOW!\" Arrington demanded.\n\nFor a moment, T'Varik almost sought a reason to delay this further - until she recognised that her attitude since the transmission opened was needlessly, deliberately baiting the other woman.",
        "And she acknowledged to herself why: in their last encounter, Arrington had exacerbated her general unpleasantness and duplicity by verbally abusing her nephew, Squad Leader Giles Arrington, and at one point tried to physically strike him, stopping only when Captain Hrelle caught her by the forearm and threatened her.\n\nThe matter was never formally raised, but obviously T'Varik had never forgotten it. And she found that despite numerous meditative exercises since that time, the execrable image of the woman raising her hand to smack Giles - one of T'Varik's cadets, under her direct supervision - continued to remain a primary memory association, along with the residual emotional reactions that T'Varik sought to repress.\n\nThe likelihood that T'Varik's current dealings with Captain Arrington were influenced by this memory could not logically be ignored, and she couldn't help but remember how she admonished Captain Hrelle for his own unprofessional attitude towards the Ferasans because of past associations - especially as Arrington was the senior officer here. \"Of course, Captain. I will transmit a copy of our orders to you immediately. Mr Falok?\"\n\nBehind her, the Vulcan cadet replied, \"Aye, Ma'am. Transferring now.\"\n\n\"Is there any other way I can assist you, Captain?\" T'Varik asked.\n\nArrington cut off the transmission.\n\n\"Commander,\" Falok started after a moment, \"Should we alert Captain Hrelle of the presence of the Impala?\"\n\nT'Varik considered it, but then replied, \"No, Cadet. I am certain that Captain Arrington will make her presence known without our assistance.\" She was certain that Captain Hrelle had enough on his proverbial plate to deal with without having to worry about Lucille Arrington again.\n\n*\n\nBloodstained Shroud, Recreation Room:\n\nSasha tried to ignore the faded stains of blood on the walls as she watched a select number of cadets and Ferasans squaring off, dribbling and passing a freshly-replicated basketball between them. The room was bare, with marked sections on the opposite walls that approximated where the two baskets would be in a proper play of the Terran game.\n\nOnce the Ferasans were given the basic rules of the game and grudgingly accepted the notion of competing in something that didn't involve weapons, the Surefoot cadets selected their best players: Giles, Eydiir, Rrori, Gamma Squad's Saurian Security cadet Orogg, and Beta Squad's Science Specialist Charlie Ingalls, a beanstalk of a human who towered almost as high as Orogg. They had removed their jackets and shirts and played in their vests, moving with a practised ease, expertly passing the ball to each other to reach their intended targets, time and again.\n\nTo their credit, the Ferasans, led by FourthDaughter, made a valiant effort considering they had never heard of the game before today, their superior strength and speed compensating for their lack of experience.\n\nBut as she watched the game, she couldn't help but notice how often their efforts were stymied by their lack of teamwork, by their desire to stride forward and score a point for their own personal glory, and more than once they ended up tripping each other over on the court.\n\nIt made sense. After the embarrassing incident on the bridge, Sasha had done some research on Ferasans and their dealings with other races. Initially misidentified as the Kzinti, a race depicted in some ancient Terran speculative fiction because of their similarities, the Ferasans had repeatedly attempted to attack both Terran and Caitian territories over the centuries, but were always defeated with relative ease.\n\nAnd historians concluded that the fault lay with the Ferasans themselves, both because they tended to launch attacks without proper preparation, because of course preparation would imply - gasp! - that the Ferasans were less than perfect, and because they prized personal over group victory.\n\nThat's why she thought Rrori's choice of game was ideal for illustrating the differences between the groups. That, and she was notoriously bad at it and no one would think of involving her as anything more than a spectator with the other cadets.\n\nAnd it took her mind off of the news that Kami had dropped, about her and her Dad considering having children. Not that it was a bad thing - in fact, Sasha was pleased about the notion of finally being a big sister, even a half-sister - but it was killing her that she couldn't tell anyone about it until the couple had finally decided on it-\n\n\"This is most fascinating!\" Kit declared excitedly beside her, round eyes flared as he observed the match. \"Respected Squad Leader, do you think this could help forge a positive relationship between our respective groups?\"\n\nShe was about to respond, when she watched one of the Ferasans respond to Rrori successfully faking a pass to send the ball to Orogg by striking the Caitian in the muzzle, sending him to the ground.\n\nThe match stopped, and Sasha strode forward. \"Hey! We told you no contact!\" She glanced down at Rrori, who was shaking his head and helping himself back to his feet.\n\n\"This is a stupid game!\" the Ferasan male declared. \"For children! And you are all nothing but a miserable collection of aliens!\"\n\n\"Then why are you losing?\"\n\nSwiftly the male growled and swung out again.\n\nBut Sasha was ready for him, dodging and striking with a move she learned in the Caitian martial arts of K'Gressor, doubling him over before delivering a second kick that sent him fully to the floor, astonishing his friends.\n\nShe readied to defend herself again, and felt the other cadets draw up behind her for backup. But the Ferasans just watched her, jaws dropped, leaving FourthDaughter to proclaim, \"Who taught you that? That is an attack move from the K'Gorrdor discipline!\"\n\nShe straightened up. \"The Caitians call it K'Gressor. I'm assuming your two peoples came up with the same-\"\n\n\"Why would the Caitians teach a human their combat arts?\" a male sneered.\n\nSasha folded her arms across her chest. \"My father is Caitian.\"\n\nIt was as if she had stopped time around the Ferasans. The one she knocked down helped himself back up and sniffed the air. \"You are part Caitian? You're a mongrel?\"\n\nShe stiffened, as her fellow cadets drew around her protectively. \"Call me that again, you kussik. I dare you.\"\n\n\"She is Caitian.\"\n\nAll turned to the unfamiliar male voice: an adult Ferasan, tall but stooped, with sabreteeth shorter than most, dressed in leathers but lacking any of the weapons or other intimidating paraphernalia, his hands clasped together before it almost as if in prayer. He focused on Sasha as he continued to speak, \"Her thoughts are Caitian, her feelings are Caitian. When Captain Hrelle took his place in her mother's heart, she took him in hers.\"\n\nSasha felt herself grow uneasy in the presence of this new arrival, not helped by FourthDaughter's contemptuous response to him. \"What are you doing here?\"\n\nThe older male appeared uncharacteristically unfazed by the attitude given him. \"I was sent by Consul Treshek to invite Squad Leader Sasha Hrelle to join her father and his wife at a formal dinner.\"\n\n\"He did?\" Sasha asked.\n\nHe nodded. \"He did not wish to disturb you with a communication, and sent me.\" His furred brow furrowed further. \"I believe his exact words were, 'Sorry to ruin your time, Runt of the Litter, but duty calls'.\"\n\nShe smirked; yes, that was her Dad. She looked to her friends. \"See you guys back on the ship. Try not to kill each other.\"\n\n\"Yes,\" FourthDaughter sneered at the new arrival. \"Leave, Telepath. Your presence offends us.\"\n\nSasha was shocked that they would treat one of their own kind like this, especially in front of strangers. But again, the male remained composed as he indicated the doorway out.\n\nShe followed the older male out of the court and down some corridor, seeing no one else. He was quiet, until he announced, \"Thank you.\"\n\n\"Excuse me? I'm not sure what you're thanking me for.\"\n\n\"Your thoughts. You felt sympathy for the way my people treat me. I am not accustomed to such feelings.\"\n\nShe slowed down, staring at him. \"FourthDaughter called you 'Telepath'-\"\n\nHe stopped and looked back, smiling warmly. \"Yes. When my abilities surfaced during my first Season, I was taken, trained and named as a Telepath, my gifts enhanced, before being assigned to serve this Pride. I have done so faithfully for many years now.\"\n\n\"Really? They don't seem-\"\n\n\"Grateful?\" He shrugged. \"My people recognise and value the talent, but still believe that it is dishonourable. I am not trained in fighting, am not allowed to carry weapons, and despite my record I am unlikely to have my deeds considered worthy of granting me a name other than Treshek's Telepath.\" He offered an approximation of a smile. \"Thank you again for your thoughts.\"\n\nSasha frowned now. \"I don't know if anyone has ever told you, but-\"\n\n\"Forgive me, Squad Leader, but we are unable to switch off our gifts. It is a burden that overwhelms us at times, causes many mental health issues, and has us avoiding other people as much as possible to keep from drowning in their thoughts.\"\n\nShe shook her head, trying to grasp what it would be like to be constantly in other people's minds, hearing their thoughts, unable to switch it off. It had to be-\n\n\"Terrible, yes,\" he confirmed. \"At times.\" He glanced around, as if there might be people in this otherwise deserted corridor to hear him speak besides Sasha. \"But I must confess to feeling envious of you and your people. It is... refreshing... to hear such varied thoughts, not just from different races but... but thoughts of camaraderie, of friendship, and even love, all genuine. You are not obsessed with ambition or aggression or suspicion.\" He nodded. \"You are most... fortunate.\"\n\n\"Umm... thank you. Could we maybe-\"\n\n\"Take you to your father? Yes, my apologies. I indulge myself too much sometimes.\" He continued, Sasha following, turning a corner and indicating an open doorway where a Ferasan guard stood outside. \"Please, enter.\"\n\nShe was distracted by the sight of the guard outside what was supposed to be a formal dinner, so much that she had stepped into the room before realising that it was completely empty.\n\nThen all thoughts were swallowed up in the pain of a neuroleptic beam striking her from behind. She collapsed, all motor control lost but still feeling the impact of her head striking the bare metal floor. Before unconsciousness swallowed her fully, she heard Treshek's Telepath say, \"Prepare her for dinner...\"\n\n*\n\nThe cadets emerged back into the Promenade, noting the Ferasans keeping a respectful distance from them following the basketball game - for which Eydiir was grateful. She did not like them, and was beginning to understand how Rrori felt.\n\n\"Hungry?\" Giles asked her, nodding to the food stalls offering numerous grilled and fried meats - and no vegetables whatsoever - their collective scents enticing. \"I doubt if Sasha will bring back a doggy bag from her dinner.\"\n\nThe Capellan eyed him. \"You believe they are serving dog?\"\n\nHe grinned. \"An old Terran expression; if you couldn't finish your meal in a restaurant, you could ask to have the rest taken home in a bag, with the excuse of bringing it back for your dog.\"\n\nShe grunted; humans loved expounding on their many little slang words and expressions. \"Knowing Sasha as we both do, how likely is it that she'll not finish a meal?\"\n\n\"Mr Arrington.\"\n\nEydiir stopped along with Giles and the rest of them at the woman's voice, turning to see an older Terran woman with red hair and a Starfleet uniform - with four Captain's pips - approach. Giles' face reddened. \"Aunt Lucille?\"\n\nThe woman stopped and stood ramrod straight in front of them, her face hardened and her hands behind her. \"That's not the correct form of address when speaking to a superior officer, Cadet.\"\n\nEydiir stiffened as well. She had been made aware via Sasha of the rift that had arisen between Giles and his family, because of the latter's attempts to coerce Giles into spying on Captain Hrelle. To his credit and his honour, Giles had refused, and as far as she knew, while he heard from his father from time to time, none of the others had made contact with him since then.\n\nNow beside her, Giles straightened up. \"Apologies... Captain.\"\n\nArrington fidgeted a little, and for a second Eydiir thought that the other woman might do that \"just kidding\" thing that humans seemed fixated upon. But instead she produced a small, brightly-wrapped and ribboned box. \"Your father sent this: your Christmas present. Since you couldn't be bothered to come home, I've had to serve as a messenger.\"\n\nGiles grudgingly accepted it. \"Thank you, Captain. Did you... did you come out here to deliver this?\"\n\nShe made a harsh sound. \"Do you honestly think I would divert my ship light years just to do that? Where's Hrelle hidden himself?\"\n\n\"Uh, he and Counselor Hrelle having a private dinner with Consul Treshek.\"\n\nThe older woman grunted. \"Of course, a private dinner, that's typical of Hrelle.\"\n\nSuddenly Eydiir found herself saying loudly, \"That's not the correct form of address when speaking about a superior officer, Captain.\"\n\nNow Arrington turned to her, drawing closer with a face of cold hostility. \"Who the hell are you?\"\n\nEydiir came to attention. Just. \"Cadet Eydiir Daughter-of-Kaas, reporting as ordered, Ma'am.\"\n\nArrington sneered, practically in her face now. \"'Daughter-of-Kaas'? What kind of name is that supposed to be?\"\n\nShe was obviously trying to intimidate her - a waste of time as far as the Capellan was concerned. \"It's supposed to be my kind of name.... Captain.\"\n\n\"And would you care to explain your disrespectful remark?\"\n\n\"No disrespect was intended, Captain,\" Eydiir lied, \"I was merely reminding you that Captain Hrelle is your superior officer, by virtue of his seniority. And that you should show him the proper respect, the same respect you want and deserve from us.\"\n\nArrington's eyes widened, and her pink face reddened. \"How dare you-\"\n\n\"Excuse me, Ma'am?\"\n\nArrington twisted about. \"And who the hell are you, you little brat?\"\n\nJonas never flinched, merely stood at attention with wide open eyes and polite smile. \"Deputy Squad Leader Jonas Ostrow, reporting as ordered, Ma'am. Forgive the interruption, Captain, but I very much wanted to meet you, and thank you.\"\n\n\"Thank me? What for?\"\n\n\"You inspired me. When I started, my Secondary study was Medicine, but then I read about how you took command of the Columbia when your Captain was injured during that Tholian attack, and you managed to get your ship and crew to safety. It was amazing! Now I've switched studies to Command. It's not been easy doing that mid-course, but it'll be worth it, if I can be half the officer you are.\" He held out his hand. \"May I have the pleasure of shaking your hand, Ma'am?\"\n\nArrington stared, dumbfounded, before finally offering her own hand. \"Yes, well, you're welcome, Deputy Squad Leader. Good luck with that.\" She stepped back, giving a glare at Eydiir and Giles before finishing with, \"Carry on.\"\n\nAs Arrington departed, and Eydiir stood amazed at Jonas' expert defusing of the situation, even if he partly lied to get what he wanted, Neraxis leaned in and asked, \"How the hell did Scrappy manage to stay a virgin for so long?\"\n\n<br >*\n\nBloodstained Shroud, Consul's Quarters:\n\nLike most everything else involving the Ferasans, the dining room was stark and Spartan and sharp and uncomfortable to the Caitian visitors, but the view from the wide observation windows of the Surefoot almost made being there worth it for Hrelle.\n\nTreshek noticed him looking out. \"I suppose you do not often get the opportunity to see your vessel from the outside, Captain. You must be proud.\"\n\nHe grunted, but acknowledged, \"Yes, Consul, I am. She's a fine old ship.\"\n\nSitting opposite him, SecondSon sneered. \"Proud? Of that old wreck? It has one phaser bank and, what? A dozen photon torpedoes? That's nothing!\"\n\nHrelle stared back. \"Size isn't everything, cub. You must have said that to others enough times.\"\n\nThe young Ferasan remained defiant. \"My Pride's flagship could blow your little wreck to pieces!\"\n\n\"Yeah, probably.\"\n\nSecondSon blinked in confusion, and then continued. \"Did you not hear what I said? I insulted your ship!\"\n\n\"It wasn't an insult, it was a fact. The Surefoot has minimal combat capabilities, and is over 75 years old; a loud enough fart onboard her could probably put her in Spacedock for repairs.\"\n\n\"We could crush it! Just as I could crush you!\"\n\n\"So? I could get crushed by having a ton of shit dropped on me. It's still shit.\"\n\n\"SecondSon,\" Kami butted in, leaning forward and smiling, obviously trying to defuse the situation. \"You said 'my Pride's flagship'. Are you not a member of Consul Treshek's Pride, then?\"\n\n\"No, Counselor, he is not,\" Treshek answered. \"His Pride, like mine, is prominent on our world, and when he heard I was taking the Shroud to this sector, his Pridemaster asked me to take SecondSon onboard as my subcommander.\"\n\n\"Oh?\" She stayed focused on the cub, offering an impressed look. \"Such responsibility at your age! But you bear it well.\"\n\nSecondSon bristled, looking suspicious, before acknowledging grudgingly, \"Yes. Yes, I do. You are clever, for a female.\"\n\nKami smiled again. \"Why thank you, SecondSon. I can't tell you how that makes me feel.\"\n\n\"Actually, she could,\" Hrelle corrected dryly. \"But it probably wouldn't end well.\"\n\nThe door slid open, and an older Ferasan male curiously bereft of weapons and armour entered, carrying a tray of golden drinking cups, setting one before each of the four at the table, as Treshek took control of the conversation again. \"Having studied the history of our peoples, I have seen that we have far to travel before we can acknowledge common ground.\n\nBut that does not mean we shouldn't try. After all, it was once considered impossible that the Klingons and the Federation could end up allies. Or for that matter, many of the founding members of the Federation itself.\" He lifted up his cup. \"Here's to... What Will Come.\"\n\nHrelle glanced at Kami, before lifting up his own cup. \"What Will Come.\" His tongue confirmed what his nose had already told him: the Ferasan drink was strong and bitter, like so much else about their people.\n\nBut then he checked himself. Treshek had proven to be a surprise, offering candour and civility and a calming influence to the hotheaded SecondSon. The older Ferasan, who was about Hrelle's age, was making this almost bearable. He set down his cup. \"Is that why you're out here, Consul? To facilitate What Will Come?\"\n\n\"Indeed, Captain. Much has been said of my people, and not all of it true; understanding will only come about when ignorance is swept away.\" He smiled. \"And if we can manage a profit as well, that would not be unwelcome either.\"\n\n\"And what do you have to offer the Galaxy?\" Kami asked, sipping at her own drink without showing any negative reaction.\n\n\"Well, in addition to the sights to be found on Ferasa Prime, we have abundant riches of topaline, kivas, trillium... and of course our own skills as warriors, hunters, bodyguards. With the Treaty of Sirius, our young people do not have the opportunity to win their names in battle as they might have in times past.\" He shrugged. \"What else can we do?\"\n\nHrelle shrugged back. \"You can always expand the definition of what constitutes honourable service. One can serve their people through more than combat: I know that diplomats, scientists, doctors...\" He glanced up at the elderly male who had brought in the drinks. \"Telepaths... they all can contribute in ways far more profoundly than through battle or single combat.\"",
        "\"You talk nonsense!\" SecondSon accused.\n\n\"The scientists who developed the disruptor cannons on your ships,\" Kami pointed out, \"Who keep the engines of your vessels running at peak efficiency, who heal injuries that get your warriors back on their feet to fight another day, they all play important roles too.\"\n\nThe young Ferasan grunted. \"I would expect a female to say something like that.\"\n\n\"Yes,\" she agreed. \"Because it makes sense. Great Mother forfend that you listen to something sensible.\"\n\n\"Great Mother,\" SecondSon spat. \"Heresy! Your false goddess has no place in any discussion!\"\n\n\"False goddess?\" Kami raised an eyebrow at him. \"She was in ascendant for a thousand years before your Patriarch was invented-\"\n\nTreshek held up a hand, smiling. \"The first rule they taught me when I trained to be a Consul was never discuss Sex or Religion; no one can win that discussion. Don't you agree, Captain?\"\n\nHrelle shrugged. \"I heard it was Politics and Death. And I always thought that the aim of any discussion should not be to win, but to learn. Walking in with an open mind and an open heart-\"\n\nSecondSon spat on the floor. \"Weakling nonsense! Is that what you Caitians are? Soft, effete female-worshipping babies? No wonder we improved ourselves!\"\n\n\"If you really improved yourselves,\" Kami pointed out sweetly, \"Then why has every attempt you've made to conquer us, or Earth, been met with your defeat?\"\n\n\"Because we're arrogant,\" Treshek answered first, enjoying the reaction he received from her at his honesty. \"And we always go in unprepared, because preparation would imply weakness. We are obsessed with strength and prowess, and neglect so many other desirable qualities, both as individuals, as Prides and as a people. We mewl in the night like cubs about our fierceness, but in the harsh light of day we are still cubs.\n\nThere is much about my people that I would see change, Counselor. If we are fortunate, perhaps an increased exposure to the rest of the Galaxy will help us grow up a little?\"\n\nHrelle regarded the Consul differently. Not necessarily with more trust, but with less suspicion. \"You might want to start that growth with not having a Telepath in the room unannounced, secretly probing your guests' thoughts.\"\n\nKami frowned, looking up at the male who had brought in the drinks. \"You?\" Then she looked at her husband. \"How can you tell?\"\n\n\"Past experiences with telepaths have left me sensitive. Also, he carries no weapons and wears no armour, and has fewer colours on his belt... and I've been watching his moments of concentration as he focused on us.\" Hrelle looked up at him. \"Well? Give him your report, Bubulah.\"\n\nTreshek's Telepath glanced at the Consul with embarrassment, receiving a nod before complying. \"He was given orders by the Caitian Ambassador to investigate us. Apart from the disagreement with our historical recollection, and a contempt for SecondSon's attempts to engage him in combat, I am detecting nothing else. The female is conflicted, reacting negatively to our propaganda and attitudes but wanting to remain cordial; her mate's mental state is also prominent in her mind.\"\n\nKami leaned back, folding her arms across her chest, her expression sharp. \"I could have told you all that without being probed without my permission.\"\n\nTreshek's Telepath offered an apologetic half-bow, As Treshek spoke up again. \"Forgive the subterfuge, Counselor, Captain, but as a senior member of the Ferasan Consulate Offices I am required to protect myself as well as my people's interests.\"\n\n\"Yeah,\" Hrelle muttered, still staring at the telepath. \"You want to tell your master what I'm thinking I'll do now if you keep reading our minds?\"\n\nTreshek's Telepath shuddered, and looked to the Consul. \"Perhaps it is time for dinner?\"\n\n\"Excellent idea!\" Treshek motioned for the Telepath to proceed; the latter departing as the Consul continued. \"But, you must admit, that while we have much to learn from our cousins, you have things to learn from us?\"\n\n\"Perhaps. Though maybe not in the way you believe.\"\n\n\"No? What about our strength of Pride? Nearly every member of my crew and staff are members of my Pride. We have our bond, our unity-\"\n\n\"Caitian clans have strength,\" Kami indicated. \"We have unity. But our strength and unity is built on love and loyalty. And unlike you, we don't limit what our females can achieve, and we don't have telepaths we treat like indentured servants.\"\n\nAs if on cue, Treshek's Telepath returned, guiding other Ferasans to set large cubes covered in cloths. Hrelle stared at these, only half-listening to Treshek respond. \"These are minor societal differences, understandable given the centuries since our bifurcation. We have other things we share: our desire for the hunt, the kill.\"\n\nHrelle's hackles rose as he stared at the cube set before him on the table, smelling and hearing something alive beneath the cloth. \"Consul... what is going on?\"\n\n\"I have something special for you,\" he promised, \"A rare delicacy, and something we don't display to outsiders; we'll offer them our grilled meats, and leave this for ourselves. Have a look.\"\n\nHrelle lifted up the cloth, Kami doing the same for her own, as Treshek and SecondSon followed suit. The Caitians stared at plump, coiled snakes with mottled apple-green skin and wide mouths that hissed from within their cages. \"What is this?\"\n\n\"Wentilian condor snakes. Quite rare, a special treat, particularly to have them live.\"\n\nHrelle looked up to see SecondSon open the door to the caged snake sitting in front of him, reaching inside and drawing it out. The snake unfurled, and then wrapped itself around the Ferasan's arm, squeezing tightly even as SecondSon's grip around the snake's neck - before snapping it with a sharp crack that made Kami's wince.\n\nThen Treshek did the same with his own snake, casually tossing the now-emptied cage before him to the floor to make room on the table for his meal. They extended their claws and pierced the skin, making black-red blood spurt here and there.\n\nKami returned the cover to her own meal's cage. \"I've lost my appetite.\"\n\nHrelle did the same. \"Thanks for the meal, Consul, but I had helpless creature for lunch.\"\n\nNext to SecondSon, Treshek looked up at the Caitians with a mixture of bemusement and derision. \"Not so helpless; they do offer some amusement.\" He chuckled. \"Does it truly disgust you to have to kill your own food? Isn't it more honest than having replicated proteins disguised as meat?\"\n\n\"Honest? Maybe. But it's also unnecessary. We've reached a level of technology where living animals do not have to be slaughtered for food.\"\n\nSecondSon wiped his muzzle on his sleeve. \"Maybe we should get you some vegetables to nibble on?\" He chuckled to himself.\n\n\"Sure, Snagglepuss. We'll start with your brain.\"\n\nTreshek laughed at that. \"Come on, Captain! You must have killed and eaten living things meat in your day! Your time as a prisoner, for instance? With no access to your fancy replicators?\"\n\nHrelle tensed. \"Of course; eating vermin beat starving, but that doesn't make me nostalgic. I also spent my time shitting in a hole in the floor; that doesn't mean I'm gonna give up a proper toilet with The Three Seashells.\"\n\n\"But the thrill of the Hunt-\"\n\n\"What hunt? You reached into a cage and drew out a creature that never had a real chance at fighting back! Go up against a bear or a mugatu or a razoreel with just your claws and fangs, and then you can boast about your predatory prowess!\"\n\nTreshek looked ready to rip into the belly of his snake, as if to catch up with SecondSon, who allowed blood and flesh to spatter on his clothes and table, but then he looked up at the Caitian. \"Are you really attempting to be superior to us, Captain? Because I've seen what you really are.\" He set down the corpse snake and drew out a small remote from within his armour, pointing it at the wall behind SecondSon.\n\nThe stark wall was replaced with bright moving images and sounds, a kinetic play of two characters grappling with each other in a brightly-lit pit, as unseen spectators cheered and jeered and catcalled.\n\nHrelle's heart triphammered, and his stomach plummeted into his boots.\n\nThere he was, on the screen: gaunt, scarred, tailless and naked, patches of fur missing from his body, roaring as he punched and kicked and bit into the hide of an equally-naked Nausicaan, its facial claws broken but its spirit still strong as it fought back, each of them drawing blood from the other as the roars of the unseen crowd in the Orion fighting pit grew to a frenzy.\n\nHe knew about the Orion deathmatch videos, of course, knew they were popular in certain circles despite being banned in the Federation, for obvious reasons. But he never saw them. Why would he?\n\nSecondSon looked over his shoulder casually, in time to see the younger Hrelle snap the neck of the Nausicaan, sending it to the ground while he roared in triumph. \"Hmph, good one.\"\n\nHrelle felt Kami's hand on his arm as he rose onto unsteady legs,looking away at Treshek. \"W-What are you d-doing with that-\"\n\nKami was on her feet as well, outraged. \"How dare you show that to my husband?\"\n\nTreshek looked up at her. \"Why? Didn't you know? It's what he is.\" His gaze narrowed. \"And it's what he's going to be again.\"\n\nHrelle breathed out hard through clenched teeth, but he looked at Kami and slapped his combadge. \"H-Hrelle to S-Surefoot.\" When there was no answer, he tried again, controlling his stammer completely now. \"Surefoot, answer!\"\n\nAs he realised the Ferasans were blocking transmissions, he felt a familiar stunning force strike him from behind, his ear filled with the cry of Kami as she, too, was stunned...\n\n*\n\nHrelle was no virgin to being stunned; as the vestiges of his consciousness returned to his control, he mentally forced control back to himself, struggling internally to awaken and be ready without actually moving and alerting whoever he knew would be monitoring his progress, in order to get the drop on them-\n\nUntil he heard the voice of Treshek's Telepath. \"He's awake. Wanting to surprise us.\"\n\nThen he heard Treshek chuckle. \"Good, good. Come on, Captain, we're wasting time.\"\n\nHrelle opened his eyes, aware of having been stripped to his briefs, his hands bound behind him with electronic cuffs. He was on the floor of a large cell, looking up at the Consul, the Telepath, SecondSon and numerous Ferasan guards standing at the other end. His head rang, there was a sharp pain at the base of his spine, and his mouth felt like a desert; he struggled to speak. \"W-Where's-\"\n\nTreshek nodded. \"Your wife is nearby, we'll bring her in momentarily to confirm her safety to you.\"\n\n\"If you've hurt her-\"\n\n\"I know, I know, there'll be no place where I'll be safe from your wrath, etcetera etcetera.\"\n\nHrelle forced himself to move, to try and get himself back to his feet; his arms were bound behind him, but they left his mouth, his teeth, unbound. \"Why are you doing this?\"\n\nSecondSon stepped forward. \"You will not deny me my chance at earning my name! We will step into the Pit, and I will-\"\n\n\"Go fuck yourself! Again!\" Hrelle looked to Treshek. \"This is what all of this is all about? Assaulting Starfleet personnel, kidnapping them, imprisoning them? So this mangy worthless cub gets a chance to get spanked and sent home crying?\"\n\n\"You fat old woman-worshipping weakling!\" SecondSon snapped. \"I'll kill you here and now-\"\n\nBut was drawn back by Treshek. \"No, you will wait until the Pit is ready, and your Pridemaster and elders are on the monitors to personally witness the outcome.\" He stepped forward now, focusing on Hrelle. \"Essentially, yes, Captain. As I'm certain you're already aware, although those Orion videos are banned within the Federation, they are quite popular among our people. You have gained a fearsome reputation as the Beast. And SecondSon here is dead set on challenging you, and being seen to challenge you.\"\n\nHe smirked. \"Granted, you're much older and, ah, substantial than you once were, but I bet you'll still put up quite a fight in our Pit. Certainly the information we received about your grappling with the Nausicaan slavers on the freighter Beholder months ago is proof of that.\"\n\nHrelle shook his head. \"I don't get it. Why should you care if Snagglepuss gets his name? You said he isn't even a part of your Pride!\"\n\n\"That is true,\" Treshek admitted. \"But his Pridemaster is influential within the Patriarch's Council. My doing this for his cub means he will ensure I get a full name. With that, I will gain much wealth and power of my own. My own Pride will be watching as well, and taking bets.\" He smiled. \"I have good money that you rip the arrogant cub's throat out.\"\n\nSecondSon glanced at him. \"What are you saying-\"\n\nTreshek never even looked back at him. \"Shut up, brat; two men are talking, and a spoiled, indulgent little shit like you wouldn't understand. By the Patriarch, if your Pridemaster didn't have such influence, I would have gutted you myself and fed you to my own cubs, so just stand there and be quiet. Captain, whether you are defeated by him and he gains his name, or you defeat him, and he dies with honour and perhaps a posthumous name, I will still get my own reward. I believe the humans call that a 'win-win scenario'.\"\n\nHrelle swallowed. \"And you... you think you can get away with all of this?\"\n\nTreshek shrugged. \"I am a Ferasan Consul. I have diplomatic immunity, as does everyone onboard my ship, as my employees. You can't touch us, Captain. Well? What do you say?\"\n\n\"I say you fatherless kussiks can go lick your mangy rat tails.\"\n\n\"Of course you do.\" Treshek looked to the Telepath, who nodded and departed. \"That's why we're moving swiftly to the resolution of this problem.\"\n\n\"What? You're gonna torture me into cooperating? Arseholes. I've been tortured by experts. I've had the shit kicked out of me more times than you can count.\"\n\n\"I'm sure,\" Treshek replied, \"But who said we were going to torture you?\"\n\nHis telepath returned, with- \"Sasha! Kami!\"\n\nThe pair were bound and missing their combadges, looking both afraid and defiant, and shoved into the cell. Hrelle rushed to them, only to have a pair of guards draw up and hold him in place. He looked to his family. \"Are you two okay?\"\n\nSasha nodded, gasping. \"Better than these fuckers will be when I get loose.\"\n\nTreshek chuckled. \"Give her fur, claws and a tail and she could pass for one of our people; I can see your influence in her upbringing, Captain.\"\n\n\"Esek,\" Kami growled, terrifyingly angry eyes fixed on the Consul, \"Whatever he wants... don't give it to him.\"\n\n\"Yeah, Dad,\" Sasha agreed. \"He can't hurt us. He wouldn't dare.\"\n\nTreshek smiled at Hrelle. \"Such loyalty. Such defiance. Such naivete. They don't understand what you understand, do they, Captain?\" He drew up to Sasha, reached up and played with strands of her honey-blonde locks, before walking behind her, stopping when Kami moved closer before she was held in place by another guard.\n\nWhen Treshek stood behind Sasha, he looked over her shoulder at Hrelle again. \"They have never been in the grip of someone who had control over them.\" He drew even closer, reaching around and stroking her neck, her throat, almost tenderly, smirking at her efforts to pull away from him. \"Absolute control.\"\n\n\"DON'T TOUCH HER!\" Hrelle roared, teeth bared, his guards barely able to restrain him.\n\nAnd Treshek stopped touching her - only to reach up and rake her right cheek with his claws.\n\nShe cried out, the harsh red stripes leaking blood, and Hrelle and Kami fought with their respective captors with increased ferocity. But it was futile.\n\nTreshek shot Kami a contemptuous look, before returning to stand before Hrelle once more, his voice soft, almost gentle. \"You understand the depths of suffering that one person can inflict on another without a glimmer of conscience to get in the way.\n\nSo... when I tell you that if you don't cooperate, I will take your wife and daughter out of here, and make sure that before they die, every male in my Pride has had a taste of them... you believe me. Don't you, Captain?\"\n\nHrelle stopped struggling. He looked past Treshek, saw the deep, dark scratches on Sasha's face, the blood streaming down in fingers to her uniform, saw the pain and the terror in her saucered eyes, and in the eyes of his wife, smelled the fear from them both.\n\nHis voice was a whisper, cold and quiet. \"Yes.\"\n\n\"So... will you swear to cooperate?\"\n\nHe nodded to his family. \"I swear, on their lives... I'll freely get in the Pit with SecondSon.\"\n\n\"No, Esek!\" Kami cried out. \"You'll be killed!\"\n\nSecondSon strode up to her, smacking her face with the back of his hand. \"You're much prettier with your mouth shut, female!\"\n\n\"Get him away from them,\" Hrelle hissed.\n\nTreshek looked over at the younger Ferasan. \"Keep your hands to yourself, cub! Save that for the Pit, and the Captain. You're going to need it when you face him, I promise you.\" He looked back at Hrelle again, nodding in satisfaction. \"Thank you for being reasonable, Captain... and thank you for sparing me the obligatory promise to come after me and make me pay for what I've done.\"\n\nHrelle fixed on him, his own voice just as low, but with no trace of amusement. \"I shouldn't have to promise it. Now let them go.\"\n\nTreshek stepped back. \"I think we'll hold onto them until the end of the match. I swear to you, Captain, they will be freed.\"\n\n\"And I'm supposed to believe you?\"\n\n\"I don't particularly care if you do or not, since you can't take the chance of refusing to cooperate.\" He turned and barked at the guards, \"Lock them away for now!\" To SecondSon he added, \"Prepare yourself, we shouldn't tarry.\" Finally he looked back at Hrelle. \"We'll begin shortly. Is there anything you'd like, Captain?\"\n\n\"Yeah. I'd like you to enjoy breathing while you still can.\"\n\nTreshek chuckled. \"That made my fur stand up a little, Captain. You Caitains act so smug and superior to us, call us savage versions of yourselves. But you're really no better. Are you?\"\n\nHrelle never answered. He just stared at Sasha and Kami as they were led away, trying to express all the love, all the guilt and sorrow he felt at their being hurt - because of him.\n\n*\n\nOn the Promenade, Kit stood with his crewmates, and watched - not them, but the Ferasans, observing their behaviour, their dialogue and attitudes and body language, once the basketball game ended in a mutual draw, and Giles, as the de facto leader of the cadets in the absence of Sasha, was leading them back to the concourse to witness some more acrobatics and sample some foods, with the Ferasan youths in tow.\n\nKit was lagging behind, however, to the point where Eydiir drew back and approached. \"Is there a problem? Have the Ferasans intimidated you?\"\n\n\"Me, Friend Eydiir? No, though I thank you for your concern. I am merely collating my observations on them, in comparison with what I have learned from our three Caitian crewmates.\"\n\n\"And have you learned anything of interest?\"\n\n\"Yes. Both races - and they must reasonably be considered separate races at this point - maintain similarities, not just biologically but culturally, especially with regard for appreciating family loyalty. But whereas Caitians are inclusive as to whom they would extend their sense of loyalty, Ferasans are exclusive. Caitians are cooperative, but Ferasans clamour for personal honour and gain, with little sense of self-sacrifice or even cooperation.\"\n\nEydiir nodded. \"They have heightened strength and speed, but demonstrate little discipline. They have little to no experience fighting or even just interacting with any race but their own. And their equally heightened reflexes make them overreact at times.\"",
        "\"Indeed, Friend Eydiir. Also, there is something of interest to them just now that has arisen that they wish to keep from us.\"\n\nEydiir frowned. \"Do you know what it might be?\"\n\nKit looked out at the Ferasans. \"It might be nothing, something routine occurring onboard - except that there is a growing excitement. If it had been something boastworthy, I would have expected them to brag about it to us.\"\n\nEydiir looked out as well; there seemed to be a growing feeling among them, words being whispered, and some of the Ferasans were leaving the group. It could have been nothing - but Kit had in the past proved to be a highly effective observer. She tapped her combadge. \"Eydiir to Surefoot. Commander T'Varik, please.\"\n\nThe Vulcan's voice replied. \"Yes, Cadet?\"\n\n\"Commander... is there anything of note occurring that you are aware of? The Ferasans appear distracted, or even disturbed by something.\"\n\n\"The USS Impala is here; Captain Arrington is curious as to our reasons for visiting the Ferasans.\"\n\n\"Yes, we encountered her earlier.\"\n\n\"Do you believe you or the other cadets might be threatened in any way?\"\n\n\"I don't know,\" the Capellan admitted. \"I will investigate further, and keep you updated. Eydiir out.\" She noticed several Ferasans departing from the Promenade into an establishment that resembled nothing more than a tavern, getting more crowded by the moment with Ferasans. \"Come on, Kit.\"\n\nThe pair approached, unnoticed by the Ferasans, most of them towering over even the tall Eydiir, and too distracted by a large screen set up in the corner of the room, as they excitedly talked amongst themselves, or downed large flagons of what passed for beers and wines among their people.\n\nKit was struggling to look over the heads and shoulders of those in front of him. \"What is it, Friend Eydiir?\"\n\n\"They are displaying some sort of circular pit, with bloodstains on the walls. It is suggestive of some form of entertainment involving combat. I see Ferasans and- Gods, it's the Captain!\"\n\nShe turned along with Kit to depart, when they ran into two of the young Ferasans who had approached them before, the pair of them snatching the combadges off of the cadets' uniforms. \"No, Little Ones, you are not going anywhere, not until the match is over.\"\n\n\"What is going on?\" Eydiir demanded, tensing for the inevitable. \"What are you doing with our Captain?\"\n\nThe male of the pair grunted. \"He will fight SecondSon of R'hewann to the death. Why not stay and watch?\"\n\n\"Please stand aside, Respected Opponent,\" Kit snapped, his skin flaring an unaccustomed crimson. \"Or return our combadges! I must insist!\"\n\nThe Ferasan growled at him. \"Stay back, Bug Eater! Crushing you will not grant me much honour, but I will do it!\"\n\nThe Qarari tilted his reptilian head as he continued to regard the male. \"Friend Eydiir, I have studied Ferasan physiology, and noted that the genetic augmentation they underwent to produce heightened agility has also produced large saphenous nerve clusters on the outside of their knees. These offer major vulnerabilities.\"\n\n\"Understood,\" Eydiir said beside him, tensing.\n\nThe Ferasan sneered now. \"You talk like a scientist!\"\n\n\"Thank you.\" Kit ducked, and kicked his leg out, connecting with the outer side of the Ferasan's right knee, making him screech and collapse, before striking out again and hitting the side of his head, sending him sprawling, even as Eydiir was performing a similar feat on the other Ferasan, allowing the pair of them to retrieve their combadges and escape back into the Promenade, trying desperately to hail someone, without success.\n\nEydiir rushed up to Giles and gripped his upper arms as if she was about to kiss him, before slapping his own combadge. \"Eydiir to Captain Hrelle! Eydiir to Counselor Hrelle! Eydiir to Sasha Hrelle!\"\n\nGiles stared wide-eyed. \"Eydiir, what the hell are you doing?\"\n\nBut she just smacked his combadge again. \"Surefoot! The Ferasans have Captain Hrelle in some fighting arena! I can't reach him or the Counselor or Sasha!\"\n\nGiles paled as he listened, and T'Varik responded immediately. \"There is a disruption field in place now, preventing transporter use. All cadets are on Red Alert: stay together, protect yourselves-\" The rest of the transmission was lost in static.\n\nThe other cadets drew together, questions and demands thrown about in the confusion.\n\nEydiir looked into Giles' eyes, before the pair of them look out to the Ferasans currently beginning to surround them...\n\n*\n\nUSS Surefoot, Deck 1, Bridge:\n\n\"Commander McMahon, the Ferasans have abducted Captain Hrelle, the Counselor and Squad Leader Hrelle, are not responding to my hails, and have set up duonetic fields to prevent the use of transporters or communicators.\"\n\nThe man's mild, hairless face creased in confusion. \"What? Why would they do that?\" He turned to someone out of sight on his bridge and barked some orders.\n\nT'Varik felt her expression tighten - a reaction akin to exasperation in a Vulcan. \"Perhaps we can ascertain that, after my crew and cadets - and your own Captain - are back onboard this ship and safe? The Ferasans have acted aggressively; we must take appropriate action.\"\n\nMcMahon looked back at her. \"It appears they are blocking transmissions and transporters to and from their vessel.\"\n\nT'Varik summoned her reserves of self-discipline. \"Yes. I told you this already. As you are senior officer, you are required to take command and make an immediate response.\"\n\nHe nodded. \"Leave it with me. We'll continue to try to contact them and work out what's going on.\"\n\n\"With respect, Commander, that is not acceptable.\"\n\n<br >\"And what more would you expect me to do? Launch an attack without knowing all the facts?\"\n\n\"Of course not, but-\"\n\n\"Just sit tight and take no hostile action against them - consider that an order. I'll keep you informed. Impala out.\"\n\nThe viewscreen returned to the image of the Bloodstained Shroud.\n\n<br >T'Varik sat silently in the Captain's chair; since taking a position as First Officer onboard the Surefoot, her first actual ship's posting after a career spent at the Academy, she has had prior occasions to take Captain Hrelle's place in his absence - and appreciate the burden that a commanding officer faced at times like this.\n\nShe looked to the Tactical station. \"Lieutenant Abed, run a tactical scan of the Bloodstained Shroud. Identify the source of the generator blocking our transmissions and transporter beams, and determine the amount of firepower required to disable it without causing further damage or injury to those onboard.\"\n\nPrakesh Abed turned in his seat, his hazel eyes narrowed. \"Um, Commander, Commander McMahon ordered-\"\n\n\"I am aware of what he ordered. This is merely a diagnostic exercise of our tactical systems. Agreed?\"\n\nSomething like a smile lifted his goatee. \"Yes, Ma'am.\"\n\nT'Varik tilted her head slightly, not looking behind her at Ops. \"Mr Gorman, take us to Yellow Alert - a diagnostic exercise. Ready a security team to stand by in the Transporter Room - another diagnostic exercise. Lt. Velkovsky?\"\n\nAt the helm console before the First Officer, Irina Velkovsky turned to look at her. \"Commander?\"\n\n\"Lieutenant, you will lead the Security team over to the Ferasan ship.\"\n\nThe other woman offered a sly grin. \"You mean, in the diagnostic exercise?\"\n\n\"Precisely.\"\n\n*\n\nKami finally stopped struggling with her cuffs; they were designed to completely immobilise Ferasan wrists and forearms and prevent use of their claws, and obviously they were equally efficacious with Caitians.\n\nThe cell was long and narrow and open at one end, and Kami could her and smell a guard just out of view. Sitting opposite her, Sasha fidgeted in place, identically manacled, the three parallel claw marks from Treshek on her cheek having stopped bleeding but looking raw and ugly. She didn't look up at Kami, but kept trying to do... something... with her own cuffs.\n\n\"It's no good,\" the Counselor assured her grimly. \"They're especially designed.\"<br >\n\nThe younger girl grunted. \"What's going on with my Dad? There's more than either of you have told me.\" There was more than a hint of rebuke in her tone.\n\nKami didn't blame her, she supposed. \"There always will be, Sash. We all have our dark secrets. In your father's case, this was one he never wanted to revisit. One of the hardest aspects of his ordeal in captivity.\"\n\nSasha nodded. \"Being forced to fight, to kill-\"\n\n\"No. That wasn't the hardest part for him. It was the times... when he wanted to kill.\"\n\nSasha stopped what she was doing and looked up at the other woman.\n\nKami paused, knowing she was breaking the confidentiality between her and Esek, but also knowing how much the girl deserved to hear, especially given what she had undergone already - and what might still happen. \"Yes, they forced him... at first. Pain implants, drugs, hunger.\n\nBut then he began to... look forward to the matches. Not just because his Orion master would treat him better. Not just because it gave him the illusion of control over his life, his fate, even for the few moments when he was in the Pit. Not even just because it was an outlet for his trauma, his rage.\n\nHe looked forward to it because he wanted to kill. He embraced the Beast they had dug out of him, unleashed it onto anyone who stood against him.\"\n\nSasha paled, and for a moment Kami feared perhaps the blood loss she suffered earlier was affecting her. \"No. That's not him. He doesn't want to kill.\"\n\n\"Sasha, a part of all of us wants to kill, no matter how much we might embrace our civilised sides or our faiths or whatever else we use to suppress those parts. That's one of the hardest things we all have to accept about ourselves - and seeing how far we've risen from our own Beasts can be one of the proudest things we can accept. Your Dad, however, was dragged down to his Beast, lived with him. And the Ferasans want to force him down there again.\"\n\nSasha stared a moment longer, before resuming her struggle - abruptly stopping.\n\n\"What's wrong?\"\n\nThe girl looked up again, nodded towards the open doorway and mouthed Someone there?\n\nKami nodded silently.\n\nHow many?\n\nOne.\n\nSasha swallowed, and in a whisper admitted, \"The worse part of all this is that my Season started today, and I never took my suppressant. And that male standing out there is affecting me. Strongly.\"\n\nKami frowned. What in the Seven Hells was she doing, talking like she was Caitian in heat instead of human? \"Sasha, no-\"\n\nBut the girl continued, whispering, \"I'm hoping he doesn't scent how much I want to mate with him right now. Maybe they don't know much about how humans work and he won't notice?\"\n\nThen Kami understood. \"Sash, shut up, you don't know what you're doing, it's too risky-\"\n\nThe guard stepped into view, shutting down the force field and stepping inside, staring hard at Sasha as he approached, his own arousal clear to Kami's nose. \"Hello, human. Looking for company?\"\n\nKami looked to Sasha, who shifted on her bare seat to face him - allowing Kami only to see that she had somehow freed her hands from the manacles, and was holding the solid piece of metal like a bludgeon.\n\nHer heart was racing inside her chest; the girl was putting herself at terrible risk. But they had to get out there and help Esek, and it was too late for Kami to do anything else... but assist. \"Leave her alone! She doesn't know what she's doing! Humans' Seasons leave her helpless!\"\n\n\"Shut up, Old One,\" the cub sneered, reaching out and stroking Sasha's throat. As Sasha tilted her head back in response, her eyes closing and her panting increasing. \"I've never even seen a human female before today, let alone had one. I've heard you're all shameless whores.\"\n\n\"P-Please,\" Sasha gasped heavily, mouth opening, almost panting now. \"Please don't make me do this- I can't help myself- I- I want- want you- want you to- to take me-\"\n\nHe chuckled, his hand reaching down and cupping one of her breasts. \"Oh, I think we have time for that-\"\n\nUntil Sasha drove the manacles into his groin.\n\nHe doubled over, falling backwards further as Sasha rose and kicked her boot into his knee, making him howl and fall backwards. She leapt onto him, bringing the manacles down onto his head.\n\nKami rose and approached, as Sasha set as her manacles and retrieved items from the Ferasan's belt. \"Sash, how did you manage to get out of those?\"\n\nThe girl examined a disruptor pistol, before continuing her search. \"It was an old trick Dad taught me with a pair of Caitian cuffs; they don't work as well with human wrists.\" She lifted up a black cylinder and pointed it at Kami. There was a click, and Kami felt the manacles release her hands; she caught the metal before it fell and hit the floor and made a noise. She set it aside and reached for the girl, embracing her. \"Come on, girl, let's go find your Dad before this cub wakes up.\"\n\n*\n\nThe enclosure was remarkably like the Orion Pits: a sunken circular arena carpeted in sand and littered with various assorted melee weapons. Above the surrounding wall, large monitors sat between cameras capturing every angle of the imminent fight to the death below, and Ferasan spectators filled up the monitors.\n\nFrom one end of the Pit, a door slid open, and SecondSon strode in, wearing a ceremonial tripartite gold kilt, his thin tail swishing excitedly behind him, his eyes wide with anticipation and his claws extending and retracting repeatedly.\n\nFrom a door at the other end, Hrelle entered, wrists still bound behind him, followed closely by Treshek and a guard. Hrelle looked across at his opponent, swallowing, knowing what he had to do, ignoring the eager faces overhead. His heart continued to pound, and he didn't dare speak, in case his stammer returned in full and he collapsed.\n\nTreshek made a sound as if he sensed the feelings in the Starfleet officer. \"Don't worry, Captain. You'll give a memorable performance. I'll see to that.\"\n\nHrelle never took his eyes off of SecondSon, but he muttered, \"I'm killing you today, Treshek.\"\n\n\"No, Captain. You're not.\"\n\nHrelle winced and pulled away at the sharp stab and hiss he felt and heard against his bicep, looking to see a hypospray in the Consul's hand. \"What did you just give me?\"\n\nTreshek pocketed the medical instrument. \"Something you'll remember from your younger days, Captain, something to get those aggression levels racing and the heart pumping: hypocordrazine.\"\n\nThe breath caught in Hrelle's throat. \"N-No-\"\n\n\"Yes.\" Treshek stepped back. \"Just a little.\n\nWell, a lot.\n\nActually, it was a lethal dosage.\" He shrugged. \"I can't really have you running around causing me trouble after this match.\"\n\nHrelle moved after him, restrained by the guard. \"Y-You lying b-b-bastard!\"\n\n\"Save it for the match, Captain. Remember, I still have your wife and cub.\"\n\nHrelle froze - even as he recognised that Treshek wouldn't let them live, either. He'd concoct some story about how they all died, and even if it wasn't believed, Starfleet and the Federation couldn't touch him because of his immunity.\n\nTreshek looked to SecondSon. \"Make your challenge before your Pride!\"\n\nThe cub nodded, stepped into the centre of the Pit, even as Treshek withdrew, the guard releasing the manacles from Hrelle and stepping back, disruptor pistol raised as he and Treshek left the Pit. SecondSon looked up at the Ferasan faces watching as he bellowed, \"I stand before my Pridemaster and my Pride, so they bear witness my victory over the warrior they call the Beast, and the winning of a Name!\"\n\nNow he looked at Hrelle directly. \"Across the Trackless Veld I have journeyed to stand before you! I challenge you, Esek Hrelle! In the name of the Patriarch, I challenge you to fight me!\"\n\nHrelle could feel the drug pumping through his bloodstream, making his heart quicken, making his fur stand on end, as he strode closer to the Ferasan, eyes fixed, fighting the urges building up inside him. He knew what he had to do. He knew how this had to end.\n\nHe dropped to his knees, hands clasped up in supplication, mewling, \"Please don't kill em! Please! I'm not a fighter! I never was!\"\n\nSecondSon froze in place, face creased with confusion. \"What?\"\n\nHrelle was sobbing now. \"Please, it's all a big mistake! What am I doing here? I want to go home! Please! Please, don't hurt me! I'll do anything! I want my wife! I want my mother!\" He collapsed onto all fours, still sobbing loudly, his fists pounding the sand beneath him as he looked up at the Ferasan.\n\nAnd the monitors around him, as the witnesses... laughed.\n\nSecondSon looked up at them now. \"No! He's lying! He's not like this-\"\n\nBut one heavily-decorated grey-furred Ferasan glared with naked hostility. \"You present us with this wretched specimen, and expect to earn your name by slaying him? You insult our Pride!\"\n\n\"N-No, Pridemaster! It's a trick!\"\n\n\"You expect us to believe he would willingly grovel like this, debase himself? You dishonour us, cub. You dishonour me.\"\n\nAnd the screens began to go dark and silent.\n\nAnd Hrelle stopped sobbing. He could feel the drug suffusing him, galvanising his muscles, making his heart pump at a cadence reserved for races the likes of which he had not undergone since his Academy days. And he could feel his teeth grinding together of their own accord, as he heard a door slide open again, and two Ferasans enter. \"What's going on?\"\n\nStanding before Hrelle, SecondSon mewled, \"He's ruined it! You said he'd fight, but he ruined my chance! Now I'll never get my Name! I want his whore wife and daughter ripped apart by your males! I want to hear them scream!\"\n\n\"You first,\" Hrelle growled.\n\nHis right hand, claws extended, shot up under SecondSon's kilt, finding exactly what he was looking for.\n\nAnd ripping what he found away.\n\nThe Ferasan staggered back, screeching in agony as blood spurted out from beneath his kilt as he clutched his groin, his eyes saucered as he crumpled up into himself like a wad of paper, screaming at the top of his lungs.\n\nHrelle felt the soft, amputated parts in his hand, and flung them aside, before looking over his shoulder at the horrified faces of Treshek and the guard.\n\nThe Beast crouched and chuckled at them, teeth bared, his voice carrying over the screams of the cub. \"I had to admire his balls. Your turn now, Treshek.\"\n\nA now-terrified looking Treshek started for the open doorway, as the guard struggled to get the disruptor pistol from his belt.\n\nHrelle launched himself at the male, slamming him backward towards the doorway, where the door was sliding shut. He jammed the guard into the opening, preventing it from closing completely, before driving his claws into the male's eye sockets, ignoring the blood and the screams as Hrelle left him behind and pursued Treshek.\n\n*\n\nOn the Surefoot bridge, T'Varik was growing as agitated as she had ever felt before, though she believed she was adequately concealing it from those around her. \"Mr Gorman, hail the Impala again. They must respond.\"\n\nA few seconds, and the young man replied, \"Sorry, Commander, they're still not responding.\"\n\nShe nodded to herself, her decision made. She raised her voice. \"Attention, please: I am about to violate a direct order from a superior officer, because I have a genuine belief that our Captain, crew and cadets are in danger. Should you follow my subsequent orders, you may find yourselves subject to the same sanctions that I will undoubtedly face. Should you wish to avoid this and withdraw from duty, please do so, immediately.\"\n\nThe bridge went silent for a moment.\n\nThen Chief Grev at the Engineering station announced, \"All systems at full power, Commander.\""
    ],
    "authorname": "Surefoot",
    "tags": [
        "star trek",
        "fanfic",
        "science fiction",
        "starfleet",
        "caitian",
        "alien11111"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/surefoot-10-fast-and-the-furriest"
}
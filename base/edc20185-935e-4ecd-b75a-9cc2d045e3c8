{
    "title": "Holding Out For a Hero Ch. 02",
    "pages": [
        "When Sasha Met Kat\n\nWell here I am again. Just to keep you updated, I have been out on a few dates with Sasha. I discovered that she was training to be a ballerina in Moscow, but as it was she developed a little too much. That is, she got too tall and her breasts got too big for her to be considered a professional dancer. Now I don't know about you, but I like her breasts exactly as they are, beautifully rounded, firm but at the same time soft. I like it when she falls asleep and I just watch them bobbing up and down with her breathing. And as for how they look when... Actually, let's just put that on the back burner. I can feel myself getting distracted, and I'm sure you don't want a chapter dedicated to Sasha's breasts. \n\nSo, leaving Sasha's body to one side for a moment, this chapter begins in my final lecture at the Brighton University. I have finished my Digital Graphic Design degree course, which I hope will net me some work with a game dev company. Our class lecturer is a really cool guy and he was just giving us a farewell chat. My laptop was open in front of me and I was just laughing at the old joke. 'How many software engineers does it take to change a lightbulb?' Answer, 'None that's a hardware issue.' When a message window pops up on my screen from Sasha. \n\nLittle Kitty Kat. \n\nI am outside in the car waiting for you to go and celebrate. \n\nSasha. Xxx\n\nI smiled to myself and think of how sweet of her to think of that. Then a picture downloaded to follow it.\n\nIt was a selfie of Sasha sitting in her car. Her coat was open, as was her usual white shirt revealing a rather sexy looking white lace bra with her nipples peeping over the cups. In other words, I had a glorious full screen picture of my honey, practically topless on my laptop. While I was in class. \n\nNeedless to say I closed it as fast as I could. Even so I still heard a few gasps and a soft wolf whistle from some of the boys behind me. My cheeks immediately began to burn with the embarrassment. \n\nA voice behind me whispered. \"Whoa, that's a hot girlfriend you've got there Kat. Nice catch.\" \n\nI twisted around in my seat, blushing madly. I hadn't got a clue what I was going to say, the thought of denial or saying it was a prank flew through my head. Then I saw the mixed looks of approval and envy off some the guys and one or two of the girls. \n\nOddly for me, the feeling of shame drained away and was replaced by one of pride. Hell yes I had a real cutie as a girlfriend, even if I was a skinny gamer geek with glasses. Although to be fair, that description fitted most of my class. \n\nHalf an hour later I walked out on to the carpark. The sun was shining and I had the echoes of Alice Cooper's Schools Out playing in my head. My canvas laptop bag was slung over my shoulder and I was looking forward to seeing Sasha, as a lot of my recent free time had been taken up with my studies. \n\nAcross the carpark four of the Sports Science students were gathered in a lose group around a tall blonde figure leaning against a red car. My first thoughts were to wait and hope the crowd dispersed. Then that feeling of reckless pride crept up behind me, and in a few seconds, it had pounced on my shyness, beaten it senseless and shoved it in a bag out of the way.\n\nI ran my hand through my untidy hair, with the thought that it would now look glamorous, because that always works in the movies, and I strode towards my beautiful girlfriend with what I hoped was a confident smile painted on my face. \n\nThe four boys (when I say boys, they were all around the same age as me, but I still categorise them as boys, because let's be honest, there are many thirty-year-old plus boys out there.) were all flexing their muscles, trying to get the attention of Sasha, who was basically ignoring them. \n\nShe was wearing the standard white cotton shirt and a black skirt that came to mid-thigh, allowing a few inches of pale skin before the top of her long leather boots. Her hands were thrust in to the pockets of a casual red leather jacket. As I approached the glacial ice blue eyes, that I knew were hidden behind a pair of dark round sunglasses, fixed on to me, and she lent off the car and moved to meet me, doing that super sexy walk. You know, the one she did in her bedroom where crossed one leg in front of the other, it made her hips sway a little and those sensational boobies of hers jiggle suggestively.\n\nFour pairs of eyes followed her behind as it bounced around in that little black skirt. I think we fell in to each other's arms as our lips came together. I say 'think' because thing went a little hazy as we kissed. I can honestly say that I have never wanted someone so much, in all my life as I wanted her at that moment in time. \n\nWhen we parted, after what felt like an hour, I was breathless and my legs had gone all wobbly. I also ended up with her spearmint gum in my mouth, but you possibly don't want to hear that. \n\nI must admit I allowed myself a smile of satisfaction as we got in her car and the boys faces turned green with envy. \n\n\"Where are we heading?\" I asked as Sasha started the car. \n\n\"I thought I would take you shopping, then nice meal. After that, we go to my place and you can show me how good you can make Skyrim on PC.\" \n\nThe prospect of an afternoon with my lover was great, the shopping I could pass on, but the meal would be nice, our first romantic date. Then follow that by an evening gaming. Awesome. \n\nWe made the jump to light speed around ten meters from the carpark. Maybe one day I will get used to her driving, until then I'll stick to the usual coping mechanism of holding on to the door handle and screaming. No offence Sasha, but your driving is a near death experience. \n\nSasha left the Millennium Falcon outside her uncle's house and we walked back to town. I had dumped my laptop to save me carrying it around, after I had saved that picture as my new desktop image that is. \n\nAs we approached the main shopping area I asked a question that was on my mind.\n\n\"Why are we going shopping, and what are we getting?\"\n\nAn arm wrapped around my waist and pulled me in close. \n\n\"I'm treating you to some new clothes Kitty Kat. I thought you may want to dress up for me tonight.\" \n\nNow I know my wardrobe isn't exactly well stocked, especially in the sexy little number range, but I was a little offended at the thought that my stuff wasn't good enough for her. \n\nI reacted in my normal way of going silent. Not that I was sulking, I just sometimes wonder what she sees in me. \n\n\"Hey little Kat.\" Sasha said as she stopped walking. \"No sad face. We don't have to get clothing, I just thought you may enjoy having me spoil you a little.\" \n\nSee now this is the thing about Sasha. She has a lot of money, something I have never had, and she wants to buy me things. I do know she does it without malice and it is just her way, but it's almost like she doesn't know how to show affection with spending money.\n\nI sighed. \"I don't mind you buying me things Sash.\" I told her. \"But you don't need to do that, I would love you if you were penniless.\" \n\nWhat happened next was a total curve ball. \n\n\"But why do you love me Kat?\" She asked, and I detected a slight tremor in her voice. My heart tore as I realised she was close to tears. \n\n\"Are you kidding me?\" I managed to splutter when I finally got my mouth under control. \"You are so beautiful and caring. No one has ever been as kind to me as you are.\"\n\nI could actually see tears rolling out from under her dark glasses. \n\n\"But you are clever and funny. You have dainty little body, not big Zhirafa one like mine.\" \n\nThe penny dropped in my head. And I admit, it did have a long way to fall. I had been so blind. There I was so wrapped up in wondering why she would want to love me, when all along the very things that made me insecure, were the same things that made me attractive to her. And just as importantly, it worked both ways, the things that made her self-conscious I found a sexy as hell. \n\nI raised myself up on to my tiptoes and planted a kiss on her beautiful lips. \n\n\"You are a funny bunny Sasha. I worship every inch of your perfect body.\" \n\nHer arms encircled me once more and I gasped as she squeezed me so tightly I couldn't breathe. \n\n\"Do you really mean that Kitty Kat?\" She asked as her mascara left black smudges across her pale cheeks. \n\nI just closed my eyes and inhaled her scent. Jasmine laced with sexual deviancy. \"You will always be my guardian angel.\"\n\n\"One more question.\" She said as I wiped the smudges away. \"What is funny bunny?\"\n\nI had to think fast for a few seconds. \"Like a rabbit that's really cute and cuddly.\" I said doing a fair impression of a rabbit hopping up and down. \n\nSasha stepped back and watched my bunny impression, a grin spreading across her face. \"I think I like funny bunnies.\" And she giggled a little. \n\n\"Well this bunny is ready for you to buy some new clothes for her.\" I told her as I bunny hopped down the road. \n\nI suppose I shouldn't have been surprised when she steered me in to All Saints. Personally, I'd never walked through the door before, as I doubted I could afford the air, let alone the clothing. But I think it was Sasha's idea of being thrifty, as it wasn't one of the most expensive shops available. \n\nHave you ever seen that film Pretty Lady? I know it isn't one on my usual watch list, as there are no Superhero's or Jedi mind warriors, but I have to confess I did watch it once. Well any way there is a scene in it where Julia Roberts, who plays a prostitute, goes in to a designer shop with Richard Gere's credit card to buy an outfit or something along those lines, like I said, I've seen it once. Anyhow the shop assistant refuses to serve her until Mr Gere shows up. \n\nWell this was a little similar. We walked in to the shop and the assistant took one look at me then pretended I wasn't there as she approached Sasha.\n\nNow there is one thing about my blonde bunny, she isn't one for asking advice off anyone. So as the assistant approached her, she blanked the sales assistant, took hold of my hand and half dragged me past rails of clothes to the changing rooms at the rear of the shop. Now these weren't like the changing rooms us lesser mortals are used to, you know, about two feet square with a curtain made of green tracing paper, and stops around two feet from the floor. No these were actual rooms. With doors. And space to bend over in without touching your behind on the freezing mirror.\n\nSasha was in bossy mode again. \"Go in there and undress.\" She instructed. \n\nThere is something about Sasha when she gets bossy, not that she is dominates or anything, but she does say it in a manner that just makes you want to do exactly what she tells you to. I kid you not, it makes me go funny all over, and I have a very difficult time resisting. \n\nAs it is this time I did exactly what she told me to. \n\nSo, there I was standing in my rather plain and faded boy pants with a very unflattering, was once white but is now grey, bra and trying not to look at myself in the full length mirror. \n\nSasha's head popped around the door, and a frown creased her forehead.\n\n\"Why did you not undress?\" \n\nShe wasn't being serious. \n\n\"Do you need help?\" She added. \n\nShe really was being serious. \n\nThat queasy feeling washed over me again and made my knees go weak. Even though we had both been undressed with each other several times I was still a little bashful, and the thought of being nude in a shop changing room, meters from a busy street was having a very odd reaction inside me. \n\nShyly I undid my bra and dropped in on to the chair that was piled with my other stuff, then slipped off my pants and added them to the stack. I tried turning my back to her, but I ended up looking at my undressed form in the big mirror, and Sasha's smiled face as she shamelessly gazed at my rear. I quickly turned around again trying to cover myself as best as I could, but I knew she was still checking out my rear in the mirror. \n\n\"Is there any chance I can try something on, or are you just going to stare at me all day.\"\n\n\"I was thinking of taking your clothes and having naked little Kat at my mercy.\" Sasha said grinning wickedly. \"I think I could get you to agree to anything if I did that.\" \n\nAt the point I think Brighton was rocked by a fairly major earthquake, as I am sure the ground bounced around under my feet and the entire changing room shifted sideways. \n\nThis was all extremely odd to me. I mean I had only just realised I was in to girls and not boys, now I was having a mad reaction to being naked and vulnerable with Sasha. It was like being in one of the stories I had found on the internet while doing some research in to lesbian relationships. \n\nI decided I had to experiment and test exactly what it was that was making me feel this way. After all I wasn't complaining. It felt fantastic. \n\nI half turned and scooped up my clothing off the chair. Then taking a really deep breath I held them out to Sasha to take.\n\nHonestly, I am not sure who was more surprised out of the two of us that I did that.\n\nSasha hesitated for a split second, before reaching out and taking the bundle of clothing off me and withdrawing out of the changing room. \n\nI remained rooted to the spot. My heart was thumping against my ribcage and I felt a little feint. The realisation of what I had just done ran over me like a high-speed train. \n\nThis all just felt so wrong. Standing naked in a shop changing room, now with every item of clothing I had worn in to the shop out of my reach and who knew where. \n\nWarmth spread, radiating out from between my legs and touching every part of me. The little room spun again and I quickly sat down before I fell over. Now the sensation of the coolness of the chair against my bare skin sent me off down a different track and I shifted uneasily while at the same time, I relished the contact with my flesh.\n\nThe door eased open slightly and Sasha slipped in. She didn't have anything for me to try on. Or my own clothes. \n\nShe leaned against the door, her arms folded under her lovely breasts.\n\n\"Just when I think I have you figured out little Kat.\" She said. I think I detected a slight breathlessness in her voice. \"Is this getting you sexy Kat?\" \n\nI was sat there my legs crossed and covering my small breasts with my hands. I could feel my face burning like it was on fire. \n\nI managed a shy nod, not trusting my voice.\n\n\"I wonder what you would do if I told you, I had thrown your things in a bin outside.\" \n\nThe heat rose to steam level and I whimpered a little. A million pictures flashed through my mind. All involving me nude and at Sasha's mercy. \n\n\"Ah.\" She nodded. \"That's what happens.\" \n\nThere was a quiet moment as thoughts flickered behind those crystal eyes. \n\n\"Now I have my own little naked Kitty Kat to play with.\" She mused. \"What should I do with her?\"\n\nI'm going to be straight with you here. At that point I was fit to burst. I was enjoying being at Sasha's mercy and I wanted it to continue. I needed it to continue. \n\n\"I think I play dress up. I will find something to dress little Kitty in. Something that shows a lot of skin.\"\n\nAnother moment of thought.\n\n\"Or maybe a nice coat that hides your naked state, but we will still know.\" \n\nThe urge to touch myself was building faster than my resolve not to, and my nipples were very aware of my palms brushing against them with every breath I took. \n\n\"Or maybe I will just get a collar from the pet shop, so I can take Kitty for a walk as she is.\"\n\nNow I am very embarrassed to say this... but I came there and then. No touching. Nothing. Just Sasha's words and my imagination. \n\nIt began in a sudden rush, not a gradual build up like I was used to. I just went from steam heat, to lava, to eruption in the space of a few seconds. Every bit of me went so sensitive that just contact with the air made me tip further over the edge. The image of Sasha leading me down the busy streets, naked apart from a collar and lead was painted firmly in my mind. \n\nI was vaguely aware that my head rolled back as I closed my eyes and gave myself to the rush of euphoria. I could tell that my entire body was trembling like a leaf and I think I arched my back so sharply, my behind lifted clear of the chair. All I wanted at that point was for Sasha to take me in her arms and carry me off to the heaven I was experiencing. \n\nI'm also fairly sure I may have screamed once or twice. \n\nI knew that because when I came back down, Sasha's hand was covering my mouth gently and she kept saying \"Hush.\"\n\nThen I heard the voice of the shop assistant saying. \"Is everything alright in there?\" \n\nPanic began its sprint through my body, quickly overtaking euphoria and crossed the finishing line way out in first place. \n\nWithout any clothes and very little strength in my legs, I just curled up in a ball on the chair and prayed that my body wouldn't take this moment to start enjoying its self again. \n\nThen Sasha's voice cut through the haze of fear and pleasure. \n\n\"We are all fine. My friend just stubbed her toe.\" \n\n\"Okay...\" Came the reply from the other side of the door. \"Just call if there is anything I can do to help.\" \n\n\"That was close.\" Sasha whispered, a hint of laughter in her tone. \n\nI stifled a laugh and kissed the palm of her hand the was still over my mouth. \n\nThat was followed by a kiss on the lips off her, then another. Then she broke away as I whimpered again. \n\n\"I think we had better get you some clothes.\" Sasha said. \"You are too horny little Kat.\"\n\nPart of me was quite glad of that, while another part, embarrassingly, wanted to stay like this. \n\nI settled for a sigh and a nod. \n\nOne thing I will say for Sasha, she had an eye for picking the right clothing. \n\nHalf an hour later, after Sasha had returned my clothing that is, we left the shop. I'm fairly sure the assistant knew what had happened in that changing room as she smiled and winked as she handed the bag of my new clothing over, and said she hoped I had enjoyed shopping there, and to make sure I came again. She emphasised the 'came' bit. \n\nI think my face burned all the way back to Sasha's house. \n\nAs we were running short on time to make the reservation, we had a quick shower, that is only a small amount of kissing and fondling, before getting dressed and walking back in to town. \n\nI had a new pair of boots, nothing like Sasha's of course. I didn't have the sense of balance to wear her heels. Mine were just lace up ankle boots with about half an inch of heel. A pair of faded black Superdry jeans that fit like a second skin, a plain white linen shirt and a casual suit jacket. It was a very 'boy' look, but it felt so comfortable. Like I was made to wear this outfit. Plus, I felt super sexy. \n\nSasha on the other hand wore a scarlet blouse that shimmered when she moved and was so thin I could easily make out the outline of her bra underneath it. A beautifully cut Bolero jacket in black covered the blouse. The jacket was complemented by a short black figure hugging skirt. It was so short that it gave me a peek of her red underwear when she bent over to pull on her knee length boots. Given the choice, I would have stayed in and just watched her walk around her bedroom looking like that. \n\nUnfortunately for me, Sasha didn't want to stay in with me ogling her all night. There was something about Brighton in the summer that I loved. It normally has a bit of a buzz about it, but in summer, everything really picks up and the vibe is contagious. For me, that evening will always remain cemented in my mind as one of my most treasured moments. \n\nArm in arm with Sasha, I seemed to have fallen in to the place I belonged. It is odd, but for most of my life I had been trying to fit in to life around me. Regrettably I was a round peg in the square hole of life. Now out of the blue, I had fallen head first in to the round hole that Sasha provided, (either that sounded a lot worse that I intended it to, or my mind has taken a very smutty turn recently). ",
        "We didn't speak much on the short walk, we just enjoyed being next to each other. The sound of waves rolling on to the beach, mingled with the noise of the various parties, that were well underway in various locations. The tangy sea air drifted by mixed with the pungent smell of a few hundred joints being smoked by the partygoers. \n\nWe pitched up at the restaurant, which was a cute little Bistro that Sasha liked, oddly enough I had eaten there once or twice before. It goes to show, that sometimes the most expensive place isn't always the best. \n\nWe ordered food and drinks. Sasha spent a lot of the time just staring at me, her blue eyes trying to bore in to my head. We did chat, but it was all small talk, and by the end of the starters my patience was wearing thin. \n\n\"Do you want to ask me something?\" I probed. \n\nHesitantly Sasha looked away then back to me again. \"Before, at the shop...\" \n\nImmediately my face went beet red. Me and my big mouth. \n\n\"I don't know.\" I interrupted. \"It just happened, it isn't something I do every day.\" \n\nI swear I could see a little crimson creeping on to Sasha's cheeks as she took a breath to reply. \n\n\"I was going to say, I know how you felt.\" \n\nA small bomb went off between us.\n\n\"What do you mean by that?\" I was being really dumb that evening. Although I blame the beer for messing with my head a little. \n\n\"I get aroused being naked in places like that.\" Sasha said shyly. \n\nIt's funny, but I hadn't seen a shy Sasha before, and I immediately fell in love all over again. She just looked so adorable. \n\n\"I used to go to shops to try on things and undress completely. I would dream that someone would take my clothes away and leave me like that.\" \n\nThe words came out in a rush, like she had been waiting all evening to say them. \n\n\"When I said that to you, I was reliving my fantasies. I didn't expect you to react in the same way.\" \n\nMy mind flickered back to the changing room, and I briefly wondered what it would have been like if the roles had been reversed. The immediate reaction my body had was confirmation that I would have enjoyed that as well. \n\nI reached over and placed my hand on hers. \"I could do that for you, if you wanted Sasha.\" \n\nHer shy expression softened in to one of joy laced with excitement. \"I think I would like that. I would enjoy being made naked by my little Kitty Kat.\" \n\nHeat washed over me, and I drained the remaining beer in the bottle in an effort to cool down. Now I have a little confession to make. Since that first night with Sasha I have had this imp living in my head. I think it sneaked in whilst I was reading erotica on the internet. Purely for research purposes of course. I wouldn't want you to think I made a habit of looking up the top ten best erotica sites on the internet, then read everything by the top ten authors on those sites... Okay, maybe I had made a bit of a habit of it. Anyway, mostly the imp behaves, but now and then it jumps up and makes me say things I normally wouldn't. This was one of those times. \n\n\"I think I can come up with some more scenarios than that as well.\" I offered, whilst my brain wondered if I could actually back up the words the imp made me say. \n\nSasha leaned forwards eagerly. \"Like what?\" \n\nFuck... My brain raced frantically, I was getting seriously out of my depth. I must have read several hundred erotica stories on the internet, some of which involved the luckless heroine ending up naked after some unfortunate incident. One jumped to the fore of my mind, a story of two women who went skinny dipping in a lake and a friend of theirs stole their clothing. \n\nI think my brief panic must have given the imp a little impetuousness, because it took full advantage of me being lost for words.\n\n\"There is always the nudist beach.\" My mouth said, while in control of the naughty imp. My brain screamed at it to shut up. \n\nSasha sat bolt upright. \"Nudist beach?\" \n\nMy brain kicked the imp in the shin and muttering something about getting me in trouble again. \n\n\"Yes, it's about thirty minutes' walk from your house. Just by the marina. It is the part of the beach that is fenced off.\" \n\nI could see the cogs whirling around like mad in side Sasha's head. Unfortunately, the imp was still in control of my mouth.\n\n\"I wonder if you would enjoy going there, and while you were swimming, I sneaked down and stole all your stuff. \n\nThose glacial eyes danced with fire, and Sasha half stood. \"We go now?\"\n\nAs much as I wanted to do that right there and then, my brain made a sudden lurch for control again and two small problems came to my mind. One it was going dark outside and I wasn't sure if that beach would be open. And two, I wasn't sure my legs would get me there and back. \n\nYeah, sometimes it sucks having a brain that analysis everything, and legs that go to jelly every time I get excited. \n\n\"How about we save that for another time.\" I suggested. \"We don't want to rush the starters to get to the main course.\" \n\nShe sat back down with a slightly disappointed expression. \n\nAnother story by the same author came to mind, and before my brain could stop it, the imp jumped in with both feet again. \n\n\"What if, we went to the bathroom and I asked you to undress. Then I took your clothes and left you there while I came back to the table for another drink.\"\n\nThe disappointed look vanished and was replaced by one of excitement. \"Oh yes, I like that idea as well. You are good at this Kitty Kat. How do you get these ideas?\"\n\nOkay I was tempted to say it wasn't me it was the bad imp in my head, but I didn't think that would make sense. \n\nHeat rose to my cheeks again as I replied. \"From stories I have read.\"\n\n\"Stories?\" Sasha questioned. \"Like in books?\"\n\nA small sigh escaped me. This was going to be awkward. It wasn't like I didn't want Sasha to know I had been reading erotica on the internet, more like I was worried about some of the ideas she may get from them. But as my brain had foretold, I had opened the can, now all the worms were making a wriggly break for freedom. \n\n\"Not quite in books.\" I began tentatively. \"Stories I have read on the internet.\"\n\n\"Once again, you surprise me little Kat. I didn't think you would be the sort of girl that read internet porn.\" Sasha said, a little too loudly for my comfort. \n\nThis time I am sure I turned a very bright shade of red. \"It isn't porn.\" I hissed as quietly as I could. \"It is erotica.\"\n\nA puzzled look etched itself on Sasha's innocent looking face. \"Erotica? How is that different to porn?\" She asked, not taking my whisper as a hint. \n\nHonestly I wanted the floor to swallow me up. I was sure that everyone in the restaurant had heard what Sasha had said. \"It just is.\" I told her exasperated. \n\nAmazingly she seemed to accept that answer, and for a moment she stayed silent. Which worried me slightly more, as I knew she was contemplating my words. \n\n\"Would you share some of these stories with me Kat?\" Sasha asked, her voice edged with a little hopefulness. \n\nIt was the tone of her voice that really got to me. I didn't know a great deal about Sasha's life before she came to the UK, just that she had been training to be a ballet dancer in Moscow before she discovered her own sexual identity. After that she had been a little closed about revealing any details. I guessed that life hadn't been easy for her, even in the world of dance where just about everyone was gay to one point or another. Then again Russia was a different place to Europe and the acceptance of same sex relationships wasn't as forthcoming. I just knew by her voice she wanted to share her personal fantasies with me, and somehow, I had blundered in to one of those fantasies. \n\n\"How about I read you a couple of them later.\" I offered with what I hoped was a gentle smile. \n\nThe Sun rising wasn't as bright as Sasha's smile. For a second, I was Romeo and Sasha was my Juliet. \n\n\"Arise, fair sun, and kill the envious moon, who is already sick and pale with grief, that thou, her maid, art far more fair than she.\" The romantic poet in me blurted out. \n\nYes, it was a little corny, but it was the only line I could remember from something romantic. I can quote lines from Terminator 2 all day, but Shakespeare just doesn't stick as well. Maybe if there were a few more explosions or a ninja robot trying to destroy the world... Sorry, wandering off again. \n\n\"That was beautiful Kat.\" Sasha murmured, her eyes a little misty and a wistful smile on her face.\n\nI made a mental note to memorise some more Shakespeare quotes. After all you never know when they may come in handy. \n\nWe finished the main course without too much distraction, and just light conversation, most of it based around gaming. I had found out the Sasha had been playing Skyrim. An instalment of the Elder Scrolls games, that although was around ten years old was still very playable due to the large variety of modification programmes available. It was during this conversation a small plan came to my mind. It would take a while to set up, but I was fairly confident with my skills and with two of Sasha's rather over powered PCs, I thought I could pull it off. But that is a story for another chapter. \n\n\"Would you like anything else Kat?\" Sasha asked after the cute waitress had cleared away the used plates. \n\nI think it must have been the excitement of the day, or the beer, or something, because the imp was taking great advantage of my lack of concentration. \n\n\"Actually I would love your underwear in my pocket.\" Somehow I managed not to clamp my hand over my mouth in shock. \n\nTo be fair Sasha did a short sharp intake of breath, which I took as a sign of surprise. No real shock there. It had surprised me. \n\n\"Do you want me to do it here?\" Sasha asked, her eyes a little wide and her breath shortened. \n\nIt is possible that the legs fell off my chair, because I was fairly sure I went backwards on to the floor. What she suggested had thrown a different spin on things, and I realised I had underestimated Sasha's need to convey her passions. I briefly wondered, if she had known I was going to suggest that, would she have worn something different. As it was, with such a thin blouse and short skirt, to have her remove her undergarments would leave her fairly exposed. I do know that just the thought if it made me feel gooey all over.\n\nNow it may surprise you, but I am really not a dominant person. The thought of asking Sasha to shed clothing in view of everyone horrified me, but at the same time it was making me feel very excited. I partly chickened out. \n\nHaving finally beaten the imp in to either silence or unconsciousness I suggested. \"Why don't you decide.\" Hoping she would take discretion over valour. \n\nTo my upmost relief Sasha stood immediately, her face a mixture of excitement and trepidation. \n\n\"I will be back.\" She promised sounding like some sexy female Arnold Schwarzenegger impersonator. \n\nLeft alone, I spent a few moments trying to stop the room spinning. I don't know what I had done to end up in this situation, even if the majority of it was of my own creation, but I was fairly sure that this wasn't how I envisioned the evening playing out. I did know the thoughts of a barely dressed Sasha sitting across from me in a public place was playing havoc with my sanity, let alone my arousal. \n\nArms wrapped around me from behind and Sasha's scent filled my head. \n\n\"Back again little Kitty.\" Sasha whispered in my ear as she pushed something in to my pocket then took her seat again. \n\nHer face was more than a little flushed, and her jacket was buttoned. Even so I could easily make out the swell of her breasts through the thin fabric of her blouse. Trying to act nonchalantly, I dropped my hand in to my pocket and felt the silky material stashed in there. I glanced down and saw that her red bra nestled in my pocket. \n\nJust the bra. Either she had chickened out of removing her panties or...\n\nI looked up to see Sasha grinning as she wriggled about on her chair, her eyes full of mischief and desire. I think I managed to open and close my mouth a few times, beyond that I couldn't say anything as I sat and watched her fumble around under the table. I wanted to look around to make sure no one was watching, but I couldn't bring myself to look away from the spectacle, or to possibly meet the gaze of someone who may have noticed. \n\nFinally, Sasha finished wriggling about and sat up straight, her face flushed red, knowing her, more with excitement than embarrassment.\n\n\"Hold out you hand little Kat.\" Sasha instructed. \n\nI then realised why the imp had relinquished control of my mouth, it had obviously done a counter move on my body, as my arm extended a little too eagerly. \n\nSasha's hand hovered over mine, her fist clenched tight. I lost my nerve at that point and closed my eyes, as they were the only thing I think I still had solid control of. \n\nI felt something soft and ultra-light drop in to my palm, and I quickly managed to wrap my fingers around the item and withdraw my hand before I open my eyes again. Not that I needed to look at what was in my hand, the smoothness of the material laced with the slight dampness told me all I needed to know. \n\nMy mind remembered the sensations of how I had felt in the changing room earlier that day, and fireworks began to pop and whizz in my nether regions, as I wondered if Sasha was experiencing similar feelings. \n\nI glanced over to the blonde angel sitting across from me. She had a dreamy expression on her face, like she knew something that no one else knew. Which I suppose made sense. \n\nThe waitress that had been looking after us bustled over and asked if we wanted dessert, and I hurriedly stuff Sasha's panties in to my pocket. \n\nBy now the sensible every day part on my brain had given up totally, and the imp had gotten full control of my actions, and I heard myself order two Irish coffees. \n\nThe waitress smiled pleasantly, oblivious to anything that was going on between Sasha and myself. \n\nAs she moved away I stood and moved my chair around to the other side of the table so I was sat at ninety degrees to Sasha instead of across from her. I could see that the table cloth was hanging low enough to touch her legs, obscuring any view of Sasha's lower half. The imp fed a what it thought was a wonderful idea to the rest of my body. My sensible brain decided to take a holiday at that point. \n\n\"On a scale of one to ten, just how aroused are you Sasha?\" I asked quietly. \n\nThat dreamy look was still painted on her face. \"About a six.\" She replied happily. \n\nI sneaked my arm under the table cloth and placed my hand on her thigh, just above where her boot ended. \n\n\"How about now?\" \n\nSasha shot me a sideways look. No doubt wondering where I was going with this. And to be honest so was I. \n\n\"Six and a half.\" She replied, her voice tinged with excitement and a little nervousness. \n\nMy hand inched a little further up her thigh caressing the silky skin as I did so. \n\n\"Seven.\" Sasha said without any prompt. \n\nAnother inch and I could feel the soft material of her skirt against my hand. I let my fingers dance on her skin. Fingers that had been honed, through years of gaming, to have the dexterity of a concert pianist. \n\nI was rewarded with a slight gasp of breath as she whispered \"Eight.\"\n\nMy fingers played a quick scale up her thigh which made her skirt ride up a little further. One of my fingers brushed against the moist skin of Sasha's lips, and I saw her clench her teeth together as she closed her eyes. \n\nThe imp reminded me of another story where during a bout of oral sex, a girl had spelt her name out on her lover's clitoris with her tongue. Well it seemed too good an idea to waste. \n\nI drew a 'K' with my index finger and Sasha's hands gripped the edge of the table as she let out a long breath. I wondered how far through my name I would get. 'A' made her knuckles turn white while the 'T' incited panting. \n\nOk that was 'Kat' done. I decided to go for 'Kathrine.' I was half way through the 'H' when the waitress tottered over holding our coffees. \n\n\"Oh you two look really sweet sitting together.\" She said as she placed the coffee down. \n\nI finished off the 'H' and started on the 'R.' \n\n\"Can I get you anything else?\" \n\nAs I finished the 'R' Sasha's eye popped open and she nearly screamed 'Nine.'\n\nThe waitress froze. Her mouth gaping. \n\n\"Sorry my friend is German.\" I butted in hurriedly. \"She was just saying 'No' in her native language.\" Sometimes the wicked imp can get me out of trouble it seemed. \n\n\"Ah, of course.\" The waitress nodded. \"I'll leave you in peace.\" She added with a smile. \n\nI drew the 'I' only I decided to do it lower case and made a big point of doing the dot in a nice tight little circle that went one for quite a while. \n\nSasha moaned through clenched teeth and the table vibrated as her grip tightened. \n\n\"Nine.\" She gasped breathlessly. \"And a half.\" \n\nI really took my time doing the 'N' and half way through the 'E' Sasha squeaked. A noise I hadn't heard her make before. \n\n\"Eleven.\" She said very quietly. \n\nBy now my fingers were slick and I could only guess at just how wet Sasha's skirt must be. My mind wandered back to how she brought me to climax in the changing room and an idea popped in to my head. \n\n\"You do know your skirt is soaked Sasha.\" I whispered in her ear. \"You may have to take it off if it gets any wetter. Maybe I could make you something to cover up out of two napkins tied together.\" \n\nWith my free hand I draped a napkin over my lap to emphasise how little cover it would provide. \n\nI can honestly say I have no idea what she said next. It was just a stream of Russian spoken through clenched teeth. I decided to throw caution to the wind and go for my surname as well. \n\nAs I began the 'M' I played more mind games. \n\n\"I think you should come over to my house at some point Sasha.\" I told her as I flowed in to a very curly 'C'. \"When you arrive I will make you take a shower, and whilst you are showering, I will take all of your clothes and hide them. That way you will have to stay as my nude servant for as long as I require. If you are really well behaved I will take you up to the park at Stanmer. You will still be nude of course. It will be very sexy to watch you walking through the woods naked.\"\n\nBy now Sasha was completely gone. The Russian words had ceased and she just settled for holding on to the table and making a low humming noise, her eyes focused on an empty space. I had actually lost track of where I was up to with my spelling, so I just settled for making lazy circles on her special spot, as I carried on projecting fantasies in to her head. \n\n\"We can walk along the beach on the way home tonight. I am going to take a couple of these napkins and actually get you to take your skirt off and wear them instead. I would love to see you like that.\" \n\nSasha opened her mouth enough to let out a long moan that was barely a sigh. I have to admit I was impressed by her ability to climax without making too much noise. I couldn't do that, as I had proven earlier in the clothes shop.\n\n\"Oh my little Kat.\" Sasha panted as she released her hold on the table. \"What did you do to me?\" \n\n\"Are you ready to leave now?\" I asked, fairly eager to get home and play around a little more with each other's fantasies. \n\n\"I don't think I can move.\" She whispered turning bright red. \"The chair is going to be very wet.\" \n\nNow, I will say this just for the record. I didn't mean to laugh. It was one hundred percent nerves. Whenever I get really nervous I tend to giggle. And now we were faced with exactly the situation I had used to get Sasha to climax. Of course, the imp had decided its job was done and left me to pick up the pieces. My eyes darted about looking for inspiration. ",
        "I spotted my half a bottle of beer left on the table. \n\n\"Do you trust me Sasha?\" I asked trying to fake confidence I didn't feel. \n\nShe nodded, her eyes wide and doe like. \n\nI grabbed the bottle and poured the contents in to Sasha's lap. \n\nHer scream attracted the attention of everyone in the restaurant. \n\n\"Whoops.\" I said loudly, trying to act as if it had been an accident, while Sasha stood and cursed in Russian. \n\nOne of the waitresses rushed over with a cloth and as Sasha towelled herself off still cursing she threw me a surreptitious wink and smiled. \n\nAt least something had gone to plan.\n\n***\n\nAfter Sasha had made herself a little more presentable, we paid the bill and headed towards the seafront. As we walked we came towards one of the ramps down to the shingle beach, and Sasha paused. \n\n\"Do you want to walk along the beach Kat?\" She asked me in a suggestive voice. \n\nI glanced along the now deserted beach wondering what she was planning. \"Sounds good to me.\" I agreed hoping whatever it was it was going to be fun. \n\n\"That's good. I thought you may want to watch me dressed just these.\" Sasha withdrew a handful of napkins out from under jacket with a very naughty smile on her face.\n\n*****\n\nAuthors Note:\n\nI want to thank Wax for the spelling game. It is great to write and just as good not to.\n\nI also want to thank Kara Bryn for the lines I used from Study in Exhibitionism, if you haven't read any of her stories I can really recommend Alessia Takes Me Out, It is one of my personal favourites and has influenced my writing greatly. "
    ],
    "authorname": "TrueMort",
    "tags": [
        "lesbian",
        "lesbian sex",
        "romance",
        "romantic"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/holding-out-for-a-hero-ch-02"
}
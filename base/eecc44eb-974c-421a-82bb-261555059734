{
    "title": "My Only Talent Ch. 34",
    "pages": [
        "Note: The descriptions and accounts in these stories are fictional and do not portray any actual people or events.\n\n*****\n\nI wasn't sure how Suzanne and Lou Baby would approach each other the morning after our little \"do Lou\" fuck fest. \n\nBut the noises through the condo's walls made it clear that Lou was now having a very good time with Kevin in the upstairs bedroom. Suzanne and I were cuddled up in the downstairs bedroom with the curtains closed. Various low frequency thumps and bumps propagated virtually un-attenuated through their floor and our ceiling, and at intervals one of Lou's now easily recognizable grunts and sighs that signaled her orgasm would sound. She was having quite a few. She would occasionally scream \"Fuck me, Kevin!\" or \"I love it, baby!\"\n\nFinally, Kevin made a noise like dying elk (or at least as I imagined that might sound), then Lou giggled and then things settled down. \n\nSuzanne snorted. \"I guess we really got her motor running, Robbie!\"\n\nI was not sure what to say, but I was learning to bide my time.\n\nSure enough, Suzanne continued. \"Did you enjoy fucking Lou?\"\n\nTell the truth, Robbie. I did my best taciturn Texas cowpoke imitation, sans toothpick in the mouth. \"Yep.\"\n\nSuzanne looked me in the eye and put her tongue on her upper lip. \"Me too.\" She snuggled closer and played with my nipples. Nirvana.\n\nSuzanne and I woke up long before Kevin and Lou came downstairs, and she began hunting around the kitchen for some food and some pots and pans. She found some bacon and prepared a paper plate and paper towel sandwich to microwave it in. She found some big navel oranges and soon turned them into fresh orange juice. Finally, she found a big omelet pan and whipped the hell out of some eggs and made a big fluffy bacon and cheese omelet. Wow, that hit the spot.\n\nLou and Kevin padded down the stairs, and Suzanne began to make them both 'orthodox omelets' (no bacon). Lou put her arms around Suzanne in a gentle hug, and Suzanne turned and gave her a hot kiss. Whoa! I'm not sure I could handle a repeat performance of last night right now.\n\nLou sighed. \"It was much better than my wildest dreams, Suzanne!\"\n\nAfter the breakfast dishes were cleaned up and put in the condo's dishwasher, Suzanne announced that she and Lou were going to sunbathe at the pool, which was right outside and below the big picture window in the condo's living room. Kevin and I were encouraged to watch, but it was suggested that we stay in the condo until the girls returned.\n\nLou looked a little worried. \"What exactly are we going to do, Suzanne?\"\n\nShe gave Lou a sweetly disarming smile, then her powerful dom look. \"I'm going to do whatever I want. So are you!\" \n\nLou shuddered and blushed again, re-creating her smeared lipstick look from last night. \n\n\"What bathing suit did you bring, Lou? That purple one that you wore to the PIG lake party?\"\n\n\"Yes, Mistress.\"\n\n\"I brought one I want to see you in. I have a new one too. Let's go upstairs and get changed.\" \n\nThey trooped up the stairs, Kevin and I both stared as their ascending butts swayed.\n\nKevin looked uncomfortable. \"Robbie, what exactly do you think Suzanne is going to make her do?\"\n\n\"I really don't know. Maybe she will make Lou eat her on the diving board with all the trophy wives watching?\"\n\nKevin drew in a noisy breath. \"What are you going to do?\"\n\nI drew in my own noisy breath. \"I'm going to pull a chair up to this window and watch.\" Kevin sat down next to me.\n\nSomehow it looked hotter and more voyeuristic from 70 feet away or so and through the glass. Suzanne made Lou rub on her suntan lotion, giving me chills and hotness at the same time, along with evoked memories of Peggy and Elizabeth Ashcroft Knowles on Adnan's big yacht. Several of the trophy wives looked on, some with disapproving glances and some with frank interest. Every one of their husbands looked on with great interest, which was probably the reason for most of the disapproving glances. \n\nLou did a very thorough job of oiling Suzanne's front, working around the new little grey knit mini-bikini with great care. Suzanne turned over, and looked up at me, then fixed her tongue on her upper lip and untied the back of the bathing suit, casually glancing at several of the husbands watching her. Lou went to work rubbing oil into Suzanne's muscular back and all the way down the crack of her ass. I could almost smell the coconut oil through the picture window. Kevin groaned.\n\nSuzanne then had Lou lie down and take off her top. This produced a rapid swiveling of heads in both trophy wives and husbands, and they stayed locked on as Suzanne lovingly worked the oil onto Lou's now hard nipples and perfect tan lines. \n\nKevin drew in a breath. \"Damn, I wish I had my cameras here!\"\n\nMaybe it was better if he didn't. Suzanne had Lou turn over, still sans top, which prompted one of the trophy wives to gather up her stuff and exit, pool right, with her husband in tow. Suzanne put her hands under Lou's little swimsuit bottom, just like when she reached into the back of my jeans, and gave her a very thorough caress. Lou put her knees a little further apart, and must have made a noise, because two other reluctant husbands were then dragged away by their enraged wives.\n\nSuzanne and Lou got up slowly, gathered their stuff, and walked deliberately out of the pool area, passing within inches of the two couples still sunning there. They walked up the little stairs to the second-floor condo like a little two-woman parade. They occasionally glanced up at our window. I don't know if they really saw us or not, but Suzanne certainly touched her tongue to her upper lip every time I was watching. They also were clearly whispering in each other's ears.\n\nSuzane threw open the door to the condo dramatically, and Kevin and I sat there, mouth breathing. She smiled, and then Lou strutted in. Suzanne was behind Lou, and she reached around her and gently massaged Lou's breasts.\n\n\"Which one do you want, Lou?\" Suzanne said in her best low, sultry voice, pointing to Kevin and I.\n\nLou was playing the spoiled little girl. \"I'm not sure. Robbie is new and novel, and he was fun last night, but Kevin loves me and I love him. But, he was okay with me doing Robbie, so ... I'm not sure!\" She pouted. \"Can't I have both?\"\n\n\"Suzanne crossed her arms across her chest. \"That was a onetime thrill thing, remember?\"\n\nLou looked me slowly up and down, then looked over at Kevin. \"Well, then I pick Kevin!\" She took him by the hand and they retired upstairs to their bedroom.\n\nSuzanne put her hand down the back of my jeans and cupped my right buttock. \"And I choose you, My Animal, except for a few onetime thrills. Get it?\"\n\nSo, that was what that little two-woman play was all about. \"I plan to, beautiful. Let's spend some time doing some taste testing on that coconut oil Lou put on you. I am especially interested in the portion she rubbed so lovingly on your buttocks.\"\n\nSuzanne's eyes got wide, and she smiled. \"You and that one trophy wife. She was staring at me so that I gave her my best 'on your knees' dom look. She got all flustered and then took her husband and ran.\"\n\n\"What if she hadn't run away?\"\n\n\"We'll never know, but let's speculate on what might have happened during your taste test.\" She took me by the hand and led me to our bedroom. \n\n\"That's a delicious idea, my love.\"\n\n+++++++++++++++++++\n\nThere were only 2 class days left in the spring semester. I took a drive Monday morning, instead of going to the review session in Math. Big mistake, probably, but I needed to clear my head and think. My car worked like a tranquilizer, and the only decision I had to make was when to tap the (optional) paddle shifters. The car would do it for me, and probably pick the shift points better than I could. \n\nI knew from my embedded systems class that the car monitored OAT, EGT, RPM, and LOOT (lots of other things) and kept moving averages on them as an input to its 'fuzzy logic' decision making system. I knew the theory about 'degrees of truth' but sometimes I thought of it like a big set of moving Venn diagrams, pulsing like the icons on my phone's screen when you move them around, bouncing off each other. I knew it was inexact, but sometimes made much better choices than a simpler and supposedly more exact program. \n\nAsa Weltschmerz told me that the brain used lots of fuzzy logic too, implemented in 'neural networks' of 'dendritic trees' that somehow learned from experience, but not always in the same way. It worked a lot better than lots of hard wired electronic logic systems, and apparently used lots of multi-state logic instead of simple binary logic. He asked if I had studied 'fuzzy sets' in math yet. Nope. If I couldn't pass M408D this semester, I wouldn't have the prerequisites to take anything else, either. Then he told me that in fuzzy logic, the values of the variables are more like words in linguistics, rather than numbers in arithmetic. Like I needed another reminder of how bad I was doing in that class, too. Asa had markedly stepped up the pace and intensity of our weekly therapy sessions the last few weeks. I suppose he was trying to influence some of the choices I had to make before I took the summer off from school to gain some work experience. \n\nDriving without a plan, I soon found myself well south of Austin on the road toward Three Rivers that I had previously traveled with Peggy. This would have been prime Bluebonnet viewing territory just a few weeks ago, in April. I had made one decision since then - to take the summer job in England working on the \"Chunnel\". One of the TA's in my embedded systems class was from Morocco, and he told me to stay away from Calais. I was hoping to spend my weekends either with Peggy and her new fashion model friends, or with one of the twins (or, but not and) their amazing mother, Belinda Hatch-Peters, Abelard's 'second and final wife'. \n\nThe native Americans that once lived in Central Texas considered Bluebonnets to be spiritual messengers, and made tea from them as love potions. The Spanish priests used to gather seeds and plant them around the missions, making many people think the flowers came from Spain. But they are native plants, and have been the official state flower since 1901. Maybe I should stop and make some tea. I could use a few spiritual messages right now, in the vein of relationship advice. \n\nIn a recent demonstration of the Frankenstein-ish potential of genetic engineering, the Aggies had created a \"Maroonbonnet\" in the Aggie's favorite color instead of their natural blue, and tried to spread them onto the ESU campus. Leave it to the Aggies to deliberately vandalize and pollute the genetic material of the great state of Texas. Loyal Longhorns kept literally rooting out this threat, which had now substantially receded, sort of like Aggie football. Perhaps the best thing about Bluebonnets was that Nora adored them, and if I could let myself believe it, she also adored me. \n\nNora had resolved one conflict for me. I didn't have to choose between Nora and Lara, or Nora and Suzanne. I could have all three. I suddenly heard Asa's voice in my ear. I really didn't have any problems, did I? 99% of the people in the world would trade places with me in two seconds. My mother's old advice came through again - what's the worst that could happen? I could have to take M408D again, and find another elective to take in another semester that I can do better at than linguistics. I could deal with that. \n\nSuddenly the car turned itself north and I put my foot in it. Now I felt like planning and working instead of fretting. Just relax, do your best, and let things happen, Robbie. Right after finals, I want to have some wild college days with Saskia and Rene' and Rene'. It will be good for me. I can do my level best on my exams and then let it all hang out, plus I feel like I have a duty to Saskia to let some of her fantasies become reality. I can do that. I need a little help from Suzanne, but I think she will do that for me. I want to give Lynn Da Britain a few bachelorette party thrills too, but I haven't convinced her yet. Husky Varna is on board to help. A goal for my next semester in Austin? Isn't Country Chrissy on the schedule for next fall too? I should go for it! \n\nUh oh! Do I also have a duty to Suzanne to help some of her fantasies come true? I suppose I do. Fuzzy logic time. I assign a high degree of truth to the fuzzy idea that Suzanne just wants a big thrill, and is not looking to replace me. I also think she just wants to try it once, not develop a whole new lifestyle. So, if she does it to the fullest extent possible once, maybe she won't want to try it again. If she just tries it sort of half-way, and it isn't a big thrill, she might be driven to try it again. And again. Ergo, I should do my best to give her the best possible thrill, and hope that it is enough for her to let go of the idea in the future, and make it a \"one time thrill\". \n\nMy fuzzy ideas form into a concrete and very physical plan in just a few seconds. It will be like what we did for Millie, but more intense, more real, and much more personal for me. For Suzanne, too, I suppose. I have a few calls to make. Just airtight or airtight ski jump? \n\n+++++++++++++++++++\n\nLara returned from all her legal excursions, and the Friday night before finals began found Nora leading a review session for the class she TA'd for, and Suzanne in Waco for a soccer game. So, it was Lara and I alone together, for the first time in a while. She wanted to go back to the Mexican place up on Burnet Road for dinner, which we did. We were early enough to get a good booth on the patio, and I enjoyed the incredulous looks from the other patrons as we were seated. Lara was feeling expansive, and in the warm weather she chose a scoop neckline sleeveless dress that looked a bit like a pastel colored curtain across the Grand Canyon between her very ample breasts. Her blonde hair was up in a big bouffant kind of thing, and she looked seven feet tall, perfectly made up, and hot as a nuclear reactor core with all the rods pulled out. \n\nThe waiter remembered Lara, not at all surprising, and even recalled that I was the \"Habanero Gringo\" with the hot woman, and got the hot sauce just right. Some chips with this perfect salsa, plus cabrito liberally doused with same should get me in the perfect state for high fidelity Suzie signal reception and fully prepared for treating Lara right later tonight. Right for Lara was a little rougher and required more effort than most girls, but I was happy to work hard for her. Duty calls.\n\nI just smiled and took in the sights as she updated me on her travels. She had enjoyed the seminar, and the law school interview visits, and had already received acceptance letters from all her backup schools. She could now relax and just hope that a late acceptance to one of her 'big three' would turn up. I was willing to help her relax.\n\n+++++++++++++++++++\n\nMaybe it was just relaxing and not worrying so much, or the last-minute review with Esmeralda Estigoy, but my Math 408D final went pretty well. I was on the border line between high C and low B. I could live with that. Husky Varna got a middle C and he was ecstatic. Linguistics was a bigger surprise. \n\nThe 'normal' portion of the test was pretty much like the previous exams that Husky had given me, so I did okay on that part. But there also was a high value essay question on how linguistics was relevant in modern scientific thought, and thanks to Asa and Dr. Augie's lecture, I could go on and on about fuzzy logic, neural communications, and the potential symbolic manipulation of quantum entanglement, and the professor ate it up! He had not attended Dr. Augie's lecture, plus I had a little insight of my own to add. He made a personal note on my exam, and gave me an A in the class. Hoo Hah! There was now no need to find another elective, or worry about my overall GPA.\n\nSaskia gave me an A in conditioning, albeit for only one credit hour, and I got a B in Engineering Physics, and an A in embedded systems, plus several major improvements to the Arduino programs on my car. All in all, I was fucking ecstatic about this semester. And I was now determined to do some ecstatic fucking to celebrate. \n\nA message popped up from Cisco. He had somehow learned to manipulate the SMS servers such that in any group message, he got his copy first before anyone else, and often his reply would come through BEFORE I got the original message. I suppose that was a great way to demonstrate his hacker cred, but it was irritating to have to re-read the 'stream' below his reply to figure out which message in the sequence that Cisco was replying to, since the order they were displayed in was no longer strictly chronological, thanks to Cisco's meddling. \n\nI suppose I had to take the good with the bad since his skills (with some social engineering help from Suzanne, Mei Ling, and Millie) had helped take Lara's window humiliation video off the AG website, and his continued vigilance assured me that whatever escapades Kevin and I planned for the condo out a Horseshoe Bay would remain private. Which reminds me - it's time to talk to Suzanne about Saskia's little end of semester party, which also may include her admirer from the med school and the trainee 'twins' Rene' and Rene'.\n\n+++++++++++++++++++\n\nLara and Nora were enthusiastic about my party plan, but Suzanne smiled at me in an almost predatory way. I could feel a negotiation about to commence. Lara and Nora headed out to for an end of semester ritual to return some textbooks at the coop, while Suzanne and I stayed in Lara's apartment. \n\n\"So, let me get this straight, My Animal.\" She paused and put her tongue on her upper lip, and waited for me to notice. \n\n\"This will make how many times I have helped you make some other woman's fantasy come true?\"\n\nShe ticked them off on her fingers. \"First Lara, then Millie, Strelsa, Nora, Candy, Veronica Tappert, and now potentially Saskia, the postdoc M.D. who is hot for her, and the two hot personal trainers, with Little Marilyn and Big Liz waiting in the wings I am only a published PhD candidate economist, not an engineer, but I can do sums, and I count at least a dozen women who have had, or are about to have you arrange and help act out their sexual fantasies for them.\"\n\nEven I knew not to say a word about my plans for Lynn Da Britain and Doctor Doolittle, Country Chrissy, and the Tennis Twins. \n\nSuzanne continued. \"I am not at all bitter, as I thoroughly enjoyed myself, and them. But, I can also think of one very noble and deserving woman, whom you claim to love, who has not had the benefit of such an effort on your part, even though she has been totally open and honest with you about everything!\" She batted her eyelashes dramatically.\n\nI knew I could not avoid the subject anymore. \"Perhaps I should arrange a little prank for you, too?\"\n\nShe feigned a shocked look. \"Six guys would be excessive, Robbie. My fantasies center around three, maybe four for good measure, or in case someone doesn't\" she paused dramatically, \"... last.\" I took it as a given that she would have no problem with - lasting. The look in her eyes was scary and her Suzie signals suddenly sizzled like frying bacon - like white noise on all frequencies at once. In her case, it was more properly called pink noise, concentrated in certain yet unsatisfied frequency bands, I supposed.\n\nShe suddenly sounded a bit challenging, like Red Rock Tappert. \"Surprise me, My Animal, if you can.\" She rested her tongue on her upper lip and sneered. She was a lot prettier than Rock Tappert, but it still made me mad. I decided to rock her world a bit, to see if she could stand it. To see if I could stand it, too, I supposed.\n\n+++++++++++++++++++\n\nESU's Canvas 'electronic blackboard' class management system 'people' page from Saskia's conditioning class got me email addresses for both Rene' and Rene', and I invited them to a 'private training session' at Lara's, making it clear there would be several instructors, both male and female, and that they would have to perform exactly as those instructors specified, or be punished. They would in fact be punished in either case. Both responded quickly and enthusiastically. ",
        "Likewise, Bella, the post doc from the med school replied that she would move her schedule as required, but she had to leave town in a few days, so time was of the essence. \n\nOiler had forwarded an email from ESU to one of the freshman UDP pledges who was having a little trouble in math and physics, with the suggestion that it was time for me to 'pay it forward' by helping the kid out during the fall semester. I would, of course, but the forwarded academic notice also gave me an idea. It was a very formally worded message from the Dean that the offending frosh was on academic probation, and flirting with being dismissed, along with suggestions, requirements, and formal policies designed to right his course during the upcoming fall semester. \n\nI used the wording to craft an official sounding email message to Saskia, that detailed her sexual shortcomings, and required her to report to \"The Master\" for rigorous training. She was to do anything and everything \"The Master\" required of her, shamelessly and completely devoting herself to pleasing him and whomever \"The Master\" presented to her. She was further advised that she was to be restrained and blindfolded, and would be at the whim of several people of both genders, most of whom would remain completely anonymous to her, despite the intimacies she would perform for them. Furthermore, she would do so with an audience watching, one that she would never see or know who was in it.\n\nHer reply came back almost immediately, \"Yes, Master!\" Heh, heh, heh.\n\n+++++++++++++++++++\n\nSaskia Grandael closed her laptop, having replied almost instantaneously to the email from her student but soon to be teacher, Robbie Roberts. She realized she was suddenly very wet between the legs, a rare occurrence for her lately. Maybe she would finally get what she wanted sexually, too, after years of desperate frustration. \n\nSaskia's career as a research physiologist was on a new and wonderful trajectory now. Dr. Asa Weltschmerz, M.D., PhD., med school dean and academic superstar, had really made things happen. Arturia Brown was suddenly scrambling to meet his accelerated publication schedule for the work Saskia had been doing for years, pushing her indentured grad student and post doc lackeys to do all the actual work, of course. But a single paper co-authored with Asa Weltschmerz would be the absolute crowning glory of Arturia Brown's meager career, advancing her citation index more than 100 years of her working on her own ever could. \n\nSaskia didn't even mind doing all the work to get that paper ready. It was just one minor paper with Arturia and Asa as co-authors. Unbeknownst to Arturia, there were three other, far more substantial papers that had already been submitted, authored by Asa and Saskia together, without Arturia, in an even better journal. Saskia had been working 20 hours a day to finish off all the pubs work plus get the grades out for her conditioning classes, and she was finally finished working for Arturia Brown. All she had left to do was clean out her office. June would find her escaping her post doc dungeon and working in Asa's lab at the med school, doing real projects that led to real papers on important topics that absolutely fascinated her, plus making enough money to have a decent apartment and some spending money for a change. \n\nShe had to admit to being fascinated by Robbie's message, too. What would he make her do? Who would she be doing it to? Who would be watching her do it? Who was her 'secret admirer' at the med school? Why was she suddenly so achingly wet? She put on her little silk blindfold and lay down on her ratty couch, her hands stroking her thighs. Her mind began stroking her fantasies, too.\n\n+++++++++++++++++++\n\nI arrived at my final spring session with Asa Weltschmerz at the usual time, very early in the morning, before anyone else was in the office. Asa had two offices: one at the hospital for his 'clinical' duties, and one at the SZB right next to my dorm, along with a reserved parking spot most ESU professors would kill for. The med school had several conference rooms and offices on an upper floor there on a temporary basis until all the med school buildings were done, still years away, and poised to cause much disruption on the 'forty acres', requiring both a new basketball arena and a new tennis center. \n\n\"Good morning, Robbie. I see that your linguistics final went well. Too well, in fact!\"\n\nSay what?\n\n\"Your linguistics professor, who is new to campus and quite a hard charger, has already contacted me about setting up an undergraduate research program for you to further your understanding of neurolinguistics! I don't think he knows we are already acquainted, but I don't think it is a good idea to draw attention to yourself like that\".\n\n\"Sorry, doc, I was just trying to sling some bullshit to make sure I passed the final.\"\n\n\"He sent me your exam response, Robbie. You may have swerved much too close to the truth for comfort, and given your instructor some ideas he would not have hatched on his own. I put him off for now, but it gave me another idea. You may want to try to study yourself, by yourself, with me looking over your shoulder. Have you considered majoring in biomedical engineering rather than electrical?\"\n\nThat was a new idea. I did find the brain stuff fascinating, and a lot more so than Kirchoff's laws. \n\n\"Speaking of scientific research, Robbie, I want you to think about donating your brain to the medical school for research purposes when you pass on. I don't mean to sound morbid, but it could advance science a lot. I hope you outlast me by quite a few years, but we can put some legal things in place now to ensure your anonymity to protect your offspring, and still make some future neuroscientist very happy.\"\n\nThat was a lot further out than I was thinking, Doc. All my long-term plans are for the fall semester.\n\n\"But enough of that for now. Let's talk about Lara.\"\n\nOne of my favorite subjects.\n\n\"You know, most people would be happy to be admitted to any of the three schools she has already been accepted by, but she has much more ambitious plans. If she gets her first choice, graduates, and gets some real-world experience, she will be uniquely qualified to teach at most law schools or med schools. I might even recruit her myself.\"\n\nSounds good to me.\n\n\"She also tells me she has long term plans that involve you AND Suzanne AND now Nora. Are you ready for that?\n\nYou bet your ass, doc. Why not? I guess looked puzzled. \n\n\"Because that could also draw attention to you, and your children. If they are as bright as any of those women, and inherit any of your talent, they could come under a lot of scrutiny. Perhaps unwanted scrutiny.\"\n\nI hadn't considered that. Come to think of it, Lara's plans to dynamite the bigamy laws and change the definition of marriage would attract a lot of attention no matter who she was with. \n\n\"But the main thing I wanted to get across to you is about actual neurobiology. We now know that some of the major nerve tracts in the brain are not finally laid down until you reach 26 years of age or so, and that process can be modified or even stopped in certain situations. Your cousins, for example, had sex and smoked a lot of pot and used ecstasy quite a bit during their teenage years, and I think that is why they do not have your talent, despite having the right genetics for it. If we looked at their brains, I suspect we would find that their 'antenna arrays' are fractured, disorganized, and disconnected, rather than finely aligned and extensively cross connected as yours are. I think your parents knew this, somehow, and that's why they warned you off sex and drugs in early life.\n\nI had often thought about how glad I was that I did not end of like cousin Mikey. Even if he could speak some Klingon. \n\n\"Also, since you are only 18, there is likely to be significantly more synaptic and dendritic development for the next 8 years or so, so your abilities and your emotional reactions to things may change substantially during that time.\"\n\nWhoa, doc. \"You mean I might get even better at this?\"\n\n\"Or worse, or just different. You might lose some abilities and gain others. You might become so sensitive to other people's emotions that it becomes difficult for you to block them out and just experience your own.\"\n\n\"I do notice that my connections to Lara, Suzanne, and Nora seem to get better and more sensitive as I spend more time with them. One thing has really surprised me, doc.\"\n\n\"What is that?\"\n\n\"When I have intercourse with Nora, I swear I know whether or not there is an egg in place to be fertilized. No real prize for guessing, I suppose, since she is on the pill, but I feel completely sure I could detect it if it was there. Plus, I really want there to be one there and ready.\"\n\nAsa, looked thoughtful, then mildly troubled. \"Well that would certainly be useful information, and may indicate that you are ready to take that relationship to the next level. Have you told Nora about this?\"\n\n\"No. It kind of scares me.\"\n\n\"Well, I would advise keeping that to yourself for a while longer. I may be speaking out of turn a bit here, but Lara is looking forward to having you father her children and to also helping Suzanne and Nora with their children that you father. She will shake up the legal and medical professions a bit in doing so. You live in interesting times, Robbie.\"\n\nAsa's expression changed, and he seemed to change gears mentally. \"One more thing. I know you finished Saskia's conditioning class okay, and you know that she is coming to work at the med school now, right?\"\n\n\"Yeah, doc. She is very happy to be getting away from Arturia Brown. How did you manage that?\"\n\n\"Well, let's just say her interests and mine aligned well. I gave Arturia one thing she really needed, and got several things I needed. I did something for Saskia, and she did something for me, although she doesn't know it yet.\"\n\n\"What's that?\"\n\nAsa smiled. \"I managed to get Bob the Knob to come back to Austin from UCSD and join the faculty at the med school, and he is also bringing with him three junior professors that I wanted, and not coincidentally cementing a huge long term grant. It's a win, win, win. Brilliant plan, if I do say so myself. You can tell Saskia that the big construction project down the hall from her new office is for Bob's new lab.\"\n\n+++++++++++++++++++\n\nSaskia was very nervous as she left her now almost empty office in Belmont Hall and walked toward the address Robbie had given her. It was a ritzy high rise apartment building close to both the ESU campus and the state capitol. She was lucky it was warm out, because as ordered, she was wearing only flip flops and a light sun dress, with no underwear and no jewelry. She was already wet between the legs as she entered the building, and her heart was racing. \n\nShe took the elevator up and walked to the apartment number Robbie had given her. She gulped, took a deep breath, and rang the bell. Robbie opened the door. At least she thought it was Robbie, based on the chest and ab muscles. He had on tall black boots and shiny black leather suit with a big silver and gold metal ornament at the crotch, and a big mask that hid his face and made him look very tall. \n\nOn either side of him stood two women, each with a tight leather mask that completely covered their heads, with little opening for their eyes, mouth, and nose. The woman on the right was in white leather, and was tall, blonde, very busty but still very athletic looking. She had flawless alabaster skin and her Wedgewood blue eyes shown through the holes in her mask like light bulbs. She was holding an electric blue face mask in her hands, and a set of matching fur covered hand cuffs.\n\nSaskia assumed that those were for her, and her heart rate went even higher. \n\nThe woman on his left was petite but very shapely, in a red leather suit that was cut the same as the blonde's. In her hand, she had a red leather riding crop. This woman was not just in shape, she was just about perfect. Saskia's trained eye marveled at the symmetrical and balanced development of her leg and thigh muscles. This woman was not just a runner, she was a major triathlete. Her raven black hair rained down from her head, and her skin was a dusky light olive color. Saskia could not help notice her raven black pubic hair, tantalizingly revealed by a perfectly placed gap in the leather suit, and shivered as an unbidden and perhaps unwanted wave of lust shuddered through her. \n\nThe smaller woman slapped the riding crop loudly against her red leather boot, and the blonde deftly slipped the electric blue mask over Saskia's head and cinched it up tight. It had holes for her mouth and nose, but covered her eyes completely. It smelled strongly of leather and weakly of sex. The woman pulled off Saskia's sun dress, and then locked her arms behind her with the fur covered cuffs. They then put some kind of leggings or leather straps on Saskia's ankles. They felt strong and heavy, and there were metal things on them that clinked when she moved.\n\nShe was led further into the apartment, and her cuffs were secured to a ring on the wall.\n\nThe blonde woman spoke. \"We are waiting for some more of the audience members and a few of your instructors to arrive. You are displayed here so they may examine you if they wish. There are also two other trainees that will soon arrive. Your body belongs to us now. We will use it in any way we wish. You will do anything we tell you to, without hesitation and with enthusiasm and verve. You will be punished if you do not. You will be punished either way, but if you perform will, you will be rewarded in the end.\"\n\nSuddenly two nipple clips were snapped onto her breasts, jangling her nerves when she moved. She heard the two women strut away, but Robbie remained next to her.\n\n\"Saskia, you will learn how to please me very soon. You will give no thought to yourself. You have no control and no choice. You will devote yourself to my every whim. You will lose yourself in pleasing me. You will endure whatever pain I require of you. If you persevere you will experience great pleasure and belonging.\"\n\nShe realized that was what she really wanted. Belonging to someone. Being devoted to someone not herself, and being accepted. \n\nRobbie walked away. The doorbell rang. A man walked in, judging by his heavy footsteps, a big man wearing boots.\n\nRobbie muttered a greeting, calling him \"Husky'. He walked over to Saskia. She could smell soap and leather, and a very faint smell of cologne. He fiddled with something on the wall. It sounded like coat hangers.\n\n\"I like that outfit a lot, Saskia. It shows off your assets nicely, while retaining an air of mystery. They tell me I don't need any clothes tonight, so I'll hang my stuff up it won't get wrinkled. But you my dear, are going to get wrinkled and then some.\" She listened as he unbuckled his shirt and unzipped his pants, then hung them up. He kissed her gently on the cheek and then walked away.\n\nThe air stirred from his motion, and her nipples crinkled under the clips.\n\nThe doorbell rang again. Saskia strained to hear as Robbie said \"Come in trainees!\"\n\nShe heard several people walking toward her, and then heard and felt two people being restrained by attaching them to the wall, just like she was. \n\nOne of them spoke. \"Are you okay, Rene'?\"\n\n\"Yes, how about you Rene'?\"\n\n\"I'm okay and I'm ready. Really ready!\"\n\nSaskia thought she recognized the voices. Were these the two Rene's from her fitness class? Robbie had been a busy boy.\n\nSeveral people walked over in front of them. Her handcuffs were disconnected from the wall, and she was pushed down onto her knees, then clipped to another ring set lower in the wall. She heard and felt the same things being done to Rene' and Rene'.\n\nRobbie spoke. \"All three of you look beautiful! Very comely, which is particular appropriate for this exercise!\" He laughed and touched each of them briefly on the cheek. \n\n\"You are about to learn how best to please a man with your mouth. You believe you already know how, but you really don't. But soon you will. You don't have to think about that at this point. You will learn that what you think you know is unimportant. Your masks each have three handles, which attached to those tight leather masks that totally encircle your head, give us great leverage and total control over your neck, your head, your mouth and your lovely throats.\"\n\nHe grabbed each mask briefly and demonstrated. \"We are going to fuck your throats. You don't have to worry about pleasing us. We will do that ourselves, just as we like it. You have two jobs. First, be fully aware of what we are doing, so that you can breathe through your noses when you have the chance. Noses and nasal passages are for breathing, your mouths and throats are for pleasing a cock! Choking, passing out or vomiting is a definite turn off, and your purpose in life tonight is to please us. So, your first job is to keep breathing and stay awake and aware!\"\n\nSaskia was suddenly pissed off, but she was also excited and wet. How dare they think they could just use her like that! Why did it make her so hot?\n\n\"Once you have accomplished that, observe carefully how we use your throat, what we like and what we repeat, and what makes us groan with pleasure. Learn to anticipate our needs and motions and lend yourselves to them. You must never resist, you must flow and accommodate. If you are a promising student, you will invent ways to please us even more, tonguing or sucking at just the right moment. So, your second job is really to get us to come. And when we do, you will swallow every drop, making triply sure that not one iota escapes your sucking mouth. You will suck on us until you are absolutely certain that there is not another drop left to be had. And then you will feel pride and accomplishment, and feel how much we like you for what you have done.\"\n\n\"Saskia, you will begin with me. Brown haired Rene' will begin with my friend Ralph, and black haired Rene' with my friend Husky. But fear not, you will all get to have all three of us before your training session is over.\"\n\nRobbie reached down and touched Saskia between the legs. He lifted his fingers to his mouth and sniffed loudly. \"A very promising student indeed!\"\n\nRobbie grabbed her head and positioned her mouth right in front of his waist. \"No pain no gain, beautiful!\"\n\nHe slowly but inexorably slipped his cock past her lips and as far into her throat as he could. She was so shocked she forget to breathe, then panicked for air. He held his cock all the way in and held her head still, until he heard air rush through her nostrils. \"That's the way!\" She was even more pissed off, but even more excited at the same time. \n\nShe heard Robbie grunt and breathe hard, and she began to visualize and anticipate the motions he was making. She tilted her neck and opened her mouth as he was driving his cock into her mouth, and closed it a little and sucked when he was on the way back out. He hesitated when just the head of his cock was in her mouth and she began to tongue him strongly when he did. He laughed.\n\nThen he got up on his tiptoes and really stuffed it down her throat, using his hands to pull her head up towards his crotch. She managed to suppress her gag reflex, but her throat had an involuntary spasm that she had never felt before. Robbie groaned and said \"Yeah, Saskia, I knew you would be great. Just like that, baby!\"\n\nInsensitive male dolt. But he did warn her, and it did make her hot.\n\nTo her left, one Rene', she forgot which one, was making awful groaning and desperate breathing noises, like she was having big trouble with her assigned trainer. Was that the one Robbie called Ralph? On her right, the other Rene' was cooing and enthusiastically taking on Husky, was that his name? She found herself wondering which one she would get next.",
        "Suddenly Robbie's legs vibrated. \"Get ready for phase one, Saskia!\"\n\n+++++++++++++++++++\n\nSuzanne thought she could be detached while waiting for her turn to train Saskia. She knew she would enjoy making her old rival for Bob the Knob's attention submit and serve her, and making her love doing it, and she was really looking forward to it. But watching Saskia just 15 feet away with three dicks waiting for her spoke to something dark and nasty inside of Suzanne. She had already accepted that she wanted to try it intellectually, but this was the first time she realized it was a pounding inner drive she could not deny. She also knew it was exciting to fantasize about it, but she previously had not realized that there was such a direct route from her eyes and ears to her pussy, which was already frothing wet.\n\nShe would have Saskia give her a little relief, and then the two Rene's (they were hot, she had to admit) and something about dominating the prim, proper and perfectly groomed almost look-alikes made her dark side buzz. She was also hot from the thought of submitting to three cocks, hopefully soon, very soon she would get to do it all. Robbie was surely the man for her! \n\n+++++++++++++++++++\n\nRobbie was concentrating on Saskia's Suzie signal, learning that she was really turned on, and reading that what was happening to her tonight was resonating with and pumping lots of her fantasies. Was she really sending that loudly, or was he getting more sensitive to the signals? He concentrated on Rene' and Rene' for a moment. One was getting her curiosity Suzie satisfied and was very turned on, enjoying Husky's cock and wondering who was watching. The other was freaked completely out - overwhelmed by Ralph's cock in her throat and scared at how much it turned her on - plus hoping like hell that the other Rene' was watching. Wow. \n\nThen Suzanne's Suzie signal came blasting through. She was looking forward to making all three female trainees serve her, but she was also deeply envious of their opportunity to get three cocks in the same evening. Her signal was super strong - by far the loudest he had ever heard from her, but it was thankfully clear of any discordant 'Melanie Meltdown' sexual psychopathy. But it was not so thankfully full of fantasy images of multiple cocks penetrating her in every possible way. Double Wow.\n\nHusky Varna groaned and began chanting \"Yeah, oh yeah!\" and frantically pounded his cock into Rene's mouth. She began breathing even more loudly through her nose, and made a strange strangling noise as Husky let loose. But her Suzie said she liked it. Husky certainly did. And she managed to get it all and keep it all down. \n\nRalph just kept up his steady pounding of the other Rene', gradually increasing the depth of his strokes while keeping a strong grip on the handles of her mask. He was still not reaching full depth, but he was getting deeper with each thrust. She was getting better and better at controlling her breathing, and was beginning to relax and enjoy herself.\n\nSaskia, ever the top shelf athlete, had completely mastered Robbie's motions, and was not so gently tonguing and sucking him in perfect complement to his efforts. She was looking forward to him coming, and determined to suck him dry and drive him crazy. Robbie couldn't resist her anymore. He felt the wave moving from the center of his body and radiating toward Saskia. He was almost a spectator as he shot his first spurt into Saskia's willing mouth.\n\nHe heard Suzanne signal envy, wishing she was getting him instead of Saskia. Nice. But then he realized she wanted the same thing from Ralph and Husky. Too much information. Is this the kind of signal that Asa was talking about not being able to shut out? \n\nHe and Husky exhausted themselves at about the same time, and everyone in the room except the three masked and therefore blindfolded trainees turned to watch Ralph and the remaining Rene'. In addition to Suzanne and Lara, his fellow trainers, the audience included Nora, Mei Ling, Cisco, and Doctor Bella Andrada, the postdoc neurooncologist who wanted to be with Saskia and that Asa had warned him not to reveal anything about his abilities to. Big Liz and Little Marilyn had not joined Ralph tonight, as they were still in negotiations with Suzanne about she getting to be with Ralph versus the two girls each getting a one on one with me. Ralph did bring his audio gear, and had set up four speakers to play recordings of crowd noise and muffled conversations, so that it sounded to the trainees like at least a dozen more people were seated around the room and watching them. He had a remote control to play various noises and reactions when he wanted to make an impression on the trainees. \n\nRobbie was amazed to see that Ralph's current Rene' was now well beyond comfortable with the situation. Although her hands were bound behind her and firmly attached to the wall, she was now lunging forward to take everything Ralph could give her! It looked almost like the motion that Mei Ling had taught the girls to use for a close quarters head butts when appropriate. This was close quarters head, all right. Ralph then totally lost control, grabbing Rene's head handles even more energetically and panting as he obviously filled her mouth with fluid. \n\nMei Ling and Suzanne both involuntarily mimicked her motions and whispered \"Get it!\" Robbie supposed that he and Cisco would have to deal with that. He was pretty sure Cisco was already comfortable with and even able to enjoy Mei Ling's desires, at least he said he was. Robbie was still dealing with it. \n\nSuddenly his attention snapped back to Saskia, who was still enthusiastically sucking him well beyond dry, and her Suzie was desperately seeking some acknowledgement and approval. Robbie, certain she had cleaned him out, grabbed her handles and tilted her face up towards his and kissed her mouth tenderly. \"Good girl!\" he said loudly enough for all to hear. Ralph triggered some applause and Saskia's Suzie beamed contentment, and both Rene's signaled envy.\n\nHusky emulated his frat brother, and kissed his Rene' tenderly, praising her loudly. \"That was so good, beautiful!\" Ralph triggered more applause, and then did the same for his Rene'. She was still panting frantically. \n\nRobbie kissed Saskia once again and stepped over to the still panting Rene', making it clear she was his next trainee. Ralph moved toward Saskia and Husky to the remaining Rene'.\n\n+++++++++++++++++++\n\nSuzanne could not believe how envious she was of the trainees when the boys switched places. She was sure she could do even better than they had. Goosebumps covered her shoulders and breasts. Chills and shivers raced up and down her spine. Juices dripped down her legs. When it was her turn to work with the trainees, they were going to know instantly that she was really into being their Mistress. Get ready to lick it, you bitches! \n\nShe watched Saskia eagerly flow her mouth and throat onto Ralph's huge dick like a jellyfish encircling and engulfing its prey. She wanted it for herself. The two Rene's took to Husky and Robbie the same way. They were well beyond basic training and getting into some very advanced cock sucking. Lucky bitches!\n\nShe looked over at Mei Ling, who was apparently just as worked up as she was. Her tongue was out of her mouth, and she leaned back into Cisco, who was rubbing her shoulders and neck. She reached down and touched her thighs and groaned. \n\nAll three trainers suddenly shook and very obviously came again, and three trainees devoured them completely. Suzanne reached out and touched Nora on the knee, and Nora reciprocated. \n\nThe boys said they needed a break to recover before the third throat fucking session, and Suzanne stepped over to Saskia dramatically. All eyes in the room were on her. Dr. Andrada gasped out load as Suzanne stood just over Saskia, arms akimbo and legs shoulder width. Suzanne was afraid that Saskia would recognize her voice, so had told Robbie what she wanted him to say.\n\n\"Time for you to take a more active role, Saskia, in pleasing your new mistress. Do the best you can, and be totally aware of what pleases her or does not. You must work hard to make her come, several times, and if your performance is not sufficient for her, she will then grab you head and use you to please her properly.\"\n\nSuzanne put one high heel boot up on the higher of the two rings attached to the wall, used one hand to steady herself against the wall, and with the other grasped the handle on top of Saskia's head. She moved it until Saskia's face was about an inch from Suzanne's snatch, which was glimmering even in the low light in the room. Everyone in the room heard Saskia gasp in shock, presumably as the smell and pheromones hit her. \n\nNora, surprisingly, sent a strong Suzie signal and whispered in one of Doctor Andrada's very pretty ears. \"Do you think she is going to eat that pussy?\" We were breaking new ground here, I guess. \n\nDoctor Andrada, perhaps breaking some new ground herself, kissed Nora on the lips and said \"I sure would!\"\n\nNora laughed. \"If you ever get the chance, don't miss it! Ask Saskia about it later tonight.\"\n\nSaskia was leaning forward, trying to reach the source of that incredible odor, and Suzanne was using her old trick of holding it just out or reach, at least until her sub begged for it.\n\nSaskia caught on quickly and shivered as she announced loudly to the audience \"Please, I want it!\" \n\nSuzanne held fast.\n\nSaskia almost screamed. \"Please. Mistress, I want to eat your pussy!\"\n\nSuzanne smiled almost cruelly and slightly released her grip. Saskia pushed against her grip and reached her goal. Everyone in the room drew in a big breath, and Ralph pushed the remote and the speakers played a murmur running through the (virtual) crowd. It sounded very loud in the small space.\n\nNora reached over and rubbed Bella Andrada's thigh gently. \"Bet you hope she feels the same way about you, don't you, Doc?\" Man! Nora was really into this!\n\nSaskia was too. She bonded onto Suzanne's preternaturally perfect snatch like she was stuck on with superglue. Her lips made a virtually vulcanized seal with Suzanne's inner lips and she rooted and sucked like a trained French pig finding truffles. We were all frozen in time watching her. Bella Andrada begin moving her head slightly in symphony with Saskia's ministrations, and Saskia's cooing, humming note of triumph filled the otherwise silent room. \n\nSuddenly Suzanne sneezed loudly. Lara, Nora and I shared a look. That was quick, and that meant it would happen again soon. \n\nNora whispered to Bella \"She often sneezes when she has a good orgasm.\"\n\nSuzanne sneezed again, and again. Nora laughed. \"Or when she has two or three!\"\n\nSuzanne stepped away from Saskia, the bent down and gave her a quick kiss on the lips. She said \"Good Girl!\" in almost the same tone I had used. Had Saskia recognized her voice?\n\nI really couldn't tell, because Suzanne then quickly reversed her left and right hands on Saskia's mask handles as she turned to face the audience. She made eye contact with Bella, and then sat down on Saskia's face, wiggling her ass right down onto her mouth.\n\nSaskia, now a bona fide sexual athlete, thrust her neck forward to meet Suzanne at least halfway. I inferred that her tongue was rolled up and thrusting forward. She looked like a pigeon pecking. Soon Suzanne was grunting with each of Saskia's little thrusts up and into her ass, and then a big sneeze resounded. Suzanne straightened up and walked casually back over to her chair in the front row, preening and looking at her nails.\n\nMaybe this woman WAS too hot for me. I was stunned. Suzanne was by far the most powerfully exciting woman I had ever seen, and my impression had been overwhelmingly confirmed by at least a hundred guys and now a dozen women. They were powerless to resist her. But was that a good thing? All those wandering eyes and clucking tongues of people thinking I was out of my lane, out of my league, out kicking my coverage, etc. might just be right. But I could read her Suzie, and all those other people could not. I knew she was being honest with me about her blooming sexuality and unfulfilled desires, and I could literally feel how much she needed it. I could also feel how much she liked me, and Lara, and Nora. But what should I do about it? Would she really stay with me?\n\nHusky and Ralph now made it clear that they no longer needed a rest - in fact they were quite ready to go, so I guess I should be too. Soon all three trainer/trainee throat fucking permutations had been checked off on our project plan. Lara and Nora took Saskia and hooked her up to the trapeze in the bedroom, and most of the audience quickly took seats on the carpet nearby, eager to view Act Two. Was I ready for it?\n\n+++++++++++++++++++\n\nDwight was just about to send his weekly summary and recommendations into HQ when he got a text from Roger Sherman. \"New developments. Meet for dinner at 1900.\" Roger meant Bucks in Woodside again. Please, not every night. \n\nDwight texted back \"How about another restaurant?\"\n\nHe was surprised that Roger did not resist, but replied with the address of a new place on East 3rd in San Mateo. Dwight took the scenic route, and enjoyed driving along El Camino Real to get there. It looked like an upscale diner for the same kind of VC and lawyer crowd that frequented Bucks, and the menu offered a bit of everything, in a brick and blackboard motif. A welcome change. When Dwight arrived, Roger had already put away two drinks and the waiter was just serving his third. What was he celebrating?\n\n\"Well, it looks like my recruitment of Shaniqua has broken the case wide open!\"\n\nRoger was easy to read. All he had been needed for was close the deal to recruit Shaniqua (aka Charlene Jackson Johnson) after Dwight had located her and set her up, but he already knew exactly who Roger's report would give all the credit to.\n\nRoger was loquacious. \"The Chinese have been running her for years, only she thought it was local business intelligence thieves, not foreigners. Her contact list was basically a stadium full of MSS recruits! About half of which we already knew about, and half we did not. Seeded all over the valley, too. Stage one is discover what has already been lost, then decide which ones to keep ignorant and feed bad or contradictory data too, and which ones to double.\"\n\nThe waiter came by and they ordered. At least that shut Roger up for a minute.\n\n\"Our Miss Charlene is pretty lucky, though. After she helps us set the hook in a few big fish, we will probably disappear here into witsec somewhere far away from California. The marshals won't even know her real story, and she will probably just concentrate on raising her little girl. Makes me feel proud!\"\n\nDwight tried to keep a straight face.\n\n\"The Chinese have probably already figured out that your fearless leader over at your day job is a narcissistic managerial disaster, plus they already have the algorithms he developed copied and catalogued. But I'll tell you, Shaniqua's client list is amazing, and some of their 'idiosyncrasies' are extremely compromising material. We already have some take from her new jewelry that would sink a governor, and two federal judges, and keep several famous VC firms from ever raising another fund.\"\n\nTheir food arrived, a good thing because Roger needed something to sop up all the booze he had pounded. He scarfed his food just as quickly as he drank. Robbie sudden flashed on that old movie that Nora liked, \"My Dinner with Andre\" but with about half the IQ level. \n\n\"But you have certainly benefited from working for me, there Dwight the Dweeb Boy. The HQ boys are pulling you back in to design a national program to identify and recruit people to do more 'preventive penetrations' like this little op. If you can pull it off without me, which is of course in great doubt, you might be on track for a cushy desk job. I'm not sure you are cut out for field work, anyway!\"\n\nRoger would be aghast at some of the field work and even wet work that Dwight had already done, but he wasn't cleared to know about any of it, and probably never would be. With his sweet Carmencita waiting for him in DC, and already moved into his apartment, Dwight wouldn't mind a tour of duty in DC or even a long term posting. \n\nHe had already heard she was developing quite a reputation as a miracle worker, based on not only Dwight's full recovery from his literally jumping Pavel at the tennis tournament in Austin, but also several other guys and one woman that Carmencita had rehabbed in record time. Two of them were convinced that their careers would have been over without her. It was also rumored that her patients, including the females, ended up having a big crush on little Carmencita. \n\nBut Dwight was the only one she was engaged too. His bride to be already knew he really didn't work at the USDA, and she could also help him with the kind of physical therapy he really wanted.\n\n+++++++++++++++++++\n\nRock \"Red\" Tappert got an email update on his latest submissions from his IP attorney, and was pleasantly surprised at the speed at which the examiners had acted. He knew sometimes \"hot\" subject areas like photonics got fast tracked for examination, but this was a record. He dashed off an email to Robbie Roberts, inviting him and as many woman as he wanted to bring to supper. He would have to tell Roberts about the patents before he left town. Plus, Veronica had made it abundantly clear that she wanted to meet Robbie and all his ladies again when she was \"not tied up\". Rock looked up at the shelf in his office, which held one of the little UDP 'party favor' dolls that commemorated Veronica's 'Rodeo Night', as she called it. He smiled warmly. That night had ushered in a new and very wonderful period in their relationship.\n\n+++++++++++++++++++\n\nLara had added a few new bars and rings to her trapeze setup, and now had Saskia trussed up in a very compromising position, one that I had not seen before. It had an immediate effect on me. She was suspended with plush ropes from three points: a leather ring around her waist, another set of rings around her knees, and a final set around her wrists. She was otherwise naked. The basic idea of Act Two was for all three of us to fuck Saskia while she was bound, blindfolded, and totally unable to resist us. \n\nAlthough Saskia didn't look anything like Suzanne (she was taller, bigger, more muscular, fair skinned, and her hair was dark, but shorter and not shiny raven black) suddenly I was sure it was Suzanne in the trapeze. Paging Dr. Freud, or at least Dr. Weltschmerz. \n\nSaskia's Suzie signal snapped me out of it. She was desperate for us to get started. It was one of her most powerful recurring fantasies, and she was about to get it for real. \n\nThen Suzanne's signal popped up even more strongly - sending a mixture of anger, envy and smoldering desire. Her rival was about to get something Suzanne desperately wanted, and she was going to get it first, and Suzanne had to watch it happen.\n\nSaskia was breathing like a race horse, her ribs rising and falling and making her whole body swing and sway on the ropes. It had a nice rhythm, and suddenly I knew I could dance to it. \n\nRalph and Husky were waiting for me to initiate things. I decided to make it like I imagined Suzanne would want it, tender and slow, and then fast and rough. She could watch and anticipate what would happen to her soon. It would drive her totally crazy. \n\nI kneeled near Saskia's head and began to kiss her gently on the neck. I whispered to her. \"Saskia, we are going to fuck you now. All three of us, with everyone watching. There is nothing you can do but relax and enjoy it. Both of my friends are going to do just what I do, at least at first, and then we will improvise!\"",
        "She groaned. I moved from her neck to her mouth, kissing her just as sweetly and tenderly as I could manage. She was already having trouble breathing. I held onto the two ropes that held the collar around her neck, swung under her, and kissed her breasts. Suzanne spiked a massive Suzie signal, sounding just like she did when she wanted it rough and I made her wait for it. Delicious. Then Lara and Nora's signals joined in, also imagining Suzanne on the ropes and getting her fantasy. I couldn't tell if they wanted the same thing, or just wanted Suzanne to get it.\n\nI moved down near her waist, standing and bending over her, and begin kissing the back of her thighs. Husky began kissing her neck. Saskia strained against her restraints, trying to spread her legs even wider than the ropes would allow. I swung under her, using my newly improved shoulders that she helped build, and kissed the top of her thighs. They glistened with wetness and now it was me straining against the ropes to get my head between her legs. She jumped when my tongue found its mark. She tasted incredible. Her Suzie pounded into my brain like a loud engine revving. \n\nHusky began kissing her breasts, and Ralph moved deftly to kiss her mouth. I sucked on her inner lips, a little, and concluded that she was more than ready. Lara, surprisingly, walked over and loosened one of the ropes and moved a clip, then did the same thing on the other side. She spread Saskia's legs a bit, showing me that there was now more room to work in. I slipped between her legs and entered her doggy style. She was wet, but very tight. She felt wonderful. Lara squeezed my butt check and took her seat on the carpet again. What a woman. \n\nI put my hands on the leather belt around Saskia's legs and began my work in earnest. John Henry was with me. It really didn't matter. Saskia came in less than twenty strokes. I stepped back, and Saskia groaned at being emptied so soon. The Husky stood and took my place. Saskia grunted again, realizing a new cock was how at play, and came even faster. What was this, a competition? \n\nHusky stood back and watched, a bit in awe, as Ralph prepared his giant cock to enter Saskia. Bell Andrada lost her cool, and began blubbering. The crowd held its collective breath, and Ralph turned and made eye contact with Bella, and blew her a kiss. I guess if you've got, you flaunt it. Ralph held up his cock and slapped it against the inside of Saskia's left thigh, and then slowly put it home with a flourish.\n\nSaskia made a strange sound, and sent a weird Suzie, too. Mei Ling muttered \"Oh, Fuck!\"\n\nRalph smiled, and did what she asked. Saskia's legs twisted and shook, and then her whole body took on the periodic motion that Ralph was imparting to her. Her grunts soon synchronized with his motion, but it seem to take her a while to get comfortable. But soon she did. She came again, trying to scissor her legs in a weird motion. Ralph increased his frequency and his penetration. Mei Ling groaned hoarsely again. \n\nHusky and I put our cocks up to Saskia's lips and she took them hungrily as soon as they touched her, and took the initiative in alternating between them, occasionally ignoring both to breathe or grunt when she had an orgasm. Ralph was machine like, pounding away at Saskia. Then Ralph pulled out, walking slowly back around to Saskia's mouth. \n\nHusky caught my attention and moved back near Saskia's waist. He ducked under her, facing his head up toward hers, and holding himself up underneath her, positioning to enter her pussy. I guess I was supposed to do my rodeo act, like Husky had done with the lovely Ms. Tappert, and enter her ass from above. I was game. By the time I climbed the ropes to survey my approach, a climb made possible by my new Saskia constructed chest, Husky was already well established. \n\nI grabbed the ropes hard and slipped into Saskia's ultra-tight ass, my dick still well coated with her pussy secretions. Ralph raised one hand up to get everyone's attention, and lifted his big cock with the other hand. He once again made eye contact with Bella Andrada and smiled. If the cosmology thing didn't work out, maybe he could do WWE. He then grabbed the handles on Saskia's head and filled her mouth up completely. Suzanne and Mei Ling groaned in a too loud (for my taste) chorus. \n\nEveryone else knew what was coming, so to speak. Saskia's neck muscles pumped mightily, as she pushed her head forward to greedily meet Ralph's thrusts. Ralph apparently had not expected this, and began wailing loudly. I couldn't maintain my highly-strained position any longer either and I let loose. Husky was ready to go, too. It wasn't perfectly simultaneous, but it was damn close. Several women cried out but I really couldn't tell who. \n\nHusky dropped to the floor and just lay there. I didn't have that option, having to pull myself up over Saskia's body and then do a very clumsy and un-gymnast-like dismount. Ralph stepped back and almost passed out, making his way to Lara's couch. We were spent, literally and figuratively. \n\nSuzanne and Lara moved forward and began to extricate Saskia from the leather bindings and plush ropes that had held her, and helped her stand up. She was quite wobbly. The audience applauded loudly, and Saskia, recovering quickly, curtsied. \n\nSuzanne removed Saskia's leather hood, but kept her own mask on, then spoke. \"I suppose some introductions are in order. You know Robbie, of course. Saskia, this is Husky Varna.\"\n\nHusky blushed and clumsily offered a hand to shake. Saskia laughed, then put one hand on his cheek and one on his butt and kissed him. Why did Suzanne put one hand on his butt, too?\n\nSuzanne continued. \"And this is Ralph.\" This time it was Saskia who blushed, and Suzanne who extended a hand on Ralph's butt. Say what?\n\nSuzanne took off her mask and smiled. Saskia's face froze, then she smiled too. \"I thought that was you, you bitch. I loved it!\"\n\nSuzanne giggled. \"Me too! This is Mei Ling Johnson. Mei Ling smiled and said \"I would like to ask you a few questions about tonight, Saskia.\" Saskia smiled weakly.\n\nSuzanne took Saskia's hand again. \"And this is Dr. Bella Andrada, your secret admirer.\"\n\nBella stepped forward and took Saskia's hands in hers. \"I saw you at Dr. Augie's lecture, and I wanted to talk to you about some of the things he said, and some of my work, and uh, some other things.\" I wished Bella would smile at me like that!\n\nSuzanne interjected. \"But first, we are going to take you to the shower and clean you up, and then Bella is going to make sure you get home okay.\" They started to walk toward Lara's bathroom. \"Give us 30 minutes, and then you come in and get presentable, too, Robbie.\"\n\nI spoke up. \"One more thing, Saskia and Suzanne. I heard that your old mutual friend Bob the Knob is coming back to teach at the new med school. His new lab will be just down the hall from your new office, Saskia.\"\n\nBella made a whoop along with the other two. They all three hugged each other, and danced around a little. What is it about this guy Bob the Knob?\n\n+++++++++++++++++++\n\nWhen everyone else had finally trickled out of Lara's apartment, Lara, Suzanne, Nora and I sat down on the couch. I was now scrubbed clean but still exhausted, but the three of them were all fired up and ready to rock. Their Suzie signals filled the room.\n\nNora spoke first. \"You did a great thing for Saskia, Robbie. She was so happy and relaxed when she left. You're a good man.\"\n\nSuzanne smiled, too. \"May I assume that was a bit of a rehearsal for my upcoming little prank, Robbie? Because I'd like to suggest some changes and, uh, ... additions.\" Her Suzie sizzled, with a lot of images I had, unfortunately, seen before. \n\nLara put out some grapes, sharp cheddar cheese, pita chips, and bottled water. I was the first to grab for it all. Lara smiled, then gave me her hot look. \"We thought you might need a few minutes to re-charge your batteries, Robbie.\"\n\nSuzanne giggled. \"Maybe we should say your fuel cells?\"\n\nNora laughed even louder. \"Fluid reserves?\"\n\nAll three girls giggled.\n\nNora stood. \"In the meantime, I thought I'd do a little dancing.\" Nora began recreating her strip club amateur night routine. \n\nLara and Suzanne stared at her with slack jaws and altered breathing, just like the guys in the strip club had. They leaned back on the couch and devoted their full attention to her. \"You can take your time, Robbie!\" they both said. Say what?\n\nI was in a bit of a trance. My thirst was now slaked, and my blood sugar was climbing back toward normal again. I was feeling good about the recently competed semester, and looking forward to summer. I did have to set up Suzanne's little prank party, but the condo was available, as was the cast I had planned. I knew what Suzanne wanted from all her Suzie images. I even knew what Lara and Nora thought that Suzanne wanted, based on their conversations with her that showed up in their Suzie images. If I covered all those bases she should be certain that she had tried everything she wanted to. If I didn't cover it all, she might feel like she had to try again. But if I did include all her desires, would she like it so much she wouldn't need me anymore?  \n\nSwing for the fences, Robbie. Don't do it halfway. Truth is truth, right? I can handle it, either way, right? What, me, worry?"
    ],
    "authorname": "conanthe",
    "tags": [
        "bdsm",
        "fuzzy logic",
        "college",
        "fellatio",
        "sorority",
        "cunniligus",
        "fraternity",
        "rodeo",
        "group sex"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/my-only-talent-ch-34"
}
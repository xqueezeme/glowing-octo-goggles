{
    "title": "Senior Year Memories Ch. 20",
    "pages": [
        "(Usual Disclaimer Time: Even though this story almost entirely takes place in a high school setting, all the characters in this story are 18 years old or older, and since we're living in the wide wonderful world of porno-land here, where clich\u00e9s roam free and things might get a little unrealistic from time to time, please remember it's all in good fun. This story is highly serialized, and though it's not 100% necessary to have read the whole story up until this point to enjoy the content of the chapter, it's definitely advisable to understand some of the ongoing plots.)\n\n(Author's Note: Has it already been 20 chapters? So it has! Special thanks this chapter go out to all of you, the fans, for keeping this story going and my own enthusiasm high. I know there have been ups and downs, but the vast majority of you have been wonderful, especially a delightful few I've had the opportunity to chat with who I won't name out of discretion but will thank profusely for being kind and encouraging (you know who you are!). As always, I'd like to again thank MisterWildCard for acting as a second set of eyes on this chapter and for his honest editing and fantastic suggestions. Please check out his story, \"Brooke's Wild Ride\" in Erotic Couplings, as it acts as a canonical side story to Senior Year Memories starring Regan Hills High's favorite blonde cheerleader.)\n\nPreviously, on Senior Year Memories: 18-year-old Ryan Collins' quest to do something nice for each of the nineteen women he's had sex with this senior year got off to a quick start as he aimed to help the women of the McNeil family first. Ryan helped his former best friend, Tori McNeil, with the assistance of sexy gamer Izzy Barnes and Tori's girlfriend April Martel, ensuring that Tori was both protected in online games and in her heart. Next, Ryan helped out Tori's mother, Lauren, by breaking up her husband's affair with his prot\u00e9g\u00e9, Kelly van Houten, by giving Kelly the fucking she desperately needed. Finally, with Lauren's husband now apologizing and pledging his devotion to her, Ryan was able to coax her into reconciling with her reformed hellraiser daughter, Rachel. With the McNeils checked off his list, who will Ryan help next?\n\nNames Remaining on Ryan's Christmas List: Addison, Brooke, Haley, Hope, Jade, Josie, Kaitlyn, Mallory, Marie, Mrs. Lynn, Mrs. Sullivan, Nadia, Noa, Rose, Sarah, Sophie\n\n***\n\nI hated lying to people, and after a lot of the problems I'd had at the earlier end of this year, I'd vowed not to lie anymore. I had to amend that because not lying at all is an unreasonable expectation and sometimes a little lie is a necessary survival mechanism, but big lies were something I meant to avoid at all costs from this point on.\n\nIt was the medium lies that were a little trickier to figure out. More often than not they seemed to fall into that category of lies that was bound to get me in trouble, but there were occasions where they were necessary to make the impossible possible.\n\nTake getting Kaitlyn Pruitt and Sarah Kent into the same room, for instance, two girls who probably couldn't have been more different.\n\nKaitlyn was a popular cheerleader and an utter bitch, even if she had softened greatly in the past few months since I'd gotten to know her better. Utterly gorgeous with long, silky black hair, soft, lightly tanned skin and a body that less talented writers would say had \"curves in all the right places\", which in this case translated to a magnificent ass and an impressive set of DD-cup tits. Dressed stylishly in expensive jeans and a dark top that showed a lot of cleavage, she only took her eyes off of Sarah's impressed dance to shoot me the occasional smirk of approval. I'd come to appreciate that smirk, ever since she was the one who took my virginity and spread news of my endowment around school in a way that had allowed for an interesting senior year at Regan Hills High. You could say I knew I owed her a lot.\n\nSarah was, well, everything that Kaitlyn wasn't. Short and blonde and in the school marching band, she was one of the most painfully shy people I'd ever met, usually peeking out from behind her hoodie with bright green eyes further hidden by her horn-rimmed glasses. She was quiet, but had a way about her where she said something only when she really had something to share and had a natural, radiating intelligence. Cut her layers back and she was a sexy little thing with a tight dancer's body, a pair of firm B-cup tits, and a wild side she knew how to hide well. One of Josie's best friends, she first seduced me on Halloween while wearing a mask and it took a month of tracking her down to properly find her and really get to know her and what she wanted out of life.\n\nThat I'd had sex with both of these girls this year would've surprised me enough if you told me back in August, but that Kaitlyn and I would be standing together in the small dance studio behind Sarah's house watching her rock out on a stripper pole dressed only in a pair of spandex shorts and a sports bra, well, that would've sounded completely insane.\n\nNow, though, hardly anything surprised me.\n\nKaitlyn, though, was still capable of having her jaw drop.\n\n\"Wow,\" she said, watching Sarah's moves.\n\n\"What'd I tell you?\" I said.\n\n\"Oh, you told me, I just didn't believe it,\" Kaitlyn admitted. Even with both of us watching her, Sarah was lost to the dance, completely in a world of her own. She'd admitted to me, not long after I found her true identity after Halloween, that her dance teacher mother taught her how to pole dance as a way of building her confidence. Though it didn't do much to make her more outgoing at school, it was impossible to ignore that she was an amazing dancer.\n\n\"You gotta stop doubting me,\" I said.\n\n\"I should,\" Kaitlyn admitted.\n\n\"You should,\" I echoed.\n\nAfter a moment, Kaitlyn added, \"You tell anyone I admitted I was wrong, I'll destroy you.\"\n\n\"Well, we can't have that,\" I replied.\n\nShe poked me in the side. I laughed.\n\nEven though she was the first girl that I had sex with this year, I knew that Kaitlyn wasn't the kind of girl I had any hope of a future with from a romantic perspective, and that was fine for both of us. She was great to have as a friend again, and when we could find time to hook up the sex was amazing. She was slowly becoming less of a bitch at school and more discerning when it came to the kinds of guys she got together with, and miraculously enough was even improving on her history tests after I'd started tutoring her.\n\nI may have started this year with a pretty low opinion of her, but Kaitlyn had made one helluva turnaround.\n\nI just hoped the two of us could help Sarah do the same.\n\n\"So,\" Kaitlyn said. \"Do you want me to tell her why we're really here, or should I?\"\n\nHere's where that medium lie came back into the picture. I knew I never would've gotten Kaitlyn in the same room with Sarah, let alone see her dance, by telling her the truth, because Sarah would've frozen up and told me she couldn't go through with it. I got around this by telling her that Kaitlyn was interested in taking some pole dancing workout lessons and wanted to see what it'd be like. It wasn't completely untrue, because it sure did look like Kaitlyn was interested in what she saw, but it wasn't the main reason we were here either.\n\n\"I'll tell her,\" I said.\n\n\"Because I don't have a problem telling her,\" Kaitlyn said.\n\n\"I'll tell her,\" I repeated. \"Thank you, though.\"\n\n\"Anytime,\" Kaitlyn said, fist bumping me just as Sarah's song wound down.\n\nSarah looked utterly radiant and satisfied, covered in a light sheen of sweat and panting slightly, a broad smile on her face that only disappeared once we started clapping for her. Then she was back to her usual nervous self, her posture suddenly demure as she walked over to Kaitlyn and me.\n\n\"So, uh, yeah, that's some of what you can learn. My mom could show you a lot more since she's the real dancer and all, but that's, uh, a sample of what you could learn. I could teach you if you really want, but you should really learn from her. She's better, but, however you want to go, I can get you a discount since you're a friend of Ryan's and all, and a friend of Ryan's is a.. uh...\" Sarah said, her eyes on the floor, only casting the occasional quick glance at us.\n\nTime to tell the truth.\n\n\"I'm sorry, Sarah, but I kinda sorta definitely lied about why we were here,\" I said.\n\n\"You... what?\" she said, her eyes wide and fearful.\n\n\"Kaitlyn's not here to think about taking pole dancing classes,\" I said.\n\n\"I actually am, now, after I saw all that because you're fucking hot, girl, and I can totally pay you, but, sorry, Ryan, continue, we can talk money later,\" Kaitlyn interrupted.\n\n\"I'm confused,\" Sarah said.\n\nI took a breath. \"Last time I was here, you told me that you'd always dreamed of being a cheerleader, but you were afraid of trying out because of the pressure and the rejection? Well, since I knew that you'd probably be too afraid of going to a tryout if I set one up, I kinda brought the tryout to you. And, Kaitlyn? The verdict?\"\n\nKaitlyn smiled. \"Now, I'm not in charge of the squad, that all comes down to Dakota Lewis, but I rank pretty high and she and me're tight. We got a couple slots open this year that haven't been filled yet, and one of them is yours if you want it. If you're afraid of any of the girls giving you shit, you won't, but if any of them do (probably Haley), come to me and I'll fuck 'em up for you, easy.\"\n\nSarah looked hesitant. I didn't blame her; Kaitlyn smiling like this was usually not a good thing, at least when the old Kaitlyn was involved. That didn't mean she wasn't tempted, no, I could see the battle in Sarah's mind between wanting this so bad but having to deal with her own shyness and any lingering fears she may have had about Kaitlyn as a person.\n\nKaitlyn saw this too, and went in for the kill. \"Please say you'll join the team? We could really use someone who knows how to dance.\"\n\nSarah closed her eyes tightly and let out a breath. \"Yes.\"\n\n\"Fantastic!\" I exclaimed, pulling Sarah into a warm hug. As much as I was happy for her having this opportunity, and I was damn happy for her, I was also glad that I didn't have to come up with another plan for her since this was my one big idea for what to do for her this December.\n\n\"Awesome,\" Kaitlyn said, hugging Sarah herself once I let her go. \"Like I said, you'll still need to pass Dakota's approval first, but show her even half of what you showed me here and you're in.\"\n\n\"Will you be there... when I'm trying out?\" Sarah asked Kaitlyn nervously, finally opening her eyes.\n\n\"Fuck yeah I will. A lot of cheerleaders are real bitches, ain't gonna lie, but you show up and show off and I'll get Brooke and Jade and Addison together and you'll have your own personal cheering section. You're gonna have nothing to be scared of, and you're gonna kick ass, and gimme and some of the other girls a chance to make you over and we'll have you looking like one of the hottest damn cheerleaders in school,\" Kaitlyn said proudly.\n\nSarah blushed, casting her eyes downward away from Kaitlyn, then to me. Her voice barely a whisper, she said, \"Thank you.\"\n\n\"It's my pleasure. Honestly,\" I said. \"I've... I've been where you are. I've been shy and beat down and not seizing what I wanted because I didn't think I could have it, but if this year's taught me anything it's that if you want something you have to go for it. I'm a lot happier for it, and I think you will be too.\"\n\nIt was hard to tell behind her glasses, especially with her eyes cast down like this, but I think there might have been tears in the corners of Sarah's eyes.\n\n\"I'm not... not saying I'm not scared, because I am. I'm so scared, so, so fucking scared. I can't... I don't... this isn't me. This isn't something I ever thought I'd do. I... failure. Failure scares me,\" Sarah said.\n\n\"You're not going to fail,\" I said.\n\n\"Seriously. You're better than half the girls on the squad, at least; you're gonna kick ass,\" Kaitlyn said.\n\nSarah laughed, softly. \"I wish that took all the fear away. I'm... I know I'm my own worst enemy, but I also know that it helps a lot when you've got people who believe in you, people who... people who want to help. Thank you. Thank you, Ryan, for doing this, it means more to me than I think you'll ever know. Thank you, Kaitlyn... fuck it feels weird to say that.\"\n\n\"You'll get used to it,\" Kaitlyn said.\n\n\"You really do,\" I joked. \"Get to know Kaitlyn; she's more bark than bite, not so say she doesn't bite if you ask her nicely enough, but she's a great friend if you give her half a chance.\"\n\n\"There were some compliments in there, but I still feel like I oughta be insulted,\" Kaitlyn said.\n\nSarah laughed, a high, relieved laugh. The nerves and fear weren't gone, but she was sounding more like the sweet girl I really liked. Our eyes met, hers still wet but looking up at me with such pride and satisfaction that I couldn't help but want to take her in another hug.\n\nSarah had a similar idea, but hers involved suddenly bouncing over to me, wrapping her arms around my neck and pulling me into a quick, powerful kiss. Our lips became one with the passion, our tongues lightly grazing each other just as the all too fleeting kiss ended. It was so easy to get wrapped up in her shyness that it was easy to forget how much energy she was capable of hiding, so much so that I think it even surprised her sometimes. This was one of those times, as once she let me go she looked up at me with big, surprised eyes and a goofy smile.\n\n\"Sorry,\" she said quickly, even though she didn't look it.\n\n\"For what?\" I asked.\n\nKaitlyn tapped Sarah on the shoulder. \"Hey, you wanna spread some of that sugar around? I mean, Ryan only gave you the networking connections, I'm the one giving you the in to the team. So, really, I think I'm owed a kiss here too, aren't I? Maybe even a better one than he got?\"\n\nSarah asked me, \"Is she serious?\"\n\n\"Sort of. The implied coercion part is just Kaitlyn trying to hold onto her mean girl rep while telling you that she'd really like to make out with you because she thinks you're hot. She won't really hold it against you because she's not that much of a bitch, but for what it's worth it's a pretty big deal if she thinks you're hot because, well, have you seen the girls she hangs with?\" I said.\n\nSarah considered this. \"Is he serious?\"\n\n\"Yeah,\" Kaitlyn admitted, shrugging.\n\nSarah looked Kaitlyn up and down, biting her lip as she eyed the more confident, bustier girl.\n\n\"Well, it seems only fair...\" Sarah said slyly, pulling Kaitlyn in for a kiss.\n\nIt was fun watching Kaitlyn's eyes go wild for just a second as Sarah actually went for it, mostly because I'm sure Kaitlyn doubted Sarah had it in her. She caught on quickly, though, kissing Sarah back and showing her why she was one of the top sluts of Regan Hills High. The two of them couldn't have been any more different, which is probably one of the main reasons they were so hot together, but the two of them made out with a passion you'd have thought had been building up for ages. This wasn't just a simple, playful kiss, no, the two of them were making out as if their lives depended on it. They were unhurried, sure, but there was a fire that Sarah used only sparingly that was hot as fuck to watch. Their low moans and groans, the way their hands slowly began caressing and groping one another... I wanted to join in, but I was content to just stand there and watch while my cock grew in my pants.\n\nKaitlyn came up for air long enough to look at me. \"You know that this is gonna end with all of us naked and sticky, so what the fuck are you standing over there for? Get over here?\"\n\n\"Seriously,\" Sarah agreed.\n\n\"Oh, I like you,\" Kaitlyn purred.\n\n\"And you haven't even seen what I can do with my tongue yet,\" Sarah challenged.\n\n\"Oh I really like you,\" Kaitlyn retorted, kissing her again.\n\n\"I was just being polite,\" I said, taking off my shirt and sliding in behind Sarah. I rested my clothed cock between her ass cheeks and getting a very contented sigh for my troubles.\n\nWith Sarah now sandwiched between Kaitlyn and me, there were so many options for how to continue, each more delicious than the next, but I was content for the moment just standing there, trading kisses with Sarah and Kaitlyn, sometimes both of them at once when we were able to awkwardly contort our necks to accommodate it. I'd learned by now that threesomes can be every bit as awkward as they are hot and fun, but that the hot and the fun had a way of taking precedence over the awkwardness rather nicely.\n\nSeeing two unbelievably hot girls removing their tops more or less at the same time, well, that was one of those sights that had a way of drowning out any awkwardness there might've been. Sarah's modest B-cups and thick pink nipples were a sight to behold, cute, sweet and fun.\n\nKaitlyn's DD's, though, they deserved their own national monument. They looked beautiful in her black, lacy bra, but once she undid it and set them free in all their glory, I swear Sarah's jaw dropped.\n\n\"Those are amazing boobs,\" she said.\n\n\"Thanks. You're not so bad yourself,\" Kaitlyn praised.\n\n\"Thanks,\" Sarah blushed. \"They're not even close to being in the same league as yours, but at least I'll have less lower back pain later in life.\"\n\nKaitlyn laughed, pulling Sarah toward her. \"Oh shut the fuck up and suck on my future lower back pain.\"\n\nSarah was happy to oblige, leaning over and eagerly sucking on Kaitlyn's big, round nipples. Kaitlyn moaned, looking me in the eye hungrily.\n\n\"She's good,\" she admitted.\n\n\"You have no idea,\" I said, torn between looking at the sight of Sarah sucking Kaitlyn's tits, or Sarah's nice round ass jutting out and rubbing against my cock. I reached around, sliding my hand beneath Sarah's spandex shorts and panties and fingering her tight little pussy. I was pleased to feel that she was already hot and wet, but she could've always been hotter and wetter. I fingered her slowly, loving the sounds she made and how it only increased her enthusiasm with pleasuring Kaitlyn.\n\nWe went at this for a while, and when I was satisfied with how wet she was I pulled my fingers from her pussy. Sarah mewled in frustration, though she changed her tone quickly when I hooked both thumbs under the edge of her shorts and pulled both them and her panties down around her ankles. When I freed my cock and slid it between her legs, pressing it against her moist lips, that sound of frustration was replaced by one of a much greater, deeper wanting. Sliding my cock inside of her, inch by tight, slippery inch, it felt a lot like home.\n\nSarah and I may have met under strange circumstances on Halloween, but I was glad that we'd reconnected.\n\nI fucked into her slowly, savoring every moment of taking her from behind.\n\n\"Oh my god, oh my god, oh my god,\" she groaned with each stroke. She no longer sucked on Kaitlyn's tits, instead holding onto her for support. Kaitlyn was glad to help at first, holding her up, playing with Sarah's breasts as she occasionally kissed the blonde girl, but eventually realizing that she was no longer the center of attention, Kaitlyn let Sarah go and dropped to her knees.\n\n\"You think that's great, watch this,\" Kaitlyn said, a mischievous grin on her lips.\n\nWhile fucking Sarah from behind was a distinct pleasure I wouldn't trade for anything, fucking her while Kaitlyn licked her pussy and my cock as it pistoned in and out of her may have found a way of topping that. The already extreme pleasure was amplified, driving me to fuck Sarah harder. Her mouth hanging open, her eyes wide with first shock, then pleasure, Sarah was a lewd sight to behold.\n\n\"Oh my god, oh my god, ohmygod!\" she repeated.\n\nI kissed her, sensing she was going over the edge and building to an orgasm already. It was no doubt to be the first of several, and I couldn't have been prouder. I'd done my good deed for Sarah, she loved it, and I got to cap it off with a threesome between her and Kaitlyn. Not a bad day, by my estimation.",
        "\"Ohmygod, ohmygod, ohmygod-\"\n\n***\n\n\"Oh my god, where did all of these books come from?\" Mrs. Sullivan asked as we carted through another couple cardboard boxes into the library.\n\n\"Oh, you know, from around,\" I said noncommittally. The beautiful, busty and brunette librarian was someone who was normally so used to being in control that it was almost amusing watching her surprise as we carted in box after box of books.\n\nI hadn't spent a lot of time in the library since I had a rather memorable threesome with her and her petite blonde aide, Marie Halpern, earlier in November, but I knew I'd find her here if I passed a message along asking if I could see her after school. I don't think she imagined me bringing a small army of people to cart in boxes of books for a library that desperately needed them, but if anything I think this might have gotten her more excited.\n\n\"Seriously, Ryan, this is amazing. We've needed something like this for so long, how did you pull it off?\" she asked.\n\nJade Alvarez was how I pulled it off, or more appropriately Jade Alvarez and her impressive network of charity contacts. She put the word out about an informal book drive and the donations came in quick, since everybody had a few books on the shelves they didn't read anymore. Most of what we were able to get were in good, almost new condition, and the cash donations combined with some out of pocket money on my end got stretched even further by a solid day of shopping with Rose Ferris at Marsters' Secondhand Books.\n\nIn the end, we were able to scavenge close to 300 new-ish books for the Regan Hills High School Library. It wasn't much, but it was all worth it to see Mrs. Sullivan's unrestrained delight.\n\n\"Christmas miracles come in all shapes and sizes,\" was how I actually answered her, before turning at the sound of Josie cursing from almost dropping a box. \"Where can we put these?\"\n\n\"Put as much as you can in my office; anything else you can't fit in there, put behind the checkout desk,\" she said, marveling at the flow of boxes.\n\n\"Awesome, thanks!\" I said, jogging over to Josie.\n\n\"Oh, don't worry, give me a couple days to sort through all of these and I'm going to have a special thank you ready and waiting for you here!\" Mrs. Sullivan called after me.\n\nRemembering the energetic threesome I'd had in here, I quivered with anticipation at the thought.\n\n\"These boxes are heavier than they look,\" Josie grumbled, probably more at how dropping the boxes had nearly messed up her perfectly maintained goth image than at actually having almost dropped it.\n\n\"Yeah, who'd have thought books would be heavy?\" I responded, sarcastic and reaching to take the box from her.\n\nWithout missing a beat, she pulled the box away from me, a sly smile creeping across her black-painted lips. \"You know it's only 'cause I love you that I'm not feeling insulted by that, right?\"\n\n\"Yes. Yes I do know,\" I said, leaning in for a kiss. The casual ease with which she returned the kiss made me wish we were in a much more private situation where we could do something about it, but I didn't worry; Josie and I had a way of making time for each other. Though our relationship was still new and definitely strange (especially for how much she gets off on me telling my exploits with other women), it felt like nothing I'd ever experienced before. I never in my life would've thought my first girlfriend would be goth princess Josie Wong with her dark fashion, big tits and love for anal, but that it came as such a surprise somehow made it even more welcome. That she was only all too eager to help me with my mad Christmas plan only told me how lucky I was to have her in my life.\n\nI continued. \"You know, though, if you're still having trouble you could always just help Sarah and Hope load boxes on the dolly?\"\n\n\"And not get a chance to show up Fatima?\" Josie scoffed, even though we both knew the odds of her showing up her friend, Regan Hills High's resident track star Fatima Hassan, were fairly low.\n\nAs if to illustrate that point, Fatima chose that exact moment to storm past us carrying a stack of two heavy boxes of books with the same effortlessness as she was undeniably gorgeous. \"Coming through!\"\n\n\"I think your chance to show her up might come another day,\" I said.\n\n\"Probably,\" Josie agreed, a little dejected.\n\nTrying to cheer her up, I said, \"Seriously, though, thanks for getting the others out to help. I don't know if we'd have been able to do it without Fatima, Sarah and Hope.\"\n\n\"Oh, we would've, but our backs would be killing us,\" Josie said.\n\nI snickered. Josie asked, \"What?\"\n\n\"Just something Sarah said the other day. It was... one of those funnier at the time things,\" I said.\n\nJosie rolled her eyes. \"Inside jokes. Awesome.\"\n\n\"I'd rather be inside you,\" I said.\n\nJosie cocked her head back and forth, amused. \"I can agree with that. Later, if your dance card's not too full?\"\n\n\"Oh, I've always time for you,\" I told her, kissing her.\n\n\"I like that,\" Josie said, sighing contentedly as I followed her to drop off the books. \"Be warned: I haven't seen her, but I can feel Marie lurking in the stacks. I think the first time she catches you alone, she's gonna jump you. The smell of fresh books, I think it's like blood in the water to her.\"\n\n\"I know how to defend myself,\" I said, looking around almost nervously. I could've sworn I saw a flash of blonde disappear behind a bookshelf, but I couldn't be sure.\n\n\"Why defend? She's a tight little slut, I think she needs to be shown who's boss. Just make sure you got some cum left for me afterward,\" Josie said.\n\n\"Deal,\" I said. Contentedly putting my arm around her, I added, \"Seriously, though, thanks for getting the others to help out.\"\n\n\"Hey, it's our pleasure. Clean off some bookshelves and do some good deeds, not bad for a couple hours of after school labor and hanging out with... friends,\" Josie said, though she didn't say the last word easily.\n\nI'd noticed that there was another face from Josie's friend group who was missing from helping us out, but I hadn't said anything. This seemed about as good a segue as any.\n\n\"Mia still not talking to you?\" I asked.\n\nJosie shook her head. \"Bitch does this sometimes. I'll deal. She'll talk to me eventually, or she won't.\"\n\nJosie tried to say it like she didn't care, but I knew it wasn't that easy. Josie had a small group of friends in Sarah, Hope and Fatima, but if she had one person who could've been called her best friend, it would've been Mia Roth, the pink-haired emo rocker who had about as much attitude as she had makeup on her face. It'd been more than a month since Josie introduced me to her friends and Mia scared me off because she was angry at the possibility that I might break Josie's heart, and though Josie and I had patched things up, I knew that Josie and Mia had first been fighting, then quiet, behind the scenes. Josie tried to make it look like she didn't care, but I knew it was eating at her a little bit every day.\n\nI squeezed her gently. \"She'll come around.\"\n\n\"Another Christmas miracle?\" Josie asked, dubious. \"Because this ain't exactly a Christmas special.\"\n\n\"Not a traditional one, but I like to think I can make this Christmas a little more special for everyone,\" I said.\n\n\"Well, except for Mia, since she's Jewish and all,\" Josie corrected.\n\n\"True,\" I amended.\n\n\"It'd need a Christmas miracle mightier than even your cock to fix Mia's shit, but, whatever, if that's your gift to me, I won't say no,\" Josie said.\n\n\"No spoilers,\" I said, even though fixing things between her and Mia was really my plan for her. I didn't have any serious ideas on how to do it yet, and my general fear of Mia Roth put me in a position where I was more interested in letting her slide until later (after all, if Christmas specials have taught me anything, don't all the best miracles happen at the last minute?), but for now I was happy to shoot the breeze with Josie while I checked both Mrs. Sullivan and Marie off my list.\n\nI caught Hope coming out of Mrs. Sullivan's office, stretching her back. Tall and willowy and looking every bit the band geek that she was (and very little like Mistress Hope who'd tied me down and fucked me silly not too long ago), she waved to me slightly.\n\nI let Josie go. \"We'll finish this talk later? I gotta ask Hope about something.\"\n\n\"Sure,\" Josie said, kissing me once more and disappearing into Mrs. Sullivan's office herself.\n\n\"Hey, Ryan, what's up?\" Hope asked, every bit as awkward and gawky as she usually was in public.\n\nNo matter how often it happens, it's still hard to bring up awkward conversation topics to people when you don't know exactly how the conversation's going to go, especially when it's about someone you barely know. While I sometimes like to smooth things over with a little small talk, this time I decided that jumping in with both feet would be best.\n\n\"Can I ask you for some information about someone?\" I asked.\n\n\"Does it have to do with the list?\" Hope returned.\n\n\"Yeah.\"\n\n\"Then fire away. Who do you want to know about?\" Hope responded.\n\n\"Daphne O'Connell,\" I said.\n\nHope gulped and went a shade whiter, then a shade pinker at the mention of Regan Hills High School's color guard captain's name. That Daphne was the one who'd gotten Hope into bondage was something Hope had admitted to me the first time we had sex, but that Hope had a major crush on Daphne was something Josie slipped more recently. Daphne was key to doing a major favor for someone from my list, and if anyone could tell me about her, it was Hope.\n\n\"What do you want to know? Is this one of those situations where you just want all the basic bio stuff? No... no it isn't that, you could find all that out online,\" Hope said, flexing her reporter's side. \"You want the sex stuff, don't you?\"\n\n\"Not quite... maybe... fuck, yes, I want the sex stuff. I probably won't need it, but, just in case, it doesn't hurt to be prepared...\" I trailed off, not wanting to give away too many details of my plan.\n\n\"If it's okay with you, of course,\" I added.\n\n\"Why wouldn't it be?\" Hope asked, defensive.\n\n\"Because I know you like Daphne, and I don't want to cross any lines you're not comfortable with while I'm doing this favor,\" I said.\n\n\"Well, thanks, for that, but I don't have a problem with you two having sex, especially if it means you helping someone, and because I know that you and Daphne falling madly in love is about as impossible as things could be so I can still hopelessly pine for her from here. Who's this one helping, anyway?\" Hope asked.\n\n\"Someone... someone I'm not supposed to talk about,\" I answered.\n\n\"Fair enough,\" Hope sighed.\n\nBehind her glasses, Hope tried to get a read on me. I didn't make it easy, not with the plan I was working on.\n\n\"Fine, I'll give you the sex stuff, but if you want to take notes, get your phone out now because it's a long story and I don't want to repeat myself,\" Hope said, exasperated.\n\nI took out my phone. She was right that it was a long story, and a graphic one, one that daunted me more and more the more details I heard. It made me hope that when it came down to it, all I had to do was ask Daphne O'Connell to consider my proposal and that would be the end of it, but if she was every bit as much of a bitch as everyone claimed she was, this would be unlikely, and what I might have to do afterward to convince her would take some mental preparation.\n\nI could do it. Well, I was pretty sure I could do it.\n\nWhen I was finished with Hope, drifting through the aisles of bookshelves and thinking about everything I had before me if I wanted to get the favor out of Daphne I hoped I had it in me to get, that was when I was most vulnerable to an attack. That was when the small, powerful hands grabbed me and pulled me deeper into the stacks, deeper into the dark, quiet corners of our school library.\n\nWhen words found me, I said, \"Hello, Marie.\"\n\n\"Hello,\" 18-year-old Marie Halpern said. Short and petite and impossibly stern-looking for her age, her blonde hair held up in a bun, horn-rimmed glasses and conservative button-down sweater and short skirt combo made her look like every stereotypical librarian you'd ever seen in fiction. Knowing what Mrs. Sullivan had trained her for, however, I knew that she was every bit more the stereotypical naughty librarian (or in this case, librarian's aide) fantasy, since she was a filthy fucking slut in all the best ways.\n\nShe eyed me up and down, predatory, a smile quivering at the edge of her lips.\n\n\"So, happy to see some new books?\" I asked. She was pressed closely against me, the swell of her tight, B-cup breasts against my chest making me hard, as much at the memories of what we'd done together with Mrs. Sullivan as with what her clear intent was. \n\n\"Happy for a lot of reasons. Happy that this library is getting some respect as it so desperately needs. Happy that respect is coming from you. Happier than anything else that Mrs. Sullivan is happy, because when she's happy, I'm happy. Happy most of all that I've got you to myself...\" Marie trailed off, stepping slightly away from me just enough so she could pull open the buttons of her sweater just enough to reveal her bare and beautiful tits.\n\n\"There's a lot of things that would make me even happier right now, but I think, more than anything else, I'd really like you to fuck my face, cum down my tight little throat, and then eat my fucking pussy. Would you like to make me happy like this?\" Marie asked, dropping down to her knees and blinking up at me cutely.\n\nThe only thing that could've made this more perfect was if Josie was watching, but I had a feeling she wasn't very far off.\n\nUnhesitatingly I pulled out my cock, all ten, thick, rock hard inches of it. Marie cooed appreciatively at the sight, especially when it bounced against her cheek.\n\n\"Sounds fun,\" I said, grabbing Marie by the back of the head.\n\n***\n\nIt wasn't exactly a well-kept secret that the school gym was shockingly easy to sneak into after hours. I'd mostly heard of people using it to grab a quick shower after spending some time in the weight room or on the track, or to get high, or to fool around in. About a month ago I'd met and had sex with a tight-bodied athlete by the name of Noa Kanzaki that remained one of the most energetic fuck's I'd had this whole year right in this gym, so I knew that it was a good place to find some privacy if that was what you were looking for.\n\nWhether or not privacy was something that I actually wanted with Daphne O'Connell was something that I had yet to find out. That the gym was completely empty save for her, and that the people outside of it talked about her as if she were some kind of fairy tale monster didn't bode well for me either.\n\nI crept quietly through the hallway at the edge of the gym, peering around the corner and into the main chamber and getting a good look at 18-year-old Daphne O'Connell.\n\nNow, that she was stunning wasn't up for debate. At 5'10\", she had a toned dancer's body with long, muscular legs, tight abs and arms. Her ass was nice and round and no doubt every bit as firm as her legs and might have been one of her most eye-catching features if it weren't for her big, round D-cup breasts that seemed to defy gravity as she danced an elaborate routine in her own private world.\n\n(Someone had once told me that there must be something in the water at Regan Hills for so many women to have such large breasts, and though I wasn't complaining I was starting to think there might be something to the theory.)\n\nWith the creamy, pale skin that came to many redheads, she had the kind of pretty face that belonged on a model with big blue eyes and thick, very kissable lips and a mane of curly red hair that almost put Tori's to shame.\n\nYes, she was undeniably stunning, but that wasn't why I was hiding in the shadows and waiting for my moment to talk to her, no.\n\nNo, I was hiding out of fear, because Daphne O'Connell was also a grade-A bitch the likes of which most sane people around school knew to steer clear of. Arrogant and quick-witted, she had this attitude of entitlement that she wasn't afraid to share, always ready with an insult or a put down if she didn't think you were worthy enough of talking to her (and few were). Beautiful, wealthy, and highly intelligent with her multiple AP classes, she had a lot going for her if she weren't such a major control freak bitch. For most of my high school career, I'd been lucky enough to be completely off her radar I was so far down the food chain at Regan Hills High, and I was happy to stay that way. I had enough assholes to deal with, and I wasn't looking to have another in my life. \n\nAll of my instincts told me that remaining invisible to Daphne O'Connell was the safest way to go, but I had good deeds to perform, and come hell or high water was I going to fail anyone on my list.\n\nStill, I could give in to fear for just a little bit longer, especially if it gave such a great view of her practicing her routine. Her one-piece, long-sleeved blue and white outfit was made of spandex and left little to the imagination in showing off her body, with only her long legs bare, her ass only barely covered by the uniform's short flyaway skirt. She danced and spun her blue flag with practiced, almost military precision, her moves flirty and fun and showing off her long legs nicely while her smile was so fake and bright it was almost blinding. You could be excused, at a distance, for assuming that she was every bit as charming and pretty as she appeared, but even from here I could feel an instinctive prickling on my skin that sent my fight or flight instincts into a frenzy.\n\nSince she wasn't dancing to any music that I could hear, it was hard to tell when she'd finished with her routine, but the effortless side split she landed in seemed entirely likely.\n\nHer looking directly at me from my hiding spot seemed even more likely.\n\n\"So, you're here to try and check me off your list?\" Daphne asked, her voice every bit threatening and challenging.\n\nSince stealth was now out of the question, I started walking toward her, even if I couldn't stop myself from gulping. \"List?\"\n\n\"Oh, don't you fucking try to play coy with me. A big-dicked nerd working his way through half the girls of the senior class has a way of making waves, and you don't think I'd be on the lookout for when you'd try to make a move on me? She said you were smart,\" Daphne said, smoothly getting back to her feet.\n\n\"That's not how it works,\" I said, on edge by her words.\n\n\"Oh, please. Hope told me you were looking for me,\" she said.\n\n\"To talk,\" I clarified, fully aware that Hope had told me Daphne would be here tonight and suddenly worried that it might have been a trap. Not an intentional trap, because I knew Hope wouldn't do that, but accidental traps had a way of happening too.\n\n\"To talk?\" she laughed, walking away from me toward another short hallway at the back of the gym. Quickly, I followed her.\n\n\"What the fuck do we have to talk about? You're you and I'm me and I don't exactly see what we've got in common worth talking about,\" Daphne said.\n\n\"We got one thing in common,\" I said.\n\n\"Oh yeah? What's that?\" Daphne asked, amused.\n\n\"Hope Harris,\" I said, quickly.\n\nSaying her full name made Daphne pause almost imperceptibly, but she recovered quickly.\n\n\"Okay, so we've one thing...\" Daphne said.\n\n\"One person,\" I clarified.\n\n\"We've got one person we both know, that doesn't mean we've anything actually in common,\" Daphne said.\n\nTaking a gamble based on her pause, I said, \"I think it means more than you think, because I think we both care about her.\"\n\nDaphne scoffed, but her voice wasn't fully in it. \"Hope Harris is... a very flexible and open-minded band bitch I've hooked up with on a couple occasions when I've got no better options... nothing more.\"",
        "\"Don't call her that,\" I said, angry.\n\n\"Why not?\" Daphne asked.\n\nIt was hard holding my anger in check, but it made it easier to deal with Daphne. \"Because that 'band bitch' is one of the sweetest, nicest girls in school and gets little but shit from people like you just because she wears glasses and likes different things. Because for some ungodly reason, has a crush on you, and I think you've got something for her too.\"\n\n\"Good one,\" Daphne said, though again, her heart wasn't fully in it.\n\n\"She told me the sorts of things you'd say when you two were together. How you'd drop this superior bullshit and talk like an actual fucking human being instead of a harsh bitch all the time. How you'd open up to her, and tell her your secrets...\" I said.\n\nDaphne paused at a door in the hallway, flexing her hand on the handle before opening it up. Flipping the light switch inside, she lit up a room just slightly larger than a big walk-in closet. In it were racks of hanging color guard costumes along one wall, barely covering a wall-sized mirror, while flush against the opposite wall were racks of flags, silks and plastic sabers. At the far end of the room was a small table opposite a comfy-looking chair behind a half-closed curtain, presumably a small changing area for the girls of the color guard. This part of the dimly lit equipment room was also its brightest for the single strand of Christmas lights hung along the ceiling that added some festive cheer.\n\n\"Those secrets weren't hers to tell,\" Daphne said.\n\n\"And she didn't tell me everything, nor would I ask her to, but she told me enough so I could hopefully do what I came here to do,\" I said.\n\n\"And what did you come here to do?\" Daphne challenged.\n\nI took a breath in, hoping to keep my words even. \"Ask you, very, very nicely, if you'd consider dating Hope in a more official capacity than just as a casual hookup. If you'd be Hope's girlfriend.\"\n\nDaphne looked at me with such scrutiny I might as well have just burst into flame. I must've been crazy for thinking that this would work, but if I could get Hope the girlfriend of her dreams, well, maybe that'd get me somewhere close to thanking her for everything she'd done getting me on the path of my Christmas plan.\n\nDaphne took longer to laugh at me than I'd expected, but laugh she still did.\n\n\"Wow, seriously? You're fucking serious? Wow,\" Daphne laughed. \"I mean, the answer's obviously no, but-\"\n\n\"Why is that so obvious?\" I asked.\n\n\"Because me being seen dating a band bitch? Besides, if Hope wants this, she should ask me herself, she shouldn't send a... what are you, lackey?\" she asked.\n\n\"Friend,\" I clarified.\n\n\"A friend who's fucked her,\" Daphne snorted, as if it were an insult. More and more the mask was slipping, and more and more I was convinced I was onto something with Daphne O'Connell. This wasn't as easy as I'd dreamed of it going, but I still had a few tricks up my sleeve.\n\n\"And that's a problem? Does it make you jealous?\" I retorted.\n\n\"Jealous? God, no, if you nerds wanna fuck, go ahead, fuck, see if I care,\" Daphne said.\n\nThere was a slight break in her arrogance, something I could work with.\n\nWhile I hadn't set out getting ready to use them, I was ready to bust out the big guns.\n\nI took a couple steps into the room toward her. \"What if I did something for you?\"\n\nDaphne raised an eyebrow. \"What, you want to bribe me to date Hope? That's pretty fucking desperate. And low.\"\n\n\"No, not a bribe,\" I said, taking another step toward her. \"But... consider it a negotiation. I'm offering you something you want but oh so rarely get, and in exchange all I ask of you is to reconsider my request to consider dating Hope, a girl you and I both know you like more than you'd ever admit.\"\n\nShe looked me up and down, considering. \"And what is it you have that I oh so desperately want, because big cocks, while certainly rare, are not hard for someone like me to come by.\"\n\nI stepped even closer to her. If I reached out, I could touch her now, but I wasn't ready for that, not just yet. I knew what I had to say, the words she wanted to hear. I knew everything that Hope told me, but that still didn't make it any easier to say. \n\n\"To be truly and utterly... dominated,\" I said. \"You're in control all the time and that drives you nuts, and you just love the occasional opportunity to submit, to not have to worry about anyone or anything else and just give in to your own pleasures. Hope told me this, and if you want... I can deliver.\"\n\nDaphne raised an eyebrow at me. I hoped that was a good thing.\n\nDuring our discussion, Hope had gone into a lot of detail about how Daphne had introduced her into bondage and how much Daphne herself rather got off on controlling and dominating the people she was with sexually. Hope's own enthusiasm and interests, however, had allowed her to catch up to Daphne's speed and discover her own dominant side, allowing Daphne something she'd never found with anyone she'd been with: equilibrium. This on its own would have been enough to bring Hope to a place few others had gone with Daphne, but in their equilibrium Daphne began to admit things to Hope she'd never admitted to anyone, including a dream of domination. Hope confided in me that she didn't think she'd be able to, much as she wanted to, but she thought I might stand a chance if push came to shove.\n\nI didn't know where Hope got that impression, because I sure as hell didn't feel like I could be dominant if I had to. I didn't mean to control or demean Daphne, take her down a peg or anything like that, but if it meant making Hope (and, tangentially, Daphne) happy, I was willing to give a little power play a try.\n\nDaphne looked me up and down, considering. Her voice slightly huskier, she challenged me, \"You're a nice guy. I can tell. Real nice guys, not these fake nice guys who think complaining about why girls won't touch them is the way to their heart, they got a certain look to them, a look where you can tell who they are and what they will and won't do at a glance. So Hope gave you my silver bullet, bravo, but we both know that you don't have what it takes to dominate me.\"\n\nChallenging me, she spread her arms wide. \"Go ahead. Dominate me. I dare you. I fucking dare you. Show me you got what it takes, bitch, because we both know-\"\n\nI closed the distance between us, pressing her against the supply rack with my body and cutting her off, her words suddenly a yelp, then a soft, surprised moan.\n\n\"You'd be surprised what I'll do for my friends,\" I said, kissing her passionately.\n\nSurprise made Daphne slow to return the kiss at first, but once she realized I was dead serious she returned the kiss with gusto, her tongue dancing with mine in what felt like, from her end at least, a battle for dominance and control. I may not have had her level of experience with this kind of battle, but I like to think I didn't give her an inch (not yet, anyway), matching her kiss for kiss, never letting her tongue take control of the situation.\n\nHer body writhed against mine, her legs spread slightly and searching, her groin grinding against mine. When her clothed pussy met my covered cock, I felt her sigh softly against my lips.\n\nShe broke our kiss, her voice now arrogant yet shaky. \"So you caught me by surprise, and... and they weren't lying about what you're packing. Not one bit. Good for... good for you. You've got a few tricks up your sleeve, I'll give you that, but if you mean to show me a good time, it'll take more than a couple parlor tricks to impress me.\"\n\nI kissed her again, savagely, then grabbed her hands and held them above her head. \"Don't you ever shut up?\"\n\n\"Only if I'm given a good fucking reason to,\" she said.\n\nPinning her hands above her with one hand, I dropped the other under her skirt and between her legs. Roughly I pushed aside the fabric that covered her pussy and touched her steaming slit with my fingers. I was light and gentle, only to test the waters, and found that for her bitching and complaining she was soaking wet and oh so hot.\n\n\"Is this a good fucking reason?\" I growled, pressing two fingers lightly into her folds. I didn't press them in far, didn't want to give her any satisfaction just yet. This was my time for control, and I knew that she'd love it.\n\nDaphne mewled needily, rocking her hips and trying to pull more of my fingers into her wet folds. I didn't let her, keeping them only slightly inside, enough to drive her wild but not enough to take her to where she needed to go.\n\n\"That's an... oh fuck... that's a mean fucking tease is what it is,\" Daphne spat back, her voice a whiny moan.\n\n\"I could do more, if you're nice,\" I hissed, amazed at how easy it was to play this out of character role with someone as hot as Daphne to inspire me.\n\n\"I'm... not... nice...\" Daphne grunted, trying to force more of my fingers into her with little success.\n\n\"Maybe not yet, but I think you will be. If you've heard of me and you know the stories, then you know I'm more than just a nerd with the biggest cock you've ever seen, you know I'm fucking good at what I do. I've brought women to some of the highest peaks of pleasure with my cock, my fingers, my tongue, all because it's what I love to do. I love pleasuring women more than just about anything in the world, and if you need domination to reach those highest peaks, then I guess I'm just gonna have to dominate you. You know I'll make you cum. You know I'll make you cum hard. I'll make you cum so fucking hard you won't even be able to see straight, let alone walk. I'll make you cum so hard, again and again, that you'll wonder why you never considered Hope Harris' love more seriously in the first place. I'll do all of this, and more, to you on one condition,\" I growled, pressing my fingers slightly more into her depths, but only just.\n\n\"Wh... what...?\" Daphne whimpered, her body desperate for pleasure in her gyrations and finding none as I pressed against her.\n\nI only had one word for her. \"Beg.\"\n\n\"I... don't... beg...\" Daphne moaned defiantly.\n\n\"If you don't beg, then you don't cum and I walk right out this door,\" I challenged, pulling my fingers out of her pussy slightly.\n\n\"NO!\" she yelped.\n\n\"Then you know what you have to do,\" I said.\n\nDaphne's deep blue eyes bored into me, trying to defeat me and failing utterly. This was a game I was unused to playing and one I wasn't sure how I'd take to in the future, but there was something about the raw bitchiness and how utterly into it she was that excited me like nothing else. She waited for me to break, and she failed, letting out a deep breath in resignation.\n\n\"Please... touch my pussy,\" she whispered.\n\nI wriggled my fingers in her lightly, making her moan. \"And?\"\n\n\"Make me cum. Dominate me. Take me. Do what you want because even though I'm a control freak most of the time, deep down I'm a filthy little slut who loves to surrender control,\" she said, her words soft and sexy but her mouth curled in a mischievous grin. I'd found my way to get through to Daphne, now to seal the deal.\n\n\"Then hold on,\" I said, pressing her hands into the metal rack above her and curling them so she could get a grip.\n\n\"Why?\" she asked.\n\n\"Because, though they are magnificent, I won't trust your legs for this next part,\" I said, thrusting my fingers deep into her pussy.\n\n\"OH!\" she exclaimed, her legs quaking beneath her. Daphne was strong enough that they didn't give out completely, but that didn't mean I didn't hear the metal supply rack groaning under her weight, especially once my thumb found her clit and began running swift, vicious little circles that made her groan deeply.\n\nWith her hands now thoroughly occupied, I let them go, dropping my now free hand down to her chest. Her breasts were absolutely magnificent through the tight spandex, and they felt magnificent as I squeezed them. I was less gentle with hers than I was with most, but since she only seemed to get more into it the harder I went at her tits, I went at them with everything I had. Her nipples hardened through the thin fabric, hard as bullets and just about as big beneath the palms of my hands. I grabbed the collar of her uniform, meaning to stretch it down over her tits.\n\nI got a little too into it, I'll admit, for I did intend to pull the collar down a bit, but then managed to rip the spandex down clear past her breasts and expose her massive sports-bra-clad D-cups to me.\n\nDaphne gazed at me, her eyes blazing with lust and fury. She groaned, \"You're gonna fucking pay for that.\"\n\n\"That's later,\" I said, fully in the moment while adding \"A New Uniform for Daphne\" to my mental Christmas expenses list. I continued, \"Now, I've got my fingers buried deep in your fucking cunt, so I don't think we're really in a position for negotiation, are we?\"\n\n\"You're such an asshole,\" she groaned as I pulled first one, then both of her magnificent breasts out of her bra. They were every bit as large and luscious as I imagined, with large, flat areolas and thick pink nipples that just begged to be stroked, tweaked and sucked on.\n\n\"An asshole who seems to be doing a pretty fucking good job getting you off,\" I said.\n\n\"That doesn't mean you aren't an- OH!\" she exclaimed as I ducked down, taking one of her nipples into my mouth, nibbling, licking and sucking on it oh so slightly. She tried to complain, tried to come up with a new argument to shift herself to being in control, but I knew that wasn't how this game was meant to be played. That's why I let her know that I was in charge, curling my fingers inside of her until I found her g-spot and leaving her a soaked, whimpering mess.\n\nDaphne shuddered, barely able to keep herself on her feet as she held onto the supply rack for dear life.\n\n\"You're close, aren't you?\" I asked.\n\n\"Y... ye... Yes... yes...\" she whimpered, weakening further as I continued pleasuring her clit and g-spot.\n\n\"It wouldn't take much to push you over the edge now, would it?\" I asked.\n\n\"No... no...\" she whined.\n\n\"Then you know what I want to hear, don't you?\" I asked.\n\n\"Please? Please make me cum? I'll do anything you want... please...?\" Daphne begged.\n\nI smiled. \"Oh, you will do anything I want, and you will cum...\"\n\nI pulled my fingers from her pussy. \"...but not yet!\"\n\nHer eyes blazed at me. She let go of the rack and took a step forward, her face furious.\n\nDaphne raged, \"You bastard!\"\n\nUndeterred, I thrust my pussy juice soaked fingers into her mouth. In shock, she couldn't help but suck on them.\n\n\"You will cum, and it will be amazing because I'm really fucking good at what I do, but it'll be when I say you can, and we're not there yet. No, I'm gonna have a little more fun with you first, but we both know you'll be having most of the fun, won't you?\" I said.\n\nEmphatically, she sucked her juices from my finger, as much a gesture of mock defiance as it was a promise for later. Pulling her mouth free, she said, \"Maybe.\"\n\nI pressed toward her again, sandwiching her body between me and the supply rack as I kissed her firmly. The taste of her pussy was still on her lips, and it was definitely one I meant to savor and enjoy later. My eyes drifted to the side slightly, to a cardboard box full of long, narrow silks. They looked strong, yet soft, and an idea formed.\n\n\"Turn around,\" I demanded, forcibly turning her and pressing her back against the rack, my cock now nestled firmly against her ass. She moaned at my forcefulness, but I barely paid attention as I grabbed a silk from the box. I pulled both of her hands behind her back and tied a loose, yet firm knot, binding her hands behind her. I didn't know if it was the kind of knot that would make Hope proud, but I was happy with it.\n\n\"You know, for someone who's new to dominance, you're not half bad at it,\" Daphne admitted, her voice husky and full of want, yet about as genuine as I'd ever heard her.\n\n\"Thanks,\" I said. \"You're... uh... enjoying?\"\n\n\"Very much,\" she purred.\n\n\"This what you wanted?\" I asked.\n\n\"Definitely,\" she confirmed.\n\n\"Good,\" I said, grabbing a handful of her hair and pulling her neck back just enough so I could look into her eyes and kiss her. \"But maybe, for now, you could go back to being a bitch? I think that was part of what made this so fun.\"\n\n\"I said I'd do anything, didn't I, asshole?\" she taunted. I kissed her once again, grinding my cock harder against her ass.\n\nTesting the knot around her wrists, I said, \"Perfect.\"\n\nForcibly, I led her over to the other end of the room with the table, forcing her hips up against the table and making sure she could see both of us in the wall-length mirror.\n\n\"Since this is pretty well-ruined already...\" I said, grabbing the edges of her uniform and pulling it even wider, tearing it almost down to her skirt. Flushed and on display and driven purely by lust, her hands tied behind her back, she was a picture of lewd perfection in the mirror, so perfect that I had to take a picture of the both of us.\n\nThat would definitely be a fun one for the album.\n\nI put my phone back in my pocket, then took off my shirt. Daphne eyed me in the mirror, not with the same awe I looked at her, but not unappreciatively either. I said, \"You look so fucking tasty, I think I'm going to have to eat your pussy. You'd like that, wouldn't you?\"\n\n\"Anything,\" she groaned. \"Please... just make me cum...\"\n\n\"All in due time,\" I said, bending her over the table and spreading her legs wide. I knelt down behind her, my face inches away from her soaked pussy, still covered by the crotch of her uniform. I pulled the flimsy fabric aside, getting a nice view of her swollen pink lips, not a trace of pubic hair in sight. The scent was intoxicating and rich enough to seemingly fill this small room.\n\n\"I bet you never thought you'd let a nerd get a look at your cunt like this,\" I said, keeping the dirty talk going for her. \"I bet you thought you were too good for a guy like me, but you didn't think, did you? You didn't think a guy like me could give you pleasure like this, did you? You always got the connected and handsome beefcakes and the hottest sluts, all of whom were dumber than rocks and let themselves be taken by you, and none of whom could give you what you truly needed. No one knows what you want like I do... or Hope.\"\n\nI said this to tease her, to torment her, to keep her on the edge of pleasure and always wanting more.\n\nIt did the job.\n\n\"Please... please touch my pussy, lick me, finger me, shove one of my flagpoles in me, anything, just, please, I need to cum so bad...\" she whimpered, grinding against the table obscenely before me.\n\n\"Fine, but only because you begged so nicely,\" I said, leaning in close to her pussy, close enough that she could feel my breath on her lips. \"If you... apologize for being such a bitch.\"\n\nIt was a tease, but the frustrated groan it pulled from her was so sweet that it was fully worth it.\n\n\"I'm sorry...\" she started, her frustrated grumble becoming a high pitched squeal as I buried my tongue into her tight, tasty pussy.\n\n\"I'm sorry, oh fucking god, fuck, I'm sorry I've been such a bitch to everyone!\" Daphne squealed as I ate her out. \"I'm sorry that I'm still going to be a bitch! Oh my god! I'm sorry I treated you and everyone else like shit! Fuck! I'm sorry that I'm not sorry because it means you're eating my pussy so fucking good! Fucking hell! I'm sorry I took Hope for granted! I'm sorry I didn't find you sooner! I'm sorry- FUCKING PLEASE KEEP GOING!! I'M SORRY-\"\n\nWhatever else she meant to apologize for was cut off by a scream of ecstasy as I built her up more and more. Hope had told me a lot of what Daphne liked out of sex, but she never told me that she was a screamer. This much I was happy to find out on my own, even if it meant making her scream so loud she'd scream the walls down.\n\nHelpless and crying out in pleasure, Daphne ground herself against my face as I continued to ravage her pussy with my tongue. I'd eaten a lot of pussies this year and found that each one had its own distinct spots of sensitivity, its own special spots that pleased each woman in her own particular way, but as I went at her I became convinced that Daphne O'Connell's was all sensitivity. No matter what I did, where I touched her, however I touched her steaming slit, it got her going.",
        "She was close again, closer than I think she'd been even when I was fingering her.\n\nWas it cruel, to stop eating her at that moment and stand up? Maybe, but with what I meant to do next I hoped that would make up for any temporary inconvenience.\n\nOf course, in Daphne's position, it more or less seemed like she was responding to being told Christmas was cancelled.\n\n\"Oh you bitch, you fucking bastard, I'm so close, come on, please, fucking bastard, you promised, you said, just make me cum, fuck!\" Daphne whined, looking back at me with furious eyes.\n\n\"Oh, I'll make you cum,\" I said, kicking off my shoes and undoing my belt. \"But I'm doing it on my terms.\"\n\nI think she knew what my terms were before I pulled off my pants and underwear, but revealing all ten inches of my thick, ready cock with the small pool of precum on the tip confirmed it for her.\n\n\"Motherfucker,\" she mused. I almost quipped that I had fucked some mothers, but that was neither here nor there.\n\n\"You ever fucked anything this big before?\" I asked.\n\n\"Not a cock. Not unless you count one of my flagpoles,\" she mused, almost hypnotized with urgency at the sight of my cock. I looked over at the racks of supplies and took another long look at the flags. Having some fun with those later sounded like something to keep in mind.\n\nBut first...\n\nI teased my cockhead at the entrance to her moist, hot pussy lips, pressing oh so slightly but not enough to get inside.\n\n\"You want this?\" I asked.\n\n\"You know the answer,\" she replied.\n\n\"You know what I want to hear,\" I growled.\n\nDaphne sighed, a sound of beautiful, sweet resignation. \"Please... fuck me. Fuck me, Ryan, with your giant fucking nerd cock. I've been good, I've apologized, I'm... I'm begging you, I need to cum so bad. Please, fuck me. Please...\"\n\nWithout another word, I thrust forward and buried half of my cock inside of her slick, tight hole.\n\n\"OH GOD, OH FUCK, FUCKING FUCK GOD YES!\" Daphne roared out, writhing and bucking against the table.\n\nI may not have been in quite the same heaven as her, but it felt pretty damn good thrusting the remaining inches of my cock into her until I was completely buried. Grabbing a handful of her hair, I pulled her head up enough so she could see both of us.\n\n\"Watch this. Watch me fucking you,\" I demanded. Her eyes drifting up to see the two of us fuck, Daphne groaned as I began to thrust into her.\n\nI normally liked to start things off slow, but with Daphne I got the impression that she wasn't looking for a slow start. No, for Daphne I started hard off the bat, pulling most of my cock out and slamming it back home, over and over in quick, brutal thrusts. I could see in the mirror that Daphne's mouth was lolling open in pleasure, her eyes widening with every powerful thrust. Her voice was long past words or even chunks of sounds that could be mistaken for words, a high wail, almost a scream that was getting higher and higher with every moment. Her body was shaking and shuddering, her ass jiggling lusciously with every impact of her bodies. I couldn't resist, I just had to spank her with my free hand.\n\nOnce.\n\nTwice.\n\nThree times, each impact a sharp crack that echoed in the room.\n\nThe third slap is what did it, finally setting Daphne off with a scream so loud it almost hurt my ears. Her body went rigid, then completely lost control, bucking up against the table so hard and violently that I thought she might hurt her bound-behind-her arms, but for now it seemed she was beyond caring. Her pussy squeezed my cock almost painfully hard, and a fucking river of her juices forcefully flowed onto my cock and thighs. Hope hadn't told me that Daphne was a squirter, but as always it was a fine surprise to find.\n\nNormally this would've been the point where I'd have slowed down so she could've come down before I really began fucking her, but something told me that riding this one out was the better strategy. I let Daphne's luscious red curls go and grabbed her by the hips, fucking her as hard as I could without mercy. Her orgasm went on for what felt an incalculable period of time, my only cue that it had stopped being her collapsing limply on the table.\n\nHer eyes half-open looked at me drowsily in the mirror, her lips curled contentedly as I continued fucking her harder and harder. Her voice barely above a whisper, \"So... fucking... good... god... keep... fucking me... gonna... cum again soon... just... cum in me, fill me up... keep fucking me so hard... so good...\"\n\nI was already well on the path to this and didn't need much in the way of encouragement. I kept sliding into her, harder and faster, feeling the orgasm building within me. I barely needed any coaxing from Daphne to keep going, but when she began squeezing me tightly with her pussy muscles again, harder and more consciously, her smile a twisted curl of satisfaction and delight as she urged me to make her, and myself, cum, I couldn't hold back.\n\n\"Fucking... goddamn!\" I grunted, exploding with a powerful orgasm and filling her with shot after shot of thick cum, my orgasm matched by a less powerful, but no less enjoyable to experience one from her.\n\nOut of breath, I collapsed against her for a moment, kissing her exposed upper back.\n\n\"Fucking... amazing...\" Daphne said, also out of breath.\n\n\"I know,\" I said. We stayed like that for a moment, me leaning onto her, both of us breathing and trying to regain our energy. I found mine first, standing up and pulling my softening cock from her pussy. I got a good look at her stretched open lips, a river of our juices running down her leg almost all the way to her ankle. I undid the silk around her wrists, freeing her arms and helping her to her feet.\n\nIn her tattered uniform, sweaty and flushed and with a river of cum down her leg, Daphne O'Connell was an image of defiled perfection, and I was far from done with her.\n\nNor was she done with me, thankfully. Now freed and looking up at me, she flung her arms around me and kissed me passionately. These kisses were no longer the kisses of someone desperately wishing to maintain control, but the uncontrolled kiss of someone completely given over to their own pleasure. It would've been so easy to give into that and just fall into the unrestrained fun of the moment, but I promised Daphne the domination of her dreams and I meant to deliver.\n\nBreaking her kiss, I grabbed onto her shoulders and pushed her downwards. I said, \"On your knees... slut. Suck my cock, worship it, get me hard again and I promise I'll tie you up again.\"\n\nThe name-calling made her moan softly, and though I could see a flash of her bitchy side in her eyes, Daphne clearly had more fun giving into her rarely exercised submissive side. She did as she was told, dropping down to her knees in front of me. Lovingly, needily, almost like her very survival depended on it, Daphne sucked and lick my cock. She didn't go all in at first, no, first gently licking around the head, sucking on it gently, running her tongue down the underside of my shaft, even sucking lightly on my balls before going back to the head. Stretching her beautiful, perfectly plump lips open, she took the entirety of my cockhead in her mouth, sucking tenderly before feeding inch after inch of my once-again hardening cock into her mouth.\n\n\"Oh yeah, that's a good girl, right there, fuck you're good at sucking cock, but you know that, don't you? You're a supreme bitch but you're also a talented slut and you know that, you love that, you love using it to dominate but you need to find the right person to dominate you, get you on your fucking knees and putting that slut mouth of yours to work, isn't that right?\" I hissed.\n\nWith my cock now buried all the way into her throat, Daphne nodded, bobbing her head back and forth eagerly.\n\nThis was still a new position for me to be in, taking charge in quite this way. As fun as it was, it still definitely felt strange. I doubted that I'd gain a great taste for it, but it was nice to know I had the skills in place should I ever need them, should I ever come across someone like Daphne again.\n\nFuck, she was really good at sucking cock. Good enough that I might've forgotten some of my other ideas. I grabbed her by the hair and pulled her off of my cock.\n\n\"Get up, take off your bra, lie down on your back on the table,\" I commanded. Daphne seemed all too eager to comply, getting up and pulling off her sports bra from under the tattered remains of her uniform.\n\nI went back over to the equipment rack and pulled free a few more long blue and white silks. I don't think anyone at school probably imagined our school spirit would be used in this way, but, well, the more I thought about it they probably should've foreseen it with our student body, actually.\n\nDaphne had beautifully displayed herself on the table before me, and I only needed to adjust her position slightly to get her exactly where I wanted her, with her ass just at the edge of the table. It wouldn't take much to lean in and start fucking her again, but some more creative fun could definitely be had first.\n\n\"So, if it wouldn't ruin the mood too much first, do you mind if I ask you something while I tie you up?\" I asked, wrapping one of the silks around a table leg, then around her hand, securing it to the corner.\n\n\"Promise me more orgasms like that and you can ask me anything,\" she purred.\n\nShe probably should've waited until I'd asked her my next question before saying that, but while I tied her other wrist to the next corner of the table, I asked, \"How exactly did you and Hope happen?\"\n\nIf Daphne were capable of crossing her arms under her admittedly awesome tits, I'm sure she would've. I saw a lot going through her head right then, indignation, annoyance, the urge to retreat into her usual habits and shut me out. I saw all of these things, but I saw as well as she did that she was completely exposed to me right then. I'm not sure if that's what made her go with honesty, but when she did it was appreciated.\n\n\"I've been with a lot of guys and girls, but none of them challenged me. None of them could keep up. They all wanted something, to boost their own egos or to be seen with me. I was looking for someone different, someone I could share my interests with and have some fun with, and since I'd heard that the band girls were fucking freaky, I started watching them. Hope seemed nice, down to get wild, even a little cute even. I tried talking to her to see if she would be a good fit... and can you believe she shut me down? She thought I was trying to trap her or prank her or something,\" Daphne said.\n\n\"I can believe it. Totally,\" I said, grabbing her right leg and considering how this would work. \"Does doing the splits hurt you that much?\"\n\n\"Not at all. I'm crazy flexible,\" Daphne said.\n\n\"Good to know,\" I said, stretching her leg out to the side and securing it to a table leg with an extra silk.\n\nAs I prepared to do the same to her other leg, Daphne continued. \"Hope actually made me chase her, which was... well, more fun than I expected, actually. She was stubborn, but I was persistent, and the more she tried to push me away the more I could sense a spark between us, and, well, what happened happened. We had sex. Good sex. Great sex. More than the one time thing I meant. Enough to... look, she got me to let my guard down, okay? I opened up to her, got to talk to her more than I think I've ever talked to anyone and... yeah. If you haven't noticed, that's not exactly an easy thing for me to do.\"\n\n\"No, really?\" I said, laying on the sarcasm thickly as I secured her left leg out with another silk. She was now spread out for me, arms wide and legs holding the splits, her pussy and ass lined up at the edge of the table. The barest shreds of her outfit remained, the sleeves, some of the back, and most of the skirt and the parts of the uniform that covered her crotch. Knowing that this wouldn't do at all, I grabbed the fabric that barely covered her pussy and tore it away, leaving her nice and exposed.\n\n\"Anyone hears I said any of this and you're fucking dead,\" Daphne said, her voice cool and bitchy again.\n\n\"You're not exactly in the position to be making demands right now,\" I said.\n\n\"I'm serious,\" she said. Even though we were still playing the game, right then I knew she was every bit as serious as she said.\n\n\"I won't tell anyone that you've got a soul if you don't want me to, but Hope likes you, and you like Hope. I don't see why the two of you shouldn't give it a try. You're already one of the big, scary bitches around school, so nobody would question for a second who you're dating. Why not give it a try?\" I said.\n\n\"You're a weird fucking wingman, you know that?\" Daphne said.\n\n\"Yeah, I do,\" I replied. \"Am I persuasive?\"\n\nShe considered me for a moment, then said, \"I can't believe I'm fucking saying this, but, yeah.\"\n\n\"Good,\" I said, walking over to one of the racks and pulling free the flag that she'd just been practicing with. It was a large blue and white flag on a five foot long aluminum pole. The aluminum was polished and very smooth, capped with a plastic stopper with the slightest of ridges around it. The pole wasn't thicker than my cock, but still quite thick, and if Daphne was right... well this could be a fair bit of fun, couldn't it?\n\nI walked back over to her, cradling the flagpole in my hands. \"Now, are you ready to return to our regularly scheduled domination?\"\n\nDaphne smiled, licking her lips. \"I don't know, am I?\"\n\nI set the pole down next to the table so I could retrieve my phone from my pants. Once I had it, I took a picture of her in her splayed out glory and said, \"Yes, I'd say you are.\"\n\nI placed my phone next to her and picked up the flagpole, rolling up the flag so it was wrapped around the pole, then ran the end of the handle over Daphne's exposed body. For the sounds the plastic stopper pulled from Daphne, I'd have thought her body was an exquisite musical instrument, every square inch of her eliciting a new note as the pole ran over her. Her stomach was particularly sensitive, and her nipples (which, admittedly, I couldn't help but stop to suck on slightly) were predictably excitable, but when I ran the tip of the pole over her clit, she nearly lost it.\n\n\"This isn't the first time you've fucked this pole, is it?\" I asked, rubbing the plastic tip over her pussy lips. Daphne shook her head.\n\n\"Seems like it could be, dangerous, if you were ever to lose control,\" I said, as much a tease as an honest concern.\n\n\"I've learned to be careful. It helps if you focus,\" she moaned as I rotated the tip slightly, applying almost enough pressure to spread her soaked lips, but not quite enough to go inside.\n\n\"Well, then I'm glad you've had this chance with me,\" I said, pressing the tip into her pussy lips slightly. \"Because I can be safe so you don't have to. I'm going to fuck you with some of this flagpole, and the only thing you have to worry about is the pleasure. I want you to cut loose, to scream your head off, do whatever you want because I'm going to make you cum and I'm going to make you cum hard. You think you can handle that?\"\n\n\"Ohgod, yes,\" she whimpered as I pressed the pole further into her, spreading her lips wide and sliding a few inches into her. For how wet and stretched out she was from our previous fuck, the pole still went in easily, clearly from experience on her end. I still wanted to be safe because I didn't want to hurt her, but I also did want to give her what she wanted and make sure she had fun. I held on close, giving her about eight inches of the pole before I stopped.\n\n\"Get a... fuck... get a picture, please? I've never had one of me... like this... want one... and fuck, you know you'll never get anything like it with another girl,\" Daphne pleaded challengingly.\n\nWho was I to deny a request like this? I grabbed my phone and held it high, taking a couple good pictures of the flagpole buried eight inches deep in her juicy cunt.\n\n\"Oh fuck, oh god, so nice, fuck, fuck, fuck,\" Daphne whispered as I set the phone down.\n\n\"You like that?\" I asked.\n\n\"God yes, please, fuck...\" she muttered pleasurably, her eyes screwed shut.\n\nGrabbing the pole with both hands while keeping one close to her pussy, I slid the pole in and out of her slowly, fucking her with this impromptu toy. This wasn't going to be a tease, this wasn't going to be a denial, I'd never done anything quite like this and I really wanted to set her free with a good, hard fuck. With the hand I was holding the pole for balance right up against her pussy, I worked her clit with my fingers, watching her become a wailing, shrieking mess of pleasure.\n\n\"God, fuck, it's so deep, so hard, fuck, you're fucking me so good, gonna make me cum, gonna make me, fuck, gonna make me fucking cum you fucking nerd, god, fuck, keep fucking, keep FUCKING ME, FUCK, FUCK, FUCK, MOTHERFUCKING FUCK YOU, FUCK YOU, GOOOOOOOOOOD FUUUUUUUUUUUCK!!\" Daphne shrieked as another orgasm hit her, another high powered squirt coating my hands.\n\n\"You're a messy fuck, you know?\" I said, looking at my hands.\n\nStill trembling, especially as I pulled the pole out of her, Daphne whimpered, \"And... what're you going to do about that while you got me tied up like this, so exposed and vulnerable?\"\n\nIf she was trying to goad me into something, she was doing a good job of it. I dropped the pole at the floor and lined up my own pole, thick and throbbing and ready for another round, with her pussy. I thrust inside, burying its entire length with one push this time. Daphne's eyes went wide, her mouth falling open in a very distinct O of pleasure, but when she looked up at me there was such a look of calm satisfaction in her eyes that I couldn't help but swell with pride. I knew there would be a slight feeling of power with having a willing partner tied up allowing me to do whatever I wanted, but I didn't understand that the greatest feeling of power would come from the trust shared between the two of us. Daphne wanted to be dominated and was cool with being dominated by me, but that she put her trust in me to not hurt her and to treat her right, well, that was something to be proud of.\n\nSo, yes, as I plowed into her for the second time, there was a distinct joy in knowing that she was completely at my mercy, that she had surrendered herself to me, but there was something more, something stronger. We shared something strange and intense as I fucked her deeply against that table, something I think both of us needed even if we didn't truly understand it when we began.\n\n\"So deep, so fucking deep, keep fucking me you fuck, goddamn, so nice, fuck, keep, keep...\" she groaned.\n\n\"You think, god, you think this is deep, wait until I fuck your ass,\" I challenged.\n\n\"Never, fuck, never done that before, played with it some, but never, oh god, never a cock,\" Daphne moaned, her words hitching with each thrust.\n\n\"You ever want to?\" I asked.\n\nGroaning, Daphne bit her lip in consideration. \"You want... to fuck... my ass?\"\n\n\"God yes. Your ass is so perfect, if it's something you'd be into, then your ass deserves to be fucked,\" I said.\n\nDaphne groaned deeply, \"Well... fuck, close... there's a first time... fuck... for... ohmygod... EVERYTHING!\"\n\nThe talk broke the dam, making Daphne cum yet again, this time hard enough to make me cum with her. I thrust into her again and again, letting her muscles pull every last drop of cum from my balls as I filled her cunt yet again. I was a grunting, rutting beast taking full advantage of this girl who'd willingly let me tie her up, and fuck it felt good.\n\nI leaned over, kissing her hard.\n\n\"You're fucking amazing,\" I said.\n\n\"I know,\" Daphne said. \"There's not a lot of people out there who can keep up with me, but you're something else.\"\n\n\"Thanks,\" I smirked.\n\nThough it felt agonizing to do so, I pulled out of her yet again. I kissed my way down her body, suckling on each of her nipples as I passed, before standing on shaky legs. One at a time, I undid the restraints holding her wrists, then her ankles. Slowly, Daphne stretched her limbs, rubbing the ache from being splayed out for so long before her hands found her pussy lips. Idly she played with them, mingling our juices together before taking a large dollop on her fingers and bringing it to her lips. She licked it off, savoring our flavor and groaning softly.",
        "Though I still had designs for her, I couldn't deny that standing wasn't exactly easy after two hard, standing fucks. Thankfully, there was that comfy-looking armchair a few steps away from the table. Stopping to retrieve my phone and the tiny bottle of emergency lube I always kept in my pocket, I stumbled over to the chair and collapsed into it. I was out of breath and physically exhausted, and if I wanted to keep doing this, I was going to need a minor miracle.\n\nThat miracle came when Daphne O'Connell stood up before me in all of her defiled glory. Her uniform barely more than a few tattered scraps of spandex attached to a blue and white skirt, her hair a wild mane of ginger curls, her body covered in sweat and both of our juices. She stretched herself out, arching her back to work out some stiffness. Doing this thrust out her large breasts and delectable ass beautifully, the kind of sight that could drive almost any man into a sexual frenzy.\n\nIt made my wilted cock twitch, slightly, against my thigh, but it got the inspiration going again.\n\n\"Take off what's left of that costume and get down on your knees,\" I growled.\n\nTaken by the sudden suggestion, Daphne said in a demure voice, \"Why?\"\n\n\"Because I want you naked, and I want you crawling toward me on your hands and knees. Because I want you to use your mouth and tits to make me hard again. Because once I'm hard again, you're going to sit in my lap, and I am not going to take, no, I am going to conquer your anal cherry with my thick, hard, cock. I'm asking nicely, now, but I can make you if I have to,\" I said in that rough voice that seemed to drive her wild.\n\nIt had its desired effect. Daphne smiled, softly, then removed the final remnants of her outfit in a practiced, oh so slow striptease. When it got to removing what was left of her skirt, she turned around, bending over at the waist so I could get a perfect look of both her pussy and her perfect ass, framing her tightest hole yet.\n\nWell, if all went well, it wouldn't remain that tight for long.\n\nFinally completely naked and absolutely gorgeous in front of me, Daphne got down on her hands and knees and began to crawl toward me. Now, if you've read this far you know I've seen my share of unbelievably sexy sights this year, but watching the former queen bitch Daphne O'Connell, freshly fucked, crawling toward me on hands and knees with her usually superior face now a mask of pure desire, well, that image probably had to crack the top five.\n\nI spread my legs for her, and Daphne eagerly crawled up between them, suckling hungrily on my softened cock. After our last fuck, it would definitely take a little work to get things going again, but with her enthusiasm I doubted it would take very long.\n\nIt was time for the next part of my plan. I grabbed my phone and pulled up my contacts list. Though she looked up at me quizzically, Daphne didn't stop sucking my cock, and I put a gentle hand on the back of her head to encourage her to keep doing it. Finding the name I was looking for in my contacts, I pressed 'CALL' and put the phone to my ear.\n\nIt rang only twice before Hope picked it up.\n\n\"Hi, uh, Ryan... what's going on?\" Hope asked.\n\n\"I catch you at a bad time, Hope?\" I asked. Daphne's eyes went wide at the mention of her name, but I pushed her back down onto my cock.\n\nHope explained, \"No, I was just distracted... uh, Brooke wanted to talk to me about part of your project and-\"\n\n\"Is that Ryan? Hey Ryan! I'm eatin' her pussy now, you should come eat some too, she's tasty!\" Brooke exclaimed over the phone, her voice soon replaced by a far-off wet sound.\n\n\"-and, yeah, that sorta happened,\" Hope said.\n\nI laughed. \"It has a way of happening that way with Brooke.\"\n\n\"So it seems,\" Hope said. I was getting harder, and Daphne took that as her cue to start titty-fucking me. Watching my cock disappear between her large breasts was a delicious sight, one made all the easier when I squirted a little lube into her amazing cleavage and got things really moving. Though she still seemed a little confused by my calling up Hope in the middle of our encounter, Daphne smiled up at me mischievously as I talked to our mutual friend while she pleasured me.\n\n\"So, you're probably wondering why I'm calling,\" I said.\n\n\"It had entered my mind, mmm,\" Hope said, groaning.\n\n\"Well, it's about my Christmas present to you,\" I said.\n\n\"Oh, Ryan, you know you don't have to do anything for me, right? I'm happy to just be helping out, I don't need anything in return,\" Hope said.\n\n\"I know that, and that's part of what makes you an awesome person, but awesome people deserve awesome lives, and I want to give you something that would make you truly happy,\" I said.\n\n\"Well, that's sweet, Ryan, but-\" Hope said, cut off by another groan.\n\nThis was probably the strangest phone call I'd ever taken, but it was one where I meant to say my piece. I grabbed Daphne by the shoulders and made her stand up, then turned her around and spread her legs. I poured some extra lube onto my cock and began to jack it, coating my now hard length and getting it ready. Daphne looked over her shoulder at me with some hesitation at the thought of losing her anal virginity, but when I whispered at her, she obediently grabbed her ass cheeks and spread them apart.\n\n\"But nothing,\" I said. \"I talked to Daphne.\"\n\nHope gasped on the other end of the line. \"You talked to Daphne?\"\n\n\"Yeah. Talked, and, well, you know...\" I trailed off.\n\n\"She's every bit what I said, isn't she?\" Hope said with no small amount of pride, knowing exactly what I meant.\n\n\"All that and more,\" I said, moderately hypnotized by Daphne's spread cheeks. Her ass truly was a wonder to behold. \"We got to talking when we weren't fucking, and, well, some of what we got to talking about was you.\"\n\n\"You... what? No, Brooke, stop, I like what you're doing, but I need to take this,\" Hope said, shushing Brooke urgently. Though I couldn't see the blonde cheerleader's pouty face, I knew she wasn't enjoying being turned down from the chance to eat pussy. Hope continued, \"Why did you talk about me?\"\n\n\"Because I know you like Daphne, and from all I've heard with her, she likes you too. The two of you were made for each other, and someone as good as you deserves to be with someone they like who's made for them. I talked to Daphne and... well... here, I'll let her explain to you while I fuck her ass,\" I said, handing the phone to Daphne. This definitely caught Daphne by surprise (and Hope by the way her voice went up as I handed the phone over), but before she could be too surprised I grabbed her by the hips and slowly lowered her toward my cock. Her tight little hole shuddered beckoningly, an amazing, enticing sight, especially when it puckered once my cockhead came into contact with it.\n\n\"Hi, Hope,\" Daphne said, her voice high and shaky as I applied slow, persistent pleasure, bringing her down onto my cock. Unused to an intrusion like this, her asshole resisted at first, even as much as I whispered and cooed to her encouraging her to relax. Still, I doubted there was a challenge that Daphne couldn't have conquered if she set her mind to it, and with gritted teeth she forced herself down just enough for the head to pop inside.\n\nI didn't know if it was because of how much she worked out or not having ever had anything serious up her ass before, but she was almost impossibly, exquisitely tight. If it weren't for all the lube it would have been agonizing, but even now with its help it was still slow going. Daphne's teeth were gritted, her eyes wavering between shut tight and wide open with surprise. She clearly wanted this to happen, and was determined to make it work. I kept my hands on her hips for guidance, but let her apply the gravity as inch after inch of my cock slowly snaked their way into her ass.\n\n\"I just wanted to say... wow... sorry, no, that's not you, that's the cock in my ass... god... I just wanted to say, I've made a mistake. Haven't been fair to you, or to me. I've been a stuck up bitch, a real cunt, and I'm sorry for that. Not sorry that I've been that way to the people who deserve it, but you don't deserve it. I like you. I really do. And I think it'd be fun if we started dating, you know, officially,\" Daphne groaned, close to half of my cock in her ass.\n\nI could hear Hope's voice on the other end, and there was some hushed talking as they both sorted something out. Her legs braced well, my cock stayed wedged half inside her while she listened to Hope.\n\n\"Uh huh. Okay. But... but it's so fucking big and... I mean, if that's what you... yes, Mistress Hope,\" Daphne said, looking back at me over her shoulder. \"Mistress Hope requests that you grab me and shove the rest of your big, fat cock up my tight, bitchy little ass, then fuck me until you cum inside me. She wants you to make me cum screaming. She wants you to fuck me so hard I won't be right for weeks.\"\n\nPressing a button on the screen, she set the phone down next to the chair. \"Did I say it all right, Mistress Hope?\"\n\n\"Yes,\" Hope said. I could see the exact, devious look on her face now, and I knew that I'd truly made her happy. \"Fuck her, Ryan, stretch her ass nice and wide, make her fucking scream.\"\n\n\"I was going to anyway, but if you insist,\" I said, grabbing Daphne by the hips and pulling her down the last few inches of my cock, hard.\n\nIf I thought her eyes could snap open wide before, I hadn't seen how wide they could go with the rest of my cock slamming home in her asshole all at once.\n\n\"MOTHERFUCKER!\" she screamed.\n\n\"Excellent,\" Hope said. \"You two have fun; just don't wear her out too much, Ryan; she and I still have much to talk about.\"\n\nThe line went dead, but just because Hope wasn't listening didn't mean I wasn't planning on doing what she said. Far from it, actually. Now that we didn't have an audience, I felt I could really cut loose. Reaching under her thighs, I helped lift her up and slam back down, rocking my hips into her, feeding my cock into her ass before pulling out sharply. The angle from which we were fucking meant I couldn't get more than about half the length in or out at a time, but that we could still fuck furiously on this chair was all I cared about.\n\n\"I thought it was fucking big in my pussy,\" she gaped as I fucked her ass. We were angled just enough to see ourselves in the mirror, the way my cock disappeared up her tight, luscious ass, the way her tits bounced so beautifully with every thrust. Now that she was more used to my size, she was taking more and more of it with each bounce, dropping her hands confidently to play with her pussy as I kept fucking her ass.\n\n\"It's big wherever you want it,\" I said.\n\n\"You must be, fuck, goddamn... so fucking proud,\" she grunted, leaning back to kiss me. I brought my hands up to cup her breasts from behind, pinching her nipples harshly and bringing another deep moan from her.\n\n\"You're damn right I am,\" I said, dropping one hand to join hers, fingering her pussy. \"And you love it, don't you?\"\n\n\"So what if I do?\" she groaned, kissing me again. \"I didn't wake up today thinking I was gonna get dominated, fucked better than any guy's fucked me before, a giant cock up my ass, and a girlfriend out of it. All in all, I'm having a great fucking day, and I'm gonna love it if I want to.\"\n\nSince I didn't see any flaws in her logic, I gently squeezed her clit between my thumb and forefinger before grabbing her hips again and fucking her for all I was worth, even if it felt like it might kill me by this point. Daphne was athletic, and I was just beginning to understand such concepts as \"regularly working out\", but I set out tonight to give her what she wanted and I was going to deliver.\n\nThat her pussy was so sensitive and seemed to have a hair trigger certainly didn't hurt, though. Leaning back into me, she once again began to shudder and shake, mewling and cursing softly to herself. I reached up to her breasts, pulling her in close as I whispered in her ears.\n\n\"You're gonna cum for me soon, aren't you, slut?\" I whispered in her ear huskily.\n\nDaphne nodded, kissing me deeply.\n\nI smiled. \"Good.\"\n\nWith the last of the force I could muster, I grabbed her legs and pulled them up to her chest. Though I lost her support in doing this, I had just enough leverage to fuck her hard and fast for a couple minutes more, building my own orgasm with every stroke. Watching this in the mirror opposite this was too much, her long, lithe legs stretched up beside her chest, pressing her massive, bouncing tits together as she fingered herself, it was too much.\n\n\"Goddamn, FUCK, FUCK, FUCK ME YOU FUCKER I'M FUCKING CUMMING, FUCK, FUCK, FUCK, FUUUUUUUUUUCK YEAH!\" she screamed, her fountain of a pussy set off one final explosive time as her ass clamped down on my cock. This was the straw that broke the camel's back for me, and for one final time I came inside of Daphne O'Connell, filling her ass with cum.\n\nOnce I was confident that neither of us would break, I let her legs down, the two of us collapsed in the chair trying desperately to catch our breaths.\n\n\"See, dating Hope does have its benefits, even beyond dating Hope,\" I joked, the best I could manage for how breathless I was.\n\nDaphne laughed, rubbing up against me. \"I can see that.\"\n\n\"If you're trying to get me hard again, you're out of luck, for a while at least,\" I said.\n\nDaphne laughed. \"I don't know if I'll be able to walk for the next week, let alone try for more sex with you right now. Let's test that theory, see what happens...\"\n\nOn wobbly legs, she stood up, my cock plopping out of her stretched-out asshole. The river of cum that fell from it was an undeniably hot sight, one I couldn't help but snap a quick picture of.\n\n\"What do you know, it's a miracle,\" Daphne said, taking a few experimental steps. \"Fuck, I need a shower.\"\n\n\"Me too,\" I admitted, cautiously standing. For how worn out I was, it felt a herculean task, but one I was up for.\n\nDaphne pulled me in for a kiss, a long, lingering one that lacked any of the bitchy back and forth we'd had since I followed her in here.\n\n\"There's every chance that might have been the hottest thing I've ever done, and it helped me get straightened out on Hope. Thank you,\" she said, completely honest.\n\n\"My pleasure. Honestly,\" I said.\n\nWalking to one of the supply racks, she pulled out a towel. \"You still owe me a new fucking uniform, though. I've got backups, but, still.\"\n\n\"Let me know what I owe you,\" I said.\n\nLooking at the ceiling thoughtfully, she said, \"Well, I accept cash, or you and Hope tying me up and DPing me. I'm pretty flexible.\"\n\nThe image of a bound Daphne sandwiched between me and a strap-on wearing Hope was enough to stir something within me, even if I wasn't fully capable of doing anything about it yet.\n\n\"Don't I know it,\" I said.\n\nSauntering to the doorway, naked and dripping with sweat and our combined juices, Daphne turned back to me provocatively, \"You are going to join me for a shower, aren't you?\"\n\nI'm going to go out on a limb and say you all know how I answered that one.\n\n***\n\nIt was tough going and exhausting, but after some heavy effort and panting, we'd done it.\n\nJosie and I had finally set up the Christmas tree in my living room and straightened it out. The screws in the base were a pain in the ass, and it threatened to fall over a couple times, but somehow we managed to get it done right. After pouring in the water and sugar, we collapsed on the floor.\n\n\"You know, your dad could've helped us,\" Josie said.\n\n\"Yeah, but you know him, he likes to hide out and let us have all the adventures,\" I replied, reaching across the floor for her. She reached for me, our fingers just barely touching.\n\n\"At least he left enough money for us to buy pizza, after,\" Josie said, looking up at the tree.\n\n\"I'm good with that,\" I replied, looking up at the tree. \"From down here, this looks like the biggest tree in the world.\"\n\n\"Fuck yeah, it does,\" Josie said. She'd been a wonder at the Christmas tree lot, first finding the best damn tree in our price range and then haggling it down even more after that. It left us with a big, beautiful tree that was really going to look like something once it was decorated.\n\n\"I love Christmas,\" I said.\n\n\"Me too. Sharing presents, having fun, getting presents...\" Josie trailed off.\n\n\"I'm getting you something good,\" I promised. \"And, you know, some other things you can actually unwrap.\"\n\n\"Wow, I get to be checked off your list and stuff to unwrapped? Perks of being your girlfriend,\" Josie said.\n\n\"Damn straight there are,\" I said, pulling my now vibrating phone from my pocket. Pulling open the text I got, I was taken aback by the picture, but smiling once it sunk in.\n\n\"Seems like Hope's enjoying her early present too,\" I said, sliding the phone over to Josie. She picked it up, her eyes going wide at the picture of a naked Daphne O'Connell tied down and stretched out against a bed, one of Hope's massive strap-ons just barely in the picture, angled to perfectly thrust into her cunt.\n\n\"I haven't seen her this happy in a while, and she's usually happy, so, well done,\" Josie said.\n\n\"Thanks,\" I said, pulling the folded piece of paper from my pocket and looking at what I'd accomplished so far this month.\n\nADDISON\n\nBROOKE\n\nHALEY\n\nX - HOPE - X\n\nJADE\n\nJOSIE\n\nKAITLYN\n\nMALLORY\n\nX - MARIE - X\n\nMRS. LYNN\n\nX - MRS. MCNEIL - X\n\nX - MRS. SULLIVAN - X\n\nNADIA\n\nNOA\n\nX - RACHEL - X\n\nROSE\n\nX - SARAH - X\n\nSOPHIE\n\nX - TORI - X\n\nThere were still a lot of names left to take care of before Christmas and fewer days to do it in, a lot of people I meant to do something nice for, but knowing that success was possible and that I had good people here to help me was making it feel truly special.\n\n\"So, you wanna go to your room, go down on each other for a while, maybe fuck my ass for a good long while, then order a pizza, curl up with some cocoa and watch some Christmas specials?\" Josie said.\n\n\"Yes. Yes, I do,\" I said, crawling over to kiss her.\n\nWe may not have been kissing beneath a mistletoe, but that didn't make this any less a magical holiday moment.\n\n***\n\n(Author's Note 2: Writing this story is something I do in my spare time for fun, so if you're enjoying this, please, please, please drop some stars, reviews or shoot me some feedback, as they really keep me going (and please vote on any earlier chapters you enjoyed if you haven't already!). Though I may not always respond, I do love hearing from all of you and seeing that you're enjoying the series. It motivates me to continue writing more. You've all been wonderful and I can't thank you enough for all of your kind words and encouragement and yes, even the criticisms!)"
    ],
    "authorname": "aimingtomisbehave33",
    "tags": [
        "18-year-old",
        "high school",
        "slut",
        "threesome",
        "cheerleader",
        "color guard",
        "bondage",
        "oral",
        "anal",
        "toys"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/senior-year-memories-ch-20"
}
{
    "title": "Come in, Come in, My Roving Friend",
    "pages": [
        "\"Are you with anyone?\"\n\nIvy always texts me a few days before she comes into town, a courtesy. I've always answered the same way, and even broke off relationships in their infant stage to answer honestly. \"No. The key's still under the mat.\"\n\nShe's supposed to arrive early, so I leave my door accessible while I'm at work, a pretty ballsy thing to do in my \"up and coming\" neighborhood. It's beyond frustrating that - even after working the late at the restaurant - I return home with her nowhere to be found yet.\n\nI'm in bed asleep by the time she knocks on my door. She must have caught the red eye.\n\nAfter thinking I probably wouldn't see her until the next day, I leap out of bed, run through my little apartment, and fling the door open eagerly to hug her sparse frame to me more tightly than she expected. \n\nThe wind whooshes out of her. I release her sheepishly, my own wayfaring stranger.\n\n\"Ph\u01b0\u1ee3ng, finally,\" she greets me after she catches her breath. I love how she says my name. She bothers to pronounce \"Ph\u01b0\u1ee3ng\" with the correct Vietnamese intonation, so my name sounds different than every other part of her speech. \"Horrible trip. Horrible long trip. All the way from Innsbruck. And all I could think of the whole time was getting here to you.\"\n\n\"You're here now,\" I usher her into our little oasis and shut the door behind her on the rest of the world.\n\nShe looks politely at her watch. \"It's awfully late and I have about 19 hours of travel on me. It's cool if you want to go back to sleep and hang out in the morning instead, once I've showered and all.\" Another courtesy. I'm meeting her at my door wearing only a sleep tee. My intentions are clear.\n\nNot dignifying the suggestion of abstaining even for a few hours, I lose the tee shirt and wrap my wrists behind her neck to kiss her quickly. From the incredibly minty fresh taste of her mouth, she definitely didn't expect me to choose to wait.\n\nShe tosses her old canvas messenger bag, dull hiking backpack, and beat-up rolling duffle bag in the corner by the couch and kicks off her old sockless sneakers. She's a well-paid business consultant and so I could never quite reconcile the disparity between her stained hoodie and cargo pants worn for travel and her sleek suits that she'd wear for work on the following days.\n\nI finally asked her about her broke stoner style during one of her latest visits. She laughed, \"You'd want to be comfortable too if you took a hundred flights a year. Besides, with some of the places I have to go, it's better not to look worth robbing.\" Other than the $250 bluetooth earbuds poking out from behind her loosely-gathered thick blonde hair, she could pass for a PhD candidate traveling for research. Or a work shy couch-surfer. \n\nTomorrow she'll wear some elegant outfit and her pretty hair will be in its sharp power bun. Oddly, she still seems like the same person to me, but I can see how she projects the aggression and confidence necessary for success in the cutthroat profession she chose.\n\nBut, for the night, she doesn't need to be a shark. We can just be old friends who enjoy one another's company without strings.\n\nShe was almost too gallant for us to get together at first...\n\nWe'd met two years earlier, conventionally enough at a bar. She was honestly looking to get a drink in a comfortable setting. I was admittedly on the prowl.\n\n\"Hi. You seem to be all alone?\" I sidled up to her, ready to take down new prey. To be clear, not a looking for a simple one night stand by preference, but a pretty new girlfriend. \n\n\"Do I? That's right. You can't see all my imaginary friends, can you?\" Ivy answered with a straight face.\n\n\"Uh, no I can't.\" Crazy or witty, I didn't care. She was hot enough to offset nearly any drawbacks in her personality. \"Are they as sexy as you are?\"\n\n\"You'll never know, will you?\" she laughed and I was hooked.\n\n\"Well, what brought you all out to the bar tonight?\" She was a touch out of place, much too expensively dressed in her tailored slim pantsuit for a Seattle gay club, especially on a Monday night.\n\n\"Just a few drinks, some atmosphere, maybe some people watching,\" she answered, friendly but not encouraging.\n\n\"I'm a person.\" I didn't want to throw a line, but I felt I only had a few more exchanges to move our conversation in a flirty direction. She finished her glass of brown liquor, but didn't set it down on the bar. \"Anything in particular you'd like to watch me do?\"\n\n\"I'm afraid you'd be watching my plane take off tomorrow morning, whatever I watched you do tonight and however much I'd most certainly enjoy the show,\" she declined me as chivalrously as possible, swirling the non-existent liquid in her empty glass. I'd never felt so complimented in rejection previously.\n\nI was so flattered that I got pretty forward, \"Maybe I don't care about tomorrow?\"\n\n\"Don't you?\" She turned from her dry glass to look at me, both immediate desire and deeper longing in her sea-grey eyes.\n\n\"If tonight is all you have to offer, I'll take tonight.\" I'm still not sure if gallantry or opportunism moved me, but I wanted whatever time she had to give, no matter how short.\n\nIvy smiled broadly, something I got a sense that she didn't do too often. \"Then we should go soon, because I have to be back at the Grand Hyatt and packed in time for the 6:30 shuttle to SeaTac for my 8:45 to Hong Kong.\" She laid two twenties on the bar and set her empty glass on top of them.\n\nI took a beat. That single sentence dumped too much information on me and raised a ton of questions. What job did she have that put her up in the Grand Hyatt? And sent her to Hong Kong on a Tuesday morning? \n\nMy face must have given away my curiosity, because she followed up. \"I'm a SHRM-SCP/FSA for an HR consulting firm specializing in reallocation of human capital. It's dull and depressing work, but the pay is good and constant and the travel is global and constant.\" About half of that made sense to me. \"Still and all, I was more trying communicate that the 'tonight' that I have to offer you is really more like 6 or 7 hours...\"\n\nI checked my watch. It was 10:30. That bit about the 6:30 shuttle registered through the mess of other details.\n\nHer long lean hand slipped into mine and I led her out of the bar and down the busy street to my crummy street level apartment. (Between Pine and Pike, a few blocks east of the 5, if you're curious.) \n\nI'd been hoping to meet someone, so I'd cleaned up my place extra neat and tidy and it was definitely presentable. But I pondered whether her outfit cost more than my rent and if she'd feel safe in the much much more sketchy locale than the Grand Hyatt.\n\n\"I know it's not-\" I started to apologize. She released my hand, traced her fingertips up and down the back of my close shaved neck so that I trembled, and kissed me sweetly on the lips.\n\n\"You don't have to explain your real estate choices to me. You don't have to understand my line of work. You don't even have to have a bed. Any reasonably private space and I'm in.\" Her hand stopped moving on my neck, but she kept walking me forward. \"I'll fuck you right there on the carpet, if you like.\"\n\n\"I have a bed,\" I answered peevishly. I couldn't deny liking her touch though. And if she insisted on sex on my living room floor, that wouldn't be a dealbreaker.\n\n\"Good. I do hate rug burns.\" She kissed me again and bit my lip lightly. Her tongue, lips, and teeth were wonderful. \"Show me to your bed?\" \n\nI obeyed immediately, taking her hand again and bringing her through my kitchen/laundry room/dining room/living room combination and into my bedroom, which is thankfully pretty large. My queen size bed fits nicely and I have a walk-in closet.\n\nIvy took my shirt off over my head as I turned to face her and she pressed her lips to the newly exposed flesh she found, even as she unclasped my bra and removed the cloth barrier to her questing hands.\n\nI attempted to return the favor, but couldn't get her suit jacket off without her assistance. She halted my pawing efforts by bending to take my left nipple in her warm mouth while she pulled off her jacket and unbuttoned and slipped her white dress shirt off herself. I managed to unclasp her bra and she shrugged out of that too.\n\nHer breasts are a gorgeous handful, but I didn't get to know them very well in the moment. Ivy pushed me back on my waiting bed and stripped me of my sneakers, jeans, and panties. Her head dipped directly into my freshly naked womanhood.\n\nThe sight of her blew my mind, this worldly and successful woman I'd just met kneeling to eat me out - nude from the waist up - on my cheap carpet in expensive charcoal slacks and black pumps. It was a weird sight. Weird, but provocative.\n\nThe thought ran away from the forefront of my brain as her tongue slid inside me. I usually prefer more foreplay, but the breakneck pace felt right in the moment.\n\nShe backed out and pressed in repeatedly, moving her tongue with a speed and fervor that suggested her taste for pussy had been denied for too long and her hunger drove her.\n\nNot that I objected. Ivy mayn't have \"eaten out\" for some time, but she knew what she was about and the line between sex and foreplay became unimportant to the point of invisibility as she tonguefucked my willing snatch and her hands stroked every square inch of skin they could reach.\n\nHer tongue traveled north through my bush to lick the smooth skin she found. Meanwhile, a finger nudged the entrance to my channel, only a single knuckle within me. Her intent eyes peered up at me in silent question.\n\nI nodded, definitively positively.\n\nTwo fingers slowly pushed into my body. Her other hand massaged the back of my thigh. Her tongue traveled south again, dancing among my folds.\n\nHer two fingers pumped faster.\n\nMy hands dug into my sheets and I groaned out my support for her efforts. Doubting my own luck, I avoided any actual speech that might conceivably spook the beautiful blonde steadily sailing me over the horizon.\n\nThat horizon neared quickly. My back arched steeply. My toes curled and uncurled. My eyes rolled back and a rogue wave capsized me, dragging me down into inescapable and inexpressible pleasure in the wake of my release.\n\nI passed out like a sexual neophyte, laying helpless as a turtle on my back. Ivy kicked off her pumps and climbed onto the bed with me, caressing my face and arm and kissing my chest and shoulders.\n\nFinally getting my breath back, I addressed the highest priority in my mind, \"We need to get your pants off.\"\n\nThrough my sporadically opening eyes, I saw her dazzling smile. \"Can you even lift your head?\" she asked doubtfully.\n\n\"That,\" I took a breath and wetted my lips, \"is wholly immaterial.\"\n\nHer fingernails grazed my scalp as she stroked my hair. \"Okay. If I finish undressing, can I hold you for a while?\"\n\n\"Yes!\" I breathed emphatically, loving her fingers in my short black hair.\n\nHer smooth bare long legs soon rested against mine, partially because she kept her word and removed her slacks and, presumably, a pair of underwear. Partially because she rolled me bodily onto my side and spooned in behind me. Her arm wrapped around my abs. Her fingertips idly traced over my hip.\n\n\"What's your name?\" she asked. The way she held me and breathed me in, the way she spoke softly to me, I wondered if she didn't miss intimacy as much as she missed sex in her lonely life.\n\n\"Ph\u01b0\u1ee3ng. My parents emigrated from Vietnam,\" I explained reflexively, a lifelong habit. \n\nThey'd actually immigrated to Canada. I'd attended San Diego Culinary Institute (SDCI) in my late teens and stayed on in the U.S. by myself. But that was a longer conversation that we'd have on another of her visits.\n\n\"Ph\u01b0\u1ee3ng,\" she luxuriated in the pronunciation of my name, \"I'm Ivy.\"\n\n\"Well, Ivy,\" I started feeling more gutsy, \"You have exceptional oral skills.\"\n\n\"You got me hungry, Ph\u01b0\u1ee3ng,\" I could hear the smile in her voice, \"What are all these?\" She kissed one of my many tattoos, the word \"Archimagira\" under a skull with a santoku knife and a ceramic hone as crossbones.\n\n\"No one takes a chef seriously unless she has a few tattoos and scars. At best, the assumption would be that I can't do more than prepare the five frenchies.\"\n\n\"Five frenchies?\"\n\n\"French mother sauces.\"\n\n\"Ah.\"\n\n\"What ink do you have? A calculator on your bicep?\"\n\n\"I have no tattoos.\"\n\n\"Lemme just confirm that for myself,\" I playfully suggested and sluggishly rolled to face her. My energy level had revived somewhat, but not enough to make good on the proposal.\n\n\"Uh huh. Big talk from a woman who took the better part of a minute to turn over.\"\n\n\"I was savoring the feeling of my body rubbing against yours,\" I sweet-talked her as I met her heated gaze.\n\n\"Charmer.\" Her sea-grey eyes closed as she kissed me. \n\nHer sure tongue - still tasting of me - confidently greeted mine and slipped easily into my eager mouth. Her uncallused hand stroked my lower back elicitingly. Her lips were surprisingly agile, pressing firmly into mine. \n\nUnusually passive in my lassitude, I Iet her be the aggressor, blissfully receiving the affection and sensuousness she bestowed. \n\nAfter basking in her ardor for a while, my own passion rose and my energy finally met the level of my interest. I bit her bottom lip and she grinned.\n\n\"Feeling it again, huh?\" she broke off the makeout session to giggle.\n\n\"Yes,\" I flashed a rakish grin too, \"Now on to your ink inspection, Miss Ivy.\" \n\nI started just under her chin and showered devotion all over her body. Licking my rapid tongue over her ribs. Popping a peach pedicured big toe in my mouth and sucking. Kissing the tender inside of her forearm. Running my tongue the length of her slender neck.\n\nIvy simply accepted my attentions, moaning and mewling as physically inclined by my actions and quietly murmuring her general approval.\n\nI nuzzled into her pretty blonde hair. Her shampoo smelled of fresh eucalyptus. I whispered near the ear I'd nibbled earlier, \"I'd like to go down on you?\"\n\n\"Please?\" she entreated. \"I'm so wet.\"\n\nAs opposed to her subitaneous lovemaking, I took a leisurely approach. My tongue left trails of saliva over her lower abdomen, hips, mound, and thighs. Hands palmed her cheeks. Sharp teeth nipped silky pale skin. \n\nMy hot lips found their way to her hot lips. I nibbled and tugged her labia, licking inside and out of her open and plumped petals and producing pressure with a small fraction of my bite force.\n\nMy shoulders pushed her shins back so that her heels damned near pressed against her ass. She still managed to wiggle and rock, her lust moving her. I played my sprightly tongue along her seeping slit. She broke her resolve when I penetrated her as my nose brushed her clit.\n\n\"Please, Ph\u01b0\u1ee3ng?\" she outright begged, \"Please stop teasing?\"\n\nI like receiving oral, but I love giving much more. Second only to the culinary arts are the cunnilingus arts, and I am a consummate cunnilinguist. \n\nBut she begged so sweetly that I stopped my dawdling and hurried myself to her pleasure.\n\nHer taste - silken ambrosia - coated my tongue. I slid my - as previously mentioned - wetted tongue into the source of her wetness, deep. Once, twice, thrice.\n\nIvy keened, libidinous and distressed at once.\n\nI licked higher, abandoning her dribbling channel for her vellicating clitoris. Around and around in circles, fishtailing, flicking, tapping. I even varied my breathing pattern to push and pull air over the thousands of densely concentrated nerve endings. Clits are so fun to play with.\n\n\"Ph\u01b0\u1ee3ng! Ph\u01b0\u1ee3ng?!\" She needed me to stop playing.\n\nI grew serious and lashed the twitching little bundle mercilessly. She squealed, she screeched, and she screamed as she came thunderously.\n\nWith no hesitation, I went back to lapping up all the new dew I found from her toned inner thighs to all the way up inside her. My hands laid idly on her flat stomach. \n\nI let her unbend her knees though and her whole rangy body collapsed, as though she hadn't gotten relief like that for her pent up desire for a good while.\n\nIvy moved a little to put her still trembling hand on mine. The gesture was so sweet and so human that it drew my bright brown eyes up to her lovely face with its fine features. Her lidded eyes called to me beseeching, her velvet lips parted soundlessly, and her smooth skin glistened exquisitely.\n\nWith great reluctance, I gave into sentiment and quit her tasty pussy to be with her more comfortingly. I crawled up that hot body and laid atop her gingerly. Dotingly, I snuggled in under her diamond jawline. My hands slid between her shoulder blades and my soft sheets.\n\nIvy inhaled deeply and sighed happily. Utilizing a reserve strength of will, she managed to raise both her arms simultaneously and flop them onto my naked back.\n\nEventually, one of those arms raised again and she began gently stroking my smooth hair. \"Hey.\"\n\n\"Hey,\" I answered.\n\n\"Thank you,\" she said graciously.\n\nNormally I'd fire off a snarky retort to a silly comment like that, but she spoke with such sincerity. \"You're welcome.\"\n\nShe murmured something into my black hair. Her free hand fondled my ass. I hugged her more tightly and we both laid peacefully in my warmed bed.\n\n\"May I please have your number?\" she asked into the crown of my head, breaking the silence, \"I'd like to text you when I come back to town.\"\n\n\"You have a girl in every port, huh?\" I challenged as I cocked my head up to see her sylphlike face, \"Am I joining your many fans?\"\n\n\"No,\" Ivy answered softly with color rising to her cheeks, \"I haven't been with anyone for quite some time.\"\n\n\"How soon can you be back in Seattle?\" Her forlornness endeared me and I rubbed my face into her warm chest, feeling a bit of regret for forcing her embarrassing admission.\n\n\"In about six weeks,\" she consulted her phone, \"I'll be here for four days, but the last two are on a weekend and I'll just be waiting for my next flight. Do you work for a family restaurant?\"\n\n\"No. My mom runs a nail salon and my dad runs a laundry mat, so the only option for me to strike out on own was food service,\" I shot back sarcastically.\n\n\"Oh, oh, no,\" she abjured cutely, \"I only meant that you might be able to get those two days off if you worked for a family restaurant where the management cared about your happiness. I'd like to spend as much time as I have to spend with you.\"\n\n\"I get Sundays off already,\" I smiled. \"It's not technically a family restaurant, but my head chef and I are close. I'll ask about the Saturday.\"\n\n\"Your restaurant is closed on Sundays?\" Her long lean fingers trailed through my soft black hair.\n\n\"No. The chef/owner comes in with her own team on Sundays,\" I waved off the subject, but thoroughly enjoyed the petting, \"It's a whole thing.\"\n\n\"I don't have to leave for about 40 minutes. Why don't you tell me about it while I give you a massage?\"\n\n\"Deal.\" You thought I'd turn down an unreciprocated massage out of principle? She's the chivalrous one, not me. \"But, first...\" I took her phone and punched in my number, with my first name \"Ph\u01b0\u1ee3ng\" and the last name \"HotSeattleChef\" into her address book. Then I snapped a picture of the two of us - shoulders up - for the contact photo.\n\nShe kissed me impetuously, stood, and nudged me to roll onto my stomach. Strong hands rubbed my neck, my shoulders, the backs of my arms, hands, feet, ankles, calves, and thighs, and my back, lower back, and ass. \n\nHer powerful hands actually relieved a surprising amount of strain from my kitchen-tensed muscles, as much as I would expect from a real massage therapist. A few stray kisses landed on my hot skin, but the massage stayed wholly professional otherwise. She even managed the personal restraint to ignore my blatantly spread legs.\n\nIvy certainly noticed the nonverbal request my opened legs represented though and whispered, \"My Uber is on the way and I want neither to get you off that fast nor to leave you hanging. If you'll flip over though, I think I have time to work your quads and adductors.\"",
        "I dutifully flipped for her, \"Where'd you learn to massage like this?\" Her talented physical manipulation far exceeded the cheap foreplay massages I'd come to expect. My body felt remarkable.\n\n\"I took a sports medicine elective in college that included athletic massage techniques,\" she explained.\n\n\"Aaungh,\" I groaned as my thigh muscles unclenched. \"Good call.\"\n\n\"Just wait until-\" An alert from the Uber app on her personal phone interrupted whatever she might have said, \"Sorry, Ph\u01b0\u1ee3ng. That's my ride.\"\n\n\"I could take you?\" I offered as a social nicety while she located her discarded clothes and rapidly redressed.\n\n\"That's okay,\" she declined as she buttoned her shirt, \"There's no need to trouble yourself when I have a car waiting.\"\n\n\"It's no trouble,\" I lied politely as I unhappily watched her put clothes back on her lithe and lovely body.\n\nHer suit jacket over her arm, she leaned down and kissed the corner of my lips sweetly. \"You should get some sleep.\" Then Ivy kissed me once more, much less sweetly. \"Also, I like the idea of remembering you all naked and sprawled out.\"\n\nI winked and posed. She smiled, snapped a photo, and waved as she left.\n\nAnd so she departed. And I lazed in bed most of the day, going into work later with a spring in my step, but no ambivalence. \n\nMy life pretty well marched on as it had. By the weekend, I started a five week fling with a cute redhead. It was just another in a long line of doomed short-term relationships though. \n\nMaintaining a long-term relationship with a quality woman is prohibitively challenging for me. Although my head chef puts in a lot more hours at the restaurant than I do as her sous chef, I still work 50 hour weeks at the very least. Women I date tend not to appreciate my never having a free Friday or Saturday night, my getting home very late in the wee hours, or my smelling of long shifts spent in a hot kitchen when I finally did get to bed. I'm a hard package to sell to the type of woman who meets my hypocritically inflexible standards.\n\nMy charm, wit, and looks get me girls without much initial effort, but my demanding career loses them for me just as easily. Apparently, waking a woman from her slumber for a late night/early morning quickie without conversation isn't enough daily effort to put into a relationship. \n\nSure, I could try harder. But the endless sweaty 10+ hour days also leave me without the requisite pep to romantically make up for my constant absence to new girlfriends. \n\nEven the one advantage you'd think there'd be to dating a chef, high quality meals at home, isn't something I offer a potential partner. I love my job, but I like to have the day off from cooking on the few days I have off from cooking and only prepare meals for lovers on rare special occasions.\n\nIvy doesn't demand anything of me though; not cooking for her, or taking her out to restaurants or shows, or meeting with family or friends, or helping her with DIY projects or errands, or some vague promise from me that I'd have more time to give her at some future point. We accept each others' professional commitments and enjoy each other without romantic commitment.\n\nShe's been such an understanding, obliging, and exemplary lover that I rarely feel compelled to even look for a proper girlfriend, one who would only suffer by unfair comparison to Ivy anyway. Still and yet, what I feel for my roving friend now isn't a sophomorically infatuated love in the classical Tristan and Isolde sense, but it's more than friendship and more than most women would or could compete with.\n\nMy level of emotional attachment to Ivy increased so slowly that even I didn't perceive it happening, like the gradually rising heat under the proverbial boiling frog. \n\nOver the two years following our first night stand, she visited Seattle 16 times, the shortest for just an 11 hour layover. (That one I found particularly complimentary, since SeaTac is rarely a layover to anywhere.) \n\nFollowing her first few visits, I'd be understandably bummed out each time such a wonderful lover left, but not experience seriously debilitating emotions. The empty feeling of her leaving has become much more pervasive as time marches on however, and now my feels feel it pretty bad.\n\nHer longest stay was the best and the worst yet, a little over four months ago. After six straight sensual nights, I was more than just bummed at her going away again. Instead, I fought a real sense of loss and an oncoming accompanying depression. I held it together long enough to kiss her goodbye and wish her safe travels, but it was a struggle.\n\nWhen she left, I slumped down the inside of my front door and cried like a bitch.\n\nThe absolute worst part was that I wasn't even torn about what to do. Maybe I'd have given up my friends, job, and city to be with her? I couldn't truly be sure. But it was a moot consideration. \n\nShe literally has no home base for me to move to. Her job is so transient that she maintains a virtual address - and thus temporary storage - in Vegas, but no real residence. No city I could adopt to be with her.\n\nI can't conceive of breaking off what we have though. The pain of her leaving over and over is more than offset by the joy of her coming back and the anticipatory knowledge that she definitely will be coming back. So I say nothing and try to appreciate the time she does have to offer me.\n\nMeanwhile, Ivy is here now. In my home. With me. I'll be damned if I'll start feeling sad for her leaving when she's only just arrived.\n\n\"How long do I have you?\" I keep my voice as neutral as I can, willfully reducing my tone from preoccupied to hopeful.\n\n\"Can't be sure. There are... mitigating factors of which I'm not yet certain. At least three days though, if you want me?\" Variable length wasn't terribly unusual for her consultation jobs, which I gather can change depending on the situation as she finds it.\n\n\"I want you,\" I confirm, pulling her hoodie and tee shirt off over her head. Her hands rest on my shoulders complacently as I unbutton and unzip her cargo pants and tug them down her long legs so she could step out of them.\n\nFar from our first time, she knows I'll want to get right into her business right off the bat. Always accommodating, Ivy walks me back towards my boring brown couch by pulling me along by my hips, struggling a little as I'd resumed my kissing her with my arms around her neck.\n\nShe contentedly lets me tongue wrestle with her as we stand with our naked fronts pressed together. No longer pulling my hips, she caresses my lower back as I aggressively invade her mouth. \n\nBut then I realize that we'd stopped moving and put two and two together that we'd become stationary because we'd come abreast of the couch. For a moment, I'm irrationally irritated that she's distracted me from my purpose by allowing me to kiss her. (I admit that it's irrational.)\n\nBut I'm not rational when it comes to her and I haven't tasted her in weeks, so I push her backward to break off our liplock and get her on her back on my couch.\n\nI take her left ankle in both my hands and set it firmly on the floor. The other ankle I placed on the top of the cushioned high backrest of my comfy couch, spreading her open as widely as feasible for my impending feast. Given her very long legs, it's wide indeed.\n\nMy hands held her pretty long legs apart, one on the front and one on the back of her spread thighs. I pressed my face right into her, licking and slurping, making her wriggle and squeal in naked pleasure. \n\nMy first two fingers slip into her hot wetness, her slick labia spread widely like her legs. My soaked digits pump her impatient pussy and awaken her sensitive g-spot. Her velvet tunnel clutches at them as I pull them free to tickle her cit instead.\n\nMy tongue becomes jealous of my fingers and my chin literally nudges them out of the way. Slickened as they are, I easily work the two fingers into her cute butt to the second knuckle.\n\nMeanwhile, my mouth closes over her hooded clit as I hum hot breath, the reverberatory effects of which cause her to scream aloud and dig her nails into my scalp. I yelp in turn and she instantly lets go.\n\n\"Sorry,\" she mumbles sheepishly through gritted teeth.\n\n\"Think nothing of it,\" I answer cockily. The slight pain of the little half-moon stab marks in my skin aside, making her lose control turns me on more than anything else in the world. I get a surge of confidence as my racing brain floods with dopamine.\n\n\"Please, don't stop?\" she begs adorably, \"I need to cum.\"\n\n\"Wouldn't dream of it, Miss Ivy.\" The urgency in her voice spurs me onward and my fingers wiggle in her ass as my tongue traces circles around her clit. I turn my head to get my active mouth back to her pretty pussy so I can tonguefuck her again. My free arm I wrap around her thigh so that I can thumb her kindled clit.\n\nAnd so I bring her to the home stretch. Tonguefuck, tonguefuck, tonguefuck. Clit brush, clit brush. Ass wiggle. Tonguefuck, tonguefuck, tonguefuck. Clit brush, clit brush. Ass wiggle, ass wiggle, oooh, it's a finger wiggle. \n\nI keep the rhythms and intensities on her electrified genitals and twitching ass. Her moaned words are increasingly less coherent and her body heat builds so that sweat freely drips from her straining limbs.\n\nAccompanied by a long groan her orgasm hits her. Ivy's whole tensed frame snaps like frayed elastic and sinks into my couch limply. \n\nI let her leg down from the back of the couch and lift her other leg off the floor to be laid beside it. She shifts her shoulders around and lets her head loll back on the arm of the couch, knowing that I'll want to spend some time lapping at her post-orgasm sex.\n\nI do. I lick up her moisture like a kitten devouring a shallow bowl of cream.\n\n\"Hey,\" she eventually interrupts me verbally, \"I think you're done down there?\"\n\nI shoot her a dirty look and keep right on lapping.\n\nShe rolls her eyes and let's me follow my bliss for a while longer before warning me, \"I'm going to fall asleep soon. Horrible long trip. Maybe I could do that in your bed and not hanging off your couch?\"\n\nBegrudgingly, I abandon my pot o' gold and help her to her feet. With my arm around her waist, she stumbles into my bedroom with me and I let her fall back into my bed, tucking her long limbs beneath my covers.\n\n\"I'm gonna nap a little now,\" she whispers, \"Thank you, Ph\u01b0\u1ee3ng.\"\n\n\"Happy to oblige,\" I acknowledge as my arms go around her waist again to snuggle with her while she rests peacefully. We'll have time to talk and get in a round for me a little later. I've come to look forward to the talking - not as much as the sex - but more than talking with anyone else. She makes me comfortable in sharing about myself and draws me out with comparative ease.\n\nOn her third visit, between what should have been our last round in bed and her leaving, she asked why I picked Seattle. \"Surely Vancouver has nearly the same culinary opportunities and Davie Village has nearly the same scene? I understand getting a student visa to attend such a prestigious culinary school as SDCI, but why stay in the U.S.?\"\n\n\"Kinda an involved story. Getting into SDCI as a high school senior was a godsend. With my big sister in University of Alberta's engineering program, my big brother at Mcgill University studying medicine, and my little brother nipping at my heels with AP everything, my terrible grades and prospects had my parents beyond exasperated. Except as a kitchen assistant at The Westin Edmonton's restaurant, I showed no talent,\" I added impishly, \"Well, not for anything I could legally accept pay for.\"\n\nIvy'd become used to my insulating habit of humorously referencing my sexual adroitness whenever I'd allowed myself to become too vulnerable. She glossed over the comment and asked about my employer instead. \"The Westin by the art gallery?\" I often forget that she'd been everywhere. \n\nShe caressed my side and hip as I kept talking. \"Yeah. I worked hard and lucked into a culinary scholarship honorable at SDCI. My parents still had to pay for my room and board, but it's only an eight month program and they were relieved that I got into a reputable school somewhere and wouldn't necessarily be an embarrassment to the family. I liked that it was almost all hands on learning.\"\n\nThe look on her face of mixed pride and affection at my modest boasting encouraged me to tell her more.\n\n\"School rolled by quick and I had to find an externship. I applied to restaurants all over the West Coast. Most sent a generic form letter, but my head chef sent an offer letter with a company profile and chef bios, over a dozen trailing opportunities, starting pay and benefits, a promise of employment if I fit in, and a promise to help me find work if I didn't.\"\n\n\"That's a pretty good offer for a teenager,\" Ivy put her HR hat on, \"Just restaurants, though? Not hotels and such?\"\n\n\"The big wide world had been scaring me in SoCal and I didn't want to be one of hundreds of staff somewhere. Once I called my head chef to accept and she found out how very young and utterly lost I was, she looked after me. She bought my plane ticket and a loaded ORCA card and paid for the first month at the apartment she helped me pick out along with enough food and furnishings to get me through a payday.\"\n\n\"That's unheard of. She didn't try to, um...\" Ivy turned her HR hat to display a less pleasant aspect.\n\n\"To get into the chef pants she bought me? No, she's a professional. She's just inordinately kindhearted. She kept her word too, and I trailed in all kinds of kitchens in 'mom and pop's' and in huge chain restaurants, on cruise ships and at resorts, in vegan places and steak houses, everywhere. I learned a lot, but I love my restaurant and I love this city, so I stayed.\" Here I let my knuckles play over her hip bones as I positioned myself on her to perform my favorite sex act. \"I found out that girls here tend to like me, too.\"\n\n\"Do they?\" she asked with a sharp intake of breath as my tongue drew lazy circles down her midriff. \"And why's that?\"\n\nI smiled up at her in open lust, \"We've got nearly an hour left. Let me remind you.\"\n\nHer loving hand tousled my black hair and her sea-grey eyes closed. I enjoyed my feast and she left to meet her Uber with a broad dazed smile on her pretty face. I laid in bed, luxuriating in our sex sheets and idly wondered when the woman I'd opened up to more than any previous lover might be back in town.\n\nThat was the cavalier attitude that followed her third visit though. The very last time she'd left me - almost a month ago now - was far far worse. I technically left her on my way to work, giving me the ferry commute to Bainbridge Island to put myself back together again. I didn't do a great job, bawling in the ladies room for the majority of the short journey. \n\nI wasn't crying anymore once I got into the restaurant - there's no crying in the kitchen - but I tore savagely into the line cooks and porters, virtually roaring to keep from literally weeping.\n\nNow, particularly since our head chef is such a sweetheart, being an asshole is one of my main unwritten duties as her sous chef. There are unwritten limits as well though, and everyone in the brigade knew I'd exceeded them.\n\nMy head chef waited until an opportune time and unobtrusively beckoned me into her office.\n\n\"I know, I know. I'm being an unprofessional jackass,\" I admitted as I followed her through the door.\n\nShe didn't yell at me or dress me down at all. Instead, shut the door behind us and hugged me. \"She left again, didn't she?\" she asked considerately. A friend intuiting my problem and offering solace rather than a boss blowing up at me was more niceness than I could take.\n\n\"Yes,\" I sobbed. You know how you can keep it together when you're really upset until someone you love is kind to you? Yeah, I became a blubbering mess as she held me.\n\nEventually, I got control of my leaking, snotting, and wheezing. My head chef pressed me into a chair with a box of tissues, but kept her hand on my shoulder.\n\n\"Ph\u01b0\u1ee3ng, hon, why do you carry on with this woman who clearly won't make time to be with you?\" Her voice was gentle and caring.\n\n\"Really? You're calling my kettle black? How is Deanna's 'art' selling?\" I spat venom at her, and then felt nothing but shame at the corresponding hurt on her kind face. Lashing out at someone so softhearted and forgiving is like kicking a loyal dog and I despised myself for it. \"I'm sorry, I'm sorry. I don't mean that. I'm just so, so ugh,\" I ended my thought with something between a groan and a retch.\n\nShe waved the offense away with magnanimity, \"I'm not saying that I have things figured out either, but this lack of commitment from her and repeatedly losing her to her travels is tearing you up. I worry about you, Ph\u01b0\u1ee3ng.\"\n\n\"I'll be fine,\" I lied and sniffed, my smile wry and doomed.\n\n\"Alright,\" she let me lie and responded to my sad smile with a sardonic frown, \"we need to go finish prep in any case. Can you hold on until we shut down for the night?\"\n\n\"Yes,\" I answered confidently and honestly. Having a good cry had helped. Nothing was solved, but at least I wasn't keeping my burdens to myself.\n\n\"Good,\" she smiled wanly. \"I'll stand you up a few shots after clean up. Fuck knows that I don't wanna go home either.\"\n\nWe finished the shift, shut the restaurant down, and got shitfaced, so completely shknockered that we just crashed out in the back office. By sunrise, I was so hungover that I seriously thought I might have spent my blackout chewing cotton balls, staring into a flashlight, and wrestling the KitchenAid. Her live-in girlfriend didn't even bother to call and see if she was alright.\n\nAnd so we both rolled on with our depressing love lives. Nothing got better and nothing took my mind off of Ivy's absence.\n\nThe woman in question shifts in my arms. I nuzzle her comfortingly, trying to help her relax. I know why I'm distracted and concerned, but not why she's so silent and fidgety.\n\n\"You're quieter than normal,\" I note solicitously, \"Is everything alright?\"\n\n\"I'm preoccupied,\" she admits hesitantly, \"I have an important proposal presentation to make tomorrow and I'm not sure which way it will go.\"\n\n\"Wanna run it by me?\" I doubt I can provide any useful feedback, but my offer is serious.\n\nShe kisses me with a passion that exceeds gratitude. \"No. It's a problem for tomorrow and I shouldn't let it spoil tonight.\" She hugs me to her again.\n\n\"Alright, but I don't mind talking about it, if you need a sounding board.\" I don't like it when she's stressed out. Primarily because I care for her. Maybe a little because it makes me doubt my sexual prowess.\n\n\"That's okay. I really didn't mean to bring it up tonight,\" The smile back in her voice, she grows suggestive herself, \"Not when there is a more productive use of my time so obviously available.\" She fervently kisses my hand. \"How exactly would you prefer that I produce?\"\n\nShe knows how much I crave cunnilingus and customarily gives me my head, so to speak. But she and I both like more variety for my turn and she usually follows my lead in those pursuits as well.\n\n\"Hmmm, an embarrassment of riches, but I'm a little drowsy too,\" I admit, \"Maybe you can finger me and love on me a bit?\"\n\n\"That, like you my dear, is very doable.\" She turned me on my back and laid over me, her long slender body easily extending over mine and her relatively slight weight a comfort rather than a burden in my tired state.\n\nWanting her to get right to business, I take her right hand and press it to my mound unsubtly. She smiles and leans down to kiss my neck as her three fingers press into my ready body and search until finding my sensitive g-spot. \n\nOnce she's got it, she thrusts her fingers in and out of my pussy to a steady rhythm that she knows from experience will be neither too fast nor too slow for me. Her thumb brushes over and around my clit in the lightest of feather touches. I sigh.",
        "Her left arm is under me and her lips occasionally kiss my shoulder or forehead, but she mostly concentrates on keeping up the patterned stimulation required by my needy pussy. \n\nIn turn, my hands rest unmoving on her cute asscheeks. I always want to touch her, but I don't want any groping to distract her from the good work her right hand is doing.\n\nWith her undivided attention on expertly fingering my heated snatch, she had me nearing my boiling point. Already, in fact, I was boiling over and leaking well-passed her intrepid fingers and onto sheets I'd definitely need to wash later.\n\nUnwilling to let myself dwell on anything as mundane as laundry while my Ivy pleasures me, I study her face instead. She's more focused than usual, her high forehead crinkled by drawn blonde brows and her nostrils a bit flared on her long straight nose. Her lush lips and her pretty grey eyes are smiling though and she seems happy in making me happy.\n\nIvy catches me checking her out and winks in approval, but carries on in her pursuit of my happiness unabated.\n\nMy eyes close, my body too close to maintain an awareness of anything but the thundering in my pussy and the tightening in my belly. Her hand keeps on keeping on, fingering and strumming me with the precision of a metronome and the genius of a Mozart. \n\nMy breath comes in labored gasps between loud moans. \n\nAs my orgasm hits me, my moan turns into me yelling, \"Ivyyyy!\" as my body jerks hard and then flops in a most unladylike fashion.\n\n\"Yes, Miss Ph\u01b0\u1ee3ng?\" she inquires sarcastically as she simultaneously removes her hand and begins nibbling along my jawline.\n\n\"Pffffft!\" I retort, my tone haughty, but my brain not yet able to form words again.\n\nHer lips near my ear, so close that I feel her warm breath on my sensitive earlobe, \"I love overwhelming you with pleasure to the point that you can no longer speak. It makes you so adorably defenseless.\"\n\nI like to think of myself as hard and tough, but I don't mind being \"adorably defenseless\" to Ivy. That's a complex thought to express and I'm still working at the \"fire bad/tree pretty\" level at the moment, so I rub my cheek to hers and let myself drift. \n\nShe kisses my ears and cheeks tenderly until I fade out completely and I wake up in her long arms. Happily, I pat her hands as they rest on my abs and scootch back into her.\n\nIvy holds me like that for I don't know how long, but eventually starts to shift involuntarily and restlessly. I take the hint - otherwise she'd gamely try to cuddle me until pulled away by other duties - and roll to my side of the bed. \n\n\"It's lovely being in bed with you, Ph\u01b0\u1ee3ng.\" She stretches and frowns, setting the alarm on her phone for the morning. Or later in the morning rather. \"I would like to get a proper shower in though, before we go to sleep altogether. It was a horrible long trip,\" she reiterates. \n\nI know from tasting all the many parts of her that she must have gotten in a french bath somewhere before she came in my apartment and I attacked her. Yet, I understand the feeling of needing to wash off a long day, so I nod as she heads to my bathroom. \n\nHer phone sits temptingly unlocked on my nightstand. I hear my bathroom door shut and the shower come on a few seconds later. (My taps are slow to come to temp.) I know I'll have time to snoop.\n\nI keep telling you, I'm not the virtuous one.\n\nFor the first time since I'd entered my number in her phone, I look at her contact list, mollified that I was still listed as Ph\u01b0\u1ee3ng HotSeattleChef. There aren't any other suggestive names, but plenty of female contacts. \n\nIt's not really fair that I want her to be with no women but me, especially since I've had two short flings and four one-night stands in the last six months alone, but it's how I feel.\n\nSwitching to her text history, I find mostly flight alerts, delivery updates, restaurant receipts, and similar personal business. (She only uses her company phone for billable actions.) A text of \"Love you too, Shelly\" makes me growl before I read the \"I love you Aunty Ivy\" in the conversation above it. \n\nA little twinge of tenderness pulls at my heartstrings when one more text up I see a picture of a long-limbed blonde tween sitting on a new pink Schwinn captioned, \"Thank you for my new bike!\" A similar conversation was recorded the same day with a slightly younger long-limbed blonde girl, Sissy, pictured on a purple Schwinn. \n\nYet another variant could be found a few days before with a lanky blond man named Mike putting the two bikes together. He must be the brother in Dallas she occasionally mentioned.\n\nI asked her once why she didn't live near them. She said that she probably saw them more frequently the way things were, since layovers in Dallas were common and both siblings made a concerted effort to visit during the finite windows of opportunity.\n\nIvy admitted that she still didn't see them as much as she might like and alluded to the fact that she spoiled her nieces materially to make up for her long absences and short visits. I teased her about being a softie.\n\n\"Maybe,\" she conceded and her sea-gray eyes misted perceptibly before she laughed it off, \"but my stubborn big brother smokes and gorges, so those two little girls will probably be picking my retirement home someday. When they do, I want them to remember that Aunty Ivy bought them the good karaoke machine and didn't cheap out on the song selection.\"\n\n\"'Aunty Ivy,' huh?\" I asked as I trailed kisses down her stomach. I found her familial side as alluring as the rest of her.\n\n\"Ye-ah,\" she agreed, but caveated, \"You can't call me that if you ever want us to have sex again.\"\n\n\"Noted.\" I instantaneously and permanently dropped the title.\n\nThe sound of her stepping into the shower draws me back from reminesing to snooping. A few platonic texts - like thanks for dinners and admonishments to visit again - round out the rest of her conversations with unknowns. All her texts to and from me are still in her history as well, so I've no reason to believe that she deleted messages from other honies. I have no reason to believe that she's been with anyone but me in the last two years.\n\nNot yet content, I browse her pictures, mostly of her nieces, brother, and a woman that I'm guessing is his wife. Others are her in front of landmarks or at dinners with various people. A few are of her in front of landmarks alone.\n\nI preemptively growl again when I find a folder with \"Her\" as the only title. Tears form in the corners of my eyes instead at the contents. \n\nIt's full of pictures taken in my little apartment. Two years of us. Me shooting her a dirty look as I step in the door and she takes a candid of me in my stained chef's coat. Her trying to fit into my old clawfoot bathtub and her arms and legs all hanging out over the edges. Me blowing her a kiss. Her trying on my sunglasses. Me showing off a new tattoo. Her sexy panties in the trash because I'd ripped them beyond repair. Me in the buff with my hands on my hips. Her naked and reaching down a bottle from my top shelf. Me in bed after our first night together.\n\nUs in bed. Quite a few of us in bed. Quite a few close ups of my face while I'm sleeping.\n\nLooking at Ivy's photo history of us, I break my promise to myself and cry like a little bitch while she's still here in my home with me. I can't let her see me in tears. She'll ask what's making me cry and I'll have to lie to her. \n\nI hate to lie to her, but it'd be my only option. Ivy's such a good person that if I told her the truth, she might feel too guilty to keep visiting me.\n\nQuickly, I rudely turn off the lamp, roll onto my stomach facing away from both the bedroom door and her side of the bed, and use the open end of my pillowcase to dry my eyes as best I can. By the time she steps back into my bedroom, I've managed to get my breathing under control, but I know there must be tear stains and puffiness to give me away if she sees my face.\n\nStill and all, I needn't worry that she'll see me, because she's far too courteous to turn the light back on. Instead she slides into bed beside me with an arm over my upper back and under the covers. I fall asleep fretfully, exhausted physically from my long day, but even more so emotionally drained.\n\nI wake to emptiness in the bed beside me some hours later, which is entirely unacceptable while Ivy's in town. And disconcerting. She always kisses me goodbye before she leaves for work.\n\nTurning to check the time, 9:52, I see her in my walk-in closet. She's wearing only a button up white shirt over her conservative flesh tone lingerie.\n\n\"Good morning, sleepyhead,\" Ivy bids me as she steams her suit on my ironing board. \"I thought you'd never get out of bed.\"\n\n\"I still haven't.\" I don't have to be at work until 4, so I pull back the covers on her side. \"Join me?\"\n\n\"Sorry, no.\" She gestures to her face. \"I've already got my hair and makeup done and my appearance matters today.\"\n\nRubbing my bleary eyes, I take a better look. Her blonde hair resides in its normal tight gibson tuck and her gold jewelry consists of the same stud earrings, delicate black watch, ball/wire bracelet and ring, and olive leaf band ring she usually wears. \n\nThe slacks and blazer she's preparing are black, which is odd for her as she usually wears dark grays or blues. Her pumps laid out in front of the ironing board are red leather, which is unheard of for her. They have a thick 2\" heel and a gold double 'G' on the vamp.\n\n\"What's with the hot red Walmart heels?\" Were it not for them, I might think she was headed to a funeral. \n\n\"They're Gucci, Ph\u01b0\u1ee3ng,\" she laughs, a welcome tinkling sound.\n\n\"Is the suit Gucci, too?\" I ask just for the sake of asking as I continue to fight my morning stupor. Designer anything doesn't matter to me. Well, except for important stuff, like W\u00fcsthof knives or Mauviel pans.\n\nShe shakes her head fondly, \"Yves Saint Laurent. Do you know any clothing designers?\"\n\n\"We wear Shannon Reed chef jackets at the restaurant,\" I offer vaguely, \"Why are you so shmancy today? And how come you're still here this late in the morning?\" I stretch my arms and legs, mildly curious to hear her answers. Mostly though, if it doesn't seem as important as she's letting on, I'll make another play for morning sex and cuddles.\n\n\"Would you like me to leave?\" Her sea-grey eyes flash sadness and doubt.\n\n\"No!\" I disabuse her of her misguided notion. \"I want you to blow off work entirely and spend the day in bed with me.\" Again, I sweep my arm over her side of the bed invitingly and smilingly. I think it's a charming offer.\n\nShe frowns. Setting the iron down carefully, she steps over to me on the bed. I push off the covers and sit up, worried at the worry on her face.\n\nLeaning down, she kisses me fiercely and then tenderly. Her hand cups my cheek.\n\n\"We need to talk, but let's get some coffee in you first.\" She releases me.\n\n\"We do? About what?\" I share her disquiet fully.\n\nHer hand caresses my face. \"Coffee first.\"\n\n\"Ivy, you have my full and wakeful attention with a phrase like 'we need to talk.' Not to mention that kiss. Please, tell me,\" I implore, my anxiety building.\n\n\"The last two times I came here, it wasn't for work,\" she confesses as though she were telling me that she stole cash from my wallet, \"I took vacation days to visit you.\"\n\n\"Why the fuck didn't you tell me? And where'd you go all day?\" I'm way madder than I would have been if she'd stolen money. We could have spent at least some of that valuable time together. And why shouldn't we have, if she came specifically to see me?\n\n\"Museums, the aquarium, the zoo, the marina. It's a cool town.\" Her eyebrows rise and furrow at once. \"And, I'm sorry, but I worried that I might crowd you too much.\"\n\n\"What? By voluntarily visiting?\" That's madness. As though I ever acted any way but thrilled at her visits?\n\nShe shrugs apologetically, \"It's not an unfounded concern. We met on what we thought would be one night stand. We go straight to bed whenever I arrive. Most damningly, you're an extremely attractive and gainfully employed woman residing in a liberal urban center who's never in a relationship when I text.\"\n\n\"Are you calling me a slut?\" I venture in angry confusion. Ivy has never insulted me for being easy or judged me for being more active than her.\n\n\"No, I'm not. That's not at all what I mean.\" Ivy disavows the suggestion strongly and caresses my cheek lovingly. \"Besides, it's not my business how many other partners you have or how often. And I would never ask.\" \n\nNow I feel even more guilty about going through her phone, but I'm not dumb or honorable enough to confess mid-argument. Still, as my high ground is ripped from beneath my feet, I relinquish the righteous anger that bolstered me. Less accusatory, I ask, \"Why would you think you needed to hide wanting to make time for me?\"\n\n\"Because, using purely reductionistic logic, we're a 'booty call,' Ph\u01b0\u1ee3ng,\" she responded, pronouncing the phrase 'booty call' like the term was borrowed from a foreign language. \"I've never met any of your friends or colleagues. Or gone to a restaurant, or a movie, or even on a simple walk with you. I'm reasonably certain that we're not having an affair, but I thought you might too independent for a steady girlfriend or that you might be ashamed of your 'corporate layover.'\"\n\n\"Never,\" I disavow in turn, no less strongly and far more remorsefully. I'm not in the least bit ashamed of her. \"I just didn't want to waste our precious time together with anyone else or at any place where we couldn't be intimate. I didn't mean to make you feel like I only wanted you for sex.\"\n\n\"I don't. Not really. It's just...being here is the subha and the sukha, but lacks the dhuva to be Nirvana. Do you know what I mean?\"\n\n\"No,\" I answer in honest confusion, slightly irritated that she keeps beating around the bush when she claims to have something important to tell me, \"Do you know what you mean?\"\n\n\"Yes,\" she doesn't smile at my impatience, \"It's...That is...Being with you is like being in this perfect moment contained within a snow globe. It's amazing, but I don't know if us, meaning you and I, shouldn't be allowed to exist and flourish outside the snow globe too, in each other's real worlds, but joined?\"\n\nSnow globe? What?\n\n\"Are you saying our moment is over?\" She was breaking up with me? \"Are you...? Are you-\" my voice hitches.\n\nOne hand on my shoulder, her other hand lightly scratching the back of my close shaved neck with deep affection, she allays my fears. \"No no no, darling, no. Just the opposite,\" she moves to her point, her sea-grey eyes dropping the carpet, \"I have an appointment this afternoon to negotiate terms and formally accept a job based here in Seattle.\" \n\nI hold my breath, not trusting my comprehension. Could she really be saying...?\n\n\"I'd be taking it solely to be with you. If that's too much or if it's even simply more than you want, I won't accept the job. I want to share my life with you, but,\" she speaks softly, but meets my eyes desperately as she proves her chivalry once more, \"I'd rather continue on the way we are than risk not having you at all.\"\n\n\"Ivy!\" I shout her name in sheer glee. Hopping up, I hug her around the neck and practically hang from her, asking the only question I have, \"How soon can you move in?\" \n\nIvy's arms encircle me tightly and she sighs deeply in relief. With her smile back in her voice, she answers, \"My duffle's already here, Ph\u01b0\u1ee3ng.\""
    ],
    "authorname": "LesbianChickLit",
    "tags": [
        "lesbian romance",
        "romance",
        "cunnilingus",
        "fingering",
        "lesbian drama",
        "lesbian love",
        "lesbian relationship",
        "lesbian oral",
        "love",
        "chef"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/come-in-come-in-my-roving-friend"
}
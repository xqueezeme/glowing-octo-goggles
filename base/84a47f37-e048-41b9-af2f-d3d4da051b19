{
    "title": "The Other World Ch. 04",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 16 - World of Hate\n\n\"How did you know it was Kevin?\" Cindy asked as we sat in my office at 8:30am, Sunday, March 5th, having just gotten back from the crime scene.\n\n\"I didn't know for sure,\" I said, \"but the body type was the same. And while I didn't expect this to happen this quickly, I am not surprised that Kevin was waxed after what happened with those drugs the night before at his club.\"\n\n\"Did he have anything to do with those deaths?\" Cindy asked.\n\n\"I don't think so, not directly.\" I said. \"Kevin was a pawn, a tool being used without his knowledge. I probably should've taken him into protective custody. Another mistake on my part leading to someone's death.\"\n\n\"Come on,\" Cindy said, \"you can't stop every crime before it happens. And you couldn't keep Kevin in custody for any length of time unless he agreed to something like Witness Protection, which he likely would not have done. You even suggested to him to ask for protection, and he declined it.\"\n\n\"Yeah,\" I said moodily, \"but I should've acted on this one, it was too obvious: too many ties between Kevin and the Mob, the pushers, the White Supremacists, the Fascists like Jay Swenson and Ken Eidex that George Schwartz is financing. No... I let that man walk out of my Police Headquarters, and he didn't live through the weekend.\"\n\n\"I think there was nothing you could have done.\" Cindy replied. \"I don't think he knew anything to tell you that he had not told you already. And I think they were going to kill him no matter what. You hold him in custody for a week, or a month, and he's dead within a day of walking out.\"\n\n\"Why do you say that?\" I asked.\n\n\"Because of that crowbar up his ass.\" Cindy replied. \"That was a message, either to you or about you. They intended to deliver that message, and deliver it that way, and there was just nothing you could've done, Don.\"\n\nI nodded. \"You may well be right.\" I said. \"So... let's find out who did this and ram our own crowbars up the perps' asses. One thing we do know: it wasn't Jerry Saint, who is still in our jails.\"\n\n\"True that.\" Cindy said.\n\n\"The Mouseketeers got here an hour ago, and are watching for financial movements of money for a paid hit.\" I said. \"They're also seeing if there was any chatter on the cell phones of certain suspects.\"\n\n\"Do they have a warrant for that?\" Cindy asked.\n\n\"Yes.\" I said. \"Well, they have one for Kevin's phone from the deaths at the club. If we find anything to or from him up to the time of his death, we can follow our noses on that, and we can probably stretch it further by saying 'probable cause'. But even with probable cause, one has to have a warrant, so Franklin Washington is trying to get one now. Nance is the Night Court judge, which handles weekend work, so no telling what will happen there.\"\n\n\"Especially if this is a hate crime by a white group.\" Cindy said. I peered at her as she said \"Yeah, I know the motive might be other reasons, but they are at least making it look like a hate crime of killing a homosexual man in a way that other white groups have killed blacks and homosexual before.\"\n\n\"You are absolutely right.\" I said. Just then, my phone rang.\n\n\"This is Martha.\" said the voice on the other end. \"I just sent you the a preliminary report on that crowbar. I'll have the full autopsy done in a couple of hours.\"\n\nI checked on my emails and opened the one from Martha. \"I see why she went ahead and sent this.\" I said, showing Cindy. Crowbars (the metal ones) usually have the ends flanged out to flatness, to help pry things open. Usually those ends are a bit wider than the rest of the crowbar. The one that ended up in Kevin had ben filed down to a trapezoidal shape with the sides angling inwards making it easier to shove it where they did.\n\n\"Wow, they filed it down.\" Cindy said.\n\n\"Yep.\" I said. \"It punctured through his bowels and into his intestines, from what Martha is saying here. Tremendous damage. Martha thinks he bled out and was dead before he was dragged down the road. Those aren't bruises, but abrasions from being dragged.\"\n\n\"Well, at least he didn't suffer the dragging.\" Cindy said. \"God, what a horrible way to die.\" I could feel some intensity from my cousin; she was understanding of what homosexuals of either gender endured from some hateful people. It rarely escalated to this level, though...\n\n\"You want this one personally?\" I asked.\n\n\"I want to make sure it's solved.\" Cindy replied. \"And that means I want you on it.\"\n\nMy personal cellphone rang, and I answered it. \"This is Tanya.\" said the voice. \"Jack asked me to call and tell you that Les Craig is already on the way to your County to take over the Kevin Greeley case as a hate crime...\"\n\n* * * * * * * * * * * * * * * *\n\n\"Orders of the Police Chief himself.\" said the Duty Desk Sergeant. \"You are not allowed in this Police Headquarters, Agent Craig, no matter the circumstances.\" The Sergeant was blocking the way into the hallways behind the Duty Desk, and he was very tense and ready for a standoff.\n\n\"Are you kidding me?\" snarled Craig. \"I am the F-B-I. Now take me to Commander Troy's office.\"\n\n\"No, he's not kidding.\" said a voice to the side. \"And you don't need to go to my office to see me right here, Craig.\" Coming out of the corridor to the Press Room was Your Iron Crowbar, red crowbar ready to go. Following me was the Green Crowbar, and she was suitably armed with her crowbar and even more ready to go.\n\n\"You heard the Chief the last time you were here, Craig.\" I said. \"If you try to go past the Duty Desk, my Officers have orders to shoot you dead. I am not kidding, and will personally carry out those orders if need be. But I might give my partner here dibs.\"\n\n\"Crowbar beatdown to come...\" Cindy said menacingly. \"... in the Queen's name.\"\n\nCraig and the two FBI Agents, the automatons I was used to seeing with him, looked utterly stunned. They were not used to being confronted, stood up to, like this. Finally Craig said \"Very well. I'm here to take over the case of Kevin Greeley's murder as a hate crime. Here's the Federal warrant.\" He handed me the document, which was correct in every particular. \"I want everything you have, all the evidence.\"\n\n\"The autopsy is in progress now.\" I said. \"I'll send everything to the FBI offices in the Federal Building here in Town when it's done, along with all the other evidence under proper two-man controls.\"\n\nThe tension could be cut with a knife in the silence as the FBI Agents did not move. \"You might as well go to the Federal Building, Craig.\" I said. \"We're not even going to let you use the restroom here.\" \n\n\"You locals are just dog shit.\" said Craig as he started for the front door. \"And assholes on top of it.\"\n\n\"You're the expert on that, aren't you?\" Cindy spat. Craig turned on her, but then realized that I was the one about to swing a crowbar right at his head, and the Duty Desk Sergeant all but had his gun coming out of its holster.\n\n\"Come on, guys.\" Craig said. He and the automatons left.\n\nPart 17 - World of the Rabbit Hole\n\n\"You just let him take the evidence?\" asked Chief Moynahan as Cindy and I sat in his office at 1:00pm, Sunday, March 5th.\n\n\"No choice, sir.\" I said. \"The warrant was valid, and a Federal warrant at that. Craig is saying this is a hate crime in connection with other hate crimes in the nation committed by White Supremacists. He cited Apple Grove and Providence Springs as one example of the national scope of the issue.\"\n\n\"We could've fought the warrant, appealed it.\" said the Chief. \"We'd have lost, but it would've given us time to see what was going on.\"\n\n\"We already know, sir.\" I said. \"Martha sent me a copy of the autopsy, we've seen the other evidence, we still have all the Police reports, though we had to send copies to the FBI. And I might have 'accidentally' sent Jack Muscone and his boss copies of everything digitally preserved, as well.\"\n\n\"I still like to give the Federal Government every fight I can give them.\" said Moynahan. \"Just on principle. Those bastards are very pushy, sometimes, and sometimes they fuck things up. You two people with the crowbars are among the very few in this nation that can get away with pushing back like you do, so exercise that pushback when you can.\"\n\n\"Chief,\" Cindy said, \"if I know the Iron Crowbar as well as I do, he's in full agreement with you. Ergo, he has ulterior motives in letting the Feds have this case and the evidence, and I would imagine he has a very good plan... which will take a crowbar to pry out of him.\" I was being messed with, I realized.\n\n\"Me? Ulterior motives?\" I said jokingly. \"Why, perish the very thought!\" Then I grinned. The Chief couldn't hold back.\n\n\"Heh heh heh heh.\" he laughed, then said \"Okay, Mr. Crowbarrrr, what's the deal?\"\n\nI said \"Les Craig got wind of this case very, very quickly. The autopsy was not even done yet, and he is here, already in Town, ready to take over the case. Now let's ask ourselves, sir... how did he come to know so quickly?\"\n\n\"He was obviously notified.\" said the Chief. \"My question is whether or not you're insinuating that he had advanced knowledge of this crime, that he knew about it beforehand.\"\n\n\"Yes sir.\" I said. \"I see three scenarios: first, the Press learned about it and Bettina tipped him off. Second, one or more of our Officers tipped him or the FBI off. The third is that he knew ahead of time.\"\n\nI might add that Bettina and her KXTC News van had come upon the crime scene from the east, almost running over my Crime Lab people. They also tried to go around Police blocking them by driving onto the crime scene area where Kevin had been dragged. That caused Officers to draw guns to stop them.\n\nOnce I got to the scene, Bettina was screaming at my Officers. I'd told her that if she continued to scream at them, I would personally arrest her, and use a violent, physical takedown in doing so. Cindy then said she was going to arrest Bettina anyway. \n\nWhat she actually did was take Bettina to the side and warn her that I was not kidding around... and that I would hit a woman with a crowbar, and as hard as I could. Bettina shut up. Her van was held in place until we were done completely, and the body had already been taken to the morgue. In fairness, we stopped the KSTD van, also, though we did not need to get ugly about it.\n\n\"It could very well be the Press.\" said Moynahan in present time. \"Bettina has already been screaming at the Sheriff and the Council for the way she and her people where handled at the crime scene. The Sheriff told her she's lucky her van's driver is not in jail and charged with the felony crime of evidence tampering when he tried to drive over our crime scene. But I have a bad feeeee-ling about this Les Craig.\"\n\n\"Smarmy vibe at work, sir.\" said Cindy. \"And I've had it for a long, long time.\"\n\n\"Well,\" I said, \"if Craig got his info from the Press, or a tip from a bad Officer, then he may still be on the up-and-up. But if he knew in advance in any way, then he's part of the problem.\"\n\n\"So why did you let him take over the case?\" asked Moynahan, who was still not fully over that.\n\nI smiled, an ugly smile. \"As Captain Ross said about ulterior motives... it is going to be soooo much fun watching the FBI infighting over this. And while it's going on, I can do what I think is -the- most important thing.\"\n\n\"What's that?\" asked the Chief and Cindy at the same time. Jinx on them.\n\n\"Finding Leonard Lotz.\" I replied.\n\nJust then there was a knock on the door, and the Duty Desk Sergeant was admitted. \"Gentlemen, ma'am,\" he said, having been a military veteran and speaking to us as he would military officers, I noted, \"Ms. Priya Ajmani is at the front desk and says she needs to see Commander Troy. She insists on coming to his office.\"\n\n* * * * * * * * * * * * * * * *\n\n\"So this is the mighty Iron Crowbar's office.\" Priya said as she looked around. \"Very nice... Oh, student of the Trojan War?\" She was seeing the matchstick Trojan Horse and the painting behind my desk.\n\n\"Student of Pastor Raymond Westboro,\" I said, \"who was a student of the Trojan War, and send me those lovely parting gifts. Have a seat.\" I said.\n\nCindy was sitting on the sofa, with an amused smile on her face as Priya looked at my two MOV citations, Bowser's citation, then to the other wall and the framed picture by Gunny Guernica's son and the U.S. Marines insignia next to it.\n\nAs Priya sat down, she said \"I have something for you that came in to KSTD this morning. Dan Walther asked me to bring it to you. We will not be giving this to the FBI's Les Craig, and we'll invoke the First Amendment rather than help him. Maybe he can fuck Bettina Wurtzburg to get her help on it.\"\n\nCindy was closer to laughing as I took the package. In it was a jump drive.\n\n\"We've checked for every virus in the world.\" Priya said. \"It's safe.\"\n\n\"Then you won't mind if I run some no-shit Government detection software on it.\" I said. I did so, finding there to be no viruses. I began running the video files.\n\n\"Ho-leee shit.\" I gasped. We all watched as the image of Kevin Greeley being dragged behind a truck could be seen in the videocamera's powerful light. He was being dragged feet first, on his belly, the black crowbar visible at times.\n\nThe next one showed Kevin lying where he'd been found, dead. I heard voices cheering off camera, then one voice said \"This is what fucking faggots get! White power!\" A chorus of \"White power!\" chants rose up. Then the camera was moving, but I could see partially masked people. Then it turned and showed a pickup truck with the chains on the ground behind it. \n\n\"Oh my God.\" Cindy said. \"Either they are stupid as shit, or they're letting us see the license plate on purpose.\"\n\n\"It may be both.\" I said. \"They are indeed stupid as shit.\" I turned to Priya. \"Thank you for bringing us this, Priya.\" I said.\n\n\"Oh, you're quite welcome.\" Priya said with a beautiful smile. \"And one day, Mr. Iron Crowbar,\" she said, getting up and leaning over my desk, \"you and I are going to have sex in this room. I'm going to lay down on this desk and you are going to fuck my brains out. Oh, Cindy can come and be part of the fun, too.\" The last sentence was teasing my partner. They must have a better relationship than I realized, I thought.\n\n\"I wish I could make that come true now.\" I said. \"But we are too busy. But soon, Priya... soon. Better be sure to take your pill every day.\"\n\n\"Maybe I won't.\" said Priya huskily. \"Maybe you can knock me up like you did Paulina Patterson, and Cindy's sister, not to mention your own scorching hot wife...\"\n\n* * * * * * * * * * * * * * * *\n\n3:30pm, Sunday, March 5th. Leonard Lotz was naked except for the seemingly dark glasses, pumping his very average cock in and out of the woman sitting on his lap. She was in her early forties, toned and in great shape. Her hair was metallic bright red and her bangs cut straight across; one would think it was a wig, but it was her real, dyed hair. She was naked except for the matte black high heel pumps she always wore while working. She was a prostitute, relatively high class for Goth working girls, but still a woman that spread her legs for pay.\n\nLeonard Lotz was the most boring, coldest fuck she's ever experienced, she thought to herself. He wasn't impotent; his cock was hard as she rode him, but he was fucking as if he didn't give a damn and just wanted to get his nut. He could've saved his money and masturbated himself to climax, she thought.\n\nFinally, she felt Leonard's nut rise, and he grabbed her sides to increase the speed of his pumping up into her.\n\n\"Unnnh...\" Lotz groaned as he came, firing his spurts into the condom he was wearing. \"Damn, it's hard to get off when I'm wearing a fucking raincoat.\"\n\n\"We'll have to do something to make that better, next time.\" the woman said, no interest in her voice at all.\n\nNeither of them had heard anything, and so were totally shocked to look up and see the tall man with broad shoulders, Tilley hat on his head, trenchcoat wrapped around his obviously fit body... and tapping a red crowbar in his hand.\n\n\"Aaauugggh!\" the woman screamed, leaping off Lotz. \"What the fuck?\"\n\n\"Get out of here.\" I said to her. \"I want to talk to Leonard, here. Move, bitch.\" The woman scrambled to get her clothes, and ran out of the room, which was an auditorium room of an abandoned building in the Industrial District. Leonard and the prostitute had been fucking on the 'stage', such as it was.\n\n\"God damn it, man.\" said Lotz, knowing I had him, that he was at bay. \"Messing up my action.\"\n\n\"What are you bitching about, Lotz?\" I said. \"I let you get your nut.\"\n\n\"Yeah, you did.\" he conceded, reaching for his pants.\n\n\"Don't move, Leonard.\" I said. Lotz sat back in his chair. I went over and picked up his jeans, going through them to make sure there were no weapons, and making sure there were no concealed knives in his belt. Satisfied (pun not intended), I flung the jeans at Lotz.\n\n\"So what is with the shades indoors, and in the dark, Leonard?\" I asked.\n\n\"The sun never sets on cool.\" Leonard replied. I snorted a very sarcastic laugh.\n\n\"Not a bad acting job, there.\" Lotz said as he put on his jeans then sat back down in the chair. \"But I know that bitch had to be the one that ratted me out to you. How much did you pay her?\"\n\n\"Not a dime.\" I said... which was true. Earlier, I'd gotten a phone call to meet the woman. She said she'd been hired by Lotz for the second time in three days, and she'd give him up to me. What she asked for in exchange was stunning:\n\n\"If I give him to you,\" she had said, \"I want you. I want you to fuck the hell out of me and come in me. I'll get tested to prove I'm clean. But I want to know what it's like to fuck the Iron Crowbar.\"\n\n\"You're kidding.\" I said.\n\n\"Nope.\" she said coming up to me. \"Time and place of your choosing, and no charge. You just have to promise to come inside me. Whaddya say?\" She'd reached up and put her arms around me. She was good looking, hot legs, and her eyes sparkled fire.\n\n\"Okay, you have a deal.\" I said, sliding my arms around her waist and clutching the firm globes of her sweet ass as I bent down and kissed her. Our tongues twined for a moment, then I let her go. She gave me her number, and I had that number in my Police cellphone marked as a C.I.\n\n\"That's hard to believe.\" said Lotz, a sardonic grin forming on his face. \"After all, I told her to call you and give me up.\"\n\nI nodded, seeing the full picture. \"You're a sneaky man, Mr. Lotz. Boring as hell in the sack, from what I could see of her facial expressions, but sneaky nonetheless.\"\n\n\"I'm sure you'll give her a much hotter fuck than I did.\" said Lotz. \"Frankly, she was boring, too. Sex is boring, unless I'm raping the bitch or I'm amped up to hell with drugs... or after a bank job. So... I'm in your custody now, Mr. Crowbar. What's next?\"\n\n\"If I take you into custody, or back to The Asylum, you'll be dead within 24 hours.\" I said. \"And if I give you to Les Craig of the FBI, you'll be dead even faster.\"\n\n\"Not much gets by you, Commander.\" Lotz said, his laconic voice connoting boredom.\n\n\"Is Craig dirty?\" I asked.\n\n\"Depends on what you mean by 'dirty'.\" Lotz said. \"Some people say you're dirty, but they don't mean being on the take. They mean you're a tricky bastard. The same goes for Les Craig, but he's got unlimited ambition behind his actions. You, you just like to fuck with people while you're snaring them in your traps.\"",
        "\"But you're right,\" continued Leonard, \"if the FBI gets hold of me, I will disappear and never be heard from again... just like you almost were. They think I know more than I do... again, just like you when that dirtbag Walker went to work on you.\"\n\n\"You know more about that than is good for you.\" I said. \"So, what is it they think you know that you don't?\"\n\n\"The same thing you want to know.\" Lotz said. \"Millwakee. What happened there. What they don't seem to realize is that I told you everything I know.\"\n\n\"Let me ask this.\" I said. \"Did you ever see Dr. Yarborough after you left Millwakee?\"\n\n\"No, never did.\" said Leonard.\n\n\"You said last time you had a lot of sex with several of the women staff as well as the female inmates, or patients, or whatever they were.\" I said. \"Did you ever use a condom then?\"\n\nLeonard snorted a laugh. \"That's funny. Hell no, everything was totally unprotected, and Yarborough wanted to see creampies. The only rubber in that fucking place was car tires and bath mats.\"\n\n\"And you don't remember ever being tested?\" I asked. \"No bloodwork? Nothing?\"\n\n\"Not that I remember.\" said Lotz. \"Just those women teachers, sucking my dick until I came in their mouths or their pussies.\"\n\n\"You said some girls escaped.\" I said. Lotz nodded. I said \"Did any guys ever escape from there?\"\n\nLotz grunted a laugh. \"Why would we? We were getting our balls fucked off.\"\n\n\"I hear you, but just to confirm: only girls escaped, no boys that you know of?\"\n\n\"Come to think of it,\" said Lotz, as if it was the first time he'd realized it himself, \"you're right... only girls, no boys escaped while I was there.\"\n\n\"Were all the people there white?\" I asked. \"Or different ethnicities?\"\n\n\"Almost all white.\" said Leonard. \"No Blacks or Hispanics at all. There were a couple of Asian girls there; they were part of the smart set that were afraid of us, as I told you the last time.\"\n\n\"Did Yarborough have any other associates? Grad students that worked with you out there?\"\n\n\"Maybe some of those women or men on the staff, but I got the feeling they were just hired to fuck, and weren't grad students.\"\n\n\"Was Yarborough married? Have any other relatives?\"\n\n\"Not that I was aware of.\" said Lotz. \"Now if there's nothing else, Commander... I'm sure you were followed here, and who knows who is on the way to betray you and take me in.\"\n\n\"I can assure you that if I do not wish to be followed, then it won't happen.\" I said. \"So... do you want me to just let you go? Or take you back to the Asylum? I'm sure George Aurus will be happy to see you there.\"\n\n\"Yes, I heard you captured that little midget.\" said Lotz. \"And no, I don't want to be anywhere near him. He's a sneaky fuck... I'm surprised you didn't get stabbed by him; he always carries a stiletto knife on his body somewhere.\"\n\nJust then we heard a commotion. \"STOP! POLICE!\" I heard a female voice yell, and the sounds of someone running after someone.\n\n\"What the fuck?\" Leonard asked, his head whirling around.\n\n\"Stay where you are, Leonard.\" I said, not moving. A moment later, the clattering stopped. Another moment later, Cindy Ross appeared.\n\n\"She got away, Goddammit.\" Cindy said, exasperated.\n\n\"Who?\" asked Leonard. \"That bitch that I just fucked?\"\n\n\"No, Leonard.\" I said. \"Someone else... and maybe someone who is your Guardian Angel more than you know. Okay, Leonard, you're on your own. Leave that prostitute alone, and get the hell out of my County. Get one of your Punk or Goth buddies to give you a ride to the City or to Southport, and make yourself disappear...\"\n\n* * * * * * * * * * * * * * * *\n\n\"She was wearing all black, like a ninja suit.\" Cindy said as we got in my Police SUV. \"Full mask, too. Smallish, short and slender. And fast as hell; I didn't have a shot to catch her.\"\n\n\"How do you know it was a woman?\" I asked.\n\n\"With the rack she had?\" Cindy asked back. \"Great set of tits, and not a bad ass, either. And I don't think a guy is going to wear a cumbersome bra just as a disguise.\"\n\n\"Flawlessly logical, Mr. Spock.\" I said.\n\n\"So you're letting Leonard go?\" Cindy asked.\n\n\"Oh yeah.\" I said. \"I got what I wanted from him, which was a few more questions. And it's a real dilemma... if I arrest him and take him in, he will be killed in jail, maybe before the FBI comes and gets him, which they would.\"\n\n\"If they catch him, and he tells them you let him go...\" Cindy said.\n\n\"His word against ours.\" I said. \"And they'll never catch him. He's stayed free this long since being let out of the Asylum, and Les Craig is just too fucking stupid to catch him.\"\n\n\"Unless Craig is playing all of us for fools.\" Cindy said.\n\n\"Which would be a mistake when angry young women with green crowbars are ready to beat his ass down.\"\n\n\"And in the Queen's name.\" Cindy replied. \"So, that leads to my last question, that I never got to ask you earlier.\"\n\n\"Lieutenant Goodwin, Hendricks, Hatch.\" I said.\n\n\"Spot on.\" Cindy said.\n\n\"I will tell you this, just between you, me, and the Crowbars.\" I said. \"I was not informed so that I would have 'plausible deniability', but Internal Affairs may not realize they are not dealing with an Agency of the Weak Minded. So they try to do an end-around with me, and have Hatch working with Hendricks on patrols. Now what is wrong with that picture?\"\n\n\"Everything.\" Cindy said. \"Hendricks is dirty, McCombs is dirty, Hatch is useless.\"\n\n\"Truly useless?\" I asked. Cindy caught on.\n\n\"Ohhhhh.\" she said. \"So Internal Affairs gets him to patrol with Hendricks and report back to them. He's their mole to try to get some dirt on Hendricks and McCombs. And they must be keeping tabs on Hendricks. They showed up when he and Hatch found Kevin's body.\"\n\n\"Yes. Great job!\" I said. \"They were on the north-south road making sure Hendricks wasn't lying about being on routine patrol. But I already know he was, because I have similar technology to what your father put into the Black Beauty, and I've been tracing where Hendricks goes for months now, and McCombs, too. They've really been keeping their noses clean, playing by the book. Like Sith Lords going dormant again.\"\n\n\"So Goodwin and I.A. did not tell you about having Hatch work with Hendricks and McCombs?\" Cindy reiterated.\n\n\"No, they did not.\" I said. \"And don't get pissed at Goodwin. That came down from Inspector General Horace S. Wellman, who is actually conducting this charade for the Sheriff. And the real reason is to evaluate Hatch. It wasn't a lie that the Sheriff's Department is ready to give that guy a blanket party; we are really, really lucky that the defense lawyers in this Town have not realized how badly he's handled some evidence at times. I think they're hoping he will do something dirty, and they can bust him, Hendricks and McCombs in one fell swoop.\"\n\n\"This isn't one of your sneaky plans, is it?\" Cindy asked. I just looked over at her, then back at the road.\n\n\"I sincerely hope that I am not that incompetent,\" I said, \"nor that you think I am.\"\n\n\"Er, no.\" Cindy said. \"So... are you really going to fuck that whore?\"\n\n\"Sure.\" I said. \"You want some of her?\"\n\n\"No.\" Cindy said. \"I have higher standards than that.\" I lifted my eyebrows at that. \"Then again, if your little crowbar is your way of recruiting a new C.I., or breaking a woman to your fist like you did Priya,\" Cindy continued, using falconry lingo, \"then more power to you.\"\n\n\"Now that is Iron Crowbar thinking, my friend.\" I said with a grin. \"Pun fully intended.\" Cindy burst out laughing.\n\n* * * * * * * * * * * * * * * *\n\nI got the call that evening. \"Sir,\" said J.R. Barnes, \"we went through the State database like you asked, and we got a pretty close match for the partial print we got from that black crowbar in Kevin's ass.\"\n\n\"Let me guess.\" I asked. I mentioned a name. J.R. was used to me; he was not even stunned that I was right.\n\nPart 18 - Race and Races\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled the hot redheaded reporterette at 7:00am, Monday, March 6th. \"Channel Two News has learned that the murder of a homosexual man in the County is being investigated by the FBI as a hate crime committed by racist whites!\"\n\nBettina went on: \"Kevin Greeley, the young owner of the clubs 'Pink' and 'Punk', was found dead early Sunday morning by the Town & County Police on a farm just east of the State Line. His body had been dragged behind a vehicle that the FBI says was a pickup truck, and this was done after Mr. Greeley was tortured and suffered tremendous injuries.\"\n\n\"FBI Special Agent in Charge Les Craig, working with the National Security division of the FBI, said that this is a classic case of a hate crime against blacks or homosexuals by white racist groups or individuals.\" Bettina continued. \"Special Agent Craig suggests that all persons of minority groups and sexual orientations be alert and aware of one's surroundings at all times.\"\n\nBettina went on: \"Town & County Councilman Reginald B.F. Lewis has called upon the Sheriff and Police Chief to meet with him regarding the safety of Blacks in the Town & County and the need for additional Police protection of minorities. Mr. Lewis also stated that the reduction of Police precincts directly contributed to this hate crime. He and Malinda Adams issued a joint statement calling for the return of the three-precinct system.\"\n\n\"Celebrity rapper T-Square was reached for comment,\" said Bettina, \"and he urged the Black Community to remain calm in the face of racism towards his people. T-Square called upon the Police Department and the FBI to work together to apprehend the racists that murdered Mr. Greeley.\"\n\n\"And in other news,\" said Bettina, \"four of the six persons sickened by a bad batch of drugs at a nightclub Friday night have fully recovered and will be released from the Hospital today. Two young women, Lena Hill and Kate Noll, both University students, died of drug overdoses. Local Police have had no comment on the cases. A memorial service will be held on the University campus this afternoon.\"\n\n* * * * * * * * * * * * * * * *\n\n\"Is that for real?\" asked Jermaine Davis as we watched the news in MCD. \"Hate crimes?\"\n\n\"Have a seat at your desk, Jermaine. You too, Theo.\" I said, coming over with a chair and sitting near them at Jermaine's desk. Needless to say, every other Detective gathered around to listen.\n\n\"This is being made to look like a hate crime.\" I said. \"The Media is certainly trying to gin it up as a looking like that. But there's some truth we know that the Public does not.\"\n\n\"First,\" I said \"the murder of Kevin Greeley is just a bit too staged-looking. It is exactly what has happened in previous hate crimes in Texas and Montana. It looked to me at the scene as if someone had read reports of those crimes and wanted to re-create them.\"\n\n\"And maybe they were white racists reading about it and doing that?\" asked Theo.\n\n\"Possibly.\" I said. \"Except that the very man they decided to kill just had two people die at one of the clubs he owned. Coincidence?\"\n\n\"Or someone angry at him for those drug deaths.\" said Theo. \"Which means it's not a hate crime, but could still be done by whites who were friends of those that were injured or killed.\"\n\n\"And then we have one more thing.\" I said. \"The FBI took over the case, citing it was a hate crime. Then they go and advertise it on TV. Now maybe Chief Griswold's next book will discuss this, but is that the way you'd go about handling this case? Do you think it's the way I would handle it?\"\n\n\"So what do you think it is, Commander.\" said Jermaine Davis.\n\n\"I'd say the hate crime talk is a blind, a front wall, while the real motive of the crime is what's being worked on behind the scenes.\" I said.\n\n\"Stupid way for the FBI to be doing it, then, sir.\" said Theo. \"Ratcheting up the racial tensions that are already there. That's really bad.\"\n\n\"Yes, it is.\" I said. \"So why do you think Les Craig of the FBI is doing it the way he's doing it?\"\n\n\"Because he's stupid!\" I heard a voice yell. No, it wasn't Cindy. It was Joanne Warner. Everyone laughed.\n\n\"Well, that's a given.\" I replied. \"But my point is just to make sure we know what is going on before giving ourselves to radical speculation. It may really be a hate crime, but I'm not ready to dismiss all other considerations, and also to realize the Press will gin up any story they can to make Blacks angry at Whites.\"\n\nHave I mentioned that I have a deep, deep hatred of the Press?\n\n* * * * * * * * * * * * * * * *\n\nAfter watching Priya's broadcast, a near-duplicate of Bettina's but without FBI Les Craig's statements, we turned to our Angels meeting. It was in the Main Conference Room, as I had extra guests. Lt. 'Coldiron' Masters was one of them. Lieutenant Curly Goodwin of Internal Affairs had also been asked to join us.\n\n\"The murder of Kevin Greeley is still a local crime of murder.\" I said. \"And we are still investigating the double homicide at 'Punk'. So, Curly, tell us what is going on with Hendricks and Hatch.\"\n\n\"On this one,\" said Goodwin, \"they were clean. They were on routine patrol and found the body. They've done that same route pretty much exactly every weekend early morning for weeks now, and McCombs and Hendricks were doing that route for a year. That'd be a lot of pre-planning, if you asked me.\"\n\n\"And they know you've been watching them?\" I asked.\n\n\"Geez, sir, Hendricks has had us down his throat since that night Captain Croyle found that girl at the Saskia Warehouse.\" Teresa looked down as the memory of that night and of Amy came back to her. I just nodded.\n\n\"Now let me ask this.\" I said. \"I know you didn't tell me everything that was going on, and that was because the Sheriff, Inspector General, and Police Chief asked you not to. But just know that I do know what's going on, and I have to ask... do you really think you're going to catch these bastards when they know you're watching them?\"\n\n\"No sir, I don't.\" said Goodwin. \"And that's fine by me, if they stay clean and do their jobs. If they fuck up, we'll be right there, and they know it.\"\n\n\"Well!\" I said. \"Captain Ross, I can hardly find anything to argue with in that logic. What do you think?\"\n\n\"I think you are right, sir.\" said Cindy. \"Only Captain Croyle can find something to argue about out of nothing at all.\" Masters and Goodwin chuckled. Teresa... did not.\n\n\"What do you have to say about that, Captain Croyle?\" I asked, trying to start some trouble.\n\n\"Sir,\" Teresa said quietly, but in her 'sweet' voice, \"if you'd just do me the one favor of setting those brackets up just right, I'll be ever so grateful.\" I could not prevent myself from breaking down laughing.\n\n\"You guys have too much fun.\" said Goodwin, who was still chuckling. \"Sir, if you'll excuse me...\" I excused him.\n\n* * * * * * * * * * * * * * * *\n\n\"Don,\" said Jack Muscone on the phone just minutes after the Angels meeting finished, \"my boss is flying in to County Airport, and should touch down at 9:30. I'm making the mistake of telling you he'll be here at 9:30 and that you and Captain Ross should be here when he gets here, if you get my drift.\"\n\n\"Got it.\" I said. Cindy and I went over to the Federal Building. In the FBI offices there was Jack Muscone, Lindy Linares, and Martin Nash.\"\n\n\"Where's Sandra?\" asked Cindy as we arrived and shook hands with everyone.\n\n\"She's flying in with my boss.\" said Jack. \"Here's the story, Don. We know Les Craig took that hate crime case away from you guys. He's been going around telling people in our offices about it, laughing at you behind your backs about how he went in and broke you both down.\"\n\n\"Did he mention how he nearly got shot dead?\" I asked. All of the FBI Agents' eyes widened in shock as I related what happened at the Duty Desk.\n\n\"So what you're telling me is,\" said Jack, \"is that we should be having meetings in your office, because Craig can't barge in on them, because he can't get past the Duty Desk.\"\n\n\"Yep.\" I said. \"And if you relay that story about us about to shoot him to the people in your offices, laughing at him behind his back, I'm sure it'll be fun for you.\"\n\n\"I think I'm glad I'm on your side.\" said Lindy Linares with a flirtatious grin at me.\n\n\"So am I.\" I said with a smile back. Then I let the smile vanish as I said, \"Jack, the Town & County Police Department knows who murdered Kevin Greeley.\"\n\nSilence was instantaneous. \n\nI slid a jump drive and some reports across the table to him. \"They made the horrible mistake of taunting me with some videotape of their crime. They made the mistake of showing enough of their faces to get some recognition software to work correctly on one of the partially masked faces. The State's fingerprint database was able to identify a partial print on the crowbar they shoved up Kevin's ass, to wave a red cape under my nose as if I'm some stupid bull in a bullfight. And now... the bastard is going to get the horns.\"\n\nJack was looking at the data as I said \"This murderer is also the second man who assisted in the murder of Jeanine Burke. He also has a few... personal things to account for.\"\n\nJack read the name, and then looked up at me as he passed the data over to Lindy.\n\n\"Ferrell.\" Jack said.\n\n\"Richard Ferrell.\" I replied. \"We have the proof, and will be issuing the APB as soon as this meeting is over.\"\n\nCindy was fiddling with her iPhone. \"And this meeting is now over. The new one with the Deputy Director is about to start when he walks in the door in ten seconds.\" She pressed a button. \"And, done. APB issued.\"\n\n\"What APB is that?\" asked the DepDirector, coming in, followed by Sandra Speer. \"Sorry to be late.\" he said. \"I asked y'all here to discuss this hate crime case, and if it's related to White Roots or Superior Bloodlines.\"\n\n\"Neither, sir.\" said Muscone. He passed over the information. The DepDirector scanned it, then looked up at me.\n\n\"My God, Commander, how did you do this, and so fast?\" he asked.\n\n\"I would say 'confidential informant', sir.\" I said. \"But in truth, the bastards sent that to the Press, trying to bolster the image that this is a white supremacy group. But it's not, it's much deeper than that.\"\n\n\"Ferrell.\" said the DepDirector. \"Any idea where he is?\"\n\n\"Somewhere in the region, sir.\" I said. \"He may stay across the State Line, but he's in the area. And he is bus-ted.\"\n\n\"And before Les Craig could turn around twice, sir.\" said Muscone.\n\n\"Yes, I heard about what happened at Police Headquarters.\" said the DepDirector. \"Do be careful, Commander. He's still an FBI Agent, and while I back you up as much as I can, if you start a war with him, it'll be a war with half the FBI itself.\"\n\n\"With all due respect, Mr. Director,\" Cindy said, \"it's not Commander Troy starting anything. It's Les Craig coming in with an arrogant attitude, and that's when he's not directly insulting us or putting tracking devices on our car. It's Les Craig trying to start a war, and people who start wars with the Iron Crowbar tend to regret it, half the FBI notwithstanding.\"\n\nIn an amazing display of patience, the Deputy Director of the Federal Bureau of Investigation held his tongue, though he could not hide the fire blazing in his eyes. Then he exhaled.\n\n\"You're right, Captain.\" he said. \"You are right. I can see that something is wrong, and it's not on your end---\" His cellphone went off and he answered it.\n\n\"What is it, Craig?\" he asked sharply. \"An APB for Dick Ferrell? What about it?... well, the Town & County Police Force found the evidence and have presented it to me... Craig, mind your tone when speaking to me... Let me make one thing very clear, Craig. The TCPD has the evidence that Dick Ferrell was one of those that participated in the murder of this man... no, it's legit. And I'll be adding my own APB for a nationwide manhunt for Ferrell... how about Ten Most Wanted list?... No, you sit tight. I'll talk to you later, goodbye.\" The DepDirector hung up.",
        "\"Jesus Christ.\" he muttered. \"Craig is going bananas over this. He claims you didn't give him all the evidence.\"\n\n\"We didn't get the tape until after he blew through Headquarters.\" I said. \"We've got that documented.\"\n\n\"Oh, I know.\" said the DepDirector. \"And you did present your evidence to the FBI in a timely manner.\"\n\n\"And to the Deputy Director of the FBI, no less.\" said Jack Muscone. \"Don, do you think Ferrell is involved with the bad drugs that killed those students?\"\n\n\"I have no links nor formal proof yet.\" I said. \"But it makes some sense if he is. Assigning blame to those deaths isn't easy; we have TOO many candidates to choose from. Organized Crime, meaning Jerry Morelli; white supremacists, meaning Franklin Gray... who they may be setting up to take the fall; George Schwartz, working with anarchist groups like CFPA and PCGW; and another group in the shadows, with Government power behind them, connected to Aurus and Lotz in some way. Cindy, remind me when we get back to my office to look up Ferrell's past.\"\n\n\"Wilco, sir.\" Cindy said.\n\n\"I'd love to hear Jerry Saint give us Ferrell.\" I said. \"Hmmm...\"\n\n* * * * * * * * * * * * * * * *\n\nPriya was all radiant smiles as the Press Conference convened at Town & County Police Headquarters. Bettina looked pensive, as if she knew a joke was being played on her, but didn't know what it was. Everyone else was wondering what it was about. They knew about the APB for Ferrell, but didn't know any details yet.\n\nI went to the podium and raised my hand to get quiet from the gaggle shouting questions. When they calmed down, I said \"If you will show some decorum and restraint, your questions will be answered in an orderly fashion. The Deputy Director of the FBI is not likely to tolerate bad behavior. Mr. Director?\"\n\nTo the Media's surprise, stunned surprise, the DepDirector came up. \"I'll make a statement, then answer some questions. The Town & County Police Department has presented evidence to the FBI that former SBI Agent and Director of their Narcotics Task Force, Richard Ferrell, was directly involved in the murder of Kevin Greeley, a resident of this County. In cooperation with the TCPD, we have issued State and Federal warrants for the arrest of Richard Ferrell on charges that include murder and conspiracy to commit murder. If he crosses State lines, several additional Federal charges will apply.\"\n\n\"Will Mr. Ferrell be charged with a hate crime, sir?\" asked Bettina Wurtzburg.\n\n\"I want to be careful in my answer on this.\" said the DepDirector. \"This murder was made to look like a hate crime, and the killer or killers left evidence to make you think it's a hate crime. If our further investigation warrants those charges, they'll be added. Right now, we want get to the bottom of this, and to find Richard Ferrell.\"\n\n\"What evidence led you to Richard Ferrell?\" asked Priya, obviously wanting us to give her praise.\n\n\"We understand that videos were made of this gruesome killing and sent to the Press.\" said the DepDirector. \"We've asked the Press not to show these tapes, and they are now part of our evidence. We appreciate the Media's cooperation on this.\" That was the best Priya was going to get, but at least the DepDirector had given the Press some praise, and all the reporters knew it was KSTD that had gotten the scoop, and would get more scoops, while Bettina and her source Les Craig were falling further behind.\n\n\"Sir,\" said Bettina, \"is there any truth to the rumors that Commander Troy and Captain Ross are no longer FBI consultants, or won't be in the near future?\"\n\n\"I don't know where those rumors are coming from,\" said the DepDirector... a bit severely, I might add, \"but as long as I'm with the FBI, I want to have Commander Troy and Captain Ross to consult with. This Town and County is extraordinarily lucky to have them on their Police Force, and I am lucky to be able to pick their brains and have their abilities working with my City-based teams. They will be FBI Consultants for a long time, if I have my way.\"\n\nPart 19 - Honeybee\n\n\"Mr. C.,\" said Richard Ferrell, sitting behind a console and watching the monitor. \"Agent 'Honeybee' is on the move.\"\n\n\"That's not good, not good at all.\" said Mr. C., coming over and looking. \"She's flying in to the City. We need to interdict her there. At the Airport, before she disappears.\"\n\n\"Yes sir.\" said Ferrell. He fished out his cellphone, a burner, and made a phone call.\n\n* * * * * * * * * * * * * * * *\n\n\"My client wants immunity in exchange for his truthful statement, and testimony in Court.\" said Nathan Masterson.\n\n\"We gotta know it's worth something.\" said ADA Paulina Patterson. \"And we already have you cold, Mr. Saint.\"\n\n\"And speaking of cold,\" I said, \"I am not forgetting finding that little girl nearly frozen to death in that ditch. I'm not much in favor of any deals.\"\n\n\"How about a hypothetical statement?\" asked the lawyer. \"Then you can evaluate it and make us an offer?\" Paulina looked at me.\n\n\"It's your call.\" I said to her. \"I'm not in favor of anything.\"\n\nPaulina said \"Give us some 'hypothetical' names of your partners and backers, and maybe I'll make some kind of offer. But I'm not promising a thing now.\"\n\n\"We need more than that.\" said the lawyer.\n\n\"All right, you idiots.\" I snarled, worn to anger \"Here's the fucking deal. I'll ask three questions, and if you answer them, we may cut a deal on the drug charges and the murder rap. But never, ever, on the child abuse charges. Here are the questions: One: where is Linda? And by that I mean you give us the information to find and arrest her. Two: who were the people selling drugs with you that night? Again, names that leads to an arrest. And three: who was providing the financial backing? And I don't mean the front guys like Morelli. I want the names of your real backers, the people your Gresham & Mason lawyer here doesn't want you to tell us about.\"\n\n\"What?\" snapped Masterson. \"What are you insinuating?\"\n\n\"Those are my terms, Jerry.\" I said. I then got up and said \"Jerry, when you go to prison, it will become well known that you put that little girl outside to die in the cold. And there are two types of people the prisoners really hate: traitors, and child abusers. What they are going to do to your ass, Jerry, is even worse than what happened to Kevin Greeley. Time to choose, Jerry.\"\n\n\"What happened to Kevin?\" asked Jerry Saint to his lawyer, looking confused. The lawyer tried not to answer, but to no avail.\n\n\"He's dead.\" said Paulina coldly. \"Dragged behind a truck after they shoved a crowbar up his ass... literally. And the same thing awaits you in prison. That's not a threat nor an exaggeration. It's the spot-on truth.\"\n\n\"Oh geez.\" said Jerry. I was headed to the door, then heard Saint cry out: \"Wait!\"\n\n* * * * * * * * * * * * * * * *\n\nCIA Agent 'Honeybee' got off the plane and went to get her luggage from Baggage Claim. The man watching her from a distance said into his cellphone \"Got her in sight... on my way.\" He began approaching her from behind, his hand on the thin stiletto knife in his pocket.\n\nBut as he approached, he saw the older woman approach 'Honeybee'. The women hugged, then got her luggage and headed towards the door to the older woman's car.\n\n\"Sir,\" said the man, \"I missed her at the Airport. Someone picked her up. They're on the road.\"\n\n\"Dammit.\" thought Mr. C. as the call disconnected. \"Ferrell, who do you have that can interdict them on the highway?\"\n\n\"I think I still have one contact, in Nextdoor County.\" said Ferrell. He made a phone call.\n\n* * * * * * * * * * * * * * * *\n\n\"He gave you Ferrell.\" said Muscone as he watched the tape of Saint's confession as we sat in my office.\n\n\"Yep.\" I said. \"Ferrell is the go-between, the middleman in all of this. He's the errand boy for the Big Boys. I probably won't get proof he helped murder Jeanine Burke, but we've got him cold for Kevin, and also for Lena and Kate at the club. Ferrell delivered the drugs directly to Jerry. Jerry secretly took iPhone footage of Ferrell bringing in the pills, and he told us where to find the iPhone. We have it now. And we have Ferrell... dead... to... rights.\"\n\n\"Where is Jerry's wife, Linda?\" asked Muscone.\n\n\"Jerry says she was not involved in his drug distributing, and he does not know where she is. She has flown the coop.\" I said. \"Someone helped her get her ankle monitor off of her.\"\n\n\"Ferrell?\" asked Jack. \"He has the tools to do that.\"\n\n\"As do many others.\" I said. \"But I don't understand why... oh, wait just a fucking minute!\" I hurriedly brought up the mugshot of Linda Saint. Then I brought one of Leonard Lotz up beside it... and then superimposed the photos.\n\n\"Jesus Christ, they're related!\" Jack practically shouted.\n\n\"Yep.\" I said. \"Linda Saint is Leonard Lotz's sister, if I don't miss my guess. Someone busted him out of the Asylum, and she was waiting up the road to drive him to safety.\"\n\n\"Is she...\" Jack began, then tried some more. \"What... what is she to all this? And what is Lotz?\"\n\n\"I don't know.\" I said, thoughts crashing in my head at a million miles an hour. \"Is she part of the drug ring, or was she just getting ripped with Jerry... oh wait... no, that can't be it... she is not the one who sprang Lotz, nor the one who brought him to safety...\"\n\n\"Who, then?\" asked Jack, who I could see was totally not following. My train of thought had left the station... and it was an Express.\n\n\"I'm gonna take a wild, wild-ass fucking guess...\" I whispered. \"Leonard Lotz was in the Asylum when 'Kyle Irons' was an orderly there.\"\n\n\"Ned? Your nephew?\" Jack asked incredulously. \n\n\"Yes... oh yes, that fits soooo much better.\" I whispered to myself.\n\n\"What fits?\" Jack asked...\n\n* * * * * * * * * * * * * * * *\n\nThe Nextdoor County Patrol car pulled in behind the car with the two women in it, and turned on his blue lights. The older woman, the driver, pulled over.\n\nThe NCPD Patrolman's gun was unholstered and ready as he approached the car...\n\n*BEEP BEEP!*\n\nAnother NCPD vehicle pulled in behind the first one, and it's blue lights were turned on. Lieutenant Molly Evans got out, along with Detective German. They were wearing relatively heavy armor.\n\n\"What's going on here, Patrolman?\" Lt. Evans asked, with considerable authority in her voice.\n\n\"Traffic stop, ma'am.\" said the Officer. \"Speeding.\"\n\n\"Lieutenant,\" said the older woman in the car, \"we were not speeding at all. We were under the speed limit.\"\n\n\"I believe you.\" Molly said. \"Let them go, Officer.\"\n\n\"Ma'am,\" said the Patrol Officer, \"they were speeding. I have the radar lock.\"\n\n\"I'm sure you do.\" Molly said. \"And I said to let them be on their way. Is there a problem with that?\"\n\n\"Did you not hear the Lieutenant, Officer?\" said Detective German, his voice connoting full reinforcement of Lt. Evans.\n\n\"Yes, I heard.\" said the Officer. \"I stand by my actions and this traffic stop. I think it is a mistake to let them go without a full license check.\"\n\n\"I'll take care of it.\" said Molly. \"Get out of here.\" She and German watched as the Officer got back into his Patrol car and scratched off as he left, obviously pissed off.\n\n\"I'm going to follow you to the County Line... and maybe all the way to your destination.\" Molly said to the women. And she did, until the women were thoroughly wrapped within the blanket of protection provided by the County, and the Troys that ran it... \n\n* * * * * * * * * * * * * * * *\n\n\"My contact was interdicted in Nextdoor County.\" said Richard Ferrell. \"Two other cops, one of them the Vice Lieutenant, came up behind them before he could kill the women.\"\n\n\"You said the Vice Lieutenant?\" asked Mr. C. \"Damn!\"\n\n\"Yes sir\" said Ferrell. \"Lieutenant Evans. Sister of Captain Ross of the TCPD.\"\n\n\"And Honeybee?\" asked Mr. C.\n\n\"Is now very likely safely in the Iron Crowbar's County.\" said Ferrell.\n\n\"Damn, I should've seen this coming.\" said Mr. C. \"We simply didn't have enough time.\"\n\n\"Would you like for me to fix this problem, sir?\" asked Ferrell.\n\n\"Let me think about that... let me think about it...\"\n\n* * * * * * * * * * * * * * * *\n\nAgent 'Honeybee' entered the anteroom and caught her breath at the sight of the beautiful blonde Laurie sitting at the desk.\n\n\"I'm here to see Dr. Fredricson.\" said 'Honeybee'.\n\n\"Do you have an appointment?\" Laurie asked.\n\n\"Oh yes.\" said 'Honeybee'. Laurie buzzed Laura, who told Laurie to admit the woman.\n\n\"Ah, there you are.\" Laura said, coming out from around her desk to hug the other woman. \"How was your trip?\"\n\n\"I think I'm happy you sent someone to meet me at the Airport. There was a creepy guy there, and Gayle arrived just in time. Then we got pulled over in Nextdoor County, but other Police showed up and helped us out. Their Vice Lieutenant Evans.\"\n\n\"Good.\" said Laura. \"Now let's talk about this research assistant job. I think you're going to be perfect for it...\"\n\nPart 20 - The Real World\n\nMonday, March 6th, 10:00pm. Laura Fredricson led the way into the small bedroom at Lashes & Lace, followed by four masked men. They were required to wear the masks in the public rooms, but once inside the small bedroom, they took off their masks. They were Todd Burke, Teddy Franklin, Sean Sanderson, and young Ryan, Marlena's son.\n\n\"Are you boys ready to fuck my brains out?\" the beautiful professor asked with a beautiful smile.\n\n\"We sure are.\" said Todd. \"Ryan, you get to fuck her first.\"\n\n\"Don't mind if I do.\" said young Ryan. He went up to Laura and began undoing her dress...\n\n* * * * * * * * * * * * * * * *\n\nThe woman's hair was now a deeper shade of metallic red with a hint of orange as she was led blindfolded into the room. She was wearing a simple 1940s style dress and high heel black suede pumps which made her shapely legs and feet even more luscious.\n\nOnce in the room, those that had led her in left. She took off the blindfold, and saw the masked man standing there. A full mask that covered his head completely, the mask of one of Rita's Satyrs.\n\n\"It's me, of course.\" I said as I lifted the mask for her to see. She was the prostitute that I'd agreed to fuck in exchange for bringing me to Leonard Lotz.\n\n\"Mmm, good.\" she said. \"I am so looking forward to this.\" I said nothing but went up to her, my mask still on, and began unbuttoning her dress, then letting it fall to the floor around her feet. She stepped out of it, then reached for my pants and opened them, letting them fall to the floor. I was now naked except for the mask, and she quickly removed her bra and panties so that she was naked except for the high heels.\n\n\"Sit down on the bed.\" I ordered. She complied and I came up to her, guiding my hardening cock to her mouth.\n\n\"Mmmm, the Iron Crowbar's cock.\" she said. \"Finally, in my mouth!\" With that, she took my throbbing cock into her mouth and began to suck on it, sliding her pink-lipsticked lips up and down the shaft.\n\n* * * * * * * * * * * * * * * *\n\n\"Ohhhhhhh, yesssssss...\" hissed Laura as the huge cock slowly sank into her until her stud's balls rested against her taint. The young stud began fucking her steadily, building up steam, until he was plunging into her again and again with raw, male power. \n\nHer legs were hooked under the young man's arms, and she simply yielded to him as he humped her. He knew what he was doing, and was pushing his cockshaft up to make contact with her upper vagina, which brought the beautiful woman tremendous sexual pleasure. She moaned and let her hands slide down his sides to his hips and ass, pulling him into her to encourage him to fuck her harder, deeper...\n\n* * * * * * * * * * * * * * * *\n\n\"By the way, what's your name?\" I asked the woman as she slid back onto the bed, and I slid onto her, mounting her.\n\n\"Bambi.\" she said as she reached for my cock.\n\nI teased her a bit by not letting her pull me inside her yet. \"No, the real name.\" I said. \"What's your real name?\"\n\n\"Debbie.\" she said. \"God, I haven't used that name in years.\"\n\n\"Ready for my cock, Debbie?\" I asked, my own hunger to be inside her growing.\n\n\"Oh yessss,\" she said, \"stick that hard cock deep inside me!\"\n\nWe worked together to make it happen. She guided my size into her labes, and then I thrust into her, impaling her cunt on my cock with one long, deep thrust.\n\n\"Oh GOD!\" she gasped out as I drove balls-deep into her until our pelvises smacked har together. As I grinded my loins against hers, using my cock stir her cunt into a hot, creamy lather, she raised her toned, shapely legs and wrapped them tightly around me. The feeling of her heels pressing into my ass fueled my lust as I began pumping into her with a deep, steady rhythm.\n\n\"Oh God, you cock really is as hard as they say it is!\" she gasped as she clutched at my sides.\n\n\"Who is telling you these tales?\" I asked, always curious how these rumors were spreading.\n\n\"Every woman in this County knows you're the Iron Crowbar because of what's between your legs.\" the worldly whore said, her eyes glinting with amusement. \"You have no idea how much pussy you could be getting if you wanted it.\"\n\n\"Your hot pussy is plenty right now.\" I growled. To emphasize my words, I began driving harder and deeper into her. She was watching between our legs and I was seeing the top of her head as we rutted hotly...\n\n* * * * * * * * * * * * * * * *\n\n\"Oh yeah, come inside me!\" Laura gasped as she felt her stud's nut rising. \"Give me your sperm!\" Although she had no ripe egg to be fertilized, Laura loved nothing more than feeling a young man reach the crest and pump his full climax into her. Using her body to give a stud the ultimate pleasure made the beautiful woman reach her own orgasm very easily, and she let the pleasure wash over her as her stud groaned and began firing spurts of potent, virile jism deep inside her... \n\n* * * * * * * * * * * * * * * *\n\nShe was a real pro, I thought as I relentlessly pounded the woman's sopping wet cunt. She was matching my rhythm perfectly, either by instinct or through years of training and experience in sexually pleasuring men for pay. And then I felt a unique shock of pleasure as she reached up and began sucking one of my nipples, then the other one.\n\n\"Damn, you are one smoking hot babe!\" I gasped. This was just a raw fuck, two bodies twining together in hot, steamy lust, but I had to admit that it was a really great fuck. I felt the stirring in my loins and sped up my thrusts.\n\n\"Oh yeah, come in me, baby.\" I heard her say. \"Drop that load deep inside me!\" I felt her tighten her strong legs around me, keeping me deep inside her as I jabbed into her with short thrusts, keeping the length of my meat buried in her steaming wet snatch.\n\n\"Uhhh!\" I gasped as I felt the first jolt of my cock firing my baby batter into Bambi's clutching cunt. \"Oh yeah, that's so fucking good!... so fucking good!\" I shivered violently as more spurts shot into her.\n\n\"Oh yeah, you nutted inside me.\" she said, happiness in her voice. \"Oh yeah...\"\n\n* * * * * * * * * * * * * * * *\n\nLaura was exhausted. Four men had taken turns fucking her, then fucking her again. The second times for all of them had taken much longer, as their first climaxes into her had taken the edges off their lusty young male desires.\n\nAnd she'd had to use a lot of lube, too, she realized, especially when Todd had fucked her the second time. His huge cock felt wonderful inside her, but it really was almost too big for any woman... and she wasn't getting any younger.\n\nStill, she thought, she'd had deep orgasms with every one of the guys, who were really good in the sack. Sean and Ryan were getting better and better, and Teddy and Todd were already confident, experienced studs.\n\n\"That was great, guys.\" she said as she watched them getting dressed. \"You wore me out.\"\n\n\"It was damn good for us, too.\" Todd said, showing his mischievous, brilliant grin.",
        "\"I think you wore us out.\" said Sean. \"You're a Goddess... only a Goddess could take on four guys like us without missing a beat.\"\n\n\"I am your Goddess, and don't ever forget that.\" Laura said with a smile. The four young men could not help but totally agree...\n\n* * * * * * * * * * * * * * * *\n\n\"I've shut down.\" Rita said as Laura and I went up to the front, public bar area. It was barely past midnight. Bambi had been taken, blindfolded, out another way and given a ride home by one of Rita's Satyrs. Laura's four studs had left ahead of us after we'd all had a drink.\n\nCindy was at the bar again. Maybe she was being my bodyguard, or maybe she was a bit lonely and was drinking with her memories. I was sitting at a table, Laura to my right and Rita to my left. I heard the song 'Midnight City' playing in the background. Great song for the night, I thought to myself.\n\nRita continued: \"Monday night is the slowest night of the week. This bar area is open, but I only open the rest of it for special parties booked in advance, like tonight.\"\n\n\"Definitely a special occasion.\" I said. \"Don't you agree, Cindy?\"\n\n\"I guess so.\" Cindy said, a tinge of sadness in her voice. \"I think I need a ride home, though. Can I catch one with you guys?\"\n\n\"Actually,\" I said, \"maybe our friend here can give you a ride.\" I looked over to the entrance to the private bar area. Standing there, in a frilly white blouse, very tight blue jeans, and cork high-heel sandals... was Agent 'Honeybee'.\n\n\"Hello, Cindy.\" she said happily, her smile radiant, her eyes sparkling.\n\n\"Callie!\" Cindy shouted in disbelief as she hopped off the barstool. \"Callie, you're here!\"\n\n\"Hey, baby.\" Callie said, her own eyes beginning to tear up. It was like in the movies: they ran into each other's arms and shared a deep kiss.\n\n\"I tried!\" Callie said, beginning to cry as she and Cindy's foreheads were pressed together. \"I tried to go about my life, but I just can't get you out of my mind! You're all I could think about, night and day...\"\n\n\"I know, I know...\" Cindy said through her own tears. \"I've been the same way.\"\n\n\"I can't fight it anymore.\" Callie said. \"I have to be with you, Cindy... I have to try... I want to be here, with you...\"\n\n\"Let's go home and talk about it.\" Cindy said. Arm in arm, the two lovely blondes headed for the door, waving at us as they went by.\n\n\"Awww, so beautiful.\" Rita said, dabbing away tears in her own eyes.\n\n\"I think you're right, darling.\" Laura said to me. \"I think it's going to work out.\"\n\n\"You get a research assistant that loves sex as much as you do,\" I said, \"and I get a much, much happier Police partner.\"\n\n\"And the whole world a little better for all the love I just felt between them. You did very well on this one. Cop.\" Rita said...\n\nPart 21 - Epilogue\n\n\"Mmm, it feels soooo good being back in your arms.\" Callie whispered. She and Cindy were in Cindy's bed. Cindy was holding Callie, whose magnificent ass was pressed into Cindy's hardbody abs as they lay like spoons.\n\n\"And I'm not letting you out of my arms again.\" Cindy said.\n\n\"I'm going to hold you to that.\" Callie said with her trademark beautiful smile.\n\n\"Good.\" Cindy said sleepily.\n\n\"So how is this going to work?\" Callie said. \"I've still got my porn company in California, I'm a porn star, you're a cop...\" Cindy began laughing, a laugh born of pure happiness.\n\n\"If it is meant to be,\" she said, sighing, \"we will find a way. We will find a way to make it work.\"\n\nCallie looked over her shoulder and into Cindy's ice blue eyes. \"Yes.\" she said. \"Yes. We will.\" She reached back and pulled Cindy's head to her as their mouths met in a deep kiss, full of hunger for love...\n\n* * * * * * * * * * * * * * * *\n\n\"Oh, Commmannderrrrr...\"\n\n\"Yes, Angela?\" I said, still in my dream state, not sure what time it was.\n\n\"Mmmm, that was one hell of a fuck you threw into that prostitute.\" Angela said. I opened my eyes to see the black haired beauty hovering over me, naked of course, her breasts hanging down over my chest. Only the light from the window was coming into the bedroom, and everything was an eerie bluish-black-and-white. \n\n\"Too bad we never got to fuck like that... in your world, my darling Commander...\" Angela whispered, her voice sultry... and taunting.\n\n\"Yeah, too bad.\" I said sleepily. \"Why don't you let me go back to sleep...\"\n\n\"But you are so close, so very close, my beloved Commander...\" Angela said. It felt like she was mounting me on the bed and when I opened my eyes her face was right in mine, her breasts seemingly just scraping my nipples. I could swear I could feel the heat of her black-fringed pussy just over my cock, not quite touching me, as Angela teased me with her luscious body.\n\n\"The answer is right there, Commander.\" Angela whispered. \"Right in front of you. Have you really not considered their name? Superior... Bloodlines?\"\n\nI jolted awake. Angela was gone. It was still dark in the bedroom, but I was seeing in normal color again. Laura was asleep, facing away from me, and the sight of her magnificent ass in the clingy nightgown stirred my loins.\n\nNevertheless, I got up. It was 4:10am. I quickly shaved and showered, then began getting dressed.\n\n\"Where are you going?\" Laura asked sleepily.\n\n\"I've got to go to the office.\" I said, whispering for no real reason. \"I just thought of something. Sorry I woke you.\"\n\n\"Mmm, it's okay.\" Laura said. \"I guess your morning blowjob will have to wait?\"\n\n\"I'll definitely take a raincheck.\" I said. I went over and kissed her forehead. \"I love you.\"\n\n\"I love you.\" Laura said. She had drifted back to sleep before I made it around the end of the bed. I checked on Carole, who was asleep. Bowser was looking at me inquiringly, though. I checked on Jim, who was also sound asleep. Buddy looked up at me, then settled back down as I went down the hall.\n\nAs always when I drove to Police Headquarters in these wee hours of the morning, the Town seemed almost like another world, but a beautiful one: quiet, the streetlamps lighting up Courthouse Square, City Hall, the Courthouse Complex. A light that lit up the statue of President Thomas Jefferson and the American flag on the flagpole right behind him set the perfect mood for me this morning.\n\nI startled the Duty Desk as I came in by the side door and came up behind them. But they were awake and alert as they should be, and they reported no incidents during the night.\n\nGoing to my office, I shut the blinds and drapes over my office window. I opened the whiteboards, and in the dim light of just one lamp I stared at everything I'd written. What was Angela telling me in that all-too-real-feeling dream?\n\nAnd then I saw it. I understood. \n\nI realized what was going on. Millwakee made sense. The sanitarium made sense. George Aurus and Leonard Lotz made sense. And the Federal facility just across the State Line... yes, that had to be it, that had to be what was going on there.\n\nI looked at the composed drawing of the man that I knew was my ultimate nemesis in the lower right hand corner. I understand you now, I thought to myself. I know what you were doing, and what you are doing now. \n\nYou tried to break me with torture... but it is I who will now break you. I am going to destroy you.\n\nI swear it.\n\nFinis."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "hot wife",
        "big cock",
        "gangbang",
        "mystery",
        "police drama",
        "crime drama",
        "blowjob",
        "legs",
        "iron crowbar",
        "creampie"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-other-world-ch-04"
}
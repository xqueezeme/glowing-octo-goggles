{
    "title": "JJ and Ashley Ch. 06",
    "pages": [
        "Thank you for being so patient! I ended up rewriting this about four times until I was pleased with the pacing. Your support means everything to me. Thank you so much! \n\nAnd, thank you Shachar for letting me know someone actually reads my profile!\n\n*****\n\nJJ drove away from Ashley's house with a smile on her face. Who wouldn't, after a night like that? In one day they'd progressed much further than JJ would have dared imagine. The taste of Ashley was still on her lips, her mind replaying the last twenty-four hours.\n\nJJ's good mood continued as she showered, dressed, and gathered up her dirty laundry. She normally hated the mundane chore, but today even that didn't matter. JJ added the detergent and fabric softener bottles to the oversized canvas sailor's bag that served as her hamper and pulled the drawstrings tight. She slipped her laptop and some snacks into her backpack. She filled her pockets with her wallet, phone, and keys, then slipped back outside, bags slung over her shoulder.\n\nShe smiled at the maid pushing her cleaning cart, waved at the tired looking businessman leaving the front office. She hopped back into her truck and drove off to the house, determined to keep having a good day.\n\nPacking up Emily's belongings wasn't bittersweet and emotional the way opening them had been. JJ placed everything back into the trunk carefully, making sure to wrap the delicate things between layers of clothing, the way she'd found them. She latched the footlocker, but didn't put the lock back on. There wasn't any reason to.\n\nJJ pushed the repacked box up against the wall and went to the garage to retrieve the other locker. This one was heavier, much heavier. JJ had to use an old towel to slide the box across the wood floor to keep from scratching up the refinished surface. She finally got it to the bedroom and opened it up.\n\nBooks. No wonder it was so heavy. JJ frowned, dusting off the uneven surface of the books. Mack never read anything but auto magazines. These couldn't be his. Why did he have them? She lifted the cover of 'A Tree Grows in Brooklyn' and read the neat cursive. 'Emily Morrison'. Of course, Mack would keep his wife's books, especially if she'd had an emotional attachment to them.\n\nPulling out her phone JJ text Ashley. 'Hey. Locker just had books in it'.\n\nSetting the phone aside JJ busied herself pulling books out of the locker. There was a large number of classic works, novels, plays, and poetry. There was also quite a few mysteries and romance novels mixed in. She stacked the books against the locker as she pulled them out.\n\nJJ had emptied about half the trunk when her phone buzzed with a new message. She took a break to reach over and snag the phone, reading the text. It was Ashley, 'Didn't take Mack for the literate type. No offense.'\n\nJJ chuckled and replied. 'None taken bc he wasn't. They're Emily's.'\n\nAshley responded quickly, probably waiting for JJ's texts. 'Wow. Anything good?'\n\n'Lots of classics. A couple romances and some mysteries. She had good taste.' JJ snapped a picture of the books all stacked up against the locker and sent the message.\n\nIt took Ashley moment to text back, 'It's an impressive collection.'\n\n'Ya. It's getting added to mine. Want any duplicates?' JJ asked, the idea springing up as she typed.\n\n'Wait, you read?' Ashley's text actually made JJ laugh. She typed back quickly, a little grin on her lips.\n\n'You keep up these jokes Imma tan your hide.' JJ couldn't deny that the idea was a little too appealing. She still couldn't shake the image of Ashley, belly down on a bed with her ass up in the air, offering herself to JJ. It wasn't hard to imagine a rosy hue on those sweet cheeks.\n\nIt took a minute for Ashley to reply, which was long enough that JJ almost started to wonder if she'd gone too far. Soon enough though, her phone buzzed with a new text.\n\n'Only if you can catch me.' Oh, Ashley was smug wasn't she?\n\n'Challenge accepted.' JJ replied, her tummy tightening with a new flash of arousal. She liked this game. She went back to pulling the books from the trunk to distract herself. Her phone buzzing tossed that idea right out the window.\n\n'Accept at your own risk. What'll you let me do if I catch you instead?' Hmm, that was a good question. JJ didn't really intend to let Ashley catch her, but she decided to give Ashley some incentive.\n\n'Anything you wanted.' With a smiley face for flair.\n\n'Hmm. I'll hold you to that.' Ashley replied. JJ read the text with a smile, then slipped her phone back into her pocket. She needed to finish this up and flirting wasn't helping.\n\nHalf an hour later JJ had the locker loaded into the back of her truck and was heading down the street to the laundromat. She parked where she could keep an eye on the truck and hauled her bags inside. The attendant looked up from her magazine, waved, then went back to reading. JJ picked out a machine and loaded it up.\n\nOnce the machine was running JJ sat with a sigh in the chairs and started up her laptop. She had a backlog of emails to work through, having ignored them for the last two weeks. She was picking through, selecting all the junk to delete when her phone rang. That was unusual. JJ pulled the phone out of her pocket and looking at the screen, felt her good mood waver. Her ex-girlfriend calling was rarely good news.\n\nTapping her thumb on the screen, JJ accepted the call. \"Hello?\"\n\n\"Hey, JJ?\" Veronica's warm voice had a hint of hesitation to it, like she'd expected someone else on the other end.\n\n\"Yeah, it's me. What's up?\" JJ asked, clicking another email.\n\n\"I was just calling to see how things were going. I never heard from you, after that last email, so I figured you were busy. I started to worry you'd fallen off the roof or something.\"\n\n\"No, I'm fine. Better find some wood to knock on though, now that you've jinxed me.\" JJ teased, deleting all the junk emails.\n\n\"You don't have a superstitious bone in your body. How's the house? Is now a good time? It sounds loud where you are.\" Veronica probed.\n\n\"The house is good. It'll probably be done by the end of May, way ahead of schedule. I'm at the laundromat. Laundry day.\" JJ opened the email Ronnie had mentioned, scanning the questions, and updates.\n\n\"Well, that's good news, is it?\" There was a pinging sound on Veronica's end, like a directional blinker.\n\n\"Yeah, it is. Are you driving?\" JJ asked, knowing that while Veronica was highly intelligent, she was easily distracted.\n\n\"I am. But don't worry, Monica gave me a headset. I've got to pick Owen up, so this lets me talk and drive at the same time.\"\n\n\"Okay. Well, I'm actually sitting here just now going through emails. I would be happy to get you pictures, if you still want them.\" JJ read the rest of Veronica's email and added, \"How is Owen?\"\n\n\"He's doing well. Growing up so fast, it's a little scary. He asks about you, if you're coming back.\" The way Ronnie made the statement sound like a question told JJ Owen wasn't the only one who wondered.\n\n\"Ronnie, I don't know what I'm doing anymore, to be honest.\" JJ sighed, her mood slipping further.\n\nThere was an awkward silence between them, lasting almost a full minute. Veronica broke it first, hurt evident in her voice.\n\n\"She's there, isn't she? You ran right back to her, even though you said you wouldn't.\"\n\n\"Ronnie, I don't have to explain myself to you. We went our separate ways three years ago. Don't do this.\" JJ knew that Veronica still had feelings for her, feelings that raised an ugly head whenever JJ turned her attention on another woman. She didn't want to deal with them now.\n\n\"You said you were going to avoid anything from your past. You were going to fix up the house and sell it. Then you'd be back. Have you been fucking her for the last two weeks? Is that why you've got laundry and emails to do?\" Ronnie's warm voice had a hard and ugly edge to it, anger and hurt mixing poorly with jealousy.\n\n\"What I've been doing the last two weeks is none of your business.\" JJ fought to stay calm, knowing that if she gave in this phone call would get nasty quickly.\n\n\"Which means you have been. You disgust me sometimes, Jordyn. You never could pass up an eager pussy. I hope she was lousy in bed. I bet she's a little slut, giving it up to anyone who wants her. Spreading her legs for anyone with a dick big enough to make her sloppy pussy feel tight.\"\n\nJJ listened, not even aware of the growl rumbling in her throat. She shot a glance over at the attendant who was still aimlessly flipping through magazines. This needed to be stopped, but JJ preferred to keep this private. She stood, Veronica still ranting in her ear and stepped outside, the bell on the door clanging. She stalked to the side of her truck, and looked around swiftly to be sure no one else was near.\n\n\"You have no idea, Veronica,\" JJ interrupted the tirade, \"You have no idea how ugly you sound right now. You've never met this girl and you're going out of your way to hate her. To put her down, degrade her. How can you think any of this about someone who made my miserable life worth living? Ashley being my friend is the only part of my childhood that I want to remember. She was sweet and caring, looking past everything that other kids used against me, used to single me out. She was the first person to stand up for me and accept me the way that I am. How dare you sit there and say such disgusting things. No.\" JJ stopped Veronica's comment before it was even spoken. \"You claim to care about me, to love me. I don't doubt that, not normally. But right this second, I question everything you've said about caring for me, about wanting the best for me. If you wanted the best for me, then you'd be happy that instead of turning me away for leaving and never communicating, Ashley has been happy to have me back here, back in her life. You'd be happy that I might have a second chance. You know what she meant to me. What she still means to me.\" JJ hissed into the phone, her body rigid with bottled anger.\n\nVeronica was quiet for a moment. \"So you still love her.\" It wasn't a question.\n\n\"I never stopped.\" JJ whispered, swallowing to ease the harshness of her throat.\n\nThere was more silence, then Ronnie sniffled quietly. \"Well, I need to go. I'm about to pick up Owen. I'm sorry JJ.\"\n\nJJ almost laughed. She held it in, though. \"We need to talk, Ronnie. Face to face. Get this shit behind us. I know you don't want to, but it needs to be done. Later. Say hi to Owen for me.\"\n\nJJ listened to the click of the line disconnecting and sighed, tucking her phone away and running fingers through her hair. That was a disaster.\n\nShe walked back inside and switched her loads, ignoring the side-eye the attendant gave her. When the wet clothing was in the dryer and the second load was in the washer JJ sent Ashley a text. 'Skype yet?'. Maybe time with Ashley would return her happy mood.\n\n'Yep. Right now.' Ashley replied seconds later. Shit. She'd said these calls could take a few hours. JJ slumped into the chair and crossed her arms over her chest. She had almost two hours to spend here. Surely by then Ashley would be free. JJ glared at her laptop with its unread emails. She snapped the lid shut and turned to glare at the timer on the washer.\n\nJJ found herself thinking back to when she and Veronica had been together. It had been fantastic at the start. Both of them worked with David as models, Veronica one of his long term girls. He'd paired them up for a shoot and they'd discovered a chemistry on set. They'd taken that and run with it, going out almost every night after shooting and hitting the clubs and bars. It started as a strong friendship but quickly morphed into a physical relationship. The sex had been fun, varied and frequent.\n\nJJ wasn't sure if there was an exact point where things went south, but she remembered the arguments starting off small, over trivial things, then becoming bigger. She knew her avoidance was a big part of their split. Instead of going home she'd begun going out alone, picking up girls and playing around in the bars and on the club dance floor. She never brought any of them home and she never went home with anyone, but Ronnie assumed she had.\n\nThey'd tried to mend things. Had laid all their issues and complaints on the table and sorted out things to work on and ways to improve. Things had gotten better for a while, until Veronica revealed her desire for children. She already had Owen, the son she'd been pregnant with when her husband passed. When she asked JJ about having another, JJ had refused. Parenthood wasn't something she was comfortable with. Owen was only four years old, but she could handle that. Babies, no.\n\nThings between JJ and Veronica had soured dramatically after a week of arguments, talks, and attempts to find a way to compromise. JJ stayed for another eight months, sleeping in the guest bedroom, spending her days with Owen and trying to figure out her life. By then her contract with David was done and she was itching to move on. She ignored that to stay just a little longer with Veronica and Owen, but eventually she could no longer push the urge away.\n\nOwen. JJ hadn't thought about him in a while. He'd be about seven, maybe eight by now. Probably getting tall. And he'd be in school, second grade? Maybe third. JJ sighed. Despite not wanting to be a parent, she'd bonded with the little guy. They became best friends in an instant, all because of one piggy back ride. She had helped Ronnie out with caring for him, but she'd never made an effort to adopt or have any legal attachment. She didn't feel like she'd been a parent to him. More like a best buddy, a coconspirator and playmate.\n\nJJ sighed and combed both hands through her hair. She replayed the entire phone call in her head, trying to figure out how to feel, how this should be handled. Her stomach felt like a weight had been dropped on it when she realized what she'd revealed to Veronica. Did she tell her ex the truth? Did she still love Ashley?\n\nDuh, was the answer her subconscious immediately supplied. Her rational head started making excuses, conditions. She loved the Ashley she'd known, she loved how Ashley was as a person. They'd just had sex that morning, surely these feelings were a result of that. Ashley had been so welcoming and understanding, of course she loved that.\n\nJJ scowled, disgusted with herself. A deep breath settled rattled nerves. Several more wiped her mind clear. She pushed away the conflicting emotions and thoughts. She refused to pick at this cluster fuck any more. You have feelings, good positive feelings, for Ashley. JJ told herself sternly. There's no need to label them. They are not just from the sex, these are deep rooted and solid. Years in the making. No labels. No worrying. Let this continue and go with it. It's what we both want.\n\n***\n\nAshley was washing dinner dishes with her mother when her phone pinged on the counter. She checked the notification out of habit, her breath hitching suddenly when she read JJ's name. Instead of letting it go until the chore was done Ashley stopped drying the plate she held and tapped the envelope icon.\n\n'come dance with me'\n\nAshley smiled. She had already resigned herself to waiting to hear from JJ for a day or two. This was much better, an invitation to go out the same day they'd finally fooled around. Wait, did this mean there would be more playing around?\n\nShe decided to probe. 'Where are we dancing?' she text. It was a safe bet the answer was the club, so Ashley got a head start. \"Mom, do you mind if I head out after these are done?\" Ashley held up the plate she was drying.\n\nDebbie seemed surprised. \"Where you heading out to?\"\n\n\"Dancing with JJ.\" Ashley finished drying the plate and put it away before her phone pinged again. She picked up the last plate and dried it as she read the message.\n\n\"You know I'm not going to force a curfew on you. I expect you to be able to use your judgement. Keep me in the loop though. And be careful.\" Debbie watched Ashley read her new message and nod slowly to show she'd heard.\n\n\"I will. Thank mom.\" Ashley put the plate away, hugged her mother and wandered out of the kitchen, tapping at her phone.\n\nShe left the house twenty minutes later wearing a skirt so short her mom did a double take. Sure enough, JJ was at the club, so Ashley was headed there. She wasn't able to get much more information from JJ, but Ashley figured they'd drink a little and dance a lot. Like last time. Ashley shivered pleasantly at the memory of JJ's body pinning her to the back wall and coaxing an orgasm from her.\n\nIt was a short drive but a long wait. The line was long and the bouncers turned many people away. Ashley started to get nervous but when it was her turn the burly man at the door took one look at the long, lean legs she was showing off and let her in, his head turning to watch her legs as she slipped inside.\n\nThe music assaulted her ears as she entered the club, the long bar to the right full of people. The dance floor was full too, bodies moving and twisting under the flashing lights. Ashley slipped into a small open space at the bar and sent JJ a text. 'I'm here at the bar. Come find me.'\n\nShe sat for a few minutes before one of the bartenders noticed her. He recognized her and gave her a small smile, lifting a beer in her direction. She nodded and gave him a smile when he set the cold bottle on the bar. Her phone pinged, vibrating in her hand. JJ had sent a blank message. Oops.\n\nAshley giggled and turned to study the people lounging at the bar. She had no idea what the other girl was wearing and couldn't spot JJ. The flicker and flash of the lights didn't help either. Ashley leaned away from the bar to study the tables and booths that lined the outer walls. Most of them were full, or had a couple occupants who were probably part of a group. She turned back to the bar and text JJ again. 'Come to the bar.' She took a sip of her beer and scanned the bar's length again.\n\nHands landed on her hips, causing her to yelp and spin around, alarmed. The man sitting next to her with his buds turned too, her yelp cutting through the music. JJ stood behind her, a dopey grin on her face. \"Hey you.\"\n\n\"Oh my God, JJ. What the fuck was that? You scared me.\" Ashley slipped off the bar stool and pulled JJ into a hug.\n\n\"I found you.\" JJ answered, not slurring her words, but clearly drunk. That silly half grin still curled her lips.\n\n\"Yeah, you found me. Let me finish my beer then let's dance. Yeah?\" Ashley asked, rather enjoying the way JJ left her hands on her hips as she situated herself back on the stool.\n\nTurning with bottle in hand to face JJ, Ashley combed back JJ's hair, the dark, damp strands sticking to her sweaty forehead. \"Have you been here long?\" she asked, tipping the bottle to her lips.\n\n\"For a little while. Not too long.\" JJ finally noticed Ashley's skirt, eyeing the short hem before looking up the blonde's slender body, enjoying the skin that was bared by the small halter top. It left Ashley's shoulders bare along with half her flat belly. \"Damn.\" She muttered, her brown eyes wide, pupils blown huge.\n\nAshley polished off her drink, setting the empty on the smooth wood of the bar and tugging JJ closer to make room for another group trying to get drinks. \"You ready to dance?\" she spoke into JJ's ear, her lips bumping the diamond stud that filled one of several holes in the other girl's lobe.\n\n\"Yes.\" JJ agreed, her fingers teasing at the hem of Ashley's skirt. The blonde took JJ's hand in hers and gave a flirty smile before tugging her to follow.\n\nAshley led JJ onto the floor, but the older woman quickly took the lead. She stepped into Ashley's space and began moving fluidly with the music, her body urging Ashley's to do the same.\n\nAshley relaxed and followed JJ's lead. She even tugged JJ's hands from her hips to the exposed skin of her waist, thrilling at the contact. This pulled JJ flush with Ashley's body and emphasized their easy rhythm.",
        "They danced for a while, the fast paced music fueling them both. Ashley found she had forgotten how much fun it was to dance with JJ. It was so easy to relax and follow her lead, match her body and her movement to JJ's.\n\nThey returned to the bar for drinks, Ashley sticking with a beer while JJ downed a few shots of whiskey. Ashley offered JJ her beer as a chaser, amazed the older girl was still standing. JJ didn't take the beer, preferring to stand close and let her hand roam over Ashley's back while the blonde finished her drink. They didn't talk, the music too loud to try carrying on a conversation. It wasn't long before they were back on the dance floor, JJ's hands never leaving Ashley's body.\n\nWarm hands rather blatantly cupping her breasts got Ashley's attention. She looked back over her shoulder, actually bumping her nose into JJ's cheek because the older girl was so close. \"What are you doing?\"\n\n\"Playin' with your yummy tits.\" JJ answered, her eyes on her hands and their bounty.\n\n\"I know that much. I meant why. Why are you doing that?\" Ashley felt silly for asking as soon as the words left her lips.\n\nJJ's answer wasn't verbal. Instead she rolled her hips right up against Ashley's bottom, rubbing something big and hard against Ashley's round cheeks.\n\n\"Oh.\" Ashley gasped, surprised she hadn't noticed the rigid thing in JJ's pants before then. She was also surprised how eagerly her body reacted, delicate flesh swelling and growing damp. That was definitely new and had Ashley arching back for more before she could think about it.\n\nHer eager response got a throaty chuckle and two hands coasting from her breasts down to her hips, holding her new arch and keeping her still for JJ to grind away. One hand came back to guide Ashley's arms up and back around to JJ's neck. This kept the blonde arched and had her leaning into JJ in a more intimate manner.\n\nJJ stroked a hand down the firm length of Ashley's torso, teasing a finger along the low riding waistband of her skirt. She felt the muscles in Ashley's belly quiver as her finger traveled over the soft skin. She wanted to lick that skin. Her mouth filled with saliva at the thought. The pressure of Ashley's ass pressing more firmly into her strap on distracted JJ, her hands finding Ashley's gently curved hips and pulling her even closer. She rubbed herself into Ashley, almost panting in the delicate ear next to her mouth.\n\nAshley lowered a hand to grip JJ's hip, fingers digging into the tight denim. Everything was overwhelming right now. The music's pulsing beat matched her heart, both thundering in her ears. The alcohol was working through her, almost as intoxicating as JJ's touch. She wanted to feel JJ. Her skin, the sweat that she'd worked up dancing. Lick that sweat, feel those muscles strain under her fingers. She wanted to pinch the hard nipples poking her back, explore the larger and much harder thing in JJ's pants. She twitched deep inside and moaned, a need to be filled and stretched overpowering her usual resistance. She tipped her head until she could speak into JJ's ear, lips brushing a small silver hoop as she whispered, \"Take me home and fuck me.\"\n\nJJ groaned and squeezed Ashley's hips tight, almost sure she'd misheard. Not willing to risk it, she pressed a kiss to Ashley's exposed throat, slipped her hand into the blonde's and led her through the weaving bodies and out of the club.\n\nThe outside air was much cooler and JJ shivered as it swept over her. She knew she was in no condition to drive. \"Did you drive here? I'm way too drunk to drive.\" She asked, turning to Ashley who was standing close.\n\n\"Yeah, right over here.\" Ashley led them to her small sedan and after they were both inside and buckled, drove out of the parking lot.\n\nShe drove them down the quiet streets, heading to the motel where JJ was staying. She wasn't ready to have full on sex with her mother home. She was ready for full on sex, that strong urge to be filled deeply still foremost in her mind. Looking over at JJ's lap, Ashley could just make out the bulge at the crotch. Shifting her eyes back to the road Ashley shivered at the tingles that surged through her.\n\nLost in thought Ashley didn't notice when JJ's hand came to rest on her knee. JJ slid her hand slowly up the smooth length of Ashley's thigh, only drawing the blonde's attention when she slipped under the tiny skirt and stroked the lace she found.\n\n\"Hey!\" Ashley giggled and pushed JJ's hand away. She looked over at JJ and caught the smirk the other girl flashed. \"Hands to yourself while I'm driving.\"\n\nWarm breath was the only warning Ashley had before JJ's lips found her shoulder, bared by the slinky halter top. Those lips kissed up along Ashley's shoulder to the curve of her neck. A hot, wet tongue licked up to Ashley's ear. \"JJ.\"\n\n\"Hmm. Ashley.\" JJ whispered in her ear, leaning over so far that the seat belt slipped off her shoulder.\n\nAshley didn't want to push JJ away because she enjoyed the attention. She also couldn't afford to be distracted. \"You're driving me crazy.\" she huffed with another giggle.\n\nJJ's answer was a throaty chuckle that vibrated against Ashley's shoulder. It sent tingles down the blonde's spine and raised goosebumps on her arms.\n\nThankfully JJ just rested her head on Ashley's shoulder for the rest of the ride. Ashley pulled into the Motel 6 parking lot and under JJ's direction, parked in the back lot. She double checked the car was locked before she followed JJ up a narrow flight of stairs and down the outer corridor.\n\nJJ fumbled a little with the keycard, but the door swung open with no problem. Ashley walked in and had time to get an impression of lots of stuff piled about neatly before she was spun around and pushed gently onto the bed, bouncing once before JJ joined her, lying atop her and kissing her hungrily.\n\nHands tunneled into hair, lips slipped and slid, opening for tongues. Bodies arched and pressed, legs fought for positions. Breath was short and loud, hearts raced.\n\nJJ pulled herself away from Ashley's soft lips, skimmed right over her lean torso and flipped the short skirt up and out of her way. A lacy white thong met her eyes, nearly translucent with moisture. She could clearly see the outline of Ashley's plump labia, could see the golden curls held down by the thin fabric. Her hands gently urged Ashley's thighs to open wider, making room for her shoulders as she leaned in, and stopping when her nose was just shy of brushing the wet panties. She looked up Ashley's body to meet blue eyes wide with lust and anticipation.\n\nJJ inhaled deeply, humming happily at the sweet, tangy scent of Ashley's excitement. Her lips nudged against the soaked lace to skim up and down the perfect seam of Ashley's pussy. The shaky moan from above was encouraging. JJ teased Ashley through the thong's fabric, curling her fingers in the tiny waistband when Ashley started panting. She kneeled up to pull the thong away, cooing when the wet fabric stuck for just a moment. Ashley helped slip the panties off her legs, then shyly lowered them, knees together, feet flat on the bed.\n\nDropping the soaked undies to the bed JJ cupped Ashley's knees, stroking down the blonde's lean thighs. \"Nervous?\" she asked, trying to calm her own arousal. She'd had way too much to drink and had this nagging feeling being in bed with Ashley was a bad idea.\n\nAshley blushed, lowering her eyes for a second. \"A little, but I want this. I'm ready to finally have sex.\" She looked up at JJ, who swallowed as she was reminded of Ashley's virginity. That instantly made JJ uneasy.\n\n\"Maybe this should wait?\" JJ knew she'd kick herself later for turning down the sex, but she didn't like this.\n\nAshley's face paled and she sat up, her face forcefully blank. \"Sure. I've waited this long. Why not just wait forever?\" Her sarcasm was tinged with hurt and bitterness.\n\n\"Woah, that's not what I meant. Hey!\" JJ snapped. She had set a hand on Ashley's leg to stop her from getting off the bed and Ashley had kicked out at her, forcing JJ to catch the foot aiming for her. She held tight when Ashley tried to jerk her leg back. JJ pulled the blonde close with a fast motion, Ashley tipping to her back again, their hips flush as JJ leaned over. \"I was going to suggest the actual poking wait. I'm fucking drunk right now. I don't want to hurt you, Ashie.\"\n\nAshley blinked away the tears, scrunching her nose against the burn. Well that wasn't what she expected. \"How come you don't seem drunk?\"\n\nJJ shrugged, releasing Ashley's ankle and massaging where she'd gripped tightly. \"I dunno. I've always been able to hold my liquor. Now, I won't use this on you tonight,\" JJ cupped the bulge in her pants, \"But I am not letting you out of here without fucking.\"\n\nAshley relaxed her legs, letting them fall open completely. \"Do your worst.\" She was relieved, and touched that JJ was concerned about her like this.\n\nJJ laughed and leaned in for a kiss. \"I'm sorry for the confusion. We'll pop that sweet little cherry sometime we're both sober and you're ready.\"\n\nAshley's giggle was cut off with a gasp. JJ's smile was hidden, her face buried in Ashley's neck, tongue and teeth worrying the sensitive skin. She'd found the hickey from just that morning and planned on leaving a few more.\n\nAshley lay beneath JJ, enjoying the way JJ pressed her into the mattress, how their breasts pressed softly. That damn hardness was distracting though. Part of her wanted to tilt her hips and rub against it until she came. She still wanted to be filled, stretched, but JJ's point was valid. Ashley ran her hands down JJ's back, feeling the lingering dampness from sweaty dancing. Wanting to trace her fingers over that hot skin Ashley tugged JJ's shirt out of her jeans, guessing correctly that there was an undershirt beneath the button down.\n\nJJ purred quietly when Ashley ran her hands up her back, fingers bumping over the knots of her spine, palms pushing her skin over muscle and bone. Letting go of Ashley's neck with a popping sound JJ shifted just enough to slip a hand between their bodies and between Ashley's splayed legs. Flipping the skirt back up she cupped Ashley's sex, smiling at the moisture that leaked between the blonde's puffy labia and coated her fingertips.\n\nAshley blushed and focused on JJ's neck while circling her hands around to play with JJ's breasts, automatically pinching lightly at the erect nipples she found.\n\n\"Don't be embarrassed, Ashie. I love how excited you are to be with me.\" JJ kissed Ashley's chin and caught her eyes. \"I can't wait to taste your wet pussy.\" That got her the shy smile she'd been hoping for.\n\nAshley pulled her hands out of JJ's shirt and started working the buttons. \"I want your shirt off first.\"\n\n\"Yes ma'am.\" JJ raised herself up to give Ashley more room to work, then sat back to peel both shirts off. Topless she leaned back over Ashley, who reached for JJ's belt.\n\n\"Hey, I thought we weren't using that.\" JJ questioned, looking down between them, feeling Ashley tug at the snap on her jeans.\n\n\"I want you naked, or at least mostly naked. I've never been completely naked with anyone before. You can leave your undies on, keep that thing restrained. I do kind of like the way it looks.\" Ashley blushed when she admitted the last part, but didn't slow in removing JJ's clothing.\n\n\"Then it sounds like this needs to go.\" JJ moved Ashley's hair aside and opened the fastening on the halter top. Ashley pulled the top off while JJ kicked off her jeans, then turned her attention to the skirt. She found the zipper and soon stripped Ashley of her last covering, tossing the skirt over her shoulder and lowering herself between Ashley's thighs again.\n\nShe took her time, playing with the springy curls and tracing the perfect seam of Ashley's lips. She used her thumbs to gently open Ashley, revealing pale pink flesh liberally coated with Ashley's juices. The blonde's clit was a delicate nub with the tip just peeking out from under its hood. Her inner labia were plump and small, tucked within her outer labia neatly. They framed the absolutely tiny hole that was the entrance to Ashley's body. Yeah, total virgin here. JJ pulled herself closer and pressed a kiss into the dense curls above before nuzzling her lips into Ashley's slick folds.\n\nAshley cooed when she felt JJ's lip touch her. She watched JJ, her nose buried deeply in Ashley's pubes as she used her tongue on Ashley's puss. Gentle licks, broad sweeps from bottom to top, flicks and flutters over her clit, remembering to avoid too much stimulation directly at the tip. Soft little pulls from her lips on Ashley's, almost like she was sucking on the individual folds. Ashley was amazed at how good it felt, oral sex being a new experience. The soft heat of JJ's tongue was both comforting and arousing, probing and nudging her excitement higher. The way her lips tugged at Ashley's folds was completely new and surprisingly tantalizing. Ashley felt that tightening at the base of her spine and whimpered, knowing an orgasm was approaching.\n\nHer whimper caught JJ's attention, her brown eyes so dark that it was almost impossible to distinguish pupil from iris. JJ pulled away enough to bring her hand up, a single finger gently circling Ashley's teeny hole. \"Is this okay?\"\n\nAshley nodded, canting her hips up to JJ. She was eager for the new experience.\n\nJJ slowly slipped her finger inside, pausing at the first knuckle, then continued to the second. Tight, wet heat surrounded her finger and they both groaned. JJ leaned back in and traded her thumb for her mouth again, slurping noisily at Ashley's clit.\n\nAshley gasped for air, panting as everything collided within her, sending pleasure zinging from her toes to her scalp. Her legs shook and her fingers wove themselves into JJ's hair as her back arched. She was hyper aware of JJ's finger inside her as she came, clenching down on the invading digit.\n\nJJ watched Ashley tremble and hump her way through her orgasm. She removed her finger as Ashley began to calm and used gentle, broad sweeps of her tongue to clean the fresh flow of juices seeping from the blonde. She ventured slowly up Ashley's thigh, licking and kissing as she went. A soft tug in her hair made JJ look up.\n\n\"Kiss?\" Ashley asked.\n\nJJ crawled up until she was face to face with the breathless blonde. \"Kiss.\" she whispered before leaning in and kissing Ashley.\n\nAshley brought both hands up to cup JJ's nape, waiting until JJ relaxed into the dancing of their tongues to make her move. She wrapped her leg over JJ's hip and rolled until she was on top, straddling JJ's thighs. She wiggled forward until her mound bumped the huge lump in JJ's briefs.\n\n\"Ha! I win!\" Ashley lifted her hands above her head in victory, her breasts bouncing merrily.\n\nJJ laughed, enjoying the view immensely. \"What are you gonna do now that you're up there?\"\n\nAshley chewed her lip and considered. \"I'm not sure, to be honest.\" She looked JJ up and down, her eyes lingering. \"I am curious what you've got stuffed in here. Can I see?\" Ashley ran a single finger along the bulge stretching JJ's undies.\n\nJJ hesitated for a second before reaching for the waistband. \"You can see. Just no poking, okay?\"\n\n\"Okay\" Ashley curled her fingers into the wide elastic band of JJ's underwear and helped pull them down. JJ guided her to tuck the bunched fabric below a pair of realistic balls attached to an equally realistic dildo, strapped to JJ's groin with a leather harness.\n\n\"It looks so real. I didn't really expect that.\" Ashley touched the dildo's tip, running her finger all around the crown. \"How big is this thing?\"\n\n\"Six and a half inches. Almost three across. This is my favorite to wear in public.\" JJ watched Ashley stroke up and down the fake cock's shaft, wishing she could really feel it, not just the muted pressure on her clit.\n\n\"So you have others?\" Ashley asked, captivated by the toy. She squeezed it, pinched and bent it around to test its flexibility.\n\n\"Yeah. None are smaller than six inches, but a couple are thinner than this one. The rest are longer, but just as thick.\" JJ answered, her hands caressing Ashley's thighs. She couldn't stop herself from touching Ashley. It felt good. It felt right to have that small intimacy of touch.\n\n\"How long is your biggest one?\" Ashley tugged sharply at the dildo, pleased to see JJ lift her hips as if it really was her own. She was happy the toy didn't come loose.\n\n\"Um, I think I went as far as nine and a quarter. Ten just seemed ridiculous. Over compensation\" JJ cupped Ashley's hand and pressed more firmly into the base on the next down stroke. Ashley seemed to understand the connection when JJ moaned.\n\n\"Can you come from this? Just my hand?\" Ashley asked, adding that extra pressure each time.\n\n\"Yes and no. We'd need lube to actually get your hand moving fast enough, so it's not going to happen tonight. Otherwise, yes I can.\" JJ ignored the goosebumps that broke out when Ashley plucked at one of her rigid nipples. She was more caught up with the way Ashley's fine blonde eyebrow had arched.\n\nShe never had a chance to ask what Ashley was thinking. Ashley scooted back and swiftly dropped her head, mouth open wide, and took half of JJ's cock in her mouth, bobbing wetly.\n\nAll of JJ's breath left her in a rough exhale. That was not something she'd expected. Neither was Ashley patiently letting her saliva drip down the dry shaft only to smear it about with the hand she'd left at the base. When Ashley kept going, swallowing the rest of JJ's cock with frightening ease, JJ couldn't resist the urge to thrust. Her abdomen bumped Ashley's nose once before JJ caught herself. \"Ohmygod, Ashie. The fuck are you doing?\"\n\nAshley let JJ pull her head up, showing off the strand of drool hanging between her lips and the toy. She swallowed and smirked. \"I think you know.\"\n\nJJ waved Ashley sarcasm aside. \"Where the hell did you learn that? No gagging? Come on.\"\n\nAshley's blush was bright red and sudden. \"Long story. The cliff notes version is that a boy and I were experimenting and things progressed further than we anticipated. Found out I have no gag reflex, among other things.\"\n\n\"Long version. Please.\" JJ sat halfway up only to be pushed down again.\n\n\"Maybe later.\" Ashley toyed with JJ's nipples some more, her arms stretched above her head as she nuzzled at the wet cock standing proudly from JJ's groin. It wasn't long before she took it back in her mouth, bobbing swiftly.\n\nJJ could only lay back and enjoy the visual. Between Ashley's fingers twisting and pulling at her nipples and the more pronounced pressure on her excited little clit JJ wasn't about to move. This was heaven right now. Her fuzzy brain brought up the image of Ashley waiting, ass up and head down, to be fucked. JJ closed her eyes and gave up. She could imagine walking up, grabbing those sweet hips and plunging her cock inside. Or maybe she would kneel and worship the plump, wet pussy being offered. Once she had Ashley trembling and begging for more, she would rise and fuck her.\n\nJJ's orgasm caught them both by surprise. Her body locked up suddenly, her hips surging upward and forcing her cock deep into Ashley's throat. Ashley swallowed a second later, her eyes filling with involuntary tears. JJ saw them but couldn't relax yet. A low keening sound rattled her throat as black dotted her vision.\n\nAshley let the dildo slip out of her throat as JJ slowly relaxed, her eyes unfocused. She raised her head and wiped her chin. \"You okay there?\" she asked, rubbing JJ's thigh soothingly.\n\n\"Mm fine. I'm fine. You okay?\" JJ sat up and pulled Ashley into her lap after tucking the dildo back into her briefs.\n\n\"Yeah, I'm good. Might have a sore throat tomorrow morning. It's been a while.\" The blush that spread across Ashley's cheekbones made JJ smile.\n\n\"Not gonna lie, I'm mostly happy to hear that.\" JJ admitted, wrapping her arms around the blonde.",
        "Ashley poked JJ sharply. \"Don't be gross.\"\n\n\"What? I'm not being gross. I'm happy you haven't been blowing the entire football team while you're away at school. That's all.\" JJ struggled to keep an innocent expression under Ashley's glare.\n\n\"Football players were never really my type.\" Ashley used a single fingertip to trace the lines on JJ's shoulder, ink camouflaging but not hiding the delineation of muscles. The delicate twisting lines ended in hooks that curled over JJ's shoulder.\n\n\"Oh, you don't say? Then what is your type?\" JJ flicked her tongue in the v of Ashley's collarbone.\n\n\"Hmm. Basketball players.\"\n\nJJ felt her heart trip in her chest. She'd been a basketball player in grade school and high school while she'd been there. She didn't know if that was what Ashley was referring to though. \"So you like 'em tall then.\" JJ mused, resting her head on Ashley's shoulder. Her eyes were finally too heavy to keep open. They'd been losing the fight to close for too long.\n\n\"Not really. I like the short basketball players. They have more heart and spirit for the game.\" Ashley could feel JJ's body relaxing. \"Mind being the little spoon?\"\n\n\"Nope.\" JJ laid back, her eyes still closed when her head found the pillow. She rolled and wiggled back into Ashley when the young blonde curled herself in close. JJ sighed heavily and was asleep within minutes.\n\nIt took Ashley a little while longer to settle down, but she soon followed JJ.\n\n***\n\nAshley was instantly awake, a quiet voice speaking catching her attention.\n\n\"I'm sorry things are so crazy right now bud... anytime you need to talk...haha, yeah...okay...keep up those grades and take care of your mom...love you. Bye.\"\n\nAshley had already figured out that she was in JJ's hotel room, and in her bed, when JJ hung up the phone. She lay still, watching JJ sit at the foot of the bed, her head bowed. Ashley rolled to her back, letting the sheet slip down. \"Hey. You okay?\"\n\nJJ tensed, the muscles in her back flexing as she turned around. \"Yeah, I'm fine. Morning sleepyhead.\" Her smile was genuine but didn't quite reach her eyes.\n\nIt didn't feel right to pry so Ashley let her curiosity go for the moment, smiling shyly at JJ. \"Morning.\"\n\n\"I'm sorry if i woke you. I was hoping I could snuggle back in.\" JJ turned fully and crawled back up the bed, still naked but for those damn briefs.\n\n\"Snuggle please!\" Ashley lifted the covers for JJ who crawled inside and pressed close. \"Omg you're freezing!\" Ashley gasped, trying to get away but trapped under the blankets.\n\n\"I know. Help me warm back up.\" JJ wrapped and arm and leg around Ashley, hugging their bodies close.\n\n\"You're mean.\" Ashley groused, out of escape routes.\n\n\"Would breakfast make up for it?\" JJ's mouth was right next to Ashley's ear and her warm breath tickled.\n\n\"Breakfast would. What time is it?\" Ashley asked, unable to look at the clock on the far bedside.\n\n\"Ungodly early.\" JJ sighed, half hoping they could play some more.\n\n\"Then hows about we shower and beat the morning rush? I'm sure there are plenty of naughty things you could teach me to do in the shower.\"\n\nThat ended up being a perfect way to brighten JJ's mood. By the time they stepped back out of the bathroom Ashley had learned the ins and outs of eating JJ's delectable pussy. She'd been quick to learn and rather successful, bringing the older girl to three orgasms. JJ had returned the favor and Ashley wasn't sure she'd be able to walk given how her legs were trembling.\n\n\"You can borrow some clothes if you don't want to do a walk of shame to breakfast.\" JJ offered, eyeing the tiny skirt that had landed on the circular table.\n\n\"That would be nice, actually. Thank you.\" Ashley kissed JJ's cheek and waited while she pulled out some selections.\n\nAshley decided to wear a pair of blue mesh athletic shorts and a soft grey tee that smelled like JJ. She skipped underwear, enjoying teasing JJ with that bit of information.\n\nJJ didn't seem phased, running down to Ashley's car to retrieve her extra pair of running shoes and light jacket.\n\nWhen they were both presentable Ashley drove them to Al's Diner, chatting the whole way there about the group call with the girls. \n\nThe waitress recognized JJ and gave both girls a friendly smile, making chipper small talk as she seated them and got their coffee. Al came out from the kitchens to take their orders, going so far as to ruffle JJ's hair with one huge hand before disappearing again.\n\nAshley waited until JJ had sipped at her coffee before beginning her questions. \"So, who was on the phone this morning? You seemed pretty bummed when you hung up.\"\n\nFrom the way JJ's entire body slumped Ashley knew this was a tough topic. \"It was my ex-girlfriend's son, Owen. She called me yesterday, rather out of the blue. It didn't really end well and he called me to see if I knew how he could help.\"\n\nWell, that wasn't what Ashley was expecting. JJ's ex called her? Was this something that happened often? And there was a child involved. What was going on here?\n\nAshley was debating whether to let the subject drop or keep asking questions when JJ sighed and began explaining.\n\n\"Veronica and I dated while I worked with David Billington. She's got a long term contract with him, and has worked with him for years. They basically made each other famous. Anyways, we dated for a couple years before going our separate ways. At the time it was very much mutual and we were able to stay friends, as such. She wasn't thrilled about me coming back here, but she was still supportive. I'd been emailing her little updates and when I stopped, she got worried and called. It was all going just fine until she asked when I was coming back to San Francisco. I told her I didn't know what I was doing anymore and she pretty much flew off the handle. I snapped back and she sounded like she was crying when she hung up.\" JJ hadn't looked up from her coffee the entire time she spoke and she still kept her head down.\n\n\"So everything's a mess now, but maybe not for any real reason?\" Ashley surmised, trying to guess at what JJ was glossing over.\n\n\"Pretty much. Ronnie had been picking Owen up when she hung up, and he ended up seeing the water works. He's only seven or eight and pretty sensitive when it comes to his mother's well-being.\" JJ set her coffee cup aside and dropped her head into her hands. \"It's a fucking mess and I don't want to get mixed up in it, but I already kind of am.\"\n\nAshley was glad for the momentary distraction of their food arriving. It gave her a minute to think. \"Well, have you decided what you're doing with the house yet? You were planning on selling, right?\"\n\n\"I had been. I'm starting to second guess that decision.\" JJ busied herself sprinkling salt and pepper on her eggs and hash browns, missing Ashley's look. \n\n\"You're thinking about staying?\" Ashley kept her voice even. She wanted JJ to stay. Wanted to have her all for her own. She knew if JJ stayed because of her and not by her own choice, everything they had would fester and die. \n\n\"Yeah. I expected this town to be the same as when I left. Things have changed but it might also just be that I'm no longer a child who feels like she's being held prisoner. I want to keep the house. Turn it into a happy home like my parents planned to.\" JJ finally looked up, a light blush barely visible. \n\n\"I think that's a great idea.\" Ashley gave JJ a smile sensing that JJ was worried about how her plan would come across. \n\nJJ didn't look reassured. She frowned and went back to her food, picking at it before eating in a mechanical manner. \n\n\"What else is bothering you? And don't tell me you're fine. I know you too well to fall for that.\" Ashley set her fork down and crossed her arms over her chest. \n\n\"Not now, Ashie.\" JJ shoved another bite of eggy hash brown into her mouth. She didn't want to bring up what she'd told Veronica. How could she be sure Ashley felt the same way? Had she held onto their childhood love and allowed it to grow as she had? It was an uncomfortable feeling, being in love with someone and unable to say it for fear of rejection. While rejection was nothing new to JJ, no one had ever meant as much to her as Ashley. JJ wasn't sure she could stand it if Ashley didn't want her. \n\n\"Then you tell me when. Relationships can't work if there's no communication.\" Ashley pulled out her phone to check the time. She and Brenda were carpooling back to campus that afternoon and she couldn't be late.\n\n\"You want a relationship?\" JJ asked, swallowing too soon so she could speak. Her question got her an incredulous look.\n\n\"I wouldn't have gotten in bed with you if I didn't. I thought that much was obvious.\" Ashley raised her eyebrows in a worried look.\n\n\"Oh. I guess that was obvious.\" JJ reconsidered. She shook her head to clear the funk that Veronica's call had caused. \"I'm sorry. I think that phone call got to me. She...she wasn't her usual, sweet self.\"\n\nAshley reached across the table to squeeze JJ's hand. \"It's okay. Happens to us all.\"\n\nJJ turned her hand to link their fingers. \"A relationship. That's what you want. Correct?\" she clarified. Maybe there wasn't anything to fear. \n\nAshley nodded, with enough eye contact to tell JJ she was unsure about how this was going over. JJ couldn't keep a small grin from growing. \"That's good then. I want the same thing. I know we talked about this a little bit Friday, giving in to our connection. I wasn't going to assume you meant a real relationship, something exclusive. That never ended well before.\" JJ added defensively when Ashley narrowed her eyes. \n\n\"So long as you remember I'm not one of the girls from your past, we'll be good. I don't do one night stands, I don't do walks of shame. We talk about it if something is bothering you. I'll probably keep one of your sweatshirts to take back to school. And I can't wait to see where our connection, this intense chemistry takes us.\" Ashley kept a stern expression until JJ blinked and nodded. She scooted from her booth to JJ's, pushing the older girl into the corner to kiss her soundly. \n\nIt didn't take long for JJ's fingers to sink into Ashley's wild curls, cradling her head. When she swiped her tongue across Ashley's bottom lip Ashley opened her mouth right away, her tongue greeting JJ's eagerly. It was a simple kiss, but it still made both of them forgetting they were in a public place until someone cleared their throat. \n\nJJ looked up over Ashley's head at the waitress, smiling broadly. \"Yes?\"\n\n\"I was going to ask if I could get you ladies anything else, but it looks like you're doing just fine. I'll leave you to it.\" The waitress's cheeks were a touch rosy when she winked at them before moving on. \n\nAshley giggled into JJ's shoulder and dropped a kiss on her cheek before moving back to her booth. \"I've never done that before.\" \n\n\"Kissed in a restaurant? Or gotten caught?\" JJ asked, licking her lips to catch another taste of Ashley.\n\n\"Both actually. You might be a bad influence on me.\" Ashley's grin made it clear she didn't find this to be a bad thing. \n\nJJ chuckled and picked up her knife to spread the mostly melted butter on her toast. \"I'll do my best to corrupt you slowly, so you don't realize it. Now, I remember you talking last night about your little skype call thing. How did that go?\"\n\nAshley filled JJ in, pulling her phone out to show her the calendar dates for their adventures. \"The girls all want you to come too. We're camping first, then doing stuff around town. You down for that?\" \n\n\"If it's going to be anything like summer vacations when we were kids, then hell yes.\" JJ used her toast to push the last of her eggs and hash browns onto her fork and into her mouth. \n\n\"Count on that, but with booze and a few raunchy stories thrown in, courtesy of Chloe.\" Ashley warned.\n\n\"Even better. Who doesn't like a good nasty story along with their liquor?\" JJ asked, playfully sarcastic.\n\n\"Sarah. She blushes and covers her ears when Chloe starts up. We try to get her to wait until Sarah has passed out for the night. It doesn't always work out well.\" Ashley pushed her empty plate away and sipped at the last of her coffee. \n\n\"I can imagine. Let them know I plan on being there.\" JJ set her plate on top of Ashley's and downed the dregs in her cup."
    ],
    "authorname": "DarkFang",
    "tags": [
        "lesbian",
        "lesbian sex"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/jj-and-ashley-ch-06"
}
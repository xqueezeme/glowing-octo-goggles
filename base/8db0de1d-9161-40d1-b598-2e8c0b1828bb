{
    "title": "Rim Fire",
    "pages": [
        "When the last report faded, Rick put his rifle down on the shooting stand and walked out to the target. It was an excellent grouping, all in the bullseye. He hung another target, and then headed back to the shooting stand.\n\nA couple of minutes later, he was retrieving yet another excellent target. If he could perform that well in the competition the following weekend, he stood a good chance of winning. Roy letting him come over to practice whenever he wanted was paying off.\n\nHe heard the back door open, turned to see his friend's little sister Gina strutting toward him, and quickly looked away. She had developed a crush on him years ago, and had flirted outrageously with him ever since. In the last couple of months, it had become increasingly difficult to ignore, as she'd pulled out all the stops when she turned eighteen.\n\nShe was hot as hell, and the rumor mill said she was incredible in bed, but she was his best friend's sister. She was strictly off limits.\n\n\"I knew it was you when I heard the gunshots,\" she said as she approached.\n\nRick picked up his ammo box, stuffed it in a bag, and said, \"Sorry. Just leaving. Didn't know anybody was home.\"\n\n\"No need to leave on my account,\" she said while stepping directly into his field of vision.\n\nHer t-shirt was straining to contain her tits &mdash; which were a little more than a handful &mdash; and there was no way she was wearing a bra. Her nipples were visibly poking at the material. The shorts she was wearing barely covered her panties.\n\nIf she was wearing any.\n\nRick tore his eyes away from her well displayed assets and concentrated on putting his rifle in the case.\n\n\"Are those rimfire cartridges?\" she asked, putting weird emphasis on the word rim.\n\n\"Yeah.\" he answered, wondering what she was up to.\n\n\"Thought so,\" she said with a knowing, and oddly sultry tone. \"So, I hear you're single. Finally got rid of that Thot, Jamie.\"\n\nConsidering he'd found out she was fucking some other guy, he could hardly argue with the description of his ex. \"Yeah,\" he said, continuing to pack up.\n\n\"Me too. We could fix that, you know?\"\n\nHere we go. \"Not happening, Gina. You're my best friend's little sister.\"\n\n\"Not that little, anymore,\" she said, and emphasized it by lifting and pushing her breasts together.\n\n\"Jesus. Cut it out,\" he said as he &mdash; somewhat reluctantly &mdash; looked away.\n\n\"I don't think you want me to.\"\n\n\"Yes, I do,\" he said, and he meant it. The sight had started blood rushing down below, and that was the last thing he needed.\n\n\"You know, I heard something about you...\"\n\n\"Yeah, whatever,\" he muttered.\n\n\"Jamie's been running around telling all her friends that you're nasty, and wanted her to lick your ass.\"\n\nRick froze in the process of picking up his gun case to hoist it over his shoulder. \"She what?\"\n\n\"Uh huh. Said you wanted her to rim you, and wanted to do her up the butt. For a Ho, she sure is stuck up about sex.\"\n\n\"Fuck,\" he muttered, knowing that was likely to reduce his relationship prospects.\n\n\"Right here? Right now? Sure,\" she said.\n\n\"That's not what I was saying, and you know it.\"\n\nShe laughed. \"Too bad. I'd rim you in a heartbeat. I love it. I bet I could make you come bucketloads.\"\n\nHearing that finished what her boob juggling had started. He clenched his teeth as his cock hardened.\n\n\"Okay, I'm going,\" he said. He hefted his rifle over his shoulder and picked up his bag.\n\n\"I'm serious. I'd eat that booty like groceries,\" she said, and then stuck out her tongue to wiggle it.\n\n\"Jesus, Gina,\" he said as he walked away.\n\n\"You know you want it,\" she called after him.\n\nShe was right, as little as he wanted to admit it. He ignored her, and made a point not to look back. The last time he'd done that, she was flashing her tits at him. He could almost see them, with her hard nipples pointing at him like a pair of accusatory fingers. He could feel it, and knew almost for certain that she had her tits out.\n\nHe stared straight ahead until he turned the corner to the front of the house, and then made a beeline to his truck. He kept his vision locked in front of him as he drove away as well, because he wouldn't put it past her to be frolicking around in the yard completely naked.\n\nHe was about to pull out of the end of the lane when he heard his phone sound off. He glanced at it to see a notification from a local number that read, \"Guess who got your number?\"\n\nHe flipped the phone upside down and ignored several more message alerts on the way home. Once back at the house, he slid it into his pocket without looking, and put his gun away. Only then did he pull out the phone again.\n\nHe tapped through to delete the messages, but his finger froze when he saw the photos she'd sent. The first was a tits-out selfie, and that was immediately followed by one with her shorts and panties pulled down &mdash; stretched between her thighs. Though the preview images were small, it was obvious that she shaved her pussy bare. The last one was a close-up of her licking her lips. Then there was a message that said, \"Anytime. You have my number now.\"\n\nThat was followed by a kiss mark emoji, one with a tongue sticking out, a peach, an eggplant, and a splash.\n\nThough he resisted the urge for a few seconds, he had to click on the messages and see the full sized images before deleting them &mdash; starting with her pussy. He'd seen her tits in person a couple of times, but that previously unseen, bare-shaven cleft was something he couldn't just delete without looking once.\n\nDamn, I wish she wasn't Roy's sister, he thought as he drank in the sight of that delicious looking little pussy.\n\nHe had just closed the image when she sent him another message. \"Like them?\"\n\nThat was when it hit him that he'd never turned off read receipts. His ex-girlfriend had made him turn it on &mdash; which should have been a warning sign &mdash; and he'd never turned it off. Now, Gina knew that he'd looked at her naked pictures.\n\nRick immediately changed the setting, silently cursing his forgetfulness, and the bitch who had created the problem. He'd barely closed the settings screen when Gina sent him another photo.\n\nHe knew what her bed looked like, and she was lying on it with her legs spread wide, and two fingers parting her pussy lips. At least she wouldn't know for sure that he'd looked when he opened the full-size image. She was visibly wet.\n\nSteeling his will, he deleted the entire conversation. Having those pics on his phone was going to be more temptation than he could manage. He put the phone on the charger, and went to take a shower &mdash; a cold one.\n\nShe obviously wasn't done. She sent four more messages while he was in the shower. He swiped the notification away without looking, hoping that she'd give up without a response. Then he got dressed to head out for the evening. Fortunately, Roy was at work, because he didn't know if he could have faced his friend after looking at his sister's pussy.\n\nTo his relief, no more messages arrived from Gina after that. When he came home, he got ready for bed, and opened up the conversation to delete her new messages.\n\nOnce again, he couldn't avoid looking. She'd sent a photo of her naked on the bed, with three fingers buried in her little eighteen-year-old pussy. A second showed her licking her slick fingers. If the flush in her cheeks was any indication, she'd made herself come before taking the picture. A final picture showed her from her sloppy, finger-banged pussy up to her tongue sticking out.\n\n\"Anytime,\" the final message read.\n\nHe stared at that third image for a while. He was as hard as a steel bar in nothing flat. There was no avoiding it. He reached under the bed, grabbed a box of tissues, a bottle of lotion, and allowed himself to surrender at least that far to the temptation.\n\n****\n\nRick was finally about to get up after hitting snooze three times when he heard the message alert go off on his phone. He picked it up with half of him hoping it was more pictures from Gina, and the other half praying it wasn't.\n\nThe message was from Roy and said, \"Where are the targets?\"\n\nHe had completely forgotten in his haste to escape Gina. He always left the targets so Roy could try his hand at beating Rick's performance.\n\n\"Forgot. I'll leave them next time I come out,\" he responded.\n\n\"After work this afternoon?\"\n\n\"Is your sister going to be there? If yes, then no.\"\n\n\"LOL She fucking with you again?\"\n\nTrying desperately, he thought. \"Yeah. That's why I forgot to leave the targets.\"\n\n\"I'll tell her to lay off again. I'd tell you to wait until I get home, but it will be after dark.\"\n\n\"May head to the range.\"\n\n\"Look for her car as you go by. If it's gone, you should be safe. Mom and Dad are going out of town for a couple of days, so she's probably going to go out and get drunk.\"\n\n\"Thanks. I'll check.\"\n\n\"Targets,\" Roy reminded him.\n\n\"I won't forget.\"\n\nRick swung his legs out of bed. When he saw the tissues and lotion still sitting on the nightstand, he quickly tossed them under the bed, and pointedly ignored the cum-soaked tissues in the wastebasket. He knew he should delete the pictures of Gina, but couldn't bring himself to do it. He'd gone off like a volcano imagining her rimming him while looking at those naked pics.\n\nThinking about her had him growing hard again. He popped out of the bed and headed for the shower. Fortunately, he had to work, and that would certainly take his mind off his friend's little minx of a sister.\n\nAs he returned from work, he glanced toward Roy's house, and didn't see Gina's car there. That prompted him to slow down before the driveway when he was headed out to shoot. Upon seeing her car still wasn't there, he turned in to save the money he would have spent to use the range.\n\nNot long after, he had four targets even better than the ones from the day before. Upon putting up his gun, he took the two days worth of targets over to the shed where he left them for Roy. His friend was a good shot as well, but the four new targets were some of his best ever.\n\nFeeling pleased with himself, he headed for the truck. As he finished stowing his rifle, he was surprised to hear the door to the house open.\n\nShit, he thought as he turned and saw Gina coming down the stairs.\n\nHis friend's sister had a reddish-pink ribbon in her hair with a deceptively innocent-looking bow. She was wearing a little spaghetti-string top that cut off just below her boobs, and must have been made of gauze. Her pleated skirt was so short that he was amazed she wasn't flashing him with every step she took.\n\nAs if that thought was a premonition, she grabbed the front of her skirt and pulled it up as she reached the bottom of the stairs. He was hardly surprised to see that she wasn't wearing any panties. She laughed as he looked away &mdash; fighting the rapid tightening of his jeans.\n\n\"So, what did you think?\"\n\n\"I think you need to stop sending me selfies,\" he said while climbing into the truck.\n\nGina picked up her pace &mdash; setting her boobs to bouncing in his peripheral vision &mdash; and got in the way before he could close the door.\n\n\"Oh, come on. I bet you jerked it to them,\" she said. Something in his expression must have given it away, because she gasped and said, \"Oh my god. You did.\" Then she let out an incredibly sexy moan.\n\n\"Just stop it, Gina,\" Rick said. \"Get out of the way so I can close the door.\"\n\n\"You did, didn't you? Did you come hard? I know I did when I was taking them for you.\"\n\n\"No.\"\n\n\"Liar. I bet you're hard right now.\"\n\nShe caught him completely off-guard when she reached between his legs and squeezed his erection. It was an escalation of her seduction campaign far beyond what he would have expected, and he froze in shock.\n\n\"Oh my god,\" she exclaimed as she squeezed and rubbed his cock. \"It's so fucking big.\"\n\nRick finally snapped out of his stunned disbelief, grabbed her wrist, and pulled her hand out of his crotch. \"Cut it out.\"\n\nShe promptly avoided a hasty, warding swat and grabbed his dick with her other hand.\n\n\"My brother will never find out,\" she said as she leaned into the truck, letting him smell her perfume. \"I want to lick that ass and make you come everywhere. I know you want it.\" At the same time, she yanked on the arm he was gripping, pulling the back of his hand against her firm, young breasts.\n\nThe next thing he knew, her tongue was flicking rapidly in his ear. His cock throbbed powerfully in her grasp as he imagined that tongue in his ass, and he lost the battle. He let go of her wrist, filled his hand with her breast, and groaned.\n\n\"Come on,\" she whispered into his moistened ear.\n\nGina pulled away, straightened, and turned toward the house. She grabbed the back of her skirt and lifted it to reveal her tight little ass. Then she looked over her shoulder and flicked her tongue at him again. He stepped down out of the truck as if drawn inexorably toward her by pure sexual gravity. She giggled and continued toward the house with her bare ass swaying.\n\nRick caught up to her and grabbed that eighteen-year-old ass, which drew a moan from her. When she paused to open the door, his hand moved seemingly of its own accord along the curve of her buttocks, and between her legs. A finger slipped between her nether lips to find an abundance of warm wetness. That made her whimper as she stepped inside.\n\nIt was his turn to pause in order to close the door behind him, allowing her to get a couple of steps ahead of him. She negligently lifted her tiny, gauzy top, pulled it over her head, and tossed it on the back of the couch as she passed. Rick once again caught up and ran a fingertip over her stiff nipple.\n\n\"Mmm hmm,\" she moaned, and brushed her fingers over his hardness.\n\nThe moment they stepped into her bedroom, Gina pushed her skirt over her hips, and let it pool around her ankles. While she stepped out of it, Rick pulled off his shirt, and then she kicked off her sandals. She grabbed a belt loop, drew him toward the bed, and then playfully pushed him down on it.\n\nGina moaned and ran her hands over her body, ending with a caress between her legs. Then she slipped a hand beneath his leg, instructing him to lift it. She caught his heel, and untied his shoe with a quick tug. It bounced a couple of times when she tossed it to the floor. His sock followed, and then the other shoe and sock. Then she pushed on his chest.\n\nRick leaned back onto his elbows, drinking in the sight of her forbidden, young body as she reached for the button of his jeans. She popped it open, and then tore down his zipper. A second later, he lifted his butt so she could yank down his jeans and boxers. She gasped when his cock sprang free, and tugged even more tenaciously on the denim.\n\nFinally, his legs were free, and he was as naked as her. She reached out and caressed his bouncing member with one soft hand. In a voice just above a whisper, she said, \"If I'd known it was this big, I'd have wanted you even more.\"\n\nWith that, she looked deep into his eyes, offered a sultry, mischievous smile, and sank to her knees on the floor next to the bed. At her prompting, he lifted his feet up onto the mattress. Her hands settled on his butt, and she leaned in.\n\nRick grunted and his back arched when her slippery tongue washed over his puckered opening. His cock twitched up high, dropped down, and almost immediately shot back up several times as she lapped his ass.\n\n\"Feel good?\" she asked between licks.\n\n\"Fuck yes.\"\n\nGina moaned and swirled her tongue around the circumference before giving him several quick flicks.\n\nOnly one other girl had ever rimmed him, and that had been a drunken hookup. Whether it was sobriety, the danger of his best friend's sister doing it, or just plain talent, that past experience paled mightily in comparison to Gina's wonderful tongue.\n\nOne hand left his butt and began to caress his hardness with feather-light touches. She reacted almost instantly every time his cock throbbed, trying to press harder against her fingers, keeping the pressure light. All the while her tongue flicked and lapped at his ass.\n\nShe was in no hurry. Rick had never experienced such sweet torment as she took her time licking, stroking his cock, and mildly probing his back door. She moaned in delight, and sometimes giggled when his grunts and groans amused her. Just when he was teetering on the edge of frustration &mdash; needing more &mdash; she would provide it. Her tongue would press hard, penetrating him, or flick rapidly over the puckered opening. She would stroke the head of his cock with her thumb a half dozen times, and then move back to gliding her fingers over his turgid flesh.\n\nHis pleasure built slowly &mdash; and sharply. It reminded him very much of when girls would edge him, letting him almost reach orgasm, and then denying him. The sensation had that same bite, but was growing ever stronger. His teeth clenched, and his fingers fisted into the bedclothes. When he glanced down, he saw strands of pre-cum stretching and then breaking with every bounce of his cock. A small puddle of the clear liquid had pooled beneath the head of his cock as well.\n\nHe also saw Gina looking up at him, her eyes sparkling with both delight and devilry. She moved away from his ass briefly, lapping at his taint and tight balls while keeping him trapped in her eyes. When she dipped back down again, she pushed on his legs, opening him up further, and slipped her tongue deeper into his ass.\n\nRick groaned and let out an explosive breath. When one of her hands moved back to his cock, she slowly stroked her pointer finger and thumb up and down opposite sides, just brushing against the helmet at the top each time. The sudden increase in stimulation caused his pleasure to spike, and another thick ooze of pre-cum to roll down the head of his cock.\n\nGina dipped her thumb into the pool of slippery wetness, slid her hand beneath his cock, and curled her fingers around it. She pressed her thumb against the ropy frenulum on the underside of his cockhead, and began to rub it in short, soft strokes. At the same time, her tongue went into a frenzy on his ass.\n\nRick growled and yanked loose the fitted sheet from one of the corners of the bed when he lurched from the electric pulses of sexual energy she was generating in him. The slow burn of his pleasure turned into a bonfire, rising rapidly toward a peak. After a few seconds of almost painful pleasure, he erupted in a shout, and in orgasm.\n\nThough his eyes pinched tightly closed on the first pulse of his cock, he could feel the hot cum spattering over his chest &mdash; all the way up to his neck. The ejaculation was so powerful that he felt it surging up the shaft, and tickling the slit as it erupted. Blast after blast covered him in cum, making him grunt and growl. All the while, Gina's tongue continued to slather over his puckered ass, and her slippery thumb caressed his glans.\n\nHe couldn't remember the last time he had come so hard. It never seemed to end, or even dull in intensity for the longest time. He had no idea how many times he had spattered himself in cum before he finally began to dribble. Panting for breath, he opened his eyes to see Gina standing up. She leaned over him, lifted his cock straight up, and slid her lips down over it.\n\nShe croaked when his hips lurched from the sudden stimulation of his sensitive organ, but quickly recovered and kept her lips wrapped around him. She sucked out his last few fitful dribbles, and then let him go with a pop, just as he was about to push her away. She kept his cock in hand, and leaned down to lick up the cum that had pooled beneath the throbbing organ.\n\nRick gasped for breath &mdash; regularly stiffening and twitching from the aftershocks of his orgasm. Gina licked and slurped up every drop of cum she could find, savoring it with hungry, delighted moans.",
        "Once he finally had enough breath to do so, Rick growled, \"God damn.\"\n\nGina let out a deeper, sultry moan when she licked up a dollop of cum that had made it all the way to his chin. \"Did you come hard?\" she asked with a knowing gleam in her eye.\n\nHis entire chest was covered in smeared semen and her saliva. \"What do you think?\" he muttered, punctuating it with a weary chuckle.\n\n\"I think I told you I was going to make you come bucketloads. See what you've been missing?\"\n\nThat made him wince. The heat of the moment was slowly fading, allowing the blood that had abandoned his brain for the smaller head below to remind him of why he'd been missing out.\n\n\"Here's something else you've been missing,\" she said.\n\nGina pulled her knees underneath her, and then stood. He swallowed hard as she walked over top of him, and squatted down on his face. With bare, sweet, teenage pussy in his face, he did what came naturally, and stabbed his tongue between her nether lips.\n\nShe rode his face hard, smearing it with her wetness. Rick lapped up her nectar, tongued her clit, and sucked the swollen little bud, drawing out whimpers. He tried a couple of times to reach the pucker of her bottom to return the favor, but she fought him, keeping him centered on her clit. She seemed determined &mdash; almost desperate &mdash; to come.\n\nHe decided he could live with that, and devoured her barely legal pussy.\n\nIt couldn't have been much more than a minute later when she began to convulse atop him and wail in orgasm. Rick dug his fingers into the cleft of her butt, holding her against his mouth, and kept licking. Gina screamed, squealed, lurched, and pulled his hair as the throes of her orgasm took complete control of her body. Rick reveled in how hard she was coming, and did his best to prolong it.\n\nThen, as suddenly as she had exploded in orgasm, she yanked his hair hard, and lurched off his face. Her sloppy pussy left another trail of mess on his chest, and then she collapsed atop him with her hot breasts squished against his left cheek.\n\nShe remained atop him &mdash; gasping and wheezing for breath &mdash; for quite some time. Rick absently stroked her back, feeling her chest heave, until her breathing began to slow. Eventually she shivered, let out a quavering moan, slid off him, and flopped onto her back.\n\nRick smiled as he listened to her moan and watched her caressing her breasts with one hand, and her glistening pussy with the other. He was lost in the moment until he saw the fading light coming through the curtains in his peripheral vision.\n\n\"Shit,\" he exclaimed as he sat up. \"Your brother's going to be home soon.\"\n\nHer voice sad, and a pout on her face, she said, \"Oh, damn. You're right.\"\n\n\"Damn it,\" he muttered under his breath. Ignoring the now cold and clammy evidence of what he'd done, he slid out of the bed and began gathering up his clothes.\n\nAs he hastily dressed, Gina lounged naked on the bed, giggling and watching him. She let out a quiet moan of disappointment when he pulled up his boxers, covering his still sensitive cock. Once he was dressed, he turned toward her, but had no idea what to say.\n\n\"Go ahead, before Roy gets home. That was so worth waiting for. Grab my top out of the living room and bring it in here before you go?\"\n\n\"Yeah, okay,\" he said, and then headed out of her room. Along the way, it dawned on him that the only reason he'd stopped and gotten himself into this situation was because her car wasn't there. When he returned to the room with her top, he asked, \"Where's your car?\"\n\nShe gestured for him to toss it anywhere, so he put it down on her dresser. Then she answered, \"I was reading over Roy's shoulder when you two were talking about that, so I hid it in the garage where Mom and Dad's cars usually are. Sneaky, aren't I? Come on. You have to admit it was incredible.\"\n\n\"Yeah. You made me come hard.\"\n\n\"I loved it. You too, by the way. I needed that so badly.\"\n\nA half smile tugged at his lips when he said, \"You did go pretty wild.\"\n\n\"Uh huh. You know, this thing you've got with me being off limits is more or less all you. Roy knows that I sucked off Jack once, and he's not pissed or anything.\"\n\n\"Seriously?\"\n\n\"He doesn't want to know anything about it, but it doesn't really bother him. Then there's the fact that Roy fucked your sister a couple of times.\"\n\nRick gave a violent shake of his head and exclaimed, \"What?\"\n\nShe laughed. \"It was a rebound thing. They did it a couple of times, and then it was over. Neither of them are really into each other, but it happened. If anything, you still owe him one, if you want to think of it that way.\"\n\nHe didn't even know how to process that, other than to shiver at the disturbing thought of his sister having sex with anyone.\n\n\"Go on. I know I don't even want you to get caught in the house smelling like pussy. I need to get in the shower and brush my teeth.\"\n\n\"Right.\"\n\nGina blew him a kiss while pulling open a drawer to retrieve a pair of panties. He headed out of the room, still reeling from the whirlwind that he'd been caught up in. He was a couple of miles down the road before he even realized that his face was still covered in drying pussy juice. The fast food napkin from the door compartment didn't accomplish much, so he headed straight to the shower himself upon arriving home.\n\nWhen Rick returned to his room, he found messages waiting for him &mdash; from Gina, of course. He opened the conversation to find an awkwardly framed photo of her bent over, holding the phone in one hand, and her ass cheeks spread apart with the other.\n\nAfter that was a message that said, \"You know, all you have to do is ask me. You can stuff my ass anytime.\"\n\nA few minutes later, just before he exited the bathroom, she'd sent another couple of messages. \"Actually, you don't have to ask. Want to do me up the butt?\" The second said, \"I could meet you at your place after you come over shooting tomorrow. Then you can shoot something up my ass.\"\n\nIt was more or less a forgone conclusion at that point. He'd already broken the bro code, found out he wasn't the only one, and she was offering what was essentially his sexual holy grail. He took a deep breath, tapped, and saved her number under her name, making it official.\n\nHe pondered how to respond for a minute or two, and then finally settled on, \"Can't wait.\"\n\n****\n\nRick knew better than to look at the messages Gina had sent him while he was at work. He even waited until he got home, despite his anticipation growing throughout the day. Best friend's sister or not, he couldn't wait to finally fulfill one of his biggest fantasies and fuck her ass.\n\nTonight was the night.\n\nAs soon as he was home, he opened the conversation and groaned. She'd sent two pictures. One was of her on her back, with her legs in the air, and a dildo pressed against her ass. The second showed her with that dildo buried to the hilt in her back door.\n\n\"Never had a dick as big as yours in my ass, so I thought I'd better warm up,\" the final message read.\n\nHe was hard as a rock all the way through his shower. The plan was the same as the previous couple of weeks &mdash; go over to Roy's and practice for the shooting competition. After that was when Gina was supposed to meet him back at his place.\n\nStill hard and aching, he knew there was no way he was going to be able to think to shoot. He sent a message to Gina. \"Why don't you come ahead over?\"\n\nHer reply arrived fast. \"Hoped you would say that. On my way.\"\n\nThough his friend's house was only a few minutes away, it seemed to take her forever to arrive. She was grinning when he opened the door, and he saw a yellow bow in her hair, though it was a barrette rather than a ribbon like the day before. It only emphasized to him that she was barely eighteen. Her tight t-shirt and tiny shorts demonstrated beyond any doubt that she was a woman &mdash; if only just.\n\nGina grabbed a handful of his cock as she stepped inside, and let out a sensual growl. She grabbed a bottle of lube out of her purse, gave it a playful shake, and then nodded toward his bedroom.\n\nHe was a little embarrassed that he hadn't even thought of it. If she hadn't brought lube with her, he would have needed to go out and buy it.\n\nHe followed her to the bedroom, where she sat the bottle of lube on the nightstand next to the bed. Then she hung her purse from the drawer handle, turned toward him, bit her bottom lip, and slowly crossed the floor. While there was arousal in her eyes, there was something else as well &mdash; something softer. When she reached him, she slid one hand around his waist, to his back, and looked up at him.\n\nThe sparks that flew between them surprised him. For years, she had been his friend's annoying little sister. Then, she'd evolved into a sexy hunter, determined to have her way with him. Suddenly, she looked vulnerable, shy, and almost afraid.\n\nGina's lips parted slightly. She edged a little closer, and her eyes drifted closed. Caught up in the unexpected feelings, Rick kissed her. She let out a quiet whimper and reached up to cup his cheek with her other hand. He slid one hand behind her head, and the other behind her back. He could feel her shiver as their lips met in soft, caressing pecks.\n\n\"That was nice,\" she said when they simultaneously leaned out of the kiss.\n\nHe agreed, \"Yeah.\"\n\n\"I didn't just scare you off, did I?\"\n\nHe shook his head.\n\n\"Don't worry,\" she said, and her features took on the more familiar, hungry smile, \"I still want you. I just had to give that a try.\" The hand behind his back quickly moved to the front, and settled between his legs. \"Now I want to try something else.\" \n\nAfter a squeeze of his erection, she took a step back, grabbed the tail of her shirt, and pulled it up. He quickly followed suit. His cock throbbed as his shirt cleared his eyes, letting him see her braless breasts. She was able to drop her shorts and kick them off far more quickly than he could stomp on the heels of his shoes to remove them.\n\nGina sank down to her knees, looked up into his eyes, and reached back to yank off her shoes. Just like that, she was naked except for a cute little pair of ankle socks. She reached out and stroked her hands up and down his legs while he kicked off his other shoe. She moaned, \"Mmm hmm,\" when he pushed his jeans and boxers down, letting his cock spring free.\n\nThe denim only made it to his knees before she moved in.\n\nRick growled as his friend's little sister lapped him from root to tip, gazing into his eyes the whole time. She kissed the tip, and then gave the shaft another broad-tongued lick from the side. He put one hand on her shoulder while she tongued his cock, wetting it in her saliva. At the top of one stroke, she wrangled the head of his cock between her lips with her tongue. She finally broke eye contact when her lips slid down his throbbing shaft.\n\nA growl escaped him. Her hot little mouth felt like heaven. She took about half of him, slid her lips back up to the tip, glanced up at him, and took him in again. Rick breathed hard as the sexy young minx took him in again and again &mdash; her lips moving steadily farther down his shaft. She locked eyes with him at the top of every suck, letting the head pop out of her lips for a fraction of a second before engulfing him.\n\nGina let out a croak when she finally swallowed all but an inch of his cock. She quickly pulled away, leaving him with thick globs of spittle running down his shaft, and tendrils leading to her lips. She smeared the slippery mess over him with a stroking hand while she sniffled and blinked the tears out of her eyes.\n\nWhen she leaned back in, he put a hand under her chin to tilt her head up, and one under her arm. She stood up, and he let his hands slide down her side to her ass as she rose. Once she was on her feet, he stooped slightly, and lifted her off them.\n\nGina squealed in surprised delight when he picked her up. She quickly wrapped her arms and legs around him, steadying herself as he carried her to the bed. He was rather proud of himself when he was able to lift his knee onto the bed while carrying her, and then lean down to lay her on the mattress.\n\nThe firm mounds of her breasts were right in front of him &mdash; calling out to him &mdash; and he answered.\n\nA quavering whimper passed her lips from the pleasure his were giving her. He sucked the stiff point of her left breast, flicked it with his tongue, and then moved to its twin. Gina's fingers entwined in his hair and she moaned. Rick worshiped the breasts she'd been tempting him with for so long, causing her to writhe and arch her back.\n\nHer tits weren't the only thing calling to him, though. He planted a kiss on the lower swell of her right breast, and then one just below. She whimpered, \"Oh,\" when he kissed her again, a few inches above her belly button. Her next oh was a little louder when he kissed her below her naval.\n\n\"Wait,\" she said in a squeaky little voice when he kissed just above her heart-shaped little pussy.\n\nRick glanced up and saw her reaching for her purse. She slipped her hand inside and withdrew the same dildo from the pictures she'd sent him.\n\n\"Stretch my ass out while you eat me? I want to be ready for you.\"\n\nThough the scent of her arousal was making his mouth water, he nodded. She grabbed the bottle of lube and squirted a generous bead along the length of her toy, and then smeared it all over. She added a second dollop to the head of the dildo, and then held it out to him, holding it by the center of the shaft. He took it by the unlubricated base.\n\n\"The switch is on the bottom,\" she instructed as she sat the lube back on the nightstand. \"Wait until it's inside me.\" Gina pulled her knees up toward her chest, and grabbed behind them to hold them in place. \"Put it in my ass and get me ready for that big dick.\"\n\nRick pressed the head of the dildo against her forbidden hole and pushed. He was trying to go easy, but the resistance surprised him.\n\nShe said, \"A little harder. A little&mdash;\" A gasp cut her off when the bulbous tip popped inside her. She growled and said, \"Deeper.\"\n\nA smile spread across his face as he pushed the dildo in her ass. It was easier going than the initial penetration, but he could tell how tight it was. His cock throbbed in anticipation of feeling that squeeze first hand. Gina let out a long groan as he buried it to within an inch of the base, and then whimpered when he stopped.\n\nThen he flipped the switch.\n\nShe tensed and shuddered from the vibrations running through her from the buried toy. She spread her legs wider, and he saw her pussy winking at him from the contractions of her intimate muscles.\n\n\"Oh, eat my pussy,\" she begged.\n\nShe didn't have to ask twice.\n\nGina squealed as he dived in. He lapped at the entrance of her canal, drinking up her nectar, and probed with his stiffened tongue. Then he moved up to her clit, and gave it a long, slow, broad-tongued lap. She whimpered and her toes curled from his touch.\n\nRick tongued her feverishly, making her twitch and moan. Then, on a whim, he gave the slightest push on the dildo humming in her ass. It barely moved the phallus, but it was enough to make her yelp in surprise and shudder.\n\n\"Yes!\" she cried when she caught her breath.\n\nHe continued to devour her pussy, and just when he sucked her swollen clit between his lips, he bumped the vibe again. She gasped and lurched. He waited only a few seconds before doing it again, but then let her wait and anticipate the next tiny thrust of the artificial cock deep in her back door.\n\nHer breathing quickened. Her cries grew louder, and higher in pitch. She writhed even more energetically. Every bit of it drove him to even more enthusiastic efforts. Soon enough, her every breath was a gasp, expelled in a cry of pleasure.\n\nHe was certain he had her on the cusp when she begged, \"So close. Oh god! Fuck me! I want to come on your dick. Please. Please. Please. Fuck me!\"\n\nHis cock was screaming for attention nearly as loud as she was begging for it. He pushed up on his hands, pulled his knees under him, and quickly scooted between her parted legs.\n\n\"Hurry,\" she pleaded while shuddering.\n\nRick rubbed the head between her folds, wetting it in her juices, and then slipped inside her. She let out a squeal and arched her back high off the mattress. Her pussy was easily one of the tightest he'd ever felt, and he growled as he pushed deep into her hot, slippery embrace.\n\nKnowing he was soon going to be somewhere even tighter made it all the sweeter. \n\nUnfortunately, the handle of the vibe was somewhat square, and not particularly comfortable against his balls once he was buried inside her. He leaned forward a little while she whimpered in bliss, and felt his family jewels lift away from the buzzing toy. So he dropped over her on his hands, leaning against her bent legs. It did the trick.\n\nHer eyes were wide, and rolled up in her head. Gina's hands moved from behind her knees to his back, since his weight was holding them in place for her. She sucked in a gasp when her eyes pinched closed, and then opened them to fix him with an intense gaze. \"Fuck me. Fuck me hard,\" she cried.\n\nHe was hardly one to argue.\n\nGina yelped when he slammed into her, driving her butt down into the mattress. The vibrations from the toy were so intense that he could feel them in her pussy as he fucked her. Her gorgeous face flushed &mdash; growing redder with every smack of their colliding flesh. Her tits bounced and jiggled before his eyes. He could feel the wash of her hot breath on his face and neck as she screamed her pleasure.\n\nIn less than a minute, she was screaming, \"Yes! Yes! Gonna come! Gonna come! Gonna come!\"\n\nThen her mouth dropped open and her chin quivered through several thrusts. Her eyes widened &mdash; looking unfocused. Rick drove his cock into her hard and fast &mdash; reveling in her expression of pleasure until suddenly her nails bit into his back.\n\nGina's head bent back and she screeched as orgasm claimed her.\n\nRick let out a surprised grunt and froze in place with his cock buried balls deep inside her. One hand continued to claw at his back while the other snapped to the back of his head. Her fingers entwined in his hair and tugged at the roots, encouraging him to slip between her bent knees atop her to relieve the pressure. Her legs immediately wrapped around him as well.\n\nGina's climaxing pussy held him in a viselike grip. She screamed and convulsed beneath him like a woman possessed. His balls were sitting in just the right position on the toy in her ass to feel the full brunt of its vibrations, making his cock throb rapidly in her clenched canal. That in turn drove her to even greater heights.\n\nThe throes of her orgasm went on and on. She came like no other girl he'd ever been with. Eventually, her grasping limbs and clawing nails began to lose their strength. Her cries grew hoarse, broken by noisy gasps, and weepy-sounding as the onslaught of her orgasm settled into aftershocks.\n\n\"Oh god &mdash; off!\" she pleaded just as another of those shockwaves ripped through her body.\n\nRick disentangled himself from her arms and legs and lifted off her. The slide of his cock as he straightened and pulled out set her off again.\n\n\"No! T-toy!\" she cried as soon as she could draw air into her lungs again.\n\nHe had to chase the buried vibrator, as her hips were still bucking, but he managed to grab hold of it and turn the toy off. Gina's hips lurched as he did, and the toy slipped out of her ass.\n\nShe curled up with a pained whimper to twitch and tremble through her fading orgasm.\n\nRick dropped the vibrator and stroked her ass as she settled down. The sight was so amazing that he didn't feel any pangs of guilt about watching his best friend's little sister in a state of post-orgasmic bliss. When her panting slowed, she rolled onto her back again, and met his eyes.",
        "\"Holy shit,\" she said in a breathless voice, and then shook with a silent chuckle.\n\nHe smiled and ran his finger over her right leg.\n\n\"I didn't...\" she had to pause to gasp and swallow. \"Didn't make a mess?\"\n\nRick glanced down at the vibrator, finding it surprisingly clean, and then shook his head. \"No.\"\n\n\"Good. My god, I thought I was... I don't know. You made me come so hard.\" She then glanced at his still bobbing cock and moaned. \"I did make a mess. Come here.\"\n\nHe responded to her beckoning, and knee-walked toward the head of the bed. As soon as it was in reach, Gina's tongue ran up the length of his pussy-slick cock.\n\nRick groaned and watched her lick her juices off his erection. It was incredibly sexy, and he asked, \"Taste good?\"\n\n\"Uh huh,\" she responded without pausing in her tongue bath.\n\nAfter a thorough licking, she wrapped her hand around his cock, parted her lips, and took him in. Her cheeks puffed out for a moment when the head hit the back of her tongue, but she recovered, sucking hard all the way back to the tip, and then letting it go with a wet pop.\n\n\"God, you're so big,\" she said as she stared at it and stroked it in her hand. \"I'm half afraid it won't fit in my ass.\"\n\nThough he tried not to show it, that made him wonder if she was about to beg off.\n\nShe quickly reassured him that wasn't the case when she looked up and said, \"That doesn't mean I'm not going to try, though. Ready to put this big dick in my ass?\"\n\nHe groaned and she giggled when that made him throb hard in her hand.\n\nWithout letting go of his erection, she reached out with her other hand and retrieved the bottle of lube. Gina popped the top, slid her hand down to the root of his cock, tilted the bottle, and gave it a squeeze.\n\nRick sucked in a sharp breath through his nose when the slightly chilly fluid oozed over the head of his cock.\n\nGina moved the bottle in a small circle, letting the lube drizzle down his shaft around its circumference. She slid her loosely gripped hand up and down the shaft, spreading the lube over him, and then added more. By the time she was finished, he had a thick, all-over coating. She closed the bottle and gave it a toss so it landed at about the midpoint of the bed, off to her left.\n\nAs she reclined on the mattress and bent her knees, she asked, \"Is this okay? I like to watch, but if you want to do me doggy-style?\"\n\nHe shook his head as he moved, sliding his knees across the sheets. He wanted to see far more than just her butt and back. Gina rubbed two lube covered fingers over her forbidden hole, adding to what was already there from her toy. She then pulled her knees back toward her chest and grabbed behind them, presenting her puckered opening to him.\n\n\"I want it. Stuff my ass,\" she sultrily encouraged him as he moved into position.\n\nHe took his cock in hand and sighed in anticipation as he took aim.\n\n\"But go slow,\" she quickly amended when his slippery tip touched her ass.\n\nThe resistance he had felt with the toy was nothing compared to what he felt when he began to push. He had to slide his guiding fingers farther up the shaft and hold on tighter when his cock was trying to bend and slip off target, rather than penetrating. On the verge of fulfilling a long-held fantasy, it was all he could do to heed her words and take it easy. He pressed harder, and harder, until he finally felt the slightest slip.\n\n\"Ah! Oh!\" Gina cried as the mushroom tip slipped inside her, and her ass tightened around the shaft below.\n\nRick groaned from the unbelievable squeeze. That he had expected &mdash; though his imaginings paled in comparison to reality. The delight he hadn't anticipated was how hot she felt inside. Gina was stiff and trembling. Her toes were tightly curled, her eyes narrow, and her brow furrowed. Her mouth hung open in a silent cry, until at last she gasped.\n\nHer words came out in a high-pitched rush, \"Oh my lord, so fucking big.\"\n\n\"Tight. Fuck,\" Rick growled as the muscular little ring rhythmically contracted around him. He had to keep the pressure on, because it felt as if her ass was trying to push him out.\n\nGina let go of her right leg, and when it slipped back toward him, Rick caught it and guided it over his shoulder. The reason she let go was evident when she began to tease her clit with lube-slick fingers.\n\n\"Give me... Give me a second,\" she pleaded. \"Let me get used to it.\"\n\nHe nodded, perfectly content to feel the squeeze and watch her masturbate. \"You okay?\"\n\nShe offered a curt nod. Her fingers moved faster over her button, and she whimpered.\n\nThat alone was a treat, as only a couple of girls had ever let him watch them play with themselves &mdash; and not for very long. It was exciting to see something so private and intimate on display right in front of him. She seemed to prefer sliding her fingers up and down, rather than in circles like the other girls. She also tapped her clit and pinched it. The pinch drew a yelp out of her.\n\nAs the sound faded, her muscles slightly relaxed. Already pushing to stay inside her, a little over an inch more of Rick's cock vanished in her ass before it clenched tight around him again.\n\nGina's head lashed back and she let out a choked-off scream. Her head snapped back up a moment later, and she stared at him stretching her ass. \"Fucking god,\" she growled.\n\n\"Feels so good,\" he said.\n\n\"So full. More,\" she said from between clenched teeth.\n\nRick pushed, fighting the resistance, and his enthusiasm got the better of him. In a flash, almost the whole of his hard shaft vanished into her. Gina shrieked and her eyes misted over. The fingers of her left hand dug into the back of her knee, leaving white depressions around them. Her other hand curled into a claw above her pussy.\n\nHe pulled back about an inch upon seeing the obvious discomfort in her features, but she let out a snarl and barked, \"More. All off it.\"\n\nHe reversed course, and she growled until his balls settled against her. Then she gasped.\n\n\"Oh god. All in me,\" she squeaked. Her fingers returned to her clit.\n\nRick throbbed in her canal. \"So hot and tight. So fucking good.\"\n\nGina met his gaze with eyes that were narrow and still glimmering with unshed tears. \"Do it. Fuck my ass.\"\n\nHe withdrew &mdash; gasping from the feeling of her ass stroking his turgid flesh &mdash; but went too far. Her hips twitched, and he slipped out.\n\n\"Oh,\" she cried, the sound somehow mingling both longing and relief. \"Back in.\"\n\nThat proved easier than the first time, because her ass had gaped to accommodate his girth. Her chin dropped to her chest and an unexpectedly deep growl escaped her as his cock violated her ass once more. He buried his cock in her ass, and she groaned as he immediately withdrew. A growl punctuated by a whimper accompanied his next slow thrust.\n\nIt was everything he'd fantasized about and more. He took his time, alternately watching her expression harden and her fingers between her legs. The sounds she was making were loud, primal, and almost ferocious. The heat increased as he slid in and out of her ass, making his growls and groans fall into a deeper register as well. Gina dipped her fingers into her pussy, making squishy sounds as she fucked herself with them for several fast strokes. The slippery digits then returned to her clit.\n\n\"More lube,\" she gasped when his excitement got the better of him, and he thrust a little faster.\n\nAs he withdrew, Rick picked up the bottle from where she'd tossed it, and popped open the top. Once again her voice carried notes of sweet respite and sharp need when his cock slipped out of her ass.\n\nShe looked down at her gaping hole and said, \"In me. Please.\"\n\nHe pointed the bottle into her ass, which was gaped wide enough to see the deep red inside her, and gave a squeeze. A loud cry escaped her when the cool liquid drizzled into her hot, abused ass. Though her butt puckered, quite a lot made it inside her before it welled up into a pool. Rick then gave the head of his cock a squirt, and dropped the bottle at his side.\n\nShe bit her lower lip and nodded as he edged forward. A hissing, flatulent sound accompanied his cock penetrating her, and her head lashed back once more.\n\nThough he returned to the slow, methodical rocking of his hips, a tickle was building in the head of his cock, urging him on. He fought it, watching her muscles tighten every time his balls pressed against her. Her fingers went into a flurry over her clit. Each stroke slid between her nether lips to the abundant wetness there, and then lifted her hood to expose her naked clit at the top.\n\nGina's face began to glisten with sweat, and grow flushed. His urges eroded conscious thought, and he began to thrust harder and faster into her tight teenage ass.\n\n\"Yes. Harder. Faster,\" she encouraged him after a few strokes, and then shoved her fingers deep into her pussy.\n\nRick couldn't have held back if he wanted to. He watched as she fucked her pussy hard with her fingers. The rapid, squishy sounds that made were a perfect symphony combined with the claps of their colliding flesh, her whimpers, his grunts, and the creaking of the bed springs.\n\nGina's glistening skin began to sprout droplets near her hairline. Her breasts bounced from the shockwaves traveling through her body. Her cries came louder and more rapidly by the second. Rick felt the tickle in his cockhead swell and spread from the hot squeeze of her ass and the incredibly sexy display.\n\nSoon enough, he was fighting the inevitable. His grunts deepened. His breath blasted from his nostrils. He was marching headlong toward an explosion, and fighting it with every ounce of his will. He wanted her to come, but he was convinced he wasn't going to be able to hold off long enough.\n\nHer sudden shriek startled him with its volume and pitch. She screamed in a tight, pained voice, \"Gonna come! Come for me! Please! Come deep in my ass!\"\n\nThat was it. Hearing her plead for it shattered the tiny shreds of control he had left. He slammed into her, and erupted with a roar. When the first hot spurt flooded her ass, Gina's eyes widened, and she yowled as orgasm claimed her as well.\n\nDespite less than twenty-four hours having passed since she'd made him go off like a volcano while rimming him, his orgasm was just as intense. He once again felt every powerful ejaculation surging up his shaft, and tickling the slit as it filled her ass. Gina writhed beneath him with her fingers shoved deep in her pussy. She let out weepy cries from the waves of orgasm crashing through her body. Her ass clamped down on him so tight that he couldn't have moved if he'd had any ability to try.\n\nDespite the copious amounts of cum he pumped into her, she was still coming when he grew sensitive. He growled and gnashed his teeth, but soon couldn't take it any more. With a violent wrench, he yanked his protesting organ out of her ass.\n\nGina screeched, slammed out flat, and then her back arched until only her feet and head were supporting her for a few seconds. Then she dropped to the bed with a groan.\n\nRick gasped for breath, wincing every time his cock throbbed in response to her whimpers and whines. It took a couple of minutes for him to even open his eyes and look at her. She was still twitching, and he could see a stream of cum curling around her buttock, down her leg, and dripping to the bed below.\n\nAfter a while, he felt her moving, but couldn't summon up the energy to turn his head to see what she was doing. He jumped when the chilly plastic of a personal pack of bathroom wipes landed on his chest. He then saw her standing next to the bed with several of the wipes wadded up and held against her ass.\n\n\"Don't come in, okay?\" she said just before scurrying out of the room. He heard the bathroom door open, close, and then the water running full blast.\n\nIt took quite a surge of willpower to grab the pack of wipes off his chest. The thought occurred to him that he should have considered that need as well. He had been thoroughly unprepared. His dick ached from going soft after the tight squeeze and the lube having lost a lot of its slipperiness in the last minute or so before he came. Nevertheless, he pulled out a wipe and started cleaning up, understanding the need.\n\nIt was an uncomfortable and lengthy process, but he was eventually as clean as he could be. The bathroom door opened at about the same time as he tossed the last wipe into the trash can.\n\nGina was walking gingerly and whimpering when she returned to the room. She crawled into the bed, laid her head on his shoulder, and said, \"My butt hurts.\"\n\nThe affected pout in her voice and the following giggle set him off, and he chuckled with her. He wrapped his arm around her and settled it on her tummy. She responded with a sweet, contented moan.\n\n\"Worth it,\" she added as she snuggled up tighter against him.\n\nHolding her with the fruity smell of her hair and the spicy scent of her perfume tickling his nostrils, he turned his head so that his cheek was resting against her forehead, drawing out another moan.\n\nIt was unexpectedly warm and comfortable. She fit him like a matching puzzle piece, and the lines of her body were astoundingly beautiful as he looked down on them. It felt right, so he turned his head a little more and planted a kiss on her forehead, which made her shiver.\n\nSlowly but surely, as they lay together in the descending darkness, he realized there was more than animal attraction between them &mdash; at least on his end.\n\nThey both turned to face each other at the same time. Their eyes met, and electricity crackled between them. The next thing he knew, they were softly kissing and caressing each other's faces.\n\nThe night was far from over.\n\n****\n\n\"Shit,\" Roy said as he sat down his rifle. \"Think it may be time for me to give up.\"\n\n\"That's a good group,\" Rick argued.\n\nRoy let out a disdainful snort. \"Sure. Looks like shit next to yours. It's one damn hole in the bullseye, where every shot went through,\" he said as he walked out to retrieve his target.\n\n\"I have been out here every day for weeks.\"\n\n\"Yeah. Yeah. Stop trying to smooth it over. You whipped my ass like a redheaded stepchild.\"\n\nWhen something moved in his peripheral vision, he glanced toward the house for a second, and then quickly looked away from Gina's bedroom curtain dropping back in front of the window.\n\n\"At least I'll get to see you beat Bobby Frandson's ass this weekend. He doesn't stand a chance,\" Roy said as he sat his latest target on top of the stack.\n\nThe two friends gathered up their rifles and headed for the garage. While they cleaned their weapons, Rick was puzzling over what he was going to say. He was barely able to keep up with the conversation.\n\nIt hadn't gone unnoticed. \"What's up? You act like you've got ants in your pants. You ain't worried about beating that blowhard, are you?\" Roy asked.\n\n\"No.\" He blew out a breath from between pursed lips and steeled his will. \"Can I ask you something?\"\n\nRoy's brow furrowed and he answered with a confused-sounding, \"Yeah.\"\n\n\"Uhm...\" He gave up on trying to break it to his friend gently, and just blurted out what was on his mind. \"Would it be too weird if I took Gina out?\"\n\nRoy erupted in laughter.\n\n\"Come on, man,\" Rick said, fighting off a blush.\n\n\"Sorry,\" his friend apologized, and then laughed again for a moment. \"So, she finally broke you, huh? Surprised you lasted this long.\"\n\n\"If it's too fucked up...\"\n\nRoy waved his hand and said, \"It's cool, dude. At least she won't be running around with those scumbags she's been hanging out with.\"\n\n\"Really?\"\n\n\"Really. I'd tell you just not to suck face with her when I'm around, but I know my sister. She's going to exploit that for every bit of torture she can milk out of it.\"\n\nThe door between the garage and the house opened, and Rick saw Gina step through it with a huge smile on her face.\n\nWithout even turning around, Roy said, \"Annnd, she was listening through the door.\"\n\nThere was no fighting his blush as Gina skipped toward Rick with her perfect little breasts bouncing. She put her arms around him, kissed his cheek, and asked, \"So, where are we going?\"\n\nRoy shook his head, interposed his hand between them and his eyes, and said, \"Have fun, man.\" He then added, \"Go to hell, Gina.\"\n\n\"Love you too,\" she sweetly called after him as he turned to walk into the house.\n\n\"Oh boy,\" Rick said under his breath.\n\n\"Oh, come on. He literally asked for it,\" Gina said, and then giggled. \"Seriously, though... I promise I'll try not to make things weird with you guys. No talking about sex, and no hot and heavy making out around him &mdash; no matter how much I want it. Forgive me?\"\n\nHe sighed. There was no resisting those gorgeous eyes. \"Yeah. So, what do you want to do? Go get something to eat? Movie?\"\n\n\"Anything,\" she said as she leaned in for a long, soft, incredible kiss.\n\n****\n\nThanks for reading! Please take a moment to vote ( only once per reader! ) as that's the bread and butter of a free author. Comments and favorites are certainly welcome, as they increase the profile of the story and attract more of the same. The feedback is my writing fuel.\n\nI'm self-editing most of my pieces again, so feel free to point out where I messed up. If it's egregious enough, I'll put in a fix. Don't want to clog up the system with minor edits."
    ],
    "authorname": "RejectReality",
    "tags": [
        "analinguis",
        "ass cum",
        "ass toying",
        "eat ass",
        "eat pussy",
        "eighteen-year-old",
        "sister",
        "anal sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/rim-fire"
}
{
    "title": "Backdoor Sweetheart Ch. 02",
    "pages": [
        "Author's note: This is a work of fiction. All characters are eighteen years or older. Don't expect realism and you won't be disappointed when you don't find it! Enjoy!\n\n***** \n\nAs I glanced out of my bedroom window at Lizzie's house, I was nervous. I knew I shouldn't have been, but I was. For the hundredth time, I looked down at my Green Day T-shirt and jeans and considered changing into something else, something a bit less casual maybe. A second later I reconsidered, feeling like a total idiot, for the hundredth time. \n\nStepping out of my room to head out and have dinner at Lizzie's place, I told myself that I was acting crazy. This was Lizzie, my sweet little Liz, the girl next door that I had known my whole life and grew up with, my best friend in the world and my almost-sister. I shouldn't be so jumpy about spending an evening with her, we had done that countless times before. \n\nWell, yeah, too bad that 'before' had assumed a whole new meaning lately, since the night we kissed for the first time. And had sex. Anal sex, actually. For the first time.\n\n*****\n\nIronically enough, when the cops showed up at Lizzie's house, the success of her party was complete. True, people started running away in a panic and our Moms were called and rushed back home with their mouths agape and their eyes almost popping out of their skulls, and, most importantly, me and Lizzie were interrupted during our first time having sex together. Still, having the police knocking at her door seemed to increase Liz's street cred in school by quite a lot.\n\nIn the end, nothing much happened despite the commotion caused by the police cruiser that some upright douchebag of a neighbor called, complaining about the noise. Luckily, the cops were reasonable enough to know that nothing much was going on after all. It definitely helped that one of them was a policewoman that our Moms knew from yoga class and whose son was at the party too. With some fussing and a lot of admonishing about the dangers of drinking and the need to keep the noise down at night, things were smoothed over. The only real crime perpetrated that night, as far as I was concerned, was the interruption that Lizzie and I suffered during our time alone in my room. \n\nThe following morning, as I helped Liz clean up the post-party wreckage, there were a lot of awkward silences, weird smiles and random blushing between us. In the light of day, the previous night seemed like an amazing dream that left us dazed now that we were fully awake. \n\nIt was a big deal after all, Lizzie and I having had sex. I guess we were both wondering where we were going from there. Even though we were still trying to wrap our heads around the fact that our relationship had just been changed forever, we both knew that nothing had been lost or ruined between us. On the contrary, something new was blossoming, a new bond that strengthened our already solid, deep-seated connection. After a while we sort of laughed the tension off, silently agreeing to revert to our usual almost-siblings routines for the time being while we sorted out our emotions.\n\nLater that afternoon, once the last remains of the party had disappeared in the trash and I was ready to drive back to campus, Lizzie and I shared a long passionate soulkiss instead of just hugging goodbye. I could feel her excitement humming in sync with my own arousal as I held her in my arms and she pressed her soft curvy frame against mine. It felt good to know that at least our bodies had no doubt at all about the two of us being together. That gave me hope that our minds would soon follow suit.\n\nI was forced to skip my next visit home two weeks later because I had some papers due before the Christmas break, but then Lizzie was out of town on a school trip that weekend anyway. We stayed in touch as usual, of course, chatting and laughing and making the most of every minute we were together, even from afar. \n\nDuring that time, Lizzie was always on my mind. I couldn't wait to hold her in my arms again, to kiss her and caress her and do so much more. I masturbated several times a day fantasizing about her, conjuring up sexy images of her full lips, her large tits and that beautiful plump heart-shaped ass of hers. I craved to see and touch her curvaceous naked body again and I dreamed of it nightly. The core of my fantasies was our night together, of course, particularly our amazing assfuck, which I replayed in my head over and over again. Just thinking about it was enough to make my dick achingly hard. I didn't even feel like watching porn, I already had all the masturbatory material I needed stored in my brain. Besides, I always pictured Lizzie's sweet face on all the big-titted round-assed porn stars I used to jerk off to anyway, even before we had sex.\n\nThose weeks felt incredibly long, the days dragging on so damn slowly. Despite all the classes and assignments I had to deal with, the thought of Lizzie was always there, filling me with affection and longing. We had never been apart for so long before and I was dying to see her again, and so was she, as she never failed to tell me during our daily talks. Eventually though, to my immense joy, our forced separation ended and I headed back home. \n\n*****\n\nSo there I was, three weeks after our first time, crossing our shared backyard, headed to Lizzie's house with butterflies in my stomach. As I walked up to the backdoor to Liz's house and let myself in as always, I couldn't shake off a sense of nervousness. At that point there was no doubt in my mind that I loved Lizzie, no, more, that I was in love with her. I wanted to be with her, completely, as boyfriend and girlfriend. The question was, would she feel the same? \n\nHaving sex with my sweet Liz had been a dream come true, and the fact that we had anal sex didn't make it any less amazing nor intimate. Still, I knew that Lizzie's being technically still a virgin had a deeper meaning to it. She had told me so herself, a year earlier, when she said that she wanted her first time to be with her one true love. I was completely on board with the fact that she wanted to save herself for the man of her life and yes, I had imagined I could be that guy even back then, but in light of recent events the whole thing had assumed a totally new relevance to me. \n\nI had been thinking about that conversation a lot in the previous weeks, remembering how embarrassed Lizzie had looked that day while she mumbled that she knew how staying a virgin was sort of weird nowadays, but she found the whole idea romantic. The way she had put it back then, I agreed. But that was before. Now, needless to say, I couldn't stop myself from obsessing about that key detail, the association she had established between her virginity and finding the love of her life. I still thought that Liz should decide however she preferred about the how and when having cherry popped, but I wished like hell she'd let me have it, because that would mean that she saw me as her one true love. As for me, at that point there could be little doubt in my mind that Lizzie was the one.\n\nTrying not to get too tangled up in my thoughts, I shook my head and crossed Lizzie's empty kitchen and then stepped into the hall, calling out for her. \"Liz? Lizzie, I'm here! Hello? Where are you Liz!?\"\n\nI couldn't ignore how my voice was shaking as I yelled out her name. Suddenly, I heard her thumping steps drawing near from upstairs. The moment I turned, I saw her at the top of the stairs.\n\n\"Russ!\" she beamed, rushing down the stairs on her naked little feet. \"Finally!\"\n\nAnd there she was, my sweet Lizzie, with her cute nerdy glasses and her auburn hair up in a ponytail. She was wearing a green polo shirt, tight and unbuttoned enough to show a generous amount of cleavage, and a pair of her usual ass-hugging cotton shorts. As she rushed at me with a radiant smile on her lips, I couldn't tear my eyes from her swaying, jutting tits. The image of those big and obviously bra-less jugs bouncing and jiggling mouth-wateringly soon filled my vision, entrancing me, until I was suddenly snapped awake by the cannoning impact of Lizzie throwing her curvy little self into my arms and hugging me fiercely.\n\n\"Oh my god, Russ!\" she chirped, squeezing me hard as I braced myself not to fall on my ass. \"It's been soooo long, I missed you so much!\"\n\n\"I missed you too, Liz,\" I chuckled as I ran my hands down her spine and locked her in my embrace. As a warm feeling of joy radiated through me, Lizzie got on her tiptoes and started jumping up and down crazily, laughing while she peppered my face with smooches.\n\nAnd just like that, with my sweet Liz snuggled in my arms and her scent filling my nostril, all my tension and doubts and silly misgivings melted away. Lizzie and I were together, that was all that mattered. Within mere seconds, we clicked like we always did.\n\nWe hugged and laughed and shared a long kiss before moving to the kitchen,where we chatted and caught up while we set the table and heated up our dinner. Her Mom had prepared her special lasagna for my return as a way to make up for the fact that she and my Mom wouldn't be there with us that night because of the traditional pre-Christmas party at the office. Throughout our meal, Lizzie pitched me her new ideas and summed up some of the stories she was working on while I listened and counseled like always, until we were lost in one of our usual empathic moods. \n\nAfter dinner we cuddled on the couch and watched the final episode of True Detective, which we had agreed not to watch until we were together. During the scary parts Lizzie snuggled so tight to me that her huge boobs were squashed against my chest right under my chin. The upper slopes of her mounds were so close to my face that I could smell her smooth pale tit-flesh. Without thinking, I reached my arm around and rested my hand on her plump ass, caressing her beautiful rump through the thin cotton of her shorts and massaging her warm naked thigh. She didn't object, actually cuddling closer still. \n\nBy the time the show was over, Lizzie was purring and I had a visible bulge in my pants. Once the TV was off, she turned her pretty face up to look at me. \"Russ...\"\n\n\"Yeah, Liz?\" \n\n\"Do you, uhm...\" she mumbled, frowning and pushing her glasses up on her nose with her index, like she always did when she was excited or nervous about something she was going to say. \"Do you love me, Russ?\"\n\nI blinked. Then I laughed. Then I spoke. \"I do. I love you Lizzie, more than anybody else.\" \n\n\"Yeah, I knew that,\" Lizzie smiled, rolling her eyes mockingly, \"and I love you too, so much, and not just because you're my almost-brother. But I mean, you know, after what happened that night...\" \n\n\"Yeah, about that night,\" I interjected, \"I actually wanted to tell you...\"\n\n\"...how great it was?\" Liz finished for me, smiling as I nodded and laughed along with her.\n\n\"Yes, but not just that,\" I went on, taking a deep breath, finally ready to spill the beans. \"I more than love you, Lizzie. I'm in love with you. I'm totally, definitely, crazy in love with you.\" \n\n\"So am I, Russ,\" she said, throwing her arms around my neck, beaming with joy. \"I'm in love with you too! Oh my god, it's such a relief to hear you say it and to be able to say it to you! I love you! And I mean it in a girlfriend kind of way, beside the way I loved you already. Oh Russ,\" she laughed, holding me tight, her big brown eyes sparkling, \"and to think that I was so worried about all this, while it's just so easy and natural! I've been thinking and rethinking and overthinking about us and wanting more while being scared of losing what we have...\"\n\n\"Same here, Liz,\" I chuckled, relieved to hear her express my very same concerns. Her lips were still curled up in a smile as they met mine and we kissed, long and deep, tasting each other and moaning into the other's mouth.\n\n\"Russ,\" Liz murmured after I while, her words interrupted by my persistent kisses, \"I wanted to tell you that... You know, that night, when we didn't... I mean we had anal sex, but I was still not sure about having regular sex... Well, I'm sure now.\"\n\nI stopped smooching Liz's soft mouth at that, the implications of what she was saying sinking in. I blinked as our gazes locked. \"You mean... You want us to... You're okay if I... If it's me who...\"\n\n\"Yes,\" she nodded firmly, her face flushed and beaming. \"I want you to have my cherry. You're the one, Russ, I know you are.\"\n\n\"Oh Lizzie,\" I sighed, before crushing her in a bear hug and starting to kiss her all over again. As she giggled and squealed under my affectionate assault, I mumbled my love for her, trying to convey how happy she'd just made me and how thrilled I was that she felt the same way about me as I felt about her. It was a while before I calmed down and she could go on.\n\n\"Well, I see you're happy about the good news,\" she grinned impishly as she brushed her naked thigh over the bulge in my pants, \"too bad there's some bad news too...\"\n\n\"Oh?\"\n\n\"Yeah, not exactly 'bad' but, well...\" she shrugged, then explained. \"I went to the doctor and I started taking the pill, but right now I'm not actually covered. I mean, I should almost be, more or less... Well, based on when I started taking it and everything, it won't be effective for another couple of days. I don't really wanna use a condom, Russ, I don't want anything between us and I wanna feel it when you cum inside my pussy and, you know, it's just two more days, so...\"\n\n\"So,\" I said slowly, and edge of doubt in my tone, \"that's it? That's the 'bad' news?\"\n\n\"Yeah. As much as I love you, I'd rather not risk getting pregnant tonight. We don't want any babies, do we? Not yet, at least...\" she concluded with a shy yet sexy little smile that had my cock flex in my pants. It was mind-blowing how Lizzie could be sweet and loving and super hot at the same time. \n\nI gave her a big smacking kiss before I replied. \"I can wait, Lizzie, it's no problem. And about the 'having babies' part,\" I snickered, \"don't think you can scare me off that easy! The idea of you being pregnant with my babies doesn't sound bad at all, I mean, not right now maybe, but still...\"\n\nThat made her laugh, and me too, my embrace tightening around her as she cooed affectionately in response. \"Sooo,\" she murmured, nuzzling my neck and pressing her heavy tits firmly against my side, \"I guess this means you'll have to settle for my ass again tonight. And tomorrow. And the day after tomorrow, just to be safe. You okay with that?\"\n\n\"Do you need to ask!?\" I chuckled, squeezing her plump round bubble-butt in my palm to stress my point. \"I love your beautiful ass, Lizzie, and I love how it feels to be inside it.\"\n\n\"I know, me too\" she purred, wiggling her rump against my kneading hand. \"I've been thinking about it all the time, Russ. It was so hot... Having your cock so deep in me, filling my ass with so much creamy cum... I swear, I had the biggest most awesome orgasm in the world, like nothing I ever even imagined!\"\n\n\"Just hearing you say that makes me so horny, Liz,\" I murmured grinding my pant-clad boner against her thigh. \"I've jerked off like a million times thinking about your beautiful ass and that tight little asshole of yours.\" \n\n\"Mmh, I masturbated too, and I always fingered my ass when I did. It made me cum so hard, Russ, and all the time I kept wishing it was your cock pumping in and out of my butt.\"\n\nAt that point we were just too worked up to restrain ourselves any longer. Our hands went for the other's clothes and we tore each other's tops off like they were on fire. The vision of Lizzie's huge heavy tits swaying in my face made me growl with desire, her stiff suckable nipples and puffy pink areolas calling to me irresistibly. Before her shirt had touched the floor, my face was buried in the soft lush valley of her cleavage and I was kissing, licking and nuzzling her amazing jugs. \n\n\"Oooh yes, Russ, lick my big titties like that,\" she sighed with pleasure, running her fingers through my hair while I devoured her amazing boobs with all I had. \"Suck my nipples, yes, suck them hard, yeees... Ahhh harder, bite them, oohh yeeees!\" \n\nLizzie's curvy frame shivered as I feasted hungrily on her nipples, taking each of her rosy swollen buds in my mouth in turn. All the while I held her luscious melons in my hands, massaging and squeezing and caressing those incredible tits to my heart's content. As I nursed on her soft engorged areolas, I sometimes delicately sank my teeth into her soft sensitive tit-flesh or nipped at her gummy nipples. Those stabs of slight pain seemed to arouse Lizzie a lot, making her squirm in my lap as she rocked her sort-clad crotch on my bulge. \n\nI was far from done with my tit-worship when Liz pushed me back and climbed off my lap to kneel beside me on the couch with her sumptuous bubble-butt tilted up and her face lowered down, close to the tent in my pants. As I hooked my fingers in the waistband of her cotton shorts, ready to reveal her round plump ass, she rapidly unbuttoned and unzipped me, purring as she yanked down my jeans and boxers in one swift, urgent motion. My raging boner sprang up instantly, hitting Lizzie's face with a meaty thwack and leaving a shiny smear of pre-cum on her cheek.\n\n\"Mmh, so hard,\" she mumbled dreamily as she held my dick in her tiny hand. Jacking me off slowly at the base, she rubbed my pole on her face and pressed my glans to her lips, making me shiver as her hot breath hit my bloated tip. \"So big and thick, all for me,\" Lizzie murmured before opening her mouth and slipping the soft seal of her lips around my cockhead.\n\n\"Oh yes, Lizzie!\" I exhaled, watching my sweet neighbor press her face down, slowly descending on my pole, taking me as far as her gag reflex allowed and then sliding her hot mouth up, slurping away on my meat. I trembled with delight while Lizzie began blowing me with gusto, humming as she bobbed her head on my lap, stuffing her face with my cock as if she was hungry for it. \n\n\"Ahhh, fuck!\" I grunted when Lizzie's increasingly deeper suctions made my glans push right into her constricting throat, making her choke a bit and forcing her to pull back. She wasn't deterred though. Letting a thick dangling wad of spittle and pre-cum drool from her lips to splatter on my throbbing erection, Liz used her own saliva to lube my shaft with her hand before once again plunging down and resuming her passionate blowjob. \n\nSliding her lips lower and lower, Lizzie worked her jaw and angled her face better, managing to deep-throat more of my dick at each wet slurping pass. My vision was blurry and my cock throbbed with pleasure inside Liz's gullet as I mumbled my encouragement. \"Fuck, Lizzie... Oohh fuuuck! Your mouth feels amazing... You're so good at this, Liz!\"\n\n\"Mmmph, mmh mmphmh,\" she gurgled, still bobbing fluidly on my pole, without even bothering to let me out of her dick-gobbling mouth. The lustful glint in her eyes and the way she wiggled her rump against my pawing hand where clear enough though. Grinning, I got the hint and focused on taking off her shorts, which I totally forgot about as soon as she had taken my boner in her mouth. \n\nPanting from the pleasure of the sloppy deep-throating blowjob she was giving me, I pulled Lizzie's shorts and panties past the protruding curve of her bubble-butt and down her shapely thighs. And there it was, like an unveiled monument: Liz's juicy, gloriously round, plump ass. \n\nLeaning closer, I reached for that perfect booty and started caressing and kneading and massaging Liz's naked buttcheeks, holding them reverently in my hungry hands. Their softness and smoothness felt incredible under my fingertips, just as much as their fleshy firmness did when I grabbed hard onto them, sinking my digits possessively in my Liz's beautiful ass.\n\nHer cock-muffled purrs of appreciation added a humming vibration to her already incredible blowjob. Still kneading a plump asscheek with one hand, I reached lower to give Lizzie's pussy some relief. When my fingers made contact with her sopping wet folds and I started easing one then two digits into her needy slit, she moaned and pressed her face all the way down on my cock until her lips were wrapped around my base. Shivering, Lizzie started blowing me faster, choking and spluttering on my throat-clogging meat but not missing a beat while I sawed my digits in and out of her sopping little pussy.",
        "\"You're so wet, Liz,\" I groaned as I started circling her clit with my nectar-slick thumb, \"your sweet pussy is so tight and hot and wet.\" \n\nDetermined to make her cum, I fingered her faster and let go of her bouncy buttock so I could masturbate her asshole at the same time. Unexpectedly, when my digit reached her rosebud I found it already full, plugged and stretched around something rubbery and cold. My cock twitched inside Lizzie's suctioning cock-crammed mouth as I realized what that meant. \n\n\"Whoa, Liz! Is this...\" I mumbled, leaning over to see the base of a pink plastic toy firmly embedded in Lizzie's sphincter. \"A buttplug?!\"\n\nPanting as she let my raging boner pop out of her mouth with a slurp, Lizzie looked at me with a sheepish smile one her spit-glossy lips. \"Uhm, yeah,\" she shrugged, giggling.\n\n\"How long have you had it up your ass?\"\n\n\"I put it in when I went to pee after dinner,\" she said nonchalantly, before adding with an impish grin, \"but I used it quite a lot recently!\"\n\nAll I could manage was a stupefied: \"Oh?!\"\n\n\"Well, I really missed you and what we did,\" she explained, looking at me with those big beautiful brown eyes of hers, \"plus I was fingering my ass all the time anyway, so...\" \n\nShe was blushing adorably as she distractedly fisted my slippery boner, rubbing my purple glans on her cheeks and sticking out her tongue to lick my cock like it was a lollipop while she spoke. \"Besides, I figured it might be helpful,\" she reasoned between a wet smooch on my cockhead and a quick sloppy suction on the shaft, \"I wanted to get ready for this, so you'd have an easier time sticking your big hard cock in my tight little asshole.\"\n\n\"Oh my god, Lizzie,\" I whispered, my eyes wide with loving amazement. Lizzie not only liked assfucking and she hadn't just been fingering her butt recalling our first sodomy: she had actually prepared her ass for me while we were apart, planning ahead for more anal sex with me! I was so mind-blown that I slipped my fingers out of her sweet snatch and let go of her juicy rump so I could grab her and pull her up and hold her in my arms. \n\n\"Come here right now, if I don't give you an epic kiss I'll explode!\" I chuckled while she squealed and gave my cock one last tug before letting go and sitting up beside me, squeezed in my embrace.\n\nI devoured Lizzie's mouth and she reciprocated abundantly. Pressing her jutting boobs against my chest while we made out, she reached for my hand and guided it back to her sumptuous ass and between her soft meaty cheeks, until our fingers made contact with the buttplug. Over our muffled moans and the passionate sounds of our kissing, I started playing with the plastic toy, giving it short delicate pulls and then letting it get sucked back within Lizzie's clingy anus. Immediately, her curvaceous body began trembling in my arms. \n\nBreaking our lip-lock, I hoarsely said: \"I need to see it, Liz. Sit on my face.\"\n\nAs I lay down on the couch, Lizzie swiftly shifted on top of me in a sixty-nine position, grabbing my cock in her tiny hands. She had barely started lowering herself down when I grabbed her plump asscheeks and pulled her to me until her drenched pussy was pressed against my mouth. She gasped while I clamped my lips on her swollen dripping labia and slipped my tongue into her honey pot.\n\n\"Oooohh Russ, yes!\" she cried as I french-kissed her pussy, thirsty for her juices. \"Lick me like that, oohh it's so good!\"\n\nLizzie's intoxicating moans and the taste of her scrumptious nectar went straight to my head. High on lust, I went to town on her pussy and clit, slurping and licking and munching away while I pried her meaty asscheeks apart and held the buttplug at the base, grinding it gently into her anus. Increasing my oral assault on her slit, I began working the plug in and out of her ass, dragging the toy out a bit and then pushing it back in, stimulating her receptive little sphincter. In no time Lizzie was shivering with pre-orgasmic tremors. She was so overcharged with impending release that she rested her head on my thigh and just held my cock at the base, barely jacking me off as she panted and mewled under my ministrations.\n\n\"Uhhhh fuck yes,\" she yelped as I watched her butt-ring dilate whenever the largest part of the tapered toy slid out of her asshole before I pushed it back in. \"Pump my ass while you lick my pussy! Oh my god oowwhhh!\" \n\nFeeling her orgasm nearing, I treated Liz's swollen nub to a final tongue flurry while I increased the speed of the in-out motions of the buttplug. As soon as I heard her tell-tale gasp of climax, I eased the buttplug all the way out of her anus and unclasped my mouth from her clit, bringing my fingers to circle her needy nub instead. \n\nThough the buttplug wasn't particularly big, its removal left Lizzie's asshole gaping open. For a brief moment right after the toy vacated her sphincter, I gloried in the sight of Lizzie's cute pink anus winking before my eyes, pulsing and twitching as it started tightening close on itself. Sighing with desire, I whirled my fingertips faster on her clit while I pushed my face between her glorious asscheeks and stuck my tongue straight inside her shrinking little orifice.\n\nLizzie's yell of pleasure got louder all of a sudden, as if her orgasm had reared up at the feel of my tongue slipping inside her butt-ring. \"Ohhhh... Ruuuuss! Uuuhhh fuuh-uh-uhuUUCK!\" \n\nThe rivulets of nectar dribbling over my clit-circling fingers and the deliciously lewd spasms of her sphincter cramping around my ass-poking tongue confirmed what Liz's howl already told me. Not that making her cum was enough to stop me at that point. Electrified by the pleasure I was giving her, I kept tongue-fucking my amazing Lizzie's tight asshole all through her climax and beyond. \n\nWhile she kept whimpering and writhing on top of me, weakly holding my boner and occasionally slapping her own face with it, I relentlessly rubbed her clit and I rimmed her butthole. I gave her engorged nub some pause only to dip my fingers inside her nectar-flooded snatch, sawing them in and out a bit before resuming my clit-circling routine. It wasn't easy to tell because of the constant dribble of girl-cum trickling from her pussy, but I think I managed to give my adored Liz at least another couple of orgasms before she herself intervened to stop me.\n\n\"Russ... Uuuhh god! Wait, Russ, please,\" she whimpered, struggling to raise her head from my thigh in an attempt to look back at me over her shoulder. \"Oooh my god, your tongue in my ass... So good, so fucking good, but... Russ, I want your cock in me now,\" she finally blurted out, pronouncing the only words that could convince me to unclasp my mouth from her pink little asshole. \"I want you to fuck my ass, Russ,\" she mumbled, as I removed my head from the lush valley of her buttcrack, leaving her well-rimmed anus all spittle-slick and shiny. \n\n\"I want that too,\" I replied, my cock flexing in her tiny hand as I watched her thoroughly licked butt-ring shrink closed. That delicious puckered orifice was glinting with my spit and pulsing from the stimulation I had given it, positively winking at me. \"I want your ass so bad, Lizzie.\"\n\n\"Good, because you got it super tingly, all wet and ready,\" she purred groggily, getting up from the couch. \"Let's go to my room, I got some lube too along with the plug. It's supposed to be the best for anal,\" she concluded with a sly wink as I got up and hugged her. The softness and warmth of her curvy body pressing against mine were driving me crazy with desire as we kissed deeply. \n\nHastily grabbing our discarded clothes, Lizzie and I rushed upstairs. Well, maybe not 'rushed' exactly. Despite our shared urge to reach her bed and sate our anal lust properly, the vision of Liz's mouth-watering round ass swaying and bouncing right before my eyes was just too much to resist. Before we made it to the top of the stairs, I couldn't help but stop twice to part her jiggly asscheeks and bury my face between her fleshy globes to lick the juices dribbling from her pussy and give her pink little sphincter a few slurping french kisses.\n\nOnce we got to her room, Lizzie jumped on the bed and instantly got on all fours. A bottle of lube was already waiting on the nightstand. I grabbed it without tearing my eyes from the magnificent vision of my sweet Lizzie on her hands and knees, wearing nothing but a sexy smile and her cute glasses, wiggling her plump juicy bubble-butt in my direction. As I knelt behind her, Liz tilted her ass higher in the air and lowered herself on her elbows with her face resting sideways on the bedspread. That docile, surrendered position, with her back perfectly arched, enhanced the glorious roundness of her rump beyond description. \n\nLeaning down, I covered Lizzie's asscheeks with soft reverent kisses before parting those smooth buns to grease up her willing little rosebud. Despite my rimming and the preparation with the buttplug, her cute pucker was once again closed tight, albeit shiny with spit. While I caressed her globes and mumbled how sexy and beautiful and amazing she was, I poured a generous amount of lube over Liz's sphincter. Rubbing it in circles all around her crinkled orifice, I massaged her anus into relaxation before easing my index and then my middle finger into her asshole to grease her up properly, letting the lube dribble straight into her snug rectum. \n\n\"Ohhh yeah, lube me up for your big cock,\" Liz whimpered while I kept adding more of the oily fluid, repeating my careful preparations over and over again, making her squirm in anticipation. \"Ahhh fuck, yes, finger-fuck my ass! Make my tight little asshole all wet and ready for you, uuuh!\" \n\nBy the time I was ready to sodomize her, Lizzie was panting, frigging her clit and swaying her bubble-butt in impatient little circles in time with the gliding motions of my fingers coating her rectum with slippery lube. She let out a sigh when I rested my aching boner between her luscious globes and poured more lubricant all over my cock and her asscrack, making it all nice and slick. Unable to resist the temptation, I grabbed Lizzie's meaty buttocks and pressed them together, trapping my shiny pole in between them. \n\n\"Whoa, Liz,\" I mumbled as I gently humped her butt-cleavage, glorying in the feel of her asscheeks squeezing me and jiggling around my cock. \"I wish you could see this, it's so hot!\" \n\nWhile I tit-fucked her rump, poking my glans against her oily anus at each pass, Lizzie looked back at me over her shoulder and snickered: \"Oh my god, Russ, you're teasing me to death here! Do I actually have to beg you to fuck my ass?!\"\n\nThat made my raging cock twitch with joy between her plump buns. \"Well, no, you don't need to beg me,\" I grinned as I aligned my cockhead with her perfectly prepared little hole, \"but I sure wouldn't mind hearing that...\"\n\nPlaying along, Lizzie fluttered her eyelids and pouted as I held my bloated tip against her pliant sphincter. \"Please, baby, pleeeease fuck my ass! I need to feel your big cock in my naughty little asshole, pleeeeease!\" \n\nI gave a mock-resigned sigh as I shrugged. \"Oh, okay. If you really insist...\"\n\nDespite the hotness of what we were about to do, we couldn't help but laugh at how weirdly comical it all felt. Lizzie still had her sweet bright smile on her lips when I leaned down and pressed my mouth to hers, sharing a soft kiss. \n\n\"I love you so much, Lizzie. You're the best, in every possible way.\"\n\n\"I love you too, Russ. You make me feel good like nobody else can,\" she murmured as I straightened back on my knees, my heart bursting with love and lust for this amazing girl who was once again letting me inside her through the most intimate, most delicate of her orifices.\n\n\"Ready, Liz?\" I asked as I spread her asscheeks. My fingers touched the edges of her butt-ring and pulled them slightly apart to make her little crinkled hole gape a bit as I poked my glans against it. \n\n\"For you, I'm always ready,\" she cooed, relaxing her body and surrendering her asshole completely to me, her fingers tracing slow circles over her clit. \"I want your cock in my ass, Russ. Make me feel full of you.\"\n\nI held my breath and Lizzie gasped as I gave a gentle push, pressing my glans against her oily asshole. There was just the slightest hint of resistance before her elastic sphincter started dilating around my bloated tip, accepting me and allowing my cock to slide inside her ass. Keeping Lizzie's reactions in check, I eased myself further into the warm, hugging tightness of her anus. I wedged merely a couple of inches of my girthy meat past her slick clamping anal ring, then I stopped.\n\n\"Ahhh, your asshole is so tight, so hot and fucking tight,\" I panted, sinking my fingers in her juicy asscheeks as I held still, enjoying the quick cramping squeezes of her slowly adapting butt-ring. \"You okay so far, Lizzie?\" \n\n\"Yeesss, oh yes...\" she whimpered, nodding with her eyes closed and her brow furrowed while she adjusted to the thickness of my cock reshaping her anal passage. \"I can take more I think... Give me some more, Russ, uuuhh,\" she mewled, her fingers diddling her clit faster as I resumed moving in her ass. \"You don't have to stop unless I tell you, okay? Just go slow oowwhh! Ooohhh yeeesss...\"\n\nAs much as I wanted to be buried balls-deep inside Liz's beautiful ass again, I managed to keep my anal lust in check as I eased myself inside her backdoor. After all, it wouldn't be any fun to hurt Lizzie, since her enjoyment was a major part of my own pleasure. So I took it easy, humping tenderly into that spectacular rump, stretching Liz's little butthole one shallow thrust at a time.\n\nIt was amazing to watch my fat cock slowly disappear inside her ass, gobbled up by her insatiable, stretched out butt-ring. The only thing that could beat that visual was the feel of Lizzie's anal depths opening up for me and then clinging to my dick as I delved deeper and deeper into her snug slippery rectum. Like she asked me, I kept gradually packing Lizzie's ass with my cock, pushing myself into her anus at a gentle, unhurried rhythm. I waited for her to stop me at some point, but no word escaped her wide-open mouth except for a chorus of moans and sighs of delight. \n\n\"Uuuhh, yes, keep going... Give me all of your cock,\" she pleaded in a husky voice. \"I need you deep in me uuhh! So big in my ass... Keep filling me up, Russ, open me! You stretch me so good, baby... Uuuuhh!\"\n\nA few more gentle pushes did the trick and my low-hanging ballsack bumped into Liz's dripping wet labia. I could almost feel her clit-rubbing fingers whirling away as I gloried in the irreplaceable sensation of being once again fully embedded inside my sweet Lizzie's slick cock-hugging rectum. \n\nSheathed from tip to root in that warm velvety tightness, I leaned over Liz's arched back and rested my head beside hers, kissing her neck as I murmured in her ear. \"I'm all the way in your ass, Lizzie! Ohhh fuck, I love how your ass feels around me... Your tight little asshole is so good, Liz... So fucking good!\"\n\n\"Uuuuhh yes, yeeees!\" Lizzie cried out, writhing underneath me while her digits went crazy on her clit, slapping it with squishy wet sounds. \"You're so deep in me, I love it! Uuuhhh Russ, your cock feels amazing, I'm so fucking full of you... I think I'm... Uuuhhh! Ohhh my god, I'm... Uuuhhh!\"\n\nIn a heartbeat, the snug pressure of her bowels enveloping my cock increased tenfold. Lizzie's eyes snapped open and the perfect O of her mouth let out a choked squealing yelp as she started cumming with my dick jammed balls-deep up her ass. I groaned too while her clingy butthole clamped around my thick root and her anal walls began clenching and unclenching, caressing my shaft in a sequence of delicious tugging spasms.\n\nGrabbing hard onto her bouncy bubble-butt, I gritted my teeth and held perfectly still inside Lizzie's rubbery rectum, moaning with pleasure. While I basked in the augmented snugness of her climaxing anus, I strained not to succumb to that incredible pulsating warmth just yet. It wasn't easy, especially with Lizzie's wails of release and the erotic visual of her shuddering bent-over frame adding to the intensity of the moment, but I managed to ride out her anal climax.\n\n\"Fuck, Lizzie, you were squeezing me so good, \" I grunted once her rippling bowels relaxed their grip around my pole and she started to descend from her peak. \"It was like you were sucking my cock with your ass, I almost came!\"\n\nHer answer was a long, satisfied sigh. Her lips were parted in a beatific smile and her eyes were barely open but they sparkled with pure joy and satisfaction behind her glasses.\n\n\"Well,\" I laughed as I gently stirred my aching boner inside the buttery sheath of her rectum, \"someone looks happy!\"\n\n\"Mmhh, soooo happy...\" Lizzie purred, wiggling her curvy ass. Her pussy-diddling fingers, though slower and lazier, were still working her snatch and clit as she basked in the afterglow. \"I've been waiting for this for weeks now, Russ, I really needed it. But I want more,\" she said, locking gazes with me, speaking lustfully between raspy breaths. \"I need to feel your cum pumping inside me, Russ. I want you to fuck me hard and fill my ass with your cum.\"\n\nHer dirty talk and the honest desire in her voice made me throb inside her tight anal tunnel. \"As you wish,\" I grinned, sliding a couple of inches of my buried cock out of her ass, \"my beloved little buttslut!\"\n\n\"Awwwhh, yeees!\" Lizzie whimpered as I pushed back inside her. She had an impish smile on her lips as she cooed: \"So I'm your buttslut, uh?\"\n\nI just shrugged and smiled back at her as I started withdrawing from her rubbery rectum again, pulling more of my length out and sliding it back in a bit faster, making Lizzie gasp as I filled her tight ass full of cock all over again. \"Remember,\" I chuckled, \"I also said beloved, not just buttslut!\"\n\n\"Yeah, I heard. I like that aahhh...\" she cooed, her giggle turning into a squeal as I slipped my shaft out of her asshole and glided back in again, harder now, making her pillowy bubble-butt jiggle as I pressed myself firmly into her pliant anus. \"Oowhh I love it, Russ... Uuuhh... I love being your buttslut! Uuuhhh yeees!\"\n\n\"And I love being your devoted buttfucker, Liz,\" I replied as I gripped her plump rump in my hands and started sawing my boner into her tight slippery asshole at a steady rhythm. \n\nTo the lascivious chorus of our moans, I sodomized my sweet Lizzie with increasingly longer thrusts, until only my spongy glans was enveloped in the tight grip of her sphincter on the out-strokes. At the same time, I made my gliding in-strokes gradually faster, helped by the exaggerated amount of lube we had used and by the minimal resistance offered by Liz's willing little anus. Her tight asshole was so relaxed and welcoming to my anal penetration that it felt like she was sucking me in just as much as I was plowing into her. \n\nAt each pass I gloried in the sight of her oily dilated butt-ring clinging desperately to my glans in that brief moment preceding another swift in-stroke. I was high on the sound of Liz's groan of disappointment turning into a sigh of anal pleasure as the momentary emptiness in her bowels was replaced by more and more of my hardness gradually filling up her ass. It made me grunt with ecstasy to feel her rubbery anal walls reshaping themselves around my cock as I watched her docile anus slip over inch after inch of dick-meat, until my whole veiny tool disappeared inside Liz's pink rubbery hole again. \n\nThe sound of our synchronized moans unfailingly marked the magic moment when I was all the way inside her ass once more, holstered in the warm snugness of my beloved Lizzie's rectum, stretching and stuffing her tiny asshole to the limit for our mutual pleasure. It was heavenly to feel her buttery anal passage hugging my length from tip to base. I always lingered there for an instant before withdrawing and starting that intoxicating buttfucking cycle all over again. ",
        "Turned on like crazy, I jammed my thick dick into that incredible asshole harder and faster and deeper at every pass. It was so good to assfuck my Lizzie and to know that she was liking it too, but it was even more exciting to realize that we were together now and we could do this as much as we wanted. That thought egged me on to put all I had in each ass-drilling stroke during our passionate anal coupling. With a smile on my face and my hands full of the curviest, plumpest, most beautiful ass in the world, I just kept riding Liz's rump ever more wildly, feeling her shiver in pleasure as I mounted her with abandon, lustfully pistoning my cock into her warm slippery rectum.\n\nI was pounding Lizzie's asshole with reckless butt-stretching thrusts when I felt my balls tingle and my cock throb with impending release inside her smooth anal depths. \"Liz, I'm close,\" I blurted out, panting. \"Ohhh fuck! This ass... Your tight little asshole is gonna make me cum so hard!\"\n\n\"Uuhh yeahhh, I wanna feel you cumming inside me, baby,\" she gasped, humming with delight as I picked up my pace even more, vacating and then cramming her willing rectum with deep, frenzied plunges. \"Uuhhh more! Oohh give me more, Russ! Owwwhh like that, yeees! Ream your buttslut's horny asshole owwwhh!\" \n\n\"You want it harder?\" I grunted as I plundered Lizzie's butthole at breakneck speed, jarring her whole voluptuous frame at each clapping impact of my hips against her meaty bubble-butt. \n\n\"Yeeeees, harder, deeper!\" she cried out, choking on her words as I kept furiously pounding my cock into her slick rectum. \"Uuhhh... Aawwhhh god I love iiiit!\" she yelled out, slapping her clit and pushing her rump back against me, meeting every single one of my ass-splitting thrusts, impaling herself on my shaft with depraved passion. \"Fuck my ass, fuck my ass, fuck my aaaaass!\"\n\n\"Ahhh Lizzie,\" I grunted, my eyes bugging out and my vision blurring as a massive climax rushed my way. \"Here I cum, baby! Here I cuuuum!\"\n\nI managed a few final slams, then I came. Howling out my climax, I rammed my cock balls-deep inside Lizzie's asshole and exploded, flooding her rectum with jet after thick jet of sperm. Her gasping yelps and the tightening of her anal walls around my pulsing meat not only told me that she was cumming too, but also made my own orgasm even more intense. I was so turned on that I kept bucking my hips into her pillowy buttcheeks, making her beautiful plump ass jiggle deliciously as I kept pushing myself deeper into her, spraying her bowels with my semen. I came so hard and so much that I felt light-headed from the sheer magnitude of the pleasure that Lizzie's asshole was giving me.\n\nEven after her orgasm abated and her dick-milking anal squeezes faded back to her previous enveloping snugness, I was still humping weakly into my sweet Lizzie's cum-sloppy anus. I could feel my gooey load squelching around my barely softening meat as I stirred Liz's creamy bowels with shallow slow-motion strokes, absentmindedly pushing my semen as deep into her rectum as possible. Liz's panting coos of appreciation and the clingy feel of her asshole holding my cock in its hungry grip kept me semi-hard as I indulged in this post-orgasmic anal thrill.\n\nSated and glowing, I sighed with joy as I leaned over Liz's arched back and kissed the nape of her neck, sniffing her sex-tousled ponytail to fill my nostrils with her unique scent. Feeling me shift while I was still plugging her ass, Lizzie parted her legs and let her knees slide back on the sheets until she was lying down on her tummy and I was draped over her gorgeous body. The soft fleshy firmness of her ass splayed against my hips had such a warm smooth feel to it, it reminded me of her huge boobs, whose sides were now bulging out under Lizzie's prone body.\n\n\"Are you okay, Liz?\" I whispered as I nuzzled her neck, planting my forearms by her sides so as not to weight on her too much. \"I'm not squashing you, am I? I can roll off if you want.\"\n\nSleepily, with a smile on her lips and her glasses comically askew on her beautiful flushed face, Lizzie turned her head to look at me and shook her head no, murmuring: \"Mmmh no, it's actually nice... I like feeling you on top of me.\"\n\n\"You don't mind this either, I guess...\" I grinned, adjusting her glasses for her as I pressed my plump cock into her pillaged asshole, making her squirm underneath me.\n\n\"Ohhh no, I don't mind your cock in my ass, baby,\" she said, sighing as she clenched her butt-ring around my chubby boner, eliciting a groan from me. Before I could close my mouth, I felt Lizzie's warm lips on mine.\n\nWe kissed softly and lovingly, our sweaty bodies rubbing against each over, close and tightly joined, my cock still sheathed in her ass, her anal depths flooded with my seed. While we made out, I stayed still on top of her but I couldn't resist grinding my shaft inside the slippery confines of her rectum from time to time. Without breaking our lip-lock, Lizzie chuckled into my mouth as she reciprocated my lazy humping by working her anal muscles around me, treating me to a series of slow, tender anal massages that made me pant as we kept kissing ever more passionately.\n\n\"This is so good,\" she purred eventually, unclasping her pouty lips from mine. Being deprived of her warm kisses didn't feel so bad when she whispered: \"I love you so much, Russ. It's so perfect that we're together like this, completely.\"\n\n\"I love you too, Lizzie,\" I replied, giving her a quick smooch. \"I could never feel so close to anyone but you. I mean it.\" \n\n\"I know, it's the same for me,\" she said. Then with a bright laugh, she added: \"So why didn't we do this earlier?! Sure, I had some fears about sex messing up our relationship, but now it feels so...\"\n\n\"...natural?\" \n\n\"Yeah,\" she nodded, chuckling, \"I'd have accepted 'logical' too, though. Or 'unavoidable'.\"\n\nWe shared a laugh that suddenly turned into a groan for me as Lizzie resumed her tugging anal caresses. I pushed my embedded cock a bit harder into her cum-sloppy ass in response, making us both moan. Nuzzling her nose as she wiggled her cushiony rump under my groin, I mused: \"It's lucky we are not actual siblings, you know... I'm not sure I could have resisted you even if you were my sister.\"\n\nThat made her giggled. \"Russ, even if you were my brother, I wouldn't want you to resist at all!\" \n\nThe hotness of that idea, the heartfelt honesty of her words and the depth of affection they declared made my cock twitch inside Lizzie's cozy rectum. My reaction didn't go unnoticed, of course.\n\n\"Ohhh, so that turns you on, uh, the thought of siblings having sex?\" Liz asked mischievously, squeezing my recuperating cock more firmly within her rubbery bowels. \"Well, I guess you'll like some of my newest stories then...\"\n\n\"Whoa,\" I gasped, \"you've started writing porn stories!? That's so hot!\"\n\n\"The correct term would be 'erotica', thank you very much,\" Lizzie replied, affecting a look of hurt dignity. \"But yeah, I've written a couple of dirty stories based on us. Well, 'us' under the guise of two elf twins, brother and sister, who need to reclaim their dead father's throne from their evil bitch older sister. Same old plot, I know,\" she said apologetically while I just stared at her slack-jawed, \"but there's a lot of sex between the two of them, tons of anal of course, and then some threesome stuff with the older sister too. I dunno, it's a stupid idea, I was just so horny while you were away...\" she trailed off, shrugging dismissively.\n\n\"Why didn't you tell me this earlier?! You absolutely must read me those stories! And it doesn't sound stupid at all, Lizzie, it sounds hot as hell,\" I said, cupping her chin in my hand as I kissed her deeply. Jolted to life by the warm tightness of her ass and now by the idea that she was writing fantasy erotica loosely based on us, my cock was regaining its steely stiffness by the second. \n\nWhen I freed Liz's lips from my suctioning kiss, she was smiling coyly. I knew that look, it was her timidly happy face, the one she had every time I encouraged her to do something she wasn't sure about and that she would eventually end up acing, because she's awesome. \n\n\"You really think I might be on to something with the smutty stories, Russ?\" \n\n\"Of course,\" I replied, flexing my dick in her ass, \"I haven't even read them yet and look what they're doing to me!\"\n\n\"Mmmh yeah, boners don't lie,\" she grinned seductively, clenching her asshole around me, bringing me to full hardness. \"Maybe we can read them later,\" she winked, \"after you fuck my ass again?\" \n\nGrinning, I straightened back on my knees, pulling Lizzie up with me. Before we were back in a doggy style position and I could start buttfucking her again, Lizzie looked over her shoulder and reached a tiny hand to her curvy rump, laying her fingers over mine. \"Can we do it missionary this time? I want you to suck my tits while you stretch my asshole.\"\n\nMy boner pulsed with arousal inside her rectum at Liz's lustful words. Still, I couldn't suppress a snicker. \"Jeez, Lizzie,\" I said playfully while we rearranged ourselves, my cock always holstered inside her ass, \"I'd have thought you might say you want us to look lovingly into each other's eyes or kiss sweetly and stuff, but okay. I guess I'm fine being the romantic one in this couple!\"\n\nLying on her back while I knelt between her spread open thighs, Lizzie rolled her eyes and scrunched her mouth in a pretty pout. \"Hey, I'm plenty romantic too!\" she declared, raising her hips while I put a pillow under her back. \"I opened up my tight little asshole for you with a buttplug, remember? Now that's a pretty romantic gesture,\" she concluded solemnly, managing to remain serious for all of two seconds before giggling, \"and kinda pleasurable too...\" \n\nWe were both chuckling as Lizzie raised her legs up and rested the back of her knees on my shoulders, allowing me perfect access to her ass. With her pretty little feet dangling on my back and her arms locked around my neck, I leaned down and kissed my smiling girlfriend, pushing my hard-on as deep inside her ass as it could go. \n\nLizzie's big tits were squashed between us and her puffy nipples grazed my chest while I started moving in her slippery little hole, slowly withdrawing my cum-coated boner and then sliding back in her ass. With her legs raised so high and her back propped up by the pillow, her asshole was completely exposed to my humping motions. That, combined with the ungodly amount of spunk I had pumped into her bowels, made it easy for be to get into a nice buttfucking rhythm. \n\nFor a while we just kept making out while my cock sawed in and out of Lizzie's asshole in long, deliberate thrusts. We synced without even speaking, just letting our bodies read the other's signals. Whenever my length was fully buried inside her rectum, Liz squeezed her anal walls around me, milking my meat on the way out, making me pant into her smooching mouth. As I slammed back inside her welcoming asshole, she opened herself completely to me, relaxing her butt-ring and letting me feel just the natural delicious pressure of her clingy anus sliding along my shaft as I filled her ass again. \n\nHaving sated most of my anal frenzy during our previous buttfuck, I was calmer as I entered and re-entered the velvety warmth of Liz's ass. Able to enjoy our sodomy without the urge to cum egging me on, I plowed Lizzie's butthole at a mild pace, savoring every contraction of her rubbery anal depths and enjoying the tightness of her sphincter, yet trying to stimulate every inch of her smooth, slippery rectum. While her bed creaked under us and our tongues danced, I made love to my adored Lizzie's ass for long, incredible minutes, high on our intimacy and thrilled by the way her forbidden little hole seemed to have reshaped itself to envelope my cock in a slick massaging grip. \n\nWe eventually had to break our passionate soulkiss when we were just too worked up and short of breath to keep sucking face, but that didn't stop me from paying homage to Lizzie's beauty. Straightening up a bit, I let her legs slide down from my shoulders so she could wrap them around my back instead. Without interrupting my steady butt-stretching strokes, I cupped Liz's jiggling tits in my hands, my fingertips going straight for her stiff pink nipples. \n\n\"Ohhh fuck yes, touch my titties like that,\" Lizzie sighed, her hand reaching down to her sopping wet pussy, her digits flicking her clit as she bucked her hips up to meet my forceful ass-delving thrusts. \"Pinch my nipples, baby! Harder aahhh... Hardeeeer!\"\n\nWhen I leaned down and took one of her engorged buds in my mouth, sucking avidly on it and nipping at her succulent areola with my teeth, Lizzie shrieked out. The wet squishing whirls of her digits torturing her clit were the last sounds I heard before her cry of release filled my ears.\n\n\"Ruuh-uh-uuh-usss! Uuuuh I love youuu,\" she yelled out, thrashing underneath me, pinned down by my cock pumping relentlessly into her ass. \n\n\"Love you too, Lizzie,\" I grunted through a mouthful of tit-flesh. While I sucked and kissed her boobs, I turned my gaze up to bask in the sight of my beloved Liz cumming while she yelled out my name, her face transfixed with orgasmic ecstasy, her asshole clinging to my pistoning cock and squeezing me amazingly while she screamed out in pleasure.\n\nI was pretty much forced to slow down my butt-plowing strokes while Lizzie's sphincter convulsed around me and her rippling rectum tightened its tugging hold around my meat. I didn't really stop assfucking her, though. Humping into her climaxing asshole while I feasted on her swaying jugs, I rode out Lizzie's orgasm, glorying in the wet feel of her girl-cum trickling down in rivulets from her pussy, drenching our groins and lubing up her pliant butt-ring with her sweet delicious nectar.\n\nRunning my hands all over her buxom breasts, I waited until Lizzie's eyes opened again and her hand stopped diddling her pussy. As soon as our gazes met, I smiled and slid my hardness balls-deep inside her ass, resting there while I asked: \"More?\"\n\nLizzie's brown eyes glinted with lust behind her glasses and her whole pretty face brightened up. Unlocking her feet from behind my back, she hooked her hands under her knees and pulled her legs high and wide, offering herself to me in full. \n\n\"Yeah, give it to me hard and deep, Russ,\" she nodded, biting her lips in lascivious anticipation as she invited me to pound her ass, almost savoring the pleasure already. \"Don't go easy on me, baby, stretch my ass good and make me cum like the dirty little buttslut that I am!\"\n\nNo aphrodisiac could have turned me on more than my sweet Lizzie's dirty talk. All I could do was let out a guttural growl followed by a squeal from Liz while I started forcefully moving inside her cock-stuffed anus. Her eyes bugged out for a moment as my groin clapped against her asscheeks and my length filled her asshole completely. Then she moaned and her eyelids descended over her glinting orbs, her lips parting as she let out a choked whimper, cooing as my withdrawing pole stimulated her sensitive anal passage. Seconds later, I was slamming away at her ass with all I had. \n\nTotally submissive to the anal drilling I was giving her, Lizzie wasn't working her asshole around my cock anymore. Unable to focus on squeezing me to hold my meat inside her anus when I glided out, she just lay there, wailing in animalistic delight, shuddering with her eyes closed, gasping as I rammed my thick dick balls-deep up her ass at every pass. Her lust-distorted face and the erratic spasms of pleasure rippling through her snug rectum reassured me that she was liking the hard buttfucking I was giving her, enjoying each ass-stretching thrust just as much as I was. \n\nI had been reaming her tight asshole for less than a minute before Lizzie let go of her legs and brought both hands to her dripping, puffy little pussy. It drove me crazy with arousal to watch her digits sliding frenziedly in and out of her weeping slit while the fingertips of her other hand pinched and rubbed and slapped her clit. \n\nGritting my teeth as I pounded my cock harder into her ass, I grabbed Lizzie's shapely splayed-open thighs and pushed them further back against her chest. With her knees pressed outside her huge tits like that, Lizzie's jutting jiggling mounds bulged out even more, her nipples pointing up at me as they traced circles in the air in time with my brutal ass-splitting strokes. \n\nWhile she yelped and hissed and tormented her clit, I panted hoarsely and pumped my aching boner recklessly into Liz's hot clingy anus. Past any restraint, we were reduced to two rutting beasts, both devoured by the intense, almost surprising pleasure that our passionate sodomy was giving us. Through the haze of my anal frenzy I kept my eyes trained on Liz's, feeding off the mischievous, needy light sparkling in her half-lidded gaze. We couldn't even talk properly, but the primal grunts and moans we shared while I drilled her ass with single-minded fury were enough to tell each other how much we were loving that wild buttfuck.\n\nMy heartbeat was drumming madly in my ears and I felt my boner twitch and harden even more inside Liz's ravaged asshole when her choked, lust-dripping words registered. \"Cuuhh... Uuuuhh! I'm mmh... Uuuhhh! Cuuh-uhhh-uuUHH-UHH-MMIIIING!\"\n\nHer tight slippery butt-ring clenched firmly around me and the erratic massaging spasms of her rectum became a sequence of constricting cramping tugs that suddenly made Liz's anal passage feel several sizes too small to fit my throbbing cock. I threw my head back as I strained to keep sliding my raging boner as fast and hard into her rubbery bowels as I had done so far. But neither my determination nor the slick frothy layer of cum and lube coating her insides could help me against the squeezing, dick-milking pressure of Liz's anal walls clamping down so wonderfully around me. \n\nAs Lizzie came spectacularly, screaming and thrashing and sinking three fingers in her wet pussy, I growled in pleasure and buried myself forcefully inside the delicious tightness of her orgasming rectum. Trembling as I felt by balls tingle, ready to pump another huge load into her asshole, I stammered: \"Gonna cum, Liz... Aaghh! Gonna fill your ass with so much cum!\"\n\nSuddenly, as if my words had sobered her up a bit, Lizzie's unfocused eyes snapped wide open. Through whimpers and gasps of release, she sobbed out something I never thought I'd hear her nor anyone else say to me: \"In my mouth! Owwwhh... Pull out of my ass and cum in my mouth, pleeease! Uuhhh... I need to taste you, Russ! Aahhhh... Let me drink you, babyyyy!\"\n\nThat hit me, really hard. I didn't think though, I just acted. I could feel my surging cum rush along my throbbing erection as I slipped out of Liz's plundered asshole with a squishy popping sound. In a daze, I swiftly straddled her heaving chest and held my pole at the base, my cum-coated shaft between her tits, my engorged cockhead right below her chin.\n\n\"Cum on my face!\" Liz yelled, flushed and panting, totally consumed by lust. \"Give me your cum, pleeease!\"\n\nThe moment I saw Lizzie stick out her tongue to reach my pulsing tip, I started cumming like a geyser. My first huge rope of cum hit her full in the face, splattering across her cheek and over her glasses, painting a sticky pearly white line from her forehead to the corner of her wide open mouth. An instant later, while a second spurt of semen blasted from my cock and plastered her parted lips with thick dollops of seed, Lizzie grabbed my butt with one hand and wrapped her tiny fingers around my girth, pulling me urgently toward her lips. Liz cooed and I howled with lewd joy as she guided my glans inside her mouth and started sucking avidly on me, letting my third massive spurt flood her warm oral cavity with semen. ",
        "Pumping my spraying boner with her little hand, humming and closing her eyes while she savored my sperm, Liz sucked me with such greedy hunger that she looked positively starved for my cum. I almost passed out from the pleasure and the sheer hotness of the situation. My orgasm reared up while I watched my sweet Lizzie's cheeks bulge out and her throat work hard to swallow down my liquid essence as fast as possible to keep up with the barrage of spunk I was feeding her. The feel of my cum submerging my cockhead and whirling around in her mouth as she tasted each drop of my seed before gobbling it down made my whole body shiver, it was just so erotic. \n\nEven when I was done ejaculating, Lizzie kept jacking me off to draw more semen from my drained balls. As she masturbated me, she let me slip out of her mouth and started brushing her lips and swirling her tongue all along and around my deflating cock, lapping up the slick patina of churned cum from the first load that I had pumped into her ass. The intoxicating vision of my Liz turned into a sperm-starved cumslut undid me completely. \n\nAs I crashed down on the bed, Lizzie mewled from the displeasure of being temporarily deprived of my cock. Seconds later though she was mewling contentedly again, kneeling down beside me with her ass in the air and her face down on my crotch, her lips and tongue once again slurping on my dick. Still panting, I automatically reached for her spectacular plump ass. I kneaded and massaged her fleshy globes while I spread them apart to reveal the gaping hole of her well-fucked anus. The sight of Lizzie's dilated butt-ring glinting with my oozing cum sent a jolt of life to my wilting pole, turning the delight of this unexpected conclusion to our sodomy up another notch. \n\nDreamily, while I held her sumptuous round rump in my hands and she licked away at my dick like a naughty kitten, I watched Lizzie's sperm-leaking and still pulsating asshole slowly close tight again. Before my awe-struck eyes, her dilated sphincter gradually regained its crinkled rosebud appearance, shrinking closed until it was once more the puckered tiny orifice that we both loved to get stretched-out so much. As I let go of her fleshy buns and collapsed back against the pillow, the obscenely beautiful image of Lizzie's conquered little asshole, puffy and reddened, with a thin rivulet of cum trickling out of it, etched itself in my brain indelibly.\n\nEven after she finally let go of my spent cock and she sat up on her knees beside me, Lizzie didn't snap out of her temporary cum-craving hunger. Her beautiful face was still flushed with arousal and her big jutting tits were swaying in time with her heaving, slowly calming breaths while she methodically scooped up the ribbons and dollops of semen plastered all over her visage. \n\nDespite her swallowing efforts, two thin rivulets of milky seed had dribbled out from the corners of her mouth and were now trickling down her chin and neck. Liz lost no time gathering them with her fingers and guiding that creamy treat to her mouth before doing the same with the few stray globs of seed that had ended up splattered on the ample upper slopes of her tits. \n\nFor some reason though, the hottest part of Lizzie's depraved cleaning routine was the moment when she took off her glasses and licked off every last trace of cum plastered on the lenses. Then and only then, after putting her glasses back on, she turned and exhaled a contented sigh, smiling sweetly at me. I must have had the most mind-blown expression in the world because Lizzie furrowed her brown as she lay down beside me, pressing her huge boobs into my chest and draping her smooth pale thigh over my leg.\n\n\"Uhm, Russ? Say something, please, you're freaking me out, baby\" she said tentatively while I just stared at her slack-jawed, too stunned to speak. \"Did this... I haven't just grossed you out, have I?\" she asked, her smile turning into a grimace of shameful sadness. \"I mean, I know it might look nasty, going ass to mouth, but I swear I was squeaky clean and I wanted to eat your cum so badly, I was just so turned on... I mean, it felt right at the moment, and you lick my asshole all the time anyway so I figured mmhph!\"\n\nMy kiss put and end to her rambling and totally unnecessary apology. I felt Lizzie relax in my arms as I pulled her into my embrace and held her tight to me, my gestures speaking of my appreciation of her sweet depravity much better than any words could. We kissed long and deep, interrupting our make out session only to take a breath and whisper our mutual love. Then our mouths were pressed into each other again, our lips and tongues dancing together passionately.\n\nWith one last sucking smooch, Lizzie eventually unclasped her lips from mine and rested her head on my chest, sighing in exhausted satisfaction. Her messy auburn pony tail was tickling my nose, her signature scent going to my head as I murmured: \"You're incredible, Lizzie. I always knew you were awesome, but now you're beyond even that. You're just so beautiful and sweet, and so damn hot. I mean, this was just...\"\n\n\"...epic?\" she concluded for me, turning her pretty face up and smiling. \n\n\"Yeah. Legendary, even. And it's not just that we have anal sex, it's seeing you cum so hard from it that drives me crazy. Not to mention the buttplug and going ass to mouth, I mean...\" I trailed off, grinning with excitement but feeling fuzzy with emotion at the same time. \"You're the best, Liz.\"\n\n\"Aw, baby,\" she smiled, snuggling into my arms while I caressed my way down her back until my hand reached her round plump bubble-butt. \"It's not only me though. I am how I am because you're with me, Russ. There's no way I'd ever feel so relaxed and free to be sexy and slutty with anyone else. Besides, you were pretty awesome too, pounding me so hard, opening my tight little asshole with that big fat cock of yours, oh my god, even when it hurt a little it felt soooo good, baby! So,\" she chuckled, \"I guess we'll have to share credit and both be the best!\"\n\n\"I can live with that,\" I said, laughing along with her. \"Still, after tonight you've officially acquired the title of 'anal queen', Liz.\"\n\nThat made her giggle even harder. \"I guess I really did earn that, uh? I still like 'buttslut' more, though, but as long as I'm yours, either one is fine.\"\n\nI hugged her tighter, squashing her big jugs between our bodies and making her purr as she wrapped her arms around me, clutching at me as if she was trying to fuse the two of us together. \"Of course you're mine, Lizzie,\" I said, kissing her head, \"you are my sweet adored buttslut.\"\n\n\"Or,\" she said, looking at me musingly, \"since we are together now, how about 'buttslut sweetheart'?\" \n\n\"Sounds perfect,\" I replied, resting my forehead against hers and pressing my lips into her soft warm mouth. Then I snickered and added jokingly: \"Of course, there's no telling what's gonna happen once we give your pussy a try. Maybe it will lead us both astray and we'll forget all about your tight little asshole...\"\n\n\"Yeah, right,\" she snorted, wisely not believing for a second that either of us would get tired of assfucking any time soon. \"Worst case scenario,\" she pondered, half serious and half kidding, \"you'll have to pound both my holes and pump them full of your creamy cum until you're wiped out, then I'll suck you hard again until my jaw aches and we'll start it all over again until we both pass out. Deal?\" she asked, grinning wickedly.\n\n\"Sure,\" I quipped, \"deal!\"\n\nWe both laughed thinking of that scenario, knowing that it might actually turn out to be pretty accurate after all. Still, for the time being, Lizzie and I were both perfectly happy just snuggling together, floating away in our happy bubble, our bodies wrapped around each other, safe and secure in the warmth of our love."
    ],
    "authorname": "ZenZerker",
    "tags": [
        "anal",
        "ass",
        "oral",
        "ass to mouth",
        "love"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/backdoor-sweetheart-ch-02"
}
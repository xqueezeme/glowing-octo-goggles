{
    "title": "There and Back Again Ch. 018",
    "pages": [
        "Chapter Eighteen: Templar Twister \n\n\"Sierra, I can see that you're a very useful person to have around, with your impressive knowledge of what is about to happen \u2013 however it is that you come by it.\" Wynne shot me a look that was part suspicious disbelief and part frustration. \"However, I suspect that you'd be less than helpful if you ended up dead before we finished this. As the person who's going to have to save you if you get yourself injured, can I respectfully request that you stay out of the fighting when possible?\" \n\nI appreciated that she didn't use my less than epic fighting skills as the excuse, though the condescension was still galling. On impulse I stuck my tongue out at her in lieu of a response, and she actually choked as a laugh tried to escape while she still wore that sour expression. Feeling terribly immature, and quite self-satisfied at the same time, I turned away and walked to the next door I knew we had to open if we wanted to move on. \n\nEventually everyone else joined me, and Alistair pushed open the door. We fought our way through the rest of the fourth floor, none of us enjoying the dragonlings that seemed to have taken over. Sten largely took to stomping on them, which was both gross and funny, and wouldn't have worked for anyone shorter than the giant. I stayed back as requested, though we got jumped from behind somehow a couple of times so it didn't help as much as Wynne had hoped. \n\n\"Andraste's flaming sword, who keeps dragonlings in a sodding place of residence?\" I couldn't agree with Alistair's sentiment more, even if the curses still made me giggle. \n\nWe finally found Cullen, and it was even worse than the game had lead me to believe. The poor kid's mind was broken, and I truly wondered if anyone would ever be able to put him back together. Wynne and Aedan both tried to reassure him as much as possible, but none of us were willing to slaughter all the mages out of hand - it would have ruined any chance at keeping Arl Eamon's family intact, in addition to just being very, very wrong - and we had to leave him, sobbing and praying. \n\nAedan had convinced Wynne to take and use the Litany, so after a brief reminder, and a warning to everyone to protect the mages who'd not yet been forcibly turned, especially Irving, we finally headed up the stairs into the Harrowing chamber. \n\nAs in the game, Uldred was surrounded by Abomination lackeys. A couple dozen bound, exhausted, injured mages were on the floor around the room, and Uldred's abominations were in the process of performing some sort of ritual which turned a poor young mage, screaming defiance, into yet another abomination. \n\nAedan again tried to talk Uldred down; I admired his diligence, but come on, the guy's an abomination! Finally realising that a fight was inevitable, Aedan slipped around to his side as Alistair bashed him in the face with his shield. It left Uldred with a bloody nose, and a rather nasal pitch to his voice. Note to self: hug Alistair later. Then he turned into the form of a pride demon. \n\nAs requested, I stayed back. Not that it was difficult to do so \u2013 I was terrified, and felt sick. The abominations were hideous, misshapen things that were much worse than I'd imagined in game. The smell of the corruption in the rest of the tower had inured me somewhat, but it was stronger in the Harrowing Chamber. Instead of getting involved, I watched for signs that Uldred was about to turn another mage and reminded Wynne to use the Litany. It's a good thing Wynne has the book \u2013 I'd probably freeze up and forget how to read. Sten, Prince, and Leliana took on the three other abominations. \n\nThe strategy seemed to be working until somehow the demon that had been Uldred managed to kick Aedan back and push Alistair over, then drain Wynne's mana - the elderly woman slumped, and I worried she'd actually fall over. Quickly, before anyone could recover, he caught both Alistair and Aedan with spells. Aedan actually froze into a man-shaped popsicle, and Alistair appeared to be paralysed. Uldred started chanting again, and I was suddenly terrified that he'd manage to shatter Aedan like we'd done to some of the demons earlier. \n\nI took a few steps forward, planning to charge him with my dagger, but my fear was almost overwhelming. I heard Wynne reading from the Litany again, and Sten roaring at an abomination as he cut it down. I screamed in fear, and suddenly the hair on my arms rose like it had when I'd seen darkspawn Emissaries in past. A blast sounded, I could feel a rumble across the ground, and several of the bound mages appeared to faint. At the same time, both Uldred and the one remaining lackey started leaking blood out of every orifice. Uldred screamed, the word 'no' echoing across the harrowing chamber, as both he and the other abomination slowly crumpled to the ground. \n\nSuddenly there was near silence. I could hear Alistair panting, still paralysed, as well as Wynne and Sten. Leliana lowered her bow, and there was the tinkling sound of falling glass as the ice broke away from Aedan and shattered on the floor. We all looked around at each other, trying to determine what had happened. \n\nA few of the bound mages groaned, stirring, and Wynne rushed over to one, a grey-haired man I recognised as Irving. The rest of us spent a few minutes untying mages, rubbing bound hands to get the circulation going, offering sips of water and what reassurances we could. They all claimed to have been drained of mana, like Wynne, though they weren't quite sure how, but it slowly started recovering as they were able to rest and relax. \n\nFinally Wynne approached with Irving in tow, introducing him to our little group. When she got to me, he stepped forward and shook my hand before she could finish. \n\n\"Thank you, templar, for your assistance. I don't know that many could have managed both Uldred and the other abomination like that. I shall tell Greagoir that he has trained his people well.\" \n\nAs a group, we all stared at him in open-mouthed shock. I was the first to react, stepping to the side so Irving and I both faced Alistair. \n\n\"He's the templar, First Enchanter, not me. You must have been confused.\" \n\nAlistair objected. \"Almost templar. But I didn't actually use any templar abilities in that fight.\" \n\n\"No, young lady, I was not confused. I may be old, but I am not yet senile. I've been exposed to templar abilities before, though not as powerful as your own. There's no mistaking the source when someone smites you, once you've become used to it. I don't know which specific ability you used, but you drained the mana from every mage in here, including Uldred and the abomination.\" \n\n\"But I'm not a templar.\" I stopped myself from babbling the rest of my train of thought...I've never trained as one, or taken Lyrium, or spent time in the Chantry. I can't even fight. And I've definitely never met Greagoir! I was suddenly very worried. If Irving told the templars that I used one of their abilities, I doubted they'd be lenient. They would want to know where I learned it, how I got my hands on Lyrium...they'd imprison me, or worse. And then when I disappeared into thin air, they'd label me an apostate, assuming Irving was wrong. I pulled Aedan and Alistair aside and explained my fears. \n\n\"He must be wrong. I'm not a templar - how could I be? I'm not even from Thedas.\" I suddenly had a thought. \"The power surge! Maybe that's what happened.\" Seeing the confused looks on their faces, I tried to explain. \"At home, my body is being kept in a...uh...a building that healers use to take care of sick people. And like I've said, we don't have magic so we rely on machines. In the building are machines that can monitor someone's illness. A little while back, when we fought that revenant, there was a...sort of like a bolt of lightning hit. It broke a bunch of the machines. I wondered if I might have somehow conducted the power through whatever connection I have to Thedas and that's what killed the revenant. Maybe it happened again? Could that be what Irving felt?\" \n\nNo one could confirm or deny that theory, and so, shrugging, we turned back to the problem of a group of mages thinking I was a templar. We pulled Wynne into the discussion, glossing over who I really was but promising to explain later; she immediately saw the problem, with an added twist: \n\n\"Even if we can convince all of these mages not to mention you, Greagoir knows everyone in the tower and that you weren't with the group when they entered. In addition to explaining templar abilities, we need to explain your existence.\" My face must have gone pale, because Aedan put a protective arm around my waist. \"I don't suppose you could just choose to, ah, pop out as you call it? If we could manage that privately before we get downstairs, they might just forget about you.\" \n\nI shook my head. \"I can't control it. Though I've been wondering if it triggers shortly after being really upset about something.\" Aedan raised his eyebrows, but I shook my head and refused to meet his gaze. \"So if one of you knows how to scare me half to death or find a convincing way to hurt my feelings really badly, then we wait around for a day or so...\" \n\n\"What about a disguise? Put you in armour with a helmet, hope no one asks questions? When we get to the main entryway, you leave right away before everything gets explained? We can all play dumb, claim we thought you were a templar from here, and when no one can find you... The mages don't know anything, and I'm sure we can convince Irving to delay telling Greagoir about you.\" \n\n\"Interesting idea, Wynne.\" Aedan looked thoughtful. \"Because the only alternative I can come up with is to tell the truth. Tell Irving, see what he thinks. Tell Greagoir. And then, if necessary, be prepared to fight our way out if they try to capture you.\" \n\n\"No, Aedan!\" The thought of them fighting the templars was freaking me out. \"Worst case scenario, let them take me. We all know eventually I'll disappear, and I can find you when that happens. It seems I can find you even when we don't want me to, so...I guess I can live with them thinking I'm an apostate.\" \n\n\"Let's try the disguise first,\" Wynne decided. \"Greagoir is an honourable man, but some of his templars are...overzealous. I don't want you left in their hands if it can be avoided. Let me go talk to Irving. I'll promise to explain everything later. I think he'll go along. You go find some armour.\" \n\n\"Wait. Wynne? One more question. What was the name of the mage who helped Jowan destroy his phylactery? Do you know?\" \n\nShe looked at me strangely. \"Solona.\" \n\n\"Where is she now? What did they do with her after Jowan escaped?\" \n\n\"She's still here, child. Under 'supervision'. Why?\" \n\n\"Do you...think Irving would let her be one of the mages who comes with us to Redcliffe?\" \n\n\"Why would mages be coming with us to Redcliffe?\" \n\n\"Humour me. Assuming that some are, can we arrange for her to be one of them?\" \n\nShe gave me another piercing look. \"I will ask.\" \n\nAedan and Sten remained to help take care of the mages and back up Wynne, if required. Prince, as usual, happily followed Aedan around. Alistair, Leliana and I went scouring the tower for armour. I wasn't sad to see my disgusting clothes go, especially once we found the locker of a female templar who was roughly my size. There was a clean set of leather armour, similar to what I'd been practicing with in Redcliffe, with a full helm. I changed, with Leliana's help, and Alistair declared me to be 'very templar-y'. We strapped a sword and shield to my back, to complete the picture, although I could barely lift them so I hoped no one asked for a demonstration of my abilities. \n\nWe met back up with our group, and we all had to assist the exhausted and terrified mages down the stairs to the main level. Once we reached the large doors Greagoir had barricaded, Irving called out and convinced him to let us through. He was a good actor, that old man; he waited, pretending to be breathless and needing a moment to gather himself, while I divested myself of the mage I'd been supporting and slipped out the front entrance with no one the wiser. \n\nOutside there was only one templar - the one who had rowed the boat over, I guessed - and I avoided him and snuck off to the side, leaning against the side of the tower entrance, hidden by a stone outcropping. I waited for what felt like hours, though was probably only one hour. No one came or left during that time, to my relief; the boat templar hadn't been paying a lot of attention, but surely if he thought he'd realise there was nowhere for me to go. Fortunately, the next time the massive door opened, my group of companions emerged, with Wynne accompanying them as planned. I fell in beside them as they headed to the boat, and sat beside the other templar, taking a turn at rowing without complaint, and without removing my stuffy helmet. \n\nWhen we docked, I got out with the group, crossed my arms across my chest and slightly bowed to the templar, who returned the gesture, and then walked away with my companions. We waited until we were out of sight of the dock before all of us let out a big sigh of relief. Leliana spontaneously hugged me, and I giggled, half-hysterical. Safe. \n\nIt was actually early morning - the night had come and gone while we battled inside, and though we were all exhausted we pushed onwards to try to make good time back to Redcliffe. Apparently the mages that were going to help with Connor were taking their own boat directly to the castle, and would likely beat us there; we had been given the option of accompanying them, but Aedan had declined, listing our own boat, docked a short ways away, as the reason. He was determined to make it there by nightfall; we would all have a day to recover onboard while we sailed. \n\nI knew by her expression that Wynne was probably burning with curiosity, but I was quite honestly too tired to talk and walk at the same time. I handed off the shield and heavy sword at the first opportunity, and Alistair chose to carry them with us in case I needed a disguise again in the future. I hoped that wearing armour would just generally make me blend in with the others, and perhaps I wouldn't be noticed at all. By late afternoon Wynne, Leliana, and I were all lagging; Sten had obviously been through worse and seemed unfazed, while Alistair and Aedan had that damned Grey Warden metabolism, so as long as they ate they could keep going much longer than the average person. Prince seemed content as long as there were new smells to be sniffed, and didn't seem affected at all by the fatigue. \n\nI was tired enough that I couldn't keep my mind out of the gutter, and it kept returning to the question of whether their stamina was also better when it came to - so inappropriate, Sierra! \n\nWe finally reached the dock where our boat waited as night arrived in full. There were apparently two cabins for us, each with two beds. I declared that I would share, since I was obviously an unplanned extra, and ended up tucked into a narrow but adequate bed with Leliana. Sten elected to sleep on the floor so the guys didn't have to share. I started to giggle when he announced this - apparently guys are weird around each other in every world when touching or sleeping is involved. With how tired I was, the giggles became guffaws, and Leliana practically had to drag me to bed with tears running down my face. I'm sure Wynne expected we would talk when we got to the cabin, but I undressed and was asleep the second my head hit the pillow. \n\nIn the morning, I was still on the boat and not in hospital, for which I was thankful. Apparently sometime during the night in our narrow bed, Leliana and I had cuddled. She was spooned behind me, with one arm loosely around my waist, and I had one foot resting on her leg. I stayed put for a while, not wanting to disturb her, and my mind wandered to other people that I would have liked spooning with in a narrow bed... but my bladder was becoming insistent and I finally had to wake her up. \n\nShe was mortified, apologising even as I tried to reassure her. Why she still thought I was a homophobe I don't know, but I finally succeeded in convincing her it was fine. What did make me laugh was that as we were discussing it, we were still in bed, cuddling. We finally untangled ourselves, which left me grinning and her scarlet-faced with embarrassment. Yay it's not me blushing for once! We took turns using the chamber pot, which only enhanced the colour in her cheeks. The bisexual bard is modest? I never would have guessed. Emerging from the little cabin, we found the others around a table virtually right outside, and I burst out laughing again as Leliana drew a variety of strange looks when she scurried away. \n\nThe only unoccupied seat at the table was between Aedan and Alistair, and directly across from Wynne. I hopped the bench, gratefully accepting some bread and cheese from Alistair, and then turned my attention on Wynne. \n\nShe jumped right in, headfirst, with the big question. \n\n\"So. Where are you from?\" \n\nI went through my usual explanation. My world, reliant on technology not magic. The 'performance' where I could watch Thedas through a window. The dizzy spells, and somehow waking in the Korcari Wilds. Coming and going ever since, usually at inconvenient times. I left out that somehow I changed the course of history, my mere presence somehow saving the King and the Commander of the Grey. I forestalled Aedan when I could see that he was about to ask what had happened in Redcliffe before I disappeared from there - this was for Wynne's benefit, for starters, and not everyone needed to know about Theron's mistake either. \n\nI could see she was skeptical, and because I had popped into existence here instead of Redcliffe, I didn't have my useful assortment of obviously non-Thedas items. And I changed out of my clothes back at the tower, leaving me with only my boots and a very grimy jacket. I passed these over, and she examined them briefly. Aedan showed her the safety pins, Swiss army knife, map, and flashlight that I had sent with him when they left Redcliffe, but as they came from him I wasn't certain she would believe. He also showed her the notebooks I had written outlining as much detail as I could remember or could find on the wiki about the different areas and the fights. He assured her that I had written the one about the Circle Tower weeks before they arrived, but again I couldn't be sure she would believe that. \n\nFinally, she agreed to discuss things with me in private, and I followed her back into the cabin she had shared with Leliana and me. \n\n\"I will start, Wynne, if that's okay. Morrigan tells me that a skilled charlatan can figure out the answers by which questions are asked, so I'll just volunteer what I know. \n\n\"I know you are a Senior Enchanter, and have never wanted to spend your time in the Circle Tower. You are one of the few mages who does not think that the Circle should run itself, who doesn't hate the templars and the Chantry. You were at Ostagar and saw Loghain's betrayal. I know that you were the one who led the counter-argument to Uldred's in the meeting that began the disaster at the tower. \n\n\"I also know that you died, before Aedan and the others reached you. Saving Petra, I think? A benevolent Fade spirit, who you had felt watching you when you went into the Fade for years, brought you back, and became somehow stuck inside you. And it is weakening, slowly, though you have more time left than you think. \n\n\"I know you had a son a number of years ago, who is a mage in the Circle in Val Royeaux. His name is Rhys, and he's a very, very good man. You should be very proud of him, Wynne. I've no idea who his father is, though I've always wondered if it was Greagoir.\" Her face paled, slightly, and I realised I was right, and for some reason, that frightened her. \"Pure guesswork on my part, and I would never tell anyone else my baseless speculations.\" She nodded, understanding my implication, face returning to normal colour. ",
        "\"Your greatest regret is failing in the training of an elf named Aneirin. You were young and impatient, and you feel you were a poor mentor. He escaped from the Tower, and you fear the templars killed him. However, they never found him; he's alive and well, living in the Brecilian forest, not with the Dalish but at least in contact with them. He is happy, Wynne, and he bears you no ill will. \n\n\"So. That's what I know about you, and trust me, I won't tell anyone else your secrets. They all have their own, and I won't betray them or you. \n\n\"Do you have any questions for me?\" \n\nWynne appeared thoughtful, and she opened her mouth, taking a breath, then closed it again without speaking multiple times. I waited, patiently, while she worked through it. \n\n\"You sound like you know what will happen to me.\" \n\nI nodded. \"I can't guarantee that it hasn't changed - me being here has changed a number of things, so the future I knew already isn't the same, but I know what happened to you according to the performance.\" \n\n\"And can you tell me?\" \n\n\"I can, though you need to be sure. I don't know the ultimate outcome for any of the others, but for you I do. However, I don't want it to taint the years you have left, knowing when and where you will die.\" \n\n\"You say years; I suppose that's probably enough for now. I wasn't convinced I would see the end of the Blight.\" \n\n\"You are way stronger than that, Wynne. The Blight will be over, and you will live several years after that. If you want to know more, think about it and ask me again.\" \n\n\"I'll think about it.\" \n\n\"So the big question is, do you believe me?\" \n\n\"Sierra, you appeared from thin air right in front of me. I'd have to be mad to try to deny it. I never questioned that you were from somewhere else, and you proved the accuracy of your foreknowledge in the Tower. I just wanted to know how.\" Wynne gave me a smile, and I breathed a big sigh of relief. Wynne was the one I had most worried about convincing. \n\n\"So...since you know my future, do you have any advice for me? Aedan told me you gave him recommendations. I'd be curious to know what you might have to say for me.\" \n\n\"Uh...\" The question floored me. I had to think for a minute, and then realised there were some things that always bugged me in the game. \"Two things. One is don't call on the spirit on purpose to lend you strength unless it's a truly hopeless situation. It weakens it, shortens your life, and makes you faint. It's not pretty.\" \n\n\"I'll try to keep that in mind, though I don't really know what you mean by calling on the spirit. And the second thing?\" \n\n\"Just try...not to be judgemental. At some point Aedan or Alistair may end up in a relationship. And you will disapprove, if the performance is correct, worrying that they won't be able to do their duty as Grey Wardens because they are in love. I just want you to wait before expressing that opinion. Because you will change your mind, but telling them how you feel will wound them both more than you know. Both of them are much better men than anyone will give them credit for, and will always do what is right no matter the cost to themselves. So try to...just be happy for them, when the time comes?\" \n\n\"I will think about it. And, dare I ask: which of them will be in the relationship with you?\" \n\n\"Me? Neither. That's just not in the cards, for me. They both deserve better.\" \n\nWynne raised her eyebrows, examining my face. \n\n\"I...see.\" She didn't; I could tell. It didn't matter if she understood or not, as long as I did. \"What about Solona?\" \n\n\"Well...I was just worried about her, knowing what I know about how Greagoir felt after she aided Jowan. And I thought we could maybe get a chance to see if I could help her.\" \n\n\"You're going to get Aedan to conscript her, aren't you?\" \n\n\"Only if she wants.\" \n\nWynne's expression was unreadable, and I could tell I wasn't going to drag any more from her on the subject."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-18"
}
{
    "title": "The Curse of 100 Bottoms Ch. 11",
    "pages": [
        "Note: This story contains themes of mind control, magic, and fantasy. All characters in it are 18+.\n\nAlso, this is the final chapter in The Curse of 100 Bottoms. Thank you for reading!\n\n* * * * *\n\nAdam was having a good fucking night.\n\nIt was the final weekend before winter break and he had been invited to a party at his friend Todd's apartment. Todd was a senior who lived right off-campus in Westwood Village, and his parties tended to be fucking ragers. With the end of finals on the horizon, tonight was sure to be a hellraiser. Adam was looking forward to celebrating the end of his first semester of college in style with a night of drunken debauchery.\n\nCollege could not have gotten off to a better start. UCLA was a pretty sweet place to go to school, with a gorgeous campus and even more gorgeous girls to choose from. Adam had dived right into the party scene at college, taking full advantage of his newfound freedom by spending most of his first semester hopping from one party to the next. Attending class was just an unfortunate necessity in Adam's consideration, something you put up with while you pursued your real passion: getting fucked up and getting laid as much as possible.\n\nAs Adam got dressed for the night, he slid a couple of condoms into his back pocket. He was hoping to meet up with Ashley, this hella hot blonde chick he'd fingered at last week's Sigma Chi frat party. But if she wasn't there tonight, there were plenty of other fish in the sea.\n\nCome to think of it, maybe he should clip his fingernails. Just in case.\n\nHe walked out into the common room of his dorm to find his roommate sitting on the couch with a textbook splayed out in front of him.\n\n\"Hey man, I'm headed to Todd's,\" said Adam. \"You wanna join?\"\n\nHis roommate shook his head. \"No thanks.\"\n\nAdam sighed. His roommate could be such a dud sometimes. He'd seemed cool enough when they'd met at orientation\u2014a surfer dude with that laid-back Cali stoner vibe. But in the few months of them living together, Adam was starting to think the kid was a fucking alien or something. He never wanted to go out, spending all his time studying in their room like some kind of depressed monk. It made it that much harder for Adam to bring girls home, what with his roommate always moping around.\n\n\"Dude, come on. A drink or two would do you good. Hell, I bet a joint is just what you need to relax.\"\n\nHis roommate drummed his fingers against his book, considering his offer for a moment.\n\n\"I'm okay, really. I've got my last final on Monday and-\"\n\n\"Willem, I swear to God, man,\" said Adam. \"You gotta get out of this fucking dorm. Ashley Meyers is gonna be there and I'm sure you can bang one of her dime piece friends. You're coming with me, bro. Don't argue.\"\n\nWillem sighed. \"All right,\" he said, closing his book. \"But just for an hour or two.\"\n\nAdam grabbed Willem's head and gave him a noogie. \"That's my bro,\" he said playfully. \"We're gonna get you fucking LAID tonight!\"\n\nBy the time they got to the apartment, the place was packed. A game of beer pong was attracting most people's attention in the living room, although there were a few young couples making out in the corners, oblivious to the world around them. The tiny apartment was crammed with young college students, all going hard to celebrate the end of the semester.\n\n\"What are you drinking?\" said Adam as he pushed through the crowd toward the kitchen.\n\n\"Just water, thanks,\" he said as Adam sorted through the assortment of liquor bottles on the kitchen counter.\n\nWillem shoved his hands in his pockets and looked around the room. He was hoping he would find at least one person he recognized from one of his classes, but thus far everyone seemed to be a stranger. He closed his eyes and took a deep breath, trying to will himself into being more social.\n\nAdam handed him a red solo cup filled with clear liquid. Willem took a sip and gagged.\n\n\"This isn't water.\"\n\n\"Nah, it's vodka and Sprite, or some shit. Now lighten up! I'm gonna find us some girls to talk to. You're not leaving here without some grade A pussy.\"\n\nWillem followed Adam through the crowd towards the living room. He hadn't done a whole lot of dating that semester. He'd gone out a couple of times with this girl named Rebecca from his bio class, but that had sort of fizzled out before it really began. Although his attraction to women had returned in full force after the curse ended (at least as far as his porn habits were concerned), when it came to actually doing the deed with a real flesh and blood human being, it was like the spark within him had died.\n\nMaybe Adam was right. Maybe he just needed to relax and get out of his head.\n\nIt was hard to do without booze or weed, though. Willem had tried joining his roommate at the frat parties and social events the first few weeks of school, but he'd found that pot and booze only made the feeling of emptiness worse. Although the buzzing had completely gone away along with his attraction to men, the empty feeling he used to get after sex had remained, seemingly expanding to take the buzzing's place.\n\nWhile Adam was distracted talking to some cute blonde girl on the couch, Willem took his red solo cup and poured the liquid out into a potted plant in the corner. He looked around awkwardly, trying his best to get himself in the party mood. Try as he might, however, he really didn't want to be here. As empty as drinking and smoking made him feel, being around people could be just as bad. He felt like a void, weighing down himself and everyone around him. It wasn't that he wanted to be a buzzkill\u2014he just wasn't any good at pretending.\n\nHe was about to turn and head for the door when Adam grabbed his arm and pulled him down onto the couch.\n\n\"Dude, this is Ashley's friend Victoria,\" said Adam.\n\nA taller brunette sat to Willem's side, smiling at him. She was gorgeous, with a streak of blue in her hair and a nose ring.\n\n\"Willem, right?\" she said. \"I think you're in my psych class.\"\n\nVictoria had an easy smile and a relaxed air of confidence about her that set Willem at ease. He smiled back at her.\n\n\"Yeah, I, uh, think I recognize you,\" he said.\n\n\"Probably not,\" she laughed. \"I barely went to the lectures. And when I did I always sat in the back row with my shades on. I think I overestimated my ability to wake up for an 8 am class.\"\n\nWillem smiled. \"It was definitely a lot easier in high school.\"\n\n\"I remember you, though,\" she said with a glint in her eye. \"You always sat up front. I used to look at your little blond curls and pretend you were Justin Timberlake in the 90s.\"\n\nWillem laughed. Suddenly he felt someone's elbow jabbing him in the side. He turned to see Ashley sitting in Adam's lap, making out with him as he shamelessly felt her up.\n\n\"Wow, they're really going at it,\" Willem said awkwardly.\n\n\"Yeah, I love Ashley, but she can be kind of a SLUT,\" said Victoria, raising her voice to try and get her friend's attention.\n\nAdam and Ashley ignored them, continuing their heavy petting as Willem and Victoria watched awkwardly.\n\n\"But hey, maybe she's got the right idea. What's college for if not to slut it up, right?\" asked Victoria.\n\n\"I think my slut days are behind me,\" said Willem jokingly.\n\nVictoria laughed. \"I think 18 is a little young to hang up the hat. Plus you're way too cute to go celibate.\"\n\nShe smiled flirtily at him. Willem could feel his heart fluttering in his chest. Victoria was absolutely stunning, and she was 100% his type. He knew he should be feeling her up like Adam was feeling up Ashley right next to them. It's what the old him would have done, anyway. But the emptiness was still weighing him down, heavy like a pit in his stomach.\n\n\"You know, we could give them a run for their money,\" Victoria said, putting her hand on his leg. \"If your slut days aren't over just yet.\"\n\nShe leaned in and kissed him. Willem closed his eyes, lifting his hand and holding the back of her soft neck as he returned her kiss. He stuck his tongue in her mouth, trying to block out the pit in his stomach as the pounding bass music throbbed around them. He wanted to want her, he really did. Surely that would be enough?\n\nHe put his hand on her breast, trying to focus all of his attention on the task at hand. His heart began to pound as she slid her hand up his leg to his crotch. The pit in his stomach turned to a twisting knot as he felt her hand on his flaccid cock.\n\nHe broke the kiss. \"I'm sorry, I... I gotta go.\"\n\nHe stood up and walked away, leaving the confused girl sitting alone on the couch next to the oblivious lovers. His face was flush as he pushed through the crowd towards the door. Coming out tonight had been a terrible idea. The emptiness was even worse than it had been before he'd left his dorm. He felt like a raw nerve, anxious and uncomfortable. All he wanted to do was get out of there and be alone.\n\n\"Oh my God,\" he heard a voice cry out from behind him. \"If it isn't Mr. Pray The Gay Away.\"\n\nHis face blanched as he turned to see a Korean guy in a tank top and glitter underneath his eyes sipping out of a red solo cup.\n\n\"Jin... what are you doing here?\"\n\nJin smiled at Willem. \"I'm an alumnus, bitch. Todd was my little in Alpha Phi.\"\n\nWillem blinked in confusion. \"You were in a fraternity?\"\n\nJin scoffed. \"Gays can be in fraternities too, sweetie. It's not the 50s. Anyway, what's good with you? Last time I saw you you were cheering on Hicks at that little Homophobes-R-Us rally of his. Thought you'd be his little pageboy by now.\" He took a sip of his drink, then sniggered. \"Although ever since that campaign went down in flames I suppose that option's no longer on the table.\"\n\n\"That wasn't what it looked like,\" said Willem. \"Jake and I-.\"\n\n\"Oh, don't even get me started on him,\" said Jin. \"What did you do to that poor boy?\"\n\nWillem frowned. \"What do you mean?\"\n\n\"I mean he used to give me the most dazzling latte art in the mornings. Rosettas, tulips... one time he did a fucking swan. Now I'm lucky if I get a heart that doesn't look like a butt. He's been Miss Mopey for months now, it's like his puppy died or something.\"\n\nWillem's heart sank. \"I didn't know,\" he said quietly. \"I haven't seen him in a while.\"\n\n\"I thought the two of you were a thing? Did you break up?\"\n\nWillem shook his head. \"No. We were never together.\"\n\nJin raised an eyebrow. \"Oh? Well, then. Maybe this is my lucky day.\"\n\nHe ran a finger down Willem's chest and leaned in. \"Maybe we could sneak into one of these rooms and finish what we started in that coffee shop bathroom,\" he whispered in his ear.\n\nThe knot in Willem's stomach twisted even further. His attraction to men had completely disappeared since the curse was broken. Despite his inability to perform with Victoria, his desire to hook up with Jin was completely nonexistent.\n\nHe took a step back. \"I'm sorry, Jin... maybe another time.\"\n\nHe turned and bolted, leaving the apartment and walking out into the cold winter air. He took a deep breath, relieved to be free of the crowd. The knot in his stomach began to untwist a little bit, but the emptiness still weighed on him like a heavy blanket.\n\nWillem hadn't seen Jake since the night that the curse broke. He had told himself that it was for the best to cut things off cold turkey, that it wouldn't be fair to Jake for Willem to contact him knowing that he didn't want to talk. Still, a part of him had hoped that Jake would reach out to him, and his heart had leapt for the first few weeks every time his phone buzzed with a notification. But things with Jake had remained radio silence. Willem wasn't sure if it was better or worse knowing that Jake wasn't doing well. Of course he wanted Jake to be happy, but the thought that Jake would be off living his best life while Willem was stuck in this insufferable purgatory seemed just as awful.\n\nHe walked back to his dorm, listening to the sounds of music and voices drifting down from the apartments around him. All he wanted to do was crawl into bed, but he knew it would be next to impossible to go to sleep with the pounding music that seemed to come from all over campus on a Friday night. Not to mention the moment when Adam inevitably stumbled in around 2 am, trying his best to stay quiet as he fucked whichever girl he'd managed to land that week.\n\nWillem couldn't go back to his dorm tonight. He pulled out his phone and began to dial.\n\n* * * * *\n\n\"It's so good to have you home, honey,\" said his mother, wrapping her arm around him as they walked up to the house. \"We weren't expecting you until next week!\"\n\n\"I thought I'd come home early.\"\n\nHis father shut the car door behind them. \"At 10 o'clock at night? Your mother and I were in the middle of watching Outlander.\"\n\n\"You can come home anytime you want, sweetheart,\" said his mother as they walked inside the house. \"I really do wish you would visit more, though. We're only a few minutes away, the least you could do is come home for a weekend now and again.\"\n\n\"I'm just trying to do good at college, make new friends... I can't do that if I'm always running home, right?\"\n\n\"And have you? Made any new friends?\" asked his mother hesitantly.\n\nWillem shrugged. \"My roommate Adam's all right.\"\n\n\"Any girls?\" asked his father.\n\n\"Or any romantic interests at all?\" said his mother, glaring at his father.\n\nWillem blushed. \"I dunno. I mean, there's this girl from my psych class-\"\n\n\"Good for you, son,\" said his father, laughing in relief as he clapped him on the back. \"You know, I met your mother at college. She was such a hot little thing back then in her field hockey uniform. I'm sure you'll find the right girl, just give it time.\"\n\n\"Whoever you meet, I'm sure we'll love them,\" said his mother, smiling sweetly at him.\n\nWillem rolled his eyes. \"I'm gonna go to bed. I'll see you in the morning,\" he said as he headed for the staircase. Perhaps coming home was not the best way to get a good night's sleep.\n\nWillem laid down in his bed, staring up at the ceiling fan. It was strange, he'd only been at college for a semester, and yet his childhood bed already felt foreign to him. But the bed in his dorm room hardly felt any more like home. He was starting to feel like there was nowhere that he truly belonged.\n\nAs Willem drifted off to sleep, he found himself once again standing in front of the door to his hiding place. He reached up and opened the door, pushing it open to reveal the cramped space in his mind where he had stored away the things he couldn't bear to look at in the light of day. He gazed up at the glass globes sitting on the shelves, debating which one he would pick up tonight. These were the best nights\u2014the nights where he could go back, if only for just a few minutes.\n\nWillem picked one of the memories up off the shelf, feeling the warmth of it in his hand. He entered the memory to find himself lying naked on the bed, his hands gripping the sheets as he moaned in ecstasy. He looked down to see Jake crouched beneath his thighs, his mouth pleasuring the sensitive space underneath his balls. He could see himself reach down and grab Jake's hair, holding him softly as Jake slipped his tongue in and out of Willem's hole.\n\nHe saw Jake lean up and kiss him on the mouth. He could taste himself on Jake's tongue. He felt Jake's cock lining up to his hole, brushing up against him and sending shivers down his spine. He saw the look in Jake's eyes as he entered him, felt the pressure inside as Jake pushed past his resistance and broke him open.\n\n\"You feel so good,\" he heard Jake whisper softly in his ear.\n\nHe remembered the way it felt as Jake sawed in and out of him. He could feel the warmth spreading throughout his body, remember the blessed way it felt when Jake leaned down and grazed his lips along Willem's neck. He gave himself over to the memory, his heart full of excitement and fear of the moment it would all end when he would be wrenched out of dreamland.\n\nHe could see Jake staring into his eyes, saying everything and nothing as he filled him again and again. Willem's mouth opened in ecstasy as Jake's eyebrows began to crease, his eyes fluttering as he unloaded inside of Willem.\n\nWillem awoke to the noisy buzzing of his alarm. He reached over and pressed the snooze button, desperate to return to dreamland. He was always desperate after a Jake dream\u2014it was the only time he could escape from the emptiness. He grabbed his pillow and covered his head, trying his best to slip back into the hiding place where he'd stored his Jake memories. But try as he might, the door was locked tight. He rubbed his leaking cock against the bed, so hard it was almost painful.\n\nHe was still trying to make his way back when his alarm went off again a few minutes later. He reached over to grab the phone when it went flying off the nightstand.\n\n\"Oh, for fuck's sake,\" he snapped.\n\nHe leaned over the side of his bed, feeling along the ground to try and find it. He groaned in annoyance, then got off his bed and crouched beside it to search for his phone. He spotted it near the back wall, about a foot away from him. As he reached for the phone, his fingers brushed past something else. He pulled his hand out from under the bed to reveal a crumpled piece of paper.\n\n\"What the hell?\" he said quizzically as he inspected it.\n\nIt was folded into a small, wrinkly square. He unfolded it to find a handwritten note in chicken scratch that was most definitely not his handwriting. He had no idea where the note had come from, but he could see his name at the top.\n\nDear Willem, read the note.\n\nI know you're going to think it's stupid that I've written this down when I'm literally just going to read it to you. But the reason I put this on paper was because I wanted to make sure I got everything right. So please, let me get it all out, and then you can talk, okay?\n\n(Wait for him to say okay). \n\nI know we haven't always been friends. Truth be told, I always thought you were kind of a dick. When Mr. Schrat paired us together in bio, I knew I was gonna end up doing most of the work myself. Then you just didn't show up at all, ignoring my texts and avoiding me at school. I thought you were an asshole, so I was glad when Bussy cursed you. I thought you deserved whatever you got.\n\nBut then we had sex. I'd never even kissed another boy before that night. I'd barely admitted to myself that I was gay, let alone anyone else. I'd waited for it for so long, thinking about what it would be like, who it would be with, whether I would be terrified or excited or both. So for my first time to be with you, this boy that I hated so much, just made it all the more surprising. I'd spent so long hating you that it hadn't even crossed my mind that I might be attracted to you.\n\nAnd then you dropped me. Fucking AGAIN. I was so angry at you, I told myself that you could go fuck yourself for all I cared. I even practiced telling you just that in the mirror, in case I lost my nerve. But the second I saw you in class that Monday, it was like something flipped inside me. I could see in your eyes just how fucking terrified you were. And it was like I just got it. I just knew that you were this scared little boy, just as scared as I was. Then it was all I could see. Things were so out of control and you were being just as much of a dick as ever, but now I knew why. I could see that you were just in pain, lashing out in fear.\n\nI have to be honest, I'm still afraid. I know that I might seem brave, telling my parents the truth about me even though I knew what it would cost. But the only reason that I even told them in the first place is because of you. You made me realize that being gay isn't just one small part of myself that I can hide away. It's who I am. It's in everything that I do. If I'm stifling that part of myself, then no one can ever really know me for me. And the idea of doing that for another four years was just unbearable. You made me realize that I would rather be on my own than not be true to myself.",
        "So, that's why I feel like I have to tell you the truth. I know you said that it was just sex between us last night. And I know that you've had a lot of it, and I'm probably just some dumb virgin who can't get it together. But I think it's different between us than it is with guys like Hicks, or any of the other guys you've been with. I think it's special. I felt something when we were together, and I think you felt it too. I'm tired of being scared, so I'm going to try and be brave again and tell you how I feel. Because I think we have something worth being brave for.\n\n(Wait for him to respond).\n\nWillem set the piece of paper down on the floor. He stared at the wall, the alarm on his phone continuing to buzz underneath his bed as the emptiness finally began to dissolve.\n\n* * * * *\n\nWillem banged on the window to the empty storefront.\n\n\"Hello?\" he called out. He put his hands against the glass, trying to see if there was anyone inside. \"Yzma? Are you there?\"\n\nHe banged on the window again. \"It's fucking cold out here, so if you're in there, let me in!\"\n\n\"She's not there,\" said a voice from behind him.\n\nHe turned to see an old woman leaning out of the door of the store next to him.\n\n\"Yzma Taint's Emporium closed down,\" she said.\n\n\"Do you know where she went?\" said Willem.\n\nThe woman shrugged. \"Store's been closed for weeks now. Haven't seen her since Thanksgiving.\"\n\nWillem turned and walked back to his car. He pulled out his phone and opened up Instagram, searching for the drag queen's account. His heart sank in his chest when nothing popped up. What happened to her account? Had she deleted it?\n\nHe set his phone down, gripping the wheel. Where in the world was Yzma Taint?\n\nWillem drove back towards Westwood along Santa Monica Blvd, his shoulders slumped in defeat. As he grew closer to West Hollywood, he could see the rainbow Christmas lights and Pride-themed holiday decorations that lined the streets. He pulled over and parked at a meter, getting out of his car as he joined the gays walking along the sidewalk.\n\nHe could still remember the night he had first gotten cursed, seeing the way these men carried themselves as they flaunted down the street. He'd always found it so annoying. Now, as he watched the couples walk by holding hands, his heart hurt with jealousy. Why was he doing this to himself? That would never be his life.\n\nHe walked along feeling sorry for himself when he suddenly stopped. He recognized the bar immediately\u2014it was the place where the curse first began. There was the corner where he'd first seen Jake, staring nervously up at the bar as he prepared himself to enter. Willem walked around the bar to see the alley where he'd gone after Jake. He could see the wall that he'd leaned against when he'd pulled his pants down, begging Jake to fuck him. He could see the door that Bussy had first walked out of when she'd confronted them, right after he'd hit Jake in the stomach and called him a faggot.\n\nHis stomach sank as he remembered that. What kind of a human being had he been?\n\n\"Fucking hell,\" said a voice as the door suddenly opened. A very annoyed-looking drag queen stepped out into the alley, decked out in a red satin poncho with fluffy white trim and a Cindy Lou Who wig.\n\n\"If one more bitch orders a peppermint martini I'm going to burn this mother to the ground,\" she growled as she pulled a pack of cigarettes out of her purse. She stuck a Virginia slim between her lips, shielding the cigarette with her hand as she lit it.\n\n\"Yzma? Is that you?\"\n\nShe turned to see Willem staring at her, a look of desperate hope on his face.\n\n\"Oh, well look at you,\" she said with mild surprise. \"Looks like you fucked your way up to the top. Have fun?\"\n\n\"Yzma, thank God. I went by your shop-\"\n\n\"Eh, that was a bust. Turns out Kickstarter doesn't let you keep the money if you don't reach your fundraising goal. Who knew?\" She shrugged. \"Anyway, it's just Bussy again. Back to my old tricks working the front door at a shitty gay bar. What are you gonna do?\"\n\n\"I need your help, Bussy,\" said Willem.\n\nShe raised an eyebrow. \"You've broken the curse. What more do you want from me? Go live your boring little heterosexual life.\"\n\nHe took a deep breath. \"I need you to curse me again.\"\n\nShe groaned. \"Oh, God. You're not one of those magic-heads, are you? I get it, nothing feels better than a magically enhanced fuck. But that's not a permanent state of being. Trust me, the withdrawal can be a bitch but it doesn't last forever.\"\n\n\"Please-\"\n\n\"Sorry, sweetheart. This isn't magic-on-demand. You want your fix, you'll have to find another witch bitch to piss off.\" She stubbed out her cigarette and turned to walk back into the bar.\n\n\"You owe me!\" shouted Willem.\n\n\"I owe you?\" she said, laughing in disbelief as she turned around. She lifted her hand, pointing her red and green nails directly at his head. Willem fell to his knees, clutching his head in agony as ringing overwhelmed his ears.\n\n\"Au contraire, little one. I think you'll find that I owe you absolutely nothing.\"\n\n\"Then a favor,\" he pleaded. \"I'll do whatever you want, just please curse me again.\"\n\nShe walked slowly toward him, her hand still outstretched.\n\n\"You really want that? To get fucked by 100 more guys? You want to get filled by men who you don't even know, to crave their cum like you need air to breathe? You'd give up your free will again just to be a slave to dick? Is the high really worth that much?\"\n\nBussy lowered her hand and crouched in front of him, staring pitifully at him.\n\n\"No,\" said Willem as the ringing in his ears subsided. \"But I would rather die than go on living with this emptiness. I need him back.\"\n\nShe raised an eyebrow. \"Need who back?\"\n\n\"Jake... please, I can't live without him.\"\n\nHer eyes widened as a look of recognition flashed across her face. She stood up, shaking her head as she pulled another cigarette out of her purse.\n\n\"I'm sorry. I won't do it. It's too dangerous.\"\n\n\"What do you care?\" Willem said angrily as he got to his feet. \"You're the one who cursed me in the first place.\"\n\nShe lit her cigarette and stared at him for a moment. \"I cursed you because I wanted to teach you something. Why would I curse you again when you've learned everything you need to?\"\n\n\"So that I can be gay again! So that I can be with Jake.\"\n\n\"Tell me, Willem,\" she said, crossing her arms and taking a puff of her cigarette. \"What have you learned?\"\n\nHe rolled his eyes. \"That I'm a selfish asshole.\"\n\nShe nodded. \"We're in agreement so far. What else?\"\n\n\"I don't fucking know... I learned that sex with another guy can feel really fucking good, okay?\"\n\n\"That's good. Keep going.\"\n\nWillem sighed. \"I learned that when a guy strokes you while he's fucking you, it makes it feel 1000 times easier to get fucked. I learned that it's just as gay to top as it is to bottom, that neither of them makes you any more or less of a man. I learned that having sex without kissing is almost not even worth it. I learned that some guys couldn't find your asshole on a map despite the fact that it's literally right there in between your cheeks!\"\n\n\"Hmph. You're telling me. What else?\"\n\n\"I learned... that other people have problems, too. I learned that it really sucks when someone treats you like you're disposable the second that they're done fucking you. I learned that it's different when you have sex with someone that you actually care about. I learned that I never had it half as good with anyone else as I did with Jake.\"\n\nHe bit his lip as he fought back tears.\n\nBussy put her hand on his shoulder. \"What else have you learned?\" she asked him gently.\n\nHe looked up at her. \"I learned that I love Jake,\" he said as tears spilled down his cheeks. \"More than I ever thought that I could love another human being. That's why I need you to have a fucking heart and curse me again so that we can be together!\"\n\nShe smirked. \"Wow. All that from one little curse. Not bad for a bargain-basement witch, huh?\"\n\nWillem grabbed her arm. \"Please. Please, just make me gay again. So that I can be with Jake.\"\n\nShe raised an eyebrow. \"Why do you think you need a magic curse to be with this boy?\"\n\nWillem frowned in confusion. \"Of course I do. I'm straight.\"\n\n\"Are you?\" she laughed. \"Because right now you're standing in front of me, begging me to take away your free will, begging me to make you a bottom again so that you can go off and be with the boy of your dreams. What's holding you back?\"\n\nWillem blinked. \"But...\"\n\n\"I told you,\" she said. \"There's two things magic can't do: anal orgasms and love. That's all you, baby.\"\n\nWillem looked at her, his eyes searching hers as he tried to make sense of it all.\n\n\"What if... what if I can't do it?\" he asked hesitantly. \"Without the curse? What if it's not the same?\"\n\nShe smiled kindly at him. \"Sweetheart, none of us get guarantees in this life. Maybe it won't work out. Maybe it won't feel the same. But you're never gonna know until you grow a pair and take a chance to find out.\"\n\nWillem smiled, his face flush with nervous excitement. \"Thank you,\" he said before turning to walk away.\n\n\"Hold up,\" she said, lifting her hand as she rooted around through her purse. She pulled out a small vial and handed it to him.\n\n\"A parting gift. Specially brewed by yours truly.\"\n\nWillem squinted at her suspiciously. \"If you think I'm going to use one of your tonics on Jake-\"\n\n\"It's for you. Trust me, honey,\" she said with a wink. \"You'll thank me.\"\n\n* * * * *\n\nJake kept his eye trained on the clock. 4:59.\n\n\"Please God,\" he thought. \"No last-minute stragglers.\"\n\nHe looked around at the empty coffee shop. It had been dead the last hour, but you never know when you might get someone at the last second who wants an extra hot decaf mocha with whipped cream when you've already wiped down the espresso machine.\n\nJake's eyes lit up as the clock turned 5. He locked the entrance to the coffee shop, then strode quickly over to the iPad at the back and began to blast his favorite music. That was the one benefit to closing alone: you got to play whatever you want. Nothing killed the emptiness better than blasting some feel-good music.\n\n\"And I'm dying to know, is it killing you like it's killing me, yeah,\" sang Jake as he danced around the coffee shop, wiping down the tables.\n\nHe'd gotten the nightly closing routine down pat. He could do it all in 10 minutes if he wanted, but what was the point of racing home to an empty apartment? The nights were the hardest part, anyway. At least during the day, he could go for hours without thinking about him.\n\n\"Cause the story of us looks a lot like a tragedy now!\" he belted out as he tossed the wet rag into the laundry bin. He turned to go count the cash from the register when he stopped cold.\n\nWillem stood on the other side of the door, staring at him. He waved nervously.\n\nJake blinked in shock, not entirely sure he hadn't simply manifested Willem through sheer imagination. He walked over to the door and unlocked it. \"Hi,\" he said sheepishly.\n\n\"Hey.\"\n\nThey stared at each other awkwardly for a moment.\n\n\"What are you doing here?\" Jake asked quietly.\n\n\"What?\" said Willem, the music still blaring loudly around them.\n\nJake's cheeks burned from embarrassment as he rushed over to the iPad. God, he looked like such a fucking idiot dancing around the caf\u00e9! This was not how he wanted things to go when he saw Willem again. He'd always imagined that the next time they saw each other he'd have his shit a little bit more together. At the very least he thought he wouldn't be working at this fucking coffee shop anymore. Or maybe they would have never seen each other again at all. LA was a big city\u2014he could have gone the rest of his life without having to see the straight boy who broke his heart.\n\nJake shut off the music, leaving the place deathly silent. He could hear his heartbeat thumping in his ears.\n\n\"It's really good to see you again,\" he heard Willem say behind him.\n\nHe walked over to the register and pulled out the cash, avoiding Willem's gaze. \"I'd make you something, but we're closed,\" he said as he started counting the money.\n\n\"Oh, I'm good,\" said Willem. He walked slowly over to Jake. \"I just came here to see you.\"\n\nJake paused for a moment with the stack of bills in his hands. He could feel the hope rising in his chest. He shoved it back down.\n\n\"What for?\" he said as he went back to counting the cash.\n\nWillem paused at the icy tone in his voice. \"I, uh... got your note.\"\n\nJake bit his tongue. All the work he had done to get over Willem was in serious danger of collapsing.\n\n\"I gave that to you months ago. Why now?\"\n\nWillem shrugged. \"You were right... I was afraid.\"\n\nJake looked up at him. The look on Willem's face toppled whatever defenses he had left. He gave up counting the cash, throwing the bills on the counter.\n\n\"What are you saying, Willem?\"\n\n\"I went to see Bussy.\"\n\nJake's eyes widened. \"Did she...?\"\n\n\"She wouldn't curse me again.\"\n\nJake's face fell. The hope that had been ballooning inside him burst, searing painfully in his chest. He looked away, shaking his head angrily.\n\n\"Then what are you doing here? What do you want from me?\"\n\n\"I-\"\n\n\"I was doing good, you know,\" he said, his eyes blazing with anger. \"I was moving on. It's not... it's not fair of you to just show up like this.\"\n\n\"I know,\" said Willem gently.\n\n\"Then why the hell would you come?\"\n\n\"I came because you were right,\" said Willem. \"When you told me that it was different between us. I do love you. It wasn't the curse, it was me.\"\n\nJake stared at him in confusion. \"I don't understand. If you're not attracted to men... what does any of it matter? What's changed?\"\n\n\"I don't know... I think it's you, Jake,\" Willem said. His eyes darted back and forth as he searched for the words. \"You... changed me. You made me brave. You made me realize that it's worth risking it all to be true to myself. That I had to be willing to lose everything in order to know what's really important to me.\"\n\nHe took a step towards Jake, reaching tentatively to grab Jake's hand.\n\n\"There's still so much shit I don't know. I still don't know what my future's gonna look like. I don't know how to do this. How to be the boyfriend you need, who can make you happy... how to hold your hand walking down the street and not feel scared. I don't know how to be in a relationship with somebody, to take care of them or put them first.\"\n\nHe squeezed Jake's hand. \"But I wanna learn. And if you can be patient with me, then maybe you can teach me. Because of all the shit I don't know, the one thing I know for certain is that you're the only person I've ever really loved. Man or woman. Really loved, fully and unselfishly. It's just... none of it's worth it if I don't have you in my life.\"\n\nJake looked up at him. His eyes were brimming with tears.\n\n\"But... are you attracted to me?\"\n\nWillem smiled. \"There's only one way to find out, isn't there?\"\n\nHe lifted his hand to Jake's neck, pulling the taller boy down to him. He leaned up on his tiptoes and brushed his lips against Jake's, his heart pounding in his chest as he closed his eyes. For all of the kisses that they'd shared, all the times that they'd had sex and been intimate with each other, this felt like they were kissing for the very first time. Willem opened his mouth, hesitantly running his tongue along Jake's lips, gently asking him to let him in. Jake opened his mouth in response, greeting Willem's tongue with his own.\n\nThe two boys kissed each other deeply, breathing softly through their noses as they held each other's faces. Willem's heart swelled at the feeling of Jake's warm lips on his, awakening something deep inside of him. The door to his hiding place creaked open as the memories floated out, dancing across his eyes. He saw himself with Jake time after time, their bodies joined together like crashing waves. He felt Jake's body on top of his, as warm and soft as his face felt in his hands now. He saw the chest hair peeking out from underneath the floral shirt; the ceiling fan casting moonlit shadows; the smile on Jake's face as they watched TV on the couch, curled up under the same blanket but not quite touching.\n\nWillem broke the kiss, his hands falling to Jake's chest as he pushed him away. Jake slowly opened his eyes to look at Willem, his face belying the desperate hope that he could never quite extinguish.\n\n\"How did it feel?\" Jake asked.\n\nWillem grabbed Jake's hand and lowered it to his crotch. A smile broke out across Jake's face as he felt Willem's hardness in his hand, rigid and leaking.\n\n\"I don't understand,\" he said quizzically. \"How is it possible?\"\n\nWillem smiled. \"It's possible because I love you.\"\n\nJake kissed him again, pulling Willem's body in close to his. The kiss had awoken something within Jake as well. He felt a surge of energy coursing through him so powerful that it threatened to tear them both apart. He pushed Willem towards the back room, kicking open the door behind him. He ripped off his shirt, tossing it aside as Willem pulled off his. He shucked off his pants as quickly as he could, his hardon sticking out of his briefs and leaking precum against his stomach.\n\nWillem laid back on the ground, pulling off his pants as he grinned excitedly up at Jake.\n\n\"Wait a sec,\" said Jake. He grabbed a couple of coats out of one of the employee lockers, laying them down underneath Willem to form a makeshift cot.\n\n\"Lost and found,\" he said with a sheepish grin.\n\nWillem laughed as he pulled Jake on top of him. Jake ground his crotch into the blond surfer boy's, rubbing their cocks together as their tongues intertwined. A wet patch had started to form in Jake's briefs, rubbing up against the wetness in Willem's underwear. After months of nothing but his hand to keep him warm at night, Jake wanted to blow his load right then and there. But he needed to taste him again.\n\nJake flipped Willem over, grabbing Willem's boxers and peeling them off slowly. He gasped.\n\n\"How did you-\"\n\n\"Courtesy of Bussy,\" Willem said with a grin. \"One of her magic tonics.\" He shook his bubble butt at Jake, causing it to jiggle back and forth.\n\nJake was salivating. He dove in face first, prying apart Willem's cheeks as he hungrily ate out his hole. Willem's eyes rolled in the back of his head as he felt Jake's tongue flitting in and out of his hole. Jake wiggled his tongue around, opening Willem up and savoring the boy's taste. Willem moaned, rubbing his cock up against the coats underneath him. He yelped as Jake spanked him.\n\n\"God, I missed this ass,\" Jake said breathlessly in between eating him out.\n\nWillem surrendered to the pleasure from his hole, melting like putty in his lover's hands. Jake kissed Willem on his ass cheek, then licked his tongue up Willem's spine towards his neck. He kissed Willem on the neck as he positioned his cock against Willem's hole. He slowly started to slide it in when Willem reached back and grabbed his arm.\n\n\"Fuck. Hold up a sec,\" Willem said.\n\nJake pulled back. \"What's wrong?\"\n\n\"I'm not a magical power bottom anymore. You can't just shove it in me without any lube.\"\n\nJake blushed. \"Oh. Sorry.\"\n\nJake spit in his hand, rubbing the saliva on his cock before sliding back into Willem. Willem took a deep breath, trying his best to relax and let Jake in. He was impatient to feel Jake inside him again, rubbing up against his special place and reaching that sweet spot between pain and pleasure. But he knew that he would have to take his time now that he didn't have magic to enhance the process anymore.\n\nHe moaned as Jake reached down and started stroking his cock. His hole began to relax, opening up to receive Jake's girth. Jake kissed him on the neck again as he lifted his hips, slowly fucking in and out of Willem's hole. Willem reached back and grabbed Jake's hair, holding him close behind him as he moaned. He turned and started to kiss Jake, their tongues battling as Jake penetrated him. It was starting to feel good\u2014really good. Better than it had ever felt during the curse. Something had broken open within Willem, something he had been holding back that he had never even realized.",
        "\"Oh, Jake... fuck me, baby,\" moaned Willem.\n\nHe could feel his own cock leaking in Jake's hand as Jake continued to stroke and fuck him at the same time. He pushed his ass back against Jake's cock, meeting the taller boy's thrusts.\n\n\"Willem... fuck, you feel so good. I missed you so much...\"\n\nWillem clenched his hole around Jake's cock, making Jake moan. He pushed Jake's hand away from his cock and shoved his ass back.\n\n\"Just pound me,\" he said breathlessly.\n\nJake grabbed Willem's hips and pounded his bubble butt. Willem was leaned over with his face pressed up against the ground, his ass sticking out as he furiously jerked himself off. Being stimulated from either end was a feeling he had missed so desperately over the last few months. Jerking off without prostate stimulation was like eating ice cream made with Splenda. It just didn't compare.\n\nThe sound of grunting, moaning, and flesh smacking against flesh filled the back room of the coffee shop as the two boys fucked. They fucked like they were the ones who invented anal sex, blissfully unaware of anything and everything outside of their two bodies.\n\n\"Baby... I'm gonna cum,\" moaned Jake.\n\nWillem could feel himself getting close as well. He took his hand off his cock, wanting Jake to be the one to push him over the edge. He put his hands against the ground, surrendering himself to Jake's fucking.\n\n\"Cum in me, baby. Do it!\" moaned Willem.\n\nJake cried out as he began to shoot, filling Willem for the first time in months with his hot load. He came more than he ever came in his life, more than he even knew was possible. His body jerked and spasmed against Willem's back, shutting off all of his senses outside the primal need to spill his seed.\n\nThe warmth was just what Willem needed to go careening off the edge. He shot his own load and ruined some poor girl's denim jacket that she had inadvertently left behind at the coffee shop after her morning macchiato, unaware that two 18-year-old boys would be using it as a makeshift cot for fucking.\n\nJake rolled off of Willem, laying on his back as he breathed in heavily. His body tingled with pleasure, and his mind was still not entirely unsure that he hadn't just manifested the last hour of his life through sheer imagination.\n\nWillem put his head on Jake's chest, running his fingertips along Jake's torso. \"That was fucking incredible,\" he said.\n\n\"I can't tell you how much I missed that,\" laughed Jake.\n\nWillem leaned up and kissed Jake on the lips. \"Then let's keep doing it. Let's stop with the bullshit and just do this. You and me. Boyfriends.\"\n\nJake smiled. \"I'm ready if you are.\"\n\nWillem kissed him again. Jake reached down and gently squeezed Willem's bubble butt, still trying to convince himself that this was all really real.\n\nWillem broke the kiss. \"Wait a second. I do wanna say one thing.\"\n\nJake looked at him quizzically.\n\nWillem ran his fingers through the little hairs on Jake's chest. \"Now that I'm not cursed anymore... well, I should get to top too, you know. Every now and again, at least.\"\n\nJake laughed. \"They say versatility is the spice of life.\"\n\n\"Good. It's about time I get a chance at that ass,\" Willem said, grinning.\n\nJake groaned. \"You're not gonna go easy on me, are you?\"\n\n\"Not a chance.\"\n\nJake smacked him on the chest, then pulled him in to kiss him. He rolled over on top of Willem and grabbed his rapidly hardening cock, stroking him as he began to make love to his boyfriend once more.\n\n* * * * *\n\nBussy stood in the bathroom of the bar, adjusting her platinum blonde afro wig in the mirror as a particularly annoying bleached blond twink pouted at her.\n\n\"I don't understand why I can't have tonight off. It's New Year's Eve, for Christ's sake!\" he whined.\n\nShe shoved another chicken cutlet in the bra of her sheer crystal tassel dress. \"The only reason I called off your curse is because you agreed to be my assistant. That means when I work, you work.\"\n\nJeffrey pouted. \"It's still not fair.\"\n\nShe glared at him. \"I can always curse you again. There are 683 more tops just dying to get their hands on you.\"\n\nJeffrey's eyes widened. He shook his head.\n\nShe grabbed his chin. \"Good boy. Now grab my train and let's go.\"\n\nJeffrey grabbed the train of her dress and followed her out of the back room of the bar. They walked through the crowded bar towards the exit when a voice called out from behind.\n\n\"Bussy!\"\n\nShe turned to see a tall freckly boy with wavy brown hair heading towards her, holding the hand of a boy with curly blond hair.\n\nShe lifted her arms, grinning from ear to ear.\n\n\"Jake, darling. How are you?\" she asked as she kissed him on either cheek.\n\n\"Well, thanks to you. We thought we'd find you here.\"\n\n\"Not for very much longer, I'm afraid,\" she said. \"My shift just ended. I'm headed to the Hills to host a private party tonight. It's all very exclusive.\"\n\n\"Moving on up?\" asked Willem with a smile.\n\n\"I'm a hard girl to pin down,\" she said with a wink. She could see Willem's hand on Jake's back, slowly gliding his thumb back and forth. She smiled.\n\n\"We're meeting Willem's parents at a New Year's Eve party after this,\" said Jake. \"We just wanted to stop by and wish you a Happy New Year, Bussy.\"\n\nShe waved him off. \"Bussy's so last year. I was thinking, 'Diddle McClit.' What do you think?\"\n\nJake grinned. \"That's perfect.\"\n\nShe squeezed his arm. \"I knew I liked you. Now, I'm off boys. Happy New Year!\"\n\nShe turned and walked out of the bar as Jeffrey trailed behind her, still holding her train.\n\n\"Fuck, it's freezing,\" she said as they stepped outside. \"What time does the car get here?\"\n\n\"It's two minutes away,\" said Jeffrey.\n\n\"Two minutes too long. It's colder than a witch's tit out here.\"\n\nThey were interrupted by the appearance of three teenage boys, stumbling down the sidewalk and laughing drunkenly.\n\n\"Dude, you're fucking wasted! It's not even 10 yet,\" said the short redhead, laughing.\n\n\"I'm not that drunk, Josh,\" said one of the taller boys right as he stumbled into Jeffrey, knocking the little bleached blond twink off his feet.\n\n\"Careful with the dress!\" shouted the drag queen as she pulled Jeffrey to his feet.\n\n\"Fuck, is that Sia?\" said the other tall boy, staring at the drag queen in confusion.\n\nThey laughed at her. She was so incensed that it took her a moment to realize that the two boys were identical twins.\n\n\"You're so right!\" said Josh. He pointed at Jeffrey. \"And that's the little girl from her music videos.\"\n\n\"Run along, you little breeders,\" she said.\n\n\"Oh, fuck off, dude,\" said one of the twins. \"You're like the ugliest chick I've ever seen.\"\n\nHer jaw dropped. She stood there in shock as the boys continued past her, stumbling down the street and laughing to themselves.\n\n\"The gall!\" she scoffed. She stared after them as her face fell into steely resolve.\n\n\"We need to go,\" Jeffrey said pleadingly. \"The car's about to pull up.\"\n\nSuddenly a wicked smile crossed her face. \"I have more pressing matters to attend to.\"\n\nShe turned and walked quickly down the street, following after the unsuspecting boys. Jeffrey held the train of her dress, trailing behind her as fast as his little twink legs could carry him."
    ],
    "authorname": "Freckleman64",
    "tags": [
        "gay romance",
        "straight",
        "straight to gay",
        "mind control",
        "magic",
        "18-year-old",
        "bareback",
        "rimming",
        "friends",
        "public"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/the-curse-of-100-bottoms-ch-11"
}
{
    "title": "Jill's World Ch. 01",
    "pages": [
        "AUTHOR'S FORWARD: THE PROLOGUE IS THE SAME AS EPILOGUE FROM DARLA'S GAMES CHAPTER 16 IF YOU WANT TO FAST FORWARD A BIT, I WILL THROW ONE OF THESE ****** IN THERE. READING DARLA'S GAMES IS PROBABLY PINNACLE TO READING AND UNDERSTANDING THE EARLY CHAPTERS OF JILL'S WORLD. IN FACT, THE VERY FIRST CHAPTER IS GOING TO BE EXTRAORDINARILY BORING FOR A NEW READER WHO WILL NO DOUBT BE EXHAUSTED AT THE TRANSITIONAL WORK. BUT, FOR THOSE OF YOU WHO HAVE STUCK WITH ME THROUGH DARLA'S GAMES, GET YOUR 'AHA' AND 'I KNEW IT' READY. THERE WILL BE A GOOD DEAL OF FILLING IN THE BLANKS. THANK YOU FOR THE ENCOURAGEMENT AND SUPPORT OVER THE YEARS, EVEN WHEN IT LIKELY SEEMED I HAD ABANDONED THIS WORK FOREVER. AND WITHOUT FURTHER ADO, WELCOME TO JILL'S WORLD.\n\nALL CHARACTERS ARE 18+.\n\nPROLOGUE: EPILOGUE\n\n\"So...\" I started, not sure where to start actually. Julie was driving my car. I didn't even know how she got to Jill's house. That seemed a minor question at the time.\n\n\"Carrie,\" Julie took the reins from me, thank goodness. \"I owe you an apology for so many things. I should have known.... Better.\"\n\n\"I pushed you away Jules. It wasn't ... I didn't want you to know.\" I answered.\n\n\"Well, we have a lot to talk about. I don't think your Dad is going to want me sleeping over again so soon. And maybe Jill is right about me and you putting our romantic adventure on the back burner for awhile.\"\n\nIt sucked. It was almost definitely for the best, but it still felt like it sucked at the time.\n\n\"Two big things we need to discuss right now before we get you home.\" Julie said as she drove up the highway towards my house.\n\n\"First is ... well Care Bare, you blew my boyfriend at the party.\"\n\n\"Shit!\" I exclaimed. \"I'm so sorry Jules, I was afraid something like that would happen. I mean Chad or ugh! Jill told you huh? That I was the slut at the party. You ... wait... you were there, how the hell did I blow him when he was with you?\"\n\nShe bit her lip. I had the advantage here because I could look at her and she had to watch the road.\n\n\"Well, I was kind of there with him when you did.\" Julie said. \"And no, Jill didn't tell me, I guessed it when I found out about the bet. She wasn't lying when she said she didn't give me many details about things you did, I guessed at a lot.\"\n\n\"Great boyfriend.\" I muttered. \"Getting a blowjob from another girl when he's with you.\"\n\nJulie laughed softly. \"Well, he didn't really want to. I kind of pushed the issue. And that's what I am so sorry about Carrie. I never ever would have done that if I had known it was you... or even anyone who wasn't there because they wanted to be.\"\n\nShe stole a glance at me. \"You kind of liked it? Some of it?\"\n\nI blushed. My mouth opened and closed like a fish out of water, gasping for oxygen like I was gasping for words.\n\n\"The umm... suit...\" Julie blushed.\n\n\"Huh?\" I asked, playing dumb. Of course I knew instantly what she was talking about.\n\n\"I'm not saying it excuses my actions at all. But, I do want you to really and truly understand the build up from Rebecca before that... attack.\" Julie frowned and a tear escaped her beautiful jade green eye. \"And, well, you already ate my pussy Carrie. And it was great. And I know that when, or if we ever umm do something. Damn, this is harder than I thought.\"\n\n\"It will be very different Julie.\" I assured her with my croaking voice.\n\nShe squeezed my hand. \"I know it will. And I hope it happens. And soon.\"\n\n\"But, you were so wet Carrie. We all could see it. You were dripping to the floor. I remember it quite vividly. So, I hope you understand, I was told before I got there that you got off on that... kind of treatment and all the signs continued to point in that direction.\"\n\nI sighed. What could I say really? I really could not deny that something inside me loved some part of it.\n\n\"So...\" She threw a so out there. I looked at her in anticipation of whatever was coming next.\n\n\"I'm thinking of joining you at Jill's.\" Julie said.\n\n\"No Julie. Absolutely not.\" I screamed though it came out as a whisper.\n\n\"Hush. Not like going through it with you. Just watching and learning what gets my best friend so worked up. I want to understand it. And I want to be there ... Jill said I could be there and she welcomed me to be there to make sure you are safe.\"\n\n\"I'm not sure I want you to.\" I replied quite honestly. What an odd turn of events.\n\nJulie laughed softly. \"Well, that's an expected response. Look, Jill says you won't really care and it might be the best thing for you to have someone who knows what you are going through to talk to. She made an awful lot of sense Carrie. She ... There is a lot of stuff you don't know about what happened behind the scenes. A lot of things that half the people involved didn't know. You kind of amazed them all. They just thought they would play with you for awhile and you would just go submissive and go along with it for the duration and then they would let you go and Farin would... umm damn, well it was really a stupid plan if you think about it.\"\n\n\"But, that is part of what we need to talk about between now and Monday after school. I would be late, I have cheerleading and I'm not giving that up for you this year, I gave it up for you the last three years after all.\" She laughed again and squeezed my hand when she saw me frown at that. \"I'm not sure I can sit and watch you being experimented on or whatever it is they are doing. But, she said she wouldn't take my phone away or hinder me in any way and the three of us could sit down and talk about everything once a week. So, if I thought things were out of control, I could call someone, even the police if I thought it was bad enough and they would cart her ass off to jail most likely.\"\n\n\"I want to be there for you Carrie. If you don't want me to be after we talk this weekend, then I won't. But, I'm a little scared for you and I think more than anything, you need me ... well a friend that you don't have to lie to.\"\n\nI squeezed her hand back. \"We will talk about it. I have to think about it.\"\n\nJulie giggled. \"She invited Courtney too, FYI.\"\n\n\"What?\" I croaked.\n\n\"I know. Sounds weird huh? She'd only get to watch, not interact at all. Jill liked her attitude she said.\"\n\n\"You fucking horn dog!\" Julie shouted.\n\n\"Huh?\" I looked at her puzzled.\n\n\"You are breathing faster thinking about Courtney watching. Jesus Carrie.\" Julie laughed.\n\n\"I ... no I'm not!\" I replied indignantly.\n\n\"Yeah, you were.\" Julie sighed. \"The question on my mind now is why it didn't happen when you thought about me being there. I know you've developed a crush on me since you ... well, since recently. And I'm kind of liking it in theory. But, then there is this. So, I'm intrigued. Do you like Courtney?\"\n\nI could feel myself blush. \"This is really not fair Jules.\"\n\nShe squeezed my hand. \"Who ever said life is fair? I'm not saying it to embarrass you or accuse you of anything, it's just an observation and a question.\"\n\n\"Yes, I like her. And I hate her at the same time. It's complicated.\" I answered.\n\nJulie laughed, \"That should definitely be your relationship status\"\n\n\"Yeah.\" I laughed. \"But, like Courtney is not a lesbian. She is just Courtney. Rich, spoiled, controlling Courtney. So, it's not like there could ever be a thing there and I don't think I could even handle a relationship that warped. She would ...\" I shuddered thinking about the things she would do to me if I was her 'girlfriend'.\n\n\"Hell, I got off on some of the stuff Rebecca did if I am completely honest about it. She was a little too rough on me sometimes, maliciously so, but her hate for me kind of turned me on.\"\n\nI was searching her face for a sign of disgust, but it looked more like she was trying to understand.\n\n\"Well, I think I want to be there Care.\" Julie smiled at me. \"I'm not innocent you know? I've had sex, and you haven't.\"\n\nI laughed.\n\n\"Well, technically, you are still a virgin, I'm not.\" She pressed her point.\n\nI laughed harder.\n\n\"Okay, I'm not a huge slut like you, but I have had a dick in the RIGHT hole bitch.\" She snapped at my laughter.\n\n***************\n\nWelcome to Jill's World\n\nJulie pulled my red Ford mustang convertible up to my posh new digs.\n\nJulie is my amazing friend. This is going to sound like a POF profile I'm sure, and she does not have a POF profile so don't look for her, but she's about 5'6\", average height for a grown ass woman. She took gymnastics since she was a little girl, so her body is absolutely amazing to behold. Her chestnut brown hair is so soft and shiny she could do a shampoo commercial, she wears it long and straight, nearly halfway down her back. She has some muscle to her from years of gymnastic training. She can still amaze me and make my heart leap watching her on the uneven bars. She can walk on her hands with ease. She's a cheerleader now, for the first time in our senior year. We ... well, I guess it was my thing to hate the cheerleaders for all the prior years and due to some circumstances beyond my control, she and I joined together in this, our final year in high school.\n\nHer nose is perfect, I'd love to break mine and have it look like hers, but I don't think my dad would ever pay for that. Her lips are more like normal lips than my DSLs. They aren't thin, just not overly fat either. Overall, if you looked at her from head to toe, I'd say most people are out of her league. But she isn't like that. She doesn't come from money, she doesn't have cunty friends. Hell, I'm her best friend and the only reason I had a car was because my mom kicked me out to live with my dad, who, as it turns out, has a little bit of money.\n\nBut, the one thing that sets her apart from anything you have ever seen is her eyes. She has the biggest jade green eyes! They are absolutely intoxicating. And yeah, we are best friends and I have a bit of a crush on her and she wants to try it out, let me be her pre-college lesbian experience. So, we are working on that when we can get the right time, right place and a major reduction in baggage with all the things we are dealing with right now.\n\nMe? I'm Carrie. I'm 5'1\" with boobs that are too big for my height. Unlike my best friend, my butt is jiggly and I cannot walk on my hands. I'm not skinny, not fat, not athletic... I'm the boring body tape that nobody looks for, but most people are... 'average'. Except the boobs, which get too much attention for my liking. Hair is a boring light brown and shoulder length, eyes are a boring brown, lips are too big and apparently, or so I have been told, my tongue is longer than normal tongues.\n\nI had a run in with my previously non-existent sexuality for the past couple weeks because of a girl named Darla. She was not very nice to me and she got a lot of other people to not be very nice to me. Anyway, read Darla's Rules if you want to know all about those adventures. It was abusive I think, but eventually, I think SHE couldn't handle it anymore and she sold me for a quarter. LOL! If you never read Darla's Rules you are suspending belief I'm sure. She didn't sell me actually, just the time she had left with me because of a bet that I was tricked into.\n\nSo, now I kind of belong to Jill after an explosive ending to my time with Darla. And as I get home from a very painful transition, our story begins....\n\nChapter 1 HOMECOMING\n\nDad was not thrilled at the fact that I was still dressed as I had been on Friday when I left for school and I looked like hell. I didn't get too close to him because I knew I hadn't showered and, as Julie reminded me on the ride here, I absolutely reeked of the smell of sex... mostly guy cum.\n\n\"Carrie, what in the...\" My dad started to yell and his little tart of a girlfriend jumped in.\n\n\"John...\" Kelly interrupted, looking at my state in shock just like my dad had. \"Not in front of her friend\" she whispered, though I heard it and I'm sure Julie did too.\n\nHe looked at her harshly. \"Carrie, go to your room.\" He said. Then to Julie, \"You should go home, do you need a ride?\"\n\n\"Dad, can she stay ...\" I was cut off. My voice was still gone of course, so I'm not even sure he heard me.\n\n\"No Carrie, I can't.\" Julie interrupted. \"Call me later.\" Then turning to my dad. \"But I do need a ride home. I can call Uber if you want.\"\n\nMy dad was about to call for her and Kelly interrupted. \"John, why don't you drive her home and I will talk to Carrie for a bit.\" Then she whispered to him so I couldn't hear. And she led him back into their bedroom and their voices were indiscernable.\n\n\"Carrie, you need to be nice tonight or you are going to get grounded.\" Julie said. We had moved together so they wouldn't hear us. \"I'm hoping he will let us have our talk tomorrow and if you mouth off he's going to punish you.\"\n\n\"Jules, I need a shower before he smells me.\" I whispered. \"Now I can smell it and it's making me sick.\"\n\nShe giggled, \"It was making me sick the whole drive here, but yeah, why don't you go escape while you can. I will be fine.\"\n\n\"Thanks Julie\" I said and thought of giving her a hug but I had to admit I was pretty gross.\n\nSo I went up and got in the shower before anyone could dictate otherwise, not knowing what or who I would find there when I got out. I decided to make it as fast as I could, though I definitely had to scrub a lot to begin to feel clean again.\n\nWhen I got out of the shower, I went to my room and wished I had underwear to put on. It had been so long. But I did have some sweatpants and a night shirt and I put those on and headed down to face my fate.\n\nAnd when I got to the bottom of the stairs, there was Kelly.\n\n\"You won the coin toss?\" I asked her, smiling weakly. At least it didn't burn anymore when I spoke, but I was sure my voice was way off.\n\n\"So, you know you don't have to tell me anything.\" She said, looking at me for some sign I guess. \"But you are going to have to tell your Dad a lot more than you have been Carrie. Your car is this close to getting pulled already and you've only had it two days.\" She held her fingers an inch apart.\n\nI frowned. I loved my car. \"I told him it was a party. I didn't drive drunk. I don't see what the big deal is.\" I tried to deflect.\n\n\"Carrie, come on, you have got to stop assuming that grownups are out to get you. And you really need to stop lying so much. Come on. He's trying. You are hurting him though he will never show it.\"\n\n\"Farin and I ... we broke up last night.\" I said and started crying. I hadn't really had a good cry about it.\n\nShe came over and hugged me... and damn I hated that I let her and rained tears into her shirt.\n\nI was a total bitch. I was using Farin even now.\n\n\"oh baby. I'm sorry.\" Kelly said. \"I'll have to say, I'm a little confused. But, breakups always hurt.\"\n\n\"Kelly, I'm sorry about this, please don't take it too personally, but I'm having a lot of trouble dealing with you. I'd almost have been better off if you were like a bitch who was pissed off at the inconvenience of having to take me in.\" I said. \"Not better off really, just that was what I was prepared for.\"\n\nShe laughed softly. \"I can certainly understand that. Like I said, I'll take what I can get when I can get it. I'm not going anywhere.\"\n\n\"You want a cup of hot chocolate?\" Kelly asked me.\n\nI laughed. \"I'm not 10 ... but yeah, a cup of hot chocolate would be awesome.\"\n\nKelly put her arm around me and walked me into the kitchen. \"I'm not 10 either and I still like hot chocolate. Everything is better with chocolate.\"\n\n\"So, do you need anything? Like clothes, school supplies? I love to go shopping Carrie, please give me an excuse to go shopping!\" She smiled.\n\nI was sitting there sipping my coffee. \"Well.. to be honest? I need some underwear badly.\" I laughed.\n\nI could wear underwear again!!!!!\n\n\"Oh.. awesome!!!! Let me see if I can get your dad to let me take you to Victoria Secrets.\" She squealed. I think I saw her looking at my breasts just then.\n\nI laughed. \"He'll probably want me to go to Target in the Disney princess collection\"\n\n\"Well, I'm sure he will, but what he doesn't know...\" Kelly laughed.\n\nAnd I was really starting to like Kelly. Shopping spree at Vicky's? Sounded like a plan to me.\n\n\"You know Carrie, I'm sure it wasn't a big deal at all living with just your mom, and it doesn't bother me at all, but when your dad is around, you should probably wear a bra sweetie. Or at least a cami. Your nipples are rather prominent in that shirt.\"\n\nI blushed. \"Oh, sorry, I wasn't thinking.\" Did my nipples just get hard when she said that, because she seemed to be staring at them again. I looked down. Yep, stupid nipples showing off again.\n\nKelly changed the subject to something that didn't involve my boobs though to save us both a bit of embarrassment.\n\nKelly and I were still actively chatting about shopping and about school. She touched on the Julie subject and I just told her we were shelving it for awhile. She smiled, but didn't offer an opinion either way, for which I was grateful. I did notice her eyes drift to my nipples every now and then, though she was quick to correct it when she caught me catching her.\n\nAnd my dad got home.\n\n\"There's my two favorite girls.\" He smiled.\n\nWow! Did Julie just save my ass somehow? Not the entry I was expecting at all.\n\n\"Welcome home honey.\" Kelly greeted and got up to kiss him. \"Carrie and I want to go shopping.\"\n\n\"Well, we can all go tomorrow.\" Dad said and turned to me.\n\n\"For underwear.\" Kelly added.\n\n\"Well, you two can go tomorrow.\" He laughed.\n\nThen he turned to me. \"Carrie, I'm sorry about your girlfriend. I guess that was a rough night for you. But listen, alcohol is never the answer. It won't make your problems go away. It usually makes them worse. However, I'm going to consider this a last chance for us to get on the same page or I am going to have to start taking away privileges, okay?\"\n\nI smiled. \"Yeah, I'm sorry Dad, I should have called earlier. Thanks for understanding.\"\n\n\"So Julie tells me you got a part time job?\" My dad asked.\n\nDamn Julie is like my guardian angel! I had totally forgot about that. \"Yeah, I start Monday after school. It's like three hours a day on school days and weekends. Pretty awesome.\"\n\n\"What are you going to be doing? Where is it?\" He asked.\n\nTwo excellent questions that I had not yet thought of an answer to. Time for some Carrie Fitch quick thinking. \"Oh, like cleaning and cooking and some random stuff like that for this couple out by 83\"\n\nHe looked a little confused. \"Julie said you were going to be interning?\"\n\nGreat! Thanks Julie, now I look like a liar and an idiot. Your wings are revoked. \"Well, yeah, they own some businesses, but I'm starting at the bottom.\"\n\n\"Oh, okay.\" He smiled.\n\n\"So, who's hungry?\" Kelly asked.\n\n\"Famished!\" I answered.\n\n\"Okay, well why don't you go clean up\" And she motioned with her eyes towards my nipples. \"I will make some dinner and after maybe we can watch another chick flick John?\" She batted her eyelashes at him.\n\n\"Yeah, yeah, I guess I have to get used to being outvoted.\" He smiled.\n\n\"Thanks Dad!\" I gave him a kiss on the cheek and ran up to my room to change.\n\nI grabbed my phone and texted Julie.\n\nTHANKS FOR THE HEADS UP THAT MY NEW JOB IS AS AN INTERN DUMBASS\n\nShe replied quickly.\n\nOH DAMN SORRY \n\nSO HOWS IT GOING? YOU GROUNDED?\n\nAnd I joyfully responded\n\nNOT EVEN FOR A SECOND AND KELLY AND I ARE GOING SHOPPING AT VICTORIA SECRETS!!!!\n\nAnd she wasted not a second\n\nGOOD CUZ YOU NEEDED TO COVER YOUR SKANK ASS\n\nVERY JELLY\n\nI laughed\n\nSEE YOU TOMORROW\n\nThen, I remembered to text Jill\n\nCARRIE: I'M HOME AND ALL IS WELL WILL BE THERE MONDAY\n\nJILL: HOW LONG HAVE YOU BEEN HOME?\n\nCARRIE: A COUPLE OF HOURS, I HAD TO TALK TO MY DAD",
        "JILL: I SPECIFICALLY TOLD YOU TO TEXT ME WHEN YOU GOT HOME NOT TWO HOURS LATER\n\nCARRIE: SORRY\n\nJILL: YOU WILL BE PUNISHED\n\nI wondered if there was any way to not be punished in their world. Then a string of texts started hitting my phone.\n\nSUE: CONTACT: SUSIE SNOWFLAKE\n\nSUE: CONTACT: RACHEL\n\nSUE: CONTACT: JACKIE\n\nSUE: CONTACT: LINDA\n\nSUE: CONTACT: JAMIE\n\nSUE: CONTACT: LEATHER &amp; LACE\n\nSUE: CONTACT: LUMBER CO\n\nSUE: CONTACT: SUGAR AND SPICE\n\nSUE: YOU DIDN'T SAY MISTRESS\n\nSUE: THREE TIMES\n\nSUE: CALL TOMORROW MORNING AT 9:00 \n\nSUE: LOVE YOU SLUTBALL\n\nI was so bad at this. So, right out of the gate, four fuckups. I sighed.\n\nNothing for it now, so I put on a robe on over my clothes and tied it so it hung loosely over my breasts. I ran a brush through my hair and my phone dinged with another message\n\nFARIN: I LOVE YOU CARRIE *sad emoji*\n\nFuck! That stung. I decided to ignore it.\n\nI ran downstairs. Okay, so Monday was going to probably be bad. But I had tonight and tomorrow and even all day Monday at school without any rules. AND I was getting underwear back in my life.\n\nAfter dinner, we watched '50 First Dates'. At first, Dad and Kelly were on the sofa together and I was over on the love seat curled up in a blanket. But, Kelly invited me to come sit with them, and though I declined at first. I changed my mind about a quarter way into the movie.\n\nI can't remember the last time I watched a movie without Julie or my mom snuggled next to me. And it just felt better or more... right? I was on Kelly's other side away from my Dad. If you had asked me five days ago if this would ever happened I would have laughed in your face.\n\nAfter the movie, I kissed my dad goodnight and hugged Kelly and went off to bed. It wasn't late at all. Only just before 11:00 on a Saturday night.\n\nI slept like a rock.\n\nThe next morning, I slept in until after 8:00. That was when a knock on the door told me to get out of bed. Struggling to open my eyes, I told my dad I'd be downstairs.\n\nI went through my clothes. I still had most of it in boxes. My dad had hung up everything that was on a hangar, but had mercifully left the boxes unopened. I pulled out the most conservative clothes I could find, a pair of sweat pants and the baggiest cotton shirt I could find. Then I headed down to get some breakfast.\n\nDad and Kelly had already eaten and were talking over a cup of coffee.\n\n\"Good morning Sweetie.\" My dad greeted me.\n\n\"Coffee?\" Kelly asked, getting up from the table.\n\n\"Sure.\" I smiled. I wasn't an avid coffee drinker, but I could use some caffeine in my life right about then.\n\nI sat down opposite my dad and asked him if I could go see Julie today.\n\nHe frowned. \"Well, I think we should talk about school and college and maybe your breakup if you want to talk about it.\"\n\nThis was uncomfortable to say the least. \"School is great. I'm doing better ... well the last couple days were a lot better.\"\n\n\"What do you want to do with your life after high school?\" He asked. Blunt, to the point.\n\n\"I don't know. I guess I always wanted to do something in art, but I'm not sure if college is where you go to do that.\" I answered. Honestly, my mom had talked about college, but she wasn't very proactive in pushing the issue and I figured we were too broke for me to go to anything beyond a community college next year. \"I was thinking I'd just go to community college and figure out what I want to do there.\"\n\n\"Carrie, that's not really a plan sweetheart. So, besides art, what else do you like?\" He pushed.\n\n\"I just thought I'd work retail for a while and maybe, I don't know Dad. I like English class.\" I laughed.\n\nAnd then I remembered, I have a paper to write and I still hadn't even selected a topic.\n\n\"Do you like history?\" He asked.\n\nI thought about all those dates and events. And though I liked history, like as it related to where the world has been and important characters and events, I did like history. I just hated memorizing dates. \"Yeah, not so much the dates of things, but the things themselves.\" I answered.\n\n\"Well, you could go to law school.\" He suggested.\n\nLaw school? I laughed. I mean out loud. \"Dad, I'm not that ... smart.\"\n\nHe laughed softly. \"You are plenty smart Carrie, but trust me when I say that intelligence is not a prerequisite for being a lawyer.\"\n\nKelly laughed as she set the coffee in front of me and then she sat next to my dad.\n\n\"Well, that is like eight years of college Dad, I never really even entertained that thought.\"\n\n\"So, now you are entertaining it.\" My dad replied. \"You can be anything you want to be pumpkin.\"\n\n\"Well, maybe.\" I answered. Lawyer? Me?\n\n'Ladies and Gentlemen of the jury...' Yeah, that didn't sound like me. Maybe? I couldn't picture it.\n\n\"But, I think a couple classes in college will help you figure it out. I won't discourage you from pursuing art classes, but you do need to have a degree that will earn you some money.\" He offered.\n\n\"Sure... I guess so.\" I acquiesced.\n\n\"So, do some research, pick out ten colleges by the end of the week and we will start getting your applications together next weekend. And not a bunch of community colleges Carrie. I can put you through college. You will have to take some loans, but with a degree, you can easily pay them back and if you can't, I can.\" He smiled.\n\nI guess my mouth hung open a little. \"Thanks Dad. I'm not really sure how to take this in right now. It's a bit of a surprise to me to be honest.\"\n\nKelly smiled at me.\n\nI looked at my phone for the first time since getting up. There were 27 messages! And I noted the time was 8:52. I needed to call Jill.\n\nI sipped the last of my coffee. \"I'm going to take a shower and digest this.\" I laughed.\n\nIn the locked bathroom, with the shower running, I figured was the best way to cover the sound of me talking on the phone. At 8:59 I rang Jill's phone.\n\n\"Good morning Carrie.\" Came her voice.\n\n\"Good morning Ji... Mistress.\" I cringed as I caught myself. Soon enough?\n\nA soft laugh on the other side. \"Getting there. Jill does not exist for you Carrie, try to remember that. Add another punishment, that is five so far.\"\n\n\"Yes Mistress.\" I whispered.\n\n\"What are your plans today?\" She asked.\n\n\"Well, I'm trying to convince my dad to let me go talk to Julie and then Kelly is taking me shopping to Victoria Secrets later.... Mistress.\"\n\n\"It has to be second nature to you Carrie. Add a punishment. I will remember the number and you should be correct when you tell me Monday afternoon. No hesitation.\"\n\n\"How do your tits and ass look?\" She asked. \"You can't have Kelly seeing welts on your breasts and ass, but there should not be anything remarkable on your tits. Maybe some small dots of bruises, I didn't hit you very hard at all\"\n\nShe didn't hit me very hard at all?! Was she fucking kidding?! I looked in the mirror. My boobs were definitely still showing signs from the cat of nine tails.\n\n\"There are still marks.\" I answered and then turned and looked at my ass in the mirror. It was starting to fog from the hot water. \"My ass looks a lot worse.\"\n\n\"Send me a picture so I can better advise you.\" She said. \"Add two more punishments.\"\n\nShit! I needed to get ... what am I at now? Eight?\n\n\"Yes Mistress.\" I answered and snapping a picture of both my tits and ass, I blushed profusely, thinking of sending naked pictures like some thirsty slut. I sent them and waited for a response.\n\n\"Okay, it's all healing nicely. Send me another pic of your tits before you leave and I will tell you if you need to hide them from Kelly. The ass is definitely out.\" She instructed.\n\n\"Yes Mistress. I wasn't planning on Kelly seeing anything Mistress.\" Why the hell would Kelly see me naked? That was a weird thing to even suggest.\n\n\"I didn't think you would plan on anything Carrie, but you are going to a lingerie store and she might see something in the process. I don't want you to have to explain something you aren't prepared to explain.\" She told me.\n\n\"Now, I know everything Darla was doing and your body might go into a bit of a remissive shock from not edging five times a day. So, if you need to cum, you have five minutes, it will be your last opportunity today.\"\n\nWhat the fuck? She wanted me to masturbate on the phone with her? How fucking weird. \"No, I'm fine Mistress.\" But now that it was in my head, I suddenly felt like it wouldn't have been a bad idea. But no way I was doing that.\n\n\"Okay, the opportunity is gone then. How are things at home? With your Dad?\" She asked.\n\n\"He's fine Mistress. Julie told him I was upset and got drunk because of Farin and he bought it. He is actually talking to me about college Mistress.\" And as an afterthought. \"He also agreed to let me work as your intern Mistress. Julie told him that when he drove her home last night Mistress.\"\n\n\"College is important.\" Jill replied. \"That is great news Carrie. And being my intern, very nice description of what you will be doing for me.\"\n\n\"So, you will have panties and bras again. Good. You will wear a bra always when your father is present unless you are dressed for bed. At school Monday, you will take the bra off and keep it in your book bag, until I tell you otherwise. You will wear panties except at night and you will leave them in your car when you come to see me Monday. You will hang them on your rear view mirror. You may acquire three bras and four pairs of panties and anything that does not qualify as bras or panties, like sleepwear should that be offered. The bras will be three different colors that you may choose. The panties will be one boy shorts, one thong and two bikini cut. Again, you may choose the colors. Do you understand everything I just said?\"\n\n\"Yes Mistress\" I answered.\n\n\"Good girl. That is all for now. If you need to call or text me while you are talking to Julie, you may do so. Other than that I will expect a photograph later today before you go shopping.\"\n\nAnd she hung up.\n\nI was naked. The room was filling with steam and I suddenly felt overwhelmingly ... well... horny. I touched my pussy to see if it was as charged as I felt right now and sure enough, my hand came away wet. She told me what panties to buy. Why was that eating at me? I couldn't understand it.\n\nSo, I jumped in the shower to clean up. The hot water burned my ass a little, not so much on my tits though they were still sore. After drying up and wrapping a towel around me, I made my way to my room and then got my phone out. I would need to charge it soon.\n\nA couple of new messages were there. Thirty-one of them now.\n\nFARIN: 10:35: PLEASE TEXT ME BACK CARRIE\n\nFARIN: 10:37: I LOVE YOU PLEASE DON'T BLOCK ME OUT\n\nFARIN: 10:38: CARRIE PLEASE TALK TO ME!!!!!\n\nFARIN: 10:38: I CAN'T JUST WALK AWAY PLEASE PLEASE CALL ME I'M LOSING MY MIND!\n\nFARIN: 10:40: SERIOUSLY CARRIE! I NEED YOU TO CALL ME NOW!\n\nFARIN: 11:03: CARRIE YOU CAN'T TELL ME I DIDN'T MEAN ANYTHING TO YOU CALL ME PLEASE!\n\nFARIN: 11:12: FUCK YOU THEN! \n\nFARIN: 11:12: SO GLAD YOU GOT TO USE ME LIKE YOU DID! AT LEAST I GOT TO CUM FROM IT!\n\nFARIN: 11:12: YOU ARE SUCH A CUNT! WHY WON'T YOU CALL ME? \n\nFARIN: 11:13: I DIDN'T MEAN THAT JUST CALL ME PLEASE\n\nFARIN: 11:52: YOU OWE ME CARRIE CALL ME\n\nFARIN: 11:53: I DID SO MUCH FOR YOU\n\nFARIN: 1:47: I MISS YOU I MISS YOU I MISS YOU\n\nFARIN: 3:12: WHY WONT YOU TALK TO ME BABY? \n\nFARIN: 3:16: I KNOW YOU ARE NOT HEARTLESS I KNOW YOU LOVE ME PLEASE STOP PRETENDING YOU DON'T\n\nFARIN: 3:41: I CAN'T SLEEP\n\nFARIN: 3:52: I GUESS YOU ARE SLEEPING HUH?\n\nFARIN: 4:28: ARE YOU IGNORING ME OR JUST NOT GETTING THIS? PLEASE TELL ME IF YOU ARE IGNORING ME AND I WILL STOP\n\nFARIN: 4:49: PLEASE AT LEAST TEXT ME TO LET ME KNOW YOU ARE OKAY\n\nFARIN: 5:32: WAKE UP WAKE UP WAKE UP LOL\n\nFARIN: 5:48: SLEEPING IN?\n\nFARIN: 6:24: FUCKING BITCH! CALL ME! NOW!\n\nFARIN: 6:56: WE ARE NOT FINISHED CARRIE I AM NOT LETTING US GO! I DON'T CARE WHAT JILL SAYS\n\nFARIN: 7:34: FUCK JILL CALL ME\n\nFARIN: 7:34: I MEAN IT CARRIE DON'T DO THIS TO ME\n\nFARIN: 7:35: CARRIE IF YOU DON'T CALL ME I AM GOING TO KICK YOUR ASS LOL\n\nFARIN: 7:51: I'M DYING CARRIE PLEASE IF I EVER MEANT ANYTHING TO YOU CALL ME\n\nFARIN: 8:23: I'M GOING TO KILL MYSELF NOW JUST KNOW THAT I LOVED YOU\n\nJULIE: 8:30: GOOD MORNING CARE, YOU COMING OVER TODAY? LET ME KNOW\n\nFARIN: 9:02: OKAY I'M NOT GOING TO KILL MYSELF PLEASE CARRIE CALL ME\n\nFARIN: 9:16: PLEASE BABY PLEASE PLEASE PLEASE PLEASE PLEASE CALL ME\n\nI looked at my phone and cried. In spite of everything we had been through and everything I thought in the last couple days. I did love her. It was so confusing. Maybe she was right. Maybe if it hadn't been for Darla, we wouldn't have had all the issues we had. I read through the messages again and plugged my phone in the charger to think.\n\nContacting her would be against Jill's rules she laid down for me. And... knowing them... it might just be a test. Maybe Jill was telling her to do it. To see if I would answer so she could punish me some more.\n\nPulling on a pair of sweat pants, because, I was so done with wearing skirts for a while, I laid back on the bed and cried. I wanted to call her so bad. I wanted to text her at least, to let her know I was okay.\n\nI decided I needed to do something. And the only thing I could think of to do that would not get me in more trouble was to text Jill.\n\nCARRIE: MISTRESS, MAY I TEXT FARIN TO LET HER KNOW I AM OKAY?\n\nJILL: NO AND YOU ALREADY KNEW THE ANSWER SO WHY DID YOU BOTHER ASKING?\n\nCARRIE: SHE HAS BEEN TEXTING ME COULD YOU PLEASE TELL HER I AM OKAY FOR ME MISTRESS?\n\nJILL: YOU WILL TEXT ME IF SHE TRIES TO CONTACT YOU AGAIN \n\nJILL: DO NOT RESPOND TO HER\n\nJILL: YOU DID THE RIGHT THING TEXTING ME\n\nJILL: THINK ON IT NO MORE GO TO JULIE IF YOU CAN AS SOON AS POSSIBLE AND ONCE THERE TURN YOUR PHONE OFF\n\nCARRIE: YES MISTRESS\n\nI sobbed and pulled a shirt over my broken heart. It was just an old ocean city T shirt. I put on socks and tennis shoes and went back to the bathroom to sort out my face.\n\nWhen I got downstairs, I guess it showed a little I had been crying. My dad hugged me tight. \"It's going to be okay princess. It will hurt for a while, but I promise, it will hurt less every day.\"\n\nKelly sighed.\n\n\"Why don't you go spend the day with your friend Julie? I don't think you want to talk to your dad about this, but you know I will talk to you about it if you want. All day if you like. I was in love before too you know.\"\n\nKelly chirped in. \"Before?\" She asked.\n\nDad laughed. \"Before I met you yes, I loved other women dear.\"\n\n\"As long as it's just me now.\" She laughed.\n\n\"She's joking princess, she knows I love her. But that's what I mean. If I hadn't broken up with other women I thought were right for me, I never would have met Kelly. And I am truly happy with her as the best part of my life now, besides you of course.\" Dad told me in answer.\n\n\"I think I will have to take a raincheck on that Dad.\" I smiled though it wasn't very sincere. \"I'm not sure I ever want to hear that.\"\n\n\"Fair enough princess.\" He chuckled. \"It's nearly 10:00. Be back at 6:00 for dinner.\"\n\n\"Thanks Dad.\" I smiled and with a kiss on his cheek, I ran upstairs to tell Jill I was coming over.\n\nWhen I got my phone to text her, I had more messages. I sighed before I read them, it looked like they were all from Farin.\n\nFARIN: 9:37: YOU FUCKING TOLD JILL I TEXTED YOU?\n\nFARIN: 9:37: WOW CARRIE WHAT A BITCH THING TO DO\n\nFARIN: 9:37: I GUESS I REALLY DID MEAN NOTHING TO YOU\n\nFARIN: 9:37: SURE JUST USE ME FOR YOUR LESBIAN EXPERIMENT LIKE EVERYONE ELSE\n\nFARIN: 9:37: THEN THROW ME AWAY LIKE GARBAGE\n\nFARIN: 9:38: YOU KNOW... I THOUGHT YOU WERE DIFFFERENT\n\nFARIN: 9:38: BUT I GUESS YOU ARE JUST A STRAIGHT CUNT LIKE THE REST OF THEM\n\nFARIN: 9:38: GO AHEAD AND TELL JILL AGAIN SHE DOESN'T OWN ME\n\nFARIN: 9:38: BUT CLEARLY SHE OWNS YOU DOESN'T SHE?\n\nFARIN: 9:38: YOU ARE SUCH A FUCKING SLAVE\n\nFARIN: 9:39: MAYBE WHEN JILL IS DONE TRAINING YOU I WILL COME TAKE YOU AS MY OWN\n\nFARIN: 9:39: BECAUSE OBVIOUSLY YOU WOULD RATHER BE OWNED THAN LOVED\n\nFARIN: 9:39: YOU MAKE ME SICK GO TEXT YOUR PRECIOUS MISTRESS\n\nCARRIE: 9:53: MISTRESS, FARIN TEXTED ME AGAIN\n\nCARRIE: PLEASE MISTRESS BE NICE TO HER I CAN'T HANDLE THIS\n\nCARRIE: SHE'S BREAKING MY HEART MISTRESS\n\nJILL: I'M NOT GOING TO HURT HER CARRIE \n\nJILL: SHE IS GOING TO BE FINE I WILL TALK TO HER\n\nJILL: DO AS YOU ARE TOLD FOR NOW\n\nJILL: GO TALK TO JULIE NOW TURN YOUR PHONE OFF UNTIL YOU SEND ME THE PICTURE AS INSTRUCTED\n\nCARRIE: YES MISTRESS\n\nAnd I cried. I turned my phone off. For about fifteen minutes I sobbed. Then, pulling myself together, I washed my face and went back downstairs, still in sweatpants and the T shirt.\n\n\"Love you Dad.\" I said to him and gave him a kiss on the cheek. \"I will see you at 6\"\n\n\"Bye Kelly.\" I waved as I headed out the door to their well wishes.\n\nI drove to Julie's house in silence. I couldn't listen to the radio, I needed silence. I cried the whole hour drive.\n\nParking in front of her house, I went to the door and knocked.\n\n\"Hey\" Julie smiled, then frowned and pulled me into a hug when she saw all the tears on my face. I just let myself fall apart there at her doorstep and she just hugged me without a word and let me cry on her shoulder.\n\n\"Okay, let's go to my room.\" She whispered.\n\n\"Hello Carrie,\" Mrs Petrili greeted when we finally went inside. She was at the table reading a book and sipping some coffee.\n\n\"Hi Mrs Petrili\" I tried to smile and well... how could she not see my tear streaked face.\n\n\"Oh Carrie, I'm so sorry. It will get better. You are welcome here anytime, you know that.\" She offered.\n\n\"Thanks Mrs Petrili. That means a lot.\"\n\n\"We are going upstairs mom.\" Julie tugged me behind her.\n\n\"Okay, let me know if you need anything, I'll call you down for lunch later.\" She answered.\n\nAnd Julie and I went into her bedroom.\n\n\"Well, it's not your Taj Mahal.\" She smiled. \"But make yourself at home.\" And she closed the door behind us.\n\nI sunk onto her bed and she offered me a Kleenex. She had a full box prepared for me. And one for her.\n\n\"Okay, you want to start?\" Julie asked.\n\n\"Farin texted me... a lot.\" I sobbed. \"She hates me now I think.\"\n\n\"Of course she doesn't hate you Carrie. She loves you in her own warped fashion.\" Julie told me.\n\nI blew my nose and it sounded disgusting. \"Sorry.\" I whispered.\n\n\"Okay, I'm not going to press you for any details.\" Julie said. \"But listen, no judgments if you want to tell me about what they did to you. I know about the blowjobs of course. That really upsets me in so many ways.\" She cried but kept talking. \"You think you are a lesbian right now so I can't even imagine how horrible that would feel. That would be like forcing me to lick pussies for...\" She trailed off.",
        "\"Actually, no it wouldn't since I'm curious about it. But a month ago, it would have been like that and I can't imagine how much that would have messed with my head. How are you coping with it?\"\n\n\"Honestly, it really isn't bothering me that much. Maybe because I have too many other things going on right now. I hated it. It was so demeaning and gross. I can't imagine you having any respect for me whatsoever right now, I guess that is what bothers me most about it. Not the fact that I did it. That was dreadful enough. But the fact that you know bothers me more than the respect I have lost for myself.\"\n\nJulie cried some more and hugged me. \"I don't ... well come on Carrie, that's so vile, of course I don't want you doing things like that. But, I still respect you. It's not even like you wanted to do it. If it had been your idea, well, we'd still be friends, but I'm sure it would affect our relationship. But you didn't want it. And the worst thing is that I was there and participated in this stuff.\"\n\n\"It's tearing me apart Carrie, really. I mean knowing that twice I took advantage of you, that I participated in your abuse, that is really eating me up inside. I am so sorry. I swear to you.\" Julie cried.\n\n\"Oh Jules, I hate this. I hated it all. But, believe me, I never blamed you for doing what you did. I mean, you even said you wished I was there with you and you are right. If I heard the same things that you did, we would have had a good time doing things to some girl who we thought was into it.\"\n\n\"Well, maybe, it was a bit weird you baring your pussy in front of all the girls like you did. I'm not sure that I would have done that to be honest about it.\" I added as a second thought.\n\nJulie laughed. \"You have exposed a lot more than me to a lot more people and you are thinking I should have been more shy? Seriously, Carrie, you .... Well, I guess this is why I really and truly want to see what this is all about. Your head seems like a foreign concept to me how you ... Carrie, you had more juice flowing from your pussy than I have ever seen in my life!\"\n\nI teared up again and let out an agonizing cry.\n\n\"What?\" Julie asked, frowning. \"What's wrong?\"\n\nI took in a deep breath and let it out. \"My turn.\" I pushed her to where we were sitting facing each other and forced a smile. \"This is hard. I mean... telling you this is ... a part of me is happy to have someone I can tell about this... these things that happened and another is horrified by the prospect of losing you as my friend. It's not pretty.\"\n\nShe squeezed my hand. \"Carrie, you are never losing me as a friend. Please stop saying that.\"\n\n\"Okay, so you know I guess some of the worst of it. The bathroom thing and the blowjobs behind the wall thing. No, I never ever in a million years would have done those things on my own. It was horrible and if I knew anyone that was such a ...\" I cringed. \"... a slut like me, I would make fun of them.\"\n\n\"But, I did get off on it. My pussy was dripping all the time. And the worse the things were that Darla did to me, the more my body went insane. I hated myself... still do. It's not right that my body responds the way that it does to all this abuse.\"\n\n\"There were other things... a lot of other things... but every time I did something that I hated, they would show me how wet I was and how excited I was. They would laugh at me... or taunt me... and show me how wet I was... and tell me how much I must love it.\"\n\n\"I'm a slut Julie. I don't want to be a slut. I hate being a slut. But the more they did, I guess I craved it. I hated it, don't get me wrong. I am so happy that I will never have to answer to Darla again. But my body? It was like telling my mind all the time, reaffirming their statements that I am just a slut.\"\n\nJules was looking at me, taking it all in. A puzzled look on her face.\n\n\"Jill... she told me some things.\" Julie began. \"She said that nobody expected the reactions you gave. That they hadn't seen anything like you before. It's not that you are a slut Carrie. Nobody believes that you really want to fuck anything that moves. It's that you get excited, or if you prefer, your body gets excited by being humiliated. By doing things that you would never do. Doing things that embarrass you.\"\n\n\"The whole setup was partly my fault and I never even knew it.\" Julie continued and started weeping again. \"I told Chad we were going to the Walmart that day when you met Rick. That was how they knew to get him there to seduce you. Chad didn't know either. He still doesn't know and I want to keep it that way. He was just there with Brad and Rebecca when I made the call. Rebecca called Farin and it was set up from there.\"\n\n\"Farin set this all up?\" I asked dumbfounded.\n\nJulie sighed. \"Farin has had a crush on you for years. She paid her sister to make it happen. I think there was some more to it than that. Like a challenge for Darla. But, Farin wanted you to love her when it was all over. Jill didn't even know about that part at first. She was under the impression that Darla had manipulated the situation for her own advancement. Like proving that she could break a really tough, unbreakable girl.\"\n\n\"I didn't understand a damned thing she was talking about, that was why it took her a couple of hours in private with me to explain a lot of it to me. When Jill found out that Farin was behind it, she was pissed. I mean, that's what she told me. But, and when she told me this, she really seemed to mean it Carrie, when they kept confirming your reactions, Jill let it go on and she regrets it. She really does.\"\n\n\"And here is where it gets really ... well, I have to agree with her. She's going to fix it. Do things, help you to understand your body. She's afraid... I'm afraid too... that you might, if you were left alone to deal with this... you might hurt yourself. You hate yourself for these things. And I'm not sure you can just switch that off. If you were just left alone, you might ... I don't know Carrie, kill yourself?\"\n\n\"I would just die if that happened. So, ummm...\" Julie wiped her tears off her cheeks and seemed to be blushing. \"Damn, this is so twisted.\"\n\n\"So, think about how that ... I guess lets go with the dicks in the wall... thinking about those dicks in holes in the wall and you back there sucking them off, these guys who had no idea who you were. Just being a mouth to empty their balls into.\"\n\nShe was watching me so intently. What the fuck was she doing? Trying to make me feel like shit?\n\n\"Half the football team fucked your mouth that night. No self-respecting girl would do anything so vulgar. I can't even imagine how you could stomach that much cum. You don't even like cum. You told me so. You never swallowed when you went down on Brad when you were dating him. So, ... How did.. umm ... did that make you hot? Does it make you wet now?\"\n\nAnd then she made my heart explode. Julie slid her fingers into the waist of my sweat pants and pulled them away from my belly and slid her other hand in and touched my pussy, just a swipe of her fingers up my slit. And I moaned far too loud. And then I cried. She held her hand up and her fingers glistened.\n\n\"I'm a freak!\" I sobbed.\n\nJulie pushed the fingers close to my mouth. Holding them just inches away, but not moving them any closer. I sobbed again and then leaned forward and sucked them as my body shook violently.\n\n\"wow.\" Julie whispered. \"I'm sorry Carrie, that was probably wrong for me to do that. I just wanted to see... Damn, forgive me?\"\n\nI fell into her arms. \"Please don't leave me. I'm so sorry Jules. I don't know how I got this way.\" I cried.\n\n\"It's okay Care Bear. I shouldn't have done that.\" Julie hugged me tight and let me cry for a little while.\n\n\"You know what?\" I asked, still hugging her. \"Things are very different now ... I mean between you and me.\"\n\n\"Yeah, I know.\" Julie replied. \"I hope it will be for the better. Let's change the subject for a while and calm down.\"\n\nI pulled back and looked at her. \"Calm down?\" I smiled. \"Are you turned on by this?\" I asked incredulously.\n\nJulie blushed. \"I guess I am. It certainly felt weirdly exciting. But, look, this is serious... very serious... I am not replacing Farin, I am not gay. I don't want you to come down off this roller coaster you have been on for the last couple of weeks and fall in love with me. We need to be friends right now, just friends. If you start feeling something else, you have GOT to let me know and we need to take a break from me being involved in any of this... stuff.\"\n\n\"Jesus Julie, get over yourself already.\" I laughed. \"You think I fell in love with every girl who touched my wet snatch in the past two weeks?\"\n\nShe laughed with me. \"Probably.\"\n\n\"Well I didn't. But, okay, change of subject for awhile... My dad wants me to be a lawyer.\" I laughed.\n\n\"Huh?\" Julie asked. \"Well, you are smart enough, but why a lawyer?\"\n\n\"I have no idea, he thinks because I like English and History or something. Speaking of which, we have English papers to write! I had totally forgotten about it until he reminded me.\"\n\n\"Yeah, no kidding. So, what do you want to write about?\" She asked.\n\n\"The difficulties of being a slut in modern society. Sounds like a good title?\" I joked.\n\n\"I'm not sure Miss Galler would approve of your subject.\" She smiled.\n\nAnd well, we became Jules and Carrie again for awhile. We joked and talked about serious things like school and my car. I told her about my after school sessions with the school shrink and her attempts to psychoanalyze me and we joked about how she could make a career out of me with a new mental illness.\n\nAnd by the time we washed our faces and blew all the snot out of our noses, it was time for lunch. We had a very nice lunch. It was a lot like old times. Mrs Petrili was engaging us in conversation about school and my new life with my Dad and his young girlfriend. And we all ragged on him a little, but I ended up defending him and her for all they were doing for me.\n\nThey weren't vicious about it. I guess it is natural that a woman gets a little indignant about a man their own age dating or marrying a woman that is about fifteen years younger. And I was gathering that Jules had not disclosed to her mom the reason that I screamed and came running back to her house the other day.\n\nWe spent over an hour and a half chatting and eating, mostly chatting. And at last, Julie and I excused ourselves and went back upstairs to her room. Once we were behind a closed door with not-too-loud music playing in the background, we settled onto the bed again.\n\n\"So, about tomorrow.\" Julie smiled at me. \"Are you okay if I am there?\"\n\nI took a deep breath. \"I'd rather you weren't\" I answered, that was my knee jerk response. Julie's disappointment shown on her face.\n\n\"Julie, I'd really love to have you there with me for this, and I know that you would be there as a friend and try to understand it all. But, here's the thing... There is so much of what happened that you don't know. And I'm not sure if I can handle that being told to you by someone else. It would be like I betrayed your trust. And I don't want you to think that ...\" I trailed off lost in thought. \"I don't know. I guess I lied to you quite a bit over the past couple weeks to hide what was going on. Like Courtney's nose for example.\"\n\n\"YOU broke Courtney's nose?!!!\" She screamed way too loud. \"Holy shit!\"\n\nI shushed her. \"Your mom will hear.\"\n\n\"Who cares?\" Julie laughed. \"My best friend is a beast! Damn Carrie, how ... what happened?\"\n\n\"She... well, I should say they... pushed me a little too much one day and I snapped and took it out on Courtney. That's why Jill is letting her stick around I guess, to see me punished for breaking her nose, or maybe to silence Courtney. I'm not sure. It sounds cool I guess, but it was really awful. I didn't just hit her once. I went into a rage. You might recall, that was the same time my hands were all beat to hell. After they took her to the hospital, I beat the inside of the car and then a tree until my fists were bloodied.\"\n\n\"Wait. Okay, time for me to interject.\" Julie interrupted. \"First of all, good for you Carrie. You aren't a fucking dog like these bitches seemed to think. You have never as long as I have known you, backed down like you have the last couple weeks. You have always been a tough character in a tiny body.\"\n\nShe laughed. \"And for the record, Jill is letting Courtney stick around because of Courtney's attitude, nothing else. At least that is what Jill told me. I was there in the room when she talked to Courtney for a while, though she was there before me so I'm not sure what they said before I got there.\"\n\n\"She grilled them Carrie. She interrogated all of them, hell, she interrogated me. And you know what most of her questions seemed to be geared around? Is whether they liked you and why they were doing what they were doing. And I was there for a bit of it and she likes Courtney's attitude.\" She giggled. \"She said Courtney reminds her of a richer version of herself when she was her age.\"\n\n\"But more importantly, Courtney holds absolutely no grudge against you whatsoever. Look, unless Courtney is the best liar in the world, she had Jill and I both with no doubt that she would never do anything to intentionally hurt you, physically or mentally. I'm not completely certain on this, but I think Jill might actually be buying her off to leave you alone for free lessons in whatever it is that Jill does.\"\n\n\"Anyway, I like Courtney. She's always been really nice to me. But I'll take you as a friend over her any day if that is the way it has to be.\"\n\n\"I'm going to call Jill with a few questions okay? Want to conference call it so we can all three discuss it?\"\n\nI raised an eyebrow. \"Yeah, I guess. Well, just let's put your phone on speaker. I don't think I can stomach another barrage of texts from Farin right now. I turned my phone off before leaving the house.\"\n\nJulie got her phone out and made the call.\n\n\"Hey Jill, it's Julie, I'm here with Carrie and we have some questions for you. Can I put you on speaker?\"\n\nApparently the answer was yes because Julie put the phone down on the bed between us.\n\n\"Well, first, I want to be there, but Carrie is worried about me finding things out from you about the things that she did before now. I wouldn't care, but she does. Is it possible that you two could discuss prior events before I get there after Cheer?\" Julie asked.\n\n\"Yes.\" Jill answered. Clear, concise, to the point.\n\n\"She ... well... we were talking about Courtney and Carrie breaking her nose. Does Courtney hold any leverage over Carrie right now?\"\n\n\"That is up to Carrie. If she feels indebted, then she is indebted. I thought I was clear about that Carrie. You and Courtney will meet Monday for lunch and decide if you owe her anything or not. I will not interfere or give advice to you on this matter inasmuch as it does not interfere with my time with you. In the future if you are unclear about any of my instructions, you should ask then, misunderstanding will never be a permissible excuse.\" Well, Jill got a bit more talkative on that one.\n\nI blushed as I looked at Julie. This was the part I was regretting, exposing my submissive requirements in front of her. \"Mistress,\" I cringed as the word escaped my lips, \"I have to make money to pay for gas for my car, my Dad will be expecting me to bring home money from my part time job. I'm not asking you for money of course, but I may need to work on the weekend at a real job to throw him off if that makes sense.\"\n\nJill laughed into the phone. \"Carrie, I will give you a paycheck at minimum wage every week so Daddy doesn't get suspicious. I own a few businesses and you will earn the money, it will not be a gift.\"\n\n\"Hi Julie, Hi Slutball.\" Sue's giggly voice chirped in from the background.\n\n\"Is there anything else?\" Jill asked.\n\n\"I think that is everything.\" Julie replied. \"If anything else comes up is it still okay to call you?\"\n\n\"You have my number Julie, as I told you, any time you are concerned or have a question, call me and call me first. I care about her almost as much as you do.\"\n\n\"Thank you Jill.\" Julie replied.\n\n\"Goodbye Mistress.\" I threw in and the phone call cut off.\n\nJulie was giggling. \"Mistress huh?\"\n\nI rolled my eyes. \"I already have eight punishments coming, I don't need any more.\"\n\n\"hmmmm.\" Julie intentionally hummed excitedly. \"So, what's a punishment?\"\n\nI sighed. \"I am pretty sure I will find out tomorrow.\"\n\n\"So, what was it like to break someone's nose?\" Julie asked.\n\nI laughed. \"At the moment, it felt really good.\"\n\nThe next few hours, with a few exceptions, we avoided the topic of Jill and Darla and my history and future in their odd world. We somehow, though our relationship was forever changed, found our way back to being as close as we ever were. I mean, face it, we had some nasty fights during Darla's games. We had hurt each other's feelings terribly. The one time, when Julie was in her denial/omg, my best friend is a lesbian rage, it came damned near to ending our friendship. But, that's the thing I guess with best friends, they are few, very few, maybe just one in your entire lifetime, but they are the relationships that can suffer horrible events and come out stronger in the end.\n\nBut, all good things must come to an end. And it was nearly 5:00 and I had to leave for dinner with my Dad and Kelly. I blushed again and asked Julie to turn around so I could send Jill a picture of my boobs. She refused to turn around, and instead offered to take the picture on my phone and send it to her. I acquiesced and told her not to even tell me how many messages I had on my phone and turn it off after Jill responded.\n\nSo it was that I was baring my breasts to Julie in her bedroom and she took a picture of it and this was somehow not terribly uncomfortable. It was no picnic. I was embarrassed I guess to show her my boobs with her knowing I was showing them so I could find out if I had permission to go buy a bra with Kelly tonight. How in the hell did we rationalize that this was okay, I don't even know.\n\nBut apparently, the tiny red marks were very muted now. A few had caused little blue and black bruises, but very few and according to Jill, \"Just tell her you and Julie walked into a sticker bush by accident if it comes up. They are barely even noticeable as I had intended.\"\n\nI asked her before I left how many messages there were, because I would have to deal with them at some point. She asked me if I wanted her to just delete the ones from Farin so she wouldn't have to deal with it and suggested that I block her on my phone.\n\nI sighed. From what Julie had told me, Farin had orchestrated all of this ... or part of this... so she could be my white knight saving her damsel in distress. I should hate her. But, I guess a part of me was still flattered that anyone would go to such lengths for me. Me, the short girl who Rebecca thought was chubby and Rebecca hated. Me, the one who lost her only boyfriend back to the girl I stole him. Me, the one who didn't fit in, but didn't stand out in any crowd.\n\nBesides, she was, is and forever shall be my first. Whether that was built on false pretenses or not, it was very real to me at the time and I guess still was. I definitely needed a break from her, there was no doubt about that. But, in spite of everything, I didn't hate her.\n\nAnd so, Julie and I set her texts to go to a separate location where they wouldn't pop up on my phone and I could use my phone without reading her texts. And the answer was a three digit number... Yeah, that many.\n\nAnd so, I hugged Julie for an eternity before I left to get my first bra in over two weeks!\n\nThe drive home was uneventful. I was getting attuned to the drive to my dad's house, but the voice telling me what to do was comforting so I used my GPS. I arrived home to a delicious dinner of basted pork chops and I was grateful that Kelly was such a fantastic cook. She would never be mom to me. But, she made my dad so happy, and she was so nice that I was getting a strong feeling of affinity for her.",
        "After I helped to clear the table and put the dishes in the dishwasher, she asked my dad, in a teasing sort of way, if he was sure he didn't want to join us at the mall. He declined quite quickly and she and I laughed at his discomfort with the situation. I went upstairs and changed into a skirt and a fresh T shirt, figuring I should look a bit less frumpy at the mall.\n\n\"Ready!\" I shouted.\n\nKelly and I bid my dad goodbye and headed out to my car.\n\n\"Where to?\" I asked, unfamiliar with the nearest Victoria's Secrets.\n\nKelly punched the mall up on the GPS and we were off.\n\n\"So, what do you need exactly?\" Kelly asked.\n\nI choked. I needed like three bras of different colors, a pair of boy shorts, two pairs of bikini panties and a thong. But I figured that was a bit too precise. \"Are we talking need or want?\" I laughed.\n\nShe giggled. \"Well, let's not break your dad's credit card.\"\n\nWe got to the mall. It was a big mall, five levels of stores. I could use a whole new wardrobe if I was honest after what Darla had done to mine, but underwear was a luxury I missed more than anything else. So we wasted no time getting straight to it.\n\nWalking in there were underwear everywhere! Heaven for a girl going without for far too long. I was looking around and thought, well, if I go to the discount racks, she probably wouldn't care if I grabbed what I needed. So, I headed straight for them.\n\n\"Easy girl.\" Kelly laughed when I had like five pairs of panties in my hand already. And don't chastise me, I knew I had to put a pair back. \"Have you ever been fitted for a bra?\" she asked with a smile.\n\n\"No, but I'm a 34 C\" I replied.\n\n\"Maybe. Would you object to getting fitted? Sometimes ... well boobs change and the wrong size can make your back hurt over time.\" Kelly told me.\n\n\"What do they do?\" I asked.\n\nKelly laughed. \"Just follow me.\" And she led me to the front and asked if anyone was available to do a bra fitting.\n\nThe cashier said we could go over to the dressing rooms and she would send someone right over.\n\nKelly and I worked our way over there, looking at the various, how shall I say it? Non-essentials. If I were wearing panties, I would have creamed them for sure. Just the touch of the satin on my fingertips of a see through teddy sent a pulse straight through my body. Kelly saw me go straight to it and laughed.\n\n\"That is hot\" Kelly said.\n\nI blushed.\n\n\"How much is it?\" she asked.\n\nI fondled the garment looking for the price tag. Tiny little strings holding up and patch of see through material imbedded inside a satin overlay with a heart shape made up the practically nonexistent bottom. The top was strips of satin on the waist intermingled with the same see through fabric and a half cup top that wouldn't even cover your nipples. I laughed when I found it. \"HA! Oh just a hundred and twenty five dollars\"\n\nKelly frowned. \"Yeah, that's a bit much.\"\n\nAbout that time, a voice interrupted us and I jumped a little. \"Well, it's actually 30% off, but I could probably get a two for one deal if you are both inclined.\"\n\nI turned to decline and gasped out lout. I panicked a little. I have to admit.\n\nWith everything I had been through in Darla's Games, I should have been prepared for the inevitable reality that it is a small world. There was almost a certainty that at some place and time I would accidentally meet someone who had seen me in a compromising condition. Perhaps, in the back of my mind, I was planning to get around to how I would deal with that some day after Darla was finished with me and I was free to be normal again.\n\nAnd under these, possibly the very worst of circumstances, I was simply not prepared at all. I turned back around really fast, hopeful that she hadn't recognized me. But then what? I couldn't exactly just run from the store, I would have to explain to Kelly then.\n\nOh, you are probably wondering who it was. I honestly didn't even remember her name. But a few days ago, this woman, and more importantly, those emerald green eyes, had watched me on all fours on a coffee table sticking 30 pencils up my ass. I shuddered in embarrassment as the memory flooded my mind.\n\n'Get a grip Carrie' I thought 'maybe she won't recognize you, you aren't a six foot tall redhead with emerald green eyes after all' and then I thought 'no, you are a 5'1\" mouse that she watched... ugh yeah, who is going to ever forget that?'\n\nWell, whatever my plan had been by turning abruptly around and wishing myself to go invisible or die suddenly, it didn't work.\n\n\"Hi, my umm...\" Kelly hesitated, she didn't know how to address me. \"friend needs to be fitted for a bra size.\" Then to me she giggled. \"Carrie, stop, maybe later\" She thought I was just thinking about the teddy.\n\nI turned around slowly and my face was so red I could feel it overheating. I tried to force a smile as the tear ducts were threatening to open up. My breathing was gone completely insane.\n\n\"Hello Carrie,\" she said, and when I looked up to see her eyes, there was no doubt she recognized me. She was licking her lips like a wolf about to dine on a porkchop. \"My name is Candace and I will be happy to help.\"\n\nI was frozen. I know my heart was beating a mile a minute and I just wished it would explode and kill me right there. She put her hand on my shoulder and I jumped. Kelly and Candace laughed, but not unkindly.\n\n\"Jumpy little thing.\" Candace smiled. \"Why don't we go in the back here and I will get you fixed right up?\"\n\nKelly fell in line behind us and I just walked, every step a panic. The good thing was, at least so far, she had not outed me to Kelly. That would have been a disaster. Then she squeezed my shoulder gently as if to reassure me and I calmed down.... Not at all.\n\nThe few steps back into the largest room seemed like a hundred miles, but it was over far too soon. At the door, Kelly came in with us and my eyes flew wide. What was I going to say? Kelly, get the hell out of here? Well, technically. Yeah, I guess that is exactly what I should have said.\n\nBut I had somehow lost my voice. I hadn't said a single word since I recognized this red headed giantess, and I was petrified that saying anything would betray me. That my voice would squeak or something.\n\n\"So, what size bra do you wear now?\" Candace asked with a smile. When she was sure that Kelly couldn't see her, she winked at me.\n\n\"umm 32C usually, depends sometimes...\" I trailed off.\n\n\"They look like a C, let's see?\" Candace giggled at her own completely lame joke.\n\nKelly laughed, I hope to be kind, it certainly wasn't funny.\n\nThey waited expectantly. \"This is a lot easier if I can actually look at them and measure you.\" Candace smiled. Kelly was behind her over in the corner, but there was a mirror right behind me.\n\nI reached for my shirt and trembled as I pulled it up over my head. I know what you are thinking, but the henna tattoos were gone. There were still faint marks here and there, but the long hot tub and finished off the bulk of what was left the other night and the original designs were completely unreadable. I could easily explain it away as something stupid that Julie and I did on our own. I laid it on the bench and was visibly shaking and sucking my lower lip.\n\n\"Oh, you really do need a bra.\" Candace giggled.\n\nKelly frowned at me, clearly put off that her slut of a ... whatever I was to her... was not wearing a bra to go to a lingerie store. Well thank goodness we aren't trying on panties!\n\n\"Okay, so, let me explain to you what I am doing here.\" Candace said and she took out a tape measure and started wrapping it around my back. She pulled it around and then stopped. \"Sorry, light is better over here.\" She gestured to Kelly, \"do you mind?\"\n\n\"Not at all\" Kelly answered and she moved over to put her back to the mirror.\n\nMeanwhile Candace moved me towards the door. Now I could see myself in the mirror where Candace wasn't blocking the view. \"So, first we measure just under your breasts.\"\n\nAnd her ... well, the backs of her hands pushed upwards on the underside of my boobs as she pulled the tape around to get a measurement. I looked down. My nipples were so hard you could have... done something.... What was it? Cut glass with them? Whatever... they were so hard that they hurt.\n\nAnd now that she could maneuver unwitnessed by Kelly, she 'accidentally' brushed my nipples with her fingers. Then, smiling widely like a cat that had cornered a mouse, she winked at me.\n\nShe measured finished wrapping the tape around and leaned down to take a reading. On her way, her tongue lashed out and just barely touched my nipple and I whimpered as quietly as possible.\n\n\"Twenty-seven inches.\" She read aloud. \"Now, since the number is odd, we add five inches to that. If it were even we would add only four. So currently, your bra band size is a thirty-two.\" Which confirmed my knowledge of my own boobs. Yay Me.\n\nShe released the tape and I exhaled heavily. As embarrassing as this was, being bare chested in front of this woman who had seen me with thirty pencils up my ass, naked on a coffee table at her friend's house, it was multiplied by the fact that Kelly was standing there watching it all happen. I could see her now and then, when Candace was not blocking the view.\n\nCandace was significantly taller than me, so much so that I was looking directly at her breasts if I didn't lift my chin to look higher. So, at least I was mostly spared from those looks. And damn me if it didn't look like Kelly was enjoying this a little too much. I swear she licked her lips once, but maybe that was just my imagination. Her chest did seem to be rising and falling much faster than was comfortable for me.\n\n\"Now we measure around the breasts, right at the level of your nipples.\" Candace informed me as if she were teaching a class. I guess, in some weird way, she was. I bit my lip and felt a slight shudder run through my body.\n\nCandace put the tape around my back and pulled it around the bulk of my breasts. I could tell she was doing this on purpose when she lined the short end of the tape in front of my chest. I inhaled sharply and was holding my breath.\n\n\"Don't hold your breath Carrie, If you don't breathe normally, the measurement will be off and the bra will be too tight.\" Candace corrected me. I tried to breathe normally, but nothing about this felt normal. \"That's better.\" She smiled as I exhaled and tried not to pant like a dog.\n\nAs her fingertips brushed all the way around my body, I could feel the goosepimples rising on my skin. So slowly she moved that I felt it was an eternity just getting her soft fingertips around the sides of my breasts. And when she pulled the tape across my nipples, she let the knuckle of each finger bump across them so slowly I thought I would faint.\n\nMy nipples seemed to reach new levels of excitement, poking out so hard that it actually hurt. She then pulled the two ends together and the tape pushed against my erect little buds, attempting to flatten them to my chest, but losing the battle. My blood engorge nips were simply stronger than the thin tape measure that fought against them.\n\n\"Thirty-six inches.\" Candace read the tape. \"So, what we do is take that measurement, minus the band size of thirty-two and basically use the alphabet until the difference gets to be a high number. In your case, it is a D. Thirty-two D is your correct bra size.\"\n\nExcept I didn't hear a thing. Clearly, I heard it in the background, but at the moment, I was squeezing my thighs together because the entire time she was saying this, Candace was playing gently with my bare, erect nipples. She was just softly squeezing them and tugging them so from behind her, Kelly would be none the wiser.\n\nThe pads of her forefingers and thumbs were so very softly sliding around in circles back and forth. Clockwise and counter clockwise. And she did this as she engaged Kelly in conversation, not even looking at her. I willed her to save me. Then she started to squeeze and tug softly until they plopped free of her grasp. Over and over. Not hard, oh no, soft.. such soft little tugs. Right in front of Kelly. Facing Kelly. Facing the mirror behind Kelly.\n\nI was panting like a bitch in heat. Here I was being fondled right in front of my dad's girlfriend and she was looking at me like I was ... well, not how I would expect a mother figure to look at her topless daughter. And I could feel the dampness between my thighs when I squeezed them tightly together, which meant I had drooled on myself again.\n\n\"See?\" Kelly chirped. \"You've been wearing the wrong bra.\"\n\n'See?', I thought, 'You've been watching your boyfriend's daughter fondled in a lingerie store and even you know I'm a slut'\n\nCandace let go of my nipples and turned around to look at Kelly as she wound up her tape measure in her hands. \"So, have you picked any styles yet? We could go and select a few and try them on. You don't really need to here, our sizing is precise. But sometimes with cheaper undergarments, their sizing is off a bit so it's a good idea to try them on.\"\n\n\"Yes, I think it might be a good idea to try them. But we haven't selected anything yet.\" Kelly answered.\n\n\"I...\" I went to interject. \"I'm sure it will be fine, let's just go pick them out.\" The sooner I got away from this red-headed temptress the better.\n\n\"Would you like some assistance?\" Candace asked Kelly as if I hadn't spoken at all. \"I do get a commission, but more importantly, I know my way around the store so I could probably help a lot.\"\n\nWas Kelly checking out Candace now? What the fuck? Were these two flirting? From my vantage point, I could see Kelly looking at Candace and not only that, but in the mirror, damned if it didn't look like Candace was likewise quite interested in Kelly. What the fuck? I say again.\n\n\"That would be wonderful.\" Kelly smiled.\n\nI rolled my eyes and stepped around Candace to get my shirt and pull it quickly on to cover my breasts. 'Good', I thought, 'let these two flirt at least it gets me out of the equation.'\n\n\"I'm Kelly by the way.\" She introduced herself and I just fell in line to follow them.\n\n\"I remember the first time I got fitted.\" Kelly giggled. This was so uncomfortable. My dad's girlfriend was hitting on the sales girl right in front of me! \"I was off by the number and the cup.\"\n\nCandace looked at her breasts. \"Must have been painful to squeeze those into the wrong size. How long did you do it before you figured it out?\"\n\nSo fucking awkward.\n\n\"Oh, it was a few years. It wasn't so bad, I guess I was around Carrie's age when I found out.\" Kelly replied.\n\n\"So, how do you two know each other?\" Candace asked, referring to me.\n\n\"Oh, well...\" Kelly blushed. \"I'm actually dating her dad.\"\n\n\"Oh!\" Candace exclaimed and looked back at me apologetically. \"I never would have put that together.\" She laughed.\n\n\"Yeah, I'm a bit younger than him. But, he's a really great guy. Point and case his daughter.\" Kelly acknowledged me.\n\n\"So, how comfortable are you with your bra?\" Candace asked playfully.\n\nKelly was blushing again. Jesus someone just shoot me already. This was really getting weird. She actually looked back at me for my reaction, before turning and saying, \"I'm fine thanks, 36-D.\"\n\n\"You two could almost share.\" Candace laughed. \"Let me see you two side by side.\"\n\nI cringed and stood next to Kelly. Kelly was eagerly smiling at Candace.\n\n\"Yes, I see, it's not as noticeable because of the height difference. But you could probably get into her panties too.\" She smiled. And the hint was poison coming from her lips. Fuck, that was an image I never needed in my head.\n\nKelly giggled. \"Yeah, I guess we are closer to age than I am to her dad.\"\n\nA fact that I was well aware of already.\n\nCandace was looking at us both up and down and I guess she saw the discomfort of this all in my face. She turned and led us to the bras and started her sales pitch to push the more expensive models.\n\nKelly bought into it hook line and sinker. She ended up with more bras than me. Some very racy ones. For my part, I didn't go completely cheap, but I didn't go slutwear either.\n\n\"Come on Carrie, I'll pay for it myself if you don't want your dad to foot the bill, get one of these.\" Kelly pushed me towards a quite transparent bra that pushed them up, but didn't hide them at all. She had one for herself.\n\n\"No, Kelly, I'm fine with these.\" I had picked out one from their Angel collection in red, and two rather bland ones, one white, one beige.\n\n\"You are not buying a beige bra.\" Kelly laughed. \"I refuse to buy that, pick something sexier. I know you want to.\"\n\n\"How about this?\" Candace offered a satin black bra with half cups to push the boobs up, but leave them mostly exposed.\n\n\"Fine\" I grumbled and put back the beige one and took the slut one from her.\n\nKelly looked at me and frowned for a second. \"Hey, sorry, if you really want that other one, you can get that.\"\n\n\"No, this is better.\" I said. I didn't mean it, but I really just wanted to get the hell out of the store at this point.\n\n\"Choice.\" She laughed. And I gave a small laugh at her generational word that was still lost on me.\n\n\"Why don't you go try it on and see how it fits and I'll pick a few more things for myself.\" Kelly asked.\n\nI rolled my eyes, she wanted alone time away from her... there really should be a term for the daughter of your older boyfriend when you get into a non-marital long term relationship. But, I guess it's boyfriend's daughter. But, I didn't mind. I took the bra and headed to the dressing rooms alone.\n\nI tried it on. Yes, it looked and felt great. If she wasn't blatantly hitting on the woman who had witnessed me putting pencils up my ass a few days ago, I would have been thrilled. I put my shirt back on and went out to see them giggling and chatting over some very intimate intimates.\n\n\"Fits great.\" I said to announce my return. They stopped for a minute and Kelly told me to grab some panties.\n\nI grabbed a pair of pink bikini panties, a pair of white bikini panties, a blue pair of boy shorts and a black thong. \"I'm all good Kelly.\" When I returned to interrupt their flirt fest.\n\nCandace had a sizeable collection of underwear in her arms and left Kelly to go to the counter as I walked towards her.\n\n\"Candace is great.\" She laughed. \"So, what did you pick out?\"\n\nI showed her and blushed.\n\n\"Oh, nice thong, don't tell your dad I let you buy it though. Our little secret.\" She smiled.\n\n'Yeah, like you flirting with the sales girl is going to be our little secret I guess' I thought it, I didn't say it.\n\n\"Here, I'll take them up and check us out. Look around, there is some great stuff here.\" Kelly took the panties without waiting for an answer and floated her way to the counter.\n\nI didn't disagree. Vickie's has always been a fun place for a visit. Julie and I hardly ever bought anything there, but we loved going in and dreaming about a drawer or two full of their stuff. Sure, if you believed Gretchen Wilson, you could \"buy the same damn thing on a Walmart shelf half price\", but I can tell you, it isn't entirely true.\n\nCandace and Kelly finally walked towards me laughing and talking. Kelly was carrying a couple of rather larger bags than what I expected we would go home with.\n\n\"Here Carrie.\" Candace offered me a card. \"It's my cell number on it if you want to call and see if I'm here first. I will get you a good discount.\"\n\nI took it knowing I would never return to this Victoria Secrets again for the rest of my life. Clearly, Kelly had her card already and we said our goodbyes. \"It was truly a pleasure meeting you two.\" Candace laughed. \"I can't wait to tell my friends.\"\n\nKelly looked puzzled. My eyes popped open. I was thinking 'shut the fuck up you stupid cow!' But figured it best to ignore the comment clearly intended for me.\n\n\"It's not every day you see a girl and her dad's girlfriend who are so close in age.\" Candace said to Kelly's unasked question of what the hell was she talking about. \"You enjoy the lingerie,\" she said in almost a whisper to Kelly, \"don't ever tell anyone about the deal I gave you, I'd get in big trouble.\"",
        "Kelly smiled. \"My lips are sealed.\" And then they hugged and I turned away to the door before she tried to make it uncomfortable for me not to hug her too.\n\n\"Well that was fun wasn't it Carrie?\" Kelly chirped as we walked through the mall. \"Want to go to Forever 21 or Garage or something like that? It's early yet.\"\n\n\"I'm sorry Kelly, I'm still a bit tired from Friday night. But yeah, we should do that some other time.\" I could see the disappointment in her face. She was on a high right now and I wondered if she had many friends. I liked Kelly, don't get me wrong, but she was not really going to fit in the friend category for me anytime soon. And I had to admit, I was a little upset with her right now and trying very hard not to show it.\n\nIt wasn't, I don't think, a precursor to cheating on my dad. But it was, I thought, a bit inappropriate, even if his daughter wasn't right there when she did it.\n\n\"Okay.\" She frowned slightly. \"I just thought... ya know, bonding time and tell you what, let's go get some ice cream?\"\n\nThinking, 'yay let's bond' I laughed. \"Okay, let's get some ice cream.\" I smiled. I did need to try. God knows that they did a lot for me. I could be accommodating when they wanted my time.\n\nSo, we went to the food court. And Kelly kept engaging me in scoping out hot boys and when that wouldn't work, she went to hot girls. And when that didn't work, we talked about shopping. Don't get me wrong. I was a free agent. I knew this. I wasn't dedicating myself to Farin or Julie or anyone else for that matter. Even Jill, in spite of her harsh words, was less of a threat to me than Darla.\n\nShe might be stricter and less forgiving, but with Jill, somehow I thought I would know where I stood. I didn't think she would be constantly trying to keep me off balance and surprise me and change the rules to fit her whim.\n\n\"Okay, you convinced me.\" I said at last. \"But, I'm more Abercrombie and Hot Topic than Forever 21.\" In all honesty, on my mom's budget, I was more a WalMart girl, but if I had to choose...\n\n\"Really?\" Kelly asked perplexed. \"But you wear skirts all the time.\"\n\n'really', I thought, 'I was forced to wear skirts all the time and I was dying to wrap my ass in a pair of tight jeans that wasn't cut up.'\n\n\"Yeah, but I have a lot of those. It's getting colder soon and I've grown since last year.\" Was what I said.\n\n\"Good point.\" Kelly smiled. \"Your ass might be bigger too!\" She laughed.\n\nI laughed in spite of the attitude I was trying to pull.\n\nAnd so we went to Abercrombie &amp; Fitch and I picked out four pairs of jeans that I thought would do and headed into the changing rooms ALONE to try them on.\n\nInside the changing room, I took off my skirt and gasped. My pussy was a mess. I couldn't try these jeans on, I'd ruin them. What could I do? I had nothing to wipe it off on. My skirt? I had to wear that out of there. I looked in the mirror. What... was I.... going... to do?\n\nI sobbed. I spread my slut legs and took my slut hand and scooped the goo off my slut pussy and licked it into my slut mouth. I cried, tears pouring down my face as I repeated this over and over to clean myself up. I thought of Farin and I cleaned my slut hole with my slut face.\n\nAnd it just made it worse, because the more I watched the disgusting slut in the mirror, the wetter I got and I had to go faster and faster to keep up with the slut juices running down my slut legs. And I watched my pink slut tongue lapping at my tiny slut hands. And my slut hands kept bumping my slut clit as they slid up my slut crease.\n\nAnd I shuddered and came. And I cried as I cleaned my pussy of my slut cum so I could put my slut ass in a tight pair of jeans without destroying it with my slut juices.\n\nI did use my skirt to clean up the area a little when the damage was done.\n\nA knock on the door. \"Carrie?\" It was Kelly.\n\n\"Be right out.\" I answered.\n\nAnd I tried on all four pairs of jeans, selecting the two pairs I thought hugged my ass the best. One dark blue, the other distressed. I laughed... out loud... distressed.\n\nThen I put the slightly soiled skirt back on and walked out, showing Kelly the two pairs that I liked.\n\nKelly was looking at me wide eyed when I came out. \"We need to go Carrie.\" She stammered.\n\nShe took me by the hand, tossing all four pairs of jeans onto a table and hurried me out of the store. I was surprised by her actions, mentally and physically off balance as she rushed me through the mall and the sea of strange faces. We were walking so fast, just short of a run and she kept me going all the way into the parking garage and up to my car.\n\nOnce inside, she exhaled like she had been holding her breath the whole time.\n\nShe turned to me clearly flushed. \"Are you okay?\" She asked.\n\nI looked at her through blurry eyes. \"Yes?\" I asked more than answered.\n\n\"Carrie, you were loud sweetie. I'm all... I mean, I don't have a problem at all with you, you know, masturbating, but damn honey, you have got to keep it quiet if you are going to do it in public.\"\n\nAnd the world crashed around me. And I started crying again. \"I'm such a freak Kelly. I'm so sorry.\"\n\nShe hugged me and I cried. \"It's okay Carrie. Really, I think... well, I don't think many people heard you. It's normal... I mean, not in a changing room, but it's normal to masturbate. I do it all the time.\"\n\nShe kissed me on the cheek then. \"You want me to drive home?\" She asked.\n\nI nodded. My eyes were too blurred with shame to drive.\n\nOnce we got on the road, the silence was deafening.\n\n\"Not a word about this to your father. He'd never let me take you shopping again.\" Kelly smiled at me.\n\n\"So... you want to talk about it?\" She asked.\n\n\"I don't know what came over me.\" I answered. \"I just...\"\n\n\"You just needed to cum?\" Kelly asked.\n\n\"Yeah. It's been awhile.\" I said. \"Oh God Kelly, I didn't even know I made any noise. Was it that bad?\"\n\n\"Honey, you practically screamed.\" Kelly answered. \"I guess it was a strong one.\"\n\n\"Yeah, I guess it was.\" I whispered.\n\n\"Well, listen Carrie, as soon as we get home, go straight up and take a bath. It will make you feel better. I promise, not a word to your dad. You can come down later and tell him goodnight.\"\n\n\"Carrie, I don't know what's going on and I'm not going to ask, but sweetie, you are just starting to find your sexuality, it doesn't mean you are a slut. I know it's so confusing. When I first found my sexuality, I wanted to cum all the time.\"\n\n\"I...thanks Kelly. I'm not so sure though. Maybe I am...\" I answered.\n\n\"You said it... screamed it actually when you were cumming. You didn't know you said it though did you?\" Kelly asked in a hushed voice.\n\n\"No, I didn't know I made a sound.\" I whispered.\n\nIt's not so far. The drive from the mall to home. So, there was no real need to make a great deal of idle chit chat. I couldn't even recall the last day I had an orgasm. And it almost made me laugh as I thought about it that for the last two weeks, I had more sex than I had in my entire life or, given freedom to make my own choices, probably ever would have for the rest of my life. And yet, I had so few orgasms.\n\nMaybe that was why I did it. Maybe in my mind, until I had that orgasm, an orgasm for me, not for anyone else but me, I wasn't really done playing Darla's games. But what really scared the fuck out of me right now... what really terrified me... was that of all the opportunities, including my own bed last night, I chose a changing room in Abercrombie &amp; Fitch to have that orgasm. "
    ],
    "authorname": "Panthergirl",
    "tags": [
        "exhibitionism",
        "stripping",
        "humiliation"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/jills-world-ch-01"
}
{
    "title": "A Demon's Devotion Ch. 06",
    "pages": [
        "In a curious maneuver only a panicked mind could make, Beatrice suddenly found herself thinking about physics. As her grip around Levi's arm slipped and the two of them stepped towards her waiting friends, the addled servant had a vague recollection about the theory of relativity, and her struggles to learn it junior year. Back then, the idea that an object's velocity could somehow alter time had seemed impossibly abstract. But now, with her thoughts racing at light speed and her surroundings slowing to a crawl, Beatrice felt like she finally understood.\n\nOf all times to have a scientific epiphany, it had to be while she was wearing a mini-skirt.\n\nThe space between Beatrice and the food court seemed to expand and envelope her, magnifying not only the distance, but every experience within it. She became helplessly aware of the fabric stretching across her thighs, each step making her legs feel somehow bound and naked at the exact same time. Her blouse swished and flounced like a ridiculous costume, one she regretted anew with every blink of Teresa's curious eyes. Beatrice could track the emotions spreading across her friends' faces, first in Teresa's slowly stretching smile and next in Suzi's open-mouthed amusement. Beatrice knew what she was in store for, knew that they wouldn't let her new outfit and closeness to Levi go unexploited. But there was no way for her to warn him now, no way to avert the coming collision. To run would be to invite even further scorn--all that was left to do was grit her teeth, tense her shoulders, and endure the crash as best she could.\n\n\"Wowwww look at that.\" Teresa reclined in her chair, her grin somehow lifting another notch as Beatrice and Levi settled across from her. \"Look at you all dolled up today. What's the occasion?\"\n\n\"N-nothing.\" Beatrice shrugged. \"Just felt like trying something new, that's all.\"\n\n\"Oh totally.\" The smug redhead laughed. \"I mean, who hasn't gone through a slutty secretary phase, right?\"\n\nSuzi giggled. \"Maybe she's hunting for a husband.\"\n\n\"Aaah, good point! Is that it, Bea? Are you looking for a big, strong man to help you with those heavy bags? Maybe give you a nice tiara and call you a princess?\"\n\n\"Princess!\" Suzi clapped. \"Ohmigod, that's hilarious!\"\n\nBeatrice's fingers curled into fists, but she forced a crooked grin. \"Wow, you got me there. If you weren't so clearly jealous, it might've actually been funny.\"\n\n\"Aw c'mon now,\" Teresa waved the comment away. \"We're just messing with you, Bea. You look great, really. Don't you agree, Levi?\"\n\nBeatrice sensed Levi stiffen beside her. She glanced his way, dreading and anticipating what his response would be. Could he keep his head and play it cool? Or would he hijack the conversation with his typical, infernal arrogance? As embarrassing as that would be, a sick part of Beatrice thrilled at the thought of his dark gaze cutting through the tittering teens, of their smiles falling as they sensed the danger only she'd experienced thus far.\n\nBut curiously, the demon's eyes remained downcast, in the same position they'd assumed since he'd sat. \"Um. S-sure,\" he finally mumbled.\n\n\"Awww he's embarrassed!\" Teresa snickered. \"It's okay, Levi. You should be proud. We all know you're the real reason Bea's become such a good little girl lately.\"\n\nLevi straightened, aghast. \"What? Why would you think that?\"\n\nSuzi smirked. \"Uh, 'cause she told us? Duh?\"\n\nNow Levi's attention darted to Beatrice, his pupils burning with black fire. \"What did she say?\"\n\n\"Just that you have very...particular tastes,\" Teresa explained. \"And that you're very good at keeping her in line. Which is kinda impressive, really. Our Bea can be a real wildcat, can't she?\"\n\nBeatrice's eyes narrowed. \"I just don't take any bullshit. Unlike certain drama queens who can't get enough of it.\"\n\n\"Ouch. See, Levi? This kitty's got claws. Make sure you keep her on a short leash.\"\n\nOnce again, Beatrice hoped for a scathing retort, but the demon appeared to have sunk back into himself. \"Y-you're mistaken,\" he grumbled. \"She does as she pleases. It has nothing to do with me.\"\n\nFor some reason, Beatrice felt as though she'd just been slapped. Even Teresa and Suzi seemed taken aback, but it wasn't long before their gleeful grins returned.\n\n\"Really?\" Teresa purred. \"That's a shame. You two make such a cute couple.\"\n\n\"Yeah, it's like...\" Suzi paused for thought. \"What's the saying? 'Opposites attract?'\"\n\n\"Opposites attract!\" Teresa slapped the table. \"Exactly. It's like...grungy podcast host and his Insta thot wife.\"\n\n\"Oh oh! Or like um...beauty and the...uh...emo...beast.\"\n\n\"Emo beast! Oh my god!\"\n\nBoth girls erupted into giggles, jostling the anger lodged in Beatrice's throat. She glared at Levi, no longer hoping for a response, but demanding one. Surely, the domineering demon wasn't going to take this lying down. Even if he wasn't exactly a social savant, there was no reason for him to let these idiots walk all over him.\n\nHis eyes met hers for a fraction of a moment, then fell. \"We're not a couple. I barely even know her.\"\n\n\"Whaaaaat?\" Teresa exclaimed. \"Are you sure? You guys seemed pretty close just a minute ago.\"\n\n\"That was...she did that on her own,\" Levi fidgeted. \"Maybe she's obsessed with me. I dunno.\"\n\nBeatrice didn't hear the laugher that followed. She could see her friends' lips and eyes widen, could read their shock and mirth plain as day. But her ears were filled by a faint yet painful ringing, as though Levi's words had detonated beside her skull.\n\nObsessed with him?\n\nObsessed with him?!\n\n\"Oh Bea, I'm so sorry,\" Teresa chortled. \"He really didn't let you down easy, huh?\"\n\nBeatrice snapped her focus away from the downcast demon. Clearly, she couldn't count on his support, so she would have to go on the attack instead. She scanned her opposition for angles, noticing that, despite their earlier mockery, they were dressed just as provocatively as she was. Suzi was practically spilling from her tube-top with every giggle, and Teresa's elaborate makeup and teased up tresses were clearly compensating for her comparative lack of curves.\n\n\"It's such a shame too.\" Teresa plucked at Beatrice's sleeve. \"After you got all dressed up and everything.\"\n\n\"At least I have an excuse.\" Beatrice forced a fanged grin of her own. \"What's yours? Hoping the Cinnabon guy will give you some extra special icing?\"\n\nTeresa's smile wavered but she didn't back down. \"Actually, Lucy set us up with some boys from the football team. Said they wanted to meet some swim team hotties so...here we are.\"\n\n\"Really?\" Beatrice cocked an eyebrow. \"What, did she find some JV benchwarmers for you to toy with?\"\n\n\"Nope!\" Suzi beamed. \"They're first string varsity players. And they said they're gonna show us a real good time!\"\n\nBeatrice frowned. Apparently, Lucy had been busy the past week or so. Typically, when it came to club cross-pollination, the football team coupled with the cheer squad or even the color guard if times were tough. Now it seemed the golden goddess was trying to forge a new alliance, though why Beatrice couldn't say. A part of her was annoyed at being kept out of the loop but, then again, she had been awfully occupied with Levi lately, and it was kinda her fault that the basketball team was no longer an option. So maybe she wasn't exactly in a position to question her leader's judgement.\n\nThat didn't mean she couldn't take advantage of it though.\n\nTeresa made a show of checking her phone. \"Anyway, the guys are supposed to be here any second now so...\"\n\n\"Oh good.\" Beatrice brightened. \"I'm looking forward to meeting them.\"\n\nSuzi blinked. \"Um. But...they're uh...we were supposed to...\"\n\n\"Relax,\" Beatrice assured them with a smile. \"I won't get in your way. I just wanna say hi. Unless,\" she arched an eyebrow, \"you think I'd be too...distracting.\"\n\nTeresa let out a brittle laugh. \"W-well, it just seems like you and Levi might have some things to hash out, and I'd hate for you to embarrass yourself in front of our new friends so...\"\n\nBeatrice could sense Levi staring daggers into her, but she pretended not to notice. \"No, it's fine. There's nothing to discuss really. It's like Levi said: I do what I want. And right now, I wanna meet some cute varsity boys.\"\n\n\"Uh...okay, but...\"\n\nSuzi interrupted Teresa with a tap on her shoulder. \"Um. I think that's them, isn't it?\"\n\nAll eyes followed Suzi's to a pair of smirking, swaggering specimens making their way through the mall crowd. Beatrice didn't recognize their faces, but their toned physiques and athletic t-shirts left no doubt: they were varsity jocks through and through. One was a blonde behemoth with a surprisingly boyish face, a likely lineman if Beatrice had ever seen one. The other wore a ball cap over his shaved head, his body a sculpture of twitchy, compact muscle. Beatrice gave a cute little wave as the boys approached, and allowed herself a satisfied giggle when the straw-haired giant returned it.\n\n\"Hey, you're the girls from the swim team right?\" the smaller player accepted the chair that Suzi scooted in his direction. \"Sorry we're late. I'm Tyler, and this is Josh.\"\n\n\"'Sup,\" Josh confirmed with a tilt of his chin.\n\n\"Sooo glad you could make it,\" Beatrice put on her best girlish lilt. \"I'm Bea, and these are my friends Teresa and Suzi.\"\n\n\"H-hey,\" Teresa struggled to cover her irritation. \"It's great to finally meet you guys. Lucy told us great things.\"\n\n\"Yeah,\" Suzi bounced in her seat and gave her boobs a little jiggle. \"And we're like, super excited to hang out.\"\n\n\"Same here.\" Tyler nodded, though his gaze quickly returned to Beatrice. \"You girls look like you know how to party.\"\n\nBeatrice turned away, as though struggling to hide her excitement. In truth, she had no interest in 'partying' with the puffed-up pair. She'd been fooled by their type in the past, and knew all too well what lay under the flimsy fa\u00e7ade. These two jocks were merely a useful tool, a stone she could throw to kill three traitorous birds at once.\n\n\"Y'think so?\" Beatrice gave a shy laugh, shifting and peering over her shoulder. \"Is it 'cause of my outfit? What do you think? I got it special for making new friends.\"\n\n\"It's...nice. Very nice.\" Tyler's wolfish eyes roved over her legs and bust. \"I like how...stylish it is.\"\n\n\"Aw, you're sweet,\" she tittered.\n\nJosh frowned, looking over their heads at the hunched figure beyond. \"Who's he?\"\n\n\"That's Levi,\" Teresa interjected. \"Beatrice's boy toy.\"\n\nBeatrice gave a playful gasp. \"Don't be mean! He's my shopping buddy.\" She rested a hand on the demon's shoulder, and suppressed a grin when he flinched. \"Isn't that right, Levi?\"\n\n\"Y-yeah,\" he uttered through clenched teeth.\n\n\"Pff. More like shopping slave.\" Teresa shot the jocks a conspiratorial wink. \"Take it from me--she's got the poor guy totally whipped. And she'll do the same to you if you're not careful.\"\n\nBeatrice scoffed as though offended, and Tyler laughed. \"Thanks for the warning,\" he said. \"But we know how to take care of ourselves. No offense, Levi. You just keep fighting the good fight, alright buddy?\"\n\nThe surge of rage was so strong Beatrice felt her crest prickle. Not that she needed the warning: Levi shot up from his chair so fast he knocked it over, cuing a cacophony of clattering plastic and surprised laughter.\n\n\"B-bathroom,\" he grunted as he left, failing to cover his swift and humiliating retreat. Beatrice watched his skinny shadow recede into the crowd, allowing herself to bask in her success.\n\nOr at least trying to.\n\n\"Damn,\" Tyler shook his head. \"You got that guy down bad for sure.\"\n\n\"For sure.\" Josh nodded.\n\nBeatrice tried to laugh, but could barely manage a fleeting smile. She'd expected some sense of accomplishment from a job well done, yet for some reason, her irritation had only increased. It all seemed so stupid now, fighting over territory she hadn't even wanted in the first place. And now that she'd finally claimed it, all she could think about was how to escape.\n\nSuzi pouted. \"You, uh, sure you don't wanna go after him, Bea? I mean...he seemed pretty mad...\"\n\n\"So?\" Beatrice snapped, only to realize she was passing up a perfectly good exit. \"Actually, now that I think about it, he is my ride back. So I should probably make sure he doesn't jump out of a window or something.\"\n\n\"Aw c'mon,\" Tyler protested. \"We were just getting to know each other.\"\n\n\"I'm sure we'll get another chance.\" Beatrice scooped up her shopping bags and offered a parting wave. \"You kids have fun now.\"\n\n\"We will.\" Teresa's voice dripped with barely disguised venom. \"See you Monday, Bea.\"\n\nBeatrice glanced back with a smirk, trying to savor her friend's wounded pride. But even with her vengeance achieved, disgust and anger still simmered in her gut, choking her victory with acrid fumes. She turned her attention to finding Levi, shooting off a few curt texts before wandering the storefronts in a bitter haze, half-searching and half just giving her restless limbs something to do.\n\nEventually, a reply from Levi lead her to the parking lot. The demon was sulking in his truck, arms crossed as he sat rigid in the driver seat, refusing to look at her as she approached. When she reached, for the door, however, the corner of his eye met hers, and a shiver of the old fear stayed her hand. For a moment, she remembered the power he held over her, and the supernatural danger his crest always posed. But her hesitation didn't last. Not when her heart bellowed for satisfaction.\n\nShe climbed into the passenger seat and shut the door with a slam. \"Boy, you sure know how to make an exit. For an ancient demon, you can be a real baby sometimes, y'know that?\"\n\n\"Don't speak to me of childishness,\" Levi fumed. \"It's been centuries since I've suffered such insolence, such humiliation. There will be consequences for this, I promise you.\"\n\n\"Try me.\" Beatrice stuck out her tongue. \"Waste all the power you want. Your threats don't scare me anymore. Not after I've seen what a coward you really are.\"\n\n\"C-coward? How dare you--\"\n\n\"Oh please. You know it's true. What kind of Master, no, what kind of man throws his girl under the bus just 'cause two teenagers make fun of him?\n\n\"I did not 'throw you under the bus.' I did what was necessary. And if you had held your temper in check then--\"\n\n\"What was necessary? How was stabbing me in the back necessary?\"\n\n\"Because you told them I was controlling you!\" Levi snapped. \"Don't you see the position that puts me in?\"\n\n\"Oh get a grip. I didn't tell them you were magic or anything. I just said you were the reason I was acting so weird. Which, by the way, is completely true.\"\n\n\"It doesn't matter. Your carelessness could've gotten me killed.\"\n\nBeatrice blinked. \"What are you talking about? Are you afraid Suzi and Teresa are gonna exorcise you or something?\"\n\n\"It's not that, it's...\" Levi let out an exasperated growl, appearing to recollect himself. \"Never mind. The point is, you shouldn't be speaking of our affairs to others.\"\n\n\"Then what am I supposed to do? You're the one who wanted me to act like your little servant girl at school. I had to come up with an excuse.\"\n\n\"Couldn't you just say it was your way of seducing me? To blackmail me, or whatever your original scheme was?\"\n\nBeatrice groaned. \"That's not how this works. I would never in a million years think of dressing like this or waiting on you at lunch, even if I was trying to get in your pants. I keep trying to tell you that, but instead of listening to me, you just go on making a total mess of things, and then get mad when I try to clean it up!\"\n\nLevi started to argue, then stopped, as though struck by a sudden, awful realization. He turned away, the fury falling from his face. \"Have I really been so obvious?\"\n\nBeatrice hesitated, her momentum thrown. \"Wait, really? Do you seriously have no idea how other people see you?\"\n\nLevi shot her a glare. \"Of course I do. I'm not stupid. Only...\" He groaned, sinking his head into his hands. \"Ugh. It's this damn, detestable body. Back in my prime, I could read a mortal's heart at a glance, and change it just as easily. But now I'm trapped by these walls of flesh and these...awful, insufferable organs. It's all I can do just to survive in this shell, much less acquaint myself with whatever obnoxious new niceties and rituals this century requires. It's...so exhausting.\"\n\nA tired sigh slipped from his lips, and Beatrice's rage evaporated with it. As stupid and annoying as Levi had been, the heaviness in his expression seemed like punishment enough. For the first time, Beatrice found herself wondering what it felt like to carry that weight. She'd always assumed demons like Levi were creatures of pure chaos, devils that delighted in seizing human forms and wreaking as much havoc as they could. But for all his power and malicious imagination, the boy in front of her seemed just as uncomfortable in his skin as she had been only a year ago. Maybe even moreso.\n\nA raindrop splattered on the windshield. Then another. The quickening staccato seemed to finally snap the demon out of his malaise, and his eyes flitted to the darkening clouds above. \"A shame,\" he said. \"It was such a beautiful day to.\"\n\n\"Yeah...\" Beatrice smoothed the edge of her skirt. \"It was.\"\n\nLevi exhaled and sat back in his chair. \"We should probably go back and return those dresses now. Before we have to sprint through a tsunami.\"\n\n\"Wait, what?\" Beatrice reflexively rested a hand on the bags. \"Why would we return these?\"\n\n\"Weren't you the one just saying you would never wear them? Even to...'get inside my pants,' as you put it?\"\n\n\"W-well sure, but...\" she faltered, chewing her lip. \"I mean...it'd be weird if I suddenly went back to normal just like that. Especially after everything Teresa and Suzi said, it might look like we were caught trying to hide something, right?\"\n\nLevi's brow furrowed, but he nodded. \"I suppose...\"\n\n\"So, what I'm saying is...\" What was she saying? And why couldn't she stop? \"I...don't think it would...hurt to keep these for now and...play things by ear a little bit. Maybe we, I dunno, ease up a little on school days but...there are still weekends and, y'know, as long as we're careful then...\"\n\nGradually, the demon's frown softened into a smile. He nodded towards the bags. \"You're fond of them, aren't you?\"\n\n\"I-I just don't want all that work going to waste.\" Beatrice ruffled pointlessly through the outfits. \"And even if these aren't exactly my style...some of them are kinda nice. Those varsity chuds definitely thought so.\"\n\n\"Ugh.\" Levi groaned. \"Don't remind me. The way that short one was looking at you was just...\"\n\n\"Oh?\" Beatrice grinned. \"Could it be? Is the big bad demon jealous?\"\n\nLevi glowered at her, then smirked. \"For your sake, you'd better hope not.\"\n\n\"Ooooh scary.\" Her tone was teasing, even as her words trembled. \"Why? What are you gonna do to me?\"\n\nLevi titled his head, as though noticing something on Beatrice's cheek. \"Nothing...for now.\" He started the truck. \"However, if we are indeed going to be 'easing up' during the week, I think a few new...protocols are called for. Just to ensure we make the most of this time.\"\n\n\"Protocols?\" Beatrice arched an eyebrow. \"Like what?\"\n\n\"That's for me to know...\" The demon's eyes gleamed. \"And for you to find out.\"\n\n<p align=\"center\">____________________________________________</p>\n\nPink neon blazed through the rain, the looping letters shimmering as Levi's truck parked underneath. Beatrice peered up at the sign. Its hazy aura would've been quite alluring if not for the words underneath:\n\n\"The Special Spot: Adult Emporium.\"\n\n\"A sex store?\" she gawked. \"Seriously?\"\n\n\"Why so surprised?\" Levi cut the engine. \"You're with a demon of lust. Surely this possibility entered your mind.\"",
        "\"I-I mean maybe, but...I dunno.\" She wrinkled her nose. \"Seems kinda tacky. Even for you.\"\n\n\"Don't be so quick to judge. You may end up becoming a regular here.\"\n\n\"Ha ha. Hilarious.\" Her eye-roll was met with a blank stare. \"Wait, you are joking, right?\"\n\nLevi arched his eyebrows. \"Am I?\" He exited the truck with a chuckle. Beatrice groaned, then followed suit. She really wished he'd stop developing a sense of humor.\n\nA quick dash through the downpour lead them to the emporium's doors. The interior was surprisingly well lit, and an upbeat pop song played over the P.A., doing its best to welcome customers over the storm's roar. Despite the pastel colors and kitschy glamour, Beatrice couldn't help but tense as she stepped into the store proper. This was only her second time venturing into such terrain, the first being an \"ironic\" shopping trip she'd undertaken to celebrate her eighteenth birthday. She remembered tittering over the raunchy party favors and sleek sex toys with her friends, all the while casting covert glances at the leather fetish gear on the far wall. For all she'd done to force an atmosphere of mockery, there remained a sense that she was trespassing in forbidden territory, tangling with forces she didn't fully understand.\n\nThe same held true now. Even as Beatrice tossed her hair and tried to look bored, she couldn't resist a nervous peek at the demon beside her, her pulse quickening as she waited for his lead. Yet to her surprise, he seemed at a loss as well, his eyes wide as he ambled vaguely towards a row of Bluetooth dildos.\n\n\"It's...different than I expected,\" he mused.\n\n\"What?\" Beatrice hissed. \"Are you saying you've never been here before?\"\n\n\"Indeed.\" He absently fingered one of the shafts.\n\n\"Stop that. How did you even find this place, then? You didn't look for directions or anything.\"\n\n\"A demon has his ways.\" Levi's stare intensified.\n\nBeatrice's jaw fell. \"Are you saying you have some kind of sex store sixth sense?\"\n\nLevi held her eyes for a moment, then laughed. \"Of course not. I googled it this morning.\"\n\nFor the second time in less than hour, Beatrice seriously considered punching him.\n\n\"But I must say,\" he continued, wandering further, \"those photos didn't do this place justice. If I'd known, I would've planned better ahead of time.\"\n\n\"Great, so...\" Beatrice coughed. \"Should I just leave you to explore or...?\"\n\n\"Nice try. But you're not escaping that easily. Not when you have such an important role to play.\"\n\nShe tensed, reading his intentions in an instant. \"You don't mean...\"\n\n\"Oh, but I do.\" He beckoned her onward. \"Your modeling days aren't over just yet.\"\n\nBeatrice hesitated for a moment, then followed as commanded. It was pointless to resist, after all. Even if she made him waste power controlling her, it didn't really benefit her at this point. Her acquiescence was just a concession to keep things running smoothly. It had nothing to do with the heat rising to her face. She barely even thought about how she must look to the clerk, clad in a miniskirt and frilly blouse, her blushing face downcast as she followed Levi to the lingerie aisle. Though when he passed the elegant attire and stood instead by the row of cheap costumes, her awful anticipation became too strong to deny.\n\n\"You're teasing me again, aren't you?\" she pouted.\n\n\"Just looking for a very...particular effect,\" he explained, holding one of the packaged outfits aloft.\n\n\"A nurse costume?\" Beatrice frowned. \"Didn't really take you for a role play kinda guy.\"\n\n\"I'm not. Nor, it seems, are you.\" He swapped the product for another.\n\nBeatrice sighed. \"You're gonna pick something I hate and make me wear it, aren't you?\"\n\n\"As I've said before, it's not that simple. What interests me is not what you hate. Or even what you love. But the sparks that fly when those primal forces meet...that is what I'm after.\"\n\n\"Uh-huh. That's pretty poetic for a guy browsing fetish g--\"\n\nHer voice faltered.\n\nShe couldn't help it.\n\nThe costume he was offering was the most insulting choice yet: a cat maid outfit, complete with a ruffled lace micro-bikini, fuzzy black ears, and a butt-plug that doubled as a tail. The model on the front was striking a playful pose, a degrading, infantilizing image that set Beatrice's blood to boil. It was the sort of fantasy that she and her friends mocked the most, a perverted, obscene ideal, the popularity of which was further evidence of society's decline. The thought of wearing it, of embodying a mewling, pathetic caricature of female sexuality for Levi was...\n\n...Was making her awfully, incredibly wet.\n\nLevi grinned. \"It seems we have a winner.\" He handed her the packaged attire. \"Here. The checkout counter is that way. I have a little more browsing to do.\"\n\n\"W-wait,\" Beatrice stammered, her arousal and anxiety chasing each other in circles. \"There's no way I'm gonna be the one who goes up there and pays for this. That would--ah!\"\n\nThe demon's power hit her like a tidal wave, capsizing her fragile resistance into a sea of hot, pulsing pleasure. She gasped as the tides seized her body, her lips and legs trembling in the wake of her Master's infuriating, irresistible influence.\n\n\"This is what I desire,\" Levi murmured. \"And that makes it what you desire as well, understand?\"\n\nBeatrice's head tilted in the vaguest of nods. It was all she could manage.\n\n\"That's a good girl,\" Levi patted her cheek. \"Keep it up, and there's more where that came from, I promise.\"\n\n\"Ohhh...\" Beatrice sucked a breath through her teeth, as if that would cool her overheating head. She stumbled away before Levi could say any more, focusing on keeping her steps steady towards the checkout counter. The clerk wasn't even looking at her, but Beatrice still kept the outfit wrapped tightly in her arms, hiding both it and her nipples stiffening through her blouse. She handed the garments over like a ticking bomb, and fumbled for a moment trying to remember which purse pocket her wallet was in. She felt like she might die from humiliation before the transaction was over. If she didn't come in her panties first.\n\nThe degrading outfit purchased and bagged, Beatrice bustled towards the exit, so eager to escape that she almost left Levi behind. By the time she turned to look for him, he'd already taken her place at the checkout counter, paying for something Beatrice couldn't make out. She shot an inquisitive look towards his bag as he approached, but he just smiled and shook his head.\n\n\"You'll find out,\" he teased, ushering her towards the exit.\n\nThe ominous warning rang in Beatrice's ears and sang in her blood. She bit her lip, torn between her desperation to know more and her dread of what that might entail. As she rejoined Levi in the truck, she shot a quick text to her parents, telling them not to wait for her to start dinner. She wasn't sure what the demon had in store for her. But whether it was pleasure, pain, or both...\n\nShe couldn't wait to find out.\n\n<p align=\"center\">______________________________________________</p>\n\nMaybe this wasn't such a good idea after all.\n\nBeatrice stood in Levi's bathroom, blushing scarlet as she beheld her reflection in the mirror. The maid outfit looked even more ludicrous than she'd expected. The frilly, stringy bikini barely offered any support or coverage at all, her tits threatening to slosh free at the slightest of movements. The thin black panties were practically see-through, and every glance at the ridiculous cat ears sent a fresh flush of arousal trembling through her. Worse still, the skimpy outfit left Levi's crest perfectly visible on her skin, its flowing lines of ink marking her not just as a horny, humiliated cat maid, but one owned and marked by her Master.\n\nShe traced a finger over the crest, and let out mewling whine. She'd never been so horny in her life. The desire inside her had twisted tighter and tighter during the ride back to his place, to the point where a change of panties wasn't just an order, but a necessity. Now with her terrible transformation complete, the quivering heat inside her flared with renewed urgency. She slipped one of the ruffled cups aside, allowing her fingers to tease an eager pink nipple. Maybe she should sneak a quick one while she had a chance. Normally, she wouldn't dream of masturbating in another person's bathroom, but if she went to Levi like this...so needy and desperate it made her head spin...there was no telling what he'd be able to make her do.\n\nThe thought almost made her come right there, bent over his bathroom sink. When had her fingers slipped inside her panties? It didn't matter now. She just needed to do this quick. Before the demon could notice. Before he could find her like this, staring into her own whimpering reflection, getting off on how pathetic she looked, how low she'd allowed herself to fall for...\n\nThe door opened behind her. Beatrice yanked her hands from her body, gripping the countertop so tight she thought it might crack. Levi's face appeared in the doorway, his dark eyes registering a momentary spark of surprise. She wasn't sure if he'd noticed what she'd been doing. And as a wicked smile spread across his features, she doubted he would tell her.\n\n\"H-haven't you ever heard of knocking?\" she managed to stammer.\n\n\"Is there something you didn't want me to see?\" He arched an eyebrow. \"Strange. I wonder why you didn't lock the door then?\"\n\n\"I-I just forgot. That's all.\"\n\n\"Of course. Regardless, I assume you've finished dressing?\"\n\n\"Uh. Yeah. I think.\" Beatrice's gaze darted to the tail resting nearby. As addled with arousal as she was, inserting a butt plug remained a step too far. Although...if her Master commanded her then...there wouldn't really be any point in refusing so...\n\nLevi chuckled. \"Don't worry. We'll have use for that eventually. But only when you're ready to beg for it.\"\n\n\"So never, then.\" Beatrice walked away a little quicker than she meant to.\n\n\"We'll see.\" Levi stepped aside to let her pass, but not before grabbing a generous eyeful of her new look. She stepped carefully down the hall, exceedingly aware of every sway and jiggle that passed through her soft, exposed body. A part of her wanted to minimize the motion, to reassert what control she had over her appearance. But the heat of the demon's stare made her knees tremble, and it became harder and harder to stop the rest of her from following suit. Then she reached the kitchen, and what she saw brought all movement to a halt.\n\nA patch of the messy counter had been cleared, but not to make room for food. Instead, a pile of cleaning supplies was waiting for her, disinfectant wipes stacked next to sponges and soaps, with both a broom and a Swiffer leaning nearby.\n\n\"Seriously?\" she groaned.\n\n\"What did you expect?\" Levi was barely hiding his glee. \"That is a maid outfit, is it not?\"\n\n\"Yeah, but...\" Beatrice inspected a duster, unsure of what to do with her own disappointment. \"Wouldn't you rather do...other things?\"\n\n\"Oh?\" His black pupils twinkled. \"Such as what?\"\n\n\"Y-you know what I mean. Something more fun than just...wiping tables, or whatever.\"\n\n\"Ah. I understand your hesitation. However...\" He reached into the nearby sex store bag. \"I think I have a way to make this fun.\"\n\nBeatrice opened her mouth to inquire further, than froze as Levi withdrew his hand. In his grip was a black riding crop, the sharp leather shining in the overhead light.\n\n\"Is...is that..?\" She already knew the answer, but found it suddenly hard to speak.\n\nLevi gave the crop a few test swings. The sound of it swishing through the air raised the hairs on Beatrice's neck. \"This is going to be your teacher for today. It should help you learn the finer points of tidying up, as well as offer some...additional motivation.\"\n\nBeatrice swallowed. \"Couldn't you just...um, take control or whatever to show me what to do? That way I won't mess up and, uh, if that uses to much of your power, I can always, you know, take care of that later and--aaaaah!\"\n\nShe squeaked as Levi rested the crop on her bare thigh. The tip was cold, smooth, and pulsed with cruelty against her skin.\n\n\"This will be more fun,\" he purred, tracing the implement over her trembling flesh. \"Plus, it's the best way to maximize our time together. And that was what you promised in exchange for leniency at school. Remember?\"\n\n\"Y-yes Master,\" Beatrice breathed.\n\n\"Good girl.\" He withdrew the crop, but its danger lingered. \"There's a reward waiting for you at the end of your duties, if you can reach it in time. So I'd get to work if I were you.\"\n\nThe blushing servant grit her teeth, forcing her hands to stop shaking as she inspected the assembled supplies. She'd never had to do much cleaning at home, and her parents reliance on hired help meant they'd never deigned to teach her either. But how hard could it be? Surely she could figure out how to wipe a countertop, even under threat of demonic admonishment.\n\nThen again...Beatrice didn't recognize most of the powders and solutions Levi had assembled. She paused, reevaluating the space. Perhaps it would be best to start from the bottom and work her way up. That way she could keep track of where she was in the process. And even with her dearth of experience, she knew how to use a broom well enough. Maybe it would be best to start simple and--\n\nWhack! Beatrice dropped the broom as pain arced across her ass. She stumbled forward, gripping the counter for balance, biting her lip as the stinging gradually subsided.\n\nLevi tutted. \"Don't start with the floors. Your work will be ruined if anything falls or spills during the rest of your cleaning.\"\n\n\"You could've told me that!\" Beatrice protested. \"How do you expect me to do a good job if--eeee!\"\n\nWhack! The crop pricked her thigh this time. Not as hard as the first hit, but clearly meant as a warning. \"I expect you to follow your training,\" Levi explained. \"And that means no talking back. If you make a mistake, just accept your punishment and apologize. Are we clear?\"\n\nThe unfairness of his rules made Beatrice's fists clench. But the sadism in his grin, the restless crop in his hands, and the thrumming arousal in her crest subdued her rebellious impulse. \"Y-yes Master,\" she mumbled.\n\n\"Well then.\" Swish. Swish. \"Isn't there something else you'd like to say?\"\n\nBeatrice lowered her gaze. \"I'm sorry, Master.\"\n\n\"For what?\"\n\n\"Um. For...cleaning wrong, I guess.\"\n\n\"And..?\"\n\n\"And for...for...\" Beatrice's voice trembled. \"For talking back to you, Master. It won't happen again.\" She wasn't sure where that second part came from. The words just slid from her lips before she could stop them.\n\n\"And..?\"\n\nBeatrice blinked, confused. She'd already debased herself in front of him and apologized--what more could he possibly want?\n\nLevi answered her unasked question with a smirk. \"Tell me you're sorry for being a stupid slut. And that you need to be taught your place.\"\n\n\"Nnn...\" Beatrice's jaw clenched, her head suddenly boiling with mad, incomprehensible impulses. She wouldn't do it. She couldn't. It went against everything she stood for, everything that Lucy had taught her. And yet...why did the words send her heart fluttering when he spoke them? Why did she want to repeat them back to him, to confirm her inferiority and submission to his authority? Was she really what he said she was, a closeted masochist yearning to be unleashed? Did his magic make her this way? Did it matter?\n\nWhack! The crop whipped against the countertop, causing Beatrice to jump. \"Something on your mind?\" Levi asked.\n\n\"N-no Master!\" Beatrice exclaimed. And then, before she could stop herself: \"I-I'm sorry for being such a stupid slut. I need you to teach me my place.\"\n\nLevi's eyes widened, and for a second the trembling servant thought he might strike her anyway. A twisted part of her hoped he would. The crop rose to her face, and Beatrice flinched, but didn't move away.\n\nThe demon purred, stroking the tip against her cheek. \"Good girl.\"\n\nA tiny spark tickled her crest. And Beatrice came like hopeless whore. She fell against the sink, alternating between gasps and whines as her hips shuddered and bucked. Her soaked panties dripped, her pathetic juices spilling out and slicking her clenched thighs. It was pitiful, how little of his power it took to reduce her to this state. But that just deepened the depravity of her pleasure, made her feel all the lower and the better for it.\n\nLevi laughed. \"Don't get too carried away.\" His crop moved under her chin, causing her to stiffen to attention. \"We've still got a ways to go, don't we?\"\n\n\"Y-yes Master.\"\n\n\"Good.\" The leather flicked away. \"Now obey your Master and get to work.\"\n\nHis servant nodded unsteadily, turning to her task even as her mind and body throbbed. She tried her best to focus, to puzzle out the method of cleaning that would keep the crop at bay. But it was impossible to think while her pussy quivered and leaked with need, impossible to move when the cruel memory of the crop lingered on her ass. She cleared the trash-laden counters free of reproach, only to sort the recyclables wrong and receive a rippling rebuke against her rear. It took her several tries to find the right soap for the dishwasher, each incorrect guess arching her back and thickening the haze in her head, until just reading the labels became difficult. Even when her Master was silent, the crack of his weapon still echoed in her mind. Reminding her of what she was. Of her ineptitude. Her weakness. Her perversion. And the sickening joy she took from it.\n\nOops. She'd lost herself in scrubbing, and one of her tits had slipped free from her top. Beatrice paused, fumbling to set the silly thing right. Only for Master's hand to find her breast instead, drawing her to the brink of orgasm with one possessive grasp.\n\n\"What's this?\" he taunted. \"Getting a little sloppy, hm?\" Beatrice gasped as he pinched her nipple, then cried as he pulled and twisted. \"A servant should keep her uniform on unless ordered otherwise. You'll remember that from now on, won't you?\"\n\n\"Y-yes Master!\" Beatrice squealed. \"I'm sorry, Master! I'm sorry for being such a stupid slut. Please, show me my place!\"\n\n\"That's good. You're learning.\" Levi corrected her top and stroked her hair. \"I'd be more careful, though, if I were you. If I see any more slip-ups, well...you know what will happen don't you?\"\n\n\"Y-yes Master.\" Beatrice shivered into his touch. \"Thank you Master.\" Again, the words had formed before she could stop them, their gratitude as real as it was inexplicable. As much as she feared his punishment, his approval somehow transformed the pain, melting the tension into pleasure.\n\nAs Beatrice resumed cleaning, she could feel herself coming undone, a new purpose emerging from her unwinding resistance. No longer did she strain to avoid making mistakes, or worry about the restless leather buzzing behind her. Instead, she did what came naturally, and accepted correction with increasing enthusiasm. Every crack of the crop became a lesson and a blessing, the pain of Master's punishment only heightening the relief of his affection. Soon, she was no longer tracking her progress or even the time. Instead she moved according to her Master. His guidance. His approval. They were all that mattered.\n\nAt last, it dawned on Beatrice that she had nothing left to do. The countertops were pristine. The sink shone as if brand new. Even the floor looked clean enough to eat off of. Yet she felt no sense of completion or accomplishment. Not yet. Not until she looked to her Master for approval.\n\nHe smiled. And set the crop aside with a simple command. \"Kneel.\"\n\nBeatrice dropped in an instant, her tits almost bouncing from their frilly holsters. She folded her hands and lowered her eyes, trying to keep still even as every inch of her trembled with anticipation. She could sense her Master approaching, her heart swelling with every step. Until finally, his hand cradled her chin, and drew her gaze up to meet his. His pupils shone with demonic energy, their strange, blinding darkness drawing Beatrice in. Traces of his cosmic form curled in the corners of her vision, coaxing memories of their first encounter, and the helpless, blissful surrender she'd savored.",
        "\"You've done well,\" he appraised, drawing a thumb down her compliant lips. \"It seems this slut has learned her place, hm?\"\n\nBeatrice no longer heard the insult. Only the warm approval that enveloped it. \"Yes, Master,\" she replied.\n\n\"And that means she's ready for a slut's reward, isn't that right?\"\n\nTendrils of excitement tickled the servant's crest, tightening her eager cunt. \"Yes, Master.\"\n\n\"Then you shall have it. Only...\" He glanced between her legs. \"There's one last spot you missed.\"\n\nBeatrice bowed her head, and saw what he was indicating. Apparently her enthusiasm had gotten the better of her, and her pussy had stained once pristine floor, marking the tile with a faint streak of her own juices. Fresh humiliation burned her cheeks, and she rose to grab a paper towel and wipe it up. Only for her Master's hand to grasp her hair, halting her with a painful tug.\n\n\"Ah ah ah,\" he chided, before yanking her back down to the offending spot. \"With your tongue, slut.\"\n\nHer wide eyes looked up at him, the shock of the command managing to pierce the subservient fog. But his expression was unmoving. And his hand was reaching for the crop.\n\n\"Is something wrong?\" he asked.\n\n\"N-no Master.\" Beatrice tried to focus on her task. She lowered herself on all fours, opening her mouth and extending her tongue. But the floor suddenly seemed so far away, her own mess mocking her from beyond an impenetrable wall of shame. She wanted to make her Master happy. Needed to receive her reward. But could she actually do this? Lick her own pussy stain from the floor? All for a man who beat and insulted her? It was insane. Impossible. Nobody in their right mind would--\n\n\"Come on, now.\" Master had moved behind her without her noticing, and now knelt to her level as well. \"You're so close...\" he whispered.\n\nBeatrice gasped as the crop pressed against her pussy. The rod pushed between her lips, fresh arousal gushing as the leather tip smoothed her clit. She spasmed, shockwaves of horrible pleasure cascading through her, broken utterances shaking saliva from her lolling tongue.\n\n\"Go on,\" Master urged her, shifting and turning his tool. \"You want the reward, don't you?\"\n\nHis servant barely heard him. Her world had narrowed to a single point. The floor. Her tongue. She needed to do it. She couldn't bare this struggle any longer. Yielding was the only choice. The only thing that could save her sanity. And give her what she craved.\n\nThe floor was cold against her forehead. She extended her tongue. And dragged it across the tile. A faint salty sweetness tickled her taste buds. Her ears roared with blood. Her cunt tightened with need. Her mind melted with surrender.\n\nMaster yanked her hair back and lifted her head. She didn't resist, her panting mouth still leaking spit down her chin.\n\n\"That's my girl.\" He drew the crop free, and chuckled as she gasped and whined. \"Now, be good and follow me to the bedroom, won't you?\"\n\nBeatrice nodded in a daze, taking a full beat to regain control of her body. She started to rise, but then...no longer wanted to. It felt...better, somehow, to follow her Master on all fours, crawling down the hall towards his approving grin.\n\nShe was a stupid slut who'd learned her place. And now it was time for her reward."
    ],
    "authorname": "Mesmerciless",
    "tags": [
        "demon",
        "male dominant",
        "female submissive",
        "bdsm",
        "riding crop",
        "spanking",
        "degredation",
        "humiliation",
        "enslavement"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/a-demons-devotion-ch-06"
}
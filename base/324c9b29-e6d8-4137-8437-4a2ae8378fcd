{
    "title": "Ashley's Revenge Ch. 10",
    "pages": [
        "I opened my eyes and looked over at the alarm clock on my nightstand, it was just past 8AM and I could hear the birds chirping outside. I looked over to my wife's side of the bed to see that she was already up, something rare for a Saturday morning when she didn't have to go to work. The night before flooded into my mind and I still couldn't put the pieces together that would explain why my wife, Katherine, decided to roleplay as the hot, young Catholic high school girl from next door during our impromptu sex session on the couch. \n\nDid Katherine have any idea of the naughty things that Ashley and I had been doing over the past few weeks? Could she have possibly seen Ashley and I fucking on the couch on the night we thought she was asleep? Was Katherine cheating on me and overcompensating because she felt guilty about it? Or was this just a simple case of a wife giving her husband a sexy little treat? I did not know the answer to any of these questions and it was starting to feel like I was completely losing control over what was going on. \n\nDid my wife actually imply that she'd be up for a three-way with Ashley? It wouldn't be nearly as hot as fucking Ashley and her friend Lindsey but I knew the competition would be kicked up a notch or two if my wife and Ashley were in my bed together. I wondered just how my wife would react to watching me fuck the tall, blonde goddess from next door and how Ashley would use the opportunity to make my wife pay for screwing her out of her brand new Mustang. \n\nI got out of bed and put on my robe and walked down the stairs, as I got to the foyer I could hear the sound of the treadmill running in the basement. So, not only was my wife up early, but she was working out? There was no doubt in my mind that she was either cheating on me or that Ashley had truly gotten under her skin. By the end of the week hopefully the GPS I attached to her car would at least give me a clue as to which of these it was. \n\nI put a Dark Magic K-Cup into my Keurig brewer and looked out into the backyard as the dark roast coffee started filling my cup. It was a bright, sunny day and I smiled as I saw Ashley laying on a chair on her deck in a tiny white bikini with headphones in listening to something on her iPhone. I recalled all the times in the past that I'd caught a glimpse of her like this and was worried that she'd notice me staring at her long, slender body and think I was just a dirty old man. \n\nMy coffee finished brewing so I grabbed my mug and took it upstairs to my office where I'd have an even better view of Ashley. I sat in my chair and turned to the window as I picked up my phone and sent her a text message. \n\n\"I like that bikini,\" I sent with a grin. Immediately she looked down at her phone and then looked over at our house and shook her head from side to side. \n\n\"You dirty old man! Perving on the teenage girl next door! LOL\" \n\n\"I have it on good authority that she started perving on me first,\" I smiled and waved out the window. \n\n\"Fair point, I guess I've told you too much!\" \n\n\"Not at all, I love how your sexy mind works.\" \n\n\"So it's my mind you find sexy, Mr. Jones?\" \n\n\"That and your perfect body, Ashley,\" I smiled. \n\n\"What is your bitch of a wife up to this morning? Does she know what you're doing?\" I could see Ashley's smile clearly as she sent the text. \n\n\"No, she's down in the basement on the treadmill. I think you're in her head.\" \n\n\"Why's that?\" \n\n\"Long story, hold on a sec.\" \n\nI walked downstairs, opened up the basement door and descended the staircase. My wife was running on the treadmill, her hair pulled back in a ponytail and her black sports bra and shorts clung to her body nicely. \n\n\"Good morning,\" I said causing her to look up from whatever she was watching on her iPad. \n\n\"Hey,\" Katherine smiled. \n\n\"Can I make you a coffee or something?\" I asked, noticing the timer on the treadmill was at the 25 minute mark. \n\n\"No, thanks,\" she smiled. \"I'll be up in about a half hour.\" \n\n\"Ok,\" I said as I turned around and headed back upstairs and the minute I got back into my office I called Ashley's cell and she immediately answered. \n\n\"Hello, Mr. Jones,\" she said in a perky voice. \n\n\"Good morning, Ashley,\" I said as I watched her out my office window. \n\n\"So, I'm in the bitches' head?\" Ashley giggled. \n\n\"Yeah, there's no doubt about it. Last night I was watching tv and after she called her sister to told her about the spa weekend she came down to thank me wearing a little pink babydoll.\" \n\n\"Wow, really?\" Ashley asked surprised. \n\n\"Yeah, it's been a long time since she's surprised me with something like that,\" I said as I watched Ashley turn her chair a little so it faced my office window. \n\n\"What exactly did the bitch do to thank you?\" Ashley asked as she looked up at my office window. \n\n\"She pretended to be you.\" \n\n\"She pretended to be me?\" Ashley giggled. \"What did she do?\" \n\n\"She got on her knees and started sucking me off and then she asked me if I'd ever imagined you sucking my cock.\" \n\n\"She did not!\" Ashley gasped playfully. \n\n\"Oh, she did,\" I said with a chuckle. \n\n\"And what did you say?\" \n\n\"Well, she wouldn't let me deflect the question so I finally said yes, I had thought about you sucking my cock,\" I smiled as even from this distance I could see the shocked look on Ashley's face. \n\n\"Wow, you told her that?\" Ashley giggled as she shook her head. \n\n\"I didn't have much choice, she wasn't going to take no for an answer. Then she asked me flat out if I wanted to fuck you.\" \n\n\"And you said 'no' I'm sure.\" \n\n\"I did say no, but she asked me again so I finally told her that I would love to fuck you at which point she got up and straddled me on the couch and started riding me.\" \n\n\"Mmm, I'm jealous!\" Ashley cooed. \n\n\"Then she started calling me Mr. Jones and told me to call her Ashley.\" I watched as Ashley's hand slipped down between her legs over the tiny white bikini bottom she was wearing. \n\n\"She made you call her my name?\" Ashley moaned in a quiet voice as her fingers rubbed her pussy through the fabric. \n\n\"Yes, it was so out of left field for her.\" \n\n\"So you were thinking about me when you were fucking her?\" Ashley's fingers moved in little circles as I watched her from my window. \n\n\"I was,\" I moaned as my cock sprung to life underneath my robe. \"Aren't you afraid someone might see you?\" \n\n\"No, your house is the only one with a clear view of the deck, Mr. Jones,\" she smiled as she slid her fingers underneath her bathing suit. \"Did you moan my name when you filled her pussy up?\" \n\n\"I did, yes,\" I moaned. \n\n\"That is so fucking hot,\" Ashley moaned as I watched her fingers disappear further under her bikini bottoms as she started finger fucking herself right there on the deck chair. \n\n\"I thought so, and she also implied she'd do a three-way with you and specifically said that she'd do you.\" \n\n\"Mmmm,\" Ashley let out a long moan, \"That just opens up so many new ways that we can fuck with her.\" \n\n\"You mean by literally fucking with her?\" I chuckled. \n\n\"Maybe, but just knowing she is open to it. Maybe I should seduce the bitch and let you catch us,\" Ashley giggled as she fingered her pussy. \n\n\"Let's find out if she's cheating first.\" \n\n\"Are you stroking that big, hard cock for me?\" Ashley groaned. \n\n\"No, and it's killing me. Not enough time before wifey is off the treadmill.\" \n\n\"You could let her catch you and let me listen!\" Ashley giggled. \n\n\"You are such a bad girl,\" I smiled as I watched her on her deck chair going to town on her little pussy. \n\n\"I am, and don't you ever forget it, mister!\" \n\n\"Oh, I won't. I plan on taking advantage of that fact all next weekend.\" \n\n\"Yes, just you and me, alone in that big house of yours, Mr. Jones. What ever will we do?\" Ashley moaned as she bit down on her lower lip and smiled up at my office window, her fingers under her bathing suit as she fucked her little pussy harder and faster. \n\n\"I'm sure we'll figure it out. Are you going to cum for me you dirty little slut?\" I groaned into the phone. \n\n\"Mmm, yes,\" Ashley said as she pressed her head back into the chair and continued to work her pussy under her swimsuit. \"I'm your dirty little slut,\" she moaned. \n\n\"I can't wait to be inside your tight, wet pussy again,\" I groaned. \n\n\"Mmmm, yeah,\" she groaned. \n\n\"I need to be inside you, baby,\" I moaned as I watched her, my cock raging under my boxer-briefs and robe. \n\n\"She thinks pretending to be me will satisfy you, she doesn't know you're getting the real thing,\" Ashley moaned, breathing heavily. \"Can she compete with me, baby?\" \n\n\"No, not at all,\" I moaned, \"She could never compete with you.\" \n\n\"Good, let her pretend to be my while I take her place, it's perfect,\" Ashley giggled. \n\n\"You're perfect, my hot young wife. Now why don't you cum for me, let me watch you explode on those lucky fingers,\" I moaned low. \n\n\"Mmmm, ok,\" Ashley groaned as she pulled her suit down for me to watch her finger her beautiful pink pussy fast and hard until she came with a series of moans and stifled little yelps. \n\n\"Fuck, I really need a cold shower now,\" I groaned into the phone as Ashley giggled and looked up into my window as she removed her fingers from her pussy and sucked them slowly between her soft red lips. \n\n\"It sure sounds like it,\" Ashley giggled. \n\n\"Oh, I'll make sure to take it out on you tomorrow,\" I moaned. \n\n\"About that, I'm afraid I won't be seeing you until Friday. Lindsey and I are going to spend the week at her parents' lake house.\" \n\n\"So I have to manage a whole week without you?\" I smiled. \n\n\"I'm sure you'll be just fine, plus it will make the weekend even more fun,\" Ashley giggled. \"It's the perfect cover, I just told my parents I won't be back until Sunday night.\" \n\n\"So how are you getting home on Friday?\" \n\n\"Lindsey's boyfriend is driving up to the lake house for the weekend and Lindsey said I can use her car to come home.\" \n\n\"Well, that was nice of her. I guess she doesn't know you want me to beat her with a belt,\" I chuckled. \n\n\"Nope, she does not!\" Ashley laughed. \n\n\"Well, you girls have fun. Don't get into any trouble!\" I smiled. \n\n\"I can't promise anything, but we'll do our best! Tell the bitch I said hello!\" Ashley giggled. \n\n\"You are going to get me into so much trouble,\" I moaned. \n\n\"And you love it! Bye, baby,\" Ashley smiled. \n\n\"Bye,\" I disconnected the call and watched as Ashley smiled up at me and turned her chair back to the optimal position to get the most sun. She stretched her long, slim body as she lay back down on the chair flat on her stomach, showing off her perfect little ass. I had to admit, I did love the kind of trouble that Ashley was able to provide. \n\nI heard my wife's footsteps coming up the staircase as I spun my chair back around so I was facing my desk and I smiled when she walked into my office with a towel draped over her neck dripping with sweat. \n\n\"Hey, I'm done with my run,\" she grinned as she walked up to the side of my desk. \"I'm going to take a nice, long shower then we can do whatever you want.\" \n\n\"Sounds good,\" I said as I looked up at her and I could see her eyes were focused not on me but outside my office window. \"We could probably use a Costco run,\" I said as I wondered just what young Ashley was doing at that moment to distract my wife. \n\n\"What?\" my wife asked as she looked back at me. \n\n\"Costco,\" I smiled. \n\n\"Oh, yeah, sure,\" she nodded as her eyes returned out the window. \"Have you seen the bikini she's wearing today?\" \n\n\"Have I seen the bikini who is wearing today?\" I deadpanned. \n\n\"Don't give me that shit, you know damn well who I mean. There's no way you didn't see her laying out there.\" \n\n\"Oh, Ashley?\" I grinned. \"You mean the little white string bikini? I might have noticed.\" \n\n\"Uh huh, I'm sure,\" my wife shook her head. \n\n\"Hey, after last night maybe I should be jealous of you checking her out,\" I smiled as I looked up at her. \n\n\"Nah, that was just for you, baby,\" my wife grinned. \"It was just a little fantasy roleplay.\" \n\n\"You seemed to enjoy it.\" \n\n\"Yeah, well you did fuck me pretty damn hard,\" she smiled. \"Just goes to prove how much pent up sexual energy you have from having Ashley around here all day.\" \n\n\"Go take your shower,\" I smiled. \n\n\"I'll have to tell Julie that her little girl's internship is working out just fine,\" my wife smiled. \n\n\"Well, it's the truth.\" \n\n\"Yep, Ashley is cleaning my house and fluffing my husband, what more could a girl ask for?\" Katherine giggled as she leaned in and kissed me before she spun around and bounced out of the room. I wondered if the night before was just Katherine's way of testing me to see if there was any pent up sexual energy from having Ashley around. I was glad I brought my A game and that I admitted I'd love to fuck Ashley as they seemed to prove to my wife that there was nothing going on between Ashley and I. Funny how the female mind works. \n\nIt wasn't lost on me that my wife pretended to be Ashley for our impromptu fuck session on the couch last night and that Ashley loved having me refer to her as my wife. The competition was on and both of them seemed to be upping their game. I knew I had to up my own game a bit for next weekend and figure out a way to provide Ashley with my wife's wedding rings that she so much wanted to wear. \n\nWith Ashley out of town the next few days were very uneventful, especially since my wife was working some extra hours to offset the fact that she was taking the long weekend off for her trip to the spa. On the bright side, I did get a lot of work done and got caught up on a few projects that were falling behind. It's amazing how much work doesn't get done when you're plowing the hot, young blonde girl from next door when you should be working. \n\nTo be fair, I didn't spend all my time working. I did take a detour or two to a few online stores. I went to the Victoria's Secret web site where I ordered Ashley some very sexy lingerie, the Nordstrom's site where I couldn't resist a pair of black leather, over the knee Stuart Weitzman boots and the Costco site where I ordered her a princess cut diamond bracelet. I know what you're thinking and yes, they carry high end jewelry and they've got decent prices. \n\nBy the time Friday morning rolled around I was ready for my wife to head out on her spa weekend with her sister, Caroline, who would be picking her up at any moment. My wife was in our bedroom making sure she had all of her things packed when I walked in to check on her. \n\n\"Thanks again for this weekend,\" she smiled, \"I can't wait to get their clay treatment and a nice mineral bath.\" \n\n\"Sounds messy,\" I smiled, \"don't forget to take your rings off this time.\" \n\n\"Yeah, I know, but I hate to leave them in the room. You wouldn't mind if I just left them at home, would you?\" Katherine asked as she zipped up her suitcase and looked up at me. \n\n\"No, why would I mind?\" I asked, trying to contain my excitement at a mission completed. \n\n\"I just mean me going out without my wedding rings on for a girls' weekend,\" she grinned. \n\n\"No, I trust you. Plus, it's not hard for you to slip them off if you really wanted to anyway.\" \n\n\"I guess that's true,\" she said as she worked her wedding and engagement rings off of her hand and slipped them into her jewelry box on her dresser. \"You have nothing to be jealous of anyway.\" \n\n\"Except maybe you imagining Ashley giving you your hot oil massage,\" I smiled. \n\n\"Yeah, I don't think so,\" Katherine smiled as she moved her suitcase from the bed to the floor. \"It's you that'll be doing the imagining since you won't have any eye candy around this weekend, Julie told me that Ashley was spending the weekend at her friend's lake house.\" \n\n\"When did you talk to Julie?\" \n\n\"The other day, she asked how Ashley's internship was working out and I told her we could talk about it over dinner next week.\" \n\n\"Sounds good,\" I smiled. \n\n\"You have any plans for tonight and tomorrow?\" my wife asked as she checked herself out in the mirror, straightening the button down white blouse she was wearing. \n\n\"Yeah, beer, bourbon and baseball,\" I laughed as I picked up her suitcase to take it downstairs. \n\n\"You're way too easy to please,\" she laughed as she headed out of the room and I followed her. As we made it down into the foyer the front door opened and my wife's sister Caroline came bursting through the front door. \n\n\"Hey!\" Caroline shrieked, \"Are you ready for some relaxation?\" \n\n\"Hell yes,\" Katherine replied as I smiled at both of them as they embraced each other in a hug. \n\n\"Thanks for this,\" Caroline smiled at me as the hug ended, \"You have no idea how badly I need a fun girls' weekend.\" \n\n\"No problem, I know you two enjoy getting yourselves covered in mud and other weird crap for the sake of relaxation,\" I laughed. \n\n\"Yeah, we do!\" Caroline smiled and came over and hugged me. \"What are you planning, baseball and booze?\" \n\n\"See, she gets it,\" I smiled over at my wife. \"And, yes, that's my relaxation plan.\" \n\n\"I'll take massages and spa treatments any day,\" my wife smiled as Caroline grabbed her suitcase. \n\n\"You two have fun, only call if you need bail money!\" I laughed. \n\n\"Don't call us, even if you do,\" my wife countered as she gave me a kiss good-bye and then they were out the door. \n\nI waited until I saw them pull out of the driveway before I went into the garage and pulled the GPS unit off of my wife's car. I wasn't sure what I was going to find, but once I plugged the unit into my computer I'd at least know where she'd been going this past week. I'd find out if she was really pulling extra hours to cover her spa weekend or if she was off doing something else. \n\nI came back inside from the garage and went upstairs to put the GPS unit on my desk. I picked up my phone and dialed Ashley's cell. \n\n\"Hey baby!\" Ashley answered the phone, \"Is the bitch gone?\" \n\n\"Yes, they just left. This weekend is all about me and you.\" \n\n\"I love it; I'm about a half hour away so I hope you're ready for me.\" \n\n\"I am more than ready. Call or text me when you're just about here and I'll open the garage door for you. Don't need anyone seeing the car.\" \n\n\"True,\" Ashley giggled. \"I'll see you soon, husband.\" \n\n\"I'll count the moments until then, wife.\" \n\n\"You'd better! Bye,\" she giggled as she hung up the call. \n\nWith only a half hour or so before Ashley arrived I didn't have much time so I jumped into the shower and quickly shaved. I threw on jeans and a black polo and then made sure that all of the presents I had for Ashley were where they needed to be. I put my wife's rings into my pocket and figured I'd wait until the right moment to share them with Ashley. \n\nI was about to slip the GPS into the USB hub on my desk when I got the text from Ashley saying she was just about a minute away so I went downstairs and opened the garage door and after just a few moments Ashley drove Lindsey's Melbourne Red Metallic BMW M235i into my garage. As soon as the car was safely inside I closed the garage door and Ashley was out of the car and jumping into my arms before I was able to get her bag from the open trunk. \n\n\"I've missed you,\" she moaned as she kissed me and her long legs wrapped around my torso. She was wearing light blue denim skinny jeans, a pink tank top and a pair of Red Keds. \n\n\"I've missed you too,\" I smiled as I let my hands move down to her firm little ass and gave her a squeeze. \n\n\"Two whole days,\" she giggled, \"I want your cock inside me for every minute.\" \n\n\"Sounds like a goal worth shooting for,\" I smiled. \"But don't forget, you wanted me to take you out for a nice dinner.\" \n\n\"Nope,\" she shook her head hard and her soft blonde hair flew in my face from both sides, \"I changed my mind, going downtown would waste too much time.\" ",
        "\"Alright, then I can cook for you,\" I smiled. \"Lindsey's parents must really like her, huh?\" I asked looking down at the car. \n\n\"I know, right? She's a lucky bitch!\" Ashley giggled. \"I'd still prefer a Mustang though, it's so much more bad-ass.\" \n\n\"Just like you,\" I grinned. \n\n\"Exactly!\" Ashley giggled as she leaned in and kissed me again. I leaned her body up against the car as we kissed and I felt her sweet tongue dart into my mouth tasting of Big Red soda. My left hand was under her ass holding her up and my right hand slid up her back until it was completely entwined with her soft, blonde hair. I tugged her hair back and she moaned as I kissed her neck. \n\n\"We should probably take this party inside,\" I moaned. \n\n\"Mmhmm,\" Ashley replied as I nibbled playfully on her soft neck and inhaled her sweet, floral and vanilla perfume. She looked at me and smiled when I put her down. I grabbed her bag from the trunk and closed the lid. \"Have you pulled the GPS yet?\" she asked as she looked over at my wife's SUV. \n\n\"Yeah, but I haven't had a chance to read it yet,\" I smiled as we headed into the house. \n\n\"Well then, is that first on our list?\" Ashley asked as we walked into the den and I put her suitcase down on the floor. \n\n\"Really, that's what you want to do first?\" I smiled as I leaned in and kissed her neck as I wrapped my arms around her thin waist. \n\n\"I figured you'd want to know,\" she moaned as I kissed and nibbled on her soft, sweet skin. \n\n\"It can wait,\" I whispered as I kneeled in front of her and unbuttoned her tight skinny jeans as I looked up into her amazing blue eyes. She just smiled and bit her lower lip as I unzipped her jeans and revealed the little red lace thong she was wearing. I slid her jeans down and as soon as I could I leaned in and kissed her body though the lace. \n\n\"Mmm, ok, your idea is better,\" Ashley groaned as she stepped out of her jeans and I tossed them towards the couch. I pulled off her Keds and tossed them in the same general direction as her jeans which left Ashley standing in front of me in her red lace thong, a tank top and her frilly white socks. \n\n\"I love the panties,\" I smiled as I looked up into her eyes as my hands grasped the red lace thong on both sides. \n\n\"I figured you'd like another pair for your collection,\" Ashley giggled and bit down on her lower lip as I slid the panties down her soft, smooth legs revealing her shaved pussy. \n\n\"I would, thank you,\" I grinned as she stepped out of the little sexy thong and I slid it into the same jeans pocket that held my wife's rings. I moved closer to Ashley and kissed her soft, warm flesh as I moved her left leg up over my right shoulder and then let my tongue find her clit. \n\n\"Fuck,\" Ashley moaned as she reached out and steadied herself up against the wall as my tongue made quick little circles around her clit. My hands grasped onto her hips and I pulled her body to mine as I kissed her soft skin and continued to tease her clit with my hot, wet tongue. \n\nAshley's hands moved down to my shoulders as my hands slid up her long, slim torso and took her pink tank top with them. I looked up to see the red lace bra that she was wearing as my hands caressed her firm young B cups through the sexy little bra. Ashley grabbed onto her tank and quickly pulled it the rest of the way over her head and threw it to the floor as she smiled down at me. \n\n\"You're amazing, baby,\" I moaned as I pushed her young body back up against the wall and I thrust my rolled tongue deep inside of her hot, wet pussy and tasted her sweet juices covering my tongue. Ashley moaned as her hands grabbed a hold of my hair as my tongue slid in and out of her sweetness. \n\n\"Fuck, that feels so good,\" Ashley groaned as I kissed her clit softly then let the tip of my wet tongue make quick little circles around her sensitive button. I looked up and I could see the lust in her eyes as she watched me as I devoured her young pussy with my lips and tongue. \n\n\"We have two full days of this,\" I grinned up at Ashley and she moaned as pulled my face back into her dripping wet pussy where I was more than happy to continue the tongue fucking I had been giving her. My big, strong hands moved around to her back and unsnapped that sexy little red lace bra and she threw it hard across the room before regaining her hold on my hair. \n\nI cupped and massaged Ashley's firm breasts in my hands as I rolled her hard nipples between my thumbs and fingertips. I drilled her sopping wet pussy with my long rolled tongue causing her to moan and let out a few high pitch squeaks as she got closer and closer to the orgasm that was building inside her. \n\nAshley's body was pressed against the wall and her left leg was up over my shoulder as I drilled her sweet candy cunt with my married tongue. Her perfect young body was naked except for a pair of frilly socks and her gold cross and chain that was moving up and down with her perky breasts as her breathing grew more and more labored as I alternated working her pussy and her clit with my tongue. \n\nI could feel her juices covering my face as I continued my assault on her dripping wet slit. I grinded my face against her body harder and buried my tongue as deep as I could to get each and every drop of her addictive nectar in my mouth. I swear she tasted like a sweet, cherry Jolly Rancher and I couldn't get enough of her. \n\n\"Mmm, fuck, yes!\" Ashley moaned as her body started grinding itself against my tongue as it penetrated her over and over again with deep thrusts. I used my fingertips to squeeze down firmly on her hard nipples and twist them as my tongue shot deep inside her hot, young body causing Ashley to moan then let out a scream as her pussy flooded my mouth and tongue with her sweet candy juice. \n\nI devoured every drop of her sweetness that I could but just couldn't keep up as her nectar rolled down my face and down her smooth thighs. My face was buried so deeply between her legs as I ate her that I couldn't breathe, but I didn't care as I was going to tongue fuck the little slut until she started to come down. \n\nAshley moaned and groaned and let out a bunch of sexy high pitched whimpers as she tried to pull my face away from her drenched pussy. I stayed the course and felt her pussy contracting on my tongue as it rolled deep inside of her. Finally, after what seemed like an eternity, I felt Ashley's body relax and I came up for air. \n\n\"Holy, fucking, hell,\" Ashley whimpered between breaths as she looked down at me kneeling in front of her. Her soft blue eyes looked at me like she was in a blissful daze and I looked up at her and smiled, my face absolutely covered with her juices. \n\n\"Welcome home, wife,\" I smiled. \n\n\"Thank you, husband,\" she giggled as she tried to catch her breath. I moved her leg off my shoulder and I stood up, wrapped my arms around her slim waist and kissed her deeply. Ashley's arms moved up around my neck as we kissed and I picked her up in my arms and carried her up the two sets of stairs to my bedroom. I carried Ashley to my bed and playfully tossed her onto the mattress. \n\n\"I have missed you,\" I smiled as Ashley looked up at me with her amazing blue eyes. \n\n\"I've missed you too,\" Ashley grinned as she stretched her long frame out on the bed. \"Two whole days,\" she giggled, \"But it still won't be enough.\" \n\n\"I know, you've got me craving you all the time now,\" I smiled as my eyes took her in. \n\n\"Well, if we got rid of your wife we could have a lot more time together,\" Ashley smiled sweetly as she propped herself up on her elbow. \n\n\"Right, because your parents would be fine with you dating a divorced guy twice your age.\" \n\n\"Who cares what they think? I'm 18 and I can do whatever or whomever I want,\" Ashley said with a wicked grin. \"I'm a big girl.\" \n\n\"Yes, you are,\" I smiled as I reached under the bed and pulled out one of the Victoria's Secret boxes I had waiting for Ashley. \"I got you a little something.\" \n\n\"Ooh, for me?\" Ashley giggled as she sat up with a big smile and took the box from me and shook it. \n\n\"The big 'Victoria's Secret' on the top doesn't give away what it is? You still have to shake it?\" I grinned. \n\n\"You never know,\" Ashley smiled as she pulled on the long black ribbon and then lifted the top of the pink box off to reveal a cherry red pleated babydoll with a shiny ribbon bow on the front and matching panties. Her face lit up as she lifted the babydoll from the box. \"I love it baby, thank you!\" she said as she leaned in and softly kissed me. \n\n\"You're welcome,\" I smiled as I watched her inspect the babydoll and the red lace panties. \"I might have to steal them back at some point,\" I chuckled. \n\n\"Nope, these are all mine,\" Ashley giggled as she stood up, removed her white frilly socks. Her sparkling blue eyes locked on my eyes as she put the little red lace panties on and then slid the babydoll over her head and let it fall down around her slender frame. \"How do I look?\" \n\n\"You look absolutely amazing,\" I grinned as she twirled around to give me a great look of her amazing body in the lingerie. \n\n\"Thank you, sir,\" she smiled as she checked herself out in the mirror for a moment then turned back and walked up to me. \"So is it time for me to suck on that big, hard cock of yours or shall we go see what's on that GPS unit?\" \n\n\"You're hoping we're going to find something good on it, don't you?\" I asked as I moved my big hands onto her hips. \n\n\"Kind of, I just think she's a bitch that doesn't deserve you and the sooner you find proof of that the sooner we can make her pay,\" Ashley smiled a bit too sweetly for the words that came out of her mouth but I couldn't deny it was working for her. She was sweet, she was sexy and I was pretty sure she was nothing but ruthless when it came to getting something she wanted. \n\n\"Then I guess we should go check the GPS,\" I grinned and Ashley got up on her tiptoes and kissed me before she took my hand and led me across the hall into my office. I sat down on my big, leather chair and Ashley sat down in my lap. She picked up the GPS unit and handed it to me. \n\n\"Stick it in, baby,\" she giggled as I reached over and slid the GPS unit into the USB hub on my desk and waited until the reader program that I had installed popped up on the screen. It took a couple of moments but soon there was a list of GPS coordinates and a map that showed where each of them was. \n\n\"Let's see what we have,\" I said as I looked at the map and didn't see anything out of the ordinary at first, just her drive to and from the various stores she works at and of course back to the house. \n\n\"What's this?\" Ashley pointed at one of the items on the list of GPS coordinates that was time-stamped yesterday from noon until 2:45PM. I zoomed in on the map and saw that it was for the Sybaris, a local hotel that specializes in short stays for very adult activities. There was nothing else nearby so there was no doubt why she was there at that location. \n\n\"Fuck, I guess you were right,\" I said as I looked over at Ashley who had a big smile on her face. \n\n\"You know what that means,\" she cooed. \n\n\"We make her pay?\" I asked. \n\n\"We make her pay,\" Ashley said as she leaned in and kissed my neck softly. \"We make her pay big-time,\" she moaned as her lips caressed my skin and her warm breath washed over me. I looked at the computer monitor and there was no question about it, any guilt or feeling of betrayal I had for sleeping with Ashley were gone. Anything and everything was now fair game as far as I was concerned. \n\nI reached into my jeans pocket and pulled out the little red lace thong that Ashley arrived in along with my wife's wedding and engagement rings. As Ashley continued to kiss and nibble on my neck, I put the panties down on my desk and I held the rings in my left hand as I reached up behind Ashley's back with my right. \n\n\"I have something for you,\" I moaned softly as she nibbled on my neck and I grabbed a handful of her long blonde hair and tugged it back playfully. \n\n\"What is it,\" she asked as she looked up and then let out an excited gasp when saw the rings in my hand. \"Holy fuck, how did you manage that?\" she asked with her eyes wide open. \n\n\"I just reminded her how dirty her rings got on her last spa weekend,\" I smiled. \n\n\"You are an evil man,\" Ashley giggled. \"So that's why you sent them on a spa weekend?\" \n\n\"Well, that and to get you alone,\" I grinned as Ashley took the wedding ring and put it down on top of her panties on the desk leaving me holding the diamond engagement ring. \n\n\"Do you have something to ask me, sir?\" she grinned from ear to ear as she sat there on my lap in her new red babydoll with her left arm up around my neck. \n\n\"Ashley Marie, our time together has been some of the best that I've ever experienced and you have opened my eyes to so many things. Would you do me the honor of wearing my bitch wife's engagement ring while I do all sorts of naughty things to your hot, young sexy body?\" I asked as I looked deep into Ashley's sexy blue eyes. \n\n\"Yes, I will,\" Ashley giggled as I wrapped my arms around her and pulled her closer to me as I kissed her soft, red lips. \"Nicely done, by the way,\" she moaned. \n\n\"Thanks, I hope you weren't expecting another question,\" I grinned as I leaned in to kiss her neck. \n\n\"Why, would the other one be so awful?\" she groaned as I nibbled playfully on her neck. \n\n\"No,\" I sat back and looked into Ashley's deep blue eyes, \"I just know that if and when I ask you that question for real it would be with your own ring and for the right reasons.\" \n\n\"Fair enough,\" she smiled. \"But tonight we can pretend, can't we?\" \n\n\"Yes, we can,\" I grinned as I held up the ring again and looked into Ashley's eyes. \"Ashley Marie, will you marry me?\" \n\n\"I will,\" Ashley smiled and held out her left hand for me and I took it in my hand and slowly slid my wife's diamond ring onto her finger as she leaned in and kissed me deep. Once the ring was on her hand, I wrapped my arms around her waist and felt Ashley's hot, sweet tongue probing my mouth as we kissed. \n\nIt was hard to believe that just a month or so earlier I was a happily married man and Ashley was just the hot Catholic high school girl next door who I never imagined could be any more than just a fantasy. If Ashley wasn't around, the news of my wife cheating on me would have been devastating, but now with Ashley here it seemed to be more liberating than anything else. Funny how quickly your outlook can change. \n\nI let out a moan as Ashley's sweet tongue twirled around my tongue and I felt her hand reach down and tug at my belt to unfasten it. I reached up and grabbed a handful of her blonde hair and tugged it back as I kissed her soft, warm lips and felt her hand sliding into my pants and grabbing my cock through my boxer-briefs. \n\n\"Mmm, is this all for me?\" Ashley whispered in my ear in her sweet little girl voice. \n\n\"Yes, it is,\" I groaned as she got up off my lap and kneeled in front of me. Her blue eyes sparkled as she looked up at me and she grabbed onto my jeans and boxers and tugged them down off my body. I could see the burning lust in her eyes as she got between my legs and used her left hand with my wife's ring on it to slowly stroke my big, hardening cock. \n\n\"Don't you want her wedding ring too?\" I asked as I watched the sexy young eighteen year-old blonde in the red lingerie kneeling in front of me as she stroked me. \n\n\"Not yet,\" Ashley smiled as she kissed the tip of my hard cock softly. \"We need at least a short engagement before the wedding, silly.\" \n\n\"Ok,\" I moaned. Ashley's hand gripped my cock as it slid slowly up and down the hard shaft. Her eyes were playful and sparkling as her tongue would dart out to circle the tip of my raging cock with every few strokes of her manicured hand. \n\n\"You know how I told you that I was imagining you the very first time I played with my pussy?\" Ashley asked with a smile as she stroked me slowly. \n\n\"Yes,\" I moaned, \"I do.\" \n\n\"Did you ever stroke this cock thinking about me?\" Ashley grinned, \"You know, before we started fucking?\" \n\n\"Yes,\" I moaned as Ashley's smile grew and her hand starting moving faster up and down my hard, throbbing cock. I could feel the cool metal from my wife's ring as Ashley's hand moved across my skin. \n\n\"Tell me about the first time. Where were you?\" Ashley's eyes were probing mine as I tried to process the question. \n\n\"Right here, at my desk,\" I moaned as her hand slid down to the base of my rock hard cock and stayed there for a moment. \n\n\"Naughty boy, when was this?\" Ashley grinned as she leaned in and took the tip of my cock between her lips, never losing eye contact with me. \n\n\"A few months ago,\" I moaned and bit down on my lip as Ashley sucked playfully on the tip of my cock. \n\n\"Now that is very naughty, baby,\" Ashley groaned as her hand moved up and down my shaft again and she rolled her thumb around the slick head of my cock when she got to the top of her stroke. \n\n\"I know, I couldn't help it,\" I smiled as I looked into her eyes. \"Can you blame me?\" \n\n\"No, where was your wife?\" Ashley giggled as she stroked me then leaned in and let her tongue trace my cock from its base to the tip as she waited for my answer. \n\n\"She was asleep,\" I groaned. \n\n\"What were you imagining me doing?\" Ashley asked with a grin as her hand teased me with a few fast strokes and then a few slow ones. \n\n\"I wasn't imagining,\" I moaned. \n\n\"What do you mean?\" Ashley asked as she looked up into my eyes and gripped my cock firmly at the base. \n\n\"I was watching you,\" I said tentatively as I searched her eyes for a reaction. \n\n\"How were you watching me?\" Ashley asked as her grip got tighter. \n\n\"I can show you,\" I moaned at the pressure Ashley was putting on my engorged cock. \n\n\"Ok,\" Ashley said as she looked up at me, \"show me.\" I reached for my mouse, clicked a couple of times and entered a password which caused a video to start playing on the computer screen. It was of Ashley on her bed in a bra and panties and even though the picture was pretty dark you could tell that her hands were most definitely roaming in some very naughty places. \"So you were spying on me, huh?\" she asked as her hand started stroking me again ever so slowly. \n\n\"I like to think of it more as I was testing the zoom and low light capabilities on a new video camera,\" I grinned. \"I hope you're not mad.\" \n\n\"Why would I be mad?\" Ashley giggled as she looked up at the video, \"In about 30 seconds or so I'm going to turn on the lamp at the side of my bed and reach into my nightstand drawer for my vibe and then I'm going to 'forget' to turn the lamp off as I go back and play with my hot, little pussy.\" \n\n\"You've got to be fucking kidding me,\" I smiled and shook my head as I realized just how damn good Ashley's game actually was. \"You knew I was watching? How did you know?\" \n\n\"I'm just that good,\" Ashley giggled as she wrapped her soft, red lips around the tip of my cock and as I looked down I had a perfect view of her firm breasts nearly popping out of the red lace babydoll. She bobbed her head up and down a few times taking every inch of my throbbing cock into her hot, wet mouth and I watched as her gold cross and chain bounced off her chest. \n\n\"I guess you are,\" I moaned. \n\n\"If you really want to know,\" Ashley grinned, \"I saw you in your office that night and was hoping that you'd notice me being a bad girl for you. When your office lights went out I thought I lost you for a minute, but all of a sudden I saw that little red LED in your window and figured it was time to show you that I wasn't a little girl anymore.\" Ashley smiled as she looked up at me from her knees and slowly stroked my cock. \n\n\"Mmm, fuck,\" I moaned, \"You are not a little girl, that's for sure. You are a gorgeous woman, Ashley,\" I groaned as Ashley's eyes penetrated mine as she stroked my cock with her left hand and let me feel the cool metal of my wife's ring slide up and down my shaft bringing me closer and closer to exploding. ",
        "\"Thank you, sir,\" Ashley smiled as she stroked me faster. \"Do you want to cum all over my face, my sexy fianc\u00e9e?\" \n\n\"Oh, fuck yes,\" I groaned as Ashley looked up at me from her knees with a devilish grin. She moved her soft, red lips to my cock and spit on it, covering it with her saliva. Ashley looked into my eyes and let her tongue trace her upper lip seductively as her soft hand jerked my throbbing cock faster and faster. \n\n\"Cover me, baby. Cover your little slut,\" Ashley's blue eyes sparkled as they locked onto my eyes. She stroked me faster and faster, her hand corkscrewing my throbbing shaft as she slid it up and down. \n\n\"Oh fuck,\" I moaned loudly as I could feel myself getting ready to explode. I held back for one last moment until the kneeling Ashley opened her mouth and stuck out her tongue like a good Catholic girl waiting for communion and I exploded like a fire hose shooting my load into her mouth and all over her pretty face. \n\n\"Mmmm, that's it, baby!\" Ashley moaned as wave after wave of my hot creamy jizz kept coming and she kept jerking me off until just about every inch of her face was covered in the white dripping goo. \n\n\"Mmm, look at you,\" I grinned out of breath as I looked at the mess I just made on the Catholic schoolgirl's face. \n\n\"Do I look pretty?\" Ashley giggled as she leaned in and sucked my cock slowly up and down, cleaning any last drip of cum that might remain. \n\n\"You always look pretty,\" I smiled and Ashley used her left hand to gather as much of my cum from her face as she could, making sure my wife's ring was covered in it before she licked and sucked it clean. \n\n\"Thanks, baby,\" Ashley giggled. \"Care to join me for a nice, hot shower?\" \n\n\"I'd love to,\" I said as Ashley stood up, moved the straps of her sexy red babydoll over her shoulders and let it fall to the floor. She stood there in front of me for a moment smiling as I took in her sexy body in nothing more than a pair of red lace panties and her gold cross and chain. \"Lead the way.\" \n\nI followed Ashley as we walked through the master bedroom and into the bath. I turned on the shower and got undressed as Ashley slipped out of her panties and jumped into the shower first. I watched her through the glass door as she let the hot water clean the remaining cum from her face before I joined her. \n\nAshley turned to me, put her arms around my neck and kissed me deeply as the hot water ran over our bodies. I wrapped my arms around her waist and pulled her closer as we kissed. I let my big, strong hands explore her soft, smooth skin and she giggled as my hands found the sensitive area on her sides. \n\n\"So how do we make her pay?\" Ashley asked looking up at me through the steam. \n\n\"Isn't that what we've been doing?\" I smiled and Ashley shook her head. \n\n\"No, she doesn't know about us so that doesn't count,\" she grinned. \"We could let her catch us in bed together.\" \n\n\"But then I'm the one on the hook for cheating, it would be better to catch her in the act,\" I said as Ashley grabbed the mesh shower sponge ball and dispensed some bath gel on it and handed it to me as she turned around and backed her long, slender body up against mine. \n\n\"True, but catching her doesn't make her pay. Besides, she wouldn't get off the hook anyway because we have proof she was cheating, right?\" Ashley asked as I wrapped my arms around her body and used the shower sponge to lather her up, spending extra time on her firm B cups. \n\n\"I suppose,\" I said as my hands moved around and used the sponge on Ashley's back and ass. \n\n\"We need to make her really pay, hit her where it hurts,\" Ashley groaned as my hands came around and slid the mesh ball over her smoothly shaved pussy. \n\n\"How could we do that?\" I asked as I brought my right hand with the shower ball up to her breasts and let my left hand slip between her legs. \n\n\"We could tie her up and make her watch,\" Ashley moaned as my fingers found her soapy clit and rubbed it gently. \n\n\"Mmm, a very naughty idea,\" I whispered in her ear as I dropped the shower ball and cupped her right breast in my hand as my left hand teased her clit. \n\n\"We could drug her and you and I could fuck right on top of her and make a video,\" Ashley groaned as my fingertips rolled softly around her clit. \n\n\"Wow, remind me to never piss you off,\" I said as the fingertips from my left hand alternated squeezing the hard nipples on each of Ashley's breasts and the index finger from my right hand slipped inside her drenched pussy. \n\n\"You'd better not,\" Ashley moaned. \"Fuck, I'd suggest we could shoot her if I thought we could get away with it.\" \n\n\"That's a bit extreme,\" I said as I leaned in and kissed Ashley's neck softly. \n\n\"I know, but a girl can dream, can't she?\" Ashley giggled and moaned as I slid my finger in and out of her dripping wet pussy. \n\n\"I suppose,\" I moaned low. Ashley groaned and pressed her wet body up against mine as I bit down playfully on her shoulder and finger fucked her tiny pussy as I tweaked her sensitive nipples. \n\n\"I just want her out of our lives so we can be together,\" Ashley moaned. \"You want that too, don't you?\" \n\n\"I do,\" I groaned as I slid my finger in and out of Ashley's velvety teen box. I know I said at the start that I'd never leave my wife for her, but in light of recent discoveries I was starting to change my mind. \n\n\"I'll do anything to make that happen, anything,\" Ashley moaned as I added my ring finger inside her and fucked her faster as the hot water rolled down our bodies. \n\n\"We'll figure it out,\" I moaned as I felt her pussy starting to contract around my fingers so I kicked it up a notch and pounded her faster and faster until she screamed out and came hard all over my fingers and then fell back into my arms. \n\nI turned Ashley around to face me and I wrapped my arms around her tightly to hold her up as she regained her legs underneath her. I leaned in and kissed her sweet lips and devoured her tongue when she slipped it into my mouth. Ashley put her hands up around my neck and I felt my wife's engagement ring on my skin as I pressed Ashley's body up against the cool tile wall and kissed her hard. \n\n\"Fuck me,\" Ashley moaned as I leaned in to kiss her neck. My cock was rock hard and ready for her so I guided it to her waiting pussy as she wrapped her long, sexy legs around my torso. Ashley's arms were around my neck and I looked down into her blue eyes through the steam as I slid slowly inside of her causing her to let out a soft moan as her pussy gripped my manhood tightly. \n\nWe looked into each others' eyes as I slowly fucked Ashley's hot teen body up against the shower wall. She bit down on her lower lip as my throbbing hard cock slid slowly but deeply in and out of her tight wet pussy. \n\n\"God, you are sexy,\" I moaned as Ashley bit her lip harder as she took my cock inside her over and over again. \n\n\"I'm all yours,\" Ashley moaned as our eyes remained locked on each other through the steam of the shower. \n\n\"You mean that, don't you?\" I grinned as I started fucking her harder, grinding her body up against the wall. \n\n\"I do,\" Ashley said as I gazed deeply into her eyes. My cock was in heaven as it slid in and out of her tiny pussy. I felt the hot water from the shower hitting my back as I started pounding Ashley up against the wall harder and harder. Her teen pussy gripping me so tightly that I wanted to cum right then and there. \n\n\"You are so fucking tight,\" I moaned as Ashley smiled looking into my eyes. \n\n\"Just for you, Mr. Jones,\" Ashley giggled. \"Fuck my tiny little pussy harder.\" \n\n\"Fuck yes, you little slut,\" I groaned. \n\n\"I'm your little slut,\" Ashley moaned. \"I'm here to make up for all the boring years you spent with that boring wife of yours.\" \n\n\"Mmm, yes,\" I moaned as I fucked Ashley harder and deeper up against the cool shower wall. Her legs were wrapped around my body tightly, she was pulling me into her with each and every hard thrust. Our eyes still locked on each other through the steam. \n\n\"I'll fuck you anytime you want,\" Ashley moaned low, \"I'll let you fuck me any way you want.\" \n\n\"Fuck yes,\" I growled as my body switched to auto-pilot, pounding Ashley with abandon and trying to make it last as long as it could. \n\n\"I could be your perfect wife and your perfect little fucktoy,\" Ashley moaned in her little girl voice as I thrust my pounding cock deep inside of her so hard it lifted her off her feet as my cock exploded and filled up her tight pussy with more jizz that I thought possible after the hand job Ashley gave me just minutes before. Ashley's legs wrapped around me tighter and she moaned loudly as she came, never taking her eyes off of mine. \n\n\"You are perfect,\" I smiled as I looked into Ashley's blue eyes as I held her up against the wall. My hard cock was still throbbing inside her as her soft pussy walls gripped down hard milking me for every last drop that I had left. \n\n\"We're perfect together,\" Ashley giggled and pulled me down for a kiss. \"Now why don't you help me wash my hair,\" she smiled, \"I want to make sure I look perfect for the surprise I have for you later tonight.\" \n\nI helped Ashley with her hair and we both finished our shower and then got dried off. I went back into the master bedroom and put on a pair of black boxers and my robe as Ashley used my wife's blow dryer to dry her long blonde hair. I pulled out another of Ashley's presents and sat on the bed waiting for her. When she was finished drying her hair she walked into the master bedroom wrapped only in a white terrycloth towel. \n\nAshley smiled when she saw the long white box with a red bow and ribbon wrapped around it that was sitting on the bed next to me. \n\n\"Is that another present for me?\" Ashley asked as she bounced over to the bed and sat down across from me with the box between us. \n\n\"Yes, it is. Don't you think you deserve another present?\" I asked with a grin. \n\n\"Of course,\" Ashley giggled as she picked up the box and shook it from side to side. \"Ooh, it's heavy.\" \n\n\"Just open it,\" I smiled. \n\n\"Ok, ok,\" Ashley giggled as she put the box back down on the bed and pulled the red bow off and stuck it on top of the towel that was wrapped around her. She slid the ribbon off the box and then took the top off and laid it to the side before she reached in and pulled the tissue paper free to reveal the black leather over the knee Stuart Weitzman boots with the 4 inch heels. \"Oh my God, these are awesome! Thank you, baby!\" \n\n\"You're welcome, I saw them and just needed to see them on you,\" I smiled as Ashley pulled the pair of boots from the box to take a closer look at them. \n\n\"I love the smell of leather,\" she giggled as she unzipped the side of the left boot and slid her foot in and zipped it back up. \"They feel great as well, they are so soft,\" she said as she unzipped then put on the right boot before she stood up and looked at herself in the mirror. \n\n\"They look amazing on you,\" I said as Ashley grinned and did her patented model twirl for me. The black Napa leather boots made it right up over Ashley's knees and made her legs look amazing. \n\n\"They really go well with my towel, huh?\" she giggled. \n\n\"I think they go with anything, or nothing at all for that matter,\" I smiled and looked into Ashley's blue eyes as she walked towards me. \n\n\"I'm sure,\" she smirked as she leaned in and kissed me. \"I do love them and I love you more.\" \n\n\"I love you too, Ashley,\" I said as she sat down on my lap and put her left arm around my neck. \"I like where you placed the bow, are you my present?\" \n\n\"Yes, anytime you want me,\" Ashley smiled and bit down playfully on her lower lip as I wrapped my arms around her body. Her face was just inches from mine when she asked, \"How bad do you want me?\" \n\n\"Very, very bad,\" I smiled as Ashley leaned in and kissed my cheek softly. \n\n\"Prove it,\" she whispered then let her warm lips kiss my earlobe softly. \n\n\"Mmm, ok, how?\" I moaned as her tongue softly traced my ear. \n\n\"We make her pay and I take her place,\" Ashley whispered in. \"Don't you want to wake up next to me every morning instead of her?\" \n\n\"Yes,\" I said, and at that point I meant it. Ashley had made me feel so alive that I could totally imagine myself with her for years and years to come. \n\n\"So, she really said I was hot?\" Ashley pulled back so I could see her sparkling blue eyes as she sat on my lap wrapped in a towel and wearing her sexy new boots. \n\n\"Yes, she did.\" \n\n\"We can definitely use that to our advantage,\" Ashley bit her lip and looked into my eyes. \n\n\"How so?\" \n\n\"Maybe I could hit on her or something. I could stop over here when you're not around and maybe I could get her to admit her affair on tape. Or, maybe I could get her to go down on me and capture the video on my phone. That would make divorcing her a lot easier, wouldn't it?\" \n\n\"It would certainly make it a lot cheaper,\" I smiled. \"You would do that for me?\" \n\n\"I'd do anything for you,\" Ashley said as she looked into my eyes. \n\n\"It could work.\" \n\n\"I just want her out of our lives, fianc\u00e9e,\" Ashley grinned and pulled me closer for a long, deep kiss. \n\n\"Did I tell you that Katherine and I are having dinner with your parents next week?\" \n\n\"No, you didn't,\" Ashley looked at me surprised. \n\n\"I guess your mom asked how your internship over here was going and Katherine said we could talk about it over dinner next week. She wants to tell your mom how well you've been doing and how hard you've been working because she still feels bad about you not getting your new Mustang.\" \n\n\"As she should,\" Ashley said rolling her eyes. \n\n\"I know, but maybe we can convince your parents that you're a hard working girl that deserves that car after all,\" I smiled. \n\n\"You think they'd take that Mustang away from me once they find out I'm fucking you every chance that I get?\" Ashley giggled. \n\n\"True, I guess we need to figure out a way to make my wife pay and still keep our little secret. Maybe at least until you get out of school?\" \n\n\"That's such a long time!\" Ashley groaned. \n\n\"I know, but you know what people are going to think with our age difference.\" \n\n\"Fuck them, who cares what they think?\" Ashley barked. \n\n\"Not me, but we just have to be ready for some backlash. That's why I just want you to be absolutely sure about what you want to do before you do it.\" \n\n\"I am sure, are you?\" Ashley asked as her blue eyes penetrated mine. \n\n\"Am I sure about what?\" \n\n\"About us, are you sure you are ready to get rid of your cheating bitch of a wife?\" \n\n\"It's not that easy,\" I groaned. \n\n\"But it is,\" Ashley smiled. \"She could never treat you as good as I do. She doesn't love you the way I can. She'll never be your perfect little fantasy slut like I can.\" \n\n\"That is true,\" I said softly. \n\n\"And I get it, we need the perfect plan and that might take time. I'm willing to do anything you want to do as long as I know you still want to be with me,\" Ashley said smiling sweetly, her sparking blue eyes gazing into mine. \n\n\"I do, and yes, we will figure it out,\" I smiled. \"Let's just enjoy this amazing weekend for now, ok?\" \n\n\"Yes, baby,\" Ashley cooed as I pulled her body to mine and kissed her. \"I can't believe I get to wake up in your arms two days in a row, it's all I've thought about for days.\" \n\n\"Me too, and I'm looking forward to this surprise you have for me tonight. Care to give me a hint?\" I grinned as Ashley pushed me back onto the bed and straddled me. \n\n\"I think you'll enjoy it,\" Ashley giggled as she looked down into my eyes and my hands gripped her waist and pulled her body down on mine. \n\n\"That's not much of a hint,\" I moaned as my hands moved up a few inches to Ashley's sensitive zone and tickled her. She grabbed my hands and held them down by my side as she shook her head. \n\n\"Behave, or I won't give you your surprise,\" Ashley said softly as she bit down on her lower lip. \n\n\"Can I have it now?\" I smiled as I looked up into Ashley's blue eyes. \n\n\"Nope,\" Ashley grinned, \"Why don't we just relax and rest for a bit?\" \n\n\"We can do that,\" I said as I pulled Ashley down to me and kissed her sweet red lips softly. My hands moved up her back and unwrapped the towel that was around her body and let it fall. Ashley grabbed it and tossed it off the bed as she gazed into my eyes. \n\n\"You're a bit overdressed,\" she smiled as she pulled me up and then pulled my robe open. \n\n\"You're the one wearing boots,\" I grinned as I took the robe off and threw it off to the side of the bed. \n\n\"Do you want me to take them off?\" Ashley grinned wickedly. \n\n\"No, that's ok,\" I said, pulling her back down on top of me as I lay back on the bed and then wrapped my arms around her warm body. \n\n\"I feel so safe in your arms,\" Ashley whispered in my ear. \n\n\"And you make me feel like I can do anything.\" \n\n\"That's because you can,\" Ashley whispered as she laid her head on my chest and traced my skin with her long manicured fingernails. \n\nJust having Ashley is my bed made me feel like I was 20 years younger and ready to take on the world. Her perfect, young body felt amazing on top of mine and I knew it was getting harder and harder to tell myself that Ashley was just a short-term fantasy. I wasn't quite sure yet how we were going to make my wife \"pay\" but I was pretty sure that while it wasn't a sure thing that our marriage was over it was pretty clear now that I was at a crossroads. Ashley had made it abundantly clear that she was an option and I just couldn't ignore that any longer. \n\nI knew there was a plethora of reasons why Ashley and I could never work, and they all came down to one thing; our age difference. I was an idiot to think that I could ever keep control of this relationship and keep it on a casual level. There was nothing casual about Ashley. She was beautiful, she was intelligent and she seemed to know exactly what she wanted out of life. She seemed more together than most women twice her age. \n\nI am sure there are women out there wondering how a man in his 40's could fall for a young girl like Ashley. I'll tell you the dirty little secret that most guys never want to admit, no matter how old we are the perfect woman is one that is between the ages of 18 and 25. I call it the \"Playmate Factor.\" At some point all young guys see their first issue of Playboy and start lusting after the Playmate of the month, who is almost always in that 18 to 25 age range. \n\nAs we get older, we still lust after that perfection that we see in the centerfolds and even though we age, the girls never do. Biology would explain it by saying that men are looking for women to have their children and continue the lineage, either way it all boils down to the fact that older men are attracted to younger women on a very primal level. \n\nThe fact that Ashley actually looked better than most of the women I'd seen in Playboy certainly made it hard for me to not get swept up into the fantasy of it all. When most guys find out their wives are cheating it is a pretty hard pill to swallow. For me, it seemed to be a gateway to a fantasy girl that I'd have never considered otherwise. \n\nAshley drifted off to sleep in my arms. The rhythms of her body moving up and down with every breath as she lay on top of me made me feel absolutely content and relaxed. I closed my eyes and wondered just what she had in store for me later that evening. After a few minutes I drifted off as well; knowing whatever it was Ashley was probably right, I was pretty sure I'd enjoy it. \n\nI woke up a couple hours later to find Ashley kissing my neck ever so softly, her slender body was still on top of mine and my arms were still wrapped around her. \n\n\"What a perfect way to wake up,\" I smiled as Ashley pushed herself up to look down into my eyes. \n\n\"It is, isn't it?\" Ashley grinned. \"Why don't we have something to eat then I can prepare your surprise for you.\" ",
        "\"Still not going to give me a hint?\" \n\n\"Nope, it would ruin the surprise!\" Ashley giggled as she kissed my lips softly then rolled off of me and jumped up off the bed wearing nothing but her new leather boots. \n\n\"I guess we wouldn't want that,\" I grinned as I sat up and grabbed my bath robe. I stood up and put it on as Ashley walked into my wife's closet and a moment later reappeared wearing my wife's short red terrycloth robe tied at the waist. \n\nWe went downstairs to the kitchen where I made us some grilled chicken and pasta and Ashley grabbed a bottle of wine from the wine rack and opened it, pouring us each a glass. \n\n\"Are you old enough to drink, young lady,\" I smiled as I put the plates down on the table. \n\n\"Do you really want to make fun of my age, old man?\" Ashley giggled as she looked up at me with her sparking blue eyes. \n\n\"Good point,\" I said as I sat down and raised my glass of wine. \"Here's to an amazing night with the most beautiful girl I know.\" \n\n\"That's better,\" Ashley grinned as we clinked our glasses together and then we each sipped our wine as we looked into each other's eyes. \"It is going to be an amazing night.\" \n\n\"I could get used to this,\" I smiled. \n\n\"I could too; we just have that one little problem.\" Ashley sipped her wine then put the glass back down on the table. \n\n\"I know; we'll figure it out.\" \n\n\"I know we will, fianc\u00e9e,\" Ashley smiled. \"And this dinner is amazing; I didn't know you were such a good chef.\" \n\n\"I'm a man of many talents,\" I grinned. \n\nWhen we had finished our meal and killed off the bottle of wine Ashley stood up and took her plate over to the kitchen sink. I watched her as she walked and I loved how those knee high boots looked on her long, slender legs. She turned and walked over to me and I could see the confidence in her walk and in her smile. \n\n\"It's almost time for your surprise,\" Ashley said as she leaned down to give me a long, sweet kiss. \n\n\"Mmm, good,\" I groaned. \n\n\"I'm going to grab my suitcase and go up to the bedroom. I want you to go downstairs and wait for me there until I call you, understood?\" Ashley grinned. \n\n\"Yes,\" I nodded my head. \n\n\"Good, do not come up until I tell you I'm ready for you,\" Ashley smiled and then kissed me again with her soft red lips. She then went downstairs and grabbed her suitcase while I took care of the rest of the dishes. I heard her climb the stairs to the master bedroom then heard the door shut behind her. \n\nI went downstairs and turned on the television as I waited. I couldn't help but wonder just what kind of surprise Ashley was preparing for me and the anticipation grew as the clock ticked away. Fifteen then thirty minutes went by. I could feel my heart racing as forty-five minutes passed. I had been waiting almost a full hour when I heard Ashley's voice calling for me. \n\n\"It's time,\" Ashley's voice beckoned from upstairs. \"And bring your wife's wedding ring with you.\" \n\nI turned off the television and walked up the two flights of stairs. I noticed the door to the master bedroom was closed once again. I went into my office and grabbed my wife's wedding ring from my desk where it sat on Ashley's red lace panties and then I walked back to my bedroom door. I took a deep breath and then turned the handle and opened the door slowly. \n\nThe lights were off, but there were flickering candles all over the dressers lighting up the room. The bed was covered in rose petals and Ashley's iPhone was sitting in a dock on the nightstand playing soft music. The only thing missing from this perfect scene was Ashley herself. \n\n\"I'm ready for my surprise,\" I said as I stood there in my robe holding my wife's wedding ring in my hand. The music track changed and I heard the unmistakable melody of the \"Bridal Chorus\" as Ashley appeared as a vision in white wearing a strapless wedding dress and veil. She was carrying a small bouquet of flowers and smiling as she walked slowly out of the master bath and into my bedroom. \n\nI stood there speechless as Ashley walked closer to me in the dimly lit room and it quickly occurred to me that she wasn't just wearing any wedding dress, Ashley was wearing my wife's wedding dress. Her long blonde hair was partially pulled back with some of her golden locks flowing down over her bare left shoulder. \n\n\"Holy fuck,\" I moaned as I took her in and Ashley gave me one of her patented model twirls. The white lace corset top fit her body nearly perfectly, accentuating her slim waist and pushing up her firm B cups. The full satin and lace skirt fell gracefully down to the floor. \n\n\"Do you like your surprise, fianc\u00e9e?\" Ashley asked in her sweet little girl voice. \n\n\"You are so fucking bad,\" I smiled. \n\n\"Is that a yes?\" Ashley giggled. \n\n\"Yes, it's a yes. You look absolutely amazing,\" I said as I looked into her blue eyes. \n\n\"Do you take me to be your perfect wife?\" Ashley smiled and held out her hand. \n\n\"I do,\" I moaned as I slipped the wedding ring onto her left hand where it joined my wife's engagement ring. Ashley's blue eyes sparkled in the candlelight as she admired the rings on her hand. I took my ring off and handed it to her. \n\n\"Do you take me to be the most amazing husband ever,\" I grinned. \n\n\"I do,\" Ashley said as she put the ring on my hand, \"for forever and always.\" \n\nI wrapped my arms around Ashley's waist and kissed her soft, red lips. Her long, slender arms moved up around my neck as the kisses continued getting hotter and deeper. My hands moved up to her face where I pulled her gently into my kiss. I pulled back for a moment just to memorize her face perfectly made up with a dark red lipstick on her lips. \n\n\"Did she let you fuck her in this dress?\" Ashley smiled devilishly. \n\n\"No, she didn't,\" I said as my hands slowly moved down Ashley's body feeling the soft satin and lace of my wife's wedding dress. \n\n\"Good,\" Ashley giggled, \"Now you'll get your chance.\" She put her bouquet down on the chair and her hands reached out to my robe and untied it. She reached up and pushed the robe off of my shoulders and let it fall to the floor. I stood there in front of the sexy, young bride in just my boxer-briefs with my growing hard-on underneath. \n\n\"This was so worth the wait,\" I smiled as Ashley looked up at me as she got down on her knees in front of me and pulled my boxer-briefs to the floor. My hard cock stood at attention as Ashley's lipstick covered lips wrapped around my throbbing head and then glided up and down my shaft. \n\n\"I'm glad you agree, husband,\" Ashley smiled as she used her left hand with my wife's rings on it to slowly stroke my raging cock. Her soft, warm tongue teasing the tip of my cock as her hand jerked me up and down. \"You are mine now.\" \n\n\"Fuck, yes,\" I moaned as I reached down and let my right hand land on the back of Ashley's neck, feeling the lace of the veil as Ashley slowly took every inch of my cock into her warm, wet mouth. My legs buckled and my left hand grabbed onto Ashley's shoulder for support as I felt my cock hitting the back of her throat. \n\nI grabbed onto her neck tighter as I took control of the tempo and started fucking her pretty young face harder and faster. Her lust filled eyes looked up at me as I buried my cock in her mouth. She moaned as my throbbing meat pounded her mouth and she reached under the wedding dress to play with her pussy. \n\n\"You dirty little slut,\" I moaned as she looked up at me and nodded in agreement. I pulled my wet cock, covered in her saliva, from her mouth and slapped it on the side of her face causing her to let out a few soft moans and giggles. \"You like that, slut?\" \n\n\"Yes, sir,\" she nodded. \"I'm your wife now; use me any way you wish.\" \n\nI pulled Ashley to her feet and kissed her red lips deeply. I pulled up the wedding dress to give me access to her little pussy and found a soaked pair of lace panties between her legs. I rubbed her clit through the material as Ashley's sweet tongue darted into my mouth. I groaned as our two tongues wrestled as we kissed. My fingers teased her already soaked pussy as she moaned loudly into the kiss. \n\nI spun Ashley's young body around and bent her over the big king sized bed that I shared with my wife. I kneeled down and pushed the satin and lace of the dress higher and noticed the white pumps Ashley was wearing that made her long legs look absolutely amazing. I reached up and found the soaked white lace panties Ashley was wearing and slowly slid them down her legs. Ashley raised her feet up to step out of them and I tossed them to the chair as I slid myself under the dress so that my tongue could taste Ashley's sweet little pussy. \n\n\"Mmm, yes!\" Ashley moaned as my big hands spread her skinny legs apart and my tongue buried itself in her dripping wet pussy. It was an amazingly hot sensation being underneath the satin and lace of the wedding dress as my tongue drilled Ashley's hot young pussy. I reached around with my left hand and teased her tiny clit with my fingertips as I buried my face between her legs and ate her pussy causing her to let out a scream. \n\nAshley rocked her body back down onto my face with every deep trust of my tongue. Her pussy was overflowing and my face was covered with her sweet juices as my tongue lapped up every sweet drop it could. I rolled my tongue and darted it in and out of her pussy fast and deep as my fingertips rubbed her clit. I could tell from her moans that she was getting close so I put it into overdrive and pounded her little pussy with my tongue harder and faster. \n\n\"Fuck! Yes!\" Ashley screamed as her already soaked pussy exploded in a rush of passion and she came hard on my tongue. I buried my face between her legs to get every sweet drop as I tongue fucked her honey hole and continued rubbing her clit with fast little circles until she collapsed on my bed. I moved out from under the wedding dress and picked up my robe to wipe my drenched face. \n\nI stood up and looked at Ashley, her perfect ass still in the air as she lay half on the bed breathing hard and letting out soft little moans. I couldn't resist raising my hand and bringing it down hard on her ass, spanking her hard enough through the material of the wedding dress that she let out a little scream followed by a giggle. \n\n\"Oh, you like that, huh? Maybe I should get my belt,\" I growled as Ashley looked back at me. \n\n\"No, not the belt!\" she mocked me and giggled harder. \n\n\"You are a such a bad little slut,\" I smiled and then pulled Ashley to her feet and spun her around to face me. \n\n\"Am I?\" Ashley grinned and looked at me with her deep blue eyes as she bit down softly on her plump red lip. \"I thought I was pretty good at it.\" \n\n\"I guess you are,\" I smiled. \"You look amazing in that dress.\" \n\n\"Thank you, husband,\" Ashley smiled. \"I saw the box in the back of her closet that first night I came over and just knew I had to wear it for you. It is just so perfect that you got me her rings to wear too.\" \n\n\"You are bad,\" I groaned. \n\n\"And you love it,\" Ashley smiled as she put her arms around my neck and looked up into my eyes. I wrapped my arms around her waist and pulled her body to mine as I looked into her sparkling blue eyes. \n\n\"I do,\" I nodded as we started moving to the music that was still coming out of Ashley's iPhone on the dresser. \"May I have this dance?\" I grinned. \n\n\"Of course, husband,\" Ashley smiled wide. \"This has been my fantasy since I was about 12 years old.\" \n\n\"What has?\" I asked looking into Ashley's eyes. \n\n\"Wearing a wedding dress and dancing with you as my husband,\" Ashley beamed. \"Of course, you were wearing a tuxedo and not your birthday suit, but it is an interesting twist,\" she giggled. \n\n\"Yeah, would make for some interesting wedding photos, that's for sure,\" I smirked as Ashley pulled me down and kissed me softly. I pulled her closer and devoured her sweet red lips as she let out a soft little moan. She playfully bit down on my lower lip and then pulled away and giggled when I tried to return the favor so I leaned in and nibbled on her soft, warm neck. \n\n\"Fuck me,\" Ashley moaned quietly as I kissed and nibbled on her neck. My right hand slid slowly up her back and grabbed a handful of her long blonde hair along with the lace of the veil. \n\n\"What's that, I can't hear you,\" I teased as I kissed my way up to Ashley's ear where I used the tip of my tongue to playfully flick her earlobe. \n\n\"Fuck me, husband,\" she moaned louder as I tugged her long blonde hair back and kissed her neck softly before biting down playfully on her sweet flesh causing her to let out a long, deep moan. \n\n\"Say it like you mean it,\" I chuckled as I continued to tug back on Ashley's hair and nibble gently on her neck to tease her. \n\n\"Mmm, fuck,\" Ashley groaned and then grabbed a handful of my hair and tugged my head back hard so that we were eye to eye. \"Fuck, me, now,\" she growled as her lust filled eyes penetrated mine. \"Fuck me here on the bitches' bed, in her fucking wedding dress as I wear her fucking wedding rings.\" \n\nMy hands moved behind Ashley's neck as I leaned in and kissed her hard and deep as I walked her back towards the big king-sized bed until I could feel her up against it. Ashley fell back onto the bed and I grabbed her long, slender legs and pulled them up over my shoulders. Ashley gathered up the material of the skirt as she bit down on her lower lip and looked up at me. I guided my rock hard cock to her drenched slit and thrust myself deep inside of her waiting pussy with one deep thrust. \n\n\"Fuck!\" Ashley moaned as she looked at me with her blue eyes as I wrapped my arms around her legs to pull her closer to me as I fucked her tight teen pussy hard and fast as she lay on her back in my wife's wedding dress. My rock hard cock slid in and out of her over and over again as Ashley moaned louder with each deep thrust. \n\n\"You are so fucking sexy,\" I growled as I pounded Ashley's pussy hard one last time before burying my cock deep inside her and letting it sit there for a moment as Ashley's tight pussy gripped down on me tightly. \n\n\"Mmm, fuck me baby,\" Ashley moaned. \"Don't tease me.\" \n\n\"But you love it,\" I grinned as I started slowly fucking her again. \n\n\"I wish she could see us right now,\" Ashley moaned and smiled a wicked little grin. \n\n\"Oh yeah?\" I groaned as I teased Ashley with a few shallow strokes using just the tip of my raging cock. \n\n\"Yes, I want her to see that she's been replaced in every way,\" Ashley said as she smiled up at me with her sparkling eyes. \n\n\"She would not be happy,\" I moaned as I thrust my full 8\" inside of Ashley's dripping pussy. \n\n\"Revenge is sweet,\" Ashley giggled as I fucked her hard. \n\n\"And so are you,\" I grinned as I slid my cock out of Ashley's pussy and grabbed her hands and pulled her to her feet. \n\n\"Mmm, what now?\" Ashley smiled. \n\n\"You'll see,\" I moaned as I spun her around and bent her over the bed and moved behind her. I pulled the dress up and pushed it down over her back as I let my cock slip back into her tight, young pussy. \n\n\"Yes, baby,\" Ashley moaned as I thrust my cock deep inside of her. \"Fuck your new wife hard.\" \n\n\"God I love being inside you,\" I groaned low. \n\n\"Fill me up, husband,\" Ashley moaned as I fucked her as I reached down and opened the nightstand drawer where I'd placed the handcuffs earlier. \"I'm yours.\" \n\n\"That's right, you are all mine now,\" I moaned as I grabbed her wrists behind her back and put the cuffs on her. \n\n\"Fuck, yes,\" Ashley moaned and giggled. \n\nI reached up and put my big, strong hands on Ashley's bare shoulders and pulled her slender body back to mine as I pounded her tiny pussy with quick deep thrusts from my hard cock. I could feel Ashley's juices dripping out of her pussy and down onto my cock with each thrust as she let out moan after moan. \n\n\"Harder!\" Ashley groaned as I pulled her body back hard on my raging cock, my balls slapping up against her with each deep thrust. \n\n\"Tell me what you need,\" I growled. \n\n\"Your cock!\" Ashley screamed as I took my right hand off her shoulder and grabbed a handful of her long blonde hair along with the veil and tugged it back hard snapping her neck back. \n\n\"How bad do you need it?\" I spat as I stretched Ashley's pussy with my thick cock and tugged her hair back harder. \n\n\"Badly! So fucking badly!\" Ashley moaned as my cock used her tiny little pussy with ever hard, deep penetrating stroke. \"I'm going to cum!\" she screamed as I felt her pussy gripping down on me and I used every ounce of energy that I had to thrust myself deep inside of her as we exploded together. Ashley screamed as she felt my cum shoot deep inside of her body as I pulled her back to me to fill her with every drop I had. \n\n\"Fuck!\" I moaned loudly as I felt my balls emptying their load into Ashley's hot, steaming pussy. She screamed into the comforter as her tight little pussy gripped down hard on my throbbing cock and milked me for everything I had. \n\n\"Holy fuck,\" Ashley moaned as her climax subsided and I pulled my hard cock free of her dripping wet pussy. I reached down and took the handcuffs off her and then collapsed on the bed next to her. \n\n\"You're amazing,\" I said as I lay on my back on the bed and tried to catch my breath as I looked over at Ashley who was sitting up. \n\n\"So are you, but you've been a little messy,\" Ashley smiled as she looked down at my hard cock covered in both of our juices. \n\n\"That's your fault,\" I smiled. \n\n\"Well then, let me clean that up,\" Ashley said with an evil grin as she reached up behind her head and unpinned my wife's veil. She scrunched the white lace in her hand as she brought it down and wrapped it over my hard cock and slowly slid it up and down my shaft. \n\n\"Oh fucking hell,\" I moaned as the sensation of the lace on my cock sent my brain into overdrive. \n\n\"Does that feel good, baby?\" Ashley grinned as her hand continued to slowly stroke my cock with the lace of my wife's veil. \n\n\"It feels fucking amazing,\" I groaned as I looked up into Ashley's blue eyes. \n\n\"It doesn't look like you're going down at all,\" Ashley giggled as she stroked my manhood with the delicate lace. \n\n\"I think you're just getting me harder,\" I smiled as I watched Ashley. \n\n\"Mmm, good,\" Ashley smiled as she stroked me and I could feel my balls filling up again. The lace felt so damn good as it traced my cock up and down my hard shaft. \n\n\"You're going to make me cum again,\" I moaned. \n\n\"Mmm, already?\" Ashley moaned as she took the veil off my cock and opened it up. She smiled as she folded the veil and then wrapped just a couple of layers of it down around my hard cock like a lace condom and then straddled me. \n\n\"Oh fuck,\" I moaned. \n\n\"So you see where this is going, huh?\" Ashley grinned as I felt her pussy slide down slowly onto the lace covered tip of my cock. \n\n\"Fuck,\" I groaned loudly as Ashley's tight wet pussy inched down my hard shaft. \n\n\"Mmm, this does feel good,\" Ashley moaned as her pussy came down fully on my cock with the lace inside her. \n\n\"You drive me crazy, baby,\" I moaned as I reached up and pulled the corset top of the dress down so I could play with Ashley's firm, young breasts. The moment they were free I squeezed her hard pink nipples as she moaned and rocked her slender body back as she rode me slowly up and down. \n\n\"Fuck, the bitches' veil feels so good in my pussy, baby,\" Ashley moaned. \"I want you to fill me through it.\" \n\n\"I love it when you're bad,\" I groaned as Ashley rode me and I squeezed her hard nipples between my thumbs and forefingers. The sensation of her tight, wet pussy and the lace combined was amazing. The soaked lace clung to my cock as Ashley's pussy glided up and down my shaft faster and faster. \n\n\"God that feels good,\" Ashley whimpered as my hands manhandled her breasts and she grinded her drenched pussy down harder and faster on my cock as she reached out for the headboard to steady herself as she rode me. ",
        "\"Fuck, I'm cumming,\" I growled as the sensation was too much for me and I gave in to the impending explosion by thrusting my cock deep inside of Ashley. \n\n\"Yes, baby!\" Ashley shrieked as she slammed her tight, wet pussy down hard and fast on my cock as it shot load after load of my white hot jizz through my wife's white lace veil and into her hot little box. \n\nI looked up at Ashley as she rode me through her orgasm, her blue eyes locked on my eyes as she moaned and rode me hard for another minute or two until she finally let go of the headboard and fell down onto my chest with my lace covered cock still throbbing in her tight pussy as she moaned and tried to catch her breath. \n\n\"That was so hot,\" I groaned as I wrapped my arms around Ashley's body. \n\n\"I'm glad you liked my surprise,\" Ashley looked up at me with a grin. \"It is not easy to fuck in one of these dresses.\" \n\n\"It was worth it,\" I grinned. \n\n\"I think we destroyed the veil,\" Ashley giggled then softly kissed my chest. \n\n\"That was worth it too.\" I reached down and pushed Ashley's hair from in front of her face as she grinned up at me. \n\n\"How are we possibly going to top this tomorrow?\" Ashley asked with a grin. \n\n\"I guess we'll find out,\" I said with a smile."
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "ashley",
        "revenge",
        "blonde",
        "schoolgirl",
        "cheating",
        "wedding dress",
        "handcuffs",
        "facial",
        "wedding rings",
        "voyerism"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-10"
}
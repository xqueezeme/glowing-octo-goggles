{
    "title": "Lady in Red Ch. 20",
    "pages": [
        "\"I was planning to change the oil in my car. Then I thought that I'd rearrange my sock drawer,\" replied Steve with a frown. \"I guess I could put that off, and make the dinner, but not without a little tweaking. If Lisa's invited, then the President should be happy to invite Jason Hunter.\n\n\"What do you think, Gwen? Will the White House mind if I add to the guest list of a state dinner? One other thing; Jordan Quick is practically a member of this family, so we can't leave her home alone. God only knows what sort of trouble she'd get into!\"\n\n\"So you want to add two more guests to a state dinner for the French President? That sounds reasonable to me,\" agreed Gwen with a chuckle. \"Just don't be upset if they tell us to forget the whole thing. I don't know much about political protocol, but I doubt that high school kids dictate the invitation list for a dinner for heads of state, but I could be wrong. I'll call the White House right now and tell them we want to add a couple people.\"\n\nAshley Summers sat in stunned silence as she watched two of her students discuss attending a state dinner at the White House for the French President, and then asking to alter the invitation list! She listened as Gwen made the call and spent several minutes in conversation.\n\n\"That woman drove a hard bargain. She agreed to adding two invitations, but in exchange, Jordan, Steve, and I have to perform at least one song each. And, we have to dance our 'Lady in Red' signature dance for the guests. Do you think I need to work on my negotiating skills? At least I didn't have to promise the President a dance, although I'd be honored.\"\n\n\"I'll have to call Lisa and let her know about this. She can meet us at the airport. She'll be pleased when she hears that Steve thought to invite Jason. At least we all know where to get our gowns for the evening,\" sighed Paula. \"My life was never this exciting before Gwen met Steve. I can't wait to call and tell Ted that he's going to a state dinner at the White House. That'll cause some talk around the old water cooler at his office! Are we going Saturday morning or Friday night?\"\n\n\"This makes my news about Steve catching up on his courses seem pretty banal,\" admitted Ms. Summers. \"If I hadn't been here, I never would have believed that things like this can happen. We've got four students going to a state dinner at the White House! How cool is that?\"\n\n\"Will I get to French kiss anybody?\" wondered Kate as everyone stood up to leave. \"Will we have French Fries? French toast? Anyone have anything to add?\"\n\nTrue to his word, Steve stayed three hours after school Thursday and Friday. Then he spent the weekend working with Ms. Summers. Late Saturday afternoon Steve took her to dinner at Marsh's Landing. Billy, Charlotte and Gwen met him there.\n\n\"Thanks so much for suggesting this, Steve! I haven't been out to dinner in quite some time. You kids are very kind to hang out with an old teacher. I never thought we'd be so far through the material by this time. If we work tomorrow and after school next week, I think you'll be all caught up.\"\n\n\"Ms. Summers, you're the hottest teacher in the whole school!!\" blurted Billy. \"You look young enough to be a student. We sure don't feel like we're hanging with old folks. You're a real fox!\"\n\nCharlotte turned to Billy in surprise. \"Where did that come from? You're the guy that's too shy to talk to girls and now you're making all kinds of inappropriate remarks to my English teacher? What's gotten into you?\"\n\n\"It's funny what getting shot and almost dying can do to a guy. I don't feel afraid like I used to feel. I spent a lot of time thinking about my life and what I would do differently, if I lived to do it. I decided to be more honest and outgoing, but I apologize to you, Ms. Summers, if I was inappropriate. I was just telling you my opinion.\"\n\n\"I can see where Charlotte might worry about your enthusiastic compliment to a teacher, but I'm also a female. And girls like to hear compliments. I thank you, Billy, for voicing such a high opinion of my charms. Now if I can get some slightly older, single guy to notice me, I'll be all set.\"\n\n\"I don't think that'll be a hard sell,\" laughed Steve. \"Billy was pretty blunt, but he was spot on in his opinion. I can't think of any reason you aren't out on a date every night. You're very easy on the eye; you're smart, have a good job and stay in great shape. We're going to have to keep our eyes open for some lucky guy that we can introduce to you.\"\n\n\"I agree about keeping an eye open for a suitable date for Ms. Summers, but you'd better dial back your obvious appreciation of her charms a little, or the school board will have a whole new issue with you,\" suggested Gwen. \"We all admit our English teacher is hot, but we can't be discussing it in public like this. We've all heard the news reports about predatory teachers and the trouble they get into. Do her a favor. Do not treat her like a regular girl, at least not until we graduate.\"\n\n\"Thank you for that. I do have to maintain a professional relationship with my students, especially the ones that think I'm hot,\" chuckled Ms. Summers. \"I've worked too hard to get my position to lose it over a misunderstanding, or a bad decision. All that being said, I consider you kids to be friends and I appreciate your desire to help my love life, but I think I'd rather handle that myself. Matchmaking is not easy, nor often successful.\"\n\n\"Well, Steve did get Coach to date Laura and they seem to be getting along very well,\" admitted Gwen. \"Of course Laura stated flat out that she was interested in him, so it was a no brainer.\"\n\n\"Which made me qualified for the job,\" laughed Steve. \"Ms. Summers, we're your friends and we'll not cause you any embarrassment. We'll keep our eyes open though.\"\n\nThe next week went quickly for Steve. By Thursday evening, Ashley Summers declared him totally caught up in all of his assignments and tests. Friday evening, the entourage from Sparta headed for Washington D.C. They met Lisa at their gate at the local airport.\n\n\"I received a call from the agency a little while ago. They said that I have the job! They asked when I'd be able to start. I told them I was attending a state dinner for the French President this weekend, but my schedule would be open after that. I only have a couple months left of school for the semester. I could hear the woman's surprise over the phone. Their new model is dining with the President of the United States!\n\n\"I know it's all because of Steve and Gwen and all the amazing stuff they've been doing, but it still feels pretty good. I'm just glad Steve saw Gwen with her nose in a book that day at the mall. Look what it started!\"\n\n\"I knew Gwen was smart the way she played hard to get with Steve,\" asserted Kate. \"She made him work to be her boyfriend. I thought she was nuts for turning him down at the time. I really thought that she should've jumped into bed with him at the mattress place at the mall that day. She'd never been on a date, this amazingly gorgeous hunk asks her out to a dance, and she declines! The results prove that she's way smarter than me.\"\n\n\"I wasn't smart, or playing hard to get. I was petrified. Why would a guy like Steve ask a girl like me to a dance? I thought it might be a bet, or a joke. I still can't believe that he focused in on me like he did and put up with so much to stay with me. I can't really explain it, but I'm sure not going to argue with it. He's my guy now!\" declared Gwen as she clutched Steve's arm to her chest.\n\n\"I was too dumb to realize that Gwen was way out of my league. I was new to the area and thought I'd take a chance. I was just starting to get over my father dying and only having Uncle Joe. When I saw Gwen I knew I had to try. She had me from that first moment I saw her.\"\n\nJordan had been listening closely to the banter. \"You saw her sitting at the mall reading a book? You asked her out and she refused? She'd never even been on a date before and she refused to go to a dance with you? Every girl in the country will be wondering why the hell they weren't the one sitting at that table, reading some dumb book!\"\n\n\"Tell me about it!\" exclaimed Kate. \"I can't stop thinking about that day. I was at the mall, shopping with Mom when we come around the corner and see this amazing guy chatting Gwen up. Then we find out later that she turned down a date with him! I felt like smacking her. But, as I said, she's way smarter than I am. Look how it worked out. The guy's spending his spare time in her bed now. To think I was that close to having Steve for my boyfriend. I'd be the one screaming so loud the neighbors could hear me!\"\n\n\"Not before you're eighteen, and any boy will have to have the same qualities as Steve,\" pointed out Paula with a smile. \"And the screaming has subsided lately and I want it to remain that way.\"\n\n\"The same qualities as Steve? I'll be a virgin forever!\" moaned Kate. \"All I have to do is find a super athletic, great dancing hero that sings, and happens to save lives in his spare time? Just where do you suggest I start looking for this amazing guy, Mom?\"\n\n\"Maybe you should start reading books at the mall?\" suggested Jordan with a grin.\n\nJason was waiting at the hotel when the Anderson party arrived. He was beaming as he shook hands with Steve. \"I'll never live this down! All the other cadets were stunned when they heard I was invited to a state dinner. Then I showed them a picture of Lisa and they really hated me! I'll help save your life anytime if this is how you repay me! It's got to help my career, unless I do something really stupid,\" offered Jason.\n\nSteve had his own room in the luxury hotel not far from the White House. Ted made it abundantly clear that there would be no visiting men's rooms by any of his daughters, or Jordan since she was living under his roof. No one argued the point.\n\nJordan, Steve, and Gwen had to rehearse in the afternoon with the orchestra that would be playing at the dinner. Steve had never heard such good musicians. He felt a little intimidated, but thought about Billy's statement. Being shot does change a man's perspective. He'd do his best and let the chips fall where they may.\n\nThe entire entourage was driven to the White House well before the actual dinner. Guests would attend a cocktail hour before dinner. Ted had strongly warned his entire group that there would be no drinking of alcohol. He demanded that everyone be alert and polite. This was the White House, after all!\n\nSteve was quickly separated from Gwen and the others. He mentally compared the male guests to vultures as they circled Jordan, Lisa, Kate, and Gwen. Jason hung pretty close to Lisa. The women were absolutely beautiful in gowns of Amber's design. Paula surprised Steve with how young and attractive she appeared. It was obvious from whom the Anderson sisters inherited their good looks.\n\nSteve found himself being introduced to ladies of all ages. They all seemed to be eager to speak to him. Many used their phones to get pictures of Steve standing with them. He quickly realized that he would never remember the names of the many women to whom he had been introduced, so he decided to focus on the important ones, and they would be French.\n\nThen there was silence and President Hanson and his wife were announced, along with the President D'Anjou, his wife and daughter. The President personally introduced President D'Anjou to his guests, who were mostly politicians, with a few A-list celebrities tossed into the mix. Steve found his way back to be with Gwen and her family when the President reached them.\n\nSteve was impressed that the President remembered all the names in his group. Then he noticed a tall man with a thing in his ear standing behind the president. He would whisper to the president quite often. President Hanson even hugged Gwen and congratulated her on Steve's return and recovery. Then he shook Steve's hand and introduced him to President D'Anjou, his wife Colette, and daughter Michelle.\n\nSteve stunned Gwen when he spoke fluent French to President D'Anjou and his family. It was obvious that the D'Anjou's daughter and wife were very pleased that Steve was able to speak French. Once their group was away from the President, Paula, Gwen, Jordan, and Kate were all over Steve.\n\n\"You never told me you spoke French!\" stated Gwen with some annoyance. \"Why do you keep trying to surprise, or embarrass me? How hard would it have been to tell me that you spoke Farsi and French? Are there any other languages you know that you're not telling me? Look at your face! There are, aren't there?\"\n\n\"I do have a pretty good command of Russian, and I know some Spanish,\" admitted Steve reluctantly. \"I was just trying to surprise you. I thought you'd be proud of me for being able to speak to them in French. I didn't realize that I'd upset you. I apologize.\"\n\n\"Russian? When was I going to find that out? When we got to Moscow? You keep hiding things from me and it's embarrassing. You never said that you could sing, play the piano, or the guitar. Tell me now; are there any more instruments that you play?\" demanded Gwen.\n\n\"I do alright on the drums, but I haven't played them in over a year. I don't like to sound like I'm a pompous ass by telling you the things I can do. I thought I was being modest.\"\n\n\"I'm pissed at you, Steve! I won't let it ruin the evening, but your habit of keeping things from me is going to be a very real problem if you don't stop doing it right now. Either you trust me or you don't. Secrets are not good for a relationship,\" stated Gwen with emotion before she turned and walked away.\n\n\"Gwen's right, you know,\" scolded Jordan after Gwen left. \"You don't play tricks like that on family and loved ones. I'm pissed, too, and I'm not your girlfriend. You knew we were going to meet French people and you neglected to mention that you speak French. That sucks.\"\n\n\"I thought it was kind of cool, but I guess from the look that Mom's giving me, I was the only one,\" added Kate. \"Gwen will get over it pretty fast, but she sure doesn't like not knowing things about you, and then being surprised in public situations. I can understand that.\"\n\nEventually it was announced that the heads of state were heading downstairs and a formal receiving line would begin. Steve was worried about how to proceed. Should he tag along with Gwen's family when she was so upset with him, or just go down alone? Then he felt an arm slide against his hand.\n\n\"Just because I'm a little pissed at you it doesn't mean that I don't love you. It certainly doesn't mean that I'm going to leave you alone with all of these stars and politician's daughters looking at you like lions look at raw meat,\" explained Gwen as she joined Steve to head down the stairs.\n\nSteve and Gwen were shown their table, where Gwen's family had already found their places. Steve was going to sit between Gwen and Jordan. When the president and his guests took their seats, everyone else sat down. If distance from the head table indicated importance, the Anderson table was the bottom of the totem pole, as they were farther from the head table than any other group.\n\n\"It doesn't look like we rate too high in the pecking order, but we're here, and that's still way cool!\" declared Kate. \"I shook the President's hand. Not many kids can say that!\"\n\nThere were a couple short speeches after the five course meal was finished. Both presidents were gracious in their praise for the other. Steve, Gwen, and Jordan were led out of the room. They quickly prepared for their performances. Jordan went first and sang her biggest hit. Gwen and Steve became more nervous when they heard how incredible Jordan sounded.\n\n\"My God! She can sing! We should have had her go last. That's going to be a very hard act to follow. I hope I don't screw this up. I'm glad you're going next,\" admitted Gwen.\n\nSteve was a little nervous when he stepped on the stage with the orchestra. He glanced their way and then sat at the piano. President D'Anjou's daughter, Michelle, had requested that he sing the Elvis song he had performed to Gwen the first time he was on live TV. Once he started playing, Steve looked at his audience and then focused on Michelle D'Anjou. By the time he made it past 'Wise men say only fools rush in' she gave him a huge smile and then started wiping tears of joy from her eyes. Steve finished to a round of loud applause, bowed, and left the stage.\n\n\"Thanks a lot! That's even harder to follow!\" complained Gwen as she passed Steve to take her place on the stage. Steve turned to watch her from the wings. The orchestra began and Gwen stood radiantly waiting for her place to begin. Everyone knew the song 'My Heart Will Go On' from the movie 'Titanic', but never heard it the way Gwen sang it that evening.\n\nSteve was spellbound as he watched and listened to Gwen perform. He felt himself becoming very emotional. How did he find such a talented, incredible woman? He felt humbled and extremely grateful.\n\nGwen poured everything she had into her song after hearing Jordan and Steve. She was determined to not be outdone by the other great performances. Paula and Kate sat in awe as Gwen delivered an amazing effort. They had heard her sing many times, but never heard her deliver a song with the emotion and range she demonstrated that evening in Washington.\n\nWhen Gwen finished, the audience was silent for a few seconds and then broke into a standing ovation. Gwen smiled and bowed a couple times in appreciation. Still the applause continued. Blushing, Gwen bowed once again and then left the stage.\n\nJordan had joined Steve as he listened to Gwen from backstage. Tears were streaming down Jordan's cheeks by the time Gwen reached them. Gwen hugged Steve and then hugged Jordan. Then the girls each took one of Steve's hands and headed back to their table. The applause had died down, but began again when the trio came back into the state dining room. Steve and Jordan stepped away from Gwen and applauded her along with the rest of the audience. Gwen blushed again and then went over to hug Lisa, Kate, Paula and Ted. Finally it was quiet enough for the orchestra to start playing.\n\nSteve found himself dancing the first dance with Michelle D'Anjou. She was a very pretty dark haired girl of seventeen. She danced gracefully and Steve enjoyed the dance tremendously. They spoke in French as they danced around the room, oblivious to cameras and reporters. It was the first of several dances Steve would enjoy with the young French beauty.\n\n\"My daughter is very fond of you,\" smiled Colette D'Anjou as he led her to the dance floor. \"She's been following your exploits, Steve. You were all she could talk about for the past week. After she danced with you, she told me that she could die happy. She told me that she thinks you're a very strong, handsome American. I have to agree.\n\n\"Thank you for coming tonight, and for singing. You've made her a very happy girl, which makes me a very happy mother. Your girlfriend was surprised when you spoke French to us at the reception. I could tell. Were you able to placate her ire? It isn't wise to surprise your lover with unknown skills in public situations. I trust that she made that clear to you?\"\n\n\"Madam, you must be a mind reader. She was annoyed. She set me straight and then forgave me. She's pretty special.\"\n\n\"You seem to have surrounded yourself with beautiful women. Mother, daughters, and even the troubled Jordan Quick, all have that look when you're near them. Now my daughter has the same look, and I will as well, if this dance doesn't end soon.\"\n\nSteve was kept busy dancing all evening. He thought it amusing that some guy with an earpiece would constantly suggest who Steve should ask next. It was apparent that someone was paying close attention to the guests and their enjoyment of the night. He escorted politicians' daughters and wives out to the floor, as well as a few of the daughters of some large donors to the president's campaign.",
        "Gwen was in even greater demand. Men of all ages waited for their opportunity to dance with her. Steve finally found himself with Jordan and he whisked her onto the floor.\n\n\"This has been the best night of my life! I'm so glad that Clyde knew you and Gwen and talked me into going with you guys. I'm getting some good press and my career is back on track. Better than that is the fact that my head is finally on straight and I have a couple of amazing friends that I love. I never realized it until tonight, but you and Gwen are the first people I've ever loved, beside my mother and she ruined that. It's okay that I love you, isn't it?\"\n\n\"Jordan, it's my honor to love and be loved by such a talented, beautiful, accomplished woman. We'll never let anything happen to our friendship, okay? I'll do about anything for a friend.\"\n\n\"Anything, but the one thing I would like the most from you, but that's okay. I love Gwen and respect her way too much to ever try to anything that would hurt her. I feel like we're sisters now, right down to being crazy about her boyfriend. Thanks for everything,\" whispered Jordan as she reached up to briefly kiss Steve's lips as the song ended.\n\nFinally, Gwen and Steve managed to find each other and the orchestra quickly began playing 'Lady in Red'. Steve was unable to take his eyes off Gwen's as he led her around the dance floor. For the second dance in a row, Steve received a gentle kiss as the song ended.\n\nGwen was smiling as she and Steve received some applause. Soon President Hanson and President D'Anjou were at their side, congratulating them. Steve responded in French and President Hanson noticed.\n\n\"Steve is fluent in English, Farsi, French, Russian and even speaks some Spanish,\" smiled Gwen as she arched an eyebrow at Steve. \"He's sometimes hesitant to talk about his amazing accomplishments, but he's going to be working for you next year, so you may as well know what a rare treasure you'll have on your payroll. The Naval Academy is getting its money's worth with Steve.\"\n\nThe music began and Gwen was escorted to the dance floor by President Hanson. Steve was politely directed toward the first lady, so he quickly asked her to dance. She gave him a big smile and joined him on the floor.\n\n\"Young man, my husband has mentioned you a few times, always favorably. I've seen most of the videos of you and your adventures. I understand that you're branching out into music and television. Your performance this evening was fantastic, by the way.\n\n\"You'll be attending the Naval Academy, so my husband will be able to call on you if we have need for a talented singer or very good dancer at one of these affairs. President D'Anjou isn't the only world leader with a teenage daughter. May I assume that you would be willing to help out your country by escorting a young lady at one of these events? I'll speak to your girlfriend about it, if you're willing. It would make my job so much easier if I know you're close by and willing to serve your country in such a difficult manner.\"\n\nSteve managed to dance with Kate shortly after his dance with the first lady. \"Did you see me dance with that senator? Then some rich guy's son got a little too close and I had to tell him to back off. I was surprised that you missed it since it seems like you're always around when some jerk tries to take liberties with me. I saw you ready to back up Dad and Uncle Will that night those guys grabbed Stephanie and me. You're a great big brother!\" finished Kate as she reached up and kissed Steve lightly on the lips.\n\nSteve left Kate with Ted and then escorted her mother out to the dance floor. \"Paula, you are absolutely stunning! Ted has to be extremely proud of his family tonight. His has the best looking ladies here. I can see why he fell in love with you.\"\n\n\"You should be proud, too. Look at all you've accomplished in the few months you've been in Sparta. You've changed our lives, as well as saved them a few times. You've drawn Gwen out of her shell and she's beginning to reach her potential. She sang so well tonight! I'm so proud of her for so many reasons, but the biggest reason is what you and Gwen have done together.\n\n\"I trust you with my daughter. I don't have to tell you that our girls mean everything to us. To allow Gwen to sleep with you is a huge compliment to you both. We never had a son, but you're everything we'd want him to be. We couldn't be prouder of you, even if you were our own son. I think you know how I feel about you. It's part motherly and part ... well, not very motherly. I'm so happy for Gwen, for you, and for us. Lisa's modeling opportunity would never have happened if not for you. She knows that and she loves you dearly. You already know how she feels about you. Thanks for being so honorable and kind to my daughters, and to me. I'm just so happy for my family and for having you part of it!\"\n\nA few dances later, Steve found himself being directed to Michelle D'Anjou for another dance. She beamed as he took her in his arms. \"Would it be possible for you and Gwen to come to Paris sometime soon? We have many events we could invite you to attend if you could make it. I could send you a list and you could select a date and event that you could attend. I asked my parents and they said they would love to have you come. I would show you Paris and show you off to my friends. We've been watching the videos of the amazing things you have done. We all love your singing and dancing, too. I'll be watching the video of this very dance when I get back home. You are such a good dancer!\"\n\n\"I can't be certain if we can visit, but I'll speak to Gwen and we'll do our very best. We'd be honored to be your guests in Paris! It's so nice of you to invite us. Please send me the list of dates, and thank your parents for us,\" insisted Steve.\n\nSteve managed to pry Lisa away from Jason for a dance near the end of the evening. \"Steve, he's such a great guy. He wants me to be his guest for commencement in the spring. I think I'm falling for him. He likes you and doesn't seem jealous that I love you so much. Do you mind if I fall in love with him?\"\n\n\"Part of me hates to give you up, but all of me wants you to be as happy as possible. He seems like the real deal, he's from a good family, he'll soon be an officer in the US Army, and he's head over heels in love with you. If he's the guy, I'll be delighted for you. I'll be holding your baby daughters in my arms someday. I know they'll be beautiful and wrap me around their little fingers. Just don't expect me to change diapers!\"\n\n\"Steve, we're not anywhere near planning a family, or even getting married! He's got a lot of work in front of him to prove he's the one for me, but he's got a good start. His career and my schooling and modeling will keep us apart a lot. But you know all about that with Gwen. You two will be a continent apart for a long time. She'll never betray you, Steve. You know that!\"\n\nSteve managed to claim Gwen for the last dance of the night.\"We've been invited to Paris by Michelle. She'd like us to attend a state event as her guests and then show us Paris.\"\n\n\"I bet she'd like to show you more than Paris,\" suggested Gwen. \"She doesn't conceal her admiration for you very well. But then, I've been invited to several hotel rooms and a few cities myself this evening. A few months ago I couldn't get a date and now I have rich and powerful men trying to get into my little panties. I'm afraid I'm becoming jaded about Washington already. Why would I be interested in any of those guys when I have you?\"\n\n\"You wouldn't! Just don't forget that. We're both going to have temptations thrown our way, especially when our TV shows air and our fifteen minutes of fame peaks. Then there's the fact that you're the most beautiful woman I've ever seen,\" observed Steve sincerely.\n\nGwen smiled and moved closer to Steve and placed her head on his shoulder. She stayed that way for the rest of the dance and when it ended, she kissed him passionately.\n\nThe ride back to the hotel was a happy occasion with everyone recounting what they enjoyed the most about the evening. \"I can now say that I danced with the President of the United States and I kissed my boyfriend in the White House,\" boasted Gwen.\n\n\"Not to burst your bubble, Gwen, but we all kissed your boyfriend in the White House. Even your mom gave him a quick smack,\" laughed Jordan. \"Not to mention a few debutantes and femme fatales!\"\n\nAt the hotel, Jason and Lisa told Ted and Paula that they were going to spend a little time in the hotel bar, and then headed off in that direction. As the rest of the group made their way to the elevators, Gwen noticed two men and a woman leave the elevator as she approached it. The lady had tears running down her cheeks, while the two men remained very close behind her as she slowly walked toward the front door.\n\nGwen heard one of the men speak to the lady. It wasn't in English, but the lady sobbed as she increased her pace. Then Steve suddenly stepped in front of the woman, barring her progress. He began speaking to her, but not in English! Gwen found it surprising, but not nearly as surprising as the reaction by the woman's two companions.\n\nThe big man on the woman's left suddenly lifted a gun he had managed to conceal from everyone behind the woman's back. Then he swung it toward Steve! The gun exploded, but not before Steve had reacted by striking the man's arm as he brought the weapon into play. Gwen heard a familiar, but sickening thud as the second man grunted and collapsed. Steve again struck the gunman's arm at the wrist and the weapon slid across the marble floor.\n\nKate and Paula screamed as they watched in horror. Jordan stepped up to the frightened woman and helped support her as she trembled and shook. Meanwhile, Steve and the big gunman were engaged in titanic struggle.\n\nSteve had observed the same things that Gwen had, but he had the advantage of understanding what the man told the lady that upset her so badly. He had threatened to kill her if she made any sudden moves. It was immediately obvious that the woman was being forced against her will, so Steve stepped in front of her and spoke to her in Russian.\n\n\"Are you alright, Ma'am? Are these men bothering you?\" was as far as he got before the larger man swung his weapon toward Steve. Luckily Steve's friends were on the man's left. Steve quickly acted to prevent the weapon from being brought to bear. He stiff-armed the man's wrist just before the gun fired, sending a bullet into the second man. Steve immediately hammered the wrist of the gunman a second time and the Makarov was sent sliding across the floor. Then the man struck Steve in the eye with his other hand.\n\nSteve staggered back slightly and shook his head to clear it. The man advanced and Steve slammed a fist into the man's chest. The other man backed off a little and eyed Steve before swinging a leg at him. Steve stepped close, rendering the kick fairly harmless. As he stepped in, Steve brought a hard right up into the man's chin. That blow would have ended most fights, but it only served to enrage his opponent.\n\nSteve took two quick lefts to his head, before covering and backing up. The two men circled for a few seconds. Then the man feinted with his right and again brought his left around. Steve had been rocked by the two quick lefts the man had delivered and knew he didn't want to absorb another, so he again stepped in close to his adversary. The left hand bounced off his shoulder as Steve drove his right into the man's throat as hard as he could. Amazingly, the man did not go down as Steve expected! He did clutch his throat and stagger back.\n\nSteve knew that he needed to end the battle while he still could. He was facing a well trained, very dangerous opponent, so he held nothing back as his right leg swung around and his heel connected with the big man's jaw. The man was unconscious before he hit the floor. Then Steve became aware of his surroundings and the panic the shooting and struggle had generated.\n\nHe wiped the blood from his nose and mouth with the back of his hand and turned to see if Gwen and her family were okay. Gwen was suddenly in front of him with some sort of cloth that she placed against his nose. Then she took his battered hand and led him to a stuffed chair and made him sit down.\n\nPaula, Ted, and Kate had witnessed the entire event and stood in shock, unmoving and speechless. Jordan led the crying woman Steve had rescued from the two thugs to another chair and coaxed her to take a seat. Satisfied that Steve was alright, Gwen returned to the man that had been shot. He was stretched out on the floor moaning as blood began to pool under him.\n\nShe kneeled down, opened the man's shirt and looked closely at the wound. She quickly determined that the man was in serious trouble as she looked around for something to use as a bandage. That was when a bellhop approached her with a large first aid kit. Wasting no time, she had the hop assist her in pressing bandages against the wound and then run wrap around his torso to hold it in place. As she finished, numerous emergency sirens could be heard approaching the hotel.\n\nTwo policemen burst into the lobby with guns drawn, carefully taking in the scene. One approached the prone man by Gwen, while the other one held his gun on Steve as he ordered him down on the floor.\n\nSteve raised his arms and dropped to his knees. Then he laid face down with his hands behind his back. He was quickly cuffed. Paramedics suddenly appeared and replaced Gwen as they prepared the wounded man for transport. Two more paramedics began to treat the big man that Steve had stretched out on the marble floor.\n\nSteve was pulled to his feet as Gwen rushed over to protest the actions of the police. \"He's not a criminal! He just saved this woman's life! You've got the wrong guy!\"\n\n\"Gwen, stop worrying about me and warn those paramedics about that guy. If they bring him around, he'll be dangerous as hell. He should be cuffed first.\"\n\nEven as Steve spoke, the big man responded to the care of the paramedics by sitting up, although they urged him to remain on the floor. The man reminded Steve of a wounded bull as he swung his head around trying to make sense of his situation. Suddenly he focused on the woman Jordan had been assisting. He lunged to his feet, cursed in Russian, and rushed toward the woman.\n\nThe police had been caught by surprise. They were reluctant to fire their weapons now with so many people in such close proximity. As he neared the terrified lady, Steve's heel once again connected with the man's head.\n\n\"Jesus!\" exclaimed one of the cops as the big man once again dropped to the floor. \"You have your hands cuffed behind your back! How in hell could you do that?\"\n\nThe unconscious man was manacled and shackled before he was treated again. Police officers stood watch with tasers ready as Paramedics again went to work on the him. Before they managed to strap him to the gurney, the officers did have to use their tasers on him.\n\nBy this time, the lobby was crammed with police and a few reporters. Then some men wearing FBI jackets appeared on the scene, along with two important looking civilians. The civilians were a middle aged man and a young woman. They rushed to the side of the weeping lady that Jordan had been helping.\n\nThey began asking questions in Russian, but the woman was too shaken to respond beyond sobbing harder. \"She was being taken outside by two men when we met her in the lobby. She was obviously in distress and the bigger man threatened to kill her if she didn't cooperate. I persuaded the men to leave her alone. That's pretty much what happened,\" finished Steve in fluent Russian.\n\n\"If you helped her, why are you handcuffed? Did you shoot the one man and beat the other? Who are you? Are you Russian?\" demanded the man.\n\n\"Father! He's Steve Hammer! The American that shot those terrorists in his school!\" exclaimed the young woman excitedly. \"He's an American hero! This girl is 'The Lady in Red'! They are both heroes in America.\"\n\nGwen had been cleaning the blood from Steve's face as she waited for the facts to be sorted out by the police. She didn't understand what Steve told the couple, but she understood Steve's name when the girl recognized him. Then the girl turned to Gwen.\n\n\"It's an honor to meet 'The Lady in Red', Ms. Anderson,\" stated the young woman in flawless English. \"It appears that you two have somehow saved my mother's life. The two men trying to abduct my mother were probably Chechen rebels.\"\n\nA police officer approached Steve with an FBI agent behind him. \"I apologize, Mr. Hammer, for the misunderstanding. We had a situation here and our men felt it was better to err on the side of caution. I'll un-cuff you right now.\"\n\n\"The side of caution? That maniac wasn't restrained when he jumped up and tried to attack this lady for the second time. With his hands cuffed behind his back, Steve was still the only man here with the guts, reflexes, and the ability to keep the creep from hurting this woman. He just came from a state dinner with the President of the United States! He's wearing a tuxedo! He saved this lady from rebel terrorists and he wound up handcuffed by the police. Then he saved her again!\" ranted Gwen as her indignation at the treatment of her boyfriend increased.\n\n\"Gwen! These are the good guys. They didn't know what had happened when they arrived. They acted in the best interests of everyone concerned. Thanks, officer. That feels better.\"\n\nEveryone in the Anderson entourage had to give statements to the FBI and the D.C. police about what they witnessed. It was after 3 AM before they were allowed to return to their rooms. Jason and Lisa had rejoined the group shortly after the police had arrived. Jason shook his head as he looked at Steve.\n\n\"You're one butt ugly, pretty boy,\" he laughed. \"Every time we meet, there's blood all over your face, knots on your head, and at least one eye all black and sore looking. I just don't know what Gwen sees in you.\"\n\n\"Your dad and I think you'd better take care of that guy of yours tonight,\" whispered Paula to Gwen as they walked down the hall to their rooms. \"You seem to spend a lot of time taking care of him, but he's worth it!\"\n\nSteve woke up a few hours later with Gwen snuggled next to him. She had insisted that he shower before turning in and she was very thorough in getting all the blood off his body. Tired and naked, they tumbled into bed and quickly fell asleep. The phone in his room rang and Steve answered it as Gwen roused from a deep sleep.\n\n\"Steve? Mom said to let you know that we're all meeting downstairs for breakfast in half an hour. She also said that she doesn't want Gwen screaming in the hotel, so save your appetite for the breakfast bar. Actually, I just made that part up!\" laughed Kate. \"See you guys in half an hour.\"\n\nSteve had donned a pair of slacks and was looking for his shirt when he heard a knock on the door. Thinking it was probably Kate, or Jordan, he opened it. There was a gasp as he found himself looking at the daughter of the Russian woman he had assisted the previous evening. Behind her were two very capable looking men in dark suits.\n\n\"Please wait in the hall, gentlemen. I'll only be a few minutes,\" promised the young woman as she stepped into Steve's room. \"I see that you carry some bruises from your battle with that awful man. Your eye is almost black and your have marks on your torso from his fists.\n\n\"I came here this morning to personally thank you for saving my mother. I'm Varvara Suchkov. My father, Anatoly, is a deputy ambassador here in Washington. He used to be in the military and was stationed in Chechnya. He was in command of an outpost not far from the border with Russia. The Chechen Rebels are trying to avenge any and all transgressions they believe they have suffered at the hands of Russia over the last hundred years. They have abducted, tortured and killed family and friends of Russian leaders and military over the past several years.",
        "\"They told my mother, Galina, that they were going to do unspeakable things to her, then behead her and send her head to my father. You bravely prevented that from happening. My father, mother, and I are very grateful. We'd like to have you as our guests for dinner at the Russian Embassy.\"\n\nGwen had quietly entered the room from the bathroom as Varvara was speaking to Steve. Varvara happened to notice Gwen standing to the side and smiled at her. Gwen had not known there was anyone with them and had come out to finish dressing. She was wearing only a bra and panties.\n\n\"Your lady friend is included, of course. She's very lovely. You are a lucky man to have such a beautiful lover!\"\n\nGwen blushed at the term 'lover' but stepped next to Steve and smiled. \"You are very gracious! We are leaving Washington shortly, but perhaps sometime in the future? We have been doing a lot of traveling lately and may be back before too long. Can we exchange contact numbers and email addresses? We're hoping to visit Paris this year and we might layover in Washington. If we do, we'll try to get together. Please thank your parents for us.\"\n\nAfter Varvara left, Gwen wrapped her arms around Steve's neck and asked, \"Doesn't it seem odd that she thinks that we're 'lovers', but we've never had sex, at least not completely? How are we going to remedy that situation?\"\n\n\"I hear that Paris is lovely in the springtime,\" replied Steve as he cupped Gwen's butt cheeks and pulled her close. \"I'm thinking we should visit Michelle and take care of our embarrassing problems with virginity in the City of Light.\"\n\n\"I like the way you think! That's so romantic! It makes the waiting actually seem to make sense. When we get home, I'm going to check our schedules and see when we can go. If we stay at your French girlfriend's castle or whatever they live in, we'll only have to spring for airfare.\"\n\nPaula noticed how radiant Gwen was as she and Steve sat down for breakfast. \"I'm almost afraid to ask, but do you look especially happy this morning? Steve has the makings of a shiner and you have a smile that lights up the place.\"\n\n\"Well, we were thinking about going to Paris in the spring, if you must know, Mother,\" laughed Gwen. \"We were invited by the first family of France to visit and attend any of a number of events that constantly happen in government. It would be a very romantic trip.\"\n\n\"Oh, yeah!\" blurted Kate. \"Romantic! Like a trial honeymoon romantic? I guess there's no sense asking if I can go, too. Those French guys seem to like me pretty well. At least they did last night at that dinner.\"\n\n\"We'll have plenty of time to discuss that when we get home,\" suggested Paula. \"You two probably haven't read the papers or watched any TV this morning. I have a couple papers here with me. Look at the headlines.\"\n\nGwen picked up the first paper her mother handed to her. 'Hammer Time!' was in bold print over a picture of Steve with blood on his face. The second paper had 'Nailed by Hammer!' in large letters over a picture of the unconscious man with whom Steve fought.\n\n\"This story made the networks this morning. Your favorite reporter, Bill Hardy, was here a little while ago. He was asking where you two were. I told him that you were in the bathroom and that Steve was on his way down to join us. I don't like the guy any better than you do,\" admitted Paula.\n\n\"I can't believe the way you fought that bad guy!\" chimed in Kate. \"He was a big, tough guy and you mopped the floor with his sorry butt! When you kicked him in the head with your hands cuffed behind your back, I thought the police were going to crap their pants. If you hadn't taken that guy out again, he would have badly hurt or killed that lady right in front of everyone. You were so cool!\"\n\nThe group was in the middle of breakfast when Bill Hardy approached their table with a cameraman and interrupted Steve as he was speaking to Jason. \"So how did you know that man was a threat to the deputy Russian ambassador's wife? Did you have to be so rough? I understand that he's suffered a broken jaw and needs facial surgery. You're involved in a lot of violent acts.\"\n\n\"We're having breakfast and you were NOT invited to join us,\" stated Gwen coldly. \"Please leave right now.\"\n\n\"You've got a lot of nerve for a high school kid!\" snapped Hardy. \"I can make or break you, so you'd better learn to keep your mouth shut unless I ask you a question. I'm ready to do an interview right now. I may not be here in ten minutes.\"\n\nJason knew instantly that Steve would take strong offense to Hardy's treatment of Gwen and jumped to his feet just in time to place himself between Steve and Hardy. \"Not a good idea, Steve! He's got it coming, but it'll ruin you with the Academy! You've got to learn to never let assholes get under your skin.\"\n\nAfter stopping Steve's advance, Jason turned to Hardy. \"You, Sir, are a complete asshole. Excuse my language ladies. You are interrupting what was a very pleasant breakfast. If you don't leave us immediately, I'll call the manager and insist that you be removed.\"\n\n\"Do you know who you're talking to?\" demanded Hardy. \"I'm the fucking anchor for CBC! You can't have me removed, but I can destroy your career, once I find out who the hell you are!\"\n\nBy that time the hotel's manager appeared next to Jason and asked, \"Is there a problem, Gentlemen?\"\n\n\"My group is trying to enjoy a leisurely breakfast with friends and family. Mr. Hardy is neither invited, nor wanted. He is cursing in front of ladies and minors and pretty much ruining our enjoyment of our meal,\" stated Jason smoothly. \"Either you remove him immediately, or be assured that we'll leave this hotel as soon as possible, and we'll never return. The choice is yours.\"\n\n\"Mr. Hardy, I have to ask you to please leave these fine people alone while they have breakfast. This hotel will not allow anyone to insult or badger our guests,\" stated the manager emphatically as he nodded to hotel security.\n\nHardy started to protest, but he was quickly hustled out of the dining area by the two security men while the manager offered his apologies. \"I'm sorry this happened. Breakfast will be on the hotel this morning. Please consider using our services again when you are in our city.\"\n\n\"Sir, you've just gained us as loyal customers for life!\" effused Gwen. \"I'm serious about that. I know Hardy can cause you trouble, but you did the right thing and we appreciate your efforts. I think we may find ourselves in this city quite a few times in the future and this'll be our hotel when we are. Steve's going to be a Midshipman in the fall, so he won't be far away and if he's nearby, I'll be visiting on a regular basis. Thanks so much!\"\n\n\"Gwen, did you see how quickly Jason stepped in and prevented Steve from getting into trouble with that awful reporter? He's another guy that thinks and acts fast. I thought he handled that situation perfectly,\" stated Lisa proudly.\n\n\"Lisa, he's a really good guy and he did keep Steve from getting into trouble. Steve has to learn he can't muscle every guy that insults me, or my family. Thanks so much, Jason!\"\n\nSeveral hours later, as the Andersons, Jordan, and Steve were boarding their flight home, Kate suddenly turned to Steve. \"If the pilot has a heart attack or something, is it safe to assume that you know how to land this jet?\""
    ],
    "authorname": "Harddaysknight",
    "tags": [
        "state dinner",
        "french",
        "french president",
        "president",
        "chechen",
        "hotel",
        "first lady",
        "diplomat"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/lady-in-red-ch-20"
}
{
    "title": "Incall with a Succubus",
    "pages": [
        "Jack Newman checked the house number against the address on the card. It was the third time he'd done it since climbing the small flight of steps that led up to the front door. He knew it was nerves. He'd never done this before; had never even considered it.\n\nHe reached up to push the doorbell and his finger stopped just before pressing the button.\n\nHe checked the address on the card again. Just to make sure.\n\nHe looked up and down the street. There was no one around. Bridgwater was a quiet residential area, a little way out from the centre of town. The row of immaculate town houses extended up the hill in an unbroken terrace. It was a nice neighbourhood. Jack had considered buying a house here for his daughter once she graduated from university.\n\nHe reached for the bell again. Once again his finger stopped just before the button.\n\nCome on. This was ridiculous.\n\nHe jabbed his finger forward. He heard the far off chimes of a bell somewhere deep inside the house.\n\nNow he'd done it. Too late to back out now.\n\n*****\n\n\"Don't you think you were a little harsh on Susan back there?\" Kimberly Yeovil said as they walked along a corridor in the Houses of Parliament. \"Her heart is in the right place.\"\n\n\"Her suggestion was impractical,\" Jack replied. \"People don't need dreams and idealism; they need to be given the means to improve their own lives.\"\n\n\"I know, but you didn't have to cut her down so forcefully.\"\n\nNo he didn't, Jack thought. Susan was one of his junior assistants. She was young, eager and very intelligent. Jack just hated to see talent wasted in woolly pie-in-the-sky thinking. The smaller policies might not catch the headlines, but they stood a better chance of positively impacting people's lives.\n\n\"Could I have a quiet word?\" Kimberly said once they reached his office.\n\n\"Of course,\" Jack replied.\n\nHe followed the Deputy Chief Whip into his office. Kimberly closed the door after him\n\n\"You're a good man and a fine MP Jack, but I worry about you,\" Kimberly said, sitting down behind his desk. \"We all have needs whether we realise it or not. What happened was tragic and I can understand why you'd want to lose yourself in your work, but I've seen the results of too many good people denying their basic natures. They become irritable and isolated, or they take reckless risks and get found out and destroyed by the tabloids.\"\n\nHe reached over and handed Jack a small white card. Jack read it and looked up at Kimberly in surprise.\n\n\"Are you serious?\" he asked. \"Isn't this one of your reckless risks? What if the papers found out? They'd have a field day.\"\n\n\"They won't. She's very discreet.\"\n\nJack stared at Kimberly, looking for the slightest trace that this was a joke. There was none.\n\n\"She's special. Have fun.\"\n\n*****\n\nJack fidgeted nervously on the doorstep. This was a mistake. He shouldn't be here. What if someone saw and recognised him?\n\nJack was about to bolt when the door swung open in front of him. Revealed in the doorway was a strikingly beautiful girl. Her black hair was cut short in a stylish bob, framing an elegant, enigmatic face. She was very attractive, but also aloof, like she'd been carved from marble by a master artisan. She was wrapped in a white fur coat and inexplicably was wearing large black sunglasses even though it was night time. She reminded Jack of chic actresses from French movies.\n\n\"Nicole?\" Jack asked.\n\n\"Yes, and you must be Mr Newman. Please come in.\"\n\nJack entered and Nicole closed the door behind him. As she took his coat she came close enough for Jack to smell her perfume. He hadn't encountered this fragrance before. It was exotic, yet subtle enough to tantalise rather than overpower him.\n\n\"Would you like a drink?\" Nicole asked. Her voice held the faint trace of a foreign accent. Not French though, maybe Eastern European.\n\nHis mouth did feel a little dry. \"I wouldn't say no to a glass of red wine, as long as it's not too much trouble.\"\n\n\"No trouble at all,\" Nicole said. She smiled and beckoned him to follow.\n\nJack was a little surprised at how ordinary her house looked. It was well-kept and not that much different from most other houses he'd visited. They entered a spacious, modern kitchen and Nicole poured him a glass of wine. He took the first gulp a little too fast and it felt like a hard pebble in his dry throat.\n\n\"You're not drinking?\" he asked, noticing she hadn't poured herself a glass.\n\nNicole shook her head. \"I don't drink wine,\" she said.\n\nJack took another swallow of wine, this time a sip. The wine was better than he expected. It was sweet and had a slightly fragrant bouquet that made him think of leaves falling in autumn.\n\n\"So what... er... happens now?\" he said.\n\nNicole smiled. Her moist red lips parted slightly to reveal her white teeth.\n\n\"Whatever you wish,\" she said, \"within reason.\"\n\nJack took another sip. He nervously dabbed his lips with his tongue. A host of different emotions and desires were charging back and forth across his body.\n\n\"We don't have to get started right away,\" Nicole said. \"We can talk for a while if it would make you feel more comfortable. I don't believe in running a meter.\"\n\n\"Yes... thanks...\" Jack said. \"I'm sorry. I haven't done this before.\"\n\n\"That's okay,\" Nicole smiled warmly. \"It's the first time for a lot of my new clients. Think of this as harmless fun between consenting adults and those nerves will go away in no time.\"\n\n\"I wish I could,\" Jack said. \"The guilt keeps getting in the way.\"\n\n\"A conscience, in a politician, I would have thought that was a liability.\"\n\n\"We're not all as bad as the papers try to make out,\" Jack said.\n\n\"So who's footing the bill for this evening's fun?\" Nicole asked playfully.\n\n\"Me,\" Jack replied. \"I don't use taxpayer's money for my own personal entertainment.\"\n\n\"An honest politician as well, I do appear to have come across a rare breed. What makes an honest man want to enter a career as disreputable as politics?\"\n\n\"I wanted to do some good,\" Jack said. \"I started my own business, got lucky and made my money. Now I feel like it's time to give something back.\"\n\nJack took another sip of wine and smiled. \"Sounds corny doesn't it.\"\n\nNicole laughed. \"No. It's sweet.\"\n\n\"I like it,\" Jack said. \"I used to be a problem solver for things that didn't matter. Now I can use the same skills to actually help people's lives.\n\n\"What about you?\" He asked. \"How did you come to be in this...\" He realised what he was saying. \"No. Forget I asked. It's none of my business.\"\n\nNicole laughed even louder at his discomfort. \"It's okay. I don't mind,\" she said. \"I do it because I like sex and the money is good. Don't pay too much attention to what the moral crusaders say. We're not all victims.\"\n\nIt was good to hear that, but Jack did wonder if she was saying it for his benefit. Those sunglasses preyed on his mind a little. He did wonder what they might be hiding. He doubted her profession was a bed of roses, even at the top.\n\n\"So what brings an honourable servant of the people to my highly disreputable little house?\" She rolled her tongue over 'disreputable' like it was an organ to be pleasured and Jack felt a little erotic shiver slither down his spine and nest in his balls. \n\nIt had been so long since he'd enjoyed the company of a woman.\n\n\"A friend recommended you. He knew I was lonely and he said you were very discreet.\"\n\n\"I imagine that was a hard sell,\" Nicole said.\n\n\"You could say that,\" Jack laughed. \"It's not every day a respected colleague suggests engaging the services of a 'Professional Relaxation Therapist'.\"\n\n\"That's a nice title,\" Nicole said. \"The old words have such a stigma attached to them.\"\n\n\"I think I know which words the tabloids would use if they found out,\" Jack said. \"I've watched those rags tear apart too many lives over a minor moment of weakness.\"\n\n\"And yet you're still here,\" Nicole said.\n\n\"Yes,\" Jack said. \"I don't know why.\"\n\nHe must be insane to take such a ludicrous risk with his career. There was an urge within him though, he tried to ignore it, but it nudged him nevertheless, nudged him all the way into the house of a... he couldn't even bring himself to whisper the word in the confines of his own mind. This was not him.\n\n\"I do,\" Nicole replied. \"It's an animal need. Your body needs it as much as it needs to eat or breathe and the body always overrules the brain.\"\n\nShe noticed Jack's discomfort.\n\n\"It's been a long time hasn't it?\"\n\n\"Over five years,\" Jack admitted truthfully. \"My wife died. Cancer,\" he added. \"There's been no one since. I don't think anyone could ever replace her in my heart.\"\n\n\"Oh, I am so sorry to hear that,\" Nicole said.\n\nAn image of Genevi\u00e8ve entered his mind. It was the time they went sailing off the Isle of Wight. Her auburn hair was blowing in the wind as the sea sprayed behind her.\n\n\"I'm sorry,\" Jack said. \"I don't think I should do this. I'll leave the money and go.\"\n\nA warm hand touched his and electricity crackled with her touch.\n\n\"Please stay,\" she said, looking up at him. \"You need this.\"\n\nJack's heart raced in his chest. It had been so long. He knew he should leave, but his feet didn't move.\n\n\"My friend said you were special,\" Jack said.\n\nNicole smiled.\n\n\"Did your friend say anything else about me?\" she asked.\n\n\"No,\" Jack said, a little puzzled. \"Should he have?\"\n\nNicole turned away and carefully took off her sunglasses. \"Please excuse me Mr Newman. I'm afraid this will be quite a shock to you.\"\n\nShock? What was she talking... then Nicole turned back to him and Jack fell back in horror.\n\nShe had no eyes. Where were her eyes? Jack stared into two empty black pools. It was like looking through two windows into the void.\n\nThe horror didn't end. Two wings, black and leathery like those of a giant bat, erupted from her back and sent shadows skittering over the pristine surfaces of the kitchen.\n\nShe was on him before he even had a chance to draw breath to scream. Two hands gripped either side of his face and her soft lips crushed against his in a kiss. He took a breath and his lungs filled with a strong musky perfume that sent his heart pounding and his senses spinning. His cry was smothered in her hot mouth and dancing tongue. Her wings blotted out the light as they wrapped around him and crushed his body against hers in a tight embrace.\n\nShe held him like that, breathless in her kiss, until fires ignited in his veins and drove the fear away. The passion was too much. Pure naked desire surged through his body like a wildfire out of control. Too much. It was overwhelming him. He was falling. He was fall-.\n\n*****\n\nJack opened his eyes. He was naked and lying on a large, soft bed. Black silk sheets felt luxuriously smooth against his exposed skin. He looked around and realised the bed was perfectly round. Beyond it stood a ring of black candles. They suffused the room with an intimate glow and filled the air with aromatic smoke.\n\nNicole sat at the foot of the bed, revealed now in her true form. Her eyes were two windows into the abyss. Small jet-black horns protruded from each temple. Her naked flesh, pale almost to the point of being white, was covered in an intricate series of lines and whorls, as if a master alchemist had run out of blackboard space and had continued to scrawl across her body instead. She sat with her knees tucked up against her breasts and her wings partially folded around her like a cloak.\n\nShe was the most beautiful thing Jack had ever seen in his life.\n\nNo, that wasn't quite right. Beauty was too abstract a concept. She was the most desirable thing Jack had ever seen in his life.\n\nNicole gently wafted her wings and a warm, perfumed breeze passed over Jack's body, causing his skin to tingle.\n\n\"Welcome to my bedroom,\" she whispered, her words dripping with honeyed sin. \"Please forgive the manner in which I brought you here. I find it the best way to get my first time clients over the shock of what I really am.\"\n\n\"What are you?\" Jack asked. He thought he should be afraid, but he didn't feel any fear. Instead he felt relaxed and -- something he never thought he'd experience again, not since Genevi\u00e8ve had died -- pleasantly aroused.\n\n\"Your word for me is demon,\" Nicole said. \"More exactly, succubus. There is no need to be afraid though, I will not harm you.\"\n\nDemon? She did look like a demon, he supposed, she even had a slender black demon's tail. It curled around her slender ankles like a snake. But demons weren't real. They didn't exist... did they?\n\n\"This is all a little difficult to take in,\" Jack said.\n\n\"Then don't,\" the demon, Nicole said. \"Think of me as nothing more than your personal Professional Relaxation Therapist.\"\n\nSmiling, she crawled up to Jack on all fours, as lithe and as graceful as a cat, until her ripe breasts were just above his knees. \"Turn over,\" she said, playfully slapping him on the side of his buttocks.\n\nHe did as he was ordered. There was a dreamlike quality to what was happening. His hairs had pricked up, as if a light electric charge was running across his skin. He felt a soft pressure pushing down on him as Nicole sat astride the small of his back. \n\n\"Before we begin there are some rules you must follow, for your own safety.\" The tone of her voice indicated these rules were not up for debate.\n\n\"First. When I say we stop. We stop.\n\n\"Second. During the act of intercourse you must not struggle or fight against me. We can fight during foreplay, if that's what you'd like, but once we start having sex you relax and let me take control. I don't want to hurt you, but if you trigger my feeding response I may not be able to control myself.\"\n\nJack didn't know what she meant by a feeding response. He suspected he didn't want to know.\n\n\"Third,\" she bent over his body, close enough for him to feel the heat spilling from her. \"Relax,\" she whispered in his ear. \"I have centuries of experience. You're going to enjoy this.\"\n\nSkilled hands began to gently knead the muscles of his neck and shoulders and Jack felt his doubts melt away.\n\n\"People pay you to fight them?\" he asked.\n\n\"Not exactly fight,\" Nicole replied, her hands moving down to smooth the muscles between his shoulder blades. \"They pay me to overpower them. Their guilt doesn't allow them to fully enjoy the pleasure. It's easier for them if they can pretend to be unwilling.\"\n\nJack understood. She'd brought him to the bed and taken off his clothes without him ever having a chance for second thoughts. Now he was here it was easier to just relax and let her do her job.\n\n\"Don't worry,\" Nicole said, kissing him lightly on the back of his neck. \"I know you don't want any rough stuff. You want me to pamper you thoroughly.\"\n\n\"How?\" Jack asked, puzzled.\n\n\"I read it on your lips when we kissed,\" she said. \"Your breath whispered it in my ear. And your skin screams it to me now. It's so hungry for contact. It's been a long time since you allowed anyone to touch you.\"\n\nIt had, Jack thought sadly. Her soft hands kneading away his aches were like water to a man lost in a desert.\n\n\"It's a special talent of my kind,\" the succubus said. \"The only pleasure we feel is that which we instil in others.\"\n\n\"You don't feel your own pleasure?\" Jack said. \"That sounds sad.\"\n\n\"It isn't,\" Nicole said, walking down his spine on feather-light fingers. \"The pleasure you feel now, I feel it too and I can raise it to peaks you never thought possible to climb. If I wanted to be really naughty I could even take you beyond the limits of what your body can withstand.\"\n\nShe lightly blew on his back and Jack's muscles unwound as he felt the warm air flow over his skin.\n\n\"You like your back being massaged,\" Nicole said. \"Your erogenous zones are lit up to me. I can see them glowing. I know exactly where to touch...\"\n\nShe gently applied her thumbs to points between Jack's neck and shoulders and began to loosen the muscles underneath.\n\n\"...where to kiss...\"\n\nHer soft lips pressed down against a sensitive spot on his neck.\n\n\"...where to rub.\"\n\nShe lay flat on him and he felt her firm breasts push against his back. Jack relaxed and murmured his contentment as her nipples moved across a receptive patch of skin in slow, circular motions. He was melting beneath her.\n\nNicole used all of her body to massage, squeeze and knead every knotted muscle in Jack's back and shoulders. It felt heavenly. It had been so so long. She knew exactly which spot and how much force to apply to cause the maximum amount of pleasure. Beneath her attentions Jack melted into a warm, blissful puddle.\n\nShe stopped and lay languidly on top of his body, her heat seeping into him. She murmured contentedly while lazily running her fingers through his hair.\n\n\"Shall we fuck?\" she whispered in his ear, her words dripping with delicious sin.\n\nJack needed no encouragement. He rolled over, revelling in the sensation as he slid against the luxurious silk sheets. His eagerness dampened a little as he looked up at her and was reminded again of the horns, the tail, the wings, the skin far too pale to be human and the eyes, those empty black eyes like windows into the abyss. It had been easy to put it all out of mind when he'd been lying on his front and wallowing in the sensation of her warm curves sliding over him. Now his doubts returned to the surface. She sat astride him, her black wings partially unfurled like a bird of prey or carrion feeder, as he lay on a black bed surrounded by a ring of black candles. Was he her lover or her sacrifice?\n\nShe sensed his anxiety. \"Don't be afraid,\" she said soothingly. Soft hands gently caressed his chest.\n\nJack looked up at the sensuous curves of her naked body and felt his doubts sink back down beneath the surface. Her body was so desirable he ached for her. He was totally entranced by her beauty.\n\nShe smiled as her hands moved down and played with his cock. Jack gasped at the feeling of her feathery-light caresses. It had been so long since he'd had an erection this strong he couldn't even remember if he'd ever been this hard. His cock was a hair trigger. The slightest touch and he'd go off.\n\nShe rose above him and steered his cock to the opening of her vulva. There was no hair and the labia were thicker and plusher than any he'd seen in a human woman. She held herself there for a long teasing moment as he shivered in anticipation beneath her. His cock twitched against the soft lips, wanting to enter the warmth between them.\n\nSlowly she descended down on him. It felt like heaven as his cock slid slowly into her wet warmth. She engulfed all of him, her hungry vagina sucking and squeezing his cock all the way.\n\nJack groaned and the sinews tightened in his neck. He felt the tightness run through his body, every muscle as taut as steel cable.\n\nToo much. Too soon.\n\nHis hips jerked upwards. His balls tightened. He felt his cum rush up through his cock and gush into her welcoming heat. His body shuddered with the force of the ejaculation. His muscles trembled like leaves in a gale.\n\nNicole rode him with serene calm. Her pussy squeezed and undulated around his cock, milking him, dragging out the orgasm as he bucked uncontrollably beneath her in the throes of ecstasy.\n\nFinally Jack's body calmed down. His muscles stopped clenching. His nerves stopped jangling.\n\nHe was crestfallen.\n\nToo long. It had been too long.\n\nAfter all the build up, the heavenly sensation of her hands and breasts massaging his body, he'd shot his bolt like a nervous teenager the moment he'd entered her pussy. He'd paid for a night and lasted only seconds. Jack was mortified, not about the money, that didn't matter, but at the shame of his too-short performance. His erection was already subsiding inside her. She deserved better.\n\n\"I'm sorry,\" Jack said.\n\nNicole looked down at him, her black eyes completely unfathomable. Then she smiled. The hot, moist flesh of her pussy contracted around Jack's cock and began to suck.",
        "\"Shh, there's no need to apologise,\" she said. \"We don't finish until I say we finish, remember.\"\n\nShe slowly twisted in his lap, letting the soft folds of her vagina rub around his cock. Jack felt a pleasurable stirring as his member came back to life. He felt himself stiffening inside her, urged on by the ministrations of her hot flesh.\n\n\"That's it,\" she coaxed.\n\nShe squeezed her pussy around him, gripping his cock, sucking it into her, letting her soft folds coat it in warm juices that tingled against his skin. She settled back, letting his full length slide all the way inside her.\n\n\"That was your practise, to get you back into the flow of things,\" Nicole said. \"Now let's have some proper sex.\"\n\nShe arched her back and began to pump her hips against his. The motions were slow to start with, but they quickly became faster and stronger until the whole bed was rocking with the force of their coupling. Jack tried to keep up, but quickly realised he couldn't. He lay back and let Nicole ride his body.\n\nRide him she did. She varied her pace, pumping against him hard, driving him almost to the peak of orgasm and then slowing down, letting his body cool down, letting it plateau, before she started up again, driving his helpless body to the next, higher peak. Perspiration poured from Jack's forehead and his heart beat so fast he was worried it might burst from his chest. And he wasn't really doing anything. He had no idea how Nicole could maintain her pace. All the time he felt the heavenly friction as the hot walls of her vagina rubbed against his cock.\n\nLooking up at her, watching her full breasts sway with the motions of her body, Jack was both awestruck by her beauty and terrified by the animalistic passion he saw in her face.\n\nFinally, he could take no more. Nicole took him to the highest peak, and held him there, her vagina gently quivering around his dick. Jack felt a throbbing sensation down his shaft and in his balls, slowly building in intensity.\n\n\"Mmm yes,\" Nicole murmured. \"You really are ready to burst. Relax. Let it out. Release the tension.\"\n\nShe leaned back and spread her wings wide. She slowly eased her body up and down his cock, letting her vagina squeeze and suck every millimetre of his shaft. Her pussy paid special attention to the fleshy head of his cock, gently squeezing the ridge of the hood, bathing the tip in her warm, tingly juices.\n\n\"Release it into me.\"\n\nShe collapsed on him, crushing her soft breasts against his chest as she embraced him. Her lips, boiling hot, covered his throat and neck with passionate kisses. Her wings fell across them both, filling the air with a heavy, musky scent.\n\nJack grunted and bucked up so hard he feared his spine might snap. His back continued to convulse as he thrust his hips against hers. His cock spurted inside her and he felt his muscles spasm with the force of the ejaculation. Hungrily, her pussy gulped down every drop of semen and coerced his cock for more. He obliged, pumping great spurts of cum into her slick channel until it felt like his testicles were completely drained. Then the tremors died down and Jack lay back, panting from the exertion. Worn out, but pleasantly so.\n\nNicole nuzzled his neck, murmuring in pleasure.\n\n\"You enjoyed that didn't you,\" she purred.\n\n\"That was wonderful,\" Jack said, a little out of breath. \"I didn't think I'd be able to manage a second time. I never could before.\"\n\n\"We aren't finished yet,\" Nicole said. In one swift motion she rolled onto her back and pulled him on top of her. Her legs crossed around his waist and her arms wrapped around his chest. The embrace was completed as her wings folded around his body like a heavy blanket.\n\n\"You don't get away until you give me more,\" she said. Playfully, she squeezed his sides with her thighs.\n\n\"I don't think I have any more,\" Jack said. If she was serious then he wasn't going anywhere anytime soon. He was completely trapped in her embrace, not that he minded. The warm curves of her body were not something he was in any mood to escape.\n\n\"I think my pussy will change your mind on that,\" Nicole said.\n\nJack opened his mouth in surprise as he felt Nicole's vagina tighten around his cock. A peristaltic contraction gripped his member and pulled it down into the hidden folds of her flesh. He felt soft flesh squeeze and undulate around his cock, bringing him first back to full hardness and then sucking on his cock with a gentle, but insistent, milking action.\n\n\"You need to be very still now,\" she whispered in his ear, serious now. \"This will be extremely pleasurable as long as you don't struggle.\"\n\nA muscular ring of flesh contracted around Jack's cock and rolled up and down its length with firm, rhythmic strokes. Beneath him Nicole gently rocked her hips, aiding the motions of her vagina as it squeezed and sucked Jack's erection to greater hardness and length.\n\n\"Mmm yes,\" Nicole murmured, her tone playful again. \"My pussy has you now. She's going to suck and suck until there's nothing left.\"\n\nJack couldn't last long against this level of sensation. He moaned as he drove his hips forward, thrusting his cock deeper into her hot body. Her pussy gripped him tight and refused to let him go. Hungrily Nicole squeezed and sucked every last drop of semen from his cock.\n\nGasping, Jack fell back down on her. That had taken a lot out of him. Three in a night, he hadn't been able to do that even when he was a young man. He lay on top of her, panting for breath and thinking about just how far removed he must seem from an ideal of male virility.\n\nNicole didn't seem to care. She planted soft kisses on his neck and throat and whispered sweet nothings in his ear.\n\n\"Relax and let my pussy milk you.\"\n\nHer vagina continued to suck and squeeze Jack's cock. His erection wasn't subsiding. Jack was starting to feel a little strange. Hot flashes boiled through his blood. His senses span. He felt like he was losing touch with his own body. Every breath he took filled his lungs with the musky perfume of her pheromones. His thoughts were a little foggy.\n\nAnother orgasm hit, but this time the ejaculation was slower, longer and less violent. His body trembled, but was otherwise still as Nicole pulled him deeper into her embrace.\n\nThis wasn't right, Jack thought. He felt weak, helpless; his body completely limp as Nicole wrapped him tighter in her black wings.\n\n\"Nic...?\" he questioned.\n\n\"Shh,\" she whispered, her soft lips pressing against his.\n\nAnother orgasm crashed into the back of the previous, then another, and another. He felt the pleasurable pulses running up his cock as he spurted a continuous stream into her hot centre. More than he could possibly produce. He didn't care. He didn't want this to end.\n\nHe heard his heart beating, felt blood pounding in his ears. Was he dying?\n\nDid he care?\n\nHer embrace was so warm, so tender. He wanted to empty himself into her. She could have him all.\n\n\"That's enough,\" Nicole said, her voice cutting through the perfumed cocoon she'd spun around him.\n\nHer vagina dilated until the walls were no longer pleasurably rubbing against Jack's cock. She unwrapped her wings and gently rolled Jack onto his back.\n\nHe lay back and didn't move for a while as he struggled to get his breath back. While he rested Nicole ran soothing hands through his hair and across his forehead.\n\n\"Mmm, I think you needed that,\" she said.\n\n\"Oh yes,\" Jack agreed, a little out of breath.\n\n\"You were silly to deny yourself for so long. It's not healthy.\"\n\n\"I couldn't,\" Jack said. \"Not back then. It didn't seem right.\"\n\nNicole straddled his chest and smiled down at him. \"Silly. Life is to be lived, not squandered in devotion to the passed. If you had died would you rather your wife spent the rest of her days in mourning or gone out and been happy.\"\n\n\"I would have wanted her to be happy,\" Jack said.\n\nNicole leaned right down until the tip of her delicate little nose was just touching his. \"So why do you think your wife would want any different?\"\n\nJack had no answer to that.\n\nNicole put a finger on his chest, right above his beating heart. \"She will always be a part of you. Nothing will ever take her away or replace her. Your heart is a jewellery box, filled with the glittering reminders of every special person you ever cherished. Once you close the lid a little bit of their light is forever shut off from the world.\"\n\n\"So what precious stone are you?\" Jack asked.\n\n\"Don't be silly,\" she smiled, \"I'm just your Professional Relaxation Therapist.\" She swung an elegant leg over his face as she got off his body.\n\nJack tried to get up and all of a sudden the room started to swim.\n\n\"Careful,\" Nicole said, supporting him. \"You're going to be a little woozy for a while.\" \n\n\"Well, I'll always keep a place in my...\" Jack went to pat his chest and paused. That sex had been mind-blowing, especially after his long abstinence, but when he looked at her he felt... emptiness.\n\n\"You won't feel love for me,\" she explained with a trace of sadness. \"Humans can't.\"\n\nBefore Jack could enquire further she switched on the main light and walked round blowing out the candles. She took her clothes from a rack against the far wall and then helped Jack to get dressed.\n\n\"I'll make you a coffee,\" she said. \"It will help you recover.\"\n\nIn the kitchen Jack pulled out his chequebook and pen while she prepared him a strong cup of coffee.\n\n\"When can I see you again?\" he asked.\n\n\"In four months time,\" Nicole said. \"It's a rule for all my clients, for their own benefit. My attentions can become highly addictive.\"\n\nShe passed him a steaming cup of jet-black coffee.\n\n\"Make the cheque payable to 'Bat Companions',\" she said. \"If anyone investigates your finances they will see that you made a donation to a charity devoted to the preservation of bats. I am very discreet and I expect my clients to be the same.\"\n\n\"Bats?\"\n\n\"Creatures of the night should stick together,\" Nicole smiled. Her clothes hid her pale flesh, but she made no attempt to hide her horns, wings and those fathomless black eyes.\n\n\"You really are a... demon?\" It felt strange to use the word, even though he could see her slender black tail flicking behind her legs.\n\nNicole smiled and glanced demurely down.\n\nIt was hard for Jack to take in. Not only had he just had the best sex in years, he'd just had incredible sex with a girl who wasn't even human. Yeovil's 'special' felt like an understatement of colossal proportions. He wondered how many other people were privy to this world that ran alongside normal, everyday existence.\n\n\"Are there any... How many more are... I mean why have we never heard?\" Jack had so many questions they spilled over the top of each other.\n\n\"There are more. Not many, a few hiding in the shadows amongst you,\" Nicole answered. \"You hear evidence of our existence from time to time. You choose not to believe it, dismissing the stories as the ramblings of lunatics.\"\n\nJack shook his head. \"It's an odd thing to have your eyes opened, even more so when you reach my age.\"\n\nNicole smiled. If anything she looked even more radiant. Her skin had picked up a little more colour. Then Jack recalled the bed, the weakness he'd felt as he'd ejaculated into her.\n\n\"Back there, on the bed. You fed off me?\" he said.\n\nNicole nodded. \"Yes. I'm a succubus. We feed off sexual energy. I took some of yours. Not enough to harm you or cause permanent damage, but you'll feel a little more tired than normal for a couple of days while your body replenishes what was lost. It's a little like giving blood.\"\n\n\"So I'm nothing more than a light snack,\" Jack laughed. \"That's one for the ego.\"\n\n\"A very tasty little snack,\" Nicole said, running her hands over his chest. \"You'd better leave before I work up more of an appetite,\" she purred.\n\nJack let her lead him down the hallway and to the door. Before leaving he stopped and paused. There was something he had to ask.\n\n\"On the bed when we... at the end... if we... if you... hadn't stopped...\" \n\n\"You would have died,\" Nicole said. \"I would have drained your life completely and then consumed your soul.\"\n\nJack looked into her eyes and saw nothing. The more he looked the more he felt as if a limitless black abyss yawned beneath him. He shivered.\n\n\"I thought so,\" Jack said. \"I think I knew at the time. And I didn't care. I knew and I wanted it. Does that sound strange? Your other clients, do they ever ask you to take them...\" he paused, a dryness settling on his tongue. What frightened him was that he didn't know whether this was a question or a request. \"...all the way?\"\n\n\"Yes,\" she replied, \"all the time. It's not what they want though, even if they think it is. My kind are as deadly as they are beautiful. While under our spell men will offer us their lives and think they want nothing more in the world than for us to take them.\"\n\n\"So you never...?\"\n\n\"Sometimes,\" she said. \"When my clients are dying or are in so much pain that life is no longer worth living. I go to them and bring sweetness to their final moments.\"\n\n\"You don't sound like a typical demon,\" Jack said. Although, when he thought about it, he didn't really know what a typical demon was.\n\n\"The world is not painted in black and white,\" Nicole replied.\n\n\"No, it isn't,\" Jack replied.\n\n\"I do what I have to, to survive,\" Nicole said. \"The shadows to hide in are fewer and smaller for creatures like me. Humans may not be powerful, but they are numerous. Kill enough of them and they will find a way to destroy you no matter how wily or powerful you are. This way is better. Why kill to take something that is offered freely and will keep coming back?\"\n\n\"Makes sense,\" Jack said. \"You give us pleasure and we give you sustenance.\"\n\nHe kissed her lightly on the cheek before walking back down the stairs and onto the street.\n\nMaybe he should be a little more patient with Susan, he thought. Her heart was in the right place. She was also quite attractive now that he thought about it.\n\nNicole smiled as she watched him go.\n\n\"... and absolution,\" she murmured to herself, closing the door on the night. "
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "demon",
        "escort",
        "massage",
        "vampire",
        "incubus"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/incall-with-a-succubus"
}
{
    "title": "Eve's Tower 03: Vessel",
    "pages": [
        "She stood over me, arms akimbo, with a knowing smirk working itself across her face.\n\nSprawled facedown across our bed I could barely move. \n\nI could feel myself leaking, a warm river pooling in my upturned thighs.\n\nEvery shuddering breath brought the taste of the evening's activity to my lips.\n\nI had barely made it in from the car, the driver's seat no doubt ruined.\n\nShe crawled on top of me, her warm skin a pleasant contrast to the cool cum caking every inch of me.\n\nRubbing herself against my wife nibbled at my ear before whispering \"Keep coming back like this, and I just might have to go and see what all the fuss is about for myself.\"\n\n*****\n\nIt was late afternoon when I arrived at the address that Angela had given me, neatly written on a small piece of letter head even has her twitching member nuzzled itself inside me after our encounter behind the counter.\n\n\"Eight o'clock, sharp.\" Had been her cheeky missive, as she gave my freshly used rump a love tap and slid her dripping length from me.\n\nThe house was on the outskirts of town, but impressive by any standard. A low wide place, a dark mix of stone and wood that spoke of taste and secrecy.\n\nNestled back amongst trees it had been barely visible from the road, but a mailbox emblazoned with the same stars and shapes as were found on the exterior of Eve's Tower told me I had found the place.\n\nMounting the steps I found my way across the deep porch before lifting the knocker on the thick wooden door. \n\nBefore I could strike, the knocker was pulled from my grasp as the door slid open, Tabitha standing in the opening.\n\n\"You made it!\" she exclaimed joyfully. I'll admit, my heart leapt at the sight of her again. In spite of everything that had transpired since our first encounter, it was her I had hoped to see again most.\n\n\"Come on,\" She said quickly ushering me inside she closed the door behind us, \"Everyone is waiting.\" Taking my hand lead me through the foyer towards a hallway at the far end.\n\nI craned my neck in wonder at the place. It seemed larger on the inside. We padded across lush carpets and dark stained hard wood floors, on every wall hung art that was sumptuous as it was exotic. Figures teemed in the images. Philosophers draped in robes debated, warriors stalked the jungles, nymph like figures paraded through sun dappled woods; all of them female. \n\nEntering the hallway I was once again struck by the same dark aroma that permeated Eve's Tower.\n\nShe guided me gently towards the second door on our right, already half open, and we entered what appeared to be a washroom of sorts. Brown marble, slightly rough, covered almost every surface, a large tub (almost a small pool by its size) sat against the back wall, a set of ornate sinks with brass fittings lined the wall with a large mirror above them. \n\n\"So,\" she said, breaking the silence and turning to face me, \"Did they tell you what to expect tonight?\" \n\nI shook my head \"Nothing, just that I would enjoy it.\"\n\nA mischievous smile crossed her face as she reached forward to begin unbuttoning my shirt, \"And I'm sure you will, now let's get you out of those clothes and cleaned up.\" \n\nI stood for a moment gazing at her then, almost too hastily, began unbuttoning my pants, a sudden rush of excitement at being bare in front of her rising inside me. \n\nShe giggled at my eagerness, sliding my now open shirt off my shoulders before folding it deftly and setting it aside. \"You should know that this is a very special night,\" She said, \"A ceremony, a welcoming of sorts. We don't often get the pleasure of adding a new...member to our ranks,\" a wry look played across her face at the word, \"And you will help us in doing that.\" She guided me back and down to a seat and knelt to remove my shoes. \"This is a rare occasion, and we are as honored to have you participate as you should be honored to be the one to act as vessel.\" \n\nMy mind whirled at her words, trying to grasp meaning in them but failing. I lifted my hips obligingly as she slid my pants, boxers and all down. The sudden rush of cool air made my skin prickle, and I flushed slightly at my sudden nakedness before her (not that we hadn't been far more open with each other before, but suddenly I felt timid as she was still clothed and I was not.) Neatly stacking my things she offered a hand and taking it I stood before her. \n\n\"There are a few things we must do to prepare you fully.\" She said, rummaging through a small leather bag on the counter before lifting a jar with a familiar green liquid inside of it, Waymaker. My heart jumped at the memory of its effects and their results, and at what its presence portended. Suddenly, she was quite close, her chest pressed against mine, the bottle held up between up as she lifted the cork. \"From what I've heard you're familiar with the effects of this?\" This time the mischievous smile was replaced with a raised eyebrow and a look that was a bit more suggestive. \n\nNodding, I took the bottle and brought it to my lips. I shivered slightly as the cool minty liquid ran across my tongue. Images flitted again through my mind of the last time I had tried Waymaker and I felt a rush of heat to my groin and my face as I felt myself hardened slightly. \n\nTabitha giggled, a sweet appreciative sound, obviously familiar with what had happened behind the counter that day. \"Now, don't drink all of it.\" She said, lifting a hand to stop me from finishing off the whole bottle, \"We're going to need the rest.\"\n\nI panted slightly, humming my approval as I felt the warmth begin to spread down my throat. \n\nShe placed a hand on my chest and guided me back again to the chair. I started to sit, looking up at her expectantly for instruction, but she gave a slight shake of her head and smirked. Taking my shoulder she turned me gently till I was facing the chair then pressed between my shoulder blades. Obligingly, I bent at the waist till I was gripping the chair, my heart pounding as I felt my cheeks part slightly before her. \n\n\"Full preparation is the order for tonight,\" She said. I turned my head to see, and found her drawing off the remaining portion of the fluid into a large plastic syringe, holding it up and eyeing it like a doctor preparing a shot. \"That should do it.\" She placed the now empty bottle aside and brought one soft hand down to grip my left cheek. I stiffened slightly at the sensation, her warm skin pressing softly into my flesh as she gripped me and pulled gently to one side, exposing me fully. She leaned forward, her breath hot on my ear. \"Now relax.\" And I felt the cool tip press into me slightly.\n\nMy toes curled at the intrusion. I hadn't known what to expect tonight, but all day my body had been singing at the unknown promises and, although this wasn't exactly what I'd had in mind, I couldn't help but moan slightly. A rise in pressure at my entrance as she bore down on the handle and a cool spreading feeling as the contents emptied into me. \n\nThe tip withdrew and she stood and busied herself replacing the items in the bag and closing it. I stood too, my breath suddenly slightly ragged as my heart thumped hard in my chest, my erection straining. \n\n\"So, what exactly is this? This thing tonight? What did you mean by...vessel?\" I said to her, wanting to know, desperately fighting the desire to pounce her and bury her gorgeous girlcock as deep inside of me as I could. \n\n\"Don't worry,\" Came the reply, her back still to me as she finished tidying up, \"It's a ceremony we hold, to welcome a new Eve into our flock, you have made quite an impression on us, and we couldn't think of anyone better suited to help with the...ritual.\" \n\n\"Ritual?\" I replied, still confused.\n\nShe turned, finally finished, and took in my state of baffled arousal. She was holding a thin robe now, a simple white garment, which she proffered with both hands. \"Like I said, there's nothing to worry about, you will enjoy this night as much as we all will.\"\n\nI realized suddenly, that it was almost identical to what she was wearing, albeit cut for a man's frame. Taking it I slid an arm in one sleeve, but didn't break my gaze from her.\n\n\"I was hoping-I mean-what I wanted to say,\" I found myself stammering as I slid on the other arm, \"That day in the shop, the first day I mean, when we...I just...\"\n\nShe seemed to realize what I was getting at and smiled sweetly, \"You mean our first time? Oh, it was something special alright, I couldn't stop thinking about it myself, I'm glad you came back.\" She stepped close to me again, taking the sash she deftly knotted it, closing the front of the robe, but doing little to hide my stiffness that now tented its front. \"Now, we mustn't keep the others waiting.\"\n\nWithout another word she took my hand and led me back out into the hall and deeper into the house.\n\nWe wound our way through dark passages for a minute or so (just how big was this place?) before coming to a particularly ornate wooden door at the end of a passage. She stopped and turned to me, reaching up to straighten by robe she said, \"Alright, this is it, you ready?\"\n\nI nodded mutely, trying to calm my giddy nerves.\n\n\"Just relax,\" She said reassuringly, giving my hand a squeeze. I realized I was trembling in anticipation, not shaking per se, but vibrating with excitement. \"You're going to enjoy this.\"\n\nShe turned and pushed open the door. It swung open silently onto a set of dark stairs that led down and to the left. We descended, cool stone on my feet, and I became aware of the quiet murmur of voices below us. At the bottom she paused again before a curtained opening hung with a rich dark velvet and turned, casting a final look as if to say \"here we go\" before she drew back the fabric and we stepped through.\n\nBefore me was a large room, round from what I could tell, a chaos of rich carpets covered the floor and heavy furniture of all sorts formed a wide circle around the perimeter. Settees, couches, piles of cushions, low sectionals; all upholstered in the same dark fabric we had just passed through. The only light in the room shown down from a single unseen source above, a soft warm yellow that illuminated a wide ottoman of sorts in the open space in the middle of the room and cast it's light out so that the surrounding ring half emerged from the darkness beyond. But, the thing that took my breath away was the two dozen women seated, laying, and lounging across every surface. \n\nThey were an exquisite array of feminine beauty. Every shape and body type, skin tones that ran the gamut from alabaster white to the darkest of mahogany. Hair of shimmering gold, fiery red, deep black, rich brown, and shining silver. Every one dressed in some version of the white robe I wore. \n\nThey had been in various states of quiet conversation as we entered, some leaning across arms of sofas to converse, several laying across the laps of their companions, two on a wide bean bag type were deeply entwined in each other's arms and I swore one had her hand under the robe of the other moving gently along some unseen path, but they all straightened and a hush fell as we stepped into the circle. \n\nWe stood for a moment, the center of attention before Tabitha spoke.\n\n\"Ladies, I thank you for your patience, it has been some time since we last had the pleasure of such a meeting, and it is with great joy that I present to you tonight's vessel.\" With that she half turned and nudged me forward with a gentle touch to my back. There was an approving murmur from the group, which sent a wave of relief through me and I exhaled a breath I didn't realize I had been holding. I smiled as warmly as I could manage.\n\n\"He has graciously agreed to serve tonight,\" She continued, \"And I'm sure you're all as...anxious...as I am to proceed.\" This caused a smattering of light laughter. \"Bring her in!\" Tabitha called toward the darkness on the far side of the circle.\n\nThe was a thunk of wood and metal, the sound of a door being unlatched, and a square of dim light opened just beyond the circle. Three figures were momentarily framed in it before the light closed off again with a soft thud. A moment later Angela and Bridgette, resplendent in the same white robes stepped forward into the light, flanking a woman between them. She was slightly shorter than them, with dark skin and flowing black hair that spilled around her shoulders. Her features were regal and exotic, speaking of oriental origin, India perhaps. She moved somewhat cautiously between them, but held her head high with poise. I could see nervousness and excitement in her dark gleaming eyes. \n\nThey approached the far side of the ottoman and stopped. Tabitha approached it as well and I followed till we were standing across from each other.\n\nTabitha spoke first, her tone solemn. \n\n\"We are here as vessel, to welcome the new Eve into our fold, and initiate her.\"\n\nAngela replied. \"We are here as Eve, to greet the vessel and join the fold.\"\n\nI smirked inwardly at the pomp of this exchange, and by the twinkle in the eyes of the others I could see that they too were bemused, but committed to the pomp.\n\nSuddenly, from all around us a wash of female voices spoke. \"We are here to bear witness and welcome.\"\n\n\"Present the vessel.\" Bridgette spoke now.\n\nTabitha stepped before me wordlessly, she deftly loosened the knot at my waist, and then slid the robe from my shoulders till it fell and pooled around my feet.\n\nAnd there I was, bare before twenty eight pairs of eyes. In the back of my mind I knew I should feel shame, but instead I felt only a flood of calm warmth spread across me. Again a low murmur of approval sounded around us, further emboldening me. \n\nTabitha turned, \"Present the Eve\"\n\nThe ladies likewise loosened the woman's robe and let it drop.\n\nThe breath caught in my throat.\n\nShe was stunning.\n\nSoft and smooth, plump breasts that hung slightly surmounted with dark nipples that strained out eagerly, a luscious curve to her hips that resolved into smooth supple legs, proud shoulders. But most eye catching was the olive brown length, nestled between her thighs, capped with a small neatly trimmed triangle of dark hair. \n\nSuddenly, clarity exploded through my brain. The full implications of what I was here for pounded through me. This was the newest Eve, the latest to gain the gift of the Tower, and I was to be her first. My heart that had quieted a little surged back into full force. My mouth watered at the prospect of tasting that olive brown skin. My skin prickled at the prospect of her touch.\n\n\"Shall we?\" Tabitha's voice snapped me from my wonton reverie, and nodding she and the others turned and retreated to a previously unoccupied couch.\n\nNow it was just us.\n\nWe stared for a moment, unsure what to do next, but then my instincts took over and I crawled forward onto the ottoman until I was kneeling before her. She didn't take her eyes off of me as I approached, until I had made my way across its expanse and was directly before her.\n\nWe locked eyes for a moment.\n\nI wanted to speak, but nothing seemed right, so instead I merely offered my hand to her. She took it demurely, and I slid back till we were both kneeling on the soft cushion. There was a long moment as we took each other in, my breath was fast and hot, intense pressure of anticipation filled my head then building to an almost unbearable note. \n\nThen, almost in that same instant we reached for each other.\n\nThe keening note of expectation inside me exploded as I touched her for the first time.\n\nThe warmth of her skin, the soft smoothness as I ran a hand down one arm while the other encircled her waist. I traced her sides, her neck, her collarbone, and her hips. Everything I could reach, as she did the same.\n\nWe explored each other with the timid passion of lovers meeting for the first time.\n\nShe massaged my upper arms, teased finger tips across my stomach, and danced across my back.\n\nIt was like we were reading each other with touch, human braille of arousal.\n\nOur bodies leaned in till we were pressed together, her warm breath on my neck, nuzzling me, and still we sought every inch.\n\nI could feel her stiffening against me as the first soft moan of pleasure slipped out to match my own sighs. \n\nPulling back slightly, I ran a hand down her chest, briefly tracing the curve of her full bosom, circling on of the full nipples. Her moan caught as I gently grazed its tip, and she arched back lifting her chest invitingly. \n\nObliging, I lowered my head and caught the engorged teat in my lips, flicking a tongue across its surface.\n\nShe bucked again at the sensation, and I redoubled my efforts, encircling the other breast with my hand and pinching gently at its hardened bud. \n\nA fully voiced cry of approval from her and a half thrust of her hips rewarded my actions.\n\nShe began rocking gently, rolling her hips, and I felt her tip brush mine, by now straining a full force.\n\nWithout breaking my oral ministrations I let my free hand drop down, trailing fingers across her stomach till I felt the tickle of soft short hairs at the base of her length, and finally the smooth turgidity of her length.\n\nI groaned as my hand closed around the base of her cock, and she likewise stiffened and gasped. For a moment I just held her, my tongue still busy lavishing her breast, feeling the pulsing heat in my grasp. \n\nSlowly I gripped and twisted my hand, relishing in the feeling of my fingers grazing over ridges and veins, my thumb running down the smooth top as I drew back towards her tip. She twisted, her head buried in my shoulder and neck now as she panted as the sensation. \n\nI smiled at this, taking joy in the pleasure I was giving her. Breaking my lip's contact with a final toothy nip at the dark bud of her bosom, I shifted back slightly so that I could finally look down at the matter at hand. \n\nIt was a thick, dark member, the olive skin shining slightly in the warm light streaming down from above. I brought my other hand down and with finger and thumb teased the bulbous head with a soft stroking pinch. This caused her head to snap back with a gasp, and she half fell back, catching herself with her arms so that she was leaning away from me, still kneeling.\n\nTaking advantage of the movement, and desperate to up the ante, I coaxed her back further still with a gentle hand on her stomach, till at last she was laying fully, her hardness jutting up.\n\nI shuffled for a second till I was kneeling comfortably between her legs, and finally, inexorably, brought my mouth down upon it.\n\nSince the moment the robe had dropped from her body I'd had no other goal in mind than tasting the sweet flesh, and now I was here, my own erection bobbing in time with my racing heart at the prospect.\n\nGently, sweetly, I kissed the head.\n\nShe drew a shuddering breath. \n\nAgain I kissed, another jolt. \n\nPulling back to gauge her state I spied a clear pearl of excitement forming.\n\nI let my lips part and moved further down, till my teeth caught the proud ridge of the crown, and with a guttural moan of satisfaction I closed them around the hot flesh and licked.\n\nIt tasted of spice and honey, dark chai and sweetness.\n\nGod I loved it.\n\nA dam broke inside of me and pure uncontrollable desire burst through me like a wave.\n\nI practically dove forward, the effects of the Waymaker in full effect by now, and gulped half her length into my needy throat.\n\nMy hands flew across her lower body, kneading, stroking, squeezing everything they could reach.\n\nShe practically screamed with delight and lust, head slamming back into the soft cushion below, her whole body arcing up to meet me.\n\nI pushed further, desperate to hilt her as my tongue slid feverishly across the thick ridge on the bottom.\n\nHer crown slid heavily against the entrance of my throat, then in and down with barely a pause, cutting short my sustained groan of satisfaction.",
        "Almost there, I leaned forward and bore down, simultaneously gripping her hips and pulling back, and was rewarded with the soft kiss of hair on my nose, and a lascivious fullness in my throat.\n\nWe froze like that for a moment, our bodies rigid with pleasure. I half heard an appreciate gasp and quick rush of low exclamations from the darkness around us. \n\nShe was shaking, her legs lock stiff beside me gripping me, one hand on my forearm gripping tight, the other clasped hard to one heaving breast. Her head back and to the side, eyes squeezed tight. A look of almost pained pleasure etched across her face. \n\nI couldn't help but half smirk around the thick flesh spreading my lips, the feeling of satisfaction at bringing her this pleasure.\n\nSlowly I turned my head, feeling her length twist against my tongue, drag at my cheeks. I worked my throat as best I could, massaging her crown, and began to withdraw slowly. \n\nI twisted back and forth as I went, licking as I did, lightly scraping my teeth against the smooth wet skin till I was back at the head, just the crown trapped by tooth and lips. My eyes never leaving her face.\n\nI held there, still, till her eyes fluttered open and she half turned her head to look at me.\n\nIt was a look of wonderment and need. A grateful pleading for more.\n\nI was only too happy to oblige.\n\nI closed my eyes, determined to enjoy this as much as she, and slid forward again, taking her full length in one motion, then withdrawing.\n\nI fell into an eager rhythm, devouring her length then pulling back till she was barely free before plunging down again.\n\nShe cried out each time, her hips bucking to meet me. Her hands came up to my head and fingers twined themselves in my hair. Not gripping, but resting firmly, feeling my motion.\n\nThe sensation was exquisite.\n\nMy throat filled and spread, heavy with girl cock, then empty for a moment only to be filled again as I bobbed steadily on her hot flesh.\n\nHer cries of pleasure were peaking now, short sharp keening gasps that rose in pitch. I knew she was close, but apparently she wasn't ready to be done. Suddenly, she surged up, hands on my shoulders pushing me back and off of her. Her throbbing member slid from my throat with a wet sucking sound. For one incredible moment a glistening rainbow of spit and pre arced between us for a moment before falling wetly across her legs.\n\nIn one smooth motion she pushed forward, hungry and insistent, rolling me back and diving forward herself till she had me on my back, her hips settling heavy on mine, my legs splayed out.\n\nThere was a brief pause as we stared at each other, panting heavily with lust and need. My ears momentarily empty of the sounds of my oral ministrations, I became acutely aware of the sounds of the room around us.\n\nMoans, grunts, sucking, fucking, cries, gasp surrounded us.\n\nIn the half-darkness at the edge of our pool of light I could see bodies writhing everywhere. Apparently, our performance had caused quite a stir in our audience. It was glorious.\n\nHere one woman on a couch, being deepthroated by a kneeling woman, while a third eagerly filled her ass with heavy thrusts.\n\nThere Tabitha lay across a settee her head hanging off the side, a woman bouncing wildly on her girlcock as Angela fed her inch after inch of throbbing erection.\n\nSeveral engaged in a mutual handjobs as they moaned, sipped wine, and watched us.\n\nMy attention was abruptly brought back to the matter at hand by a voice above me.\n\n\"I'm Anaya,\" She said gazing down at me, \"What's your name?\"\n\nI told her and she smiled.\n\n\"A pleasure.\" She said, then laughed suddenly. I couldn't help but chuckle at the entendre.\n\nShe smiled again.\n\n\"Thank you,\" She said suddenly sweet, \"for being my first.\"\n\nI felt myself blush at this.\n\n\"You're very welcome,\" I said, \"Now, it seems everyone else is enjoying themselves thoroughly, where were we?\" I ground my hips against her suggestively, our shared erections sliding against each other.\n\nShe bit her lip and the smile became a look of need. Good.\n\nI lifted my hips further and she arched slightly till her tip slipped down, leaving a wet trail across my thigh, and nestled itself hotly between my cheeks and against my opening. I gasped slightly at the sensation, the coming act.\n\nShe looked into my eyes, as if seeking approval, and I nodded, and to show my willingness I lifted my legs and wrapped them around her waist.\n\nShe pushed, I pulled.\n\nThe Waymaker did the rest.\n\nIn one smooth motion she entered me, almost fully.\n\nA supernova went off inside my head.\n\nShe stretched me and filled me completely.\n\nShe moaned, a long, surprised, satisfied moan as her eyes rolled back.\n\nStillness, for a moment, as we both luxuriated in the sensation. For her new and incredible, for me satisfying and needed.\n\nThen she started to move.\n\nShort slow thrusts, testing the waters.\n\nI was in heaven.\n\nThe turgid member in me slide and pushed deliciously. Stretching my opening, dragging and the sensitive skin of my ring, her thick length spreading my walls, her hot crown plumbing my depths.\n\nHer pace increased as she became comfortable, pulling half her length from me then plunging back in forcefully.\n\nFaster still, till she was practically exiting me completely, a feeling of sudden emptiness violently replaced with girth and hot flesh.\n\nI was practically sobbing with pleasure, as was she.\n\nWe clung to each other as she rutted into me. My hands were wild, clutching her shoulders, kneading her swinging breasts and pinching at her straining nipples, grabbing her ass to force her deeper still. My body was singing with sensation. Heat radiated from my core, electricity danced across my skin, a buzzing sensation filled me at the thrill of it.\n\nI matched her thrusts with my hips, our skin slapping together loudly as we fucked ourselves into ecstasy. Till at last she stiffened, a ragged howl of delight tearing itself from her throat as she hilted herself completely. Her shaft swelled in me, spreading me further still, a searing bolt of pleasure that ground hard against my deepest reaches. Her body went ridged as she climaxed, spilling her essence deep inside me with short hard thrusts. \n\nFinally, spent, she collapsed on top of me breathing heavily, even as she twitched out the last of her orgasm.\n\nA cheer went up around us, part exultation and part climax. Apparently, our audience had taken note of the culmination of our passion and approved.\n\nI was awash with sensation.\n\nHer pulsing rod still sheathed in me and the seeping warmth of her seed sent fresh shivers down my spine. The weight of her on me, her skin slick with perspiration sliding against mine. The smell of her hair and raw sex filling my nose.\n\nI held her as she came down from her high.\n\nShe nuzzled into my neck and kissed it, once, tenderly.\n\n\"Thank you,\" She whispered hoarsely.\n\n\"Oh, the pleasure was all mine.\"\n\nFinally she lifted herself, propping on her arms and blinked heavily. She focused on the dimness around us, suddenly aware of the wash of sounds filling the air.\n\n\"Oh my,\" She gasped at the sight\n\nThe women were approaching now, having untangled, slid free, released, and detached from each other and were now descending on us.\n\nTwenty odd glistening shafts of female flesh bobbed in the dim light, breasts of all size swung, wild hair streamed as they walked, crawled and bounded forward.\n\nOn every face a look of joy, lust, and welcome.\n\nWe were suddenly smothered in hands, gently lifting her, stroking me, pulling us upright.\n\n\"Welcome sister.\" Two dozen panting mouths whispered. \"Welcome vessel.\"\n\nOur congress had been a prelude, the real party began in earnest.\n\nAnaya's length was pulled from me with a wet pop and instantly set upon by three hungry mouths and six eager hands, even as another kissed her deeply before offering her own straining erection which Anaya practically dove upon, closing her lips around the shaft with a satisfied groan. Yet another slide under her, and deftly slipped her length in one motion into her dripping sex. Anaya's scream of pleasure was only slightly muffled by the throbbing girlcock that was busy seeking the depths of her throat.\n\nI only had a moment to take in this stunning display before I found myself being lifted and slid back and hands grasped and flew across my body.\n\nI found myself at the edge of the ottoman surrounded by a host of eager women. \n\nSeveral hands at once stroked eagerly at my raging stiffness, still slick with the juices of their last activity. Two shafts with heavy beads of pre hanging off them bobbed in front of my face and I reached out to grasp them and bring them to my open mouth. I hungrily sucked at their wet offerings before sliding one in to the root, relishing the stretch as it slid into my throat. I stroked steadily at the other for a moment before sliding the first free with a throaty squelch that sent a line of heavy drool down my chin. Then I swallowed the other. Back and forth I went, taking them completely in turn as they tossed their heads with pleasure of moaned with approval, their hands twining themselves in my hair and urging me on.\n\nI felt a body slide behind mine, two arms coming around to hug me close before her fingers found my nipples and tweaked them.\n\n\"I knew you'd like this.\" Tabitha breathed into my ear.\n\nI could only groan my answer.\n\nShe giggled, then grabbed my hips and lifted me till she was under me, her thick wet shaft poised at my leaking hole.\n\nAngela was suddenly between my legs, and she deftly slid forward, hand guiding her ample girlcock forward till it kissed against Tabitha's crown and my entrance.\n\nThey both pushed.\n\nI spread for them easily, my hungry ring giving way with little effort as a double helping of female cock filled me to capacity.\n\nGranted, I had experienced this before, and the Waymaker did its work handily, but the combined sensation of having myself stretched and filled beyond reason while hands worked my own length and two heavy cocks took turns filling my throat sent my mind into whiteout.\n\nPure, unadulterated ecstasy replaced every thought in my head as I went limp.\n\nAt some point I started coming, but it was a mere point in a constellation of sensations.\n\nAnd they came too, god how they came.\n\nA choir of lust mad angels giving voice to their joy as they spilled their seed across me, in me, over me.\n\nThen darkness."
    ],
    "authorname": "EvesTower",
    "tags": [
        "futa on male",
        "futanari on male",
        "futa",
        "futanari",
        "anal",
        "blowjob",
        "group sex",
        "exhibition",
        "consensual",
        "deep throat"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/eves-tower-03-vessel"
}
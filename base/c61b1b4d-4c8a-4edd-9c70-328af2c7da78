{
    "title": "The Finer Points of Sheila Ch. 05",
    "pages": [
        "\"The Way Things End...\"\n\nEDITED BY:\n\nMiriam Belle\n\nCREATIVE CONSULTANT:\n\nSimply_Cyn\n\nAuthor's Note:\n\n\"Thank you to everyone who has followed the journey of Sheila, Doug and Elle. Your support, kind words and advice have been instrumental in this series being as well received as it has been. This chapter is a little bit longer than the usual installment, mostly to wrap up the loose ends and give the characters an ending worth the value so many of you have placed on them.\n\n***\n\nMorning had only crested a few hours before Sheila and I drove down the dusty snarl of road that led out to Perkins Grove. The tall oaks held onto the cool blue shadows of morning even as the ten o'clock hour rolled around. We were definitely out in the middle of nowhere, and the funky ruts of the worn road proved it. No one really came out here anymore except for high school kids looking for a party or professional photographers looking for a great shot and the occasional couple looking to get away for a day.\n\n\"Easy on the bumps,\" Sheila smiled at me as I tried to maneuver her car down the road without upsetting her. I looked over at her and marveled. She was in her fourth month now and looking gorgeous. Her belly was poking out in a substantial swell from her midsection and her sundress stretched out as far as it could go. Her skin had taken on a glow all it's own, but when combined with morning sun she looked like an angel. Her bronzed hair seemed to catch fire and smolder in a beautiful display of just how effortless her beauty really was.\n\n\"This road is for four-by-fours,\" I muttered as we hit another rut, \"Not a Honda Accord. We should have brought my truck.\"\n\nSheila put her hand on my thigh, her touch warm and soothing, \"You'll do fine. You always do.\"\n\nI couldn't help but watch her already swelling breasts bounce as I drove. Sheila had always had the most incredible set of tits I had ever seen. Even when I was I kid, I would gawk at her. One of my goals in life had been to touch them and lick them, and when Sheila had finally decided to make the move herself towards that goal four months ago, my life changed. We figured the first night we were together was when she got pregnant, figuring back for months from the end of August to the beginning of May. \n\nApparently, the motility of my sperm and our carelessness in protection had been ignorant of our unique relationship.\n\nThe age difference didn't matter to me much at all. She was forty-five and I was eighteen, going on nineteen. I suppose I should have been more interested in women my own age, but it just hadn't worked out that way. Even Sheila's daughter Elle, one of the most attractive girls in my graduating class, couldn't turn my head enough to cheat. \n\nSheila had a unique quality that was beyond anything I had ever considered for myself. It was something I couldn't even really describe. The concept of her seemed to be above me, just out of reach. I couldn't find the words to express it, how I really felt about her. But on the concept of what she was I was perfectly clear.\n\nSo I would just say, \"I love you.\"\n\nAnd I did love her. I loved everything about Sheila Messing (formerly Sheila Crane, but after the divorce was finalized she took her maiden name back), from her perfect body to her tendency to snore to the way she'll snort when she gets rolling on a real belly laugh. I never expected to fall in love with Sheila, and I don't think she expected to fall in love with me. What was supposed to be a steamy May-December romance became something much more. \n\nIt's funny how people will try to tell you that love knows no bounds, and that you can't help whom you fall in love with. I'd heard that from almost every one I knew growing up at some time or another. And yet, once our secret had gotten out with the revelation to my parents about or being together, all those cheerful sentiments had gone out the window. We had become social outcasts.\n\n\"Are we still going to meet with your dad tonight?\" Sheila asked gently, her dark eyes looking to me as she stroked her belly.\n\n\"Yep,\" I said.\n\n\"He'll listen,\" she reassured me, though after their reaction to our great news I figured Sheila would be the last person on Earth to credit either of my parents with open minds.\n\nI laughed, \"He'll listen more than Mom will. 'You're living in sin' blah blah...\"\n\n\"She's just worried, that's all.\"\n\nMom had been more than a little worried. She had been furious, very much on the verge of a conniption fit when Sheila and I had sat them down a few weeks ago to talk about our unique situation. After she had finished making threats about statutory rape (which didn't apply to me, since I'm 18) Mom retreated to her bedroom and I had not seen her since. Dad took it all with the usual silent distaste he reserved for most of my life choices. But then what did I really expect?\n\nThe fact that I had gotten someone pregnant months before I was to go off to college was an unforgivable mistake in their eyes. What's more, said woman was twenty-seven years older than I and also a close friend of the family. If I had known their response would be as volatile as it had been, I would have told them alone and not have subjected Sheila to their wrath just yet.\n\nStill, they had kicked me out of the house when I refused to live under their rules any longer. Dad had taken the keys to my truck (which was really his truck as I found out) and I became acquainted with a new way of life. Thank God Sheila had let me move in with her that very night. Tom Crane had given up the house in the divorce for her not demanding alimony from him. Elle had little to say about it. She had already moved out and was permanently staying with friends. Though she and her mother had repaired their rift, apparently it was still too raw to be around each other.\n\n\"They just need a little time, you know?\" I pulled the car over to the side of the road, beside which was an open field with tall grass that came up the waist of a grown man. I disengaged the car and turned to her, \"I'm just a little worried myself, I guess.\"\n\n\"You think you're worried?\" Sheila sighed, \"I went to school with your mother. I mean, I used to baby-sit you for Christ's sake.\"\n\nI smiled and ran my fingers through her hair, \"Funny old world, ain't it?\"\n\n\"Ha-ha,\" Sheila leaned over and kissed me gently on the lips.\n\nWe unpacked the trunk and walked into the field. I held her hand and carried the ice cooler while she carried the blanket. The sun felt good against my skin as we walked. It would be too hot later on the day to even be out here. It was an Indian summer, and the heat was only manageable sans air conditioners before eleven in the morning or so. The grass tickled the hair on my legs as we looked for a spot that was inconspicuous.\n\n\"There,\" Sheila motioned off to the left towards the tree line. The tall summer grass had long since abandoned its green spring colors and was melting in a golden brown. I could hear a virtual symphony of birds in the trees, whistling and humming their own songs and vignettes to each other as scattered crickets chirped their own melodies in response. Thick, cotton ball clouds rolled overhead and hinted that they might drop a little rain our way. \n\n\"Think it'll rain?\" I asked and sat the cooler down as Sheila stomped down a patch of tall grass with her feet. \n\n\"Weather guy on channel seven said it might,\" she replied and looked up, her belly sticking out almost comically as she shielded her eyes from the sun.\n\nSheila spread the blanket out and we sat down. It took her a minute to lower down safely, and I helped her all the way. We smiled and laughed at her reduced mobility as the shade from one of the huge oak trees hid us in broken patches of shade.\n\nShe huffed and said, \"I feel like a beached whale.\"\n\n\"But you're still sexy,\" I smiled and kissed her hand.\n\nShe looked at me, \"You do know that when this baby is your age now, I'll be sixty-three?\"\n\n\"Yeah,\" I nodded, \"And I'll be thirty-six.\"\n\n\"And that doesn't bother you?\"\n\nI frowned. \"Does it bother you?\"\n\nSheila hesitated and looked away, \"Doug, I just don't want you to regret this.\"\n\nI scooted closer to her, breaking off one of the slender stalks of tall grass. I put the stalk in my mouth and began to chew, \"Look, we've been over this...\"\n\n\"I know,\" she said, suddenly a little irritated, \"I know you know how you feel right now, but that might change when I start sagging and needing Depends.\"\n\nI laughed. \"You're out of your mind.\"\n\n\"I'm serious Doug,\" Sheila said, \"I'm not a spring chicken anymore.\"\n\nI looked at her for a moment, feeling both love and frustration. She had been grappling with this issue now since we found out she was pregnant. It hadn't been easy for her, and she had even tried to break up our secret romance to save me the grief of the baby and her perceived advanced age. In the end, I had to argue with her and even plead with her not to leave, to convince her that she was wrong. Part of me feared she would never accept that I was here to stay.\n\n\"Babe,\" I said as I put my hand on her arm, \"You know that if I really didn't really want to be here, I wouldn't be. You're just going to have to come grips with the fact that I'm in love you, and that I want you and this baby and that I'm not going anywhere.\"\n\nSheila looked at me, her eyes a little glassy, \"I feel so stupid.\"\n\n\"Don't,\" I ran finger down the side of her face, \"I know what I'm getting in to here.\"\n\n\"Do you?\" she asked and held my hands, \"You're so young. You have your life ahead of you. I fell like I'm condemning you, Doug.\"\n\nI put my finger to her lips and stopped her. I said softly, \"It's you, Sheila. No one else will ever make me feel like you do. We'll deal with whatever comes our way, okay?\"\n\nSheila smiled such a beautiful, perfect smile that it almost made me feel high, \"Even when you have to carry my to the bathroom?\"\n\n\"Even then.\"\n\n\"When you have to find my false teeth?\"\n\nI laughed, \"We'll keep an extra set just in case.\"\n\nSheila kissed me suddenly and deeply on the lips, her tongue rolling with mine creating an intoxicating sensation that soothed any fears I might have brought with me to this perfect place. The whole world seemed to melt away and I felt a rare moment of clarity and balance. That seemed to be the core of our relationship when everything else was stripped away. We balanced each other out.\n\nSheila slid her hand down to my crotch and began massaging.\n\n'Balance and great sex,' I thought.\n\nI placed my hand on her exposed thigh and slid it up slowly along her silky skin to the bottom hem of her sundress. Sheila released a happy sigh and smiled at me as she opened her legs up for me. I looked at her knowingly and gently ran my fingers over the fabric of her cotton panties. I could already feel the heat and moisture from her vagina through the panties as I rubbed her. She gazed at me as I caressed her sex, lovingly teasing it with my fingers. \n\nI ran my fingers to the edge of the fabric covering her mound and after a moment of deliberate hesitation, I slipped beneath the fabric. I found her smooth lips, already swollen in anticipation and becoming deliciously wet. Sheila adjusted her position and opened her legs a little bit more as I teased her cunt, running my fingers back and forth. She rested her hands on her full breasts and began playing with her nipples through the fabric as I pushed my index finger slowly inside her. \n\nSheila began breathing faster as I slipped three fingers into her hot interior and began a sensual push. Her fingers grasped her skirt and pulled it up over her pregnant stomach as I finger fucked her. I pulled her panties aside with my freehand and exposed her glistening sex to the sunlight. I let my index finger slide out of her cunt and concentrated on her clit, all the while my other fingers rocking in and out.\n\n\"You know just how to do it,\" she commented.\n\n\"I have a good teacher,\" I smiled and rubbed her clitoral hood, coaxing her clit to come out.\n\n\"Mmm, Doug,\" she breathed and licked her lips, \"Keep doing that and you'll have a big wet mess down there...\"\n\n\"I want a big wet mess down here.\" \n\nSheila finally got tired of her dress and pulled it off, maneuvering off balance for a moment as she arched her back. The dress came off and I pulled her panties down all the way, setting them on the dress. She wouldn't need those for a while anyway. As big as her stomach had gotten, her breasts had swelled up proportionally as the pregnancy went on. They had been massive before, but now they had to be in the E-cup range. Only the marvel of engineering that was her bra held her milky orbs in place.\n\nI had heard that some men find their mates unattractive during pregnancy and that the large stomach can be a turn off. I couldn't really see the logic to be honest. Sheila looked gorgeous, and I had never wanted her more than I wanted her right now. Something wet fell on the back of my neck and rolled down in cool trickle. I held my hand out and looked up. The storm clouds were sporadically clumped in the sky, patches of dark gray rolling against a bright blue. And then it began to sprinkle, the sunlight catching the raindrops and turning the world into a surreal dream.\n\n\"Now is this romantic or what?\" I leaned in and kissed her, the subtle earthy scents from the freshly dampened soil below rising up into the air. The rain was quietly drumming against us as I held her. There were only a few times in my life I can remember a single perfect moment, but as the rain fell on us I knew this was one of them. \n\nThe water rolled off her face in fat drops, her skin golden and shining in the luminescent rainfall. A small pool of crystal clear water had collected between breasts as her bra became transparent. Her nipples were hard and her areolas were a faded brown ghost behind the white material. Her hair had soaked already, and she brushed the strands back from her face with a simple sweep of her hand. She looked at me, her dark eyes alive with color as the sun caught in her irises and revealed her pupils to me. \n\n\"You okay?\" she asked.\n\n\"I love you,\" I said. It was an impulsive action, one I couldn't really control anymore than I could control how I felt. It just felt right to say it.\n\n\"I love you,\" she smiled, and then cocked her brow, \"You know... we've never had sex in the rain.\"\n\n\"There's never been a better day,\" I said.\n\nWith that, I scooted down and lowered my face to her pussy. I began licking slowly up and down her slit, my tongue pressed firmly against the soft flesh of her sex. As I slipped my tongue into her and began exploring her inner sex, a roll of thunder rumbled overhead and the rain began falling harder. I lay on my stomach as my clothes stuck to my body and Sheila raised her thighs onto my shoulders. I gently spread her labia apart and passionately kissed the hot meat inside, flicking my tongue along the delicate path to her clit. Sheila moaned and resumed the massaging of her tits as I sucked her labia into my mouth. I swirled my tongue around her clit, nibbled for a moment and then returned to her opening.\n\nDragging my tongue down from her slit to the no man's land between her sex and ass, I decided to be bolder in my pleasuring of her. Sheila shivered from the touch of tongue and raised her hips to meet my oral gestures. I worked my finger in her pussy for a moment to lube it up and then I penetrated her ass. Sheila sucked in air as her muscles tightened reflexively around my finger. I didn't much care for anal sex, but Sheila had finally admitted to me that she loved it. And since I loved seeing her in the throes of sexual gratification, I slowly worked my finger in and out of her hole. \n\n\"Oh God,\" she huffed, her breathing rapid and suddenly short. She pulled the straps of her bra off her shoulders and pushed her cups down to expose her breasts to the rain. She pulled and teased her right nipple while she raised her massive left breast to her lips. Sheila sucked her nipple into her mouth and began teasing herself as I lowered my lips to her pussy again and ate her out. \n\nI attacked her pussy, licking and nibbling her. I let loose on her clit, dancing around her hardened button as it came out from hiding under its hood and played in the rain. Sheila was moaning now, her body writhing as she pulled and licked her nipples, carried away by the flood of sensations in her body. Her legs began to tighten around my neck, and I knew she was close now. Every breath carried a lustful sigh and whimper of approval as I suckled and nibbled on her. I grasped her hips tightly and prepared as she cried out into the rain.\n\n\"Oh fuck YES!\" she screamed and orgasmed hard, her hips bucking as she squirted her nectar out. Her cum dribbled down my chin as I continued on her clit. Sheila rode the lightning of her orgasm, her teeth clenched tight and eyes shut as she shook. Finally, she began to ease up, breathing hard and softly saying my name over and over.\n\n\"Oh Doug,\" she whispered, \"Oh my God...\"\n\nSheila looked at me and motioned with her finger for me to take my clothes off. She watched with hungry eyes as I stood up and pulled off my soaking t-shirt and dropped my shorts and underwear. My cock was swelling, erecting to it's full seven and half inches as rain spattered on my naked body. My nipples were hard and pointed as Sheila got on her knees and ran her hands over my slick torso. There was something so primal about the rain, so raw about our nudity in this open space that made me feel even sexier to her.\n\nI knelt down in front of her and we began kissing, our arms embracing each other and our hands exploring. I could feel her hand grasp my penis and began going back and forth. She gently pinched my large head between her fingers and teased me as we kissed. I found her heavy breasts and massaged them as our tongues danced together. She always knew just how to make her hand jobs perfect, whether it be the specific way she would squeeze and pull on me or the way she would give my head a little twist with each stroke.\n\nI kissed her cheek, down to her neck and across the expanse of her chest. Fresh rainwater lapped into my mouth as I ran my tongue over her flesh. I felt myself harden to my full length as I slid down to the valley between her breasts. The water drained down the crevasse of her tits like a flash flood in a ravine. It poured down her stomach and to her bare pussy where it clung for a moment and then fell in a stream to the blanket. Sheila ran her fingers through my hair as I suckled on her rock-hard nipples, teasing and loving them. She pulled my face closer to her glistening breasts, encouraging me.\n\n\"Fuck me,\" she whispered huskily and lay on her side.\n\nI lay behind her and she lifted her leg into the air. Sheila took my cock firmly in one hand and rubbed my head around her hot slit, getting me lubed and positioned at her entrance. She moved her hips and the head of my cock slid inside her ass. We both moaned out loud as she moved her hips again and the entire length of my cock disappeared into her ass. I took a moment to position myself so I wouldn't slide out of her and began thrusting.\n\nMy cock sank into her tight hole to the hilt. Sheila reached back and grabbed my ass cheek as we started fucking, slowly at first and then fast as the rain poured down. Her skin was hot against mine and I would not have been surprised at all to see steam rising from our naked bodies as we found our rhythm. I cupped her breast in my hand as I fucked her, her nipple poking out from between my fingers. The fleshy mound bounced and jiggled with each thrust in a hypnotic display of her natural bustiness.\n\nSomehow, we moved closer together than we already were. I could hear her breathing, her small feminine moans of pleasure that were slowly gaining in frequency and volume as I rammed my rod in and out of her. She released my ass and began rubbing her clit with a fury I had never seen before. Her arm jackhammered as she worked for her orgasm, the combine efforts of my cock and her fingers bringing her closer and closer.",
        "I could feel my own orgasm rapidly approaching as the heat of her interior and the tight pull of her muscles electrified my cock. My balls were slapping and dripping a mix of rainwater and body fluids as we worked for a mutual climax to our lovemaking. I began grunting and groaning as I struggled to keep the dizzying pressure of my orgasm back. Sheila was screaming now as I relentlessly fucked her, my mind lost in a haze of pure sexual instinct. \n\n\"OHHHHHH!\" She heaved, her eyes wide open as her orgasm seared through her body. Her pussy spasmed around my cock and that was it for me. I squeezed her tit as my cock swelled suddenly, went as rigid as a piece of steel and ejaculated my load of semen into her. I felt myself shaking as my orgasm ripped over my body, tingling everything from head to my toes.\n\n\"Sheila,\" I whispered and withdrew from her.\n\n\"Yeah?\" she managed.\n\n\"You're really good.\"\n\nI pulled her to me as my cum began leaking out of her ass.\n\n\"It's raining really hard now,\" Sheila noted. I looked up and saw that most of the blue sky was gone now.\n\n\"Yes it is,\" I agreed.\n\nSheila looked over her shoulder at me, a mischievous grin on her face, \"Wanna go again?\"\n\nI smiled, \"Hell yes.\"\n\n***\n\nSheila and I waited at the Starlight Caf\u00e9. I thought it was ironic that she chose the same restaurant we had almost broken up in to tell my father about the baby. Sheila told me that the restaurant just felt right to her, and that if she were going to be yelled at by an irate parent, that she should at least be able to have her favorite dish in the process. I couldn't argue with her logic. \n\n\"He's late,\" Sheila said and squeezed my hand.\n\n\"Well, I'm sure he and mom had an intense conversation before he left the house,\" I replied and took a drink of my ice water. Mom had utterly refused to come here and meet. She had been appalled at the very notion of Sheila and I as a couple and it was her subsequent anger with me that had forced me out of my house. Sheila had allowed me to move in with her, but the fact remained that our secret was out now. The whole town knew who we were and everywhere we went I could feel eyes on me. It's funny how people will ignore someone they don't know until there's some juicy gossip or a moral question of ethics that's just too hot to pass up.\n\nSheila and I had become the hot item of discussion for people who didn't even know us. At first it bothered me. The way some people would glance over their shoulders while walking by or the odd little comments said under secretive breath in the grocery store checkout line. I wondered just how many of them were actually judging us based on our age difference and how many of them were just playing along with the popular moral code that says an older woman can't be with a younger man?\n\nAs Sheila had grown more and more pregnant, she had opted to stay home and out of sight. Her fear of what my parents would do had been ruling her. I figured some people had probably figured it out by now. I knew her friend Ellen Gordian from the realty office knew about it. It was Ellen who had taken over for Sheila while she went on an extended maternity leave. Sheila had also cashed in all her vacation time, which allowed for her to take almost a full year off from work. And, the fact that the boss was her cousin helped things too.\n\nBut when we walked in here and the people saw her belly, all of our careful secrecy and measures to insure privacy went out the window. It was inevitable, but I wish everyone didn't feel the need to stare so much. The waiters and waitresses were smiling a little too politely as they handed out menus and poured water. I think the constant scrutiny of the world around us wasn't bothering Sheila so much as her fears that it was going to bother me. She worried their opinions and heckling would change my opinion of her. So I just decided to stop letting it get under my skin. I loved her and that was that. If she had been eighteen like I was people might have found some other reason to complain and judge. In the end it didn't matter. People were going to think what they would. \n\n\"Doug,\" my father said and scooted into the seat across from us. He purposefully ignored Sheila, who simply reserved her offense at his rudeness and smiled politely.\n\n\"Hey dad,\" I smiled warmly, \"Mom wouldn't come?\"\n\nDad looked at me and said, \"You know she wouldn't come.\"\n\nI nodded uncomfortably as Sheila said, \"I'm sorry to hear that.\"\n\n\"Well Sheila,\" my father picked up his menu and opened it up, \"Sometimes its hard to adjust to change.\"\n\n\"I want this to be civil Dad,\" I said as he radiated his discomfort and irritation with me, \"We need to learn how get along here.\"\n\n\"Doug, you're eighteen years old,\" Dad said flatly, \"Until last April you were still reading comic books and building model starships.\"\n\n\"I still read comic books,\" I said.\n\n\"He's got me turned on to 'Spawn',\" Sheila offered.\n\nDad put the menu down and sighed, his eyes pained and discouraged, \"You think this is funny?\"\n\n\"Not at all,\" Sheila said politely and met his stare, \"It's unconventional, Roger. It may even be unorthodox but it's not funny.\"\n\n\"You are a grown woman with a daughter his age,\" Dad said pointed at me, \"You've just been recently divorced from a difficult marriage and now you're honestly going to tell me that this 'relationship' is anything more than a spring-winter fling?\"\n\n\"Dad please,\" I shook my head. This was already going bad and we hadn't even ordered.\n\n\"Listen to me,\" he said and looked at us both, \"Doug, you are too young to even know what love is, let alone claim you feel it for someone.\"\n\n\"You know your confidence in me is under-whelming, Dad,\" I said. I had hoped he would at least listen to us and try to be fair about things.\n\n\"How much further must this go on?\" he asked and leaned back against the dark fabric of the booth, \"Will you two actually try to make a family and a home? What happens when Sheila here is able to get the senior discount at McDonalds when you are still in your thirties?\"\n\n\"Nice,\" Sheila looked out the window and frowned.\n\n\"Dad come on,\" I whispered, \"That was rude.\"\n\n\"It is the unpainted truth, son,\" he shot back, \"Forgiving the fact that you committed adultery with a married woman, and forgiving the fact that you've been lying to us and everyone else can you really expect me to take this seriously? You have a future ahead of you as an illustrator Doug. You have college coming up and if you continue with this charade you'll be throwing it all away.\"\n\n\"I'm not asking for your blessing,\" I said, \"And I'm not asking for Mom's either. All I'm asking for here is understanding.\"\n\n\"This is insane,\" Dad hissed.\n\n\"This is what I've chosen for myself,\" I felt my cheeks beginning to burn with embarrassment, fear and anger. People were starting to watch us as our conversation slowly became an argument. Dad's attitude had grown about as black as his charcoal suit and I swear I could have fried an egg on his forehead. I lowered my voice and said, \"I know the score here, okay? I know the age difference and I know what it means to be in love. I know this is going to be hard, but Dad I swear to God she is worth it.\"\n\n\"Even at the expense of your future?\"\n\n\"She is my future Dad!\" I said a little too loudly. \n\nHe looked at me with furious, smoldering eyes as his mouth dropped open a little. The man who at one time in my life had spanked me with a belt for the smallest of insurrections was focusing his anger on me. His fear was just as potent in my opinion. He was afraid of how he was going to look because of this. It wasn't really about Sheila or me or even the age difference. He was worried about the local PR and how he and mom were going to look. I felt my hands beginning to shake a little as I summoned my courage and spoke against my father, \"You have no right to tell me what I need for my future.\"\n\n\"I have every right,\" he fired back, \"As your father I have every goddam right!\"\n\n\"Dad you're not even trying to understand this,\" I said as the entire restaurant casually listened in. Even the guys in the kitchen were peeking out through the swinging doors, their eyes wide with curiosity. I was struck with a sudden calm as I sat there. I realized I had reached a turning point in my life. I was aware of the decision I had to make now as I looked out across the sea of faces in the moody atmosphere of the Starlight Caf\u00e9. \n\nMy eyes found Sheila and saw her looking as sad and despaired as the night she almost left me. She was being consumed by guilt and my father's penetrating stare. Sheila had come here hoping to mend the wounds inflicted on those around us because of this. She had hoped as I had hoped that maybe some common ground could be reached with my family before the news of the baby was announced.\n\nSheila began to cry as everyone watched. \n\nAs my father ranted on and on about how irresponsible she was being and about how selfish she was to claim an eighteen-year-old boy for her own I felt my childhood fall away from me like a dead husk. I think back now and see that the moment of metamorphosis had happened in Sheila's kitchen that night an eternity ago. The process had been long and painful and wonderful. But the moment of my emergence from the chrysalis of childhood to the burden and joy of adulthood happened as I listened to the man I respected most berate the woman I loved more than anything else.\n\n\"Enough,\" I said quietly. Dad was yelling at Sheila now. She simply sat there, either unwilling to fight back or unable to. She looked overwhelmed and helpless. Her beautiful dark eyes were glassy and fixed on my father in a simple receptive stare, her bottom lips slightly pinched against her upper.\n\n\"... and if you think for one minute we're going to let you ruin his life then you're sorely mistaken,\" my father jutted his finger at her as though he were lecturing a child.\n\n\"She's going to have my baby,\" I said loudly.\n\nMy Dad looked at me, his jaw unhinged and opened wide. \"What?\" he breathed.\n\n\"Sheila and I are going to have a baby,\" I repeated. It was so strange feeling this calm and collected despite my anger.\n\n\"Oh Doug,\" he shook his head.\n\nI looked around the dining room and then stood up. I don't why I did what I did next, and even now I wonder at my sanity. I suppose my youth and anger had fueled me to a point where I no longer cared about the previous ties of parents and friends and community. In retrospect, I can see that I wanted to both defend Sheila and somehow justify once and for all the validity of our relationship. \n\nI looked out at all the people in the restaurant saw that I recognized everyone there. Seated in the dim lights was the grocer, one of my old teachers, a couple of underclassmen and random faces that I had seen almost every day of my life growing up here. They were the backdrops to my life, and I addressed them all. They would carry my message as they had carried the rumors and hurtful gossip.\n\n\"You all think this is just a big game, right?\" I asked as loudly as I could without yelling, \"I see you all looking at us and acting like we're below you or something. What kind of town is this?\"\n\n\"Sit down,\" Dad warned, his eyes blazing.\n\n\"I asked what kind of town is this?\" I ignored him as the restaurant fell dead silent. I looked at all of them, my heart thundering in my chest as I spoke, \"In the grocery store, in the library and in the streets all of you gawk and stare and laugh like we're freaks. Don't any of you have lives of your own? Aren't any of you happy?\"\n\nMy father grabbed my arm and tried to sit me down. I jerked back and shoved him into his seat, knowing that I had made my point and ruined my relationship with him at the same time. He was shocked and disbelieving as muted gasps from the people around us hit my ears. Sheila was wide-eyed and unable to say anything as I fumed. I had had enough of the secrets and sneaking around. I believed with all my heart that Sheila and I were right for each other, and fuck the world if it didn't agree.\n\nI turned back to them, \"My father here is so worried about what you people think that he and my mother have not only thrown me out of my home, but have also come within a second of disowning me. He is ashamed of me! Maybe all of you are too. Or maybe it's just that all of you have nothing better to do than make fun of what don't understand. Maybe all of you just can't resist that good old fucking mob mentality. I know all of you... I grew up with all of you. I'm a good man, goddamit, yes I am. And Sheila is a good woman. Anyone who says otherwise needs to speak up now!\"\n\nEveryone was silent.\n\n\"Come on!\" I shouted and glared at them, \"You all don't mind whispering and talking behind our backs... so come on, step up.\"\n\nHarold Weingardener, the local grocer and one of the biggest loudmouths on the subject of our situation was sitting at to the table next to me, looking down at his plate of spaghetti. I said to him, \"Come on, Mr. Weingardener.\"\n\nHe looked up, his round face blushing.\n\n\"You always have an opinion, sir,\" I said, \"Say it to my face.\"\n\nHis blue eyes met mine, both ashamed and apologetic and yet unwilling to allow an admission. Everyone in the establishment shared his expression of confliction, and I knew I was walking a fine addressing all the adults in here like this. I was only a kid, about that Dad had been right. But the fact that none of these so-called adults stood up or put their foot down about my outrage said a lot to me. It said they were all guilty of this and all of them knew it.\n\n\"Anyone?\" I shouted again and looked around, \"Either you say it now or shut the fuck up.\"\n\nSilence.\n\n\"I've had it with the staring, with the gawking and with the gossip,\" I told them as my face burned and my hands trembled with pure rage, \"It's giving me the shits! You all want some juicy gossip? You all want something to talk about to take your minds off your own lives for a while? How about this shit? I am in love with this woman-\" I turned and motioned to Sheila, who smiled the most beautiful smile I had ever seen at me, \"-and not only are we going to be together but we are also going to have a baby together too. And you can all be a part of that, or you can go fuck yourselves.\"\n\nI looked at my father, my heart breaking into two pieces as my throat tightened, \"You and Mom can be a part of this or not, Dad.\"\n\nI offered my hand to Sheila. \n\nShe slipped her fingers into mine and I helped her up. My father looked at her pregnant belly, his eyes tired and tinged with a hint of sadness. I saw guilt there as well among all the questions and feelings rocketing back and forth in his mind. He said nothing and didn't even look up as Sheila and I walked away. \n\nWe left with our heads held high in the air. I was proud of the gorgeous woman beside me, and I was even more proud of the baby she was carrying. I loved them both so much. If I were going to hold to the speech I had given to the restaurant, it was time to start showing it. There would be no more secrecy or rumors. I had given them the hard truth and probably burnt a few bridges in the process.\n\nBut I didn't care. I had Sheila.\n\nI opened the door for her and we stepped out into the humid August air as the people inside watched. I let the door close easily and we walked to her car. Her dress billowed a little in the evening breeze as I opened the door for her. She went to step inside and then paused and looked up at me. She had tears in her eyes and a smile on her trembling lips. She touched my face and said, \"That was the bravest thing I've ever seen.\"\n\nI thought for a moment, \"It came from the heart.\"\n\n\"I love you,\" Sheila kissed me.\n\n\"I love you,\" I kissed her back.\n\n***\n\nFIVE MONTHS LATER\n\nThe doctor had finished giving Sheila her epidural shot when Elle arrived.\n\nI was holding Sheila's hand as the drugs kicked in and she relaxed in the large bed of our delivery room. Her insurance had been able to cover us using one of the hospitals large private birthing suites. The room was lit in mellow yellows and painted in earthy pastels promoting a relaxed and calm environment. I was nervous despite the soothing d\u00e9cor, and I found myself even a little giddy as the moment we had been waiting for over nine months was finally at hand.\n\nElle smiled and quietly walked over to the opposite side of the bed and kissed her mother on the forehead. She said, \"Hi, Mom.\"\n\n\"Hey, baby,\" Sheila smiled. The drugs were already beginning to keep her on an even, low-key medium. Sheila took Elle's hand and kissed it, \"I'm so glad you made it here.\"\n\n\"Me too,\" Elle said and then looked at me, \"How are you, Father-to-be?\"\n\n\"Nervous,\" I said, \"But happy.\"\n\nFifteen minutes later, one of the nurses came over and said, \"Would you mind giving me a moment with your wife?\"\n\n\"We're not married,\" Sheila said dreamily.\n\n\"Oh,\" the nurse smiled, slightly embarrassed, \"We just need to check and see if the baby is still turned and get our stuff ready for the birth.\"\n\n\"Of course,\" I smiled and kissed Sheila on the forehead, \"We'll be right outside.\"\n\n\"Only a minute,\" the nurse assured me as Elle and I stepped outside the delivery room.\n\nThe door closed and we were alone in the light blue hallway. I leaned against the opposite wall and took a deep breath as Elle stood in front of me. She looked beautiful as always, her hair hanging down loose around her shoulders in a thick, rich display of the bronzed red her mother had given her. She was dressed in simple khakis and a white t-shirt that framed and promoted her large breasts. I looked away from them, already knowing my genetic predisposition to gawking at huge tits. Elle sighed and then said, \"So really, how are you?\"\n\n\"Mom and Dad decided not to come,\" I shrugged.\n\n\"I'm sorry,\" she said.\n\n\"Me too,\" I agreed and then added, \"It's their loss.\"\n\n\"Doug,\" she began and then hesitated for a moment, \"Doug I'm going away for awhile.\"\n\n\"Why?\" I asked, suddenly feeling upset. \"Where?\"\n\n\"I need to get out of this town for awhile,\" she said and leaned against the door to the delivery room, \"I have to find myself, you know?\"\n\nI nodded, \"Yeah, I guess so... when?\"\n\n\"Today, actually,\" she said and pulled a bus ticket out her back pocket, \"I'm off to Sacramento and then from there, I'm not sure.\"\n\n\"Elle,\" I said, \"What will you do for money?\"\n\n\"I have five thousand in my college fund,\" she replied and tucked the ticket back into her pocket, \"Let's face it, I'm not Harvard material. I think I'm going to see what's out there and then decide.\"\n\nShe looked at me, her eyes filled with a thousand things she wanted to say. Things that we both knew she couldn't say to me. Things that I had wanted hear desperately not more than a year ago. We both knew how we felt about each other, but the simple fact was that I loved Sheila. Elle knew it and I knew it. And we weren't the kind of people who could just ignore something as real as love just to satisfy a physical attraction. \n\nElle smiled a little and walked over to me. She hugged me tight and I hugged her back, knowing full well that it would be awhile before we got to talk again. She still was embarrassed over the night she had come on to me and I had refused. Hell, I was still embarrassed over it. I had hurt her feeling unintentionally and caused a rift between us that even now wasn't really healed. I hugged my friend and wished it could have been different.\n\nIf Sheila and I hadn't got together, then maybe it would have been.\n\n\"I love you,\" she whispered in my ear, and I knew she meant that as more than just a friend. Her voice was trembling.\n\n\"I love you too,\" I said. There might have been time I would have implied more than just a friend, but it was not now. In that moment, I allowed total honesty with myself and acknowledged that I was not only attracted to Elle, but also very fond of her. More than I should have been if I was going to commit to Sheila. I wasn't going to lie to myself about that. But she was my friend. It could never be more than that.",
        "Elle kissed my cheek and broke our hug, \"Goodbye, Doug.\"\n\n\"Aren't you going to say goodbye to Sheila?\"\n\nElle looked at the door to the delivery room. She said, \"Tell her for me okay?\"\n\nI nodded and watched her leave, rounding the curve of the hall, past the nurse's station and then out the front doors. I suspected that if she had gone back in to tell Sheila goodbye, then Sheila would have wanted explanations. She knew just as well as I did that Sheila would have felt guilty over her daughters' feelings for me. Sheila would have wondered if I had feelings for Elle. In the end, the revelation of why she was leaving would hurt Sheila more than it would help. Elle was leaving because there was no other way. Elle wanted this to be a day about the baby, Sheila and I. She didn't want it to be about her.\n\nI had to respect her for that.\n\nThe door opened and the nurse popped her head out, \"Doug?\"\n\n\"Yes,\" I said.\n\n\"We're ready to begin.\"\n\n***\n\nFOUR MONTHS LATER\n\n\"This boy will not feed,\" Sheila said as Logan lay in her arms, asleep and content after only a minute of suckling at her nipple. Sheila's already huge breasts had grown even larger during the pregnancy, but now they were impossibly massive. She had bought one of those maternity bras (an H cup size, no less) that had the cups that unclipped and folded down for easy access. Logan was happily nudged up against her milky breast, his raging fit to be fed apparently satiated.\n\n\"Maybe he just wanted a small night cap?\" I offered and looked at the clock beside our bed. It was going on midnight now, and Sheila was looking tired and frustrated.\n\n\"He needs to eat,\" she told me, \"If he doesn't, my tits are really going to start hurting.\"\n\n\"What about the breast pump?\" I flipped the channel again and found T.V. Land. I was delighted to find that \"The Odd Couple\" was on, but was unfortunately followed by \"Full House.\" I said, \"How can they call 'Full House' a classic? What the hell is going on here? 'Night Court' should be on here before 'Full House.'\"\n\n\"Uh huh,\" Sheila said absently as she laid Logan in his crib and positioned the pillows and blankets around him so he wouldn't roll, \"The breast pump is broken, remember?\"\n\nSheila sat back down on the bed, her massive breasts jiggling under her t-shirt as two wet spots formed in the fabric over her nipples. I watched out of the corner of my eye as she held her tits in her hands and made a pained face. We hadn't really had sex that much since Logan arrived. At first, she needed a month for her vagina to recover from the tearing and stretching. Three months later, Logan wanting to be fed or held usually interrupted any chance we had to get intimate. Which was cool. He was just a little baby, and he couldn't help the fact that his parents were really horny and frustrated.\n\n\"Doug,\" she looked at me.\n\n\"Yeah?\"\n\n\"You going camping?\" she asked and motioned to my crotch. My cock had hardened and stiffened in my shorts as I was watching Sheila massage her tits. It was a thick tent pole under my shorts and I smiled casually.\n\n\"I'm just appreciating the wonder of motherhood,\" I said.\n\n\"I have an idea,\" Sheila smiled at me slyly.\n\n\"Oh?\" I was desperate for her idea to involve sex. Please God, let her idea involve sex...\n\n\"You ever tasted breast milk?\" she asked and sat across from me on the bed, her legs crossed and her heavy breasts hanging down, stretching her t-shirt out.\n\n\"No...\" I said. \n\nI had wondered about what human milk tasted like, but I'd never really considered actually finding out. Sheila smiled and pulled her shirt off. Her full breasts caught on the fabric and pulled up with the bottom for a second. They bounced back into place. Her twin fleshy orbs were silky white and the areolas were pink and brilliant. Her nipples had hardened and were slick with her milk. I looked with hungry eyes as my cock went rigid and implored me to sample her.\n\n\"You're so good at playing with my tits anyway,\" she said and held her right breast in her hand as she tweaked the nipple and coaxed some of the fluid out. Three small bubbles of white milk emerged from the tip of her nipple and contrasted the swollen nub. Sheila milked a little more out and rubbed it around making everything shine.\n\n\"Anything I can do to help,\" I nodded. \n\nI scooted over to her and Sheila leaned forward, offering her breasts to me. I licked her swollen left breast and teased the nipple. I took her nub between my lips and began suckling on her. After a moment, a strangely bland and yet sweet tasting liquid began filling my mouth. Sheila gasped a little and ran her fingers through my hair. I sucked more of her nipple into my mouth and drank her milk as I massaged her other tit with my hand. Sheila was breathing harder now, her mannerisms becoming more and more indicative of sexual arousal. She slipped her hand down over my bulge and rubbed back and forth as I flicked her milky nipple with my tongue.\n\n\"The other one now,\" she whispered.\n\nHer nipple slipped out of my mouth with a wet little *pop* sound and I slurped up the excess milk that was running down the curve of her fleshy mound. I looked to her right nipple and saw it was leaking now profusely; a thin stream of milk was dribbling down her breast and stomach. She wasn't kidding about how full her tits could get with milk. I earnestly sucked on her right nipple and was rewarded with another burst of warm milk. I found myself drinking from her tit and enjoying it as she put her hand down my shorts and began stroking my cock.\n\nI massaged her left breast now, feeling the heavy weight and silky texture. Sheila moaned her approval as I sucked her milk out. Another stream of her milk ran down my between my fingers in a warm trickle. Sheila smiled and purred as I sucked her nipple in hard and tweaked her left nub. Her milk was filling me up quickly as I relieved the pressure from her mammary glands.\n\n\"I want to fuck you,\" she whispered to me and pinched the head of my bulbous, swollen head.\n\n\"I want to fuck you,\" I said through a brief pause in my suckling. My cock felt like it was ready to rip out of my shorts. Sheila tugged my shorts down and revealed my hard dick in the illuminated television light.\n\n\"You got to milk me,\" she said and leaned forward as I released her breast. She lowered her tits to my cock and began squeezing her milk out on my shaft. The warm liquid coated my dick and she continued dribbling it out until she had completely soaked me. I felt her milk running down my balls and to the crack of my ass. She licked my head and then looked up, \"My turn to milk you.\"\n\n\"Sounds good,\" I mumbled as she pulled my cock into her mouth.\n\nSheila ran her tongue over her lips, moistening them before pressing them to the head of my milk-soaked cock, making it pulse and throb in her hand. She licked my head with a long slow purposeful lick that made me shiver as she tasted her own milk. She kissed it several times, moving her lips around on the head, sliding down the shaft and back up again and making slurping sounds that made me want to orgasm right then and there. \n\nThe tip of her tongue slid out from between her lips and danced over my head. She tickled the tip of my cock with it, causing bursts of heat to go searing through me. I groaned and she bathed my dick with her tongue, making it shiny with saliva and breast milk. Sheila then sucked me into her mouth, the back of her throat hot and slick against my throbbing glans. The head of my cock was enveloped in the warm wetness of her mouth, her tongue wriggling under my shaft. \n\n\"Good God,\" I moaned and held the back of her head, her bronzed hair spilling through my fingers in thick tangles.\n\nI could feel the orgasm building up fast. I gripped the bedspread and clutched tight as I moaned and grunted under her expert oral stimulation. Knowing me as she did, Sheila encouraged me further as she feverishly kicked up her pace and ravaged my member with her mouth. The orgasm screamed out of my sack and blasted up my urethra as she prepared to milk me.\n\n\"Fuck!\" I cried out as I released my load. \n\n\"Fuck yeah,\" she said as my cock slipped from her mouth, still spurting hot ropes of sticky cum. My semen splattered across her tits as she licked her lips. A thick gob of my fluid was hanging from her chin in viscous white line. She rolled her tongue out of her mouth and caught the line of semen. She slurped it up and swallowed. She pumped my cock with her hand and licked it clean. \"Delicious.\"\n\n\"You are the best,\" I stroked her hair. Sheila kissed her way up my body, dragging her tongue all the way. She worked her way higher and higher until her huge tits grazed my face. I licked and kissed them as she got on her knees beside my head. She then straddled my neck, her pussy a few inches away from my lips and grasped the headboard with both hands. I could smell her sweet nectar, the scent of a woman that was undeniable. \n\nI immediately set to work, forsaking her cunt and going right for her clit. I swirled around it, flicking and suckling on it as I massaged her soft ass. She closed her eyes and tilted her head back, moaning as quietly as she could. My face was slick with her juices as I lapped and suckled at her clitoral hood. Slowly, I coaxed her button out and began teasing her as my hands roam up her body and to her breasts. I cupped them and squeezed.\n\n\"Pinch them,\" she breathed, \"Pinch them...\"\n\nI pinched and pulled at her nipples as Sheila gasped and squeezed her thighs together a little. Her hips were swaying now, mimicking the motions of sex as I pushed her towards her orgasm. I worked my tongue over and around her hot clit, making it as hard as I could and bringing her closer and closer to her finale. Sheila bit her lips as I nibbled on her clit and then rubbed furiously with my tongue. She muffled her cry of pleasure against her arm as the orgasm bloomed and radiated through her.\n\nHer hips whip lashed violently as she breathlessly whimpered, her hands in her hair and back arched as the orgasm tore through her. Her cum splashed my face in a single squirt as she rode the wave of heat deep in her body. I could feel her thighs spasming as she slowly came down from her high. She dismounted me and lay down beside me as she caught her breath.\n\n\"Fuck,\" she breathed, \"Yes, baby... oh fuck.\"\n\nI rolled over and kissed her deeply, her cum still fresh on my tongue. She embraced me with a fevered passion as our legs tangled together. My cock was hard and ready to go as she rolled to her side, her back facing me, and exposed her vagina. I scooted up behind, propped myself up on my elbow as she lifted her leg and grabbed my cock. She no longer needed to guide me in as we had gotten so used to each other that it was like second nature.\n\n\"Be gentle,\" she whispered, \"It's been awhile.\"\n\n\"As gentle as you please,\" I promised as my hips began to move back and forth on their own.\n\n\"I missed this,\" she whispered and closed her eyes as we joined together.\n\nIt took us a few minutes to get our rhythm down right as we grinded, circled and got used to each other. She brought her hand to my ass and held me there as we began to pick up speed. My hand found her large right breast as it bounced and moved to our rhythm. I started pulling and tweaking on her nipple again as she took her other hand started rubbing her clit furiously. \n\nSheila was starting to moan again, her pussy sopping wet as we fucked. We were covered in a film of sweat as our pace quickened and we progressed towards another climax. I hoped we would reach it together as I started putting my all into the thrusts, ramming my cock hard and fast into her cunt. I looked over at the crib and saw Logan was still asleep despite the noise of the headboard banging against the wall and our sexual vocalizations.\n\n\"Fuck me,\" she moaned, \"Fuck me, fuck me, yes...\"\n\n\"Yes baby,\" I groaned and squeezed her tit, her nipple still leaking milk.\n\n\"Oh fuck yes,\" she whined again in that high lust-filled pitch, \"Yes...\"\n\nOur skin slapped together in a rapid sweaty impact as I hammered her, my teeth bared and sweat pouring off my brow. Sheila's pussy tightened suddenly and spasmed hard around my cock as she came for the second time that night, her ass bucking against me as she tried to stifle the scream. I could feel her juices trickling over my balls as I felt my own climax approaching. \n\nI barely had the sense to realize that not only was she not pregnant anymore, but also that I wasn't wearing a condom. I pulled out just as my orgasm erupted from my head and sprayed her ass with cum. Stars exploded and sparkled in front of my eyes, my face feeling numb from the near hyperventilation of our sex. We lay there, huffing and puffing, moaning to each other and kissing as we recovered.\n\n\"That's what I've been missing,\" she smiled and grabbed her t-shirt. She wiped her ass cheeks off and once all my cum was gone, she tossed the used shirt into the corner and rolled to face me. She pulled me close and held me, her breasts full and comforting against my chest. Her hair smelled wonderful, a natural flowery smell that made me feel so safe.\n\nIn the crib, Logan murmured some of his baby tones and then was silent again.\n\n\"Wow,\" I said as my cock ebbed and receded.\n\n\"I know,\" Sheila smiled and kissed my neck.\n\n\"You know,\" I said quietly, \"I'm never going to leave you.\"\n\nSheila was quiet for a moment. \"I know,\" she smiled.\n\nWe kissed again and made love again, following a routine that was never the same twice and yet could be counted upon to always deliver us to that special place when I stopped being Doug Peterson and she stopped being Sheila Messing and we simply became each other. It was as spiritual as it was physical, and every time she touched me I felt like there was nothing I couldn't deal with.\n\n***\n\nSheila and I never got married.\n\nWe talked about it, and we even thought about actually going to look at rings. But in the end, we just agreed that marriage was an interesting idea and nothing more. My mother never gave her blessing on the relationship, and even when she would visit us she'd keep a distance between her and her former friend. Dad came around after a few months of Logan being born. After the incident at the Starlight Caf\u00e9, he apparently had done some soul searching and realized what he was about to miss out on. And, he just couldn't resist the little squirt. In truth, none of us could.\n\nLogan William Peterson was the ultimate expression of what Sheila and I shared. He was the end result and sum total of our commitment to each other. Every time I looked at him, I was amazed. He was beautiful, a perfect combination of the best both of us had to offer. Those in the town who saw him came to see this fact and accepted him. He was a little miracle born out of an amazing story. And he was quite possibly the best thing ever to happen to me.\n\nI graduated from the Art Institute on my son's fourth birthday. Soon after, between my job as a freelance illustrator and Sheila's work at the realty office, we were able to purchase a home in the suburbs just outside the city. I even got to work from home, which was nice. We never really wanted for money. We always had enough and I thanked God for that small blessing.\n\nNot everyone found life so easy.\n\nTom Crane (Sheila's ex-husband) fell in with some bad people after gambling at the Red Spot Night Club, just a few minutes down the street from the Freeling Hotel. Apparently, he took out a few loans to pay for some debts he had accrued whilst playing a shitty night of poker. Tom couldn't make the difference and pay up, so his lenders defaulted him and took his life as payment in full. Police found Tom face down in the bathtub of his apartment off Sixteenth Street, his live-in girlfriend passed out in the bedroom from a hard night of drinking. Rumor has it his dick had been cut off and nailed to the wall, but it could just be a bunch of bullshit.\n\nBut then, Tom had a way of pissing people off.\n\nBrett had his inevitable run in with the police shortly after Sheila and I moved out of the city and into our home when I was twenty four. Again the Freeling Hotel was his target of choice as he planned to deliver three pounds of the kind of heroine he often classified as \"The Fucking Madman.\" He'd gone to the third floor of the hotel, walked to the suite mark seventy-five and knocked on the door. Ironically, it was this same suite that Sheila and I had spent the night together in shortly after we got together.\n\nBrett made the exchange and believed he would actually leave the building with the wad of hundred dollar bills his buyer had given him. I think he also truly believed that he would never get caught. The police had set a trap for him and he had walked right into it. They chased him through the whole building before finally catching him in the kitchen, trying to hide in an old dumb waiter. \n\nWhen they pulled him out, the photographer for the Daily News got a great shot of him being dragged out of the small compartment by his hooded red sweatshirt. Part of me felt sad for Brett, but another part of me felt he had finally gotten what he deserved. In the end, the judge ruled he would spend the next fifteen years in the California State Penitentiary on so many counts of illegal activity that he was lucky to only get fifteen.\n\nElle didn't came back after that day in the hospital. It hurt Sheila that Elle left so quietly and abruptly. I guess it hurt me too, more than I wanted to admit at the time. She left no address and no phone number. She simply disappeared. Occasionally, we'd get a card from her or a letter that would tell us she loved us and missed us. Some of the letters were postmarked from New York, others from Ohio and even one Canada. Whatever Elle had been looking for, she apparently hadn't found it yet.\n\nI thought she might come back for Sheila's funeral, but she didn't.\n\nSheila died in her sleep at the age of fifty-five, ten years after we discovered our love for each other. We made love the night before it happened, and it reminded me very much of the time we made love in that open field by Perkins's Ranch in the rain. She seemed vibrant, full of life and energy. She didn't even look all that old, and we enjoyed each other as we had so many times before. When we finished, she kissed me, told me she loved me and went to sleep. She rolled over to face the wall as I snuggled up behind her and held her close. \n\nI woke up the next morning and leaned over to kiss her. She was cold, her skin a pale white with faded blue shadows that seemed like icy recesses. A small smile was on her lips, beautiful and peaceful. I called her name several times and shook her shoulder. After five minutes I realized and accepted what had happened and let her rest. I kissed her one last time and said goodbye.\n\nIt was a beautiful funeral, maybe more fancy and complimentary than Sheila would have preferred, but it was a fitting tribute to the woman who made my life worth something more than just getting by day to day. Mom and Dad showed up, and I think that when I put the two red roses on Sheila's coffin Mom realized that she had wasted a lot of time being angry. She cried and asked me to forgive her. I did of course, but it wasn't really me she needed to ask.\n\nLogan was nine at the time, and he handled it as well as any nine-year-old could. He looked at me, his eyes those of the woman who had mothered him and asked me a simple question that both cut me to the quick and made me love him all the more. He held my hand and asked, \"Is mommy sleeping forever?\"\n\n\"Yeah,\" I managed as my eyes burned with hot tears, \"Mommy is sleeping now.\"\n\n\"Like Sleeping Beauty?\"\n\nI held back the choke in my throat and smiled as best I could, \"Just like Sleeping Beauty.\"\n\n\"You should wake her up with a kiss,\" he said quietly.",
        "I wished I could. I wished it were that simple.\n\n\"I miss her,\" Logan said.\n\n\"Me too,\" I picked him up and hugged him, \"Me too.\"\n\n***\n\nEPILOGUE\n\nIt's been almost fifteen years since Sheila passed. \n\nI'm forty-eight years old and in two days I'll see my son get married. I still feel hollow and empty, and even now I can't quite figure out to reconcile the loss of Sheila. Maybe that's why I'm at her grave right now, reflecting on the journey we took together. I've been looking down at the dirt and bright green grass blanketing her body for almost an hour now, unable to speak or even move. I know she is still in that shiny wood and brass box. I imagine her hands folded neatly over her stomach and looking beautiful in her simple black dress. Her eyes would still be closed and her lips still frozen in that simple, crooked smile. Time and decay would not have touched her. She would simply be asleep. Like in a fairy tale.\n\nThis was how I chose to think of her in this place. In my mind, we're still in the kitchen of her house making love for the first time or in Perkins' Grove, naked and wet from rain.\n\nFinally, I find the courage to open my mouth and speak.\n\n\"Sheila,\" I begin, my throat tight and constricted, \"I'm sorry I haven't been here with you enough lately.\"\n\nI look down at the grave.\n\n\"I know,\" I say, and I can almost hear her chastising me now. \"I'm being ridiculous I know.\"\n\nI notice a weed growing near her tombstone. I kneel down and grab it by the base of its' stem and pull. It reluctantly comes out, dirt sticking to the wet roots and falling away in tiny clumps. I look at the tombstone for a moment and read, 'Sheila Messing, beloved mother, wife and friend, 1960-2015.'\n\nA smile crosses my lips that I know won't reach my eyes. I look at my ring finger that never actually ever wore a ring but still somehow feels the weight of one. I shrug and tell her, \"I added the wife part...\"\n\nI stand up, my back complaining and popping as I toss the weed away.\n\n\"Logan is getting married,\" I cross my arms and nod, \"A real wonderful girl. They're going to move into the city. Ellen offered him a job at the office, and he accepted on the spot.\"\n\nI wonder if Sheila was nearby, if she can hear any of this. I hoped she was.\n\n\"It's been fifteen years, babe. Why can't I even talk to another woman without feeling guilty?\"\n\nThere's no reply. And then...\n\n\"Hey,\" someone says from behind me.\n\nI don't need to turn to see who it was. I recognize the voice. \"Hey,\" I reply.\n\nElle Crane walks up beside me. I look at her, and I'm not at all surprised to see she looks exactly like Sheila. She's dressed in an elegant black dress, her thick hair swept up and away from her face. Elle glances at me and for a moment and then falters. She looks down at the coffin and then back up at me.\n\n\"What can I do?\" she asks quietly.\n\nBirds chirp loudly in the trees as I stand alone, the sun warm and yet somehow chilling against my face. I say with all honesty, \"I'm not sure, Elle.\"\n\n\"I'm sorry,\" she puts her hand on my elbow.\n\n\"She was a great woman,\" I say, unable to look up from the grave.\n\n\"She was a great mother,\" Elle whispers.\n\nThat was very true.\n\n\"I miss her,\" I feel a hot lump in my throat as pressure behind my eyes makes them water a little. I feel my sinuses closing up as the damnable relentlessness of grief pushes and pulls at my heart.\n\n\"So do I, Doug,\" Elle says.\n\n\"Missed you at the funeral.\"\n\n\"I'm sorry,\" she says again.\n\nI nod and feel bitter. \"Fifteen years... better late than never, right?\"\n\nElle is quiet for a moment. She finally admits, \"I deserved that.\"\n\n\"Well, it doesn't matter now.\"\n\n\"It does matter,\" Elle turns to face me as I start to walk away, \"Doug, listen to me...\"\n\n\"What?\"\n\n\"I feel really bad over leaving, okay?\" she gazes into my eyes and I see the heart of my childhood friend there, still alive and in as much pain as I am. She says, \"Losing Mom is the hardest thing I've ever had to deal with, and I knew I couldn't say goodbye until I came back and tried to make things right. I just wasn't ready yet...\"\n\nI try to sympathize as I look at her, \"She loved you so much.\"\n\nElle's voice cracks and she puts a hand to her mouth, \"I know.\"\n\n\"Did you think showing up one day and just saying 'Oops, I fucked up' is going to lay anything to rest?\" I ask her, feeling a small flame of anger in the pit of my stomach, \"I accepted you had to leave. I respected your decision. I never expected you to write me or call or visit. But goddamit Sheila did. She wanted to see her daughter; she wanted you to be a part of our lives. She needed you. Where were you?\"\n\nElle shakes her head slowly, her doe eyes wide and shattered with grief, \"Doug, I couldn't stay.\"\n\n\"Where were you?\" I demand.\n\n\"Doug...\"\n\n\"She deserves an answer,\" I point to Sheila's grave, \"It's one thing to go find yourself, it's a whole other thing to ditch your family. Now where were you?!\"\n\n\"I was lost, Doug.\"\n\n\"Why?\"\n\nNo answer.\n\n\"Why?\" I insist.\n\n\"Because I'm in love with you!\" Elle screams at me, her eyes red and streaming tears as she unleashes her guilt. She says, \"Because I was in love with my best friend back then and I'm still in love with him now! I couldn't watch you two be together and be your friend, Doug. I had to leave!\"\n\nI feel shell-shocked. I say slowly, \"But that was back then, Elle...\"\n\n\"No Doug,\" she rolls her eyes and wipes her tears away, \"No, it's now too, okay?\"\n\nI had believed until this moment my life couldn't get any more complicated. As I watch Elle cry, I discover I was wrong.\n\n\"I can't move on with my goddam life because I can't get over you,\" she says between sobs, her eyes flaming at me, \"I realized that you were the one thing I wanted most in my life and now I can't ever have you.\"\n\nI'm flabbergasted as I shake my head in disbelief, a thousand questions running through my mind. Finally, I ask, \"Why come here, Elle? Why tell me this?\"\n\nElle shook her head. \"I don't know anymore.\"\n\n\"You never got married?\"\n\n\"No.\"\n\nI feel the anger and bitterness fall away from me. I realize now that my anger with Elle over the years was misplaced. She hadn't been living her life gleefully ignorant of her family or her heart. It seems now that as far as she had run from this place and as far as she had run from Sheila and I, she hadn't gone very far at all. Elle was still here; her heart was locked up here with her mother and me. I take a deep breath and say, \"I'm sorry.\"\n\n\"So am I, Doug,\" she smiles at me weakly through her grief.\n\nI say, \"She never spoke badly of you.\"\n\nElle begins to weep openly now. She had believed that her mother and I resented her all this time. The truth has opened her floodgates as she closes her eyes, sinking to the ground and her legs folding up underneath her. Elle covers her face with her hands and sobs. I hesitate for a moment and then kneel down beside her. I put my arm around her shoulder and pull her to me. Elle rests in my embrace and lets the fear and guilt drain from her soul into the soil of the cemetery.\n\n\"She never once spoke badly,\" I repeat again.\n\nElle squeezes my arm as her tears soak my shirt. She looks up at me and is so beautiful, her face so relieved to know that her mother loved her despite her absence. She waits expectantly for me to finish my thought. She knows me too well. I add, \"I never did either.\"\n\nAnd that was the truth. I hadn't.\n\n\"You know,\" I say to her and hug her, \"Logan has missed his big sister.\"\n\n\"I miss him too.\"\n\n\"Want to see him?\"\n\n\"That would be nice,\" Elle nods.\n\nI help her up off the ground as she brushes the grass that clings to her dress away with quick motions of her wrist. I hold her hand and for the first time in a long time, I look into another woman's eyes and don't feel guilty or ashamed. Elle returns the gaze and smiles warmly at me. I can admit to myself that I've always been attracted to her, and as I remember the night she offered herself to me, I can recall that several times during my time with Sheila that I was grateful she had gone away. Elle had been a temptation for me in many ways, and as I looked at her now I could admit that.\n\nElle squeezes my hand, \"You alright?\"\n\n\"Yes,\" I say, but I can feel the stirring in my heart.\n\nElle leans forward and kisses me on my lips gently. Her manner isn't all like Sheila's, and I find myself also realizing that as much as Elle looks like her mom, she isn't. It's been so long since anyone kissed me, and I return the kiss softly. It's tentative, filled with anticipation and anxiety and yet wonderfully familiar as I pull back slowly and look to her.\n\n\"I'm not my mother,\" she tells me.\n\n\"I know,\" I reply.\n\n\"It's been fifteen years, Doug,\" she says and holds my hand again, \"Let me show you what it is to be loved again.\"\n\nMy heart begins to race. I look to Sheila's headstone and listen for some indication that the thoughts in my head aren't a betrayal of her, that I'm not being selfish or impulsive. I quietly ask her for a sign, any sign of her acquiescence to what I knew I could grow to feel for Elle. Overhead, a single white dove glides down and perches on the headstone. It flaps its wings and cocks it's elegant head. The bird seems to look right at me and I feel a strange sensation in my stomach.\n\nThe dove lights from the headstone and flies away, up and over the trees and into the sky. I smile to myself and feel Sheila around me, around us both like a blanket. Elle smiles and looks at me, \"Did you feel that?\"\n\nI nod, \"Yes I did.\"\n\nI offer my arm to Elle and she hooks hers around mine.\n\n\"Where to?\" she asks.\n\n\"Home,\" I say to her, \"Home.\"\n\n***\n\nTHE END "
    ],
    "authorname": "bluefox07",
    "tags": [
        "older woman",
        "younger man",
        "milf"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/the-finer-points-of-sheila-ch-05"
}
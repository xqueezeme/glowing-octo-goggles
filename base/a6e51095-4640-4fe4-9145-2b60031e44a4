{
    "title": "Cindy Heller Ch. 2",
    "pages": [
        "Cindy Heller - Chapter 2\n\nAs you might have guessed from the title, this is the second chapter of the tale of Cindy Heller. The first chapter is already posted. And to be honest, it's a lot better than this one.\nFrankly, this chapter is just a contractual obligation.\n\nIf you haven't yet read Chapter One, or did read it but can't remember any of it, here's a quick recap:\n\nCINDY GOES TO BALL, MEETS PHIL \"PRINCE\" CHARMING, THEY DANCE, AND ARE ABOUT TO KISS...\n\nNow you're up to speed.\n\n**********\n\nThey kissed.  And, seasoned erotica reader that you are, you KNOW what kissing can lead to in these stories... Next thing you know, all kinds of disgusting things start happening.  Fluids spraying out of every orifice...   \n\nBut not with Cindy and Phil.  All that comes further on (leave that scrollbar alone!)\n\nFor one thing, there wasn't time.  While they were smooching, slowly, passionately, their tongues intertwining pretty obscenely, Cindy glanced down at her Rolex Oyster and noticed that it was 11:58 pm!   In two minutes time she would cease to be the stunning Crystal Marshall; she would revert to being little Cindy Heller, cute in her way, the kind of girl that maybe you'd go with once, or maybe twice, possibly in an alleyway.  But no more than that.\n\n\"Oh!\" she cried, and pulled away from his embrace suddenly. She jumped up and started to run back to the house. She took a shortcut across the lawn, carefully lifting the hem of her gown clear of the dew-drenched grass, to make sure she could recover the deposit from Neiman Marcus.\n\n\"Wait,\" shouted Phil, running after her.  He caught her up and pressed the dildo into her hand.\n\n\"Please, I - I want you to have this,\" he implored her, trying to get his breath back.\n\n\"But, you told me it's an heirloom from your Mother, you can't give me...\"\n\nPhil interrupted. \"She would want it this way.  Take it, please...\"\n\nCindy accepted, and looked up at him, smiling tenderly.  Then, suddenly aware again of the time, she bounded off like a rabbit, sprinted back through the ballroom, and out the front door into the night.\n\nBut in her haste she'd dropped the dildo on the lawn.\nPhil picked it up and chased after her, but it was too late... She had gone.\n\nHe stopped at the threshold of his mansion, looking out forlornly into the darkness, in his frustration whacking the dildo repeatedly into the palm of his hand.\n\nSuddenly he became resolute.  His eyes narrowed.  \"I will seek out this maiden, even if I have to search the whole length and breadth of the City, excluding certain parts of East LA,\" he said to himself.\n\nHe turned back to the house and rejoined his guests.\n\n*********\n\nThree days later, the door chime rang at the Heller residence.\n\nMom shouted \u201cGIRLS! PLACES!\u201d and ran to get the door, praying furiously \"Please let it be HIM, PLEASE let it be him...\"\n\nMost of the town now knew all about the mysterious beauty who had danced with the Prince, and how desperately he now sought her.  He'd commissioned a 90 second commercial to plead for information regarding her whereabouts. He'd recruited teams of homeless people to post flyers.  He'd even hired the mob. All without success.\n\nStill undaunted, he'd now resorted to visiting the local residents himself, and was said to be carrying a large billfold.\n\nAnd rumor had it that he was also carrying something else with him, something that would enable him to positively identify his True Love, a piece of jewelry, or an ornament -- on this detail the rumors became vague.\n\nMom was prepared.  Her daughters had been full-body waxed, manicured, painted, lubed and given a complete wardrobe change, and were kept on permanent alert.  \n\nAnd though she was unaware of Crystal Marshall's true identity, some instinct made Mom extra wary of Cindy.  Yesterday she had dragged Cindy into her bedchamber, thrown her onto the bed, and then bound her from head to foot in shiny black duct tape. Then she had locked the door.\n\nWait, hold on.  Duct tape? In the bedchamber? Isn't that all a little unlikely?  Not at all! It's perfectly simple:  \n\nThe tape had been placed conveniently on Mom's dressing table by the author, who had been dying to get Cindy into another BDSM scene ever since the beginning of Chapter One.\n\n*********\n\nMom opened the front door to a crowd of about twenty bodyguards, accountants, photographers, gophers and various assistants and wannabes.  In the midst of them stood Phil, looking grim and determined. Hidden among them, unnoticed by everyone, came Mitchell Goldfarb (a.k.a. Cindy's Fairy Godfather for those of you with amnesia).\n\nThe Prince spoke.  \"My business, madam, is presumably known to you:  Still I say to you now: I seek my True Love. My time is short.  Bring your, er, - your - Oh shit, I forgot my line. SCRIPT! SCRIPT!\" \n\nA prompter jumped up with a tattered script and read out tonelessly, \"my time is short bring your maidens forth that I might find my true love.\"\n\n\u201cYes. What she said.\u201d\n\nSym pushed to the front of the crowd.   Mom switched on the CD player, which had been already loaded with a medley of Burt Bacharach tunes.\n\n \u201cMay I present my daughter, Symphonee.  Symphonee is wearing a blue and white Anne Cole bikini, cunningly offset with naughty Manolo Blahnik ankle-strap sandals, to give an overall effect that seems to say: 'Fuck me, baby, before I buy out your company.'\u201d\n\nSym flounced back and forth in front of Phil, jiggling her ample tits in his face each time she passed.  One of the accountants attempted a grope but the bodyguards held him back.\n\nPhil scratched his chin.  Could this be She?  He just couldn't remember.  If only he hadn't put away that fourth bottle of DP '53.  He cleared his throat.\n\u201cI admit you are not too unprepossessing a lass, but whether you are She whom I seek, THIS alone will determine\u2026\u201d\n\nAnd so saying, he brought out the glass dildo.\n\nThere was a hush.\n\nSo Sym removed her bikini bottom and lay down on her back, her knees bent.\n\nPhil kneeled at her side.\n\nThe crowd pressed round.\n\nNow, I have to tell you, this dildo was a beautifully crafted piece, smooth as an icicle, and slightly rippled to the touch.  But let's just say the guy who modeled it was definitely not a porn star.  I mean any man would smile smugly to himself if he glanced across the urinals at one of these.\n\nSo when Phil, after carefully rolling up his shirtsleeve, began to insert it in Sym's cavernous pussy, it didn't even touch the sides.\n\nLowering himself till he was prone, so he could get a better angle, he pushed it in further.  Sym tried not look puzzled, and refrained from asking him if he'd already started.\n\nSoon his arm was inside her up to his elbow, and Sym was visibly relieved at finally being able to feel something down there.  \u201cOoh baby, that feels nice,\u201d she said.  \u201cCome on, big guy, come deeper.  Give it to me.\u201d\n\nLowering himself even more, he pushed his arm in almost up to his shoulder. Sym licked her lips.\n\u201cOh, YEAH!  That's GOOD\u2026 You're so GOOOD. Oh yes, OH yes, OH yes\u2026 HEY WHAT THE FUCK!? DON'T STOP NOW YOU FUCKING FEIGEL\u2026\u201d\n\nPhil, who was beginning to get muscle cramp, had withdrawn his arm with a huge slurping sound. He stood up, rubbing it to get the feeling back and also to dry it off a little. He shook his head sadly and announced:\n\n\u201cAlas, she's just like all the rest, the dildo's spoken. I resume my quest!\u201d\n\nMom grabbed his shoulder before he could turn to leave. \u201cWait, wait, Phil, Here's another one!\u201d\n\nWithout ceremony, Kimberlee lay down and spread her labia majora with her fingers.  \n\nPhil shrugged, and got down onto his knees. He gave the dildo a perfunctory push against her crack. In it slid, with a slight resistance.   He looked surprised.  This was a promising start.\n\nHe pushed until most of the shaft had disappeared inside her.  Kim's lips parted.  The dildo seemed to be gripped firmly.  He wiggled it a little.  It held fast.\n\nHe snapped his fingers impatiently for an assistant.\n\nThe assistant knelt down on one knee beside him and opened a toolbox, and handed him a feeler gage.\nThe Prince checked the reading.  \u201cHmm, one sixteenth of an inch average tolerance all round\u2026\u201d  \n\nThere was a murmur of approval from the crowd.\n\nMom beamed with delight.\n\nCarefully Phil removed the dildo and handed it to the assistant, who placed it on a purple velvet cushion.\n\nHe unbuttoned his fly and hauled out his erect dick, which was the exact size and shape of the dildo.\n\nTo a spontaneous burst of applause, he slowly pushed his dick inside her, and began pumping away, visibly excited that his quest might at last be over.\n\nHis lawyer opened a briefcase and took out a carefully drafted pre-nuptial agreement, and clicked his ballpoint pen.\n\n********\n\nSorry to interrupt, it's me again.\nI just wanted to let you know this ain't one of those nasty stories where things don't turn out the way you hoped.\n\nDON'T PANIC.  CINDY AND THE PRINCE GET IT TOGETHER.\nGOOD TRIUMPHS OVER EVIL.  \n\nI promise.\n\n*********\n\nOkay, so, what of Cindy while all this was happening? And what of Mitchell Goldfarb, that crafty little Fairy, who'd snuck in, if you remember?\n\nThis is what:\n\nGoldfarb, once inside, had immediately edged towards the rear of the room, and while no one was looking, had dashed off round the house in a desperate search for Cindy.\n\nEventually he found the locked bedchamber.  Luckily Mom had left the key in the keyhole.\n\nHe found Cindy tightly trussed up with duct tape on the bed, all her curves accentuated by the shiny black plastic, struggling weakly. Like a little glistening black mummy she looked, her trapped legs wiggling a little as she desperately fought in vain against her bonds. Her little mouth was hopelessly\n\n(OH boy. I\u2019m a little excited.  Excuse me, I'll be back in a couple of minutes\u2026)\n\nThat\u2019s better.  Where was I? Oh yeah\u2026  struggling weakly. Her little mouth was hopelessly trying to free itself from its gag to call for help.\n\n\u201cOh you POOR thing! Here, let's get this stuff off of you\u2026\u201d\n\nHe picked at the tape with his nails but, as everyone knows, when you've been tied up with duct tape for a few hours the heat melts it into a sticky mess and it gets twice as hard to\u2026\n\nWHAT? WHAT? It's common knowledge!\n\nCindy seemed to be trying to shout something at him.  Goldfarb managed to free her mouth.\n\u201cUSE YOUR FUCKING MAGIC! JUST WAVE YOUR FUCKING WAND, WHY DONT YOU!?\u201d\n\n\u201cI\u2019m sorry sweetie, no can do.  My magic operates strictly in the P.R. arena, we\u2019ve all got to specialize nowadays\u2026\u201d \n\nThen Goldfarb stopped and listened.  He spoke urgently:\n\n\u201cLook, honey, we're running out of time.  I think your Phil is about to get hooked up with one of your stepsisters.  They brought a minister with them, so while you're tied up in here, your Prince may end up tying the knot down there.  Sorry about this, but there's nothing for it\u2026\u201d\n\nSo saying, he grabbed Cindy by the feet and pulled her off the bed with a thud.  He heaved her along the floor and out onto the landing.  They could hear the sound of organ music playing.\nAfter stopping for a moment to mop his brow, Goldfarb hauled Cindy down the stairs, bump, bump, bump behind him (yes you're right, like Winnie the Pooh, only more sexy) and into the entrance hall where the ceremony was underway. \n\nHe screamed at the top of his voice,  \u201cSTOP! STOP THIS CHARADE! THE GIRL YOU ARE ABOUT TO MARRY IS A FAKE!\u201d\n\nThere was a gasp.\n\n\u201cYes, a fake I say, and I can prove it,\u201d he announced, letting go of Cindy's bound legs causing them to fall to the ground with a thump.\n\nMom was surpised and really annoyed at this intrusion.  \"Mitchell, you little faggot, who the hell invited you? And why's this story suddenly turning into an Agatha Christie whodunit?\"\n\nIgnoring her, Goldfarb continued his speech, pacing the floor with his arms behind his back.\n\n\"You see, ladies and gentlemen, it was two days ago:  I was, as is customary on Wednesdays, performing my weekly grocery shopping in Farmer's Market, and happened to spot Ms Kimberlee Heller, accompanied by her sister, at the meat counter of a well-known deli.  She purchased a few pounds of finest filet mignon steak.  Nothing out of the way in that, I hear you say.  Perhaps not, to the untrained eye.\n\"However, I chanced to overhear a snippet of their conversation which was most suggestive:  As she took the meat from the salesman, she mentioned the 'Portnoy Gambit'.\"\n\nSeveral of the crowd nodded at this and exchanged glances.\n\n\"Yes, the Portnoy Gambit, that famous ploy well-known to the legions of hopeful actresses forced to audition on Hollywood \u2018casting couches\u2019, long before Philip Roth\u2019s (thanks, RF) literary masterpiece was published:  A slab of liver or steak is rolled and inserted into the vagina, in an attempt to disguise the years of wear and tear.\"\n\n\"It's a lie!\" said Kimberlee.  \"Mom, get Weinstock on the phone.  Now's our chance to sue the ass off this little shit!\"\n\nGoldfarb was serene. \"Not so fast.  Here's another piece of evidence\u2026\"\n\nHe stooped, and picked up a small metal clip from the floor.  The clip had Hebrew writing on it.\n\"This, for you goyim, is a \u2018heksher\u2019:  A small tag clipped by Kosher butchers to meat as a seal of authenticity.  I think you'll find, ladies and gentlemen, that Ms Kimberlee lost her Kosher status while her, ahem, meat was being tenderized just a few moments ago.\"\n\nMom grabbed the Prince\u2019s jacket by the lapels and yanked him towards her, shouting in his face, \"Phil, don't believe him! He\u2019s a slippery sonofabitch...\"\n\nBut the Prince gripped her wrists and pushed her away.  He turned to Kimberlee.\n\"Well, \" he asked sternly. \"Is this true?\"\n\nUnexpectedly, Kimberlee immediately broke down, sobbing hysterically. She nodded savagely. \"Have you any FUCKING IDEA how hard it is to find a decent man in this town,\" she wailed as Mom and Symphonee led her out of the room.\n\nAfter a few moments everyone turned to Cindy, who was still lying securely trussed.\n\n\u201cPlease, please, could someone free me from this stuff, after all, I\u2019m meant to be the main character,\u201d she begged in a small voice.\n\nSomething stirred in the Prince as he looked down at the helpless girl.  He bent, and gently stuck the duct tape gag back over her mouth. \n\nWith his strong fingers he pulled away the section of tape that covered her pussy.\nHer downy pubes were cleanly depilated with a ripping noise by this, to reveal her little pink pudenda in all their glory.\n\n\u201cBy your leave, miss,\u201d said the Prince without waiting for a reply.  He trembled with anticipation as he pressed the glass dildo against her, pausing for a moment to stroke it lightly and rapidly against her tiny clit.  Cindy lay back, calm and unafraid, trusting him completely.\n\nIt fit her perfectly.  Tight, but with the necessary degree of play to allow those minor changes of angle that make for a perfect shtup.\n\nBut after the recent fracas with Kimberlee, this time the Prince took a lot longer, to make absolutely sure, sliding it in and out for a good fifteen minutes.  And all the time She and He looked tenderly into one another\u2019s eyes.\n\n********\n\nWell, I won\u2019t bore you with details of the wedding.  Actually I wasn\u2019t invited.  From what I read, it was a grand affair.\n\nSurprisingly, Sym and Kim didn\u2019t do too badly in the end, either.\n\nSym started going steady with one of Phil\u2019s bodyguards, who had a pretty good side career going as a porn actor, where he was known as \u201cBrad the Impaler\u201d.\n\nMom forgave Goldfarb, and actually became Mrs Goldfarb a few weeks later, after he showed her some tricks he could do with his wand \u2013 I\u2019m talking about transforming clothes here.\n\nKim started up a restaurant in Santa Monica, which soon became more popular than Schatzi\u2019s with the celebs and stargazers.  Specialty of the house was the \u201cSteak Kimberlee\u201d, which she would prepare personally in the kitchen with the help of her sous-chef, Nigel.\n\nAnd although Phil was often out of town on location, Cindy remained blissfully happy ever after.  Especially as she still had access to the glass dildo, not to mention his Oscar.\n\nTHE END.\n\n* * * * * \n\nWell, that's that.  6,000 words in two nights.  I can think of pleasanter ways of giving myself RSI, but it's over now.\n\nReading it over, I'm a little disappointed that some scenes didn't make it to the final cut, because they were unnecessary to the plot. Here's one:\n\n**********\n\nThursdays would provide the only glimmer of pleasure in Cindy\u2019s awful life in the Heller household.  For Thursday was laundry day.\n\nShe would run down to the laundry room and fill up the big washing machine with piles and piles of pillow-cases, tea-towels, and sports socks. \n\nThen she would start the machine and wait for the spin cycle!\n\nOn one occasion (it was the Thursday before the Big Party, so she may have been a little distracted), she accidentally overfilled the machine with soap powder.\n\nAs she sat on the machine, dreaming she was waltzing with the Prince wearing a beautiful gown (her, not him!), she failed to notice the warm bubbling water oozing out the bottom of the machine.\n\nWhen the spin cycle started she shifted her buttocks slightly to increase the area of contact. But suddenly she slipped, falling face down into the soapy puddle that was growing out across the floor.\n\nStill in a happy dream, she slithered around in the bubbling slop, humming the \u2018Blue Danube\u2019. \n\nShe glided across the floor backwards on her belly, legs wide apart, until her clit pressed nicely against the corner of the madly vibrating machine, which was still going through the spin cycle.  She lay there, cupping her chin in her hands, her elbows occasionally slipping apart, for five or ten minutes, until the cycle ended.\n\nShe sighed. She got to her feet and looked at the flooded floor. \n\nLuckily they had an industrial vacuum cleaner that could also be used as a water pump.\n\nShe fetched this, and in no time at all she was busily beavering away with the pump, her pink cheeks flushed with the effort, singing to herself in a high little voice.  Sweet thing.\n\n**********\n\nAs I still seem to have a little space left, there's room for a couple of those \u201chilarious out takes\u201d from the cutting room floor, which often reveal a little glimpse of the off-screen character of some of the actors:\n\n*********\nCindy looked up tenderly at the prince.\nHer lips parted and she suddenly shouted, \"You're standing on my fucking FOOT, you FAT BASTARD... Geez you need to cut down on the pizzas! FUCK you, Joe, I'm outta here. If anybody wants me I'll be in my trailer. Goddam fucking amateurs...\" \n-- CUT\n***********\nPhil reached into his breast pocket and pulled out...pulled out...\nOk, where's the goddam dildo? Goldfarb! for the last time STOP DOING THAT!\n-- CUT\n**********\n\nOh, finally, thanks a LOT for your vote on Chapter One.  I really appreciate it! But don\u2019t bother voting on this one.  I need a rest.\n"
    ],
    "authorname": "NoJo",
    "tags": [
        "goldfarb",
        "crystal marshall",
        "spin cycle",
        "time short",
        "glass dildo",
        "mom grabbed",
        "minutes time",
        "duct tape",
        "ladies gentlemen",
        "shiny black"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/cindy-heller-ch-2"
}
{
    "title": "Caught by My Father-In-Law",
    "pages": [
        "Editor's note: this story contains scenes of incest or incest content.\n\n*****\n\nI saw the collar in the drawer.\n\nI got goose bumps even thinking about it, my husband shouldn't be home for hours.\n\nI got up and closed the blinds, my hands were sweaty and I was breathing hard.\n\nI checked the driveway just to make sure no one had pulled in and would surprise me.\n\nI steadied my hands and began to unbutton my blouse, my fingers trembled as each successive button came undone.\n\nWith the last button, I shrugged my shoulders and let the silky blouse slip to the floor.\n\nNext was my bra, I noticed my skin was flushed and covered in goose bumps, like it always was when I did something naughty like this. My nipples strained under the lacy material of my cups and I moaned when they were released, and the cool air of the room only made them even more engorged than they already were.\n\nI just wished I had more than just a collar, I was tempted to buy more accessories every time I had driven by the pet store but each time I had lost my nerve and suffered frustration more and more, which only made my desire stronger.\n\nI slipped my shoes and socks off and sat topless in a chair. \"What if someone catches me? What if Tom comes home early? Should I stop?\"\n\nStanding up, I couldn't stop though, my fingers undid the button on my slacks and I was already pulling them down my thighs while my reason tried to argue with my lust for excitement, for nudity, for depravity.\n\nNext I ran a finger up between my legs, along the smooth silky fabric of my panties, I inhaled sharply as my finger traced the wetness and outline of my opening, and a soft moan escaped my mouth as my thumbs hooked under the waist band and pulled them down my legs and over my cherry red painted toe nails.\n\nNaked, horny, and sopping wet, I enjoyed the sexual aroma of my sex and I brought that same finger to my mouth I tasted myself and shivering with excitement.\n\nI ignored the pile of my clothes, now abandoned on the floor by the door.\n\nThe house was quiet.\n\nThe sun was just starting to set, as we were just on the leading edge of autumn, the weather was still warm, and the trees were only starting to turn colours.\n\nI had that urge, I tried to ignore it, part of me was ashamed, and part of me knew I should not even consider it, but the thrill of it made me so excited, I knew I could not fight it.\n\nI had walked past the drawer several times before finally giving in to my depravity and took out the black leather collar with the chrome studs. \n\nStanding in the kitchen and feeling my knees wobble, I steadied myself and put the dog collar around my neck. Closing my eyes for a moment I could feel my excitement rising, and that delicious wet feeling between my thighs.\n\nOpening my eyes, l looked over at my clothes, my pulse beat faster. My hands shook so much I had to stop and force myself to relax.\n\nI told myself, \"Tom won't be home for hours yet, and no one is going to find out, you've been naked before, and no one has ever known.\"\n\nAt 5.2 and 115 pounds, I was petite and people told me I was attractive in a \"pocket-size\" way. My 34B's were still perky and my nipples had been hard since the first thought of the collar.\n\nTaking a moment, I cupped each breast with my small hands, sharply inhaling as I did. My fingers and thumbs knew exactly what to do and I knew I could cum just from the small circles they were making on my sensitive parts. Pinching and pulling, my breathing was already shallow and rapid. I could feel the heat and wetness spreading between my legs.\n\nI wanted more than just a quick orgasm from tonight. I longed for Tom to lick and suck on my toes, to ravish me; but although he was good as a man, when it came to sex, he was as straight laced as they came. It was for these reasons, I had started to take advantage of my quiet times. \n\nI hated to hide these things from him, but as a woman, simply having missionary sex with him for five- minutes a few times a month with zero foreplay wasn't enough. Making it worse, he stopped whenever he came inside me, which just wasn't fulfilling. When I asked him about more, he would say he was tired and the conversation ended. Many nights after he had fallen asleep, I would lie in bed and fantasize while I quietly masturbated, giving myself what he would not.\n\nAs a result, I found myself focusing more and more on solitary things and it was the only way I could satisfy my sexual desires. I loved him, but my urges were becoming harder to ignore and despite the guilt, I could not stop them any more than I could stop breathing.\n\nI slipped a finger between my folds and moaned as I penetrated myself, I brought it to my face and smeared my juices over my lips, inhaling my own scent and then I tasted myself.\n\nAlthough I had worn them today, I had long since stopped wearing panties most of the time, something Tom did not know, and I luxuriated in the feeling of my shaved pussy against the smooth material of my clothes. Even at work, I found myself slipping away from my desk at increasing intervals to find a quiet stall in the washroom to masturbate.\n\nNow naked in my kitchen, I reached up into the cupboard and took down the bowl that had belonged to our old dog and I filled it with water and set it on the kitchen floor. The bowl and collar had belonged to Tom's German Shepard who had passed away more than a year ago. Tom had raised the dog from a pup, having gotten him when he was ten. We had talked about getting another dog, but Tom said he worked too much and wasn't ready yet.\n\nWe had kept the collar, the leashes, the food and water bowls, and the dog house in the back yard, because we both knew that it was only a matter of time for we got another stop.\n\nI don't know even what it was that started me down this particular fetish until one night I had been home alone and saw the collar in the drawer. On a whim, I had tried it on and it fit perfectly and I was instantly turned on, I felt guilty, but when I felt my pussy, it was literally dripping wet. \n\nThat night I masturbated myself with the collar on even with my clothes still in place, I can remember the huge dark circle in my pants from the force of my squirting and then afterwards I hurried to do laundry before Tom came home. That had been almost 3 months ago.\n\nSince then, I had been progressively be getting more and more addicted to wanting to act out this fetish. Some nights when Tom was working, while wearing the collar, I would eat my supper from the dog bowl, first on the table and then soon on the floor. It wasn't long before I was completely naked while I did this. After each time I would masturbate like crazy and I would be satisfied for a day or two.\n\nFor the past two weeks, I wasn't able to indulge myself because Tom wasn't away at nights and as a result, I could barely contain my desire. Tonight was the first time that it actually might be dark enough for me to take it to the next level. I wanted to try going outside, I wanted to do a couple of things too, that were really bad, but I didn't want to risk it unless it was dark.\n\nI couldn't bring myself to actually eat dogfood, but tonight I put beef stew in the food dish that I had let cool down a little after cooking it, so it wouldn't burn my face.\n\nKneeling down on all fours, I wiggled my ass a little, and bent down and lapped up some water, this felt so depraved, I wanted to be fucked so much, to be treated like a bitch in heat, I almost came without doing anything, my pussy was so wet, just the little friction from my thighs rubbing together was almost enough.\n\nEating from a dog dish is not something anyone can do gracefully, and by the time I licked the bottom of the dish, my face was covered in food. Cheating a little, I took the time to clean myself and do the dishes because it wouldn't do for Tom to discover I had been using the dog dishes. Just in case, I felt like it, I reconsidered and left the dishes on the floor, but only had water in them.\n\nBy the time I finished the dishes, it was dark outside and my stomach was filled with butterflies as I anticipated the next step on my adventure. \n\nTaking a moment, I checked the driveway, it was empty and I told myself to relax. I then turned off the lights in the house, except for the exterior lights and then opened the door, the night beckoned. With the chain in hand, I got on all fours and closed the door behind me and I started across the grass, it was still warm from the residual heat of the sun. \n\nI was completely nude, except for the collar and I felt so adventurous and sexy, I actually barked once, just for effect and I felt my pussy get even wetter, speaking of wetter, for several hours I had been holding my pee and I was just about ready to burst.\n\nThis was one of the new things I wanted to try, not having the hardware that a male dog does, I spread my legs as far apart as possible and tried to pee. Nothing happened, I tried again, still nothing. I tried to relax when I realized I was shaking from excitement. Balancing on one hand, I used my other paw to play with my nipples, I pinched and pulled on them again and it took my mind off my bladder. I could feel myself start to let go with a few drops at first, then a trickle, and then the flood gates opened and I peed outside as a dog for the first time.\n\nI seemed to pee forever and I continued to watch myself and slowly play with my nipples with one hand, I whimpered as I finished peeing and then my body shook as a small orgasm surprised me, I moaned out loud as I came, that felt so incredible.\n\nThe light breeze tickled my wet pussy as I picked up the chain with one hand and moved on all fours to the dog house, taking the rusty clasp I attached it to the link on the dog house, I was now chained to the dog house, just like a real bitch.\n\nI had cleaned the dog house out a few days ago when Tom was away. It was a big one, I could climb completely inside, there was a vinyl cushion and it was actually quite cozy inside. \n\nThis was all too much I needed some more relief from the throbbing between my legs, still on all fours, I rested my shoulders and chest on the warm grass and with my pussy and ass in the air, and I closed my eyes and began to touch myself.\n\nIn the light of the back porch, I used my fingers to stroke and caress my tummy, making small circles and bigger circles, each finger tip just lightly grazing my skin. My nipples were as big as I had ever seen them and they hurt and needed a release as much as my pussy did.\n\nMoving one hand down towards my pussy, I imagined what a stranger would think of a sexy, naked woman, chained and collared, masturbating. My own knees almost buckled with the thought. I just touched my clit and just about screamed, as it was, I let loose with a long loud moan that must have sounded like me howling had anyone else been in the vicinity. I could feel the moisture and heat of my body almost boiling.\n\nLicking my fingers and tasting my sex, I wished there was some way I could eat my own pussy. I had to make do with my fingers which were all exploring my sex in naughty ways. One, then two of them plunged deep inside myself, while my other hand stretched further between my thighs and discovered my sensitive ass.\n\nThe moaning was continuous now and much louder than anything I had ever done before, I could feel the throbbing building, my body started to shake from the centre out, my back arched, and my hips were bucking wildly against my hands, thrusting against my hand, I forced my fingers deeper into my cunt, and then thrusted back to have my other fingers penetrate deeply into my ass.\n\n\"OMG,\" I yelled as I came all over my hands, the hot squirting liquid flooding my hands and the ground around me. \n\nI collapsed in a heap on the grass. My breathing ragged, my body recovering, and my pussy throbbing as if I had just been fucked by someone much rougher than Tom.\n\nIt was only then that I heard the slam of a car door, followed by a second one only moments later.\n\nI panicked, instantly I rushed to undo the chain, but in my rush, my fingers could not work the rusty clasp, then I heard the voices, distinctly recognizing them as Tom's mother and father.\n\nMy panic became white cold fear, if Tom's parents found me like this, they would never understand and they would likely insist that Tom have nothing to do with me.\n\nI pulled and pulled on the chain, but nothing. The safety of the house was impossible, I did the only thing possible and bolted into the dog house. I crawled into the back corner and tried to stay in the shadows, I only hoped they hadn't heard my groans and screams from masturbating like a bitch in heat.\n\nDespite my fear, I had to smile at that thought, because that is exactly how I felt. I was jolted back into panic mode when I heard them knock on the door.\n\nThrough the quietness of the night, I heard Tom's mother say, \"No one is home, Lauren's car is here but the lights are off.\"\n\n\"I was sure I could hear someone,\" Tom dad said, \"It sounded like someone screaming.\"\n\n\"Let's try the back door,\" his mom said and then I could hear their feet on the gravel pathway.\n\nWith my arms around my legs, I huddled in the darkness of the dog house, naked and scared, my in-laws less than 20 feet away.\n\nTom's father knocked, he tried the door, and it opened. He stuck his head through the opening and yelled, \"Lauren ... Tom ... Is anyone home?\"\n\nThen he disappeared into the house and turned on the lights.\n\nI thought, \"The dog dishes, my clothes,\" would Brian notice them, if he did, what would he think. I have to admit, a tiny part of me wondered, \"So what if he found them, what doors would that unlock?\" Tommy's father was an attractive man and I would be lying if I didn't admit to having one or two secret fantasies about him.\n\n\"They must not be home,\" his mother said.\n\n\"I am worried, the door was unlocked, they should never leave the door unlocked, you go get in the car, I'm just going to take a look around,\" my father-in-law said.\n\n\"I wish they would get another dog; it would be nice to now they have a watch dog again,\" Tom's mom said, close enough I could smell her perfume.\n\n\"I worry about Lauren, she is such a pretty young woman that she would be a prime target for a home invader because Tom works so many nights,\" her dad said.\n\nThen I was surprised by the way the conversation turned.\n\n\"Brian just like her because she looks so awesome, I see you undressing her each time we visit them,\" Tom's mom said.\n\n\"Me, what about you Rachel? The last time we had them over and she had on the red bikini, your eyes just about popped out of your head, looking at a girl half your age,\" Tom's dad said.\n\n\"Brian, with both think she is attractive, I worry that Tom is such a prude, that the poor girl will only ever get fucked in a missionary position for the rest of her life,\" Rachel said.\n\nI couldn't believe it, they had always seemed to have no interest in me and I thought they were as prudish as Tom was, he had always told me that. Brian and Rachel were both about 50 and while each sported a few extra pounds, now that I thought about it, maybe I should fantasize about Rachel too.\n\nMy legs were starting to fall asleep and as I tried to get more comfortable, I accidently shifted and bumped against the wall of the dog house.\n\nRachel said, \"Did you hear that?\"\n\n\"I did, I think someone is hiding in the back,\" Brian said.\n\nI froze, why I couldn't have just waited, now they were on guard. Worse yet they might investigate.\n\n\"Brian be careful, maybe we should just call the police,\" Rachel said.\n\n\"For what? Lauren and Tom might have just have forgotten to lock the door, and that noise could be a squirrel or something, but I will take a quick look,\" Brian whispered to Rachel.\n\nI moved further back into the darkest corner of the dog house, actually holding my breath, my naked body covered in goose bumps. I heard footsteps move past the dog house and they faded somewhat.\n\nIt was quiet for the longest time; I could faintly hear the sounds of Brian walking around the yard and sometimes Rachel's breathing. I struggled and finally disconnected the chain from the collar and squeezed further back into the darkest corner of the doghouse.\n\nFive minutes became ten and I could hear Brian walking back towards Rachel, \"Rachel, I don't see anyone, maybe it was the wind.\"\n\n\"Check the doghouse, Brian, it would be where I would hide,\" Rachel whispered but loud enough that it made my heart sink.\n\nI heart the footfalls coming back then a muffled, confused voice, it was Brian's.\n\n\"That's weird, why is there a chain attached to the dog house?\"\n\nThen I heard his hands on the chain, then he started pulling on it. He let it fall when he realized it wasn't attached to anything.\n\nThe doghouse was in shadows and the inside was completely dark, Tom's dad leaned over and I could see his hair but only partially, then he straightened.\n\n\"Nothing,\" he said and I heard him walk away.\n\nI didn't dare breathe until I heard both of their footsteps on the gravel and then the car doors open and close.\n\nI had been so lucky, what would have happened had they found me, how could have I explained it, how would they have reacted? As much as the idea turned me on, I was still scared of how they might react.\n\nI peaked out of the dog house, everything was quiet. The right thing would be for me to go inside, get dressed and forget this silly fetish and consider myself lucky.\n\nBut then I would be right back where I was, I am only 24, I think I am attractive, I think I am sexy, I like feeling horny, I need to have a sexual outlet, Tommy isn't interested in anything more than straight sex but I love him, so if this keeps me sane, then is it wrong?\" I asked myself.\n\n\"No,\" I said and emerged from the doghouse, on all fours. Despite the danger of exposure, I knew that I couldn't quit, not now. \n\nDespite my feelings of wanting to explore more tonight, I figured I needed to clean up. I went into the house and immediately noticed that Brian had accidently kicked the dog dishes and there was water on the floor, but he didn't say anything to Rachel, \"that is weird,\" I thought. \"Maybe he didn't notice\".\n\nI stayed naked, and washed the dishes and put everything away, including the collar and the chain. \n\nI finally put on an old hockey jersey of Tom's and waited up for him. I greeted him at the door and gave him a big hug and as I did so, the jersey road up and exposed my pussy and ass to him.\n\n\"Lauren, cover up, what if the neighbours could see you, he said sternly.\n\n\"Tommy, nobody can see this far, and besides, it might be fun if they saw me, I said smiling my little girl smile.\n\n\"I'm tired and I have to work late tomorrow too, I'm going to bed, you will have to wait, maybe on the weekend we can have sex\", and with that he headed off, no kiss, no \"Lauren, you look pretty,\" nothing.\n\nI resolved then and there, that if I wanted to be naked outside, if I wanted to engage in my doggie fetish, then I was going to, damn it.\n\nI pulled out my laptop and was going to search the local pet store website, when I changed my mind and entered \"puppy play\" accessories and google responded with an ad for the for the XXX store in town. I hit enter and was amazed at the selection and then I noticed their \"in-stock\" guarantee, any items with a \"*\" beside it were always in stock. \n\nCould I dare to stop in tomorrow? Tommy said he was going to be working again, that got the butterflies in my stomach flying again, maybe I could have some more fun again as soon as tomorrow.\n\nI crawled into bed beside a snoring Tommy, naked and he never noticed. I was sleepy and frustrated, but my hands were not tired and they knew how to get rid of my frustrations.\n\nGently caressing myself, my fingertips started lightly on my neck, each tip barely touching me, they made my body feel electric. I used my tongue to wet my lips and silently moaned as my fingers moved lower and grazed my shoulders. My fingernails started tracing the curves of my body, under my breasts and up the perky sides, and around my sensitive areolas and hardened nipples. I had to bite my lip to stifle a groan as I felt myself getting wetter.",
        "I could detect the sweet scent of my arousal as I pulled and squeezed my nipples, this time a moan did escape, but Tommy never noticed. My thighs ground together as I played with my breasts, sometimes I could even make myself cum from just playing with my tits, and I was close tonight.\n\nMy pussy called to my hands and fingers though and leaving one hand to play, the other moved down the smooth slope of my body, past my flat tummy and onto the smooth shaved skin of my lower body.\n\nAnother moan happened as my back arched and I stretched my body in response, I was masturbating naked right next to Tom, it felt naughty, but exhilarating.\n\nA finger explored the petals of my vagina, working the folds and finding all of the sensitive bits, including my little clitty. \n\nMy hips bucked and rose to meet my fingers and I let my fingers linger, stretching out the feeling, wanting to cum, but not wanting to cum too quickly.\n\nMy fingers circled my clit and moved in and out of me with such a delicious abandon that I totally forgot about Tommy and the next moan was not held back by anything as I felt the first wave of orgasm sweep through my body. The tenseness and flexing that were so familiar reached up and grabbed me and shook my body with that amazing feeling. I fell asleep that way, my fingers still clutching my pussy, the scent of my orgasm hanging in the air, and my body savoring the remnants of bliss as the night overtook me.\n\nIn the morning, the alarm went off for me, and Tom did not even stir. He could sleep so I let him. \n\nThe sun shone into our bedroom and the warm breeze still gave the illusion of summer even though autumn was coming. I slipped out of bed naked and didn't bother with my robe, my bare feet making virtually no noise, my hair was tousled and when I glanced in the mirror, I had that \"just fucked look\" that I longed for, something more than just by my own hands and fingers, just as Tom snored.\n\n\"I won't let that bother me,\" I thought. Today was going to be a fun day, even if it was just for me. After work, I planned on making some purchases at the XXX store and then I was going to play tonight as a puppy, maybe even go outside again.\n\nIt was still dark outside and on a whim, I carefully slipped naked through the door, no lights shone yet as it was barely 6am, I stepped off the deck and spied the dog house and said, \"Tonight,\" and then walked naked into the centre of the yard, hidden by the remaining darkness.\n\nToday was easier, and I got onto all fours, the damp grass cool to the touch, I could feel the pressure in my bladder and I willed myself to relax and could feel the pressure but could not release. Touching a finger to my pussy, I could feel a drop or two of pee, I bought my finger to my mouth and tasted the bitter salty taste and then the drops became a trickle and the trickle a flood as I let go.\n\nI moaned loudly, this was so bad, I wished that someone would take me for a walk and let me pee like a real puppy, like real dogs do for those people who walk them early in the morning. The thought of that made me shake as a tiny orgasm gripped me. A neighbour's porch light came on, and I quickly ran back inside, my heart beating wildly and my pussy still throbbing from the little climax ... tonight, I thought again.\n\nGetting ready for work and the day was just a blur as my focus was on going to the store, it's lucky that no one noticed my lack of productivity, all I could think about was making my purchases and trying them out. By the end of the day, I must have doodled more than 50 cute little puppies on the margins of my work. People asked me if I was okay and I said that I was just a little off and everyone accepted that.\n\nAs each hour passed, I got more and more excited and I got more nervous too, I wondered if anyone would notice me in the store or see what I was purchasing. Then the warmth from between my legs took over and the wetness of my pussy and the hardness of my breasts, reminded me that I needed and wanted this.\n\nFinally it was time to go, I said goodbye to everyone and just about ran to my car, and once in there I had to force myself to relax because my hands were shaking so much. It took several minutes but I did finally settle down, I felt between my legs and the crotch of my slacks was soaking wet and the scent of my sex filled the car.\n\nThe drive only took about 10 minutes and I parked on the street and steeled up my nerve and got out of the car, I wished I had changed before I entered the store, but my work clothes were business casual and not out of place. When I walked through the store, it wasn't what I expected. It was bright, and full of everything and anything sexual, I felt like a kid in a candy store, everything looked so good, I wanted to try it all.\n\nA woman approached me and asked, \"Is this your first time in our store?\" she was in her early thirties, attractive, and seemed genuine.\n\n\"Is it that obvious?\" I asked\n\nShe smiled and asked, \"What are you looking for?\"\n\n\"I am wanting to explore puppy play,\" I said barely out loud, I had a tingle between my legs when I said it.\n\nShe smiled and I felt my knees weaken, \"Have you ever done this before?\" she asked sensing my nervousness.\n\n\"A little but not without any props,\" I said a little louder this time.\n\n\"Okay, come with me and we will get you everything you need,\" she turned and walked towards a section of the store I hadn't noticed, wiggling and swaying an ass that made me think about wanting to experiment with women for the first time ever. I followed her, my eyes never leaving her sexy ass.\n\nThirty minutes later, I had: a pair of paw covers for my hands, some straps to bind my calves and thighs, a very interesting tail butt plug and some lube, a face mask that she had me try on in the store that made me so wet, I was sure she could sense it; a leash of my own; and some pads for my knees.\n\nShe was so helpful and she suggested a dog tag for my collar. She took a few extra minutes and had someone engrave, \"Lauren\" on it for me.\n\nHer name was Nicol and she was very helpful and said to come back when I was ready to add other things, like maybe a cage, or a black leather body suit with openings for my ass, pussy, and tits.\n\nShe gave me her card and wrote her cell number on the back and the words, \"Call me Lauren, I would love to see you in your gear.\"\n\nShe walked me to the door and after glancing both ways she kissed me on the lips, subtly slipping her tongue into my mouth. \n\nI left with my head spinning, thinking about Nicol, in the space of a few days, I had gone from finally finding an outlet for my repressed sexuality to actually kissing a woman for the very first time and it made me wet, confused, and even more horny.\n\nDriving home with my purchases sitting in a bag beside me I let my hands explore my body, as I drove through the late afternoon traffic, I knew Tommy would be at work and my fingers rubbed my sensitive breasts I became more and more excited about what tonight would bring.\n\nParking the car in the driveway, I practically ran inside the house and once the door was closed I stripped off my work clothes, leaving them in a pile just inside the door, I was like a little kid on Christmas morning.\n\nNaked, I grabbed the two dog dishes, tonight I was going to be really brave, my pussy was so wet it was everything I could do not to stop and get myself off right there.\n\nI filled one dish with water and the second with fruit loops, I wasn't quite ready for actual dog food, I thought I could eat kibble, but was wasn't ready yet and the beef stew wasn't what I wanted two nights in a row.\n\nI glanced into the back yard and noticed the sun was just starting to set, long shadows stretched across the yard, I looked at the neighbours houses and did not see any activity. It was still warm outside but as I walked out the door, anyone looking at my tits would have thought it was cold because my nipples were so hard they ached.\n\nI felt so slutty walking naked across the deck, taking a chance that someone might see me, but it felt so incredible. I walked to the dog house and bending over with my ass up in the air, I set the food down and made sure the chain was attached to the dog house again.\n\nI forced myself to walk slowly back to the house, the feeling of the breeze on my naked body and simply being outside nude almost made my knees weak.\n\nStepping over my clothes I picked up the bag with my purchases, and noticed my hands were trembling again. I spread out the contents of the bag on the kitchen table.\n\nAfter opening them, I left the packaging on the table and moved everything to the floor. First on was the head gear, Nicole had recommended a full mask that had cute dogs ears, a snout the gave me a dogs nose but still left enough space that I could eat, I shivered when Nicole had said that I could still suck on a cock or eat some lucky person's pussy with the mask on. I remembered the look on her face as she said that, and I knew she would volunteer to be that person.\n\nWhen it was in place, I put the collar on, with the little silver tag that said \"Lauren\" and attached the chain that I had dragged inside from the dog house and clipped it to my collar. \n\nNext in the pile was my tail, I thought I should do this next because when I bound my legs or put my paws on, I would not be able to. I took the bottle of gel lube that Nicole had recommended, I put a glob onto my hand and reached around and found my tight little asshole. \n\nI shuddered as the cool gel touched my rosebud and I used my fingers to massage my opening. Savoring the feeling, I circled my asshole with my finger and rubbed the gel over my rosebud, then slowly inserted a finger, pushing past the resistance and closing my eyes. First to one knuckle, then then next, I moaned out loud. I have never really done much with my ass and Tommy would never have considered anything so dirty, I loved how it felt. \n\nWhen I had stretched myself for two fingers, I reluctantly stopped and applied some gel to the tail plug, coating the rubber plug I reached back and closed my eyes again as I pushed the tapered end against my ass, as much as my fingers had prepared the way, I had never had anything like this in my ass before.\n\nMoaning and groaning loudly, I forced the plug into my ass and when the tail was in place I could hardly move without feeling like I was going to cum.\n\nI could feel my juices running down my legs from my pussy I took the straps to bind my calves and thighs together, which would force me to remain on all fours. It was tricky and it hurt a little, but my excitement was so strong, I wasn't going to let that stop me and I did the right leg and the left leg. I had put the knee pads on first so when was I finished, I could only move about as if I really was a little bitch.\n\nLastly were the paws, they were cute and matched the knee pads, ands mask. As I put one on I whimpered when the clasp locked into place, and then did the second one and it locked as well, I never considered how I would take them off, and Nicole had left that part out; however, that was a problem for later and I never considered it.\n\nOn all fours I moved to the full length mirror and just about came when I saw how sexy I looked as a naked little dog, I wiggled my ass and whimpered again as the tail moved inside my ass, my exposed nipples cried for relief and my face was unrecognizable in my mask. It was only then that I moved towards the door, pushing it open with my nose, I moved out into the darkening night.\n\nI felt so exposed, so deviant, so naughty, and so incredibility sexy, if anyone saw me now, they would think I was some kind of little bitch in heat and that is exactly how I wanted to feel.\n\nIt was a little tricky to navigate the steps down from the door to the deck and then down from the deck to the grass, but the pads helped and I managed it fairly well. The sky was a mix of setting sun and dark clouds and knowing that I could still be seen if someone looked hard enough, only made me more turned on.\n\nI moved to the doghouse and with my ass and pussy facing out, I ate from the dog dishes, loving the feeling. It took a little while but I ate all of my \"dog\" food and lapped up my water. By the time I was finished it was almost completely dark, I decided to explore the yard and with my tail plug moving deliciously in my ass as I swayed my hips back and forth I dogwalked to every corner of the yard as far as the chain would allow, it was only when I returned to the dog house that I realized I needed to pee.\n\nI moved a little bit away from my doghouse and tried to relax to pee and that is when he spoke.\n\n\"Lauren, you make an incredibly sexy little bitch,\" Brian said in a quiet voice.\n\nI swear my heart stopped, he had caught me just as the pee started, and I could not stop, my father-in-law watched me pee from behind, I could not help myself I moaned and then whimpered as the stream flowed and then eased to a few dribbles.\n\nI started to apologize and to beg him not to say anything, especially not to tell Tommy.\n\nBrian said, \"Lauren, don't worry, I am not going to tell anyone, I know that Tommy is a prude when it comes to sex.\"\n\n\"I must say I am more than a little shocked and surprised, but pleasantly so, Lauren, you do make a sexy little bitch.\"\n\n\"You knew? How?\" I said. \n\nI was rapidly getting over being scared, and well on my way to being turned on, Tommy's dad was in good shape and for an older man, very sexy. I also was turned on by being in a very submissive position, naked, and quite exposed.\n\n\"Last night, when we stopped by to see how you were, I tripped over the dog dishes and saw your pile of clothes. I almost connected the dots then, but it wasn't until I saw the chain that I knew,\" Brian paused. \n\n\"We were worried about you,\" said Brian. \"But we knew you didn't have a dog, also, I was pretty sure you were in the dog house, but I didn't want Rachel to know yet, but I thought I would investigate tonight.\"\n\nBrian continued as his eyes devoured my body, \"So tonight I parked down the street and walked to your house, and used the key you gave us a while ago to go in the side door, I saw the pile of clothes, the empty packages of for your \"outfit\" and then watched from the window, you are so sexy Lauren.\"\n\n\"Just watching you parade around as a little puppy and then peeing just now made me so hard Lauren,\" Brian said, his eyes never leaving my body, I could see the bulge in his pants, and I knew what he wanted, I wanted it even more.\n\n\"So what now, if Tommy finds out he will never understand, he thinks wild sex is having me on top, he would never understand my dog fetish,\" I almost cried.\n\n\"I know you love Tommy, but Lauren I know I can help you, if you want me to,\" Brian said.\n\n\"What about Rachel?\" I said.\n\n\"Knowing Rachel, if she knew how you looked right now, you would likely be eating her pussy, she thinks you are as beautiful and sexy as I do, I will tell her later about tonight, you see as much as Tommy is a prude, Rachel and I are not,\" he smiled.\n\n\"Either one of us would give you all of the things that Tommy can't, we think you are a very special young woman and we know that you have needs and desires and I just happen to have found out first,\" Brian laughed.\n\n\"If you are willing, Lauren,\" Brian said.\n\nI thought about it, I knew that Tommy would never change and that I would always be sexually frustrated, his father's reactions totally surprised and shocked me, but he could have reacted so much more differently and I was excited by the lust in his eyes and the bulge protruding from his pants that made me very excited.\n\nI watched as Brian undid his pants. Pulling his jeans down, I watched him step out of his pants and then do the same with his underwear. He removed his shirt and then motioned for me to come closer.\n\n\"Do you want to be fucked like the little bitch you are?\" Brian asked, he then slapped my ass and turned me around.\n\nBrian knelt behind me and I felt his fingers stroke my wet pussy and then he said, \"Lauren you really are in heat, I'm going to take you now.\"\n\nI felt the tip of Brian's cock on my entrance, he felt bigger than Tommy, wider than Tommy too, as he pushed into me. I moaned several times, as he pushed his bulk into me, deeper and deeper.\n\nStill a little shocked at everything, I was a little slow, but as I felt my father-in-law's cock inside my little box, I pushed my pussy back hard against him, \"Woof\", I replied.\n\nBrian watched his cock plunging deep into my body, \"God, Lauren you are so tight,\" Brian leaned over me and reached down and cupped my breasts as he pounded me from behind, I screamed in pleasure.\n\nAll of the anticipation of the day, the excitement of dressing up, the naughtiness of peeing in the yard, the pleasure of being fucked by Tommy's dad, and the incredible feeling of being fucked like a dog; all caught up with me at once and my body exploded with a huge orgasm.\n\nMy hips bucked as Brian's balls slapped against my ass, my body thrashed about with a mind of its own as I squirted for what seemed like forever. Brian continued to thrust his cock into me and I felt the rush of his hot cum deep inside me as his body shared his hot white liquid with me.\n\nAs Brian pulled out of my doggy cunt, I was energized and turned 180 degrees before he had a chance to realize what was happening and I took his cum covered cock into my mouth. The taste of his salty and bitter cum was mixed with my juices and I licked and sucked him clean.\n\nPlaying with the opening of his cock with my tongue, I swallowed the excess cum, while still more dripped from my dilated pussy, leaving a small puddle on the ground beneath me. I could feel the veins on his cock with my tongue, I moved up and down his shaft and took one of his hairy balls into my mouth.\n\n\"Oh Lauren, Tommy is such a fool, that feels so incredible, I think I'm going to cum again.\" Brian moaned.\n\nI licked and sucked even harder as I heard Brian moan, using one paw, I rubbed my furry mitts against his ass and I felt him tense and shudder as his cock erupted again, this time in my mouth. Brian happened to glance down, looking at my eyes through my mask, looking at me as his cock filled my mouth with even more cum.\n\nI swallowed it all, and Brian had to steady himself as he recovered.\n\n\"Lauren, you are something else; that was incredible.\" Brian whispered.\n\n\"I have to get back before Rachel misses me, but I don't want to fuck you and run,\" he said.\n\nI looked at him with my big eyes, and asked, \"Brian, will you take me for a walk before you leave?\"\n\n\"Sure, do you feel adventurous Lauren?\" he said as he slowly put his clothes back on.\n\nWith cum still dripping from my pussy, Brian attached my leash to my collar and started to walk me around the yard, I swayed my ass a bit, and the tail plug which had fallen out during his pounding was pushed back into me by Brian and I pushed my ass back against it.\n\nBrian headed for the front yard, dragging me a little. I was emboldened and he didn't have to drag me much. Alongside the house and into the light from the streetlight, I felt light headed and was now exposed to the possibility of being seen by people.\n\nIt was late, and the street was deserted, but the thrill was real. What if a car saw us, what if a neighbour noticed? It was all too much, especially with the tail plug in my ass and I shook as a small orgasm gripped me again.\n\nBrian said, \"Lauren, that was so hot, but it is getting late, let's get you cleaned up,\" and he led me back to my house.\n\nHe kissed me for the first time, his powerful hands holding me close as his lips parted mine and his tongue penetrated my mouth. We kissed for several minutes before he started to take off my outfit. First the paws, then the leg bindings, then the delicious tail plug, Brian helped get everything put away.",
        "While I had a shower, Brian found a box and tucked everything away and cleaned up the dishes and put my clothes in the laundry. I did catch him inhaling my scent from my panties and I said that he could taste the real thing the next time he had a little more time.\n\n\"What about Rachel, would you let her eat your pussy?\" he asked.\n\n\"In a heart beat,\" I said.\n\n\"Good, I'm going to give her your panties,\" he said, as he tucked them in his pocket, \"When I get home I'm going to tell her everything we did, you should expect a visit from both of us the next time Tommy works late.\"\n\nI kissed him good bye, and watched him leave. I crawled into bed, satisfied for the first time in forever and looking forward to the next time."
    ],
    "authorname": "ghost12_spirit",
    "tags": [
        "adultery",
        "bareback",
        "blow job",
        "caught",
        "collar",
        "doggie style",
        "enf",
        "exhibitionism",
        "peeing",
        "puppy play"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/caught-by-my-father-in-law"
}
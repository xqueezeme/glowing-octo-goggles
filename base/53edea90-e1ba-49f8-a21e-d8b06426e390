{
    "title": "There and Back Again Ch. 081-082",
    "pages": [
        "Chapter Eighty-One: Descent \n\nI dreamt about the movie \"The Sound of Music,\" not a surprise given what I'd been doing when I fell asleep, but I woke to something considerably less pleasant: panicked screaming. \n\nAlistair and I were on our feet in a mere second, both of us grabbing our weapons as we rose, but then stopped in confusion when we looked around the cavern and saw no cause for alarm. Others had peeked out of their alcoves as well, and we all exchanged puzzled glances. I thought about the voice I'd heard, trying to determine whose it could have been, when it happened again, and then I relaxed as I realised what it was. Duncan, and I'd have bet my last sovereign he had finally fallen asleep. \n\nI patted Alistair's arm to stop him when he looked like he was going to go in to Duncan's alcove. I handed Alistair my daggers and sent him reluctantly back to bed, and I tiptoed over to where Duncan slept. \n\nHe was twisted up in the blankets, muscles taut, his skin slick with sweat; his hair, which he'd started growing again, was a wild mop, and his face was scrunched up in a look of abject horror. He wore a tunic and trousers, both of which were damp with sweat. \n\nI gently peeled back the blankets without touching him, untangling his limbs, which relaxed him somewhat, then leaned over to whisper softly. I couldn't say what I murmured, but it didn't matter; the tone was what was important. After years of dealing with the nightmares of my younger foster-siblings, I knew that if I startled him and he woke, it wouldn't end well. He'd likely wake in a panic, assuming I was a hurlock or something. So I kept murmuring until he slumped back onto the bed and his face went slack before I attempted to wake him. Once I was convinced he wouldn't be violent, I knelt down beside his cot and gently stroked his cheek. \n\nHe opened his eyes, which I hadn't noticed before were blood-shot and almost hazy, like an elderly person with cataracts. Rheumy. I knew he hadn't been sleeping much, but hadn't realised how bad things must have gotten. He smiled at me, then frowned as he noticed his bedraggled state. \n\n\"Good morning.\" \n\nHe struggled to sit up, and I offered him my hand. His confused expression cleared as the remnants of sleep faded, and he rubbed at his face ruefully. \"I hadn't meant to sleep.\" \n\n\"How long, Duncan?\" \n\nHe looked at me, and taking in my serious expression, sighed. \"I take it I was screaming in my sleep?\" I nodded. \"I don't know.\" \n\n\"Duncan...\" \n\n\"No, honestly. The taint takes everyone differently. I have seen Wardens who had the nightmares for years before they couldn't put off their Calling any longer, and others who denied having the dreams even as their skin blackened. It's variable. But if I had to guess...\" \n\nHe trailed off for a moment, and when he continued it was a whisper. \"A few months, six at the most.\" He gave me a searching gaze. \"This Blight needs to end soon.\" \n\nI nodded, and leaned forward to wrap him in a hug. He chuckled as he returned it. \n\n\"Be careful, young lady, or I won't survive to see the Archdemon - Alistair will kill me first.\" \n\nI grinned and hugged him tighter. \"A little jealousy is good for him.\" I released him, my serious expression returning. \"You know we both see you as the father we never had.\" \n\nHe nodded, smiling ruefully. \"Neither Bryce nor Maric would appreciate that description, I suspect.\" \n\n\"Probably true. Doesn't change anything, though. I do not want to see your time here end, but I want to see you suffer even less. For your sake, I hope the Blight will be over soon. Would you permit me to ask Anders if he knows anything to combat nightmares? You need to sleep sometimes, Duncan.\" \n\nHe sighed, rubbing his face again, then finally nodded. \"I'll come.\" \n\nAnders, unsurprisingly, knew quite a bit about nightmares and other sleep problems, and promised to make a potion to allow Duncan to sleep deeply without dreaming. We had purchased supplies for healing potions and poultices before we left Orzammar, so apparently Anders had the ingredients he needed. \n\nSince everyone was awake, we all readied ourselves and ate a standing breakfast of biscuit and jerky. We set out as soon as everyone was packed up. I was sorry to see the little supply depot go; it had been nice, compared to what I'd expected. \n\nWe walked through darkspawn tunnels, dwarven-made crosscuts, and Deep Roads, heading further and further from Orzammar. We came across a few, isolated groups of darkspawn, which we managed easily. The darkspawn were never far away, and the tingling sensation that indicated their presence was constant and irritating, until I learned to ignore it. Duncan was experienced enough to determine distance and intentions much more accurately, and the rest of us had to rely on his warnings. \n\nI'd explained what I remembered about the crosscut drifters from the game, just to pass the time, and at least the dwarves were interested. Except for Oghren, who refused to make eye contact, never mind actually admit to be listening. \n\nEach evening, I worked with Bel on quietly learning to sing. He wasn't bad, by my amateur assessment, and continued to be amazed that he didn't stutter. I started him with simple children's songs, like the alphabet and 'Row, row, row your boat', moving on to songs with more complex speech patterns as we went. Neither of us were keen to be overheard, and everyone seemed to get the point, leaving us alone. \n\nOghren drank as much as advertised, at least if his own off-key singing was anything to go by. After the first couple of fights, when it became obvious that he could hold his own even when sloshed, everyone left him alone. He and Zevran had taken to needling each other with dwarf and elf jokes, and I almost choked when Anders suggested they stop dancing around the issue and just get to work on a baby dwelf. Aedan pointedly ignored the dwarf, and I was sure Zevran was going to be told off later for fraternizing with the enemy; neither Aedan nor Alistair left my side at all for two days. \n\nThe next few nights had us sleeping in the open, as we would have had to go half a day out of our way to get to the next supply depot. It was harder to sleep, and oppressive; even the dwarves seemed to get quieter and more morose. The darkspawn dreams were worse as well; Duncan slept better, thanks to Anders, but the rest of us woke in sweats more than occasionally. \n\nI missed Alistair; he was by my side, but lack of privacy and the need to remain in armour removed any possibility of intimacy. Even a hug was virtually impossible; I ended up crushed against plate, with his gauntlets digging in. It was depressing. It bothered him, too; periodically at camp he'd drag me around a corner to drop a heated kiss on me, mouth taking mine with wild abandon, before burying his nose in my hair. But we didn't have long before someone at camp would notice our absence, so a few stolen moments were all we had. \n\nSleeping was strange; I planned to sleep by Alistair, but after the first couple of nights, woke to find Aedan beside me as well. At first I thought it was due to overprotectiveness on Aedan's part, but I soon realised everyone was moving closer and closer to the group each night, until a week in, we were practically sleeping in one gigantic puppy pile. I was always sandwiched between Alistair on one side, and either Aedan or Duncan on the other, and everyone else was within an arm's reach. Even Shale had taken to standing nearby. No one wanted to be alone, even for a moment, in the Deep Roads. \n\nI asked Shale, once, why she never sat; she demonstrated, rather pointedly, by using her rear end to crack a boulder left out in the open by the crosscut miners. I giggled, and could have sworn she smirked. It was one of very few laughs I had while trudging through those forsaken passages. I clung to Alistair's hand as much as possible, and often Aedan's as well; I needed the contact, or I thought I'd go mad. \n\nAnders seemed to be struggling with being enclosed in the Deep Roads. Not that that surprised me - I recalled his objections to it from Awakenings and DA2 - but his haggard expression almost rivalled Duncan's. I was worried. I tried to talk to him about it, get him to think about something, anything else, but even teasing him about Solona could barely get him to crack a smile. Jowan was by his side almost constantly; the blood mage barely spoke to anyone else unless spoken to, but he faithfully stayed with Anders, for which I was grateful. \n\nThe one thing I did manage to get Anders talking about, once, was Solona. He told me he'd left her a letter, like I had suggested weeks before on the road to Orzammar. He didn't tell her what had happened in the tower, just begged her for one chance to talk, to try to explain. I hoped she'd give it to him. And I thought his hope that she might was possibly the only thing that kept him going. \n\nAbout a week after we'd left Orzammar, when we were attacked by a bunch of deepstalkers, we took a couple of hours to skin, gut, and roast one of them to replenish our stores. The two mages took turns using spells to keep the rocks underneath scalding hot; it was a good thing, because the only thing we had to burn was ancient refuse, most of which had been tainted. I had my first taste of deepstalker; it was sort of chewy, but thankfully without much flavour. I missed Leli, for about the hundredth time; she might have been able to make something actually not-objectionable from the meat. \n\nGorim estimated that we were three to four days from the Dead Trenches, where we hoped to catch up to Kardol and the Legion of the Dead. We'd seen no sign of Sereda, not that we'd have recognised it if we had, so we had to hope she was with the Legion. Because we were taking the most direct route to our destination, we hadn't come across any Legion patrols, who always travelled from one supply depot to the next so they could travel safely in small groups. \n\nThe closer we got to the Dead Trenches, the more overwhelming the sensation of darkspawn got. Duncan assured us that we weren't going to be ambushed, but all of the Wardens got jumpier and jumpier as we approached. The last night, practically on the edge of the Trench, I don't think anyone got more than a couple of hours of restless sleep. \n\nWe woke to a darkspawn ambush, but no one was surprised, or even asleep. There was an Emissary, the first we'd seen in the Deep Roads. I used its mana to shield my companions, and Alistair decapitated it with his long sword. Once the group, which included several hurlocks and a handful of shrieks, was dealt with, we all slumped down by our bedrolls, disheartened. It was difficult keeping up morale, and the claustrophobia seemed to be getting worse with time. \n\n\"Well, there goes any hope that the Archdemon didn't know of our presence.\" Duncan flopped down beside Alistair, exchanging grim frowns. \"You're sure it won't attack us the moment we near the trench, Sierra?\" \n\n\"It didn't in the game, but as we've seen, that doesn't guarantee anything. I'd say a healthy dose of caution is warranted.\" \n\nDuncan sighed. \"I'm going to go ahead, alone. I fear the Archdemon will be drawn to my advanced taint, being so close to my Calling. If nothing happens, I will find the Legion of the Dead and await you there. I want you to wait here at least a couple of hours before following me.\" \n\nAlistair jumped up, running his hands through his now-shaggy blond hair. \"Duncan, no. You can't do this. We need you with us.\" He paced, expression pained. \"I can't do this without you.\" \n\nDuncan rose slowly, reaching out to grab Alistair's shoulders. \"You can. Aedan can lead you, if you insist, but I know you can do this, Alistair. You two can end the Blight, and you have help, now. I won't risk all of you. Ferelden - Thedas - needs you. And if I'm wrong, and the Archdemon doesn't attack, I'll see you on the other side.\" \n\nAlistair's eyes were suspiciously moist, but he nodded once. \"Maker watch over you, Duncan.\" \n\nDuncan pulled him into a brief hug, then turned, kissed my forehead, gathered his things, and walked off. Alistair's shoulders slumped, and I pressed myself against his chest, getting as close as I could with both of us in armour. \n\n\"He'll be okay. I got the impression the Archdemon was taunting us, in game. It could have roasted us, but it wanted to play with us first. I'm sure this will be no different.\" \n\nJust then, Aedan walked up, wiping his sword with a rag. \"Where'd Duncan go? Suddenly have a shy bladder?\" \n\nI cringed. \"Um...he's going to scout ahead. He said to wait two hours, and then follow him.\" \n\nAedan narrowed his eyes. \"Scouting.\" I nodded. \"Alone, while having the strongest taint to attract every darkspawn around.\" I nodded again, refusing to make eye contact. \"What aren't you telling me?\" \n\nI sighed. \"The Archdemon is up there, somewhere. Duncan's afraid it will sense him and try to kill him because his taint is too strong. He doesn't want us travelling all together so that it doesn't take us all out in one fell swoop.\" \n\nAlistair grinned weakly. \"Because swooping is bad.\" \n\nAedan growled. \"Nice. No good-bye's, he just left?\" \n\n\"I suspect he was trying to avoid drama.\" \n\n\"Trying to avoid someone stopping him, you mean.\" \n\n\"That too.\" \n\nI hugged Aedan - easier in his leathers than hugging Alistair in his dragonbone - until his shoulders relaxed and he returned the hug. With a brief, grim smile, he turned back to the group to inform them of the delay. It was a noticeable change: around Duncan, Aedan tried not to take the lead too much. He wasn't shy about expressing his opinions, but he took orders just like everybody else. But his natural skills came back with a vengeance when required. It was interesting. No one disputed his leadership, and I smiled with pride. \n\nThe two-hour wait until we could head out was sort of painful. We all sat huddled together, trying not to imagine what was happening to Duncan. We had to rely on the dwarves' stone sense to tell the time, and I thought Gorim might punch Aedan after about the twentieth time he'd asked if it was two hours yet. \n\nWhen we finally got moving, it was hard not to sprint down the corridors in the direction Duncan had gone. We purposefully tried to keep to our normal pace, but I was looking around every corner, fearing finding a still-warm corpse. We did find a few recently deceased darkspawn, but for the first couple of hours, that was all. \n\nWe came to the edge of the dead trenches, just as it was depicted in game. There was a massive chasm, deep enough that we couldn't see the bottom, with lava falls lighting the way down into the darkness and mist. It looked like the descent into hell. At several levels there were bridges criss-crossing the chasm, leading into tunnels on either side that were dark and mysterious; there was one visible road, twenty feet wide, running lengthwise off into the distance. It was perhaps a couple hundred feet below us, and it was covered in darkspawn. The entire horde was there, marching. \n\nThe smell of decay, and taint, and general wrong-ness was seeping up the walls of the chasm, and I choked at the intensity. We'd all become accustomed to the smell of the Deep Roads, but this was much, much worse. And it was hot; I guessed that at the bottom of the trench, it must have been pure molten lava. \n\nWe didn't see the Archdemon, and I wondered if the game had gotten it wrong, or if Duncan had thrown things off. We stared, horrified, at the horde below for several long minutes; for each of us, the importance of our mission to end the Blight was brought home in a very visceral fashion. I briefly wished I'd brought my phone into the Deep Roads to take a picture for Solona and the others we had left behind. \n\nFinally, shaken, Aedan pulled us away from the edge, encouraging us to move on. No one talked, everyone lost in their own, dark thoughts. I was so distracted that I almost didn't notice the subtle feeling in my head, like I was being watched. I closed my eyes, stopping for a moment, and then opened them to look at Alistair. \n\n\"Do you feel that?\" \n\nStartled by my sudden stop, Alistair thought for a moment before meeting my gaze. \n\n\"Duncan!\" \n\nI nodded, and without another word, both of us headed off, down a narrow corridor in the direction that I could feel Duncan's taint. Aedan and the rest of the group followed us. As we hurried, the feeling intensified. Darkspawn. Without discussing it, the Grey Wardens and I began unsheathing weapons, and the rest followed suit. \n\nFinally, after an eternity of winding tunnel, we opened into a large natural cavern. Duncan was standing in the middle, swords out, turning in a slow circle; a group of probably twenty darkspawn, including one Emissary and one ogre, stood around him, completely hemming him in. They didn't appear aggressive, however, and we all paused at the edge of the cavern to watch in shock. The Emissary spoke, its voice too quiet for us to hear, and Duncan visibly flinched; that was all we needed. \n\nI felt Alistair reach out and smite the Emissary, and it staggered to its knees; the rest of the darkspawn spun and headed in our direction. \n\nBefore they made it far, Jowan and Anders began chanting in unison, and the hairs on my arms stood on end as I felt their magic flare. Suddenly there was lightning arcing through the expanse of cavern between us and Duncan, and thunder boomed; ice bloomed and rained from the ceiling. Storm of the Century. The genlocks were the first to fall, the hurlocks next; the only darkspawn to make it through the storm was the ogre, and it was covered in frostbite, its skin blistering where it wasn't already peeling. Oghren let out an incoherent shout, leaping an impressive distance to bury the head of his axe in the ogre's chest, and riding it down as it collapsed. \n\nThe storm dissipated as fast as it had come, and I stared, open-mouthed in shock at the carnage. I remembered using the combination in game, though rarely - you couldn't control where it would strike, and if you weren't lucky, it would take your allies down just as fast as it did your enemies. But the bodies didn't persist in game like they did in the real world, and the charred, smoking corpses mixed with creepy ice statues were a level of disgusting I'd never imagined. \n\nI looked up in time to see Duncan behead the still-stunned Emissary. Picking our way carefully across the field of gore, Alistair, Aedan and I approached Duncan while everyone else stayed back to congratulate Anders and Jowan. Duncan stood, still holding his weapons, his posture defensive, and I wondered if there were more darkspawn around that I couldn't feel. I extended my senses, and found only Grey Wardens. \n\nAs we got within a dozen yards of the senior Grey Warden, he spun to face us, weapons raised. \n\n\"Be gone, foul creatures! I will not listen to your lies!\" \n\nThe three of us stopped, exchanging confused glances. Aedan took a cautious step forward. \"Duncan? They're all dead now. It's okay.\" \n\n\"I can feel your corruption! I will not turn! I will not listen. Get out!\" He took a wild swing with his sword at Aedan, who jumped out of the way with alacrity. \n\n\"Duncan! It's Aedan. What are you doing?\" Alistair was the next to step forward and be swung at; the sword clanged uselessly against his shield, then again. Duncan was clearly out of his mind; if he'd been himself, he'd have been much deadlier in his attacks. \n\nWe exchanged looks again, and then I tried - without stepping any closer. \"Duncan? It's me, Sierra. What happened here?\" \n\nDuncan blinked, unfocused gaze slowly travelling over to my face. \"Sierra? Sierra, run. The darkspawn. You must get away!\" He stepped quickly to stand between me and the other men, his back to me, holding his swords up defensively. Aedan and Alistair stepped back again out of range; each step seemed to lower his visible anxiety. ",
        "I whispered, \"Go back. Over there. Let me talk to him.\" \n\nAlistair shook his head. \"I'm not leaving you here; he's clearly deranged.\" \n\n\"I know, but I think he's sensing the taint in you, and it's confusing him. He thinks you're darkspawn. Just...let me try, okay?\" \n\nReluctantly, without breaking his gaze, Alistair stepped backwards, guided by Aedan. When they were across the cavern, Duncan finally seemed to relax, turning back to me. \n\n\"How did you get here, Sierra? Where are the others?\" \n\n\"They're just...just over there a ways. What happened, Duncan?\" I approached slowly, carefully, reaching out to put my hands on his shoulders. \n\n\"I...the...I don't know. The Archdemon, and then...\" He stopped and clutched at his head, swords dropping to the ground at his feet. \"It was in my head. So beautiful, but so wrong. Talking, singing, crooning to me. I couldn't block it out, couldn't make it stop.\" The cadence of his speech was odd, unlike his usual formal tone. He ran a ragged hand through his wild hair, hard enough to pull out several strands. I reached up to take his hands in mine. \n\n\"It's okay. It's over now. You're safe. Can you still hear it?\" \n\n\"It wants me. It wants me to join them, to lead. I won't do it! I won't listen!\" His voice rose in pitch and volume as he spoke, and Alistair took an involuntary step back towards us. \n\nI lifted my hand, gesturing him back, then gently pulled Duncan by the hand over to the wall in the back of the cavern. I took off my pack, digging through it until I found what I was looking for. I slid down the wall, encouraging Duncan to sit beside me, handing him the flask I held. \n\n\"You must be tired. Here. Drink.\" Anders' sleeping potion was tilted back and swallowed; Duncan gazed trustingly at me, like a child might look at his mother. \"I'll sit on watch. You're safe. Why don't you put your head down?\" I put my hand on his shoulder, pulling gently until Duncan lay with his head in my lap. I took off my gloves and stroked his messy hair, pulling sweat-slicked strands off his forehead, rubbing his scalp softly. \"That's right. Just sleep.\" \n\nIt took a few minutes, but soon his soft snores could be heard, and I gently shifted until his head rested on my pack and I was freed. I climbed quietly to my feet and headed over towards the others. \n\nI answered everyone's unspoken question as soon as I had Alistair's hand firmly in mine. \"The Archdemon did something to him. It sounds like it tried to recruit him. He's fighting it, but he can hear them now.\" I frowned, feeling dirt flake off my face as I did. \"I think those darkspawn were trying to get him to go with them. I don't think they were going to attack him. He managed to refuse, but then when he felt your taint, he thought you were more of them. He couldn't sense me, so it didn't confuse him as much.\" \n\n\"Are you saying, Bellissima, that our fearless Commander is becoming a darkspawn?\" \n\nThe Antivan voice made me wince; I'd just spilled secrets in front of multiple non-Wardens. Stupid, Sierra. Duncan will have your head for that when he...if he...I stopped that line of thought before I could carry it too far. \n\nI looked at Aedan and Alistair, who sighed and nodded. I took a deep breath. \"Not exactly. But Wardens do have a connection to the horde and the Archdemon, and it gets worse the older they get. If they wait too long, they go mad and become much like ghouls. Look, you're not supposed to know this, okay? I will deny ever having said it, if any of you admit to knowing it.\" I looked between Zev, Oghren, Sten, Shale, and Gorim, waiting until I got a nod of understanding from each. \n\n\"Braska!\" Zev swore, turning to pace, shooting Aedan an agonised look. \"How long?\" \n\n\"Fifty years, give or take.\" \n\n\"But surely...Duncan is not that old? He should have years...\" Gorim looked confused. \n\n\"I...we...Avernus improved it. It used to be thirty years. But the improvements don't work on those so far gone. Duncan's been a Grey Warden for almost thirty years.\" I trailed off, feeling guilty, like I'd somehow violated his privacy. Screw the Grey Warden secrets! I don't owe them anything. \n\n\"Where is he now?\" Anders asked. \n\n\"Sleeping. I gave him one of your potions. He should be out for a few hours.\" \n\n\"I want to check him over, if I can. Can I accompany you over there? I'll back off if he wakes or gets agitated.\" \n\nI nodded and followed Anders back over the carnage. \"Nice spell, by the way. I didn't know you guys knew the Storm of the Century.\" \n\nAnders grinned. \"I like ice. And Jowan's pretty good with lightning...we've been discussing it for a bit, wondering if we could make it work. Neither of us had ever actually seen it.\" \n\nI smiled back, then stumbled, forcing myself to watch where I was stepping. \"Messy, though.\" \n\nHe chuckled under his breath, awkwardly stepping around a genlock corpse. \"Yeah.\" \n\nWe reached Duncan without him appearing to stir; I felt Anders' aura flare as he ran blue, glowy light from Duncan's head down through his body. It took a while, and I was practically bouncing with impatience. \n\n\"So? What's the verdict?\" I looked over to see Anders looking quite grey and pale. \"Anders?\" \n\nHe shook his head, some of his colour returning. \"He's fine. Uninjured, as far as I can tell. But the taint...I had no idea it could progress like that. Andraste's flaming knickerweasels, that's depressing.\" \n\nI flinched. \"Sorry. If it's any consolation, it'll take a lot longer to happen for you.\" Us. \"And the effects won't be as bad, on things like the reproductive system.\" \n\n\"So that's a recent change?\" \n\nI nodded. \"Just before we sprang you from the Circle. There's an ancient Grey Warden blood mage who's been doing...distasteful...research for two centuries, using blood magic to keep himself alive. He found ways to slow the taint, and to alter the unfortunate side effects, like infertility. Morrigan helped.\" \n\n\"I'm selfishly glad.\" He took a shaky breath. \"Maker, I don't know what to do about this, though. He doesn't have any of the usual signs of madness...I can't fix this, can't even start to ameliorate the symptoms.\" \n\n\"Do you mean he's going to stay this confused?\" \n\n\"I just don't know.\" \n\nI sighed. \"I'll stay with him. I know him better than most here, and I'm not tainted. Would you tell the others to make camp nearby? We'll have to wait until he wakes, and hope for the best.\" \n\nChapter Eighty-Two: Confusion and Revelation \n\nI sat near the sleeping Duncan and waited, waited and sat. It was really, incredibly, boring. I had nothing to do, and we didn't want to risk any of the other Wardens being too close when Duncan woke, so I sat mostly alone. Sten and Gorim wandered over to sit for a while, no doubt at Aedan's or Alistair's urging, but making small talk when everyone was clearly stressed and scared was awkward, and talking to Sten was always a bit frustrating, so it didn't really help. After a few minutes, when it became clear that they weren't improving the situation, they both went back to the group, leaving me alone again. Zev and Prince stayed with me a while, just sitting in companionable silence. Somehow I didn't feel the need to chat with Zev, to fill the silence; after all the times he'd followed me on Aedan's orders, I was used to sharing silence with him, and it was comforting just to have him there. \n\nI contemplated the feeling of oppression that I couldn't shake, which had only worsened the further into the Deep Roads we'd travelled. The constant pressure of the darkspawn in the back of my head had become a deep ache, and I wondered if I'd ever feel clean again. I'd tried to keep my spirits up as we walked, but with Duncan obviously ill or damaged by the Archdemon, and no end to our time in the Deep in sight, it was becoming unbearable. \n\nI sank down into fetal position beside Duncan, one hand gripping Prince's stiff fur, the other clinging to Zev's hand, and just concentrated on breathing. \n\nFinally, after what felt like days, but was probably only four hours, Duncan stirred. Zev headed back to camp; Prince stayed and watched Duncan warily. I was by Duncan's side in a moment, squeezing his hand and murmuring reassuring nonsense while his mind cleared itself of its drug-induced sleep. His eyes were less hazy, when he looked up at me, and I could see that he wasn't as confused as he'd been. I helped him sit up, and then settled myself beside him. \n\n\"Did all that really happen, then?\" \n\nI nodded, and he sighed, rubbing his face and then running his fingers through his hair. \n\n\"Tell me I didn't actually attack Aedan and Alistair?\" \n\n\"It's okay. It wasn't you. The Archdemon...\" \n\n\"It doesn't matter why. The fact remains, I'm a danger to this mission. To the other Wardens.\" \n\nHe climbed to his feet before I could respond, clearly frustrated and scared. As are we, Duncan. I took his offered hand and stood myself. He reached down and pulled one of my daggers from the sheath, handing it to me pommel first. \n\n\"Will you stay close, and keep this ready? If I show any signs of attacking the others, use it. Promise me?\" \n\nI flinched, staring at the blade in dismay. Could I do it? Kill Duncan to save the others? Alistair would never forgive me. I knew, though, that it was the only right thing to do. I'd try really hard not to kill him - knock him out, if I could - but I'd do what I had to if it came to that. I nodded. \n\nI tucked my hand through his arm, and we shuffled off towards the others' camp. \n\n\"Maker's ass, what happened here?\" Duncan had paused, staring at the corpses that ranged from frozen to thawed, electrocuted, and dismembered. \n\n\"Don't piss of a couple of mages,\" I muttered, and Duncan shot me a piercing gaze. I shrugged. \"It's called Storm of the Century. A Tempest and a Blizzard. It's quite effective.\" \n\n\"So I see.\" \n\nWe finished picking our way across, then headed down the hall towards camp. I could tell when we got close enough that Duncan could sense the other Wardens; he stiffened, but didn't falter. I squeezed his arm, and he smiled ruefully at me. \n\nAedan and Alistair were standing out in front of the camp, swords sheathed but hands gripping the pommels. Duncan walked slowly, as if testing his own resolve, but didn't stop. He put his hands out in front, showing he wasn't carrying a weapon. I smiled encouragingly. \n\n\"I am sorry, Aedan, Alistair. I apologise for my actions. I was...not myself. I am better now.\" \n\nThey both relaxed, approaching and exchanging man-hugs. Duncan apologised over and over, making Aedan and Alistair both chuckle. Alistair came over to me, pressing a kiss to my forehead and putting his arm around my shoulders. Even over filth and the smell of the Deep Roads, I could smell that scent that was all Alistair, and I nuzzled as close as I could get. I missed that smell, missed the feel of him and his strong arms and smooth skin and rippling muscles and...Oh, great, Sierra. Smart. Get turned on in the middle of the Deep Roads while covered in dirt and Maker knows what else... \n\nWe settled at the camp for an early rest, planning to set out early. We ate more roasted deepstalker, then I snuggled up between Alistair and Duncan and went to sleep. \n\nAfter a few hours, we rose, packed up, and got moving. Gorim pointed out signs of the Legion's presence - a long-extinguished fire, remains of packaged rations, chalk marks on the walls that looked random, but were actually arrows. It was encouraging; we were near the front, and had directions to follow to find it. \n\nWe walked for hours in virtual silence; no one wanted to talk about our worries, and we couldn't force ourselves to make small talk with everything that had happened. \n\nIt was nearing time to make camp, but everyone was reluctant, wanting to make it to the Legion if possible; finally, exhausted, I called a halt. Aedan shot me a look, and I sighed. \n\n\"Aedan, I know. But I'm tired, and I can't imagine it's any easier for the other non-Wardens to keep up. Not all of us have Grey Warden stamina.\" I flicked my gaze over to Zevran, Oghren, and Gorim, who looked ragged. Sten and Shale, of course, looked fine. \n\nGetting the hint, he finally nodded. We tucked ourselves into the curve of a wall in a natural cavern and set up camp. I slept fitfully, as did everyone else; the oppressive aura of the Deep Roads just exacerbated everyone's already grim mood. Duncan chose not to sleep, not wanting to risk seeing the Archdemon in his dreams. I gripped his hand as I slept. \n\nDuncan had, much to my relief, wrangled agreement from everyone travelling with us to defend ourselves and the other Wardens with lethal force if necessary, in case he got confused again; no one was happy about it, but at least it wasn't just me.  \n\nAfter a brief respite, we got moving again. Gorim assured me it was mid-morning; it could have been any time, as far as I could tell, in the perpetual dusk of the Deep Roads. I was stiff from sleeping propped up against the wall, and was in the process of stretching while walking, when we came across a patrol of Legion dwarves. \n\nThey were standing, weapons drawn, when we came around a sharp corner. When they saw us, they were startled, but put their weapons away. \n\n\"Ho the Legion!\" shouted Oghren, much to everyone's general amusement. \n\n\"What in the...Grey Wardens?\" One dwarf pulled off his helmet, stepping forward in shock. He had scruffy, curly brown hair and a Grizzly Adams beard; no tattoo, but his accent wasn't noble. He had a long, pale scar running down one cheek, and his hands were calloused from years of swordplay. \n\nDuncan stepped forward, crossing his arms over his chest and bowing. \"Greetings. I am Duncan, Commander of the Grey, and these are my Wardens and companions.\" \n\n\"Atrast vala, topsiders. I am Ean, and this is Tipper. Ancestor's shiny arseholes, what are you doing down here? Don't you know this is a Blight?\" \n\nI laughed, covering my mouth at the hilarious curses. Duncan smothered a grin. \"We are aware.\" \n\nTipper took off his helm, and a long mane of coppery read hair cascaded out. Make that her helm. She had a bold tattoo across her forehead and around one eye. \"Oh, let me guess. Orzammar won't pledge support until the throne is settled. Which means...you're looking for the Paragon.\" \n\nWe all gave wry smiles. Aedan stepped forward. \"You have a good grasp of the politics of the situation.\" \n\nThe two Legion dwarves exchanged glances. \"Come. We'll take you to Kardol.\" \n\nWe followed the two dwarves for a couple of hours through a warren of tunnels. I was glad we'd found them, not sure we'd have been able to find our way through without a guide. \"Which is the point, of course,\" Tipper had responded when I mentioned it. \"'Spawn aren't that smart. They get lost, and we can pick them off easier.\" Apparently the Legion camp moved frequently, even when near the front, to avoid the darkspawn ambushing them while they slept. \n\nWe came to an area that opened on to the trench, a massive stone bridge spanning the gap. Just like in game. There were a couple dozen dwarves around, some seemingly sleeping, some cooking or performing other domestic tasks, some appearing to stand watch. And I guessed there were probably more patrols out, plus small groups heading back and forth from Orzammar for supplies...I'd have bet there were pushing fifty dwarves, just for this Legion front. And Gorim had explained that there were multiple fronts, each with their own little tribe of dwarves. Just how many 'dead' dwarves are there wandering around? \n\nIn the middle of the enormous cavern stood a dwarf who appeared to be the leader; groups and individuals approached him, talked for a while, and then left as he gestured to the next. I assumed it was Kardol, though honestly I couldn't really remember what the dwarf was supposed to look like. He was stocky, even for a dwarf; his forearms were probably as big around as my thighs. He had an elaborate, dark auburn beard, close-cropped auburn hair, and a tattoo that dominated much of his forehead and face. \n\nWe drew the attention of every dwarf there as we exited the narrow tunnel we'd come from. Several stopped to stare, a few even pointed; most continued with whatever they were doing, but it was painfully obvious that all of them were watching us. Many of the dwarves wore full helmets, and it was sort of like the feeling at the Circle Tower, with so many faceless men in heavy armour standing around. \n\nKardol turned towards as us we followed Ean across the room. He returned Duncan's formal bow, then the two men clasped forearms and grinned. \n\n\"Atrast vala, Duncan! I had heard you were dead, but I see the rumours were unfounded. It is good to see you, Salroka.\" \n\n\"Kardol. Yes, I survived, but few of the other Wardens did. It has been an...interesting few months.\" \n\n\"I'm surprised to see you down here. I figured, with the Blight, you'd be up on the surface, organising armies or some such.\" \n\n\"Yes, well, we need armies to organise, first. And with Endrin's passing...\" \n\n\"Ah, yes. We also are at a loss; without a King, we have no orders. So for now, we hold on. As does the rest of Orzammar, I expect.\" \n\n\"Just so. Which is why we are here. Can we talk somewhere, privately?\" \n\nKardol nodded, and gestured at a dwarf standing across the room. The other dwarf, a balding, furry, short bear of a man, came over, and, ignoring us, began dealing with the lineup of dwarves that had formed near Kardol while we talked. Kardol turned, leading us away. \n\n\"Your companions can wait over there,\" Kardol offered, pointing to an area with some stone benches, and a fire pit with some sort of enormous animal - bronto, I assumed - roasting on a spit over it. \n\nDuncan gestured, and everyone except Aedan, Alistair, Gorim, and I headed over there. The four of us followed Kardol down another tunnel and into a small, dwarven-made room. There was an actual door, one of the huge, metal dwarven doors they used to seal off Deep Roads entrances, and a bunch of crates. That was all. A small opening at the back of the big storage room was the only sign that the 'safe' area might be larger than it appeared. I wondered if there were sleeping areas and such back there, and if so, why the Legion moved around so much. \n\nKardol took a crate off of another, pushing both back, then did it again; he gestured for us to sit as he wrangled his own crate down and climbed up. \n\n\"Who're your friends, Duncan?\" \n\nWe introduced ourselves; Aedan and Alistair got respectful nods, Gorim, when he took off his helm, received an inscrutable frown, and I got a curious appraisal from the dwarf as we were introduced. \n\n\"Welcome, Wardens. Gorim, I have to say, I had heard Sereda Aeducan's second had been banished to the surface. I never expected to see you here, of all places.\" \n\nDuncan cleared his throat. \"That's part of why we're here, Kardol.\" \n\n\"Somehow I'm not surprised.\" \n\nGorim spoke up. \"Kardol, you and I both know Sereda knew enough about the Legion to survive her exile and get here. She knew the maps by heart, knew your way-stations and the locations of the fronts. Have you seen her?\" \n\nKardol's piercing gaze transferred from Duncan to Gorim. \"Why do you care, Surfacer? You couldn't save her from exile, and you can't take her back now, even if you could find her.\" \n\nGorim flinched, and I winced. I reached out to put my hand on his shoulder, but he shrugged it off. \"You're right. I can't. But Endrin is dead, Harrowmont is a sniveling sycophant, and I'll be damned if Bhelen becomes King without a fight, not after what he did to her, and to Trian. We need her.\" \n\n\"Whatever for? She couldn't return. She can't take the throne. She's been exiled!\" \n\nDuncan cleared his throat, drawing Kardol's attention. \"If she had the backing of a Paragon, she could.\" ",
        "Kardol stared at Duncan for a moment and then roared with laughter. \"That's what you're here for? Duncan, my friend, you've been sent on a fool's errand. Branka's been missing for two years. No one survives two years in the Deep.\" \n\nI looked to Duncan, who nodded, and then I spoke. \"Actually, she's alive. If you're crazy and ruthless enough, it's possible to survive - by sacrificing everyone who followed you. She's in Bownammar. She's chasing a relic, the Anvil of the Void.\" \n\n\"And you would know that because...?\" \n\n\"Long story. Very, very long story.\" I sighed. \"It doesn't really matter, though. We're going across that bridge, to find Branka. It would be very...helpful, if we knew that Sereda would be here waiting when we were done.\" \n\n\"Will you help us?\" Duncan appealed to the grizzled dwarf. \"Please, my friend.\" \n\nKardol looked at Duncan, then myself and Gorim in turn, looking thoughtful. I hoped our earnest expressions would convince him. He opened his mouth as if to say something, but his frown was making me nervous. I waited with bated breath for what he would say... \n\nIt turned out it didn't matter. I heard the loud sound of a clanking, armoured footstep, and turned to see a dwarf ducking through the small opening in the back. Kardol looked surprised, and somehow...afraid? We waited until the new arrival stopped in front of us. \n\nGorim was on his knees before the helmet came off to reveal a stunning, red-haired female dwarf with a scowl on her face. \n\n\"Your Majesty,\" Gorim whispered, apparently almost overcome. \n\nShe directed her frown to the kneeling warrior, reaching down to put her hand on his shoulder. \"Get up, would you? I didn't stop hating all that nug-humping ceremony just because I've been in the Deep for a few months...\" \n\nGorim looked up, grinned widely, then jumped to his feet, gripping her hand. She laughed and put her arms around his neck, kissing him soundly. I looked away, embarrassed and nervous for her reaction when she learned about his wife. \n\nHe seemed to have the same thought, stiffening up after a moment, pushing her back slightly and peeling her arms away. Surprise flitted across her face, before she slammed an expressionless mask down over her features, reminding me of Zevran in the early days. \n\nSereda bowed to Duncan and then to the rest of us, and we all returned the gesture. \n\n\"You really know how to find Branka?\" Her voice was musical, and much more feminine than I'd have expected from a dwarven warrior, princess or not. \n\nI nodded, and she considered me for a moment. \"Ignoring the obvious question for a minute, just what makes you think she'd support me?\" \n\n\"She doesn't care who is on the throne, as long as she gets the Anvil. She'll support anyone who helps her get it, or allow us to choose if we help.\" I wasn't going to mention Caridin, not yet, and not in front of Kardol. We would have to convince her of the truth of my story first. \n\nShe stared at me for a moment longer, then gestured to Kardol. The two of them went through the small opening, standing just on the other side; we could hear whispers, but I couldn't make out any of the words. We waited politely on our crates while they spoke. I risked a glance at Gorim to see him blushing and shifting around nervously. I felt sorry for him; no outcome was going to be entirely good for him. Either he abandoned his wife, who was with child (even if it seemed the child might not be his), or he left Sereda, which I wasn't sure he'd be able to do. And that's even if she let him walk away - if she became Queen, she could just as easily have him arrested or executed if he tried to leave. I hope she's not that kind of ruthless. Dwarven politics is cut-throat, but hopefully not to that extent... \n\nAfter a few uncomfortable minutes, Sereda and Kardol came back out together. \n\n\"I'm coming with you,\" she stated, as though there had never been any doubt she would help us. \"I've not officially joined the Legion, so I can still leave.\" Gorim sighed in relief, and my eyebrows raised. It hadn't occurred to me what might have happened if she had actually joined the Legion of the Dead. \"The Legion will help us get across the chasm to Bownammar, but they dare not go any further. We will have to make it through to Branka by ourselves.\" \n\nDuncan nodded, and delved into a discussion with Kardol about when to launch the offensive. Of course, Duncan wanted to begin as soon as possible, but Kardol insisted he needed time to pull in his patrols and relocate the camp. \n\nSereda motioned to the rest of us, and we followed her out of the supply room and into the tunnel, leaving Duncan and Kardol talking. We followed Sereda back to the main cavern, where we joined up with the rest of the group. Sten was sparring with a Legionnaire, with everyone else watching. They appeared to be well matched, and it was sort of amusing to see the giant get knocked over by a stout dwarf. Shale was surrounded by a group of admiring dwarves, and appeared to be quite pleased with their admiration. \n\nBel dropped to his knee, face red, as soon as he saw Sereda approach, but she was quick to pull him to his feet. Faren stayed back, expression inscrutable, but Sereda nodded to him and offered him a friendly arm, just as she did for everyone else, and he relaxed. After introductions, we all sat to eat. Aedan filled everyone in about the planned offensive to the gates of Bownammar, and I could see relief in everyone's eyes when they learned that Sereda would be coming, and that the Legion would help us get across the bridge. I could practically see the fear that we'd come all this way and then not find Sereda recede. \n\nGorim and Sereda alternated staring at each other longingly when they thought the other wasn't looking, though they both tried to act as if nothing strange was going on. It was awkward, but we kept up with small talk to cover the discomfort. \n\nAfter a while, Duncan rejoined us. Kardol had the Legion move their camp to the plateau we currently occupied, and we arranged for one Warden at a time to be on watch with a Legionnaire. We settled in to sleep for a while, though looking at Duncan, I knew he wouldn't be sleeping again. I offered to stay with him, far from the other Wardens; he just shook his head and began pacing around the area. \n\nFor once, we slept without armour; it felt strange, and I kept shifting, expecting to feel the discomfort of stiff leather digging in where I lay. Alistair curled up protectively around me, the rest of our group nearby, as usual. It felt strange to be so near him, to feel the heat of his body against mine. I worried briefly that I probably smelled rank, but realised he probably did too, and we were both inured to it by now. I wasn't truly tempted to make too much of it - we still had no privacy, and I wasn't having sex again until I'd had the world's longest bath - but we were both somewhat giddy just to be close again. Nervous about the upcoming battle, and distracted by Alistair's presence, I had trouble sleeping, so I was quite awake when I heard Gorim creep out of our camp in response to Sereda's whisper. I closed my eyes and pretended not to see them walk away quietly. I don't know what possessed me, but I furtively wiggled out of Alistair's arms to follow them. \n\nThey went back into the storage room we'd been in before; I snuck cautiously up to the door and peeked around the corner in time to see Gorim kneel in front of a seated Sereda, expression agonised. He spoke, too quietly for me to hear, and then Sereda's smile faded, turning into tears. She slid down off the crate on to the floor in front of him, and he pulled her sobbing form into his arms. \n\nEmbarrassed to witness such an intimate moment, I turned and tip-toed back the way I'd come, climbing back into Alistair's arms. When I finally slept, I had nightmares of Alistair leaving me, and woke being cradled in his arms as I sobbed. I kissed him passionately as my tears slowed, trying to shake off the remnants of the dream. \n\nThe kiss rapidly deepened, both of us desperate to forget where we were and what was happening, only breaking off when Zevran started clapping and Oghren made a rude comment about forging the moaning statue. We sighed and separated reluctantly; my cheeks were aflame. \n\nI climbed to my feet slowly, seeing the Legion camp already mostly disassembled and dwarves rushing about everywhere. I struggled into my armour, looking up as I was finished to see Gorim approaching, dressed but somewhat more rumpled than normal; he avoided eye contact with anyone and just started packing up his own things. A few minutes later, Sereda emerged from the same hallway, and I smirked. No one else seemed to have noticed, and I didn't draw attention to the fact that they'd obviously been doing what Oghren had implied Alistair and I were about to do. They have enough problems to sort out, without adding being teased to it. \n\nOnce everyone was mostly packed, we joined Duncan and Kardol standing in front of the heavily guarded bridge. Duncan smiled at us, his eyes bloodshot but not rheumy, then turned back to the bridge. \n\nKardol shouted orders, and the dwarves fell in to formation in front of him, shields at the front and archers with crossbows behind. Duncan turned to me. \n\n\"Feel up to a little scouting expedition, Sierra?\" \n\nI lifted my eyebrows, surprised. It hadn't occurred to me. \"You want me to check on numbers, and things? Yeah, I could do that.\" \n\nAlistair shifted uncomfortably, and I gripped his hand with one of mine as I reached up with the other to cover Aedan's mouth before he could say anything. \"I'll be perfectly safe, and if for some reason I'm not, if I have to, I'll run like hell. It'll be fine.\" \n\nI put down my pack, drew my daggers, and walked around the amassed dwarves. I could hear shouts of alarm as I stepped out onto the bridge, but ignored them. I could feel dozens of eyes on my back as I picked my way across the rubble on the bridge. I looked back to see Kardol watching skeptically, and Oghren at his side sneering. I sighed and turned back to concentrate on my footing. \n\nAfter a minute, I was past the midpoint of the bridge, and another minute or two brought me close to the far side. I don't know what I'd expected, but the dozens of spawn in ranks in a massive semi-circle around the bridge was not it. They ignored me entirely, which I did expect, though it was still creepy to be able to walk within a few feet of the disgusting creatures without drawing any attention. \n\nI snuck behind the first rows of hurlocks and genlocks with crude swords and axes already drawn, to see two ogres on each side, and one Emissary at the back in the centre. There was also a row of archers on either side. That's a lot of darkspawn. I took a moment to count, memorising positions, then hurried back to the bridge. \n\nOn the other side, I approached Kardol and Duncan, who stood with the rest of our party. I explained the layout, scratching a rough picture in the dust at my feet, and the men all around me looked grim. Kardol and Duncan debated, briefly, before deciding that the Legion would bear the brunt of the melee fighters, while the Wardens and companions would fight their way around to deal with the archers, ogres, and Emissary. Jowan and Anders were to focus entirely on healing. They tried to insist on another Storm of the Century, but it would only have prevented our allies from getting into the fight, and wouldn't have hit the entire group anyway. \n\nEveryone knew there would be casualties. I sent up a brief prayer to God, the Maker, or whoever else would listen, that we could all come out of this unharmed. \n\nI volunteered to cross to the far side again and take out the Emissary as soon as the group attacked. Duncan nodded and kissed my forehead, as did Aedan. Alistair gave me a scorching kiss, ignoring the catcalls around us entirely. I grinned and slapped my helmet into place. \n\n\"Good luck!\" I called, and then headed back across the bridge, pack back in place and daggers glinting in the dim light."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-81-82"
}
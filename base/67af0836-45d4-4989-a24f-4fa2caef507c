{
    "title": "A Handyman's Memoir Ch. 14",
    "pages": [
        "Monday it was back to reality after the incredible weekend at Penny's camp. I slept late into the morning, poured a cup of strong coffee, and reluctantly checked my work messages. I was happy to see there was only one, from a rather nervous sounding woman named Julia. Actually, most of a handyman's customers are women who live alone, and it's not surprising that the first contact with me is a bit nervous for some of them.\n\nI called Julia back and she said she found me in the yellow pages. She had a broken screen in her front door, and I told I could fix it that afternoon. Often times the first job someone hires me for is a small one, so they can get an idea if they feel comfortable with me working in their home.\n\nAfter I had lunch I drove over to her house. It was a part of town that I like, with lots of funky shops and art galleries and music clubs. The area is populated with folks who like that sort of thing, and they live in some really interesting older homes. It's a hip neighborhood, for lack of a better term. Julia's small, one story bungalow fit right in, with a nice front porch and an 'artsy' vibe.\n\nJulia answered the door with a shy smile. She was very quiet and very plain looking, the kind of woman who blends into her surroundings rather than standing out. She was in her early forties, and had on a bulky sweater, loose fitting jeans and dirty old canvas sneakers. Without x-ray eyes there wasn't even a hint of what was underneath it all. She had long straight hair, sort of a mousy blonde color, and it hung all the way down to her waist. The only thing about her that had a little flair was her black, rectangular framed eye-glasses.\n\nShe was clearly nervous and didn't invite me in. I looked the door over, told her it was a quick fix and gave her a good price. She looked pleased and I went to work and had it finished in half an hour. She was very happy with the results, and when she came out to pay me she shyly asked if I did bigger jobs, and then invited me inside the house to look at a few more projects.\n\nShe explained that she had bought the house two years ago and found it to be very cold and drafty in the winter time. The house had been a rental before she bought it and the walls were in pretty tough shape and the ceiling had a deep crack across one corner, so she was considering having new drywall installed in the front living room, with good insulation behind it. She wanted to keep her funky old front door. I agreed it was nice, and I told her I could add weather-stripping to make it tighter. I also told her we could save the ceiling by grinding out the big crack and patching it. That would save some money.\n\nI had the rest of the afternoon free, so I spent some time measuring and worked up a rough estimate for her. I sat out on the front porch working up the figures, and Julia came out with two glasses of iced tea. She seemed pleasantly surprised at the price I gave her. I explained that I work alone, and that it would take longer than a contractor who had a big crew. That didn't faze her a bit, and she seemed quite relaxed and comfortable with me by the time I left. She was anxious for me to get started before winter set in again.\n\nI got started the following Monday. Julia welcomed me, looking just as covered up and frumpy as ever, but with a nice warm smile. I put up a plastic barrier to keep the dust out of the rest of the house, rolled out some heavy paper and cardboard to protect the floor, and started tearing down the old plaster. Julia asked if she could help me with the demolition of the first wall, so I got her a pair of gloves. Over the course of the morning we made a huge pile of debris, and got to know each other a little.\n\nJulia was an author of children's books. When we stopped for a break and a cold drink she took me into her small home office off the kitchen and showed me a shelf full of books she had written, and a whole wall full of awards and memorabilia from her career. She was clearly proud of it all, but I also got the feeling from a few things she said that she was sort of a recluse and didn't have much to do with friends or any outside interests. Her overall vibe was kind of sad and lonely, so I made it a point to crack jokes and get her laughing. I had held off on any flirting until I got a better feel for things, but I had a feeling it would do her good. Julia helped me load my truck up with debris that afternoon, and I prepared to leave for the day.\n\n\"That was fun,\" Julia said with a tired smile as we leaned against my truck. \n\n\"Wait a minute, don't blink,\" I said, and I put my hand on her shoulder. \"You've got a hunk of plaster right in the corner of your eye.\" It was the first time I had touched her, and she froze.\n\n\"Is it all right if I get it?\" I asked.\n\nShe nodded silently, her eyes locked on mine. She slowly removed her glasses, and I was confronted with two gorgeous eyes. It's amazing how different eyes can look when they're out from behind a thin piece of glass. \n\n\"You have beautiful eyes,\" I said as I carefully removed the fleck.\n\nShe gazed at me like she had never heard such a thing before, and remained frozen, staring at me for longer than I expected.\n\n\"Well, I'd better get goin' and unload this,\" I said, breaking the spell. \"I'll see you bright and early in the morning.\"\n\n\"Yes, in the morning. Goodbye Steve,\" she said softly, as she put her glasses back on.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nI arrived at eight AM and Julia was on her porch sipping coffee. Driving over I had decided, based on the way she looked at me when I touched her the day before, that I would flirt a bit with her today. If I hadn't thought of it already I definitely would have when I got there because she looked totally different, and quite cute. She had on tight faded jeans and a plain white t-shirt that showed off her womanliness much more than the thick sweater, loose pants, and sweatshirt she wore on previous days.\n\n\"Good morning Steve,\" she said brightly.\n\n\"Good morning Sunshine,\" I said, smiling. \"You're in a good mood today. I think I've got some catching up to do in the coffee department.\"\n\n\"Have a seat, I'll get you a cup,\" she said as she breezed in the door, giving me a glimpse of her nice ass.\n\nShe came out and sat with me and we talked about the warm weather. A strong warm front had blown through over night and the weatherman said it was going to be a long autumn heatwave. I had on shorts and a t-shirt, and it also explained Julia's thinner clothing.\n\n\"I hope you don't think I'm too forward asking you this,\" she said, \"but would you mind if I work with you some more? I had such fun yesterday.\"\n\n\"Sure!\" I said, \"I enjoyed it too.\"\n\nShe told me that her dad was a carpenter, and before he died, when she was a teenager, she used to love helping him with his jobs whenever she could. Working with me brought back good memories for her.\n\n\"I tell you what,\" I said, \"I'll keep track of the labor and I'll cut down on your estimate when we're done.\"\n\n\"No you won't!\" she said emphatically. \"Your price was more than fair. This is just for my enjoyment.\"\n\n\"Well, I have a feeling I'll enjoy it just as much as you,\" I said, and I winked at her.\n\nShe stared at me again, just like the evening before, speechless and almost curious looking, like she didn't have a clue why someone would say such a thing too her.\n\n\"So Sunshine, what do you say we get to work,\" I said.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nWe spent the morning tearing out more old plaster, and then there was some old rock wool insulation to pull out. Nasty, itchy stuff. It was downright hot by late morning and at one point I pulled off my itchy t-shirt and threw it aside, revealing my well-muscled chest. Julia stopped cold and stared at me.\n\n\"Oh, sorry, I wasn't thinking, I'm not used to having pretty girls around when I work,\" I said as I reached for it to put it back on.\n\n\"You don't have to do that. I don't mind,\" she said quietly, as our eyes locked for a moment.\n\n\"If we lived in Europe you could do the same thing, right?\" I said with a little chuckle.\n\nI heard a loud exhale from her nostrils, and she blushed bright red.\n\nI quickly ripped down another chunk of plaster to break the tension. Julia was silent as we got back into our work, and after a short while she left and returned wearing shorts.\n\n\"Ah, now we're gettin' somewhere,\" I said with a wink.\n\nShe pretended to ignore the comment, but I could tell she liked it.\n\nWe had lunch on the porch. Julia seemed a little shy about asking me to eat with her, but she had chicken salad and iced tea all made, and I was delighted to stay rather than hit up yet another burger joint. We talked about her writing career and her college days, and it became clearer that she was indeed very bookish and reclusive. It also sounded like she didn't have much fun in college, although she did enjoy the education. It also became clear that she didn't really have any friends to speak of, and she spent her time writing all day and watching old movies at night. I couldn't help but think of how completely opposite her life was compared to my experience at Penny's camp over the weekend, and I wondered what she would think of me if she knew about it.\n\nAfter lunch we took some time to load up my truck with debris again and make more room to work. At one point Julia got her long hair caught badly in some plaster chunks she was throwing into the truck and it almost brought her to tears. I was right next to her and gave her a quick scalp massage, and she gave me that look again. This time it made a little blood rush to my crotch, especially since her t-shirt was clinging to her in the summer-like heat.\n\n\"You're gonna have to stop lookin' at me like that. I might get ideas,\" I said with a sly smile. \"You know, long hair like that's dangerous for a construction worker.\"\n\nIt took her another long moment before she broke off her stare.\n\n\"I know. I kinda hate how it looks,\" she said.\n\n\"Well,\" I said with sincerity, \"it's not your best feature.\"\n\n\"I appreciate your honesty,\" she said, \"but I'm afraid I don't have a best feature.\"\n\nI quickly ran my eyes down her sweaty body and back up again, taking in all of her.\n\n\"I beg to differ,\" I said very seriously.\n\nShe didn't say a word, but her eyes twinkled in appreciation.\n\nWe spent the next two hours tearing out the last of the plaster. I got to the final piece up near the cracked corner, and before I knew what had hit me I crashed face down on the floor with a huge chunk of the ceiling on my back.\n\n\"Oh my God! Are you all right!\" she said.\n\nI was slightly dazed, and I could feel that my bare back was scraped up pretty badly. Julia gently lifted the debris off of me.\n\n\"Oh Steve, you're cut!\" she said.\n\n\"How bad is it,\" I said, wincing a little.\n\n\"Well, there's no need for the hospital, but we need to get you cleaned up,\" she said.\n\nI got up on my feet and the entire front of me was covered with dirt and rock wool fibers and sweat.\n\n\"Damn it, I should have realized that piece was loose up there,\" I said as I looked up to where the crack in the ceiling had been.\n\n\"Don't worry about that,\" Julia said. \n\nShe took my hand and led me to a kitchen chair, and she started dabbing at my scrapes with a wet towel. She shook her head, slowly realizing what a mess I was.\n\n\"Wait here, I'm gonna run you a bath,\" she said.\n\n\"A bath?\" I said, chuckling a little. \"Did that knock on the head send me back to the nineteenth century?\" \n\n\"I don't have a shower,\" she said. \"That was going to be the next project I had you do.\"\n\nMy mind flashed to my first time with Chrissy in her new shower. Leave it to a guy to think about sex when he's in pain and bleeding.\n\nJulia went down the hall and I could hear her filling the tub. While I waited I used some wet paper towels to get most of the mess off the front of me. She called for me and I went into the bathroom as she was turning off the water in a big oversized claw foot tub. She showed me the soap and a fresh towel and left me alone, shutting the door behind her.\n\nI managed to get pretty well cleaned up, but there were some bad scrapes on my back that I couldn't reach. \n\n\"Are you doing okay?\" Julia called through the door.\n\n\"Actually, I could use a little help with my back,\" I said.\n\nThere was a long silence.\n\n\"Julia?\" I said.\n\n\"Are you . . . covered?\" she asked shyly.\n\nI drew up my knees and leaned forward into them, so she couldn't see much, and I had my back to the door.\n\n\"Yes, come on in,\" I said.\n\nThe door opened slowly. It seemed to take forever for her to come near me.\n\n\"I can't reach my back very well,\" I said.\n\n\"Boy, you've got some bad scrapes,\" she said.\n\nI held up the soap and a wash cloth for her, and she proceeded to wash my back, silently and very gently. When she was done neither of us moved, and I could tell she was very nervous, to the point of not knowing what to do next.\n\nI decided to make a bold move, and I slowly stood, still facing away from her, water cascading down off my naked ass and legs. I looked back over my shoulder at her, and her wide eyes rose from my ass to my eyes.\n\n\"Would you hand me the towel please?\" I said.\n\nShe was paralyzed, her chest heaving with short breaths. I turned toward her in what seemed like slow motion, slowly revealing myself to her.\n\n\"Oh Steve!\" she said, in an almost silent whimper.\n\nAs she looked at me tears welled up in her eyes, and she suddenly looked horrified. I had gone too far.\n\n\"Julia I'm sorry,\" I said as I reached for the towel and covered myself. \"I thought you were . . . interested. I'm so sorry.\"\n\nShe was leaning against the wall covering her eyes with her hand, trying to fight back a full sobbing cry. I felt terrible.\n\n\"I am!\" she whimpered emphatically. \"It's just that . . . I've . . . never been with anybody before. Pretty stupid isn't it, a forty-two year old virgin who's never seen a naked man.\"\n\nShe exhaled loud a few times, trying to catch hold of her runaway emotions, but she lost the battle and started crying silently again, and she left the room.\n\nI dried off and wrapped the towel around my waist. Julia was in her bedroom right across the hall. The door was open and she was curled up on her bed in full view, so I went in. I sat down on the edge of her bed near her feet and put my hand on her knee.\n\n\"I'm sorry Julia. I handled that very badly, I went way too fast,\" I said.\n\n\"Are you kidding?\" she said, wiping tears from her cheeks, \"You were perfect. It was like something out of the best movie I've ever seen, and I blew it just like I always knew I would.\"\n\n\"Everything's fine Julia, don't worry,\" I said.\n\nShe gave me another one of her 'I can't believe you're saying that to me' looks that I find so adorable.\n\n\"How on earth does a person go forty-two years without ever having a date?\" she said, shaking her head in disgust at herself. \"It's just so pathetic. It's always upset me, but never like this,\" she said, wiping away more tears. \"God, I'm so embarrassed.\"\n\n\"Julia, there's nothing to be embarrassed about,\" I said. \"You just . . . you just went down the road too straight, and missed some of the interesting side roads along the way. But it's never to late to take a turn.\"\n\nShe giggled a little through her tears.\n\n\"That's some pretty flowery language there buster,\" she said, with a smile breaking through her sadness. \"Are you secretly a writer in your spare time?\"\n\n\"Feel free to use it if you want,\" I said. \"Do you ever write adult books?\"\n\n\"Steve!\" she gasped, and she blushed bright red again.\n\n\"Oh . . . no, I didn't mean . . . I just meant, you know, stories that aren't for kids.\"\n\n\"God!\" she said, shaking her head and burying her red face in her hands for a moment. \"What are you doing to me?\"\n\nI slid closer to her on the bed.\n\n\"I hope I'm kissing you,\" I said, and I leaned in and kissed her tenderly on her salty, tear soaked lips.\n\nShe looked at me intently, with a sparkle coming back to her tired eyes.\n\n\"I can't believe a beautiful young man like you is interested in a tired old maid like me,\" she said, shaking her head.\n\n\"Well believe it. Look at what one kiss did to me,\" I said as I opened my towel, revealing a mostly hard erection.\n\n\"Oh my God! Steve!\" She said as a visible tremor worked it's way quickly though her body.\n\n\"It's all for you Julia. I'd love it if you touched me,\" I said.\n\nShe was unable to move, chest heaving and staring at my cock. I put my hand gently behind her neck and kissed her while I guided one of her small soft hands on to my hard cock. Her slender fingers wrapped around it, and she moaned into my mouth. She kissed me harder, and our tongues danced together for the first time.\n\n\"Oh my god, it's so hot, it feels like it's on fire,\" she said breathlessly, looking at the now rock hard cock in her hand.\n\n\"I think it likes you,\" I said, and she looked thrilled beyond belief.\n\n\"May I undress you?\" I asked, and she nodded, her eyes ablaze with lust.\n\nI stood naked before her and held out my hand, beckoning her to her feet. \n\nI pulled her t-shirt up and off over her raised arms as her chest pumped out short breaths through her nostrils. I pulled down her shorts and she kicked them off over her sneakers. I got down on my knees and removed her shoes. I stood and spun her around and unclasped her bra. I was behind her, and we were facing a huge round mirror on the wall that showed all of us, head to toe. As I let her bra fall to the floor I ran my hands around her waist and slowly up onto her lovely tits, both of us watching the scene unfold in the mirror. She just about melted in my arms.\n\n\"Oh Steve!\" she panted, short of breath.\n\nI kissed her neck and pinched her nipples and an orgasm rippled through her body.\n\n\"Oh my god! OHHHHH!\" she cried out as she fell even limper in my arms.\n\n\"God you're sexy,\" I whispered in her ear as I nibbled on it. She whimpered, with her eyes half shut.\n\nI held her up with one arm across her chest and slid my other hand down her belly and inside her damp panties. I gently massaged the surface of her pussy, feeling the wetness while I held her body tight against mine, my heart beating hard against her back.\n\nWe were both still watching ourselves in the mirror. I crouched down just enough for my hard cock to slip between her thighs, and she gasped as she saw it emerge through her legs in the mirror.\n\n\"Oh shit!\" she said softly as I started thrusting it gently between her legs. I took my hand from her pussy and guided her hand between her legs so she could feel me thrusting there, and I went back to the gentle pussy massage.\n\nWe stayed like that, enjoying the feel of each other, until we were both close to coming. I slipped a finger inside her and rubbed her clit with my thumb and she came powerfully and loudly, her body a quivering, stuttering mass of involuntary movements, both of us still mesmerized by the scene before us in the mirror. It was all too much for me and I let out a loud moan and came in great spurts from between her legs, all over her hand and the hardwood floor. It was insanely hot.\n\nMy knees were weak and it was all I could do to maneuver us to the bed where we collapsed, Julia nearly hyperventilating. I cradled her in my arms until she got her equilibrium back.\n\n\"What are you doing to me Steve!\" she whispered, and she kissed me lustily. We closed our eyes and rested in each others arms, and dozed off in the late afternoon heat.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nAfter a half-hour or so I opened my eyes and Julia was looking at me with a cute little smile.\n\n\"So do you ravage all your female clients?\" she asked.\n\n\"Only the special ones,\" I said.\n\nShe pinched my nipple and gave me a little unhappy grunt. \"Well, I guess I can share.\"\n\nI tossed her on her back roughly, pulled off her wet panties, and went to work kissing every inch of her. She love every second of it. Her skin was salty with sweat from our days work. I kissed a scar on her belly and she noticed me looking at it.",
        "\"I had a hysterectomy a few years ago. Long story,\" she said.\n\n\"Everything okay now?\" I said. She nodded and I kissed it again. \n\n\"So no birth control needed, that's a nice side benefit\" I said.\n\n\"Don't even think of putting a condom on that thing. I want to feel every molecule of you,\" she said.\n\nShe took off her glasses and put them on the bed side table, and now she was well and truly naked before me for the first time. Apart from her mousy hair she looked incredible, so completely different from when I had first met her, when she was nervous and covered up in frumpy loose clothes. This was the real Julia, naked and beautiful and smiling, and it was a wonderful sight to see.\n\nShe writhed and moaned at my every touch, and I knew she wouldn't last long when my mouth reached her wet pussy. She was flying high and would have cum in a flash if I had let her, but I didn't want to exhaust the poor girl with yet another orgasm before the main event, so I quickly slopped up her pussy with saliva and pussy juice and I positioned myself at her entrance with her legs up on my shoulders. She was tight but relaxed and very ready, and I slid into her. \n\nIt took all of about five seconds for her to have a massive orgasm again. Her vaginal muscles contracted powerfully and her body arched up sharply, like she had been hit with a jolt of electricity. It happened with each thrust of my cock, her eyes and mouth wide open, quick little gasps of air shooting in and out of her lungs.\n\nShe came down from her heady heights and was limp again.\n\n\"Wow!\" I said. \"Do you know how many women would kill to be able to cum as quick and easy as you do? You are somethin' else girl. This is gonna be fun.\"\n\nShe smiled through her dazed fog. I was still rock hard and deep inside her.\n\n\"I can't believe . . . what you feel like!\" she said between short breaths.\n\nI lowered her legs and assumed missionary position and started a super slow fucking. She wrapped her arms and legs around me and squeezed me tight, moaning deeply.\n\n\"Oh my God Steve! Shit!\" she said, her voice getting louder and more insistent as I slowly picked up the pace.\n\nShe held on longer this time and I got us up to a rollicking good fuck, just on the polite side of a pummeling.\n\n\"God you feel good!\" I managed to huff out between moans.\n\nThis time we fucked to a bed rattling orgasm, and she was just about hysterical when she reached the heights, laugh-crying like a wild hyena in heat as her convulsing body tried to buck me off. I came with a loud roar and pumped my seed into her.\n\n\"Holy shit girl!\" was all I could manage to say. Julia couldn't say a word.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nJulia was horrified when she realized my back was still raw and bleeding a little, and she hadn't taken care of me properly. We took a very sensual bath together, and she dried me carefully and dabbed on some antiseptic. We sat out on the porch, ate take-out from a nice little restaurant around the corner, and talked quietly into the evening, mostly about sex and her long celibacy.\n\n\"You probably noticed there was no 'de-flowering' today,\" she said at one point. \"I've used a toy over the years. It's small though, not as big as . . .\" Her voice trailed off and she blushed as she looked at my crotch, her eyes x-raying through the fabric of my shorts. \"I haven't used it in years though. About ten years ago I went into full celibacy mode and just gave up on everything.\" She sounded very disappointed with herself.\n\n\"So you don't ever sneak a little look at some porn on the internet?\" I asked.\n\n\"You know, I've come across it occasionally, and they just looked like some alien species to me, totally foreign. It's weird how my brain disconnected from it all.\" She paused and added, \"I guess I've got a lot to learn.\"\n\nThe look on her face as she said it made me want to rip her clothes off right there, but we were both pretty exhausted after the long and fulfilling day.\n\n\"I'm gonna get my hair cut,\" she said out of the blue, with a big smile. \"I've been wanting to for a while but I was . . . stuck, I guess. I trim the ends a little, but other than that no one's touched it since I was a teenager.\"\n\n\"Julia that's great!\" I said. \"You're gonna look like a whole new woman.\"\n\n\"I already feel like one, thanks to you,\" she said. \"And I guess I'll be spending some money on my wardrobe. I've certainly neglected that over the years.\"\n\n\"You know, I didn't want to say anything, but that look you had on when I first met you was . . . well . . . let's just say it wasn't ready for the Paris runways,\" I said, and we both laughed.\n\n\"My neighbor will be thrilled,\" Julia said. \"She's an artist and very cool. She's been trying to get me to go shopping with her since I moved here. And my haircut will blow her mind. I can't wait to surprise her with it.\"\n\n\"Well Sunshine,\" I said, \"it's been a big day and I think we both need a good nights sleep. Tomorrow's gonna be big too.\" I gave her a sly smile and a wink.\n\n\"Oh my,\" she said, her eyes sparkling and her breath noticeably quickening. \"A girl could get used to this.\"\n\nWe cleaned up the kitchen a little and I drove off into the warm night.\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nI pulled up in front of Julia's house the next morning with a truck load of insulation. It was another unusually warm sunny morning, and Julia was outside talking to her neighbor by the rose hedge that separated them. I waved, said, \"good morning,\" and started carrying rolls of insulation into the house. It was pretty obvious the two of them were talking about me\u2014they were giggling quietly and the neighbor woman was looking me over pretty thoroughly. After a while she went into her house and Julia joined me to help unload.\n\nShe leaned against the truck and shook her head in amazement.\n\n\"Well that's a totally new emotion for me,\" she said. \"An attractive woman is actually jealous of me! That's something I've never experienced before.\" She looked happy and confused at the same time. \"Oh, and she thinks you're hot in case you didn't notice,\" she laughed.\n\n\"And wait'll you hear the best part,\" she continued. \"When she saw me on the porch waiting for you she came out and wanted to know if everything was all right over here. She heard me . . . you know . . . screaming and stuff yesterday, and it's so out of character for me she thought maybe you were raping me or something. Isn't that incredible?\" she said, the thought of it obviously making her very happy. Her eyes twinkled and she shook her head at the wonder of it all as she helped me unload.\n\nJulia had some errands to run so I got started on the work alone. Before she left she came bounding in and said she had lucked-out and there was a cancellation at the hair salon down around the corner, and they could take her in half an hour. She left with great excitement, and said she would be back sometime after lunch.\n\nI filled my truck with the previous day's debris, and got the exterior walls insulated before lunch. I had a feeling Julia and I would be tumbling into bed as soon as I saw her, so I left her a note, went to the dump to empty my truck, and made a quick stop home for a shower. I raced back and Julia was sitting on the porch.\n\n\"Holy shit!\" I said, stopping dead in my tracks halfway up the steps. There was a completely new woman sitting there, with a huge glowing smile, a hint of makeup, and the sexiest haircut I'd ever seen.\n\n\"I think the guy that cut it is some kind of a genius or something,\" she said, obviously pleased with what he had done.\n\n\"Julia!\" I said as I walked over and sat next to her. \"I'm speechless . . .\"\n\nHer hair was lighter, and quite short, with soft curls and glowing highlights. It looked elegant and 'fuck me now' sexy at the same time, and it suited her perfectly.\n\n\"It was pretty exciting,\" she said. \"When I got there I explained the situation to one of the girls, she went and talked to the guy who owns the salon, and he said he wanted to do it himself. I had to wait until he finished someone else, but the girl said it would be worth the wait. Everybody in the place was watching because it was such a transformation. I felt like the belle of the ball.\"\n\nThe emotions of such a big change caught up with her and her eyes welled up with tears.\n\n\"Do you really like it Steve?\" she asked.\n\n\"It's incredible Julia,\" I said. \"And I think you're incredible for doing it. It was a big step. You've taken two huge steps in two days. I'm proud of you.\"\n\nI kissed her and ran my fingers through her soft new curls, and she nearly had an orgasm from that alone.\n\n\"Wow,\" I said as she tremble at my touch. \"I think we need to get inside, unless you want to give your neighbor a show. That might be fun come to think of it.\"\n\n\"I don't know if I'm ready for that yet,\" Julia said, punching my arm playfully. She took my hand and led me into the house and down the hall. There was a wonderfully natural and unforced wiggle in her walk that I hadn't noticed before.\n\nWe entered her bedroom and she sat us both down on the edge of her bed, looking deadly serious.\n\n\"I did a lot of thinking last night about what you said . . . about your other women,\" she paused for a moment and then continued. \"I'm not happy about sharing you, but I guess I just want to know one thing. Are you gonna be in my life for a while, or are you gonna be gone when you're done with the living room?\"\n\n\"I'll be in your life as long as you want me,\" I said, looking deep into her eyes.\n\nHer serious look melted and I wiped a small tear from her cheek. I kissed her and we fell back on the bed and our eager hands groped each other. She took off her glasses and the combination of her eye makeup and her sexy hair was overwhelming.\n\n\"God you look hot!\" I said, as I just about ripped off her clothes.\n\nI stripped in a flash and my rock hard shaft plunged into her a mere moment later, me standing, and her lying on her back with her legs on my shoulders. We went at it more forcefully this time, the 'take it easy, she's a virgin' stage well behind us. Julia was quite vocal again, and the bed was banging against the wall. I wondered if her neighbor was listening and the thought of it made the whole scene even hotter, and we both came powerfully and loudly.\n\n\"Oh my God!\" Julia exclaimed afterward. \"Is it always going to be like that? This is just unbelievable to me.\" She was nearly breathless.\n\nI lay down and spooned her, and we rested a while.\n\n\"You know your window's wide open,\" I said quietly in her ear as I looked through the sheer curtain. The house next door was only about ten feet away.\n\n\"I know . . . it's hot out,\" she said, with a mischievous grin.\n\n\"Ooo! You little show off! I like this side of you,\" I said.\n\nHer breath quickened, and she pushed me over on my back. She sat up and looked at my mostly soft, sticky cock. She didn't touch me or say anything for a long moment.\n\n\"You know you're gonna to have to teach me everything. I wanna know everything,\" she said, still staring at it.\n\nHer words triggered my primal instincts, and my cock grew before her eyes. There was no touching involved, just her watching it grow, and me watching her watch it.\n\n\"God, it's like magic,\" she said softly, her eyes burning with lust.\n\nIt was throbbing up and down gently and she took it in her small hand. She bent down, as if in slow-motion, and kissed the side of it. I moaned softly and she looked at me, as if looking for direction.\n\n\"That's nice,\" I said approvingly. \"Use your tongue on it.\"\n\nShe licked the side of it, and then she examined the bulbous tip and she licked that. A bolt of electricity went through me, and she looked pleased. I was rock hard at that point, and she put the whole tip in her mouth and swirled her tongue on it.\n\n\"Oh yeah! That feels nice...\" I said\n\nWithin just a few short minutes her lusty instincts had overwhelmed her and she was sucking on it and stroking it with her hand with great enthusiasm. Her sexual hunger was palpable and her mouth was dripping with saliva. My cock was a beautiful sloppy mess and finally I could take no more.\n\n\"I'm gonna cum baby!\" I said, and she pumped me with her wet hand, watching in fascination as my seed flew through the air.\n\n\"That felt nice baby,\" I said breathlessly as I beckoned her to lay next to me. She laid her head on my chest.\n\n\"I'm sure that's not how other girls do it. I mean, I have no clue . . .\" she said.\n\n\"For your first time I'd say it was pretty fantastic,\" I said. \"Everybody does it differently, there's no right or wrong really. There are certain skills, though, that you can learn gradually, if you want to. There's no rules though, what you did was wonderful. Genuine enthusiasm is the most important thing. A guy likes to think the woman is actually enjoying doing it. You've already got that part down.\"\n\n\"So, what are the 'skills'?\" she asked, sounding genuinely interested.\n\n\"Well, I guess the main one is taking a man deeper into your mouth,\" I said. \"That just takes practice. And also you can let a man finish in your mouth. Some women really enjoy the taste of it, and others don't like it. That's up to you.\"\n\n\"I bet I know which kind of woman men like better,\" she said with a sly grin. Her eyes danced back and for between mine while her mind worked. \"Now you've got me curious,\" she said, and she slithered her body down, put her tongue on a blob of sticky cum on my belly and licked it up.\n\n\"God I feel so dirty,\" she said, her eyes burning and her nostrils flaring as she tasted my sticky semen.\n\nShe looked so powerfully sexy I couldn't lay there passively. I threw her down on her back and sucked in a hard nipple, pinching the other gently with my hand. My other hand slid up her inner thigh to her pussy and she arched her back and came again, with beautiful tremors rippling through her belly.\n\n\"Jesus Julia!\" I said, \"I think you're the sexiest creature I've ever had my hands on.\"\n\nI kissed my way to her wet pussy and gave her everything I had. Shrieking with delight, she came twice more on my tongue. After three beautiful orgasms in a row I reluctantly backed off and let her rest, and we lay in each others arms for a while.\n\n\"So how can I learn those . . . mouth skills you were telling me about,\" she said.\n\nI laughed. \"You mean cock sucking?\"\n\nShe blushed and nodded.\n\n\"I can see we're gonna have to work on your language skills too,\" I said, laughing. \"I'll tell you what, I'll see if I can find a video on the internet. I know there's some out there. It's called fellatio, or cock sucking, or a blowjob. It's all the same thing.\"\n\n\"As for language,\" I said, looking at her lovely reclining body, \"these are your tits.\" I caressed them gently. \"And these are your nipples.\" I gave them a pinch. I slid both hands down her belly to her inner thighs and slowly spread her legs. \"And this is your pussy,\" I said. She moaned as I touched it. I repositioned myself and ran my tongue up between the lips to her puffy pink clit, making her shudder. \"That, my sweet sexy girl, is your clit.\" I sucked on it gently and she writhed with pleasure. \"And this,\" I said, raising her legs, \"is your asshole.\" I stuck my tongue into it and she shrieked. \"Tell me what it is,\" I said in a breathy voice.\n\n\"My asshole,\" she said softly, breathing hard and fast. I re-traced my path and had her tell me what all of her sexy parts are called.\n\n\"Now, if you want to, tell me to do something with each one of those things,\" I said. Her chest heaved even faster.\n\n\"Touch my tits,\" she said quietly.\n\n\"Like this?\" I said, barely brushing my hand against them.\n\n\"No. Harder. Squeeze them . . . squeeze my tits with your big hands,\" she said louder, with her eyes closed. She moaned as I followed her instructions.\n\n\"Put your mouth on my . . . my nipples. Suck on my nipples.\"\n\n\"I love your hard nipples,\" I said, as I slurped them in and nibbled on them gently. \"Do you like it when I bite them?\"\n\nShe moaned, \"Oh, I love it when you bite them. Bite my hard nipples . . .\"\n\nShe was getting louder with each request, and if the neighbor was listening she was certainly hearing a sexy show.\n\n\"What else would you like Sunshine?\" I asked.\n\n\"Kiss the sides of my tit's . . . Yeah, like that! Oh yeah, pinch my nipples . . . kiss all the way down my side . . . to my . . . my pussy,\" she said breathlessly. \"Lick it . . .lick my pussy like you did . . . like you did before.\"\n\nI ran my tongue through her lips and across her clit.\n\n\"Oh god!\" she cried, her back arching high.\n\n\"What am I licking?\" I asked.\n\n\"My clit! You're licking my clit!\" she said loudly.\n\n\"Anything else you'd like me to lick?\" I asked.\n\n\"Yes . . . my . . . my ass . . . my asshole . . . lick my asshole!\" she almost yelled.\n\nI stuck my tongue in it while I rubbed my thumb across her clit and she came explosively\n\n\"OH FUCK!\" she screamed.\n\nI gently kissed her belly with her tits in my hands and she gradually came back to earth, goosebumps covering her body.\n\nI got up on my knees, straddling her chest, and sat lightly on her belly, my hard cock resting between her tits.\n\n\"This is my cock,\" I said, placing one of her hands on it. \"Do you like it?\"\n\n\"I love it,\" she said, her breath quickening again.\n\n\"And these are my balls,\" I said, raising up unto my knees. \"Tell me what you like about me.\"\n\nShe had both hands on me as she fondled a man's balls for the first time. I groaned loudly at the feeling.\n\n\"They're so soft . . . your balls. And your . . . your cock is . . . beautiful. It's so long . . . and there's so much heat in it . . . so much heat . . .\"\n\nShe lifted her head, pulled my hips forward, and sucked me into her mouth.\n\n\"Your mouth feels so good on my cock Julia,\" I said loudly. \"Suck on my big cock . . .\"\n\nJust then I heard a woman moaning through the window. It was faint, but it was the unmistakable sound of a woman in the throws of passion. Was she alone, I wondered? It sounded like she was.\n\n\"Oh God Julia! Suck on my Cock! Suck on my Cock!\" After a few glorious moments I knew I was close. \"I want to cum in your pussy baby! I want to fuck you! I want to fuck you from behind baby!\" I said breathlessly as I pumped in and out of her hot mouth.\n\nI forcefully flipped her over onto her stomach, raised her ass in the air, and started to work my way into her tight pussy. With just a few thrusts I was balls deep and we were like two animals in heat, the bed banging against the wall again, both of us howling as we came. It was intense and beautiful. I had hold of her hips and I held her limp body up and continued fucking her slowly as we came down from our heady heights.\n\n\"Do you feel me Julia?\" I said breathlessly. \n\n\"Yes,\" she whimpered between breaths, \"I feel . . . your cock . . . inside me . . . I feel . . . you fucking me.\"\n\nI heard another soft moan from the neighbor.\n\n\"Do you want me to stop baby?\" I asked.\n\n\"No . . . never stop . . . never stop fucking me . . .\"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nJulia threw together a quick light supper, and we sat at her kitchen table and talked for a while. I told her about hearing her neighbor while we were making love. I thought maybe it would surprise or shock her, but it didn't. I could tell she was exited by it but didn't feel comfortable admitting it yet. \n\nThe neighbor's name was Carol. She was about the same age as Julia, and an artist, which explained why she was home most of the time. Julia said she had a relationship with a guy down the street recently, but it didn't work out. When Julia first moved into her house they struck up a casual friendship and Carol had tried to get Julia to go clothes shopping and even tried to get her to a hair salon for a 'makeover', but at the time Julia thought it was silly and pointless.\n\n\"I can't wait to show her my hair tomorrow,\" Julia said. \"She's gonna freak out!\"",
        "\"When she gets a load of how hot you look she's gonna want a piece of you herself,\" I said with a wink.\n\n\"No, Carol likes guys,\" she said.\n\n\"She might like girls too, it's more common than you might think,\" I said.\n\nJulia looked fascinated. She was like a sponge, soaking up any sexual knowledge she could get, and she clearly thought this was a juicy subject. So, with a little trepidation, I told her a little about Penny and Mary and Chrissy. I didn't go into too many details, but she definitely got the idea that they were comfortable sharing not only me but each other. I didn't tell her about the other girls yet, or the wild orgies at Penny's place. I didn't want to scare the poor girl with too much knowledge too soon.\n\nAfter I had thoroughly blown her mind talking about bisexuality, I made my way home to get some rest. I fired up my old computer and googled 'Blow Job How To', and sent Julia some links to some good instruction. Just before I turned in for the night I had a reply:\n\nTHANKS FOR THE LINKS. ALREADY PRACTICING. :-)\n\nJulia may have missed twenty-five years of sexual activity, but she was eager to catch up."
    ],
    "authorname": "riverboy",
    "tags": [
        "exhibitionist",
        "female virgin",
        "blowjob",
        "pussy eating",
        "shy",
        "voyeur"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/a-handymans-memoir-ch-14"
}
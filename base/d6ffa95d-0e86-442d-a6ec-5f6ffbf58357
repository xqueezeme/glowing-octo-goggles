{
    "title": "Willow's Way Ch. 02",
    "pages": [
        "Summary: In this continuation of my sexual parody of Buffy the Vampire, Faith can't get enough of Willow fucking her ass.\n\nNote: This is dedicated to MLT17 for requesting this series.\n\nNote 2: Thanks to Tex Beethoven and Robert for editing this series.\n\nIn Chapter 1, Faith tries to seduce and ass fuck Willow, who surprises the aggressive slayer by turning the tables\n\nWillow's Way Ch. 2\n\nContinuing immediately after part 1 ends....\n\n.....\n\nAs required, Faith returned to her new Mistress with a larger strap-on, she'd decided on fetching her medium-sized one; she wasn't sure she could take her biggest one in her ass... as she shook her head in dismay at her abject obedience to a lowly nerd like Willow.\n\n\"Strap the strap-on on me for me, my ass slut,\" Willow ordered, still feeling a rush of adrenaline from successfully dominating the normally dominant Faith and making her into her bitch, instead of the other way around, which had been Faith's original plan. She'd read many stories similar to what she'd accomplished tonight, and she'd fantasized doing this a plethora of times, so actually doing it was a rush times a billion!\n\n\"You're really getting off on this, aren't you?\" Faith asked her, obeying the nerd, even though she really thought she should reorganize this topsy turvy hierarchy, yet she all she could think about was getting that cock back in her ass.\n\n\"Just as much as you are,\" Willow said, watching the slayer, who was obeying her order apparently willingly (though Willow knew better), by fastening the larger strap-on harness around her waist.\n\n\"This is just a one-night thing,\" Faith insisted, allowing her lust to give the nerd the win and the power tonight, but planning to revert things to the way they were before, the rightful way, just as soon as possible... hopefully early tomorrow.\n\n\"Sure, sure,\" Willow agreed sarcastically, since for her part, she was already plotting all the places she was going to fuck Faith, beginning tomorrow. No way this revised hierarchy was going to be for just tonight... she saw right through Faith's fa\u00e7ade of obeying her only reluctantly, and knew she could break her again and again, until she was her obedient ass slut and pussy pleaser through and through, without any pretense of her being otherwise.\n\n\"I'm serious,\" Faith said, finishing putting the strap-on on. \"No one can know about this.\"\n\n\"Okay, that I can give you, at least for now. Because who would believe it?\" Willow asked, wondering if anyone could possibly believe this... even she was still a little surprised by how well this had gone. None of her high school peers who saw her as no more than a nerd or a wallflower, would ever credit her with being a dominant seductress. And lording over the indomitable Faith? She was the one who lorded it over everyone else, except perhaps for Buffy herself.\n\n\"True,\" Faith agreed. No one would believe this meek nerd could overpower and dominate her. And yet she had!\n\n\"Now climb onto the bed on all fours, my ass slut,\" Willow ordered, loving her dominant awakening.\n\n\"You're really on a power trip,\" Faith said, secretly impressed by Willow's sudden psychological makeover, as she climbed onto her own bed and assumed the position ordered. Before tonight she was never one for taking orders.... not even from her Watcher.\n\n\"Since you mention it, yes; like yours, I'm undergoing my own sexual awakening,\" Willow shrugged, as she stroked her plastic cock, wondering if there were spells she could come up with to make it vibrate, or to make it bigger, or... or... even to make it real. What a rush it would be to give the normally arrogant Faith a facial, or an anal cream pie!\n\n\"Come and slam it in my ass.\" Faith said, wanting to keep this situation nasty, and only about fucking.\n\n\"You love me fucking your asshole, don't you?\" Willow said, loving to say asshole, and loving the hungry lust in Faith's eyes.\n\n\"Just shove it back in,\" Faith said, even though she wondered if this larger girth would hurt. In normal situations she couldn't care less if she caused her plaything any pain... it was all about her dominance, and her getting off. But now she was the plaything. Still, her desire to get ass fucked again and feel that all-consuming pleasure overrode any new pain.\n\nWillow climbed onto the bed and spread Faith's compliant ass cheeks. \"This asshole was just made to have a big cock slamming into it.\"\n\n\"Then do it,\" Faith said, getting a little frustrated at the nerd's endless talking instead of fucking.\n\n\"We need to gape this asshole first,\" Willow said considerately (totally unlike Faith), and she slid two fingers inside the inviting orifice, which was already slightly gaped from her earlier plugging with a smaller dildo.\n\n\"Oh, you nasty bitch,\" Faith moaned, as two fingers wiggled inside her, creating a new and different sensation, and just the slightest burn.\n\n\"You're the bitch... my bitch... with two fingers deep in your asshole,\" Willow pointed out, as she moved them around, stretching out the anal cavity.\n\n\"I've never fingered an asshole,\" Faith said, instantly wondering why she never had.\n\n\"Got to gape this shit hole to get this big cock deep inside of it,\" Willow said, having read a lot about gaping, watched some porn about gaping, but finding that doing it was fascinating... the human body was an enigma... that a hole meant for one purpose could also be used for something so entirely different.\n\n\"My asshole is ready already, just slide it in,\" Faith urged impatiently, the fingers feeling good, but she was dying to be fucked... hard.\n\nWillow pulled her fingers out, and admired her handiwork: the gaping asshole.\n\n\"Are you going to fuck my ass or what?\" Faith asked, getting more and more frustrated that she didn't have that dick in her ass yet. The sensations of Willow fucking her had been unlike anything she'd ever experienced before, and she wanted to feel it again... now!\n\nAt long last, Willow wrapped her hands around Faith's waist, and slid the cock inside her ass with ease.\n\n\"About fucking time,\" Faith moaned, attempting to retain some sort of control, as the pleasure/pain principle coursed through her, her ass was opened wider than ever before, and the cock reached depths inside her that had never been reached before.\n\n\"Only a real ass slut can take this big dick so easily,\" Willow pointed out, as the cock disappeared completely between her ass cheeks.\n\n\"Whatever! Just fuck me,\" she moaned.\n\n\"And you wanted to fuck me,\" Willow scoffed, as she bucked her hips three times, reaching new depths of depravity inside Faith's asshole. \"Doesn't this... way... around feel so much better?\" then giving her another three.\n\n\"You fucking bitch!!\" Faith screamed, as pleasure and pain again cascaded through her while the dick plunged deeper inside her.\n\n\"Takes one to know one,\" Willow countered, really getting off on the domination and utter power she was exerting over Faith... this experience was way more all-consuming than any spell she'd ever created.\n\n\"Just fuck me,\" Faith begged, losing it, needing that pure pleasure to consume her again, and knowing her pain would dissipate with more fucking.\n\n\"So were you exclusively an ass virgin taker before I took charge and reamed your asshole?\" Willow asked, the question suddenly popping into her head. Faith had clearly been the dominant in her previous encounters, based on her constant locker-room-like bragging, and the aggressive approach she'd begun with during this wild night.\n\n\"Yes,\" Faith admitted with a moan, not realizing what she'd just said, as Willow really fucked her good. She was way better than any man she'd ever allowed access to her pussy.\n\n\"So I took your anal cherry tonight,\" Willow concluded, a massive smile crossing her face.\n\n\"Yeah, you're the one who took my anal virginity,\" Faith admitted, only now realizing she'd just given Willow more power over her, especially since she knew first hand the ultimate rush that came from taking a virgin, regardless of the hole or gender.\n\n\"Cool,\" Willow said, in the nerdy, bookish, fascinated way she said things, that made her sound as nerdy as she sometimes looked.\n\nWanting to take the nerd down a notch, but still continue getting her asshole reamed, she clarified, \"But I've taken much larger dicks in my cunt.\"\n\n\"How large?\" Willow asked, already knowing she'd be researching spells that could perhaps enhance her cock in size, or hopefully even to make it real. But only temporarily. She certainly didn't want to transform herself into a permanent shemale!\n\n\"Fourteen inches,\" Faith bragged, recalling the massive demon cock that had filled her. She couldn't resist taking it for a ride once she'd seen it.\n\n\"No way,\" Willow said. \"No guy is that big.\"\n\n\"I didn't say it was a guy,\" the slayer smiled, looking back over her shoulder at the nerd who was processing this information.\n\n\"A toy?\"\n\n\"Nope.\"\n\n\"Surely not a demon,\" Willow scoffed, deducing that would have to be the only remaining realistic (although realistic likely wasn't the right word... eww!) option.\n\n\"A very well hung one with a fat cock,\" Faith said, loving to shock the nerd, feeling like she was getting a little bit of her power back from her... even if it was only by showing her how big of a whore she could be. \"He tore my cunt completely apart, so don't worry about hurting me. I have amazing recuperative powers, even for my fuck holes.\"\n\nWillow fucked the bitch hard. Indexing how many inches an asshole could take. A human colon was around five feet long, and three inches in diameter (although it got pretty twisty up there), so it could probably handle lots more dick meat than a pussy could.\n\n\"Oh yes, Willow, drill my asshole,\" Faith demanded, her pain nothing but a distant memory, and the euphoria once again building inside her.\n\n\"You're only begging me because you're my slayer slut,\" Willow reminded her, loving to make Faith admit her submissive nature .\n\n\"Yes, yes,\" Faith both sighed and moaned at the same time. She knew exactly what Willow was doing: she was claiming her territory and exercising her dominance, just like Faith had done many times when the roles had been reversed. She both hated it and loved this new turn of events, as she added in a generic, noncommittal kind of way, \"I'm your slayer slut.\"\n\nWillow didn't like Faith's tone, so she pulled out.\n\n\"Nooooo!\" Faith whined like a bitch in heat, \"shove that big cock back inside me!\"\n\n\"Holy shit, what a beautifully gaped asshole,\" Willow said, admiring her workmanship. The hole was wide open, and it looked so inviting.\n\n\"Please ream my asshole, Willow,\" Faith begged, humiliation coursing through her at being forced into the role of the begging slut, instead of the dominant more-than-human.\n\n\"I need to take a picture of this,\" Willow chortled, getting off the bed and grabbing her phone.\n\n\"No way,\" Faith objected, even though she didn't actually make a move away from her submissive position on all fours, because her ass felt so empty without Willow's cock deep inside of it.\n\n\"If you want this dick back in your ass, you'll fucking do as you're told,\" Willow snarled in a dominant tone she hadn't even known she had.\n\nFaith was shocked and turned on by Willow's sudden ruthless, dominant demeanor, although she tried to camouflage it by saying, \"Fine, so long as you don't show it to anyone.\"\n\n\"I won't, as long as you're a good lesbian slave,\" Willow made it conditional, and then ordered, \"Spread those ass cheeks, so I can get a good closeup of it.\"\n\n\"Fine,\" Faith sighed, obeying yet another humiliating order, one that could be completely ruinous to her reputation, but she added, as always trying to pretend she wasn't really obeying orders, \"but hurry up and get that cock back inside me.\"\n\n\"What a great gaped hole,\" Willow admired, ignoring her pet's pretensions, as she snapped a few photos of her amazing gaping work.\n\n\"Yeah, yeah, you really gaped my asshole good,\" Faith said impatiently, and even debased herself by spreading her ass crack really wide without being ordered to, to expedite getting her empty ass filled again. \"Now get back on the bed and pound your slut!\"\n\n\"Okay, okay,\" Willow said, deciding to press Record on her phone before setting it down, so she could get an audio of this beautiful encounter. \"You're such a needy ass slut.\"\n\n\"Yes, you turned me into one,\" Faith said, unknowingly incriminating herself even further (as if Willow needed any more evidence to coerce her with), as Willow got back behind her, and then Faith instantly regretted it... she was just giving the nerd more power, and she seemed to be getting totally drunk on her power trip.\n\n\"I turned you into a what?\" Willow asked, \"I want to hear it from your own lips,\" as she rolled her cock head around the gaped anal ring.\n\n\"Into your submissive slayer ass slut slave,\" Faith frustratedly declared, anything to get that dick back into her ass and to be dominated further by this astonishingly powerful nerd. \"Just shove that big snake up my ass, and punish me with the ass fucking I deserve.\"\n\n\"Ah, but for you, it's not a punishment,\" Willow clarified as she complied, sliding her cock back into Faith's ass.\n\n\"Oh yes, Willow, fuck my ass, fuck it hard,\" Faith begged, the pleasure that had dwindled during the brief reprieve of Willow's taking photos now resuming.\n\n\"Tell me what you are,\" Willow demanded, delightedly conscious of Faith's words being recorded.\n\n\"I'm your ass slut,\" Faith declared, with no apparent shame, only lust.\n\n\"As well as my cunt-licking bimbo pet?\" Willow added, while really drilling her slut.\n\n\"Yes, yes, I'll eat your cunt and be your bimbo sex slave anytime and anyplace,\" Faith declared, her orgasm rising quickly, and her rational mind having gone blank.\n\nWillow's phone rang.\n\n\"Don't answer that,\" Faith demanded, as she was only moments away from another anal orgasm.\n\n\"It's Giles, I have to,\" Willow refused, pulling out and taking another quick look at the well fucked, gaped asshole. \"His calling in the middle of the night can only be bad news.\"\n\n\"Fuck,\" Faith cursed, remaining on all fours, and praying it wasn't a big deal.\n\n\"Willow, the Hell-mouth has been activated,\" Giles blurted out frantically. \"We need you here ASAP.\"\n\n\"I'm on my way,\" Willow replied, immediately beginning to undo the harness.\n\n\"Do you know where Faith is? She's not answering her phone.\"\n\n\"She's with me,\" Willow said, snapping her fingers.\n\n\"Fuck,\" Faith cursed again, as she got off the bed.\n\n\"With you?\" Giles asked, surprised.\n\n\"Yeah, she was walking me home, and...\" Willow began. \"It doesn't matter, we're on our way.\"\n\n\"Hurry,\" Giles urged, and hung up.\n\n\"We need to get to the school right now,\" Willow stressed, getting dressed. \"The Hell-mouth has been activated.\"\n\n\"Can't Buffy take care of it?\" Faith sighed, as she looked around for her panties.\n\n\"No panties, slut,\" Willow said. \"I want quick access to that asshole at all times.\"\n\n\"You're insatiable,\" Faith said, impressed by the nerd, and hoping she might finish her off later.\n\n\"Hurry up,\" Willow said, as she stowed the harness in her bag. \"I'll be keeping this.\"\n\n\"Only for tonight,\" Faith said, pulling up her jeans.\n\n\"Just moments ago, you promised me 'anytime and anyplace', so I'll be the one to decide that,\" Willow refuted, and she slapped Faith's ass.\n\n\"I think I created a monster,\" Faith joked.\n\n\"I think I created a slayer ass slut,\" Willow shrugged, as she leaned in and kissed Faith.\n\nThis surprised Faith greatly. The kiss was soft and tender. Intimate. It sent confusing waves through her.\n\n\"Let's go, slut,\" Willow said, breaking the kiss and the intimacy a moment later.\n\nThey rushed out, Faith's strides a bit bow-legged from the rough anal reaming, but by the time they got to the school, Buffy and the Scooby gang had quelled the disturbance.\n\n\"You're just in time not to help,\" Zander quipped, sweating from an intense battle.\n\n\"Sorry, we got here as soon as we could,\" Willow replied.\n\n\"What were you two doing together?\" Zander asked, a little worried that Faith might have told Willow about their sexual encounter earlier in the day.\n\n\"Just getting to know each other better,\" Willow answered with a sly smile at how true that answer actually was.\n\nFaith added, \"Yes, Willow has more to her than meets the eye.\"\n\nBuffy couldn't place it, but there was something odd about those two at the moment. She said, \"Well, in any case, we're happy you're both here. We're all hands on deck tonight. Those pesky blue demons are still out to end the world.\"\n\n\"I'm looking forward to kicking some demon ass,\" Faith blustered, trying to regain her usual mojo.\n\n\"I'm looking forward to doing some ass pounding too,\" Willow added, completely out of character.\n\n\"Ass pounding?\" Zander asked, giving her a perplexed look. \"That's an odd way of putting it.\"\n\nWillow, deciding to explore her newfound power, countered, \"What? I can't want to pound some ass?\"\n\n\"Okay, but pound?\" Zander asked again.\n\n\"Pound, kick, whatever,\" Willow said, giving Faith a sly, possessive look.\n\n\"Pound sounds like the perfect word to me,\" Faith added, feeling the need to side with her new Mistress, if only to avoid pissing her off.\n\n\"You two are acting weird,\" Zander pointed out.\n\nBuffy sensed it too. She took Willow aside and asked quietly, \"Are you okay?\"\n\n\"Um, yeah, never better,\" Willow said, not lying; she'd never felt such adrenaline.\n\n\"You're actually glowing,\" Buffy reported.\n\n\"Am I?\" Willow asked.\n\n\"Yeah, did you and Oz, um... you know?\"\n\n\"What? No,\" Willow replied. \"Why?\"\n\n\"Oh, you just seem like you're in an afterglow,\" Buffy smiled, remembering how she'd been walking on water after Angel had made love to her... before the whole devil consequences had followed later.\n\n\"It's been a wild night,\" Willow said, kind of wanting to tell her what had happened... kind of wanting to confide in her during this newfound rush.\n\n\"It's only begun,\" Buffy said apropos of their duty, wanting to dip deeper, but knowing they needed to start taking some proactive steps against the next demon attack. \"We'll talk later, we need to do patrols.\"\n\n\"Let's go in pairs,\" Giles said.\n\n\"I'll go with Willow,\" Faith offered, hoping maybe they could find a secluded place to resume the fucking they hadn't completed.\n\n\"Okay,\" Buffy said. \"Zander, come with me.\"\n\nFaith and Willow left for their patrol, and Faith immediately urged, even though her ass was still a little sore from the pounding she'd taken, \"Let's find a place to fuck.\"\n\n\"You can't get enough of my cock, can you, pet?\" Willow asked, loving the power she now had over this beautiful and confident woman... which was building some pretty fabulous confidence in herself.\n\n\"We didn't finish what we started,\" Faith complained, \"so I still need to come,\" hoping not to sound pathetic, but wanting a dick back in her asshole at any cost.\n\n\"We need to remain alert during our patrol, not distracted,\" Willow refused her, not at all unwilling to fuck 'her' slayer again and soon, but not wishing to get caught doing it, and also wanting to make damn sure they did their job effectively, since yet another demon attack was a very real possibility.\n\n\"Whatever,\" Faith sighed. Yes, her ass hurt a bit, but she was a glutton for punishment, and the pleasure consumed the pain pretty quickly anyway... in truth, her ass hurt more right now without a cock deep in her rectum.\n\nWillow saw the disappointment in her new pet's expression, even though she was trying to hide it. Truth was, she couldn't help being drawn to Faith's asshole either, especially that gaping hole she'd left behind after she'd really drilled that asshole. She wanted to resume pounding Faith just as desperately as Faith clearly wanted to resume getting her ass reamed, but she was nervous about getting caught. Yes, she loved the rush and power of dominating a bitch like Faith, but she didn't want the others to look at her differently. Unlike Faith, she didn't want to dominate everyone around, she just wanted to dominate Faith.",
        "\"If we had a safe place to do it, I'd pound your ass so fucking hard you wouldn't be able to walk for a week,\" Willow said, loving the chance to talk so nasty... imagining she was a true dominant Mistress like in the stories she often read online.\n\nFaith grabbed her hand and pulled her into the library, which was now deserted once the others had started their patrols. Faith led her to an aisle between two rows of books that no one ever read, and began pulling down her jeans.\n\n\"Right here?\" Willow asked, excited yet trepidatious.\n\n\"Just strap it on and slam it into me,\" Faith said. \"I imagine I'm still so fucking gaped wide open, it'll slide in with ease.\"\n\n\"But some of the others could come back,\" Willow said indecisively, as Faith bent over and blatantly offered up her asshole, spreading her cheeks wide.\n\n\"Please hurry up, I need Willow Rosenberg's dick in my asshole right now,\" Faith begged.\n\nWillow was surprised Faith even knew her last name, and as she admired the still gaped, albeit now slightly smaller asshole, her lust began to consume her, and her dominant side took control. \"Fine, you dirty ass slut. You want to get ass fucked like a bitch in heat? I'll ass fuck you.\"\n\nWillow pulled the strap-on out of her bag, quickly put it on, placed her hands on Faith's hips, and slammed the cock roughly into her pet.\n\n\"Oh yes, you nasty butt fucker,\" Faith moaned. \"Butt fuck me, butt fuck me hard.\"\n\n\"Only a real ass slut would bend over in a public building and take it in the ass so easily,\" Willow said, pounding the backdoor as fast as she could.\n\n\"Oh fuck, harder bitch, fuck my ass harder,\" Faith moaned, the pleasure instantly building inside her, as her asshole was invaded.\n\n\"Take it all, slut,\" Willow groaned, a fresh rush of adrenaline taking control and consuming her, as she watched her cock slide in and out of Faith's amazingly gorgeous ass.\n\n\"Oh yes, please don't stop, you dominant nerd,\" Faith demanded, the pleasure cocooning her within sensations of intense fire.\n\n\"Not till you come like the cheap bimbo ass slut you are,\" Willow agreed, really reaming that asshole.\n\n\"Oh, God, fuck,\" Faith moaned, as an orgasm built inside her.\n\n\"Did Zander fuck you like this?\" Willow asked, allowing a little anger to fuel the fire of this anal destruction.\n\n\"What?\" Faith moaned, surprised by Willow's words.\n\n\"I saw you riding him this afternoon,\" Willow said.\n\n\"Oh? Did that make you jealous?\" Faith asked, knowing Willow had a crush on Zander... it was obvious, even though she'd been dating Oz. This knowledge could be her way to perhaps get some power back in this one-sided relationship.\n\n\"What it did was make me think you're a whore,\" Willow answered, really bucking her hips into the bitch.\n\n\"Then teach your whore a lesson,\" Faith suggested hopefully, as she braced her hands against the bookshelves on either side of them to balance herself, and the nerd really gave it to her.\n\n\"It's quiet out there, way too quiet,\" Zander said, entering the library.\n\nWillow covered Faith's mouth and froze, with her cock deep inside of her.\n\n\"Yes, it must be the calm before the storm,\" Buffy replied.\n\nFaith was frustrated as yet again, just as her orgasm was imminent, someone had put a halt to it. She was silent, but she thrust her hips back in a plea for Willow to resume fucking her.\n\nWillow squeezed Faith to hold her still, and quietly shushed her.\n\n\"And didn't you think Willow was acting oddly?\"\n\n\"A little,\" Buffy agreed. \"It was odd that Faith and Willow were hanging out together at all. Is that something they do sometimes?\"\n\n\"Never,\" Zander said, as he unknowingly approached the two conjoined girls.\n\nWillow, thinking quickly, pulled some powder out of her bag, scattered it on the floor around the two of them, and whispered an incantation. She then whispered in Faith's ear from only an inch away, \"Be perfectly silent. He can't see us now, but he'll still be able to hear any noise we make.\"\n\n\"It would be wonderful if the two of them started getting along,\" Buffy wished, as Zander drifted closer.\n\n\"Not a sound,\" Willow cautioned almost perfectly soundlessly, as she slid the cock back inside her slut's asshole, the spell she'd just cast pretty narrow in diameter, since it had been so rushed.\n\n\"Ooooh,\" Faith moaned involuntarily.\n\nBuffy said, \"Let's get back out there. I've gotten what I needed.\"\n\n\"Okay,\" Zander said, halting his advance just a dozen feet away from where Willow had her cock buried deep inside Faith's asshole. \"We should find Willow and check on her, make sure Faith isn't manipulating her in some way.\"\n\nZander left, Buffy left, and Willow gasped out a sigh. \"That was way too close.\"\n\n\"Yeah, but it's safe now. Fuck me,\" Faith demanded.\n\n\"We mustn't,\" Willow refused, pulling out. \"They're out there looking for us.\"\n\n\"I don't care,\" Faith said.\n\n\"Be a good bitch for me, and we'll continue this later,\" Willow promised, giving Faith's ass a resounding slap!\n\n\"Fine,\" Faith agreed tersely, \"but our friends are really beginning to piss me off.\"\n\n\"They're trying to save the world,\" Willow pointed out, trying to find a discreet way to keep wearing the strap-on under her skirt. This was the one time jeans would have been helpful. She pushed it up under her sweater and asked, \"Can you tell it's there?\"\n\nFaith looked as she reluctantly pulled up her jeans, her ass feeling so empty, her pussy so wet, \"A little.\"\n\nWillow did a similar incantation to before, this one just for an object, and asked, \"Now?\"\n\n\"Nope, you're good.\"\n\n\"Good,\" Willow said, \"because I'm tapping that ass later on. For my own pleasure as much as yours.\"\n\n\"You'd better do more than tap it,\" Faith said, moving close to her.\n\n\"I'll tear it in two for you,\" Willow smirked, before leaning forward and kissing her again.\n\nFaith was confused by the conflicting emotions from soon getting her ass torn in two, and the intimate kiss right now.\n\n\"Now let's go on patrol, my faithful sidekick slut,\" Willow ordered, slapping Faith's ass again.\n\n\"You're enjoying this power trip a little too much,\" Faith warned, following the nerd out of the library.\n\n\"Not as much as you're enjoying getting your shit hole plowed by someone more dominant than you are,\" Willow said wickedly, before they returned to patrolling the hallowed hallways of the school.\n\n\"You'd just better finish what you started,\" Faith said, as they resumed their dutiful rounds.\n\n\"Not to worry, this night isn't ending before you've come from my dick in your asshole, and you've munched my pussy until I've come all over your pretty face,\" Willow promised, her pussy also on fire.\n\n\"I'm not doing any more pussy eating,\" Faith said, not wishing to be such a submissive lesbo slut anymore.\n\nOhhh, you will be munching my twat... until I come all over your face,\" Willow promised just as Zander, now by himself, turned the corner.\n\nZander said, a little relieved, \"There you two are.\"\n\n\"Where else would we be?\" Faith asked, walking a little awkwardly and trying to regain her swagger.\n\n\"What happened to you?\" Zander asked, noticing they were both rather red-faced.\n\n\"What do you mean?\" Faith asked.\n\n\"You're walking funny,\" Zander said.\n\nWillow quipped, \"it's probably because she has a stick shoved up her ass, like she always does.\"\n\n\"Says the most boring rule follower in the world,\" Faith countered, pretending to be the same bitch around Willow she'd always been.\n\n\"Oh, I break some rules,\" Willow replied in a tone that Faith understood, but which confused Zander.\n\n\"Sure you do,\" Faith challenged, enjoying this banter Zander would be oblivious to.\n\n\"Want to patrol with me for a bit, Faith?\" Zander invited, hoping maybe they could fuck again. It was weird that it had happened in the first place, and now it was weird that she was acting as if it hadn't.\n\n\"No, I'm getting to know Willow better,\" Faith refused him. Zander was no longer even remotely interesting to her after the pleasure Willow was giving her... and being with Zander again would be literally anti-climactic.\n\n\"Yeah, let us girls do our thing,\" Willow said.\n\n\"Your thing?\" Zander asked, disappointed that Faith was giving him the complete cold shoulder, just hours after she'd astounded him mid-conversation by suddenly leaping to her feet, tearing off her clothes, demanded he do the same, and then forcefully fucking him. He'd been delighted at the time, but now he was just confused.\n\nGiles joined them, also alone, and ordered, \"Zander, come this way with me; you two ladies go the other way.\"\n\n\"Sure,\" Willow agreed.\n\nZander gave Willow a look and Faith one as well, before compliantly following Giles.\n\nOnce they were alone again, Willow asked, rather sarcastically, \"You sure you don't want to fuck Zander?\"\n\n\"We both know that you do,\" Faith shot right back, feeling a bit of her mojo coming back with that witty retort, and from the way Zander had just been drooling over her.\n\n\"Not anymore! I'd far rather fuck my slayer slut's asshole day and night,\" Willow replied, her interest for Zander having stopped very abruptly as if he were a cold shower... even as her libido heated up for Faith.\n\n\"Do me right here, then,\" Faith called her on her druthers.\n\n\"Yeah, I'll just bend you over against these lockers and ream your asshole,\" Willow said sarcastically.\n\nFaith, ignoring the sarcasm, began unbuttoning her jeans.\n\n\"I was kidding,\" Willow said.\n\n\"I wasn't,\" Faith said, continuing to undo her jeans. \"Just use that spell thingy again.\"\n\n\"The cloaking spell?\" Willow asked.\n\n\"No, some other redundant spell that won't hide us at all, so you can bury your cock up my asshole while a crowd gathers to watch,\" Faith replied sarcastically.\n\n\"Be good,\" Willow said, \"Or that ass remains empty for the rest of the night.\"\n\n\"Please just use the spell,\" Faith wheedled. \"I really need your cock back inside me.\"\n\n\"You're so insatiable,\" Willow complained, but thought that doing a cloaking spell so they could do it right here in the hallway would be pretty hot, and she did want to fuck that ass again; Faith wasn't the only one who was horny. She pulled out some more powder, tossed it more thoroughly around the two of them to give them more space this time, and repeated the incantation.\n\n\"Can you fuck me now?\" Faith asked impatiently, like a kid being told to wait before sticking her hand in the cookie jar.\n\n\"Yes, yes, you've talked me into it,\" Willow agreed, as she pulled the cock back out, still invisible.\n\n\"Just slam it in there,\" Faith demanded, \"it's all pre-stretched for you,\" desperately wanting and needing that cock back, buried deep in her shit hole, so she braced her hands against the lockers and bent over.\n\n\"But we mustn't be at all loud,\" Willow cautioned, as she positioned the invisible cock back at Faith's well-gaped hole.\" The spell keeps us invisible, but it doesn't keep us silent.\"\n\n\"I'll try,\" Faith said, knowing that she usually got very vocal during sex.\n\n\"Just pretend you're a mime, while you enjoy this cock in your shit hole,\" Willow suggested, as she slid the cock easily inside the widely gaped asshole.\n\n\"Oh yes Willow, I fucking love whenever you treat me like your bimbo slut,\" Faith moaned, unable to understand why she loved this so much... it didn't make any sense. She was accustomed to being the fucker, not the fuckee... but there was something so satisfying about just letting go and allowing someone else to take control of everything. Just so liberating to be a slave, even though at face value that made no apparent sense at all. Until now, her life had always been either about being in charge or pretending to be in charge... but this alternative was completely relaxing mentally and physically, which sounded crazy oxymoronic as she was getting ass fucked, but right now her mind could go blank and she could just know she was safe and protected, and could allow herself to be completely at the mercy of the pleasurable whims of this surprisingly gifted nerd of a Mistress.\n\nWillow loved the sight of this strong-willed slayer finally behaving like a complete anal submissive slut... it was like the best magical spell she'd ever created, except she hadn't actually created anything. It was as if she were just a doppelg\u00e4nger of herself, except she wasn't. What was going on was that a very real side of herself she'd hidden away for her entire life was finally coming out to play, and now that it had been freed, she was going to play indeed. \"You'd better get used to this,\" Willow whispered to her pet as she slowly ass fucked her. \"This cock, or larger ones, will be deep inside this asshole quite regularly from now on.\"\n\nFaith wanted to remind Willow once again about this being a one-night thing. Like fucking Zander and moving on, she got bored very quickly, and she almost never fucked anyone twice... truth was the conquest and the slaying of a virgin ass was the rush, never anything ongoing... although she did secretly worry that this time might be different. This... relationship or whatever it was... had been going on for more than a couple of hours now... and all the other times once she came she was done, and then she couldn't wait for the guy or girl to leave... for her, sex was an exchange of only sensations, without any real emotion... but again, this thing with Willow was different... this time she was feeling something... and she continued feelings things... which scared her. She loved it, but she hated it. She was completely confused by the turbulent emotions inside her that were being provoked by the fucking. No, not by the fucking exactly, but rather by the being fucked. And also by the humiliation. And the being dominated. And the kissing.\n\n\"I can't think about the future right now, just fuck me,\" Faith moaned, not feeling ready to agree to any commitment at all. She knew... well, she was pretty sure... that by tomorrow she'd be over this submission thing and back on top... pun intended.\n\n\"You don't need to think about it pet, it's a done deal. All you need to understand is that you're my bitch now,\" Willow asserted herself, and she pulled painfully on Faith's hair as she continued fucking her.\n\n\"For tonight, but tomorrow I plan to return the favour,\" she moaned, her body again betraying her.\n\n\"You will,\" Willow said.\n\n\"I know I will,\" Faith agreed, thinking Willow was beginning to understand the temporary reality of this upside down hierarchy.\n\n\"And in addition to fucking your ass or pussy when I want, you'll also be eating my cunt whenever I need a dumb bimbo to get me off,\" Willow said wickedly, clarifying what she'd just meant, and retaining a strong grip on her control.\n\n\"I don't eat pussy,\" Faith said like she had before, even though now that wasn't entirely true, since she'd already eaten Willow's pussy tonight, and had immensely enjoyed not only the act of doing it, but also the taste.\n\n\"Says the slut who was having the time of her life between my legs an hour ago,\" Willow smirked, as she gave her three rough, deep thrusts.\n\n\"You mother fucker,\" Faith screamed.\n\n\"Sssssshuussssshhhhh!\" Willow reminded her. \"And it's 'slayer ass fucker'.\"\n\n\"Fine, whatever, just keep fucking my ass,\" Faith begged, the pleasure again rising inside her, and desperate to come following her not once, but twice, being shut down cold turkey.\n\n\"Admit you love being my slut,\" Willow ordered.\n\n\"I love being your slut,\" Faith agreed, as right now she'd agree to anything to come again.\n\n\"I'm Willow's slut,\" Willow elaborated. Three rough slams.\n\n\"Yes, yes, I'm Willow's slut,\" Faith moaned, the rougher the fucking, the more intense the pleasure. \"Just keep reaming my shit hole, and I'll be your completely obedient slayer slut.\"\n\n\"Because I own this asshole,\" Willow said, bucking her hips faster into her slayer slut.\n\n\"Fuck yes, you own my asshole,\" Faith moaned louder, her orgasm again on the brink. \"Just... don't... stop... fucking me, I need your cock pummeling me so bad!\"\n\nWillow knew they couldn't fuck all night. Their companions were still doing their rounds, and even with the best of intentions, they weren't being all that quiet, and it was only a matter of time before someone came this way again. Besides, they'd start to wonder again where they were. So she began fucking her pet harder as Faith shoved both of her hands against the lockers for support, and Willow said, \"I want you to come all over this cock slut, and once you coat my cock with your cum, you're officially my loyal, obedient pet forever, willing to service me in any fashion I require, anytime, anyplace.\"\n\nSuddenly Buffy did what she often did, something that always annoyed the fuck out of Faith, as without any warning she called out from nearby, \"Willow! Faith!\"\n\n\"Shhhhhhhh,\" Willow cautioned almost inaudibly, as Buffy turned the corner and came into view.\n\n\"Fuck,\" Faith cursed under her breath, \"not fucking again!' the rising lava inside her bubbling and about to overflow.\n\n\"Shut it, slut,\" Willow breathed directly into her ear, as she stopped moving completely, with her cock buried deep in her new pet's asshole. \"Or no more cock in this asshole for the rest of tonight.\"\n\nBuffy walked right past them, not even three feet away, as Willow held her breath and Faith glared at her as she passed.\n\nFaith moved her hand slightly against the locker, making an accidental noise.\n\nBuffy stopped about six feet past the two of them and turned around, looking directly where the two were attempting to be completely motionless and dead silent statues.\n\nBuffy was perplexed. She'd definitely heard something. But only once, and as she scanned the region where it had come from, she couldn't see anything at all, except for an inanimate hallway lined with lockers. So after an endless moment, she shrugged and headed back towards the others, not wishing to leave the Hell-mouth unguarded for too long.\n\nAs soon as Buffy disappeared from view, Faith insisted, still very quietly, \"She's gone. Now get me off!\"\n\nWillow knew she should probably pull out and wait until they were undoubtably alone, since someone could walk past them anytime, and this rash decision to use a cloaking spell in the middle of the hallway wasn't her at her best genius.\n\nYet, she also couldn't resist resuming fucking Faith... the slayer was clearly a bitch in heat, and she was by no means a heartless Mistress; that just wasn't in her.\n\n\"You'd better come quick, you dumb fucking whore,\" Willow growled almost silently, as she firmly held onto her pet's hips, and resumed reaming the slayer's shithole.\n\n\"Oh yes, just don't stop fucking me, even if the Hell-mouth opens,\" Faith said, her desire to come overriding her role as a slayer. At the moment, she was the one getting slain, and she was loving it!\n\n\"I'm going to fuck this ass so hard you'll be walking bow-legged for a week,\" Willow said, really giving it to her.\n\n\"Yes, destroy my butt hole!\" Faith moaned, her constantly denied orgasm once again rising inside her.\n\n\"Come, you slutty slayer,\" Willow ordered. \"Come with a dick up your shit hole.\"\n\n\"Oh yes, harder Baby, harder,\" Faith moaned, not realizing she'd just called Willow 'Baby'. Which was an endearment. She didn't eat pussies, and she bloody well didn't use endearments!\n\nWillow noticed, though she didn't say anything, just added it to her armory for later, as for now she focused on pounding this asshole and getting Faith off. That she could make a bitch like Faith orgasm was a huge rush... an adrenaline rush like no other! \"Come, slut, come like the anal slut you are for me!\"\n\n\"Oh God,\" Faith moaned, shocked that she enjoyed a cock up her ass so much, and shocked at how Willow's name-calling enhanced her pleasure even more. Her second orgasm of the night was imminent, and she felt like she was going to completely burst! \"Please... please don't stop this time!\"",
        "\"Not until you come, butt slut,\" Willow said, smiling at the rhyme.\n\n\"Then really GIVE IT TO ME!\" Faith moaned, as she began to pound her ass back to meet the hard, deep thrusts, and to take this plastic prick as deep as humanly possible in her asshole.\n\n\"Come, my bimbo ass slut, or I'll go fuck Buffy instead,\" Willow warned wickedly, knowing that threat would catapult this competitive slayer to the brink.\n\n\"Don't you dare,\" Faith pleaded, as her orgasm finally collided with her, \"Yeeeeeeeeeeeeeeessssssssss!\"\n\nIt was very loud, and if someone was anywhere nearby, there was no way they wouldn't hear it, as Willow covered the dumb coming-out-of-control slut's mouth, as she continued wildly fucking her through her orgasm.\n\nAfter a few more slow strokes, Willow horny as fuck herself, she pulled out, pulled the strap-on aside, went to the lockers, pushed the slayer, still coming, to her knees and ordered, \"Eat me slut, show your Mistress how grateful you are for the ass fucking orgasm I've just so generously given you!\"\n\nHer head foggy, her body still trembling in the afterglow of euphoria, and experiencing a compelling need to obey, she dove into the red-thatched pussy and licked hungrily.\n\n\"That's it slut, eat my pussy; show me your worth as my pet,\" Willow babbled, already thinking of all the risky places she could require Faith to do this.\n\nAfter a minute or so, as Willow's orgasm was building quickly, she asked, \"how do I taste?\"\n\n\"Fucking amazing,\" Faith said, unable to get enough of this nerd's pussy. It was the most delicious thing she'd ever eaten.\n\n\"Good, because this will be at the least, a daily meal for you,\" Willow asserted as she grabbed the back of Faith's head and pulled her deeper into her wetness.\n\nFaith continued licking, sensing the redhead was close.\n\n\"Oh yes, eat my pussy, suck on my clit, get me fucking off, you cunt-loving, ass-taking slut,\" Willow berated her, since for some reason, humiliating Faith enhanced her own pleasure.\n\nWillow then began grinding her cunt up and down, soaking her pussy licker's face, until she finally erupted... just as Buffy returned down the hallway.\n\n\"Where the hell are they?\" Buffy asked herself out loud, as Willow came all over Faith's face, and she bit her lip to control all the screaming her body wanted to release.\n\nWillow muffled anything disastrous Faith might say, by clutching her thighs, keeping her deep in her pussy, even though she was a little worried she might suffocate her.\n\n\"I should just phone her,\" Buffy muttered, making Willow's eyes go wide. The sound of her phone ringing directly in front of Buffy from only a few feet away would be a dead giveaway! Buffy knew she had an invisibility spell, she'd realize what was happening in an instant, and the jig would be up!\n\nBut fortunately Buffy reached for her phone and discovered she didn't have it with her. \"Damn it, I left it in the library.\" She turned around and departed the way she had come.\n\nWillow, feeling such a rush at almost but not quite getting caught, pulled Faith upright and kissed her passionately. \"That was amazing!\"\n\n\"Agreed,\" Faith said, oblivious that Buffy had almost caught them, or even that she'd been there at all.\n\n\"We have to get decent, Buffy is still looking for us,\" Willow said, bending her over and wanting to see her gaping handiwork. \"Now let see that gaped asshole quickly.\"\n\n\"You love gaping my shithole, don't you?\" Faith said, bending over and spreading her ass cheeks apart.\n\n\"What can I say?\" Willow shrugged, amazed by how huge a hole she had made. \"I like seeing my bitch's asshole wide open.\"\n\n\"Well, you tore it apart,\" Faith agreed, already missing having a dick in her asshole. She wiggled her ass, \"Fuck, you really did a number on my asshole.\"\n\n\"The first of many,\" Willow promised, as they both got themselves decent.\n\n\"Yeah, yeah,\" Faith said, now that the excitement was over, once again determined never to allow this to happen again... she couldn't afford to become an ongoing slave to a nerd, she was her own woman. She fucked them, then left them wanting more.\n\n\"You'll be begging for it again tomorrow,\" Willow said, \"you should have heard yourself,\" as her phone began ringing.\n\nShe undid the cloaking spell and answered the phone, \"Hey Buffy, what's up?\"\n\n\"Where are you two?\"\n\n\"Walking down the hallway on our way to the library,\" Willow improvised, slapping Faith's ass.\n\n\"I was just there,\" Buffy said, wondering how she could have possibly missed them.\n\n\"We just got back,\" Willow said. \"Faith forgot her dagger at the motel.\"\n\n\"Figures,\" Buffy sighed.\n\n\"Yeah, what can you do?\" Willow shrugged, as Faith could actually feel the huge gaping hole Willow left in her ass.\n\n\"Give her an ass kicking?\" Buffy suggested. \"Or what's that phrase you came up with earlier? An ass pounding?\"\n\nWillow laughed, \"I think she'd like that.\"\n\nThe end of part 2"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal",
        "ass fucking",
        "buffy",
        "lesbian",
        "silkstockingslover",
        "sodomy",
        "strap-on",
        "strapon",
        "submissive",
        "voyeur"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/willows-way-ch-02"
}
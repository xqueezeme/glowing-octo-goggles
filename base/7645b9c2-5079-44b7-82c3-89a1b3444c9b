{
    "title": "On the Side",
    "pages": [
        "\"I'm just saying, why not find some little honey? You've got the money. Set her up in an apartment. Buy her things. Then fuck her anytime you want.\"\n\nDave was slurring, but so was I. Too many drinks to celebrate winning a client we had pursued for months.\n\n\"Because it's exploitive. Disgusting. And being married actually means something, you know.\"\n\nDave snorted. \"Yeah.... blue balls for the past fifteen years.\"\n\nI swirled the ice in my glass, then signaled the bartender for more. \"Just because Katherine and I don't have the same sex drive\u2014\"\n\n\"Yeah, yours is in overdrive, hers is in reverse. How can you stand it? Back in college you were a machine.\"\n\n\"I was an animal,\" I said. \"Spent all my time in first-year chasing tail. Failed every class. Nearly got kicked out.\"\n\nDave chuckled. \"Yeah. Then in second-year you were after whassername... Emily? Man, she was pretty. Then finally you fuck her and next thing I know she won't even talk to you. You never said what happened.\"\n\n\"I did. I got carried away.\"\n\n\"Details, man. Details. You're supposed to confide in your best friend.\"\n\n\"Not going to happen.\" I shook my head, remembering. \"God, we were assholes. Womanizing pieces of shit. I had to grow up. Had to get control of myself.\"\n\n\"And atone for your sins by marrying Professor Frigid Giraffe?\"\n\nI shoved him. \"I'll tell Katherine you call her that. Dave, if YOU ever grow up, you'll realize woman aren't just sex toys. And when you find the love of your life, you expect to make a few sacrifices.\"\n\n~~~~\n\nThe late spring air felt wonderful as I wobbled home. At forty, I was getting too old to drink like that, but it felt good to reminisce and trade insults with Dave.\n\nKatherine was reading some research paper when I slid into bed beside her.\n\n\"How did writing go today?\" I asked.\n\n\"Horrible. The middle chapters still don't flow. I should just stick to academic writing. Fiction is too hard.\"\n\n\"You'll get it, Kate. Your first books still sell well. And as an official beta reader, I can tell you this one's even better.\"\n\nShe smiled. \"Though you might be slightly biased, right? Thanks, Hon. You really keep me going.\"\n\nWe kissed, but Kate pulled back.\n\n\"Phew,\" she said. \"You stink of scotch. So how's Dave? What did he call me this time... stork, giraffe or stick insect?\"\n\n\"Heh. You know he's kidding. He just can't admit how turned on he is by your tall, lean body, your regal face, your tight bum...\"\n\nKate smiled and backhanded my chest. \"I think you got horny looking at girls at the bar. Were any of them eyeing you? Lots of girls go for handsome older guys. Maybe that's why you're so late... you took some little piece of tail into the alley for a quickie.\"\n\nWhen I whacked her with a pillow, Kate pounced, trying to pin my arms. She had always been athletic. Even now past middle age she was strong. We laughed and wrestled until I had her trapped beneath me on the bed.\n\nKate wriggled against my sudden hardness. \"Ooo... someone's excited.\"\n\nI held her hands above her head while I grabbed the lube and lifted her nightgown. \n\nKate pretended to struggle as I worked her panties down then greased her up. \"Oh no, Mister!\" she said mimicking a young voice, \"I can't fuck a married man. That would be wrong. Oh! You're sooo big. And so handsome. I guess it'd be okay... just this once...\"\n\nAs I pushed into her, Kate locked her legs around me.\n\n\"Uh, mmm... oh, mister, you're so much better than those boys I hang around with. Fuck me! I need it sooo bad. My little pussy needs your cum. Take me, mister. Come in me.\"\n\nI knew sex did nothing for her, but Kate kept up the act, moaning and clinging. While my sex drive still raged like a teenager's, Kate's had dwindled until it had nearly disappeared. Yet she never refused when I needed to fuck her.\n\nWe had started these little fantasies for her, having read it sometimes helped. I role-played as firefighter, biker, hunky student from one of her classes, or the tweed-encrusted professor she had a major crush on as an undergrad.\n\nThe games worked for a while, but Kate never got into them completely. Eventually we stopped, but she still loved to weave naughty scenarios for me\u2014one of many ways Kate showed her love. \n\nI fucked her as she moaned, pretending, urging me on. \n\nKate had said without the distraction of sex, she had more energy for other things. She was probably right: she gained tenure at the university, was an accomplished speaker, and was now a rising author.\n\nLust began fogging my senses as I got into the fantasy. Then I realized Kate was laying inert, head turned away.\n\nI stopped. \"You're not okay.\"\n\n\"Sorry, Hon,\" she said, anguished. \"It's just... the rubbing. The sensation. Tonight, it's just bad. Even with all the lube. I don't know what's wrong with me.\"\n\nI rolled off and pulled her to me. \"Nothing's wrong. They said it's natural, right? I'm sorry to put you through this.\"\n\nKate hugged me. \"I still like it sometimes. And you should be able to make love to your wife.\" She paused, then gave me a seductive look. \"Can I blow you?\"\n\n\"It's okay, Kate,\" I sighed. \"It's late. I wasn't really that horny.\"\n\nKate was silent, then said, \"You know, if you ever need someone else for... relief... I could understand. I know how you get when I don't keep you drained. Kirsten has always drooled over you. Maybe\u2014\"\n\n\"I am NOT sleeping with your best friend, Kate. Or anyone. We're married. That means something.\"\n\nKate slowly shook her head. \"Why is it I'm older, but you're the old-fashioned one? In contemporary French and Japanese society taking a lover is common. Almost expected.\"\n\n\"That's your sociology degrees talking, not you. Besides, we're not French or Japanese. How can you be happy with me fucking someone else?\"\n\n\"I didn't say I'd be happy. I said I could understand. If it's just sex. It's just biological need, after all. Just, whatever you do... don't fall in love. Because your heart belongs to me.\"\n\nWe kissed and switched off the lights. \n\nIf there was any way to banish my raging libido and join my wife in her world free of urges, I would have done it. Instead, I waited until she was safely asleep, then quietly jacked off beside her like some drooling teenager. \n\nI pictured the women I'd been with in college\u2014their bodies, their hunger, the joy of making them come. I tried not to think of the tears and their looks of betrayal later... when I cheated or went too far.\n\n~~~~ \n\nWhen I pulled into the driveway the next evening, Amy was waiting on our front step.\n\nShe stood when she saw me approach, dusting the seat of her pants.\n\n\"Sorry to bother you, Mr. L. Do you have a moment?\" \n\nAt nineteen, Amy had grown into a lovely young woman. Fresh-faced with shoulder-length hair and a perfect figure.\n\nI remembered six years before when she first knocked on our door\u2014a skinny, bright eyed kid. She breathlessly rattled off a sales pitch about the odd jobs she could do \"at an incredibly low price for a limited time only for select first-time customers.\"\n\nWe knew who she was. Everyone did: Peggy Wendler's kid. Her mother had a ratty bungalow three blocks over\u2014party central, with thumping music, drunken brawls and frequent visits from the police.\n\nWe let Amy mow that day while we watched from inside in case she needed help. She didn't. That gangly girl wrestled our mower with a vengeance, making strips like a golf green, careful to get every blade of grass.\n\nThe next day she was back, offering to paint our fences. We thought that job was too big for a kid, so we politely refused. She returned later with estimates, a daily schedule, and some boards she had sanded and painted to perfection to demonstrate her \"fine handiwork and attention to detail.\" We relented. Amy did an excellent job.\n\nHand-lettered fliers soon appeared on every telephone pole for blocks: \"Amy does anything!\" they read, with a caricature Amy drew of her holding a paintbrush and hammer. Considering her mother's reputation, we suggested a better headline. The next day they read \"Amy the handy person.\"\n\nWithin weeks, everyone was paying Amy to mow, paint, babysit and do other odd jobs. She stopped by our house often looking for work. We learned it was impossible to say no.\n\nOne day she admitted her mother was taking all her money, so together we found ways to hide most of it and even invest some. Over the years we helped her every way we could.\n\nStill, Amy remained distant and professional, with a cordial smile and careful diction, always dressed in her \"working professional\" attire of crisp khakis and polo shirt.\n\nOn our step that evening, Amy was just as stiff, wearing her usual uniform, though this time her shirt seemed tighter, emphasizing her breasts. She also wore make-up, which I'd never seen on her.\n\n\"Amy,\" I said, \"you didn't have to wait outside. Katherine would have let you in.\"\n\n\"I can't bother Mrs. L. when she's writing. Besides, I really need to speak to both of you, if that's okay.\"\n\nI ushered her in and followed her into the living room. Her khakis also seemed tighter, showing off the enticing globes of her shapely ass. A scent of some intriguing perfume trailed behind her. \n\nWe sat. \"So how's the college going? First year must be almost over.\"\n\n\"Thank you for asking, Mr. L. It's great. One more week until summer break. But I'm continuing through the summer, too. Then I can finish the entire program by December.\"\n\nI nodded. \"I should have known, Amy. You always work hard. Makes sense, too: with your scholarship and living at home, you don't need a summer job. You can just focus on your program.\"\n\nAmy tongued her lip. \"Um, that's what I hoped to talk to you about. My mom is selling the house.\"\n\n\"Oh? You're moving?\"\n\n\"Uh, well, she's moving to Mexico with her new guy. I'm not invited. She says it's time I stopped mooching off her and found my own guy to take care of me.\"\n\n\"WHAT? THAT MISERABLE FUCKING BITCH!\" Katherine had been listening from the doorway. She stormed in and plopped beside me.\n\nAmy looked rattled, ready to bolt. \n\n\"Sorry, Amy,\" said Katherine, reaching over to touch her hand. \"It's okay. I shouldn't have said that about your mother.\"\n\nAmy relaxed, nodding to herself. \"I know how she is. What people think of her. They're not wrong.\"\n\nI said, \"So why is she selling your house?\"\n\n\"She, uh, owes money. And her latest boyfriend's talked her into taking what's left and living it up in Mexico.\"\n\n\"Oh, no...\" said Katherine.\n\n\"I told her he's just going to blow it all and dump her! But she's convinced it's different this time... like he's not like the 500 other scumbags she's hooked up with. Uh, if you pardon the expression.\"\n\n\"Now, Amy,\" I said, \"That's not fair. There's no way your mom's been with 500 scumbags. By my count it's only been 137 scumbags, 119 hardened criminals and 12 of the criminally insane.\"\n\nAmy laughed before catching herself.\n\nKate said, \"So if you're not going with her, where will you live?\"\n\nAmy straightened her shoulders, assuming her \"salesman\" posture. Kate and I knew it well. Amy's pitches hadn't changed since she was little.\n\n\"Mr. L, Mrs. L?\" she said, \"As my very best customers, I'd like to offer you the first opportunity to benefit from an innovative new offering. For a limited time, you can have top-quality on premise housecleaning, laundry and property maintenance, 24 hours a day, from your own live-in house and grounds keeper, all for the low, low rate of...\"\n\n\"Amy...\" I said.\n\n\"...the low, low introductory rate of...\"\n\nKate held up her hands. \"Amy, it's okay,\" she said, smiling. \"You need a place to stay? You're welcome to stay here.\"\n\nAmy blinked. \"But I haven't finished my pitch.\"\n\nI laughed. \"I think we get it.\" I shared a smile with Kate. \"We'd be happy to have you. It wouldn't be any trouble. But wouldn't you rather be with other family or friends?\"\n\n\"I have a deal to move in with my friend Mary in September, but she goes back home in the summer and already sublet her apartment. So, until then there's... there's no one else.\"\n\n\"Okay,\" I said, \"Our guest room will be perfect. And you've house-sat so many times you know where everything is. But you'd be here as our guest, okay? None of this housekeeper stuff.\"\n\nAmy stiffened. \"No. I'll work to earn my keep. You know I can.\"\n\n\"Please,\" said Kate. \"You've done so much for us over the years. We can return the favor.\"\n\n\"But that was business! And you always overpaid me. I can clean and do laundry. I've done that at home since I was six. And I'll keep mowing the lawn and the other things. I can even cook a little.\"\n\nI looked at Katherine. She shrugged.\n\n\"You can help,\" I said, \"but please... you'd be our guest, okay? Now, when are you moving out?\"\n\n\"Uh, I'm already out. My mom left two hours ago.\"\n\n\"Oh? Where are your things?\"\n\n\"We had a fight. They're in the front yard where mom threw them.\"\n\n\"WHAT?\" I yelled. \"THAT MISERABLE FUCKING BITCH!\"\n\n~~~~\n\nWe collected Amy's belongings from her yard. Her house was dark and locked.\n\nWe set her up in the guestroom across the hall. Amy sat on the double bed, looking around and bouncing slightly. Her delight warmed my heart. \n\n\"Such a lovely room you have, Mr. L,\" she said.\n\n\"It's your room now. And this is your home. For as long as you need it, okay? Decorate your room, rearrange it. Whatever you like. And how about you call me Ben now? And Katherine is Katherine. You're not a kid anymore.\"\n\n\"Oh. Uh, okay. I'll make sure I'm out during the day so I won't disturb Mrs., uh, Katherine.\"\n\nI chuckled. \"You'd have to set off a bomb. Once she's in her study writing with the music going, nothing disturbs her.\"\n\n\"Oh. Good. She's pretty famous, isn't she?\"\n\n\"Oh, a little,\" I said. \"Her first two novels did well. The third is almost ready to hit the shelves. This last one's not coming so easily, though.\"\n\n\"Well, I'll be at the college most of the time.\"\n\n\"What's the program you're in? Jewelry something?\"\n\n\"Jewelry Arts and Marketing. Custom jewelry is really big right now. You can make a fortune once you're well known.\"\n\n\"I always thought you'd study business, Amy. Hope you didn't get into it just for money. It's important to like what you do.\"\n\n\"Oh, I like it. There's a big business component too. I have so many designs I want to try. See?\" She stood and offered a pendant she pulled from inside her shirt.\n\nShe leaned over as I held it\u2014an intricate wire wrap with a central stone, warm from her body. Then I realized Amy's polo was unbuttoned and offered a clear view of the tops of her breasts. They looked delicious. \n\nFlustered, I let go. \"That's a nice design, Amy. Is the stone jade?\"\n\n\"It's fake. They let us work with real semi-precious stones later.\"\n\nAmy stood then tentatively put her arms around me, resting her head on my chest. \n\n\"Thank you for letting me stay here, Mr. L... Ben. I'll make it up to you. You'll see.\"\n\nI hugged her in return, feeling how tense and nervous she was. I found myself rattled by her vulnerability, closeness and that perfume. \n\n\"We're happy to have you, Amy. People help each other, you know. It's what people do.\"\n\n~~~~\n\nWhen I got home the next night, Amy had cut the lawn in her golf course style. Inside, she had vacuumed, tidied and folded laundry.\n\nLater, Katherine and I lay in bed discussing it.\n\n\"If it makes her feel better, let's just let her do it for now,\" said Kate, \"Besides...\" She put her hands behind her head and grinned, \"...I could really get used to it.\"\n\n\"Oh, come on. It bugs you, too. Feels like we're exploiting her.\"\n\n\"We'll make it up to her. Give her a graduation present. Or she could come with us to New York. She said she's never traveled.\"\n\nI eyed Kate. \"Are we going to New York? Book three is being released?\"\n\nKate grinned. \"The publisher said the first run could be in stores next month.\"\n\nI kissed her cheek. \"That's perfect. My busy season will be over then. I love going on your promotion tours. Anywhere but Vancouver.\"\n\nWe laughed, remembering our disastrous first book tour together.\n\n\"So,\" I said, \"what about book four?\"\n\n\"Don't ask.\"\n\nKate vented about her problems with the new novel and we debated solutions. Together we found some ideas that worked.\n\nOnce she was asleep again I lay there jerking off. I tried thinking of anything else, but couldn't dispel that glimpse of Amy's breasts and the warmth of her pressed against me. I yearned to hold her again. Then thoughts formed of comforting her in other ways.\n\nNo! Amy was in my care. I would not think of her that way.\n\n~~~~\n\nSome days later I came home to find Amy trying to cook dinner. Spaghetti was about all she knew, so I called Katherine out of her study and together the three of us turned Amy's basic meal into a passable mushroom spaghetti Bolognese with garlic bread and Caesar salad.\n\n\"This is fantastic!\" Amy said as we ate. \"Thanks for showing me. I'll make something better for you tomorrow.\"\n\n\"Amy,\" said Katherine, \"You already do too much. We can't have you cooking too.\"\n\nAmy's face fell in disappointment.\n\n\"Tell you what,\" I said, wiping my mouth, \"I usually do the cooking. Tomorrow, let's make something together. I'd like the help.\"\n\nAmy looked to Katherine. Seeing approval, she nodded and beamed.\n\nAmy and I cooked each night when I got home. It was simple things at first, gradually getting more elaborate. Amy learned quickly and soon was whirling around the kitchen, finding ingredients, chopping, stirring, double checking the recipe.\n\nEach day Amy became happier, though she maintained her stiff, formal manner and always dressed in her meticulous polo shirt and khakis. Once she started humming to herself while stirring a sauce, then glanced at me warily after catching herself.\n\n~~~~\n\nKate had her monthly evening lecture at the University, so for the first time Amy and I were eating without her.\n\nWhen I got home, Amy greeted me with a guarded smile.\n\n\"Since it's just us tonight,\" she said, \"I want to make something special.\"\n\nShe had picked out an elaborate recipe and equally complicated dessert. It would take time, but if that's what she wanted, I would try. \n\nThe main course was nearly ready when I heard \"OW! OUCH! Oh... FUCKING SHIT!\"\n\nA Pyrex mixing bowl fell from Amy's hands and shattered, splashing the carefully prepared sauce over herself and everything.\n\n\"Amy, are you okay?\"\n\nShe was open-mouthed with horror. \"I'm sorry! I didn't think it would be so hot when I picked it up.\" Her eyes darted to the exits. \n\n\"Did you get burned? Come run your hands under cold water. Watch where you step.\" I led her to the sink.\n\n\"I'm sorry!\" she wailed, holding her hands under the water. \"I've ruined your dinner. And I swore.\"\n\n\"What are we, saints? Swear all you fucking want. Anyway, accidents are part of the joys of cooking.\"\n\nThankfully, she wasn't burned. We picked up the glass, and I mopped the floor while Amy wiped sauce off the lower drawers and baseboard. She kept glancing at me fearfully.\n\n\"Hey,\" I said, \"I like this color. I think I know what to paint the cabinets next.\"\n\nShe smiled weakly.\n\n\"So,\" I said, \"what should we order in? Pizza, Greek or Chinese?\"\n\n~~~~\n\nAmy changed in her room and came down wearing sweatpants and a loose T-shirt. We sat in the living room and started a movie while we ate pizza.\n\nAmy huddled on the far side of the couch. \"You're really not angry?\"\n\n\"Why?\" I said. \"I've ruined meals in worse ways. Once I dropped Kate's birthday cake carrying it to the table.\"\n\n\"Seriously?\"\n\n\"Yeah. We were at her mom's place. She has these little dogs\u2014two barking rats. I was carrying the cake to the table and one of the little bastards got underfoot. The cake landed upside-down on the other's back. Both took off, of course. Frosting and bits of cake were all up the stairs, embedded in the carpet, over everything in the linen closet where the little pricks hid...\"",
        "\"Oh, no!\"\n\n\"The dogs still disappear every time I visit. But good thing is, I'm not allowed near the kitchen at her house anymore. I get to sit and relax.\"\n\nAmy shook her head, laughing. Such a wonderful sight. She said, \"If I did that at home, mom would have belted me and kicked me out for a week.\"\n\n\"Well, that's not happening here, Amy.\"\n\n\"No. I guess not.\" She took a bite of pizza and tucked her legs under herself. \"It's peaceful. No parties. No mom yelling at me, none of her boyfriends creeping on me...\"\n\n\"Uh, her boyfriends hit on you?\"\n\n\"Since I was about ten. A lot of them wanted mother and daughter to be a package deal.\"\n\n\"That's disgusting,\" I said. \"You didn't tell anyone? A teacher? The cops? And why didn't you tell us?\"\n\nAmy's face darkened. \"No. No way. Child Services already had their eye on me. I was NOT going to wind up in a foster home. I found ways to handle it.\" She flashed an evil grin. \"Guys leave you alone when you tell 'em you'll cut their dick off when they're sleeping... then show them the knife.\" \n\nI blanched. \"Uh, I guess so.\"\n\n\"Anyway,\" she chirped, \"some of my friends had it way worse.\" She bit her pizza and continued. \"Besides... living with mom, I learned how to spot scumbags a mile away. And how to spot a great guy, too.\"\n\nAmy flicked a glance at me before looking away.\n\nI said, \"Er, have you heard from your mom?\"\n\n\"Oh, she's texted a couple times. She's living the life. Beaches, booze, parties. It won't last, but who knows? Maybe things'll work out for her. Hope they do.\"\n\n\"I wouldn't be so generous if I'd gone through what you have.\"\n\nAmy nodded, lips pursed. \"My friends say I should hate her, but she had it tough growing up too. And she was never that smart or motivated. And she's my mom. She's just the way she is.\"\n\nSounds of moaning drew our attention to the TV: a sex scene between the aging star and the rising actress.\n\n\"Eww,\" said Amy.\n\n\"Yeah. He's way too old for her.\"\n\n\"He's hot. I meant the make-out scene. Why do they always have to slam each other against a wall then kiss like they're gnawing each other's face off?\"\n\n\"I guess they're trying to show passion.\"\n\n\"Pffft. Passion is someone holding you, kissing your neck, telling you all the dirty things they want to do to you. Then doing them.\"\n\nA shootout scene and a car chase followed, then the movie devolved into a series of talking heads and intricate plot points I didn't care to follow. \n\nAmy fell asleep, slumped against the side of the couch, pizza slice still in her hand. I took it from her.\n\nShe works too hard, I thought. Courses and crafting her jewelry projects during the day, then cleaning or doing yard work when she gets home.\n\nI watched the movie, letting Amy snooze. I admit I sneaked glances at her lovely face, fighting an urge to slide over and cuddle her.\n\n~~~~ \n\nI snorted awake. Somehow, Amy lay with her head in my lap, my arm pulled around her, her hand holding mine over her shirt to her braless breast. She looked peaceful for once. Before I could catch myself, I squeezed her warm boob, marveling. She was just more than a handful, with the incredible firmness I'd forgotten young women have. Amy's nipple hardened against my palm, seeking more.\n\nThen I realized the television was off and the house was dark except for one lamp in the corner. Katherine must have come home. Did she see us in that position?\n\n\"Amy,\" I said, shaking her. \"We fell asleep. Up to your room, sleepyhead.\"\n\nShe was so groggy I had to pull her up the stairs. Amy had decorated her room with posters and hangings. Her desk had become a makeshift workbench with jewelry tools and materials neatly positioned on a broad cloth.\n\nBefore I turned to leave, Amy pulled her shirt over her head as she walked towards her bed, exposing her naked back and the side of one bare boob, the same one I had held moments before.\n\nAmy dropped her sweatpants to the floor, leaving her only in thin panties. What a vision: she was shapely and firm, youthful innocence combined with fertile sexuality. When she started pushing her underwear down her bum, I fought every instinct and fled, closing her door behind me.\n\nKatherine woke when I slid in to bed beside her. \n\n\"Have fun with Amy?\" she asked.\n\n\"What? Oh, well, we tried cooking. Made a mess. Watched a movie. Why didn't you wake us up when you got home?\"\n\n\"Oh, you looked too cute together. I think she's starting to feel at home.\"\n\n\"A little. Kate, she had an even worse time growing up than we knew.\"\n\n\"So she's told me. We talk sometimes before you get home. At least here she has some peace and stability. She can focus on what she wants.\"\n\nKate fell back asleep within minutes and I cuddled behind her, trying to untangle all I was feeling.\n\nUnwanted arousal lingered\u2014the feel of Amy's breast, seeing her strip off her clothes\u2014mingled with anger and regret at what she endured growing up. If only we'd known. I wish I could erase her past, erase the hurt.\n\n~~~~\n\nAfter that night, Amy's guarded facade faded. She no longer watched our reactions after everything she said. Tight sweatpants or ripped cut-offs that emphasized her long legs and shapely ass replaced her khakis. Crisp polos became loose t-shirts often with braless breasts underneath. I heard her in her room singing along to music. When she got angry or frustrated, she let it show. She swore. She said \"you know\" too much.\n\nEach night when we cooked, Amy began smiling for real, joking and chatting about her projects at the college and plans for her business after graduating.\n\nThe real Amy was smart, energetic, sometimes silly, and sometimes moody. The real Amy was beautiful.\n\n~~~~\n\nWeeks later, Kate greeted me at the door when I got home. \n\n\"They just called from New York,\" she said. \"They want me there for two weeks.\"\n\n\"Book three is out?\"\n\n\"Soon. But they want major changes to book four. I'm fighting it, so the publisher wants me there to workshop it. And they're setting up interviews and signings to build interest in book three.\"\n\n\"But we can't go now. My busiest time of year just started. You know that.\"\n\n\"They want me there now. Anyway, it will be a tight schedule. We wouldn't have any time to ourselves.\"\n\n\"But two weeks?\" I said. \"We haven't been apart that long since we got married.\"\n\n\"Hmm, you're right.\" Kate smiled. \"Well, you won't be alone. Amy will keep the place from falling apart.\"\n\nShe flew out the next morning.\n\n~~~~\n\nMy firm made a third of our annual income during our busy time. It was always a slog, and we had the new client. Nothing seemed to satisfy them.\n\nI left work late, worn out and looking forward to cooking with Amy, though worried about being alone with her.\n\nThe house smelled wonderful when I walked in. The table was set, and Amy was in the kitchen. She turned when she heard me and beamed a heart-melting smile.\n\nShe wore a backless sundress, cut low in front showing her ample cleavage. A big bow behind her neck secured it. One tug and a wriggle of her hips and the dress would be on the floor. \n\n\"Amy, I'm sorry I'm so late. Let me help.\"\n\n\"I've got this, Ben. And you look exhausted. You can help serve when it's ready.\" She grinned. \"...if you promise not to drop it on the dog.\"\n\n\"That's easy since we don't have a dog. Promise not to paint the floor with that sauce?\"\n\nAmy stuck out her tongue and turned back to cooking.\n\nDinner was excellent. Amy raised her glass. \"To us. All alone.\"\n\n\"Uh, right,\" I said, clinking her glass, \"And let's hope Kate beats her editors into submission in New York.\"\n\n\"Have you talked to her?\"\n\n\"Just a quick text at noon. She was going into a marathon work-shopping session. They did this to her for the last book, too. Probably won't hear more for a day or two. I hope she doesn't have to stay the entire two weeks.\"\n\nAs we were finishing, Amy asked, \"Was work hard today?\"\n\n\"Brutal.\"\n\nShe walked behind my seat and began massaging my shoulders. After protests and awkward resistance, I relented and relaxed. Her touch was heavenly.\n\nWhile she kneaded, Amy said, \"Do you remember when I first asked to do your mowing? When I was little?\"\n\n\"Of course.\"\n\n\"Well... you weren't the first person I asked. I tried lots of the neighbors. Every one told me to get lost. I only realized later it was because they knew who I was. Because mom's reputation and the trouble she's caused in the neighborhood.\"\n\n\"Hmm. Yeah, I could see that. The folks around here can be a little stuck up. But you're nothing like your mother.\"\n\nAmy kept massaging. Her breasts occasionally skimmed the back of my head. It was both hypnotic and arousing.\n\n\"You were the first to let me mow. And then told everyone how hard I worked, how I was careful, how I was trustworthy. Then everyone wanted me to do something.\"\n\n\"Amy... you worked hard. We did what anyone would do.\"\n\n\"No. Even after everyone let me do odd jobs, most tried to pay less than agreed, or do extra work for free. Then there's Mr. Mitchell... on Elm Street? When I mow, he watches from inside with binoculars. And not to make sure I do a good job. Thinks I can't see him. Then after, he always asks me to come inside for a glass of water.\"\n\n\"That old perv. He's always creeping on the servers at our golf club too.\"\n\nAmy stopped working my shoulders and leaned close. \"You never cared I was poor, or who my mom was. You treated me like a person. Thank you.\"\n\nShe kissed my neck, sending jolts both to my heart and my crotch. If only she knew the effect she was having. Thoughts formed of acts far darker than anything saggy old Mr. Mitchell would do.\n\nAfter dinner while we cleaned up, Amy seemed to find every opportunity to brush against me or touch me as we worked, smiling and making eyes at me. While I scrubbed a pan, she came up from behind and laid her chin on my shoulder to watch. When I turned to see what the hell she was doing, she smiled playfully and sauntered away, hips swaying. \n\n\"Okay,\" I said, putting away the last of the dishes, \"I have work to catch up on. I'll be in the study.\"\n\nAmy's face fell. \"Oh. I... I thought we could watch another movie. There's a new comedy that's supposed to be really good.\"\n\n\"I wish I could, Amy. Maybe tomorrow? Thank you for dinner. You've turned into an excellent cook.\"\n\nAs I retreated to the study, Amy called, \"All thanks to you!\"\n\nConcentrating on work was hard. I wanted to join Amy, just sit beside her while we watched whatever she wanted. How could I survive two weeks with her, especially if she kept dressing and acting that way?\n\n~~~~\n\nEleven o'clock. My rule was to never work past eleven. I finished up and emerged from the den to find the television on with Amy asleep on the couch.\n\nOnce again I led her to her bedroom, but she just leaned in the doorway, squinty-eyed and dazed. I went in, pulling her with me and switched on her bedside lamp. When I turned, Amy was tugging lazily at the bow behind her neck. The top of her dress fell, baring her breasts. She pushed the material down her hips to let it fall to her feet. No underwear\u2014she stood naked, swaying slightly, eyes squinted with sleepiness.\n\nTime crawled as I tried capturing every part of her at once. Her breasts sat high and firm, perfect, generous and inviting. Her skin shone, smooth and flawless except for a small mole to the right of her bellybutton. That held my eyes for a moment before I dared look lower. When I did, carefully trimmed fur greeted me, along with the sweetest pussy peeking from the gap between her toned thighs.\n\nStill squinting, Amy shambled past me to her bed, then stopped, turned and walked back. She bent to pick her dress off the floor, presenting a sinfully intimate view from behind. Tossing the dress over a chair, she walked back to her bed and climbed in. She slid over, turning away from me and gathering the covers to her front, leaving her back and ass exposed. The uncovered side of the bed beckoned like an invitation.\n\nI pictured stripping off and crawling in behind her, pulling her naked body to mine, kissing her neck, having her breasts in my hands again, hearing her sigh as I caressed her. \n\nInstead, I turned off her light and fled to my room.\n\nThe bed was cold and huge without Kate. I tossed, trying to get used to the extra space while images of Amy burned: her lovely body lying in bed like an offer. What was with her flirty behavior all night? And that casual nudity? She was barely awake. She must not have realized I was there.\n\n~~~~\n\nWhen I reached Kate the next afternoon, I told her everything. \n\nShe laughed. \"Well, that was a real treat for you, wasn't it? But I'm sure you're right. She was just sleepy. Or maybe she really is trying to seduce you. She thinks the world of you, you know.\"\n\n\"Sure. I'm like a father to her. She just doesn't realize what she's doing. It's not like she had great role models growing up. I have to think of a way to talk to her about it that won't embarrass her.\"\n\n\"Tell her what a sex maniac you are. Scare her straight.\"\n\n\"We want her to feel at home, not run away screaming. Besides, I'm not like that anymore.\"\n\n\"But you are! You're a cuddly, loving sex maniac. I'm impressed you didn't get in bed with her.\"\n\n\"Kate, you say that, but I know it would hurt you. I'm NEVER going to cheat. And certainly not with some nineteen-year-old, wonderful as she is. Plus, she's in our care. With nowhere else to go. That makes it all kinds of wrong.\"\n\n\"Hmm,\" said Kate. \"methinks you protest too much.\"\n\nPreparing dinner that night with Amy was awkward. I felt like I'd betrayed her seeing her naked. She must have felt it\u2014she was hesitant all evening, eyeing me warily.\n\nAgain I worked in the study until eleven. Music was playing a little too loudly in Amy's room when I walked past.\n\n~~~~\n\nThe next day I headed home early, too tired to continue. We needed more staff. I planned to catch up again that evening.\n\nI spotted Amy walking home from her bus stop. As I pulled over, I realized two young guys were following her, swaggering and acting macho. Amy walked on, ignoring them.\n\nWhen the bigger guy said something, Amy spun and slugged him hard, knocking him onto his ass. The other guy backed away, palms up, then bent to help his friend.\n\nI parked, and ran across to join them as Amy screamed curses at the guys.\n\n\"What's going on here?\" I said.\n\n\"Some guys are just HARRASSING ASSHOLES,\" said Amy, glaring at the guy rubbing his jaw.\n\n\"Do we need the cops here, guys?\"\n\n\"No... no, sir. Just a misunderstanding.\"\n\n\"Then get the fuck out of here.\"\n\nWhen they were a safe distance, the bigger one turned to sneer and give me the finger.\n\nAmy was fuming as we walked to the car. \"I'm sorry you saw that,\" she said.\n\n\"You okay?\" I asked. \"Who are they?\"\n\n\"The tall one has been after me since high school. His dad used to hang around with mom. They think since she's an easy lay, I must be too.\"\n\n\"Oh,\" I said as I started driving.\n\nAmy looked over at me. \"But I'm not. I'm not!\" \n\n\"You don't need to explain yourself to me, Amy. It's none of my business.\"\n\nShe slumped in her seat with arms crossed.\n\n\"Not that I approve,\" I said, \"but that was a great punch.\"\n\n\"I can handle myself.\" \n\nShe was still scowling, so I said, \"But you know, Amy... if you hit boys, they might not like you anymore.\"\n\nAmy dropped her arms and gawped at me like I was impaired. Then she saw my grin. She barked a laugh and covered her mouth. She was still grinning when we arrived at the house.\n\n~~~~\n\n1:32am. A ringing clatter of breaking glass woke me, followed by a yell from Amy's room.\n\nI found her huddled against the wall, dressed in panties and a thin top, arms hugging her knees. Her eyes were wild.\n\nWind fluttered the curtains. Shards of window glass glinted, sprayed over the bed and carpet. Outside, a car race away.\n\n\"Amy, are you hurt?\" My heart was pounding. \n\nShe was ashen. \"Guess they found out where I live now, huh?\"\n\nI led her into the hall. She was stiff and trembling. \n\n\"Those sons of bitches,\" I said. \"Who are they? I'll call the cops.\" \n\n\"Don't! Their dads are... you don't need that kind of trouble. Trust me.\"\n\n\"Amy, you could've been hurt! I'm calling the cops. Maybe we don't have to give them names, but the police need a record of this in case those fuckers do anything else.\"\n\nThe police took our statements. We claimed we didn't know who did it, but when the officers learned who Amy's mother was, they seemed to have some ideas. They said they'd return in the morning to ask the neighbors if they had seen anything.\n\nAmy and I cleaned up while we waited for a 24-hour glass company.\n\nI said, \"I'm having them put laminate on all the windows tomorrow. Makes them hold together like a windshield. And I've called a security company to install cameras and an alarm system in a few days.\"\n\n\"Don't do all that,\" said Amy. \"It's just dickheads getting revenge. They won't be back if we don't provoke them.\"\n\n\"Maybe. We should have better security, anyway.\"\n\nAmy hugged me hard.\n\nMy eyes were on the gaping window. They could have hurt her! I wanted to find the guys and beat them to death.\n\nAmy and I were calmer by the time the window was repaired and the workmen left.\n\n\"Okay,\" I said, \"excitement's over. Time for sleep.\"\n\nIn my room, I was reaching for the light when there was a tapping at the door. Amy peered in, timid and vulnerable. She still wore only low panties and a top so thin her areolas showed through.\n\nI sat up. \"You okay?\"\n\n\"Can I... uh, stay with you? Just for a little?\"\n\n\"I understand, Amy. But that... it wouldn't be appropriate. Especially...\" I indicated her sleeping attire.\n\nShe looked down at herself. \"Oh!\" she said, then vanished. \n\nMoments later she re-appeared, this time in a wrinkled flannel nightgown with huge faded flowers. It was hideous. A potato sack would have been sexier.\n\n\"How about now?\" she said, flashing a half smile.\n\nI laughed. \"Okay. Just for a while.\"\n\nShe padded in then slipped in beside me, pulling my arm around her. \n\n\"Those fucking pricks,\" she said.\n\n\"Yes,\" I nodded, \"those fucking pricks. But everything's okay now.\" I squeezed her. \n\nShe snuggled close. Her warmth radiated through the soft flannel of the nightgown. She smelled feminine and lovely. I didn't mean to, but for the second time we fell asleep together.\n\n~~~~ \n\nAmy was still pressed to my side in the morning, her arm and a bare leg draped across me. Her nightgown had ridden up during the night and my hand rested on her smooth bare bum. No underwear.\n\nWithout thinking, I stroked the smooth curve of her ass. Amy murmured, pushing her bare pussy against my pajama-clad leg.\n\nHow tempting to stay like that all morning\u2014holding her, stroking her, comforting her\u2014but I knew what would happen. I extricated myself, careful not to wake her, and got ready for the day.\n\nIt took until noon to reach Katherine to tell her what happened.\n\n\"What kind of idiot does that?\" she said. \"Thank God Amy wasn't hurt. It must have scared her senseless. Did you calm her down?\"\n\nI hesitated before telling her I held Amy all night.\n\n\"That's sweet, Ben. I love when you hold me.\" There were voices in the background. \"Look, I have another meeting now. Take care of each other.\"\n\nThat night I got into bed looking forward to some self-relief. I hadn't come since the night before last, a record for me.\n\nAmy appeared in the doorway, again wearing that shapeless bag of a nightgown.\n\n\"Please?\"\n\n\"Amy, they put the laminate on today. There won't be any more rocks through your window.\"\n\nShe just stood clutching the neck of her nightgown, eyes pleading.\n\nKate didn't seem to mind, so how could I refuse? With a sigh, I gestured for Amy to come in. She skipped into the room and slid beside me, pulling my arm around her.\n\nI hated how much I loved holding her. I resolved it would be the last time. The next night she would have to sleep in her own bed. ",
        "The next evening, we cooked together as usual. Amy was lively, chatty and wonderful, wearing a tight top and yoga pants that clung like paint to every curve.\n\nAfter dinner I worked in the study until, exhausted, I dragged myself to bed. Amy appeared in the doorway again, timid and needy. I couldn't find the words or the will to refuse her.\n\nThe pattern repeated the following night and the next: cook, talk, work, and then cuddle all night.\n\nCommunications with Kate consisted mostly of unanswered texts and left voice mails: she was in a meeting, she was in transit, she was signing books or giving an interview.\n\nOne night I woke in blackness, spooned behind Amy as she held my hand to her covered breast. Again her nightgown had ridden to her waist. She held my other hand against her bare tummy, low enough to feel her sparse pussy hair with my fingertips. Did she ever wear underwear? I realized I was rock hard, and poking her through my pajama bottoms. Instinctively, I pushed forward. Amy pushed back, cooing faintly.\n\nIt would have been easy to free my dick and slide into her. The thought made me buck into her and Amy again pushed back, clutching me tighter to her breast and pushing my other hand further down. Now I was touching the lips of her pussy. Amy rocked her hips back against my hardness, then forward against my fingers. I could feel the heat between her legs and after a few more thrusts, slickness on my fingertips.\n\nShe couldn't be awake. It was just the natural reaction of a young woman in her prime.\n\nGently, I pulled my hand from between Amy's legs and rolled to the other side of the bed. The scent of her arousal was on my fingers. I wondered if I could quietly get myself off beside her without waking her, but eventually I calmed enough to fall asleep.\n\n~~~~\n\nEvery day, work drove me to the point of exhaustion and every night Amy drove me to the edge of temptation. I had no time alone for self-relief, and the need clawing in me was tearing away all self-control.\n\nFriday night I lay in bed waiting for Amy to appear, rehearsing how to tell her it was time she slept in her room, convincing myself I had to.\n\nAmy's bedroom door clicked shut, and after half an hour it became clear she was staying in there. I was both relieved and deeply disappointed.\n\nFinally\u2014time alone. I stripped naked to take care of myself. Amy was all I could think about as I raced for relief: her smile, her energy, the feel of her nestled beside me, her scent, the vision of her naked in her room that night...\n\nI was desperate to come. I needed to come, not for pleasure but to quell the relentless gnawing lust threatening to destroy everything. I tried, but threaded through my fantasies of Amy were guilt and shame. How could I think of her that way? Think of Kate in her prime. Think of her perky, flirty friend Kirsten. Think of anyone but the young woman across the hall who trusted me.\n\nPoisoned by shame, I couldn't get off. I gave up. I slept\u2014frustrated, conflicted and hornier than ever.\n\n~~~~ \n\nWarm and relaxed in the darkness, I dreamed Kate was naked beside me, stroking me, getting me hard. How I had missed her. How I needed her.\n\nShe kissed me, and our hands roamed over each other. It was the Kate I had married, when her sexual fires still burned... horny, excited, needy. When I worked my way on top of her, she hugged me and spread her legs in welcome. \n\nThen, in the way of dreams, Katherine's lean body transformed into Amy's firm curves. I stroked her face and nuzzled her neck, drawing little coos and \"mmms.\" Amy's breathing became as excited as mine. Reaching between us, I found her slick and ready. \n\nI rutted against her eagerly. It was okay\u2014I would only fuck her a little. No one would mind. \n\nI pushed and slipped just past the tightness of her opening.\n\n\"Yessss...\"\n\nIt wasn't a dream. Amy was under me, hips rising, legs hooking behind mine, trying to force me into her all the way.\n\nNo! She couldn't want this. Fuck a guy more than twice her age? Absurd. She must think she owes it to me... this is some misguided way to thank me. It's not like she had great role models growing up.\n\nI would not exploit her. Fighting every instinct, I rolled off and reached for the light.\n\nAmy lay blinking in the brightness, skin flushed, with her lovely breasts rising and falling.\n\n\"What's wrong? Please... it's okay.\"\n\n\"It is not okay! You have to get out of here. You don't know what you're doing. Go back to your room.\"\n\n\"Ben, please...\"\n\n\"GET THE FUCK BACK TO YOUR ROOM!\"\n\nI shoved her away. Amy gasped in surprise. I pushed her again with arm and leg, far enough that she fell out onto the floor. Shocked, she stood and, seeing my anger, fled to her room.\n\n~~~~ \n\nI sat on the edge of the bed with head in hands, mind buzzing. I had encouraged her. I should never have let her get into bed with me in the first place.\n\nSobs came from Amy's room.\n\nGreat. Why did I yell? Why did I shove her? She had been through enough in her life. She was only doing what she thought I wanted. \n\nI grabbed a robe.\n\n\"Amy? Can I come in?\"\n\nShe sat crying, huddled against the wall in the same place as when the window broke, wearing that ugly nightgown. I sat beside her, trying to think of what to say.\n\n\"Sorry, Amy. I shouldn't have yelled.\"\n\n\"I'm sorry!\" she wailed.\n\n\"It's okay Amy. I'm not angry. But sex isn't a reward.\"\n\nShe wiped an eye and looked at me. \"A... you think I was rewarding you?\"\n\n\"Of course. Look, I understand. It's just that\u2014\"\n\n\"You don't understand at all! Reward you? That would make me a whore. I'm not my mother, you know.\"\n\n\"No, of course you aren't! So why\u2014\"\n\n\"I want to. I... I need to.\"\n\n\"Get real, Amy. You're beautiful. Wonderful. Guys must be desperate to be with you. You don't want to sleep with someone old enough to be your dad.\"\n\n\"The good guys are all either gay, timid, or taken. You're...\" She took a breath. \"I've had a crush on you since forever, you know.\"\n\n\"Oh, come on...\"\n\n\"Why not? You're hot. In shape. Always know what to do. A few years ago, when you started going gray around the temples... holy shit. I had all these fantasies.\"\n\n\"About me? That's ridiculous.\"\n\n\"Well, I did. Like one where Katherine gets abducted by aliens or something and you need me to move in to do your yard work, to cook, clean. You'd fall in love, we'd make love constantly and make lots of beautiful babies.\"\n\n\"God, Amy...\"\n\n\"I know, I know... stupid girl fantasies, right? And why would a guy as rich and perfect as you ever want a penniless girl with a crack whore mom? But then I move in here... you treat me like an honored guest, like a friend. Show me how to cook. I rush home every day so I can cook with you. It's my favorite time.\"\n\n\"Mine too, Amy. But\u2014\"\n\n\"Shush! Before I moved in, you treated me like a kid. After, you started looking at me like a woman.\"\n\n\"Oh,\" I said, chagrined. \"Yeah. Sorry. I've tried not to be creepy.\"\n\n\"Are you kidding? The way you look at me is... loving. Longing. But I didn't dare touch you. So I wondered maybe with a little encouragement you'd... you know.\"\n\nI said, \"That's why you've been acting all flirty? And why you started getting into bed with me?\"\n\nAmy looked sheepish. \"Well... I tried flirting. I sure suck at it. Even when I went overboard and stripped off that night, you just left. I cried that night. And the next. I felt so ugly. So useless.\"\n\nI grasped her hand. \"It took all my strength not to get into bed with you that night. And your flirting has driven me crazy.\"\n\nAmy fixed me with her damp eyes and smiled. \"Really?\"\n\n\"Really.\"\n\nShe continued: \"When those assholes broke the window, I just couldn't stay in my room. Couldn't be alone. I felt so safe with you that night. Loved. Never thought you'd let me get in bed with you again, but every night you did. It was heaven.\"\n\n\"So why didn't you come in tonight?\"\n\nAmy gestured to her desk with its tools and materials. \"I've been making a pendant. For Katherine when she gets back. I didn't realize it got so late. Then when I got in with you, you were naked. Like you were waiting for me. I couldn't resist... I stripped off too. Then things started happening, you know? I thought you wanted me to. I'm sorry!\"\n\nShe started crying again, so I put my arm around her. I had plenty of experience holding crying women, but always because I'd done something terrible. Amy was crying because I refused to do something terrible.\n\n\"Amy,\" I said, \"You're beautiful. Wonderful. You should be with guys your own age.\"\n\nShe dried her face against the shoulder of her nightgown. \"Guys my age are assholes! Or taken.\" She looked up at me. \"We can never have a relationship. I know that. It can't be forever. But for right now? If it's just sex?\"\n\n\"Amy, I'm married. We can't.\"\n\n\"Katherine wouldn't mind.\"\n\n\"WHAT? Of course she'd mind.\"\n\n\"I heard her, you know. Talking to her friend. About finding someone for you. Suggested her friend should volunteer. They were joking, but it was one of those ha-ha only serious kinds of conversations, you know? Then I knew the rumors were true.\"\n\n\"Uh, rumors?\"\n\n\"That Katherine hates sex and you're some kind of super sex machine. That's been the story around town for years.\"\n\nDave. He was the only one I ever confided in about Kate and me. I was going to kill that blabbing son of a bitch.\n\nI said, \"Don't listen to rumors, Amy. It's not really like that.\"\n\n\"Yeah. People exaggerate. But it's something like that, isn't it? So if Katherine's okay, why can't we... you know... fool around?\" She looked at me. \"People help each other. It's what they do, remember?\n\n\"God, Amy! You don't help people with sex. And you don't want to be some old guy's fuck toy. You deserve so much better. Besides, you don't know what I'm like. Back in college, I hurt people. Women. I lose control.\"\n\nAmy studied my face for a moment, then shook her head. \"No. I know guys. Especially that kind of guy. You would never hurt me.\" She flashed a naughty look. \"I could, you know, start as your fuck toy. That would be fun. Then you could promote me to mistress. But not sugar baby. That's disgusting.\"\n\nI covered my eyes, shaking my head. She was relentless as always, but this time I had to refuse. How could I make it clear? Make it right? But my head felt like wool. I was a jumbled, exhausted mess. I had no words.\n\nAmy sat back against the wall and slumped against me, holding my hands in hers. We sat on the floor for a long while in silence\u2014conflicted and worn out.\n\nSuddenly, she stood and, taking a breath, assumed her famous \"salesman\" posture.\n\n\"Mr. L,\" she said with an earnest expression, \"as my very, very favorite customer, I'd like to present an exclusive offer. For a limited time, you can have... me.\" She drew her nightgown over her head and tossed it on a chair. \n\nShe slid her hands along her sides and dipped, knees together, like a showgirl. \n\n\"Your very own live-in honey on the side,\" she said. \"24 hours a day. No contract, no commitment. If unsatisfied, cancel any time...\"\n\nShe turned her back to me. With a lift of her heel she looked over her shoulder with an eyebrow raised, did a saucy shrug with one shoulder and waggled her ass. \n\nAmy might have been trying to be funny, but to my horny and exhausted brain it seemed like a taunt, a tease, a dare.\n\nWith a growl, I leaped up and frog-marched her to her bed. She giggled when I threw her down on her front, then looked back at me with a grin. Her expression changed to shock when she saw my face. I pinned her to the bed by the back of her neck.\n\nI half-laid on her and hissed \"You never give up, do you? Think you can tease me? Think you can sell me?\" She squirmed, but I held her naked body down. \"I've nearly gone crazy trying not to fuck your brains out. Is that what you want? Is that what you really want?\"\n\n\"Yes! But I... gaaahh...\"\n\nIn a flash I parted my robe, forced her legs apart and drove into her. \n\nAmy gurgled, eyes wide as I hilted myself in her. She was sopping wet and very snug.\n\nI withdrew, and still holding her neck, began fucking her with forceful strokes.\n\nAmy huffed with each penetration, clutching the bed sheets. I rose up, shifting my hand from her neck to between her shoulder blades so I could see her better and get deeper. The contour of her back, her narrow waist spreading to that wonderful ass, the sight of my cock stretching her open all drove my lust higher. \n\nShe angled her hips to allow me deeper, groaning and making little squeaks and mewls as I took her. Her pussy clasped and gripped my shaft each time I withdrew as if desperate to keep me in her forever.\n\nMy strokes became more erratic and forceful as the need to come approached. Amy started struggling, but I kept her down.\n\n\"You're not... going anywhere,\" I growled with each stroke. \"We're just... getting... started.\"\n\n\"Good,\" she panted. \"Just let me turn over. I want to see you while we fuck.\"\n\nWith a growl, I lifted myself and flipped her over. Amy lay with legs splayed, breathing hard, skin flushed. She looked at my rampant dick; slick with her wetness, then looked into my eyes and reached up to pull me onto her.\n\nWe both groaned as I entered her again.\n\nNow we were face-to-face. Amy was looking into my eyes, not with fear but with joy, her face radiant. My anger drained as my heart surged. She was so lovely. So wonderful. No, I couldn't hurt her. I would never hurt her.\n\nI realized then that whatever I was in college, I wasn't anymore. Back then I was lost in myself, using my partners for my own needs. That night looking into Amy's eyes, I found myself lost in her.\n\nAmy wrapped her arms around me, hooked her legs behind mine and bucked, seating me deep inside her. \n\n\"You're fucking me,\" she breathed. \"You're finally fucking me.\" She took a deep breath then let it out slowly. She wriggled and looked into my eyes. \"Don't stop this time. Please.\"\n\nI withdrew slowly, feeling her passage resist and cling wonderfully until poised again at her opening I pushed in just as slow before taking her more urgently.\n\nThe beauty of her expressions as we fucked awed me\u2014her little gasps and squeaks, her eyebrows lifting in elation each time I pushed in, that delicate smile. I wanted to give her every pleasure, make her come a hundred times, show how much she was loved, how much she was desired.\n\nWe found a rhythm together and our raw fucking slowly transformed into a primal ballet of mutual need, responding to each other's needs in harmony. Amy moaned and sighed, panting and groaning, grinding against me, urging me on.\n\nWe mated until sweat coated us, and the room was heavy with the smell of sex. When I hit my limit, Amy gasped as I pressed into her and began blasting her with days of pent-up cum. Never had I come so hard or for so long. Pulse after pulse flooded her, filling her to overflowing. My muscles went slack, and I fell on her as the world receded into the white bliss of release.\n\nWhen I recovered enough to focus, Amy was wide-eyed and breathing hard. A tear streaked from one eye and I felt a chill. Had I done it again? Had I gone too far?\n\nThen she smiled. \"I've never... uh, wow. What WAS that?\"\n\n\"Having sex?\"\n\n\"No. I've had sex. That was... did we...\" She blinked. \"I think I've been made love to for the first time.\" She kissed me hungrily. \"Even my stupid fantasies were never like that.\" She wriggled. \"Mmmm. You're still hard!\"\n\nShe rolled us over until she was straddling me. Amy speared me with a dark look then licked her lip. \n\n\"More,\" she breathed. It wasn't a question. \n\nShe braced on my chest and squirmed, shifting me inside her, working me deeper. Then she began riding\u2014rising then lowering herself, then grinding, huffing and moaning.\n\nI was hard but didn't need to come. Gripping her hips, I lay back, marveling at the sight. Amy arched her back, breasts jutting as her head lolled back with heavy eyes, a perfect vision of feminine lust.\n\nSoon she was panting, lost in her need as she drove me into her body, then ground and slid only to lift then impale herself again. I watched her working herself to orgasm, bucking up when I needed to, guiding her by her hips. \n\nAfter many minutes her motion turned urgent, forceful. Short grunts and gasps came from her as she ground against me. I reached up to hold her lovely breasts then her face lit angelically and she came\u2014mouth open, eyes fluttering. Feeling her rhythmic clasping inside, I bucked up once, twice, then flooded her a second time.\n\n~~~~\n\nThe clock said 6:00am. Amy lay cuddled to my side, smiling up at me, eyes shining in the early light.\n\nVaguely I remembered waking during the night to Amy stroking me to hardness, then sliding onto her welcoming body to take her again\u2014sleepy, languid lovemaking in the darkness with the feel of her, her gasps and the scent of her driving me on.\n\nCold realization spread through me. After fifteen years of monogamy, I had committed adultery. Far worse, I had taken advantage of Amy. I still couldn't believe she wanted me, despite all she said.\n\n\"Amy,\" I said, \"listen...\"\n\n\"Ready to go again?\" she grinned, tracing a finger on my chest. \"We could do it in the shower next. Or we can make breakfast then you could bend me over the table, then...\"\n\n\"God, Amy. We have to\u2014\"\n\nFrom across the hall, my phone on the bedside table started ringing. I leaped from the bed to grab it.\n\n\"Six rings to answer?\" Kate asked as I stood naked beside our marriage bed. \"Must have been a rough week.\"\n\nI recounted the work week and the demanding new client, then Amy slipped into the room and snaked her arms around me from behind, her naked body pressed against me.\n\n\"Are you and Amy taking care of each other?\" said Kate. Even through the phone I could tell she was grinning, though I wasn't sure what that meant.\n\nAmy walked in front of me and slid to her knees.\n\n\"Sure,\" I said, desperately waving Amy away. \"Amy cooked a fantastic dinner one night by herself. And I still can't get her to stop... uhhhh... trying to do everything around here.\"\n\nAmy had taken my overworked dick into her mouth, looking up with innocent eyes.\n\n\"She's determined to help,\" said Kate, \"with everything she can, apparently. Including letting you fuck her.\"\n\n\"Wha... what? How... why do you say that?\"\n\nAmy worked away on my dick, sucking gently and caressing my balls. I felt myself rising. It was a distraction I did not need.\n\n\"Oh, Ben. After all these years, I know how you sound when you're upset. When something's up. I've seen how she looks at you, and you trying so hard not to look at her. And taking so long to answer? You're never an inch from your phone. You were in her room, weren't you? You were fucking her.\"\n\nRegret and shame settled like icy lead. I stammered, heart pounding. Amy saw my face and stopped her playful ministrations.\n\nDistantly, I heard Kate saying, \"Ben? Ben! Take a breath.\"\n\n\"Kate, I'm sorry. So very s\u2014\"\n\nShe said, \"Relax! I thought maybe this might happen. Just never thought it would be so soon, with how old-fashioned you are. I'm impressed.\"\n\n\"God, Kate. You sound happy about it.\"\n\nThere was a pause. \"Happy would be if I could give you everything you need, like you give me. But I can't. Not this. I've seen you getting more unsatisfied. Noticing women more. Jerking off more when you think I'm asleep. So if it's going to happen, well... Amy adores you. And not as a father figure. But are you sure this is what she really wants?\"\n\nAmy stood, then crawled onto the bed on hands and knees. She looked back mischievously, pussy slick with readiness.\n\n\"Oh, I'm pretty sure.\" \n\nKate continued: \"Well then, make her happy. You've never been able to say no to her, anyway. Look, we'll all talk when I get back, okay? Set some rules. Figure out if this can work. Until then, show her what a great lover you are. Fuck her senseless. But Ben?\"",
        "\"Uh?\" I croaked, mesmerized as Amy wiggled her bum in invitation.\n\n\"When I get home, I want to watch.\""
    ],
    "authorname": "SyleusSnow",
    "tags": [
        "19-year-old",
        "adultery",
        "older man",
        "reluctance",
        "romantic",
        "younger woman",
        "romance",
        "mature"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/on-the-side-1"
}
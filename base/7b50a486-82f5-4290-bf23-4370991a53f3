{
    "title": "Arcanum - Of Steamwork and Magic Ch. 10",
    "pages": [
        "A momentary frisson of fear ran along my spine as I sprawled in the small tent, my arms lashed above my head with leather bindings and my eyes covered with a thick binding of cloth. I wriggled upon a fur mattress and strained my ears, but all I could hear was the heavy footfalls of Sally Mead Mug as she walked about me in the small tent. I swore I could hear the sound of her palms rasping together as she regarded me. I tried to remain calm and collected - but my mind was inevitably drawn to the fact I was completely nude. My clothing had been cut from my body, leaving every inch of my athletic, green body on display for the amorous half-ogre and there seemed to be very little I could do about it. \n\n\"Sally, uh,\" I said, but she cut me off with a quiet coo. \n\n\"Shh...\" Her finger pressed to my lips. The alarming fact that she was close enough for such an intimate touch sent a crawling sensation through my belly, and made my member twitch ever so slightly. I flushed, angrily, then tossed my head a bit, trying to dislodge the blindfold that wrapped about my eyes. It didn't work. \n\nAnd then... \n\nSalvation. \n\nThe tent flap slipped open and I heard a voice I had always thought was quite beautiful, but never before realized quite how beautiful it was: Virginia, coming to my rescue yet again. \"What are you doing, Mead Mug?\" \n\nSally laughed. \"He's too sumptitious to untie -hic- and I ain't gonna lie and says he's not, savvy?\" Her palm pressed to my chest, and I felt her fingers draw the lines of my muscles, tracing them gently. The touch sent goosebumps crackling along my body and arched my spine a fraction. I gulped, then heard more footsteps and, ah, of course. The sound of Maggie's quiet gasp and Gillian whistling low and steady. I had very little in the way of modesty or shame - not after the life I had led - but this was pushing against the edge of even my tolerances. \n\nHere I was, bound, naked, and blindfolded, and being ogled by four women of four different races and four different backgrounds like some kind of delicacy. I supposed I should have been flattered. And a part of me was enjoying the attention - my cock had grown even harder, and was now laying across my belly, as if to draw attention to my length and girth. I squirmed, trying to subtly wiggle myself in such a way as to get my member between my thighs, where I might keep it more concealed. The end result, I fear, was less than efficacious in anything but inflaming the passions of my spectators - as the only noise that came from them for a few moments was Maggie whispering: \"By Alberich.\" \n\nI stopped my wiggling, my cheeks now nearly black with my blush. I sagged against my restraints and said: \"I'm rather glad that you are all all right. The ship's fine, right?\" \n\nSilence. \n\nSlowly, Virginia said: \"Yeah...s'...fine...\" I clenched my jaw, trying to control my heart beat. Maybe if I calmed myself, my member would stop being so...engorged and become significantly less distracting. I simply needed to- \n\n\"You fit that inside you?\" Gillian broke my concentration. \n\nVirginia let out a loud meep noise. Then, sounding as it she was biting her lower lip, she said: \"Yeah...\" \n\nGillian chuckled, quietly, while Maggie asked. \"Did it hurt?\" \n\n\"A tiny bit. At first,\" Virginia said. \"But, uh...uh, uh, why are we talking about this!? Sally, untie him!\" \n\nThank the gods, I thought. \n\nSally chuckled. \"Vir- hic- ginny, you, you see...\" I heard the sound of her butt thumping to the floor dangerously close to my head. Her palm went back to stroking my chest and I felt her lean up against the side of my arm. The fullness of one of her breasts pressed against one of my knuckles and I squirmed ever so slightly, the leather straps straining and creaking against the tension I was placing them under. But, alas, they were well made. And they did not break. And Sally kept talking. \"Back in Coldbath-\" \n\n\"You went to Coldbath prison?\" Gillian asked, sounding shocked. \n\n\"Once or twice!\" Sally scoffed it off. \"Now, -hic- we's had a saying in Coldbath: What happens in ta yard stays in ta yard, see?\" \n\nThere was a long moment of silence. \n\nOh boy, I thought. \n\n\"Uh...\" Maggie sounded as if she had shifted closer. Her voice was quite soft. \"W-Where's all his hair?\" I could practically feel her eyes on my belly, on my...my member twitched at the thought of Maggie looking at the firmness of my balls, nestled between my legs. \n\n\"I, uh, don't know...\" Virginia admitted. \"I rather like it.\" \n\nI gaped, too stunned to even respond. But then another palm pressed to me - a rough one, calloused by long, hard work. Maggie's hand. She was slowly, tentatively caressing my flank, feeling the smoothness of my side. I remained perfectly still and swore I heard Virginia mutter 'oh to all the bloodiest hells with it' and then heard the tent flap swinging shut. Knees pressed to the ground around me and my cock was so achingly hard it nearly hurt. My mind said that this was entirely...completely...this was... \n\nA warm, unfamiliar hand closed about my member. Sally chuckled. \"You've been -hic- driving all us ladies crazy, boss...\" Her voice was hot in my ear as she leaned forward. \"N' now, we get ta have our fun.\" \n\n\"Mmm...\" Gillian's cultured, educated voice came at the same time warm, warm breath started to caress along my cock. My back tightened and I heard Virginia's nervous chuckle. Her hands - familiar to me - were caressing my chest, circling one of my nipples. \n\n\"He, uh, likes it when you tease the tip a little,\" Virginia whispered. \n\nA slightly rough tongue slid slowly around the tip of my cock. I had known it was coming - but knowing that it would happen without being able to see the moment until it was upon me left me feeling like I had taken a step on a darkened stairwell, unaware that I had reached the final stair. Now, I was stumbling. Flailing. My mouth opened into a soft moan as Gillian's tongue circled the head of my shaft. I could picture the gorgeous half-orcess leaning her head forward while she started to take my member into her mouth. I could feel the faint pressure of her small tusks, and I could feel her long, kinky hair teasing along my belly muscles. \n\n\"That's how you do it,\" Virginia said. \n\n\"H-How...\" Maggie subsided into silence. \n\nSally laughed. \"Oh, right, -hic- you're the virgin.\" \n\n\"I-I-I-I-\" Maggie spluttered, sounding for all the world like a bubbling tea kettle. I'd have laughed, if I wasn't straining to not thrust into Gillian's slowly enveloping mouth. She was moving with the caution of someone who had never done something like this before, and the faint gagging noises that escaped around the slurping and moaning and sucking indicated that if I was anything but perfectly still, I might cause quite an upset. Finally, Maggie seemed to quietly succumb to some internal pressure, her voice subsiding. Then, her voice so soft I nearly could not hear her over the sound of Gillian working my shaft, Maggie let the single word escape her lips: \"Yes.\" \n\n\"Heh. Virginia! How's the cutie at -hic- eatin' carpet?\" \n\nVirginia sucked in a breath. Her hand was still stroking my chest. \n\n\"He hasn't. On me. Yet.\" Virginia admitted. My cheeks flared and I ducked my chin forward. \"But I've seen him, uh...s-serving other women.\" She sounded faintly amused. \n\n\"You watch?\" Maggie sounded shocked. The feeling of Gillian's lips sliding down my cock paused, then reversed. She pulled all the way back and my cock immediately tingled all over - the feeling of the warm air of the tent brushing against spittle, cooling it, cooling me, was quite intense. I squirmed and moaned as Gillian coughed quietly, gasped again, then managed to get her own words out. \n\n\"You watch?\" she asked, echoing Maggie's shock and incredulity. \n\n\"...yes...\" Virginia's finger circled around my nipple faster and faster and faster. \"Kinda been a bit of a voyeur since before I joined the Panarii. Didn't, uh, get many chances. Until I met the Living One.\" Her voice had become a husky purr. \n\n\"So, is he good?\" Sally sounded like she was grinning her head off. Her hand had cupped my cheek. \n\n\"Virginia...\" I rumbled, my voice tight. Warning. \n\n\"Godlike,\" Virginia crooned. \n\nMaggie let out a squeak. I only figured out what had happened later, after I had time to reconstruct the scene in my mind. But once I had time to think, the image was as clear as if I had seen it. The faint rustling sound - that was Maggie's clothing being tugged aside. The grunt? Sally, taking the weight of the dwarfess into her own rather impressive strength. And then my face was covered with muscular weight and smooth skin and the slightly tangy taste of a pussy pressing to my lips. Maggie let out a series of dwarven curses I had never heard before in my life and my tongue darted out, sliding along her sex. I knew that I should have been obstinate...but... \n\nFuck it. \n\nThis was happening - and it was far from the worst thing that had happened in my life. A rather large part of me was rather impressed with their gumption. And another part more than a bit delighted at the eagerness each woman was showing, in their own way. And so, I simply allowed the decadence of the moment to carry me - carrying with it that thought that Sally had oh so cleverly provided for us: What happens on the Isle of Despair? \n\nIt stays there. \n\nMy tongue delved into the first dwarven pussy I had ever tasted. And I found that dwarven women's taste was stronger than that of a human, and definitely more...earthy. That was the only word I could think of for the exotic flavor that slid along my tongue as I lapped blindly at Maggie's sex. My tongue found her clit with every long movement, the tip flicking against her eager pearl, and the sounds that escaped from Maggie were somewhere between shocked and delighted. \"O-Oh! Oh bugger!\" She groaned. \"I didn't...oh yes!\" Her strong, blacksmith hands gripped my hair, and I felt her almost gripping onto my blindfold in her excitement. She started to grind my face into her sex, her thighs and her hips moving as she gasped and moaned. \n\n\"Heh.\" Sally chuckled. Her voice was hot in my ear as Gillian, who had taken a few moments to simply stroke my cock slowly with her hands, building up her courage to once more attempt to slide me down her throat, started to lick the tip of my cock again. \"You like ruinin that, -hic-, girlie for her future husband?\" \n\nI made a muffled noise of assent as my tongue thrust in deep. My fingers ached to plunge into a girl's pussy, to fondle some breasts. But I was restrained. Held back. And needing to rely upon my tongue and my lips alone was adding an extra...challenge. Gillian, meanwhile, had managed to get half of my cock into her mouth. And a second set of lips and another tongue - this one softer and more gentle - was teasing the line of my belly, getting closer and closer to my cock. Warm weight was sprawled across my body. Virginia's weight. \n\nHer lips and Gillian's lips met as Gillian drew her mouth back to draw a breath. Both of them were so eager to suck on my member that they were nearly committing sapphism - not that there were any constables to lock them up for breaking the law. My eyes closed behind my blindfold as I heard Maggie's voice growing hotter and faster. She was arching her back, bouncing atop me as she cried out in bliss. \"Yes! Yes! Yes! Yes! Oh Rayburn!\" Quite suddenly, the pressure of her pussy against my face went from intense to all encompassing and I realized that Maggie had begun to sag atop me. Soon, most if not all of her weight was pressing to my face. This quite pleasant smothering was combined with the pressure of lips - the tusks making it quite clear that it was Gillian - pressing down against my pelvis. I could hear Virginia's quiet croon, and heard Gillian's shocked, almost choked moan. The vibration through my cock was far too much. My back arched and I drove up into Gillian's mouth, shuddering as I spurted into her again and again and again. I felt her drink me, even as Sally lifted Maggie off my face, the dwarf still mewling quietly. \n\n\"There we go...\" Sally rumbled. \n\nGillian's lips slipped off my cock, leaving my member sagging in the air, glistening and wet and spent. I groaned, my whole body glittering as if I had been running for quite some time. As I licked my lips clean, I managed to get my breath under control. I spoke, despite the white flashing behind my eyelids. \"Satiated, ladies?\" \n\n\"Oh, fuck no!\" Sally said. \"Do the thing, Ginny!\" \n\n\"Huh?\" Virginia herself sounded a bit dazed. My sharp ears picked up a faint slick slick slick noise. Was Virginia pleasuring herself? The thought almost made my member surge to life again - but while the mind was willing and the spirit eager, my flesh had been through quite a lot in the past two days. I'd been stricken with amnesia, beaten up by several ruffians, set to marching through a jungle, and seduced two very fine women - both of which needed my help quite desperately, now that I considered it. \n\nIn a word, I was spent. \n\n\"You know...\" Sally's voice became playful, and she used her admittedly limited vocal range to try and imitate the sound of Virginia's healing magic. \n\n\"That won't restore him that way!\" Virginia exclaimed. \n\n\"Right,\" Gillian said, quietly, her voice husky. \n\n\"...I think,\" Virginia said a moment later. \n\nMy head jerked up. \n\n\"Well, try it -hic- then!\" Sally said, jovially. I felt two large, firm breasts mash against my shoulder, and a broad face press to my chest. Maggie, nuzzling me. Her rather incredible density was oddly comforting as Virginia touched my body. Once again, I felt her magic crackle. Then fizzle, dissolving against my technological aptitude. Virginia made a quiet growling noise at the back of her throat. Magic hit me again and again, fizzling and fizzling and- \n\nAnd then energy surged into my body and my cock slapped against Virginia's wrist, so rapidly did it come back to full hardness. \n\n\"Cheers!\" Sally said. \"Who'z first?\" \n\n\"Well,\" Gillian said, sounding as if she was wiping her face off - her voice growing muffled, then clear intermittently. \"I am the only half-orcess here. And that's a...very fine...\" \n\n\"Cock?\" Sally suggested. \n\nGillian's incredibly posh accent cracked. \"Y-Yah.\" \n\n\"Maggie's the virgin, though,\" Sally said, sounding like she was pondering something. Maggie's lips, which were pressed to the space above my left nipple, paused in their slow exploration of my green chest. \n\n\"Mmm?\" she asked. \"Oh, nay. A dwarf lass never gives up her virginity for anyone but a dwarf!\" She paused. \"T-Technically, a dwarf lass doesn't even talk to non-dwarves.\" She nuzzled against my chest, then licked my skin with a tiny little movement of her tongue. It was very soft, very tentative. I squirmed a bit and frowned ever so slightly as Gillian shot back. \n\n\"So, maybe you shouldn't get to ride him first,\" she said, her nose bumping against my cock, her hands cradling my hardness again. \n\n\"Ladies!\" Virginia said, sounding shocked. \"Do you think maybe we should, oh, I don't know, ask Rayburn what he prefers?\" \n\n\"Nah,\" Sally said. \"Guys like being tied up and ridden.\" She paused, then belched loudly. \"At least, all the ones I've tied up n' ridden have!\" She guffawed. An icy silence followed, and into that silence, I spoke. \n\n\"Thank you, Virginia,\" I said. \n\n\"S-Sorry sir,\" she said, sounding a bit abashed, as if she had realized just how far she had allowed herself to be carried. \n\n\"And if you are going to ask me my opinions on this little escapade for the first time,\" I said, my voice mock serious - though the hardest thing was not my member. No. It was keeping myself from smiling broadly. I kept my face serious as I continued to speak: \"Then you should know that if you had simply asked me if I wanted to be tied up, blind folded, and seduced by four incredibly beautiful women...I'd have said no.\" I grinned, ever so slightly, letting the mask slip. \"Which is why I must thank you all for forcing the issue. As it was.\" \n\nI heard every sigh of relief - and felt at least half of them against my skin. \n\n\"Now,\" I said. \"As it pertains to who gets to ride me next...\" I paused. \"Maggie does seem to have the most noble cause.\" \n\n\"Whaaat!?\" Maggie squaked. \n\nI grinned. \"No one should be consigned to marriage to a dwarf without at least having sex for pleasure once in their life,\" I said, casually. Maggie slapped my belly, just enough anger in her hand to make it sting a bit. \n\n\"Oi! Those are me-\" she started, then yelped. I could hear Sally shifting and could feel the weight of Maggie's body sliding off my chest. I ducked my head forward, letting my chin rest against my chest as Sally handled Maggie's body, pressing the dwarf down onto my lap. Maggie squirmed a bit, which meant that her sex was brought against my cock and ground against it. The more she wriggled, the more her folds slipped against my cock, and the more her wriggling became entirely desultory. Despite her best attempts, the young dwarfess started to let out tiny, husky moans. Her sex stopped grinding against me entirely by accident, and began to slip up and down my cock with little rolling motions of her hips. Her palms pressed to my chest and I heard Sally rumble quietly. \n\n\"Want me to let ya go, Maggie?\" \n\n\"Mmm...\" Maggie moaned - but I felt her weight remain constant. I wondered how Sally was holding her. Had she placed her hands upon Maggie's shoulders, to ensure that she would remain rooted in her spot? Whatever the answer was, it was keeping Maggie in place. This was good, as it meant that she would continue to grind against me, her sex so incredibly moist that she was nearly frictionless. But it was also unfortunate, as it prevented her from moving herself to a position where I might plunder her sex, and take her virginity. \n\nGods... \n\nWhy was the thought of taking a woman's virginity always so appealing to the most base, regressive portion of my mind? I wondered if other men felt such an impulse, or if it was purely an aspect of my orcish blood? \n\n\"Y-You look quite ready, Maggie,\" Virginia said, her voice husky. \n\n\"Indubitably,\" Gillian added, a slight hitch to her voice. Over the slippery noise of Maggie's sex and the quiet groans escaping from her lips, I could hear Gillian's own fingers sliding into her sex. She was enjoying the show, it seemed. \n\nMaggie's breath caught. \"W-Well, then! Get it over with!\" she said, her voice trying to sound gruff, trying to conceal the girlish excitement that this youth of a mere two centuries was feeling at the idea of finally surrendering her maidenhead. The sudden shift in weight made me think that Sally had released Maggie's shoulders, and Maggie tentatively rose up and off my member. My cock lifted, but it slipped against her sex, teasing her but not settling into place for penetration. Before Maggie could lift her palms off my chest, a dainty, human hand closed around the base of my cock. \n\n\"J-Just aiming it, sir,\" Virginia said, sounding as if she was speaking to the wall, not to me. I opened my mouth to compliment her accuracy, but before I could, Maggie dropped her entire personage onto me. Maggie was quite short, being a dwarf. Maggie was also quite curvaceous, being a dwarf. This meant that her rump slapped against my thighs like a drum, and as she fell forward and mashed her breasts to my body, it felt rather remarkable, especially compared to the more petite sizes of Virginia and other women I had lain with. But what was most striking in this case was not curves nor height. ",
        "No, it was simple density. \n\nDense bones, dense muscle, dense stubbornness, all alike combined to make Maggie's thighs and my thighs meet with a meaty whump, and her breasts nearly drove the breath from my lungs. I let out a low wheeze, my arms straining against my leather binding. Maggie's face was pressed between my pectoral muscles and she breathed heavily against my skin - in a loud huff huff huff way, as if she was preparing herself for a sprint. Which did make sense, dwarves were natural sprinters. \n\n\"You okay?\" Virginia asked, her voice very soft. \n\n\"Mmmmmh!\" Maggie groaned out, then put her palms against my chest. Slowly, she levered herself up and never before did I ever hate this damn blindfold more. I strained against it mentally and physically - though there was painfully little I could do from a physical perspective. I could only imagine how she looked, with my cock filling her tight dwarven pussy, with her hair cascading around her body. Had she undone her pony tail? How did she look, once she was stripped naked? I had thought I felt belly muscles, but I couldn't see them. Were her nipples broad, were they small and delicate? How did her face look as she adjusted my girth and my length. \n\nSlowly, huskily, Maggie spoke. \n\n\"Nnnow that's right...\" she sounded faintly drunk. She lifted her hips half an inch up, her sex so tight and so wet that I nearly slipped out of her, even with only that tiny amount of clearance. Then she drove down, her thighs making an audible slapping noise. I could then feel her hair brushing along my chest, teasing me as she leaned herself forward, rocking her hips up and down, up and down, up and down. She rode me fast and she rode me hard, and the weight of her body kept me pressed down. It was all I could do but to hold onto the lashes that kept me tied up and try to not climax too quickly. Maggie's breath came in short, sharp grunts, and I swore that my cock was bumping against the entrance to her womb with every little movement. \n\nMaggie leaned forward even more. She could not reach my lips with hers. Instead, she kissed against my chest, her arms reaching forward to grip my shoulders. She dug her fingernails in, her hips rising and falling, faster and faster and faster. Her breath huffed against my chest, and she managed to get some words out. \"Albericht! Oh fucking yes!\" She mashed her face against me, moaning into me. Her sex clenched on my shaft as if it was a fist and I found myself unable to move, unable to think. My back arched and my balls tightened. Cum spurted into her womb. My cum. And from the first blast to the last, the only noise that escaped from Maggie's mouth was a high pitched, keening cry. She clung to me as if I were a life raft, and she shuddered in utter bliss. \n\nBy the time I was done emptying myself into her...my member was softening and Maggie was managing to merely breathe, as opposed to nearly hperventilate. Her breath warmed my neck and she caressed my shoulders, rubbing my green skin with her roughly textured fingers. \n\n\"...so, uh...\" Sally's voice was husky. \"Ginny.\" \n\n\"Yeah?\" Virginia sounded dazed. \n\n\"D-Do the thing, I want a turn,\" Sally whispered. \n\nMagic chimed. Fizzled. My body remained soaked with sweat, and my member remained slowly softening. But something more had happened: My wrists had become so slick with my own sweat that they were beginning to escape their bindings. I began to straighten my hands, to try and make them as narrow as I could, as magic fizzled again. I strained...and then my right hand was free. I grabbed my blindfold and yanked it off just to in time to see Virginia passing out - her magic pushed so hard that she had simply run out of energy. I caught her with one arm, awkwardly. This ended up with her joining Maggie in the sprawl across my chest. I groaned as I laid back, my left arm still pinned above my head. \n\nSally and Gillian looked at me, their eyes wide. \n\n\"Out!\" I said, pointing. \n\nSally narrowed her eyes. Then, grinning, she nodded. \"Aight, sir. Next time!\" She gave me a sloppy salute, then stood, walking out of the tent without a stitch on her body. Gillian, who was similarly nude, looked at me with wide eyes. \n\nI looked at her. Then, quietly, I asked. \"Might you get this, ah, binding off?\" \n\nGillian nodded. She scurried forward, then untied the leather binding. But as my arm was freed, she looked down at me with a speculative expression. I, meanwhile, was trying to get the women off my chest so that I might get up. I had nearly gotten my hands on them, to properly lever them off, when Gillian sprawled atop me as well, nearly completely muffling me. \n\nI should have complained, honestly. As a gentleman and a scholar, I needed to get work done, not merely laying about in indolence and decadence with multiple beautiful women laying atop me like some ancient dragon. \n\nI would get up soon, I promised myself. \n\n*** \n\nEmerging from the tent and stretching my arms allowed me, at long last, to actually get a look at the amazonian camp that I had been taken too. The habitations built here were fairly small and modest, with a look as if they were often packed up and moved with great regularity. The women who had decided that life seperate from the men of the Isle of Despair was worth all the danger and the strife they had to face out here were, uniformly, a tough looking lot. Sporting pistols, swords, bows and more, they sat about the camp fire, cooking their hunt, stood on the edges of camp keeping watch, and looked out to the ocean itself. \n\nOne of the women approached me. She was a half-orc, like me, and was dressed in simple leathers and furs, with a spear serving as a walking stick. Despite its primitive nature, I could see that it was quite a battle tested weapon, held by a woman who clearly could use it. She eyed me, and I eyed her. She was, on the whole, rather plain, with a broad face, a flat nose that looked as if it had been broken several times, and with golden brown eyes. She had only one tusk, her other looking like it had been broken off and pulled at some point in her life. \n\n\"Rayburn Cog, at your service,\" I said. \n\n\"I don't care,\" she said, her voice flat. \n\nI coughed. \"I take it you're not exactly keen on having a male about.\" \n\n\"No,\" she said, frowning. \n\nI nodded. \"Well. Then I shall be brief. I and my companions are going to return to the encampment,\" I said, jerking my thumb over my shoulder. \"We are here to find the Black Mountain dwarves, and they-\" \n\nThe woman grunted. \"Black Mountain Dwarves?\" she asked. \"There's only one dwarf here. Thorovald Two Stones.\" She spat. \"Bastard.\" \n\nI inclined my head. \"Be that as it may, I need to speak to him. But before I leave, I have to beg a question. There is a woman living in the encampment. She wishes to leave and join you.\" \n\nThe half-orc frowned. She whistled a pair of notes and a human woman jogged over. The half-orc pointed at her pistol, a rusty looking flintlock. The human handed it to her, and she tossed it to me. I caught it, blinking in a bit of bemusement. The half-orc nodded. \"Give her that. If she gets to us, she's in.\" \n\n\"I beg your pardon?\" I asked, unable to stop a mounting horror from my voice. \"There are dozens of men with muskets in that camp. She'll be outnumbered a dozen to one!\" Real anger underlined my words now. \n\nThe half-orcess sighed. Her head shook and she lowered her eyes. \"And I feel for her. But this island is not safe. Anyone who comes to us must be able to take care of herself, and to take care of others. Men have taught me this lesson well: We cannot coddle the weak.\" Her voice was flat. \"If she cannot escape, then she will at least be dead. A mercy, compared to living in that hell hole.\" \n\nI frowned, looking down at the pistol. \n\nThe half-orcess sighed. \"You're going to help her, aren't you?\" she asked. \n\nI looked up at her, lifting my eyebrows. The half-orcess rolled her eyes. \"At the very least teach her how to shoot before she comes here, male.\" She turned and started to walk away from me - towards the campfire. \n\nI shook my head -revising my opinion of the amazon's leader. It seemed it was less misandry and more a broader, more egalitarian form of pure misanthropy. Which I...suppose was an improvement? \n\nOnce I had collected my comrades and my accelerator pistol and Virginia had given me a fresh set of clothes donated by Edward Teach - who apparently was to be sailing around the island to set down anchor off the shore near the male fortification - we set out back to the male encampment. At least, I had planned to set out...but something nagged at me. It took me a little bit to figure out what it was: It struck me as I was strapping my pistol to my hip. \n\n\"Where's Dogmeat?\" I asked. \"Is he on the ship?\" \n\nVirginia shook his head. \"No...Dogmeat?\" she called out. \n\nDogmeat came scampering around the corner of one of the tents, his mangy tail wagging happily, a large chunk of meat in his jaws. His fur had the look as if he had been petted a great many times by many willing hands. I chuckled, then looked down. \"You dog,\" I murmured. Dogmeat looked up at me with his large, shockingly blue eyes. Then he wolfed down the meat, in two gulps. Once he was done, he barked, then walked up to my flank. I petted his head, smiled at Virginia, and we set out. \n\nAs I was quite lost - having been dragged somewhat off course by the amazons - we decided that it was best that we travel along the beach. This meant walking through shifting white sands, rather than through thick jungle. This had the advantage of lacking roots to catch us up and plenty of fresh breeze, but the disadvantage of being exposed entirely to the sun. \n\nEach of us bore up under it - Maggie fashioning herself a hat made of leaves and fronds, and Virginia throwing up her hood while using a frond to fan herself. Sally walked without any concerns what so ever, letting her tough skin take the sun's punishment without a wink or worry, while Gillian and I shared the same emerald enhancements. Orcs did not sunburn. We merely became more shiny. And Dogmeat padded along, his tail wagging as happily as if he was on the main street in Tarant. Happier, maybe. As we walked, we talked. I told the girls of my adventures in the Isle of Despair's pit, with Cynthia, meeting Maxine - even telling them of her true identity as the daughter of the old king of Caladon. \n\n\"You slept with her, didn't you?\" Virginia asked, puffing slightly as she walked up a small rise on the beach. \n\n\"A gentleman does not kiss and tell,\" I said, trying to sound as posh and stuff as I could. \n\nThe others laughed and I smiled. It felt strangely liberating, to now know them each intimately. It was as if a small wedge that I hadn't even felt between us had been lifted - and we were all that much more able to read one another's moods and intentions. I did not know if this would translate to other...sessions...or if this one time would be the only time, consigned to the strange detachment from what was right and proper that came on one while stranded upon an island meant for prisoners. But I resolved to not worry about it. \n\nSally, who had drawn ahead, came to another rise, then paused, shadowing her forehead with her hand. \"Fucking gods,\" she said, slowly. \n\n\"What?\" Virginia asked, hurrying to catch up, while I remained behind to make sure Maggie did not herself fall behind. Gillian, meanwhile, went up to join the others, and I distinctly heard her exclaim 'bugger me!' and that was enough to hurry me and Maggie both to the ridge. There, we saw what the others had seen, and I found myself as completely flat footed as I had ever been before. For here, laying upon the sand, was a massive, beached sea monster. \n\nIt looked like an extremely large fish, with fins, and gaping eyes, and a segmented mouth filled with sharpened teeth. Its scales were closer to segmented carapace than to smoothed fish-scales, and they interlocked over one another, allowing it to curl in on itself. It looked as if it had been here for quite some time, as it was curled up and partially buried underneath the sand, with the waves only barely licking against the broad base of its dorsal fin. However, it was only after taking in every single one of these remarkable details that I noticed the other vital thing about this vast monster. \n\nIt was a mechanical device. \n\nYes! Those carapace pieces were brass. Those eyes were broken and cracked glass, segmented with fine lines of wrought iron, like vast stained glass windows. Those fins were rotting canvas. And that great wound in the side had the curved edges of an internal explosion, with the scoring from fire and combustion, as opposed to the rotting softness of flesh. And the interior was shadowed and clearly empty, not stuffed with organs and bone. \n\n\"Remarkable,\" I whispered. \n\n\"Tarant's never made anything like that,\" Maggie said, quietly. \n\n\"Indeed,\" I said. \"Maybe it's Arlandish?\" \n\n\"I doubt it,\" Virginia said. \"Caladon have only just begun to lay railroad. And if they built it, would they not crow about it?\" \n\nA huge smile had split my face. I was already beginning down the dune, heading for the impossible fish-machine. As I skidded down the sandy dune, I began to realize the scale of the great beast, which only enhanced my excitement. By the time I was at the base of the dune, I could see the great beast was nearly fifty yards from window to tail-fin, and that it's eyes were the width of a mansion's windows. The hole was easily large enough to allow two men to enter abreast without risking gashing themselves upon the sharp metal edges. \n\nVirginia skidded to a stop next to me, panting. \"Sir! You don't know how dangerous that is!\" \n\nI drew my pistol. \"There. Better?\" \n\n\"Let me go first,\" she said, frowning. \n\n\"Ah, yes, send the mage into the unknown construct,\" I said, my voice dry. \"Surely, nothing could go wrong!\" \n\n\"Oi!\" \n\nWe both looked up and saw that our friendly half-ogre had stepped up to the hole and was looking inside curiously. Sally Mead Mug was beaming and holding her battle-ax in her off hand, clearly ready for anything. \"You two stay there, I'll -hic- check-\" \n\nA mass of black chitin leaped from the hole and onto Sally's chest. \n\n*** \n\nVirginia drew her sword and I sprinted forward. We reached Sally in time to see that the massive spider that had leaped upon her was sinking its fangs repeatedly into her forearm. But Sally seemed less than perturbed. Rather than shouting in alarm or crying out in pain, she simply flung out her arm, sending the spider arcing up into the air. Then she sat up and buried her battle ax into the creature's massive thorax. The spider's legs twitched once, then slowly drew in on themselves. I slowed in my run, panting, while Virginia grabbed Sally's arm and Maggie and Gillian took up the rear, aiming their weapons - Maggie's pistol and Gillian's longsword - at the open hole. No new monsters sprang from it, and Virginia began to pepper Sally with questions. \n\n\"Are you sure you're not poisoned?\" \n\n\"Nahhh.\" \n\n\"You sure?\" \n\n\"Yahh.\" \n\n\"Hmm...\" Virginia put her palm over the dozen or so tiny bumps on Sally's arm. She shook her head, while Dogmeat sniffed at the ground near me. He had remained back - maybe the sounds of combat had frightened him? Personally, I was more than happy to let Dogmeat stay away from danger. After all, what use was a dog in a pitched battle? Once Virginia had assured herself that Sally was not going to drop dead there and then, we started into the hole, the area illuminated by Virginia's simple cantrip. The interior was clearly corroded by exposure to sea air, but I could see shapes of what were obviously engines, curved pressure vessels, and bulkheads. My brow furrowed. \n\n\"Who builds a big -hic- metal fish?\" Sally asked, frowning. \n\n\"It's not a fish,\" I said, quietly. \n\n\"Aye, most fish aren't made of metal,\" Maggie muttered into her collar. \n\nI slapped the wall. \"See that?\" I pointed with my pistol barrel. \"That's an air tank. But that? That looks...\" I stepped forward and gingerly kicked at the metal. Weakened by time and by exposure, the metal opened inch by inch, and I directed Virginia to shine her cantrip about. We leaned forward and I nodded slowly. \"There's a place for sea water to come inside there. And there. And vent out, if that small pump system does what I expect it does.\" \n\n\"Who wants to flood their own ship?\" Virginia asked. \n\n\"One...who wants it to sink,\" I whispered. \n\n\"Huh?\" Sally asked. \n\n\"You're not saying that this fish is some kind of submerging ship?\" Gillian asked. \"That's absolute pulp fiction - like from those daft yellow books.\" She shook her head. I holstered my pistol, grinning slowly. \n\n\"I wonder who made it?\" I asked. \"Lets find a cabin. Maybe some kind of log survived?\" \n\nVirginia took the lead as we clambered up into the head of the fish. There were several chambers that looked as if they had contained the crew - the bleached bones and the piled skulls made that clear enough. It seemed that they had been trapped within their bunk rooms while the ship was filled with water. I wondered if they had hoped to get to safety, or if they had died of asphyxiation or panic before their vessel even reached this small island? Then we came to a room that seemed fashioned for a captain or wealthy guest. For one thing, it had its own small bed rather than a series of bunks. For another, it had a desk, which itself was strewn with a few items that had been mostly protected from age and by time by the closed door and the still air.  \n\nThe first of the objects was an unusual, bell shaped device. It was roughly the size and length of a short rifle or a sawed off shotgun, and it even had the handle and stock of a rifled weapon. But the barrel was far too large, and it was clearly missing a great many pieces. The metal, though, was an extremely unusual make. As I examined it, Virginia used her unlocking cantrip upon the footlocker at the base of the bed. Opening it up, Virginia oohed quietly, then pulled out several sheaves of paper and a journal. My heart leaped, but then fell as I saw that the journal was completely desiccated by time, bleached into illegibility. The only piece of writing that was readable at all was the name on the front of the journal, scribed in a flowing script not too dissimilar from the colloquial tongue of the United Kingdom: Aldous Hunley, Professor of Applied Mechanics, League of Scientists. \n\nI shook my head, then sat upon the bed, looking at the other papers. One of them was a highly complex schematic contained within a smooth, rubber-like material that somehow managed to be entirely transparent. That alone was marvelous, but the actual schematic was even more impressive. From what I could determine, it was a collection of chemical, electrical and even mechanical injections that were built to do but one thing: To draw a spirit back into a body after life functions had ceased, and to restart those functions and bring the body entirely back to life. \n\n\"What is it?\" Virginia asked. \n\n\"Well, hypothetically, this could bring the dead back to life,\" I said, nodding as I held up the schematic for the revivification device. \n\nVirginia looked affronted. \"Not as well as magic...\" she muttered. \n\n\"Maybe, maybe not,\" I said. \"That is the thing about science - one never knows until one tries.\" I smiled. \"I presume that we'll all be fine foregoing testing this particular device for some time, yes?\" \n\nEveryone else nodded. \n\nI moved to examine the other schematic. This one was quite a bit more easily understood: It was the means by which one might finish the chassis that I had found to turn it from a useless chunk of metal into a functional firearm. It seemed this \"Bronwyck Gun\" - named after the inventor perhaps - was designed to use kerosene fuel and...and...my brow furrowed. ",
        "\"Impossible,\" I whispered. \n\n\"What?\" Maggie, Gillian and Virginia said, all at the same time. Sally instead said 'wot.' \n\nI looked up at them. \"This weapon's design requires mithril.\" I tapped the schematic. \"And the design appears to focus electrical currents into the mithril to try and provoke a magick effect to ignite the kerosene and launch it in a quasi-magick field at the target!\" I shook my head. \n\n\"So?\" Sally asked. \"It's a magick gun. Whaz so -hic- odd about tha?\" \n\n\"Have you not noticed how Virginia's magick works on me one times out of ten?\" I asked. \n\nSally scratched her chin. \"Now that you mention it...\" She muttered. \n\n\"That's why,\" I said, then tucked the schematics into my pack. Once I had done so, I picked up the chassis. As I was tucking it away, Virginia frowned and pointed at it and at me. \n\n\"Didn't you just say-\" \n\n\"Well, of course I have to test it!\" I said, grinning broadly at her. \"For science!\" \n\nVirginia, Maggie, Gillian and Sally all looked less than amused. Dogmeat barked happily and wagged his tail. \n\n\"Dogmeat believes in me,\" I said, waggling my finger at Virginia. \n\n*** \n\nThe night passed. No, we did not have another orgy. We simply talked. We enjoyed the sea breeze. We watched as the sky glittered and became rich with stars. And in the morning, we set out once more, heading along the beach once more. As the sun rose, so did the temperature, and when the time came for our mid-day break, I slipped away from the group to relieve myself in the woods...or at least, I tried. Virginia immediately set out after me. Dogmeat followed her. Sally and Gillian and Maggie followed him. I came to the line of trees, then turned and frowned at the chain I had acquired. \n\n\"I am going to relieve myself,\" I said, frowning. \n\n\"And the last time I allowed that, you were attacked by a member of the Molochean Hand and nearly killed!\" Virginia said. \n\nI heard a loud crack behind me. I turned, slowly, and drew my pistol as I did so. Behind me, I could hear the rest of the party drawing their weapons as well. Looking into the shadows of the jungle, I slowly became aware of a vast shape looming there. It was as tall as I, but it was as broad shouldered as four men, maybe more. Two glinting, reddish eyes glared out from the darkness, and I gulped slowly as the beast started to move forward with a queer, quadrupedal gait - queer for it clearly had huge hands. It moved on its front knuckles as easily as I might on my hands, and as it emerged from the jungle, I saw it had a nearly human face. Broader, covered in rust red fur, and attached to immensely muscular shoulders by a neck twice as thick as mine...but still close to human. \n\n\"Is that an ape?\" Virginia asked. I felt my pistol twitching in my hand - the magnetic field used to accelerate my bullets growing erratic as the beast looked at me. The voice of Ogden, from the camp, echoed in my memory: \"Some magick touched ape. It can stop time about itself. Things seem to freeze, and then your arm is on the ground next to you.\" \n\n\"It's a clock beast,\" I whispered. \n\n\"Did you say cock beast?\" Sally asked, sounding half excited. \n\nThe ape crackled with golden lightning. Magick slammed into my body and my mind and the whole world seemed to slow and gray. The whole world froze about me...and my mind continued to process. I could see the ape thumping towards me, drawing closer and closer as the whole world seemed to be still and frozen. But it wasn't the whole world, was it? The waves still crashed against the beach. The leaves still fell from trees. But I, Gillian, Maggie and Sally, all of us were frozen as the beast drew closer and closer, crackling and popping and hissing as golden lightning crawled along its fur. \n\nSo this was it? \n\nI was going to be slain by some ape in the wilderness? That was how I was going to die? The huge beast grabbed onto my right arm, about to rip me apart. But as it set its grip and I felt its terrible strength...a sudden blur leaped from the side of my vision. A large from crashed into the side of the red ape, and the entire world snapped into focus again, time speeding up for me. I staggered backwards, shaking myself...and saw that Dogmeat had sprang onto the red ape's shoulder. His teeth had sunk into the neck of the beast, and he worried his head from side to side, snarling and growling. The vast beast roared, then grabbed onto Dogmeat's back. \n\nBefore I could blink, Sally was there. Her battle-ax slammed down and caught the beast in the wrist. He roared and the hand of the monster fell to the ground, opening and releasing Dogmeat. Dogmeat landed, barking furiously, his fur matted with blood. The beast backhanded Sally in the chest with his still intact hand. Sally rolled away. But by then, I had drawn my pistol and stepped back, enough so that I felt the magnetic fields were once more coherent. \n\nI fired. \n\nThe round punched into the clock beast, sending it staggering backwards. Golden lightning crackled, and I knew it was trying to once more twist time about itself. I fired again, then again, then again. Each time, the roaring sound echoed throughout the entirety of the beach. Birds scattered in every direction, screaming their fear to the four winds. The beast staggered against a tree, four massive holes torn in its chest. Blood bubbled around its muzzle, and a human hate flared in its eyes. A fierce, abiding, endless hatred for me and for mine. I fired again and took one of those great, hateful eyes out. \n\nThe beast drew a smeared line of crimson upon the tree as it skidded down, then slumped to the side. One great leg kicked spasmodically at the ground and then, at last, it laid still. \n\n\"Bugger me.\" \n\nEach of us turned. \n\nThe two goons that had found me, earlier in this week, both gaped at me. \n\n\"You killed the clock beast!\" the one who had tossed me into the pit said. \n\nI looked at them and, somehow, resisted the urge to shoot both dead. \n\n*** \n\nOgden looked at my weather beaten self, my new clothes, and the severed head of the clock beast with an expression of faint distaste, as if he wasn't entirely sure if he was pleased or displeased. In the end, he settled in his normal sour disposition. \"I suppose that you will want to speak to Thorovald?\" he asked. \n\nI nodded. \"That is, indeed, exactly what I want to do.\" \n\nOgden looked at my companions. All of them were standing quite near one another, glaring around themselves as the rest of the camp eyed them like walking meat. I could see Ogden doing calculations and immediately coming to an obvious conclusion. \"You will, of course, need to speak to Thorovald alone.\" \n\nI sighed. \"Of course.\" \n\nThe interior of Thorovald's house was quite what I expected: As close as one could get, within the constraints of the Isle of Despair, to opulence. Several salvaged paintings whose bloodstains and water marks made it clear that they had been taken from shipwrecks. Carpets that had been repaired many times over. Furniture that nearly approximated what could have been found in civilization. And, finally, Thorovald himself. He was a tough looking dwarf, with a bushy beard that had been cropped and shaved to make it nearly cylindrical. His left eye was furrowed by a scar that had narrowly missed turning the eye into so much gore. His clothing was rough, as fancy as could be allowed, and he looked as if he regularly fed on finer meals than the rest of this camp: His belly strained against his shirt. \n\n\"So,\" he said, looking at me from the seat that he was occupying. A book rested in his hand, with a well worn, often used look to it. \"You're the halfie whose been causing such a ruckus in my camp.\" \n\nI clasped my hands behind my back. \"That's me, Mr. Two Stone.\" \n\nThorovald nodded, slightly. \"So. Why did you go through such trouble to see me?\" \n\n\"I'm here on this island under the auspices of one Mr. Gilbert Bates,\" I said, watching the way Thorovald's eyebrows rose in interest at that. \"I have been sent to this island to find the exiled Black Mountain Clan.\" \n\n\"You're a bit off your target, orc,\" he said, frowning, his fingers stroking along his book. \"You should be looking at their mines, in the Black Mountain.\" He sneered at me. \n\n\"And you clearly need to listen, dwarf,\" I said, my voice growing sharp. \"You must have missed the part of my sentence where I used the word 'exiled.' In case that is beyond your vocabulary, 'exiled' implies being banished to an failed mining colony because they committed a crime.\" I scowled at him. \"Now, I've had a very long, very irritating week. I've almost been killed by almost everyone I've met on this damn island. And I will not leave this house without some godsdamned answers. Where. Are. The Dwarves!?\" \n\nThorovald's eyes were wide underneath his bushy eyebrows. \"I'm the only one here,\" he said, angrily. \"Other than that Magnus chap you brought with you.\" He shook his head. \"What on Arcanum makes you think the BMC would be here?\" \n\nI sighed, slowly, feeling as if my long road had unfolded to become even longer. I rolled my shoulders and began to pace in the room. \"I entered the Black Mountain Mines and found a pillar, telling me that elves and the Wheel Clan banished the BMC here,\" I said, looking at him as I walked. \"It was carved by Gudmund Ore Bender-\" \n\n\"Gudmund!?\" Thorovald sprang to his feet, his boots thumping upon the floor. \"You spoke to him?\" \n\n\"I...\" I blinked. \n\n\"Please, tell me, is he hale?\" Thorovald asked. \"It's been nearly two centuries since I saw the bugger. He was my...\" He slowly trailed off, seeing my expression. \"He's dead, isn't he?\" \n\nI nodded. \"I'm sorry-\" \n\nThorovald shook his head. \"No matter,\" he said, his voice growing gruff. \"Friends die. That's the nature of this world.\" He stroked his beard. \"But what you say doesn't make any sense.\" He licked his lips, slowly. \"The Wheel Clan would never follow the orders of elves.\" \n\n\"It does sound peculiar,\" I said, frowning. \n\n\"And the BMC isn't here,\" Thorovald said. \"Why would Gudmund be mistaken? He was sound of mind. Cunning of spirit.\" \n\n\"I don't think he was mistaken,\" I said. \n\nThorovald narrowed his eyes. \"If you're intimating my friend lied...\" \n\nI barely resisted the urge to roll my eyes. \"I think he was lied too,\" I said. \"Someone wanted the Wheel Clan and the rest of the world to think the Black Mountain Clan was sent here. Someone who has a great deal of power and influence.\" \n\nThorovald's hand went to his beard. Once more, he stroked it, considering. \"Well, I hate to break bad news to you, but your journey ends here, orc,\" he said, quietly. \"Even if you weren't trapped upon the Isle of Despair-\" \n\n\"I'm not,\" I said, casually. \"I wasn't just dumped out of a prison barge, Thorovald. My ship is moored off the coast.\" \n\nThorovald's eyes widened. \"It is?\" \n\nI nodded. \n\nThorovald scowled. \"But there's still another barrier in your way.\" He put his hand to his chest and I saw that there was a small necklace about his neck. As his hand shifted, I could see that he was caressing a pair of what appeared to be spectacles, dangling underneath his homespun shirt. I pursed my lips and took note of the fact that the lenses were a deep, emerald green hue. Thorovald continued. \"The Wheel Clan's entrance is concealed from prying eyes and orcish war bands by an optical illusion. Only seeing in the, heh, right way...will reveal it.\" \n\n\"Those glasses?\" I asked, inclining my head to him. \n\nThorovald blinked, clearly taken aback. \"Well...yes,\" he said, scowling at me. \n\n\"Well, then,\" I said, my mind immediately settling upon the only acceptable outcome for this day. \"You can come with me to the ship.\" I smiled. \n\nThorovald looked at me as if I had begun to speak ancient Elvish. \"What?\" his voice was low. \n\n\"You. Can. Come. With. Me. To. The. Ship.\" I said, enunciating each word simply. I could see a flash of emotion flaring across the middle aged dwarf's face. It was first anger that I was speaking down to him - followed by fear. And I think I knew why. Here? He was king. He could say who lived, who died. He could control the life and the body of the only woman in camp, parceling her out like she was a reward for him to trade on. If he came with me to the mainland, he would have to remember what he was: A low life criminal, exiled to an island so the rest of the world might forget him. That fear was growing and I could see him talking himself into thinking it was, in fact, bravery to remain here and face the harshness of the jungle. \n\n\"Come now,\" I cut into his thoughts. \"Are you a gnome, to hide from the future, or a dwarf?\" \n\nAnger again. Anger and resolve. \"Come on,\" he growled. \"Lets go.\" He looked about his room. \"Not much to bring...\" \n\n\"Maybe Boggs?\" I asked, my voice casual. \"She's yours, isn't she?\" \n\nThorovald nodded, absently. \"Yeah. Grab the bitch and lets, heh, get to the ship.\" \n\nMy smile was forced. \"My pleasure.\" \n\n*** \n\n\"We're...leaving?\" Cynthia asked, her eyes wide as saucers. \n\n\"Yes,\" I said. \n\n\"On a...ship?\" she asked, nodding her head with the words. \n\n\"Correct,\" I said. \n\n\"O...Off the island?\" she asked, her voice growing tremulous. I reached out and took her hand. I squeezed it. \n\n\"I'll make sure you get safely to a better life than this,\" I said, my voice very soft. \"I swear.\" My eyes met hers and I saw her eyes filled with the same fear that Thorovald had shown - but unlike him, she quickly firmed her bravery. She gripped it, nodded, and whispered. \n\n\"Aye,\" she said. \n\nI walked her out of her small hovel, and we joined up with the rest of the group. Thorovald was blustering to Ogden, claiming that we were going to show him to the submerging ship that we had found. Ogden seemed to believe this, and the camp watched all of us go. If any of them seemed to think it odd that the camp's only woman was going with us, they did remember that I had slain the clock beast. If I chose to take my reward in the jungle, rather than in the street...that was my prerogative, right? \n\nHowever, I could not help but think that we had left a growing tension behind us. The rest of my party seemed to feel the same - even Dogmeat put extra speed to his padding, his tail lifted up in alarm, his ears flattened back against his head. We emerged from the jungle and to the beach - and there was the Gypsy Shadow, riding low at anchor, the crew bustling and preparing the rigging for sail. A small jolly boat was set on the shore, and Captain Edward Teach stood on the prow, his hands on his hips, his smoking blond beard as wild and bristly as ever. He beamed at me, laughing uproariously as I waved at him. \n\n\"Rayburn Cog!\" he boomed. \"Are you ready to be the first man to escape from the Isle of Despair?\" \n\nThorovald sprang onto the jolly boat, looking back, his eyes wild with fear. \"Lets get out of here,\" he said as Cynthia got onto the boat as well. Teach eyed them with clear judiciousness, but I smiled at him to show they were with us. Sally put her broad hands on the jolly boat, ready to begin to push her out. But behind us, a loud crack rang out. Sand exploded from the beach behind me and I spun around, to see that twelve, twenty of the prisoners were emerging from the jungle, holding their weapons. At the head was the man who had pushed me into the pit, his face twisted with fury. \n\n\"You running out on us, Two Stones!?\" He shouted. \n\n\"We leave now!\" Thorovald said, voice tight with panic. \n\nCaptain Edward Teach lifted his hands, stepping off the boat. His grin was broad as his bicorn hat, and his voice - pitched as he was bellowing over a storm - echoed across the whole beach. \"Whoa, whoa, whoa! Settle down lads! You all are looking a mite mutinous here...\" \n\nThe prisoners looked at Teach as if they could not believe our eyes. The man who had hurled me into the pit sneered impressively. \"Who are you supposed to be, Stringy Pete?\" \n\n\"Oh no, no, no, no...\" Teach said grinning. His voice became deadly soft. \"I'm Captain Edward Teach.\" \n\nThe prisoner's eyes all widened. \n\nTeach pulled two pistols from his waist bands and began to fire - the revolvers he carried barked and flared, smoke filling the air as he laughed uproariously. The prisoners with guns fell first, bullets tearing into their chests. The prisoners without hesitated, giving Teach time enough to draw his second pair of pistols and unload into them as well. The smoke drifted away from him, but his laugh continued to echo out, louder than the guns. The surviving prisoners broke and fled, screaming in terror as Teach tossed his second pair of pistols to the ground. \n\nGroaning bodies were scattered across the beach - less than a quarter of the prisoners. \n\n\"By this time tomorrow,\" Teach said, cheerfully. \"I'll have killed fifty men in the first volley alone, mark my words, laddy. Sally!\" He boomed. \n\n\"Aye aye, captain?\" Sally asked. \n\n\"Get us out to sea!\" Teach leaped onto the jolly boat as water lapped about the hull, lifting it from the sands. Sally heaved and I had to scramble to get on, dragging a still stunned Virginia after me. As we set in the boat, Sally and Gillian got to the oars and Cynthia started to sob in pure joy. Thorovald shook his head, then lifted his hand to slap Cynthia - a practiced gesture. But Virginia snarled at him and he subsided until we reached the Gypsy Shadow. Scrambling up the netting, we came to the deck and Teach began to bellow orders. The anchor rattled in its chain and the sails rumbled as they were dropped from the rigging. The sails creaked and belled outwards and the whole ship began to leap forward, cutting through the waves. \n\nThorovald stood beside the railing, looking out at sea. His voice was soft. \n\n\"I...can't believe I'm getting off that island...\" He shook his head. \"Two centuries for killing a few women, really...\" He sneered. \"In the clans, they'd have cut my head off. Humans are weak.\" \n\n\"Yeah,\" I said. Then, nodding, I looked down at him. \"So, those glasses, how do they work?\" \n\nThorovald plucked the glasses from his collar. He held them up, smiling. \"Put them on and look at the Grey Mountains, a few dozen miles east of Stillwater?\" He grinned. \"This will show the way.\" \n\nI nodded. \n\nThen I plucked the glasses from his fingers, reached down, grabbed Thorovald by his ankle, then lifted. Thorovald yelped once, then he was over the railing and plunged, headfirst, into the surf. It transpired that the incredible density of a dwarf was not conducive to swimming. His head did not even break the surface. \n\nI turned my back to the sea, to see if any had witnessed what had transpired. Virginia had. She was looking at me with very wide eyes, her mouth hanging open in shock. I met her eyes, then slowly looked at Cynthia. Virginia looked at her. I could tell she was placing the pieces together: Prisoners, vile men, trapped in a prison, with a single woman in their grasp. She regarded Cynthia...pursed her lips... \n\nVirginia looked back to me and nodded. \n\nNo one ever asked what had happened to Thorovald. \n\nTO BE CONTINUED"
    ],
    "authorname": "DragonCobolt",
    "tags": [
        "orgy",
        "orc",
        "human",
        "dwarf",
        "bondage",
        "blindfold",
        "reluctant",
        "femdom",
        "steampunk",
        "adventure"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/arcanum-of-steamwork-and-magic-ch-10"
}
{
    "title": "Sweet Spot Ch. 06",
    "pages": [
        "Andy had always found true patience one of the more difficult virtues to attain. He could pretend to be understanding, or logical, or whatever was required of him at any given time, but it was just that: pretense. And at the moment his ability to maintain a calm and unruffled facade was being sorely tested.\n\n\"You said you wouldn't leave. Just last night, you said you wouldn't leave.\"\n\n\"I'm not leaving, Andy. I'm just going back to the States with George for a short visit. It's not the sort of thing I can tell my parents by phone, or let George say for me. Don't you see the difference?\"\n\nAndy did see the difference, but the problem was that he wasn't so sure it carried much weight or was entirely relevant. And while the whole overflowing bucket speech had rung true\u2014even romantic, in a dorky, Paul sort of way\u2014it still didn't mean that Paul's sudden epiphanies were to be trusted in the long term. What if he had another epiphany when Andy wasn't around to do anything about it?\n\n\"But what's the sudden hurry? You still have a year ahead of you to tell them, according to your original plan. Why go now?\"\n\nPaul had been pacing, but he came to sit next to Andy on the couch and take his hand. \"The first thing my mom is going to do when she sees George is ask him about me. How I am, if I'm eating enough, if my place is decent. She'll even ask him about the curtains on the windows and the tiles in the bathroom. What's he supposed to say, Andy? I can't expect him to lie to her for me.\"\n\n\"He could say that he didn't see you, that you were away from Athens on vacation,\" Andy mumbled. It sounded even more childish when he said it out loud. But damn it all to hell, he needed more time and that had been a good excuse!\n\n\"Even if he wanted to, he can't lie to her. I bet you can't lie to Elaine, either.\"\n\n\"Can, too.\" No wonder he couldn't get Paul to see reason; he was acting like a five-year-old.\n\n\"By omission, maybe. Not outright.\"\n\nAndy took a deep breath. \"Yeah, okay. I just hate the thought of you going through this alone.\" \n\nBecause what if Paul decided he couldn't disappoint his parents, after all? What if they got him to convince himself that his duty to them was more important than his own happiness or than Andy?\n\n\"George will be there to divert some of the flack. And you'll be here for moral support, right?\"\n\n\"Right,\" Andy agreed reluctantly, because, short of throwing a temper tantrum, there was little else he could say or do.\n\nPaul squeezed his hand briefly, then let it go and stood up. \n\n\"I need to get to my afternoon classes. I'll let Maras and my pupils know that I'll be away for about a week or ten days on a family emergency. Once I'm back, I'll pack. George couldn't get me on the same flight as him out of Athens, so I'm flying out tomorrow at six in the morning, but we'll be flying together from Frankfurt to JFK. He even used some of his miles to get me bumped up to business with him on the way there.\"\n\n\"Good old George,\" Andy muttered through his teeth.\n\nHe almost let Paul walk out through the front door before jumping up and catching up with him. \n\n\"Tell them you'll be away for a week. Not ten days. A week.\"\n\nPaul paused in the act of adjusting his bag strap across his shoulder and looked up at Andy. He caught Andy's hand again and knit their fingers together.\n\n\"Okay. A week,\" he agreed quietly, and Andy nodded. \"I'll be back, Andy. I swear. There's no need for all this drama.\"\n\nAndy let out a shaky exhalation. \"I've always wanted to be a drama queen, I just never had the opportunity until now, so I had to jump all over it,\" he joked weakly and Paul grinned.\n\n\"I'll see you later, then. Don't fall asleep before I'm back.\"\n\nHe reached up and kissed Andy, then wheeled his bike out the door and through the front gate. Andy watched him leave, then shut the door and leaned against it, banging his forehead lightly against the wood panel in frustration. Sometimes he really wished that twink in the orange T-shirt in S-CAPE had waited around for Andy to ask him to dance, because no matter how much trouble he might have turned out to be, it couldn't have been more than Paul.\n\n---o-O-o---\n\nGiven enough time, most people can adjust to any unpleasant situation. Paul wasn't sure if his co-workers and some of his pupils' parents had adjusted to him, or if he'd adjusted to their reactions to him, but things at the Club had reached an even keel. Although the academy didn't run during the school year and classes in the morning had thinned out and consisted mostly of retired men and women trying to stay active, he had a number of younger pupils in the afternoons and evenings, once school hours were over. It helped financially, but was frustrating on a personal level, because with a schedule that forced him to leave the house before Andy had woken up, return when Andy was at work, and then leave again for several more hours just as Andy was getting home, it sometimes felt that they no longer got to spend much time together.\n\nHe called George on one of his breaks to confirm that he'd spoken to Andy and that he was set to leave the next day.\n\n\"How did he take it?\" George asked.\n\n\"He understands. But I need you to change my return ticket to a week from now.\" \"What? You're not even going to spend two weekends home? What the hell, man?\"\n\nPaul was unwilling to discuss Andy's obvious unhappiness or his own doubts and misgivings regarding the whole exercise, so he fell back on the easy excuse. \"I just can't suddenly take that much time from work, George. People are counting on me.\"\n\n\"So are we.\"\n\n\"No. You're just counting on me to do what you want me to do!\"\n\n\"Paulie!\" George exclaimed, and Paul felt ashamed of his outburst. Anyway, they'd beat the subject to death yesterday, and no doubt George would have more to say on the plane. Paul didn't doubt that George was trying to be understanding and supportive, but he also had his own viewpoint and objectives, knew Paul's buttons all too well, and wasn't above pressing them.\n\n\"A week, George. If things go well, I can come back with Andy, so that everybody can meet him. And if they don't, then there's not much point to staying longer, is there?\"\n\n\"You need to give people time, Paul. You need to be there when they need to speak to you.\"\n\n\"Please, just change the tickets, okay, George? Okay?\" Paul said a little desperately.\n\n\"Fine. Anyway, we can change them back if we need to,\" George said, and Paul hung up on him and only just stopped himself from hurling his phone to the ground and stomping on it.\n\nHe was dead tired by the time his last lesson finished, and he dreaded returning home to sort through his things and pack. More than that, he dreaded facing Andy, who'd been caught wrong-footed that afternoon, but who would by now have mustered a number of arguments as to why Paul shouldn't fly back home.\n\nHe entered the house cautiously, half-hoping Andy would already be asleep, but no such luck. The sliding doors to the back garden were open, and the crappy French music Andy listened to when he was depressed floated into the house. He was probably lying in the hammock and moping. To give Andy his due, he was generally upbeat after that all-important second cup of coffee in the morning, but on the rare occasions he fell into a funk, he really worked it.\n\nSighing, Paul propped up his bike, dropped his bag on the floor and went outside to find Andy exactly as he'd imagined him. He thought of saying something, then simply went over, climbed in on top of Andy and kissed him. Andy tasted of beer and, disconcertingly, of cigarettes.\n\n\"You smoke?\"\n\n\"No, I quit years ago,\" Andy responded blandly, and Paul decided not to argue the point. He laid his head on Andy's shoulder, closed his eyes, and let his breath and maybe even his heartbeat, synchronize with Andy's. After a while, Andy's arms encircled him and his hands rubbed his back gently, from his nape down to his butt and back up again.\n\n\"I wasn't sure what you'd need, but I washed and folded some shirts for you, and I checked in case something in your travel kit needed refilling,\" Andy said.\n\n\"Thank you, Andy.\"\n\nHe felt Andy's lips brush against his hair.\n\n\"You'll call me, right?\"\n\n\"I'll call you,\" Paul reassured him.\n\n\"Okay, then,\" Andy sighed. \"Okay.\"\n\n\"Hey, Andy?\"\n\n\"Hmmm?\"\n\n\"Can we please change the music?\"\n\n\"Only if you're planning on staying out here.\"\n\nPaul rubbed himself against Andy. \"I could stay a while.\" He slid his hand under Andy's shirt and scratched softy at Andy's sparse treasure trail, and Andy's arms tightened around him in reaction.\n\n\"You want to do this out here?\" Andy asked.\n\nPaul kissed Andy's throat and nibbled a little at the soft skin there. \"Why not?\" \n\nHe flattened his palm against Andy's belly and slid his fingers under the waistband of his shorts, his fingertips just grazing Andy's pubic thatch and tickling there. Andy gave a smothered groan and arched up a little, causing the hammock to sway, and they both tensed until it settled again.\n\n\"But you have to be very, very still,\" Paul whispered in Andy's ear, then licked it wetly.\n\n\"Fuck!\" Andy exclaimed harshly, his hands digging so deep into Paul's back he was probably going to leave finger-shaped bruises. \n\n\"And quiet,\" Paul admonished and licked Andy's ear once more. \"Otherwise I'll have to stop.\"\n\nHe reached down with his other hand to open Andy's waistband and lower the zipper. He tried pushing the underwear out of the way, as well, but the hammock swung again when Andy tried to raise his hips to help him, so he gave up on that. Anyway, the soft cotton had enough give for what Paul wanted to do. He wrapped his fingers around Andy's stiffening length and gave it a couple of sharp tugs, then dug his thumb gently into the moistening slit.\n\n\"Shit, shit, shit,\" Andy cursed below his breath. He spread his legs a little, and Paul adjusted himself, so that he was straddling one hard thigh.\n\n\"Nice and slow, Andy,\" Paul crooned, his thumb circling the head of Andy's cock on every down stroke of his fingers, then gently fucking the slit on the upstroke, over and over again. \"Nice. And. Slow.\"\n\nAndy slid his hands down under Paul's shorts to cup his ass and pull him more tightly against his thigh. He kneaded and squeezed Paul's cheeks and a couple of fingers strayed between them, circling his hole. Despite the cool night breeze, they were both sweating heavily by now, and Andy's smell filled Paul's senses. Every now and then, one or the other would move a bit too abruptly, and they'd freeze, waiting until the hammock steadied again before continuing.\n\n\"I'm going to cum, honey eyes,\" Andy suddenly gasped in warning, his body tense as a board under Paul's, and Paul quickened his stroke and raised his head so that Andy could kiss him. Andy moaned into his mouth as his body started to jerk tightly in the throes of orgasm, and he spurted liquid warmth into Paul's hand. Paul was almost there himself, and he hunched harder against Andy's thigh, then worked himself backward until Andy finally got the message, pressed a dry fingertip into his hole and sent him flying. \n\nThe hammock rocked and creaked in protest, then settled back into a gentle swing as Paul's heartbeat slowed and his breathing evened. Andy had gone back to caressing his back, his palms now sliding easily against Paul's slick skin under his shirt.\n\n\"No hammocks in Bridgewater, right?\" Andy asked suddenly, his worries clearly not appeased for long.\n\n\"No Andies, either,\" Paul responded, and kissed him again. \n\n---o-O-o---\n\nThree generations of Pappas family showed up to greet George and Paul at the airport. His nieces and nephews flung themselves exuberantly at Paul, nearly toppling him over, and he laughed and hugged them back, first one at a time, then all five together. His mother eventually managed to squeeze in for her own hug, and his father thumped him on the shoulder.\n\n\"Hey, I'm back, too,\" George grumbled, but didn't get much sympathy, not even from his wife Xenia.\n\nHis oldest nephew and niece insisted on riding back to Bridgewater in the car Paul would be in, which offered more distraction as booster seats were transferred to his father's car. Paul had to squeeze in between the two seats for the nearly two-hour trip home, but was nevertheless thankful for the further reprieve little pitchers with big ears offered, as neither of his parents could delve into too much detail about his life in Greece.\n\nHis mother laid out a big spread for the entire family when they got home, with all of Paul's favorites. \"I wasn't sure what to make, since you probably get all the Greek cooking you want right now,\" Kate said.\n\n\"It's still not your moussaka or cheese pies, Mom,\" Paul assured her, and dug in with gusto, loading his plate and pointing a fork threateningly at his younger brother John, who was trying to snatch the last zucchini ball.\n\nHe'd missed all this. The family meals, his siblings' banter, the kids' voices and sudden body-slam hugs. His stomach coiled painfully at the thought that he was about to give it all up, and he pushed his plate away, his appetite suddenly gone. Even if by some miracle it all went well, even if his parents accepted not only him, but his relationship with Andy, as well, he was taking himself far away. It had been a painful prospect even in theory; now, watching his parents and their loving relationship, it was almost unthinkable. And yet, not to return to Andy seemed immeasurably worse, even though they'd only known one another for six months.\n\n\"So, Paul, how are the women in Greece?\" John asked. \"Do they still know their place?\"\n\n\"What's that? Barefoot and pregnant in the kitchen?\" John's wife asked, reaching over to cuff him in the back of the head.\n\n\"Well, yeah,\" John agreed, even as he ducked away with the ease of long practice. \"I bet they don't beat on their husbands, either.\"\n\n\"And neither do I, at least not nearly enough,\" Claudia, the token non-Greek in their family muttered darkly.\n\n\"So? Tell us everything. In detail,\" John insisted.\n\n\"Ah, I don't think they're much different than they are here,\" Paul stammered. \"More independent, if anything. At least in Athens.\"\n\n\"And are you having better luck?\"\n\n\"Better luck?\"\n\n\"S-C-O-R-I-N-G,\" John spelled out.\n\n\"Scoring!\" yelled seven-year old Paul triumphantly. \"That spells scoring, Daddy. Are you, Uncle Paul? Are you a champion again?\"\n\n\"Er, ah, not quite.\" Paul laughed, though he didn't think it was nearly as funny as the rest of the adults seemed to.\n\nPaul's father had remained mostly quiet throughout the meal, observing Paul thoughtfully, but he finally broke his silence.\n\n\"You said something in the car I didn't quite understand, Paul. You gave up your apartment? Why? Where are you living now?\"\n\nPaul swallowed hard and his eyes flew to George in a plea for support, but George was whispering something to Xenia. She nodded and stood up.\n\n\"Hey, kids, what do you say we go outside for a bit, while the grown-ups finish eating and talking about boring stuff?\" There was some whining about wanting to stay with Uncle Paul, but after assurances that Uncle Paul would still be around later, she got them all into their jackets and outside. Obviously, somebody had already been told Paul's news.\n\nMilt's eyes had remained on Paul throughout the diversion, and he was frowning. The rest of the family had obviously realized something wasn't quite right, and all, except for George, looked from Milt to Paul and back with puzzled expressions.\n\n\"Well, you know about the economy in Greece, Dad,\" Paul stalled, his mouth completely dry. \"It was hard getting enough pupils, at first, so I moved in with a friend.\"\n\n\"A friend. And why didn't you ask us to lend you some money?\"\n\n\"Because I managed things on my own. I'm thirty-two, Dad. I don't need to write home for money.\"\n\n\"But obviously you do. It's not a shame to need your parents' help, even at thirty-two, Paul.\"\n\n\"No, I know. Can you pass the melitzanosalata, Mom? You really outdid yourself.\"\n\n\"What is a shame, however,\" Milt continued inexorably, \"is not to have any plans or ambition at thirty-two. To run away from your obligations and to freeload off friends, as if you were still a teenager.\"\n\n\"Dad\u2014,\" George started to say, but Milt held up a hand to silence him.\n\n\"Life means taking responsibility for oneself, Paul. It means having goals and working towards them. First you decided to give up tennis, when it got a little too hard for you. Then you decided to give up working for the family and towards your business degree, when those weren't quite the fun and games you were obviously expecting. Now you've failed again, and rather than come home, you're hiding from us.\"\n\n\"Dad!\" George attempted to intervene again, but Milt waved him off once more. Paul sat staring at his plate, his cheeks burning, ashamed and angry and too aware of the stunned silence surrounding him. He clenched his fists and swallowed the words he wanted to say, because he knew he'd later regret them.\n\n\"Miltiadi,\" he heard his mother say quietly. \"Stop, now. You know Paul's not like that.\"\n\n\"I want to know the reason, Kate!\" Milt thumped his hand on the table. \"I want to know why he is bumming around in Greece and living off his so-called friends, when he should be here, raising a family and working with his brothers and sister in the business I built for them!\"\n\n\"Because I'm never gonna raise a family, Dad!\" Paul finally burst out. \"At least, not the kind you expect me to raise.\"\n\n\"Paulie,\" George said in a warning voice, still trying to calm things down, but now it was Paul, who waved his efforts away.\n\n\"I'm gay, Dad. Okay? I'm one of those homosexuals you're always making fun of and saying are so sick and will burn in hell. That's why I left.\"\n\n\"No, you're not,\" Kate blurted, then covered her mouth with her hand, as if she had to physically stop herself from saying more.\n\n\"Yes,\" Paul said, more quietly now, because his mom didn't deserve this. \"I am.\"\n\nHis father looked stunned, his mouth opening and closing, no words coming out.\n\n\"But, Paulie, you'll always be alone,\" a clearly distraught Kate finally wailed in protest. Paul's sister, who was sitting next to her, patted her back soothingly and glared at Paul.\n\n\"No, Mom.\" He closed his eyes and thought of Andy, and tried to recall the peace he felt when he lay in Andy's arms. \"This friend I'm staying with . . . well, I love him. And he loves me. I won't be alone.\"\n\n\"That's disgusting,\" Milt snapped. \"I didn't raise you this way.\"\n\nPaul didn't bother responding. Instead he looked at John and Claudia, and then at his sister Mary and her husband. John and Claudia were both pretty wide-eyed, though Paul thought he could also discern some sympathy and understanding in their expressions. Mary was still glaring, and Dennis was staring at the front door longingly and obviously wishing himself on the other side of it.\n\n\"I won't have you in this house,\" Milt growled. \"I won't have you associating with my grandchildren, you sick\u2014\"\n\n\"Dad!\" George yelled, standing up so suddenly his chair tipped over and fell. \"My God, this is Paul you're talking to. Paul!\"\n\n\"Don't tell me you think it's okay, George! I know you better than that.\"\n\n\"I don't know what I think, Dad,\" George said, casting a brief apologetic glance at Paul. \"But I know my brother, and I know he's a good man and that he tries hard. There's nobody I'd trust my kids with more. Nobody. Not even you.\"\n\nJohn murmured something that sounded like agreement.\n\nMilt looked at them all as if they'd taken leave of the senses. \"Look. I know Paul is your little brother and you want to love him and think the best of him. But some things are just wrong. They're against God's will, and you cannot accept them.\"\n\nHe turned to Paul. \"If you give up on this . . . this madness, you can return. But not before.\"",
        "\"You can't cast him out, Dad!\" George argued.\n\n\"Yes, I can. As he said, he's thirty-two. He makes his own choices, as we all do.\"\n\n\"It's not something I can give up on, Dad,\" Paul said, though he was looking at Kate, hoping she'd understand. \"It's who I am. If you expect me to change before you let me into your house again, it'll never happen. Never.\"\n\n\"Then that's the way it will be,\" Milt said firmly.\n\n\"You'd do that to Mom?\" Mary asked harshly, and at first Paul thought the question was directed at Milt. \"You can't even fucking pretend for Mom's sake? Honest little Paul, always telling the truth, no matter how much it hurts others. You selfish asshole!\"\n\n\"Why does the fact that I'm gay hurt anybody? Why does it make any difference to you?\"\n\n\"It doesn't! Which is why there was no point to your grand announcement. You just wanted to get a rise out of Dad.\"\n\n\"I met Paul's Andy,\" George suddenly said, and Paul's eyes teared up at the description, and he blinked, trying not to let it show. \"Not for very long, but he seems like a nice guy. He's tall, like Dennis, and really blond, and he obviously loves Paul.\"\n\n\"Who cares?\" Mary asked again.\n\n\"You should. The same way that we all cared that Dennis is a good man and somebody, who would stand by you.\"\n\n\"But it's different.\"\n\n\"No, it's not. I thought it was, too, but Paul made me realize it's not. When I wanted to marry Xenia, I wanted this family to accept her. It was important to me that my family love her as much as I do, but I was prepared to turn my back on every one of you if you didn't.\" George shrugged. \"We share every good piece of news in this family. Mary, you called both Xenia and Claudia at 3:30 in the morning, because that's when you decided to take a pregnancy test and found out you were pregnant with Katie, and couldn't even wait until a decent hour to call. Yet you expect Paul to keep everything in his life, every happiness,, a deep, dark secret?\"\n\n\"Just from Dad,\" Mary said defiantly.\n\n\"That's bullshit,\" Milt burst out. \"I cannot condone it. I won't.\"\n\n\"Milt,\" Kate whispered, but Milt shook his head vehemently.\n\n\"No, Kate. You know I support and help all my children, but this is wrong. If Paul realizes his mistake, and wants to get well but can't do it alone, I'll do everything in my power to help him. I'll find him the best counsel, the wisest priest. But I can do nothing while he obstinately refuses to even consider that what he is doing is sick.\"\n\n\"I can't change what I am, Dad,\" Paul made one more effort. \"I can't.\"\n\n\"Perhaps not. But we are men, not animals, Paul. That means we don't succumb to all our instincts. We have the mind and willpower to choose how we act. By your actions shall ye be known.\"\n\n\"Well, then.\" Paul stood up, feeling a little at a loss, now that the moment he'd dreaded for so long was finally upon him. \"I guess that's it.\"\n\n\"I guess that's it,\" Milt agreed heavily.\n\n\"Come on, Paul. You're coming home with me.\" George slung his arm protectively around Paul's shoulders, then turned back to Milt. \"You're wrong. You're wrong and you're cruel.\"\n\n\"I don't mean to be cruel,\" Milt said, but he didn't apologize.\n\n\"Uh, bye, Mom.\" Paul wasn't sure if he should say something about seeing her later. \"I'm sorry,\" he said finally.\n\nKate came over and hugged him, but neither said nor did anything to keep him there. Not that Paul had expected it. His mother might not have always agreed with his father, she might have sometimes done things behind Milt's back, but she had never, as far as Paul knew, openly defied him. In the Pappas home, Milt's word was law.\n\nHe waited numbly by George's car as George transferred his daughter's booster seat back from Milt's car, and Xenia took the other children back inside, then got in next to Kathy and laid his head back on the headrest, so that he was looking up at the gray sky through the back window. He knew Xenia was probably dying to know the details of what had transpired while she was outside with the kids, but she didn't ask and he was too exhausted to volunteer even the bare bones. She'd probably hear it all soon enough from George, anyway.\n\nWhen they reached George's house, Paul dropped his suitcase in the guest room and then went out to the back porch and sat on the steps. The air had a chilly nip that he'd almost forgotten existed after the spring and summer months in Greece, and he could smell smoke from a grill or fireplace somewhere nearby.\n\n\"You okay, Paulie?\" he heard George's voice behind him.\n\n\"Yeah. I was thinking I'd call Andy, tell him we got here safely, but it's two in the morning there. I should probably wait until tomorrow.\"\n\nGeorge came to sit next to him. \"You really think he's asleep?\"\n\n\"I don't know,\" Paul said listlessly. \"Even if he's not, I don't know if I want to go over what happened with Dad and Mom.\"\n\nGeorge gave him a brief, one-armed hug, then stood up again. \"Call him, Paul. Whatever the reason you're hesitating for, it's bullshit. Take it from me, your long-married brother. He won't mind, even you wake him. He'll mind a lot more if you don't.\"\n\nPaul waited until he heard the door click closed behind him, then dialed Andy's number on his phone. His first two attempts didn't go through. He'd dial one more time, and if he failed again, it was some sort of sign, he thought, wrapping one arm tightly around his raised knees and leaning his forehead on them.\n\n\"Hey, you!\" Andy's voice sounded wide awake and happy.\n\n\"Hey, you,\" Paul choked out around a sudden lump in his throat, and then, just like that, he was crying. He tried to stop, but he couldn't. \"I'll . . . I'll call you back,\" he said tightly.\n\n\"No! Just stay on. It's okay, honey eyes. I love you. It's okay.\"\n\nAndy went on murmuring nonsense in Paul's ear, and finally Paul cried himself out.\n\n\"Shit, I'm sorry. I didn't mean to break down on you,\" he said.\n\n\"That's okay. It was your dime, anyway,\" Andy said, and Paul could picture his quick smile. \"Things didn't go well, huh?\"\n\n\"About how I expected them to. Except that apparently my Dad already had a pretty poor opinion of me, even before.\" His voice was starting to thicken again, and he had to stop and breathe. \"He basically said I quit at everything I ever did. I mean, I always tried so hard, Andy, and I thought he at least respected me for that, but he just laid into me and . . .\" He stopped again, because that's what hurt the most, that unexpected attack.\n\n\"Ah, Paul. Parents will stay stupid things they don't even believe, if they think it'll help get a point across. We all do. It doesn't mean he meant it.\"\n\nPaul pressed his forehead harder onto his knees and squeezed the phone to his ear, as if that would somehow bring Andy closer.\n\n\"Where are you now?\" Andy asked.\n\n\"George's house. George was really great. He stood up for me. I'd expected John to be more understanding, because he's less conservative, and he was, I think, but George fought for me. He told my Dad he was cruel.\" He paused for a minute, then continued. \"He called you 'Paul's Andy'.\"\n\nAndy made a soft, surprised sound. \"Did he? He's smarter than I thought, then.\"\n\n\"Yeah.\"\n\n\"Honey eyes, come on home. Unless you think there's any chance of anybody changing their mind, in which case stay as long as you need to, I want you to come back here.\"\n\n\"Nobody's gonna change their mind. I guess I knew what would happen all along. It's just that as long as I stalled, it wouldn't be real.\"\n\n\"Then come home tonight. Tomorrow. On the first flight that'll get you here.\"\n\n\"I'm not sure I can change the ticket around again.\"\n\n\"Forget the damn ticket. Buy a new one if you have to. I'll cover it. Consider it a loan or an early birthday gift or whatever the hell your pride can live with, but let me do this for you.\"\n\nPaul took a deep breath and surrendered. \"Okay. I'll e-mail you the details, the moment I have them.\"\n\n\"Good. That's good, honey eyes. I'll be waiting for them,\" Andy said gruffly.\n\n---o-O-o---\n\nAndy crushed Paul to him and he didn't care who was watching or what they'd think of it. Paul clung back, his uneven breath loud in Andy's ear.\n\n\"Hey, you!\" Paul eventually whispered, and Andy squeezed harder for a few seconds, before finally stepping back.\n\n\"Hey, you. What took you so long? And where's your suitcase?\"\n\n\"That's what took me so long. Nobody knows. I had to wait in line and declare the loss. They'll send it on home, if they find it.\"\n\n\"Anything important in it?\"\n\n\"Well. A few pairs of that underwear you like so much,\" Paul replied and Andy laughed.\n\nPaul didn't say much in the car. He let Andy hold his hand whenever he wasn't changing gears, and he smiled at Andy's jokes, but he seemed sad, which Andy supposed was natural enough. They'd work through it. \n\nOnce they reached home, Paul went to take a shower and change, while Andy fixed him an omelet and opened a couple of beers.\n\n\"Oooh, fancy!\" Paul teased, when he came to sit down at the kitchen table. \"I should go away more often. Usually you just slap some scrambled eggs in front of me.\"\n\n\"Well, they start out life as omelets, too, so shut up. But yesterday I saw Ramsay do this thing, where he actually folded the omelet, rather than flip it, which really works a lot better for me, as you can tell. And you say I learn nothing from watching cooking shows.\"\n\nPaul stared at him. \"You didn't know you could fold an omelet?\"\n\n\"How would I? It's not like I stand around, watching people cook. I'm a busy businessman, you know.\"\n\n\"You wanna hear something?\" Paul asked after he'd finished his food and pushed the plate aside.\n\nAndy nodded.\n\n\"My mom had prepared this feast for me. All my favorite foods, meatless moussaka, kolokythokeftedes, tyropittakia. And I sat down with my family to eat and I thought that even if things went well, I wouldn't be around to see them very often anymore. It was my home, you know, just like this is yours, and it was hard to think of leaving.\"\n\nAndy waited on tenterhooks, while Paul took a sip of his beer. \"I want this to be your home,\" he finally burst out, because Paul was taking his own sweet time. \"Here, with me.\"\n\nPaul smiled. \"That's what I'm trying to tell you. It was hard, but leaving you would be a lot harder. Even if my Dad had accepted me, I'd have come back. I know you don't think so, but I would have.\"\n\nAndy stared raptly into Paul's eyes and wondered how he'd ever doubted him. \"I know,\" he said finally. \"I believe you.\"\n\nPaul stood up and came over to sit astride Andy's lap. \"On the plane, I kept on thinking that I'd tell you the moment I saw you. Then in the car I thought I'd tell you when we got in the house, then when I came out of the shower, but it's scary, you know? And I wanted to wait for the perfect moment, but now I just need to tell you, even if it's not so perfect.\"\n\nAndy cradled Paul's lean hips in his hands. \"Tell me what?\"\n\nPaul leaned down and kissed him. \"I love you, Andy,\" he said, and even though Andy already knew it, he felt a burst of happiness, as if he were finding it out for the first time. He assumed he'd most probably always feel the same way, every time Paul told him, no matter how many times he did so.\n\n\"I love you, too, honey eyes,\" he said, and from the smile in those eyes, he thought maybe Paul felt exactly the same way about hearing the words, and he swore he'd say them as frequently as he could for the rest of his life. "
    ],
    "authorname": "podga",
    "tags": [
        "gay romance",
        "gay love story",
        "gay drama",
        "gay novella"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/sweet-spot-ch-06"
}
{
    "title": "Danica: Epilogue",
    "pages": [
        "Author's Notes:\nThis story is erotic fantasy, set in a world of magic. I reserve the right to be listed as the author of this work, wherever it is posted. If found posted anywhere except Literotica.com with this note attached, this story is posted without my permission. &copy; Darkniciad 2000-2007\n\nI make use of modern weights and measures quite often in my work, because those are the weights and measures of my fantasy world. I know many fantasy readers prefer more archaic terms, and I hope those readers can overlook my use of miles, feet, and other such measures.\n\nPlease note that the form of witchcraft in my world is not meant to be true Wicca. Nor is it supposed to follow \"Charmed\" exactly. No offence or confusion is intended.\n\nYou really need to read the previous parts of the story to know the characters and the storyline. This tale follows Danica in her day-to-day adventures, with the greater plot emerging slowly at first. Think of it more as a serial than a novel, and you'll be in the right mindset.\n\nThis is an edited version of this tale, making use of what I've learned since starting to post at Literotica, and the services of my tireless editor, Roust Writer.\n\n\n{*****~~o~~0~~o~~*****}\n\nDanica knelt at her mother's grave, gently stroking the marker stone with one hand. Tears streamed down her face, but only the occasional sob shook her. Her mother's long illness had prepared Danica for this day long ago, as much as anyone could be prepared for the death of a parent.\n\nShe laid the flowers in front of the headstone, whispering, \"I love you, Mom. I'll miss you.\" Staring at the stone, Danica wondered, What would you think of me, if you could see me now?\n\nAs if sensing her sister's thoughts, Devan lay a hand on Danica's shoulder and softly said, \"She'd be proud of you, Danica. She always was proud of you. You were a good girl with an honest trade, and no mother could ask for more. I think she would be beaming if she could see you now, though. You stood up and did what was right, and you did it on your own.\"\n\nDanica looked up at her sister, \"You think so?\"\n\nDevan nodded and smiled, \"I know so.\"\n\nDanica rose to her feet, and Devan hugged her, whispering into her ear, \"I'm proud of you too, Danica. It broke my heart to see you hiding in my shadow, like it was your place, and not living up to your potential. I didn't know what to do, so I just tried to encourage you whenever I could.\"\n\n\"You were always so beautiful and powerful. I felt like nothing beside you,\" Danica responded.\n\n\"Now you know better.\" Nodding toward the others, gathered a respectful distance away while the sisters shared a private moment, Devan added, \"There's your proof. To them, I'm just Danica's sister, and that's the way it should be. I'm so glad to see you taking control of your life.\"\n\nDanica sighed, \"Zoraster gave me little choice.\"\n\n\"Don't worry about that right now. You can tell me more later.\" Hugging Danica again, Devan whispered, \"I was always jealous of your boobs, you know. I've seen men walk into walls and about knock themselves out staring at them.\"\n\nDanica chuckled and hugged her sister tighter. They both laughed when their stomachs rumbled in perfect unison.\n\n\"I think we both need something to eat,\" Devan remarked.\n\n\"Come on inside, and I'll make us something,\" Danica's father suggested.\n\nDanica looked over at her father and said, \"There's a reason Mom never let you near the kitchen, Dad. You can't boil water without burning it \u2013 I'm cooking. You and Daniel are going to take Brandon somewhere so you men won't be in our way.\"\n\nDaniel exclaimed, \"Thank the gods!\"\n\nScowling at his son, Danica's father warned, \"I'll remember that, Son. I think I can find your mother's recipe for boiled hay.\"\n\nDaniel held up his hands defensively and backed away, drawing a laugh from everyone.\n\nChuckling, Danica's father admitted, \"It will be nice to have some real food in this house for once, though.\"\n\nDanica looked over at Devan and said, \"I know you're almost as helpless as Dad, but you don't get off so easy. You'll be running to the root cellar for us.\"\n\nDevan groaned in response to that.\n\nDanica asked her father, \"Do you have any hands helping out right now?\"\n\n\"We told them to take a few days off, and that we'd send for them, when Devan came to get us.\"\n\n\"Okay, it's just us then.\" Turning to her assembled friends, Danica said, \"Let's go find out what we have and get started. I'm starving.\"\n\n{*****~~o~~0~~o~~*****}\n\nEbonar stood in Danica's strangely bare room, staring at the corpse of his Master. \"It appears you underestimated those two,\" he muttered. \"I have my instructions \u2013 things will continue as you ordered.\"\n\n\"Who are you to take his place?\"\n\nEbonar scowled and turned to face Camilla, who was standing in the doorway to Danica's abandoned room. Staring hard at her, his voice tightly controlled, Ebonar replied, \"I am in charge here, Camilla. Allow me to demonstrate.\"\n\nEbonar spoke a word of magic and Camilla collapsed to the floor on her knees, screaming and holding her head. The pain lasted for only moments, but it was more than long enough for Camilla to understand that this man indeed held secrets known only to Zoraster.\n\nTurning away from the kneeling woman, Ebonar ordered, \"Send servants to clean these rooms in one hour. After that, they are to be sealed, and only opened upon my orders. Spread the word that I am calling council for this evening as well, at the usual time. It is time for everyone to know that things will continue as always, under my direction. Close the door behind you.\"\n\n\"Y-yes, Master,\" Camilla replied, rising to obey the order.\n\nWhen she was gone, Ebonar lifted his foot from a knife-shaped scorch mark on the stone. Staring at it knowingly, he chanted a spell and caused the blemish to vanish. He then knelt to pick up the contorted body of Zoraster Arias.\n\n{*****~~o~~0~~o~~*****}\n\n\"That was a meal fit for a king,\" Danica's father sighed contentedly, \"I don't know if I'll be able to drag myself out of this chair and into bed tonight.\"\n\nMarlena started to speak, but paused and looked perplexed for a moment. She then said, \"It's a bit awkward not knowing your name.\"\n\n\"David,\" Danica's father replied, \"I hardly ever hear it, because the hands call me Sir, and the children call me Dad. Even Dora called me Dear most of the time. I haven't heard David with any regularity for forty years or more.\"\n\nDevan chuckled and said, \"Our family has a thing for names starting with D.\"\n\nMarlena smiled and said, \"I just want to thank you for your hospitality, David.\"\n\n\"Thank him in the morning, because we're staying the night,\" Danica announced.\n\n\"I think I can get up to bring in some beds if you girls will stay the night. It's been too long since either of you stayed, let alone both of you,\" David said with a wide smile.\n\n\"It will be a bit crowded,\" Devan warned.\n\nDaniel piped up and offered, \"Brandon can have my bed. I'll bunk with Dad.\"\n\nAndrea said, \"We don't want to impose.\"\n\nDavid gestured to his daughters, \"If it keeps both these girls here, and maybe gets me a good breakfast in the morning, I'll consider it a blessing rather than an imposition.\"\n\nBrandon stood with a great sigh. \"It ain't gonna get any easier to move. Show me where the bunks are, and where to put them, and I'll start moving them.\"\n\nDaniel stood as well, \"I'll show you, and I'll help.\"\n\nWhy the sudden urge to stay? Danica heard Devan thinking. Devan obviously meant for Danica to hear the thought, which was the equivalent of a mental shout.\n\nYou don't have to shout, Devan, I can hear you. I just feel like staying, and I want to talk to you later. There are some things I need to say to you before I start telling the whole story.\n\nI knew it, you're psionic, you haven't cast any spells.\n\nLater, Danica responded mentally, winking at her sister. She then turned to the other women and asked, \"Would you mind helping me with the dishes? We'll cheat a little with our magic, but it will still take a while.\"\n\n\"It's been too long since I've done any honest work,\" Celes responded and stood up. She then blew out a blast of air and said, \"It's been a while since I ate so well too. I don't think I'm in any better shape than anyone else.\"\n\nDanica's father stood and said, \"Well, let's get started moving those beds. My old back may not be good for lifting, but I can surely hold open doors for you younguns.\"\n\nBrandon laughed, \"It's been a while since I was called a youngun.\n\n\"You're a friend of my daughter, so you're a youngun,\" David laughed. \"Not so young that you can't share a few tankards with Daniel and I, though.\"\n\nDaniel beamed, \"If I knew you'd break out your cask, I'd bring my friends over more often.\"\n\nHis father snorted, \"Your friends aren't so well behaved.\"\n\nDanica laughed and said, \"You just don't know Brandon very well yet.\"\n\nBrandon affected a hurt expression, drawing a laugh from Danica and her friends. He joined in after a moment, and then followed Daniel to the door. Danica ushered the women into the kitchen at the same time.\n\n{*****~~o~~0~~o~~*****}\n\nDanica yawned, \"I feel dead on my feet.\" She stretched and tossed her bag of holding onto the bed, and then said, \"I'm sure Devan and I have nightshirts that will fit everyone.\"\n\n\"If mine haven't been eaten up by moths,\" Devan muttered, digging into her clothes chest.\n\nDanica asked, \"You don't have any in your bag?\"\n\n\"I keep a few spare robes, and a few pair of panties, but that's about it,\" Devan answered.\n\n\"If you can spare a pair of panties, I'd appreciate it. Mine are falling off me,\" Celes requested.\n\nDevan flipped open her bag and felt around for a moment, and then withdrew a pair of lace-trimmed red panties, holding them out to Celes.\n\nCeles chuckled and asked, \"For special occasions?\"\n\nTwitching her eyebrows, Devan replied, \"No, I have naughty ones for that.\"\n\nDanica sent a thought to her friends, I feel like I'm about to pass out, but I really need to talk to Devan tonight. I owe her several apologies, especially for being so judgmental about her being with other women. I feel terrible about it.\n\nWe'll be fine, go take care of it now. I don't want a repeat of you and Celes. Andrea thought to Danica, her mental voice still a little awkward, as she had not communicated with Danica often this way.\n\n\"Devan \u2013 I need to talk to you before we go to bed. Let's go out to the barn.\"\n\nDevan nodded, and then laughed. \"It will be a little odd walking out there together and not being dressed in two layers of clothing.\"\n\nDanica laughed as well, and then explained to the others who didn't understand the jest, \"We used to wear conservative clothing over more daring outfits to get past Mom when we went into town. We always stashed them in the barn.\"\n\nMarlena blushed and said, \"I suppose we all did that.\"\n\n\"We never got caught, though,\" Devan bragged with a wink.\n\n\"Mom knew, she told me, but she still made us go through the motions,\" Danica told her sister.\n\n\"Well, thanks for destroying my illusions about how clever I was,\" Devan responded, sticking her tongue out.\n\n\"Go on, we'll wait for you to get back,\" Celes said, making a shooing motion.\n\nDanica nodded toward the door, and Devan followed her. The walk to the barn was indeed nostalgic, and Danica found she was smiling despite being a little nervous about the talk with her sister. When they reached the barn, Danica opened the door and led Devan to a bale of hay, where they both sat down.\n\n\"Devan, I owe you some apologies.\"\n\n\"Danica, you don't have to...\"\n\n\"No, I do. I was terrible to you about a lot of things, but one of them has been really bothering me. I'm so sorry for treating you the way I have, because you liked being with other women.\"\n\nDevan smiled. \"It's okay, Danica. I know it isn't the easiest thing in the world to accept. It bothered me at first too, until I realized it was just as natural as being with a man. Why the change in heart?\"\n\nDanica blushed, and the reaction told Devan everything she needed to know. She guessed, \"Celes?\"\n\nDanica smiled, nodded, and said, \"Andrea and Marlena too, and a lot of others. Zoraster did things to me while he held me, but I know now that all of it was inside me anyway. I just wouldn't let it out. I think I was trying to be different from you in some small way.\"\n\nDevan winked and said, \"Well, that will certainly make it easier to talk to you sometimes. They're all beautiful women. I'm a bit jealous. Now, I have a question for you. Have you been magicking your boobs?\"\n\nDanica laughed and shook her head, and then held up a finger to indicate Devan should wait for a moment while she opened her robe.\n\nDevan asked, \"Well, what's that now?\"\n\n\"I found a woman who makes them, she calls them brassieres. I don't think I could live without them now.\"\n\n\"You're going to have to get me some. I like how they look all pushed up.\"\n\n\"They aren't bouncing all over the place either,\" Danica said as she closed her robe. \"I'm sorry for not letting you know what I was doing when I vanished, too. I know I should have, and all of this probably wouldn't have happened if I had.\"\n\n\"Just don't let it happen again, but you know, Mom always said that things happen for a reason.\"\n\n\"I've been hearing and saying that a lot lately,\" Danica said with a chuckle. \"Anyway, I'm sorry, Devan. I've treated you badly, and it was all for selfish reasons.\"\n\n\"I forgive you,\" Devan responded, and then yawned, \"I want to know more about what happened while you were gone, but I'm exhausted. Let's go to bed, we'll have plenty of time to talk about things later. I'm proud of you Danica, and I'm happy to see you confident and using all that ability you've always had.\"\n\n\"I would have never gotten through it without my friends. Celes, Brandon, Andrea, Marlena \u2013 they all supported me in their own ways, others too. I wish I could introduce you to Carolyn, Grant, Heather, Tari, Tonda \u2013 so many people have touched me in all those years.\"\n\nListening to the love in Danica's voice stung Devan a little. Her relationships were all spurious at best, and she had never really connected with anyone. Hearing the names of so many friends \u2013 made under the worst of circumstances \u2013 caused Devan to feel more than a little empty inside.\n\nDanica laid a hand on her sister's shoulder, \"Are you okay?\"\n\nDevan pushed the dark thoughts away and smiled. \"Yes, I'm just tired, let's go to bed.\"\n\n\"No need to walk,\" Danica said and held out her hand to Devan.\n\nDevan took it and they teleported back to their room.\n\nDevan nodded her head approvingly when they arrived. \"Now, how did you cast that spell so fast? I know the spell, but that wasn't all the words, or gestures.\"\n\n\"Celes and I can explain it. We picked it up at the Forge.\"\n\nDevan muttered, \"So you were there, then. I almost tracked you down, you know. The only thing that made me decide it wasn't you Cheron was talking about was that she said she had been with you. She's rather assertive, isn't she? I liked it.\"\n\nCeles said, \"I guess you got things out in the open, then. Good, I was having trouble keeping my eyes off you.\"\n\n\"Behave,\" Danica requested playfully, her face bright red.\n\nDevan laughed and winked at Celes. \"We're going to get along just fine.\"\n\nDanica turned back to her sister and replied, \"Yes, Cheron knows what she wants and goes right after it. Where did you meet her?\"\n\n\"Vladamir's \u2013 she's his right hand now.\"\n\n\"I'd like to see her again,\" Danica sighed.\n\n\"She'll probably be there when Darkni calls everyone to come listen to your story.\"\n\nDanica asked, \"Who is everyone?\"\n\n\"Thakkor, Mindblind, Vladamir \u2013 everybody. We need to know what you know, so we can counter what Zoraster started. His plans have a life of their own, and they'll cause havoc even without him directing them.\"\n\n\"It was going to be hard enough to tell this story to someone as powerful as Darkniciad. I'm going to throw up if I have to talk in front of Kings and Dukes,\" Danica lamented.\n\nDevan waved her hand in a dismissive gesture as she stripped off her robe. \"The meeting will be informal \u2013 all of them are. It probably won't be any different than sitting around talking to anybody else. I'll get you drunk if you get too nervous.\"\n\n\"You'll be fine, Danica. You remember everything, and you speak so well,\" Marlena asserted.\n\n\"She's right,\" Andrea agreed.\n\nDevan pulled on her nightshirt and said, \"There you go, listen to them. Don't you go back to thinking you're less than you are. I don't think I know half of how much you've grown yet.\"\n\nDanica took off her brassiere, smiling when she saw all three of her friends glance at her breasts, and then put on her nightshirt. \"I still think I'm going to throw up.\"\n\nDevan climbed into bed and said, \"We'll keep a bucket nearby then.\"\n\n\"You're terrible,\" Danica sighed as she climbed into bed.\n\n\"No, terrible would be sneaking out and trying to seduce that handsome Brandon you brought with you, while you were sleeping.\"\n\nDanica threw a pillow at her sister and then put out the lamp. Devan's mirth was short lived, and she lay awake for more than an hour, struggling with her inner demons in light of seeing the strong bonds of friendship and love between the women who shared the room with her and Danica.\n\n{*****~~o~~0~~o~~*****}\n\nA great deal of whispering and many arrogant stares greeted Ebonar as he strode into the council chamber. Stunned silence replaced the whispers when he sat down in the chair reserved for Zoraster at the head of the chamber.\n\n\"I'm sure you are all aware that Zoraster is dead. By his orders, all shall move forward without delay, under my direction.\"\n\n\"And who are you to sit in the Master's chair and speak with his voice,\" hissed one of the assembled wizards.\n\n\"I am his chosen successor, and I suggest you address me with a tone more becoming your station,\" Ebonar warned.\n\n\"We have nothing but your word to affirm this succession,\" another wizard uttered, but this one maintained a respectful tone.\n\n\"Zoraster ruled because he had power,\" the first dissenter sneered, \"I will not follow some puppet who claims Zoraster's favor. I think it is time for a new order here.\"\n\nEbonar stood, and a nimbus of crackling energy sprang up around his muscled frame. \"Zoraster ruled because he had the foresight and intelligence to do so. True, his power far outstripped that of any in this room \u2013 as does mine.\" With that, Ebonar gestured at the arrogant wizard that had just defied him.\n\nThe man screamed as he was hurtled over the table behind him by a hissing bolt of crimson power. When the wizard came to rest, he was unconscious \u2013 his robes smoking.\n\nEbonar scanned the assembly. \"I trust there are no other objections?\"\n\nThe cowed servants of Zoraster immediately tore their eyes from the smoldering wizard, one of the most powerful amongst them, and affirmed their allegiance.\n\n\"Good,\" Ebonar chuckled and sat down, \"My name is Ebonar, but you shall address me as Master, even as you did my Master before me. Now, deliver your reports.\"\n\n{*****~~o~~0~~o~~*****}\n\nDanica awoke to the smell of coffee wafting through the house. She looked around and saw that Devan was already up, washing before she got dressed. The others were rousing as well.\n\nDanica was closest to the door when someone knocked on it, so she went to answer it, opening the door a crack and peeking out to see it was Brandon.\n\n\"Your Pa may not be able to cook, but he damn sure can brew coffee. You ladies better get up before the first pot is gone. Have a nice sleepover?\" He then tried to peek around Danica into the room.\n\nDanica rolled her eyes at him and shut the door, saying, \"We'll be out in a few minutes.\"\n\nDevan laughed and said, \"You should have just thrown the door open.\" She swatted her bottom with a sharp crack then and said, \"He probably would have passed out and then there would be one less person drinking up all the coffee.\"",
        "Danica shook her head. \"I'm sure he has the endurance to stay conscious.\" She twitched her eyebrows and smiled at Devan through the reflection in the mirror.\n\nAndrea laughed, and Marlena chuckled, though the redheaded illusionist blushed furiously. Celes just rolled her eyes.\n\nDevan looked at the other women with a curious smile and muttered, \"My, my...\"\n\nBetween Danica and Devan, they managed to find clean clothing that would fit everyone, and coffee soon had them all awake and moving. Devan offered to take word to the farm hands that they should return the next day, and Danica pressed some coins on her to buy clothing for the other women who had little to nothing of their own. Devan happened to see just how much coin was in the bag Danica pulled the money from and remarked about it, to which Danica mischievously replied that she had found some good fortune over the years.\n\nDanica made breakfast, and after they had all eaten, she told her father and brother about what had happened to her over the last several years. She glossed over most of the darker aspects of her enslavement, especially those that were sexual in nature, but even her abbreviated tale impressed the gravity of what she had endured upon her family.\n\n\"Your mother would be proud of you, Danica. I know I am,\" her father asserted when Danica finished.\n\nDanica hugged her father and said, \"Thank you, Dad. I made a dumb mistake, but in the end I did what I had to do \u2013 what I thought was right \u2013 just like you and Mom taught me.\"\n\nDavid signaled to his older daughter and son, and they walked over to join in the hug. When he leaned back, David said, \"I'm proud of all you kids. You girls need to come see us more often, though.\" Looking over their shoulders at the others in the room, he said, \"You all fell free to drop by anytime, too. Any friend of my younguns' is always welcome in this house.\"\n\nThe parting after lunch was tearful, Devan uncharacteristically hugging her father and brother for a very long time. Once they said goodbye, they left on the wings of magic to Darkniciad's island once more.\n\nDevan went to inform Darkni of their return, so that he might summon the rulers of Egoria to hear Danica's story. It would take several hours for all the nobles to attend to their business at home and journey by magic to the island, so Devan gave them all a tour of the tropical isle, and the school upon it.\n\n\"This is a lot like Zoraster's place, at least in the organization. He may have been a mad, evil bastard, but he knew how to establish a place of learning,\" Celes remarked as they stood in the main library.\n\n\"This is all so overwhelming,\" Andrea remarked.\n\nCeles turned to the blonde woman and said, \"There's no place like this for a witch to study her craft, that's for sure. We're going to have a difficult time with our mothers gone, Andrea.\"\n\nDevan advised, \"We have a few witches studying here, actually. They aren't natural practitioners of the craft like the two of you, but they can probably help set you on the right path. There is no manner of magic that we don't welcome and nurture here.\" \n\n\"We should go get your mother's book, Celes,\" Danica suggested.\n\n\"Aye, we should at that,\" Celes agreed.\n\n\"I never even saw my mother's book, if she had one. I'm going to be more lost than you,\" Andrea said and sighed.\n\n\"Perhaps we can help with that,\" said a voice coming from the open air before the assembled group.\n\nDevan started and raised her hands to meet any threat with her magic, as did Danica \u2013 until she saw Celes trembling and starting to tear up.\n\nMotes of light swirled in front of them, coalescing into the transparent image of a beautiful woman with raven-dark hair, and another with pale blonde tresses.\n\n\"M-mom?\" Andrea and Celes both stammered in stunned surprise.\n\n\"I'm so proud of you, Celes,\" the dark-haired image of her mother announced.\n\n\"And I'm so proud of you, Andrea,\" the other woman agreed. They both looked at each other then, and held out their hands before them, palm up. Thick, leather-bound tomes appeared in the hands of the women. Unlike those who held them, the books were solid and real.\n\nIn formal tones, Celes' mother said, \"Come, Celes, take the book that is the legacy of the Hartwell line of witches. You do us all proud, and you are destined to do great things with your powers.\"\n\nAndrea's mother spoke next, in the same formal tones, \"You too have a great destiny before you, Andrea. Take the book that is your birthright as one of the Trueheart witches.\"\n\nThe women stepped forward and took the books, and almost immediately tried to take their mother's hands. Both looked disappointed when their hands passed through the intangible hands of the elder witches.\n\nBoth of the transparent women looked as pained as their daughters did. Andrea's mother said, \"I wish I could hug you, dear. We've only been allowed these few moments to set you on your path.\"\n\nCeles' mother spoke next, \"My dear daughter, there is a spell in the book that will free your love's soul from her imprisonment. You'll know it when you see it.\"\n\nThe elder witches then smiled sadly and Celes' mother said, \"We have to go. Know that we all watch over you. I love you, Celes.\"\n\n\"I love you too Mother, thank you.\"\n\n\"And I love you, Andrea.\"\n\n\"I miss you, Mom. I love you.\"\n\nThe two women then joined hands, the images of them becoming more transparent by the moment. The lights swirled around them again, and the voice of Andrea's mother drifted back to them as the women vanished. \"We'll always be with you, my beloved daughter.\"\n\nDanica and Marlena moved forward immediately to comfort the two crying women, but saw that they both were smiling as they cried. Danica asked them, \"Are you okay?\"\n\nCeles nodded and clutched the tome she held to her breast. \"I can feel Mother, and Grandmother, and all the grandmothers before that I never knew. It's like they never left. Their presence is here, in this book. Is it the same for you, Andrea?\"\n\nSmiling and laughing through her tears, Andrea replied, \"Yes, I can feel them all.\"\n\n\"Well, that's something you don't see every day,\" Brandon mused.\n\n\"Darkni is going to have an apoplexy. He's especially proud of his wards against spirits,\" Devan said and then laughed.\n\n\"I want to go look at this right now, there's a spell in here I need to find immediately,\" Celes declared.\n\nDanica nodded, tears filling her eyes as well. \"Back to our rooms then.\"\n\n{*****~~o~~0~~o~~*****}\n\nSwelling with pride and love, the two witches held hands and watched over their daughters. Nearby stood a woman with alien features \u2013 the oddity only serving to increase her undeniable beauty. Turning to the third woman, Celes' mother asked, \"They are chosen ones then?\"\n\nThe third woman nodded. \"They will face great trials, but the power within them \u2013 and the wisdom of those who came before them \u2013 will see them through.\"\n\nAndrea's mother asked, \"Who is the third, then?\"\n\nThe strange, beautiful woman smiled and replied, \"In time, they will find each other. Soon, I would think. Until then, I think they will find a way to fill the void, where necessary.\"\n\n{*****~~o~~0~~o~~*****}\n\nCeles flipped through her book, as did Andrea. Andrea remarked, \"I recognize my mother's handwriting in places. Some of this script is so beautiful, and the dates boggle my mind.\"\n\nCeles grunted, a sound meant to convey agreement. \"I think every witch who has ever held this book has added to it. It goes back hundreds of years.\" She suddenly stopped turning pages and stared at the one before her, \"This is it.\"\n\nEveryone gathered to look over Celes' shoulder, seeing flowing script at the top of the page that read, To free a trapped soul.\n\nCeles shoulders fell and she said, \"It says that the spell has to be chanted in unison by three witches.\"\n\nDevan offered, \"You don't have to be born a witch to use witchcraft. You just have to have one of the spirits be agreeable with you. Maybe one of us can read it.\"\n\nAndrea and Celes both looked at each other and then Celes said, \"Danica, will you read the spell with us? The spirits that empower witchcraft are nature entities, and I think you're more in tune with them than anyone else. Remember what you told me about the Nymphs?\"\n\n\"They did say that their Mistress liked me,\" Danica muttered. \"Of course, I'll try.\"\n\nCeles left the book open where they all could see it, and then sat the sphere that held her love's soul contained upon the table nearby. Andrea and Danica came to stand on either side of Celes, and they all read through the short chant that should bring the magic into being.\n\nDanica took Celes' hand and told her, \"I think I have enough of it memorized to keep up.\"\n\nCeles smiled, and then turned to Andrea. The blonde witch nodded, taking Celes' other hand at the same time.\n\nCeles said, \"I'll squeeze your hands when I'm about to start.\" She then took a deep breath and closed her eyes for a moment. When her eyes opened, she looked down at the book and squeezed the hands of her friends, beginning the chant.\n\n<blockquote>For one who is imprisoned - by arts most dark\nOn life's final journey - not free to embark\nWe ask for the power - we witches three\nTo break these foul bonds - a soul to free</blockquote>\n\nThe sphere upon the table began to glow with a light the color of new leaves. At the same time, it vibrated slightly for a moment, and then burst. A swirl of lights emerged from the sphere, and coalesced into the image of a dark-haired, lush woman wearing a wide smile.\n\nThe woman clutched her hands over her heart and said, \"Celes, thank you. Know I will always watch over you as well, and I shall always love you. Don't mourn me, and don't save all your love for me. You have more than enough to share.\"\n\nCeles sobbed and said, \"I'm so sorry for what he did to you.\"\n\n\"I'm free now, my love. I'm going to be with my mother, and all the witches of my line. I'm happy. I'll miss being next to you, but I know you have a great destiny before you, and I'll be so happy watching you fulfill it.\"\n\n\"I don't want you to go,\" Celes sobbed.\n\n\"I don't want to go either, but I must \u2013 they are calling. I should have been there a long time ago, and everyone is impatient to see me.\"\n\nCeles wiped her eyes as the image of her love faded, the now familiar lights swirling about it, \"I'll think about you, always.\"\n\nA voice drifted back to Celes as the image vanished, \"Just don't scream out my name when you reach your peak with someone else. That's terribly impolite, you know?\"\n\nCeles laughed, and the others joined in. Wiping the tears from her eyes again, Celes said, \"I've missed her teasing so much, she must have known it.\"\n\n\"We'll try to fill the void, as long as you remember to scream the right names,\" Danica said with obvious mischief in her voice.\n\nCeles slapped her playfully, and then pulled both Danica and Andrea into a hug.\n\n{*****~~o~~0~~o~~*****}\n\nDanica peeked into the door leading to Darkniciad's large common room, and then just as quickly pulled her head back. \"I can't do this, Devan. I don't even know how to talk in front of Nobles.\"\n\nDevan rolled her eyes, but she was smiling at the same time. \"Do you see any crowns in there, Danica? This is more a gathering of friends than Nobles. We're dressed more formally than anybody else is.\"\n\n\"It's a bit daunting, isn't it,\" said a blonde woman who walked up from behind, laying a hand upon Danica's shoulder.\n\nDanica nodded her head nervously to the woman. \"Have you ever had to talk in front of a King? I know I'm going to throw up.\"\n\nThe woman smiled and let out a little laugh. \"Yes, I have as a matter of fact. I probably felt pretty much the same as you do. Christi and Alicia both tried to calm me down, like Devan is doing for you, but it didn't do any good \u2013 until I actually started speaking. You'll find that this is a rather special group.\"\n\nDevan was smiling knowingly when she shook Danica's other shoulder. \"See, now just get in there. Everyone else is waiting already. Andrea walked right in, as if it were something she did every day. Besides, you've already talked to the Baroness of Dalebord.\"\n\nDanica's eyes squinted in confusion and she said, \"I've talked to...\" The words trailed off and she turned back to the blonde woman.\n\nSmiling, the Baroness said, \"Just call me Arilee. You'll find that we like to leave our titles at home, and we're not over fond of them even when we're there. Come in whenever you're ready. I'll walk with you, if you would like me to.\"\n\nDanica chuckled, and then asked, \"Are they all like you?\"\n\nArilee replied, \"If anything, they stand less on ceremony than I do, especially Cerebus and Vladamir. Christi asked me to apologize for not coming, but she's busy with her youngest.\"\n\n\"The Duchess of Cratel, Mindblind's wife,\" Devan explained.\n\n\"And my dearest friend,\" Arilee added with a smile.\n\nDanica took a deep breath and said, \"Okay, I guess I should get this over with. You'll catch me if I pass out, won't you?\"\n\nDevan laughed and swatted her sister on the behind. \"Just go, already.\"\n\nDanica opened the door and quickly stepped into the room, before her nerve failed her.\n\n\"Welcome, Danica. It is good to meet you after so many years of Devan speaking about you,\" Darkniciad said, rising from his chair. Danica thought he looked a great deal like the old grey bearded Master of the school where she had first learned magic.\n\n\"I recognize you from the Forge,\" said Mindblind, who Danica also recognized from there, \"You were blonde, but everything else matches.\"\n\n\"It certainly does,\" purred Cheron, rising from her chair and walking quickly to Danica.\n\n\"Cheron!\" Danica exclaimed, opening her arms wide to hug the woman.\n\nThey embraced, and Cheron whispered into Danica's ear, \"I like you with red hair. I'll have to see how it looks down below soon.\"\n\nDanica's face burned, but she laughed quietly. Turning to the Duke of Cratel, she said, \"Thank you, I probably wouldn't be here if you hadn't arrived with your warriors at the Forge when you did.\"\n\nThe broad-shouldered man smiled. \"Hey, no problem. Like I said then, my boys needed a good scrap \u2013 they were gettin' soft.\"\n\n\"Come sit down,\" an older \u2013 but still stunningly beautiful \u2013 blonde woman said, reaching for a wine decanter. \"I'll pour you some wine. I know you're probably nervous.\"\n\n\"That's the Queen, Alicia,\" Devan explained, \"See \u2013 they're all just like anyone else.\" She then took her sister's hand and led her to the chair.\n\nThe Queen handed Danica the wine, and Danica took a sip once she sat down. Her eyes lit up and she asked, \"What is this?\"\n\nCheron nudged a powerful looking man with a boyish face as she sat down next to him. \"That's Vladamir's latest experiment, peach wine. Be careful, it has a kick like a mule, and it sneaks up on you.\"\n\nDanica looked around, knowing that she was surrounded by powerful wizards, the heads of clerical orders, Kings, Dukes, and all manner of important people. They were all dressed in common clothing, however, and wore expressions that indeed hinted at a meeting of friends, rather than a council of war.\n\nAndrea and Celes were talking with a handsome man with a drooping mustache, and his dark-haired wife. Marlena chatted with the dusky-skinned wizard, Ashtar. Brandon was laughing at something the man had said that was sitting in the chair next to the Queen, who Danica guessed was King Thakkorias. Seeing all her friends at ease helped dull Danica's nervous edge, and she soon joined in the conversation.\n\nWhen Devan urged that they should probably attend to the business at hand, Danica's fear surged again for a moment. She found that \u2013 just as the Baroness Arilee had suggested \u2013 it became easier every second.\n\nMany hours passed before Danica and the others who had escaped Zoraster finished their tale.\n\n\"This is all quite remarkable,\" Darkniciad observed when Danica finished describing their final escape from Zoraster's inner sanctum. \"I should like to meet this guardian, and see this odd stone.\"\n\nCeles suddenly raised her head and looked at Danica. \"Danica, can you remember where that island is?\"\n\nDanica opened her mouth to say she did, but then paused when she realized that she couldn't remember either. \"No, I don't. I remember being there, but I can't visualize the location. It's like it is in a fog in my mind.\"\n\nDarkniciad nodded. \"Hmm, it appears we are not yet ready to meet this odd guardian. It appears he serves the cause of right, so we shall simply have to trust he will continue to do so.\"\n\n\"I always knew you had more potential than you ever realized,\" Devan commented, \"But I had no idea the abilities you had hiding within you. I don't know how you managed to keep such power suppressed for all those years.\"\n\nDanica smiled weakly. \"Zoraster forced me to look deep inside myself and confront a lot of demons.\"\n\nDarkniciad stroked his beard and said, \"You have left much unsaid, and I'm sure the reasons are quite personal, so I shall not press. You have given us much to think on, Danica, and surely struck a blow to the dark designs of Zoraster.\"\n\nArilee smiled and said, \"If you ever need to talk about those other things, my door is always open. My demons were not nearly as frightening as yours, but I fought them none the less.\"\n\nAlicia added, \"My door is always open as well, and I'm sure the same holds true for every woman in this room.\"\n\nDanica smiled and said, \"Thank you all. I may need to talk some day.\"\n\nMindblind sat back with a grunt. \"Any chance of scaring up some chow, Darkni? I'm starving. Did you bring any beer with you, Vlad?\"\n\nVladamir smiled broadly. \"Of course, my brother, such vital supplies should never be left behind on a journey.\"\n\nThe men in the room grunted their approval, and the women rolled their eyes. Darkniciad chuckled and said, \"I shall have something brought immediately. We will put aside our concerns for now, and welcome the newcomers to our council, properly. It has been too long since we spent time in fellowship.\"\n\n{*****~~o~~0~~o~~*****}\n\nAs the day progressed, Danica grew more at ease by the moment. Despite being men and women of power, those assembled in the common room proved beyond any doubt that they were not absorbed in the trappings of that power.\n\nA stray thought from Marlena caused Danica to cover her mouth and stifle a laugh. The illusionist was speaking with Vladamir and Cheron, and Danica had little doubt that Marlena would be missing from the room they shared this night. Cheron was very persuasive, and it seemed her paramour was no less so.\n\nDanica walked up to her sister, noticing that Devan was once again sizing up Brandon from across the room. Tapping her sister on the shoulder, Danica whispered, \"He's a little difficult to ignore, isn't he?\"\n\nDevan actually blushed, something Danica had not seen happen in a very long time. \"Sorry, you know how I am. I just can't see a handsome man, or woman, and not wonder.\"\n\nDanica nodded toward Marlena. \"I think she's going to be busy tonight.\"\n\nDevan looked over to where Marlena chatted with the two clerics and chuckled. \"I don't doubt it.\"\n\n\"I think Celes, Andrea, and I might want a little private time tonight. Why don't you distract Brandon for us? I have to warn you, he's enthusiastic.\"\n\nDevan concentrated on her sister's expression and asked, \"It wouldn't bother you?\"\n\nDanica shook her head and replied, \"He's a big boy.\" Then she twitched her eyebrows and added, \"A very big boy. He can make up his own mind who he wants to be with. I'm not in competition with you any more, Devan. Just don't try to hog him all for yourself.\"\n\nDevan licked her lips and said, \"Well, if you insist.\"\n\nDanica laughed. \"I only have so much endurance. I wouldn't want him to be lonely.\"\n\nTurning back to her sister, Devan asked, \"So, you aren't looking for love anymore?\"",
        "Danica shook her head and said \u2013 with a bright smile, \"No, I've found it.\"\n\n{*****~~o~~0~~o~~*****}\n\nCamilla entered the room of scrying mirrors, finding it disconcerting to see the enigmatic Ebonar seated there instead of Zoraster. She bowed and said, \"You summoned me, Master?\" Calling the man Master was even more disquieting to Camilla, who had served Zoraster for so long.\n\n\"Summon artisans, men of skill \u2013 but expendable. Send them to the council chamber on the morrow at high sun.\"\n\nCamilla bowed again. \"Of course, Master.\"\n\n\"Bring our most accomplished earth wizards to my sitting room immediately, and when I have dismissed them to their duties, bring the Master of the thieves to me.\"\n\n\"It shall be so, Master,\" Camilla responded, curiosity obvious in her voice.\n\nEbonar turned to face his servant, smiling broadly. \"I hear the question in your voice. The Master would be pleased that you continue to expand your horizons, casting aside the state of stagnant mediocrity in which you lingered during your previous life. I believe it is time for an old wrong to be righted. You will see as things proceed.\"\n\nThe man sounded so much like Zoraster that it caught Camilla off guard, although it did inspire confidence in her new Master. \"I eagerly await the results of your designs, Master.\"\n\nEbonar laughed \u2013 a booming sound that echoed from the walls of the room. \"Few will share your eagerness, once I have resurrected the Guild of Murder.\"\n\n{*****~~o~~0~~o~~*****}\n\n\"Your command of magic amazes me. I have some skill, but it is nothing compared to...\" Arilee broke off in mid-sentence and let out a little chuckle, looking over Danica's shoulder.\n\nDanica turned to see Cheron leading Marlena out of the common room, Vladamir walking at their side.\n\n\"Vladamir and Cheron have made another conquest, I believe,\" Ari laughed quietly.\n\n\"I saw it coming earlier,\" Danica responded, \"I know Cheron, and she's hard to resist.\"\n\n\"I've been tempted too, but we've just never found the time.\" Nodding toward Brandon and Devan, Ari said, \"I think those two will be leaving our company soon, as well.\"\n\nDanica chuckled. \"They both were just shy of asking my permission to sleep together.\"\n\nArilee stroked Danica's arm. \"They care about you, and they don't want to hurt you.\"\n\n\"It was strange coming from them, though, especially Devan.\" The touch of Arilee's hand sent a tingle up Danica's spine. The Baroness had an innocent beauty that time could never touch, and Danica's body was responding \u2013 strongly.\n\nAri shivered and whispered, \"Oh my, I'm being tempted again,\" looking into Danica's eyes.\n\nDanica smiled and said, \"Sorry, it's the Awakening. There is just a lot of sexual energy in the room. Even the King and Queen look eager to get away to somewhere private. Once I'm even slightly aroused, the Awakening just stokes up everyone else's desires around me.\"\n\n\"I don't think it is that alone, you are a very sensual woman. You need to come to my keep or Blackhawk Hall sometime. Christi loves a woman with red hair, and so do I,\" Arilee whispered huskily, and then covered her mouth and blushed. \"Well, perhaps the magic is affecting me. I don't usually talk like that. I do mean it though.\"\n\n\"It amazes me how many women feel like we do. I thought I was all alone in the world. I even thought terrible things about my sister until I discovered it was in me too,\" Danica mused.\n\t\t\t\t\t\t\t\t\t\t\n\"We are a unique group, but I think it is a desire all women have \u2013 to some small extent. We are, after all, quite a bit prettier than men, and tend to smell better.\"\n\nThe two women laughed, and then Danica noticed Celes and Andrea whispering together on a couch across the room. \"I'll have to come visit, certainly,\" Danica said with mischief in her voice, adding a wink to emphasize it. \"There's something that has been waiting too long that I need to attend to tonight, though.\"\n\nArilee glanced at Andrea and Celes, \"They've never been together, then?\"\n\nDanica shook her head. \"Celes always desired her, but she was cursed in that old body. As to Andrea, I don't see how anyone could resist Celes.\"\n\nArilee's face broke out into a crooked grin. \"You should bring them when you visit.\"\n\nDanica laughed, and then saw Darkniciad approaching from the doorway. He had left the gathering to examine the clones some time earlier, and he wore a pleased smile now as he approached.\n\n\"I have broken Zoraster's enchantments upon them. For now, I am leaving them slumbering, because lingering traces of the magic will persist for some days.\" Darkni sighed then, and looked back over his shoulder, \"Would that Zoraster had resisted the temptation of evil. His skill in magic and his mind are nearly without parallel. I am amazed by the advances he made in cloning magic.\"\n\nDanica asked, \"Will they be... What will they be like, now?\"\n\nDarkniciad's brow furrowed. \"My guess is that they will be much like children. I would assume that they will learn more quickly than the average child, however. Zoraster's manipulation of their minds and insertion of memories and feelings provide them with a development reference normal children do not possess.\"\n\n\"Will they be like us \u2013 the people they were copied from, I mean?\"\n\n\"Only to some extent,\" Darkni replied, \"The nature of one's upbringing has as much to do with who we become as what we are born with. I have little doubt that they all will possess some skill in magic, and the clones of you will likely have psionic powers as well. They will all need to be carefully nurtured, because their powers will develop far before their minds. The normal controls nature places upon such abilities has been broken by Zoraster's manipulation, and they could endanger themselves or others unless taught to control their abilities.\"\n\nDanica asked, \"Did I do the right thing, bringing them with me?\"\n\nBefore the wizard could answer, Arilee interjected, \"You followed your heart. There can never be wrong in doing that.\"\n\nDarkni smiled and said, \"I could not have said it any better. I believe there may be means to suppress their abilities until they are prepared to deal with them. It will be fascinating to see how they differ from you as they grow.\"\n\n\"I hope they aren't as much trouble as Devan and I were,\" Danica sighed.\n\n\"Every parent wishes that,\" Darkniciad noted with amusement.\n\n\"I gave up on having children years ago, and now I have a dozen,\" Danica remarked with equal amusement.\n\n\"I offer any aid I may provide. Now, I believe I will join my wife, as I can see irritation in her eyes,\" Darkniciad said, and then nodded before crossing the room toward the now-smiling woman.\n\n\"I will probably be going soon,\" Arilee said when Danica turned back to her, \"Cerebus looks anxious to return to his wife, and I'm having a little difficulty thinking about anything else myself.\"\n\nDanica asked the Baroness, \"How does your husband feel about... You know?\"\n\nArilee smiled. \"We are not yet married. He has found some difficulty in asking the question. I'm in the process of pushing him gently in that direction now. Men are so silly and stubborn. As to your question, he understands my needs and shares them.\" She then added, in an amused tone, \"Christi did much to persuade him in the benefits of sharing your love.\"\n\n\"I guess there is some hope, then.\"\n\nArilee raised Danica's hand to her lips and kissed it. \"True love accepts us for what we are, and does not judge. I think your friends seek your company.\"\n\nDanica turned and saw Andrea gesturing for her to come join them. She also saw Devan leading Brandon out of the room, as well as the King and Queen rising to leave.\n\nArilee asked, \"If I thought about the teleportation patterns in my Keep and the Hall, could you see them in my mind?\"\n\n\"Yes, I did that with Devan earlier.\"\n\nAri closed her eyes and visualized the pattern to her own keep, and when Danica indicated that she had it, the Baroness thought about the one in Blackhawk Hall. As soon as Danica said that she knew that one as well, Arilee opened her eyes and said, \"You will try to come visit?\"\n\nDanica's mental connection to the Baroness was still partially there, and so she felt Arilee's desire acutely when the woman spoke. Shivering slightly from the feeling, Danica replied, \"I think it will be hard not to.\"\n\nArilee smiled and walked to where Ashtar was speaking with Duke Cerebus. Danica went to join Andrea and Celes, feeling the desire from them both washing over her long before she reached them. Danica licked her lips in anticipation, and thought that they would be returning to the privacy of their rooms soon.\n\n{*****~~o~~0~~o~~*****}\n\nEbonar smiled as he watched the Guildmaster of the thieves leave. Within a few days, the most stealthy and deadly of thieves within the country would arrive to take their place in the new Guild of Murder. As they bowed to pledge their allegiance to the altar of Blorcasir that Ebonar had ordered constructed, the dead god's power would grow. Soon, the deity would regain the power lost in the purge of his servants long before.\n\nOnly now, Godsbane enslaved the power of the god, to serve he who held it.\n\nEbonar's smile grew wider as the servant he had ordered to attend him immediately upon the Guildmaster's exit entered the room. With full pouting lips and a hefty bosom, the woman raised his ardor immediately.\n\nRising, the evidence of his arousal plainly visible, Ebonar instructed, \"Close the door. I believe there is a special service you may perform for me, which you should find most pleasurable to undertake.\"\n\nThe woman seductively leaned against the door as she pushed it closed, raising her arms above her head to enhance the swell of her breasts. \"How may I serve you, Master?\" She asked suggestively.\n\nEbonar pulled his shirt off, seeing the woman strutting toward him and licking her lips. She unbuttoned her blouse as she approached, opening the buttons quickly to reveal her breasts.\n\n\"I believe you have anticipated my needs,\" Ebonar growled huskily, and then stepped forward to jerk the blouse from the woman's body, popping off the remaining buttons to clatter on the floor at his feet.\n\n{*****~~o~~0~~o~~*****}\n\nDanica closed the door, the sexual tension between her, Celes, and Andrea almost palatable in the air. Andrea and Celes turned to look at each other, deep desire in their eyes, and Danica moaned approvingly.\n\n\"She's so beautiful, isn't she Andrea?\"\n\nAndrea smiled and softly said, \"I can see why you were both so tortured when she was under Zoraster's curse.\"\n\nDanica moved in close and kissed Andrea's neck, whispering into her ear, \"There's nothing making you wait, though.\"\n\n\"I've wanted to be with you as much as Danica,\" Celes said breathlessly, and then leaned in to kiss the blonde woman she had admired for so long.\n\nDanica moaned again, her back arching slightly and her body tingling as she watched her friends kiss. She reached out and stroked their bottoms while their lips and tongues met in a carefully restrained dance of mutual need.\n\nThey broke from the kiss, their eyes still locked on each other, and their hands still gently roaming over each other's backs. Danica leaned in closer, and they both turned to kiss her in turn, first Andrea, and then Celes. Danica smiled and said, \"We're a little overdressed, aren't we?\"\n\nCeles pulled her hands from Andrea's back, sliding them slowly around the woman's waist. She then inched her fingertips under Andrea's skirt, pulling up the tail of the blonde's blouse with soft tugs. When the bottom of the blouse hung free, Celes tugged it upward. Andrea raised her arms when the blouse reached the base of her breasts, and Celes sighed in contentment when the cloth slid away from Andrea's firm globes. She quickly pulled the garment away, tossing it negligently to the floor and drinking in the sight of Andrea's bared breasts, flushed rosy with desire.\n\nAndrea hooked her thumbs under the material of her skirt and pulled it down off her hips, stepping out of the cloth when it pooled at her ankles. Watching with as much rapt attention as Celes, Danica could see the slightly darker spot of dampness on Andrea's panties.\n\nAndrea reached out and grabbed the tie of Celes' robes at her waist, tugging the bowed knot undone with a slow pull. Celes unhooked the closures of her robe from the top, while Andrea worked from the bottom. Celes' robes soon fell to the floor in a whisper of cloth, leaving her nude save for her panties as well. The panties Celes wore had a spot of dampness matching the one between Andrea's legs.\n\nDanica clenched her thighs tight, swearing that the heat rising from her loins was about to ignite her clothing. She pulled at the tie of her own robe, quickly pulling the closures undone and shedding the stifling garment as Andrea and Celes moved together to kiss once more.\n\nAndrea glanced over when her lips parted from Celes', seeing Danica's robe fall to the floor. She smiled at Celes, and then turned to take a step toward Danica. Reaching around behind the redhead, Andrea unhooked the clasp of Danica's brassiere, freeing the heavy breasts it contained. Celes stepped around Danica, dragging her fingertips over the woman's waist as she moved, and then reached up to pull the straps of the brassiere down off Danica's shoulders. Andrea grasped the straps then, and pulled them down Danica's arms when she extended them forward.\n\nDanica leaned her head back, closing her eyes when Celes kissed her neck from behind. She then twitched when Andrea's lips found the soft skin of her neck from the front a moment later.\n\nStill shuddering from the touch of their lips, Danica turned sideways and took one of each of her friends' hands, tugging them toward the nearest bed. When they reached it, Celes glided in behind Andrea and tugged the woman's panties down off her hips. As the cloth fell to Andrea's ankles, Celes reached around and brushed her fingers over the downy-soft blonde curls adorning the woman's mound.\n\nAndrea leaned back with a whimper of pleasure, feeling the hard tips of Celes' breasts pressing against her back. She turned then and pulled down Celes' panties, immediately pulling the dark-haired beauty close and kissing her. Andrea pushed her hips forward, her blonde curls mingling with Celes' dark triangle of hair and sending little tingles of pleasure through them both.\n\nDanica let her panties fall to the floor and stepped out of them. Celes glanced at Danica as she broke from the kiss with Andrea, and then glanced at the blonde's breasts with a smile. Danica took the cue and moved in close, leaning down to swirl her tongue over Andrea's right nipple while Celes suckled the left between her lips.\n\nAndrea moaned in contentment and let her hands glide over both women's backs as they tantalized the pebbled flesh with their lips. Danica put her hand on Andrea's thigh, pushing firmly to indicate that Andrea should sit on the bed. When the blonde moved to follow that instruction, Danica and Celes both released her nipples and guided Andrea to lie down on the bed.\n\nAndrea sighed and whimpered as both Celes and Danica traced kisses all over her skin. Both came tantalizingly close to her nipples and sex, never quite touching them, building Andrea's flames of desire to a red-hot heat, causing her to writhe beneath their touch.\n\nDanica pressed her lips to Andrea's, the younger woman kissing her back hard. Andrea was taking quick, deep breaths, her entire body aflame with need. Danica and Celes were no less impassioned, and the musky, intoxicating scent of their shared arousal hung thick around them.\n\nAndrea groaned, \"Oh, please, I feel like I'm going to burst!\"\n\nDanica kissed Andrea once more and whispered, \"Celes is going to make you feel so good. She knows every little spot that will make you quiver, and exactly how to tease it until you nearly pass out from the pleasure.\" She then looked down at Celes, who was kissing the crease where Andrea's legs met her hips, \"Taste her, Celes. She wants it so bad, and I know you want to feel her come for you.\"\n\nDanica cupped her hands under Andrea's knees, pulling them up and back, parting the woman's legs to reveal her moist folds. Celes quivered in anticipation, and then slowly lowered her lips to Andrea's labia, looking up into the blonde's eyes the whole time. When her lips were scant inches from Andrea's sex, Celes pulled up Andrea's hood with her finger, and then darted forward to flick it with the tip of her tongue.\n\nAndrea sang out in a quavering yelp of bliss, her back arching up off the bed. Danica's thighs clenched tight and she moaned, her pussy tingling with chilly points of pleasure as she watched Celes' expert tongue roam all over Andrea's nether lips.\n\nAndrea gasped, \"Oh, that... That feels so good!\"\n\nCeles moaned, her senses overwhelmed by the taste and scent of the quivering woman beneath her. She was so enraptured with tasting Andrea for the first time that her own aching need evaporated before the satisfaction of making the blonde tremble.\n\nDanica's need was not so easy to ignore, and she reached down to rub her thick labia in circles, feeling her wetness coating her fingers as she did so. Seeing Andrea rubbing her nipples in her peripheral vision, Danica moved to engulf one of the pale pink tips in her lips, wetting one finger and rubbing it over the other bud. Her other hand immediately returned to her throbbing heat.\n\n\"You taste so good,\" Celes breathed huskily, immediately stabbing her tongue back between Andrea's folds to gather up the woman's bittersweet nectar.\n\nReleasing Andrea's nipple with a wet pop, Danica said, \"Come for her, Andrea,\" and moved across the woman's body to suckle the other nipple.\n\n\"I'm s-so close. Oh make me c\u2013\" A loud yelp of surprised pleasure cut off Andrea's words as Celes engulfed her engorged clit, and Danica nibbled sensually on her nipple at almost the same instant.\n\nThe air around them heated to an almost uncomfortable level as Andrea's muscles tightened in preparation for release. Her body trembled, perched on the edge of ecstasy for long moments. Even as her orgasm built toward release, so did her inborn power \u2013 the one triggered by the arousal. Understanding the feeling now that she knew about it, Andrea threw one hand off to the side, over the edge of the bed, and flames burst forth from it to flicker toward the ceiling even as she came.\n\nThe flash of light and heat startled Danica, but Celes was drowning in the taste of Andrea's nectar flowing over her tongue like a river and didn't even appear to notice. She lapped hungrily, keeping Andrea climaxing in rolling waves, the flame erupting from Andrea's hand surging with each spike of pleasure. Andrea screamed in release, her hips bucking upward rhythmically into Celes' lapping mouth.\n\nAt last, Andrea settled to the bed, the flames summoned by her power flickering one last time and dying out. Celes rose up, her lips and chin coated in Andrea's glistening wetness, just in time to see the fire in Andrea's palm dance for a final second.\n\nDanica kissed the trembling woman's nipple and let out a little chuckle. \"I've heard of being inflamed with passion, but that was a bit literal.\"\n\n\"I didn't... Didn't burn anything did I?\" Andrea gasped, and then let out a long, satisfied moan.\n\nDanica shook her head in the negative. \"No, but you certainly surprised me.\"\n\n\"I don't know how I controlled it,\" Andrea said, and then threw her head back, cupping her sex in her hand as an aftershock surged through her body. \"That was incredible, Celes. Thank you so much.\"\n\nDrawing Andrea's wetness to her lips with a finger, Celes smiled and responded, \"I loved it. I was lost in you. I didn't even notice the flames until they flickered out.\"\n\nDanica leaned in and kissed Celes, moaning from the taste of Andrea's wetness on the woman's face. Andrea then tugged on Celes' arm and pulled her into a kiss, lapping up her juices from Celes' chin.",
        "Danica stroked Celes' rounded bottom, letting her finger trail in the cleft with a feather light touch before she said to Andrea, \"You should return the favor. Celes has been waiting for so long to feel you there for real.\"\n\nAndrea quivered, moaned, and sat up. Staring into Celes' eyes with mischievous desire, she licked her lips and moved out of the way so Celes could lie down.\n\nSeveral hours later, all three women drifted off into utterly spent slumber, each having come so many times they couldn't hope to count the number of orgasms they had given each other.\n\n{*****~~o~~0~~o~~*****}\n\nDanica awoke with a puzzled expression on her face. She had dreamed of a beautiful valley, surrounded by majestic mountains and a blanket of mist. The image had been so real, and so detailed, she could remember every tiny element as if she had truly walked through the valley, exploring it as she did in her dream. She remembered the babbling brooks, flowing through fields full of flowers, and pools stirred by gentle waterfalls cascading from the rocks above.\n\nFeeling a little knotted up \u2013 the bed certainly not large enough for three to sleep in comfortably \u2013 Danica tried to stretch a little and slide out of the bed. Celes and Andrea stirred as she rose, awakening to smile at each other for a moment before the aches in their own muscles had them stretching out the kinks as well.\n\nThey all started when the door opened, grabbing for the coverings on the bed. The three-way tug of war only succeeded in partially covering any of them, and they relaxed when they saw it was Marlena.\n\nThe woman's hair was disheveled, her robes wrinkled and obviously tossed on with haste. Danica laughed and said, \"You look like you had a fun night.\"\n\nMarlena's face filled with color, and she grinned. \"Look who's talking,\" she countered, raising her eyebrows at the three nude women partially hidden by a sheet covered in wet spots.\n\nAndrea giggled, stuck out her tongue, and then said, \"I really need a bath. I had the strangest dream.\"\n\nCeles looked at her and said, \"So did I \u2013 a valley full of flowers, surrounded in mists.\"\n\nMarlena and Danica both stared at the women in surprise. Danica said, \"I had the same dream.\"\n\n\"So did I,\" Marlena revealed.\n\n\"Okay, this can't be a coincidence. Let's go get in the bath, and we'll compare notes while we get cleaned up,\" Danica suggested.\n\nThey all sank into the bath, discussing the dream and discovering that they had all indeed dreamed the exact same thing. After a short while, they heard a call from the other room, \"Danica, it's me.\"\n\n\"Come in, Devan, we're in the bath.\"\n\nDevan was just as rumpled as Marlena had been when she arrived. The women laughed and Devan smiled, twitching her eyebrows. \"Gods, Danica, does that man ever stop? I'm going to be bowlegged for a week after last night, and he was rock hard this morning and looking for more.\" Untying her robe, the only thing holding it closed, she let it drop to the floor and said, \"Make some room, I need a bath too.\"\n\nDanica asked, \"Did you have an odd dream last night?\"\n\nDevan shook her head and sank into the bath with a sigh of relief. \"No, I don't even remember passing out. I just remember coming and coming, and then waking up lying on a hard cock. You're going to have to show me where you find your men, Danica.\"\n\nDanica chuckled, \"Well, maybe it was just us then.\"\n\n\"You know, I almost feel like I know where that place is,\" Celes said, smoothing water out of her hair.\n\nDanica looked at her and agreed, \"So do I.\"\n\nNods and surprised expressions from Andrea and Marlena confirmed that they had experienced the same feeling.\n\n\"We should try to see if we can find it with the Hellgate later,\" Danica suggested.\n\n\"That spell is dangerous, Danica,\" Devan warned. \"The demons are sneaky. They can get to you over time.\n\nCeles laughed and countered, \"Not Danica's. They cower like kicked dogs every time she's there. They won't even show their faces unless she gives them leave.\"\n\nDevan looked at her sister and said, \"You summoned up a Soul Blade, didn't you?\"\n\n\"I had a sword appear in my hand, if that's what you mean,\" Danica replied.\n\nDevan blew out a long whistling breath and said, \"That isn't even mentioned most places the spell is written down, because so few people accomplish it. Maybe I need to experiment with that spell more often and see if I can do it. The spell is really useful, despite the dangers it presents.\"\n\n\"I was really, really angry with those imps when it happened,\" Danica explained.\n\n\"Strong emotions they're not trying to cause are supposed to be what makes it happen, so that makes sense,\" Devan affirmed, and then dunked her head in the water to wet it. \"Darkniciad and Ashtar can do it, and so could Zoraster, but I don't know anybody else offhand that has managed it. There are all sorts of rumors about what you can do once you've summoned the Soul Blade. I know Darkni has been able to expand the size of his personal realm, and even link his realm with others. He and Ashtar have done that. Darkni has summoned it up outside the Hellgate before too. Demons are really afraid of Soul Blades.\"\n\nUpon hearing that, Danica raised her hand up out of the water and willed the blade to appear. Even she was a little startled when the gleaming sword appeared in her hand. Looking at it with a smile, she said, \"That's good to know.\"\n\nDevan pursed her lips as she washed her hair. \"Okay, that's about enough of showing me up. I need to stop playing around so much and get back to studying regularly. I can't have my little sister outdoing me all the time.\"\n\n\"That will probably come in handy when hellspawn start breathing down our necks,\" Celes noted, nodding toward Andrea.\n\n\"As long as I'm feeling humbled... I may as well ask if you'd be willing to sit down and talk to me for a while too, Marlena. I consider myself to be a fair expert in illusions, but anybody who can call up the Discordance obviously has me far outstripped.\" Turning to look at Danica and Celes, Devan added, \"And the two of you still owe me some instruction in that fast spell casting technique you learned at the Forge.\"\n\nMarlena rinsed the soap from her face and responded, \"Of course I will.\"\n\n\"I have some unique spells I've created that you might like, too. Maybe even a few that Zoraster hadn't stolen.\" She issued the last few words in a low growl.\n\nAndrea was struggling to wash her back, and Devan moved over to take the cloth, doing it for her. \n\n\"Thank you,\" Andrea said, and then added, \"I don't know any wizard magic, so I guess I'll be a little left out.\"\n\nDevan leaned in and purred, \"I can think of a few things we could learn together.\"\n\nAndrea blushed a bright red and covered her face, drawing a laugh from the other women in the bath. She splashed water at them, saying, \"Oh, stop teasing.\"\n\nDanica looked at her sister with a mock expression of irritation and chided, \"You keep trying to seduce all my friends.\"\n\n\"We're sisters, we should share,\" Devan responded with a sweet smile.\n\nDanica laughed and said, \"Well, we'll all find a nice quiet spot in one of the study rooms and get down to business as soon as we have something to eat. Marlena and I will show Devan what we know. Celes and Andrea have those nice thick books to look through and learn from.\"\n\n\"I'll send for one of the less reclusive witches here on the isle and see if they'll be willing to show you two what they know,\" Devan offered. \"I bet they'll be more than willing once they hear about those tomes.\"\n\n\"It will be nice to study and know I'm not helping an evil madman by doing it,\" Marlena said with a smile.\n\nDanica and Celes both nodded enthusiastically in agreement, and then they all finished their baths, talking excitedly about their plans as they dressed and moved toward the kitchen.\n\n{*****~~o~~0~~o~~*****}\n\nThe women all shared their knowledge throughout the day, Devan delighted by the wealth of original spells her sister, Celes, and Marlena had to offer. They were in turn happy to discover Devan had large numbers of unique magics to give them in exchange. They spent more time copying spells than they did studying them.\n\nAndrea proved to be a fast learner, amazing the witches who had agreed to meet for study with her and Celes. Andrea's knowledge of the various herbs used in the creation of potions served her well, and she was soon instructing Celes as much as the other, more experienced witches were.\n\nIt was only their stomachs rumbling that tore them away from their books. When they arrived in the dining hall for the evening meal, Devan introduced them to Christi \u2013 Mindblind's wife \u2013 and the half-elven wizardess Crystania, who had come to the isle to catch up on what they had missed the previous day. Christi enthusiastically added her invitation to come visit to the one Arilee had offered the day before, the desire in her eyes completely unmasked as she spoke with the newcomers.\n\nAs they sat sipping wine, Brandon walked up to Danica, looking a bit nervous. Danica gave him a puzzled look and asked, \"What's wrong, Brandon?\"\n\nBrandon cleared his throat and answered, \"Well, Mindblind asked me to come to Fightershaven and take a place in his guard. I've heard of the place, and it sounds like a damn lot of fun. I was seriously considering it.\"\n\nA crooked grin crossed Danica's face. \"Are you asking me for permission, you silly man?\"\n\nBrandon chuckled and replied, \"Well, I'm just sort of torn. I don't want to leave you ladies, but I'm really out of place here.\"\n\nDanica laughed and told him, \"Go, Brandon. We can come visit you \u2013 we've already been invited rather enthusiastically \u2013 and you'll just be bored to tears here.\"\n\n\"You're not upset about...\" Brandon began.\n\nDanica waved her hand in a dismissive gesture. \"I told you last night it didn't bother me, didn't I?\"\n\nBrandon smiled and said, \"Yeah, you did. Your sister's a real screamer, I though I was...\"\n\nDanica mimed covering her ears and said, \"Please, Brandon, I really don't want to hear about it,\" chuckling when she finished.\n\nBrandon laughed and admitted, \"Yeah, I guess it would be a bit weird, huh? You all will come visit, won't you?\"\n\n\"Whenever we can.\"\n\n\"I'm going to go get another beer then. That cleric knows his brew \u2013 best I've ever tasted. Mindblind says he's got casks of it at the Hall.\"\n\n\"You'll fit right in,\" Danica observed with a laugh.\n\n\"I think so,\" Brandon agreed, and then walked over to the cask where Vladamir enthusiastically refilled his mug.\n\n\"I keep thinking about that valley,\" Marlena said, sitting down her glass and looking at Danica.\n\nRealizing she had been thinking about it off and on for most of the day, Danica admitted, \"Me too. I think we should see if we can find it.\"\n\n\"You all have me curious about this valley, and the Hellgate,\" Devan said, rising from her chair. She walked over to where Darkniciad sat, speaking with him for a moment, and then returned. \"Darkni says he's curious too, and that this has the smell of something important. He says we should go give it a try.\"\n\nA breeze blew out of nowhere, causing Devan to look around in confusion. Andrea blushed and said, \"Sorry, I guess I still get a little excited about teleporting.\"\n\nCeles quickly suggested, \"See if you can direct it, may as well try to get a grip on your powers.\"\n\nAndrea nodded and concentrated, thinking it would be wonderful to fly and growing more excited. She let out a yelp of surprise when her chair rose up off the ground on a great gust of air coming from below. Everyone in the room turned toward her when the chair thumped back to the floor a moment later.\n\nAndrea laughed, \"Well, I suppose that's not bad for a first try.\"\n\n\"You did pretty well with the fire earlier, too,\" Danica added with a crooked grin.\n\nAndrea's blush deepened, and she quietly admonished, \"Behave.\"\n\nDanica stood and said, \"Well, if we're going to try, we should get to it.\"\n\nWaving her hand in an impatient gesture, Devan said, \"Cast away, sister mine.\"\n\nDanica intoned the spell, and the portal appeared. When the women stepped inside, Devan remarked, \"Your place is a lot prettier than mine. Mine looks like a big bedroom.\" Looking around for a few moments more, she added, \"I guess you do have the imps cowed, I don't even sense their presence.\"\n\nDanica turned back to the portal and said, \"Now, let's see if we can find this place.\" She concentrated on the image in her mind, and the portal swirled with color for a moment. When the swirling ceased, the women could see the valley they had dreamed of in the portal.\n\n\"Must be somewhere to the west, the sun is still up,\" Devan observed.\n\nDanica felt a surge of emotion that she could only describe as destiny shoot through her. Looking at Celes, Andrea, and Marlena, she guessed that they were feeling the same thing. Opening the portal to the valley with a thought, she said, \"Let's go see if it's really like the dream.\"\n\nThe four women nodded and followed Danica through the portal. Danica felt something like a bump \u2013 or a knock \u2013 in her mind when Devan tried to walk through the portal. Turning, she saw her sister standing on the other side of the portal, looking irritated and confused.\n\nActing on instinct, Danica wished her sister could enter the valley. With a cry of surprise, Devan fell through the portal, the women already on the other side steadying her as she stumbled.\n\n\"The hell was that,\" Devan muttered.\n\n\"I didn't do it, but when I wished you could come in, it just let you through,\" Danica explained.\n\n\"Something just feels... Somehow something feels right about this place,\" Celes mused.\n\nExperiencing the same sensation, Danica nodded her head in agreement. Andrea and Marlena were also smiling, drinking in the pristine beauty of nature surrounding them.\n\n\"It feels like the grass under my feet is irritated at me. I don't think your valley likes me much,\" Devan grumbled.\n\nDanica looked at her friends and said, \"I don't really want to, but let's go back for now and think about this.\"\n\nMarlena sighed, staring in wonder at the way the light of the sunset was playing on the thick clouds of mists hovering at the edge of the valley. \"I don't want to leave either.\"\n\nA gust of wind whipped Devan's robes, leaving the other women completely undisturbed, even though they were only a couple of feet away. \"Well, I'm ready to leave,\" Devan contradicted.\n\n\"Oh, stop that, she's our friend,\" Andrea said to the breeze.\n\nThe wind stopped and Devan looked at Andrea with a curious expression. \"Uhm, thanks. It still feels like something doesn't want me here, but the sensation isn't as strong now.\"\n\n\"Danica's right, let's go back for now,\" Celes suggested.\n\nTurning toward the center of the valley, Andrea said, \"We'll be back.\"\n\nDanica nodded, \"Yes, I think we will \u2013 and soon.\"\n\n{*****~~o~~0~~o~~*****}\n\nSitting in the room they shared some hours later, the four friends came to a decision.\n\nDanica proceeded to sum things up for her sister, \"We're all in danger because we escaped Zoraster, and we endanger anyone we're around because of it. We could probably be safe here or somewhere in Egoria, but that isn't going to stop the demons that will probably come after Celes and Andrea.\"\n\n\"We also know Zoraster's operation from the inside out \u2013 as well as anyone not in his inner circle can \u2013 and where most of his outposts are. Once we've mastered our powers, and the spells in our mother's books, Andrea and I will be able to fight the demons. All the seers say they are a danger at least as great as Zoraster's schemes,\" Celes continued.\n\n\"You could do all that from right here. Demons aren't going to get past Darkniciad's wards,\" Devan countered.\n\n\"Maybe not, but your pressing need is countering Zoraster and the demon spawn the seers are talking about. All the attacks from the normal demons are going to distract you from that,\" Danica argued, \"We can concentrate on weakening the hellspawn in general, and keeping an eye on the outposts we know about. Something tells me that any enemies we make will have a hard time finding us in that valley.\"\n\n\"And we belong there,\" Andrea added.\n\n\"Please tell me you're at least going to show some common sense, Marlena,\" Devan begged the red-haired illusionist.\n\n\"I don't know what use I'll be, but I think they're right. We belong there, and we can do more to help from the valley than we could anywhere else.\"\n\nDevan let out an exasperated groan. \"Okay, I give up. Honestly, I'm having a hard time arguing with you. That valley didn't want me there. I can just imagine how it would treat a demon or one of Zoraster's black robes. Now, have you figured out how you're going to keep the rain off your heads? I don't think any of you have home builder amongst your list of skills.\"\n\nDanica smiled. \"I have an idea about that. I think between Darkniciad and I \u2013 with some help from the other wizards here \u2013 I can solve our problem of housing. I have some skill with enchanting magic items, and I'm sure they don't call him Darkni the Enchanter for nothing.\"\n\nDevan squinted one eye and tilted her head, looking at her sister. \"Now you're really making me wonder. Yes, Darkni has more talent for enchantment than any wizard I've ever heard of. He doesn't come by that title lightly.\"\n\nDanica pulled something out of her bag of holding, showing it to Devan. \"This is the spark for my idea.\"\n\n\"Martin's Magnificent Tent,\" Devan said, recognizing the magic item, \"You're thinking about an original creation, bigger and permanent once it has been activated, aren't you?\"\n\nDanica nodded to indicate her sister was correct.\n\nDevan thought for a moment, and then advised, \"That is going to require an immense amount of power, and money. The gemstones alone required for that type of enchantment are going to cost obscene amounts of coin, unless you want to take up mining.\"\n\n\"Remember that bag of coin you were remarking about when I sent you to get clothes in town? I have a couple of sacks the same size full of gemstones.\"\n\nDevan looked at her sister with deep surprise evident in her expression. \"I know you said Zoraster had immense amounts of money in his strongboxes, but bags of gems?\"\n\n\"It would have taken us hours to pack it all up. We just grabbed a couple of King's ransoms and got out of there,\" Celes explained.\n\nDevan shook her head in amazed surprise. \"Okay, maybe you've got something workable here. I know Darkni will love the challenge. Let's go talk to him and see what he thinks.\"\n\n{*****~~o~~0~~o~~*****}\n\nDarkniciad expressed his deep interest in the idea, and grew more excited by the moment when he realized how much knowledge and talent Danica had in his favorite field of study. They went into a flurry of study and planning, using the enchantment process of the Magnificent Tent as the base from which to build their new item.\n\nWithin three days, Danica and Darkni managed to hammer out the enchantment process. They knew it was going to require a tremendous amount of power, but both were confident that there were enough accomplished wizards on the island to manage the task through a joining.\n\nDarkni determined that the lingering effects of Zoraster's broken enchantments should have dissipated by this time, and so he awakened the clones. His estimation that they would behave much as children was very accurate. All of the copies acted much as a four-year-old girl might \u2013 save they had an enormous sex drive that was near insatiable. It was the only entertainment the childlike women had ever known, and until introduced to other amusements, they would continue to combat boredom with sexual play. Everyone took turns introducing the clones to games and learning as the days progressed.\n\nDarkniciad stepped back for the next part of the enchantment process, designing the place that would be the home of the four women and the dozen clones for the foreseeable future. Each woman would have a room of their own, with a large private bath, and closets that almost qualified as rooms due to their size. The baths would fill themselves magically, and the chamber pots would empty themselves the same way. The chamber pots would allow the women to sit rather than squat. Danica would have nothing less since she was planning the place from the ground up.",
        "The private rooms would open into an enormous common room, with an adjoining library and study room. A door in the study led to a tall tower, which had enough room in the round top for all four women to have their own individual area.\n\nA short distance down the hall was a kitchen large and well appointed enough to host a royal banquet, but having smaller stoves and ovens for the day-to-day cooking needs. The stoves, ovens, and kilns would all heat by magic, and the sinks would manifest water of any temperature required by magic as well.\n\nFarther down the hall and around the corner was the dining hall, also large enough to host a banquet, but having a smaller partitioned area at the front for normal mealtimes. Past the dining hall was the entrance foyer, with large closets to store coats and boots, and the laundry room \u2013 also enhanced by magic to make he women's lives easier.\n\nAnother common room lay beyond the foyer, before the next corner in the hall. Around the corner, the rooms for the copies were located. Each girl, as Danica now thought of them, would have their own room, but they also had a large common bedroom that they would likely share for some time, until they developed more individuality. They also had a common room and a study, though these would probably both be playrooms for a long time to come.\n\nTurning again the final hall in the square led to the baths. Danica had enjoyed her time in the baths of Agreseus, and so she designed the Manor to have the full facilities \u2013 powered by magic, of course. The main bathing pool would be large enough for twenty people to stretch out in comfortably.\n\nThe center of the square provided more than enough room for a garden to grow food, herbs, and flowers. Windows were everywhere in the structure, to provide fantastic views of the enclosed garden and beautiful valley itself.\n\nDarkniciad looked over the incredible design, warning that crafting such detail in an item would probably require an object so large that it would not be easily portable. Danica was unconcerned, as she only planned to move it once \u2013 from here to where it would reside.\n\nDarkni and Danica concentrated their efforts on crafting the item, while everyone else turned to their studies, and teaching of the girls. In the end, it took the two accomplished crafters nearly three weeks to create the detailed model that would house the magic. It was approximately a foot and a half square, with the tower reaching a slightly greater distance above the roof of the manor.\n\nDanica took Darkniciad's advice and rested for a week before they attempted the enchantment. The detailed crafting had worn both wizards out, and they needed to be at their best if they wanted to succeed in the tremendous undertaking of the final enchantments.\n\nTwo more days of exhaustive spell casting prepared the item for the final enchantment that would power it. Again, Darkniciad admonished a few days of rest before continuing, and as weak as Danica felt, she was in no position to argue.\n\nWhen the time came, the most powerful wizards on the island, and the most powerful of his pupils who resided elsewhere in the world, joined together in the common room for the final enchantment. They cleared the furniture away, leaving enough room for the wizards to join in a circle around the item. Wizards of less power, and others on the island, stood ready outside the circle to provide aid if any of those joining in the enchantment should weaken and lose consciousness.\n\nOn Darkni's signal, he and Danica began the final incantation. All around them, the other wizards waited in silence until the appropriate moment, and then chanted the joining spell in unison.\n\nThe light surrounding the item when the magic took effect was far too bright to look at, causing the wizards who had all wisely closed their eyes during the casting to squint them even tighter against the burning glow. Many dropped to their knees, and a pair collapsed completely. By the time the light started to settle in upon the model, even Danica and Darkniciad were on their knees.\n\nWhen the light dimmed to tolerable levels, Danica opened her eyes and smiled wide. The model hovered above the table where it had been placed, glowing with power.\n\nDarkniciad rose unsteadily to his feet, aided by his wife, and announced, \"Truly we have created something incredible this day. Behold, Danica's Magnificent Manor!\"\n\nDanica accepted Andrea's help to stand, her face flushing with color as Darkni dubbed the item with her name.\n\nDarkni continued, \"The enchantment will now be available in the library for all to study. I have little doubt this will be a unique item for many years, though, considering the unbelievable cost in coin and power it required.\"\n\nSwaying a little on his feet, Darkni chuckled and said, \"Now, I believe we would all do with some rest before Danica takes the item for its final testing. I have little doubt it will be all we have crafted it to be, but we will not know until it has been activated.\"\n\n{*****~~o~~0~~o~~*****}\n\nThey waited a week, recovering from the exhaustion of the spell casting, before Danica summoned the Hellgate to emerge near the center of the valley. Andrea, Celes, and Marlena walked at her side, while the others waited on the other side of the portal within the Hellgate, corralling the excited clones.\n\nDanica placed the item in the spot she had chosen, near the exact center of the valley, and then they all moved back a great distance to allow the item the necessary room to expand. Danica glanced at her friends with a smile, and then turned to the item and spoke the command word that would activate it.\n\n\"Home.\"\n\nThe four women hugged each other as the manor expanded, looking exactly as they had envisioned it. After a hurried inspection, they determined that every enchantment appeared to be working exactly as they had designed it to.\n\nWalking together back out of the front door, they returned to the nearby portal and stepped through into the Hellgate.\n\nDanica smiled and gestured to the clones. \"Come, girls, let's go home.\"\n\nThe copies ran through the portal unimpeded, confirming that they too belonged in this odd, beautiful valley. They frolicked in the flowers and grass, and Danica knew they would be in need of the bathing facilities by the time they grew tired of their play.\n\n\"Congratulations,\" offered Darkniciad.\n\n\"Thank you,\" Danica replied, and then turned to her sister, hugging her. \"I promise I'll come to see you, but this is home \u2013 I can feel it. I love you.\"\n\n\"You'd better, or I'll risk getting my skirt blown off to come here and paddle your behind for forgetting,\" Devan warned, and then added, \"I love you too.\"\n\nDanica ushered the great wizard and her sister back through the portal to Darkni's isle, refocused the portal on the valley and stepped through to stand next to the other women, watching the girls at play.\n\n{*****~~o~~0~~o~~*****}\n\nThe stone sang in exaltation once more, and Tam smiled so wide his face ached. At his side, Vellana had an odd look on her face, as if she were hearing something for the first time.\n\n\"It's so beautiful. I think I understand now,\" Vellana whispered.\n\nThe guardian nodded, \"Yes, I can feel the stone connecting to you. The bonds between you will only grow now.\"\n\n\"They are truly the ones the signs all speak of, aren't they?\"\n\nTam laughed and wiped a single tear from his eye. \"Yes, Vellana, they are. At long last, the Sisters of the Mists have come, and in them rest the hope of all.\"\n\n<center>*-*-*-*-*-*-*-*-*-*-*-*-*\n*------- THE END -------*\n*-*-*-*-*-*-*-*-*-*-*-*-*</center>\n\nDanica \u2014 and all the rest \u2014 would like to thank you for walking at their side through all the trials and triumphs of this tale.\n\nI would also like to thank you all for your feedback, suggestions, and interest in this story \u2014\u00ad and your patience with my unpredictable muse. I hope you have all enjoyed reading this tale as much as I enjoyed writing it.\n\nAlthough Book I has come to a conclusion, Danica's story is far from over.\n\nZoraster's mad schemes still threaten the world, despite his death. Meckataur's hellish spawn are a threat that cannot be ignored. Few know as much about \u2014\u00ad or are better prepared to deal with \u2014 these threats as Danica, Celes, Andrea, and Marlena. Therefore, they must stand on the front lines and hold the enemy at bay; else, the world might be consumed in darkness.\n\nI plan to cut the size of the chapters in half for Book II, so they should come out with less delay than the final four chapters of Book I did. I'll also be running them through my editor from the beginning, and I'm sure Roust's insight will increase the quality of the story, as it has for every other work of mine he has touched.\n\nThis story is dedicated to my Baileykins, the love of my life, and the inspiration for Danica. Thank you for coming into my life and chasing away the darkness, Babydoll.\n\nThanks, once again, to all my readers, and I hope you'll all join me soon for Book II, Sisters of the Mists"
    ],
    "authorname": "Darkniciad",
    "tags": [
        "magic",
        "lesbian",
        "threesome",
        "three girl",
        "sapphic"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/danica-epilogue"
}
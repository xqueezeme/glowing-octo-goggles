{
    "title": "The Proposal Ch. 04",
    "pages": [
        "\"Nice digs.\" Markus looked around the apartment, surveying the collection of posters, second hand furniture, and really nice bar chairs that made up the girls interior decorating. At least they had their priorities down.\n\n\"You want a beer, or something?\" Amber seemed nervous, and he could only smile at the girl. Despite her ongoing relationship with his best friend, she could never really relax around him, or his wife for that matter. Little Jonathan reported that on the weekends when his godfather picked him up to hang out, she was a much more carefree spirit, the kind that would roll down the hill at the park with him, who would do cartwheels in the shopping mall, and eat ice cream with him until their tummies hurt. So he nodded, and watched her pop the top of the Corona bottle, and slide the slice of lime into the neck.\n\n\"I need your help. Ahem\u2026Jonathans birthday is coming up, and I was just wondering what you guys normally do. I mean, he never talks about birthdays, and when I ask about it, he always gets really defensive.\"\n\n\"He's not a big BD fan.\"\n\n\"I can tell. Why is that?\"\n\n\"The root of all evil.\" That's what they called Angelina amongst friends, and she picked up on it. Nodding her head slowly, she had to admit that the revelation was not all that surprising. The woman had an amazing ability to get under his skin.\n\n\"So\u2026do I ignore it? Do I do something special for it? What?\"\n\n\"Well\u2026Margie and I usually take him out to dinner, since he can get a bit depressed. Sam always made a huge deal of his birthday, and so he really misses her around those times.\"\n\n\"Well\u2026I don't think he knows that I know that his birthday is coming up. I had to look on his drivers' license to figure it out. So I want to do something special for him.\"\n\nMarkus nodded, taking another pull from his beer. The whole situation was a bit surreal to him, standing in the young woman's apartment, discussing how to pull of a surprise for his friends' birthday. Wow. It was like something out of a bad book, except that his friend was not married, and Amber was what he would genuinely consider a good girl. Despite his earlier misgivings about her accepting money for sex, basically.\n\n\"Well, I tell you what.\" He dropped the empty bottle into the trashcan, coming to a decision. \"You been down to his place on the beach?\"\n\n\"No. I knew he had a boat, he didn't tell me about a beach house.\"\n\n\"Boat?\" Markus smiled. Yacht did not adequately describe the custom made vessel that graced a custom built slip down on the coast. \"Yeah, well, we haven't been down there in a while. Used to be\u2026in the days prior to your magic\u2026that when he wanted to relax and get away, he would go down there. Last year we went down and fished the weekend after his birthday. There's a little island out of the coast, have a barbecue, hang out, do whatever comes natural.\" Which meant running in circles for his kids, and drinking beer for him. Until his wife winked at him, and they tried to see if they could have another one.\n\n\"So\u2026I could propose going down there, he won't think anything if it's coming from me. But we won't make it. So you guys can go down there and\u2026well\u2026I'm sure you can handle the rest of the plan.\" He grimaced at her, and she smiled back. He understood how Jonathan could have fallen for those eyes.\n\nHe watched her hands, the clenching and relaxing of the muscles in her beautiful calves, the shifting of her eyes across the road, listening to the engine roar and growl under her instructions as they flew down the interstate. She saw him watching her, and blew him a kiss, but then her focus was back on the road.\n\nThe BMW owned the left most lane, racing down the interstate at well over eighty miles per hour. His eyes regarded the radar detector for what was probably the hundredth time, still trying to decide if he had made the right choice in letting her buy it. \n\nWhen Markus had approached him about the trip, he had been weary. He could tell by the unrestrained energy in his little call girl that something was up. She was not very good at the whole secret thing, her boundless ambition and uncontrollable giggling giving her away. But he had played along, even acting surprised when Markus begged off at the last minute. So when he came home that day and she was sitting on the stairs to his house with their bags already packed, he just threw them in the trunk, let her slide into the driver seat, and let her go.\n\nHe must have coached her pretty well, or she had been to one of the nearby beaches before, as she navigated the concrete cloverleaves that lead into downtown Charleston with no problem, having hoped interstates with practiced ease, and shaved a full forty-five minutes of his normal trip time. But she was relentless, and apparently pee breaks were not required for the two hundred mile journey.\n\nThey came out on the other side, hoped the new bridge out onto one of the barrier islands, and she rolled to a stop at the Marina gate. Finally he felt like a part of the game again, having to hand over his membership card. The security guard nodded at them, then the metal slid aside, and they rolled past rows and rows of vessels.\n\n\"Which one is yours?\"\n\n\"Go all the way down to that big building.\" He pointed it out, and she almost floored it, but then thought better of it. He thanked her silently, and then indicated a parking spot with his name on it. \n\n\"You have your own spot down here? Let me guess, you own part of this place, too, don't you?\"\n\n\"Not directly.\"\n\n\"Such a cutie man.\" She grabbed his face, kissing him hard on the lips, leaving him gasping for air. \"You sure you can handle a weekend with just me out on the water?\"\n\n\"I don't know, you might kill me.\"\n\n\"I'm going to try my best!\" She hoped out, and he took her hand, leading her inside.\n\nThe building was easily three stories high, and the length of two football fields. There was a small office in the front, but the rest of the cavernous interior was filled with boats of all shapes and sizes, sitting in large racks that kept them out of the water and elements. Down at the far end huge bay doors stood open, and a steady flow of boats was floating down the canal in the center of the concrete pad, coming in and out, the massive overhead cranes sliding back and forth moving boats to and for, in and out of their beds.\n\nHe walked past the office, and down past the racks. She had never seen so many beautiful boats before, but to him it was all routine, and she realized that he did not even notice anymore. She kept up, figuring they would be back at some point.\n\nOn the other side of the building, a large lagoon had been made through the addition of an artificial levee, where owners could climb aboard their just released yachts. \n\n\"There she is.\"\n\nHe pointed to the gleaming white boat sitting in the water, her long, low slung form elegantly swaying back and forth in the water. Even sitting still it looked fast, the hull and topsides formed to reduce drag and air resistance, with the chrome fittings and trim that shone brightly.\n\n\"Wow.\" She walked up to the railing, and looked down at what looked like a massive cigarette boat. The top was painted the same white, with a flame motive along the edges. The word \"Ambition\" had been written in highly stylized writing on the back, beneath what looked like some kind of radar dome. \n\nHe took her hand, and they walked down the plank, stepping onto the aft deck. There were stairs on either side leading up to the open bridge, with what looked like a massive roll bar above and behind it, with more antenna looking thingy's. There were benches, and what looked like two huge storage lockers recessed under her feet.\n\n\"Permission to come aboard?\" Wrapping her arms around him, she kissed him on the lips again, and he held her close, laughing at her request.\n\n\"Be honest.\" He kissed her back, and the realization that he knew was written in her eyes.\n\n\"What, I wanted to do something nice for your birthday!\"\n\n\"I love you so much.\"\n\n\"I love you, too, Jonathan Games.\"\n\nHe shook his head, then gave her a quick tour, during which they discovered that Markus had been good to his word, and the vessel was fully stocked in the galley. Jonathan grunted, but she beamed, and he let it go. Finally they reached the cabin, and she returned to the car over his objections to grab their bags while he got the boat ready. She returned shortly later, and he could see her from the bridge, looking like a Sherpa, fending off helping hands from the dock help.\n\nHe watched her disappear below, knowing better then to offer assistance, and waited for her to slide into the bench on the back of the bridge, now suitably dressed in a very nice white bikini.\n\n\"A birdie told me this would go with the settings.\"\n\n\"A birdie, huh? You know, with the do-it-yourself attitude, you are never going to make a good trophy wife.\"\n\n\"I'll work on that.\" \n\nShe watched as he pulled away from the dock, out into the open water, and away from the beach, heading out to sea. \n\n\"Where are we going?\"\n\n\"There is a sandbank a couple miles of shore were we can anchor for the night, set lights, and then fish or do whatever in the morning.\"\n\nHe looked down at her again, something seemingly slightly off. She was smiling at him with her eyes half closed, looking out towards the sun setting behind them as they headed east out into the ocean.\n\n\"What's up?\" Even when she talked, something was off. He pulled back a bit on the throttle, his eyes now focused on her face, trying to discern what it was.\n\nAmber realized the look, and stood slowly. Looking around, she gauged their distance from any other marine revelers, and the fading land behind them. Well, why not now?\n\n\"You're about to figure me out\u2026so here is my first gift for your birthday.\"\n\nBefore he could say anything, she dropped to her knees, pulling down his shorts. He almost tripped over himself as she inhaled his cock, swallowing him whole. A cry raced across the water as he gripped the controls, feeling her tongue slathering across his cock.\n\nSchool, work, and his lovely girlfriend had conspired against him for this moment. It had taken all her self-control to pull it off, but she had managed to stay away from him for a larger part of the week. So on Tuesday she had found herself Winged Dragons Tattoos & Piercing downtown, with a clamp on her tongue, and tears in her eyes.\n\nNow the barbell that had become a part of her dental work was softly tickling the underside of his shaft, making his eyes bulge out and his breath come short. His hands gripped the wheel, her hands stroked his cock, and he blew his load before he fully realized what was going on.\n\nHe watched her swallow, then climb up his body, wrapping her strong legs around him, and hold him tight with her arms, kissing him softly, letting her tongue slip past his lips, teasing him with her new toy.\n\n\"You like that?\"\n\n\"What's not to like?\"\n\n\"I considered a diamond, since you seem to like those so much, but the dude that did it warned me that it might cut you.\"\n\n\"Flat tip grinding could alleviate that. You had a guy do it?\"\n\n\"Jealous?\"\n\nHe had to think about that one for a moment, as she continued to kiss him, slowly easing her legs down to stand on her own feet, and sat back on the bench behind him, digging in the cooler for something to drink.\n\n\"Well\u2026I guess not.\"\n\n\"Still afraid?\"\n\n\"Afraid of what?\"\n\n\"That I might leave you for some twenty year old stud.\"\n\n\"Who told you that?\"\n\n\"Margie.\" She pulled out a bottle of peer, twisted the top of, and slid it into the cup holder mounted next to his control station, then placed herself in the captains chair, and pretended like she knew what all the dials and read outs before her meant.\n\n\"I thought she was my friend.\" He took the beer, thanking her with a kiss before taking a long pull from the bottle.\n\n\"She is. That's why she told me. And like I told you, you need to stop worrying, and start accepting the fact that you bought yourself a call girl for a long, long time.\"\n\nHe pulled her into his arms, kissing her full lips, hugging her close to his body. Wrapping her arms around him, she squeezed back, kissing his chest, feeling his heartbeat. They stood like that for what seemed like a short eternity, and then she felt the boat slow, and turn slightly sideways.\n\n\"We're here.\"\n\nHe moved to the front, dropped one anchor, then back aft, and dropped another. She watched as he secured the vessel for the night, set the lights, then they went below, and slid into the narrow galley. He started to make dinner, but she pushed him out of the way, stripped down naked, and started cooking.\n\n\"My own naked chef.\"\n\n\"What you always wanted.\"\n\n\"Can you cook?\" He could not help himself, and her reply was to give him the finger.\n\nMaybe it was the rocking of the ship. He wanted to believe it. Maybe it was the new place, the fact that they had never done it on his boat. Sure, why not, he told himself. Maybe it was the teasing that had gone on all through dinner, or that she had sucked him off without getting any gratification herself. Or the long car ride without sex. Driving and cars tended to make her horny. But as he lay quietly next to the woman that he had fallen head over heels for, he knew that it was none of those. The happiness he felt inside was not related to the awesome, mind blowing sexual experience he had just had at all, as much as he wanted to believe it. It was because for the first time in a long time, he was truly enjoying his birthday. \n\nLeaning down, he softly kissed her warm skin, listening to her rhythmic breathing, snuggling down against her soft body and warm skin. She seemed slide across him, naturally embracing her daddy, snuggling against him. She liked to lay on top when she slept, a position her body moved to naturally. \"I love you Amber Matthews, and one day you will be my wife.\" She purred, drooling on his chest, and he smiled again. \n\n\"So how did it go?\"\n\n\"Great. She tried to kill me.\" The driving range was lit up like the Fourth of July, a by-product of all the spotlights. It was Thursday, and all four of them were there, drinking beer and losing money betting against Markus on precision drives. Even Jonathans luck had run out, and he was already forty bucks in the hole.\n\n\"Sorry we had to miss that.\" Markus grinned at his friend, teed up, and whacked the ball right into the center of the three hundred and fifty yard sign. Everybody paid up, and he made a slight bow.\n\n\"So you all settled into relationship mode now?\" Randy was freshly tanned from his trip to the Caribbean, with that healthy glow. That, and he had made it clear that he could not stay long. His wife was waiting at home.\n\n\"Yeah. I think so. We are meeting in a bit to go out.\"\n\n\"Where are you meeting?\"\n\n\"Some club down the road from her school. Now that she's got me into this dancing thing, she wants to do it every week. I told her that ain't gonna fly. I need to work.\" Jonathan stepped up to the tee, pointed out the two hundred yard sign, and fired the shot off. The ball hit the upper right edge, bouncing straight up. There was soft appreciate applause from his friends, so he shook his hands like a champion, and dropped down onto the bench next to Markus.\n\n\"Happy Birthday. Glad you had a good time.\"\n\n\"Thanks.\"\n\nBanana Joe's would never compete with Reflections for Ambiance. But it did have three clubs, each of them with a distinctly different theme. The Speakeasy featured the dueling pianos, something she could never really get into. But apparently her friends liked it, so every now and then she indulged them. But not tonight.\n\nTonight they were on the dance floor of the Tikki Torch, a beach themed affair in which all the bars were predictably outfitted, and girls in short shorts and t-shirts tied around their waist served beer out of tubs. She had worked as one of those girls for a while, until she had gotten into her Accounting Internship. It had been a good time, and a wonderful opportunity to meet cute guys. But she didn't need that anymore, so she did not miss it.\n\nJessica was not much of a dancer, so she had let Amber borrow Rick, and the two were grooving on the wooden boards that had once been painted with scenes of water, sand, and palm trees. But shoes had long since scuffed all that away, and they were working hard to add their own friction to the aging wood.\n\nFinally they decided to take a break, and she checked he watch. He should be here any minute now, and she could not wait. Dancing made her horny, even if he was not really all that good at it. She didn't mind, she loved him too much for that. He tried, what more could she ask for in a man?\n\nShe watched as Rick lifted Jessica out of her chair, kissing her hard. Tammy was standing by the bar, flirting with the bartender she had been trying to get a date with for the last three weeks. Amber was starting to suspect that he was gay. Who could hold out this long against her friend?\n\n\"Drink?\"\n\nThe voice pulled her back, and she turned towards the source, finding herself face to face with a young man. She had seen him earlier, so she looked slightly past him, to the table he had come from. His friends were all looking their way, waiting to see what she would say, so she smiled at them, and accepted the cup with the red slush in it. \n\n\"Thanks. What do I owe this to?\" \n\nDirecting her eyes back towards the buyer, she took a closer look at him. He was blond, with the cut so stylish right now, a bit much on top, and faded down to nothing at the neck. The black button down shirt was not tucked into his khaki shorts, but it was sized so that one was not mistaken that he saw the inside of a gym on a fairly regular basis. His blue eyes had a piercing quality, but somebody should have told him that the fierce gaze was not really the key to a woman's heart.\n\n\"Well, the dude you were dancing with is probably not here with you\u2026\"\n\n\"How do you know, maybe we get down like that?\"\n\n\"Ahh, yeah, you might.\"\n\n\"In which event he'll probably be over here in a minute, whooping your ass. Rick benches 405 for reps, how much you put up?\"\n\n\"Ahhh\u2026\"\n\n\"Probably not that much, huh? Well, that's ok.\"\n\n\"Really?\"\n\n\"Yeah. Because he really is here with my friend.\"\n\nHe seemed to visibly relax at that, exhaling long and low, his shoulders returning from being hunched to their normal position. She found that funny, and her smile told him so. Or so she figured, since he was starring at her again.\n\n\"Well, I'm Jack.\"\n\n\"Pleased to meet you Jack. Listen\u2026\"\n\n\"Hold on now. Let me get my line out first.\"\n\n\"Go ahead.\" She even looked receptive.\n\n\"Well, I was just going to ask for your phone number, and tell you that you are one hot lady out there on the dance floor, and I would love to dance with you some time.\"\n\nShe smiled, then indicated the dance floor with her head. \"Let's go.\"\n\nHe pushed through the crowd, always feeling a bit awkward at first. He was easily one of the ten oldest people in the packed place. She had told him to meet her by the front most bar, the one right by the dance floor, and he knew what that meant. She was in a frisky mood. Thank fully he had stretched after running that morning, and felt nice and limber.\n\nHe spotted Rick first, the massive black man easy to find even in the twilight that dominated the place. He waved towards him, then had to push his way over, finally coming to rest at the high top table that his friend had taken over. Jessica and Tammy were sitting on the high stools that surrounded the table, and Rick slid him a beer.\n\n\"Thanks, where's Amber?\"\n\nJessica pointed out the dance floor, and he followed her finger, spotting the auburn hair out in the middle of the mass of people, dancing with some young guy. Taking a sip of his beer, he suppressed the feeling in his stomach, and watched his baby dance.",
        "\"So\u2026come here often?\"\n\n\"As often as they let me in.\" She turned, putting her back face to face with the young paramour, and inches between them.\n\n\"Want to come here again tomorrow?\"\n\n\"I take it this is the part where you ask me to come with you, huh?\"\n\n\"Yeah, basically.\"\n\n\"I'm here now.\"\n\n\"Listen\u2026\" He put his hands on her hips, pulling her close. \"We could just skip it all. You're damn hot, and you know it. You look hot in this dress, and those heels are out of control. So how about we go back to my place just up the road from here, I've got music, booze, and I'll rock your world.\"\n\n\"What's the longest you've ever eaten a girls pussy?\"\n\n\"Huh?\"\n\n\"You muff dive, don't you?\"\n\n\"Yeah, yeah! Of course I do!\" He was unsettled, and she could see it. But he caught himself fast, pulling her closer. \"Is that what it takes?\"\n\n\"A lot of it. If you want to get between these legs.\"\n\n\"Thirty minutes.\"\n\nShe threw her head back, laughing out loud.\n\nHe saw her laugh, his hand tightening on the bottle. Rick saw it, too, and looked over at the man that he considered his boss and friend. Looking over at Jessica, she gave him a subtle no sign, and he looked back out to the floor.\n\n\"You've never eaten anybody out for thirty minutes.\"\n\n\"Never been with anybody as hot as you.\"\n\n\"You're girlfriend would not be happy to hear that.\"\n\n\"What makes you say I have one?\"\n\n\"Educated guess.\" She was sliding in his arms now, side to side, moving away from him again, something he was fighting by pulling against her. But the song stopped, creating a natural pause in their movement, which she used to put space between them. She had seen Jonathan out of the corner of her eye, and she had to go.\n\n\"Listen, Jack, you seem like a really nice guy. If you want, I can introduce you to a friend of mine over there. But you have nothing to offer me. Thanks for the dance, and enjoy the drink.\" She shoved the cup back into his hand, gave him a million watt smile, and almost ran over to her daddy.\n\nJonathan saw her coming, but she was way faster through the crowd then he figured she could be in heels and the red and black dress, so suddenly she was there, jumping into his arms, her tits mashing into him.\n\n\"Daddy!\" Kissing him all over, she sucked his tongue, tapping his lips with her stud. It tickled, and he tried to pull back, but she was having none of that. \"What took you so long?\"\n\n\"I've been over here watching you.\"\n\n\"Like the show?\"\n\n\"Not really.\" The tone of his voice told her everything, so she backed off for a second, looking into his eyes. The second she did, he felt bad. He knew she meant no harm, and her enthusiasm was infectious. \n\n\"Come on, I want to do something for you.\" Grabbing his hand, she dragged him from the room.\n\nThe hallway was a massive, two story affair, painted in green for reasons that only the owners understood, with various arcade games sprinkled throughout, two bathrooms for either sex, and entrances to the three bars. They turned right out of the Tikki Torch, and headed down the hall towards the Jukebox, sliding inside. She pushed him into a chair, kissed him on the forehead, then disappeared.\n\nHe looked around, but then she was back, putting another beer before him, and was gone again. He wanted to ask what was going on, but she did not wait, so he looked up at the stage instead. Jukebox's gimmick was Karaoke, and at the moment a very drunk man was doing his rendition of Elvis Presley's Ghetto. Horrid.\n\nLeaning back into his seat, he waited, having a rough idea of what was to come. Elvis got done, and almost fell of the stage into the arms of his screaming and applauding friends. The lights dimmed a bit, then a single large spotlight hit a spot in the center of the stage.\n\nShe walked on, and from where he sat, the light on her did nothing but amplify her beauty. She was breathtaking to him, and he watched every ripple of her muscle, the soft shake of her hips, the strut in her legs as she walked to the mike. The music started and he did not recognize it, but he knew her voice when she started to sing.\n\nWhile Amber had many talents, singing was not necessarily amongst them. But he got the message, knew she was signing for him, knew that she was looking right at him, knew that she meant the words of the song, was trying to tell him through the song. Something got in his eye, and he blinked it away, listening to everybody around him clap. She was back at his side, and he pulled her close, kissing her hard and fast. She clamped onto him, their lips locked, tongues dancing, until they were out of breath.\n\n\"I love you Jonathan.\"\n\n\"I know. God, I know. I love you, too.\"\n\nThey walked back over to Tikki hand in hand, a smile on both their faces. She didn't have to ask, they just walked onto the dance floor, and she went crazy. His only role was to face in the general direction she was in, and let her do whatever it was she wanted to. It was more a show for him then anything else, and he greatly enjoyed it. But even so, the movement that was involved wore him out, so he excused himself after several songs to go get a new beer, having abandoned his previous two each time before he could even drink half.\n\nShe stayed on the dance floor, not wanting to waste the energy she felt after her little rendition of \"Underneath your clothes.\" She had figured that he would not know the song, but that helped, since it meant he would listen to the words to hear what they were, his analytical mind not allowing anything else, and would hear the message. It was almost too easy sometimes, and she loved it!\n\nShe was so caught up in it that she did not realize that Jack had approached her again, until he was right there, dancing with her.\n\n\"Hello again. Want to meet my friend?\"\n\n\"Naah, I want to talk to you.\"\n\n\"I'm not buying what you're selling.\" She turned around, moving away, but he came around, and was in front again.\n\n\"Hold on, hold on. Come on little firecracker, give me a chance. I saw the guy you are with, what's he got that I don't?\"\n\n\"Big dick, hurricane tongue, and a BMW 745.\"\n\n\"This about money?\"\n\n\"No, the tongue is more important.\"\n\nHe took another step closer, putting his hands back on her waist, and moving with her. He could easily keep up with her on the dance floor, and she smiled up at him, giving encouragement and hope to boy who was drawing the wrong conclusions from her movements.\n\n\"Seriously\u2026give me thirty minutes, and I'll take you places he can't dream of matching.\"\n\n\"I give you ten seconds to get the fuck away from me.\" She turned again, but he grabbed her wrist to stop her. \n\nShe saw Jonathan coming towards her, saw Rick behind him, rising and flexing to his full height. And she knew that she could have just twisted her wrist and he would have let go. Knew that it was not in the kid behind her to actually do anything. But it pissed her off.\n\nShe was pissed at her family, at her mother for giving him shit. She was pissed at Jonathan for being so afraid of losing her. She was pissed at the idiot behind her for trying to ruin her night. But above all, she was pissed at herself. Pissed that she had let it get to this point again, pissed that this was so difficult, and pissed that she was pissed.\n\nSo there was only one thing to do, and she knew what it was. Jack never saw it coming, but she spun on the tip of her high heeled shoe, stepped forward as if to kiss him, yanking on her wrist to pull him towards her, and then smashed her forehead straight into his nose, feeling it crack underneath the assault of the hardest bone in her body against one of the softest in his.\n\nJack screamed out, stumbling backwards, his hands covering his face, blood squirting out between his fingers. The kid was a bleeder, wailing like a pig now as he tripped over his own feet, falling to the ground. She had taken two steps forward, following him instinctively to make sure he was down, but Jonathans arms pulled her back into the anonymous embrace of the crowd, away from the opening hole around the fallen suitor.\n\n\"Can't take you anywhere, can I?\"\n\n\"You could take me home, and let me work of some of this frustration.\"\n\n\"Your wish is my command.\" He kissed the back of her neck, and pulled her from the club, knowing fully well how she intended to work herself out.\n\n\"I didn't know you were such a brawler.\" Tammy was twirling the glass of OJ in her hand, making the orange liquid squish around and up the sides, her eyes tracking Amber as she paced back and forth beyond the counter that separated kitchen from living room.\n\n\"Whatever. I should have never let it go that far. I wanted you to meet him, he was kinda cute, but I sent some wrong signals, I can see that now. I should have never let it come to that.\"\n\n\"Why not? I think it turns Jonathan on when you are at your most violent.\"\n\nThat gave Amber pause, and she looked up from her path on the floor to her friend, weighting her words in her mind. \"You think so?\"\n\n\"You always come back telling me about how you guys have great sex afterwards.\"\n\n\"We always have great sex.\"\n\n\"I don't know if it is normal for couples to have great sex after the woman goes out and gets into a fight with somebody.\"\n\n\"Why would it not be?\"\n\nTammy shrugged, took another sip of OJ, and set the glass down to attack her bagel again. \"Anyways, when do I get to see this boat of his?\"\n\n\"Next weekend, if you want to come.\"\n\n\"You guys aren't going to screw like rabbits all weekend, are you?\"\n\n\"Oh yeah!\"\n\nThe Club was packed, so they had to move from their regular table upstairs to one of the small affairs that dotted the space around the bar, meaning that between four beer bottles and four lunch plates, there was little room for anything else, and they were a bit closer then usually. But they leaned in a lot to whisper as if conspiring, and looked around suspiciously. All a bit silly for four fully-grown men, but what else did they have going?\n\n\"I'm telling you, we should switch up!\" Markus was more guilty of it then anybody else, at that moment basically blowing across the top of his beer bottle, to once again emphasize that their current golf pairings were bullshit.\n\n\"No way. That would mean that bad and bad would be together.\" Randy was adamant.\n\n\"I can't believe we are talking about this. You are just upset that your infamous line drive failed you, and you hit it in the rough.\"\n\n\"You said you would never mention that again.\" The voice of the lawyer was pure acid.\n\nJonathan shrugged. \"I lied. I'm not Catholic, I can do that.\"\n\nMarkus shot him daggers, and changed the subject. \"So now that you've been with Ms Mathews for almost a damn year, when are you guys getting married?\"\n\nThe table got deathly silent, and everybody looked at Jonathan, who at that moment could have reached across and strangled his close friend. Finishing the piece of chicken that he was currently chewing, he put down his knife and fork, then looked around to make sure they were not being listened to by anybody, he leaned in closer.\n\n\"Not a word. I'm trying to think of a way to ask her.\"\n\n\"What?\" Morrison could not believe his ears. \"Why?\"\n\n\"Why do you think, you idiot!\" Randy wanted to slap him, but resisted the urge.\n\n\"Trip to Paris.\" Markus was the only one trying to be helpful.\n\n\"Why do you want to marry the cow to get the milk?\" Morrison was still in shock.\n\n\"You are really retarded, you know that?\" Randy did reach up to slap him, but his friend swatted the hand away.\n\n\"Or if you want something different, you could backpack across Europe, but that makes you look like you are trying to much. Play to your strengths, my dad told me.\" Markus had to think about it for a second, leaning back and scratching behind his right ear, always a sign of deep thought.\n\n\"You know, I mean I like the girl and all, good girl, so don't take this wrong\u2026but she'll keep giving it up without a ring.\"\n\n\"That's it!\" Randy almost lunged across the table, his hands latching onto Morrison's throat, and squeezing as sugar and salt packets went everywhere. Markus let it go on for a couple of seconds, then sucker punched Randy in the kidney, sending him back into his chair.\n\n\"Well\u2026thank you that you guys are so passionate about this. But I've told you guys how I feel about her, and I think I want to be with her forever.\"\n\n\"Which in your case will only be about another twenty years or so.\"\n\n\"Why are we friends again?\"\n\n\"Aspen?\"\n\n\"I told you I own a house up there.\"\n\n\"I didn't think that meant we would actually ever go! Who does that?\"\n\n\"What, visit the houses they own?\"\n\n\"Own multiple homes!\"\n\n\"People that can afford it do.\"\n\n\"No kidding. Let's be real. People don't fly to their multiple homes in their private jet.\"\n\n\"Why not?\"\n\n\"Because! That would almost make this a fairy tale, and the sex in fairy tales is not nearly as good as this.\"\n\n\"How would you know? I've seen a porn or two in my time with fairly tale themes.\"\n\n\"Really?\" That surprised her. She had never found porn in his home, and she had done some fairly extensive searching. That, and he did not strike her as the porn type.\n\n\"Yeah. I'm not a total prude.\"\n\n\"I see that. Proud of ya.\" So she kissed him, leaning across the table to make sure he got a good view down the top of her dress, leaving him breathless from the ministrations of her tongue, and the desire for more.\n\n\"Anyways, I want to take you skiing. I've seen all the sports you're good at, now it's time to show you one of mine.\" He had made the mistake of attempting to race her in swimming several weeks ago, not realizing that she had been on the swim team for three years in high school. Apparently Lincolnton did not offer much besides athletics, and she had tried them all.\n\n\"Easy enough, I've only been skiing in the mountains around here a couple of times. No trying to show me up.\"\n\n\"Never.\"\n\nShe leaned close again, her arms squeezing her breasts up towards him, her lips rolling her tongue back and forth as she smiled at him. \"Just you and me?\"\n\n\"Yeah.\"\n\n\"Like a romantic getaway?\"\n\n\"One could say that.\"\n\n\"I'll make sure to pack all my nasty lingerie!\"\n\nThe glow on her face had to be seen to be believed. He would have figured that she would tire quickly of the walking, the skiing, the sun, the cold, and all the things that Angelina had always hated about Colorado. All the things that had robbed him of joy the last couple of times he had come here, the reason he had stopped frequenting his house out here, the first true indulgence he had allowed himself after making it big.\n\nBut not Amber. The girls' energy was never ending, and the places she dragged him off to so that she could ravage him were rapidly growing to so many that he had a hard time remembering the first couple. He had paid for her to have private lessons, but like most sports, she was a natural at this one as well, and the next day she hit the powder with him. She could not keep up, so he slowed down, and she raped him in a small knoll of trees out in the two-foot deep virgin snow, unable to express with mere words how happy she was at being with him.\n\nIn the afternoons they would come back to the house, and she would lay out naked on the upstairs balcony, from where she could see down the main street, but the privacy barriers prevented anybody from seeing her. When he was young, he had envisioned it as the perfect spot for \"public\" sex, and with her that finally came true. She was very impressed when she learned that such activities had been the balconies original purpose, and his creativity was rewarded twice over by her enthusiasm.\n\nShe insisted that they make their own breakfast, unwilling to let him spend the money to eat out all three meals, so she would cook for him in the nude in the morning, but allow herself to be taken out at night, as they were doing now. She had also tried to resist his spending spree on her clothing, but since she had no ski clothes or other seasonable wear that was appropriate for the climate and place, she had relented.\n\nAnd she had to admit that she looked good in the things he had chosen, as much as she had hated the money he dropped on her. But she was getting used to it, and he had joked that every time she punched somebody, he got to drop a grand on her. She had wanted to punch him, but knew that if she did, he would buy something. It was dangerous too test him.\n\nThey walked down Main Street, turned up one of the hills, and the ushered into a small restaurant that had been styled to look like something from the Swiss Alps. Or at least he had told her so earlier, having never been there, she had no way of knowing if the artist had been in any way successful or not. But she was fairly certain that her first trip to Europe was only a matter of time, he kept hinting at it, and she kept telling him no.\n\nLike everywhere they went in the town, he was greeted like family, and they were lead up a flight of stairs, down a hall, and into a small, private dining room, where a bottle of wine already awaited them, along with a basket of bread, and salad.\n\n\"How come you don't like dining with the crowd?\"\n\n\"Even you won't have sex with me in a public dining room.\" He had to smile at that one, having caught her at a loss for words for once. But she recovered quickly, and gave him an evil smile. He knew what that meant, and figured it bode well for the evening.\n\nThe fondue was served shortly there after, the broth already bubbling, the meats placed on two trays on either side of the open flame heating the pot, along with a variety of sauces, vegetables and more bread. She had only once experimented with this form of do it yourself dine out, and that had been her prom, the highlight of her hotel-sex career until she had meet him. The Hampton Inn had nothing on the Hilton. He laughed when she told him that.\n\n\"Well\u2026I am really glad you did come to the room that night.\"\n\n\"Me, too.\" She could see the shift in his eyes, could see that something had changed, and she put down the fork she was twirling in the broth, trying to make the bubbles come up in designs. She really should stop playing with her food.\n\nThe look on his face was priceless, and to a woman that knew when her man was having trouble putting something into words, it was almost comical to watch. She was never sure what to say at such moments, so she gave him her most seductive smile, her foot toying with his legs under the table. The snow did not allow for open toed heels around her, but the high-heeled boots were rather pointy at the tip, so she could still get the message across.\n\nWhich brought a smile to his face, along with a sudden decisiveness, as he reached for her hands, and pulled them close.\n\n\"Amber\u2026I can not even put into words how happy you have made me.\"\n\n\"You're not to bad yourself.\" She kissed his fingers, feeling their warmth over the bubbling liquid.\n\n\"I'm being serious. I'm glad you to came to my room that night.\" He smiled again, looked away, then back at her. \"I'm no good at this. Will you come to my room every night?\" He placed the simple black box before her, and she saw it flash in his eyes again.\n\nShe had seen it before, that very first night. The night sitting at the bar in Reflections, the night he had slipped her a piece of paper with his room number on it, the night she had first been entranced by the man who knew how to make her scream, who had since broken down every inhibition she had, and made her incredibly happy. It was that flash same flash now, and she finally realized what it meant. She was looking into his soul, and seeing his fear.\n\nSlowly she pulled the box towards her, the wheels in her head spinning, the gears wildly out of control, coherent thought and strategy failing her. She was twenty-two, and nothing had prepared her for sitting in an exclusive restaurant in a ski town in Colorado, across from a man she dearly loved, and being asked to commit. Maybe she should have read Cosmo more, as her mother had often suggested. ",
        "The springs in the hinges of the box pushed it open as soon as she barely touched the lid, revealing the three stone setting, placed atop a silver band with gold wrapping around it. The center diamond was the biggest she had ever seen in real life, but it was offset slightly by the ones surrounding it, both of which would do well on their own when stacked up against the average jewelry store diamond. She had nothing to compare it to, had never owned a diamond before he had entered her life, no frame of reference but to realize that neither of her sisters had this much glitter between their two combined. \n\nShe looked up again, and realized that neither of them was breathing. His hands were gripping the table; knuckles turning white, his mouth half open, eyes fixated on her, unblinking, terror written on his face. He was afraid she would say no, she realized.\n\nHer mind took itself back, racing back several weeks to Tammy's birthday. He had been out of town, visiting some conference in New York. He had almost begged her to go, but she had school, and had put her foot down with no. So the girls had sat in the apartment, drinking wine, and laughing about their lives until they got to that sweet wine drunken state of seriousness.\n\nJessica had revealed that she would be moving in with Rick when their lease ran out next semester, which Tammy and Amber had booed. But then the attention had turned to Amber, when Jessica pointed out that she had been seeing Jonathan much longer then she had been with her man, and when was she going to hop into his mansion?\n\nShe had turned quiet, and revealed her own fear, her fear that Jonathans inability to see past their age gap and possible future problems would keep them apart, would keep him from ever being able to truly see how much she loved him, how much she wanted and needed him around. She had almost cried, while both women reassured her that he would eventually ask, and her loudly proclaiming that when he did, she would take him, twenty one year gap and all.\n\nThere was a pain in her chest, and she realized that air was still not moving down her throat. He looked worse for wear, and for a flash she feared he might have a heart attack at any moment. So she surprised him again, leaping over the table.\n\nHer body struck his with incredible force as she wrapped her arms and legs around him, screaming with glee and surprise, holding him tight, his chair toppling backwards, sending them sprawling to the floor. But she did not let go, kissing him all over, holding on to him, rolling on the wooden floor.\n\n\"Yes! Yes! Yes! I'll come to your room every night, forever! Thank you, thank you, thank you! Yes, I'll marry you!\"\n\n\"Next time\u2026try not to keep me waiting half a fucking eternity.\" He kissed her back, holding her tight, slowly sitting up on the floor.\n\n\"Crazy man, I was so surprised.\" Throwing herself at him again, they were on the floor once more, with her kisses all over him. \"And now\u2026for what you said earlier\u2026\"\n\n\"It's in the bag.\"\n\n\"So she said yes.\"\n\n\"Yeah. Kept me hanging for damn near three minutes, I thought my heart was going to explode.\" Jonathan could hear Markus laugh, and then Margie joined in after he relayed the story to his wife. \"And by the way, we can't go back to Moritz Fondue and Grill anymore.\" It wasn't his fault the waiter had walked in on her riding him like a one horse sleigh. Should have knocked first.\n\n\"Congratulations. Does little Jonathan get to be the ring bearer?\"\n\n\"I take it Margie has already been doing her prep work?\"\n\n\"We never doubted she would say yes.\"\n\n\"Good to know. Tell him we'll go tux shopping soon. You, too, by the way.\"\n\nMarkus laughed again, before becoming serious. \"I was your best man last time round, you think that's a good thing to try again?\"\n\n\"Well, we were young then, and you failed in your best man duty to advise me in what a bad decision I was making. I think you've matured since then, and as a lawyer and doctor now, I'm confident in your ability to give better guidance now.\"\n\n\"You made the right choice, Jonathan.\"\n\n\"Thank you.\" He put the phone down, and looked over at the massive bed that sat in the center of the room. She was laying astride the sheets, dressed in a rather lacy purple teddy, and a brand new diamond ring, her ringed finger beckoning him to her. This was going to be fun.\n\nWhile he had never been one for long engagements, he was one for giving her all the dreams she would let him, so after discovering that she had always dreamed of a summer wedding out doors, he offered to delay their nuptials until the warmer season, which also gave a wider time line then the 90 days he had envisioned. Amber was thankful for that, since she did not tell he parents that she was engaged until New Years, almost a full month after the event happened.\n\nIt could have gone smoother, could have gone better, but after a long talk with her father, Jonathan could solidly count Mr. Mathews in the \"win\" column. Her mother was more resistant, and not very happy about the tongue piercing either, but in the end bowed to the happiness of her daughter. The rest of the family just seemed glad that Amber had found somebody who was willing to put up with her crazy self, and who actually went so far as to encourage her athletic abilities, and her crazy desires for multiple degrees.\n\nBut she didn't move in with him, deciding to spend her semester of being engaged living with Tammy instead, not wanting to jinx the marriage thing through any statistics, no matter how much her pastor told her that premarital co-habitation was a form of test drive, and since she was already sleeping with him, why not try on the other shoe as well? Not that it made much difference, she spent much time over there, and he spent much time at her place.\n\nBut the one person he did not tell was Angelina, even though she called at an ever increasing pace to see if they had broken up yet, until he got a no contact order from both a local judge, and one in California. By default, he did not tell Sam, something he planned to rectify when she came to visit.\n\nWhich lead Amber to be standing in the arrival lounge of the cities airport, craning her neck to see down the concourse. He had tried to buy her a ticket, so that she could go into the secured areas to wait for her, but she had told him that she would refuse to go past the security barriers, that just being a total waste of money.\n\nFinally she spotted the lovely blond girl, and the two embraced like old friends. Her dad may not have told her about the impending marriage, but he had started a regular email and phone call dialogue with his daughter, and she knew how happy this woman made her father. That, and she was glad that he had finally found somebody who pushed him to come find her.\n\n\"Where's my dad at?\"\n\n\"Some emergency came up at work, we'll go meet him at his office.\" They picked up her bags, and walked out into the parking garage, dumping them into the trunk of her car. Along with not moving into his place, she had not let him buy her another car, either, even though the thought was appealing. Not like hers had not seen better days. But with marriage approaching, she was enjoying her last pieces of independence. It did not take a clairvoyant to see that one of the many gifts he would give her on that day would be a car.\n\nAnd so Samantha cried that night over dinner at his place when he told her, Amber finally revealing the ring Jonathan had bought her, then leaving father and daughter alone to cry together, as she wandered the back yard. The house was only about ten extra minutes away from campus, and as much as Tammy bitched about having to find a new roommate, she was sure her friend would be ok. She had a magnetic personality, and was a member of a sorority. She could find somebody to live with.\n\nShe heard him approach, felt his arms sliding around her, and she reached back to wrap her fingers behind his head, his lips touching her neck, the heat transferring instantly.\n\n\"You make me so happy.\" He whispered in her ear, and she giggled when it tickled her, the hot breath turning her on.\n\n\"I'm glad. I should. You do the same for me.\"\n\n\"How can I ever thank you?\"\n\n\"Don't spend to much money on this whole thing?\"\n\n\"How about we settle for you never have to learn how much I'm going to spend?\"\n\n\"You know, my dad should be paying for this.\"\n\n\"I told him I would not tell you, but I bribed him into being for this by telling him that I would pay for everything, and that I would recommend him for membership in the Lincolnton Golf & Racquet club.\"\n\n\"I should have known.\" She turned around, kissing him on the lips. \"What's Samantha doing?\"\n\n\"Going to bed. The time change has her all messed up, it should only be afternoon, but it's evening, so she's going to sleep through it. The thing she wanted to tell me is that she is going to go to college out here on the east coast, at Chapel Hill.\"\n\n\"Cool. She'll be right up the road.\" She kissed him again, and could read his happiness in his eyes. \"Well, well, well. Looks like we are going to break in the back yard.\" She pulled him down onto the grass and went to work, muffling his cries with her lips, tits and pussy, and sucking him as if her life depended on it.\n\n\"I don't know. I'd have to see it in person.\" Amber flipped the page in the bridal magazine, realizing for the thousand time that she should have gone into wedding dress design. Apparently you could make a lot of money selling the same thing under twenty different names, and charging as if they were some kind of super designer thing.\n\n\"Hey, you are only going wear it one time, don't get pressured. Pick the one you want, he can afford it.\" Margie waved at Jonathan through the window. He gave a motion back that was probably supposed to mean that he was out of money, but only made the girls smile. \n\nAmber waved at him as well, eliciting a smile from his face, the flipped to the next page, still looking. \"How did you find your dress?\"\n\n\"Went to the store, tried on two, third time was a charm.\"\n\n\"Just like that?'\n\n\"Just like that. But I had a pretty good idea of what I wanted.\"\n\n\"So did I! Until I started seeing all these choices.\"\n\n\"We've confused the girl.\" Angela had noticeably changed in the last couple of months, looking healthier and much happier. Margie did not totally believe that Morrison had given up his philandering ways, but if his wife bought it, who was she to rain on the parade?\n\n\"You sure have.\" She smiled, and pushed the book like Marriage Magazine of her lap. Jesus. Ten bucks, and what you basically bought was a phone book worth of advertisements, with maybe forty or so pages of actual writing thrown in for good measure, giving such good advice as how to avoid paying the marriage penalty when you tied the knot.\n\n\"I can't look at this any more. Especially not when they are outside drinking beer!\" Standing, she walked out onto the porch, where Jonathan was standing next to Markus, having an animated argument over the best way to grill venison.\n\nWalking up behind him, she kissed him on the back of the neck, and he followed her over to the steps that lead down into the backyard. \"Hey.\" She kissed him again, and again he smiled.\n\n\"Hey back.\"\n\n\"It's not fair. How hard is it to pick out a tux?\"\n\n\"Pretty easy, actually.\" He had done so in a matter of minutes after walking into the store.\n\n\"Figures.\"\n\n\"You know, I could\u2026\"\n\n\"Don't even start with the designer dress crap again. I'll punch you in the throat, right here in front of god and everybody.\" She snuggled under his arm, kissing his neck.\n\n\"This dress thing really has you riled up, don't it?\" He looked down at her, and they kissed. He tasted funny, and she could see beads of sweat popping on his forehead.\n\n\"You ok?\"\n\n\"Yeah, why?\" He stepped back from her, and their eyes locked. His were slightly unfocused, and she stepped closer, putting her arms on his. \"Look at me.\"\n\nHis head turned, but something was missing. It was like looking into a TV that was on, but with no picture. The fire was missing. Her mind slowed down, as she recorded his slowing breath, the way he was opening his mouth to inhale deeply, but only taking a short gasp. The sweat, the eyes.\n\n\"Jonathan.\"\n\n\"I don't feel so good\u2026\"\n\n\"Jonathan\u2026\"\n\nHe sank back into the chair, flexing both hands. Out of the corner of her eye she saw Markus turn towards them, flipping a piece of meat with the tongs. The last thing he heard before he fainted was her scream.\n\nAt first she jumped back when his eyes closed, the loud screech tearing across the yard. Then she came forward again, still screaming, only to be run over by Markus as he slammed her aside, bouncing her off the wall, pulling his friend out of the seat, and sprawling him across the floor. She dove forward to do SOMETHING, but Randy grabbed her, coming out of nowhere, and pulled her aside.\n\nShe screamed again, kicking and clawing, but the man was to strong, and to ready. \"AMBER! STOP!\" But she was not to be deterred, watching Markus rip away his friends shirt, screaming for Margie to grab something as he flicked Jonathan's eyes and motioned Morrison for the phone.\n\n\"STOP! He's a doctor, let him help!\" Finally she calmed down, standing by helplessly as Margie called 911. Then she hugged her future husbands namesake, and cried with the little boy.\n\nHe felt the vehicle moving, not sure what it was. He could hear her crying, not to far from his face. It had to be her touching him, nobody else felt that good. His arm would not move.\n\n\"I'm ok.\"\n\n\"Don't talk. I'm here baby.\" And she kissed him. That felt good. He passed out again.\n\n\"What are you going to do?\"\n\n\"Get him in there, check if we have to cut him open, and make him better.\"\n\n\"You do this kind of thing before?\"\n\n\"Every day hunny, every day.\" They looked down at him, and he smiled back up, having heard their every word. Her face was red and puffy. Wow, she was beautiful. \n\n\"I'm ok.\"\n\n\"You've said that. I'll be waiting on you.\" She kissed him again, and his eyes closed once more.\n\nHe was not sure how long he had been out when he finally opened his eyes for good. Looking around the room, he realized that the extra insurance he had always bitched to his accountant about had paid off. He was in a private room, with real flowers, and furniture other then the bed he was occupying, and the towers of stuff hooked to him on either side.\n\nAmber was curled up on the couch opposite the bed, still dressed in the jeans and t-shirt she had worn to their little barbecue. Her eyes showed the signs of lots of crying, and what little make up she had been wearing had either been rinsed away under what he knew to have been cold water, or smeared by her tears. Slowly he let his chest rise, then fall, the full breath feeling good. Wow, that was close.\n\nLooking out the window, he could see that it was morning. So what, probably through the night? There was no watch on his wrist, but he could have turned on the TV in the corner. The remote was on his nightstand. But that would risk awaking his angel, which he wanted to avoid. Not yet. The clock on the dresser was straight up hotel issue, with only time, indicating that it was 7: 24 A.M. How useful. \n\nLooking around, he settled on the fact that it was Monday. He would have to sit with her for a second to make sure everything was ok, then he could send her to school, and hit the office. There were deals to be made, money to change hands, and all he was doing in this bed was taking up space.\n\nSuddenly he realized that she was staring at him. He smiled back, and she flew of the couch, straight onto the bed, landing on top of him, holding him close.\n\n\"Oh my god, oh my god, oh my god.\" She squeezed him tight, kissing him all over. \"I was so scared, oh my god!\" Slowly she eased him down into the pillow, kissing his face, neck, forehead, all over. \"Don't ever do that again!\"\n\n\"Did not plan on it.\"\n\n\"The doctor said that you need to exercise, watch your diet, and maybe take some drugs. He told Markus all the technical parts. God, I was so afraid.\" Again she squeezed him tight.\n\n\"But I'm ok now\u2026\"\n\n\"BULLSHIT! I talked to some people. Rick said you haven't been working out as much as before. I did a mental count myself, all the business dinners lately. And I heard you ride a cart at your golf games!\" Her face was even redder now.\n\n\"Yeah, well\u2026\"\n\n\"NO FUCKING WELL! WHAT THE HELL ARE YOU THINKING!\"\n\n\"Please, stop yelling at me.\" His head hurt already. He took a sip of water, buying himself some time. \"Ok, so I didn't do\u2026\"\n\n\"Let me make something clear. I know what you are doing. You aren't fooling me. I talked to Mr. Robinson. He told me that here lately you've been on a frenzy, trying to break records on how much money you guys turn. You don't think I'll take you away from this if I have to?\" He could see how serious she was in his eyes.\n\n\"I just\u2026\"\n\n\"Don't even. What did I say about that?\"\n\n\"Amber. There are things that\u2026\"\n\n\"\u2026that you can't give me yet?\" He nodded, then looked away, unable to take the look she gave him. It was a combination of disgust, anger, and pain. \"What did I tell you?\"\n\n\"I'm sorry.\"\n\n\"Your ticker is working to hard. It can't drive it all. You have to decide. Is it going to be a life with me, or do you want to work yourself to death. Heart disease runs in your family. You are committing suicide.\"\n\n\"I know. I'm sorry. It won't happen again.\"\n\n\"You said it yourself. I can have any man I want. Even twenty something year old studs, who run triathlons for fun, and can keep up with me in the water and in the ring. But I don't want them, they have nothing for me. I want you. I want this man right here, the one who thinks he has to make up for something by buying me things, and taking me places.\" She kissed him again, sucking his tongue. \"I loved you before you showed me all that, and if it is gone tomorrow, I'll love you still. Be my daddy again, let it go.\"\n\n\"I promise.\"\n\n\"I'll keep you to it. If you start slipping again, I'm going to kick you in the nuts.\" He knew she meant it.\n\nShe was not sure if there had ever been this many cars parked in her parents front yard. There were rows of white ribbon to mark off parking spots, and boys with matching fluorescent vests and ball caps made sure that everybody stayed in the boundaries. You had to show an invitation to get past the guys with the radios at the front gate to their property, and Angela was standing by the arch that lead into the meadow where the ceremony would take place, ensuring that everybody had dressed appropriately. \n\n\nLooking at herself in the mirror, she had admit that she looked good. The train, the veil, it was all what she had dreamed of when she had pictured her wedding as a little girl. It was all here, and she wanted to cry. Looking over at her dad, he nodded, and they walked out of the bedroom, turned right down the hallway, and stepped outside.\n\nThe two sections consisted of white folding chairs placed upon the meadow, with a podium at the front for the ceremony. A red carpet had been rolled down the aisle for her, and she stepped onto it, walking down arm in arm with her father.\n\nShe could see him now, standing at the end, next to Markus, Morrison, and Randy. They were all smiling at her, Tammy, Jessica, and Margie on the other side all tearing up. Either that, or they were wearing diamonds beneath their eyes. Her father shook the man's hand, then handed her over, and they turned to face the preacher.\n\n\"We have gathered her today to join Amber Mathews and Jonathan Games in holy matrimony\u2026\"\n\nThere were fireworks, organized through ways that she did not want to know about, along with a horse drawn carriage ride to the reception, lots and lots of champagne, and she danced until she could not dance with her husband anymore. He looked much better, fitter, and more alive. Rick had been working him hard, knowing fully well that all it would take was one call to Amber to have her down in the gym, screaming, ranting and raving. He only did it once, and it scared even the massive black man.",
        "She did not know what time it was when he carried her into the suite of the hotel they were staying at, but she was giddy with excitement and bubbly. He placed her on the bed, and slid onto the massive structure next to her. They kissed, and they slowly began to undress one another.\n\nIt was oddly reminiscent of another night they had been way to dressed up for the occasion. Not a race, but a journey, a slow one, revealing more and more of one another, each still awed by what the other had to offer, both still deeply in love with what they found. They kissed, they licked, they touched, toying with one another.\n\nThey had found their rhythm now, the music they made together truly a beautiful sound as she struggled against him once more, wanting it now. He took what she offered, slowing her down, driving her higher. His tongue did her work, and she cried and screamed. She sucked on him, and he had the same reaction. It was a back and forth, a dance and a grind that both of them never wanted to end.\n\nIt came to its natural high light, when he entered her, and she cried out. They clutched one another tight, kissing, loving, holding on, the joy in both their eyes not limited to jus their current activity, but their lives.\n\n\"I love you Amber Games.\"\n\n\"OHHHHHHHH GOD!\" She had never cum so hard, thrashing around on the bed, scratching his back, feeling him squirt into her. He was breathing hard, but now she was really turned on. \"You know we are only getting started, right?\"\n\n\"Oh, yeah.\""
    ],
    "authorname": "Rattlesnake1775",
    "tags": [
        "older man",
        "younger woman",
        "call girl",
        "sugar daddy"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/the-proposal-ch-04"
}
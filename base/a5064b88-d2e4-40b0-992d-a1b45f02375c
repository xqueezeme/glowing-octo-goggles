{
    "title": "Trapped in a Game Pt. 03",
    "pages": [
        "\"I-uh, you must have me confused with someone else-\"\n\nI cut off her protest by planting another kiss full on her lips, and I smiled as her breath was caught in her throat as we broke apart.\n\n\"Well now- do you have a habit of letting complete strangers past your privacy filters to kiss you like that?\" I responded with a satisfied smirk.\n\n\"Um- it's not like that. This has to be some kind of, um- glitch,\" she was flustered, and fanning herself desperately as she tried to get the furious blush on her face under control.\n\n\"Glitch, huh- well then, let's put that to the test.\"\n\nShe shrieked as I suddenly pulled her with me into one of the rooms along the corridor, a stock room of some kind, pulling the door shut behind us.\n\n\"Hey- wait a second,\" she began again, but I pulled her into my arms, leaning back against a wooden crate and paused just as our lips were about to meet again, to stare into deeply into her eyes.\n\nThey were a deep blue; unlike the silvery grey that her original character had been designed with, but as they fluttered embarrassedly under the conviction of my stare I knew with certainty that my precious little sister was indeed behind them.\n\n\"I'm going to kiss you- the way I should have every day of our lives since you were old enough to kiss,\" I muttered with confidence, and she began to blush even more furiously, if that was even possible.\n\nI closed my eyes as I pressed my lips onto hers.\n\nIt was a soft kiss; just brushing against her lips a little teasingly, but despite her reluctance she melted into me, so I pressed into her with more intent, mashing our lips together deeply and deliberately.\n\nAs I ended the kiss reluctantly, I could feel her warm breath against my lips as she exhaled with a deep, satisfied sigh.\n\n\"Just who do you think I am? Kissing me like that,\" she whispered coyly, and I smiled as I played along.\n\n\"You remind me of a girl I love very dearly,\" I replied, and she smiled a little, as I continued with a tone of mock thoughtfulness: \"or maybe I just laid my eyes on you, and decided that you looked like fun to play with.\"\n\n\"Oh? So I'm just being used, then? An elaborate plaything?\"\n\nI nodded.\n\n\"Yes- but I do so treat my playthings with care. You'll see that shortly.\"\n\nI swapped our positions, suddenly lifting her up by the hips and placing her upon the crate that I had leaned upon, before sliding her up against me again, my hands now about her waists.\n\n\"Aren't you afraid I'll scream? Call for help?\" she asked playfully, and I shook my head.\n\n\"The only thing you'll scream is for me not to stop,\" I retorted, before pulling her in for another kiss.\n\nThis one was a bit rougher, and she put her hands to my chest trying to fend me off a bit, but I pressed into her, keeping a firm grasp on her body while my tongue probed her, seeking to explore beyond her lips.\n\nThough she still made a show of putting up a resistance, it didn't take long for her to relent; responding to the urgency in my kiss with her own tongue. They danced about a bit before I suddenly broke the kiss, biting her upper lip as I pulled away, and eliciting a little gasp.\n\nAs she licked the spot and tasted blood, a hungry smile appeared on her lips.\n\n\"Oh my- you're no gentleman, are you?\" she muttered, between ragged breaths.\n\n\"Even if I am- I have no intention of being gentle with you.\"\n\nI picked her up from her seat on the crate and brought her lips to mine as she wrapped her legs about me, but this time she kissed me with more ferocity than I'd initially expected, and my miscalculation allowed her to knock me off balance, sending me crashing to the floor.\n\n*Thud!\n\nI landed hard on my back.\n\n\"Bit off more than you could chew, perhaps?\" she asked with a cheeky smirk, and I chuckled at her.\n\n\"Indeed- it appears the hunter has become the hunted,\" but as she leaned in to me to claim my lips in triumph, I grasped her left hand, and pulled her into me before rolling her over, retaking the position of control and now trapping her hands above her head.\n\n\"Someone's not playing fair,\" she scolded me, and I shot her a wicked smile:\n\n\"Well I am having my way with you- or did you not notice?\"\n\nI leaned in to taste her lips again, but as she leaned up to meet my kiss; I stopped short and shot her a wry smile, before quickly moving to kiss the soft place beneath her ear.\n\nHer breathing was now tense, and she was moaning softly with each kiss that I planted along the sides of her neck, moving down to her shoulders and the exposed skin above her chest.\n\nShe ruffled my hair, squirming a bit under me as I continued to kiss her hungrily.\n\nI grabbed her hand as I moved back up to her face, and I held them in place above her head.\n\n\"I can't undress if you keep holding down my-\" she started, but she her words cut short with a gasp as I tapped her robes with my finger and the piece of clothing disappeared in a ball of light, back into her inventory.\n\nI wasn't really sure it was possible, but I did know that Kelly would be naturally accepting to my advances, so I focused on the thought of dismissing an item to my inventory while tapping her robe and to my delight it worked.\n\nI kept a firm grip on her hands, then turned her around, facing her away from me, and removing the wraps the concealed her breasts and her sex, before doing the same to my own clothing.\n\nAs I held her hands up, she looked over her shoulder at my now exposed cock with a trance like expression on her face.\n\nI began to rub and massage her breasts as I pressed my body against hers, and she moaned a few times as my engorged cock slipped between her legs and brushed enticingly against her mound.\n\n\"Are you going to take me?\" she asked, her eyes locked on mines, and I shot her a wicked smile:\n\n\"Do you want me to?\" I asked, making a show of acting surprised, and she arched her back in anticipation as my rigid member brushed deliberately against her again.\n\n\"Not particularly,\" she replied coyly, before shooting me a devilish smile.\n\nI guided the head of my cock to her slit, and she gasped as I pushed against her, rubbing the length along her slit a few times, and allowing her dripping juices to lubricate the length.\n\nI tweaked her nipple a few times with my right hand while my left held her hands together firmly at her back, and she gasped as every time my head pushed at her opening, I retreated and ran the length of my cock along her slit instead.\n\n\"It's not nice to tease a girl like that,\" she muttered, her voice thick and heavy with lust, and I grasped her hair roughly, pulling her head to me, before whispering into her ear with a wry smile:\n\n\"I didn't hear you ask for it yet.\"\n\nShe bit her lip defiantly, and I pressed into her opening just a little, before again withdrawing teasingly, and she let out a little impatient whine.\n\n\"Please-\" she muttered, her eyes fluttering at me pleadingly. \"Please fuck me,\" she whispered.\n\n\"Hmm? But you're just some stranger. I couldn't possibly-\" I responded with mock sarcasm, and she whined as this time I nestled the head of my penis inside of her slit before withdrawing wickedly to tease her again.\n\n\"Please- fuck me anyway,\" she responded, the urgency apparent in her voice, and I smiled.\n\n\"Fine then- how do you want to be fucked? Like the woman I love- or like my plaything?\" I asked confidently, and she smiled as she cocked her hips back to receive my thrust:\n\n\"Like your plaything,\" she whispered, and I sank my length fully into her with an immediate thrust, my body slapping obscenely against her.\n\nHer cunt walls were well lubricated from her heightened arousal, and I reveled in the feeling of her walls tightening around me as she tensed at the suddenness of my invasion.\n\n\"Mnh,\" she moaned, and I tightened my hold on her hands and held her firmly around the torso, grasping her breasts as I thrusted into her again and again, with rough, deliberate thrusts.\n\n\"Oh yes,\" she moaned, biting her lips to keep herself from outright screaming, and I continued for a bit, maintaining a steady pace, before pausing to readjust; I released her breasts, and pushed her body down towards the floor, before raising myself up on one leg to get some better leverage to thrust downwards into her pussy.\n\n\"Oh yes,\" she cooed appreciatively as the angle allowed me to penetrate even deeper into her sacred place.\n\nI thrusted into her slowly, withdrawing my full length a few times and allowing myself to fully delight in the feel of my cock being enveloped by the warm, wetness of her pussy, before I resumed pounding into her with renewed vigor.\n\nShe moaned loudly with each deliberate thrust, and as I suddenly quickened my pace again a louder scream came from her lips.\n\nI reached down and placed my hand over her mouth, muffling her screams as I thrusted more deeply into her, and she grunted with exuberance each time I penetrated her to the hilt.\n\n\"Do you like being my plaything?\" I asked?\n\n\"Mmh,\" she moaned absently, and I withdrew from her; to her dismay, as I stood before pulling her up and turning her around.\n\nI pressed her up against a nearby pillar, and she purred as I lifted up one of her legs and placed myself at her entrance again, but as she tried to pull me into her I resisted, keeping the head of my cock just teasingly inside the folds of her slit.\n\n\"Hmnn,\" she whined, her gaze fixed upon my cock as it rubbed deliciously against her slit.\n\n\"Do you like being my plaything?\" I whispered again, this time into her ear, and she nodded desperately.\n\n\"I fucking love it,\" she whispered, \"please make me cum like your slutty little toy.\"\n\nI brushed my cock against her one more time before sliding my length into her, and I took her hands once more and held them firmly above her head against the wall.\n\nI lifted her up so that I could thrust into her more effectively, and as I found my rhythm I began to suckle at her breasts, placing sloppy kisses upon the firm nipples that poked out excitedly, and alternating between the two mounds.\n\nAs I found my rhythm, a more consistent stream of moans began pouring from her lips, and she wrapped her legs around me, pressing her feet into my butt and urging me deeper and deeper into her warm, wonderful, wet cunt with each thrust.\n\nHer hips began to buck against me, her oncoming orgasm imminent, and as I released her hands and grasped her hips, supporting the weight of her body as I thrusted away inside of her with abandon, and she put a hand into her mouth and bit down a bit to muffle herself as a series of uncontrollable moans came steadily from her lips.\n\nI was well over the edge myself, and as wave after wave of orgasmic pleasure coursed through her, her pussy muscles contracted wonderfully around my cock, massaging and coaxing me delightfully as I spewed rope after rope of thick cum deep into her wonderful virtual womb.\n\nI held her firmly until she recovered from the intensity of her orgasm, before placing her down on one of the larger crates in the storage room.\n\nI sat beside her as she lay back, panting a bit, before looking up at me with a starry eyed expression of affection.\n\n\"This girl you see in me- she must be special,\" Kelly muttered between pants, and I smiled.\n\n\"She's everything to me,\" I admitted, while holding her gaze, before leaning in to place a light kiss on her brow.\n\n\"What about you?\" I questioned, as I gently brushed my nose against hers. \"Who were you chasing so desperately?\"\n\nShe blushed at the unexpected question.\n\n\"No-one in particular,\" she muttered shyly, before continuing: \"maybe I just thought he was kind of good looking?\" with a shrug.\n\n\"That guy? Really?\" I asked teasingly.\n\n\"What? He's not drop dead romance novel cover kind of gorgeous but... he was cute.\"\n\n\"Pfft. I know his type,\" I replied with derision. \"He wouldn't even know where to start with a woman like you. He'd probably waste all of his time chasing some other stupid girl without even noticing you were standing right there.\"\n\nShe glared at me angrily.\n\n\"Well- maybe I want him anyway. And maybe I knew he'd be done playing with that stupid little girl sooner or later,\" she responded defensively.\n\nShe put her hands around me, and looked up at me cutely.\n\n\"What if he doesn't deserve a girl like you?\" I asked more seriously now, and shot me a glum look.\n\n\"I don't care what I deserve- I want what I want, and I want... you.\"\n\nShe bit her lip nervously, blushing as she made the confession, and I smiled at her.\n\nNow that I'd had the time to study her redesigned look, I noted that her character design suited her much better than the previous one had.\n\nHer face was more rounded and less angular than the elvish like design she'd previously gone for, and her jet black hair was open and fell just beyond her shoulders, with those cute bangs that she always wore to the left side of her face.\n\nI brushed the bangs from her face affectionately just as I'd always done whenever we were done horsing around.\n\n\"I missed you,\" I muttered, and she kind of teared up.\n\n\"You're not angry, are you?\" she asked, and I shook my head.\n\n\"How can I be angry? You did what you thought was best for me.\"\n\nI brushed her nose against mine again before pulling her delicate lips in for a little kiss, and she smiled.\n\nWe were a bit lost in the moment when the sound of the door behind us pulling shut alerted us to the presence of an intruder on our intimate moment, and I joined Kelly in hurriedly dressing and donning my armor.\n\nI planted a quick kiss on her head, my hand reaching back to hers, reluctant to let go as I headed for the door.\n\n\"Go,\" she muttered softly, before adding with a reassuring smile: \"I won't run away this time, I promise.\"\n\nI smiled, then took off, and after leaving the Tavern I immediately spotted Serra hurriedly making for the edge of town.\n\nI dashed after her, catching up to her just on the outskirts of Ravenloft.\n\nI reached out and took her hand to stop her as soon as she was within reach:\n\n\"Where do you think you're going,\" I asked, and she wiped at her face defensively.\n\n\"To kill a vampire,\" she muttered blankly, and I studied her.\n\n\"Without your partner?\" I asked, and she pulled her hand from mine, looking away from me.\n\n\"You found her- now you two can be happy again. I get it okay? You don't have to be polite.\"\n\nI placed my hand on Serra's shoulder and spun her around to face me.\n\n\"Hey- I agreed to play with you, and that's what I'm going to do. I'm happy that I found Kelly but that doesn't mean I'm going to leave you just like that.\"\n\nShe studied me dubiously, a melancholic look in her eyes.\n\n\"You mean that?\"\n\n\"Yes- idiot,\" I added with a smile, and she allowed me to pull her into a hug, but as I withdrew she suddenly pulled me back to her, and she kissed me full on the lips before my brain could even register what she was doing.\n\nI stared at her questioningly as she glanced past me, and I followed her gaze to see Kelly studying us from a little way off with a look of concern on her face.\n\n\"Sorry, Josh,\" Serra whispered into my ear, \"- but I really hate losing.\"\n\nShe shot me a wry smile before sauntering off ahead of me towards Kelly.\n\n\"So- You're Kelly? Right?\" Serra asked playfully, and Kelly fidgeted a bit, before Serra continued: \"you don't need to be shy- I know Mr. Sister-complex over here won't put his dick inside anything that isn't related to him,\" and Kelly began to blush furiously, suddenly flustered as Serra smirked at her.\n\nSerra walked up to Kelly, and studied her a bit before adding:\n\n\"See? I told you I'd bring him back to you in one piece,\" and Kelly smiled nervously, and gave a little nod in response.\n\n\"Thank you,\" she offered with a sincere bow, and Serra sighed, running her hand through her hair and giving her ponytails a little tweak.\n\n\"We're taking a break,\" she announced to me unexpectedly. \"We'll start back tomorrow; meet me at the tavern at the crack of dawn, and not a second later. Got it?\" She asked threateningly, and I nodded in response.\n\nShe studied Kelly again before setting off, a bit uncertainly, back towards the town.\n\n\"Was that kiss a declaration of war, or-?\"\n\n\"Nah, she was just being a sore loser,\" I responded with a smile.\n\n\"She really fell for you, huh,\" Kelly noted as I studied Serra's retreating form, and I blushed a little.\n\n\"I didn't try to make it happen,\" I countered, and she merely shook her head.\n\n\"I knew it would happen,\" she continued, wrapping her arms around me from behind. \"What girl could resist my big brother when he's at his charming best,\" she muttered happily, and I blushed further at the compliment.\n\n\"You don't need to worry about competing this time,\" I muttered reassuringly, and she pinched my cheeks in response.\n\n\"Even if I had to compete I wouldn't worry- little sisters always win.\"\n\nI smiled at her:\n\n\"Can you get time off for today too?\"\n\nShe nodded:\n\n\"My group is scouting for leads on a master vampire. Unless they come up with something that quickly, I have a little time I think.\"\n\nShe took my hand and we wandered about town for a bit, but as the evening quickly fell, Kelly decided that she wanted to cook us something to eat for dinner, so we headed out of town and found a quiet little place a little way from the Hamlet.\n\nUsing an old tree stump as a table, she set about preparing the meal, but as she did so I noticed that she'd not only acquired some new cooking apparatus, but that she'd also significantly expanded the range of dishes she could prepare as well.\n\n\"I hope these skills are transferrable to real life,\" I muttered, and Kelly shot me a stern glare as she went about her preparations with a smug smile.\n\n\"There's nothing wrong with my cooking,\" she asserted, and I chuckled as I remembered some of her less than savory culinary endeavors.\n\nAs she went about the task though, I studied her changed appearance with renewed interest. Although I figured she might do something like this to avoid me finding her again, that still didn't explain the exact replica of her old image that I'd seen earlier with Galvan.\n\n\"Why is there a copy of you walking around with that old friend of yours?\" I asked curiously, and she cringed a little at the question.\n\n\"Ugh. Don't even ask,\" she countered, but my questioning look didn't go away, so she eventually relented with a sigh.\n\n\"I kind of joined up with Galvan's team after I left you. I figured it'd be a safe place to be, and I'd be able to progress, and keep getting stronger.\"\n\n\"Okay. So what happened?\"\n\nShe sighed again.\n\n\"He's a complete psychopath- that image he puts up, of being 'oh so nice' and helpful? It's a farce. He has this obsessive need to be loved by everyone. The power he had as a leader of an elite squad went to his head, and quick. He started buying me abilities and gear, and the next thing I know there are rumors going around that we're- ugh,\" she shuddered a little as she recounted the tale.\n\nI knew I hated that guy for some reason, I thought to myself, as Kelly continued on.\n\n\"So I confronted him about it, and he starts acting like if I'm confessing my feelings for him. I tried to get him to stop, and the idiot tried to kiss me- but my privacy filters kicked in and pushed him off. After that, all kinds of rumors started popping up about me that I'd really prefer not to share,\" she added, and I nodded at this, before she continued, \"So I refunded some of my skills, gave him back his gear, and changed my name and used my makeover kit to create a new appearance. The next day, that replica showed up by his side; same class, wearing the same stuff that I was, and using my name to boot.\"\n\n\"Damn,\" I muttered with a whistle, and she nodded appreciatively at me before continuing again:\n\n\"A few people knew, but- more people than I care to think about still think that she's me. Around that time David and his group broke away from Galvan's- because they too were worried about some of the less than wholesome approaches to adventuring that he'd been taking up- and they asked me if I wanted to join, so I did.\"",
        "\"Oh. So that's who you're playing with now?\" I asked, and she nodded.\n\n\"They don't know who I am, though- but they've been nice to me. Your intuition about them was spot on,\" she added with a smile, and she came over to me to give me a little squeeze before setting about making a fire.\n\n\"By the way- I switched classes,\" she muttered, and I gave a little chuckle.\n\n\"Let me guess- sorcerer or wizard?\" I asked, and she nodded:\n\n\"Sorcerer,\" she replied, with a little pleased smile.\n\nAs we ate, she filled me in on some of her exploits with her adventuring group.\n\nApparently Karn and Pete had also joined up with them, and news had also come to the duo that Ren hadn't died after disconnecting from the game- she was one of the apparently lucky few who survived the disconnection, but she was in a coma and had not yet woken up.\n\nThey seemed to have also been doing pretty well, taking out some notable monsters like a Manticore, a Mummy, and skeleton infested tomb.\n\nTheir current objective was locating a master vampire to hunt for an invitation to the upcoming event.\n\nAfter we'd finished eating we lay down together in the grass, just enjoying the relatively peaceful ambience of the spooky old woods about Ravenloft, and I recounted some of what Serra and I had been through.\n\nBut when I mentioned the synergy problem and Serra's solution to it, her interest seemed to pique:\n\n\"Sleeping together, huh?\" she asked teasingly, studying me closely as she spoke. \"Are you sure I don't have any competition?\" but even as I shook my head in response, she still frowned.\n\n\"You could probably have a normal life with a girl like her,\" she muttered, and I chuckled in response:\n\n\"Serra would drive me crazy- besides I have no idea what she even looks like.\"\n\n\"I've seen her actually- she's pretty. Cute, petite. A little chatty but still your type- you know, large?\" she gestured at her boobs with a wink.\n\n\"T-that doesn't matter as much as you seem to think,\" I responded defensively, and she giggled.\n\n\"Oh please- I'm pretty sure that was all you saw in Tracey.\"\n\nTracey had her faults, but I had to admit; her 'assets' were... considerable.\n\nI sat up with a frown and she leapt at me, wrapping her hands about me and poking my cheeks as she cackled with glee.\n\nShe sighed, relaxing though still wrapped about me, before continuing:\n\n\"At least Serra wouldn't hate me that much.\"\n\nI looked over my shoulder, and studied her a bit.\n\n\"Hmn. Seriously trying to get rid of me, are you? What happened to 'wanting what you want'?\" I asked with a wry smile, and she looked away with a timid little blush.\n\n\"I know what I want- but I want you to be happy too.\"\n\n\"And you think I'd be happy with another girl? Tried that- didn't work for me,\" I countered, and she smiled.\n\n\"You better be careful, you know- if you make me want you, you'd better be prepared to deal with the consequences. There'll be no stopping me once I start.\"\n\n\"Really? Is this my last chance? Turn back before it's too late kind of deal?\" I asked playfully, and she nodded, still blushing, so I pulled her over my shoulder, and she giggled as she landed with a thud, sprawled out on the grass, looking up at me, half-smiling with her breath half-caught in her throat.\n\nShe swallowed nervously as I stared into her eyes, then briefly glanced at her lips before returning my gaze to them.\n\n\"I want you, Kelly Hegel,\" I muttered, pausing to drink in the starry look in her eyes before leaning down to claim her lips with a kiss.\n\nShe took two quick breaths, before rolling over and getting onto her knees; then without warning, she pounced on me unexpectedly.\n\n\"Whoa-\" I added, with a chuckle as she bowled me over.\n\nShe clutched at my robes, a huge smile on her face, and her eyes sparkling with excitement as she dove into me for a kiss, and she kissed me hungrily, passionately, unleashing the full extent of her long-held desire to possess me.\n\n\"Maybe we should set up a tent?\" I offered, trying to break out of her frenzied assault, and she folded her hands as she looked up at me with a furious pout.\n\n\"Fine! You have two minutes before I jump you again,\" she muttered wickedly, and I quickly got to work setting up the little enclosure.\n\nShe studied me with a teasing show of impatience as I set it up, and I was scarcely done when she leapt into me, knocking me into the tent, and attacking me with her lips once more before I could so much as close the entry flap.\n\nJesus Kelly, I thought to myself. How much have you been holding back?\n\n\"Take this off,\" she muttered hungrily, and I removed my armor, allowing her access to my body.\n\nShe began to kiss me- not the soft, loving kisses that she had given me back then on the night that she left, but hungry sucking kisses that left a wet trail of red marks across my chest, and sent little jolts electricity up my spine.\n\nI allowed her to ravish me to her heart's content, before pulling her up to my lips, and kissing her as deeply as I could manage while I pressed her body into mine, trying my best to merge our two forms into one.\n\nShe slipped against me, rolling me around with her as we kissed.\n\n\"Tell me you want me, Josh,\" she pleaded, slightly out of breath, as I moved my attention down to her neck and she pressed my face into her body, clutching me tightly.\n\n\"I want you- I've always wanted you,\" I whispered with a pant, and she pulled away from my kisses to remove her vest, bringing a wonderful pair of breasts into view.\n\nShe pulled my face into her bosom and I devoured them fervently as she fished my stiff cock from the wraps around my waist.\n\nShe brought me to her entrance, and without hesitating she plunged me into the awaiting warmth of her already wet love tunnel.\n\n\"Mnh,\" she moaned, wiggling a little against my cock, before she pressed herself into me and began to ride my length in smooth, but hard strokes.\n\nThere was an urgency in her desire, and I was intent on meeting it, so I held her body close to me with one hand while resting the other on the floor for support, and allowing her the freedom to impale herself on my length to her fancy.\n\nShe was moaning emphatically, drawing my hips to work with her as she ground herself against me with abandon, quickly bringing herself closer to an orgasm.\n\n\"Mnh- yes. Fuck me, Josh. Fuck your little sister. Cum inside me- and make me your own private fuck-toy.\"\n\nHer dirty words, combined with the way her pussy was squeezing my cock delightfully and massaging it each time she rolled her hips on top of me, quickly pushed me over the edge, and as I felt the cum welling up in my balls, preparing to spew into her womb, I leaned back a bit and began meeting her with upward thrusts of my own.\n\nI tensed a bit, as I came inside of her hard, and with one final scream she bit down into my shoulder hard, and I could feel her body tense in my arms as her own orgasm rocked through her body.\n\nI shuddered a bit as an incredible feeling of pain shot through my shoulder, and I felt the curious sensation of blood running down my back; but the discomfort quickly gave way to a euphoric kind of pleasure, and I placed my hand on her stomach as she continued moving against me, guiding her movements and prolonging her orgasm for as long as I could.\n\nKelly wriggled a little, and I slipped from within her as she collapsed on top of me with a deep, satisfied smile.\n\n\"Wow- that was. Incredible,\" she muttered between heavy breaths.\n\nI touched the spot where she'd bit into me gingerly, and Kelly let out a giggle as she inspected the damage.\n\nShe looked down at me timidly, a little trail of blood on her lips, and I couldn't help but notice how sexy it made her look.\n\n\"You know... I watched you fuck Tracey once,\" she admitted shyly.\n\n\"Oh?\" I answered, as I lifted my hands to fondle the wonderful fleshy globes that were stood enticingly on her chest. Her nipples were firm, and I flicked them occasionally as I alternated my massage between the two.\n\n\"Yup- came home early from school one day; it was in final year I think? The back door was open and no cars in the drive- I had a feeling something was up, so I sneaked upstairs, and sure enough you two were going at it in your room.\"\n\n\"Damn,\" I responded, as I began to let my hands wander, trailing seductive little lines along her sides with my fingertips. \"I used to leave the door open so I could hear if anyone came in.\"\n\n\"Oh I know. I was extra quiet-\" she added with a cheeky smirk. \"I knew I was going to catch you that time. I crept up the stairs on my hands and knees, and I peeked over the stairs into your room- and there you were. You were on your back, and she was riding you- no skill, that girl; just bucking back and forth like she was on one of those kiddie rides,\" she continued with a laugh, and I chuckled a bit as I realized how aptly the description fit.\n\n\"Did you play with yourself,\" I asked with interest, my fingers now roaming across her hips, and creeping along to her inner thigh, and she continued:\n\n\"A little- I didn't want to get caught before I saw you cum. You have no idea how much self-control it took to stop me from waltzing in there and tearing her off to take you myself. I'd ride your cock, just like I did just now- while fighting her off and everything,\" she added with a wicked smile, and I let my hand wander to her slit, where my fingers slipped easily along the folds of her sopping wet lips.\n\n\"Did you ever think about me?\" she asked, and I licked my lips as she watched me with bated interest.\n\n\"You remember that Halloween after you graduated? You made the awful decision to dress up as a sexy cat-girl,\" I recounted, as I moved her up a bit, to bring her breasts within reach of my mouth.\n\n\"Uh-huh- I'd just found out about your Japanese cat-girl fetish. Could you blame me?\" she asked innocently, and I bit down into one of her breasts in response.\n\nShe giggled a bit, before continuing with a little smile:\n\n\"Go on- I wanna hear this.\"\n\nShe was looking at me with desirous intent, and as my fingers explored the sensitive area around her pussy, I slipped a finger into her warm, wet opening as I continued:\n\n\"Tracey had just gone into the bathroom to get into her obligatory 'slutty witch' outfit when you came bouncing into my room with those cute cat-ears and that bushy little tail- I'm pretty sure that was the day when I noticed that my sister's cute little butt was just downright fuckable.\"\n\n\"Ooh. I remember that. Those shorts were so tight! I had to change out of them before I left the house,\" she added with a wicked smile.\n\n\"You wicked little...\", I retorted, as I gave her a right smack on the butt for her effort, but the delightful smile on her face was unapologetic to say the least.\n\n\"I kind of lost it that time- went right into the bathroom to find Tracey. I'm pretty sure mom heard her screams when I fucked her silly. She sure didn't complain when I was giving her the best orgasm she ever had in her life, but she went on and on about smelling like a 'cum-dumpster' all night.\"\n\n\"Mmm-\" she purred in response. \"If I was walking around smelling of your cum all night, you'd have to tie me up to stop me from playing with myself.\"\n\n\"Did you ever?\" I asked, intrigued.\n\n\"What?\"\n\n\"Smell my cum- play with yourself?\" And she giggled teasingly in response.\n\n\"Does that turn you on?\" she asked, and I nodded.\n\n\"Unfortunately- few opportunities. You have some kind of thing against cum rags. I used to leave my sexy used underwear all around the bathroom just hoping you'd use them.\"\n\nI smirked.\n\n\"I did use them- I just washed them immediately,\" I retorted, and she groaned in frustration:\n\n\"Ugh- no wonder they kept disappearing and coming back clean. I always thought it was mom.\"\n\nShe put a finger to her lips thoughtfully, a dirty smile appearing on her lips as she continued:\n\n\"There was this one time though, when we were at the beach up at the cape- you got off to fucking Tracey somewhere when I wasn't looking... but you must have been in a hurry, because you came back looking all disheveled and smelling like sex. I smelt it on her- Tracey. I knew it was your cum- it was so musky, so pungent, so raw. It smelled nothing like a woman, and I was sniffing at her like a fool and she started getting all flustered.\"\n\n\"Oh my god, I remember that,\" I exclaimed. \"She came over to me and whispered 'your sister knows we had sex!' She thought you would rat us out. If only she knew what you were really thinking,\" I noted with amusement.\n\n\"You have a lot of fucking to make up for when we get out of here- for every time you ever fucked that bitch when it should have been me.\"\n\nI kissed her neck lovingly, as I continued to work my fingers inside of her, and she cooed into my ear in appreciation.\n\n\"Tell me that you love me,\" she whispered, her voice thick and breathy.\n\n\"More than anything I possibly could.\"\n\n\"Tell me that I'm the best little sister in the whole world?\"\n\n\"You are the sexiest, most adorable fuckably cute little sister there ever was,\" I muttered affectionately, and she nuzzled my neck with a broad smile.\n\n\"I think that's how I want to sign my name off from now on,\" she muttered playfully, grinding against me a little now.\n\n\"That's going to make for some awkward family postcards,\" I responded, and she giggled:\n\n\"That's at least better than my name,\" she murmured somewhat despondently, and I paused my exploration of her sex to study at her in disbelief.\n\n\"What's wrong with your name?\"\n\n\"You mean- apart from being the plainest, most boring name on the planet? What was that fancy version of my name you used to call me again?\"\n\n\"Princess Calleigh the brave?\" I muttered, and she nodded excitedly.\n\n\"That's it! That was at least better than Kelly.\"\n\n\"You're nuts! Kelly is the best name in the world!\"\n\n\"What? Why?\"\n\n\"Oh, I dunno. Maybe because it's your name?\"\n\n\"You're just saying that because you're my brother and you have to,\" she countered, but I shook my head.\n\n\"No I'm not. I really love your name. I could say it over and over from now until the end of time and never get bored.\"\n\n\"Liar!\" she teased, and I shook my head.\n\n\"Cross my heart!\" I replied solemnly, as I held her gaze. \"Sometimes- when things were pretty bad and I felt like I couldn't take it anymore, I'd just sit to myself and say your name a few times. It never failed to make me smile.\"\n\n\"No way,\" she countered through a smile, her eyes sparkling brilliantly at me. \"Say it then,\" she offered the words like a challenge, and I blushed a little as she studied me.\n\n\"Kelly,\" I muttered softly, and I felt my face redden a little as I said it, but she was studying me with wide eyed affection.\n\n\"Again.\"\n\n\"Kelly.\"\n\nShe shuddered a little this time, and I felt myself stirring against her.\n\n\"You're casting some kind of spell, aren't you?\" she whispered conspiratorially, and I smiled, before rolling her onto her back and positioning myself top of her.\n\n\"Yup. Special kind of magic.\"\n\n\"What does it do?\"\n\n\"That depends on who casts it. If it's just some random person, then it makes the target respond like, 'oh, hi. Didn't see you there', or something,\" and she giggled at me. \"But if its cast by the right person, then it makes you lay everything down before them; your heart, your soul, your every dream, wish and desire.\"\n\n\"And what if I try to resist it?\"\n\n\"Kelly,\" I muttered again, leaning into her and she closed her eyes as she shuddered a little.\n\n\"Stop that- you're driving me crazy,\" she replied, but as she pulled me down on top of her, I knew she wanted the exact opposite.\n\n\"Kelly,\" I muttered again, and she spread her legs under me, and shuddered again as my semi-erect cock brushed against her.\n\n\"Oh Josh,\" she whispered, wrapping her hands about me as she nuzzled my neck affectionately.\n\n\"Kelly,\" I whispered the name now into her ear, and a long sensuous purr came from her lips I aligned my cock at the entrance of her slit.\n\n\"Oh my,\" she whispered, her voice thick and husky with arousal, as I slowly sank my length into her.\n\nHer lips parted around my rigid member, and I slipped almost effortlessly into her slick tunnel, aided by the combined with the fluids of our recently concluded copulation.\n\nWith a trance-like expression of bliss on her face, she closed her eyes as a seductive little purr slipped from her lips, and she whispered again: \"Say my name, Josh.\"\n\n\"Kelly,\" I muttered, focusing everything on the utterance, allowing my body now move into her almost on autopilot, and she arched her back to allow me to reach more deeply into her, and I grunted a little as I drove my shaft into her wonderful warm embrace.\n\nOur pace was picking up, and steady stream of moans were now emanating from Kelly's lips.\n\nI leaned down to kiss the delectable fleshy globes that swayed obscenely with the rhythmic, to and fro movements of our bodies, and she squirmed delightfully as I flicked her firm nipples back and forth with my tongue.\n\n\"Bite them, Josh- make me squirm, make me scream.\"\n\nI took one of the succulent round globes into my mouth and bit into the flesh as hard as I dared, and Kelly's body tensed underneath me as she let out a shriek.\n\n\"Mnh, yes- Josh! Make me cum. Make me yours!\"\n\nI repositioned myself, and she wiggled her legs from under me and wrapped them about me, coaxing my length deeper and deeper inside of her each time our bodies met.\n\n\"Kelly,\" I whispered her name into her ear, and she moaned emphatically in response. \"Cum for me, I continued, \"Cum for your big brother.\"\n\nThe instruction instantly sent her cascading over the edge, and as I fucked her with abandon I was rewarded with a series of ecstatic screams, and she dug her nails into my back as a second orgasm ripped through her body.\n\nAs each orgasmic pulse washed over her, her insides contracted wonderfully around my rigid member, and as she continued to work herself against me, I shot my second load of cum deep inside of her with a grunt; continuing to moan as her muscles tightened and relaxed, working me delightfully, coaxing every drop of my seed out of my cock, and deep inside of her womb.\n\nWe collapsed together into an exhausted heap, panting heavily from the exertion but smiling like the satisfied, happy pair we were.\n\nAs I studied Kelly, still panting and recovering from her orgasmic high, she looked over at me and smiled.\n\nFeeling blissfully satisfied, I pulled her towards me, holding her close like the dear treasure that she was, and it didn't take long before we both drifted off to sleep.\n\n***\n\n*Bzz!\n\nThe buzzing woke me up to the sight of Kelly's naked avatar lying wrapped up in my arms, and as I shifted a little she groaned before coming to.\n\n\"Please tell me it's not dawn,\" she mumbled, as she stretched out with a long tired sigh.\n\n\"No- but I think I'm getting a call.\"\n\nShe studied me glumly, and I opened up my character interface to see, 'receiving call from dumb bitch,' as expected.\n\n\"Tracey,\" I muttered, and she groaned again, but as I dismissed the call her expression changed to one of guarded interest.\n\n\"Not answering?\" she asked, and I shook my head.\n\n\"Sorry- I don't feel like being yelled at right now for something I probably did three years ago,\" I added with a tired sigh of my own, and Kelly crept up to me, rubbing her nose against mine.\n\n\"Good boy,\" she added with a playful pat on the head, and I frowned a little at the pet-like gesture.\n\nKelly turned a little away from me as she stretched out again, and I moved behind her, wrapping my arms about her and pulling her into a spooning position.\n\n\"That felt a little too well rehearsed... is that how you and Serra worked on your synergy?\" she asked teasingly, and as I blushed I was glad that my face was hidden behind her.\n",
        "She sighed, and gave me a little frustrated elbow in the stomach nonetheless.\n\nAnd here I was thinking she didn't get jealous.\n\n\"Come to think of it, you probably held Tracey like this too,\" she muttered, as she took my hand and brought it up to her amply sized breast.\n\n\"Do you want a lie or the truth?\" I asked, and she prodded me with her elbow again.\n\nShe gave a thoughtful 'hm,' before shuffling a bit, turning over to face me, and suddenly our faces were just inches apart, her breasts were mashing delightfully into my chest, and our legs almost automatically intertwined.\n\nOur noses were just touching, and I stared into her eyes as I felt the little warm puffs of breath each time she exhaled.\n\n\"There!\" she announced triumphantly, \"this is much better, isn't it?\" and I nodded hypnotically as our faces drew in, almost automatically, for our lips to meet.\n\n\"I miss you,\" I muttered softly, as we broke the gentle kiss, and she giggled at me:\n\n\"I'm right here, silly.\"\n\n\"No- I mean the real you. You look like an angel when you sleep- you always have. That day when I woke up and you were there, sleeping by my side... it was like waking up from a nightmare to find myself in a heavenly dream.\"\n\nShe blushed, before leaning in to kiss me again.\n\n\"What would you have done if I didn't wake up?\" she asked, and I smiled uncertainly.\n\n\"Probably nothing... just sit there and admire you,\" I murmured, and she frowned a little.\n\n\"Not even a kiss?\" she asked, and I shook my head:\n\n\"I was a good brother.\"\n\n\"You still are.\"\n\nI kissed her again, then brushed her bangs out of her eyes, and she hummed contentedly in response.\n\n\"I'm not so sure about that,\" I countered, as I stole a glance at her naked breasts with a wry smile. \"I did think about kissing you though.\"\n\n\"Really?\"\n\n\"Yeah- as far as I knew I was dreaming... dreams don't count, right?\" I added with a wink, and she shoved me playfully in response. \"You have beautiful lips,\" I countered, and she licked hers as she hung on my every word.\n\n\"Can I tell you something?\" she asked shyly, and I studied her intently, making her blush further.\n\n\"Go on,\" I offered with intrigue.\n\n\"I kissed you that day,\" she admitted, going ever redder than before.\n\n\"You naughty little-\" my words trailed off as I grasped her, and rolled her about as she giggled gleefully.\n\nShe ended up on her back, breathing a little more tersely, but still looking up at me playfully as we came to rest, my hand at the side of her head, supporting my upper body just over hers.\n\n\"Can I tell you something else?\" she asked, as she put a finger to her lips and she shot me a naughty, secretive smile: \"That wasn't the first time.\"\n\n\"Uh-huh. And here I was thinking all these years my little sister was just the perfect little angel.\"\n\n\"What? I am,\" she responded with a showy innocent smile.\n\n\"Sure- let's hear it then.\"\n\n\"Hnn. Remember back when you were in high school and Tracey got into that whole drama/interpretive dance thing?\"\n\n\"Ugh- why is every story related to her?\"\n\n\"Oh, I dunno- maybe because you dated the bitch for seven years?\" she quipped.\n\n\"Hm- fair enough,\" I conceded, with mock indifference, and she turned her head away from me with a playful 'hmph!' \"Go on,\" I prodded her, and she smiled as she relented.\n\n\"Remember that big recital you all had?\"\n\n\"How can I forget? Those people worked me like a slave for days, and we didn't even get so much as a thank you in the acknowledgements.\"\n\n\"Kind of like the perfect metaphor for your entire relationship with Tracey if you ask me,\" she responded with perk, and I flicked at her forehead in retaliation.\n\nHow apt it was that the club was called 'drama,' I thought to myself.\n\n\"You were passed out in the car on the way home; then one sharp left and you kind of slumped over to my side. You didn't wake up; it was dark, mom and dad couldn't see us unless they looked back, and you looked so peaceful I kind of just held you, petting your hair comfortingly- but then I turned your face up to mine, and your lips just seemed to be calling out to me. I was entranced, and before I even knew what I was doing, I leaned in- and kissed you. In my head, it was going to be just a little sisterly peck- but when I pressed your lips to mine... something just felt so right. I was going crazy thinking you could wake up at any moment and start screaming your head off at me, but it felt so good- I just couldn't stop myself. I have no idea how long the kiss lasted- but I could never get that feeling out of my head.\"\n\nShe was blushing again, and I studied her with a mixture of amazement and affection.\n\nShe'd been holding back so much, and for so much longer than I'd ever imagined.\n\nI didn't think it was possible for me to hold her any higher in esteem, but she truly never ceased to stop amazing me.\n\nI was leaning in to kiss her again when-\n\n*Bzz!\n\nI twitched a little, and she looked into my eyes.\n\n\"Call?\" she asked, and I nodded, confirming that it was indeed Tracey who was again calling.\n\nI ignored it once more, but a little anxiety began to gnaw at my chest, and Kelly quickly took notice.\n\n\"You know- that was the day we officially got together,\" I muttered.\n\n\"Huh?\"\n\n\"The dance recital.\"\n\n\"Oh,\" she responded, a little despondently.\n\nI tried to keep up a smile, but the look on Kelly's face told me that it wasn't as effective a mask as I'd imagined.\n\n\"I'm sorry,\" I muttered, turning away from her and slumping onto my back.\n\n\"For what, exactly?\" she asked, leaning over me now, a thoughtful look in her eye.\n\n\"I dunno- isn't the last thing a girl wants to hear is a guy complaining about his ex?\" I asked with a sigh, and to my surprise she smiled at me and tugged at my nose, before giving it a little wiggle.\n\n\"I'm not just a girl, Josh- I'm your sister too. And I know better than anyone just how badly broken that girl left you. I'm not saying I want to hear you constantly talking about her, but I don't expect you to magically heal overnight either,\" she added, before leaning down to rest her head on my chest. \"I'm just glad that you've started back talking to me again. Dying in a death game wasn't the only way I could've lost you...\"\n\nAs she lay there, stroking my chest comfortingly, my thoughts began to wander.\n\nKelly thought the world of me, didn't she?\n\nNo matter how low I'd sunk, she'd stuck it through and stayed with me.\n\nShe believed in me when I could have scarcely believed in myself.\n\nI wanted to be worthy of her.\n\nI wanted to be the awesome big brother, the hero she saw me as.\n\nI clenched my fists, and smiled a little, as the resolve took shape in my head:\n\nI'm going to kill a master vampire!\n\n***\n\n//\n\n***\n\nEric Dyer poured himself another cup of coffee.\n\nAs he looked over to the other man in the lounge, he saw what he imagined his own tired, sleep deprived eyes looked like.\n\nIt had been three solid weeks of absolute Hell since Mythic Lands Online first launched, but their hell was probably nothing compared to what the players were going through.\n\nHe sighed.\n\nAs the only executive who didn't bail as soon as it all fell apart, a lot had fallen into his lap and all at once too.\n\nGary Wright went into hiding.\n\nLuka's kids still couldn't be found.\n\nAnd Angela was basically spending night and day trying to contain the PR nightmare that had come with the disaster.\n\nHe took a sip of the piping hot, dark liquid, and allowed the warmth to spread through his chest.\n\nWith coffee in hand, he walked carefully out of the room and down the hall to the hotel conference room that was now operating as a makeshift headquarters.\n\nHow very apt it was for this impromptu meeting to take place in Geneva, he thought with a chuckle as he walked into a room where a world map stood on the far right wall, with little pins and pictures of every player still trapped in the game, stood, with their corresponding location.\n\nWith players hailing from every continent on the planet, the event was quickly being hailed as the first truly global technological disaster.\n\nThe death toll was already close to five hundred, but the more worrying part was the four thousand or so others who'd been disconnected from the game without waking up.\n\nThey were comatose by all appearances- but this was the strange thing; every single one who had been unplugged immediately died.\n\nIt was as if their minds were still stuck in that place, and their bodies died if they didn't make it back intact.\n\nIt was being covered up of course; there was no way they could let people know that players were disconnecting and not recovering; the sheer panic was nigh uncontrollable as is.\n\nThis was where Angela's brilliance in PR really shone; her decision to limit communication between the players and the outside world saved lives, and bought them some much needed time.\n\nBut panic could kill faster than even the game itself could.\n\nHe surveyed the mishmash of analysts in front of him with a sigh.\n\nAll attempts made by the company to resolve the issue internally had failed, and after less than a week they had no choice but to accept governmental intervention; but whose?\n\nThat was the funny part.\n\nThis was a company based in Switzerland, with assets on every continent on the planet; hell, they even had three satellites orbiting the earth, and one on Mars.\n\nThe Americans demanded precedence, but they were quickly contested by the Russians and Chinese.\n\nWhose protocol was it to govern virtual space? All known laws depended on where the servers were located, but this incident was global in almost every sense of the word.\n\nAnd... two weeks later, and where did it get them?\n\nNo one wanted to share intel; but no one was making significant progress alone.\n\nAll projections told them that it would take two months to reverse engineer all of the game's protocols; and that was provided that they'd even found a way in at all.\n\nThat was where this conference came in.\n\nIt was a peacekeeping effort of sorts, and the type that quite frankly, they didn't have time to waste on.\n\nThat was how it started out at least; until he showed up.\n\nEric adjusted his glasses as he eyed the man uncertainly.\n\nHe wore a carefree smile that didn't seem to ever fade, and his hair had been dyed a curious shade of green which seriously contrasted the complete business attire that he wore at all times.\n\nHe arrived, uninvited, to a secret meeting of some of the world's most notable representatives with a simple proposal; the conspiracy group, known by their alias, CPY, wanted a chance to crack the most notoriously protected game of all time.\n\nEric had at his disposal some of the brightest young minds in cyber security, network analysis and computer engineering on the planet.\n\nWhat were they, but a bunch of glorified modern day pirates?\n\nEvery year they cracked and distributed billions of dollars' worth of software freely.\n\nEric had almost laughed at the prospect, but that was before the man presented them with a video of one of their testers logging into the network and getting to the loading screen and opening credits.\n\nIt was more than any of the arrogant government agencies assembled here had accomplished with two weeks of dedicated work, and they had done it while hacking their security systems to get unauthorized access to some of the game's protected servers.\n\nThe video checked out, and the representatives gathered had to make a decision quick; keep working at it alone, or use a team that had made more progress than any them had with much less resources and time.\n\nAfter a quick conference, the representatives gathered decided to give it a try, and to everyone's shock, it took them just three days to reverse engineer the game's introductory protocols, giving the alliance their first real glimpses into the protocols that had been initialized after the game's launch.\n\nAnd so the impromptu collaboration began.\n\nIt began with just the Americans and the Chinese, but Japan, Russia and the Eu quickly followed, and list of countries that were allocating resources and manpower to help was growing daily.\n\nSurvival mode; that was what the protocol was called.\n\nThere was so much hush behind it that they couldn't even locate the coders who programmed it; it was Luka's doing, there was no doubt about it now, but the hows and whys would haunt the world for some time to come. After all... his body was lying in a morgue as they spoke.\n\n\"We've gotten word on the kids; a young man called, as he burst through the conference doors in a huff. They're in bad condition, but alive.\"\n\nEric breathed a relieved sigh.\n\n\"Where are they?\" he asked.\n\n\"At the medical facility in Stockholm.\"\n\nHe picked up his phone and immediately placed a call to arrange a flight for one of their representatives.\n\nThose kids had gotten into the game somehow.\n\nBut how, and why?\n\nTheir father, Luka, was already dead.\n\nNo-one had any clues, but if they could get in then the matter needed to be investigated and fast.\n\nHe was still midway through the call when a young woman suddenly shrieked, drawing his attention to her.\n\nHe walked over to the little laptop screen she was seated in front of, then gasped as he processed the information that was being displayed.\n\n\"Two hundred and forty? That- that can't be right...\" Eric muttered, the phone slipping from his hand, and landing on the floor with a *thud.\n\nTwo hundred and forty deaths in the last four hours.\n\nIt was more deaths than had occurred in any single period since the initial phase immediately after the game's launch.\n\nWhat the hell was going on?\n\n***\n\n//\n\n***\n\nAfter a reluctant farewell with Kelly, I met up with Serra and was immediately struck by the incredibly grumpy look on her face.\n\n\"H-hey. You look, uh-\"\n\n\"Fuck off,\" she muttered angrily before storming off, not even looking back to see if I'd followed.\n\nShe was quiet and brooding for half of the journey but her irritability eventually abated, to my relief, and she began going over our plans.\n\nOur destination was an abandoned castle some half a day's journey East of Ravenloft, and nestled into a nook in the great range that ran from the east to a long way south of the town.\n\nAs we studied the castle, I glanced at Serra.\n\n\"Think we'll have company?\" I asked, and she shook her head.\n\n\"Not a chance. This one is the furthest out, and no-one should know about it.\"\n\n\"What if your contact sold you out?\" I asked with a wry smile, and she turned haughtily on me.\n\n\"Mackenzie isn't that type of scout. I've been paying her 50k per report since the game started. Her info is exclusive and always on the money.\"\n\n\"Wow. That's a lot for a scout.\"\n\n\"Yup. But she's worth it. She's a rogue with zero combat skills but every movement, sneak and escape skill in the game. There isn't any dungeon in existence that she can't scout.\"\n\nWe started scoping out the scene for ourselves but quickly ran into a stumbling block; every animal, insect or critter we could send in to scout for us quickly wound up dead, as the vampire's lair was crawling with little critters of their own capable of snuffing them out.\n\nWe spent half the morning trying to get some useful info before resorting to my scan skill as a last resort; but even that failed as the lair was apparently protected by an anti-magic field designed to prevent scrying of any kind.\n\n\"So- do we go in blind?\" I asked, and Serra sighed.\n\n\"I think you should sit this one out,\" she responded, and I stared at her in disbelief.\n\n\"What?\"\n\nShe fidgeted a bit, looking away as she spoke:\n\n\"I'm pretty good at staying alive, and thanks to Mackenzie's info I have a pretty good idea of where the baddie might be hiding out. But if we don't know what we're up against then I don't wanna risk-\"\n\n\"Seriously? You've been building your skills around my support. You told me yourself that you stopped building your skills for solo play- and you've spent a lot on me that you would have spent on yourself. You'd be putting yourself at risk here. Why?\"\n\n\"That's not it- I'm just confident that-\"\n\n\"Bullshit.\"\n\nI think in that moment I finally understood how Kelly felt when I'd changed things up on her at the start of the game.\n\n\"Come on- you've trained me, and we've been doing well so far. If you don't trust me then maybe trust in your own ability as my teacher?\"\n\nI winked at her, and she relented with a sigh.\n\n\"Fine- lets go then,\" she muttered reluctantly.\n\nMackenzie's scouting info pointed out a few useful ways in, so we made it inside without much of a fuss.\n\nSince vampires were natural creatures of the dark, we opted for Serra's silence spell over our now usual tactic of moving under the cover of shade.\n\n\"Be careful. This place is bound to be crawling with thralls,\" she whispered.\n\nAs she activated the spell, she reached instinctively for my hand and I hesitated just a bit, and she looked away with a glum expression before leading me down a dilapidated hall.\n\nAs we moved, however, I caught sight of a rat that seemed to be paying special attention to us, and on instinct, I lunged forward and skewered it with my dagger.\n\nSerra looked at me questioningly, then gasped when the dead rat suddenly burst into flames, and vaporized before us, leaving nothing but a little heap of ash.\n\nI gulped as Serra and I exchanged nervous glances.\n\n\"I don't like this,\" Serra muttered. \"They can see us, and we're blind. I'm going to check for traps: Detect traps,\" Serra muttered, and I put my hand over hers as she placed it against a nearby wall.\n\nDetect traps was a useful spell, but it was limited to what was in the caster's line of sight. But by using synergy and adding my magical necklace to the equation we had managed to increase the effectiveness of the spell by over tenfold.\n\n\"There- there's a pit trap up ahead,\" Serra muttered, and I nodded, but as we approached the spot Serra stopped me.\n\n\"Something's not right. Light,\" she whispered, bringing a little ball of light into the palm of her hand, and I leaned forward to follow her gaze.\n\n\"Whoa,\" I added, as I stared through some missing blocks in the floor to the floor beneath us.\n\n\"That's not a pit,\" Serra muttered, and I pondered the information.\n\n\"Anti-magic field?\" I asked, and she shook her head.\n\n\"Anti-magic would have negated the spell, not given me a false positive. It's an illusion; and a powerful one.\"\n\nI studied her, as she paused, deep in thought.\n\n\"What're you thinking?\" I asked.\n\n\"I could cast true sight,\" she muttered, \"but then I won't have enough magic to use fire storm on the vampire... but if something's leading us around with powerful enough illusions to manipulate my detection spells- then we might not even make it to him at all.\"\n\nShe took a deep breath, before deciding: \"Fuck it- I'm gonna cast it. You can enchant your rapier to hit him and I'll just smite the bastard to death. True sight!\"\n\nSerra's eyes instantly glowed white, but as soon as the spell activated Serra shrieked, and I quickly grasped her hand to activate synergy.\n\nI followed her gaze downwards, and was met with a pair of deep red eyes staring directly back at me; but before I could so much as gasp, a faint, disembodied whisper came echoing down the corridor; \"collapse.\"\n\nThe ground beneath us immediately began to give way and Serra, almost instinctively, reached out with her hands in an attempt to push me out of the way; but for once I was one step ahead of her.\n\nAs she reached out, I grasped her hand, and pulled myself into her body, wrapping myself firmly around her as we cascaded down with the collapsing floor into a seemingly never ending pit of darkness.\n\n\"Feather fall,\" Serra whispered as I clung to her, and not a moment too soon as we hit into the floor with a *thud!",
        "I rolled over with a groan, and Serra coughed as a cloud of dust raised up about us.\n\nI studied Serra who had undoubtedly tried to push me out of the way of the collapsing floor.\n\n\"You know, for someone who's always scolding me for doing dumb shit, you sure tried to do something stupid there.\"\n\n\"I don't know what you're talking about,\" Serra replied dismissively, pretending to be completely unaware of what I was referring to, but as I studied her she showed a faint little smile.\n\nI was about to reach over to her, when a deep low growl came echoing down to us from above, and I looked up at the pile of rubble to our left to see a large hound like creature take form, staring at us with those familiar deep red eyes.\n\n\"What is that?\" I muttered, as we backed away slowly from the beast.\n\n\"A blink dog, I think,\" Serra muttered, \"though I don't know why one would be with a vampire. We're in trouble here, Josh. It's deadly and quick, and we're sitting ducks.\"\n\nI considered the situation, then decided to channel my inner Serra and go for an unorthodox solution.\n\nPulling up my inventory, I retrieved one of the skewers that I'd previously prepared and tossed the meat laden stick into a corner near the beast, and it lunged at the offering, before devouring it ravenously.\n\n\"It likes it,\" Serra observed, before adding: \"throw another one.\"\n\nI retrieved another skewer and tossed the meat at the creature, and it quickly gobbled up the small offering.\n\n\"That's the last of it,\" I added nervously.\n\n\"Try casting speak with animals,\" she ordered, and I bit my lip in apprehension:\n\n\"I don't think that's supposed to work on monsters.\"\n\n\"Just do it,\" she commanded with a huff, and I rubbed my hands together, inhaling deeply.\n\n\"Speak with animals,\" I muttered, and a while light appeared at my hands before flickering out.\n\n\"Do you think you can speak to me like some common little pest?\"\n\nThe deep, terrifying voice spoke directly into my mind, and as Serra gasped I assumed she'd heard it as well.\n\n\"Sorry- I didn't mean to offend you,\" I muttered, but Serra was already readying her hammer.\n\n\"What are these tasty meats?\" the creature continued, keeping his glowing red eyes trained on Serra as he circled us menacingly.\n\nAs he walked, he sometimes faded from reality before reappearing.\n\n\"Wild meat- slow roasted over an open flame,\" I responded, and he gave a little low growl in response.\n\n\"If you want to live- then drop what you have, and leave before I finish eating.\"\n\n\"There's no more-\" I started, and he advanced on me before I continued: \"but I can make as much as you can eat-\"\n\n\"- If you help us, that is,\" Serra cut in emphatically.\n\nHe faded from existence, before reappearing a little distance away, and resumed his terse pacing about us.\n\nUp close I could see that his fur was thick and silvery; much more like a wolf's than like any dog I'd ever seen. But despite his monstrous size, standing just a head lower than my height on all fours, I noted that he didn't at all look as hellish as I'd first imagined when I'd first stared into his crimson red eyes.\n\n\"Ha. Help you, puny human? Maybe I'll just make do with a meal of your corpses instead.\"\n\nSerra took a step forward to stand by my side.\n\n\"We're here to kill your master. You can help us in exchange for the meat, or die with him.\"\n\nThe blink dog faded again, before a bitter laugh echoed in our heads.\n\n\"My master? For centuries you foolish mortals have fallen before him. What makes you think you'll be any different?\"\n\nSerra slammed her hammer down, dangerously close, and the beast faded, before reappearing a little to her right with a snarl; but she didn't even flinch.\n\n\"Because we've killed worse,\" she replied confidently, and the blink dog faded away once more, before reappearing at a safer distance.\n\n\"Prove that you can make those meats, mortal, and I'll consider the request. But know this- I cannot directly intervene until that fiend is killed.\"\n\nI glanced at Serra dubiously, trying to keep an eye on the hound.\n\n\"Do you have firewood?\" she asked, and I nodded.\n\n\"Am I seriously cooking for this thing?\" I asked dubiously, and she nudged me with a look that said 'play along or else.'\n\nI set up a fire and was thankful to see that I had some meats left over from my hunting extravaganza with Kelly in the first week of the game.\n\nI settled for rack of ribs that had come off of a golden stag; one of the games' rare wild game, seasoning it as Kelly had taught me, before roasting it on the spit.\n\nThe hound licked his lips hungrily as it roasted, and I quickly removed it from the flame before offering it to him reverently.\n\nThis seemed to please him, and as he ate it, he studied us with a thoughtful expression of guarded curiosity.\n\nHe finished up the offering, licking his lips contentedly, before letting down his guard just a bit.\n\n\"Very well humans- I'll take you to him,\" he uttered, walking down the corridor.\n\n\"Do we trust him? He might be scripted to deceive us,\" I offered, and Serra smiled.\n\n\"Never played anything without unscripted scenarios, have you?\" she asked haughtily, and I resisted the urge to roll my eyes, as she continued: \"Tabletop role-playing games?\"\n\nI shook my head:\n\n\"Never tried them,\" I responded, and she smiled.\n\n\"Well- neither have I. But I did read up on them extensively when I heard that Gary Wright was designing this games' mechanics with the ancestor of all modern RPGs in mind.\"\n\n\"Which is?\"\n\n\"Dungeons and Dragons, numb nuts.\"\n\n\"Haven't heard of a Dragon in this game yet,\" I countered, and she chuckled.\n\n\"The mechanics is where the influence is strongest- immersion in most games is restricted by what the engine is capable of. To create something unlike any other game, Gary chose a system which was the most adaptable- and most like real life.\"\n\n\"So you're saying that this 'blink dog' isn't just some scripted scenario...\"\n\n\"Exactly- he's doing what he wants right now. That's not to say that he may not want to deceive us, but... what do you know about blink dogs?\"\n\nI rubbed my head then gave a little shrug.\n\n\"Nothing,\" I conceded, and she continued on:\n\n\"They fall into the category of fey rather than fiend; they're typically found in the company of great mages and saints.\"\n\n\"So you're thinking that he's here against his will?\"\n\n\"Yup. Depending on his backstory; he might have been corrupted, enslaved by the master vampire and forced to guard his lair.\"\n\n\"I see- so maybe he really wants to see his master killed,\" and she nodded in response.\n\nWe followed along for a bit, before we came to a wall, and as the hound circled the spot a bit, the wall shimmered out of view, revealing a hidden passage.\n\n\"This will take you to my master's chamber,\" the dog added, as he faded in and out of view once more.\n\n\"How many thralls does your master command?\" she asked.\n\n\"Twelve,\" he responded, before adding: \"If you spur my master into summoning them, I will intercede, so he will not be able to call for them through telepathy. But there is a lever on the balcony of the chamber's upper floor that allows him to release them; be wary if he goes for it.\"\n\nThe hound faded from existence once more, with a final echo: \"Good luck.\"\n\n\"What's the plan?\" I asked, as Serra had me enchant both of our weapons with temporary magical properties.\n\n\"Keep him grounded and silenced,\" she muttered in response, before taking a deep breath. \"Josh- are you sure about this?\" she asked? \"This isn't like the lich. We don't know what it'll be like till the fight starts, but running might not be an option once it does.\"\n\nI reached out and put my hand over hers before giving her a confident nod.\n\n\"I might suck, but I've got you. We can do it,\" I spoke the words with confidence, and she sighed:\n\n\"One night with 'little sis' and you think you can do anything huh?\"\n\nI grinned a little, and she took a deep breath before activating her silence ritual.\n\nWe stepped into the dark space that the blink dog had opened in the wall ahead of us, and after walking through a little tunnel, we came to a trapdoor which opened into a great, eerie court.\n\nThe entire room was bathed in a soft red light that gave it a wicked look, and a number of huge, test tube shaped glass objects were suspended in the air about it, with a thick red liquid that looked like blood floating about inside of them like liquid in a vacuum, forming bubble like blobs that sometimes broke into smaller pieces, before floating about to rejoin larger ones.\n\nI was still marveling at the scene around me when Serra hit me a sharp nudge, bringing to my attention the figure that was sitting in a throne that stood upon a dais at the far end of the room, where the lower floor was connected to an upper balcony via two circular staircases which spiraled away from the throne to the upper levels of the great court.\n\nHis eyes were fixed on us and he smiled for just a moment, before vanishing from sight:\n\n\"Collapse,\" came the echoey voice that we were familiar with, and I leapt off the ground, Serra's hand in mine, just as the floor exploded beneath our feet.\n\n\"Josh, you need-!\" She began, but I was already going:\n\n\"Illusion!\" I called in a panic, creating a platform connected to the ground at our feet, which I immediately gave physical form and not a second too late as Serra pushed off of it, leaping to the side as she shoved me hard.\n\nAs I fell backwards, a spark took shape where we'd only just stood, and I braced as it exploded into a fiery ball of flame.\n\nI landed hard, and coughed a bit as my head spun.\n\nSerra had pushed me out of the way of the brunt of the damage, but I still felt somewhat singed and hurt from the force of the explosion.\n\nWith my rapier in hand, I tried to mark the vampire, but in a blink, he vanished again, and I swore under my breath.\n\nShadow step; he could vanish and appear at will at any point that was shadowed.\n\n\"Light of Helios,\" Serra shouted, the sigil around her neck raised high over her head, and a great bright of light immediately illuminated the chamber.\n\nHe appeared out of shadows near to the left of the hall and Serra and I charged at him from opposite ends.\n\nHe summoned a great shield which parried Serra's first strike before easily evading my thrust, but I pressed the attack, forcing him to focus on evading my onslaught.\n\n\"Smite!\" Serra cried, as her hammer came crashing down on him with a mighty blow which broke through his shield and made him totter backwards a few steps, and the vampire let out a great shriek, just as he transformed into a bat and began flying off towards the upper balcony.\n\nI placed a hand on Serra's shoulder to transfer the mark to her through synergy, and she tried to fire her lightning shackles at the vampire in bat form- but he made a small target, nimbly dodging out of the way of her attacks.\n\n\"Shit! Josh-\"\n\n\"On it,\" I muttered, as I dashed across the room to get closer to him, before casting: \"Elemental conversion: air to steam!\"\n\nA 'shh-ing' sound echoed across the room as a big cloud of steam went up about the bat, and he beat his wings furiously, trying to keep flight as my spell thinned and lightened the air.\n\n\"Brilliant strike!\" Serra called, and this time the spell struck, and the bat tottered a bit in midair before he went spiraling down.\n\nHe continued to beat his wings furiously, but in vain, as the moisture from the steam weighed down his wings, impeding his ability to fly.\n\nHe transformed back into his humanoid form as he neared the floor, then with a snap of his fingers a sphere of darkness took form about him.\n\nI see you, I thought to myself with a smirk, and as Serra shot me a suggestive nod, she charged blindly into the midst of the void.\n\nI took off on an interceptive course, and as I ran into her, we were in perfect sync; I grasped her by the back of her robes and spun on my heels, activating synergy as I swung her in an arc to build on her momentum.\n\n\"Catapult,\" I chanted, as I released her.\n\nThe spell propelled her with immense force, and thanks to the improved aim that mark afforded me she went flying directly to the master vampire, who quickly called up a protective shield just as Serra crashed into him with a mighty swing.\n\n\"Smite!\" she yelled, and as her hammer broke the shield to pieces, and the very floor about him exploded into a shattered mess of wood and stone.\n\nHer blow sent him flying across the room, crashing hard into one of the chamber's pillars which all but shattered on impact.\n\nHe clambered shakily to his feet, bits of stone from the pillar he'd slammed into falling about him, and I took Serra's hand as we charged directly at him.\n\nAs I activated synergy, I reaffirmed my grip on her hand, and she shot me a curious glance as we were poised to strike, but as our combined blows came down, a curious impulse took me, and I chanted \"smite\" in unision with Serra.\n\nSerra gasped in surprise as my rapier glowed white, and as it pierced the vampire's chest, her hammer struck him in the ribs, and he let out a final bloodcurdling scream as his body began imploding, before bursting into a crimson flame which quickly consumed itself, leaving a scattered pile of ashen remains before us.\n\n\"Since when can you activate smite through me?\" Serra asked, and I shrugged, shooting her a haughty smirk.\n\n\"Am I still your idiot noob apprentice?\" I asked, and she grabbed me by the collar, and pulled me threateningly close to her face, before breaking into a grin.\n\n\"You'll always be a noob, Joshie,\" she countered, her hands softening about my robe as her grin simmered into a smile.\n\nAs the silence of our battle's aftermath sunk in, I became all at once aware of how close our faces were, but as I moved to withdraw she held me.\n\n\"Josh- we make a good team,\" she whispered, a hint of something in her voice that I couldn't place and a strange glossy look in her eyes.\n\nShe began to lean into me, but as I lifted my hand to stop her, the blink dog suddenly materialized into the space beside us, his voice speaking into our heads:\n\n\"I have to say- that was impressive. I never dreamed that fiend could be dispatched with such ease.\"\n\nSerra jumped away from me, suddenly focused on straightening out her robes and I studied her with a wary smile.\n\nAs we set about gathering whatever valuables we could from the room, I noted that the hound's attitude towards me seemed to have significantly improved.\n\nWhile Serra carefully retrieved the prized invitation from the vampire's remains, our new companion led me to a little room off of the main hall where the vampire had kept some of his most prized possessions; some pretty neat looking magical items, and other items of considerable value.\n\nI returned to the hall, eager to share the find with Serra, when suddenly a deep growl came from the blink dog, and Serra pulled out her hammer, her gaze fixed on the balcony above us.\n\nI followed her gaze as a curious figure emerged from the darkness; her form noticeably feminine despite her was face being obscured by the hood of her robe.\n\nI gulped nervously as I noticed the lever in front of her; the one that the master vampire had tried to get to in our battle.\n\n\"What do you want?\" Serra called, and the woman smiled.\n\n\"Your deaths,\" she whispered wickedly as she flipped the lever, and as the blink dog vanished and appeared at her side with a lunge, she leapt from the balcony into the open space above us, and I blinked in disbelief as she suddenly vanished into thin air.\n\n\"Can you sense her?\" Serra asked, as the blink dog reappeared at my side.\n\n\"No- she's concealed herself with magic\" he responded, before sniffing the air thoughtfully. \"You have to run. The thralls have been released.\"\n\nWe quickly followed the hound as he led us away from the court to a path where we might best be able to make our escape.\n\n\"Stop,\" the hound interrupted, sniffing the air as we approached an intersection in the narrow corridor.\n\n\"Where are they coming from?\" Serra asked, and he turned towards the corridor to our right, where the hallway led to stairway from a lower floor.\n\n\"Can we feather fall from the top of the castle?\" I asked, and Serra shook her head.\n\n\"With the anti-magic field around the castle I don't want to chance it, and even if we did get out, they'll most likely follow us- and we'll never outrun them.\"\n\nSerra took a look around before grabbing my hand and pulling me to the stairwell.\n\n\"Can you stall them?\" Serra asked the blink dog, and he bowed as he responded:\n\n\"Yes,\" before fading away into nothingness.\n\n\"What are you thinking?\" I asked, and she bit her lip nervously.\n\n\"I think it's time for that new spell of yours,\" she muttered softly, and I gulped.\n\n***\n\nMy new spell; astral imprisonment, was one which could trap the thralls in a dimensional barrier, but it would quickly consume my magic, making the imprisonment temporary. Serra's plan was to trap them all in the stairwell, before using her daylight spell to slowly wither away their health, then finish them off with physical combat.\n\nShe was hurriedly preparing a ritual circle at the top of the staircase as I sliced my way through a pillar, and piled the stone across the entryway.\n\n\"Are you sure this will work?\" I asked.\n\nA loud crashing sound came echoing down to us from somewhere far off in the castle, and I hurriedly continued my work.\n\n\"No time to make sure. Those thralls might not be able to cast spells like their master, but they're just as tough and hit even harder. Come on- we need to funnel them in from the lower levels.\"\n\nWe went down one level, and I studied Serra as she struggled to push over a shelf to make a barricade across the corridor.\n\n\"Why aren't you using your magic?\"\n\n\"Ugh,\" she grunted, as she struggled with the shelf. \"Because I'll need it,\" she responded blankly, and I studied her with trepidation.\n\n\"For what? Your light spell doesn't cost that much,\" I countered, and she glared at me in response.\n\n\"I might need to fight, moron. Now less talking, more barricading.\"\n\nWe worked our way down the stairwell, but as we finished blocking off the third floor, a howl came at us from above, and I looked up to see a vampire, a crazed look in his glowing red eyes as he stared at us with bloodthirsty intent.\n\n\"Shit- we need to knock him down,\" Serra muttered, and we began to climb the wide spiral stairs in an attempt to meet him as high up as possible.\n\nWe met him somewhere around the sixth floor, and Serra took my hand and gave me a little nod.\n\n\"Smite,\" I chanted as I lunged forward, but my rapier didn't glow this time and the beast grasped my blade in his hand, yanking me from Serra's grasp and sending me hurtling into the far wall.\n\nI looked to her to cast shackles or something, but instead, she tried to spin out of the way of another slash, and she cried out in pain as the claws tore across her chest. But she didn't hesitate for even a second before responding to the blow; raising her hammer and striking him in the chest, and following up the hit by leaping at him, and kicking out with her legs, knocking him over the balcony to the floor below.\n\n\"Elemental conversion,\" I chanted, as the thrall transformed into a bat, and I watched as it spiraled down before returning to its humanoid form at the bottom of the stairs.\n\nAs I stared down over the balcony, the thrall let out another bloodcurdling cry, and two more thralls entered to meet him.",
        "\"Come on!\" Serra yelled, as she pulled me hastily along.\n\nAs we hurried our way up to the top of the stairs, I glanced worriedly at the blood dripping from her front.\n\nWhy didn't she use magic? I thought again to myself, but I had little time for rumination as the blink dog materialized beside us.\n\n\"They're coming,\" it noted, and Serra gave a little nod.\n\n\"Ready?\" she asked, and I nodded nervously as she continued: \"Wait until the last one comes, and not a second earlier, okay?\"\n\nI gulped uncertainly, staring worriedly at the wound across her chest.\n\n\"Josh- look at me,\" she added, as she lifted my gaze to her eyes. \"I'll be fine- I promise, but I need you to do this, okay?\"\n\nI nodded again, but as she took my hand and gave it a little reassuring squeeze, I suddenly noticed her gaze flicker indistinctly down to my lips, and without warning she suddenly lunged into me, kissing me hard.\n\nHer eyes were tightly shut and her hands clutched at my chest, keeping me close, but only for a moment as she abruptly broke away from me, her eyes never meeting me again as she turned away and hastily made for the stairs.\n\n\"Come with me,\" she called to our canine companion, and he followed without a word as she hastened to meet the thralls who were almost upon us now.\n\nShe swung her hammer at the first, crashing into the ground hard as he leapt easily out of the way, and as the second lunged after her the blink dog materialized at her side and deflected the blow.\n\nShe still isn't using magic, I thought to myself, as I turned my attention away from her to check on the situation below.\n\nSeven more thralls were on their way up the stairs, which meant that two more were left.\n\n\"Not until the last one comes,\" Serra's command echoed in my mind.\n\nI glanced back to Serra; they were engaged with four thralls now, and as she parried a blow another leapt at her and Serra clenched her teeth as his fangs sank into her shoulder hard, and they came away dripping wickedly with blood.\n\nI clenched my fists anxiously as another came in.\n\nShould I cast it? I wondered, as all but one of the thralls were now in range of my spell.\n\nSerra knocked another off of the balcony just as another one lunged at her, slashing her across her back.\n\n\"You can just kill the last one after- she's going to die you moron, just cast it!\" a voice spoke into my head, but as I got ready to cast, I suddenly realized that she had not cried out even once despite being wounded several times already.\n\nShe'd always given me instructions with very good reasoning, and they'd never once been off the mark.\n\n\"Trust her,\" I told myself, \"she'll be okay- just trust her!\" and I returned my watch to the stairs just as the twelfth thrall entered the chamber, to my relief.\n\n\"Astral imprisonment,\" I muttered, and as the cylindrical rift in space appeared beneath us, I concentrated on shaping it to the width of the spiral staircase, and stretching it out to encompass all of the floors below.\n\nAs the spell finally covered the space where Serra and the blink dog were engaged with the thralls, she activated her ritual circle, teleporting her instantly out of the radius of my spell and the blink dog shifted out of existence, joining her at my side.\n\n\"Activate synergy,\" she commanded, putting her arms about me, and as I complied I shot her a questioning look.\n\nThis wasn't in the plan, I thought, and as she stepped past me to the edge of the balcony, I noted the nervous little smile on her face.\n\n\"Firestorm,\" she muttered softly, and I gasped as a white glow appeared about her just as column after column of flame began to erupt beneath us.\n\nShe created a fiery inferno of explosive flame, and it was magnificent; but as each column exploded Serra winced painfully, and I noted that her hands were clenched tight, and her body was shaking.\n\nI could feel the magic draining from me as I held my imprisonment firm, containing her explosive magic and sealing the thralls into a fiery sepulcher of doom, and I sighed with the realization that she had not been entirely honest with me.\n\nShe knew I would not be able to contain them for long enough for her daylight spell to kill them; using firestorm had been her plan all along.\n\nBut I knew that she didn't have enough magic to cast it; and as the explosions continued I studied her intently, trying to figure out just what the repercussions of casting it would be.\n\nAs the last thrall fell, burning away into a pile of ash, I ended my spell and ran to Serra, taking her into my arms just as she collapsed, panting, and barely conscious.\n\n\"Josh?\"\n\n\"I'm here- just hold on, I've got some salves.\"\n\n\"Josh- You know, I'm really glad... that I met you.\"\n\n\"Shh- don't talk.\"\n\n\"But I need to tell you-\"\n\n\"You'll tell me when we're back at the tavern in Ravenloft- over a mug of ale, and when we can smile and laugh about this. Just stay with me, okay?\"\n\nShe gulped, and took a deep breath as I began to apply salves to her, but her breathing was labored, and each breath she drew seemed to pain her greatly.\n\n\"Hey- come on, just hang in there,\" I whispered anxiously.\n\nShe'll be alright, I told myself. Stop freaking out.\n\nThis was Serra.\n\nShe was an amazing player.\n\nShe was invincible, wasn't she? She couldn't...\n\n\"J-josh, I-\" she gulped again, struggling to even speak, and as her hands went limp at her side, I grasped at them in a panic.\n\n\"No- hey, stay with me,\" I muttered, applying salves desperately to her wounds now.\n\n\"Josh- Her wounds aren't fatal, but the spell compensated for her low magic by drawing on her life force. She won't heal unless it's replenished.\"\n\nHe seemed to speak the words only to me, as Serra showed no reaction.\n\n\"What do I do?\" I thought to myself.\n\nI had no healing spells, and there was no spell I was aware of that could regenerate magic.\n\nI took her hand, and activated synergy, trying my best to transfer my energy to her.\n\n\"Please,\" I muttered, as the spell connected us as always, but nothing seemed to be happening.\n\nA little moan came from her lips, and her breathing was getting softer with each breath.\n\n\"Can you do something?\" I cried out to the blink dog, and he lay down at her side with a helpless whinnying sound.\n\n\"I'm sorry,\" the words came in my head, and I felt the stinging sensation of tears forming in my eyes.\n\nI placed my hands about her face:\n\n\"Serra, come on- stay with me, please,\" I muttered pleadingly, but she didn't respond, and I wrapped my arms about her, pulling her into my chest.\n\n\"Synergy,\" I chanted again, trying to channel whatever I had into her, but even the connection between us was now beginning to fade.\n\nI thought back to all of the time I'd spent with her; it had been less than two weeks, yet it might as well have been a lifetime, as she'd become so precious to me.\n\nWe'd been through so much- I had no real intention of playing before Kelly thrust me into her care, but now, because of her, I had learned not only how to play, but to enjoy playing as well.\n\nUnder the harshest circumstances, I'd gotten better at this game than I'd probably been at anything else I'd ever done.\n\nShe helped me to believe in myself after I'd spent years believing that I was worth less than nothing.\n\n\"Please,\" I begged, desperately, as she went still in my hands, and I squeezed her tight, tears falling as I cast synergy again.\n\nThe spell flickered, and suddenly- something flashed through my mind: \"Since when can you activate smite through me?\" Serra's words echoed in my mind.\n\nIf I could activate smite like that, then just maybe, I could cast one of her heal spells, right?\n\nI activated my synergy again, then chanted: \"Heal!\" then cursed loudly as nothing happened.\n\n\"Fuck! Fuck fuck fuck,\" I muttered, before steadying myself to try again.\n\nThink, I told myself. Every time I needed to achieve something through concentration, I'd conjured up various images of Kelly.\n\nMaybe that might work? I thought, but as I tried to think about Kelly I just couldn't get the image of Serra out of my mind.\n\nTears fell down my face.\n\n\"Please,\" I muttered again.\n\nI tried to clear my mind, and conjure up something to do with Kelly, but nothing seemed to shake the image of Serra, lying lifeless in my arms.\n\n\"Trust me,\" her echo whispered, as my mind replayed the way she'd kissed me before the fight. It wasn't the first time she'd kissed me; but this one wasn't done to make Kelly jealous. The images appeared slowly; the vulnerable look she wore, the nervous way she bit her lips, the intensity with which she held on to me, and the incredible reluctance I felt from her as she broke away from my arms.\n\nI held her, tears falling down my face.\n\n\"I can't lose you,\" I thought once more, holding her tight, and suddenly something occurred to me: Kelly was precious to me; so it was no surprise that I often used her image to achieve spells that required extraordinary motivation to activate, but hadn't Serra become precious to me as well?\n\nI didn't love her as intimately as I did Kelly; but the feeling of pain in my heart as I held her, her life ebbing before me- wasn't that also love?\n\nAs I held onto her tight, I realized that the scene in front of me was more motivation than I could possibly ask for, and as I poured the overwhelming affection that I felt for her into the embrace, a curious wave of energy began to course through me, and the blink dog beside us perked his ears up with sudden interest.\n\n\"Heal-\" I muttered, and Serra twitched as a green glow seeped from my arms into her.\n\n\"Heal,\" I muttered again, and this time she coughed, her eyelids fluttering a little.\n\n\"Heal,\" I chanted once more, but as I held her tight, a teardrop rolling down my cheek and falling onto her face, a white glow began to form and soon it enveloped us both, and then I felt the curious sensation of magic flowing out of me and into her through my arms.\n\nAs the brightness of the glow became too much, I closed my eyes to escape the intensity.\n\n\"Josh- what're you,\" she mumbled tiredly, and I held her close, sobbing openly, as an overwhelming feeling of relief flooded through me.\n\n\"Thank god,\" I cried, over and over again, and Serra blushed a little as I gushed over her.\n\nShe rubbed at her eyes gingerly, as tears fell from my eyes onto her, and I held her tightly again as I considered how close I'd just come to losing her.\n\n\"Jeez- you'd think I died or something,\" she whispered, reaching up to ruffle my hair as I held her.\n\n\"What- do you think you're my little sister or something?\" I asked, wiping away the tears and she shot me a wry smile.\n\nI was still wrapped up in the feeling of relief when a woman's voice suddenly spoke from the corridor to our left:\n\n\"Well this is touching and all- but I'm gonna need that invite.\"\n\n\"You- you did this,\" I muttered angrily, as the shadowy form of a robed figure emerged from the corridor, and a feeling of dread filled me as she approached.\n\nThat feeling; it was PK feedback, wasn't it?\n\n\"Well- yeah, actually,\" she quipped. \"Nuh-uh,\" she added, withdrawing a crossbow from her robes and aiming it at me as the blink dog stood up with a threatening growl. \"Transfer the invite to me, or you both die.\"\n\nI clenched my teeth in anger, but Serra placed a hand weakly over mine:\n\n\"She's a rogue Josh- she could kill us and escape easily if she wanted.\"\n\nI swallowed angrily, as Serra pulled up her inventory, materializing the letter in her hand.\n\nI took it from her then walked warily over to the girl, who circled away a bit to keep her crossbow on Serra as I handed her the envelope.\n\n\"Much obliged,\" she added perkily, giving a little curtsey before disappearing down the corridor and out of sight.\n\n***\n\nThe blink dog led us to his master's chambers, where I treated Serra's wounds a bit, and prepared a meal for us, since food played as much of a role as rest in our character's recovery.\n\nSerra curled up beside me, resting her head on my lap, and I stroked her hair reassuringly as she slept.\n\nThe blink dog offered to keep watch for us, so I dozed off as well, but after a few hours Serra awoke with a stretch, feeling significantly rejuvenated, and we decided to head out.\n\n\"We got robbed,\" Serra muttered with a sigh, and I nodded.\n\n\"How did she find us?\" I asked, and Serra pondered the matter a bit.\n\n\"I'm not really sure. Maybe she could have tracked us from Ravenloft if she's skilled enough- or it could have just been dumb luck. Either way, it looks like we'll need to hunt a new vampire if we want an invite.\"\n\nAs she walked ahead of me; I smiled as I noted the curious the perkiness in her step, which revealed nothing of the near death injury she'd just barely survived, and as our eyes met, she looked away with a playful smirk.\n\n\"You'd better be careful- if your sister sees you looking at me like that, she might start thinking she has some competition,\" she called after me with a grin.\n\nShe continued on playfully, but as soon as we exited the castle's grounds, Serra and I both flinched as a series of buzzes told us we'd gotten some messages.\n\n\"Damn- guess messages don't go through anti-magic fields,\" Serra noted, and as she checked her messages, I checked on mines as well.\n\n\"Received message from Tsmafclstew?\" I thought to myself. What the- then a serious blush appeared on my face as I remembered what that was; \"the sexiest, most adorable fuckably cute little sister there ever was.\" \n\nGuess she wasn't kidding about signing her name like that.\n\nI pulled up the first message and began to read:\n\nDear Josh, I hope you're keeping safe. I just wanted to let you know that I miss you... I did every day that we spent apart, and it pained me not being able to let you know, so don't be cross with me if I say it a few times, but- I really miss you. Anyway, I don't want to get in the way of your adventuring; take care, and kick some vampire ass for me! :)\n\nLove, Kelly.\n\nI was still reading over the message with a smile when a 'Whoa,' from Serra drew my attention back to her.\n\n\"It's from Mackenzie- someone's leaked the locations and layout of every vampire lair around Ravenloft.\"\n\n\"What? How would they even get that info? Do you think that's how that woman found us?\" I asked.\n\n\"Could be,\" she muttered, as she looked away worriedly.\n\n\"What is it?\"\n\n\"Mackenzie said there've been attacks at every lair since, and that three groups have been wiped so far.\"\n\nShe sighed deeply as she trudged ahead a bit, but I suddenly jerked to a halt.\n\n\"Wiped?\"\n\n\"Yeah- more than twenty deaths combined. What?\" she asked, looking back at me, and I stared at her in open mouthed shock, as Kelly's second message stood open on my character interface;\n\nP.S. We scored some info on a vampire lair, and we're headed there now. Looks like you won't be the only one bringing home an invite tonight. :D Later! "
    ],
    "authorname": "Kousakacomplex",
    "tags": [
        "siblings",
        "series",
        "fantasy",
        "romance",
        "incest",
        "brother sister incest",
        "video game",
        "sword art online",
        "gamer"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/trapped-in-a-game-pt-03"
}
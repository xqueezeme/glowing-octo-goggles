{
    "title": "Love is the Key",
    "pages": [
        "Love is the Key\n\n\"I'm Kara Mills for K. A. K. E. We are YOUR local station, and that's your weekend weather.\"\n\n\"Nice job, Kara!\" the chief meteorologist for KAKE TV, usually pronounced 'cake', told her new hire.\n\n\"Was I really okay?\" Kara asked hopefully.\n\n\"Okay? You were great!\" her new boss told her.\n\n\"Thank you, Jill. Thank you so much! And thank you again for hiring me.\"\n\n\"My pleasure, and after watching your first forecast, I have this sense of...validation for having made a very good choice,\" the older woman told Kara with a laugh.\n\nJill Asbury was 43 and unfailingly pleasant. She'd been recognized as the \"#1 weather forecaster\" the last three years running. Not just the city of Wichita where she was born and raised but for the entire state. Jill was well known in the city not only for her TV job but because she was a very attractive woman who still caused many people, most of them men, to tune in just to see her.\n\nShe was tall, blonde, and an avid runner who participated in nearly all local 5k and 10k race events; event that were almost always covered by the station giving her even more exposure. \n\nEven in a city of some 380,000 people, most longtime residents were aware Jill had lost her husband to cancer four years ago. Many also knew that for the last year she'd been dating a very successful attorney named Cliff Sullivan, who was a senior partner at a prestigious law firm that was located just a couple of blocks from the TV station where Jill worked. \n\nShe liked him well enough, but she just didn't feel the same way about him she'd felt about her late husband. That thought was often on her mind, but she told herself she was unlikely to ever feel that way about anyone ever again, and all lawyer jokes aside, Cliff was a good, decent man who seemed to be crazy about her. And just recently, Jill had made an accidental discovery that appeared to confirm her suspicions.\n\n\"So...any plans for the weekend?\" Kara asked.\n\n\"Well, just between you, me, and the proverbial fence post, I think Cliff is going to propose.\"\n\n\"What? Oh, my God! Jill, that's amazing!\" Kara told her. \"May I ask what makes you think that?\"\n\n\"Well, I wasn't snooping. I wasn't even looking. But Cliff left his laundry in the dryer, again, and when I came over for dinner a few days ago, I folded it and put it in his bedroom. I opened one of his dresser drawers and found a small, blue, fuzzy box from a jewelry store in there and nearly fainted.\"\n\n\"Oh, my God!\" the younger woman said again as she gave her boss a hug. \"I am SO happy for you!\"\n\nJill wasn't about to say she wasn't quite as enthusiastic, but she still wasn't sure how felt, and saying 'yes' was a very, very big step. She'd known she was in love with her late husband after their second date, and he proposed to her just five months after they met. By the time they'd known each other for a year they were married, and Jill had never regretted a single day she'd spent with him.\n\nJill had no idea, nor did her husband, that he couldn't have children. She'd have married him regardless, but as time went by, Jill ended up burying herself in her work to compensate for the emptiness in her life. She didn't love her husband any less, but he was busy with his own career and time just kept slipping away.\n\nThey discussed adopting several times, but by the time they really got serious, they learned that the nagging pain in his lower back wasn't a pulled muscle or sciatica. It was due to Stage IV pancreatic cancer, the first sign of its presence being the dull ache that wouldn't go away.\n\nJust eight months later he was gone, and at 39, Jill once again found herself a single woman. So she spent even more time at work, and as a result, she'd been promoted to chief meteorologist, a job she truly loved. But she knew that given a choice between her career and the chance at being a mother, she'd give up work in a New York minute. Ideally, she'd be able to do both, but were it an either/or kind of thing, being a mom would take precedence\u2014case closed.\n\nAnd because of that she was well aware that at least some of the reason she'd stayed with Cliff was that time once again seemed to be running out on her. Yes, women had babies in their mid-to-late 40s all the time now, but that didn't make Jill's sense of urgency any less...urgent.\n\n\"Oh, thank you, Kara,\" she replied, a little surprised by the hug. \"He told me he's taking me out to dinner on Saturday, so that's when I expect he'll pop the question. But we're both going to the station party on Friday, so if you hear a lot of noise in our direction...\"\n\n\"Well, trust me, Jill. My lips are sealed!\" Kara told her.\n\nJill was finished for the day, but Kara would be staying for the 10 o'clock news, something she knew to expect for the foreseeable future. But just like Jill had been many years ago, Kara was willing to 'bear any burden' to get where she wanted to go, and that meant Jill also knew the place Kara wanted to go was where Jill was currently standing. But for now, the job was hers, and that was one of the few things in her life she felt was solid and secure. \n\nWith any luck, she might soon find herself engaged, and with a little more luck, a first-time mother before she turned 45, her kind of 'drop dead' date for ever having a baby.\n\n******\n\n\"Hey! You must be Dan,\" a baritone voice boomed.\n\n\"Yes, sir.\"\n\n\"Knock off the 'sir' stuff. This isn't the Army, okay?\"\n\n\"Sorry. Old habits.\"\n\n\"How long were you in?\" the older man asked.\n\n\"Six years.\"\n\n\"So right out of college then?\"\n\n\"Yes, s... Right.\"\n\n\"So you were what? A captain?\"\n\n\"Yes.\"\n\n\"All right, Dan Summers. Welcome to KAKE. Let's get you checked out in our aircraft, shall we?\"\n\n\"Lead the way,\" Dan told the senior pilot for the TV station he now worked for as their 'eye in the sky'.\n\nDan never intended to make a career out of the Army, but he'd stayed a year longer than required because his unit was deploying to Afghanistan, and he wasn't the type of soldier to let the guys he'd trained with bear the burdens of war alone.\n\nSo he did 10 months in the God-forsaken hell-hole of the Middle East flying the AH-64 Apache helicopter. Near all of his flight time was spent in close air support missions in support of ground troops in contact with the enemy who needed a little extra firepower in a big hurry.\n\nHe came home to Wichita without a scratch, and less than 30 days later had his DD-214 in hand, the paperwork needed to show he'd served honorably. And in a little less than three months after that, he had a job flying the Guimbal Cabri (or 'G2' for short) helicopter, a two-seat light helo made in France that sold for about $400,000 per copy.\n\nHe'd spent a month at the station's expense learning to fly it at another location where there was also a simulator, and this would be his first flight with the only other pilot on staff at the station. \n\nRon King was a 52-year old retired Marine Corps helicopter pilot who'd somehow managed to serve 25 years and never spend a single day in a combat zone. Of course, the military had been mostly out the business of war from the end of Vietnam until the invasion of Iraq, so there were plenty of 'cold warriors' like Ron who'd done what they were told to do and gone where they'd been ordered to go just like Dan had. They'd just never had to do it while knowing the 'thrill' of being shot at by an enemy determined to kill them. \n\nBecause of Dan's bona fides, Ron didn't try talking to him like he was some snot-nosed kid. He wasn't deferential by any means, but he treated the younger man with the respect he'd earned even though the older man had been a colonel and would now be his boss.\n\nThe checkout flight was less than 30 minutes, and during that time, Ron showed his new partner pretty much every route they typically covered during the morning and evening rush hours and the occasional storm. Not big storms, of course, because the helicopter didn't do well in strong, swirling winds. And then there was also the occasional police chase or some situation in which a pair of overhead eyes were needed until a police helicopter could get airborne.\n\n\"The key is to try and not die of boredom,\" Ron joked as Dan smoothly sat the small craft down in the center of the landing circle.\n\nDan laughed but Ron warned him he was only partially kidding.\n\n\"Once you've done the exact same thing every day for a year or two, you might not find it so funny,\" the older man warned.\n\nDan almost told him that after a year of being shot at, he was fine with boring. He didn't because until just recently he'd been the kind of guy who was looking for the next adrenaline rush with no intention of putting down roots. That was particularly true where women were involved, and there had been a lot of them over the years.\n\nDan wasn't particularly tall or muscular, but he was a very good looking guy nonetheless. He had nearly jet black hair he still wore just above his ears with a shock of it hanging down near his right eyebrow. He was nearly always clean shaven, but his facial hair was so dark it looked like he needed to shave within a few hours of having done so. Deep blue eyes and very white teeth made him what his friends called a 'babe magnet'. The fact that he was also a pilot only added to the mystique and his chances of not going home alone on any given night.\n\nBut he didn't say anything because Afghanistan had been a kind of pivotal time in his life. One of his best friends in his squadron had been shot down and killed. He knew that was part of the job, but it wasn't until he helped load the flag-draped body of his fallen comrade onboard an Air Force C-17. He'd been brought in straight from the crash site, his charred remains covered with the US flag then taken just hours later to the waiting aircraft that had dropped off tons of supplies. From there his remains were transported to the morgue in Bagram then finally to Dover Air Force Base in Delaware before being returned to his wife and family for burial about 10 days later.\n\nEver since, the thought of a more quiet life had begun appealing to him, and he was actually considering finding someone to share it with. It was all new territory for him, to be sure, but the itch to 'put another notch on his bedpost' was no longer demanding to be scratched.\n\nPerhaps the strangest change, and maybe even the biggest, was the way he found himself wondering what it would be like to have a son to do things with. Dan loved sports and as he looked back on the fantastic childhood he'd had with his own father, he could finally see him teaching someone to ride a bike or play catch in the backyard.\n\nAll of that and more crossed his mind again in the space of a few seconds, and it was Ron's voice that brought him back to reality.\n\n\"There's no ground crew here, Dan,\" he heard the veteran pilot say.\n\n\"We do pretty much everything except for maintenance and refueling so let's get out and tie her down.\"\n\nIt wasn't that Dan was waiting for someone to do that for him. He'd just been daydreaming while the aircraft powered down, and that was all there was to it.\n\n\"Right. Sorry. I uh, I tend to get lost deep in thought pretty easily,\" he told the retired Marine.\n\nBefore Ron could come back with a takedown line, Dan said, \"That's probably because I have such a shallow mind.\"\n\nRon smirked then said, \"Don't quit your day job.\"\n\nOnce the little bird was safely tied down Ron suggested going inside and saying hello.\n\n\"They're almost always on the air or prepping for a broadcast, but right now is about the best time of the day to introduce you, so let's go 'grip and grin'.\"\n\nThe only person Dan had met was the station manager and two people in HR. The former had to approve his hiring and the latter were essential to getting his pay started. Ironically, it was nowhere near what he'd made on active duty, but it was more than enough to allow him to have a decent apartment, a nice car, and enough to enjoy his new way of life. For now, anyway, that was plenty.\n\nDan was pretty good with names, but unless the person he was meeting was his boss or a beautiful woman, he'd need to hear it at least one more time to make it stick, and after that he'd know the name for life. Of all the people he met from producers to cameramen, he did manage to keep the name of the station's lead news anchor in active memory. According to Ron, the guy was a prima donna, so not forgetting it wasn't a bad thing.\n\n\"The guy's been here for 17 years. He had big dreams of moving on to the national scene but never got the chance. My take is he's bitter and that spills over in the way he treats people. But he doesn't sign my check or write my evaluations, so fu...\"\n\nRon stopped, smiled, then more quietly said, \"The heck with him.\"\n\nDan politely laughed then nudged Ron.\n\n\"Who's that?\" he asked just as quietly as he pointed to the most attractive woman he'd seen at the station house.\n\n\"Ah. That would be Jill Asbury. Jill's the chief meteorologist around here, and one of the nicest people I've ever met. And I tell you what, if I wasn't a happily married man, I'd be doing my best to get her number.\"\n\n\"Yeah. I see why,\" the younger replied. \"She's...\"\n\nLike Ron, Dan stopped, too. He was going to say 'hot' but this woman seemed to exude class, and that word just didn't fit.\n\n\"Beautiful?\" Ron suggested.\n\n\"Yes. Definitely,\" Dan agreed without taking his eyes of her.\n\n\"Oh. Just so you know, Jill lost her husband several years back.\"\n\nRon looked right at Dan then said, \"Not that a guy your age is ever gonna ask her out. I'd just hate for you to inadvertently say something to offend her because you didn't know.\"\n\n\"No, I'm...I'm glad you told me,\" Dan said as he stood there still staring at this very attractive older woman who hadn't even looked their way.\n\n\"Come on. Let's go say 'hey',\" Ron suggested before quietly adding, \"and roll your tongue in, would you?\"\n\nDan's tongue wasn't out, of course, but he understood he'd been caught staring, so he made a mental note not to do so again.\n\nAs they approached the huge green screen where she'd been rehearsing for the next forecast segment, Jill saw Ron and smiled.\n\n\"Hey there!\" she said very pleasantly as Ron smiled back and opened his arms for a hug. \"It's so good to see you, Ron!\"\n\n\"You, too, Jill. And I swear you get younger and prettier every time I see you,\" he told her.\n\n\"Ha! Listen to you!\" she replied as she looked over at the younger man who was with him.\n\nBefore Ron could introduce him, Jill stuck her hand out and said, \"You must be our new pilot.\"\n\n\"Oh, right. Yes. That would be me,\" Dan told her.\n\n\"We're so glad to have you here at 'cake'!\" she said before introducing herself.\n\n\"I'm Dan. Dan Summers,\" he then told her.\n\n\"Yes. That's right. Ron mentioned the name,\" she said before turning to Ron. \"Didn't you tell me he was in the Army just like you?\"\n\nDan tried not to laugh as Ron put his hands on his hips, tilted his head, and gave Jill a mock 'you've gotta be kidding' look.\n\n\"What? What did I say that was so bad?\" she asked, looking first at Ron then at Dan.\n\n\"Ron was a Marine, and the only thing worse you can accuse a Marine of than being a soldier is being a sailor,\" Dan told her with a smile.\n\n\"Well, at least someone around here understands!\" Ron said, still (mostly) pretending to be offended.\n\n\"Oh. Well\u2014excuse ME!\" Jill said, also pretending to be extremely sorry before laughing.\n\nWhen she finished she got serious then offered a sincere apology and a promise to never again forget. As she did, Dan couldn't help but stare again as Jill was every bit as attractive as Ron had said and just as classy as he'd assumed.\n\n\"We'll let you get back to work. We just finished Dan's checkout flight, and I wanted to introduce him.\"\n\n\"I'm so glad you did!\" Jill said to Ron before turning to Dan. \"Don't be a stranger, okay? Just because you don't work inside doesn't mean you're not a part of the 'cake' family.\"\n\nFeeling his oats, Ron made his first age-related comment about his fellow pilot, mostly thinking it would boost his credibility with Jill.\n\n\"Right. With Dan being the baby of the family, right?\"\n\nHe laughed, and Jill did, too, but it wasn't sincere. She was just being nice, and Dan could tell she didn't think that was funny at all. But because she clearly was a classy woman she didn't mention it and politely played along.\n\n\"He doesn't look that young to me,\" Jill told him as she smiled at Dan as a way of letting him know how she felt without really taking sides.\n\n\"We're outta here, Jill. You take care,\" Ron said, ignoring her reply.\n\n\"You, too, Ron. And Dan,\" she said with a wink to the 'baby of the family'.\n\n\"So, what'd you think?\" Ron asked after they were out of earshot.\n\n\"I'm impressed. And she's even more attractive than I thought.\"\n\n\"That she is, but let's go say 'hi' to someone you might actually have a shot at dating.\"\n\nKara was in her cubicle working on the forecast after Jill's when Ron walked up.\n\n\"Hello there, young lady,\" he said.\n\nThe young woman was so focused on the data she was analyzing she had no idea anyone was even there.\n\n\"You nearly gave me a heart attack!\" Kara said at the sound of the deep, male voice after she noticed Ron.\n\n\"Sorry. Didn't meant to scare you. I just wanted to introduce the newest member of our team.\"\n\nKara looked at Dan, and when she did, she quickly looked away for a second. He was so attractive it caught her by surprise and she needed a second to collect herself.\n\n\"Hi. I'm Dan. Summers,\" he told her with a smile.\n\n\"Oh. Hi. I'm...Kara Mills,\" she told him, a nervous smile on her face.\n\n\"So now you're not the newest person here anymore,\" Ron told her. \"We've got someone else to make the coffee now.\"\n\n\"What?\" Kara said with a little shake of her head having no idea what Ron just told her. She didn't even drink coffee, and she was too flustered by this new pilot's presence to know what he'd said anyway.\n\n\"I was just mentioning that you're not the last person hired anymore.\"\n\n\"Oh. Right. Yes. I...I guess that's true,\" Kara told him without taking her eyes off of the gorgeous new member of the 'cake' family.\n\n\"We won't keep you,\" Dan told her with a smile.\n\n\"You're...you're not bothering me,\" Kara let him know.\n\nRon leaned down a little then said, \"And yes, he is single.\"\n\nKara's eyes got big when he said that. It wasn't just that it was inappropriate for the work environment, but she knew she'd been staring and felt like she'd just been called out.\n\nDan smiled again then said to Kara, \"You gotta excuse Ron. He's a Marine, and well, they're not always the most...couth...among us.\"\n\nTrying to recover, Kara managed a little laugh.\n\n\"No problem! Ron is a really good guy,\" she told them both before smiling and saying, \"and I'm really glad you stopped by. Um...both of you.\"\n\n\"It was a pleasure meeting you, Kara,\" Dan told her sincerely.\n\nThere was a flyer on the wall of her cubicle, so Kara decided to be a little bolder than normal and said, \"Oh, Dan? The station is having a get together this Friday. You should come.\"\n\nIt wasn't lost on Dan or Ron that she only looked at the 'newest family member' when she spoke.\n\nDan bent over and took a better look then said, \"Oh, okay. Well, maybe I'll see you there.\"\n\nKara smiled happily and said, \"I'd like that,\" before turning back around.\n\nThis time, Ron's comment after they walked away was, \"She's a real cutie pie, huh?\"\n\n\"Yeah. Sure. She's very...cute.\"\n\n\"And single. And about your age I do believe.\"\n\nKara was definitely cute, and until recently, she just was exactly the kind of woman Dan typically went for. Then again 'went for' was almost funny because his relationships with the women he did 'go for' typically lasted one night or every now and then, maybe a few days or even a week. The last time he'd had a girlfriend he'd been a sophomore in college, and that ended after three months.",
        "As Ron finished introducing him, something was clearly bothering Dan, but he couldn't put his finger on what that something might be. Ron also noticed and mentioned it.\n\n\"You seem a little distracted.\"\n\n\"Yeah. I guess maybe I am,\" Dan admitted. \n\n\"You should ask her out.\"\n\n\"What?\" Dan replied with a shake of his head.\n\n\"Kara. That's what's buggin' you, right? Come on. I saw the way she was looking at you, so I'd say she's probably a sure thing.\"\n\n\"Kara. Yeah, that must be it,\" Dan told him, knowing it wasn't.\n\nDan's first traffic flight was the following morning at 6:30am with Ron as his co-pilot. Traffic followed the weather, and Jill always had the morning show from Monday through Friday. They were listening in and Ron tapped Dan to let him know to get ready. \n\n\"Okay, folks. That's your weekend weather forecast, and now it's my pleasure to introduce the newest member of the KAKE team, Dan Summers, our Channel 5 Eye in the Sky!\"\n\nThe producer had also cued Dan to be ready, so as soon as Jill asked, \"How's it looking up there this morning, Dan?\" he began his first telecast.\n\nThe onboard camera turned green meaning it was looking at him.\n\nHe smiled as he flew above the interstate and said, \"Hi, Jill. Well, it's looking a lot like rush hour.\"\n\nHe'd worked on his opening line several times, and after she said, \"Okay, great. It's all yours,\" he took over and let the viewers know how things were stacking up in their city.\n\nWhen he finished, what Dan didn't hear was the female co-anchor say on live TV, \"Jill, you didn't tell me Dan was such a hottie,\" before she continued with the news.\n\nShe was also single, and having been there nearly ten years herself, she knew she could easily get away with saying that. Jill, however, had still been more than a little surprised.\n\nBut being an 'old hand' herself, she only laughed and without missing a beat said, \"We're very lucky to have him as part of the broadcast family!\"\n\nIt was a little over an hour later when Dan got back inside, and when Jill spotted him she motioned for him to come over.\n\n\"Good morning. What's up?\" Dan said very cheerfully.\n\n\"I just wanted you to know I had no idea Melanie was going to say that on air this morning.\"\n\n\"O...kay?\" Dan replied with a shrug of the shoulders.\n\n\"Wait. So...you didn't hear?\"\n\nDan laughed then asked, \"Hear...what?\"\n\n\"Oh, my. Don't I feel foolish!\" Jill said just as Melanie came walking up.\n\n\"Hi, handsome!\" she said, causing Dan to turn around.\n\nMelanie Lamoreaux was 35, divorced twice, and had quite a reputation around the station.\n\n\"He didn't hear,\" Jill told her, causing Dan to ask what was going on.\n\n\"Oh! He didn't?\" Melanie said as she hooked her arm in Dan's. \"Well. Why don't we go have a cup of coffee and I can tell say it again only this time to your very handsome face?\"\n\nJill gave him an 'I'm so sorry' kind of look as Melanie led him off to the break room where she not only told him what she'd said but also wrote her number on his hand in pen.\n\nDan was tempted to ask if he'd been transported back to high school, but decided to play nice and only thanked her.\n\n\"And...fyi...I'm available 24/7,\" she informed him with an evil smile. \n\n\"Ah. Good to know,\" Dan replied before taking a sip of coffee then telling her he had some paperwork to take care of.\n\n\"Oh, sure. Work now, play later, right?\" she replied with another similar grin. \n\nAs Dan got up, Melanie used her thumb and pinky as a phone and mouthed the words, \"Call me!\"\n\nDan nodded, picked up the cup of coffee then headed for the safety of his own cubicle where he began logging in his flight hours and the details of his first traffic report.\n\nThe next day was Friday, and Dan had forgotten all about the station get-together until the station manager dropped by and handed him a flyer.\n\n\"I forgot to mention this, but I'm really hoping to see there tonight,\" the man in his mid-50s said.\n\nTaking that as a kind of 'order' Dan told him he'd be there.\n\nOn his way out, he had the flyer in his hand, and as he was passing the weather area he saw Jill. When he did, he decided to ask her something.\n\n\"Hey, there!\" she said in her chipper voice.\n\n\"Hi. I uh, I was wondering if you were going. Or...coming to the party,\" he said as he held up the flier.\n\n\"Oh. Yes. As a matter of fact I am. My...boyfriend and I are both going to be there.\"\n\nDan's smile faded so quickly Jill realized he had no idea she was seeing someone. She never dreamed he was about to ask her to go with him, or anywhere else for that matter, but she could tell he was surprised.\n\n\"Cliff and I are, well, I guess we're getting serious,\" Jill explained.\n\n\"I...I'm...I'm really glad to hear that, Jill,\" he told her as he tried to recover from the shock.\n\n\"I would have thought Ron would have told you,\" she said almost apologetically.\n\n\"No. He only mentioned that you, that your husband...\"\n\nDan stopped talking and Jill knew why.\n\n\"It's true. My husband did pass away four years ago. Cliff is the first man I've ever been serious about, so...\"\n\n\"Yeah. No. I'm...I really am happy for you. Both.\"\n\n\"But yes, I will be there, and I'll introduce you,\" Jill told him, the smile back on her very pretty face.\n\n\"I'll look forward to it,\" Dan told her as he tried slinking away from yet another woman in the same day.\n\n\"Smooth,\" he said to himself as he walked away shaking his head.\n\n\"Dan?\" he heard a different female voice say.\n\nHe turned and saw the other weather girl, Kara, right behind him.\n\n\"Hi, there,\" he said, unable to recall her name.\n\n\"Hi,\" she said back with a very sweet smile. She saw the handout he was holding and told him again she hoped to see him there.\n\n\"Yes. I'll definitely be there.\"\n\n\"Okay. Well...see you there then?\"\n\n\"Right. See you there,\" he said before almost laughing as he tried to avoid his third woman in one day, a new all-time record.\n\nDan hadn't been at the party for two minutes before Melanie spotted him.\n\n\"Well, hello Mister Pilot Man! I'm glad you showed up,\" she told him. \n\n\"I thought it might be bad form to blow off the first function,\" Dan told her as he smiled politely.\n\n\"I uh, I like to blow. Things off,\" Melanie said before asking him where his drink was.\n\nWithout waiting for a reply, she went to get him one, and that's when he began sliding away. To his great relief, the station manager grabbed him and asked to come meet some local political officials, and as little interest as he had in doing that, it meant he had an excuse to get away from Melanie so he took advantage of the situation.\n\nAfter meeting a couple of members of the city council, Dan excused himself and before he got five steps away, Kara walked up and said 'hi'.\n\n\"I didn't get the first-class treatment,\" Kara told him, nodding toward the elected officials.\n\nDan laughed and told her he thought it was first-class...torture.\n\nKara covered her mouth and laughed much too loudly indicating she liked him, something he'd already deduced. The feelings weren't mutual, but given a choice he'd take Kara over Melanie any time. But there was another woman who'd captivated his interest; a woman who was evidently in a committed relationship.\n\n\"So I guess Jill is expecting a big announcement,\" Kara said, giving no thought to how private that information was or her promise to keep it that way.\n\n\"Oh? As in a promotion?\" Dan asked, suddenly very interested.\n\nKara leaned toward his ear then said, \"No. Her boyfriend is getting ready to propose.\"\n\nDan shook his head and looked at Kara.\n\n\"Wow. I had no idea.\"\n\n\"That's not for public consumption. But I had a glass of champagne already, so I kind of spilled the beans,\" she bubbled as she smiled at her newest crush.\n\nDan didn't hear what she said because Jill had just walked in. She was holding hands with a decent-looking older man, and Dan was surprised at how that made him feel. He was obviously the guy Kara was talking about, and if she was right, Jill would be off the market very soon.\n\n\"The champagne was to get my courage up to come over and talk to you,\" he heard Kara saying.\n\nRealizing Jill was now little more than a brief fantasy of sorts, he turned to Kara, smiled, then said, \"You don't need champagne to talk to me.\"\n\n\"Well, I...I'm glad to you hear you say that, Dan.\"\n\nKara paused for a moment then asked, \"Are you seeing anyone by chance?\"\n\n\"Um, no. I'm not actually,\" he told her.\n\n\"Oh, okay. I was just wondering,\" she replied with a sweet-but-nervous kind of smile.\n\nHe was about to ask her if she was seeing anyone when he heard Ron's voice boom out, \"Hey, New Guy!\"\n\n\"He can be such a pain!\" Dan heard Kara say as Ron walked over and said hello.\n\nKara was polite but not overly so as Ron was now interfering with her plans for the evening.\n\n\"Hey. I want to introduce you to my spousal unit,\" Ron told Dan, a comment that made Kara shake her head.\n\nDan actually laughed and asked where she was.\n\n\"Parking the car, I hope,\" Ron said with a laugh. \n\nHe leaned toward the younger people then said, \"I'm a huge fan of equality for women.\"\n\nKara rolled her eyes while Ron laughed loudly, and both of them caught the unmistakable smell of alcohol on his breath.\n\n\"Oh, there she is!\" Ron said before calling out, \"over here, hon!\"\n\nDan was mildly surprised to see a fairly attractive, older woman walk over and put her arm in Ron's.\n\nRon introduced her as Donna and not his 'spousal unit', and Dan liked her immediately. She was warm, friendly, and charming but not as upbeat as Jill. They talked briefly before she pulled her husband away assuming Dan and Kara wanted to be alone.\n\n\"She was nice,\" Kara remarked once they were gone.\n\n\"Yeah. I agree.\"\n\n\"I'd never have thought he'd have a wife that nice,\" Kara told him, not caring that Ron was Dan's boss.\n\n\"He's not so bad,\" Dan said in Ron's defense.\n\n\"If you say so. But...I prefer your company.\"\n\nThey chatted for a few minutes before one of the producers came over to talk shop with Kara. She apologized and told Dan she'd be right back, but he wasn't feeling very social and began kind of wandering around saying hello here and there and making more small talk with people whose names he needed to commit to memory.\n\nHis strategy worked well for a good while as he managed to duck Melanie several times while also avoiding Kara. Ron became his 'go-to' guy whenever he needed cover, and again, he found himself very impressed with Donna each time they spoke.\n\nAt one point Ron excused himself to make a 'head call', Marine-speak for using the bathroom, or latrine to Army soldiers, and that gave Dan a chance to get to know her a little better. \n\nOne of the first questions she asked was whether or not he was seeing someone, and he told her he wasn't. \n\n\"No one's even caught your eye?\" she asked, a smile on her still-attractive face.\n\n\"Well, yes. But as I recently learned, she's spoken for.\"\n\nDonna was extremely observant, and she'd seen him looking Jill's way fairly often and put two and two together.\n\n\"She's very pretty, isn't she?\"\n\n\"What's that?\" Dan asked.\n\nDonna smiled and told him what she'd seen.\n\n\"Oh, right. Wow, I thought I was more subtle than that.\"\n\nShe laughed and told him he was good\u2014just not that good.\n\n\"But as you can see, she's kind of spoken for, so I don't think that's a possibility.\"\n\nDonna hesitated then said, \"And as beautiful as she is, she's still quite a bit older than you.\"\n\nDan had no idea Melanie had snuck up on him just as he said to Donna, \"That's okay. I think I might just like older women.\"\n\nHe was looking at Jill when he spoke then turned to smile at Donna when Melanie said, \"I knew it!\"\n\nDonna saw the look on Dan's face and understood immediately. Melanie had hit on Ron more than once, and Donna considered her to be nothing short of a skank.\n\n\"Hello...Melanie,\" Donna said rather icily.\n\n\"Donna,\" she replied without even looking at her.\n\n\"You uh, you wanna get out of here?\" Melanie asked Dan as she slid her arm in his then whispered, \"with an older woman?\"\n\nAs Dan gently extricated his arm he started to tell her 'no thank you' when he saw Cliff produce a small box and set it in front of him. Jill was sitting just across from him, and Dan watched in horror as she gasped and put a hand over her chest. Donna saw it, too, and also gasped.\n\n\"He's going to ask her to marry him!\" she said to no one in particular.\n\n\"It's about damn time!\" Melanie said as she tried to put her arm back inside of Dan's.\n\nHe closed the gap, causing Melanie to let out a loud huff as the room got quiet.\n\nJill was very much aware that every eye was now on her, and that, more than the little box sitting across from her, was what causing her heart to race.\n\nCliff looked around, smiled at everyone, then said, \"Looks like we've drawn a crowd, babe!\"\n\nJill hated that word, but it was the only endearment Cliff ever used, and after mentioning several times a few months ago, gave up on trying to get him to stop.\n\nCliff cleared his throat then looked at Jill.\n\n\"It's pretty obvious things have been going really well between us, and well, I've been thinking it's time to, you know, take things to the next level.\"\n\nThere were a few gasps from some other women as they hoped to see a huge diamond ring befitting a senior partner's standing when Cliff opened the box. No one else could see inside of it, but it was obvious there was something shiny in there.\n\nBut when Cliff didn't get down on one knee, people began looking at one another. And when he slid the box across the table, eyes got even wider. When Jill looked down and stopped smiling, the proverbial pin dropping could have been heard.\n\n\"A key?\" she asked, her voice nearly hollow.\n\n\"Go ahead, babe. It's for you.\"\n\n\"A key?\" Jill asked again as she sat there staring at the cheap, silver copy of Cliff's house key.\n\n\"Well...yeah. You know, so you can move in and not have to ring the doorbell,\" Cliff explained as though Jill were an idiot.\n\nThe women who were watching were stunned. They were also hurting for Jill, one of the nicest people any of them had ever met. Even the men were shaking their heads which were tilted in disbelief.\n\nDan couldn't remember the last time he'd felt so bad for anyone until he remembered his friend's wife and young daughter who would never see their husband or father again. He wanted to walk over and knock Cliff on his sanctimonious ass, but he, too, just stood there staring in disbelief.\n\nAnd then he saw the tears forming in Jill's eyes and had to force himself not to do something he knew he'd regret. He was sure he wouldn't hit the guy, but he might well lay into him verbally, and that, too, would be a huge mistake and prove nothing other than that he could be a loud asshole.\n\nPerhaps no one was as surprised as Cliff, though, as he sat there in his own disbelief trying to understand what he'd done wrong.\n\n\"Babe? What's going on here? I thought you'd be thrilled,\" he said as he reached for Jill's hand.\n\nShe'd placed both of them on the table next to the little box as she tried to reconcile reality with her previous expectations, but pulled them away when Cliff tried to take them.\n\n\"She thought you were going to propose, you dumb ass!\" Melanie called out, causing every eye to turn her way.\n\n\"What? It's the truth!\" the co-anchor said as though it was common knowledge making her statement no big deal.\n\nWithout a word, Jill got up and made a beeline for the door. She never looked so much as looked up, but several woman tried touching her arm or telling her she'd be okay. But Jill never even slowed down as tears streamed down her cheeks.\n\n\"Hey! Where are you going?\" Melanie asked when Dan pulled away and headed toward Jill. \n\nWhen he didn't reply, she said a little too loudly, \"I'm a sure thing!\"\n\nDonna was so furious she blurted out, \"You're a...thing...all right. You're a piece of sh...\"\n\nRon took his wife's arm and spun her around and suggested they go get another drink. Donna'd barely touched her glass of champagne, but it wasn't about drinking. It was about getting some separation between her and 'the skank' before things got ugly.\n\nJill was outside before Dan caught up to her. She saw him out of the corner of her eye but didn't speak. She couldn't because she was crying.\n\n\"Jill?\" he finally said as politely as he could.\n\n\"Just...leave me alone, okay?\" she sobbed.\n\n\"Okay. Sure. I...I just wanted you to know I...I'm here if you, if you need someone to talk to.\"\n\n\"I...don't want to talk,\" she said, one word at a time as she stopped and stood there as tears continued to fall.\n\n\"All right. I'll uh, I'll just go back...\"\n\nBut before he could finish speaking, Jill turned toward him, her face screwed up in anguish, and just as quickly she took a step his way and put her hands on his shoulders then rested her head in the crook of his neck and just cried.\n\nNot sure what to do, Dan raised his arms, lowered them, then slowly raised them again and kind of loosely put them around her waist.\n\n\"It's okay. Let it out,\" he told her as she stood there heaving sobs like he'd never seen.\n\n\"It's...over...\" Jill choked out.\n\n\"Hey. There are plenty of other guys out there, Jill. You're a very beautiful woman, and any guy would...\"\n\nShe shook her head while her body shook and trembled,\n\n\"No. Not...that,\" she managed to get out.\n\nUnsure what to say, Dan just held her.\n\nAfter another half minute or so, Jill began to take deep breaths and the shaking subsided.\n\n\"Look at me. I'm...a disaster!\" she said as she slowly moved away.\n\nHis car was just a few spaces away, so he asked her to give him a few seconds. He returned with a pack of tissue and pulled a couple out before handing the rest to him.\n\nWere he not hurting for her so badly, he might have laughed. She really was a spectacle of tears, mascara stains, and even a fair amount of snot on her upper lip. Jill took care of the worst of it, apologized then tried to speak. But Dan was reaching up to dab her eyes so she didn't say anything.\n\n\"There we go,\" he told her once he cleaned up the worst of both eyes.\n\n\"Thank you,\" she said, her eyes still red and swollen from the crying jag. \"And I'm so sorry to drag you into...\"\n\nJust then they heard, \"Babe! There you are!\"\n\n\"No, no, no!\" Jill said when she saw Cliff walking their way.\n\n\"Come on,\" Dan said as he grabbed her hand and pulled her toward his car.\n\nHe never failed to open a woman's door, but this time he just hollered, \"Get in!\" as Jill went around to the passenger side.\n\nHe hit the start button and dropped it into reverse nearly hitting Cliff as they backed out. Dan dropped it into gear, and when he stepped on the accelerator, the car pushed Jill back in her seat so hard it scared her. Even more confusing, there wasn't a sound except for the screeching tires.\n\n\"It's a Tesla,\" he told her when she finally looked over at him, her face white as a ghost.\n\nThe electric car didn't need to 'wind up' like a gas-powered vehicle. When the driver needed power, power was there instantly. The torque was phenomenal, and when the 'pedal was pressed to the metal' it felt like being catapulted off of an aircraft carrier. Well...almost.\n\n\"Oh. The electric car,\" Jill finally said.\n\n\"Yes,\" Dan told her as he let off the 'gas'.\n\n\"It's so...quiet!\" she told him as she looked around inside. \"And...fancy.\"\n\n\"This is my baby,\" Dan told her. \n\n\"Oh, please do say baby!\" Jill told him.\n\nWhen he glanced over at Jill, he was trying to smile. But as he spoke her face again began distorting, and within a second or two, she was crying as hard as before .\n\nDan found an empty parking lot and pulled in and went all the way to the back in case Cliff tried to follow them.\n\n\"Hey. What's going on? What did I say?\" he asked once the car was parked.\n",
        "\"What? No! Nothing. Nothing at all. This isn't your fault, Dan,\" Jill said as she worked to regain control of her emotions.\n\n\"You seemed better then all of a sudden you started crying again.\"\n\nShe grabbed another tissue, blew her nose, then apologized.\n\n\"I don't know. I guess I just had these...these...hopes. High hopes. And now...they're gone. All of them.\"\n\nThere was no way Dan was going to tell her that made no sense to him. Instead he asked if she felt like talking about it.\n\n\"What's the use?\" Jill replied. \"Thank you for being so sweet, but it really is over.\"\n\n\"May I at least ask what it is that's 'over'?\" he gently requested.\n\n\"My life,\" she told him before trying to clear her nose again. This time nothing came out except a very loud, embarrassing noise.\n\n\"Sorry!\" she said, almost laughing.\n\n\"Don't be sorry. You have nothing to be sorry about.\"\n\nJill finally sat up straight again then sighed. It was loud and long and happened a second time before she spoke.\n\n\"I was so sure Cliff was going to propose. And that meant I could finally be a mother, but now...\"\n\nJill wasn't crying, she just quit talking.\n\n\"I...I couldn't help but notice you said 'I' rather than 'we'.\"\n\n\"Huh?\" Jill asked as she turned his way.\n\nBefore Dan could reply, she said, \"Aren't I beautiful?\" fully aware of how she looked.\n\nDan saw her bravely trying to smile, and he smiled back.\n\n\"You are, Jill. Even now you're very beautiful.\"\n\n\"Pffft!\" was all that came out of her mouth.\n\n\"It's true,\" Dan told her. \"You're a very pretty woman.\"\n\n\"Pretty...pathetic,\" she said with self-disdain.\n\nA few seconds later she answered his question.\n\n\"I suppose I said 'I' because I never really loved Cliff. Don't get me wrong. He's a nice enough man. He's actually a very decent guy. And had he asked me, I'd have said 'yes' because he was...good enough...and then I...\"\n\nShe looked at Dan, tried to smile then corrected herself.\n\n\"Then...we...could have started a family. But now? It'll never happen.\"\n\n\"You can't know that, Jill,\" Dan said as supportively as he could.\n\n\"You're not the woman who's 43 years old, Dan. That's me, and this was my last chance.\"\n\n\"You don't know that, either,\" he said just as gently.\n\n\"By the time I meet someone else I'll be 44. Add a year to get acquainted then at least six months to get married, and I'm pushing 45. I'd be 46 before the baby was born, and that's only IF I could meet someone right away. And not just anyone, either. Someone...nice.\"\n\n\"Maybe you just need to try looking in different places?\" he suggested, knowing the reason why.\n\n\"Nice guys don't live under rocks,\" Jill tried to joke.\n\nDan laughed at her stab at humor then said, \"That's not what I meant.\"\n\n\"I'm open to ideas, so if you have one, by all means,\" she told him.\n\nHe waited until she turned to look at him which took a few seconds. When she finally did he smiled at her in a way that made her understand he meant himself.\n\n\"What? What...what are you saying?\" she asked, as she sat there just staring at him.\n\n\"Sometimes the right person is well, right in front of you, but you look right passed them for what seem like good reasons.\"\n\nIt took her a moment or two to understand what he was driving at, but when she did she said, \"Ah, yes. For very good reasons like...being WAY to young.\"\n\n\"Or maybe not,\" he replied quietly with a warm smile.\n\n\"That's...that's...insane!\" Jill told him as though she was pleading her case in court.\n\n\"Is it?\" Dan asked in the same tone of voice.\n\n\"Well...of course it is.\"\n\nJill waited then said with slightly less confidence, \"Right?\"\n\n\"I can't answer that for you, Jill. Only you know what's important to you. But here's what I know.\"\n\nDan quietly told her how he felt from the first time he saw her to the disappointment he felt when he learned she was seeing someone else to the way he hurt for her when Cliff gave her a house key instead of the key to his heart.\n\nJill felt herself tearing up again, and she blamed it on being emotional because of the whole 'key fiasco'.\n\nDan tried to keep things lighthearted when he said, \"That wasn't quite the reaction I was hoping for.\"\n\nHis voice was so gentle and kind that Jill realized her emotions weren't just from what had happened with Cliff. Dan was a genuinely caring young man, and that came across so clearly it made her feel like crying. Of course, were she not an emotional wreck, crying would be out of the question, but she'd still have felt the sincerity of his words.\n\n\"I'm sorry,\" Jill said as she pulled out yet another tissue. \"I'm just having a very hard time thinking clearly right now.\"\n\nShe looked over at Dan, did her best to smile then said, \"You're such a nice guy, Dan. And it's no secret that you're also very good looking. But I don't see how I could ever get over the huge difference in our ages.\"\n\n\"That's fair,\" Dan told her. \"But will you at least consider giving me the opportunity to give you some reasons to try and look beyond the age issue?\"\n\n\"As I said, my thinking is seriously impaired right now, but it seems to me the only way to do that is to go out with you, but because I'm 43 and you're...\"\n\nDan knew she was going to ask his age so he told her.\n\n\"I'll be 30 in a few months,\" he said, knowing that wasn't going to sit well.\n\nHe wasn't expecting a positive reaction, but the one he got still surprised him.\n\n\"I don't even know how to respond to that,\" Jill said as nicely as she could with a shake of her head.\n\nDan knew Jill was a runner, and although he wasn't, he'd been good enough at it to always ace his PT tests while on active duty. That meant running two miles in 12 minutes or less, and he'd done that for the last time just before deploying to Afghanistan. He hadn't run once the entire time he was 'down range', Army-speak for being deployed, and had only jogged a few times since coming home.\n\n\"How about we go running together?\" he suggested without giving it any more thought.\n\n\"You run?\" she asked, her facial expression changing completely.\n\n\"I used to. I'm still in pretty good shape, but I haven't actually ran in, well, quite awhile, but I'd love to get back into it.\"\n\nJill could still hold a 7-minute pace for a 5k race and around 7:15 a mile for a 10k. She didn't mind running a little slower if it meant having a partner, but she didn't want to have to either slow down to 8-minute miles or, heaven forbid\u2014walk.\n\nAs she thought about it, Dan added, \"It wouldn't be a date, and it would give us a chance to get to know one another.\"\n\nJill had been looking at him, and as he talked, she kept looking. When he finished, she barely even blinked. Dan was starting to feel uncomfortable when she finally spoke.\n\n\"You're actually serious, aren't you?\" she said, the surprise in her voice obvious.\n\n\"I am,\" Dan replied without a smile of any kind.\n\n\"So...if I agree to this, what's next? A date? And then what?\" Jill asked. There was no hint of sarcasm or anything negative. It was clearly just what she was thinking.\n\n\"Well, how about this? It's just two people running together. For now. If you can ever see me as something more than a running buddy, we can figure out the 'what next' thing together. If not, you can continue trying to find your Mr. Right, and I maybe I can get back to running a 6-minute mile.\"\n\nJill blinked twice then said, \"You run 6-minute miles?\"\n\n\"No. Not anymore. I used to, and that's why I said 'get back to'.\"\n\n\"Wow. That's very impressive. At least to me.\"\n\n\"In all fairness, I never ran more than two miles at that pace. I have run five miles a few times before, but not that fast. I'd run three or four a few times before my physical fitness test test then do the two-mile run as fast as I could.\"\n\n\"I have to train all the time to stay anywhere near a seven-minute-per-mile pace,\" Jill told him. \"If I took a year off, I'm not sure I'd even be able to run. But you sound like you're a kind of natural runner.\"\n\n\"I don't know about that, but I definitely never trained to see how good a runner I was.\"\n\nDan didn't tell her he didn't even like running. He hadn't really even thought any of this through. He'd just heard someone mention that Jill was an avid runner, so it was the only thing he could come up with that might let him spend some time with her, so he'd said it.\n\n\"I hate natural runners,\" Jill said, a smile appearing at the corners of her mouth again.\n\n\"So is that a 'yes'?\" Dan asked hopefully as he smiled, too.\n\nJill didn't answer right away. She turned her visor down and found a mirror and looked at herself.\n\n\"Lord have mercy!\" she said before flipping it shut then turning back toward Dan.\n\n\"So...this is what you want to get to know better?\" she asked as she blinked like a stereotypical beauty queen while she used one hand to sort of push her hair up.\n\nIt was enough to change the mood entirely and cause Dan to laugh.\n\n\"To answer your question,\" he said, \"yes.\"\n\n\"You're a brave man, Dan Summers,\" she said almost playfully.\n\n\"Uh-huh. And?\"\n\n\"And...what?\"\n\n\"And...did you just agree to let me run with you?\"\n\nJill sighed loudly again then told him it did.\n\n\"But you should know I'm on the road at 4:30 most mornings.\"\n\nDan was a morning person, but not that much of one. Even Army OCS hadn't been that brutal.\n\n\"Sure. Oh-four-thirty is fine,\" he told her in Army parlance. \"Where's the rendezvous point?\"\n\nJill actually laughed then said, \"So I guess you can take the soldier out of the Army, you just can't...\"\n\n\"Take the Army out of the soldier?\" Dan joked, finishing her thought.\n\nJill laughed again then told him where she started her runs, and Dan said he'd meet her there whenever she would be running again.\n\n\"Well, that would be tomorrow if I can get home and get some sleep,\" she replied as she searched his dashboard for the digital clock which was read 10:32.\n\n\"Back to the station house?\" Dan asked.\n\n\"Yes. I guess so,\" she said as she looked around as though Cliff might have spotted them.\n\nDan started the car, but before he put it in gear, Jill reached over and touched his arm, so he looked over at her and waited.\n\n\"Would it be okay if I drove your car?\" she asked with a little wince on her face.\n\n\"Sure. Come on around,\" he told her as he got out.\n\nBefore he did, he said, \"But please give me a chance to come open your door this time, okay?\"\n\n\"Oh. Okay,\" she told him as she let go of the door handle.\n\nJill thanked him then assured him she could get back in by herself.\n\n\"I have no doubt,\" Dan told her from just a foot or so away as they went by each other.\n\nJill had never driven an electric car, but the thought of owning one had appealed to her for quite some time.\n\nDan warned her about the difference in torque and starting power, and Jill was very careful when depressing the accelerator.\n\n\"Oh, my!\" she said when it still took off a lot faster than she'd expected. \n\nDan chuckled and Jill surprised him by playfully slapping at him and saying, \"Don't laugh at me!\"\n\nBut she was almost back to her normal self and Jill laughed, too. She did better when she pulled out of the parking lot and back onto the road, and by the time they got back to 'the cake' she had a pretty good handle on things.\n\n\"How'd I do?\" she asked excitedly when she put it in park.\n\n\"Fantastic,\" Dan told her.\n\n\"Really?\"\n\n\"Yes. Really.\"\n\n\"It's SO quiet!\"\n\n\"It is, and anytime I'm passing a someone on a bicycle\u2014or a runner\u2014I'm always very concerned about them not hearing the car approach. The only noise is from the tires on the road, so...\"\n\n\"Oh, sure. That makes sense,\" Jill said when she realized how true that was. \"Gosh, I need to keep this in mind when I'm out running, huh?\"\n\n\"With me?\" Dan teased, hoping it wasn't pushing things too far.\n\n\"Ha! Yes. Right!\" Jill replied, a happy smile back on her face.\n\nThey sat there for a couple of seconds in literal silence before Dan told her he'd come around and get her door.\n\n\"I can open my own door, you know,\" she said, but in a very sweet way.\n\n\"I do know. But I don't ever want you to have to,\" he told her before getting out and going around.\n\nDan helped her stand up, and this time, they were even closer together.\n\n\"Dan?\" she said. \"Thank you for...well, for...being there for me tonight.\"\n\n\"I'm just glad I could be,\" he told her.\n\n\"I had such a different picture of how this night would turn out, you know?\"\n\n\"Now I do,\" Dan replied quietly. \"And I'm very sorry you had to go through this.\"\n\n\"Thank you, but I think it's better I found out now. Besides, I really did have mixed emotions about...\"\n\n\"Marrying Cliff?\"\n\nJill shuddered then said, \"I find it hard to believe I ever even considered that.\"\n\n\"I really am sad that you had to deal with this, but I'd be lying if I didn't say there's a part of me that isn't quite as sad,\" Dan told her.\n\n\"Both of those parts are very sweet,\" Jill informed him.\n\n\"Is your car nearby?\" Dan asked.\n\n\"Yes. It's just over there,\" she said, pointing behind them.\n\n\"Oh, right. In a reserved parking area. Duh!\"\n\nJill laughed then told him that was proof she was a 'high, mucky-muck'.\n\n\"Or something like that,\" she added with a laugh.\n\n\"I'll walk you over there,\" Dan offered.\n\n\"Okay,\" Jill answered very quietly.\n\nShe punched her key fob and lights flashed and Dan heard the doors unlock. He opens the driver's side for her, and Jill thanked him again.\n\n\"Drive safe,\" he told her.\n\nJill started to get in then out of nowhere she reached out and hugged him.\n\n\"You have no idea how nice it was to have someone to talk to tonight, so thank you for that, Dan.\"\n\nIt wasn't a long hug, but it wasn't one of those fake hugs, either. Dan briefly hugged her back and told her again how glad he was to be able to help.\n\n\"So I guess I'll see you in a few hours,\" Jill said once she pulled away.\n\n\"I'l be there,\" Dan promised as she got in.\n\n\"Goodnight, Dan. And thank you again.\"\n\n\"You're very welcome, Jill,\" he said with a smile before closing her door.\n\nHe waited for her to drive off, and they both smiled and waved once she got backed out and put the car in drive.\n\nAs Dan walked back over to the Tesla that was still silently running, he realized he really liked this beautiful, older woman, and he vowed to do everything in his power to try and convince her he wasn't just a kid with a crush. \n\n\"Even though I kinda do have a serious crush on you,\" he said out loud to himself as he put the car in gear to head home.\n\nWhen his alarm went off at the ungodly hour of 3:45am, Dan lay there thinking that he hadn't felt this tired since he was in Afghanistan. But because he was very aware of the reason he was up at that time of day, he threw the covers off and got out of bed.\n\nA cup of coffee, and the all-important 'trip to the bathroom' behind him, he was on his way at 4:15 and at 4:25 he pulled up to see a woman in a white, reflective sports bra stretching.\n\n\"Good morning!\" Jill said much too cheerfully.\n\n\"It is definitely morning,\" a still-tired Dan Summers replied.\n\nJill laughed then told him it took some getting used to.\n\n\"Because I do the morning show, it's really the only time I can run, at least when it's warm outside.\"\n\nIt was the middle of August and Wichita got very warm. \n\n\"Are you going to stretch?\" Jill asked him when Dan didn't reply.\n\n\"Um, no, I'm good,\" he told her. He'd never done much stretching before any physical exercise, and in spite of the dire warnings he'd gotten over the years, he'd never pulled a muscle or strained a tendon, so he knew he was as ready to go as he'd ever be. \n\n\"Okay. Suit yourself,\" Jill said with a laugh as she looked at her watch under the lamppost.\n\n\"This running trail is lighted the entire way, and I normally turn around at the two-mile mark. Is that okay?\"\n\n\"Four miles, huh?\" Dan said as he made a face.\n\nJill only laughed then asked if he was ready.\n\n\"I feel like I'm facing a firing squad, but sure. Let's do this.\"\n\n\"We'll start out slow and pick up the pace,\" Jill said as they took off at about an 8-minute pace.\n\n\"I can handle this,\" Dan told her, but at the half-mile point, Jill told him it was time to get moving.\n\nAt the mile mark, Dan's lungs were burning. A half-mile later, his side was hurting. Too proud to say anything, he soldiered on until the turnaround point.\n\n\"Okay. I...I have to slow this down a little,\" he said, gasping for air.\n\n\"No problem,\" Jill replied without doing the same.\n\n\"Hey? Where you going?\" Dan called out.\n\n\"Back to where we started. Where else?\" Jill called back, a smile on her pretty face, her long, blonde ponytail barely bouncing with each graceful step she took.\n\n\"Right. Okay!\" Dan yelled back as she took off at an even faster clip while he slowed to about 8:30 a mile to relieve the burning sensation in his chest.\n\nJill wasn't even breathing hard when he limped in several minutes behind her.\n\n\"Thank you! This was great!\" she called out as she offered him a high five.\n\nDan managed to smack her palm then bent down and tried to breathe. \n\n\"You did really good,\" Jill told him as he sucked in air as deeply as he could.\n\nHe hadn't run like that in so long that he started coughing involuntarily.\n\n\"You okay?\" Jill asked, pretty sure she knew what was going on.\n\n\"Yeah. I'm fine,\" Dan told her as he stood back up and coughed again. \"Or I will be once somebody shoots me.\"\n\nJill laughed and told him again he'd done great\u2014for someone his age.\n\n\"Oh, now that hurt!\" Dan told her as his relatively young body recovered.\n\n\"Sorry. I couldn't resist,\" Jill said even more playfully. \"You know I was just kidding, right?\"\n\nFeeling better, Dan looked right at her, smiled then said, \"So does that mean you don't see me as too young anymore?\"\n\nHe said it just as playfully as Jill said what she'd said, but his comment caused her smile to disappear.\n\n\"Did you want to try this again tomorrow?\" she asked, ignoring his question.\n\n\"Um, well, sure. I mean, if I can get myself out of bed.\"\n\n\"What? Don't they have wake-up calls at the Assisted Living Facility?\" Jill asked, trying not to smile.\n\n\"Ha-ha. Very funny!\" Dan said trying to sound offended.\n\nJill laughed, and when she did, Dan was truly amazed at just how beautiful she was. Even at 'oh-dark-thirty' in the morning.\n\nShe could tell he wasn't just looking at her, and when she realized he'd been staring, she looked away.\n\n\"I really should get going. I need to shower and go in and help Kara get ready. She's very competent, but she still needs help with the computer system sometimes, and there's nothing worse than not being able to change a map on live TV.\"\n\n\"No, that would be very embarrassing,\" Dan agreed, feeling like an ass for making her uncomfortable.\n\n\"It was nice having someone to run with,\" she told him when Dan walked her over to her car.\n\n\"I didn't do much running WITH you, but okay,\" he replied with a laugh.\n\n\"It's obvious you can run. You just haven't stayed with it. In another week or two, I'll be the one asking you to slow down for me!\" Jill told him with another happy laugh.\n\nDan desperately wanted to say, \"So does that mean we'll still be running together two weeks from now?\" but didn't.\n\n\"I'm glad you let me do it,\" he said instead.\n\nHe feigned being sore already then said, \"At least I think I am.\"\n\nJill smiled then laughed again before confirming same time/same place again.\n\n\"Yes. Definitely,\" he told her. \"If the nurse remembers to wake me up, that is.\"\n\n\"Bye, Dan!\" she said with another small laugh and a shake of her head.\n\nHe waved to her again then said to himself, \"She has NO idea how beautiful she really is,\" as she drove away.\n\nDan knew he'd be sore the next morning, he just didn't think he'd be so sore he could barely walk. He'd done something similar before in the gym by doing so much the first day because it felt easy that he could barely move his arms the next day.",
        "He wasn't going to try and be a hero, so Dan put the bike rack on the back of his car and brought his bicycle to the starting point.\n\nJill laughed when she saw it, but when Dan got out of the car limping, she stopped.\n\n\"Are you all right?\" she asked with real concern.\n\n\"I will be. I just overdid it yesterday.\"\n\n\"You should have taken it easy.\"\n\n\"I think I was trying to impress you,\" Dan told her as he began freeing the bike from the rack.\n\n\"You did that when you rescued me from Cliff,\" Jill told him in a very kind way.\n\nDan was so surprised by what she said that he stopped and turned around.\n\n\"What did you just say?\" he asked, even though he heard every word.\n\nJill laughed and said, \"I believe you heard me.\"\n\n\"I was just making sure,\" Dan told her as he smiled.\n\n\"I almost told you that when you showed up yesterday. Not that I doubted you would. It was just that I couldn't find the right time to bring it up, and to be honest, I'm still trying to work through how I feel about all of this.\"\n\nDan went back to work untying and loosening straps and asked, \"So have you come to any conclusions.\"\n\nJill laughed as she stretched.\n\n\"Someone isn't paying attention.\"\n\nDan lifted the bike off the rack, turned around and set it down.\n\n\"Oh?\"\n\n\"Yes. I believe I clearly said that I'm still working things through in my mind.\"\n\n\"Ah. Okay,\" Dan said with a smile. \"That still sounds pretty encouraging to me.\"\n\nJill stood up, smiled at him then said, \"Working things through could have one of two possible outcomes. Don't go assuming anything just yet, okay?\"\n\n\"Me? Assume? Never!\" Dan told her a little on the dramatic side.\n\nJill laughed again and assured him he was doing fine. So far.\n\n\"Just don't blow it, soldier,\" she told him as she hit the start button on her watch and took off like a shot.\n\n\"Okay, that was just rude!\" Dan called out as he gingerly lifted one leg over the bike's frame saying, \"ouch, ouch, ouch!\" with every leg movement.\n\nPedaling stung, but it was at least bearable. Running, however, would not have been. He caught up to her in a few seconds then rode alongside. The day before Dan barely said two words during the run because it was all he could do to keep going. Today, he was able to talk in a conversational tone, and Jill was more than happy to talk as she ran.\n\nThey started with Dan asking where she grew up, and after learning she'd lived in Wichita her whole life, he asked how long she'd been running. That led to her asking about his upbringing, college, the Army, flight school, and flying for KAKE.\n\nAt the turnaround point, Dan decided to venture into the personal and asked about the state of affairs with Cliff.\n\n\"There is no state,\" Jill told him as she powered along.\n\nDan stayed just slightly behind her shoulder so he could see her from his favorite view point. Jill looked so stinking cute in the white ball cap and yellow sports bra, her ponytail swishing around as she ran, that he couldn't take his eyes off of her. Other than long enough to make sure he didn't run into her, of course.\n\n\"He called me late that night, but I didn't answer. He called again after our run, and that's when I told him it was over.\"\n\n\"I'm sure that didn't go over well,\" Dan mused.\n\n\"Ha! That's an understatement. He went on and on about all the time we've spent together and how much he cares for me, and blah, blah, blah.\"\n\n\"But?\" \n\n\"Yes. But. Not once did he tell me he loved me. And when I mentioned wanting to have a baby, he got downright pedantic with me asking me to think about how old I'll be when the 'kid graduates from college'.\"\n\n\"That's always pleasant. I mean, who doesn't like being talked to like they're a child.\"\n\nJill laughed and said she totally agreed.\n\n\"Cliff isn't a pompous ass by any means, but he can get a little condescending, and although I 'only' have a bachelor's degree and didn't go to law school, I'm not exactly a hayseed.\"\n\nShe laughed as she said 'hayseed' but Dan didn't.\n\n\"No, you're not. You're not even close. In fact, you're one of the most intelligent people I've had the pleasure of meeting,\" he told her.\n\n\"You're really trying to speed up my internal deliberations, aren't you?\" she teased.\n\nJill looked over at him when she said that, and Dan shivered when she did. For the life of him, he could not believe this beautiful woman could possibly be 43 years old. Her skin was fair and tight, and there were only the faintest of lines around her eyes when she laughed or smiled. He could tell she was older than he was, but the actual difference in their ages felt like it couldn't be possible.\n\n\"All's fair in love and war, right?\" Dan joked back.\n\n\"We're not in love, so are you trying to tell me we're at war?\" Jill asked, keeping the lively banter going.\n\n\"I'd call it more of a...siege.\"\n\n\"A siege. How so?\"\n\n\"Well, a siege is part of an overall strategy where one makes an all-out effort to break down the enemy's will to fight. You know, pulling out all the stops and what not.\"\n\n\"Oh, so now I'm the enemy, huh?\" Jill replied with a laugh as she kicked it into high gear for the last half mile.\n\nDan pedaled harder, matched her speed, then said, \"In a way, yes. The part of you that's resisting my charms kind of is the enemy.\"\n\nEven at the increased pace, Jill could still talk with very little effort.\n\n\"So let me see here. I'm the enemy, you're employing siege tactics, and and it's all part of your overall war strategy, and you call those things 'charms'. Do I have that about right?\"\n\nShe looked at him again, smiled a very happy smile, her perfectly straight, very white teeth showing through her two soft, full lips before she began sprinting the last 200 yards or so.\n\nDan didn't try to keep up this time. He pulled the bike in directly behind her and just enjoyed the view. He'd never admit to enjoying the sight of her tight tushy in the tiny, yellow shorts or her long, shapely legs, but he was most definitely loving both of them.\n\nJill hit the 'stop' button then slowed down and started walking it off.\n\n\"How'd we do?\" Dan asked when he came coasting up to her.\n\nJill tossed her head back and laughed.\n\n\"We? Um...WE...did very well, thank you.\"\n\nShe looked back down at her watch and said, \"That would be 27:42 well.\"\n\n\"Nice!\" Dan replied. \"Less than seven minutes a mile.\"\n\n\"That's my best four-mile time in...two years or so.\"\n\nShe stopped and waited for Dan to do so, too, then said, \"It's really nice to have someone to run with.\"\n\n\"Or ride alongside you because he's too wimpy to run?\" \n\nThis time it was Dan's smile that got to Jill who realized she really did like this very attractive, much-younger man. She wasn't quite ready to say that out loud yet, but she knew he was very close to winning her over, something she could admit during the post-run endorphin rush she was experiencing. But she'd need to see if it lasted when she was home alone and imagining herself out in public with someone who wasn't even 30 years old.\n\n\"The station is sponsoring a 10k in the middle of September. It's an annual thing. Is that something you'd consider doing?\" Jill asked as they turned around.\n\n\"Yeah. Sure. Definitely. As long as you'll let me keep training with you.\"\n\n\"Keep training?\" she asked with a smile. \"Don't you have to at least do something more than once to call it training?\"\n\nDan loved her playful sense of humor as much as he loved looking at her. And another quick glance at her midriff revealed an extremely tight waist with no fat anywhere. And yet Jill didn't look overly thin at all.\n\n\"Ouch. And...touch\u00e9!\" Dan said with a painful wince.\n\nAs they got close to their cars Jill said much more seriously, \"I'd like to keep training with you, Dan.\"\n\n\"Yeah?\"\n\n\"Uh-huh. Maybe even a lot,\" she admitted, a smile on her pretty face.\n\n\"Then I'll out be out here again tomorrow.\"\n\n\"Promise?\" Jill asked, her beautiful smile slaying Dan like a weapon.\n\n\"Cross my heart.\"\n\n\"Okay. I'll see you then,\" she told him as she opened her trunk and grabbed a towel to dry off with.\n\n\"With any luck, I'll actually be able to run again,\" Dan said with a laugh.\n\n\"Well, don't forget. You're not getting any younger, Dan,\" Jill said before using the towel to hide her laugh.\n\nPretending to say it under his breath, he said loudly enough for her to hear, \"Pot? Meet Kettle.\"\n\n\"I beg your pardon?\" Jill said as she lowered the towel and feigned being hurt.\n\n\"Oh, nothing,\" Dan replied as he looked up in the sky as though he hadn't said a word.\n\n\"Your siege tactics need serious work, soldier,\" Jill informed him as she tossed the damp towel into her trunk.\n\n\"Just another piece of the strategic puzzle going into place,\" Dan informed her.\n\nShe laughed then said, \"Yeah. Right.\"\n\n\"You'll see,\" Dan warned.\n\nThen, just as he'd done, she pretended to say something under her breath.\n\n\"Like THAT'S ever gonna happen.\"\n\n\"I heard that!\" Dan said as he started tightening straps on the bike rack.\n\n\"I think you're hearing things,\" Jill told him. \"Isn't hearing one of the first things to go? You know, at...your age?\"\n\nDan turned around, narrowed his eyes, pointed at Jill then said, \"Uh-huh. Keep it up over there!\"\n\nHe used his first two fingers like a 'V' then pointed to his eyes and said, \"I'm watching you, Missy.\"\n\n\"Oh, I noticed,\" she told him without any hint of teasing.\n\nDan was truly surprised, and Jill saw it. She tried not to laugh but couldn't help it.\n\n\"Oh, if you could see the look on your face!\" she said, as she covered her mouth as she laughed.\n\n\"Ha-ha! Very funny,\" Dan replied, pretending to be offended.\n\nHe pulled the last strap tight then looked at Jill and said, \"You can't really blame me, though, right? I mean, the uh...rearview look is pretty amazing.\"\n\n\"Why Dan Summers! I'm...shocked!\" Jill teased, loving the compliment.\n\n\"Sorry, Ms. Asbury, but thems just the facts.\"\n\nDan came over to open her front door when Jill suddenly said, \"Are you...doing anything this evening?\" surprising herself even more than Dan.\n\n\"No, but even if I was I wouldn't be. Why?\" he asked with a smile.\n\n\"I don't know. I guess maybe your siege has made some progress.\"\n\n\"Oh, okay. And?\"\n\n\"And...I was wondering if you might like to maybe have dinner with me.\"\n\nJill was well aware the endorphin rush was doing the talking, but she also knew there was something about Dan she found more than a little interesting. She might even call it 'intriguing', his age aside.\n\n\"I could probably be convinced to juggle my heavy social calendar to fit you in,\" he told her.\n\n\"How magnanimous of you,\" she said with little tilt of her head and a twinkle in her eye before asking for his phone.\n\nDan handed it to her and almost said, \"I like when a woman takes charge.\"\n\nBut in spite of her playfulness, Dan still saw 'classy' written all over her, and that wasn't a classy thing to say.\n\nShe entered her name and number then said, \"If you text me, I'll send you my address and the time.\"\n\n\"I'll do that,\" Dan promised as he opened her door.\n\nShe slid by him and also thanked him.\n\nDan told her she was welcome then closed her door.\n\nBy the time she started the car and put it in reverse to back up, he'd sent her a text.\n\nDan heard her laugh through the car window which she rolled down.\n\n\"I had a nice time, too,\" she told him in response to what he'd written.\n\n\"Six o'clock,\" Jill said as she started to back out.\n\nWhen the car stopped, she reeled off her address, and Dan told her he'd see her there.\n\nJill only smiled as she drove off, but Dan realized he was nearly hard, and looked down praying 'he' wasn't showing. Mercifully, no bulge was visible and he breathed a sigh of relief as Jill's car disappeared.\n\nAs he walked back to his own car he said out loud, \"I have a date with the hottest woman in Wichita, Kansas!\"\n\nOn his ride home, Dan also realized this was a first for him. He'd never met a woman he found attractive where his first thought was getting laid. So far, that thought had never even crossed his mind as the only thing that mattered to him was getting an opportunity to know Jill better. And the most pleasant aspect of this self discovery was how he didn't care at all that sex was the last thing on his mind.\n\nJill was busy with her own thoughts as she headed home, not the least of which was her fear that once the high wore off she'd have second thoughts\u2014or worse. But she had an even stronger sense that she'd made a good call. Yes, Dan would still be 29 regardless of what happened, but Jill couldn't stop thinking about how she felt each time she'd been with him. \n\nIt was true that amount of time was extremely small, but wasn't that how relationships worked? Didn't two people have to meet then have an impression of one another? From there one of them had to risk rejection and ask the other out, and for the first time in her life, Jill Asbury had just asked a man on a date. Or a kind of date anyway. \n\nSo while she had no idea what would follow, she felt good about asking him, and even a little bit hopeful that they could at least become friends. And while anything more seemed unlikely, it had been a very, very long time since Jill had had really, really good sex. Cliff was a solid 'satisfactory' in that arena but no more than just 'okay'.\n\nEven her late husband hadn't been amazing in bed, but she'd loved him so much it hadn't mattered. And for what it was worth, he was still better on his worse days than Cliff was on his best, so it wasn't like she'd suffered. \n\nBut the last time she'd had really amazing, mind-blowing sex was in college. So while it wasn't the kind of thing she normally thought about, were she and Dan to become say...friends with benefits...and were he say...amazing in bed...\n\nBy the time Jill got home, she was nearly dry with one new exception that had grown very wet just thinking about the possibility of having sex with someone as handsome as Dan Summers who was almost certainly a very-experienced young man.\n\nNeither had any idea the other was fantasizing about them as they showered separately, miles apart. Dan had never needed a...hand where his sex life was concerned until very recently. And because Jill was the reason for that, a reason more than worth waiting for, he found himself doing something he hadn't done since Afghanistan and even then only a few times during the months he was there. \n\nJill rarely ever pleasured herself, either. It had nothing to do with being a 'prude'. It was more that she didn't find it all that...pleasurable. It was nice to be sure, but the real thing was just SO much better, even when it was with Cliff. But as she stood there under the warm water and allowed her mind to drift, her fingers did the walking, eventually causing her body to spasm most pleasantly several times just before she got out of the shower.\n\nAfter a couple of hours with Kara making sure she had everything under control, Jill went back home and spent some time deciding what to make for dinner. And just as importantly to her, she needed to decide what to wear. Between those two things plus shopping for fresh food and the actual meal and personal preparations, the rest of her day was filled with more than enough things to do to keep her mind off of...other things.\n\nWhile dinner was in the oven and Jill was drying her hair, she sat down and typed 'May-December' romances into a browser and started looking. She was no Hollywood actress, and every example she found was (or a male actor), and the ones with the really large age differences were almost all with the man being older. Yes, there were a few older women dating younger men, but by the time she got to the end of the second list of celebrities, Jill asked herself what in the world she was doing.\n\nThe runner's high was long gone, and as the time got closer to six o'clock, Jill's confidence waned more and more.\n\nAfter checking things in the kitchen Jill blowdried her hair then did her makeup, something she rarely ever did unless she was at work. \n\nFortunately, she didn't agonize over what to wear for very long. She had a very cute top that was white with spaghetti straps and made of a satiny material. It was soft and shimmery, and with a strapless bra it looked sensational on her. That plus a size-six black skirt that fell to about three inches above her knees was all she needed. Satisfied, Jill slipped into a pair of black flats and was all set.\n\nAs she looked at herself, her long, blonde hair cascaded down over her bare shoulders as the silky blouse hung loosely on her upper body. Even without any jewelry, Jill looked sensational although that's not how she saw things. Like most women, she was her own worst critic, and Jill saw every tiny little line or crease and asked herself again what she thought she was doing with someone so young. But it was too late to worry about that, so she returned to the kitchen.\n\nOne of things Jill missed the most about being married was having someone to share her day with during dinner. Cliff was willing to listen, but 90% of their conversations were one way with him talking about this client or that trial or some other senior partner's mistress, and that was so very different than the pleasant exchanges she and her husband had enjoyed for so many years.\n\nThat aside, Jill knew she was pretty good cook, and the roasted rack of lamb she was pulling out of the oven looked perfect and smelled wonderful. Served with fresh asparagus, it was one of Jill's favorite meals. Along with a very crisp garden salad and a bottle of Chardonnay it made for a very nice dinner indeed.\n\nIt was exactly 6pm when Jill set the last piece of flatware on the table and just seconds later her doorbell rang. When she noticed the time, it made her laugh, but most of it was due to a sudden case of nerves.\n\nShe got to the door, took a deep breath then exhaled slowly before smiling and opening it.\n\n\"Military promptness?\" she said with a smile to her very handsome gentleman caller.\n\nDan was smiling, too, and holding a bouquet of red roses. But when he saw her, the smile vanished and his hand holding the flowers slowly lowered itself to his side as his eyes did something similar with regard to Jill's amazing body.\n\n\"What? Did I get something on my blouse?\" Jill asked as she looked down when she saw him looking.\n\nA second or two later Dan spoke.\n\n\"Um...no. It's just that you look...amazing. As in...wow!...amazing.\"\n\nDan looked very nice to her, too, in his dark-blue Dockers, blue and yellow checked shirt, and a pair of cordova-brown shoes.\n\n\"Oh, my gosh! Thank you,\" Jill told him before sharing her impression of him, too.\n\n\"And these are for you,\" Dan said as he re-raised the bouquet.\n\n\"Another part of your siege strategy?\" she teased before thanking him sincerely and asking him to come inside.\n\n\"If it's working, then, yes,\" he told her.\n\n\"It's still too early to say for sure, but I believe it might be, at least to some very small, nearly insignificant degree,\" Jill told him with a laugh as she took the flowers to the kitchen to find a vase.\n\n\"Well, okay then! In that case, yes, it's all part of my master plan.\"\n\nJill laughed again then asked Dan if he wanted anything to drink.\n\n\"No, thank you. And this smells great!\" he said as the aroma of oven-roasted lamb wafted his way.\n\n\"I hope you like it. I do love to cook, so it should at least be edible,\" she told him as she trimmed stems and placed them one at a time in the crystal vase.\n\n\"Edible? This looks like a five-star restaurant quality meal.\"\n\nDan was a guy, but he did notice things, and the very nice china on a beautiful, white linen tablecloth caught his eyes.\n\n\"Are these crystal?\" he asked as he held up a very heavy glass.\n\n\"Yes. My husband bought those for me as a 10th wedding gift.\"\n\n\"This is all very nice, Jill. And so is your home.\"",
        "She thanked him, snipped the last rose, then asked if he was ready to eat.\n\n\"I am. I'm very hungry as a matter of fact.\"\n\nJust one bite of lamb made Dan's eyes look heavenward.\n\n\"You weren't kidding. This is incredible!\" he told her. \n\n\"I'm glad you like it,\" Jill said, very much enjoying his kind words.\n\nThe asparagus was also perfect. Just a slight crispness to it and bursting with flavor.\n\n\"This is probably the last thing I should bring up, but...Cliff is an idiot,\" Dan said as he finished a second bite of asparagus.\n\nJill tried not to laugh, but the comment was totally unexpected and expressed the way she felt about her former boyfriend, so she couldn't really help herself. She knew better than to talk about her ex, but since Dan opened the door, she said something of her own.\n\n\"He seemed so surprised when I told him we were through.\"\n\n\"Most men really are clueless,\" Dan said with a smile and no small amount of self-deprecating humor.\n\nJill laughed again and now felt very comfortable talking with him.\n\n\"Not all men are clueless,\" she said rather sweetly.\n\nDan almost said, in a playful way, \"That's why I said 'almost'.\"\n\nInstead he asked why she thought Cliff was so clueless.\n\nThat, too, made her laugh, and after thinking for a moment said, \"He and I talked several times about how important it is for me to have a baby...before I'm too old to...and I was 99% certain he was going to propose. I actually thought he'd ask me to marry him during dinner the next evening, but when he pulled out the little box, I was giving him credit for realizing how important my work family was to me. And what better way than to propose right there in front of them.\"\n\n\"So when he offered the key to his front door rather than the key to his heart you were incredibly disappointed.\"\n\n\"Yes. Except that 'disappointed' only scratches the surface. I...I felt...humiliated. It was bad enough that it happened in front of my friends, but it was like a...slap in the face as far as what matters to me.\"\n\n\"You felt like he'd never heard a word you said and was moving to the next step of what HE wanted in the relationship without regard to what you wanted.\"\n\nJill sat there and just stared as Dan cut another small bite of lamb.\n\n\"Yes. That's exactly how I felt,\" she said, amazed that he was able to put her feelings into words so succinctly.\n\n\"I did serve in the Army, but I'm not a violent person. I've never even hit a guy before. But when I saw you cry, I wanted to walk over and just...slap the crap out of him,\" Dan told her.\n\nIt wasn't funny, but Jill couldn't help but laugh, and the laughter came from the realization that he was being protective of her feelings and using that as a way of letting her know.\n\n\"I'm glad you didn't,\" she told him before saying, \"and I'm also very thankful you were there for me.\"\n\n\"You looked like you really needed a friend.\"\n\nShe continued looking at him, and for the first time, she saw a truly caring, genuinely nice man rather than a 29-year guy who also happened to be very handsome. \n\n\"You're full of surprises, Dan Summers,\" Jill told him.\n\n\"I'd say it's part of my plan, but I've probably beaten that dead horse enough by now, right?\" he said with a very pleasant smile.\n\n\"No. I actually loved your 'siege' analogy. It was also one of those surprises. All of which have been rather pleasant.\"\n\n\"So far,\" Dan told her as he tilted his head toward her and raised an eyebrow indicating not all of his surprises might be pleasant.\n\n\"I'll take my chances,\" Jill replied in a way that let Dan know his 'master plan' was working quite well.\n\nThe conversation switched to work, and for the next half hour or so, Dan learned how Jill got into TV weather and became the chief meteorologist for KAKE.\n\n\"You've obviously worked very hard, and that's paid off in the equally-obvious success you've enjoyed,\" Dan said in agreement.\n\n\"It's funny, but I find myself feeling more like a failure lately because I haven't managed to do the thing that's most important to me yet.\"\n\n\"Having a baby?\" he asked almost rhetorically.\n\n\"Am I being unrealistic?\" Jill asked in earnest.\n\n\"I don't think so. I don't think that at all. In fact, I'd say you're the only person on earth who knows what's most important to you, and if it's having a baby and you still haven't done that, then no, it isn't unrealistic at all.\"\n\n\"Cliff was married before and he and his ex-wife have two kids. So having another one, especially at his age, isn't something he was wild about. But he kept telling me it was a possibility, and I kept clinging to hope.\"\n\nJill then explained how time, and eventually life, got away from her and her husband.\n\n\"We never even talked about, you know, preserving his...sperm.\"\n\nDan didn't ask why, and he didn't need to as Jill explained.\n\n\"I know all kinds of single mothers do a great job raising their children, but I just couldn't bring a child into the world knowing he or she would only have one parent. And the truth is, I was so distraught knowing I was going to lose my husband that I couldn't even think about such things.\"\n\n\"For what it's worth, I agree with everything you just said. I was extremely fortunate to have two loving parents. And in the case where someone with children loses their spouse, they have no choice but to keep on keeping on. It's just that, well, in my humble opinion, anyway, responsible people should try and maximize a child's chances, and again, in my opinion, that's best done with a loving mom and dad.\"\n\n\"And for what it's worth from my perspective, I agree with you. Oh, your opinion was worth a lot to me, by the way, so thank you for sharing it.\"\n\n\"You're very easy to talk to, Jill,\" Dan told her sincerely.\n\n\"I feel the same way about you, too,\" she said just as sincerely before lightening the mood and asking if he wanted dessert.\n\n\"I'm not much for sweets, but I do make exceptions.\"\n\n\"Me, either, but I bought some frozen vanilla yogurt just in case,\" Jill told him, another smile on her beautiful face.\n\n\"You wouldn't have to twist my arm to have a small scoop with you.\"\n\n\"Okay. Two servings coming right up,\" Jill said as she got up.\n\nWhen she did, Dan began picking up plates and Jill told him she'd get that.\n\n\"It looks like you're getting the frozen yogurt, so this seems like the least I can do.\"\n\n\"Oh. Well...thank you very much,\" she said. \"Hmmm. Another pleasant surprise.\"\n\nDan laughed and that made Jill laugh. This time it wasn't out of a sense of nervousness. It was out of a sense of happiness, and the realization that she felt happy for the first time in a very long while.\n\nThey went to the family room to eat their yogurt before the subject of running came up.\n\n\"I'm gonna be ready for this race,\" Dan told her. \"I'm not quite sure how just yet, but I will be ready to run it with you.\"\n\n\"I'd like that,\" Jill told him with a twinkle in her eye.\n\n\"I may not be able to run 'with' you, but I'll run the same race,\" Dan clarified.\n\nJill laughed again then said, \"I told you how you strike me as a natural runner, and I still think I'm right. So it won't surprise me if you end up beating me.\"\n\nJill smiled then said, \"But then again, we won't be in the same age category, so...\"\n\nDan sat his dish down on a coaster then asked if age was really that big a deal to her.\n\nJill tried explaining her feelings beginning with the post-run high she was on.\n\n\"I think that allowed me to put my concerns aside even though a part of me was very hesitant to ask you to come over.\"\n\n\"I'm very glad you did,\" Dan said before asking, \"and has anything changed since then?\"\n\nJill felt a kind of stirring in her body as she said, \"I still have concerns, but to use your 'siege' analogy, you're breaking down a lot of walls.\"\n\nShe smiled then asked, \"How's that for a noncommittal answer?\"\n\nDan smiled back then told her, \"Anything other than a negative response is very encouraging.\"\n\n\"I do have one more question, though,\" Jill said.\n\n\"Shoot.\"\n\n\"Why...me? Why is a guy as attractive as you interested in a woman like me?\"\n\n\"I'm not,\" Dan told her so directly Jill was confused.\n\nHe smiled warmly then said, \"I'm not interested in any woman 'like' you, Jill. I'm only interested in you.\"\n\nA flash of warmth washed over her from head to toe as she said, \"Oh. Okay.\"\n\nWhen Dan didn't say anything Jill looked at him then asked another question.\n\n\"Do you really not have concerns of your own?\"\n\n\"Well, yes. Of course,\" Dan began.\n\n\"I assumed you did, I just wanted to know,\" Jill replied.\n\n\"My concern is you won't ever see me the way I see you,\" Dan said in a way that caused another, stronger sensation.\n\n\"I...I see,\" she said, not seeing at all as she looked down at the coffee table where she set her own dish from which she'd only taken two small bites.\n\n\"Would it help to tell you I haven't so much as looked at another woman since I met you?\" Dan asked, again so sincerely it surprised her.\n\n\"I...I'm not sure,\" she told him.\n\n\"Well, it's true, and I also want you to know that you're the first and only woman who's ever done that to me. I guess I kind of always knew in the back of my mind I might one day meet someone who could do that, but I don't think I really believed it.\"\n\nHe paused then said, \"But I do now.\"\n\nWhen Jill didn't say anything Dan asked if he'd gone too far, and if so, he was sorry for doing so.\n\n\"No. Not at all. I...I just don't know how I feel about...this.\"\n\nShe finally looked at him again then said, \"About...you and me.\"\n\n\"We did kind of just meet, and that would be true no matter what, so I'm inferring you're specifically referring to the age difference, and while it's not an issue for me, I can certainly understand how...\"\n\n\"Wait. How can it not be an issue?\" Jill asked, interrupting him, but not in a rude way.\n\n\"I'm not sure I can answer that. I'll try, but it may be inadequate,\" Dan told her. \"Let me just say that when I see you, I don't see numbers.\"\n\nJill gave him a funny look and Dan clarified.\n\n\"I don't see your age, Jill. I see you. I see this friendly, warm, cheerful...incredibly beautiful woman. And that's all I see.\"\n\nShe was staring at him, but when it was her turn to speak, she couldn't continue doing it. She looked back at her desert dish as she spoke.\n\n\"That is quite possibly the most romantic thing I've heard in...\"\n\nShe looked at Dan then said, \"Maybe in my entire life.\"\n\n\"I was just making a factual observation,\" Dan said with a smile. \"I can also say things that actually 'are' romantic.\"\n\n\"Well, if that wasn't your best line then...sign me up,\" she said very sweetly.\n\nWhen Dan got up, Jill's heart froze, as did her ability to speak.\n\nHe moved around the coffee table and stood in front of her as she sat on the sofa.\n\nWhen he bent down, her heart began pounding in her chest and she managed to very weakly ask, \"What...what are you doing?\"\n\nDan only smiled as he looked her into her eyes.\n\nWhen his eyes closed, so did Jill's, just as their lips met for the first time. The kiss lasted maybe two seconds, but it shook Jill to her core.\n\n\"May I sit down?\" Dan asked, still smiling.\n\n\"Okay?\" Jill said as Dan sat next to her.\n\nHe turned her way then smiled at her and said, \"In case you were wondering, that was the final piece of my siege strategy.\"\n\nJill stared at him until he asked, \"Did it work?\"\n\n\"Yes?\" she said, again making it more of a question than an answer.\n\n\"Well enough to maybe kiss you again?\"\n\n\"Uh-huh,\" Jill barely got out.\n\nThis kiss was several seconds in length and was actually 3-4 kisses of varying length.\n\n\"I...I should probably get these dishes before everything melts,\" she quietly said when it finally ended.\n\nDan came very close to saying, \"Yeah, we wouldn't want frozen yogurt to melt inside the dish it's in, would we?\" but again, he didn't think humor was called for.\n\n\"Sure,\" he said instead as Jill went to stand up.\n\nAs she carried the dishes to the kitchen, Jill's mind was racing a million miles an hour as it tried to reconcile what was going on with her waning fears about falling for someone so young. But as she set the dishes in the sink she realized that was exactly what was happening. His 'siege' was working. Her defenses were shattered and laying all around in pieces.\n\nBut she still needed time to sort things out, so when he asked if he could help, Jill politely told him 'no thank you'. Sensing what was going on, Dan, in turn, told her he thought it might be a good time to be going.\n\nJill desperately wanted him to stay, but until she could think clearly, that seemed like a very bad idea, her previous fantasy about 'hot sex' aside.\n\n\"Yes. Maybe so,\" she told him just before she turned around. \n\nAgain, she wanted him to kiss her again so badly it hurt, but she knew if he did, it was 'game over', and now, that wasn't what she wanted to happen. At least not all of her did anyway, as 'friends with benefits' suddenly seemed like fake romance dressed up in a cheap tuxedo.\n\n\"Thank you for dinner and for at least giving me a chance to...win your heart,\" Dan told her quietly.\n\nShe looked at him then said, \"I really am glad you came over, Dan. I...I just need time to think, okay?\"\n\n\"I understand,\" he told her very gently. \"Please take all the time you need.\"\n\nJill walked him to the door, and to both her relief and her chagrin, he only kissed her on the cheek before leaving.\n\nSeveral minutes later, Jill grabbed her phone, hit the first number in her contacts and waited.\n\n\"Mom? Are you busy?\"\n\nJill was surprised her mother was still up. She was even happier when her mom said, \"You know you can call me anytime, right?\"\n\n\"I know,\" Jill replied. \"And this is one of those times.\"\n\n\"It's Cliff, isn't it?\"\n\n\"What? No. Cliff is out of my life.\"\n\n\"Oh. Then you've met someone else.\"\n\nHow her mother could know that was a mystery, but Jill knew her mom knew.\n\n\"Yes. And I really, really need some advice.\"\n\n\"Then let's talk,\" her 70-year old mother said.\n\nAn hour later, Jill felt so much better that surprised her, too. She'd felt hopelessly lost and confused, and in less than 60 minutes, her dear, sweet mother had made it all better. The way she always had.\n\nHer advice had been simple and yet profound.\n\n\"How does he treat you?\"\n\n\"How does he make you feel?\"\n\n\"Would you want this man to be the father of your children?\"\n\nThe only thing her mother said about the age difference was that her daughter was the only person who could determine how important that was. She did ask Jill if she'd feel 'funny' being seen out in public with her, and the only answer she could come up with was, \"I guess I'd have to actually be seen in public to know.\"\n\nBut it was her mom's final comment that made the biggest impression on her.\n\n\"Remember, honey. Love is the key. Not money. Not things. Not age. The key to happiness is love.\"\n\nShe wanted to call Dan as soon as she hung up with her mom, but both of them were going to see the other in a few hours, so she held off, hoping to share her feelings with him while explaining what had happened. She felt awful for the way she treated him, but she really had needed time to think. Even so, she was almost certain he would understand, and that only made her feel better about the new way she felt about this most unusual new man in her life.\n\nWhen Jill's alarm went off, she lay there for a minute or two thinking about everything that had happened in the last 18 hours or so, and more importantly, what might happen in another hour and after that.\n\nDan, who was normally almost as optimistic as Jill, and a guy who was supremely confident around women, awoke with a sense of dread. He knew Jill liked him and as more than just a friend. But he couldn't shake the feeling that she'd already decided there was no way she was going to get romantically involved with someone his age. And unlike Jill's earlier thought, Dan had no interest in being friends\u2014with or without benefits. \n\nHe'd continue being cordial, and because he'd said he would, he'd continue running with her if she wanted, and he'd also run in the station-sponsored race. But he was one of those who believed men and women weren't cut out to be friends. Maybe friend-ly, but not friends.\n\nA third-party observer would have no idea how nervous both of them were as Dan drove up to where Jill was already stretching. He turned off the car, put on his game face, and got out and said, \"Good morning!\"\n\nHis cheerful greeting encouraged her, and Jill smiled back and said, \"Hi, there.\"\n\n\"It feels great out here,\" Dan remarked regarding the unusually cool, crisp air.\n\n\"It really does, huh?\" Jill replied.\n\n\"Did you order this?\" Dan asked.\n\nJill laughed and told him she wished she had that kind of power.\n\nHe laughed, too, and then there was a long period of silence.\n\nJill finally spoke and said, \"Could we maybe talk while we run?\"\n\n\"Um, if you're willing to run at my pace, sure,\" Dan told her, making sure to smile.\n\n\"Okay. That works for me,\" Jill said in a very sweet voice.\n\nThey'd gone maybe a quarter of a mile when Jill said, \"So I did a lot of thinking last night.\"\n\n\"Uh-huh. And?\"\n\n\"And I spent nearly an hour talking with my mom, who is also my best friend.\"\n\n\"Uh-oh,\" Dan quipped, hoping that wasn't bad news.\n\nJill laughed and said, \"No! It wasn't like that.\"\n\nShe looked over at him then said, \"Not at all.\"\n\n\"Oh,\" came the next short reply.\n\n\"She's also the smartest woman I know, and she said a lot of things that made sense to me.\"\n\n\"Like...stay away from men my age?\"\n\n\"No!\" Jill told him. \"That never even came up beyond her saying it only mattered as much as I make it matter.\"\n\n\"I already like your mom,\" Dan told her as they clipped along at about eight-minutes a mile.\n\n\"Anyway, she helped me see that you're pretty much everything I'm looking for.\"\n\nJill didn't look at him when she said it, and it was said in a way that told Dan she felt vulnerable saying it.\n\n\"And I want kids,\" Dan said in the same tone of voice.\n\nJill slowed down then stopped running.\n\n\"You okay?\" Dan asked as he did, too.\n\nHe was a few steps ahead of her and when he got back to her, Jill put her arms around him and kissed him for a good two seconds.\n\n\"I don't why that just happened, but I couldn't be happier that it did,\" Dan told her.\n\n\"If...if you really want to be with a woman my...sorry. If you really want to be with...me...I'm...I'm all in,\" Jill told him as she looked into his eyes, her arms still around me.\n\n\"I call,\" Dan said before pulling her close and kissing her for quite some time as tongues flicked and touched and soft, purring noises were made.\n\nJill was all smiles when the kiss ended.\n\n\"You are a very good kisser, Dan Summers.\"\n\n\"You're not bad yourself, Jill Asbury.\"\n\n\"But I can still kick your ass in running,\" she told him with a smile as she took off without him.\n\n\"Like h...HECK you can!\" he yelled as he sprinted to catch up. His legs were still a little sore, but he felt pretty good by the time he reached her.\n\n\"You know you can't hold this pace,\" Jill playfully taunted as they hit a seven-minute a mile pace.\n\nDan kept up to the turnaround point, and did his best to stay close for another mile, but in the end, Jill not only beat him, she smoked him.\n\n\"What took you so long?\" she teased when he came across the finish line gasping for air.\n\n\"I...I was...just...enjoying the view!\" he said between gulps of oxygen.\n\n\"Did you just tell me you like my butt, Dan Summers?\" Jill asked as though she were offended.\n\n\"Yes. I...I kinda did.\"\n\n\"Oh, okay. Well, that's good to know,\" she told him as she flung her ponytail around and walked away and said, \"I know you're still looking!\" \n\n\"I can't help it. You have a very nice ass!\"\n\nJill laughed happily and realized she was happy. For the first time since before her husband got sick, she really was happy. That was a little strange because she was always positive and upbeat. The only exception in her life had been when the doctor them there was nothing more he could do. ",
        "That had been the darkest time of her life; the time when she'd felt utterly helpless and out of control. Work had been her only solace, and then Cliff had come along and at least helped her feel normal again. \n\nBut it had taken Dan Summers to make her feel loved, and although it was very early in their budding relationship, Jill hadn't felt like this since she fell in love with the man she'd married.\n\nDan caught up to her and put her arm around her. Jill did the same as they turned back toward their cars.\n\n\"You can't possibly imagine how happy I am right now,\" Dan told her as he looked over at her.\n\n\"I can't?\" she said with a smile. \"Even though I'm about to burst inside from happiness?\"\n\n\"Geez. You can't let me win at anything, can you?\" Dan teased.\n\n\"Uh-uh. You have to earn it,\" Jill informed him.\n\n\"Oh?\"\n\n\"Uh-huh.\"\n\n\"In that case, I'd like to try and start...earning it as soon as possible,\" Dan told her earnestly.\n\n\"Is tonight soon enough?\" Jill asked as she bit her lower lip after asking the question.\n\n\"Tonight is...perfect,\" Dan told her.\n\nAnd around 10:30 that evening, Jill learned what perfect meant. Or perhaps she re-learned it as she had her first mind-blowing sex since she was in college. Dan had heard things about 'older women'. He'd just never been with one before to verify those rumors. But he found out they were true as Jill 'turned him every which way but loose' in bed.\n\n\"You are a demon!\" Dan panted when they finished the first time.\n\n\"Whoa! Hold on there! If I'm a demon, you're...the devil himself!\" she replied before rolling over on top of him. \"And I must say I LOVE your pitchfork.\"\n\nDan laughed and Jill did, too. A long, happy, lover's laugh as they looked into each other's eyes.\n\n\"Hey! Is that your pitchfork?\" she asked when she felt it rising again.\n\n\"Yes. You've been a very bad girl, and I need to teach you another lesson.\"\n\n\"Oh. I see,\" she said as she began pushing against him. \"Well, then. Teach away, Beelzebub!\"\n\nDan rolled her over and took her again only this time it was slower, gentler, and much more deliberate as they explored one another's bodies in great detail. Dan told her many times how beautiful she was and Jill let him know he didn't have to say that.\n\nHe stopped the lovemaking at one point, looked into her eyes and said, \"I'm not just saying it. I'm saying because it's true and I still can't believe just how gorgeous you really are.\"\n\n\"In that case, let me say that I feel like I'm living some kind of fantasy in a dreamworld with someone so handsome it can't possibly be true.\"\n\n\"And young. Don't forget young,\" Dan told her very seriously.\n\nWhen Jill said, \"Yes. Young. Lucky me!\" with love in her eyes, Dan went back to work and proved just how lucky she really was.\n\nIt was around midnight, and as Jill lay in his arms Dan asked if she was okay with telling people about their relationship. She wondered if that's what he wanted, and when he laughed, she was relieved.\n\n\"No! I want to tell the whole world,\" Dan said.\n\n\"Then let's tell them,\" Jill happily agreed.\n\nThe next morning they ran together, showered together as Dan brought some clothes with him, then walked into work together holding hands.\n\nIf looks could kill, Melanie would have been in jail as she sneered at Jill and made a snide remark to Dan about his choice of older women.\n\n\"You okay?\" Dan asked once they got out of her field of view.\n\n\"You know, I really try to like everyone, but that woman pushes me to my limits!\" Jill told him.\n\nKara was disappointed and yet she was still able to smile when she saw them. And because she could tell how happy Jill was, she said to them both, \"I'm really happy for you guys.\"\n\n\"Thank you, Kara,\" Jill said.\n\nShe then looked at Dan and said, \"So are we.\"\n\nNews spread quickly about the newest May-December couple in Wichita, and a photo of them even appeared on the front page of the local newspaper. There was a short summary of their jobs at KAKE and a line about how 'love was in the air.'\n\n*****\n\nBoth Dan and Jill meant it when they said they were 'all in'. The two of them became inseparable from the moment they kissed during that summer run. Dan not only ran the race he'd promised, he beat his girlfriend by nearly a minute causing her to make a playful quip about 'natural runners' and how much she hated them.\n\n\"With one very notable exception,\" she added before kissing the younger man she was falling in love with.\n\nBy the time Fall came around, both of them had told the other they loved them many, many times. And because Jill had a house and Dan had an apartment, he moved in with her just before Thanksgiving. Dan had met Jill's parents and they hit off it off almost immediately. Dan's parents were slightly less enthusiastic about this older woman until they spent some time around her. Once they really got to know her she won their hearts, too, and her constant enthusiasm proved contagious.\n\nIt was the end of January and right after a heavy snow that the station manager told Jill she'd need to join Dan during the morning traffic report to give her opinion of the situation. It didn't make a lot of sense to her, but any excuse to be with the man she loved was music to her eyes.\n\nWhen Kara, who was on air, mentioned that Jill was in the air with 'Dan the Man' as they'd taken to calling him around the station, the camera inside the helo switched on.\n\n\"So what can you tell us, Dan?\" Kara asked.\n\n\"Well, it looks cold and snowy down there, Kara, but traffic is moving along quite nicely.\"\n\n\"I see. And how about inside the KAKE 'eye in the sky'?\"\n\n\"If I'm right, things in here are just the opposite. It's warm and toasty, and I'd say this little bird is full of love.\"\n\nThe camera switched over to Jill who was giving her boyfriend-pilot a funny look when he said, \"It's no secret this beautiful woman and I have been dating, and it's probably also not a secret that I'm stone-cold in love with her.\"\n\nJill furrowed her brow then smiled.\n\n\"But what no one knows, other than the station manager who got Jill up in the air with me this morning is that...\"\n\nHe fished out a large diamond ring from his jacket pocket then said, \"That I'm about to propose to the woman I love.\"\n\nJill's eyes opened wide as Dan said, \"I can't get down on one knee, honey, but I don't love you any less.\"\n\nThe cameras were rolling as Dan said, \"I love you more than anything or anyone on earth, Jill Asbury. So. Will you make me even happier by saying 'yes'? Jill, will you marry me? And for your information, this is NOT a key.\"\n\nJill was crying and nodding and holding out her left hand as Dan used his left hand to slide the ring on. He leaned over and kissed her, and viewers all around the city were saying, \"Aaah!\" and many eyes were moist with tears at the on-air romance unfolding right before their eyes.\n\nOther than Jill, no one was happier than the station manager when ratings went through the roof. They settled back to normal a month or so later, but the in-air proposal again made huge headlines, and the station offered to cater the wedding reception the following June after the newly-married couple wed in the church where Jill's family still attended.\n\nBut the happiest person by far was Jill Summers who learned, just after turning 44, that she was finally going to be a mom. Dan was thrilled, too, but Jill was over the moon with the joyful news. \n\nAnd when their beautiful little boy was born the following March, Jill cried tears of joy when she held him for the first time. \n\nDan was by her side and when he leaned down to kiss her and tell her how beautiful both of them were, Jill remembered her mother's sage words of advice.\n\n\"Love is the key, honey.\"\n\nAnd as Jill Summers cradled her sweet baby boy and looked at her handsome husband smiling at them both, she knew she'd finally found all the love any woman could ever hope for."
    ],
    "authorname": "komrad1156",
    "tags": [
        "mature"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/love-is-the-key"
}
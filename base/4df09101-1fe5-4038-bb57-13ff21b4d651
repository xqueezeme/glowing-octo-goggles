{
    "title": "Male Multiples",
    "pages": [
        "One day I was lucky enough to discover that although a guy cannot actually have multiple orgasms the way women do, you can draw out their pleasure so that it feels like their orgasm is continuing long after they've finished actually cumming. My guy considers this to be his own kind of multiple orgasm and one hell of a great treat when I do it. Now, the reason I don't do it all the time (although I'm sure that he would be very happy) is mostly because I usually don't get off while I'm concentrating so much of my attention on his pleasure. So of course it's something special rather than every day. Also, despite the fact that we're both in our early twenties (as in 20 and 21) and he's at his sexual peak for all intents and purposes, it takes him awhile to recover enough to get it back up afterwards. Which means that chances are, no sex for at least half an hour (about twice the normal amount of time it usually takes him). Since I prefer orgasms during sex to any other kind... well, you get the picture.\n\nHowever, when I'm wanting to feel in power and in control, and absolutely drive him wild it is something that I take particular joy out of doing. \n\nIt starts off with teasing. Mostly in the fact that I have him lie on his back and then I start to touch all over his body, finding his most sensitive spots with my lips and fingers. Two notes for this part: I do not let him touch me back and my touch on him is extremely gentle. In fact, I'm barely touching him at all. I run my fingers in little trails, and I actually never touch such erogenous such as his nipples, earlobe, or his penis. Instead I trail all around them, working little circles around his chest and slowly working inwards, as soon as I get to his areola I start moving away again. Now, most guys do not have the discipline not to move while you're doing this to them, but I find it's a lot more fun if you don't tie him up and he'll willing lie there while you tease him. The reward is definitely worth the torment that you'll be putting him through.\n\nAfter spending awhile moving so lightly around his erogenous zones, I start to press a little more firmly and I'll let my fingers actually trail over his nipples, penis and balls - but I pay NO SPECIAL ATTENTION TO THEM. Just trail them over like you are the rest of his body parts and move on, don't stay there. Trust me, it will drive him absolutely mad.\n\nNow you may have two questions at this point: 1. Why am I spending so much time prepping him when he's already hard as a rock? and 2. What do I do when he keeps trying to grab me and throw me down?\n\nWell the answer to #2 is to be very firm, if he knows that you want to be in control most guys will give up that control because they think it's damn sexy when the woman gets aggressive. So you must just force his hands down and go \"Stop it. I'M pleasuring YOU.\" The reminder that you're in control and that you're doing it in order to give them a great experience often works. Otherwise, you might as well just let them throw you down and give you one helluva good fucking and then try again at another point when he has a little bit more of an idea of what to expect. Or, if he's willing, you can tie him up.\n\nThe answer to #1 is a little more complex... see when a guy is hard it's pretty much assumed that they just want to stick it in and go. And I've never seen anything to really contradict that. But, if you tease them and make them wait a little longer, then it becomes much more interesting for them. More blood rushes down to the penis, they become even more aroused, and their balls actually often tighten. It's a fallacy that women are the only ones whom foreplay can effect, if guys were able to hold out for longer during the foreplay they would find that it definitely increases their pleasure as well (and there are some smart fortunates who figured THAT out a long time ago!). \n\nBy not touching them firmly you're actually arousing them more because the areas that want it the most are now aching to be touched. When YOU decide, graze your fingers back up to his nipples (or your chosen sensitive spot since not all guy's nipples are the most sensitive part of their body) and become much firmer and rougher. Squeeze, lick, twist, and pay attention ONLY to that part of the body. Find another sensitive spot - my favorite one is the earlobe- nibble, bite down, suck - and if you can keep at least one of your hands busy with the first part.\n\nAFTER you've become rougher with his sensitive spots only then move down to the penis. Take his balls, roll them with your fingers. Tug GENTLY, if he responds pleasurably you can tug a little harder but make sure that you don't hurt him. If you tug too hard on his balls, all your previous work will be completely undone.\n\nWithout giving any real stimulation to his actual penis, straddle him and rub his head up and down your slit. Lower yourself so that JUST the head pops in. Hold it and then pull yourself off. Repeat. Have just his head in you several times. Then, very slowly start moving down. Go a couple inches and come back up, go a couple inches and come back up. As slowly as you can work your way down to the base. When you get there, STOP AND HOLD IT. If you don't, he might very well just cum as soon as you start to move again. Give him a few seconds to get himself under control and bask in the incredible sanctuary that is your body. \n\nThen do a usual fuck with you on top, ride him - but slowly. Just ups and downs, don't do anything else (yet). A few times move back up so that you're only fucking the first few inches of his penis before sliding all the way back down again. However, when you're doing this remember to stay in place for a couple seconds when you've slid all the way back down. Chances are he will be groaning and his eyes will be popping because he's trying really REALLY hard not to cum. \n\nAs soon as you think that he might be close to cumming, very very close - or your legs are just getting unbearable tired - go up and pop his head a few times in and out of your pussy. Then slam back down hard and go up and slam down a few times, very hard. THEN, actually grind your body on his. No more ups and downs, lean forward slightly and just rub your splayed pussy against his crotch, mostly back and forth with a little side to side. Circular motions are good too. Within a minute, he will be cumming - DO NOT STOP MOTION. As long as you keep up that motion you will keep up the orgasmic feeling for him. Clench down and move that butt girl.\n\nI have actually gotten my fianc\u00e9 to the point where he's begging me to stop because he can't take it anymore, and he's twitching and trying to pull me off but his arms have absolutely no strength. This is the REAL equivalent to fucking his brains out, because they are not working so well during this. Chances are, his movements underneath you will not stop until YOU stop. \n\nTry to be nice and not draw it out for too long, eventually it does become painful (just as too many orgasms in a row can become excruciating for the ladies.). The feeling of power is great, and so is the way he'll look at you like you're a sex goddess afterwards. Just be careful not to touch his penis, it's going to be very sore and overly sensitive for the first few minutes. Enjoy!"
    ],
    "authorname": "Goldeniangel",
    "tags": [
        "inches back",
        "ups downs",
        "head times",
        "sensitive spots",
        "penis balls",
        "sensitive spot",
        "start moving",
        "couple inches",
        "part body",
        "back"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/male-multiples"
}
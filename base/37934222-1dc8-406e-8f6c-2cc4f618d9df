{
    "title": "My One True Love Ch. 08",
    "pages": [
        "Another chapter, a short one. It picks up at the end of the last chapter, in the middle of the night. Hope you all enjoy it!\n\n*****\n\nI woke up with a stirring next to me. It took me a few moments to realize where I was and instantly smiled. I was in my girlfriend's room, holding her, just as we fell asleep. I clutched her gently, making sure I was really there. A cute but soft moan escaped Lindsay's lips.\n\n\"Are you awake Jay?\" she whispered.\n\n\"Yeah babygirl,\" I answered, \"What's wrong? Can't sleep?\"\n\n\"Yes and no,\" she answered, \"I slept a bit but I just woke up.\" A warm hand made its way to my balls. She fondled me a bit before I realized I had been hard even before her foreplay. My cock was along her back, not between her thighs. She pulled away and grabbed my cock. I didn't expect her to do what she did next, but she guided me to her hole.\n\nShe left my cock at the entrance to her opening before going to her nightstand nearby. The familiar sound of a bottle of lube clicking open and shut was soon accompanied by the slick gooey sound being applied to my cock and Lindsay's pussy.\n\nWith a little bit more preparation we were soon ready. When I went to hold her waist I found a towel on the bedding below her. I smiled to myself knowing Lindsay expected to unload all over the bed. I eventually did go back to clutching her waist as she guided me to her hole again. Both of us were slick and ready for penetration.\n\nLindsay lined us up again and we both knew to press into each other. My head gently prodded her entrance. No surprise there was resistance. Though I would've thought that by now, having the fourth time we'd be doing this tonight, she'd be easier to enter, especially with the plug. But no, this was not the case.\n\nWe struggled for a bit, longer than usual I thought but we finally got our desired result. With a sharp gasp from Lindsay, I entered her. I held myself inside her, as usual, for her to adjust. She sounded grateful when she sighed with our pause.\n\nI caressed Lindsay's soft skin, she purred under my touches. I lightly kissed her neck, telling her how much I loved her. We were both in a sleepy daze so wasn't too surprised by her lack of involvement.\n\nOur togetherness eventually moved to a slow and sensual love making. She first started by pulling away and that gave me the signal to start. Like I said, it was slow and deliberate. I'm not really sure what compelled me to do it, but my free hand wandered down to her crotch. I first played with her golf-ball sized balls, rolling them in my palm, gently kneading them. She seemed to really like this and I continued this further until I felt she was ready for more.\n\nMy hand wandered up from her balls to her shaft. Lindsay seemed to know what I was about to do and grasped my hand with her lubed hand, giving me some lube in the process. It was enough and I grasped Lindsay's little girl. I felt her hand along with mine as we both masturbated her little girl at the same time. Our hands stayed together as they traveled up and down her cock. My hand was above hers so I was lucky enough to feel her bellend as we reached the top of her little girl. I was rewarded with a warm glob of precum the first time I reached the tip. I played with it, listening to Lindsay moan and shiver under my power.\n\nI played with her like this for who knows how long. I gently thrust myself inside her, taking my time when I stroked my cock inside her. My hand reciprocated my cock, trying to give her the maximum amount of pleasure. I knew I was because Lindsay's moans grew ever louder.\n\nI held her, my Lindsay, I didn't want to let go, Lindsay didn't seem to either. We held each other as our pace increased. We moaned to each other letting the other know how we were making the other feel.\n\nSometime later Lindsay let go of herself and let me do what I had wanted from the moment we started. It was me who was holding her little girl now, all alone. I was the one giving her every pleasure she was feeling now. In her pussy, her little girl, her boobs - with my free hand - and her neck, planting small kisses, telling her how much I loved her, how much I cared for her, how much I wanted to make her cum.\n\n\"Jay...\" Lindsay tiredly whispered.\n\n\"Yeah babygirl?\"\n\n\"You're gonna...\" she could barely make out that phrase.\n\n\"What am I gonna do baby?\"\n\n\"You're gonna...\" she repeated. Her breathing was sporadic; she was losing control of her body. \"Oh god... you're gonna make me cum...\"\n\n\"Am I sweetie? Are you gonna make big cum for me?\"\n\n\"Oh yeah, I'm gonna make big cum for you...\" she moaned to me.\n\nI responded by pounding her sweet little pussy. This light but erotic whispering had got me all worked up and I was getting close too.\n\n\"Faster Jay!\" she yell-whispered to me. I wasn't sure what she wanted faster, I was already reaming her pussy so figured her little girl needed more attention.\n\n\"Ooohhhh, fuck yes...\" she moaned instantly. I must've hit the spot.\n\nAnd did I ever hit the spot. Not five strokes later Lindsay kept moaning that she was cumming. Sure enough I felt her little girl swell and stiffen in my hand. It began to spasm and jets of hot girl goo spewed out. She kept sighing and cursing profanities to me. I loved feeling the slick gooey cum along my hand as I worked her to complete satisfaction. I had no idea how much came out, but I slowed my hand as the last few spurts dribbled out of her.\n\nIt was my turn now and I gingerly let go of her girl and attached it to her hip. The slimy cum stickily caused her to shudder as it touched her well-rounded hip. I couldn't last much longer and moaned to her my own satisfaction.\n\n\"Yes cum in me Jay!\" she breathlessly moaned.\n\n\"I will,\" I breathlessly grunted, \"Here it comes!!\"\n\nI groaned as my cock couldn't take it any longer. I plowed her little hole, slowing my thrusts as my orgasm took over. I came and came, dumping my hot load inside her bowels.\n\n\"Fuck yes!\" sighed Lindsay, \"I love feeling your hot cum inside me!\"\n\n\"I know babygirl,\" I said after just finishing my climax. I really couldn't get used to the great feeling of my cum spilling out between her love hole and my cock. I didn't know why I liked it so much, but I did. The warm feeling surrounding my cock just felt so wonderful!\n\nWe stayed connected until my cock softened enough that it more or less fell out. Her hole closed along with my softening cock. I pulled away and gently grazed her hole, her pussy.\n\n\"Mmmm, you just know how to make a girl feel good!\" she sighed.\n\n\"What can I say babygirl, I love making you feel good!\"\n\n\"I love making you feel good too! My pussy loves it so much when you cum inside her!\" she playfully giggled.\n\nI moaned my own approval and gently rested on Lindsay. We snuggled for a bit longer before she spoke up.\n\n\"Are you awake Jay?\"\n\n\"Yeah babygirl, what's up?\"\n\n\"I love you!\" she whispered with a smile.\n\n\"I love you too Lindsay!\"\n\nWe kissed, short, simple, but enough to show each other how much we cared for each other. We snuggled and cuddled in the late, late night.\n\nBefore we drifted off to sleep again Lindsay spoke up, \"Are you awake Jay?\"\n\n\"Yeah sweetie...\"\n\n\"I like it when you call me babygirl,\" she tiredly said to me.\n\n\"Really?\"\n\n\"Yeah, it makes me feel... special.\" I could sense her smile after saying 'special.'\n\n\"I'm glad it does Lindsay, because you definitely are!\"\n\n\"Thank you Jay, you're special to me too!\" I kissed her neck signifying I understood. We soon fell asleep again.\n\n-\n\nI woke to that strange sensation again, it's a sensation I could really get used to! I knew where I was this time and didn't panic, not that I had earlier. We had slept the entire night in the same position, spooning. I gently got out of bed with a smile on my face. I had morning wood, as I'm sure Lindsay did as well, but let her sleep.\n\nI left to do my business and watch Lindsay sleep for a bit. I hope it didn't sound creepy or weird but I watched her sleep for a few moments, just enjoying how peaceful she looked. I covered her after I went to the bathroom so only saw her head and a bit of her shoulder. I left - after dressing - with a smile to grab some breakfast, I was hungry. All that exercise last night worked up my appetite.\n\nI made some coffee, omelets, and some toast (mind you, I hate cooking, but I thought it would be nice for my girlfriend). I set the food on a hotel tray and brought it up to her room. Setting it down, I gently ushered my Lindsay awake.\n\n\"Hey sweetie, wake up honey...\" I continued to shake her gently. She eventually stirred and yawned. I was glad to see a smile appear on her face when she saw me.\n\n\"Hey stud,\" she giggled, \"Good morning!\"\n\n\"Good morning yourself babygirl, I made you some breakfast.\"\n\n\"Awe you did?! How sweet!\" that got Lindsay's attention. She almost shot straight up from her lying down position. The obvious condition of her physical state showed through the sheets. There was a large tent under Lindsay. She noticed and looked down. She tried covering herself, blushing profusely, \"maybe I should take care of this!\" she giggled.\n\n\"Alright sweetie, go ahead, don't be too long!\"\n\nLindsay giggled and jumped out of bed, completely naked, and scurried off to the toilet. She did her business and plopped back on her bed, still naked. I gave her the hotel tray and she hungrily ate what I had made her, including almost downing the coffee.\n\n\"That was good!\" she said cheerfully.\n\n\"Yeah? Well I'm glad you enjoyed my cooking,\" I smiled, appreciating the praise, despite what I may have thought about my own cooking.\n\n\"Um...\" she started, looking down in her lap.\n\n\"What's wrong sweetie?\"\n\nThere was a pause. I was starting to get used to her pauses, it meant whatever she was about to say was important.\n\n\"Did you wish I had a vagina?\" she finally asked out of left field.\n\nI took a moment to think, I knew a question like this would come up some time. \"Honestly Lindsay, yes and no. Yes because I want you to feel comfortable as a girl, never having to worry about exposing yourself, feeling comfortable in your own skin, and so on. But no because you don't need that in order to reaffirm that you are a girl no matter what. Because you ARE a girl. And as far as sex goes, I like playing with your little girl, it's getting really fun, plus I know what I'm doing! I love you for who you are Lindsay, it doesn't matter to me that you're a little special or different down there. But whatever decision you may choose, I will support it one hundred percent, no questions asked.\"\n\nI was a bit surprised when Lindsay didn't answer, she barely reacted. She hugged me though, as she understood my answer. Lindsay eventually got dressed; we played around a bit later that morning as well. We gave each other hand jobs before I left for home. I had some errands and chores to do while Lindsay had some things to do as well.\n\nChapter 21\n\nGraduation came and went. Lindsay and I celebrated in our own private way, wink-wink. I got a job soon after prom; I had been searching for a while and had a few connections. The job was actually pretty cool. I had been around cars much of my young life, and since I was going to college for engineering, it made sense to do something along my specialization. I got a job at a local automotive maintenance shop. It was pretty cool, I got shown the ropes right after school was out.\n\nLindsay on the other hand took a couple classes to go along her fashion design major. She had a lot of free time during the summer, I didn't but we saw each other plenty. I had weekends off and late afternoons. We had sex often, I'm pretty sure it was everyday, sometimes more, depending how much Lindsay wanted it.\n\nAbout a month into summer break before college my birthday was coming up. Lindsay knew I didn't want her to do anything special. In the past I never really celebrated my birthday, other than when I was a child, now it seemed kind of silly to me.\n\nThe day came around and Lindsay made some plans, I told her not to... but I appreciated what she had done. We waited until the weekend since my birthday happened to fall on a Wednesday this year. Friday night we went out, moderately fancy. We had some hamburgers at the best place nearby, they were cheap but amazing! Then she asked me to take us to our old spot when we used to date earlier. Remember the secluded area out by the hill overlooking the valley? She wanted me to go there, and so I did.\n\nI received the best blowjob from her to date inside the car. She took as much of me as she could and finished me off. I rarely came in her mouth; in fact she rarely gave me blowjobs. I really didn't mind, if she didn't like to give them I wasn't going to make her do them. Most of the time she'd give me a blowjob just to lube me up. She seemed really into it though that night.\n\nI finished in her mouth, unloading reams of sperm inside her warm wet mouth. She eagerly swallowed what I gave her. She smiled as she finished what I had given her, \"How was that?\" she asked.\n\n\"That was amazing baby!\" I smiled down at her.\n\n\"I'm glad you enjoyed it!\" she giggled, \"Don't get too comfortable yet though. There's plenty more fun to come!\" Little did I know what she meant!\n\nLater that night, still in the car we had sex twice more. The first time she sat in my lap, her little girl just inches from my face as she pumped up and down on my cock. She spewed her load all over me as I spewed her insides.\n\nThe second session, still in the car mind you, she wanted doggy-style. We got in the back seat and she got on all fours. I plowed her; unfortunately she didn't cum that way. I wanted her to cum so I jacked her off after I pulled out. She sat in my lap as I jerked her off to climax, again spewing all over the place.\n\nThe night got to be quite late so I drove her back to her place. It was so late her mother was already asleep. Lindsay invited me to her room and I had a really hard time resisting.\n\nI just couldn't resist. After prom night I had dreamed of sleeping with her again and this was my chance again. I took it and we quietly climbed the stairs to her room. Once in, she could not keep from giggling at all. We quickly climbed under the covers. We both didn't undress completely, come on, I had some decency! I was in my usual t-shirt and boxer shorts. Lindsay opted to go in her cute little panties and a tank top.\n\nI snuggled up behind Lindsay, holding her, our warm bodies felt nice. There wasn't much I could do about my raging hardon. But Lindsay seemed to have an idea. She let me free and parted her panties. I parted the front of her panties too, she was already hard too!\n\nWe played with each others' cocks. Soon I was inside her slowly sawing in and out of her. I kept it slow so the bed wouldn't creak and we wouldn't make too much noise. I was able to make Lindsay cum some time later, but I wasn't getting enough stimulation and didn't cum in her. But being the good girlfriend, she didn't let me go blue ballin'. She again, went down on me and gave me yet another blowjob. She still couldn't fit my entire cock in her mouth, but her velvety lips were a great consolation.\n\nAgain I finished in her mouth and she swallowed happily. \"Okay baby, I'm tired let's go to bed!\" she smiled.\n\nI smiled back, \"Yeah me too, I love you Lindsay, that was a great birthday!\"\n\n\"Thanks! I'm glad you enjoyed it!\" We kissed and fell asleep in each others' arms soon after.\n\n-\n\nThe rest of summer had its bumps. We had a fight, I would say our first, but we worked it out. I was actually rather surprised by it, because we'd gotten together so well in the past. But I guess since we had more time together it brought on new sides of ourselves that we hadn't really seen.\n\nI continued to work, saving money, and getting ready for college. Lindsay took her classes and also got ready for college. We spent plenty of alone time with each other, making sure we were both happy. And a new realization occurred to me...\n\nChapter 22\n\nSummer was coming to a close. I was glad that our classes didn't start till later in the school year as high school. We were on a quarterly schedule which meant we didn't start until late September. Now we had nearly known each other for a year now, not as a couple, but as friends. I had been wondering exactly when Lindsay's birthday was, but as the summer wore on she told me, though I already vaguely knew when we happened to talk about it in passing. I think she just wanted to remind me. How could I forget though?\n\nHer birthday finally arrived; it was in the middle of the week so I planned something special for Friday night. Up until now, we'd have sex whenever and wherever there was some privacy; at her place or in my car; anywhere from handjobs to blowjobs to actual sex. I had yet to do much with her penis other than handjobs. I did enjoy doing that for her, but I really felt I was finally over the hurdle, actually I felt I was over the hurdle a little while ago, but I wanted to show my gratitude on a special occasion. I did the usual stuff, bought her flowers and candy which I gave to her after work. She seemed happy because she knew I didn't really celebrate anything, even my own birthday (I know we celebrated it before, but if I were on my own, I wouldn't have done anything). To be honest, I didn't think she was expecting much out of me on her birthday; let alone what I'd do later in the evening.\n\nAfter work I swung by Lindsay's. We got all dressed up for the occasion and we went to a fancy-ish restaurant, had dinner and dessert. We both knew where the evening was heading, since it was the weekend and because of the romantic occasion, little did she know what was to come though!\n\nAnyways, our meal came to a close and we were in my parents' car. I drove us up to our spot, the one that's secluded overlooking a barren grassy valley (now it was my turn!), and set the car into park. Turning off the lights it was nearly pitch-black out save for the interior lamp which was dim at best.\n\nI turned to look at Lindsay, she did the same. \"I love you babe, with all my heart,\" I said.\n\n\"Me too,\" she smiled.\n\n\"And I want to show you how much I love you.\"\n\n\"But I know how much you love me,\" she said coyly.\n\n\"I know you know, but I feel like I'm not being the best boyfriend I possibly can.\"\n\n\"What do you mean?\" she asked. I didn't say anything; instead I went in for a kiss. I held her head with my hand as we made out. We kissed for a few moments before she pushed me away, \"What do you mean?\" she asked again. Again I didn't say anything, but I couldn't keep a straight face either. This brought a smile to Lindsay and I think she had an idea as to what I was about to do. We kissed again and I started to feel her up.\n\nGod I loved playing with her breasts. I took one in my hand and fondled her breasts. Through her dress, and I assumed bra, I flicked her nipple. She moaned into my mouth and that encouraged me to continue my little treatment. We kissed and kissed until she broke away just for a moment to unclasp her dress top. It fell open and her light-purple lace bra was exposed. She wasted little time and unclasped her bra as well, letting that fall in her lap. I eagerly suckled on her breasts, especially her nipples, and really enjoyed hearing Lindsay moan and groan under my ministrations.\n\nI playfully bit her nipple and she almost yelped as I did it. She didn't ask me to stop so I kept on lightly biting her there, eventually moving to flicking her with my tongue and then suckling her again. She kept moaning and moaning and I just happened to glance down into her lap and saw a bulge move inside her dress. I placed my free hand on her bulge and she gasped above me. I gently rubbed her as I continued my foreplay.\n\nHaving very little luck on my part, though, I slid my free hand down to the hem of her dress and hiked it up to reveal her panties. I looked down and saw that she was wearing a matching light-purple bra and panty set. She looked amazing in them despite still being partly dressed.",
        "Now unobstructed by her dress, my free hand cupped her large bulge and gently stroked the outside of her panties. She moaned more approvingly to my touch and I could barely contain myself from ripping her panties off.\n\nI broke away from my teasing to see Lindsay resting her head back on the head support with her eyes closed. Feeling me leave, she opened her eyes and smiled, \"Why'd you stop baby?\"\n\n\"I just had to make sure I wasn't dreaming,\" I started, \"you really are the most beautiful girl I've ever seen.\"\n\nShe smiled and blushed, \"Thanks Jay. You're not so bad yourself you know!\" It was my turn to blush now; I meekly smiled and leaned back into her perfect cleavage. I immediately suckled on her nipples again and kneading her fleshy mounds of woman-ness, she moaned approvingly.\n\nI knew most guys didn't seem to care for foreplay (especially guys my own age) but because I was still so new to it I loved it! I played with her boobs, making sure to give equal care to each of her nipples, and gently massaged her little girl.\n\nI think Lindsay was getting too much teasing and needed some release because I felt her hands brush past my busy face on their way down to her panties. Seeing as we'd always had sex basically naked, except on a few occasions she'd keep her top on (which I thought was hot), I was shocked to feel even more aroused when she adjusted her panties to release her penis. To the side was her light-purple lace panties bunched up and in front was her long little girl and massive balls nestling in her seat.\n\nI felt the seat shift when Lindsay adjusted the seatback to let her relax more. Once her little girl was released Lindsay put a hand on the back of my hungry head and she guided me back and forth between her breasts, 'she must be really loving this' I thought. My free hand became busy as I grasped Lindsay's long erection. I felt the warmth of her and some sticky goo, her precum. I stroked her, up and down the entire 12 inches of her wonderful shaft. She moaned, almost crying from the pleasure.\n\nFeeling her hard erection, I couldn't wait any longer and left her breasts. I couldn't believe I was really going to do this... I was going to blow my girlfriend's penis. As I made my way down to Lindsay's little girl I heard her moan, I knew she was watching me descend to her womanhood. I didn't have to go too far as her cock stood straight up for me. Its pink mushroom head did look enticing. It was completely shiny with her precum and I just had to kiss the head. She gasped when I kissed the head of her long little girl for the first time. I placed a hand at the base of her as my lips played with her smooth head. I released my kiss by opening wider and enveloping my mouth around her girl. She gasped again and this time I did hear her cry. I knew she was crying in joy though, \"Oh god Jay! You don't have too!\" she sobbed.\n\nMy mouth descended as far as I could go. Her little girl hit the back of my throat and my gag reflex kicked in. I fought hard to stay down and eventually won. I was maybe halfway down her long womanhood and knew I couldn't go too much further. I just stayed there though feeling the odd sensation of this warm piece of girl meat in my mouth. Its warm spongy yet hard sensation rather fulfilling, I might say.\n\nI rested for a little while, giving my mouth time to adjust to her rather small girth. I was mostly just adjusting to her length, when I felt her hand on the back of my head. I took this as a signal to start; and so I did. As I pulled my mouth up I sucked hard to try and make a sealed suction. I heard Lindsay moaning very approvingly at my efforts and kept that in the back of my mind for future blowjobs. I reached the tip of her penis and made another descent down. I kept a moderately slow pace, taking a few seconds going both up and down. I felt pressure on my head as I went down again and took that to go faster and so I did. I used my hand to jerk her in the opposite direction of my sucking and she moaned again. I felt a jolt on the seat and assumed she threw her head back in agonizing joy.\n\n\"Oh god! Keep doing that!!\" she moaned, with another hint of crying. I picked up my pace and was soon gliding along on her womanhood. My head bobbed up and down along while my hand jerked her. Lindsay's moans and groans soon turned to whimpers and cries and I knew she was close.\n\n\"Oh fuck!!\" I heard her say, \"Shit!! Shit!! SHIT!! Ooohhh!! Fuck yes!!\" Her body spasmed. \"Oh god! I'm gonna cum!!\" She seemed to almost pause for a second, but then she realized what I was willing to do. In her seat as her little girl became harder than ever, I felt her first orgasm in my mouth. The salty sweet taste filled my mouth while she exploded inside of me and I kept sucking and sucking making sure nothing left my sealed lips. The loads came heavy but slow. I tried counting the shots but gave up as I enjoyed what I was doing for her. I guessed that I stayed there for a good half minute before her little girl eventually stopped pulsing.\n\nI made sure I drank every drop of her cum. After her orgasm I stayed just a while longer until her little girl started to shrink. I let her pop out of me and looked up to Lindsay. Her eyes were red from crying and she looked happy as can be despite her partially ruined light makeup.\n\nShe was the first to speak up, \"Oh my god Jay! I love you sssooooo much! You're the best boyfriend a girl could have!\" She began sobbing again and I hugged her and let her cry some more.\n\nShe must have cried for a good five minutes before she finally calmed down again. \"I know babe,\" I finally answered - not trying to sound conceded, \"As I said when we first confessed our love, I'd love you no matter what. I want to make you the happiest girl I can, and today I did that by moving a step closer.\"\n\n\"Oh Jay!!\" she almost began tearing up again.\n\n\"Sshh, it's alright babygirl, I'm here,\" I comforted her.\n\nWe cuddled again for a little while before we broke away. Before pulling away we kissed. It was a light kiss but still sensual. \"Thank you for the birthday present!\" she sobbed again. I smiled and kissed her again. \"You really didn't have to do any of that though. I was especially surprised when you didn't pull away when I was so close,\" she stated, almost worried.\n\n\"Well, I've tasted you before, though not that amount,\" we both giggled, \"and I enjoyed it then. So I thought why wouldn't I enjoy it now? Plus, feeling you cum in my mouth was really hot! I loved feeling your little girl spasm inside my mouth... and then the hot jets of girl cum, was a great treat too!\"\n\nLindsay blushed profusely, out of embarrassment, I think, because it wasn't a natural way for a girl to cum. But here I was enjoying it. And I truly was.\n\nWe talked in the car for a long while, more about just how things were going in our lives and possible future plans, maybe vacations here and there, and college. It was starting to get cold in the summer night, despite having the heater still on, and we decided to call it a night. Lindsay offered to relieve me but I declined, defending that this was her night. She pushed a bit at first but then didn't pursue it any further when I kept declining so I took her home.\n\nI was happy with what I had done, I finally gave her something I didn't think I could ever do, but I did. And I enjoyed it, every minute of it! Feeling her cum in my mouth was surprisingly arousing and loving. She was worried about me, by announcing she was about to cum, but I wanted her to cum in my mouth. I wanted to show her how much I've come to accept her."
    ],
    "authorname": "f1dude_lotus",
    "tags": [
        "18 year old",
        "transsexual",
        "transgender",
        "t-girl",
        "girlfriend",
        "romance"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/my-one-true-love-ch-08"
}
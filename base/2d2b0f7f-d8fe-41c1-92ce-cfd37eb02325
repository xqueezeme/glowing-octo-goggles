{
    "title": "Couples Massage",
    "pages": [
        "\"Is this your first couples massage?\"\n\n\"First massage ever, actually.\"\n\nNervous wasn't the right word. I was excited to finally have a professional work out a kink that had been hampering me for the last two months. The fact my wife would be lying next to me partially nude experiencing a similar level of satisfaction also made the whole ordeal that much more exhilarating.\n\n\"You as well?\" The second masseuse, a short Asian women with thick thighs and the name Diane stenciled on her scrub-like uniform asked Michelle.\n\n\"First couples, but I've had a few massages before.\"\n\n\"So you know the drill,\" the first masseuse said matter-of-factly. Her name, Selena, was etched onto her matching gray uniform in blue threading. The big difference being hers sat atop a top-notch rack. It was par for the course. Selena was a Chilean bombshell. \"We'll step outside, you guys can both strip down to your underwear, climb on the table and cover up with the towels. You can put your stuff on there as well.\"\n\nSelena gestured to a white linen towel folder neatly on a table in the corner.\n\n\"Can I keep the shorts on?\" I asked.\n\nWithout hesitation Selena reached for my leg and felt the fabric between her fingers. My stomach fluttered.\n\n\"Normally I'd say yes but these are a little thicker than we like. Plus,\" she consulted the clipboard she'd been holding against her hip. \"You wrote that your hips are tight.\"\n\n\"And my neck.\" I interjected.\n\n\"Right. I still say lose the shorts.\"\n\nAnd with that, Diane and Selena smiled and turned for the door. I struggled to not gawk at Selena's taut ass as it disappeared into the lobby.\n\n\"Okay, slight issue,\" I turned to Michelle. She'd already slid her shirt over her head and was maneuvering her leggings over her leopard print thong and down her toned thighs.\n\n\"I'm not wearing underwear.\"\n\n\"Why?\"\n\n\"I didn't know I needed to!\"\n\n\"How is that possible?\"\n\n\"You said I just needed to dress comfy.\"\n\n\"Not that comfy.\"\n\n\"Well, that's helpful now. Maybe I can run back to the room.\"\n\n\"No way,\" Michelle ditched her bra. The whiteness of her small, pert breasts juxtaposed against her tanned chest made them appear luminous in the flickering yellow candlelight. \"You aren't cutting into my massage time. We paid a lot of money for the full hour. I'm getting my full hour. Just take your shorts off and don't be a weirdo. You'll be covered up.\"\n\n\"A weirdo?\"\n\n\"Yeah,\" she climbed onto the table and laid face down. \"Don't get a boner or anything and you'll be fine. They're professionals.\"\n\nThat would've been pretty straightforward advice had my wife not been inadvertently edging me for the last three days. A hand job in the car ride to the B&amp;B cut short by a closed road and bumper-to bumper traffic. A blowjob in the room paused and abandoned thanks to maintenance knocking on the door to fix a leaky bathtub spigot. And the cherry, fucking her in the shower until the dinner bell rang magnanimously signaling both our meal was ready and an ultimate cock block. Michelle claimed there was no time for me to finish.\n\nShe already had.\n\nSo, armed with a fully loaded cock, I dropped my shorts to my ankles and tossed them onto the table. Michelle's face was already buried in the horseshoe-shaped pillow so I climbed unceremoniously onto the table face down and covered myself up.\n\nSelena and Diane entered almost immediately. I could only see the white Nikes of Selena as she stopped next to my shoulder and asked me softly if I wanted peppermint or lavender oil.\n\n\"Let's do peppermint,\" I said.\n\n\"Good choice. And I'm actually going to start with your hips so go ahead and roll over.\"\n\nI played it cool and didn't hesitate, but cautiously kept the towel close. The move enabled me to position my dick flat against my stomach as opposed to between my legs; the chances of pitching a full-blown teepee seemed too high to risk it.\n\nSelena slid a warm towel over my eyes. The sounds of bottles clicking open and hands rubbing together blended with the soothing strums of a harp or a cello on an iPod somewhere unseen. It was very relaxing.\n\nSelena folded the towel up slightly, exposing my left thigh. Her hands then latched on, her thumbs kneading up before fanning out and running back down again.\n\nMy cock twitched subtlety and I knew it was going to be a long hour.\n\nShe continued on unaware. The aroma of the lotion filled my nose but was unable to fully jar my mind from the fact a beautiful woman was six inches away from mine. By the time she switched to my other leg, I was completely engorged and praying the towel continued to do its job.\n\nHer hands ran up my thigh one last time. I sighed out of sheer relief more than anything.\n\nThat's when the towel folded up further.\n\nI gulped and tried to reposition. I glanced under the mask and saw her back to me, squeezing on more oil. I reached from under the towel and swiped at my dick, skidding it across my stomach to the other side.\n\nSelena turned back and rubbed her hands together. But before she planted them on my exposed hip flexor, she folded the towel back down and reached over me.\n\nShe peeled back the towel slightly and began working her fingers into my hip. With every press of her fingers, my dick slid further over to the side, still throbbing and desperate for attention until it found it's way into the game.\n\nThe palm of Selena's hand touched my cock.\n\nThen again.\n\nAnd again.\n\nThen no more.\n\nI peered down under the mask.\n\nShe'd stopped massaging and was circling the table. When she reached the other side she lifted the towel, as if checking a corpse in the morgue for identification.\n\n\"Wow.\"\n\nNobody said a word. I could barely see Selena.\n\n\"Diane,\" she said firmly.\n\n\"Is that?\"\n\n\"Yep. Alright, guys, I'm afraid we're going to have to wrap this up.\"\n\n\"What?\" Michelle said groggily, still entranced in a state of deep relaxation. \"Why?\"\n\n\"That's why.\" Selena pulled the towel off completely, leaving me naked and rock hard. Michelle craned her neck to look over.\n\n\"Goddamnit, Jack. Are you kidding me?\"\n\n\"I can't help it!\" I tried to reason but nobody bought it.\n\n\"Unfortunately, it's our policy.\"\n\n\"Can't you just kick him out?\" Michelle begged.\n\n\"Well. No. It's a couples massage so you guys are sort of a package deal.\"\n\n\"There is one thing.\" Diane interjected.\n\n\"Anything.\" Michelle answered.\n\n\"What do you think, Selena?\"\n\n\"I don't know. You think?\"\n\n\"They might be down.\"\n\n\"We are down,\" Michelle affirmed.\n\n\"I guess we can try.\"\n\n\"Try what?\" I asked.\n\n\"Ask her,\" Selena said to Diane.\n\nDiane leaned over and whispered something into Michelle's ear.\n\n\"Yes, absolutely.\"\n\n\"Really?\n\n\"100 percent. He brought it on himself.\"\n\n\"Brought what on myself?\"\n\nAgain nobody said anything.\n\n\"Michelle?\"\n\n\"She's going to fuck you.\"\n\n\"What?\" I asked after a beat.\n\n\"Selena is going to fuck you while I get my massage.\"\n\n\"No way.\"\n\n\"Yes way. Or you won't get to fuck me for the rest of this year let alone this trip. Besides, you've been asking me to do it for months.\"\n\n\"Michelle! I was asking you...\"\n\n\"Please. I saw you checking out her ass.\"\n\n\"Really?\" Selena asked with a raised brow.\n\n\"Oh yeah,\" Michelle said. \"Fair is fair, Jack.\"\n\n\"I don't believe this.\"\n\n\"Believe it.\" Michelle responded. She'd resumed her position facedown and Diane was again rubbing the oils into her back.\n\n\"I don't see the problem,\" Selena said. \"All this talk, your penis is still very erect.\"\n\nI glanced down and sure enough, my cock was damn near hovering above my body.\n\n\"There you have it.\" Michelle said. \"Enjoy her cock and show her that waxed asshole you keep bragging about.\"\n\n\"Waxed asshole?!\" Selena and Diane said in unison, a slight laugh permeating.\n\n\"Damn, you really do want this.\" Diane said.\n\n\"I'd say so,\" Selena bent over and was examining me. She pressed two fingers against my taint firmly then sensually curled them down and against my asshole.\n\nI let out a soft moan.\n\n\"You better be quiet over there too,\" Michelle warned. \"I don't want to hear you screaming to be fucked harder.\"\n\n\"I won't.\"\n\n\"Or cumming.\n\n\"I won't.\"\n\n\"We'll see about that.\"\n\nI looked up at Selena. Her eyes were trained on my body while her hands dragged down my inner thighs. My cock leapt.\n\n\"Yeah, I think you're in trouble,\" Michelle said as she repositioned herself onto her stomach. Diane proceeded with the massage as if I wasn't there let alone about to be fucked by her partner.\n\n\"Roll over,\" Selena said softly.\n\n\"Onto my stomach?\"\n\n\"Yes. Cock between your legs.\"\n\n\"I'm not sure it will,\" I replied, referring to just how hard I was.\n\nSelena grabbed it. Her strong hands enveloping me and simultaneously rotating me. I did as I was directed and rolled onto my stomach while she angled my cock downwards and against the cushion of the table onto a plush towel. The angle forced me to raise my hips, leaving my butt elevated and begging. A drizzle of oil followed by the firm massaging of Selena's hands pressed against my ass. She peeled my ass cheeks back and worked her thumbs ever so gradually towards my asshole.\n\nThen around it.\n\nSmooth and undisturbed. Firm yet sensual. An overwhelming cloud of relaxation enveloped me.\n\nThen a finger poked inside me and I let out all of the air I had. It was her index finger and while it started shallow and traced the entrance it soon dipped further in. Her left hand ran up my back, the palm pressing and simultaneously relieving excess tension along my spine while with her other hand she mined the deepest recesses of my darkest fantasies and exposed the true rush of fulfilled eroticism. The finger beckoned me towards something. Something warm. Come hither it said. I was helpless to defy it. I would've walked to the edges of the earth for it. The warmth. A burrowing warmth that transitioned to all encompassing.\n\nThe entrance of a second finger followed by its enticement to follow that warmth caused our first audible moan of the ordeal--soft with a quiver and a twitch of my leg. Selena's left hand gripped the top of my shoulder and held as the fingers of her other hand fluttered inside me, rubbing my prostate mercilessly. She held me in place, leveraged completely by her hands in concert as the warmth overtook me and a silent gasp escaped my mouth.\n\nThe cum was uncontrollable.\n\nIt seeped from my cock effortlessly like a water hose with no pressure.\n\nHer fingers vacated me and then her hand peeled from my neck. I lay still and spent. The thrill of being fucked ran through my mind like a deer.\n\nThe next feeling was one of slight pressure.\n\nThen insertion.\n\nSelena again braced me with her left hand against the small of my back but this time a ball of some sort flirted with my asshole, fought off by my virgin ass' vice-like clamp briefly and valiantly but the consistent and methodical maneuvering of Selena sent the bulb shooting inside me.\n\nA shutter and twitch rippled through my body. I gasped and exhaled slowly as the bulb fixed itself inside me and settled.\n\nThen nothing.\n\nSelena's hands slid across my skin and then away and I heard nothing but the ethereal strokes of a harp and the soft patter of feet while the freshly inserted plug stretched me ever so gradually. All other sounds were secondary. The clicking of bottles. A rustling and a fastening of something unseen.\n\nThen again the silence.\n\nI stared down at the floor through the horseshoe and repositioned my body slightly. It felt as if a puddle had formed between my thighs but I dared not try and reposition my cock. I couldn't even tell if I was still erect.\n\nTwo white Nikes padded into my view. They stopped beside me but Selena didn't touch me. After what felt like 5 minutes I raised my head slightly from the horseshoe to see what she was doing.\n\nThe answer was immediate.\n\nInches from my face hovered a beige strap-on that, had I not seen it attached via a harness to a beautiful women, I would've thought was a real cock. It had a series of gaudy veins running up its immense length, a pronounced head and at the base, a set of firm testicles. The dildo glistened with lube as Selena stroked it deliberately. There was no knowing how big it was. My only frame of reference was Selena's hands: they struggled to wrap completely around it and was long enough to fit a third hand.\n\nThe harness, pink with gold colored clasps, hugged her clothed hips high. The tension in the straps synched her ass perfectly and in that moment I realized I was rock hard.\n\nAnd my asshole was puckering desperately.\n\nI glanced up at Selena's face. She mouthed you're mine and I instinctively buried my head into the horseshoe and awaited my fate.\n\nThe feet disappeared.\n\nThen a tug.\n\nA firm pull at the plug sent my heart racing and my cock to twitch. The plug barely moved. My ass gripped it like a vice.\n\nSelena utilized its sturdiness.\n\nLike a pommel she grabbed onto the protruding handle and hoisted herself up onto the table, her legs straddling my thighs.\n\nHer cock dangled tantalizingly above my ass. She leaned over me, bringing her hands firmly against my back and pressing up my spine to my neck, her strap-on gliding against my slick skin. Her hands slid back down and into the meat of my ass before circling beneath my cheek and clutching onto the plug.\n\nShe pulled.\n\nI quivered as the plug eked its way out despite my best efforts to keep it engulfed inside me. It eclipsed my hole but instead of sliding out completely, Selena held it in place, the plug stretching me further into a frenzy.\n\nWith a twist it was out and I sighed deeply.\n\nShe continued to run her hands up my back, this time making a concerted effort to slide her strap-on between my butt cheeks like a credit card reader. Slowly and sensually her cock teased me. Each pass I never knew if it would be the one when her cock titled down and penetrated me.\n\nShe established a rhythm amidst a soothing back massage but just as I joined in the cadence it happened.\n\nThe angle of her hips shifted and her cock slanted down and began its descent.\n\nA brief bit of resistance gave way to a euphoric burst as her strap-on entered me.\n\nIt stole my breath.\n\nAll of it.\n\nMy face pressed against the horseshoe while my right leg bent up until it touched her back. She wasted no time introducing me to her testicles as she slowly stuffed the length of her cock inside me, the balls pressing flush against my ass.\n\nI stifled a moan but it was growing impossible to mask such pleasure. Selena pulled back and began a gradual pulse of fucking my ass while her hands pressed firmly against the middle of my back. She thrust her hips sublimely, alternating from driving down pumps to long thrusts that ran parallel to my spine. She was blowing my back out like I dreamed of fucking Michelle. Dominant and powerful and sending me into a stupor. Cum seeped from my cock lazily, as if it were a faucet left to drip.\n\nI grasped desperately for the sheet of the massage table but Selena wouldn't allow it. She grabbed me by the wrists and leveraged her way deeper. With her cock stuffed completely inside me I could not contain my pleasure any longer.\n\n\"Oh fuck,\" I whimpered and transitioned into an orgasmic moan that sent my body into a tremble and the submerged strap-on to rumble around.\n\n\"It's about time.\"\n\nMichelle's voice sounded distant.\n\n\"I've never seen someone take so much dick so quietly,\" Diane added.\n\nI took a deep breath before raising my head slightly and twisting to the sounds. They both sat on the edge of their massage table, legs dangling. Michelle had a towel wrapped around her chest and a grin like a Cheshire cat.\n\n\"He's been a champ,\" Selena confirmed. She was still balls-deep in my ass but she now massaged my forearms for her leverage.\n\n\"And that was the first time he came?\" Michelle asked.\n\n\"Ohh no,\" Selena replied. \"He came almost instantly.\"\n\n\"Really?\"\n\n\"Yep. Instant and often is how I'd describe it. There's a lake between his legs right now.\"\n\nI felt her twist to look and the strap-on curled with her, sending me into another slight twitch.\n\n\"And there's a little more.\"\n\n\"My god!\" Michelle shrieked. \"You look like you're way in there.\"\n\n\"You could say that.\"\n\nSelena eased out of me slowly, purely for the crowd's enjoyment.\n\nIt did not disappoint.\n\n\"Holy fuck!\"\n\n\"You went with the Mr. Hankey.\" Diane sounded impressed.\n\nFor the first time in what felt like an eternity Selena's cock completely vacated my ass.\n\nI moaned uncontrollably the entire way out. Once out, she slapped it down against my ass and left it protruding from my cheeks like a Dodger dog.\n\n\"How big is that thing?\" Michelle could hardly hide her interest.\n\n\"Nine inches.\"\n\n\"Damn. You're a champ, Jack.\"\n\nI raised my arm to give her an okay sign but even that required too much effort.\n\n\"I'd say.\" Diane said. \"Most guys can't handle that type of girth.\"\n\n\"I'll be honest, I'm kind of bummed I missed it.\"\n\n\"We've got some time before our next appointment. You want to see him take more?\"\n\n\"What do you think, Jack? Can you handle a little more for me?\"\n\nHer smile was both devious and affectionate.\n\n\"I think so.\"\n\n\"He's a champ!\" Diane cheered.\n\nA bottle clicked and the cool sensation of more lube rained down onto my ass. Selena used it to both lubricate my asshole as well as her member by gliding it between my cheeks underneath her palm.\n\nThen with a slight kink in her angled thrusting she skewered me once again, the strap-on diving back inside me with virtually no resistance yet still sending shockwaves down to my toes and fingers. I gasped at her return.\n\n\"That's it, Jack.\"\n\nI turned my head to face Michelle.\n\n\"Take that cock.\" She continued.\n\nHer command was like a green light to not just receive this fucking but to embrace it.\n\nShe wanted to see me take it.\n\nShe wanted to see me writhe.\n\nShe wanted to see me enjoy it.\n\n\"Ohhhhhhh,\" I expelled a moan that had been dormant for the duration of my massage.\n\n\"There he goes,\" Diane said.\n\nWith no need for restraint, I gave in to the moment and abandoned all discretion. So too did Selena. My moans and shrieks of unfiltered pleasure filled the room. Whereas everything prior had been slow and ponderous, now all pretext of sensuality was dropped. The masseuse's hands braced my lower back, allowing for her to volley quick and shallow thrusts, the head of her massive strap-on just barely inside me. Her new form damn near triggered an orgasmic rush.\n\n\"That's it,\" Selena said. \"You like this dick?\"\n\n\"Yeesss.\"\n\n\"Tell your wife.\"\n\nI trembled under her.\n\n\"Tell your wife you like this dick.\"\n\n\"Ohhh it feels so good,\" I gasped.\n\n\"Say it.\"\n\n\"Ohhh, Chelle, this dick feels so good.\"\n\nI reached back and clasped onto my ass, spreading myself further.\n\n\"Ohh fuck,\" I continued on, dangerously close to the edge of my sanity.\n\n\"Fuck me.\"\n\n\"You want your wife to fuck you like this?\"\n\n\"Ohh yeahhh,\"\n\n\"Tell her how bad you want her cock inside your tight ass.\"\n\n\"Chelle, fuck me.\"\n\n\"You can do better than that.\"\n\n\"Ohhh fuck,\" I could barely think. \"I want you to fuck me. I need you inside me. I want you.... I need to... I need to... I need... ohhhhhhhhhhh.\"\n\nMy fingers dug in as my ass clenched. Her strap-on had been simply stroking my prostate and now the cum that poured from my cock came uncontrollably. Bursts and pumps of semen that sent my legs into a convulsion and an elongated moan to escape my mouth all while Michelle watched intensely.\n\n\"There he goes.\"\n\n\"Give me all of that cum,\" Selena ordered.\n\nI certainly tried.\n\n\"That's it. All of it.\"\n\n\"Wow.\"\n\n\"Ohh fuuuck.\"\n\n\"And now the last little bit,\" Selena pulled herself from atop me and her exit sent one last wave through my body and a light spurt of cum from my dick.",
        "Michelle and Diane clapped like they were on Broadway. I could do little in the way of a curtsy.\n\n\"Well done, sir,\" Diane said.\n\n\"You're a lucky man,\" Selena added. She'd climbed onto the ground and stood next to the table, her strap-on swaying with menace.\n\n\"How's that?\" I mumbled. Coherent thoughts were only starting to return and vocalizing them was still a challenge.\n\n\"Most wives don't splurge on the husband package.\"\n\n\"The husband package?\"\n\nNone of the girls said anything. Their grins said it all.\n\n\"You planned that?\"\n\n\"Well, I didn't plan on you going commando. That was dumb luck on your part. But I knew you'd get hard the second she touched you and I knew how bad you wanted to be pegged.\"\n\n\"I'd say your wife knows you pretty well.\"\n\nI rolled onto my side and faced all three. My cock dangled flaccid and spent but all three looked at it and then back at me.\n\n\"Then she also knows now that after that, I'm going to need her to give it a try.\"\n\n\"Is that so?\"\n\n\"Oh yeah,\" I said with my own grin.\n\n\"Good thing I ordered a Mr. Hankey last week.\" Michelle stood up from the table. Her towel fell to the ground, exposing her breasts as she walked over to me and placed a firm slap atop my ass. Her smile bordered on giddy.\n\n\"And it's already waiting at home.\""
    ],
    "authorname": "Revolver_O",
    "tags": [
        "pegging",
        "couples",
        "massage",
        "sensual",
        "loving wife",
        "latina",
        "prostate",
        "milking",
        "anal"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/couples-massage-10"
}
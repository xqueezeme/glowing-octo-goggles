{
    "title": "How to Get Your Characters Naked",
    "pages": [
        "After having read hundreds, maybe thousands of Literotica stories over the years one nearly universal flaw has become increasingly apparent: the way the characters undress is not handled as well as it could be. Either clothes are dispensed with in one sentence, or the seduction description is sparse or otherwise unsatisfactory. The purpose of this little essay is to give newbie and experienced writers alike some suggestions on how to go from fully clothed to the opposite. Whenever possible, I will give specific examples to \"flesh out\" (groan!) my points.\n\n1. Don't rush it!\n\nThis could be interpreted as common sense, but as my wise grandmother once said, \"common sense isn't very common!\" I am amazed by the number of stories where clothes apparently take themselves off, and we aren't talking about the \"Non-Human\" category here! Almost all readers appreciate some sort of seduction, teasing, or gradual turning of the screw, so why disappoint in this critical area? Here is a typical example of a boring undressing description:\n\n\"They removed their undies quickly and lay back on the bed.\"\n\nWOW! I'd hate to read a story by this author about paint drying. Now, here's a more drawn out, detailed version:\n\n\"Gary slowly approached Linda trying to conceal the obscene bulge in the right leg of his baby blue boxers. He tenderly rubbed her aroused breasts through her stark white bra, while attempting to unhook the back snaps. Linda smiled and helped him in this daunting task, until finally the skimpy garment fluttered down to her feet. Gary then plunged his hand down Linda's satin teal panties, feeling her moist bush and the heat down there. He pushed the sexy garment down one delicious inch at a time, delighting as his fingers massaged her jet black cunny hairs. When the panties fell to Linda's feet, she quickly stepped out of them. Pushing Gary's hand away for a moment, she outlined the tent in his boxers, slowly pressing his engorged prick toward the center fly slit. He winced as his fat prick spread the fly agonizingly slowly, grunting loudly as Linda flicked her tongue against the wide mushroom head. When the 8 inch monster finally worked its way through the center opening, Linda laughed at the comical sight and unexpectedly pushed Gary's engorged tool back into his boxers. He grunted as she suddenly pulled them down, causing his prick to hit his stomach with a loud \"thwack\"!\"\n\nWhile that paragraph is not going to win a writing award, it does at least give the reader a visual illustration of exactly what is going on. In the excellent stories of Charles Petersunn, which I highly recommend, this undressing process sometimes takes 3 literotica pages!! Don't worry about being too descriptive...in the inadequate medium of writing, one has to be as explicit as possible for maximum impact, whether you are writing a \"stroke story\" or a romantic novel.\n\n2. Don't forget articles of clothing or who you are writing for.\n\nIn the Literotica world, hardly anyone wears underwear or socks. The other scenario, which is common with heterosexual male authors, is that female undergarments are described to the last detail, while the male figures consistently go commando. My guess is that at least 40% of Literotica readers are women/gay men who would appreciate knowing exactly how the man is undressed and what he is wearing in the underwear department. Yes, you can make taking off shoes and socks detailed too, even in the most mundane situations. For example:\n\n\"Lynn couldn't believe she was undressing a real nerd. Staring at his \"Walmart Special\" sneakers, she noticed they had two little flaps which looked to be velcroed on one side. Trying not to giggle, she pulled the flaps away as Dilbert pulled his feet out of the faded navy blue footwear. Expecting the tiny white ankle socks 99% of teenage boys wear, Lynn was rather surprised to see high black dress socks. She tickled the soles of Dilbert's feet as he giggled like a 10 year old schoolgirl. Then, she quickly rolled down each sock at a time, staring up his polyester cut off shorts which had legs that were far too wide for him. As she had predicted, Dilbert wore little boy white jockey briefs that were already punched out by his stiffening member.\"\n\nSome people might argue that such details are not really necessary and they don't want to hear about Dilbert's dumb shoes. Yet, I maintain that as an author, you need to constantly paint vivid pictures of your characters. Dilbert is a nerd, and his clothes have to reinforce that image. As you write about undressing, constantly read back short sections to yourself to see if YOU can visualize the picture and action in your mind. If you can't, imagine how confused the reader is going to be. Try to consistently describe the underclothing of both sexes, and please don't ever use the word \"undies\". It sounds like a term a non-English speaker would employ after consulting a translation dictionary. Need some synonyms? Consider the following:\n\nWomen: panties, boy shorts, boxer shorts, briefs, bikinis, bloomers, knickers, nightgowns, slips, teddies, bras.\n\nMen: boxer shorts (trim and full cut), briefs, tangas, bikinis, jockstraps, boxer briefs, wife beaters, crew necks, V-necks, union suits.\n\nOf course, there are many other slang underwear terms but this should be enough to get you started!\n\n3. Use all the senses during the undressing scene.\n\nWriting is a terribly inadequate medium. Besides having to provide the reader with an alluring visual image, the writer needs to use ALL five senses for maximum impact. That this is almost never done makes it worthy of discussion. To relate the senses to an undressing/seduction scenario:\n\na. What does the fabric of her panties FEEL like? Are they silky, cotton, nylon, or satin? What does he do when you touch his balls through his briefs? Or nuzzle his cock through his boxers? What is her reaction when you tickle her nipples through her bra? Or work two fingers up the back of her panties?\n\nb. What does her pussy SMELL like? Is it pungent, sweet, or something else? How would you describe the smell of his body? Salty? Locker Room? Powerful? What is the aroma of her panties? Faint Perfume? Funky? A French Whorehouse?\n\nc. What does his cock and cum TASTE like? Is it salty, gooey, or faintly reminiscent of almonds? What drink or liquid are you reminded of as you eat her out? Salt Water? Stale Orange Juice? Cough Syrup?\n\nd. What sounds do you HEAR during the undressing act? Gasps, grunts, groans, giggles? How about screams, howling, or some choice cuss words? The moment of orgasm (with or without clothing) is a critical one. Some authors like to use such chains as \"ARRRRRGGGGGHHHHHHHHHHHHHHHHHHHHHHHH.\" Personally, they turn me on but others see them as merely amateurish.\n\ne. What does the clothing LOOK like? Are his boxers tapered, baggy, tented, or faded? Are her panties cut-out, peppermint pink, or granny bloomers? Don't forget pants and dresses as well. Is he wearing Dickies, khakis, or tight jeans? Is her dress a mini-skirt, knee length or folded like origami? Again, writing is such an inadequate medium don't worry about overdoing the description. Chances are someone, somewhere will get turned on by an added detail you thought was trivial.\n\n4. Continue the foreplay AFTER they get naked.\n\nSure foreplay in underwear is fun, and I have devoted entire stories to just that topic. However, I have read too many Literotica submissions where all the characters do after they get naked is put tab A into slot B. That is one option of many and ideally can be prolonged in the manner of chinese water torture. Premature ejaculation is always disappointing, but Premature Copulation is nearly as bad. Consider the following:\n\n\"When they were finally naked, Greg quickly plunged his hard dick into her waiting gash.\"\n\nHo-hum. What's for dinner?\n\nNow for another version:\n\n\"As her sexy panties slowly fell to the rug, Greg got on his knees, taking in the luscious sight of Pam's shaved bush. He stuck his tongue down her honeypot and instantly made contact with her ultra sensitive clit head. She moaned sharply in complete ecstasy as Greg's skillful tongue played her clit like a virtuoso pianist tickling the ivories. Her moans gradually changed into deep howls of pure lust, encouraging Greg to flick his tongue even faster, wringing orgasm after orgasm out of her cuntbox in a pure wave of passion.\"\n\nYes, that was corny but the screw keeps tightening. As a matter of fact, let that be your mantra. No matter what you write, whether it be an undressing scene or an invasion of a distant planet, keep the screw tightening. Remember, the balloon needs to pop at the final moments, even a few seconds earlier can mar the overall effect.\n\nI hope these easy to employ suggestions improve your ability to write seduction/undressing scenarios. Being nude is fun, but there is no reason the journey to nakedness cannot be enjoyable as well. Best of luck in your future writing endeavors!\n\nSincerely, Sack "
    ],
    "authorname": "sack",
    "tags": [
        "undressing",
        "stripping",
        "nudity",
        "underwear"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/how-to-get-your-characters-naked"
}
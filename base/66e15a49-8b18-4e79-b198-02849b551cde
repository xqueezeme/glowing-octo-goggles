{
    "title": "The Archer Part Pt. 06 - End",
    "pages": [
        "\"Aslin, there are two men here to see you.\" Bitta's gentle voice drifted in from the portico entryway.\n\nAslin started, sitting up from her lounging position, her eyes darting between Ero and his sister. She felt her heart thudding loudly, cursing herself for how easily she seemed to startle and cower these last two days. She hardly felt like herself, wishing only to be close to Ero, to stay within sight and earshot of him all the time. Her body was perpetually tense, poised always for flight or fight.\n\n\"Authorities?\" she queried, her voice wavering, and Bitta came closer to her, bending and taking her hands.\n\n\"No, Aslin,\" she said reassuringly. \"Your uncles.\"\n\n\"My . . . uncle?\" she echoed confusedly, momentarily imagining her father's brother had sailed here from Tiria to bring her home. But then she remembered the two brothers of her mother, the uncles she had never met, whom the King had written to upon her arrival.\n\nShe stood then, smoothing out her hands on her gown, looking down at the fabric and half expecting to see streaks of blood from her hands. But the fabric was clean, it was always clean, but the blood was always ready in her mind.\n\n\"Shall I come with?\" Ero asked mildly, standing too.\n\n\"Yes,\" she answered easily. Of course she wanted him to come.\n\nThe three of them walked to a flowering courtyard where Bitta had shown the two men. Looking at them, Aslin noted immediately how uncomfortable they seemed in the splendor of the garden. They were both burly men with dark beards, similar in expression and dress. They stood close to each other, as if trying not to touch anything around them.\n\nWhen they saw her they separated, and Aslin looked up at their faces, searching for an echo of her mother and finding it, if dimly. If it was Tiria she would curtsy to them, but it was not, and she was not sure how to greet them. One took a step forward and cleared his throat.\n\n\"Are you Aslin, daughter of Askira, daughter of Ashanka and Jondro?\"\n\nFaintly she remembered the names of her deceased grandparents, names hardly ever spoken by her mother.\n\n\"I am,\" she answered in Almanian, to reassure them she understood.\n\n\"Then I am your elder uncle Giru, and this is your younger uncle, Roth,\" the man gestured to the other man beside him, though Aslin could not distinguish any stark differences in their ages.\n\n\"Younger by minutes only,\" Roth smiled, taking a step towards her, and Aslin smiled too. She hadn't known her uncles were twins.\n\n\"I am happy to meet you both,\" she said softly, feeling a strange ache in her heart.\n\nThe two men looked at their feet with apparent shyness, and shifted their weight nervously as they took in the sight of the Prince and Princess behind her.\n\n\"We have come to bring you back with us,\" Giru said abruptly, and Aslin's eyebrows rose.\n\nRoth elbowed him and elaborated, his voice smoother. \"My brother and I both have good land east of here, far inland, with flocks of sheep and dairy cows. Your letter said you were used to such living?\"\n\n\"Yes,\" she nodded in assent. \"My family raised sheep as well in Tiria.\"\n\nBoth men nodded in approval, and Roth went on, seemingly the more talkative of the two. \"It has long been in our blood. That, and a penchant for war, which it seems you have also inherited.\"\n\nAslin almost laughed, the sensation foreign in her throat.\n\nBoth men smiled to see it, and Roth went on, looking at her kindly. \"Giru has a girl about your age, and I have a veritable army of small ones, all eager to meet you.\"\n\nAslin took a moment to absorb his meaning. \"That sounds lovely,\" she replied vaguely. \"Do you mean for me to visit, or to come live there?\"\n\n\"It is dangerous for you here,\" Giru replied, his tone gruff.\n\n\"What happened with the Tirian soldier was an isolated incident. That threat has passed,\" Ero broke in, coming to stand beside her. Aslin felt an unfamiliar flash of annoyance at him for speaking on her behalf.\n\nBoth men bowed to Ero in silent acknowledgement of his station, but it seemed to Aslin they did so rather begrudgingly. In fact, the older brother seemed to be glowering.\n\n\"You are the man she killed for?\" Giru asked, already knowing the answer.\n\nWhat a strange way to refer to Ero, Aslin thought.\n\nEro nodded brusquely.\n\n\"And yet you have no . . . plans for her?\"\n\n\"I have plans,\" Ero replied defensively, and Aslin felt her brow furrow in her confusion.\n\n\"I have plans,\" he repeated firmly, glancing at her. \"But the event is fresh. She needs time.\"\n\nAslin's mind sped. What was he talking about? What plans? Had they been planning without her?\n\nGiru shook his head, unsatisfied with this answer. \"She will come with us. If and when your plans are ready you may come and see her. You would be welcomed.\"\n\n\"No,\" Ero said abruptly, holding out his hand as if he could stop this plan with physical force. If she wasn't mistaken, she sensed panic in his voice, and felt bewildered at it. Her uncles looked similarly confused at his reaction, and the more diplomatic Roth stepped forward.\n\n\"My lord,\" he said deferentially, to begin. \"Our niece is young, and she doesn't know the ways of Almanian life yet. She has suffered much of late, yes? Surely it is time for repiro.\" His voice trailed off with this last word, foreign to Aslin, but it affected Ero greatly, whose face seemed suddenly stricken.\n\nHer heart began to beat faster as Ero took a step backwards, his hand falling.\n\nHe wanted her to go, he wanted her gone.\n\nThe thought resounded in her painfully, making her chest ache.\n\nSlowly Ero turned to her, taking one of her hands in his, and she felt a wave of despair. It was goodbye already, she felt it, and how easily he did it.\n\n\"They want you to live with them for a while, Aslin,\" he murmured, stroking the back of her hand with his thumb.\n\n\"You wish me to go?\" she whispered, her voice shaky. He looked up at her briefly before looking down again, but she had seen his face contorted with pain.\n\n\"It is not what I want that matters right now. What do you want?\"\n\nAslin's heart cried out that she wanted to stay, but it was more than that. She wanted Ero to ask her to stay, wanted to be wanted there, not just tolerated. She wondered if she had overstayed her welcome already, and by what sign she would understand if she had. Of course she wanted to know her uncles and her Almanian family but not right now, not when her world was fractured and the man she loved had been inches from death.\n\n\"What does repiro mean?\" she murmured, remembering the change the word had brought to his face.\n\n\"It literally means a deep breath,\" he said quietly, his eyes still downcast. \"But in context it means a pause, for relief, for respite.\"\n\nAslin felt her heart crushing inside her chest, crumpling up unto itself like a piece of balled paper.\n\n\"You want this . . . pause?\" she whispered, the word torn from her. She felt frantic, like a caged bird trying to escape, and it took all her slender self-control not to cry.\n\nHe looked up at her again, frowning.\n\n\"It is a pause for you, Aslin,\" he said, and his reply did not clarify anything.\n\nThey would never understand each other, she thought despairingly. Even face to face, speaking plainly, she would never understand what was in his head, his heart.\n\n\"You can be in the country again, with loved ones, and think about your future,\" he added with a false kind of cheeriness, and Aslin's eyes widened at his last words. He caught the stricken look in her expression and his eyes darted over her face, trying to comprehend.\n\nThink about her future.\n\nHer future with her family.\n\nHer future herding sheep in the countryside.\n\nHer future far away from him.\n\n\"What is it?\" he whispered, his voice afraid.\n\n\"I'll go,\" she said, feeling her eyes brim with tears. She turned to her uncles swiftly so that Ero would not see. She still had her pride, damn it.\n\n\"When can we leave?\"\n\nGiru nodded, satisfied, looking at his brother. \"Tonight if you wish. Or tomorrow, if you have much to pack.\"\n\n\"I brought nothing with me,\" she replied in a brisk tone, feeling her heart begin to shatter already though Ero was right beside her still. \"We can leave now.\"\n\n\"Aslin,\" Ero said in surprise, pulling her back towards him, but she slipped her hand from his grasp.\n\n\"What?\" she asked defensively, still turned away.\n\n\"Wouldn't you rather leave in the morning?\" came his plaintive question, and she felt the shadow question behind it.\n\nWouldn't she rather spend one last night with him?\n\nAslin said nothing, the silence stretching out awkwardly. Her uncles looked at each other, unsure of their part in this drama.\n\nFinally, Ero spoke.\n\n\"Let Bitta help you pack your things, at least. Your gowns, your books.\"\n\n\"Those things belong to you, not me.\"\n\n\"They are yours,\" he insisted, frustrated, and she shook her head.\n\n\"Don't argue with me in this, Aslin,\" he said tightly through clenched teeth, and Aslin said nothing. She didn't care about the fine clothes, but secretly she wanted those books. She looked away, her head high, feeling miserable.\n\nShe heard a faint growl and looked over at him, instinctively taking a step back at the ire she saw there. His face had been placid, even plaintive a moment before, but now he was furious. She had said nothing she regretted, she was trying to extricate herself because he was trying to persuade her to go. She didn't want another intoxicating night in his arms. If she was to be deprived of him, best start now.\n\n\"Yes, Aslin, let us go,\" Bitta interjected softly, coming to her side and slipping her hand through the crook of Aslin's elbow, tugging her away and leaving the three men to their standoff in the delicate flowering garden.\n\n***\n\nA few hours later, the little group stood outside at the base of the palace stairs. Aslin had said a brief farewell to his father, who looked at Ero with a perplexed expression that brought him a flash of searing pain. Even Bitta's eyes were red-rimmed, and she embraced Aslin several times as her trunk was handed over.\n\n\"Allow one of our carriages to take you home,\" Ero offered, knowing already the men's pride would never allow it, but wishing Aslin's journey could be made more comfortable.\n\n\"No,\" Giru waved this idea away with dismay. \"We will stay in the city tonight, and leave in the morning. We brought our own wagon. It's just outside the gates.\"\n\nEro nodded, feeling sharply the inanity of Aslin sleeping in an inn within sight of the palace, when she had spacious quarters of her own. He looked over at her, but her eyes were fixed on her uncles.\n\nDesperately Ero wished for just an hour or two alone with her. He felt she did not understand that he was giving her time away from him, time she deserved. Her uncles had been right, she had known so much pain since meeting him. She deserved a respite from him, from the chaos and confusion he had brought into her life.\n\nScenes of their time together had risen to him in quick succession at her uncle's words, sounds Aslin had made because of him. The low moan of abasement she gave, stripped to the waist in that damned interrogation room. Her pitiful, mournful retching as they sailed. Her sob of confusion right before he released his seed on her bright red asscheeks. The piercing scream that would haunt him the rest of his life, when she drove a knife into her own comrade's neck to save him. With horror he had wondered in that moment what would ultimately weigh heavier on the scales: the pleasure he had given her, or the pain he had caused?\n\nHe had known then that she needed to be free of him, if just for a little while, to clear her head and remember herself. She had to understand what she wanted without his perpetual demands. Had she ever really even had a choice to be with him, he wondered with dawning horror.\n\nBut Aslin had not sought him out in the intervening hours, and he worried that she saw her departure as a thing of his making. When he took her hand and tried to pull her away from the others she at first resisted, but he pulled harder.\n\n\"Please, a moment Aslin,\" he pleaded, his voice ragged.\n\nHe held out a small, blue box to her, and she looked up at him as she took it.\n\n\"I had these made for you, when we first arrived. I was waiting to give them to you until after the Prince had left, but then . . .\"\n\nShe merely held the box in her open palm, her eyes steady on his face. Gods, those eyes burned like a brand in his soul. How was it she could see so deeply into him, and yet still misunderstand?\n\n\"Open it,\" he urged softly, and when she did her mouth fell ajar in the slightest way, and Ero felt a twist of lust in his stomach.\n\n\"A bow and arrow for my Archer,\" he murmured, reaching into the box and tracing the delicately crafted silver arcs of the matching clasps. \"It was your bow that brought us together, and your bow that saved my life.\"\n\nAslin bit her lower lip, struggling against a reply, and he prayed she was feeling the same depths as he was.\n\n\"Aquamarine gems, for your eyes of course. And this pattern. Do you know what it signifies?\"\n\nAslin looked closer, shaking her head faintly. \"Your sister wears something similar,\" she mumbled.\n\n\"Yes,\" he nodded eagerly. \"Yes. It is the marking of my lineage. My family line.\"\n\nShe sighed, closing the box. \"They are lovely, Ero, truly. But where I am going I won't need clasps like this.\"\n\nEro shut his eyes tightly to keep himself from shaking her. An Almanian woman would understand what it meant.\n\n\"I will not be there to choose your clasps for you. Will you wear these instead? Every day?\"\n\nShe frowned, looking again at the shimmering gems. \"Why?\"\n\n\"Do it for me, Aslin,\" he swore, a mix of frustration, desire, and savage love for her simmering up inside of him.\n\nHe could see her confusion, but she nodded faintly. \"Alright,\" she acquiesced.\n\n\"I'll come to you soon,\" he promised, and her wincing face brought a knot of emotion to his throat.\n\n\"Don't make promises you won't keep,\" she chastised him, her voice unsteady. He could not help himself, reaching to grasp her upper arms, uncaring what her uncles thought.\n\n\"Aslin, I swear it to you,\" he said firmly, shaking her a little, and she looked at him with true surprise.\n\n\"Will you promise to wait for me?\" he asked, feeling as if he knelt before her in supplication.\n\n\"Wait for what? Where else would I go?\" she murmured, and he groaned, his grip tightening. She was pulling away from him in her heart and her mind, he could feel it happening right in the distance between them, and no force of his hands could stop it now.\n\n\"Just wait for me,\" he moaned, desperate for her promise. \"And think of me, won't you?\"\n\nShe pulled out of his hold, putting the box in the pocket of her cloak. For a moment he feared she would say nothing and leave him in his awful abyss, but she took a deep breath and spoke a soft question, almost to herself, before turning and joining her uncles.\n\nThe question echoed in his mind long after she had disappeared, planting a seed of hope.\n\n\"How will I be able to help it?\"\n\n***\n\nAt first, Aslin was consumed with her wounded heart, hardly seeing the city's cobbled alleyways and crowded plazas as they departed the next morning. But she had never been one to stew, and it was done now, so there was no use in dwelling in the past. Once she scolded herself for her self-absorption and focused on the people and buildings surrounding her, she couldn't deny that Almanians seemed a healthy, happy people.\n\nAs the distance grew between her and the Palace, Aslin was surprised to feel her muscles surrendering some of the tension that had been plaguing her for days. When the city retreated altogether behind them, with green rolling hills and low, stone walls ahead, she actually felt excited and hopeful. It was as if the city itself had, for her, been of late a harbor of danger, uncertainty, and death. The country was where she had lived most of her life, and she was happy to return to it.\n\nShe bobbed along in the wagon, at times watching the scenery, and at times listening to the sparse but endearing dialogue between her uncles. Roth kept going over the amazing sights of the palace, while Giru could only speak of his eagerness to return home. They didn't speak to each other in full sentences but rather half-finished phrases, sometimes even replying aloud to something that had not been said. Aslin wondered if they were so close in spirit that the majority of their conversation was happening inwardly.\n\n\"Do you not travel much to the Royal City, then?\" Aslin asked, crawling closer to where they sat at the front of the wagon.\n\n\"I can count on one hand how many times, thanks be to all the gods,\" Giru exclaimed, stirring the reins of the older mare driving them, as if to hurry even faster home.\n\n\"We only ever go for new equipment really, and once to settle a border dispute between our land and our neighbor's,\" explained Roth, turning back to her.\n\n\"How was it then that my mother was a handmaiden of the first Queen?\"\n\nRoth smiled. \"That was our father's doing. He was a great war hero, and the children of illustrious warriors are often requested at court, to refine them and give them opportunities.\"\n\n\"Jondro carried the Miradian blood in his veins, warrior blood of the first chieftains from back when the island was new,\" Giru said proudly, and Aslin could sense that he relished telling the history tale to his children. \"He had an arm like a hammer, and when he stood firmly planted, not even a horse and wagon could knock him over.\"\n\nAslin smiled, imagining that this Johndro must have looked something like her uncles, who seemed equally fortified.\n\n\"She asked about her mother, Giru,\" Roth scolded. \"Not a grandfather she never met.\"\n\nGiru scoffed. \"It is a good story.\"\n\n\"It does sound like a good one,\" Aslin agreed heartily, and Giru harumped in pleasure.\n\n\"There's plenty of time for that later,\" Roth shook his head, laughing. \"Askira went to court when she was even younger than you, to serve as handmaiden to the first Queen Yilla. Our sister was always adventurous in spirit. When we received news that she was going instead to Tiria we were surprised though, as such things are not usually done. Giru and I were still just boys then, and all our parents told us was that Askira had been favored by the King, and was given permission to sail away.\"\n\nAslin knew there was more to this story, her mother's hints had been confirmed by the King's intense remembrance of her. The King had wanted her mother for a mistress, had been enamoured with her, Aslin suspected. But her mother had only been there to serve the woman who was meant to be his wife, Yilla, unloved by the King and who died only a few years after they wed. Whatever had or had not happened between them she did not know, but her mother had wanted to leave, and the King had aided her. She expected her uncles knew this too, but held back out of delicacy. There had been letters between the siblings over the years, once a year or so, and in Almanian script Aslin could not read, but she imagined her mother wrote often to her family in those early years, before she married and settled.\n\n\"And to think now you are here, bringing the circle fully closed,\" Roth said happily, interrupting Aslin's contemplative silence.\n\n\"I am grateful that you came for me, uncles,\" she said softly, feeling heartsick for Tiria and thankful for these unfamiliar men whom she knew she would easily love.\n\nThe two burly men were silent for a moment, but then Giru spoke.\n\n\"You are family. Of course we came.\"\n\n\"We only hope you like it enough to stay,\" teased Roth, and Aslin laughed.\n\n\"I am sure I will. From the sound of it your land is more plentiful than my family's back home, the soil more nourishing. Our sheep were always hungry and misbehaving.\"",
        "Giru made an unhappy sound. \"Tirian soil is as dry as their hearts.\"\n\nAslin smirked at this, but then Giru spoke again quickly. \"Not yours, niece. You have an Almanian heart. Despite your hair.\"\n\nThen Aslin laughed in earnest, and Roth shoved his brother playfully. She imagined Giru would be blushing as pink as she often did.\n\n***\n\nLife on her uncles' farm was hard but fulfilling work. The days were long, and Aslin went to bed exhausted and slept deeply. The first weeks she spent at Giru's, with his wife and a daughter a few years older than Aslin. Their only other child was a son grown and gone, so the evenings were the four of them, Aslin's cousin happily helping her practice her Almanian script and reading by the warm firelight. But Roth and his family lived so close that the two families hardly went a day without seeing each other, and the small children at Roth's, of which there were so many Aslin often lost count, bid her time and time again to come live with them instead. At last she relented, knowing that her quiet evenings of study were to be no more. The noise and laughter at her uncle Roth's house was never ending and joyful, but often after her morning chores with the chickens and cows Aslin would go on long, meandering walks merely to be alone.\n\nThe land was indeed vastly different from the open, dry moors of the Tirian countryside where she grew up. The flocks here grazed on wide, verdant hillsides, and on her walks she would find endless small surprises, little glens with sprinkles of mushrooms, rivulets and streams with beds of seashells from a long ago era, small enclosed cemeteries with half a dozen headstones, a giant oak tree with what looked like a miniature cabin built in its canopy, old and dilapidated. Sometimes she brought a book, finding a quiet spot and merely watching the sun's dappled light move over the ground.\n\nIt was in these increasingly rare hours of solitude that Aslin's thoughts went unerringly to Ero, wondering what he was doing at that very moment. If he thought of her at night, the way she dreamt of him, of his hands and mouth over every surface of her body. Such dreams inevitably caused her to wake, perspiring and yearning for his body with no possibility of relief.\n\nWould he ever come to her, she wondered? He had said \"soon,\" but how soon was soon? To her that meant a month perhaps, but a month had already passed. Did he mean longer, is that why he was so insistent that she wait? What if she had agreed to wait years, just for the chance that a Prince would come to her family's farm and what? Take her back with him to live as royalty? Renounce the throne and become a shepherd? Both seemed equally ludicrous.\n\nShe craved his visit more with each passing day, if only to see him and talk to him. She wanted closure. She wanted to tell him how being with him had changed her. No letters from him had come, as she had hoped they might. But her Almanian still wasn't strong enough to read a letter, and even if he had written, what could he have said that her cousins could read aloud to her without blushing?\n\nBut she wore his clasps, as she had promised, though they looked extravagant in contrast with the simple wool dresses she wore. When she had put them on awkwardly herself that first morning as they left the city, her uncles had noticed. Their eyes had widened and they looked at each other with startled expressions, and Aslin couldn't tell if it was because of how expensive she knew they must have been, or if it was because they were of Ero's family and not her own. She had waited to see if perhaps they would offer her clasps of her own family line, and was prepared to explain why she had to decline, but no such offer was made to her. Aslin wasn't sure what to make of this, but wearing Ero's clasps had brought her a degree of comfort when she missed him most. Sometimes she missed him so much it was like an ache deep in her chest, the likes of which she had never known before. So she set herself to work instead, driving out the feeling with the exertion of her muscles, until she was so tired she could think of nothing at all. Her prayers at night alternated between wishing he would come, and wishing she could forget him.\n\n***\n\nWhen Ero found her, after much searching in the vague direction one of her uncles had pointed him in, fear flared in him momentarily at the sight of her prone, lifeless form at the water's edge. He ran for a few paces, her name already formed in his mouth, until he froze, seeing the slow rise and fall of her chest.\n\nShe was asleep, and it was not even midday. She had been reading, the book still loosely nestled in her fingers, and she was barefoot, her sandals closeby.\n\nHis fear was swiftly replaced by a crashing wave of tenderness. His love slept, accidentally. He could see it now, her eyes drifting from its page, drawn by the motion of the swiftly moving stream, and then she had laid down and slept. He thought of the day when he came to her room at the keep and found her in a similar pose, how he had watched her form then and hungered for her body. He watched her now, but what he felt today had so many more facets than mere lust.\n\nHe approached her slowly, trying not to wake her just yet. Instantly he saw his clasps at her shoulders and inhaled sharply, overwhelmed at the knowledge that she had kept her promise to him.\n\nHer family would have seen them, they would know already the reason he was here.\n\nShe looked well, and healthy. The apples of her cheeks were bright, and her hair was braided loosely over one shoulder. A long tendril of her hair had come loose from its plait, falling over her face, and it fluttered with her soft exhalations. She must keep it back for her work, noting the utilitarian dress she wore and its muddy hem. He would build them a cottage away from the city, on the coast perhaps, and he would take her there whenever she wished. Just the two of them. There she could have her fill of laundry and dishes, he thought with a smile.\n\nWhen he bent to sit beside her, peering to try and make out the title of her book, she stirred and her eyes opened slowly. He thought she would startle, as she did so often when he was near, but she just blinked several times and pushed herself drowsily up to a seated position.\n\n\"Ero? Is that you?\" she asked him, in Almanian. It was the first time she had ever begun a conversation with him in his language instead of her own, and its significance was not lost on him.\n\n\"It is me,\" he smiled, answering her in his mother tongue. \"I promised I would come.\"\n\nHer hands came to her dress, her hair, as she tried to straighten her appearance and wake herself at the same time. Her expression was more surprised than happy, he noted with nervousness.\n\n\"You find me at a disadvantage,\" she murmured, pulling the tie from her hair and running her hands through it, beginning to rebraid.\n\nHe reached out slowly, taking the tie from her grasp and keeping it for himself. She looked wonderingly at him, but let her hair fall. He liked her hair free.\n\n\"You are more beautiful than ever, Aslin. And I thought that was not possible.\"\n\nHer eyes sharpened at his words, as if she thought he might be teasing her, but it was the truth. She looked briefly around her, and he wondered if she suspected herself of dreaming. Every instinct in him wanted to close the meager distance between them, bend her in his arms and take her mouth against his, but he schooled himself to self control. He had waited this long, he could wait until the words were spoken. It wasn't her body he wanted now, at least, not just her body.\n\n\"I brought you these,\" he said, remembering the bouquet of bright flowers he had cut for her from the palace gardens.\n\nShe took the flowers, blinking still, and brought them up to her nose to smell. He felt rather foolish now. He hadn't expected to encounter her surrounded by greenery and the natural beauty of wildflowers all around. Suddenly his bouquet seemed stupid.\n\n\"I read in a romance that Tirian men bring flowers to the women they court,\" he explained gently, and her eyes met his again, a small wrinkle in between her brows. She distrusted him, he saw, and his resolve hardened to make her see everything he felt.\n\n\"You read a Tirian romance?\" she asked, disbelieving.\n\nHe nodded. \"I could say it was because you took all my favorite Tirian books when you left, but that would not be the reason why.\"\n\nHe waited to see if she would ask, but she merely placed the bouquet on the ground and looked at him with a guarded expression.\n\n\"I read it so I could learn more about you, about the way Tirian women think and feel.\"\n\n\"I hardly act like a woman in a novel,\" she laughed, and there was an undertow of anger he had not expected. She looked away from him now, to the water, and he feared he already had misspoken.\n\n\"I am all violence and disobedience and deceit.\" The words were harsh, but she spoke them mildly, as if describing the stream she looked at instead of describing herself. He felt his chest tighten with incredulity at the impossibility that she saw herself in such a way.\n\n\"You are none of those things,\" he replied, trying for equal mildness but without complete success. \"You are brave and loyal. And you love fiercely, like a tigress.\"\n\nHe watched as a swift blush overtook her, of anger or embarrassment he wasn't sure. Her eyes still avoided him, fixed instead on the slow moving water of the stream. Surely she had missed the sight of his face, he thought, wounded.\n\n\"You're saying such strange things,\" she murmured, upset.\n\nHe took a deep breath to steady himself. Tirian men spoke of their intentions, they said aloud the inner workings of their hearts. And so that is what he would do.\n\n\"My words may feel strange to hear, but they have long been in my heart. It has been some time now that I have held you highest among all women. Since I met you, I can think of no other woman but you.\"\n\nThe blush on her neck was bright and scarlet, and she shook her head once, then twice. She sucked in a quick breath and he saw, to his despair, pain in her expression.\n\n\"Don't say that Ero, please,\" she moaned, switching to Tirian, and he felt his heart sink.\n\nBut he would not be deterred. Not now, after giving her all this time, after almost going mad from it. He would not leave until she made him go.\n\n\"Why not, Aslin? Doesn't it please you to hear it?\" He ceded, answering in Tirian in a voice deceptively soft. She made a pained sound and shifted, standing up. Only a moment later, he followed her.\n\n\"You can't come here and say things like that, and then just go back to your golden palace,\" she said scornfully, her hands lifting in the air in frustrated supplication. \"Don't you know I will think of this moment so many times, when I am alone again?\" her voice had dropped to a whisper, and his heart was beating wildly in his chest, but he waited.\n\n\"Just go home if you are only here to toy with me.\" She made a gesture of dismissal and took several steps back from him.\n\n\"Do I seem like the kind of man who toys with women?\" he asked, his voice tight and controlled as he strode up to her.\n\n\"Isn't that what we were doing? Toying with each other?\" she asked, her voice accusing. He knew she did not believe that for a second.\n\nShe continued to move back into the copse of trees and he followed, all traces of the Tirian gentleman swiftly gone from him now. He was no Tirian. He was Almanian, and she was his woman. If she retreated, he would pursue.\n\nShe didn't seem to want to place her back to him, and in her haste backed up abruptly against a tree, almost losing her balance. Her hands came to its trunk to steady herself and he came even closer, nearly pinning her between the tree and his formidable body.\n\n\"No, Aslin. That is not what we were doing.\"\n\nHer breasts were heaving and his eyes were drawn to them against his will. His hands itched to feel her soft flesh after such a long absence. Seeing her so shaken should have diminished his lust but instead it flared. She wanted him, he could tell.\n\n\"I claimed you first among all men,\" he said darkly, reaching out his hand to cup her breast. She looked down at his hand, astonished at his boldness.\n\n\"I aim to keep that claim on you.\"\n\nWhen she did not twist away he moved against her, pressing her back into the rough bark of the tree. He reached down, tracing the line of her thigh until he found the pit of her knee, pulling her leg up against his hip and finding no resistance from her. He skimmed his hand under the hem of her dress and slid upwards now, grasping the curve of her thigh to her hip, pulling her against his groin.\n\n\"You were once mine, body and soul. Are you still?\"\n\nHis words made her close her eyes tightly, breathing rapid, shallow breaths. She pinned her bottom lip between her teeth and he growled, rubbing his erection into the softness of her belly. She let out a low moan, her head dropping.\n\n\"Tell me,\" he demanded, sounding angrier than he felt.\n\nStill she said nothing and he thrust against her, feeling the heat between her legs and reaching with his free hand to move away the layers of fabric that separated him from the object of his need. When he found her hot and slick with desire he growled again, feeling incapable of reining himself in.\n\n\"I am yours, Aslin. You know it already,\" he muttered, his voice harsh and guttural, freeing himself and pressing the tip of his cock against her.\n\nHe heard her inhale and looked up, unexpectedly finding her bright eyes wide and fixed on him.\n\nHad his words surprised her? They shouldn't have.\n\n\"I can't wait any longer,\" he said through gritted teeth, meaning it in so many ways, but the most urgent way was poised against her entrance, desperate but unwilling to take her without some sign that she wanted him.\n\nThen he felt her small hand at his waist, and she pulled him close, erasing the inches between them and he sunk into her velvet depths, feeling the excruciating pleasure of being inside of her sweep through his body and making him shudder. He pressed his face into the side of her throat and whispered the words he could keep at bay no longer.\n\n\"Come home with me, Aslin. Be my wife.\"\n\n\"What?\" she whispered, and he withdrew in order to see her face. But he did not have the capacity to withdraw from her entirely. Instead, he seated himself more firmly inside of her.\n\nHer look was confused, and it wounded him that she did not receive his proposal with any of the happiness he had hoped for.\n\n\"Marry me, my ilya,\" he whispered back, the words feeling like a secret incantation.\n\n\"You're crazy,\" she breathed, clearly bewildered.\n\n\"They say all men in love are mad,\" he murmured, reaching up to caress her cheek.\n\n\"You . . . love me?\"\n\nHis hand stilled and he looked sharply at her hesitant question, feeling astonished.\n\n\"Of course I love you.\"\n\nHer eyes searched his face, and she let out a slow exhale.\n\n\"You never said anything,\" she protested softly, shaking her head.\n\nHe frowned. \"I loved you with every kiss,\" he replied, slipping back into Almanian, and pulling back from her only to thrust deeply, savoring the tight heat of her body clenched around him.\n\nHer eyes half closed with the feeling of it, her hand wrapping tighter around his waist to keep him close.\n\n\"With every touch, and every smile.\" He moved possessively within her, reaching behind her with both hands and lifting her legs from the ground, wrapping them around his waist. Her arms came to his neck, clinging to him.\n\n\"Every word I spoke was love for so long now, chela,\" he swore, the sweetness of his words at utter odds with the roughness of his claiming of her body. \"Perhaps you should have your hearing checked,\" he added, and she exhaled in a short huff of laughter, making his heart thrill.\n\n\"But you sent me away,\" she insisted, answering him in Almanian once more, her hands reaching up, caressing his jaw.\n\n\"Even that was love,\" he ground out, thrusting again and feeling already the intense need to climax.\n\n\"You fool,\" she laughed in earnest and he paused, looking up in surprise.\n\nIt was not often he was called a fool.\n\n\"I desperately wanted you to ask me to stay,\" she went on, a shy smile on her face, and he saw that her eyes glittered with tears. His hands on her rear gripped her tighter, closer to him.\n\n\"You went so eagerly,\" he protested, remembering vividly the speed of her departure.\n\n\"Because you wanted a break from me,\" she explained, shaking her head, her smile growing wider.\n\nHis brow knit and he scoffed in disbelief at the gulf of misunderstanding that had lay between them.\n\n\"If you think that, then I have been a fool,\" he admitted with chagrin, thinking of the useless month he had wasted apart from her. He bent to kiss her but hesitated. He was buried inside of her, it made no sense, but a kiss was something different, something more.\n\n\"I must just love you more,\" Aslin whispered, and he felt his world stop like it did on that fateful rooftop the first time she had opened her heart to him unknowingly.\n\nHe squeezed his eyes tight, feeling the force of his joy surge so high it was almost painful.\n\n\"Say that again,\" he pleaded, his fingers digging into the skin of her bottom as he pressed her against his cock, his forehead butting hers.\n\n\"It's obvious that I love you more,\" she said lightly, and he could hear her smiling even through his closed eyelids.\n\n\"What more proof would a man need?\" she went on sweetly, teasing him. \"I gave you my virtue. I sailed across the sea for you. I defended your life with my own.\"\n\n\"Yes,\" he growled, swooping down to capture her mouth, kissing her fiercely and feeling her response melt away all his doubt and heartache from these past excruciating weeks. He lifted her off of the tree trunk, bearing her weight atop him and bringing her down onto his cock, lifting her and letting her fall back onto him as his hips thrust to meet her. She was moaning as she slid onto his length, her hips gyrating against him each time he was fully seated. He wouldn't last much longer, he thought in the distant recesses of his mind, it had been too long without her, he had spent too many nights dreaming of this feeling.\n\n\"Touch yourself, chela, and come for me,\" he groaned, wishing he could stroke her but needing both hands to support her as he bounced her atop his rigid cock. Her head bent on his shoulder, she released one hand and slipped it between them, and he could feel her fingers as they searched for the little pearl that would bring her to fulfillment. When she found it she moaned, jerking her hips, and he grunted as he continued their frantic movement, feeling the orgasm building at the root of him and knowing he would soon surrender to it.\n\nHer moans increased and she was gasping, her fingers moving quickly as her thighs tensed and she pressed her breasts against him.\n\n\"Come with me, Ero,\" she managed as the first crest seized her, a loud cry escaping as her body writhed for closer contact with his, her inner muscles drawing him in, desperate for the deepest connection.\n\nHe needed no other incitement, gripping her rear and shoving her down onto him, thrusting into her with a moan of pure relief as his climax rushed over him like a tidal wave.\n\nHe knew not how long they stood there, joined, panting, and deliriously happy. But eventually the sensation dulled enough for him to sense the trembling in her thighs and he groaned, bending at the knee to lower them both carefully to a seated position on the ground, wrapping her in the circle of his arms and securing her against him as they began to descend from the peak, their nether regions still entwined.\n\nFor all he wanted to simply hold her, there were still words he needed to speak. He pulled back, relishing her sated, flushed look, wondering at how incredible it was that he loved her more each time they joined together.",
        "\"You may have loved me more to start, my little flower. But I will love you more now.\"\n\nHer eyes opened, dazed, and she smiled at him. He saw their future spread before them, one in which she was always beside him, mother to his children, his partner and companion in this life and the next.\n\n\"I will take you to the palace and shower you with silks and gems,\" he promised, his voice sultry. \"I will place my mother's diadem upon your head and pledge my oath to you on the grand balcony. Everyone will come out, the chieftains from every corner, and all the people will cheer for you and love you. And one day I will make you a Queen of this land and together we shall reign.\"\n\nAslin blinked at this grand speech, and leaned forward to shyly press her lips against his.\n\n\"I can do without all that,\" she replied, laughing happily. \"What I cannot do without, though, is you,\" she said more softly, gazing up at him.\n\n\"You have me already,\" he reasoned, feeling giddy. \"The rest you must accept with grace.\"\n\n\"Well, if I must, then I will,\" she laughed again, brushing her nose against his. He kissed her again passionately, trying to calm himself from the emotional heights.\n\nWhen at last they withdrew, Ero helped right Aslin's gown, bending to retrieve a fallen clasp from the ground.\n\n\"You know,\" he murmured with a dark smile, \"technically we've been engaged this past month entire.\"\n\nAslin's eyebrows lifted, and he held up her clasp.\n\n\"When an Almanian woman dons the clasps of another man's lineage for the first time, she has agreed to be his wife.\"\n\n\"Ero!\" Aslin exclaimed in joyful reprimand, the surprise evident on her smiling face.\n\nHe tried not to smile wider, and failed, feeling himself blush.\n\n\"If I had asked you then, would you have said yes?\" he asked her shyly, curious.\n\n\"Of course,\" she laughed. \"I would have agreed to be yours before we even boarded the ship.\"\n\nIt was his turn to be stunned, and he felt his mouth fall open as he reached for her, hearing his own astonished laugh. She would have married him as just himself, he realized. Ero, a common Almanian soldier. Just a man from another world, with nothing to give her but love.\n\n\"Let's hope the gods give me more acuity as a King than as a lover,\" he laughed again, kissing her again, and saying a fervent prayer of thanks to any deity that ever bestowed favor on loving couples for bringing him this woman, the light to his darkness, his other half."
    ],
    "authorname": "Surfacing1440",
    "tags": [
        "fantasy",
        "separation",
        "longing",
        "outdoor sex",
        "proposal",
        "marriage",
        "royalty"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-archer-part-pt-06-end"
}
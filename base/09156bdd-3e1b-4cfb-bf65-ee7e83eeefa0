{
    "title": "Busy Fingers Ch. 03",
    "pages": [
        "It was Thursday, three days after Hayley and I had enjoyed our second masturbation session, and we were sitting opposite each other at my little kitchen table with a coffee. Since it had happened neither of us had mentioned our fun together, it had never come up and neither of us had brought it up. I knew we'd have to talk about it sometime, and I figured it was up to me to start the ball rolling.\n\n\"You know, don't you, that you and I need to talk?\" I began.\n\n\"Why do we?\"\n\n\"Because of what we did on Monday, and last Saturday.\"\n\n\"I say again, why do we?\"\n\n\"Because it's bothering me.\" \n\n\"Well, it's not bothering me, Sue. We had some fun and that's all there is to it. We didn't cheat on anyone, we didn't do anything illegal, and we didn't hurt anyone, so why do we need to talk?\"\n\n\"Because I had hoped we were going to do it again.\" \n\nThere was sadness in my voice as I said that, because it was more than a hope, it was almost a need. I couldn't get our joint wanking sessions out of my head, and every time I thought about them I felt my pussy melt, desperate for another. Now it sounded as if Hayley was trying to call it a day. \n\n\"Thank God for that, I hope we are.\" Her expression softened and she smiled. \"I thought for a minute you were going to say you regretted it.\"\n\nThe relief that I felt must surely have shown on my face. Now I knew that we had both been defensive just in case the other didn't want to play.\n\n\"Not for one second. I can't get it out of my mind it was so fantastic.\" I searched for the words. \"It felt so right and yet it was so naughty. I mean, if we told anyone I'm sure they'd look at us like we were a pair of perverts, but I don't care because it's right for us.\" \n\nI asked the question.\n\n\"I'd like to make it a regular thing, would you? I mean, I want us to keep doing it, often. Do you?\"\n\n\"Yes.\" \n\nThe answer was so simple and so important, relief washed over me again. And then Hayley put the cherry on the top with her own question.\n\n\"How about every Monday?\" \n\nShe looked serious, but I couldn't be sure.\n\n\"Seriously. You want it arranged in advance rather than whenever we feel like it?\"\n\n\"Yes. Because then we won't have to worry about getting up the nerve to say 'how about today', and we've always got something to look forward to. All we got to do is keep Monday clear.\"\n\nI felt so good it was all I could do to stop myself laughing with delight.\n\n\"You're on. Mondays it is.\"\n\n\"Roll on next Monday.\" She smiled happily, but then a cloud crossed her face. \"Sue, you know what I said about getting a double-ended dildo, I didn't mean it you know?\"\n\nIt was my turn to smile. \"Yes, you did. And you can if you like. But don't push me, I'd have to be in the right mood.\"\n\nSharing a double-ended dildo was sailing a bit close to the lesbian wind for my liking, that's why I left myself that 'get-out' clause. But I'm pretty sure that had there been one there last Monday I wouldn't have stopped Hayley from using it with me, and that's quite an admission for me.\n\n\"What about an ordinary vibe?\"\n\n\"What about one?\"\n\n\"Could you use one of those?\"\n\n\"I don't know. I've never tried, I don't think I'd know what to do.\"\n\nYes, I know it sounds unlikely for a woman in her thirties, but I'd just never got around to buying one, and in any case my fingers worked just fine. But I suppose the real reason was that I'd always been too embarrassed to actually buy one.\n\n\"I would.\" She didn't smile, she grinned hugely. \"I'll show you.\" \n\n\"All right.\" I must have sounded as hesitant as I felt. \"But do you mean first hand or by watching?\"\n\nShe gave me a funny frustrated sort of look and instead of answering my question she posed one of her own. \"I've got a question for you.\" \n\n\"Go on.\"\n\n\"Are you really as unadventurous as you make out?\"\n\nRegrettably, the answer was yes. Paul was a good lover, and we had one or two little pleasures, but they were always things we'd found out by accident rather than by experimentation. I mean I love him spanking my bottom, but we'd found that out when a pretend swat actually landed. About the only thing we'd worked out for ourselves was oral sex, and so that was a major thing for us.\n\n\"Probably.\" I told her. \"Depends what you call unadventurous.\"\n\n\"Not trying things out, that's unadventurous. Do you ever let Paul do new things to you?\"\n\n\"Like what?\" \n\n\"Well, like anything - masturbating you, for instance?\"\n\n\"He's made me cum with his fingers before now, but only when we're building for a fuck.\"\n\n\"You've never just lain there and let him bring you off, then?\"\n\n\"Don't you fancy it?\"\n\n\"Yes, I do actually, but it's just never happened.\"\n\n\"So it's a case of Paul lacks the imagination and you lack the guts?\"\n\n\"I guess so, if you want to look at it like that, but it doesn't stop us enjoying ourselves.\"\n\nHayley shook her head despairingly. \"One day, if you can ever cut loose enough, I'll do it to you.\"\n\nI wasn't certain how seriously she meant them, but those words ran around and around inside my head for the rest of the week. I'd love to just be played with like that. To simply lie there and let someone do things to me until I came. I knew it would never be Paul, but I didn't know if I could ever let it be Hayley. I turned it over and over trying to make a decision. \n\nSlowly that decision formed. I was no longer feeling shy in Hayley's presence, and it wasn't as if she wanted to make lesbian love to me, and I couldn't see it ever happening with Paul, or with anyone else for that matter. I made my mind up. If the time was right and she really wanted to, then I was going to let her. God, even the decision gave me a thrill. But, and it was a big but, I wasn't going to have any proper sex with her, because that would be going too far.\n\nI didn't say anything to her about what I'd decided; I thought it best just to let things happen as and if they would. So when Monday finally arrived, and I knocked excitedly on her door with my heart already pounding and my pussy already moist, she didn't know I was probably willing to be touched.\n\nShe answered the door with a delighted smile on her face.\n\n\"I'm glad you've come.\" She told me. \"I had this awful feeling that you might change your mind and not want to come over.\"\n\nI suppose this first pre-arranged session was a test of our resolve, but I'd never thought for a moment of backing out.\n\n\"And miss out? Not likely!\"\n\n\"Well, for once I'm glad to be wrong, come in.\"\n\nShe held the door open and ushered me through.\n\n\"Coffee before, during or after?\" \n\nI think it was her way of checking that I was still up for it. I was.\n\n\"After, I think, don't you? We might need to sit down and get our breath back.\"\n\nShe led me through to the lounge with its lovely leather sofas. She sat down in her customary corner and motioned for me to join her. I sat at the other end as usual, a little puzzled because last time we'd both undressed first.\n\n\"I've been shopping.\" She announced, reaching around behind the sofa and grinning. \n\nI had an idea what she was going to show me, and I must admit to being both intrigued and impatient to see. The first thing she pulled out was a little bottle with a kind of pump dispenser on the top, rather like that of hand cream.\n\n\"I don't think either of us will ever need this, but I thought I'd better get it anyway.\"\n\nShe held it up and I suddenly realised that it was sex lube.\n\n\"I doubt it.\" I told her. \"Not with the way I feel when we get together.\"\n\nShe put it down between us and reached back into the bag, carefully withdrawing something wrapped inside a towel.\n\n\"I took them out of their packets so I could make sure they were clean and sterile before you got here, just in case.\"\n\n'They'? I thought to myself, momentarily thrown by the plural. She placed the cloth on the sofa between us and partially opened the little parcel. Inside were two ordinary seven inch vibrators, though the word ordinary didn't apply to the adrenalin surge that I felt when I understood they were intended as one each. My mouth went completely dry as I realised that one of them was highly likely to go inside me.\n\n\"I didn't get anything fancy, with you not being used to them.\" Hayley explained as she handed one to me. \n\nI held the seven inches of white plastic in my hand as if it was a sacred relic, gazing down in awe and hardly daring to touch it. It was silly, and I knew it was silly, but I felt like Hayley had just casually handed me the most expensive jewel in the world.\n\n\"Twist the base.\" She told me, seeing my ignorance all over my face.\n\nThe base was knurled like a nut and using my other hand I turned it a little. The vibe purred into life, surprising me so much I almost dropped it. Hayley giggled at my dazed face. \n\nI experimented, turning the base a little more, feeling the vibrations intensify, and then get even stronger as I turned it full up. This was a whole new sensation to me and I wondered what it would feel like deep inside my pussy, so I gripped its shaft in my hand, trying to comprehend the feelings it could generate. I wasn't sure if I would like it, but then I hadn't been sure that I'd enjoy showing myself off to a neighbour, but I did. I turned the toy off and passed it back, trying to keep my face neutral. She took it and placed it with the other back on the towel.\n\n\"Wait until you see this.\" \n\nThis time she unrolled the towel completely, unfolding it until she revealed the thing she had promised, the thing that I both dreaded and secretly hoped for. Made of soft, flexible, semitransparent, red jelly, she had in her hands a long double ended dildo. At each end of the thick bendy shaft was a mushroomed cock head, one for me and one for her. I stared at it and quivered with suppressed excitement, wanting to touch it and yet fearing the impression I would be giving.\n\n\"What do you think?\" She asked.\n\n\"Jesus, Hayley. I'm not sure I'm ready for that sort of thing.\"\n\n\"Wouldn't you like to try it?\"\n\nI thought about it, staring at its length and picturing its use in my mind.\n\n\"Yes.\" I paused, seeking the words. \"It's just that I don't know if I dare. I haven't even tried a single one yet.\"\n\n\"Well, you know it's there if you want to.\" She looked up brightly, replacing her purchases into the bag. \"Right, I'm ready, what about you?\"\n\nOf course I was ready; I was feeling as randy as hell. \"Whenever you are.\"\n\nMy heart flipped as we stood up together to undress, but again Hayley had a new twist to put on it. I kicked my shoes off, but she put her hand up in the universal stop sign to prevent me going further.\n\n\"How about we undress each other?\" She asked, reaching forward to my blouse buttons before I had the chance to argue.\n\nIt was strange just standing there with Hayley's cute little pixie face looking slightly up at me with an enquiring 'do you like it' look, and her fingers lightly and quite incidentally touching me as they deftly undid my buttons. I smiled in answer to her unasked question and let her slide the blouse from my shoulders and down my arms, this time with her palms running softly over my skin as she lifted it away.\n\nWith my blouse now on a sofa opposite, she put her hands on my arms and silently turned me around to unhook my bra and, again sliding it gently from my shoulders, let it join my blouse. I was now naked to the waist and feeling rather vulnerable if very excited and turned on. Standing passively to be undressed in this way was something I'd never experienced before from anyone, let alone a woman. I know she had made no attempt to touch me at all, but the very fact that she hadn't just seem to add to the eroticism of my disrobing.\n\nOnce again she turned me around, guiding me with gentle hands until I was turned once more to directly face her, my breasts jutting out before me with the nipples prominently erect, making me feel slightly self-conscious that my arousal was so obviously displayed.\n\nShe gazed at me, looking openly at my breasts but saying nothing, maintaining the gaze so long that I wondered what she was going to do. It was as if she was summoning the nerve to maybe touch or even kiss them, but I will never know, because eventually she dragged her eyes away and looked down to where her fingers were fiddling with my belt, trying to undo the buckle. Now I didn't know if I felt disappointed or relieved that she hadn't touched me.\n\nMy belt finally surrendered and she dropped to her knees to wriggle the tight, figure enhancing jeans that I had deliberately worn, over my fairly full hips. This time she couldn't be as gentle, but still it felt nice to have her fingertips pressed harder against me as she worked the denim over my bottom. I hadn't worn them with the idea of Hayley removing them, but I was beginning to feel glad I had. I placed my hand on her shoulder to steady myself as she eased first one, and then the other, leg over my feet to free them and toss them on top of the rest of my clothes.\n\nAll I was wearing now were my very brief and flimsy panties, panties that I had subconsciously chosen to be as sexy as possible, again without knowing how close Hayley would come to them. And once again my emotions were mixed, a part of me glad to show my sensual side to Hayley and part of me worried about what she would think. Ridiculous really, considering what we had already done in each others company and the stated purpose for what we were doing then, but then I was more used to having sex than being sexy.\n\nHayley didn't hesitate. Looking briefly at my body she hooked her fingers into the top of my panties and, with a single smooth sweep of her hands down my legs, pushed them to my ankles, waiting there for me to lift each foot in turn to release them.\n\nMy panties joined everything else and I stood there before her, totally naked and suddenly feeling very shy, as if she had never seen me in the nude before. Hayley herself didn't help matters, she remained on her knees before me, holding me at arms length with her hands gripping my hips, and blatantly studied my body, her gaze wandering from my feet to my hair, but lingering embarrassingly on my breasts and pussy. I just stood and gazed down at her, unable to make myself move and unsure if I should enjoy her appraisal or be uncomfortable with it.\n\n\"You know.\" She said finally. \"I wish I had a figure like yours. You're so feminine and I've got the figure of a boy.\"\n\nI smiled with pleasure at her compliment.\n\n\"I'll swap you anytime you like.\" I told her. \"I've got a super-size figure and you've got a supermodel figure.\n\nYes, I know I'm not fat, but compared to her trim little figure I'm far more rounded. The fact is that I'm about where most women are, but she's where most women want to be.\n\n\"No, you're beautiful and I'm skinny.\" She contradicted me.\n\nI wasn't about to get into a debate about it, so I reached down and eased her to her feet by the arms.\n\n\"My turn, I think, before I get tired of being the only one naked around here.\"\n\nHayley grinned, nodded agreement, and then raised her arms as a signal for me to pull her sweatshirt style top over her head. It was simple to remove, sliding up and over her head easily and then, as she bent forward a little to assist, down her arms to join my clothes on the second sofa. \n\nI don't know why, maybe an inhibition kicking in, but rather than remove her bra at that point and uncover her breasts, I knelt down and pulled at the cord holding her jogging bottoms. Once that was done they required no removing as such, they simply slipped down as soon as they were loosened and gathered around her ankles, with only the actual removal left for me to do. It's odd, but I was extremely conscious of my boobs swinging as I tossed them to the side.\n\nI looked to get up, but Hayley put her hand on my shoulder and pressed down in an obvious sign to stay where I was. I looked up at her for an explanation.\n\n\"You might as well take my knickers off while you're there.\" She said simply.\n\nHayley wasn't really wearing knickers; the little thong she was wearing hardly qualifies as clothing at all, allowing her shaven labia to show around the tiny triangle of material that tried to cover her pussy. It, and she, looked gorgeous and I had to consciously stop myself from simply pulling the flimsy piece of cloth from her body rather than rolling it gently down her legs and over her feet.\n\nShe had kept her hand on my shoulder to balance herself when she raised each foot, and she seemed quite happy for it to remain there, keeping my face level with her crotch. For my part, I was in no rush to stand up again. I was looking straight at a the top of her shaven slit and thinking that very soon I would be seeing it wide open and wet under the caress of her busy fingers. Even now I could see that she was already turned on, the visible part of her labia pink and swollen and I thought I could smell her special scent, the wonderful musky smell of womanly arousal. I felt my own pussy respond to her, knowing the pleasure we were both looking forward to.\n\nI dragged my attention from her slit and then climbed to my feet as she allowed her hand to slip from my shoulder, only then remembering that I had yet to take off her bra. I put my hands on her shoulders to turn her around, but she resisted my purpose and, short of using brute strength to spin her around, I could only reach around her back from the front to unhook her bra clip. To do this I had to step forward and I was very conscious that we were almost embracing, our bodies carefully an inch apart as I eased her bra from her shoulders and gave her breasts their freedom. Hayley looked into my eyes, and I could read the amusement hers held at my unwillingness to make contact. \n\nI leaned to one side to flip her bra onto our now complete pile of clothes, and then straightened to stand in front of her, feeling weirdly defiant, as if she was expecting me to move away out of range and I wasn't going to. \n\nWe stood gazing at each other for a few seconds, until she took that small step forward and we were in each others arms. If there could be such a description as platonically sexual, then that would describe our embrace perfectly. We didn't kiss, or even attempt to, nor did we touch each other in any way intimately. It was just a friend's embrace, but without the barrier of clothes, so that I was aware of my pubic hair brushing against her stomach and her hard little nipples were digging into the softness of my breasts.\n\nI for one had not expected that embrace, and I don't really think that Hayley had, but although it lasted for only a matter of seconds it did more for our friendship than anything else could. Inhibitions from now on could remain with our clothes, on another sofa.\n\nIt was Hayley who broke the embrace, stepping back and the taking my hand to lead me the short distance back to our customary sofa.\n\n\"Come on.\" She told me. \"Let's have a little fun.\"\n\nWe placed ourselves in the same position as on the last occasion, sitting in opposite corners of the sofa but diagonally along it with our legs wide, one foot on the floor and one interlaced with each other along the sofa back. It was good to see her pussy at last, and to know that I was indeed right in assuming that she was turned on. Her outer lips were engorged and pink, peeled back to reveal the inside of her slit, her clit already peeping out of its cover and her tunnel wide and slick with juices.\n\nShe saw me looking and intentionally kept her hand away for me to give it a good, long, and very stimulating inspection. I did the same, letting her stare directly between my legs; knowing that I was just as hot as she was and taking pleasure in letting her see it.\n\n\"God, you're wet.\" She stated finally.\n\n\"You too.\" I told her, reaching down between my legs and spreading my lips further open to her view.",
        "\"I think I might have wasted the price of the lube.\" She giggled, doing exactly the same.\n\nFor a few seconds we just stared silently at each others pussies, but then Hayley began to stroke her clit with the tip of her middle finger, holding herself open with the first and third. It was a lovely sight and I began to do the same, feeling those little electric jolts of pleasure rush through me every time my fingernail caught the end of my clit.\n\nWe played in silence apart from tiny gasps whenever our actions sent a particularly strong shock through us, watching each other becoming more and more aroused. I would have been quite happy to carry on until we both orgasmed, the thrill of watching and being watched was getting to me as always, but Hayley wanted to try our new toys.\n\n\"Shall we see what they're like?\" She asked, without specifying what.\n\nI knew exactly what she meant and my heart flipped at the thought. When she had shown me what she had bought I had been very unsure, mainly because I'd never tried one before, but as I'd thought about it the more excited I'd become. Now I was more than ready, especially with Hayley watching me. What a kinky exhibitionist I had become!\n\n\"Let's!\"\n\nShe reached down beside the sofa and took the two vibrators from the bag, holding them up before her, one in each hand.\n\n\"Left or right?\" She asked smiling that naughty smile of hers.\n\n\"Oh, I don't know.\" I felt suddenly flustered. \"Either. Well, the right one then.\"\n\nShe held out her right hand and I took the vibe from her, feeling the hard cold plastic on my palm.\n\n\"Whichever you chose would have been the 'right' one, wouldn't it?\" She asked me laughingly.\n\n\"Yes.\" I answered with a smile as her pun sank in. \"I suppose it would.\"\n\n\"Ready?\"\n\n\"Yes. I think!\"\n\nWe both sat back to watch each other using a vibrator, me because I wanted to see what to do, and Hayley, I think because she wanted to see my reactions. \n\nHayley turned hers on and waited for me to do the same. Then, as soon as it we both had them gently buzzing, she used her fingers to open herself up once more and placed the tip against her clit, a sudden sucked in breath showing that the thing was working for her at least.\n\nRather tentatively I followed suit, parting my lips and then hesitating with the tip of the vibe just millimetres from my erect and eager little clit. I touched the vibrator to myself, gasping at the sensations that immediately ran through me. God, it felt so damn good. I can honestly say that I'd not expected it to feel that good, but the quivering, trembling feelings in my clit blew me away. I just had to press my vibe harder against my clit and to begin moving it in tiny little circles around the tip.\n\n\"Nice?\"\n\nHaley's breathless voice brought me back out of orbit. For a minute or so I had completely forgotten about her, so strong was the novelty of the vibrations.\n\n\"God, yes!\" I told her through pleasure gritted teeth.\n\nShe looked across at me with an almost maternal pleasure on her face, satisfied at having introduced me to another form of ecstasy, one that I'd never really thought of. \n\nShe was now holding her own vibrator pointing downwards with the side of the point held flat against her clit, her hips twitching slightly from the feelings it was generating. I watched her turn the base of the vibe a little further and heard the soft buzzing increase, getting louder and stronger as she turned the switch further. Her head was now thrown back against the sofa and her hips began thrusting back at the vibe. It would not be long before she came.\n\n\"God, they always bring me off pronto.\" She gasped, still gazing at the ceiling and now sliding the vibe up and down the length of her slit. \"I think I'm going to cum.\"\n\nI imitated her, turning the vibe over so that the slightly flatter side of the tip was pressed into my slit, flat against my clit, and then I turned it up. My God, if it had been good before it was bloody fantastic then. The stronger vibrations penetrated right through me, making even my pelvis tremble from the pleasure. I couldn't help it, I squeezed my eyes shut against the intensity of it all and groaned my pleasure, the first signs of an orgasm developing already.\n\n\"I'm nearly cumming. Look at me.\" \n\nHayley's voice cut through my arousal again, forcing me to open my eyes and look across at where her bottom was bouncing on the seat as her climax approached. She was still sliding the vibe along her slit, pushing it hard against her, and I could see it glistening with her juices, the pale plastic wet and shining almost along its entire length. Her pelvis was raising her from the sofa, her instincts making her push upwards as she groaned at her impending orgasm. \n\nShe opened her own eyes and looked at me, smiling and making sure I was watching her. Then, as another wave of pleasure raced through her body, she gasped out loud and pushed the vibe down her slit, pressing the point harder to herself so that when it reached her vagina it could do nothing except enter her. The point found her hole and slid in, making an audible slithering noise and causing Hayley to gasp once again. She moved her grip and pressed the vibrator deep inside herself, fucking herself with it.\n\n\"Oh God.\" She gasped as she pushed the vibe deeper into her tunnel, not needing to say more.\n\nAgain I followed Hayley's lead; guiding the point of my own vibrator to the entrance to my vagina, wondering what the false cock could feel like that made her react so strongly. I must admit that I felt a little tentative at the idea of pushing the hard unyielding plaything into my tender parts, but right then I needed something inside me. Paul would fuck me as hard as he possibly could and I would love it, but his cock wasn't made of rigid unfeeling plastic.\n\nI watched to see how Hayley coped with it, knowing that however hard she used it was safe enough for me to copy. She was moving her position, hunching forward just a little until she could place her palm flat on the base of her vibe and, just holding it with her fingers, she thrust it full depth inside herself. I looked on with pure lust as she gripped the base, pulled it out and then thrust it straight back in until only the knurled end protruded from her pussy. She gasped happily once more and I could see that, as long as she held it straight, Hayley was obviously having no problems.\n\n\"Come on, Sue. You do it. Put it in, you'll enjoy it, really.\" \n\nHer encouragement was all I needed. I felt the hard tip at my entrance and pushed gently, cautiously, feeling the length of the vibrator slide inside me, bringing those exquisite vibrations right within my body. Now I was experiencing what Hayley was experiencing, and she was right. It was absolutely fantastic, the sensations simply rippled through my being, almost as if something or someone was making my womb and my cervix quiver with delight. I loved it; I couldn't believe how good it was. I wanted it as deep in me as it would go, and I too adopted the upright position that Hayley had taken.\n\n\"It's nice doing this with you there.\" She told me suddenly, her voice thick and tight from arousal. \"I love having you watch me doing it.\"\n\n\"I think it's gorgeous watching each other.\" I replied, stating the obvious and bringing a smile to her face.\n\nI was surprised at how it felt. Maybe I was expecting it to feel cold, perhaps alien even, but in fact it felt fine, designed for the job. I had no reservations now; I pushed it into me as far as it would go, only keeping enough outside of my body to retain a grip upon. Now, with the flat of my hand I pushed it deep into my pussy, trying to reach my cervix, trying to take all of it, and then I pulled it back out only to push its throbbing length all the way in again. \n\nI looked across for Hayley's approval, to see her looking at what I was doing and perhaps to hear her say well done, but she was way past that now. Hayley was in the middle of one almighty orgasm, so strong and powerful that she couldn't even vocalise how she felt. She was bent over as if in pain, her hand ramming the vibrator into her time and time again, while her mouth opened and closed silently, carried away on a river of ecstasy. Her legs and body were trembling and bucking under the force of her climax. She saw me looking and smiled a crookedly delighted smile, happy that I could see her cumming and knowing that in a moment she would see me in the same state.\n\nMy own climax came within seconds, hitting me like the proverbial express train. It was one of the strongest, longest, most earth shattering orgasms I had ever had. I could do nothing except ride with it, my palm still pushing the vibrator into me, keeping it hard up inside me so that all the wonderful, pussy wetting sensations stayed as deep as they could. I could feel my own body trembling just like Hayley's had done, my legs feeling as if I'd run a marathon and my stomach muscles quivering and shaking under the stimulation of that seven inch piece of plastic. I wanted it to go on forever, but then I became scared that it might, until eventually it subsided, leaving me, just like Hayley, a spent heap of trembling flesh. \n\nI flopped backwards on the sofa and looked across at her, letting my pussy slowly expel the vibrator by itself and wondering what I could say that would convey how I felt.\n\n\"You don't need to say anything.\" She gasped, still panting but grinning like a Cheshire cat. \"Your face says it all.\"\n\nWe spent the next couple of minutes in silent contemplation of what we'd just done, reliving the fabulous sensations and watching each others orgasm in our minds. Slowly we got our breathing back under control and then wiped away the sheen of sweat that had bloomed over both our bodies, looking into each others eyes and then looking down at each others swollen and sopping pussies. I never thought I'd find another woman's pussy attractive, but seeing the slick and used state of Hayley's and knowing that mine must look the same was quite a turn on. It was, I suppose, the evidence of how badly behaved we'd just been that did it, badly behaved in other people's eyes that is.\n\n\"You look well fucked.\" I told Hayley, surprising myself with my comment.\n\n\"You too. But then I guess we both are, even if we did have to do it ourselves.\"\n\nI thought about it for a moment or two, remembering seeing the vibrator pistoning so easily in and out of Hayley's hole, shining wet and slippery with her juices. A little shudder of pleasure rippled through me and I realised that I still felt randy - I wanted to do it again.\n\n\"Are you up for a repeat?\" I asked her, feeling almost embarrassed by my own forwardness.\n\nShe reached between my legs and picked up the vibrator, putting it to her lips for a quick lick and a little kiss before placing it alongside her own in the bag beside her.\n\n\"Not with that I'm not.\" \n\nI thought for a moment that she was too used up to do anything more, but then she reached down and came up with the double ended dildo, showing it to me with a lascivious smile.\n\n\"But I wouldn't mind trying this out. How about you?\"\n\nThe way I felt then, I was up for pretty much anything.\n\n\"Try and stop me!\"\n\nWe moved around into the position we'd been in the last time, facing each other along the length of the sofa, legs open and interlaced so that our feet were alongside each others bodies. This left our pussies facing each other and about a foot or so apart, just right for Hayley to reach between us with the dildo.\n\nI watched as she searched for her opening with the tip of the dildo, sliding it along her still shining wet slit until it found its way inside her. Then she fed it slowly into her vagina, her eyes fixed on mine to be sure that I was looking at her. \n\nIt felt so delightfully wicked to be watching her insert the bendy red dildo into herself, naughty in the same way that our first impulsive masturbation had been. I'm sure she did it deliberately slowly, feeding it in inch by inch until it was inside her as far as it could possibly go. She closed her eyes momentarily in satisfaction and then pointed the other end towards me.\n\n\"Come a bit closer.\" \n\nI could hear the excitement in her voice as I shuffled an inch or two nearer until I felt the tip of the dildo make contact with me.\n\n\"Are you sure you're ready for this?\" \n\nHer question was more of a tease than a real question. She knew damn well I was ready. All I wanted was to feel it slide inside me. I nodded excitedly.\n\n\"Do it.\" I told her.\n\nShe pushed gently and I felt the first inch or so of mushroom headed dildo slip into my passage.\n\n\"How does that feel?\" She asked me, gazing down to where the end of the dildo disappeared into my pussy, something I wished I could see.\n\n\"Fantastic.\" I told her, meaning it.\n\n\"Want some more?\" She was teasing me again.\n\n\"Only if you can spare it.\" \n\n\"Oh, I might let you have an inch or two.\"\n\nShe pushed the dildo into me a little bit further. I knew how far by watching it slide out of her the equal amount, its surface all wet and shiny from being inside her. I wondered briefly if our juices would get mixed together as it slid from one pussy to the other, and for some silly reason I hoped that they would. It felt so edgy, so depraved almost, to be sharing a dildo with another woman, especially feeling her threading it into my tunnel, and I loved the whole feeling.\n\n\"Now come forward. Move forward as far as you can until its right up inside you.\"\n\nI must have looked at her questioningly, because she went on to explain.\n\n\"You're a bit too far away. I don't want it to come out of me when I push it into you.\"\n\nEven the explanation sent sexy little quivers through me. I shuffled closer until there was only about five or six inches between my pussy and Hayley's, and I could feel the end of the dildo right up inside me, pressing against my cervix.\n\n\"Christ, but this feels good!\" She exclaimed. \"It really is the best sort of sharing, isn't it?\"\n\nI could feel my pussy throbbing, clenching onto the shaft of the dildo. Sharing was about the last thing on my pussy's mind, but I knew exactly what Hayley meant. The very fact of sharing the dildo was making it seem so much sexier. Our most intimate parts were only a few inches apart long the shaft of a length of squidgy red jelly. Such a fucking turn on.\n\n\"Incredible.\" I nodded in agreement. \"It's making me as hot as hell.\"\n\nHayley still had her hand on the shaft that connected us, and now she began to push and pull the dildo from one to the other, thrusting it into herself as she pulled it from me and vice versa. I relaxed back, letting her do it and absorbing the sensation of being fucked by a dildo held by another woman. It was, in a way, as if she was masturbating me, and that made it unbelievably sexy.\n\nHer legs were spread wide with her thighs resting over mine and her feet up by my sides, giving me a marvellous view of her pussy. I could see her pussy lips wrapped around the dildo, moving in and out as it was plunged into her. I just watched, feeling the dildo being thrust into me and seeing it going into her, my hands finding their way onto her thighs and stroking the firm smooth skin. \n\nI was getting more and more turned on, both by the sensations of the thing inside me and by the situation we were in. Sitting there with my legs wide, feeling a dildo moving in and out of me and watching a sexy woman display herself to me felt like the most erotic thing possible. Even seeing her hand moving between us as she thrust the dildo into each pussy in turn was sexy, teasingly sexy when it came within millimetres of touching me before moving away again. At that moment I felt so glad we'd begun our little sessions and I hoped to God that they would just keep happening.\n\n\"This going to make me cum again.\" Hayley told me abruptly. \"I can feel one brewing.\"\n\n\"Please, not yet. I'm not ready yet.\" \n\nI desperately wanted to cum on the other end of Hayley's dildo, but although I was feeling as horny as hell, I just wasn't quite ready to cum again. To my alarm she began to pump it in and out of us harder and faster.\n\n\"Don't worry.\" She gasped. \"I won't leave you high, I promise. But right now I need to cum.\"\n\nI leaned back and closed my eyes, hoping that the sensations would sweep me along to a climax before Hayley was finished, feeling her ram it into me deeper and faster as her approaching orgasm took control and made her fuck herself harder. \n\nThen I felt the side of her hand make accidental contact with my pussy as she pushed the dildo into me. I know it wasn't deliberate, and I don't think she even realised, but it sent a shock through me like a jolt of electricity, instantly winding my arousal up even further. \n\nThe dildo was pulled back out and her hand went away, only to come back and touch me once more, a gentle rap around my entrance. I pushed forward slightly, and involuntary movement to ensure firmer contact next time. I couldn't believe that I was wordlessly encouraging another woman to touch me sexually, but right then I wanted to feel her hand against me, maybe even inside me if that should happen. God, I felt so fucking hot and so fucking adventurous it was scary. \n\nHayley was very close to cumming now and her hips were beginning to rise and fall as she pushed against the dildo. The gap between us shrank, the dildo took on different angles as it entered me and her hand banged harder and more frequently against my slit, sometimes low and sometimes so high that she caught my clit and sent another delightful jolt through me. I pulled my legs back, hooking my hands behind my knees to hold them out of the way and give her the freedom to do as she wanted.\n\nI could feel my own climax building now, but Hayley's was on her and it was too late. Our movements had trapped her hand between our two pussies as we pressed ourselves closer together. The dildo was deep inside both of us, penetrating us both as far as it could go, with only around a couple of inches separating us, a couple of inches too much for me right then. Stimulation now came from her jerking pelvis as her orgasm swept through her, the movements making the dildo jump and bend inside me, pressing itself hard against the top of my passage as she pushed against it, wriggling herself onto it in an effort to envelop more of its length. It felt so intimate, as if I was sharing her climax, feeling the ecstasy that she was feeling although my own climax was still waiting in the wings.\n\nSuddenly she flopped back, spent, her orgasm passing ands leaving her shaking and trembling on the sofa before me. She opened her eyes, looked at me and gave a tiny little smile.\n\n\"Sue, that was so fucking good. I've never ever felt like that.\" She was gasping the words out, still trying to get her breath back and conquer her heaving chest. \n\n\"God, it was good to feel you push back at me.\" \n\nShe smiled again and then glanced down, suddenly realising that her hand was still the filling of a pussy sandwich.\n\n\"Sorry. I didn't realise.\" She jerked her hand away guiltily.\n\n\"Don't worry.\" I told her as I lowered my legs back to either side of her. \"I didn't mind. It was nice actually.\"\n\n\"You haven't cum yet, have you?\" She asked, not quite sure of the answer.\n\n\"Not this time, no.\"\n\n\"Give me a minute and I'll help you get there.\" \n\nShe was still sprawled back, red faced and panting, a glow of sweat over her skin. I didn't know quite what she had in mind, and I don't think I minded. I put my hand between my legs and began to softly play with my clit, careful not to touch Hayley's pussy, but wanting to be daringly close to it.\n\nHayley watched me for a few minutes as I played with myself before her, the dildo still connecting us, and then she leaned over and reached into her bag, pulling out one of the two vibes that we'd used earlier.",
        "\"I'm not sure if this one's mine or yours, but it doesn't matter, does it?\"\n\nI shook my head mutely.\n\n\"Open up.\" She instructed me, rolling her eyes in mock frustration when I looked at her blankly.\n\n\"Open yourself up.\" She repeated, looking pointedly at my pussy and making a scissors motion with her fingers.\n\nThe penny dropped and I separated my labia exposing my clit, and making the way the dildo still penetrated me even more obvious.\n\n\"This won't hurt a bit.\" She teased, turning on the vibe and reaching forward to place the tip against the end of my clit.\n\nWhen I'd used the vibe on myself a little earlier I'd simply rested or even pressed the thing against me, but Hayley just very softly touched it to my flesh creating the most exquisite sensations, a kind of electrical tingling that had me moaning within seconds.\n\n\"Nice?\" She asked, smiling triumphantly.\n\n\"God, yes.\" I told her.\n\n\"Good. Now pull your legs back again.\"\n\nI did as I was told, bending my legs back and holding them with my hands hooked behind my knees, wondering why she needed me to be quite so exposed.\n\n\"I think this will work.\" She remarked, without telling me what it was.\n\nI watched as she reached between us with her free hand, taking hold of the dildo just where it entered her, and then wriggling back a little, holding it still with her hand pressed over her pussy and pulling it a little way out of my vagina. Then, still just touching me with the vibrator, she began to thrust with her hips, quick little jerks that sent the dildo back inside up me to bump against the end of my passage.\n\nIn effect I was being fucked by this beautiful woman and her artificial cock, and at the same time having my clit treated to the most fantastic vibrations I could imagine. I was already moaning softly from the feelings, but now every time the dildo was thrust into me an 'oh' of delight burst from my mouth. The feelings were incredible and my orgasm, which had laid dormant since Hayley had enjoyed hers, suddenly came to the fore, filling my pelvis with a beautiful heat that spread rapidly through my body. \"I'm going to cum.\" I told her through tightly clenched teeth, the last word terminated with another gasped 'oh' as the dildo was rammed back inside me.\n\nShe increased the force of her thrusts, banging it into me hard and sharp, and I responded by trying to push forward, my legs waving awkwardly in the air. Abruptly, coinciding with a strong thrust of the dildo, my orgasm exploded within me, forcing a moan that sounded almost agonised as a fireball detonated inside my pussy and sent wave after wave of pure ecstasy rippling outwards from my centre. I jerked and shuddered, dislodging the vibrator but making up for it with the feeling of the dildo up inside me that was jerked and jolted around in sympathy. \n\nIt ended as rapidly as it began. It was not a long rolling orgasm that kept on and on, just a short powerful explosion that had all my muscles turn to water and left me absolutely shaking, and jerking sporadically as orgasmic aftershocks crashed through my pelvis. I'd never, ever felt anything like it. Now I knew just how Barberella felt in the Orgasmatron of cult film fame. \n\nTo say I was washed-out afterwards was an understatement. I just let my legs fall back around Hayley and sprawled back in my seat, trying vainly to get enough breath together to tell how good it was and to thank her. It was several minutes before I managed to gasp out a 'Jesus, Hayley!\" and make her giggle in the process.\n\nShe looked at me contentedly as if satisfied with a job well done and then, gently sliding the dildo out of both of our bodies, she placed it, with the vibe, in her bag and reached over to take my hand in hers.\n\n\"I take it you enjoyed that?\"\n\n\"Did I ever!\" I gasped out, still unable to cope with a full sentence.\n\n\"You didn't mind what I did to you?\"\n\nI shook my head. \"No, not a bit.\"\n\n\"Good, I liked it too.\" She looked me seriously in the face. \"You wouldn't mind if it happened again, then?\"\n\n\"Anytime you like.\" I told her, remembering my resolution to let her touch me if she wanted to."
    ],
    "authorname": "Otazel",
    "tags": [],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/busy-fingers-ch-03"
}
{
    "title": "How to Pew Vol. 01",
    "pages": [
        "I answer a lot of questions on military issues so I thought It'd be fun to put together a few primers on it covering different aspects. Since this is pretty narrow -- based on my experience in US forces, there is a lot more to cover than I have, so feel free to throw in comments with your own thoughts, or even put together a specific primer of your own, that'd be cool too. Thanks to sbrooks103x, as always for editing these otherwise-unreadable tracts. \n\n*****\n\n How to Pew. Volume 1.  \n\n Some More or Less Random Thoughts on Writing Military Fiction \n\nMilitary fiction can be, if you'll pardon the pun, a bit of a minefield. Even if you've served in the military, your experience is very different from pretty much every other man or woman who has served. Country, time period, branch of service, type of unit, military specialty and sheer luck will make everyone's perceptions different, so there is no easy one-size-fits-all set of rules, but there are some helpful things to keep in mind. \n\nNote: This one is about the basics, so there's no real primer on tactics, etc. It's also mostly on the Modern era -- WWI to Present or so.\n\n Everything is Different \n\nEvery service is different, every time is different: Army to USMC to Navy to Coast Guard to Air Force, every service has its own standard behavior and its own set of rules, both written and unwritten. The rules vary by time and place. An Army unit full of draftees in the Vietnam War in 1969 is incredibly different from the same unit full of volunteers in Iraq in 2008. Unless you were there, you'll have to look things up to get it right.\n\nEvery job is different: There are a lot of different jobs. Not everybody is primarily a shooter -- there are finance guys, medical, administrative, etc. Most of them have basic combat skills, but we're not talking Delta Force if you have a graphic designer. That said, even a National Guard \"Weekend Warrior\" who works as a grocery store manager may well have three tours kicking in doors in Iraq, and is likely far more dangerous in a gunfight than the average gang-banger. Don't sell Reserves or Guard short, some of those units perform exceptionally well. \n\n Joining up \n\nEvery service has some version of \"basic\" or \"boot\" training. The intent of it is to do some physical conditioning, but mostly to get you started integrating into military culture. Learn to be part of a team, recognize rank insignia, learn some traditions, and start to think in military terms. Basic skills, like map reading, taking care of your feet on marches and which end of the weapon the bullets come out of are taught here. This is usually 8 to 14 weeks, depending on service, time period, etc., and it usually isn't a lot of fun at all. This is followed by courses on whatever specific job you are going to perform is -- anything from infantry to cook to supply clerk to chaplain's aide. \n\nThe schooling will never quite stop, by the way. If you stay in, you get rank and skill specific schools of various kinds.\n\n The Army \n\nI did my twenty years in the Army, enlisted. Mostly in rather non-traditional units, but I worked with many of the active divisions. That said, my experience will not exactly match anyone else in the Army. \n\nFrankly, I'm also a little concerned for the Army. Every place I ever went, some First Sergeant or Sergeant Major told me, \"Well, that's the way we do it here, but that's not how it's done in the real Army.\" As far as I can tell, I never managed to actually find the real Army. I always assumed it was somewhere at Fort Hood, Fort Bragg or Fort Benning, but in every one of those places, I was told the exact same thing.\n\nSo where the hell is the real Army? We seem to have lost it, and that's really bad, because the Army is expensive and like everything else that's expensive, somebody is signed for that shit. We'll probably all get called back and have to go look for it. Hopefully it's just stashed in a warehouse somewhere and not being sold on eBay.\n\n The Air Force \n\nI worked with both flying units and non-flying units. I can't begin to describe the difference, it's almost like two completely different organizations. While the ground units are very professional, often in a sort of \"corporate\" manner, for lack of a better term, the flying units are extremely motivated, extremely focused and very combat oriented. \n\n The Navy \n\nI did a couple floats with the Navy and worked with a couple of their flying units. Like the Air Force, there are different \"Navies\" that seem to be completely different organizations -- Shore, Fleet, and Brown Shoe (Aviation). Each has its own personality and quirks. The Navy also has weird rituals. The ceremony for crossing the equator to convert Pollywogs to Shellbacks is across several Navies and merchant ships; to us non-sailors, it is just strange as hell. \n\n The USMC \n\nThe Marine Corps is smaller than the other services, and get much of their support from the Department of the Navy, so they have a higher combat troop to support troop ratio. The standard of training is very high and they are generally outstanding. They are, however, far more parochial than the other services and do not always work and play well with them, and that is occasionally problematic. \n\n The Coast Guard \n\nThese guys work for Homeland Security these days, with the ability to be placed under the Navy if necessary. They do all kinds of things, but be aware they are actually credentialed federal law enforcement.\n\n Special Operations \n\nLet's get to this -- a lot of writers like to center their stories on Special Operations because it is cool. All Special Operations arose from the need for extremely highly trained personnel to exploit tactical situations where larger units would not be useable. \n\nArmy Delta Force aka the Combat Applications Group (CAG), Navy SEALs, Army Special Forces, Army Rangers, Air Force Combat Control Teams, Air Force Pararescue (PJs) and MARSOC Marines (Marine Raiders) are all examples of special operations units. There are more, some of which don't even have official names, and some of which disappear like illusions when you try to look directly at them. Each of these units has a very specific mission set and very specific capabilities. None of them are easy to get into, and there's no relaxing once you are in, you have to keep an edge. Crazy and brave doesn't cut it in these units, you have to be a professional, and act like one. \n\nTake the time to learn a little bit. It doesn't take long to read a Wikipedia entry on whatever type of unit you are using. Then you can avoid things like \"USMC Ranger.\" \n\nWhile we are at it, the term \"Operator\" really applies to CAG/Delta Force. The term differentiates the shooter from the support personnel in the organization (although in CAG, the support personnel are pretty damn good shooters too). Most other organizations have their own designators: SEALs are SEALs, Rangers are Rangers, and so on. The term \"Operator\" has become a little more widely applied than it originally was, but Delta certainly has the claim on the term.\n\nIntelligence \"activities\" have \"Operatives,\" not Operators; mind you, they are damned dangerous by any reasonable measure. Annoyingly, they generally appear to be more like the boring IT guy than anything dangerous or cool until they shoot you. They also tend to be much less idealistic and much more brutally pragmatic. \n\nNone of these are large organizations, most are actually pretty small. There are probably less than 100,000 special operations troops of all types on active duty in the US military. \n\nThere are about 4,000 Navy SEALs on active duty and if you read fiction, it is pretty clear that their wives have no idea and often think they are pathetic weaklings. \n\nYeahhhhh. No. \n\nWhether it is SEALs, Delta Force, SAS, or any of dozens of special organizations or activities, the spouses always have some idea. With all the training they have to do, it's pretty obvious. Wives talk and form all kinds of networks so they always know more than they should anyway. Most of these guys are also pretty obvious alpha males as well and that usually doesn't change when they get out. Despite an insane divorce rate due to long separations and heavy training schedules, most are also married. Stable people tend to get married, and these units, especially the more elite ones, want stable people. You don't give this kind of training to some gung-ho screw-ball, you need him to have his head on straight.\n\nIncidentally, the vast majority of these special mission unit types - Operators, operatives, SEALS, Rangers, etc. - are enlisted guys, because that is where the necessary skill sets reside. Sergeants, Petty Officers, etc. Recruiting to these units takes various forms, from open try-outs to targeted recruitment for skill sets. Getting through the selection course for these organizations is incredibly tough. The higher echelon units such as CAG and SF often get their recruits from the Ranger Regiment. \n\n Combat  \n\nFor the most part, war is pretty boring. It is uncomfortable - too hot, too cold, too dirty, whatever -- but boring. The majority of the time is spent sitting, driving or walking around waiting for something to happen. \n\nActual combat itself is, however, incredibly intense. Every firefight is different; some are remarkably noisy with thousands and thousands of rounds fired, explosions, air support and hours and hours of fighting for an advantage. Some are nearly silent, with a few, usually lethal, shots fired and end in seconds, with barely a ruffle of activity.\n\n How to win a firefight \n\nBring many friends. Numbers are important. It's a math problem; the more you can subtract from their side faster, the more likely you are to win.\n\nBring many long guns -- rifles - with lots of ammo. Rifles shoot farther and harder. Use them.\n\nAim your shots and shoot first if possible. Preferably before they are even aware you are there.\n\nHide from bullets: use solid, bullet-proof cover once the lead starts flying. Your car is not bullet proof, except maybe the engine block. Neither are most house walls, couches or refrigerator doors.\n\nBravery does not make you bulletproof. Nor does exercise, cool uniforms or operator beards. Bullets do not care. They can't, they are just chunks of metal moving at very high speeds and your goal is to not be in their path. Because at the intersection of physics and anatomy, you lose. And getting shot hurts a lot. \n\nWin by any means necessary because these days, firefights aren't about honor or reputation. The winner gets to write down what happened anyway. Be the winner. \n\n Weapons \n\nWeapons vary by unit, time period and personnel. I'm not going into special purpose anti-tank missiles, flamethrowers or crew served/team weapons like the M240B or M60; if you need that kind of info, look it up. For the most part there are standard individual weapons in use in every military, at every time period, and they are relatively easy to figure out. Once you figure out what they are, if you aren't familiar with them, look them up on YouTube; somebody is geeking on them, no matter what they are. Probably that crazy Russian guy. \n\nBut there are some basics to know.  Bullets  don't actually slam people backward through windows, not even shotgun slugs. It's just physics, velocity times mass is momentum, a measure of the energy you are transferring to the target, but the mass of a bullet is very small, an ounce or less. By the time you put enough velocity behind that bullet to have the energy to pick up a human body, it's moving so fast that the energy doesn't really transfer to the target, it goes right through without slowing down. People that are shot tend sort of sag to the ground most of the time. You cannot curve bullet flight paths enough to matter by twisting, swinging or otherwise moving the gun while firing. Bullet flight paths do curve as a function of their ballistic properties, but if you are taking the time to explain ballistics in a story, you should really think about how much you want to do that; it is very math-y and can be boring to explain.  Do not confuse Automatic with Semi-automatic.  In Automatic fire, you pull the trigger and bullets keep coming out until you release it, run out of ammo or the gun jams; this is a machine gun. Semi-automatic means one trigger pull equals one round. \n\n Sniper rifles  are long, heavy and typically slow firing. They have carefully set optical sights -- scopes -- and are usually fired from prone with a bipod or rest of some kind. A shot at a particular man-sized target from over about 500 meters is a difficult shot for most shooters, but that's just getting started for a sniper; kills have been made to over one and a half miles. These typically fire heavier rounds than the usual military rifle. Heavy deer hunting rifles are essentially sniper rifles. Most of these will pierce civilian-available body armor pretty easily, and even military level IV armor at closer ranges. Within the modern historical period, most are bolt action or semi-automatic. They have limited ammo capacity and a slow rate of fire. The .50 caliber round is popular in some units, but that results in a very heavy rifle, nearly twice the weight of other sniper rifles. The M82, M24, and the M25 are American military examples of sniper rifles. Some \"sniper rifles\" are actually  Designated Marksmen Rifles; these are for ranges between 500 and 800 meters, maybe a bit further, beyond the reach of the average assault rifle, but not the insane ranges of the heavier sniper rifles. Russian SVDs and the Romanian PSL are examples.\n\n Main battle rifles  are rare these days, but were common until the mid 20th Century when assault rifles took over as the standard issue weapon. Main battle rifles overlap with sniper rifles in many armies and many conflicts, the main difference being optics in some time periods. The American M1 Garand and Russian Moisin-Nagant are examples of these from World War Two; the Belgian FN-FAL is a more recent example.\n\n Carbines  are smaller lighter rifles typically used by second line troops or airborne troops. They are lighter, more portable and still provide significant firepower. The M1 Carbine is an example from World War Two. Generally, these have been phased out in favor of the assault rifle.\n\n Assault Rifles  took over as everyone recognized that most firefights took place at less than 100 meters and took another look at the carbines that had been issued to airborne troops as a possible basic weapon. Assault rifles are lighter, carbine sized weapons, generally smaller caliber than main battle rifles, with high magazine capacity and rapid rate of fire, with select fire including single round and burst or full automatic capability. Full automatic fire is rarely used by individual soldiers in the US or UK military -- it's considered indiscriminate and unprofessional, and it is easy to run out of ammo. It is very important to note that in all the history of warfare, nobody has ever won a fight because they ran out of ammo first; they may have won one despite it, but not because of it. The M16/M4 series of AR-15 type weapons and the AK-47 family of weapons are the most common examples of these weapons. This is not the same thing as the ill-defined \"assault weapon\" you see in the news, although the confusion is probably deliberate. The main legal difference is that assault rifles have either burst fire or fully automatic, which is not generally legal without a prohibitively expensive license.\n\n Submachine guns  preceded the assault rifle, and typically had a low basis of issue, although in World War Two, the Soviet Union equipped entire regiments with them. Basically a scaled up, fully automatic pistol, they tend to be most useful in urban combat. There is overlap with assault rifles, but a decent rule of thumb is that if the cartridge is a pistol cartridge, it's a submachine gun. They are still used, though it is generally for very specific missions. They can be as small as an Ingram MAC-10 or Mini-Uzi or as large as a Thompson submachine gun. The German MP-40, Russian PPSh-41 and the H&K MP-5 are examples.\n\nHandguns are pretty much last resorts on a modern battle field -- most are nowhere near as lethal as a carbine, assault rifle, or main battle rifle. There are instances of men being shot in the head with .45 caliber bullets multiple times to little effect. They just aren't in the same league with long guns. Even submachine guns using the same round are more dangerous because they have longer barrels which equates to more power. If you are using a handgun things have probably gone really, really wrong. There are exceptions to this, places where a handgun is optimal -- like a crawlspace, but they are generally rare. For God's sake, do not hold them sideways; the sights are on top and the ejection mechanism is designed to work best when the gun is upright. In the US military, the M1911 .45 was the standard for several years, followed by the Beretta 9mm. A version of the Sig Sauer P320 is being phased in now. \n\nThese will vary in special operations units, where there is a lot more leeway, although, they will likely use a standard military issue round. Glocks, while not official, are very popular in some units. They're basic, very reliable and inexpensive; practically disposable. With a trigger tip safety, you pull the trigger, the bullet comes out. No thumb or grip safeties. There is no real craft to them, but they are very functional and very reliable. \n\n Automatics.  Nearly all modern military handguns are self-loading semiautomatic pistols aka \"automatics.\" These cycle up bullets from a magazine -- usually, but not always located in the grip -- using the energy of the recoil from the previous round. Automatics have several advantages over revolvers from a military point of view. More bullets and easier to reload quickly being chief among them.\n\n Revolvers  are less likely to jam, and can be fired from inside a coat pocket or handbag without a spent shell casing causing all kinds of problems. They also do not leave shell cases with pesky fingerprints laying around. They are relatively rare in military use these days, but have solid applications in other arenas.\n\n Magazines and clips. To avoid the baying of purists, use \"magazine\" when referring to the (usually) metal box of bullets that gets jammed into the rifles and pistols to feed them. Clips is often taken to refer to \"charger clips\" and \"stripper clips\" that hold cartridges in line together to be fed into a rifle with a fixed (non-removable) magazine. There's actually a lot of confusion -- the original documents for the development of the 1911 .45 described what purists would clearly consider a detachable box magazine as a clip. But it's best to avoid the whole issue; just use magazine most of the time. Unless you are writing a historical piece, it should do. \n\n Grenades. There are several types of grenades tear gas, concussion, incendiary, flash bang, but the most common in military work is the fragmentation grenade. These do not make big fiery explosions like the movies, they make short sharp blasts with little flame. They also usually throw fragments out with remarkably lethal results for several meters in radius. Most of them can throw fragments farther than a man can throw a grenade. \n\nSuppressors or Silencers  do not remove all the sound from a shot. They significantly reduce the loudness and change the sound in ways that make it sound less like a gunshot, but it isn't like the movies. \n\nKnives/Bladed Weapons. If handguns are a last resort, knives are a \"what the holy fuck have I done wrong now\" weapon on the modern battlefield. Still, it can happen in extreme cases; if it does, stick the pointy end of the knife into the other guy. Repeatedly. Kidney, liver, up under the rib cage into the lungs and, if you are lucky, the heart. Do not try to stab through the ribcage, it is there as a sort of protective armor, so it can and does interfere with your goal. Do this quickly because there is absolutely no room for error now that you've gotten yourself into this. Prison yard rush, pin him with your weight and stick him. Leave the fancy dancing around shit for the movies, you need this over with right fucking now, because things have gone to hell or you wouldn't be doing this at all.",
        "Slashing is much less effective than stabbing. It is very bloody and quite dramatic, but it takes too long for the blood loss to work, and biomechanical slashes to the tendons are not always reliable. Stab them. The British used to teach their soldier to only use a couple of inches of their bayonet -- \"just the tip\" into the abdomen, because that was usually enough. \n\nChopping with a sword, machete, kukri, or axe is fine, just try to do enough damage to drop them immediately. \n\nDo not \"knife fight\" on a modern battlefield. If he has a knife, you grab a brick or a rock and use its ballistic advantage. Or use a club or a tire iron or... whatever. The certainty of engaging with a knife is that somebody is going to get cut and you don't want to be that somebody. \n\nThroat cutting. This is done to remove sentries and it is very, very rare now. Killing an armed sentry this way requires stealth, nerves of steel, and not a little luck. Do not grab him, reach across his neck and draw the knife from ear to ear. If you try to do it that way, odds are the blade will ride over the windpipe, and he will both fight and make plenty of noise. Noise is a bad idea right now or you would just shoot him. Instead, come up behind Sentry, cup his chin with left hand and pull up, while kicking the back of his right knee (reverse if you are left handed). Ram the knife through his neck, side to side, just behind the windpipe, blade edge out, then shove the knife forward, opening him up like a Pez dispenser. Be careful not to stab your own arm in the process of doing this. With the blood supply to the brain cut off, he will be unconscious in about 9 seconds, dead in a minute or so. This is very messy work and you will want to wash up before you eat dinner. \n\nThe Chinese Spoon is a more difficult process, but with more certain results. Use a spike or stiletto type knife and drive it under the center back base of the skull up into the brain. The result here is nearly instantaneous death, but there's a chance you'll hit too low and get the tip stuck in the spine or too high and blade tip will ride over the skull in a bloody but ineffective wound. It is even more rarely used, and nearly always only used by elite troops.\n\nHand to Hand Combat  \n\nMartial arts are very popular with service members, but there are application problems on the actual battlefield. The average fighting load of a Soldier in Afghanistan turned out to be about 62.43 pounds, with an approach march load of 94.98 pounds. \n\nReread that last bit, it's important. Basically, the approach march load is equivalent to carrying one Viet Cong. \n\nThe body armor vest alone weighs 30-35 pounds depending on the size. The helmet weighs in at around 2 to 3 pounds or so. Not wearing the armor and helmet is a really stupid idea, they actually stop bullets and, as mentioned above, getting hit by bullets hurts a lot. \n\nAll of this added weight makes a jumping spinning heel kick a bit difficult to execute. While there are hand to hand combat systems designed around the tactical military gear, they tend towards single-opponent styles. Subduing grips are useful in handling prisoners, but for the most part, martial arts are problematic. Most veterans lean towards a \"prison yard rush-and-crush\" where all the added weight of their gear is actually useful. Your helmet can be used to beat an opponent unconscious, if necessary.\n\nHistoric Weapons \n\nResearch is essential in any historic period, weapons can be particularly difficult to get right. One simple example -- ever notice the old civil war and early Wild West movies where the shooter points the revolver at the sky while cocking it? Most people assume that is because it is easier to cock the single action revolvers that way, and to a degree, that is true; but there is another even more critical reason. In cap and ball revolvers, if the revolver is cocked level, the spent percussion cap can fall into the hammer mechanism, jamming it, leaving you essentially unarmed in the middle of a gun fight. Good to know.\n\nA lot of things like that are lost, and you really need to consult an expert if you aren't familiar with historic weapons, but there are a lot of experts around in various societies and they are usually really eager to share their expertise.\n\nFinal thoughts  \n\nThis was really written to clear some space in my head, but I hope this is some help to somebody Or at least entertains a bit. I am planning on a few more volumes covering different things as time allows."
    ],
    "authorname": "Todd172",
    "tags": [
        "how to",
        "action adventure",
        "military",
        "violent",
        "writing",
        "research"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/how-to-pew-vol-01"
}
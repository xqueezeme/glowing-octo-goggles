{
    "title": "The Cum Contest",
    "pages": [
        "I woke up with this story in my head, literally narrating it to myself, as if someone had been whispering it in my ear while I slept. \n\nEveryone here is over the age of 18.\n\n\"This is the challenge,\" I said, raising my right hand to reveal a small, egg-shaped vibrator.\n\nMy five female friends stared back at me. They were each sitting in a folding chair, set up in a semi-circle in my living room. Their individual expressions told me everything I needed to know.\n\nKelly glared defiant. Megan smiled at me, wickedly. Abby cocked her eyebrow in curiosity. Grace's face twisted in disgust. Devon wouldn't even meet my eye. Each woman was very different, yet each was also quite beautiful in her own, unique way.\n\nWe all thought we understood what was about to happen. None of us could imagine what was coming next.\n\n*\n\nIt started with a silly argument.\n\nI was sitting in the living room, pants around my ankles, watching porn on the big screen TV. I was expecting to have the apartment to myself for at least another hour.\n\nThen, out of nowhere, the front door flew open, revealing my longtime roommate, Kelly. The petite brunette, still in her tight workout clothes that showed off her taut body, stared at me, aghast. Her duffle and her jaw dropped to the ground.\n\nBefore Kelly could recover, I scrambled back to my bedroom -- a throw pillow covering my most private place. I quickly pulled on pants, then came back out, sheepish and unfulfilled. Kelly was already in the process of making dinner. She didn't even look my way.\n\nI told my roommate I was sorry, but she just smiled and went back to what she was doing. I sat on the couch, waiting for the inevitable onslaught of questions and accusations. But Kelly didn't do any of that.\n\nAt first, I thought she was angry, but the longer the evening continued, the more I became convinced that Kelly was fine with it. That my big reveal wasn't that big a deal, and she was ready to move on from it. Maybe I really did have the coolest roommate ever?\n\nThe next day, after I'd finally convinced myself that I was safe, it all came crashing down.\n\n\"You know that porn's not real, right?\" Kelly asked.\n\nWe were sitting in our usual booth at the diner. It was a languid Sunday morning, and we were still waiting for our friends to show up for our weekly breakfast get together. The diner was a tiny place, a former train car with a white-tiled floor and floral curtains. It was early, so the place wasn't too busy.\n\nMy roommate was wearing a dark green tank top and a pair of navy mesh shorts. Her brown hair was tied back in a tight ponytail. Her arms flexed, muscular, as she poured her coffee. I thought she was playing around, but my roommate just stared back at me, deadly serious. I cleared my throat, but it came out as a nervous choke.\n\nKelly and I had basically been best friends since college. After graduation, we moved into the city and decided to rent a place together. I know a lot of people thought we were hooking up, but romance had never entered the picture or even came close. We just didn't see each other that way. Though, with how Kelly was glaring at me now, I wondered if our friendship was going to survive for much longer.\n\n\"Those videos fake everything,\" Kelly said as if she was explaining the reality of professional wrestling to an 8-year-old boy.\n\n\"Some of it's real,\" I said, feeling weirdly defensive. \"The amateur stuff.\"\n\nKelly shook her head at me. \"They're performing for the camera.\"\n\n\"Well, of course, but...\"\n\n\"Ugh, what are you two arguing about now?\"\n\nI looked up and saw Megan standing over our table. Broad and curvy, the auburn-haired woman gave us one of her wide, trademark smiles, then sat next to Kelly across from me. She was wearing a yellow, summery dress that made her chest look even larger than usual and flared nicely over her wide hips.\n\n\"Seriously, if you two are going to argue like an old married couple, you might as well get hitched,\" Megan said. She was my friend Shawn's long-time girlfriend and she'd been a part of our group since they started dating. Boisterous, with a body to match, Megan was always the loudest person in the room, and we loved her for it.\n\n\"I caught TJ watching porn yesterday,\" Kelly said, getting right to the point.\n\n\"Nice!\" Megan said, \"Was his thing out? Was it huge? I bet it was huge.\"\n\nI blushed. Kelly shook her head.\n\n\"See? That comment is the perfect example of what happens when you watch porn all the time,\" my athletic roommate said, \"It gives you unrealistic expectations.\"\n\n\"I could have a big dick,\" I said.\n\n\"Yes, baby, I'm sure your mean old monster is ready to bust out at any minute,\" Kelly said, the disdain dripping from her voice.\n\n\"Sure, porn's fake,\" Megan said, \"But it's still fun.\"\n\nAgain, Kelly glared over at her friend. \"You're not helping,\" my roommate said.\n\n\"Sorry,\" Megan replied, but she said it with a twinkle in her eye.\n\n\"If you think sex is like porn, when you have actual sex it'll never live up to that,\" Kelly said, continuing her lecture.\n\n\"I know what sex is like,\" I said, \"I've had sex.\"\n\n\"Porn will make it seem less good,\" Kelly said. I looked at Megan for help, but the auburn-haired girl just grinned. I think she was enjoying my misery as much as Kelly now. \"Girls won't ride your cock for forty minutes, even if you could last that long. At that point, it gets painful.\"\n\n\"That is true,\" Megan said, \"Porn's also, like, really anti-girl.\"\n\n\"I know right?\" Kelly said, \"Most of the time, it's not even about pleasing the woman. And even if it is? So fake. Nobody orgasms like that, I promise you.\"\n\n\"Is Santa Claus pretend, too?\" I asked, mocking.\n\n\"I actually just read the most interesting thing about the St. Nicholas mythology.\"\n\nAbby had arrived. The stick-skinny girl was wearing a t-shirt showing the Periodic Table of Cats. Her top was so tight, it made her normally modest-sized chest look liable to explode onto the table, though I doubted she was even aware of the effect. Abby had her poker straight, white-blonde hair tied up in a professional-looking bun. She fixed her glasses as she took a seat next to me.\n\n\"Did you see that article, as well?\" Abby asked, scooching in.\n\n\"No, we're talking about orgasms,\" Megan said.\n\n\"Fascinating,\" Abby said. She was Megan's best friend, though the two of them couldn't be less alike. Abby was going for her doctorate in organic chemistry. Megan mixed drinks at the local bar. Abby was a hardcore reader. Megan had, famously, once thrown a book at a cop when she was drunk. Abby loved playing D&amp;D. Megan had double... Well, anyway. Somehow the two of them got along like they were meant for each other.\n\nBefore Kelly could resume her rant on pornography and the evils thereof, Devon showed up. The tiny girl with tight blonde curls gave all of us a little wave. She was wearing an oversized, fluffy white sweater and tan capris.\n\n\"Hi,\" she said, then climbed over all of us to sit in the back corner of the booth. Devon was Abby's roommate and terminally shy.\n\n\"As I was saying,\" Kelly said, as if the arrival of our friends was a rude interruption, \"Women don't cum in real life like they do in porn.\"\n\nDevon gasped, grabbed one of the giant diner menus, and promptly popped it up in front of herself. The other three women ignored her, nodding along like this was normal conversation.\n\n\"Some women cum like that,\" I said. I got three glares in response. I was pretty sure I could feel Devon's eyes burning me through the menu, as well.\n\n\"They don't,\" Kelly said, firmly.\n\n\"Porn is not an accurate portrayal of the female orgasm,\" Abby said.\n\n\"Sorry dude,\" Megan said.\n\n\"Can we please not talk about this in public?\" Devon said through her menu.\n\n\"Women don't make noises like that,\" Kelly said, \"We don't scream out 'I'm cumming!' or 'fuck me!' or anything like that.\"\n\n\"Or do the whole yes-yes-yes-yes thing,\" Megan said, \"That's just weird.\"\n\n\"Some women make noise when they cum,\" I said. Again, I don't know how I ended up arguing for the actuality of porn. It would have been easier to defend the existence of Bigfoot. But there I was.\n\n\"Do you make noise during sex, TJ?\" Kelly asked, sipping her coffee. As if this was the kind of thing people asked each other all the time.\n\n\"I mean, I might grunt or gasp some,\" I said.\n\n\"Exactly,\" Kelly said, \"So why do you think it's different for women? Do you honestly believe your penis has magical sound-making powers?\"\n\n\"If it did you would tell us right?\" Megan asked. \"Because that would be awesome.\"\n\n\"It is decidedly unlikely,\" Abby said.\n\n\"Can we please stop talking about, you know, this stuff?\" Devon asked. Her hands gripped the menu so tightly, the lamination started to crack.\n\n\"I get it,\" I said, \"Porn is fake. It's all pretend. But women make noise during sex. My ex would say all kinds of crazy stuff.\"\n\n\"She was faking it,\" Kelly said.\n\n\"Never,\" I said. I looked at the other women for help.\n\n\"I mean, she was probably faking it?\" Megan said.\n\n\"It does seem to fit the evidence being presented,\" Abby said, \"Nor would she be the first woman to falsify her pleasure in order to accomplish the cessation of carnal activities.\"\n\nEven Devon lowered her menu to give me a knowing nod. Her tight, golden ringlets bounced along with her chin.\n\n\"Just wait till Shawn gets here,\" I said, \"He'll take my side, you'll see.\"\n\n\"Much like your ex, my boyfriend isn't coming,\" Megan said with a wicked grin. \"He got caught up in some weekend work thing.\"\n\nGreat, I was already used to being outnumbered at these breakfasts, but now I was completely on my own. And the girls were ganging up on me.\n\n\"Don't feel bad,\" Kelly said, \"Most men wouldn't know a woman's orgasm if it slapped them in the dick. That's the whole problem with porn.\"\n\n\"Women make noise during sex,\" I repeated, but even I could hear the whine in my voice. It was my argument of last resort, so I clung tight. Even as I slipped right over the cliff. \"I know when I've made a woman cum.\"\n\n\"It's OK, TJ,\" Kelly said, \"This is exactly the point I've been trying to make all morning. I'm trying to help you.\"\n\n\"I can prove it,\" I said.\n\n\"How?\" Kelly asked, \"If it involves watching porn, it won't work.\"\n\n\"I mean, maybe it'll work,\" Megan said, \"We should try it and find out.\"\n\n\"I'd like to do a little test,\" I said, \"To prove I'm right.\"\n\n\"Like an experiment?\" Abby asked, unable to contain her excitement.\n\n\"We're not all fucking you,\" Kelly said flatly.\n\n\"Hi guys, sorry I'm...\" Grace started, then stopped as Kelly's last statement sunk in. She stood over the table and crossed her arms. \"What's going on?\" The tall redhead had shown up wearing a professional looking green blouse and a dark skirt. Her diamond earrings twinkled incongruently in the yellowed light of the diner.\n\n\"TJ here was just making a fool of himself,\" Kelly said, \"About women's orgasms.\"\n\n\"This is what I get for being late,\" Grace said, huffily, as she sat at the end of the table. \"All of you get out of control.\" Grace was Kelly's best friend from grade school. Of everyone, they'd known each other the longest. But, ironically, she didn't really fit in with the rest of the group. Still, she was nice enough, and she usually bought breakfast for us, so we kept her around.\n\n\"TJ believes that women make noises during sex, as in the pornographic videos disseminated across the Internet,\" Abby said.\n\n\"Oh honey, that's not true,\" Grace said, patting my hand patronizingly.\n\n\"He says he can prove it,\" Megan said.\n\nKelly snorted and shook her head. She clearly felt that she'd won the argument, which only pressed me harder to champion my side.\n\n\"I suggest a little contest,\" I said. I rubbed my hands together, not unlike a cartoon supervillain. See, I knew the secret to getting Kelly to agree to almost anything. And if Kelly tipped, the rest of the group would topple. It was all too easy. \"You say women are quiet when they cum. I think you're wrong. So, let's make a little wager. Put our money where our mouths are, as it were.\"\n\nKelly's head popped up and I knew I had her. My roommate was a smart, strong woman who kept her cool most of the tim. But introduce even the slightest bit of competition and she turned into a crazy woman.\n\n\"What are you thinking?\" Kelly asked\n\nI couldn't keep the smirk off my face.\n\n*\n\nThe next week passed swiftly. I expected Kelly to hector me the whole time, but instead, she acted like nothing had happened. Again, I wondered if maybe she'd decided to forget the whole thing. But when Sunday rolled back around, she spent the whole morning reminding me that we were skipping our usual brunch so that I could give her all my money.\n\n\"You're an idiot,\" she told me, flat out.\n\n\"We'll see,\" I said, giving her a playful wink.\n\nThe intervening time had given me time to collect my supplies, but also to seriously rethink what I'd agreed to. Not the bet, exactly. I was strangely confident I'd win, though I can't say where that conviction came from.\n\nIn one way or another, I'd known each of these women for a long time. Our relationships had always been completely platonic. I thought of the girls as more than friends, closer to family. They didn't comprise our entire group -- there were other outlying friends of both sexes, various boyfriends and girlfriends, that sort of thing -- but the five women, Shawn, and myself were the core. That's also the way I thought of my group of friends, as well: core. They were the central, most important part of my life.\n\nI know it's weird to have my social group be almost completely composed of the opposite sex and not have any of them be a former girlfriend or whatever. It could be a pain sometimes. I felt left out of a lot of conversations and I had a few ex-girlfriends who absolutely couldn't handle the setup. But for the most part, I wouldn't have it any other way.\n\nDid I find the women attractive? Of course. Kelly, Megan, Abby, Devon, and Grace were each quite beautiful and often very sexy. There were weeks where I'd be crushing on one or the other, but I kept it all to myself. Our friendships were too important to me to risk losing. Also, they were all part of a package deal. If things went wrong with one of them, I would lose all of them. That kind of risk was enough to keep me from gambling.\n\nThus, the stakes for that Sunday were impossibly high -- well beyond the money we'd all agreed to bet against each other. It was a stupid game, I knew, and I kept waiting for someone to step in the way of things. But, like an avalanche, once things started going, stopping it seemed impossible. All there was to do was stare up at the disaster I'd wrought and hope nothing got too damaged.\n\nWhen the time arrived, I setup the five folding chairs, all facing away from the TV, and pushed the rest of our furniture out of the way. The women arrived together, which made things less awkward. Sort of. Kelly set out drinks and that helped normalize our situation even more.\n\nFinally, once everyone was seated and eyeing me expectantly, I explained how everything was going to work.\n\n\"This is the challenge,\" I said, \"This will decide the argument of whether women make noises during sex. Each of you will get one of these.\" I held up the egg-shaped vibrator. \"I get the controls. We'll set the timer for thirty minutes. You can cum as many times as you want during that time, but you must do it silently. If I can tell you're having an orgasm -- if I call you out -- you lose. Last one standing wins the cash. If you all go out, and you will, the money is mine.\"\n\nWe'd agreed that it would cost five-hundred dollars to get into the game. I knew, for some of the women, that was not a trivial amount of money. That was the point though, to really have to risk something. Otherwise, no one would take it seriously. Plus, who could turn down the opportunity to win three grand? Hell, that was two months' rent for most of us.\n\nAfter I finished explaining how the game would go, I expected the reality of what we were about to do would sink in and the women would start to have second thoughts. Instead, the only thing the girls had doubts about, was who was going to win the money.\n\n\"You can just hand me the three grand now,\" Kelly said. \"It's already over.\"\n\n\"You'll be splitting it with me for sure,\" Megan said.\n\n\"You sure Shawn's going to be OK with that?\" Kelly asked, referencing Megan's boyfriend.\n\n\"Are you kidding?\" Megan asked, \"When I tell him about it tonight, he's going to be begging me for pics.\"\n\n\"This is so embarrassing,\" Grace said.\n\n\"Then don't play,\" Kelly said.\n\n\"No way, I need that money,\" Grace said, \"Daddy's making me pay back the credit card bill again. Character building, my butt.\"\n\n\"You won't get the full 3K anyway,\" Kelly said, \"At best we'll be splitting it four ways.\"\n\n\"I am forced to reach that conclusion, as well,\" Abby said.\n\n\"Wait, why only four?\" Devon asked.\n\n\"Because we all know you're a screamer,\" Kelly said, then cackled.\n\n\"What? No...\" Devon's face went so hot you could roast marshmallows off it.\n\n\"It's always the quiet ones,\" Megan said.\n\n\"I concur,\" Abby said.\n\nIt was time. I reached into the box on the counter next to me and distributed the five vibrating eggs. The room went silent.\n\n\"Whenever you're ready,\" I said.\n\n\"Can't we do this someplace private?\" Devon asked.\n\n\"I need to see you put them in,\" I said, \"Otherwise you could cheat.\"\n\n\"Jeez, it's no big deal,\" Megan said. She hiked up her yellow dress, revealing a pair of white, thong panties. She saw me staring and gave me a lascivious grin, tossing back her long, wavy, reddish-brown hair. Like it was nothing, Megan pulled her underwear to the side and, 'pop,' in went the egg. All set, the buxom woman flopped back down into her seat, smiling like the cat that got the canary. Or the pussy that ate the gold-colored egg, in any case.\n\n\"Fuck it,\" Kelly said. My athletic roommate stood up and threw off her mesh shorts. She had on a pair of navy-blue briefs, closer to men's athletic underwear. She pulled them down, stuffed the egg inside herself, and replaced her panties. Then she flopped back down, keeping her short, shapely legs crossed.\n\nAbby was next. She slid her jeans down her skinny legs. She was wearing a pair of perfectly functional, bikini cut, crimson underwear. She pulled them to the side and inserted the egg. Matching Kelly, the blonde girl left her slacks piled on the floor. She fixed her glasses, then sat back.\n\nGrace rolled her eyes. She lifted up her skirt to reveal a pair of lacy, black panties. Very tasteful and probably expensive as all get out. She put the egg up to her opening, then made a slightly pained face.\n\n\"Hm,\" she said.\n\n\"You need some lube?\" I asked.\n\n\"It's fine,\" Grace said. She worked the egg back and forth into her sex. The prim, pretty girl was practically putting on a performance for us. Finally, she got the egg inside and flipped her skirt back down over her bare legs.\n\nDevon was last to go and she looked ready to cry. She played nervously with the buttons of her jeans, but she seemed incapable of undoing them.\n\n\"I can't,\" she said.\n\n\"Seriously, what's the big deal, we all did it,\" Kelly said, \"You don't have a magical unicorn cunt, Devon. It's no different than the other four we've already seen.\"\n\n\"I know, I just... I'm out. I can't do this. I quit. Enjoy my money.\" Devon stood up from her chair and marched out of the room. Her blonde curls bounced jauntily as she went. I honestly felt bad for the girl. I'd always had a soft spot for her, she was so sweet and shy. Also, I knew that, of all of us, Devon was the least able to afford the buy-in. But I didn't know what to say that would stop her.\n\nJust as Devon was about to reach the door, Megan jumped in front of her. Silently, she put her hands on the quiet girl's shoulders and steered her back to her seat.",
        "\"I've got you,\" Megan said. She stood in front of Devon, so I couldn't see. I heard the zip noise of Devon opening her jeans. A little gasp. Then Megan stepped away. Devon had pulled her jeans back up and cinched them shut, safely locking herself away.\n\n\"She's all good,\" Megan said. The look in her eyes made it clear I'd be taking her word for it.\n\n\"Awesome,\" I said.\n\nI held the remote up so everyone could see. The women all shifted slightly, getting comfortable. All that build-up had led to this moment.\n\n\"Ready?\" I asked.\n\nAll five women nodded. Nervous, yet eager. Excited, but afraid.\n\n\"Set?\"\n\nI rested my thumb on the switch, giving the girls one last moment to give up.\n\n\"GO!\"\n\nI flicked the controls up to a one. A low buzzing noise filled the room as five separate vibrators all kicked into gear.\n\n\"Oh!\" Devon said.\n\nMegan trembled.\n\nGrace's face twisted slightly.\n\nKelly gripped her armrest.\n\nAbby smiled.\n\nThe game was on.\n\nWatching all five women slowly warm up was arousing in and of itself. While they were all clearly feeling the effects of something vibrating in their vaginas, no one seemed particularly amped up. I needed them all to be way more excited if I was going to win.\n\nBut I knew that going too fast could lead to a crash. Even though it would cost me precious time, I knew from experience that the girls had to warm up slowly or they'd never accelerate at all. A little patience now would take me a long way later.\n\nThe women slowly settled into their seats. Even the constant buzzing seemed to quiet down. I found a stool by the kitchen counter and sat on it, a little smile playing on my lips. I'd underestimated how sexy all of this would be, seeing these five lovely ladies get their pleasure. The fact that they were all desperate to hide the signs only made it more exciting.\n\n\"Give up yet?\" Kelly asked me.\n\nI responded by flicking the control up to two.\n\n\"Ah!\" Devon gasped. I wondered if the girls were right -- the timid girl already seemed like she was about to go off like a timebomb. If Devon was this expressive at level two, I could only imagine.\n\nThe rest of the women stayed mostly calm. Grace swished her legs back and forth slightly. Kelly tightened her grip on the armrest. Megan, on the other hand, lay back. Legs spread. Head lolling. Eyes squeezed shut. There was no doubt that she was undergoing something. Abby was the opposite. She casually examined her nails, then fixed her glasses and crossed her legs. But even so, I saw the blonde's thin face was turning slightly pink, and a trickle of sweat ran down her cheek, despite the fact that it was quite cool in the apartment.\n\nEven more sexy than the sights, however, were the sounds. The room was a chorus of deep breaths -- like five air conditioners running on full -- occasionally punctuated by little 'hms' and 'hahs.' Nothing to point out, just yet, but still plenty of fun.\n\nDespite the obviously good signs, I decided to risk waiting a little longer. I knew I had to time this perfectly. Like a performer spinning five plates, I was responsible for pleasuring five different pussies. Each, probably, with its own unique needs. Too fast and everyone would be out of it. Too slow and we'd never reach the peak. I needed all five women to go over the top in a telltale way, and that required a certain amount of precision.\n\nInstead, I enjoyed what was already going on around me. Though I was only friends with these women, I couldn't deny that watching their reactions to the stimulation was nothing short of spectacular. Kelly's lithe, tight body. Megan's killer curves. Grace's freckled skin and long, feminine form. Abby, the archetypal skinny blonde. Devon, cute with golden curls. The fact that I knew each of them -- their quirks and talents, strengths and fears -- only made them more attractive to me in this moment.\n\nOf course, as I was watching each of these incredible women for their arousal, I was sure that they could also see mine, growing obviously in my pants. I sat slightly to the side on the stool and let my hands hang over my groin. I didn't think a boner would be inappropriate in a situation like this, but I also didn't want to discover that I was wrong.\n\nFinally, after a quiet moment when everyone's muscles seemed to go slack, I asked, \"Ready for more?\"\n\n\"Are you?\" Kelly asked, defiant. I'd somehow forgotten how hard it was to do anything competitive with my roommate. As I said, she was normally a calm, collected person. But get games involved and suddenly she'd lose control and turn into an enormous, green, rage monster.\n\nWe'd had to ban all video games in the apartment after she'd thrown our console out the window during a particularly heated game of Wii Bowling. Her final words, \"Fuck you and your turkey,\" had become a rallying cry for the entire group when anything went wrong. So yes, as much as I had to admit I was enjoying all this, I was a little worried that I'd already gone too far. Much as Grace could be annoying sometimes, I didn't want to see Kelly toss her out the window.\n\nFeeling like I might be taking my own life into my hands, I ticked the controller up to three. The buzzing got louder, deeper. The girls all made little noises, too, but nothing more. After all that buildup, it was a bit of a letdown.\n\nI looked up at the clock. I was running short on time, and I doubted any of the girls were even close to cumming, let alone accidentally making me aware of it. For the first time, I worried that I might actually lose.\n\nI decided to take a risk. I knew pushing too fast could end the experience, turning pleasure into pain. Or even just annoyance. To this point, I'd also been warning the women of each increase. I'd thought it was the polite thing to do. But it also allowed them to brace themselves. I needed something aggressive and unanticipated.\n\nI gave them both.\n\nHolding the remote to my side, blocking it with my body, I thumbed the vibration up two more levels. Now I got the reaction I was looking for. Grace let out a loud, rasping gasp. Kelly sucked in her breath so hard I thought she might fall over backward. Devon's eyes squeezed shut.\n\n\"That... was a little. Aggressive,\" Abby said. Her voice trembled as she spoke. Like someone was pounding on her back.\n\n\"Again,\" Megan demanded. I didn't think it was gamesmanship. The auburn-haired woman seemed to be in another place entirely. Despite the small, fold out chair, Megan was practically recumbent, her legs straight out and stiff.\n\n\"Not y...\" Grace said, right as I ticked up the eggs once more. Her words dissembled into a low groan. For a moment, I thought the proper redhead had cum right there, but I couldn't be sure. I thought about taking the chance and calling her out. After all, I was on the clock.\n\nBut we'd all agreed that, if I incorrectly identified an orgasm, the game was over. Otherwise, I could just say it every minute or so, no matter what I saw. I couldn't be confident about Grace's cum, so I let it go.\n\nI knew I'd made the right decision almost immediately because, not a moment later, Megan let out a short, sharp squeak. The curvy brunette grabbed her own massive tit over her dress, squeezing her nipple so hard it hurt me. She squealed again, then let out a long, low groan.\n\n\"Holy fuck,\" Kelly said, looking over at her friend. The other women, obviously in the throes, all fought to turn and stare at Megan, now writhing in her chair.\n\nMegan didn't pause. She started pumping her legs up and down, like humping an invisible man. She rolled her head back and forth. Her eyes blew up wide and her mouth dropped open. She croaked out a long, silent scream, back arching upward. Then she dropped limp into the chair.\n\n\"Megan, that's you,\" I said. I expected her to express some frustration, but instead Megan just gave a little post-orgasm shiver, then gave the room a grin. Using the little string, she pulled the egg out of herself. It was still buzzing, angrily.\n\n\"Well, that was lovely,\" Megan said as she slowly stood, pinching her prodigious tit one last time. To my surprise, she wasn't disappointed that she'd lost. In fact, she seemed inordinately pleased with herself. \"We have to do that again sometime.\"\n\nMegan dropped the egg on the counter, waved goodbye to the rest of the girls, and walked right out of our apartment, humming a little tune to herself. That was another rule. Once you were out, you were out. It was too easy for the women to tank each other if they stayed.\n\nAs the door closed behind Megan, I took stock of the situation. The setting on the eggs was up to seven. I still had roughly twenty minutes left to catch the four other friends. Based on how the women were all reacting now, I wasn't all that worried. The vibrators were doing their jobs, yes. But the room's reaction to Megan's obvious orgasm was clearly even more exciting.\n\nKelly sat forward, white knuckled and panting heavily. My roommate's face was wet with sweat. Grace rocked back and forth in her chair, looking anywhere but at me. Her pinkish face was rapidly losing color. Abby was biting down on her lip so hard I worried she might draw blood. The muscles around her neck were taught as bowstrings. Devon kept twitching in place. The cute girl made cute little squeaks with every breath.\n\nBut it was more than that. I'd expected that the vibrations would get the girls off, but I hadn't counted on the fact that sitting and watching each other come close to cumming would be such a turn-on. I noticed them glancing at each other and quickly looking away, like just the sight could send them to heaven.\n\nThe little sounds they all made were also incredible. Even though nothing was overt, obviously, the tiny mewls and gasps were quite enough to get each other worked up. Even the smell of the room, it reeked of sex, had to be helping them along. I'm not sure we could have devised a better torture chamber. Everything around them was encouraging the women to let loose, but that was the one thing they weren't allowed to do.\n\nThe only question in my mind at that moment, was who was going over the top next. Again, my bet was on Devon. I knew she wasn't a virgin; she'd had a serious high school boyfriend once upon a time. But, from the way she talked about sex, she might as well have been. I doubted the petite blonde woman had ever used a toy before that day. Part of me wondered if she'd ever even had an orgasm. If Devon did cum, I had no doubt she would be unable to conceal it.\n\nBut if Devon didn't do the deed, then certainly Kelly was quickly coming up. My roommate, despite her earlier protestations, could be quite vocal. Living with her for two years had taught me that (she would say that she was faking it in those instances, but I was dubious). Certainly, Kelly was the kind of girl who had a deep passion for a lot of things, and sex was on that list. The athletic girl -- perched on her chair like it might detonate while also gripping the armrests like they were the one thing in the room that wouldn't -- sure looked close to an explosion.\n\nThough if Kelly didn't keel over, I was pretty sure Grace was going to soon. Sure, the redhead was always so professional and perfect. But, to me, that only made her ability to hold it together all the more fragile. Someone like Kelly, rough and tumble, could take it when things went bad. Grace was more like a porcelain vase, likely to shatter at the slightest provocation. The way she shook on her chair -- her face pale, eyes flitting back and forth -- told me she could break at any moment.\n\nAnd even if Grace didn't go off, I knew I could rely on Abby to amount to something. The cerebral blonde woman was Supergirl when it came to solving equations, but actual, physical activity was her kryptonite. It meant that while Abby could crush us all on Jeopardy!, her own body was a total mystery. I had no doubt that self-control was something she wasn't practiced at. So even though she looked (relatively) calm -- sitting almost deathly still in her chair -- I was sure Abby was about show me her o-face.\n\n\"Ah!\"\n\nThe sound ripped me out of my reverie. I looked over and saw it had come from Grace. I hadn't even increased the vibration on the eggs, but time had done the job for me.\n\nI was used to the strait-laced woman who always acted so perfectly composed. Now, her red hair was splayed out everywhere. Her back was arched, her tits pointing out, lewdly. Her whole body started to shake like a seizure.\n\nThen, suddenly, Grace froze. Stopped in mid-movement. Like someone had pressed her pause button. Her eyes went uncannily empty. A long, strangled gasp escaped her lips.\n\nThen, like her strings had been cut, Grace dropped back into her chair. She eyed us all, nervously, as consciousness seeped back.\n\n\"Grace,\" I said.\n\n\"Dammit,\" the redhead said. I don't think I'd ever heard her curse before. She stood up, unsteady on her legs, and dragged the egg out of herself. \"The vibration was bad enough,\" she said, then giggled in a way that was so out of character, I wondered if she'd been possessed. \"The watching made it way worse though.\"\n\nGrace came over to me and rested an unsteady hand on my shoulder.\n\n\"Thanks for this,\" she said, genuinely, then gave me a quick kiss on the cheek. I reached to take the egg out of her other hand, but she pulled it away. \"I think I'll keep this for a while,\" she said, pocketing the toy with a saucy grin. The door closed behind her soon afterward.\n\nWith that, only Kelly, Abby, and Devon were left. Now that Megan had made her way out and Grace had gone down, I could tell the women were redoubling their efforts to keep things under control. The three of them all shifted in their seats, almost like giving themselves a new start. There were a couple of deep breaths and some clearing of throats.\n\nThe game was on.\n\nFor a moment, I let myself get caught up in the eroticism of the wonderful women around me. My dick, already stiff, was starting to snake its way down my leg. My balls ached so bad, I had to rest my beer on them to dull the pain. This was incredible. I thought back to Megan's words. We have to do this again. Already, I was conniving ways to convince the other women that this was the case.\n\nI didn't adjust the vibrators. I hadn't had to for Megan or Grace and both were gone. The clock ticked down my doom. It wasn't only about the money anymore. Or even about winning the argument. The first two orgasms had been so amazing, I couldn't bear the thought of missing the other three.\n\nBut ratcheting up the eggs was my last trick -- I only had two more ticks on the dial -- and I wanted to save them for an emergency. I decided to try a different tactic.\n\n\"Looking good,\" I said. I'd meant it to be a taunt, but instead it sounded so much like a compliment that it almost made me blush.\n\nKelly, my competitive roommate, opened her mouth to trash talk me back. But then, just as quickly, she snapped her jaw shut, like trying to keep something trapped inside. I tried to catch her eyes, but she wouldn't let me.\n\nIn fact, now that I was paying particular attention, the athletic girl appeared particularly tight. Her arms and legs were completely stiff. Her lips left to thin pink lines. She had the look of someone desperate to hold something inside.\n\nThen, piece by piece, Kelly began to crack. Her thighs, so taut and controlled, started to tremble. She lowered her head, shook it hard, then picked it back up again.\n\n\"Hmm.\" The little sound escaped her lips.\n\nA thin tear leaked out of the side of her eye.\n\n\"Hmm.\" That same sound.\n\nThe whole room was watching Kelly now. Devon and Abby both turned her way. Finally, Kelly's bright green eyes met mine. Her expression was shocking. Not cocky or even confident. If anything, she looked afraid. Almost as if she was pleading with me to help her.\n\nI did the only thing I could for my roommate. My close friend.\n\nI turned the vibration up another level.\n\nAs soon as I hit the button, Kelly cried out. Her eyes bright green eyes nearly popped out of her head. Her whole body devolved into a shaking, slobbering mess. Grunts and snorts as her orgasm grabbed hold and shook her as hard as it could, breaking her down into tiny pieces.\n\nIt was beautiful. Almost magical. My unstoppable roommate wasn't just experiencing the height of pleasure. She wasn't just enduring her orgasm as it shredded her apart. She was open, vulnerable. I'd never seen anything like it, and it made my heart actually ache a little.\n\n\"HrrrrrrrrrrrrrAH!\" Kelly cried out, the pressure of her pleasure overwhelming her last little bits of control. She was so in the thrall of her own cum, that she tumbled forward out of the chair.\n\n\"Kelly,\" I said. Still, her orgasm wasn't done with her. My lithe roommate lay on the ground, twitching and jerking like someone had doused her in water, then hit her with a power cord.\n\n\"I'm. Fine,\" Kelly said through her spasms. \"Not. Cumming.\"\n\n\"Come on, Kelly,\" I said.\n\n\"I'm not,\" Kelly said, \"I didn't.\" She finally stilled. Kelly took a deep breath, started to get up, then toppled back over as the vibrations overtook her again, sending her tumbling into another body-breaking orgasm. \"I didn't...CUM! Fuck. Fucking hell.\"\n\n\"You're out,\" I told her.\n\n\"It is (gasp) obvious,\" Abby said, \"You're. You're not -- uhn -- fooling anyone.\"\n\nDevon shook her head in agreement. Blue eyes bugged out. Lips pursed tight.\n\nKelly glared at all of us. But she reached down for the string. As soon as she grabbed hold, she toppled back over as she reached yet another peak. \"fffffffFUCK!\" she cried out, clearly both in ecstasy and frustration.\n\nFinally, Kelly was able to extract the egg. She didn't say another word as she dropped the toy on the counter and limped down the hall to her room.\n\nAll three of us yelled after her, \"Fuck you and your turkey!\" Kelly gave us the finger before slamming the door behind her.\n\nTwo left.\n\nI think all of us were feeling it now. Kelly's performance had been incredible. Watching her, I think I even came a little. It would explain the little wet spot on my jeans.\n\nI was so close to getting it all. Seeing five massive, amazing orgasms. Earning three-thousand dollars. Finally, actually, winning an argument with Kelly. I couldn't imagine greater stakes. And yet, the clock was ticking. And I only had one more level on the eggs to engage. Abby and Devon felt it too. We were coming down to a photo finish. Too bad I had agreed not to use my camera.\n\nAfter Kelly had left so dramatically, both women were now back to fully focused on the prize. Abby wriggled in her chair like a girl who desperately had to pee during math class. She held her arms crossed against her chest. Every few moments, she reached up and squeezed one of her biceps, pinching it, to keep herself in control. You'd think she was about to go over, except her face was remarkably calm. Almost placid. The only giveaway was a little tremor in her upper lip.\n\nBut Abby looked almost wild compared to Devon. After looking like an easy mark, the petite blonde almost seemed asleep. She'd pulled her knees up to her chest, folded her arms on top of them, and rested her head there. Almost like she was making a little cocoon. The only sign of her own impending rapture were the little blonde hairs on her forearms, which were all raised up stick straight. Like getting ready to levitate.\n\nI glanced back at the clock. Seven minutes. I should have been nervous, but seeing those two women, I knew that was five minutes more than I'd need. It was time. I smiled, knowing that I was about to see something fantastic.\n\nI pushed the dial to the highest setting.\n\nNeither of the women even flinched. Abby slowly pinched her arm purple, but nothing more. Devon stayed frozen in place. A little statue.\n\nThen Devon made a little noise. It almost sounded like a word.",
        "She made it again.\n\nDevon's body still wasn't moving. Her head was buried. Her knees were locked in place. But still, that sound.\n\nI slid off my stool and stepped a little closer. It clearly was a word, I could tell. She was repeating it, like a whispered mantra, over and over again. I stood as close as I felt was appropriate without breaking the rules. Leaned my ear over.\n\n\"no,\" Devon said. She repeated it. \"no.\"\n\n\"Devon?\" I asked.\n\nThe words became faster. Starting spilling out. \"No no no no no no.\" A fountain of little syllables poured out of her. Getting faster. Louder.\n\n\"No,\" Devin said, \"No. NO! Oh God, please no. Please no. Oh. Oh fuck. Hrrrrr... NO! No No No NO NO! NO!!! OH!!! Oh FUCK! OH fffffFUCK YYYYYYYES!\"\n\nDevon's careful armor cracked. Her body spilled open. Eyes wide, mouth agape. Tongue lolled. I saw her crotch had gone dark, and a long thin trail of liquid seeped down her thigh. I thought for sure she'd see me looking and fall apart, but Devon was so far gone, she might as well have been in another universe.\n\nDevon screamed again. So loud that it hurt my ears. The timid girl exploded outward. She sobbed, shuddering and blubbering. Then she stilled.\n\n\"Oh fuck. Oh yes. Oh fuck me yes that was good. Fuck,\" Devon said. She slipped onto the floor like she was liquid. Her pants were completely soaked. Her face was cinched in an almost comical rictus of release.\n\n\"Devon,\" I said.\n\n\"I know,\" she said, \"I know. I came. God help me. But that was worth it.\"\n\nWe both laughed, then another little cum overcame her.\n\n\"Help,\" Devon said, \"Help me get this thing out of me. Seriously. I can't take anymore.\"\n\nI reached down and unsnapped the cute blonde's pants, then pulled them down her legs. Her pink panties were so sopping, they could barely be called cloth anymore. Devon reached around her underwear and pulled out the egg. She held it aloft, like she'd won the thing in a carnival game.\n\nI waited for the moment when she realized how exposed she was, but it didn't happen. Instead, Devon waved away my help and stood, wobbling like a baby giraffe using her legs for the first time. Tilting and teetering.\n\nAgain, I tried to help her, but Devon waved me off.\n\n\"Wow,\" she said, \"That was totally worth five-hundred bucks.\"\n\nShe started to make her way out of the apartment.\n\n\"Pants?\" I called after her.\n\nDevon gave me a big goofy grin. \"Right,\" she said turning back, \"Pants.\" She went back to her chair and pulled on her jeans. Finally, she made her way out of the apartment.\n\n\"Best. Investment. Ever!\" she cried out, letting the door close behind her.\n\nI turned back, ready to take on Abby. But as soon as the door closed on Devon, my alarm went off. My heart sank.\n\nI looked over at Abby. The skinny blonde still seemed remarkably composed. She just sat there, like a secretary ready to take dictation. One hand dandled over her panty-covered pussy. As far as I could tell, she'd never orgasmed. Or even come all that close.\n\nI walked back into the living room. Abby smiled, tight.\n\n\"Is that it?\" she asked, \"Has the competition completed?\"\n\n\"It is\" I said, resigned. I stared down at the floor. I can't tell you how disappointed I felt in that moment. How beaten. It wasn't the money. And I was used to losing to Kelly. But the fact that I'd missed out on seeing the final orgasm was like a kick in the balls. I'd imagined so many possibilities for that day, but I'd never truly considered the fact that I might lose.\n\n\"The experiment,\" Abby said, \"To be clear. It has -- ah -- reached its conclusion?\"\n\n\"You won the bet, yes,\" I said.\n\n\"Thank fucking God,\" Abby said.\n\nBefore I could even react, the skinny blonde shot out of her chair, drove into me, shoulders first, and tackled me onto the ground.\n\n\"Abby?\"\n\n\"Shut up,\" Abby said.\n\nShe tore her panties off, reached inside, and ripped the egg out of her pussy, flinging it against the wall with a loud crack. She grabbed my face and pressed her lips into mine so hard that I tasted blood.\n\nI was still recovering from the kiss as Abby's hands shot down and grabbed my belt. She tore the leather strap off me, pulled at the buttons of my pants, and freed my aching, erect cock from the fly of my boxers. She grasped it, roughly, and both of us groaned.\n\n\"Oh yes,\" Abby said. Again, I was too dumbfounded to move. Let alone speak. I just watched in shock as the skinny girl shifted her body, placed my cock straight up, andimpaled herself in one smooth stroke.\n\nI almost screamed it felt so good -- slipping into Abby's wanting warmth. Her vaginal walls impossibly tight, yet incredibly welcoming. Dripping so wet, I felt the heat of her splash onto my thigh.\n\nA moment before, I'd been standing by my apartment door. In a blink, in less time than I could properly process, I was on the ground. Buried to the hilt inside the gorgeous, blonde Abby.\n\n\"Fuck me,\" Abby said, humping up and down on my dick with an almost animal abandon. \"I need that cock so fucking bad.\"\n\nWhere had the cute, scientific girl gone? I searched her light blue eyes and saw nothing but animal intensity.\n\nAbby pulled her shirt off, exposing surprisingly full breasts with sharp, slightly upturned, puffy pink nipples. She clutched my head and pulled my mouth to her chest. Gave me no choice but to suckle. As if I was ever going to argue.\n\nAbby groaned as my lips latched on. She pumped her cute little butt up and down, her pussy gripping onto me with the strength of a fist and the slickness of a slide.\n\nThe analytical Abby I knew was gone. She drove my dick into herself with a crazed need, like she was desperate to plug herself permanently. Her white, blonde hair was well out of its bun and flying around like crazy. Tits bouncing so bad I imagined they would bruise. My ears echoed with her savage roars and keening mewls.\n\n\"That's. Right. Fuck. Me,\" she said, punctuating every push. I bit her nipple and she screamed. For a moment, I considered that Kelly was probably in the other room reporting a murder. I just hoped I'd get to cum before the cops came.\n\nAbby, writhing around on my shaft, reached up and casually adjusted her glasses. This was the hottest, sluttiest geek I'd ever seen. I reveled in her femininity. I couldn't believe the pleasure she was wrenching forth from both of us. The only reason I hadn't already cum was I was terrified of what she'd do if I didn't help get her there first.\n\nDespite her seemingly endless bank of energy, Abby started to slow. She panted heavily. Body dripping with sweat. Azure eyes small and scared.\n\nI saw what she wanted in that moment. What she needed. I grabbed Abby's thin shoulders and pushed her backwards, tipping us both over. She kept her thighs wrapped around me tight, not letting me escape for even a second.\n\nI'd never been more ready to fuck a girl. To plunge into her depths and pound her into oblivion. Yet carefully, cruelly, I drew my cock out of Abby slowly. I pulled back as far as the skinny blonde's surprisingly strong little thighs would let me.\n\n\"Nnnoooooo,\" Abby said, flexing her body to hold me inside.\n\n\"Did you cum before?\" I asked. \"During the contest?\"\n\n\"Twice,\" Abby croaked. I could tell she was telling me the truth. \"When Kelly came, I did, as well. Then I did it again, after. I was certain you saw me but...\"\n\n\"I guess you really are good at keeping quiet,\" I said.\n\n\"But two wasn't nearly enough,\" Abby said, \"I need another. And not from some stupid plastic egg.\"\n\nI gave her a playful grin. Reached down and pinched her perfect pink nipples. Then slowly, dragging it out, I slid my dick all the way back into her grasping, gasping cunt.\n\nAbby groaned, a long low sound that started as my cock made contact and only faded as I filled her fully.\n\nFor a moment, she slipped back into her scientific persona. \"Do not become tranquil now,\" Abby said.\n\nI got the message. I drew back and, with a violence that surprised even myself, I plowed into her as hard and fast as I could. Held her shoulders for purchase. Her bony butt bounced off the hardwood floors. Every push was punctuated by a loud, aggressive slap. Abby reached between us and found her clit, starting to rub it for all she was worth.\n\n\"Th... there,\" Abby said, \"Getting... getting close.\"\n\n\"Thanks for telling me this time,\" I said, wryly.\n\nAbby started to retort, but her orgasm overtook her before she could. Her body arched upward. Her eyes rolled back. Her fingers flew on her clit.\n\n\"Hrrrrrr...Ah!\" Abby gasped, the sounds escaping her lips like steam. \"I need you to... Ejaculate. Ohfuck. Expel your semen against my cervix. It will trigger my own body to produce the -- fuck -- the orgasm I need.\"\n\nI paused mid-thrust. \"Wait, what?\"\n\n\"Cum in me!\" she screamed and slapped my shoulder.\n\nWell, since she asked so nicely.\n\nI raised Abby's legs rested them on my shoulders. I reached down and twisted her bubble-gum nipples. I threw myself into the blonde girl with abandon. I stopped caring about her pleasure. Only focused on my own. It didn't matter anymore. Nothing did. Just the two of us, wrapped in carnal ecstasy in the middle of my apartment.\n\n\"Fill me...\" Abby gasped. \"Please.\"\n\n\"Here it comes...\"\n\nI buried myself as deep as I could.\n\n\"AH!\" Abby's breath caught. She flushed bright red. \"Yes. Yes! YES!!!\"\n\nA pause. A moment. Both of us peaked at the same time. Like a lightning flash. Brief. Bright. Overpowering.\n\nI erupted into Abby. An epic explosion of cum. Another. I heard a loud shout and I realized it was me. I pumped my pearlescence into the skinny blonde girl, as much as I'd ever made in my life. Blast after potent blast delivered directly to her pussy.\n\n\"Oh, I'm cumming,\" Abby exclaimed, \"Cumming so GOOD!\"\n\nAfter what seemed an impossibly long time, my orgasm finally regressed from insistent, ecstatic bursts into low, warm waves of bliss. I gradually became aware of the girl beneath me. Abby was still experiencing her orgasm. Enduring it. Her body constricted so hard around me that it started to hurt. She stared right back at me. Her eyes so blue and bright it was almost blinding.\n\nFinally, I felt her fade. Abby dropped back to the floor like a dead woman.\n\nWe lay there in the middle of the living room, soaked in sweat and a bunch of other sticky substances. We panted. Gulped. Slowly grabbed hold of ourselves.\n\n\"Well, that was quite an enjoyable experience,\" Abby said, slowly shifting out from under me.\n\nI let my softening cock slip out of her and we both fell back to the hardwoods in individual heaps. Abby reached down and dipped her hand into her pussy. It came out covered in white goop.\n\n\"Your ejaculate is quite voluminous,\" Abby said.\n\n\"What?\" I asked.\n\n\"You cum a lot,\" Abby said, as if having to translate for such a simpleton was too much to ask. \"I'm getting you a dictionary for your birthday.\"\n\n\"Seems the least you could do after I gave you that,\" I said, gesturing to her body.\n\nAbby looked at me, dubious for a moment, then broke into a wide smile. \"It was pretty fucking amazing, yes.\"\n\n\"I don't think I can figure you out,\" I said.\n\n\"Scientist in the streets, whore in the sheets,\" Abby said. I cocked an eyebrow, a mimic of her own signature expression. \"I can get a little, um, crude during intercourse sometimes,\" she explained. \"Though I cannot recall the last time I was ever so effusive. If ever.\"\n\nAbby sat up. She combed back her straight blonde hair and tied it back into a bun. Then she stood and began collecting her clothes. I lay back, enjoying what was an excellent view of an absolutely stunning woman.\n\nEven during the sex, I don't think I appreciated how amazing Abby's body actually was. Her surprisingly full breasts incongruous with her skinny body. The way her little pink bum would jiggle slightly as she moved. The shimmy of her hips. The way her fingers moved as she buttoned up her jeans, dexterous and almost dancing. The sparks of so much thought processing behind her eyes.\n\n\"Well, this was definitely a unique experience,\" Abby said, now fully clothed. \"Thank you, TJ.\"\n\n\"Thank you,\" I said, genuinely. I was still naked on the floor. It felt very comfortable, in that moment.\n\n\"I'm assuming I can collect my winnings now?\" Abby said, fixing her glasses pointedly.\n\n\"Seems to me that I made you cum pretty loud a moment ago,\" I said. \"Screaming out 'I'm cumming,' 'fuck me,' 'yes, yes, yes.'\"\n\nAbby flushed. She stared down at her surprisingly nice, dark dress shoes. \"I believe that occurred after time had passed,\" she said, still not meeting my eyes.\n\n\"Keep the money,\" I said, \"Just tell the girls what happened after. My reputation could use the boost.\"\n\nAbby paused at that.\n\n\"I'll split the money with you,\" she said, straightening. Again, I felt a little wave of sadness, though I couldn't rationalize why. \"But only if you tell the group that I won it all. No other details may be disclosed.\"\n\nNow it was my turn to pause. Finally, I nodded my agreement. Abby must have read my regret, however, because she bent down and kissed my forehead. Then she spun on her heel and marched out of the apartment.\n\nAfter the door clicked closed, I climbed to my feet and slowly gathered up my clothes. The living room felt oddly empty. Chairs strewn everywhere. Like a strange, selective tornado had ripped through. Most of all though, everything seemed so quiet. It was weird.\n\nI got dressed and started to slide everything back into place. I was about halfway done when I heard Kelly's bedroom door open. She padded out into the living room, wearing a long, flannel sleep shirt that went down past her knees. So big, she seemed to be swimming in it.\n\n\"I don't hear you celebrating,\" she said, eyeing me.\n\n\"The girls won,\" I said.\n\n\"Who took the prize?\" Kelly asked.\n\n\"Abby, actually.\"\n\n\"Fuck me,\" Kelly said, \"That girl is full of surprises.\"\n\n\"I'm going to make dinner,\" I said, no longer wanting to talk about this, \"Can I make you something?\"\n\n\"Sure,\" Kelly said, \"I'll be back in my room. Just let me know when it's ready.\"\n\n\"Will do,\" I said.\n\nShe stopped midway to her bedroom. \"Oh, and TJ?\"\n\n\"Yes?\"\n\n\"You're quite the loud cummer, yourself.\"\n\nKelly gave me a wink, then closed her bedroom door firmly behind her."
    ],
    "authorname": "Spector_Dugan",
    "tags": [
        "group",
        "voyeurism",
        "masturbate",
        "exhibitionist",
        "vibrator",
        "watching",
        "orgasm",
        "toys",
        "friends"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-cum-contest"
}
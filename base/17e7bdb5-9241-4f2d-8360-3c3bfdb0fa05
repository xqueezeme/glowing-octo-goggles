{
    "title": "Lucky Man Ch. 01",
    "pages": [
        "First, all characters involved in sexual situations are over 18, and all of this work is mine, and no one else has permission to reproduce or sell it. So stop.\n\nTo my readers, I hope you like this. This isn't a revenge against a cheating wife type story, nor is it a spank-fest. The plot and characters come first, and then the sex, even though there's tons of sex in this chapter. There are many chapters to come.\n\n*****\n\nLucky Man\n\nChapter 1\n\nDuncan Thomas was a very lucky man and he knew it. He had a gorgeous wife that he'd been married to for eight years. He had a great job, a nice truck, and a happy life. He smiled as he stared up at the ceiling in the darkened room, listening to the feminine figure beside him breathing quietly.\n\nHis wife, Kelly, was hands down the best thing that had ever happened to him. They'd met when they were both attending college. She was short, just like he'd always liked, and red-headed. She was ridiculously sexy, and had maintained her sexiness throughout their life together. He'd always had a thing for shorter girls, thin but with big breasts, but then again, who didn't? She had the most stunningly beautiful green eyes that he could get lost in if he wasn't careful. It was like staring into two deep green pools, almost hypnotic in their effect on him.\n\nShe shifted quietly next to him as he gently pulled himself out of bed.\n\nKelly had been the center of attention their entire life together, and it had made him learn to be a more relaxed person. There were always times when some guy or even girl would be caught staring at her. Or he'd overhear someone hitting on her. He didn't get jealous anymore when people noticed his wife. He knew she'd never cheat on him. She loved him more than he could fathom, and he honestly didn't know how he'd ever convinced her that he was worth her time. All of their friends would complain about how goofy they'd get over each other, and how in love they truly were.\n\n\"You guys are both retarded for each other,\" a friend once commented.\n\nSliding quietly out of bed, he moved around to the foot and began to climb in at the bottom of the sheet. His wife was a heavy sleeper and sometimes he'd wake her up in the morning this way.\n\nAt an early time in their marriage, they'd both tried sleeping naked and found that it had enhanced their sex life. Duncan always seemed to be ready to have sex, and having a naked woman as sexy as his wife lying next to him without anything on only made it more frequent.\n\nHe slid quietly up under the sheet, carefully navigating between her legs and moving towards her sleeping form.\n\nShe was always the center of attention at parties, but wasn't a naturally outgoing person. She always rolled her eyes when he told her how gorgeous she was and pointing out that everyone in the room was watching her. She'd just smile shyly and shrug.\n\nQuietly, he ran his hands up underneath her buttocks and pulled her hips toward him, his lips and tongue engulfing her pussy. A few quick sucks and a single lick, and he felt her hand reach down and grab a handful of his hair.\n\n\"Mmm, good morning honey,\" she said, softly moaning. He licked her in response.\n\nShe'd gotten used to the attention she got in high school, and by the time she went to college, she hardly noticed it. When he'd asked her out, she blew him off. He was persistent, however, and every day after the class they shared, he'd ask her out. Finally she agreed to go to lunch with him, and they immediately hit it off. She was laughing at his jokes, and holding his hand by the end of the meal.\n\nHe gripped her hips tightly and pulled her pussy tightly against his face, his tongue pushing deeply inside her and then upwards across her slit, finding her clit and tickling. She moaned and pulled at his hair with both of her hands, lifting her legs wide and pulling her hips upwards.\n\nAt first, he'd been worried that he wasn't good enough, or that he'd lose her. As they dated, though, she never gave him any reason to think that she'd cheat on him, and in fact had proven her loyalty many times over.\n\nHe smiled as he thought back to one such time, his tongue running over her clitoris again and drawing a moan from her.\n\nThey were at a company Christmas party for her office. He'd been drinking, probably a little more than he should, as had she. A party game got out of hand, and she'd found herself pulled into an office with a coworker, who'd tried to kiss her. She slapped him and came to find her husband, demanding to know why he hadn't come to find her.\n\n\"I know you wouldn't do anything to hurt me baby,\" he'd told her. It was the truth. His wife could have been a goddess of sex in a previous life, but she was loyal to him.\n\nShe moaned at his touch, her body shaking in an orgasm as his tongue worked her over, her fingers pulling hard at his hair. Finally spent, she released him and began to try to pull him upwards.\n\nHe was a lucky man, and he knew it. She pulled him upwards and made him turn over to his back, her legs quickly straddling him as she kissed him deeply. She reached between her legs to guide his manhood in to her, sighing as it slid in easily.\n\nTheir sex life was decent and he knew he didn't have anything to complain about. They'd usually start out with a little bit of oral sex on her, and then they'd have sex. She liked to be on top, and they rarely did it missionary. She didn't like to give him oral sex and had always said that it was because she wasn't any good at it. He'd eventually given up, being more than satisfied to just have sex with her.\n\nShe bounced gently on top of him, his cock pushing deep inside her. He felt his orgasm building and felt her getting closer. As he erupted into her, he felt her begin to squeeze down on him involuntarily, her pussy contracting hard around him.\n\n\"Oh, oh,\" she muttered quietly as she rocked back and forth on top of him.\n\nAfter a few minutes of gently fucking him, his cock had finally gone soft and slid out of her. She looked up at him as she slid to his side and smiled.\n\n\"Thank you,\" she whispered, her perfect body pressed up next to him.\n\nHe smiled at her and kissed her again. \"You're welcome.\"\n\n\"You know, you don't have to do that for me,\" she told him for the thousandth time.\n\n\"As always baby, if you like it, I'll do it for you.\"\n\n\"Yeah, but I don't return the favor. It doesn't seem fair.\"\n\n\"If you don't like doing something, I'm not going to ask you to.\"\n\n\"I love you,\" she said finally.\n\n\"I love you,\" he replied.\n\nShe stood then and headed to the bathroom, and a few seconds later he heard the shower running.\n\n*****\n\nKelly turned the water on as hot as she could stand and then looked at her naked form in the mirror behind the door. She smiled, lifting one breast, and then arching her back. She loved the way her body looked now.\n\nWhen she was younger, she'd been a skinny kid, and then when she turned sixteen she started getting larger breasts, She was the last of her friends to blossom, but she quickly grew bigger than they were. Her breasts finally stopped growing her senior year of high school, and were the size they were now. She really loved that Duncan enjoyed her body. In truth, she liked that other people noticed her, but it was him that she wanted to look good for.\n\nHopping in the shower, she thought back to their love-making session this morning, and previous mornings. Duncan had always been an early riser, so to speak, and she knew that his constant state of arousal in the mornings was at least partly because of her. Once they'd started sleeping naked, a few months after they were married, the sex was nearly every day, usually when they woke up.\n\nShe only given him a blowjob a few times, once on their wedding night, and then a few times after that. He'd had to stop her a few times, wincing or telling her that he wanted to go down on her instead. She could tell that he'd been disappointed though, and it had always bothered her. Duncan stopped asking for it, sensing her displeasure for the act, she guessed.\n\nThat thought stuck with her, and she considered why he thought she didn't like to do it. She wasn't very good at it, that much was clear. Maybe he sensed her discomfort, her worry about hurting him, or her embarrassment. Whatever the reason, she stopped attempting and he stopped asking for it. She grabbed the loofah and soap and lathered up her body. \n\nShe knew he would still enjoy one, but she just didn't know how to go about getting better. It wasn't like she could just ask anyone. A thought struck her then, and she smiled, a plan forming in her mind.\n\nLater that day, Kelly was having lunch with a friend, and conversation inevitably turned to her personal life.\n\n\"So how are you and Duncan?\" Marie asked. Marie was a close friend that Kelly enjoyed having lunch with at least once every few weeks. She tended to be a little wilder than she was used to, and the stories that she'd tell could make her blush like nothing else.\n\nShe was silent for longer than she had intended after the question had been asked and Marie sensed it.\n\n\"What's the matter?\"\n\nShe sighed and shook her head. \"Nothing's the matter. We're wonderful!\"\n\n\"Kelly, I know you better than that. What's the matter?\"\n\n\"Oh my gosh, we're fine, would you stop being so nosy!\"\n\n\"We both know that I won't, so you might as well spill it,\" the brunette told her.\n\nKelly sighed and drank some of her tea and hoped that something would happen so she didn't have to have this conversation.\n\nMarie was as patient as a vulture, however, and wouldn't be dissuaded.\n\n\"Come on, Marie, you know how uncomfortable talking about this stuff makes me. Can't we just talk about the weather?\"\n\n\"First off sweetie, when you say 'Talking about this stuff,' I know it means sex and so we're gonna have to talk about it. Second, this is Texas and there's snow on the ground. It's January, it's cold.\"\n\n\"That's not always the case here.\"\n\n\"No, you aren't sidetracking me and changing the subject. Spill the beans, sister,\" she said.\n\nKelly laughed, defeated, and finally began to talk.\n\n\"We're really doing fine. We're having sex at least once a week. He always tells me how much I make him happy. He loves to wake me up by...\" she trailed off.\n\nMarie was looking at her expectantly. \"By punching you in the face? Barking like a dog? What?\"\n\nKelly leaned in close and whispered across the table, \"by giving me oral sex,\" and immediately blushed when the waiter came up to refill her drink.\n\n\"Oh honey, lucky you! So what's the issue? Is he not any good?\"\n\n\"No no,\" she said, shaking her head. \"He's fine at it, that's not the issue.\"\n\n\"Okay, we'll ignore the 'Fine' comment for now, but we're going back to it at some point. Continue.\"\n\nShe giggled but continued to talk, quieter this time and still leaning forwards over the table.\n\n\"It's just that I know he wants me to return the favor, you know?\"\n\nMarie looked at with a puzzled expression. \"You don't return the favor?\"\n\nKelly blushed, suddenly feeling like she was some kind of deviant for not going down on her husband.\n\n\"Why not?\" Marie asked sincerely. \"I love doing that!\"\n\n\"Can we talk about this later?\" Kelly asked, suddenly aware of couple of men sitting at a nearby table paying an awful lot of attention to the two of them.\n\nMarie glanced over and smiled, offering a little wave.\n\n\"Marie, you're terrible!\"\n\n\"Oh, it's just some harmless flirting. If you knew half the stuff my husband lets me get away with, we probably wouldn't be friends anymore,\" she said with a wink.\n\n\"We'll just talk in the car on the way back to work.\"\n\nMarie mercifully let her finish the rest of her meal in peace, and the two drove back to the office.\n\n\"So you don't suck your husband off. I gotta say, that's surprising. He seems really happy.\"\n\nKelly shot her a look. \"He is really happy.\"\n\n\"He can't be that happy if you aren't sucking his dick.\"\n\n\"Can we keep this PG-rated, please?\" Kelly asked.\n\nMarie rolled her eyes. \"We're talking about oral sex, it's kind of hard to keep it clean. So tell me why you don't go down.\"\n\nKelly was silent for a minute, lost in thought. \"I don't know. I mean, I never did it until I met Duncan, and then I only did it a few times. He didn't seem to get too much out of it, and I was never very good at it. After he knew that I didn't really enjoy doing it, he never asked for it.\"\n\n\"But he kept going down on you?\"\n\nKelly nodded. \"He really seems to enjoy giving it to me, and he's good at it, I guess.\"\n\n\"You guess?\" Marie asked.\n\n\"Well yeah, I don't have any basis for comparison.\"\n\n\"Well, it seems to be working for you guys, so what's the problem?\"\n\nKelly chewed her lip for a second, contemplating her words. \"I feel bad that he does it to me, and I don't do it for him.\"\n\n\"Well, that's easy to fix. Either make him stop or start going down on the man,\" she said.\n\n\"I'm sure not going to ask him to stop waking me up like that. It's the best part of waking up! I just can't start going down on him though. I don't even know how!\"\n\nMarie smiled. \"So that's what this is about. You want me to show you how to suck his dick for you.\"\n\n\"Oh what the hell, Marie, no I don't!\" Kelly said, turning red.\n\n\"I'm just playing with you, Kelly. Listen,\" she said, patting her leg. \"Why don't you come over tonight and I'll show you what I can on a toy or two.\"\n\n\"Oh Marie, I don't know,\" Kelly said, fidgeting with her clothes.\n\n\"Come on, it'll just be us and I guarantee you'll learn something.\"\n\nThe smile that she finally flashed at Marie spoke volumes.\n\n\"So I'll see you after work?\"\n\nKelly nodded. \"I'll tell Duncan I'm going to be late.\"\n\n*****\n\n\"Okay, gonna have a beer with the guys then,\" Duncan sent back as soon as he got her text.\n\nHe and the guys drove to a bar near their office where they would normally catch a drink or two after work and talk about their wives and girlfriends, or sports. Duncan was able to hold his own with most of the conversation, but when it came to bragging about his sexual exploits, he was never comfortable with talking about his wife. She was too sweet and pure, too innocent and sexy and wonderful to be dragged into the filthy conversations that his friends had.\n\n\"So I had her tied up on the bed, both hands tied behind her back, and I'm plugging away from behind and then we hear this knock at the door,\" a friend named Drake was saying.\n\n\"Dad,\" said Mark, another of his friends.\n\n\"Hell yeah, Dad,\" Drake continued.\n\n\"What'd you do with Molly?\"\n\n\"What could I do? The door was opening, so I rolled her ass off the bed and yanked my underwear up and she smacked into the dresser. My five[year old came in but luckily didn't see mommy swearing through her gag at daddy,\" Drake finished, downing his beer afterwards.\n\nDuncan shook his head.\n\n\"Needless to say, we lock the door now.\"\n\n\"Shit, I'm surprised that she lets you anymore,\" Max, yet another of Duncan's friends, said as he too downed his beer.\n\n\"Did Drake tell you about his new babysitter?\" Mark asked as he turned and looked at Max and Duncan.\n\nBoth men shrugged.\n\n\"So I was over the other day for a minute and they'd both just gotten home. I see this pretty blonde girl leaving as I pull up. She was tall, had tan skin, long blonde hair and great set of perky titties.\" \n\nDrake grinned and nodded in agreement. \"Yeah, she's fuckin' hot.\"\n\n\"So I go inside and ask Molly if she knows how hot her babysitter is? She nods and smiles at me and says, 'Yes, I do.' She says, 'The secret to keeping a man is to keep his stomach full and his balls empty.' I told her that may be the true, but if you leave him alone around something that fuckin' sexy, don't be surprised if you come home and he's waist deep in the babysitter.\"\n\nThe guys all burst out laughing then. Their waitress came by then and asked the guys if they wanted another round of drinks. Most said yes, but Duncan declined. He noticed Mark leaning over and making grabbing motion at the young girl's ass to him and chuckled.\n\nThe girl turned and raised an eyebrow at him, causing Mark to throw up his hands in defeat.\n\n\"Baby, I was just trying to see if you had one handful or two down there,\" Mark said with a grin.\n\n\"Well here then, take a better look and let me know what you think,\" she said playfully. She turned around and faced away from the table and bent over slightly.\n\n\"I'd say two maybe two and a half,\" Mark said with a grin. \"If I could get my hands on it, I could get a more accurate measurement.\"\n\nShe smirked at him and patted him on chest. \"Honey, you couldn't handle what I've got down there. Plus, I wouldn't want to beat your ass in front of your friends.\"\n\n\"Daaaaamn,\" went the collective group gathered at the table, followed by a raucous chorus of laughter.\n\nDuncan had to laugh and patted Mark on the shoulder. A few minutes later she came back with the beers.\n\nDuncan leaned over and whispered an apology in her ear, to which she just smiled and winked. \"I get it all the time, sexy,\" she whispered back and then he felt her give him a peck on the cheek.\n\n\"Be careful Duncan, we might tell Kelly on you!\" yelled one of his buddies.\n\nThe waitress turned and shook a finger at him. \"That's breaking the guy code,\" she scolded. \"Besides, it'd be worth it,\" she said as she turned and wiped at Duncan's cheek, attempting to remove the lipstick she'd left behind.\n\nDuncan, thoroughly surprised and embarrassed, shook his head and stood to leave.\n\n\"Oh, come on man, we were just kidding!\" Drake yelled.\n\n\"Yeah, come on man, don't leave yet. We haven't even gotten to tease you about your wife yet!\" Mark said.\n\nLaughing, Duncan began to walk towards the door. \"I'll catch you guys at the office tomorrow.\"\n\n*****\n\nMarie hugged Kelly and ushered her inside. \"Come on in and head to the living room.\"\n\n\"Is Ed here?\" Kelly asked as she headed towards the couch.\n\n\"Yeah, but he's up in his office. I told him not to bother us,\" Marie replied.\n\nKelly turned and shot Marie a concerned glance.\n\n\"Oh stop, Kelly, he's not going to come downstairs.\"\n\n\"Did you tell him why I came here?\"\n\n\"Hell no I didn't tell him that, I wouldn't be able to get him to leave!\"\n\nKelly smiled at that and turned, resuming her walk to the living room.\n\nShe paused as she entered the room and came around the couch. \"Good Lord, Marie!\"\n\nThe array of sexual aids that Marie had laid out was staggering, if not comical.\n\nKelly stood at the edge of couch, stunned, as Marie went around her and sat down.\n\nAt least 20 or so devices of varying shapes and sizes were on the table in front of the couch. Kelly finally came around the edge of the couch and sat down.\n\n\"What on earth would you need all these for, wouldn't one be enough?\"\n\nMarie smiled and shrugged. \"I just need to know how big your husband is, so we can get a good basis for you to practice.\"\n\n\"Well...\" Kelly started looking at the dildos. \"Are they at least clean?\"\n\nMarie laughed out loud. \"No, Kelly, I put them away dirty. Yes, of course they're clean! What kind of person do you think I am?\"\n\nKelly laughed lightly at that and peered down at the selection.\n\n\"Well,\" she said, picking up a giant one. \"He's big, but he's not deformed,\" she said, putting it back on the table.\n\n\"Oh that's Big Blue, he's for special occasions,\" Marie said.\n\n\"I don't want to know,\" Kelly said, raising a hand.\n\nShe closed her eyes and envisioned her husband's penis. Thinking the word \"penis\" however, instantly made her think of him peeing and she thought of him flaccid. She shook her head.\n\n\"Cock,\" she said quietly. That did it. She instantly pictured her husband's cock, erect and sliding into her.\n\nShe opened her eyes and looked down at the table.\n\n\"What are you doing, praying for the answer?\" Marie asked.\n\n\"No, I was just trying to picture my husband's... penis, and I kept seeing it flaccid,\" she said, picking up a dildo.",
        "She held it up in her hands and looked at it like she was buying a cucumber. \"It's a little bigger than this,\" she said.\n\nMarie was staring at her open-mouthed. \"Your husband is THAT big?\"\n\n\"That's big?\" Kelly asked.\n\n\"Honey, you have no idea what a lucky girl you are!\"\n\nKelly handed Marie the fake penis and shrugged. \"Well, I knew he was big, but I didn't think he was above average.\"\n\n\"Sweetie, this is at least 8 inches. Most men would kill to be this big.\"\n\n\"Really?\"\n\nMarie chuckled and shook her head. \"The things I could do with this baby,\" she said with a smile.\n\n\"Hey...\" Kelly warned.\n\nMarie giggled and held up the dildo. \"Okay, so the first thing to know about giving a blowjob is that it's named the exact opposite of what you're supposed to do.\"\n\nKelly nodded. \"Then why is it called a blowjob?\"\n\nMarie shook her head. \"I have no idea, but it should be called a suck job. I guess blowjob sounds better. It probably has something to do with the way we look doing it. Now, would you like to Google the answer or can we get on to the cock sucking lessons.\"\n\nShe held the dildo up and offered it to Kelly.\n\nKelly took it hesitantly and looked expectantly at her. \"What do you want me to do with it?\"\n\n\"Well, show me your technique so I can help you,\" she replied.\n\n\"What? No! I was just looking for some pointers!\"\n\n\"Kelly...\" Marie sighed.\n\n\"Marie, I'm not going to stick something that's been in you in my mouth!\"\n\n\"Oh Kelly stop, I washed it and besides, how do you expect me to know what you're doing wrong?\"\n\nKelly sighed and shook her head.\n\n\"I can't help you if you won't let me,\" Marie said eventually.\n\nKelly shook her head. \"Why don't you just show me how you do it.\"\n\nMarie shrugged and put the dildo to her lips.\n\n\"Well, first you have to cover your teeth with your lips.\"\n\nKelly nodded. \"I know that much.\"\n\n\"No man wants to have bite marks on his dick, at least Duncan probably doesn't.\"\n\n\"Wait, there are men that like to have their dicks bitten?\" Kelly asked.\n\nMarie shrugged. \"I wouldn't say bitten, but a rough blowjob can involve teeth. No, actually I take that back, there are some men that enjoy a good bite. The penis itself is pretty tough, it's the balls that are the sensitive area.\"\n\nKelly shook her head in disbelief.\n\n\"Like I was saying, cover your teeth with your lips, like so.\" She showed Kelly what she was talking about, making an O with her lips and hiding her teeth. \"Next, don't be afraid to be nice and sloppy.\"\n\nKelly nodded and watched as her friend brought the dildo to her lips and pushed it inside and then pulled it out, her lips making a soft popping sound.\n\n\"You see how I was sucking and not blowing?\"\n\nShe nodded again and watched as her friend pushed the dildo in again.\n\n\"I mean, it's pretty easy to give a blowjob, but difficult to give one really well. The next step is to focus on the main part. Most men are very sensitive at the tip. The shaft feels good too, but the tip is where most of the nerve endings are. You can also do what's called a head job and just suck on the tip, using your hand to stroke the rest of his cock.\"\n\nShe demonstrated, leaving her lips perched on the end of the dildo and her other hand moving back and forth along the length.\n\n\"See?\" she asked, pulling it from her mouth.\n\nKelly nodded.\n\n\"Once you get this down, we can move to harder topics like deep-throating.\"\n\n\"Well Marie, I'm not going to be entering any contests, I just want to be able to pleasure my husband.\"\n\nMarie nodded. \"I know honey, but there's few things that give a man more pleasure than a girl that can deep-throat, especially if your husband is packing the meat you claim he is.\"\n\nKelly rolled her eyes.\n\n\"Okay,\" Marie said, offering her the dildo after she wiped it off on a towel. \"Lets see what you got.\"\n\nSighing, Kelly reluctantly took the offered toy and looked at it. \"I told you he was a little bigger than this, by the way.\"\n\nMarie smiled. \"Like I said, you're a very lucky woman.\"\n\nKelly rolled it around her hand for a second and then lifted it up to her face, but she saw Marie staring at her and blushed.\n\n\"Honey, I thought red-headed girls were supposed to be wild. Close your eyes if you're getting embarrassed.\"\n\nKelly liked that idea and shut her eyelids. She rolled the dildo around in her hands a little and then brought it up to her lips. Gently she opened her mouth and pushed the tip in.\n\n\"Okay, now suck gently.\"\n\nShe did so and felt the dildo go deeper. She popped it out of her mouth and opened her eyes.\n\n\"Like that?\"\n\nMarie nodded. \"Yeah, you just need to practice more, and remember to keep sucking.\"\n\n\"Well, I don't want to hurt him.\"\n\n\"You won't hurt him, trust me,\" Marie told her. \"You can suck as hard as possible and he'd probably enjoy it.\"\n\n\"Really?\" Kelly asked.\n\n\"Mmhmm,\" Marie nodded. \"Now try again.\"\n\nKelly closed her eyes and pushed the dildo into her mouth.\n\n\"Now go a little bit deeper,\" she heard Marie say.\n\nKelly continued to suck, and pushed the device deeper but got carried away and began to cough, spitting the dildo out and turning red.\n\n\"Like I said, honey, you're going to need to practice. Why don't you take that one with you?\"\n\n\"I don't know, Marie. I don't want to have to hide this from Duncan. I'll come over another day and practice here. I'll work with what I know on him.\"\n\n\"You know, I could always come and just show you how to suck his dick for you,\" Marie said with a playful smile.\n\nKelly shook her head. \"I think this will work just fine, Marie,\" and shoved the dildo in her purse.\n\nMarie shrugged, \"Just throwing that out there. I'll see you tomorrow, girl.\"\n\nKelly nodded and stood. \"Have fun with all your friends here,\" she said as she glanced down at the impressive array of dildos.\n\nMarie smiled and hugged her. \"Call me if you have any questions.\"\n\n*****\n\nDuncan pulled in just as his wife was getting out of her car. \"Hey good lookin'. How was Marie?\"\n\nKelly smiled and wrapped her arms around him, her warmth feeling soothing in the cool air.\n\n\"She was fine and says I'm a lucky woman.\"\n\nHe let her down and kissed her softly, but then turned and went to unlock the front door. She followed behind and helped him out of his coat.\n\n\"How was your day?\" she asked.\n\nHe chuckled. \"We stopped and had a drink at the bar and the guys tried to embarrass me with a waitress.\"\n\n\"Oh yeah?\" she asked turning and raising an eyebrow. \"Do I need to act jealous and suspicious the next time I see them?\"\n\nHe chuckled and put up his coat, turning and taking hers from her. They headed into the kitchen.\n\n\"Are you hungry?\" she asked quickly, before he started his story.\n\n\"How about some sandwiches?\" he said, heading to the fridge.\n\n\"Sounds good to me,\" she replied, heading to the cabinet to get some paper plates.\n\nHe got the lunch meat, condiments and cheese out and began making a few sandwiches.\n\n\"Well, we were just drinking and telling guy stories. This young waitress came by and dropped off a few more drinks, and so Mark tries to get me to look at her ass. I laughed it off, of course, but the guys saw me get nervous and proceeded to rib me a little. The waitress came to my rescue though, and told them that we couldn't handle her.\"\n\n\"Aww, that poor girl,\" Kelly said smiling.\n\n\"I know. I apologized to her a little later but she told me not to worry about it.,\"\n\n\"Is that who left the lipstick on your cheek?\"\n\nDuncan's eyes went wide and he began to wipe his cheek, causing Kelly to burst out laughing. He felt his heart beat faster.\n\n\"Honey, stop, it's okay.\"\n\nHe shook his head. \"She just kissed me on the cheek when she told me not to worry about apologizing.\"\n\n\"I know, honey, I know. I'm just teasing you.\"\n\nHe shook his head then and breathed a little easier. \"You're too good at that.\" He put her sandwich on a plate and pushed it towards her.\n\n\"Did you spit in it?\" she asked, lifting the top piece of bread.\n\nHe rolled his eyes and shook his head. \"I can if you want me to.\"\n\nShe chuckled at him. \"So what else did this waitress do?\"\n\nHe sighed. \"She gave me a hand job, right there in the bar. It was amazing.\"\n\n\"Wow, did you tip her extra?\" she asked him, taking a bite of her sandwich.\n\n\"Nope, she was so impressed with me that she paid me,\" he said with a grin, biting into his own sandwich and taking a seat at the bar next to her.\n\n\"Hur hur,\" she said mockingly and crossed her eyes at him.\n\nHe chuckled. \"No, she thanked me and called me sexy, and kissed me on the cheek. Then she told the guys that they'd be breaking the guy code if they told on me.\"\n\n\"Guy code?\"\n\nHe shrugged. \"You can't tell on your guy friends to their wives.\"\n\nShe nodded. \"That doesn't sound good for the wife.\"\n\n\"Well, I know one wife that doesn't have to worry about that.\"\n\nHe took a bite of his sandwich and glanced over. \"So what did you and that hussy Marie get up to today?\"\n\nKelly blushed and shook her head. \"Just finish your sandwich, I'll save that for later.\"\n\nHe glanced over at her, surprise on his face.\n\nShe just smiled and shook her head. \"Eat first.\"\n\nA few minutes of silence passed.\n\n\"Sweetie,\" she told him, finally breaking the quiet. \"I don't want you to think that you have to be worried that I think you'll cheat on me.\"\n\nHe glanced over and cocked his head in curiosity. \"I know you get hit on,\" she continued. \"It's only natural, you're a handsome hunk of man.\"\n\nHe chuckled and took another bite of sandwich.\n\n\"I just don't want you to think I don't trust you.\"\n\nHe swallowed his food and nodded. \"I just don't have anything that I ever want to hide from you. But I also want you to do the same. I know you get hit on. It's okay for you to tell me about it. I'm not going to get jealous. I know you aren't going to stray.\"\n\nShe shrugged. \"Oh honey, most of the time I don't even notice until someone else says something, like Marie, or until later.\"\n\nShe stood tossed both of their plates in the trash.\n\n\"Let's go watch some TV,\" she said.\n\nA few hours later, she was snoozing lightly on the couch. She was a tiny thing, just over five feet tall and just the right about of sexy thin that he loved so much. He stood and leaned over, lifting her up easily and heading toward their bedroom.\n\nShe lifted her head and smiled. \"My big strong man,\" she said sleepily.\n\nHe smiled and nudged the door to their bedroom open. She fell easily into bed, wrapping the sheets around her, but holding them open for him.\n\n\"I'll be right back, gonna lock up.\"\n\nShe nodded and wrapped the sheet back around her.\n\nDuncan quickly went back and locked the doors and headed back to bed, dropping his clothes and jumping into bed. She'd already taken hers off and wrapped herself up against him as soon as he hit the sheets.\n\n\"Mmm,\" she sighed softly.\n\nHe inhaled deeply and smiled in the darkness.\n\n\"So would you like to know what I was doing over at Marie's?\"\n\nHe shrugged. \"I was more interested in making love to you, but that can wait I guess.\"\n\nShe smiled and turned into him, her lips meeting his as a soft moan escaped her lips. \"I love you so much,\" she whispered, her hand straying below the sheets. He felt her soft fingers brush against his manhood and then encircle it.\n\nHe moaned softly and was erect in moments.\n\nShe slid atop him, her breasts pushing up against his chest. She reached down to his crotch again and guided him in, sliding quietly down on him as she moaned in pleasure.\n\n\"God I love you,\" he said, his hands finding both her hips and pulling her down on him. She slid up and then down again, quickly working her way to an orgasm. He felt his own orgasm building and began pulling at her hips more forcefully, finally erupting inside of her as she softly kissed his lips and ran her hands up to his cheeks.\n\n\"That's it, baby,\" she said, \"that's it, fill me up.\"\n\nHe groaned and shot deeply into her, his cock all the way inside.\n\nShe kissed him a few more times, and then slid off, both of them falling asleep quickly.\n\n*****\n\nHe awoke the next morning and rolled over, but Kelly wasn't there. He heard the sound of the shower then and stretched his muscles. Yawning, he sat up in bed and smiled as Kelly came out of the bathroom, a towel wrapped around her chest and another on her head.\n\n\"Morning,\" he muttered.\n\n\"Morning love,\" she smiled, heading to her dresser to get some underwear. He loved to watch her move in the morning. He always secretly wished that her towel would fall off, but it never did. There was something magical about the cleft between her breasts where she always tucked the end of the towel.\n\nHe stood then and came up behind her and ran his hands up her waist, cupping both of her breasts. She giggled and wiggled away from him. He kissed her on the neck then and headed to the shower.\n\nAfter his shower, he got dressed and headed to the kitchen. Kelly had his cup of coffee ready for him and was drinking her juice. He leaned over and kissed her as he took his coffee in hand.\n\n\"What's on your agenda today?\"\n\nShe shrugged. \"Probably just a lot of office work. You?\"\n\nHe shrugged. \"Same old, same old.\"\n\nShe glanced up at him. \"About yesterday, Marie was just helping me with something. It's a surprise for you.\"\n\nHe nodded. \"You're not gonna tell me what it is, are you.\"\n\n\"It wouldn't be a surprise if I did,\" she giggled.\n\nHe shook his head and headed to the door. \"Have a good day babe,\" he said.\n\n\"You too,\" she called.\n\nDuncan drove to work thinking back on the sex they'd had last night. He loved how soft her skin was, how it felt when she ran it along his body. She always smelled good, too. He didn't think it could get any better.\n\n\"Hey man! Why'd you leave so early?\" Mark called as he hopped out of his truck in the parking garage.\n\n\"Well, I have a wife that I wanted to get home to,\" he answered, shutting his door and locking it behind him.\n\nThey headed for the elevator together. He felt Mark looking at him. \"You know we were just fucking with you right?\"\n\n\"I know man. I really just had to get home. Kelly was waiting on me.\"\n\n\"Okay, okay. I'm just making sure you didn't leave because we were messing with you.\"\n\nDuncan nodded. \"Nah, it's no problem. I know you guys like to mess with the married guy.\"\n\nMark laughed and rummaged around in his jacket for a second. \"Here,\" he said.\n\nDuncan looked over at him. He was offering him a piece of paper.\n\n\"What's this?\" he asked. He took the paper and peered down at it.\n\n\"The waitress from last night. She was a little down when you left. I offered to try and turn her frown upside down. So she takes out a piece of paper and writes her number down and hands it to me.\"\n\nDuncan nodded. \"Nice. Did you go home with her?\"\n\n\"Nope, but get this, she turns and says to me, 'It's for your friend, the married one that left.' \"\n\nDuncan turned and looked at Mark with a surprised look on his face.\n\n\"So anyways, I told her I'd give it to you, but that you wouldn't call.\"\n\nDuncan chuckled and put the number in his pocket, promptly forgetting about it. \"Well, you're right about not calling. Kelly will get a kick out of it though.\" They entered the building then and hit the button to their floor in the elevator.\n\n\"If it were any other guy, I'd tell them to just go fuck the girl, but I've seen your wife, and I wouldn't cheat on her either.\"\n\nDuncan shook his head. \"What about you man? You still with...\" he paused, not remembering the girl's name.\n\n\"Becky? Yeah, I'm still nailing her. We're not together, though.\"\n\n\"Good old friends-with-benefits,\" Duncan said.\n\nMark just smiled as the doors to the elevator opened on their floor.\n\nAs they came to Duncan's office, Mark saw that the desk sitting out front was still empty and glanced over at him. \"You still don't have a secretary after Joan left?\"\n\nHe shrugged in response. \"They said she was starting yesterday,\" he sighed.\n\n\"Lunch at Marco's?\" Mark asked.\n\n\"Sure,\" Duncan replied as he entered his office. He sat at his desk and began to sift through paperwork and go through emails. He was truly hoping for a half-decent secretary this time. He seemed to be cursed. The last lady could barely type, but she was a very sweet woman. All of his past couple of secretaries had been inept. He was a nice guy, but he eventually had to let them all go. He'd been hoping that the newest girl wasn't completely useless. The mounting pile of paperwork on his desk wasn't going to get any smaller until a new girl got there.\n\nA few hours later, he looked up as he heard a knock at the door.\n\n\"Mr. Thomas?\" came a feminine voice from the door.\n\nHe looked up and was momentarily taken aback. There in the doorway stood nearly the spitting image of his own wife. She was barely five feet tall and very pretty. He could tell that her red hair was long even though it was put up in a bun to keep it off her face. She had green eyes, perky breasts and even smiled a crooked smile like his wife did. There was enough of a difference, however, that he knew it wasn't her playing some weird joke.\n\n\"Hi,\" he said, standing and reaching out to shake her offered hand.\n\n\"Hi, I'm your new secretary, Kara Scofield.\"\n\nHe smiled genuinely at her. \"Nice to meet you. Call me Duncan, Mr. Thomas makes me look around for my father.\"\n\nHe ushered her into his office.\n\n\"So why don't you tell me what you expect of me, and then we can start cleaning this pile of work on your desk.\"\n\nHe nodded as he sat in his chair. \"Well, first and foremost, can you type?\"\n\nShe looked at him curiously for a long moment. \"Of course I can. I assume your last secretary lacked those particular skills?\"\n\nDuncan laughed. \"Well, technically she could type, but it wasn't anything to brag about.\"\n\nShe smiled and nodded. \"Yes, I can type just fine.\"\n\nHe caught himself staring at her again. She coughed and smiled nervously. \"I'm sorry,\" he said. \"It's just that you look an awful lot like my wife.\"\n\nShe looked at him doubtfully.\n\n\"I'm serious. Here,\" he said, turning a picture frame around on his desk.\n\nShe took it from the desk and looked, her eyes growing wider.\n\n\"Wow,\" she said.\n\n\"I know!\" he replied.\n\n\"We could almost be sisters!\"\n\nHe laughed at that. \"Well, as far as I know, she doesn't have any long-lost sisters.\"\n\nShe smiled. \"Wow, that's crazy. You'll have to introduce me to her.\"\n\nHe nodded.\n\n\"Okay, so beyond typing, what else can I do for you?\"\n\nHe smiled. \"I think you are going to work out just fine,\" he said.\n\n*****\n\n\"So have you been practicing?\"\n\nKelly rolled her eyes and didn't look up from her desk. \"No, I haven't been. It's only been like half a day since you gave me the darn thing.\"\n\nMarie smiled and leaned over. \"Is he looking?\"\n\nKelly glanced around her and saw that Mr. Deekins, the man in the office opposite of her desk was indeed looking intently at Marie's backside.\n\n\"Yes,\" she said.\n\nMarie giggled.\n\n\"You're so bad, Marie. What would your husband think?\"\n\n\"Oh, he wouldn't mind someone else getting a gander at me,\" Marie replied.\n\n\"Somehow I don't think you're kidding.\"\n\n\"Of course I'm not kidding.\" Marie purposefully knocked a pen onto the floor and bent over, keeping her knees straight to pick it up.\n\n\"Marie! Stop that!\" Kelly said.\n\nMarie giggled when she stood up. \"I bet he's full mast right now,\" she said.\n\n\"Oh my god,\" Kelly said, blushing for her. \"Go back to your desk, you tramp.\"\n\nTurning, she headed back across the room to her desk.\n\nKelly tried to go back to her work, but she got a message on her cell from Marie.\n\n\"He is!\"\n\nKelly sighed and tossed her phone into her purse.\n\n\"Kelly, do you have the Markinson account ready?\" Mr. Sellers, her boss, asked as he peeked out his door.\n\nShe nodded and stood, bending over slightly to get the file from the filing cabinet beside her desk. She turned and followed him in the office as he sat back at his desk. They went over a few things on the file, and she took some notes for things he needed her to do.",
        "She stood when he was finished and left the room. She heard her purse vibrate and checked her phone. She'd missed a few messages. The first was from her husband.\n\n\"Hey Baby, hope your day is going well. I've got a surprise for you when you get home. Something weird happened at work today. Love you,\" Duncan sent.\n\nThe second message was from Marie.\n\n\"Your boss was totally checking your ass out!\"\n\nKelly began to quickly type into her phone. \"Oh my god stop! He was not, and he's old enough to be my father!\"\n\nAfter that she set it back on her desk, expecting the return message. She wasn't disappointed a few seconds later when her phone vibrated again.\n\n\"He's a good looking guy! But I'll behave.\"\n\nKelly quickly shot back a thank you and put her phone back in her purse.\n\nThat evening, she made spaghetti for the two of them and waited patiently for Duncan to get home.\n\nShe smiled to herself when she heard his truck in the drive.\n\n*****\n\n\"Hi baby,\" he said when he'd taken off his coat.\n\n\"Hey,\" she said, heading over and stealing a hug and kiss from him.\n\n\"So I got my new secretary, and you'll never guess who she's the spitting image of.\"\n\nKelly looked over at him curiously.\n\n\"You,\" he said smiling and holding up his phone. \"She let me take a picture to show you.\"\n\nKelly took the phone from his hand and was genuinely surprised. \"Wow, she really does.\" She handed the phone back.\n\n\"I know,\" he said. \"I was weirded out the entire day. She's a great secretary, too. We got through half the crap on my desk by the end of the day.\"\n\n\"Wow,\" Kelly said, \"that thing has been cluttered since your secretary before this last one was let go.\"\n\nHe nodded. \"I know!\"\n\nShe smiled at him. \"Well, I'm glad.\"\n\nDinner passed and the enjoyed each others company. He snuck up behind her afterward as she was loading dishes into the dishwasher.\n\n\"I love you,\" he told her and kissed her gently on the neck.\n\nShe smiled. \"I love you too.\"\n\nShe felt him pull away then and heard him head into the living room and the TV turning on a few seconds later. She glanced over at her purse, where she'd hidden the dildo that Marie had given her to practice with and grinned. Tonight would be a good night to practice. She finished loading the dishes and headed to their room soon after, her purse in her hands.\n\n\"Gonna go take a long hot bath,\" she called.\n\n\"Okay,\" came his expected answer.\n\nClosing the door to the bathroom, she disrobed and drew a warm bath and poured in some bubble bath. Looking at herself in the mirror, she suddenly felt very silly, hiding in the bathroom intending to practice sucking on a rubber dildo. She peered into her purse and saw it. Shaking her head, she tossed her purse on the counter and settled down into the bath.\n\nThirty minutes or so later, she heard a soft knock at the door and her husband peeked in.\n\n\"Can I get you anything?\"\n\nShe turned and smiled at him and shook her head. \"I think you just wanted to get a peek at me.\"\n\nHe grinned at her from the doorway, and she obliged him by lifting her chest out of the water, the bubbles sliding sexily down her breasts as she turned towards him.\n\nHis smile grew wider and she giggled as he came in, pulling his clothes off and heading toward her. She held her hand up when he was standing just outside the tub, preparing to hop in with her.\n\nHe looked at her puzzled for a second.\n\nShe reached up and grabbed his semi-erect cock and stroked it gently while she looked up at him.\n\n\"So, don't be mad at me, but I asked Marie for advice on giving blowjobs,\" she said quietly, wrapping her lips around the tip of his penis as she finished the sentence. It was warm in her mouth, and slightly salty, probably from the sweat of the day, or maybe seminal fluid. She didn't mind the taste and drew him in deeper. She wasn't able to get him in as far as the dildo, and she assumed that it indeed was smaller than him.\n\nHe groaned loudly as his cock grew, filling her mouth as she whimpered slightly. He pulled out of her mouth then and stood her up in the tub, then lifted her in his arms and carried her to the bedroom.\n\n\"I'm soaked!\" she protested, but he wasn't listening.\n\nShe was tossed onto the bed and he quickly began to ravenously devour her pussy. She moaned loudly as his warm tongue split her and dove deep inside. She reached down and grabbed his head as she began to come. She began to convulse then, as her pussy proceeded to spasm on her husbands face, shock waves of pleasure coursing through her.\n\n\"Oh my,\" she groaned a few seconds later. She collapsed back in bed then and playfully slapped at his head. \"I was supposed to do that for you.\"\n\nHe looked up and met her eyes and grinned.\n\nShe felt him move up then and kissed her on the cheek. She smiled as he positioned himself at her entrance, sliding the tip up and down for a second before plunging deep into her. Her eyes rolled back in her head again as he pushed down into her.\n\n\"God, baby,\" she moaned, her pleasure multiplying as he began to thrust into her. She began to come again then, her legs wrapping around him as he thrust into her, her pussy quaking in pleasure.\n\nShe felt him begin to spurt his seed into her then, the warm liquid shooting deep into her. He thrust hard against her a few times, the sound of their flesh slapping against each other filling the room. The sensation of him losing control for a second and not being so careful with her, oddly began to feel good and she began to come harder.\n\n\"God, baby,\" she moaned again. \"Fuck,\" she whispered. She opened her eyes then and, wide-eyed, covered her mouth. She never swore.\n\nHe was grinning widely then, his penis deflating as they finished coming together. She blushed then, thoroughly embarrassed.\n\n\"I can't believe I said that,\" she said, looking up at him as he slid off and out of her.\n\nHe was still in post-orgasmic bliss and could only smile and shrug.\n\nShe nibbled at a lip and enjoyed the sensations running through her body. A short time later, he was finally able to speak, and the orgasm had finally run its course through her own body.\n\n\"So what brought that on?\" he asked, turning on his side.\n\nShe blushed and shrugged. \"Me swearing?\"\n\nHe smiled and nodded. \"Whatever it was, I wanna do it again! That was so... hot! When I feel you coming it makes my orgasm even better, if you can believe that,\" he said.\n\nShe smiled and covered her face in embarrassment.\n\n\"I don't know. I was just in such intense pleasure. I kept thinking about you inside me, and then you started to come. It seemed so intense for you that you seemed to lose control for a second and you just started entering me harder and harder. It was so good and wild then, it just pushed me farther over the edge.\"\n\nThe grin on his face was huge then, and they lay for an hour just enjoying each other's company.\n\nFinally, he turned on his side again and began to run a finger along her skin, fondling a nipple as he did so. She moaned softly beside him.\n\n\"So you asked Marie about blowjob advice? I thought we'd decided that blowjobs weren't our thing.\"\n\nShe closed her eyes and enjoyed his roaming hands. She felt his warm mouth close itself on her nipple and she sighed happily.\n\n\"Well, I know that you're a man, and that as a man, any attention that's paid to your big fella down there is considered pleasure. Sticking the big guy in my mouth spurred on this hot little lovemaking session, so I'd say talking to her was a good idea.\"\n\nHe lowered his head across her chest and sucked on her other nipple. He lifted his face briefly to respond.\n\n\"Yeah, it did, didn't it. But I told you before, it's okay, I don't mind not getting blowjobs,\" he lowered his face again and sucked in a nipple.\n\nShe moaned softly. She really enjoyed having her nipples sucked, and he'd even been able to bring her to orgasm just by paying extra attention to them. He pulled softly on the two piercings that she had in them.\n\n\"So what you're saying is that you wouldn't like any more? I was planning on getting really good at it. Marie even said she'd show me how to do something called deep-throating.\"\n\nHe groaned then as he felt her hand wrap around his cock and stroke it gently.\n\n\"Marie is such a naughty girl if she knows what that is,\" he said.\n\nShe giggled. \"Honey, seriously. I just want to be able to give you what you give me.\"\n\nHe sighed and smiled. \"I guess if you really want to give me blowjobs, I'll let you.\"\n\nShe smiled and rolled her eyes then. \"Oh really? You'll let me give you head?\"\n\n\"Sure,\" he said. \"You can give me as much head as your little heart desires.\"\n\nShe giggled and playfully slapped his chest. She glanced down then and saw he'd gotten erect again. She turned him over on his back and mounted him again, sliding slowly down on the cock that Marie had said made her a very lucky woman. It seemed to fill every inch of her down there, and her eyes rolled back in her head when he bottomed out in her.\n\n\"God baby,\" she moaned.\n\nHe was in pleasure too, she saw, his back arched and face contorted as she bounced up and down on him. She thrust herself down on him several times and began to come then, her body filling with pleasure as she began to come again. She felt him begin to come then too, filling her up again.\n\nFinally spent, the two of them crashed into bed.\n\n*****\n\nDuncan woke the next morning and headed to the shower. He'd just gotten done washing his hair and groin when the curtain was thrown back. Startled, he lifted one leg and covered himself up, but lowered his defenses when he saw his wife standing there laughing.\n\n\"Now that's my brave man,\" she said through her giggles.\n\nHe shook his head at her and began to pull the curtain back.\n\n\"Wait a second,\" she said. \"I thought you said I could have as much practice as I wanted?\"\n\nHe smiled then and felt himself getting erect.\n\nShe grinned as she saw his cock bouncing to life.\n\n\"So what did Marie teach you?\" he asked.\n\nShe smiled and reached for her purse.\n\n\"Well, first and foremost, that woman has a collection of these things that's quite extensive.\"\n\nShe reached into her purse and pulled out the black rubbery specimen that she'd approximated was his size and then held it up to show him.\n\n\"This is one of hers?\" he asked looking down at it. She nodded at him as she held it up against his cock, which was semi-erect at that point. They were about the same size then.\n\n\"Well that won't do,\" she said, and dropped the dildo on the ground and came forwards then, her mouth wrapping around the tip of his cock.\n\nHe groaned and steadied himself on the wall as he felt her warm mouth close around him. She bobbed softly up and down on him for a few seconds. He had to admit that she'd gotten a lot better at giving head. She used to actually blow, instead of suck and he hadn't wanted to hurt her feelings. She used way too much teeth, too, for his taste. He rolled his eyes at the thoughts that were going through his head. The only other blowjob he'd gotten was from his first girlfriend, and that was even worse than his wife used to be. He felt like he sounded like some blowjob expert.\n\nHe moaned and she wrapped a hand around his cock, her mouth clamping around the tip and stroking. He felt a little light-headed then and swayed slightly. She giggled down at his crotch and he felt her release him from her mouth. He looked down and she had the dildo again and was holding it up to him.\n\n\"Yep, much bigger,\" she said. \"I told her so.\"\n\nHe looked at her curiously then. \"You told Marie the size of my dick?\"\n\nShe giggled and nodded. \"She was very impressed.\"\n\nDuncan chuckled. \"So you like bragging about me?\"\n\nShe smiled. \"Just like you like bragging about me.\" She licked the tip briefly.\n\nHe smiled. \"So I can tell my buddies all about your new found love for giving me head?\"\n\nShe smiled and looked up at him then, shrugging as she took his cock back in her mouth. He groaned as he felt his orgasm rising and pulled her off his cock, trying to vocalize what was happening.\n\nAn arcing rope of semen shot out of his cock and landed across his pretty wife's face.\n\n\"Oh!\" she yelped in surprise. She turned her face away then and stood as another rope shot out and hit her in the stomach. She giggled as several more spurts hit her as she hugged him close.\n\nShe smiled then as he looked down at her and began to apologize. He reached for a towel then and began to wipe her off, apologizing in the process. She was giggling very hard though, and stepped past him and into the shower.\n\n\"So I guess I'm not too bad at doing that for you anymore,\" she said as he joined her in cleaning themselves off.\n\n*****\n\n\"You did?\" Marie asked her as she flagged her down in the parking lot to hand her the dildo back. It was wrapped in a brown paper bag and taped shut.\n\nKelly nodded. She'd just told her that she'd given him a blowjob that morning and that she'd be practicing on him from now on.\n\nMarie smiled at her then. \"I'm so proud of you,\" she said, hugging her.\n\nKelly shook her head. \"Proud of me for pleasuring my husband?\"\n\nHer friend nodded. \"My little cocksucker is all grown up!\"\n\n\"Marie, you are so vile,\" Kelly whispered, walking quickly away.\n\n\"I'm going to want details so you better text me,\" Marie called.\n\nKelly shook her head as she walked away.\n\n\"I'll get it out of you one way or another,\" Marie called.\n\nLater that afternoon, Kelly glanced up and saw Marie staring at her from across the office.\n\n\"Spill it,\" she mouthed at her.\n\n\"No,\" Kelly mouthed back.\n\nMarie stood then and adjusted her cleavage and headed into her bosses office after her intercom buzzed.\n\nShe looked up and winked. She was only in the office for a few minutes before returning, a file in her hand. Kelly saw her pick up her cellphone and sighed, knowing what was coming.\n\n\"Spill it, what happened,\" came the message.\n\n\"Nope,\" Kelly sent back.\n\nThat was the first of a dozen or so such texts that Marie sent that afternoon, pestering her. The last one said, \"BUT PUHLEEEZE,\" in all capital letters with a frowny-face emoticon.\n\n\"Begging for it now?\" Kelly sent back. \"Not gonna tell you.\"\n\nMarie pouted across at her and sent her a final message. \"Fine. Meany.\"\n\nKelly stayed a little late that evening, having to work on some extra paperwork, and was surprised to see Marie come back in after work.\n\nEveryone had gone home at that point, except for Kelly and Marie's boss across the way. The four of them, Mr. Deekins, Mr. Sellers, Marie and Kelly all worked in an office with multiple people, but they were in an office all to themselves, relatively secluded from the others on the same floor.\n\n\"Hey,\" Kelly said, standing and getting her stuff together.\n\n\"Hey girl,\" Marie said. \"I'm surprised to see you still here.\"\n\n\"Yeah, just finishing some stuff up. I was just about to leave.\"\n\n\"Mr. Deekins wants to finish some stuff up, so he asked me to come back and work late.\"\n\nKelly nodded and waved. \"I'm headed home. See you tomorrow.\" She was all the way downstairs before she realized that she'd forgotten her car keys.\n\n\"Crap,\" she said quietly and headed back up. Quietly exiting the elevator she headed to her desk and grabbed her keys. She glanced up and didn't see Marie at her desk.\n\nThe office that her boss and the other account managers worked in had wooden walls, but large windows where you could see into the office. The top of half was all see-through glass, but the bottom half was wooden, affording a little privacy. The wooden door was closed to Mr. Deekins' office. Mr. Deekins himself was turned away from her, but she could see his head over the back of his chair. He was leaning back. Suddenly, she caught a flash of movement and a familiar black head of hair flashed into view.\n\n\"Oh my God,\" Kelly whispered.\n\nMarie's black hair disappeared back into her boss's lap. She was giving him a blowjob! \n\n\"Oh my God!\" Kelly whispered again.\n\nMr. Deekins stood then and she saw Marie come into view. She was completely naked. She saw him turn her around then and bend her over a small table positioned against the far wall. The older man began to thrust into her friend. Reaching up, she saw him grab a handful of hair and yank hard. The sounds of Marie screaming in pleasure echoed throughout the office.\n\n\"Oh God, fuck me!\" Kelly heard her yell.\n\nShe quickly and quietly scooted out of the office and back into the elevator.\n\nThirty minutes later, Marie appeared in the parking garage and headed towards her car.\n\n\"What the hell was that?\" Kelly asked, walking deliberately towards Marie, who was on the phone.\n\n\"I'll tell you all about it when...\" Marie said, but stopped when she saw Kelly striding angrily towards her.\n\n\"I just saw you, Marie!\" Kelly yelled.\n\n\"Ed,\" Marie said, \"I'll call you back, love. Kelly just caught me fucking Mr. Deekins. Yeah. Yeah. I will,\" she said. \"I love you too.\"\n\nKelly was stunned. \"Wait... what the... that was Ed?\"\n\n\"Kelly, calm down,\" Marie said. \"Let's go sit in my car and talk.\"\n\nFive minutes later, Kelly was sitting in Marie's car, quietly waiting for her to explain.\n\n\"It's obviously not what you thought it was,\" Marie said.\n\n\"It looked like you were having sex with your boss.\"\n\n\"I guess it's exactly what it looked like then.\"\n\n\"Ed is okay with it?\"\n\nMarie sighed. \"Sweetie, I love you, but you are so very sheltered.\"\n\n\"What the hell does that mean?\" Kelly asked, her anger rising.\n\n\"Calm down, honey, I'll explain everything and you can ask any questions you want. Ed and I have what's called an open relationship. What that means is that he can have sex with anyone that he wants as long as I know about it, and as long as there are no feelings involved. The same goes for me.\"\n\nKelly had to let that sink in for a minute. She'd known Marie for most of her life and even though she'd always been on the sluttier side, she'd never have guessed this in a million years.\n\n\"You two can sleep with whoever you want?\"\n\nMarie nodded. \"Whoever I want, as long as they're clean and Ed okays it.\"\n\n\"So what, are you like not satisfied by Ed anymore?\"\n\n\"Ed and I have sex nearly every day. In fact, I was headed home to tell him all about it while I gave him a really sloppy blowjob.\"\n\nKelly shook her head. \"I just can't believe what I'm hearing. How can he be okay with this?\"\n\nMarie shrugged. \"Well, we started off slow. Ed always wanted to try a threesome, and you know me. I'm an adventurous gal. We met a college girl at a bar one night and all three of us fucked our brains out. After that, we tried a two-guy threesome with one of his doctor friends. Then we tried a couple and graduated to swinging and finally just agree to an open relationship where we could fuck whoever we wanted. We set the ground rules and agreed on them. We've been doing this for six or seven years now.\"\n\n\"God, Marie, how could you never have told me?\" Kelly asked.\n\n\"Kelly, dear, I knew you'd react the way you're reacting,\" Marie replied.\n\n\"So when you offered to help me show my husband how to give him a blowjob, that was a genuine offer?\"\n\n\"Oh, Kelly, I was teasing you. I know you better than that.\"\n\nKelly kept shaking her head, thoroughly shaken by the events that had transpired.\n\n\"I'm gonna go home now,\" she said, breaking a long uncomfortable silence. \"I'm gonna need some time to process all this.\"\n\nMarie nodded.\n\n\"I don't think you're a bad person. I just...\" Kelly started.\n\n\"I know. Take your time and process. I'll talk to you tomorrow.\"\n\nKelly nodded and left the vehicle. She was still in shock when she arrived home.\n\nThat evening, Kelly was finally able to get the image out of her head long enough to kiss her husband and hold a decent conversation with him. He sensed that she was distracted and she assured him that she was okay. She finished supper and kissed him on the cheek as he began to put away the dishes.",
        "\"So Marie asked about how it went last night,\" she said.\n\nHe looked up at her and nodded. \"What did you tell her?\"\n\nShe shook her head at him. \"Nothing. It wasn't any of her business.\"\n\nHe shrugged. \"Well sweetie, you did ask her for blowjob pointers. It seems kind of rude not to tell her how it's going.\"\n\n\"Duncan, I'm not going to tell my friend about giving you a blowjob.\"\n\nHe chuckled. \"All I'm saying is that I wouldn't mind if you did.\"\n\nShe giggled and turned, heading for her their bedroom and a shower. They went to bed that night without making love, and the next morning, he had to leave early for something at his own office. She kissed him on the cheek as he left. She hurriedly went to the office, and was thankfully consumed by work until lunch. She barely had time to look up, and every time she'd look over at Marie, her friend was working.\n\nLunch was different, however. She glanced over at her friend who was uncharacteristically silent. Finally, she couldn't take it any longer and broke the silence.\n\n\"Look, I'm sorry I reacted the way I did. I was just surprised. I didn't go back to the office last night to try and catch you, I really just forgot my keys.\"\n\nMarie smiled. \"Sweetie, you reacted the same way everyone usually does. I don't hold that against you.\"\n\nKelly breathed easier then, knowing her friend wasn't upset with her.\n\n\"I just didn't realize that people actually did that,\" she said.\n\n\"It's just sex, Kelly. It's nothing to get too bent out of shape over.\"\n\nShe turned and looked at the brunette. \"That doesn't sound like the Marie I know.\"\n\nShe smiled back. \"Look, all I'm saying is that its not worth getting hung up on sex. I mean yes, I love sex. I have a lot of sex. I love fucking a guy that I shouldn't. Sometimes Ed will pretend that I'm not allowed to fuck someone, when I really know that I can and it's just that much hotter. We always talk about it when we're done and I know that he's okay. It's the same way with him. I love to hear about how he seduces some girl half his age. He's quite the ladies man for an older guy.\"\n\n\"Marie, I know you love sex. That's why it's odd to hear you say I shouldn't get hung up on it. I love sex too, and I don't worry about it. That's because I'm only having sex with my own husband.\"\n\n\"Honey, I didn't mean you shouldn't get hung up on sex. I meant you shouldn't get hung up on worrying about sex. Just have sex. It's easy. Enjoy it.\"\n\nKelly shook her head. \"It's not so easy for everyone, Marie.\"\n\n\"What do you mean by that?\"\n\nKelly shrugged.\n\n\"Oh come on, tell me what happened.\"\n\nKelly smiled then.\n\n\"Well, Duncan said I could, so...\"\n\nMarie giggled and clapped excitedly.\n\n\"Well, I was bathing and was going to practice on the...\" she paused then, suddenly feeling embarrassed.\n\n\"Dildo,\" Marie prodded. \"Honey, you can't be embarrassed if you're going to talk about it. Stop getting so shy. Dick, cock, pussy, dildo. They're just words.\"\n\nKelly blushed again. \"I'm trying. I'm just not as used to it as you are.\"\n\nMarie cackled at that. \"Yeah, I'm a naughty girl. Anyways...\" she prodded.\n\n\"So I was going to practice giving a blowjob to your dildo and I was hiding in the bathroom taking a hot bath. I just felt silly and decided not to. I was bathing instead and like... thirty minutes later Duncan came to check on me.\"\n\n\"Ooh, nice, bathroom sex scene!\" Marie said smiling.\n\nKelly blushed and shook her head. \"This isn't easy for me, you know.\"\n\nMarie made zipping motion across her lips and smiled.\n\n\"So he comes in and I kind of... sit up and let him see my boobs.\"\n\n\"Ooh, all nice and soapy and sexy, I bet.\"\n\nKelly giggled and shook her head. \"Yeah, I guess. So he starts to take his clothes off and I kind of...\"\n\nMarie smiled. \"Slipped and put his dick in your mouth,\" she finished for her.\n\nKelly blushed a deeper red then and nodded. \"I can't believe I'm telling you this. Yes, I started giving him a blowjob.\"\n\n\"Sucking his dick,\" Marie said pointedly.\n\nKelly nodded.\n\n\"No, Kelly. If I'm going to help you, you're going to say it right. None of this PG-rated blowjob stuff.\"\n\nThey arrived at the restaurant then, and the conversation took a hiatus while they ordered. The teenager in the paper hat brought them their food quickly and they headed back out to Marie's vehicle to eat.\n\n\"So you were what?\"\n\nKelly swallowed some of her soda and cleared her throat. \"I was giving him...\"\n\nMarie cleared her throat and looked at her expectantly. \"You were what?\"\n\nKelly sighed and lowered her voice. \"I was sucking his...\"\n\n\"His what?\" Marie asked.\n\n\"Dick. I was sucking his dick,\" Kelly said, blushing.\n\n\"Atta girl, that wasn't so hard,\" Marie said playfully. \"Continue.\"\n\nKelly kept blushing and shook her head. \"You're not making this easy,\" she said. \"So I'm giving... sucking his dick and I barely get to do it for like...10 seconds before he picks me up and throws me on the bed and proceeds to go down on me. Then we made love and I felt him kind of... lose control. We both had an orgasm so powerful that it felt like I was losing consciousness.\"\n\n\"Mmmm, those are the best kind. So it sounds like you're having fun and he's enjoying it.\"\n\nKelly nodded. \"The next morning...\"\n\n\"Ooo, there's more!\" Marie said excitedly.\n\n\"The next morning,\" Kelly continued, \"He's in the shower and I came in and started... sucking his dick again. He got this weird look on his face and shoved me off really quickly and then came all over my chest and once on my face,\" she covered her mouth at the last particular part, surprised that she'd actually said it. She smiled when she glanced over at Marie.\n\n\"I'm so proud of you!\" she said. \"Why didn't you just swallow it?\"\n\nKelly shook her head and gave her a look that spoke volumes about how disgusting she thought it was.\n\n\"Oh that's right, you're sheltered. Don't you do anything kinky?\"\n\nKelly shrugged. \"Blowjobs in the bathroom aren't kinky?\"\n\n\"Oh honey,\" Marie replied. \"Not even remotely kinky. Let's go down the list. Sex in public?\n\nKelly shook her head. \"Nope.\"\n\n\"Spanking?\"\n\n\"Nope.\"\n\n\"Uh, masturbating for each other?\"\n\n\"Nope.\"\n\n\"Hair pulling?\"\n\n\"Ow, no,\" Kelly replied.\n\n\"Well, did you at least let him put his hands on your head when you were sucking that giant cock of his?\"\n\nKelly shrugged. \"I don't think so. Why, should he?\"\n\nMarie smiled naughtily. \"I don't think you two are quite there yet, but for me, it doesn't get any hotter than when a man does exactly what he wants with me. I come so fucking hard when I've got Ed in my pussy and some other guy jackhammering my mouth. He'll grab a handful of my hair and just go to town on my face, shoving his cock as deep as he wants to. God, I'm getting wet just thinking about it.\"\n\n\"Jesus, Marie, stop it!\" Kelly said, giggling.\n\nSmiling, Marie winked at her. \"I'll be okay. Ed wants me to try and suck Mr. Deekins' cock while other people are in the office. I'm going to just go in there after lunch and crawl underneath his desk. It's not as easy as it sounds, you know, there aren't that many people that come in where we work, if you hadn't noticed.\"\n\nKelly turned and looked at her then. \"So how long has that been going on?\"\n\n\"Mr. Deekins and I? Just a few months. We were at that company dinner when we signed the Dawson account and he and Ed just started talking. Bob mentioned that I was a great secretary and Ed kind of just told him that he could use me for more than just secretarial work. The two of them talked almost as if they were negotiating an account. It was so hot, it was almost like I didn't have any say in the matter. That first time, in fact, was that night. You and your big-dicked husband had gone home. Ed came and whispered in my ear, go into the bathroom and give your boss a blowjob. Bob nearly fainted when he heard Ed telling me, and I just turned and headed to the bathroom. It took him a minute, but he came in, and then he came in my mouth.\"\n\n\"Marie!\" Kelly said, getting embarrassed again.\n\nShe grinned in response. \"Bob gets to fuck me whenever and however he wants. He can fuck me in my ass, my pussy, my mouth. He keeps me employed and we both get to have a little fun.\"\n\n\"Why would Ed want to know about all of that though? Why would you go home and torture him by telling him.\"\n\n\"Sweetie, Ed likes to hear about me getting fucked. It turns him on and then we end up fucking. It's a win-win for me.\"\n\nKelly shook her head.\n\n\"Come on, don't tell me you don't think Duncan wouldn't find that hot as hell.\"\n\n\"Oh Marie, I'd never do that to him.\"\n\nMarie shrugged, apparently letting it go. Kelly was quietly thankful.\n\n\"It's not always about intercourse and fucking, though,\" Marie said. \"Something that might be more you and Duncan's speed is being shown off.\"\n\nKelly looked at her curiously. \"We're not going to start doing that, Marie.\"\n\n\"I'm not talking about you letting someone fuck your brains out, I'm talking about wearing shorter skirts, showing a bit of skin to strangers.\"\n\nKelly shook her head. \"I don't think Duncan would like that.\"\n\nMarie shook her head. \"You mean to tell me that if Duncan took you out, the woman that is so in love with him and who is so unbelievably sexy and he had you all dressed up in something just a little slutty, that he wouldn't like it.\"\n\nKelly shrugged. \"I guess he'd like that.\"\n\n\"Now imagine you're at dinner, and you're not so shy and bashful and you flash the waiter a little leg or let him see farther down your low-cut shirt than he has a right to. You see the waiter get a hard-on, and Duncan sees him get a hard-on by looking at his wife. His property.\"\n\n\"I'm not my husband's property.\"\n\n\"I know that Kelly, but you know what I mean. Sexually, you're Duncan's alone. For all intents, you're his property and he is yours.\"\n\n\"Go on,\" Kelly said, biting her lip, suddenly nervous for some reason.\n\n\"So the waiter gets excited seeing something that is only your husband's. Duncan knows that you're his. He knows you aren't going to leave him. Imagine that you like knowing that the waiter can see you. Imagine that it's turning you on, getting your pussy wet knowing that your husband can see someone staring at you with lust in his eyes, wanting to take what's not his, but not getting to.\"\n\nKelly was chewing her lip nervously then.\n\n\"Tell me that your husband's cock wouldn't be rock hard at that moment.\"\n\nKelly shook her head. \"I don't know, Marie. I wouldn't ever dream of doing that to him.\"\n\n\"Sweetie, you wouldn't be doing it to him, you'd be doing it for him.\"\n\nKelly shook her head and glanced down at her watch. \"We'd better get back.\"\n\nMarie nodded and started the car, pulling out into traffic. \"I need you to do me a favor,\" she said.\n\n\"Okay,\" Kelly said, glad for the conversation to change to something other than sex.\n\n\"I'll text you when I go in to give Mr. Deekins his blowjob, and when I do, Ed asked me to tell you to go and knock on Bob's office and peek in. I'll hand you a file that needs his signature beforehand and all you have to do is come in and put it on his desk.\"\n\nKelly shook her head. \"Marie, you aren't going to rope me into your sex games. Just keep me out of it.\"\n\nMarie pouted at that but left it alone. \"Could I at least have a picture of his giant cock so I can imagine that it's his I'm sucking on?\"\n\nKelly looked at her with her mouth open. \"Marie Sanderson, I'm not going to let you get off to my husband's cock!\"\n\nShe embarrassed herself when she said cock, however, and blushed.\n\nMarie pouted again. \"I guess I'll just have to imagine that big sucker.\"\n\nThe rest of the day, Kelly was busy with work. She noticed Marie stand then and wink at her as she went into the office and closed the large wooden door behind her, she didn't see her walk past the window, so she must have dropped to her knees.\n\nKelly blushed for her then. \"Little tramp,\" she whispered to no one, and focused on her work.\n\n\"Oh, by the way, Mark gave me this the other day,\" Duncan said as he prepared dinner for the two of them later that evening. He tossed the piece of paper at her.\n\n\"Who's April?\" she asked, going through the mail.\n\n\"She's that waitress that the guys were bugging the other night. After I left, Mark said she pretended to get all sad and gave him her number, and said to give it to me. He said he told her that I wouldn't call.\"\n\nKelly giggled and went and pinned it to the cork board where they put all the other phone numbers the two of them were given.\n\nHe smiled and turned back to the stove. \"So how's Marie?\" he asked.\n\nKelly smiled as he turned to look at her. \"She's fine.\"\n\nHer cellphone buzzed then and she picked it up, glancing at it.\n\n\"I let Bob come in my mouth,\" it said. \"Did you tell your husband I'm such a naughty girl?\"\n\nKelly texted her back, \"Nope,\" and put her phone down.\n\n\"Did she give you any more pointers?\" he asked, turning and looking at her.\n\nShe grinned and stood then. \"Would you like to see?\" she asked, dropping to her knees and reaching for his zipper.\n\nHe smiled and pulled her up. \"I don't want to burn the food,\" he said.\n\nShe raised an eyebrow. \"My husband is passing up a blowjob for supper?\"\n\nHe turned and looked at her curiously for a second. \"You're right, forget supper.\" He turned and unzipped his pants and fished around for his dick.\n\n\"No, no, you're right, we shouldn't burn supper,\" she said, turning away.\n\nHe smiled and grabbed her by the arm, feigning being angry. \"Now now, you can't offer that and not follow through.\"\n\nShe grinned as he spun her around. \"Oh really?\"\n\nHe chuckled and released her arm, kissing her on the nose.\n\nShe smiled and stood on her tiptoes to get a real kiss.\n\nHe turned back and finished cooking.\n\nHer phone buzzed again and Duncan leaned over and grabbed it from the counter. \"Here,\" he said, sliding it over to her.\n\nKelly glanced at it and rolled her eyes. \"Marie...\" she said.\n\n\"What?\" Duncan asked, suddenly curious.\n\nShe shook her head. \"She's just... not who I thought she was.\" She could feel him looking at her.\n\n\"Everything okay?\" he asked.\n\nShe nodded. She glanced down at the text. \"You can tell your husband about what you caught me doing last night,\" it said.\n\nShe sighed. \"Well, I caught Marie doing something yesterday.\"\n\n\"Oh yeah?\" he replied.\n\n\"Yep. I forgot my keys and had to go all the way back up to my desk. I saw her giving her boss oral sex.\"\n\n*****\n\nDuncan had been taking a swig of beer when he'd heard what his wife said. He sprayed a fine mist all over the stove, causing her to erupt into giggles. He turned then, wide-eyed.\n\n\"She was what?\"\n\n\"She was giving Bob Deekins a blowjob. Then he bent her over the desk and was going to town on her.\"\n\n\"Oh my God, babe, what did you do?\" he asked.\n\nShe shrugged. \"I met her out at her car and she proceeded to explain. Apparently we don't know our friends as well as we think we do.\"\n\nHe was stunned. He didn't think Marie would do that to Ed. \"Oh my God, poor Ed. He's going to be crushed.\"\n\nKelly shook her head. \"I doubt that. Apparently it's a thing they have arranged. She called it an open marriage.\"\n\nHe'd heard of the concept before, but had never known anyone that actually practiced it. \"I've heard of that, but I've never known anyone like that.\"\n\n\"Well now you do,\" Kelly said, helping him set the table.\n\nDuncan was just as shocked as Kelly had been. He began asking her questions, and Kelly answered as best as she could.\n\n\"So he likes to know about what she's doing?\"\n\n\"She said he loves it.\"\n\n\"When did this all happen? What's the most people she's been with? Why?\"\n\nThe last question caught her by surprise. \"I guess because it spiced up their sex life. She said they have sex nearly every day. Her boss gets to have her any time he wants her.\"\n\n\"But what if...\" he started.\n\n\"Baby,\" Kelly said finally. \"Just ask them tomorrow at lunch.\"\n\n\"We're still going to have them over?\" he asked.\n\n\"Well I thought so, we've been having lunch most Saturdays for years with them.\"\n\nHe nodded. \"Yeah, you're right. I'm being a jerk.\"\n\nShe shook her head. \"It's okay, baby, it took me a day or so to wrap my brain around it, too.\"\n\nHe pushed back from the table then and headed to their bedroom as she started to load the dishes. He still couldn't believe what Kelly had just told him. He'd always known that Marie was a freaky woman just from the way Ed and he talked when the women were chatting. He couldn't have imagined that they'd been that kinky all this time.\n\nKelly came to find him a little later and he was absentmindedly flipping through the channels. She took the remote from him and clicked it off and dropped to her knees in front of him.\n\n\"I figured I might get some practice in before bed,\" she said, looking demurely up at him as she fished for his dick.\n\nHe smiled at her and lifted his butt up off the couch letting her pull his pants down and eventually off. She took his dick in her hand and gently jerked it up and down, looking up at him with love in her eyes. She bit her lip gently as he peered down at her.\n\n\"Take your shirt off?\" he asked her.\n\nShe smiled. \"I don't know. Should I?\"\n\nHe shrugged.\n\n\"Tell me to take it off,\" she whispered, winking at him.\n\nHe smiled, his erection growing stiffer. \"Take your shirt off, please.\"\n\nShe smirked at him. \"Please?\"\n\nHe smiled down at her. \"Take your shirt off, now?\"\n\nShe giggled and began pulling at the bottom edge of her t shirt, pulling it up and off and letting her ample breasts free.\n\nShe smiled as she felt him get larger in her hands, his eyes roaming over her body. \"These are your breasts, baby. You can play with them any time you like,\" she whispered.\n\nShe must be really turned on, he figured. She was never this vocal or aggressive. She leaned forward then and he saw her open her mouth and then close it around the tip of his penis. She was careful to wrap her lips around her teeth and then gently sucked. He closed his eyes as he grew to his full length in her mouth. She squealed softly as he did so, filling her mouth. She sucked gently as he sat there. He glanced down at her again and sighed in pleasure as she looked up at him. He relaxed as she began to suck him, her red hair bouncing in sexy ponytails as she knelt in front of him. She sucked him for a few minutes before she had to stop, her jaw getting sore. She stood then and began to head back to their room but he reached for her hand and pulled her back. Reaching down, he pulled the bottom of her underwear away from her pussy and pulled her back down to him.\n\n\"Oh fuck, baby,\" she moaned as he penetrated her, sliding his cock deep into her and past her constricting underwear. She began to convulse in an orgasm almost immediately.\n\nHe didn't last much longer than her. She bounced on him gently a few times, his cock sliding slowly in and out of her while she nibbled at her lip and let him suck on a nipple. He began to come then, and shot deeply into her, pulling her down hard on his lap. His cock felt harder than it ever had before then as it continued to spasm deep into her.\n\nShe kept grinding into him as he did so, his cock pulsing again and again into her. Finally she collapsed on top of him, exhausted and spent.\n\n\"God, that was good,\" he said, groaning as she slid her thoroughly fucked pussy off of his diminished manhood.\n\nHe grunted and slumped down into the couch. They both lay there until they could move again several minutes later, and headed to bed.\n\nThe next morning, Duncan awoke to a very pleasurable sensation. He lifted the sheets and looked down. He gorgeous wife, her hair still up in sexy little ponytails, had his impressive morning erection in her mouth and winked at him as she took him deeper in her mouth. She moaned softly as he brushed a hair from her face and took him into her mouth deeper. She went as far as she could go and gagged a little as he hit the back of her throat.",
        "Apologizing quickly, he tried to lift her up, but she put a hand on his chest and shook her head.\n\n\"Nn-nn,\" she murmured, her lips still wrapped around him. Her hand was pumping up and down on him as she slurped at the tip of his cock, her tongue wrapping around the tip. She pumped fast and faster until he began to feel his orgasm overpower his will to resist and he moaned loudly and hurriedly tapped her on the shoulder. She took his cock out of her mouth and wrapped both hands around it, jerking swiftly on his slobber-covered member. A rope of cum shot out and landed on his stomach, followed by another and then another. She smiled up at him and finally released him.\n\n\"Good morning,\" she said, sliding up beside him and nuzzling close. He chuckled and squeezed her, but felt sleep quickly approaching.\n\n\"Sleep,\" she commanded, sliding out as she sensed him starting to drift away.\n\nThe next thing he knew, it was around lunch and she was gently nudging him to wake up.\n\n\"Wake up, sleepyhead. They'll be here soon, silly.\"\n\nHe groggily lifted his head up and smiled at her.\n\nShe kissed him and headed back to the kitchen.\n\nShowering quickly, he made it down just in time to hear the doorbell ring. Ed and Marie came in, Ed holding a case of beer and smiling.\n\nLunch proceeded as normal, conversation polite and non-threatening. Marie and Kelly chatted about work while Ed and Duncan talked sports.\n\nAfter, it began to snow lightly and the girls decided that a dip in the hot tub was called for.\n\n\"There's just something about getting in a hot tub when it snows,\" Ed said as he came back inside after retrieving their bathing suits from the car.\n\nNodding, Duncan headed outside and pulled the cover off and made sure the hot tub was warm and clean. The girls came out then, Kelly in a sensible one piece, and Marie in slightly more provocative two piece. Duncan headed upstairs and changed, reappearing a few minutes later to find the three of them already in the jacuzzi.\n\nHe kicked on the bubble jets and hopped in, his wife sliding up between his legs, following Ed and Marie's example.\n\n\"So where are Drake and Molly?\" Marie asked. The other couple joined them sometimes for the Saturday get together.\n\n\"Baby sitter issues,\" Kelly replied, shrugging.\n\nEd took a swig of his beer and glanced over at the two. \"So Kelly tells me that you guys have questions about our lifestyle choices.\"\n\nDuncan chuckled and took a long draw on his beer. He scooted Kelly up and went and retrieved the small cooler he kept out back and put the beer in it.\n\n\"If we're gonna talk about this, I'm gonna need another drink,\" he said, popping the top. \"Anyone else?\"\n\nThree hands went up and he chuckled, handing out three beers.\n\nClimbing back in, he pulled Kelly close and let her settle against his chest.\n\n\"So, feel free to ask whatever you like. Don't be shy about how dirty, or raunchy you think the question is,\" Marie said.\n\nDuncan was quiet for a minute, so Kelly took the lead.\n\n\"Do you really enjoy hearing about what your wife does with other men?\" she asked.\n\nEd smiled. \"Absolutely. You see, I consider myself a very selfish lover. I'm all about making myself feel good. For me, I love to see my wife in pleasure. Seeing her coming, or just having a good time, gives me pleasure.\"\n\n\"Like actual physical pleasure?\" Kelly asked.\n\n\"Actual physical pleasure,\" he confirmed. \"It gets me hot. I get really turned on and it enhances my orgasm. You see, I know she's having a good time, because I know what that looks like. I know how she looks when she's coming and when she's enjoying herself. It's like getting really turned on from watching a porno, or a really good sex scene in a movie.\"\n\n\"But don't you get jealous?\" Duncan asked.\n\nEd shrugged. \"Honestly, no. I love her too much for that. We're secure in our marriage. I know she'd never cheat on me and she'd stop if something got too personal. I'm not a cuckold, so she'd never try to hurt me.\"\n\nDuncan and Kelly both looked at him curiously. \"You don't know what that is, do you?\" Ed said.\n\n\"Sweetie,\" Marie chimed in, \"there's something you're going to have to realize. These two, while incredibly sexy and I'm sure capable lovers, are incredibly sheltered.\" \n\nDuncan chuckled. \"It's true. We both grew up in very strict Christian households, and we're not the type of people to really want to try crazy things.\"\n\n\"Ah,\" Ed said. \"Enough said. A cuckold is a man that gets pleasure from seeing his wife with other men. The difference is that she tries to humiliate him, or tells him that the other lover is much better than her husband ever could be. You see, it's not the sight of his wife being pleasured, it's the act of being humiliated that gives him pleasure.\"\n\nDuncan and Kelly both nodded. \"But you're not like that?\"\n\nHe shook his head. \"It's not about that for me. I'm confident in my ability to bring her pleasure. I did it for years before we ever tried fooling around with another person.\"\n\n\"Ed is a very attentive and affectionate lover,\" Marie said, turning and kissing him.\n\n\"So you guys have an open marriage, does that mean you're swingers?\" Duncan asked. \"Because that's a term I have heard before.\"\n\nEd was shaking his head. \"That's two similar, but different things. Swinging is sharing your spouse with another couple, either individually or together. An open marriage isn't a mutual consent thing, normally. An open marriage means that if I find some girl attractive, let's just say Kelly, for argument's sake. Let's say that she's a waitress that I find attractive and I sweet-talk her into coming home with me. As long as Marie is okay with it, and Kelly is obviously okay with it, I can have sex with her.\"\n\n\"That sounds like swinging,\" Kelly said.\n\n\"Right, but in an open marriage, Marie doesn't even have to like the girl, she just has to still be accepting of my desire to sleep with another woman.\"\n\n\"He's not explaining it very well,\" Marie admitted. \"It's like this. If I meet a guy in a bar, I can take him home and fuck him for a week, and I'll know it's okay with Ed. He'll either tell me to have fun before I go out, or I'll call him and let him tell the guy that it's okay to fuck me. Ed doesn't really get involved. With swinging, its more about a group experience and multiple couples. Some couples take the open marriage farther than we do. For them, the other person doesn't even really have to know that they are sleeping with someone else, it's simply okay. We decided that we would always be involved in the process in some way. It makes it sexier for us. There are some couples that take it a step further, however. Some of them actually consider dating another person while your married, okay in an open marriage. More often than not, that's the definition you'd get. We just don't support that part.\"\n\nDuncan and Kelly were both staring at them in rapt attention.\n\n\"So do you ever just hang out with the people you have sex with?\" Kelly asked.\n\n\"Sure,\" Marie said. \"We do something called soft swinging with a couple in Dallas every month or so. \"For them, it's about being seen by another couple.\"\n\n\"What's soft swinging?\" Duncan asked, beginning to feel incredibly naive.\n\n\"Basically, just two couples either fooling around with their own partners in the same room, or doing everything but intercourse with a different partner. It would be like you two having sex while we were in the room watching, or having sex ourselves. Some people consider oral sex only soft swinging.\"\n\n\"So how often do you guys fool around with other people?\" Kelly asked.\n\n\"Well, Kelly probably already told you that Ed and my boss negotiated an arrangement where my boss gets to fuck me whenever he wants during work hours, and sometimes after work. The only stipulation is that I have to tell him about it when I get home. Other than that, pretty regularly, I guess.\"\n\n\"I have to admit, I tried to get Kelly involved to some extent,\" Ed said, drawing a look of surprise from the two of them. \"I told Marie to tell her to go and catch them in the act, so to speak, but to pretend not to notice.\"\n\nDuncan was shocked. \"Wow,\" he said, turning and looking at his wife. \"Did you?\"\n\nShe looked at him incredulously. \"Of course I didn't. I would have told you.\" He felt her hands roaming around under the water then and she reach behind her and felt his stiffness.\n\n\"So what about you?\" he asked, looking at Marie. \"Do you like hearing about his conquests?\"\n\nShe shrugged. \"I like it, but it's not a requirement. He gets off on that more than I do.\"\n\nEd glanced at Kelly and said, \"So I hear that my wife is giving you blowjob advice.\"\n\nMarie elbowed him in the stomach. \"You weren't supposed to know about that,\" she said.\n\nKelly had turned a bright red and covered her face with her hands. Duncan chuckled then, only slightly embarrassed.\n\n\"I'm sorry,\" Ed said. \"She just told me when we were coming over. If it's any consolation, you've got the best teacher you could ask for,\" he said.\n\nKelly finally uncovered her face but was quiet.\n\n\"I hear that she's making progress,\" Marie said, smiling at Duncan.\n\nSeeing that the mood had been broken, though, the two of them quickly made their excuses and got ready to leave.\n\n\"It's been fun,\" Ed said, shaking Duncan's hand. \"We'll see y'all next weekend.\"\n\nMarie was apologizing again and Duncan saw Kelly trying to brush it off.\n\n\"Sorry,\" Ed said, leaning down and kissing Kelly on the cheek. \"I didn't mean to embarrass you.\"\n\nMarie came over and squeezed Duncan in a hug, kissing him on the cheek. \"Bye,\" she said.\n\n\"I'll see you at the office tomorrow,\" she said blowing a kiss to Kelly.\n\nEd turned as the two of them exited and winked at Duncan. \"You sure you don't wanna borrow Marie for awhile, you can get some hands-on training, Kelly.\"\n\n\"Ed!\" Marie yelled.\n\n\"Oops, gotta go,\" he said with a grin.\n\nDuncan shut the door and headed into the living room, Kelly joining him a minute later.\n\n\"For what it's worth,\" he said, \"you're getting much better at giving blowjobs.\"\n\nShe smiled. \"You like my blowjobs?\" she asked.\n\n\"Baby, you're putting the most sensitive part of my body in your mouth, skillfully manipulating it. I love it.\"\n\nShe smiled and leaned against him. \"So that's what our friends go and do after they leave here,\" she said.\n\nHe smiled and kissed the top of her head. \"So did you hear anything interesting?\" he asked.\n\nShe smiled and shrugged. \"Well, it was all interesting.\"\n\nHe rolled his eyes at the evasive answer. \"She said she could see us being a little more adventurous, actually.\"\n\n\"Oh yeah? How's that?\"\n\n\"She said we should start slowly. She was talking about us being in a restaurant and the waiter seeing down my shirt, and you notice and I notice that he's excited. I let him watch a little more without actually encouraging him, but you know that I know. Almost like you're showing off your possessions.\"\n\n\"I don't own you,\" he said.\n\nShe nodded. \"Sexually, I'm yours,\" she replied, echoing Marie's earlier statement.\n\nDuncan looked down as he felt her fidget with his pants. His fully erect cock sprung out then and she leaned down to kiss the tip. \"I see someone likes that idea,\" she said, her hands wrapping around it.\n\n\"What else did she say?\"\n\nKelly smiled as she brought him into her mouth.\n\n*****\n\nShe knew he'd been turned on by the stuff they'd heard their friends talk about. She brought him into her mouth and then back out again as she gently pumped his cock. Feeling him so hard in her mouth, she decided she had to have him inside her, and quickly stood and stripped off her panties from underneath her dress. She slid down his thick cock slowly, her mouth agape as he gently penetrated her.\n\n\"Fuck,\" she muttered softly.\n\n\"What did she say?\" he prodded again, his cock deep inside her.\n\n\"She said...\" she started, but was interrupted by the doorbell.\n\n\"Shit,\" he said, scrambling for a pillow as the door opened.\n\nMarie came back in and headed for the back porch, \"Sorry guys, Ed left his phone.\"\n\nKelly stood quickly as Marie came in, trying to appear as if nothing was going on.\n\nMarie turned and smiled as she saw Duncan trying to cover up his hard-on.\n\n\"Oh my, did I catch you guys fooling around?\" she asked playfully as she opened the back door.\n\n\"Marie!\" Kelly said.\n\n\"Is that the monster?\" she asked.\n\n\"Marie!\" Kelly protested again.\n\n\"Can I see it?\" she asked.\n\nKelly pointed towards the back porch and pushed Marie out. \"Get the phone and go home,\" Kelly said, blushing.\n\n\"Just a peek,\" Marie said, retrieving the phone and trying to peer around the pillow.\n\n\"Good lord, Marie,\" Kelly protested\n\n\"Please,\" Marie begged, pouting at her.\n\n\"Just give her a quick peek,\" she said, surprising herself. \"She's just going to keep bugging me until I show her.\"\n\nDuncan's eyes went wide then and he shook his head.\n\n\"Woohoo!\" Marie said rushing forward and yanking the pillow out from his hands. \"Holy crap,\" she said as she glanced down at Duncan's iron staff of an erection.\n\n\"You've had your look, now go home,\" Kelly said.\n\n\"Just a second,\" Marie said, taking Kelly's hand and pulling her back to Duncan. She turned her around and faced her towards Duncan and pushed her forwards. Kelly fell onto her husband and smashed his cock into his stomach, causing him to wince.\n\nMarie looked in rapt attention as she waited for the two to start again.\n\nKelly tried to stand but Marie pushed her back down onto his lap.\n\n\"Just put it in and I'll go,\" she said. \"God that thing is impressive.\"\n\nKelly sighed and maneuvered her husband until he was correctly positioned and slid inside. Not able to help herself, she gasped open mouth and bit her lip softly as he entered her again. \"God,\" she moaned.\n\n\"God is right,\" Marie said, standing and heading towards the door.\n\n\"You sure you don't need a hand?\" she called as she opened the door.\n\n\"Goodbye, Marie,\" Kelly called, pushing down hard against him. \"Fuck,\" she moaned.\n\nHe groaned in pleasure beneath her.\n\n\"Fucking Marie,\" she groaned. \"Nosy...bitch...\" she muttered.\n\nDuncan pulled down on her hips causing her to yelp in pleasure. \"I really like the swearing,\" he said as he bottomed out inside her. \"It's very naughty,\" he said as she started to convulse around his cock. \"You never swear.\"\n\nShe smiled and kissed him and then pulled back to look him in the eyes. \"Fuck me,\" she whispered softly.\n\n\"God,\" he moaned, shooting deep into her. \"So fucking hot,\" he said to her.\n\nShe was incapable of speaking at that moment, gently biting into his shoulder until the orgasm passed. Finally, they extricated themselves and went to shower.\n\nHe climbed in behind her and she found him still semi-erect. \"God, baby,\" she said, taking his organ in her hand.\n\nHe turned her around then and kissed her gently on the lips, but turned her around again and pushed her up against the wall. She bent over for him and spread her legs a little to allow his cock in. She felt him slide against her pussy lips and felt herself get even wetter. His large erection pushed inside again and began to push in and out of her, moving gently faster and faster. Wet slaps echoed off the bathroom walls as she began to come yet again.\n\nHe reached up then and laid both of his hands on her shoulders, gently pulling her back into him, making the slapping sound get louder. She groaned in pleasure as he pushed into her repeatedly, his cock seeming to find every pleasurable spot. He began to come again then, but she didn't feel nearly the same amount of semen coursing into her as early.\n\nHe thrust one final time before releasing her and spinning her around to kiss him. \"God that was good,\" he said.\n\nShe couldn't deny it. \"Yeah, but why?\"\n\nHe shrugged as he washed them both off. \"Marie was certainly too forward,\" he said. \"You'll have to have a talk with her about that.\"\n\nShe nodded. \"Yeah, she went too far,\" she said, kissing his chest. \"Still, the fact that she saw us, didn't that get you a little excited?\" She saw the conflict on his face. He didn't want to hurt her feelings. \"I know I was excited,\" she said.\n\nHe smiled then. \"Yeah, it was pretty hot when she pushed you into me.\"\n\nShe smiled at him then. \"Will you come spoon with me?\"\n\n\"All night,\" he said, and turned off the water.\n\n*****\n\nHe thought she'd already drifted off to sleep. She shifted beside him though, and turned around to face him, running a hand along his cheek.\n\n\"Did you really like the swearing?\"\n\nHe smiled and kissed her. \"I really, really did..\"\n\nShe giggled as she felt him squeeze her butt. \"I don't want you to think that I'm just going to start cussing like a sailor. I'm still a good girl,\" she whispered.\n\nHis voice, deep and resonating in the darkness, seemed to break through the stillness of the room no matter how quiet he was trying to be. \"I know you are, baby. It's the thought of you doing something you don't normally do, being naughty, that turned me on so much.\"\n\nShe smiled in the darkness and kissed his chest. \"Is that why you like the blowjobs so much?\"\n\nHe chuckled. \"Partly, I guess. Being raised like I was in such a religious home, everything sex was taboo, you know. Touching myself was tantamount to murder, much less being able to look at a dirty magazine.\"\n\n\"I know how you feel baby. My childhood was no different. The first time I kissed a boy, my mom washed my mouth out with soap.\"\n\n\"Mostly though, it really is a great feeling. I mean, it's really sensitive and your mouth is usually very warm and soft. Now that Marie gave you some tips, they have just gotten better and better.\"\n\nShe smiled into his chest. \"I'm glad you like them. That's all I want, really, is to make you happy and satisfied.\"\n\n\"I'm happy and satisfied. I don't think we need to start trying to emulate Ed and Marie to be happy.\"\n\n\"I know what you mean.\"\n\nThere was a long silence. \"Still, though. Some of it sounds fun,\" he said.\n\nShe smiled again in the darkness. \"I know what you mean.\"\n\n\"I have to say, I like the idea of you wearing skimpier clothing,\" he said.\n\nShe giggled. \"You know how shy I am. I think we might have to work up to that.\"\n\nHe laughed. \"Yeah, I do. I might have to get you a little drunk, is all.\"\n\n\"Drunk, huh?\" she whispered and kissed his chest again.\n\n\"Yeah,\" he confirmed. \"Loosen up those inhibitions. Heck, I might even get you to swear.\"\n\nShe playfully slapped his chest and snuggled closer as sleep began to claim them both.\n\n*****\n\nSunday morning he awoke to another pleasant sensation. He threw back the covers and was greeted by the sight of his wife's red hair bobbing up and down at his crotch. She looked up at him and winked, and then put the tip of his cock back in her mouth.\n\n\"God, I could get used to this,\" he moaned in pleasure.\n\nShe giggled and glanced up again. \"Now you know how I've been feeling for the past few years,\" she said.\n\nHe smiled and put both of his arms behind his head, propping himself up so he could watch her and turned on the lamp.\n\nShe looked up at him and blushed, pulling the covers back over herself, only to have him pull them back off a second later.\n\n\"Don't watch me,\" she said, \"It's weird.\"\n\nHe chuckled. \"Baby, we were practically having sex in front of Marie last night.\"\n\n\"Baby,\" she replied, \"we were having sex in front of Marie, but that was different.\"\n\nHe laughed loudly at that. \"Come on, let me watch you,\" he said.\n\nShe blushed again, but conceded the point. She couldn't contain an embarrassed grin throughout the blowjob, He tried several times to pull her up so they could have sex, but she kept pushing him back down. \"I want to finish you like this,\" she said finally.\n\nHe smiled and nodded. \"Okay, I guess I'll let you keep sucking my dick.\"\n\nShe giggled. \"Thanks!\"\n\n\"That's a phrase that's never been heard, I'll bet.\"",
        "She looked up at him without taking her lips off.\n\n\"Please stop sucking my dick,\" he said with a grin.\n\nShe rolled her eyes and brought him back in, closing her lips over him and sucking gently but forcefully. He moaned and pulled a hair from her eyes, causing her to glance up at him and eliciting another moan.\n\nPulling him out of her mouth with a soft pop, she looked up at him. \"Do you like when I suck your... cock,\" she whispered.\n\nHe groaned then and nodded, and she lowered her face back to his crotch with a smile. She began to jerk the bottom length with one hand while she had her mouth over the tip, sucking gently.\n\nHe moaned and tapped her on the shoulder and she popped him out of her mouth just in time to catch a warm splash of semen across her face. She jerked him then, faster, and tried to aim him back at his stomach.\n\nA few seconds later, he glanced down at her and she started giggling. \"I'm so sorry baby,\" he said, shuffling out from under her to head to the bathroom. He sighed and reached for a towel and tossed it to her as she came in with him.\n\nWiping her face, she leaned over and kissed him on the cheek. \"It's okay, baby,\" she said. \"I didn't have the gun pointed in a safe direction when it went off.\"\n\nHe chuckled and hopped in the shower for a quick rinse off. \"Hey, I've got an idea,\" he said, hopping out again as she finished cleaning herself up.\n\n\"What's that?\" she asked.\n\n\"I think we should walk around in our underwear today.\"\n\nShe rolled her eyes. \"I don't think so.\"\n\n\"Why not? No one is going to be here, and we don't need to go out.\"\n\nShe sighed and shook her head. \"It's cold, that's why.\"\n\n\"I can fix that,\" he said and headed to the hallway and the thermostat. Cranking the temperature up, he heard the heater kick on again and they both felt the room beginning to warm up a little.\n\n\"Honey,\" she said with a slight pout. \"I'm a cold-natured person and you know how shy I am.\"\n\nSighing he pulled her close and kissed her on the nose. \"Okay, but just wear something skimpy.\"\n\nShe shook her head. \"I think I've unleashed a monster,\" she said. Turning, she glanced back. \"Why don't you pick me out something to wear,\" she said.\n\nGrinning, he started to head to the closet, but stopped off at his dresser. He turned and stood at the bathroom door, a cheesy smile on his face.\n\nShe looked at him in the mirror and laughed. \"I'm not putting on your jock strap, Duncan Thomas.\"\n\nPouting briefly, he winked and turned, heading for her closet. They'd never really experimented with lingerie, so he selected the laciest bra that she owned and the matching panties.\n\nSmiling, he brought it out and handed it to her. She rolled her eyes and started to put them on with a smile. She turned and twirled for him. \"What do you think?\"\n\n\"Delectable,\" he decided. \"Are you going to pick out something for me to wear?\"\n\n\"Mmm,\" she said. \"Maybe.\" Walking over to his dresser she grabbed a pair of tighty whiteys and held them up giggling. \"Just kidding,\" she said, and tossed them back in. She opted for a pair of gray boxer-briefs. They were snug over his package and buttocks, leaving nothing to the imagination. She smiled as he put them on and then rushed over for a quick smooch.\n\nFor the rest of the day, he could barely keep his eyes off her. She'd be in the kitchen, reaching for the top shelf to put something away and he'd be staring at her ass, her legs flexed and tense as she stretched. Turning around after feeling his eyes on him, she'd blush and swear she'd was going to put on a bathrobe if he didn't quit staring.\n\nHe ignored the idle threat and just kept watching her. Eventually it became too much, and around lunch, he walked directly over to her in the kitchen and pulled her too him. She'd started to turn but he stopped her as she was making lunch and pulled her butt right up against his steadily growing cock.\n\nShe smiled and reached back, rubbing at him as he groped her breasts. He began to squeeze one of the nipples and pulled gently on one of the nipple piercings, surprising her as he began to kiss her neck.\n\n\"Mmm, you're going to make me burn lunch,\" she whispered.\n\nHe kissed her neck again, sucking gently and muttered back, \"You're going to be my lunch.\"\n\nShe moaned as his fingers moved from her nipples down to her crotch, plunging into her underwear and then into her. She gasped as he did so, her knees going weak as she tried to focus on stirring the food.\n\nHe smiled and turned her then, pushing her up against the sink and bending her over. She gasped as he yanked the underwear aside and not off, he cock somehow finding its way free of his boxer-briefs and slipping up her slit.\n\nShe cried out in surprise then as he pushed in, more forcefully than he normally did, and pulled back on her hips, pushing deep inside her. She opened her mouth to moan, but couldn't get any words out and had to steady herself on the sink.\n\nSmiling, he pushed forwards on her hips and then slid her back onto him.\n\nThe noodles on the stove started to boil over and she hurriedly moved over to the stove and reached across. He wasn't having any of it and moved with her, his cock finding its way back into her pussy and penetrating deeply. She moaned loudly. \"Oh God,\" she said.\n\nHe pulled on her hips while she tried\u2014and failed\u2014to concentrate on the food. She finally managed to turn the heat down on the noodles as he pounded into her.\n\n\"Oh fuck,\" she cried, moving back towards the sink as he jack hammered into her over and over. \"Fuck me, fuck me, fuck me,\" she said, again and again.\n\nHe obliged her, his cock pushing deeply into her and sending ripples of pleasure from her pussy throughout her body.\n\nShe began to orgasm then, her knees going weak as he grabbed her hips and held her up.\n\nHe felt her pussy tightening hard on his cock as he began to orgasm himself, as several spurts of warm semen filled her up. Spent, he fell back against the opposite cabinet, his cock dripping with goo, but still very erect.\n\nShe was panting and still in the aftershocks of her orgasm, her head hanging down into the sink.\n\nAfter a break to catch their breath, both turned and began laughing. She finally turned back to the stove to salvage their lunch. He moved to help her, but they were both silent, neither able to find the words for what had just happened.\n\nShe had a glow about her that he loved, something that happened after they had sex. She'd had it a lot lately, actually, he realized.\n\nAfter they ate lunch, he started to clean the dishes. She came over to him then and dropped to her knees in front of him, wedging herself between the dishes and the cabinet. Surprising himself, he could feel himself getting erect as she pulled his cock out and began sucking on the tip.\n\nGrinning down at her, he couldn't help but laugh.\n\n\"What's so funny?\" she asked, looking up at him.\n\nHe smiled, pausing for a second to admire the view; his adorable wife on her knees, clad only in panties and staring up at him while she sucked his cock and rubbed a hand along the shaft.\n\n\"God you look sexy,\" he said, and she winked and closed her eyes. She started to bob up and down, in time with her hand strokes, breaking her mouth-lock briefly to ask him what was so funny again.\n\n\"Just look at us. We're like kids, or newlyweds again. I've lost track of how many times we've had sex in the past couple of days.\"\n\nShe looked up at him and popped his dick out of her mouth. \"We can always stop,\" she said, a playful look crossing her face.\n\nHe smirked and placed a hand on the back of her head and gently pulled forward. \"Hush, and keep sucking,\" he said, jokingly.\n\n\"Mmm,\" she said, taking him back in briefly before pulling him back out. \"Yes, sir,\" she said, and began to jerk him faster and faster. He moaned and shook his head as she looked up, questioningly.\n\n\"I don't know if I can,\" he said. \"I might collapse from dehydration.\"\n\nShe giggled and tried to take him deep again, his large cock stretching her mouth a bit but still causing her to gag when he hit the back of her throat.\n\nShe coughed briefly, but wrapped her lips back around his cock again and continued to jerk.\n\nHe smiled then and his breathing got faster. He could feel the orgasm building and finally tapped her on the shoulder. She stood then and jerked him, a few streams shooting out and landing on her stomach.\n\nSmiling, he shook his head and pointed towards the bedroom.\n\nShe smiled and waved. \"Nap time,\" she said.\n\n*****\n\nKelly couldn't believe how much things had changed in the past week. She giggled as she finished the dishes that she'd taken over from her physically-spent husband. He was right; they were acting like a couple of school kids. She smiled and got a little weak in the knees when she thought back to the times they'd had sex recently. It had honestly been better than it ever had.\n\nThat thought struck her as odd. She stopped and pondered it for a second. Sex had never been bad between the two of them. She'd always had an orgasm with Duncan, and he'd been her first. He'd always been an attentive lover, never overly aggressive, so sometimes she secretly wished he'd be a little bit rougher. But it had always been nice.\n\nShe shook the thoughts away and finished washing the dishes. She headed towards their bedroom and heard him snoring softly. He'd kicked the sheets off and dropped his underwear at the edge of the bed. She sighed as she approached and saw his penis laying against his skin the dim light of the room.\n\nShe had the sudden urge to take it in her mouth again, but she resisted. She'd molested him enough for one day. She couldn't take her eyes off him, though. He was such a good looking man, she knew she was lucky to have him. Crawling in bed, she quietly scooted next to him and let sleep take her."
    ],
    "authorname": "Mentalcase",
    "tags": [
        "red-head",
        "wife",
        "husband",
        "wives",
        "blowjob"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/lucky-man-ch-01-1"
}
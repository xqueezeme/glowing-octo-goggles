{
    "title": "Sneaking a Quickie Ch. 02",
    "pages": [
        "Plot? What plot? If you're looking for romance, you're looking in the wrong story.\n\nPART 2\n\n***\n\nChristina turned so that only I could see her face, and she gave me rather irritated look. \"What the hell happened last night?\" she hissed.\n\nDid I do something wrong? She'd seemed to enjoy our sex romp. My blank face did nothing to mollify her.\n\n\"You were supposed to wake me up at midnight and you never came. Did you set your alarm? Because that was your big opportunity and I'm not sure we'll get another one.\"\n\nNever came to wake her up? Missed opportunity? What the? And in the corner of my eye, just past Christina's shoulder, I saw Amy standing in the kitchen looking at us with a gleam in her eye. Amy caught my gaze, and in a horrifying moment, she smiled and winked at me.\n\nOh, SHIT.\n\nI could feel my face go ghost white as the implications raced through my mind. And as if in response to my sudden change in expression, Amy turned and rubbed her ass like she was still in pain.\n\nOne option was to look away and pretend like nothing was out of the ordinary. Just go with things and agree that I fell asleep and hope my loving girlfriend would never find out what I'd done to her little sister. But then, I'm not very good at hiding things.\n\nAmy wasn't the only one to notice my change in expression; Christina turned around and noticed where, and more importantly WHO, I was staring at.\n\nMy gaze came right back to my girlfriend's and a hard look set in her eyes. \"Outside. Now!\"\n\nWe just got out onto the back patio, as if Christina was giving me the grand tour. I noticed that Christina was very careful in showing me around to make sure that every window and doorway was shut tightly, and she kept her voice low to make sure we weren't overheard.\n\nFinally, she turned to me, \"Which room did you go to last night?\"\n\n\"The first one past the bathroom.\"\n\nShe was silent for only a few moments as the full implications settled into her brain. The verbal explosion came a second later. \"How the HELL do you fuck that up?\" I realized from her expression that I was about to be executed.\n\n\"The door was cracked open, at midnight, just like you said. The purple, the movies, it all screamed YOU!\"\n\n\"So we like the same movies and colors. But how can you NOT tell that it's NOT ME! She's barely eighteen!\"\n\n\"She never turned around! It was just a quickie, and I never got a good look at her face. Hell, she even shaves her pussy like you!\"\n\n\"Fuck!\" Christina muttered, and kept pacing. \"You and your FUCKING bad night vision!\" But then she realized that while no one could hear us, we could still potentially be seen. So she stopped her pacing and fixed her face once again into a model of Asian modesty and calm. \"Well, how was she?\"\n\n\"Uh, well...\"\n\n\"HOW... WAS... SHE?!?\"\n\nI felt my heart sink. But I prayed that the honesty and trust between us would carry me through this situation. \"She was pretty good.\"\n\n\"Did you fuck her up the ass?\"\n\n\"Yes.\"\n\n\"Was it tight?\"\n\n\"Yes.\"\n\nChristina squirmed just a bit, as if picturing the situation. \"Gawd dammit! It's so wrong, but it's a little bit exciting: the thought of you sodomizing my little sister.\"\n\nBut then Christina's hard-set face was back, and she looked back right at me. \"You are going to make this up to me.\"\n\n***\n\nThe five of us, Christina's family of four and I, chatted amicably for this Thanksgiving Thursday morning. Amy flirted with me in a giggly schoolgirl kind of way, but always kept herself in check whenever her parents were around. Still, her eyes always had a hidden twinkle in them as she reveled in her little secret.\n\nThen things took a fortuitous turn for us when the girls' mother realized she'd forgotten several ingredients for the big dinner. So she dragged her husband out the door to go shopping, leaving me alone with two very horny girls for about an hour.\n\nJust enough time for a mid-day quickie, as I soon learned that Christina had in mind. You take whatever opportunities you get.\n\nThe garage door closed then a half-second later Christina was dragging me, literally by my jeans, down the left hallway and to her bedroom, which was across the hallway from Amy's. She'd pulled me away just as I was trying to respond to one of Amy's suggestive comments, and she fixed her little sister with a threatening glare before marching us away.\n\nWe entered in and I saw a nearly identical room to last night's: shades of purple with various movie posters and pop singers on the walls. And once inside with the door closed, Christina planted her lips on mine in a kiss as ferocious as any other she'd given me in our entire lives.\n\nShe was attacking me and stripping my clothes in a hurry, and it was all I could do to just hang on. She was red hot and horny, and I was so overwhelmed by the situation I wasn't even getting hard yet.\n\nThat problem was soon rectified when Christina got me naked and threw me onto her bed. Then she stripped herself off with efficient urgency, and simply vaulted onto my chest to shove her wet pussy into my face.\n\n\"Lick me!\" Christina demanded.\n\n\"Yes'm,\" I muttered, and then with her knees planted on either side of my head, Christina lowered her wet nether lips to my face where I eagerly began to lap at her glistening moisture.\n\n\"That's it. Eat me! Shove your tongue up my cunt! Fuckin' EAT ME!\"\n\nSo I did.\n\nLooking up, I could see my girlfriend moaning with her eyes closed as I ate her out with desperation. I had to please her, make up for the previous night's indiscretion, or at least distract her so she wasn't thinking about the fact that I'd cheated on her just last night with her little sister. And I must have been doing something right in my anxiety because very quickly Christina lit off into a loud orgasm, screaming for the whole house to hear as she dumped a thick load of honey onto my face.\n\nI simply drank it down, and Christina fully intended to stay put, sitting on my face. So gripping her hips and thighs to my head I wrapped my lips around her clit to keep on going.\n\nI was watching Christina palming her own tits, tweaking the nipples high above me when a new sensation caused me to shudder and briefly stop what I was doing.\n\nA hot mouth had enveloped my cock further down along the bed, and I knew that it wasn't Christina's mouth. I was paralyzed with fear, panicking at the notion I was somehow cheating on Christina AGAIN but unable to move my way out.\n\nChristina noticed my suddenly inert state, and she glanced around the room looking for the cause. And of course she must have seen her sister now bathing my cock as if it were the most scrumptious lollipop in existence.\n\n\"Amy!\" Christina's sharp rebuke shattered the still air. She then dismounted my head, pivoting on one knee until she was kneeling next to me. I was then able to see a fully dressed Amy kneeling over my prick, the shaft still wrapped amidst her hands.\n\nThen Amy's voice came back, plaintive as she backed away from my erection. \"I'm just warming him up for you. Look, YOU know and I know what happened last night. It really was an accident; I wasn't trying to steal him.\" Amy's hand, however, did not stop pumping my rod.\n\n\"Well, why didn't you stop him then?\"\n\n\"I was barely conscious. All I knew was that I was in heaven, and he's so good with his fingers...\" Amy moaned breathily.\n\n\"Hmph.\" Christina paused to picture my fingers running over her own body. \"He is, isn't he?\"\n\n\"Really, I just have to taste him right now. But I won't make him cum. I'll save that for you.\"\n\nChristina didn't say anything for a moment. But she did re-straddle my head, this time facing back towards my feet and towards her little sister. \"Fine, but I'm going to watch you... to make sure.\"\n\nAnd then Christina's wet pussy was once again in my face, and I was immediately tonguing and licking to the best of my ability while I felt Amy's hot mouth return to my prick.\n\nAmy licked and bobbed and sucked me with an expertise I hadn't expected. But true to her word, while she brought me ever closer and closer to climax, she never fully got me off.\n\nMeanwhile, I suckled Christina to a new climax, and when she stopped quaking above me I heard her command me, \"Lick my asshole!\"\n\nThat winking star had been right in front of my eyes for the last few minutes, and it was an easy thing to lean up and give Christina's brown spot a rim job. She was clean and eager, and my girlfriend wriggled above me in a constant state of arousal.\n\nAnd then finally, Christina got off and moved down to straddle my hips. Now usually, whenever Christina was on top, she would face me so I could see her face contorting in ecstasy. But most importantly, from that position I would watch her tits bouncing and her body splitting in half to accept my rod into her body. But this time, Christina was facing the foot of the bed, where Amy knelt on the floor with her face only a foot away from where my dick pointed up to the heavens.\n\nAll I could now see was Christina's perky ass as she lowered herself down onto my rod, but Christina's eyes were locked onto the changing expressions in Amy's face as Amy watched my mushroom head forcefully prying open Christina's anus, and then both girls gasped when I popped through the sphincter and Christina started descending down along the shaft.\n\n\"Aww, fuck, yeah!\" Christina moaned while feeling me splitting her petite body in half, filling her nether passage. She wriggled and kept up a steady pressure until her asscheeks were finally flush against my thighs.\n\nI could see the wide-eyed expression on Amy's face, simply amazed at seeing her big sister getting ass-fucked in broad daylight. And her eyes only got even bigger when Christina lifted herself up to reveal my wet dick in all its glory before lowering once again to cover me up.\n\nMy hands were clamped onto Christina's hips as she rose and fell in my lap. She was panting with a breathless energy, willing her body past the pain and through to the delightful pleasure. \"Gawd, it's so big...\" she groaned at a particularly hard thrust.\n\nAnd then I could feel her diddling her own clit while I took over fucking duties and began to hammer my girlfriend up and down my shaft. I couldn't see her face, but I could see the way she shook her head from side to side, hair flying as she moaned and groaned and uttered quiet chants of \"yes... yes... yes!\"\n\nChristina's naked back, the delicate trail of her spine and the ridges of her shoulder blades, held my attention in their exquisite perfection, like a sculpted goddess with graceful curvature and subtle eroticism. And I reveled in seeing her perky asscheeks bouncing with every impact as I plowed through her tight sphincter over and again.\n\nI glanced over to the side, seeing that Amy's eyes were tight slits now and she was visibly panting herself. Her arms were vibrating and I assumed she was playing with herself as she watched the fucking unfold before her.\n\nAnd just when I felt the tightening of my balls, Christina wailed out her climax, her hands going nuts against her own pussy while I blasted away at her ass in rapid, staccato thrusts. Her anal muscles clamped down tightly around me as she trembled atop me. And then Amy's voice was joining her sister's in a harmonic howl of ecstasy filling the room.\n\nFor some reason, it was that dual audio of feminine orgasms that set me off, more so than the tight anus wrapped around my rod. And the combination of the two tipped me over the edge. So clamping Christina's body down against my crotch, I felt my cannon blow apart inside of my girlfriend's body as I pumped load after load of cum deep into her backside.\n\nWe all twitched for a few minutes, enjoying the aftershocks of our orgasms. And then Christina turned and collapsed onto her stomach across the bed, her white asscheeks rather pink from abuse and her rosy star now stretched into a gaping wide hole, little white globs of semen leaking out of her slowly.\n\n\"Fuckin' A that was hot!\" Amy finally exclaimed, sounding just like my girlfriend.\n\nChristina and I just panted in our exhaustion. But then Amy reminded us of their parents' imminent arrival. So Christina and I slipped into the shower for a quick cleaning while Amy stood guard.\n\nIt took a few minutes for Christina's asshole to shrink back down, but we got cleaned up and I got my hair dried quickly before we returned to the living areas.\n\nMr. and Mrs. Wang never suspected a thing.\n\n***\n\nThanksgiving dinner went smoothly. We had chicken instead of the American traditional Turkey, and a variety of Chinese dishes also were included in the meal. We stayed at the dinner table for at least two hours. The Wangs caught up as a family and I could feel the warmth and love between them all even through the cultural formality. I surmise they would have been joking around quite a bit and teasing each other, were it not for my presence as a guest.\n\nBut after a time, the ladies cleaned up while I spent some quality butt-kissing time with Christina's father. And then as the evening got late, the parents went to their room leaving us young people to stay up and talk.\n\nChristina and Amy hadn't spoken much about the two major sexual encounters that had taken place since we'd arrived. But after Amy took a shower and then returned to hang out with us, I sensed a new tension between the girls as our expectations took over.\n\nBasically, I fully expected to sneak into Christina's room in the middle of the night for the quickie we'd planned for yesterday. On the other hand, Amy looked eager to watch since we'd allowed that in the afternoon, and was hoping we didn't send her away. As for Christina, I couldn't read her at all. There were always a few times that I had no clue what was going through my girlfriend's mind, and this was one of them.\n\nAmy finally decided for herself that we weren't going to involve her, and as the hour was getting late she announced that she was going to bed. It was at this moment that my girlfriend revealed all.\n\nShe held my hand and stared into my eyes with an intensity that had only ever been matched by the anger in her eyes after she found out I'd cheated on her the night before. Amy even caught the tension shift in the room and paused to look at us before she went away.\n\n\"I want you to fuck her EXACTLY like you did last night,\" Christina informed me. She briefly glanced to her little sister, who just looked in shock at those words. \"I want to see everything for myself.\"\n\nI hoped to hell that her parents were asleep, because Christina led me away from the couch and then directed her sister to go to her room. Amy blinked and then obeyed, slinking silently down the hall.\n\nWe waited a minute, and I had to remind myself to keep breathing as we followed. And then I readied myself for whatever waited on the other side of the door.\n\n***\n\nWhen Christina swung the door open, she held a finger to her lips to remind me to stay quiet. The figure on the bed stirred, but remained with her back to us.\n\nIn my anxiety, I wasn't even hard. But then Christina got down on her knees and peeled open my pants. \"I want you to look at her. Remember how soft her skin felt. Remember the tight curves of her body. And think about what you're going to do to her.\"\n\nChristina's voice was low, but it carried enough in the room so that Amy could hear her, and I saw Amy's body shift as she also visualized what was about to happen. And between those thoughts and Christina's warm hand on me, I felt the first stirrings of arousal filling my penis.\n\n\"You're about to fuck my little sister up the ass... again,\" Christina reminded me, and then her hot mouth took my cock inside, and I felt my body go rigid at the pleasure shooting through my body. She swallowed me once, then backed away to speak to me again in that low, husky voice. \"I want to watch you seize her hips and thrust inside that warm paradise. The same way you did last night.\"\n\nShe bobbed her head once again, smiling around my dick when my hands moved to her head and pulled her down against me, as if I was picturing thrusting into Amy's snatch at that very moment. Her tongue felt sooo good trailing along the bottom of my shaft. \"Can you see it?\" she asked me once she pulled back.\n\nI nodded. I was rock hard now, and Christina's lavish tongue only fueled the passion inside of me. She took a few more licks and tested the heaviness of my balls, then pulled away and muttered, \"Now go FUCK her.\"\n\nI stepped forward to the bed, lifted the covers, and spooned in behind Amy's trembling body. Tenderly, seeking to calm her, I softly kissed the back of her head. It was one thing to be awoken to the pleasantness of sexual activity. It was quite another to wait in anticipation of a strange man to come and ravage your body.\n\nI tried to calm her, stroking her leg and rubbing my palm along the curvature of Amy's tight ass. And then she let out a low, deep breath as she relaxed and enjoyed my simple touch.\n\nI took that as my cue, and slid the thin strap of her panties to the side and pressed a finger into the moist folds of her pussy. She gasped loudly, a familiar sound, as my middle finger slipped easily into her tunnel all the way to the knuckle, and then I pulled my hand back so that my wet fingertips could start rubbing at her clit.\n\nAmy's eyes flew open and she saw Christina was now kneeling next to the bed, her sister's gaze locked to where my fingers were splitting her open.\n\nI kept up my manual assault, now letting my left arm sneak below Amy's neck and underneath her T-shirt so I could palm a firm breast and tweak the nipple. I hadn't done this last time, but Amy wasn't complaining and Christina wouldn't know the difference anyways. And after a few minutes of my ministrations, Amy came to a small climax, letting out a relieved gasping moan while her thighs trembled. Her sweet voice pierced my brain, so familiar and yet not as I mentally understood that it was Amy moaning.\n\nBut the climax did relax her tremendously. Without my prodding, Amy now moved to her stomach, already helping me remove her panties. She simply shoved the T-shirt up around her neck to leave her mostly naked body in a doggy position, eagerly anticipation what was to come.\n\nI reached down and gripped both of Amy's breasts while I knelt behind her and nudged my erection between her legs. And blindly I moved until I felt the tip had settled into the warm folds of Amy's pussy. So I leaned in and slowly buried my dick inside her wet tunnel.\n\nChristina actually moaned first, and then Amy joined her as she felt my thickness spearing her pussy for only the second time. She really was a little tighter than her sister.\n\nI flicked at Amy's clit while I began to pump in and out of her, Amy's chanting \"yes... yes...\" sounding just like her sister had hours before. But this time it was Christina who remembered the need for quiet as she pressed down on Amy's head and planted her little sister's face into the pillow to muffle the sound.\n\nAmy clued in and did her best to keep quiet, albeit unable to avoid her whimpers entirely. And the sexual act plus the erotic moaning was quickly getting Christina very, very aroused. In the end, Christina just stripped herself naked and then sat beside the bed fingering her own pussy.\n\nChristina whispered in my ear, \"Watch! Watch your cock moving in and out of her cunt. Fuck that slut!\" I groaned and watched the thick shaft parting Amy's teenage folds.\n\n\"Oh it looks so hot! You're filling her up, stretching her wide for your big, thick cock!\" Christina moaned, strumming her own clit. \"Damn I want some of that!\"\n\nUnable to resist any longer, Christina mounted the bed, kneeling doggy style right next to her little sister and presenting me with two perfect asses side by side. \"Come on baby, give me a little lovin'!\" she ordered me.\n",
        "The grass is always greener on the other side. I pulled myself out of Amy's pussy with a wet sploosh, and Amy whimpered, \"noooo!\" when she felt me exit her.\n\nBut I just shifted over a few feet and then seizing Christina's hips in my hands, I nudged forward and speared my way into her wet tunnel.\n\n\"Oh, oh fuck, yeah!\" Christina muttered as I went right to hammering away at her. My girlfriend was more animated in this fuck than we had ever been before, and she was flinging herself back at me with abandon. I was sure she'd be bruised by the time we were done.\n\n\"Come on baby! You're fucking me! You're fucking me just seconds after you were fucking my sister!\" I felt the extra twitches of my cock at that thought, and then Christina was letting herself go into a fast and hard orgasm after such a buildup of sexual tension.\n\nAnd while Christina's inner muscles quaked in the shocks of her climax, I felt the hair-trigger of my own orgasm at the edge of release. Not wanting this to end yet, I pulled myself out abruptly, letting my cock cool in the air for a minute.\n\nChristina crumpled to the bed, sighing in pleasure, but Amy now just wiggled her butt invitingly at me. I slid back over to her, and with a firm grip on her asscheeks slid my way home back into Amy's pussy.\n\n\"Oh, fuck me! Fuck me! Harder!\" It was Christina's voice coming at me, setting off all the usual reflexes in my mind. But the voice was coming out of Amy's mouth, and that mental understanding made everything even hotter.\n\nI pistoned in and out of Amy's gushing pussy, which was fully lubricated from her extreme arousal. And when I leaned down and gripped Amy's perky breasts into my hands, I used them as handholds to jerk her back and forth along the shaft impaling her.\n\n\"Ohmigod! Oh, fuck! I'm cumming! I'm cumming!\" she yelled out. And finally Amy was able to tremble into her own climax, her moans and cries so familiar while she thrashed against the bed and poured out her juices into our joining.\n\nAt that point, I felt all my control fall apart, and then I was readying myself to blast spurts of cum deep into this little sister's naked pussy.\n\nChristina was more aware at this point, and scanned my face for the tell-tale signals of my impeding eruption. \"No! Don't cum inside of her!\" And she tugged me out before I could explode.\n\nAmy just fell to the bed, as if my dick was the only thing that had been keeping her upright after her massive orgasm. And she turned around to flop on her back and watch as her older sister jacked me off with her hand.\n\nChristina saw the opportunity, and leaned up to kiss my lips while she kept frigging me with her hand with fast, short strokes. I was about two seconds from losing it. \"Cum on her... spray your juice all over my little sister's naked body.\"\n\nThat was all it took, and then ropes of white jizz were pumping out of me, arcing through the air and over Amy's torso before gravity made them collapse in long strings of creamy goodness against her stomach and tits. Spurt after spurt poured out of me, the first two carrying enough to splash against her neck and chin, the rest losing power until I was just dribbling onto Amy's stomach.\n\nMy eyes rolled back and I grunted when I was done, and heavily I sat down onto the bed, catching myself on one elbow from complete collapse. \"Holy shit...\" I gasped.\n\nAmy simply luxuriated in the feel of my cum all over her body. She scooped some with a finger off her own neck and tasted it experimentally, humming happily. And then her hands were on her own body, rubbing it into her skin like a fabulous lotion.\n\n\"Well, that's not exactly how it happened last night,\" Amy commented.\n\nChristina's response came back tart and teasing. \"Hmph. You loved him shooting off onto you. Didn't you, little slut?\"\n\nAmy just smiled and kept rubbing my manly lotion, paying special attention to her own upright breasts.\n\nBoth Christina and I grinned watching the young teenager, and my limp dick gave a twitch of its own accord. Christina noticed, and glanced over to it. \"Well, Amy. Why don't you get him ready again? I interrupted you two and he still has to fuck you in your tight, hot ass.\"\n\nAmy smiled up at me and crawled her way across the bed. Her delicate hands were already in my crotch, and I just moved myself around until I could sit back against the headboard and enjoy this sight.\n\nChristina leaned up against me, rubbing her tits against my side while we both watched Amy's hands rub at my half-erection and then dart her little tongue out to touch the head before slipping back inside. Amy's eyes were entirely on the male appendage between her fingers, and she studied it hungrily.\n\n\"Watch that little slut. She's so hungry for your cock,\" Christina mumbled into my ear.\n\n\"I love it,\" Amy cooed.\n\nAmy kept up her tease, just tagging the head with her tongue and tasting the mixture of my own cum mixed with feminine juices from both her own and her sister's pussies. Her hands kept up their massage and after a while she was able to wrap an entire fist around the shaft.\n\nAnd then once I'd reached my full length, Amy just opened her mouth wide and sank me deeply into her mouth. She stopped after a bit, and then gathering herself, lowered her head the last few inches and deep throating me until her lips were wrapped tightly around the base of my cock.\n\n\"Oh, fuck!\" Christina and I both cried out at the same time, much too loudly. Amy immediately popped off and tilted her head to listen for any reaction that might be coming from her parents' direction.\n\n\"How did you do that?\" Christina hissed, much quieter this time. She had tried a few times, but in our entire time together, my girlfriend had never pulled off that feat.\n\n\"I dunno. I'd never done that before.\" But as if to show off, Amy ducked her head and deep throated me once again.\n\nI groaned again. I'd been doing that a lot lately. But the pleasure shooting through my mind demanded no less. And then Amy was hovering around the crown and suckling the head while letting her hands pump up and down my shaft.\n\n\"Doesn't he have a wonderful dick?\" Christina was now whispering to Amy. \"It's so thick and hard, and so hot to the touch!\"\n\n\"Mmm-hmm,\" Amy moaned around the mouthful.\n\n\"Feel it tickling your tonsils, taste the sweaty flavor. It's a hot piece of man-flesh, and it's entirely under your control.\"\n\nAmy just moaned even louder while she continued to suck on me. I watched as she visibly relaxed her throat and then descended once again to take me into her throat. And once she hit bottom, Christina actually reached out and held her hand on the back of Amy's head, keeping her lodged all the way down.\n\n\"That's it, squeeze your throat muscles, feel it tickling deep inside of you. You're sucking off my boyfriend, you little slut. How does it feel?\"\n\nAs if in response, Amy suddenly jerked back against Christina's hand so she could breathe and so she could cry out as an orgasm swept through her body. She held my cock in her hand while she panted and tears leaked out from her eyes. Her eyelids fluttered and she kept whimpering as she was climaxing without any outside stimulation.\n\n\"Oh, fuck!\" she finally moaned when it had passed.\n\nChristina pulled her hand away from Amy's head and stared at it, as if in wonder that she'd been touching her sister during such a sexual moment. But then her eyes were back to my erection as I pulled myself away from Amy's face.\n\nAmy knew what to do and she moved back around into the doggy-position we'd been in before Christina interrupted our reenactment. Her perky asscheeks were thrust back at me, and I focused in on the red star. This was the moment we'd all been waiting for.\n\nI aimed my mushroom head at Amy's asshole, my mind briefly recalling how it looked in comparison to Christina's. And Amy tried to her best to stifle a painful moan as the thick crown began to stretch her asshole wide while I pressed forwards. Then Amy was whimpering into the pillow again until my cock finally popped through her sphincter.\n\nChristina's body shuddered as she watched my dick penetrate her little sister, as if vicariously experiencing the anal piercing. I held position just inside of Amy's ass while she went rigid, trying to get used to the sensation. With our full mental capacity and awareness, we all realized that Amy was not yet accustomed to having a dick up her ass, and perhaps I had been the first one to ever assfuck the young, pretty girl.\n\nWe waited for Amy's tremors to subside, and once she was ready, she actually thrust her body back against my invading rod. I grunted a low sigh as Amy's supertight tunnel clamped onto me. For some reason, whether mental or because Amy's ass was actually different, the pressure and the pleasure made this feel like the greatest assfuck of my life, better than anything I had ever experienced with Christina.\n\nI was thrusting and pumping slowly, reveling in the exquisite feeling. Christina could see the rapture on my face and she actually got up to kiss me passionately while I continued my reaming of her little sister.\n\nAmy, for her part, was panting and moaning quietly, but still louder than when I'd been inside of her pussy. And she never stopped her constant motion of flinging herself back to feel my hips impacting against hers. She was desperate to feel the full and deep penetration as far as we could possibly go.\n\nI fought to keep quiet, but simply could not stop my low grunts directly into Christina's mouth and both girls were getting visibly more aroused listening to me vocalizing while I violated Amy's nether hole.\n\nI let one hand slip down to Christina's crotch to find she was already fingering her clit. So I moved my hand around and she gasped onto my tongue when I popped a finger into Christina's ass as well.\n\n\"You like that?\" I asked her. \"I'm finger-fucking your asshole while I'm screwing your sister's asshole?\"\n\n\"Yes! I love it!\" And she loved it even more when I gripped her body to me, squeezing her tits with one hand while I added a second finger into Christina's ass.\n\nThen Amy decided she wanted my attention back on her, and she started clamping down on me with her ass even as she continued to thrust back at me rhythmically. \"Can you feel it?\" she asked.\n\n\"Fuck, yeah,\" was all I could respond. Her extra attention had my dick spasming in its own pleasure, as if an independent creature was coming alive inside of Amy's poop chute.\n\nI was losing control, but I needed to bring Christina off as well. And so even as my semen boiled inside of me, and as Amy's ass squeezed and caressed every nerve ending along my rod, I plundered Christina's ass as well and rubbed at Amy's spinal cord until we were all panting and thrusting and gyrating.\n\nAmy was grunting out naughty words to me to get me to fuck her harder. I was growling at Christina to titillate her mind. And Christina was encouraging both me and her sister to fucking go nuts as we all headed towards our physical peaks. We were louder than we should have been, but none of us cared. All that mattered now was the release of climax, consequences be damned.\n\n\"Oh, shit! I'm cumming!\" Amy cried out.\n\n\"Me too! Fuckin' A!\" Christina joined her wail.\n\nAnd I just grunted and slammed my hips forward repeatedly to bring Amy's ass and my dick as close together as humanly possible on each impact.\n\nAmy thrust her body back at me over and over again. And I felt my mind blank out as the sperm began to eject itself out of me. I growled in anguish as the white lava blasted through my shaft and splattered Amy's insides, pumping her full of my hot jism. I could actually feel Amy's climax join me and feel the hot splash of her own orgasmic nectar squeezing out onto our legs. And Christina as well was cumming on her own hands with two of my fingers deep inside of her ass.\n\nAmy's legs gave out and she fell flat onto her stomach. My body went with hers and I landed half atop her body, my hard dick still embedded deep into her backside. And Christina fell with me, her torso half resting against me and half resting against her sister's naked back. But none of us cared as we were awash in the afterglow.\n\nTwenty minutes must have passed before anyone moved. We were just worn out.\n\nWe finally managed to gather ourselves and glance at the clock to see how long we had all spent in Amy's bedroom. We were quite lucky that no parental units had come to investigate.\n\n\"That was way more than a quickie,\" I muttered.\n\n\"Mmm, I wanna do that again,\" Amy whined.\n\n\"Not tonight,\" Christina ordered. \"But there's still two more days before we have to go back to school. And I'll let you play with him until then.\"\n\nMy girlfriend leaned over to kiss me. \"Drink lots of fluids, baby. We're both going to give you the fuckings of your life.\"\n\n***\n\nIt was sometime around 1am on Sunday morning. In the back of my head, I knew we had to wake up and leave in just a few short hours. And with each successive \"quickie\" this weekend, we'd been getting more and more careless about staying quiet. I wanted to complain that we were going to get caught.\n\nBut then Christina's mouth descended all the way down my cock, finally accomplishing the deep-throat she'd been attempting for the past two days straight, and all my complaints flew out of my head.\n\nBesides, I couldn't speak anyways as Amy was still sitting on my face, dribbling pussy juice onto my chin while I rimmed her anus in anticipation of one last ass- fuck. And Amy just shrieked out her climax into the still air of the night, calling far too loudly for my tastes.\n\nAs if answering my fears, a minute later there came a hard knock at the door.\n\n\"Christina!\" Her father's voice was booming against the silence of the night.\n\nMy girlfriend's head popped off my cock, her eyes wide with panic. Amy went rigidly still above my face.\n\nOh, SHIT.\n\n***\n\nNEXT PART 3 "
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "18-year-old",
        "anal",
        "asian",
        "quickie",
        "ffm",
        "threesome",
        "two women one man"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/sneaking-a-quickie-ch-02"
}
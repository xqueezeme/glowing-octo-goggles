{
    "title": "Endangered Ch. 03",
    "pages": [
        "Hi everyone,\n\nThanks for all of your comments and votes on previous chapters of Endangered; it's really encouraging and I do take constructive feedback to heart. Thanks to RexBrookdale for editing up a storm and whipping this series into shape. Also, thanks to everyone who contacted me with helpful pointers about my writing. So, here's the next installment. This chapter is longer, and all following will be about this length. There will be an attempt to include at least one sex scene in each chapter. If you're new to the series, please go back and read the previous chapters, no skipping ahead allowed.\n\nStay tuned and I hope you enjoy.\n\nLTPC\n\nDisclaimer: Placenames are real but are mainly used as points of reference, people are made up, and everything sexual occurs between adults over 18. Some aspects of sexuality in this story are unrealistic; this is a fantasy story set within a fantasy society, in a fantasy universe.\n\n***\n\n\n\n\n\nThe alarm came too soon, jarring them from sleep. Chris smacked the off-switch with a groan. They lay spooned together, a sleepy Annabel cuddling back into his warmth to capture a few more moments of bliss. Just before succumbing again to sleep, Chris roused himself. He switched on the lamp and got up to look for a pair of track pants and then head to the bathroom. \n\nHis morning wood hadn't subsided as yet, so he had to manage his flow carefully while he aimed; furthermore, it felt strange peeing with an unfamiliar penis. In its half-form, the head was more pointed, and the sensitive ridge where the shaft met the broad crown much more pronounced. Combined, these features made it almost look like a thick, cartoon-styled arrowhead. His hairlessness was something else as well, he mused. It made sense, since his body was now covered in micro scales.\n\nFinished, he gave a great full stretch, flexing and then rubbing sleep away from his eyes, until he felt a thump.... One of his outstretched wings had hit the wall. Retracting the errant appendage, he started the shower. \n\nAnnabel sauntered into the bathroom. Naked. Without preamble, she sat down to pee. &quot;What?&quot; she asked.\n\n&quot;So we're just doing this now?&quot; Chris gestured between them mutely: him entering the shower, her peeing unashamedly.\n\n&quot;Yeah. I think we're at that stage.&quot; She smiled, finished up, and flushed. &quot;Hurry up and get in already, I'm cold.&quot;\n\nShe pushed him into the shower, guiding his awkward wings through the door and followed behind. They hadn't showered together before, but she had had some inspiring fantasies. So before he could make any further fuss she grabbed the soap and began lathering his broad, cream-colored chest. Washing down his arms and sides, she noted the transition between his purple and ivory colours, as well as the new textures of his micro-scaled skin. Chris spoke nary a word; her hands felt exquisite running over his body, and in combination with the flow of hot water, he was in heaven. She looked up at him for approval every now and then; but he only ever had a broad, toothy smile on his face.\n\nDone with the top half, she coaxed him to kneel so she could wash his face and hair. Then she knelt down behind him and soaped up his wings and the larger scales along his spine. It ended up taking a good bit of time, including a brief debacle when she had started to wash his ass. Her touch had been electrifying, making him jump and twitch a little, during which his right wing had bumped the temperature control. Finally order resumed inside the cramped space, and yet it remained unclear as to whether they, or the shower box, came out on top. Giggling, she reached around to lather his crotch. He was massively hard. She, too, found herself increasingly excited as she stroked his soap-slicked penis for a few minutes, under the guise of ensuring cleanliness. God he's nice and big, she thought as her hand struggled to encircle him. I'd better not tease him though. In truth she was still sore from yesterday.\n\nChris, now panting with pleasure, rested his forehead against the glass wall as water dripped down his face. She stroked him expertly, her body pressed up against his back. Suddenly she stopped. Gripping just behind his crown for a moment, in a firm squeeze goodbye, she let go in order to worm around him until they knelt face-to-face. \n\nOn their knees facing each other in the steam and spray, Annabel leaned up to kiss him: a vision of wet, innocent sensuality, eyes closed against the pattering water. Timidly at first, her tongue ventured for the first time into his dangerously sharp mouth, until she realised her trepidation was unfounded. He would never hurt her, so she took a little time to familiarise herself with his newly sharp teeth, especially his short fangs. \n\n&quot;Wash me,&quot; she sweetly pleaded.\n\nHe took hold of the soap. Looking down at her slick beauty, he paused. Where to start? There was an expectant, almost vulnerable look in her large brown eyes, so he just went for it. Progressing down her arms, he used the rougher pads of his fingers and palms, careful not to mar her soft skin with his talons. She sighed as he caressed her, took care of her, noting the caution he took not to touch her with his claws. Then again she almost wished he wouldn't be so careful; she wouldn't break. After all, the tickle or scratch of a lightly applied talon might hold its own pleasure, mightn't it?\n\nHe had been hovering on the edge after her soapy hand job; now touching Annabel so intimately , listening to her contented little noises, set his heart ablaze ... and his cock on fire, poking her belly. He leaned down closer to wash over her pert little breasts, ignoring the temptation to tweak a tiny brown nipple. Down over her soft, flat tummy and over her thighs and legs, he avoided her crotch for the moment before pulling her close and reaching behind her to wash her back. As he skimmed her firm, peachy ass, soap in hand, she reached down to his pointed cock and rubbed it against her abdomen.\n\nGasping in her ear, Chris reciprocated by soaping her crack, touching her delicate anus very intimately for a moment before reaching further around to her puffy lips. Kneeling between her spread legs, Chris had direct access to her slick pussy as he reached all the way around behind her, the soap only replacing her own plentiful lubrication. He explored the plump curve of her labia, the tender frills of her inner lips only just peeking out until he ran a finger along to spread them. She was panting against his neck as he gently rubbed her most intimate area from behind, rocking slightly back and forth against his hand. After only a minute or so of this he felt her pleasure rising, Chris made a final lunge for her clitoris, pushing it down firmly for a second then rubbing his finger back and forth rapidly, stimulating her soap-lathered petals at the same time. \n\nAnnabel came with a muffled squeak and a tiny gush of cum on his hand. Chris held still as she rode it out, his hand firmly cupping her quivering pussy as the rest of her body gently undulated and shook. Once she had recovered a bit he began shampooing her dark hair while she rested against his chest, breathing heavily. Rinsing her and applying conditioner, he pampered Annabel with a brief scalp massage before washing it away too, leaving her silky hair clinging to her neck and down her back.\n\nA post orgasmic scalp massage was truly a mind altering experience for Annabel, the kind of treatment that could not go unrewarded. &quot;Get up,&quot; she said quietly, urging Chris to stand. It was awkward but soon enough he was standing and she straightened her back to come face-to-face with his pulsing, erect member.\n\nHands on his beefy purple thighs, she leaned in under the spray and kissed his pointed tip, teasing the very edge between her lips. Leaving it for a moment she kissed down one side, sucking and licking, she crossed underneath, kissing each of his big purple orbs briefly. They didn't seem to dangle or swing, rather they were held close against his thick root. Soon she started back up the other side, dreadfully slowly. She kept her eyes closed this time because water was splashing in her face but his groan as she opened wide and stretched her lips over the large head told her all she needed to know, that he was very close. Stroking and pumping with her hands on his shaft, she took as much of him as she could manage, holding him there in her mouth as her hands worked on the rest. Pulling back, she locked her lips behind the enlarged ridge of his crown, bathing it with her hot tongue before applying almost brutal suction.\n\nThat was all it took. Chris hissed through his teeth, bucking his hips forward slightly while he steadied himself against the wall. Her eyes shot open, blinking away the water. His purple testicles pulled up and loosed a huge spurt down his shaft, hitting the back of her throat before she could taste it. Helplessly, he groaned, fucking her pretty mouth a little as it sucked the life out of him, releasing four more jets of cum before he trailed off with smaller spurts and dribbles. \n\nShe fell into another, milder orgasm instantly. His taste was salty but thick with his spicy, sweet essence. The potent, magical aphrodisiac of his cum kept her orgasm alive as he emptied himself into her hungry mouth. His cum was much thicker and stickier than she remembered, clinging to the roof of her mouth like too much Nutella. She ended up having to work at it with her tongue, astounded but unable to communicate her surprise in anything but lusty moans around her mouthful. As she swallowed, her body began to subtly tingle with vigour and energy.\n\nAs their orgasms abated, Annabel held his sensitised penis captive in her mouth for a few more seconds before sucking powerfully and pulling her head back. The pressure made Chris growl as a last little trickle of cum was released. Annabel's lips came away, and she looked up, smiling.\n\nFor several seconds they stared at each other, Chris towering over her, sheltering her from the stream of water. \n\n&quot;Chris, what is your stuff made of?&quot;\n\n&quot;Well, it's \u2013 &quot; he had started to explain, a little nervously.\n\n&quot;As soon as it hit my tongue it set me off again. You're a monster! And god damn, it's still stuck in my mouth.&quot; She giggled, giving his flagging penis a playful nuzzle, &quot;How does the accused respond?&quot;\n\n&quot;I can confirm that my semen is perhaps a powerful aphrodisiac but I vehemently deny all other accusations,&quot; he responded with mock seriousness. &quot;Susan says that's part of the reason dragons are endangered; our bodies possess so much magical energy that it's too great a temptation. Other Beings want to get some for their own. When a dragon resists, some resort to force. Eventually it has degraded into dragon hunting that has lasted for centuries. It was widely accepted; the Synod seemed to ignore the issue until we became gravely endangered. Even now, Susan says, someone might still think they could get away with taking a dragon, or that the benefits outweigh the risk.&quot;\n\n&quot;I'm sorry.&quot; How could people hunt something to extinction just to have something they could go without quite easily? She didn't want to get bogged down just then, though, so she tried to lighten the subject. &quot;So your jizz makes me cream myself all over again, which by the way, I'm completely on board with. What else do you have hiding up your sleeve?&quot; Rising, she pressed her face into his neck, not quite tall enough to kiss him in his new form unless he leaned for her. She inhaled deeply, catching his delicious smell at the source and teasing his soft skin with kisses, not even able to discern his tiny scales with her tongue as she explored the firm muscles connecting to his shoulder.\n\nChris enjoyed her ministration for a moment before replying, Annabel felt his throat vibrate as he spoke, quirkily finding the vibrations of his speech satisfying against her face.\n\n&quot;I have two kinds of venom, one is a deadly poison.&quot; Chris spoke tentatively, holding her close, waiting for what he felt was the inevitable snap when she would run from him screaming. &quot;The other induces fertility. My dragon thinks it can be somewhat addictive.&quot;\n\n&quot;Keep all your girls coming back for more, huh? Just how many horses do you need in your stable Chris?&quot; she asked, only half-teasing.\n\n&quot;Dee, I'm sorry,&quot; he whispered, squeezing her slick nakedness in a tight hug.\n\n&quot;Shhhhh, I didn't mean it like that, I know you love me.&quot; She changed the subject. &quot;What about that poison?&quot; \n\n&quot;I do Annabel, so much.&quot; He held her tight. After a while he lightened his grip, stroking her back under the water with his face nestled in her wet hair. &quot;The poison is deadly to most Beings, within minutes or hours, depending on how much is injected. My saliva can neutralise it and also induce rapid healing of wounds.&quot;\n\n&quot;Chris, you're a really big deal aren't you? I mean shit, you have all these powers, are you like a celebrity or something? Are people really going to try to hurt you?&quot;\n\n&quot;I'll try my hardest to not let that happen, but yes, I think any dragon is generally considered a 'big deal'. It isn't a good thing, Dee. How am I supposed to be myself if humans get dragon-struck around me? What am I supposed to do if vampires proposition or even stalk me because I taste the best? I'm still just some small-town farm dude. I want to hang out with you, play video games, mess around, find a job I enjoy, and maybe amass a small pile of valuable metals. Okay, so that last one is mostly dragon-driven but you get the picture, right? I'm still just me underneath everything else.&quot; \n\n&quot;Yeah, I think I understand.... Oh my god, do vampires sparkle?&quot; she teased in a false excited voice, slapping his chest.\n\nChris sighed. &quot;No. I haven't ever met one, but they stick more to the traditional legends. The powerful ones can come out in the day, by magic.&quot;\n\n&quot;Cool.&quot; Briefly, she wondered how even the powerful ones could manage eluding the sun's affects. &quot;Seriously though, I know you're still my old boyfriend, wrapped up in a sexy new body. It just hit me all of a sudden how much of a change this is. I guess before I hadn't really thought about it too hard, but it doesn't actually change anything. I'm with you all the way.&quot;\n\n&quot;Thank you Annabel, it means so much to me.&quot; He paused. &quot;So, you think I'm sexy like this huh?&quot;\n\n&quot;Oh yeah,&quot; she giggled, wriggling against him sensually. &quot;You're all strong and purple and scaly.... Wait what am I saying; you're disgusting! No stupid, you're hot, it's like you call to me somehow, you're everything I'll ever want.&quot;\n\n&quot;Thanks babe. Okay, we had better get out.&quot;\n\n&quot;Alright, but remember, you and I shower together from now on, and I'll expect just as much pampering.&quot; \n\n&quot;Be careful what you ask for,&quot; he teased, switching off the water and extracting himself from the confines of the shower. She gave him a spank as she followed him out, so he tickled her into a wet, giggly mess before drying her off lovingly. After drying himself, he got her to help with his wings and they headed back to his room.\n\nThey had spent too long in the shower and there was a rush to get dressed. Annabel slipped into her dress from yesterday, with one of Chris's jumpers over the top for warmth. Chris threw on a pair of jeans and then turned his attention to his footwear; his taloned toes were a nightmare to get socks onto, but only somewhat uncomfortable once inside his boots. He ripped the back off of an old T-shirt, after which Annabel re-attached the ripped section to accommodate his wings, with a few safety pins.\n\nHe packed a few days' clothes in a bag along with toiletries, cell phone and charger, and the entirety of his stash. Annabel's eyes widened at seeing so many small bags of nuggets and gold dust, along with several holographic ounce kinebars. She'd accompanied him on a couple of day-long trips, immersing herself in a book while he splashed around in a freezing stream. She hadn't actually comprehended his success, thinking of it as simply a quirky hobby. Once over her initial surprise, she resumed applying vanilla-scented perfume and her favourite pink lip gloss. \n\nThe young couple headed downstairs hand in hand, and into the kitchen where they could hear Susan starting breakfast. Chris realised he had forgotten their morning coffee ritual, and greeted his Mom with a warm hug and an apology. \n\nSusan had expected him to be standoffish after last night but she could see that he was determined not to let his awakening ruin their closeness. She couldn't help but laugh at the makeshift solution for his t-shirts, promising to find a better solution. There were other winged Beings, after all. In truth, the Being before her was the picture of rugged, powerful, maleness. Devastatingly exotic, dangerous, and handsome, yet unaware of his charms; his unpretentiousness made him all the more adorable.\n\nExcusing himself as the two women chatted about the trip, Chris made his way outside, down and across the field to the milking shed. The sun had risen fully. His dragon's senses detected life and vigour all around him. Soon he would be living in Denver, away from the quiet countryside in which he had grown up. Approaching the milking shed cautiously, he tried to be as unthreatening as possible, projecting peaceful thoughts to the cows inside. Only a slight fuss was made when he entered; perhaps the peaceful thoughts helped, or perhaps the animals still recognised him as the one who had taken care of them for years. \n\nJethry was washing a cow's udder in preparation for the milking cups when he felt Chris approach. Such power in one so young scared the shit out of Jethry but he knew Chris had a kind heart, a peaceful soul. That could be a problem. Should he fall victim to controlling influences, the results could be devastating; Chris would have to learn to rely on his more savage dragon to protect him. \n\nThey stood, and looked: two old friends taking stock of each other with new eyes. \n\n&quot;I don't have too much to say,&quot; Jethry started. &quot;You're powerful enough to mostly look out for yourself and smart enough to smell out any obvious trouble. I warned you against bringing the girl into this but what's done is done. Perhaps it's a good thing too, she'll help you keep in touch with your humanity. Don't lose that, don't compromise yourself.&quot;\n\nChris was silent, taking in his old friend's advice.\n\n&quot;You've lead a simple life so far, too sheltered in my opinion but there are good reasons for that. You'll have protection from all but the most brutal or daring attacks, dragon hunting is illegal but you're too valuable to ignore. There will be plotters and sycophants, vying for your attention or favour so don't trust anyone.&quot;\n\n&quot;Don't worry boy, I'm almost done,&quot; Jethry said, sensing a bit of agitation from Chris. &quot;I've seen some of the magic that can be wrought with the use of dragons. Powerful stuff. You'll get contracts for your services; I suspect the payments will seem outrageous, but remember that people won't generally offer what they can't afford. Word your contracts so they're water-tight and don't whore yourself out to make a quick buck, you'll drive the price down in the long run. Finally, protect and care for what's yours. That means Annabel and Susan. They will be your greatest strength, your trusted allies, so to speak. But they will also be your weakness if they're used to get to you. Don't let that happen. It's up to you to do the protecting now, even if Susan doesn't realise it. Well, I guess that's all.&quot;",
        "&quot;Thank you Jethry. I'll keep all of that in mind, though I suspect that somehow I'll fail miserably. I'm just a ... well, I guess I'm a nerdy hick.&quot; \n\n&quot;Naw, you'll be fine. It's not all as grim as I made it out to be. If it's anything like my cat, just remember to trust your dragon's instincts. He'll watch out for the both of you but at the same time don't let him control you. Try to find a balance.&quot;\n\nThe conversation over, Chris strode forward to give the old werecat a heartfelt, if somewhat awkward man-hug. It felt like he was saying goodbye.\n\n&quot;I'm proud of you Chris, good luck,&quot; came Jethry's reply as they broke apart. &quot;See ya around.&quot;\n\nHe walked back to the house, committing Jethry's advice to memory, trying to prepare for the new world.\n\n***\n\nBreakfast was awkward. His interlocked, very sharp teeth didn't really crush. They sliced. Utensils got in the way of his fang-like canines, transforming eating cereal \u2013 or anything else for that matter \u2013 into a frustrating experience. He was terrified he might bite off half his tongue if he ever slipped up. The women snickered at his misfortune while he tried to eat. \n\nThey all cleaned up and loaded the car. Susan had a duffle of clothes and a small briefcase for their documents. Chris noticed that she also packed some blankets and pillows. She put the back seat down and spread out the blankets. How else had he expected to fit in the car with wings that stuck out above his already considerable height? He hadn't considered that.\n\nOnce he'd crawled in and laid down, she threw him the pillows, and spread a final blanket to cover him. From within her purse, she produced a small erlamire flask containing a greenish liquid: a chameleon potion. This she sprinkled over everything in the trunk, and, with an image of a trunk's worth of shopping bags in her mind's eye, she released her energy into the spell; suddenly the blanketed, dragon-shaped mound, resembled a small shopping spree.\n\n&quot;That's so fucking awesome!&quot; Annabel exclaimed, running her hand through the illusion to feel Chris underneath.\n\n&quot;What do I look like?&quot; he asked.\n\n&quot;Shopping bags. There are groceries and some clothes store bags, some shoe boxes, and a hardware store bag too. Susan, can I learn magic?&quot; she asked hopefully.\n\n&quot;I'm sorry Annabel, but I don't sense any magic in you. Now stay lying down Chris, it's only an illusion as long as you stay reasonably still. It does nothing for sound but that shouldn't be a problem while we're driving.&quot; She closed the trunk and walked around to the driver's side.\n\nSomewhat dejected, Annabel climbed into the passenger seat and had just snapped the seatbelt buckle closed when she had a brilliant idea. She unbuckled and climbed in back between the seats. Susan looked back in time to get an eyeful of Annabel's bare legs and panties disappearing under the illusion as she moved next to Chris, and pulled the blanket over their heads. Soon there were contented, moist, kissy sounds emerging from the pile of shopping.\n\n&quot;Alright, here we go,&quot; Susan said, mostly to herself. Turning the car down the drive, she waved to Jethry who stood on his porch. \n\nThey were off.\n\n*** \n\nChris and Annabel were stuck. Having spent the drive to Laramie smooching and petting under cover of the magical illusion, they desperately wanted to move things to the next level. There were just the small problems of Susan's presence in the driver's seat, and that they were now on a relatively busy highway headed for Denver. They decided to pause instead of exciting themselves further. \n\n&quot;Mom, what are we actually doing when we get to Denver?&quot;\n\n&quot;Well, now that we are actually on the road I need to call and arrange an audience with Lady Narlakis \u2013 Annabel, she's the ruler of the mid-western territory of Beings. I've avoided calling before now, in case someone came looking for us. I won't tell them who you are; just that I have an awakened Being to present and register. Once I've called \u2013 I think I'll do that in a few minutes actually \u2013 we'll drive to the Denver Compound. It's an underground complex in the city centre, underneath the Being district, the area with the most Being-oriented businesses and shops. The Compound is actually an underground palace. Lady Narlakis is a Drow, after all.&quot;\n\n&quot;Wait, businesses? You guys are out in the open?&quot; Annabel asked incredulously.\n\n&quot;It's our most important law that our activities don't expose our existence or raise suspicion, but yes. We are a reasonably large community and there are too many of us to live in the shadows. Every being has some sort of form which can pass for human, perhaps with the help of a little magic so we are hidden in plain sight.&quot; She paused to pass a truck before continuing. &quot;The Lady should be in session this morning, receiving requests from the community and sorting out disputes. We'll be able to present Chris, get him registered, pick up a bodyguard, get an allowance to take a familiar, and hopefully not piss anyone off.&quot;\n\n&quot;Sounds complicated, with what Jethry said, it sounds like there are pitfalls and enemies at just about every corner,&quot; Chris worried.\n\n&quot;In a way there are, Chris. Some people will be threatened by you, others will just want to use you without any thoughts of real malice. Just be careful.&quot; She pulled into the next rest area. &quot;Okay, let me call the Compound. I'll put it on speaker but you have to be quiet.&quot; She dialled the number. Communications of a magical nature were all encrypted by a global spell, a magical communications network: huge in cost and energy, but worth every penny in the modern world. It rang a few times before it was picked up.\n\n&quot;Denver reception, how may I help you?&quot; came the female voice.\n\n&quot;My name is Susan Baryst, registered witch, 4th class, Laramie.&quot; \n\n&quot;Yes. I have your file on screen, what can I do for you today?&quot; \n\n&quot;I require an audience with Lady Narlakis under urgency; I'm bringing in a recently awakened Being, suspected Class 1 or above. We'll need an escort.&quot; \n\nThere was a pause. &quot;Class 1? Are you sure? What species? Is it dangerous?&quot; Reception's interest was piqued.\n\n&quot;Like I said, Class 1 at least. Security is for his protection. I won't reveal any further details.&quot; \n\n&quot;One moment, may I call you back shortly?&quot; \n\n&quot;Certainly,&quot; Susan replied before disconnecting.\n\nIt only took a few minutes for them to call back.\n\n&quot;Susan, this is Timothy Garrill, head of compound security,\" came a gruff male voice. \"You will have a priority audience as soon as you arrive. Lady Narlakis will be in court all morning so you will be inserted into the schedule when you get here. Head to the bottom floor of the underground parking building; there you will be met by a security team and escorted into court. I understand you won't reveal the species or identity of the Being, therefore you will be held responsible for his actions should things turn sour. Is this acceptable?&quot;\n\n&quot;Accepted. I expect to arrive in about an hour.&quot; Once Susan had responded, the line went dead.\n\n&quot;Wow, they don't muck around,&quot; Annabel commented in the silence after the phone call, now she was actually scared.\n\n&quot;They're not always this serious, but a Class 1 is a big deal. It'll be fine Annabel, just don't say a word. Chris or I will do the talking.&quot; Susan reassured. &quot;Chris, you'll have to swear to uphold our laws and loyalty to Lady Narlakis. She can be a bit eccentric but she's generally fair, just be polite and don't offend her, try a little flattery if you can. She will be your protector and provider for years to come, you should behave appropriately thankful. However, she is a notorious collector, just like you collect treasure Chris, she collects valuable and loyal Beings. It's part of the reason she's so powerful. All going well, a young dragon will be such a tempting prize she will bend over backward to make sure we get everything we need.&quot; \n\nUnderneath the blanket, Chris pulled Annabel close into a hug.\n\n***\n\nThe rest of the drive sped by in silence, an hour passing as if it were only a few minutes. \n\n&quot;Here we go.&quot; They pulled into the underground car park of a mid-rise building. As they wound down three levels to the bottom floor, Susan briefed them. &quot;I'll get out first and open the trunk. Chris gets out, Annabel stay under the blanket until the initial meeting is over. Chris will help you out.&quot;\n\nShe pulled up to the security checkpoint. Their escort was already there: five Beings in dark clothes fanned out around the car as they parked. Susan got out first.\n\n&quot;Be brave, I love you.&quot; Annabel was trembling as Chris whispered to her before the trunk opened, the outside conversation becoming clear to the two inside. \n\n&quot;You can feel him can't you?&quot; Susan asked. &quot;He won't be dangerous unless provoked.&quot;\n\n&quot;Yes, he's a big fella,&quot; came the voice of Timothy Garrill. Bringing in a Class 1 was something the fire elemental would see to, himself. &quot;Okay, bring him out slowly.\" He then spoke in a low curt growl, he meant business. \"If you'd told us what he is we could have prepared better, witch.&quot;\n\n&quot;Okay Chris, you heard him,&quot; came Susan's voice.\n\nChris's heart pounded as he slid out from underneath the blanket. With his feet planted on the concrete floor, he pulled aside his section of the blanket and slowly straightened, raising to his full height. Taking in his surroundings in a flash, his tongue flicked out to taste the air. Elemental, vampire, lycan, wizard, witch, his dragon informed him.\n\n&quot;Holy shit,&quot; Timothy started. &quot;He's a dragon, right? Who the hell is he? They're all under protection.&quot;\n\nChris stayed still, trying not to seem threatening as he assessed the security team. The vampire woman and the male lycan were scenting him in return. &quot;Yes, he's a dragon. I've raised him as my son. His name is Chris.&quot;\n\n&quot;Nice to meet you Chris, it's an honour. I'm Timothy Garril.&quot;\n\n&quot;Thank you.&quot; Chris shook Timothy's offered hand firmly. &quot;May I bring out Annabel now?&quot; he asked as he turned back toward Susan. \n\nThe attack came lightning-fast from behind; the vampire was on his back, attempting to sink her fangs into his neck, driven by the scent of his powerful blood. His dragon jolted into action, buffeting the woman with his wings as he snarled and reached behind to pull her off by her hair. Firming up his hold with a grip on her neck, he ripped her off his back, her scrabbling black talons ripping his shirt and scratching across his scales, drawing a little blood. The smell of his blood in the air only made her struggle harder but Chris had her, slamming her down on the ground and holding her there by her pale neck, applying pressure as she struggled and hissed, fangs bared. \n\nThe others sprang into action, moving forward, intent on pulling the two apart. \n\n&quot;Stop!&quot; Annabel screamed, hearing the fight and pushing aside the blanket. &quot;Don't hurt him, please!&quot;\n\nThe security team held off and looked to their leader, startled by her sudden appearance. \n\nChris's dragon was in a rage. It wanted to kill the vampire, and pressed down, as if to rip her head off. She let out a wail, bloodlust fading as self-preservation became more pressing. \n\n&quot;Please let her go, Chris.&quot; Annabel begged quietly. \n\nHis face snapped up in her direction, a feral snarl fading as he saw his girlfriend, terrified and confused. Looking back down at the vampire, he brought his human side into control, carefully releasing his grip on the woman's neck, then turning to take Annabel in his arms and walk a few paces away. &quot;Get her away from me,&quot; he snarled over his shoulder.\n\nThere was a kafuffle of action as they checked on their teammate and restrained her. The vampire, Amanda, was dazed and sore; her neck and the back of her head ached horribly, but she would heal. Mostly she felt shame. She had attacked a newborn dragon in a fit of bloodlust. Even now she could smell his blood; if she hadn't felt so thoroughly beaten she would have been up and at him again in a heartbeat ... not that she had one.\n\n&quot;How dare you!&quot; screamed an outraged Susan. They hadn't even made it inside before her son had been attacked! This wasn't a good start.\n\n&quot;I'm sorry.&quot; As his team saw to Amanda, Timothy tried to soothe Susan, blocking her from moving toward the prone vampire. &quot;We didn't know he was a dragon, we would have made her feed beforehand if we did.&quot;\n\n&quot;That's no excuse!&quot; Susan spat.\n\n&quot;Perhaps not,&quot; replied the elemental, &quot;she'll be punished. Now let's get everyone calmed down and move on; you have an audience with Lady Narlakis. Who's the human?&quot;\n\n&quot;Oh, that's Chris's girlfriend. She'll become his familiar once it's approved.&quot; Susan calmed down; she needed to be collected for their court appearance.\n\n&quot;That isn't strictly procedure, Susan. She clearly knows about us and is under no binding not to reveal us,&quot; he stated, a little worried about how this new wrinkle might play out with Lady Narlakis.\n\n&quot;You're going to argue procedure with me after what just happened?&quot; Susan raised an eyebrow at the head of security. By now the other three had Amanda up on her feet, leading her toward the door. As she passed Chris, she muttered out the best apology she could.\n\nChris grunted in reply. \n\n&quot;What was that about?&quot; Annabel asked from within his hug.\n\n&quot;She's a vampire, she mustn't have been able to control herself and she tried to bite me.&quot; His dragon found the whole thing exciting. Chris found it terrifying; he had been moments away from killing another Being.\n\n&quot;Oh my god Chris, I didn't see that part. When I saw you, you had her by the throat on the ground. I was so scared.&quot; Annabel shivered. \n\n&quot;I'm sorry Dee, my dragon kind of took over when she jumped on me. Thanks for calming me down.&quot; He kissed her hair. \n\nTimothy came over shortly after and apologised to Chris for Amanda's behaviour. Chris accepted the apology and for some reason asked that she be shown leniency. Timothy readily agreed. Amanda would likely punish herself thoroughly on top of whatever he dreamed up for her. He called in an increased security order for the compound and court chamber as well as clearing their path to the court.\n\nThey began the ascent from the parking garage toward the court, walking down empty halls that led through a mix of modern and ancient interiors; the underground had been expanded and modified over many decades. Annabel and Chris walked hand in hand, flanked by their escort, while Susan brought up the rear. \n\n***\n\nSitting, sore and forlorn in the security office, awaiting her punishment, Amanda berated herself. Was she nothing but a bloodsucking monster? The first 50 years as a vampire had truly been hard but she had gotten through them, and in the process had learned to control her thirst. But her first whiff of dragon flesh had been enough to set off her most basic instincts. Disgusted, she looked down at the smears of red that remained on her hands. Before even thinking, a finger was in her mouth, sucked spotless in an instant as the flavours exploded against her tongue. With a moan, the rest of her fingers were dutifully bathed, lapping up every delectable molecule of his blood. She let out a whimper of despair as his taste faded, leaving her terribly unsatisfied, and having ruined her appetite for any other blood. She had gone about this all wrong: she should have offered herself to him, begged if necessary, to let her feed from him. She had to have more.\n\n***\n\nThey waited outside the door to the court chamber while the current session finished. It didn't take long before a lycan attendant stuck his head out and told them to enter. Chris squeezed Annabel's hand briefly before handing her off to Susan and striding into the large room.\n\nIt was truly impressive, with grand arched ceilings, marble floors, and rows of seats for a few hundred audience members, now mostly empty. A subdued yellow light was given off by several floating orbs, magically suspended at least two stories above in the arches. A richly carpeted set of stairs led to an obsidian throne. Seated there was the first Drow that Chris had ever laid eyes on: a dark, slender elf of subterranean origin. A hush swept the room as people turned to see the newcomers, many seeing a dragon for the first time. \n\nChris studied Lady Reyla Narlakis as he walked toward the throne. She was truly an elfin beauty. In her midnight blue gown, she looked truly royal, an air of ancient power about her. Her ears were pointed, contrasting her alabaster hair dramatically against flawless, pitch-black skin curved over sleek muscle and soft flesh. The shocking white was bound back away from her face in an elegant ponytail, jewelled ribbons maintaining its structure and weaving throughout the length, down to her shoulders. \n\nReyla's grey eyes sparkled in delight as the young dragon approached in his half form, noting his appreciative study of her. She'd been informed that a back country witch was to bring in a powerful Being, but this was truly extraordinary. The dragon oozed power: both physically with his tall, broad form, and magically with his heady aura. His wings made him majestic, but in her eyes his simple clothes highlighted his youth. Yes, so rare and powerful a Being was a treasure. Her black heart thrilled at the prospect of snaring such a fine catch for her own.\n\nChris reached the base of the steps and lowered himself to his knees, his head bowed. He could sense the power of the ancient elf; his dragon recognised in her someone they could respect as superior in age, knowledge, and power. &quot;Lady Narlakis, I humbly present myself before your court seeking membership to your domain.&quot; Chris surprised himself with his almost theatrical manner of speech, but realised his dragon was helping him.\n\nAnd well mannered too! Reyla thought, already slipping on the mask of a sweet, kindly demeanour. Quickly thinking through how to handle such an important meeting, she arose and descended from the throne to also kneel one step above him. Reaching down for his chin, she raised his face, eyes meeting. &quot;I am honoured to call you one of my own, dragon. We have missed your kind for far too long. What is your name? I do not recognise your colouring; do you have an aspect?&quot;\n\n&quot;My name is Christopher Baryst,&quot; he introduced, still captivated by her grey eyes and royal, midnight beauty. He paused for a moment before his dragon helped him again, eyes flashing. &quot;I'm of the Ether.&quot; The dragon raised his hands. Purple flame sprang to life from his upturned palms. There was a collective intake of breath around the room as it cast an ethereal, flickering light. \n\nReyla was rendered momentarily speechless. Before her knelt the 7th male dragon alive in the world, a youngling bursting with potential, untrained, and unmolded. Fortuitous in the extreme. She smiled down at him. This was no ordinary project; the future of the dragons knelt at her feet. &quot;Outstanding, Christopher,&quot; she said, leaning forward to kiss each of his purple cheeks, catching his enticing scent, yet she was too ancient to succumb to anything more than a pleasant sense of warmth between her legs. She willed a small charm as her lips touched his skin, to let her know where he was and if he was in danger. His dragon sensed her spell but allowed the protective blessing. Lady Narlakis stood back and addressed her rapt audience in her best regal voice, edged with threat. &quot;This dragon is under my protection. Any threat, harm, or plot against him will be met with my strictest displeasure. Dragons are guardians, and under his guardianship our community will prosper. We are honoured by his presence and you will all conduct yourselves accordingly. I will release an official statement to this effect shortly. This court is adjourned for the day.&quot;",
        "The court audience shuffled out, looking back for once last peek at the dragon.\n\n&quot;Rise Christopher,&quot; she said quietly. \n\nThe fire in his hands extinguished as he stood. &quot;Lady, please just call me Chris, everyone does.&quot; \n\n&quot;Fine, fine.&quot; Lady Narlakis said with a tinkling laugh. &quot;And you may call me Reyla when we are in private. How old are you, dragon?&quot;\n\n&quot;I'm nineteen,&quot; he replied, a little disconcerted. She was much nicer than he had expected. &quot;My dragon awakened yesterday. Before that I was completely human; but Susan raised me with a basic knowledge of our world.&quot;\n\n&quot;So young,&quot; Reyla cooed, reaching to brush his cheek, her mind already racing ahead to the prospect of a pet dragon at her beck and call. The room was now clear except for his escorts and her chief advisors. &quot;Come,&quot; she beckoned everyone closer. &quot;Sit, sit, we have a lot to get through.&quot; She guided the dragon to sit on a carpeted step, taking the step above as her own. &quot;Now, tell me your story.\"\n\nHe laid out his life as briefly as possible. For now he left Annabel out of the picture, although she sat only a few feet away. The Drow hadn't seemed to have noticed her yet.\n\n&quot;Interesting.&quot; She took one of his big purple hands in her black ones, stroking it gently. &quot;What do you wish for yourself, dragon? How may I help you achieve your desires?&quot; At this, he had looked up at her with innocent trust; this was almost too easy.\n\n&quot;I guess I just want to learn about our world and live my life. More specifically I need an education, a job, a home, and your protection,&quot; Chris replied honestly.\n\n&quot;No great aspirations?&quot; Reyla asked seductively. &quot;Hmmm. So easily pleased. You are such a nice boy, Christopher.&quot; \n\nAnnabel almost felt sick watching the elf paw at him. Surely he wasn't falling for her saccharine act.\n\n&quot;None.&quot; He smarted a little at being called a boy in front of everyone, but coming from Lady Narlakis it was a fair assessment. \n\n&quot;Very well.&quot; Reyla turned to Susan. &quot;And what of yourself, witch? Why wasn't I made aware of a dormant dragon inside my own territory? You meant to keep him for yourself, no doubt.&quot; She regretted her words when she felt the dragon recoil, the hand she held suddenly tense.\n\n&quot;No my lady,&quot; Susan responded calmly, not rising to the accusation. &quot;I only meant to protect him while he could not protect himself. Surely anonymity is the best defence. As soon as he awoke yesterday evening, we made plans to come here for your protection.&quot;\n\n&quot;Nonetheless, I would have expected a loyal Being to inform me of something so important,&quot; Reyla said coldly. The implication was not lost on anyone in the room. Again she chastised herself, she was eroding his good first impression of her. And yet, she resented having been kept in the dark. Still, she must control her temper around him.\n\n&quot;But all is well now that you are here, Chris,&quot; she soothed. &quot;I will contact the Synod immediately to inform them of you. I imagine you will need to go meet with their dragon representative, Lord Guthrie; but that can wait a few days. In the meantime, you may live in our guest quarters and explore our wonderful city. We can discuss your education later.&quot;\n\n&quot;Thank you,&quot; he said, a bit put off by her abrupt changes in demeanour. \n\n&quot;It's nothing Chris; all I ask in return is your loyalty and guardianship,\" Reyla assured sweetly. \"Everything magical will prosper indirectly from your presence. Now, let's get the rights over with.&quot; \n\nChris repeated after Reyla, reciting the induction rites for Beings allied to a new territory, swearing to uphold their laws, to serve his Lady, and to protect the Secret.\n\n&quot;Well said Christopher,&quot; Reyla encouraged, sliding the hand that had been resting in his short purple hair during the ceremony down the side of his face. &quot;Now, let's get the details sorted out. Tosh, give him a registration and enter him into the system. But only put name, species, and class; Christopher can enter any further information if he wishes.&quot;\n\n&quot;On it my Lady,&quot; came the reply from a tall Asian man, working on a tablet computer in his lap. &quot;What class shall I enter?&quot;\n\n&quot;Hmmm,&quot; murmured Lady Narlakis as she felt out the subtleties of the dragon's aura. &quot;I would have to agree that Class 1 is the most suitable.&quot; There was a bit of whispering between the others: Class 1 Beings were rare, very powerful. &quot;It will be nice to have a companion of similar capabilities again,&quot; Reyla flattered. &quot;The only Class 1 other than myself in the city is Envoron, but he is both senile and a Day elf, two things I cannot tolerate.&quot;\n\nSomeone tittered sycophantically at this, but Chris remained silent. They still hadn't discussed Annabel. Tosh saved what might have become an awkward silence by completing his registration, pending approval.\n\n&quot;Your registration code is 01DR-053-59413, the first bit is just your class and species, the numbers are randomised, unique to you. I'll set up a phone and laptop for you to use on Maginet this afternoon. You know about Maginet, right?&quot; Tosh asked.\n\nIn the background, hushed conversations could be heard between some of the others in the room. Timothy was discussing new security measures around the guest quarters with a teammate; however most silently watched the interactions between dragon and Drow. Including Susan and Annabel.\n\n&quot;A little, I've seen Susan using hers and I'm okay with computers.&quot; \n\n&quot;Tosh is very good with technology, he keeps things running around here,&quot; Reyla interjected, &quot;he's an arachnid you know, quite rare; I'm very lucky to have him.&quot; Tosh stuttered out a thanks before returning to his tablet. &quot;Now, you will also need security,&quot; she continued. &quot;What do you think, Timothy?&quot;\n\nThis had been the subject of Timothy's thoughts for the past few minutes. &quot;Well, he's powerful enough to handle himself; so what we need is someone to watch out for him, and back him up. A more subtle approach rather than a show of up-front muscle,&quot; reasoned the elemental.\n\nReyla agreed, mulling the possibilities over before confirming her initial decision. His primary protection couldn't be a man, there would be too much posturing between males this powerful; there always was. Lillian would be perfect: powerful and deadly enough to help protect the dragon, old enough to spot hidden threats, her loyalty insured due to the blood pact they had formed centuries ago. Besides, being around the young dragon would be torture for the vampire, which suited Reyla, given their current enmity.\n\n&quot;Lillian,&quot; she called, knowing the vampire was listening, lurking, as her kind was inclined. The thump of boot steps on marble answered her.\n\n&quot;Are you sure Reyla? We'll have to find a replacement for your own rotation.&quot; \n\n&quot;Yes I'm sure,&quot; she almost snapped at Timothy. &quot;She's perfect.&quot;\n\n***\n\n'She's perfect', echoed through Annabel's head when the Amazonian beauty approached Chris from behind. So tall, at over six foot, with a clearly powerful body, proportionally large curves and beautifully feminine lines. Her muscular legs were long and they looked amazing in tight jeans. The natural strut she seemed to pull off effortlessly was the best she had ever seen, hips jigging sideways a little with each long step. Annabel hadn't yet seen it from behind and already she knew it could probably cause accidents \u2013 plane crashes, even. \n\nThe gorgeous valkyrie wore tall combat-style boots that didn't detract whatsoever from the vision of her as any man's perfect dream. Her great big tits must be D-cups or something, the way they bounced slightly with each step inside her clingy red turtleneck. She gave a sexy little flick of her head, dislodging some lustrous, shoulder-length, light brown hair that required a seductive swish back in place behind her ear. Mischievous brown eyes twinkled behind a forest of lashes, below which were deep shadows that made her look sultry, a little tired, like she should be taken back to bed, or, just simply taken. Her skin was absolutely white, and her face beautiful, perhaps with an overly wide mouth emphasized by plump lips: a seductive, hungry predator. She smiled, a Cheshire smile, revealing her vampiric nature for all to see, fangs displayed on the plush bed of her bottom lip.\n\nAnnabel saw it for what it was: an attention-grabbing entrance, and it seemed to be working. Thankfully Chris's back had been turned. How was she supposed to compete with that?\n\nFor her part, Lillian had been watching the proceedings from the start, observing Reyla attempt to charm the young dragon yet failing to hide her ugly temper and haughty arrogance. Serves you right you black elf bitch, I hope he sees straight through you. \n\nReyla and Lillian had a long history. As a young vampire Lillian had been seduced by the powerful elf, entering into a blood pact with her: obedience and servitude, in exchange for power. This seemed wonderful at the time, especially to one who was generally governed by base desires in the early years of un-death. The pact enabled her to hold a secure place, in the upper levels of vampire hierarchy; an intoxicating feeling for any youngling, that also insured her survival during those vulnerable years.\n\nAs she had aged and matured, however, her vampiric cravings had mellowed, and she realised she had traded much of her free will. Reyla expected much in return. Initially, their relationship had been mutually beneficial, it had soured over the years as Reyla exerted control and ordered her to do her bidding. Four centuries had since passed, and she had grown into a tenacious, resourceful, and sometimes ruthless vampire, far too powerful to simply let slip away. Reyla knew this, and was fairly sure that Lillian was aware of this as well. \n\nReyla kept Lillian close, a member of her personal guard, a position in which Lillian excelled. And yet the elf took every opportunity to punish the vampire's 'ungratefulness'. Lillian had no choice but to do the Lady's bidding, bound by the Drow's blood inside her own body, but took any small chance rebel, despite how futile. Half a century ago when she had asked for her freedom, Reyla had denied her. Apparently Lillian had many more centuries of service before the 'generous gift' would be paid off. In truth, Reyla had no intention of releasing her from her little collection of pets. And so it had continued, until the present day in which they lived to goad one another. Thus, when Lady Narlakis called Lillian to duty, undoubtedly she thought that guarding a dragon would be a torturous experience for the vampire. \n\nSo Lillian flaunted her body proudly, knowing the conceited Drow would hate not being the centre of attention, even for a few seconds. She made sure her hips popped with each step, and displayed her fangs against her bottom lip seductively, revelling in the disapproval rolling off her liege. And yet it was true: assignment to guard this dragon would be excruciating. Already she could feel his scent flooding her nostrils, no longer the little tickle it had been while on the far side of the room. She would control herself, though. It was an opportunity to get away from Reyla and perhaps slight her at the same time. Furthermore, if she was close to the dragon, perhaps Lillian could steer him away from the treacherous elf's grasp.\n\nReyla watched Lillian's dramatic entrance, from her view directly over the dragon's wings. She strongly suspected that the vampire was goading her. Upon her approach she stood, gesturing Chris up too, politely turning him to introduce the vampire and thereby retain a picture of charming royal calm.\n\n&quot;Christopher, this is Lillian Kozlov, your bodyguard,&quot; she said sweetly, eyes locking threateningly with Lillian's for a moment.\n\n&quot;She's a vampire,&quot; was Chris's response, not moving forward to shake her hand.\n\n&quot;Yes,&quot; replied Lillian, letting a little of her native Russian accent tinge her words, just to piss off Reyla. &quot;But I'm much older than Amanda. I control myself far better.&quot; A mortified Amanda had already texted Lillian to inform her that she had attacked the young dragon, confessing to having found his taste unimaginably compelling.\n\n&quot;Oh.&quot; Relenting, he moved forward to accept her handshake, eyeing her from head to toe as he did so. His dragon was thrilled no end at the thought of seducing her, subduing her large, powerful body before plundering her softness until she quivered. She would be a wonderful challenge. When his eyes finally reached her gaze, nearly level with his own, she winked. He knew he had been caught. Chris blushed a deeper purple, furiously. Real smooth, he despaired, yet still managing a &quot;Nice to meet you.&quot; \n\nShe gave him an overly wide smile in return, and though the smile didn't quite reach her dark brown eyes, it lit her face with a devastating predatory beauty. &quot;It's nice to meet you too, Christopher,&quot; she replied, batting her eyelashes, for Reyla's benefit. She had, after all, appreciated his obvious attention and couldn't deny the dragon's powerful body as appealing; yet his timid nature reminded her of his young age. She preferred strong, confident men, who provided a challenge and were not intimidated by her. Admittedly, there were few men who fit this criteria yet still hadn't let their power get to their heads. Still, it was hard to maintain complete composure with his damnably sweet smell. Any physical contact might break her resolve. She locked it away as an impossibility. Lady Reyla would forbid it anyway, she would obey.\n\n&quot;Good,&quot; Reyla concluded. &quot;Lillian will be responsible for your security day and night. Others will also be involved at times, but she will be in charge. Now, if that's all I'll leave you to make Christopher comfortable in his new home. I must go inform the Synod ... oh, and someone take the human girl's memories, I can't fathom why she's in here to begin with.&quot;\n\n&quot;No,&quot; came a menacing growl.\n\n&quot;She knows about all of this,&quot; Reyla gestured around them, confused by the dragon's response. &quot;About you. Surely, you \u2013 &quot;\n\n&quot;She is mine,&quot; the dragon interrupted, holding her gaze, his body tense. Everyone felt the change in atmosphere as the Beings assessed each other. &quot;I will take her as a familiar.&quot;\n\nReyla backpedalled. Obviously the girl meant something to him. And yet ... a human? It was beneath him. &quot;That's highly irregular, familiars need to be approved by \u2013 &quot;\n\n&quot;You have the authority. I request your permission.&quot; It was, in fact, barely a request. The dragon spoke with a firmness that brooked no argument.\n\nShe had no choice. She couldn't deny his request without enraging the dragon; he might even try to flee with her. &quot;You may have her. I grant permission to take the girl as your familiar. See to that as well Lillian, I expect it to be done by the end of the day.&quot; Cocking her head slightly, Reyla couldn't help but reassess him. There was strength and dominating possessiveness lurking underneath the youthful meekness. It enraged her, yet thrilled her no end. She needed to plan more extensively for how to deal with him, and how to ensnare him. &quot;Christopher I apologise for distressing you, I wasn't aware of her importance. I would like to speak with you again tomorrow, once you're settled of course. I expect the Synod will have a plan of action formulated by then.&quot;\n\n&quot;Good day, everyone.&quot; Affecting regal serenity, she turned, her white, bejewelled ponytail sparkling, and strode away. \n\nThere was a collective moment of relaxation as the Drow swished gracefully away. Everyone except Chris's party that now included the chuckling vampire, had cleared the room to head about their business.\n\n***\n\n&quot;Lillian,&quot; muttered Timothy threateningly.\n\nThe two stood together, watching the distraught human girl embrace the dragon desperately.\n\n&quot;Calm yourself, Tim,&quot; She whispered, barely containing her mirth. &quot;That was fantastic. Did you see her face?&quot;\n\n&quot;Yes,&quot; the elemental sighed. &quot;She almost lost her cool for a second there. Don't push her.&quot; He held Lillian in awe. Lady Narlakis had a temper, that was a fact, but was generally fair with everyone who didn't piss her off. Lillian went out of her way to do just that, and it made her a bit of a legend.\n\n&quot;Okay, we'll go to the rooms first, then the tattoo, then probably the rooms again,\" Lillian outlined the schedule. \"After they're done with making her a familiar we can show him around the Compound. He can't go outside looking like that, though. Maybe tonight he can go visit the club or something.&quot; \n\n&quot;That sounds fine, are you going to be okay with this?&quot; Timothy asked. &quot;Amanda was on him straight away; you should have seen it though, he had her by the neck so fast I barely saw it. He just about killed her but the human started making a fuss and he stopped.&quot; \n\n&quot;Interesting.&quot; She approached the dragon, giving the witch a nod of acknowledgement. &quot;Christopher, let's go see where you'll be living, then we can get started on making her your familiar.&quot;\n\n&quot;Sure, and please call me Chris. It looks like we'll be spending a bit of time together.&quot; He released Annabel from their long hug; still holding onto him, she gave the beautiful vampire a surprisingly hateful glare. \n\n&quot;Thank you, Chris. And what's your name?&quot; Lillian offered Annabel a hand to shake. \n\nAnnabel didn't accept it. It was childish, but she refused all the same.\n\nAt this, Lillian leant down. This human female was pretty enough; perhaps a little skinny by her own standards, but that was the fashion these days wasn't it? She must be his girlfriend, strong minded enough to see past his wings and scales. Good for her. &quot;Listen,&quot; she tried for a conspiratorial tone, &quot;I imagine this is quite overwhelming. But you don't have to worry about me. That's more than I can say for some of the others around here. I won't try to steal him from you,&quot; she winked as she spoke the last sentence, and Annabel blushed violently.\n\n&quot;Sorry, I'm Annabel,&quot; she offered her hand shyly. &quot;It's all just a bit much at the moment.&quot;\n\n&quot;Welcome aboard,&quot; said Lillian, shaking it, but not before glancing up at the dragon for approval to do so.\n\n***\n\nLillian guided them through the underground complex, explaining various services and functions. There were about 4500 Beings in the Mid-West territory, most of whom lived in the Denver metropolitan area. Lady Narlakis provided many kinds of support to Beings in her territory, policed their laws, and maintained the Secret. Beings provided something in return to help the community: a tax system of sorts, usually paid by barter of services. Beings had their own economy based in trade using mostly precious metals and stones as currency which also had intrinsic value for magics and spells. Human currency still played its part, because everyone interacted with that world as well, Lillian explained. Chris already knew most of this, but Annabel absorbed it all like a sponge.\n\nUpon arriving at an elevator, Lillian inserted her key card and they stepped inside, travelling upward while she explained that they were now traversing underneath the city block to their hotel suite, inside a hotel for Beings only. They were quite high up when they arrived on their floor, where again a key card was required for entry.",
        "Their suite was quite spacious, one of only two abodes on the entire floor. Elaborately furnished, the dark heartwood accents contrasted nicely with the gentle pastel interiors. There were pieces of tasteful local art throughout, including some clearly made by Beings. All of the windows, which were extensive along one side, were installed with retractable shades currently pulled down, effectively blocking out all sunlight. They could open them if they desired, but Lillian cautioned them to please tell her beforehand; she was a vampire after all.\n\nWhile Chris and Annabel made themselves comfortable in the master bedroom, Susan took one of the spare rooms. Lillian set up shop in another: while on duty she would live with them. When asked about taking time out from what sounded like exhaustive surveillance duties, Lillian explained that she didn't expect to do so. Frankly, she rarely slept anymore.\n\nLunch was delivered via room service: burgers for Chris and Annabel and an omelette for Susan. Lillian ordered a 'blood box' \u2013 the vampire equivalent of a juice box \u2013 a concept Annabel initially found immensely funny until the implications of harvesting human blood sunk in. All four of them sat at the dining room table, Annabel next to Chris, opposite Lillian. While they ate, Susan remained quiet, sizing Lillian up; trying to figure out what hidden games might be in store. Lillian must be powerful, she knew, and highly trusted to be assigned to protect Chris; but what exactly would the vampire be reporting to Lady Narlakis, she wondered.\n\n&quot;So your aspect is the Ether. How does that work?&quot; Lillian asked, sipping her blood while they finished off their fries.\n\n&quot;I don't know,&quot; Chris answered honestly. He'd begun to warm to the seemingly-friendly vampire. &quot;I used to dream in the Ether some nights. This is all very new to me.\" He explained about his father's enchantment. \"Yesterday, I fell into the Ether when I had a nap, woke up, and had a walk around in there. I actually ended up scaring the hell out of Mom.&quot;\n\n&quot;Very interesting,&quot; Lillian mused, &quot;you know, it's a unique aspect among dragons. There hasn't been an Ether dragon before. I imagine you will grow to be quite formidable. Dragons always are, but if you can learn to phase, and to harness the energy of the Ether for magic, you would become very powerful.&quot;\n\nEveryone seemed to be obsessed with how powerful he would become. &quot;I just want an uncomplicated life.&quot;\n\nLillian's guffaw echoed in the room and Susan had to smile a little too. &quot;You certainly won't have an uncomplicated life. No one does.&quot; Perhaps because he was young, he didn't yet understand the world. She was finding it a little easier to relax around him, especially after her blood meal; perhaps she was just getting accustomed to his scent. The girl, however, still eyed her warily, while the witch silently studied her.\n\n&quot;Well. Let's go get her the tattoo,&quot; Lillian announced, once they had all finished eating.\n\n&quot;Me?!&quot; Annabel squeaked. She hated all things 'needle'.\n\n&quot;Is that really necessary?&quot; Chris knew it was, but asked anyway.\n\n&quot;Absolutely,&quot; Susan replied out of the blue from the head of the table. &quot;Without it, you won't be legally protected against the actions of other Beings. You'll be a regular human. Nowadays, they tattoo the owner's ID number on each familiar. They used to brand humans, like cattle.&quot;\n\n&quot;Yes, and without your master's tattoo I could come gobble you up in the night,&quot; was Lillian's light-hearted rejoinder. Chris hissed. &quot;Relax,&quot; the vampire eased, &quot;I meant it as a joke. Although it's true, you know.&quot; \n\n&quot;Do you really hunt people? Kill them to drink their blood?&quot; Annabel asked.\n\n&quot;Well of course I do, I'm a vampire. Most of us try not to kill our victims. It's greedy, you know; messy, too.&quot; Damping down her sharp wit, she continued, &quot;We each have an allotment of humans we are allowed to kill each year; some vampires get off on it, but they usually don't last long. We are allowed as many non-fatal feedings as we need, provided we leave no trace behind, keep the Secret, and all that. Human familiars of other Beings are off-limits, though,\" she added kindly. \"A lot of vampires just keep their own human familiars, or feed from another willing Being.&quot;\n\n&quot;That's sick, how can you just treat people like that?&quot; Annabel whined. Chris hugged her across the small gap between their chairs; still, she felt a little nauseous at the idea.\n\nLillian wasn't at all offended by the girl's accusations. &quot;It's just nature Annabel, it isn't pretty,\" she explained patiently, meeting the girl's bright eyes. This was a serious subject, the human needed to understand that the Being world wasn't some idealised fantasy. \"Vampires aren't even the worst; true demons used to go on absolute bloodbaths before they got stopped. That hasn't happened in several hundred years. And it's been very rare since the Devines put a barrier around our dimension millennia ago, saying it was unfair that demons still influenced our lives, even after the ban.&quot; She had embraced her nature long ago. A hungry vampire was a dead vampire, after all.\n\nSusan looked on approvingly, it wasn't the most gentle of lessons in the uglier side, but it would be good for both Annabel and Chris.\n\nSlumping sideways back into Chris's body with a slight sigh, Annabel was rocked. &quot;Demons? Holy shit ... what, what about God? The Devil? At least tell me you don't go around killing people. I mean you're a good vampire, right?&quot; Magical Beings were one thing but she'd lost faith once she realised that people did all manner of things in the name of their gods.\n\nAcross the table Lillian laughed huskily, watching the dynamic between the two, they certainly seemed to take a lot of comfort in physical contact with each other. The girl was as delightfully innocent as the dragon. &quot;Well. I don't know that there's such a thing as a 'good' vampire, darling. Perhaps I am. I did kill a man last year, but then again he was a rapist; that was more of a murder than a feeding. Demons and Devines certainly exist, perhaps not as you've thought of them. One thing's for sure though,\" Lillian leaned forward, speaking thoughtfully as she twirled some of her lustrous brown hair out of habit with a finger. \"They hate each other. What do they fight about? The fate of our souls: who knows?\" she mused aloud. \"As for God, or gods, or the Devil: who knows? I have no more proof of their existence than you. Mightn't an entity powerful beyond our comprehension appear to be a god? We would have no way to know if it was a god or just some small fry in the scheme of the universe and all its dimensions.&quot; She paused and leaned back, stretching in an unintentional display of her impressive breasts, signalling her withdrawal from further philosophical discussion. &quot;Anyway, all this is besides the point. You need to get a tattoo in order to be his familiar.&quot;\n\n&quot;Fine. Okay,&quot; Annabel agreed. The vampire's talk and her piercing gaze had managed to intimidate her more than did the idea of getting a tattoo. &quot;Do I have to do anything else?&quot;\n\n&quot;You'll repeat some rights like Chris did today. Then he'll do the same and put some energy into your binding. Other Beings will then be able to sense it and know you're a familiar. That part will be painless.&quot; To Lillian, it felt like overseeing a wedding. In a way, she was.\n\nThey rode the elevator back down below-ground, popping up in a shaded back alley. Behind a door, a suitably surprised, heavily-tattooed wizard greeted them, introducing himself as Garry. He had heard rumours earlier that day that a dragon was in town, but had dismissed them as bullshit. Now, he was stoked. A scenario began playing out in his head as he ushered them in and set up his tools: tattooing the dragon's familiar was going to give him a story to tell at the bar tonight. Women would be pawing all over him just to hear it....\n\n***\n\nHer left shoulder fucking throbbed! At least it was over now and she could suffer quietly, lying on the hotel bed. She'd put on a brave face, trying to show the hot vampire that she had toughs. Now she just wanted Chris, maybe some ice cream too; but he was out in the living room fussing over his new laptop and smartphone with Tosh, the Japanese spider guy. He was such a sweet nerd sometimes, getting excited about his new stuff. She hoped they would still have time to play an occasional video game together once everything settled down. Drifting a little, her mind wandered over the last 24 hours, the most eventful of her young life. \n\nBefore she had detected any sign of his approach, Chris was back in the room, picking her up off the bed. &quot;Are you okay, Dee?&quot; he soothed, holding her so as not to bump her sore shoulder. She could walk just fine, yet he took some satisfaction from treating her like an invalid, trying to comfort her.\n\n&quot;I'll be fine. It hurt like a bitch but it's not so bad now,&quot; Annabel fibbed. He'd carried her gently and then lowered her onto one of the rich leather couches where she now reclined, her legs bent and tucked neatly underneath her.\n\n&quot;Well, Susan reminded me that I might be able to help with that,&quot; he replied, gently lifting the material along one shoulder of her light blue dress and easing down her bra-strap to reveal a bandage. It covered the string of black numerals, about a half inch high, imprinted along her tender left shoulder blade, her dyed skin raised up and inflamed, like stinging Braille. Removing it carefully, he examined the exposed tattoo. 053 59413. Annabel winced a little as the bandage came off, but let him shuffle around her until he knelt, settling behind her, on the couch. He guided her down and forward a little, holding her upper arms gently. Then he started licking across the fevered numerals, hoping his saliva would provide some relief.\n\nInitially, his purple, semi-forked, reptilian tongue felt hot on her sore skin; but as he continued, it seemed to have a cooling effect. Before she knew it, the pain was easing away. &quot;Ohhh, it's working Chris. Keep going, it feels so good,&quot; she murmured. \n\nHe lapped until the irritated red colour faded back into flawlessness. Only, it wasn't entirely flawless: the string of numbers contrasted sharply against her milky skin. She shouldn't have had to mark her body like that.\n\nSusan and Lillian watched the unintentionally erotic display from the kitchen. Given the position and his movements, he might almost be screwing her gently from behind. His larger, draconian body arched to lick and nip her shoulder while holding her in place. That he was in fact gently healing her, added something pure and loving to the pose.\n\n&quot;That's fucking hot. He's going to be a lady-killer,&quot; Lillian murmured distractedly, in danger of revisiting her initial evaluation of Chris's suitability as a lover.\n\n&quot;Mm hm,&quot; Susan agreed, unable to take her eyes off the lovebirds, instantly aroused, and finding herself less and less willing to hold back. Just being near the dragon and his scent was whittling down her power to resist him at an alarming rate.\n\nAnnabel opened her eyes and saw the two women in the kitchen, watching them. She quickly pulled her shoulder strap up, embarrassed about almost showing tit. Chris, who had been enjoying tonguing her smooth, slightly salty skin and giving her little kisses, stopped too; he had been fully caught up in the moment. His Mom and Lillian had been watching. He blushed a deeper purple. Perhaps the couch wasn't the best place.... And yet he hadn't intended it to become sexual.\n\n&quot;Ooh! That was so cute,&quot; Lillian exclaimed, breaking the spell. This assignment was turning out to be fun; a far cry from being cooped up with a prissy, self indulgent, Drow bitch. She hated feigning civility and obedience. The blood pact continually forced her to do as Lady Narlakis ordered; she could resist, but doing so left her weak and therefore vulnerable. Watching two young things, desperately in love but so unsure of themselves, was so much better. Now the purple dragon was all flustered and embarrassed, so uncharacteristic in a Class 1 Being.\n\n&quot;Okay, let's do the ceremony.\" Lillian approached the couch. \"I've written down what you need to say. I'll be your witness.&quot; She handed them each a scrap of paper.\n\n&quot;What do I have to do, Mom?&quot; Chris asked, unsure. &quot;I've never even used magic.&quot;\n\n&quot;It'll be fine Chris,&quot; Susan assured, walking over. &quot;It's not really a spell so much as a pact. Just hold Annabel in your mind and say the words. Some Beings give their familiars a more personal, magical marking in the process but don't worry about that. It's just a ceremony.&quot; She didn't actually have experience with wielding the magic involved in taking a familiar ... but it couldn't be that complicated. Most Beings could do this; even those who didn't practice traditional magic, like Weres or vampires.\n\nChris and Annabel faced each other on the couch and looked down at the scribbled words. \n\n&quot;Ready, Dee?&quot; Chris asked tentatively, &quot;You know you don't have to...&quot;\n\n&quot;Oh, shush,&quot; Annabel teased. &quot;So eager to get rid of me?&quot;\n\n&quot;No.&quot;\n\n&quot;Good, I love you babe,&quot; she replied, leaning up to give him a chaste kiss, still mindful of their audience. &quot;Let's do this. I go first, right?&quot;\n\n&quot;Yes. Just say the words ... and mean them,&quot; Susan added.\n\nOne last time Annabel glanced at the note, memorising the words, before looking into his loving eyes, grasping his taloned hand, and promising her life to him. It was so dramatic. &quot;Being, I give myself freely to you, bind myself to you. I vow to serve, place you above all others, and uphold the Secret. I'm yours.&quot; She meant it all. As the final syllable left her lips she felt an involuntary tremble course through her body. This wasn't just about saying some words anymore; something of herself had left her and now reached out, tendril-like, toward the dragon.\n\nChris felt it too, nudging against his aura, seeking acceptance. He and the dragon accepted her and enveloped her in return. Gently pulling her close, he held her against his neck so he could say the words in her ear. Holding a pristine vision of Annabel in his mind's eye, he saw her protected, secure, and loved. He spoke aloud in his deep, slightly hissing voice. &quot;Human, I accept you, place you under my protection. I share the Secret and mark you as one of us. Serve me well. I love you.&quot; \n\nThose last three words were his own. He hugged her tighter. Blood roared in his ears: a staggering drain of energy poured out of himself and into her. Energy, mixed with magic, flowed out of him at an alarming rate. Scared, he opened his eyes for several seconds. The seconds multiplied, and it still hadn't stopped; his vision was darkening and he couldn't release his grip. He let out a strangled gasp just before blacking out.\n\nAnnabel felt something enormously powerful wrap around her as he squeezed the air from her lungs. Searing heat streamed over her tattoo where one of his hands gripped her, his claws digging through the thin fabric of her dress. She struggled, whimpering. Something rushed into her, her body stiffened as if electrified, and just as quickly it was over. She fell back, stunned, with Chris's limp body crumpled on top of hers.\n\nSusan was at their side in an instant. Something had gone terribly wrong; as soon as Chris had begun speaking, an overabundance of energy had tainted the air. With its sudden release, she had been bowled backward by the wave and slumped heavily against the coffee table. Momentarily she regained her senses and saw Chris's human body smothering Annabel.\n\n&quot;The fuck was that!?&quot; Lillian spat. The dragon's body had twitched and shuddered before shrinking back into his human form, his wings grotesquely sucked into his back, collapsing on themselves, the purple membranes dissolving back into the finger-like support bones. The bones crumpled sequentially inwards as the rest of his colour and scales faded until there was no trace of the dragon left.\n\n&quot;I don't know, help me!&quot; Susan shrieked, stumbling over and rolling his limp body off of Annabel onto the other side of couch. Feeling his neck for a pulse and listening for breath, she felt and heard them, faint and barely audible. &quot;Check her!&quot; \n\n&quot;He's human again,&quot; the vampire noted, glancing over at him as she knelt by the unconscious human girl. She reached to shake her gently. &quot;Aaaagh ahh!&quot; No sooner had she touched Annabel's skin, when she suddenly reared up and backed against the far wall in a flash of inhuman speed, clutching her blackened hand and slumping down the wall in agony. An acrid, burnt flesh smell filled the room.\n\nSusan swivelled to see the vampire wailing helplessly, fangs extended as bloody tears streaked her pretty face. She stared; it was the worst burn she had ever even heard of, let alone seen. Snapping back to her son, she quickly assured that he was indeed breathing. Somehow, he had put far too much energy into the familiar bond, driving the dragon far back into hiding. \n\nLillian cried piteously while next Susan quickly examined Annabel albeit from a safe distance. &quot;What have you done, Chris?&quot; she murmured to herself, feeling out toward Annabel with magical senses. What her sensations felt made her draw right back. Something had rushed out at her, sensing intrusion: it was powerful, intelligent, and felt like ... the dragon. Power literally oozed; Susan could 'see' it soaking into Annabel's skin, merging with her. Raw, magical power, burned bright purple in her mind's eye. What the hell did it mean?\n\nLillian's sobs brought Susan back from observation and into action. She got up and approached cautiously, getting close enough for a good look at the vampire's damaged hand. Across the palm and fingers the skin was charred to the bone, bubbled and blackened. Some streaks of healthy skin remained in places on the back. \n\nAn injured vampire was a very dangerous creature. Had Lillian still maintained control? &quot;Lillian,&quot; she called gently. &quot;I'm so sorry. Can you hear me? Is it safe to come closer?&quot;\n\nLillian heard the witch but god it hurt so much. Worse than the time long ago when her leg had been crushed. She self-assessed, and found that her vampiric nature had retreated, shocked, into the background. Usually, when injured it was next to impossible for her to refrain from sucking the nearest living thing dry. &quot;I... I think so. Please help me,&quot; she groaned.\n\n&quot;Hang in there Lillian; what can I do?&quot; Susan rushed forward the last few feet, kneeling beside her.\n\n&quot;Blood,&quot; Lillian whimpered. &quot;Help me to the kitchen.&quot; They pulled each other up, Lillian cradling her useless hand gently with the other. &quot;In the fridge. All of it, get all of it!&quot; Drained by the magical burn, she could barely stand, and allowed Susan to support her as they stumbled over to one of the big silver fridges. \n\nSusan grabbed an armful of blood bags and dumped the first load on the bench alongside the sink. \n\n&quot;More!&quot; Lillian hissed, fangs flashing as she pulled a bag from Susan's grip and sunk her teeth into it, messily splattering her chin and neck, dripping onto her turtleneck and staining it an even deeper red. Her previously light brown irises dilated to all-black as Susan returned with a second round. \n\n&quot;In the sink, cut them into the sink!&quot; Lillian spluttered before ripping into another. Susan plugged the sink, grabbed a knife, and slit bag after bag, draining the contents into the stainless steel basin until Lillian told her to stop. ",
        "Gingerly, Lillian reached over and lowered her useless hand into the few inches of chilled crimson, breathing a sigh as it provided some relief. In her other hand she held her fourth bag, sipping from it, the blood's rejuvenating effects somewhat countered by the onset of bloat from having recently glugged it down. \n\n&quot;Are you going to be alright?&quot; Susan asked tentatively, leaning against a fridge door across the way. It had been downright terrifying to be so close to the vampire, while she had screamed for blood. Her intake had been voracious. What would happen if the fridge ran out? \n\nUnder normal circumstances, the smell of Susan's fear would excite her. Lillian, however, only sighed and burped; she must be a right mess, covered in blood. Glancing first around the kitchen, she then turned to look grimly over at the witch. &quot;Yes, I'll be fine in a while. You don't have to worry about me biting you. I'm stuffed.&quot; A slight sense of euphoria had begun grow as her hand throbbed painfully. It had begun to heal, submerged in the pool of blood. &quot;There had better be a damn good explanation for this,&quot; she added grimly.\n\n&quot;There isn't,&quot; Susan replied, &quot;he's put an enchantment on her, somehow. I've never seen anything like it. I suspect he meant it to protect her. It must have lashed out when you touched her.&quot;\n\n&quot;How did that happen? You said he couldn't use magic,&quot; Lillian snapped, narrowing her eyes.\n\nThey were both in shock, she realized too late; she needed to maintain her discipline, remain calm.\n\n&quot;I said he hasn't used magic,&quot; Susan snapped back, &quot;He's never cast a spell in his life until now.\" She snorted. \"The first one he tries, almost wipes him out. It's the dragon. Chris wouldn't know how to place an enchantment like that.&quot;\n\n&quot;You talk about them like they're two different Beings.&quot; Lillian groaned under her breath from a fresh onset of sensations, as newly-regenerated muscles and ligaments began to knit together.\n\n&quot;One Being. Two sides,&quot; Susan clarified. &quot;Just like you have a human side and a vampiric side. Sometimes you're talking to Chris, sometimes a dragon.&quot;\n\n&quot;You know I have to report this.&quot; Lillian pulled her hand out of the blood briefly to inspect the progress. The blackened layers of skin were gone. Raw nerves burned from within the fresh layer of sub-dermis, exposed to air without an outer protective layer of skin yet generated, to cover them.\n\nSusan wasn't squeamish as a rule, but the vampire's healing hand looked unnaturally gruesome: myriad growing tissues writhed as they absorbed the blood. She had felt relief after it was once again submerged. Looking away, she noted the state of the kitchen. Spattered blood, ripped bags littered and dripped across the nearby counters and floor. She chuckled almost maniacally. What a mess. They hadn't even been here for a full day. The statement about making a report swam back into focus.... The vampire didn't grasp the situation at all. \n\n&quot;Report?\" Susan exclaimed. \"Every Being with any magical sensitivity within 200 miles of here felt that! The Synod will be having a fucking emergency phone conference as we speak. I should have known this wouldn't stay quiet. What's Lady Narlakis going to do now?&quot;\n\n&quot;I can only guess,&quot; Lillian said honestly if still a bit sharply, despite attempts to infuse her voice with calm. &quot;She wants him for herself, so she'll protect him. She'll be tempted; but I doubt she'll make a direct play to take him from you. You know how she is, no?&quot; \n\n&quot;Yes, I know. Will you help me?&quot; Susan had sensed the edge in Lillian's voice; nevertheless, she could really use a friend in this.\n\n&quot;I already am.&quot; Lillian attempted to smile, before wincing again as she tried moving her fingers. &quot;I hate that elf more than you can imagine; but we have a blood pact, I'm bound to her.&quot;\n\n&quot;Really?&quot; Blood pacts were a particularly powerful bond, very rare these days. &quot;How?&quot;\n\n&quot;I was young and greedy,&quot; Lillian admitted. &quot;Stupid, too.&quot;\n\n&quot;How will you help us, then?&quot; Susan pressed on. &quot;Wait, what did she give you in return?&quot;\n\nFirmly, Lillian disciplined herself to become calm, to relax through the pain of her healing hand and the excitement of the last few minutes. &quot;I'll run whatever diversions I can, while you get him on his feet. It won't be much, but anything to fuck with Reyla sounds great. In the end though, I do what she tells me.\" She flexed, grimaced, and continued. \"Perhaps I'll just do exactly that. None of my own thinking or reporting helpful little insights.&quot; It might actually be enough to throw the Drow off a little. She looked at Susan with a serious, steady gaze. &quot;Ultimately though, Susan, Reyla isn't your enemy. You just need to watch out for your dragon until he and the lady settle into their relationship.&quot;\n\n&quot;Yes, I'm relying on Reyla to protect him. Well, I'm relying on you; I just don't want her claws in him this early. He needs to be independent.&quot; If only they could make her see past Chris's value as simply an item for her collection.... If Reyla befriended him, she would have his loyalty without his resentment. &quot;Hey, what about your part of the blood pact?&quot;\n\n&quot;Well, I can do this.&quot; Using her power, she lifted Susan slightly, suspending her a scant inch off of the ground.\n\n&quot;Oh! What's \u2013? Put me down!&quot; Weightlessness was a disconcerting feeling; Susan wanted none of it. \n\nAt the sound of her shriek, Lillian hastily released her. Once back on the ground Susan felt a bit embarrassed; she heard Lillian chuckle and waited a few seconds, regaining composure before continuing. \n\n&quot;You're telekinetic. That's very powerful for a vampire.&quot;\n\n&quot;Yeah, pretty cool huh?&quot; was Lillian's slightly sarcastic rejoinder, wincing again during a particularly painful few seconds' healing.\n\n&quot;Not at your price. I appreciate your help though; I'll need all I can get, to keep him safe. If you're okay I'll go check on them again, just don't touch Annabel again until we know how this enchantment works.&quot;\n\n&quot;I'm almost done healing,\" Lillian looked up at Susan's retreating form. \"And yeah, I'm not touching the girl with a broomstick; it would explode. Be careful, you can't heal like I do,&quot; she added, surprising herself with a sudden, almost sisterly twinge of concern for the witch. Just then her pocket started buzzing; it was her cellphone. Probably Reyla. \n\nSusan had stopped and turned in the doorway to listen. \n\nLillian gave her an approving nod as she pulled out the phone. &quot;Yes, Reyla,&quot; she answered. &quot;You felt that? Yes, Susan said he put an enchantment on the girl.... I have no idea, I'm not a witch.... No, she's legally his familiar now.... No, I can't, I have my hand in a sink full of blood because it almost got burned off when I tried to touch her.... No, they both passed out.... Fine, I'll come see you in half an hour.... No, it's been quite a busy afternoon, my Lady.... Fine, I'll turn the bugs on before I leave.... No I'm not feeling rebellious, it's just my hand.... Yes.... Yes, I'll be fine.... Goodbye.&quot;\n\n&quot;So?&quot; \n\n&quot;She felt it. I think she's actually a little scared. I have to go report to her soon and boot up the surveillance system before I go. She's pissed I didn't do it to begin with.&quot;\n\n&quot;What kind of system?&quot;\n\n&quot;Video and sound in all the rooms. There's no getting around it, really. You should look for your own accommodations as soon as possible; although for the time being, this is very secure. I recommend you don't tell Chris and Annabel; they might accidentally give me away,&quot; Lillian reasoned.\n\n&quot;Thank you, it means a lot that you'll help me.&quot; Susan looked at the bloodstained vampire in a new, more friendly light.\n\n&quot;Eh,&quot; Lillian smiled, flashing fang. &quot;This is the most exciting thing since that unicorn lost it and rampaged through half the magic district. Wish I could have avoided this, though,&quot; she flashed her a half-hearted grin, turning back to her healing hand in the sink.\n\n***\n\nReyla observed the witch, Susan, via the now-activated window on her tablet's screen. Lillian had finally powered up the surveillance system a few minutes ago, just as Reyla had ended a lengthy phone conversation with the rather relieved Synod. They'd been quite perplexed, upon first receiving the field reports. That the newly discovered dragon had been the source of such a powerful spell, added more fuel to the proverbial gossip fire. Maginet was probably already abuzz with speculation about its significance. Reyla would have avoided such publicity at all costs; the more tongues wagged, the harder it would be to keep the dragon for her own purposes. Already, the Synod had put plans in motion to meet with Lord Guthrie face-to-face; they'd arranged for a jet to take Chris to Europe in a few days. Meanwhile, they would be 'advising' her on his care and education, 'checking in regularly'.\n\nUsually quick to assess, judge, and devise a cunning plan, Reyla, was at a loss. In truth, she had no idea what to do with her unique, young Being.\n\n&quot;My Lady.&quot; Lillian interrupted Reyla's musing, entering quietly into her lavish, darkened office.\n\n&quot;You look a mess, Lillian.&quot; Reyla noted the blood smeared across the vampire's face, neck, and arms, matting her brown hair in places, and staining her top.\n\n&quot;Yes. I consumed quite a lot, used even more on my hand.&quot; She displayed it for Reyla's review, fleshed-out and covered with new pink skin.\n\n&quot;What of the dragon?&quot; \n\n&quot;Can't you see for yourself?&quot; Lillian gestured toward the tablet resting in Reyla's lap.\n\n&quot;He's just lying there. He's human again. The witch is watching him.&quot; \n\n&quot;Then you know as much as I do,&quot; said the vampire.\n\n&quot;Well. Go back and protect him,\" Reyla commanded imperiously. \"Now that everyone knows there's a youngling dragon up for grabs, I would be surprised if someone didn't try something. Use that bear-man you like for extra muscle, if you require.\" She sniffed. \"There will be a trip to London in a few days but you'll have Synod approval. No one will touch you there. In the meantime report to me daily. I don't want any more upsets, Lillian.&quot; \n\n&quot;Yes, my Lady,&quot; purred Lillian. She narrowed her eyes, calculating.... The elf seemed rattled. Time to push some buttons. &quot;You have no idea what you're doing, do you?&quot;\n\n&quot;Enough!&quot; Reyla hissed, &quot;I've had enough of your insolence. Get out.&quot;\n\n&quot;Sorry, my Lady,&quot; Lillian intoned insincerely, and turned to go.\n\nReyla's smiling riposte suddenly demanded her to attend. &quot;Oh Lillian, how do you find him? Is his blood irresistible? Will you be able to control yourself?&quot; Her tone of voice reflected Lillian's earlier insincerity. Touch\u00e9.\n\n&quot;It's hard, my Lady.&quot; Lillian turned back, choosing to respond honestly this time, and gave her a smile to match, albeit a blood-spattered one. &quot;But I'll manage. Perhaps, you should be more concerned about yourself. I know I am.&quot;\n\nFilling her next words with arcane power, eyes flashing, Reyla barely contained her temper. &quot;You will not taste him, you may not drink his blood, nor may you even touch him. I forbid it.&quot;\n\n&quot;I had no intent.&quot; The vampire smirked, quietly triumphant, &quot;Perhaps you're projecting \u2013 &quot;\n\n&quot;Out!&quot; screeched the midnight elf. \n\nLillian spun around and strode out, hiding her amusement at having reached her ladyship's limit. She had just unwittingly made Lillian's life easier. Such an order, issued through their blood pact, would now make the dragon easier to resist.\n\nReyla resumed her gaze at the surveillance window on-screen. After only a short time had passed, however, she could barely keep from throwing it against the wall, so frustrated had she become by the inactivity. This could become one of her greatest moments, and yet it had equal potential to be her downfall. After a single meeting, she had him deeply secured under her skin; such a temptation. His power and innocence only added to his allure, calling to her darkest desires for control, manipulation, and even enslavement. Perhaps, she mused, she should just fuck him and be done with it. It was probably a bad idea though; she wouldn't be able to resist binding him once he had penetrated her, his powerful body locked within the grip of her arms and legs. No. The Synod wouldn't take kindly to that....\n\nBesides, the magical wake of the dragon's spell was the largest since the recent update to Maginet security two years ago. And that had taken roughly 150 mages to create, working together. What exactly was this dragon capable of? \n\nShe reassessed: the political advantage alone was immense. She wouldn't waste it by enslaving him with trickery or magic. She wouldn't squander this opportunity. Instead, she would train him, nurture him, and develop him into a powerful instrument. It would likely take centuries.... But it would be worth it, and he would be grateful. Who knows? He might prove to be her equal, her match. Lurking beneath his timid, boyish nature, she'd glimpsed a dragon that might become one who would eventually tame her. There she went, daydreaming like she was only a few centuries old again. This dragon was already too dangerous.\n\n***\n\nAnnabel's eyelids fluttered as she came around, sitting up suddenly. She remembering Chris almost crushing her, energy flowing around her, through her. He was lying on the couch next to her now, She found herself sitting on the couch at the other end, leaning against an armrest. He lay nearby, human again. No more wings, no more purple or creamy skin, no more claws. He looked slightly smaller.\n\n&quot;Please don't move, Annabel,&quot; Susan spoke softly from the opposite couch. \n\n&quot;Susan? What's going on? Is Chris sleeping?&quot; Annabel whispered, not wanting to wake her boyfriend.\n\nSusan sighed. She had watched her for the last hour as her son's spell continued its work, only just detectable beneath the surface of her aura, but definitely there. &quot;He's passed out, Annabel. Look, I don't know what's going on, but just stay calm and don't touch anything. He somehow put an enchantment on you during the ceremony. It was really powerful; and now he's wiped out.&quot; \n\n&quot;What the hell.... What kind of enchantment? Wait, why can't I touch anything?&quot;\n\n&quot;I'm sorry honey, but after it happened you were both unconscious. Lillian tried to check if you were okay and got a really bad burn when she touched you.&quot;\n\n&quot;What?! Is she okay? Why would it do that? &quot; her voice had raised but it didn't seem to have any impact on Chris.\n\n&quot;She'll be fine, she used blood to heal quickly. I think it's a protective enchantment, that's the only thing that makes sense, Annabel. Perhaps it sensed she was a vampire and lashed out at her. Do you feel any different? Did you feel anything strange before you fainted?&quot; \n\n&quot;Yes!&quot; Annabel exclaimed. &quot;It felt like something went through me, like an electric shock. He was holding me so tightly I couldn't breathe, digging his claws in by my shoulder. Can you check if I need a BandAid, please?&quot; She pulled down her dress's collar so Susan could see, twisting to look at her shoulder at the same time.\n\nThey both just gaped for several seconds. There was a dragon on her shoulder, straight out of a medieval tale or a story book, only purple. Such a beautiful tattoo. Susan got off the couch to have a closer look. The fine, indelible detail, so lifelike it could only have been done by magic, was etched into her skin atop her registration number; its tail twining around the last few digits. It looked about three inches long: a miniature purple dragon with wings and a flexible tail, tiny white spikes at the end, modelled after Chris's full dragon form. \n\n&quot;Is that what Chris will look like, when he goes all the way?&quot; Annabel asked, she was pulling her left shoulder forward with her other hand, trying to get a better look.\n\n&quot;Yes. I think so,&quot; Susan replied, inching closer still. &quot;Only bigger, but I think that's his full dragon form.&quot; It was probably just Annabel pulling her skin tighter, and yet Susan could have sworn she saw the tiny dragon's chest rising and falling gently.\n\n&quot;He's beautiful,&quot; cooed Annabel, happy Chris had taken the effort to make her ugly tattoo more personal to the two of them. \n\nThe tattoo dragon lifted its arrowhead-like snout on his flexible neck to look up at Annabel. The women screamed. Susan fell back onto the couch clutching her pounding chest, experiencing a fright worse than when Chris had showed her some shock site on the internet. Annabel kept screaming as the startled miniature dragon took off, galloping across her skin to find cover under her dress. \n\nThere was a warm, crawly tickle as it scuttled down her back, coming to a stop near her hip. This felt way too much like having a bug on her skin. &quot;Get it off! Get it off! Get it off meeeee!&quot; she wailed, frozen in place, hoping it would stop moving .\n\nSusan was dumbstruck, trying to reconcile what she had seen while getting her breathing back under control.\n\n&quot;Susan!&quot; Annabel pleaded, &quot;I can feel it, get it off me!&quot;\n\n&quot; Annabel, I ... I don't think I can. I've never seen anything like it.&quot; Susan tried to calm. \n\n&quot;What do you mean? What is it?&quot; Annabel panicked.\n\n&quot;I mean I've never seen anything like it. Just hold still and see what does,&quot; she said as she approached again. &quot;Where is it?&quot;\n\n&quot;Down by my left hip. It's quivering, I can feel it! Oh my god what is it, Susan?&quot; repeated Annabel.\n\n&quot;Honey, I think it's Chris's enchantment, the physical representation of it anyway. It looks like a moving tattoo, a cartoon on your skin. Can you lift up your dress so I can see?&quot;\n\n&quot;Okay okay!&quot; Annabel tried to gather courage before she slowly inched one side of her light blue dress up over her thighs, panties, and finally her tummy. &quot;Can you see it?&quot; She asked.\n\n&quot;Oh my ... yes, it's alive.&quot; Susan stared, enchanted by its lifelike beauty. &quot;Annabel; he looks scared.&quot;\n\n&quot;It's scared?! What about me?&quot; she hissed, &quot;I'm the one it's crawling all over! We don't even know what it is.&quot;\n\n&quot;It's okay Annabel, he won't hurt you,&quot; Susan started to reach out to the dragon, intent on calming it but it took off up Annabel's chest, under her bra and up her neck. She screamed again, clawing after it as it moved, chasing it off her neck and down her arm. Cornering it. Annabel finally got a decent look at it as it made a stand on the back of her hand; nowhere else to run. They stared at each other for a full minute, mini cartoon dragon and young woman. Finally Annabel brought her other hand forward slowly, placing a single finger about an inch away from him. &quot;What are you?&quot; She breathed.\n\nThe dragon inched forward, skulking like a cat on all fours, his wings pressed against his back, and nuzzled her finger gently. A tingly warmth slowly spread from her finger, across her hand. \n\n&quot;Amazing,&quot; Susan breathed as Annabel grew bolder, lifting her finger to stroke down the tiny dragon's back. \n\n&quot;Oh my God, he's purring!&quot; Annabel chirped, her outlook about the lively tattoo completely flipped as. The dragon arched and wiggled under her touch, clearly enjoying the attention. Her heart melted instantly. He looked so real, she tried to scoop him up with her other hand, as if he was more than a tattoo. But when she looked, there he lay, now on his back in the palm of her hand, creamy belly exposed as his legs kicked in the air. &quot;He's beautiful, but Susan, how is this possible?&quot; ",
        "&quot;I have no idea Annabel. He's a spell. A very, very powerful spell.&quot; Susan watched him roll back over and move up Annabel's arm. This dragon looked powerful despite his stature, it made her wonder how terrifying Chris would be when he looked like this... only forty foot long. The dragon plopped down in the hollow between her neck and collarbone. Annabel reached up to stroke him, but this time he remained steadfastly in place, curled as if preparing to sleep. &quot;What does it feel like now?&quot; asked Susan.\n\n&quot;It's like a warm feeling when he moves around, when he runs it's like a creepy crawly, but I can feel his little vibrations when he purrs. Can I keep him?&quot; she asked, not fully understanding.\n\nSusan chuckled. &quot;Annabel, he's a spell. I don't think you could get rid of him if you tried. We'll ask Chris what it means when he wakes up.&quot;\n\n&quot;Chris! Wake up&quot; Annabel turned, shaking his unresponsive body. &quot;He's really out of it huh? How come he's human again?&quot; \n\n&quot;The enchantment he cast was the most powerful I've ever felt up close; I think it drained him, so much so that the dragon retreated back inside him to rest. We'll just have to wait until he wakes up.&quot; \n\n&quot;He'll be okay though, right?&quot; \n\n&quot;I think so honey,&quot; came Susan's slightly worried response.\n\nAnnabel stubbornly pushed his shoulder, rolling him over so he was up against the back of the couch. She got up and adjusted her dress back into position then lay down next to him, wiggling into a tight spoon position. She pulled his limp arm up under her breasts, meeting Susan's watchful gaze, almost challenging her to say something. &quot;Just wake me up for dinner, okay?&quot; \n\n&quot;Okay sweetie,&quot; Susan comforted. She would have liked to give Annabel a hug, yet still didn't know if that was safe given her new enchantment. She got up and left the room, giving her some privacy.\n\nAnnabel sniffled a little, upset that Chris had gone to such extremes. Why couldn't he be awake to comfort her? It was small consolation that it had all been for her; a spell to protect her. He was so stupid, could have hurt himself. And now, what? Would anyone she touched, burst into flame? Annabel stroked the little dragon at her neck, calming herself. Chris shifted in his sleep, momentarily tightening his arm around her chest. He could still touch her ... of course he could.\n\nSusan woke her later for dinner. Lillian had returned, bringing in some of her own things; and again they ordered from room service. Her professional interest noted the presentation, and yet she wasn't particularly hungry. What of her aspirations to go to cooking school? Would she still be able to pursue her own career at Chris's side? Did she even want to? \n\nOver dinner, she could see the way the vampire looked at her: more calculating, more careful, not venturing near. Lillian would only have a look at the beautiful tattoo dragon from a good distance away.\n\nThe little scamp was quite boisterous. He ran down her arm to look at the food on her plate, then raced up to wait by her lips when she lifted a forkful to her mouth. Eventually Annabel pleaded with him to be still, and he seemed to get the picture. Susan and Lillian couldn't help but stare, it wasn't everyday you get to see a disturbingly lifelike cartoon-tattoo. The fact that it was also curious, intelligent, and responsive wasn't lost on Susan. It was a living spell, one of only a few recorded. The implications were vast and uncharted; but she kept any misgivings to herself. They were being watched, after all.\n\nAfter supper, Annabel retrieved the duvet from their bedroom. She draped it over Chris and then wormed her way underneath to again spoon with him. Still, he slept, which made her worry. It felt a bit icky to be in the same clothes for two days straight.\n\n&quot;Ouch.&quot; Annabel muttered, feeling a prick on her palm. She brought her hand up from under the blankets to see the damage: the dragon was just looking up at her.\n\n&quot;Was that you?&quot; Sigh. &quot;Do you even hear me?&quot; Annabel wondered to herself. He snapped his arrowhead jaw again and she felt the pricks of his tiny teeth.\n\n&quot;Ouww, stop it!&quot; It didn't hurt much, it was more of a shock. &quot;You can hear me, understand me?&quot;\n\nThe dragon just cocked his head slightly at her, quizzically. &quot;What do I call you?&quot; she asked quietly. &quot;Chris? No that doesn't seem right does it, you're not Chris.&quot; Suddenly the dragon playfully stamped his front claws on the ground as would an excited dog. He shot off, up her arm and around her torso, racing laps round and round her body. It felt so ticklish she couldn't help but giggle and squeal, breaking away from the funk her mind had conjured up.\n\n&quot;Stop it you little goofball,&quot; she half-laughed, half-pleaded. He retreated to her palm, expectant. &quot;Fine, you're not Chris. Something else, something fun, something clever. Let me think.&quot; She crooned down at the little dragon, stroking him softly, a character from one of her favourite childhood books came to mind. &quot;What about...now hear me out. How about Bartholomew?&quot; \n\nBartholomew flopped over, presenting his tummy for a pet with his legs kicking and his tail wriggling. &quot;Bartholomew,&quot; Annabel whispered, cupping her hands around his warmth and bringing him close to her chest, comforted that a part of Chris would always be part of her now.\n\n***\n\nAnnabel was snuggled up next to him. That was the first thing he could tell when he woke, mostly because one of her hairs was tickling his nose and he really needed to sneeze. He couldn't help it, he held most of it back but a little &quot;tttssssseeeww&quot; still came out quietly. It wasn't a very manly sneeze.\n\n&quot;Did you just sneeze on me, babe?&quot; Annabel murmured sleepily, waking just as his body had tensed up, trying to hold it in.\n\n&quot;Sorry Dee. It was only a little,&quot; apologised Chris.\n\n&quot;Gross.&quot; Annabel started, then registered. He was awake. She quickly rolled to face him. &quot;Chris? Thank god you're awake, are you okay?&quot; She grabbed hold of his front and shook him a little before hugging him close.\n\nChris was a bit surprised at her anxious response. &quot;I'm fine Annabel. How long have I been out?&quot; He thought back to the ceremony, being overwhelmed by his desire to always protect her, feeling the energy sap out of both himself and the dragon, feeling the dragon retreat back inside. 'You okay buddy?' he shot towards his dragon. 'Tired,' was all he got back.\n\nAnnabel reached off the couch in the darkness, groping for her phone on the carpet. The screen blinded them both a little before she could check the time. &quot;It's 5:30am, you passed out around 3:30 yesterday afternoon. What did you do Chris? Susan said you cast a really powerful spell on me,&quot; Annabel explained.\n\n&quot;No I didn't, well I didn't mean to anyway.&quot; Chris started, &quot;I remember I had a vision of you in my mind as I was saying the words, I could feel you reaching out to me so I tried to hold you close. Then all of a sudden I felt myself draining, I couldn't move. Man, it was scary. That's the last thing.&quot;\n\n&quot;That must have been the spell Chris.&quot; Annabel explained, &quot;It must have cost a lot of energy.&quot;\n\n&quot;Oh. Do you feel any different? What happened?&quot; He asked, how could he have cast a spell? He didn't know how to use magic, only the basic principles Susan had drummed into him.\n\n&quot;Well, Lillian tried to touch me and got a really bad burn. She's ok now though.&quot; Annabel qualified before he could ask. &quot;Susan said it's a protective enchantment but there's... well you gave me... look I'll just show you.&quot; \n\nAnnabel turned her phone back on, angling it towards her other palm so Chris could see. &quot;What is it?&quot; Chris asked.\n\n&quot;Shh.&quot; Annabel murmured before switching to a more coaxing tone. &quot;Come on Bartholomew, don't be shy. It's your Dad.&quot; She could feel the warmth of the little dragon cautiously approaching the light.\n\n&quot;Holy shit!&quot; Chris exclaimed when the dragon's head, snake-like neck, and wings came into view, playing across her skin. Annabel angled the light a little more to expose him. \n\n&quot;Yeah,&quot; agreed Annabel, giggling at the now funny memory. &quot;He gave Susan and I a massive fright when we first saw him, he was lying still and we thought he was just a magic tattoo. Then he moved and I just about died!&quot; \n\n&quot;Bartholomew?&quot; Chris asked, the little dragon cocked his head.\n\n&quot;I came up with that yesterday when you were asleep. Go ahead. Touch him, he likes it.&quot; \n\nChris reached down and tentatively ran a finger along the dragons spine, Bartholomew wriggled in delight. &quot;That must be what I'll look like in my full form.&quot; Chris intoned, mesmerised by the moving tattoo.\n\n&quot;Susan thinks so, that he's the physical embodiment of the enchantment you put on me. He's so funny though, running all over me. I can feel it, he's warm or tickly. You should have seen him at dinner yesterday,&quot; Annabel gushed.\n\n&quot;Sounds like I've got some competition.&quot; Chris chuckled, hearing the adoration in her voice.\n\n&quot;I'll still love you a little, you gave him to me after all,&quot; joked Annabel. &quot;Thanks by the way, it means a lot that you care about me this much.&quot;\n\n&quot;Like I said, babe. I love you.&quot; Chris leaned a little to kiss her pretty button nose in the darkness. They lay on the couch in silence for a while, Chris stroking up and down her back occasionally.\n\n&quot;I was really worried about you,&quot; whispered Annabel.\n\n&quot;Hey, I'm fine. Okay?&quot; Chris pulled Annabel tight and shuffled a little so she was lying directly on top, he could now rub her back and sides like he knew she loved. &quot;I'll admit, it wasn't planned but now you have your little buddy there and you're my familiar. I know I'll feel better knowing he's there to protect you, even if we don't know exactly what it is he does yet.&quot; \n\n&quot;I guess,&quot; Annabel admitted. &quot;Just don't do it again.&quot;\n\n&quot;What? Express my love and affection for you?&quot; Chris teased, trying to raise her spirits. &quot;Fine. Never again.&quot; He stopped rubbing her flanks, taking his hands off her body.\n\n&quot;Chriiiiis,&quot; She whined.\n\n&quot;Nope.&quot; \n\n&quot;Kiss me,&quot; she demanded in the darkness, rubbing her body on top of him, to flush out a reaction.\n\n&quot;Uh uh.&quot; He shook his head. He was reaching his limit though; doomed to fail as soon as she had started wriggling.\n\n&quot;Fine, I'll do it myself.&quot; There was mock exasperation thick in her voice. Reaching to cup his cheek, she brought her lips down firmly on top of his. Feeling that she had hit her target in the darkness, she quickly employed her tongue to tease his lips, coaxing him to kiss back. It didn't work instantly so she pulled her trump card, the queen of asses so to speak. Groping along down his arm, grabbing his larger hand and pulled it along until she could position it firmly on her proudest feature. In moments he was squeezing her possessively, kissing back too. She smiled against mouth, pulling back slightly to gloat.\n\n&quot;Treachery,&quot; Chris muttered, he could almost hear her smiling in the darkness. Losing their little game was worth it to knead her springy butt. To be fair, foreplay can't count as losing.\n\n&quot;You're defenceless against me,&quot; Annabel delighted, grinding a little as he found her other cheek on his own. They were at each other's lips in moments, kissing desperately in the darkness of early morning and blackout shades. Tongues mating against each other, sliding over lips and teeth, they sampled each other's passion. With a small moan, Annabel broke for air, he still smelt and tasted like he did when he was a dragon. It was driving her nuts, but she stopped to consider her own breath. &quot;Let me go brush my teeth Babe.&quot;\n\n&quot;You're fine. Am I okay?&quot; Chris asked, leaning up to find her in the darkness and peppered her lips and cheeks with tiny pecks. He couldn't dare to stop now.\n\n&quot;You taste great.&quot; Annabel replied breathily as he started trailing his little kisses towards her ear.\n\nChris paused, curious about Annabel's experience. &quot;Really? What do I taste like?&quot; He held his mouth slightly off her skin just below her ear, breath tickling gently. \n\n&quot;Don't stop!&quot; Annabel pleaded, &quot;Fine, umm... you taste and smell different after you transformed the first time. Mmmmhhh, yeah right there.&quot; Chris had found the hem of her dress and traced his finger up along her smooth leg, he was now rubbing a finger lightly over her fabric covered slit, tapping down on her outer lips in a light rhythm as he teased her temped pussy. &quot;It....mmmm, you smell wood-smokey, kinda spicy. Your skin tastes like that, I think it's just mostly the smell though. But your uhhh, fluids are stronger, sweeter and hot too, like subtle chilli and cinnamon. It doesn't burn me though. I love it.&quot; She tried to get it all out before she lost her mind to his teasing mouth and fingers.\n\nChris chuckled a little into her neck. &quot;Thanks Dee, I love the way you taste too you know, and that damn vanilla perfume you use is enough to get me a bit hard whenever I smell it. Especially when it gets mixed up with your sweat or when you're wet. I love that smell too babe, your taste even more.&quot; All this time he had worked his hand into position, pulling aside her now moist panties he split her tiny inner lips and slowly inserted his index finger into her tight, slippery vagina. &quot;This taste.&quot; He breathed as she bucked backward, forcing more inside her with a moan.\n\nHe paused to kiss the skin on her delicate neck a little more, he thought briefly that a flash of warmth crossed under his lips but he couldn't be sure what it was. He was painfully erect inside his jeans, he realised he even still had his shoes on. Annabel had had enough of his teasing kisses though. She pushed him down into the couch with her smaller body, taking his face in her hand so she could control their kissing. As she happily shoved her tongue against his, driving both of them into his mouth with a moan, she twitched her hips, fucking back onto his single finger. It was great, Chris had big fingers, but it wasn't enough to get her off soon. Therefore it was just frustrating. Her arousal was peaking and now she needed the real thing inside her again. Squishing her feverish pussy onto his hand just wasn't going to cut it.\n\n&quot;Get your pants off.&quot; Annabel ordered, breaking their kiss.\n\n&quot;But wh \u2013 &quot; he started to tease her, unaware she had reached such state of need.\n\n&quot;Shut up!&quot; she hissed back, forcing his hand away from her pussy, scrabbling at his belt and zipper, desperate for him. Soon enough, with some awkward help from Chris, his jeans and briefs were trapping him around his knees. She only spared a moment to grab his erection, pulling it up between them roughly.\n\n&quot;Dee, I'm sorry. What's wrong?&quot; \n\nAnnabel mashed her lips back down on his for a few seconds in reassurance. &quot;Nothing. Just get this dress off me.&quot; He tried to help but she slapped him away, realising she could do it better by herself in the darkness. Her bra was off in three seconds flat and her long hair spilled down over her beasts, tickling a little. Rolling onto her side, she pulled her white panties down and she was nude.\n\nNow it suddenly felt like she had all the time in the world. &quot;Sorry Chris. I'm just really excited, I think it's still the pheromones, only weaker this time. Can we just do it right now? Okay?&quot; She rolled back on top gently, positioning herself over his groin. Bartholomew chose that moment to remind her of his presence, running excitedly around her tummy, dangerously close to her mound.\n\n&quot;Won't hear me complaining,&quot; Chris said, running his hands up her sides and over her smooth belly, brushing the undersides of her small breasts. He felt a small pinprick and pulled his hand back, startled. &quot;Something pricked me.&quot;\n\n&quot;Oh, Bartholomew bites,&quot; she panted, reaching down to position his throbbing rod. He felt so thick and angry in her small hand, dividing her slick inner lips. Then she was slowly pushing down.\n\n&quot;Fffffaaaauuuuck.&quot; \n\n&quot;Gghhhaaaa!&quot; Came their combined groans as his cockhead slipped inside her, sinking further and further as Annabel continued to sit, her hands now propping her upright on his chest. She was so warm and tight around him, Chris could only gape like a beached fish as she swallowed him up. It felt amazing, absolutely perfect to be inside of her again. For her part, Annabel loved the way he filled her, stretching her open but with so much more pleasure than their first time. They took it slow, Annabel sinking herself onto him over the course of about a minute. She was plenty wet but didn't want to rush, savouring the feeling of being so close. He supported her, guiding her down as she took him all the way in her warm depths in one deliciously slow stroke.\n\nAs she finally felt her ass lightly touch his thighs she squished herself down further, huffing when he bumped her cervix. &quot;Fuck, Chris! That's so frickin' deep, just hold still a sec,&quot; she panted.\n\n&quot;T ... t ... taaake your time, babe,&quot; he stuttered. Just being fully inside her had him rushing toward an embarrassing finish. &quot;God you're amazing, Annabel. You feel so good, I never want to stop.&quot; He ran a hand up to her chest, stroking and tweaking her nipple gently. He reached with both hands and held her pert, cupcake tits lovingly, feathering around her small areolas to feel the little bumps. Her nipples tightened further so he gave another soft pinch again, hitching her ragged breath.\n\n&quot;Don't....&quot; she moaned, rocking her hips slightly. Ready, she forced herself off him about two inches before letting her own weight impale her quickly. &quot;Don't ever stop.&quot;\n\n&quot;Never.&quot; Chris brought both hands to her hips, gripping to help lift her as they established their slow rhythm. Grinding together on the down stroke, moaning desperately as they pulled apart, only to huff or whimper as they fully mated together again and again.\n\nAnnabel loved being on top like this, in control of their pace and angle. He stuffed her so completely when she sat on his rock hard cock, its broad helmet bumping her deepest spots. She twisted her hips in little circles with him all the way inside. It felt delightful to stretch herself like that, feel the warm friction everywhere as her belly clenched automatically, squeezing him. \n\nHer juices were slick on his invading shaft, slowly working down onto his hairless balls and seeping into his butt crack. Now they made squishy, nasty noises when their sexes met and her pubes were a humid, manicured shrubbery. Moaning, she managed to catch herself from being too loud; but Chris hissed and growled, thrust up into her body, pulling her down onto him. It was quickly taking its toll on her.\n\nHis cock jumped whenever she ground down onto him, he felt it bump her insides and twitch appreciatively. She felt so unbelievably good, so hot and wet. Her tight pussy gripped him every time he pulled out for a new thrust; she was doing it on purpose. How had she gotten that idea? He couldn't help himself as he used his own position to help them make love, bucking his tingling, slick erection right up into her beautiful snatch.\n\nAnnabel took everything he had and loved every second. Pleasure racked her body with each thrust, each muffled slap of their bodies joining was accompanied by a little huff or a whimper. Hands writhing on his shirted chest, she couldn't help scrabble and scratch at him, feeling his powerful muscles tense and flex as she rode him hard. The beautiful creature below her in the darkness was hers to love, hers to fuck. Annabel's clit fired shocks of delight up her body as it hit his pubis while her deepest recesses built a slow burning crescendo whenever his thick glans filled her completely. ",
        "&quot;Fuck! So good, I'm gonnn... nhhhaaaaa!.. I'm gonna cum. Chris!&quot; she squealed as he thrust powerfully from below, their strokes longer and more erratic.\n\n&quot;I'm close too, Dee.&quot; Chris gritted through his teeth, past slowing now, couldn't hold off if he wanted to. Now, he could only fuck her well and hope she met him at the finish.\n\nHer legs were getting a little shaky, so she made the mistake of repositioning, reaching behind, supporting her on his thighs now. Chris never missed a beat, helping her raise herself and then pumping up with his powerful legs. Their new position arched her body beautifully, pushing his cock along her fluttering pussy's front wall. He felt her tense and quiver, building so quickly with the new stimulation.\n\n&quot;Nnnnggg! Yes!... Yes! I think that's my Geeee!&quot; Annabel wailed.\n\nChris couldn't respond, only bury himself to the hilt in her incredible pussy, their bodies bouncing together. Sinking deep inside her warmth, his balls had long since pulled up against his shaft, ready to release their torrent. With his hands guiding her hips, he only wished he could tweak her beautifully sensitive nipples again, but it was too late. He teetered on the edge with this last few thrusts, feeling his dick throb delightfully, impossibly, swell and harden further.\n\n&quot;Heee's bitinnnnggg meeeeeeee!&quot; Annabel screamed, her climax roaring though her body as Chris's girth hit her g-spot one last time and Bartholomew sunk tiny sharp teeth into her right nipple. She arched back, sitting down hard, fully impaling herself and bucking desperately as her body shook. Cumming almost violently, her eyes squeezed tightly shut as pleasure wracked her body. \n\n&quot;Annnnnabellll!&quot; Chris's cock erupted inside her, massive pulses of viscous cum splattering deep inside. Her tummy jumped and clenched as she felt his hot seed shoot off, she acknowledged each squirt with an attractive little yelp, inundated with bliss. Chris held her twitching body down, pumping all he had at the gate of her womb. She accepted it all as her own joy leaked to soil the couch. \n\n&quot;Yes! So fucking good!&quot; she managed in a strangled cry. Her pussy coaxed and he gave one final, magic infused spurt. Her whole body jumped as he fired his last shot, quaking in the aftermath of her orgasm.\n\nHe didn't think he had the strength but managed to pull Annabel to his chest. She lay unresponsive, shaking a little, her breath hitching into his t-shirt whenever an aftershock rolled through. His softening penis was still inside her but seemed to be maintaining enough blood to stay for a while. He ran hands over her back, teasing out her long, damp, brown locks, soothing her, and appreciating her sweaty, lithe, womanly body. Then he heard a broken little sob and his heart almost stopped.\n\nChris desperately reached to cup her face, putting her hair back behind her ears and smothering her with kisses. &quot;Annabel, please! What's wrong?&quot;\n\nShe gave a quiet hiccup, &quot;Oh Chris, nothing's wrong. I never thought it would be like that. I don't even know why I'm crying. I'm just so happy.&quot;\n\n&quot;Well thank fuck,&quot; he muttered, wrapping his arms around her and pulling the duvet back up over them.\n\n&quot;Sorry,&quot; Annabel apologised as she dried her face on his t-shirt. &quot;It's stupid but I can't help it.&quot;\n\n&quot;I love you Annabel,&quot; Chris assured.\n\n&quot;I know. That's why I'm so happy,&quot; she said, gradually getting over her overwhelming emotions. &quot;Hey, let's go have a shower.&quot;\n\n&quot;Okay, I mean we better clean up before Susan and Lillian get up. I hope they didn't hear us. We were quiet, right?&quot;\n\n&quot;Well I tried to be, but you were pretty loud,&quot; she giggled, still titillated by his half-soft cock inside her.\n\n&quot;Bullshit,&quot; Chris shot back, pinching her superb ass. &quot;You're practically a screamer.&quot;\n\n&quot;I am not!&quot; Annabel shrieked happily, grabbing his abusing hands and pushing them up above his head. Now he was disarmed so she leaned down to kiss him, rubbing her lips teasingly over his before accepting his probing tongue for a while. &quot;Besides,&quot; she breathed, &quot;it's your fault. Your spell decided to latch onto my tit right when I came. I couldn't help it.&quot;\n\n&quot;Nice work buddy,&quot; Chris laughed. &quot;See? My boy Bartholomew's got my back.&quot;\n\n&quot;Oh shut up,&quot; Annabel slapped his chest lightly, releasing his hands. &quot;Let's go shower, it'll probably take half an hour just to get all your stuff out of me. It's so thick and it felt like you shot a pint or something.&quot;\n\n&quot;Umm. Sorry?&quot; Chris replied a little sheepishly, stroking a finger down her arm, making her shudder a little. He knew it certainly wasn't a pint but he loved how powerful his ejaculations seemed now. Clearly, parts of his dragon's prowess transferred back to his human form, permanently altered. The feel of his creamy seed jetting out deep inside her while his erection jumped with each shot, unbelievably good, especially without a condom. Not only due to the extra feeling, but because his dragon mind told him it meant he was breeding her. Breeding her.\n\n&quot;Don't be,&quot; Annabel smiled. &quot;It feels amazing when you cum in me, so hot, I can feel how hard it shoots out. Then there's the fact that it seems to make my orgasms better or just make me cum all over again. I can still feel it now, it's still so tingly and warm inside me... Magic. Honestly Chris, how is a girl supposed to have a fair chance against you?&quot;\n\n&quot;Maybe you aren't,&quot; Chris mused. &quot;Alright go, I'd die if Mom saw us like this.&quot;\n\nAnnabel pulled up, feeling his semi-soft penis slide out of her, inducing a little shudder of pleasure. She had her hand ready to catch whatever cum would no doubt flood out but it mostly stayed inside her as his wet dick slapped down on his belly. It's so sticky it won't even drain out of me properly, what a nightmare to clean, she mused. Although, it did feel quite delightful inside her, spreading warmth and little twitches up into her abdomen and belly. Whatever, if I can't get pregnant until he bites me then he can shoot me up all he wants. Annabel thought happily to herself, searching in the couch for her discarded cloths.\n\nThey eventually retreated back to their bedroom, using the lavish, tiled bathroom to clean off the last days' sweat and worries, together. \n\n***\n\nLillian just sighed as she sat on the floor with her back to the wall. Her bedroom door was just cracked. Their smell was thick in the air, their noisy, clumsy, loving sex was in the air. His smell was thickest, his rich blood and potent seed, rumoured to make the average female Being cream on the spot. The human girl had no inkling what she had deep in her womb at that second, the strength and magical power she would be infused with as it was absorbed by her body. An ounce would sell for thousands of dollars, far more valuable than gold. Only seven sources in the entire world.... If vampire bait existed, he was it: the ultimate temptation, blood and sex, beyond one's wildest dreams, wrapped up in a powerful, handsome, adorable, inexperienced, bumbling, boy-dragon. He would definitely need her protection, but then again why not just keep him for herself? Her dangerous, parasitic urges demanded it.\n\nSighing again, she gingerly extracted two guilty digits from her soaked pussy, avoiding her over-sensitised clit but running wet fingers over her hairless, puffy lips and mound teasingly. &quot;Way to let him not get to you, Lillian,&quot; she berated herself, looking over to her bedside table several feet away. She magically plucked out a few tissues, levitating them toward her. As she cleaned herself up, she could only hope the dragon was too naive to scent her pleasure and frustration.\n\n***\n\nThere, I hope you enjoyed it. Please give me some feedback.\n\nJust a warning, the next chapter has an incest focus. It's fair to say that it's been strongly alluded to. I know this isn't some people's cup of tea and as a result, I'll probably be putting it in the I/T category when I eventually post it. Anyway, if you miss it as a result but are still interested in reading the story sections, it'll be waiting for you when I post Chapter 5 back in SF/F. It's certainly not going to be the focus from now on. \n\nLTPC"
    ],
    "authorname": "ltpc",
    "tags": [
        "fantasy",
        "non-human",
        "dragon",
        "magic",
        "romance",
        "blowjob",
        "shower",
        "vampire",
        "elf"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/endangered-ch-03"
}
{
    "title": "Sierra Lives Pt. 12",
    "pages": [
        "Dear readers, \n\nThank you. I hope you have enjoyed reading \"Sierra Lives.\" I have enjoyed writing it. I know this chapter is short, but it is my intention that the section after this, \"Part 13,\" be the final section, so stayed tuned for the conclusion. Feel free to comment and offer ideas/advice as to how you want our little sexy sci fi melodrama to end.\n\nSincerely,\n\n~Abashed \n\n*****\n\nSierra lay on the plush bed, frowning up at the figure of Lord V which wavered in and out of focus. She groaned as shivers ran through her body only to be replaced with waves of smothering heat. Lord V calmly stroked her arms and cooed at her, \"shhh, it will be over soon. Are you too warm?\"\n\nSierra was sweating and could only nod her feverish head. Lord V began to gently undress her. In a fog, Sierra felt that this was wrong somehow but couldn't help leaning in to his blessedly cool hands. \n\nLord V was soon himself lying naked beside her on the bed, pulling her into a spooning embrace. Where their bodies touched, Sierra felt some relief from the burning buzz beneath her skin. His cool skin and soft touches seemed to calm her frantic pulse. \n\nStill, Sierra's heart lugged and pounded in her ears until it seemed she could hear another heartbeat complementing her own, drawing her body into its rhythm. The heat rampaging through her subsided and she felt cocooned by a cooling presence in her mind. \n\nLord V spoke quietly into her ear, \"My pet, you have done well.\" He caressed a cool hand down her body leaving a hand stroking her hip. \n\n\"Can you feel me inside you?\" he whispered. Sierra nodded almost in trance. \"Good,\" Lord V said. \"Tell me what you want?\" he prompted his voice low and unrelenting.\n\n\"I wish to be free,\" Sierra said her voice sleepy.\n\nLord V frowned slightly his eyes glittering. He guided her face up to his and placed a searing kiss on her soft mouth and clutched her tightly to him. Sierra felt her whole body respond to the kiss, electricity zipping down to her toes. \n\nLord V murmured trailing kisses down her neck, \"Ah, pet. You may leave me, but not for long.\"\n\nSierra frowned and shook herself loose from whatever trancelike hold he seemed to have over her. She could still feel a tugging at her blood and a slight dizziness, but she began trying to unwind herself from the long limbs of the Ingentian who caressed and fondled her. Through gritted teeth Sierra challenged, \"you said you wouldn't press me. What have you done?\"\n\nLord V chuckled at this. \"Ah, what did Miss Caspian say, 'everything's up for interpretation?'\"\n\nSierra tried to reach up and slap him, but he caught her arm. Her leg then tried to knee him in the groin while he wrestled with her arm. Lord V's face showed genuine surprise at her regained reflexes, but he easily pinned her leg with his own, maneuvering until he held her beneath him while she squirmed. \n\n\"I am truly impressed little Sierra. You should still be feeling my influence,\" Lord V mused.\n\n\"I told you, I am not your puppet\" Sierra retorted angrily.\n\nLord V smiled his tight little smile as he appreciatively surveyed her struggles. \"Look at your body responding so sweetly,\" his seductive voice coaxed. \n\nSierra scowled and her lips trembled as she took in her heaving breasts with their stiffening nipples.\n\nLord V's eyes shone, \"Do not deny yourself, Sierra. This is not because my blood courses through your veins.\" His voice deepened to a growl, \"you crave my cock because you are mine.\"\n\nShe could feel the moisture pooling between her legs. Her anger seemed only to fuel the raging want, the slippery undeniable craving she felt for him. She moaned in despair as she viewed his taut, beautiful body looming above her - a constrained threat of erotic dominance. His eyes pierced her and the length of his engorged cock twitched above her thighs.\n\n\"My body responding changes nothing,\" Sierra breathily insisted. Then her soft voice demanded, \"What did you do to me?\"\n\nLord V glared down at her, exasperation sharpening his features at her continued resistance. He steadied himself and explained, \"I have only made it so you can find me when you wish. When you have need of me, my blood will call out to you. I assure you, it is no longer affecting your reactions now. Can you deny your need, pet?\" \n\nSierra scowled up at his beautiful, predatory face, but she bit her plump lip. Lord V's smile widened and he leaned down to take one of her puckered, sensitive nipples in his mouth. \n\nSierra feebly tried to pull him off while her body dissolved into moans as he tongued and sucked her. Her hands ended up in his silky, thick white-silver hair as he released one nipple to worry and lather the other swollen nub, nipping it sharply before releasing her.\n\n\"Very, well, pet,\" Lord V sighed coming up for air and quirking his handsome face into a cool, taunting smirk above her, \"a deal is a deal.\" He released her and lay down next to her, tucking his sinewy, pale, muscular arms behind his head. Sierra panted, bewildered at the abrupt absence of him; her horny, lush human body shuddering with need.\n\nSierra sat up and glared down with frustration at the sculpted, languid form of Lord V. He returned her stare and licked his lips slowly. \"I will miss the taste of you, little human\" he said, his magnetic eyes boring into hers until Sierra tore her gaze away, heaving a heavy sigh. \n\nSierra rose off the bed on shaky legs and ambled carefully over to the small table. She ignored the still half-full wine glass and took a drink of the clear, tart liquid in the tumbler. As she straightened, she turned, \"I should poison you.\"\n\nLord V smiled a lazy smile at her, still lounging in his relaxed pose on the bed, his penis now a little deflated, but still a large distraction laying across his muscular thigh. \n\n\"Perhaps you should pet,\" Lord V offered evenly, \"but I don't think you will.\"\n\nSierra bawled her hands into fists and stalked back over to Lord V, her nudity forgotten, \"You are the worst . . . you smug . . . you murdering, pathetic rapist, horrible human being!\" she sputtered at him in halting tones trying to think of worse things to call him.\n\nHe simply grinned his predatory grin, \"Ah, but that's where you're wrong pet. I'm not human. You cannot expect that of me, but remember it was your own kind that sold you to me in the first place.\" \n\nLord V leaned back and closed his eyes before explaining in his imperious drawl, \"My only part in this has just been to want you. I wanted you the moment I saw you. I watched you fucked by that Shivean snake,\" Lord V's thin lips pursed into a smile though his eyes were still closed.\n\nAfter as short pause, Lord V opened his glittering eyes and smirked up at her before continuing, \"I couldn't wait until it was me pounding into you.\" \n\nSierra scowled while looking down at him, her ragged breaths making her breasts gently rise and fall. Lord V locked eyes with Sierra as he asserted huskily, \"I want to shove my cock in your tight hole right now until you scream your prettiest screams, but say the word and we'll turn this ship towards Earth or I'll let Miss Caspian know to prepare for another passenger.\"\n\nSierra looked down at the floor, her face blushing crimson, she relaxed her fists and returned her stormy, green eyes to his sparkling gray ones, \"Confine!\" Sierra barked. And to Lord V's surprise, cords snaked down grappling his ankles to either side of the bed, and as he lifted his hands to fend off the ropes lunging for his wrists, he was captured. His arms pulled above his head. Shock and amusement played over his exquisite features. \n\n\"That should not have worked, pet. Again, you impress me. However, I can easily release myself,\" Lord V admitted, his voice teasing.\n\n\"Why don't you then?\" Sierra sneered. Lord V raised an eyebrow at her, but didn't move a muscle.\n\nSierra climbed on top of him, straddling his swelling erection. She reached down and roughly handled him, stroking and cupping his balls. Lord V sucked in a breath, his eyes silver fire.\n\n\"This is my 'good bye,'\" Sierra said sullenly. Lord V's eyes narrowed to heated slits, but still he allowed himself to be bound and fondled.\n\nSierra braced her naked body over him and slowly slid her hot, sopping cunt down the hardening length of him. As the head pushed in she grunted, but she kept enveloping his silky shaft into her pussy until she felt him firmly stretching her as she sat on his cock. \n\nHe strained against the bonds, but did not release himself. Lord V's masculine groans and moans were arousingly clear as she began to drag herself up, her beautiful body riding him so her slick, tight tunnel constrained and sucked. \n\nUp and down she plunged, her body undulating with the motion, her breasts rhythmically bouncing above him. Lord V watched entranced as she rode him hard. Sierra closed her eyes and focused on the fullness, the rubbing pressure, her mouth parted, little pants escaping with each thrust.\n\n\"Release,\" Lord V hissed, but as the cord released him, his only movement was to reach his hands up and lightly paw and pluck her beautiful swaying breasts as he used his pelvic muscles to help thrust his cock into her from beneath. \n\nSierra ground into him, feeling her body tighten; thrumming with waves of pleasure as her clit swabbed across his hard cock. He pulled her nipples taut as she bounced furiously up and down. Sierra stuck out her chest, her arms lifted as her hands grappled with the tangles of her silky, heavy hair, holding it off her neck and then slap! She felt a stinging slap on her bouncing plump ass. Slap! Slap! The delicious stinging burn ripped across her ass cheeks again.\n\nLord V clasped her waist as he helped her impale herself on him. Sierra came, screaming bloody murder as her tight, wet pussy spasmed around his rock hard shaft. Lord V was cursing in a language Sierra couldn't understand as another titillating wave of pleasure made her eyes roll back into her head and she lost all sense of time and space for a moment.\n\nIt seemed Lord V moved with the speed of light for he threw Sierra off him so she landed on her back on the plush bed and he seemed instantly between her legs, hooking her knees up over his forearms so her ass was raised and his cock was angled perfectly to ram her cunt. Holding her legs, he slammed his cock into her without mercy and Sierra cried out at the intensity of the sensation. The fucking was punishingly fast and the sound of their bodies slapping together obscene. \n\nWhen Lord V pumped his cum inside her, he was balls deep, his chiseled chest shimmering with sweat as he threw his head back and howled an almost mournful, keening moan. \n\nSomething happened to Sierra in that moment. It was like she could feel the blinding buzz of his orgasm rattling through her own body. Lord V and Sierra were connected through a burning burst of hot, shattering pleasure that tingled and vibrated to her very core. \n\nSierra felt like she couldn't breathe and every inch of her body trembled and throbbed with over-sensitized nerves that crashed in waves of orgasmic fervor only to dissolve into a swooning, melting relaxed feeling in their wake. She couldn't imagine moving her heavy, humming limbs and her mind seemed to sing absentmindedly to itself unable to catch and hold any strains of logical thought.\n\nShe lay in Lord V's arms for some time, the silence between them only punctuated by their breathing which took some time to slow to a normal rhythm. It was like she was breaking a spell when she finally hazarded sitting up. Lord V clutched her briefly before allowing her to rise. He peered up at her, his small smile genuine and his handsome faced relaxed.\n\n\"I would like to bathe before I go,\" Sierra said simply.\n\nThere was a beat before Lord V registered her words and then his face twisted with anger and indignation.\n\n\"Go?\" he said coldly. \n\n\"A deal is a deal,\" Sierra said her face neutral, her calm green eyes unruffled by the growing angry sparks in his gray ones.\n\n\"You can't be serious,\" he hissed. \"After . . .\" Lord V locked his jaw and turned away from her. When he returned his gaze, his face was his normal mask of imperious distain. \"Very well, pet,\" he managed to spit out, but his jaw was tight as he swiftly rose from the bed and stalked over to his robes, flinging the dark fabric on as he hissed at her, \"I shall leave you to it. Ensign Malcom will come to fetch you when your Keplarian bitch has arrived to . . .\" \n\nLord V stopped and stood in strained, exquisite profile unable to bring himself to look at her. Without finishing his sentence, he slapped the wall with his hand and whisked out the doorway that appeared. \n\nSierra wasn't sure if she was feeling 50 emotions that canceled each other out into static or whether she was just numb. There was some sliver of cruel satisfaction that she knew she had hurt him. She steadied herself with a deep breath and began walking towards the entrance to the bath house like she was on autopilot. 'Just get away,' her mind told her, 'there will be time to think later.'\n\n~\n\nAfter Lord fuckface's, albeit mocking, threats towards Jarok, Gerra wasn't sure it was a great idea for them to come in Jarok's ship instead of just her coming to retrieve Sierra on the consortium transport, but Jarok was insistent this time. Jarok clearly had the hots for the human babe and Gerra had to admit she liked the gal almost as much as she detested Lord fuckface. In any case, Gerra'd feel a lot better once they were free and clear.\n\nSierra entered the docking bay escorted not by Lord V and his bodyguards, but simply led by a young Ingentian ensign. Sierra wore a stunning, sexy red dress and Gerra heard Jarok clear his throat and shuffle his feet. \n\nJarok had been horrified and angry that Gerra had returned without the human girl, but Gerra had warned him that if he didn't respect Sierra's choices, he was no better than Lord V.\n\nAs they approached the ship, Gerra thought there was something different about Sierra, a hard look to her pretty face. Jarok stepped towards Sierra expectantly, but Sierra only smiled coolly up at him.\n\n\"Thank you for coming for me,\" Sierra said evenly, she then turned to the young ensign and remarked, \"Ensign Malcom, thank you, that will be all.\"\n\nGerra raised an eyebrow. Jarok stood looking both a bit puzzled and a bit taken with the arresting figure of Sierra in the red dress as she walked imperiously up the entrance ramp to the stargalley. Gerra shrugged and followed. Jarok frowned before turning to stride inside as well.\n\nOnce belted in safely, Jarok turned to Sierra sitting in the passenger galley. \"Sierra,\" Jarok began, but Sierra held her hand up as a gesture to cease. She looked up into his tawny, brown eyes and smiled her soft, sweet smile, \"Jarok, please take me to General Conroy. I have some things I need to learn before I go home to Earth.\" Jarok's big, brown eyes misted with melancholy, but he nodded and turned back to the viewscreen and began setting a course. \n\nGerra grinned at Jarok from the co-pilot seat and whooped, \"Let's get the fuck out of here.\"\n\n~\n\nLord V watched his viewscreen intently as the graceful figure of his Sierra sashayed up the stargalley ramp in the glittering red dress he had given her. His jaw was tight as he steepled his long fingers in front of him. He had never heard of any Ingentian performing the VerKut binding ritual with a human, but even now he could sense her essence, warm and softly glowing somewhere to his left in the docking bay. \"You can run, but you can never hide from me now, pet,\" he murmured.\n\nHe wasn't entirely sure how Sierra's human physiology would respond after his blood had fully taken hold and the transformation was complete. Plus, there was her new venom to contend with. \n\nLord V knew he had acted uncharacteristically rashly, but watching her leave even though he knew it would not be permanent, drilled a hole of longing and despair in his psyche. He had no choice, he told himself.\n\nHe shook his handsome, sharp featured head in irritation. What if she were wounded or killed before she could return? He couldn't trust her vagabond 'so called' friends to protect her. He nearly halted the stargalley's ascent by ordering the cruiser bay doors to close.\n\nInstead, Lord V gritted his teeth as he watched Jarok's ship leave the protection of his own cruiser carrying away his \"szeretett,\" an old Ingentian word for \"beloved.\" A poetic, silly word he thought would never have any true meaning in his life.\n\nLord V lightly tapped a few glowing symbols on the clear dark glass in front of him then scrolled the screen left a few times before tapping his finger on a particular spindly scrawl of Ingentian words surrounded by a square. \n\n\"Until the het of Ketto, my dear. I don't think you'll last much past then, and I'll be waiting. I'll make you beg for making me wait.\" Lord V smiled his tight, little smile, but turned his gray eyes down to gaze where his finger rested on the future date. \"Neither of us can escape this now,\" he whispered."
    ],
    "authorname": "Abashed",
    "tags": [
        "bondage",
        "nonhuman",
        "sci fi",
        "fantasy",
        "non-human",
        "non-con",
        "noncon"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/sierra-lives-pt-12"
}